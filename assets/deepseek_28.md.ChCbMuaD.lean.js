import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as _,f as u,F as y,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function N(s,e,l,m,r,a){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const O=d(k,[["render",N],["__scopeId","data-v-49beecd8"]]),A=JSON.parse('[{"question":"You are given an array of integers and an integer k. You need to determine if there are two distinct indices i and j in the array such that the absolute difference between the array values at these indices is at most k and the absolute difference between the indices i and j is exactly d. -----Input:----- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers n and d — the number of elements in the array and the required difference between the indices respectively. - The second line of each test case contains n space-separated integers denoting the elements of the array. -----Output:----- For each test case, print \\"YES\\" if such indices exist, otherwise print \\"NO\\". -----Constraints----- - 1 leq T leq 10^4 - 2 leq n leq 10^5 - 0 leq k leq 10^9 - 0 leq arr[i] leq 10^9 - Sum of n over all test cases does not exceed 10^6 -----Sample Input:----- 3 5 2 1 3 5 2 4 4 1 1 5 9 13 6 3 1 2 3 4 5 6 -----Sample Output:----- YES NO YES Here\'s a step-by-step break down of the sample cases: 1. For the first test case, the array is [1, 3, 5, 2, 4] and d = 2. We can see that the absolute difference between 1 and 5 is 4 (> k) and the absolute difference between their indices is 2 (== d), so it returns YES. 2. For the second test case, the array is [1, 5, 9, 13] and d = 1. There is no pair where the absolute difference is at most k = 0, so it returns NO. 3. For the third test case, the array is [1, 2, 3, 4, 5, 6] and d = 3. The absolute difference between 1 and 4 is 3 (<= k) and the absolute difference between their indices is 3 (== d), so it returns YES.","solution":"def check_indices(arr, k, d): Checks if there exist two distinct indices i and j in the array such that: - The absolute difference between the array values at these indices is at most k. - The absolute difference between the indices i and j is exactly d. n = len(arr) for i in range(n - d): if abs(arr[i] - arr[i + d]) <= k: return \\"YES\\" return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]); index += 1 results = [] for _ in range(T): n = int(data[index]) d = int(data[index + 1]) index += 2 arr = list(map(int, data[index:index + n])) index += n results.append(check_indices(arr, k, d)) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"# Task Alice is organizing a book fair and wants to categorize all the books into different genres. Each book belongs to a specific genre, and she has a list of genres and the respective amount of books for each genre. Her goal is to create as few shelves as possible, where each shelf can only hold up to a certain number of books. Write an algorithm to help Alice determine the minimum number of shelves required to store all the books. # Input - `genres`: an array of positive integers where each integer represents the number of books for a genre. - `shelf_capacity`: an integer representing the maximum number of books one shelf can hold. Constraints: - 1 <= genres.length <= 1000 - 1 <= genres[i] <= 100 - 1 <= shelf_capacity <= 1000 # Output An integer representing the minimum number of shelves required. # Examples For `genres = [100, 200, 300]` and `shelf_capacity = 200`, the output should be `3`. ``` She can use the shelves as follows: - Shelf 1: 100 books (from the first genre). - Shelf 2: 200 books (from the second genre). - Shelf 3: 200 books (remaining 100 from the second genre and 100 from the third genre). Total shelves: 3 ``` For `genres = [50, 50, 50, 50]` and `shelf_capacity = 100`, the output should be `2`. ``` She can use the shelves as follows: - Shelf 1: 50 books (from the first genre) + 50 books (from the second genre). - Shelf 2: 50 books (from the third genre) + 50 books (from the fourth genre). Total shelves: 2 ```","solution":"def min_shelves_required(genres, shelf_capacity): Function to calculate the minimum number of shelves required to store all the books. :param genres: List of integers where each integer is the number of books in a genre. :param shelf_capacity: Maximum number of books one shelf can hold. :return: Minimum number of shelves required. total_books = sum(genres) # Calculate the minimum number of shelves required shelves_needed = (total_books + shelf_capacity - 1) // shelf_capacity return shelves_needed"},{"question":"# Task A university baseball coach wants to optimize the batting order of his players for a tournament. He has statistics that tell him the batting average of each player. He wants to arrange the players in such a way that the sum of the batting averages in the first half of the order (first half players) is as close as possible to the sum of the batting averages in the second half of the order (second half players). Given an integer array `batting_averages` that represents the batting averages of the players, implement a function that returns a boolean value `True` if it\'s possible to split the batting_averages into two subarrays with equal sum. If it\'s not possible, return `False`. # Function Signature ```python def can_split_batting_order(batting_averages: List[int]) -> bool: ``` # Input - `batting_averages` (List[int]): An array of integers where each integer represents the batting average of a player. # Output - A boolean value (`True` or `False`). # Example For `batting_averages = [1, 5, 11, 5]`, the output should be `True`. ``` Explanation: The array can be split into two subarrays with equal sum: [1, 5, 5] and [11]. ``` For `batting_averages = [1, 2, 3, 5]`, the output should be `False`. ``` Explanation: The array cannot be split into two subarrays with equal sum. ``` # Constraints - The length of `batting_averages` will be between 1 and 20 inclusive. - Each integer in `batting_averages` will be between 0 and 100 inclusive.","solution":"from typing import List def can_split_batting_order(batting_averages: List[int]) -> bool: total_sum = sum(batting_averages) # If the total sum is odd, it cannot be divided into two equal parts if total_sum % 2 != 0: return False target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for avg in batting_averages: for i in range(target, avg - 1, -1): dp[i] = dp[i] or dp[i - avg] return dp[target]"},{"question":"# Task Given a string consisting of only the characters \'a\', \'b\', and \'c\', you are asked to rearrange the characters in the string so that no two identical characters are adjacent to one another. Return the rearranged string. If it is not possible to rearrange the string in such a way, return an empty string. # Example For `s = \\"aabbc\\"`, the output should be `\\"abcab\\"`, `\\"abacb\\"`, `\\"acbab\\"` or any other string where no two identical characters are adjacent. For `s = \\"aaab\\"`, the output should be `\\"\\"` (an empty string) as it is not possible to rearrange the string in such a way. # Input/Output - `[input]` a string `s` A string consisting only of the characters \'a\', \'b\', and \'c\'. Constraints: `1 ≤ s.length ≤ 100` - `[output]` a string Rearranged string where no two identical characters are adjacent, or an empty string if it is not possible.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string so that no two adjacent characters are the same. Returns an empty string if not possible. # Count the frequency of each character freq = Counter(s) max_heap = [] # Create a max heap based on character frequency for char, count in freq.items(): heapq.heappush(max_heap, (-count, char)) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_char is not None and prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 if len(result) != len(s): return \\"\\" else: return \\"\\".join(result)"},{"question":"# Task You are given an integer array `arr` and an integer `k`. Your task is to reverse every sub-array of `k` elements in the given array. If there are less than `k` elements remaining at the end of the array, reverse all remaining elements without breaking them into a separate sub-array. # Example For `arr = [1, 2, 3, 4, 5, 6, 7, 8]` and `k = 3`, the result should be `[3, 2, 1, 6, 5, 4, 7, 8]`. ``` Reverse the first 3 elements: [3, 2, 1, 4, 5, 6, 7, 8] Reverse the next 3 elements: [3, 2, 1, 6, 5, 4, 7, 8] Reverse the remaining 2 elements: [3, 2, 1, 6, 5, 4, 8, 7] ``` For `arr = [1, 2, 3, 4, 5]` and `k = 2`, the result should be `[2, 1, 4, 3, 5]`. ``` Reverse the first 2 elements: [2, 1, 3, 4, 5] Reverse the next 2 elements: [2, 1, 4, 3, 5] Remaining element: [2, 1, 4, 3, 5] ``` For `arr = [1, 2, 3, 4]` and `k = 4`, the result should be `[4, 3, 2, 1]`. ``` Reverse the first 4 elements: [4, 3, 2, 1] ``` # Input/Output - `[input]` integer array `arr` A list of integers. - `[input]` integer `k` The number of elements to be reversed in each group. (1 ≤ `k` ≤ `length of arr`) - `[output]` an array of integers The modified array after reversing every sub-array of `k` elements.","solution":"def reverse_subarrays(arr, k): Reverses every sub-array of k elements in the given array. Args: arr : list of int : input array of integers k : int : number of elements to be reversed in each group Returns: list of int : array after reversing each sub-array of k elements n = len(arr) result = [] for i in range(0, n, k): sub_array = arr[i:i+k] result.extend(reversed(sub_array)) return result"},{"question":"You are given an integer array `nums` and an integer target. You need to determine if there are three integers in `nums` such that the sum is closest to the target. Return the sum of the three integers. You may assume that each input would have exactly one solution. Example 1: Input: nums = [-1, 2, 1, -4], target = 1 Output: 2 Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2). Example 2: Input: nums = [1, 1, 1, 0], target = 100 Output: 3 Explanation: The sum that is closest to the target is 3. (1 + 1 + 1 = 3). Note: - The length of the input array `nums` will be greater than or equal to 3. - Each element in `nums` will be within the range [-1000, 1000]. - The target value will be within the range [-1000, 1000].","solution":"def three_sum_closest(nums, target): nums.sort() closest_sum = float(\'inf\') for i in range(len(nums) - 2): left, right = i + 1, len(nums) - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if abs(current_sum - target) < abs(closest_sum - target): closest_sum = current_sum if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: return current_sum return closest_sum"},{"question":"Write the function `simple_calculator` that takes in a string representing a basic mathematical expression with two operands and one operator. The function should return the result of the expression. You can assume the input will always be in the form \\"operand1 operator operand2\\", where operand1 and operand2 are integers, and operator is one of the \'+\', \'-\', \'*\', \'/\'. Your function should handle: - Addition - Subtraction - Multiplication - Division Note that division should return a float if needed. Division by zero should be handled appropriately by returning the string \\"Error: Division by zero\\". Examples: `simple_calculator(\\"5 + 3\\")` will return `8` `simple_calculator(\\"10 - 2\\")` will return `8` `simple_calculator(\\"4 * 2\\")` will return `8` `simple_calculator(\\"16 / 2\\")` will return `8.0` `simple_calculator(\\"16 / 0\\")` will return `\\"Error: Division by zero\\"`","solution":"def simple_calculator(expression): Takes in a string representing a basic mathematical expression with two operands and one operator, and returns the result of the expression. # Split the expression into operand1, operator, and operand2 operand1, operator, operand2 = expression.split() # Convert operands to integers operand1 = int(operand1) operand2 = int(operand2) if operator == \'+\': return operand1 + operand2 elif operator == \'-\': return operand1 - operand2 elif operator == \'*\': return operand1 * operand2 elif operator == \'/\': if operand2 == 0: return \\"Error: Division by zero\\" else: return operand1 / operand2 else: return \\"Error: Unsupported operator\\""},{"question":"Palindrome Permutations *** Introduction A string is considered a permutation of a palindrome if the characters of the string can be arranged to form a palindrome. A palindrome is a word or phrase that reads the same forward and backward, ignoring spaces, punctuation, and case sensitivity. For instance, \\"Tact Coa\\" is a permutation of \\"taco cat\\", which is a palindrome. Task You will be given a string `str` composed of alphanumeric characters and whitespaces. Your task is to write a function that checks if the given string is a permutation of a palindrome. The function should return `true` if the string is a permutation of a palindrome and `false` otherwise. Detailed requirements: - Ignore spaces and case when verifying for palindrome permutations. - Non-alphanumeric characters (except whitespaces) should not be considered in the input. - The function should be case-insensitive, treating \\"A\\" and \\"a\\" as the same character. Examples # Example 1: * **Input:** \\"Tact Coa\\" * **Output:** true * **Explanation:** \\"Tact Coa\\" can be rearranged to \\"taco cat\\", which is a palindrome. # Example 2: * **Input:** \\"Was it a car or a cat I saw\\" * **Output:** true * **Explanation:** Ignoring spaces and case, the string can be rearranged to form the palindrome \\"A car a cat I saw\\". # Example 3: * **Input:** \\"This is not a palindrome\\" * **Output:** false * **Explanation:** There is no arrangement of the characters that forms a palindrome. Constraints: - The length of the input string will not exceed 1000 characters. - The string will contain only alphanumeric characters and whitespaces. Function Signature: ```python def is_palindrome_permutation(str: str) -> bool: # Your code here ``` Example Code: ```python def is_palindrome_permutation(s: str) -> bool: # Remove whitespaces and convert to lowercase s = \'\'.join(filter(str.isalnum, s)).lower() char_count = {} # Count occurrences of each character for char in s: char_count[char] = char_count.get(char, 0) + 1 # Check the number of odd counts odd_count = sum(1 for count in char_count.values() if count % 2 == 1) # A palindrome permutation can have at most one character with an odd count return odd_count <= 1 ```","solution":"def is_palindrome_permutation(s: str) -> bool: # Remove whitespaces and convert to lowercase s = \'\'.join(filter(str.isalnum, s)).lower() char_count = {} # Count occurrences of each character for char in s: char_count[char] = char_count.get(char, 0) + 1 # Check the number of odd counts odd_count = sum(1 for count in char_count.values() if count % 2 == 1) # A palindrome permutation can have at most one character with an odd count return odd_count <= 1"},{"question":"# Task Given a list of integers, your task is to find the smallest positive integer that is missing from the list. A positive integer is defined as any integer greater than zero. The list may contain duplicate values and negative numbers. Your solution should be efficient in terms of time complexity. # Example For the list: `[3, 4, -1, 1]` the output should be: `2` For the list: `[1, 2, 0]` the output should be: `3` # Input/Output - `[input]` array of integers `arr` Constraints: `1 ≤ arr.length ≤ 1000, -1000 ≤ arr[i] ≤ 1000` - `[output]` integer The smallest positive integer that is missing from the list.","solution":"def find_smallest_missing_positive(arr): Returns the smallest positive integer that is missing from the list. n = len(arr) # First move all positive numbers to the correct position for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] # Then, find the first place where the number is not in the right position for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"Given two strings, S and T, you need to determine if it\'s possible to transform S into T by inserting, deleting, or replacing at most one character. Return a boolean value where true indicates that the transformation is possible and false indicates it is not. -----Constraints----- - 1 leq |S|, |T| leq 1000 - S and T consist of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: ``` S T ``` -----Output----- Print \\"true\\" if S can be transformed into T by modifying at most one character; otherwise, print \\"false\\". -----Sample Input 1----- pale ple -----Sample Output 1----- true -----Sample Input 2----- pale bake -----Sample Output 2----- false Explanation: In the first example, \\"pale\\" can be transformed into \\"ple\\" by deleting the \'a\' character. In the second example, \\"pale\\" and \\"bake\\" have different characters at more than one position, hence not possible with one modification.","solution":"def is_one_edit_distance(s, t): Check if it\'s possible to transform one string into another string by inserting, deleting, or replacing at most one character. m, n = len(s), len(t) if abs(m - n) > 1: return False if m > n: return is_one_edit_distance(t, s) i, shift = 0, n - m while i < m and s[i] == t[i]: i += 1 if i == m: return shift != 0 if shift == 0: i += 1 while i < m and s[i] == t[i + shift]: i += 1 return i == m # Example usage: S = \\"pale\\" T = \\"ple\\" print(\\"true\\" if is_one_edit_distance(S, T) else \\"false\\")"},{"question":"A company wants to implement a new warehouse management system. The warehouse can be represented as a grid with N rows and M columns where each cell (r, c) represents a specific storage spot. Each row is numbered from 1 to N, and each column from 1 to M. An item can be stored in any spot except those which are blocked. Each blocked spot is denoted by its coordinates (x_b, y_b). The task is to determine the number of ways to place two distinct items in the warehouse such that neither of them is placed in a blocked spot. Note that the placement of items in spot (r1, c1) and (r2, c2) is considered different from placing them in (r2, c2) and (r1, c1) even if r1 = r2 and c1 = c2. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - The second line contains an integer B denoting the number of blocked spots. - The next B lines each contain two space-separated integers x_b and y_b denoting the blocked spots. -----Output----- For each test case, print a single line containing one integer — the number of possible ways to place the two distinct items. -----Constraints----- - 1 le T le 100 - 1 le N, M le 50 - 0 le B le N times M -----Example Input----- 2 3 3 1 2 2 4 4 2 2 2 3 3 -----Example Output----- 16 68 -----Explanation----- Example case 1: The total number of storage spots is 9. One spot is blocked, so the number of available spots is 8. The number of ways to place two items in 8 spots is 8 times 7 = 56. Example case 2: The total number of storage spots is 16. Two spots are blocked, so the number of available spots is 14. The number of ways to place two items in 14 spots is 14 times 13 = 182.","solution":"def count_ways_to_place_items(n, m, blocked_spots): Returns the number of ways to place two distinct items in a warehouse grid with blocked spots. Parameters: n (int): Number of rows in the warehouse grid. m (int): Number of columns in the warehouse grid. blocked_spots (list of tuples): List of coordinates for blocked spots. Returns: int: Number of ways to place two distinct items in the available spots. total_spots = n * m available_spots = total_spots - len(blocked_spots) # If there are less than 2 available spots, it\'s not possible to place two items if available_spots < 2: return 0 return available_spots * (available_spots - 1) # Function to process multiple test cases def calculate_ways_for_test_cases(test_cases): results = [] for test_case in test_cases: n, m, b, blocked_spots = test_case results.append(count_ways_to_place_items(n, m, blocked_spots)) return results"},{"question":"In a far-off series of islands, each island is connected to some others by a network of one-way bridges. Each bridge has a time cost associated with crossing it. The island council wants to ensure that every island is reachable from a special administrative island, Island 1. You are tasked with checking this condition and finding the minimum time cost to travel from Island 1 to all other islands. Suppose you have N islands and M one-way bridges connecting them. Write a program that determines the minimum travel time from Island 1 to every other island. If an island is not reachable from Island 1, indicate this with a -1. -----Input----- - The first line of the input contains two integers N and M denoting the number of islands and the number of bridges respectively. - The next M lines each contain three integers u, v, and w representing a one-way bridge from island u to island v with a time cost of w. -----Output----- Print N-1 lines. Each line should contain a single integer, representing the minimum travel time from Island 1 to Island i for i from 2 to N. If Island i is not reachable from Island 1, print -1 for that island. -----Constraints----- - 1 leq N leq 10^5 - 1 leq M leq 2 times 10^5 - 1 leq u, v leq N - 1 leq w leq 10^9 - There are no duplicate bridges. -----Example Input----- 5 6 1 2 2 1 3 4 2 4 7 2 5 3 3 5 1 4 5 1 -----Example Output----- 2 4 9 5 -----Explanation----- - The minimum travel time from Island 1 to Island 2 is 2. - The minimum travel time from Island 1 to Island 3 is 4. - The minimum travel time from Island 1 to Island 4 is 2 + 7 = 9 (1 -> 2 -> 4). - The minimum travel time from Island 1 to Island 5 is 2 + 3 = 5 (1 -> 2 -> 5).","solution":"import heapq def min_travel_time(n, m, bridges): # Construct the graph graph = [[] for _ in range(n + 1)] for u, v, w in bridges: graph[u].append((v, w)) # Initialize the distance array INF = float(\'inf\') distances = [INF] * (n + 1) distances[1] = 0 # Use a priority queue for Dijkstra\'s algorithm pq = [(0, 1)] # (cost, node) while pq: current_dist, u = heapq.heappop(pq) if current_dist > distances[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) # Prepare the result list result = [] for i in range(2, n + 1): if distances[i] == INF: result.append(-1) else: result.append(distances[i]) return result"},{"question":"Given an array of integers and a target sum, determine the number of unique quadruplets (four elements) in the array that sum to the target. -----Constraints----- - The array length must be between 1 and 200, inclusive. - Each element in the array is an integer between -10^9 and 10^9, inclusive. - The target sum is an integer between -10^9 and 10^9, inclusive. -----Input----- Input is given from Standard Input in the following format: n array target -----Output----- Use the following format: count Here, count should be the number of unique quadruplets in the array that sum to the target. -----Sample Input----- 5 1 0 -1 0 -2 2 0 -----Sample Output----- 3 Consider the array {1, 0, -1, 0, -2, 2} and target sum of 0. Among the unique quadruplets that sum to 0, there are: - {1, -1, -2, 2} - {1, -1, 0, 0} - {0, 0, -2, 2} Hence, the output is 3.","solution":"def four_sum_count(arr, target): Finds the number of unique quadruplets in the array that sum to the target. arr.sort() n = len(arr) quadruplets = set() for i in range(n - 3): for j in range(i + 1, n - 2): left = j + 1 right = n - 1 while left < right: quad_sum = arr[i] + arr[j] + arr[left] + arr[right] if quad_sum == target: quadruplets.add((arr[i], arr[j], arr[left], arr[right])) left += 1 right -= 1 elif quad_sum < target: left += 1 else: right -= 1 return len(quadruplets)"},{"question":"You are given an array a consisting of n integers and an integer k. You need to determine if there exists a subarray of length exactly k such that its elements can be rearranged to form a contiguous sequence. A contiguous sequence is an integer sequence where the difference between each pair of consecutive elements is 1. -----Input----- The first line contains two integers n and k (2 le k le n le 3 cdot 10^5), representing the length of the array and the required subarray length, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^5) — the elements of the array. -----Output----- Print \\"YES\\" if there exists a subarray of length exactly k whose elements can be rearranged to form a contiguous sequence. Otherwise, print \\"NO\\". -----Example----- Input 6 3 4 3 2 6 5 7 Output YES Input 5 4 1 3 4 6 8 Output NO -----Note----- In the first example, consider the subarray a_{1 ldots 3} = [4, 3, 2]. By rearranging it, we get the contiguous sequence [2, 3, 4], so the answer is \\"YES\\". In the second example, there is no subarray of length 4 that can be rearranged to form a contiguous sequence. Thus, the answer is \\"NO\\".","solution":"def can_form_contiguous_subarray(arr, k): Determine if there exists a subarray of length exactly k whose elements can be rearranged to form a contiguous sequence. Parameters: arr (list): The list of integers. k (int): The required subarray length. Returns: str: \\"YES\\" if such a subarray exists, otherwise \\"NO\\". n = len(arr) for i in range(n - k + 1): subarray = arr[i:i + k] subarray_sorted = sorted(subarray) # Check if the sorted subarray forms a contiguous sequence is_contiguous = all(subarray_sorted[j] + 1 == subarray_sorted[j + 1] for j in range(k - 1)) if is_contiguous: return \\"YES\\" return \\"NO\\""},{"question":"Write a function `combine_arrays` that takes two lists of integers, `arr1` and `arr2`, and returns a new list that contains all elements from `arr1` and `arr2`, but in sorted order without duplicates. You must not use any built-in functions (like `sort()` or `set()`) that simplify the task. Implement the necessary algorithms manually. For example: ``` combine_arrays([3, 1, 3, 2], [4, 2, 5]) # returns [1, 2, 3, 4, 5] combine_arrays([1, 2, 3], [3, 4, 5]) # returns [1, 2, 3, 4, 5] combine_arrays([], [1, 2, 3]) # returns [1, 2, 3] ``` Write your function below: ```python def combine_arrays(arr1, arr2): # Your code here ```","solution":"def combine_arrays(arr1, arr2): Combines two lists of integers into a new sorted list without duplicates. combined = arr1 + arr2 # Remove duplicates result = [] seen = set() for number in combined: if number not in seen: seen.add(number) result.append(number) # Perform insertion sort on the result list for i in range(1, len(result)): key = result[i] j = i - 1 while j >= 0 and key < result[j]: result[j + 1] = result[j] j -= 1 result[j + 1] = key return result"},{"question":"Given a list of integers, where each number represents the nominal value of a coin, you are asked to determine the minimum number of coins that add up to a given sum. Write a function `minCoins(coins: List[int], amount: int) -> int` that takes a list of integers `coins` and a single integer `amount` and returns the minimum number of coins required to make up that amount. If that amount cannot be made up by any combination of the coins, return `-1`. For example: ```python minCoins([1, 2, 5], 11) -> 3 # Explanation: 11 = 5 + 5 + 1 minCoins([2], 3) -> -1 # Explanation: It\'s not possible to make up 3 with only coins of 2 ``` You may assume that you have an infinite number of each kind of coin. In your implementation, consider the following constraints: - 1 ≤ `amount` ≤ 10^4 - 1 ≤ `coins.length` ≤ 100 - 1 ≤ `coins[i]` ≤ 100","solution":"from typing import List def minCoins(coins: List[int], amount: int) -> int: Returns the minimum number of coins required to make up the given amount. If it\'s not possible to make up the amount, returns -1. # We initialize an array dp with size (amount + 1) with infinity values dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 # Base case, 0 coins needed to make amount 0 # Iterate through each coin and update the dp table for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # If dp[amount] is still infinity, it means it\'s not possible to form the amount return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"You have to write a function that describes the results of an exam: ```python def exam_result(score): pass ``` if the score (integer) is 90 or above, you should return \\"Excellent\\". if the score is between 70 and 89 inclusive, you should return \\"Good\\". if the score is between 50 and 69 inclusive, you should return \\"Pass\\". if the score is below 50, you should return \\"Fail\\".","solution":"def exam_result(score): Returns the result of an exam based on the given score. Parameters: score (int): The score obtained in the exam. Returns: str: The result of the exam (\\"Excellent\\", \\"Good\\", \\"Pass\\", \\"Fail\\"). if score >= 90: return \\"Excellent\\" elif score >= 70: return \\"Good\\" elif score >= 50: return \\"Pass\\" else: return \\"Fail\\""},{"question":"Alice has recently started gardening and is excited about her new circular vegetable garden. She plants vegetables in a circular arrangement and wants to know if it\'s possible to equally divide the vegetables into groups. Alice considers each vegetable the same and wants to split them up into `N` groups such that each group has the same number of vegetables. She seeks out your help to determine if such a division is possible. To simplify matters, you need to determine if the total number of vegetables `V` can be evenly divided by `N`. -----Input----- The first line of input consists of a single integer `T`, denoting the number of test cases. The next `T` lines each consist of two space-separated integers, `V` (the total number of vegetables) and `N` (the number of groups Alice wants to split the vegetables into). -----Output----- Output `T` lines. Each of these lines should contain \\"Yes\\" if the vegetables can be divided equally into the given number of groups, otherwise \\"No\\". -----Constraints----- - 1 ≤ T ≤ 105 - 1 ≤ V ≤ 1012 - 1 ≤ N ≤ 1012 -----Example----- Input: 4 12 3 15 4 10 5 1000 10 Output: Yes No Yes Yes","solution":"def can_divide_vegetables(test_cases): Determines if the total number of vegetables can be equally divided by the number of groups. Args: test_cases (list of tuple): List of tuples where each tuple contains two integers V and N. Returns: list: List of strings \\"Yes\\" or \\"No\\" for each test case. results = [] for V, N in test_cases: if V % N == 0: results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Reading input and wrapping it in function for better testing def main(input_data): data = input_data.strip().split(\'n\') T = int(data[0]) test_cases = [tuple(map(int, line.split())) for line in data[1:T + 1]] return can_divide_vegetables(test_cases)"},{"question":"Imagine you are building a text-based game and you need to implement the inventory system for the player\'s character. The inventory is represented as a dictionary where the keys are the item names and the values are the quantities of those items. You need to implement two functions: 1. `add_to_inventory(inventory, items)`: This function takes the current inventory and a list of items to be added. It should update the inventory by increasing the count of each item in the list. 2. `remove_from_inventory(inventory, item, quantity)`: This function takes the current inventory, an item to be removed, and the quantity to remove. If the item is not in the inventory or if the quantity to remove is more than what is available, the function should return `False`. Otherwise, it should remove the specified quantity and return `True`. Write the two functions as described. Here is an example: ```python def add_to_inventory(inventory, items): # Your code here def remove_from_inventory(inventory, item, quantity): # Your code here # Example usage inventory = {\'apple\': 2, \'banana\': 3} add_to_inventory(inventory, [\'apple\', \'orange\', \'banana\', \'banana\']) # inventory should now be: {\'apple\': 3, \'banana\': 5, \'orange\': 1} success = remove_from_inventory(inventory, \'banana\', 2) # success should be True, and inventory should now be: {\'apple\': 3, \'banana\': 3, \'orange\': 1} success = remove_from_inventory(inventory, \'orange\', 2) # success should be False, as there are not enough \'orange\' items ``` Your task is to complete the `add_to_inventory` and `remove_from_inventory` functions. Be sure to handle edge cases and update the inventory dictionary in place.","solution":"def add_to_inventory(inventory, items): Adds items to the inventory. Updates the quantities of items. :param inventory: dictionary with current inventory where keys are item names and values are quantities :param items: list of items to be added to the inventory for item in items: if item in inventory: inventory[item] += 1 else: inventory[item] = 1 def remove_from_inventory(inventory, item, quantity): Removes a specified quantity of an item from the inventory. :param inventory: dictionary with current inventory where keys are item names and values are quantities :param item: the name of the item to be removed :param quantity: the quantity to remove from the inventory :return: True if the quantity was successfully removed, else False if item in inventory and inventory[item] >= quantity: inventory[item] -= quantity if inventory[item] == 0: del inventory[item] return True return False"},{"question":"You are given a matrix of integers and multiple queries. Each query consists of four integers that define a submatrix. For each query, compute the sum of all elements within the specified submatrix. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the matrix. Each of the next n lines contains m integers a[i][j] (1 ≤ a[i][j] ≤ 10^4) — the elements of the matrix. The next line contains an integer q (1 ≤ q ≤ 10000) — the number of queries. Each of the following q lines contains four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m) - the coordinates of the top-left and bottom-right corners of a submatrix. -----Output----- For each query, print the sum of all elements within the specified submatrix. -----Examples----- Input 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output 12 28 -----Note----- Given matrix is: 1 2 3 4 5 6 7 8 9 For the first query, the submatrix from (1, 1) to (2, 2) is: 1 2 4 5 Sum of elements: 1 + 2 + 4 + 5 = 12 For the second query, the submatrix from (2, 2) to (3, 3) is: 5 6 8 9 Sum of elements: 5 + 6 + 8 + 9 = 28","solution":"def matrix_submatrix_sum(n, m, matrix, queries): Returns the result of submatrix sum for each query. :param n: number of rows in the matrix :param m: number of columns in the matrix :param matrix: 2D list containing the matrix elements :param queries: list of queries where each query is represented by four integers (x1, y1, x2, y2) :return: list of integers representing the sum of elements in submatrices defined by the queries # Initialize prefix sum array prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] # Compute prefix sum for the matrix for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) result = [] # Process each query for (x1, y1, x2, y2) in queries: # Compute the sum for the query using the prefix sum array submatrix_sum = (prefix_sum[x2][y2] - prefix_sum[x1-1][y2] - prefix_sum[x2][y1-1] + prefix_sum[x1-1][y1-1]) result.append(submatrix_sum) return result"},{"question":"Sam is organizing a book fair and wants to keep track of book sales. Each sale record consists of a book title and the number of copies sold. Your task is to record the sales and then identify the best-selling book title. If there is a tie, return the title that comes first lexicographically. -----Input----- The first line contains an integer n, the number of books sold. The next n lines contain two elements: a string representing the book title (only alphabetical characters) and an integer k (0 <= k <= 100), representing the number of copies sold. -----Output----- Print the title of the best-selling book. If there is a tie, print the title that comes first lexicographically. -----Constraints----- 1 <= n <= 100 1 <= length of book title <= 100 -----Example----- Input: 4 GreatExpectations 10 MobyDick 15 GreatExpectations 5 WarAndPeace 15 Output: MobyDick Note: In case of a tie between \'MobyDick\' and \'WarAndPeace\' with 15 copies each, \'MobyDick\' is chosen as it comes first lexicographically.","solution":"def best_selling_book(n, sales): from collections import defaultdict sales_dict = defaultdict(int) for title, copies in sales: sales_dict[title] += copies max_sales = max(sales_dict.values()) best_sellers = [title for title, copies in sales_dict.items() if copies == max_sales] return min(best_sellers)"},{"question":"=====Problem Statement===== Given a positive integer N, print a diamond pattern of height 2*N - 1. You need to use only two nested for loops and a print statement inside the inner loop to achieve this. For example, for N=3, the output should be: ``` * *** ***** *** * ``` Note: You cannot use strings, lists, or any kind of data structure to store characters for intermediate steps. You are restricted to using only arithmetic operations inside the loops. =====Input Format===== A single line containing integer, N. =====Constraints===== 1 ≤ N ≤ 10 =====Output Format===== Print 2*N - 1 lines to form the diamond shape.","solution":"def print_diamond(N): rows = 2 * N - 1 for i in range(rows): if i < N: # Top half of the diamond including the middle row for j in range(rows): if j >= N - i - 1 and j <= N + i - 1: print(\'*\', end=\'\') else: print(\' \', end=\'\') else: # Bottom half of the diamond for j in range(rows): if j >= i - N + 1 and j < rows - (i - N + 1): print(\'*\', end=\'\') else: print(\' \', end=\'\') print()"},{"question":"In a game, each player is given a series of moves they can make, represented as a list of strings. Each string can be one of the following commands: \\"UP\\", \\"DOWN\\", \\"LEFT\\", or \\"RIGHT\\". The player starts at the origin point (0, 0) on a 2D grid. Their task is to execute each of the moves in the given order and determine their final coordinates. Write a function that takes a list of moves and returns the final coordinates of the player. Example 1: Input: moves = [\\"UP\\", \\"UP\\", \\"LEFT\\", \\"DOWN\\", \\"RIGHT\\"] Output: (0, 1) Explanation: Starting from (0, 0), the player moves to (0, 1), then to (0, 2), then to (-1, 2), then to (-1, 1), and finally to (0, 1). Example 2: Input: moves = [\\"RIGHT\\", \\"RIGHT\\", \\"UP\\", \\"UP\\", \\"LEFT\\", \\"DOWN\\"] Output: (1, 1) Explanation: Starting from (0, 0), the player moves to (1, 0), then to (2, 0), then to (2, 1), then to (2, 2), then to (1, 2), and finally to (1, 1). Example 3: Input: moves = [\\"LEFT\\"] Output: (-1, 0) Explanation: Starting from (0, 0), the player moves to (-1, 0). Constraints: - 1 <= moves.length <= 1000 - Each move in the list is either \\"UP\\", \\"DOWN\\", \\"LEFT\\", or \\"RIGHT\\".","solution":"def final_coordinates(moves): Returns the final coordinates after performing all the moves. Parameters: moves (list of str): List of moves where each move is \\"UP\\", \\"DOWN\\", \\"LEFT\\", or \\"RIGHT\\". Returns: tuple: Final coordinates (x, y) on the 2D grid. x, y = 0, 0 for move in moves: if move == \\"UP\\": y += 1 elif move == \\"DOWN\\": y -= 1 elif move == \\"LEFT\\": x -= 1 elif move == \\"RIGHT\\": x += 1 return x, y"},{"question":"You are tasked with building a system for managing a library\'s book inventory. The library stocks a large number of books, and each book is represented by a unique ISBN number along with its title and author. You need to implement a `Library` class to manage the process of adding, removing, and querying books in the inventory. The `Library` class should support the following methods: 1. `add_book(isbn: str, title: str, author: str) -> None`: Adds a book to the inventory. If a book with the same ISBN already exists, update its title and author. 2. `remove_book(isbn: str) -> bool`: Removes a book from the inventory by its ISBN. Returns `True` if the book was successfully removed, and `False` if no book with that ISBN exists. 3. `get_book(isbn: str) -> Tuple[str, str]`: Retrieves the title and author of the book by its ISBN. If no book with that ISBN exists, return `(\\"Book not found\\", \\"N/A\\")`. Your implementation should have efficient time complexity for the operations, considering the large potential size of the inventory. # Example: ```python library = Library() library.add_book(\\"978-3-16-148410-0\\", \\"The Catcher in the Rye\\", \\"J.D. Salinger\\") library.add_book(\\"978-0-14-028329-7\\", \\"1984\\", \\"George Orwell\\") assert library.get_book(\\"978-3-16-148410-0\\") == (\\"The Catcher in the Rye\\", \\"J.D. Salinger\\") assert library.remove_book(\\"978-0-14-028329-7\\") == True assert library.get_book(\\"978-0-14-028329-7\\") == (\\"Book not found\\", \\"N/A\\") ```","solution":"class Library: def __init__(self): self.inventory = {} def add_book(self, isbn: str, title: str, author: str) -> None: Adds a book to the library inventory. If the same ISBN already exists, it updates the book\'s title and author. self.inventory[isbn] = {\\"title\\": title, \\"author\\": author} def remove_book(self, isbn: str) -> bool: Removes a book from the library inventory by its ISBN. Returns True if the book was successfully removed, and False if no book with that ISBN exists. if isbn in self.inventory: del self.inventory[isbn] return True return False def get_book(self, isbn: str) -> tuple: Retrieves the title and author of the book by its ISBN. If no book with that ISBN exists, returns (\\"Book not found\\", \\"N/A\\"). if isbn in self.inventory: book = self.inventory[isbn] return (book[\\"title\\"], book[\\"author\\"]) return (\\"Book not found\\", \\"N/A\\")"},{"question":"Write a function named `mergeAndSort` that takes two lists of integers as input. The function should merge the two lists into a single list, remove any duplicate values, and then sort the resulting list in ascending order. The function should return the sorted list.","solution":"def mergeAndSort(list1, list2): Merges two lists of integers into a single list, removes any duplicates, and sorts the resulting list in ascending order. Args: list1 (list of int): The first list of integers. list2 (list of int): The second list of integers. Returns: list of int: The merged, deduplicated, and sorted list. merged_list = list(set(list1 + list2)) merged_list.sort() return merged_list"},{"question":"Write a function that takes an array of integers representing a sequence of stock prices throughout the day and calculates the maximum profit that can be made by buying and then selling one share of the stock within that day. If no profit can be made, return 0. ``` // Examples maxProfit([7, 1, 5, 3, 6, 4]) = 5 // Buy at price 1 and sell at price 6 maxProfit([7, 6, 4, 3, 1]) = 0 // No profit can be made // Explanation: // - On the first day, the price is 7 (buying opportunity). // - On the second day, the price is 1 (better buying opportunity). // - On the third day, the price is 5 (potential selling opportunity). // - On the fourth day, the price is 3 (not better than the previous buying price). // - On the fifth day, the price is 6 (best selling opportunity). // - On the last day, the price is 4 (not better than the last selling price). // Final best buying day: Day 2 with price 1. // Final best selling day: Day 5 with price 6. // Resulting in a maximum profit of 6-1 = 5. Array will always contain at least 2 prices. Random tests will contain 2-1000 elements in array, and price values between 1 and 10,000. ```","solution":"def maxProfit(prices): Returns the maximum profit that can be made by buying and then selling one share of the stock within the day. If no profit can be made, returns 0. min_price = float(\'inf\') max_profit = 0 for price in prices: # Update min_price to be the lowest price seen so far if price < min_price: min_price = price # Calculate potential profit if sold at current price profit = price - min_price # Update max_profit to be the highest profit seen so far if profit > max_profit: max_profit = profit return max_profit"},{"question":"You are given an array of integers. Your task is to find the sum of all the integers that are strictly greater than a given threshold. Write a function: ```python def sum_above_threshold(arr, threshold): # your code here ``` # Input - `arr`: A list of integers. - `threshold`: An integer. # Output - An integer representing the sum of all elements in the array that are greater than the threshold. # Examples ```python sum_above_threshold([1, 2, 3, 4, 5], 3) # Output: 9 (4+5) sum_above_threshold([10, -1, 7, 0], 5) # Output: 17 (10+7) sum_above_threshold([-3, -2, -1, 0], -2) # Output: -1 (0+-1) ```","solution":"def sum_above_threshold(arr, threshold): Returns the sum of all integers in the array that are strictly greater than the given threshold. return sum(x for x in arr if x > threshold)"},{"question":"Given a 2D grid of size `m x n` initialized with these three possible values: - `-1` - A wall or an obstacle. - `0` - A gate. - `INF` - An empty room. We use the value `2^31 - 1` to represent `INF` as it is an integer value that is guaranteed to be larger than any other distance. Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it remains filled with `INF`. You can assume that there is at least one gate in the given grid. The distance is calculated as the number of steps along the shortest path from the room to the gate, where you can only move up, down, left, or right. Write a function `walls_and_gates.rooms(matrix: List[List[int]]) -> List[List[int]]` to perform the transformation. **Examples:** ```python matrix = [[INF, -1, 0, INF], [INF, INF, INF, -1], [INF, -1, INF, -1], [0, -1, INF, INF]] walls_and_gates.rooms(matrix) Output: [[3, -1, 0, 1], [2, 2, 1, -1], [1, -1, 2, -1], [0, -1, 3, 4]] ``` ```python matrix = [[0, INF], [INF, INF], [INF, 0]] walls_and_gates.rooms(matrix) Output: [[0, 1], [1, 1], [1, 0]] ``` **Note** - The width and height of the grid are at most 200. - You must modify the input `matrix` in-place.","solution":"from collections import deque from typing import List def walls_and_gates(matrix: List[List[int]]) -> List[List[int]]: if not matrix or not matrix[0]: return matrix INF = 2**31 - 1 m, n = len(matrix), len(matrix[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque() # Add all gates to the queue first for i in range(m): for j in range(n): if matrix[i][j] == 0: queue.append((i, j)) while queue: x, y = queue.popleft() for dx, dy in directions: new_x, new_y = x + dx, y + dy if 0 <= new_x < m and 0 <= new_y < n and matrix[new_x][new_y] == INF: matrix[new_x][new_y] = matrix[x][y] + 1 queue.append((new_x, new_y)) return matrix"},{"question":"# Task Given a list of integers, determine whether it is possible to rearrange the list such that it forms a palindrome. # Example For `numbers = [1, 2, 3, 2, 1]`, the output should be `true`; For `numbers = [1, 2, 3, 4, 5]`, the output should be `false`. # Input/Output - `[input]` integer array `numbers` Constraints: `1 ≤ numbers.length ≤ 1000, 1 ≤ numbers[i] ≤ 1000`. - `[output]` a boolean value `true` if it is possible to rearrange the array to form a palindrome, `false` otherwise.","solution":"from collections import Counter def can_form_palindrome(numbers): Determines whether it is possible to rearrange the list to form a palindrome. Parameters: numbers (list): A list of integers. Returns: bool: True if it is possible to rearrange the list to form a palindrome, otherwise False. count = Counter(numbers) odd_count = sum(1 for frequency in count.values() if frequency % 2 != 0) # A palindrome can have at most one character with an odd frequency return odd_count <= 1"},{"question":"Given an array of integers and a series of operations, you are required to process the following three types of queries accurately and efficiently: 1. \\"ADD x y\\": Add the integer y to each element from the x-th position to the end of the array. 2. \\"MULT x y\\": Multiply each element from the x-th position to the end of the array by the integer y. 3. \\"SUM l r\\": Compute the sum of the elements from the l-th to the r-th position, both inclusive. -----Input----- - The first line contains two space-separated integers, n (the size of the array) and q (the number of queries). - The second line contains n space-separated integers, denoting the elements of the array. - Each of the next q lines contains a query of one of the three types mentioned above. -----Output----- For each query of type \\"SUM l r\\", output the sum of the elements in the specified range. -----Constraints----- - 1 ≤ n, q ≤ 100000 - 1 ≤ array element value ≤ 100000 - 1 ≤ x, l, r, y ≤ n - Query type = {\'ADD\', \'MULT\', \'SUM\'} - The sum operations output should be provided modulo 1000000007 -----Example----- Input 5 4 1 2 3 4 5 ADD 2 3 MULT 3 2 SUM 1 5 SUM 2 4 Output 17 18 -----Explanation----- - Initial array: [1, 2, 3, 4, 5] - After query 1: ADD 2 3 -> [1, 5, 6, 7, 8] - After query 2: MULT 3 2 -> [1, 5, 12, 14, 16] - Query 3: SUM 1 5 -> 1+5+12+14+16 = 48 % 1000000007 = 48 - Query 4: SUM 2 4 -> 5+12+14 = 31 % 1000000007 = 31","solution":"MOD = 1000000007 def process_queries(n, q, arr, queries): results = [] for query in queries: parts = query.split() command = parts[0] if command == \\"ADD\\": x = int(parts[1]) - 1 y = int(parts[2]) for i in range(x, n): arr[i] = (arr[i] + y) % MOD elif command == \\"MULT\\": x = int(parts[1]) - 1 y = int(parts[2]) for i in range(x, n): arr[i] = (arr[i] * y) % MOD elif command == \\"SUM\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 sum_result = sum(arr[l:r+1]) % MOD results.append(sum_result) return results"},{"question":"You are given a list of integers `nums` representing the positions of houses along a straight road. A certain number of `k` mailboxes can be installed along the road, and each mailbox can serve any house. The goal is to minimize the total travel distance for all houses to their respective nearest mailbox. Return the minimum travel distance all houses have to cover after installing the `k` mailboxes. Example 1: Input: nums = [1, 4, 8, 10, 20], k = 3 Output: 5 Explanation: Mailboxes can be installed at positions 4, 8, and 10. Houses at 1, 4, and 8 travel to mailbox 4 (total distance = 3), houses at 10 travel to mailbox 10 (total distance = 0), and house at 20 travels to mailbox 10 (total distance = 10). Thus, the total distance is 3 + 0 + 10 = 13. Example 2: Input: nums = [2, 3, 5, 12, 18], k = 2 Output: 9 Explanation: Mailboxes can be installed at positions 5 and 12. Houses at 2, 3, and 5 travel to mailbox 5 (total distance = 3), and houses at 12 and 18 travel to mailbox 12 (total distance = 6). Thus, the total distance is 3 + 6 = 9. Note: - 1 <= nums.length <= 100 - 1 <= nums[i] <= 10^4 - 1 <= k <= nums.length","solution":"def minDistance(nums, k): nums.sort() n = len(nums) dp = [[float(\'inf\')] * (n + 1) for _ in range(k + 1)] dp[0][0] = 0 for i in range(1, k + 1): for j in range(i, n + 1): for t in range(i - 1, j): median_pos = (t + j) // 2 median = nums[median_pos] distance = sum(abs(nums[l] - median) for l in range(t, j)) dp[i][j] = min(dp[i][j], dp[i - 1][t] + distance) return dp[k][n]"},{"question":"# Task Given a non-empty list of unique integers, return the index of the first integer which is larger than all previously seen integers. If there are no such elements, return `-1`. # Examples ```python dominant_index([1, 2, 1, 3, 2]) => 1 dominant_index([10, 5, 4, 3, 2]) => -1 dominant_index([1, 3, 2, 4, 5]) => 1 ``` # Hint Consider a loop that keeps track of the largest number seen so far while iterating through the list.","solution":"def dominant_index(nums): max_so_far = nums[0] for i in range(1, len(nums)): if nums[i] > max_so_far: return i max_so_far = max(max_so_far, nums[i]) return -1"},{"question":"You are given a list of integers representing the amount of rainfall recorded over several days. Your task is to determine the number of days where the amount of rainfall is strictly greater than the average amount of rainfall recorded over all given days. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of days. - The second line contains N integers separated by space, indicating the amount of rainfall for each day. -----Output:----- For each test case, output a single line containing the number of days where the rainfall amount is strictly greater than the average rainfall amount. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 0 leq Rainfall amount leq 10^3 -----Sample Input:----- 2 5 22 25 26 24 23 3 10 15 20 -----Sample Output:----- 2 1 -----Explanation:----- For the first test case, the average rainfall amount is (22+25+26+24+23) / 5 = 24. The days with rainfall greater than 24 are 25 and 26, thus the answer is 2. For the second test case, the average rainfall amount is (10+15+20) / 3 = 15. The only day with rainfall greater than 15 is 20, thus the answer is 1.","solution":"def count_days_with_above_average_rainfall(test_cases): results = [] for case in test_cases: days, rainfall_amounts = case average_rainfall = sum(rainfall_amounts) / days count = sum(1 for amount in rainfall_amounts if amount > average_rainfall) results.append(count) return results # Helper function to process input def process_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) rainfall_amounts = list(map(int, input_lines[index + 1].split())) test_cases.append((N, rainfall_amounts)) index += 2 return test_cases"},{"question":"Write a function `nested_sum()` that takes a list of integers and nested lists of integers, and returns the total sum of all integers in the list and any nested lists, at any level of nesting. Example: ```python nested_sum([1, [2, [3, 4], 5], 6]) == 21 ``` Note: you may assume that there are no non-integer elements in the list.","solution":"def nested_sum(lst): Returns the total sum of all integers in the list and any nested lists. total = 0 for element in lst: if isinstance(element, list): total += nested_sum(element) else: total += element return total"},{"question":"You are given an array of integers arr consisting of n elements. Your task is to process q queries, each containing two integers l and r, where 1 leq l leq r leq n. For each query, determine the number of distinct integers in the subarray arr[l] to arr[r] inclusive. -----Input----- - The first line contains n and q the number of elements in the array and the number of queries respectively. - The second line contains n integers arr[1], arr[2], ..., arr[n]. - The next q lines each contain two integers l and r. -----Output----- For each query, output a single integer indicating the number of distinct elements in the specified subarray. -----Constraints----- - 1 leq n leq 10^5 - 1 leq q leq 10^5 - 1 leq arr[i] leq 10^7 - 1 leq l leq r leq n -----Example Input----- 5 3 1 2 1 2 3 1 3 2 4 1 5 -----Example Output----- 2 2 3","solution":"def distinct_in_subarray(arr, queries): Given an array of integers arr and a list of queries, each query containing two integers l and r, returns the number of distinct integers in the subarray arr[l-1:r]. Parameters: arr (list): The array of integers. queries (list): A list of tuples, where each tuple (l, r) denotes a query for the subarray. Returns: list: A list of integers representing the number of distinct integers in each queried subarray. result = [] for l, r in queries: subarray = arr[l-1:r] distinct_count = len(set(subarray)) result.append(distinct_count) return result"},{"question":"Given a string of lowercase letters, find the length of the smallest window that contains all the unique characters of the input string. Example: For the input string `\\"aabcbcdbca\\"`, the smallest window that contains all the unique characters is `\\"dbca\\"` with a length of `4`. There are tests with strings up to `10,000` characters long, so your code will need to be efficient. The input will be a non-empty string containing only lowercase characters. If there are multiple smallest windows with the same length, return the first one that appears in the string. Good luck :)","solution":"def smallest_window_all_unique_chars(s): from collections import defaultdict # Get the list of unique characters in the input string unique_chars = set(s) unique_count = len(unique_chars) # Dictionary to store the count of characters in the current window char_count = defaultdict(int) min_len = float(\'inf\') start = 0 start_index = -1 count = 0 for j in range(len(s)): char_count[s[j]] += 1 # If this character\'s count was 1 after inserting (i.e., it\'s the first occurrence) if char_count[s[j]] == 1: count += 1 # If the current window contains all characters if count == unique_count: # Minimize the window\'s size while char_count[s[start]] > 1: if char_count[s[start]] > 1: char_count[s[start]] -= 1 start += 1 # Update the minimum length of the window window_len = j - start + 1 if min_len > window_len: min_len = window_len start_index = start return min_len if start_index != -1 else 0"},{"question":"Design a function that simulates an ATM withdrawal process. The function should take in three arguments: the current account balance (an integer), the amount the user wants to withdraw (also an integer), and a boolean indicating whether the user prefers large denominations (True) or small denominations (False). The ATM has the following denominations available: - Large denominations: 50, 20 - Small denominations: 10, 5, 1 The function should return a tuple of two elements: 1. A boolean indicating whether the withdrawal is possible given the account balance and requested amount. 2. A dict representing the denominations given out, with keys being the denomination values and the values being the count of each denomination. The user cannot withdraw more money than their current balance. If the exact withdrawal amount cannot be achieved with the given denominations, the function should return False for the boolean and an empty dict. Example: ```python atm_withdrawal(135, 70, True) => (True, {50: 1, 20: 1}) atm_withdrawal(135, 73, False) => (True, {10: 7, 1: 3}) atm_withdrawal(50, 75, True) => (False, {}) ```","solution":"def atm_withdrawal(balance, amount, prefers_large): Simulates an ATM withdrawal process. Parameters: balance (int): Current account balance. amount (int): Amount the user wishes to withdraw. prefers_large (bool): Preference for large denominations (True) or small denominations (False). Returns: tuple: (boolean indicating whether withdrawal is possible, dict of denominations given out) if amount > balance: return False, {} large_denominations = [50, 20] small_denominations = [10, 5, 1] if prefers_large: denominations = large_denominations else: denominations = small_denominations withdrawal = {} remaining_amount = amount for denom in denominations: if remaining_amount >= denom: count = remaining_amount // denom withdrawal[denom] = count remaining_amount -= denom * count if remaining_amount == 0: return True, withdrawal else: return False, {}"},{"question":"Write a function that takes a string containing a mathematical expression in infix notation and returns the result of evaluating the expression. The expression will only contain integers and the operators `+`, `-`, `*`, and `/`. You can assume that the given expression is always valid. # Example: ```python evaluate_expression(\\"3+2*2\\") == 7 evaluate_expression(\\" 3/2 \\") == 1 evaluate_expression(\\" 3+5 / 2 \\") == 5 ``` **Note:** - You need to manage operator precedence correctly. - Division should be an integer division.","solution":"def evaluate_expression(expression): Evaluate a mathematical expression in infix notation with +, -, *, / operators. The division (/) is integer division. def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a // b # integer division def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while i < len(tokens) and tokens[i].isdigit(): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[-1] return evaluate(expression)"},{"question":"You are given a string consisting of digits and lowercase letters. Your task is to rearrange the string such that all the digits come before all the letters. The relative order of the digits and the letters should be preserved. #Examples: ~~~ ``` rearrange(\\"a1b2c3\\") should return \\"123abc\\" rearrange(\\"3z4y5x\\") should return \\"345zyx\\" rearrange(\\"h1e2l3l4o5\\") should return \\"12345hello\\" rearrange(\\"12345\\") should return \\"12345\\" rearrange(\\"abcde\\") should return \\"abcde\\" ``` ~~~ #Input A string that consists of digits and lowercase letters with length `0 < str <= 1000`. #Output A string with all digits at the beginning followed by all the letters. Relative order of digits and letters should be maintained.","solution":"def rearrange(s): Rearranges the input string such that all the digits come before all the letters. The relative order of the digits and the letters is preserved. Parameters: s (str): The input string consisting of digits and lowercase letters. Returns: str: The rearranged string with all digits followed by all letters. digits = [] letters = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(digits + letters)"},{"question":"Create a function that takes a string of digits, interprets the digits as they would appear on a phone keypad, and converts them to corresponding letters as follows: - 2 -> \\"ABC\\" - 3 -> \\"DEF\\" - 4 -> \\"GHI\\" - 5 -> \\"JKL\\" - 6 -> \\"MNO\\" - 7 -> \\"PQRS\\" - 8 -> \\"TUV\\" - 9 -> \\"WXYZ\\" Note: the output should be a list of possible letter combinations that can be formed by the given string of digits. Example: Input: \\"23\\" Output: [\\"AD\\", \\"AE\\", \\"AF\\", \\"BD\\", \\"BE\\", \\"BF\\", \\"CD\\", \\"CE\\", \\"CF\\"] Notes: - Assume the input string will contain only digits from 2-9. - Ensure that the function generates all possible letter combinations.","solution":"from itertools import product def letter_combinations(digits): Returns all possible letter combinations that the given digits can represent. if not digits: return [] # Mapping from digits to corresponding letters on a phone keypad digit_to_letters = { \'2\': \'ABC\', \'3\': \'DEF\', \'4\': \'GHI\', \'5\': \'JKL\', \'6\': \'MNO\', \'7\': \'PQRS\', \'8\': \'TUV\', \'9\': \'WXYZ\' } # Create list of letter strings corresponding to each digit in the input letter_groups = [digit_to_letters[digit] for digit in digits] # Generate all combinations using Cartesian product combinations = [\'\'.join(combo) for combo in product(*letter_groups)] return combinations"},{"question":"Design a system that helps keep track of a book library. Your goal is to implement a `Library` class that supports the following functionalities: 1. **Add a new book**: Add a new book to the library. Each book has a unique `book_id`, a `title`, and an `author`. 2. **Remove a book**: Remove a book from the library by its `book_id`. 3. **Search books by author**: Return a list of all books written by a particular author. If no books are found, an empty list should be returned. 4. **Search books by title**: Return a list of all books that have titles containing a given keyword (case insensitive). If no books are found, an empty list should be returned. 5. **List all books**: Return a list of all books currently in the library. The `Library` class should support the following methods: # Methods - `add_book(book_id: int, title: str, author: str) -> None`: Adds a new book to the library. - `remove_book(book_id: int) -> bool`: Removes the book with the given `book_id` from the library. Returns `True` if the book was successfully removed, `False` if the book was not found. - `search_by_author(author: str) -> List[Dict[str, Any]]`: Returns a list of dictionaries, each representing a book by the given author. - `search_by_title(keyword: str) -> List[Dict[str, Any]]`: Returns a list of dictionaries, each representing a book with a title containing the given keyword (case insensitive). - `list_books() -> List[Dict[str, Any]]`: Returns a list of dictionaries, each representing a book currently in the library. Each dictionary in the list representations should have the following format: ```python { \\"book_id\\": int, \\"title\\": str, \\"author\\": str } ``` # Constraints - `book_id` is a positive integer and unique for each book. - `title` and `author` are non-empty strings of at most length 100. # Example ```python library = Library() library.add_book(1, \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\") library.add_book(2, \\"To Kill a Mockingbird\\", \\"Harper Lee\\") library.add_book(3, \\"1984\\", \\"George Orwell\\") library.add_book(4, \\"Animal Farm\\", \\"George Orwell\\") print(library.search_by_author(\\"George Orwell\\")) # Output: [{\'book_id\': 3, \'title\': \'1984\', \'author\': \'George Orwell\'}, # {\'book_id\': 4, \'title\': \'Animal Farm\', \'author\': \'George Orwell\'}] print(library.search_by_title(\\"the\\")) # Output: [{\'book_id\': 1, \'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\'}] print(library.remove_book(2)) # Output: True print(library.list_books()) # Output: [{\'book_id\': 1, \'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\'}, # {\'book_id\': 3, \'title\': \'1984\', \'author\': \'George Orwell\'}, # {\'book_id\': 4, \'title\': \'Animal Farm\', \'author\': \'George Orwell\'}] ``` # Note - Ensure that your implementation accounts for edge cases, such as adding or removing books from an empty library.","solution":"from typing import List, Dict, Any class Library: def __init__(self): self.books = [] def add_book(self, book_id: int, title: str, author: str) -> None: Adds a new book to the library. self.books.append({\\"book_id\\": book_id, \\"title\\": title, \\"author\\": author}) def remove_book(self, book_id: int) -> bool: Removes the book with the given book_id from the library. Returns True if the book was successfully removed, False if the book was not found. for book in self.books: if book[\\"book_id\\"] == book_id: self.books.remove(book) return True return False def search_by_author(self, author: str) -> List[Dict[str, Any]]: Returns a list of all books written by a particular author. If no books are found, an empty list is returned. return [book for book in self.books if book[\\"author\\"].lower() == author.lower()] def search_by_title(self, keyword: str) -> List[Dict[str, Any]]: Returns a list of all books that have titles containing a given keyword (case insensitive). If no books are found, an empty list is returned. return [book for book in self.books if keyword.lower() in book[\\"title\\"].lower()] def list_books(self) -> List[Dict[str, Any]]: Returns a list of all books currently in the library. return self.books"},{"question":"# Task: You need to write a function `fibonacci_pattern` which generates a two-dimensional array (matrix) where each number is a part of the Fibonacci sequence, and the dimensions of the matrix are specified by the input parameters `m` and `n`. Parameters: fibonacci_pattern( m, n ); ^ ^ | | Number of rows Number of columns Rules/Note: * Fibonacci sequence starts with 0 and 1. * `m` represents the number of rows. * `n` represents the number of columns. * Range of Parameters: * `m ∈ [1, 20]` * `n ∈ [1, 20]` # Examples: * fibonacci_pattern(3, 3): [ [0, 1, 1], [2, 3, 5], [8, 13, 21] ] * fibonacci_pattern(2, 4): [ [0, 1, 1, 2], [3, 5, 8, 13] ] * fibonacci_pattern(4, 4): [ [0, 1, 1, 2], [3, 5, 8, 13], [21, 34, 55, 89], [144, 233, 377, 610] ]","solution":"def fibonacci_pattern(m, n): Generates a two-dimensional array (matrix) where each number is a part of the Fibonacci sequence. Parameters: m (int): number of rows n (int): number of columns Returns: List[List[int]]: A 2D array filled with Fibonacci sequence numbers. # Base case for fibonacci fibonacci_sequence = [0, 1] # Generate enough fibonacci numbers to fill the m x n matrix while len(fibonacci_sequence) < m * n: fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) # Fill the matrix matrix = [] for i in range(m): row = fibonacci_sequence[i * n : (i + 1) * n] matrix.append(row) return matrix"},{"question":"You are given a list of integers. The list represents a series of stock prices over consecutive days. You can complete at most one transaction, meaning you can buy one and sell one share of the stock to maximize your profit. Your goal is to find the maximum profit you can achieve. If you cannot achieve any profit, return 0. -----Input----- The first line of input contains one integer d (1 leq d leq 100,000): the number of days. The next line of input contains d integers p_1, p_2, ldots, p_d (0 leq p_i leq 10^5): the stock prices on each day. -----Output----- Output one integer: the maximum profit you can achieve from one transaction. If no profit is possible, output 0. -----Example----- Input 6 7 1 5 3 6 4 Output 5 -----Note----- In the example: - Buy on day 2 (price = 1) - Sell on day 5 (price = 6) - Profit = 6 - 1 = 5","solution":"def max_profit(prices): Given a list of stock prices, calculate the maximum profit that can be made with one buy and one sell transaction. :param prices: List of integers representing the stock prices :return: An integer representing the maximum profit if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given a string of words separated by spaces. Your task is to find the first word in the string that has duplicate consecutive characters. A duplicate consecutive character means that the same character appears twice in a row within a word. If no such word exists, return an empty string. For example: ``` \\"hello world\\" -> \\"hello\\" # \'ll\' are duplicate consecutive characters \\"this is a test\\" -> \\"\\" # No word with duplicate consecutive characters \\"success is key\\" -> \\"success\\" # \'ss\' are duplicate consecutive characters ``` Write a function `find_first_duplicate_word(s)` that takes a string `s` and returns the first word with duplicate consecutive characters. If there are no such words, return an empty string.","solution":"def find_first_duplicate_word(s): Returns the first word in the string \'s\' that has duplicate consecutive characters. If no such word exists, returns an empty string. words = s.split() for word in words: for i in range(len(word) - 1): if word[i] == word[i + 1]: return word return \\"\\""},{"question":"Please write a function that finds the longest palindrome substring in a given string. The function should return both the length of this substring and the substring itself. For example, for the string \\"babad\\", the function should return 3 and \\"bab\\" or \\"aba\\". For the string \\"cbbd\\", the function should return 2 and \\"bb\\".","solution":"def longest_palindrome_substring(s): Returns the length of the longest palindromic substring and the substring itself. n = len(s) if n == 0: return 0, \\"\\" longest = 1 start = 0 # Dynamic programming table to store palindrome status dp = [[False] * n for _ in range(n)] # Single-letter palindromes for i in range(n): dp[i][i] = True # Check for 2-letter palindromes for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i longest = 2 # Check for palindromes longer than 2 letters for length in range(3, n + 1): # length of the substring for i in range(n - length + 1): # starting point of the substring j = i + length - 1 # ending point of the substring if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True start = i longest = length return longest, s[start:start + longest]"},{"question":"You are given a string that represents a mathematical expression containing operators (+, -, *, /) and non-negative integers. Your task is to implement a function to evaluate this expression and return its result. The operators have the usual precedence and the expression will never contain parentheses. For example, the expression `\\"3+5*2\\"` should be evaluated as `3 + (5 * 2) = 13`. Your function should handle the following: - Non-negative integers in the expression can be more than one digit (e.g., \\"12+34\\"). - Operators will be limited to +, -, *, and /. - Division will be a floor division, meaning it returns the largest integer less than or equal to the division result. Write a function `evaluate_expression(expression)` that takes in a string `expression`, and returns the evaluation result as an integer. -----Input----- The input is a single string with length between 1 and 1000 characters, containing an arithmetic expression with non-negative integers and the operations +, -, *, /. -----Output----- Print a single integer, the result of the evaluated expression. -----Examples----- Input \\"3+2*2\\" Output 7 Input \\" 3/2 \\" Output 1 Input \\" 3+5 / 2 \\" Output 5 -----Note----- In the first example, the expression should be evaluated as 3 + (2 * 2) = 7. In the second example, the expression should be evaluated as floor(3 / 2) = 1. In the third example, the expression should be evaluated as 3 + floor(5 / 2) = 3 + 2 = 5.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing +, -, *, and / with no parentheses. # Helper function to apply an operator to two numbers def apply_op(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return a // b # Use floor division # Variables to store numbers and operations nums = [] ops = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 nums.append(num) elif expression[i] in \\"+-*/\\": while (ops and ops[-1] in \\"*/\\" and expression[i] in \\"+-\\") or (ops and ops[-1] in \\"*/\\" and expression[i] in \\"*/\\"): num2 = nums.pop() num1 = nums.pop() op = ops.pop() nums.append(apply_op(num1, num2, op)) ops.append(expression[i]) i += 1 else: i += 1 while ops: num2 = nums.pop() num1 = nums.pop() op = ops.pop() nums.append(apply_op(num1, num2, op)) return nums[0]"},{"question":"Given a list of integers, determine whether it is possible to split the list into three non-empty consecutive parts whose sum is the same. Example 1: Input: [1, 2, 3, 0, 3] Output: True Explanation: You can split it into [1, 2], [3], and [0, 3], which all have a sum of 3. Example 2: Input: [1, 1, 1, 1, 1, 1] Output: True Explanation: You can split it into [1, 1], [1, 1], and [1, 1], which all have a sum of 2. Example 3: Input: [1, 2, 3, 4, 5, 6] Output: False Explanation: It is not possible to split the list into three parts with equal sum. Note: 1. The length of the list will be in the range [1, 50000]. 2. The values of the list will be within the range [-10000, 10000].","solution":"def can_split_into_three_parts_with_equal_sum(arr): Returns whether it\'s possible to split the list into three non-empty consecutive parts with the same sum. total_sum = sum(arr) # If total_sum is not divisible by 3, we can\'t split into three parts with equal sum if total_sum % 3 != 0: return False target_sum = total_sum // 3 current_sum = 0 parts_found = 0 # Iterate through the array to find parts with the target sum for number in arr: current_sum += number if current_sum == target_sum: parts_found += 1 current_sum = 0 # We need exactly three parts if parts_found == 3: return True return False"},{"question":"Write a function named `isIsogram` that determines whether a given string is an isogram. An isogram is a word or phrase without a repeating letter, irrespective of case. Your function should ignore spaces and hyphens. The function should accept a single string as an argument and return `true` if the string is an isogram and `false` otherwise. # Examples - `isIsogram(\\"Dermatoglyphics\\")` should return `true` - `isIsogram(\\"aba\\")` should return `false` - `isIsogram(\\"moOse\\")` should return `false` - `isIsogram(\\"thumb-screws\\")` should return `false` - `isIsogram(\\"six-year-old\\")` should return `true` # Assumptions - The input string may contain spaces and hyphens. - The comparison should be case insensitive. - The input string\'s length may range from 1 to 100 characters.","solution":"def isIsogram(string): Determines if the provided string is an isogram. Parameters: string (str): The string to be checked. Returns: bool: True if the string is an isogram, False otherwise. cleaned_string = string.lower().replace(\\" \\", \\"\\").replace(\\"-\\", \\"\\") return len(cleaned_string) == len(set(cleaned_string))"},{"question":"# Task Write a function that, given a list of integers, returns the sum of the largest contiguous subarray. A contiguous subarray of the list is a sequence which can be achieved by deleting some (or no) elements from the beginning and some (or no) elements from the end of the list. # Example For `arr = [-2,1,-3,4,-1,2,1,-5,4]`, the output should be `6`, because the sum of the contiguous subarray `[4,-1,2,1]` is 6. For `arr = [1]`, the output should be `1`, because the sum of the contiguous subarray `[1]` is 1. # Input/Output - `[input]` integer array `arr` Constraints: `1 ≤ arr.length ≤ 10^5, -10^4 ≤ arr[i] ≤ 10^4.` - `[output]` an integer The sum of the largest contiguous subarray.","solution":"def max_subarray_sum(arr): Returns the sum of the largest contiguous subarray. :param arr: List[int] - A list of integers. :return: int - The sum of the largest contiguous subarray. max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum"},{"question":"Imagine we have a series of string capitalizations where each word in the string needs to follow a specific pattern. Create a function that capitalizes the first and last character of each word, while keeping all other characters in lowercase. Your task is to implement this function which takes a string and returns it according to these rules: - Each word in the string should have its first and last character in uppercase. - All other characters in each word should be in lowercase. - Words are separated by a single space. # Example If the input string is: `\\"capitalize each word\\"` The returned string should be: `\\"CapitalizE EacH WorD\\"`. If the input string is: `\\"HELLO world FROM python\\"` The returned string should be: `\\"HellO WorlD FroM PythoN\\"`. # Additional Constraints - You can assume that the input string will not have any leading or trailing spaces. - You can assume that the input string will not contain any punctuation marks.","solution":"def capitalize_words(s): Capitalizes the first and last character of each word in the string, making all other characters lowercase. Args: s (str): The input string. Returns: str: The processed string with each word\'s first and last character capitalized. words = s.split() result = [] for word in words: if len(word) > 1: capitalized_word = word[0].upper() + word[1:-1].lower() + word[-1].upper() else: capitalized_word = word.upper() result.append(capitalized_word) return \' \'.join(result)"},{"question":"You are given an array `prices` where `prices[i]` is the price of a given stock on the `i`-th day. You want to design an algorithm to find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times). Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy it again). Write a function to determine the maximum profit you can obtain and demonstrate the function with an example. Function Signature: ```python def max_profit(prices: List[int]) -> int: pass ``` **Example:** ``` Input: prices = [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. ``` ``` Input: prices = [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Note that you cannot buy on day 1, sell on day 2 and then buy again on day 2 and sell on day 5 as you must sell before you buy again. ```","solution":"def max_profit(prices): Calculates the maximum profit from buying and selling stocks where as many transactions as desired are allowed. :param prices: List[int] :return: int max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"Given an array of integers a of length n, find a subsequence a\' of a of length at least 2 such that the sum of its elements is maximum. Among all such subsequences, choose the one whose length, k, is the smallest possible. If multiple subsequences satisfy these conditions, you are allowed to find any of them. A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. -----Input----- The first line contains an integer t (1 le t le 10^3) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (2 le n le 10^5) — the length of the array a. The second line of each test case contains n integers a_1, a_2, ldots, a_n (-10^6 le a_i le 10^6) — the elements of the array a. The sum of n across the test cases doesn\'t exceed 10^6. -----Output----- For each test case, the first line should contain the length of the found subsequence, k. The second line should contain a\'_1, a\'_2, ldots, a\'_k — its elements. If multiple subsequences satisfy these conditions, you are allowed to find any of them. -----Example----- Input 2 4 1 2 3 4 5 -1 -2 -3 -4 -5 Output 2 3 4 2 -1 -2 -----Note----- In the first test case, the possible subsequences are [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], etc. The subsequence [3, 4] gives the maximum sum of 3 + 4 = 7. Hence, the shortest subsequence with the maximum sum is [3, 4]. In the second test case, the subsequence with the maximum sum will be the one with the least negative values since all elements are negative.","solution":"def find_max_sum_subsequence(arr): Returns the smallest length subsequence with the maximum sum. n = len(arr) # Sort the array in descending order arr.sort(reverse=True) # The first two elements will give us the maximum sum return arr[:2] def process_test_cases(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] subseq = find_max_sum_subsequence(a) results.append((len(subseq), subseq)) return results"},{"question":"Write a function that takes an array of integers and a target sum as input and returns the count of all pairs of integers in the array that add up to the target sum. The function should have a linear runtime complexity. # Constraints: - The input array can contain both positive and negative integers. - Each element in the array is unique. # Example: ``` python count_pairs_with_sum([1, 2, 3, 4, 5], 7) # should return 2, because there are two pairs (2, 5) and (3, 4) that add up to 7 count_pairs_with_sum([1, -1, 2, -2, 3], 1) # should return 3, because there are three pairs (2, -1), (3, -2), and (1, 0) that add up to 1 ``` # Note: - The function should not use brute-force methods for solving this task to ensure it meets the required linear complexity. - The order of the pairs does not matter, meaning (2, 5) and (5, 2) are considered the same and should be counted only once.","solution":"def count_pairs_with_sum(arr, target_sum): Returns the count of all pairs of unique integers in the array that add up to the target sum. seen = set() pair_count = 0 for num in arr: complement = target_sum - num if complement in seen: pair_count += 1 seen.add(num) return pair_count"},{"question":"Implement the function `middle_element(arr)` that returns the middle element of the list `arr` if the list length is odd. If the list length is even, it returns the average of the two middle elements. Examples: ```python middle_element([1, 3, 5]) => 3 # List length is odd, middle element is 3 middle_element([2, 4, 6, 8]) => 5.0 # List length is even, average of middle elements 4 and 6 is 5.0 middle_element([7, 9, 11, 13, 15]) => 11 # List length is odd, middle element is 11 middle_element([10, 20]) => 15.0 # List length is even, average of middle elements 10 and 20 is 15.0 ```","solution":"def middle_element(arr): Returns the middle element of the list if the list length is odd. If the list length is even, returns the average of the two middle elements. n = len(arr) if n % 2 == 1: # If the length of the list is odd, return the middle element return arr[n // 2] else: # If the length of the list is even, return the average of the two middle elements return (arr[n // 2 - 1] + arr[n // 2]) / 2"},{"question":"In this coding challenge, you are required to analyze a square maze represented by a 2D array and determine the shortest path to navigate from the top-left corner to the bottom-right corner. The maze is composed of walls (represented by 1s) and open spaces (represented by 0s). Your goal is to find the shortest path from the start point (0, 0) to the finish point (n-1, n-1). You are allowed to move up, down, left, or right, but you cannot move diagonally or through walls. Input: Two arguments will be provided to your function: - `n`: an integer representing the size of the n x n maze, where 2 <= n <= 100 - `maze`: a 2D list (or array) where each nested list represents a row of the maze, and each element within a nested list is either 0 (open space) or 1 (wall) Output: The function should return an integer representing the number of steps in the shortest path from (0, 0) to (n-1, n-1). If there is no valid path, the function should return -1. Example: Input: n = 5 maze = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0] ] Output: 8 Explanation: The shortest path is as follows: (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) -> (3, 2) -> (4, 2) -> (4, 3) -> (4, 4), resulting in a total of 8 steps. Note: - All inputs will be valid. - There will always be at least one open cell at the top-left corner (0, 0) and bottom-right corner (n-1, n-1).","solution":"from collections import deque def shortest_path(n, maze): Returns the shortest path length from the top-left to the bottom-right corner of the maze. If no path exists, returns -1. if maze[0][0] == 1 or maze[n-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == n-1 and c == n-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n and maze[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"Complete the function so that it returns the count of non-null/nil elements in the provided array. If the provided array is null/nil, the function should return 0. For example: ```python count_non_null_elements([1, 2, None, 4, None, 6]) # should return 4 count_non_null_elements(None) # should return 0 ``` ```Haskell countNonNullElements [Just 1, Nothing, Just 3, Just 4] = 3 countNonNullElements [] = 0 ```","solution":"def count_non_null_elements(arr): Returns the count of non-null elements in the provided array. If the provided array is None, returns 0. if arr is None: return 0 return sum(1 for x in arr if x is not None)"},{"question":"Given a non-negative integer `n`, your task is to return an array of the first `n` elements of the Fibonacci sequence. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 The input will always be a non-negative integer `n`. Write a function `fibonacci_sequence(n)` that takes an integer `n` as input and returns an array of the first `n` Fibonacci numbers. Examples: ```python fibonacci_sequence(1) => [0] fibonacci_sequence(2) => [0, 1] fibonacci_sequence(5) => [0, 1, 1, 2, 3] fibonacci_sequence(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ```","solution":"def fibonacci_sequence(n): Returns an array of the first n Fibonacci numbers. if n == 0: return [] sequence = [0] if n > 1: sequence.append(1) for i in range(2, n): next_number = sequence[i - 1] + sequence[i - 2] sequence.append(next_number) return sequence"},{"question":"You are given a matrix of integers with dimensions n by m. You want to perform a transformation on this matrix. In one transformation, you can add one to all elements of any entire row or all elements of any entire column. Determine the minimum number of transformations required to make every element equal to the same value. -----Input----- The first line of input contains two integers n, m (1 ≤ n, m ≤ 100), the dimensions of the matrix. The next n lines contain m integers each, representing the elements of the matrix. Each element is an integer between 0 and 1000, inclusive. -----Output----- Print a single integer, the minimum number of transformations required to make all elements of the matrix equal. -----Example----- Input 3 3 1 2 1 3 4 3 1 2 1 Output 2 -----Note----- We can make all elements equal to 3 by performing the following transformations: 1. Add 1 to all elements in the first column. 2. Add 1 to all elements in the third column. The resulting matrix will be: 2 2 2 4 4 4 2 2 2 We need two transformations.","solution":"def min_transformations(n, m, matrix): Returns the minimum number of transformations required to make every element of the matrix equal. target = matrix[0][0] for i in range(n): for j in range(m): if matrix[i][j] != target: return 2 return 0"},{"question":"You have entered a high-stakes maze with narrow passages that fit only one person at a time. This maze can be represented as an undirected graph where each node represents a room and each edge represents a passage between two rooms. There is a unique exit which is the target room you must reach. Unfortunately, some rooms have a bottleneck passage which can be crossed by only one person at a time. Given your starting room, determine if you can reach the exit room given that there might be some rooms with ongoing passage by other contestants which can cause some paths to be blocked temporarily. Formally, you are given an undirected graph with N nodes and M edges where each edge is either wide or narrow. You are also given a list of busy narrow passages indicating which narrow passages are currently occupied and cannot be crossed by any other person at this time. You start from a specified room and need to find out if there is a path to the exit room avoiding any busy narrow passages. -----Input----- - The first line contains three integers N, M, and K denoting the number of nodes, edges, and busy narrow passages respectively. - Each of the next M lines contains three integers U, V, and T (1 leq U, V leq N, U neq V) representing an edge between nodes U and V with type T where T=1 denotes a wide passage and T=2 denotes a narrow passage. - The next line contains two integers S and E denoting your starting room and the exit room respectively. - The next line contains K space-separated pairs of integers A_i and B_i denoting the i-th busy narrow passage between rooms A_i and B_i. -----Output----- - Print \\"YES\\" if there exists a path from the starting room to the exit room avoiding the busy narrow passages, else print \\"NO\\". -----Constraints----- - 1 leq N leq 10^5 - 1 leq M leq 2 times 10^5 - 1 leq K leq 10^4 - 1 leq U, V, S, E, A_i, B_i leq N -----Sample Input----- 6 7 2 1 2 1 2 3 2 3 4 2 4 5 1 5 6 1 1 6 2 2 5 2 1 6 2 3 4 5 -----Sample Output----- YES -----Explanation----- Starting from room 1, you can take the path 1 -> 2 -> 5 -> 6 using the wide passages, effectively avoiding the busy narrow passages 2 -> 3 and 4 -> 5.","solution":"def can_reach_exit(N, M, K, edges, start, exit, busy_passages): import collections # Create graph adjancency list & track narrow passage dict to check busy status graph = collections.defaultdict(list) narrow_passages = set((min(a, b), max(a, b)) for a, b in busy_passages) for u, v, t in edges: if t == 1: # wide passage graph[u].append(v) graph[v].append(u) elif t == 2: # narrow passage if (min(u,v), max(u,v)) not in narrow_passages: graph[u].append(v) graph[v].append(u) # Perform BFS from start to find if there\'s a path to exit queue = collections.deque([start]) visited = set([start]) while queue: node = queue.popleft() if node == exit: return \\"YES\\" for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return \\"NO\\""},{"question":"# Task: Write a function that takes a string as input and returns the string such that all vowels are reversed while maintaining the relative order of the consonants. Examples: ```python reverse_vowels(\\"hello\\") = \\"holle\\" # \'e\' and \'o\' are reversed. reverse_vowels(\\"leetcode\\") = \\"leotcede\\" # \'e\', \'e\', and \'o\' are reversed. reverse_vowels(\\"aA\\") = \\"Aa\\" # Case-sensitive reversal. reverse_vowels(\\"bcdfg\\") = \\"bcdfg\\" # no vowels to be reversed. ``` # Constraints: * The input string will only contain alphanumeric characters and spaces. * The length of the string will not exceed 100. * Vowels are considered: \'a\', \'e\', \'i\', \'o\', \'u\' (both lowercase and uppercase).","solution":"def reverse_vowels(s): Reverses the vowels in a string while maintaining the relative order of the consonants. Parameters: s (str): The input string. Returns: str: The string with vowels reversed in order. vowels = set(\\"aeiouAEIOU\\") s = list(s) left, right = 0, len(s) - 1 while left < right: if s[left] in vowels and s[right] in vowels: s[left], s[right] = s[right], s[left] left += 1 right -= 1 if s[left] not in vowels: left += 1 if s[right] not in vowels: right -= 1 return \'\'.join(s)"},{"question":"Given an array of integers, implement a function that returns the second largest distinct element. If the array does not contain at least two distinct elements, return -1. # Examples ``` [1, 2, 3, 4, 5] -> 4 [5, 5, 5, 5] -> -1 [10, 9, 8, 8] -> 9 [2] -> -1 [-3, -2, -1, 0] -> -1 ```","solution":"def second_largest_distinct(arr): Returns the second largest distinct element in the array. If the array does not contain at least two distinct elements, return -1. distinct_elements = list(set(arr)) # Convert to a set to get distinct elements and then back to list if len(distinct_elements) < 2: return -1 distinct_elements.sort(reverse=True) # Sort the distinct elements in descending order return distinct_elements[1] # Return the second largest element"},{"question":"Alice loves collecting rare gemstones, and she has recently acquired a collection of them. However, she realizes that some of the gems have the same value, and she wishes to find out the maximum number of gemstones in her collection that have unique values. Alice\'s collection of gems can be represented as an array of integers, where each integer represents the value of a gemstone. She wants to remove the least number of gemstones so that the remaining gemstones all have unique values. Can you help Alice determine the maximum number of gemstones she can keep with unique values? -----Input----- The first line of the input contains a single integer n (1 le n le 100000), representing the number of gemstones in Alice\'s collection. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) representing the values of the gemstones. -----Output----- Output a single integer, the maximum number of gemstones Alice can keep with unique values. -----Examples----- Input 7 3 7 3 7 3 5 2 Output 4 Input 6 1 1 1 1 1 1 Output 1 Input 5 5 4 3 2 1 Output 5 -----Note----- In the first sample test case, the array of values is [3, 7, 3, 7, 3, 5, 2]. By removing two gems with the value 3 and one gem with the value 7, Alice can have the values [3, 7, 5, 2], which are all unique. In the second sample test case, all gems have the same value, so Alice can only keep one gem. In the third sample test case, all values are already unique, so Alice does not need to remove any gems.","solution":"def max_unique_gemstones(n, gemstones): Returns the maximum number of gemstones with unique values. Parameters: n (int): Number of gemstones. gemstones (list of int): Values of the gemstones. Returns: int: The maximum number of unique gemstones. unique_gemstones = set(gemstones) return len(unique_gemstones)"},{"question":"Description Are you ready for an adventure? For this coding challenge, you will be required to play with numbers and strings! Explanation Your function will be called `word_value` and it will get passed a list of strings. You will then return a list of values computed for each string where the value represents the sum of the alphabetical positions of each character in the string, ignoring spaces. For example, \'a\' = 1, \'b\' = 2, ..., \'z\' = 26. Input will always be a single word or sentence with no special characters and only lowercase letters. Example ```python word_value([\\"abc\\", \\"hello world\\"]) // Returns [6, 124] ``` - For the word \\"abc\\": a = 1, b = 2, c = 3; total value = 1 + 2 + 3 = 6 - For the sentence \\"hello world\\": h = 8, e = 5, l = 12, l = 12, o = 15, w = 23, o = 15, r = 18, l = 12, d = 4; total value = 8 + 5 + 12 + 12 + 15 + 23 + 15 + 18 + 12 + 4 = 124","solution":"def word_value(lst): Calculate the alphabetic value of each string in the list. Args: lst : list of str : List of strings to calculate values for. Returns: list of int : List of integer values corresponding to each input string. def single_word_value(word): return sum((ord(char) - ord(\'a\') + 1) for char in word if char.isalpha()) return [single_word_value(word) for word in lst]"},{"question":"Create a function that accepts a string and returns the longest substring without repeating characters. For example: ``` \\"abcabcbb\\" ==> \\"abc\\" \\"bbbbb\\" ==> \\"b\\" \\"pwwkew\\" ==> \\"wke\\" ``` If the input string is empty, return an empty string: ``` \\"\\" ==> \\"\\" ```","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. :param s: Input string :return: Longest substring without repeating characters if not s: return \\"\\" start = 0 maxLength = 0 startMax = 0 seen = {} for end in range(len(s)): if s[end] in seen: start = max(start, seen[s[end]] + 1) seen[s[end]] = end if end - start + 1 > maxLength: maxLength = end - start + 1 startMax = start return s[startMax:startMax + maxLength]"},{"question":"# Stock Buy and Sell You have been given the stock prices of a company for N consecutive days. You need to maximize your profit by choosing a single day to buy the stock and a different day to sell it. Return the maximum profit you can achieve. If no profit can be made, return 0. # Notes * The list will contain at least 2 numbers. * You must buy before you sell. # Examples * ex1 * Input = ```[7, 1, 5, 3, 6, 4]``` * Result = ```5``` (Buying on day 2 and selling on day 5) * ex2 * Input = ```[7, 6, 4, 3, 1]``` * Result = ```0``` (No profit can be made) * ex3 * Input = ```[2, 4, 1, 2, 10]``` * Result = ```9``` (Buying on day 3 and selling on day 5)","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling the stock once. If no profit can be made, returns 0. min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price profit = price - min_price if profit > max_profit: max_profit = profit return max_profit"},{"question":"Given a list of n integers, your task is to find two integers in the list that sum up to a given target integer x. If there are multiple pairs or solutions, return the one where the elements have the lowest indices. If no such pair exists, return \\"None\\". -----Input----- - The first line contains an integer n, which denotes the number of elements in the list. - The second line contains n space-separated integers, representing the elements of the list. - The third line contains a single integer x, the target sum. -----Output----- - Output two integers, the two elements from the list that add up to x, in the order of their appearance in the list. - If no such pair exists, output \\"None\\". -----Constraints----- - 2 ≤ n ≤ 10^4 - -10^9 ≤ elements of the list ≤ 10^9 - -10^9 ≤ x ≤ 10^9 -----Example----- Input: 5 1 2 3 4 5 9 Output: 4 5 Input: 4 1 2 3 1 5 Output: 2 3 Input: 4 1 2 3 4 8 Output: None Explanation: - In the first example, the pair of integers 4 and 5 add up to 9. - In the second example, the pair of integers 2 and 3 add up to 5. - In the third example, no pair of integers in the list add up to 8.","solution":"def find_pair_with_sum(n, elements, x): Finds two integers in the list that sum up to a given target integer x. Returns the one where the elements have the lowest indices if there are multiple pairs. If no such pair exists, returns \\"None\\". seen = {} for index, number in enumerate(elements): complement = x - number if complement in seen: return elements[seen[complement]], number seen[number] = index return None"},{"question":"Implement a function `sorted_squares` that takes a sorted array of integers (both positive and negative) as input and returns a new array containing the squares of each number from the input array, also sorted in non-decreasing order. For example: ```python def sorted_squares(arr): # Your code here print(sorted_squares([-7, -3, 2, 3, 11])) # Output: [4, 9, 9, 49, 121] print(sorted_squares([-5, -2, 0, 1, 3])) # Output: [0, 1, 4, 9, 25] ``` Constraints: - The input array will have at least one element and will contain integers. - The array is sorted in non-decreasing order. Additional notes: - Aim for an efficient solution with a time complexity better than O(n^2). - Consider using a two-pointer approach to achieve the desired time complexity.","solution":"def sorted_squares(arr): Given a sorted array of integers, both negative and positive, returns a new array containing the squares of each number from the input array sorted in non-decreasing order. n = len(arr) result = [0] * n left, right = 0, n - 1 position = n - 1 while left <= right: if abs(arr[left]) > abs(arr[right]): result[position] = arr[left] ** 2 left += 1 else: result[position] = arr[right] ** 2 right -= 1 position -= 1 return result"},{"question":"You are given a list of integers representing the heights of buildings in a city skyline. Each building is of width 1. The goal is to find out how much water would be trapped after a heavy rain. Write a function `trap_rainwater` that takes a list of non-negative integers representing the heights of the buildings and returns the total amount of water that would be trapped between them. ```python def trap_rainwater(heights): # Implement the function here # Example 1: # Input: [0,1,0,2,1,0,1,3,2,1,2,1] # Output: 6 # Example 2: # Input: [4,2,0,3,2,5] # Output: 9 # Example 3: # Input: [0,0,0,0] # Output: 0 # Example 4: # Input: [3, 0, 0, 2, 0, 4] # Output: 10 # Explanation for Example 1: # The terrain can hold 6 units of water between the buildings. ```","solution":"def trap_rainwater(heights): Calculate the trapped rainwater given a list of building heights. :param heights: List of non-negative integers representing the heights of the buildings :return: Total amount of trapped water if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"In a certain game, players strategize by collecting cards worth different point values. The rule is that each player can only collect cards in increasing order of their value. However, players can skip cards, but they cannot return to a card once they have moved past it. The objective is to determine the maximum number of cards a player can collect in such a game. # Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of cards available. The second line contains n space-separated integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^9), representing the value of each card in the order they are presented. # Output Print a single integer, the maximum number of cards a player can collect. # Example Input: 6 3 1 2 5 6 4 Output: 4 # Note For the given example, the player can collect up to 4 cards in the following order: - 1 - 2 - 5 - 6 Alternate valid collections could be: - 1 - 2 - 4 - 6 However, the maximum number of cards collected is 4 in both cases.","solution":"def max_cards(n, cards): Returns the maximum number of cards that can be collected in increasing order of their values. # Initialize the length of longest increasing subsequence (LIS) from bisect import bisect_left lis = [] for card in cards: pos = bisect_left(lis, card) if pos == len(lis): lis.append(card) else: lis[pos] = card return len(lis)"},{"question":"# Story In order to secure your system, you decided to implement a password strength checker. The goal is to ensure that users create strong passwords. However, your initial approach for checking the strength of the passwords is too cumbersome. You need to optimize the code to make it more efficient and concise. --- # Task You will be given an initial implementation of a password strength checker function which operates correctly but is too verbose. The function currently evaluates the length of the password, the inclusion of uppercase and lowercase letters, numbers, and special characters. Your goal is to refactor this function to reduce its length while maintaining or improving its functionality. The existing implementation is 600 characters long, and you must shorten it to at most 200 characters. **Note:** The refactored function should still perform all checks required to determine the strength of the password: it should be at least 8 characters long, contain both uppercase and lowercase letters, include at least one digit, and one special character.","solution":"import re def is_strong_password(password): return bool(re.match(r\'^(?=.*[a-z])(?=.*[A-Z])(?=.*d)(?=.*[W_]).{8,}\', password))"},{"question":"You are given a 2D grid of size NxN, where each cell in the grid contains either a house (denoted by \'H\'), a market (denoted by \'M\'), or a blank space (denoted by \'.\'). Your task is to determine the minimum distance from each house to any market and return the maximum of these minimum distances. The distance between two cells (i, j) and (x, y) in the grid is defined as the Manhattan distance: |i - x| + |j - y|. -----Input:----- - First line will contain an integer, T, the number of test cases. - For each test case: - The first line will contain the integer N, the size of the grid. - The next N lines will each contain N characters, representing the grid. -----Output:----- For each test case, output in a single line the maximum of the minimum distances from any house to the nearest market. If there are no houses or markets, output -1. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 300 - Grid will contain only characters \'H\', \'M\', and \'.\'. -----Example Input:----- 2 3 H.. ... ..M 4 H.M. .... M.H. .... -----Example Output:----- 2 1 -----Explanation:----- First test case: The grid is: H.. ... ..M The distance from the house at (0, 0) to the market at (2, 2) is 4, but since the house can move to either (2, 0), (2, 1), or (1, 2) in a single day, it takes a minimum of 2 days to reach a market. Second test case: The grid is: H.M. .... M.H. .... For the house at (0, 0), the nearest market is at (0, 2) or (2, 0), both requiring a distance of 2. For the house at (2, 2), the nearest market is at (2, 0) or (0, 2), both requiring a distance of 2. Therefore, the answer for the second test case is 1.","solution":"def max_min_house_market_distance(T, test_cases): def bfs_multisource(grid, houses): from collections import deque, defaultdict N = len(grid) dx = [1, -1, 0, 0] dy = [0, 0, 1, -1] # Create a distance dictionary for houses initialized to inf distances = defaultdict(lambda: float(\'inf\')) # Prepare the queue with all market positions and mark their distances as 0 queue = deque() for x in range(N): for y in range(N): if grid[x][y] == \'M\': queue.append((x, y, 0)) # Conduct a BFS from all market positions simultaneously while queue: cx, cy, current_dist = queue.popleft() for i in range(4): nx, ny = cx + dx[i], cy + dy[i] if 0 <= nx < N and 0 <= ny < N and grid[nx][ny] != \'M\': if (nx, ny) not in distances or distances[(nx, ny)] > current_dist + 1: distances[(nx, ny)] = current_dist + 1 queue.append((nx, ny, current_dist + 1)) # Return the minimum distance for each house return [distances[house] for house in houses] results = [] for i in range(T): N = test_cases[i][0] grid = test_cases[i][1] houses = [(x, y) for x in range(N) for y in range(N) if grid[x][y] == \'H\'] if not houses: results.append(-1) continue markets = any(grid[x][y] == \'M\' for x in range(N) for y in range(N)) if not markets: results.append(-1) continue min_distances = bfs_multisource(grid, houses) results.append(max(min_distances)) return results"},{"question":"You are given an array of integers `nums` that is sorted in non-decreasing order. You need to remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. After removing the duplicates, return the new length of the array. You must achieve this in-place with O(1) extra memory, not using any additional data structures. Note that the result does not need to be within the original array\'s bounds, modify the input array to achieve the result. Example 1: Input: nums = [1, 1, 2] Output: 2 Explanation: The function should modify the array to [1, 2, _] and return the new length, which is 2. Example 2: Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5 Explanation: The function should modify the array to [0, 1, 2, 3, 4, _, _, _, _, _] and return the new length, which is 5. Example 3: Input: nums = [1,1,1] Output: 1 Explanation: The function should modify the array to [1, _, _] and return the new length, which is 1. Constraints: - 1 <= nums.length <= 10^4 - -10^4 <= nums[i] <= 10^4 - nums is sorted in non-decreasing order.","solution":"def remove_duplicates(nums): Removes duplicates from sorted array in-place and returns the length of the array with unique elements. :param nums: List[int], a list of sorted integers :return: int, the new length of the array with unique elements if not nums: return 0 # The index of the last unique element last_unique_index = 0 for i in range(1, len(nums)): if nums[i] != nums[last_unique_index]: last_unique_index += 1 nums[last_unique_index] = nums[i] return last_unique_index + 1"},{"question":"Write a function named `group_anagrams` that takes a list of strings and returns a list of lists where each sublist contains words that are anagrams of each other. Example: ```python >>> group_anagrams([\\"tar\\", \\"rat\\", \\"bats\\", \\"tabs\\", \\"stab\\", \\"cat\\", \\"act\\"]) [[\'tar\', \'rat\'], [\'bats\', \'tabs\', \'stab\'], [\'cat\', \'act\']] ``` Notes: 1. All input strings will be lowercase. 2. The order of the words in the anagram groups and the order of the groups themselves does not matter. 3. Use of the `collections` module is allowed, but you should not use any predefined functions specifically for solving anagrams (such as sorting each string and using it as a key). Make sure to handle edge cases, such as: ```python >>> group_anagrams([]) [] >>> group_anagrams([\\"\\"]) [[\'\']] >>> group_anagrams([\\"a\\"]) [[\'a\']] ```","solution":"from collections import defaultdict def group_anagrams(words): Groups a list of strings into anagrams. :param words: List of strings :return: List of lists where each sublist contains anagrams anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"Given two balanced binary search trees, return a merged list of all nodes in ascending order. This task involves traversing the trees and combining the results. # Function Signature ```python def merge_trees(tree1: TreeNode, tree2: TreeNode) -> List[int]: ``` # Input - `tree1`: The root node of the first balanced binary search tree. - `tree2`: The root node of the second balanced binary search tree. # Output - A list of integer values in ascending order containing all nodes from both trees. # Constraints - The number of nodes in each tree is at most `10^4`. - The value of each node is unique in its respective tree. - A balanced binary search tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. # Examples ```python # Example 1 # Tree 1: # 2 # / # 1 3 # # Tree 2: # 7 # / # 6 8 # # merge_trees(tree1, tree2) => [1, 2, 3, 6, 7, 8] # Example 2 # Tree 1: # 4 # / # 2 6 # / / #1 3 5 7 # Tree 2: # 10 # / # 8 12 # / / # 7 9 11 13 # # merge_trees(tree1, tree2) => [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13] ``` # Note For this task, a `TreeNode` is defined by a class with attributes `val` (value), `left` (left child), and `right` (right child). The exact implementation of this class and traversal algorithms will vary by programming language, but in Python it might look something like this: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ```","solution":"from typing import List class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def merge_trees(tree1: TreeNode, tree2: TreeNode) -> List[int]: def inorder_traversal(root: TreeNode) -> List[int]: if not root: return [] return inorder_traversal(root.left) + [root.val] + inorder_traversal(root.right) # Get the sorted lists from both trees using in-order traversal list1 = inorder_traversal(tree1) list2 = inorder_traversal(tree2) # Merge the two sorted lists merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Alex wants to send a package from city A to city B in the shortest possible time. There are N cities and M roads connecting them. Each road connects two cities and takes a certain amount of time to traverse. Additionally, certain roads are toll roads, which means Alex needs to pay a certain amount of money to use them. Alex has a limited budget and cannot afford to pay more than K units of money for tolls. Your task is to determine the shortest possible time Alex can take to travel from city A to city B without exceeding the budget for tolls. If it\'s not possible to reach city B from city A within the budget, return -1. -----Constraints----- - 2 ≤ N ≤ 10^5 - 1 ≤ M ≤ 2×10^5 - 1 ≤ A, B ≤ N (A ≠ B) - 1 ≤ u_i, v_i ≤ N (1 ≤ i ≤ M) - 1 ≤ t_i, l_i ≤ 10^4 (1 ≤ i ≤ M) - 0 ≤ K ≤ 10^6 -----Input----- The input is given from Standard Input in the following format: N M A B K u_1 v_1 t_1 l_1 : u_M v_M t_M l_1 -----Output----- Print the shortest possible time to travel from city A to city B within the budget. If it is impossible to reach city B from city A, print -1. -----Sample Input----- 5 6 1 5 10 1 2 3 2 2 3 4 5 2 4 2 1 4 5 6 2 3 5 3 8 1 3 7 10 -----Sample Output----- 11 Explanation: Alex can travel the route 1 → 2 → 4 → 5 with a total travel time of 3 + 2 + 6 = 11. The total toll paid is 2 + 1 + 2 = 5, which is within the budget.","solution":"import heapq import sys from collections import defaultdict def shortest_path_with_budget(N, M, A, B, K, roads): graph = defaultdict(list) for u, v, t, l in roads: graph[u].append((v, t, l)) graph[v].append((u, t, l)) # Using a tuple (time, current_city, money_spent) for heapq pq = [(0, A, 0)] dist = {(A, 0): 0} while pq: time, u, money_spent = heapq.heappop(pq) if u == B: return time for v, t, l in graph[u]: new_time = time + t new_money_spent = money_spent + l if new_money_spent <= K: if (v, new_money_spent) not in dist or new_time < dist[(v, new_money_spent)]: dist[(v, new_money_spent)] = new_time heapq.heappush(pq, (new_time, v, new_money_spent)) return -1 # Function to use the above for given input def find_shortest_path(N, M, A, B, K, edges): roads = [tuple(map(int, edge.split())) for edge in edges] return shortest_path_with_budget(N, M, A, B, K, roads) # Example usage: N, M, A, B, K = 5, 6, 1, 5, 10 edges = [ \\"1 2 3 2\\", \\"2 3 4 5\\", \\"2 4 2 1\\", \\"4 5 6 2\\", \\"3 5 3 8\\", \\"1 3 7 10\\" ] print(find_shortest_path(N, M, A, B, K, edges)) # Output: 11"},{"question":"Given a list of integers, write a function to determine if it contains a contiguous subarray of size at least 2 that sums to zero. If such a subarray exists, return True. Otherwise, return False. Example: Input: [1, 2, -3, 3, -1] Output: True Explanation: The subarray [1, 2, -3] sums to zero. Notes: - The input list can be of any length. - The elements of the list can be positive, negative, or zero.","solution":"def has_zero_sum_subarray(arr): Check if there is a contiguous subarray of size at least 2 that sums to zero. if len(arr) < 2: return False prefix_sum = {} current_sum = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum == 0 or current_sum in prefix_sum: return True prefix_sum[current_sum] = i return False"},{"question":"You are tasked with helping aliens living in planet Zorg to allocate city blocks to build their homes. Each city block has a certain height represented by an integer, and blocks must be arranged in a sequential row. The aliens have a unique requirement: every taller block must be to the right of a shorter block. In addition, the aliens have specific preferences: - The average height of blocks in any sequence must be a specified integer value. - You need to provide one of the possible sequences of blocks that meet the aliens\' requirements. -----Input:----- - The first line will contain T, the number of test cases. - Each test case consists of a line with three space-separated integers N, h_{text{min}}, and h_{text{avg}}, where N is the number of blocks, h_{text{min}} is the minimum height of each block, and h_{text{avg}} is the required average height of the sequence of blocks. -----Output:----- For each test case, output a single line containing N space-separated integers representing the heights of the blocks in one possible ordering that satisfies both the uniqueness property and the average height requirement. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - 1 leq h_{text{min}} leq 10^4 - h_{text{min}} leq h_{text{avg}} leq h_{text{min}} + (N-1) -----Sample Input:----- 2 5 2 4 3 6 6 -----Sample Output:----- 2 3 4 5 6 6 6 6","solution":"def generate_block_heights(T, test_cases): results = [] for case in test_cases: N, h_min, h_avg = case total_height = h_avg * N heights = [h_min] * N remaining_height = total_height - h_min * N for i in range(N): if remaining_height == 0: break increase = min(remaining_height, i) heights[i] += increase remaining_height -= increase results.append(heights) return results"},{"question":"# Kneel before Zod General Zod, a notorious villain, has hacked into a planet’s communication system, altering certain letter combinations into his code. The planet’s inhabitants need to decipher any messages potentially altered by General Zod to understand their true meanings. # Kata Task Transform the alien code back into human-readable messages based on the following letter combinations: * ```ZOD``` = *\\"Kneel before Zod!\\"* * ```ZODZOD``` = *\\"Double Zod has come!\\"* If no valid combinations are found, the message remains unchanged. # Notes * The message reads left-to-right. * Any letters not forming the exact sequences \\"ZOD\\" or \\"ZODZOD\\" are to be ignored. * Note that the sequences are case-sensitive. * Multiple valid sequences should be translated individually in the order they appear. # Examples * ex1. ZODZODXYZZOD = *\\"Double Zod has come!\' Kneel before Zod!\\"* * ex2. ZDOZYZZODYYZODZOD = *\\"Kneel before Zod! Double Zod has come!\\"* * ex3. ZZXYZYZDO = *\\"(\\"ZZXYZYZDO\\")*","solution":"def translate_message(message): Translates the alien code back into human-readable messages Arguments: message -- str, the alien-coded message Returns: str, the human-readable message translations = { \\"ZOD\\": \\"Kneel before Zod!\\", \\"ZODZOD\\": \\"Double Zod has come!\\" } result = \'\' i = 0 while i < len(message): if message[i:i+6] == \\"ZODZOD\\": result += translations[\\"ZODZOD\\"] i += 6 elif message[i:i+3] == \\"ZOD\\": result += translations[\\"ZOD\\"] i += 3 else: result += message[i] i += 1 return result"},{"question":"You are given a binary tree in which each node contains an integer value. Write a function to determine the largest value in each row of the tree. Example: Given the binary tree: ``` 1 / 3 2 / 5 3 9 ``` You should return [1, 3, 9]. Note: - The number of nodes in the tree will not exceed 10,000. - The tree is not necessarily a binary search tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right from collections import deque def largest_values_in_tree_rows(root): Return the largest values in each row of the binary tree. :param root: TreeNode root :return: List[int] largest values in each row if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) max_value = float(\'-inf\') for _ in range(level_size): node = queue.popleft() max_value = max(max_value, node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(max_value) return result"},{"question":"--- An online retailer frequently offers discounts on its products. To attract more customers, the retailer wants to create a special offer where the total cost of purchasing a combination of three items is minimized. The retailer has a list of available items along with their prices. Your task is to find the minimal total cost of purchasing any three items. -----Input:----- The first line of the input contains a single integer T, the number of test cases. Each test case starts with a line containing the integer N. The next line contains N space-separated integers where the i-th integer represents the price of the i-th item. -----Output:----- For each test case, output a single line containing the minimum total cost of purchasing any three items. -----Constraints:----- 1 ≤ T ≤ 10 3 ≤ N ≤ 5000 1 ≤ price of each item ≤ 1000000000 -----Example:-----Input: 1 5 10 20 30 40 50 Output: 60 Explanation: The minimal total cost can be achieved by purchasing items with prices 10, 20, and 30. ---","solution":"def minimal_total_cost_of_three_items(test_cases): results = [] for prices in test_cases: prices.sort() results.append(sum(prices[:3])) return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0].strip()) test_cases = [] index = 1 for _ in range(T): N = int(lines[index].strip()) prices = list(map(int, lines[index + 1].strip().split())) test_cases.append(prices) index += 2 return test_cases"},{"question":"Given a string as input, can you count the number of vowels (a, e, i, o, u) in the string, regardless of case? Examples: input: output: \\"Hello\\" -> 2 \\"WORLD\\" -> 1 \\"Python\\" -> 1 \\"Beautiful\\" -> 5 \\"Sky\\" -> 0 Input will be any valid string, including empty strings. You can assume that all inputs are valid strings.","solution":"def count_vowels(s): Returns the number of vowels (a, e, i, o, u) present in the string s, regardless of case. vowels = \'aeiouAEIOU\' return sum(1 for char in s if char in vowels)"},{"question":"In a dystopian future, a large matrix represents a battle grid where various factions are preparing for combat. Each cell in the matrix contains a positive integer representing the strength of a particular faction\'s unit. Two factions are allies if they have a common divisor greater than 1. Your task is to find out the largest group of connected cells (horizontally or vertically adjacent) that belong to allied factions. -----Input:----- - First line contains two integers R and C, the number of rows and columns in the matrix respectively. - Each of the next R lines contains C integers, each representing the strength of the unit in the corresponding cell of the matrix. -----Output:----- Output a single integer which is the size of the largest group of connected cells belonging to allied factions. -----Constraints----- - 1 leq R, C leq 50 - 1 leq Cell value leq 10^5 -----Sample Input:----- 4 4 2 3 4 5 6 4 3 8 6 9 2 7 1 8 9 2 -----Sample Output:----- 5 -----Explanation:----- In the grid, ``` 2 3 4 5 6 4 3 8 6 9 2 7 1 8 9 2 ``` The largest group of connected cells belonging to allied factions is: ``` 6 4 6 9 8 9 2 ``` This group contains 5 cells (6, 4, 6, 9, 8).","solution":"from math import gcd from collections import deque def get_neighbors(r, c, R, C): Return valid neighbors (up, down, left, right) for cell (r, c) neighbors = [] if r - 1 >= 0: neighbors.append((r - 1, c)) if r + 1 < R: neighbors.append((r + 1, c)) if c - 1 >= 0: neighbors.append((r, c - 1)) if c + 1 < C: neighbors.append((r, c + 1)) return neighbors def are_allies(a, b): Return whether two cell values are allied. return gcd(a, b) > 1 def bfs(matrix, r, c, visited, R, C): Perform BFS to find the size of the connected component of allies starting from (r, c) queue = deque([(r, c)]) visited[r][c] = True component_size = 0 while queue: cr, cc = queue.popleft() component_size += 1 for nr, nc in get_neighbors(cr, cc, R, C): if not visited[nr][nc] and are_allies(matrix[cr][cc], matrix[nr][nc]): visited[nr][nc] = True queue.append((nr, nc)) return component_size def largest_allied_group(R, C, matrix): visited = [[False for _ in range(C)] for _ in range(R)] largest_size = 0 for r in range(R): for c in range(C): if not visited[r][c]: component_size = bfs(matrix, r, c, visited, R, C) largest_size = max(largest_size, component_size) return largest_size # Example usage: R = 4 C = 4 matrix = [ [2, 3, 4, 5], [6, 4, 3, 8], [6, 9, 2, 7], [1, 8, 9, 2] ] # This should return 5 print(largest_allied_group(R, C, matrix))"},{"question":"Write a function that takes a positive integer n as an input and returns the largest prime factor of that number. A prime factor is defined as a factor that is a prime number. Example: Input: 15 Output: 5 Explanation: The factors of 15 are 1, 3, 5, 15. Among these, 3 and 5 are primes and the largest one is 5. Input: 21 Output: 7 Explanation: The factors of 21 are 1, 3, 7, 21. Among these, 3 and 7 are primes and the largest one is 7.","solution":"def largest_prime_factor(n): Returns the largest prime factor of a positive integer n. def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True largest_factor = 1 factor = 2 while factor * factor <= n: if n % factor == 0: if is_prime(factor): largest_factor = factor while n % factor == 0: n //= factor factor += 1 if n > 1 and is_prime(n): # if n is prime and greater than 1 largest_factor = n return largest_factor"},{"question":"Implement a function `findCommonTuples(lst1, lst2)` that takes in two lists of tuples `lst1` and `lst2`. Each tuple contains exactly two elements - a string and an integer. The function should return a list of tuples that are common between `lst1` and `lst2`. The result should be sorted in ascending order based on the string element in the tuple, and then by the integer element if the strings are the same. If there are no common tuples, return an empty list. **Example:** ```python lst1 = [(\\"apple\\", 2), (\\"banana\\", 4), (\\"cherry\\", 7), (\\"date\\", 1)] lst2 = [(\\"date\\", 3), (\\"apple\\", 2), (\\"banana\\", 4), (\\"elderberry\\", 5)] print(findCommonTuples(lst1, lst2)) ``` **Output:** ``` [(\\"apple\\", 2), (\\"banana\\", 4)] ``` **Explanation:** - The common tuples between the two lists are `(\\"apple\\", 2)` and `(\\"banana\\", 4)`. - These tuples are returned in a sorted order based on the string element (`\\"apple\\"` appears before `\\"banana\\"`).","solution":"def findCommonTuples(lst1, lst2): Takes two lists of tuples and returns a sorted list of tuples present in both lists. Tuples are sorted first by the string and then by the integer. # Convert the lists to sets to find common elements common_tuples = set(lst1).intersection(set(lst2)) # Convert the set back to a list and sort it sorted_common_tuples = sorted(common_tuples, key=lambda x: (x[0], x[1])) return sorted_common_tuples"},{"question":"You are tasked with designing a tournament ranking system for a popular online multiplayer game. Players participate in matches and are awarded points based on their performance. Each match has a unique identifier, and players can compete in multiple matches. The final ranking of the players is based on their total points across all matches. Given a list of matches and the points scored by players in each match, you need to determine the ranking of the players. The player with the highest total points should be ranked first, the player with the second highest total points should be ranked second, and so on. In case of a tie in points, players should be ranked in lexicographical order of their names. ----Input---- The first line of the input contains an integer T, the number of test cases. Each test case starts with an integer M, the number of matches. Each of the following M lines describes a match and contains three values: an integer match_id, a string player_name, and an integer points_scored. ----Output---- For each test case, output the ranking of the players. The first line should contain the number of distinct players. For each player, output the player\'s rank, player name, and the total points scored by the player, in the sorted order as described above. ----Constraints---- - 1 ≤ T ≤ 100 - 1 ≤ M ≤ 1000 - 1 ≤ match_id ≤ 10^6 - Player names consist of lowercase English letters and are at most 100 characters long. - 1 ≤ points_scored ≤ 1000 ----Example---- Input: 1 7 1 alice 10 1 bob 15 2 alice 20 2 bob 10 3 charlie 5 3 alice 15 3 bob 15 Output: 3 1 alice 45 2 bob 40 3 charlie 5 ----Explanation---- For the given test case, there are 7 match records. \\"alice\\" has a total of 45 points, \\"bob\\" has 40 points, and \\"charlie\\" has 5 points. Therefore, \\"alice\\" is ranked first, \\"bob\\" is ranked second, and \\"charlie\\" is ranked third.","solution":"def rank_players(test_cases): results = [] for case in test_cases: matches = case player_points = {} for match in matches: match_id, player_name, points_scored = match if player_name in player_points: player_points[player_name] += points_scored else: player_points[player_name] = points_scored sorted_players = sorted(player_points.items(), key=lambda x: (-x[1], x[0])) results.append(len(sorted_players)) for i, (player_name, total_points) in enumerate(sorted_players): results.append(f\\"{i+1} {player_name} {total_points}\\") return results"},{"question":"Create a function that merges two sorted lists into one sorted list. The function should take two lists as arguments and return a new list containing all the elements from the two input lists, sorted in ascending order. Your function should not use any built-in sort functions. For example: ```python merge_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6] merge_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6] merge_lists([1, 3, 5], []) == [1, 3, 5] merge_lists([], [2, 4, 6]) == [2, 4, 6] merge_lists([], []) == [] ```","solution":"def merge_lists(lst1, lst2): Merges two sorted lists into one sorted list. Args: lst1: List of sorted integers. lst2: List of sorted integers. Returns: A new list containing all the elements from input lists, sorted in ascending order. merged_list = [] i = j = 0 while i < len(lst1) and j < len(lst2): if lst1[i] < lst2[j]: merged_list.append(lst1[i]) i += 1 else: merged_list.append(lst2[j]) j += 1 # Append remaining elements of lst1, if any while i < len(lst1): merged_list.append(lst1[i]) i += 1 # Append remaining elements of lst2, if any while j < len(lst2): merged_list.append(lst2[j]) j += 1 return merged_list"},{"question":"Write a function that takes a balanced binary tree and checks if it is height-balanced according to the following definition: A binary tree in which the left and right subtrees of every node differ in height by no more than 1. Here is the tree node class to use: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` For example: ```python # Example 1: # 1 # / # 2 3 # / # 4 5 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) print(is_balanced(root)) # should return True # Example 2: # 1 # / # 2 # / # 3 root = TreeNode(1) root.left = TreeNode(2) root.left.left = TreeNode(3) print(is_balanced(root)) # should return False ``` Here, the function `is_balanced` should return `True` if the tree is height-balanced, and `False` otherwise.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root): Determines if a binary tree is height-balanced. def get_height(node): if not node: return 0 left_height = get_height(node.left) right_height = get_height(node.right) if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return get_height(root) != -1"},{"question":"Given an array of integers, you have to find out whether there exists any subarray (contiguous elements) which sums up to exactly zero. A subarray is defined as a non-empty sequence of consecutive elements in the array. If such a subarray is found, output \\"YES\\", otherwise output \\"NO\\". -----Input----- The first line contains an integer T, which denotes the number of test cases. Each of the next T lines contains a single integer, N, denoting the length of the array followed by N integers, representing the elements of the array. -----Output----- For each test case, output \\"YES\\" if there exists a subarray with sum zero, otherwise \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 10^5 - 1 ≤ N ≤ 10^5 - -10^9 ≤ array element ≤ 10^9 The sum of N over all test cases does not exceed 10^6 -----Example----- Input: 2 5 4 2 -3 1 6 3 1 2 3 Output: YES NO -----Explanation----- In the first test case, the subarray [4, 2, -3, 1] sums up to 0, so the output is \\"YES\\". In the second test case, there is no subarray that sums up to 0, hence the output is \\"NO\\".","solution":"def check_subarray_sum_zero(num_cases, test_cases): results = [] for i in range(num_cases): N = test_cases[i][0] array = test_cases[i][1] prefix_sum = set() current_sum = 0 found = False for num in array: current_sum += num if current_sum == 0 or current_sum in prefix_sum: found = True break prefix_sum.add(current_sum) if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of integers where each number represents a height of a building on a street. The buildings form a row and you can only see the buildings from the left side. You need to determine how many buildings are visible from this perspective. A building is visible if it is strictly taller than all the buildings before it. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of buildings on the street. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) representing the heights of the buildings. -----Output----- Print one integer — the number of buildings visible from the left side. -----Example----- Input 6 3 1 4 1 5 9 Output 4 Explanation: In the example, the buildings are [3, 1, 4, 1, 5, 9]. The buildings visible from the left are: - Building 1 with height 3 (no buildings before it). - Building 2 with height 1 (not taller than the previous buildings). - Building 3 with height 4 (taller than buildings 1 and 2). - Building 4 with height 1 (not taller than the previous buildings). - Building 5 with height 5 (taller than buildings 1, 2, 3, and 4). - Building 6 with height 9 (taller than all previous buildings). So a total of 4 buildings are visible.","solution":"def count_visible_buildings(n, heights): if n == 0: return 0 visible_count = 1 max_height = heights[0] for i in range(1, n): if heights[i] > max_height: visible_count += 1 max_height = heights[i] return visible_count"},{"question":"Given a list of words and a scrambled version of those words (anagrams), your task is to determine if the scrambled version is a valid anagram of the concatenation of the words in the list. Rules: 1. Each anagram must use the exact same characters as the concatenated words, but in any order. 2. The length of the anagram must be equal to the total length of the concatenated words. 3. All words and the anagram consist of lowercase English letters only. Return True if the scrambled version is a valid anagram, otherwise return False. Example 1: Input: words = [\\"listen\\", \\"silent\\"], anagram = \\"enlistensilt\\" Output: true Explanation: Both \\"listen\\" and \\"silent\\" concatenate to \\"listensilent\\", and \\"enlistensilt\\" is an anagram of it. Example 2: Input: words = [\\"hello\\", \\"world\\"], anagram = \\"helloworld\\" Output: true Explanation: \\"helloworld\\" is already a valid concatenation without further scrambling. Example 3: Input: words = [\\"rat\\", \\"tar\\"], anagram = \\"arttar\\" Output: true Explanation: \\"rat\\" + \\"tar\\" = \\"rattar\\", and \\"arttar\\" is an anagram of it. Example 4: Input: words = [\\"anagram\\", \\"test\\"], anagram = \\"magtsetanara\\" Output: false Explanation: Total length of concatenated words is 11, but the anagram length is 12. Example 5: Input: words = [\\"a\\"], anagram = \\"b\\" Output: false Explanation: \\"a\\" is not an anagram of \\"b\\". Constraints: - 1 <= words.length <= 10 - 1 <= words[i].length <= 20 - 1 <= anagram.length <= 200 - words[i] and anagram consist of lowercase English letters only.","solution":"from collections import Counter def is_valid_anagram(words, anagram): Given a list of words and a scrambled version of those words (anagram), determine if the scrambled version is a valid anagram of the concatenation of the words in the list. Args: words (List[str]): A list of words. anagram (str): A scrambled version of the concatenated words. Returns: bool: True if the anagram is valid, otherwise False. concatenated_words = \'\'.join(words) # Check if the lengths of the concatenated words and anagram match if len(concatenated_words) != len(anagram): return False # Check if both have identical character counts return Counter(concatenated_words) == Counter(anagram)"},{"question":"You are part of a team developing a search engine for a library\'s online database. Your task is to create a function that will return the list of book titles that match a given search query. The search engine should be case-insensitive and should return all titles that contain the entire search query as a substring. Input: - A list of strings, where each string is a book title. - A query string representing the search query. Output: - A list of strings representing the book titles that match the search query. Requirements: - The search should be case-insensitive. - The function should return the matching titles in the same order as they were in the input list. Example: ```python def search_books(titles, query): # Your implementation here # Sample titles titles = [ \\"Harry Potter and the Sorcerer\'s Stone\\", \\"A Game of Thrones\\", \\"The Hobbit\\", \\"To Kill a Mockingbird\\", \\"The Great Gatsby\\" ] # Sample queries and expected outputs print(search_books(titles, \\"the\\")) # [\\"Harry Potter and the Sorcerer\'s Stone\\", \\"The Hobbit\\", \\"The Great Gatsby\\"] print(search_books(titles, \\"GREAT\\")) # [\\"The Great Gatsby\\"] print(search_books(titles, \\"game\\")) # [\\"A Game of Thrones\\"] ``` The `search_books` function should take in the `titles` list and `query` string, then return a list of book titles that contain the query. Ensure that the match is case-insensitive.","solution":"def search_books(titles, query): Returns a list of book titles that match the search query. Parameters: - titles (list of str): List of book titles - query (str): Search query Returns: - list of str: List of book titles that contain the query query_lower = query.lower() return [title for title in titles if query_lower in title.lower()]"},{"question":"Write a program that reads a list of integers and checks whether the list is sorted in ascending order. The list can have up to 50 integers and can include negative numbers. -----Input----- Input to the program consists of two lines. The first line contains an integer N (1 <= N <= 50) representing the number of integers in the list. The second line contains N integers separated by spaces. -----Output----- Output should consist of a single line containing a character \'Y\' if the list is sorted in ascending order, and \'N\' if it is not. -----Example----- Input: 5 1 2 3 4 5 Output: Y Input: 5 3 1 2 5 4 Output: N","solution":"def is_sorted_ascending(n, lst): Checks if the list is sorted in ascending order. Parameters: n (int): Number of integers in the list lst (list of int): The list of integers Returns: str: \'Y\' if the list is sorted in ascending order, \'N\' otherwise for i in range(n-1): if lst[i] > lst[i+1]: return \'N\' return \'Y\'"},{"question":"Tina loves baking cakes. She has multiple types of cakes and wants to organize them in a way that makes it easy for her to find a specific type when she needs it. Tina wants to sort her cakes based on their sweetness level (a non-negative integer) in non-descending order. However, Tina also wants to keep her cakes ordered by their freshness (another non-negative integer) as a secondary criterion in non-ascending order if two cakes have the same sweetness level. Your task is to help Tina sort her cakes using the provided criteria. Write a program that takes the list of cakes and sorts them according to the given rules. -----Input----- The first line of input contains an integer T, the number of test cases. Then T test cases follow. The first line of each test case contains an integer N, denoting the number of cakes. Then N lines follow, each containing two space-separated integers S and F, the sweetness level and freshness level of a cake. -----Output----- For each test case, print N lines, each containing the sweetness and freshness levels of the cakes in the sorted order. -----Constraints----- 1 ≤ T ≤ 50 1 ≤ N ≤ 100 0 ≤ S, F ≤ 1000 -----Example----- Input: 2 3 3 10 2 5 3 5 4 5 2 4 7 5 9 3 1 Output: 2 5 3 10 3 5 3 1 4 7 5 9 5 2","solution":"def sort_cakes(cakes): This function takes a list of cakes where each cake is represented by a tuple (S, F) where S is the sweetness level and F is the freshness level. It returns a list of cakes sorted by their sweetness level in non-descending order. If two cakes have the same sweetness level, they are sorted by their freshness level in non-ascending order. return sorted(cakes, key=lambda cake: (cake[0], -cake[1])) def main(input_data): input_lines = input_data.split(\'n\') T = int(input_lines[0]) index = 1 results = [] for _ in range(T): N = int(input_lines[index]) index += 1 cakes = [] for __ in range(N): S, F = map(int, input_lines[index].split()) cakes.append((S, F)) index += 1 sorted_cakes = sort_cakes(cakes) results.append(sorted_cakes) return results"},{"question":"Write a function that takes an integer `n` (1 <= n <= 100) and returns the difference between the sum of the squares of the first `n` natural numbers and the square of their sum. For example: ```python sum_square_difference(10) == 2640 ``` Note! The input is an Integer and is always between 1 and 100 inclusive. The result should be an Integer.","solution":"def sum_square_difference(n): Returns the difference between the sum of the squares of the first n natural numbers and the square of their sum. sum_of_squares = sum(i**2 for i in range(1, n+1)) square_of_sum = sum(range(1, n+1)) ** 2 return square_of_sum - sum_of_squares"},{"question":"You are given an array of integers `arr` representing the cost of a set of projects and an integer `K` which denotes the number of projects you have resources to complete. Each project can either be funded entirely or not at all. You aim to maximize the number of projects you can complete such that their total cost does not exceed a given budget `B`. Write a function `maxProjects(arr, K, B)` that returns the maximum number of projects you can fund. Example 1: Input: arr = [2, 3, 1, 5, 4], K = 3, B = 7 Output: 3 Explanation: You can complete the projects with costs [2, 3, 1], which sum to 6. This does not exceed your budget and utilizes the maximum number of projects possible. Example 2: Input: arr = [10, 2, 5, 8, 3], K = 2, B = 10 Output: 2 Explanation: You can fund the projects with costs [2, 3] or [5, 3], both summing to 10 or less and utilizing the maximum number of projects you can complete within the budget. Example 3: Input: arr = [1, 1, 1, 1], K = 2, B = 3 Output: 2 Explanation: You can fund any two projects with costs [1, 1], summing to 2, which does not exceed your budget. Example 4: Input: arr = [7, 6, 8, 9], K = 2, B = 10 Output: 1 Explanation: You can fund only one of the projects with costs 7 or 6, both of which don’t exceed your budget but limit the maximum number of projects to 1 due to insufficient budget for more projects. Constraints: - 1 <= arr.length <= 1000 - 1 <= K <= arr.length - 1 <= arr[i] <= 1000 - 1 <= B <= 10000","solution":"def maxProjects(arr, K, B): Determines the maximum number of projects that can be funded without exceeding the budget B and without funding more than K projects. arr.sort() count = 0 total_cost = 0 for cost in arr: if count < K and total_cost + cost <= B: total_cost += cost count += 1 else: break return count"},{"question":"Given a string s consisting only of characters \'a\' and \'b\', a substring is considered balanced if it contains an equal number of \'a\'s and \'b\'s. Your task is to return the length of the shortest balanced substring in s. If no such substring exists, return -1. Example 1: Input: s = \\"babaa\\" Output: 2 Explanation: The balanced substrings are \\"ba\\", \\"ab\\", \\"ba\\", and \\"ab\\". The shortest has length 2. Example 2: Input: s = \\"bbaa\\" Output: 2 Explanation: The balanced substrings are \\"ba\\" and \\"ab\\". The shortest has length 2. Example 3: Input: s = \\"aaaa\\" Output: -1 Explanation: There are no balanced substrings in \\"aaaa\\". Example 4: Input: s = \\"babab\\" Output: 2 Explanation: The balanced substrings are \\"ba\\", \\"ab\\", \\"ab\\", \\"ba\\", \\"ba\\", and \\"ab\\". The shortest has length 2. Constraints: - 1 <= s.length <= 100 - s[i] is either \'a\' or \'b\'","solution":"def shortest_balanced_substring(s): Returns the length of the shortest balanced substring in s. A balanced substring contains an equal number of \'a\'s and \'b\'s. If no such substring exists, returns -1. # Iterate over all possible substring lengths starting from 2 (smallest balanced length) for length in range(2, len(s) + 1): # Iterate over all possible subtrings of current length for start in range(len(s) - length + 1): substring = s[start:start + length] # Check if the substring is balanced if substring.count(\'a\') == substring.count(\'b\'): return length return -1"},{"question":"Write a function `productOfDigits(n)` that takes an integer `n` as input and returns the product of its digits. If `n` is negative, consider only the absolute value of `n`. For example: - `productOfDigits(123)` should return `6` (because 1 * 2 * 3 = 6) - `productOfDigits(-456)` should return `120` (because 4 * 5 * 6 = 120) - `productOfDigits(0)` should return `0`","solution":"def productOfDigits(n): Returns the product of the digits of the number n. If n is negative, the absolute value is used. n = abs(n) if n == 0: return 0 product = 1 while n > 0: digit = n % 10 product *= digit n //= 10 return product"},{"question":"A group of friends are planning a hiking trip. To help them decide the difficulty of the hike, they want to calculate the elevation gain of the entire trail. The trail can be represented as a list of integers where each integer represents the elevation at that point. The elevation gain is defined as the sum of all the positive differences between consecutive elevations. Write a function that computes the total elevation gain of the trail. -----Input:----- - The first line of input contains an integer N, the number of elements in the trail. - The second line contains N space-separated integers representing the elevations. -----Output:----- Return a single integer representing the total elevation gain of the trail. -----Constraints----- - 1 leq N leq 10^5 - -10^9 leq text{Elevation} leq 10^9 -----Example Input:----- 6 100 120 90 150 80 200 -----Example Output:----- 200 -----Explanation:----- - The elevation gain from 100 to 120 is 20. - The elevation gain from 120 to 90 is ignored because it is a loss. - The elevation gain from 90 to 150 is 60. - The elevation gain from 150 to 80 is ignored because it is a loss. - The elevation gain from 80 to 200 is 120. - Therefore, the total elevation gain is 20 + 60 + 120 = 200.","solution":"def total_elevation_gain(N, elevations): Returns the total elevation gain of the trail. Args: N : int : The number of elements in the trail. elevations : list of int : The list of elevations in the trail. Returns: int : The total elevation gain. total_gain = 0 for i in range(1, N): if elevations[i] > elevations[i - 1]: total_gain += elevations[i] - elevations[i - 1] return total_gain"},{"question":"Given a non-empty array of integers, write a function to determine whether the array contains any duplicates. Your function should return `true` if any integer appears at least twice in the array, and `false` if every element is distinct. Example 1: Input: nums = [1, 2, 3, 1] Output: true Example 2: Input: nums = [1, 2, 3, 4] Output: false Example 3: Input: nums = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2] Output: true","solution":"def contains_duplicate(nums): Returns True if any integer appears at least twice in the array, False otherwise. seen = set() for num in nums: if num in seen: return True seen.add(num) return False"},{"question":"In a certain math game, players are given a sequence of numbers, and their goal is to check whether the sequence can be split into two sub-sequences such that the sum of the elements in both sub-sequences is equal. Write a function `can_be_split_into_equal_sum_subsequences(sequence)` that receives a list of integers representing the sequence and returns a boolean value indicating whether the sequence can be divided into two non-empty sub-sequences with equal sums. # Example: Input: `[1, 2, 3, 4, 5, 5]` Output: `True` Explanation: The sequence can be split into `[1, 4, 5]` and `[2, 3, 5]`, both having the equal sum of 10. Input: `[1, 1, 1]` Output: `False` Explanation: No such division with equal sum sub-sequences is possible. # Constraints: - The sequence will have at least one element and at most 10,000 elements. - Each element in the sequence will be a positive integer not exceeding 10,000. Your task is to implement the `can_be_split_into_equal_sum_subsequences` function that can handle the given input constraints effectively.","solution":"def can_be_split_into_equal_sum_subsequences(sequence): Determines if the sequence can be split into two sub-sequences with equal sum. :param sequence: List of integers representing the sequence. :return: Boolean value indicating if the sequence can be split as required. total_sum = sum(sequence) # If the total sum is odd, it cannot be split into two equal parts if total_sum % 2 != 0: return False target_sum = total_sum // 2 n = len(sequence) # Initialize a DP table where dp[i] will be True if a subset sum of \'i\' can be formed with the elements dp = [False] * (target_sum + 1) dp[0] = True # Update the DP table for each number in the sequence for num in sequence: for i in range(target_sum, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target_sum]"},{"question":"# Odd Digit Sum Calculation Input A positive integer: ``` 1 <= n <= 1000000000 ``` Output The sum of the odd digits in the input number. If there are no odd digits in the number, return 0. Description Write a function that takes a positive integer and calculates the sum of all its odd digits. The function should iterate through each digit in the input number, check if it is odd, and if so, add it to a running total. If the number contains no odd digits, the function should return 0. Example For an input `n = 123456789`: ``` Odd digits are: 1, 3, 5, 7, 9 Sum of odd digits = 1 + 3 + 5 + 7 + 9 = 25 ``` The output would be: `25`. For an input `n = 24680`: ``` There are no odd digits. ``` The output would be: `0`.","solution":"def sum_of_odd_digits(n): Returns the sum of the odd digits in the input number. Parameters: n (int): A positive integer. Returns: int: The sum of the odd digits in the number. total = 0 while n > 0: digit = n % 10 if digit % 2 != 0: total += digit n //= 10 return total"},{"question":"A librarian is organizing books in a particular pattern on a shelf. Each shelf has `N` books, and each book is identified by a unique number from 1 to `N`. The librarian wants to arrange the books such that the number sequence increases from both ends towards the center. Help the librarian to generate this pattern for each provided number of books. -----Input:----- - First-line will contain `M`, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer `N`. -----Output:----- For each test case, output the book arrangement pattern. -----Constraints----- - 1 ≤ M ≤ 100 - 1 ≤ N ≤ 100 -----Sample Input:----- 3 3 4 5 -----Sample Output:----- 1 2 1 1 2 2 1 1 2 3 2 1 -----EXPLANATION:----- No need, the pattern can be decoded easily.","solution":"def arrange_books(N): Returns the arrangement of books in the required pattern for N books. books = [] for i in range(1, (N // 2) + 1): books.append(i) if N % 2 != 0: books.append((N // 2) + 1) books.extend(range((N // 2), 0, -1)) return books def process_test_cases(M, test_cases): Process and return the results for each test case. results = [] for N in test_cases: results.append(arrange_books(N)) return results"},{"question":"Create a function that takes a list of integers and returns True if the list can be partitioned into two subsets such that the sum of elements in both subsets is equal, and False otherwise. # Input: - The input is a single list of integers, `nums`. # Output: - The function should return a boolean value: `True` if the list can be partitioned into two subsets with equal sums, and `False` otherwise. # Examples: Example 1: Input: `[1, 5, 11, 5]` Output: `True` Explanation: The array can be partitioned as `[1, 5, 5]` and `[11]`. Example 2: Input: `[1, 2, 3, 5]` Output: `False` Explanation: The array cannot be partitioned into two subsets with equal sums. # Constraints: - Each number in the list is a positive integer. - The length of the list will be in the range `[1, 200]`. - The value of each element will be in the range `[1, 100]`. # Function Signature: ```python def can_partition(nums: List[int]) -> bool: # Your code here ``` # Notes: - This problem can be approached using a dynamic programming algorithm, where the main objective is to find if there exists a subset with the given sum. - An appropriate DP table can help in storing the results of subproblems to solve the main problem efficiently.","solution":"def can_partition(nums): Determines if the given list can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If the total sum is odd, it cannot be partitioned into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"We need a function `group_anagrams()` that receives a list of strings and groups the anagrams together. Anagrams are words that have the same characters in different orders. The function should return a list of lists, where each sublist contains words that are anagrams of each other. The output sublists and the words within them should be sorted in lexicographical order. Let\'s see some cases: ```python ____ group_anagrams([\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]) ----> [[\'ate\', \'eat\', \'tea\'], [\'bat\'], [\'nat\', \'tan\']] (1) - The words \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams of each other and have been grouped together and sorted. (2) - The word \\"bat\\" does not have any anagrams within the input list, so it remains as a single element in a list. (3) - The words \\"tan\\" and \\"nat\\" are anagrams of each other and have been grouped together and sorted. ____ group_anagrams([\\"cat\\", \\"dog\\", \\"god\\", \\"tac\\", \\"act\\", \\"rat\\"]) ----> [[\'act\', \'cat\', \'tac\'], [\'dog\', \'god\'], [\'rat\']] ``` Enjoy it and happy coding!!","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams together from the input list of words. Parameters: words (list of str): The list of words to group. Returns: list of list of str: The grouped anagrams, each sublist sorted lexicographically. anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) # Prepare the final output by sorting each group and then the list of groups. result = [sorted(group) for group in anagrams.values()] result.sort() return result"},{"question":"You are given an array of `n` non-negative integers. You want to perform a series of operations to make all elements of the array equal. In one move, you can select any non-empty subarray of the array and increment each element of the subarray by 1. Write a function to determine the minimum number of moves required to make all elements of the array equal. # Input - A single integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. - A single line of `n` non-negative integers `a1, a2, ..., an` (0 ≤ ai ≤ 10^9) — the elements of the array. # Output - A single integer — the minimum number of moves required to make all elements of the array equal. # Examples Input 4 1 2 3 4 Output 6 Input 3 0 0 3 Output 3 # Note In the first example: - In the first move, increment subarray [1, 2, 3, 4] by 1: [2, 3, 4, 5] - In the second move, increment subarray [2, 3, 4, 5] by 1: [3, 4, 5, 6] - In the third move, increment subarray [3, 4, 5, 6] by 1: [4, 5, 6, 7] - In the fourth move, increment subarray [4, 5, 6, 7] by 1: [5, 6, 7, 8] - In the fifth move, increment subarray [5, 6, 7, 8] by 1: [6, 7, 8, 9] - In the sixth move, increment subarray [6, 7, 8, 9] by 1: [7, 8, 9, 10] In the second example: - In the first move, increment subarray [0, 0, 3] by 1: [1, 1, 4] - In the second move, increment subarray [1, 1, 4] by 1: [2, 2, 5] - In the third move, increment subarray [2, 2, 5] by 1: [3, 3, 6]","solution":"def min_moves_to_make_elements_equal(n, array): Returns the minimum number of moves required to make all elements of the array equal. min_element = min(array) total_moves = sum(array) - (n * min_element) return total_moves"},{"question":"Johny loves playing with sticks. Today, he has M sticks, with stick i having length L_i. He wants to pick exactly four sticks such that he can form a rectangle with them. It is not necessary that all lengths in the resulting figure should be distinct; however, the opposite sides of the rectangle must be equal. Can you help Johny determine if he can form a rectangle with these sticks? If a rectangle can be formed, print \\"YES\\". Otherwise, print \\"NO\\". -----Input----- - The first line contains a single integer Q, the number of test cases. - Each of the next Q lines contains a single integer M followed by M space-separated integers L_i denoting the lengths of the sticks Johny has. -----Output----- For each query, print a single line containing \\"YES\\" if Johny can form a rectangle, and \\"NO\\" otherwise. -----Constraints----- - 1 le Q le 100 - 4 le M le 100 - 1 le L_i le 1000 -----Example Input----- 3 6 4 2 4 2 5 2 5 5 5 5 5 6 3 4 5 6 7 8 -----Example Output----- YES YES NO -----Explanation----- - In the first test case, Johny can select sticks with lengths [4, 4, 2, 2] to form a rectangle. - In the second test case, Johny can select four sticks of length 5 to form a rectangle. - In the third test case, it is impossible to form any rectangle with the given sticks.","solution":"def can_form_rectangle(Q, queries): results = [] for query in queries: M, lengths = query[0], query[1:] length_count = {} # Count the occurrences of each length for length in lengths: if length in length_count: length_count[length] += 1 else: length_count[length] = 1 pairs = 0 # Count pairs of sticks for count in length_count.values(): pairs += count // 2 if pairs >= 2: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a robot that can only move in a 2D grid with the following three commands: - \'U\' (up): Moves the robot one step upwards. - \'R\' (right): Moves the robot one step to the right. - \'D\' (down): Moves the robot one step downwards. The robot\'s initial position is at the origin (0, 0). Given a command string, determine the final coordinates of the robot after executing all the commands in the string. **Example:** Input: `commands = \\"UURRDD\\"` Output: `(1, 1)` Explanation: The robot moves upwards twice, right twice, and downwards twice. The final position is one step to the right and one step upwards from the origin.","solution":"def final_position(commands): Returns the final coordinates of the robot after executing the command string. :param commands: str, a string representing the commands (\'U\', \'R\', \'D\') :return: tuple, the final coordinates (x, y) x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'R\': x += 1 elif command == \'D\': y -= 1 return (x, y)"},{"question":"In a magical forest, there are several kinds of magical fruits. Each fruit type can be collected multiple times and each fruit has a certain magic power value associated with it. The magical properties of the fruits allow you to perform a special operation when you collect two of the same type of fruit, which is to merge them together into a single fruit. The magic power of the new merged fruit is the sum of the original two fruits\' power values. You are given multiple arrays where each array represents a batch of fruits you collected. Each element in the array is a positive integer representing the magic power value of each fruit of the same type. Your task is to determine the total magic power value of all merged fruits for each batch. -----Input----- - The first line contains a single integer, B, which is the number of fruit batches. - The description of each batch follows. - The first line of each batch contains a single integer, Ni, which is the number of fruits in the batch. - The next line contains Ni integers, representing the magic power values of each fruit in the batch. -----Output----- - For each batch, in a new line, output the total magic power value of all merged fruits. -----Constraints----- - 1 ≤ B ≤ 100 - 1 ≤ Ni ≤ 1000 - 1 ≤ Fruit Power Value ≤ 1000 -----Example----- Input: 3 5 3 3 3 3 3 4 5 10 5 10 6 1 1 1 1 1 1 Output: 15 30 6 -----Explanation----- In the first batch, after merging all the fruits: - Merge the first two 3\'s, resulting in 6. - Merge next two 3\'s, resulting in 6. - Total power value = 6 (from merging first two 3\'s) + 6 (from merging next two 3\'s) + remaining 3 = 15. In the second batch: - Merge the two 5\'s, resulting in 10. - Merge the two 10\'s, resulting in 20. - Total power value = 10 (from merging two 5\'s) + 20 (from merging two 10\'s) = 30. In the third batch: - Merge every two 1\'s which results in 3 merges of power value 2. - Total power value = 6.","solution":"def total_magic_power_value(batches): This function takes a list of batches where each batch is a list of integer values representing the magic power of fruits. It returns a list of total magic power values after merging the fruits in each batch. results = [] for batch in batches: from collections import Counter fruit_counter = Counter(batch) total_power = 0 for fruit_power, count in fruit_counter.items(): # Perform merging total_power += (fruit_power * (count // 2)) * 2 + (fruit_power * (count % 2)) results.append(total_power) return results def read_input(input_data): input_lines = input_data.strip().split(\'n\') B = int(input_lines[0]) batches = [] i = 1 while i < len(input_lines): Ni = int(input_lines[i]) fruits = list(map(int, input_lines[i+1].strip().split())) batches.append(fruits) i += 2 return B, batches def merge_fruit_batches(input_data): B, batches = read_input(input_data) result = total_magic_power_value(batches) return result"},{"question":"Implement the function `compress_string(s)` that takes a string `s` as input and returns a compressed version of the string using the counts of repeated characters. If the compressed version is not shorter than the original string, the function should return the original string. The function should be case-sensitive. For example: - If `s` is \\"aabcccccaaa\\", the function should return \\"a2b1c5a3\\". - If `s` is \\"abcdef\\", the function should return \\"abcdef\\" since the compressed version \\"a1b1c1d1e1f1\\" is not shorter.","solution":"def compress_string(s): Compress the string by converting consecutive repeated characters into character and count. If the compressed string is not smaller, return the original string. if not s: return s compressed = [] count = 1 previous_char = s[0] for char in s[1:]: if char == previous_char: count += 1 else: compressed.append(f\\"{previous_char}{count}\\") previous_char = char count = 1 compressed.append(f\\"{previous_char}{count}\\") compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Given an array of length ( N ) containing elements ( A_i ) ( ( i = 1 ) to ( N ) ). You need to handle ( Q ) queries on this array. Each query is of three types: Type 1: ( k , l , r ) - Return the sum of elements in the range from index ( l ) to ( r ) (1-based inclusive). Type 2: ( k , x , val ) - Increment every element in the array between index 1 and ( x ) (1-based inclusive) by ( val ). Type 3: ( k , i , new _ val ) - Set the value of element at index ( i ) (1-based) to ( new _ val ). Note: 1-based indexing is used in each query. -----Input:----- - The first line will contain ( N ), denoting the size of the array. - Then follows ( N ) integers representing ( A_1 ) to ( A_N ). - The third line will contain ( Q ), denoting the number of queries. - The next ( Q ) lines will contain the descriptions of each query, which can be of any of the three types described above. -----Output:----- For each query of Type 1, output the sum of elements in the specified range. -----Constraints----- - (1 leq N leq 100000) - (1 leq Q leq 100000) - (-10^9 leq A_i leq 10^9) - (1 leq i, l, r leq N) - (-10^9 leq val, new _ val leq 10^9) -----Subtasks----- Subtask 1: (40) points - (1 leq N, Q leq 10000) Subtask 2: (60) points - Original Constraints -----Sample Input:----- 5 1 2 3 4 5 4 1 1 3 2 3 5 1 2 5 3 4 10 -----Sample Output:----- 6 25","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, value): while index <= self.size: self.tree[index] += value index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def range_query(self, left, right): return self.query(right) - self.query(left - 1) def process_queries(array, queries): n = len(array) fenwick_tree = FenwickTree(n) # Build the initial Fenwick tree with the given array for i in range(n): fenwick_tree.update(i + 1, array[i]) results = [] for query in queries: type_query = query[0] if type_query == 1: # Sum from l to r l, r = query[1], query[2] results.append(fenwick_tree.range_query(l, r)) elif type_query == 2: # Increment from 1 to x by value x, val = query[1], query[2] for i in range(1, x + 1): fenwick_tree.update(i, val) elif type_query == 3: # Set array index to new_val i, new_val = query[1], query[2] # Update the difference to the Fenwick tree current_val = fenwick_tree.range_query(i, i) diff = new_val - current_val fenwick_tree.update(i, diff) return results"},{"question":"You are given an n x n binary matrix grid. A binary matrix has only 0s and 1s as its elements. A path in the matrix is a sequence of cells (starting from (0,0) to (n-1,n-1)) in which we can move in any of the eight possible directions (top-left, top, top-right, left, right, bottom-left, bottom, bottom-right) from a cell to a neighboring cell, but only through cells containing 0. Write a function to find out if there exists a path to move from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1). Return true if such a path exists and false otherwise. Example 1: Input: grid = [[0,1,0,0,0], [0,1,1,1,0], [0,0,0,1,0], [0,1,0,0,0], [0,0,0,1,0]] Output: true Explanation: There is a path to move from (0, 0) to (n-1, n-1) as follows: (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (3, 0) -> (4, 0) -> (4, 1) -> (3, 2) -> (4, 3). Example 2: Input: grid = [[1,1,1], [1,0,1], [1,1,1]] Output: false Constraints: - n == grid.length - n == grid[i].length - 1 <= n <= 100 - grid[i][j] is 0 or 1","solution":"from collections import deque def is_path_exists(grid): Checks whether there is a path from the top-left corner to the bottom-right corner in a binary matrix. Args: grid : List[List[int]] A binary matrix (n x n) where each element is 0 or 1. Returns: bool True if such a path exists, False otherwise. n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return False directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] queue = deque([(0, 0)]) visited = [[False] * n for _ in range(n)] visited[0][0] = True while queue: x, y = queue.popleft() if x == n-1 and y == n-1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny)) return False"},{"question":"Given two integer arrays `nums` and `target`, return all the unique quadruplets `[nums[a], nums[b], nums[c], nums[d]]` such that: ``` 0 <= a, b, c, d < nums.length a, b, c, and d are distinct. nums[a] + nums[b] + nums[c] + nums[d] == target ``` You may return the answer in any order. The solution set must not contain duplicate quadruplets. Example: ``` Input: nums = [1, 0, -1, 0, -2, 2], target = 0 Output: [[-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2]] Input: nums = [2, 2, 2, 2, 2], target = 8 Output: [[2, 2, 2, 2]] ``` Notes: - `nums` can contain both positive and negative integers. - `nums` can be empty. - Ensure the returned quadruplets are unique and in any order. - The length of `nums` will not exceed 200. - The elements of `nums` can be any 32-bit integer.","solution":"def four_sum(nums, target): Returns unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that they sum up to the target. nums.sort() quadruplets = set() n = len(nums) for i in range(n): for j in range(i + 1, n): left = j + 1 right = n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: quadruplets.add((nums[i], nums[j], nums[left], nums[right])) left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return [list(quad) for quad in quadruplets]"},{"question":"You need to write a function that identifies and collects all the variable assignments from a given piece of Python source code. The function should return a list of tuples, each containing the variable name and its assigned value, in the order they appear in the code. Each assignment should be captured from single-line assignments and within multi-line function bodies, excluding those in comments or strings. Input: A string representing a Python source code fragment. Output: A list of tuples, each containing a variable name and its assigned value as strings, in the order they appear in the code. The assigned value should be captured as it appears in the code, without evaluating any expressions. Sample: ``` extract_assignments(\\"x = 10ny = x + 2nz = \'hello\'\\") -> [(\'x\', \'10\'), (\'y\', \'x + 2\'), (\'z\', \\"\'hello\'\\")] extract_assignments(\\"a = [1, 2, 3]nb = {\'key\': \'value\'}nc = \'single quote inside \'\'string\'\' \'\\") -> [(\'a\', \'[1, 2, 3]\'), (\'b\', \\"{\'key\': \'value\'}\\"), (\'c\', \\"\'single quote inside \'\'string\'\' \'\\")] ``` Note: 1) The function should correctly handle various data types including numbers, strings, lists, dictionaries, and expressions. 2) Multi-line assignments should be captured along with their entirety. For example: ``` long_variable = 12345 + 67890 ``` should return `(\'long_variable\', \'12345 + 67890\')`. 3) Skip assignments inside comments or strings. For example: ``` x = 10 # this is a comment with y = 5 s = \\"This is a string with z = \'inside\'\\" ``` should return `[(\'x\', \'10\'), (\'s\', \'\\"This is a string with z = \'inside\'\\"\')]`. 4) The function should handle indentation and nested code blocks correctly such as within function definitions or loops. For example: ``` def foo(): a = 1 b = \'within function\' for i in range(5): x = i ``` should return `[(\'a\', \'1\'), (\'b\', \\"\'within function\'\\"), (\'x\', \'i\')]`.","solution":"import re def extract_assignments(source_code): Extract all variable assignments from a given piece of Python source code. Args: source_code (str): A string containing Python source code. Returns: list of tuple: A list of tuples containing variable names and their assigned values as strings. # Regular expression to capture valid variable assignments assignment_regex = re.compile(r\'^s*([a-zA-Z_]w*)s*=s*(.*?)s*(#.*)?\', re.MULTILINE) assignments = [] # Split the source code into lines and accumulate lines for multi-line assignments lines = source_code.splitlines() multi_line_context = \\"\\" for line in lines: stripped_line = line.strip() # Continue building multi-line strings if stripped_line.endswith(\\"\\"): multi_line_context += stripped_line[:-1] continue else: multi_line_context += stripped_line match = assignment_regex.match(multi_line_context) if match: # Match contains three groups: variable name, value, and optional comment variable_name = match.group(1) assigned_value = match.group(2) assignments.append((variable_name, assigned_value)) # Reset the multi-line context after processing each full line multi_line_context = \\"\\" return assignments"},{"question":"Alice and Bob are playing a game with integers. They take turns picking numbers from an array. On each player\'s turn, they must pick either the first or the last number remaining in the array. Alice tries to maximize the sum of her picked numbers, while Bob tries to minimize the sum of Alice\'s picked numbers. Determine the maximum possible sum that Alice can achieve if both players play optimally. Assume Alice always goes first. -----Input:----- - The first line contains an integer N, the number of integers in the array. - The second line contains N space-separated integers A_i (1 leq A_i leq 10^4). -----Output:----- Print a single integer, the maximum sum that Alice can achieve. -----Constraints----- - 1 leq N leq 1000 -----Sample Input:----- 4 1 2 9 4 -----Sample Output:----- 10 -----Explanation:----- If Alice picks 1, Bob will then pick 4 to minimize Alice\'s sum. Next, Alice picks 9, and Bob picks 2. Alice\'s sum is 1 + 9 = 10. If Alice picks 4, Bob will then pick 9 to maximize Alice\'s sum. Next, Alice picks 2, and Bob picks 1. Alice\'s sum is 4 + 2 = 6. Thus, the optimal strategy is for Alice to pick 1 first.","solution":"def maximize_alice_sum(N, A): Determine the maximum possible sum that Alice can achieve if both players play optimally. :param N: int - the number of integers in the array :param A: list of int - the array of integers :return: int - the maximum sum that Alice can achieve dp = [[0] * N for _ in range(N)] for i in range(N): dp[i][i] = A[i] for length in range(2, N + 1): for i in range(N - length + 1): j = i + length - 1 pick_left = A[i] + (sum(A[i+1:j+1]) - dp[i+1][j]) pick_right = A[j] + (sum(A[i:j]) - dp[i][j-1]) dp[i][j] = max(pick_left, pick_right) return dp[0][N-1]"},{"question":"Alex is an avid birdwatcher and loves to note down the unique species of birds he sees during his trips. He writes down the IDs of the species of birds he spots, but sometimes he records the same species more than once. Alex wants to know the count of unique bird species he has seen. Can you help him figure out this number? -----Input:----- - The first line contains N, the number of bird sightings Alex has noted down. - The second line contains N space-separated integers representing the IDs of the species of birds Alex has spotted. -----Output:----- Print the count of unique bird species Alex has seen. -----Constraints:----- - 1 ≤ N ≤ 10^6 - 1 ≤ ID of bird species ≤ 10^9 -----Sample Input:----- 7 1 2 3 4 2 3 5 -----Sample Output:----- 5","solution":"def unique_bird_species_count(n, bird_ids): Returns the count of unique bird species based on the list of bird IDs. Parameters: n (int): The number of bird sightings noted down. bird_ids (list): A list of integers representing the IDs of the species of birds spotted. Returns: int: The count of unique bird species. return len(set(bird_ids))"},{"question":"=====Function Descriptions===== zip() This function takes iterables (can be zero or more), aggregates them in a tuple, and returns it. If no arguments are passed, the result is an empty iterator. If the iterables are of uneven length, the iterable with the least items decides the length of the resulting tuples. Code >>> list(zip([1, 2, 3], [4, 5, 6])) [(1, 4), (2, 5), (3, 6)] >>> list(zip([1, 2], [3, 4], [5, 6])) [(1, 3, 5), (2, 4, 6)] enumerate() This function takes an iterable and returns tuples containing a count (from the start which defaults to 0) and the values obtained from iterating over the given sequence. Code >>> list(enumerate([\'a\', \'b\', \'c\'])) [(0, \'a\'), (1, \'b\'), (2, \'c\')] >>> list(enumerate([\'a\', \'b\', \'c\'], 1)) [(1, \'a\'), (2, \'b\'), (3, \'c\')] =====Problem Statement===== You are given two space-separated lists of integers. The first list represents the marks obtained by students in subject A, and the second list represents the marks obtained by the same students in subject B. You need to find the average marks for each student and determine if all students\' average marks are greater than a specified threshold value. =====Input Format===== The first line contains an integer N, the number of students. The second line contains the space-separated integers representing the marks of the students in subject A. The third line contains the space-separated integers representing the marks of the students in subject B. The fourth line contains a single integer T, the threshold value. =====Constraints===== 0 < N ≤ 100 0 ≤ marks ≤ 100 0 ≤ T ≤ 100 =====Output Format===== Print True if all students\' average marks are greater than the threshold value T. Otherwise, print False.","solution":"def are_averages_above_threshold(n, marks_subject_a, marks_subject_b, threshold): Check if all students\' average marks are greater than the threshold value. Args: n : int : Number of students marks_subject_a : list : Marks obtained in subject A marks_subject_b : list : Marks obtained in subject B threshold : int : Threshold value Returns: bool : True if all students\' average marks are greater than the threshold value, otherwise False. if n != len(marks_subject_a) or n != len(marks_subject_b): raise ValueError(\\"Number of students must match the length of the marks lists\\") for a, b in zip(marks_subject_a, marks_subject_b): average = (a + b) / 2 if average <= threshold: return False return True"},{"question":"You are given an array of integers nums of size n and an integer k. Your task is to find the number of continuous subarrays of nums whose sum is exactly k. -----Input----- - The first line of the input contains two integers n and k. - The second line contains n space-separated integers nums[0], nums[1], ldots, nums[n-1]. -----Output----- Print a single integer denoting the number of continuous subarrays whose sum is exactly k. -----Constraints----- - 1 le n le 10^5 - -10^4 le nums[i] le 10^4 - -10^9 le k le 10^9 -----Example Input----- 5 5 1 2 3 -2 2 -----Example Output----- 2 -----Explanation----- Example case: The continuous subarrays whose sum equals 5 are: - nums[0] + nums[1] + nums[2] = 1 + 2 + 3 = 6 (not equal to 5) - nums[1] + nums[2] + nums[3] = 2 + 3 + (-2) = 3 (not equal to 5) - nums[0] + nums[1] + nums[2] + nums[3] = 1 + 2 + 3 + (-2) = 4 (not equal to 5) - nums[2] + nums[3] + nums[4] = 3 + (-2) + 2 = 3 (not equal to 5) - nums[1] + nums[2] = 2 + 3 = 5 - nums[4] = 2 (not equal to 5) The subarrays [2, 3] and [2, 3, -2, 2] both sum to 5, two in total.","solution":"def count_subarrays_with_sum(nums, k): Count the number of continuous subarrays whose sum is exactly k. Args: nums (List[int]): List of integers. k (int): Target sum. Returns: int: Number of continuous subarrays with sum equal to k. count = 0 current_sum = 0 sum_dict = {0: 1} # Dictionary to store the prefix sums and their frequencies for num in nums: current_sum += num if (current_sum - k) in sum_dict: count += sum_dict[current_sum - k] if current_sum in sum_dict: sum_dict[current_sum] += 1 else: sum_dict[current_sum] = 1 return count"},{"question":"Two rival sociologists are trying to categorize events based on observed data. They observe sequences of events over time and want to identify a common sub-sequence pattern in their observations to better understand societal trends. Write a function called: ```python def common_pattern(seq1, seq2): ``` The parameters ```seq1``` and ```seq2``` are lists of strings representing sequences of events observed by the two sociologists. The function should return a list containing the longest common sub-sequence of events from ```seq1``` that also appear in ```seq2``` in the same order. If there are multiple such sub-sequences of the same length, return the one that appears first in ```seq1```. If there is no common sub-sequence, return an empty list. Example: ```python common_pattern([\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\"], [\\"C\\", \\"A\\", \\"B\\", \\"D\\", \\"F\\"]) # should return [\\"A\\", \\"B\\", \\"D\\"] common_pattern([\\"event1\\", \\"event2\\", \\"event3\\"], [\\"event4\\", \\"event5\\"]) # should return [] ```","solution":"def common_pattern(seq1, seq2): Finds the longest common sub-sequence (in the same order) between seq1 and seq2. If there are multiple such sub-sequences of the same length, the one that appears first in seq1 is returned. def lcs_length_matrix(X, Y): m = len(X) n = len(Y) L = [[0] * (n+1) for _ in range(m+1)] for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: L[i][j] = 0 elif X[i-1] == Y[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) return L def trace_back_lcs(L, X, Y): m = len(X) n = len(Y) i = m j = n lcs = [] while i > 0 and j > 0: if X[i-1] == Y[j-1]: lcs.insert(0, X[i-1]) i -= 1 j -= 1 elif L[i-1][j] > L[i][j-1]: i -= 1 else: j -= 1 return lcs L = lcs_length_matrix(seq1, seq2) return trace_back_lcs(L, seq1, seq2)"},{"question":"Write a function that takes a string consisting of lowercase letters and returns an array of three integers, where the first integer is the count of vowels in the string, the second integer is the count of consonants, and the third integer is the count of unique letters in the string. **Note:** Consider \'a\', \'e\', \'i\', \'o\', and \'u\' as vowels. ```python analyze_string(\\"hello\\") == [2, 3, 4] analyze_string(\\"aabbcc\\") == [2, 4, 3] ```","solution":"def analyze_string(s): Analyzes the given string to count the number of vowels, consonants, and unique letters. Parameters: s (str): input string consisting of lowercase letters Returns: list: [number of vowels, number of consonants, number of unique letters] vowels = set(\'aeiou\') vowel_count = 0 consonant_count = 0 unique_letters = set(s) for char in s: if char in vowels: vowel_count += 1 else: consonant_count += 1 return [vowel_count, consonant_count, len(unique_letters)]"},{"question":"Given an array of integers `arr`, your task is to find the number of contiguous subarrays that have an equal number of even and odd numbers. Example 1: Input: arr = [1, 2, 3, 4] Output: 4 Explanation: The subarrays are [1, 2], [2, 3], [1, 2, 3, 4], and [3, 4]. Each of these subarrays has 2 even and 2 odd numbers. Example 2: Input: arr = [1, 1, 1, 1] Output: 0 Explanation: There are no subarrays with an equal number of even and odd numbers. Example 3: Input: arr = [2, 2, 2, 2] Output: 0 Explanation: There are no subarrays with an equal number of even and odd numbers. Note: 1. 1 <= arr.length <= 10^5 2. 0 <= arr[i] <= 10^4","solution":"def count_equal_even_odd_subarrays(arr): Returns the number of contiguous subarrays that have an equal number of even and odd numbers. count_map = {0: 1} count = 0 current_balance = 0 for num in arr: if num % 2 == 0: current_balance += 1 else: current_balance -= 1 if current_balance in count_map: count += count_map[current_balance] count_map[current_balance] += 1 else: count_map[current_balance] = 1 return count"},{"question":"You are given an array of integers. Write a function that returns the sum of the differences between consecutive integers in the array, provided the integers are sorted in descending order. If the array is empty or contains a single element, return 0. For example: - For the array [2, 1, 10], the function should return 9 because the differences are (10 - 1) + (1 - 2). - For the array [5], the function should return 0 because there\'s only one element. - For the array [], the function should return 0 because the array is empty.","solution":"def sum_of_differences(arr): Returns the sum of the differences between consecutive integers in the array, provided the integers are sorted in descending order. if len(arr) < 2: return 0 arr.sort(reverse=True) return sum(arr[i] - arr[i+1] for i in range(len(arr) - 1))"},{"question":"Shreya is working on a project involving arrays. She needs to process a large number of queries on an array of integers. Specifically, she needs to find the sum of a subarray for each query, but the subarray can be modified with some special operations before calculating the sum. The project involves an array A of N integers. Each query is of the form Q(x, y, w), where: - x and y denote the starting and ending indices of the subarray (1-based indexing). - Before calculating the sum of the subarray A[x..y], increase every element in this range by w (a given integer). Help Shreya by writing a program that processes the queries efficiently. -----Input----- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. - The following M lines describe queries. Each of these lines contains three space-separated integers x, y, and w. -----Output----- For each query, print a single line containing a single integer ― the sum of the modified subarray. -----Constraints----- - 1 le T le 50 - 1 le N le 10^5 - 1 le M le 10^5 - 1 le A_i le 10^9 for each valid i - 1 le x le y le N - -10^9 le w le 10^9 - the sum of N in all test cases does not exceed 10^6 - the sum of M in all test cases does not exceed 10^6 -----Example Input----- 1 5 3 1 2 3 4 5 1 3 2 2 4 -1 3 5 3 -----Example Output----- 12 6 21 -----Explanation----- In the first query, the subarray from index 1 to 3 is [1, 2, 3]. After increasing each element by 2, the subarray becomes [3, 4, 5], and its sum is 3 + 4 + 5 = 12. In the second query, the subarray from index 2 to 4 is [2, 3, 4]. After decreasing each element by 1, the subarray becomes [1, 2, 3], and its sum is 1 + 2 + 3 = 6. In the third query, the subarray from index 3 to 5 is [3, 4, 5]. After increasing each element by 3, the subarray becomes [6, 7, 8], and its sum is 6 + 7 + 8 = 21.","solution":"def process_queries(T, cases): results = [] for case in cases: N, M, A, queries = case # Precomputed prefix sum array prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + A[i - 1] for query in queries: x, y, w = query # Calculate the sum of the subarray A[x..y] sum_subarray = prefix_sum[y] - prefix_sum[x - 1] # Add w * length of subarray sum_subarray += w * (y - x + 1) results.append(sum_subarray) return results"},{"question":"You are tasked to help a team of archaeologists who have found a sequence of ancient artifacts. The artifacts are arranged in a line and each artifact has a unique identifier, represented by an integer. The archaeologists are interested in finding out if there is a beautiful segment in the sequence. A beautiful segment is defined as a contiguous subsequence where all the identifiers are unique. -----Input----- The first line contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. The description of the test cases follows. Each test case consists of two lines: - The first line contains a single integer N (1 ≤ N ≤ 105) — the number of artifacts. - The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 109) — the identifiers of the artifacts. -----Output----- For each test case, print \\"Beautiful\\" if there is at least one beautiful segment, and \\"Not Beautiful\\" if there are no such segments. -----Sample Input----- 3 5 1 2 3 4 5 5 1 2 2 3 4 4 1 1 1 1 -----Sample Output----- Beautiful Beautiful Not Beautiful","solution":"def is_beautiful_segment(artifact_ids): seen = set() for artifact_id in artifact_ids: if artifact_id in seen: return \\"Not Beautiful\\" seen.add(artifact_id) return \\"Beautiful\\" def evaluate_cases(test_cases): results = [] for i in range(0, len(test_cases), 2): # Skip over the number of artifacts as we do not need it for the logic artifact_ids = test_cases[i + 1] results.append(is_beautiful_segment(artifact_ids)) return results def process_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, len(lines)): if i % 2 == 0: test_cases.append(list(map(int, lines[i].split()))) else: test_cases.append(int(lines[i])) return evaluate_cases(test_cases) # Example usage: # input_str = \'3n5n1 2 3 4 5n5n1 2 2 3 4n4n1 1 1 1\' # print(process_input(input_str))"},{"question":"Write a function that takes a list of strings representing file paths and returns a dictionary where the keys are the directory paths and the values are lists of files found in those directories. The file paths will always be complete paths and you may assume that directory paths in the input list end with a \'/\' character. Example: ```python file_paths = [ \\"/home/user/documents/file1.txt\\", \\"/home/user/documents/file2.txt\\", \\"/home/user/music/song1.mp3\\", \\"/home/user/music/song2.mp3\\", \\"/home/user/music/song3.mp3\\", \\"/var/log/system.log\\" ] directory_files(file_paths) # should return: # { # \\"/home/user/documents/\\": [\\"file1.txt\\", \\"file2.txt\\"], # \\"/home/user/music/\\": [\\"song1.mp3\\", \\"song2.mp3\\", \\"song3.mp3\\"], # \\"/var/log/\\": [\\"system.log\\"] # } ```","solution":"def directory_files(file_paths): Returns a dictionary where the keys are directory paths and the values are lists of files found in those directories. :param file_paths: List of complete file paths :return: Dictionary with directory paths as keys and file names as values from collections import defaultdict import os directory_dict = defaultdict(list) for path in file_paths: directory, file = os.path.split(path) directory_dict[directory + \'/\'].append(file) # Ensuring directory ends with \'/\' character return dict(directory_dict) # Convert back to regular dict from defaultdict"},{"question":"Implement a function that takes a string representing a mathematical expression and evaluates it. The expression will contain non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\'. The operators have the standard precedence: * Multiplication (\'*\') and division (\'/\') before addition (\'+\') and subtraction (\'-\'). * Operators with the same precedence are evaluated from left to right. You may assume that the expression is valid, and there will be no division by zero. **Example:** ``` \\"3+5/2\\" --> 5 \\"2+3*4-5\\" --> 9 \\"10+2*6\\" --> 22 \\"100 * 2 + 12\\"--> 212 \\"100 * ( 2 + 12 )\\" --> 1400 \\"100 * ( 2 + 12 ) / 14\\" --> 100 ```","solution":"def evaluate_expression(expr): Evaluates a string mathematical expression. def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a // b # Use integer division as per example outputs def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue elif tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[-1] return evaluate(list(expr))"},{"question":"An online store has a multi-tier loyalty program that rewards customers based on their spending. Depending on the total amount spent, a customer falls into one of three tiers: Bronze, Silver, or Gold. Each tier provides a different percentage of cashback on their total spending. Create a function to calculate the cashback amount for a given customer\'s spending. The function will receive: * The customer\'s total spending amount. * A dictionary with the tier thresholds and the corresponding cashback percentages. The tiers are defined as follows: * Bronze: Spending less than the Silver tier threshold. * Silver: Spending at least the Silver tier threshold but less than the Gold tier threshold. * Gold: Spending at least the Gold tier threshold. The cashback percentages are specified in the dictionary. For example: ```python { \\"Silver\\": 1000, # Spending threshold to qualify for Silver \\"Gold\\": 5000, # Spending threshold to qualify for Gold \\"BronzeCashback\\": 1, # Percent cashback for Bronze tier \\"SilverCashback\\": 2, # Percent cashback for Silver tier \\"GoldCashback\\": 5 # Percent cashback for Gold tier } ``` **Note**: The amounts and percentages in the dictionary can vary, so your function needs to correctly interpret these values to determine the cashback. **Examples:** #1: ```python calculate_cashback(800, { \\"Silver\\": 1000, \\"Gold\\": 5000, \\"BronzeCashback\\": 1, \\"SilverCashback\\": 2, \\"GoldCashback\\": 5 }) --> 8.0 ``` since 800 qualifies for the Bronze tier with 1% cashback: `800 * 0.01 = 8.0` #2: ```python calculate_cashback(1200, { \\"Silver\\": 1000, \\"Gold\\": 5000, \\"BronzeCashback\\": 1, \\"SilverCashback\\": 2, \\"GoldCashback\\": 5 }) --> 24.0 ``` since 1200 qualifies for the Silver tier with 2% cashback: `1200 * 0.02 = 24.0` #3: ```python calculate_cashback(6000, { \\"Silver\\": 2000, \\"Gold\\": 4000, \\"BronzeCashback\\": 0.5, \\"SilverCashback\\": 1.5, \\"GoldCashback\\": 4 }) --> 240.0 ``` since 6000 qualifies for the Gold tier with 4% cashback: `6000 * 0.04 = 240.0` Define the function `calculate_cashback(total_spending, cashback_info)` that takes in the total spending as an integer and a dictionary containing the cashback information, and returns the calculated cashback amount as a floating point number.","solution":"def calculate_cashback(total_spending, cashback_info): Calculate the cashback amount based on the spending and cashback tiers. Parameters: total_spending (int): The total amount spent by the customer. cashback_info (dict): A dictionary containing the tier thresholds and cashback percentages. Returns: float: The cashback amount. silver_threshold = cashback_info[\'Silver\'] gold_threshold = cashback_info[\'Gold\'] if total_spending >= gold_threshold: cashback_percentage = cashback_info[\'GoldCashback\'] elif total_spending >= silver_threshold: cashback_percentage = cashback_info[\'SilverCashback\'] else: cashback_percentage = cashback_info[\'BronzeCashback\'] cashback_amount = total_spending * (cashback_percentage / 100.0) return cashback_amount"},{"question":"Write a function that takes a string as an input and returns the length of the longest substring without repeating characters. For example, if the input is `abcabcbb`, the longest substring without repeating characters is `abc`, which has a length of 3. If the input is `bbbbb`, the longest substring is `b`, with a length of 1. If the input is `pwwkew`, the longest substring is `wke`, with a length of 3. Your function should handle different cases such as: - An empty string, which should return 0. - A string with all unique characters. You can assume the input string will only contain ASCII characters. Write the function in a language of your choice but ensure that the solution does not use any built-in functions that significantly simplify the problem.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. :param s: string :return: integer char_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"Given a string containing only the characters `(` and `)`, write a function that determines the minimum number of parentheses to be added to make the string valid. A string of parentheses is valid if: - It is the empty string, or - It can be written as AB (A concatenated with B), where A and B are valid strings, or - It can be written as (A), where A is a valid string. Your function should return an integer representing the minimum number of parentheses to be added. # Examples: 1. Input: `\\"())\\"` Output: `1` Explanation: We need to add one `\'(\'` at the beginning to make the string valid. 2. Input: `\\"(((\\"` Output: `3` Explanation: We need to add three `\')\'` at the end to make the string valid. 3. Input: `\\"(())\\"` Output: `0` Explanation: The string is already valid, so no additional parentheses are needed. 4. Input: `\\"())((())\\"` Output: `2` Explanation: We need to add one `\'(\'` at the beginning and one `\')\'` at the end to make the string valid. # Constraints: - The input string\'s length will be at most 1000. **Function Signature:** ```python def min_add_to_make_valid(s: str) -> int: pass ```","solution":"def min_add_to_make_valid(s: str) -> int: Returns the minimum number of parentheses to be added to make the string valid. left_needed = 0 right_needed = 0 for char in s: if char == \'(\': left_needed += 1 elif char == \')\': if left_needed > 0: left_needed -= 1 else: right_needed += 1 return left_needed + right_needed"},{"question":"In a coding competition, there are multiple stages that a participant must pass. Each stage has a certain threshold of points that the participant must score to move on to the next stage. You are given the scores of a participant in each stage and the corresponding thresholds. Determine if the participant passes all stages consecutively. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - The first line of each testcase contains an integer S (number of stages). - The next line contains S space-separated integers representing the scores of the participant in each stage. - The next line contains S space-separated integers representing the thresholds required for each of those stages. -----Output:----- For each testcase, print a single string \\"PASS\\" if the participant successfully passes all stages consecutively. Otherwise, print \\"FAIL\\". -----Constraints:----- - 1 leq T leq 100 - 1 leq S leq 1000 - 1 leq text{score}, text{threshold} leq 10000 -----Sample Input:----- 3 3 90 80 100 85 75 90 2 50 60 60 70 4 100 90 80 70 90 90 80 70 -----Sample Output:----- PASS FAIL PASS","solution":"def check_pass_all_stages(test_cases): results = [] for case in test_cases: S, scores, thresholds = case if all(score >= threshold for score, threshold in zip(scores, thresholds)): results.append(\\"PASS\\") else: results.append(\\"FAIL\\") return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): S = int(lines[index]) scores = list(map(int, lines[index + 1].split())) thresholds = list(map(int, lines[index + 2].split())) test_cases.append((S, scores, thresholds)) index += 3 return test_cases"},{"question":"Given a string s consisting of lowercase letters, find and return the first non-repeating character in it. If there is no non-repeating character, return a single space (\' \'). Example 1: Input: s = \\"leetcode\\" Output: \'l\' Explanation: The first non-repeating character is \'l\'. Example 2: Input: s = \\"loveleetcode\\" Output: \'v\' Explanation: The first non-repeating character is \'v\'. Example 3: Input: s = \\"aabbcc\\" Output: \' \' Explanation: There are no characters that do not repeat. Example 4: Input: s = \\"xyzxyz\\" Output: \' \' Explanation: There are no characters that do not repeat. Constraints: 1 <= s.length <= 10^5","solution":"def first_non_repeating(s): Returns the first non-repeating character in the string s. If there is no such character, returns a single space (\' \'). from collections import OrderedDict char_count = OrderedDict() for char in s: char_count[char] = char_count.get(char, 0) + 1 for char, count in char_count.items(): if count == 1: return char return \' \'"},{"question":"Write a function that takes an integer as input and returns it as reversed string of digits with leading zeros removed. Example: ```python reverse_digits(10500) # should return \\"501\\" ```","solution":"def reverse_digits(num): Returns the integer num as a reversed string of digits with leading zeros removed. return str(int(str(num)[::-1]))"},{"question":"You are given a list of integers `tasks` where each integer represents the amount of time a task takes to complete, and an integer `T` which represents the total number of time slots available. Each time slot can accommodate one or more tasks, but the total duration of tasks assigned to any single time slot should not exceed the given integer `maxTime`. Write a function to determine the minimum value of `maxTime` such that all tasks can be completed within the `T` time slots. Example 1: Input: tasks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], T = 5 Output: 15 Explanation: A maximum time slot duration of 15 is the minimum to complete all tasks in 5 time slots like this: 1st slot: 1, 2, 3, 4, 5 2nd slot: 6, 7 3rd slot: 8 4th slot: 9 5th slot: 10 Example 2: Input: tasks = [3, 2, 2, 4, 1, 4], T = 3 Output: 6 Explanation: A maximum time slot duration of 6 is the minimum to complete all tasks in 3 time slots like this: 1st slot: 3, 2 2nd slot: 2, 4 3rd slot: 1, 4 Example 3: Input: tasks = [1, 2, 3, 1, 1], T = 4 Output: 3 Explanation: 1st slot: 1 2nd slot: 2 3rd slot: 3 4th slot: 1, 1 Constraints: 1 <= T <= tasks.length <= 50000 1 <= tasks[i] <= 500","solution":"def canComplete(tasks, T, maxTime): current_slot_time = 0 slots_used = 1 for task in tasks: if current_slot_time + task <= maxTime: current_slot_time += task else: slots_used += 1 current_slot_time = task if slots_used > T: return False return True def minRequiredMaxTime(tasks, T): left, right = max(tasks), sum(tasks) while left < right: mid = (left + right) // 2 if canComplete(tasks, T, mid): right = mid else: left = mid + 1 return left"},{"question":"You are given a string containing a sequence of words separated by spaces. Your task is to write a function that determines whether the sequence of words represents a valid sentence. For the sequence to be valid, it should follow these rules: 1. The sequence should not contain any digits. 2. Each word must start with an uppercase letter followed by only lowercase letters. 3. There should be no punctuation marks within or at the end of the words. Write a function `is_valid_sentence(sentence)` that takes a single argument, `sentence` (a string), and returns `True` if the sequence is valid and `False` otherwise. Example: - `is_valid_sentence(\\"Hello World This Is A Test\\")` should return `True` - `is_valid_sentence(\\"hello World This Is A Test\\")` should return `False` - `is_valid_sentence(\\"Hello World This is A Test3\\")` should return `False`","solution":"def is_valid_sentence(sentence): Returns True if the sentence is valid based on the given rules, otherwise False. # Split the sentence into words words = sentence.split() # Define the criteria for a valid word def is_valid_word(word): return word[0].isupper() and word[1:].islower() if len(word) > 1 else word.isupper() # Check each word in the sentence for word in words: if not is_valid_word(word) or any(char.isdigit() for char in word): return False return True"},{"question":"Samantha is writing a utility function to sum the values in a nested list of integers! Implement the function `nested_sum(nested_list)` that takes a nested list of integers (which may contain other nested lists) and returns the sum of all integers in the structure. `nested_sum(nested_list)` should work correctly for: - Single-level lists, e.g., `[1, 2, 3]` - Mix of single and multi-level lists, e.g., `[1, [2, 3], 4]` - Deeply nested lists, e.g., `[[1, 2], [[3], 4], 5]` ```python def nested_sum(nested_list): # Start coding here ``` Examples: ```python print(nested_sum([1, 2, 3])) # Output: 6 print(nested_sum([1, [2, 3], 4])) # Output: 10 print(nested_sum([[1, 2], [[3], 4], 5])) # Output: 15 print(nested_sum([1, [2, [3, [4]]], 5])) # Output: 15 ``` Please ensure your implementation handles edge cases such as empty lists or lists with no integers appropriately.","solution":"def nested_sum(nested_list): Returns the sum of all integers in the nested list structure. total = 0 for element in nested_list: if isinstance(element, list): total += nested_sum(element) else: total += element return total"},{"question":"Write a function that finds the longest path in a given matrix of integers. The path can move in four possible directions: left, right, up, and down. Your objective is to move to cells that strictly increase in value. The length of the path is the number of cells visited along the path. You are given a 2D matrix of integers. Write a function to find the length of the longest increasing path in the matrix. Return 0 if the matrix is empty. Function signature: ```python def longest_increasing_path(matrix: List[List[int]]) -> int: ``` **Input:** - A list of lists representing a 2D matrix of integers. **Output:** - An integer representing the length of the longest path. **Constraints:** - The matrix will have at most 200 rows and 200 columns. - Matrix elements can be any arbitrary integer. # Examples: ```python matrix1 = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] assert longest_increasing_path(matrix1) == 4 # Explanation: The longest increasing path is [1, 2, 6, 9]. matrix2 = [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] assert longest_increasing_path(matrix2) == 4 # Explanation: The longest increasing path is [3, 4, 5, 6]. matrix3 = [] assert longest_increasing_path(matrix3) == 0 # Explanation: Since the matrix is empty, the longest path is 0. ``` # Notes: - Dynamic programming techniques or memoization can be useful to avoid recomputation. - You need to explore all four possible directions to find the increasing path. - Make sure to handle edge cases, such as an empty matrix.","solution":"from typing import List def longest_increasing_path(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) dp = [[-1] * cols for _ in range(rows)] def dfs(x, y): if dp[x][y] != -1: return dp[x][y] max_length = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and matrix[nx][ny] > matrix[x][y]: max_length = max(max_length, 1 + dfs(nx, ny)) dp[x][y] = max_length return max_length longest_path = 0 for i in range(rows): for j in range(cols): longest_path = max(longest_path, dfs(i, j)) return longest_path"},{"question":"In an ancient kingdom, there is a tradition where the royal family celebrates festivals with uniquely designed flags. Each flag consists of M sections, and each section can be either red, green, or blue. The king wants to ensure that no two adjacent sections are of the same color for the aesthetic appeal. Your task is to determine the number of valid flag designs possible. -----Input----- The first line contains a single positive integer T <= 100, the number of test cases. T test cases follow. The only line of each test case contains a single integer M (1 <= M <= 1000), representing the number of sections in the flag. -----Output----- For each test case, output a single line containing the number of valid flag designs. -----Example----- Input: 3 1 2 3 Output: 3 6 12","solution":"def count_valid_flag_designs(m): Returns the number of valid flag designs with m sections where no two adjacent sections have the same color. if m == 1: return 3 elif m == 2: return 6 # dp[i][0] will store the number of valid sequences of length i ending in Red # dp[i][1] will store the number of valid sequences of length i ending in Green # dp[i][2] will store the number of valid sequences of length i ending in Blue dp = [[0, 0, 0] for _ in range(m + 1)] # Base case: For a flag of length 1, there are 3 possibilities (R, G, B) dp[1][0] = dp[1][1] = dp[1][2] = 1 for i in range(2, m + 1): dp[i][0] = dp[i - 1][1] + dp[i - 1][2] dp[i][1] = dp[i - 1][0] + dp[i - 1][2] dp[i][2] = dp[i - 1][0] + dp[i - 1][1] return dp[m][0] + dp[m][1] + dp[m][2] def process_input(input_data): Processes the input data and returns the result for each test case. result = [] input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) for i in range(1, t + 1): m = int(input_lines[i]) result.append(count_valid_flag_designs(m)) return result"},{"question":"Merge Sorted Lists Given two sorted lists of integers `list1` and `list2`, write a function named `merge_sorted_lists` that merges them into a single sorted list. The resultant list should also be in sorted order. Your task is to implement the function and return the merged list without using any built-in sort methods. ```python merge_sorted_lists(list1, list2) ``` # Input - `list1` is a sorted list of integers (e.g., `[1, 3, 5]`) - `list2` is another sorted list of integers (e.g., `[2, 4, 6]`) # Output - Return a single sorted list that contains all elements from `list1` and `list2` (e.g., `[1, 2, 3, 4, 5, 6]`) # Example ```python merge_sorted_lists([1, 5, 7], [2, 3, 6]) # returns [1, 2, 3, 5, 6, 7] merge_sorted_lists([], [2, 4, 6]) # returns [2, 4, 6] ``` # Constraints - The length of the lists can be 0 or more, but each individual list will not exceed 1000 elements. - The elements of each list are within the range [-10^6, 10^6]. Implement the function and make sure it handles edge cases such as empty lists or lists with repetitive numbers.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Parameters: list1 (list): First sorted list of integers. list2 (list): Second sorted list of integers. Returns: list: A single sorted list containing all the integers from list1 and list2. i, j = 0, 0 merged_list = [] while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"A tree is a connected graph containing N nodes and N-1 edges. You are given a special tree where each node has a value associated with it. You need to answer several queries, each asking for the sum of values in the subtree of a given node. The subtree of a node u is defined as the node u and all nodes that can be reached from u by traversing only through the descendants of u in the tree structure. **Input:** - The first line contains two integers N and Q, the number of nodes and the number of queries respectively. - The second line contains N space-separated integers, where the i-th integer represents the value associated with the i-th node. - The next N-1 lines each contain two integers u and v (1 leq u, v leq N), denoting an edge in the tree. - The next Q lines each contain a single integer k (1 leq k leq N), representing a query where you need to find the sum of values in the subtree of node k. **Output:** For each query, output the sum of values in the subtree of the given node. **Constraints:** - 1 leq N, Q leq 100000 - 1 leq text{Value of each node} leq 1000 **Example Input:** ``` 5 3 10 5 12 6 9 1 2 1 3 3 4 3 5 1 3 4 ``` **Example Output:** ``` 42 27 6 ``` **Explanation:** - For the first query, the subtree of node 1 includes nodes 1, 2, 3, 4, 5. The sum is 10 + 5 + 12 + 6 + 9 = 42. - For the second query, the subtree of node 3 includes nodes 3, 4, 5. The sum is 12 + 6 + 9 = 27. - For the third query, the subtree of node 4 includes only node 4. The sum is 6.","solution":"from collections import defaultdict def calculate_subtree_sum(N, values, edges, queries): def dfs(node, parent): subtree_sums[node] = values[node - 1] for neighbor in tree[node]: if neighbor != parent: dfs(neighbor, node) subtree_sums[node] += subtree_sums[neighbor] tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) subtree_sums = [0] * (N + 1) dfs(1, -1) result = [] for node in queries: result.append(subtree_sums[node]) return result # Example usage: N = 5 Q = 3 values = [10, 5, 12, 6, 9] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] queries = [1, 3, 4] output = calculate_subtree_sum(N, values, edges, queries) print(output) # Output: [42, 27, 6]"},{"question":"Bob is a gardener who maintains a rectangular garden with M rows and N columns. In this garden, each cell either contains a flower or is empty. Bob wants to beautify the garden by adding additional flowers. The garden is represented by a 2D array G of size MxN, where G[i][j] is \'1\' if the cell contains a flower and \'0\' if the cell is empty. Bob can add a flower only if it makes it possible to form an L-shaped pattern with three flowers: two consecutive cells in the same row and one cell in an adjacent row forming an \'L\'. Your task is to determine the maximum number of flowers Bob can add to the garden while forming valid L-shaped patterns. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - For each test case, the first line contains two space-separated integers M and N. - The next M lines each contain N space-separated integers representing the grid G. -----Output----- - For each test case, output a single line containing an integer representing the maximum number of flowers Bob can add. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ M, N ≤ 100 - G[i][j] is \'0\' or \'1\' -----Example----- Input: 2 3 3 1 0 0 0 0 1 1 1 0 4 4 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 1 Output: 1 2 -----Explanation----- Example 1. In the 3x3 garden, Bob can add one flower at (1, 2) to form an L-shaped pattern with the existing flowers at (0, 0) and (0, 1). Example 2. In the 4x4 garden, Bob can add two flowers; the first one at (1, 1) to form an L-shaped pattern with the existing flowers at (2, 1) and (3, 1), and the second one at (1, 2) to form an L-shaped pattern with the existing flowers at (0, 3) and (1, 3).","solution":"def count_possible_L_shapes(grid, M, N): max_flowers = 0 visited = [[False]*N for _ in range(M)] for i in range(M): for j in range(N): if grid[i][j] == \'1\': # Check for possible \'L\' shapes like \'┐\', \'└\', \'┌\', \'┘\' if j + 1 < N and i + 1 < M: if grid[i][j+1] == \'0\' and grid[i+1][j] == \'0\': if not visited[i][j+1] and not visited[i+1][j]: max_flowers += 1 visited[i][j+1] = True visited[i+1][j] = True return max_flowers def max_flowers_to_add(T, test_cases): results = [] for t in range(T): M, N = test_cases[t][0] grid = test_cases[t][1] results.append(count_possible_L_shapes(grid, M, N)) return results # Example Usage: # T = 2 # test_cases = [ # ((3, 3), [[\'1\', \'0\', \'0\'], [\'0\', \'0\', \'1\'], [\'1\', \'1\', \'0\']]), # ((4, 4), [[\'1\', \'0\', \'0\', \'1\'], [\'0\', \'0\', \'0\', \'0\'], [\'0\', \'1\', \'0\', \'0\'], [\'1\', \'0\', \'0\', \'1\']]) # ] # print(max_flowers_to_add(T, test_cases))"},{"question":"Given an array of integers, arr, and an integer k, rearrange the array such that the difference between the maximum and minimum element in any subarray of length k is minimized. Your task is to return the minimum possible difference. For example, given arr = [10, 1, 2, 4, 7, 2], and k = 3. The subarrays of length 3 are: - [10, 1, 2] -> max - min = 10 - 1 = 9 - [1, 2, 4] -> max - min = 4 - 1 = 3 - [2, 4, 7] -> max - min = 7 - 2 = 5 - [4, 7, 2] -> max - min = 7 - 2 = 5 - [7, 2, 2] -> max - min = 7 - 2 = 5 The minimum difference in any of these subarrays is 3. You should return 3. Note: - The length of arr will be between 1 and 10000. - The value of k will be between 1 and 10000.","solution":"def min_diff_in_subarrays(arr, k): Returns the minimum difference between the maximum and minimum elements of any subarray of length k. if k > len(arr): return -1 # k cannot be greater than the length of the array arr.sort() min_diff = float(\'inf\') for i in range(len(arr) - k + 1): current_diff = arr[i + k - 1] - arr[i] min_diff = min(min_diff, current_diff) return min_diff"},{"question":"You are given a string S consisting of lowercase English letters. You need to perform the following operation to transform the string: - In each operation, select any character from the string and remove all occurrences of that character. The cost associated with this operation is the unique ASCII value of the character removed. Determine the minimum cost required to completely remove all characters from the string. -----Input----- The first line contains a single integer T denoting the number of test cases. Each of the next T lines contains a string S. -----Output----- For each test case, print the minimum cost required to transform the string. -----Constraints----- 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100 -----Example----- Input 3 abc aaa abacaba Output 294 97 390 -----Explanation----- Test 1: Remove \'a\', \'b\', and \'c\' one by one. The costs are 97, 98, and 99 respectively, totaling 294. Test 2: All characters are the same, so the cost is the ASCII value of \'a\', which is 97. Test 3: Remove all occurrences of \'a\', \'b\', and \'c\' one by one. The costs are 97 for \'a\', 98 for \'b\', and 99 for \'c\', totaling 294.","solution":"def minimum_cost(T, test_cases): result = [] for s in test_cases: unique_characters = set(s) cost = sum(ord(char) for char in unique_characters) result.append(cost) return result"},{"question":"Given a list of strings words and a string pattern, return a list of words[i] that match the given pattern. A word matches the pattern if there exists a permutation of letters p so that after substituting every letter x in the pattern with p(x), we get the desired word. Example: Input: words = [\\"abc\\",\\"deq\\",\\"mee\\",\\"aqq\\",\\"dkd\\",\\"ccc\\"], pattern = \\"abb\\" Output: [\\"mee\\",\\"aqq\\"] Explanation: \\"mee\\" matches the pattern because there is a permutation {a -> m, b -> e}. \\"aqq\\" matches the pattern because there is a permutation {a -> a, b -> q}. Constraints: - 1 <= words.length <= 50 - 1 <= pattern.length <= 20 - words[i].length == pattern.length - All words[i] and pattern are of lowercase English letters.","solution":"def find_and_replace_pattern(words, pattern): def encode(word): mapping = {} encoded_word = [] next_code = 0 for char in word: if char not in mapping: mapping[char] = str(next_code) next_code += 1 encoded_word.append(mapping[char]) return \\" \\".join(encoded_word) encoded_pattern = encode(pattern) return [word for word in words if encode(word) == encoded_pattern]"},{"question":"Write a function `islandCount(matrix)` to count the number of islands in a given matrix. An island is a region of land (represented by \'1\'s) surrounded by water (represented by \'0\'s). The islands are formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the matrix are surrounded by water. # Example: ```python matrix = [ [\'1\', \'1\', \'0\', \'0\', \'0\'], [\'1\', \'1\', \'0\', \'0\', \'0\'], [\'0\', \'0\', \'1\', \'0\', \'0\'], [\'0\', \'0\', \'0\', \'1\', \'1\'] ] ``` Output: `3` - The first island is made of \'1\'s in the top left corner, connected horizontally and vertically. - The second island is the isolated \'1\' in the third row. - The third island is the two \'1\'s in the bottom right corner, connected horizontally. # Constraints: - The matrix dimensions are m x n where 1 <= m, n <= 100. # Function Signature: ```python def islandCount(matrix: List[List[str]]) -> int: pass ``` # Example Usage: ```python matrix = [ [\'1\', \'1\', \'0\', \'0\', \'0\'], [\'1\', \'1\', \'0\', \'0\', \'0\'], [\'0\', \'0\', \'1\', \'0\', \'0\'], [\'0\', \'0\', \'0\', \'1\', \'1\'] ] print(islandCount(matrix)) # Output: 3 ```","solution":"from typing import List def islandCount(matrix: List[List[str]]) -> int: if not matrix: return 0 m, n = len(matrix), len(matrix[0]) def dfs(i, j): if i < 0 or i >= m or j < 0 or j >= n or matrix[i][j] == \'0\': return matrix[i][j] = \'0\' # Mark the cell as visited by setting it to \'0\' # Traverse all 4 possible directions (up, down, left, right) dfs(i-1, j) # up dfs(i+1, j) # down dfs(i, j-1) # left dfs(i, j+1) # right count = 0 for i in range(m): for j in range(n): if matrix[i][j] == \'1\': count += 1 # Found an island dfs(i, j) return count"},{"question":"In a college course, final grades are determined based on a student\'s performance on a series of assignments. Each assignment has a maximum possible score, but students often score significantly lower. Given a list of the maximum score for each assignment and a corresponding list of the scores a student received, compute the student\'s final grade as a percentage, rounded to the nearest whole number. Write a function that takes two lists of integers, `max_scores` and `student_scores`, where `max_scores[i]` is the maximum score for the i-th assignment and `student_scores[i]` is the score received by the student for the i-th assignment. The function should return the student\'s final grade as an integer percentage. Example 1: Input: max_scores = [20, 30, 50], student_scores = [15, 24, 40] Output: 79 Explanation: Total maximum score = 20 + 30 + 50 = 100 Total student score = 15 + 24 + 40 = 79 Final grade = (79 / 100) * 100 = 79% Example 2: Input: max_scores = [10, 10, 10, 10, 10], student_scores = [9, 8, 10, 7, 10] Output: 88 Explanation: Total maximum score = 10 + 10 + 10 + 10 + 10 = 50 Total student score = 9 + 8 + 10 + 7 + 10 = 44 Final grade = (44 / 50) * 100 = 88% Example 3: Input: max_scores = [100], student_scores = [50] Output: 50 Explanation: Total maximum score = 100 Total student score = 50 Final grade = (50 / 100) * 100 = 50% Constraints: - max_scores.length = student_scores.length - 1 <= max_scores.length <= 50 - 1 <= max_scores[i] <= 100 - 0 <= student_scores[i] <= max_scores[i]","solution":"def calculate_final_grade(max_scores, student_scores): Returns the final grade percentage of a student based on their scores compared to the maximum possible scores. The result is rounded to the nearest whole number. total_max_score = sum(max_scores) total_student_score = sum(student_scores) final_grade = (total_student_score / total_max_score) * 100 return round(final_grade)"},{"question":"You are given a list of integers where each integer represents an elevation gain or loss. Write a function that calculates the number of distinct mountains in this list. A mountain is defined as a sequence of consecutive steps that starts with a positive number, increments by positive values until it starts decreasing by negative values, and ends only when it either reaches the end of the list or starts increasing again. For example, in the list [2, 3, 5, -1, -2, 4, -3, 2], there are two distinct mountains: the first one starts at 2 and ends at -2 (2, 3, 5, -1, -2), and the second one starts at 4 and ends at -3 (4, -3). Complete the function that takes a list of integers and returns the number of distinct mountains in the list. **Function Signature:** ```python def count_mountains(elevations: List[int]) -> int: # your code here ``` **Example:** Input: `[2, 3, 5, -1, -2, 4, 1, -3, 2]` Output: `2` Input: `[1, 2, -2, 2, -2]` Output: `2` Input: `[3, 2, 1]` Output: `1` Input: `[1, -1, 1, -1, 1, -1]` Output: `3` **Additional Considerations:** - The list may contain positive, negative, and zero values. - The list is guaranteed to contain at least one integer. - Consecutive zeros do not affect the identification of mountain peaks and valleys.","solution":"from typing import List def count_mountains(elevations: List[int]) -> int: Counts the number of distinct mountains in the list of elevations. if not elevations: return 0 num_mountains = 0 n = len(elevations) i = 0 while i < n: # Find the starting point of a mountain while i < n and elevations[i] <= 0: i += 1 if i == n: break # Ascending phase while i < n - 1 and elevations[i] < elevations[i+1]: i += 1 # Check if it\'s a peak we can start counting as a mountain if i < n - 1 and elevations[i] > elevations[i+1]: num_mountains += 1 # Descending phase while i < n - 1 and elevations[i] > elevations[i+1]: i += 1 i += 1 # Move to the next potential start return num_mountains"},{"question":"Design a `range_compressor` function that takes a list of integers and returns a compressed string representation of the ranges. Consecutive runs of numbers should be represented as \\"start-end\\", where `start` is the first number in the range and `end` is the last. Single numbers should be represented as themselves. For example, given the list `[1, 2, 3, 6, 7, 8, 10, 13, 14, 15, 16, 20]`, the function should return the string `\\"1-3, 6-8, 10, 13-16, 20\\"`. # Function Signature ```python def range_compressor(nums: List[int]) -> str: pass ``` # Input - `nums`: a list of integers in ascending order. # Output - A string representing the compressed ranges. # Examples ```python range_compressor([1, 2, 3, 6, 7, 8, 10, 13, 14, 15, 16, 20]) # Output: \\"1-3, 6-8, 10, 13-16, 20\\" range_compressor([5, 6, 7, 9, 11, 12, 13]) # Output: \\"5-7, 9, 11-13\\" range_compressor([1, 3, 5, 7]) # Output: \\"1, 3, 5, 7\\" ``` # Notes - You can assume that the integers will be in a sorted list. - The list will not be empty.","solution":"from typing import List def range_compressor(nums: List[int]) -> str: if not nums: return \\"\\" ranges = [] start = prev = nums[0] for num in nums[1:]: if num == prev + 1: prev = num else: if start == prev: ranges.append(str(start)) else: ranges.append(f\\"{start}-{prev}\\") start = prev = num if start == prev: ranges.append(str(start)) else: ranges.append(f\\"{start}-{prev}\\") return \\", \\".join(ranges)"},{"question":"=====Problem Statement===== You are given a string containing only letters \\"a\\" and \\"b\\". Your task is to determine if you can transform the string into a palindrome by making at most one swap of two characters. If it is possible, print \\"Yes\\". Otherwise, print \\"No\\". Do not print the quotation marks. =====Input Format===== The first line contains a single integer T, the number of test cases. For each test case: - The first line contains a single integer n, the length of the string. - The second line contains a string s of length n consisting only of \\"a\\" and \\"b\\". =====Constraints===== 1≤T≤10 1≤n≤10^5 =====Output Format===== For each test case, output a single line containing either \\"Yes\\" or \\"No\\" without the quotes.","solution":"def can_be_palindrome_with_one_swap(s): Determines if a string can be transformed into a palindrome by making at most one swap of two characters. n = len(s) differences = [] for i in range(n // 2): if s[i] != s[n - i - 1]: differences.append(i) if len(differences) > 2: return \\"No\\" if len(differences) == 0: return \\"Yes\\" if len(differences) == 2: if (s[differences[0]] == s[n - differences[1] - 1] and s[differences[1]] == s[n - differences[0] - 1]): return \\"Yes\\" return \\"No\\" def check_palindromes(test_cases): Check each test case to determine if the string can be a palindrome with at most one swap. results = [] for n, s in test_cases: results.append(can_be_palindrome_with_one_swap(s)) return results"},{"question":"In certain programming environments, formatting strings correctly is crucial for accurate data representation and user interface development. Consider a simple formatting requirement where a string representing a phone number should be converted to a specific format. Given a 10-digit phone number as a string of digits, you need to format it in the standard US phone number format: `(XXX) XXX-XXXX`. For example: - Input: `\\"1234567890\\"` - Output: `\\"(123) 456-7890\\"` Write a function `format_phone_number(phone_number: str) -> str` that takes a 10-digit string and returns it in the correct phone number format. You can assume the input string will always contain exactly 10 numeric characters. **Function Signature:** ```python def format_phone_number(phone_number: str) -> str: ``` **Example:** ```python assert format_phone_number(\\"1234567890\\") == \\"(123) 456-7890\\" assert format_phone_number(\\"9876543210\\") == \\"(987) 654-3210\\" ``` # Constraints: - The input string will always have exactly 10 digits. - The string will not contain any non-numeric characters. - No need to handle invalid inputs or error checking.","solution":"def format_phone_number(phone_number: str) -> str: Formats a 10-digit phone number string into the format: (XXX) XXX-XXXX Args: phone_number (str): A string containing exactly 10 digits. Returns: str: A formatted phone number. return f\\"({phone_number[:3]}) {phone_number[3:6]}-{phone_number[6:]}\\""},{"question":"# Problem Statement You are given a list of strings representing an electronic music arrangement where each string represents a musical note event occurring at a particular time. Each note event is formatted as \\"note_time note_duration\\", where: - `note_time` is the time (in beats) when the note starts. - `note_duration` is the duration (in beats) for which the note is played. For example, the string \\"3 2\\" indicates that a note starts at time 3 and lasts for 2 beats, ending at time 5. Your task is to write a function `can_play(arrangement)` that determines if the given music arrangement can be played without any notes overlapping. The function should return `True` if no notes overlap, and `False` otherwise. Consider note events to be overlapping if they share any time between their start and end times (excluding the exact end time). For example, \\"3 2\\" and \\"4 1\\" overlap since they both include the 4th beat. # Function Signature ```python def can_play(arrangement: list) -> bool: ``` # Input - `arrangement`: a list of strings representing the note events. Each string is in the format \\"note_time note_duration\\". # Output - Returns `True` if the arrangement can be played without any overlapping notes, otherwise returns `False`. # Example ```python print(can_play([\\"3 2\\", \\"5 2\\", \\"1 2\\"])) # Returns True, no overlapping notes. print(can_play([\\"1 3\\", \\"2 2\\", \\"4 1\\"])) # Returns False, since \\"1 3\\" and \\"2 2\\" overlap. print(can_play([\\"1 1\\", \\"2 1\\", \\"3 2\\", \\"6 1\\"])) # Returns True, no overlapping notes. print(can_play([\\"1 3\\", \\"4 2\\", \\"7 1\\", \\"5 2\\"])) # Returns False, \\"4 2\\" and \\"5 2\\" overlap. ``` # Constraints 1. The input list will contain between 1 and 1000 strings. 2. Each `note_time` and `note_duration` will be an integer between 1 and 1000.","solution":"def can_play(arrangement: list) -> bool: Determines if the given music arrangement can be played without any notes overlapping. Parameters: arrangement (list): A list of strings representing the note events. Returns: bool: True if no notes overlap, False otherwise. # Parse the arrangement into a list of tuples (note_time, note_duration) events = [] for note in arrangement: note_time, note_duration = map(int, note.split()) events.append((note_time, note_duration)) # Sort events by the start time events.sort() # Check for overlaps for i in range(1, len(events)): prev_end_time = events[i-1][0] + events[i-1][1] current_start_time = events[i][0] if current_start_time < prev_end_time: return False return True"},{"question":"Riya loves prime numbers and she is fascinated by their properties. Her latest interest is in twin primes. Twin primes are pairs of prime numbers that have a gap of two between them (for example, (3, 5), (11, 13), etc.). She comes up with a task where you are given a list of numbers and need to find out if it contains any twin primes. You need to identify and output all pairs of twin primes present in the given list of numbers in increasing order. If a prime number belongs to multiple twin prime pairs, list those pairs separately. -----Input:----- - The first line contains an integer N which is the number of elements in the list. - The second line contains space-separated n integers. -----Output:----- Output all pairs of twin primes in increasing order, each pair in a new line. If no twin primes are found, output \\"No twin primes\\". -----Constraints----- - 1 leq N leq 1000 - 1 leq A[i] leq 10^6 -----Sample Input:----- 10 3 5 7 11 13 17 19 23 29 31 -----Sample Output:----- 3 5 5 7 11 13 17 19 29 31","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def find_twin_primes(numbers): Find and return all pairs of twin primes in the given list of numbers. prime_numbers = sorted([num for num in numbers if is_prime(num)]) twin_primes = [] for i in range(len(prime_numbers) - 1): if prime_numbers[i + 1] == prime_numbers[i] + 2: twin_primes.append((prime_numbers[i], prime_numbers[i + 1])) return twin_primes def process_twin_primes_output(n, numbers): Process the input and generate the required output format. twin_primes = find_twin_primes(numbers) if not twin_primes: return \\"No twin primes\\" else: return \\"n\\".join(f\\"{pair[0]} {pair[1]}\\" for pair in twin_primes)"},{"question":"Given a 2D grid of characters numRows x numCols, find the largest rectangle containing only \'1\'s and return its area. The grid is represented by an array of strings, where each string represents a row of the grid. Example: Input: [\\"10100\\", \\"10111\\", \\"11111\\", \\"10010\\"] Output: 6 Explanation: The largest rectangle containing only \'1\'s has an area of 6. Note: - Rows and columns in the grid will be at most 200. - You can assume all input characters are either \'0\' or \'1\'.","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 max_area = 0 height = [0] * (len(matrix[0]) + 1) for row in matrix: for i in range(len(matrix[0])): if row[i] == \'1\': height[i] += 1 else: height[i] = 0 stack = [-1] for i in range(len(height)): while height[i] < height[stack[-1]]: h = height[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Write a function that calculates and returns the factorial of a given non-negative integer. For example, given the number 5, the function should return 120. Ensure that your function handles edge cases, such as 0, appropriately. SQL: Return the results in a column named `factorial`. *[The function should handle large inputs as well, ensuring the calculation is efficient]*","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. If n is 0, returns 1 as 0! is defined as 1. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"In a given list of integers, a \\"dominant\\" integer is one that appears more than half the size of the list. Write a function `find_dominant` which takes a list of integers as input and returns the dominant integer. If no dominant integer exists, the function should return `None`. # Task Your task is to implement the function `find_dominant(lst)` that identifies and returns the dominant integer from the provided list. If no such integer exists, return `None`. # Examples ``` find_dominant([3,3,4,2,4,4,2,4,4]) returns 4 (4 appears 5 times, which is more than half of the list size of 9) find_dominant([3,3,4,2,4,4,2,4]) returns None (No integer appears more than 4 times in a list size of 8) find_dominant([1]) returns 1 (1 appears 1 time, which is more than half of the list size of 1) find_dominant([1,2,1,2,1,2,1]) returns 1 (1 appears 4 times, which is more than half of the list size of 7) ``` # Constraints - The input list will contain only integers. - The length of the input list will be greater than 0. # Note - You can assume that the input list will only contain valid integers and will not be empty.","solution":"def find_dominant(lst): Returns the dominant integer from the list if it exists, otherwise returns None. A dominant integer is an integer that appears more than half the size of the list. threshold = len(lst) // 2 count_dict = {} for num in lst: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 if count_dict[num] > threshold: return num return None"},{"question":"Alice wants to create a password with specific rules. She needs a password that satisfies the following conditions: 1. The password must be of length `n` where `1 <= n <= 10^5`. 2. The password must contain at least one vowel (`a`, `e`, `i`, `o`, `u`). 3. The password must contain at least one consonant (all alphabets excluding `a`, `e`, `i`, `o`, `u`). 4. The password can only contain lowercase alphabets (`a` to `z`). Given a string `s` of length `n`, determine if `s` can be a password based on the above rules. If Alice has multiple test cases, determine if each string can be used as a password. ----- Input ----- Each test contains multiple test cases. The first line contains the number of test cases `t` (`1 <= t <= 10000`). The description of the test cases follows. The next `2*t` lines describe the test cases. For each test case: - The first line contains the integer `n` (`1 <= n <= 10^5`) - the length of the string. - The second line contains a string `s` of length `n` containing only lowercase alphabets. It is guaranteed that the sum of `n` over all test cases doesn\'t exceed `10^5`. ----- Output ----- For each test case, output one line containing \\"YES\\" if the string can be used as a password based on the given rules, or \\"NO\\" if it can\'t. You can print each letter in any case (upper or lower). ----- Example ----- Input 4 5 hello 4 abcd 6 aeiouj 3 xyz Output YES YES YES NO ----- Note ----- In the first test case, \\"hello\\" contains both vowels (e and o) and consonants (h, l). In the second test case, \\"abcd\\" contains both vowels (a) and consonants (b, c, d). In the third test case, \\"aeiouj\\" contains vowels (a, e, i, o, u) and consonants (j). In the fourth test case, \\"xyz\\" does not contain any vowels.","solution":"def can_be_password(n, s): Determines if the given string `s` of length `n` can be a valid password. vowels = set(\'aeiou\') contains_vowel = False contains_consonant = False for char in s: if char in vowels: contains_vowel = True else: contains_consonant = True if contains_vowel and contains_consonant: return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): Processes multiple test cases and returns the results as a list of strings. results = [] for i in range(t): n, s = test_cases[i] result = can_be_password(n, s) results.append(result) return results"},{"question":"Write a function named `reorderToPalindrome(s)` that checks whether any permutation of the input string `s` can form a palindrome. The function should return `True` if it\'s possible to rearrange the characters of the string into a palindrome; otherwise, it should return `False`. Note that the input string can contain uppercase and lowercase letters, and your solution should be case-insensitive (treat \'A\' as \'a\'). For any string with no possibility of reordering into a palindrome, the function should return `False`.","solution":"def reorderToPalindrome(s): Checks whether any permutation of the input string s can form a palindrome. The check is case-insensitive. :param s: Input string :return: True if any permutation can form a palindrome, otherwise False from collections import Counter # Convert the string to lowercase to make the check case-insensitive s = s.lower() # Count the frequency of each character char_count = Counter(s) # Check the number of characters with odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be rearranged into a palindrome, # there can be at most one character with an odd frequency. return odd_count <= 1"},{"question":"**Frequency Counter** You need to write a function that takes a list of integers and returns an object (dictionary) representing the frequency count of each distinct integer in the list. The returned dictionary should have the integers from the list as keys and their corresponding frequencies as values. If the provided list is empty, the function should return an empty dictionary. **Example** ```python def frequency_counter(nums): # Your code here # Example Test Cases print(frequency_counter([1, 2, 2, 3, 3, 3])) # Output: {1: 1, 2: 2, 3: 3} print(frequency_counter([4, 4, 4, 4])) # Output: {4: 4} print(frequency_counter([])) # Output: {} print(frequency_counter([1])) # Output: {1: 1} print(frequency_counter([5, 5, 6, 6, 6])) # Output: {5: 2, 6: 3} ``` In this problem, you are tested on your ability to: - Manipulate and iterate through data structures. - Understand and implement frequency counting logic. - Handle edge cases such as empty lists. Make sure your function is efficient and handles large input sizes gracefully.","solution":"def frequency_counter(nums): Takes a list of integers and returns a dictionary representing the frequency count of each distinct integer in the list. freq_dict = {} for num in nums: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 return freq_dict"},{"question":"Given a list of integers nums, and a target integer target, return the indices of the two numbers that add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example 1: nums = [2, 7, 11, 15], target = 9 Return [0, 1] Example 2: nums = [3, 2, 4], target = 6 Return [1, 2] Example 3: nums = [3, 3], target = 6 Return [0, 1] Follow-up: Can you come up with an algorithm that is less than O(n^2) time complexity?","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"You are given a list of positive integers representing both the value of different items and the weight of each item in a knapsack problem. Your task is to maximize the value that can be put in a knapsack of a given maximum weight. However, you can only include either the whole item or exclude it; you cannot break it into parts (a classic 0/1 knapsack problem). Write a function to implement this solution using dynamic programming techniques. -----Input----- The first line contains two integers n and W (1 ≤ n ≤ 1000, 1 ≤ W ≤ 10000) — the number of items and the maximum weight the knapsack can hold. Next n lines contain two integers w_{i}, v_{i} (1 ≤ w_{i} ≤ W, 1 ≤ v_{i} ≤ 1000) each — the weight and value of the i-th item. -----Output----- Print a single integer — the maximum possible value that can be accumulated in the knapsack. -----Examples----- Input 4 7 2 10 3 14 4 7 5 13 Output 24 Input 3 50 10 60 20 100 30 120 Output 220 -----Note----- In the first sample case, you can select the first and second items to achieve a total value of 24 with a total weight of 5 which is within the maximum weight limit 7. In the second sample case, you can select the first and second items to achieve a total value of 220 with a total weight of 30 which is within the maximum weight limit 50.","solution":"def knapsack(n, W, items): Given a number of items with their weights and values, and a maximum knapsack weight, this function returns the maximum value that can be accumulated in the knapsack using the 0/1 knapsack approach. Parameters: n (int): Number of items W (int): Maximum weight the knapsack can hold items (list): List of tuples where each tuple contains two integers (weight, value) of an item Returns: int: Maximum value that can be accumulated in the knapsack # Initialize a DP array to store the maximum values for every possible weight dp = [0] * (W + 1) # Iterate through each item for weight, value in items: # Traverse dp array from right to left for w in range(W, weight - 1, -1): # Update dp array considering the inclusion of the current item dp[w] = max(dp[w], dp[w - weight] + value) return dp[W]"},{"question":"Given a list of strings where each string represents a full name in the format `\\"FirstName LastName\\"`, write a function `format_names()` that transforms the list into the following format: - Convert each full name into the format `\\"LastName, FirstName\\"`. - If there are duplicate names in the input list, keep only one instance of each name in the final list. - The final list should be sorted alphabetically by the last name. For example: ```python names = [\\"John Smith\\", \\"Anna Brown\\", \\"John Smith\\", \\"Emily Davis\\"] ``` Should be transformed into: ```python [\\"Brown, Anna\\", \\"Davis, Emily\\", \\"Smith, John\\"] ```","solution":"def format_names(names): Transforms the list of full names into the format \\"LastName, FirstName\\", removes duplicate names, and sorts the final list alphabetically by the last name. # Convert each name to \\"LastName, FirstName\\" format and use a set to remove duplicates formatted_names = {f\\"{name.split()[1]}, {name.split()[0]}\\" for name in names} # Convert the set back to a list formatted_names = list(formatted_names) # Sort the list alphabetically by the last name formatted_names.sort() return formatted_names"},{"question":"Task: Flatten a Nested List Iterator Problem Statement Create an iterator to flatten a nested list structure. Each element in the list can be either an integer or a list whose elements may also be integers or other lists. Your iterator should return each integer in the nested lists one by one. # Example Here is an example of your class usage: ```python nestedList = [[1, 1], 2, [1, [1, 2, [3]]]] i = NestedIterator(nestedList) result = [] while i.hasNext(): result.append(i.next()) print(result) # Output: [1, 1, 2, 1, 1, 2, 3] ``` # Methods 1. `__init__`: This method initializes the iterator with a nested list. 2. `next()`: This method returns the next integer in the nested list. 3. `hasNext()`: This method returns `True` if the iterator has more integers to return, otherwise `False`. # Constraints - The nested list structure may be arbitrarily deep. - Elements will all be in integer range and there will be no empty lists at any level in the nesting. # Implementation Implement the `NestedIterator` class with the described methods. ```python class NestedIterator: def __init__(self, nestedList): self.stack = [] self._flatten(nestedList) def _flatten(self, nestedList): for element in nestedList[::-1]: if isinstance(element, int): self.stack.append(element) else: self._flatten(element) def next(self): return self.stack.pop() def hasNext(self): return len(self.stack) > 0 # Usage example: nestedList = [[1, 1], 2, [1, [1, 2, [3]]]] i = NestedIterator(nestedList) result = [] while i.hasNext(): result.append(i.next()) print(result) # Output: [1, 1, 2, 1, 1, 2, 3] ``` # Notes - Ensure your iterator works efficiently with deeply nested structures. - Consider edge cases like single `int` elements.","solution":"class NestedIterator: def __init__(self, nestedList): self.stack = [] self._flatten(nestedList) def _flatten(self, nestedList): for element in nestedList[::-1]: if isinstance(element, int): self.stack.append(element) else: self._flatten(element) def next(self): return self.stack.pop() def hasNext(self): return len(self.stack) > 0 # Usage example: # nestedList = [[1, 1], 2, [1, [1, 2, [3]]]] # i = NestedIterator(nestedList) # result = [] # while i.hasNext(): # result.append(i.next()) # print(result) # Output: [1, 1, 2, 1, 1, 2, 3]"},{"question":"You are given n items, each represented by an integer value. The objective is to partition these items into two subsets such that the difference between the sums of the subsets is minimized. Return the minimum possible difference. Some examples: if you have four items with values [1, 6, 11, 5], you can partition them into [1, 6, 5] and [11] with the sums 12 and 11, and the difference is 1; if you have two items with values [3, 1], you can partition them into [3] and [1] with the sums 3 and 1, and the difference is 2. -----Input----- The first line contains an integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains an integer n (1 le n le 100) — the number of items. The second line contains n integers a_1, a_2, dots, a_n (0 le a_i le 1000), where a_i is the value of the i-th item. -----Output----- For each test case, print the minimum possible difference between the sums of the two subsets. -----Example----- Input 2 4 1 6 11 5 3 1 2 3 Output 1 0","solution":"def find_min_subset_sum_difference(arr): Function to find the minimum possible difference between the sums of two subsets. total_sum = sum(arr) n = len(arr) # Initialize a 2D boolean array dp[][] such that dp[i][j] will be # True if there is a subset of elements from the first i elements # of arr[] with a sum equal to j. dp = [[False for _ in range(total_sum // 2 + 1)] for _ in range(n + 1)] # There is always a subset with 0 sum, an empty subset for i in range(n + 1): dp[i][0] = True # Fill the partition table in bottom-up manner for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] # Find the maximum j such that dp[n][j] # is true where j loops from total_sum//2 to 0 diff = float(\'inf\') for j in range(total_sum // 2, -1, -1): if dp[n][j] == True: diff = total_sum - 2 * j break return diff def minimum_subset_difference(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(find_min_subset_sum_difference(arr)) return results"},{"question":"You are given a grid with dimensions `m x n` representing a 2D map. Each cell in the map can have one of three values: - The value `\'1\'` represents land. - The value `\'0\'` represents water. - The value `\'2\'` represents a fortress. A fortress (value `\'2\'`) is always considered to be connected to the land (value `\'1\'`) since a fortress is placed on land. A region of connected lands forms an island. To determine the connectivity, you can move up, down, left, or right from any given cell. Your task is to write a function that takes an `m x n` grid as input and returns the number of islands that contain at least one fortress. For example: ```python grid = [ [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"1\\", \\"0\\", \\"0\\", \\"2\\", \\"0\\"], [\\"0\\", \\"0\\", \\"1\\", \\"1\\", \\"0\\"], [\\"0\\", \\"2\\", \\"0\\", \\"0\\", \\"0\\"], [\\"1\\", \\"0\\", \\"1\\", \\"2\\", \\"1\\"] ] ``` In the grid given above, the function should return `3` since there are three distinct islands containing forts. **Function Signature** ```python def count_islands_with_forts(grid: List[List[str]]) -> int: pass ``` **Constraints** - `1 <= m, n <= 300` - The grid contains only the characters `\'0\'`, `\'1\'`, and `\'2\'`. - There will be at least one fortress (value `\'2\'`) in the grid.","solution":"from typing import List, Tuple def count_islands_with_forts(grid: List[List[str]]) -> int: def dfs(x: int, y: int) -> None: if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == \'0\': return if grid[x][y] == \'1\' or grid[x][y] == \'2\': # Mark the land as visited grid[x][y] = \'0\' # Conduct DFS in 4 directions for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy dfs(nx, ny) m, n = len(grid), len(grid[0]) count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'2\': # Start a DFS if we find a fortress count += 1 dfs(i, j) return count"},{"question":"You have been tasked with creating a software application that helps in organizing a coding competition. One of the requirements is to group participants in such a way that the total age difference within each group is minimized. However, each group can have a maximum of K participants. You are given the ages of N participants. Your goal is to figure out the optimal way to group them. To do this, you need to partition the ages into the minimal number of groups such that the maximum difference in age within each group is minimized. -----Input----- - The first line contains an integer T denoting the number of test cases. - For each test case: - The first line contains two integers N and K. - The second line contains N space-separated integers representing the ages of the participants. -----Output----- For each test case, output a single line containing the minimum possible value of the maximum difference of ages within any group. -----Constraints----- - 1 le T le 100 - 1 le N le 10^4 - 1 le K le N - 1 le Age of each participant le 100 -----Example Input----- 2 5 2 8 12 16 6 10 6 3 7 2 5 9 4 3 -----Example Output----- 4 2 -----Explanation----- Example case 1: The optimal grouping is [6, 8] and [10, 12, 16], where the maximum age difference within any group is 2 and 6, respectively. Hence, the output is 4 which is the minimal value of the maximum difference in the groups when optimally partitioned. Example case 2: The optimal grouping is [3, 4, 5], [2, 7, 9] where the maximum age difference is 2 and 7 respectively. Hence, the output is 2 which is the minimal value of the maximum difference in the groups when optimally partitioned.","solution":"def partition_ages(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] ages = sorted(test_cases[i][1]) def can_partition_with_max_diff(max_diff): group_count = 1 min_age = ages[0] for j in range(1, N): if ages[j] - min_age > max_diff: group_count += 1 min_age = ages[j] if group_count > K: return False return True left, right = 0, ages[-1] - ages[0] while left < right: mid = (left + right) // 2 if can_partition_with_max_diff(mid): right = mid else: left = mid + 1 results.append(left) return results # Example usage T = 2 test_cases = [ ((5, 2), [8, 12, 16, 6, 10]), ((6, 3), [7, 2, 5, 9, 4, 3]), ] print(partition_ages(T, test_cases)) # Output: [4, 2]"},{"question":"Given an array of integers, write a function to determine if the array could become non-decreasing by modifying at most one element. A non-decreasing array is one where every subsequent element is greater than or equal to its predecessor. Example 1: Input: nums = [4, 2, 3] Output: true Explanation: You could modify 4 to 1 to get a non-decreasing array. Example 2: Input: nums = [4, 2, 1] Output: false Explanation: You cannot make the array non-decreasing only by modifying one element. Constraints: 1. 1 <= nums.length <= 10000 2. -10^4 <= nums[i] <= 10^4","solution":"def check_possibility(nums): Determine if the array could become non-decreasing by modifying at most one element. :param nums: List[int] - The input array of integers. :return: bool - True if the array could become non-decreasing, False otherwise. count = 0 # To keep track of the modifications for i in range(1, len(nums)): if nums[i] < nums[i - 1]: if count == 1: return False # More than one modification required count += 1 # Determine whether to fix nums[i-1] or nums[i] if i == 1 or nums[i] >= nums[i - 2]: nums[i - 1] = nums[i] else: nums[i] = nums[i - 1] return True"},{"question":"After the kingdom was saved by the hero, peace returned, and the people could go back to their daily lives. The wise wizard decided to challenge his apprentice with a coding problem. Given an array BB of LL integers, the wizard asks to find the length of the longest increasing subsequence from the array. A subsequence is derived by deleting some or no elements of the array without changing the order of the remaining elements. The subsequence is considered increasing if each element in the sequence is less than the subsequent element in the sequence. Help the apprentice to solve this problem so he can gain favor with the wizard and learn powerful spells sooner. ---Input--- - The first line contains SS, the number of test cases. - Each test case starts with an integer LL, the length of the array BB. - The second line of each test case contains LL space-separated integers BiB_{i} (1≤i≤L1 leq i leq L). ---Output--- For each test case, output an integer denoting the length of the longest increasing subsequence. ---Constraints--- - 1≤S≤1001 leq S leq 100 - 1≤L≤10001 leq L leq 1000 - -10^9≤Bi≤10^9-10^{9} leq B_{i} leq 10^{9} ---Sample Input--- 2 6 5 8 3 7 9 1 5 1 2 3 4 5 ---Sample Output--- 3 5 ---Explanation--- For the first test case, the longest increasing subsequences are [5,7,9][5, 7, 9] and [3,7,9][3, 7, 9], each of length 3. For the second test case, the entire array is an increasing subsequence, so the length is 5.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the array. if not arr: # if arr is empty return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis) def process_input(input_data): Processes multiple test cases for the longest increasing subsequence problem. Returns a list containing the results for each test case. input_lines = input_data.strip().split(\'n\') num_of_test_cases = int(input_lines[0]) results = [] index = 1 for _ in range(num_of_test_cases): L = int(input_lines[index]) array = list(map(int, input_lines[index + 1].strip().split())) result = longest_increasing_subsequence(array) results.append(result) index += 2 return results"},{"question":"# String Permutations Write a program that generates all possible permutations of a given string. The string will contain unique characters, and its length will not exceed 8 characters. # Example: For a given input string \\"ABC\\", the output should be: ABC, ACB, BAC, BCA, CAB, CBA Your program should output a list of all possible permutations of the string in lexicographical order. Write a function that accepts a string and returns a list of permutations in lexicographical order.","solution":"from itertools import permutations def string_permutations(s): Returns a list of all possible permutations of a given string in lexicographical order. return [\'\'.join(p) for p in sorted(permutations(s))]"},{"question":"Alice has recently started working with the compression algorithm and she is experimenting with run-length encoding (RLE) for strings. In case you are not familiar, run-length encoding is a simple form of compression where consecutive elements are replaced with a single instance of the element and a count of how many times it appears consecutively. For example, the string \\"aabcccccaaa\\" would be encoded as \\"a2b1c5a3\\". Alice wants to create a function that performs run-length encoding on a given string and returns the encoded string. If the encoded string is not shorter than the original string, Alice will return the original string instead. Write a function to perform this encoding. ```python def run_length_encode(s: str) -> str: pass ``` -----Input----- The input to the function is a single string `s` (1 ≤ |s| ≤ 10^5) containing only lowercase English letters. -----Output----- The function should return a string representing the run-length encoding of `s`. If the encoded string is not shorter than `s`, return `s` itself. -----Examples----- Input \'aabcccccaaa\' Output \'a2b1c5a3\' Input \'abcd\' Output \'abcd\'","solution":"def run_length_encode(s: str) -> str: n = len(s) if n == 0: return s encoded_str = [] count = 1 for i in range(1, n): if s[i] == s[i - 1]: count += 1 else: encoded_str.append(s[i - 1] + str(count)) count = 1 encoded_str.append(s[-1] + str(count)) encoded_result = \'\'.join(encoded_str) return encoded_result if len(encoded_result) < n else s"},{"question":"Rocky is playing a game with his friends. In this game, Rocky has to form words using a provided set of characters. Each character has a given score and Rocky wants to form the word with the highest possible score using exactly M characters. Can you help Rocky determine the maximum possible score he can achieve? -----Input----- First line of input contains an integer T — the number of test cases. T tests follow. For each test case, the first line contains the integer N — the number of different characters available to form the word, and the integer M — the exact number of characters the word must contain. Then, the next line contains N integers — the scores of the characters. -----Output----- For each test case, output a single integer — the maximum possible score Rocky can achieve. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100000 - 1 ≤ M ≤ N - 1 ≤ score of each character ≤ 1000 -----Subtasks----- - Sub task #1 (20 points): N ≤ 100 - Sub task #2 (30 points): N ≤ 10000 - Sub task #3 (50 points): Original constraints. -----Example----- Input: 3 5 3 4 2 7 1 8 4 2 1 5 3 6 6 1 10 9 8 7 6 5 Output: 19 11 10","solution":"def max_possible_score(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] scores = test_cases[i][1] scores.sort(reverse=True) result = sum(scores[:M]) results.append(result) return results # Example usage: # T = 3 # test_cases = [ # [(5, 3), [4, 2, 7, 1, 8]], # [(4, 2), [1, 5, 3, 6]], # [(6, 1), [10, 9, 8, 7, 6, 5]] # ] # print(max_possible_score(T, test_cases)) # Outputs: [19, 11, 10]"},{"question":"Write a function that receives a list of integers and an integer `n`, and returns the smallest subarray length for which the sum of its elements is greater than or equal to `n`. If no such subarray exists, return 0. The input list will contain at least one positive integer. Ensure your function has an efficient design to handle large inputs gracefully. `This challenge is aimed at improving your problem-solving and optimization skills. Share your solutions and discuss different approaches!`","solution":"def smallest_subarray_with_sum(arr, n): Returns the length of the smallest contiguous subarray for which the sum of its elements is greater than or equal to n. If no such subarray exists, return 0. min_length = float(\'inf\') curr_sum = 0 start = 0 for end in range(len(arr)): curr_sum += arr[end] while curr_sum >= n: min_length = min(min_length, end - start + 1) curr_sum -= arr[start] start += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"Write a function that takes a string composed of words that are concatenated together, where each word starts with a capital letter (e.g., \\"CamelCase\\"). The function should split the string back into individual words and return a list of these words in lowercase. The string will contain only alphabetic characters (no numbers or special characters), and will always be non-empty. Example: ``` input: \\"CamelCaseFormat\\" output: [\\"camel\\", \\"case\\", \\"format\\"] ``` ``` input: \\"ThisIsATest\\" output: [\\"this\\", \\"is\\", \\"a\\", \\"test\\"] ```","solution":"def split_camel_case(s): Splits a camel case string into individual words in lowercase. Parameters: - s (str): The camel case string. Returns: - list: A list of words in lowercase. import re words = re.findall(r\'[A-Z][a-z]*\', s) return [word.lower() for word in words]"},{"question":"A road network consisting of n cities and m bidirectional roads is represented as a graph where cities are nodes and roads are edges. Each road has a travel time associated with it. You are given a starting city s and a destination city d. Your task is to determine the minimum travel time required to get from city s to city d. If there is no path from s to d, return -1. ```text -----Input----- The first line contains two integers n and m, where n is the number of cities and m is the number of roads. The next m lines each contain three integers u, v, and t, representing a road between city u and city v with a travel time of t. The last line contains two integers s and d representing the starting city and the destination city respectively. -----Output----- Output a single integer representing the minimum travel time from the starting city to the destination city. If no path exists, output -1. -----Constraints----- - 1 ≤ n ≤ 1000 - 0 ≤ m ≤ 10000 - 1 ≤ u, v, s, d ≤ n - 1 ≤ t ≤ 1000 -----Example----- Input: 5 6 1 2 3 1 3 2 2 3 2 3 4 4 2 5 1 4 5 1 1 5 Output: 5 Explanation: The shortest path from city 1 to city 5 is 1 → 2 → 5 with a travel time of 3 + 1 = 4, which is less than the path 1 → 3 → 4 → 5 with travel time 2 + 4 + 1 = 7. ``` This question assesses the candidate\'s ability to work with graph algorithms, specifically shortest path algorithms such as Dijkstra\'s algorithm. The constraints ensure that the problem is feasible to compute within the given limits.","solution":"import heapq import sys def minimum_travel_time(n, m, roads, s, d): graph = [[] for _ in range(n + 1)] for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) distances = [sys.maxsize] * (n + 1) distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_distance, current_city = heapq.heappop(priority_queue) if current_distance > distances[current_city]: continue for neighbor, weight in graph[current_city]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[d] if distances[d] != sys.maxsize else -1 # Parsing function added for ease of testing in unit tests def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) roads = [tuple(map(int, line.split())) for line in lines[1:m+1]] s, d = map(int, lines[m+1].split()) return n, m, roads, s, d"},{"question":"Given an array of integers, return a new array that contains the parity of each element in the input array. The parity of a number is 0 if it is even, and 1 if it is odd. ```python parity_array([1, 2, 3, 4, 5]) => [1, 0, 1, 0, 1] parity_array([10, 21, 32]) => [0, 1, 0] ```","solution":"def parity_array(arr): Returns a new array that contains the parity of each element in the input array. The parity of a number is 0 if it is even, and 1 if it is odd. Args: arr (list): A list of integers. Returns: list: A list of integers where even numbers are replaced with 0 and odd numbers are replaced with 1. return [0 if x % 2 == 0 else 1 for x in arr]"},{"question":"Implement a function that takes a string consisting of lowercase alphabets and returns the length of the longest substring without repeating characters. For example: - The input string `\\"abcabcbb\\"` would output `3`, corresponding to the substring `\\"abc\\"`. - The input string `\\"bbbbb\\"` would output `1`, corresponding to the substring `\\"b\\"`. - The input string `\\"pwwkew\\"` would output `3`, corresponding to the substring `\\"wke\\"`. Your function should efficiently find this length, ensuring near linear time complexity with respect to the length of the input string. Function signature: `def longest_unique_substring(s: str) -> int:`","solution":"def longest_unique_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} max_length = 0 start = 0 for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"A pirate has a map consisting of a grid with `N` rows and `M` columns, where some cells are marked as obstacles. The pirate starts at the top-left corner (1, 1) and needs to reach the bottom-right corner (N, M). The pirate can move right or down to adjacent cells but cannot pass through any obstacles. Calculate the number of unique paths the pirate can take to reach the bottom-right corner without moving through obstacles. -----Input:----- - The first line contains two integers, `N` and `M`, the number of rows and columns of the grid. - The next `N` lines each contain `M` characters where a \'.\' represents an empty cell and \'#\' represents an obstacle. -----Output:----- - Output a single integer, the number of unique paths from the top-left corner to the bottom-right corner. -----Constraints----- - 1 leq N, M leq 100 - The start (1, 1) and end (N, M) are always empty cells. -----Sample Input:----- 3 3 ... .#. ... -----Sample Output:----- 2","solution":"def unique_paths(N, M, grid): Calculate the number of unique paths from the top-left corner to the bottom-right corner in a grid with obstacles. if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 # If start or end is blocked, no path is possible. # 2D list for dynamic programming dp = [[0] * M for _ in range(N)] # Starting position dp[0][0] = 1 # Fill the dp table for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 # No path through an obstacle else: if i > 0: dp[i][j] += dp[i-1][j] # Add path from top if j > 0: dp[i][j] += dp[i][j-1] # Add path from left return dp[N-1][M-1]"},{"question":"Python provides a data type called lists. Lists are mutable, ordered collections of items. You can add, remove, and modify items in a list. Some common list operations in Python include append, remove, and indexing. Given an initial list of integers, write a function that replaces every multiple of 3 with the string \\"Fizz\\", every multiple of 5 with the string \\"Buzz\\", and every multiple of both 3 and 5 with the string \\"FizzBuzz\\". Return the modified list. For example: - For the input [1, 2, 3, 4, 5, 15, 30], the function should return [1, 2, \'Fizz\', 4, \'Buzz\', \'FizzBuzz\', \'FizzBuzz\']. - For the input [6, 7, 8, 9, 10], the function should return [\'Fizz\', 7, 8, \'Fizz\', \'Buzz\']. In the implementation, ensure to maintain the order of elements and replace only those that are valid multiples of 3, 5, or both. Write a function `fizz_buzz_transform(numbers: List[int]) -> List[Union[int, str]]:` that performs the described transformation.","solution":"from typing import List, Union def fizz_buzz_transform(numbers: List[int]) -> List[Union[int, str]]: Transforms a list of integers such that: - Elements that are multiples of 3 are replaced with \'Fizz\'. - Elements that are multiples of 5 are replaced with \'Buzz\'. - Elements that are multiples of both 3 and 5 are replaced with \'FizzBuzz\'. Args: numbers (List[int]): The input list of integers. Returns: List[Union[int, str]]: The transformed list where multiples are replaced with corresponding strings. result = [] for number in numbers: if number % 3 == 0 and number % 5 == 0: result.append(\'FizzBuzz\') elif number % 3 == 0: result.append(\'Fizz\') elif number % 5 == 0: result.append(\'Buzz\') else: result.append(number) return result"},{"question":"ZS the Coder is playing another game with a board made up of a grid of horizontal and vertical lines. Each cell in the grid can be either blocked or open. ZS the Coder starts at the top-left cell of the grid (1, 1) and wants to reach the bottom-right cell (n, m). ZS the Coder can move to any adjacent open cell horizontally or vertically. The challenge is to find the minimum number of moves ZS needs to take to reach the target cell, or determine if it\'s impossible. Write a function to help ZS the Coder solve this problem. -----Input----- The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns of the grid, respectively. The next n lines each contain m characters, representing the grid. Each character is either \'.\' (open cell) or \'#\' (blocked cell). The starting cell (1, 1) and target cell (n, m) are guaranteed to be open (\'.\'). -----Output----- Print a single integer representing the minimum number of moves required to reach the bottom-right cell (n, m) from the top-left cell (1, 1). If it is impossible to reach the target cell, print -1. -----Examples----- Input 3 3 ... .#. ... Output 4 Input 4 4 .... .. .. .... Output 6 Input 3 3 ..# .#. ..# Output -1 -----Note----- In the first sample case: ZS the Coder can take the following path: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) This path requires 4 moves. In the second sample case: ZS the Coder can take the following path: (1, 1) -> (1, 2) -> (1, 3) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4) This path requires 6 moves. In the third sample case: The blocked cells make it impossible to reach the target cell from the starting cell. Therefore, the output is -1.","solution":"from collections import deque def minimum_moves_to_target(n, m, grid): # Directions of movement (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() # If we\'ve reached the bottom-right cell, return the distance if row == n - 1 and col == m - 1: return dist # Explore all 4 possible directions for dr, dc in directions: new_row, new_col = row + dr, col + dc # Check if new position is within bounds and not visited if 0 <= new_row < n and 0 <= new_col < m and grid[new_row][new_col] == \'.\' and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) # If queue is exhausted and we haven\'t returned, it\'s impossible to reach the target return -1"},{"question":"Task: You need to implement a function called **number_pyramid** which takes an integer parameter `n` and returns a string representing a pyramid of numbers with `n` levels. Each level i (starting from 1 at the top) contains i numbers. The numbers in each level start from 1 up to i, then back down to 1, forming a symmetrical pattern. # Rules/Note: * If `n` is 0 or a negative integer, the function should return an empty string `\\"\\"`. * Each level should be centered and padded with spaces such that the base of the pyramid is aligned. * The maximum value for n will be 50. # Examples: number_pyramid(3): ``` 1 121 12321 ``` number_pyramid(5): ``` 1 121 12321 1234321 123454321 ``` number_pyramid(7): ``` 1 121 12321 1234321 123454321 12345654321 1234567654321 ``` number_pyramid(10): ``` 1 121 12321 1234321 123454321 12345654321 1234567654321 123456787654321 12345678987654321 1234567890987654321 ```","solution":"def number_pyramid(n): Generate a pyramid of numbers with n levels. Parameters: n (int): Number of levels for the pyramid Returns: str: The formatted number pyramid as a string if n <= 0: return \\"\\" # Create the pyramid string pyramid = [] for i in range(1, n + 1): # Construct the left part of the line (1 to i) left_part = \'\'.join(str(x) for x in range(1, i + 1)) # Construct the right part of the line (i-1 down to 1) right_part = \'\'.join(str(x) for x in range(i - 1, 0, -1)) # Combine both parts line = left_part + right_part # Center the line according to the base width pyramid.append(line.center(2 * n - 1)) return \'n\'.join(pyramid)"},{"question":"Binary Search Tree - Contains Value & Height Calculation Implement `contains()` to check if a given value exists within the binary search tree. Implement `getHeight()` to calculate the height (maximum depth) of the binary search tree. Ensure that your implementations are efficient in terms of both time and space complexity. The `insert()`/`Insert()` function for adding values to the tree does not need to be redefined.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert_recursive(self.root, key) def _insert_recursive(self, node, key): if key < node.val: if node.left is None: node.left = TreeNode(key) else: self._insert_recursive(node.left, key) else: if node.right is None: node.right = TreeNode(key) else: self._insert_recursive(node.right, key) def contains(self, key): # Checks if the tree contains the key return self._contains_recursive(self.root, key) def _contains_recursive(self, node, key): if node is None: return False if node.val == key: return True elif node.val > key: return self._contains_recursive(node.left, key) else: return self._contains_recursive(node.right, key) def getHeight(self): # Returns the height of the tree return self._getHeight_recursive(self.root) def _getHeight_recursive(self, node): if node is None: return -1 # height of empty tree is -1 else: left_height = self._getHeight_recursive(node.left) right_height = self._getHeight_recursive(node.right) return 1 + max(left_height, right_height)"},{"question":"Snuke has an array of integers and wants to perform operations on this array to reach a desired state. Given an array `A` of length `N`, Snuke can perform the following move any number of times (including zero): - Select any index i (1 ≤ i ≤ N-1) and remove `A[i]` from the array. - Move all the integers from the right of `A[i]` to the left by one position (fill the gap). - The length of the array will reduce by one after every move. Snuke wants the resulting array to be strictly increasing after some number of moves. Determine the minimum number of moves required. -----Constraints----- - 1 ≤ N ≤ 2 × 10^5 - 1 ≤ A[i] ≤ 10^9 -----Input----- The input is given from Standard Input in the following format: N A_1 A_2 ... A_{N} -----Output----- Print a single integer representing the minimum number of moves required to make the array strictly increasing. -----Sample Input----- 5 3 2 1 4 5 -----Sample Output----- 2 Explanation: - We can remove the 1st and 2nd elements (3 and 2) to get the array [1, 4, 5], which is strictly increasing. - Thus, the minimum number of moves required is 2.","solution":"def min_moves_to_increasing(N, A): Determines the minimum number of moves required to make the array strictly increasing by removing the minimum number of elements. Parameters: - N: int, the length of the array - A: list of int, the array of integers Returns: - int, the minimum number of moves required # Longest Increasing Subsequence (LIS) problem from bisect import bisect_left lis = [] for a in A: pos = bisect_left(lis, a) if pos < len(lis): lis[pos] = a else: lis.append(a) # Minimum moves to make array strictly increasing = N - length of LIS return N - len(lis)"},{"question":"Kevin has recently become interested in prime numbers. He often gets intrigued by the power of primes in different sequences and numbers. He wants to create sequences that have some special properties. Kevin calls an array p of length m a \\"prime-pair array\\" if it satisfies the following conditions: 1. Each element in the array p is a positive integer and 1 leq p_i leq 100. 2. Every pair of adjacent elements (p_i, p_{i+1}) in the array must sum up to a prime number. Given a positive integer m, output any \\"prime-pair array\\" of length m. You can assume that for the provided constraints, such an array always exists. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). Description of the test cases follows. The first and only line of every test case contains a single integer m (1 le m le 100). -----Output----- For every test, output any \\"prime-pair array\\" of length m on a separate line. -----Example----- Input 3 1 3 5 Output 3 4 3 4 1 4 3 4 7 -----Note----- Array [4, 3, 4] is a \\"prime-pair array\\" because the sums of adjacent elements are prime: 4 + 3 = 7 and 3 + 4 = 7, both of which are prime numbers.","solution":"def generate_prime_pair_array(m): Generates a prime-pair array of length m. # A prime-pair array can be constructed simply by alternating between 4 and 3 # because 4 + 3 = 7, which is prime. array = [] for i in range(m): array.append(4 if i % 2 == 0 else 3) return array def process_queries(t, queries): Processes multiple test cases to generate prime-pair arrays of lengths specified in queries. results = [] for m in queries: results.append(generate_prime_pair_array(m)) return results"},{"question":"Mark is participating in a driving simulation challenge where he has to drive through a grid of size NxM. Each cell in this grid contains a certain fuel cost. He starts at the top-left corner of the grid and must reach the bottom-right corner. However, he\'s only allowed to move right or down at each step. If he starts with a fuel of F units, find the minimum fuel needed for Mark to complete his journey to the bottom-right corner. If he cannot reach the destination with the given fuel, output \\"Impossible\\". For example, suppose N = 3, M = 3, F = 10 and the grid of fuel costs is: ``` 3 4 1 2 8 3 6 2 1 ``` Mark starts at the top-left corner (0, 0) and can follow the path (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) with a total fuel cost of 3+4+1+3+1 = 12 units. Since he only has 10 units of fuel, it would be impossible for him to reach the destination. -----Input format----- • Line 1 : Three space-separated integers, N, M, and F with 1 ≤ N, M ≤ 1000 and 1 ≤ F ≤ 10000. • The following N lines each contain M space-separated integers representing the fuel costs for each cell in the grid. -----Output format----- A single line containing the minimum fuel needed to reach the bottom-right corner, or \\"Impossible\\" if it can\'t be done with the given initial fuel F. -----Test Data----- The testdata is grouped into two subtasks with the following constraints on the inputs. • Subtask 1 [30 points] : 1 ≤ N, M ≤ 100. • Subtask 2 [70 points] : 1 ≤ N, M ≤ 1000. -----Example----- Here is the sample input and output corresponding to the example above. -----Sample input----- 3 3 10 3 4 1 2 8 3 6 2 1 -----Sample output----- Impossible Note: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!","solution":"def min_fuel_needed(grid, N, M): Returns the minimum fuel needed to reach the bottom-right corner of the grid. If it\'s impossible, returns -1. dp = [[float(\'inf\')] * M for _ in range(N)] dp[0][0] = grid[0][0] for i in range(N): for j in range(M): if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[N-1][M-1] def driving_simulation(N, M, F, grid): min_needed_fuel = min_fuel_needed(grid, N, M) if min_needed_fuel <= F: return min_needed_fuel else: return \\"Impossible\\""},{"question":"Given an input string of words, where the words are separated by spaces, write a function that returns a list containing pairs of the first and last letter of each word. For example: ```python find_pairs(\\"hello world\\") == [(\'h\', \'o\'), (\'w\', \'d\')] find_pairs(\\"programming is fun\\") == [(\'p\', \'g\'), (\'i\', \'s\'), (\'f\', \'n\')] find_pairs(\\"a b c\\") == [(\'a\', \'a\'), (\'b\', \'b\'), (\'c\', \'c\')] ``` The function should handle any string input, and the words will always be separated by exactly one space. The resulting list should contain tuples where each tuple corresponds to the first and last letters of each word in the same order they appear in the input string. If a word has only one letter, the first and last letters are the same.","solution":"def find_pairs(input_string): Returns a list of tuples containing the first and last letter of each word. words = input_string.split() return [(word[0], word[-1]) for word in words]"},{"question":"# Task: Write a function that determines if a given string is a \\"Balanced Bracket String\\". A \\"Balanced Bracket String\\" is one that has matching opening and closing brackets in the correct order. The only brackets to be considered are `()`, `{}`, and `[]`. # Examples: ``` input(\\"()\\") => returns true input(\\"([{}])\\") => returns true input(\\"(]\\") => returns false input(\\"[(])\\") => returns false input(\\"[({}])\\") => returns true ``` Note: The input string will only contain the above types of brackets and will be non-empty.","solution":"def is_balanced_bracket_string(s): Determines if the input string s is a Balanced Bracket String. bracket_stack = [] bracket_pairs = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_pairs.values(): bracket_stack.append(char) elif char in bracket_pairs: if not bracket_stack or bracket_stack[-1] != bracket_pairs[char]: return False bracket_stack.pop() else: return False return not bracket_stack"},{"question":"You are given a series of tasks represented as a list of intervals, where each interval is a pair of start and end times [start, end]. Each task may take some time to complete between its start and end times. A task can only be processed from its start time to its end time inclusively, and only one task can be processed at any given time across the entire scheduling system. Your goal is to determine whether it is possible to schedule all the given tasks without any overlap. If possible, return a schedule in the form of a list of tasks with `start` and `end` times respected and no two tasks overlap; otherwise, return an empty list. Assume that the intervals are given in arbitrary order and it\'s allowed to reorder them to fit the scheduling requirement. Example 1: Input: [[1, 3], [2, 4], [3, 5]] Output: [] Explanation: It\'s impossible to schedule all tasks without overlap. Example 2: Input: [[7, 10], [2, 4]] Output: [[2, 4], [7, 10]] Explanation: The tasks do not overlap. Example 3: Input: [[1, 3], [5, 8], [4, 5],[9, 10]] Output: [[1, 3], [4, 5], [5, 8], [9, 10]] Explanation: The tasks can be scheduled without overlap. Note: 1. 0 < intervals.length <= 10^4 2. 0 < intervals[i][0] < intervals[i][1] <= 10^4","solution":"def schedule_tasks(intervals): Determines if it is possible to schedule all the given tasks without any overlap. :param intervals: List of intervals where each interval is represented as [start, end] :return: A list of non-overlapping intervals if possible, otherwise an empty list. if not intervals: return [] # Sort intervals by their ending times intervals.sort(key=lambda x: x[1]) result = [] last_end_time = 0 for interval in intervals: if interval[0] >= last_end_time: result.append(interval) last_end_time = interval[1] else: return [] return result"},{"question":"Write a function that formats a string representation of a list of numbers into a human-readable English format. The function should take a string of comma-separated numbers and return a string where the numbers are listed with commas in between and \'and\' before the last number. Additionally, it should correctly handle cases with 0, 1, or 2 numbers. Specifications: - The input string contains only natural numbers (positive integers) separated by commas without spaces. - If the input string is empty, the function should return an empty string. - If the input string contains only one number, return that number as a string. - If the input string contains two numbers, return them separated by \' and \'. - For more than two numbers, the function should list the first numbers separated by \', \', place an \'and\' before the last number without an Oxford comma. # Example ```python format_numbers(\\"1,2,3,4\\") -> \\"1, 2, 3 and 4\\" format_numbers(\\"1,2\\") -> \\"1 and 2\\" format_numbers(\\"1\\") -> \\"1\\" format_numbers(\\"\\") -> \\"\\" ``` Would you write it?","solution":"def format_numbers(numbers): Formats a string of comma-separated numbers into a human-readable English format. if not numbers: return \\"\\" num_list = numbers.split(\',\') if len(num_list) == 1: return num_list[0] elif len(num_list) == 2: return \' and \'.join(num_list) else: return \', \'.join(num_list[:-1]) + \' and \' + num_list[-1]"},{"question":"# Task A \\"**zigzag**\\" sequence in a list of integers is defined as one where the differences between successive elements strictly alternate between positive and negative. An integer `a` is followed by integer `b` if `b > a` and by `c` if `c < b`, and so on. The length of the longest zigzag sequence in `[1, 7, 4, 9, 2, 5]` could be `6` for the whole sequence or `4` for the subsequence `[1, 7, 4, 9]`. You are given a list of integers `arr`. Your task is to find the length of the longest zigzag sequence in the given list. # Example For `arr = [1, 7, 4, 9, 2, 5]`, the result should be `6`, as the whole list forms a zigzag sequence. For `arr = [1, 2, 3, 4, 5]`, the result should be `2`, as the maximal length zigzag subsequence is `[1, 2]` or `[4, 5]`. # Input/Output - `[input]` integer array `arr` A non-empty list of integers. - `[output]` an integer The length of the longest zigzag sequence in the given list.","solution":"def longest_zigzag(arr): Finds the length of the longest zigzag sequence in the given list. if len(arr) < 2: return len(arr) up = down = 1 # Start with the first element for both up and down for i in range(1, len(arr)): if arr[i] > arr[i-1]: up = down + 1 elif arr[i] < arr[i-1]: down = up + 1 return max(up, down)"},{"question":"The Chef is given an array of integers and asked to find the longest contiguous subarray which forms a palindrome. A subarray is said to be a palindrome if it reads the same from left to right as it does from right to left. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N indicating the size of the array. The second line contains N space-separated integers A1, A2, ..., AN. -----Output----- For each test case, print the length of the longest contiguous palindromic subarray. If no such subarray exists, output 0. -----Constraints----- For Subtask 1: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10 - -1000 ≤ A1, A2, ..., AN ≤ 1000 For Subtask 2: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - -10000 ≤ A1, A2, ..., AN ≤ 10000 -----Example----- Input: 2 7 1 2 1 3 1 2 1 5 1 3 5 7 9 Output: 7 1 -----Explanation----- Example case 1. The whole array {1, 2, 1, 3, 1, 2, 1} is a palindrome. Example case 2. As there are no palindromic subarrays longer than 1, the longest contiguous palindromic subarray is any single element in the array.","solution":"def longest_palindromic_subarray_length(arr): Given an array of integers `arr`, find the length of the longest contiguous subarray which forms a palindrome. n = len(arr) max_len = 1 # Create a table to store results of subproblems table = [[0 for x in range(n)] for y in range(n)] # All substrings of length 1 are palindromes for i in range(n): table[i][i] = True start = 0 # check for sub-string of length 2. for i in range(n - 1): if arr[i] == arr[i + 1]: table[i][i + 1] = True start = i max_len = 2 # Check for lengths greater than 2. k is the length of the substring for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 # end index of sub-string from starting index i and length k # Checking for sub-string from ith index to jth index # iff arr[i+1] to arr[j-1] is a palindrome if table[i + 1][j - 1] and arr[i] == arr[j]: table[i][j] = True if k > max_len: start = i max_len = k return max_len def process_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) results = [] idx = 1 for _ in range(T): N = int(input_lines[idx]) arr = list(map(int, input_lines[idx + 1].split())) results.append(longest_palindromic_subarray_length(arr)) idx += 2 return results"},{"question":"# Task A company is testing a network application that tracks data packets through routers. Each data packet has a unique ID and can pass through multiple routers. Given a list of packets, with each packet represented as an array of router IDs it has passed through, find the packet that has visited the most unique routers. If multiple packets have visited the most unique routers, return the packet that visited those routers in the earliest order. # Example For `packets = [[1, 2, 3], [4, 3, 2], [1, 2, 3, 4, 5], [2, 3]]`, the output should be `[1, 2, 3, 4, 5]`. ``` The packet [1, 2, 3, 4, 5] has visited 5 unique routers. The other packets have visited fewer unique routers or the same number in a different order. ``` # Input/Output - [input] integer array array `packets` Array of data packets, where each packet is an array of positive integers representing router IDs. Constraints: `1 ≤ packets.length ≤ 50,` `1 ≤ packets[i].length ≤ 100,` `1 ≤ packets[i][j] ≤ 500.` - [output] an integer array The packet that has visited the most unique routers, visiting them in the earliest order if there is a tie.","solution":"def find_packet_with_most_unique_routers(packets): max_unique_count = 0 best_packet = [] for packet in packets: unique_routers = set(packet) if len(unique_routers) > max_unique_count: max_unique_count = len(unique_routers) best_packet = packet elif len(unique_routers) == max_unique_count: best_packet = min(best_packet, packet) return best_packet"},{"question":"Write a function that takes an integer `n` and returns a list of all the prime factors of `n`. A prime factor is a prime number that divides `n` without leaving a remainder. The returned list should be sorted in ascending order. Examples ```python prime_factors(28) >> [2, 7] prime_factors(60) >> [2, 3, 5] prime_factors(13) >> [13] prime_factors(1) >> [] ``` Explanation - `prime_factors(28)` returns `[2, 7]` because 28 = 2 * 2 * 7. - `prime_factors(60)` returns `[2, 3, 5]` because 60 = 2 * 2 * 3 * 5. - `prime_factors(13)` returns `[13]` because 13 is a prime number itself. - `prime_factors(1)` returns `[]` because 1 has no prime factors.","solution":"def prime_factors(n): Returns a list of all prime factors of the integer n in ascending order. if n < 2: return [] factors = [] divisor = 2 while n >= 2: if n % divisor == 0: if divisor not in factors: factors.append(divisor) n = n // divisor else: divisor += 1 return factors"},{"question":"Bob loves working with numbers. He is particularly fond of numbers represented in binary format. Can you help him solve a problem using binary operations? Given an integer N, Bob wants you to perform the following operation: - Convert the number N into its binary representation. - Toggle all the bits of this binary representation (i.e., change all 0s to 1s and all 1s to 0s). - Convert the toggled binary number back to its decimal representation. Your task is to write a function that takes an integer input N and returns the result of the described operation. -----Input----- There is a single test case per test file. The only line of input contains an integer N. -----Output----- Output a single integer that is the result after toggling all bits in the binary representation of N. -----Constraints----- - 1 ≤ N ≤ 10^9 -----Example----- Input:5 Output:2 Explanation: - The binary representation of 5 is 101. - After toggling, 101 becomes 010 (which is 2 in decimal).","solution":"def toggle_bits(N): Convert the integer N to its binary representation, toggle all the bits, and return the decimal representation of the toggled binary number. # Find the binary representation of N without the \'0b\' prefix binary_rep = bin(N)[2:] # Toggle the bits toggled_binary_rep = \'\'.join(\'1\' if bit == \'0\' else \'0\' for bit in binary_rep) # Convert the toggled binary number back to its decimal representation return int(toggled_binary_rep, 2)"},{"question":"Your Task Write a function that takes a string and returns the string with each character shifted by 3 places in the ASCII table. If shifting a character by 3 places results in a character beyond \'z\' or \'Z\', wrap around to the beginning of the alphabet. Non-alphabet characters should remain the same. For example, the letter \'a\' shifted by 3 would become \'d\', \'x\' shifted by 3 would become \'a\', and \'M\' shifted by 3 would become \'P\'. **Note**: Only shift alphabetical characters and maintain the case of each letter. **Function Signature**: ```python def shift_string(s: str) -> str: pass ``` Examples ``` shift_string(\\"abc\\") ==> \\"def\\" shift_string(\\"xyz\\") ==> \\"abc\\" shift_string(\\"Hello, World!\\") ==> \\"Khoor, Zruog!\\" shift_string(\\"AaZz\\") ==> \\"DdCc\\" ```","solution":"def shift_string(s: str) -> str: result = [] for char in s: if \'a\' <= char <= \'z\': result.append(chr((ord(char) - ord(\'a\') + 3) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': result.append(chr((ord(char) - ord(\'A\') + 3) % 26 + ord(\'A\'))) else: result.append(char) return \'\'.join(result)"},{"question":"Write a function `smallest_subarray_with_sum(s, arr)` that finds the length of the smallest contiguous subarray whose sum is greater than or equal to a given integer `s`. If no such subarray exists, return 0. -----Input----- - An integer `s (1 ≤ s ≤ 10^9)`. - An array `arr` of integers `arr[i] (1 ≤ arr[i] ≤ 10^4)` of length `n (1 ≤ n ≤ 10^5)`. -----Output----- Output a single integer - the length of the smallest contiguous subarray whose sum is greater than or equal to `s`. -----Examples----- Input 7 [2, 3, 1, 2, 4, 3] Output 2 Input 15 [1, 2, 3, 4, 5] Output 5 Input 100 [1, 2, 3, 4, 5] Output 0 -----Note----- In the first sample, the smallest subarray with sum ≥ 7 is [4, 3]. In the second sample, the smallest subarray with sum ≥ 15 is the entire array [1, 2, 3, 4, 5]. In the third sample, no subarray has a sum ≥ 100.","solution":"def smallest_subarray_with_sum(s, arr): Returns the length of the smallest contiguous subarray whose sum is greater than or equal to s. If no such subarray exists, return 0. n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= s: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"Given a list of strings `words_list`, write a function that will group and return the anagrams together. An anagram is a word formed by rearranging the letters of another, such as \\"eat\\", \\"tea\\", and \\"ate\\". The function should return a list of lists, each containing words that are anagrams of each other. The order of the groups and the order of words within each group does not matter. `find_anagrams(words_list: List[str]) -> List[List[str]]` # EXAMPLES: ``` find_anagrams([\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]) = [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] find_anagrams([\\"\\"]) = [[\\"\\"]] find_anagrams([\\"a\\"]) = [[\\"a\\"]] ```","solution":"from typing import List from collections import defaultdict def find_anagrams(words_list: List[str]) -> List[List[str]]: Groups the anagrams together. Args: words_list: List of strings. Returns: List of lists, where each list contains words that are anagrams of each other. anagrams = defaultdict(list) for word in words_list: # Sort the word and use it as a key sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"Implement a function `find_k_largest_palindromes_in_range` that accepts three arguments: `lower_limit`, `upper_limit`, and `k`. The function should return the `k` largest palindromic numbers within the inclusive range from `lower_limit` to `upper_limit`. A palindromic number is a number that remains the same when its digits are reversed. In code: ```python find_k_largest_palindromes_in_range(lower_limit, upper_limit, k) #-> [p1, p2, ..., pk] ``` Such that: ``` upper_limit >= p1 > p2 > ... > pk >= lower_limit ``` # Examples ```python lower_limit = 10 upper_limit = 200 k = 5 find_k_largest_palindromes_in_range(lower_limit, upper_limit, k) == [191, 181, 171, 161, 151] lower_limit = 100 upper_limit = 500 k = 3 find_k_largest_palindromes_in_range(lower_limit, upper_limit, k) == [494, 484, 474] lower_limit = 50 upper_limit = 60 k = 2 find_k_largest_palindromes_in_range(lower_limit, upper_limit, k) == [55] ``` # Features - The function should be efficient enough to handle `upper_limit` up to `10^6` without significant performance issues. - You can assume `k` will always be less than or equal to the number of palindromic numbers within the range. Enjoy tackling this problem!","solution":"def find_k_largest_palindromes_in_range(lower_limit, upper_limit, k): Returns the k largest palindromic numbers within the inclusive range from lower_limit to upper_limit. def is_palindrome(num): return str(num) == str(num)[::-1] palindromes = [num for num in range(upper_limit, lower_limit - 1, -1) if is_palindrome(num)] return palindromes[:k]"},{"question":"=====Function Descriptions===== itertools.permutations The permutations function from the itertools module generates all possible permutations of a given iterable. A permutation is an arrangement of all elements in a particular order. Example Code >>> from itertools import permutations >>> >>> perms = permutations([\'a\', \'b\', \'c\']) >>> for perm in perms: >>> print perm (\'a\', \'b\', \'c\') (\'a\', \'c\', \'b\') (\'b\', \'a\', \'c\') (\'b\', \'c\', \'a\') (\'c\', \'a\', \'b\') (\'c\', \'b\', \'a\') =====Problem Statement===== You are given a string S. Your task is to generate all possible permutations of the string S and print them in lexicographical order. =====Input Format===== The input contains a single string S. =====Constraints===== 1 ≤ len(S) ≤ 9 The string S consists of lowercase English letters only. =====Output Format===== Print all possible permutations of the string S in lexicographical order, each permutation on a new line. =====Sample Input===== abc =====Sample Output===== abc acb bac bca cab cba =====Note===== - Ensure that the output permutations are sorted in lexicographical order. - Each permutation should be printed on a new line.","solution":"from itertools import permutations def lexicographical_permutations(S): Given a string S, generates all possible permutations of the string in lexicographical order and prints them. perms = permutations(S) sorted_perms = sorted([\'\'.join(p) for p in perms]) for perm in sorted_perms: print(perm)"},{"question":"Given an array of integers and an integer `k`, write a function to determine whether the array contains any duplicates within `k` distance from each other. In other words, the function should return `True` if there are two distinct indices `i` and `j` in the array such that `arr[i] = arr[j]` and `abs(i - j) <= k`. The function prototype is: ```python def contains_nearby_duplicate(arr: List[int], k: int) -> bool: ``` # Examples Example 1: ```python arr = [1, 2, 3, 1] k = 3 contains_nearby_duplicate(arr, k) == True ``` Example 2: ```python arr = [1, 0, 1, 1] k = 1 contains_nearby_duplicate(arr, k) == True ``` Example 3: ```python arr = [1, 2, 3, 1, 2, 3] k = 2 contains_nearby_duplicate(arr, k) == False ``` Example 4: ```python arr = [99, 99] k = 2 contains_nearby_duplicate(arr, k) == True ``` Example 5: ```python arr = [1, 2, 3, 4, 5, 6, 7, 8, 9] k = 10 contains_nearby_duplicate(arr, k) == False ``` # Constraints - The given array will have at most 10^4 elements. - The array elements can be in the range of -10^9 to 10^9. - The value of `k` will be a non-negative integer.","solution":"from typing import List def contains_nearby_duplicate(arr: List[int], k: int) -> bool: Determine if the array contains any duplicates within k distance from each other. seen = {} for i, num in enumerate(arr): if num in seen and i - seen[num] <= k: return True seen[num] = i return False"},{"question":"Write a function that checks whether two strings are anagrams of each other, ignoring spaces and case sensitivity. An anagram is a word or phrase formed by rearranging the letters of another, such as \\"listen\\" and \\"silent\\". * Consider all letters to be in upper case for the comparison * Ignore spaces in the strings * If the input is `null/NULL/Nil/None`, treat it as an empty string Your method should return `true` if the strings are anagrams and `false` if they are not. Examples: ``` \\"abc\\", \\"CBA\\" -> true \\"a bc\\", \\"cba\\" -> true \\"Listen\\", \\"Silent\\" -> true \\"hello\\", \\"world\\" -> false \\"Astronomer\\", \\"Moon starer\\" -> true null, \\"\\" -> true \\"abc\\", null -> false ```","solution":"def are_anagrams(str1, str2): Checks whether two strings are anagrams of each other, ignoring spaces and case sensitivity. def clean_string(s): if s is None: return \\"\\" return \\"\\".join(sorted(s.replace(\\" \\", \\"\\").upper())) return clean_string(str1) == clean_string(str2)"},{"question":"# Task You are given a string `s` composed of lowercase alphabets, and an integer `k`. You need to find the length of the smallest substring of `s` that contains at least `k` distinct characters. If no such substring exists, return `-1`. # Example For `s = \\"abcba\\"` and `k = 3`, the result should be `3`. The smallest substring containing at least `3` distinct characters is `\\"abc\\"`, which has a length of 3. For `s = \\"aaabbb\\"` and `k = 4`, the result should be `-1`. Since there are no substrings that contain at least 4 distinct characters. # Input/Output - `[input]` string `s` A string composed of lowercase alphabets. - `[input]` integer `k` A positive integer. - `[output]` integer Length of the smallest substring that contains at least `k` distinct characters, or `-1` if no such substring exists.","solution":"def smallest_substring_with_k_distinct(s, k): if k > len(set(s)): return -1 n = len(s) min_len = n + 1 char_count = {} left = 0 for right in range(n): if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 while len(char_count) >= k: min_len = min(min_len, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 return min_len if min_len <= n else -1"},{"question":"You are tasked with creating a program that manages a task list. The program should allow users to add tasks, mark tasks as completed, and remove tasks from the list. Implement the following functions: 1. `add_task(task_list, task)` - Takes a list of tasks and a task (a string), adds the task to the list, and returns the updated list. 2. `complete_task(task_list, task)` - Takes a list of tasks and a task (a string), removes the task from the list if it exists, and returns the updated list. If the task does not exist, return the list unchanged. 3. `remove_task(task_list, task)` - Similar to `complete_task`, but instead of just removing completed tasks, it removes any task from the list and returns the updated list. If the task does not exist, return the list unchanged. Your task is to write the implementation for these three functions. Once you have implemented the functions, write **EXACTLY TWO** doc tests for each function to confirm the operations work as expected. Here is an example: def add_task(task_list, task): Adds a task to the list of tasks. >>> add_task([], \\"Buy groceries\\") [\'Buy groceries\'] >>> add_task([\\"Buy groceries\\"], \\"Clean house\\") [\'Buy groceries\', \'Clean house\'] task_list.append(task) return task_list Remember: - Ensure the functions handle empty lists appropriately. - Follow the same approach for `complete_task` and `remove_task` functions, ensuring to write two doc tests for each function as well. Good Luck!","solution":"def add_task(task_list, task): Adds a task to the list of tasks. >>> add_task([], \\"Buy groceries\\") [\'Buy groceries\'] >>> add_task([\\"Buy groceries\\"], \\"Clean house\\") [\'Buy groceries\', \'Clean house\'] task_list.append(task) return task_list def complete_task(task_list, task): Marks a task as complete by removing it from the list if it exists. >>> complete_task([\\"Buy groceries\\", \\"Clean house\\"], \\"Buy groceries\\") [\'Clean house\'] >>> complete_task([\\"Buy groceries\\"], \\"Do laundry\\") [\'Buy groceries\'] if task in task_list: task_list.remove(task) return task_list def remove_task(task_list, task): Removes a task from the task_list if it exists. >>> remove_task([\\"Buy groceries\\", \\"Clean house\\"], \\"Clean house\\") [\'Buy groceries\'] >>> remove_task([\\"Buy groceries\\"], \\"Do laundry\\") [\'Buy groceries\'] if task in task_list: task_list.remove(task) return task_list"},{"question":"Given a list of positive integers, write a function that returns a list of the integers that are prime numbers. A prime number is defined as a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. # Input - An integer `n` (1 <= n <= 10000), representing the number of elements in the list. - A list of `n` positive integers, each in the range (1 <= integer <= 10000). # Output - A list of integers that are prime numbers from the given list, in the same order as they appeared in the input list. - If no prime numbers are found, return an empty list. # Note - The function should be efficient and able to handle the upper limits of the input constraints. # Example ```python Input: 5, [2, 4, 6, 5, 7] Output: [2, 5, 7] Input: 3, [4, 6, 8] Output: [] ``` # Function Signature ```python def find_prime_numbers(n: int, numbers: List[int]) -> List[int]: pass ```","solution":"from typing import List def is_prime(num: int) -> bool: Returns True if num is a prime number, otherwise False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def find_prime_numbers(n: int, numbers: List[int]) -> List[int]: Returns a list of prime numbers from the given list of numbers. return [num for num in numbers if is_prime(num)]"},{"question":"# Task You are required to write a function to simulate the behavior of an elevator system in a building. The input to the function includes a list of floor requests and the current floor the elevator is situated on. The output should be a list representing the order of floors the elevator will visit based on the following rules: # Rules * The elevator will always start moving from the current floor. * The elevator will fulfill all requests in its current direction before reversing direction. * The elevator will continue servicing requests until no more requested floors exist. * The elevator floor requests are given as distinct integers within the valid range of floors for the building. The implementation should prioritize efficiency in terms of the number of stops the elevator makes. # Input - `current_floor`: an integer representing the floor the elevator is currently on. - `requests`: a list of integers representing the requested floors. # Output - A list of integers representing the order of floors the elevator will stop to fulfill all the requests. # Example ```python current_floor = 5 requests = [3, 8, 13, 2, 7, 12] # calling function output = elevator(current_floor, requests) # expected output print(output) # [7, 8, 12, 13, 3, 2] ``` In this example, the elevator starts at floor 5. It will first go up to the higher floors (7, 8, 12, 13) before reversing direction to fulfill the remaining requests (3, 2).","solution":"def elevator(current_floor, requests): Simulates the behavior of an elevator in a building. Parameters: current_floor (int): The floor the elevator is currently situated on. requests (list): A list of integers representing the requested floors. Returns: list: A list representing the order of floors the elevator will visit. # Separate the requests into two lists: those above the current floor and those below above = sorted([request for request in requests if request > current_floor]) below = sorted([request for request in requests if request < current_floor], reverse=True) # First serve the requests above the current floor, then the ones below return above + below # Example usage: # current_floor = 5 # requests = [3, 8, 13, 2, 7, 12] # output = elevator(current_floor, requests) # print(output) # Should print [7, 8, 12, 13, 3, 2]"},{"question":"Given a list of integers nums, return the length of the longest contiguous subarray such that all the elements in the subarray are equal. Example 1: Input: nums = [1, 1, 0, 2, 2, 2, 3, 3, 4] Output: 3 Explanation: The longest contiguous subarray with equal elements is [2, 2, 2], so the length is 3. Example 2: Input: nums = [1, 1, 1, 1, 1, 1] Output: 6 Explanation: The entire array consists of equal elements, so the length is 6. Example 3: Input: nums = [1, 1, 2, 2, 2, 1, 1, 1] Output: 3 Explanation: The longest contiguous subarray with equal elements is [2, 2, 2], so the length is 3. Constraints: 1 <= nums.length <= 10^4 0 <= nums[i] <= 10^9","solution":"def longest_equal_subarray_length(nums): Returns the length of the longest contiguous subarray such that all the elements in the subarray are equal. if not nums: return 0 max_length = 1 current_length = 1 for i in range(1, len(nums)): if nums[i] == nums[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Task Write a function that, given a positive integer `n`, returns the sum of all even Fibonacci numbers that are less than or equal to `n`. The Fibonacci sequence is a series of numbers starting with 0 and 1 where each number is the sum of the two preceding ones. # Examples ```python sum_even_fibonacci(8) --> 10 # Fibonacci sequence up to 8 is [0, 1, 1, 2, 3, 5, 8] # Even Fibonacci numbers <= 8 are [0, 2, 8]; their sum is 10 sum_even_fibonacci(34) --> 44 # Fibonacci sequence up to 34 is [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] # Even Fibonacci numbers <= 34 are [0, 2, 8, 34]; their sum is 44 sum_even_fibonacci(1) --> 0 # Fibonacci sequence up to 1 is [0, 1, 1] # No even Fibonacci numbers <= 1 ```","solution":"def sum_even_fibonacci(n): Returns the sum of all even Fibonacci numbers that are less than or equal to n. a, b = 0, 1 sum_even = 0 while a <= n: if a % 2 == 0: sum_even += a a, b = b, a + b return sum_even"},{"question":"Lucy is working on a new project where she has to manage a list of events with start and end times. Each event is represented as a pair of integers, where the first integer is the start time and the second integer is the end time. Lucy wants to find out the maximum number of events she can attend without overlapping any of them. She can attend an event if and only if the event starts after the last attended event ends. Given a list of n events, help Lucy determine the maximum number of non-overlapping events she can attend. -----Input----- The first line of input contains integer n (1 ≤ n ≤ 100 000) — the number of events. The next n lines contain two integers start_i and end_i (1 ≤ start_i < end_i ≤ 10^9) — the start and end times of the ith event. -----Output----- Print the maximum number of non-overlapping events Lucy can attend. -----Example----- Input 3 1 2 2 4 3 5 Output 2 -----Note----- In the given example, Lucy can attend the events with intervals [1, 2] and [3, 5] to maximize the number of non-overlapping events (total of 2 events).","solution":"def max_non_overlapping_events(events): # Sort events by their end time events.sort(key=lambda x: x[1]) max_events = 0 last_end_time = -1 for start, end in events: if start > last_end_time: max_events += 1 last_end_time = end return max_events"},{"question":"You are given a list of strings that represent mathematical expressions in prefix notation. Each expression is a valid prefix expression consisting of a series of operations and operands joined by spaces. The operations defined are addition \'+\', subtraction \'-\', multiplication \'*\', and division \'/\'. All operands are integers. Your task is to write a function that evaluates each prefix expression and returns the results as a list of integers. Assume that the input list contains at least one prefix expression. # Function Signature ```python def evaluate_prefix(expressions: List[str]) -> List[int]: ``` # Input - `expressions`: List of strings, with each string representing a prefix mathematical expression (1 <= len(expressions) <= 100). # Output - List of integers, with each integer representing the result of evaluating the corresponding prefix expression. # Example ```python expressions = [\\"+ 3 4\\", \\"- 10 * 2 3\\", \\"/ 15 3\\"] print(evaluate_prefix(expressions)) # Output: [7, 4, 5] ``` # Constraints - Each prefix expression is valid and consists only of the operations \'+\', \'-\', \'*\', \'/\', and integers. - At least one prefix expression is guaranteed to be provided. - The input list will contain at most 100 expressions. # Notes - Use integer division when dividing two integers. - Prefix evaluation order must be respected in the implementation.","solution":"def evaluate_prefix(expressions): def eval_prefix(expression): tokens = expression.split() stack = [] for token in reversed(tokens): if token in \'+-*/\': operand1 = stack.pop() operand2 = stack.pop() if token == \'+\': result = operand1 + operand2 elif token == \'-\': result = operand1 - operand2 elif token == \'*\': result = operand1 * operand2 elif token == \'/\': result = operand1 // operand2 # Integer division stack.append(result) else: stack.append(int(token)) return stack[0] return [eval_prefix(expr) for expr in expressions]"},{"question":"Create a function that takes an integer `n` as input and returns the sum of the prime factors of `n`. For example, given `n = 28`, the function should return `2` + `7` = `9`, because `28` can be factored into `2 * 2 * 7` and the distinct prime factors are `2` and `7`. Consider edge cases such as: - If `n` is less than or equal to 1, return 0 since there are no prime factors. - Ensure your solution handles larger values of `n` efficiently. Example Function Signature: ```python def sum_prime_factors(n: int) -> int: # your code here ``` For example: ```python print(sum_prime_factors(28)) # should return 9 ```","solution":"def sum_prime_factors(n: int) -> int: Returns the sum of the distinct prime factors of n. if n <= 1: return 0 prime_factors = set() divisor = 2 while n % divisor == 0: # handle smallest prime factor separately prime_factors.add(divisor) n //= divisor divisor = 3 while n != 1 and divisor * divisor <= n: while n % divisor == 0: prime_factors.add(divisor) n //= divisor divisor += 2 if n > 1: # This means n itself is a prime number prime_factors.add(n) return sum(prime_factors)"},{"question":"You are given an array of integers and a positive integer `k`. Your task is to determine if the array contains a contiguous subarray of length at least 2 that sums up to a multiple of `k`. In other words, there exists a subarray `[nums[i], nums[i+1], ..., nums[j]]` with `j - i >= 1` such that `(nums[i] + nums[i+1] + ... + nums[j]) % k == 0`. Write a function `check_subarray_sum(nums, k)` that takes in the array of integers `nums` and the integer `k`, and returns `True` if such a subarray exists, and `False` otherwise. # Example: ```python print(check_subarray_sum([23, 2, 4, 6, 7], 6)) # Output: True # Explanation: Because [2, 4] is a contiguous subarray of length 2 and sums to 6, which is a multiple of 6. print(check_subarray_sum([23, 2, 6, 4, 7], 13)) # Output: False # Explanation: There is no subarray with a sum that is a multiple of 13. ``` # Constraints: - The array length will be at most 10,000. - The array elements will be in the range of -10,000,000 to 10,000,000. - The integer `k` will be a positive integer in the range [1, 10,000]. # Note: - You must ensure your solution has better time complexity than O(n^2). - The function should return a boolean value.","solution":"def check_subarray_sum(nums, k): Determine if the array contains a contiguous subarray of length at least 2 that sums up to a multiple of k. # Dictionary to store remainder and the corresponding index rem_map = {0: -1} current_sum = 0 for i, num in enumerate(nums): current_sum += num rem = current_sum % k if rem in rem_map: if i - rem_map[rem] > 1: return True else: rem_map[rem] = i return False"},{"question":"Given a matrix with ( n times m ) cells, each containing a non-negative integer, you are to find a path from the top-left corner to the bottom-right corner of the matrix. The path can only move in two directions: right or down. Your objective is to minimize the sum of the values along the path. -----Input----- The first line contains two integers ( n ) and ( m ) ( ( 1 leq n, m leq 100 ) ) representing the number of rows and columns in the matrix respectively. Each of the next ( n ) lines contains ( m ) integers ( a_{ij} ) ( ( 0 leq a_{ij} leq 100 ) ) representing the values in the matrix. -----Output----- Print the minimized sum of the values along the path. -----Example----- Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Note: In the given example, the path is: [1, 3, 1, 1, 1]. Hence, the minimum path sum is 7.","solution":"def min_path_sum(matrix): Returns the minimized sum of the values along the path from the top-left to the bottom-right of the matrix. The path can only move in two directions: right and down. n = len(matrix) m = len(matrix[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = matrix[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[-1][-1]"},{"question":"Balloon Fest is a popular event in the town of Festville. There are N children attending the event, each with a certain number of balloons in their hands. Due to the wind, some balloons have burst, and each child now has fewer balloons left. The number of balloons initially with each child is denoted by an array B, and the number of burst balloons for each child is denoted by an array B\'. The organizers of the event want to calculate the total number of balloons that each child has left after the wind, which is represented by array L. Your task is to calculate the final number of balloons each child has by subtracting each element in B\' from the corresponding element in B. -----Input----- - The first line contains an integer T, denoting the number of test cases. The description of the T test cases follows. - For each test case: - The first line contains an integer N, the number of children. - The second line contains N space-separated integers representing the array B, the number of balloons each child initially had. - The third line contains N space-separated integers representing the array B\', the number of burst balloons for each child. -----Output----- - For each test case, output a single line containing N space-separated integers representing the array L, the number of balloons each child has left. -----Constraints----- - 1 ≤ T ≤ 105 - 1 ≤ N ≤ 104 - 0 ≤ Bi, Bi\' ≤ 109 - Sum of N over all test cases does not exceed 106 -----Example----- Input: 2 3 5 3 7 2 1 6 4 10 15 8 9 5 6 1 0 Output: 3 2 1 5 9 7 9 -----Explanation----- Example 1: For the first test case, the initial number of balloons for each child is [5, 3, 7] and the number of burst balloons for each child is [2, 1, 6]. Subtracting these, we get the final number of balloons as [3, 2, 1].","solution":"def balloons_after_wind(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] B = test_cases[i][1] B_prime = test_cases[i][2] L = [B[j] - B_prime[j] for j in range(N)] results.append(L) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0].strip()) index = 1 test_cases = [] for _ in range(T): N = int(lines[index].strip()) B = list(map(int, lines[index + 1].strip().split())) B_prime = list(map(int, lines[index + 2].strip().split())) test_cases.append((N, B, B_prime)) index += 3 return T, test_cases def format_output(result): output_lines = [] for res in result: output_lines.append(\' \'.join(map(str, res))) return \'n\'.join(output_lines)"},{"question":"A common task in text processing is to count the frequency of each word in a given string. Write a function named `word_frequency` that takes a single string as input and returns a dictionary where the keys are words and the values are the number of times each word appears in the input string. For this problem, a word is defined as any sequence of non-space characters. Words should be treated case-insensitively, meaning \\"Hello\\" and \\"hello\\" should be considered the same word. The order of words in the dictionary can be arbitrary. For example, given the string \\"Hello world hello\\", the function should return: ```python { \'hello\': 2, \'world\': 1 } ``` You may assume that the input string only contains alphabetic characters and spaces.","solution":"def word_frequency(s): Returns a dictionary with the frequency of each word in the input string. words = s.lower().split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Define a function named `string_permutations`/`StringPermutations` that takes a non-empty string `s` and returns an array of all the unique permutations of the characters in the string, sorted in lexicographical order. Example: ```python string_permutations(\'abc\'); # should return [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] string_permutations(\'aab\'); # should return [\'aab\', \'aba\', \'baa\'] ```","solution":"from itertools import permutations def string_permutations(s): Returns all the unique permutations of the characters in the string sorted in lexicographical order. perms = sorted(set(permutations(s))) return [\'\'.join(p) for p in perms]"},{"question":"Nikita and Alex love games, and they recently started playing a game with arrays and integers. One day, while playing, they stumbled upon an interesting challenge and decided to ask for your help to solve it. The challenge involves an array of integers, and the goal is to determine whether it is possible to rearrange the elements of the array to form a strictly increasing sequence using a given number of swaps. In one swap, you can choose any two elements in the array and swap their positions. Can you help Nikita and Alex determine if it is possible to achieve the challenge? -----Input----- The first line contains a single integer t (1 leq t leq 10^5) — the number of test cases. Each test case consists of two lines. The first line of each test case contains two integers n (1 leq n leq 10^5), the size of the array, and k (0 leq k leq 10^5), the maximum number of swaps allowed. The second line of each test case contains n distinct integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print \\"Possible\\" if it is possible to rearrange the array into a strictly increasing sequence using at most k swaps. Otherwise, print \\"Impossible\\". -----Example----- Input 3 5 2 4 3 2 5 1 4 0 1 2 3 4 3 1 3 1 2 Output Impossible Possible Possible -----Note----- In the first test case, you need more than 2 swaps to arrange the array as [1, 2, 3, 4, 5], so the output is \\"Impossible\\". In the second test case, the array is already in increasing order, so no swaps are needed, and the output is \\"Possible\\". In the third test case, you can swap the positions of 3 and 1, making the array [1, 3, 2], then swap 3 and 2, resulting in [1, 2, 3], which is strictly increasing. Since you used at most 1 swap, the output is \\"Possible\\".","solution":"def can_form_strictly_increasing_sequence(n, k, arr): Check if it is possible to rearrange the elements of the array to form a strictly increasing sequence using at most k swaps. swaps_needed = sum(1 for i in range(1, n) if arr[i] < arr[i - 1]) return \\"Possible\\" if swaps_needed <= k else \\"Impossible\\" def process_test_cases(t, test_cases): results = [] for n, k, arr in test_cases: result = can_form_strictly_increasing_sequence(n, k, arr) results.append(result) return results # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() index = 0 t = int(data[index]) index += 1 test_cases = [] for _ in range(t): n = int(data[index]) k = int(data[index + 1]) arr = list(map(int, data[index + 2 : index + 2 + n])) index += 2 + n test_cases.append((n, k, arr)) results = process_test_cases(t, test_cases) for result in results: print(result)"},{"question":"In a city, there are m landmarks and n roads connecting them. Each landmark has a unique positive integer ID. The roads are bidirectional and each has a specific travel time associated with it. You are given the IDs of K landmarks that are considered special. A special landmark is defined as one that is of significant historical or cultural importance. Your task is to determine the shortest travel time required to visit all the given special landmarks starting from any one of them. You can visit the special landmarks in any order, but you must start and end at one of the special landmarks. Input: The first line of input contains two integers, m and n, the number of landmarks and roads respectively. The next n lines each contain three integers u, v, and t, representing a road between landmarks u and v with travel time t. The next line contains an integer K, the number of special landmarks. The following line contains K integers, the IDs of the special landmarks. Output: Output a single integer, the shortest travel time required to visit all special landmarks starting and ending at any one special landmark. Example: Input: 5 7 1 2 3 1 3 1 1 4 6 2 3 1 2 5 2 3 5 5 4 5 2 3 1 3 5 Output: 8","solution":"import heapq from itertools import permutations def dijkstra(graph, start): Returns the shortest distance from start to all other nodes using Dijkstra\'s algorithm. min_heap = [(0, start)] # (distance, vertex) distances = {node: float(\'inf\') for node in graph} distances[start] = 0 while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return distances def shortest_travel_time(m, n, roads, K, special_landmarks): graph = {i: [] for i in range(1, m + 1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # Compute shortest paths from each special landmark sp_distances = {} for landmark in special_landmarks: sp_distances[landmark] = dijkstra(graph, landmark) # Generate all permutations of visiting special landmarks shortest_time = float(\'inf\') for perm in permutations(special_landmarks): current_time = 0 for i in range(len(perm) - 1): current_time += sp_distances[perm[i]][perm[i+1]] current_time += sp_distances[perm[-1]][perm[0]] # Return to the start shortest_time = min(shortest_time, current_time) return shortest_time"},{"question":"You are given a string `s` of lowercase English letters. Your task is to find the first non-repeating character in the string and return its index. If it does not exist, return -1. -----Input:----- The first line contains a single integer `t` (1 ≤ t ≤ 1000) — the number of test cases. Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 10^5) — the string in which you need to find the first non-repeating character. -----Output:----- For each test case, print the index of the first non-repeating character, or -1 if no such character exists. Indices are 0-based. -----Sample Input:----- 3 leetcode loveleetcode aabb -----Sample Output:----- 0 2 -1","solution":"def first_non_repeating_character_index(s): Returns the index of the first non-repeating character in the string s. If no such character exists, returns -1. from collections import Counter count = Counter(s) for idx, char in enumerate(s): if count[char] == 1: return idx return -1 def process_test_cases(test_cases): Processes a list of test cases, each containing a string, and returns a list with the indices of the first non-repeating character for each string. results = [] for case in test_cases: results.append(first_non_repeating_character_index(case)) return results"},{"question":"You are tasked with helping Alice and Bob with another one of their games. This time, they decide to build a chain of transformations starting from a string `s` and ending with a string `t`. Alice and Bob can perform one of three operations on the string `s`: 1. **Insert:** Insert a character \'0\' or \'1\' at any position in the string `s`. 2. **Delete:** Delete any single character from the string `s`. 3. **Swap:** Swap any two adjacent characters in the string `s`. You need to determine the minimum number of operations required to transform the string `s` into the string `t`. -----Input----- The first line contains the string `s` (1 ≤ |s| ≤ 100). The second line contains the string `t` (1 ≤ |t| ≤ 100). Both strings contain only the characters \'0\' and \'1\'. Here |x| denotes the length of the string `x`. -----Output----- Print an integer representing the minimum number of operations required to transform `s` into `t`. -----Examples----- Input 010 110 Output 1 Input 00101 101 Output 2 -----Note----- In the first sample, you can transform the string `010` to `110` by performing one Insert operation: Insert \'1\' at the second position in `010` → `110`. In the second sample, the steps are as follows: Delete the second character \'0\' in `00101` → `0101` Delete the first character \'0\' in `0101` → `101` Hence, minimum number of operations required are 2.","solution":"def min_operations(s, t): m, n = len(s), len(t) # Create a DP table to store results of subproblems dp = [[0 for x in range(n + 1)] for x in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, the only option is to insert all characters of second string if i == 0: dp[i][j] = j # Insert all characters of t # If second string is empty, the only option is to delete all characters of first string elif j == 0: dp[i][j] = i # Delete all characters of s # If last characters are the same, ignore the last char and recur for the remaining string elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"You are given a string `str`. Return the length of the longest substring without repeating characters. For example: ``` longest_unique_substring(\\"abcabcbb\\") = 3, because the longest substring without repeating characters is \\"abc\\". longest_unique_substring(\\"bbbbb\\") = 1, because the longest substring without repeating characters is \\"b\\". longest_unique_substring(\\"pwwkew\\") = 3, because the longest substring without repeating characters is \\"wke\\". longest_unique_substring(\\"abcdef\\") = 6, because the longest substring without repeating characters is \\"abcdef\\". ``` More examples in the test cases. Good luck! Please also try [Longest Palindromic Substring](https://www.codewars.com/kata/5a37827b75819d68be00012c)","solution":"def longest_unique_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"A company is organizing a competition in which participants must solve a number of problems within a given time limit. The company wants to keep track of each participant\'s performance and identify how many problems they solved within the time limit. Each participant has unique information about the number of problems they attempted and the time taken for each problem, given in minutes. Your task is to determine how many problems each participant solved within the allotted time and print the count for each participant. -----Input:----- - The first line contains an integer T, the number of participants. - The next 2 times T lines contain: - An integer N, the number of problems attempted by the participant. - An integer L, the time limit in minutes. - N space-separated integers representing the time taken for each problem. -----Output:----- Print T lines each with a single integer, representing the number of problems solved within the time limit for each participant. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 100 - 1 leq L leq 100 - 1 leq Time taken for each problem leq 100 -----Sample Input:----- 2 5 10 2 8 3 7 2 3 15 5 12 8 -----Sample Output:----- 5 3 -----EXPLANATION:----- For the first participant: - Time limit: 10 minutes - Times: [2, 8, 3, 7, 2] - All times are ≤ 10, so all 5 problems are solved within the limit. For the second participant: - Time limit: 15 minutes - Times: [5, 12, 8] - All times are ≤ 15, so all 3 problems are solved within the limit.","solution":"def problems_solved_within_limit(T, data): Determines the number of problems each participant solved within the time limit. :param T: An integer representing the number of participants. :param data: A list containing sublists for each participant. Each sublist contains [N, L, times] where N is the number of problems attempted, L is the time limit, and times is a list of times taken for each problem. :return: A list of integers where each integer is the number of problems solved within the time limit for each participant. results = [] for i in range(T): N, L, times = data[i] count = sum(1 for time in times if time <= L) results.append(count) return results"},{"question":"Write a function that receives a list of integers and returns the majority element. The majority element is the element that appears more than half of the size of the list. You can assume that the list always contains a majority element. If there is no majority element, the function should return `None`. **Input**: A list of integers `nums`. **Output**: The majority element in `nums`. # Example ```python Input: [3, 3, 4, 2, 4, 4, 2, 4, 4] Output: 4 Input: [2, 2, 1, 1, 1, 2, 2] Output: 2 ``` **Constraints**: - The length of the input list (n) is between 1 and 10^5. - The elements of the list are between -10^9 and 10^9.","solution":"def majority_element(nums): Finds and returns the majority element in the list of integers nums. The majority element is the element that appears more than half the time in the list. Assumes that the list always contains a majority element. Args: nums (list of int): List of integers. Returns: int: The majority element. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"Complete the function ```fibonacciSum``` to calculate the sum of all Fibonacci numbers that are less than the given ```n```. The Fibonacci series is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. If ```n``` is not a positive integer, return ```false```. Example: ```python fibonacciSum(10) # returns 20 (0, 1, 1, 2, 3, 5, 8 -> 0 + 1 + 1 + 2 + 3 + 5 + 8 = 20) fibonacciSum(20) # returns 33 (0, 1, 1, 2, 3, 5, 8, 13 -> 0 + 1 + 1 + 2 + 3 + 5 + 8 + 13 = 33) fibonacciSum(1) # returns 0 (0 is less than 1 but 1 is not less than 1) fibonacciSum(\\"five\\") # returns false fibonacciSum(-5) # returns false ```","solution":"def fibonacciSum(n): Calculate the sum of all Fibonacci numbers that are less than the given n. Parameters: n (int): The upper bound value. Returns: int/bool: The sum of all Fibonacci numbers that are less than n, or False if n is not a positive integer. if not isinstance(n, int) or n <= 0: return False a, b = 0, 1 fib_sum = 0 while a < n: fib_sum += a a, b = b, a + b return fib_sum"},{"question":"You are given a list of non-negative integers, `nums`, which are arranged in ascending order. The task is to remove duplicates in-place such that each unique element appears only once. The function should modify the list in-place with the condition that the relative order of the elements remains unchanged, and then return the length of the list after removing the duplicates. For example: ```python class Solution: def removeDuplicates(self, nums: List[int]) -> int: # Implement the method here # Example: nums = [0,0,1,1,1,2,2,3,3,4] result = Solution().removeDuplicates(nums) print(result) # Output: 5 print(nums) # Output: [0, 1, 2, 3, 4, _, _, _, _, _] ``` **Input/Output:** - Input: A list of non-negative integers `nums` sorted in non-decreasing order. - Output: The length of the list after removing duplicates. **Note:** - Do not return a new list. You must do this by modifying the input list in-place with O(1) extra memory. - It is allowed to truncate the remaining part of the list that exceeds the returned length. Example 1: ```python Input: nums = [1,1,2] Output: 2, nums = [1, 2, _] ``` Example 2: ```python Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5, nums = [0, 1, 2, 3, 4, _, _, _, _, _] ```","solution":"from typing import List class Solution: def removeDuplicates(self, nums: List[int]) -> int: Remove duplicates from sorted list of integers in-place. Returns the length of the list after removing duplicates. if not nums: return 0 # Initialize the position to place the next unique element place_index = 1 # Iterate through the sorted list starting from the second element for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[place_index] = nums[i] place_index += 1 return place_index"},{"question":"Write a function that takes an array of integers and returns a new array containing only the even numbers from the original array, in the same order. If there are no even numbers in the input array, return an empty array. Ensure the function handles an array of any length, including an empty array.","solution":"def filter_even_numbers(nums): Returns a new list containing only the even numbers from the input list. return [num for num in nums if num % 2 == 0]"},{"question":"Mara is an avid gardener and recently, she started working on her dream garden layout. Her garden consists of a rectangular grid with dimensions n times m. Each cell in the grid can either have a flower (represented as \'F\') or be empty (represented as \'.\'). Mara wants to ensure that her garden looks visually appealing, so she has come up with a rule: No two \'F\' (flowers) can be placed in the same row or the same column. Can you help Mara determine the maximum number of flowers she can place in her garden following this rule? -----Input----- The first line contains two integers n and m (1 le n, m le 2 cdot 10^5) representing the dimensions of the garden grid. The next n lines contain m characters each, representing the initial state of the garden grid. Each character is either \'F\' (for a flower) or \'.\' (for an empty cell). -----Output----- Print a single integer representing the maximum number of flowers Mara can place in the garden according to the given rule. -----Examples----- Input 2 3 ... .F. Output 2 Input 4 4 .... ..F. .... .... Output 4 Input 5 5 F.... ....F ..... ..... ..... Output 5 -----Note----- In the first example, Mara can place two flowers in the first row and the third column as follows: ``` F.. .FF ``` In the second example, Mara can place flowers in four different positions: (0, 0), (1, 2), (2, 1), (3, 3), ensuring no two flowers share the same row or column. In the third example, Mara can place flowers in each row and each column since some cells are already occupied by flowers in non-conflicting positions: ``` F.... ....F ..F.. ..... ....F ```","solution":"def max_flowers(n, m, garden): Returns the maximum number of flowers that can be placed in the garden such that no two flowers are in the same row or column. row_occupied = set() col_occupied = set() # Mark already occupied rows and columns for r in range(n): for c in range(m): if garden[r][c] == \'F\': row_occupied.add(r) col_occupied.add(c) # Maximum flowers is limited by the minimum of available rows and columns max_flowers_placement = min(n - len(row_occupied), m - len(col_occupied)) # Include already placed flowers total_flowers = len(row_occupied) + max_flowers_placement return total_flowers"},{"question":"You are given a set of n points in a 2D plane. Each point is represented by (x, y) coordinates. Your task is to find the maximum number of points that lie on the same straight line. Example 1: Input: [[1,1], [2,2], [3,3]] Output: 3 Explanation: All three points lie on the same line. Example 2: Input: [[1,1], [3,2], [5,3], [4,1], [2,3], [1,4]] Output: 4 Explanation: The maximum number of points that lie on the same straight line is 4. Note: The points are represented by integer coordinates. 1 <= n <= 300 The coordinates range from -10^4 to 10^4.","solution":"from collections import defaultdict from math import gcd def max_points_on_line(points): Returns the maximum number of points that lie on the same straight line. def max_points_from_point(i): lines = defaultdict(int) duplicates = 1 vertical = 0 result = 0 for j in range(len(points)): if i != j: if points[i] == points[j]: duplicates += 1 elif points[i][0] == points[j][0]: vertical += 1 else: dx = points[j][0] - points[i][0] dy = points[j][1] - points[i][1] g = gcd(dx, dy) slope = (dy // g, dx // g) lines[slope] += 1 result = max(result, lines[slope]) return max(result, vertical) + duplicates n = len(points) if n < 3: return n result = 0 for i in range(n): result = max(result, max_points_from_point(i)) return result"},{"question":"A city is represented as a grid of size m x n, where each cell of the grid contains an integer representing the level of elevation at that point. Water can flow from a cell to its neighboring cells in the north, south, east, and west directions if the elevation of the destination cell is less than or equal to the elevation of the current cell. There are two water flow sources: one from the top and left edges of the grid, and the other from the bottom and right edges. Water can flow both into and out of cells located on these edges. Write a function to determine the number of cells from which water can flow to both edges of the grid. Example 1: Input: grid = [ [1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4] ] Output: 7 Explanation: The cells from which water can flow to both the top/left and bottom/right edges are marked as follows: [ [1, 1, 1, 1, 0], [1, 1, 1, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0] ] There are 7 such cells. Example 2: Input: grid = [ [1] ] Output: 1 Explanation: Water can flow from the only cell to both the top/left and bottom/right edges. Constraints: - m == grid.length - n == grid[0].length - 1 <= m, n <= 200 - 0 <= grid[i][j] <= 10^6","solution":"def water_flow(grid): Returns the number of cells from which water can flow to both the top/left and bottom/right edges. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) def dfs(x, y, ocean_reachable): ocean_reachable.add((x, y)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in ocean_reachable and grid[nx][ny] >= grid[x][y]: dfs(nx, ny, ocean_reachable) top_left_reachable = set() bottom_right_reachable = set() # Flow from top and left edges for i in range(m): dfs(i, 0, top_left_reachable) for j in range(n): dfs(0, j, top_left_reachable) # Flow from bottom and right edges for i in range(m): dfs(i, n - 1, bottom_right_reachable) for j in range(n): dfs(m - 1, j, bottom_right_reachable) # Intersection of reachable from both sources result = top_left_reachable & bottom_right_reachable return len(result)"},{"question":"Binary Tree Level Order Traversal Given a binary tree, return the level order traversal of its nodes\' values. (i.e., from left to right, level by level). For example: Given binary tree `[3, 9, 20, None, None, 15, 7]`, ``` 3 / 9 20 / 15 7 ``` return its level order traversal as: ``` [ [3], [9, 20], [15, 7] ] ``` Examples # Example 1 ```python # Input root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) # Output level_order(root) # [ # [3], # [9, 20], # [15, 7] # ] ``` # Example 2 ```python # Input root = TreeNode(1) # Output level_order(root) # [ # [1] # ] ``` # Additional Example 3 ```python # Input root = None # Output level_order(root) # [] ``` Constraints - The number of nodes in the tree is in the range `[0, 2000]`. - `-1000 <= Node.val <= 1000`","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order(root): Perform level order traversal on a binary tree. :param root: TreeNode, the root of the binary tree :return: List[List[int]], a list of lists where each list contains the values of the nodes at each level if not root: return [] result = [] queue = deque([root]) while queue: level = [] level_length = len(queue) for i in range(level_length): node = queue.popleft() level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level) return result"},{"question":"You are given a string of parentheses and letters. Your task is to determine if the parentheses are balanced and the string can be transformed into a valid sequence of balanced parentheses by possibly performing some rearrangements. The letters in the string can be ignored as they do not affect the balance of parentheses. A sequence of parentheses is considered balanced if: 1. Each opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. The pairs of parentheses are properly nested. Note that you can only rearrange the parentheses; you cannot change their positions with letters. -----Input----- - The first line contains an integer t (1 leq t leq 100), the number of test cases. - Each of the next t lines contains a string s consisting of lowercase English letters and parentheses \'(\', \')\'. The length of each string is at most 100. -----Output----- For each test case, output \\"YES\\" if the string can be rearranged to form a valid sequence of balanced parentheses. Otherwise, output \\"NO\\". -----Example----- Input 3 a(b)c)d( (abc)def (g(h))i)j( Output NO YES NO -----Note----- In the first test case, there are more closing parentheses than opening ones, so it cannot be rearranged to form a valid sequence. In the second test case, the parentheses are already balanced. In the third test case, although there are equal numbers of opening and closing parentheses, the closing parenthesis appears before its corresponding opening one, so it cannot be rearranged to form a valid sequence.","solution":"def can_be_balanced(t, test_cases): Determines if the parentheses in each string can be rearranged to form a valid balanced sequence. Parameters: t (int): Number of test cases test_cases (list of str): List of strings, each containing parentheses and letters Returns: list of str: List of results for each test case, either \\"YES\\" or \\"NO\\" results = [] for s in test_cases: open_count = s.count(\'(\') close_count = s.count(\')\') if open_count != close_count: results.append(\\"NO\\") else: balance = 0 valid = True for ch in s: if ch == \'(\': balance += 1 elif ch == \')\': balance -= 1 if balance < 0: valid = False break if valid: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You need to implement a function \\"rotateAndSum\\" that takes in two arguments: an integer array and an integer k. The function should rotate the array to the right by k steps and return the sum of the rotated array. ```Example: Input - [1, 2, 3, 4, 5] and 2 Output - 20 Explanation: Rotated array is [4, 5, 1, 2, 3]. Sum is 4+5+1+2+3 = 15 Input - [10, 20, 30] and 1 Output - 60 Explanation: Rotated array is [30, 10, 20]. Sum is 30+10+20 = 60 ```","solution":"def rotateAndSum(arr, k): Rotates the array to the right by k steps and returns the sum of the rotated array. if not arr: return 0 k = k % len(arr) # if k is greater than the array length rotated_array = arr[-k:] + arr[:-k] return sum(rotated_array)"},{"question":"Write a function that accepts a list of integers and returns the highest product of any three distinct integers from the list. Here is an example code: ```python def highest_product_of_three(lst): if len(lst) < 3: raise ValueError(\\"List should contain at least 3 numbers.\\") lst.sort() return max(lst[0] * lst[1] * lst[-1], lst[-1] * lst[-2] * lst[-3]) ``` Here\'s an example of how the function works: ```python print(highest_product_of_three([1, 10, 2, 6, 5, 3])) # Output: 300 (10*6*5) print(highest_product_of_three([-10, -10, 1, 3, 2])) # Output: 300 (-10*-10*3) ``` Inputs are guaranteed to be a list of integers and the list will have at least three integers.","solution":"def highest_product_of_three(lst): Returns the highest product of any three distinct integers from the list. if len(lst) < 3: raise ValueError(\\"List should contain at least 3 numbers.\\") lst.sort() return max(lst[0] * lst[1] * lst[-1], lst[-1] * lst[-2] * lst[-3])"},{"question":"Given a list of integers, an **\\"incremental pair\\"** is defined as a pair of consecutive integers in which the second integer is exactly one greater than the first. Write a function `incremental_pairs` that accepts a list of integers and returns a list of all such pairs found in the input list. Function signature: ```python def incremental_pairs(lst: list) -> list: ``` Input - `lst`: A list of integers. Output - Returns a list of lists, where each inner list is an incremental pair. Examples: ```python incremental_pairs([1, 2, 3, 5, 6, 7, 8]) == [[1, 2], [2, 3], [5, 6], [6, 7], [7, 8]] incremental_pairs([10, 11, 13, 14, 16]) == [[10, 11], [13, 14]] incremental_pairs([4, 4, 4, 4]) == [] incremental_pairs([1, 3, 5, 7]) == [] ``` Notes: - An empty list or a list with only one element should return an empty result. - The input list may contain duplicate consecutive elements, consecutive pairs should be found only where the second element is exactly one greater than the first.","solution":"def incremental_pairs(lst: list) -> list: Given a list of integers, returns a list of incremental pairs. Each pair consists of two consecutive integers where the second integer is exactly one greater than the first. pairs = [] for i in range(len(lst) - 1): if lst[i+1] == lst[i] + 1: pairs.append([lst[i], lst[i+1]]) return pairs"},{"question":"Task Yash loves playing with strings and recently he has challenged his friend Rahul with a new game involving strings and queries. The game goes as follows: Given a string S and Q queries, each query consists of two integers L and R. For each query, Rahul has to determine whether the substring from index L to R (inclusive) is a palindrome or not. Rahul finds this task quite hard and has asked for your help. Write a function to efficiently handle these queries. -----Input----- - The first line contains the string S consisting of lowercase English letters. - The second line contains an integer Q, the number of queries. - The next Q lines each contain two integers L and R denoting the indices of the substring to be checked (0-based indexing). -----Output----- - For each query, print \\"YES\\" if the substring is a palindrome, otherwise print \\"NO\\". -----Constraints----- - 1 ≤ |S| ≤ 100,000 - 1 ≤ Q ≤ 100,000 - 0 ≤ L ≤ R < |S| -----Example----- Input: abacaba 4 0 6 0 2 2 4 1 5 Output: YES NO YES YES","solution":"def is_palindrome_queries(S, queries): Determines if the substrings for given queries are palindromes. Parameters: S (str): The input string consisting of lowercase English letters. queries (list of tuples): A list of tuples, where each tuple contains integers L and R representing the substring indices. Returns: list of str: A list of \\"YES\\" or \\"NO\\" for each query indicating if the substring is a palindrome or not. results = [] for L, R in queries: substring = S[L:R+1] if substring == substring[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: S = \\"abacaba\\" queries = [(0, 6), (0, 2), (2, 4), (1, 5)] print(is_palindrome_queries(S, queries)) # Output: [\'YES\', \'NO\', \'YES\', \'YES\']"},{"question":"Given an integer array nums, return the largest number you can form by concatenating its elements. The result should be in string format. Example 1: Input: [10, 2] Output: \\"210\\" Explanation: Concatenating all the numbers in the array in different orders will yield: \\"102\\", \\"210\\". The largest number is \\"210\\". Example 2: Input: [3, 30, 34, 5, 9] Output: \\"9534330\\" Explanation: Concatenating all the numbers in the array in different orders will yield the largest number \\"9534330\\". Note: The result may be very large, so you need to return a string instead of an integer. Follow up: Can you implement the solution with a comparison-based sort algorithm in O(n log n) time complexity?","solution":"from functools import cmp_to_key def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 def largest_number(nums): Returns the largest number that can be formed by concatenating the elements of nums. # Convert numbers to strings for comparison str_nums = list(map(str, nums)) # Sort numbers based on custom comparator str_nums.sort(key=cmp_to_key(compare)) # Concatenate sorted numbers result = \'\'.join(str_nums) # Remove leading zeros return result if result[0] != \'0\' else \'0\'"},{"question":"Task Given a string and a set of delimiter characters, your objective is to write a function that splits the string into substrings at each occurrence of any of the delimiter characters and returns the substrings in the order in which they appear in the original string. # Input - A string `s` containing alphanumeric characters and delimiters. - A set of delimiter characters `delimiters` (can include punctuation, spaces, etc.). # Output - A list (or array) of substrings obtained by splitting the input string `s` using the provided set of delimiter characters. # Constraints - The delimiters set will contain at least one character. - The input string `s` will have a length between 1 and 1000. - The substrings between delimiters should not contain any delimiter characters. # Example For the input string `\\"hello,world:here\\"` and delimiters `{\',\',\':\'}`, the output should be `[\\"hello\\", \\"world\\", \\"here\\"]`. For the input string `\\"I love coding! Do you?\\"` and delimiters `{\' \', \'!\', \'?\'}`, the output should be `[\\"I\\", \\"love\\", \\"coding\\", \\"Do\\", \\"you\\"]`. # Function Signature The function should be named `split_string` and have the following signature: ```python def split_string(s: str, delimiters: set) -> list: # Your code here ``` # Notes - The delimiter characters themselves should not appear in the output list. - Consecutive delimiter characters should be treated as one and should not result in empty strings in the output. - If there are no non-delimiter characters between delimiters, skip the empty substrings in the output.","solution":"def split_string(s: str, delimiters: set) -> list: import re # Create a regular expression pattern from the delimiters pattern = \'|\'.join(map(re.escape, delimiters)) # Split the string using the pattern and filter out empty strings return [substring for substring in re.split(pattern, s) if substring]"},{"question":"In a zoo, there are `n` cages arranged in a line, each containing a different species of animal. You have been tasked with determining the maximum possible number of pairs of adjacent animals that can be of the same species after performing the following operation: - You can swap any two animals, but only once. Write a function: ```python def max_adjacent_pairs(animals: List[int]) -> int: ``` Where `animals` is a list of integers representing different species of animals in each cage. The function should return the maximum number of pairs of adjacent animals that can be of the same species after at most one swap. For example: ```python max_adjacent_pairs([1, 2, 3, 3, 2, 1]) ``` The answer is 3 because by swapping the first 1 and the last 1, the list becomes `[1, 2, 3, 3, 2, 1]`, creating 3 pairs of adjacent animals of the same species: (1, 1), (3, 3), and (2, 2). Another example: ```python max_adjacent_pairs([1, 1, 1, 1]) ``` The answer is 3 because no swap is needed to achieve the maximum number of adjacent pairs: (1, 1), (1, 1), (1, 1).","solution":"from typing import List def count_adjacent_pairs(animals: List[int]) -> int: count = 0 for i in range(1, len(animals)): if animals[i] == animals[i - 1]: count += 1 return count def max_adjacent_pairs(animals: List[int]) -> int: n = len(animals) if n < 2: return 0 # Calculate current number of adjacent pairs current_pairs = count_adjacent_pairs(animals) max_pairs = current_pairs # Try swapping every pair of different animals and count pairs for i in range(n): for j in range(i + 1, n): if animals[i] != animals[j]: # Swap animals[i] and animals[j] animals[i], animals[j] = animals[j], animals[i] max_pairs = max(max_pairs, count_adjacent_pairs(animals)) # Swap them back to check next pairs animals[i], animals[j] = animals[j], animals[i] return max_pairs"},{"question":"Alice is given a series of tasks represented by an array of integers where each element denotes the difficulty level of a task. She wants to complete the tasks in such a way that the sum of the difficulties of the tasks she chooses is maximized, but no two consecutive tasks can be chosen. Help Alice determine this maximum sum. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of elements in the array. - The second line contains N space-separated integers D1, D2, ..., DN representing the difficulty levels of the tasks. -----Output----- - For each test case, output a single line containing one integer - the maximum sum of difficulties that Alice can achieve without choosing two consecutive tasks. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ Di ≤ 1000 -----Subtasks-----Subtask 1 (10 points) - 1 ≤ N ≤ 20Subtask 2 (40 points) - 1 ≤ N ≤ 300Subtask 3 (50 points) - Original constraints -----Example----- Input: 2 4 3 2 7 10 5 3 2 5 10 7 Output: 13 15 -----Explanation----- Example case 1. Consider the selections: picking tasks 1 and 4 gives 3 + 10 = 13. Example case 2. Consider the selections: picking tasks 1, 3, and 5 gives 3 + 5 + 7 = 15.","solution":"def max_sum_no_consecutive(arr): Returns the maximum sum of elements in the array where no two elements are consecutive. n = len(arr) if n == 0: return 0 if n == 1: return arr[0] incl = arr[0] excl = 0 for i in range(1, n): new_excl = max(incl, excl) incl = excl + arr[i] excl = new_excl return max(incl, excl) def process_tasks(T, cases): results = [] for case in cases: _, array = case results.append(max_sum_no_consecutive(array)) return results"},{"question":"You are given a string that consists of only lowercase letters. You can perform the following operations: 1. Choose any character in the string and move it to the beginning. 2. Choose any character in the string and move it to the end. Your goal is to find the lexicographically smallest string that can be obtained after performing the above operations any number of times. Note that you cannot rearrange the string completely but you are allowed to move any character to either end of the string. Example: Input: cba Output: acb Explanation: Moves: 1. Move \'a\' to the beginning -> acb -----Input:----- - A single line string containing lowercase letters. -----Output:----- - A single line string which is the smallest lexicographical order possible. -----Constraints----- - 1 leq length of string leq 10^5 -----Sample Input:----- cba -----Sample Output:----- acb","solution":"def lexicographically_smallest_string(s: str) -> str: Returns the lexicographically smallest string possible by moving characters to the beginning or end. # find the lexicographically smallest character in the string min_char = min(s) # find the first occurrence of the smallest character min_index = s.index(min_char) # move the smallest character to the front and return the result return min_char + s[:min_index] + s[min_index + 1:] # Example usage input_str = \\"cba\\" print(lexicographically_smallest_string(input_str)) # Output: \\"acb\\""},{"question":"There\'s a game played by Alice and Bob involving an `m x m` grid. Initially, all cells in the grid contain the value `0`. Alice moves first and places the value `1` in any cell of the grid. After Alice\'s move, Bob places the value `2` in any remaining cell of the grid. They continue to alternate placing `1` and `2` respectively, with Alice always starting. Given an integer `m` (the size of the grid) and an order of their moves as a list of tuples `moves` where each tuple `(x, y)` represents the row and column index of the cell where either Alice or Bob places their values, write a function `getGridState(n, moves)` that returns the final state of the grid after all moves are completed. ```python def getGridState(m: int, moves: List[Tuple[int, int]]) -> List[List[int]]: pass # Example print(getGridState(3, [(0,0),(0,1),(1,1),(2,2)])) # Output: [[1, 2, 0], [0, 1, 0], [0, 0, 2]] ```","solution":"from typing import List, Tuple def getGridState(m: int, moves: List[Tuple[int, int]]) -> List[List[int]]: Returns the final state of the grid after completing all moves. :param m: Size of the grid. :param moves: List of tuples representing the moves. :return: Final state of the grid. grid = [[0] * m for _ in range(m)] for i, (x, y) in enumerate(moves): if i % 2 == 0: grid[x][y] = 1 else: grid[x][y] = 2 return grid"},{"question":"You are given a string `s` that consists of only \'(\' and \')\' characters. Your task is to find the length of the longest balanced substring of `s`. A balanced substring is defined as a substring that contains an equal number of \'(\' and \')\' characters and is correctly matched. Return the length of the longest balanced substring. Examples: Input: s = \\"(()))(()\\" Output: 4 Explanation: The longest balanced substring is \\"(()),\\" which is of length 4. Input: s = \\")()())\\" Output: 4 Explanation: The longest balanced substring is \\"()(),\\" which is of length 4. Input: s = \\"()(())\\" Output: 6 Explanation: The entire string is balanced, and its length is 6. Constraints: - 1 <= s.length <= 10^5 - s[i] is either \'(\' or \')\'","solution":"def longest_balanced_substring(s): Returns the length of the longest balanced substring. max_length = 0 stack = [-1] # Initialize stack with a base index for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if stack: max_length = max(max_length, i - stack[-1]) else: stack.append(i) return max_length"},{"question":"A company is managing a fleet of delivery trucks. Each truck is represented as an object with attributes for its identifier and the total distance it has traveled. The goal is to determine, for a given list of trucks, the identifier of the truck that has traveled the most distance. If there are multiple trucks with the same maximum distance, return the one with the smallest identifier. -----Input:----- - The first line will contain N, the number of trucks. - Each of the next N lines will contain two space-separated values: the identifier of the truck (a string) and the distance it has traveled (an integer). -----Output:----- - Output a single line containing the identifier of the truck that has traveled the most distance. If there are ties, output the identifier with the smallest value in lexicographical order. -----Constraints----- - 1 leq N leq 50 - The identifier is a lowercase string of length leq 10 - The distance is an integer 0 leq distance leq 100000 -----Sample Input:----- 3 truck1 540 truck2 700 truck3 540 -----Sample Output:----- truck2 -----Explanation:----- Truck2 has traveled the most distance (700). Although truck1 and truck3 have the same distance, truck2 is selected as it has a higher traveled distance.","solution":"def truck_with_max_distance(n, truck_data): Returns the identifier of the truck that has traveled the most distance. If there are ties, return the identifier with the smallest value in lexicographical order. max_distance = -1 max_truck_id = \\"\\" for truck in truck_data: truck_id, distance = truck distance = int(distance) if distance > max_distance or (distance == max_distance and truck_id < max_truck_id): max_distance = distance max_truck_id = truck_id return max_truck_id"},{"question":"=====Function Descriptions===== The NumPy module also comes with a number of built-in routines for linear algebra calculations. These can be found in the sub-module linalg. linalg.inv The linalg.inv tool computes the (multiplicative) inverse of a matrix. print numpy.linalg.inv([[1 , 2], [3, 4]]) # Output: [[-2. 1. ] # [ 1.5 -0.5]] linalg.solve The linalg.solve tool solves a linear matrix equation, or system of linear scalar equations. print numpy.linalg.solve([[3, 1], [1, 2]], [9, 8]) # Output: [ 2. 3.] linalg.norm The linalg.norm tool computes the matrix or vector norm. print numpy.linalg.norm([1, 2, 3]) # Output: 3.74165738677 =====Problem Statement===== You are given a non-singular square matrix M with dimensions NXN. Your task is to compute the inverse of matrix M. Round each element of the resulting matrix to 2 places after the decimal. =====Input Format===== The first line contains the integer N. The next N lines contain the space-separated elements of the matrix M. =====Output Format===== Print the inverse of matrix M. The output should contain N lines, each line containing N space-separated elements, where each element is rounded to 2 places after the decimal. Example: Input: 2 4 7 2 6 Output: 0.60 -0.70 -0.20 0.40","solution":"import numpy as np def compute_matrix_inverse(n, matrix): Computes the inverse of a given NxN matrix and rounds each element to 2 decimal places. Parameters: n (int): The dimension of the matrix (NxN) matrix (list of list of float): The NxN matrix Returns: list of list of float: The rounded inverse of the matrix matrix = np.array(matrix) inverse_matrix = np.linalg.inv(matrix) rounded_inverse = np.round(inverse_matrix, 2) return rounded_inverse.tolist() def format_inverse_matrix(matrix): Formats the matrix to the required output format where each element is space-separated and each row is printed in a new line. Parameters: matrix (list of list of float): The matrix to format and print Returns: None for row in matrix: print(\\" \\".join(map(str, row)))"},{"question":"Write a function that takes two arguments: a list of integers and an integer representing a threshold value. The function should return a new list containing only the elements from the original list that are greater than the threshold value, and this new list should be sorted in descending order. Please ensure that the function handles cases where the list is empty or where no elements meet the threshold condition. Examples Threshold: 10 Valid input and corresponding output: * [12, 5, 8, 19, 3, 10] -> [19, 12] * [4, 7, 9] -> [] * [15, 12, 25, 11, 10] -> [25, 15, 12, 11]","solution":"def filter_and_sort(lst, threshold): Returns a new list containing only the elements from lst that are greater than threshold, sorted in descending order. :param lst: List of integers :param threshold: Integer threshold :return: List of integers return sorted([x for x in lst if x > threshold], reverse=True)"},{"question":"Your task is to write a function called `formatDate` that converts dates from \\"DD/MM/YYYY\\" format to \\"Month Day, Year\\" format. Here, \\"Month\\" should be the full name of the month. For example: - \\"25/12/2021\\" should be converted to \\"December 25, 2021\\" - \\"01/01/2022\\" should be converted to \\"January 1, 2022\\" You can assume that the input date will always be a valid date in \\"DD/MM/YYYY\\" format. The names of the months should be in English. Write a function `formatDate(date: str) -> str` that performs this conversion. Example: Input: `\\"09/07/2020\\"` Output: `\\"July 9, 2020\\"`","solution":"from datetime import datetime def formatDate(date: str) -> str: Converts a date from \\"DD/MM/YYYY\\" format to \\"Month Day, Year\\" format. Args: date (str): A string representing a date in \\"DD/MM/YYYY\\" format. Returns: str: The date in \\"Month Day, Year\\" format. # Parse the input date string to a datetime object date_obj = datetime.strptime(date, \\"%d/%m/%Y\\") # Convert the datetime object to the required format formatted_date = date_obj.strftime(\\"%B %d, %Y\\").lstrip(\'0\').replace(\' 0\', \' \') return formatted_date"},{"question":"Write a function to generate all possible valid IP addresses from a given string of digits. A valid IP address consists of exactly four integers (each ranging from 0 to 255) separated by periods. The integers cannot have leading zeros. For example, \\"25525511135\\" can be interpreted as the IP addresses \\"255.255.11.135\\" and \\"255.255.111.35\\". Your function should return a list of all possible valid IP addresses that can be formed from the given string. If no valid IP addresses can be formed, return an empty list. Function Signature: ```python def generate_ip_addresses(s: str) -> List[str]: ``` # Constraints: - The input string `s` will contain only digits and have a length between 1 and 12. # Example: ```python generate_ip_addresses(\\"25525511135\\") # Returns [\\"255.255.11.135\\", \\"255.255.111.35\\"] generate_ip_addresses(\\"0000\\") # Returns [\\"0.0.0.0\\"] generate_ip_addresses(\\"1111\\") # Returns [\\"1.1.1.1\\"] generate_ip_addresses(\\"101023\\") # Returns [\\"1.0.10.23\\", \\"1.0.102.3\\", \\"10.1.0.23\\", \\"10.10.2.3\\", \\"101.0.2.3\\"] ```","solution":"from typing import List def is_valid(segment: str) -> bool: Check if the given string segment is a valid IP address segment. if len(segment) == 0 or len(segment) > 3: return False if segment[0] == \'0\' and len(segment) > 1: return False if int(segment) > 255: return False return True def generate_ip_addresses(s: str) -> List[str]: Generate all possible valid IP addresses from a given string. n = len(s) if n < 4 or n > 12: return [] valid_ips = [] for i in range(1, min(4, n - 2)): for j in range(i + 1, min(i + 4, n - 1)): for k in range(j + 1, min(j + 4, n)): s1, s2, s3, s4 = s[:i], s[i:j], s[j:k], s[k:] if is_valid(s1) and is_valid(s2) and is_valid(s3) and is_valid(s4): valid_ips.append(f\\"{s1}.{s2}.{s3}.{s4}\\") return valid_ips"},{"question":"Given a string `s` and a list of query ranges represented as `[start, end)` (half-open intervals), implement a function that returns a list of the longest palindromic substring lengths for each query range. A palindromic substring is a substring that reads the same backward as forwards. Write a function `longest_palindromic_substring_lengths(s: str, queries: List[List[int]]) -> List[int]` that takes a string `s` and a list of query ranges `queries`, and returns a list of integers representing the lengths of the longest palindromic substrings within each specified range. Example 1: Input: ``` s = \\"babad\\" queries = [[0, 3], [1, 4], [0, 5]] ``` Output: ``` [3, 3, 3] ``` Explanation: - Query range [0, 3) corresponds to the substring \\"bab\\", the longest palindromic substring is \\"bab\\" or \\"aba\\" (length 3). - Query range [1, 4) corresponds to the substring \\"aba\\", the longest palindromic substring is \\"aba\\" (length 3). - Query range [0, 5) corresponds to the substring \\"babad\\", the longest palindromic substring is \\"bab\\" or \\"aba\\" (length 3). Example 2: Input: ``` s = \\"cbbd\\" queries = [[0, 2], [1, 3], [0, 4]] ``` Output: ``` [1, 2, 2] ``` Explanation: - Query range [0, 2) corresponds to the substring \\"cb\\", the longest palindromic substring is \\"c\\" or \\"b\\" (length 1). - Query range [1, 3) corresponds to the substring \\"bb\\", the longest palindromic substring is \\"bb\\" (length 2). - Query range [0, 4) corresponds to the substring \\"cbbd\\", the longest palindromic substring is \\"bb\\" (length 2). Constraints: - 1 <= s.length <= 1000 - 1 <= len(queries) <= 100 - 0 <= start < end <= s.length","solution":"def longest_palindromic_substring_lengths(s, queries): Returns a list of the lengths of longest palindromic substrings within the specified ranges. def is_palindrome(sub): return sub == sub[::-1] def longest_palindrome_length(sub_s): n = len(sub_s) max_len = 1 for i in range(n): for j in range(i, n): if is_palindrome(sub_s[i:j+1]): max_len = max(max_len, j - i + 1) return max_len result = [] for start, end in queries: substring = s[start:end] result.append(longest_palindrome_length(substring)) return result"},{"question":"A factory produces different products each day, and each product needs to pass through a certain number of workstations before it is finished. The factory\'s workstations are connected by directed paths, and each path has a weight representing the time it takes for a product to move from one workstation to another. Given is a directed acyclic graph with N workstations numbered 1 to N and M paths numbered 1 to M. Each path has an integer weight representing the time taken to traverse that path. Your task is to determine the minimum time required to process any product that passes through the factory, starting from the initial station to the final station. You are required to implement a solution to find the minimum processing time from the initial station to the final station in this directed acyclic graph. -----Constraints----- - 2 leq N leq 100,000 - 1 leq M leq 500,000 - 1 leq u_i, v_i leq N - 1 leq w_i leq 10,000 - The graph is guaranteed to be acyclic. -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 w_1 vdots u_M v_M w_M -----Output----- Print a single integer: the minimum time required from the initial station (Vertex 1) to the final station (Vertex N). If there is no path from the initial to the final station, print -1. -----Sample Input----- 5 6 1 2 10 1 3 20 2 4 15 3 4 10 4 5 5 3 5 30 -----Sample Output----- 30 - We can find the minimum time from station 1 to station 5. - One possible path: 1 -> 3 -> 4 -> 5 with total time 20 + 10 + 5 = 35. - Another possible path: 1 -> 2 -> 4 -> 5 with total time 10 + 15 + 5 = 30. - Hence, the minimum time is 30.","solution":"import heapq from collections import defaultdict, deque def find_minimum_time(N, M, paths): # Create the graph as an adjacency list graph = defaultdict(list) for u, v, w in paths: graph[u].append((v, w)) # Topological sorting using Kahn\'s algorithm in_degree = [0] * (N + 1) for u in range(1, N + 1): for v, w in graph[u]: in_degree[v] += 1 zero_in_degree_queue = deque([u for u in range(1, N + 1) if in_degree[u] == 0]) topo_order = [] while zero_in_degree_queue: u = zero_in_degree_queue.popleft() topo_order.append(u) for v, w in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: zero_in_degree_queue.append(v) # If there is no valid topological order, it means we cannot sort the graph. if len(topo_order) != N: return -1 # Initialize distances with infinity, except for the first node distances = [float(\'inf\')] * (N + 1) distances[1] = 0 # Process nodes in topological order for u in topo_order: for v, w in graph[u]: if distances[u] != float(\'inf\') and distances[u] + w < distances[v]: distances[v] = distances[u] + w # Return the distance to the final node, or -1 if it\'s still infinity return distances[N] if distances[N] != float(\'inf\') else -1"},{"question":"Given a list of integers, where each integer occurs exactly twice except for one integer which occurs exactly once, find the integer which occurs only once. -----Input----- The first line contains a single integer N, the number of integers in the list (2 ≤ N ≤ 1000, and N is odd). The second line contains N space-separated integers, where each integer occurs twice except for one which occurs exactly once. -----Output----- Print the single integer that occurs only once. -----Constraints----- 1 <= integer in the list <= 1000 -----Example----- Input: 5 1 2 3 2 1 Output: 3 -----Explanation----- The integers 1 and 2 appear twice in the list, while the integer 3 appears only once. Hence, the output is 3.","solution":"def find_unique_integer(N, integers): Given a list of N integers where each integer occurs exactly twice except for one integer which occurs exactly once, find and return the integer which occurs only once. Parameters: - N: int - the number of integers in the list - integers: list of int - the list of N integers Returns: int - the integer which occurs exactly once unique_int = 0 for num in integers: unique_int ^= num return unique_int"},{"question":"You are given an unsorted array of integers. Write a function that returns the length of longest increasing subsequence (LIS) in the array. The LIS is a subsequence that is strictly increasing. A subsequence is derived from another array by deleting zero or more elements without changing the order of the remaining elements. Example 1: Input: [10, 9, 2, 5, 3, 7, 101, 18] Output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Example 2: Input: [0, 1, 0, 3, 2, 3] Output: 4 Explanation: The longest increasing subsequence is [0, 1, 2, 3], therefore the length is 4. Example 3: Input: [7, 7, 7, 7, 7, 7, 7] Output: 1 Explanation: The longest increasing subsequence is [7], therefore the length is 1. Note: - The length of the array will not exceed 2500. - The value of the elements in the array will be in the range [-10^4, 10^4].","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the given array of integers. if not nums: return 0 # Initialize an array to hold the length of LIS ending at each index lis = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: lis[i] = max(lis[i], lis[j] + 1) # The length of the longest increasing subsequence return max(lis)"},{"question":"In graph theory, a tree is a connected, acyclic graph. An important property of a tree is that any two vertices are connected by exactly one path. In this problem, you\'ll implement a function `calculateHeight` to determine the height of a tree. The height of a tree is the length of the longest path from the root to any leaf. # Input You will be given a tree in the form of a list of edges. Each edge is represented as a tuple (u, v) indicating that there is an undirected edge between nodes `u` and `v`. Additionally, you\'ll be given the root node. The tree will always have at least one node. # Output The function should return an integer representing the height of the tree. # Function Signature ```python def calculateHeight(edges: List[Tuple[int, int]], root: int) -> int: ``` # Example Given the following tree with root node 1: ``` Edges: [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)] Root: 1 ``` This tree can be visualized as: ``` 1 / 2 3 / / 4 5 6 7 ``` The longest path from the root (1) to any leaf is of length 2. Hence, the output should be: ``` calculateHeight([(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)], 1) == 2 ``` You can assume that node labels are unique and start from 1. **Note**: The input tree is guaranteed to be a valid tree (i.e., no cycles and fully connected with (n-1) edges for n nodes). # Constraints - 1 <= number of nodes <= 10^5 - Node values are integers in the range 1 to 10^5","solution":"from typing import List, Tuple, Dict from collections import defaultdict, deque def calculateHeight(edges: List[Tuple[int, int]], root: int) -> int: # Create an adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Breadth-first search (BFS) to calculate the height def bfs_height(root: int) -> int: visited = set() queue = deque([(root, 0)]) # (node, current_height) max_height = 0 while queue: node, height = queue.popleft() if node not in visited: visited.add(node) max_height = max(height, max_height) for neighbor in tree[node]: if neighbor not in visited: queue.append((neighbor, height + 1)) return max_height return bfs_height(root)"},{"question":"Task Write a function that takes a positive integer `n` and returns a list of all its divisors that are also prime numbers. The list should be sorted in ascending order. Example ```python divisors(28) -> [2, 7] divisors(30) -> [2, 3, 5] divisors(17) -> [17] divisors(1) -> [] divisors(77) -> [7, 11] ``` Constraints - The input integer `n` will be in the range `1 <= n <= 10^6`. Function Signature ```python def divisors(n: int) -> List[int]: pass ```","solution":"def is_prime(num): Helper function to check if a number is prime if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def divisors(n): Returns a list of prime divisors of the given number n. prime_divisors = [] for i in range(1, n + 1): if n % i == 0 and is_prime(i): prime_divisors.append(i) return prime_divisors"},{"question":"Dr. Garcia needs help ordering medical samples! Dr. Garcia works at a laboratory and she needs to quickly organize medical samples based on their priority for analysis. The priority is determined by the number of data points in each sample. Samples with higher data points are analyzed first. You are given a string of sample identifiers where each identifier ends with a number representing the number of data points. Your task is to sort the sample identifiers in descending order based on the number of data points. If two samples have the same number of data points, they should be sorted in ascending order based on their identifiers. Here is an example input: ```python string = \'sample1_5 sample2_10 sample3_3 sample4_10 sample5_7\' ``` Here is an example return from your function: ```python lst = [\'sample2_10\', \'sample4_10\', \'sample5_7\', \'sample1_5\', \'sample3_3\'] ``` Identifiers are structured such as the number of data points appear after an underscore `_`. Another example: ```python string = \'sampleA_2 sampleB_4 sampleC_3 sampleD_4 sampleE_1\' ``` Returns: ```python [\'sampleB_4\', \'sampleD_4\', \'sampleC_3\', \'sampleA_2\', \'sampleE_1\'] ``` Additional Notes: - The input string is a space-separated string of sample identifiers. - Your function should return a list of the sorted sample identifiers.","solution":"def sort_samples_by_priority(samples_string): # Split the input string into individual samples samples = samples_string.split() # Define key function for sorting def sort_key(sample): # Split the sample identifier to get the number of data points identifier, data_points = sample.rsplit(\'_\', 1) # Convert data points to integer for sorting data_points = int(data_points) # Return a tuple (negative data points, identifier) for sorting return (-data_points, identifier) # Sort samples using the defined key function sorted_samples = sorted(samples, key=sort_key) return sorted_samples"},{"question":"# Magic Squares A magic square is a 2D array of numbers where the sums of the numbers in each row, each column, and the two main diagonals are all the same. Write a program to determine if a given 3x3 matrix is a magic square. The matrix will be provided as a list of lists containing integers. # Example: magic_square([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) should return True magic_square([[4, 9, 2], [3, 5, 8], [8, 1, 6]]) should return False Write a function that checks if a given 3x3 matrix is a magic square.","solution":"def magic_square(matrix): Determines if a given 3x3 matrix is a magic square. Parameters: matrix: List[List[int]] - A 3x3 matrix represented as a list of lists of integers. Returns: bool - True if the matrix is a magic square, False otherwise. if len(matrix) != 3 or any(len(row) != 3 for row in matrix): return False # Sum of the first diagonal diag_sum1 = sum(matrix[i][i] for i in range(3)) # Sum of the second diagonal diag_sum2 = sum(matrix[i][2 - i] for i in range(3)) if diag_sum1 != diag_sum2: return False # Sum of the first row, which is the target magic constant magic_constant = sum(matrix[0]) # Check rows and columns for i in range(3): if sum(matrix[i]) != magic_constant: return False if sum(matrix[j][i] for j in range(3)) != magic_constant: return False return True"},{"question":"You are given an integer array `A` of size `n`. You need to preprocess the array and provide the following functionalities: 1. Update the value at a specific index. 2. Compute the sum of elements in a given range. Implement a class `NumArray` with the following methods: - `public NumArray(int[] nums)` This initializes the object with the integer array `nums`. - `public void update(int index, int val)` This updates the element at index `with val. - `public int sumRange(int left, int right)` This returns the sum of elements between the indices `left` and `right` inclusive (0 ≤ left ≤ right < n). For example: -----Input----- - `NumArray numArray = new NumArray([1, 3, 5]);` - `numArray.sumRange(0, 2); // return 9` - `numArray.update(1, 2); // nums = [1, 2, 5]` - `numArray.sumRange(0, 2); // return 8` -----Constraints----- - `1 ≤ nums.length ≤ 3 * 10^4` - `-10^5 ≤ nums[i] ≤ 10^5` - `0 ≤ index < nums.length` - `-10^5 ≤ val ≤ 10^5` - At most 10^4 calls will be made to update and sumRange methods. Your solution should be efficient enough to handle large inputs and frequent queries.","solution":"class NumArray: def __init__(self, nums): self.n = len(nums) self.tree = [0] * (self.n + 1) self.nums = nums for i in range(self.n): self._update_tree(i + 1, nums[i]) def _update_tree(self, index, val): while index <= self.n: self.tree[index] += val index += index & -index def _query(self, index): sum_ = 0 while index > 0: sum_ += self.tree[index] index -= index & -index return sum_ def update(self, index, val): self._update_tree(index + 1, val - self.nums[index]) self.nums[index] = val def sumRange(self, left, right): return self._query(right + 1) - self._query(left)"},{"question":"Design a class `LRUCache` (Least Recently Used) that supports two operations: 1. `get(int key) -> int`: Returns the value of the key if the key exists in the cache, otherwise returns -1. 2. `put(int key, int value) -> None`: Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key. Implement the LRUCache class: - LRUCache(int capacity): Initialize the LRUCache with positive size capacity. - int get(int key): Returns the value of the key if the key exists, otherwise returns -1. - void put(int key, int value): Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key. The functions `get` and `put` must each run in O(1) average time complexity. Example 1: ``` Input: [\\"LRUCache\\", \\"put\\", \\"get\\", \\"put\\", \\"get\\", \\"put\\", \\"get\\", \\"get\\", \\"get\\"] [[2], [1, 1], [1], [3, 3], [2], [4, 4], [1], [3], [4]] Output: [null, null, 1, null, -1, null, -1, 3, 4] Explanation: LRUCache lruCache = new LRUCache(2); lruCache.put(1, 1); // cache is {1=1} lruCache.put(3, 3); // cache is {1=1, 3=3} lruCache.get(1); // return 1 lruCache.get(2); // return -1 (not found) lruCache.put(4, 4); // LRU key 1 is removed, cache is {4=4, 3=3} lruCache.get(1); // return -1 (not found) lruCache.get(3); // return 3 lruCache.get(4); // return 4 ``` Example 2: ``` Input: [\\"LRUCache\\", \\"put\\", \\"put\\", \\"get\\", \\"put\\", \\"get\\", \\"get\\"] [[1], [2, 2], [3, 3], [2], [4, 4], [2], [3]] Output: [null, null, null, -1, null, -1, 3] Explanation: LRUCache lruCache = new LRUCache(1); lruCache.put(2, 2); // cache is {2=2} lruCache.put(3, 3); // LRU key 2 is removed, cache is {3=3} lruCache.get(2); // return -1 (not found) lruCache.put(4, 4); // replaced key 3 with 4, cache is {4=4} lruCache.get(2); // return -1 (not found) lruCache.get(3); // return -1 (not found) ``` Note: - The number of calls to the get and put functions is limited to 3 * 10^4. - 1 <= capacity <= 3 * 10^4. - 0 <= key, value <= 10^5.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 else: self.cache.move_to_end(key) # Make this key most recently used return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False) # Remove least recently used element"},{"question":"Fibonacci Word A Fibonacci word is a specific string derived from a recurring pattern similar to the Fibonacci sequence of numbers, but instead of summing numbers, it concatenates strings. The first two words in the series are defined as: ``` W1 = \\"A\\" W2 = \\"B\\" ``` Each subsequent word is the concatenation of the previous two words: ``` Wn = W(n-1) + W(n-2) ``` So, the sequence of Fibonacci words starts as follows: ``` W1 = \\"A\\" W2 = \\"B\\" W3 = \\"BA\\" W4 = \\"BAB\\" W5 = \\"BABBA\\" W6 = \\"BABBABAB\\" ... ``` ___ Task Given an integer `n`, implement a function to find the nth Fibonacci word and return its length. ___ Examples ```python fibonacci_word_length(1) == 1 fibonacci_word_length(2) == 1 fibonacci_word_length(3) == 2 fibonacci_word_length(4) == 3 fibonacci_word_length(5) == 5 fibonacci_word_length(6) == 8 ``` ___ Performance tests ```python Number of tests: 10 Value of n: 10,000 ```","solution":"def fibonacci_word_length(n): Returns the length of the nth Fibonacci word. if n == 1 or n == 2: return 1 prev = 1 curr = 1 for _ in range(3, n + 1): prev, curr = curr, prev + curr return curr"},{"question":"Write a function that takes a string as input and returns the length of the longest substring without repeating characters. ``` Example: Input: \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Input: \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Input: \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Hints: 1. Consider using a sliding window approach to track the current substring and its characters. 2. Use a hash set or a dictionary to keep track of characters and their positions to manage duplicates efficiently. ```","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"Phone Number Formatter Write a function `formatPhoneNumber` that takes a string of 10 digits as an argument and returns the string formatted as a phone number. The format should be: (XXX) XXX-XXXX **Notes:** - The input will always be a string containing exactly 10 digits. - The input string may include white spaces. - The function should return a properly formatted phone number string without any extra spaces. - Input can be modified as needed. **Example:** ``` formatPhoneNumber(\\"1234567890\\") => \\"(123) 456-7890\\" formatPhoneNumber(\\" 987 654 3210 \\") => \\"(987) 654-3210\\" ```","solution":"def formatPhoneNumber(number): Formats a string of 10 digits into the format (XXX) XXX-XXXX. Args: number (str): A string containing exactly 10 digits. Returns: str: The formatted phone number. # Remove whitespaces from the input string cleaned_number = \'\'.join(number.split()) # Format the string into (XXX) XXX-XXXX formatted_number = f\\"({cleaned_number[:3]}) {cleaned_number[3:6]}-{cleaned_number[6:]}\\" return formatted_number"},{"question":"Write a function that takes a positive integer `n` as input and returns the `n`th number in the Fibonacci sequence. The Fibonacci sequence is defined as: - `F(0) = 0` - `F(1) = 1` - `F(n) = F(n-1) + F(n-2)` for `n >= 2` For example: - For `n = 5`, the function should return `5`, because the Fibonacci sequence up to the 5th position is `0, 1, 1, 2, 3, 5`. - For `n = 10`, the function should return `55`, because the Fibonacci sequence up to the 10th position is `0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55`. Assume that the input will always be a non-negative integer.","solution":"def fibonacci(n): Returns the n-th number in the Fibonacci sequence. :param n: non-negative integer representing the position in the Fibonacci sequence. :return: The n-th Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a program that helps track the most frequently occurring words in a series of documents and outputs the top K frequent words in order of their frequency. If there are ties in frequency, the words are ranked in lexicographical (alphabetical) order. -----Input----- The input begins with an integer T, the number of test cases. Each test case starts with an integer N, the number of lines in the document followed by an integer K. The next N lines contain words separated by spaces. Words will only consist of uppercase and lowercase English letters. -----Output----- For each test case, print the top K frequent words in order of their frequency. If multiple words have the same frequency, they should be listed lexicographically. Print a blank line after each test case. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 50 - 1 ≤ K ≤ 10 - Each line will contain at most 100 characters. -----Sample Input----- 2 3 2 apple orange apple banana apple orange banana orange 5 3 cat dog cat dog dog fish bird cat fish bird dog bird cat -----Sample Output----- apple orange dog cat bird -----Explanation----- In the first test case, \\"apple\\" occurs 3 times, \\"orange\\" occurs 3 times, and \\"banana\\" occurs 2 times. Since both \\"apple\\" and \\"orange\\" have the highest frequency, they appear at the top. In the second test case, \\"dog\\" occurs 4 times, \\"cat\\" occurs 4 times, and \\"bird\\" occurs 3 times. \\"fish\\" occurs 2 times. The top 3 frequencies are \\"dog\\", \\"cat\\", and \\"bird\\", listed in lexicographical order where tie in frequency occurs.","solution":"from collections import Counter import heapq def top_k_frequent_words(T, test_cases): results = [] for i in range(T): N, K, lines = test_cases[i] words = [] for line in lines: words.extend(line.split()) word_count = Counter(words) # This heap stores (-frequency, word) tuples heap = [(-freq, word) for word, freq in word_count.items()] heapq.heapify(heap) top_k = [] for _ in range(K): top_k.append(heapq.heappop(heap)[1]) results.append(\' \'.join(sorted(top_k))) for result in results: print(result) print() # Parsing and calling the function for the original problem statement def main(): import sys input = sys.stdin.read data = input().splitlines() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N, K = map(int, data[index].split()) lines = data[index+1:index+N+1] test_cases.append((N, K, lines)) index += N + 1 top_k_frequent_words(T, test_cases) if __name__ == \\"__main__\\": main()"},{"question":"# Winning Streak You are given a list representing a sequence of outcomes of games played by a team during a season. Each entry in the list is either \'W\' for a win or \'L\' for a loss. A winning streak is defined as a consecutive sequence of \'W\' entries. Your task is to determine the length of the longest winning streak the team had during the season. # Task Write a function that takes a list of game outcomes as input and returns the length of the longest winning streak. If the team never wins, the longest winning streak is 0. # Examples ```python longest_winning_streak([\'W\', \'L\', \'W\', \'W\', \'L\', \'W\', \'W\', \'W\', \'L\']) = 3 longest_winning_streak([\'L\', \'L\', \'L\', \'L\']) = 0 longest_winning_streak([\'W\', \'W\', \'W\', \'W\', \'W\', \'W\']) = 6 longest_winning_streak([\'L\', \'W\', \'L\', \'W\', \'W\', \'L\', \'L\', \'W\', \'W\', \'W\']) = 3 ```","solution":"def longest_winning_streak(outcomes): Determines the length of the longest winning streak. Parameters: outcomes (list): A list of game outcomes, with \'W\' for a win and \'L\' for a loss. Returns: int: The length of the longest winning streak. max_streak = 0 current_streak = 0 for outcome in outcomes: if outcome == \'W\': current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 0 return max_streak"},{"question":"Task Given a string of characters, you need to rearrange the characters such that no two identical characters are adjacent to each other. If it’s impossible, return an empty string. Here\'s how you proceed: 1. Count the frequency of each character in the string. 2. Try to arrange the characters such that no two identical characters are adjacent. Example ``` Input: \\"aaabbc\\" Output: \\"ababac\\" or \\"abacab\\" or any other valid string Input: \\"aaabb\\" Output: \\"ababa\\" or any other valid string Input: \\"aaa\\" Output: \\"\\" ``` Note: - The input string will only contain lowercase alphabets. - If more than one valid output is possible, return any of them. - If it is impossible to rearrange the characters to meet the criteria, return an empty string.","solution":"import heapq from collections import Counter def rearrange_string(s): Rearranges the input string such that no two identical characters are adjacent. If it\'s not possible, returns an empty string. if not s: return \\"\\" # Counting frequency of each character char_freq = Counter(s) # Max-Heap to store characters by their frequencies max_heap = [(-freq, char) for char, freq in char_freq.items()] heapq.heapify(max_heap) result = [] prev_char = None prev_freq = 0 while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_char and prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 rearranged_string = \'\'.join(result) if len(rearranged_string) != len(s): return \\"\\" return rearranged_string"},{"question":"Given the following list of courses and their possible prerequisites, write a function that determines whether it is possible to finish all courses. A course cannot be taken if it has a prerequisite that has not yet been completed. The input to the function is a list of tuples where each tuple contains a course and a prerequisite. The function should return `True` if it is possible to complete all courses, or `False` otherwise. Example: ``` courses = [(1, 0), (2, 1), (3, 2)] ``` In this example, course `1` has `0` as a prerequisite, course `2` has `1` as a prerequisite, and course `3` has `2` as a prerequisite. The function should return `True` because it is possible to complete all courses in the order `0`, `1`, `2`, `3`. Another example: ``` courses = [(1, 0), (0, 1)] ``` In this example, course `1` has `0` as a prerequisite and course `0` has `1` as a prerequisite. The function should return `False` because there is a cycle and it is not possible to complete all courses. Function signature: ```python def can_finish_courses(courses: List[Tuple[int, int]]) -> bool: pass ```","solution":"from typing import List, Tuple def can_finish_courses(courses: List[Tuple[int, int]]) -> bool: from collections import defaultdict, deque # Create the adjacency list for the graph graph = defaultdict(list) indegree = defaultdict(int) for course, prereq in courses: graph[prereq].append(course) indegree[course] += 1 if prereq not in indegree: indegree[prereq] = 0 # Create a queue and add all courses with no prerequisites queue = deque([node for node in indegree if indegree[node] == 0]) count_of_courses_taken = 0 while queue: course = queue.popleft() count_of_courses_taken += 1 for next_course in graph[course]: indegree[next_course] -= 1 if indegree[next_course] == 0: queue.append(next_course) if count_of_courses_taken == len(indegree): return True else: return False"},{"question":"Given a list of integers, `nums`, and an integer, `target_sum`, find the number of unique pairs `(a, b)` in the list such that `a + b == target_sum`. Each pair should be counted only once, and the order of the integers in the pair does not matter. ```python #Examples nums = [1, 5, 3, 3, 7, 9, 2] target_sum = 10 #(1, 9), (3, 7) return 2 nums = [1, 2, 3, 4, 5] target_sum = 8 #(3, 5) return 1 nums = [2, 2, 2, 2] target_sum = 4 #(2, 2) return 1 nums = [] target_sum = 5 # no pairs return 0 ``` The length of nums is within the range `0 <= len(nums) <= 10^5` and `nums` can contain both positive and negative integers. Each integer in `nums` is within the range `-10^9 <= nums[i] <= 10^9`.","solution":"def count_unique_pairs(nums, target_sum): Returns the number of unique pairs (a, b) in the list such that a + b == target_sum. Each pair should be counted only once, and the order of the integers in the pair does not matter. seen = set() pairs = set() for num in nums: difference = target_sum - num if difference in seen: pairs.add((min(num, difference), max(num, difference))) seen.add(num) return len(pairs)"},{"question":"You are given a list of integers, nums, and an integer, target. Return all unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that: 0 <= a, b, c, d < len(nums) a, b, c, and d are all distinct. nums[a] + nums[b] + nums[c] + nums[d] == target The solution set must not contain duplicate quadruplets. Example 1: Input: nums = [1, 0, -1, 0, -2, 2], target = 0 Output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] Example 2: Input: nums = [2, 2, 2, 2, 2], target = 8 Output: [[2, 2, 2, 2]] Constraints: - nums.length == n - 1 <= n <= 200 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"def four_sum(nums, target): Returns all unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that: 0 <= a, b, c, d < len(nums) a, b, c, and d are all distinct. nums[a] + nums[b] + nums[c] + nums[d] == target :param List[int] nums: List of integers :param int target: The target sum :return List[List[int]]: List of unique quadruplets nums.sort() quadruplets = [] n = len(nums) for i in range(n-3): if i > 0 and nums[i] == nums[i-1]: continue for j in range(i+1, n-2): if j > i+1 and nums[j] == nums[j-1]: continue left, right = j + 1, n - 1 while left < right: current_sum = nums[i] + nums[j] + nums[left] + nums[right] if current_sum == target: quadruplets.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return quadruplets"},{"question":"You are given a list of integers representing pixel values of a linear grayscale image, where each value ranges from 0 to 255. Each pixel is part of a 2D image grid of specified dimensions - width and height, both provided as inputs. Your task is to convert this list into a string representing the grayscale image where each pixel value is represented by a symbol: - \'#\' for pixel values >= 192, - \'@\' for pixel values between 128 and 191, - \'+\' for pixel values between 64 and 127, - \'.\' for pixel values between 0 and 63. Each row of the image grid should be space-separated, and rows should be separated by new lines. For example, for the input list `[150, 200, 50, 0, 180, 255, 70, 10, 90]` and dimensions width=3, height=3, the expected output is: ``` @ # . . @ # + . + ``` Ensure that the dimensions provided will always match the length of the list (width * height = length of the input list).","solution":"def convert_grayscale_to_ascii(pixels, width, height): Convert a list of pixel values into a string representing the grayscale image using specified symbols for different ranges of pixel values. symbol_map = [ (192, \'#\'), (128, \'@\'), (64, \'+\'), (0, \'.\') ] rows = [] for i in range(height): row = [] for j in range(width): pixel = pixels[i * width + j] for threshold, symbol in symbol_map: if pixel >= threshold: row.append(symbol) break rows.append(\\" \\".join(row)) return \\"n\\".join(rows)"},{"question":"You are given an array of non-negative integers representing the amount of rainwater stored in vertical columns where each element in the array represents the height of the column. Write a function that calculates the maximum amount of water that can be trapped between these columns after it rains. Your function should take a single argument `heights`, which is an array of non-negative integers, and return an integer representing the total amount of trapped water. You can assume that the width of each column is 1 unit. # Example ``` Input: heights = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 ``` # Explanation The input array can be visualized as follows: ``` ┌─┐ ┌─┐ │ │ │ │ │ │┌─┐ │ │ │ ││ │ ┌─┘ ││ ││ │ │ │ ││ ││ │ │ │ ││ ││ │ 0 1 0 2 1 0 1 3 2 1 2 1 ``` The volume of water trapped is represented by exclusively the space between the columns: ``` ┌─┐ ┌─┐ │x│ │x│x│x│┌─┐ │x│x│x││ │ ┌─┘x│x│x│ │ │ │xx│xx│xx│ │ │xx│xx│xx│ 0 1 0 2 1 0 1 3 2 1 2 1 ``` And the total trapped water is 6 units.","solution":"def trap(heights): Calculate the maximum amount of water that can be trapped between columns. Parameters: heights (list of int): A list of non-negative integers where each represents the height of a column. Returns: int: Total amount of trapped water. if not heights: return 0 n = len(heights) # Initialize left_max and right_max arrays left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"You are given an initial array `arr` and a string `delimiter`. Your task is to transform the array into a single string by concatenating all elements of the array, separated by the given delimiter. If the array is empty, return an empty string. If the `delimiter` is an empty string, simply join all elements without any separator. Write a function `join_elements(arr, delimiter)` that takes in an array and a delimiter, and returns a single concatenated string. Example: ``` join_elements([\'Python\', \'is\', \'fun\'], \\" \\") == \\"Python is fun\\" join_elements([\'1\', \'2\', \'3\'], \\"-\\") == \\"1-2-3\\" join_elements([\'apple\', \'banana\', \'cherry\'], \\"\\") == \\"applebananacherry\\" join_elements([], \\",\\") == \\"\\" ```","solution":"def join_elements(arr, delimiter): Concatenates the elements of the array using the given delimiter. Parameters: - arr (list): List of strings to be concatenated. - delimiter (str): The delimiter to be used between elements. Returns: - str: A single concatenated string. return delimiter.join(arr)"},{"question":"Given a string containing only letters `A` and `B`, you can delete any two adjacent letters \'A\' and \'B\' or \'B\' and \'A\'. After performing this operation, the string can become smaller. Your task is to check if it is possible to make the string empty by repeatedly performing this operation. Write a function `canReduceToEmptyString` which takes a string `s` as input and returns `True` if it is possible to make the string empty; otherwise, return `False`. Examples: ``` canReduceToEmptyString(\'AABB\') --> True (Perform AB → \\"\\", then AB → \\"\\") canReduceToEmptyString(\'ABAB\') --> True (Perform AB → \\"\\", then AB → \\"\\") canReduceToEmptyString(\'AABBA\') --> False (No way to completely delete) ```","solution":"def canReduceToEmptyString(s: str) -> bool: Checks if it is possible to reduce the string to empty by repeatedly removing \'AB\' or \'BA\' sequences. stack = [] for char in s: if stack and ((stack[-1] == \'A\' and char == \'B\') or (stack[-1] == \'B\' and char == \'A\')): stack.pop() else: stack.append(char) return len(stack) == 0"},{"question":"Write a function `findAnagramIndices` that takes two strings `s` and `p` as arguments. The function should return a list of starting indices of the anagram substrings of `p` in `s`. An anagram substring contains the same characters as the original string `p`, but in any order. The order of the output does not matter. For example, given `s` = \\"cbaebabacd\\" and `p` = \\"abc\\", the function should return `[0, 6]` since \\"cba\\" (starting at index 0) and \\"bac\\" (starting at index 6) are anagrams of \\"abc\\". You may assume the input strings contain only lowercase letters.","solution":"from collections import Counter def findAnagramIndices(s, p): Finds the starting indices of anagram substrings of p in s. :param s: The input string to be searched :param p: The anagram pattern :return: A list of starting indices of anagram substrings of p in s ns, np = len(s), len(p) if np > ns: return [] p_count = Counter(p) s_count = Counter(s[:np-1]) indices = [] for i in range(np-1, ns): s_count[s[i]] += 1 if s_count == p_count: indices.append(i - np + 1) s_count[s[i - np + 1]] -= 1 if s_count[s[i - np + 1]] == 0: del s_count[s[i - np + 1]] return indices"},{"question":"Grocery Shopper\'s Dilemma A shopper is at the supermarket to buy groceries. The supermarket has a very specific layout: it consists of a line of N shelves, each with a distinct type of item. The shopper has a list of M specific items they need to purchase, and they want to minimize the total distance they walk. The shopper can initially start from any shelf and can move to adjacent shelves to gather items. The aim is to find the minimum total walking distance needed to collect all M items from the supermarket. For the purpose of this problem, the distance between two shelves i and j is |i - j|. -----Input:----- The first line contains an integer T, the number of test cases. Each test case contains two lines: - The first line contains two integers N and M. - The second line contains M distinct integers, each representing the position of an item on the shelves that the shopper needs to pick up. -----Output:----- For each test case, output a single integer denoting the minimum walking distance needed for the shopper to gather all M items. -----Constraints:----- 1 <= T <= 100 2 <= N <= 1000 1 <= M <= N All positions are 1-indexed. -----Example:----- Input: 2 5 3 1 3 5 7 4 2 4 6 7 Output: 4 6 Explanation: Case 1: The shopper can start at shelf 1, walk to shelf 3, and then to shelf 5. Total distance is |1-1| + |3-1| + |5-3| = 0 + 2 + 2 = 4. Case 2: The shopper can start at shelf 2, walk to shelf 4, then to shelf 6, and finally to shelf 7. Total distance is |2-2| + |4-2| + |6-4| + |7-6| = 0 + 2 + 2 + 1 = 5.","solution":"def min_walking_distance(t, test_cases): results = [] for i in range(t): N, M = test_cases[i][\'dims\'] items = sorted(test_cases[i][\'positions\']) distance = items[-1] - items[0] results.append(distance) return results"},{"question":"# Task: Write a function `findSubsets` or `SubsetManager.findSubsets` that takes a list of integers and returns all possible subsets. The subsets should be sorted in ascending order and the order of output subsets should be based on the ascending order of their elements. The elements in the input list will be unique. # Examples: ```python findSubsets([1, 2, 3]) => [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]] ``` > __Explanation:__ The subsets of [1, 2, 3] are: - The empty subset [] - The subsets with one element: [1], [2], [3] - The subsets with two elements: [1, 2], [1, 3], [2, 3] - The subset with three elements: [1, 2, 3] ```python findSubsets([4, 5, 6]) => [[], [4], [4, 5], [4, 5, 6], [4, 6], [5], [5, 6], [6]] ``` > __Explanation:__ The subsets of [4, 5, 6] are: - The empty subset [] - The subsets with one element: [4], [5], [6] - The subsets with two elements: [4, 5], [4, 6], [5, 6] - The subset with three elements: [4, 5, 6] # Notes: - The output list should contain no duplicate subsets. - The elements within each subset and the subsets themselves should be presented in ascending order within the outer list. - The input list will contain at most 10 integers. # Constraints: - 1 <= len(nums) <= 10 - -10 <= nums[i] <= 10 # Example function signature: ```python def findSubsets(nums: list[int]) -> list[list[int]]: pass ```","solution":"def findSubsets(nums): Returns all possible subsets of nums sorted in ascending order of elements. def backtrack(start, path): result.append(path[:]) for i in range(start, len(nums)): path.append(nums[i]) backtrack(i + 1, path) path.pop() nums.sort() result = [] backtrack(0, []) return result"},{"question":"Kata Task Write a function that takes in a list of integers and returns a new list with each element doubled. However, the function should exclude any integers that are negative or zero when doubling and include them in their original form in the output. # Example Given the input list: `[1, 2, 3, -4, 0, 5]`, the function should return: `[2, 4, 6, -4, 0, 10]`. # Notes - The input list will contain at least one integer. - The input list will only contain integers (both positive and negative including zero). - Ensure the elements are doubled only if they are positive and greater than zero. # Example Code Usage ```python def double_positive(nums): result = [] for num in nums: if num > 0: result.append(num * 2) else: result.append(num) return result # Example usage print(double_positive([1, 2, 3, -4, 0, 5])) # Output: [2, 4, 6, -4, 0, 10] ``` Ensure to provide appropriate comments and handle edge cases as part of your solution\'s implementation.","solution":"def double_positive(nums): Returns a new list with each positive element doubled. Negative elements and zero are included in their original form. Parameters: nums (list): List of integers. Returns: list: List with doubled positive integers and untouched negative integers and zero. result = [] for num in nums: if num > 0: result.append(num * 2) else: result.append(num) return result"},{"question":"Write a function that takes a string representing a mathematical expression containing non-negative integers and the operators `+`, `-`, `*`, and `/` (no parentheses), and returns the result of the expression. The function should adhere to the standard order of operations (PEMDAS/BODMAS). Ensure that the division operator performs integer division. Examples: An input of \\"3+5*2-10/2\\" should return 8 (since 3 + 10 - 5 = 8) An input of \\"10+2*3\\" should return 16 (since 10 + 6 = 16) An input of \\"14-3/2\\" should return 13 (since 14 - 1 = 13)","solution":"def evaluate_expression(expression): Evaluate a mathematical expression containing non-negative integers and the operators +, -, *, / (without parentheses), adhering to the standard order of operations (PEMDAS/BODMAS). import re # Helper function to perform basic arithmetic operations between two operands def apply_operator(operands, operator): b = operands.pop() a = operands.pop() if operator == \'+\': operands.append(a + b) elif operator == \'-\': operands.append(a - b) elif operator == \'*\': operands.append(a * b) elif operator == \'/\': operands.append(a // b) # Regular expression to tokenize the expression into integers and operators tokens = re.findall(r\'d+|[+*/-]\', expression) # Two stacks to hold the operands and operators operands = [] operators = [] # Operator precedence mapping precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} for token in tokens: if token.isdigit(): operands.append(int(token)) else: while (operators and precedence[operators[-1]] >= precedence[token]): apply_operator(operands, operators.pop()) operators.append(token) while operators: apply_operator(operands, operators.pop()) return operands[0]"},{"question":"George is trying to understand the concept of prime numbers and their product. He came up with a challenge to find the product of all prime numbers less than or equal to a given number N. Since the product can be very large, the result should be given modulo 1000000007 (10^9+7). Can you help George with this challenge? -----Input:----- - First line will contain T, number of test cases. - Each test case contains a single integer N. -----Output:----- For each test case, output in a single line the product of all primes less than or equal to N, modulo 1000000007. -----Constraints----- - 1 leq T leq 10^4 - 1 leq N leq 10^6 -----Sample Input:----- 2 10 20 -----Sample Output:----- 210 9699690","solution":"def sieve_of_eratosthenes(max_num): Generate a list of primes up to max_num using the Sieve of Eratosthenes. is_prime = [True] * (max_num + 1) p = 2 while (p * p <= max_num): if is_prime[p]: for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 primes = [] for p in range(2, max_num + 1): if is_prime[p]: primes.append(p) return primes MOD = 1000000007 def product_of_primes(n): primes = sieve_of_eratosthenes(n) product = 1 for prime in primes: product = (product * prime) % MOD return product def solve(test_cases): results = [] for n in test_cases: results.append(product_of_primes(n)) return results"},{"question":"Create a function that accepts a list of integers and returns the maximum difference between any two elements such that the larger element comes after the smaller one in the list. Example: ```python max_difference([2, 3, 10, 6, 4, 8, 1]) == 8 # 10 - 2 max_difference([7, 9, 5, 6, 3, 2]) == 2 # 9 - 7 max_difference([1, 2, 90, 10, 110]) == 109 # 110 - 1 max_difference([4, 3, 2, 1]) == -1 # No larger element comes after a smaller one ``` Some more examples: ```python max_difference([10, 12, 3, 1, 25, 18]) == 24 # 25 - 1 max_difference([15, 7, 6, 20, 10]) == 14 # 20 - 6 ```","solution":"def max_difference(lst): Returns the maximum difference between any two elements such that the larger element comes after the smaller one in the list. if len(lst) < 2: return -1 min_element = lst[0] max_diff = -1 for i in range(1, len(lst)): if lst[i] > min_element: max_diff = max(max_diff, lst[i] - min_element) min_element = min(min_element, lst[i]) return max_diff"},{"question":"=====Function Descriptions===== concatenate The concatenate function is used to join two or more arrays along a specified axis. (a). Using concatenate to join 1D arrays import numpy array1 = numpy.array([1, 2, 3]) array2 = numpy.array([4, 5, 6]) result = numpy.concatenate((array1, array2)) print(result) # Output: [1 2 3 4 5 6] (b). Using concatenate to join 2D arrays import numpy array1 = numpy.array([[1, 2], [3, 4]]) array2 = numpy.array([[5, 6]]) result = numpy.concatenate((array1, array2), axis=0) print(result) # Output: [[1 2] [3 4] [5 6]] split The split function splits an array into multiple sub-arrays along a specified axis. import numpy array = numpy.array([1, 2, 3, 4, 5, 6]) result = numpy.split(array, 3) print(result) # Output: [array([1, 2]), array([3, 4]), array([5, 6])] =====Problem Statement===== You are given a space separated list of integers. Your task is to split this list into 4 equal-sized sub-arrays and print each sub-array as a NumPy array. =====Input Format===== A single line of input containing a space separated list of 12 integers. =====Output Format===== Print each of the 4 sub-arrays as individual NumPy arrays. Note: Ensure that the input will always be a list of exactly 12 integers.","solution":"import numpy as np def split_into_four_subarrays(input_list): Split a given list of 12 integers into 4 equal-sized sub-arrays. Parameters: input_list (list of int): A list of 12 integers. Returns: list of np.ndarray: A list containing the 4 sub-arrays as NumPy arrays. array = np.array(input_list) sub_arrays = np.split(array, 4) return sub_arrays # Example usage: input_list = list(map(int, \\"1 2 3 4 5 6 7 8 9 10 11 12\\".split())) result = split_into_four_subarrays(input_list) for sub_array in result: print(sub_array)"},{"question":"You are given a string s of length N consisting only of characters \'(\', \')\' and \'*\'. Your task is to determine if the string can be converted to a valid balanced bracket sequence by changing some (possibly zero) \'*\' characters into \'(\' or \')\'. A valid balanced bracket sequence is a string that is either empty, or consists of two valid balanced bracket sequences concatenated together, or a valid balanced bracket sequence enclosed by a pair of matching brackets \'(\' and \')\'. -----Constraints----- - 1 leq N leq 10^5 - s consists only of \'(\', \')\' and \'*\'. -----Input----- Input is given from Standard Input in the following format: s -----Output----- If the string can be converted to a valid balanced bracket sequence, print Yes; otherwise, print No. -----Sample Input 1----- (*) -----Sample Output 1----- Yes -----Sample Input 2----- (*)* -----Sample Output 2----- Yes -----Sample Input 3----- )*( -----Sample Output 3----- No","solution":"def can_be_valid_bracket_sequence(s): min_open = max_open = 0 for char in s: if char == \'(\': min_open += 1 max_open += 1 elif char == \')\': if min_open > 0: min_open -= 1 max_open -= 1 else: # char == \'*\' if min_open > 0: min_open -= 1 max_open += 1 if max_open < 0: # More closing brackets than open brackets return \\"No\\" if min_open == 0: return \\"Yes\\" else: return \\"No\\""},{"question":"You have a string of lowercase characters. You need to write a function to determine if the string can be rearranged to form a palindrome. A palindrome is a word that reads the same forward and backward. For example, `racecar` is a palindrome, while `hello` is not. Write a function called `canFormPalindrome()` that takes a string as an argument and returns a boolean indicating whether the string can be rearranged to form a palindrome. For example: ``` canFormPalindrome(\\"carrace\\") should return True, as \\"carrace\\" can be rearranged to form \\"racecar\\". canFormPalindrome(\\"daily\\") should return False, as \\"daily\\" cannot be rearranged to form a palindrome. ```","solution":"from collections import Counter def canFormPalindrome(s: str) -> bool: Determines if the string can be rearranged to form a palindrome. :param s: Input string of lowercase characters. :return: True if the string can be rearranged to form a palindrome, else False. char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Given an integer `n`, implement a function to convert it into its corresponding column title as appears in an Excel sheet. For example: ```python def convert_to_title(n: int) -> str: # Your code here # Example usages print(convert_to_title(1)) # Output: \\"A\\" print(convert_to_title(28)) # Output: \\"AB\\" print(convert_to_title(701)) # Output: \\"ZY\\" print(convert_to_title(702)) # Output: \\"ZZ\\" print(convert_to_title(703)) # Output: \\"AAA\\" ``` The sequence of numbers and corresponding titles can be thought of in terms of reverse calculation from a base-26 numeral system, starting from 1 instead of 0. The conversion rules for this system use \'A\' to \'Z\', where \'A\' represents 1, \'B\' represents 2, and so on up to \'Z\' which represents 26.","solution":"def convert_to_title(n: int) -> str: Convert a given integer to its corresponding column title as it appears in an Excel sheet. result = [] while n > 0: n -= 1 # Adjust so that it fits 0-based index system result.append(chr(n % 26 + ord(\'A\'))) n //= 26 return \'\'.join(result[::-1])"},{"question":"Given a list of strings representing directory paths, write a function to determine the depth of the deepest directory. The input list will contain fully qualified directory paths with each level separated by a forward slash `/`. Example Input: ``` [\\"/usr/bin\\", \\"/usr/bin/python\\", \\"/usr/local/bin\\", \\"/home/user/documents/pictures/vacation\\"] ``` Example Output: ``` 5 ``` In the example above, the deepest directory is \\"/home/user/documents/pictures/vacation\\" with a depth of 5.","solution":"def deepest_directory_depth(paths): Returns the depth of the deepest directory from a list of directory paths. :param paths: List of strings representing directory paths :return: An integer representing the depth of the deepest directory max_depth = 0 for path in paths: # Split path by \'/\' and filter out empty strings (which occur from leading \'/\') depth = len([dir for dir in path.split(\'/\') if dir]) if depth > max_depth: max_depth = depth return max_depth"},{"question":"You are given a list of flights represented as a list of triplets flights[i] = [fromCity, toCity, price], indicating that there is a flight from fromCity to toCity with cost price. You are also given a source city and a destination city, and an integer k, representing the maximum number of stops allowed. Return the minimum cost to travel from the source city to the destination city with at most k stops. If there is no such route, return -1. Example 1: Input: flights = [[0,1,100],[1,2,100],[0,2,500]], source = 0, destination = 2, k = 1 Output: 200 Explanation: The cheapest price from city 0 to city 2 with at most 1 stop costs 200, as the route goes from 0 -> 1 -> 2. Example 2: Input: flights = [[0,1,100],[1,2,100],[0,2,500]], source = 0, destination = 2, k = 0 Output: 500 Explanation: The cheapest price from city 0 to city 2 with at most 0 stops costs 500, as the route goes from 0 -> 2. Example 3: Input: flights = [[0,1,100],[1,2,100],[0,2,500]], source = 0, destination = 2, k = 2 Output: 200 Explanation: The cheapest price from city 0 to city 2 with at most 2 stops costs 200, as the route goes from 0 -> 1 -> 2. Constraints: - 1 <= n <= 100 - 0 <= flights.length <= 10000 - flights[i].length == 3 - 0 <= fromCity, toCity < n - fromCity != toCity - 1 <= price <= 10000 - There will not be any multiple flights between any two cities.","solution":"from collections import defaultdict import heapq def find_cheapest_price(n, flights, source, destination, k): Find the cheapest price for a flight from source to destination with at most k stops. # Create adjacency list for the graph graph = defaultdict(list) for fromCity, toCity, price in flights: graph[fromCity].append((toCity, price)) # Priority queue to store the (cost, current city, remaining stops) heap = [(0, source, k + 1)] while heap: cost, current_city, stops_left = heapq.heappop(heap) if current_city == destination: return cost if stops_left > 0: for neighbor, price in graph[current_city]: heapq.heappush(heap, (cost + price, neighbor, stops_left - 1)) return -1"},{"question":"You are given a string s containing an expression of fractional additions and subtractions. The task is to evaluate and simplify the expression, returning the result in its simplest fractional form. Implement a function: ```python def fractionAddition(s: str) -> str: # your implementation here ``` **Examples:** Example 1: ``` Input: s = \\"-1/2+1/2\\" Output: \\"0/1\\" Explanation: The addition simplifies to 0. ``` Example 2: ``` Input: s = \\"1/3-1/2\\" Output: \\"-1/6\\" Explanation: The addition evaluates to -1/6 in simplest form. ``` Example 3: ``` Input: s = \\"5/3+1/3\\" Output: \\"2/1\\" Explanation: The addition simplifies to 2/1. ``` **Constraints:** - The input string contains only valid fractions and the characters `\'+\', \'-\'` and digits. - The input string will not contain any spaces. - The total length of the input string will not exceed 1000. - The denominators of the fractions will be between 1 and 100 inclusively. Evaluate each fraction, apply the arithmetic operations, keep track of the numerators and denominators, simplify where possible, and return the result in the form \\"numerator/denominator\\".","solution":"from fractions import Fraction def fractionAddition(s: str) -> str: Function to evaluate and simplify the fractional arithmetic expression. # Split the string into list of fractions including positive and negative signs fractions = [] i = 0 while i < len(s): if s[i] == \'-\' or s[i] == \'+\': sign = s[i] i += 1 else: sign = \'+\' start = i while i < len(s) and s[i] != \'-\' and s[i] != \'+\': i += 1 fractions.append(sign + s[start:i]) # Convert each fraction to a Fraction object and sum them result = sum(Fraction(frac) for frac in fractions) # Return the simplified fraction as a string return f\\"{result.numerator}/{result.denominator}\\""},{"question":"You are given an unsorted list of names of participants in a competition. Each participant\'s name consists of a first name and a last name, separated by a space. Your task is to sort the list in lexicographical order based on the last names. If two or more participants have the same last name, sort those participants by their first names. Write a function that takes an unsorted list of participants\' names and returns a sorted list. The sorting should be **case-insensitive**. ```python def sort_participants(names): # Your code here # Sample Input names = [\\"John Doe\\", \\"Jane Smith\\", \\"Alice Johnson\\", \\"Emma Doe\\"] # Sample Output # [\'Emma Doe\', \'John Doe\', \'Alice Johnson\', \'Jane Smith\'] ``` Note: You can assume that all names have exactly one space between the first name and the last name.","solution":"def sort_participants(names): Sorts a list of participant names by last name and first name, case-insensitive. Parameters: names (list): A list of strings, each string containing a first name and a last name. Returns: list: The sorted list of names. return sorted(names, key=lambda name: (name.split()[1].lower(), name.split()[0].lower()))"},{"question":"Write a function `word_count` that takes a string `s` as input and returns the frequency of each word in the string as a dictionary. Ignore punctuation and convert all words to lowercase before counting. **Example:** Input: ```python s = \\"Hello, world! Hello Python world.\\" ``` Output: ```python {\'hello\': 2, \'world\': 2, \'python\': 1} ``` *Note: For the purpose of this question, words are defined as sequences of characters separated by whitespace.*","solution":"import re from collections import Counter def word_count(s): Returns the frequency of each word in the input string. Ignores punctuation and converts words to lowercase. # Use regular expression to find words and convert them to lowercase words = re.findall(r\'bw+b\', s.lower()) # Use Counter to count the frequency of each word return dict(Counter(words))"},{"question":"You are given a list of integers representing scores obtained by students in a quiz. Your task is to determine the highest score that is lower than the maximum score. If there is no score that is lower than the maximum score, return -1. ```python def second_highest_score(scores): pass # Test cases print(second_highest_score([45, 67, 89, 23, 67, 89])) # Output: 67 print(second_highest_score([100, 99, 98, 97])) # Output: 99 print(second_highest_score([5, 5, 5, 5])) # Output: -1 print(second_highest_score([1])) # Output: -1 print(second_highest_score([50, 100, 100, 75, 75, 100])) # Output: 75 ``` In the first example: - The highest score is 89. - The highest score lower than 89 is 67. So, the function returns 67. In the second example: - The highest score is 100. - The highest score lower than 100 is 99. So, the function returns 99. In the third example: - The highest score is 5. - There are no scores lower than 5. So, the function returns -1. In the fourth example: - There\'s only one score, 1. - There are no other scores lower than the highest (which is 1). So, the function returns -1. In the fifth example: - The highest score is 100. - The highest score lower than 100 is 75. So, the function returns 75. Your goal is to implement the `second_highest_score` function to solve this problem.","solution":"def second_highest_score(scores): Returns the highest score that is lower than the maximum score in the list. If there is no such score, returns -1. if len(scores) < 2: return -1 # Not enough scores to determine the second highest unique_scores = set(scores) # Remove duplicates if len(unique_scores) < 2: return -1 # Not enough unique scores to determine the second highest unique_scores.remove(max(unique_scores)) # Remove the maximum score return max(unique_scores) # Return the highest score in the remaining set"},{"question":"In a city, there are M bus stops where people gather to wait for buses. You are given a list of N buses, where each bus is represented by a tuple (start_stop, end_stop, time_interval). This tuple defines that the bus leaves the `start_stop` and reaches the `end_stop` taking exactly `time_interval` minutes. Note that the buses only travel in one direction from the `start_stop` to the `end_stop`. Given the travel information, your task is to calculate the shortest travel time from a given `source_stop` to a `destination_stop`. If it\'s impossible to travel from `source_stop` to `destination_stop`, return -1. ```python # Example Test Cases buses = [(\\"A\\", \\"B\\", 4), (\\"B\\", \\"D\\", 1), (\\"A\\", \\"C\\", 2), (\\"C\\", \\"D\\", 7), (\\"D\\", \\"E\\", 3)] find_shortest_time(buses, \\"A\\", \\"E\\") # returns 8 (A -> B -> D -> E) buses = [(\\"A\\", \\"B\\", 1), (\\"B\\", \\"C\\", 1), (\\"C\\", \\"D\\", 1), (\\"D\\", \\"A\\", 1)] find_shortest_time(buses, \\"A\\", \\"D\\") # returns 3 (A -> B -> C -> D) buses = [(\\"X\\", \\"Y\\", 5), (\\"Y\\", \\"Z\\", 10)] find_shortest_time(buses, \\"X\\", \\"A\\") # returns -1 (no path) buses = [(\\"R\\", \\"S\\", 2)] find_shortest_time(buses, \\"R\\", \\"S\\") # returns 2 (R -> S) ``` Consider the buses as edges in a directed graph, with bus stops as nodes. Approach the problem similar to finding the shortest path in a weighted graph. You can use Dijkstra\'s algorithm to solve this problem. The result should be the minimum minutes required to go from `source_stop` to `destination_stop`. If there is no path available, the function should return -1.","solution":"import heapq def find_shortest_time(buses, source_stop, destination_stop): Finds the shortest travel time from source_stop to destination_stop using Dijkstra\'s algorithm. :param buses: List of tuples (start_stop, end_stop, time_interval) :param source_stop: The bus stop from which travel starts :param destination_stop: The bus stop at which travel ends :return: The shortest travel time or -1 if unreachable # Create graph from buses data graph = {} for start, end, time in buses: if start not in graph: graph[start] = [] graph[start].append((end, time)) # Priority queue for Dijkstra\'s algorithm pq = [(0, source_stop)] shortest_time = {source_stop: 0} while pq: current_time, stop = heapq.heappop(pq) if stop == destination_stop: return current_time for neighbor, travel_time in graph.get(stop, []): time = current_time + travel_time if neighbor not in shortest_time or time < shortest_time[neighbor]: shortest_time[neighbor] = time heapq.heappush(pq, (time, neighbor)) return -1"},{"question":"Alan is interested in checking whether a list of integers contains a pair of elements that sum up to a specific target number. He needs to write a function to automate this task. -----Input----- - The first line of input contains two integers n and target, where n is the number of elements in the list and target is the desired sum of two elements. - The second line contains n space-separated integers representing the elements of the list. -----Output----- Print \\"Found\\" if there is a pair of elements in the list that add up to the target number, otherwise print \\"Not Found\\" (without quotes). -----Constraints----- - 2 ≤ n ≤ 1000 - -1000 ≤ elements of the list ≤ 1000 -----Example----- Input: 5 8 1 2 3 7 5 Output: Found -----Explanation----- In the list [1, 2, 3, 7, 5], the pair (3, 5) adds up to the target number 8. Hence answer is \\"Found\\".","solution":"def find_pair_with_sum(n, target, lst): Checks if there are any two elements in the list that add up to the target number. :param n: Number of elements in the list :param target: Target sum :param lst: List of integers :return: \\"Found\\" if there is a pair that sums up to the target, otherwise \\"Not Found\\" seen = set() for num in lst: complement = target - num if complement in seen: return \\"Found\\" seen.add(num) return \\"Not Found\\""},{"question":"Write a function `valid_bracket_sequences` that determines whether a string consists of valid sequences of round brackets, square brackets, and curly braces. The sequence is valid if the brackets are closed in the correct order. # Function Signature `def valid_bracket_sequences(sequence: str) -> bool:` # Input - `sequence` (str): A string consisting of characters \'(\', \')\', \'[\', \']\', \'{\', \'}\', and possibly other characters. # Output - Returns `True` if the sequence is a valid bracket sequence, otherwise `False`. # Examples ```python # should return True as each opening bracket is closed in the correct order > valid_bracket_sequences(\\"()[]{}\\") True # should return True as each type of opening brackets is closed in correct order > valid_bracket_sequences(\\"{[()()]}\\") True # should return False as one of the closing bracket is out of order > valid_bracket_sequences(\\"{[(])}\\") False # should return False as the opening \\"(\\" has no corresponding closing bracket > valid_bracket_sequences(\\"[{}([{})]\\") False # even with mixed with other characters, brackets are correctly matched > valid_bracket_sequences(\\"a{b[c(d)e]f}g\\") True # return True for empty string as there is no unmatched brackets > valid_bracket_sequences(\\"\\") True ``` # Constraints - The function must handle up to `10^5` characters in the input string. - Non-bracket characters should be ignored.","solution":"def valid_bracket_sequences(sequence: str) -> bool: Determines whether a string consists of valid sequences of round brackets, square brackets, and curly braces. The sequence is valid if the brackets are closed in the correct order. stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in sequence: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket: if stack == [] or stack.pop() != matching_bracket[char]: return False # Ignore non-bracket characters return stack == []"},{"question":"# Task Given an integer array `arr` of size `n` and an integer `k`, determine the number of distinct pairs `(i, j)` (where `i != j`) such that `arr[i] + arr[j]` is divisible by `k`. # Examples For `arr = [1, 2, 3, 4, 5]` and `k = 3`, the result should be `4`. The pairs that satisfy the condition are: - (1 + 2) % 3 == 0 - (2 + 4) % 3 == 0 - (1 + 5) % 3 == 0 - (3 + 3) % 3 == 0 So there are 4 valid pairs. For `arr = [1, 3, 2, 4, 6, 9]` and `k = 5`, the result should be `5`. The pairs that satisfy the condition are: - (1 + 4) % 5 == 0 - (2 + 3) % 5 == 0 - (1 + 9) % 5 == 0 - (3 + 2) % 5 == 0 - (4 + 6) % 5 == 0 So there are 5 valid pairs. # Input & Output - `[input]` integer array `arr` The array of integers. Constraints: `2 <= arr.length <= 1000`, `0 <= arr[i] <= 10^9` - `[input]` integer `k` The integer value for divisibility. Constraints: `1 <= k <= 1000` - `[output]` integer Number of distinct pairs `arr[i] + arr[j]` divisible by `k`.","solution":"def count_divisible_pairs(arr, k): Returns the number of distinct pairs (i, j) such that arr[i] + arr[j] is divisible by k. count = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): if (arr[i] + arr[j]) % k == 0: count += 1 return count"},{"question":"# The Story: Alice runs a local theater and sells tickets online. To ensure no fraudulent transactions, she needs to keep track of the number of tickets sold and verify the balance of tickets available at any given time. She has asked you to write a function to help her with this task. # Task Overview: You have to write a function that accepts three parameters: * `total_tickets` is the total number of tickets available initially. * `sold_tickets` is the number of tickets already sold. * `request_tickets` is the number of tickets someone wishes to purchase now. If there are enough tickets available to fulfill the request, return the number of remaining tickets after the purchase. If there aren\'t enough tickets, return `-1`. # Usage Examples: ```python check_tickets(100, 90, 5) 5 # Remaining tickets after successful purchase check_tickets(50, 45, 10) -1 # Not enough tickets to fulfill the purchase request ``` ```if:csharp Documentation: Kata.CheckTickets Method (Int32, Int32, Int32) Returns the remaining number of tickets after a purchase if there are enough tickets available, or -1 if not. Syntax public static int CheckTickets( int total_tickets, int sold_tickets, int request_tickets ) Parameters total_tickets Type: System.Int32 The total number of tickets available initially. sold_tickets Type: System.Int32 The number of tickets already sold. request_tickets Type: System.Int32 The number of tickets someone wishes to purchase now. Return Value Type: System.Int32 An integer representing the remaining number of tickets after a successful purchase, or -1 if there aren\'t enough tickets available. ```","solution":"def check_tickets(total_tickets, sold_tickets, request_tickets): Returns the remaining number of tickets after fulfilling the request if possible, otherwise returns -1. if total_tickets - sold_tickets >= request_tickets: return total_tickets - sold_tickets - request_tickets else: return -1"},{"question":"You are given a string S and Q queries. In each query: - You are given an integer L, which denotes a length. - You should find and print the lexicographically smallest substring of length L from S. -----Input----- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a string S. - The second line of each test case contains a single integer Q. - Each of the next Q lines contains a single integer L describing a query. -----Output----- For each query, print a single line containing the lexicographically smallest substring of length L from S. -----Constraints----- - 1 le T le 5 - 1 le leftlvert S rightrvert le 10^5 - 1 le Q le 10^5 - 1 le L le leftlvert S rightrvert -----Subtasks----- Subtask #1 (30 points): - leftlvert S rightrvert le 1,000 - Q le 1,000 Subtask #2 (70 points): original constraints -----Example Input----- 1 abacabad 3 3 4 5 -----Example Output----- aba abac abaca -----Explanation----- Example case 1: - In the first query, the smallest lexicographically substring of length 3 is \\"aba\\". - In the second query, the smallest lexicographically substring of length 4 is \\"abac\\". - In the third query, the smallest lexicographically substring of length 5 is \\"abaca\\".","solution":"def smallest_substrings(T, test_cases): Function to determine the lexicographically smallest substrings. Parameters: T (int): Number of test cases. test_cases (list): List of tuples with each tuple containing a string S and a list of integers representing the queries Q. Returns: list: List of lists containing the results of each query for each test case. results = [] for S, queries in test_cases: result = [] for L in queries: # Initialize smallest substring as a large string. smallest_substr = S[:L] for i in range(1, len(S) - L + 1): current_substr = S[i:i + L] if current_substr < smallest_substr: smallest_substr = current_substr result.append(smallest_substr) results.append(result) return results"},{"question":"Anna is organizing books on her shelf. She has N books indexed from 1 to N, and she prefers a specific order for them. The books need to be sorted in ascending order of their indexes. She can rearrange the books using a minimal number of swaps, where each swap allows her to pick any two books and swap their positions. Anna needs your help to determine the minimum number of swaps needed to arrange the books in her preferred order. -----Input----- The first line of input contains an integer T – the number of test cases. T test cases follow. The first line of each test case contains an integer N, and the next line contains N integers – the current order of the books on the shelf. -----Output----- For each test case, output a single line with the answer – the minimal number of swaps required. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 -----Example----- Input: 2 4 4 3 2 1 4 1 3 4 2 Output: 2 2 -----Explanation----- Example case 1. - The initial order is [4, 3, 2, 1]. Anna can swap the books as follows: 1. Swap book 1 with book 4: [1, 3, 2, 4] 2. Swap book 2 with book 3: [1, 2, 3, 4] - Total swaps needed: 2 Example case 2. - The initial order is [1, 3, 4, 2]. Anna can swap the books as follows: 1. Swap book 4 with book 2: [1, 3, 2, 4] 2. Swap book 3 with book 2: [1, 2, 3, 4] - Total swaps needed: 2","solution":"def min_swaps_to_sort(books): This function takes a list \'books\' representing the current order of the books and returns the minimum number of swaps required to sort the books in ascending order of their indices. n = len(books) visited = [False] * n swaps = 0 # Pair each book value with its index and sort based on the book value book_positions = sorted([(book, i) for i, book in enumerate(books)]) for i in range(n): if visited[i] or book_positions[i][1] == i: # either already visited or already in the correct position continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = book_positions[x][1] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps def min_swaps_from_cases(test_cases): This function takes a list of test cases and returns a list with the minimum number of swaps for each test case. Each test case is represented as a tuple (N, books), where \'N\' is the number of books and \'books\' is the list of books. results = [] for N, books in test_cases: results.append(min_swaps_to_sort(books)) return results"},{"question":"=====Problem Statement===== XYZ University is conducting an online examination for its students. As part of the test system, the university needs to validate the submission timestamps of the test answers. Each submission timestamp must follow the rules below: It should be exactly 19 characters long. It must follow the format: YYYY-MM-DD HH:MM:SS Year (YYYY) must be a 4-digit number that is a leap year. Month (MM) should be from 01 to 12. Day (DD) must be valid for the given month and year. Hour (HH) should be from 00 to 23. Minute (MM) should be from 00 to 59. Second (SS) should be from 00 to 59. =====Input Format===== The first line contains an integer N, the number of timestamps to validate. The next N lines contain a timestamp in the format YYYY-MM-DD HH:MM:SS. =====Output Format===== For each submission timestamp, print \'Valid\' if it is valid. Otherwise, print \'Invalid\', on separate lines. Do not print the quotation marks. =====Sample Input===== 2 2020-02-29 12:45:59 2019-02-29 12:45:59 =====Sample Output===== Valid Invalid =====Explanation===== The first timestamp is valid as 2020 is a leap year, and February has 29 days. The second timestamp is invalid because 2019 is not a leap year; therefore, February cannot have 29 days.","solution":"import datetime def is_leap_year(year): Returns True if the given year is a leap year, otherwise False. return (year % 4 == 0) and (year % 100 != 0 or year % 400 == 0) def validate_timestamp(timestamp): Validates the format and values of the given timestamp. if len(timestamp) != 19: return \'Invalid\' try: year, month, day = int(timestamp[:4]), int(timestamp[5:7]), int(timestamp[8:10]) hour, minute, second = int(timestamp[11:13]), int(timestamp[14:16]), int(timestamp[17:19]) except ValueError: return \'Invalid\' if not is_leap_year(year): if month == 2 and day > 28: return \'Invalid\' try: datetime.datetime(year, month, day, hour, minute, second) except ValueError: return \'Invalid\' return \'Valid\' def validate_timestamps(timestamps): Given a list of timestamps, validate each one and return the results. results = [] for timestamp in timestamps: results.append(validate_timestamp(timestamp)) return results"},{"question":"Chris is a game developer working on a new game. In this game, the character can move in four directions: up, down, left, and right. Chris has a rectangular game grid with N rows and M columns. Each cell in the grid is either walkable (\'.\') or contains an obstacle (\'#\'). Given the starting position of the character, help Chris determine the minimum number of steps required for the character to reach a target position. If it is impossible for the character to reach the target, return -1. -----Input----- The first line contains an integer T, denoting the number of test cases. Each of the following T sets contains: 1. Two space-separated integers N and M (the number of rows and columns in the grid). 2. Two space-separated integers Sx, Sy (the starting row and column, 0-based). 3. Two space-separated integers Tx, Ty (the target row and column, 0-based). 4. N lines, each containing M characters (either \'.\' or \'#\'), representing the game grid. -----Output----- For each test case, output the minimum number of steps required to reach the target position from the starting position, or -1 if it is impossible. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 1000 - 0 ≤ Sx, Sy, Tx, Ty < N, M - The starting and target positions are always walkable (\'.\'). -----Example----- Input: 2 5 5 0 0 4 4 ..... .#. ..... .#. ..... 3 3 0 0 2 2 ..#. .#.. .... Output: 8 4 Note: For the first example, the character starts at position (0, 0) and needs 8 steps to reach (4, 4). For the second example, the character starts at position (0, 0) and needs 4 steps to reach (2, 2).","solution":"from collections import deque def min_steps_to_target(N, M, Sx, Sy, Tx, Ty, grid): # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS setup queue = deque([(Sx, Sy)]) visited = [[False] * M for _ in range(N)] visited[Sx][Sy] = True steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == (Tx, Ty): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) steps += 1 return -1 def solve_game(T, test_cases): results = [] for case in test_cases: N, M, Sx, Sy, Tx, Ty, grid = case result = min_steps_to_target(N, M, Sx, Sy, Tx, Ty, grid) results.append(result) return results # Example test cases input example_test_cases = [ ( 5, 5, 0, 0, 4, 4, [ \\".....\\", \\".#.\\", \\".....\\", \\".#.\\", \\".....\\" ] ), ( 3, 3, 0, 0, 2, 2, [ \\"..#\\", \\".#.\\", \\"...\\" ] ), ] # Running example test cases T = 2 results = solve_game(T, example_test_cases) for res in results: print(res)"},{"question":"Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center). For example: Given binary tree [1,2,2,3,4,4,3], 1 / 2 2 / / 3 4 4 3 returns true. But the following binary tree [1,2,2,null,3,null,3], 1 / 2 2 3 3 returns false.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_symmetric(root): def is_mirror(t1, t2): if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and is_mirror(t1.right, t2.left) and is_mirror(t1.left, t2.right) return is_mirror(root, root)"},{"question":"Write a function that receives a list of integers and returns a new list containing those integers in sorted order but with duplicates removed. The input list may contain positive or negative integers and may also be empty. Examples: ```python [5, 3, 1, 4, 4, 2, 5] => [1, 2, 3, 4, 5] [-1, -3, -2, -2, -1] => [-3, -2, -1] [] => [] [7] => [7] ```","solution":"def sort_and_unique(int_list): This function receives a list of integers and returns a new list containing those integers in sorted order but with duplicates removed. return sorted(set(int_list))"},{"question":"Given a 2D grid of size `m x n` where each cell contains either a \'0\' (representing water) or a \'1\' (representing land), we have to identify the number of connected land masses. Each land mass is formed by connecting adjacent \'1\'s vertically and horizontally (no diagonals). The grid is completely surrounded by water. Return the number of distinct islands in the grid. Example 1: Input: [[1,1,0,0,0], [1,1,0,0,1], [0,0,0,1,1], [0,0,0,0,0], [0,0,0,1,1]] Output: 3 Example 2: Input: [[1,1,0,0,0], [1,0,0,0,0], [0,0,0,0,1]] Output: 2 Note: - `1 <= m, n <= 100` - The input grid contains only 0s and 1s You need to implement the function: ```python def numIslands(grid: List[List[int]]) -> int: # your code here ```","solution":"def numIslands(grid): if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' # Mark as visited dfs(grid, i + 1, j) dfs(grid, i - 1, j) dfs(grid, i, j + 1) dfs(grid, i, j - 1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': dfs(grid, i, j) count += 1 return count"},{"question":"In this challenge, you are to implement a function that simulates an **infinite grid** where lights can be toggled on or off. The function will accept a series of instructions and return the state of all lights that are on after all instructions have been processed. Input The function `process_instructions` will receive a list of instructions with each instruction formatted as follows: `\\"toggle x,y\\"`, where `x` and `y` are integers representing the coordinates of the light to be toggled. Output The function will return a list of tuples representing the coordinates of all lights that are on. How It Works - Initially, all lights in the grid are off. - Each `\\"toggle x,y\\"` instruction changes the state of the light at the coordinates `(x, y)` from off to on or from on to off. - Once all the instructions have been processed, return a sorted list of all coordinates where the light is on. Test Example ```python instructions = [\'toggle 0,0\', \'toggle 1,1\', \'toggle 0,0\'] result = [(1,1)] print(process_instructions(instructions) == result) # True \'\'\' Step-by-step breakdown: Initial state: {} Step 1: toggle 0,0 -> {(0,0)} Step 2: toggle 1,1 -> {(0,0), (1,1)} Step 3: toggle 0,0 -> {(1,1)} Return sorted list of lights that are on: [(1,1)] \'\'\' ``` Technical Details - Coordinates `x` and `y` will always be valid integers. - The number of instructions provided will be at least 1 and will not exceed 1000. - Coordinates can be negative, zero, or positive. The grid is conceptually infinite. - The output list should be sorted in ascending order based on the coordinates.","solution":"def process_instructions(instructions): Processes a list of toggle instructions and returns a sorted list of tuples representing the coordinates of all lights that are on. lights = set() for instruction in instructions: toggle, coord = instruction.split() x, y = map(int, coord.split(\',\')) if (x, y) in lights: lights.remove((x, y)) else: lights.add((x, y)) return sorted(lights)"},{"question":"Write a function that takes in a list of strings and returns a new list containing all the strings that are palindromes. A palindrome is a string that reads the same forwards and backwards, ignoring case. An empty list or a list with no palindromes should result in an empty list being returned. ```Python find_palindromes([\'madam\', \'racecar\', \'apple\', \'level\']) # should return [\'madam\', \'racecar\', \'level\'] find_palindromes([\'Python\', \'Hello\', \'world\']) # should return [] find_palindromes([]) # should return [] ``` ```Haskell findPalindromes [\\"madam\\", \\"racecar\\", \\"apple\\", \\"level\\"] -- should return [\\"madam\\", \\"racecar\\", \\"level\\"] findPalindromes [\\"Python\\", \\"Hello\\", \\"world\\"] -- should return [] findPalindromes [] -- should return [] ```","solution":"def find_palindromes(strings): Returns a list of palindromes from the provided list of strings. Args: strings (list): The list of strings to be checked for palindromes. Returns: list: A list of palindrome strings. return [s for s in strings if s.lower() == s.lower()[::-1]] # Example usage: # print(find_palindromes([\'madam\', \'racecar\', \'apple\', \'level\'])) # should return [\'madam\', \'racecar\', \'level\'] # print(find_palindromes([\'Python\', \'Hello\', \'world\'])) # should return [] # print(find_palindromes([])) # should return []"},{"question":"Given two strings, first and second, determine whether the second string can be obtained by rearranging the characters of the first string (i.e., check if the second string is an anagram of the first string). Both strings are composed of lowercase English letters only. Example 1: first = \\"listen\\", second = \\"silent\\" Returns true. Example 2: first = \\"triangle\\", second = \\"integral\\" Returns true. Example 3: first = \\"apple\\", second = \\"pabble\\" Returns false. Note: - Your solution should have a time complexity better than O(n^2), where n is the length of the strings.","solution":"def are_anagrams(first, second): Returns True if the second string can be obtained by rearranging the characters of the first string, otherwise returns False. # Both strings must be of the same length to be anagrams if len(first) != len(second): return False # Use a frequency counter to compare character counts in both strings from collections import Counter return Counter(first) == Counter(second)"},{"question":"Given a list of integers representing the heights of buildings on either side of a street, you need to determine the total amount of rainwater that can be trapped between the buildings after a rain. Each integer represents the height of a building, and the width of each building (and the gap between any two buildings) is 1. Imagine the buildings and the potential water trapped between them as a histogram on a graph. Write a function that takes a list of non-negative integers as input and returns an integer representing the total amount of water trapped. Example: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: Elevation map [0,1,0,2,1,0,1,3,2,1,2,1] has 6 units of water trapped between the buildings. Note: - The input list will have a length in the range [0, 100]. - Each height in the list will be a non-negative integer not exceeding 100.","solution":"def trap_rain_water(height): Given a list of non-negative integers representing the heights of buildings, returns the total amount of rainwater that can be trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Given an array of strings words and a string chars. You can only form a string using characters from chars any number of times, but each character in chars can only be used once per formation. Find the total length of all strings in words that can be formed using the characters in chars. Example 1: Input: words = [\\"cat\\", \\"bt\\", \\"hat\\", \\"tree\\"], chars = \\"atach\\" Output: 6 Explanation: The strings that can be formed are \\"cat\\" and \\"hat\\" which have a total length of 6. Example 2: Input: words = [\\"hello\\", \\"world\\", \\"leetcode\\"], chars = \\"welldonehoneyr\\" Output: 10 Explanation: The strings that can be formed are \\"hello\\" and \\"world\\" which have a total length of 10. Constraints: 1 <= words.length <= 1000 1 <= words[i].length, chars.length <= 100 words[i] and chars consist of lowercase English letters only.","solution":"from collections import Counter def countCharacters(words, chars): Given an array of strings words and a string chars, find the total length of all strings in words that can be formed using the characters in chars. Parameters: - words (List[str]): List of words to form. - chars (str): String providing characters to form words. Returns: - int: Total length of all strings that can be formed. chars_count = Counter(chars) total_length = 0 for word in words: word_count = Counter(word) if all(word_count[char] <= chars_count[char] for char in word_count): total_length += len(word) return total_length"},{"question":"Given an array of integers, your task is to determine whether the array can be partitioned into two subarrays with equal sum. The subarrays need not be contiguous. Return true if such a partition is possible, otherwise return false. Example 1: Input: [1, 5, 11, 5] Output: true Explanation: The array can be partitioned as [1, 5, 5] and [11], with both sums equal to 11. Example 2: Input: [1, 2, 3, 5] Output: false Explanation: The array cannot be partitioned into two subarrays with equal sum. Example 3: Input: [3, 3, 3, 4, 5] Output: true Explanation: The array can be partitioned as [3, 3, 4] and [3, 5], with both sums equal to 10. Example 4: Input: [1, 1, 1, 1] Output: true Explanation: The array can be partitioned as [1, 1] and [1, 1], with both sums equal to 2. Constraint: 1 <= arr.length <= 200 1 <= arr[i] <= 100","solution":"def can_partition(nums): Determines if the input array can be partitioned into two subarrays with equal sum. Parameters: nums (list of int): The input array of integers. Returns: bool: True if partitioning is possible, otherwise False. total = sum(nums) if total % 2 != 0: return False target = total // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Write a function that takes a string as input and returns the most frequently occurring character in the string. If there are multiple characters with the same maximum frequency, return the character that appears first in the string. If the input string is empty, return an empty string. **Hint:** You might find it useful to utilize a dictionary to keep track of character frequencies and indices. Example If the input is `\\"aabbbc\\"`, then you should return `\\"b\\"`, because \'b\' appears 3 times which is more frequently than any other character. If the input is `\\"abacad\\"`, then you should return `\\"a\\"`, because \'a\' and \'a\' both appear 3 times but \'a\' appears first.","solution":"def most_frequent_char(s): Returns the most frequently occurring character in the string. If there are multiple characters with the same maximum frequency, returns the character that appears first in the string. If the input string is empty, returns an empty string. if not s: return \\"\\" char_count = {} for index, char in enumerate(s): if char in char_count: char_count[char][0] += 1 else: char_count[char] = [1, index] max_occurrence = -1 result_char = \'\' for char, (count, index) in char_count.items(): if count > max_occurrence or (count == max_occurrence and index < char_count[result_char][1]): max_occurrence = count result_char = char return result_char"},{"question":"Write a function, `dailyTemperatures`, that takes a list of integers representing daily temperatures, and returns a new list where each day’s value is the number of days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, put 0 in that day’s value in the final list. This function should take one argument: - temperatures: a list of integers (temperatures) of length from 1 to 10^5 where each integer is between -30 and 50 (inclusive). Return a list of integers. For example: ```python daily_temperatures([73, 74, 75, 71, 69, 72, 76, 73]) # [1, 1, 4, 2, 1, 1, 0, 0] daily_temperatures([30, 40, 50, 60]) # [1, 1, 1, 0] daily_temperatures([90, 80, 70, 60]) # [0, 0, 0, 0] ``` Use a stack to solve this problem efficiently.","solution":"def daily_temperatures(temperatures): This function takes a list of daily temperatures and returns a list where each element is the number of days until a warmer temperature. If there is no future day with a warmer temperature, the value is 0. Parameters: temperatures (List[int]): List of integers representing daily temperatures. Returns: List[int]: List where each element is the number of days until a warmer temperature. n = len(temperatures) answer = [0] * n stack = [] # This will store the indices of the temperatures list for i in range(n): # If the current day\'s temperature is higher than the temperature of the day at the index stored in the stack while stack and temperatures[i] > temperatures[stack[-1]]: index = stack.pop() answer[index] = i - index # Calculate the days to wait for a warmer temperature stack.append(i) # Add the current day\'s index to the stack return answer"},{"question":"You are given an integer array `nums` and an integer `k`. Your task is to implement the `SlidingWindowMax` class: - `SlidingWindowMax(int[] nums, int k)` - Initializes the object with the integer array `nums` and the sliding window size `k`. - `int[] maxSlidingWindow()` - Returns an array representing the maximum values in each sliding window of size `k`. The sliding window moves from the very left of the array to the very right. You can return the maximum values in the windows as they move. # Example: Input: ``` SlidingWindowMax slidingWindowMax = new SlidingWindowMax([1,3,-1,-3,5,3,6,7], 3); int[] result = slidingWindowMax.maxSlidingWindow(); ``` Output: ``` [3,3,5,5,6,7] ``` Explanation: - Window position `[1, 3, -1]` → max is 3 - Window position `[3, -1, -3]` → max is 3 - Window position `[-1, -3, 5]` → max is 5 - Window position `[-3, 5, 3]` → max is 5 - Window position `[5, 3, 6]` → max is 6 - Window position `[3, 6, 7]` → max is 7 # Constraints: - 1 <= nums.length <= 10^5 - -10^4 <= nums[i] <= 10^4 - 1 <= k <= nums.length Implement the `SlidingWindowMax` class and relevant methods to achieve the described functionality.","solution":"from collections import deque class SlidingWindowMax: def __init__(self, nums, k): self.nums = nums self.k = k def maxSlidingWindow(self): deq = deque() result = [] for i in range(len(self.nums)): # Remove elements not within the sliding window if deq and deq[0] < i - self.k + 1: deq.popleft() # Remove elements smaller than the current element from the deque while deq and self.nums[deq[-1]] < self.nums[i]: deq.pop() deq.append(i) # Collect the maximum element of the current window if i >= self.k - 1: result.append(self.nums[deq[0]]) return result"},{"question":"Task Dina loves to play with strings. She often creates special strings by rearranging the characters of the given strings. A string is considered special if it has at least one vowel (a, e, i, o, u) and at least one consonant. Dina wants you to help her find out if a given string can be rearranged to form a special string. Write a function that checks whether a given string can be rearranged to form a special string as defined above. # Input/Output - `[input]` string `s` Non-empty string consisting of only lowercase English letters. - `[output]` a boolean value `true` if the string can be rearranged to form a special string else `false`.","solution":"def can_form_special_string(s): Checks if the given string \'s\' can be rearranged to form a special string which contains at least one vowel and at least one consonant. Parameters: s (str): The input string to check. Returns: bool: True if the string can form a special string, False otherwise. vowels = set(\'aeiou\') has_vowel = has_consonant = False for char in s: if char in vowels: has_vowel = True else: has_consonant = True if has_vowel and has_consonant: return True return False"},{"question":"Given an array of integers, each representing the height of a building, imagine it’s raining heavily. An individual building can trap a certain amount of rainwater depending on the heights of the buildings on its left and right. Write an algorithm to calculate the total amount of rainwater that can be trapped when viewed from the front. The structure to get the water trapped is determined as follows: - Each element in the array represents the height of a building on that index. - The element can collect water if there is a taller or same-height building on both the left and the right side of the building. Return the total quantity of water that can be trapped. Example: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The interface of buildings and trapped water is visualized as below. The blocks of water trapped are represented as: ⏹ ⏹⏹⌿⌿⌿⏹⏹⏹ ⏹▨▨▨▨▨⏹⏹ ⏹▧▧▧▧▧⏹ Constraints: - 1 <= height.length <= 20000 - 0 <= height[i] <= 1000","solution":"def trap(height): Calculate the total amount of rainwater that can be trapped. :param height: List[int] - list of integers representing the heights of the buildings :return: int - total amount of trapped rainwater if not height or len(height) < 3: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill in the left max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill in the right max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate the water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Write a function that takes an integer `n` and returns the factorial of `n`. The factorial of a non-negative integer `n` is the product of all positive integers less than or equal to `n`. For example: ```python factorial(5) == 120 ``` This is because 5! (5 factorial) is 5 * 4 * 3 * 2 * 1 = 120. You should handle the base cases where `n` is 0 or 1, as both 0! and 1! are defined as 1.","solution":"def factorial(n): Returns the factorial of the non-negative integer n. if n < 0: raise ValueError(\\"Negative integers do not have factorials.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"# Task Write a function that simulates the gameplay of the classic game \\"Snake\\". The input for the function is a list of commands representing the snake\'s movements. The output should be the final position of the snake after executing all the commands. Assume the game is played on an infinite grid starting at position (0, 0). # Rules General rules * The snake starts at the origin (0, 0) of the grid. * The grid is infinite in size with the x and y coordinates extending to positive and negative infinity. * Commands are represented as a list of strings, where each string can be: * \'U\' for up * \'D\' for down * \'L\' for left * \'R\' for right Movement * Each command moves the snake one unit in the specified direction. * \'U\' increases the y-coordinate by 1 * \'D\' decreases the y-coordinate by 1 * \'L\' decreases the x-coordinate by 1 * \'R\' increases the x-coordinate by 1 # Input * A list of strings `commands` representing the movements of the snake. # Output * A tuple `(x, y)` representing the final coordinates of the snake after executing all commands. # Example ```python assert simulate_snake_game([\'U\', \'U\', \'R\', \'D\', \'L\', \'L\']) == (-1, 1) assert simulate_snake_game([\'R\', \'R\', \'D\', \'D\', \'L\', \'U\']) == (1, -1) assert simulate_snake_game([]) == (0, 0) # No movement, remain at the origin. ```","solution":"def simulate_snake_game(commands): Simulate the snake game and return the final position after executing all commands. :param commands: List of strings representing the movements (\'U\', \'D\', \'L\', \'R\') :return: Tuple (x, y) representing the final coordinates of the snake x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y)"},{"question":"Given an array of integers, nums, and an integer k, where 1 ≤ k ≤ nums.length. Find the k-th largest element in the array. You may assume the input array always contains at least k elements. Example: Input: nums = [3, 2, 1, 5, 6, 4], k = 2 Output: 5 Explanation: The 2nd largest element in the array is 5. Note: Do not use built-in sorting functionality to solve this problem. Optimal solutions to this can achieve O(n) time complexity.","solution":"def find_kth_largest(nums, k): Find the k-th largest element in an array. Params: - nums (list of int): The array of integers. - k (int): The k-th largest index (1-based). Returns: - int: The k-th largest element in the array. def partition(left, right, pivot_index): pivot_value = nums[pivot_index] # Move pivot to end nums[pivot_index], nums[right] = nums[right], nums[pivot_index] store_index = left # Move all larger elements to the left for i in range(left, right): if nums[i] > pivot_value: nums[store_index], nums[i] = nums[i], nums[store_index] store_index += 1 # Move pivot to its final place nums[right], nums[store_index] = nums[store_index], nums[right] return store_index def quick_select(left, right, k_smallest): if left == right: return nums[left] # Choose a random pivot index pivot_index = left + (right - left) // 2 pivot_index = partition(left, right, pivot_index) # The pivot is in its final sorted position if k_smallest == pivot_index: return nums[k_smallest] elif k_smallest < pivot_index: return quick_select(left, pivot_index - 1, k_smallest) else: return quick_select(pivot_index + 1, right, k_smallest) return quick_select(0, len(nums) - 1, k - 1)"},{"question":"=====Function Descriptions===== Sum and Product The numpy library has built-in functions to find the sum and product of the elements in an array. For example: import numpy my_array = numpy.array([[1, 2], [3, 4]]) print(numpy.sum(my_array)) #Output: 10 print(numpy.prod(my_array)) #Output: 24 We can also specify the axis along which we want to find the sum or product. For example, to find the sum along axis 0 (columns): print(numpy.sum(my_array, axis=0)) #Output: [4 6] =====Problem Statement===== You are given a NxM integer array matrix with space separated elements (N = rows and M = columns). Your task is to print the sum and product of all the elements in the array, and then print the sum along the rows and columns. =====Input Format===== The first line contains the space separated values of N and M. The next N lines contain the space separated elements of M columns. =====Output Format===== First, print the sum of all the elements. Second, print the product of all the elements. Third, print the sum along each row. Finally, print the sum along each column. ===Programming Language=== Python 3.x","solution":"import numpy as np def sum_and_product(matrix): Computes the sum and product of all elements in the matrix, the sum along each row and the sum along each column. Parameters: matrix (list of list of int): NxM integer array Returns: tuple: (sum_all, prod_all, sum_rows, sum_columns) np_matrix = np.array(matrix) sum_all = np.sum(np_matrix) prod_all = np.prod(np_matrix) sum_rows = np.sum(np_matrix, axis=1) sum_columns = np.sum(np_matrix, axis=0) return sum_all, prod_all, sum_rows, sum_columns"},{"question":"Create a function `extract_domain()` that takes a string containing one or more email addresses and returns a list of all unique domain names. The domain name is the part of the email after the \'@\' symbol, up to the end of the email address or the next space. ```python >>> emails = \\"Reach out at info@company.com, sales@shop.net, or support@service.org for more details.\\" >>> extract_domain(emails) [\'company.com\', \'shop.net\', \'service.org\'] ``` The email addresses in the string are separated by spaces, commas, or periods. Return the domain names as a list of strings without any duplicates and in the order they first appear in the input string.","solution":"import re def extract_domain(emails): Extracts unique domain names from a string containing one or more email addresses. Args: emails (str): A string containing email addresses Returns: List[str]: A list of unique domain names # Use regular expressions to find all occurrences of domains domains = re.findall(r\'@w+.w+\', emails) # Extract domain names by removing the leading \'@\' domain_names = set(domain[1:] for domain in domains) # Return unique domain names preserving the input order return list(domain_names)"},{"question":"Write a function `balance_parentheses(expression)` that takes a string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' and returns a boolean indicating whether the parentheses, braces, and brackets in the expression are balanced (i.e., every opening brace has a corresponding closing brace in the correct order). Example: - `balance_parentheses(\\"(){}[]\\")` should return `True` because all types of braces are balanced. - `balance_parentheses(\\"(]\\")` should return `False` because the parentheses are not balanced. - `balance_parentheses(\\"([{}])\\")` should return `True` because all types of braces are balanced and correctly nested. - `balance_parentheses(\\"(((\\")` should return `False` because there are unbalanced opening parentheses.","solution":"def balance_parentheses(expression): Returns True if the parentheses, braces, and brackets in the expression are balanced, otherwise returns False. stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in expression: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or matching_parentheses[char] != stack.pop(): return False else: # Invalid character return False return stack == []"},{"question":"You are given a matrix of \'0\'s and \'1\'s with 0 representing water and 1 representing land. An island is defined as a group of 1\'s (land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the matrix are surrounded by water. Count the number of distinct islands. Example: Input: [ [1,1,0,0,0], [1,1,0,0,0], [0,0,0,1,1], [0,0,0,1,1] ] Output: 2 Note: The idea here is to treat the whole matrix as a graph and then perform either BFS or DFS to find all the connected components (islands).","solution":"def count_islands(matrix): Returns the number of distinct islands in the given matrix. An island is defined as a group of 1\'s (land) connected 4-directionally (horizontal or vertical). if not matrix: return 0 rows = len(matrix) cols = len(matrix[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): stack = [(r, c)] while stack: x, y = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and matrix[nx][ny] == 1 and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) num_islands = 0 for r in range(rows): for c in range(cols): if matrix[r][c] == 1 and not visited[r][c]: num_islands += 1 visited[r][c] = True dfs(r, c) return num_islands"},{"question":"Course Prerequisites You are given a list of courses you need to complete, represented by numbers 0 through n-1, and a list of prerequisites. A prerequisite [a, b] indicates that you must complete course b before taking course a. Determine if it is possible to finish all courses. Write a function `canFinishCourses(n: int, prerequisites: List[List[int]]) -> bool` that returns a boolean value indicating whether it is possible to finish all the courses given the prerequisites. Example 1: Input: n = 2, prerequisites = [[1,0]] Output: True Explanation: There are a total of 2 courses. To take course 1 you should have finished course 0. So it is possible. Example 2: Input: n = 2, prerequisites = [[1,0],[0,1]] Output: False Explanation: There are a total of 2 courses. To take course 1 you should have finished course 0, and to take course 0 you should have finished course 1. It is impossible. Constraints: - The number of courses, `n`, is in the range [1, 2000]. - The number of prerequisites is in the range [0, 5000]. - Prerequisites[i].length == 2 - 0 <= prerequisites[i][0], prerequisites[i][1] < n","solution":"from typing import List from collections import defaultdict, deque def canFinishCourses(n: int, prerequisites: List[List[int]]) -> bool: Returns whether it is possible to finish all the courses given the prerequisites. # Create an adjacency list for the graph graph = defaultdict(list) # Create an indegree array to count dependencies indegree = [0] * n # Build the graph and fill the indegree array for course, prereq in prerequisites: graph[prereq].append(course) indegree[course] += 1 # Use a queue to perform BFS queue = deque([i for i in range(n) if indegree[i] == 0]) count_of_finished_courses = 0 while queue: current_course = queue.popleft() count_of_finished_courses += 1 for next_course in graph[current_course]: indegree[next_course] -= 1 if indegree[next_course] == 0: queue.append(next_course) return count_of_finished_courses == n"},{"question":"You are given a list of integers. Write a function that returns the second largest number in the list. If the list contains less than 2 elements, return \\"List needs at least two elements\\". Input: [3, 1, 4, 1, 5, 9] Output: 5","solution":"def second_largest(numbers): Returns the second largest number in the list. If the list contains less than 2 elements, return \\"List needs at least two elements\\". if len(numbers) < 2: return \\"List needs at least two elements\\" first, second = float(\'-inf\'), float(\'-inf\') for num in numbers: if num > first: first, second = num, first elif num > second and num != first: second = num return second if second != float(\'-inf\') else \\"No second largest element\\""},{"question":"Given two string inputs representing a binary number `A` and `B`, return the sum of these two binary numbers as a binary string. The input strings will not contain any leading zeros unless the string itself is \\"0\\". The length of each input string will not exceed 10^4. Perform addition without converting the inputs into decimal form. Example `sumBinary(\\"101\\", \\"11\\") = \\"1000\\"`, because 101 (5 in decimal) + 11 (3 in decimal) = 1000 (8 in decimal). `sumBinary(\\"110\\", \\"110\\") = \\"1100\\"`, because 110 (6 in decimal) + 110 (6 in decimal) = 1100 (12 in decimal). `sumBinary(\\"1\\", \\"1\\") = \\"10\\"`, because 1 + 1 = 10 (2 in decimal). Good luck! If you like this problem, please try: - [Add Two Numbers](https://leetcode.com/problems/add-two-numbers/) - [Binary Search](https://leetcode.com/problems/binary-search/)","solution":"def sumBinary(A, B): Returns the sum of two binary numbers A and B as a binary string. max_len = max(len(A), len(B)) # Padding the binary strings with leading zeros to make them of equal length A = A.zfill(max_len) B = B.zfill(max_len) carry = 0 result = [] # Perform binary addition from the least significant bit (rightmost) for i in range(max_len - 1, -1, -1): bit_sum = carry bit_sum += 1 if A[i] == \'1\' else 0 bit_sum += 1 if B[i] == \'1\' else 0 # Append the current bit to the result result.append(\'1\' if bit_sum % 2 == 1 else \'0\') # Update the carry carry = 0 if bit_sum < 2 else 1 # If there\'s a carry left after the final addition, add it to the result if carry != 0: result.append(\'1\') # The result is currently in reverse order result.reverse() return \'\'.join(result)"},{"question":"You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them. We repeatedly make duplicate removals on s until we no longer can. Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique. Example 1: Input: s = \\"abbaca\\" Output: \\"ca\\" Explanation: For example, in \\"abbaca\\" we could remove \\"bb\\" since the letters are adjacent and equal, and this is the only possible move. The result of this move is that the string is \\"aaca\\", of which only \\"aa\\" is possible to remove next, giving us the final string \\"ca\\". Example 2: Input: s = \\"azxxzy\\" Output: \\"ay\\" Explanation: In \\"azxxzy\\", we remove \\"xx\\" first, then we get \\"azzy\\"; then remove \\"zz\\", we get \\"ay\\". Constraints: 1 <= s.length <= 2000 s consists of lowercase English letters.","solution":"def remove_duplicates(s: str) -> str: stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'\'.join(stack)"},{"question":"You are given a sequence of non-negative integers representing the heights of buildings arranged consecutively. You need to find the largest rectangular area that can be formed with contiguous buildings. The height of each building is given as an array where the width of each building is 1 unit. For simplicity, consider the width of the buildings and the space between them to shape continuous bars with uniform width. Input: - The first line contains an integer T, denoting the number of test cases. - For each test case, the first line contains an integer N, the number of buildings. - The second line contains N space-separated non-negative integers, where each integer represents the height of a building. Output: - For each test case, print a single integer representing the largest rectangular area that can be formed. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100,000 - 0 ≤ height of building ≤ 10,000 Sample Input: 2 7 6 2 5 4 5 1 6 5 2 4 2 0 3 Sample Output: 12 6 Explanation: For the first test case: The largest rectangular area is formed by heights {5, 4, 5} with width 3, giving an area of 3 * 4 = 12. For the second test case: The largest rectangular area is formed by heights {2, 2, 2} with width 3, giving an area of 2 * 3 = 6.","solution":"def largest_rectangle_area(heights): This function takes a list of building heights and computes the largest rectangular area that can be formed. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] heights = test_cases[i][1] results.append(largest_rectangle_area(heights)) return results"},{"question":"# Task: Write a function that takes two exponential equations of the form `a^x = b` and `c^y = d`, passed in as strings, and returns a single equation representing the relationship between `x` and `y`. The final equation should be of the form `A*log(y) + B*log(x) = C`, where A, B, and C are integers. The returned equation should use the smallest possible whole coefficients for `A`, `B`, and `C`. The function should be named `exponential_to_logarithmic` and take in two strings in the form `a^x = b` and `c^y = d`, where `a`, `b`, `c`, and `d` are positive integers and not equal to one. # Examples: ```python exponential_to_logarithmic(\\"2^x = 8\\", \\"3^y = 27\\") => \\"3log(y) + log(x) = 3\\" ``` > CALCULATION: 2^x = 8 3^y = 27 log_2(8) = x log_3(27) = y log(8) / log(2) = x log(27) / log(3) = y log(2^3) / log(2) = x log(3^3) / log(3) = y 3log(2) / log(2) = x 3log(3) / log(3) = y x = 3 y = 3 Using the equations together, we get: 3log(2) + log(x) = 3log(3) Therefore, the equation is: 3log(y) + log(x) = 3 ```python exponential_to_logarithmic(\\"5^x = 125\\", \\"2^y = 16\\") => \\"log(x) + 4log(y) = 6\\" ``` > CALCULATION: 5^x = 125 2^y = 16 log_5(125) = x log_2(16) = y log(125) / log(5) = x log(16) / log(2) = y log(5^3) / log(5) = x log(2^4) / log(2) = y 3log(5) / log(5) = x 4log(2) / log(2) = y x = 3 y = 4 Using the equations together, we get: log(5) + 4log(2) = log(5^3) Therefore, the equation is: log(x) + 4log(y) = 6 # Notes: - The goal is to eliminate the exponential variables by converting to a logarithmic form. - Ensure that the equation fits the template `A*log(y) + B*log(x) = C` and that `A`, `B`, and `C` are the smallest possible whole numbers.","solution":"import math def exponential_to_logarithmic(equation1, equation2): # Parse the input equations a_str, b_str = equation1.split(\\"^x = \\") c_str, d_str = equation2.split(\\"^y = \\") # Convert string values to integers a = int(a_str) b = int(b_str) c = int(c_str) d = int(d_str) # Calculate the exponents based on the given equations x = math.log(b, a) y = math.log(d, c) # Convert the exponents into integers if they\'re handle cleanly x = round(x) y = round(y) # A coefficient for log(y) A = y # B coefficient for log(x) B = 1 # C result C = A + 1 return f\\"{A}log(y) + {B}log(x) = {C}\\""},{"question":"Description You are given a string `S` containing lowercase alphabets and \'?\' characters. Your task is to replace all the \'?\' characters with any lowercase alphabet such that the resulting string does not contain any adjacent characters that are the same. Write a function `def replace_question_marks(S: str) -> str:` that implements this transformation. The function should return the modified string. In case it is not possible to achieve the target, return an empty string. Constraints - The length of the string `S` is between 1 and 10^5. Example # Input ``` S = \\"a?b\\" ``` # Output ``` \\"aab\\" ``` # Input ``` S = \\"??\\" ``` # Output ``` \\"ab\\" ``` # Input ``` S = \\"a?a?a\\" ``` # Output ``` \\"ababa\\" ``` # Additional Notes - Any valid solution with no adjacent characters being the same will be accepted. - The solution should be efficient enough to handle large strings within the given constraints.","solution":"def replace_question_marks(S: str) -> str: n = len(S) S = list(S) for i in range(n): if S[i] == \'?\': for c in \'abc\': if (i > 0 and S[i-1] == c) or (i < n-1 and S[i+1] == c): continue S[i] = c break return \\"\\".join(S)"},{"question":"Given a positive integer k, write a function to determine whether there exists a string with exactly k characters where no substring of length 2 or more repeats. Example 1: Input: k = 1 Output: \\"a\\" Explanation: The string \\"a\\" meets the condition as it has no substrings of length 2 or more. Example 2: Input: k = 3 Output: \\"abc\\" Explanation: The string \\"abc\\" meets the condition as there are no repeating substrings of length 2 or more. Example 3: Input: k = 2 Output: \\"ab\\" Explanation: The string \\"ab\\" meets the condition as there are no repeating substrings of length 2 or more. Example 4: Input: k = 6 Output: \\"abcdef\\" Explanation: The string \\"abcdef\\" meets the condition as there are no repeating substrings of length 2 or more. Example 5: Input: k = 25 Output: \\"abcdefghijlkmnopqrstuvwxy\\" Explanation: The string \\"abcdefghijlkmnopqrstuvwxy\\" meets the condition as there are no repeating substrings of length 2 or more. Constraints: 1 <= k <= 26","solution":"def generate_non_repeating_string(k): Generates a string of length k where no substring of length 2 or more repeats. Args: k (int): The length of the desired string. Returns: str: A string of length k with no repeating substrings of length 2 or more. if k < 1 or k > 26: return \\"\\" alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" return alphabet[:k]"},{"question":"Create a function that takes an array of integers and a target integer as parameters. The function should return the indices of the two numbers in the array that add up to the target integer. You can assume that each input has exactly one solution, and you may not use the same element twice. The function should return an array of the two indices.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the array that add up to the target integer. :param nums: List[int] - List of integers :param target: int - Target integer :return: List[int] - Indices of the two numbers adding up to the target num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index # Example Usage: # result = two_sum([2, 7, 11, 15], 9) # print(result) # Output: [0, 1]"},{"question":"Description Alice loves solving puzzles involving numbers. One day, she came across an interesting pattern. She noticed that some numbers can be expressed as the sum of two or more consecutive positive integers. For example, 15 can be expressed as 1+2+3+4+5 or 4+5+6. Alice wonders whether any given positive integer can be written in such a manner. Task You are given a positive integer **n**. Determine if **n** can be expressed as the sum of two or more consecutive positive integers. If it can, return **True**; otherwise, return **False**. **Input:** **n** - A positive integer (1 ≤ n ≤ 10<sup>9</sup>) **Output:** Return **True** if **n** can be expressed as the sum of two or more consecutive positive integers, otherwise return **False**.","solution":"def can_be_expressed_as_sum_of_consecutive(n): Returns True if the positive integer n can be expressed as the sum of two or more consecutive positive integers, otherwise returns False. # A number can be expressed as the sum of two or more consecutive integers # if it cannot be written in the form of a power of 2 (2^k) where k is a non-negative integer. return (n & (n - 1)) != 0"},{"question":"Task You are given a binary string (a string consisting of only \'0\'s and \'1\'s). Your task is to perform the following operations: 1. Count the number of contiguous substrings that have an equal number of \'0\'s and \'1\'s. Such substrings must contain exactly \'0\'s followed immediately by the same number of \'1\'s, or \'1\'s followed by an equal number of \'0\'s. 2. Return the number of such substrings found. # Example For binaryString = \\"00110011\\", the output should be 6. The substrings that meet the condition are: [\\"0011\\", \\"01\\", \\"1100\\", \\"10\\", \\"0011\\", \\"01\\"]. For binaryString = \\"10101\\", the output should be 4. The substrings that meet the condition are: [\\"10\\", \\"01\\", \\"10\\", \\"01\\"]. # Input/Output - `[input]` string `binaryString` Constraints: 1 ≤ binaryString.length ≤ 50. - `[output]` an integer","solution":"def count_binary_substrings(binaryString): Returns the number of contiguous substrings in the binary string that have equal number of \'0\'s and \'1\'s. counts = [] count = 1 # Count consecutive 0\'s and 1\'s for i in range(1, len(binaryString)): if binaryString[i] == binaryString[i-1]: count += 1 else: counts.append(count) count = 1 counts.append(count) # Count the substrings result = 0 for i in range(1, len(counts)): result += min(counts[i-1], counts[i]) return result"},{"question":"Complete the function `is_palindrome` (or equivalent, depending on your language) that determines if a given string is a [palindrome](https://en.wikipedia.org/wiki/Palindrome). A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). You may assume the input is always a valid string containing only alphanumeric characters and spaces. Examples ~~~if-not:nasm ```python is_palindrome(\\"A man a plan a canal Panama\\") ==> True is_palindrome(\\"racecar\\") ==> True is_palindrome(\\"hello\\") ==> False ``` ~~~ ~~~if:nasm ``` mov rdi, palindrome_str call is_palindrome ; where palindrome_str is a pointer to the string \\"A man a plan a canal Panama\\", returns true (non-zero) mov rdi, non_palindrome_str call is_palindrome ; where non_palindrome_str is a pointer to the string \\"hello\\", returns false (zero) mov rdi, racecar_str call is_palindrome ; where racecar_str is a pointer to the string \\"racecar\\", returns true ``` ~~~ Make sure to ignore spaces, punctuation, and capitalization while determining if the string is a palindrome.","solution":"def is_palindrome(s): Determines if a given string is a palindrome. Ignores spaces, punctuation, and capitalization. :param s: Input string :return: True if the string is a palindrome, False otherwise # Remove non-alphanumeric characters and convert to lowercase cleaned = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"A well-known problem in competitive programming is to partition an array into `k` contiguous subarrays such that the max sum of the subarrays is minimized. Let\'s define a problem around this concept. You are given an array `A` of `N` integers. You are also given an integer `k`. Your task is to partition the array into `k` contiguous subarrays such that the maximum sum of any subarray is minimized. Return the minimum possible value of the maximum sum of the subarrays after partitioning. ---Input--- The first line of input contains a single integer `T` - the number of testcases. Each testcase contains: - The first line contains two integers `N` and `k`. - The second line contains `N` integers representing the array `A`. ---Output--- For each test case, output a single integer - the minimum possible value of the maximum sum of the subarrays after partitioning. ---Constraints--- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ k ≤ N - 1 ≤ A[i] ≤ 10^4 ---Example--- Input: 2 7 3 7 2 5 10 8 5 2 1 2 3 4 5 Output: 14 9 Explanation: In the first test case, you can partition the array into `[7, 2, 5]`, `[10]`, `[8]`. The largest sum among these partitions is 14, which is the minimum possible in this case. In the second test case, you can partition the array into `[1, 2, 3]` and `[4, 5]`. The largest sum among these partitions is 9, which is the minimum possible in this case.","solution":"def can_partition(nums, max_sum, k): subarray_sum, subarray_count = 0, 1 for num in nums: if subarray_sum + num > max_sum: subarray_sum = num subarray_count += 1 if subarray_count > k: return False else: subarray_sum += num return True def min_max_subarray_sum(nums, k): left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if can_partition(nums, mid, k): right = mid else: left = mid + 1 return left def partition_and_find_min_max_sum(T, test_cases): results = [] for i in range(T): N, k = test_cases[i][0] A = test_cases[i][1] results.append(min_max_subarray_sum(A, k)) return results"},{"question":"# Task Given an array of integers `nums` representing the block heights you need to jump over, and an integer `k` representing the maximum height you can jump, determine if you can successfully reach the end of the array by jumping from block to block. You start at the first block in the array and must reach the last block. Each jump to the next block can only occur if the height difference between the current block and the next block is less than or equal to `k`. Return `true` if you can reach the last block, otherwise, return `false`. # Example For `nums = [1, 3, 2, 4, 3, 5]` and `k = 2`, the output should be `true`. For `nums = [1, 3, 7, 2, 4, 3]` and `k = 2`, the output should be `false`. # Input/Output - `[input]` integer array `nums` Non-empty array of positive integers. Constraints: `1 ≤ nums[i] ≤ 100.` - `[input]` integer `k` A positive integer representing the maximum height you can jump. Constraints: `1 ≤ k ≤ 100.` - `[output]` a boolean Return `true` if you can reach the last block, otherwise return `false`.","solution":"def can_reach_end(nums, k): Determine if you can successfully reach the end of the array by jumping from block to block. Parameters: nums (list): An array of integers representing the block heights. k (int): An integer representing the maximum height you can jump. Returns: bool: True if you can reach the last block, otherwise False. for i in range(len(nums) - 1): if abs(nums[i + 1] - nums[i]) > k: return False return True"},{"question":"Given a list of integers, write a function `get_mode(numbers)` that computes and returns the mode of the list. The mode is the number that appears most frequently in the list. If multiple numbers have the same highest frequency, return the smallest number among them. Example: ```python def get_mode(numbers): Given a list of integers, return the mode (the number that appears most frequently). :param numbers: List[int] - A list of integers :return: int - The mode of the list # Your implementation here # Example Usage print(get_mode([1, 2, 2, 3, 3, 4])) # Output: 2 print(get_mode([1, 1, 2, 2, 3, 3])) # Output: 1 print(get_mode([5, 1, 2, 2, 3, 1, 3, 4])) # Output: 1 ```","solution":"def get_mode(numbers): Given a list of integers, return the mode (the number that appears most frequently). :param numbers: List[int] - A list of integers :return: int - The mode of the list from collections import Counter if not numbers: return None count = Counter(numbers) max_frequency = max(count.values()) modes = [num for num, freq in count.items() if freq == max_frequency] return min(modes)"},{"question":"In the local market, there is a collection of contiguous stalls that sell exotic fruits. Each stall sells fruits at a different price, and the prices are known for each stall. Ravi, an exotic fruit enthusiast, plans to buy fruits from multiple stalls, but he wants to minimize the total cost of his purchases. However, there is a catch - Ravi can only buy fruits from one continuous segment of stalls due to the market\'s layout. Given the prices of fruits at the stalls, Ravi needs a way to determine the minimum possible cost he has to pay if he decides to buy fruits from any continuous segment of stalls. -----Input format----- Line 1: A single integer N, the total number of stalls in the market. Line 2: N non-negative integers, representing the cost of fruits at each stall. -----Output format----- A single non-negative integer, the minimum total cost for purchasing fruits from any continuous segment of stalls. -----Sample Input 1----- 5 4 2 3 5 1 -----Sample Output 1----- 1 (Explanation: The cheapest segment is at the last stall with a cost of 1.) -----Sample Input 2----- 6 6 5 3 2 8 7 -----Sample Output 2----- 2 (Explanation: The cheapest segment is at the fourth stall with a cost of 2.) -----Test data----- There is only one subtask worth 100 marks. In all inputs: • 1 ≤ N ≤ 105 • The cost of fruits at each stall is between 0 and 10^4, inclusive. -----Live evaluation data----- There are 12 test inputs on the server during the exam.","solution":"def min_cost_segment(N, costs): Determines the minimum possible cost Ravi has to pay for fruits from any continuous segment of stalls. Parameters: N (int): Total number of stalls in the market. costs (list of int): List of costs at each stall. Returns: int: The minimum total cost for purchasing fruits from any continuous segment of stalls. min_cost = float(\'inf\') current_sum = 0 for cost in costs: current_sum += cost if current_sum < min_cost: min_cost = current_sum if current_sum > 0: current_sum = 0 return min_cost"},{"question":"Alicia loves working with strings and sequences. Recently, she came across the following problem: Given a string S consisting of lowercase English letters, she wants to check if it is possible to rearrange the characters in S such that no two adjacent characters are the same. If it\'s possible, she wants to know one possible arrangement. -----Input:----- - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string S. -----Output:----- For each test case, output \\"YES\\" if it\'s possible to rearrange the string as described. Otherwise, output \\"NO\\". If the answer is \\"YES\\", also print one possible rearrangement on the same line. -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 10^4 -----Sample Input:----- 3 aab aaab aabb -----Sample Output:----- YES aba NO YES abab -----EXPLANATION:----- In the first test case, the string \\"aab\\" can be rearranged to \\"aba\\". In the second test case, it is impossible to rearrange \\"aaab\\" to meet the requirements as there will always be two adjacent \'a\'s. In the third test case, the string \\"aabb\\" can be rearranged to \\"abab\\".","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_string(s): Returns a possible rearrangement of the string s such that no two adjacent characters are the same. If it\'s not possible, returns None. count = Counter(s) max_heap = [] for char, freq in count.items(): heappush(max_heap, (-freq, char)) prev_char, prev_freq = None, 0 result = [] while max_heap: freq, char = heappop(max_heap) result.append(char) if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 rearranged_s = \'\'.join(result) if len(rearranged_s) == len(s): return rearranged_s else: return None def can_rearrange_without_adjacent_dups(t, test_cases): results = [] for s in test_cases: rearranged_s = rearrange_string(s) if rearranged_s: results.append(f\\"YES {rearranged_s}\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an integer array `nums` and an integer `k`. Write a function that returns the length of the longest contiguous subarray whose sum equals `k`. If there exists no such subarray, return `0`. Your solution should run in O(n) time complexity. Function Signature: `def maxSubArrayLen(nums: List[int], k: int) -> int:` # Examples: ``` maxSubArrayLen([1, -1, 5, -2, 3], 3) --> 4 maxSubArrayLen([-2, -1, 2, 1], 1) --> 2 maxSubArrayLen([1, 2, 3], 6) --> 3 maxSubArrayLen([1, 0, -1], -1) --> 2 maxSubArrayLen([1, 2, 3], 7) --> 0 ``` # Constraints: - `1 <= len(nums) <= 10^5` - `-10^4 <= nums[i] <= 10^4` - `-10^9 <= k <= 10^9` # Hint: Use a hashmap to store the cumulative sum and its index. This way, you can achieve the solution in linear time.","solution":"from typing import List def maxSubArrayLen(nums: List[int], k: int) -> int: Returns the length of the longest contiguous subarray that sums to k. cum_sum_to_index = {0: -1} # cumulative sum mapped to index cum_sum = 0 max_len = 0 for i, num in enumerate(nums): cum_sum += num if (cum_sum - k) in cum_sum_to_index: max_len = max(max_len, i - cum_sum_to_index[cum_sum - k]) if cum_sum not in cum_sum_to_index: cum_sum_to_index[cum_sum] = i return max_len"},{"question":"Given a string representing a sequence of numbers, determine the length of the longest palindromic subsequence. A palindromic subsequence is a sequence that reads the same backward as forward and can be formed by deleting some (or none) of the characters of the original string without changing the order of the remaining characters. Write a function `longestPalindromicSubsequence(s: str) -> int`, that takes in a string `s` and returns the length of the longest palindromic subsequence in `s`. **Examples:** - longestPalindromicSubsequence(\\"bbbab\\") should return 4. The longest palindromic subsequence is \\"bbbb\\". - longestPalindromicSubsequence(\\"cbbd\\") should return 2. The longest palindromic subsequence is \\"bb\\". - longestPalindromicSubsequence(\\"aabcdcb\\") should return 5. The longest palindromic subsequence is \\"abcba\\". **Notes:** - The input string will contain only lowercase letters of the English alphabet. - The length of the input string will be between 1 and 1000.","solution":"def longestPalindromicSubsequence(s: str) -> int: Returns the length of the longest palindromic subsequence in the given string s. n = len(s) # Create a 2D array to store lengths of longest palindromic subsequences. dp = [[0] * n for _ in range(n)] # All sub-strings of length 1 are palindromes of length 1. for i in range(n): dp[i][i] = 1 # Build the table. for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"You are given a grid with R rows (numbered 1 through R) and C columns (numbered 1 through C). Each cell of this grid either contains a tree (\'T\'), fire (\'F\') or empty ground (\'.\'). In each step, the fire spreads to all adjacent cells (up, down, left, and right) that contain trees; the trees in these cells catch fire. No fire spreads to cells that are already on fire or contain empty ground. Calculate the number of steps required to burn all the trees in the grid. If not all trees can be set on fire, return -1. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers R and C. - Each of the following R lines contains a single string with length C. For each valid i, j, the j-th character in the i-th string is: - \'T\' if the cell in the i-th row and the j-th column contains a tree - \'F\' if this cell is on fire - \'.\' if this cell is empty ground -----Output----- For each test case, print a single line containing one integer — the number of steps required to burn all the trees, or -1 if not all trees can be burned. -----Constraints----- - 1 le T le 10 - 1 le R, C le 50 - each string contains only characters \'T\', \'F\', and \'.\' -----Example Input----- 4 3 3 .T. FTF .TT 2 2 TF .T 2 3 ... F.T 3 3 .T. FT. .T. -----Example Output----- 2 1 -1 2","solution":"from collections import deque def burn_all_trees(R, C, grid): queue = deque() visited = [[False for _ in range(C)] for _ in range(R)] steps = 0 # Initialize the queue with cells that are on fire for i in range(R): for j in range(C): if grid[i][j] == \'F\': queue.append((i, j)) visited[i][j] = True directions = [(0,1), (1,0), (0,-1), (-1,0)] total_trees = sum(row.count(\'T\') for row in grid) if total_trees == 0: return 0 while queue: next_queue = deque() while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and not visited[nx][ny]: if grid[nx][ny] == \'T\': grid[nx][ny] = \'F\' visited[nx][ny] = True next_queue.append((nx, ny)) queue = next_queue if queue: # count steps only if there are new fires steps += 1 for row in grid: if \'T\' in row: return -1 return steps def fire_simulation(num_cases, cases): results = [] for case in cases: R, C, grid = case result = burn_all_trees(R, C, grid) results.append(result) return results"},{"question":"Design a function `reverseKGroup` that takes in a linked list and an integer `k`, reversing the nodes of the list `k` at a time, and returning the modified list. - The function should only reverse if there are at least `k` nodes remaining in the list. If there are fewer nodes than `k` left, the nodes should remain in their original order. - You may assume that the linked list\'s length is always a multiple of `k`. For example, given the linked list `1->2->3->4->5` and `k=2`, you should return `2->1->4->3->5`. For `k=3`, given `1->2->3->4->5->6->7->8->9`, you should return `3->2->1->6->5->4->9->8->7`. **Function Signature:** `def reverseKGroup(head: ListNode, k: int) -> ListNode:` **Constraints:** - The number of nodes in the linked list is in the range `[1, 10^4]`. - `0 <= Node.val <= 1000` - `1 <= k <= 1000` Nodes in the linked list are defined as: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` **Hint**: Consider maintaining a pointer to the current node and reversing the current block of `k` nodes by manipulating the `next` pointers.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head: ListNode, k: int) -> ListNode: def reverse_linked_list(start, end): prev, curr = None, start while curr != end: next_node = curr.next curr.next = prev prev = curr curr = next_node return prev count = 0 ptr = head # First, check the list length while ptr: count += 1 ptr = ptr.next dummy = ListNode(0) dummy.next = head prev = dummy while count >= k: curr = prev.next next_prev = curr # Move curr to the end of the k group for _ in range(k): if curr: curr = curr.next # Reverse the k-group reversed_head = reverse_linked_list(prev.next, curr) next_prev.next = curr prev.next = reversed_head prev = next_prev count -= k return dummy.next"},{"question":"You are tasked to write a function that simulates the working of an ATM machine. The function should handle the following operations: 1. Depositing money into the account. 2. Withdrawing money from the account. 3. Checking the current balance of the account. The function will receive a list of commands, where each command is a string formatted as follows: - `\\"deposit <amount>\\"` - Adds the specified amount to the account balance. - `\\"withdraw <amount>\\"` - Subtracts the specified amount from the account balance if there are sufficient funds. If there are insufficient funds, do not withdraw any money and skip to the next command. - `\\"balance\\"` - Returns the current balance. The function should return a list of balances whenever the `\\"balance\\"` command is given. # Example ```python ATM([\\"deposit 100\\", \\"balance\\", \\"withdraw 30\\", \\"balance\\", \\"withdraw 50\\", \\"balance\\", \\"withdraw 100\\", \\"balance\\"]) ``` # Output ```python [100, 70, 20, 20] ``` In this example, the sequence of operations and their effects are as follows: 1. \\"deposit 100\\": Account balance is now 100. 2. \\"balance\\": Returns 100. 3. \\"withdraw 30\\": Account balance is now 70. 4. \\"balance\\": Returns 70. 5. \\"withdraw 50\\": Account balance is now 20. 6. \\"balance\\": Returns 20. 7. \\"withdraw 100\\": Insufficient funds, account balance remains 20. 8. \\"balance\\": Returns 20. **Constraints** - The amount in deposit and withdraw commands will always be non-negative integers. - The function should handle any number of commands in the input list.","solution":"def ATM(commands): balance = 0 results = [] for command in commands: parts = command.split() action = parts[0] if action == \\"deposit\\": amount = int(parts[1]) balance += amount elif action == \\"withdraw\\": amount = int(parts[1]) if amount <= balance: balance -= amount elif action == \\"balance\\": results.append(balance) return results"},{"question":"Your task is to determine the minimum number of moves required to transform one string into another, using a set of allowed operations. The allowed operations are: 1. Insert a character. 2. Delete a character. 3. Replace a character. Write a function `min_edit_distance(str1, str2)` that takes in two strings `str1` and `str2`, and returns the minimum number of edits (insertions, deletions, or substitutions) required to transform `str1` into `str2`. # Examples: ```python min_edit_distance(\\"kitten\\", \\"sitting\\") == 3 min_edit_distance(\\"flaw\\", \\"lawn\\") == 2 ``` # Explanation: For the first example: ```python \\"kitten\\" -> \\"sitten\\" (substitution of \'k\' with \'s\') \\"sitten\\" -> \\"sittin\\" (substitution of \'e\' with \'i\') \\"sittin\\" -> \\"sitting\\" (insertion of \'g\') ``` For the second example: ```python \\"flaw\\" -> \\"law\\" (deletion of \'f\') \\"law\\" -> \\"lawn\\" (insertion of \'n\') ``` # Constraints: - The length of both strings will be between 1 and 1000. - The strings will contain only lowercase letters. # Functional Signature: ```python def min_edit_distance(str1: str, str2: str) -> int: # Your code here ```","solution":"def min_edit_distance(str1, str2): Returns the minimum number of edits (insertions, deletions, or substitutions) required to transform str1 into str2. m = len(str1) n = len(str2) # Create a dp table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] in a bottom up manner for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If str1 is empty, insert all characters of str2 elif j == 0: dp[i][j] = i # If str2 is empty, remove all characters of str1 elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1])# Replace return dp[m][n]"},{"question":"The library is reorganizing its collection and wants to categorize books based on their unique tags. You are tasked with creating an algorithm that assigns books to distinct shelves based on a specific set of rules. Each book has one or more tags, and a book should belong to the shelf that best matches its most common tag. -----Input:----- - First-line will contain one integer T, the number of books. - The next T lines contain a string B_i, the tags for the i^{th} book separated by spaces. -----Output:----- Output T lines, each containing the shelf number (starting from 1) the book will be categorized into. If two or more shelves are equally suitable, choose the one with the smallest number. -----Constraints:----- - 1 leq T leq 100 - Each string B_i will contain at least one tag, and each tag will be a non-empty string of alphabetic characters. - A tag can belong to multiple books. -----Sample Input:----- 4 technology science science fiction science technology fiction art history -----Sample Output:----- 1 1 1 2 -----EXPLANATION:----- In the given sample: - The first book belongs to shelf 1 because \\"science\\" is its most common tag and it starts with a \\"science\\" tag. - The second book also belongs to shelf 1 due to its \\"science\\" tag. - The third book again matches best with \\"science\\", thus shelf 1. - The fourth book has distinct tags and starts a new, second shelf for \\"art\\".","solution":"from collections import defaultdict def categorize_books(T, book_tags): tag_shelves = {} shelf_count = 1 shelf_assignment = [] for tags in book_tags: tags_list = tags.split() shelf_numbers = [] for tag in tags_list: if tag in tag_shelves: shelf_numbers.append(tag_shelves[tag]) if not shelf_numbers: shelf_number = shelf_count shelf_count += 1 else: shelf_number = min(shelf_numbers) shelf_assignment.append(shelf_number) for tag in tags_list: if tag not in tag_shelves or tag_shelves[tag] > shelf_number: tag_shelves[tag] = shelf_number return shelf_assignment # Example usage: # Input: # T = 4 # book_tags = [\\"technology science\\", \\"science fiction\\", \\"science technology fiction\\", \\"art history\\"] # Output: [1, 1, 1, 2]"},{"question":"Implement a function that receives an input string containing words separated by spaces. Your task is to determine if the words in the string can form a palindrome when rearranged. If it\'s possible, return `True`. Otherwise, return `False`. A palindrome is a sequence of characters that reads the same backward as forward, ignoring spaces. Example ```python can_form_palindrome(\\"race car\\") == True can_form_palindrome(\\"not a palindrome\\") == False ``` Requirements - Function: `can_form_palindrome(s: str) -> bool` - Input: `s` (a string of words separated by spaces) - Output: `True` or `False` Constraints - The input string will have at least one word and no more than 1000 characters. - Words contain only lowercase alphabetic characters. Hints - You may use a dictionary or a set to keep track of character frequencies.","solution":"def can_form_palindrome(s: str) -> bool: Determines if the words in the input string can be rearranged to form a palindrome. :param s: A string of words separated by spaces :return: True if a palindrome can be formed, False otherwise from collections import Counter # Remove spaces and create a frequency count of each character s = s.replace(\\" \\", \\"\\") freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # If more than one character has an odd count, we cannot form a palindrome return odd_count <= 1"},{"question":"Emma loves painting and has built a sophisticated robotic arm that helps her paint huge canvases in record time. However, her robot is not AI-powered and can only follow a strict set of instructions. The robot can move in four directions: up, down, left, and right. Each move of the robot is represented by one of the following characters: \'U\' (up), \'D\' (down), \'L\' (left), \'R\' (right). The robot always starts from the coordinate (0, 0) on a 2D plane. Emma wants your help in determining the robot\'s final position after completing a sequence of moves. Write a program to help Emma determine the final position of the robot. -----Constraints:----- - 1 <= N <= 10^5 (length of the sequence of moves) - The sequence contains only the characters \'U\', \'D\', \'L\', \'R\' -----Input Format:----- The input consists of a single line containing a string of length N, representing the sequence of moves. -----Output Format:----- The output should be a single line containing two space-separated integers, representing the final coordinates (x, y) of the robot. -----Sample Input 1:----- UUDDLRLR -----Sample Output 1:----- 0 0 -----Sample Input 2:----- UUUURRDD -----Sample Output 2:----- 2 2","solution":"def final_position(moves): Given a sequence of moves, determines the robot\'s final position on a 2D plane starting from coordinate (0, 0). Parameters: moves (str): A string of characters where each character represents a move. Returns: tuple: The final coordinates (x, y). x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x, y"},{"question":"Bob loves playing with sequences of numbers. Recently he came across a problem where he needs to find out how many distinct increasing subsequences exist in a given sequence of integers. An increasing subsequence consists of elements that are in strictly increasing order, though not necessarily consecutive. Write a program to determine the number of distinct increasing subsequences in the sequence. -----Input----- - The first line of the input contains a single integer N denoting the number of elements in the sequence. - The second line contains N space-separated integers a_1, a_2, ..., a_N representing the elements of the sequence. -----Output----- Print a single line containing one integer ― the number of distinct increasing subsequences in the given sequence. -----Constraints----- - 1 le N le 1000 - 1 le a_i le 1000 -----Example Input----- 5 3 2 1 4 5 -----Example Output----- 15 -----Explanation----- Example case: Your task is to count all possible combinations of increasing subsequences. The increasing subsequences are: - {3}, {2}, {1}, {4}, {5} - {3, 4}, {3, 5}, {2, 4}, {2, 5}, {1, 4}, {1, 5}, {4, 5} - {3, 4, 5}, {2, 4, 5}, {1, 4, 5} There are total 15 distinct increasing subsequences.","solution":"def count_distinct_increasing_subsequences(seq): from itertools import combinations def is_increasing(subseq): return all(x < y for x, y in zip(subseq, subseq[1:])) n = len(seq) all_subsequences = set() for i in range(1, n + 1): for subseq in combinations(seq, i): if is_increasing(subseq): all_subsequences.add(subseq) return len(all_subsequences)"},{"question":"# Task Given an integer `n`, generate an `n` x `n` matrix containing integers from 1 to `n^2` in spiral order, starting from the top-left corner and moving towards the center in a clockwise direction. # Example For `n = 3`, the output should be: ``` [[1, 2, 3], [8, 9, 4], [7, 6, 5]] ``` For `n = 4`, the output should be: ``` [[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]] ``` # Input/Output - `[input]` integer `n` Constraints: `1 ≤ n ≤ 20` - `[output]` a 2D integer array A 2D array representing the n x n matrix filled in spiral order.","solution":"def generate_spiral_matrix(n): Generate an n x n matrix containing integers from 1 to n^2 in spiral order. matrix = [[0] * n for _ in range(n)] number = 1 top, bottom, left, right = 0, n - 1, 0, n - 1 while number <= n * n: for i in range(left, right + 1): matrix[top][i] = number number += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = number number += 1 right -= 1 for i in range(right, left - 1, -1): matrix[bottom][i] = number number += 1 bottom -= 1 for i in range(bottom, top - 1, -1): matrix[i][left] = number number += 1 left += 1 return matrix"},{"question":"Largest Contiguous Sum Overview You are given an integer array. You need to identify the largest sum of a contiguous subarray within the given array. For example, if the input array is [−2,1,−3,4,−1,2,1,−5,4], the contiguous subarray with the largest sum is [4,−1,2,1], with a sum of 6. Task Define a function `largestContiguousSum` that takes a list of integers as its parameter and returns the largest sum possible from any contiguous subarray. # Example ```python # Input largestContiguousSum([-2,1,-3,4,-1,2,1,-5,4]) # Output 6 ``` If in doubt, please refer to the example tests.","solution":"def largestContiguousSum(nums): Returns the largest sum of a contiguous subarray within the given array. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"There are N cities located on a straight road numbered from 1 to N from left to right. Each city i has a happiness value Hi. You are given a parameter K, which indicates the maximum number of cities you can visit consecutively. Starting from any city i, you can visit up to K consecutive cities (including the starting city i). You cannot skip any cities in this consecutive sequence. Determine the maximum sum of happiness values you can achieve by visiting up to K consecutive cities. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and K. - The second line contains N space-separated integers H1, H2, ..., HN. -----Output----- For each test case, print a single line containing one integer — the maximum sum of happiness values you can achieve by visiting up to K consecutive cities. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ K ≤ N - 1 ≤ Hi ≤ 1,000 for each valid i -----Subtasks----- Subtask #1 (100 points): original constraints -----Example----- Input: 3 5 2 1 2 3 4 5 4 3 10 20 30 40 6 4 1 100 1 2 3 4 Output: 9 90 106 -----Explanation----- Example case 1: You can achieve the maximum happiness by visiting cities 4 and 5 (4 + 5 = 9). Example case 2: You can achieve the maximum happiness by visiting cities 2, 3, and 4 (20 + 30 + 40 = 90). Example case 3: You can achieve the maximum happiness by visiting cities 2, 3, 4, and 5 (100 + 1 + 2 + 3 = 106).","solution":"def max_happiness(T, test_cases): Returns a list of maximum sums of happiness values that can be achieved by visiting up to K consecutive cities for each test case. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains: - N (int): Number of cities - K (int): Maximum number of consecutive cities that can be visited - H (list of int): List of happiness values of the cities Returns: list: Maximum sums of happiness values for each test case results = [] for t in range(T): N, K, H = test_cases[t] max_sum = 0 for i in range(N): current_sum = 0 for j in range(i, min(i + K, N)): current_sum += H[j] max_sum = max(max_sum, current_sum) results.append(max_sum) return results"},{"question":"Design and implement a function `compact_and_filter(sentence, length)` that takes a string `sentence` with multiple words and an integer `length`. The function should perform the following tasks: 1. Split the `sentence` into individual words. 2. Remove any word that is less than the given `length`. 3. Concatenate the remaining words back into a single string. The input sentence will only contain alphabetic characters and spaces, and there will be no leading or trailing spaces. **Examples:** ```python compact_and_filter(\\"The quick brown fox jumps over the lazy dog\\", 4) # Expected output: \\"quick brown jumps over lazy\\" compact_and_filter(\\"Hello world this is a test\\", 3) # Expected output: \\"Hello world this test\\" compact_and_filter(\\"One two three four five\\", 5) # Expected output: \\"three\\" ``` Write the implementation for the function `compact_and_filter(sentence, length)` in Python.","solution":"def compact_and_filter(sentence, length): Takes a string sentence and an integer length, removes words shorter than the given length, and concatenates the remaining words back into a single string. words = sentence.split() filtered_words = [word for word in words if len(word) >= length] return \' \'.join(filtered_words)"},{"question":"Implement a method that takes two strings, `s1` and `s2`, and determines if one is a permutation of the other. The method should return true if `s1` is a permutation of `s2` and false otherwise.","solution":"def is_permutation(s1, s2): Determines if one string is a permutation of the other. Args: s1 (str): The first string. s2 (str): The second string. Returns: bool: True if s1 is a permutation of s2, False otherwise. return sorted(s1) == sorted(s2)"},{"question":"You are given an integer n which represents the number of operations you need to perform on an array. Each operation is either inserting a new integer into the array or querying the median of all integers in the array so far. Your task is to implement an efficient solution to handle these operations and calculate the median correctly after each query. The median of a list is the middle number when the list is sorted. If the list size is even, the median is the average of the two middle numbers. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of operations. The next n lines contain operations. Each operation is given in one of the following two forms: - \\"Insert x\\" where x is an integer (-10^9 le x le 10^9) — Insert x into the array. - \\"Median\\" — Output the median of the array after this operation. -----Output----- For each \\"Median\\" operation, print the median. The median should be printed as a floating-point number with exactly one digit after the decimal point. -----Examples----- Input 7 Insert 1 Insert 3 Insert 2 Median Insert 5 Median Insert 4 Median Output 2.0 2.5 3.0 -----Note----- After three operations \\"Insert 1\\", \\"Insert 3\\", \\"Insert 2\\", the array becomes [1, 2, 3] and the median is 2. After the next operation \\"Insert 5\\", the array becomes [1, 2, 3, 5] and the median is frac{2+3}{2} = 2.5. After the next operation \\"Insert 4\\", the array becomes [1, 2, 3, 4, 5] and the median is 3.","solution":"import heapq class MedianFinder: def __init__(self): # Two heaps: one max heap for the left part and one min heap for the right part self.max_heap = [] # Max heap (invert values to simulate max heap) self.min_heap = [] # Min heap def insert(self, num: int): # Insert number into correct heap if not self.max_heap or num <= -self.max_heap[0]: heapq.heappush(self.max_heap, -num) else: heapq.heappush(self.min_heap, num) # Balance heaps if len(self.max_heap) > len(self.min_heap) + 1: heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) elif len(self.min_heap) > len(self.max_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) def get_median(self) -> float: if len(self.max_heap) == len(self.min_heap): return (-self.max_heap[0] + self.min_heap[0]) / 2.0 else: return -self.max_heap[0] def process_operations(n, operations): result = [] median_finder = MedianFinder() for operation in operations: if operation.startswith(\\"Insert\\"): _, num = operation.split() median_finder.insert(int(num)) elif operation == \\"Median\\": result.append(\\"{:.1f}\\".format(median_finder.get_median())) return result"},{"question":"A company has a system that manages user login sessions. Each session is represented by two timestamps indicating the start and end times of the session in the format \\"HH:MM\\". However, the system has to ensure that no two sessions overlap. Write a function that takes a list of sessions and returns true if there are no conflicts (i.e., no overlapping sessions), or false if there is at least one conflict. Each session is represented as a tuple of strings: (start_time, end_time). For example: Example 1: Input: sessions = [(\\"09:00\\", \\"10:30\\"), (\\"10:30\\", \\"11:00\\"), (\\"11:00\\", \\"12:00\\")] Output: true Explanation: None of the sessions overlap. The end time of one session is the start time of the next session. Example 2: Input: sessions = [(\\"09:00\\", \\"10:30\\"), (\\"10:00\\", \\"11:00\\"), (\\"11:00\\", \\"12:00\\")] Output: false Explanation: The sessions (\\"09:00\\", \\"10:30\\") and (\\"10:00\\", \\"11:00\\") overlap. Constraints: 1. The length of sessions list is 1 ≤ sessions.length ≤ 100. 2. Each time in the format \\"HH:MM\\" follows a 24-hour clock and is always valid.","solution":"def sessions_do_not_overlap(sessions): Returns true if there are no overlapping sessions, otherwise false. Parameters: sessions (list): A list of tuples where each tuple represents a session with start and end times. Returns: bool: True if no sessions overlap, False otherwise. sorted_sessions = sorted(sessions, key=lambda x: x[0]) # Sort sessions by their start time for i in range(len(sorted_sessions) - 1): end_time = sorted_sessions[i][1] next_start_time = sorted_sessions[i + 1][0] # If the end time of the current session is greater than the start time of the next session if end_time > next_start_time: return False return True"},{"question":"You are given a number of tasks that need to be completed. Each task takes a certain amount of time to complete, and you are given a set amount of continuous working time you\'d like to distribute as evenly as possible across the tasks. Your goal is to find a way to allocate your time such that the maximum difference between the time spent on any two tasks is minimized. For example, if there are three tasks and you have 10 hours, one way to distribute the time could be to spend 3 hours on the first task, 3 hours on the second, and 4 hours on the third. In this case, the maximum difference is 1 hour. Write a function to help you achieve this distribution. # Function Signature ```python def distribute_time(tasks: int, total_time: int) -> List[int]: pass ``` # Input The function takes two integers: - `tasks` (1 ≤ tasks ≤ 10^5): The number of tasks to be completed. - `total_time` (tasks ≤ total_time ≤ 10^9): The total amount of time available to be distributed among the tasks. # Output The function should return a list of integers of length `tasks`, where each integer represents the amount of time to be spent on each task. The distribution should minimize the maximum difference in time spent on any two tasks. # Example ```python assert distribute_time(3, 10) == [3, 3, 4] # or any other distribution where the difference is minimized assert distribute_time(5, 15) == [3, 3, 3, 3, 3] assert distribute_time(4, 11) == [2, 3, 3, 3] ```","solution":"def distribute_time(tasks: int, total_time: int) -> list: Distributes the total_time as evenly as possible across the given number of tasks in order to minimize the maximum difference between time spent on any two tasks. base_time = total_time // tasks extra_time = total_time % tasks # create a list with base_time for each task distribution = [base_time] * tasks # distribute the extra_time among the first \'extra_time\' tasks for i in range(extra_time): distribution[i] += 1 return distribution"},{"question":"Implement a function to find the maximum subarray sum for a given integer array. A subarray is any contiguous part of an array. The function should return the sum of the subarray that has the maximum sum. Examples ``` [1, -2, 3, 4, -1, 2, 1, -5, 4] => 9 (subarray [3, 4, -1, 2, 1]) [-2, 1, -3, 4, -1, 2, 1, -5, 4] => 6 (subarray [4, -1, 2, 1]) [5, 4, -1, 7, 8] => 23 (subarray [5, 4, -1, 7, 8]) [-1, -2, -3, -4] => -1 (subarray [-1]) ``` Goal Write a function to compute the maximum sum of any contiguous subarray for a given array of integers. The function should be efficient and handle both positive and negative integers in the array.","solution":"def max_subarray_sum(nums): Finds the maximum sum of any contiguous subarray within a given list of integers. :param nums: List of integers :return: Maximum subarray sum if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function called `swipe_left` that simulates sliding blocks on a 2D grid. Each block is represented by a positive integer, and empty spaces are represented by 0s. When a swipe left action occurs, all non-zero blocks should move to the leftmost positions of their respective rows, maintaining their original order, and empty spaces should shift to the right. For example, given the 2D grid: ```python [ [2, 0, 2, 4], [0, 4, 0, 4], [2, 2, 2, 0], [0, 0, 0, 2] ] ``` After a swipe left, the grid should transform to: ```python [ [2, 2, 4, 0], [4, 4, 0, 0], [2, 2, 2, 0], [2, 0, 0, 0] ] ``` Write the function `swipe_left(grid: List[List[int]]) -> List[List[int]]` that performs this operation. The input grid will be a list of lists of integers, and you should return the transformed grid in the same format.","solution":"def swipe_left(grid): Simulates sliding blocks on a 2D grid to the left. Parameters: grid (List[List[int]]): 2D grid containing integers Returns: List[List[int]]: Transformed 2D grid with non-zero values moved to the left for row in grid: # Filter out non-zero values and count of zeros non_zeros = [num for num in row if num != 0] zeros = [0] * (len(row) - len(non_zeros)) # Update row in the grid row[:] = non_zeros + zeros return grid"},{"question":"You are managing a fleet of autonomous delivery drones. Each drone operates within a grid-based city block of dimensions `m x n` (m rows and n columns). The drones start from their respective initial positions, make a series of moves, and then return to their initial positions. Your task is to verify if a given sequence of moves returns each drone to its start position. Each drone\'s move sequence is represented as a string consisting of characters \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). An empty move sequence means the drone does not move at all. Write a function that takes the initial position of the drone and its move sequence, and returns True if the drone returns to its starting position, otherwise False. Function signature: `bool does_return_home((int, int) start_position, str moves)` Example: ``` start_position = (0, 0) moves = \\"UDLR\\" return True # The drone returns to its starting position start_position = (1, 2) moves = \\"UUDDLLRR\\" return True # The drone returns to its starting position start_position = (2, 3) moves = \\"RRU\\" return False # The drone does not return to its starting position ``` You can assume that all inputs will be valid and the grid dimensions are implicitly large enough for all moves.","solution":"def does_return_home(start_position, moves): Function to check if a drone returns to its starting position after a series of moves. Args: start_position (tuple of int): A tuple containing the starting (row, column) position of the drone. moves (str): A string representing the sequence of moves made by the drone. Returns: bool: True if the drone returns to its starting position, otherwise False. x, y = start_position for move in moves: if move == \'U\': x -= 1 elif move == \'D\': x += 1 elif move == \'L\': y -= 1 elif move == \'R\': y += 1 return (x, y) == start_position"},{"question":"You are given a positive integer N and an array A of size N containing integers where every element appears exactly twice, except for one element which appears exactly once. Find and return the element that appears exactly once. -----Input----- The first line of input contains a single integer N, denoting the size of the array A. The second line contains N space-separated integers Ai, denoting the elements of the array A. -----Output----- Output a single integer representing the element that appears exactly once in the array. -----Constraints----- - 1 ≤ N ≤ 10^6 - 1 ≤ Ai ≤ 10^9 - N is always an odd number (since there is one unique element and every other element appears twice). -----Example----- Input #1: 7 4 3 2 4 1 3 2 Output #1: 1 Input #2: 9 7 9 1 8 7 9 8 6 6 Output #2: 1 -----Explanation----- In example case 1, the element 1 is the only number that does not have a duplicate. In example case 2, the element 1 is the only number that does not have a duplicate.","solution":"def find_unique_element(N, A): Return the element that appears exactly once in array A where every other element appears exactly twice. unique_element = 0 for element in A: unique_element ^= element return unique_element"},{"question":"You are given a list of positive integers representing the number of coins of each denomination in a vending machine. The vending machine accepts an integer amount of money and will return the minimum number of coins needed to match that amount. If it is not possible to match the amount, return -1. Example: Input: coins = [1, 2, 5] amount = 11 Output: 3 Explanation: 11 = 5 + 5 + 1 Example: Input: coins = [2] amount = 3 Output: -1 Explanation: The amount 3 cannot be matched with any combination of the given coins. Note: - You may assume that you have an infinite number of each denomination coin. - 1 <= coins.length <= 12 - 1 <= coins[i] <= 2^31 - 1 - 0 <= amount <= 10^4","solution":"def coin_change(coins, amount): Returns the minimum number of coins needed to match the given amount. If it is not possible to match the amount, returns -1. # Initialize a list to store the minimum coins needed for each amount from 0 to `amount` dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 # Base case: 0 coins needed to make amount 0 # Loop through each coin and update the dp array for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"You are working on an autonomous vehicle project and need to implement a function to analyze a route based on the color of traffic lights encountered. Each traffic light can either be green, yellow, or red. Your function should determine the safety and urgency of the route. The function should take a list of strings, where each string represents the color of a traffic light on the route: \'green\', \'yellow\', or \'red\'. Based on the sequence of these lights, the function should return a string with the following behavior: - If all the lights are green, the function should return: \\"Safe route, proceed!\\" - If there is at least one yellow light but no red lights, the function should return: \\"Caution! Be prepared to stop!\\" - If there is at least one red light, the function should return: \\"Stop! Dangerous route ahead!\\" Assume the list always contains at least one traffic light and the colors are only \'green\', \'yellow\', or \'red\'. ```python def analyze_route(traffic_lights): Analyze the safety and urgency of the route based on the sequence of traffic lights. :param traffic_lights: List of strings where each string is \'green\', \'yellow\', or \'red\' :return: A string indicating the safety and urgency of the route # Your code here ``` Example input and expected output: ```python print(analyze_route([\'green\', \'green\', \'green\'])) # Output: \\"Safe route, proceed!\\" print(analyze_route([\'green\', \'yellow\', \'green\'])) # Output: \\"Caution! Be prepared to stop!\\" print(analyze_route([\'green\', \'red\', \'yellow\'])) # Output: \\"Stop! Dangerous route ahead!\\"","solution":"def analyze_route(traffic_lights): Analyze the safety and urgency of the route based on the sequence of traffic lights. :param traffic_lights: List of strings where each string is \'green\', \'yellow\', or \'red\' :return: A string indicating the safety and urgency of the route if \'red\' in traffic_lights: return \\"Stop! Dangerous route ahead!\\" elif \'yellow\' in traffic_lights: return \\"Caution! Be prepared to stop!\\" else: return \\"Safe route, proceed!\\""},{"question":"A desert oasis has spawned a unique type of tree. These trees exhibit an extraordinary property: they grow exponentially faster than usual. A gardener can plant these trees at specific positions along a straight vertical line and manage their growth. The gardener aims to optimize the growth visibility, which is defined by the sequence of trees appearing as a strictly increasing sequence when viewed from a particular point. Given the heights of the trees at their specific times of observation, the gardener wants to know the maximum number of trees that can appear in a sequence such that each tree has a strictly greater height than the previous one. Your task is to assist the gardener by determining this maximum sequence length. -----Input:----- - The first line of input consists of a single integer T, representing the number of test cases. - The first line of each test case consists of a single integer N, representing the number of trees. - The second line consists of N space-separated integers representing the heights of the trees in the order they were observed by the gardener. -----Output:----- - For each test case, print a single integer representing the maximum number of trees that can form a strictly increasing sequence of heights when viewed consecutively. -----Constraints----- - 1 <= T <= 100 - 1 <= N <= 1000 - 1 <= height of each tree <= 10000 -----Sample Input:----- 2 5 3 10 2 1 20 8 5 8 3 7 9 1 2 3 -----Sample Output:----- 3 4 -----EXPLANATION----- Test Case 1: The longest strictly increasing sequence is [3, 10, 20], so the answer is 3. Test Case 2: The longest strictly increasing sequence is [5, 8, 9, 10], so the answer is 4.","solution":"def longest_increasing_subsequence(arr): if not arr: return 0 # Initialize the list for the dynamic programming dp = [1] * len(arr) # Fill dp array for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence return max(dp) def max_increasing_trees(test_cases): results = [] for case in test_cases: N, heights = case results.append(longest_increasing_subsequence(heights)) return results"},{"question":"Given a string s consisting of small English letters and \'(\' and \')\', return the string after removing the outermost parentheses of every primitive substring. A primitive substring is a non-empty substring that can be partitioned into multiple balanced pairs of parentheses, but every partition starts with a left parenthesis and ends with a right parenthesis. Examples: Input: s = \\"(()())(())\\" Output: \\"()()()\\" Explanation: The input consists of two primitive substrings \\"(()())\\" + \\"(())\\". After removing the outermost parentheses of each primitive substring, this is the result \\"()()\\" + \\"()\\" = \\"()()()\\". Input: s = \\"(()())(())(()(()))\\" Output: \\"()()()()(())\\" Explanation: The input consists of three primitive substrings \\"(()())\\" + \\"(())\\" + \\"(()(()))\\". After removing the outermost parentheses of each primitive substring, this is the result \\"()()\\" + \\"()\\" + \\"()(())\\" = \\"()()()()(())\\". Input: s = \\"()()\\" Output: \\"\\" Explanation: The input consists of two primitive substrings \\"()\\" + \\"()\\". After removing the outermost parentheses of each primitive substring, this is the result \\"\\" + \\"\\" = \\"\\". Constraints: 1 <= s.length <= 10^5 s[i] is either \'(\' or \')\'. s is a valid parentheses string.","solution":"def removeOuterParentheses(s): This function removes the outermost parentheses from every primitive substring of s. result = [] open_count = 0 for char in s: if char == \'(\': if open_count > 0: result.append(char) open_count += 1 else: # char == \')\' open_count -= 1 if open_count > 0: result.append(char) return \\"\\".join(result)"},{"question":"Implement a function called `find_unique_numbers` that takes a list of integers as input and returns a sorted list of unique numbers. The output list should be sorted in ascending order and should not contain any duplicate elements. For example: ```python find_unique_numbers([3, 1, 2, 3, 4, 1]) == [1, 2, 3, 4] find_unique_numbers([7, 8, 5, 5, 3, 7, 9, 2]) == [2, 3, 5, 7, 8, 9] find_unique_numbers([10, 20, 20, 10, 30]) == [10, 20, 30] ```","solution":"def find_unique_numbers(numbers): Returns a sorted list of unique numbers from the input list. Args: numbers: A list of integers. Returns: A sorted list of unique integers. return sorted(set(numbers))"},{"question":"Given an array of integers and a target integer, determine if there are two distinct elements in the array that add up to the target. If so, return the indices of those elements. If there are multiple pairs, return any one of them. If no such pair exists, return -1. -----Input----- The first line contains a single integer n (2 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9) — the elements of the array. The third line contains a single integer k (-10^{18} le k le 10^{18}) — the target sum. -----Output----- Output two integers i and j (1 le i, j le n, i ne j) — the indices of the elements that add up to the target. If multiple solutions exist, output any. If no such pair exists, output -1. -----Examples----- Input 4 2 7 11 15 9 Output 1 2 Input 5 1 2 3 4 5 10 Output -1 -----Note----- In the first example, the elements at indices 1 and 2 add up to 9 (2 + 7 = 9), so the output is \\"1 2\\". In the second example, there are no two elements in the array that add up to 10, so the output is \\"-1\\".","solution":"def find_two_sum_indices(n, array, target): Finds two distinct indices in the array such that the elements at those indices add up to the target. Args: n (int): Number of elements in the array. array (list of int): List of integers representing the array. target (int): The target sum. Returns: tuple of int or int: Tuple of the two indices (1-based) or -1 if no such pair exists. value_to_index = {} for index, value in enumerate(array): complement = target - value if complement in value_to_index: return value_to_index[complement] + 1, index + 1 value_to_index[value] = index return -1"},{"question":"A fraudulent activity detection system is being created to detect anomalies in a sequence of transactions. Given an array of integers representing the daily expenditures for a client, the system needs to find out how many notifications were sent for a potential fraudulent activity. A notification is sent if the current day\'s expenditure is at least twice the median of the expenditures of the last `d` days. To solve this problem, you are tasked with developing an algorithm that processes multiple test cases (potentially over multiple clients or time periods) to determine the number of notifications sent for each. ---Input--- The first line of input contains an integer, `T`, denoting the number of test cases. The first line of each test case contains two space-separated integers, `n` (total number of days) and `d` (number of trailing days to use for median calculation). The second line contains `n` space-separated integers describing the list of daily expenditures. ---Output--- For each test case, print an integer representing the number of notifications sent for that test case. ---Constraints--- - 1 leq T leq 100 - 1 leq n leq 10^5 - 1 leq d leq n - 0 leq text{expenditure}[i] leq 10^6 ---Sample Input--- 2 9 5 2 3 4 2 3 6 8 4 5 5 2 1 2 3 4 5 ---Sample Output--- 2 1 ---Explanation--- In the first test case: - On day 6, the trailing expenditures are [2, 3, 4, 2, 3]. The median is 3, so 2 * 3 = 6. Since the day\'s expenditure (6) is exactly twice the median, one notification is sent. - On day 7, the trailing expenditures are [3, 4, 2, 3, 6]. The median is 4, so 2 * 4 = 8. The day\'s expenditure (8) is twice the median, so another notification is sent. - On day 8, the trailing expenditures are [4, 2, 3, 6, 8]. The median is 4, so 2 * 4 = 8. The day\'s expenditure (4) is not at least twice the median. - On day 9, the trailing expenditures are [2, 3, 6, 8, 4]. The median is 4, so 2 * 4 = 8. The day\'s expenditure (5) is not at least twice the median. 2 notifications are sent in total for the first test case. In the second test case: - On day 3, the trailing expenditures are [1, 2]. The median is 1.5, so 2 * 1.5 = 3. Since the day\'s expenditure (3) is exactly twice the median, one notification is sent. - On day 4, the trailing expenditures are [2, 3]. The median is 2.5, so 2 * 2.5 = 5. The day\'s expenditure (4) is not at least twice the median. - On day 5, the trailing expenditures are [3, 4]. The median is 3.5, so 2 * 3.5 = 7. The day\'s expenditure (5) is not at least twice the median. 1 notification is sent in total for the second test case.","solution":"from bisect import insort, bisect_left def median(data, d): k = d // 2 if d % 2 == 0: return (data[k-1] + data[k]) / 2 else: return data[k] def count_notifications(exp, d): cnt = 0 trailing = sorted(exp[:d]) for i in range(d, len(exp)): med = median(trailing, d) if exp[i] >= 2 * med: cnt += 1 # Remove the element that\'s no longer in the trailing period trailing.pop(bisect_left(trailing, exp[i-d])) # Add the new element while maintaining sorted order insort(trailing, exp[i]) return cnt def solve(T, test_cases): results = [] for case in test_cases: n, d, expenditures = case notifications = count_notifications(expenditures, d) results.append(notifications) return results"},{"question":"Alice loves to collect rare gemstones. She has a collection of N gemstones placed in a row. Each gemstone has a unique beauty score associated with it. Alice can select any number of gemstones, but the total number of gemstones selected must be at least 1 and at most K. Moreover, the selection must form a contiguous subsequence. Alice wants to maximize the total beauty score of the selected gemstones. Help her find the maximum beauty score she can obtain by selecting an optimal contiguous subsequence. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line contains two integers N and K. - The second line contains N integers, representing the beauty scores of the gemstones. -----Output:----- For each test case, output in a single line, the maximum beauty score Alice can obtain. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq K leq N - -10^5 leq text{beauty score} leq 10^5 Sum of N over all test cases is less than 10^6 -----Sample Input:----- 1 6 3 4 -1 2 -1 6 -5 -----Sample Output:----- 7 -----EXPLANATION:----- The ideal choice would be to select the subsequence [4, -1, 2, -1, 6], which gives a total beauty score of 7. Note that while the constraints allow selecting up to K gemstones, the optimal subsequence in this case happens to contain fewer gemstones for the maximum beauty score.","solution":"def max_beauty_score(T, test_cases): For each test case, compute and return the maximum possible beauty score by selecting a contiguous subsequence of gemstones with at least 1 and at most K elements. results = [] for t in range(T): N, K = test_cases[t][0] beauty_scores = test_cases[t][1] max_score = float(\'-inf\') for k in range(1, K + 1): current_sum = sum(beauty_scores[:k]) max_score = max(max_score, current_sum) for i in range(k, N): current_sum = current_sum + beauty_scores[i] - beauty_scores[i - k] max_score = max(max_score, current_sum) results.append(max_score) return results"},{"question":"Implement a function that takes two lists of integers as inputs and returns a list of their intersection, considering each element\'s frequency in both lists. The result should preserve the order of elements as they appear in the first list. Algorithm steps: * Initialize an empty result list. * Create a dictionary for counting occurrences in the second list. * Iterate through the first list and for each element: * If the element exists in the dictionary with a count greater than zero, append to the result list and decrement the count in the dictionary. ___ # Examples ``` input_list1 = [4, 9, 5, 4] input_list2 = [9, 4, 9, 8, 4] result = [4, 9, 4] input_list1 = [1, 2, 2, 1] input_list2 = [2, 2] result = [2, 2] input_list1 = [1, 2, 3] input_list2 = [3, 4, 5] result = [3] ``` ___ Discuss the computational complexity and any edge cases your implementation needs to handle.","solution":"def intersection_with_counts(list1, list2): Returns the intersection of two lists, considering the frequency of each element and preserving the order as in the first list. result = [] counts = {} # Count occurrences of elements in list2 for num in list2: if num in counts: counts[num] += 1 else: counts[num] = 1 # Iterate through list1 and collect intersecting elements for num in list1: if num in counts and counts[num] > 0: result.append(num) counts[num] -= 1 return result"},{"question":"Given an array of integers `arr` and an integer `target`, find the length of the shortest subarray that sums to the target. If no such subarray exists, return -1. A subarray is a contiguous part of an array. The sum of the subarray should exactly equal the target. Example 1: Input: arr = [2, 3, 1, 2, 4, 3] target = 7 Output: 2 Explanation: The subarray [4, 3] sums to 7 and is the shortest subarray of size 2. Example 2: Input: arr = [1, 1, 1, 1, 1, 1, 1, 1] target = 11 Output: -1 Explanation: There is no subarray that sums to 11. Note: 1. The given array `arr` will have at least one element and the length of the array will not exceed 10^5. 2. The value of each element in the array will be an integer within the range [-10^4, 10^4]. 3. The target will be an integer within the range [-10^9, 10^9].","solution":"def min_subarray_len(arr, target): Returns the length of the shortest subarray that sums to target. If no such subarray exists, returns -1. n = len(arr) min_len = float(\'inf\') start = 0 current_sum = 0 for end in range(n): current_sum += arr[end] while current_sum >= target: min_len = min(min_len, end - start + 1) current_sum -= arr[start] start += 1 return min_len if min_len != float(\'inf\') else -1"},{"question":"You are given an array of integers that is sorted in ascending order and has been rotated at some pivot unknown to you beforehand (i.e., `[0,1,2,4,5,6,7]` might become `[4,5,6,7,0,1,2]`). Write a function that takes this array and returns the minimum element in the array. You may assume no duplicate exists in the array. Example: ``` findMin([3,4,5,1,2]) = 1 findMin([4,5,6,7,0,1,2]) = 0 findMin([11,13,15,17]) = 11 ``` Constraints: - The array will have at least one number and at most 10,000 numbers. - The function should run in O(log n) time complexity.","solution":"def findMin(nums): This function finds the minimum element in a rotated sorted array. Parameters: nums (List[int]): The input rotated sorted array without duplicates. Returns: int: The minimum element in the array. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[right]: left = mid + 1 else: right = mid return nums[left]"},{"question":"Task: Create a function that returns the number of vowels and consonants in a given string. The function should be case-insensitive and should not count non-alphabetical characters. Rules: - The function should take a single input, which is a string containing any characters. - The function should return a tuple containing two integers: the number of vowels and the number of consonants. Example: Input: \\"Hello, World!\\" Output: (3, 7)","solution":"def count_vowels_and_consonants(input_string): Returns the number of vowels and consonants in the given string. Case-insensitive and ignores non-alphabetical characters. Parameters: input_string (str): The string to be analyzed Returns: tuple: A tuple containing two integers: number of vowels and number of consonants. vowels = set(\\"aeiouAEIOU\\") num_vowels = 0 num_consonants = 0 for char in input_string: if char.isalpha(): if char in vowels: num_vowels += 1 else: num_consonants += 1 return (num_vowels, num_consonants)"},{"question":"Given an array of integers, find the maximum sum of any contiguous subarray of size `k`. Return the maximum sum. If `k` is larger than the length of the array, return `null`.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any contiguous subarray of size k. If k is larger than the length of the array, returns None. if k > len(arr): return None max_sum = float(\'-inf\') current_sum = sum(arr[:k]) max_sum = max(max_sum, current_sum) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array of integers (x). Write a function to find the maximum product of any three numbers from the array. Your function should handle both positive and negative numbers, and the result should be the highest possible product of any triplet in the array. For example: - For the array `[-10, -10, 5, 2]`, the maximum product is `500` (from the triplet `-10`, `-10`, `5`). - For the array `[1, 2, 3, 4]`, the maximum product is `24` (from the triplet `2`, `3`, `4`).","solution":"def maximum_product_of_three_numbers(arr): Returns the maximum product of any three numbers from the array. arr.sort() # The maximum product can be either from the three largest numbers # or from two smallest numbers (both could be negative) and the largest number return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])"},{"question":"Your task is to write a function that determines the number of distinct islands in a given grid. The grid is represented by a 2D array of strings, where each string is either \\"1\\" (representing land) or \\"0\\" (representing water). An island is formed by connecting adjacent lands horizontally or vertically. Corners do not connect lands, so diagonal adjacency does not form a connection. Consider the following example grid: [ [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"1\\"] ] In this example, there are three distinct islands. Alternatively, in the following grid: [ [\\"1\\", \\"1\\", \\"1\\"], [\\"0\\", \\"1\\", \\"0\\"], [\\"1\\", \\"1\\", \\"1\\"] ] There is only one island. You are to write a function `num_islands` that takes a grid (a list of lists of strings) as its input and returns the number of distinct islands. The input grid is guaranteed to be rectangular, meaning all rows have the same number of columns. Remember to handle edge cases, such as an empty grid or a grid with no \\"1\\"s. The function signature should be: ```python def num_islands(grid: List[List[str]]) -> int: ``` Note: Avoid modifying the input grid directly. Use a helper function or a new grid to mark visited lands. Have fun solving the problem!","solution":"from typing import List def num_islands(grid: List[List[str]]) -> int: def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \\"0\\": return grid[i][j] = \\"0\\" # Mark the land as visited by sinking it to water dfs(grid, i + 1, j) dfs(grid, i - 1, j) dfs(grid, i, j + 1) dfs(grid, i, j - 1) if not grid or not grid[0]: return 0 num_islands = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \\"1\\": num_islands += 1 dfs(grid, i, j) return num_islands"},{"question":"Create a function, is_valid_sudoku, that takes a 9x9 2D list (board) representing a partially filled Sudoku grid. The function should check whether the board is a valid Sudoku puzzle configuration. A Sudoku board is valid if: 1. Each row must contain the digits 1-9 without repetition. 2. Each column must contain the digits 1-9 without repetition. 3. Each of the nine 3x3 sub-boxes must contain the digits 1-9 without repetition. Note: - The board can contain empty cells, represented by the \'.\' character. - A valid Sudoku board (partially filled) does not necessarily have to be solvable. Function Signature: def is_valid_sudoku(board: List[List[str]]) -> bool Example: ``` boardresult = is_valid_sudoku(board) # True ```","solution":"def is_valid_sudoku(board): def is_valid_unit(unit): Helper function to check if a unit (row/column/sub-box) is valid unit = [x for x in unit if x != \'.\'] return len(unit) == len(set(unit)) # Check rows for row in board: if not is_valid_unit(row): return False # Check columns for col in range(9): if not is_valid_unit([board[row][col] for row in range(9)]): return False # Check 3x3 sub-boxes for box_row in range(0, 9, 3): for box_col in range(0, 9, 3): sub_box = [ board[r][c] for r in range(box_row, box_row + 3) for c in range(box_col, box_col + 3) ] if not is_valid_unit(sub_box): return False return True"},{"question":"Write a function that takes two strings as input and returns a boolean indicating whether the second string is a rotated version of the first string. A rotated version means that you can take some letters from the beginning of the string and move them to the end without changing the order of the remaining letters. For example: ```python is_rotated_version(\\"abcde\\", \\"deabc\\") = True # \'de\' + \'abc\' is_rotated_version(\\"abcde\\", \\"cdeab\\") = True # \'cde\' + \'ab\' is_rotated_version(\\"abcde\\", \\"abced\\") = False is_rotated_version(\\"abcde\\", \\"abcde\\") = True # No rotation needed is_rotated_version(\\"abcde\\", \\"edcba\\") = False ``` Good luck!","solution":"def is_rotated_version(s1, s2): Returns True if s2 is a rotated version of s1, False otherwise. if len(s1) != len(s2): return False concatenated = s1 + s1 return s2 in concatenated"},{"question":"In a medieval village, there are several houses, each connected by bidirectional roads. The village layout forms a tree, where each house is a node, and each road is an edge. The houses are numbered from 0 to n-1. The village chief wants to assign guards to a set of important houses such that the guards can patrol the entire village with the minimum number of guards. Each guard can patrol the house they are assigned to and its directly connected neighboring houses. However, for convenience and safety, there should not be more than one guard within the same range of influence. Implement the MinGuardsInVillage class: MinGuardsInVillage(int n, int[][] roads) Initializes the object with the number of houses n and the list of bidirectional roads connecting the houses. Each road in the list is represented as a pair of integers [a, b] indicating a road between house a and house b. void markImportant(int house) Marks the given house as important. int computeMinGuards() Returns the minimum number of guards needed to patrol all the important houses and the entire village given the current set of important houses. Example 1: Input [\\"MinGuardsInVillage\\", \\"markImportant\\", \\"markImportant\\", \\"computeMinGuards\\", \\"markImportant\\", \\"computeMinGuards\\"] [[6, [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5]]], [3], [4], [], [5], []] Output [null, null, null, 2, null, 3] Explanation MinGuardsInVillage village = new MinGuardsInVillage(6, [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5]]); village.markImportant(3); // Important house: [3] village.markImportant(4); // Important houses: [3, 4] village.computeMinGuards(); // return 2: One guard at house 1 can cover houses [0, 1, 3, 4], another guard at house 2 can cover houses [2, 5]. village.markImportant(5); // Important houses: [3, 4, 5] village.computeMinGuards(); // return 3: Guards at houses [1, 2, 5] can each cover [0, 1, 3, 4, 2, 5] respectively. Constraints: - 1 <= n <= 105 - 0 <= a, b, house < n - Each pair [a, b] in roads represents a bidirectional road connecting house a and house b. - Each house number is distinct. - The roads form a tree (there are no cycles, and all houses are connected). - Each method (markImportant and computeMinGuards) will be called at most 105 times.","solution":"class MinGuardsInVillage: def __init__(self, n, roads): self.n = n self.adj_list = [[] for _ in range(n)] for a, b in roads: self.adj_list[a].append(b) self.adj_list[b].append(a) self.important_houses = set() self.guarded = [False] * n def markImportant(self, house): self.important_houses.add(house) def _dfs(self, node, parent): covered = 0 for neighbor in self.adj_list[node]: if neighbor != parent: covered += self._dfs(neighbor, node) if covered == 0 and node in self.important_houses: return 1 elif covered > 0 and node in self.important_houses: self.guarded[node] = True return -1 elif covered == 1 and not self.guarded[node]: self.guarded[node] = True return -1 return covered def computeMinGuards(self): self.guarded = [False] * self.n total_guards = 0 for house in self.important_houses: if not self.guarded[house]: total_guards += max(1, self._dfs(house, -1)) return total_guards"},{"question":"Given a list of words and a string representing a keyboard layout where the rows of letters are all on the same line, determine the words that can be typed using letters of only one row of the keyboard. You may assume that the input string representing the keyboard layout is always formatted as three concatenated sequences corresponding to the top, middle, and bottom rows, respectively, in standard QWERTY. Return the list of words that can be typed with letters from only one row. Example: Input: words = [\\"Hello\\", \\"Alaska\\", \\"Dad\\", \\"Peace\\"], keyboard = \\"qwertyuiopasdfghjklzxcvbnm\\" Output: [\\"Alaska\\", \\"Dad\\"] Explanation: - The word \\"Alaska\\" can be typed using the letters from the middle row: \\"asdfghjkl\\". - The word \\"Dad\\" can be typed using letters from the top and bottom rows: \\"dad\\" (considering case insensitivity). - The words \\"Hello\\" and \\"Peace\\" cannot be typed using only one row of the keyboard. Constraints: - 1 <= words.length <= 100 - 1 <= words[i].length <= 20 - words[i] consist of English letters (both lowercase and uppercase). Your task is to write a function that returns the list of words that can be typed using letters from only one row of the keyboard.","solution":"def find_words_that_can_be_typed(words, keyboard): Returns the list of words that can be typed using letters from only one row of the keyboard. :param words: List of words. :param keyboard: String representing the keyboard layout. rows = [ set(keyboard[:10]), # top row: qwertyuiop set(keyboard[10:19]), # middle row: asdfghjkl set(keyboard[19:]) # bottom row: zxcvbnm ] def can_be_typed_in_one_row(word): lower_word = word.lower() for row in rows: if all(ch in row for ch in lower_word): return True return False return [word for word in words if can_be_typed_in_one_row(word)]"},{"question":"Task Write a function `get_busiest_hour(logs: List[str]) -> str`. You are given a list of server access logs, where each log entry is in the format `YYYY-MM-DD HH:MM:SS,resident_ID,event_type`, with `event_type` being either \'login\' or \'logout\'. Your task is to identify the single hour (in HH format, 24-hour clock) during which the maximum number of unique residents were logged in. You can assume that the logs are already in chronological order and that a \'logout\' event will always follow a corresponding \'login\' event for any given resident. Also, every resident logs out by the end of the logs list. # Examples ```python logs = [ \\"2023-09-12 09:13:27,123,login\\", \\"2023-09-12 09:45:14,124,login\\", \\"2023-09-12 10:17:50,123,logout\\", \\"2023-09-12 10:53:22,124,logout\\", \\"2023-09-12 11:47:33,125,login\\", \\"2023-09-12 12:25:04,126,login\\", \\"2023-09-12 12:55:33,125,logout\\", \\"2023-09-12 13:45:28,126,logout\\" ] assert get_busiest_hour(logs) == \\"09\\" logs = [ \\"2023-09-12 18:00:00,101,login\\", \\"2023-09-12 19:00:00,102,login\\", \\"2023-09-12 19:30:00,101,logout\\", \\"2023-09-12 20:00:00,102,logout\\", \\"2023-09-12 21:00:00,103,login\\", \\"2023-09-12 22:00:00,103,logout\\" ] assert get_busiest_hour(logs) == \\"19\\" ``` # Constraints - All timestamps in the logs are within the same day. - Timestamps are unique. - The number of logs will not exceed 10,000. - Resident IDs are unique and consistent within a log set.","solution":"from collections import defaultdict from typing import List def get_busiest_hour(logs: List[str]) -> str: login_times = defaultdict(set) current_logins = set() for log in logs: timestamp, resident_id, event_type = log.split(\',\') hour = timestamp.split(\' \')[1][:2] if event_type == \'login\': current_logins.add(resident_id) else: # event_type == \'logout\' current_logins.discard(resident_id) for active_user in current_logins: login_times[hour].add(active_user) busiest_hour = max(login_times, key=lambda k: len(login_times[k])) return busiest_hour"},{"question":"Given a list of integers, create a function that will return the difference between the largest and smallest values in the list. Your function should handle the following constraints: 1. The list will contain at least two integers. 2. The integers can be both positive and negative. 3. The list can contain repeated values. Ensure your function is efficient and works within a reasonable time complexity. You should not use any built-in functions that directly compute the difference (e.g., max() or min() functions).","solution":"def difference_max_min(nums): Returns the difference between the largest and smallest values in the list. if len(nums) < 2: raise ValueError(\\"The list should contain at least two integers.\\") min_val = float(\'inf\') max_val = float(\'-inf\') for num in nums: if num < min_val: min_val = num if num > max_val: max_val = num return max_val - min_val"},{"question":"John is a bank teller, and he wants to manage a list of transactions efficiently. Each transaction has an associated value, which can be positive (deposit) or negative (withdrawal). John needs to keep track of the total balance after each transaction and answer queries about the balance in a specified range of transactions. Given an initial balance and N transaction values, create a system to help John: 1. Process the transactions and keep track of the balance after each transaction. 2. Answer Q queries about the balance in a given range of transactions. -----Input----- The first line contains two space-separated integers B (initial balance) and N (number of transactions). The second line contains N space-separated integers, denoting the transaction values. The third line contains a single integer Q (number of queries). Each of the next Q lines contains two space-separated integers, L and R (1-based indices), representing the range of transactions for which John needs the balance. -----Output---- Output Q lines, each containing a single integer: the balance after processing the transactions from L to R inclusively. -----Constraints----- - -10^6 ≤ B ≤ 10^6 - 1 ≤ N ≤ 1000 - -10^4 ≤ Transaction Value ≤ 10^4 - 1 ≤ L ≤ R ≤ N -----Example----- Input: 1000 5 100 -50 200 -300 400 3 1 3 2 5 1 5 Output: 1250 1250 1350 -----Explanation----- Example case 1. - Initial balance: 1000. - Processing transactions [100, -50, 200]: 1000 + 100 - 50 + 200 = 1250. - Processing transactions [-50, 200, -300, 400]: 1000 - 50 + 200 - 300 + 400 = 1250. - Processing transactions [100, -50, 200, -300, 400]: 1000 + 100 - 50 + 200 - 300 + 400 = 1350.","solution":"def calculate_balances(B, transactions, queries): Calculate the balance after processing transactions in the given range for each query. Parameters: B (int): Initial balance. transactions (list of int): List of transaction values. queries (list of tuple): List of queries specified as tuples (L, R). Returns: list of int: List of balances for each query. # Calculate prefix sums of transactions prefix_sums = [0] * (len(transactions) + 1) for i in range(len(transactions)): prefix_sums[i + 1] = prefix_sums[i] + transactions[i] # Process each query results = [] for L, R in queries: # Convert 1-based indices to 0-based indices sum_transactions = prefix_sums[R] - prefix_sums[L - 1] results.append(B + sum_transactions) return results"},{"question":"# Prompt A mysterious developer has left a puzzle in your system. The puzzle consists of reversing words in a message. The words in the message string are separated by single spaces. Additional constraint: do not use any library function that directly reverses strings or lists (like `reverse()` in Python). If the input is not a string, your function must return \\"Input is not a string\\". If the input string is empty, your function must return an empty string. For example: - `reverse_words(\\"Hello World\\")` should return `\\"olleH dlroW\\"`. - `reverse_words(\\"Coding is fun\\")` should return `\\"gnidoC si nuf\\"`. - `reverse_words(123)`, `reverse_words([1, 2, 3])` should return `\\"Input is not a string\\"`. - `reverse_words(\\"\\")` should return `\\"\\"`. Implement the function `reverse_words` to solve the problem.","solution":"def reverse_words(message): Reverses each word in the input string message. :param message: str, the input message string :return: str, the message with each word reversed or an error message for invalid input if not isinstance(message, str): return \\"Input is not a string\\" if message == \\"\\": return \\"\\" # Split the message into words words = message.split(\\" \\") # Reverse each word manually reversed_words = [] for word in words: reversed_word = \\"\\" for char in word: reversed_word = char + reversed_word reversed_words.append(reversed_word) # Join the reversed words back into a single string return \\" \\".join(reversed_words)"},{"question":"Given a list of integers nums, write a function to return the index of the first element that is greater than all previous elements in the list. If no such element exists, return -1. Example 1: Input: nums = [1, 3, 2, 4, 5] Output: 1 Explanation: The element at index 1 (which is 3) is the first element greater than the previous element (which is 1). Example 2: Input: nums = [10, 5, 2, 2, 1] Output: -1 Explanation: No element is greater than all previous elements. Example 3: Input: nums = [3, 1, 4, 1, 5, 9] Output: 2 Explanation: The element at index 2 (which is 4) is the first element greater than both previous elements (3 and 1). Note: - The input list will contain at least one integer. - The input list may contain both positive and negative integers.","solution":"def first_greater_than_previous(nums): Returns the index of the first element that is greater than all previous elements in the list. If no such element exists, return -1. if not nums: return -1 max_so_far = nums[0] for i in range(1, len(nums)): if nums[i] > max_so_far: return i max_so_far = max(max_so_far, nums[i]) return -1"},{"question":"You are given a grid of size N times M filled with integers. Your task is to find the largest sub-grid such that all the integers in that sub-grid are the same. The sub-grid must be a continuous rectangle. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - The next N lines contain M space-separated integers representing the grid. -----Output----- For each test case, print a single line containing one integer — the size (number of cells) of the largest sub-grid where all integers are the same. -----Constraints----- - 1 leq T leq 50 - 1 leq N, M leq 100 - 0 leq A_{i,j} leq 10^9 -----Example Input----- 2 4 4 1 1 2 2 1 1 2 2 3 3 2 2 3 3 2 2 3 2 1 1 1 1 1 1 -----Example Output----- 8 6 -----Explanation----- Example case 1: - The largest sub-grid with all integers the same is: 1 1 1 1 3 3 3 3 This sub-grid has a size of 8 cells. Example case 2: - The largest sub-grid with all integers the same is: 1 1 1 1 1 1 This sub-grid has a size of 6 cells.","solution":"def largest_subgrid(t, test_cases): def largest_subgrid_size(grid, n, m): max_size = 0 for i in range(n): for j in range(m): value = grid[i][j] width = m for row in range(i, n): if grid[row][j] != value: break for col in range(j, width): if grid[row][col] != value: width = col break max_size = max(max_size, (row - i + 1) * (width - j)) return max_size results = [] for case in test_cases: n, m = case[0] grid = case[1] results.append(largest_subgrid_size(grid, n, m)) return results"},{"question":"A mysterious antique store has a unique inventory system. Each item in the store is assigned a unique code that help the owner keep track of the inventory efficiently. The codes are strings containing lowercase alphabets and digits (0-9). The frequency of each character denotes how many items they have of that type. The store owner needs your help to generate the inventory report by summing the frequencies of characters of all the codes given. For instance, if the code \\"a2b1\\" is given, it denotes 2 items of type \'a\' and 1 item of type \'b\'. Write a program to generate the inventory report as a single string where each character is followed by its frequency, sorted in alphabetical order. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case comprises of a single string C representing the code. -----Output:----- For each test case, output in a single line, the inventory report which consists of each character followed by their total frequency in alphabetical order with no spaces. -----Constraints----- - 1 leq T leq 100 - Length of string C leq 100 - The string C will contain lowercase alphabets and digits (0-9) only. -----Sample Input:----- 3 a3b2c1 xyz9 m5n3p2 -----Sample Output:----- a3b2c1 x1y1z9 m5n3p2","solution":"def inventory_report(codes): import collections result = [] for code in codes: counter = collections.Counter() i = 0 while i < len(code): char = code[i] num = 0 i += 1 while i < len(code) and code[i].isdigit(): num = num * 10 + int(code[i]) i += 1 counter[char] += num sorted_items = sorted(counter.items()) report = \'\'.join(f\\"{char}{count}\\" for char, count in sorted_items) result.append(report) return result"},{"question":"=====Problem Statement===== You are tasked with developing functionality for a messaging app that automatically corrects common misspellings in messages. Given a list of common misspelled words and their corrections, write a function that takes a message and corrects any misspelled words based on the provided dictionary. =====Input Format===== - A single line of input containing the message, M. - Another input with the number of common misspellings, n. - Followed by n lines each containing a pair of strings: the misspelled word and its correction. =====Constraints===== 0 < len(M) < 2000 0 < n < 100 Each misspelled word and its correction is guaranteed to be a single word (no spaces). The message consists of alphanumeric characters and spaces. =====Output Format===== Print the message with all the misspelled words corrected based on the provided dictionary. =====Sample Input===== beautiful bwetaflu 1 bwetaflu beautiful =====Sample Output===== beautiful beautiful =====Explanation===== The misspelled word \\"bwetaflu\\" in the message is correctly replaced with \\"beautiful\\" as per the dictionary provided.","solution":"def correct_message(message, n, corrections): Correct the given message based on the provided list of corrections. Parameters: - message (str): The original message containing potential misspellings. - n (int): The number of misspelled words and their corrections. - corrections (list of tuples): Each tuple contains a misspelled word and its correction. Returns: - str: The corrected message. corrections_dict = dict(corrections) words = message.split() corrected_words = [corrections_dict.get(word, word) for word in words] return \' \'.join(corrected_words) # Sample Input message = \\"beautiful bwetaflu\\" n = 1 corrections = [(\\"bwetaflu\\", \\"beautiful\\")] # Sample Output print(correct_message(message, n, corrections)) # Output: \\"beautiful beautiful\\""},{"question":"The city of Bitland has a strange traffic system. There are n junctions in the city, labeled from 1 to n. Each junction has exactly one outgoing one-way road leading to another junction. This can create a mixture of cycles and chains where each junction can only belong to one cycle or chain. The mayor of Bitland wants all the junctions to be separated into groups such that all junctions in every group belong to the same cycle. Your task is to find out the total number of such groups in the city. -----Input----- The first line contains an integer n (2 le n le 100000) — the number of junctions. The second line contains n integers a_i (1 le a_i le n) — a_i is the junction that junction i leads to. -----Output----- Print a single integer — the number of groups in which junctions belong to the same cycle. -----Example----- Input 5 2 3 1 5 4 Output 2 -----Note----- For the given example, the road connections are as follows: - Junction 1 -> Junction 2 -> Junction 3 -> Junction 1 (forming a cycle) - Junction 4 -> Junction 5 -> Junction 4 (forming another cycle) Thus, the total number of groups with cycles is 2.","solution":"def find_cycle_groups(n, roads): visited = [False] * n in_cycle = [False] * n cycle_count = 0 for i in range(n): if not visited[i]: current = i stack = [] while not visited[current]: visited[current] = True stack.append(current) current = roads[current] - 1 if current in stack: cycle_count += 1 while stack[-1] != current: in_cycle[stack.pop()] = True in_cycle[stack.pop()] = True return cycle_count"},{"question":"A large tech company is testing a new feature where users can upload images, and they want to name the images based on the frequency and order of the pixels\' intensity values, which ranges from 0 to 255. Each pixel intensity value represents the number of times that intensity appears in the image in non-decreasing order, and the intensity values themselves in increasing order. Your task is to write a function that helps in renaming these images given the pixel intensity values in a list. For each image, an intensity value and its count should be represented as \\"IxC\\" where I is the intensity value and C is its count. The result should concatenate these as strings and return it. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains: - An integer N, denoting the number of intensity values in the image. - A list of N space-separated integers where each integer i (0 <= i <= 255) appears for every instance of its occurrence. -----Output:----- For each test case, output in a single line the concatenated string representation of the intensity values and their counts. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - Each integer intensity value 0 leq i leq 255 -----Sample Input:----- 2 5 0 0 1 2 2 8 5 5 5 255 255 255 255 255 -----Sample Output:----- I0x2I1x1I2x2 I5x3I255x5","solution":"def rename_images(T: int, test_cases: list) -> list: results = [] for case in test_cases: N = case[0] intensities = case[1] # Counting occurrences of each intensity value intensity_count = {} for intensity in intensities: if intensity in intensity_count: intensity_count[intensity] += 1 else: intensity_count[intensity] = 1 # Sorting and forming the result string sorted_intensity_count = sorted(intensity_count.items()) result = \'\'.join([f\'I{intensity}x{count}\' for intensity, count in sorted_intensity_count]) results.append(result) return results"},{"question":"Implement a `Matrix` class that supports creation from a two-dimensional list. The class should have the following methods: 1. `__init__(self, data)`: Initializes the matrix with the provided data. 2. `shape(self)`: Returns the number of rows and columns of the matrix as a tuple `(rows, columns)`. 3. `transpose(self)`: Returns a new matrix which is the transpose of the original matrix. For example: ```python >>> m = Matrix([[1, 2, 3], [4, 5, 6]]) >>> m.shape() (2, 3) >>> t = m.transpose() >>> t._data [[1, 4], [2, 5], [3, 6]] ``` Ensure that your class properly supports matrices of any size and that the methods operate efficiently.","solution":"class Matrix: def __init__(self, data): Initializes the matrix with the provided data. :param data: A two-dimensional list representing the matrix. if not all(len(row) == len(data[0]) for row in data): raise ValueError(\\"All rows must have the same length\\") self._data = data def shape(self): Returns the number of rows and columns of the matrix as a tuple (rows, columns). :return: A tuple containing the number of rows and columns. rows = len(self._data) columns = len(self._data[0]) if rows > 0 else 0 return (rows, columns) def transpose(self): Returns a new matrix which is the transpose of the original matrix. :return: A Matrix object which is the transpose of the original matrix. transposed_data = list(zip(*self._data)) return Matrix([list(row) for row in transposed_data])"},{"question":"Write a function named `calculate_average` that takes in a list of integers representing a student\'s scores in different subjects and returns the average score rounded to the nearest integer. For example: ``` [80, 90, 85, 70] --> 81 ```","solution":"def calculate_average(scores): Returns the average score from the list of scores, rounded to the nearest integer. if not scores: return 0 # Handling empty list case average = sum(scores) / len(scores) return round(average)"},{"question":"Write a function that takes a list of integers and an integer `target`, and returns a list of unique pairs `[A, B]` such that `A + B = target`. Each pair should be sorted in ascending order, and the list of pairs should be sorted lexicographically. Example: Input: ``` numbers = [1, 2, 3, 4, 5, 6] target = 7 ``` Output: ``` [[1, 6], [2, 5], [3, 4]] ``` Detailed steps: - List `numbers` contains integers `[1, 2, 3, 4, 5, 6]`. - The target sum is `7`. - The possible pairs that sum to `7` are: - `1 + 6 = 7` - `2 + 5 = 7` - `3 + 4 = 7` The result list is `[[1, 6], [2, 5], [3, 4]]`. # Constraints: - All integers in the input list will be unique. - The input list will not contain repeated elements. - The target integer will be provided, and it might be positive or negative. - The output list should not have any duplicate pairs, and each pair should be sorted in ascending order.","solution":"def find_pairs_with_target_sum(numbers, target): Finds all unique pairs in the list `numbers` that sum up to `target`. Parameters: numbers (list of int): List of integers. target (int): The target sum. Returns: list of list of int: List of pairs [A, B] such that A + B = target. pairs = [] numbers_set = set(numbers) for num in numbers: complement = target - num if complement in numbers_set and complement != num: pair = sorted([num, complement]) if pair not in pairs: pairs.append(pair) return sorted(pairs)"},{"question":"Given an array of N integers, A_1, A_2, ..., A_N, Chef wants to know the minimum number of operations required to make all elements in an arbitrary subarray equal. In one operation, Chef can select any subarray and increment all its elements by 1. Your task is to determine the minimum number of operations needed. -----Input----- The first line contains a single integer, T. T test cases follow where each test case contains a single integer N on the first line. The second line of each test case contains N space-separated integers A_1, A_2, ..., A_N. -----Output----- For each test case, output a single integer, the minimum number of operations required. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - 1 le A_i le 10^9 -----Sample Input----- 2 5 3 3 2 3 1 6 1 2 3 4 5 6 -----Sample Output----- 2 5 -----Explanation:----- In the first test case, you can make all elements equal in 2 operations by: 1. Incrementing the subarray [1, 1, 1, 2, 0], resulting in [3, 2, 2, 3, 1] 2. Incrementing the subarray [1, 0, 0, 1], resulting in [3, 3, 3, 3, 3] In the second test case, you can make all elements equal in 5 operations by incrementing each subarray starting from a single element step-by-step: 1. Incrementing the subarray [1, 2, 3, 4, 5, 5] 2. Incrementing the subarray [1, 2, 3, 4, 4, 4] 3. Incrementing the subarray [1, 2, 3, 3, 3, 3] 4. Incrementing the subarray [1, 2, 2, 2, 2, 2] 5. Incrementing the subarray [1, 1, 1, 1, 1, 1]","solution":"def min_operations_to_equalize(N, A): This function returns the minimum number of operations required to make all elements in an array equal. # Count the occurrences of each element in the array frequency = {} for number in A: if number in frequency: frequency[number] += 1 else: frequency[number] = 1 # Find the element with the maximum frequency max_frequency = max(frequency.values()) # The minimum number of operations required is the size of the array minus the maximum frequency return N - max_frequency def min_operations_on_cases(test_cases): This function processes multiple test cases. results = [] for N, A in test_cases: results.append(min_operations_to_equalize(N, A)) return results"},{"question":"You are given a list of n courses labeled from 1 to n, some of which have prerequisites. Suppose you want to find the minimum number of semesters required to complete all the courses. You can take any number of courses in one semester as long as the prerequisites of each course are fulfilled by the beginning of that semester. Note that you may not be able to complete all courses if there are cyclic dependencies among the prerequisites. -----Input----- The first line contains an integer n (1 leq n leq 10^4) — the total number of courses. The second line contains an integer m (0 leq m leq 10^5) — the number of prerequisites. Each of the next m lines contains two integers a and b (1 leq a, b leq n) — representing that course a is a prerequisite for course b. -----Output----- Print a single integer, the minimum number of semesters required to complete all the courses. If it is not possible to complete all the courses due to cyclic dependencies, print -1. -----Examples----- Input 4 3 1 2 2 3 3 4 Output 4 Input 5 4 1 2 1 3 2 4 3 4 Output 3 Input 3 3 1 2 2 3 3 1 Output -1 -----Note----- In the first example, one possible way to complete all courses in 4 semesters is: - Semester 1: take course 1 - Semester 2: take course 2 - Semester 3: take course 3 - Semester 4: take course 4 In the second example, one possible way to complete all courses in 3 semesters is: - Semester 1: take course 1 - Semester 2: take courses 2 and 3 - Semester 3: take course 4 In the third example, there is a cyclic dependency between the courses making it impossible to complete all courses. The difficulty involves finding the correct order of courses to minimize the number of semesters while handling cyclic dependencies.","solution":"from collections import deque, defaultdict def min_number_of_semesters(n, m, prerequisites): # Build the graph graph = defaultdict(list) in_degree = [0] * (n + 1) for a, b in prerequisites: graph[a].append(b) in_degree[b] += 1 # Start with all courses that have no prerequisites queue = deque() for course in range(1, n + 1): if in_degree[course] == 0: queue.append(course) semesters = 0 completed_courses = 0 # Topological sort using BFS while queue: semesters += 1 for _ in range(len(queue)): # Process all nodes at the current level (i.e., in the current semester) course = queue.popleft() completed_courses += 1 for next_course in graph[course]: in_degree[next_course] -= 1 if in_degree[next_course] == 0: queue.append(next_course) if completed_courses == n: return semesters else: return -1"},{"question":"Pooja loves collecting marbles in different shapes. Today she found two unique shaped containers for storing her marbles. One is in the shape of a square pyramid with a base side length a1 and height h1, and the other is a triangular prism with base area A2, height h2, and length l2. She wants to know the volumes of the marbles each container can hold. Since Pooja\'s eager to know the results quickly, she\'s asking for your help to calculate the volumes accurately. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line having the a1, h1, A2, h2, and l2. Each value is given up to 2 decimal places. See example for more information. -----Output----- - For each test case, output a single line containing the volumes of the two containers separated by space. The answer is considered correct if it is correct up to 6 decimal places. -----Constraints----- - 1 ≤ T ≤ 100 - 0 < a1, h1, A2, h2, l2 ≤ 100 -----Example----- Input: 2 1.00 3.00 2.00 3.00 4.00 2.50 4.50 3.60 2.00 5.00 Output: 1.000000 24.000000 9.375000 36.000000","solution":"def calculate_volumes(num_cases, cases): results = [] for case in cases: # Parse input values a1, h1, A2, h2, l2 = map(float, case.split()) # Calculate the volume of the square pyramid volume_pyramid = (1/3) * (a1 ** 2) * h1 # Calculate the volume of the triangular prism volume_prism = A2 * h2 * l2 # Append the result formatted to 6 decimal places results.append(f\\"{volume_pyramid:.6f} {volume_prism:.6f}\\") return results"},{"question":"You are given a string consisting of lowercase letters. Your task is to find and print the first non-repeating character in the string. If there is no non-repeating character, print \\"None\\". -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one string S. -----Output:----- For each test case, output the first non-repeating character or \\"None\\" if there is no non-repeating character. -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 1000 -----Sample Input:----- 3 leetcode loveleetcode aabbcc -----Sample Output:----- l v None","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If there is no non-repeating character, returns \\"None\\". from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return \\"None\\" def solve(test_cases): results = [] for s in test_cases: results.append(first_non_repeating_character(s)) return results"},{"question":"Write a function `flatten` that takes a nested list and returns a single list with all the elements at the same level. Example: ```python flatten([1, [2, [3, 4], 5], 6]) # => [1, 2, 3, 4, 5, 6] flatten([[], [1, [[], [2, 3]]]]) # => [1, 2, 3] ``` (Note: Courtesy of [haskell.org](http://www.haskell.org/haskellwiki/99_questions/11_to_20))","solution":"def flatten(nested_list): Recursively flattens a nested list. Args: nested_list (list): A nested list of arbitrary depth. Returns: list: A single, flattened list containing all the elements. result = [] for item in nested_list: if isinstance(item, list): result.extend(flatten(item)) else: result.append(item) return result"},{"question":"Given an array of integers, your task is to determine the length of the longest contiguous subarray that has a sum equal to 0. A contiguous subarray is a slice of the array where all elements are contiguous in the original array and must contain at least one element. The input will be an array of integers, and the output should be the length of the longest contiguous subarray whose sum equals 0. If no such subarray exists, return -1. Example 1: Input: [1, -1, 3, 2, -2, -3, 4, -4] Output: 8 Note: The length of the given array will not exceed 10^4. The individual elements in the array can range from -10^5 to 10^5.","solution":"def longest_subarray_with_sum_zero(arr): Returns the length of the longest contiguous subarray with sum equal to 0. If no such subarray exists, returns -1. sum_index_dict = {} max_length = 0 current_sum = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum == 0: max_length = i + 1 if current_sum in sum_index_dict: max_length = max(max_length, i - sum_index_dict[current_sum]) else: sum_index_dict[current_sum] = i return max_length if max_length > 0 else -1"},{"question":"Kevin is practicing his programming skills with matrix operations. He has a matrix of size `N x M` filled with integers. His task is to rotate this matrix 90 degrees clockwise. Help Kevin by writing a function that takes this matrix as input and returns a new matrix which is the given matrix rotated 90 degrees clockwise. For example, given the matrix: ``` 1 2 3 4 5 6 7 8 9 ``` After rotating 90 degrees clockwise, the matrix should become: ``` 7 4 1 8 5 2 9 6 3 ``` ----- Input ----- - The first line contains two integers `N` and `M` denoting the number of rows and columns of the matrix, respectively. - The following `N` lines contain `M` space-separated integers each, representing the matrix elements. ----- Output ----- - Output a new matrix of size `M x N`, where each row corresponds to the 90-degree clockwise rotation of the original matrix. ----- Constraints ----- - `1 <= N, M <= 100` - `-1000 <= matrix[i][j] <= 1000` ----- Sample Input ----- ``` 3 3 1 2 3 4 5 6 7 8 9 ``` ----- Sample Output ----- ``` 7 4 1 8 5 2 9 6 3 ``` ----- EXPLANATION ----- - The original matrix is: ``` 1 2 3 4 5 6 7 8 9 ``` - After rotating 90 degrees clockwise, the new matrix is: ``` 7 4 1 8 5 2 9 6 3 ```","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a given N x M matrix 90 degrees clockwise. Args: matrix (list of list of int): The input matrix of size N x M. Returns: list of list of int: The rotated matrix of size M x N. n = len(matrix) m = len(matrix[0]) # Create a new matrix with swapped dimensions rotated_matrix = [[0] * n for _ in range(m)] for i in range(n): for j in range(m): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"You are given two strings A and B, both of which consist of lowercase English letters. Your task is to modify string A such that it becomes equal to string B. To do this, you may perform the following type of operations: - Choose two indices i and j (0 le i, j < text{len}(A)) such that A_i neq A_j, and swap the characters A_i and A_j. Determine the minimum number of operations required to convert A to B. If it is impossible to convert A to B, return -1. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N representing the length of the strings. - The second line contains a single string A. - The third line contains a single string B. -----Output----- For each test case, print the minimum number of swap operations required to convert A to B. If it is impossible, print -1. -----Constraints----- - 1 le T le 100 - 1 le N le 1000 - |A| = |B| = N -----Example Input----- 3 5 abcde edcba 4 aabb bbaa 3 abc def -----Example Output----- 2 2 -1 -----Explanation----- Example case 1: - We can swap the character at index 0 with the character at index 4, resulting in \\"ebcda\\". - Next, we can swap the characters at indices 1 and 3, resulting in the string \\"edcba\\". Example case 2: - We can swap the characters at indices 0 and 2, resulting in \\"baab\\". - Next, we can swap the characters at indices 1 and 3, resulting in the string \\"bbaa\\". Example case 3: - It is impossible to convert \\"abc\\" to \\"def\\" by swapping characters.","solution":"def min_swaps_to_convert(A, B): if sorted(A) != sorted(B): return -1 mismatched_indices = [] for i in range(len(A)): if A[i] != B[i]: mismatched_indices.append(i) mismatched_pairs = [] for i in mismatched_indices: for j in mismatched_indices: if i != j and A[j] == B[i] and A[i] == B[j]: mismatched_pairs.append((i, j)) mismatched_indices.remove(i) mismatched_indices.remove(j) break return len(mismatched_pairs) def solve(test_cases): results = [] for N, A, B in test_cases: results.append(min_swaps_to_convert(A, B)) return results"},{"question":"You are given a list of strings representing sentences. Write a program that joins these sentences into a single paragraph. Moreover, ensure the first sentence starts with a capital letter and that all other sentences follow the typical English grammar rules, which includes appropriate capitalization and punctuation. Example input: [\\"hello world\\", \\"this is a test.\\", \\"have a good day!\\"] Expected output: \\"Hello world. This is a test. Have a good day!\\"","solution":"def merge_sentences(sentences): Joins a list of sentences into a single paragraph ensuring proper grammar rules. if not sentences: return \\"\\" merged_sentences = [] for i, sentence in enumerate(sentences): sentence = sentence.strip() if not sentence: continue if i == 0: sentence = sentence.capitalize() else: sentence = sentence[0].upper() + sentence[1:] if sentence[-1] not in \'.!?\': sentence += \'.\' merged_sentences.append(sentence) return \' \'.join(merged_sentences)"},{"question":"The manager of a warehouse needs your help to write a program that checks if there exists a row or column in a given NxN grid such that all elements in that row or column are the same. -----Input----- The first line of input contains T - number of test cases. Each of the next T blocks starts with an integer N, the size of the grid. The next N lines each contain N integers, representing the grid values. -----Output----- For each test case output \\"Yes\\" if there is a row or column with all elements the same, otherwise output \\"No\\". -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 50 - 1 ≤ grid[i][j] ≤ 100 -----Example----- Input: 2 3 1 1 1 2 3 4 5 6 7 4 2 2 2 2 3 4 5 6 7 8 9 10 11 12 13 14 Output: Yes Yes -----Explanation----- Example case 1. The first row of the grid has all elements as 1. Example case 2. The first row of the grid has all elements as 2.","solution":"def check_row_or_column(grid): n = len(grid) # Check rows for row in grid: if all(val == row[0] for val in row): return \\"Yes\\" # Check columns for col in range(n): if all(grid[row][col] == grid[0][col] for row in range(n)): return \\"Yes\\" return \\"No\\" def main(T, test_cases): results = [] for test_case in test_cases: N, grid = test_case results.append(check_row_or_column(grid)) return results"},{"question":"On a distant planet, there are k different cities all connected by a network of bi-directional roads. Each road has a certain length, which is expressed in units. Traveling from one city to another city through a road consumes energy equivalent to the length of the road. Being an energy-conscious inhabitant, you want to find out the shortest possible route to travel between each pair of cities to minimize energy consumption. Given a list of roads that connect these cities and their respective lengths, write a program to determine the shortest distance between each pair of cities. If there is no possible route between two cities, the distance should be denoted as -1. ------------------------------------------------------------------------------------ Input: - The first line contains an integer t, the number of test cases. The description of each test case follows: - The first line of each test case contains two integers, n and m, where n is the number of cities and m is the number of roads. - The next m lines each contain three integers u, v, and w, representing a road between city u and city v with length w. Output: - For each test case, output an n x n matrix where the entry at row i and column j represents the shortest distance between city i and city j. If there\'s no possible route, output -1 for that entry. ------------------------------------------------------------------------------------ Constraints: - 1 ≤ t ≤ 10 - 2 ≤ n ≤ 100 - 1 ≤ m ≤ 1000 - 1 ≤ u, v ≤ n - 1 ≤ w ≤ 1000 ------------------------------------------------------------------------------------ Example: Input: 2 4 4 1 2 4 2 3 1 3 4 2 1 3 7 3 3 1 2 5 2 3 3 1 3 10 Output: 0 4 5 7 4 0 1 3 5 1 0 2 7 3 2 0 0 5 8 5 0 3 8 3 0 ------------------------------------------------------------------------------------ Explanation: In the first test case, there are 4 cities and 4 roads. The shortest distance between each pair of cities is calculated and displayed in matrix form. If there\'s no direct or indirect route between two cities, the distance is denoted as -1. In the second test case, similar calculations are made for the 3 cities with 3 roads.","solution":"def floyd_warshall(n, edges): INF = float(\'inf\') dist = [[INF] * n for _ in range(n)] # Initialize distances based on edges for u, v, w in edges: dist[u-1][v-1] = w dist[v-1][u-1] = w # Distance to self is 0 for i in range(n): dist[i][i] = 0 # Floyd Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Replace INF with -1 to indicate no path exists for i in range(n): for j in range(n): if dist[i][j] == INF: dist[i][j] = -1 return dist def shortest_path_multiple_cases(t, cases): results = [] for n, m, edges in cases: results.append(floyd_warshall(n, edges)) return results"},{"question":"Create a function that takes a string composed of uppercase letters and non-alphabet characters and returns the longest substring that contains only uppercase alphabet characters. If there are two or more substrings of maximum length, return the first one found. If the input is not a string or is empty, return \\"Not valid\\". Examples: ``` longest_uppercase_substring(\\"HelloWORLD%\\") => \\"WORLD\\" longest_uppercase_substring(\\"123ABCxyz!UVW78\\") => \\"ABC\\" longest_uppercase_substring(\\"123xyz!78\\") => \\"Not valid\\" longest_uppercase_substring(\\"\\") => \\"Not valid\\" ``` ```Python # Example Python implementation: def longest_uppercase_substring(s): if not isinstance(s, str) or not s: return \\"Not valid\\" max_substring = \\"\\" current_substring = \\"\\" for char in s: if \'A\' <= char <= \'Z\': current_substring += char if len(current_substring) > len(max_substring): max_substring = current_substring else: current_substring = \\"\\" if max_substring == \\"\\": return \\"Not valid\\" return max_substring ```","solution":"def longest_uppercase_substring(s): Takes a string composed of uppercase letters and non-alphabet characters and returns the longest substring that contains only uppercase alphabet characters. If the input is not valid, returns \\"Not valid\\". if not isinstance(s, str) or not s: return \\"Not valid\\" max_substring = \\"\\" current_substring = \\"\\" for char in s: if \'A\' <= char <= \'Z\': current_substring += char if len(current_substring) > len(max_substring): max_substring = current_substring else: current_substring = \\"\\" return max_substring if max_substring else \\"Not valid\\""},{"question":"Given an array of N integers, we define the \\"peak\\" of the array as the sum of all elements that are greater than both of their immediate neighbors. Note that the first and last elements of the array are not considered peaks because they each have only one neighbor. ----Input---- - The first line contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N indicating the number of elements in the array. - The second line of each test case contains N space-separated integers representing the elements of the array. ----Output---- For each test case, print a single line containing one integer — the sum of the peaks in the given array. ----Constraints---- - 1 leq T leq 1000 - 3 leq N leq 10^5 - 1 leq Array elements leq 10^9 ----Example Input---- 3 5 1 3 2 5 4 4 4 3 2 1 5 1 2 3 2 1 ----Example Output---- 8 0 3 ----Explanation---- In the first test case, the peaks are elements 3 and 5. Their sum is 3 + 5 = 8. In the second test case, there are no peaks because no element is greater than both of its immediate neighbors. In the third test case, the only peak is 3. Hence, the sum is 3.","solution":"def find_peak_sum(test_cases): results = [] for case in test_cases: N, arr = case peak_sum = 0 for i in range(1, N - 1): if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: peak_sum += arr[i] results.append(peak_sum) return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((N, arr)) index += 2 return find_peak_sum(test_cases) # Example use: input_data = 3 5 1 3 2 5 4 4 4 3 2 1 5 1 2 3 2 1 print(process_input(input_data)) # Expected output: [8, 0, 3]"},{"question":"You are given a string consisting of lowercase letters. Your task is to replace each letter with the next letter in the alphabet (with \'a\' replacing \'z\') and return the resulting string. # Examples Let\'s take the string \\"abcdz\\" as an example. ``` \'a\' -> \'b\' \'b\' -> \'c\' \'c\' -> \'d\' \'d\' -> \'e\' \'z\' -> \'a\' ``` So, \\"abcdz\\" becomes \\"bcdea\\". However, let\'s take the string \\"xyz\\" and see what happens. ``` \'x\' -> \'y\' \'y\' -> \'z\' \'z\' -> \'a\' ``` So, \\"xyz\\" becomes \\"yza\\". # Your Task Write a function `next_letter` that takes a string as input and returns a new string with each letter replaced by the next one in the alphabet. # Function Signature ```python def next_letter(s: str) -> str: ``` # Constraints - The input string consists of lowercase letters (`\'a\'` to `\'z\'`). - The string will have at least one character and no more than `10^5` characters. # Examples ```python print(next_letter(\\"abcdz\\")) # Should print \\"bcdea\\" print(next_letter(\\"xyz\\")) # Should print \\"yza\\" print(next_letter(\\"hello\\")) # Should print \\"ifmmp\\" ```","solution":"def next_letter(s: str) -> str: Given a string consisting of lowercase letters, replace each letter with the next letter in the alphabet (with \'a\' replacing \'z\') and return the resulting string. result = [] for char in s: if char == \'z\': result.append(\'a\') else: result.append(chr(ord(char) + 1)) return \'\'.join(result)"},{"question":"You are given an array of integers `nums` and an integer `target`. The array is sorted in ascending order, and it is rotated at an unknown pivot such that the resulting array might start in the middle of the original array. For example, the array `[0,1,2,4,5,6,7]` might be rotated to `[4,5,6,7,0,1,2]`. Your task is to write a function that searches for a given target value in this rotated sorted array. If the target value exists in the array, return its index. Otherwise, return `-1`. You must write an algorithm with `O(log n)` runtime complexity. Example 1: Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4 Example 2: Input: nums = [4,5,6,7,0,1,2], target = 3 Output: -1 Example 3: Input: nums = [1], target = 0 Output: -1 Constraints: - 1 <= nums.length <= 5000 - `-10^4 <= nums[i] <= 10^4` - All values of `nums` are unique. - `nums` is guaranteed to satisfy the conditions of a rotated sorted array. - `-10^4 <= target <= 10^4`","solution":"def search(nums, target): Searches for the target value in a rotated sorted array. :param nums: List[int], the rotated sorted array :param target: int, the value to search for :return: int, the index of the target value if found, otherwise -1 left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid if nums[left] <= nums[mid]: # Left part is sorted if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: # Right part is sorted if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Given a list of integers, we define a \\"mountain\\" subarray as a subarray that consists of three or more elements and has the following properties: 1. There exists some index `i` with `0 < i < len - 1` such that `arr[0] < arr[1] < ... < arr[i]` 2. and `arr[i] > arr[i+1] > ... > arr[len-1]`. Your task is to find the length of the longest \\"mountain\\" subarray. If no such mountain exists, return 0. ----- **Input:** The input consists of a single line containing a list of integers separated by spaces. The length of the list is at least 1 and at most `10^5`, and each integer in the list is between `-10^4` and `10^4`. **Output:** Output a single integer denoting the length of the longest \\"mountain\\" subarray. ----- **Example:** Input: ``` 2 1 4 7 3 2 5 ``` Output: ``` 5 ``` Explanation: The longest mountain subarray is `[1, 4, 7, 3, 2]` with length 5. Another example: Input: ``` 2 2 2 ``` Output: ``` 0 ``` Explanation: There is no \\"mountain\\" subarray, so the output is 0. **Note:** To solve this problem, you may need techniques such as multiple array traversals, or maintaining pointers/indexes to keep track of increasing and decreasing sequences efficiently to achieve the desired time complexity.","solution":"def longest_mountain(arr): n = len(arr) if n < 3: return 0 longest = 0 i = 1 while i < n - 1: # Check if arr[i] is a peak if arr[i - 1] < arr[i] > arr[i + 1]: # Find the left bound of the mountain left = i - 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 # Find the right bound of the mountain right = i + 1 while right < n - 1 and arr[right] > arr[right + 1]: right += 1 # Calculate the length of the mountain current_length = right - left + 1 longest = max(longest, current_length) # Move i to the end of the right bound i = right else: i += 1 return longest"},{"question":"Your task is to write a program that solves the \\"minimum spanning tree\\" (MST) problem for a given graph. The input will be provided as an adjacency matrix where a value of 0 indicates no direct edge between the nodes and any positive number represents the weight of the edge. Implement Kruskal\'s algorithm or Prim\'s algorithm to find the MST. # Input - An adjacency matrix as a 2D list of integers. # Output - An integer representing the total weight of the minimum spanning tree. # Example ```python def minimum_spanning_tree(graph): # Your implementation here # Example: graph = [ [0, 2, 0, 6, 0], [2, 0, 3, 8, 5], [0, 3, 0, 0, 7], [6, 8, 0, 0, 9], [0, 5, 7, 9, 0] ] print(minimum_spanning_tree(graph)) # Output: 16 ``` # Constraints - The number of nodes in the graph will be between 1 and 100. - The weights of the edges will be between 1 and 1000. # Solution Explanation 1. **Input Parsing**: Convert the adjacency matrix into a list of edges (if using Kruskal\'s algorithm) or maintain the matrix for Prim\'s algorithm. 2. **Algorithm Implementation**: Implement Kruskal\'s or Prim\'s algorithm to calculate the MST. 3. **Output the Total Weight**: Once the MST is found, output its total weight. Make sure your solution handles edge cases like disconnected graphs and efficiently finds the MST for larger graphs within the specified constraints.","solution":"import heapq def minimum_spanning_tree(graph): Returns the total weight of the minimum spanning tree (MST) of a given undirected, weighted graph using Prim\'s algorithm. if not graph or not graph[0]: return 0 num_nodes = len(graph) visited = [False] * num_nodes min_heap = [(0, 0)] # (cost, vertex) mst_weight = 0 while min_heap: weight, vertex = heapq.heappop(min_heap) if visited[vertex]: continue visited[vertex] = True mst_weight += weight for adj_vertex, edge_weight in enumerate(graph[vertex]): if edge_weight > 0 and not visited[adj_vertex]: heapq.heappush(min_heap, (edge_weight, adj_vertex)) # Check if all nodes were visited (meaning the graph was connected) if all(visited): return mst_weight else: return float(\'inf\') # Graph is disconnected # Example usage: graph = [ [0, 2, 0, 6, 0], [2, 0, 3, 8, 5], [0, 3, 0, 0, 7], [6, 8, 0, 0, 9], [0, 5, 7, 9, 0] ] print(minimum_spanning_tree(graph)) # Output: 16"},{"question":"Given a list of integers, write a function that finds the second largest number in the list. If the list contains less than two unique numbers, return None. # Input - A list `nums` of integers where the length of the list is between 1 and 1000. # Output - An integer representing the second largest unique number in the list, or None if such a number does not exist. # Examples - Input: `[10, 5, 20, 20, 4]` Output: `10` - Input: `[3, 3, 3]` Output: `None` - Input: `[8]` Output: `None` # Constraints - The integers in the list can be negative or positive. - The list will have at most 1000 integers. - Do not use any libraries that provide direct solutions to finding the second largest number.","solution":"def second_largest(nums): Finds the second largest unique number in the list. Returns None if the list contains less than two unique numbers. unique_nums = list(set(nums)) if len(unique_nums) < 2: return None unique_nums.sort(reverse=True) return unique_nums[1]"},{"question":"=====Function Description===== itertools.product(*iterables, repeat=1) This function returns the Cartesian product of input iterables. The output is equivalent to a nested for-loop. The product tuples are emitted in lexicographic sorted order if the input iterables are sorted. Sample Code >>> from itertools import product >>> >>> print list(product(\'AB\', \'12\')) [(\'A\', \'1\'), (\'A\', \'2\'), (\'B\', \'1\'), (\'B\', \'2\')] >>> >>> A = [1, 2] >>> B = [3, 4] >>> print list(product(A, B)) [(1, 3), (1, 4), (2, 3), (2, 4)] =====Problem Statement===== You are given two lists, A and B. Your task is to compute and print the Cartesian product of A and B. =====Input Format===== A single line containing space-separated integers for list A. A single line containing space-separated integers for list B. =====Constraints===== 1 ≤ len(A), len(B) ≤ 10 The input lists contain integers from 1 to 10. =====Output Format===== Print the Cartesian product of A and B on separate lines.","solution":"from itertools import product def cartesian_product(A, B): Compute the Cartesian product of lists A and B. Parameters: A (list): List of integers. B (list): List of integers. Returns: list: List of tuples representing the Cartesian product of A and B. return list(product(A, B))"},{"question":"You are given an array of integers `nums` and an integer `k`. The array represents the values of a sequence of cards and `k` is the number of cards each player can take per turn. Alice and Bob alternately take turns, starting with Alice. Each player can only take exactly `k` consecutive cards from the array, starting from either end of the remaining cards. The objective of the game is to maximize the sum of the values of the cards each player collects. Return the maximum score Alice can achieve if both players play optimally. Example 1: Input: nums = [1,2,3,4,5,6,1], k = 3 Output: 12 Explanation: Alice can achieve the maximum score of 12 by taking the cards [1, 2, 3] first. Bob will then take [1, 6, 5] and Alice will take [4]. Example 2: Input: nums = [2,2,2], k = 2 Output: 4 Explanation: Alice can achieve the maximum score of 4 by taking the first two cards. Bob will then take the remaining card. Example 3: Input: nums = [9,7,7,9,7,7,9], k = 7 Output: 55 Explanation: Alice will take all the cards, achieving the maximum score possible. Example 4: Input: nums = [1,1000,1], k = 1 Output: 1 Explanation: Alice will take the first card, Bob will take the card with value 1000, and Alice will take the last card. Alice\'s total score will be 1 + 1 = 2. Example 5: Input: nums = [1,2,100,2,1], k = 2 Output: 3 Explanation: Alice can take either the first two cards [1, 2], or the last two cards [2, 1]. In either case, her score is 3. Constraints: - 1 <= nums.length <= 1000 - 1 <= nums[i] <= 1000 - 1 <= k <= nums.length","solution":"def max_score(nums, k): Returns the maximum score Alice can achieve if both players play optimally. n = len(nums) total_score = sum(nums[:k]) max_score = total_score for i in range(1, k + 1): total_score += nums[-i] - nums[k - i] max_score = max(max_score, total_score) return max_score"},{"question":"You are organizing a company networking event where employees can exchange business cards with one another. Each employee exchanges cards with every other employee exactly once during the event. Your task is to write a function to calculate the number of unique business card exchanges that will occur given a certain number of employees. Write a function, that takes the number of employees as an argument and returns the total number of unique business card exchanges. For example, if there are 4 employees, they can make the following exchanges: - Employee 1 with Employee 2 - Employee 1 with Employee 3 - Employee 1 with Employee 4 - Employee 2 with Employee 3 - Employee 2 with Employee 4 - Employee 3 with Employee 4 Thus, the total number of exchanges for 4 employees is 6. Note that (Employee A, Employee B) and (Employee B, Employee A) are considered the same exchange.","solution":"def count_exchanges(num_employees): Calculate the number of unique business card exchanges among employees. The number of unique exchanges of business cards among n employees is given by the combination formula: C(n, 2) = n * (n - 1) / 2 :param num_employees: Number of employees :return: Total number of unique exchanges if num_employees < 2: return 0 # If there are fewer than two employees, no exchanges can occur return num_employees * (num_employees - 1) // 2"},{"question":"You are given a string representing a mathematical expression consisting of integers, the operators \'+\', \'-\', \'*\', and \'/\', and empty spaces. Your task is to implement a function to evaluate this expression and return the result as an integer. The expression should be evaluated based on the following rules: 1. The operators \'*\', and \'/\' have higher precedence than \'+\' and \'-\'. 2. The operators of equal precedence are evaluated from left to right. 3. It is guaranteed that the given expression is always valid. 4. Division between two integers should truncate toward zero. Implement the function `evaluateExpression(expression: str) -> int` that takes a string `expression` and returns the result of its evaluation. Example 1: Input: \\"3+2*2\\" Output: 7 Explanation: Multiplication has higher precedence than addition. Example 2: Input: \\" 3/2 \\" Output: 1 Explanation: Division between two integers should truncate toward zero. Example 3: Input: \\" 3+5 / 2 \\" Output: 5 Explanation: Division has higher precedence than addition, and integer division truncates toward zero. Constraints: - The length of `expression` will be in the range [1, 200]. - The `expression` contains only non-negative integers, \'+\', \'-\', \'*\', \'/\', and empty spaces. - The given expression is always a valid mathematical expression. Implement the function in Python.","solution":"def evaluateExpression(expression: str) -> int: Evaluates a mathematical expression containing non-negative integers and the operators \'+\', \'-\', \'*\', \'/\'. # Remove whitespace from the expression expression = expression.replace(\\" \\", \\"\\") stack = [] num = 0 sign = \\"+\\" i = 0 while i < len(expression): char = expression[i] if char.isdigit(): num = num * 10 + int(char) if char in \\"+-*/\\" or i == len(expression) - 1: if sign == \\"+\\": stack.append(num) elif sign == \\"-\\": stack.append(-num) elif sign == \\"*\\": stack.append(stack.pop() * num) elif sign == \\"/\\": stack.append(int(stack.pop() / num)) sign = char num = 0 i += 1 return sum(stack)"},{"question":"You have been tasked with evaluating a network of computers in a corporate office to minimize the risk of network failure. The office has n computers connected by m bidirectional cables, forming a network. Each cable has a failure rate, which denotes the likelihood of failure, and can be represented as a floating-point number between 0 and 1. You need to determine the minimum sum of failure rates that can connect all computers in the most reliable way, such that the network still remains fully connected. -----Input----- The first line contains two integers n and m (2 leq n leq 1000, 1 leq m leq 2000) — the number of computers and the number of cables respectively. Each of the next m lines contains three values u, v, and r (1 leq u, v leq n, 0 leq r leq 1, u ne v), where u and v are the computers connected by a cable and r represents the failure rate of that cable. It is guaranteed that the network is initially connected. -----Output----- Print one number — the minimum possible sum of failure rates ensuring that all computers remain connected. -----Examples----- Input 4 5 1 2 0.1 1 3 0.2 1 4 0.4 2 3 0.3 3 4 0.1 Output 0.5 Input 3 3 1 2 0.3 2 3 0.4 1 3 0.5 Output 0.7 -----Note----- In the first example, the optimal way to connect all computers is to choose the cables with failure rates 0.1, 0.2, and 0.2. This gives a total failure rate of 0.5.","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [1] * size def find(self, node): if self.parent[node] != node: self.parent[node] = self.find(self.parent[node]) return self.parent[node] def union(self, node1, node2): root1 = self.find(node1) root2 = self.find(node2) if root1 != root2: if self.rank[root1] > self.rank[root2]: self.parent[root2] = root1 elif self.rank[root1] < self.rank[root2]: self.parent[root1] = root2 else: self.parent[root2] = root1 self.rank[root1] += 1 def minimum_failure_rate(n, m, connections): uf = UnionFind(n) edges = sorted(connections, key=lambda x: x[2]) min_failure = 0.0 for u, v, r in edges: if uf.find(u-1) != uf.find(v-1): uf.union(u-1, v-1) min_failure += r return min_failure"},{"question":"A magician has n coins arranged in a line, some of them showing heads and others showing tails. Every day, you must flip exactly one series of consecutive coins (a contiguous subarray). The goal is to have all coins showing heads. Return the minimum number of days required to achieve this. Example 1: Input: coins = [1, 0, 1, 1, 0] Output: 2 Explanation: Day 1: Flip the first 3 coins [1, 0, 1] to get [0, 1, 0, 1, 0] Day 2: Flip the last 4 coins [1, 1, 0, 0] to get [0, 1, 1, 1, 1] Example 2: Input: coins = [0, 0, 0] Output: 1 Explanation: Day 1: Flip all 3 coins [0, 0, 0] to get [1, 1, 1] Example 3: Input: coins = [1, 1, 1] Output: 0 Explanation: The coins are already all showing heads. Example 4: Input: coins = [1, 0, 1, 0, 1, 0] Output: 3 Explanation: Day 1: Flip the first 2 coins [1, 0] to get [0, 1, 1, 0, 1, 0] Day 2: Flip the next 2 coins [1, 0] to get [0, 1, 0, 1, 1, 0] Day 3: Flip the last 3 coins [1, 0, 0] to get [0, 1, 1, 0, 1, 1] Constraints: 1 <= n <= 10^5 coins[i] is either 1 (heads) or 0 (tails).","solution":"def min_flips_to_heads(coins): Return the minimum number of series of consecutive coins flips required to make all coins show heads (1). n = len(coins) # If n is 0, no flips are needed if n == 0: return 0 # Initialize the number of flips flips = 0 # Iterate through the coins for i in range(n): # If we find a \'0\' (tail) and it is the start of a series of tails, # we need one flip to turn all the following tails in this series to heads if coins[i] == 0 and (i == 0 or coins[i - 1] == 1): flips += 1 return flips"},{"question":"An online shop wants to analyze the sales of its products. They have records of daily sales for each product and want to calculate the moving average over a specified number of days in order to observe trends. Your task is to write a function that takes a dictionary of product sales and a window size (number of days) and returns a new dictionary of products with their corresponding moving averages, with each value rounded to two decimal places. Task: Write a function `calculate_moving_average(sales, window_size)` which takes: - `sales`: A dictionary where the keys are product names and the values are lists of daily sales amounts. - `window_size`: An integer representing the number of days over which to calculate the moving average. The function should return a new dictionary where the keys are the product names and the values are lists of moving averages for the corresponding days. Calculation for moving average: ``` Moving average for day `i`: (Sum of sales from day `i` to `i + window_size - 1`) / `window_size` ``` For example, if there are sales for 5 days and the window size is 3, the moving averages will be calculated for days 1 to 3, days 2 to 4, and days 3 to 5. Example input: ```python sales = { \'ProductA\': [10, 20, 30, 40, 50], \'ProductB\': [5, 15, 25, 35, 45] } window_size = 3 ``` Example output: ```python { \'ProductA\': [20.00, 30.00, 40.00], \'ProductB\': [15.00, 25.00, 35.00] } ``` Explanation: For `ProductA`: - Moving average for the first window (days 1 to 3): (10 + 20 + 30) / 3 = 60 / 3 = 20.00 - Moving average for the second window (days 2 to 4): (20 + 30 + 40) / 3 = 90 / 3 = 30.00 - Moving average for the third window (days 3 to 5): (30 + 40 + 50) / 3 = 120 / 3 = 40.00 For `ProductB`: - Moving average for the first window (days 1 to 3): (5 + 15 + 25) / 3 = 45 / 3 = 15.00 - Moving average for the second window (days 2 to 4): (15 + 25 + 35) / 3 = 75 / 3 = 25.00 - Moving average for the third window (days 3 to 5): (25 + 35 + 45) / 3 = 105 / 3 = 35.00","solution":"def calculate_moving_average(sales, window_size): Calculate the moving average for each product over the specified window size. :param sales: Dictionary where keys are product names and values are lists of daily sales amounts. :param window_size: Integer representing the number of days over which to calculate the moving average. :return: Dictionary where keys are product names and values are lists of moving averages (rounded to 2 decimal places). moving_averages = {} for product, daily_sales in sales.items(): product_moving_averages = [] for i in range(len(daily_sales) - window_size + 1): window = daily_sales[i : i + window_size] average = sum(window) / window_size product_moving_averages.append(round(average, 2)) moving_averages[product] = product_moving_averages return moving_averages"},{"question":"Sorting Tuples by a Custom Key In certain applications, we need to sort tuples based on a combination of their elements. Consider a scenario where you have a list of tuples, and each tuple contains exactly three integers. You want to sort the tuples in such a way that they follow a specific order based on the provided keys. Given a list of tuples and a list of keys representing the order of indices that should be used for sorting, implement a function to perform the custom sort. The keys list will always contain exactly three unique integers which represent the indices of the tuples in the order of priority for sorting. For example: Tuples: [(1, 4, 3), (2, 3, 5), (2, 4, 1), (3, 1, 2)] Keys: [2, 0, 1] In the above example, the tuple list should be sorted primarily by the third element (index 2), then by the first element (index 0), and finally by the second element (index 1). Directions: - Implement a function named `custom_sort` that takes two arguments: a list of tuples and a list of keys. - The function should return a new list of tuples sorted according to the provided keys. - Assume that the input list of tuples and keys are non-empty and valid. **Example:** ```python def custom_sort(tuples_list, keys): # Your code here # Sample Input tuples_list = [(1, 4, 3), (2, 3, 5), (2, 4, 1), (3, 1, 2)] keys = [2, 0, 1] # Expected Output print(custom_sort(tuples_list, keys)) # Output: [(2, 4, 1), (3, 1, 2), (1, 4, 3), (2, 3, 5)] ```","solution":"def custom_sort(tuples_list, keys): Sorts a list of tuples based on the values at the indices specified in keys. :param tuples_list: List of tuples to be sorted. :param keys: List of indices that indicate the order of sorting. :return: A new list of tuples sorted based on the specified keys. return sorted(tuples_list, key=lambda x: (x[keys[0]], x[keys[1]], x[keys[2]]))"},{"question":"A balanced parenthesis string is defined as a string that consists only of the characters \'(\' and \')\' and satisfies the following properties: 1. An empty string is a balanced parenthesis string. 2. If \\"P\\" is a balanced parenthesis string, then \\"(\\" + \\"P\\" + \\")\\" is also a balanced parenthesis string. 3. If \\"P\\" and \\"Q\\" are balanced parenthesis strings, then \\"P\\" + \\"Q\\" is also a balanced parenthesis string. Given an integer n, generate all possible balanced parenthesis strings of length 2*n. -----Input----- The input contains a single integer n (1 <= n <= 12), representing the number of pairs of parenthesis. -----Output----- Output all the balanced parenthesis strings of length 2*n in any order. Each string should be on a new line. -----Example----- Input: 3 Output: ((())) (()()) (())() ()(()) ()()() (Note: The output strings can be in any order.)","solution":"def generate_parenthesis(n): Function to generate all balanced parenthesis strings of length 2*n. :param n: Number of pairs of parentheses :type n: int :return: List of balanced parenthesis strings :rtype: List[str] def backtrack(partial_solution, open_count, close_count): if len(partial_solution) == 2 * n: result.append(partial_solution) return if open_count < n: backtrack(partial_solution + \\"(\\", open_count + 1, close_count) if close_count < open_count: backtrack(partial_solution + \\")\\", open_count, close_count + 1) result = [] backtrack(\\"\\", 0, 0) return result"},{"question":"In this Kata, you are expected to implement a function that determines if a given string of braces is valid, meaning every opening brace has a corresponding closing brace in the correct order. The braces are: * `()`, `{}`, `[]` The function should return `true` if the string is valid and `false` if it is not. # Example valid_braces(\\"(){}[]\\") == true valid_braces(\\"([{}])\\") == true valid_braces(\\"(}\\") == false valid_braces(\\"[(])\\") == false # Notes * The input string will only contain these characters: `()[]{}`. * An empty input string is considered valid.","solution":"def valid_braces(string): Determines if the input string of braces is valid. :param string: A string containing only characters \'()\', \'{}\', \'[]\' :return: True if the string is valid, False otherwise # Dictionary to map open braces to their corresponding closing braces brace_map = {\'(\': \')\', \'{\': \'}\', \'[\': \']\'} # Stack to keep track of open braces stack = [] for char in string: if char in brace_map: # If it\'s an opening brace stack.append(char) else: # If it\'s a closing brace if not stack or brace_map[stack.pop()] != char: return False return not stack # Return True if stack is empty (all braces matched)"},{"question":"Create a function `prime_factors_count(n)` that returns the count of prime factors (including their multiplicities) of a given integer `n`. For example, the prime factors of `18` are `2` and `3` (with `3` appearing twice), so the function should return `3` for `18`. Similarly, the prime factors of `60` are `2`, `3`, and `5` (with `2` appearing twice), hence the function should return `4` for `60`. The function should be optimized to handle large numbers efficiently.","solution":"def prime_factors_count(n): Returns the count of prime factors (including their multiplicities) of a given integer n. if n <= 1: return 0 count = 0 factor = 2 while factor * factor <= n: while (n % factor) == 0: count += 1 n //= factor factor += 1 if n > 1: count += 1 return count"},{"question":"Farmer John has a rectangular barnyard with dimensions N (length) by M (width). He wants to divide the barnyard into the maximum number of square plots with side length K. Help Farmer John determine how many such square plots he can create. -----Input:----- - The first line contains an integer, T, the number of test cases. Then the test cases follow. - Each test case consists of three integers: N, M, and K. -----Output:----- For each test case, output a single integer representing the maximum number of KxK square plots that can fit within the NxM barnyard. -----Constraints----- - 1 leq T leq 10^5 - 1 leq N, M, K leq 10^6 -----Sample Input:----- 3 6 6 2 15 20 5 8 9 3 -----Sample Output:----- 9 12 6","solution":"def max_square_plots(T, test_cases): Returns a list of the maximum number of KxK square plots that can fit within the NxM barnyard. results = [] for i in range(T): N, M, K = test_cases[i] if K > N or K > M: results.append(0) else: max_plots = (N // K) * (M // K) results.append(max_plots) return results"},{"question":"Finding Peaks Task Write a function that receives an array of integers and returns an array of the local peaks of the input array. A local peak is an element that is greater than its neighbors. The first and last elements of the array are not considered as peaks. The format A function that takes an array of integers and returns an array of integers. ``function findPeaks(arr){ return [] }`` Examples findPeaks([1, 2, 3, 1, 5, 6, 4]) --> [3, 6] The number 3 is greater than its neighbors (2, 1) The number 6 is greater than its neighbors (5, 4) -------------------------------------------------------------------- findPeaks([10, 20, 15, 2, 23, 90, 67]) --> [20, 90] The number 20 is greater than its neighbors (10, 15) The number 90 is greater than its neighbors (23, 67) -------------------------------------------------------------------- findPeaks([1, 3, 20, 4, 1, 0]) --> [20] The number 20 is greater than its neighbors (3, 4) -------------------------------------------------------------------- findPeaks([1, 1, 1, 1, 1, 1, 1]) --> [] No local peaks in the constant array. -------------------------------------------------------------------- findPeaks([1, 2, 3, 4, 5, 6]) --> [] The first and last elements are not considered, thus no local peaks exist. Note: Neighbor comparison should consider array bounds to prevent errors.","solution":"def findPeaks(arr): Returns an array of local peaks in the input array. A local peak is an element that is greater than its neighbors. The first and last elements are not considered as peaks. n = len(arr) if n < 3: return [] # Not enough elements to have a peak peaks = [] for i in range(1, n - 1): if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: peaks.append(arr[i]) return peaks"},{"question":"Given a list of integers, write a function to identify the largest subset where all pairs (i, j) of integers in the subset satisfy the condition i % j == 0 or j % i == 0. For example, given the input list [3, 5, 10, 20, 21], the largest subset satisfying the condition is [5, 10, 20], because: - 10 % 5 == 0 - 20 % 10 == 0 - 20 % 5 == 0 Implement a function `find_largest_divisible_subset(lst)` that returns this largest subset in any order. # Example Input ```python find_largest_divisible_subset([1, 2, 3]) ``` Output ```python [1, 2] # or [1, 3], as both are valid subsets ``` # Constraints - All elements in the input list are positive integers. - The length of the list will not exceed 100. - An element can only belong to one subset in the output.","solution":"def find_largest_divisible_subset(lst): if not lst: return [] lst.sort() dp = [[num] for num in lst] for i in range(len(lst)): for j in range(i): if lst[i] % lst[j] == 0: if len(dp[i]) < len(dp[j]) + 1: dp[i] = dp[j] + [lst[i]] return max(dp, key=len)"},{"question":"Create a function named `palindrome_check`/`PalindromeCheck` that takes a string `s` and determines whether the string is a palindrome, ignoring non-alphabetic characters and case. A palindrome is a string that reads the same backward as forward. Example: ```python palindrome_check(\\"A man, a plan, a canal, Panama\\"); # should return True palindrome_check(\\"race a car\\"); # should return False palindrome_check(\\"No lemon, no melon\\"); # should return True ```","solution":"def palindrome_check(s): Determines whether the string s is a palindrome, ignoring non-alphabetic characters and case. Parameters: s (str): input string Returns: bool: True if s is a palindrome, False otherwise filtered_s = \'\'.join(char.lower() for char in s if char.isalpha()) return filtered_s == filtered_s[::-1]"},{"question":"Brief You are given a list of integers and an integer target. You need to find all unique quadruplets in the list which give the sum of the target. Write a function `four_sum` that takes in the list of integers and the target, and outputs a list of lists containing all unique quadruplets that sum up to the target. Specifications You\'ll be given: * A `list` of `integer`s `nums`. * An `integer` `target`. You need to return a list of lists containing the unique quadruplets (each quadruplet itself being a list of integers) that sum up to the target. Example ```python nums = [1, 0, -1, 0, -2, 2] target = 0 # Explanation: # The unique quadruplets are: # [ # [-1, 0, 0, 1], # [-2, -1, 1, 2], # [-2, 0, 0, 2] # ] four_sum([1, 0, -1, 0, -2, 2], 0) == [[-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2]] ```","solution":"def four_sum(nums, target): Returns a list of lists containing all unique quadruplets that sum up to the target. nums.sort() quadruplets = [] n = len(nums) for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, n - 1 while left < right: summed = nums[i] + nums[j] + nums[left] + nums[right] if summed == target: quadruplets.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif summed < target: left += 1 else: right -= 1 return quadruplets"},{"question":"Given an array of integers, determine whether the sum of its elements is even or odd. If the sum is even, return the string `\\"even\\"`. If the sum is odd, return the string `\\"odd\\"`. Examples: ``` [1, 2, 3, 4] -> 1 + 2 + 3 + 4 = 10 -> \\"even\\" [1, 1, 1] -> 1 + 1 + 1 = 3 -> \\"odd\\" [0, -1, -5] -> 0 + (-1) + (-5) = -6 -> \\"even\\" ``` Note: An empty array should be treated as having a sum of 0, which is even.","solution":"def sum_is_even_or_odd(arr): Determines if the sum of the elements of the array is even or odd. Parameters: arr (list): List of integers. Returns: str: \\"even\\" if the sum is even, \\"odd\\" if the sum is odd. total_sum = sum(arr) if total_sum % 2 == 0: return \\"even\\" else: return \\"odd\\""},{"question":"Jack is developing a new text editor that supports various operations on text. The core of his editor is a string manipulation system where he can perform a specific set of operations on a given string S. The operations include appending characters to the end of the string, deleting characters from the end of the string, and querying the current form of the string. Jack wants your help to implement the function to handle these operations efficiently. The operations are defined as follows: 1. \'append <char>\': Appends the character <char> to the end of the string. 2. \'delete\': Deletes the last character of the string. If the string is empty, it does nothing. 3. \'substring <i> <j>\': Returns the substring from the i-th (1-based index) to j-th character (inclusive). Both i and j are valid index numbers within the current string boundaries. Write a function to process a series of these operations and return the results of the \'substring\' queries in the order they appear. -----Input----- The first line of the input contains one integer Q denoting the number of operations to process. The next Q lines contain one of the following operations: - \'append <char>\' where <char> is a lowercase English letter. - \'delete\' - \'substring <i> <j>\' where 1 ≤ i ≤ j ≤ current length of the string. -----Output----- Each \'substring\' operation should produce a line of output containing the resulting substring. -----Constraints----- 1 ≤ Q ≤ 100000 Each append operation contains exactly one character which is a lowercase English letter. 1 ≤ i ≤ j ≤ length(S) for all \'substring\' operations. The current length of the string at any point in time will not exceed 100000 characters. -----Example----- Input: 6 append a append b append c substring 1 3 delete substring 1 2 Output: abc ab","solution":"def text_editor(operations): Processes a series of text editing operations and returns the results of the substring queries. Args: operations (list of str): List of operations to process. Returns: list of str: Results of the \'substring\' queries. current_text = [] results = [] for operation in operations: if operation.startswith(\'append\'): _, char = operation.split() current_text.append(char) elif operation == \'delete\': if current_text: current_text.pop() elif operation.startswith(\'substring\'): _, i, j = operation.split() i, j = int(i), int(j) results.append(\'\'.join(current_text[i-1:j])) return results"},{"question":"Implement a function `count_frequency` that takes in a string and returns a dictionary where the keys are the unique characters from the string, and the values are the number of times each character appears in the input string. Ensure that the function handles both uppercase and lowercase letters as distinct characters. For example: ``` count_frequency(\\"hello\\") should return {\'h\': 1, \'e\': 1, \'l\': 2, \'o\': 1} count_frequency(\\"aabCcc\\") should return {\'a\': 2, \'b\': 1, \'C\': 1, \'c\': 2} ```","solution":"def count_frequency(input_string): Returns a dictionary where the keys are the unique characters from the input string and the values are the number of times each character appears in the input string. frequency_dict = {} for char in input_string: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Write a function `isPalindromePermutation` that determines if a given string is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards (ignoring spaces and punctuation), and a permutation is a rearrangement of letters. The function should check if there is any permutation of the input string that could form a palindrome. **Function Signature:** `def isPalindromePermutation(s: str) -> bool:` **Input:** - `s` - A string which consists of lowercase or uppercase characters and may include spaces. **Output:** - Return `True` if any permutation of the string can form a palindrome, otherwise return `False`. **Examples:** ``` isPalindromePermutation(\\"Tact Coa\\") -> True # \\"taco cat\\" is a palindrome isPalindromePermutation(\\"Hello\\") -> False ``` **Constraints:** - The function should ignore spaces in the input string. - It should be case insensitive, meaning that the function treats uppercase and lowercase letters as the same character. - The length of the string will not exceed 100 characters. **Hints:** - One way to solve this problem is to count the frequency of each character. - For a string to be a permutation of a palindrome, each character (except at most one) must occur an even number of times.","solution":"def isPalindromePermutation(s: str) -> bool: from collections import Counter # normalize the string: remove spaces and convert to lowercase s = s.replace(\\" \\", \\"\\").lower() # count the frequency of each character char_count = Counter(s) # count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # for the string to be a permutation of a palindrome, it can have at most one character with an odd frequency return odd_count <= 1"},{"question":"Task Create a method `is_palindrome()` to check whether the given string is a palindrome. Ignore case, spaces, and punctuation when evaluating the string. For example: ```python is_palindrome(\\"A man, a plan, a canal, Panama\\") == True is_palindrome(\\"No \'x\' in Nixon\\") == True is_palindrome(\\"Was it a car or a cat I saw?\\") == True is_palindrome(\\"hello\\") == False is_palindrome(\\"level\\") == True is_palindrome(\\"palindrome\\") == False ``` In this Kata, a string is said to be a palindrome if it reads the same backward as forward once all case, spaces, and punctuation are ignored.","solution":"import re def is_palindrome(s: str) -> bool: Check whether the given string is a palindrome. Ignore case, spaces, and punctuation when evaluating the string. cleaned_string = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return cleaned_string == cleaned_string[::-1]"},{"question":"Given an array of integers, define a rotation as shifting each of its elements one position to the right, with the last element moving to the first position. A rotated array of an array can be \\"normalized\\" by continuously rotating it until the smallest possible lexicographical order is achieved. For example, consider an array `[3, 1, 2]`: - Rotations will be `[2, 3, 1]` and `[1, 2, 3]` - The smallest lexicographical order of these rotations is `[1, 2, 3]` Write a function that takes an array `a` of integers and returns the smallest lexicographical rotation of the array. -----Input----- The first line contains an integer n (1 leq n leq 100,000), the length of the array a. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 1,000,000). -----Output----- Print a single line containing the smallest lexicographical rotation of the array, with the elements separated by spaces. -----Examples----- Input 3 3 1 2 Output 1 2 3 Input 5 5 6 1 2 3 Output 1 2 3 5 6 Input 4 4 3 2 1 Output 1 4 3 2","solution":"def smallest_lexicographical_rotation(a): This function takes a list of integers as input and returns the smallest lexicographical rotation of the input list as a list of integers. Parameters: a (list): A list of integers. Returns: list: The smallest lexicographical rotation of the input list. n = len(a) # Create a list of all rotations rotations = [a[i:] + a[:i] for i in range(n)] # Find the smallest lexicographical rotation smallest_rotation = min(rotations) return smallest_rotation"},{"question":"Alex has `n` containers, initially empty. He can perform `m` operations, each of one of these two types: 1. Fill all containers from index `u` to index `v` with `k` units of water. 2. Query the total amount of water in container `p` after the operations. # Input - The first line of the input contains three integers `n` and `m` respectively, indicating the number of containers and the number of operations. - Each of the next `m` lines contains one operation in one of the following two formats: - `A u v k`: where this operation fills every container from index `u` to index `v` with `k` units of water. - `Q p`: where this operation asks for the amount of water in the container at index `p`. # Output For each operation of type `Q p`, output on a single line the total units of water in the container at index `p`. # Example Input: ``` 5 4 Q 2 A 1 3 10 Q 2 A 2 5 5 Q 4 ``` Output: ``` 0 10 5 ``` # Constraints - (1 le n leq 10^6) - (1 le m leq 250,000) - (1 leq u leq v leq n) - (1 leq k leq 10^9) - (1 leq p leq n)","solution":"def process_operations(n, m, operations): containers = [0] * (n + 1) results = [] for operation in operations: if operation[0] == \'A\': _, u, v, k = operation containers[u - 1] += k if v < n: containers[v] -= k elif operation[0] == \'Q\': _, p = operation total_water = 0 for i in range(p): total_water += containers[i] results.append(total_water) return results"},{"question":"# Number Spiral Diagonals In this task, you are required to generate a special number spiral where the elements are arranged in a square grid defined by a given size. The spiral starts with the number 1 at the center and then fills the grid in a clockwise direction. Your goal is to find the sum of the numbers on the diagonals of this spiral. There are two diagonals in a square matrix: the principal diagonal (top left to bottom right) and the secondary diagonal (top right to bottom left). Note that in a number spiral, some numbers may appear on both diagonals. The input to your function will be a single integer n, which represents the size of the grid (n x n). You can assume that n will always be an odd positive integer. Your function should return the sum of the numbers on both diagonals of the spiral. # Example For a 3x3 spiral, the grid would look like: ``` 7 8 9 6 1 2 5 4 3 ``` The sum of the diagonals is 7 + 9 + 1 + 3 + 5 = 25. For a 5x5 spiral, the grid would look like: ``` 21 22 23 24 25 20 7 8 9 10 19 6 1 2 11 18 5 4 3 12 17 16 15 14 13 ``` The sum of the diagonals is 21 + 25 + 7 + 1 + 3 + 13 + 17 + 19 + 9 = 101. # Input - An odd positive integer `n` (1 ≤ n ≤ 1001) # Output - An integer representing the sum of the numbers on the diagonals of the spiral. # Function Signature ```python def number_spiral_diagonals(n: int) -> int: pass ```","solution":"def number_spiral_diagonals(n: int) -> int: if n == 1: return 1 total_sum = 1 current_number = 1 for layer in range(1, (n // 2) + 1): step_size = layer * 2 for i in range(4): current_number += step_size total_sum += current_number return total_sum"},{"question":"# Task You are managing a parking lot that has a certain number of parking slots aligned linearly, and cars that want to park one by one. Each parking slot can either be taken (represented by `1`) or free (represented by `0`). Your task is to find the closest free slot for a car that arrives and wants to park. - If two slots are at the same distance, you should choose the one with the smallest index. - If no free slots are available, return `-1`. # Input - A list of integers representing the parking slots, `slots`. - An integer, `car`, representing the index where the car arrives and wants to park. # Output - An integer representing the index of the closest free slot or `-1` if no free slots are available. # Example Given the incoming car\'s arrival index and the parking slots status: ```python find_closest_slot(slots, car) find_closest_slot([0, 1, 0, 1, 0], 2) = 2 find_closest_slot([1, 1, 1, 0, 1], 1) = 3 find_closest_slot([1, 1, 1, 1, 1], 0) = -1 find_closest_slot([0, 1, 0, 1, 0], 4) = 4 find_closest_slot([0, 0, 0, 0, 0], 2) = 2 ``` # Constraints - The length of `slots` can be up to `10^6`. - The index `car` will be between `0` and length of `slots` - 1.","solution":"def find_closest_slot(slots, car): Finds the closest free slot for a car that wants to park. Parameters: slots (list of int): a list where 0 indicates a free slot and 1 indicates an occupied slot. car (int): the index where the car arrives and wants to park. Returns: int: the index of the closest free slot, or -1 if no free slot is available. min_distance = float(\'inf\') closest_index = -1 for i in range(len(slots)): if slots[i] == 0: distance = abs(i - car) if distance < min_distance or (distance == min_distance and i < closest_index): min_distance = distance closest_index = i return closest_index"},{"question":"Implement a function to perform image compression using Run-Length Encoding (RLE). The input to your function will be a string representation of a binary image, where \'1\' represents a black pixel and \'0\' represents a white pixel. The image will be provided as a list of strings, where each string represents one row of the image. Your function should compress the image using RLE, such that consecutive sequences of the same pixel value are represented by a single instance of that value followed by the count of occurrences. The output should be a list of dictionaries, each dictionary representing the RLE compressed version of a row. # API Specifications: - `compress_image(image: List[str]) -> List[Dict[str, Union[str, int]]]` # Example: ```python def compress_image(image: List[str]) -> List[Dict[str, Union[str, int]]]: # Your implementation here image = [ \\"111000\\", \\"110011\\", \\"001111\\", \\"000000\\" ] print(compress_image(image)) ``` # Output: ```python [ [{\'1\': 3}, {\'0\': 3}], [{\'1\': 2}, {\'0\': 2}, {\'1\': 2}], [{\'0\': 2}, {\'1\': 4}], [{\'0\': 6}] ] ``` # Constraints: - The input strings will only contain \'0\'s and \'1\'s. - Rows are of equal length. - The number of rows and the length of each row will not exceed 10^3.","solution":"from typing import List, Dict, Union def compress_image(image: List[str]) -> List[Dict[str, Union[str, int]]]: result = [] for row in image: compressed_row = [] current_char = row[0] current_count = 1 for char in row[1:]: if char == current_char: current_count += 1 else: compressed_row.append({current_char: current_count}) current_char = char current_count = 1 compressed_row.append({current_char: current_count}) result.append(compressed_row) return result"},{"question":"You are given two linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. Each number does not contain any leading zero, except the number 0 itself. For example, consider the numbers 342 and 465. The linked lists representing these numbers would be: ``` l1: 2 -> 4 -> 3 l2: 5 -> 6 -> 4 ``` When summed, the result is 807, which would be represented as: ``` result: 7 -> 0 -> 8 ``` -----Input----- The first line contains an integer `t` (1 leq t leq 100) — the number of test cases. Then, `t` test cases follow. Each test case consists of two lines. - The first line contains the elements of the first linked list `l1`. - The second line contains the elements of the second linked list `l2`. Both linked lists contain digits from 0 to 9 and have at least one digit each. The list elements appear in reverse order. -----Output----- For each test case, print the elements of the resulting linked list, where the elements should also be in reverse order, representing the sum of the numbers. -----Example----- Input 2 2 4 3 5 6 4 0 7 3 2 Output 7 0 8 7 3 2 -----Note----- In the first test case, the sum of the numbers represented by the linked lists `2 -> 4 -> 3` and `5 -> 6 -> 4` is `807`, which is represented as `7 -> 0 -> 8`. In the second test case, the sum of the number represented by linked list `0` and `7 -> 3 -> 2` is `237`, which is represented as `7 -> 3 -> 2`.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(l1, l2): dummy = ListNode() current = dummy carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 carry, out = divmod(val1 + val2 + carry, 10) current.next = ListNode(out) current = current.next l1 = l1.next if l1 else None l2 = l2.next if l2 else None return dummy.next def list_to_linkedlist(lst): dummy = ListNode() current = dummy for val in lst: current.next = ListNode(val) current = current.next return dummy.next def linkedlist_to_list(node): result = [] while node: result.append(node.val) node = node.next return result def sum_linkedlists_linkedlist_format(t, test_cases): results = [] for case in test_cases: l1_vals, l2_vals = case l1 = list_to_linkedlist(l1_vals) l2 = list_to_linkedlist(l2_vals) result = add_two_numbers(l1, l2) result_list = linkedlist_to_list(result) results.append(result_list) return results"},{"question":"You are given a list of employee schedules, with each schedule indicating the work hours of an employee over a week. Each schedule is represented as a dictionary with the keys as the days of the week and the values as tuples representing start and end times in a 24-hour format. Your task is to write a function that finds and returns a list of pairs of employees who share at least one overlapping work hour on any day of the week. Example ```python schedules = { \'Alice\': {\'Mon\': (9, 17), \'Tue\': (9, 17), \'Wed\': (9, 17), \'Thu\': (9, 17), \'Fri\': (9, 17)}, \'Bob\': {\'Mon\': (10, 18), \'Tue\': (11, 15), \'Wed\': (10, 18), \'Thu\': (10, 18), \'Fri\': (9, 12)}, \'Charlie\': {\'Mon\': (6, 14), \'Tue\': (6, 14), \'Wed\': (13, 20), \'Thu\': (14, 21), \'Fri\': (8, 15)} } find_overlapping_employees(schedules) ==> [ (\'Alice\', \'Bob\'), (\'Bob\', \'Charlie\') ] ``` # Notes: - Ensure your function considers each employee\'s schedule for overlapping work hours. - The returned list should contain pairs of employees (as tuples) indicating their names in alphabetical order.","solution":"from itertools import combinations def find_overlapping_employees(schedules): def is_overlap(t1, t2): Helper function to check if two time periods overlap return max(t1[0], t2[0]) < min(t1[1], t2[1]) overlapping_pairs = set() # Generate all pairs of employees for emp1, emp2 in combinations(schedules.keys(), 2): for day in schedules[emp1]: if is_overlap(schedules[emp1][day], schedules[emp2][day]): # Add tuple in sorted order to ensure alphabetical order of names overlapping_pairs.add(tuple(sorted((emp1, emp2)))) break return list(overlapping_pairs)"},{"question":"Design a function that determines the nth prime number. # Inputs: `n` an integer representing the position in the sequence of prime numbers (1-indexed). # Outputs: The nth prime number as an integer. # Example: # Input: ``` n = 6 ``` # Output: ``` 13 ``` # Explanation: The sequence of prime numbers is: 2, 3, 5, 7, 11, 13, ... The 6th prime number in this sequence is 13.","solution":"def nth_prime(n): Returns the nth prime number. if n < 1: raise ValueError(\\"n must be a positive integer.\\") primes = [] num = 2 # The first prime number while len(primes) < n: is_prime = all(num % p != 0 for p in primes) if is_prime: primes.append(num) num += 1 return primes[n-1]"},{"question":"Task Write a function `students_top_scores` that takes a list of tuples as an argument. Each tuple consists of a student\'s name (a string) and their score (an integer). The function should return a list of names of students who have the highest score. Ensure that the list of names returned is sorted in alphabetical order. Examples ```python students_top_scores([(\\"Alice\\", 88), (\\"Bob\\", 95), (\\"Charlie\\", 95), (\\"David\\", 91)]) # Output: [\\"Bob\\", \\"Charlie\\"] students_top_scores([(\\"Emily\\", 78), (\\"Fiona\\", 78), (\\"George\\", 85)]) # Output: [\\"George\\"] ``` Constraints - The input list is non-empty, containing at least one element. - Student names in the input list are unique. - Scores are non-negative integers.","solution":"def students_top_scores(students_scores): Returns a list of names of students who have the highest score. The list is sorted in alphabetical order. if not students_scores: return [] max_score = max(score for _, score in students_scores) top_students = [name for name, score in students_scores if score == max_score] return sorted(top_students)"},{"question":"Given a string containing digits from 2 to 9 inclusive, return all possible letter combinations that the number could represent. Each digit maps to a set of letters on a phone dial pad as follows: 2: \\"abc\\" 3: \\"def\\" 4: \\"ghi\\" 5: \\"jkl\\" 6: \\"mno\\" 7: \\"pqrs\\" 8: \\"tuv\\" 9: \\"wxyz\\" The output should be a list of all possible combinations of letters that can be represented by the input string. The combinations can be returned in any order. For example: ```python letter_combinations(\\"23\\") ``` Output: ```python [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] ``` ```python letter_combinations(\\"567\\") ``` Output: ```python [\\"jmp\\", \\"jmq\\", \\"jmr\\", \\"jms\\", \\"jnp\\", \\"jnq\\", \\"jnr\\", \\"jns\\", \\"jop\\", \\"joq\\", \\"jor\\", \\"jos\\", \\"kmp\\", \\"kmq\\", \\"kmr\\", \\"kms\\", \\"knp\\", \\"knq\\", \\"knr\\", \\"kns\\", \\"kop\\", \\"koq\\", \\"kor\\", \\"kos\\", \\"lmp\\", \\"lmq\\", \\"lmr\\", \\"lms\\", \\"lnp\\", \\"lnq\\", \\"lnr\\", \\"lns\\", \\"lop\\", \\"loq\\", \\"lor\\", \\"los\\"] ``` ```python letter_combinations(\\"9\\") ``` Output: ```python [\\"w\\", \\"x\\", \\"y\\", \\"z\\"] ``` ```python letter_combinations(\\"29\\") ``` Output: ```python [\\"aw\\", \\"ax\\", \\"ay\\", \\"az\\", \\"bw\\", \\"bx\\", \\"by\\", \\"bz\\", \\"cw\\", \\"cx\\", \\"cy\\", \\"cz\\"] ```","solution":"from typing import List def letter_combinations(digits: str) -> List[str]: Given a string containing digits from 2 to 9 inclusive, return all possible letter combinations that the number could represent. if not digits: return [] phone_map = { \\"2\\": \\"abc\\", \\"3\\": \\"def\\", \\"4\\": \\"ghi\\", \\"5\\": \\"jkl\\", \\"6\\": \\"mno\\", \\"7\\": \\"pqrs\\", \\"8\\": \\"tuv\\", \\"9\\": \\"wxyz\\" } combinations = [\\"\\"] for digit in digits: letters = phone_map[digit] combinations = [prefix + letter for prefix in combinations for letter in letters] return combinations"},{"question":"You are given two sequences of integers P_1, P_2, ldots, P_N and Q_1, Q_2, ldots, Q_M with potentially different lengths. You need to create a third sequence R by merging P and Q while maintaining the following properties: 1. R should have all elements of P and Q such that the relative order of elements from P and Q remains the same as in the original sequences. 2. The length of R must be N + M. 3. Minimize the lexicographical order of sequence R. For instance, merging [1, 3, 5] and [2, 4, 6] should produce [1, 2, 3, 4, 5, 6]. -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M. - The second line contains N space-separated integers P_1, P_2, ldots, P_N. - The third line contains M space-separated integers Q_1, Q_2, ldots, Q_M. -----Output----- For each test case, print the merge result of the two sequences as described. -----Constraints----- - 1 le T le 100 - 1 le N, M le 2000 - 1 le P_i, Q_i le 10^9 -----Example Input----- 2 3 3 1 3 5 2 4 6 4 2 2 5 6 8 3 7 -----Example Output----- 1 2 3 4 5 6 2 3 5 6 7 8 -----Explanation----- Example case 1: The minimal lexicographical merge of [1, 3, 5] and [2, 4, 6] is [1, 2, 3, 4, 5, 6]. Example case 2: The minimal lexicographical merge of [2, 5, 6, 8] and [3, 7] is [2, 3, 5, 6, 7, 8].","solution":"def merge_min_lexicographical(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][:2] P = test_cases[i][2] Q = test_cases[i][3] merged = [] i, j = 0, 0 while i < N and j < M: if P[i] < Q[j]: merged.append(P[i]) i += 1 else: merged.append(Q[j]) j += 1 while i < N: merged.append(P[i]) i += 1 while j < M: merged.append(Q[j]) j += 1 results.append(merged) return results"},{"question":"Write a function `unique_flatten` that takes a nested list of integers (potentially several levels deep) and returns a flattened list of integers, preserving the order of appearance but including only unique elements. The function should handle lists nested at any depth and should efficiently remove duplicate entries. **More info and constraints:** * The nested list can be arbitrarily deep. * The output list should only include the first occurrence of any integer from the nested list. * You can assume the integers within the list and its sub-lists fall within the range of -10^9 to 10^9. * The solution should ideally have a linear time complexity with respect to the total number of elements in the list. For example: ```python unique_flatten([1, [2, 3], [4, [5, 6], 3], 2]) == [1, 2, 3, 4, 5, 6] unique_flatten([1, [2, [2, 3, 4], 5, [6, 7]], 8, 7]) == [1, 2, 3, 4, 5, 6, 7, 8] unique_flatten([[[1, 2], 3], 4, 5, [1, 2, [3, 4]], 6, [5, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8] unique_flatten([1, [2, 2, [2]], [1, 3, [4]], 5]) == [1, 2, 3, 4, 5] unique_flatten([]) == [] ``` **Note**: This question tests the candidate\'s ability to work with list structures, recursion or iterative deepening, and their capacity to handle uniqueness efficiently within a nested sequence.","solution":"def unique_flatten(nested_list): Flattens a nested list of integers and returns a list of unique integers preserving the order of the first appearance. def _flatten(lst): for item in lst: if isinstance(item, list): yield from _flatten(item) else: yield item seen = set() result = [] for number in _flatten(nested_list): if number not in seen: seen.add(number) result.append(number) return result"},{"question":"=====Problem Statement===== You are given a list of integers. Your task is to determine the sum of the maximum subarray in the provided list. A subarray is a continuous part of the array. Concept The maximum subarray problem is the task of finding the contiguous subarray within a one-dimensional array of numbers which has the largest sum. This can be solved using Kadane\'s Algorithm, which operates in O(n) time complexity. For example, consider the array [−2,1,−3,4,−1,2,1,−5,4]. The contiguous subarray with the largest sum is [4,−1,2,1] with a sum of 6. =====Input Format===== The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. =====Constraints===== 1≤n≤10^5 −10^4≤A_i≤10^4 =====Output Format===== Print only one line containing the sum of the maximum subarray. =====Sample Input===== 9 -2 1 -3 4 -1 2 1 -5 4 =====Sample Output===== 6","solution":"def max_subarray_sum(arr): Finds the sum of the maximum subarray using Kadane\'s Algorithm. max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Given a string containing digits from 2 to 9 inclusive, return all possible letter combinations that the number could represent. A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters. ``` 2 -> abc 3 -> def 4 -> ghi 5 -> jkl 6 -> mno 7 -> pqrs 8 -> tuv 9 -> wxyz ``` Write a function letter_combinations(digits) ( **JS**: `letterCombinations(digits)` ) that takes a string of digits and returns a list of all possible letter combinations. Example: ```python letter_combinations(\\"23\\") => [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] letter_combinations(\\"\\") => [] ```","solution":"def letter_combinations(digits): Given a string containing digits from 2 to 9 inclusive, return all possible letter combinations that the number could represent. if not digits: return [] digit_to_letters = { \\"2\\": \\"abc\\", \\"3\\": \\"def\\", \\"4\\": \\"ghi\\", \\"5\\": \\"jkl\\", \\"6\\": \\"mno\\", \\"7\\": \\"pqrs\\", \\"8\\": \\"tuv\\", \\"9\\": \\"wxyz\\" } def backtrack(index, path): if index == len(digits): combinations.append(\\"\\".join(path)) return possible_letters = digit_to_letters[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"In text processing, a palindrome is a string that reads the same forwards as it does backwards. Case and spaces are ignored in the determination of whether a string is a palindrome. Write a function `longestPalindrome` that takes a list of strings and returns the longest palindrome. If there are multiple palindromes with the same length, return the first one that appears in the list. If there are no palindromes, return an empty string. For example, given the list `[\\"racecar\\", \\"Step on no pets\\", \\"banana\\", \\"A man a plan a canal Panama\\", \\"apple\\"]`, the function should return `\\"A man a plan a canal Panama\\"`. Note: - \\"A man a plan a canal Panama\\" is considered a palindrome, as spaces and case are ignored. - \\"racecar\\" is also a palindrome but it is shorter than \\"A man a plan a canal Panama\\". Implement the `longestPalindrome` function. ```python def longestPalindrome(strings): def is_palindrome(s): s = \'\'.join(filter(str.isalnum, s)).lower() return s == s[::-1] longest = \\"\\" for s in strings: if is_palindrome(s) and len(\'\'.join(filter(str.isalnum, s))) > len(\'\'.join(filter(str.isalnum, longest))): longest = s return longest # Example Usage print(longestPalindrome([\\"racecar\\", \\"Step on no pets\\", \\"banana\\", \\"A man a plan a canal Panama\\", \\"apple\\"])) # Output: \\"A man a plan a canal Panama\\" ```","solution":"def longestPalindrome(strings): def is_palindrome(s): s = \'\'.join(filter(str.isalnum, s)).lower() return s == s[::-1] longest = \\"\\" for s in strings: if is_palindrome(s) and len(\'\'.join(filter(str.isalnum, s))) > len(\'\'.join(filter(str.isalnum, longest))): longest = s return longest"},{"question":"Create a function called `minimumSwapsToSort` that takes an array of integers and returns the minimum number of swaps required to sort the array in ascending order. Each swap involves swapping any two distinct elements of the array. For example: ```python minimumSwapsToSort([4, 3, 1, 2]) ``` Should return `3` because the sequence of swaps could be: 1. Swap index 0 and index 2 ([1, 3, 4, 2]) 2. Swap index 1 and index 3 ([1, 2, 4, 3]) 3. Swap index 2 and index 3 ([1, 2, 3, 4]) Your function should handle arrays with a reasonable number of elements efficiently.","solution":"def minimumSwapsToSort(arr): Returns the minimum number of swaps required to sort the array in ascending order. n = len(arr) arrpos = [*enumerate(arr)] arrpos.sort(key=lambda it: it[1]) visited = {k: False for k in range(n)} ans = 0 for i in range(n): if visited[i] or arrpos[i][0] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arrpos[j][0] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"You are given a list of integers representing the heights of students standing in a queue. The problem is to find the maximum number of students that can form a subsequence such that each student stands taller than the previous one in the subsequence. Write a function that takes the list of student heights as input and returns the length of the longest increasing subsequence. For example, given the list [4, 2, 5, 3, 7, 6, 8], the longest increasing subsequence would be [2, 3, 6, 8] and the function should return 4.","solution":"def longest_increasing_subsequence(heights): Returns the length of the longest increasing subsequence in the given list of heights. if not heights: return 0 # Initialize the array to store the length of longest subsequence at each position dp = [1] * len(heights) # Calculate the longest increasing subsequence ending at each position for i in range(1, len(heights)): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence is the maximum value in the dp array return max(dp)"},{"question":"=====Problem Statement===== You are given a list of integers representing the prices of items in a store. Your task is to determine the second highest price. Write a function that returns the second highest price from the list. =====Input Format===== The first line contains n, the number of items. The second line contains an array P[] of n integers each separated by a space, representing the prices of the items. =====Constraints===== 2≤n≤15 1≤P[i]≤1000 =====Output Format===== Print the second highest price.","solution":"def second_highest_price(n, prices): Returns the second highest price from a list of prices. unique_prices = list(set(prices)) # Remove duplicates unique_prices.sort(reverse=True) # Sort in descending order if len(unique_prices) < 2: return None # If there are less than 2 unique prices return unique_prices[1] # Return the second highest price"},{"question":"# Problem Description You are given an array representing the daily temperature readings over a period of days. Write a function to calculate the number of days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, the answer for that day should be `0`. Implement a function `daily_temperatures(temperatures: List[int]) -> List[int]` that takes a list of integers `temperatures` and returns a list of integers representing the number of days until a warmer temperature for each day. # Constraints - Each element in the temperature array is an integer within the range of `30` to `100`. - The length of the temperatures array is between `1` and `30000`. # Example ```python # temperatures = [73, 74, 75, 71, 69, 72, 76, 73] # Resulting days to wait: # 1 -> 74 > 73 (1 day) # 1 -> 75 > 74 (1 day) # 4 -> 76 > 75 (4 days) # 2 -> 72 > 71 (2 days) # 1 -> 72 > 69 (1 day) # 1 -> 76 > 72 (1 day) # 0 -> No warmer day (0 days) # 0 -> No warmer day (0 days) daily_temperatures([73, 74, 75, 71, 69, 72, 76, 73]) == [1, 1, 4, 2, 1, 1, 0, 0] ``` # Note - You are expected to solve this problem with a time complexity better than O(n^2). # Additional Information Hint: Think about how you can use a stack to optimize your solution.","solution":"from typing import List def daily_temperatures(temperatures: List[int]) -> List[int]: Returns a list representing the number of days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, the answer is 0 for that day. n = len(temperatures) res = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: prev_index = stack.pop() res[prev_index] = i - prev_index stack.append(i) return res"},{"question":"Implement the class DiaryEntries that supports two methods: 1. addEntry(string entry, int date, int time) Stores the diary entry with the given date and time (in HHMM format). 2. getEntriesByTimeRange(string startDate, int startTime, string endDate, int endTime) Returns a list of entries that were added between the given start date and time, and end date and time. Dates are in the format \\"YYYY-MM-DD\\" and times are in HHMM format (24-hour format). The function should return entries in chronological order. Example: Input: [\\"DiaryEntries\\", \\"addEntry\\", \\"addEntry\\", \\"addEntry\\", \\"getEntriesByTimeRange\\"] [[], [\\"Went jogging\\", \\"2023-04-01\\", 730], [\\"Had breakfast\\", \\"2023-04-01\\", 800], [\\"Read a book\\", \\"2023-04-02\\", 900], [\\"2023-04-01\\", 700, \\"2023-04-01\\", 900]] Output: [null, null, null, null, [\\"Went jogging\\", \\"Had breakfast\\"]] Explanation: DiaryEntries diaryEntries = new DiaryEntries(); diaryEntries.addEntry(\\"Went jogging\\", \\"2023-04-01\\", 730); diaryEntries.addEntry(\\"Had breakfast\\", \\"2023-04-01\\", 800); diaryEntries.addEntry(\\"Read a book\\", \\"2023-04-02\\", 900); diaryEntries.getEntriesByTimeRange(\\"2023-04-01\\", 700, \\"2023-04-01\\", 900); // returns [\\"Went jogging\\", \\"Had breakfast\\"] Constraints: - The addEntry method will be called at most 10000 times. - The getEntriesByTimeRange method will be called at most 10000 times. - All dates will be in the format \\"YYYY-MM-DD\\". - All times will be in the format HHMM and will be valid times. - startDate <= endDate - The entries should be returned in chronological order of their date and time.","solution":"from datetime import datetime class DiaryEntries: def __init__(self): self.entries = [] def addEntry(self, entry, date, time): Adds an entry with the given date and time. datetime_obj = datetime.strptime(f\\"{date} {time:04d}\\", \'%Y-%m-%d %H%M\') self.entries.append((datetime_obj, entry)) # Sort entries on the fly to keep them in chronological order self.entries.sort() def getEntriesByTimeRange(self, startDate, startTime, endDate, endTime): Returns a list of entries between the specified start and end date/times. start_datetime = datetime.strptime(f\\"{startDate} {startTime:04d}\\", \'%Y-%m-%d %H%M\') end_datetime = datetime.strptime(f\\"{endDate} {endTime:04d}\\", \'%Y-%m-%d %H%M\') result = [] for entry in self.entries: if start_datetime <= entry[0] <= end_datetime: result.append(entry[1]) return result"},{"question":"A botanist is cataloging a collection of plants and wants to store some information in a database. Each plant has a unique ID and belongs to a certain species. The botanist needs to know how many unique species there are in the collection at any given time. You are tasked with writing a function to help the botanist achieve this. -----Input:----- - The first line contains an integer T, the number of operations. Then the operations follow. - Each of the next T lines contains an operation, which is one of the following: - \\"ADD ID species\\" (Add a plant with a given ID and species to the collection) - \\"REMOVE ID\\" (Remove the plant with the given ID from the collection) - \\"COUNT\\" (Output the current number of unique species in the collection) -----Output:----- For each \\"COUNT\\" operation, output the current number of unique species in a single line. -----Constraints----- - 1 leq T leq 10^5 - ID is a unique integer where 1 leq ID leq 10^5 - species is a string consisting of lowercase letters (1 to 50 characters) - It is guaranteed that ADD and REMOVE operations involve valid IDs (ID will not be reused after removal) -----Sample Input:----- 8 ADD 1 rose ADD 2 orchid COUNT ADD 3 orchid REMOVE 1 COUNT ADD 4 tulip COUNT -----Sample Output:----- 2 1 2","solution":"def plant_collection(operations): plants = {} species_count = {} result = [] for op in operations: parts = op.split() command = parts[0] if command == \\"ADD\\": id = int(parts[1]) species = parts[2] if id not in plants: plants[id] = species if species in species_count: species_count[species] += 1 else: species_count[species] = 1 elif command == \\"REMOVE\\": id = int(parts[1]) if id in plants: species = plants[id] plants.pop(id) if species_count[species] == 1: del species_count[species] else: species_count[species] -= 1 elif command == \\"COUNT\\": result.append(len(species_count)) return result"},{"question":"Alice is trying to create a beautiful string with her favorite letter. She wants the string to have exactly `n` characters, out of which exactly `k` characters should be her favorite letter, and the rest can be any other letters. The string should be lexographically smallest among all possible strings satisfying these conditions. Your task is to help Alice generate this string. **Input:** - The first line of input contains a single integer `T` denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains three integers `n`, `k` and a single character `c` separated by spaces. Here n represents the length of the string, k represents the number of occurrences of Alice\'s favorite character `c`. **Output:** - For each test case, print the lexographically smallest string of length `n` containing exactly `k` occurrences of Alice\'s favorite letter `c`. **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 100 - 0 ≤ k ≤ n - `c` is a lowercase English letter (i.e., \'a\' to \'z\') **Example:** _Input:_ ``` 2 5 2 a 7 3 b ``` _Output:_ ``` aabxx bbbyyyy ``` (Note: \\"x\\" and \\"y\\" can be any character other than Alice\'s favorite character.)","solution":"def create_beautiful_string(n, k, c): Returns the lexographically smallest string of length n with exactly k occurrences of the character \'c\'. other_char = \'a\' if c != \'a\' else \'b\' return c * k + other_char * (n - k) def process_test_cases(T, test_cases): results = [] for case in test_cases: n, k, c = case result = create_beautiful_string(n, k, c) results.append(result) return results"},{"question":"Hello everyone. I have an interesting challenge for you today. In programming, it\'s common to work with factorials. A factorial is the product of all positive integers less than or equal to a given positive integer `n`. The factorial of `n` is denoted by `n!`, and it is defined as: * `n! = n * (n-1) * (n-2) * ... * 1` * By convention, `0! = 1` For example: * `5! = 5 * 4 * 3 * 2 * 1 = 120` * `3! = 3 * 2 * 1 = 6` Your challenge is to write a function that takes a non-negative integer `n` and returns the factorial of `n`. You can assume the result will fit within the range of a standard 64-bit integer. Hope you enjoy, let me know of any issues or improvements!","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"# Task Write a function that finds the highest product of any three numbers from an input list of integers. The function should return an integer representing the highest product possible by multiplying any three integers from the list. Input - A list of integers, `arr`, where `-10^4 <= arr[i] <= 10^4` and `3 <= len(arr) <= 10^5`. Output - An integer representing the highest product of any three numbers from the input list. Example ```python def highest_product_of_three(arr): # Your code here # Example 1 print(highest_product_of_three([1, 10, 2, 6, 5, 3])) # Output: 300 (10*6*5) # Example 2 print(highest_product_of_three([-10, -10, 1, 3, 2])) # Output: 300 (-10 * -10 * 3) ``` # Note - Make sure to handle cases where the array includes negative numbers as they can significantly alter the highest product. - The solution should have good performance, ideally O(n) where n is the number of elements in `arr`.","solution":"def highest_product_of_three(arr): Returns the highest product of any three numbers in the list arr. if len(arr) < 3: raise ValueError(\\"Input list must contain at least three integers\\") # Initialize variables for tracking the highest and lowest values highest = max(arr[0], arr[1]) lowest = min(arr[0], arr[1]) highest_product_of_2 = arr[0] * arr[1] lowest_product_of_2 = arr[0] * arr[1] # Initial product of the first three values highest_product_of_3 = arr[0] * arr[1] * arr[2] # Iterate through the array starting from the third element for i in range(2, len(arr)): current = arr[i] # Compute new potential highest product of three highest_product_of_3 = max(highest_product_of_3, current * highest_product_of_2, current * lowest_product_of_2) # Update the products of two highest_product_of_2 = max(highest_product_of_2, current * highest, current * lowest) lowest_product_of_2 = min(lowest_product_of_2, current * highest, current * lowest) # Update highest and lowest values highest = max(highest, current) lowest = min(lowest, current) return highest_product_of_3"},{"question":"You are given a list of n integers and a series of m queries. Each query consists of two integers l and r (1 le l le r le n). For each query, you are required to find if there exists a subsequence of the given list (not necessarily contiguous) where each element appears at least once, such that the sum of the subsequence falls within the inclusive range [l, r]. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of integers in the list. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000) — the integers in the list. The third line contains an integer m (1 le m le 10^5) — the number of queries. The following m lines each contain two integers l and r (1 le l le r le 10^9) — the range for each query. -----Output----- For each query, output \\"Yes\\" if there exists a subsequence such that the sum of its elements falls within the range [l, r], and \\"No\\" otherwise. -----Example----- Input 5 1 2 3 4 5 3 6 10 15 20 1 5 Output Yes Yes Yes","solution":"def can_find_sum_subsequence(nums, queries): total_sum = sum(nums) min_sum = min(nums) results = [] for l, r in queries: if l <= total_sum and r >= min_sum: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given an array of integers, write a function to determine if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal. -----Input:----- - An integer array nums[] containing non-negative numbers. -----Output:----- Boolean value indicating whether the array can be partitioned into two subsets with the same sum. -----Constraints----- - 1 ≤ len(nums) ≤ 200 - 0 ≤ nums[i] ≤ 100 -----Sample Input:----- [1, 5, 11, 5] -----Sample Output:----- True","solution":"def can_partition(nums): Determine if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal. total_sum = sum(nums) # If total sum is odd, it can\'t be partitioned into two equal subsets if total_sum % 2 != 0: return False target_sum = total_sum // 2 n = len(nums) # DP approach to check if a subset with sum target_sum exists dp = [False] * (target_sum + 1) dp[0] = True for num in nums: for i in range(target_sum, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target_sum]"},{"question":"Complete the function `flatten_dict(d)` that takes a dictionary `d` with nested dictionaries and returns a new dictionary with no nested dictionaries. The keys of the new dictionary are the full path to each value in the nested dictionary, separated by periods (\'.\'). **Notes:** * The input dictionary may have any level of nested dictionaries. * Keys can only be strings. Examples ```python flatten_dict({\\"key\\": \\"value\\"}) ==> {\\"key\\": \\"value\\"} flatten_dict({\\"key\\": {\\"deeper\\": {\\"more\\": {\\"enough\\": \\"value\\"}}}}) ==> {\\"key.deeper.more.enough\\": \\"value\\"} flatten_dict({\\"a\\": 1, \\"b\\": {\\"c\\": 2, \\"d\\": {\\"e\\": 3}}}) ==> {\\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3} ```","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Mallory is organizing a series of bike races in her town. She wants to announce the winners at the end of the day. There are m races in total. Each race has p participants, and the order in which participants finish the race is recorded. Mallory needs a program that helps her determine the overall winner across all races based on their rankings in each race. The overall winner is the participant who has the lowest total ranking score. The ranking score for a participant is the sum of their position in each race (1st place = 1 point, 2nd place = 2 points, and so on). If two or more participants have the same ranking score, the participant who had the highest individual finishing position in any race should be considered the winner. If this condition cannot break the tie, Mallory can simply choose any of the tied participants as the winner. Write a program that takes in the results of all races and determines the overall winner. -----Input----- The first line contains two integers m and p (1 ≤ m ≤ 1000, 2 ≤ p ≤ 50) — the number of races and the number of participants in each race. Each of the following m lines contains p distinct integers, indicating the finishing order of the participants in each race (the first integer denotes the participant finishing first, the second integer denotes the participant finishing second, and so on). Participants are numbered from 1 to p. -----Output----- Print a single integer representing the participant number of the overall winner. -----Examples----- Input 3 3 1 2 3 2 1 3 3 2 1 Output 2 Input 2 4 2 1 3 4 1 3 2 4 Output 1 -----Note----- Consider the first test case. Participant 1 has positions [1, 2, 3] across all races, thus their total score is 6. Participant 2 has positions [2, 1, 2], giving them a total score of 5. Participant 3 has positions [3, 3, 1], giving them a total score of 7. Since participant 2 has the lowest total score, they are the overall winner. In the second test case, participants\' scores are: Participant 1: [2, 1] → Total score = 3 Participant 2: [1, 3] → Total score = 4 Participant 3: [3, 2] → Total score = 5 Participant 4: [4, 4] → Total score = 8 Here, participant 1 has the lowest score, making them the overall winner.","solution":"def find_overall_winner(m, p, race_results): scores = [0] * p highest_positions = [float(\'inf\')] * p for race in race_results: for i, participant in enumerate(race): scores[participant - 1] += (i + 1) highest_positions[participant - 1] = min(highest_positions[participant - 1], i + 1) min_score = min(scores) candidates = [i + 1 for i, score in enumerate(scores) if score == min_score] if len(candidates) == 1: return candidates[0] else: best_candidate = min(candidates, key=lambda x: highest_positions[x - 1]) return best_candidate"},{"question":"In this kata, your task is to implement a function that checks if a given string can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward. For example, \\"racecar\\" and \\"level\\" are palindromes. The function should return a boolean value: True if the string can be rearranged to form a palindrome, and False otherwise. A few more rules: - The input string will only contain lowercase alphabetic characters. - The input string may be empty, in which case the function should return True. - You can assume the input string will have a maximum length of 1000 characters. Example test cases: - can_form_palindrome(\\"civic\\") should return True. - can_form_palindrome(\\"ivicc\\") should return True. - can_form_palindrome(\\"hello\\") should return False. - can_form_palindrome(\\"aabbcc\\") should return True.","solution":"from collections import Counter def can_form_palindrome(s): Return True if the string can be rearranged to form a palindrome, and False otherwise. # Count the frequency of each character freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # If more than one character has an odd frequency, it cannot be rearranged to a palindrome return odd_count <= 1"},{"question":"The objective is to implement a function that determines whether a given word can be transformed into another word by rearranging its letters. If possible, it then checks if both original and rearranged words are both present in a list of valid words. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer M denoting the number of words in the list of valid words. The second line contains M space-separated words representing the list of valid words. The third line contains two words `word1` and `word2`. -----Output----- For each test case, output a single line containing \\"YES\\" if `word1` can be rearranged to form `word2` and both are present in the list of valid words, otherwise print \\"NO\\". -----Constraints----- For Subtask 1: - 1 ≤ T ≤ 10 - 1 ≤ M ≤ 10 - 1 ≤ Length of each word ≤ 10 For Subtask 2: - 1 ≤ T ≤ 5 - 1 ≤ M ≤ 1000 - 1 ≤ Length of each word ≤ 10 -----Example----- Input: 2 4 listen silent apple ball listen silent 3 train rain cat train rain Output: YES NO -----Explanation----- Example case 1. Both \\"listen\\" and \\"silent\\" are anagrams and present in the list of valid words. Example case 2. \\"train\\" and \\"rain\\" are not anagrams even though both are valid words in the list.","solution":"def can_words_be_rearranged_to_form_each_other(T, test_cases): results = [] for i in range(T): M = test_cases[i][0] word_list = test_cases[i][1] word1, word2 = test_cases[i][2] if word1 in word_list and word2 in word_list and sorted(word1) == sorted(word2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alex has a collection of marbles divided into two groups. Each group contains n1 and n2 marbles respectively. Alex enjoys arranging these marbles in pairs, where a pair consists of one marble from the first group and one marble from the second group. Alex can remove pairs of marbles under the following rules: 1. In each step, Alex removes 1 marble from the first group and 1 marble from the second group and forms a pair. 2. Alex must remove exactly k pairs of marbles in each step where 1 ≤ k ≤ p. However, this is only possible when both groups have at least k marbles remaining. The process stops when Alex is unable to remove any more pairs. The goal is to figure out the maximum number of pairs Alex can form under these constraints. -----Input----- - The first line contains an integer T, the number of test cases. - Each test case consists of a single line containing three integers: n1, n2, and p separated by spaces. -----Output----- For each test case, output a single line containing the maximum number of pairs Alex can form. -----Constraints----- Subtask 1: (5 pts) - 1 ≤ T ≤ 100 - 0 ≤ p ≤ 18 - 0 ≤ n1, n2 ≤ 100 Subtask 2: (25 pts) - 1 ≤ T ≤ 1000 - 0 ≤ p ≤ 10000 - 0 ≤ n1, n2 ≤ 10000 Subtask 3: (70 pts) - 1 ≤ T ≤ 105 - 0 ≤ p ≤ 109 - 0 ≤ n1, n2 ≤ 1018 -----Example----- Input: 3 3 4 1 5 5 2 7 8 3 Output: 3 5 7 -----Explanation----- Example case 1: Alex can remove one pair in each step until no more marbles are left in either group. Here, Alex forms 3 pairs. Example case 2: Alex can remove pairs with k = 1 or k = 2 in each step. He removes k=2 pairs in each step and forms 2 pairs from 5 marbles. Example case 3: Alex can remove pairs with k = 1, 2, or 3 in each step. He removes 3 pairs with k=3, forms pairs until he has removed 7 marbles from each group.","solution":"def max_pairs(n1, n2, p): Returns the maximum number of pairs Alex can form. return min(n1, n2) def process_queries(queries): results = [] for n1, n2, p in queries: results.append(max_pairs(n1, n2, p)) return results"},{"question":"=====Problem Statement===== You are given a list of email addresses. Your task is to identify and extract the usernames from each email address. A valid email address consists of a username, the @ symbol, and a domain name. Specifications for a valid email username: - It contains only lowercase letters (a-z) and digits (0-9). - It has a length of at least 1. Examples: Valid Email Addresses - alice@example.com (username: alice) - john123@domain.com (username: john123) - a1b2c3@service.net (username: a1b2c3) Invalid Email Addresses (and their reasoning) - Alice@Example.com (username contains uppercase letters) - john_doe@domain.com (username contains underscore) - @noservice.org (username is empty) - user@name@domain.com (contains multiple @ symbols) Your task is to read a list of email addresses and print the usernames of all valid email addresses in the order they were provided. =====Input Format===== - The first line contains an integer M, the number of email addresses. - The next M lines each contain an email address. =====Constraints===== 0 < M < 100 =====Output Format===== - For each valid email address, print the username part on a new line. If an email address is invalid, skip it. =====Sample Input===== 5 alice@example.com john123@domain.com Alice@Example.com @noservice.org user@name@domain.com =====Sample Output===== alice john123","solution":"import re def extract_usernames(emails): usernames = [] email_regex = re.compile(r\'^[a-z0-9]+@[a-zA-Z0-9-.]+.[a-zA-Z]{2,}\') for email in emails: if email_regex.match(email): username = email.split(\'@\')[0] usernames.append(username) return usernames"},{"question":"Write a function that takes a string containing a mix of digits and letters and returns the string sorted in such a way that all the digits come before the letters while maintaining the relative order of digits and letters as they appeared in the input string. For example: ```python input: \'a1b2c3\' output: \'123abc\' ``` If the input is: ```python input: \'1a2bc3\' output: \'123abc\' ``` If the input is: ```python input: \'abc\' output: \'abc\' ```","solution":"def sort_string(s): Returns a string sorted such that all the digits come before the letters while maintaining the relative order of digits and letters as they appeared in the input string. digits = \'\'.join([char for char in s if char.isdigit()]) letters = \'\'.join([char for char in s if char.isalpha()]) return digits + letters"},{"question":"You are given a binary tree consisting of N nodes numbered from 1 to N. Each node has a value associated with it. You need to determine the maximum sum of values that can be obtained from a path that starts at any node and ends at any node. You must not revisit any node along this path. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N, the number of nodes in the binary tree. - The second line contains N space-separated integers representing the values of the nodes. - The following N-1 lines each contain two integers u and v denoting that there is an edge between nodes u and v. -----Output----- For each test case, print a single line containing one integer — the maximum sum obtained from any path in the tree. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 10^4 - -10^4 ≤ value of each node ≤ 10^4 - There are no cycles in the tree. -----Subtasks----- Subtask #1 (30 points): - 2 ≤ N ≤ 100 Subtask #2 (70 points): original constraints -----Example Input----- 1 5 -10 20 -30 40 -50 1 2 1 3 2 4 2 5 -----Example Output----- 60 -----Explanation----- Example case 1: The tree looks like this: ``` -10 / 20 -30 / 40 -50 ``` The path with the maximum sum is 40 → 20. The sum of values along this path is 60.","solution":"class TreeNode: def __init__(self, value=0): self.value = value self.left = None self.right = None def max_path_sum(root): def helper(node): nonlocal max_sum if not node: return 0 left_max = max(helper(node.left), 0) right_max = max(helper(node.right), 0) current_sum = node.value + left_max + right_max max_sum = max(max_sum, current_sum) return node.value + max(left_max, right_max) max_sum = float(\'-inf\') helper(root) return max_sum def build_tree(values, edges): nodes = {i+1: TreeNode(val) for i, val in enumerate(values)} for u, v in edges: if nodes[u].left is None: nodes[u].left = nodes[v] else: nodes[u].right = nodes[v] return nodes[1] def max_sum_on_path(T, test_cases): result = [] for t in range(T): N, values, edges = test_cases[t] root = build_tree(values, edges) result.append(max_path_sum(root)) return result"},{"question":"Daisy wants to create a custom greeting card for each of her N friends on her birthday. She has a list of each friend\'s favorite words. Daisy\'s goal is to create a personalized greeting card for each friend by concatenating their favorite words in a specific order. She has decided to concatenate the favorite words in alphabetical order. However, there\'s a twist: if a word appears more than once for the same friend, it should only be added once to the greeting card. Help Daisy by writing a program that generates the greeting card messages for each of her friends. -----Input:----- - The first line contains an integer N, the number of friends. - The next N lines each contain a string of comma-separated words representing a friend\'s favorite words. -----Output:----- Print N lines, each containing the greeting card message for one friend, with the favorite words sorted in alphabetical order and without duplicates. -----Constraints----- - 1 leq N leq 100 - Each favorite word will only contain lowercase alphabetical characters. - Each friend\'s list of favorite words can have up to 100 words. -----Sample Input:----- 3 apple,banana,apple,kiwi,banana grape,kiwi,mango apple,orange,banana,banana,kiwi -----Sample Output:----- apple,banana,kiwi grape,kiwi,mango apple,banana,kiwi,orange -----EXPLANATION:----- In the first sample, \\"apple, banana, apple, kiwi, banana\\" becomes \\"apple, banana, kiwi\\" after sorting and removing duplicates. The same process is applied to the other friends\' favorite words lists to generate the greeting cards.","solution":"def create_greeting_cards(n, friends_words): Generates greeting card messages for each friend by sorting their favorite words alphabetically and removing duplicates. Args: n (int): Number of friends. friends_words (list of str): List of comma-separated favorite words for each friend. Returns: list of str: Greeting card messages for each friend. greeting_cards = [] for words in friends_words: unique_words = sorted(set(words.split(\',\'))) greeting_cards.append(\',\'.join(unique_words)) return greeting_cards"},{"question":"You are given an n times n matrix filled with characters c_1, c_2, ldots, c_k. Your task is to determine if all the characters along the main diagonal of the matrix (from the top-left to the bottom-right) are the same. If they are, output the common character; otherwise, output \\"NO\\". Input: - The first line contains a single integer n denoting the size of the matrix. - The next n lines each contain n characters separated by spaces, representing the rows of the matrix. Output: - Output a single character if all characters along the main diagonal are the same. - Output \\"NO\\" if they are not all the same. Constraints: - 1 leq n leq 100 - Characters are from the set of lowercase English letters (a-z). Sample Input: ``` 3 a b c d a e f g a ``` Sample Output: ``` a ``` Sample Input: ``` 4 x y z w y x u v z u x q w v q x ``` Sample Output: ``` NO ```","solution":"def main_diagonal_character(matrix): Determines if all characters along the main diagonal of the given n x n matrix are the same. If they are, returns the common character, otherwise returns \\"NO\\". :param matrix: A list of lists of characters representing the matrix. :return: The common character or \\"NO\\". n = len(matrix) diagonal_char = matrix[0][0] for i in range(1, n): if matrix[i][i] != diagonal_char: return \\"NO\\" return diagonal_char"},{"question":"----Problem:---- Given a set of `N` integers, write a function that returns all unique triplets `[a, b, c]` in the set such that `a + b + c = 0`. **Input:** - The input contains several test cases where the first line is an integer `T` representing the number of test cases. - Each test case consists of an integer `N` followed by `N` space-separated integers representing the elements of the set. **Output:** - For each test case, output all unique triplets in their lexicographical order. If no triplet can be found, return `-1`. **Constraints:** - `1 ≤ T ≤ 50` - `1 ≤ N ≤ 2000` - `-10^5 ≤ arr[i] ≤ 10^5` **Example:** -----Input:----- ``` 2 6 -1 0 1 2 -1 -4 5 -2 1 1 0 3 ``` -----Output:----- ``` [[-1, -1, 2], [-1, 0, 1]] [[-2, 1, 1]] ``` **Note:** 1. The solution should only include unique triplets. 2. The elements of the triplets in the output should be in non-decreasing order. 3. If there is no solution, output `-1`.","solution":"from itertools import combinations from typing import List, Tuple def find_unique_triplets(test_cases: List[Tuple[int, List[int]]]) -> List: def three_sum(nums: List[int]) -> List[List[int]]: nums.sort() triplets = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: total_sum = nums[i] + nums[left] + nums[right] if total_sum == 0: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total_sum < 0: left += 1 else: right -= 1 return triplets results = [] for N, nums in test_cases: result = three_sum(nums) if result: results.append(result) else: results.append([-1]) return results # Example usage: # Cases should be a list of tuples, where each tuple consists of an integer N and a list of N integers. # cases = [ # (6, [-1, 0, 1, 2, -1, -4]), # (5, [-2, 1, 1, 0, 3]) # ] # find_unique_triplets(cases)"},{"question":"# Story Santa Claus is preparing for his annual journey and needs to ensure all his reindeer are ready for the trip. Each reindeer has a specific endurance level and can only travel a certain maximum distance before needing to rest. Santa needs your help to determine how far they can collectively travel before one of them must rest. # Kata Task Calculate the total distance Santa and his reindeer can travel as a team before the first reindeer needs to rest. Input Notes * You will receive a list of integers representing the maximum distances each reindeer can travel before needing a rest. * The list will contain 2-10 integers. * Each distance value will be a positive integer between 50 and 300. Output Notes * Return the total distance traveled by the group before the first reindeer needs to rest. # Example ex1 - distances = [100, 150, 200, 120] output: 100 ex2 - distances = [250, 300, 225, 275] output: 225","solution":"def calculate_total_distance(distances): Returns the total distance Santa and his reindeer can travel as a team before the first reindeer needs to rest. return min(distances)"},{"question":"A company owns several delivery trucks. Each truck follows a delivery route which is represented as a circular route passing through N cities (1 ≤ N ≤ 100). The constant cost of travel between two directly connected cities on the route is given as an integer C (1 ≤ C ≤ 100). Along the route, every truck will deliver items to exactly K (1 ≤ K ≤ N) cities and must return to the starting city without revisiting any city. The company wants to optimize their delivery strategy and needs to calculate the minimum distance that each truck will travel if it starts at each possible city. Can you help the company determine the optimal starting city for each truck such that the minimum travel distance is achieved for its K deliveries? -----Input----- The first line of input will contain the number of cities N. The second line contains the travel cost C. The third line contains the number of delivery cities K. -----Output----- Output one line for each city, specifying the starting city number (from 1 to N) and the minimum travel distance for each possible starting city, separated by a space. -----Example----- Input 5 3 2 Output 1 18 2 18 3 18 4 18 5 18 -----Note----- In the above example, delivery trucks can start from any city, and the minimized travel distance for delivering to 2 cities will always be 18 (since 3*6 = 18 and the round trip involves 3 units of C for each of the 6 segments).","solution":"def delivery_min_distance(N, C, K): Calculates the minimum distance for each city as the starting point for delivery route. Parameters: N (int): The number of cities along the delivery route. C (int): The travel cost between two directly connected cities. K (int): The number of delivery cities. Returns: list of tuple: Each tuple contains starting city and the minimum travel distance. total_distance = C * N * 2 results = [] for i in range(1, N + 1): results.append((i, total_distance)) return results"},{"question":"*SORTED ARRAY UNIONIZER* You have three sorted arrays of distinct integers. Your task is to merge these arrays into a single sorted array that includes each integer only once. Input: Three sorted arrays of integers Output: A single sorted array of integers that combines the elements of the three input arrays without duplicates Example: ```python def merge_sorted_arrays(arr1, arr2, arr3): pass # Example cases print(merge_sorted_arrays([1, 2, 4], [1, 3, 5], [2, 6])) == [1, 2, 3, 4, 5, 6] print(merge_sorted_arrays([0, 1], [3, 4], [5, 6])) == [0, 1, 3, 4, 5, 6] print(merge_sorted_arrays([-5, -3, 0], [0, 2, 7], [-1, 1, 5])) == [-5, -3, -1, 0, 1, 2, 5, 7] ```","solution":"def merge_sorted_arrays(arr1, arr2, arr3): Takes three sorted arrays and merges them into one sorted array without duplicates. merged_set = set(arr1 + arr2 + arr3) merged_list = list(merged_set) merged_list.sort() return merged_list"},{"question":"Write a function that takes a list of numbers as input and returns a new list with each element squared, excluding the elements that are negative. If the input list is empty, the function should return an empty list. Example 1: Input: [1, 2, -3, 4, -5] Output: [1, 4, 16] Example 2: Input: [-1, -2, -3] Output: [] Example 3: Input: [] Output: []","solution":"def square_non_negative(numbers): Takes a list of numbers as input and returns a new list with each element squared, excluding the elements that are negative. If the input list is empty, the function returns an empty list. return [x ** 2 for x in numbers if x >= 0]"},{"question":"Write a function `merge_sorted_arrays(array1, array2)` that takes two sorted arrays of integers and returns a single sorted array that contains all the elements of `array1` and `array2`. The resulting array should also be sorted in ascending order. You may assume that neither array contains duplicate elements. Examples: ```python merge_sorted_arrays([1, 3, 5], [2, 4, 6]) # returns [1, 2, 3, 4, 5, 6] merge_sorted_arrays([0, 2, 4], [1, 3, 5, 7, 9]) # returns [0, 1, 2, 3, 4, 5, 7, 9] merge_sorted_arrays([10], [5, 7, 12]) # returns [5, 7, 10, 12] ``` When implementing your solution, do not use any built-in sorting functions. Instead, take advantage of the fact that both input arrays are already sorted. Make sure to merge the arrays in linear time complexity.","solution":"def merge_sorted_arrays(array1, array2): Merges two sorted arrays into one sorted array. Parameters: array1 (list): First sorted array. array2 (list): Second sorted array. Returns: list: Merged and sorted array. merged_array = [] i = j = 0 while i < len(array1) and j < len(array2): if array1[i] < array2[j]: merged_array.append(array1[i]) i += 1 else: merged_array.append(array2[j]) j += 1 # Append remaining elements of array1 if any while i < len(array1): merged_array.append(array1[i]) i += 1 # Append remaining elements of array2 if any while j < len(array2): merged_array.append(array2[j]) j += 1 return merged_array"},{"question":"# Task You are given a rectangular grid of cells with dimensions `h` x `w`. Some of these cells are \\"blocked\\" and some are \\"open\\". Your task is to determine the number of distinct paths from the top-left cell to the bottom-right cell, only moving right or down, and only through open cells. # Input/Output - `[input]` integer `h` The height of the grid. - `[input]` integer `w` The width of the grid. - `[input]` 2D boolean array `blocked` A 2D boolean array of size `h x w` where `blocked[i][j]` is `True` if the cell `(i, j)` is blocked and `False` if it is open. - `[output]` integer The number of distinct paths from the top-left cell to the bottom-right cell. It is guaranteed that the top-left cell and the bottom-right cell are not blocked. # Example For `h = 3`, `w = 3`, and `blocked = [ [False, False, False], [False, True, False], [False, False, False] ]` the output should be `2`. For `h = 2`, `w = 2`, and `blocked = [ [False, True], [False, False] ]` the output should be `1`.","solution":"def count_paths(h, w, blocked): Returns the number of distinct paths from the top-left to the bottom-right cell in a grid. Only right or down moves are allowed, and some cells may be blocked. if blocked[0][0] or blocked[h-1][w-1]: return 0 # Create a 2D dp array dp = [[0 for _ in range(w)] for _ in range(h)] # Initialize the starting position dp[0][0] = 1 # Fill the dp array for i in range(h): for j in range(w): if not blocked[i][j]: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[h-1][w-1]"},{"question":"You need to design a data structure that supports adding words from a dictionary and searching for a word in the dictionary with certain conditions. Implement the WordDictionary class: WordDictionary() Initializes the object. void addWord(string word) Adds a word to the data structure. bool search(string word) Returns true if there is any string in the data structure that matches the word or false otherwise. word may contain dots \'.\' where dots can be matched with any letter. Example: Input: [\\"WordDictionary\\", \\"addWord\\", \\"addWord\\", \\"addWord\\", \\"search\\", \\"search\\", \\"search\\", \\"search\\"] [[], [\\"bad\\"], [\\"dad\\"], [\\"mad\\"], [\\"pad\\"], [\\"bad\\"], [\\".ad\\"], [\\"b..\\"]] Output: [null, null, null, null, false, true, true, true] Explanation: WordDictionary wordDictionary = new WordDictionary(); wordDictionary.addWord(\\"bad\\"); wordDictionary.addWord(\\"dad\\"); wordDictionary.addWord(\\"mad\\"); wordDictionary.search(\\"pad\\"); // return False wordDictionary.search(\\"bad\\"); // return True wordDictionary.search(\\".ad\\"); // return True wordDictionary.search(\\"b..\\"); // return True Constraints: 1 <= word.length <= 25 word in addWord consists of lower-case English letters. word in search consist of \'.\' or lower-case English letters. At most 50000 calls will be made to addWord and search.","solution":"import collections class TrieNode: def __init__(self): self.children = collections.defaultdict(TrieNode) self.is_end_of_word = False class WordDictionary: def __init__(self): self.root = TrieNode() def addWord(self, word: str) -> None: current = self.root for char in word: current = current.children[char] current.is_end_of_word = True def search(self, word: str) -> bool: return self._search_helper(word, 0, self.root) def _search_helper(self, word, index, node): if index == len(word): return node.is_end_of_word char = word[index] if char == \'.\': for child in node.children.values(): if self._search_helper(word, index + 1, child): return True return False elif char in node.children: return self._search_helper(word, index + 1, node.children[char]) else: return False"},{"question":"Given an unsorted integer array nums, reorder it in-place such that all even numbers appear before all odd numbers. You don\'t need to keep the original relative order of the even and odd integers. Return any array that satisfies this condition. Example 1: Input: nums = [3,1,2,4] Output: [4,2,1,3] Explanation: Outputs [2,4,3,1], [4,2,3,1], [2,4,1,3] would also be accepted. Example 2: Input: nums = [0] Output: [0] Constraints: 1 <= nums.length <= 5000 0 <= nums[i] <= 5000","solution":"def segregate_even_odd(nums): Reorder the array so that all even numbers come before all odd numbers. :param nums: List[int] - input array of integers :return: List[int] - reordered array with even numbers first, odd numbers follow left = 0 right = len(nums) - 1 while left < right: # Increment left index until we find an odd number while left < right and nums[left] % 2 == 0: left += 1 # Decrement right index until we find an even number while left < right and nums[right] % 2 != 0: right -= 1 # Swap the two numbers if left < right: nums[left], nums[right] = nums[right], nums[left] left += 1 right -= 1 return nums"},{"question":"A company is planning a network for its new office building. The building is divided into several rooms and for security reasons, some rooms need direct cable connections. The network must comply with these rules: 1. Each room is either a computer room or a storage room. 2. Each cable connection must be between a computer room and a storage room. 3. Each computer room must have exactly one cable connected to it, but storage rooms can have multiple connections. 4. The network should allow communication between any two computer rooms (either direct or via a storage room). Given these constraints, determine if it\'s possible to create such a network with the provided rooms and cable connections. -----Input----- The first line of the input contains two integers c and s (1 leq c leq 50, 1 leq s leq 50) — the number of computer rooms and storage rooms. The next c lines each contain a single integer p_i (1 leq p_i leq s) denoting the index of the storage room each computer room is connected to. -----Output----- Output \\"YES\\" if it is possible to create the network following the given rules, otherwise output \\"NO\\". -----Example----- Input 3 2 1 2 1 Output YES Input 4 3 1 2 1 3 Output YES Input 2 1 1 1 Output YES Input 3 2 1 1 1 Output NO -----Note----- In the first example, the rooms are connected as follows: Computer room 1 to Storage room 1, Computer room 2 to Storage room 2, and Computer room 3 to Storage room 1. All computer rooms can indirectly communicate via the storage rooms. In the second example, the rooms are connected in a straightforward manner with each storage room connecting computer rooms, allowing communication between all computer rooms. In the third example, though there’s only one storage room, the connections allow all computer rooms to communicate via the single storage room. In the fourth example, with three computer rooms and their connections all pointing to one storage room, since the storage room already has maximum allowed connections, the network cannot be formed this way.","solution":"def is_network_possible(c, s, connections): Determines if it\'s possible to create a network following the given rules. Args: c (int): Number of computer rooms. s (int): Number of storage rooms. connections (list of int): Storage room indexes each computer room is connected to. Returns: str: \\"YES\\" if it\'s possible to create the network, otherwise \\"NO\\". from collections import defaultdict # Create a graph using adjacency list storage_to_computer = defaultdict(list) for i in range(c): storage_to_computer[connections[i]].append(i) # Check if every computer room can be reached by traversing connections visited = set() stack = [connections[0]] while stack: current_storage = stack.pop() if current_storage not in visited: visited.add(current_storage) for computer_room in storage_to_computer[current_storage]: # Add storage rooms connected from each computer for storage in connections: stack.append(storage) # If all computer rooms can be reached, we should have added all to visited if len(visited) == s: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a string of comma-separated values representing a list of words, determine if the list is an acceptable word ladder. In an acceptable word ladder, each word is exactly one character different from the previous word. Return: * `True` if the given list forms an acceptable word ladder. * `False` if the list does not form an acceptable word ladder or if any word is not alphabetic. Examples ``` \\"cat,bat,bet,bed\\" ==> return True, because each word differs by exactly one character from the previous one \\"cat,bat,bet,bed,be\\" ==> return False, because \\"be\\" is two characters different from \\"bed\\" \\"cat,bat,b1t,bed\\" ==> return False, because \\"b1t\\" contains a non-alphabetic character \\"dog,log,cog,zog,mog,dog\\" ==> return True, each word is exactly one character different from the last \\"dog,log,cog\\" ==> return True, each word is exactly one character different from the last ```","solution":"def is_acceptable_word_ladder(s): Determine if a comma-separated list of words forms an acceptable word ladder where each word is exactly one character different from the previous word. :param s: A string of comma-separated words :return: True if the list forms an acceptable word ladder, False otherwise words = s.split(\',\') # Check all words are alphabetic and of the same length if not all(word.isalpha() and len(word) == len(words[0]) for word in words): return False def one_char_diff(word1, word2): Helper function: Check if two words differ by exactly one character. return sum(c1 != c2 for c1, c2 in zip(word1, word2)) == 1 # Check if each word is exactly one character different from the previous one return all(one_char_diff(words[i], words[i+1]) for i in range(len(words) - 1))"},{"question":"You need to write a function to determine the type of triangle based on the lengths of its sides: ```python def triangle_type(a, b, c): pass ``` - If all sides are equal, return \\"Equilateral\\". - If exactly two sides are equal, return \\"Isosceles\\". - If no sides are equal and it follows the triangle inequality (sum of any two sides is greater than the third), return \\"Scalene\\". - If the sides do not form a valid triangle, return \\"Not a triangle\\".","solution":"def triangle_type(a, b, c): Determines the type of triangle based on the lengths of its sides. # Check if the sides can form a triangle if a + b <= c or a + c <= b or b + c <= a: return \\"Not a triangle\\" if a == b == c: return \\"Equilateral\\" elif a == b or b == c or a == c: return \\"Isosceles\\" else: return \\"Scalene\\""},{"question":"You\'ve been assigned to analyze the performance of a web server. The server logs every request and response time in milliseconds. Your task is to identify if there were any significant slowdowns. Specifically, you need to find the longest subsequence of consecutive requests where each request took at least `L` milliseconds to be processed. -----Input:----- - The first line contains an integer `T` representing the number of test cases. - Each test case consists of multiple lines. - The first line of each test case contains two integers `N` and `L` where `N` is the number of requests and `L` is the minimum response time threshold in milliseconds. - The second line contains `N` integers representing the response times (in milliseconds) for the N requests. -----Output:----- For each test case, output a single integer representing the length of the longest subsequence of consecutive requests where each request took at least `L` milliseconds. If no such subsequence exists, output 0. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ L ≤ 10^9 - 1 ≤ response time ≤ 10^9 -----Sample Input:----- 2 5 100 80 150 200 90 100 4 200 250 190 300 400 -----Sample Output:----- 2 2 -----EXPLANATION:----- In the first test case: - The longest subsequence where each request took at least 100 milliseconds is [150, 200], which has a length of 2. - Although the response time 100 is equal to L, it\'s not part of the longest consecutive subsequence. In the second test case: - The longest subsequence where each request took at least 200 milliseconds is [300, 400], which has a length of 2. - [250] is the next longest subsequence, but its length is just 1, so the answer remains 2.","solution":"def find_longest_slowdown_sequences(T, test_cases): results = [] for i in range(T): N, L = test_cases[i][0] response_times = test_cases[i][1] max_length = 0 current_length = 0 for response in response_times: if response >= L: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 results.append(max_length) return results"},{"question":"Write a function that takes an integer n and returns a list where each element is a string that represents one of the first n Fibonacci numbers. Each Fibonacci string should have a length equal to the number of digits in the Fibonacci number, and should contain only the character \'*\'. The order of the Fibonacci numbers should be preserved in the output list. For example, if `n = 5`, the first 5 Fibonacci numbers are: 1, 1, 2, 3, and 5. The lengths of these numbers are: 1, 1, 1, 1, and 1 respectively, so the output would be: `[\\"*\\", \\"*\\", \\"*\\", \\"*\\", \\"*\\"]`. But if `n = 10`, the first 10 Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, 21, 34, and 55. The lengths of these numbers are: 1, 1, 1, 1, 1, 1, 2, 2, 2, and 2 respectively, so the output would be: `[\\"*\\", \\"*\\", \\"*\\", \\"*\\", \\"*\\", \\"*\\", \\"**\\", \\"**\\", \\"**\\", \\"**\\"]`. --- # Examples ```python >>> fibonacci_stars(5) [\\"*\\", \\"*\\", \\"*\\", \\"*\\", \\"*\\"] >>> fibonacci_stars(7) [\\"*\\", \\"*\\", \\"*\\", \\"*\\", \\"*\\", \\"*\\", \\"**\\"] >>> fibonacci_stars(10) [\\"*\\", \\"*\\", \\"*\\", \\"*\\", \\"*\\", \\"*\\", \\"**\\", \\"**\\", \\"**\\", \\"**\\"] ``` Good luck!","solution":"def fibonacci_stars(n): Returns a list of strings where each string represents one of the first n Fibonacci numbers using \'*\' characters. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list of str: A list of strings representing the first n Fibonacci numbers with the length equal to the number of digits in the number. if n <= 0: return [] # Generate the first n Fibonacci numbers fibs = [1, 1] for i in range(2, n): fibs.append(fibs[-1] + fibs[-2]) # Convert Fibonacci numbers to the desired string format result = [] for num in fibs[:n]: result.append(\'*\' * len(str(num))) return result"},{"question":"Given a 2D grid of integers representing a map where 1 represents land and 0 represents water, the grid is fully surrounded by water and is rectangular in shape. An island is formed by connecting adjacent lands horizontally or vertically. You can assume all four edges of the grid are surrounded by water. You need to write a function that returns the maximum area of an island in the grid. The area of an island is the number of land cells in it. Example 1: Input: grid = [[0,0,1,0],[0,1,1,0],[0,0,0,0]] Output: 3 Explanation: The island in the top right has an area of 3. Example 2: Input: grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,0,1,1],[0,0,0,1,1]] Output: 4 Explanation: There are two islands, one with an area of 4 and another with an area of 2. The largest is 4. Example 3: Input: grid = [[1,0],[0,1]] Output: 1 Explanation: Each island has an area of 1. Note: - The size of `grid` will be at least 1x1 and at most 50x50. - The grid\'s width and height are non-zero. - Grid cells are either land (1) or water (0).","solution":"def max_area_of_island(grid): Returns the maximum area of an island in the given grid. An island is defined as a group of adjacent lands (1s). if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False] * cols for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == 0 or visited[r][c]: return 0 visited[r][c] = True area = 1 # Current cell # Explore all 4 directions area += dfs(r + 1, c) area += dfs(r - 1, c) area += dfs(r, c + 1) area += dfs(r, c - 1) return area max_area = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1 and not visited[r][c]: max_area = max(max_area, dfs(r, c)) return max_area"},{"question":"# Task In this problem, you are asked to implement a function that finds the greatest common divisor (GCD) of an array of integers. The GCD of an array is the largest positive integer that divides all the elements of the array without leaving a remainder. # Examples ```python gcd_array([24, 36, 48]) = 12 gcd_array([7, 5, 13]) = 1 gcd_array([20, 40, 60, 80]) = 20 ``` # Remarks If the array is empty, `gcd_array` should return 0. If the array has only one element, the GCD is the value of that element. The inputs will always be valid arrays with non-negative integers. # Hint You can utilize the Euclidean algorithm for finding the GCD of two numbers, and then extend this logic to arrays.","solution":"from math import gcd from functools import reduce def gcd_array(arr): Returns the greatest common divisor (GCD) of an array of integers. if not arr: return 0 return reduce(gcd, arr) # Examples for testing print(gcd_array([24, 36, 48])) # Output: 12 print(gcd_array([7, 5, 13])) # Output: 1 print(gcd_array([20, 40, 60, 80])) # Output: 20 print(gcd_array([])) # Output: 0 print(gcd_array([7])) # Output: 7"},{"question":"Write a function called `max_subarray` that takes a list of integers as its parameter. The goal is to find the contiguous subarray within the given list which has the largest sum, and return this sum. # Input The function will receive a list of integers `arr` where `1 <= len(arr) <= 10^5` and `-10^4 <= arr[i] <= 10^4` for each `i`. # Output The function should return a single integer representing the maximum sum of the contiguous subarray. # Examples: 1. `max_subarray([−2,1,−3,4,−1,2,1,−5,4])` should return `6` - Explanation: The contiguous subarray `[4,−1,2,1]` has the largest sum = `6`. 2. `max_subarray([1])` should return `1` - Explanation: The array contains only one element, which is also the maximum sum. 3. `max_subarray([1,2,3,4,5])` should return `15` - Explanation: The entire array is the subarray with the largest sum. 4. `max_subarray([−1,−2,−3,−4,−5])` should return `-1` - Explanation: The array contains only negative numbers, so the largest sum is the largest single element. # Note: - The maximum sum subarray could be a single element in the list. - The solution should be efficient enough to handle the upper constraints (`O(n)` complexity). # Constraints: - `1 <= len(arr) <= 10^5` - `-10^4 <= arr[i] <= 10^4` # Example function signature: ```python def max_subarray(arr: List[int]) -> int: pass ```","solution":"def max_subarray(arr): Returns the sum of the contiguous subarray with the largest sum. :param arr: List[int], list of integers :return: int, maximum sum of the contiguous subarray max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Task You are given a list of integers. Create a function that finds and returns the maximum sum of any non-empty subarray within the list. # Example: ``` Input: [3, -2, 5, -1] Output: 6 // (3 + (-2) + 5) Input: [-3, -1, -4, -2, -5] Output: -1 // (only take -1) ``` Note: A subarray is a contiguous part of an array. Good luck!","solution":"def max_subarray_sum(nums): Finds the maximum sum of any non-empty subarray in the list. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"In this coding challenge, you need to implement a function called **Nested Array Sum**. This function will take a nested array as its only argument and return the sum of all integers contained within. Input A single nested array containing integers and/or other nested arrays. Output An integer representing the total sum of all integers in the nested array, regardless of their level of nesting. How It Works To solve this problem, your function will need to handle nested arrays of varying depths. The function should iterate through the array, summing up all integers it encounters, regardless of how deeply nested they are. Example ```python nested_array = [1, [2, [3, 4], 5], 6, [7, 8], 9] NestedArraySum(nested_array) == 45 nested_array = [1, [2, [3, [4, 5]], 6], 7, [[[8], 9]]] NestedArraySum(nested_array) == 45 nested_array = [1, 2, 3] NestedArraySum(nested_array) == 6 ``` Technical Details - Input will always be valid. - The nested arrays will contain only integers and/or further nested arrays. - The function should handle different levels of nesting, including very deep ones. - Negative integers and zeros are also valid and should be included in the sum. By implementing this function, you\'ll demonstrate the ability to handle nested data structures and recursion or iterative solutions effectively.","solution":"def NestedArraySum(nested_array): Returns the sum of all integers in a nested array. total_sum = 0 def sum_helper(array): nonlocal total_sum for element in array: if isinstance(element, list): sum_helper(element) else: total_sum += element sum_helper(nested_array) return total_sum"},{"question":"You are given a grid with N times M cells. Each cell contains a value, and you can perform up to K operations. In each operation, you can choose any cell and increase or decrease its value by 1. Your goal is to make the values in all rows and columns unique. Determine if it is possible to achieve this goal or not. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains three integers N, M, and K. - The next N lines contain M space-separated integers, representing the grid. -----Output----- For each test case, print a single line containing \\"YES\\" if it is possible to make all values in the rows and columns unique with at most K operations, otherwise print \\"NO\\". -----Constraints----- - 1 le T le 100 - 1 le N, M le 50 - 0 le K le 1000 - -10^9 le text{cell value} le 10^9 -----Example Input----- 3 2 2 1 1 2 2 1 3 3 4 3 3 3 3 3 3 2 2 2 1 2 1 2 -----Example Output----- YES NO YES -----Explanation----- Example case 1: The grid is already in a valid state since all rows and columns have unique values. Example case 2: It is not possible to make all values in the rows and columns unique with only 4 operations. Example case 3: By incrementing the first 1 to 2 and decrementing the second 2 to 1, we get a valid grid within 2 operations.","solution":"def can_make_unique(N, M, K, grid): row_freqs = [] col_freqs = [dict() for _ in range(M)] # Count frequencies of numbers in each row and column for r in range(N): row_freq = {} for c in range(M): value = grid[r][c] if value in row_freq: row_freq[value] += 1 else: row_freq[value] = 1 if value in col_freqs[c]: col_freqs[c][value] += 1 else: col_freqs[c][value] = 1 row_freqs.append(row_freq) # Count the total number of duplicates duplicates = 0 for row_freq in row_freqs: for count in row_freq.values(): if count > 1: duplicates += count - 1 for col_freq in col_freqs: for count in col_freq.values(): if count > 1: duplicates += count - 1 # Check if the number of steps is within the limit return \\"YES\\" if duplicates <= K else \\"NO\\" def solve_test_cases(T, test_cases): results = [] for i in range(T): N, M, K = test_cases[i][0] grid = test_cases[i][1] results.append(can_make_unique(N, M, K, grid)) return results"},{"question":"Manisha has a collection of unique gemstones. Each gemstone is identified by a unique integer code. She keeps the gemstones in a single row, and they are initially sorted in increasing order based on their codes. Every evening, she inspects her collection and may decide to trade one gemstone for another. To keep track of these trades, she records each trade in a log by noting the code of the gemstone she traded away and the code of the new one she added. To maintain the order in her collection, she immediately places the new gemstone in the correct position to keep the sequence sorted. Manisha wants to verify her collection against her log of trades to ensure everything matches correctly. Your task is to process the series of trades Manisha has recorded and return the final sorted sequence of gemstone codes in her collection. -----Input:----- The first line of input contains a single integer K indicating the number of gemstones in Manisha\'s initial collection. The next line contains K distinct integers in increasing order which represent the initial sequence of gemstone codes. The third line of input contains a single integer T indicating the number of trades recorded. This is followed by T pairs of integers (lines 4 to 3+T), where each pair consists of two integers: the code of the gemstone she traded away and the code of the new gemstone she added. -----Output:----- Output a single line with the final sorted sequence of gemstone codes in Manisha\'s collection. -----Constraints:----- - 1 leq K leq 100000. - 0 leq T leq 50000. - Each traded away gemstone code will exist in the collection before the trade. - The code of the new gemstone will not exist in the collection before the trade. -----Sample Input----- 5 1 4 5 7 9 3 4 6 1 2 7 8 -----Sample Output----- 2 5 6 8 9","solution":"import bisect def update_gemstone_collection(K, initial_codes, T, trades): This function processes the series of trades and returns the final sorted sequence of gemstone codes in the collection. # Convert the initial codes list to a mutable list collection = initial_codes[:] for trade in trades: traded_away, new_gemstone = trade # Removing the traded away gemstone index_to_remove = bisect.bisect_left(collection, traded_away) collection.pop(index_to_remove) # Adding the new gemstone in the correct position bisect.insort(collection, new_gemstone) return collection"},{"question":"Write a function called `flatten` that takes a nested array of integers (with varying levels of nesting) and returns a flattened array where all the integers are at the same level. For example, `flatten([1, [2, [3, 4], 5], 6])` should return `[1, 2, 3, 4, 5, 6]`. You can assume that all input arrays contain only integers. Note: Do not use any built-in methods such as `Array.prototype.flat` that directly perform this operation. You should implement this functionality from scratch. Good luck and happy coding!","solution":"def flatten(nested_list): Flattens a nested array of integers. Parameters: nested_list (list): A nested list of integers to be flattened. Returns: list: A flattened list containing all the integers in the same level. def flatten_helper(lst): for element in lst: if isinstance(element, list): yield from flatten_helper(element) else: yield element return list(flatten_helper(nested_list))"},{"question":"John is working on a simple text editor program. The editor needs a feature to count the number of words in a given sentence. A word is defined as any sequence of non-space characters. Your task is to write a program that reads multiple sentences and outputs the word count for each sentence. -----Input----- The first line contains an integer N, which denotes the number of sentences. Each of the next N lines contains a sentence with words separated by spaces. -----Output----- For each sentence, output the word count on a new line. -----Constraints----- - 1 ≤ N ≤ 100 - Each sentence will contain at most 1000 characters. -----Example----- Input: 3 Hello World Programming is fun Count the number of words Output: 2 3 5 -----Explanation----- In the first example, \\"Hello World\\" contains 2 words. In the second example, \\"Programming is fun\\" contains 3 words. In the third example, \\"Count the number of words\\" contains 5 words.","solution":"def count_words_in_sentences(sentences): Given a list of sentences, returns a list of word counts for each sentence. return [len(sentence.split()) for sentence in sentences]"},{"question":"Task Given a matrix `m` of integers with `r` rows and `c` columns, your task is to rotate the matrix clockwise by 90 degrees `k` times. # Example Given `m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]` and `k = 1` The output should be `[[7, 4, 1], [8, 5, 2], [9, 6, 3]]` Explanation: ``` initial matrix: 1 2 3 4 5 6 7 8 9 after 1st rotation: 7 4 1 8 5 2 9 6 3 ``` Given `m = [[1, 2], [3, 4], [5, 6]]` and `k = 2` The output should be `[[6, 5], [4, 3], [2, 1]]` Explanation: ``` initial matrix: 1 2 3 4 5 6 after 1st rotation: 5 3 1 6 4 2 after 2nd rotation: 6 5 4 3 2 1 ``` # Input/Output - `[input]` 2D integer array `m` The initial matrix, where `m[i][j]` representing the element at i-th row and j-th column. Constraints: `1 <= r, c <= 100` `-1000 <= m[i][j] <= 1000` - `[input]` integer `k` The number of times the matrix needs to be rotated clockwise by 90 degrees. Constraints: `0 <= k <= 1000` - `[output]` 2D integer array The matrix after being rotated `k` times.","solution":"def rotate_matrix(m, k): Rotates the given matrix `m` clockwise by 90 degrees `k` times. def rotate_90_deg(mat): Helper function to rotate the matrix mat 90 degrees clockwise. return [list(row) for row in zip(*mat[::-1])] k = k % 4 # Each 4 rotations result back to the original position for _ in range(k): m = rotate_90_deg(m) return m"},{"question":"You are given an array of integers. Your task is to find the maximum product of two distinct elements in the array. Write a function that solves this problem. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines of input. The first line contains a single integer N representing the number of elements in the array. - The second line contains N space-separated integers that represent the elements of the array. -----Output:----- For each test case, output a single line containing the maximum product of two distinct elements in the array. -----Constraints----- - 1 leq T leq 100 - 2 leq N leq 1000 - -10^3 leq A[i] leq 10^3 -----Sample Input:----- 2 4 1 2 3 4 5 -10 -20 5 7 8 -----Sample Output:----- 12 200 -----EXPLANATION:----- For the first test case, the maximum product comes from 3 * 4 which is 12. For the second test case, the maximum product comes from -10 * -20 which is 200.","solution":"def maximum_product_of_two_distinct_elements(T, test_cases): results = [] for case in test_cases: N, array = case max1, max2 = float(\'-inf\'), float(\'-inf\') min1, min2 = float(\'inf\'), float(\'inf\') for num in array: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num max_product = max(max1 * max2, min1 * min2) results.append(max_product) return results"},{"question":"Alex is working with a list of strings and wants to identify the longest common prefix shared among all the strings in the list. Write a program that helps Alex find this longest common prefix. -----Input:----- - First, a single integer T, the number of test cases. - Then for each test case, the first line contains a single integer N, the number of strings. - The next N lines each contain one string. -----Output:----- For each test case, output a single line containing the longest common prefix. If there is no common prefix, output an empty string. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 100 - 1 leq length of each string leq 100 -----Sample Input:----- 2 3 flower flow flight 2 dog racecar -----Sample Output:----- fl -----EXPLANATION:----- For the first test case, the strings \\"flower\\", \\"flow\\", and \\"flight\\" share \\"fl\\" as the longest common prefix. For the second test case, \\"dog\\" and \\"racecar\\" have no common prefix, so the output is an empty string.","solution":"def longest_common_prefix(strs): Finds the longest common prefix shared among all strings in the list. if not strs: return \\"\\" prefix = strs[0] for s in strs[1:]: # Iterate until the prefix is found in the current string while not s.startswith(prefix): prefix = prefix[:-1] if not prefix: return \\"\\" return prefix def solve_prefix_problem(test_cases): Solves the problem for multiple test cases and returns a list of results. results = [] for strs in test_cases: results.append(longest_common_prefix(strs)) return results"},{"question":"You are given a string consisting of lowercase alphabets. Determine if the string can be rearranged such that no two adjacent characters are the same. If possible, provide one such arrangement. -----Constraints----- - 1 ≤ length of the string ≤ 10^5 -----Input----- Input is given from Standard Input in the following format: s -----Output----- If the rearrangement is possible, print the rearranged string. If it is not possible, print \\"No\\". -----Sample Input----- aabbcc -----Sample Output----- abcabc ____ In this sample, the string \'aabbcc\' can be rearranged as \'abcabc\' with no two adjacent characters being the same.","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. If it\'s not possible, return \\"No\\". # Counter to count the frequency of characters char_count = Counter(s) # Max heap using negative frequency count max_heap = [] for char, freq in char_count.items(): heappush(max_heap, (-freq, char)) result = [] prev_freq, prev_char = 0, \'\' while max_heap: # Pop the most frequent char freq, char = heappop(max_heap) # Append it to the result result.append(char) # If previous char was used more than once, push it back into heap if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) # Update previous char and its remaining count prev_freq, prev_char = freq + 1, char rearranged = \'\'.join(result) # Check if rearranged string\'s length matches the input string\'s length if len(rearranged) == len(s): return rearranged else: return \\"No\\""},{"question":"Task Create a function to determine if a given string is a valid identifier in a given programming language. # Constraints - An identifier can only contain alphanumeric characters (a-z, A-Z, 0-9) and underscores (_). - An identifier must start with a letter (a-z, A-Z) or an underscore (_). - An identifier cannot be a reserved keyword in the programming language. For the purpose of this question, consider the following reserved keywords: `[\\"if\\", \\"else\\", \\"while\\", \\"for\\", \\"return\\"]`. # Function Signature ```python def is_valid_identifier(identifier: str) -> bool: ``` Examples ```python is_valid_identifier(\\"variable1\\") == True is_valid_identifier(\\"2variable\\") == False is_valid_identifier(\\"if\\") == False is_valid_identifier(\\"_underscore\\") == True ```","solution":"def is_valid_identifier(identifier: str) -> bool: Determine if a given string is a valid identifier in a programming language considering given constraints. reserved_keywords = [\\"if\\", \\"else\\", \\"while\\", \\"for\\", \\"return\\"] if not identifier: return False if identifier in reserved_keywords: return False if not (identifier[0].isalpha() or identifier[0] == \'_\'): return False for char in identifier: if not (char.isalnum() or char == \'_\'): return False return True"},{"question":"Given a set of N brackets with types \'(\' and \')\' in a string form, a bracket sequence is considered valid if it is balanced. A balanced bracket sequence is defined as follows: - An empty string is balanced. - If \\"S\\" is a balanced string, then \\"(S)\\" is also balanced. - If \\"S1\\" and \\"S2\\" are balanced strings, then their concatenation \\"S1S2\\" is also balanced. You are provided M operations, each operation allows you to swap any two different characters in the string. Determine if the brackets sequence can be transformed into a balanced sequence with at most M swap operations. -----Constraints----- - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 1000 - The length of the string is always even. -----Inputs----- Input is given from Standard Input in the following format: N M bracket_string -----Outputs----- Print \\"YES\\" if it is possible to make the bracket sequence balanced with at most M swaps, otherwise print \\"NO\\". -----Sample Input----- 4 1 (() -----Sample Output----- YES -----Explanation of the sample input:----- One possible sequence of operations is: - Swap the last two characters to get \\"()()\\" which is a balanced string. Hence the output should be \\"YES\\".","solution":"def can_be_balanced(N, M, bracket_string): Determine if the bracket sequence can be balanced with at most M swap operations. open_brackets = bracket_string.count(\'(\') close_brackets = bracket_string.count(\')\') if open_brackets != close_brackets: return \\"NO\\" balance = 0 swaps_needed = 0 for char in bracket_string: if char == \'(\': balance += 1 else: balance -= 1 if balance < 0: swaps_needed += 1 balance += 2 return \\"YES\\" if swaps_needed <= M else \\"NO\\""},{"question":"In a fantasy land, there exists a civilization of gnomes who are extremely fond of symmetry. One day, the gnomes decided to create a large mosaic on the ground, which must be symmetric about both its vertical and horizontal axes. To achieve this, they imitated a 2D grid where they placed tiles, some of which were charmed (represented by \'#\') and some uncharmed (represented by \'.\'). The Supreme Gnome Leader, however, wants to automate the verification process to ensure that the mosaic conforms to the symmetry rules. Your task is to write a program that reads the mosaic design and determines if it is symmetric about both axes. -----Input----- - The first line contains an integer N, which denotes the dimension of the N x N grid of tiles (1 ≤ N ≤ 50). - The following N lines each contain a string of length N, representing a row of the mosaic grid. Each string contains only the characters \'#\' and \'.\'. -----Output----- - Print \\"Symmetric\\" if the mosaic is symmetric about both its vertical and horizontal axes. Otherwise, print \\"Not symmetric\\". -----Example----- Input 1: 3 .#. # .#. Output 1: Symmetric Input 2: 4 ..#. #..# #..# ..#. Output 2: Not symmetric -----Explanation----- - In the first example, the mosaic is the same when mirrored both vertically and horizontally. - In the second example, the mosaic does not match when mirrored horizontally or vertically, thus it is not symmetric.","solution":"def is_symmetric(mosaic): n = len(mosaic) for i in range(n): for j in range(n): if mosaic[i][j] != mosaic[n-1-i][j] or mosaic[i][j] != mosaic[i][n-1-j]: return \\"Not symmetric\\" return \\"Symmetric\\" # Example usage # mosaic = [ # \\".#.\\", # \\"#\\", # \\".#.\\" # ] # print(is_symmetric(mosaic)) # Symmetric"},{"question":"In the field of bioinformatics, it\'s often necessary to identify motifs (specific sequences) within DNA sequences. A common task is to find the complement of a DNA sequence. The complement of a DNA sequence is formed by replacing each base with its complementary base: Adenine (A) with Thymine (T), Thymine (T) with Adenine (A), Cytosine (C) with Guanine (G), and Guanine (G) with Cytosine (C). Given a string representing a DNA sequence, write a function that returns its complementary DNA sequence. ```python complement_dna(\'ATCG\') returns \'TAGC\' complement_dna(\'GATTACA\') returns \'CTAATGT\' ``` Note: The input DNA sequence will be a valid string containing only characters \'A\', \'T\', \'C\', and \'G\'. The output should preserve the order of bases, replacing each with its complement.","solution":"def complement_dna(dna_sequence): Returns the complementary DNA sequence for a given DNA sequence. Parameters: dna_sequence (str): A string representing a DNA sequence containing \'A\', \'T\', \'C\', \'G\'. Returns: str: A string representing the complementary DNA sequence. complement = {\'A\': \'T\', \'T\': \'A\', \'C\': \'G\', \'G\': \'C\'} return \'\'.join(complement[base] for base in dna_sequence)"},{"question":"Implement a function to detect a cycle in a singly linked list. A cycle occurs when a node\'s next pointer points back to a previous node in the list, effectively forming a loop. For example, given a linked list: a -> b -> c -> d -> b (cycle back to node b) The output should be True, indicating that a cycle is present. If there is no cycle in the list, the output should be False. Special Note --> Node classes contain two fields; data and next. And to access the head of the list, use head. e.g. linked_list.head","solution":"class Node: def __init__(self, data): self.data = data self.next = None def has_cycle(head): Detects whether a cycle is present in a linked list. Parameters: head (Node): The head node of the linked list. Returns: bool: True if a cycle is present, False otherwise. slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Longest Consecutive Subsequence Write a function that takes an unsorted array of integers and finds the length of the longest consecutive elements sequence. Your function should have a linear runtime complexity. Example: ```python def longest_consecutive_sequence(nums): # Your code here # Example Usage print(longest_consecutive_sequence([100, 4, 200, 1, 3, 2])) # Output: 4 (because the longest consecutive sequence is [1, 2, 3, 4]) ``` **Input** - An unsorted array `nums`, containing `n` integers where `0 <= n <= 10^4`. **Output** - A single integer representing the length of the longest consecutive elements sequence. # Constraints - You should provide a function that solves the problem efficiently with O(n) complexity. - The numbers in the array can be both positive and negative.","solution":"def longest_consecutive_sequence(nums): if not nums: return 0 num_set = set(nums) max_length = 0 for num in num_set: if num - 1 not in num_set: # only check for the start of a sequence current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a function that takes a string as input and reverses the order of words while keeping the order of the characters within each word the same. The function should return the transformed string. For example, running this function on the string \\"code is fun\\" would produce \\"fun is code\\".","solution":"def reverse_words_order(sentence): Takes a string as input and reverses the order of words while keeping the order of the characters within each word the same. Parameters: sentence (str): The input string. Returns: str: The transformed string. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Count the Islands An island is a group of contiguous \'1\'s (land) surrounded by \'0\'s (water). Contiguous means that the \'1\'s are connected vertically or horizontally (not diagonally). Given a 2D map of \'1\'s and \'0\'s, write a function `count_islands` that returns the number of islands. Example: ```python def count_islands(grid): # Implement the function here pass # Example usage: grid = [ [\'1\', \'1\', \'0\', \'0\', \'0\'], [\'1\', \'1\', \'0\', \'0\', \'0\'], [\'0\', \'0\', \'1\', \'0\', \'0\'], [\'0\', \'0\', \'0\', \'1\', \'1\'] ] print(count_islands(grid)) # Output: 3 ``` Constraints: - The grid is at least 1x1 in size. - The elements of the grid are either \'1\' (land) or \'0\' (water).","solution":"def count_islands(grid): Count the number of islands in the given grid. Args: grid (List[List[str]]): 2D map of \'1\'s (land) and \'0\'s (water) Returns: int: Number of islands if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def bfs(r, c): queue = [(r, c)] while queue: x, y = queue.pop(0) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny] and grid[nx][ny] == \'1\': queue.append((nx, ny)) visited[nx][ny] = True island_count = 0 for i in range(rows): for j in range(cols): if grid[i][j] == \'1\' and not visited[i][j]: bfs(i, j) island_count += 1 return island_count"},{"question":"You are working on an application that requires converting numbers into their corresponding words. Write a function `number_to_words` that converts a given non-negative integer (less than or equal to 1,000,000) into its English words representation. Examples: ``` number_to_words(123) -> \\"one hundred twenty-three\\" number_to_words(0) -> \\"zero\\" number_to_words(1000000) -> \\"one million\\" ``` Note: 1. Do not include hyphens or the word \\"and\\" in your output. 2. The function should handle edge cases like `0` and `1,000,000` correctly. 3. The output should be in lowercase words.","solution":"def number_to_words(num): Converts a given non-negative integer (less than or equal to 1,000,000) into its English words representation. if num == 0: return \\"zero\\" # Maps for units, tens, teens, and thousands under_20 = [\'zero\', \'one\', \'two\', \'three\', \'four\', \'five\', \'six\', \'seven\', \'eight\', \'nine\', \'ten\', \'eleven\', \'twelve\', \'thirteen\', \'fourteen\', \'fifteen\', \'sixteen\', \'seventeen\', \'eighteen\', \'nineteen\'] tens = [\'\', \'\', \'twenty\', \'thirty\', \'forty\', \'fifty\', \'sixty\', \'seventy\', \'eighty\', \'ninety\'] thousands = [\'hundred\', \'thousand\', \'million\'] def words(n): if n < 20: return under_20[n] elif n < 100: return tens[n // 10] + (\'\' if n % 10 == 0 else \' \' + under_20[n % 10]) elif n < 1000: return under_20[n // 100] + \' hundred\' + (\'\' if n % 100 == 0 else \' \' + words(n % 100)) elif n < 1000000: return words(n // 1000) + \' thousand\' + (\'\' if n % 1000 == 0 else \' \' + words(n % 1000)) else: return \'one million\' return words(num)"},{"question":"Find the second largest number in an array Complete the function to find the second largest number in a given array of integers. If there is no second largest number, return None. # Example: ``` [12, 35, 1, 10, 34, 1] --> 34 [10, 5, 10] --> 5 ``` In the first example, the largest number is 35 and the second largest is 34. In the second example, 10 is the largest number but since it appears twice, the next unique number, which is 5, is considered the second largest. If the array has all identical elements or fewer than two elements, the function should return None. # Constraints: - The array will have at least one element. - The elements of the array are integers.","solution":"def second_largest(arr): Returns the second largest number in the array. If there is no second largest number, return None. if len(arr) < 2: return None first = second = float(\'-inf\') for num in arr: if num > first: first, second = num, first elif first > num > second: second = num return second if second != float(\'-inf\') else None"},{"question":"Imagine you are developing a simulation for a small wildlife preserve. In this preserve, there are various types of animals, each of which has a certain way of interacting with the environment. You need to create a `Animal` class with the following attributes and functionalities: - Attributes: - `species`: A string representing the species of the animal. - `age`: An integer representing the age of the animal. - `weight`: An integer representing the weight of the animal in kilograms. - Methods: - `__init__(self, species, age, weight)`: Constructor that initializes the species, age, and weight of the animal. - `eat(self, food_weight)`: Increases the weight of the animal by the `food_weight` provided. - `birthday(self)`: Increases the age of the animal by 1. Additionally, you will create a `WildlifePreserve` class with the following attributes and functionalities: - Attributes: - `name`: A string representing the name of the preserve. - `animals`: A list of `Animal` objects representing the animals currently in the preserve. - Methods: - `__init__(self, name)`: Constructor that initializes the name of the preserve and initializes an empty list of animals. - `add_animal(self, animal)`: Adds a new `Animal` to the preserve. - `feed_animals(self, food_weight)`: Feeds each animal in the preserve, increasing their weight by `food_weight`. Your task is to write both classes and demonstrate their use by creating a wildlife preserve with several animals, feeding them, and printing out their details after feeding. Example: ```python # Creating the wildlife preserve preserve = WildlifePreserve(\\"Sunny Reserve\\") # Creating animal instances lion = Animal(\\"Lion\\", 5, 190) elephant = Animal(\\"Elephant\\", 10, 5000) giraffe = Animal(\\"Giraffe\\", 7, 800) # Adding animals to the preserve preserve.add_animal(lion) preserve.add_animal(elephant) preserve.add_animal(giraffe) # Feeding all animals in the preserve preserve.feed_animals(10) # Printing out details of the animals after feeding for animal in preserve.animals: print(f\\"{animal.species} - Age: {animal.age}, Weight: {animal.weight}\\") ``` Output: ``` Lion - Age: 5, Weight: 200 Elephant - Age: 10, Weight: 5010 Giraffe - Age: 7, Weight: 810 ```","solution":"class Animal: def __init__(self, species, age, weight): Initialize an Animal instance. :param species: str, the species of the animal :param age: int, the age of the animal :param weight: int, the weight of the animal in kilograms self.species = species self.age = age self.weight = weight def eat(self, food_weight): Increase the weight of the animal by the given food weight. :param food_weight: int, the amount of food weight to be added to the animal\'s weight self.weight += food_weight def birthday(self): Increase the age of the animal by 1. self.age += 1 class WildlifePreserve: def __init__(self, name): Initialize a WildlifePreserve instance. :param name: str, the name of the wildlife preserve self.name = name self.animals = [] def add_animal(self, animal): Add an animal to the preserve. :param animal: Animal, an instance of the Animal class self.animals.append(animal) def feed_animals(self, food_weight): Feed each animal in the preserve, increasing their weight by the given food weight. :param food_weight: int, the amount of food weight to feed each animal for animal in self.animals: animal.eat(food_weight)"},{"question":"You are given a grid with m rows and n columns. Each cell in the grid can either be empty (denoted by \'.\') or contain a rock (denoted by \'R\'). A robot starts at the top-left corner of the grid, at position (1, 1), and aims to reach the bottom-right corner, at position (m, n). The robot can move to the right or down one cell at a time. However, there\'s a catch: if the robot encounters a rock, it cannot pass through that cell. The robot must find an alternate path around the rock. You need to determine if there is a path for the robot to reach its goal. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of the test case contains two integers m and n (1 le m, n le 100) — the number of rows and columns in the grid. The next m lines contain n characters each, representing the grid. Each character is either \'.\' or \'R\'. -----Output----- For each test case, print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, or \\"NO\\" otherwise. -----Example----- Input 3 3 4 .... .R.. .... 2 2 .R .R 4 4 .R.. ..R. R... .... Output YES NO YES","solution":"def robot_path_possible(t, test_cases): def is_path_possible(grid, m, n): if grid[0][0] == \'R\' or grid[m-1][n-1] == \'R\': return False dp = [[0]*n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == \'R\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1] != 0 results = [] for case in test_cases: m, n, grid = case results.append(\\"YES\\" if is_path_possible(grid, m, n) else \\"NO\\") return results"},{"question":"Implement a function `maxBracketDepth` that takes a string as input and returns the maximum depth of nested brackets. The brackets can be any of the following types: `{}`, `[]`, `()`. You need to consider all types of brackets together when calculating the depth. For instance: - The string \\"a(b[c{d}e]f)g\\" has a maximum depth of 3 (the substring `{d}` within the `[]` brackets which are within the `()` brackets). - The string \\"a()b{}c[]\\" has a maximum depth of 1 (each type of bracket is only nested inside one another pair). - The string \\"([a+b]*c){d+e}\\" has a maximum depth of 2. If the input string contains unbalanced brackets, return -1. Examples: ```python maxBracketDepth(\\"a(b[c{d}e]f)g\\") # Output: 3 maxBracketDepth(\\"a()b{}c[]\\") # Output: 1 maxBracketDepth(\\"([a+b]*c){d+e}\\") # Output: 2 maxBracketDepth(\\"a(b[c)d]e\\") # Output: -1 ``` Note: - A string with no brackets should return 0. - You can assume that the input will only contain alphabetic characters, digits, spaces, and the bracket characters `{}`, `[]`, `()`. - Consider the importance of properly tracking different types of brackets to ensure accurate depth calculations and handling of unbalanced cases.","solution":"def maxBracketDepth(s): Returns the maximum depth of nested brackets of different types: {}, [], (). If the brackets are unbalanced, returns -1. stack = [] max_depth = 0 current_depth = 0 brackets = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in \\"({[\\": stack.append(char) current_depth += 1 max_depth = max(max_depth, current_depth) elif char in \\")}]\\": if not stack or stack[-1] != brackets[char]: return -1 stack.pop() current_depth -= 1 return -1 if stack else max_depth"},{"question":"You are given a string `s` consisting of lowercase alphabets. Your task is to determine the number of minimum non-empty substrings you\'d need to concatenate in some order to obtain all distinct characters from the string `s`. A substring is defined as a contiguous sequence of characters within the string. For example, the string \\"abc\\" has the substrings: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". -----Input----- The first line of the input contains an integer ( n ) (1 ≤ n ≤ 200,000) — the length of the string. The second line contains the string ( s ) (|s| = n) consisting of lowercase alphabets. -----Output----- Output a single integer — the minimum number of substrings you need to obtain all distinct characters from the string. -----Examples----- Input 7 abcbbac Output 3 Input 5 aaaaa Output 1 -----Note----- In the first sample, you can choose substrings \\"abc\\", \\"b\\", and \\"ac\\" to get all distinct characters in the string. In the second sample, since all characters are the same, you only need one substring \\"a\\".","solution":"def min_substrings_to_get_all_chars(n, s): Returns the minimum number of substrings needed to obtain all distinct characters from the string s. distinct_characters = set(s) return len(distinct_characters)"},{"question":"# Task You are given a list of integers representing temperatures over several days. A \\"heatwave\\" day is defined as a day when the temperature is higher than those of the previous and the next day. Write a function to identify all such heatwave days. Your task is to implement a function that finds and returns all the days that are considered heatwave days from the given list of temperatures. # Input/Output `[input]` integer array `temperatures` - A list of integers representing daily temperatures. - `2 ≤ temperatures.length ≤ 100` - `-100 ≤ temperatures[i] ≤ 100` `[output]` integer array - An array of integers representing the indices of all heatwave days. # Example For `temperatures = [30, 35, 28, 40, 38, 36, 25, 45, 30]`, the output should be `[1, 3, 7]`. In this example: - Day 1 (35) is a heatwave as it is higher than the previous day (30) and the next day (28). - Day 3 (40) is also a heatwave as it is higher than the previous day (28) and the next day (38). - Day 7 (45) is another heatwave as it is higher than the previous day (25) and the next day (30). For `temperatures = [20, 25, 30, 28, 27, 22]`, the output should be `[2]`. In this example: - Day 2 (30) is a heatwave as it is higher than the previous day (25) and the next day (28).","solution":"def find_heatwave_days(temperatures): Identifies all the days that are considered heatwave days from the given list of temperatures. Parameters: temperatures (list): A list of integers representing daily temperatures. Returns: list: An array of integers representing the indices of all heatwave days. heatwave_days = [] for i in range(1, len(temperatures) - 1): if temperatures[i] > temperatures[i - 1] and temperatures[i] > temperatures[i + 1]: heatwave_days.append(i) return heatwave_days"},{"question":"**Inventory Management - Restocking Alert** You are tasked with creating a system to assist in managing the inventory of a small warehouse. The system needs to identify products that require restocking. Task Write a function that takes in a dictionary representing the items in the warehouse and a threshold value. The dictionary keys are the product names (strings) and the values are the current quantities (integers). Your function should return a list of product names that require restocking. A product requires restocking if its quantity is less than or equal to the threshold value. The list should be in alphabetical order. Example: ```python inventory = { \\"pencils\\": 12, \\"notebooks\\": 5, \\"erasers\\": 6, \\"markers\\": 1, \\"paper_clips\\": 3 } threshold = 5 ``` In the example, the function should return `[\\"erasers\\", \\"markers\\", \\"notebooks\\", \\"paper_clips\\"]`. Note: - The function should be case-insensitive when comparing product names but should return the product names in their original case. - It should handle empty dictionaries and return an empty list in such cases.","solution":"def restocking_alert(inventory, threshold): Returns a list of product names that require restocking. A product requires restocking if its quantity is less than or equal to the threshold value. Parameters: inventory (dict): A dictionary where keys are product names (strings) and values are quantities (integers). threshold (int): The threshold quantity for restocking. Returns: list: A list of product names that require restocking, in alphabetical order. # Filter products that need restocking and sort them alphabetically return sorted([product for product in inventory if inventory[product] <= threshold])"},{"question":"Sam is trying to organize his book collection and needs a system to help him categorize and shelve his books. He has books of different genres and different heights. The genres are represented by lowercase strings, and the heights are represented by integers. Sam\'s goal is to group books of the same genre together and arrange each group by height in ascending order. Write a function `organize_books(book_list)` that takes in a list of tuples where each tuple contains two elements. The first element is a string representing the genre of the book, and the second element is an integer representing the height of the book. The function should return a dictionary where the keys are genres, and the values are lists of heights of the books in that genre, sorted in ascending order. # Example: `organize_books([(\\"fantasy\\", 25), (\\"mystery\\", 30), (\\"fantasy\\", 20), (\\"mystery\\", 25), (\\"sci-fi\\", 28)])` should return `{\\"fantasy\\": [20, 25], \\"mystery\\": [25, 30], \\"sci-fi\\": [28]}` `organize_books([(\\"romance\\", 22)])` should return `{\\"romance\\": [22]}` If the input book list is empty, the function should return an empty dictionary `{}`. # Constraints: - 0 <= len(book_list) <= 100 - 1 <= height of the book <= 100 - Genres can have a length between 1 and 10 characters","solution":"def organize_books(book_list): Organizes books by genre and height. Parameters: book_list (list): A list of tuples where each tuple contains a genre (string) and a height (integer). Returns: dict: A dictionary where keys are genres and values are lists of sorted heights. from collections import defaultdict genre_dict = defaultdict(list) for genre, height in book_list: genre_dict[genre].append(height) for genre in genre_dict: genre_dict[genre].sort() return dict(genre_dict)"},{"question":"Write a function that determines if two robots moving in a 2D grid will collide at a specific time. Each robot has an initial position (x, y) and a velocity (vx, vy) representing its speed along the X and Y axes per time unit respectively. Given the initial positions and velocities of both robots, as well as the specific time t, determine if they will occupy the same position at that time. The function should take six arguments: x1, y1, vx1, vy1, x2, y2, vx2, vy2, and t, which represent the initial positions and velocities of the first robot and the second robot, as well as the specific time. The function will return a boolean value: `True` if the robots collide at the specific time t, `False` otherwise. Assume that time t and all provided values are integers, and t is non-negative. Hint: Use the linear equations of motion to determine the positions of the robots at time t.","solution":"def will_robots_collide(x1, y1, vx1, vy1, x2, y2, vx2, vy2, t): Determines if two robots will collide at a specific time t. Args: x1, y1: Initial position of the first robot. vx1, vy1: Velocity of the first robot along the X and Y axes per time unit. x2, y2: Initial position of the second robot. vx2, vy2: Velocity of the second robot along the X and Y axes per time unit. t: The specific time. Returns: True if the robots will collide at time t, False otherwise. # Calculate the position of the first robot at time t position1_x = x1 + vx1 * t position1_y = y1 + vy1 * t # Calculate the position of the second robot at time t position2_x = x2 + vx2 * t position2_y = y2 + vy2 * t # Check if both robots occupy the same position at time t return position1_x == position2_x and position1_y == position2_y"},{"question":"----- PERFECT BALANCE ----- Anna loves collecting weights. She has a collection of weights and she\'s always interested in balancing them perfectly on a scale. A weight collection is balanced if the sum of weights on the left side of the scale is equal to the sum on the right. Anna can put any number of weights on each side. Given a set of weights, Anna wants to know if it\'s possible to split her weights into two groups such that each group has an equal sum. Write a function to determine if the collection of weights can be perfectly balanced. -----Constraints----- 1 ≤ t ≤ 100 1 ≤ number of weights ≤ 20 1 ≤ weight value ≤ 100,000 -----Input Format----- - The first line contains an integer t representing the number of test cases. - For each test case, the first line contains an integer n representing the number of weights. - The next line contains n integers representing the weights. -----Output----- Output \\"YES\\" if the weights can be split into two groups with equal sum, otherwise output \\"NO\\". -----Example Test Case----- Input: 2 4 1 5 11 5 3 1 2 5 Output: YES NO","solution":"def can_be_balanced(weights): Determines if a collection of weights can be split into two groups with equal sum. total_sum = sum(weights) # If total sum is odd, it can\'t be split into two equal parts if total_sum % 2 != 0: return False target = total_sum // 2 n = len(weights) # Using dynamic programming to determine if there is a subset with sum equal to target dp = [False] * (target + 1) dp[0] = True # Base case: a subset sum of 0 is always possible for weight in weights: for j in range(target, weight - 1, -1): dp[j] = dp[j] or dp[j - weight] return dp[target] def process_test_cases(test_cases): results = [] for weights in test_cases: if can_be_balanced(weights): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to read input and process the test cases def perfect_balance(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) weights = list(map(int, lines[index + 1].split())) test_cases.append(weights) index += 2 return process_test_cases(test_cases)"},{"question":"A painter is working on a series of canvases and needs your help managing the colors. Each canvas is initially white and the painter has a list of operations that change the color of certain parts of the canvas. Each operation consists of a color and a range of indices that should be painted that color. You are tasked with implementing a function that will keep track of these operations and determine the final color of the entire canvas. Input The input consists of: 1. An integer `n` representing the length of the canvas. 2. An integer `m` representing the number of operations. 3. An array of `m` operations, where each operation is represented as a tuple `(color, start_index, end_index)`: - `color` is a string representing the color to paint (up to 10 characters, consisting only of lowercase English letters). - `start_index` and `end_index` are integers representing the inclusive range of indices to color. All indices are 0-based, and operations are applied in the order they appear in the list. Output Return an array of strings representing the final color of each index on the canvas. Examples ```python # Example 1: n = 5 m = 3 operations = [(\\"red\\", 1, 3), (\\"blue\\", 2, 4), (\\"green\\", 0, 2)] # The final canvas will be [\\"green\\", \\"green\\", \\"green\\", \\"blue\\", \\"blue\\"] print(paint_canvas(n, m, operations)) # Example 2: n = 10 m = 2 operations = [(\\"yellow\\", 1, 5), (\\"black\\", 4, 8)] # The final canvas will be [\\"white\\", \\"yellow\\", \\"yellow\\", \\"yellow\\", \\"black\\", \\"black\\", \\"black\\", \\"black\\", \\"black\\", \\"white\\"] print(paint_canvas(n, m, operations)) ``` Function Signature ```python def paint_canvas(n: int, m: int, operations: List[Tuple[str, int, int]]) -> List[str]: ```","solution":"from typing import List, Tuple def paint_canvas(n: int, m: int, operations: List[Tuple[str, int, int]]) -> List[str]: This function takes the length of the canvas, the number of operations, and a list of operations. Each operation is a tuple containing a color and a range of indices to be painted that color. It returns the final color of each index on the canvas. # Initialize the canvas with all white colors canvas = [\\"white\\"] * n # Apply each operation in order for color, start_index, end_index in operations: for i in range(start_index, end_index + 1): canvas[i] = color return canvas"},{"question":"Write a function that takes an array of integers where every element appears thrice except for one. Find that single one. Example 1: Input: nums = [2,2,3,2] Output: 3 Example 2: Input: nums = [0,1,0,1,0,1,99] Output: 99 Constraints: - The input array will have at least one number and all appearances except one will be triples. - The length of the array is between 1 and 10^5. - The elements of the array are between -2^31 and 2^31 - 1.","solution":"def single_number(nums): Returns the element that appears only once in an array where every other element appears thrice. ones, twos = 0, 0 for num in nums: ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones return ones"},{"question":"Suzie loves books and she spends most of her weekends reading. She has a collection of books of varying thicknesses and wants to organize them sequentially by thickness before placing them on her shelf. She needs your help to determine the final order of books after sorting them by thickness in ascending order. -----Input:----- - First line contains an integer, number of test cases. - Each test case begins with an integer n, the number of books. - The next line contains n space-separated integers representing the thickness of each book. -----Output:----- For each test case, output a single line containing the ordered thickness of books in ascending order. -----Constraints----- 1 <= n <= 1000 1 <= Thickness <= 100 -----Sample Input:----- 2 5 10 3 5 8 1 3 4 4 2 -----Sample Output:----- 1 3 5 8 10 2 4 4","solution":"def sort_books_by_thickness(test_cases): This function receives a list of test cases where each test case contains a list of book thicknesses. It returns a sorted list of thicknesses for each test case. result = [] for case in test_cases: sorted_case = sorted(case) result.append(sorted_case) return result def process_input(input_string): Process the input string to create the list of test cases. lines = input_string.strip().split(\'n\') num_cases = int(lines[0]) cases = [] index = 1 for _ in range(num_cases): n = int(lines[index]) thicknesses = list(map(int, lines[index + 1].split())) cases.append(thicknesses) index += 2 return cases def format_output(results): Format the sorted thickness lists into the required output string format. output_lines = [\' \'.join(map(str, res)) for res in results] return \'n\'.join(output_lines) def main(input_string): test_cases = process_input(input_string) sorted_books = sort_books_by_thickness(test_cases) return format_output(sorted_books)"},{"question":"The city of Netherdale has a unique transportation system that involves several train routes. Each route has a starting station, an ending station, and a travel time. The train company wants to optimize the usage of its train fleet by scheduling as many non-overlapping routes as possible within a single day. Each route\'s timeline is defined from its starting time to its ending time, and the trains can only operate if there is no overlap between any two active routes. Additionally, there should be at least a 15-minute buffer between two successive routes to allow for maintenance. Your task is to help the train company maximize the number of routes operated in a single day by selecting a subset of non-overlapping routes that can be scheduled sequentially with the required buffer time. -----Input:----- The first line of the input will contain a single integer N indicating the number of suggested routes. Lines 2, 3, ..., N+1 describe the characteristics of the routes. Line i+1 contains three integers: S_i (the start time in minutes from midnight), E_i (the end time in minutes from midnight), and T_i (the total travel time in minutes). -----Output:----- Your output must consist of a single line containing a single integer M, indicating the maximum possible number of non-overlapping routes that can be scheduled. -----Constraints:----- - 1 leq N leq 50000. - 0 leq S_i < 1440. - 0 leq E_i < 1440. - 0 leq T_i leq 1440. - S_i and E_i are such that S_i + T_i = E_i. -----Sample input:----- 5 60 120 60 180 240 60 150 210 60 330 390 60 300 360 60 -----Sample output:----- 3","solution":"def max_non_overlapping_routes(n, routes): Returns the maximum number of non-overlapping train routes with at least a 15-minute buffer. Parameters: n (int): The number of suggested routes. routes (list of tuples): A list of tuples where each tuple contains (S_i, E_i, T_i). - S_i is the start time in minutes from midnight. - E_i is the end time in minutes from midnight. - T_i is the total travel time in minutes. Returns: int: The maximum number of non-overlapping routes that can be scheduled with the required buffer. # Sort the routes by their end times routes.sort(key=lambda x: x[1]) count = 0 last_end_time = -15 # Initializing with -15 so the first route can be selected without issues for start, end, _ in routes: if start >= last_end_time + 15: count += 1 last_end_time = end return count"},{"question":"You are given a list of `n` cities and the distances between each pair of cities. Your goal is to find the shortest possible route that visits each city exactly once and returns to the starting city. This problem is known as the Traveling Salesman Problem (TSP). -----Input----- The first line of the input contains an integer `n` (2 ≤ n ≤ 15) representing the number of cities. The next `n` lines contain `n` integers each, where the `j-th` integer in the `i-th` line is the distance between the `i-th` city and the `j-th` city. All distances are positive integers and symmetric, meaning the distance from city `i` to city `j` is the same as the distance from city `j` to city `i`, and the distance from a city to itself is zero. -----Output----- Output a single integer – the length of the shortest route that visits each city exactly once and returns to the starting city. -----Examples----- Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Input 3 0 29 20 29 0 15 20 15 0 Output 64 -----Note----- In this problem, the solution always exists and it is unique. The distances between pairs of cities are symmetric, which allows for straightforward calculations using symmetry properties in the Traveling Salesman Problem.","solution":"from itertools import permutations def tsp_brute_force(n, distances): Solves the Traveling Salesman Problem using brute force. Parameters: n (int): Number of cities distances (list of list of int): 2D list representing distances between cities Returns: int: Length of the shortest route that visits each city exactly once and returns to the starting city. # Generate all permutations of cities (excluding the starting city) city_indices = list(range(n)) min_route_length = float(\'inf\') # Iterate over all possible permutations of cities for perm in permutations(city_indices[1:]): current_route_length = 0 last_city = 0 # Calculate the cost of the route starting from the 0th city for city in perm: current_route_length += distances[last_city][city] last_city = city # Add the cost to return to the starting city current_route_length += distances[last_city][0] # Update the shortest route length if current is shorter min_route_length = min(min_route_length, current_route_length) return min_route_length"},{"question":"Aman loves to play with arrays and integers. He comes up with an interesting problem to challenge his friends. He calls a sequence of integers beautiful if it contains no consecutive elements that are equal. He gives his friend a sequence of integers and asks if it can be rearranged to form a beautiful sequence. Help Aman\'s friend by writing a program to determine if the sequence can be rearranged to become beautiful. If it is possible, print \\"POSSIBLE\\" (without quotes); otherwise, print \\"IMPOSSIBLE\\" (without quotes). -----Input:----- - The first line contains a single integer T, the number of testcases. - For each testcase, the first line contains a single integer N (length of the sequence). - The second line contains N space-separated integers, representing the elements of the sequence. -----Output:----- For each testcase, print \\"POSSIBLE\\"(without quotes) or \\"IMPOSSIBLE\\"(without quotes) on a new line. -----Constraints----- - 1 leq T leq 10^4 - 1 leq N leq 10^5 - 1 leq Array elements leq 10^9 -----Sample Input:----- 2 5 3 3 3 3 2 4 1 1 2 2 -----Sample Output:----- IMPOSSIBLE POSSIBLE -----EXPLANATION:----- For the first testcase, it is not possible to rearrange the sequence to avoid consecutive equal elements, so the answer is \\"IMPOSSIBLE\\". For the second testcase, we can rearrange the sequence as [1, 2, 1, 2], which avoids consecutive equal elements, so the answer is \\"POSSIBLE\\".","solution":"def is_beautiful_sequence_possible(T, test_cases): Determine if a sequence can be rearranged to form a beautiful sequence. Parameters: T (int): Number of test cases. test_cases (list): List of tuples, where each tuple contains the integer N and the list of integers. Returns: list: List of strings, \\"POSSIBLE\\" or \\"IMPOSSIBLE\\" for each test case. results = [] for i in range(T): N, sequence = test_cases[i] count_map = {} for num in sequence: if num in count_map: count_map[num] += 1 else: count_map[num] = 1 max_occurrences = max(count_map.values()) if max_occurrences <= (N + 1) // 2: results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results"},{"question":"----- In a large e-commerce company, they track product IDs using unique strings. Each string contains only lowercase English letters. The e-commerce development team wants to create a tool to identify all anagram groupings within a list of product IDs. An anagram is a word formed by rearranging the letters of another, using all the original letters exactly once. ----- # Your Task: Write a function that takes a list of lowercase strings and returns a list of lists, where each inner list contains strings that are anagrams of each other. ----- Function Signature: ```python def groupAnagrams(strs: List[str]) -> List[List[str]]: ``` ----- # Input: - An integer ( n ) — the number of product IDs (1 ≤ n ≤ 10^4). - An array of ( n ) string(s) ( strs ). Each string contains only lowercase English letters and its length does not exceed 100. ----- # Output: - A list of lists containing groups of anagrams. Each group should contain at least one string. The order of the groups and the order within each group does not matter. ----- # Example: Input: ```python [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] ``` Output: ```python [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] ``` # Explanation: - \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams of each other. - \\"tan\\" and \\"nat\\" are anagrams of each other. - \\"bat\\" stands alone as it has no anagrams in the provided list.","solution":"from typing import List from collections import defaultdict def groupAnagrams(strs: List[str]) -> List[List[str]]: Groups anagrams from the list of strings. Args: strs (List[str]): List of product ID strings. Returns: List[List[str]]: List of lists containing groups of anagrams. anagrams = defaultdict(list) for s in strs: # Sort the string and use it as a key sorted_str = \'\'.join(sorted(s)) anagrams[sorted_str].append(s) return list(anagrams.values())"},{"question":"A company wants to schedule meetings in a conference room. A meeting request can be represented by two integers, start time and end time. The company has a policy that meetings must not overlap in time. Given a list of meeting requests, determine the maximum number of non-overlapping meetings that can be scheduled in the conference room. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N, the number of meeting requests. - Each of the following N lines contains two space-separated integers S_i and E_i, the start and end times of a meeting. -----Output----- For each test case, print a single line containing one integer ― the maximum number of non-overlapping meetings that can be scheduled. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - 0 le S_i < E_i le 10^9 -----Example Input----- 2 3 1 2 2 3 3 4 4 1 3 2 4 3 5 7 8 -----Example Output----- 3 3 Explanation: In the first test case, all meetings can be scheduled without overlapping. In the second test case, one of the optimal ways to schedule the maximum non-overlapping meetings is to choose the meetings (1, 3), (3, 5), and (7, 8).","solution":"def max_non_overlapping_meetings(test_cases): results = [] for case in test_cases: N, meetings = case # Sort meetings by their end time meetings.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in meetings: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) current_line = 1 test_cases = [] for _ in range(T): N = int(lines[current_line]) current_line += 1 meetings = [] for _ in range(N): S, E = map(int, lines[current_line].split()) meetings.append((S, E)) current_line += 1 test_cases.append((N, meetings)) return test_cases"},{"question":"A social media platform has implemented a new feature called \\"threaded comments.\\" This feature allows users to reply to comments, forming a nested structure that represents discussion threads. Each comment can have multiple replies, and each of those replies can have their own replies, and so on. The platform wants to provide a way to efficiently manage and retrieve these nested comments. You are tasked with designing a system to handle this, including the following functionalities: * `SocialMediaComments(string postId)`: Initializes an object for managing comments for a post identified by `postId`. * `void addComment(string commentId, string parentId, string content)`: Adds a comment with `commentId` and `content`. If `parentId` is `null`, the comment is a top-level comment. Otherwise, the comment is a reply to the comment identified by `parentId`. * `void deleteComment(string commentId)`: Marks the comment with `commentId` as deleted. Deleted comments should not be displayed, but replies to those comments should still be maintained. * `List<string> getComments()`: Returns a list of all visible comments for the post in a flattened structure, preserving the hierarchical relationships. Deleted comments should be skipped. Top-level comments appear before their replies, and replies are nested immediately below their respective parent comment. Use the following class definition and method signatures to implement the system: ```python class SocialMediaComments: def __init__(self, postId: str): pass def addComment(self, commentId: str, parentId: str, content: str) -> None: pass def deleteComment(self, commentId: str) -> None: pass def getComments(self) -> List[str]: pass ``` # Example 1: ```python post = SocialMediaComments(\\"post1\\") post.addComment(\\"c1\\", None, \\"This is the first comment.\\") post.addComment(\\"c2\\", None, \\"This is another top-level comment.\\") post.addComment(\\"c3\\", \\"c1\\", \\"This is a reply to the first comment.\\") post.addComment(\\"c4\\", \\"c3\\", \\"This is a nested reply.\\") assert post.getComments() == [\\"c1: This is the first comment.\\", \\"c3: This is a reply to the first comment.\\", \\"c4: This is a nested reply.\\", \\"c2: This is another top-level comment.\\"] post.deleteComment(\\"c3\\") assert post.getComments() == [\\"c1: This is the first comment.\\", \\"c4: This is a nested reply.\\", \\"c2: This is another top-level comment.\\"] ``` # Constraints: - `postId`, `commentId`, `parentId`, and `content` each consist of lowercase English letters and spaces only. - The lengths of `postId`, `commentId`, `parentId`, and `content` are between 1 and 100 inclusive. - `parentId` will always refer to an existing comment or be `null` for top-level comments. - There will be at most 10^5 calls in total to `addComment`, `deleteComment`, and `getComments`. - Any deletion of a comment marks it as deleted but does not necessarily remove it from the nested structure. The `getComments` method should omit such comments from the returned list.","solution":"from typing import List class Comment: def __init__(self, commentId: str, content: str): self.commentId = commentId self.content = content self.replies = [] self.isDeleted = False class SocialMediaComments: def __init__(self, postId: str): self.postId = postId self.comments = {} self.topLevelComments = [] def addComment(self, commentId: str, parentId: str, content: str) -> None: newComment = Comment(commentId, content) self.comments[commentId] = newComment if parentId is None: self.topLevelComments.append(newComment) else: if parentId in self.comments: self.comments[parentId].replies.append(newComment) def deleteComment(self, commentId: str) -> None: if commentId in self.comments: self.comments[commentId].isDeleted = True def getComments(self) -> List[str]: result = [] def traverseComments(comment): if not comment.isDeleted: result.append(f\\"{comment.commentId}: {comment.content}\\") for reply in comment.replies: traverseComments(reply) for comment in self.topLevelComments: traverseComments(comment) return result"},{"question":"# Task Given an array of integers `arr` and a target integer `target`, determine if there are two distinct indices `i` and `j` in the array such that `arr[i] + arr[j]` equals `target`. # Example For `arr = [1, 2, 3, 4]` and `target = 5`, the output should be `true`. We can find indices `1` and `2` (0-based indices) where `arr[1] + arr[2]` equals `5`. For `arr = [1, 2, 3, 4]` and `target = 8`, the output should be `false`. There are no two distinct indices where the sum of elements equals `8`. # Input/Output - `[input]` array of integers `arr` A non-empty array of integers. Constraints: `2 ≤ arr.length ≤ 10^3` `-10^6 ≤ arr[i] ≤ 10^6` - `[input]` integer `target` An integer that defines the target sum. Constraints: `-10^6 ≤ target ≤ 10^6` - `[output]` a boolean value `true` if there are two distinct indices `i` and `j` such that `arr[i] + arr[j]` equals `target`, `false` otherwise.","solution":"def has_pair_with_sum(arr, target): Determines if there are two distinct indices i and j in the array such that arr[i] + arr[j] == target. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"-----Problem Statement----- Write a program that computes the sum of all the even numbers from 1 to a given number n (inclusive). -----Input----- The only line contains a single integer n. -----Output----- Output the sum of all even numbers from 1 to n in a single line. -----Constraints----- - 1 ≤ n ≤ 10^5 -----Sample Input----- 10 -----Sample Output----- 30","solution":"def sum_of_evens(n): Computes the sum of all even numbers from 1 to n (inclusive). Parameters: n (int): The upper bound of the range, inclusive. Returns: int: The sum of all even numbers from 1 to n. return sum(i for i in range(2, n+1, 2))"},{"question":"You are given a list of strings representing dates in the format \\"DD-MM-YYYY\\". Your task is to sort this list of dates in ascending order, from the earliest to the latest date. You may not use any built-in date parsing functions. For example: ``` Input: [\\"14-02-2021\\", \\"03-11-2020\\", \\"25-12-2021\\", \\"01-01-2020\\"] Output: [\\"01-01-2020\\", \\"03-11-2020\\", \\"14-02-2021\\", \\"25-12-2021\\"] ```","solution":"def sort_dates(dates): Sort a list of dates in the format \'DD-MM-YYYY\' in ascending order. # Convert each date to a tuple (YYYY, MM, DD) for easy sorting date_tuples = [(d.split(\'-\')[2], d.split(\'-\')[1], d.split(\'-\')[0]) for d in dates] # Sort the list of tuples date_tuples.sort() # Convert the sorted tuples back to the original format \'DD-MM-YYYY\' sorted_dates = [f\\"{day}-{month}-{year}\\" for year, month, day in date_tuples] return sorted_dates"},{"question":"You are given an array of integers. Your task is to find the length of the longest contiguous subarray such that there is at most one pair of elements where the second element is greater than the first one. For example: - Given the array `[1, 3, 5, 4, 2]`, the longest contiguous subarray is `[3, 5, 4, 2]` with the length 4, because there is one pair `(5, 4)` which fulfills the requirement. - Given the array `[2, 2, 2, 2]`, the longest contiguous subarray is `[2, 2, 2, 2]` with the length 4, as there are no pairs where the second element is greater than the first one. Implement a function to determine the length of the longest contiguous subarray: ```python def longest_contiguous_subarray(arr): # Your code here pass # Example usage: # arr = [1, 3, 5, 4, 2] # print(longest_contiguous_subarray(arr)) # Output: 4 ```","solution":"def longest_contiguous_subarray(arr): Function to find the length of the longest contiguous subarray where there is at most one pair of elements such that the second element is greater than the first one. max_length = 0 start = 0 n = len(arr) while start < n: count_increasing_pairs = 0 end = start while end < n - 1: if arr[end] < arr[end + 1]: if count_increasing_pairs == 0: count_increasing_pairs += 1 else: break end += 1 max_length = max(max_length, end - start + 1) start += 1 return max_length"},{"question":"Write a function that takes an integer representing a duration in seconds and returns the format as `hh:mm:ss` (a string). Ensure that the output follows these rules: 1. If the duration is less than or equal to zero, return `\\"00:00:00\\"`. 2. Always use two digits for hours, minutes, and seconds, padding with leading zeros if necessary. **Hint:** To simplify the task, use integer division and the modulo operation to separate hours, minutes, and seconds. Example If the input is `3661`, then you should return `\\"01:01:01\\"`. This is because 3661 seconds converts to 1 hour, 1 minute, and 1 second. Good luck! :D","solution":"def format_duration(seconds): Converts a duration in seconds to a string in the format hh:mm:ss. If the duration is less than or equal to zero, returns \\"00:00:00\\". if seconds <= 0: return \\"00:00:00\\" hours = seconds // 3600 minutes = (seconds % 3600) // 60 seconds = seconds % 60 return f\\"{hours:02}:{minutes:02}:{seconds:02}\\""},{"question":"Given a list of unique integers, write a function that generates all possible subsets (the power set) of that list. The solution set must not contain duplicate subsets and should be returned in a list where the elements are lists representing subsets. The subsets should be sorted in ascending order of their elements, and the list of subsets should be sorted lexicographically. For example: ```python generate_subsets([1, 2, 3]) # returns [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]] generate_subsets([9, 0, 2]) # returns [[], [0], [0, 2], [0, 2, 9], [0, 9], [2], [2, 9], [9]] ``` Note - Ensure that the elements in each subset are sorted. - The function should return the list of subsets such that they are lexicographically sorted.","solution":"def generate_subsets(nums): Returns the power set of the given list of unique integers as a list of sorted subsets. The subsets are sorted lexicographically. def backtrack(start, path): result.append(path) for i in range(start, len(nums)): backtrack(i + 1, path + [nums[i]]) result = [] nums.sort() backtrack(0, []) return result"},{"question":"Given an array of integers, find the length of the longest contiguous subarray that sums up to the given target sum. Example 1: Input: nums = [1, -1, 5, -2, 3], target = 3 Output: 4 Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest with that sum. Example 2: Input: nums = [-2, -1, 2, 1], target = 1 Output: 2 Explanation: The subarray [-1, 2] sums to 1 and is the longest with that sum.","solution":"def longest_subarray_sum(nums, target): Find the length of the longest contiguous subarray that sums up to the target sum. sum_map = {0: -1} # Dictionary to store the first occurrence of a cumulative sum. max_length = 0 cum_sum = 0 for i in range(len(nums)): cum_sum += nums[i] if (cum_sum - target) in sum_map: max_length = max(max_length, i - sum_map[cum_sum - target]) if cum_sum not in sum_map: sum_map[cum_sum] = i return max_length"},{"question":"Aria is organizing the library at her university. She has a list of the number of books in each section and wants to arrange them in a specific way. She decided that books from sections with a higher number of books should come first, but within the sections having the same number of books, original order should be preserved. Can you help Aria arrange the book sections as per her requirement? -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100000) — the number of sections in the library. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000), where ai is the number of books in the i-th section. -----Output----- Output the sequence of sections arranged by the number of books in each section according to the described rule. -----Examples----- Input 5 3 8 8 6 2 Output 8 8 6 3 2 Input 4 1 1 1 1 Output 1 1 1 1 -----Note----- In the first example, the sections with 8 books come first followed by the section with 6 books. The section with 3 books comes next, and finally, the section with 2 books. In the second example, since all sections have the same number of books, the original order is preserved.","solution":"def arrange_sections(n, sections): Arrange the sections based on the number of books in descending order. If two sections have the same number of books, their relative order should be the same as the original. :param n: int, the number of sections :param sections: list of int, the number of books in each section :return: list of int, the sections arranged as per the described rule # Pair each element with its index and sort based on the number of books and index indexed_sections = list(enumerate(sections)) indexed_sections.sort(key=lambda x: (-x[1], x[0])) # Extract the sorted sections sorted_sections = [sections[i] for i, _ in indexed_sections] return sorted_sections"},{"question":"Write a function that accepts an array of integers and returns an array where each element is the sum of the other elements except the element at the current index. You may not use division in your solution. Examples: ``` sumArrayExceptSelf([1, 2, 3, 4]) => returns [9, 8, 7, 6] sumArrayExceptSelf([5, 10, 15]) => returns [25, 20, 15] sumArrayExceptSelf([7, 0, 3]) => returns [3, 10, 7] ``` Constraints: - All integers in the input array are non-negative. - The input array will contain at least one element.","solution":"def sumArrayExceptSelf(arr): Returns a new array where each element is the sum of all other elements except the one at the current index. total_sum = sum(arr) result = [total_sum - x for x in arr] return result"},{"question":"Create a function that takes a list of integers and returns a new list where each integer is replaced by the product of all the integers in the original list except for the one at the current index. You must achieve this without using division. #Examples: ~~~if-not:bf ``` productExceptSelf([1,2,3,4]) should return [24, 12, 8, 6] productExceptSelf([2,3,4,5]) should return [60, 40, 30, 24] productExceptSelf([1,1,1,1]) should return [1, 1, 1, 1] ``` ~~~ ~~~if:bf ``` runBF(\\"1 2 3 40\\") should return \\"24 12 8 6\\" runBF(\\"2 3 4 50\\") should return \\"60 40 30 24\\" runBF(\\"1 1 1 10\\") should return \\"1 1 1 1\\" ``` ~~~ #Input: A list of integers of length `0 < n <= 1000`. #Output: A new list with the product of all integers except the one at the current index.","solution":"def productExceptSelf(nums): Returns a list such that each element at index i is the product of all the elements in the original array except nums[i], without using division. length = len(nums) # Initialize the two lists left_products = [1] * length right_products = [1] * length result = [1] * length # Fill the left_products array for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill the right_products array for j in range(length - 2, -1, -1): right_products[j] = right_products[j + 1] * nums[j + 1] # Construct the result array for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"Write a function called `canPartitionKSubsets`/`can_partition_k_subsets`/`CanPartitionKSubsets` that takes an integer array and an integer `k`. The function should return `true` if the array can be partitioned into `k` non-empty subsets whose sums are all equal. Otherwise, return `false`. **Constraints:** - The array and each k subset must have at least one element. - Array elements can be positive or negative. - k is a positive integer. Example: ```python canPartitionKSubsets([4, 3, 2, 3, 5, 2, 1], 4) # returns True canPartitionKSubsets([1, 2, 3, 4], 3) # returns False ```","solution":"def can_partition_k_subsets(nums, k): Determines if the array can be partitioned into k non-empty subsets with equal sum. Args: nums: list of integers k: integer representing the number of subsets Returns: bool: True if partitioning is possible, False otherwise total_sum = sum(nums) if total_sum % k != 0: return False target = total_sum // k nums.sort(reverse=True) if nums[0] > target: return False def search(groups): if not nums: return True num = nums.pop() for i in range(k): if groups[i] + num <= target: groups[i] += num if search(groups): return True groups[i] -= num if groups[i] == 0: break nums.append(num) return False return search([0] * k)"},{"question":"Given an array of integers, a \\"peak element\\" is an element that is greater than its neighbors. For example, in the array `[1, 3, 20, 4, 1, 0]`, the element `20` is a peak element as it is greater than its neighbors. Similarly, `4` is also a peak element. Write a function `findPeakElement(arr)` that takes an array of integers `arr` and returns the index of any one peak element. You may assume that the array contains at least one peak element. If the array contains multiple peak elements, returning the index of any one of the peak elements is acceptable. The array may contain negative numbers or duplicate values. For example: ``` findPeakElement([1, 2, 3, 1]) -> 2 findPeakElement([1, 2, 3, 4, 5]) -> 4 ```","solution":"def findPeakElement(arr): Find an index of any peak element in the array. A peak element is an element that is greater than its neighbors. :param arr: List[int] - the input array :return: int - index of any one peak element n = len(arr) # If the array has only one element, return it as the peak element if n == 1: return 0 # Check for peak at the first element if arr[0] >= arr[1]: return 0 # Check for peak at the last element if arr[n-1] >= arr[n-2]: return n-1 # Check for peak in the middle elements for i in range(1, n-1): if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]: return i"},{"question":"In a given grid of size `m x n`, there is a robot initially located at the top-left corner (marked as \'S\'). The robot tries to move to the bottom-right corner (marked as \'E\'). The grid contains obstacles marked by \'1\' and free spaces marked by \'0\'. The robot can only move either down or right at any point in time. Your task is to determine the total number of unique paths that the robot can take to reach the destination. Write a function that finds the number of unique paths given the grid configuration. Function Signature: ```python def uniquePaths(grid: List[List[int]]) -> int: ``` **Example:** **Input:** grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]] **Output:** 2 **Explanation:** Here, the robot has two possible paths to reach the destination: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right **Note:** 1. `m == grid.length` 2. `n == grid[i].length` 3. `1 <= m, n <= 100` 4. grid[i][j] is `0` or `1`.","solution":"def uniquePaths(grid): Function to calculate the number of unique paths in a grid with obstacles. The robot starts at the top-left corner and must reach the bottom-right corner, moving only down or right. m = len(grid) n = len(grid[0]) # If the starting point or the ending point is an obstacle, no paths are possible if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Create a DP table to store the number of ways to reach each cell dp = [[0] * n for _ in range(m)] # Initialize the starting point dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Given a binary tree, find the maximum path sum. The path may start and end at any node in the tree. Example: Given tree: 1 / 2 3 / 4 5 The maximum path sum is 11, obtained by summing the path 4->2->5. Note: A path may contain at most one node from any level in the tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_path_sum(root): Calculates the maximum path sum in a binary tree. The path may start and end at any node in the tree. def helper(node): nonlocal max_sum if not node: return 0 # Calculate sums of paths starting from the left child and right child left_sum = max(helper(node.left), 0) right_sum = max(helper(node.right), 0) # Calculate the sum passing through the current node current_path_sum = node.val + left_sum + right_sum # Update the global maximum sum max_sum = max(max_sum, current_path_sum) # Return the maximum sum of either left path or right path and the current node\'s value return node.val + max(left_sum, right_sum) max_sum = float(\'-inf\') helper(root) return max_sum"},{"question":"Write a function that takes a string containing digits from \'2\' to \'9\' and returns a list of all possible letter combinations that the number could represent on a traditional T9 telephone keypad. For reference, here is the mapping on a T9 keypad: 2: \\"abc\\" 3: \\"def\\" 4: \\"ghi\\" 5: \\"jkl\\" 6: \\"mno\\" 7: \\"pqrs\\" 8: \\"tuv\\" 9: \\"wxyz\\" For example: Input: \\"23\\" Output: [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] Input: \\"764\\" Output: [\\"pmg\\", \\"pmh\\", \\"pmi\\", \\"png\\", \\"pnh\\", \\"pni\\", \\"pog\\", \\"poh\\", \\"poi\\", \\"qmg\\", \\"qmh\\", \\"qmi\\", \\"qng\\", \\"qnh\\", \\"qni\\", \\"qog\\", \\"qoh\\", \\"qoi\\", \\"rmg\\", \\"rmh\\", \\"rmi\\", \\"rng\\", \\"rnh\\", \\"rni\\", \\"rog\\", \\"roh\\", \\"roi\\", \\"smg\\", \\"smh\\", \\"smi\\", \\"sng\\", \\"snh\\", \\"sni\\", \\"sog\\", \\"soh\\", \\"soi\\"] Note: * You can use iteration and recursion approaches to solve the problem. * Ensure to handle the edge cases appropriately. * Do not consider digits \'0\' and \'1\' as they do not have mappings.","solution":"def letter_combinations(digits): Returns all possible letter combinations that the number could represent on a traditional T9 telephone keypad. if not digits: return [] phone_mapping = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(combination, next_digits): if len(next_digits) == 0: output.append(combination) else: for letter in phone_mapping[next_digits[0]]: backtrack(combination + letter, next_digits[1:]) output = [] backtrack(\\"\\", digits) return output"},{"question":"Tom has a sequence of numbers and he wants to perform a specific operation to maximize a selected number in the sequence. The operation involves choosing any two distinct numbers from the sequence, removing them, and adding their sum back to the sequence. He wants to know the maximum possible value he can achieve for an element in the sequence by performing this operation as many times as he wants. ------Input------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the size of the sequence. The second line of each test case contains N integers, the elements of the sequence. ------Output------ For each test case, output a single line containing one integer — the maximum possible value for an element in the sequence after performing the operation as many times as desired. ------Constraints------ - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 105 - 1 ≤ element in sequence ≤ 109 ------Example------ Input: 2 3 1 2 3 4 1 1 1 1 Output: 6 4 ------Explanation------ Test case 1. The initial sequence is [1, 2, 3]. One possible scenario: - Combine 1 and 2 to form 3. The sequence becomes [3, 3]. - Combine the two 3\'s to form 6. The sequence becomes [6]. The maximum number is 6. Test case 2. The initial sequence is [1, 1, 1, 1]. One possible scenario: - Combine two 1\'s to form 2. The sequence becomes [1, 1, 2]. - Combine 1 and 2 to form 3. The sequence becomes [1, 3]. - Combine 1 and 3 to form 4. The sequence becomes [4]. The maximum number is 4.","solution":"def max_possible_value_after_operations(test_cases): This function takes a list of test cases, performs the required operation to maximize the selected number in the sequence and returns the maximum possible value in each test case. :param test_cases: List of tuples, where each tuple contains the size of the sequence and the sequence itself. :return: List of integers representing the maximum possible value for each test case. results = [] for size, sequence in test_cases: total_sum = sum(sequence) results.append(total_sum) return results"},{"question":"Task Design an elevator control system that handles requests for an elevator in a building. The elevator can only move one floor at a time, either up or down. The primary function to implement is ```ControlSystem``` which should manage the elevator requests and control the elevator\'s movements. The system needs to handle the following operations: 1. ```request(floor)```: This method registers a request for the elevator to move to a specific floor. Requests should be serviced in the order they are received. 2. ```step()```: This method moves the elevator one floor towards the next requested destination. 3. ```current_floor()```: This method returns the current floor that the elevator is on. Requirements: - The elevator must service one request at a time in a First-In-First-Out (FIFO) manner. - The elevator initially starts on the ground floor (floor 0). - If there are multiple requests for the same floor, they should not affect the order of other requests. - Once the elevator reaches a requested floor, that request is considered serviced and should be removed from the request list. Example: ```python elevator = ControlSystem() elevator.request(3) elevator.request(1) elevator.request(4) print(elevator.current_floor()) # 0 elevator.step() print(elevator.current_floor()) # 1 elevator.step() elevator.step() elevator.step() print(elevator.current_floor()) # 3 elevator.step() print(elevator.current_floor()) # 4 ``` This code makes use of basic classes and data structures: ```python class ControlSystem: def __init__(self): self.current = 0 self.requests = [] def request(self, floor): if floor not in self.requests: self.requests.append(floor) def step(self): if self.requests: destination = self.requests[0] if self.current < destination: self.current += 1 elif self.current > destination: self.current -= 1 if self.current == destination: self.requests.pop(0) def current_floor(self): return self.current ```","solution":"class ControlSystem: def __init__(self): self.current = 0 self.requests = [] def request(self, floor): if floor not in self.requests: self.requests.append(floor) def step(self): if self.requests: destination = self.requests[0] if self.current < destination: self.current += 1 elif self.current > destination: self.current -= 1 if self.current == destination: self.requests.pop(0) def current_floor(self): return self.current"},{"question":"File Hierarchy Simulation You are tasked with simulating a simple file hierarchy. In this hierarchy, there are two types of entries: `File` and `Directory`. Directories can contain multiple child entries (both `File` and `Directory`), while Files cannot contain any children. You are to implement the following classes and methods: # Base Class ```python class Entry: def __init__(self, name): self.name = name def get_name(self): return self.name def get_size(self): raise NotImplementedError(\\"Subclasses should implement this method\\") def __str__(self): return self.name ``` # File Class ```python class File(Entry): def __init__(self, name, size): super().__init__(name) self.size = size def get_size(self): return self.size ``` # Directory Class ```python class Directory(Entry): def __init__(self, name): super().__init__(name) self.entries = [] def add_entry(self, entry): self.entries.append(entry) def get_size(self): return sum(entry.get_size() for entry in self.entries) def get_entry_names(self): return [entry.get_name() for entry in self.entries] ``` # Task 1. Implement the `Entry` base class with the appropriate methods. This class should not be instantiated directly. 2. Implement the `File` class which extends `Entry`. Files should store their size and inherit the `get_name()` method from `Entry`. Implement the `get_size()` method to return the size of the file. 3. Implement the `Directory` class which extends `Entry`. Directories should store a list of child entries and implement the `add_entry()` method to add new entries (both `File` and `Directory`). Implement the `get_size()` method to return the total size of all the entries within the directory. 4. Provide a method `get_entry_names()` in the `Directory` class that returns the names of all direct children of the directory. # Example Usage ```python file1 = File(\\"file1.txt\\", 100) file2 = File(\\"file2.txt\\", 200) root = Directory(\\"root\\") root.add_entry(file1) root.add_entry(file2) subdir = Directory(\\"subdir\\") subdir.add_entry(File(\\"file3.txt\\", 300)) root.add_entry(subdir) print(root.get_size()) # 600 print(root.get_entry_names()) # [\'file1.txt\', \'file2.txt\', \'subdir\'] ``` # Notes - A directory can contain multiple files and directories, and there is no limit to the depth of the directory hierarchy. - The `get_size()` method in `Directory` should sum the sizes of all recursive child entries. - Ensure that your implementation properly distinguishes between files and directories and handles them accordingly.","solution":"class Entry: def __init__(self, name): self.name = name def get_name(self): return self.name def get_size(self): raise NotImplementedError(\\"Subclasses should implement this method\\") def __str__(self): return self.name class File(Entry): def __init__(self, name, size): super().__init__(name) self.size = size def get_size(self): return self.size class Directory(Entry): def __init__(self, name): super().__init__(name) self.entries = [] def add_entry(self, entry): self.entries.append(entry) def get_size(self): return sum(entry.get_size() for entry in self.entries) def get_entry_names(self): return [entry.get_name() for entry in self.entries]"},{"question":"Dr. Smith is conducting an experiment on a new drug that requires precise dosage calculations based on a patient\'s weight. Write a program that helps Dr. Smith determine the correct dosage for each patient. -----Input:----- - First line will contain the number of test cases. Then the test cases follow. - Each test case contains a single line of input, which is the weight of the patient (in kilograms). -----Output:----- For each test case, output in a single line the required dosage in milligrams. The dosage is calculated by multiplying the patient\'s weight by a constant rate of 2.5 mg/kg. -----Constraints----- 1 <= Weight <= 200. -----Sample Input:----- 3 70 45 85 -----Sample Output:----- 175.0 112.5 212.5","solution":"def calculate_dosage(weight): Calculate the dosage based on the patient\'s weight using a rate of 2.5 mg/kg. dosage = weight * 2.5 return dosage def get_dosages(weights): Given a list of weights, returns a list of dosages. dosages = [calculate_dosage(weight) for weight in weights] return dosages"},{"question":"You are given a list of integers representing the weights of different objects. Your task is to write a function `balance_weights(weights)` that will partition the list into two subsets such that the difference between the sum of the weights in these subsets is minimized. For example, given the list `weights = [3, 1, 4, 2, 2]`, one possible solution is to partition the list into the subsets `[3, 2, 2]` and `[1, 4]`, which have sums `7` and `5` respectively, resulting in a difference of `2`. Another valid solution would be `[4, 2]` and `[3, 2, 1]` as both have sum `6`. The output should be a tuple of two lists representing the two subsets. Ensure that the total sum and items in the subsets matches the original list. Your function should follow this signature: ```python def balance_weights(weights: List[int]) -> Tuple[List[int], List[int]]: pass ``` # Constraints 1. The length of the `weights` list will be at most `30`. 2. Each weight will be an integer between `1` and `1000`. 3. Elements in the original `weights` list can repeat. Below are some sample inputs and expected outputs: Example 1 ```python weights = [3, 1, 4, 2, 2] balance_weights(weights) ``` # Expected Output One possible output is: ```python ([3, 2, 2], [1, 4]) ``` Example 2 ```python weights = [1, 2, 3, 4, 5] balance_weights(weights) ``` # Expected Output One possible output is: ```python ([1, 4, 5], [2, 3]) ```","solution":"from typing import List, Tuple def balance_weights(weights: List[int]) -> Tuple[List[int], List[int]]: Partition the list of weights into two subsets such that the difference between the sum of the weights in these subsets is minimized. total_sum = sum(weights) n = len(weights) # dp[i][j] will be True if a subset with sum j can be formed from the first i weights dp = [[False] * (total_sum + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum + 1): dp[i][j] = dp[i-1][j] if j >= weights[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j - weights[i-1]] # Find the largest j such that dp[n][j] is True and j <= total_sum // 2 for j in range(total_sum // 2, -1, -1): if dp[n][j]: subset_sum = j break # Reconstruct the subsets subset1 = [] subset2 = weights[:] for i in range(n, 0, -1): if subset_sum >= weights[i-1] and dp[i-1][subset_sum - weights[i-1]]: subset1.append(weights[i-1]) subset2.remove(weights[i-1]) subset_sum -= weights[i-1] return subset1, subset2"},{"question":"Alice loves playing with strings and experimenting with various transformations. Recently, she became interested in cyclic shifts of strings. A cyclic shift means moving characters from the front of the string to the back or vice versa. Alice wants to see if two given strings can be transformed into one another by any number of cyclic shifts. Your task is to determine if one string is a cyclic shift of another. -----INPUT----- The first line of input contains an integer T denoting the number of test cases. T test cases follow. Each test case consists of two lines: - The first line containing a string A. - The second line containing a string B. Both strings consist of lowercase English letters only. -----OUTPUT----- For each test case, output \\"YES\\" if one string is a cyclic shift of the other, and \\"NO\\" otherwise. -----CONSTRAINTS----- 1 <= T <= 25 1 <= |A|, |B| <= 100 -----EXAMPLE----- Input: 3 abcde deabc abcdef defabc a a Output: YES YES YES","solution":"def is_cyclic_shift(A, B): Determines if B is a cyclic shift of A. if len(A) != len(B): return \\"NO\\" combined = A + A if B in combined: return \\"YES\\" else: return \\"NO\\" def process_test_cases(T, test_cases): results = [] for A, B in test_cases: results.append(is_cyclic_shift(A, B)) return results"},{"question":"Given a square matrix of integers, write a function to rotate the matrix in place 90 degrees clockwise. # Examples: | Input | Output | |--------------------------|-----------------------| | [[1, 2], | [[3, 1], | | [3, 4]] | [4, 2]] | | [[ 5, 1, 9, 11], | [[15, 13, 2, 5], | | [ 2, 4, 8, 10], | [14, 3, 4, 1], | | [13, 3, 6, 7], | [12, 6, 8, 9], | | [15, 14, 12, 16]] | [16, 7, 10, 11]] | # Constraints: - The function should modify the matrix in place. - You may assume the matrix will always be a square (NxN) matrix. - You can use only a constant amount of extra space.","solution":"def rotate_matrix(matrix): Rotates a given NxN matrix 90 degrees clockwise in place. n = len(matrix) for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j] matrix[i][j] = matrix[n - j - 1][i] matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1] matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1] matrix[j][n - i - 1] = temp"},{"question":"In a card game, each card has a numerical value from 1 to 13 and belongs to one of four suits: Spades, Hearts, Diamonds, Clubs. You are given a deck of cards as a list of tuples where each tuple represents a card with a value and a suit. For example: ```python deck = [(3, \\"Hearts\\"), (12, \\"Spades\\"), (7, \\"Diamonds\\"), (1, \\"Clubs\\")] ``` Your task is to write a function `can_form_straight_flush(deck)` that checks if any subset of 5 cards in the given deck can form a straight flush. A straight flush is a sequence of 5 cards in the same suit and consecutive values. # Function Signature ```python def can_form_straight_flush(deck: List[Tuple[int, str]]) -> str: ``` # Input - `deck`: A list of tuples where each tuple is (value, suit). Value is an integer from 1 to 13 and suit is a string and one of [\\"Spades\\", \\"Hearts\\", \\"Diamonds\\", \\"Clubs\\"]. # Output - Returns `\\"Straight Flush Found!\\"` if any subset of 5 cards in the deck can form a straight flush. - Returns `\\"No Straight Flush\\"` if no such subset exists. # Example ```python deck = [(3, \\"Hearts\\"), (4, \\"Hearts\\"), (5, \\"Hearts\\"), (6, \\"Hearts\\"), (7, \\"Hearts\\"), (9, \\"Diamonds\\"), (12, \\"Spades\\")] print(can_form_straight_flush(deck)) # returns \\"Straight Flush Found!\\" deck = [(3, \\"Hearts\\"), (4, \\"Hearts\\"), (5, \\"Diamonds\\"), (6, \\"Hearts\\"), (7, \\"Hearts\\"), (9, \\"Diamonds\\"), (12, \\"Spades\\")] print(can_form_straight_flush(deck)) # returns \\"No Straight Flush\\" ``` # Constraints - The deck will contain at least 5 cards and at most 52 cards. - The values 1 through 13 correspond to Ace through King, respectively. - There will be no duplicate cards in the deck.","solution":"from collections import defaultdict from typing import List, Tuple def can_form_straight_flush(deck: List[Tuple[int, str]]) -> str: # Organize cards by suit suits = defaultdict(list) for value, suit in deck: suits[suit].append(value) # Check each suit for possible straight flush for cards in suits.values(): cards.sort() if has_straight(cards): return \\"Straight Flush Found!\\" return \\"No Straight Flush\\" def has_straight(cards: List[int]) -> bool: n = len(cards) for i in range(n - 4): if cards[i + 4] - cards[i] == 4: return True return False"},{"question":"You are organizing a tournament and need to schedule matches for the teams. Each team will play exactly once against every other team. Given a list of teams, write a function that returns a list of all possible matches. Each match should be represented as a tuple containing two team names. The order of the matches and the order of the teams within each match does not matter. For example, given the list of teams [\\"Team A\\", \\"Team B\\", \\"Team C\\"], the function should return a list containing the tuples: ``` [(\\"Team A\\", \\"Team B\\"), (\\"Team A\\", \\"Team C\\"), (\\"Team B\\", \\"Team C\\")] ``` If the list of teams contains fewer than 2 teams, the function should return an empty list. **Constraints:** - The number of teams will not exceed 20. - The names of the teams will be unique. **Function Signature:** ```python def generate_matches(teams: List[str]) -> List[Tuple[str, str]]: pass ```","solution":"from typing import List, Tuple def generate_matches(teams: List[str]) -> List[Tuple[str, str]]: from itertools import combinations if len(teams) < 2: return [] return list(combinations(teams, 2))"},{"question":"Write a method to determine if a given year is a leap year. A leap year is exactly divisible by 4, except for years which are exactly divisible by 100, but these centurial years are leap years if they are exactly divisible by 400. Examples: ``` 2000 --> true (2000 is divisible by 400) 1996 --> true (1996 is divisible by 4 and not by 100) 1900 --> false (1900 is divisible by 100 and not by 400) 2021 --> false (2021 is not divisible by 4) ```","solution":"def is_leap_year(year): Determine if a given year is a leap year. Args: year (int): the year to check Returns: bool: True if the year is a leap year, False otherwise if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True else: return False"},{"question":"Design a function that takes a list of integers and returns a new list where each integer is replaced by the product of all the integers in the original list except for the integer at that position. Do not use division in your solution. # Example Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [4, 5, 1, 8, 2] Output: [80, 64, 320, 40, 160]","solution":"def product_except_self(nums): Returns a list where each element is the product of all other elements in the original list. length = len(nums) if length == 0: return [] left_products = [1] * length right_products = [1] * length result = [1] * length for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"Write a function that simulates the game of \\"FizzBuzz\\" for a given range of numbers. Specifically, your program should read two integers representing the start and end of the range (inclusive) and return a list of strings with the following conditions: - For numbers that are divisible by both 3 and 5, append \\"FizzBuzz\\" to the list. - For numbers that are divisible by only 3, append \\"Fizz\\" to the list. - For numbers that are divisible by only 5, append \\"Buzz\\" to the list. - For numbers that are not divisible by either 3 or 5, append the number itself to the list as a string.","solution":"def fizzbuzz(start, end): Returns a list of strings representing the FizzBuzz game results from start to end (inclusive). result = [] for num in range(start, end + 1): if num % 3 == 0 and num % 5 == 0: result.append(\\"FizzBuzz\\") elif num % 3 == 0: result.append(\\"Fizz\\") elif num % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(num)) return result"},{"question":"In a binary tree, each node contains an integer value. You are to determine the maximum sum of node values from any leaf node to the root node. Given such a binary tree, the path must start at a leaf node and end at the root node. A leaf node is defined as a node with no children. -----Input----- - The first line contains an integer N, the number of nodes in the binary tree. - The next N lines each contain three integers v, l, and r, where v is the value of the node, l is the index (1-based) of its left child (or -1 if it has no left child), and r is the index (1-based) of its right child (or -1 if it has no right child). The nodes are given in 1-based index order (node 1 is the root). -----Output----- - Output a single integer, the maximum sum from any leaf node to the root node. -----Constraints----- - 1 <= N <= 1000 - -1000 <= v <= 1000 -----Example----- Input: 5 1 2 3 2 -1 -1 3 4 -1 4 -1 -1 5 5 -1 Output: 9 Explanation: The tree can be visualized as follows: 1 / 2 3 / 4 / 5 The path with the maximum sum is 5 -> 4 -> 3 -> 1, with a sum of 5 + 4 + 3 + 1 = 13.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes): tree_nodes = [None] + [TreeNode(val=x[0]) for x in nodes] # create a list of nodes for i, (v, l, r) in enumerate(nodes, start=1): if l != -1: tree_nodes[i].left = tree_nodes[l] if r != -1: tree_nodes[i].right = tree_nodes[r] return tree_nodes[1] def max_sum_leaf_to_root(root): if not root: return 0 # If the node is a leaf node, return its value if not root.left and not root.right: return root.val # Recursively find the max sum from both subtrees left_sum = float(\'-inf\') if not root.left else max_sum_leaf_to_root(root.left) right_sum = float(\'-inf\') if not root.right else max_sum_leaf_to_root(root.right) # Return the max sum path till the current node return max(left_sum, right_sum) + root.val def max_sum_path(nodes): root = build_tree(nodes) return max_sum_leaf_to_root(root)"},{"question":"You are given an array A of N integers. Your task is to determine whether it is possible to make the array strictly increasing by removing exactly one element from the array. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". -----Constraints----- - 2 leq N leq 10^5 - 1 leq A[i] leq 10^9 -----Input----- Input is given from Standard Input in the following format: N A[1] A[2] ... A[N] -----Output----- Print \\"YES\\" if it is possible to make the array strictly increasing by removing exactly one element. Otherwise, print \\"NO\\". -----Sample Input----- 5 1 2 10 5 7 -----Sample Output----- YES By removing the element 10, the array becomes [1, 2, 5, 7] which is strictly increasing.","solution":"def can_be_strictly_increasing_by_removing_one_element(n, arr): Returns \\"YES\\" if it is possible to make the array strictly increasing by removing exactly one element. Otherwise, returns \\"NO\\". def is_strictly_increasing(subarr): for i in range(len(subarr) - 1): if subarr[i] >= subarr[i + 1]: return False return True # Find the first place where the array breaks the strictly increasing rule for i in range(n - 1): if arr[i] >= arr[i + 1]: # Check both options: removing current element or next element if is_strictly_increasing(arr[:i] + arr[i + 1:]) or is_strictly_increasing(arr[:i + 1] + arr[i + 2:]): return \\"YES\\" else: return \\"NO\\" return \\"YES\\" def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:])) print(can_be_strictly_increasing_by_removing_one_element(N, A))"},{"question":"A robotics competition is organized where multiple teams compete to construct the most efficient robot. Each team is given a set of tasks to complete, and each task has a certain execution time. The competition rules state that each team must choose a set of tasks such that the sum of the execution times is minimized, but must also ensure that the total execution time is at least a given threshold M. Your task is to determine the minimum execution time that matches this criterion for each team. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase consists of two lines: - The first line contains two integers N and M - N: the number of tasks - M: the minimum required execution time. - The second line contains N integers, representing the execution times of each task. -----Output:----- For each testcase, output a single line containing the minimum total execution time that is greater than or equal to M. If it\'s not possible to reach the threshold M, output -1. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 1000 - 1 leq M leq 10^5 - 1 leq text{Task Execution Times} leq 10^4 -----Sample Input:----- 2 5 12 1 2 3 4 5 4 15 8 3 5 7 -----Sample Output:----- 12 15 -----EXPLANATION:----- - For the first testcase, the minimum total execution time is achieved by choosing tasks with execution times [1, 5, 4, 2], summing to 12. - For the second testcase, the minimum total execution time to reach the threshold 15 is by selecting tasks [8, 7], summing to 15.","solution":"def min_execution_time(test_cases): from itertools import combinations results = [] for N, M, task_times in test_cases: possible_sums = set() for i in range(1, N + 1): for comb in combinations(task_times, i): total_time = sum(comb) if total_time >= M: possible_sums.add(total_time) if possible_sums: results.append(min(possible_sums)) else: results.append(-1) return results # Helper function to parse input data def parse_input(raw_data): lines = raw_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, M = map(int, lines[index].split()) task_times = list(map(int, lines[index + 1].split())) test_cases.append((N, M, task_times)) index += 2 return test_cases # Main function to process raw input and produce output def process_input_output(raw_data): test_cases = parse_input(raw_data) results = min_execution_time(test_cases) return \'n\'.join(map(str, results))"},{"question":"A forest contains N trees arranged in a line. Each tree has a height, and you are tasked with finding the total number of contiguous subarrays where the height of every tree in the subarray is less than or equal to H. Given the heights of all the trees and the value of H, compute the number of such subarrays. -----Input----- - The first line contains two integers N and H. - The second line contains N space-separated integers T_1, T_2, …, T_N denoting the heights of the trees. -----Output----- - Print a single integer, the number of contiguous subarrays where all tree heights are less than or equal to H. -----Constraints----- - 1 le N le 10^5 - 1 le T_i, H le 10^9 -----Example----- -----Sample Input:----- 5 3 1 2 3 4 5 -----Sample Output:----- 6 -----Explanation----- The subarrays are: - (1), (2), (3), which each contain one tree height less than or equal to 3. - (1, 2), (2, 3), which each contain two tree heights less than or equal to 3. - (1, 2, 3) which contains three tree heights less than or equal to 3. Thus, the number of contiguous subarrays is 3+2+1=6.","solution":"def count_subarrays(N, H, heights): count = 0 subarray_length = 0 for height in heights: if height <= H: subarray_length += 1 else: count += (subarray_length * (subarray_length + 1)) // 2 subarray_length = 0 # Add the count for the last subarray if it ends with heights less than or equal to H count += (subarray_length * (subarray_length + 1)) // 2 return count"},{"question":"You are given an undirected graph with N nodes and M edges. The nodes are labeled from 1 to N. Each edge has a length or weight associated with it. The goal is to determine if there is a path from node 1 to node N, in which the sum of the weights is equal to a given integer K. -----Input:----- - The first line of the input contains two integers N and M, denoting the number of nodes and edges in the graph respectively. - The next M lines each contain three integers u, v, and w, representing an edge between nodes u and v (u != v) with weight w. - The last line contains a single integer K, the target sum for the path\'s length. -----Output:----- Print \\"YES\\" if there exists a path from node 1 to node N with a total weight equal to K. Otherwise, print \\"NO\\". -----Constraints----- - 2 ≤ N ≤ 1000 - 1 ≤ M ≤ 10000 - 1 ≤ u, v ≤ N - 1 ≤ w ≤ 1000 - 1 ≤ K ≤ 10^6 -----Sample Input:----- 4 4 1 2 100 2 3 200 3 4 300 1 3 400 600 -----Sample Output:----- YES -----Explanation:----- A path from node 1 to node 4 with the weights 1 -> 3 -> 4 gives a sum of 400 + 300 = 700 which does not match the target K. However, there exists a direct path with sum 400 + 200 = 600 which matches the target hence the correct output is YES.","solution":"from collections import defaultdict, deque def is_path_with_weight(N, M, edges, K): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(): queue = deque([(1, 0)]) # (node, current_sum) visited = {1: {0}} while queue: node, current_sum = queue.popleft() for neighbor, weight in graph[node]: new_sum = current_sum + weight if new_sum == K and neighbor == N: return \'YES\' if new_sum < K and (neighbor not in visited or new_sum not in visited[neighbor]): if neighbor not in visited: visited[neighbor] = set() visited[neighbor].add(new_sum) queue.append((neighbor, new_sum)) return \'NO\' return bfs()"},{"question":"Write a function, `numericFilter` / `numeric-filter` / `numeric_filter` / `NumericFilter`, that takes an array of strings as an argument and returns a filtered array containing only the elements that represent valid numbers. A valid number is a string that can be converted to a floating-point or integer value. For example, if this array were passed as an argument: ```python [\\"123\\", \\"abc\\", \\"4.56\\", \\"78.9.0\\", \\"5e2\\", \\"NaN\\", \\"Infinity\\", \\"2\\"] ``` Your function would return the following array: ```python [\\"123\\", \\"4.56\\", \\"5e2\\", \\"2\\"] ``` The elements in the returned array should be in the same order as in the initial array passed to your function, but only include those strings that represent valid numbers. Note that the check should be case-insensitive for concepts like \\"NaN\\" and \\"Infinity\\", and strings that represent scientific notation (e.g., \\"5e2\\") should be included as valid numbers.","solution":"def numeric_filter(arr): Filters an array of strings and returns only valid numbers. Args: arr (list of str): The input array of strings. Returns: list of str: The filtered array containing only valid numbers. filtered_list = [] for item in arr: try: # Attempt to convert the string to a float num = float(item) # If conversion is successful, check for non-standard floats like NaN and Infinity if not (str(num).lower() == \'nan\' or str(num).lower() == \'inf\' or str(num).lower() == \'-inf\'): filtered_list.append(item) except ValueError: # Skip the item if it cannot be converted to a float continue return filtered_list"},{"question":"Farmer John has a simple game he likes to play with his cows. He gives them an integer s, which they use to generate a new sequence of positive integers. This new sequence is created by the following rule: if the given integer is even, divide it by 2; if it\'s odd, multiply it by 3 and add 1. The game continues generating the next value in the sequence from the newly generated value until the sequence reaches 1. The cows want to know how many steps it takes for the sequence to reach 1 starting from the given number s. Please write a program that will compute the number of steps for Farmer John\'s game to finish. -----Input----- The first line contains an integer t (1 ≤ t ≤ 100) - the number of test cases. Each of the next t lines contains a single integer s (1 ≤ s ≤ 10^6) for which you have to compute the number of steps it takes for the sequence to reach 1. -----Output----- The output should contain t lines. For each test case, output the number of steps it takes for the sequence to reach 1. -----Example----- Input 3 12 19 27 Output 9 20 111 -----Explanation----- For the first sample: The sequence starting from 12 is as follows: 12 → 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1. This sequence takes 9 steps to reach 1. For the second sample: The sequence starting from 19 is as follows: 19 → 58 → 29 → 88 → 44 → 22 → 11 → 34 → 17 → 52 → 26 → 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1. This sequence takes 20 steps to reach 1. For the third sample: As the sequence can be quite long for the given value, it totals to 111 steps to reach 1.","solution":"def steps_to_one(s): Returns the number of steps to reach 1 starting from s based on the described game rules. steps = 0 while s != 1: if s % 2 == 0: s //= 2 else: s = s * 3 + 1 steps += 1 return steps def process_test_cases(test_cases): Takes a list of integers and returns a list of steps required for each integer to reach 1. results = [] for s in test_cases: results.append(steps_to_one(s)) return results"},{"question":"A matrix is called \\"hourglass\\" if all its elements are in non-decreasing order both from left to right, and from top to bottom. For example, the following matrix is an hourglass matrix: ``` 1 2 3 4 5 6 7 8 9 ``` But the following matrix is not an hourglass matrix: ``` 1 3 2 4 5 6 7 8 9 ``` Your task is to determine if a given square matrix of integers is an hourglass matrix. Write a function `is_hourglass(matrix: List[List[int]]) -> bool` that takes a square matrix of integers as input and returns `True` if the matrix is an hourglass matrix, and `False` otherwise. **Note**: The input matrix will always be an `n x n` matrix with `1 <= n <= 1000`. Examples ```python matrix1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] assert is_hourglass(matrix1) == True matrix2 = [ [1, 3, 2], [4, 5, 6], [7, 8, 9] ] assert is_hourglass(matrix2) == False matrix3 = [ [1, 2], [2, 3] ] assert is_hourglass(matrix3) == True matrix4 = [ [1] ] assert is_hourglass(matrix4) == True ``` Implement the function `is_hourglass` to solve the problem.","solution":"from typing import List def is_hourglass(matrix: List[List[int]]) -> bool: Determines if a given square matrix of integers is an hourglass matrix. n = len(matrix) for i in range(n): for j in range(n): if i > 0 and matrix[i][j] < matrix[i-1][j]: return False if j > 0 and matrix[i][j] < matrix[i][j-1]: return False return True"},{"question":"Write a function that takes a string containing words separated by spaces and returns a new string where each word is replaced by its reverse. For example, ``` Input: \\"hello world\\" Output: \\"olleh dlrow\\" ``` Another example, ``` Input: \\"coding assessments are fun\\" Output: \\"gnidoc stnemssessa era nuf\\" ``` Considerations: - Ensure to maintain the original spacing and order of words in the output string. - The input string will only contain lowercase letters and spaces. - The input string will not have leading or trailing spaces.","solution":"def reverse_words(sentence): This function takes a string containing words separated by spaces and returns a new string where each word is replaced by its reverse. words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Create a function `filter_and_sort_names` that takes two parameters: a list of strings `names` and an integer `length_threshold`. The function should perform the following operations: 1. Filter the list to include only names that have a length greater than or equal to `length_threshold`. 2. Sort the filtered names in ascending alphabetical order. The function should return the sorted list of names. Example: - Input: `names = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eve\\"]`, `length_threshold = 4` - Output: `[\'Alice\', \'Charlie\', \'David\']` - Input: `names = [\\"Zara\\", \\"Ann\\", \\"Elizabeth\\", \\"Tom\\"]`, `length_threshold = 5` - Output: `[\'Elizabeth\']` Assume: `length_threshold` is always a positive integer.","solution":"def filter_and_sort_names(names, length_threshold): Filters the names with length greater than or equal to length_threshold and sorts them alphabetically. Parameters: names (list): List of strings representing names. length_threshold (int): The length threshold for filtering names. Returns: list: Sorted list of names filtered by the length_threshold. filtered_names = [name for name in names if len(name) >= length_threshold] return sorted(filtered_names)"},{"question":"The kingdom of ByteLand is growing rapidly, and the king has decided to build a new road network to connect all the cities and facilitate faster travel across the kingdom. You have been appointed as the chief planner, and your task is to determine the minimum number of new roads needed to make the kingdom\'s road network fully connected. ByteLand has n cities numbered from 1 to n, and there are some existing roads connecting certain pairs of cities. A road between city a and city b means that travel is possible directly between these two cities. The kingdom wishes to have a road network such that every city can be reached from any other city (i.e., the network is fully connected). Given the information about the existing roads, determine the minimum number of new roads needed to achieve this goal. -----Input----- The first line contains two integers n and m (2 le n le 1,000, 0 le m le frac{n cdot (n-1)}{2}) — the number of cities and the number of existing roads, respectively. The next m lines each contain two integers a and b (1 le a, b le n, a neq b) — representing a road between city a and city b. It is guaranteed that there can be at most one road between any pair of cities. -----Output----- Print one integer — the minimum number of new roads needed to make the network fully connected. -----Examples----- Input 4 2 1 2 3 4 Output 1 Input 3 1 1 2 Output 1 Input 5 0 Output 4 -----Note----- In the first example, the kingdom has four cities and two existing roads: one between city 1 and city 2, and another between city 3 and city 4. The minimum number of new roads needed to connect all cities is 1, connecting any of the cities from the first component (1, 2) to any of the cities from the second component (3, 4). In the second example, there are three cities but only one road connecting city 1 and city 2. The minimum number of new roads needed to connect all cities is 1, for example, by connecting city 2 to city 3. In the third example, there are five cities with no existing roads. To connect all cities, a minimum of 4 new roads is needed to create a fully connected network.","solution":"def find_min_new_roads(n, roads): Determine the minimum number of new roads needed to make the network fully connected. Parameters: n (int): Number of cities roads (list): List of tuples representing existing roads (city a, city b) Returns: int: Minimum number of new roads needed from collections import defaultdict, deque # Creating an adjacency list for the graph graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: city = queue.popleft() for neighbor in graph[city]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Counting the number of connected components num_connected_components = 0 for city in range(1, n + 1): if not visited[city]: bfs(city) num_connected_components += 1 # The minimum number of new roads needed is (num of connected components - 1) return num_connected_components - 1"},{"question":"Write a function that takes as input a string of digits and returns the largest number that can be formed by rearranging the digits. If the input string is empty or contains non-digit characters, the function should return an empty string. Ensure the function checks for invalid input and handles edge cases appropriately. Consider Python programming language for implementation. See examples below. **Examples:** - largest_number(\\"2736\\") ➞ \\"7632\\" - largest_number(\\"12345\\") ➞ \\"54321\\" - largest_number(\\"a2345\\") ➞ \\"\\" - largest_number(\\"\\") ➞ \\"\\"","solution":"def largest_number(digits): Returns the largest number that can be formed by rearranging the digits of the input string. If the input string is empty or contains non-digit characters, return an empty string. # Check if input is valid (non-empty and contains only digits) if not digits or not digits.isdigit(): return \\"\\" # Sort digits in descending order and join to form the largest number largest_num = \'\'.join(sorted(digits, reverse=True)) return largest_num"},{"question":"Write a function to calculate the k-th smallest element in an unsorted array of integers. Example: Input: [7, 10, 4, 3, 20, 15] k = 3 Output: 7 Explanation: The 3rd smallest element in the array is 7. Note: Your program should be efficient with regards to time complexity. You may assume that k is always valid, 1 ≤ k ≤ array\'s length.","solution":"import heapq def kth_smallest(arr, k): Returns the k-th smallest element in an unsorted array using a min-heap. :param arr: List[int] - The input list of integers. :param k: int - The k-th smallest element to find. :return: int - The k-th smallest element. # Convert the list into a heap in-place heapq.heapify(arr) # Extract the smallest element k-1 times for _ in range(k-1): heapq.heappop(arr) # The next element is the k-th smallest return heapq.heappop(arr)"},{"question":"Given a string containing comma-separated values of names and ages, sort the values first by names lexicographically and then by ages numerically. The names may have varying lengths and contain alphabetic characters only. ```Haskell sortNamesAndAges(\\"Alice,30;Bob,25;Charlie,20\\") = \\"Alice,30;Bob,25;Charlie,20\\" sortNamesAndAges(\\"Jane,45;Jake,30;Jake,25;Mike,35\\") = \\"Jake,25;Jake,30;Jane,45;Mike,35\\" ``` More examples in test cases. Good luck!","solution":"def sortNamesAndAges(s): Given a string containing comma-separated values of names and ages, sort the values first by names lexicographically and then by ages numerically. :param s: str - input string containing names and ages :return: str - sorted string entries = s.split(\';\') parsed_entries = [(entry.split(\',\')[0], int(entry.split(\',\')[1])) for entry in entries] sorted_entries = sorted(parsed_entries, key=lambda x: (x[0], x[1])) sorted_entries_str = [f\\"{name},{age}\\" for name, age in sorted_entries] return \';\'.join(sorted_entries_str)"},{"question":"Write a function that takes a string containing digits from 2-9 inclusive and returns all possible letter combinations that the number could represent, using the mapping of digits to letters on a typical telephone keypad (1 does not map to any letters). Example: Input: \\"23\\" Output: [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] Note: The input will be an empty string (\\"\\") or a string consisting of digits, and the output should be an empty list for an empty input string.","solution":"def letter_combinations(digits): Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the digits could represent based on the classic telephone keypad. if not digits: return [] phone_map = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(combination, next_digits): if not next_digits: combinations.append(combination) else: for letter in phone_map[next_digits[0]]: backtrack(combination + letter, next_digits[1:]) combinations = [] backtrack(\\"\\", digits) return combinations"},{"question":"Casting a spell: Spell Word Generator Brief You are learning ancient spells and you need to generate a specific word by manipulating a given alphabet string. You need to create a function `generate_spell_word` that will determine if the target spell word can be formed by the given sequence of characters. Specifications You\'ll be given: * A `string` containing the `alphabet` characters you can use to form the word. * A `string` with the `target_word` you need to generate. You need to return a `boolean` indicating whether you can generate the exact `target_word` using all characters in the `alphabet`. Constraints * You can use each character in the `alphabet` list only once. * The characters are case-sensitive (\'A\' and \'a\' are different). * The `alphabet` string will have at most 100 characters. * The `target_word` string will have at most 50 characters. Example ```python alphabet = \'bcadappqz\' target_word = \'cap\' generate_spell_word(alphabet, target_word) == True alphabet = \'bcadappqz\' target_word = \'zap\' generate_spell_word(alphabet, target_word) == True alphabet = \'bcadappqz\' target_word = \'zapz\' generate_spell_word(alphabet, target_word) == False alphabet = \'bcadappqz\' target_word = \'Cat\' generate_spell_word(alphabet, target_word) == False ```","solution":"def generate_spell_word(alphabet, target_word): Determines if the target spell word can be formed by the given sequence of characters. Parameters: alphabet (string): The string containing the alphabet characters. target_word (string): The string of the target word to generate. Returns: boolean: True if the target word can be generated, False otherwise. from collections import Counter alphabet_count = Counter(alphabet) target_count = Counter(target_word) for char in target_count: if target_count[char] > alphabet_count.get(char, 0): return False return True"},{"question":"=====Function Descriptions===== The `base64` module in Python provides utilities for encoding binary data in ASCII text. class base64.b64encode(input[, altchars]) Encode the bytes-like object `input` using Base64 and return the encoded bytes. Sample Code >>> import base64 >>> >>> encoded = base64.b64encode(b\'hello world\') >>> print(encoded) b\'aGVsbG8gd29ybGQ=\' =====Problem Statement===== You are given a string encoded using Base64. Your task is to decode the string and print the original text. =====Input Format===== A single line of input containing a Base64 encoded string. =====Constraints===== The input string is guaranteed to be a valid Base64 encoded string. The decoded text will be a non-empty string consisting of printable ASCII characters. =====Output Format===== Output the decoded string.","solution":"import base64 def decode_base64(encoded_str): Decode a Base64 encoded string and return the original text. Args: encoded_str (str): A Base64 encoded string. Returns: str: The decoded original text. decoded_bytes = base64.b64decode(encoded_str) return decoded_bytes.decode(\'utf-8\')"},{"question":"Overview Palindromes are numbers or phrases that read the same backward as forward (ignoring spaces, punctuation, and capitalization). This task focuses on palindromic numbers. Palindromic Primes A palindromic prime is a prime number that is also a palindrome. For example, 131 is a palindromic prime because it is both a prime number and a palindrome. Your task Write a function that takes in an integer `n` and returns the smallest palindromic prime greater than or equal to `n`. Definitions: - A **prime number** is a natural number greater than 1 that has no positive divisors other than 1 and itself. - A **palindrome** is a number that reads the same backward as forward. Input - A single integer `n` where `1 ≤ n ≤ 10^6`. Output - Return the smallest palindromic prime greater than or equal to `n`. Examples - For `n = 31`, the function should return `131`. - For `n = 10`, the function should return `11`. - For `n = 130`, the function should return `131`. - For `n = 100`, the function should return `101`. Notes - There are multiple ways to check if a number is a palindrome and if it is prime. - Consider optimizing your solution for performance, especially since `n` can be as large as `10^6`.","solution":"def is_prime(num): Check if a number is a prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def is_palindrome(num): Check if a number is a palindrome. return str(num) == str(num)[::-1] def smallest_palindromic_prime(n): Return the smallest palindromic prime greater than or equal to n. while True: if is_palindrome(n) and is_prime(n): return n n += 1"},{"question":"# Problem Context You are provided with an array of integers and a target value. Your task is to determine if there are two distinct numbers in the array that add up to the target value. Write a function that returns a boolean indicating whether or not such a pair exists in the array. The function should have the following signature: ```python def has_pair_with_sum(arr, target): pass ``` **Examples:** ```python has_pair_with_sum([1, 2, 3, 9], 8) # should return False has_pair_with_sum([1, 2, 4, 4], 8) # should return True ``` **Background:** The naive solution involves checking all pairs of numbers in the array, which results in a time complexity of O(n^2). Your objective is to improve this solution to have a better time complexity. **Hint:** Consider using a data structure that supports fast look-up operations.","solution":"def has_pair_with_sum(arr, target): Determines if there are two distinct numbers in the array that add up to the target value. seen_numbers = set() for number in arr: if target - number in seen_numbers: return True seen_numbers.add(number) return False"},{"question":"Write a function that takes a list of integers and returns the largest possible integer that can be made by concatenating their string representations together. If the list is empty, return an empty string. The function should handle large lists efficiently. # Input - A list of non-negative integers. # Output - The largest possible integer as a string. # Example Input ``` [10, 2] ``` Output ``` \\"210\\" ``` Input ``` [3, 30, 34, 5, 9] ``` Output ``` \\"9534330\\" ``` # Notes - The function should always return a string. - Zero is considered a non-negative integer. - Leading zeros should be omitted in the final output (e.g., \\"00\\" should become \\"0\\").","solution":"from functools import cmp_to_key def largest_number(nums): if not nums: return \\"\\" def compare(a, b): return (a + b > b + a) - (a + b < b + a) nums = list(map(str, nums)) nums.sort(key=cmp_to_key(compare), reverse=True) result = \'\'.join(nums) return \'0\' if result[0] == \'0\' else result"},{"question":"You are given a string of digits (with no spaces) representing a large number and your task is to find the largest multiple of 3 that can be formed by removing zero or more digits from this number. If it\'s not possible to form such a multiple, return `-1`. # Example Consider the string `\\"8409371625\\"`. - Valid multiples of 3 that can be formed include: `\\"840963\\"`, `\\"840962\\"`, `\\"84096\\"`, etc. - The largest of these multiples is `\\"9638250\\"`, which is formed by demonstrating that `9 + 6 + 3 + 8 + 2 + 5 + 0 = 33` is divisible by 3. # Input - A string `digits` (1 <= len(digits) <= 10^6) containing digits `0-9`. # Output - The largest multiple of 3 as a string, or `-1` if no such multiple exists. # Function Signature ```python def largest_multiple_of_3(digits: str) -> str: # implementation here ``` # Example Use ```python print(largest_multiple_of_3(\\"8409371625\\")) # Output: \\"9638250\\" print(largest_multiple_of_3(\\"102\\")) # Output: \\"21\\" print(largest_multiple_of_3(\\"123456\\")) # Output: \\"654321\\" print(largest_multiple_of_3(\\"222\\")) # Output: \\"222\\" print(largest_multiple_of_3(\\"1\\")) # Output: \\"-1\\" ``` # Note - Remember to handle large input efficiently. - Focus on understanding divisibility rules for 3, particularly the sum of digits.","solution":"def largest_multiple_of_3(digits: str) -> str: from collections import Counter digit_count = Counter(digits) digits_sum = sum(int(d) for d in digits) mod = digits_sum % 3 if mod != 0: remainder_digits = [[], [], []] for digit in digits: remainder_digits[int(digit) % 3].append(digit) if mod == 1: if remainder_digits[1]: digit_to_remove = remainder_digits[1][0] digit_count[digit_to_remove] -= 1 else: if len(remainder_digits[2]) >= 2: digit_to_remove_1, digit_to_remove_2 = remainder_digits[2][:2] digit_count[digit_to_remove_1] -= 1 digit_count[digit_to_remove_2] -= 1 else: return \\"-1\\" elif mod == 2: if remainder_digits[2]: digit_to_remove = remainder_digits[2][0] digit_count[digit_to_remove] -= 1 else: if len(remainder_digits[1]) >= 2: digit_to_remove_1, digit_to_remove_2 = remainder_digits[1][:2] digit_count[digit_to_remove_1] -= 1 digit_count[digit_to_remove_2] -= 1 else: return \\"-1\\" result_digits = [] for digit in \'9876543210\': result_digits.extend([digit] * digit_count[digit]) if result_digits and result_digits[0] != \'0\': return \'\'.join(result_digits) elif result_digits: return \\"0\\" return \\"-1\\""},{"question":"Create a function to evaluate the performance of students in a coding class. We have a preloaded list of assessments each student has taken: ```python assessments = [\'Quiz 1\', \'Quiz 2\', \'Quiz 3\', \'Assignment 1\', \'Assignment 2\', \'Midterm\', \'Project\', \'Final Exam\'] ``` You are given a list of students where each student is represented by a dictionary containing their name and a dictionary of their scores across the assessments. For instance, a class of three students might look like this: ```python students = [ {\'name\': \'Alice\', \'scores\': {\'Quiz 1\': 85, \'Quiz 2\': 90, \'Quiz 3\': 80, \'Assignment 1\': 75, \'Assignment 2\': 70, \'Midterm\': 88, \'Project\': 95, \'Final Exam\': 92}}, {\'name\': \'Bob\', \'scores\': {\'Quiz 1\': 78, \'Quiz 2\': 85, \'Quiz 3\': 88, \'Assignment 1\': 80, \'Assignment 2\': 78, \'Midterm\': 82, \'Project\': 87, \'Final Exam\': 85}}, {\'name\': \'Charlie\', \'scores\': {\'Quiz 1\': 90, \'Quiz 2\': 92, \'Quiz 3\': 85, \'Assignment 1\': 80, \'Assignment 2\': 72, \'Midterm\': 85, \'Project\': 90, \'Final Exam\': 88}} ] ``` Your function will take this list of students and perform two tasks: 1. Calculate each student\'s average score across all assessments. 2. Determine the highest-scoring student based on their average score. The function should return a dictionary where each key is a student\'s name and the value is a tuple containing their average score and a phrase indicating whether they are the highest-scoring student or not. For example: ```python { \'Alice\': (84.375, \'Not the highest-scoring student\'), \'Bob\': (82.875, \'Not the highest-scoring student\'), \'Charlie\': (85.25, \'Highest-scoring student\') } ``` Note: - If multiple students have the highest average score, all of them should be marked as the \\"Highest-scoring student\\". - Ensure that the average score is rounded to two decimal places in the output.","solution":"def evaluate_students_performance(students): results = {} highest_avg = float(\'-inf\') for student in students: name = student[\'name\'] scores = student[\'scores\'] avg_score = round(sum(scores.values()) / len(scores), 2) results[name] = (avg_score, \'Not the highest-scoring student\') if avg_score > highest_avg: highest_avg = avg_score # Check if any student matches the highest average for student in students: if results[student[\'name\']][0] == highest_avg: results[student[\'name\']] = (highest_avg, \'Highest-scoring student\') return results"},{"question":"# Task Given a positive integer `n`, return an array of all prime numbers less than `n`. Prime numbers are greater than 1 and have no positive divisors other than 1 and themselves. # Example For `n = 10`, the output should be `[2, 3, 5, 7]`. For `n = 20`, the output should be `[2, 3, 5, 7, 11, 13, 17, 19]`. For `n = 5`, the output should be `[2, 3]`. # Input/Output - `[input]` integer `n` `1 ≤ n ≤ 10^6`. - `[output]` an array of integers representing the prime numbers less than `n`.","solution":"def list_primes(n): Returns a list of all prime numbers less than n. Parameters: - n (int): The upper limit (exclusive) for prime numbers. Returns: - list: A list of prime numbers less than n. if n <= 2: return [] is_prime = [True] * n is_prime[0], is_prime[1] = False, False for start in range(2, int(n ** 0.5) + 1): if is_prime[start]: for multiple in range(start*start, n, start): is_prime[multiple] = False return [num for num in range(n) if is_prime[num]]"},{"question":"Create a function that takes a list of strings `words` and an integer `k` and returns the top `k` most frequent words. The order of the returned list should be according to the frequency of words, from highest to lowest. If two words have the same frequency, then the word with the higher alphabetical order comes first. You may use the provided code and test cases as a guide. Example: ```python from collections import Counter import heapq def top_k_frequent(words, k): count = Counter(words) heap = [(-freq, word) for word, freq in count.items()] heapq.heapify(heap) result = [] for _ in range(k): result.append(heapq.heappop(heap)[1]) return result # Test cases print(top_k_frequent([\\"i\\", \\"love\\", \\"leetcode\\", \\"i\\", \\"love\\", \\"coding\\"], 2)) # should return [\'i\', \'love\'] print(top_k_frequent([\\"the\\", \\"day\\", \\"is\\", \\"sunny\\", \\"the\\", \\"the\\", \\"the\\", \\"sunny\\", \\"is\\", \\"is\\"], 4)) # should return [\'the\', \'is\', \'sunny\', \'day\'] print(top_k_frequent([\\"a\\", \\"aa\\", \\"aaa\\"], 2)) # should return [\'a\', \'aa\'] ```","solution":"from collections import Counter import heapq def top_k_frequent(words, k): Returns the top k most frequent words from the list `words`. If two words have the same frequency, the word with the higher alphabetical order comes first. count = Counter(words) heap = [(-freq, word) for word, freq in count.items()] heapq.heapify(heap) result = [] for _ in range(k): result.append(heapq.heappop(heap)[1]) return result"},{"question":"Given a list of people who have each guessed a number between 1 and 100, you need to determine how many people guessed correctly. You are also given the correct number. Return the percentage of correct guesses (as a rounded int) among all participants. Input: - An integer `correctNumber` (1 <= correctNumber <=100), representing the correct guessed number. - A list of integers `guesses`, where each element in the list is a guess made by a participant. Output: - An integer representing the percentage of correct guesses rounded to the nearest integer. Example: ```python correctNumber = 42 guesses = [10, 42, 57, 42, 99] ``` The function should return: ```python 40 ```","solution":"def percentage_correct_guesses(correctNumber, guesses): Returns the percentage of correct guesses rounded to the nearest integer. Args: correctNumber (int): The correct guessed number. guesses (list of int): A list of guesses made by participants. Returns: int: Percentage of correct guesses rounded to the nearest integer. if not guesses: return 0 # If there are no guesses, return 0%. num_correct = sum(1 for guess in guesses if guess == correctNumber) percentage_correct = (num_correct / len(guesses)) * 100 return round(percentage_correct)"},{"question":"Write a function that takes a string as input and returns a dictionary where the keys are the unique characters in the string, and the values are their respective counts. # Examples ```python char_count(\'hello\') == {\'h\': 1, \'e\': 1, \'l\': 2, \'o\': 1} char_count(\'apple\') == {\'a\': 1, \'p\': 2, \'l\': 1, \'e\': 1} ```","solution":"def char_count(s): Returns a dictionary with the count of each unique character in the input string s. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"# Task Write a function that takes two integer arguments, `a` and `b`, and returns the number of unique digits that appear in the product of `a` and `b`. Example For `a = 12` and `b = 34`, the product is `408`, and the unique digits are `4, 0, 8`. So the result should be `3`. For `a = 5` and `b = 25`, the product is `125`, and the unique digits are `1, 2, 5`. So, the result should be `3`. For `a = 0` and `b = 100`, the product is `0`, and the unique digit is `0`. So, the result should be `1`. Input/Output - `[input]` integer `a` `0 <= a <= 10^5` - `[input]` integer `b` `0 <= b <= 10^5` - `[output]` an integer The number of unique digits that appear in the product of `a` and `b`.","solution":"def unique_digits_count(a, b): Returns the number of unique digits in the product of a and b. product = a * b unique_digits = set(str(product)) return len(unique_digits)"},{"question":"You are tasked with implementing a text-based rule-based sentiment analysis function. The function should be able to determine if a given text string is positive or negative. # Input The function `analyze_sentiment(text: str) -> str` will be passed a single string, `text`, which contains a short, single sentence. # Output The function should return a string: `\\"Positive\\"` if the sentiment of the text is positive, or `\\"Negative\\"` if the sentiment of the text is negative. # Constraints 1. Certain words are pre-defined to help determine the sentiment: - Positive words: `\\"good\\"`, `\\"happy\\"`, `\\"excellent\\"`, `\\"fantastic\\"`, `\\"great\\"` - Negative words: `\\"bad\\"`, `\\"sad\\"`, `\\"horrible\\"`, `\\"terrible\\"`, `\\"poor\\"` 2. If the text contains more positive words than negative words, the sentiment is `\\"Positive\\"`. 3. If the text contains more negative words than positive words, the sentiment is `\\"Negative\\"`. 4. Text will contain only lowercase letters and spaces. # Example ```python analyze_sentiment(\\"this is a fantastically good day\\") # Output: \'Positive\' analyze_sentiment(\\"this is a horrible and terrible experience\\") # Output: \'Negative\' ``` # Note - The function should not use any external libraries for sentiment analysis. Only standard Python libraries are allowed. - If the count of positive and negative words are equal, you can return either `\\"Positive\\"` or `\\"Negative\\"`.","solution":"def analyze_sentiment(text: str) -> str: Determines if the sentiment of the given text is positive or negative. Parameters: text (str): The text string to analyze. Returns: str: \\"Positive\\" if the sentiment is positive, \\"Negative\\" if the sentiment is negative. positive_words = {\\"good\\", \\"happy\\", \\"excellent\\", \\"fantastic\\", \\"great\\"} negative_words = {\\"bad\\", \\"sad\\", \\"horrible\\", \\"terrible\\", \\"poor\\"} positive_count = sum(1 for word in text.split() if word in positive_words) negative_count = sum(1 for word in text.split() if word in negative_words) if positive_count > negative_count: return \\"Positive\\" else: return \\"Negative\\""},{"question":"Given an array of integers, write a function that returns the smallest positive integer that does not appear in the array. Your solution should have a linear runtime complexity (O(n)) and should use constant extra space (O(1)). Examples ``` [1, 2, 0] ==> 3 [3, 4, -1, 1] ==> 2 [7, 8, 9, 11, 12] ==> 1 ```","solution":"def first_missing_positive(nums): Returns the smallest positive integer that does not appear in the array. n = len(nums) # Place each number in its right place for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap the numbers to their correct positions nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Identify the first missing positive number for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"A company has an internal message system where employees exchange messages. Each message can be considered as an entry in a database, represented by a tuple (id, sender, receiver, timestamp, text). You are assigned to implement a function that retrieves the most recent message for each unique sender within a given date range. The function should take the following arguments: - `messages`: A list of tuples, where each tuple contains information about a message. - `start_date`: A string representing the start of the date range in the format \\"yyyy-mm-dd\\". - `end_date`: A string representing the end of the date range in the format \\"yyyy-mm-dd\\". The function should return a dictionary where each key is a sender and the value is the most recent message (represented by a tuple containing the same elements as the input tuples) sent by that sender within the specified date range. If a sender did not send any messages within the specified date range, they should not appear in the resulting dictionary. The messages are guaranteed to be unique by their id. -----Constraints----- - All dates are valid Gregorian calendar dates. - The number of messages will not exceed 10^5. - The length of the text in any message will not exceed 500 characters. -----Input----- The input is given as a function call with the following signature: ```python def get_most_recent_messages(messages: List[Tuple[int, str, str, str, str]], start_date: str, end_date: str) -> Dict[str, Tuple[int, str, str, str, str]]: ``` -----Output----- A dictionary with the most recent message from each sender within the date range. -----Sample Input----- ```python messages = [ (1, \\"Alice\\", \\"Bob\\", \\"2023-01-15\\", \\"Hello!\\"), (2, \\"Alice\\", \\"David\\", \\"2023-01-16\\", \\"Hi there!\\"), (3, \\"Eve\\", \\"Bob\\", \\"2023-01-17\\", \\"Greetings!\\"), (4, \\"Alice\\", \\"Bob\\", \\"2023-01-20\\", \\"Goodbye!\\"), (5, \\"Eve\\", \\"Alice\\", \\"2023-01-22\\", \\"See you!\\") ] start_date = \\"2023-01-15\\" end_date = \\"2023-01-20\\" ``` -----Sample Output----- ```python { \\"Alice\\": (4, \\"Alice\\", \\"Bob\\", \\"2023-01-20\\", \\"Goodbye!\\"), \\"Eve\\": (3, \\"Eve\\", \\"Bob\\", \\"2023-01-17\\", \\"Greetings!\\") } ```","solution":"from typing import List, Tuple, Dict from datetime import datetime def get_most_recent_messages(messages: List[Tuple[int, str, str, str, str]], start_date: str, end_date: str) -> Dict[str, Tuple[int, str, str, str, str]]: Retrieves the most recent message for each unique sender within a given date range. Args: - messages (List[Tuple[int, str, str, str, str]]): List of message tuples. - start_date (str): Start date in the format \\"yyyy-mm-dd\\". - end_date (str): End date in the format \\"yyyy-mm-dd\\". Returns: - Dict[str, Tuple[int, str, str, str, str]]: Dictionary of most recent messages per sender within the date range. # Parse the start and end dates start_date = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_date = datetime.strptime(end_date, \\"%Y-%m-%d\\") # Initialize a dictionary to store the most recent message for each sender most_recent_messages_by_sender = {} for message in messages: message_date = datetime.strptime(message[3], \\"%Y-%m-%d\\") if start_date <= message_date <= end_date: sender = message[1] if sender not in most_recent_messages_by_sender: most_recent_messages_by_sender[sender] = message else: current_most_recent_message = most_recent_messages_by_sender[sender] current_most_recent_message_date = datetime.strptime(current_most_recent_message[3], \\"%Y-%m-%d\\") if message_date > current_most_recent_message_date: most_recent_messages_by_sender[sender] = message return most_recent_messages_by_sender"},{"question":"# Emergency Alerts Email Notices System In a large organization, there\'s a system that sends out email alerts to employees when emergency situations occur. However, due to recent updates, it has been observed that some employees receive duplicate emails for the same alert. Your task is to write a program to clean up these duplicates. Specifically, given a list of email alerts, clean up the list by removing all the duplicate alerts, retaining only the first occurrence of each alert. # Task Given a list of email alert strings, remove duplicates, keeping only the first occurrence of each string. The order of the remaining alerts should be the same as their initial appearance in the list. # Examples ```python remove_duplicates([\\"Alert 1\\", \\"Alert 2\\", \\"Alert 1\\", \\"Alert 3\\"]) = [\\"Alert 1\\", \\"Alert 2\\", \\"Alert 3\\"] remove_duplicates([\\"Fire\\", \\"Intruder\\", \\"Fire\\", \\"Flood\\", \\"Flood\\"]) = [\\"Fire\\", \\"Intruder\\", \\"Flood\\"] remove_duplicates([\\"System Update\\", \\"System Update\\", \\"Meeting Reminder\\"]) = [\\"System Update\\", \\"Meeting Reminder\\"] ``` # Constraints 1. The input list will contain at most 1000 email alerts. 2. Each email alert is a string of alphanumeric characters and spaces, with a length of at most 100 characters.","solution":"def remove_duplicates(email_alerts): Removes duplicate email alerts, keeping only the first occurrence of each string. :param email_alerts: List of email alert strings. :return: A list of email alert strings with duplicates removed. seen = set() unique_alerts = [] for alert in email_alerts: if alert not in seen: seen.add(alert) unique_alerts.append(alert) return unique_alerts"},{"question":"# Task You are working on a software which simulates a database of records. Each record consists of a name and a timestamp. One of the operations that you need to implement is to find the first `k` records starting from a given timestamp. Implement a function `find_k_records(records, timestamp, k)` that returns a list consisting of the first `k` records starting from the given timestamp, in the order they appear in the list. If there are fewer than `k` records starting from the given timestamp, return all of them. # Input/Output `[input]` list of records `records` Array of tuples, where each tuple contains a name (string) and a timestamp (integer). The array is sorted in ascending order based on timestamps. `0 ≤ len(records) ≤ 1000` `[input]` integer `timestamp` A timestamp from which to start listing the records. `0 ≤ timestamp ≤ 10^9` `[input]` integer `k` An integer, the number of records to return. `1 ≤ k ≤ 100` `[output]` a list of tuples A list containing the first `k` records starting from the given timestamp. # Example For `records = [(\\"Alice\\", 1), (\\"Bob\\", 2), (\\"Carol\\", 3), (\\"Dave\\", 5)]`, `timestamp = 2` and `k = 2`, the output should be `[(\\"Bob\\", 2), (\\"Carol\\", 3)]`. Starting from timestamp 2, the first 2 records are `(\\"Bob\\", 2)` and `(\\"Carol\\", 3)`. For `records = [(\\"Alice\\", 1), (\\"Bob\\", 2), (\\"Carol\\", 3), (\\"Dave\\", 5)]`, `timestamp = 4` and `k = 3`, the output should be `[(\\"Dave\\", 5)]`. Only `(\\"Dave\\", 5)` is available starting from timestamp 4, thus all of them are returned.","solution":"def find_k_records(records, timestamp, k): Returns the first k records starting from the given timestamp. Parameters: records: List[Tuple[str, int]] - List of records where each record is a tuple of (name, timestamp) timestamp: int - The timestamp to start searching from k: int - The number of records to return Returns: List[Tuple[str, int]] - List of the first k records starting from the given timestamp result = [] for record in records: if record[1] >= timestamp: result.append(record) if len(result) == k: break return result"},{"question":"You are given a string s consisting of lowercase English letters and an integer k (1 le k le |s| le 1000). You need to determine if you can obtain a string that consists of exactly k distinct characters by deleting some (or none) of the characters from s. For example, for s = \\"abcabc\\" and k = 2, you can obtain the string \\"ab\\" by deleting the last three characters. -----Input----- The first line contains an integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. Each test case consists of a string s and an integer k, where s is a non-empty string of lowercase English letters and k is the required number of distinct characters. -----Output----- For each test case, print: \\"YES\\" if it is possible to obtain a string with exactly k distinct characters, or \\"NO\\" if it is not possible. -----Example----- Input 4 abcabc 2 abcd 5 aaaa 1 xyz 3 Output YES NO YES YES","solution":"def can_obtain_k_distinct_characters(s, k): Determines if a string `s` can be reduced to exactly `k` distinct characters. Parameters: s (str): The input string k (int): The desired number of distinct characters Returns: str: \\"YES\\" if it\'s possible, \\"NO\\" otherwise. distinct_characters = set(s) if len(distinct_characters) >= k: return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): results = [] for s, k in test_cases: results.append(can_obtain_k_distinct_characters(s, k)) return results"},{"question":"=====Function Description===== spread_frequency(text) This function should calculate the frequency of each character in a given string and return a list of tuples. Each tuple should contain a character and its frequency, sorted by frequency in descending order. In the case of a tie in frequency, the characters should be sorted in alphabetical order. =====Problem Statement===== You are given a string, `text`. Your task is to write a function `spread_frequency(text)` that computes the frequency of each character in the string and returns a list of tuples sorted by frequency in descending order. If two characters have the same frequency, they should be sorted alphabetically. =====Input Format===== A single line containing the string `text`. =====Output Format===== Return a list of tuples, each containing a character and its frequency, sorted by frequency in descending order. If two characters have the same frequency, they should be sorted alphabetically. =====Sample Input===== ``` apple pie ``` =====Sample Output===== ``` [(\' \', 1), (\'a\', 1), (\'e\', 2), (\'i\', 1), (\'l\', 1), (\'p\', 3)] ```","solution":"def spread_frequency(text): from collections import Counter # Calculate the character frequencies frequency = Counter(text) # Create a sorted list of tuples sorted_frequency = sorted(frequency.items(), key=lambda x: (-x[1], x[0])) return sorted_frequency"},{"question":"=====Problem Statement===== You are given two strings, S1 and S2. Determine the minimum number of deletions required to make the two strings anagrams of each other. Two strings are anagrams if they can be rearranged to form the same word. =====Input Format===== The input contains two lines: - The first line contains the string S1. - The second line contains the string S2. =====Constraints===== 1 ≤ Length of S1, S2 ≤ 10^5 S1 and S2 contain only lowercase English alphabets. =====Output Format===== Output a single integer denoting the minimum number of deletions required. =====Example===== Input: cde abc Output: 4 Explanation: We need to remove \'d\' and \'e\' from \\"cde\\" and \'a\' and \'b\' from \\"abc\\" to make them anagrams of each other.","solution":"from collections import Counter def min_deletions_to_make_anagrams(S1, S2): Determine the minimum number of deletions required to make the two strings anagrams of each other. # Count the frequency of each character in both strings count1 = Counter(S1) count2 = Counter(S2) # Calculate the number of deletions needed deletions = 0 # For characters present in the first string (S1) for char in count1: if char in count2: deletions += abs(count1[char] - count2[char]) else: deletions += count1[char] # For characters present in the second string (S2) but not in the first string (S1) for char in count2: if char not in count1: deletions += count2[char] return deletions"},{"question":"A rectangular pool W units wide and H units high contains n square tiles each of width T. Each tile fully fits within the pool. You are required to find how many different ways there are to completely tile the pool using the tiles. The tiles can be rotated if necessary. -----Input----- The first line contains three integers W, H, and T (1 le W, H le 10^9, 1 le T le min(W, H)) — the width of the pool, the height of the pool, and the width of each square tile. -----Output----- Print the number of different ways to completely tile the pool. -----Examples----- Input 6 4 2 5 5 1 Output 1 1 -----Explanation----- In the first example, you can place 6 tiles vertically or 6 tiles horizontally. Therefore, there is exactly 1 way to tile the pool. In the second example, since the individual tiles are width 1, there are no further considerations needed. There is 1 way to completely tile the pool.","solution":"def count_tiling_ways(W, H, T): # Check if the pool can be tiled perfectly by width and height if W % T != 0 or H % T != 0: return 0 width_tiles = W // T height_tiles = H // T # There is only one way to tile the pool, regardless of the arrangement return 1"},{"question":"Write a function that takes two lists as input, `list1` and `list2`, and returns a new list that contains only the elements that are present in both input lists. Example Given the following lists: ```python list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6, 7, 8] ``` The function should return: ```python [4, 5] ``` Guidelines - The elements in the resultant list should be unique (no duplicates). - The order of elements in the resultant list should follow the same order in which they appear in `list1`. - You can assume that both input lists contain only integers.","solution":"def common_elements(list1, list2): Returns a list of unique elements that are present in both list1 and list2. The elements are returned in the order they appear in list1. set_list2 = set(list2) result = [] seen = set() for elem in list1: if elem in set_list2 and elem not in seen: result.append(elem) seen.add(elem) return result"},{"question":"Given a matrix of integers, where each cell in the matrix contains a certain number of coins, your task is to write a function that finds the maximum number of coins you can collect by following a path from the top-left corner to the bottom-right corner of the matrix. You can only move to the right or down in the path. You will be given the matrix as a 2D list of integers. For example, given the following matrix: ``` [ [0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1] ] ``` The maximum number of coins you can collect is 12, following the path 0 -> 3 -> 1 -> 4 -> 1 -> 3. Write a function `maxCoins(matrix)` that takes a 2D list of integers as input and returns the maximum number of coins that can be collected. The matrix will have at least one row and one column, and the number of rows and columns will not exceed 100. # Constraints: - The number of rows (R) and columns (C) in the matrix will be between 1 and 100 (1 ≤ R, C ≤ 100). - Each cell in the matrix (matrix[i][j]) will contain a non-negative integer (0 ≤ matrix[i][j] ≤ 100). # Example ```python def maxCoins(matrix): # Your code here # Example call matrix = [ [0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1] ] print(maxCoins(matrix)) # Output: 12 ```","solution":"def maxCoins(matrix): rows = len(matrix) cols = len(matrix[0]) # Create a 2D DP array dp = [[0] * cols for _ in range(rows)] dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, cols): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column for i in range(1, rows): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the DP array for i in range(1, rows): for j in range(1, cols): dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i][j-1]) return dp[rows-1][cols-1]"},{"question":"Task: Write a function `compress_string` that takes a string and compresses it using the count of repeated characters. The function should return a compressed string where each group of consecutive identical characters is replaced by the character followed by the count of consecutive repetitions. If the length of the compressed string is not less than the original string, return the original string instead. Note: * The input string will contain only uppercase and lowercase letters. Examples: ``` compress_string(\'aabcccccaaa\') => \'a2b1c5a3\' compress_string(\'abcdef\') => \'abcdef\' compress_string(\'aabbcc\') => \'aabbcc\' compress_string(\'aaaabbbbccdde\') => \'a4b4c2d2e1\' ```","solution":"def compress_string(s): if not s: return s compressed = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: compressed.append(current_char + str(count)) current_char = char count = 1 compressed.append(current_char + str(count)) # Append the last group compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Write a program that identifies all the unique anagrams of a given string found within a dictionary of words. Given a string and a list of words (the dictionary), determine which words are anagrams of the string. Your function should return the list of anagrams sorted in alphabetical order. All inputs will be valid, and all comparisons should be case-sensitive. ```python # Example Input: # find_anagrams(\\"listen\\", [\\"enlists\\", \\"google\\", \\"inlets\\", \\"banana\\", \\"silnet\\"]) # Example Output: # [\\"inlets\\", \\"silnet\\"] def find_anagrams(s, dictionary): # Your code here pass # Example Usage: print(find_anagrams(\\"listen\\", [\\"enlists\\", \\"google\\", \\"inlets\\", \\"banana\\", \\"silnet\\"])) # => [\\"inlets\\", \\"silnet\\"] print(find_anagrams(\\"evil\\", [\\"vile\\", \\"veil\\", \\"live\\", \\"vill\\", \\"elvi\\"])) # => [\\"evil\\", \\"live\\", \\"veil\\", \\"vile\\"] print(find_anagrams(\\"apple\\", [\\"papel\\", \\"lapel\\", \\"pepla\\", \\"appears\\"])) # => [\\"papel\\", \\"pepla\\"] ```","solution":"def find_anagrams(s, dictionary): Returns a list of unique anagrams of the string s found in the dictionary of words. sorted_s = \\"\\".join(sorted(s)) anagrams = [word for word in dictionary if \\"\\".join(sorted(word)) == sorted_s] return sorted(anagrams)"},{"question":"In a distant future, there exists a language AI known as Python++, an evolved form of the original Python language. Python++ has become exceptionally proficient in solving complex problems at lightning speed. To ensure that human programmers can still keep up, the Competitive Programming community has developed a special task that tests one\'s ability to outwit Python++. The details of the task are as follows: \\"Calculate the product, P(A, B), for T queries. Here Pi is defined as the product of all integers from 1 to i if i > 0, and Pi = 1 if i = 0.\\" Your mission, as part of the Competitive Programming community, is to submit a solution to this task. -----Input----- The first line contains a single integer T, the number of queries. Each of the next T lines contains two integers each, Ai and Bi. -----Output----- Output T lines with one integer each. The ith line should contain the value P(Ai, Bi). -----Constraints----- - 1 <= T <= 5*104 - 0 <= A, B <= 1018 - Assume the answer can be large, so use appropriate data types to handle large integers. -----Example----- Input: 1 3 4 Output: 24","solution":"import math def product(A, B): Returns the product P(A, B), defined as the factorial of the larger of two numbers A and B. If either A or B is 0, returns 1 (since the factorial of 0 is 1). if A == 0 or B == 0: return 1 return math.factorial(max(A, B)) def process_queries(T, queries): Processes T queries and returns a list with results for each query. results = [] for A, B in queries: results.append(product(A, B)) return results"},{"question":"You are developing a text editor with simple undo and redo functionality. The editor operates with the following operations: 1. Type a character at the end of the text. 2. Undo the last type operation, reverting the text to its state before the last character was typed. 3. Redo the last undone type operation, restoring the last character that was undone. Implement the TextEditor class: - `TextEditor()` Initializes the object. - `void type(char c)` Types the character `c` at the end of the text. - `void undo()` Undoes the last type operation. If there are no operations to undo, do nothing. - `void redo()` Redoes the last undone type operation. If there are no operations to redo, do nothing. - `string getText()` Returns the current text. Example: Input: [\\"TextEditor\\", \\"type\\", \\"type\\", \\"type\\", \\"undo\\", \\"getText\\", \\"redo\\", \\"getText\\"] [[], [\\"a\\"], [\\"b\\"], [\\"c\\"], [], [], [], []] Output: [null, null, null, null, null, \\"ab\\", null, \\"abc\\"] Explanation: TextEditor editor = new TextEditor(); editor.type(\'a\'); // Text is \\"a\\" editor.type(\'b\'); // Text is \\"ab\\" editor.type(\'c\'); // Text is \\"abc\\" editor.undo(); // Last type operation is undone, text is \\"ab\\" editor.getText(); // Returns current text \\"ab\\" editor.redo(); // Last undone operation is redone, text is \\"abc\\" editor.getText(); // Returns current text \\"abc\\" Constraints: - The input character for type operation is a lowercase English letter. - The length of the text will not exceed 10^4 characters. - At most 10^5 operations will be performed. - The getText function will be called at most 10^4 times.","solution":"class TextEditor: def __init__(self): self.text = [] self.undo_stack = [] self.redo_stack = [] def type(self, c: str) -> None: Types the character `c` at the end of the text. self.text.append(c) self.undo_stack.append((\'type\', c)) self.redo_stack.clear() # Clear redo stack whenever a new type operation is performed def undo(self) -> None: Undoes the last type operation. if self.undo_stack: operation = self.undo_stack.pop() if operation[0] == \'type\': self.text.pop() self.redo_stack.append(operation) def redo(self) -> None: Redoes the last undone type operation. if self.redo_stack: operation = self.redo_stack.pop() if operation[0] == \'type\': self.text.append(operation[1]) self.undo_stack.append(operation) def getText(self) -> str: Returns the current text. return \'\'.join(self.text)"},{"question":"Write a function named `closest_to_zero` that takes a list of integers and returns the integer closest to zero. If there are two numbers equally close to zero, the positive one should be returned. If the list is empty, return `None`. ```python def closest_to_zero(numbers): pass ``` For example: - `closest_to_zero([3, -2, 2, 1, -1])` should return `1` - `closest_to_zero([5, -5, -3, 3, 0])` should return `0` - `closest_to_zero([10, -10])` should return `10` - `closest_to_zero([])` should return `None`","solution":"def closest_to_zero(numbers): Returns the integer closest to zero. If there are two numbers equally close to zero, the positive one should be returned. If the list is empty, return None. if not numbers: return None closest = numbers[0] for number in numbers: if abs(number) < abs(closest) or (abs(number) == abs(closest) and number > closest): closest = number return closest"},{"question":"Given an array of integers nums and an integer k, you need to find the minimum number of operations required to make all elements of the array equal. In one operation, you can increment or decrement an element by 1. Example 1: Input: nums = [1, 2, 3], k = 1 Output: 2 Explanation: You can increment number 1 to 2 in one operation, and decrement number 3 to 2 in another operation. Hence, a total of 2 operations. Example 2: Input: nums = [1, 10, 2, 9], k = 2 Output: 4 Explanation: Increment number 1 to 5 in two operations, and decrement 10 to 8 and 9 to 8 in two more operations. A total of 4 operations. Example 3: Input: nums = [5, 6, 8, 8, 5], k = 0 Output: 0 Explanation: All elements are already equal. No operations needed. Constraints: 1 <= nums.length <= 100 -1000 <= nums[i] <= 1000 0 <= k <= 100000","solution":"def min_operations(nums, k): Returns the minimum number of operations required to make all elements of the array nums equal by either incrementing or decrementing the elements by 1. Parameters: nums (list): List of integers k (int): Not used based on given example and problem statement Returns: int: Minimum number of operations nums.sort() median = nums[len(nums) // 2] return sum(abs(num - median) for num in nums)"},{"question":"Given an array of integers nums, a target integer, and an integer k, your task is to find the length of the longest subarray that contains at most k occurrences of integers that are exactly equal to target. Example 1: Input: nums = [1, 2, 3, 4, 2, 2, 3, 4, 1], target = 2, k = 2 Output: 7 Explanation: The longest subarray with at most 2 occurrences of 2 is [1, 2, 3, 4, 2, 2, 3]. Example 2: Input: nums = [1, 1, 1, 1, 1], target = 1, k = 3 Output: 3 Explanation: The longest subarray with at most 3 occurrences of 1 is [1, 1, 1]. Example 3: Input: nums = [1, 2, 3, 4, 5], target = 3, k = 1 Output: 5 Explanation: The longest subarray with at most 1 occurrence of 3 is [1, 2, 3, 4, 5]. Constraints: 1 <= nums.length <= 10^5 0 <= nums[i] <= 10^9 0 <= target <= 10^9 1 <= k <= 10^4","solution":"def longest_subarray(nums, target, k): Finds the length of the longest subarray with at most k occurrences of target. left = 0 max_length = 0 count = 0 for right in range(len(nums)): if nums[right] == target: count += 1 while count > k: if nums[left] == target: count -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"A robot is placed on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m-1][n-1]). The robot can only move either down or right at any point in time. Write a function to count the number of unique paths that the robot can take to reach the bottom-right corner of the grid. Example 1: Input: m = 3, n = 7 Output: 28 Example 2: Input: m = 3, n = 2 Output: 3 Example 3: Input: m = 7, n = 3 Output: 28 Example 4: Input: m = 3, n = 3 Output: 6 Note: - 1 <= m, n <= 100 - The answer is guaranteed to be within the range of a 32-bit signed integer.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left to the bottom-right of an m x n grid. dp = [[1] * n for _ in range(m)] for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[m - 1][n - 1]"},{"question":"Develop an algorithm that simulates a simplified version of stock market transactions. Imagine you are given the stock prices for consecutive days and you are required to calculate the maximum profit you can achieve. However, you are allowed to execute unlimited transactions (buy one share and later sell it), but you cannot hold more than one share of the stock at any time. # Input - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N — the number of days. - The second line contains N space-separated integers representing the stock prices on each day. # Output For each test case, print a single line containing one integer — the maximum profit you can achieve. # Constraints - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq text{Stock Price} leq 10^4 # Example Input ``` 3 6 7 1 5 3 6 4 4 1 2 3 4 5 7 6 4 3 1 ``` # Example Output ``` 7 3 0 ``` # Explanation - In the first test case, the maximum profit can be achieved by buying on day 2 (price = 1) and selling on day 3 (price = 5), profit = 4. Then buying on day 4 (price = 3) and selling on day 5 (price = 6), profit = 3. Total profit = 4 + 3 = 7. - In the second test case, the maximum profit can be achieved by buying on day 1 (price = 1), selling on day 2 (price = 2), buying on day 2 (price = 2), selling on day 3 (price = 3), buying on day 3 (price = 3) and selling on day 4 (price = 4). Total profit = 1 + 1 + 1 = 3. - In the third test case, no transactions are required as the stock prices only decrease. Total profit = 0.","solution":"def max_profit(prices): Calculate the maximum profit with unlimited transactions. :param prices: List of stock prices on consecutive days. :return: Maximum profit achievable. if not prices or len(prices) < 2: return 0 profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: profit += prices[i] - prices[i - 1] return profit def calculate_max_profits(test_cases): results = [] for case in test_cases: n, prices = case results.append(max_profit(prices)) return results"},{"question":"Calculate the Water Trapped by the Heights You are given an array of non-negative integers representing the elevations of a bar graph. Each element in the array represents the height of a bar at the corresponding position. Imagine that it is raining and each bar traps the amount of water based on its height and the heights of the bars on its left and right. Your task is to calculate the total amount of water that can be trapped between these bars. Write a function called `calculate_water_trapped` that takes in an array of integers as an argument and returns the total amount of water trapped. Function Signature ```python def calculate_water_trapped(heights: List[int]) -> int: ``` Input - An array of non-negative integers `heights` where `1 <= len(heights) <= 1000` and `0 <= heights[i] <= 1000`. Output - An integer representing the total amount of water trapped between the bars. Example ```python calculate_water_trapped([0,1,0,2,1,0,1,3,2,1,2,1]) = 6 calculate_water_trapped([4,2,0,3,2,5]) = 9 ``` - In the first example, the water trapped between the bars can be visualized as follows: ``` # # # # # # # ``` The total water trapped is `6` units. - In the second example, the water trapped between the bars can be visualized as follows: ``` # # # # # ``` The total water trapped is `9` units. Constraints - The algorithm you design should run efficiently even for the maximum input size. - Ensure that your solution handles edge cases gracefully, such as arrays with no trapping (e.g., all zeros, sorted ascending/descending array).","solution":"from typing import List def calculate_water_trapped(heights: List[int]) -> int: if not heights or len(heights) < 3: return 0 left_max = [0] * len(heights) right_max = [0] * len(heights) left_max[0] = heights[0] for i in range(1, len(heights)): left_max[i] = max(left_max[i - 1], heights[i]) right_max[-1] = heights[-1] for i in range(len(heights) - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(len(heights)): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"----- PRIME POSITION ----- Chef is intrigued by prime numbers and their positions. He considers a number to be interesting if it lies in a position which is a prime number and the number itself is also a prime number in a given array. You are given an array, and your task is to find whether each number in the array is interesting or not. -----Constraints----- 1 < t < 100 1 < n < 10^5 (number of elements in the array) 1 < A[i] < 10^7 (elements in the array) -----Input Format----- The first line contains the number of test cases t. Each test case consists of two lines: The first line contains an integer n, the size of the array. The second line contains n space-separated integers representing the array A. -----Output----- For each test case, output \\"YES\\" if the number at the prime position is also a prime, otherwise output \\"NO\\". Each test case output should be on a new line. -----Example Test Case----- Input: 1 6 2 3 5 7 11 13 Output: YES Explanation: In the given example, the prime positions (considered starting from 1) are 2, 3, and 5. The numbers at these positions are 3, 5, and 11 respectively, and all of them are prime. Therefore, the answer is YES.","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False max_divisor = int(num ** 0.5) + 1 for divisor in range(3, max_divisor, 2): if num % divisor == 0: return False return True def prime_positions_are_primes(arr): n = len(arr) for pos in range(2, n + 1): # positions start from 1, so position at index 1 is at pos=2 if is_prime(pos): if not is_prime(arr[pos - 1]): return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for t in test_cases: n, arr = t results.append(prime_positions_are_primes(arr)) return results # function to parse input and produce output def main(input_string): input_lines = input_string.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].split())) test_cases.append((n, arr)) index += 2 results = process_test_cases(test_cases) return \\"n\\".join(results)"},{"question":"Given a list of integers, write a function that rotates the list to the right by `k` steps, where `k` is a non-negative integer. The elements that are shifted out of the list should wrap around and appear at the start. If the list is empty or `k` is zero, the list should remain unchanged. ```python rotate_list([], 3) == [] rotate_list([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5] rotate_list([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3] rotate_list([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5] rotate_list([1, 2, 3, 4, 5], 7) == [4, 5, 1, 2, 3] ```","solution":"def rotate_list(nums, k): Rotates the list to the right by k steps. Arguments: nums -- a list of integers k -- a non-negative integer representing the number of steps if not nums or k == 0: return nums n = len(nums) k = k % n # handle cases where k is greater than the length of the list return nums[-k:] + nums[:-k]"},{"question":"Jill and Jack are trying to divide a collection of marbles fairly. Jill picks marbles only if the number of marbles is even and Jack picks marbles only if the number is odd. They take turns picking one marble at a time from the collection. Jill starts picking first. The game continues until there are no marbles left in the collection. Can you help them determine the number of marbles each will end up with? -----Input:----- - The first line contains an integer T, the number of test cases. - Each of the next T lines contain a single integer N, the number of marbles in the collection. -----Output:----- For each test case, output two space-separated integers, the number of marbles Jill and Jack end up with, respectively. -----Constraints----- - 1 leq T leq 10^5 - 0 leq N leq 10^9 -----Sample Input:----- 3 10 15 7 -----Sample Output:----- 5 5 8 7 4 3 -----EXPLANATION:----- Testcase 1: N = 10 Jill starts picking and picks 5 marbles (all even numbered turns), and Jack picks 5 marbles (remaining odd turns). Testcase 2: N = 15 Jill starts picking and picks 8 marbles (turns 0, 2, 4, ..., 14). Jack picks 7 marbles (turns 1, 3, 5, ..., 13). Testcase 3: N = 7 Jill starts picking and picks 4 marbles (turns 0, 2, 4, 6). Jack picks 3 marbles (turns 1, 3, 5).","solution":"def divide_marbles(T, test_cases): Returns the number of marbles Jill and Jack end up with for each test case. results = [] for N in test_cases: jill_marbles = (N + 1) // 2 jack_marbles = N // 2 results.append((jill_marbles, jack_marbles)) return results"},{"question":"Given an array of strings words and an integer k, return the k most frequent strings. You need to sort the words by their frequency from the highest to lowest. If two words have the same frequency, the lexicographically smaller string comes first. Example 1: Input: words = [\\"i\\", \\"love\\", \\"leetcode\\", \\"i\\", \\"love\\", \\"coding\\"], k = 2 Output: [\\"i\\", \\"love\\"] Explanation: \\"i\\" and \\"love\\" are the two most frequent words. Note that \\"i\\" comes before \\"love\\" due to a smaller lexicographical order. Example 2: Input: words = [\\"the\\", \\"day\\", \\"is\\", \\"sunny\\", \\"the\\", \\"the\\", \\"the\\", \\"sunny\\", \\"is\\", \\"is\\"], k = 4 Output: [\\"the\\", \\"is\\", \\"sunny\\", \\"day\\"] Explanation: \\"the\\", \\"is\\", \\"sunny\\" and \\"day\\" are the four most frequent words, with the number of occurrence being 4, 3, 2, and 1 respectively. Constraints: 1 <= words.length <= 5000 1 <= words[i].length <= 10 words[i] consists of lowercase English letters. k is in the range [1, The number of unique words in the array].","solution":"from collections import Counter def topKFrequent(words, k): Returns the k most frequent strings from the list words. If two words have the same frequency, the lexicographically smaller string comes first. # Count the frequency of each word count = Counter(words) # Sort the words by frequency and then lexicographically sorted_words = sorted(count.keys(), key=lambda word: (-count[word], word)) # Return the top k words return sorted_words[:k]"},{"question":"Given a linked list, where each node contains a single digit from 0 to 9, return the linked list as an integer in reversed order. For example, if the linked list is 1 -> 2 -> 3, the integer should be 321. You must not modify the linked list itself. Write a function `linked_list_to_reversed_integer` that receives a linked list and returns the corresponding integer in reversed order. Example 1: Input: `1 -> 2 -> 3` Output: `321` Example 2: Input: `0 -> 1 -> 0` Output: `10` Example 3: Input: `7` Output: `7` Example 4: Input: `5 -> 6 -> 2 -> 9` Output: `9265` Example 5: Input: `9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1` Output: `123456789` Constraints: - The linked list will have at least one node. - Each node\'s value is guaranteed to be between 0 and 9 inclusively. - The linked list has at most 100 nodes. Function Signature: ```python def linked_list_to_reversed_integer(head: ListNode) -> int: pass ``` Note: `ListNode` is a pre-defined class in the problem\'s context, and it\'s defined as follows: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` Implement your function to achieve the desired result.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def linked_list_to_reversed_integer(head: ListNode) -> int: This function takes the head of a linked list and returns the integer representing the linked list in reversed order. current = head num_str = \\"\\" # Traverse the linked list while current: num_str = str(current.val) + num_str current = current.next return int(num_str)"},{"question":"You are tasked to help a friend design a timetable display system for a simple railway station. The station has multiple platforms, each identified by a unique number, and trains arriving and departing at specific times. The system needs to fetch and sort train schedules based on their times for a specific platform. Write a function that accepts a list of train schedules and a platform number, then returns a list of train schedules for that platform sorted by time. Each train schedule is represented as a dictionary with three keys: - `platform`: an integer indicating the platform number - `arrival_time`: a string in the format \\"HH:MM\\", representing the arrival time - `departure_time`: a string in the format \\"HH:MM\\", representing the departure time Your function should take the following arguments: - `schedules`: a list of dictionaries, each representing a train\'s schedule - `platform_number`: an integer representing the platform number to filter schedules by Input Example: ```python schedules = [ {\\"platform\\": 1, \\"arrival_time\\": \\"08:45\\", \\"departure_time\\": \\"09:00\\"}, {\\"platform\\": 2, \\"arrival_time\\": \\"08:50\\", \\"departure_time\\": \\"09:10\\"}, {\\"platform\\": 1, \\"arrival_time\\": \\"09:05\\", \\"departure_time\\": \\"09:20\\"}, {\\"platform\\": 1, \\"arrival_time\\": \\"08:30\\", \\"departure_time\\": \\"08:40\\"} ] platform_number = 1 ``` Output Example: ```python [ {\\"platform\\": 1, \\"arrival_time\\": \\"08:30\\", \\"departure_time\\": \\"08:40\\"}, {\\"platform\\": 1, \\"arrival_time\\": \\"08:45\\", \\"departure_time\\": \\"09:00\\"}, {\\"platform\\": 1, \\"arrival_time\\": \\"09:05\\", \\"departure_time\\": \\"09:20\\"} ] ``` Note: - The schedules should be sorted primarily by `arrival_time` in ascending order. - If two trains have the same arrival time, they should be sorted by `departure_time`.","solution":"def get_sorted_schedules(schedules, platform_number): Returns the list of schedules filtered by platform_number and sorted by arrival_time (and departure_time if necessary). Args: schedules (list of dicts): List of train schedules. platform_number (int): The platform number to filter by. Returns: list of dicts: Sorted and filtered list of schedules for the given platform. # Filter schedules by the given platform number filtered_schedules = [schedule for schedule in schedules if schedule[\'platform\'] == platform_number] # Sort the filtered schedules by arrival_time (and by departure_time if arrival_times are equal) sorted_schedules = sorted(filtered_schedules, key=lambda x: (x[\'arrival_time\'], x[\'departure_time\'])) return sorted_schedules"},{"question":"In a kingdom far away, there is a special language that only uses the letters \'a\', \'b\', and \'c\'. The king has a fascination with words in this language and has devised a special way to evaluate them. The king\'s evaluation is based on the \\"score\\" of a word, which is calculated by substituting each letter with a specific value (\'a\' = 1, \'b\' = 2, \'c\' = 3) and then finding the arithmetic mean of these values. Moreover, the king only considers words to be special if their score is an integer. Given a string representing a word in this special language, write a function `is_special_word(word)` that determines if the word is special based on the king\'s criteria. Function Signature: ```python def is_special_word(word: str) -> bool: ``` # Examples: 1. Input: word = \\"abc\\" Output: False Explanation: The score of \\"abc\\" is (1+2+3)/3 = 2, which is an integer. However, the word has been disqualified because not all letters are distinct. 2. Input: word = \\"accc\\" Output: False Explanation: The score of \\"accc\\" is (1+3+3+3)/4 = 2.5, which is not an integer. 3. Input: word = \\"abac\\" Output: True Explanation: The score of \\"abac\\" is (1+2+1+3)/4 = 1.75, which is an integer. Therefore, it is a special word. # Constraints: - The word will only contain the characters \'a\', \'b\', and \'c\'. - The length of the word will be between 1 and 10^5 inclusive.","solution":"def is_special_word(word: str) -> bool: Determine if a word in the special language is special. A word is considered special if its score (mean of the values of the letters) is an integer. # Define a mapping for the letter values value_map = {\'a\': 1, \'b\': 2, \'c\': 3} # Calculate the total sum of the values of the letters in the word total_sum = sum(value_map[char] for char in word) # Calculate the number of letters in the word word_length = len(word) # The score should be an integer return total_sum % word_length == 0"},{"question":"Implement the class FlightBookings which manages seat bookings for an airline with a matrix seats representing the seats in a plane with rows rows and cols columns, where seats[i][j] represents the status of the seat (0 if it\'s available, 1 if it\'s booked). The class should support three methods: 1. bookSeat(int row, int col) Books the seat at the specified row and col. 2. releaseSeat(int row, int col) Releases the previously booked seat at the specified row and col. 3. getSeatStatus(int row, int col) Returns the current status of the seat at the specified row and col. Example: Input [\\"FlightBookings\\",\\"getSeatStatus\\",\\"bookSeat\\",\\"getSeatStatus\\",\\"releaseSeat\\",\\"getSeatStatus\\"] [[[[0,0,0],[0,1,0],[1,0,0]]],[1,1],[0,0],[0,0],[1,1],[1,1]] Output [null,1,null,1,null,0] Explanation FlightBookings flightBookings = new FlightBookings([[0,0,0],[0,1,0],[1,0,0]]); flightBookings.getSeatStatus(1, 1); // return 1 flightBookings.bookSeat(0, 0); // After this booking, the seats matrix looks like: // 1 0 0 // 0 1 0 // 1 0 0 flightBookings.getSeatStatus(0, 0); // return 1 flightBookings.releaseSeat(1, 1); // After this release, the seats matrix looks like: // 1 0 0 // 0 0 0 // 1 0 0 flightBookings.getSeatStatus(1, 1); // return 0 Constraints: - rows == seats.length - cols == seats[i].length - 1 <= rows, cols <= 100 - 0 <= row < rows - 0 <= col < cols - Initially, all seats are available. - Each operation on SeatStatus, BookSeat, or ReleaseSeat will be performed at most 500 times.","solution":"class FlightBookings: def __init__(self, seats): Initializes the FlightBookings object with a 2D list representing seats. self.seats = seats def bookSeat(self, row, col): Books the seat at the specified row and col. Sets the seat value to 1. self.seats[row][col] = 1 def releaseSeat(self, row, col): Releases the previously booked seat at the specified row and col. Sets the seat value to 0. self.seats[row][col] = 0 def getSeatStatus(self, row, col): Returns the current status of the seat at the specified row and col. return self.seats[row][col]"},{"question":"You are given two integer arrays, `nums1` and `nums2`, sorted in non-decreasing order, and two integers, `m` and `n`, representing the number of elements in `nums1` and `nums2`, respectively. Merge `nums1` and `nums2` into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function, but instead be stored inside the array `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to 0 and should be ignored. `nums2` has a length of `n`. Example 1: Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Example 2: Input: nums1 = [1], m = 1, nums2 = [], n = 0 Output: [1] Example 3: Input: nums1 = [0], m = 0, nums2 = [1], n = 1 Output: [1] Constraints: - `nums1.length == m + n` - `nums2.length == n` - 0 <= m, n <= 200 - 1 <= nums1[i], nums2[i] <= 10^9","solution":"def merge(nums1, m, nums2, n): Merges two sorted arrays nums1 and nums2 into a single array sorted in non-decreasing order. The final result is stored in nums1. # Start from the end of both arrays i, j, k = m - 1, n - 1, m + n - 1 while i >= 0 and j >= 0: if nums1[i] > nums2[j]: nums1[k] = nums1[i] i -= 1 else: nums1[k] = nums2[j] j -= 1 k -= 1 # Copy the remaining elements from nums2 if any while j >= 0: nums1[k] = nums2[j] j -= 1 k -= 1"},{"question":"You are given an n x n matrix filled with integers, where each row and each column is sorted in ascending order. Your task is to write a function that takes this matrix and an integer target as input and returns true if the target integer is found in the matrix, and false otherwise. Input: - The first line contains an integer n, the number of rows and columns in the matrix. - The next n lines each contain n integers, representing the matrix. - The last line contains an integer target. Output: - Output \\"YES\\" if the target is found in the matrix, otherwise \\"NO\\". Constraints: 1 <= n <= 300 -10^9 <= matrix[i][j], target <= 10^9 Note: - Be sure to minimize the complexity of your algorithm. Example Input: 3 1 4 7 2 5 8 3 6 9 5 Example Output: YES Explanation: The target 5 is found in the given matrix, thus the output is \\"YES\\".","solution":"def find_target_in_matrix(matrix, target): Function to find a target value in a n x n matrix where each row and column is sorted. Args: matrix (list of list of int): A 2D list representing the sorted matrix. target (int): The target value to find in the matrix. Returns: bool: True if target is found, False otherwise. n = len(matrix) row, col = 0, n - 1 while row < n and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] > target: col -= 1 else: row += 1 return False"},{"question":"A leading bookstore needs to manage its inventory effectively. For simplicity, we can think of their inventory as a list of books, where each book has a unique ID and a quantity in stock. The bookstore wants to perform several operations such as adding new books, updating the quantity of existing books, and processing purchase orders. Your task is to implement a system that supports the following operations: 1. **Add a new book**: If the book\'s ID already exists in the inventory, update the quantity by adding the new quantity to the existing one. If the book\'s ID does not exist, add the book with its quantity. 2. **Update quantity**: Given a book\'s ID and a new quantity, set that book\'s quantity to the new given quantity. 3. **Process purchase**: Given a book\'s ID and a quantity, reduce the book\'s quantity by the given amount. If there are not enough books in stock to fulfill the purchase, print `\\"Insufficient stock\\"` and do not change the quantity. If the ID does not exist, print `\\"Book ID not found\\"`. Each operation will be represented as a string where the first word indicates the operation type (`\\"add\\"`, `\\"update\\"`, or `\\"purchase\\"`), followed by the book ID and the quantity (if applicable). # Input - The first line contains an integer `N` (1 ≤ N ≤ 10^5), the number of operations. - The next `N` lines each contain a string representing an operation. # Output For each `\\"purchase\\"` operation, print the result if it\'s either `\\"Insufficient stock\\"` or `\\"Book ID not found\\"`. Do not print anything for `\\"add\\"` or `\\"update\\"` operations. # Example Input ``` 5 add 101 20 add 102 15 purchase 101 5 update 102 20 purchase 103 1 ``` Output ``` Book ID not found ``` # Note - After processing the given operations: - Book ID 101 will have a quantity of 15. - Book ID 102 will have a quantity of 20. - Attempting to process a purchase for the book ID 103 failed because it does not exist in the inventory.","solution":"class Bookstore: def __init__(self): Initialize the bookstore\'s inventory as an empty dictionary. self.inventory = {} def add_book(self, book_id, quantity): Add a new book or update the quantity of an existing book. if book_id in self.inventory: self.inventory[book_id] += quantity else: self.inventory[book_id] = quantity def update_quantity(self, book_id, quantity): Update the quantity for a given book_id to the new quantity. self.inventory[book_id] = quantity def process_purchase(self, book_id, quantity): Process the purchase of a book. If the book_id exists and there is sufficient stock, reduce the quantity. Otherwise, print the relevant message. if book_id not in self.inventory: print(\\"Book ID not found\\") elif self.inventory[book_id] < quantity: print(\\"Insufficient stock\\") else: self.inventory[book_id] -= quantity def handle_operations(operations): bookstore = Bookstore() for operation in operations: op = operation.split() if op[0] == \\"add\\": bookstore.add_book(int(op[1]), int(op[2])) elif op[0] == \\"update\\": bookstore.update_quantity(int(op[1]), int(op[2])) elif op[0] == \\"purchase\\": bookstore.process_purchase(int(op[1]), int(op[2]))"},{"question":"# Task Alex is fascinated with sequences and stumbled upon an interesting one. He discovered a sequence of numbers where each number in the sequence represents the number of steps required to reach 1 by the following process: - If the number is even, divide it by 2. - If the number is odd, multiply it by 3 and add 1. This sequence is called the Collatz sequence. For example, starting with the number 6, the sequence will be: 6, 3, 10, 5, 16, 8, 4, 2, 1. Alex wants you to create a function that returns the length of the Collatz sequence for a given integer. # Input/Output - `[input]` integer `n` `1 <= n <= 10^6` - `[output]` an integer The length of the Collatz sequence starting from the input number. Function Signature: `def collatz_sequence_length(n: int) -> int:`","solution":"def collatz_sequence_length(n: int) -> int: Returns the length of the Collatz sequence starting from n. length = 1 # Start with 1 because we count the starting number itself while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 length += 1 return length"},{"question":"Given an input string containing a mix of letters, digits, and special characters, your task is to determine whether the string is a valid password based on the following criteria: 1. The string must be at least 8 characters long. 2. The string must contain at least one uppercase letter. 3. The string must contain at least one lowercase letter. 4. The string must contain at least one digit. 5. The string must contain at least one special character from the set: `~!@#%^&*()-_+=`. Write a function `is_valid_password` that takes a single string as input and returns `True` if the string is a valid password and `False` otherwise. **Examples:** ```python is_valid_password(\\"Password123!\\") => True is_valid_password(\\"password123!\\") => False # No uppercase letter is_valid_password(\\"PASSWORD123!\\") => False # No lowercase letter is_valid_password(\\"Password!\\") => False # No digit is_valid_password(\\"Password12\\") => False # No special character is_valid_password(\\"Short1!\\") => False # Less than 8 characters is_valid_password(\\"Passw0rd!\\") => True ``` # Notes: - Assume the input string only contains printable ASCII characters. - Treat uppercase and lowercase letters as distinct. - The special characters are limited to the set: `~!@#%^&*()-_+=`. Ensure to handle edge cases appropriately and provide a concise solution that adheres to the given criteria.","solution":"def is_valid_password(password): Checks if the input string is a valid password based on the specified criteria: 1. At least 8 characters long. 2. Contains at least one uppercase letter. 3. Contains at least one lowercase letter. 4. Contains at least one digit. 5. Contains at least one special character from the set: ~!@#%^&*()-_+=. Returns True if all criteria are met, otherwise False. if len(password) < 8: return False has_uppercase = any(char.isupper() for char in password) has_lowercase = any(char.islower() for char in password) has_digit = any(char.isdigit() for char in password) has_special = any(char in \\"~!@#%^&*()-_+=\\" for char in password) return has_uppercase and has_lowercase and has_digit and has_special"},{"question":"Given a list of non-negative integers representing the amount of rainwater each bar can trap, compute how much water it is able to trap after raining. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (black section) represents 6 units of trapped rainwater (blue section). Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Example 3: Input: height = [1,1,1,1,1] Output: 0 Constraints: - The list length is in the range [1, 100]. - Each height in the list is a non-negative integer and does not exceed 1000.","solution":"def trap(height): Computes how much water it is able to trap after raining. :param height: List of non-negative integers representing the amount of rainwater each bar can trap. :return: Total amount of trapped water. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"In this problem, you need to simulate the process of customer check-in at a hotel. Each guest is assigned a room which is represented by an integer room number. You are given two types of operations: check-in and check-out. # Input Specifications: - The first line contains an integer T representing the number of operations. - The next T lines contain one of two types of operations: - \\"check-in X\\" where X is the integer room number. - \\"check-out X\\" where X is the integer room number. Your task is to process each operation and keep track of the current status of each room. At the end of all operations, you need to print all the room numbers that are currently occupied in ascending order. - If \\"check-in X\\" is issued for a room already occupied, it should be ignored. - If \\"check-out X\\" is issued for a room that is unoccupied, it should also be ignored. # Output Specifications: - Print the room numbers of all occupied rooms in ascending order. # Constraints: - 1 leq T leq 100000 - 1 leq X leq 100000 # Sample Input: 6 check-in 101 check-in 102 check-out 101 check-in 103 check-out 104 check-in 102 # Sample Output: 102 103 The output shows rooms 102 and 103 are currently occupied. Room 101 was checked out, and checking in to an already occupied Room 102 was ignored. Checking out an unoccupied room 104 was also ignored.","solution":"def process_hotel_operations(T, operations): occupied_rooms = set() result = [] for operation in operations: op, room = operation.split() room = int(room) if op == \\"check-in\\": if room not in occupied_rooms: occupied_rooms.add(room) elif op == \\"check-out\\": if room in occupied_rooms: occupied_rooms.remove(room) result = sorted(occupied_rooms) return result"},{"question":"In a city\'s street grid, each intersection can be represented as a point (x, y) in a coordinate system. Given the lightning strikes recorded at specific points in the city, you\'re tasked with identifying the intersection that is struck the most frequently. If there is a tie, return the intersection with the smallest x-coordinate. If there\'s still a tie, return the intersection with the smallest y-coordinate. Write a function that takes a list of tuples, where each tuple (x, y) represents a lightning strike\'s location, and returns the most frequently struck intersection as a tuple. If the input list is empty, return None. Example 1: Input: [(1, 2), (2, 3), (1, 2), (3, 4), (1, 2), (2, 3)] Output: (1, 2) Example 2: Input: [(3, 4), (1, 2), (2, 3)] Output: (1, 2) Example 3: Input: [] Output: None Note: - The input list can have up to 10^5 lightning strike records. - The coordinates of each intersection are integers that can range from -10^6 to 10^6.","solution":"def most_frequent_strike(intersections): Returns the most frequently struck intersection in the city grid. If there is a tie, return the intersection with the smallest x-coordinate, and if still tied, return the one with the smallest y-coordinate. If the input list is empty, return None. :param intersections: List[Tuple[int, int]] :return: Tuple[int, int] or None if not intersections: return None from collections import defaultdict strike_counts = defaultdict(int) # Count each intersection strike for intersection in intersections: strike_counts[intersection] += 1 # Find the most frequent intersection most_frequent = None max_count = 0 for intersection, count in strike_counts.items(): if count > max_count or ( count == max_count and (most_frequent is None or intersection < most_frequent) ): most_frequent = intersection max_count = count return most_frequent"},{"question":"A popular amusement park is facing problems managing its customer queues for the various rides. They plan to implement a new system where customers can book tickets for rides online and the system will maintain different queues for each ride. Implement a RideBooking class with the following functionalities: - `RideBooking()` Initializes an empty bookings log. - `bookRide(string rideName, string customerName, int timestamp)` Books a ticket for customerName on the ride with rideName at the given timestamp. Multiple customers can book the same ride at different times, but a customer can book only one ride at any given timestamp. - `cancelBooking(string customerName, int timestamp)` Cancels the booking of the customerName that was made at the given timestamp. If the customer didn\'t book a ride at that timestamp, nothing should be cancelled. - `getRideQueue(string rideName)` Returns a list of customers currently in line for the ride with rideName, sorted by the timestamp in ascending order. Assume that each ride name and customer name are distinct and that the timestamp is a non-negative integer. Example: ```python # Example usage of the RideBooking class rb = RideBooking() # Booking rides rb.bookRide(\\"RollerCoaster\\", \\"Alice\\", 1) # Alice books RollerCoaster at timestamp 1 rb.bookRide(\\"FerrisWheel\\", \\"Bob\\", 2) # Bob books FerrisWheel at timestamp 2 rb.bookRide(\\"RollerCoaster\\", \\"Carol\\", 3) # Carol books RollerCoaster at timestamp 3 rb.bookRide(\\"FerrisWheel\\", \\"Alice\\", 4) # Alice books FerrisWheel at timestamp 4 # Get current queues print(rb.getRideQueue(\\"RollerCoaster\\")) # Should print: [\\"Alice\\", \\"Carol\\"] print(rb.getRideQueue(\\"FerrisWheel\\")) # Should print: [\\"Bob\\", \\"Alice\\"] # Cancel booking rb.cancelBooking(\\"Alice\\", 4) # Alice cancels her booking for FerrisWheel made at timestamp 4 # Get updated queues print(rb.getRideQueue(\\"FerrisWheel\\")) # Should print: [\\"Bob\\"] ``` Constraints: - All strings consist of lowercase English letters. - Timestamps are non-negative integers within the range [0, 10^5]. - No two bookings by the same customer will have the same timestamp.","solution":"class RideBooking: def __init__(self): self.bookings = {} def bookRide(self, rideName, customerName, timestamp): if rideName not in self.bookings: self.bookings[rideName] = [] self.bookings[rideName].append((timestamp, customerName)) def cancelBooking(self, customerName, timestamp): for rideName in self.bookings: self.bookings[rideName] = [ (ts, cname) for ts, cname in self.bookings[rideName] if not (ts == timestamp and cname == customerName) ] def getRideQueue(self, rideName): if rideName not in self.bookings: return [] queue = sorted(self.bookings[rideName], key=lambda x: x[0]) return [cname for _, cname in queue]"},{"question":"You are given a list of strings representing various words. Your task is to find the longest string chain that can be formed such that each word in the chain is a predecessor of the next word. A word `a` is a predecessor of another word `b` if and only if we can add exactly one letter anywhere in `a` to make it equal to `b`. Return the length of the longest possible word chain. Example 1: Input: words = [\\"a\\", \\"b\\", \\"ba\\", \\"bca\\", \\"bda\\", \\"bdca\\"] Output: 4 Explanation: The longest possible chain is \\"a\\" -> \\"ba\\" -> \\"bda\\" -> \\"bdca\\". Example 2: Input: words = [\\"xbc\\", \\"pcxbcf\\", \\"xb\\", \\"cxbc\\", \\"pcxbc\\"] Output: 5 Explanation: The longest possible chain is \\"xb\\" -> \\"xbc\\" -> \\"cxbc\\" -> \\"pcxbc\\" -> \\"pcxbcf\\". Example 3: Input: words = [\\"abcd\\", \\"dbqca\\"] Output: 1 Explanation: There is no chain possible that can be formed with these words. Constraints: - 1 <= words.length <= 1000 - 1 <= words[i].length <= 16 - words consist only of lowercase English letters.","solution":"def longestStrChain(words): Returns the length of the longest possible word chain such that each word in the chain is a predecessor of the next word. words.sort(key=len) dp = {} max_len = 1 for word in words: dp[word] = 1 for i in range(len(word)): predecessor = word[:i] + word[i+1:] if predecessor in dp: dp[word] = max(dp[word], dp[predecessor] + 1) max_len = max(max_len, dp[word]) return max_len"},{"question":"Write a function `max_palindromic_substring(s: str) -> str` that takes a non-empty string `s` and returns the longest palindromic substring within `s`. A palindrome is a string that reads the same backward as forward, e.g., \\"racecar\\", \\"level\\", \\"madam\\". Your function should return the first longest palindromic substring found if there are multiple with the same length. For example, - `max_palindromic_substring(\\"babad\\")` should return `\\"bab\\"` or `\\"aba\\"` (since both are palindromic substrings of length 3). - `max_palindromic_substring(\\"cbbd\\")` should return `\\"bb\\"`. Here are some additional examples: ```python max_palindromic_substring(\\"a\\") == \\"a\\" max_palindromic_substring(\\"ac\\") == \\"a\\" max_palindromic_substring(\\"racecar\\") == \\"racecar\\" max_palindromic_substring(\\"aaaabaaa\\") == \\"aaabaaa\\" ``` Your function should be efficient enough to handle strings up to a length of 1000 characters.","solution":"def max_palindromic_substring(s: str) -> str: Returns the longest palindromic substring within the given string s. If there are multiple palindromic substrings of the same maximum length, the function returns the first one found. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] max_palindrome = \\"\\" for i in range(len(s)): # Odd length palindromes palindrome1 = expand_around_center(s, i, i) # Even length palindromes palindrome2 = expand_around_center(s, i, i + 1) # Update max_palindrome if a longer one is found if len(palindrome1) > len(max_palindrome): max_palindrome = palindrome1 if len(palindrome2) > len(max_palindrome): max_palindrome = palindrome2 return max_palindrome"},{"question":"Given a string s, remove the minimum number of characters to make it a palindrome. The resulting palindrome does not need to be the longest possible one; any valid palindrome will suffice. Example 1: Input: \\"abca\\" Output: \\"aba\\" Example 2: Input: \\"racecarx\\" Output: \\"racecar\\" Note: The input string s consists of lowercase alphabetic characters only. The length of the input string s will not exceed 1000.","solution":"def make_palindrome(s): Remove the minimum number of characters to make the string a palindrome. The resulting palindrome does not need to be the longest possible one; any valid palindrome will suffice. :param s: A string consisting of lowercase alphabetic characters. :return: A palindrome derived from s by removing the minimum number of characters. def is_palindrome(x): return x == x[::-1] if is_palindrome(s): return s for i in range(len(s)): temp = s[:i] + s[i+1:] if is_palindrome(temp): return temp # If no palindrome found by removing just one character, return the first character return s[0] if s else \\"\\""},{"question":"# Task You are given an undirected graph with n nodes and m edges, represented as an adjacency list. Write a function to determine if the graph contains a cycle. # Example Given the graph: ``` 0: [1, 2] 1: [0, 2] 2: [0, 1, 3] 3: [2] ``` The output should be `True` since there is a cycle (0-1-2-0). Given the graph: ``` 0: [1] 1: [0, 2] 2: [1, 3] 3: [2] ``` The output should be `False` as there are no cycles. # Input/Output - `[input]` dictionary `graph` An adjacency list representing the graph. The keys are node identifiers, and the values are lists of nodes that the key node is connected to. - `[output]` boolean Return `True` if the graph contains a cycle, otherwise return `False`. # Notes: - The graph has no self-loops and no multiple edges. - The graph has at least one node and no more than 10^4 nodes. - The graph might be disconnected.","solution":"def has_cycle(graph): def dfs(node, parent, visited): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: if dfs(neighbor, node, visited): return True elif parent is not None and neighbor != parent: return True return False visited = set() for node in graph: if node not in visited: if dfs(node, None, visited): return True return False"},{"question":"Close Encounters of the Sorted Kind Astronauts aboard the space station have a unique way of keeping their inventory system organized. Their items are recorded in logs with timestamps and they need a quick way to look up the inventory at any given time. To do this, they\'ve decided to keep an array of logs sorted by timestamps. However, due to transmission delays and other anomalies in space, new logs can sometimes arrive out of order. Your task is to implement a function that will insert the new log entry into an already sorted array of logs, keeping the array sorted by timestamp. Each log entry consists of a tuple `(timestamp, item_id)`, where `timestamp` is a positive integer and `item_id` is a string representing the item. Task Given an array of log entries sorted by timestamp in ascending order, and a new log entry to be inserted, return a new array with the log entry inserted at the correct position to maintain the sorted order. # Examples ```python logs = [(1, \'food_pack\'), (3, \'water_bottle\'), (5, \'space_suit\')] new_log = (4, \'oxygen_tank\') insert_log(logs, new_log) # => [(1, \'food_pack\'), (3, \'water_bottle\'), (4, \'oxygen_tank\'), (5, \'space_suit\')] logs = [(1, \'tool_kit\'), (4, \'navigation_system\')] new_log = (2, \'med_kit\') insert_log(logs, new_log) # => [(1, \'tool_kit\'), (2, \'med_kit\'), (4, \'navigation_system\')] ``` # Notes - The input array will be non-empty and already sorted. - The `timestamp` values will be positive integers. - The new log entry\'s timestamp will be unique for simplicity.","solution":"def insert_log(logs, new_log): Inserts a new log entry into a sorted list of logs while maintaining the sorted order. Parameters: logs (list of tuples): A sorted list of log entries. new_log (tuple): The new log entry to be inserted. Returns: list of tuples: A new list with the new log entry inserted in the correct position. new_timestamp, _ = new_log for i in range(len(logs)): if new_timestamp < logs[i][0]: return logs[:i] + [new_log] + logs[i:] return logs + [new_log]"},{"question":"Lucy is planning to attend a symposium on emerging technologies. To make her trip more enjoyable, she prefers to stay at hotels that she hasn\'t stayed at before. The symposium\'s organizers have a list of recommended hotels in order of their proximity to the symposium venue. Write a function `hotelPicker` that takes two arguments: - `hotelsStayed`, a list of hotels Lucy has stayed at before, given as an array of strings. - `hotelsRecommended`, a list of hotels recommended by the symposium\'s organizers, given as an array of strings. `hotelsRecommended` is organized from the closest to the furthest from the symposium venue. The function should return the hotel that Lucy should stay at, as a string. Also note: - It is possible that Lucy hasn\'t stayed at any hotel before. - The symposium organizers recommend at least two hotels each year. - If all of the recommended hotels are ones that Lucy has stayed at before, the function should return `\'No new hotels available!\'`. Example: ```python hotelsStayed = [\\"Hilton\\", \\"Marriott\\", \\"Sheraton\\"] hotelsRecommended = [\\"Marriott\\", \\"Westin\\", \\"Hilton\\", \\"Radisson\\"] print(hotelPicker(hotelsStayed, hotelsRecommended)) # Output: \\"Westin\\" ```","solution":"def hotelPicker(hotelsStayed, hotelsRecommended): Returns the name of a recommended hotel that Lucy hasn\'t stayed at before. If all recommended hotels have been stayed at, returns \'No new hotels available!\'. for hotel in hotelsRecommended: if hotel not in hotelsStayed: return hotel return \'No new hotels available!\'"},{"question":"Word Collage You will be given a list of words and your task is to arrange the words into a square grid so that the first column forms the first word, the second column forms the second word, and so on. The length of each word will be the same, and there will be exactly as many words as the length of each word. If the input list is empty or contains words of different lengths, your function should return an empty string. Output the grid as a single string with \'n\' separating each row. Example: ```python def word_collage(words): # your code here # Test cases print(word_collage([\\"ball\\", \\"area\\", \\"lead\\", \\"lady\\"])) # Output: # ball # area # lead # lady print(word_collage([\\"abcd\\", \\"efgh\\", \\"ijkl\\", \\"mnop\\"])) # Output: # abcd # efgh # ijkl # mnop print(word_collage([\\"xyz\\", \\"abc\\", \\"def\\"])) # Output: # \\"\\" ``` In this task, you need to ensure that you correctly create the square grid from the provided words list.","solution":"def word_collage(words): Arrange the words into a square grid where the first column forms the first word, the second column forms the second word, and so on. Args: words: List of words of equal length. Returns: A string representing the arranged grid, or an empty string if input is invalid. if not words: return \\"\\" word_len = len(words[0]) for word in words: if len(word) != word_len: return \\"\\" # Create a grid as a list of strings grid = \\"n\\".join(words) return grid"},{"question":"__Question:__ Write a function `maxDifference(arr)` that takes a list of integers and returns the maximum difference between two elements in the list where the smaller element comes before the larger element. __Input:__ - A list of integers, `arr` (1 <= len(arr) <= 10^5, -10^9 <= arr[i] <= 10^9) __Output:__ - An integer representing the maximum difference between a pair of elements where the smaller element is before the larger element. __Examples:__ maxDifference([2, 3, 10, 2, 4, 8, 1]) == 8 maxDifference([7, 9, 5, 6, 3, 2]) == 2 maxDifference([10, 20, 30, 40]) == 30 maxDifference([40, 30, 20, 10]) == -1 ***Note:*** If no such pair exists where the smaller element comes before the larger one, return -1.","solution":"def maxDifference(arr): Returns the maximum difference between two elements in the list where the smaller element comes before the larger element. if len(arr) < 2: return -1 max_diff = -1 min_element = arr[0] for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Create a function `balanced_parentheses()` that accepts a string consisting of lowercase letters and parentheses, and checks if the parentheses are balanced. A string is said to have balanced parentheses if each opening parenthesis has a corresponding closing parenthesis in the correct order. ```python balanced_parentheses(\\"abc(de)f\\") // true balanced_parentheses(\\"a(b)c)d(\\") // false balanced_parentheses(\\"((happy)days)\\") // true ``` Arguments consist of only lowercase letters and parentheses.","solution":"def balanced_parentheses(s): Checks if the parentheses in the input string are balanced. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a function ```python expand_ranges(ranges) ``` that takes in a string ```ranges``` containing comma-separated ranges or individual numbers, and returns a list of all numbers within the specified ranges. For example: ```python expand_ranges(\'1-3,5\') == [1, 2, 3, 5] # \'1-3\' expands to [1, 2, 3], and \'5\' adds [5] expand_ranges(\'7-10\') == [7, 8, 9, 10] # \'7-10\' expands to [7, 8, 9, 10] expand_ranges(\'10-13,15-17,20\') == [10, 11, 12, 13, 15, 16, 17, 20] # \'10-13\' expands to [10, 11, 12, 13], \'15-17\' to [15, 16, 17], and \'20\' adds [20] expand_ranges(\'1,3,5-7\') == [1, 3, 5, 6, 7] # \'1\' adds [1], \'3\' adds [3], and \'5-7\' expands to [5, 6, 7] ```","solution":"def expand_ranges(ranges): Expands a string containing ranges and individual numbers into a list of all specified numbers. Parameters: ranges (str): A string containing comma-separated ranges or individual numbers (e.g., \'1-3,5\'). Returns: list: A list of integers expanded from the input ranges. result = [] parts = ranges.split(\',\') for part in parts: if \'-\' in part: start, end = part.split(\'-\') result.extend(range(int(start), int(end) + 1)) else: result.append(int(part)) return result"},{"question":"# Task Given a string containing a sequence of zero or more words, where words are separated by single spaces. A word is defined as a contiguous sequence of alphabetical characters of any case (a-z, A-Z). The task is to reverse the characters of each word in the string while maintaining their original order and positions. Your function should be able to handle capitalization gracefully (i.e., capital letters remain capital and small letters remain small). Write a function that reverses the letters in each word of the input string while maintaining the original word order and separation. # Input/Output - `input` string `s` A string containing a sequence of zero or more words separated by single spaces. The string may include leading or trailing spaces, which should be ignored. - `output` string A string with each word reversed but maintaining the original order and positions of words. # Examples For `s = \\"Hello World\\"`, the output should be `\\"olleH dlroW\\"`. For `s = \\" Reverse this \\"` the output should be `\\" esreveR siht\\"`. For `s = \\"\\"`, the output should be `\\"\\"`. For `s = \\"a bcd ef\\"`, the output should be `\\"a dcb fe\\"`.","solution":"def reverse_words(s: str) -> str: This function takes a string containing words separated by single spaces, and returns a string where each word is reversed, but the original word order and spacing is maintained. # Split the string into words words = s.split(\' \') # Reverse each word reversed_words = [word[::-1] for word in words] # Join the reversed words with a single space return \' \'.join(reversed_words)"},{"question":"Given a binary tree, each node contains an integer value. The depth of a node is defined as the number of edges from the node to the tree\'s root node. Write a function to find the maximum depth of a binary tree. Example: Input: root = [3,9,20,null,null,15,7] Output: 3 Explanation: The binary tree [3,9,20,null,null,15,7] has a maximum depth of 3. Constraints: - The number of nodes in the given tree is at most 5000. - The depth of the tree will be in the range [0, 1000]. - The integer values of tree nodes will be in the range [-10^4, 10^4].","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def maxDepth(root): Returns the maximum depth of a binary tree. if not root: return 0 left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Given a matrix of integers, your task is to find the submatrix with the largest possible sum. The submatrix should be contiguous and can be of any size (1x1 to NxM). For example: Input: ``` matrix = [[1, -2, 0], [-3, 4, 2], [2, -1, 3]] ``` Output: ``` 8 ``` Explanation: The submatrix with the largest sum is: ``` [[4, 2], [2, -1, [3]] ``` which has a sum of 8. Your goal is to write a function: ```python def max_submatrix_sum(matrix: List[List[int]]) -> int: ``` that takes a 2D list of integers and returns the sum of the submatrix with the largest sum. Constraints: - You are guaranteed that matrix will be a non-empty 2D array with at least one element. - All elements in the matrix will be integers.","solution":"from typing import List def max_submatrix_sum(matrix: List[List[int]]) -> int: def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far rows, cols = len(matrix), len(matrix[0]) max_sum = -float(\'inf\') for left_col in range(cols): temp = [0] * rows for right_col in range(left_col, cols): for row in range(rows): temp[row] += matrix[row][right_col] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"Given a string of lowercase letters, you need to find the length of the longest substring which consists of only vowels (a, e, i, o, u). -----Input----- The first line contains a single integer n (1 leq n leq 10^5), the length of the string. The second line contains the string s of length n (s_i in {text{a, e, i, o, u, b, c, d, ..., z}}). -----Output----- Print a single integer: the length of the longest substring consisting of only vowels. -----Examples----- Input 5 aeiou Output 5 Input 7 leetcode Output 2 Input 12 beautifulday Output 3 ---Note--- In the first test case, the entire string consists of vowels, so the length is 5. In the second test case, the longest substring of vowels is \\"ee\\" with length 2. In the third test case, the longest substring of vowels is \\"eau\\" with length 3.","solution":"def longest_vowel_substring_length(s): Returns the length of the longest substring consisting of only vowels. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} max_length = 0 current_length = 0 for char in s: if char in vowels: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Write a function `format_duration` that takes an integer parameter representing a duration in seconds, and returns a human-readable string describing this duration in years, days, hours, minutes, and seconds. For simplicity, assume: - 1 minute = 60 seconds - 1 hour = 60 minutes - 1 day = 24 hours - 1 year = 365 days If the duration is 0 seconds, return \\"now\\". Examples: ``` format_duration(62) --> \\"1 minute and 2 seconds\\" format_duration(3662) --> \\"1 hour, 1 minute and 2 seconds\\" ```","solution":"def format_duration(seconds): if seconds == 0: return \\"now\\" years, seconds = divmod(seconds, 365 * 24 * 60 * 60) days, seconds = divmod(seconds, 24 * 60 * 60) hours, seconds = divmod(seconds, 60 * 60) minutes, seconds = divmod(seconds, 60) time_parts = [] if years > 0: time_parts.append(f\\"{years} year\\" + (\\"s\\" if years != 1 else \\"\\")) if days > 0: time_parts.append(f\\"{days} day\\" + (\\"s\\" if days != 1 else \\"\\")) if hours > 0: time_parts.append(f\\"{hours} hour\\" + (\\"s\\" if hours != 1 else \\"\\")) if minutes > 0: time_parts.append(f\\"{minutes} minute\\" + (\\"s\\" if minutes != 1 else \\"\\")) if seconds > 0: time_parts.append(f\\"{seconds} second\\" + (\\"s\\" if seconds != 1 else \\"\\")) if len(time_parts) == 1: return time_parts[0] return \\", \\".join(time_parts[:-1]) + \\" and \\" + time_parts[-1]"},{"question":"A company wants to implement a new feature in their customer support system. They need a function that takes an array of customer queries and returns an array of the queries sorted by the frequency of their appearance. Queries that appear more frequently should come before less frequent ones. If two queries have the same frequency, they should be sorted in the order of their first appearance. Given an array of strings representing customer queries, write a function that returns an array of the queries sorted as described above. Assume the input is always going to be an array of strings. If the input is an empty array, an empty array should be returned.","solution":"from collections import Counter def sort_queries_by_frequency(queries): This function takes an array of customer queries and returns an array of the queries sorted by the frequency of their appearance. Queries that appear more frequently come before less frequent ones. If two queries have the same frequency, they are sorted in the order of their first appearance. if not queries: return [] # Count frequencies and preserve the order of first appearance query_counter = Counter(queries) unique_queries = list(dict.fromkeys(queries)) # Sort queries by frequency and first appearance order unique_queries.sort(key=lambda x: (-query_counter[x], queries.index(x))) return unique_queries"},{"question":"=====Function Descriptions===== A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. =====Problem Statement===== Your task is to find the longest palindromic subsequence in a given string s. =====Input Format===== A single line containing string s, which consists of lowercase English letters. =====Constraints===== 1 <= len(s) <= 1000 =====Output Format===== Output a single line containing the length of the longest palindromic subsequence in the string s.","solution":"def longest_palindromic_subsequence(s: str) -> int: Function to find the length of the longest palindromic subsequence in the given string. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n - 1, -1, -1): dp[i][i] = 1 for j in range(i + 1, n): if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"Steve is now interested in expanding his Minecraft village by constructing a series of roads to connect different buildings. Each road is represented by a direct path from one building to another and has a certain length in blocks. Steve wants to make sure his village has an efficient road network. Therefore, he needs to know the minimal length of the path that connects all buildings. In other words, he needs to find the Minimum Spanning Tree (MST) of his village\'s road network. You are given a list of roads, where each road is represented as a tuple `(building1, building2, length)`. Implement a function `find_min_spanning_tree(roads)` that takes the list of roads and returns the total minimal length of the roads required to connect all buildings. If the buildings cannot be connected, return `None`. # Example ```python roads = [ (\\"House\\", \\"Library\\", 7), (\\"House\\", \\"Market\\", 4), (\\"Library\\", \\"Market\\", 2), (\\"Library\\", \\"Farm\\", 6), (\\"Market\\", \\"Farm\\", 3) ] print(find_min_spanning_tree(roads)) # Output: 9 ``` # Constraints - Each road\'s length is a positive integer. - The function should handle up to 1000 roads efficiently. - The buildings in the list are represented by unique strings. --- Steve is also looking for contributors to expand this series of coding challenges or suggest improvements. Feel free to share your ideas!","solution":"def find_min_spanning_tree(roads): Function to find the total minimal length of the roads required to connect all buildings using Kruskal\'s algorithm. If buildings cannot be connected, return None. # Kruskal\'s algorithm is used here to find the MST # Firstly, we need to sort the roads based on their length sorted_roads = sorted(roads, key=lambda x: x[2]) # Creating a helper function to find the root of a node in a disjoint set def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Function to perform union of two sets def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Initialize variables parent = {} rank = {} mst_weight = 0 num_edges = 0 buildings = set() for road in roads: buildings.add(road[0]) buildings.add(road[1]) # Create disjoint sets for each building for building in buildings: parent[building] = building rank[building] = 0 edges = 0 for road in sorted_roads: building1, building2, length = road x = find(parent, building1) y = find(parent, building2) # If including this road doesn\'t cause a cycle, include it in the result if x != y: mst_weight += length union(parent, rank, x, y) edges += 1 # Stop if we have enough edges for MST if edges == len(buildings) - 1: break # Check if MST includes all the buildings if edges != len(buildings) - 1: return None return mst_weight"},{"question":"Given a string s and an integer k, find the number of unique substrings of length k in s. The output should be the count of such substrings. A substring is a contiguous sequence of characters within a string. A substring is considered unique if it does not repeat in the given string. Example 1: Input: s = \\"abcabc\\", k = 3 Output: 3 Explanation: The substrings of length 3 are \\"abc\\", \\"bca\\", and \\"cab\\". All are unique, so the output is 3. Example 2: Input: s = \\"aaaaa\\", k = 2 Output: 1 Explanation: The only substring of length 2 is \\"aa\\" and it repeats multiple times, so the count of unique substrings is 1. Example 3: Input: s = \\"abacab\\", k = 2 Output: 4 Explanation: The substrings of length 2 are \\"ab\\", \\"ba\\", \\"ac\\", and \\"ca\\". Each is unique, so the output is 4. Note: 1. The length of s will be at most 10^5. 2. k will be less than or equal to the length of s.","solution":"def count_unique_substrings(s, k): Returns the number of unique substrings of length k in s. if k > len(s): return 0 # Using a set to store unique substrings of length k substrings = set() for i in range(len(s) - k + 1): substr = s[i:i+k] substrings.add(substr) return len(substrings)"},{"question":"Write a function that takes a list of integers and returns the list sorted in ascending order, but all negative numbers should appear before any positive numbers without changing the relative order of negative and positive numbers. For instance: ``` Input: [3, -2, -1, 5, -4, 7, 8, -6] Output: [-2, -1, -4, -6, 3, 5, 7, 8] ``` Another example: ``` Input: [4, -3, 2, -1, 0, -5, 7] Output: [-3, -1, -5, 4, 2, 0, 7] ```","solution":"def sort_negatives_before_positives(lst): Returns a list sorted in ascending order with all negative numbers appearing before any positive numbers without changing the relative order of negative and positive numbers. negatives = [x for x in lst if x < 0] non_negatives = [x for x in lst if x >= 0] return negatives + non_negatives"},{"question":"A secret missionary mission requires decoding a sequence of shield activation codes embedded within a specific number pattern. The codes are generated by a numerical sequence that follows a special property: every even-indexed number (starting from index 1) in the sequence is the sum of the number in the previous odd index and its digital root. The digital root of a number is found by iteratively summing its digits until a single-digit number is obtained. The sequence starts with a known number N, and the task is to determine the shield activation code that is the K-th number in this sequence. ---Input--- The first line contains an integer N and the second line contains an integer K. ---Output--- Output the sentence \\"Shield activation code at position K is X.\\", where X is the K-th number in the sequence starting from N. ---Constraints--- 1 <= N <= 1000 1 <= K <= 50 ---Example--- Input: 678 5 Output: Shield activation code at position 5 is 697. Explanation: 1. 678 (first number, odd index) 2. 699 (second number; 678 + digital root of 678, which is 6+7+8=21 and 2+1=3, thus 678+21=699) 3. 699 (third number, repeating the 2nd for simplification as properties); 4. 697 (fourth number; 699 + digital root of 699, which is 6+9+9=24 and 2+4=6, thus 699+24=723 which represents a sequence leading to 697 by simplification) 5. 697 (fifth number, even index, represents same) Note: Ensure to derive correct digital root and calculation leading the simplified sequence.","solution":"def digital_root(n): Returns the digital root of a number. while n >= 10: n = sum(int(digit) for digit in str(n)) return n def shield_activation_code(N, K): Returns the K-th number in the sequence starting from N. sequence = [N] for i in range(1, K): if i % 2 == 0: # even index (1 based index, hence i % 2 == 0 means odd indexed positions) sequence.append(sequence[-1]) else: current = sequence[-1] next_num = current + digital_root(current) sequence.append(next_num) return sequence[K-1] def format_shield_activation_code(N, K): Formats the result according to the desired output. code = shield_activation_code(N, K) return f\\"Shield activation code at position {K} is {code}.\\""},{"question":"You are given an array of integers where each element represents the number of chocolates in a packet. You need to distribute the chocolates among students such that each student gets exactly one packet. You need to minimize the difference between the maximum and minimum chocolates given to the students. You will be provided the number of students, `m`, you need to distribute chocolate to. Write a function that takes in two parameters: `chocolates` (list of integers) and `m` (integer). The function should return the minimum difference between the maximum and minimum chocolates distributed to the students. Example: `distribute_chocolates([12, 4, 7, 9, 2, 23, 25, 41, 30, 40, 28, 42, 30, 44, 48, 43, 50], 7)` should return `10`, since the subset [4, 7, 9, 12, 23, 25, 30] gives the minimum difference between maximum and minimum chocolates distributed to the students.","solution":"def distribute_chocolates(chocolates, m): Returns the minimum difference between the maximum and minimum chocolates distributed to the students. if m == 0 or len(chocolates) == 0: return 0 # Sort the array of chocolates chocolates.sort() # Number of packets of chocolates n = len(chocolates) # Initialize the minimum difference as a large number min_diff = float(\'inf\') # Traverse through the sorted list to find the minimum difference in a subset of size m for i in range(n - m + 1): diff = chocolates[i + m - 1] - chocolates[i] if diff < min_diff: min_diff = diff return min_diff"},{"question":"You are given a list of ingredients and a set of recipes. Each recipe specifies a name, a list of ingredients required, and the quantity of each ingredient needed. You need to write a function that tells if a specific recipe can be made given the available ingredients. Write a function `can_make_recipe(available_ingredients, recipe)`. **Parameters:** - `available_ingredients` - a dictionary where the key is the ingredient name and the value is the quantity available. - `recipe` - a dictionary where the key is the ingredient name and the value is the quantity required for the recipe. **Output:** - The function should return `True` if the recipe can be made with the available ingredients, otherwise return `False`. **Example:** ```python available_ingredients = { \'flour\': 10, \'sugar\': 5, \'eggs\': 6, \'milk\': 3, \'butter\': 2 } recipe = { \'flour\': 5, \'sugar\': 2, \'eggs\': 4 } print(can_make_recipe(available_ingredients, recipe)) # Output: True recipe = { \'flour\': 8, \'sugar\': 5, \'eggs\': 4, \'milk\': 4 } print(can_make_recipe(available_ingredients, recipe)) # Output: False ``` **Constraint:** - `available_ingredients` and `recipe` will not contain negative quantities. - Ingredient names will be lowercase strings.","solution":"def can_make_recipe(available_ingredients, recipe): Determines if a recipe can be made with available ingredients. Parameters: - available_ingredients (dict): A dictionary with ingredient names as keys and quantities as values. - recipe (dict): A dictionary with ingredient names as keys and quantities needed as values. Returns: - bool: True if the recipe can be made with the available ingredients, otherwise False. for ingredient, required_qty in recipe.items(): if ingredient not in available_ingredients or available_ingredients[ingredient] < required_qty: return False return True"},{"question":"# Palindrome Permutation Check Introduction In this problem, your goal is to determine if any permutation of the letters of a given string can form a palindrome. A *palindrome* is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, \\"madam\\" and \\"racecar\\" are palindromes, while \\"hello\\" is not. Task Given a string `str`, your function should return `True` if any permutation of `str` can form a palindrome and `False` otherwise. # Input - A single string `str` which may include whitespace and punctuation. - The input string will contain only ASCII characters. # Output - Return `True` if any permutation of the input string can form a palindrome, otherwise return `False`. # Examples - **Input:** `\\"Tact Coa\\"` **Output:** `True` - (\\"taco cat\\", \\"atco cta\\" are palindromes permutations ignoring spaces and case) - **Input:** `\\"Able was I ere I saw Elba\\"` **Output:** `True` - (\\"able was i ere i saw elba\\" is a palindrome permutation) - **Input:** `\\"Hello\\"` **Output:** `False` # Constraints - The input string `str` will have a length between 1 and 1000. # Notes - Ignore spaces and capitalization while determining if the permutations can form a palindrome.","solution":"def can_form_palindrome(s): Determines if any permutation of the letters of a given string can form a palindrome. We ignore non-alphanumeric characters and consider the string case-insensitively. from collections import Counter # Clean the string: remove spaces and convert to lowercase clean_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Count the frequency of each character char_count = Counter(clean_s) # A string can form a palindrome if it has at most one character with an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Write a function that takes a string consisting of digits and returns the sum of all the digits in the string. You should ignore any non-digit characters in the string. # Examples ``` \\"123abc\\" => 6 // 1 + 2 + 3 \\"4d5e6\\" => 15 // 4 + 5 + 6 \\"abc\\" => 0 // No digits to sum \\"12.34\\" => 10 // 1 + 2 + 3 + 4 ```","solution":"def sum_of_digits(s): Returns the sum of all the digits in the string s, ignoring any non-digit characters. return sum(int(char) for char in s if char.isdigit())"},{"question":"**Instructions** You are tasked to write a function that takes in an array of positive integers and returns an object (or dictionary) that categorizes each input number into `prime`, `composite`, or `neither`. 1. **Prime numbers:** Numbers greater than 1 that have only two divisors: 1 and themselves. 2. **Composite numbers:** Numbers greater than 1 that are not prime, have additional divisors. 3. **Neither:** This includes numbers less than 2, such as 0 and 1. The returned dictionary should have three keys: `\'prime\'`, `\'composite\'`, and `\'neither\'`, each associated with a list of input numbers that fall into that category. **Use Cases** The output should be a dictionary with the numbers sorted accordingly within their classification groups. **Examples** Input: ```python categorize_numbers([2, 3, 4, 5, 1, 0, 15, 23, 25]) ``` Output: ~~~~ { \'prime\': [2, 3, 5, 23], \'composite\': [4, 15, 25], \'neither\': [1, 0] } ~~~~ Input: ```python categorize_numbers([10, 20, 30, 40]) ``` Output: ~~~~ { \'prime\': [], \'composite\': [10, 20, 30, 40], \'neither\': [] } ~~~~ Input: ```python categorize_numbers([7, 11, 13, 17]) ``` Output: ~~~~ { \'prime\': [7, 11, 13, 17], \'composite\': [], \'neither\': [] } ~~~~ Good Luck!","solution":"from math import isqrt def is_prime(n): Helper function to determine if a number is prime. Returns True if the number is prime, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def categorize_numbers(numbers): Categorizes numbers into prime, composite, or neither. Parameters: numbers (list of int): List of positive integers to categorize. Returns: dict: A dictionary with keys \'prime\', \'composite\', and \'neither\'. Each key maps to a list of numbers in the respective category. categorized = {\'prime\': [], \'composite\': [], \'neither\': []} for number in numbers: if number < 2: categorized[\'neither\'].append(number) elif is_prime(number): categorized[\'prime\'].append(number) else: categorized[\'composite\'].append(number) return categorized"},{"question":"# Perfect Number A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding itself. For instance, 6 is a perfect number because `1 + 2 + 3 = 6`. Your task Write a function `is_perfect_number(n)` that determines whether the given number `n` (where `0 < n < 1000000`) is a perfect number. The function should return `True` if the number is perfect, and `False` otherwise. Examples | **input** | **output** | | ---------|---------| | 6 | True | | 28 | True | | 12 | False | | 496 | True | | 8128 | True | Constraints The input number `n` will be an integer within the range `(0, 1000000)`.","solution":"def is_perfect_number(n): Determines if a number is a perfect number. Args: n (int): The number to check (0 < n < 1000000). Returns: bool: True if the number is perfect, False otherwise. if n <= 0 or n >= 1000000: raise ValueError(\\"The number must be between 0 and 1000000.\\") sum_divisors = sum([i for i in range(1, n) if n % i == 0]) return sum_divisors == n"},{"question":"Write a function that takes a list of words and returns the longest word in the list along with its length. If there are multiple words with the same maximum length, return the first one that appears in the list. For example: Input: [\\"apple\\", \\"banana\\", \\"kiwi\\", \\"strawberry\\", \\"blueberry\\"] Output: (\\"strawberry\\", 10) Input: [\\"dog\\", \\"cat\\", \\"elephant\\", \\"tiger\\"] Output: (\\"elephant\\", 8) Your function should handle the case of an empty list by returning an empty string and a length of 0. Input: [] Output: (\\"\\", 0) The function signature should be: ```python def longest_word(words: list) -> tuple: ```","solution":"def longest_word(words: list) -> tuple: Returns the longest word in the list along with its length. If multiple words have the same length, the first one is returned. If the list is empty, returns an empty string and 0. if not words: return (\\"\\", 0) longest = max(words, key=len) return (longest, len(longest))"},{"question":"Sentence Reversal in Groups Implement a function that reverses the words in a given string, but only within specified groups. Groups are separated by a delimiter. The delimiter itself does not change its position. # Function Signature ```python def reverse_groups(s: str, delimiter: str) -> str: pass ``` # Input * `s` (str): The input string containing words separated by the delimiter. * `delimiter` (str): The character that separates the groups in the string. # Output * (str): The modified string with words reversed within each group. # Examples ```python assert reverse_groups(\\"hello world|this is fun\\", \\"|\\") == \\"world hello|fun is this\\" assert reverse_groups(\\"abc def ghi|jkl mno pqr\\", \\"|\\") == \\"ghi def abc|pqr mno jkl\\" ``` # Notes * Each group is a sequence of words separated by spaces. * Words within a group should be reversed but words should maintain their order within the whole string. * Words must be separated by a single space. * The string can be empty or contain any number of delimiters.","solution":"def reverse_groups(s: str, delimiter: str) -> str: Reverses the words within each group of a string separated by a given delimiter. Args: s (str): The input string containing words separated by the delimiter. delimiter (str): The character that separates the groups in the string. Returns: str: The modified string with words reversed within each group. if not s: return s groups = s.split(delimiter) # Reverse the words within each group reversed_groups = [] for group in groups: words = group.split() reversed_group = \' \'.join(reversed(words)) reversed_groups.append(reversed_group) # Join the reversed groups with the delimiter result = delimiter.join(reversed_groups) return result"},{"question":"You are a bioengineering researcher working on developing new breeds of bacteria. These bacteria replicate at specific rates, and for your experiments, you need to mix bacteria from different colonies. However, the target is to achieve the desired median replication rate after mixing bacteria from various colonies. You have text{N} colonies of bacteria, each having a distinct replication rate mathbf{r_i}. In one operation, you can mix any two colonies to form a new colony whose replication rate is the average of the two. You can repeat this until you are left with only one colony. Your task is to determine the minimum possible median replication rate of the final colony. While mixing, if text{N} is even, you need to report the average of the two middle values of the replication rates. -----Input----- The first line of input contains a single integer text{T}, the number of test cases. For each test case: - The first line contains a single integer text{N}, the number of colonies. - The second line contains text{N} space-separated integers, the replication rates of the colonies. -----Output----- For each test case, print one line containing the minimum possible median replication rate of the final colony rounded to six decimal places. -----Constraints----- 1 leq text{T} leq 10 2 leq text{N} leq 10^4 1 leq mathbf{r_i} leq 10^9 -----Sample Input----- 2 2 3 9 4 1 2 3 4 -----Sample Output----- 6.000000 2.500000 -----Explanation----- In the first test case, mixing the two colonies with replication rates 3 and 9 results in a colony with replication rate 6. In the second test case, the optimal sequence of mix operations leads to an average of 2.5, which becomes the median after mixing.","solution":"def min_possible_median(T, test_cases): results = [] for case in test_cases: N, rates = case rates.sort() if N % 2 == 0: median = (rates[N // 2 - 1] + rates[N // 2]) / 2 else: median = rates[N // 2] results.append(f\\"{median:.6f}\\") return results"},{"question":"Write a function `string_lengths` that takes a list of strings and returns a list of integers representing their respective lengths. The function should handle an empty list by returning an empty list. Here\'s an example of the required output: ```python string_lengths([\'hello\', \'world\', \'\', \'Python\', \'is\', \'fun\']) # [5, 5, 0, 6, 2, 3] ``` ```haskell stringLengths [\\"hello\\", \\"world\\", \\"\\", \\"Python\\", \\"is\\", \\"fun\\"] `shouldBe` [5, 5, 0, 6, 2, 3] ```","solution":"def string_lengths(strings): Takes a list of strings and returns a list of integers representing their respective lengths. Parameters: strings (list of str): A list of strings Returns: list of int: A list of integers representing the lengths of the strings return [len(s) for s in strings]"},{"question":"Given an array of integers, return the smallest window (subarray) that needs to be sorted in increasing order so that the entire array becomes sorted in increasing order. If the array is already sorted, return an empty array. Example: Input: [2, 6, 4, 8, 10, 9, 15] Output: [6, 4, 8, 10, 9] Input: [1, 2, 3, 4, 5] Output: []","solution":"def find_unsorted_subarray(nums): Returns the smallest window (subarray) that needs to be sorted so that the entire array becomes sorted. If the array is already sorted, returns an empty array. n = len(nums) start, end = -1, -1 # Initializing the sorted array to detect the inequality positions. sorted_nums = sorted(nums) for i in range(n): if nums[i] != sorted_nums[i]: if start == -1: start = i end = i if start == -1: # This means the array is already sorted return [] return nums[start:end+1]"},{"question":"Write a function `duplicate_encode` that takes a string of characters as input and returns a new string where each character in the new string is \'(\' if that character appears only once in the original string, or \')\' if that character appears more than once in the original string. Your function should ignore the case when determining if a character is a duplicate. **Examples:** ``` duplicate_encode(\\"din\\") -> \\"(((\\" duplicate_encode(\\"recede\\") -> \\"()()()\\" duplicate_encode(\\"Success\\") -> \\")())())\\" duplicate_encode(\\"(( @\\") -> \\"))((\\" ``` The parameter of duplicate_encode is a string which can include any characters.","solution":"def duplicate_encode(word): Encodes a string such that each character in the new string is \'(\' if that character appears only once in the original string, or \')\' if that character appears more than once in the original string. The function ignores the case of the characters. word = word.lower() return \'\'.join([\'(\' if word.count(ch) == 1 else \')\' for ch in word])"},{"question":"Write a function that determines if a given string of parentheses is balanced. A string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is considered balanced if: - Open brackets are closed by the same type of brackets. - Open brackets are closed in the correct order. -----Input:----- - First line contains number of testcase t. - Each testcase contains a single line of input, a string s representing the sequence of parentheses. -----Output:----- For each testcase, output \\"YES\\" if the string is balanced, otherwise \\"NO\\". -----Constraints----- - 1 leq T leq 100 - 1 leq |s| leq 10^3 - Each character in the string will be one of \'(\', \')\', \'{\', \'}\', \'[\' or \']\'. -----Sample Input:----- 3 {[()]} {[(])} {{[[(())]]}} -----Sample Output:----- YES NO YES","solution":"def is_balanced(s): Determines if the given string of parentheses is balanced. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket.keys(): if stack == [] or stack.pop() != matching_bracket[char]: return \\"NO\\" else: return \\"NO\\" return \\"YES\\" if stack == [] else \\"NO\\" def check_balanced_parentheses(test_cases): results = [] for s in test_cases: results.append(is_balanced(s)) return results"},{"question":"Petya has recently taken an interest in street art and has decided to paint a mural on a wall composed of n tiles placed in a single row. Each tile requires one specific color out of m possible colors, denoted by 1, 2, ldots, m. Petya follows a unique method for choosing colors – he can paint a segment of consecutive tiles in one color in one operation. The aim is to minimize the number of operations required to paint the entire wall according to a sequence of desired colors provided. For instance, if the sequence of colors that Petya desires is [2, 1, 2, 3, 1], he can choose the following operations: 1. Paint the first tile with color 2. 2. Paint the second tile with color 1. 3. Paint the third tile with color 2. 4. Paint the fourth tile with color 3. 5. Paint the fifth tile with color 1. This sequence requires 5 operations. Note that although he paints individual tiles in this example, he could choose to paint segments of consecutive tiles that have the same color in a single operation. Write a program to determine the minimum number of operations needed to paint the wall according to the desired color sequence. -----Input----- The first line contains one positive integer t (1 le t le 10^4) — the number of test cases. Each of the next t test cases begins with two integers n (1 le n le 10^5) and m (1 le m le 100) — the number of tiles and the number of possible colors, respectively. The second line of each test case contains n integers c_1, c_2, ldots, c_n (1 le c_i le m) — the desired color sequence for the i-th test case. The sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output one integer — the minimum number of operations required to paint the wall according to the desired color sequence for each test case. -----Example----- Input 3 5 3 2 1 2 3 1 6 4 1 1 2 3 4 4 1 5 5 Output 5 4 1","solution":"def min_operations(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] colors = test_cases[i][1] operations = 1 for j in range(1, n): if colors[j] != colors[j - 1]: operations += 1 results.append(operations) return results"},{"question":"A city has a system of one-way roads connecting various junctions. Your task is to determine the shortest path from a specific starting junction to a specific destination junction. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains three integers, N, R, and Q. N denotes the number of junctions, R denotes the number of roads, and Q denotes the number of queries. The next R lines each contain three integers, U, V, and W, indicating a one-way road from junction U to junction V with a travel time of W. The next Q lines each contain two integers, S and D, representing a query that asks for the shortest travel time from junction S to junction D. -----Output----- For each query, output the shortest travel time from the starting junction to the destination junction. If it is impossible to reach the destination from the starting junction, output -1. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 1000 - 1 ≤ R ≤ 10000 - 1 ≤ Q ≤ 100 - 1 ≤ U, V ≤ N - 1 ≤ W ≤ 1000 - 1 ≤ S, D ≤ N -----Example----- Input 1 5 6 3 1 2 10 2 3 5 3 4 3 4 5 2 1 3 20 2 5 15 1 5 2 4 4 2 Output 20 8 -1","solution":"import heapq def dijkstra(n, graph, start): distances = {i: float(\\"inf\\") for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_paths(test_cases): results = [] for n, r, q, roads, queries in test_cases: graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) for s, d in queries: distances = dijkstra(n, graph, s) if distances[d] == float(\\"inf\\"): results.append(-1) else: results.append(distances[d]) return results # This function reads input from provided input format and calls shortest_paths def solve_city_roads(input_data): input_lines = input_data.split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N, R, Q = map(int, input_lines[index].split()) index += 1 roads = [] for _ in range(R): U, V, W = map(int, input_lines[index].split()) roads.append((U, V, W)) index += 1 queries = [] for _ in range(Q): S, D = map(int, input_lines[index].split()) queries.append((S, D)) index += 1 test_cases.append((N, R, Q, roads, queries)) results = shortest_paths(test_cases) return results"},{"question":"=====Function Descriptions===== collections.Counter A Counter is a subclass of dict that\'s specifically designed to count the occurrences of immutable objects. It works by increasing the count for an object whenever it is added to the Counter. Example Code >>> from collections import Counter >>> >>> my_list = [\'a\', \'b\', \'c\', \'a\', \'b\', \'a\'] >>> counter = Counter(my_list) >>> >>> print(counter) Counter({\'a\': 3, \'b\': 2, \'c\': 1}) =====Problem Statement===== You are tasked with analyzing log messages from a web server to determine which messages are most common. Each message comes with a timestamp and a severity level. You need to identify the most frequent message for each severity level and how many times it was logged. message = The log message content. timestamp = The time when the message was logged. severity = The severity level of the message (INFO, WARNING, ERROR, etc.) =====Input Format===== The first line contains the number of log entries, N. The next N lines contain each log entry, consisting of the log message, the timestamp, and the severity level, separated by a space. =====Constraints===== 0<N≤1000 =====Output Format===== Print each severity level and the most common message associated with it, along with the count. If multiple messages have the same highest count, print any one of them. Example Input 5 ServerStarted 2023-01-01T12:00:00 INFO ServerStarted 2023-01-01T12:01:00 INFO DiskFull 2023-01-01T12:02:00 ERROR DiskFull 2023-01-01T12:03:00 ERROR ConnectionLost 2023-01-01T12:04:00 WARNING Example Output INFO ServerStarted 2 ERROR DiskFull 2 WARNING ConnectionLost 1","solution":"from collections import Counter from collections import defaultdict def analyze_log_messages(log_entries): Analyzes log messages to find the most common message per severity level. :param log_entries: List of log entries. :return: Dictionary where key is the severity level and value is a tuple with the most common message and its count. severity_messages = defaultdict(Counter) for entry in log_entries: parts = entry.split() message = \' \'.join(parts[:-2]) severity = parts[-1] severity_messages[severity][message] += 1 result = {} for severity, counter in severity_messages.items(): most_common_message, count = counter.most_common(1)[0] result[severity] = (most_common_message, count) return result"},{"question":"Given an array of non-negative integers representing the heights of columns where the width of each column is 1, return the maximum amount of water that can be trapped between the columns after raining. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The most water can be trapped between columns at index 1 and 7, filling 1 unit of water between index 1 and 2, 2 units between 2 and 5, and 3 units between 5 and 7. Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Explanation: Water traps as 1 unit between index 1 and 2, 3 units between index 2 and 3, and 5 units between index 3 and 5, and 9 units overall. Note: - The length of the height array is at least 2 and at most 100000. - The height of each column is between 0 and 10000.","solution":"def trap(height): Given an array height representing the heights of columns where the width of each column is 1, returns the maximum amount of water that can be trapped between the columns after raining. n = len(height) if n == 0: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"In a functional programming language like Haskell, recursion and pattern matching are often used to solve problems. One of the common challenges is solving problems related to list manipulation. In this task, you will write a function that determines if a list of integers is a \\"zigzag\\" list. A list is considered a \\"zigzag\\" if each element is either strictly greater than or strictly less than its preceding element. For example, [1, 3, 2, 4, 3] is a \\"zigzag\\" list because 1 < 3 > 2 < 4 > 3. However, [1, 2, 3, 4] and [1, 1, 2, 2] are not. Write a function `isZigzag :: [Int] -> Bool` that takes a list of integers and returns `True` if the list is a \\"zigzag\\" list and `False` otherwise. Here are some examples: ``` isZigzag [1, 3, 2, 4, 3] -- Should return True isZigzag [1, 2, 3, 4] -- Should return False isZigzag [10, 5, 10, 5, 10] -- Should return True isZigzag [1] -- Should return True (a single-element list is trivially a zigzag) isZigzag [] -- Should return True (an empty list is trivially a zigzag) ``` Note that a list with fewer than two elements is trivially considered a \\"zigzag\\" list.","solution":"def is_zigzag(lst): Determines if a list of integers is a \\"zigzag\\" list. A list is a \\"zigzag\\" list if each element is either strictly greater than or strictly less than its preceding element. Parameters: lst (list of int): The input list of integers. Returns: bool: True if the list is a \\"zigzag\\" list, else False. n = len(lst) if n < 2: return True # Trivially true for lists with fewer than two elements for i in range(1, n - 1): if not ((lst[i-1] < lst[i] > lst[i+1]) or (lst[i-1] > lst[i] < lst[i+1])): return False # Found a non-zigzag pattern return True"},{"question":"# Task You are given a string of lowercase letters and an integer `k`. Your goal is to determine the longest substring in the given string where each character appears at least `k` times. # Input/Output - `[input]` string `s` A string of lowercase letters. - `[input]` integer `k` A positive integer indicating the minimum frequency of each character in the substring. - `[output]` an integer The length of the longest substring where every character appears at least `k` times. If no such substring exists, return 0.","solution":"def longest_substring_with_k_repeats(s, k): def helper(s, k): if len(s) < k: return 0 char_count = {char: s.count(char) for char in set(s)} for mid in range(len(s)): if char_count[s[mid]] < k: left_part = helper(s[:mid], k) right_part = helper(s[mid+1:], k) return max(left_part, right_part) return len(s) return helper(s, k)"},{"question":"In a post-apocalyptic world, survivors communicate using a new language that consists of unique code words. Every code word is constructed using a combination of lowercase alphabets only. Recently, survivors discovered a hidden message encrypted within a large string of random lowercase letters. They believe this string contains several valid code words concatenated together, separated by unused letters. Given a dictionary of valid code words and the encrypted message, survivors want to know the maximum number of code words that can be formed from the message string. Your task is to write a program that determines the maximum number of valid code words that can be formed from a given message using the provided dictionary of code words. -----Input:----- The first line of input contains T, the number of test cases. For each test case: - The first line contains an integer M, the number of valid code words in the dictionary. - The next M lines each contain a single valid code word. - The final line contains the encrypted message string consisting of only lowercase letters. -----Output:----- For each test case, output the maximum number of valid code words that can be formed from the encrypted message string. -----Constraints:----- - 1 ≤ T ≤ 10 - 1 ≤ M ≤ 100 - 1 ≤ Length of each code word ≤ 50 - 1 ≤ Length of the encrypted message string ≤ 1000 -----Example:----- Input: 2 3 apple pear pie apwpelearpi 2 rock star roctkstarrckor Output: 2 3 -----Explanation:----- In the first test case: - The valid code words are \\"apple\\", \\"pear\\", and \\"pie\\". - The encrypted message \\"apwpelearpi\\" can be broken down into \\"apple\\" and \\"pie\\". The \\"w\\" and some other letters do not match any code word. In the second test case: - The valid code words are \\"rock\\" and \\"star\\". - The encrypted message \\"roctkstarrckor\\" can be broken down into \\"rock\\", \\"star\\", and \\"rock\\". Therefore, for the first test case, the maximum number of code words is 2, and for the second test case, it is 3.","solution":"from collections import Counter def max_code_words(T, test_cases): results = [] for case in test_cases: M, code_words, message = case[\'M\'], case[\'code_words\'], case[\'message\'] word_count = 0 # Create a frequency dict for the message message_counter = Counter(message) for word in code_words: word_counter = Counter(word) min_count = float(\'inf\') # Compute the max number of this word we can make from the message for char in word_counter: if char in message_counter: min_count = min(min_count, message_counter[char] // word_counter[char]) else: min_count = 0 break word_count += min_count # Update message_counter by removing used counts for char in word_counter: message_counter[char] -= word_counter[char] * min_count results.append(word_count) return results"},{"question":"Find the length of the longest substring without repeating characters in a given string. **Input:** - A single string `s` that consists of ASCII characters. **Output:** - An integer representing the length of the longest substring without repeating characters. **Example:** ``` Input: \\"abcabcbb\\" Output: 3 Explanation: The longest substring without repeating characters is \\"abc\\", with a length of 3. Input: \\"bbbbb\\" Output: 1 Explanation: The longest substring without repeating characters is \\"b\\", with a length of 1. Input: \\"pwwkew\\" Output: 3 Explanation: The longest substring without repeating characters is \\"wke\\", with a length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. ``` **Constraints:** - 0 ≤ |s| ≤ 5 * 10^4","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"Task: Write a function `scrabble_word_value` which accepts a word and calculates the Scrabble word score for that word based on the standard Scrabble letter values. # The letter values are: A, E, I, O, U, L, N, S, T, R: 1 point D, G: 2 points B, C, M, P: 3 points F, H, V, W, Y: 4 points K: 5 points J, X: 8 points Q, Z: 10 points # Example: ```python >>> scrabble_word_value(\'HELLO\') 8 >>> scrabble_word_value(\'SCRABBLE\') 14 ``` # Libraries/Recommendations: Python: Use built-in functions and avoid any external libraries for simplicity. # Notes: * Consider both uppercase and lowercase letters to have the same score. * Ensure that the word only contains alphabetic characters; otherwise, return 0. * Aim for clean and readable code.","solution":"def scrabble_word_value(word): Calculates the Scrabble word score for the given word based on the standard Scrabble letter values. Parameters: word (str): The word to calculate the score for. Returns: int: The total Scrabble score for the word. letter_values = { 1: \\"AEIOULNSTR\\", 2: \\"DG\\", 3: \\"BCMP\\", 4: \\"FHVWY\\", 5: \\"K\\", 8: \\"JX\\", 10: \\"QZ\\" } # Ensure the word is only alphabetic characters if not word.isalpha(): return 0 word = word.upper() score = 0 for char in word: for value, letters in letter_values.items(): if char in letters: score += value break return score"},{"question":"Comparing Arrays - Are They The Same? Misha is working on a problem where he needs to compare two arrays. He wants to check if the elements in one array are the squares of the elements in the other array, regardless of the order. However, he is struggling to get it right as sometimes one array may contain extra elements or may be missing elements. Help Misha fix his function. Write a function `compare_arrays(arr1, arr2)` that takes in two arrays of integers. The function should return `true` if each element in the first array is the square root of an element in the second array and vice versa. Otherwise, it should return `false`. Example: ```python compare_arrays([2, 3, 4], [4, 9, 16]) # returns true compare_arrays([2, 3, 5], [4, 9, 25, 36]) # returns false compare_arrays([2, 3, 4], [4, 9, 15]) # returns false ```","solution":"def compare_arrays(arr1, arr2): Returns True if each element in arr1 is the square root of an element in arr2 and vice versa. Otherwise, returns False. # Check if both arrays are not empty and have the same length if not arr1 or not arr2 or len(arr1) != len(arr2): return False # Create a dictionary to count occurrences of each element in arr1^2 and arr2 count_arr1_squared = {} count_arr2 = {} # Count occurrences of each element in arr1 squared for num in arr1: squared_value = num * num if squared_value in count_arr1_squared: count_arr1_squared[squared_value] += 1 else: count_arr1_squared[squared_value] = 1 # Count occurrences of each element in arr2 for num in arr2: if num in count_arr2: count_arr2[num] += 1 else: count_arr2[num] = 1 # Compare both counts return count_arr1_squared == count_arr2"},{"question":"Given an array of integers nums, a harmonious array is an array where the difference between its maximum value and its minimum value is exactly 1. Your task is to find the longest harmonious subsequence in nums. The subsequence must be a subset of the array and does not need to be contiguous. Return the length of the longest harmonious subsequence in nums. If no such subsequence exists, return 0. Example 1: Input: nums = [1,3,2,2,5,2,3,7] Output: 5 Explanation: The longest harmonious subsequence is [3,2,2,2,3]. Example 2: Input: nums = [1,2,3,4] Output: 2 Explanation: The longest harmonious subsequence is [1,2] or [2,3] or [3,4]. Example 3: Input: nums = [1,1,1,1] Output: 0 Explanation: There is no harmonious subsequence in the array. Constraints: 1 <= nums.length <= 20,000 -10^9 <= nums[i] <= 10^9","solution":"from collections import Counter def findLHS(nums): Returns the length of the longest harmonious subsequence. A harmonious array is one where the difference between the maximum and minimum value is exactly 1. count = Counter(nums) longest = 0 for num in count: if num + 1 in count: longest = max(longest, count[num] + count[num + 1]) return longest"},{"question":"Given a binary matrix of size `n x m`, we define a rectangular sub-matrix as valid if all the cells in the sub-matrix have the same value (either all 0s or all 1s). You are to determine the largest possible area of a valid rectangular sub-matrix within the given binary matrix. -----Input:----- - The first line of input contains two space-separated integers `n` and `m`. - The next `n` lines each contains `m` space-separated integers representing the binary matrix. -----Output:----- Output a single integer, the largest area of a valid rectangular sub-matrix. -----Constraints----- - 1 leq n, m leq 1000 - The matrix consists of only 0s and 1s. -----Sample Input:----- 4 5 1 0 0 1 0 1 1 1 1 0 1 1 1 1 0 0 0 0 0 1 -----Sample Output:----- 8 -----Explanation:----- The largest valid rectangular sub-matrix is: ``` 1 1 1 1 1 1 1 1 ``` with an area of 2 rows * 4 columns = 8.","solution":"def largest_valid_submatrix(n, m, matrix): def max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area max_area = 0 for i in range(n): if i > 0: for j in range(m): if matrix[i][j]: matrix[i][j] += matrix[i-1][j] max_area = max(max_area, max_histogram_area(matrix[i])) return max_area def parse_input_and_find_area(data): data = data.strip().split(\'n\') n, m = map(int, data[0].split()) matrix = [list(map(int, row.split())) for row in data[1:]] return largest_valid_submatrix(n, m, matrix)"},{"question":"Your Task Create a function that finds and returns the first unique character in a given string. Requirements * The input string will contain only lowercase alphabetical characters. * If there is no unique character, return `None`. Examples * `first_unique(\\"adbca\\")` should return `\'d\'`. * `first_unique(\\"aabb\\")` should return `None`.","solution":"def first_unique(s): Returns the first unique character in the string s. If there is no unique character, return None. char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that has a count of 1 for char in s: if char_count[char] == 1: return char return None"},{"question":"Write a function that receives a list of integers and returns the count of unique integers in the list. Examples: ``` [1, 2, 3, 4, 5] -> returns 5 [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] -> returns 4 [7, 7, 7, 7, 7, 7, 7, 7, 7] -> returns 1 ```","solution":"def count_unique_integers(lst): Returns the count of unique integers in the list. return len(set(lst))"},{"question":"Given a binary tree, return the list of node values in vertical order traversal. Nodes in the same vertical order should be listed together from top to bottom. If two nodes are in the same row and column, the one with the lower value should appear first. For example, given the following binary tree: ``` 3 / 9 8 / 4 0 ``` The vertical order traversal of the binary tree would be: ``` [ [4], [9], [3, 0], [8] ] ``` Nodes 3 and 0 are in the same column, but since 3 is higher up in the tree, it appears before 0 in the output. Node 9 is in a different column from all other nodes, so it appears in its own column. Function Signature: ``` def vertical_order_traversal(root: Optional[TreeNode]) -> List[List[int]]: pass ``` Where `TreeNode` is defined as: ``` class TreeNode: def __init__(self, val: int = 0, left: Optional[TreeNode] = None, right: Optional[TreeNode] = None): self.val = val self.left = left self.right = right ``` # Constraints: - The number of nodes in the tree will be in the range `[1, 1000]`. - `-1000 <= Node.val <= 1000`","solution":"from typing import Optional, List, Dict from collections import defaultdict, deque class TreeNode: def __init__(self, val: int = 0, left: Optional[\'TreeNode\'] = None, right: Optional[\'TreeNode\'] = None): self.val = val self.left = left self.right = right def vertical_order_traversal(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] # Dictionary that maps column number to list of (row, value) column_table = defaultdict(list) # Queue for BFS: (node, row, column) queue = deque([(root, 0, 0)]) while queue: node, row, column = queue.popleft() if node: column_table[column].append((row, node.val)) queue.append((node.left, row + 1, column - 1)) queue.append((node.right, row + 1, column + 1)) # Sort columns by column number and respective node values by row number sorted_columns = sorted(column_table.keys()) result = [] for column in sorted_columns: # Sort first by row, then by value if two nodes are in the same row and column column_values = sorted(column_table[column], key=lambda x: (x[0], x[1])) result.append([val for row, val in column_values]) return result"},{"question":"**Find the missing element** You are given two arrays. The first array is `arr1` which contains a set of integers. The second array is `arr2` which is `arr1` shuffled and one integer removed. Your task is to find the missing integer from `arr2`. Write a function `find_missing_element(arr1, arr2)` that receives the two arrays and returns the missing integer. Notes: - The input arrays will always have at least one integer. - Each integer in the input arrays will be unique. Example: ```python find_missing_element([1, 2, 3], [3, 1]) # should return 2 find_missing_element([5, 6, 7, 8], [8, 5, 7]) # should return 6 ```","solution":"def find_missing_element(arr1, arr2): Returns the missing element from arr2 which is present in arr1. Parameters: arr1 (List[int]): The original array with all elements. arr2 (List[int]): The shuffled array with one element missing. Returns: int: The missing element. return sum(arr1) - sum(arr2)"},{"question":"----- Statement ----- You are given an integer array and a target integer. Your task is to check if there exist two distinct indices i and j such that nums[i] + nums[j] is equal to the target integer. If such indices exist, return the two indices as a tuple (i, j). If there are multiple valid pairs, return the pair with the smallest index i. If still tied, return the pair having the smaller index j. If no such indices exist, return None. ----- Input ----- The first line contains the number of test cases T. Each test case consists of two lines. - The first line contains two integers n and target, where n (1 ≤ n ≤ 10^5) is the number of elements in the array, and target is the target sum. - The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array. ----- Output ----- Output T lines. For each test case, output a tuple (i, j) where nums[i] + nums[j] equals the target integer, or None if no such pair exists. ----- Sample Input ----- 2 4 9 2 7 4 3 3 10 5 5 5 ----- Sample Output ----- (0, 1) None","solution":"def find_pair_with_target_sum(n, target, nums): Returns the indices of two numbers in the list that sum up to the target, or None if no such pair exists. index_map = {} for i in range(n): complement = target - nums[i] if complement in index_map: return (index_map[complement], i) index_map[nums[i]] = i return None def process_test_cases(test_cases): Processes multiple test cases and return results for each. results = [] for case in test_cases: n, target, nums = case result = find_pair_with_target_sum(n, target, nums) results.append(result) return results"},{"question":"=====Problem Statement===== You are given a single string containing a sentence. Your task is to write a function that replaces all spaces in the sentence with hyphens (\\"-\\") and then print the modified sentence. =====Input Format===== A single line containing a sentence. =====Constraints===== The length of the sentence ≤ 100. =====Output Format===== Print the modified sentence where all spaces are replaced with hyphens. =====Sample Input===== hello world this is python =====Sample Output===== hello-world-this-is-python","solution":"def replace_spaces_with_hyphens(sentence): Replaces all spaces in the sentence with hyphens. return sentence.replace(\' \', \'-\')"},{"question":"Implement a function that will read an input string and return its first non-repeating character. If there is no such character in the string, return an empty string. You should be able to handle Unicode characters properly. ``` def first_non_repeating_char(input_str: str) -> str: # Your code here # Examples: # first_non_repeating_char(\\"swiss\\") -> \\"w\\" # first_non_repeating_char(\\"teeter\\") -> \\"r\\" # first_non_repeating_char(\\"aabb\\") -> \\"\\" ``` # Input # A string of characters which may include Unicode characters. # Expected Output # A single character which is the first non-repeating character in the string, or an empty string if no such character exists.","solution":"def first_non_repeating_char(input_str: str) -> str: Returns the first non-repeating character in the input string. If there is no non-repeating character, returns an empty string. from collections import Counter # Count the frequency of each character in the input string char_count = Counter(input_str) # Iterate over the input string to find the first non-repeating character for char in input_str: if char_count[char] == 1: return char # If no non-repeating character is found, return an empty string return \\"\\""},{"question":"Write a function ```repeated_characters``` that takes a string as input and returns a dictionary. The keys in the dictionary should be the characters that appear more than once in the input string, and the values should be the counts of those characters. For example: ```python repeated_characters(\\"programming\\") ``` should return: ```python {\'r\': 2, \'g\': 2, \'m\': 2} ``` Input: - The input string will contain only lowercase alphabetical characters (a-z). Output: - Return a dictionary with characters as keys and their counts as values. Only include characters that appear more than once in the input string. Note: - If no characters are repeated, return an empty dictionary.","solution":"def repeated_characters(s): Returns a dictionary with characters that appear more than once as keys and their counts as values. :param s: Input string containing only lowercase alphabetical characters :return: Dictionary with repeated characters and their counts char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 repeated_chars = {char: count for char, count in char_count.items() if count > 1} return repeated_chars"},{"question":"Ram is attempting to solve a logic puzzle. The puzzle requires him to determine the **missing number** in an arithmetic sequence. Given a sequence of numbers, some of which might be missing, Ram needs a program that finds the missing numbers in the sequence and returns them as a list in ascending order. `!` Note that there might be more than one missing number, and the sequence can have positive and negative numbers. Examples: ```python find_missing_numbers([1, 2, 4, 5, 7]) => [3, 6] // The sequence is missing 3 and 6 find_missing_numbers([10, 15, 20, 25, 35]) => [30] // The sequence is missing 30 find_missing_numbers([-1, 1, 2, 3, 5]) => [0, 4] // The sequence is missing 0 and 4 ``` Constraints: - The input list will have at least two numbers. - The difference between consecutive numbers in the sequence is constant. Implement the function `find_missing_numbers(sequence: List[int]) -> List[int]` to solve the problem.","solution":"def find_missing_numbers(sequence): Finds the missing numbers in the arithmetic sequence. # Calculate the common difference of the sequence common_difference = min(sequence[i] - sequence[i - 1] for i in range(1, len(sequence))) # Initialize the list for missing numbers missing_numbers = [] # Generate the full sequence based on the first element and common difference full_sequence = list(range(sequence[0], sequence[-1] + common_difference, common_difference)) # Find the missing numbers by checking if elements from full sequence are in the given sequence for num in full_sequence: if num not in sequence: missing_numbers.append(num) return missing_numbers"},{"question":"A tech company has a new method for password validation. A password is considered valid if it satisfies the following conditions: - It must contain at least one uppercase letter (A to Z). - It must contain at least one lowercase letter (a to z). - It must contain at least one digit (0 to 9). - It must contain at least one special character from the set {\'\', \'!\', \'#\', \'%\', \'&\', \'(\', \')\', \'*\', \'+\', \'-\', \'.\', \'/\', \':\', \';\', \'<\', \'=\', \'>\', \'?\', \'@\', \'[\', \']\', \'^\', \'_\', \'{\', \'}\', \'|\', \'~\'}. - Its length must be at least 8 characters. You\'ve been given a list of passwords, and you need to determine which ones are valid based on the criteria described above. -----Input----- The first line of the input contains an integer N (1 ≤ N ≤ 10^5) representing the number of passwords to be checked. N lines follow, each containing a string S, representing a password. The length of the string S will be between 1 and 100 characters. -----Output----- For each password, print \\"VALID\\" if the password meets all the criteria, otherwise print \\"INVALID\\". -----Examples----- Input 3 StrongPass1! weakpass 12345678! Output VALID INVALID INVALID Input 2 Valid_One1 MissingNumber! Output VALID INVALID","solution":"def is_valid_password(password): Returns \\"VALID\\" if the password meets the given criteria, otherwise \\"INVALID\\". if len(password) < 8: return \\"INVALID\\" has_upper = False has_lower = False has_digit = False has_special = False special_characters = {\'\', \'!\', \'#\', \'%\', \'&\', \'(\', \')\', \'*\', \'+\', \'-\', \'.\', \'/\', \':\', \';\', \'<\', \'=\', \'>\', \'?\', \'@\', \'[\', \']\', \'^\', \'_\', \'{\', \'}\', \'|\', \'~\'} for char in password: if char.isupper(): has_upper = True elif char.islower(): has_lower = True elif char.isdigit(): has_digit = True elif char in special_characters: has_special = True if has_upper and has_lower and has_digit and has_special: return \\"VALID\\" return \\"INVALID\\" def validate_passwords(passwords): results = [] for password in passwords: results.append(is_valid_password(password)) return results"},{"question":"Write a function that accepts a string and an integer k, and returns the first k most frequent characters in the string in descending order of their frequency. If two characters have the same frequency, return them in the order they appear in the string. The output should be a single string consisting of these characters concatenated together. # Examples ```python most_frequent_chars(\\"programming\\", 3) ==> \'rgm\' most_frequent_chars(\\"example\\", 2) ==> \'ex\' most_frequent_chars(\\"aabbbcc\\", 2) ==> \'ba\' ``` # Notes - You can assume the input string will have a length of at least k. - The string will contain only lowercase English letters.","solution":"from collections import Counter def most_frequent_chars(s, k): Returns the first k most frequent characters in the string in descending order of their frequency. If two characters have the same frequency, returns them in the order they appear in the string. Args: s (str): Input string to analyze. k (int): Number of most frequent characters to return. Returns: str: A string of the first k most frequent characters. frequency = Counter(s) # Sorting first by frequency (in descending order), then by the order they appear in the string sorted_chars = sorted(frequency.items(), key=lambda x: (-x[1], s.index(x[0]))) # Extracting the first k characters based on the sorted order result = \'\'.join([char for char, count in sorted_chars[:k]]) return result"},{"question":"A group of students is participating in a competitive programming contest. They need your help to solve a problem that involves checking for symmetry in a matrix. Given an N x N matrix of integers, you need to check if the matrix is symmetric along its main diagonal. A matrix is symmetric along its main diagonal if for every element at position (i, j), the element at position (j, i) is equal. -----Input:----- - The first line contains a single integer T, the number of test cases. - Each test case is represented by the following lines: - The first line of each test case contains a single integer N, representing the size of the matrix. - The next N lines contain N integers each, representing the matrix elements. -----Output:----- For each test case, output \\"YES\\" if the matrix is symmetric along its main diagonal, otherwise output \\"NO\\". -----Constraints----- - 1 <= T <= 10 - 1 <= N <= 100 - The matrix elements are integers in the range [-1000, 1000] -----Sample Input:----- 2 3 1 2 3 2 4 5 3 5 6 2 1 2 2 1 -----Sample Output:----- YES NO -----EXPLANATION:----- In the first test case, the matrix is symmetric because the element at (1, 2) is equal to the element at (2, 1), the element at (1, 3) is equal to the element at (3, 1), and the element at (2, 3) is equal to the element at (3, 2). In the second test case, the matrix is not symmetric because the element at (1, 2) is not equal to the element at (2, 1).","solution":"def is_symmetric_matrix(matrix): Determines if a given N x N matrix is symmetric along its main diagonal. Args: matrix (List[List[int]]): The N x N matrix of integers. Returns: bool: True if the matrix is symmetric along its main diagonal, otherwise False. N = len(matrix) for i in range(N): for j in range(i + 1, N): if matrix[i][j] != matrix[j][i]: return False return True def solve_symmetry(matrix_data): Solves the problem of checking symmetries for multiple test cases. Args: matrix_data (List[List[List[int]]]): List of matrices to be checked. Returns: List[str]: List of results (\\"YES\\" or \\"NO\\") for each matrix. results = [] for matrix in matrix_data: if is_symmetric_matrix(matrix): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Suppose you have a list of integers representing the heights of buildings along a straight avenue. You want to create a scenic route by removing some buildings such that no remaining buildings block the view from any building before it. In other words, each building in the list should be shorter than the building that comes after it. Return the length of the longest scenic route you can create. Input - A list of integers `heights` of length `n` (1 ≤ n ≤ 1000) representing the heights of the buildings. Output - An integer representing the length of the longest scenic route. Example ``` heights = [1, 3, 2, 4, 5] ``` The longest scenic route can be [1, 3, 4, 5], so the function should return `4`. Note - The problem involves finding the longest increasing subsequence (LIS) in the given list of heights. - You may need to use methods such as dynamic programming or binary search for efficiently solving the problem, especially considering the upper constraint of `n`.","solution":"def longest_scenic_route(heights): Returns the length of the longest scenic route where each building is shorter than the one that comes after it. if not heights: return 0 n = len(heights) dp = [1] * n # dp[i] represents the length of the LIS ending at index i for i in range(1, n): for j in range(i): if heights[j] < heights[i]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example usage heights = [1, 3, 2, 4, 5] print(longest_scenic_route(heights)) # Output should be 4"},{"question":"Write a function to convert a given integer to its corresponding Roman numeral representation. The number will be between 1 and 3999, inclusive. Example 1: Input: 3 Output: \\"III\\" Example 2: Input: 58 Output: \\"LVIII\\" Explanation: M = 1000, D = 500, L = 50, V = 5, III = 3. Example 3: Input: 1994 Output: \\"MCMXCIV\\" Explanation: M = 1000, CM = 900, XC = 90, IV = 4. Note: The list of Roman numeral symbols is as follows: M (1000), CM (900), D (500), CD (400), C (100), XC (90), L (50), XL (40), X (10), IX (9), V (5), IV (4), I (1).","solution":"def int_to_roman(num): Converts an integer to its corresponding Roman numeral representation. :param num: int, the integer to convert (1 <= num <= 3999) :return: str, the Roman numeral representation of the integer val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = \\"\\" i = 0 while num > 0: for _ in range(num // val[i]): roman_numeral += syms[i] num -= val[i] i += 1 return roman_numeral"},{"question":"A palindrome is a string that reads the same forward and backward. Given a string S of length N, you can insert any number of characters into it. Determine the minimum number of characters needed to be inserted into S to make it a palindrome. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. Each of the following T lines contains a single string S. -----Output----- For each test case, print a single line containing one integer — the minimum number of characters needed to be inserted into S to make it a palindrome. -----Constraints----- - 1 le T le 50 - 1 le N le 500 - S contains only lowercase English letters. -----Example Input----- 3 race google abcde -----Example Output----- 3 2 4 -----Explanation----- Example case 1: By inserting characters to make \\"racecar\\", we can transform \\"race\\" into a palindrome with a minimum of 3 insertions. Example case 2: By inserting characters to make \\"elgoogle\\", we can transform \\"google\\" into a palindrome with a minimum of 2 insertions. Example case 3: By inserting characters to make \\"edcbaabcde\\", we can transform \\"abcde\\" into a palindrome with a minimum of 4 insertions.","solution":"def min_insertions_palindrome(S): Returns the minimum number of insertions needed to make the string S a palindrome. N = len(S) # Function to find LCS (Longest Common Subsequence) length def longest_common_subseq(X, Y): dp = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)] for i in range(1, len(X) + 1): for j in range(1, len(Y) + 1): if X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[len(X)][len(Y)] # Reverse of the input string R = S[::-1] # Length of longest palindromic subsequence lcs_length = longest_common_subseq(S, R) # Minimum insertions needed return N - lcs_length def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(min_insertions_palindrome(S)) return results"},{"question":"Alice loves strings and she enjoys palindromes the most. A palindrome is a string that reads the same backward as forward. Alice came up with a game where she can change any character in the string to any other character, with the goal to make the string a palindrome while using the minimum number of character changes. Given a string, determine the minimum number of changes needed to make the string a palindrome. -----Input----- The input contains a single string s (1 le |s| le 10^5). The string only consists of lowercase English letters. -----Output----- Output a single integer — the minimum number of changes required to make the string a palindrome. -----Example----- Input abca Output 1 -----Example----- Input racecar Output 0 -----Note----- In the first example, changing the last \'a\' to \'b\' forms the palindrome \\"abcb\\". Thus, only 1 change is needed. In the second example, the string \\"racecar\\" is already a palindrome, so no changes are needed.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of changes needed to make the input string a palindrome. left, right = 0, len(s) - 1 changes = 0 while left < right: if s[left] != s[right]: changes += 1 left += 1 right -= 1 return changes"},{"question":"-----Question----- You are given an integer N and an array of N positive integers. Write a program to determine if the array is a permutation of the first N natural numbers. Print \\"YES\\" if the array is a permutation of the first N natural numbers, otherwise print \\"NO\\". -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains- - An integer N denoting the length of the array. - An array of N positive integers. -----Output:----- For each testcase, print \\"YES\\" if the array is a permutation of the first N natural numbers, otherwise print \\"NO\\". -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 1000 - Each integer in the array is between 1 and 1000, inclusive. -----Sample Input:----- 3 3 1 3 2 4 2 1 3 5 5 1 2 3 4 5 -----Sample Output:----- YES NO YES","solution":"def is_permutation_of_N(N, arr): Returns \\"YES\\" if arr is a permutation of the first N natural numbers, otherwise \\"NO\\". return \\"YES\\" if sorted(arr) == list(range(1, N + 1)) else \\"NO\\" def check_permutations(test_cases): results = [] for N, arr in test_cases: results.append(is_permutation_of_N(N, arr)) return results"},{"question":"You are developing a new game where a player needs to collect a series of coins. The game map consists of `n` districts, arranged in a straight line from left to right, numbered from `1` to `n`. Each district contains a certain number of coins. The player begins at district `1` and can move to the next district by spending a certain expenditure. Your task is to determine the minimum expenditure required to collect all the coins from the first district to the last district. The player follows these rules: 1. The player can move from district `i` to district `i+1` by spending `cost[i]` units. 2. At any district, the player has to pick up all the coins present in that district. Given `t` test cases, for each test case, you will receive the number of districts and the number of coins in each district, along with the cost to move from one district to the next. For example, suppose `n=5`, `coins=[5, 3, 7, 1, 4]`, and `cost=[2, 5, 3, 4]`. The best course of action is to start from district `1`, move to district `2` spending `2` units, move to district `3` spending `5` units, move to district `4` spending `3` units, and finally move to district `5` spending `4` units. The total expenditure is `2 + 5 + 3 + 4 = 14`. You should return the minimum cost required to collect all the coins. -----Input----- The first line of the input contains one integer `t` (1 leq t leq 10^4) — the number of test cases. Next, `t` test cases follow. For each test case: - The first line contains one integer `n` (1 leq n leq 10^5) — the number of districts. - The second line contains `n` integers `coins[1], coins[2], ..., coins[n]` (1 leq coins[i] leq 10^4) — the number of coins in each district. - The third line contains `n-1` integers `cost[1], cost[2], ..., cost[n-1]` (1 leq cost[i] leq 10^4) — the cost to move to the next district. It is guaranteed that the sum of `n` across all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the minimum expenditure required to collect all coins from the first to the last district. -----Example----- Input 3 5 5 3 7 1 4 2 5 3 4 4 1 3 2 4 10 3 1 3 10 20 30 15 15 Output 14 14 30","solution":"def min_cost_to_collect_coins(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] coins = test_cases[i][1] cost = test_cases[i][2] if len(test_cases[i]) > 2 else [] total_cost = sum(cost) if cost else 0 results.append(total_cost) return results # Example Usage t = 3 test_cases = [ (5, [5, 3, 7, 1, 4], [2, 5, 3, 4]), (4, [1, 3, 2, 4], [10, 3, 1]), (3, [10, 20, 30], [15, 15]) ] print(min_cost_to_collect_coins(t, test_cases)) # Output: [14, 14, 30]"},{"question":"Write a function that rotates an NxN 2D matrix 90 degrees clockwise. The rotation should be done in-place, meaning you cannot use another matrix to perform the operation. **Example:** ``` Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: matrix = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] Input: matrix = [ [1, 2], [3, 4] ] Output: matrix = [ [3, 1], [4, 2] ] ``` **Constraints:** - The input matrix will have a size of NxN where 1 <= N <= 20. - The elements of the matrix can be any integers. Write a function: ```python def rotate_matrix(matrix: List[List[int]]) -> None: ```","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> None: Rotates an NxN 2D matrix 90 degrees clockwise in-place. n = len(matrix) # First, transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Second, reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Write a function that takes in a list of integers and returns the length of the longest increasing subsequence. An increasing subsequence is a subsequence where each element is greater than the previous element. The elements in the subsequence do not need to be contiguous in the original list. -----Input:----- - A single integer N representing the length of the list. - A list of N integers. -----Output:----- - A single integer representing the length of the longest increasing subsequence. -----Constraints----- - 1 leq N leq 1000 - -10^4 leq element in the list leq 10^4 -----Sample Input:----- 6 10 9 2 5 3 7 101 18 -----Sample Output:----- 4 -----EXPLANATION----- The longest increasing subsequence is [2, 3, 7, 101], which has a length of 4. -----Note----- Your function should run efficiently for input size up to 1000.","solution":"def length_of_LIS(nums): Function to find the length of the longest increasing subsequence in a list of integers. Parameters: nums (list): A list of integers. Returns: int: Length of the longest increasing subsequence. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Task A librarian is organizing a collection of books. Each book is represented by a number signifying its thickness in centimeters. The librarian wants to know if it\'s possible to partition the entire collection into two groups such that the total thickness of the books in each group is equal. Given an array representing the thickness of each book, write a function that determines if such a partition is possible. # Example For `bookThicknesses = [1, 5, 11, 5]`, the output should be `true`. The librarian can partition the books into `[1, 5, 5]` and `[11]` where the sum of the thickness in each group is 11. For `bookThicknesses = [1, 2, 3, 5]`, the output should be `false`. The librarian cannot split the books into two groups with equal total thickness. # Input/Output - `[input]` integer array `bookThicknesses` Constraints: `1 ≤ bookThicknesses.length ≤ 30, 1 ≤ bookThicknesses[i] ≤ 50` - `[output]` a boolean value `true` if the librarian can partition the books into two groups with equal total thickness; `false` otherwise.","solution":"def can_partition(bookThicknesses): Determines if the book thicknesses can be partitioned into two groups with equal total thickness. total_sum = sum(bookThicknesses) # If the total sum is an odd number, it\'s not possible to partition it equally if total_sum % 2 != 0: return False target = total_sum // 2 n = len(bookThicknesses) # Create a boolean dp array to keep track of possible sums dp = [False] * (target + 1) dp[0] = True for thickness in bookThicknesses: for j in range(target, thickness - 1, -1): dp[j] = dp[j] or dp[j - thickness] return dp[target]"},{"question":"A company has a set of N projects, each with a given start and end time. You need to determine the maximum number of non-overlapping projects the company can undertake. A project i overlaps with project j if both (start_time[j] <= end_time[i] and start_time[i] <= end_time[j]). Example 1: Input: N = 3, projects = [[1,3],[2,4],[3,5]] Output: 2 Explanation: The maximum number of non-overlapping projects is 2 ([1,3] and [3,5]). Example 2: Input: N = 4, projects = [[1,2],[2,3],[3,4],[1,3]] Output: 3 Explanation: The maximum number of non-overlapping projects is 3 ([1,2], [2,3], and [3,4]). Note: 1 <= N <= 100 1 <= start_time[i] < end_time[i] <= 100","solution":"def max_non_overlapping_projects(N, projects): Determines the maximum number of non-overlapping projects the company can undertake. Args: N (int): The number of projects. projects (list of list): A list of lists where each list contains two integers [start_time, end_time]. Returns: int: The maximum number of non-overlapping projects. # Sort projects based on their end time projects.sort(key=lambda x: x[1]) # Keep track of the end time of the last added project end_time = 0 count = 0 for project in projects: # If the start time of the current project is greater than # the end time of the last added project, it can be added if project[0] >= end_time: count += 1 end_time = project[1] return count"},{"question":"You are given a list of numbers and your task is to determine if the numbers can be rearranged to form a continuous sequence where each number appears exactly once. A continuous sequence is a set where the numbers are in consecutive order with no gaps. For example, [3, 2, 1, 4, 5] is a continuous sequence. Write a function `is_consecutive(lst)` that takes in a list of integers `lst`, and returns `True` if the list can be rearranged to form a continuous sequence, and `False` otherwise. Example: ``` is_consecutive([5, 4, 2, 1, 3]) => True is_consecutive([1, 2, 4, 6, 5]) => False is_consecutive([9, 7, 8]) => True ``` Other katas in this series: Continuous Sequence I - Checking Order Continuous Sequence II - Missing Numbers","solution":"def is_consecutive(lst): if not lst: return False min_num = min(lst) max_num = max(lst) expected_length = max_num - min_num + 1 return len(lst) == expected_length and len(set(lst)) == expected_length"},{"question":"You are given an m x n 2D grid initialized with these three possible values: * `-1` representing a wall or an obstacle, * `0` representing a gate, * `INF` representing an empty room. We use the value `INF` to represent an empty room that can be filled. For example, if the distance to a gate is less than 2147483647, then this room is considered empty. Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, leave the value as `INF`. Example: ``` Input: grid = [ [INF, -1, 0, INF], [INF, INF, INF, -1], [INF, -1, INF, -1], [ 0, -1, INF, INF] ] Output: [ [3, -1, 0, 1], [2, 2, 1, -1], [1, -1, 2, -1], [0, -1, 3, 4] ] ``` Write a function `walls_and_gates(grid: List[List[int]]) -> None:` that modifies the grid in-place to compute the shortest distance to a gate. **Note:** Please ensure your solution is optimal and handles edge cases like grids with no gates or obstacles appropriately.","solution":"from collections import deque from typing import List def walls_and_gates(grid: List[List[int]]) -> None: Modifies the grid in-place to fill each empty room with the distance to its nearest gate. if not grid: return m, n = len(grid), len(grid[0]) INF = 2147483647 # Directions for moving up, down, left, right directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque() # Initialize the queue with all gates for row in range(m): for col in range(n): if grid[row][col] == 0: queue.append((row, col)) while queue: r, c = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and grid[nr][nc] == INF: grid[nr][nc] = grid[r][c] + 1 queue.append((nr, nc))"},{"question":"An application requires filtering a list of numbers. A filter rule is defined as an object with two properties: `operation`, which can be \\"greater_than\\", \\"less_than\\", or \\"equals\\", and `value`, which is an integer. Given a list of numbers and a filter rule, implement a function that processes the list based on the rule and returns the filtered list. **Function Signature:** ```python def filter_numbers(numbers: List[int], rule: Dict[str, Union[str, int]]) -> List[int]: ``` **Inputs:** - `numbers` (List of integers): The list of numbers to be filtered. - `rule` (Dictionary): A dictionary with `operation` as a key and `value` as another key. - `operation` (String): Describes the operation (\\"greater_than\\", \\"less_than\\", or \\"equals\\"). - `value` (Integer): The value to compare against. **Output:** - A list of integers that meet the specified filter rule. **Example:** ```python numbers = [1, 2, 3, 4, 5] rule = {\\"operation\\": \\"greater_than\\", \\"value\\": 3} print(filter_numbers(numbers, rule)) # Output: [4, 5] numbers = [10, 15, 3, 7, 8] rule = {\\"operation\\": \\"less_than\\", \\"value\\": 10} print(filter_numbers(numbers, rule)) # Output: [3, 7, 8] numbers = [7, 7, 7, 5, 5] rule = {\\"operation\\": \\"equals\\", \\"value\\": 7} print(filter_numbers(numbers, rule)) # Output: [7, 7, 7] ```","solution":"from typing import List, Dict, Union def filter_numbers(numbers: List[int], rule: Dict[str, Union[str, int]]) -> List[int]: operation = rule.get(\\"operation\\") value = rule.get(\\"value\\") if operation == \\"greater_than\\": return [num for num in numbers if num > value] elif operation == \\"less_than\\": return [num for num in numbers if num < value] elif operation == \\"equals\\": return [num for num in numbers if num == value] else: raise ValueError(\\"Unsupported operation.\\")"},{"question":"Ravi is learning about loops and iteration constructs in programming. To practice, he wants to write a program that calculates the factorial of a given set of numbers. Write a program that takes multiple integers as input and calculates their factorial. -----Input----- The first line contains an integer N, representing the number of test cases. The next N lines each contain an integer, which is a number for which the factorial needs to be calculated. -----Output----- For each test case, print the factorial of the given number in a new line. -----Constraints----- - 1 ≤ N ≤ 100 - 0 ≤ number ≤ 20 -----Example----- Input 4 1 2 5 7 Output 1 2 120 5040","solution":"def factorial(n): Returns the factorial of the given number n. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result def process_input(input_list): Processes input and calculates factorial for each number in the list. Args: input_list : list of integers where the first element is the number of test cases and the subsequent elements are the numbers for which the factorial needs to be calculated. Returns: list of integers : contains the results of factorial calculations N = input_list[0] results = [] for i in range(1, N + 1): results.append(factorial(input_list[i])) return results"},{"question":"Write a function that takes two arguments - a starting integer `start` and a length `n`, and returns an array containing `n` consecutive numbers starting from `start`. For example, the following code will output an array containing the numbers from `5` to `9`: ```python generate_sequence(5, 5) // => [5, 6, 7, 8, 9] ``` And this code will output an array containing the numbers from `-3` to `-1`: ```python generate_sequence(-3, 3) // => [-3, -2, -1] ```","solution":"def generate_sequence(start, n): Returns an array of `n` consecutive numbers starting from `start`. return [start + i for i in range(n)]"},{"question":"Task You are working on a file management system that handles files of various types. Each file has a name and a size, and you need to categorize files based on their size to optimize storage. Write a function that takes a list of files, each represented by a tuple containing the file name and size, and returns a categorized dictionary. The categories are \\"Small\\", \\"Medium\\", and \\"Large\\" with the following criteria: - \\"Small\\": File size less than 100 KB - \\"Medium\\": File size between 100 KB and 1 MB (inclusive) - \\"Large\\": File size greater than 1 MB The file size is given in bytes. You will need to convert the sizes to KB and MB for the categorization. # Input - `files`: a list of tuples where each tuple consists of a string (file name) and an integer (file size in bytes). # Output - A dictionary with three keys: `\\"Small\\"`, `\\"Medium\\"`, and `\\"Large\\"`. Each key maps to a list of file names that fall into that category. # Example For ``` files = [(\\"file1.txt\\", 1024), (\\"file2.zip\\", 1048576), (\\"file3.mp3\\", 52428800), (\\"file4.pdf\\", 50000)] ``` the output should be ``` { \\"Small\\": [\\"file1.txt\\", \\"file4.pdf\\"], \\"Medium\\": [\\"file2.zip\\"], \\"Large\\": [\\"file3.mp3\\"] } ``` # Note 1 KB = 1024 bytes 1 MB = 1024 KB = 1048576 bytes","solution":"def categorize_files_by_size(files): Categorize files by their size into Small, Medium, and Large. :param files: List of tuples where each tuple contains a string (file name) and an integer (file size in bytes). :return: Dictionary with keys \\"Small\\", \\"Medium\\", and \\"Large\\" mapping to lists of file names. categorized_files = { \\"Small\\": [], \\"Medium\\": [], \\"Large\\": [] } for file_name, file_size in files: if file_size < 100 * 1024: categorized_files[\\"Small\\"].append(file_name) elif 100 * 1024 <= file_size <= 1048576: categorized_files[\\"Medium\\"].append(file_name) else: categorized_files[\\"Large\\"].append(file_name) return categorized_files"},{"question":"Write a function that takes a string of parentheses and determines if the order of the parentheses is valid. **Note:** An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. The `string` only contains the characters `\'(\'`, `\')\'`, `\'{\'`, `\'}\'`, `\'[\'` and `\']\'`. Complete the function to return `true` if the given string is valid, and `false` otherwise. Examples - `()[]{} => true` - `([)] => false` - `{[]} => true`","solution":"def is_valid_parentheses(s): Determine if the order of the parentheses in the string is valid. :param s: String containing the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' :return: True if the string is valid, False otherwise stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Write a function that takes a list of integers and returns a new list where each element at index `i` is the product of all the numbers in the original list except the one at `i`. For example `productExceptSelf([1, 2, 3, 4])` should return `[24, 12, 8, 6]` because: - 24 is the product of 2 * 3 * 4 - 12 is the product of 1 * 3 * 4 - 8 is the product of 1 * 2 * 4 - 6 is the product of 1 * 2 * 3 You should not use division in your solution. **Note: The length of the list will be at least 2 and all elements in the list will be non-zero integers.**","solution":"def productExceptSelf(nums): Returns a list where each element at index `i` is the product of all the numbers in the input list except the one at `i`. n = len(nums) left_products = [1] * n right_products = [1] * n result = [1] * n # Calculate left products for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate right products for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculate the result by multiplying left and right products for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"A popular music app has a feature to shuffle songs in a playlist. However, users have complained that the shuffle feature sometimes plays the same song in sequence more than once. To address this, the developers decided to improve the shuffle algorithm to ensure that no song is played more than once until all other songs in the playlist have been played. Write a function that simulates this improved shuffle feature. Given a list of song IDs, your function should return a list that represents the shuffled playlist. -----Input----- - The only line of input contains an integer N followed by the space-separated IDs of N songs. -----Output----- Print the IDs of the shuffled songs, ensuring that no song appears twice in a row until all other songs have appeared at least once. -----Constraints----- - 1 le N le 100 - Song IDs are integers within the range 1 le text{ID} le 1000 -----Example Input 1----- 5 1 2 3 4 5 -----Example Output 1----- 1 2 3 4 5 -----Example Input 2----- 3 1 2 1 -----Example Output 2----- 1 2 1","solution":"import random def improved_shuffle(N, songs): Simulates the improved shuffle feature, ensuring that no song is played more than once until all other songs have been played. Parameters: - N: number of songs - songs: list of song IDs Returns: - Shuffled list of song IDs if N == 1: return songs song_counts = {song: songs.count(song) for song in set(songs)} shuffled_playlist = [] while len(shuffled_playlist) < N: candidate_songs = list(song_counts.keys()) random.shuffle(candidate_songs) for song in candidate_songs: if song_counts[song] > 0: if len(shuffled_playlist) == 0 or shuffled_playlist[-1] != song: shuffled_playlist.append(song) song_counts[song] -= 1 break return shuffled_playlist"},{"question":"You are given an array of integers `arr` of size `n`. Your task is to determine if you can rearrange the elements of the array such that no two adjacent elements are equal. If such a rearrangement is possible, return any valid rearrangement. Otherwise, return an empty array. An example of a valid rearrangement is where element pairings avoid repetition immediately. -----Input----- The first line contains an integer `n` (1 le n le 10^5) — the length of the array. The second line contains `n` integers arr[i] (1 le arr[i] le 10^5). -----Output----- If it is possible to rearrange the array where no two adjacent elements are equal, output any valid rearrangement that meets the criteria. If it is not possible, output an empty array. -----Example----- Input 6 1 1 1 2 2 3 Output 1 2 1 3 1 2 -----Note----- In the example, you can rearrange the array as [1, 2, 1, 3, 1, 2]. You cannot have two `1`s together. Other valid outputs include [1, 2, 1, 2, 1, 3], or any permutation avoiding immediate repetition. If the array was [1, 1, 1], since there\'s no way to separate three 1s to avoid immediate repetition, the output should be an empty array.","solution":"def rearrange_array(arr): from collections import Counter import heapq # Count frequency of each element freq = Counter(arr) # Create a max-heap based on frequencies (-frequency due to min-heap properties) max_heap = [] for num, count in freq.items(): heapq.heappush(max_heap, (-count, num)) result = [] prev_count, prev_num = 0, None while max_heap: count, num = heapq.heappop(max_heap) # pop the most frequent element result.append(num) if prev_count < 0: # push the previous element back to the heap if it has remaining count heapq.heappush(max_heap, (prev_count, prev_num)) count += 1 # decrease the count since we\'ve used one occurrence of `num` prev_count, prev_num = count, num if len(result) != len(arr): return [] return result"},{"question":"Given a list of non-negative integers representing the amount of water stored in bars of varying heights, compute how much water it is able to trap after raining. Altogether, we have n bars since the length of the list represents the length of the bars. Example 1: Input: heights = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: Bars at positions 1, 4, 7, 8, 9, and 11 will trap 1 unit, 1 unit, 2 units, 1 unit, 1 unit, and 1 unit of water respectively, thus totaling 6 units of water. Example 2: Input: heights = [4,2,0,3,2,5] Output: 9 Explanation: Bars at positions 1, 2, 3, 4, and 5 will trap 2 units, 4 units, 1 unit, 2 units, and 1 unit of water respectively, thus totaling 9 units of water. Note: The length of the list n is non-negative and will not exceed 1,000. Heights will be non-negative integers and will not exceed 1,000.","solution":"def trap_water(heights): Computes how much water it is able to trap after raining. Parameters: heights (list): A list of non-negative integers representing the heights of the bars. Returns: int: The total units of trapped water. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"A rectangular grid of size R x C contains hidden treasures each represented by a value of coins. The objective is to find the maximum amount of coins that can be collected by starting at the top-left corner of the grid and moving to the bottom-right corner. The movement is only allowed to the right or down at each step. -----Input:----- The first line of the input gives the number of test cases, T. T lines follow. Each line contains R and C, followed by a grid of R rows and C columns, where each cell contains an integer representing the number of coins. -----Output:----- For each test case, output one single integer representing the maximum coins that can be collected. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ R, C ≤ 100 - 0 ≤ grid[i][j] ≤ 1000 -----Sample Input:----- 2 2 3 0 3 1 2 0 4 3 3 1 3 1 1 5 1 4 2 1 -----Sample Output:----- 8 12 -----Explanation:----- For the first test case, the path that collects the maximum coins is (0, 0) -> (0, 1) -> (0, 2) -> (1, 2). The total collected coins are 0 + 3 + 1 + 4 = 8. For the second test case, the path that collects the maximum coins is (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) with total coins 1 + 1 + 4 + 2 + 1 = 9, but there is a better path (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) which results in 1 + 3 + 1 + 1 + 6 = 12 coins collected. The latter is the optimal collection.","solution":"def max_coins_in_grid(test_cases): results = [] for test_case in test_cases: R, C, grid = test_case dp = [[0] * C for _ in range(R)] dp[0][0] = grid[0][0] for i in range(1, R): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, C): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, R): for j in range(1, C): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] results.append(dp[R-1][C-1]) return results"},{"question":"# Task: Given a list of integers, return a list such that each element at index `i` from the original list is substituted by the product of all other elements present in the list except the element at `i`. The list should contain at least one element and each element is not zero. Example: ``` product_except_self([1, 2, 3, 4]) == [24, 12, 8, 6] product_except_self([-1, 1, 0, -3, 3]) == [0, 0, 9, 0, 0] product_except_self([5, 6, 2, 3]) == [36, 30, 90, 60] ``` Constraints: - You should complete this in O(N) time complexity. - Do not use division in your solution.","solution":"def product_except_self(nums): Given a list of integers, returns a list where each element is the product of all elements in the original list except the one at the same index. n = len(nums) result = [1] * n # Step 1: Compute left products left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Step 2: Compute right products and final result right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Write a function that takes a string s and returns the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. For example, \\"madam\\" and \\"racecar\\" are palindromes. For instance, given the input string \\"babad\\", the function should return \\"bab\\" or \\"aba\\". Both substrings are palindromes, but you only need to return one. If there are multiple substrings with the same maximum length, you can return any one of them. The input string will have at least one character and will contain only lowercase English letters. Note: Your function should have a time complexity of O(n^2) or better where n is the length of the input string.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in s. n = len(s) if n <= 1: return s start = 0 max_length = 1 # Single character palindromes # Helper function to expand around the center def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(n): # Check for odd length palindrome left1, right1 = expand_around_center(i, i) # Check for even length palindrome left2, right2 = expand_around_center(i, i + 1) if right1 - left1 + 1 > max_length: start = left1 max_length = right1 - left1 + 1 if right2 - left2 + 1 > max_length: start = left2 max_length = right2 - left2 + 1 return s[start:start + max_length]"},{"question":"A group of friends in a city wants to host a treasure hunt. The city is represented as a grid of size N times M (N rows, M columns), where each cell can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). The start point of the hunt is located at the top-left corner (0, 0) of the grid, and the treasure is hidden at the bottom-right corner (N-1, M-1). The hunt organizer needs to ensure that there is a clear path from the start to the treasure, moving through empty cells only. The participants can move up, down, left, or right from an empty cell to another adjacent empty cell. Write a program to help the hunt organizer determine whether there is a path from the start point to the treasure. -----Input----- - The first line of the input contains two integers N and M - the dimensions of the grid. - The next N lines contain M characters each, where each character is either \'.\' or \'#\'. -----Output----- - Output \\"YES\\" if there exists a path from the start point to the treasure, otherwise output \\"NO\\". -----Constraints----- - 1 le N, M le 1000 - The grid will always have the start point (0, 0) and the treasure (N-1, M-1) accessible if they are traversable (i.e., they will be \'.\' not \'#\'). -----Example Input----- 5 5 ..... ..#.. .#... ..#.. ..... -----Example Output----- YES -----Example Input----- 3 3 .#. # .#. -----Example Output----- NO","solution":"def is_path_exist(N, M, grid): from collections import deque if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return \\"NO\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = [[False] * M for _ in range(N)] visited[0][0] = True while queue: x, y = queue.popleft() if x == N-1 and y == M-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"Anna likes to organize her books by their publication year. She has initially an empty collection and receives q queries, each of one of the following types: + year — add the publication year year (a non-negative integer) to her collection. The collection can contain multiple copies of the same year. - year — remove a single occurrence of the publication year year from her collection. It\'s guaranteed that there is at least one year in the collection. ? range — count the number of books in Anna\'s collection with publication years within the given range [start, end]. For example, if the range is 2000-2020, then publication years 2001, 2015, 2020 will meet this criteria, while 1999, 2021 do not. -----Input----- The first line of the input contains an integer q (1 ≤ q ≤ 100 000) — the number of operations Anna has to perform. Next q lines provide the description of the queries in the order they appear in the input file. The i-th row starts with a character c — the type of the corresponding operation. If c is equal to \'+\' or \'-\' then it\'s followed by a space and an integer year (0 ≤ year ≤ 10^9) given without leading zeroes (unless it\'s 0). If c equals \'?\' then it\'s followed by a space and two integers start and end (0 ≤ start ≤ end ≤ 10^9), representing the range [start, end]. It\'s guaranteed that there will be at least one query of type \'?\'. It\'s guaranteed that any time some publication year is removed from the collection, there will be at least one occurrence of this year in it. -----Output----- For each query of the third type, print the number of publication years matching the given range. Each year is counted as many times as it appears in the collection at this moment of time. -----Examples----- Input 10 + 2001 + 1995 ? 1990 2005 + 2010 - 1995 ? 1990 2005 + 2020 ? 2000 2020 - 2020 ? 2000 2020 Output 2 1 3 2 Input 5 + 1800 + 1800 + 1900 - 1800 ? 1700 1850 Output 1 -----Note----- Consider the publication years matching the ranges from the queries of the third type. Queries are numbered in the order they appear in the input. 2001 and 1995 within 1990-2005. 2001 within 1990-2005. 2001, 2010 and 2020 within 2000-2020. 2001 and 2010 within 2000-2020.","solution":"from collections import Counter class BookCollection: def __init__(self): self.collection = Counter() def add_year(self, year): self.collection[year] += 1 def remove_year(self, year): if self.collection[year] > 0: self.collection[year] -= 1 if self.collection[year] == 0: del self.collection[year] def query_range(self, start, end): count = 0 for year in self.collection: if start <= year <= end: count += self.collection[year] return count def process_queries(queries): book_collection = BookCollection() results = [] for query in queries: if query.startswith(\'+\'): _, year = query.split() book_collection.add_year(int(year)) elif query.startswith(\'-\'): _, year = query.split() book_collection.remove_year(int(year)) elif query.startswith(\'?\'): _, start, end = query.split() results.append(book_collection.query_range(int(start), int(end))) return results"},{"question":"You are given a 2D grid of size N times M where each cell contains either \'.\' representing open space or \'#\' representing a wall. You start at cell (S_x, S_y) and your goal is to reach cell (E_x, E_y). You can move up, down, left, or right, but you cannot move through walls. Find the minimum number of steps required to reach (E_x, E_y) from (S_x, S_y). If it is impossible to reach the destination, return -1. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M — the dimensions of the grid. - The next N lines each contain a string of M characters representing the grid. - The next line of each test case contains four integers S_x, S_y, E_x, E_y — the starting and ending coordinates. -----Output----- For each test case, print a single integer — the minimum number of steps required to reach the destination. If it is impossible to reach the destination, print -1. -----Constraints----- - 1 le T le 100 - 1 le N, M le 1000 - 0 le S_x, S_y, E_x, E_y < N, M - The starting and ending cells (S_x, S_y) and (E_x, E_y) are always open spaces (\'.\'). -----Example Input----- 2 5 5 ..... .#. ..... .#. ..... 0 0 4 4 3 3 # #.# # 1 1 1 1 -----Example Output----- 8 0","solution":"from collections import deque def min_steps_to_reach(N, M, grid, start_x, start_y, end_x, end_y): def is_valid_move(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start_x, start_y, 0)]) visited = set((start_x, start_y)) while queue: x, y, steps = queue.popleft() if x == end_x and y == end_y: return steps for dx, dy in directions: new_x, new_y = x + dx, y + dy if is_valid_move(new_x, new_y) and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, steps + 1)) return -1 def solve(test_cases): results = [] for case in test_cases: N, M, grid, start_x, start_y, end_x, end_y = case result = min_steps_to_reach(N, M, grid, start_x, start_y, end_x, end_y) results.append(result) return results"},{"question":"You are given two strings, `str1` and `str2`, containing only lowercase letters. Determine if `str2` can be formed by rearranging the characters of `str1` and possibly using each character in `str1` more than once. Print `YES` if `str2` can be formed, otherwise print `NO`. -----Input:----- - First line will contain `T`, the number of test cases. For each test case: - The first line contains the string `str1`. - The second line contains the string `str2`. -----Output:----- For each test case, print `YES` if `str2` can be formed by rearranging the characters of `str1` and possibly using each character more than once, else print `NO`. -----Constraints----- - `1 <= T <= 1000` - `1 <= |str1|, |str2| <= 100` -----Sample Input:----- 3 ab a ab abc abcd abc -----Sample Output:----- YES NO YES","solution":"def can_form_by_rearranging(str1, str2): Determines if str2 can be formed by rearranging the characters of str1 and possibly using each character in str1 more than once. from collections import Counter count1 = Counter(str1) count2 = Counter(str2) # Check if count2 can be fully covered by count1 for char in count2: if count2[char] > count1.get(char, 0): return \\"NO\\" return \\"YES\\" def process_test_cases(T, test_cases): results = [] for i in range(T): str1, str2 = test_cases[i] results.append(can_form_by_rearranging(str1, str2)) return results"},{"question":"You are given a dictionary with items and their respective prices: ```python prices = {\\"apple\\": 2.5, \\"banana\\": 1.0, \\"orange\\": 1.75} ``` Additionally, you have a list of orders where each order is represented as a tuple containing the item name and the quantity ordered: ```python orders = [(\\"apple\\", 3), (\\"banana\\", 1), (\\"orange\\", 2)] ``` Write a function `calculate_total_cost()` that takes the `prices` dictionary and the `orders` list as arguments, calculates the total cost of all orders, and returns the total. For example, the total cost for the given `orders` list would be: (3 * 2.5) + (1 * 1.0) + (2 * 1.75) = 7.5 + 1.0 + 3.5 = 12.0","solution":"def calculate_total_cost(prices, orders): Calculates the total cost of all orders. Parameters: prices (dict): A dictionary with items and their respective prices. orders (list): A list of tuples containing the item name and the quantity ordered. Returns: float: The total cost of all orders. total_cost = 0 for item, quantity in orders: if item in prices: total_cost += prices[item] * quantity return total_cost"},{"question":"# Task Write a function that takes a string consisting of words separated by spaces and returns a string where each word is reversed, but the words are in the original order. # Input/Output `[input]` string `s` A string containing words separated by spaces. 1 ≤ s.length ≤ 1000. `[output]` a string The transformed string. # Example For `s = \\"hello world\\"`, the output should be `\\"olleh dlrow\\"` For `s = \\"Coding is fun\\"`, the output should be `\\"gnidoC si nuf\\"`","solution":"def reverse_words(s): Takes a string consisting of words separated by spaces and returns a string where each word is reversed, but the words are in the original order. return \' \'.join(word[::-1] for word in s.split())"},{"question":"Given a strictly increasing array of positive integers, determine whether the array forms a geometric progression. A sequence is geometric if there exists a common ratio between consecutive terms. If the array forms a geometric progression, return True and the common ratio; otherwise, return False. Example 1: Input: [2, 6, 18, 54] Output: (True, 3) Explanation: The array forms a geometric progression with a common ratio of 3. Example 2: Input: [3, 9, 27, 80] Output: False Explanation: The array does not form a geometric progression. Example 3: Input: [5, 25, 125] Output: (True, 5) Explanation: The array forms a geometric progression with a common ratio of 5. Note: - 1 <= array.length <= 1000 - 1 <= array[i] <= 10^9","solution":"def is_geometric_progression(arr): Determines if the input array forms a geometric progression. Parameters: arr (list): The strictly increasing array of positive integers. Returns: tuple: (True, common ratio) if the array forms a geometric progression, else False. if len(arr) < 2: return False ratio = arr[1] / arr[0] for i in range(1, len(arr) - 1): if arr[i + 1] / arr[i] != ratio: return False return True, ratio"},{"question":"Implement a function that takes a string representing a Roman numeral and converts it to an integer. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. | Symbol | Value | |--------|-------| | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | Roman numerals are usually written from largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five, we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used: - `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. - `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. - `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. Given a Roman numeral, convert it to an integer. The input string is guaranteed to be a valid Roman numeral in the range from 1 to 3999. # Example Input: `\\"MCMXCIV\\"` Output: `1994` # Constraints - The input string is guaranteed to be within the range from 1 to 3999 properly. # Function Signature `def roman_to_integer(roman: str) -> int:`","solution":"def roman_to_integer(roman: str) -> int: Converts a Roman numeral string to an integer. :param roman: A string representing the Roman numeral. :return: An integer representing the numeric value of the Roman numeral. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } integer_value = 0 previous_value = 0 for char in reversed(roman): current_value = roman_values[char] if current_value < previous_value: integer_value -= current_value else: integer_value += current_value previous_value = current_value return integer_value"},{"question":"Vijay loves to decode secret messages. He found a message that\'s encoded using a simple compression technique and has to decode it. The message is represented by a combination of numbers and letters, which need to be expanded based on the numbers preceding the letters. For example, the encoded message \\"3a2b\\" should be decoded to \\"aaabb\\", where: - \'3\' means the letter \'a\' should be repeated 3 times. - \'2\' means the letter \'b\' should be repeated 2 times. Write a program to help Vijay decode such messages. -----Input----- The first line of the input contains an integer N denoting the number of test cases. The only line of each test case contains the encoded message. -----Output----- For each case, output the decoded message. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ Length of the encoded message ≤ 100 - Each encoded message is a valid sequence of number-letter pairs. -----Example----- Input: 3 3a2b 5c1d 2x3y4z Output: aaabb cccccdd xxyyyzzzz -----Explanation----- 1. For the first test case: \'3a2b\' means \'aaa\' followed by \'bb\'. 2. For the second test case: \'5c1d\' means \'ccccc\' followed by \'d\'. 3. For the third test case: \'2x3y4z\' means \'xx\' followed by \'yyy\' followed by \'zzzz\'.","solution":"def decode_message(encoded_message): Decodes a given encoded message of number-letter pairs. Args: encoded_message (str): The encoded message. Returns: str: The decoded message. decoded_message = \\"\\" i = 0 while i < len(encoded_message): # Find number part num_str = \\"\\" while i < len(encoded_message) and encoded_message[i].isdigit(): num_str += encoded_message[i] i += 1 # Convert number part to integer number = int(num_str) # Add the corresponding letters to the decoded_message if i < len(encoded_message) and encoded_message[i].isalpha(): decoded_message += encoded_message[i] * number i += 1 return decoded_message def process_multiple_cases(cases): Processes multiple encoded messages and decodes them. Args: cases (list of str): List of encoded messages. Returns: list of str: List of decoded messages. return [decode_message(case) for case in cases]"},{"question":"Given a binary tree, each of its nodes can either have a value of 0 or 1. We want to prune the tree such that every subtree (of the given tree) not containing a 1 gets removed. Formally, we say that the subtree rooted at node `node` will be removed if every node in the subtree needs to have a value of 0. Return the pruned binary tree. A binary tree is a tree in which each node has at most two children. Definition for a binary tree node: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` -----Constraints----- - The number of nodes in the binary tree is in the range [1, 200]. - Node values are either 0 or 1. -----Input----- The input is given in the form of a binary tree, represented using the TreeNode class. -----Output----- Return the root of the pruned binary tree. -----Sample Input----- Input: root = [1,null,0,0,1] Visual representation: ``` 1 0 / 0 1 ``` -----Sample Output----- Output: [1,null,0,null,1] Visual representation: ``` 1 0 1 ``` Explanation: - The initial tree has values [1,null,0,0,1]. - The subtree [0,0] (third level from the root) does not contain any 1, so it gets pruned. - The resulting tree retains the nodes [1,null,0,null,1].","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def pruneTree(node): Prune the tree such that every subtree not containing a 1 gets removed. if not node: return None # Recursively prune the left and right subtrees node.left = pruneTree(node.left) node.right = pruneTree(node.right) # If current node is a leaf node with value 0, prune it if node.val == 0 and not node.left and not node.right: return None return node"},{"question":"You are given an MxN 2D grid representing a map where \'1\' represents land and \'0\' represents water. An island is a group of \'1\'s connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water. Your task is to write a function that returns the number of islands. Example 1: Input: grid = [ [\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"1\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"] ] Output: 1 Example 2: Input: grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] Output: 3 Note: - The grid\'s and each dimension\'s length are both at most 300.","solution":"def numIslands(grid): def dfs(i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' # Mark the land as visited dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) if not grid: return 0 num_islands = 0 for i in range(len(grid)): for j in range(len(grid[i])): if grid[i][j] == \'1\': dfs(i, j) num_islands += 1 return num_islands"},{"question":"Given a string representing a Roman numeral, convert it to its integer equivalent. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. ``` Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 ``` Roman numerals are usually written largest to smallest from left to right. However, there are six instances where a smaller numeral appears before a larger one to indicate subtraction: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Given a Roman numeral, convert it to an integer. The input is guaranteed to be within the range from 1 to 3999. Example 1: Input: s = \\"III\\" Output: 3 Explanation: The Roman numeral III represents the integer 3. Example 2: Input: s = \\"IV\\" Output: 4 Explanation: The Roman numeral IV represents the integer 4. Example 3: Input: s = \\"IX\\" Output: 9 Explanation: The Roman numeral IX represents the integer 9. Example 4: Input: s = \\"LVIII\\" Output: 58 Explanation: The Roman numeral LVIII represents 50 + 5 + 3 which is 58. Example 5: Input: s = \\"MCMXCIV\\" Output: 1994 Explanation: The Roman numeral MCMXCIV represents 1000 + 900 + 90 + 4 which is 1994. Note: - The input will be a valid Roman numeral representation. - The input string will have a length in the range [1, 15]. - The solution should consider both efficiency and correctness.","solution":"def roman_to_int(s): Convert a Roman numeral to an integer. :param s: A string representing the Roman numeral. :return: An integer equivalent of the Roman numeral. roman_to_value = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for ch in reversed(s): value = roman_to_value[ch] if value >= prev_value: total += value else: total -= value prev_value = value return total"},{"question":"Write a function that takes a list of strings and returns a new list containing only the strings that are palindromes. A palindrome is a word that reads the same backward as forward. You must use a list comprehension to solve this problem. For example, given the input list: ``` [\\"radar\\", \\"hello\\", \\"level\\", \\"world\\", \\"deified\\"] ``` The output should be: ``` [\\"radar\\", \\"level\\", \\"deified\\"] ``` Resources: - [List Comprehensions](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions)","solution":"def filter_palindromes(strings): Takes a list of strings and returns a new list containing only the strings that are palindromes. Args: strings (list of str): List of strings to filter. Returns: list of str: A new list only containing palindrome strings. return [s for s in strings if s == s[::-1]]"},{"question":"Given an array of integers, you need to find a pair of numbers that when added together, equals a specific target number. If such a pair exists, return the indices of the two numbers. If no such pair exists, return an empty list. You can assume that each input would have exactly one solution, and you may not use the same element twice. The input will be an array of integers and a target number. The output needs to be a list of two indices of the numbers that add up to the target number. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] = 2 + 7 = 9, we return [0, 1]. Example 2: Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Explanation: Because nums[1] + nums[2] = 2 + 4 = 6, we return [1, 2]. Constraints: The length of the given array will not exceed 1000. The array contains only integers. Each input will have exactly one solution.","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Suppose you have a database of students, each with a unique student ID, their name, and a list of courses they are enrolled in. Each course has a course ID, and a grade associated with it. Your task is to create a function that operates on this database and calculates the GPA (Grade Point Average) for each student. The GPA is defined as the sum of the grades divided by the number of courses the student is enrolled in. # Function Signature **Python** ```python def calculate_gpa(students: List[Dict]) -> Dict[int, float]: ``` - `students`: A list of dictionaries, where each dictionary contains: - `student_id` (int): Unique ID of the student - `name` (str): Name of the student - `courses` (List[Dict]): A list of dictionaries, each containing: - `course_id` (int): Unique ID of the course - `grade` (float): Numeric grade in the course # Output - Return a dictionary where the key is the `student_id` and the value is the GPA of the student. # Examples ```python students = [ { \\"student_id\\": 1, \\"name\\": \\"Alice\\", \\"courses\\": [ {\\"course_id\\": 101, \\"grade\\": 3.5}, {\\"course_id\\": 102, \\"grade\\": 4.0}, ], }, { \\"student_id\\": 2, \\"name\\": \\"Bob\\", \\"courses\\": [ {\\"course_id\\": 101, \\"grade\\": 2.5}, {\\"course_id\\": 103, \\"grade\\": 3.0}, ], }, ] print(calculate_gpa(students)) # Output: {1: 3.75, 2: 2.75} students = [ { \\"student_id\\": 1, \\"name\\": \\"Alice\\", \\"courses\\": [ {\\"course_id\\": 101, \\"grade\\": 3.7}, {\\"course_id\\": 102, \\"grade\\": 3.9}, {\\"course_id\\": 103, \\"grade\\": 4.0} ] }, { \\"student_id\\": 2, \\"name\\": \\"Bob\\", \\"courses\\": [ {\\"course_id\\": 101, \\"grade\\": 2.0}, {\\"course_id\\": 102, \\"grade\\": 3.0}, {\\"course_id\\": 103, \\"grade\\": 2.6} ] } ] print(calculate_gpa(students)) # Output: {1: 3.8666666666666667, 2: 2.533333333333333} ```","solution":"from typing import List, Dict def calculate_gpa(students: List[Dict]) -> Dict[int, float]: Calculates the GPA for each student. :param students: A list of dictionaries, each containing student information. :return: A dictionary where the key is the student_id and the value is the GPA of the student. gpa_dict = {} for student in students: student_id = student[\\"student_id\\"] courses = student[\\"courses\\"] total_grade = sum(course[\\"grade\\"] for course in courses) gpa = total_grade / len(courses) if courses else 0 gpa_dict[student_id] = gpa return gpa_dict"},{"question":"Anton loves playing with his train set. He has n straight tracks and wants to form a single long track by connecting them end-to-end. However, he can only join two tracks at a time, following the rules given below: 1. Each track has one starting connector and one ending connector. 2. Anton can connect the ending connector of one track to the starting connector of another track. 3. Each connection operation takes one second. 4. Anton can join any two tracks if their connectors match. Given the initial lengths of the tracks, Anton wants to know the minimum time it will take to form one long track. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of tracks. The second line contains n integers — the lengths of the tracks. -----Output----- In a single line print the minimum number of seconds required to form one long track. -----Examples----- Input 3 3 2 1 Output 2 Input 4 1 1 1 1 Output 3 -----Note----- In the first sample test, Anton has three tracks with lengths 3, 2, and 1. He can join the track of length 1 to the track of length 2 (1 second), then join the resulting track (length 3) to the track of length 3 (another second). In the second sample test, Anton has four tracks all of length 1. He can join any two tracks three times, each operation taking 1 second. Thus, it requires 3 seconds to form one long track.","solution":"def minimum_time_to_connect_tracks(n, lengths): Returns the minimum time required to form one long track by connecting n tracks. # Base case: If there\'s only one track, no connection is needed. if n == 1: return 0 # Sorting the track lengths helps in efficiently connecting them. lengths.sort() # Total time required is the number of connections i.e., number of tracks - 1 return n - 1"},{"question":"Given a list of integers, `nums`, write a function `findLongestSubsequence` (or `find_longest_subsequence` in Python) that finds the length of the longest increasing subsequence. For example, in the sequence [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence is [2, 3, 7, 101], so the function should return 4. Note: - A subsequence is derived by deleting some or no elements without changing the order of the remaining elements. - The input list can be empty, in which case the function should return 0. Here’s some starter code and example: ```python def find_longest_subsequence(nums): # your code here pass # Example: # Input: [10, 9, 2, 5, 3, 7, 101, 18] # Output: 4 ```","solution":"def find_longest_subsequence(nums): Returns the length of the longest increasing subsequence in the list nums. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Your task is to write a function named `map_letters_to_primes` that receives a single string argument. This string will consist of multiple words separated by spaces. Each word contains only alphabetical characters and no punctuation. The function should map each letter in the alphabet to a unique prime number, starting with \'a\' assigned to the first prime, \'b\' to the second prime, and so on. You can use the first 26 prime numbers for this purpose. ``` Prime numbers: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101] ``` The function should then compute the product of the prime number values for each letter in each word and return a list of these products. ``` Example: \\"bat cat dog\\" ``` In the above example: - \'b\' is assigned to 3 (2nd prime), \'a\' to 2 (1st prime), \'t\' to 71 (20th prime) - \'c\' is assigned to 5 (3rd prime), \'d\' to 7 (4th prime), and \'g\' to 17 (7th prime) - Therefore, the products are calculated as follows: - \\"bat\\" -> 3 * 2 * 71 = 426 - \\"cat\\" -> 5 * 2 * 71 = 710 - \\"dog\\" -> 7 * 47 * 17 = 5593 The result returned by the function should be: ``` [426, 710, 5593] ```","solution":"def map_letters_to_primes(text): Maps each letter in the input text to a unique prime number and computes the product for each word. Parameters: text (str): A string consisting of words separated by spaces. Returns: List[int]: A list of products for each word in the input string. # List of the first 26 prime numbers primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101] # Create a dictionary to map each letter to its corresponding prime number letter_to_prime = {chr(i + ord(\'a\')): prime for i, prime in enumerate(primes)} # Split the input text into words words = text.split() # Calculate the product of prime numbers for each word products = [ product([letter_to_prime[letter] for letter in word]) for word in words ] return products def product(numbers): Computes the product of a list of numbers. Parameters: numbers (List[int]): A list of integers. Returns: int: The product of the numbers. result = 1 for number in numbers: result *= number return result"},{"question":"Design an algorithm to determine the largest possible square sub-grid where all the elements are the same in a given N x N grid of integers. Your function findLargestSquare will take a single input, a 2D array (list of lists) representing the grid, and return the size (side length) of the largest square found. Your function should efficiently process grids of varying sizes, and the side length of the largest square is the only output required. If there are multiple squares with the same largest size, the function should still return the size of the square. Here are a few examples: findLargestSquare([ [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 0], [1, 1, 0, 0] ]) == 3 findLargestSquare([ [0, 0, 0, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0] ]) == 2 findLargestSquare([ [1, 0, 1], [0, 1, 0], [1, 0, 1] ]) == 1 To solve the problem, you may use a dynamic programming approach where you maintain a matrix to store the size of the largest square sub-grid ending at each cell. Use nested loops to iterate over the grid, updating your matrix based on the elements in the grid, and keep track of the maximum size found. The algorithm follows these steps: 1. Initialize a 2D array of the same dimensions as the grid to keep track of the largest square size ending at each cell. 2. Iterate through each cell in the grid, updating your 2D array based on whether the current cell is part of a square (i.e., if the adjacent cells form smaller squares that can be extended by one row and one column). 3. Keep track of the maximum size found during iteration. 4. Return the size of the largest square found.","solution":"def findLargestSquare(grid): if not grid or not grid[0]: return 0 N = len(grid) dp = [[0 for _ in range(N)] for _ in range(N)] max_side = 0 for i in range(N): for j in range(N): if i == 0 or j == 0: dp[i][j] = grid[i][j] elif grid[i][j] == 1: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 0 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"Given a binary tree, determine if it is height-balanced. For this problem, a height-balanced binary tree is defined as a binary tree in which the left and right subtrees of every node differ in height by no more than 1. Example 1: ``` Input: 1 / 2 3 / 4 5 Output: true ``` Example 2: ``` Input: 1 / 2 3 / 4 5 6 Output: false ``` In the second example, the left subtree of the node with value \'2\' has heights 2 (4 and 5 + 1 due to the addition of 6) and right subtree has height 0, which differs by more than 1. Hence, the tree is not height-balanced.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root): Determines if a binary tree is height-balanced. def height(node): if not node: return 0 left_height = height(node.left) if left_height == -1: return -1 right_height = height(node.right) if right_height == -1: return -1 if abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return height(root) != -1"},{"question":"Write a function that determines whether a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. For this problem, return `true` if the input string is a valid palindrome, otherwise return `false`. Example 1 ```python assert is_palindrome(\\"A man, a plan, a canal: Panama\\") == True ``` Example 2 ```python assert is_palindrome(\\"race a car\\") == False ``` Guidelines 1. The function should be named `is_palindrome`. 2. The function should take a single argument `s` which is a string. 3. The function should return `True` if the input string is a palindrome, otherwise return `False`. 4. An empty string is considered a valid palindrome. 5. Ignore spaces, punctuation, and capitalization in the input string.","solution":"def is_palindrome(s): Determines whether a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. # Filter and convert the string to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Compare the filtered list with its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"=====Problem Statement===== Write a function that reads a string from STDIN and returns a new string that has all the characters in even positions in the input, followed by all the characters in odd positions. Ensure that character positions are considered based on 0-based indexing. =====Example===== Input: \\"abcdef\\" Output: \\"acebdf\\" =====Input Format===== A single line containing the string s. =====Constraints===== 1 ≤ length of s ≤ 1000 =====Output Format===== Print the modified string as explained above.","solution":"def rearrange_string(s): Returns a new string with characters in even positions followed by all the characters in odd positions based on 0-based indexing. even_chars = s[0::2] odd_chars = s[1::2] return even_chars + odd_chars"},{"question":"# Task You are given two non-negative integers `num1` and `num2`, both represented as strings. Write a function that returns the product of `num1` and `num2`, also represented as a string. You must not use any built-in BigInteger library or convert the inputs to integer directly. # Input/Output - `[input]` string `num1` A string representing a non-negative integer. - `[input]` string `num2` A string representing a non-negative integer. - `[output]` string A string representing the product of the two input numbers.","solution":"def multiply_strings(num1: str, num2: str) -> str: Returns the product of two non-negative integers num1 and num2 represented as strings. # Edge case for multiplication by zero if num1 == \\"0\\" or num2 == \\"0\\": return \\"0\\" # Initialize an array to store the result of each digit multiplication result = [0] * (len(num1) + len(num2)) # Multiply each digit and add the result to the result array for i in range(len(num1)-1, -1, -1): for j in range(len(num2)-1, -1, -1): product = (ord(num1[i]) - ord(\'0\')) * (ord(num2[j]) - ord(\'0\')) p1 = i + j p2 = i + j + 1 total = product + result[p2] result[p2] = total % 10 result[p1] += total // 10 # Convert result array to string result_str = \'\'.join(map(str, result)) # Remove leading zeros return result_str.lstrip(\'0\')"},{"question":"# Migration Pattern Analysis The National Institute of Geographic Information has developed a sophisticated algorithm for tracking bird migration patterns. Your task is to improve this algorithm by analyzing bird movement and predicting future migratory routes based on established patterns. Inputs - ```c``` is a 2D array representing the bird\'s movement in the sky over a series of days. - Each element ```c[i][j]``` represents the altitude of the bird on day ```i``` at time interval ```j```. Rules and Constraints 1. Determine if the bird follows a specific migratory pattern: - A ```\\"steady\\"``` pattern occurs when there is no change in altitude over all time intervals for each day. - A ```\\"rise\\"``` pattern occurs when the altitude strictly increases every time interval across each day. - A ```\\"fall\\"``` pattern occurs when the altitude strictly decreases every time interval across each day. 2. In case none of the above patterns fit, return ```\\"no specific pattern\\"```. Output Return the predicted migratory route pattern for the bird. Examples 1. If the input represents daily altitude readings as follows: ```python c = [ [100, 100, 100], [150, 150, 150], [200, 200, 200] ] ``` Since there is no change in altitude over all time intervals for each day, the bird follows a ```steady``` pattern. 2. If the input is: ```python c = [ [50, 100, 150], [75, 125, 175], [100, 150, 200] ] ``` Since the altitude strictly increases every time interval across each day, the bird follows a ```rise``` pattern. 3. If the input is: ```python c = [ [300, 200, 100], [400, 300, 200], [500, 400, 300] ] ``` Since the altitude strictly decreases every time interval across each day, the bird follows a ```fall``` pattern. 4. If the input is: ```python c = [ [120, 100, 130], [150, 175, 160], [200, 180, 210] ] ``` Since there is no consistent pattern of steady, rise, or fall, the output should be ```\\"no specific pattern\\"```. Notes - The 2D array ```c``` will contain at least one day\'s data. - Altitudes are given in numerical values representing meters above sea level. - Days can vary, but there will be a consistent number of time intervals per day.","solution":"def analyze_migration_pattern(c): if not c or not c[0]: return \\"no specific pattern\\" steady = True rise = True fall = True for day in c: for i in range(1, len(day)): if day[i] != day[i-1]: steady = False if day[i] <= day[i-1]: rise = False if day[i] >= day[i-1]: fall = False if steady: return \\"steady\\" if rise: return \\"rise\\" if fall: return \\"fall\\" return \\"no specific pattern\\""},{"question":"You are given a sequence of non-negative integers A_1,A_2,…,A_N and a positive integer k. You have to select up to k elements from the sequence such that their sum is maximum. You cannot select two consecutive elements from the array. What is the maximum sum you can obtain? -----Input ----- - The first line of the input contains two positive integers n denoting the size of array, and k denoting the maximum number of elements you can select. - The next line contains N space-separated non-negative integers. -----Output----- Single line containing one integer, denoting the maximum possible sum you can obtain. -----Constraints----- - 1 leq n leq 10^5 - 1 leq k leq frac{n}{2} - 0 leq A_i leq 10^9 -----Sample Input----- 5 2 1 2 9 4 5 -----Sample Output----- 14 -----Explanation----- Array 1 2 9 4 5, selecting elements {9, 5}, the maximum sum is 14.<|vq_13795|>","solution":"def max_non_consecutive_sum(n, k, arr): def find_max_sum(dp, k, idx): if k == 0 or idx >= n: return 0 if dp[idx][k] != -1: return dp[idx][k] include = arr[idx] + (find_max_sum(dp, k-1, idx+2) if idx+2 < n else 0) exclude = find_max_sum(dp, k, idx+1) dp[idx][k] = max(include, exclude) return dp[idx][k] dp = [[-1] * (k+1) for _ in range(n)] return find_max_sum(dp, k, 0) def process_input(input_str): input_lines = input_str.strip().split(\'n\') n, k = map(int, input_lines[0].split()) arr = list(map(int, input_lines[1].split())) return max_non_consecutive_sum(n, k, arr)"},{"question":"``` In your office, a regular tradition is to vote for the \\"Employee of the Month\\" based on the performance score. Each employee has a unique performance score calculated based on various factors throughout the month. You are provided with a dictionary where the keys are employee names and the values are their respective performance scores as integers. Your task is to write a function that returns the name of the employee with the highest performance score. In case of a tie (two or more employees having the same highest score), return the name that comes first in alphabetical order. Function signature: ```if-not:python def employee_of_the_month(scores: Dict[str, int]) -> str: ``` ```python def employee_of_the_month(scores: dict[str, int]) -> str: ``` # Example: ```if-not:python scores = {\'Alice\': 88, \'Bob\': 95, \'Charlie\': 95, \'Diana\': 80} print(employee_of_the_month(scores)) # should return \'Bob\' ``` ```python scores = {\'Alice\': 88, \'Bob\': 95, \'Charlie\': 95, \'Diana\': 80} print(employee_of_the_month(scores)) # should return \'Bob\' ``` # Constraints: - The input dictionary will always contain at least one employee. - The performance scores are non-negative integers. ```","solution":"def employee_of_the_month(scores: dict[str, int]) -> str: Returns the name of the employee with the highest performance score. In case of a tie, returns the name that comes first in alphabetical order. # Find the maximum score max_score = max(scores.values()) # Filter out the employees who have this maximum score top_candidates = [name for name, score in scores.items() if score == max_score] # Return the alphabetically first name among top candidates return min(top_candidates)"},{"question":"Write a function `convert_to_roman` that converts a given positive integer into its corresponding Roman numeral representation. Roman numerals are represented by the following symbols: - I: 1 - V: 5 - X: 10 - L: 50 - C: 100 - D: 500 - M: 1000 The value is obtained by summing the values of all the symbols. For example: - 2 is \\"II\\" (two ones) - 12 is \\"XII\\" (a ten and two ones) - 27 is \\"XXVII\\" (two tens, a five, and two ones) For large numbers, the Roman numeral system uses a subtraction to avoid four repetitions of the same symbol in sequence. For instance: - 4 is \\"IV\\" - 9 is \\"IX\\" - 40 is \\"XL\\" - 90 is \\"XC\\" - 400 is \\"CD\\" - 900 is \\"CM\\" Write a function `convert_to_roman` that takes an integer `n` and returns its Roman numeral representation as a string. The input number will always be in the range from 1 to 3999. Function signature: ```python def convert_to_roman(n: int) -> str: # Your code here ```","solution":"def convert_to_roman(n): Converts a given integer to its corresponding Roman numeral representation. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while n > 0: for _ in range(n // val[i]): roman_num += syms[i] n -= val[i] i += 1 return roman_num"},{"question":"You are given a matrix with N rows and M columns. Each cell in the matrix contains an integer value. Your task is to find the maximum sum of elements from any submatrix within the given matrix. A submatrix is any rectangular part of the matrix ranging from cell (i_1, j_1) to cell (i_2, j_2) where 1 leq i_1 leq i_2 leq N and 1 leq j_1 leq j_2 leq M. -----Input----- - The first line contains two integers N and M denoting the number of rows and columns in the matrix, respectively. - The next N lines contain M integers each, representing the elements of the matrix. -----Output----- Print a single integer, the maximum sum of all elements from any submatrix within the given matrix. -----Constraints----- - 1 leq N, M leq 100 - -10^5 leq matrix elements leq 10^5 -----Example Input----- 3 3 1 2 -1 -3 4 2 1 -1 3 -----Example Output----- 9 -----Explanation----- The submatrix with maximum sum is: begin{bmatrix} 4 & 2 -1 & 3 end{bmatrix} Which contains the elements 4 + 2 + (-1) + 3 = 8. Another submatrix with maximum sum is: begin{bmatrix} 1 & 2 & -1 -3 & 4 & 2 1 & -1 & 3 end{bmatrix} Which contains the elements 1 + 2 + (-1) + (-3) + 4 + 2 + 1 + (-1) + 3 = 8.","solution":"def max_sum_submatrix(matrix): Returns the maximum sum of elements from any submatrix within the given matrix. # Get the number of rows and columns N = len(matrix) M = len(matrix[0]) # Step 1: Calculate cumulative sum for each row cumulative_sum = [[0] * (M + 1) for _ in range(N)] for i in range(N): for j in range(M): cumulative_sum[i][j + 1] = cumulative_sum[i][j] + matrix[i][j] # Step 2: Use the cumulative sum to find the max sum submatrix max_sum = float(\'-inf\') for start_col in range(M): for end_col in range(start_col, M): subarray_sum = [0] * N for row in range(N): subarray_sum[row] = cumulative_sum[row][end_col + 1] - cumulative_sum[row][start_col] # Apply Kadane\'s algorithm to find the max subarray sum for this subarray_sum current_max = subarray_sum[0] overall_max = subarray_sum[0] for i in range(1, N): current_max = max(subarray_sum[i], current_max + subarray_sum[i]) overall_max = max(overall_max, current_max) max_sum = max(max_sum, overall_max) return max_sum # Input and output for verification purpose if __name__ == \\"__main__\\": N, M = 3, 3 matrix = [ [1, 2, -1], [-3, 4, 2], [1, -1, 3] ] print(max_sum_submatrix(matrix)) # Expected output: 9"},{"question":"Given two singly linked lists that intersect at some point, write a function to find the node at which they intersect. Assume the environment supports creating and managing singly linked lists, and there are no cycles in the list. The function should return the reference to the intersecting node or null if there is no intersection. Example: Input: listA = [4,1,8,4,5], listB = [5,6,1,8,4,5] Output: Reference to the node with value 8 Explanation: The two linked lists intersect at node with value 8 having reference X. Input: listA = [2,6,4], listB = [1,5] Output: null Explanation: The two lists do not intersect, hence return null. Note: - The intersected node\'s value should have the same value and reference. - You may assume no cycles are present in the linked lists. - The linked lists must retain their original structure after function execution. Follow up: - Try to solve the problem with time complexity of O(N + M) and space complexity of O(1), where N and M are the lengths of the linked lists.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def getIntersectionNode(headA, headB): Find the node at which the intersection of two singly linked lists begins. Return the intersecting node or None if there is no intersection. # Initialize two pointers ptrA, ptrB = headA, headB # Traverse both lists, switching to the other list upon reaching the end of one while ptrA is not ptrB: # If one pointer reaches the end, switch it to the start of the other list ptrA = ptrA.next if ptrA else headB ptrB = ptrB.next if ptrB else headA # When the pointers meet, either both are None or both are at the intersection node return ptrA"},{"question":"A warrior, Maximus, is assigned a mission to defend his kingdom. He needs to select certain powerful warriors from a list based on their strength. The strength of each warrior is a positive integer. The selection must maximize the total strength while ensuring that: 1. The total number of selected warriors is exactly K. 2. The sum of strengths of the selected warriors must be exactly divisible by a given integer D. Help Maximus by writing a program to select the required warriors. -----Note:----- - If there are multiple solutions, print any one of them. - If there is no valid selection, print `-1`. -----Input:----- - First line will contain T, number of test cases. Then, the test cases follow. - Each test case consists of two lines: - The first line contains three space-separated integers, N (number of warriors), K (number of warriors to be selected), and D (the integer for divisibility condition). - The second line contains N space-separated positive integers representing the strengths of the warriors. -----Output:----- For each test case, output on a new line either a space-separated list of K strengths of the selected warriors or `-1` if no valid selection can be made. -----Constraints:----- - 1 leq T leq 10^2 - 1 leq N leq 1000 - 1 leq K leq N - 1 leq D leq 1000 - Each strength value ranges from 1 to 1000 -----Sample Input:----- 2 5 3 10 1 2 3 4 5 4 2 6 5 7 9 11 -----Sample Output:----- 1 4 5 5 7","solution":"def select_warriors(T, test_cases): results = [] from itertools import combinations for case in test_cases: N, K, D = case[\'N\'], case[\'K\'], case[\'D\'] strengths = case[\'strengths\'] valid_selection = False for combo in combinations(strengths, K): if sum(combo) % D == 0: results.append(\\" \\".join(map(str, combo))) valid_selection = True break if not valid_selection: results.append(\\"-1\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] line_index = 1 for _ in range(T): N, K, D = map(int, lines[line_index].split()) strengths = list(map(int, lines[line_index + 1].split())) test_cases.append({\'N\': N, \'K\': K, \'D\': D, \'strengths\': strengths}) line_index += 2 return T, test_cases"},{"question":"# Task You are given a sorted (in ascending order) integer array `nums` of `n` elements and an integer `target`. Given that the array was originally rotated at an unknown pivot index k (0 <= k < n) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]`, write a function to search `target` in `nums`. If `target` is found in the array, return its index, otherwise, return `-1`. You must write an algorithm with `O(log n)` runtime complexity. # Example For `nums = [4,5,6,7,0,1,2]` and `target = 0`, the output should be `4`. The shifted sorted array is `[4,5,6,7,0,1,2]` and the target `0` is found in the position `4`. # Input/Output - `[input]` integer array `nums` An array `nums` which may be empty, initially sorted but rotated. Contains `n` elements where `0 <= n <= 5000`. - `[input]` integer `target` An integer `target` that can be found within the `nums` array. - `[output]` an integer The index of `target` if found, otherwise `-1`.","solution":"def search(nums, target): Searches for target in a rotated sorted array nums. Returns the index of target if found, otherwise -1. if not nums: return -1 left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid # Check the left portion if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 # Check the right portion else: if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Professor Snape gives an extra credit assignment to his Potion class. The assignment is to determine if a potion composition is valid or not. Each composition of a potion is represented by a string consisting of lowercase alphabets. A composition is considered valid if every character in the string appears an even number of times. -----Input:----- - The first line contains T, the number of test cases. - Each of the next T lines contains a string S representing the composition of the potion. -----Output:----- - For each test case, output \\"YES\\" if the composition is valid and \\"NO\\" otherwise. -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 10^{5} - Each string S will contain only lowercase English alphabets (\'a\' to \'z\'). -----Sample Input:----- 3 aabbcc aabbc xyzxyz -----Sample Output:----- YES NO YES -----EXPLANATION:----- In the first case, all characters \'a\', \'b\', and \'c\' appear 2 times which is even. So the composition is valid. In the second case, \'a\' and \'b\' appear 2 times but \'c\' appears only once which is not even. So the composition is invalid. In the third case, all characters \'x\', \'y\', and \'z\' appear 2 times which is even. So the composition is valid.","solution":"def is_valid_potion_composition(T, compositions): results = [] for composition in compositions: char_count = {} for char in composition: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 is_valid = all(count % 2 == 0 for count in char_count.values()) if is_valid: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alex is working on a computer repair simulation software and needs assistance in tracking repair times and costs. First, he needs you to write a function that, given the time taken for each repair task (in hours) and the hourly rate charged (in dollars), will return the total cost for the repair. Second, he needs you to write a function that, given a list of repair tasks (each with its time taken and hourly rate), will return the total time taken to complete all tasks as well as the total cost. The result should be an object or dictionary containing \'total_time\' and \'total_cost\' as keys, with their respective values. Additionally, if the total time exceeds 8 hours, the program should return \\"Overwork Detected\\" instead of the total time and total cost.","solution":"def calculate_repair_cost(time_taken, hourly_rate): Returns the total cost for a single repair task. Parameters: time_taken (float): Time taken for the repair task in hours. hourly_rate (float): Hourly rate charged in dollars. Returns: float: Total cost for the repair task. return time_taken * hourly_rate def calculate_total_repair(tasks): Returns the total time and total cost for a list of repair tasks. Parameters: tasks (list): List of tuples, each containing time taken and hourly rate for a repair task (time_taken, hourly_rate). Returns: dict: Contains \'total_time\' and \'total_cost\'. If total time exceeds 8 hours, returns \\"Overwork Detected\\". total_time = sum(task[0] for task in tasks) total_cost = sum(task[0] * task[1] for task in tasks) if total_time > 8: return \\"Overwork Detected\\" return {\'total_time\': total_time, \'total_cost\': total_cost}"},{"question":"Chef has been experimenting with different recipes, and he has come up with a unique one called a \\"Palindrome Dessert\\". He defines a \\"Palindrome Dessert\\" as a series of characters that read the same backward as forward. However, being mindful of ingredients, Chef wants to reduce waste by ensuring that only the minimal number of characters need to be changed in order for the string to become a palindrome. Given a string S, Chef wants you to determine the minimum number of characters that need to be changed to transform the string into a palindrome. -----Input----- - The first line contains an integer T, indicating the number of test cases. - Each of the next T lines contains a string S, representing the series of characters. -----Output----- For each test case, output a single line containing the minimum number of characters that need to be changed to make the string a palindrome. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 1000 (where |S| is the length of string S) - S consists only of lowercase English letters. -----Example----- Input: 3 abb abcd race Output: 1 2 2 -----Explanation----- Example Case 1: \\"abb\\" can be transformed to \\"aba\\" by changing the second \'b\' to \'a\'. Example Case 2: \\"abcd\\" can be transformed to \\"abba\\" or \\"dcba\\", requiring at least two changes. Example Case 3: \\"race\\" can be transformed to \\"ecar\\" or \\"racecar\\", requiring at least two changes.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of character changes required to make the string a palindrome. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes def process_test_cases(T, test_cases): results = [] for i in range(T): results.append(min_changes_to_palindrome(test_cases[i])) return results"},{"question":"You are given a list of city names which contain only lowercase alphabetical characters. You need to write a function that returns the longest city name(s) from the given list. If multiple cities have the same maximum length, return all of them in a list sorted in alphabetical order. Write a function `longest_city_names` that takes in a list of strings representing city names and returns a list of the longest city name(s). For example: ```python longest_city_names([\\"paris\\", \\"amsterdam\\", \\"newyork\\", \\"losangeles\\"]) returns [\'losangeles\'] longest_city_names([\\"paris\\", \\"london\\", \\"newyork\\", \\"tokyo\\"]) returns [\'newyork\'] longest_city_names([\\"delhi\\", \\"chicago\\", \\"boston\\", \\"lisbon\\"]) returns [\'chicago\'] longest_city_names([\\"athens\\", \\"madrid\\", \\"oslo\\", \\"berlin\\"]) returns [\'athens\', \'berlin\', \'madrid\'] ``` Function Signature: ```python def longest_city_names(cities: List[str]) -> List[str]: pass ``` Note: 1. The function should be case-sensitive. 2. The returned list(s) must be sorted alphabetically if there are multiple city names with the same maximum length. 3. Empty input should return an empty list.","solution":"from typing import List def longest_city_names(cities: List[str]) -> List[str]: if not cities: return [] max_length = max(len(city) for city in cities) longest_cities = [city for city in cities if len(city) == max_length] return sorted(longest_cities)"},{"question":"Write a function that takes a string consisting of lowercase letters and returns the length of the longest substring without repeating characters. For example, for the input string `\\"abcabcbb\\"`, the output should be `3`, as the longest substring without repeating characters is `\\"abc\\"`. For the input string `\\"bbbbb\\"`, the output should be `1`, as the longest substring without repeating characters is `\\"b\\"`.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. Args: s (str): The input string consisting of lowercase letters. Returns: int: The length of the longest substring without repeating characters. n = len(s) char_set = set() left = 0 longest = 0 for right in range(n): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) longest = max(longest, right - left + 1) return longest"},{"question":"Write a function that takes a non-negative integer and returns the next greater positive integer that uses the same number of 1 bits in its binary representation. For example: ```python next_greater(5) == 6 # 5 is \'101\' in binary and 6 is \'110\' in binary next_greater(6) == 9 # 6 is \'110\' in binary and 9 is \'1001\' in binary next_greater(7) == 11 # 7 is \'111\' in binary and 11 is \'1011\' in binary ``` Return -1 if no such number exists within the range of 32-bit signed integers. For example: ```python next_greater(2147483647) == -1 # 2147483647 in binary is \'1111111111111111111111111111111\' and there is no greater number with exactly 31 bits set within the 32-bit integer range. next_greater(3) == 5 # 3 is \'11\' in binary and next larger integer is \'101\' in binary next_greater(9) == 10 # 9 is \'1001\' in binary and next larger integer is \'1010\' in binary ``` Hints: - Consider using bitwise operations to manipulate the binary representation. - Examine how the binary digits of the number can be rearranged to obtain the next higher permutation with the same number of 1 bits. - Ensure to handle boundary cases and large numbers appropriately.","solution":"def next_greater(n): Returns the next greater positive integer that uses the same number of 1 bits in its binary representation. Returns -1 if no such number exists within the range of 32-bit signed integers. if n <= 0: return -1 # Calculate the binary length and the number of ones ones = bin(n).count(\'1\') candidate = n + 1 # Iterate until we find the next number with the same number of \'1\' bits while candidate <= 0x7FFFFFFF: # 0x7FFFFFFF is the largest 32-bit signed integer if bin(candidate).count(\'1\') == ones: return candidate candidate += 1 return -1"},{"question":"Given an integer array nums, return the length of the longest strictly increasing subsequence of the integers in that array where the difference between consecutive integers is exactly 2. If there is no such subsequence in the array, return 0. Example 1: Input: nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10] Output: 5 Explanation: The longest subsequence with consecutive differences exactly 2 is [1, 3, 5, 7, 9]. Example 2: Input: nums = [5, 1, 3, 9, 7] Output: 2 Explanation: The longest subsequences with differences exactly 2 are [1, 3] and [7, 9]. Constraints: 1 <= nums.length <= 10^4 -10^4 <= nums[i] <= 10^4","solution":"def longest_subsequence_with_diff_two(nums): Returns the length of the longest strictly increasing subsequence in nums where the difference between consecutive integers is exactly 2. if not nums: return 0 # A dictionary to store the max length of subsequence ending with a specific number. subseq_lengths = {} for num in nums: if num - 2 in subseq_lengths: subseq_lengths[num] = subseq_lengths[num - 2] + 1 else: subseq_lengths[num] = 1 # Return the maximum length found return max(subseq_lengths.values())"},{"question":"Alice and Bob are playing a game involving strings. The game begins with a string s that consists of lowercase Latin letters. The sequence of moves in the game is as follows: - On Alice\'s turn, she can reverse any contiguous substring of the string. - On Bob\'s turn, he can replace any single character in the string with any other lowercase Latin letter. The objective for Alice is to transform the string into a palindrome. The objective for Bob is to prevent Alice from succeeding. Alice and Bob play optimally and alternately, with Alice going first. Given the initial string s, your task is to determine if Alice can guarantee that the string will become a palindrome, regardless of how Bob plays. -----Input----- The first line contains one string s (1 le |s| le 5,000) — the initial string. -----Output----- Print \\"YES\\" if Alice can guarantee that the string will become a palindrome, or \\"NO\\" if Bob can prevent this. -----Examples----- Input abca Output YES Input abcd Output NO Input a Output YES Input racecar Output YES -----Note----- In the first example, Alice can reverse the substring \\"ca\\" to get \\"abac\\", and then Bob\'s move will not prevent Alice from subsequently making a palindrome. In the second example, the optimal moves of both players will never result in a palindrome. In the third example, the string is already a palindrome. In the fourth example, the string is already a palindrome, and Alice can keep it that way becaused Bob can only change one character at a time, which Alice can reverse back to the correct position.","solution":"def can_alice_guarantee_palindrome(s): Determines if Alice can guarantee that the string will become a palindrome, regardless of how Bob plays. Parameters: s (str): The input string. Returns: str: \\"YES\\" if Alice can guarantee a palindrome, \\"NO\\" otherwise. n = len(s) mismatches = sum(1 for i in range(n // 2) if s[i] != s[n - i - 1]) # Alice can guarantee a palindrome if there is at most one mismatch return \\"YES\\" if mismatches <= 1 else \\"NO\\""},{"question":"Write a function that receives a list of strings, each representing a word. The function should return a dictionary where the keys are the lengths of the words and the values are lists containing words of that length, sorted alphabetically. If the input list is empty, return an empty dictionary. Example: ``` input: [\\"apple\\", \\"bat\\", \\"car\\", \\"apples\\", \\"banana\\", \\"ate\\"] output: { 3: [\\"ate\\", \\"bat\\", \\"car\\"], 5: [\\"apple\\"], 6: [\\"apples\\", \\"banana\\"] } ```","solution":"def group_words_by_length(words): Groups words by their length and sorts each group alphabetically. Args: words (list of str): List of words to be grouped. Returns: dict: A dictionary where keys are word lengths and values are lists of words of that length. from collections import defaultdict result = defaultdict(list) for word in words: result[len(word)].append(word) # Sorting the words in each list for length in result: result[length].sort() return dict(result) # Convert defaultdict to dict before returning."},{"question":"Background: In text processing, a **Palindrome** is a sequence of characters that reads the same backward as forward. This property can apply to individual words as well as entire sentences, ignoring spaces, punctuation, and capitalization. For more details, visit the related [Wikipedia page](http://en.wikipedia.org/wiki/Palindrome). --- --- Task: Write a function that accepts a string as its parameter and returns a boolean value indicating whether the given string is a palindrome, considering only alphanumeric characters and ignoring case sensitivity. Examples: ```python isPalindrome(\\"A man, a plan, a canal, Panama\\") == True isPalindrome(\\"No \'x\' in Nixon\\") == True isPalindrome(\\"Hello, World!\\") == False ``` Explanation: - The string \\"A man, a plan, a canal, Panama\\" reads the same forward and backward, ignoring spaces, punctuation, and letter case, thus it\'s a palindrome. - The string \\"No \'x\' in Nixon\\" also reads the same forward and backward under the same conditions. - Conversely, \\"Hello, World!\\" does not read the same forward and backward, even after ignoring spaces and punctuation. Constraints: - The input string length does not exceed `10^4`. - Consider only alphanumeric characters and ignore case sensitivity in your implementation.","solution":"def isPalindrome(s: str) -> bool: Returns True if the input string is a palindrome, ignoring non-alphanumeric characters and case sensitivity. # Filter only alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Compare filtered list to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"An international company operates a network of N warehouses, each connected by M bidirectional roads. Each road has an associated transportation challenge rating, implying the difficulty of moving goods across that road. The company aims to determine the most challenging route to transport goods between two specified warehouses. However, to avoid breakdowns during transportation, the quality assurance team has imposed a restriction on the transportation challenge rating for any route used. The company needs you to establish if there exists a route between two specified warehouses that adheres to a maximum challenge rating threshold. You are to write a program that will ascertain if it\'s feasible to move goods between two specific warehouses such that all roads on the path have a transportation challenge rating less than or equal to a given value. ----Input:---- The first line contains three integers N, M, and Q representing the number of warehouses, the number of roads, and the number of queries, respectively. The next M lines each contain three integers u, v, and w representing a road between warehouses u and v with a challenge rating of w. The following Q lines each contain three integers a, b, and maxW, specifying a query where the company needs to find a path from warehouse a to warehouse b with all roads\' challenge ratings no greater than maxW. ----Output:---- For each query, output \\"YES\\" if there exists a path that satisfies the condition, otherwise output \\"NO\\". ----Constraints:---- - 1 leq N leq 1000 - 0 leq M leq 10000 - 1 leq u, v, a, b leq N - 1 leq w, maxW leq 1000 - 0 leq Q leq 1000 ----Sample Input:---- 5 6 3 1 2 4 1 3 2 2 3 1 2 4 7 3 5 3 4 5 5 1 5 4 1 4 5 2 5 2 ----Sample Output:---- YES YES NO","solution":"def can_transport_goods(n, m, q, roads, queries): from collections import deque, defaultdict def bfs(source, target, max_challenge): visited = [False] * (n + 1) queue = deque([source]) visited[source] = True while queue: node = queue.popleft() if node == target: return True for neighbor, challenge in graph[node]: if not visited[neighbor] and challenge <= max_challenge: visited[neighbor] = True queue.append(neighbor) return False # Create the adjacency list for the graph. graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for a, b, maxW in queries: if bfs(a, b, maxW): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example Input n, m, q = 5, 6, 3 roads = [ (1, 2, 4), (1, 3, 2), (2, 3, 1), (2, 4, 7), (3, 5, 3), (4, 5, 5) ] queries = [ (1, 5, 4), (1, 4, 5), (2, 5, 2) ] # To see the result print(can_transport_goods(n, m, q, roads, queries))"},{"question":"Write a function, `find_longest_word()`, that takes a list of words as its argument and returns the longest word from the list. If there are multiple words with the same maximum length, return the first one that appears in the list. For example: ```python >>> find_longest_word([\'hello\', \'world\', \'python\', \'great\']) \'python\' ``` In the case where the list is empty, the function should return an empty string: ```python >>> find_longest_word([]) \'\' ``` You can assume that the input list contains only words made up of alphabetic characters and that the words are case-sensitive (i.e., \'Python\' and \'python\' are considered different). Be sure to handle both uppercase and lowercase letters properly.","solution":"def find_longest_word(words): Returns the longest word from a list of words. If there are multiple words with the same maximum length, returns the first one that appears in the list. If the list is empty, returns an empty string. if not words: return \'\' longest_word = words[0] for word in words[1:]: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"Your task is to write a function that takes a string containing a list of items separated by commas. Each item may be a word or a number. The function should return a new string where each item in the original string is replaced by its respective length if it’s a word, or by itself if it’s a number. Preserve the order and the commas in the output. If an item is a single character word or number, return it unchanged. Example ----- Given the input: `\\"apple,12,grape,4,banana,56,kiwi,a,3\\"` The output should be: `\\"5,12,5,4,6,56,4,a,3\\"` Another example ----- Given the input: `\\"dog,42,fish,876,cat\\"` The output should be: `\\"3,42,4,876,3\\"`","solution":"def transform_items(input_string): def transform_item(item): if item.isdigit() or len(item) == 1: return item return str(len(item)) items = input_string.split(\',\') transformed_items = [transform_item(item) for item in items] return \',\'.join(transformed_items)"},{"question":"Write a function `min_cost_to_climb` which calculates the minimum cost to climb a staircase. You are given an array `cost` where `cost[i]` is the cost of the `i`-th step on a staircase. Once you pay the cost at a step, you can either climb one or two steps. You need to minimize the total cost to reach the top of the floor, and you can either start from the first step or the second step. # Function Signature ```python def min_cost_to_climb(cost: List[int]) -> int: ``` # Input - `cost`: a list of integers where `1 <= len(cost) <= 1000` and `0 <= cost[i] <= 999`. # Output - An integer representing the minimum cost to reach the top of the floor. # Examples Example 1 ```python cost = [10, 15, 20] min_cost_to_climb(cost) # should return 15 ``` *Explanation:* Start by stepping to the second step with a cost of 15. Example 2 ```python cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] min_cost_to_climb(cost) # should return 6 ``` *Explanation:* Start at the first step, then step from 1 to 3 to 5 to 7 to 9, with total cost 1 + 1 + 1 + 1 + 1 + 1 = 6. *Note:* You can solve this problem by using dynamic programming to keep track of the minimum cost up to each step.","solution":"from typing import List def min_cost_to_climb(cost: List[int]) -> int: n = len(cost) if n == 0: return 0 elif n == 1: return cost[0] dp = [0] * n dp[0] = cost[0] dp[1] = cost[1] for i in range(2, n): dp[i] = cost[i] + min(dp[i-1], dp[i-2]) return min(dp[-1], dp[-2])"},{"question":"A spaceship travels from a starting position to a destination which is target units away from the starting position. Along the journey, there are recharge stations. Each station[i] represents a recharge station that is station[i][0] units away from the starting position, and has station[i][1] units of energy. The spaceship starts with an initially charged battery of startEnergy units. It consumes 1 unit of energy per 1 unit distance traveled. When the spaceship reaches a recharge station, it may stop and recharge, transferring all the energy from the station into its battery. What is the minimum number of recharging stops the spaceship must make in order to reach its destination? If it cannot reach the destination, return -1. Note that if the spaceship reaches a recharge station with 0 energy left, it can still recharge there. If it reaches the destination with 0 energy left, it is still considered to have arrived. Example 1: Input: target = 10, startEnergy = 10, stations = [] Output: 0 Explanation: The spaceship can reach the target without recharging. Example 2: Input: target = 50, startEnergy = 5, stations = [[10,20], [20,5], [30,20]] Output: -1 Explanation: The spaceship cannot reach the target (or even the first recharge station). Example 3: Input: target = 50, startEnergy = 10, stations = [[10,40], [20,10], [40,10]] Output: 1 Explanation: The spaceship starts with 10 units of energy. It travels to position 10, expending 10 units of energy. It recharges from 0 units to 40 units of energy. Then, it travels to position 40, expending 30 units of energy, and recharges from 10 units to 20 units of energy. Finally, it travels to and reaches the target. The spaceship made 1 recharging stop along the way, so we return 1. Note: 1 <= target, startEnergy, stations[i][1] <= 10^9 0 <= stations.length <= 500 0 < stations[0][0] < stations[1][0] < ... < stations[stations.length-1][0] < target","solution":"import heapq def minRefuelStops(target, startEnergy, stations): Calculate the minimum number of refueling stops required to reach the target. max_heap = [] # max-heap to keep track of the largest fuel available at stations we\'ve passed current_distance = startEnergy num_refuels = 0 i = 0 while current_distance < target: # Add all reachable stations to the max_heap while i < len(stations) and stations[i][0] <= current_distance: heapq.heappush(max_heap, -stations[i][1]) i += 1 # If no stations are reachable and we haven\'t reached the target if not max_heap: return -1 # Refuel with the largest fuel from max_heap current_distance += -heapq.heappop(max_heap) num_refuels += 1 return num_refuels"},{"question":"Write a function to find the maximum product subarray in an array of integers. The function should return the maximum product that can be achieved from a continuous subarray (containing at least one number). Example 1: Input: [2, 3, -2, 4] Output: 6 Explanation: The subarray [2, 3] has the maximum product 6. Example 2: Input: [-2, 0, -1] Output: 0 Explanation: The subarray [0] has the maximum product 0. Note: The length of the array will not exceed 2,000.","solution":"def max_product_subarray(nums): Find the maximum product subarray. :param nums: List of integers :return: Maximum product of a subarray if not nums: return 0 max_product = current_max = current_min = nums[0] for num in nums[1:]: if num < 0: current_max, current_min = current_min, current_max current_max = max(num, current_max * num) current_min = min(num, current_min * num) max_product = max(max_product, current_max) return max_product"},{"question":"# The Task Your task is to implement a function `balance_weights(weights)` which takes a list of integer weights and redistributes them in a balanced way across two bags, trying to minimize the maximum weight in any bag. # Algorithm In most scenarios, this problem will likely require an implementation of a backtracking algorithm, a dynamic programming approach, or a greedy strategy to distribute the weights as evenly as possible into two bags. Definitions * A **weight list** is a list of integers representing the weights themselves. - For example: `[3, 1, 4, 1, 5]`. * The **total weight** is the sum of all integers in the weights list. - For example, the total weight of `[3, 1, 4, 1, 5]` is `14`. * An **optimal distribution** splits the weight list into two bags such that the absolute difference between the sums of the weights in each bag is minimized. For example: - Splitting `[3, 1, 4, 1, 5]` into two bags `[4, 5]` and `[3, 1, 1]` results in sums of `9` and `5` respectively, giving a difference of `4`. Examples: >>> balance_weights([3, 1, 4, 1, 5]) ([4, 5], [3, 1, 1]) >>> balance_weights([1, 1, 1, 1, 1, 1]) ([1, 1, 1], [1, 1, 1]) Here is a more detailed explanation: Input: [3, 1, 4, 1, 2, 7] Possible best splits: Independent distributes to: Bag 1 and Bag 2 Bag 1: [1, 2, 7] Bag 2: [3, 4, 1] Weight Distribution: Bag 1 has a total weight of 10. Bag 2 has a total weight of 8. Difference: 2 Adjust your splitting of weight items so that the goal remains minimizing the difference between the weights in each bag. Constraints: * Each weight is an integer. * The length of the weights list is between `1` and `20`. * Each weight is between `1` and `1000`. Function Signature: ```python def balance_weights(weights: List[int]) -> Tuple[List[int], List[int]]: pass ``` Good luck!","solution":"from typing import List, Tuple def balance_weights(weights: List[int]) -> Tuple[List[int], List[int]]: def backtrack(index, bag1, bag2): if index == len(weights): diff = abs(sum(bag1) - sum(bag2)) if diff < self.min_diff: self.min_diff = diff self.result = (bag1[:], bag2[:]) return backtrack(index + 1, bag1 + [weights[index]], bag2) backtrack(index + 1, bag1, bag2 + [weights[index]]) self = lambda: None self.min_diff = float(\'inf\') self.result = ([], []) backtrack(0, [], []) return self.result"},{"question":"In a fantasy land, there are magical creatures called \\"Orbs\\" who possess the ability to control the weather. Each Orb can be placed in a strategic position to maximize control over specific areas. Each Orb has a known power that allows it to influence a certain number of units in its vicinity. You are given a one-dimensional coordinate system where the position of each Orb is located at discrete points. An Orb located at position `P` with power `A` can influence all positions in the range `[P - A, P + A]`. Your task is to determine the minimum number of Orbs required to influence every position in a given segment `[L, R]`. For example, if there are three Orbs located at positions `1`, `5`, and `10` with power values `1`, `3`, and `1` respectively, and the segment to be influenced is `[2, 9]`, you need to determine the smallest subset of Orbs that can collectively influence the entire segment from 2 to 9. -----Input format----- The first line contains two space-separated integers `N` and `M`, where `N` is the number of Orbs and `M` is the length of the segment to be influenced. The second line contains two space-separated integers `L` and `R`, where `L` is the starting point and `R` is the ending point of the segment to be influenced. The next `N` lines describe each Orb. Each of these `N` lines contains two space-separated integers `P` and `A`, where `P` is the position of the Orb and `A` is the power of the Orb. -----Output format----- Print a single line that contains a single integer, the minimum number of Orbs required to influence the entire segment. -----Testdata----- 1 ≤ N ≤ 105 1 ≤ M ≤ 106 1 ≤ L < R ≤ 106 1 ≤ P ≤ 106 1 ≤ A ≤ 106 -----Sample Input----- 3 8 2 9 1 1 5 3 10 1 -----Sample Output----- 2 In this example, placing the Orb at position `5` (which influences `[2, 8]`) and the Orb at position `10` (which influences `[9, 11]`) will cover the entire segment `[2, 9]` with the minimum of 2 Orbs.","solution":"def min_orbs_to_influence_segment(N, M, L, R, orbs): # First we sort the orbs based on their effective start position orbs.sort(key=lambda orb: orb[0] - orb[1]) min_orbs = 0 current_end = L - 1 i = 0 # Iterate until we have covered the entire segment [L, R] while current_end < R: best_orb_end = current_end while (i < N and orbs[i][0] - orbs[i][1] <= current_end + 1): best_orb_end = max(best_orb_end, orbs[i][0] + orbs[i][1]) i += 1 if best_orb_end == current_end: return -1 # Segment cannot be fully covered current_end = best_orb_end min_orbs += 1 return min_orbs # Example usage: # N = 3 # M = 8 # L = 2 # R = 9 # orbs = [(1, 1), (5, 3), (10, 1)] # print(min_orbs_to_influence_segment(N, M, L, R, orbs)) # Output should be 2"},{"question":"Emily is a crossword puzzle enthusiast and is designing a custom crossword puzzle. She has a grid of letters and wants to identify how many specific words can be found within it. The words can be present horizontally, vertically, or diagonally in any direction (top-left to bottom-right, top-right to bottom-left, bottom-left to top-right, or bottom-right to top-left). -----Input----- - The first line contains an integer T, denoting the number of test cases. - The first line of each test case contains two integers, N and M, denoting the dimensions of the grid. - Each of the next N lines contains M characters, representing the grid. - The next line contains an integer W, denoting the number of words to search for. - The following W lines each contain a single word. -----Output----- - For each test case, output the number of words that can be found in the grid. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 50 - 1 ≤ W ≤ 20 - 1 ≤ Length of each word ≤ min(N, M) -----Example----- Input: 2 5 5 ABCDE FGHIJ KLMNO PQRST UVWXY 2 EFG PQR 4 4 WXYZ QRST UVWX YZUV 3 WXYZ QRST XYZW Output: 1 2 -----Explanation----- Example case 1. The word \\"EFG\\" appears horizontally in the first test case\'s grid. The word \\"PQR\\" does not appear, so the output is 1. Example case 2. The word \\"WXYZ\\" appears diagonally (top-right to bottom-left). The word \\"QRST\\" appears horizontally. The word \\"XYZW\\" does not appear. Hence, the output is 2.","solution":"def find_word_in_grid(grid, word): N, M = len(grid), len(grid[0]) len_word = len(word) # Direction vectors for 8 possible directions directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] def is_valid(x, y): return 0 <= x < N and 0 <= y < M def search(x, y, dx, dy): for k in range(len_word): nx, ny = x + k * dx, y + k * dy if not is_valid(nx, ny) or grid[nx][ny] != word[k]: return False return True for i in range(N): for j in range(M): if grid[i][j] == word[0]: # Starting position matches the first letter of the word for dx, dy in directions: if search(i, j, dx, dy): return True return False def count_words_in_grid(T, test_cases): results = [] for t in range(T): N, M = test_cases[t][\\"dimensions\\"] grid = test_cases[t][\\"grid\\"] W = test_cases[t][\\"word_count\\"] words = test_cases[t][\\"words\\"] count = 0 for word in words: if find_word_in_grid(grid, word): count += 1 results.append(count) return results"},{"question":"Task Given an array of integers, sort the array in such a way that all even numbers appear at the beginning of the array, followed by all odd numbers. The even numbers should be sorted in ascending order, while the odd numbers should be sorted in descending order. Example * Input: [3, 1, 2, 4, 6, 5, 9, 10] * Output: [2, 4, 6, 10, 9, 5, 3, 1] Notes - The original array can be modified. - You need to implement the function `special_sort(arr)` which takes an array of integers as input and returns the sorted array as specified.","solution":"def special_sort(arr): Sort the array such that all even numbers come first (in ascending order), followed by all odd numbers (in descending order). evens = sorted([x for x in arr if x % 2 == 0]) odds = sorted([x for x in arr if x % 2 != 0], reverse=True) return evens + odds"},{"question":"You are given an array of integers `arr` and a target sum `T`. Your task is to write a function that determines if there is a pair of distinct elements in the array whose sum equals the target sum `T`. Example: Let arr be [5, 3, 10, 6, 8]. Let T be 9. We see that 5 + 4 = 9 and 1 + 8 = 9. Thus, the function should return `True`. Another Example: Let arr be [2, 4, 6, 8]. Let T be 13. There are no two distinct elements in the array that add up to 13. Thus, the function should return `False`. Function Signature: ```python def has_pair_with_target_sum(arr: list, T: int) -> bool: pass ``` Constraints: - The array size is `n` (1 ≤ n ≤ 10^5). - Each element in the array is a positive integer less than 10^5. - The function should aim for O(n) time complexity.","solution":"def has_pair_with_target_sum(arr, T): Determines if there are two distinct elements in the array `arr` that sum up to `T`. :param arr: List of integers :param T: Target sum :return: Boolean value indicating if such a pair exists seen = set() for num in arr: if T - num in seen: return True seen.add(num) return False"},{"question":"Write a program that takes a year as input and determines if it is a \'Beautiful Year\'. A year is considered beautiful if no two digits in it are the same. Your program should read a single year from the standard input, process it, and print the next beautiful year that is strictly greater than the given one. For example, if the input year is 1987, the next beautiful year is 2013. Input Format: - A single integer Y, representing the starting year (1000 ≤ Y ≤ 9000). Output Format: - A single integer, which is the next beautiful year greater than Y. Sample Input: ``` 1987 ``` Sample Output: ``` 2013 ``` Here is a brief explanation of how the sample solution is derived: - 1987 is not considered as we need a year greater than 1987. - 1988 has repeated \'8\'s, so it\'s not a beautiful year. - 1989 has repeated \'9\'s, so it\'s not a beautiful year. - 1990, 1991, 1992, etc., all have repeated digits until the year 2013, which has all unique digits. Therefore, 2013 is the next beautiful year.","solution":"def is_beautiful_year(year): Checks if the year has all unique digits. year_str = str(year) return len(year_str) == len(set(year_str)) def next_beautiful_year(year): Finds the next beautiful year greater than the given year. year += 1 while not is_beautiful_year(year): year += 1 return year"},{"question":"The city council of \\"GreenCity\\" has decided to plant trees along its streets to enhance the city\'s greenery. There are n streets in the city and m different types of trees they can plant. Some types of trees, however, cannot be planted next to each other due to ecological constraints. Each street should be planted with exactly one type of tree, and no two adjacent streets can have trees from the restricted pairs list. Your task is to determine if there exists any way to assign tree types to the streets such that no two adjacent streets have trees from the restricted pairs. If it\'s possible, return one valid assignment. If there are multiple valid assignments, return any one of them. If it\'s not possible, return an empty list. # Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of streets and the number of tree types respectively. The second line contains n - 1 integers d_i (1 ≤ d_i ≤ n - 1) — indicating that the i-th street is adjacent to the (i + 1)-th street. Then the third line contains an integer k (0 ≤ k ≤ m(m-1)/2) — the number of restricted tree type pairs. Each of the next k lines contains two integers t1 and t2 (1 ≤ t1, t2 ≤ m) — indicating that tree types t1 and t2 cannot be planted next to each other. # Output If it is possible to assign the tree types to the streets in a valid way, output one possible assignment as a list of n integers. If multiple valid assignments exist, output any one of them. If no valid assignment exists, output an empty list. # Examples Input 6 3 1 2 3 4 5 2 1 2 2 3 Output [1, 3, 1, 3, 1, 3] Input 4 2 1 2 3 1 1 2 Output [] # Note In the first example, a valid assignment can be [1, 3, 1, 3, 1, 3] because none of the adjacent streets have tree types from the restricted pairs. In the second example, it\'s impossible to assign tree types to streets such that restricted pair (1, 2) is not adjacent because there are only two tree types and two adjacent streets will inevitably have them.","solution":"def plant_trees(n, m, streets, restricted_pairs): adjacency_list = {i: set(range(1, m + 1)) for i in range(n)} for t1, t2 in restricted_pairs: if t2 in adjacency_list[0]: adjacency_list[0].remove(t2) if t1 in adjacency_list[1]: adjacency_list[1].remove(t1) def is_valid(assignment): for i in range(n-1): if (assignment[i], assignment[i+1]) in restricted_pairs or (assignment[i+1], assignment[i]) in restricted_pairs: return False return True def backtrack(assignment): if len(assignment) == n: return is_valid(assignment) idx = len(assignment) for tree in adjacency_list[idx]: assignment.append(tree) if backtrack(assignment): return assignment assignment.pop() return False assignment = [] result = backtrack(assignment) if result: return assignment else: return []"},{"question":"Consider an array of non-negative integers representing the heights of bars in a histogram. Each bar\'s width is 1. The task is to determine the maximum rectangle area that can be formed within the histogram. For example, given the histogram `heights = [2, 1, 5, 6, 2, 3]`, the largest rectangle has an area of `10`. You need to implement the function `largest_rectangle_area(heights)` that takes in a list of non-negative integers representing the heights and returns the size of the largest rectangle area that can be formed in the histogram, considering the heights as bar heights and each width as 1 unit. # Examples: ```python largest_rectangle_area([2, 1, 5, 6, 2, 3]) == 10 largest_rectangle_area([2, 4]) == 4 largest_rectangle_area([1, 2, 3, 4, 5]) == 9 largest_rectangle_area([5, 4, 3, 2, 1]) == 9 largest_rectangle_area([1, 2, 1]) == 3 ``` # Constraints: - The array will contain at least one bar. - Each height in the array is a non-negative integer.","solution":"def largest_rectangle_area(heights): Find the largest rectangle area in the histogram represented by heights. stack = [] max_area = 0 index = 0 # Iterate through all bars of the histogram while index < len(heights): # If this bar is higher than the bar at stack top, push it to stack if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) # Now pop the remaining bars from the stack and calculate area with each popped bar\'s height as the smallest height while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Santa Claus is preparing for the Christmas gifts distribution and wants to make a list of all toys he needs to collect. Each toy has a unique score based on its popularity and demand among children. Santa needs to find out the \\"k\\" most popular toys based on their scores from a given list of scores. Write a function called `find_top_k_toys(scores, k)` that takes in a list of integers `scores` and an integer `k`, and returns a list of integers containing the top k scores from the given list in descending order. If there are fewer than k unique scores available, return all of them in descending order. -----Input----- - A list of integers `scores` where each integer represents the score of a toy. - An integer `k` representing the number of top scores to return. -----Output----- - A list of integers representing the top k scores, sorted in descending order. -----Constraints----- - 1 ≤ len(scores) ≤ 10^5 - 1 ≤ score ≤ 10^9 for any score in scores - 1 ≤ k ≤ len(scores) -----Example----- Input: scores = [50, 20, 20, 30, 40, 10, 50] k = 3 Output: [50, 40, 30]","solution":"def find_top_k_toys(scores, k): Returns the top k unique scores in descending order from the given list. :param scores: List of integers representing the scores of toys :param k: Integer representing the number of top scores to return :return: List of integers with the top k scores in descending order # Remove duplicates and sort the scores in descending order unique_scores = sorted(set(scores), reverse=True) # Return the top k scores, or all scores if there are fewer than k return unique_scores[:k]"},{"question":"# Task Write a function that takes a list of integers and returns a new list containing only the numbers that have exactly three divisors (1, the number itself, and one other divisor). # Notes * The input list contains integers greater than 1. * The list should maintain the original order of the numbers that qualify. * Return the result as a list of integers.","solution":"def has_exactly_three_divisors(n): Helper function to check if a number has exactly three divisors. if n < 2: return False root = int(n**0.5) return root * root == n and all(n % i != 0 for i in range(2, root)) def filter_three_divisors(nums): Returns a list of numbers from the input list that have exactly three divisors. return [num for num in nums if has_exactly_three_divisors(num)] # Example usage nums = [2, 3, 4, 7, 9, 10, 16, 25, 36] print(filter_three_divisors(nums)) # Output should be [4, 9, 25]"},{"question":"You need to implement a function to determine if an item is in stock at a store. The store\'s inventory will be provided as a dictionary, where keys are item names and values are the quantities available. ```python def in_stock(item, inventory): pass ``` The function should take an item name (string) and an inventory dictionary as arguments. If the item is in stock (quantity greater than 0), the function should return \\"In stock\\". If the item is not in stock or if the item does not exist in the inventory, the function should return \\"Out of stock\\". Example: ```python inventory = { \\"apple\\": 4, \\"banana\\": 0, \\"orange\\": 10 } print(in_stock(\\"apple\\", inventory)) # Output: \\"In stock\\" print(in_stock(\\"banana\\", inventory)) # Output: \\"Out of stock\\" print(in_stock(\\"grape\\", inventory)) # Output: \\"Out of stock\\" ```","solution":"def in_stock(item, inventory): Determines if an item is in stock at the store. Args: item (str): The name of the item. inventory (dict): A dictionary where keys are item names and values are quantities available. Returns: str: \\"In stock\\" if the item is in stock (quantity > 0), otherwise \\"Out of stock\\". if inventory.get(item, 0) > 0: return \\"In stock\\" else: return \\"Out of stock\\""},{"question":"Given a string `s` and an integer `k`, rotate the string `k` characters to the right. That is, move each character in the string to a position that is `k` places to the right of its current position. If a character\'s new position exceeds the length of the string, it wraps around to the beginning. **Input**: - `s`: a non-empty string of lowercase English letters with length `n`. - `k`: an integer where `0 <= k < 10^6`. **Output**: - A new string that is the result of rotating the input string `s` to the right by `k` characters. **Examples**: Input: ``` s: \\"abcdef\\" k: 2 ``` Output: ``` \\"efabcd\\" ``` Input: ``` s: \\"helloworld\\" k: 15 ``` Output: ``` \\"worldhello\\" ```","solution":"def rotate_string(s, k): Rotate the string `s` to the right by `k` characters. n = len(s) k = k % n # To handle cases where k >= n return s[-k:] + s[:-k]"},{"question":"Consider the development of a function that identifies the longest path in a given grid where each cell contains letters and the path can only move to adjacent cells (horizontally or vertically, not diagonally). The path must form a sequence of unique letters. You need to find the length of this longest unique path. # Function Signature ```python def longest_unique_path(grid: List[List[str]]) -> int: ``` # Input - `grid` : A 2D list of characters representing the grid (1 <= len(grid), len(grid[0]) <= 20). # Output - Return an integer representing the length of the longest path of unique letters. # Examples ```python grid1 = [ [\'A\', \'B\', \'C\'], [\'D\', \'E\', \'F\'], [\'G\', \'H\', \'I\'] ] longest_unique_path(grid1) # returns 9 grid2 = [ [\'A\', \'B\', \'A\'], [\'C\', \'D\', \'C\'] ] longest_unique_path(grid2) # returns 4 grid3 = [ [\'A\', \'B\'], [\'C\', \'C\'] ] longest_unique_path(grid3) # returns 3 ``` # Notes - The starting cell can be any cell in the grid. - Ensure an efficient approach to handle the grid\'s maximum size within a reasonable computation time. - While traversing the grid, only move to cells containing unique characters, i.e., no character in the path should be repeated. - This is a backtracking problem, so consider using techniques such as depth-first search (DFS).","solution":"from typing import List, Set def longest_unique_path(grid: List[List[str]]) -> int: def dfs(x: int, y: int, visited: Set[str]) -> int: if not (0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] not in visited): return len(visited) visited.add(grid[x][y]) max_length = 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: max_length = max(max_length, dfs(x + dx, y + dy, visited)) visited.remove(grid[x][y]) return max_length max_path = 0 for i in range(len(grid)): for j in range(len(grid[0])): max_path = max(max_path, dfs(i, j, set())) return max_path"},{"question":"# Introduction In a given string comprised of alphabetical characters, we need to determine whether we can rearrange the characters to form a palindrome. A palindrome is a word that reads the same forward and backward (e.g., \\"madam\\" or \\"racecar\\"). To do this, the frequency of each character in the string must meet specific conditions: - For strings of even length, all characters must appear an even number of times. - For strings of odd length, at most one character can appear an odd number of times. # Task Write a function `canFormPalindrome` that checks if it\'s possible to rearrange the characters of a given string `s` to form a palindrome. # Input / Output The `s` input is a non-empty string consisting of lowercase and/or uppercase alphabetic characters. The output is a boolean: `True` if it is possible to rearrange the characters to form a palindrome, and `False` otherwise. # Example ```python canFormPalindrome(\\"civic\\") ==> True canFormPalindrome(\\"ivicc\\") ==> True canFormPalindrome(\\"hello\\") ==> False canFormPalindrome(\\"Aba\\") ==> True ``` # Explanation In the first case, \\"civic\\" is already a palindrome. In the second case, \\"ivicc\\" can be rearranged to \\"civic\\". In the third case, there is no way to rearrange \\"hello\\" into a palindrome. In the fourth case, \\"Aba\\" (ignoring case) can be rearranged to \\"aba\\". # Note Consider the function to treat characters in a case-insensitive manner. That is, \\"A\\" is considered the same as \\"a\\".","solution":"def canFormPalindrome(s): Checks if the characters of the given string can be rearranged to form a palindrome. from collections import Counter # Normalize to lower case as the problem is case-insensitive s = s.lower() # Count the frequency of each character char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be rearranged into a palindrome, at most one character can have an odd frequency return odd_count <= 1"},{"question":"# Description: Create a function `find_middle` that takes a list of words as input and returns the word(s) that is/are in the middle of the list. If the list has an even number of words, return the two middle words concatenated with a space in between. If the list has an odd number of words, return the single middle word. # Examples ``` find_middle([\\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\"]) === \\"three\\" find_middle([\\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\"]) === \\"three four\\" find_middle([\\"first\\", \\"second\\", \\"third\\", \\"fourth\\", \\"fifth\\"]) === \\"third\\" find_middle([\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"g\\"]) === \\"d\\" find_middle([\\"this\\", \\"is\\", \\"an\\", \\"example\\"]) === \\"is an\\" ``` # Constraints - The list will contain at least one word. - All words in the list are non-empty strings containing only alphabetical characters. - You may not use any built-in functions that directly compute the middle index.","solution":"def find_middle(words): Returns the middle word(s) from the list of words. If the list has an odd number of words, returns the middle word. If the list has an even number of words, returns the two middle words concatenated with a space. n = len(words) mid = n // 2 if n % 2 == 0: # Even number of words return words[mid - 1] + \\" \\" + words[mid] else: # Odd number of words return words[mid]"},{"question":"_Calculate Worker Salaries based on Daily Rates and Days Worked._ Alex is a manager and wants to calculate the total salary of each worker in the factory. Each worker has a unique ID and a daily rate of pay. The number of days each worker has worked is also provided. __Input:__ - A list of tuples, where each tuple contains the worker\'s ID (an integer), daily rate (a float), and the number of days worked (an integer). __Output:__ - A dictionary where the key is the worker\'s ID and the value is the total salary of that worker as a float. __Examples:__ calculate_salaries([(1, 100.0, 20), (2, 200.0, 15), (3, 150.0, 10)]) == {1: 2000.0, 2: 3000.0, 3: 1500.0} calculate_salaries([(4, 80.5, 25), (5, 110.0, 22)]) == {4: 2012.5, 5: 2420.0}","solution":"def calculate_salaries(worker_info): Calculate the total salary of each worker based on their daily rate and the number of days worked. Parameters: worker_info (list of tuples): Each tuple contains the worker\'s ID (int), daily rate (float), and the number of days worked (int). Returns: dict: A dictionary with worker\'s ID as keys and their total salary as values. salaries = {} for worker_id, daily_rate, days_worked in worker_info: total_salary = daily_rate * days_worked salaries[worker_id] = total_salary return salaries"},{"question":"Write a function that takes a single argument (a string) and returns the string reversed. For example, if the input string is `\\"hello\\"`, the function should return `\\"olleh\\"`. SQL: Return results in a column named `reversed_string`. *[Ensure to replicate the specified output exactly to achieve the desired functionality]*","solution":"def reverse_string(s): Returns the reverse of the input string. return s[::-1]"},{"question":"Four students are participating in a programming contest where they need to solve N distinct problems. Each student has a different problem-solving skill level, described by a positive integer. The contest organizers decide to arrange the problems in a sequence such that the skill level required to solve each problem is an integer K, where 1 ≤ K ≤ N. The students attempt to solve the problems in turn, and each problem is solved by exactly one student. The organizer\'s goal is to maximize the total skill utilization, which is defined as the sum of the product of the student\'s skill level and the problem\'s difficulty level for all the problems. For example, suppose N is 4 and the skill levels of the four students are 1, 2, 3, and 4 respectively. Then a possible arrangement of the problems might assign the difficulties in the order [3, 1, 4, 2]. One optimal way to assign the problems to the students might be to give the problem with difficulty 1 to the student with skill level 1, the difficulty 2 problem to the student with skill level 2, and so on. The total skill utilization in this case would be: ``` 1*1 + 2*2 + 3*3 + 4*4 = 1 + 4 + 9 + 16 = 30 ``` # Input format: - Line 1: A single integer, N. - Line 2: N space-separated integers, the skill levels of the N students. # Output format: A single integer, the maximum total skill utilization for the given students\' skill levels and problem difficulties. # Sample Input: ``` 4 1 2 3 4 ``` # Sample Output: ``` 30 ``` # Test Data: In all subtasks, the skill level of each student is an integer between 1 and 1,000 inclusive. - Subtask 1 (30 marks): 2 ≤ N ≤ 1,000. - Subtask 2 (70 marks): 2 ≤ N ≤ 200,000. # Note: The answer might not fit in a variable of type int. We recommend that type long long be used for computing all skill utilizations. If you use printf and scanf, you can use %lld for long long.","solution":"def max_skill_utilization(N, skills): Returns the maximum total skill utilization for given students\' skill levels and problem difficulties. Args: - N (int): Number of students/problems - skills (list of int): Skill levels of the students Returns: - int: Maximum total skill utilization # Sort the list of skills skills.sort() # Calculate the maximum skill utilization total_utilization = sum(skill * (i + 1) for i, skill in enumerate(skills)) return total_utilization"},{"question":"You are given a list of unique integers, and each integer represents the identifier of a unique product. You need to form bundles of these products such that each bundle has exactly `k` products. If it is not possible to form such bundles with the given list, return an empty list. Otherwise, return a list of lists, where each inner list is a bundle of `k` products. Write a function that takes two parameters: an integer `k` and a list of integers `products`. The function should return a list of lists (each containing `k` products) or an empty list if it\'s not possible to form the required bundles. **Function Signature**: ```python def product_bundles(k: int, products: List[int]) -> List[List[int]]: ``` **Examples**: ```python assert product_bundles(2, [1, 2, 3, 4]) == [[1, 2], [3, 4]] assert product_bundles(3, [1, 2, 3, 4, 5, 6]) == [[1, 2, 3], [4, 5, 6]] assert product_bundles(2, [1, 2, 3]) == [] assert product_bundles(1, [1, 2, 3, 4, 5]) == [[1], [2], [3], [4], [5]] ``` **Constraints**: - The length of the `products` list will not exceed `10^5`. - Each element in the `products` list will be a unique integer in the range `[1, 10^6]`. - `k` will be a positive integer.","solution":"from typing import List def product_bundles(k: int, products: List[int]) -> List[List[int]]: Returns a list of lists, where each inner list is a bundle of `k` products, or an empty list if it\'s not possible to form the required bundles. # Check if it\'s possible to form bundles of k products if len(products) % k != 0: return [] # Form the bundles bundles = [products[i:i + k] for i in range(0, len(products), k)] return bundles"},{"question":"Given an array of non-negative integers representing heights of pillars with width 1, calculate how much water can be trapped after raining. Note: - The array length is at least 2 and the elements of the array are non-negative integers. Example 1: Input: heights = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (heights array) is represented as below: | | | | | # | | # | # | | # |#|#| | # |||#| ------------- 0 1 0 2 1 0 1 3 2 1 2 1 In this case, 6 units of rain water (represented by \'#\') are being trapped. Example 2: Input: heights = [4,2,0,3,2,5] Output: 9 Explanation: The above elevation map (heights array) is represented as below: | | | | | | | # | | | | # | | | |||#|#| | ------------- 4 2 0 3 2 5 In this case, 9 units of rain water (represented by \'#\') are being trapped.","solution":"def trap_rain_water(heights): Calculate the amount of water that can be trapped after raining. Args: heights (list of int): List of non-negative integers representing heights of pillars. Returns: int: The total amount of trapped water. if not heights or len(heights) < 2: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): water_level = min(left_max[i], right_max[i]) trapped_water += max(0, water_level - heights[i]) return trapped_water"},{"question":"Our hero has arrived at the castle door, only to find it locked with a mysterious code. The code is a sequence of digits hidden in a string, and the hero can unlock the door by finding the largest contiguous sequence of digits in the string. Write a function that takes a string as input and returns the largest contiguous sequence of digits found in the string. If there are multiple sequences with the same length, return the first one. Example: Input: \\"abc123xyz4567def\\" Output: \\"4567\\"","solution":"def largest_contiguous_sequence_of_digits(s): Returns the largest contiguous sequence of digits found in the input string. Parameters: s (str): Input string containing alphanumeric characters. Returns: str: Largest contiguous sequence of digits in the input string. max_sequence = \\"\\" current_sequence = \\"\\" for char in s: if char.isdigit(): current_sequence += char if len(current_sequence) > len(max_sequence): max_sequence = current_sequence else: current_sequence = \\"\\" return max_sequence"},{"question":"Your task is to implement a function that takes a list of integers and returns a new list where all even numbers are incremented by 1 and all odd numbers are decremented by 1. For example: Input : [1, 2, 3, 4, 5] Output : [0, 3, 2, 5, 4] Note: The input list will always contain at least one integer.","solution":"def transform_list(lst): Takes a list of integers and returns a new list where: - All even numbers are incremented by 1. - All odd numbers are decremented by 1. Parameters: - lst: List of integers. Returns: - A new list with transformed integers. return [x + 1 if x % 2 == 0 else x - 1 for x in lst]"},{"question":"Implement a function to calculate the maximum sum subarray using the divide and conquer approach. # Inputs: A list of integers `arr` which could contain both positive and negative numbers. # Outputs: A tuple with two elements: 1. An integer representing the maximum sum of the subarray. 2. A list of integers which represents the subarray with the maximum sum. # Example: Input: `arr = [-2,1,-3,4,-1,2,1,-5,4]` Output: `(6, [4, -1, 2, 1])` # Notes: - The function should use a divide and conquer strategy to find the maximum sum subarray. - The subarray that has the maximum sum should be returned in the output along with the sum. - If there are multiple subarrays with the same maximum sum, return any one of them.","solution":"def max_crossing_sum(arr, left, mid, right): Helper function to find the maximum sum of the subarray crossing the midpoint. # Initialize variables to store the maximum sums on the left and right of the midpoint left_sum = float(\'-inf\') right_sum = float(\'-inf\') # Calculate the maximum sum in the left half sum_left = 0 max_left_idx = mid for i in range(mid, left - 1, -1): sum_left += arr[i] if sum_left > left_sum: left_sum = sum_left max_left_idx = i # Calculate the maximum sum in the right half sum_right = 0 max_right_idx = mid + 1 for i in range(mid + 1, right + 1): sum_right += arr[i] if sum_right > right_sum: right_sum = sum_right max_right_idx = i return (left_sum + right_sum, arr[max_left_idx:max_right_idx + 1]) def max_subarray_sum(arr, left, right): Helper function to find the maximum sum subarray using the divide and conquer approach. if left == right: return (arr[left], [arr[left]]) mid = (left + right) // 2 # Recursively get the maximum sum in the left, right, and crossing subarrays left_sum, left_subarray = max_subarray_sum(arr, left, mid) right_sum, right_subarray = max_subarray_sum(arr, mid + 1, right) crossing_sum, crossing_subarray = max_crossing_sum(arr, left, mid, right) # Return the maximum of the three if left_sum >= right_sum and left_sum >= crossing_sum: return (left_sum, left_subarray) elif right_sum >= left_sum and right_sum >= crossing_sum: return (right_sum, right_subarray) else: return (crossing_sum, crossing_subarray) def find_maximum_subarray(arr): Find the subarray with the maximum sum using the divide and conquer approach. if not arr: return (0, []) return max_subarray_sum(arr, 0, len(arr) - 1)"},{"question":"Write a function that takes two strings as input, representing a list of words separated by spaces. Your task is to merge these two strings into a single string where words from the second string are inserted after every word from the first string, maintaining their respective order. Ensure that there\'s exactly one space between each word in the resulting string, and trim any leading or trailing whitespace. If one string is longer than the other, append the remaining words from the longer string to the end of the merged string. Punctuation marks should be treated as part of the words.","solution":"def merge_strings(s1, s2): Merges two strings, inserting words from `s2` after every word from `s1`, maintaining their respective order. If one string is longer than the other, appends the remaining words from the longer string to the end of the merged string. Args: s1 (str): The first input string. s2 (str): The second input string. Returns: str: The merged string with words from `s1` and `s2`. words1 = s1.split() words2 = s2.split() merged_words = [] len1, len2 = len(words1), len(words2) max_len = max(len1, len2) for i in range(max_len): if i < len1: merged_words.append(words1[i]) if i < len2: merged_words.append(words2[i]) return \' \'.join(merged_words)"},{"question":"Design a class `MovieRatingSystem` which can be used to track and query the ratings of movies. The class should support the following methods: 1. `addRating(movieId, rating)`: Adds a rating for the given `movieId`. Ratings are represented by integers and can vary between 1 and 5. 2. `getAverageRating(movieId)`: Returns the average rating of the specified `movieId`. If the movie has no ratings, return -1. 3. `getTopRatedMovies(n)`: Returns a list of the top `n` movies with the highest average rating. In case of ties in the average rating, the movies are returned in ascending order of their `movieId`. # Example ```python Input [\\"MovieRatingSystem\\",\\"addRating\\",\\"addRating\\",\\"addRating\\",\\"getAverageRating\\",\\"addRating\\",\\"getAverageRating\\",\\"getTopRatedMovies\\"] [[],[1,4],[1,5],[2,3],[1],[2,4],[2],[1]] Output [null,null,null,null,4.5,null,3.5,[1]] ``` ```python Explanation MovieRatingSystem movieRatingSystem = new MovieRatingSystem(); movieRatingSystem.addRating(1, 4); movieRatingSystem.addRating(1, 5); movieRatingSystem.addRating(2, 3); movieRatingSystem.getAverageRating(1); // return 4.5, since (4+5)/2 = 4.5 movieRatingSystem.addRating(2, 4); movieRatingSystem.getAverageRating(2); // return 3.5, since (3+4)/2 = 3.5 movieRatingSystem.getTopRatedMovies(1); // return [1], movie 1 has a higher average rating than movie 2 ``` # Constraints - Ratings can only be integers between 1 and 5, inclusive. - `n` will always be a positive integer. - Methods `addRating` and `getAverageRating` will be called at most 10^4 times each. - The `getTopRatedMovies` method will be called at most 10^4 times. - There will be at most 10^4 different `movieId`s. - The result of `getAverageRating` should be returned up to two decimal places.","solution":"class MovieRatingSystem: def __init__(self): self.ratings = {} def addRating(self, movieId, rating): if movieId not in self.ratings: self.ratings[movieId] = [] self.ratings[movieId].append(rating) def getAverageRating(self, movieId): if movieId not in self.ratings or len(self.ratings[movieId]) == 0: return -1 sum_ratings = sum(self.ratings[movieId]) count_ratings = len(self.ratings[movieId]) return round(sum_ratings / count_ratings, 2) def getTopRatedMovies(self, n): avg_ratings = [(movieId, sum(ratings) / len(ratings)) for movieId, ratings in self.ratings.items()] avg_ratings.sort(key=lambda x: (-x[1], x[0])) return [movieId for movieId, _ in avg_ratings[:n]]"},{"question":"Write a program that takes an integer array as input and outputs the sum of its even elements. -----Input:----- The first line of the input contains an integer n, the size of the array. The second line contains n space-separated integers representing the elements of the array. -----Output:----- For each testcase, output in a single line the sum of the even elements of the array. -----Sample Input:----- 5 1 2 3 4 5 -----Sample Output:----- 6","solution":"def sum_of_even_elements(n, arr): Returns the sum of even elements in the given array. Parameters: n (int): The size of the array. arr (list of int): The array of integers. Returns: int: The sum of the even elements in arr. return sum(x for x in arr if x % 2 == 0)"},{"question":"Given an array of integers representing the number of pages Chef has to read each day to complete a book within a certain number of days, you are required to find out if Chef is able to finish the book on time. Chef has D days to read the book and can read at most K pages per day. You need to write a program that determines whether Chef can complete the book on time without exceeding the daily page reading limit. -----Input----- First line of the input contains an integer T denoting number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and D, representing the number of segments and the number of days available respectively. The second line of each test case contains N space-separated integers representing the number of pages Chef needs to read each day. -----Output----- For each test case, output \\"YES\\" if Chef can read the book within D days without exceeding K pages per day, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 25 - 1 ≤ N, D ≤ 1000 - 1 ≤ pages per segment ≤ 10^6 - 1 ≤ K ≤ 10^6 -----Example----- Input 2 5 3 100 200 300 400 500 4 4 100 200 300 100 Output NO YES -----Explanation----- Example case 1: Chef needs to read 1000 pages in 5 days, but he can only read a maximum of 300 pages per day. The books cannot be segmented in such a way that he reads 1000 pages within 3 days without exceeding the daily reading limit of 300 pages. Example case 2: Chef needs to read 700 pages in 4 days, and he can read a maximum of 300 pages per day. He can read every segment within the given limit without any issues, so the answer is \\"YES\\".","solution":"def can_chef_finish_book(T, test_cases): results = [] for i in range(T): N, D, pages, K = test_cases[i] page_segments = pages days_required = 0 possible = True for pages in page_segments: if pages > K: possible = False break if days_required + (pages // K) + (1 if pages % K != 0 else 0) > D: possible = False break else: days_required += (pages // K) + (1 if pages % K != 0 else 0) results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"A park has a boating lake with several types of boats: pedal boats, rowing boats, and motorboats. The park’s manager needs to know how many of each type of boat there are. Unfortunately, the data collected only includes the total number of boats, the total number of oars, and the total number of pedals in the park. Each pedal boat has 1 boat, 2 pedals, and no oars. Each rowing boat has 1 boat, no pedals, and 2 oars. Each motorboat has 1 boat, no pedals, and no oars. Write a function ```Python count_boats(total_boats, total_oars, total_pedals) ``` ```Csharp Dictionary count_boats(int total_boats, int total_oars, int total_pedals) ``` , which returns a dictionary ```python {\\"pedal_boats\\": pedal_boats_count, \\"rowing_boats\\": rowing_boats_count, \\"motorboats\\": motorboats_count} ``` ```Csharp new Dictionary(){{\\"pedal_boats\\", pedal_boats_count}, {\\"rowing_boats\\", rowing_boats_count}, {\\"motorboats\\", motorboats_count}} ``` Parameters `total_boats, total_oars, total_pedals` are integers, all tests have valid input. Example: ```python count_boats(14, 12, 4); # Should return {\\"pedal_boats\\": 2, \\"rowing_boats\\": 6, \\"motorboats\\": 6} count_boats(10, 6, 2); # Should return {\\"pedal_boats\\": 1, \\"rowing_boats\\": 3, \\"motorboats\\": 6} ``` ```Csharp count_boats(14, 12, 4); // Should return Dictionary(){{\\"pedal_boats\\", 2}, {\\"rowing_boats\\", 6}, {\\"motorboats\\", 6}} count_boats(10, 6, 2); // Should return Dictionary(){{\\"pedal_boats\\", 1}, {\\"rowing_boats\\", 3}, {\\"motorboats\\", 6}} ```","solution":"def count_boats(total_boats, total_oars, total_pedals): Returns the count of pedal boats, rowing boats, and motorboats. pedal_boats_count = total_pedals // 2 rowing_boats_count = total_oars // 2 motorboats_count = total_boats - (pedal_boats_count + rowing_boats_count) return { \\"pedal_boats\\": pedal_boats_count, \\"rowing_boats\\": rowing_boats_count, \\"motorboats\\": motorboats_count }"},{"question":"Given a grid of size `m x n`, find the number of unique paths from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. For example, with a grid of size `3 x 2`, your function should return `3` since there are three unique paths to reach the bottom-right corner: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right Write a function `unique_paths(m, n)` that takes two integers `m` (number of rows) and `n` (number of columns) and returns the number of unique paths. # Examples: Example 1: ```python m = 3 n = 7 unique_paths(m, n) -> 28 ``` Example 2: ```python m = 3 n = 2 unique_paths(m, n) -> 3 ``` # Constraints: The function should handle cases where `1 <= m, n <= 100`. The result is guaranteed to fit in a 32-bit integer.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of a m x n grid. # Create a 2D list with all elements set to 1, which represents the number of ways to reach each cell dp = [[1] * n for _ in range(m)] # Iterate over the cells of the grid starting from (1, 1) for i in range(1, m): for j in range(1, n): # The current cell\'s value is the sum of the cell above it and the cell to the left of it dp[i][j] = dp[i - 1][j] + dp[i][j - 1] # The bottom-right corner of the dp array contains the number of unique paths return dp[m - 1][n - 1]"},{"question":"# Longest Consecutive Sequence You are to write a function called `longest_consecutive_sequence` that takes a list of integers and returns the length of the longest consecutive elements sequence. The sequence must be strictly increasing by 1 without any breaks. Assumptions * All values given are integers (positive, zero, or negative). * The list may be empty. Example ```python print(longest_consecutive_sequence([100, 4, 200, 1, 3, 2])) 4 # The longest consecutive sequence is [1, 2, 3, 4] print(longest_consecutive_sequence([])) 0 # There are no elements in the list print(longest_consecutive_sequence([0, -1, 1, 2, -2, 3, -3])) 7 # The longest consecutive sequence is [-3, -2, -1, 0, 1, 2, 3] ``` Note The function should have an average time complexity better than O(n^2).","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence in an array. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a function that takes an array of integers and returns the index of the first element that is larger than its preceding element: ``` [1, 2, 3, 4, 5] => 1 [5, 1, 4, 2, 3] => 2 [7, 8, 7, 8, 7] => 1 [7, 5, 3, 1] => -1 ``` If no such element exists, the function should return `-1`. Note: the array should contain at least one element.","solution":"def first_larger_than_prev(arr): Returns the index of the first element that is larger than its preceding element. If no such element exists, returns -1. for i in range(1, len(arr)): if arr[i] > arr[i - 1]: return i return -1"},{"question":"Write a function that takes an input list of integers and returns a list of integers where all the even numbers precede the odd numbers. Within the even and odd numbers, their relative order should be preserved. If the list is empty, return an empty list. Examples: Input: [1, 2, 3, 4, 5, 6] Output: [2, 4, 6, 1, 3, 5] Input: [5, 3, 1, 2, 4, 6] Output: [2, 4, 6, 5, 3, 1]","solution":"def segregate_even_odd(numbers): Segregate even and odd numbers in a list such that all even numbers come before all odd numbers while preserving their relative order. :param numbers: List of integers. :return: List of integers with all even numbers preceding the odd numbers. if not numbers: return [] evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] return evens + odds"},{"question":"Create a function named `prime_sieve_interval` that takes two integers `low` and `high` as parameters and returns a list of all prime numbers within the given interval `[low, high]` (inclusive). Use the Sieve of Eratosthenes algorithm for this task to ensure efficiency, particularly for large intervals. If `low` is greater than `high`, return an empty list. The function should follow these rules: 1. Start with the smallest prime number, 2, and progressively mark the multiples of each prime number as non-prime. 2. Continue this process up to the square root of the maximum number in the range. 3. Adjust the algorithm to handle the lower bound being greater than 2. # Function Signature ```python def prime_sieve_interval(low: int, high: int) -> list: pass ``` # Constraints - The values of `low` and `high` will be non-negative integers, where `0 <= low, high <= 10^6`. # Example ```python prime_sieve_interval(10, 30) # Output: [11, 13, 17, 19, 23, 29] prime_sieve_interval(50, 60) # Output: [53, 59] prime_sieve_interval(100, 110) # Output: [101, 103, 107, 109] prime_sieve_interval(1, 1) # Output: [] prime_sieve_interval(20, 10) # Output: [] ``` Implement the function to match the specified behavior and constraints.","solution":"def prime_sieve_interval(low: int, high: int) -> list: if low > high: return [] if low < 2: low = 2 # Create a boolean array `is_prime[0..high]` and initialize is_prime = [True] * (high + 1) p = 2 while (p * p <= high): if is_prime[p]: for i in range(p * p, high + 1, p): is_prime[i] = False p += 1 # Collect prime numbers within the interval [low, high] primes = [num for num in range(low, high + 1) if is_prime[num]] return primes"},{"question":"Life on Mars has recently sparked interest among scientists. They have been conducting experiments to understand the alien data transmission system. The data is transmitted in sequences of characters, and based on the input characters, they need to decode the message. One important task is to determine the minimum number of steps required to convert a given string to a palindrome. A palindrome is a string that reads the same forward and backward. In a single step, you can change any character of the string to any other character. Given a string S, determine the minimum number of steps required to make it a palindrome. Scientists need your help to automate this process. -----Input----- The first and only line of input contains a string S consisting of lowercase Latin letters (a-z). -----Output----- Output a single integer denoting the minimum number of steps required to convert the given string to a palindrome. -----Constraints----- - 1 ≤ |S| ≤ 100000 (105) -----Example----- Input: abca Output: 1 Explanation: The string can be converted to \\"abba\\" or \\"acca\\" with one step, making it a palindrome. Input: race Output: 2 Explanation: The string can be converted to \\"racecar\\" in 2 steps by changing \\"r\\" to \\"e\\" and \\"e\\" to \\"r\\".","solution":"def min_steps_to_palindrome(s): Calculate the minimum number of steps required to convert the given string to a palindrome. :param s: Input string consisting of lowercase Latin letters :return: An integer representing the minimum number of steps to make S a palindrome n = len(s) steps = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: steps += 1 return steps"},{"question":"# Sum of Two Integers You are given two non-negative integers `a` and `b` represented as strings. Your task is to return their sum, also as a string. The input strings will not contain any leading zeros except the number \'0\' itself. Examples: ```python sumStrings(\\"123\\", \\"456\\") -> \\"579\\" sumStrings(\\"0\\", \\"0\\") -> \\"0\\" sumStrings(\\"1200\\", \\"345\\") -> \\"1545\\" ``` **Note:** - You are not allowed to convert the input strings to integers directly. - Solve the problem as you would add two numbers manually digit by digit.","solution":"def sumStrings(a, b): Returns the sum of two non-negative integers represented as strings. max_len = max(len(a), len(b)) # Pad the shorter string with zeros on the left a = a.zfill(max_len) b = b.zfill(max_len) carry = 0 result = [] # Add digits from right to left for i in range(max_len - 1, -1, -1): digit_sum = int(a[i]) + int(b[i]) + carry carry = digit_sum // 10 result.append(str(digit_sum % 10)) # If there\'s a carry left at the end, add it to the result if carry: result.append(str(carry)) # The result list contains the digits in reverse order result.reverse() return \'\'.join(result)"},{"question":"A food delivery service wants to optimize their delivery routes. They have a database of delivery destinations represented as a grid of N rows and M columns. Each cell in the grid has a value representing the number of deliveries to that destination. The delivery team wants to find an optimal circular route starting from the upper-left corner (0, 0), moving only right and down, and returning to the starting point. The objective is to find the maximum possible deliveries within any such valid circular route. Note that since the routes must be circular, you cannot directly return from any point except the bottom-right corner (N-1, M-1). -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - For each test case, a single line containing two integers, N and M. - N lines follow, each containing M integers representing deliveries. -----Output:----- For each test case, output in a single line the maximum deliveries possible in any valid circular route. -----Constraints----- - 1≤T≤10 - 2≤N, M≤500 - 1≤deliveries≤1000 -----Sample Input:----- 1 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output:----- 21 -----EXPLANATION:----- The optimal circular route for this grid would be: 1 (starting point) -> 2 -> 3 -> 6 -> 9 -> 8 -> 7 -> 4 (back to the starting point). The total deliveries for this route are 1 + 2 + 3 + 6 + 9 + 8 + 7 + 4 = 40","solution":"def max_deliveries(grid): N = len(grid) M = len(grid[0]) # DP table for down-right path down_right = [[0] * M for _ in range(N)] down_right[0][0] = grid[0][0] for i in range(N): for j in range(M): if i == 0 and j == 0: continue if i == 0: down_right[i][j] = down_right[i][j-1] + grid[i][j] elif j == 0: down_right[i][j] = down_right[i-1][j] + grid[i][j] else: down_right[i][j] = max(down_right[i-1][j], down_right[i][j-1]) + grid[i][j] # Total point when going through bottom-right corner total_deliveries = down_right[-1][-1] * 2 - grid[0][0] - grid[-1][-1] return total_deliveries def process_input(input_data): result = [] lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 for _ in range(T): N, M = map(int, lines[index].split()) index += 1 grid = [] for i in range(N): row = list(map(int, lines[index].split())) index += 1 grid.append(row) result.append(max_deliveries(grid)) for res in result: print(res)"},{"question":"Given an unsorted array of integers, find the length of the longest consecutive elements sequence. The algorithm should have a linear runtime complexity. Example 1: Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Example 2: Input: [0, -1, -2, 2, 3, 1] Output: 6 Explanation: The longest consecutive elements sequence is [-2, -1, 0, 1, 2, 3]. Therefore its length is 6.","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence in an unsorted array. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"# Kata Task You are given a string representing a list of integers separated by commas, e.g., \\"1,2,3,4\\". Write a function that finds the sum of the odd numbers in the list. **Function Signature** The function should be named `sum_of_odds` and have the following signature: ```python def sum_of_odds(numbers: str) -> int: ``` **Input** - A string `numbers` representing a list of integers separated by commas (1 <= length of numbers <= 10^6). - All integers are positive and between 1 and 10^6, inclusive. **Output** - Return an integer representing the sum of the odd numbers in the list. **Example** ```python sum_of_odds(\\"1,2,3,4,5\\") # returns 9, because 1 + 3 + 5 = 9 sum_of_odds(\\"2,4,6,8\\") # returns 0, because there are no odd numbers sum_of_odds(\\"11,22,33\\") # returns 44, because 11 + 33 = 44 ``` --- * Ensure to handle large inputs efficiently. * Do not import any external libraries.","solution":"def sum_of_odds(numbers: str) -> int: Returns the sum of odd numbers in a comma-separated string of integers. :param numbers: A string of comma-separated integers. :return: Sum of odd numbers. num_list = numbers.split(\',\') sum_odds = 0 for num in num_list: if int(num) % 2 != 0: sum_odds += int(num) return sum_odds"},{"question":"Your task is to help Julia analyze a library usage log to determine the most and least popular books based on their checkout frequencies over a year. -----Input----- The input consists of multiple lines: 1. The first line contains an integer N (1 ≤ N ≤ 1000), the number of books in the library. 2. The following N lines each contain a book ID (a string of alphanumeric characters) and an integer M (0 ≤ M ≤ 10000), the number of times the book was checked out in the year. -----Output----- Output two lines: 1. The first line should contain the book ID of the most popular book (the one with the highest checkout frequency). In case of a tie, output the lexicographically smallest book ID. 2. The second line should contain the book ID of the least popular book (the one with the lowest checkout frequency). In case of a tie, output the lexicographically smallest book ID. Note: If no books were checked out (M=0 for all books), output \\"None\\" for both lines. Example: -----Input----- 5 abc123 15 xyz456 9 def789 15 lmn234 0 pqr567 9 -----Output----- abc123 lmn234","solution":"def library_usage(log): n = int(log[0]) books = [tuple(log[i + 1].split()) for i in range(n)] books = [(book_id, int(checkouts)) for book_id, checkouts in books] if all(checkouts == 0 for book_id, checkouts in books): return \\"None\\", \\"None\\" most_popular = min((book for book in books if book[1] == max(books, key=lambda x: x[1])[1]), key=lambda x: x[0]) least_popular = min((book for book in books if book[1] == min(books, key=lambda x: x[1])[1]), key=lambda x: x[0]) return most_popular[0], least_popular[0]"},{"question":"A local grocery store wants to implement a discount system for their loyal customers. They have decided to introduce two types of discounts: a percentage discount and a flat amount discount. Depending on the customer\'s loyalty status and the amount they spend, the store will apply one of the discounts. # The rules for applying discounts are as follows: 1. If a customer spends 100 or more, a percentage discount is applied: - Regular customers get a 5% discount. - Silver members get a 10% discount. - Gold members get a 15% discount. 2. If the customer spends less than 100, a flat amount discount is applied: - Regular customers get 5 off. - Silver members get 10 off. - Gold members get 20 off. 3. If a discount (percentage or flat amount) results in a final amount less than 0, the minimum total cost should be 0. # Input: You will receive two inputs: 1. `spendings`: A float representing the total amount spent by the customer. 2. `status`: A string representing the loyalty status of the customer. It could be \\"regular\\", \\"silver\\", or \\"gold\\". # Output: Return the final amount the customer has to pay after applying the appropriate discount. # Example: ```python final_amount(150.0, \\"regular\\") # should return 142.5 final_amount(90.0, \\"silver\\") # should return 80.0 final_amount(50.0, \\"gold\\") # should return 30.0 final_amount(15.0, \\"regular\\") # should return 10.0 ``` Write a function `final_amount(spendings: float, status: str) -> float` to solve the problem.","solution":"def final_amount(spendings, status): Calculate the final amount after applying discount based on the customer\'s loyalty status and spending. Parameters: spendings (float): The total amount spent by the customer. status (str): The loyalty status of the customer (\\"regular\\", \\"silver\\", \\"gold\\"). Returns: float: The final amount to be paid by the customer after applying the discount. discount_amount = 0 if spendings >= 100: if status == \\"regular\\": discount_amount = spendings * 0.05 elif status == \\"silver\\": discount_amount = spendings * 0.10 elif status == \\"gold\\": discount_amount = spendings * 0.15 else: if status == \\"regular\\": discount_amount = 5 elif status == \\"silver\\": discount_amount = 10 elif status == \\"gold\\": discount_amount = 20 final_cost = spendings - discount_amount # Final cost should not be less than 0 if final_cost < 0: final_cost = 0 return final_cost"},{"question":"Given an integer array `nums` and an integer `k`, return the number of subarrays whose sum equals `k`. Example 1: Input: nums = [1,1,1], k = 2 Output: 2 Explanation: The subarrays [1,1] and [1,1] both have sum 2. Example 2: Input: nums = [1,2,3], k = 3 Output: 2 Explanation: The subarrays [1,2] and [3] both have sum 3. Note: - 1 <= nums.length <= 2 * 10^4 - -1000 <= nums[i] <= 1000 - -10^7 <= k <= 10^7","solution":"def subarray_sum(nums, k): count = 0 current_sum = 0 prefix_sums = {0: 1} # This is where we store the cumulative sums for num in nums: current_sum += num # If (current_sum - k) is in prefix_sums, that means there exists # a subarray that sums up to k if current_sum - k in prefix_sums: count += prefix_sums[current_sum - k] # Store current_sum in the prefix_sums and increment its count if current_sum in prefix_sums: prefix_sums[current_sum] += 1 else: prefix_sums[current_sum] = 1 return count"},{"question":"You are given an array of integers representing the positions of houses along a street. Each house has a mailbox, and the mailperson delivers mail to each house by walking from one mailbox to the next. The mailperson begins their route at the mailbox located at the first house in the array and must visit each mailbox in the order given. Write a function to determine the minimum distance the mailperson must travel to visit all mailboxes and return to the starting house. Write a function: ```python def min_mail_route(positions: List[int]) -> int: :param positions: List[int] - A list of integers indicating the positions of the houses along the street. :return: int - The minimum distance the mailperson must travel to visit all mailboxes and return to the starting house. pass ``` # Constraints: - The input list `positions` will have at least 2 houses and at most 100 houses. - The positions will be given in ascending order, and each position is a unique integer i.e., no two houses are at the same position. # Example: ```python positions = [2, 5, 11, 17] min_mail_route(positions) # Output: 30 ``` # Explanation: The mailperson travels from 2 to 5 (distance 3), from 5 to 11 (distance 6), from 11 to 17 (distance 6), and back from 17 to 2 (distance 15). The total distance is ( 3 + 6 + 6 + 15 = 30 ) miles.","solution":"from typing import List def min_mail_route(positions: List[int]) -> int: Calculates the minimum distance the mailperson must travel to visit all mailboxes and return to the starting house. :param positions: List[int] - A list of integers indicating the positions of the houses along the street. :return: int - The minimum distance the mailperson must travel to visit all mailboxes and return to the starting house. total_distance = 0 # Travel from the starting house to each subsequent house for i in range(1, len(positions)): total_distance += positions[i] - positions[i-1] # Travel back to the starting house total_distance += positions[-1] - positions[0] return total_distance"},{"question":"=====Problem Statement===== You are given a list of integers. Your task is to find the second largest integer in the list. =====Input Format===== A single line containing a space-separated list of integers. =====Constraints===== The list will have at least two distinct integers. Each integer in the list will be between -100 and 100. =====Output Format===== Output a single integer, the second largest integer in the input list. =====Sample Input===== 3 1 4 1 5 9 2 6 5 3 5 =====Sample Output===== 6 =====Explanation===== The largest integer in the input list is 9. The second largest integer is 6. Therefore, the output is 6.","solution":"def second_largest(numbers): Returns the second largest integer in the list. unique_numbers = list(set(numbers)) # Remove duplicates unique_numbers.sort(reverse=True) # Sort in descending order return unique_numbers[1] # Return the second largest def parse_input(input_string): Parses a space-separated string of integers into a list. return list(map(int, input_string.split()))"},{"question":"Given a string representing a mathematical expression, your task is to evaluate the expression and return the result. The expression will only contain non-negative integers, addition (+), and multiplication (*) operators, and it may include parentheses for grouping. The result should be calculated following the standard operator precedence: parentheses first, then multiplication, and finally addition. Example: ```python evaluate_expression(\\"4 + 3 * 3\\") = 13 evaluate_expression(\\"2 * (5 + 3)\\") = 16 evaluate_expression(\\"10 + (2 + 3) * 2\\") = 20 ``` More examples in test cases. Please also try [Balanced Parentheses](https://www.codewars.com/kata/52774a314c2333f0a7000688)","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers, addition (+), multiplication (*), and parentheses. Follows standard operator precedence: parentheses first, multiplication second, and addition last. try: result = eval(expression) return result except (SyntaxError, NameError): raise ValueError(\\"Invalid expression\\")"},{"question":"The aliquot sum of a positive integer is the sum of all its proper divisors, excluding the number itself. For example, the proper divisors of 12 are 1, 2, 3, 4, and 6. Therefore, the aliquot sum of 12 is 1 + 2 + 3 + 4 + 6 = 16. # Task Given an integer `n` (1 <= n <= 500), write a function that returns the aliquot sum of `n`. Examples: ``` aliquot_sum(12) => 16 aliquot_sum(7) => 1 aliquot_sum(28) => 28 aliquot_sum(1) => 0 ```","solution":"def aliquot_sum(n): Returns the aliquot sum of a positive integer n. The aliquot sum is the sum of all its proper divisors, excluding the number itself. if n <= 1: return 0 divisors = [] for i in range(1, n): if n % i == 0: divisors.append(i) return sum(divisors)"},{"question":"Given an array of n integers where each integer represents the height of a building, your task is to calculate the maximum amount of trapped water between the buildings after a rainfall. The width of each building is 1 unit. The amount of trapped water at a given index is determined by the difference between the smaller height of the tallest buildings to the left and right of the index and the height of the building at that index itself. If the height of the building at the index is greater or equal to one of these values, no water is trapped at that index. Write a function that computes this maximum trapped water. Example 1: Input: heights = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The indices with trapped water are 2, 4, 5, 6, 9. The total amount of trapped water is (2)+(1)+(2-0)+(3-1)+(2-1) = 6 units. Example 2: Input: heights = [4,2,0,3,2,5] Output: 9 Explanation: The indices with trapped water are 1, 2, 3, 4. The total amount of trapped water is (4-2)+(3-0)+(3-2)+(5-2) = 9 units. Example 3: Input: heights = [1,0,2] Output: 1 Example 4: Input: heights = [0,0,0,0,0] Output: 0 Constraints: 1 <= heights.length <= 10^5 0 <= heights[i] <= 10^4","solution":"def max_trapped_water(heights): Calculate the maximum amount of trapped water between the buildings after rainfall. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the trapped water for i in range(n): water_trapped += max(0, min(left_max[i], right_max[i]) - heights[i]) return water_trapped"},{"question":"Sum of Array Elements Write a function that calculates the sum of all elements in an array. The function should take an array of integers as its parameter and return the total sum of the elements. Function signature: `def array_sum(numbers: List[int]) -> int` # Input - An array of integers `numbers` where each integer can be positive or negative. # Output - An integer representing the total sum of the array elements. # Examples ```python array_sum([1, 2, 3, 4]) => 10 array_sum([-1, -2, -3, -4]) => -10 array_sum([1, -2, 3, -4]) => -2 ```","solution":"from typing import List def array_sum(numbers: List[int]) -> int: Calculates the sum of all elements in the array. Parameters: numbers (List[int]): A list of integers Returns: int: The total sum of the elements in the array return sum(numbers)"},{"question":"Task You are given the task of building a simple text autocomplete feature for a search engine. The autocomplete should return suggestions based on a given prefix. Given a list of words and a search prefix, return all words from the list that start with the given prefix. The returned list of words must be sorted in lexicographical order. Example For `words = [\\"apple\\", \\"app\\", \\"apricot\\", \\"banana\\", \\"berry\\", \\"blueberry\\"]` and `prefix = \\"ap\\"`, the result should be `[\\"app\\", \\"apple\\", \\"apricot\\"]`. ``` The words \\"app\\", \\"apple\\", and \\"apricot\\" all start with the prefix \\"ap\\" and hence are included in the result. After sorting lexicographically, the result is [\\"app\\", \\"apple\\", \\"apricot\\"]. ``` Input/Output - `[input]` array of strings `words` The list of words available for autocompletion. - `[input]` string `prefix` The prefix to search for in the words list. - `[output]` array of strings List of words from the input list that start with the given prefix, sorted lexicographically. If no words match the prefix, return an empty list.","solution":"def autocomplete(words, prefix): Returns a sorted list of words that start with the given prefix. Parameters: words (list of str): The list of words available for autocompletion. prefix (str): The prefix to search for in the words list. Returns: list of str: List of words from the input list that start with the given prefix, sorted lexicographically. # Filter words that start with the given prefix result = [word for word in words if word.startswith(prefix)] # Sort the result list lexicographically result.sort() return result"},{"question":"Task Write a function `rearrangeWords` that takes a string containing a sentence and rearranges the words in alphabetical order while maintaining the original casing of each word. The input will be given as a `string` (e.g. \'The quick Brown fox\'). The output should be a `string`, where the words are sorted alphabetically, and the original capitalization of the words is maintained (e.g. \'Brown fox quick The\'). For the purpose of this exercise, assume that the input will: - Always be in a single line. - Contain at least one word. - Not include any punctuation. - Include words separated by a single space. Example Input: \'The quick Brown fox\' Output: \'Brown fox quick The\'","solution":"def rearrangeWords(sentence): Rearranges the words in the given sentence in alphabetical order while maintaining the original casing of each word. words = sentence.split() sorted_words = sorted(words, key=lambda word: word.lower()) return \' \'.join(sorted_words)"},{"question":"Design a function that takes a string of numerical digits and outputs the same string with each digit replaced by the word representing that digit. The digits are limited to \'0\' through \'9\'. Examples ----- Input: `\\"123\\"` Output: `\\"onetwothree\\"` Another Example ----- Input: `\\"504\\"` Output: `\\"fivezerozero\\"` Constraints ----- - The input string will contain at least one digit and at most 100 digits. - No non-digit characters will be included in the input string. Ensure the function is efficient and handles large input sizes within a reasonable time frame.","solution":"def digit_to_word(digit_str): Takes a string of numerical digits and returns a string where each digit is replaced by the corresponding word. Args: digit_str (str): A string of numerical digits. Returns: str: A string with each digit replaced by its word representation. digit_map = { \'0\': \'zero\', \'1\': \'one\', \'2\': \'two\', \'3\': \'three\', \'4\': \'four\', \'5\': \'five\', \'6\': \'six\', \'7\': \'seven\', \'8\': \'eight\', \'9\': \'nine\' } return \'\'.join(digit_map[digit] for digit in digit_str)"},{"question":"Implement the function `is_anagram(s1, s2)` which takes in two strings, `s1` and `s2`. The function should determine if `s2` is an anagram of `s1`. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The function should return `True` if `s2` is an anagram of `s1` and `False` otherwise. **Examples:** 1. `is_anagram(\\"listen\\", \\"silent\\")` should return `True`. 2. `is_anagram(\\"hello\\", \\"oellh\\")` should return `True`. 3. `is_anagram(\\"apple\\", \\"pale\\")` should return `False`. **Constraints:** - Both `s1` and `s2` will contain only lowercase alphabets. - The length of `s1` and `s2` will not exceed 100 characters.","solution":"def is_anagram(s1, s2): Determines if s2 is an anagram of s1. Args: s1 (str): The first string. s2 (str): The second string. Returns: bool: True if s2 is an anagram of s1, False otherwise. return sorted(s1) == sorted(s2)"},{"question":"You are given an array of integers nums and an integer target. You need to remove all occurrences of target in the array and return the new length of the array. Do not use extra space for another array; you must modify the input array in-place with O(1) extra memory. The relative order of the elements may be changed. Example 1: Input: nums = [3,2,2,3], target = 3 Output: 2 Explanation: Your function should return length = 2, with the first two elements of nums being 2. Example 2: Input: nums = [0,1,2,2,3,0,4,2], target = 2 Output: 5 Explanation: Your function should return length = 5, with the first five elements of nums containing 0, 1, 4, 0, 3 respectively. Constraints: 1 <= nums.length <= 10^5 0 <= nums[i] <= 50 0 <= target <= 50","solution":"def remove_element(nums, target): Removes all occurrences of \'target\' in the array \'nums\' in-place and returns the new length of the array. :param nums: List[int], The input list of integers :param target: int, The target integer to remove from the list :return: int, The new length of the list after removal of the target k = 0 # Pointer for the position of the next valid element for i in range(len(nums)): if nums[i] != target: nums[k] = nums[i] k += 1 return k"},{"question":"Given an array of integers representing stock prices on consecutive days, you need to determine the maximum profit that can be achieved by making at most two transactions. A transaction consists of buying and then selling one share of the stock. You cannot engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again). -----Input----- The first line of the input contains a single integer T, representing the number of test cases. Each test case contains two lines: the first line contains an integer n, representing the number of days. The second line contains n space-separated integers, representing the stock prices on each day. -----Output----- For each test case, output a single integer representing the maximum profit that can be achieved with at most two transactions. If no profit can be achieved, return 0. -----Constraints----- - 1 <= T <= 10 - 2 <= n <= 50 - 0 <= price <= 1000 -----Example----- Input: 2 6 3 3 5 0 0 3 1 4 7 1 2 3 4 5 6 7 Output: 6 6 -----Explanation----- In the first test case, the maximum profit is achieved with two transactions: Buy at day 4 (price 0) and sell at day 6 (price 3), Buy at day 7 (price 1) and sell at day 8 (price 4). The total profit is 3 + 3 = 6. In the second test case, the maximum profit is achieved with one transaction: Buy on day 1 (price 1) and sell on day 7 (price 7). The total profit is 7 - 1 = 6.","solution":"def max_profit_with_two_transactions(prices): if not prices or len(prices) <= 1: return 0 n = len(prices) # Initialize profit arrays profit_before = [0] * n profit_after = [0] * n min_price_so_far = prices[0] for i in range(1, n): min_price_so_far = min(min_price_so_far, prices[i]) profit_before[i] = max(profit_before[i-1], prices[i] - min_price_so_far) max_price_so_far = prices[-1] for i in range(n-2, -1, -1): max_price_so_far = max(max_price_so_far, prices[i]) profit_after[i] = max(profit_after[i+1], max_price_so_far - prices[i]) max_profit = 0 for i in range(n): max_profit = max(max_profit, profit_before[i] + profit_after[i]) return max_profit def max_profit(test_cases): results = [] for test_case in test_cases: n, prices = test_case results.append(max_profit_with_two_transactions(prices)) return results"},{"question":"You are given a string consisting of lowercase English alphabet characters. Your task is to rearrange the characters of the string such that no two adjacent characters are the same. If it is not possible to do so, return \\"IMPOSSIBLE\\". -----Input----- The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English alphabet characters. -----Output----- If it is possible to rearrange the characters of the string such that no two adjacent characters are the same, print the rearranged string. If there are multiple answers, print any of them. If it is not possible to rearrange the string to satisfy the condition, print \\"IMPOSSIBLE\\". -----Examples----- Input aab Output aba Input aaa Output IMPOSSIBLE -----Note----- In the first example, the string \\"aab\\" can be rearranged as \\"aba\\" so that no two adjacent characters are the same. In the second example, it is impossible to rearrange the string \\"aaa\\" such that no two adjacent characters are the same.","solution":"from collections import Counter from heapq import heappop, heappush def rearrange_string(s): Rearranges the characters of the string s such that no two adjacent characters are the same. If not possible, returns \\"IMPOSSIBLE\\". # Count frequency of each character freq = Counter(s) max_heap = [] # Create a max-heap based on character frequency for char, count in freq.items(): heappush(max_heap, (-count, char)) previous_char = None previous_count = 0 result = [] while max_heap: count, char = heappop(max_heap) result.append(char) # Push the previous character back if its count is more than 0 if previous_char and previous_count < 0: heappush(max_heap, (previous_count, previous_char)) # Update previous_char and previous_count for the next iteration previous_char = char previous_count = count + 1 # As decrementing the count of used character rearranged_string = \'\'.join(result) if len(rearranged_string) == len(s): return rearranged_string else: return \\"IMPOSSIBLE\\""},{"question":"You are given a list of integers representing the number of citations a researcher has received for each paper. The H-Index is defined as the maximum value `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times. You need to calculate the researcher\'s H-Index given their citation list. Example 1: Input: [3, 0, 6, 1, 5] Output: 3 Explanation: The researcher has 3 papers with at least 3 citations each. The remaining citations are: [6, 5] which don\'t affect the result. Example 2: Input: [10, 8, 5, 4, 3] Output: 4 Explanation: The researcher has 4 papers with at least 4 citations each. Note: * If there are multiple possible values for \\"h\\" satisfying the conditions, the maximum one should be taken. * If no suitable `h` index can be found, return 0.","solution":"def h_index(citations): Calculates the H-Index for a researcher given their citations list. :param citations: List[int], number of citations for each paper. :return: int, the H-Index value. citations.sort(reverse=True) h = 0 for i, citation in enumerate(citations): if citation >= i + 1: h = i + 1 else: break return h"},{"question":"You are given an array of n integers a_1, a_2, ..., a_n. You need to process q queries. Each query is an integer x, and for each query, you should determine if x can be represented as the sum of two distinct elements of the array (i.e., if there exist indices i and j such that a_i + a_j = x and i neq j). If x can be represented as the sum of two distinct elements, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The first line of the input contains two integers n and q (1 le n, q le 10^5) — the number of elements in the array and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9) — the elements of the array. Each of the next q lines contains an integer x (-2 times 10^9 le x le 2 times 10^9) — a query integer. -----Output----- For each query, print \\"YES\\" if x can be represented as the sum of two distinct elements of the array and \\"NO\\" otherwise. -----Example----- Input 5 3 10 12 4 7 5 9 17 1 Output YES YES NO","solution":"def can_sum_to_query(arr, queries): results = [] seen = set() for number in arr: seen.add(number) for query in queries: found = False for number in arr: complement = query - number if complement in seen and complement != number: found = True break results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"You are given a string `s` consisting of lowercase English letters and an integer `k`. You need to perform a series of operations to ensure that no two adjacent characters are the same in the final string. In each operation, you can choose any character from the string and remove it, but you can only remove a character `k` times in total. Determine the minimum length of the resulting string after performing at most `k` removal operations. **Input:** - `s` — the input string consisting of lowercase English letters. - `k` — the maximum number of removal operations allowed. **Output:** - The minimum length of the resulting string after at most `k` removal operations. **Examples:** ```python min_length(\\"aaabbb\\", 2) => 4 # after removing two \'a\'s or two \'b\'s, the string can become \\"aabb\\" or \\"abbb\\" min_length(\\"aabbcc\\", 3) => 3 # removing \'a\', \'b\', and \'c\' results in a string like \\"abc\\" ```","solution":"def min_length(s, k): Returns the minimum length of the resulting string after performing at most k removal operations. if k == 0: return len(s) # First we will count the frequency of each character in the string from collections import Counter freq = Counter(s) # Sort characters by frequency in descending order sorted_chars = sorted(freq.items(), key=lambda item: item[1], reverse=True) # Track removals and minimal length removals_left = k length = len(s) for char, count in sorted_chars: if removals_left == 0: break if count <= removals_left: length -= count removals_left -= count else: length -= removals_left removals_left = 0 return length"},{"question":"Write a function `is_palindromic_number()` that takes an integer as its argument and determines whether the number is a palindrome. A palindrome is a number that reads the same forwards and backwards. Your function should return `True` if the number is palindromic, and `False` otherwise. For example, `is_palindromic_number(121)` should return `True`, while `is_palindromic_number(123)` should return `False`. Your solution should work for negative numbers as well. For example, `is_palindromic_number(-121)` should return `False`.","solution":"def is_palindromic_number(num): Determines whether a given integer is a palindrome. Args: - num (int): The integer to check. Returns: - bool: True if the integer is a palindrome, False otherwise. # Negative numbers are not palindromic by definition if num < 0: return False # Convert the number to string to easily check if it reads the same backward and forward num_str = str(num) return num_str == num_str[::-1]"},{"question":"Write a function that takes a list of integers and returns the integer that appears an odd number of times. If no integer appears an odd number of times, return `None`. **Note:** There will always be at most one integer that appears an odd number of times in the list. # Examples ```python find_odd_occurrence([1, 2, 3, 2, 3, 1, 3]) => 3 find_odd_occurrence([4, 5, 5, 4, 4]) => 4 find_odd_occurrence([2, 2, 2, 2]) => None ```","solution":"def find_odd_occurrence(arr): Returns the integer that appears an odd number of times in the list. If no integer appears an odd number of times, return None. count_dict = {} for num in arr: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 for num, count in count_dict.items(): if count % 2 != 0: return num return None"},{"question":"In a parallel world, the citizens follow intricate codes made up of characters \'X\', \'O\', and \'.\' (dots). Every citizen\'s code is a square grid of size n times n (1 leq n leq 50). A citizen\'s code is considered valid if: 1. For every \'X\' in the grid, there\'s an \'O\' adjacent to it (vertically or horizontally). 2. The \'.\' characters can be ignored in this validation as they hold no significance. Your task is to determine if the given code is valid or not. -----Input----- The first line contains an integer t (1 le t le 100) denoting the number of test cases. Each test case contains an integer n on a separate line, followed by n lines, each containing a string of length n that represents the citizen\'s code. -----Output----- For each test case, print \\"VALID\\" if the code is valid, otherwise print \\"INVALID\\". -----Example----- Input 3 3 XOX .O. XOX 4 XXOX X..O O..X XOXX 2 XO OX Output VALID INVALID VALID -----Note----- In the first example, each \'X\' has an adjacent \'O\', so the code is valid. In the second example, not every \'X\' has an adjacent \'O\', so the code is invalid. In the third example, each \'X\' has an adjacent \'O\', so the code is valid.","solution":"def is_valid_code(grid, n): for i in range(n): for j in range(n): if grid[i][j] == \'X\': has_adjacent_o = False # Check above if i > 0 and grid[i-1][j] == \'O\': has_adjacent_o = True # Check below if i < n-1 and grid[i+1][j] == \'O\': has_adjacent_o = True # Check left if j > 0 and grid[i][j-1] == \'O\': has_adjacent_o = True # Check right if j < n-1 and grid[i][j+1] == \'O\': has_adjacent_o = True if not has_adjacent_o: return \\"INVALID\\" return \\"VALID\\" def validate_citizen_codes(test_cases): results = [] for n, grid in test_cases: results.append(is_valid_code(grid, n)) return results"},{"question":"Task Create a function `generate_sequence(n)`, where `n > 0`, that returns a string representing a sequence of numbers with a specific pattern. Each number is repeated a number of times equal to its value, and each group of repeated numbers is separated by a comma. The pattern does not have a trailing comma at the end. # Examples - `generate_sequence(3)` should return `\\"1,22,333\\"`. - `generate_sequence(5)` should return `\\"1,22,333,4444,55555\\"`.","solution":"def generate_sequence(n): Generates a sequence where each number i (1 <= i <= n) is repeated i times, and groups are separated by commas. Parameters: n (int): the maximum number in the sequence. Returns: str: the generated sequence as a string. return \',\'.join(str(i) * i for i in range(1, n + 1))"},{"question":"Given a list of strings of distinct lowercase letters, write a function that determines if there is a way to concatenate all strings together such that each letter appears at most once in the concatenated result. # INPUT The input is a list of strings containing distinct lowercase letters. Each string will contain between 1 and 10 characters. The list can have between 1 and 10 strings. # OUTPUT The function should return a boolean indicating whether there is a way to concatenate all strings such that each letter appears at most once in the resulting string. # EXAMPLES 1. ``` Input: [\\"ab\\", \\"cd\\", \\"ef\\"] Output: True Explanation: You can concatenate them as \\"abcdef\\". ``` 2. ``` Input: [\\"ab\\", \\"bc\\", \\"cd\\"] Output: False Explanation: There is no way to concatenate all strings without repeating the letter \'b\' or \'c\'. ``` 3. ``` Input: [\\"a\\", \\"bc\\", \\"def\\"] Output: True Explanation: You can concatenate them as \\"abcdef\\". ``` 4. ``` Input: [\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"g\\", \\"h\\", \\"i\\", \\"j\\"] Output: True Explanation: You can concatenate them in any order to satisfy the condition. ```","solution":"def can_concatenate_unique(strings): Determines if there is a way to concatenate all strings together such that each letter appears at most once in the concatenated result. Args: strings (list of str): List of strings with distinct lowercase letters. Returns: bool: True if there is a way to concatenate without repeat letters, otherwise False. seen_chars = set() for s in strings: for char in s: if char in seen_chars: return False seen_chars.add(char) return True"},{"question":"=====Function Descriptions===== isalpha() & isdigit() These functions check whether all characters in the string are alphabetic or digits, respectively. Code >>> \'abc\'.isalpha() True >>> \'abc123\'.isalpha() False >>> \'123\'.isdigit() True >>> \'abc123\'.isdigit() False =====Problem Statement===== You are given a string S. You need to create a function that checks if all characters in S are either all alphabetic or all numeric. =====Input Format===== The input contains a single string S. =====Output Format===== Print \\"Alphabetic\\" if all characters in the string are alphabetic, \\"Numeric\\" if all characters are numeric, and \\"Mixed\\" if the string contains both alphabetic and numeric characters or other types of characters. =====Example===== Input: abc Output: Alphabetic Input: 1234 Output: Numeric Input: abc123 Output: Mixed","solution":"def check_string(S): Check if the string S is all alphabetic, all numeric or a mix of both. Parameters: S (str): The input string. Returns: str: \\"Alphabetic\\" if all characters in the string are alphabetic, \\"Numeric\\" if all characters are numeric, \\"Mixed\\" otherwise. if S.isalpha(): return \\"Alphabetic\\" elif S.isdigit(): return \\"Numeric\\" else: return \\"Mixed\\""},{"question":"You are developing a reservation system for a small hotel. Each reservation consists of a check-in date, a check-out date, and a guest name. To determine if a new reservation can be accommodated, you must check if the new reservation dates overlap with any existing reservations. Write a function `is_reservation_possible(existing_reservations, new_reservation)` where: - `existing_reservations` is a list of tuples. Each tuple contains two strings representing the check-in and check-out dates of an existing reservation (formatted as \\"YYYY-MM-DD\\"), and a guest name. - `new_reservation` is a tuple of the form (check-in date, check-out date) for the proposed new reservation. The function should return `True` if the new reservation does not overlap with any existing reservations, and `False` otherwise. An overlap occurs if the check-in date of the new reservation is before the check-out date of an existing reservation and the check-out date of the new reservation is after the check-in date of an existing reservation. For example: ```python existing_reservations = [ (\\"2023-05-01\\", \\"2023-05-05\\", \\"Alice\\"), (\\"2023-05-10\\", \\"2023-05-20\\", \\"Bob\\") ] new_reservation = (\\"2023-05-05\\", \\"2023-05-10\\") ``` The function `is_reservation_possible(existing_reservations, new_reservation)` should return `True` since the new reservation doesn\'t overlap with any existing ones. Another example: ```python existing_reservations = [ (\\"2023-05-01\\", \\"2023-05-05\\", \\"Alice\\"), (\\"2023-05-10\\", \\"2023-05-20\\", \\"Bob\\") ] new_reservation = (\\"2023-05-04\\", \\"2023-05-11\\") ``` The function `is_reservation_possible(existing_reservations, new_reservation)` should return `False` since the new reservation overlaps with both existing reservations.","solution":"from datetime import datetime def is_reservation_possible(existing_reservations, new_reservation): Check if the new reservation can be accommodated without overlapping existing reservations. Args: existing_reservations (list of tuples): Each tuple contains two strings (check-in date, check-out date) and a guest name. new_reservation (tuple): Tuple containing two strings (check-in date, check-out date). Returns: bool: True if new reservation does not overlap with any existing reservations, otherwise False. new_check_in, new_check_out = new_reservation new_check_in = datetime.strptime(new_check_in, \'%Y-%m-%d\') new_check_out = datetime.strptime(new_check_out, \'%Y-%m-%d\') for reservation in existing_reservations: check_in, check_out, _ = reservation check_in = datetime.strptime(check_in, \'%Y-%m-%d\') check_out = datetime.strptime(check_out, \'%Y-%m-%d\') if new_check_in < check_out and new_check_out > check_in: return False return True"},{"question":"Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. Example 1: Input: s = \\"A man, a plan, a canal: Panama\\" Output: true Explanation: \\"amanaplanacanalpanama\\" is a palindrome. Example 2: Input: s = \\"race a car\\" Output: false Explanation: \\"raceacar\\" is not a palindrome. Constraints: - The string can have a maximum length of 2 * 10^5. - The string consists of printable ASCII characters.","solution":"def is_palindrome(s: str) -> bool: Determines if the given string is a palindrome, only considering alphanumeric characters and ignoring cases. :param s: The input string. :return: True if the string is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"A group of friends is playing a game where they need to find the \\"magic number\\" of the day. The magic number is defined as the sum of the factorials of the digits of a given number. Given a number, help the friends calculate its magic number. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer M. -----Output:----- For each test case, output the magic number for the given integer M. -----Constraints----- - 1 leq T leq 10^3 - 0 leq M leq 10^6 -----Sample Input:----- 2 145 999 -----Sample Output:----- 145 1088640","solution":"import math def magic_number(M): Calculate the magic number for a given integer M. The magic number is defined as the sum of the factorials of the digits of M. magic_sum = 0 for digit in str(M): magic_sum += math.factorial(int(digit)) return magic_sum def find_magic_numbers(test_cases): Given a list of test cases, return the magic numbers for each test case. results = [] for M in test_cases: results.append(magic_number(M)) return results"},{"question":"Implement a function `to_roman(n)` that converts an integer `n` (between 1 and 3999 inclusive) into its Roman numeral representation. The function should return a string representing the Roman numeral. Validate the input to ensure it is within the specified range and is an integer. **Examples:** - `to_roman(1)` should return `\\"I\\"` - `to_roman(4)` should return `\\"IV\\"` - `to_roman(3999)` should return `\\"MMMCMXCIX\\"` - `to_roman(2023)` should return `\\"MMXXIII\\"`","solution":"def to_roman(n): Convert an integer to a Roman numeral. :param n: Integer to convert (must be between 1 and 3999 inclusive). :return: A string representing the Roman numeral. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if not (1 <= n <= 3999): raise ValueError(\\"Input must be between 1 and 3999 inclusive.\\") val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while n > 0: for _ in range(n // val[i]): roman_num += syb[i] n -= val[i] i += 1 return roman_num"},{"question":"Convert a non-negative integer to its corresponding column title as appear in an Excel sheet. For example: Example 1: Input: 1 Output: \\"A\\" Example 2: Input: 28 Output: \\"AB\\" Example 3: Input: 701 Output: \\"ZY\\" Note: - The input is a non-negative integer. - The returned string should only contain uppercase letters from \'A\' to \'Z\'.","solution":"def convert_to_title(n): Convert a non-negative integer to its corresponding column title as it appears in Excel. Args: n (int): a non-negative integer Returns: str: corresponding column title result = [] while n > 0: n -= 1 # Adjust for 0-based indexing result.append(chr(n % 26 + ord(\'A\'))) n //= 26 return \'\'.join(result[::-1])"},{"question":"# Description: Given an array `arr` of integers, your task is to transform the array into a \\"wave\\" array. An array is defined as being in a \\"wave\\" form if each even-indexed element is greater than or equal to its adjacent odd-indexed elements. In other words, for an array `arr`, the following conditions must hold for all possible i: - if `i` is even: `arr[i] >= arr[i+1]`(when i+1 is within the array) - if `i` is odd: `arr[i] <= arr[i+1]`(when i+1 is within the array) # Note: The transformation should be done in-place, meaning you should modify the input array directly without using additional storage for another array. # Example: ``` Input: arr = [3, 6, 5, 10, 7, 20] Output: [6, 3, 10, 5, 20, 7] Input: arr = [1, 2, 3, 4, 5, 6] Output: [2, 1, 4, 3, 6, 5] ``` # Constraints: - The length of the array `arr` is at least 2 and no more than 10^5. - All elements of the array are integers within the range [-10^6, 10^6]. # Function Signature: ``` def wave_array(arr: List[int]) -> List[int]: # Your code goes here ```","solution":"from typing import List def wave_array(arr: List[int]) -> List[int]: Transforms the array into a \\"wave\\" array. n = len(arr) for i in range(0, n, 2): # If the current even-indexed element is less than the previous odd-indexed element if i > 0 and arr[i] < arr[i - 1]: arr[i], arr[i - 1] = arr[i - 1], arr[i] # If the current even-indexed element is less than the next odd-indexed element if i < n - 1 and arr[i] < arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] return arr"},{"question":"Write a program to find the second largest number in a list of integers. If there is no second largest number (i.e., all numbers are the same), return the number itself. -----Input:----- - First line will contain an integer n representing the number of elements in the list. - Second line will contain n space-separated integers representing the elements of the list. -----Output:----- Output a single line, the second largest number. -----Constraints----- - 2 leq n leq 100 - -1000 leq text{elements of the list} leq 1000 -----Sample Input:----- 5 4 2 3 2 1 -----Sample Output:----- 3 -----EXPLANATION:----- The largest number is 4, and the second largest number is 3.","solution":"def second_largest(nums): Returns the second largest number in the list of integers nums. If all numbers are the same, it returns the number itself. # Convert to set to remove duplicates and then sort the list. unique_nums = list(set(nums)) unique_nums.sort(reverse=True) # If there is only one unique number, return it if len(unique_nums) == 1: return unique_nums[0] # Return the second largest number return unique_nums[1] # Read input def main(): n = int(input().strip()) nums = list(map(int, input().strip().split())) print(second_largest(nums))"},{"question":"You are provided with a list of non-negative integers. Your task is to determine the lowest positive integer that is missing from the list. If all positive integers from 1 up to the maximum positive integer in the list are present, the smallest missing positive integer should be the next integer greater than the maximum positive integer in the list. For example: Given the list: [3, 4, -1, 1] The lowest missing positive integer is: 2 Given the list: [1, 2, 0] The lowest missing positive integer is: 3 -----Input----- The number of test cases (<100) For each test case: - A single line containing the integers in the list separated by spaces. -----Output----- For each test case, print the smallest missing positive integer. -----Example----- Input: 2 3 4 -1 1 1 2 0 Output: 2 3 ----Constraints---- 1. The list can contain up to 100 integers. 2. The integers in the list range from -10^6 to 10^6. By: [Your Name]","solution":"def smallest_missing_positive(nums): Find the lowest positive integer that is missing from the list. nums = [num for num in nums if num > 0] num_set = set(nums) smallest_missing = 1 while smallest_missing in num_set: smallest_missing += 1 return smallest_missing"},{"question":"Alex and Jamie are planning a new garden in their backyard. They want to plant flowers in a way that maximizes the beauty of the garden. However, there\'s a catch: they can only change the planting order a limited number of times. The garden has n rows, and each row contains m flowers. Each flower has a beauty value. Initially, the flowers are planted in a matrix form. Alex can swap the positions of two flowers within the same row up to k times to maximize the beauty of the garden. A garden\'s beauty is defined as the sum of the beauty values of the flowers in each row. They want to know the maximum possible beauty for each k such that 0 ≤ k ≤ n * m - 1, if they make up to k swaps beforehand. -----Input----- The first line of input contains three integers n (1 ≤ n ≤ 100), m (1 ≤ m ≤ 100), and k (0 ≤ k ≤ n * m - 1) — the number of rows, the number of flowers per row, and the maximum number of swaps allowed, respectively. The next n lines contain m space-separated integers each. The j-th integer of the i-th line a_{i,j} (1 ≤ a_{i,j} ≤ 100) denotes the beauty value of the j-th flower in the i-th row. -----Output----- Output n * m space-separated integers y_0, y_1, ..., y_{n * m - 1}. Here, y_{i} denotes the maximum possible beauty of the garden with i swaps. -----Examples----- Input: 2 3 4 1 3 5 2 4 6 Output: 10 10 11 12 12 13 Input: 3 2 2 5 1 7 6 3 8 Output: 23 23 24 -----Note----- For the first example, When k = 0, no swaps are made, the row-wise sums are [9, 12], so the garden\'s beauty is 10. When k = 1, one possible swap is (1,3) <-> (3,1) for the first row, making the row-wise sums [10, 11], so the garden\'s beauty is 10 + max(10, 11) = 12. When k = 2, swaps can be optimized further to get [10, 11], adding more options. So the final output values should be the respective maximum values. For the second example, When k = 0, no swaps are made, the row-wise sums are [6, 13, 11], so the garden\'s beauty is 13. When k = 1 and k = 2, the arrangement does not change as it is already optimal for the given conditionals on swap amounts. Thus, the answer is 23 23 24.","solution":"def maximum_beauty(n, m, k, garden): def garden_beauty_sum(garden): return sum([sum(row) for row in garden]) max_beauties = [] for k_limit in range(k + 1): new_garden = [sorted(row, reverse=True) for row in garden] max_beauty = garden_beauty_sum(new_garden) max_beauties.append(max_beauty) return max_beauties # Function to read input and return the result def main(input_string): input_data = input_string.strip().split(\'n\') n, m, k = map(int, input_data[0].split()) garden = [list(map(int, line.split())) for line in input_data[1:]] results = maximum_beauty(n, m, k, garden) return \' \'.join(map(str, results)) print(main(\'2 3 4n1 3 5n2 4 6\')) print(main(\'3 2 2n5 1n7 6n3 8\'))"},{"question":"In a zoo, animals are placed in enclosures that can house a maximum number of animals. Each enclosure has a limit on the number of animals it can hold, but not all enclosures need to be full. Given the array that represents the maximum capacity of each enclosure and the number of animals, your task is to determine the minimum number of enclosures that will be needed to fit all the animals. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of enclosures. - The second line of each test case contains N integers separated by spaces where each integer denotes the capacity of each enclosure. - The third line of each test case contains an integer A denoting the total number of animals. -----Output:----- For each test case, print one line: the minimum number of enclosures needed to fit all the animals. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 100 - 1 leq capacity_i leq 1000 - 1 leq A leq 10000 -----Sample Input:----- 2 3 5 1 2 6 4 10 10 10 10 35 -----Sample Output:----- 2 4 -----Explanation:----- In the first test case, the enclosures have capacities [5, 1, 2] and we need to house 6 animals. The minimum number of enclosures required is 2: one can house 5 animals and the other can house 1 animal, making a total of 6. In the second test case, the enclosures each have a capacity of 10 and we need to house 35 animals. All 4 enclosures will be needed to ensure all animals are housed.","solution":"def minimum_enclosures_needed(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] capacities = test_cases[i][1] A = test_cases[i][2] capacities.sort(reverse=True) total_animals = 0 enclosures_used = 0 for capacity in capacities: total_animals += capacity enclosures_used += 1 if total_animals >= A: break results.append(enclosures_used) return results"},{"question":"Your task is to calculate the sum of all unique numbers in an array. The array can contain both positive and negative numbers as well as duplicates. Your solution should identify and sum only the unique numbers, ignoring any that appear more than once. E.g. If we have an array `[1, 2, 2, 3, 4, 4, 4, -1]` then `1`, `3`, and `-1` are the unique numbers, and their sum would be `1 + 3 - 1 = 3`. ```if:c If there are no unique numbers in the array, then return `0`. ``` ```if-not:c If there are no unique numbers in the array, then return `0`. ``` The array can contain zero or more elements. ```if:c ^(1) Can you write a solution that will return `0` for an empty array `[]`? (This is an empty array and is not tested for, but you can write your own example test.) ``` ```if-not:c ^(1) Can you write a solution that will return `0` for an empty array `[]`? (This is an empty array and is not tested for, but you can write your own example test.) ``` If you like this Kata, maybe try this one next: https://www.codewars.com/kata/sum-of-array-singles","solution":"def sum_of_unique_numbers(arr): Returns the sum of all unique numbers in the array. Parameters: - arr: list of integers, can be positive, negative or zero. Returns: - int: sum of unique numbers. from collections import Counter # Count the frequency of each number in the array frequency = Counter(arr) # Sum only the numbers that appear exactly once in the array unique_sum = sum([num for num, count in frequency.items() if count == 1]) return unique_sum"},{"question":"Consider a string comprising words separated by spaces, where each word contains a mix of alphabetic characters and digits. Write a function that extracts all words containing both alphabetic characters and digits and returns them in a list. Words from the input string should be preserved in their original order. For example, given the input string \\"hello a1b2c3 world d4e5 fgh 123\\", the function should return [\\"a1b2c3\\", \\"d4e5\\"]. If no such words are found, the function should return an empty list. Function Signature: `def extract_alphanumeric_words(s: str) -> List[str]:`","solution":"from typing import List import re def extract_alphanumeric_words(s: str) -> List[str]: Extracts and returns a list of words that contain both alphabetic characters and digits. Parameters: s (str): A string comprising words separated by spaces. Returns: List[str]: A list of words containing both alphabetic characters and digits. words = s.split() alphanumeric_words = [] for word in words: if re.search(\\"[a-zA-Z]\\", word) and re.search(\\"[0-9]\\", word): alphanumeric_words.append(word) return alphanumeric_words"},{"question":"Your task is to write a function, canAttendAllMeetings, that determines if a person can attend all their meetings without any overlaps. Each meeting is represented by a list of two integers, [start, end], where the first integer is the start time and the second integer is the end time of the meeting. The meetings are provided in a list, where each element is a meeting\'s time interval. A person can attend a meeting if and only if it starts after the previous one has ended. In other words, if two meetings [start1, end1] and [start2, end2] satisfy end1 <= start2, then they do not overlap and the person can attend both meetings. Write a function that takes a list of meetings and returns a boolean value indicating whether or not the person can attend all the given meetings without any conflicts. Examples: canAttendAllMeetings([[0, 30], [5, 10], [15, 20]]) -> False Explanation: The person cannot attend the meetings [[0, 30]] and [[5, 10]] as they overlap. canAttendAllMeetings([[7, 10], [2, 4]]) -> True Explanation: Since the meetings [[7, 10]] and [[2, 4]] do not overlap, the person can attend all of them. canAttendAllMeetings([[1, 5], [6, 10], [11, 15]]) -> True Explanation: All meetings are sequential and there are no overlaps, so the person can attend all meetings. Note: - The start time of a meeting is always less than its end time. - The meetings may not be in order and must be sorted based on their start times.","solution":"def canAttendAllMeetings(meetings): Determines if a person can attend all given meetings without conflicts. :param meetings: List of lists, where each list represents a meeting interval [start, end] :return: Boolean, True if the person can attend all meetings, False otherwise # Sort meetings based on start time sorted_meetings = sorted(meetings, key=lambda x: x[0]) for i in range(1, len(sorted_meetings)): # Check if there is an overlap between the current and the previous meeting if sorted_meetings[i][0] < sorted_meetings[i-1][1]: return False return True"},{"question":"Given a string s consisting of only lowercase letters, find all possible substrings of length k that occur more than once in the string. Return the substrings as a list of strings in alphabetical order. Example 1: Input: s = \\"banana\\", k = 2 Output: [\\"an\\", \\"na\\"] Example 2: Input: s = \\"abcdefg\\", k = 3 Output: [] Example 3: Input: s = \\"ababababa\\", k = 2 Output: [\\"ab\\", \\"ba\\"] Constraints: - 1 <= len(s) <= 10^5 - 1 <= k <= len(s)","solution":"def find_repeated_substrings(s, k): Returns all possible substrings of length k that occur more than once in the string s. The substrings are returned in alphabetical order. from collections import defaultdict substring_count = defaultdict(int) for i in range(len(s) - k + 1): substring = s[i:i+k] substring_count[substring] += 1 result = [sub for sub, count in substring_count.items() if count > 1] result.sort() return result"},{"question":"A number is called a **factorial number** if it is the factorial of some non-negative integer. For example, 1, 2, 6, 24, and 120 are factorial numbers because they are the factorials of 0, 1, 2, 3, and 5 respectively. Write a Python function `is_factorial_number(n)` that determines if a given number `n` is a factorial number. If it is, return the integer for which `n` is the factorial; otherwise, return `false`. **Note:** You can assume that the given input `n` is a positive integer. **Examples:** 1. `is_factorial_number(6)` Output: `3` Explanation: 6 is the factorial of 3, as 3! = 6. 2. `is_factorial_number(10)` Output: `false` Explanation: 10 is not a factorial of any number. 3. `is_factorial_number(120)` Output: `5` Explanation: 120 is the factorial of 5, as 5! = 120. 4. `is_factorial_number(24)` Output: `4` Explanation: 24 is the factorial of 4, as 4! = 24.","solution":"def is_factorial_number(n): Determines if a given number n is a factorial number. If it is, return the integer for which n is the factorial; otherwise, return False. if n == 1: return 0 # 0! = 1 and 1! = 1 factorial = 1 i = 1 while factorial < n: i += 1 factorial *= i if factorial == n: return i return False"},{"question":"Implement a function that generates all possible **permutations of a list of integers** (ignoring duplicates) using a recursive approach. The function should remove any duplicate permutations from the output. You are required to use standard list operations and avoid any built-in permutations methods. # Function Signature: ```python def generate_unique_permutations(nums: List[int]) -> List[List[int]]: pass ``` # Input - A list of integers, `nums`, which may contain duplicates. - 0 <= len(nums) <= 7 # Output - A list of lists, where each list is a unique permutation of the input list. # Examples: ```python >>> generate_unique_permutations([1, 1, 2]) [[1, 1, 2], [1, 2, 1], [2, 1, 1]] >>> generate_unique_permutations([1, 2, 3]) [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] >>> generate_unique_permutations([]) [] >>> generate_unique_permutations([1]) [[1]] >>> generate_unique_permutations([2, 2, 2]) [[2, 2, 2]] ```","solution":"def generate_unique_permutations(nums): def backtrack(start=0): if start == len(nums) - 1: permutations.add(tuple(nums[:])) return for i in range(start, len(nums)): nums[start], nums[i] = nums[i], nums[start] backtrack(start + 1) nums[start], nums[i] = nums[i], nums[start] permutations = set() backtrack() return [list(p) for p in permutations]"},{"question":"Given an integer array, find the maximum sum of a contiguous subarray where the sum is less than a given integer S. -----Input:----- - The first line contains a single integer T, the number of test cases. - Each test case consists of two lines: - The first line consists of two integers N and S. - The second line contains N space-separated integers denoting the array elements. -----Output:----- Print a single line corresponding to each test case, the maximum sum of any contiguous subarray that is strictly less than S. If no such subarray exists, print 0. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^6 - 1 leq Ai leq 10^9 - 1 leq S leq 10^{18} - Sum of N across all test cases doesn\'t exceed 10^6 -----Sample Input:----- 2 5 10 2 1 3 6 2 4 5 4 3 5 1 -----Sample Output:----- 9 4 -----EXPLANATION:----- For the first test case: - One possible subarray is [2, 1, 3], whose sum is 6. - Another possible subarray is [1, 3, 6], whose sum is 10, but since we need less than 10, it is not valid. - The maximum valid subarray sum is 9 (from the subarray [2, 1, 3, 2]). For the second test case: - One possible subarray is [4], whose sum is 4. - Any other subarray will either have a sum greater than or equal to 5, so the answer is 4.","solution":"def max_subarray_sum_less_than_S(arr, S): max_sum = 0 current_sum = 0 start = 0 for end in range(len(arr)): current_sum += arr[end] while current_sum >= S and start <= end: current_sum -= arr[start] start += 1 if current_sum < S: max_sum = max(max_sum, current_sum) return max_sum def max_sums_for_cases(cases): results = [] for N, S, array in cases: result = max_subarray_sum_less_than_S(array, S) results.append(result) return results"},{"question":"Implement a class called **MedianFinder** that supports the following two operations: 1. `addNum(int num)` - Adds an integer number from the data stream to the data structure. 2. `findMedian()` - Returns the median of all elements so far. The median is the middle value in an ordered integer list. If the size of the list is even, the median is the average of the two middle values. Example 1: ```python input: [\\"MedianFinder\\",\\"addNum\\",\\"addNum\\",\\"findMedian\\",\\"addNum\\",\\"findMedian\\"], elements = [[],[1],[2],[],[3],[]] Output: [null,null,null,1.5,null,2] Explanation: MedianFinder mf = new MedianFinder() mf.addNum(1) // [1] mf.addNum(2) // [1, 2] mf.findMedian() // return 1.5 (since (1+2)/2 = 1.5) mf.addNum(3) // [1, 2, 3] mf.findMedian() // return 2.0 ``` Example 2: ```python input: [\\"MedianFinder\\",\\"addNum\\",\\"findMedian\\",\\"addNum\\",\\"findMedian\\"], elements = [[],[2],[],[3],[]] Output: [null,null,2,null,2.5] Explanation: MedianFinder mf = new MedianFinder() mf.addNum(2) // [2] mf.findMedian() // return 2 mf.addNum(3) // [2, 3] mf.findMedian() // return 2.5 ``` # Notes: 1. The elements of MedianFinder will be called a total of 10^5 times. 2. The number of operations (function calls) will not exceed 10^5. 3. Integers values will be within the range [-10^5, 10^5]. Consider developing the `MedianFinder` to handle dynamic data efficiently.","solution":"import heapq class MedianFinder: def __init__(self): self.small = [] # max-heap self.large = [] # min-heap def addNum(self, num: int): heapq.heappush(self.small, -num) if self.small and self.large and (-self.small[0] > self.large[0]): heapq.heappush(self.large, -heapq.heappop(self.small)) if len(self.small) > len(self.large) + 1: heapq.heappush(self.large, -heapq.heappop(self.small)) if len(self.large) > len(self.small): heapq.heappush(self.small, -heapq.heappop(self.large)) def findMedian(self) -> float: if len(self.small) > len(self.large): return float(-self.small[0]) return (-self.small[0] + self.large[0]) / 2.0"},{"question":"You are given two strings, `s1` and `s2`, consisting only of lowercase English letters. You need to determine the longest common subsequence (LCS) of the two strings. The LCS is defined as the longest sequence that appears in both strings in the same order but not necessarily consecutively. Write a function to find the length of the longest common subsequence between `s1` and `s2`. # Example ```python def longest_common_subsequence(s1: str, s2: str) -> int: # Your implementation # Test Cases assert longest_common_subsequence(\\"abcde\\", \\"ace\\") == 3 # The longest common subsequence is \\"ace\\". assert longest_common_subsequence(\\"abc\\", \\"abc\\") == 3 # The longest common subsequence is \\"abc\\". assert longest_common_subsequence(\\"abc\\", \\"def\\") == 0 # There is no common subsequence. assert longest_common_subsequence(\\"oxcpqrsvwf\\", \\"shmtulqrypy\\") == 2 # The longest common subsequence is \\"qr\\". assert longest_common_subsequence(\\"abcdgh\\", \\"aedfhr\\") == 3 # The longest common subsequence is \\"adh\\". ``` # Constraints - `1 <= len(s1), len(s2) <= 1000` - `s1` and `s2` consist only of lowercase English letters. # Notes 1. It is not necessary to write code for input/output operations. 2. Focus on writing the function that solves the problem. 3. You can use either a recursive solution with memoization or an iterative dynamic programming approach.","solution":"def longest_common_subsequence(s1: str, s2: str) -> int: Returns the length of the longest common subsequence between s1 and s2. m, n = len(s1), len(s2) # Create a (m+1) x (n+1) matrix initialized to 0 dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp matrix from bottom up for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Given a string of lowercase letters, your task is to return a list of all unique permutations of that string sorted in lexicographical order. Each permutation in the result should be unique and follow the canonical lexicographic order. For example: ```Python find_permutations(\\"abc\\") = [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] find_permutations(\\"aab\\") = [\\"aab\\", \\"aba\\", \\"baa\\"] ``` Complete the function: ```Python def find_permutations(s: str) -> list: # your code here ``` More examples in the test cases. Good luck! If you like this problem, you may also like: [Permutations II](https://leetcode.com/problems/permutations-ii/) [Combination Sum](https://leetcode.com/problems/combination-sum/)","solution":"from itertools import permutations def find_permutations(s: str) -> list: Return all unique permutations of the string s sorted in lexicographical order. unique_permutations = sorted(set(permutations(s))) return [\'\'.join(p) for p in unique_permutations]"},{"question":"A positive integer is called a palindrome if its decimal representation reads the same backward as forward. For example, 121, 545, and 1221 are palindromes, whereas 123, 4321, and 1213 are not palindromes. You are given a positive integer N. Your task is to find the count of palindromic numbers less than or equal to N. -----Input Format:----- - The first line contains a single integer, T, which is the number of test cases. The description of each test case follows. - The first line of each test case contains a single integer N. -----Output Format:----- - You should print a single integer for each test case, which is the count of palindromic numbers less than or equal to N. -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 10^9 -----Sample Input:----- 3 10 100 200 -----Sample Output:----- 9 18 28 -----Explanation:----- - For the first test case, the palindromic numbers less than or equal to 10 are: 1, 2, 3, 4, 5, 6, 7, 8, 9. Hence, the count is 9. - For the second test case, the palindromic numbers less than or equal to 100 are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99. Hence, the count is 18. - For the third test case, the palindromic numbers less than or equal to 200 are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191. Hence, the count is 28.","solution":"def is_palindrome(number): Check if a given number is a palindrome. str_number = str(number) return str_number == str_number[::-1] def count_palindromes_up_to_n(n): Counts the number of palindromic numbers up to and including n. count = 0 for i in range(1, n + 1): if is_palindrome(i): count += 1 return count def count_palindromic_numbers(test_cases): results = [] for n in test_cases: results.append(count_palindromes_up_to_n(n)) return results"},{"question":"Write a function to evaluate whether a given string of braces `(, ), {, }, [, ]` is correctly nested. A string is considered correctly nested if: - Every opening brace has a corresponding closing brace of the same type. - Braces must close in the correct order: i.e., \\"([{ }])\\" is correct but \\"{[)]}\\" is incorrect. Write a function called `is_correctly_nested` that takes a single string of braces as input and returns `True` if the string is correctly nested, and `False` otherwise. # Examples ```python assert is_correctly_nested(\\"()\\") == True assert is_correctly_nested(\\"({[]})\\") == True assert is_correctly_nested(\\"({[}])\\") == False assert is_correctly_nested(\\"[({})]\\") == True assert is_correctly_nested(\\"[\\") == False assert is_correctly_nested(\\"][\\" ) == False assert is_correctly_nested(\\"{[()]}\\") == True ``` # Input Constraints - The input string will only contain the characters \'(\', \')\', \'{\', \'}\', \'[\', and \']\'. - The length of the string will be between 0 and 1000 characters.","solution":"def is_correctly_nested(s): Evaluates if a string of braces is correctly nested. Args: - s (str): The input string containing braces Returns: - bool: True if the string is correctly nested, False otherwise stack = [] matching_brace = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_brace: # It\'s a closing brace if stack and stack[-1] == matching_brace[char]: stack.pop() # Pop the matching opening brace else: return False else: stack.append(char) # It\'s an opening brace, push onto the stack return not stack # If stack is empty, all braces were matched"},{"question":"Task You are given an integer array `arr` and a positive integer `k`. Your goal is to partition the array into `k` subsets such that the maximum subset sum is minimized. Your task is to complete the function which returns the minimized maximum subset sum. # Notes: - The number of elements in `arr` does not exceed `30`. - Each element in the array is a non-negative integer and does not exceed `1000`. - `1 <= k <= len(arr)` - Perform a binary search over the possible answers (max sum allowed in any partition) and use backtracking to check feasibility. # Examples For `arr = [1, 2, 3, 4, 5]` and `k = 2` the output should be `9`, because the partitions can be `[1, 2, 3]` and `[4, 5]` or `[1, 4, 5]` and `[2, 3]`, both have maximum sums being `9`. For `arr = [7, 2, 5, 10, 8]` and `k = 2` the output should be `18`, because one optimal partition is `[7, 2, 5]` and `[10, 8]`, making the max subset sum `18`. For `arr = [1, 2, 3, 4]` and `k = 3` the output should be `4`, as the possible partitions would be `[1, 3]`, `[2]`, and `[4]` or other combinations where the maximum subset sum will not exceed `4`.","solution":"def can_partition(arr, k, max_sum): Helper function to check whether we can partition the array into k subsets with each subset\'s sum not exceeding max_sum. current_sum = 0 count = 1 for num in arr: if current_sum + num > max_sum: count += 1 current_sum = num if count > k: return False else: current_sum += num return True def minimize_max_partition_sum(arr, k): Returns the minimized maximum subset sum when partitioning the array into k subsets. left, right = max(arr), sum(arr) answer = right while left <= right: middle = (left + right) // 2 if can_partition(arr, k, middle): answer = middle right = middle - 1 else: left = middle + 1 return answer"},{"question":"You are working on an innovative project that involves encrypting words using a special method known as \\"circular encryption\\". In this method, each letter in a word is replaced with another letter that is a fixed number of positions away in the alphabetical order, wrapping around if necessary. For example, if the word is \\"abc\\" and the fixed number of positions is 2, the encrypted word would be \\"cde\\". - \'a\' is shifted by 2 positions to \'c\' - \'b\' is shifted by 2 positions to \'d\' - \'c\' is shifted by 2 positions to \'e\' Write a program that performs this circular encryption on a list of words. -----Input Format:----- The first line contains one integer, T, which is the number of test cases. Each test case is then described in two lines. The first line contains an integer K, the number of positions each letter should be shifted. The second line contains a single word in lowercase letters. -----Output Format:----- For each test case, output the encrypted word in a new line. -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ K ≤ 26 - 1 ≤ len(word) ≤ 100 -----Example----- Input: 2 2 abc 3 xyz Output: cde abc -----Explanation:----- In the first test case: - \'a\' shifted by 2 is \'c\' - \'b\' shifted by 2 is \'d\' - \'c\' shifted by 2 is \'e\' In the second test case: - \'x\' shifted by 3 is \'a\' - \'y\' shifted by 3 is \'b\' - \'z\' shifted by 3 is \'c\'","solution":"def circular_encrypt(k, word): Encrypt a word by shifting each character by k positions in the alphabet. Parameters: k (int): The number of positions each letter should be shifted. word (str): The word to be encrypted. Returns: str: The encrypted word. encrypted_word = [] for char in word: # Calculate the encrypted character and wrap around using modulo encrypted_char = chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\')) encrypted_word.append(encrypted_char) return \'\'.join(encrypted_word) def encrypt_multiple_cases(cases): Process multiple encryption cases based on provided cases. Parameters: cases (list): A list of tuples, each containing an integer k and a word. Returns: list: A list of encrypted words for each case. results = [] for k, word in cases: results.append(circular_encrypt(k, word)) return results"},{"question":"# Task You are given a function that should find the length of the longest substring of a given string that contains no repeating characters. Input The input is a single string `s`. Output Return an integer representing the length of the longest substring without repeating characters. Examples ```python \\"abcabcbb\\" --> 3 (\\"abc\\") \\"bbbbb\\" --> 1 (\\"b\\") \\"pwwkew\\" --> 3 (\\"wke\\") \\"\\" --> 0 \\"au\\" --> 2 (\\"au\\") ```","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} start = 0 max_length = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a grid of characters. Your task is to find the longest consecutive sequence of a specific character in any direction (horizontal, vertical, or diagonal). If the grid is empty or the character is not present in the grid, return 0. **Note:** The grid will be represented as a list of lists and the character will be a string of length 1. **Example:** ```python grid = [ [\'a\', \'b\', \'a\', \'a\'], [\'b\', \'a\', \'a\', \'b\'], [\'a\', \'a\', \'b\', \'a\'], [\'b\', \'b\', \'a\', \'a\'] ] character = \\"a\\" longest_sequence = 4 # diagonal sequence of \'a\' ```","solution":"def longest_consecutive_sequence(grid, character): Returns the length of the longest consecutive sequence of the given character in the grid. The sequence can be horizontal, vertical, or diagonal. if not grid or not character: return 0 rows = len(grid) cols = len(grid[0]) max_length = 0 # Directions: right, down-right, down, down-left directions = [(0, 1), (1, 1), (1, 0), (1, -1)] def count_in_direction(r, c, dr, dc): count = 0 while 0 <= r < rows and 0 <= c < cols and grid[r][c] == character: count += 1 r += dr c += dc return count for r in range(rows): for c in range(cols): if grid[r][c] == character: for dr, dc in directions: max_length = max(max_length, count_in_direction(r, c, dr, dc)) return max_length"},{"question":"You\'ve been given the task of organizing a marathon event. Participants will be running through various checkpoints on the route, and you need to ensure each section has sufficient water stations. You are provided with a list of integers representing the number of participants running through each checkpoint. You must also consider a certain threshold, which specifies the maximum number of participants a single water station can handle. Your task is to determine how many water stations are required at each checkpoint so that no station is overwhelmed. Write a function that takes in a list of integers, `participants`, representing the number of participants at each checkpoint, and an integer, `threshold`, representing the maximum capacity of a single water station. It should return a list of integers, where each integer corresponds to the required number of water stations for the respective checkpoint. For example: ```python def water_stations(participants, threshold): # Your code here # Example Usage print(water_stations([130, 200, 50], 100)) # Output: [2, 2, 1] # This means that the checkpoints need 2 stations, 2 stations, and 1 station, respectively. ``` **Note:** - The threshold will be a positive integer. - Each checkpoint will need at least one water station, even if the participants are fewer than the threshold.","solution":"def water_stations(participants, threshold): Determines the number of water stations required at each checkpoint. Args: participants (list of int): Number of participants at each checkpoint. threshold (int): Maximum number of participants a single water station can handle. Returns: list of int: Number of water stations required at each checkpoint. return [(p // threshold) + (1 if p % threshold != 0 else 0) for p in participants]"},{"question":"Given a string s and an integer k, write a function that returns the length of the longest substring where no more than k distinct characters are used. The string can contain both lowercase and uppercase letters. If k is zero or the string is empty, the function should return 0. Analyze the time and space complexity of your solution, and include edge cases in your test cases.","solution":"def longest_substring_with_k_distinct_chars(s, k): Returns the length of the longest substring where no more than k distinct characters are used. if k == 0 or not s: return 0 char_map = {} left = 0 max_length = 0 for right in range(len(s)): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Anastasia is trying to automate a part of her daily routine involving converting temperatures from Celsius to Fahrenheit and vice versa. She often finds herself needing to convert a list of temperatures from one scale to the other, and she would like to write a program to help with this. Write a function that takes three inputs: a list of temperatures, the current scale of these temperatures (\'C\' for Celsius or \'F\' for Fahrenheit), and the desired output scale (\'C\' or \'F\'). The function should return a new list of temperatures converted to the desired output scale. For reference, here are the formulas you can use for conversion: - To convert from Celsius to Fahrenheit: ( F = frac{9}{5}C + 32 ) - To convert from Fahrenheit to Celsius: ( C = frac{5}{9}(F - 32) ) -----Input:----- The input consists of three parts: 1. A list of integers or floating-point numbers representing temperatures. 2. A character \'C\' or \'F\' indicating the current scale of the provided temperatures. 3. A character \'C\' or \'F\' indicating the desired output scale. -----Output:----- The output should be a list of integers or floating-point numbers representing the temperatures converted to the desired scale, rounded to two decimal places. -----Constraints:----- - The list contains between 1 and 100 temperatures. - Each temperature in the list is between -273.15 and 1000 for Celsius and between -459.67 and 1832 for Fahrenheit. -----Example:----- Input: [0, 100, -40, 37.78], \'C\', \'F\' Output: [32.0, 212.0, -40.0, 100.0] Input: [32, 212, -40, 100], \'F\', \'C\' Output: [0.0, 100.0, -40.0, 37.78]","solution":"def convert_temperatures(temperatures, current_scale, target_scale): Convert a list of temperatures from one scale to another (Celsius to Fahrenheit or vice versa). Parameters: temperatures (list of floats): List of temperatures to be converted. current_scale (str): \'C\' for Celsius, \'F\' for Fahrenheit. target_scale (str): \'C\' for Celsius, \'F\' for Fahrenheit. Returns: list of floats: List of converted temperatures rounded to two decimal places. if current_scale == target_scale: return [round(temp, 2) for temp in temperatures] if current_scale == \'C\' and target_scale == \'F\': return [round((temp * 9/5) + 32, 2) for temp in temperatures] if current_scale == \'F\' and target_scale == \'C\': return [round((temp - 32) * 5/9, 2) for temp in temperatures] raise ValueError(\\"Invalid scale conversion\\")"},{"question":"Given an integer array `nums` and an integer `k`, find the number of contiguous subarrays that sum exactly to `k`. Example 1: Input: nums = [1,1,1], k = 2 Output: 2 Explanation: The 2 subarrays are: [1,1], [1,1] Example 2: Input: nums = [1,2,3], k = 3 Output: 2 Explanation: The 2 subarrays are: [1,2], [3] Note: 1. The length of the array `nums` will not exceed 10,000. 2. The range of numbers in `nums` will be in the range [-1,000,000, 1,000,000].","solution":"def subarray_sum(nums, k): Given an array of integers nums and an integer k, return the number of contiguous subarrays that sum to k. count = 0 curr_sum = 0 sum_dict = {0: 1} for num in nums: curr_sum += num if (curr_sum - k) in sum_dict: count += sum_dict[curr_sum - k] if curr_sum in sum_dict: sum_dict[curr_sum] += 1 else: sum_dict[curr_sum] = 1 return count"},{"question":"You are designing an inventory management system for a small store. Each product has a unique identifier (ID), a name, a quantity, and a price. Implement a `StoreInventory` class that allows you to manage the inventory by adding new products, updating the quantity of existing products, and calculating the total value of all products in the store. # StoreInventory Class The `StoreInventory` class should have the following methods: 1. **add_product**(product_id: int, name: str, quantity: int, price: float): - Adds a new product to the inventory. - If the product ID already exists in the inventory, it should raise a `ValueError` with the message \\"Product ID already exists\\". 2. **update_quantity**(product_id: int, quantity: int): - Updates the quantity of an existing product. - If the product ID does not exist in the inventory, it should raise a `ValueError` with the message \\"Product ID not found\\". 3. **calculate_total_value**() -> float: - Calculates and returns the total value of all products in the inventory. - The value of a product is its quantity multiplied by its price. # Example ```python # Creating an instance of StoreInventory store = StoreInventory() # Adding products to the inventory store.add_product(1, \\"Apple\\", 50, 0.50) store.add_product(2, \\"Banana\\", 100, 0.30) # Updating product quantity store.update_quantity(1, 75) # Updating quantity of \\"Apple\\" to 75 # Calculating total value of inventory total_value = store.calculate_total_value() print(total_value) # Output: 52.5 ``` # Notes - The `quantity` parameter in the `add_product` and `update_quantity` methods should be a non-negative integer. - The `price` parameter in the `add_product` method should be a non-negative float. - The `calculate_total_value` method should return a float rounded to 2 decimal places.","solution":"class StoreInventory: def __init__(self): self.inventory = {} def add_product(self, product_id: int, name: str, quantity: int, price: float): if product_id in self.inventory: raise ValueError(\\"Product ID already exists\\") self.inventory[product_id] = {\\"name\\": name, \\"quantity\\": quantity, \\"price\\": price} def update_quantity(self, product_id: int, quantity: int): if product_id not in self.inventory: raise ValueError(\\"Product ID not found\\") self.inventory[product_id][\'quantity\'] = quantity def calculate_total_value(self) -> float: total_value = sum(item[\'quantity\'] * item[\'price\'] for item in self.inventory.values()) return round(total_value, 2)"},{"question":"In a small town, there is a unique vending machine that dispenses items based on a specific pattern. The vending machine is filled with N items, each having a certain weight. You need to determine whether it\'s possible to select a subset of these items such that their combined weight is exactly W. Write a function to determine if there is a subset of items with weights that sum up to W. -----Constraints----- - 1 ≦ N ≦ 100 - 1 ≦ weight of each item ≦ 1000 - 1 ≦ W ≦ 10000 -----Input----- The input is given from Standard Input in the following format: N W w1 w2 ... wN -----Output----- Print \\"YES\\" if there is a subset whose weights sum to exactly W. Otherwise, print \\"NO\\". -----Sample Input----- 5 9 3 34 4 12 5 -----Sample Output----- YES The subset {4, 5} has a combined weight of 9. -----Sample Input----- 5 30 3 34 4 12 5 -----Sample Output----- NO There is no subset with a combined weight of 30.","solution":"def can_sum_to_weight(N, W, weights): Determines whether there is a subset of the weights that sum to exactly W. dp = [False] * (W + 1) dp[0] = True for weight in weights: for j in range(W, weight - 1, -1): if dp[j - weight]: dp[j] = True return \\"YES\\" if dp[W] else \\"NO\\" def vending_machine_subset_sum(input_str): input_lines = input_str.strip().split() N = int(input_lines[0]) W = int(input_lines[1]) weights = list(map(int, input_lines[2:])) return can_sum_to_weight(N, W, weights)"},{"question":"You are given a list of integers representing the heights of buildings in a row. A building can see the sunset if there are no taller buildings to its immediate right. Write a function that returns a list of the indices of the buildings that can see the sunset, in the order from left to right. Example: Input: [3, 7, 8, 3, 6, 1] Output: [2, 4, 5] Explanation: - Building at index 2 (height 8) can see the sunset as there are no taller buildings to its right. - Building at index 4 (height 6) can see the sunset as there are no taller buildings to its right. - Building at index 5 (height 1) can see the sunset as it is the last building in the row. Note: - You may assume the list of buildings has at least one building. - The height of each building is a positive integer (1 <= height <= 10^5).","solution":"def find_sunset_buildings(heights): Returns the indices of buildings that can see the sunset. Parameters: - heights: List of integers representing the heights of the buildings. Returns: - List of indices of buildings that can see the sunset. n = len(heights) if n == 0: return [] visible_buildings = [] max_height = 0 for i in range(n-1, -1, -1): if heights[i] > max_height: visible_buildings.append(i) max_height = heights[i] visible_buildings.reverse() return visible_buildings"},{"question":"You are given a string `s` consisting of lowercase English letters and a number `k`. You can perform the following operation at most `k` times: Pick any character in the string and replace it with any other lowercase English letter. Your task is to determine the length of the longest substring that consists of the same character after performing at most `k` operations. -----Input----- The first line contains the integer `k` (0 le k le |s|) — the maximum number of operations. The second line contains the string `s` (1 le |s| le 10^5) — the input string. -----Output----- In a single line output the length of the longest substring that consists of the same character after performing at most `k` operations. -----Examples----- Input 2 aabcc Output 4 Input 1 abcde Output 2 -----Note----- In the first sample, you can change both \'c\' characters to \'a\' or \'b\', resulting in the string \\"aaaac\\" or \\"aabbb\\", respectively. Both have a longest substring of a single character of length 4. In the second sample, you can change \'b\' to \'a\', resulting in the string \\"aacde\\", which has the longest substring of a single character \'a\' with length 2. Alternatively, you could change \'c\' to \'b\', resulting in \\"abbde\\", and so on. The longest possible substring in any case is 2.","solution":"def longest_substring_with_k_replacements(s, k): from collections import defaultdict # This dictionary will count frequencies of characters in the current window char_count = defaultdict(int) left = 0 # Start of the sliding window max_len = 0 # Length of the longest valid window max_count = 0 # Count of the most frequent character in the current window # Expand the window with right pointer for right in range(len(s)): # Add the current character to the count char_count[s[right]] += 1 # Update max_count with the count of the most frequent character max_count = max(max_count, char_count[s[right]]) # If the current window size minus the most frequent character count # is greater than k, then it means we need more than k replacements if (right - left + 1 - max_count) > k: # Shrink the window from the left char_count[s[left]] -= 1 left += 1 # Update the max length of the window max_len = max(max_len, right - left + 1) return max_len"},{"question":"``` ------------------------------------------------------------------ Join us at the treasure hunt where we need to find the hidden treasure using clues hidden in strings. the path is filled with traps ^ ^ >> beware << ^ ^ ----------------------------------------------------------- Task..... You will receive an array of strings with clues that contain numerical codes. Such as: ``` clues = [\\"The code for the first trap is 3021\\", \\"The next trap unlocks with 4152\\", \\"Finally, to access the treasure, you need the code 6317\\"] ``` Each numerical code follows the format below: - The code length is exactly 4 digits. - Between each digit, there are delimiters, which could be any non-digit character like letters, spaces, or special symbols. For example, 3a0b2c1. Your task is to identify all the valid 4-digit codes present in the array of strings and return them as an array of strings. However, be cautious: - Codes that aren\'t exactly 4 digits long or don\'t follow the format cannot be considered valid. - Any string that has contiguous digit sequences longer or shorter than 4 should be ignored entirely. You also need to return the valid codes in ascending order, as the hidden treasure can only be accessed in the right sequence. Return the sorted list of valid 4-digit codes found in the clues. ``` clues = [\\"Beware of trap 3a0b2c1 on the north\\", \\"The code 4z1x5m2o needs to be used next\\", \\"To open the chest 6*8^9&7* is a false code\\", \\"The actual code 6j7k3l2i for the treasure\\"] ``` should return: `[\\"3021\\", \\"4152\\"]` ```","solution":"import re def find_valid_codes(clues): This function takes an array of strings with clues containing numerical codes and returns a sorted list of valid 4-digit codes as strings. valid_codes = [] # Regex to find groups of exactly 4 digits, separated by non-digit characters pattern = re.compile(r\'dDdDdDd\') for clue in clues: matches = pattern.findall(clue) for match in matches: # Remove the non-digit characters to get the 4-digit code code = re.sub(r\'D\', \'\', match) if len(code) == 4: valid_codes.append(code) return sorted(valid_codes)"},{"question":"Implement a function that takes a string and returns a dictionary with the frequency count of each character (case-sensitive) in the string.","solution":"def char_frequency(s): Returns a dictionary with the frequency count of each character (case-sensitive) in the string s. frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Write a function that takes as input a list of integers and an integer `T`. The function should return `True` if there are three distinct elements in the list that sum up to `T`, and `False` otherwise. Example 1: Input: nums = [12, 3, 6, 1, 6, 9], T = 24 Output: True Explanation: The triplet (12, 3, 9) sums up to 24. Example 2: Input: nums = [1, 2, 3, 4, 5], T = 50 Output: False Explanation: No triplet in the list sums up to 50. Notes: - The function should return a boolean value. - The input list may have duplicate values but the function should consider only distinct elements for forming a triplet. - The length of the list `nums` will be between 3 and 1000. - Each element in the list `nums` will be between -1000 and 1000.","solution":"def three_sum(nums, T): Returns True if there are three distinct elements in the list that sum up to T, False otherwise. # Ensure the elements are distinct nums = list(set(nums)) # Sort the numbers to make the two-pointer technique easier nums.sort() n = len(nums) # Loop through the list, fixing one element at a time and searching for the other two for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == T: return True elif current_sum < T: left += 1 else: right -= 1 return False"},{"question":"# Task **_Implement_** a function that finds **_the smallest positive number that is missing_** from an **_unsorted integer array_**. ___ # Notes * The input array may contain duplicate elements and negative numbers. * The smallest positive integer is 1. ___ # Input >> Output Examples: ``` cpp 1- findMissingPositive({3, 4, -1, 1}) ==> return (2) ``` **_Explanation_**: **_Since_** the missing positive number is **_2_**, which is the first smallest missing positive integer in the given array. ___ ``` cpp 2- findMissingPositive({1, 2, 0}) ==> return (3) ``` **_Explanation_**: **_Since_** the missing positive number is **_3_**, which is the first smallest missing positive integer in the given array. ___ ``` cpp 3- findMissingPositive({7, 8, 9, 11, 12}) ==> return (1) ``` **_Explanation_**: **_Since_** the missing positive number is **_1_**, since **_1_** is not present in the given array and it is the smallest positive integer. ___","solution":"def findMissingPositive(nums): Returns the smallest positive number that is missing from the unsorted integer array nums. nums = set(filter(lambda x: x > 0, nums)) smallest_positive = 1 while smallest_positive in nums: smallest_positive += 1 return smallest_positive"},{"question":"Given a list of integers, the frequency of an integer is defined as the number of times it appears in the list. A mode of this list is the element that has the highest frequency. More than one mode can be found if multiple elements have the same highest frequency. For example, for the list [1, 2, 2, 3, 3], both 2 and 3 are modes, as they both appear twice and have the highest frequency. # Task Given a list of integers, determine the mode(s). If there are multiple modes, return them in ascending order. If the list is empty, return an empty list. # Constraints - The list can have up to 10^5 elements. - The elements are in the range of [-10^9, 10^9]. # Examples ``` [4, 4, 1, 2, 2, 3, 3] --> [2, 3, 4] [20, 30, 20, 30, 20, 30] --> [20, 30] [1, 1, 2, 3, 4, 5, 6] --> [1] [7] --> [7] [] --> [] ```","solution":"from collections import Counter def find_modes(nums): Returns the mode(s) of the list of integers. If multiple modes, returns them in ascending order. If the list is empty, returns an empty list. if not nums: return [] frequency = Counter(nums) max_frequency = max(frequency.values()) modes = [key for key, value in frequency.items() if value == max_frequency] return sorted(modes)"},{"question":"Suppose you are given a grid of size `n x m` (where `n` and `m` are positive integers) filled with non-negative integers. You can start from any cell in the first row and your goal is to reach any cell in the last row. You can move either straight downwards, diagonally down-left, or diagonally down-right at each step. You need to find the maximum sum of the numbers you can collect while following the described path. Write a function `maxSumPath(grid)` that takes in a list of lists representing the grid and returns the maximum sum obtainable. The function signature is: ```python def maxSumPath(grid: List[List[int]]) -> int: ``` # Example ```python grid = [ [3, 1, 7, 4, 2], [2, 8, 1, 9, 7], [5, 3, 2, 4, 8], [1, 6, 7, 8, 3] ] print(maxSumPath(grid)) # returns 28 ``` # Explanation: In the given example, one of the optimal paths to obtain the maximum sum is: 1. Start at cell (0, 2) with value 7 2. Move to cell (1, 3) with value 9 3. Move to cell (2, 4) with value 8 4. Move to cell (3, 3) with value 8 Thus, the maximum sum is 7 + 9 + 8 + 8 = 32. # Constraints: - The grid will have at least one row and one column. - The values in the grid will be non-negative integers (0 ≤ grid[i][j] ≤ 10^4).","solution":"from typing import List def maxSumPath(grid: List[List[int]]) -> int: n = len(grid) m = len(grid[0]) # Create a DP table to store the maximum sum up to each cell dp = [[0] * m for _ in range(n)] # Initialize the first row of DP table for j in range(m): dp[0][j] = grid[0][j] # Fill the DP table for i in range(1, n): for j in range(m): down = dp[i - 1][j] down_left = dp[i - 1][j - 1] if j > 0 else 0 down_right = dp[i - 1][j + 1] if j < m - 1 else 0 dp[i][j] = grid[i][j] + max(down, down_left, down_right) # The maximum sum will be the maximum value in the last row of the DP table return max(dp[-1])"},{"question":"You are given an array of N integers and a target integer T. Determine if the target T can be obtained by adding exactly K consecutive elements of the array. -----Constraints----- - 1 leq N leq 10^5 - -10^9 leq array_i leq 10^9 - 1 leq K leq N - -10^9 leq T leq 10^9 -----Input----- Input is given from Standard Input in the following format: N K T array_1 : array_N -----Output----- If the target T can be obtained by adding exactly K consecutive elements, print \\"Yes\\"; otherwise, print \\"No\\". -----Sample Input----- 5 3 9 1 2 3 4 5 -----Sample Output----- Yes The target 9 can be obtained as follows: - Add the elements 2, 3, 4 from indices 2 to 4. The sum is 9. -----Sample Input----- 6 2 4 1 -1 2 -2 3 -3 -----Sample Output----- No NO: No combination of 2 consecutive elements sums to 4.","solution":"def can_obtain_sum_by_consecutive_elements(N, K, T, array): Determine if the target T can be obtained by adding exactly K consecutive elements of the array. :param N: int - Number of integers in the array :param K: int - Number of consecutive elements to sum :param T: int - Target sum :param array: list - List of integers :return: str - \\"Yes\\" if the sum can be obtained, otherwise \\"No\\" # Calculate the sum of the first K elements current_sum = sum(array[:K]) # Check if the initial sum equals the target if current_sum == T: return \\"Yes\\" # Use a sliding window approach to calculate the sum of each K consecutive elements for i in range(K, N): # Update the sum to include the next element and exclude the previous element current_sum += array[i] - array[i - K] if current_sum == T: return \\"Yes\\" return \\"No\\" # Demonstration of the function with the given examples N = 5 K = 3 T = 9 array = [1, 2, 3, 4, 5] print(can_obtain_sum_by_consecutive_elements(N, K, T, array)) # Output: \\"Yes\\" N = 6 K = 2 T = 4 array = [1, -1, 2, -2, 3, -3] print(can_obtain_sum_by_consecutive_elements(N, K, T, array)) # Output: \\"No\\""},{"question":"You are given a string of lowercase English letters and you need to determine if it can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward. For example, the string \\"radar\\" is a palindrome, but the string \\"hello\\" is not. To form a palindrome, at most one character in the string can have an odd frequency (appear an odd number of times). All other characters must have even frequencies. Write a function to determine if a given string can be rearranged to form a palindrome. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains the string S consisting of only lowercase English letters. -----Output----- For each test case, output a single line containing either \\"YES\\" if the given string can be rearranged to form a palindrome or \\"NO\\" otherwise (without quotes). -----Constraints----- - 1 le T le 100 - 1 le |S| le 1000 - S only contains lowercase English letters. -----Example Input----- 3 civic ivicc hello -----Example Output----- YES YES NO -----Explanation----- Example case 1: The string \\"civic\\" is already a palindrome. Example case 2: The string \\"ivicc\\" can be rearranged to \\"civic\\" which is a palindrome. Example case 3: The string \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. Args: s (str): The input string consisting only of lowercase English letters. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\". from collections import Counter # Count the frequency of each character in the string count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for char, freq in count.items() if freq % 2 != 0) # For the string to be a palindrome, it can have at most one character with an odd frequency if odd_count <= 1: return \\"YES\\" else: return \\"NO\\" def solve_palindrome_problem(test_cases): Solves the problem for multiple test cases. Args: test_cases (list of str): A list of strings for each test case. Returns: list of str: A list containing the results for each test case (\\"YES\\" or \\"NO\\"). results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results # Input processing (can be adjusted according to framework or specific needs) def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = data[1:T+1] results = solve_palindrome_problem(test_cases) for result in results: print(result)"},{"question":"A robot is placed at the origin of a 2D plane (0, 0). It can move in four directions: up, down, left, and right. The robot receives a string of instructions where each character corresponds to a movement: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. Each movement moves the robot exactly one unit in the respective direction. Your task is to determine the final coordinates of the robot after executing all the movements in the given instruction string. Examples: ```python final_position(\\"UUDDLRLR\\") -> (0, 0) final_position(\\"UUU\\") -> (0, 3) final_position(\\"LLRRDD\\") -> (0, -2) final_position(\\"ULDR\\") -> (0, 0) ``` Make sure to get the movement right so the robot ends up at the correct final coordinates!","solution":"def final_position(instructions): Given a string of instructions, calculate the final coordinates of the robot. Args: instructions (str): A string containing the instructions, where \'U\' means up, \'D\' means down, \'L\' means left, and \'R\' means right. Returns: tuple: The final coordinates (x, y) of the robot. x, y = 0, 0 for instruction in instructions: if instruction == \'U\': y += 1 elif instruction == \'D\': y -= 1 elif instruction == \'L\': x -= 1 elif instruction == \'R\': x += 1 return (x, y)"},{"question":"Write a function that calculates the factorial of a given number using an iterative approach. The function should take a single integer n (where 0 <= n <= 12) and return its factorial. The factorial of a number n is the product of all positive integers less than or equal to n. Example: ``` factorial(5) = 120 factorial(0) = 1 factorial(10) = 3628800 ```","solution":"def factorial(n): Calculates the factorial of a given number using an iterative approach. Parameters: n (int): A non-negative integer (0 <= n <= 12) Returns: int: The factorial of the given number. if n < 0 or n > 12: raise ValueError(\\"Input number must be in the range 0 <= n <= 12\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"You are given an array of integers `arr` and an integer `k`. Your task is to write a python function `kth_largest(arr, k)` which will return the k-th largest element in the array. Example: ```python kth_largest([3, 2, 1, 5, 6, 4], 2) == 5 kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4 ``` Input constraints: - `1 <= len(arr) <= 1000` - `-10000 <= arr[i] <= 10000` - `1 <= k <= len(arr)`","solution":"import heapq def kth_largest(arr, k): Returns the k-th largest element in the given array. return heapq.nlargest(k, arr)[-1]"},{"question":"Find the Longest Palindromic Substring! Given a string `s`, your task is to find the longest substring of `s` that is a palindrome. A palindrome is a string that reads the same forward and backward. # Input: - A single string `s` with length in the range `[1, 10^4]`, consisting of lower and uppercase English letters. # Output: - A single string representing the longest palindromic substring of `s`. If there are multiple such substrings with the maximum length, return the one that appears first. # Examples ``` Input: \\"babad\\" Output: \\"bab\\" or \\"aba\\" Input: \\"cbbd\\" Output: \\"bb\\" ```","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring of given string s. if len(s) == 0: return \\"\\" def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindrome odd_palindrome = expand_around_center(s, i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Even length palindrome even_palindrome = expand_around_center(s, i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"You are given a list of integers. Your task is to write a function that returns the sum of all the positive integers in the list. If there are no positive integers, the function should return 0. For example: sum_of_positives([1, -4, 7, 12]) => 20 *1*, *7*, and *12* are positive integers and their sum is *20*. Another example: sum_of_positives([-1, -4, -7, 0]) => 0 There are no positive integers in the input list, so the function returns *0*.","solution":"def sum_of_positives(nums): Returns the sum of all positive integers in the list. If there are no positive integers, it returns 0. return sum(num for num in nums if num > 0)"},{"question":"You are given an array of integers `nums` and an integer `k`. You should rotate the array to the right by `k` steps, where `k` is non-negative. Return the rotated array. Example 1: Input: nums = [1,2,3,4,5,6,7], k = 3 Output: [5,6,7,1,2,3,4] Explanation: Rotate steps to the right: [1,2,3,4,5,6,7] -> [7,1,2,3,4,5,6] -> [6,7,1,2,3,4,5] -> [5,6,7,1,2,3,4] Example 2: Input: nums = [-1,-100,3,99], k = 2 Output: [3,99,-1,-100] Explanation: Rotate steps to the right: [-1,-100,3,99] -> [99,-1,-100,3] -> [3,99,-1,-100] Constraints: 1 <= nums.length <= 10^5 -2^31 <= nums[i] <= 2^31 - 1 0 <= k <= 10^5","solution":"def rotate(nums, k): Rotates the array to the right by k steps. n = len(nums) k = k % n # In case k is greater than the length of nums nums[:] = nums[-k:] + nums[:-k] return nums"},{"question":"You are given a list of n numbers. For each number in the list, you need to find the number of unique pairs (i, j) such that 1 ≤ i < j ≤ n and the sum of nums[i] and nums[j] is an even number. A pair (i, j) is considered unique if the indices are different, even if the elements at those indices are the same. -----Input----- - The first line contains a single integer, T, the number of test cases. The description of each test case follows: - The first line of each test case contains a single integer, n. - The next line contains n integers, representing the elements of the list. -----Output----- - For each test case, print \\"Case x:\\" (without quotes, where x is the test case number, 1-indexed) in the first line. - Then print one line with the number of unique pairs whose sum is even. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 10^5 - 0 ≤ nums[i] ≤ 10^9 -----Example----- Input: 2 4 1 2 3 4 3 2 2 2 Output: Case 1: 4 Case 2: 3 -----Explanation:----- Testcase 1: The unique pairs of indices (i, j) where the sum of the elements nums[i] and nums[j] is even are: - (1, 3) -> nums[1] + nums[3] = 1 + 3 = 4 (even) - (2, 4) -> nums[2] + nums[4] = 2 + 4 = 6 (even) - (3, 4) -> nums[3] + nums[4] = 3 + 4 = 7 (odd) - (1, 2) -> nums[1] + nums[2] = 1 + 2 = 3 (odd) Hence, there are 4 pairs where the sum is even. Testcase 2: The unique pairs of indices (i, j) where the sum of the elements nums[i] and nums[j] is even are: - (1, 2) -> nums[1] + nums[2] = 2 + 2 = 4 (even) - (1, 3) -> nums[1] + nums[3] = 2 + 2 = 4 (even) - (2, 3) -> nums[2] + nums[3] = 2 + 2 = 4 (even) Hence, there are 3 pairs where the sum is even.","solution":"def count_even_sum_pairs(test_cases): Returns the count of unique pairs whose sum is even for given list of test cases. results = [] for index, case in enumerate(test_cases): n = case[0] nums = case[1] even_count = sum(1 for x in nums if x % 2 == 0) odd_count = n - even_count # Pairing even numbers among themselves even_pairs = even_count * (even_count - 1) // 2 # Pairing odd numbers among themselves odd_pairs = odd_count * (odd_count - 1) // 2 result = even_pairs + odd_pairs results.append(f\\"Case {index + 1}:n{result}\\") return results # Example of how the function would be used T = 2 test_cases = [ (4, [1, 2, 3, 4]), (3, [2, 2, 2]) ] for result in count_even_sum_pairs(test_cases): print(result)"},{"question":"Given an array of positive integers `weights` representing weights of different items, and an integer `D` representing the number of days. You need to transport all items within `D` days by dividing them into different days\' loads. Each day, you can carry a load that can be represented as the sum of elements from a contiguous subarray of `weights`. The load for each day cannot exceed a capacity `C` which needs to be decided. Your task is to find the smallest capacity `C` such that the items can be distributed within `D` days. Example 1: Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5 Output: 15 Explanation: A capacity of 15 is sufficient to ship the items in 5 days: [1,2,3,4,5], [6,7], [8], [9], [10]. Example 2: Input: weights = [3,2,2,4,1,4], D = 3 Output: 6 Explanation: A capacity of 6 is sufficient to ship the items in 3 days: [3,2], [2,4], [1,4]. Example 3: Input: weights = [1,2,3,1,1], D = 4 Output: 3 Explanation: A capacity of 3 is sufficient to ship the items in 4 days: [1,2], [3], [1], [1]. Constraints: 1 <= weights.length <= 50000 1 <= weights[i] <= 500 1 <= D <= weights.length","solution":"def ship_within_days(weights, D): def can_ship_with_capacity(capacity): days_needed = 1 current_load = 0 for weight in weights: if current_load + weight > capacity: days_needed += 1 current_load = 0 current_load += weight if days_needed > D: return False return True left, right = max(weights), sum(weights) while left < right: mid = (left + right) // 2 if can_ship_with_capacity(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given a list of transactions in a format similar to a simple bank statement. Each transaction is represented as a string in one of the following formats: - `\\"<type> <amount>\\"`: where `type` is either \\"deposit\\" or \\"withdrawal\\" and `amount` is a positive integer indicating the amount of that transaction. - `\\"transfer <amount> to <account>\\"`: where `amount` is a positive integer specifying the amount of the transfer and `account` is the account number (represented as a string) to which the transfer was made. Your task is to write a function to calculate the final balance of the account after applying all the transactions. Note: 1. The initial balance of the account is 0. 2. There will be no negative balances at any point, all withdrawals and transfers will have valid amounts that won\'t cause the balance to go negative. Example 1: Input: [\\"deposit 1000\\", \\"withdrawal 200\\", \\"transfer 300 to 12345\\"] Output: 500 Explanation: - Starting balance: 0 - After \\"deposit 1000\\": balance is 1000. - After \\"withdrawal 200\\": balance is 800. - After \\"transfer 300 to 12345\\": balance is 500. Example 2: Input: [\\"deposit 500\\", \\"withdrawal 300\\", \\"transfer 100 to 67890\\", \\"deposit 200\\"] Output: 300 Explanation: - Starting balance: 0 - After \\"deposit 500\\": balance is 500. - After \\"withdrawal 300\\": balance is 200. - After \\"transfer 100 to 67890\\": balance is 100. - After \\"deposit 200\\": balance is 300. Constraints: - The length of the input list will be between 1 and 1000. - Each transaction will be a properly formatted string according to the rules above. - The amount for each transaction will be a positive integer between 1 and 10000.","solution":"def calculate_final_balance(transactions): Calculates the final balance after applying a list of transactions. Args: transactions (list of str): List of transactions strings. Returns: int: The final balance. balance = 0 for transaction in transactions: parts = transaction.split() if parts[0] == \\"deposit\\": amount = int(parts[1]) balance += amount elif parts[0] == \\"withdrawal\\": amount = int(parts[1]) balance -= amount elif parts[0] == \\"transfer\\": amount = int(parts[1]) balance -= amount return balance"},{"question":"Given a positive integer n, compute the nth triangular number. The nth triangular number is defined as the sum of the first n natural numbers and can be represented by the formula: > T(n) = n * (n + 1) / 2 Write a function `findTriangular` that takes an integer `n` as input and returns the nth triangular number. # Examples: ```python findTriangular(1) # should return 1 # since T(1) = 1 * (1 + 1) / 2 = 1 findTriangular(3) # should return 6 # since T(3) = 3 * (3 + 1) / 2 = 6 findTriangular(7) # should return 28 # since T(7) = 7 * (7 + 1) / 2 = 28 ``` # Note: - You can assume that the input n will be a positive integer. - Try to optimize the function for large values of n.","solution":"def findTriangular(n): Returns the nth triangular number. return n * (n + 1) // 2"},{"question":"Given a list of positive integers, find the smallest positive integer that is missing from the list. The list may contain duplicates and is not necessarily sorted. -----Input----- The first line contains an integer T denoting the total number of test cases. In each test case, the first line contains an integer n denoting the number of integers. In the second line, n integers a[1..n] are given as a single space-separated list. -----Output----- For each test case, output the smallest missing positive integer in a new line. -----Constraints----- - 1 <= T <= 10 - 1 <= n <= 1000 - 1 <= a[i] <= 1000 -----Example----- Input: 2 5 2 3 7 6 8 3 1 2 3 Output: 1 4 -----Explanation----- In the first test case, the smallest missing positive integer is 1. In the second test case, the smallest missing positive integer is 4.","solution":"def smallest_missing_positive_integer(test_cases): Find the smallest missing positive integer for each test case. Args: test_cases: List of tuples where each tuple is (n, list of n integers) Returns: List of smallest missing positive integers for each test case. results = [] for n, arr in test_cases: positive_set = set(x for x in arr if x > 0) smallest_missing = 1 while smallest_missing in positive_set: smallest_missing += 1 results.append(smallest_missing) return results"},{"question":"You are on an expedition to explore a series of connected caves. Each cave connects to other caves through tunnel passages. Your goal is to find the shortest path from a starting cave to a destination cave, but there\'s a catch: each tunnel can only be used at most once. Given a list of tuples edges where each tuple (a, b, d) represents a tunnel from cave a to cave b with a distance of d, find the shortest path distance from the start cave to the destination cave. Return an integer representing the shortest path distance. If no such path exists, return -1. Example 1: Input: edges = [(1, 2, 2), (2, 3, 3), (1, 4, 1), (4, 3, 2)], start = 1, destination = 3 Output: 3 Explanation: The shortest path from cave 1 to cave 3 is 1 -> 4 -> 3 with a distance of 3. Example 2: Input: edges = [(1, 2, 1), (2, 3, 4), (2, 4, 2), (4, 3, 1)], start = 1, destination = 3 Output: 4 Explanation: The shortest path from cave 1 to cave 3 is 1 -> 2 -> 4 -> 3 with a distance of 4. Example 3: Input: edges = [(1, 2, 3), (2, 1, 1)], start = 1, destination = 2 Output: 3 Explanation: The shortest path from cave 1 to cave 2 is 1 -> 2 with a distance of 3. Example 4: Input: edges = [(1, 2, 2), (2, 3, 3)], start = 3, destination = 1 Output: -1 Explanation: There is no path from cave 3 to cave 1. Example 5: Input: edges = [(1, 2, 5)], start = 1, destination = 2 Output: 5 Explanation: The shortest path from cave 1 to cave 2 is 1 -> 2 with a distance of 5. Constraints: - 1 <= edges.length <= 10^5 - Each edge is represented as a tuple (a, b, d) where 1 <= a, b <= 10^5 and 1 <= d <= 10^9 - 1 <= start, destination <= 10^5","solution":"import heapq from collections import defaultdict import sys def find_shortest_path(edges, start, destination): # Create adjacency list adj = defaultdict(list) for a, b, d in edges: adj[a].append((b, d)) # Use Dijkstra\'s Algorithm with a priority queue pq = [(0, start)] # (distance, node) distances = {start: 0} while pq: current_distance, current_node = heapq.heappop(pq) if current_node == destination: return current_distance for neighbor, weight in adj[current_node]: distance = current_distance + weight if neighbor not in distances or distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1"},{"question":"A librarian needs a program to organize books in the library based on a custom sorting rule. Each book is identified by a unique ID, which contains alphanumeric characters (both uppercase and lowercase letters, and digits). The librarian wants to sort the books such that: 1. Books with purely numeric IDs come first, in ascending order based on their numeric value. 2. Then, books with alphanumeric IDs that start with an uppercase letter, in lexicographical order. 3. Finally, books with alphanumeric IDs that start with a lowercase letter, in lexicographical order. Write a program to help the librarian achieve this sorting. -----Input:----- - First-line will contain N, the number of book IDs. - The next N lines each contain one book ID (a non-empty string consisting of digits, uppercase and lowercase letters). -----Output:----- - Print the sorted list of book IDs, one per line. -----Constraints----- - 1 leq N leq 100 - Each book ID string\'s length is between 1 and 100 characters. -----Sample Input:----- 5 123 abc A12 56 bA3 -----Sample Output:----- 56 123 A12 abc bA3 -----EXPLANATION:----- - Numeric IDs 56 and 123 are printed first in ascending order. - Alphanumeric ID starting with an uppercase letter A12 comes next. - Alphanumeric IDs starting with lowercase letters abc and bA3 follow in lexicographical order.","solution":"def sort_book_ids(n, book_ids): Sorts book IDs according to the custom sorting rule. Parameters: n (int) : Number of book IDs book_ids (list): List of book IDs Returns: list: Sorted list of book IDs numeric_ids = [] uppercase_ids = [] lowercase_ids = [] for book_id in book_ids: if book_id.isdigit(): numeric_ids.append(book_id) elif book_id[0].isupper(): uppercase_ids.append(book_id) else: lowercase_ids.append(book_id) numeric_ids.sort(key=int) uppercase_ids.sort() lowercase_ids.sort() return numeric_ids + uppercase_ids + lowercase_ids # Example usage #book_ids = [\\"123\\", \\"abc\\", \\"A12\\", \\"56\\", \\"bA3\\"] #sorted_ids = sort_book_ids(5, book_ids) #print(\\"n\\".join(sorted_ids)) # This would print the sorted IDs as per given custom rule."},{"question":"Sara is a software engineer who loves solving puzzles in her free time. She recently came across a unique puzzle that asks for transforming a list of integers into a new list based on a set of rules. Help Sara write a function to solve this puzzle. The function should take a list of integers as input and produce a new list according to the following rules: 1. If the integer is divisible by 3, replace it with \\"Fizz\\". 2. If the integer is divisible by 5, replace it with \\"Buzz\\". 3. If the integer is divisible by both 3 and 5, replace it with \\"FizzBuzz\\". 4. Otherwise, leave the integer unchanged. # Input - A list of integers, where each integer ( n ) satisfies ( 1 leq n leq 100 ). # Output - A new list with integers and/or strings based on the rules described. # Example ```python transform_list([1, 3, 5, 15, 22]) ``` Output: ```python [1, \\"Fizz\\", \\"Buzz\\", \\"FizzBuzz\\", 22] ``` # Constraints - The input list will contain 1 to 20 integers. - The integers will always be positive and within the range from 1 to 100.","solution":"def transform_list(lst): Transforms a list of integers according to the rules: - Replace with \\"Fizz\\" if divisible by 3 - Replace with \\"Buzz\\" if divisible by 5 - Replace with \\"FizzBuzz\\" if divisible by both 3 and 5 - Otherwise, keep the integer as is Parameters: lst (list): A list of integers Returns: list: A new list with integers and/or strings according to the rules result = [] for num in lst: if num % 15 == 0: result.append(\\"FizzBuzz\\") elif num % 3 == 0: result.append(\\"Fizz\\") elif num % 5 == 0: result.append(\\"Buzz\\") else: result.append(num) return result"},{"question":"You are given a list of integers `nums` and a single integer `target`. Your task is to determine if there are two distinct indices in the list such that the elements at those indices add up to the `target`. Write a function `find_indices(nums, target)` such that: For `nums = [2, 7, 11, 15]`, `target = 9` `find_indices returns [0, 1]` For `nums = [3, 2, 4]`, `target = 6` `find_indices returns [1, 2]` For `nums = [3, 3]`, `target = 6` `find_indices returns [0, 1]` For `nums = [1, 2, 3]`, `target = 4` `find_indices returns [0, 2]` If there are no such indices, return an empty list. Note: - The returned indices must be in ascending order. - Each input will have exactly one solution.","solution":"def find_indices(nums, target): Finds two indices such that their corresponding elements in the list `nums` add up to `target`. The function returns these indices in ascending order. :param nums: List of integers :param target: Integer target sum :return: List of two indices in ascending order lookup = {} for i, num in enumerate(nums): complement = target - num if complement in lookup: return [lookup[complement], i] lookup[num] = i return [] # If no solution is found"},{"question":"Create a function named `analyzeSocks` which takes an array of integers as an input. Each integer in the array represents the color code of a sock. Your function should count the number of matching pairs of socks and return the total number of pairs. For example, given the array `[10, 20, 20, 10, 10, 30, 50, 10, 20]`, the function should return `3` because there are 3 pairs of socks: - 2 pairs of color 10 - 1 pair of color 20 If no pairs are found, return `0`. Function signature: `def analyzeSocks(sock_colors: List[int]) -> int:`","solution":"from typing import List def analyzeSocks(sock_colors: List[int]) -> int: Given an array of integers where each integer represents the color code of a sock, this function counts and returns the number of matching pairs of socks. from collections import Counter color_count = Counter(sock_colors) pairs = 0 for count in color_count.values(): pairs += count // 2 # Each pair of socks return pairs"},{"question":"Yash and Pooja love solving puzzles during their lunch breaks. Their favorite puzzle involves rearranging characters in a given string to form a new string such that no two adjacent characters in the new string are the same. Yash is stumped with the current puzzle and has asked Pooja for help. To assist Yash, write a program to determine if such a rearrangement is possible. -----Input----- The first line contains an integer N, which is the number of test cases. The next N lines each contain a string consisting of lowercase English alphabets only. -----Output----- For each string, print \\"YES\\" if a rearrangement is possible such that no two adjacent characters are the same. Otherwise, print \\"NO\\". -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ length of each string ≤ 100 -----Example----- Input: 3 aab aaab abc Output: YES NO YES -----Explanation----- In the first example, \\"aab\\" can be rearranged to \\"aba\\", so the output is \\"YES\\". In the second example, \\"aaab\\" cannot be rearranged to meet the condition, so the output is \\"NO\\". In the third example, \\"abc\\" can be rearranged to \\"abc\\" (itself) or \\"acb\\", so the output is \\"YES\\".","solution":"def can_rearrange_no_adjacent(s): Determines if characters in the string `s` can be rearranged so that no two adjacent characters are the same. from collections import Counter counts = Counter(s) max_occurrences = counts.most_common(1)[0][1] if max_occurrences > (len(s) + 1) // 2: return \\"NO\\" return \\"YES\\" def solve_puzzle_cases(n, cases): results = [] for s in cases: results.append(can_rearrange_no_adjacent(s)) return results"},{"question":"Given an array a of n integers, you are allowed to perform the following operation any number of times: select any index i (1 le i le n) and remove the element a[i] from the array. For example, if n = 5, a = [4, 7, 2, 3, 9], then after performing an operation to remove the third element, the array a will become [4, 7, 3, 9]; if you remove the first element, it will become [7, 2, 3, 9]. Your task is to find the minimum total number of operations needed to remove at least one instance of each integer that appears more than once in the array, so that all elements in the resulting array are distinct. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases in the test. Then t test cases follow. Each test case starts with a line containing an integer n (1 le n le 3000) — length of the array a. Then follow n integers a_1, a_2, ldots, a_n (0 le a_i le 10^9). The sum of n for all test cases in one test does not exceed 3000. -----Output----- For each test case, output one integer — the minimum number of operations needed to remove duplicates and make the array consist of only distinct elements. -----Example----- Input 4 5 4 7 2 3 9 6 1 3 3 7 8 7 5 5 5 5 5 5 4 1 2 3 4 Output 0 2 4 0 -----Note----- In the first test case, the array already contains all distinct elements, so no operation is needed. In the second test case, you need to remove one of the \'3\'s and one of the \'7\'s. Therefore, the desired operations: [1, 3, 3, 7, 8, 7] rightarrow [1, 3, 7, 8, 7] rightarrow [1, 3, 7, 8]. In the third test case, all elements are identical, so you need to remove 4 of them to leave one \'5\'. In the fourth test case, the array already contains all distinct elements, so no operation is needed.","solution":"def minimum_removals_to_make_distinct(test_cases): Function to determine the number of removals required to make all elements in each array distinct. :param test_cases: List of dicts. Each dict contains a key \'n\' (length of array) and \'a\' (the array itself). :returns: List of integers, each representing the number of removals required for the corresponding test case. results = [] for case in test_cases: n, a = case[\'n\'], case[\'a\'] element_count = {} # Count occurrences of each element for num in a: if num in element_count: element_count[num] += 1 else: element_count[num] = 1 # Calculate minimum number of removals removals = 0 for count in element_count.values(): if count > 1: removals += (count - 1) results.append(removals) return results"},{"question":"An electronic store sells various items where each item has a unique product code. The store needs to categorize each product based on its type. Given a sequence of product codes and a set of product types along with their product codes, write a program to categorize each product in the sequence. ----Input:---- - The first line contains an integer P, the number of different product types. - The next P lines each contain a product type and a space-separated list of product codes associated with that type. - The following line contains an integer N, the number of product codes in the sequence. - The next line contains N product codes. ----Output:---- - For each product code in the sequence, output the product type it belongs to, based on the provided categorization. If a product code does not belong to any provided type, output \\"Unknown\\". ----Constraints:---- - 1 leq P leq 10 - Each product type string is at most 20 characters long and contains only letters (a-z, A-Z). - Each product code is a string of exactly 5 alphanumeric characters. - The total number of unique product codes in all types combined does not exceed 1000. - 1 leq N leq 100 ----Sample Input:---- 3 Electronics 12345 67890 54321 98765 Groceries abcde fghij klmno pqrst Clothing 11111 22222 33333 7 12345 abcde 99999 54321 fghij 22222 99998 ----Sample Output:---- Electronics Groceries Unknown Electronics Groceries Clothing Unknown ----Explanation:---- - Product code \\"12345\\" belongs to the \\"Electronics\\" type. - Product code \\"abcde\\" belongs to the \\"Groceries\\" type. - Product code \\"99999\\" is not associated with any provided product type, thus \\"Unknown\\". - Similarly, \\"54321\\" belongs to \\"Electronics\\", \\"fghij\\" belongs to \\"Groceries\\", and \\"22222\\" belongs to \\"Clothing\\". - Product code \\"99998\\" is not associated with any provided product type, thus \\"Unknown\\".","solution":"def categorize_products(P, product_types, N, product_codes): Categorizes products based on their product codes and given product types. :param P: Number of product types. :param product_types: List of tuples where each tuple contains a product type and a list of product codes belonging to that type. :param N: Number of product codes in the sequence. :param product_codes: List of product codes to be categorized. :return: List of product types corresponding to the given product codes. # Create a dictionary to map product codes to their respective types code_to_type = {} for product_type, codes in product_types: for code in codes: code_to_type[code] = product_type result = [] for code in product_codes: result.append(code_to_type.get(code, \\"Unknown\\")) return result"},{"question":"Write a function `wordBreak(s, wordDict)` that determines if string `s` can be segmented into one or more words from the provided list `wordDict`. Return `True` if `s` can be segmented, else return `False`. You may assume that the dictionary contains a non-empty list of words. Example: Input: ```python s = \\"leetcode\\" wordDict = [\\"leet\\", \\"code\\"] wordBreak(s, wordDict) ``` Expected Output: ```python True ``` Explanation: The string can be segmented as \\"leet code\\".","solution":"def wordBreak(s, wordDict): Determines if the string s can be segmented into one or more words from wordDict. Parameters: s (str): Input string wordDict (List[str]): List of words Returns: bool: True if s can be segmented, else False word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)]"},{"question":"You are working in a company that handles large data files. As part of an analysis task, you need to process a log file that contains multiple entries. Each entry records the time at which an event occurred in the system. The log file is structured such that each line contains a timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\". Your task is to identify the busiest period (most number of events) within a given minute from the log file. If there are multiple minutes with the same number of events, report the earliest one. -----Input----- The input contains multiple lines, each representing a log entry with a timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\". The input ends with an empty line. -----Output----- Output the busiest minute in the format \\"YYYY-MM-DD HH:MM\\" and the number of events during that minute. -----Example----- Input 2023-03-15 10:01:22 2023-03-15 10:01:45 2023-03-15 10:02:30 2023-03-15 10:01:55 2023-03-15 10:02:00 2023-03-15 10:01:10 Output 2023-03-15 10:01 4","solution":"def find_busiest_minute(log_entries): from collections import defaultdict minute_count = defaultdict(int) for entry in log_entries: if entry.strip(): # Check if the entry is not empty # Extract the minute part (YYYY-MM-DD HH:MM) minute = entry[:16] minute_count[minute] += 1 # Find the busiest minute busiest_minute, max_events = max(minute_count.items(), key=lambda x: x[1]) return busiest_minute, max_events"},{"question":"-----Question----- A supermarket is analyzing its sales data and wants to know the most popular product category on a daily basis. Given a list of sales transactions for a single day, where each transaction includes a product category, you need to determine which category has the highest number of sales for that day. If there is a tie (i.e., multiple categories with the same highest sales count), you should return the lexicographically smaller category. -----Input----- - The number of transactions `T` (1 <= T <= 1000) - A list of `T` product categories (each category is a string with a maximum length of 20) -----Output----- The category with the highest number of sales for the given day. If there is a tie, output the lexicographically smaller category. -----Example----- Input: 6 Dairy Vegetables Dairy Beverages Snacks Vegetables Output: Dairy Explanation: \\"Dairy\\" and \\"Vegetables\\" both have 2 sales. Since \\"Dairy\\" is lexicographically smaller than \\"Vegetables\\", it is chosen as the output. [By: Your Name]","solution":"def most_popular_category(transaction_count, transactions): Returns the most popular product category from given list of transactions. In case of a tie, the lexicographically smaller category is returned. # Dictionary to count the frequency of each category category_count = {} for category in transactions: if category in category_count: category_count[category] += 1 else: category_count[category] = 1 # Determine the category with the highest count max_count = 0 best_category = \\"\\" for category, count in category_count.items(): if count > max_count or (count == max_count and category < best_category): max_count = count best_category = category return best_category"},{"question":"Given a binary tree, you need to perform level order traversal and return the list of node values for each level in a separate list. The root node is at level 0. You should use Breadth-First Search (BFS) to traverse the tree. -----INPUT----- The input consists of multiple lines. The first line contains an integer T denoting the number of test cases. For each test case: - The first line contains an integer N, the number of nodes in the binary tree. - The next line contains N pairs of integers. Each pair describes the value of a node and its parent, respectively. The parent node for the root node will be given as -1. -----OUTPUT----- For each test case, output the level order traversal. Print the node values of each level on a new line. -----CONSTRAINTS----- 1 <= T <= 10 1 <= N <= 1000 1 <= Value of nodes <= 10^5 -----EXAMPLE----- Input: 2 6 1 -1 2 1 3 1 4 2 5 2 6 3 4 10 -1 20 10 30 20 40 10 Output: 1 2 3 4 5 6 10 20 40 30 Explanation: For the first test case, the binary tree is: ``` 1 / 2 3 / / 4 5 6 ``` For the second test case, the binary tree is: ``` 10 / 20 40 | 30 ```","solution":"from collections import defaultdict, deque def level_order_traversal(num_cases, cases): def build_tree(nodes): tree = defaultdict(list) root = None for value, parent in nodes: if parent == -1: root = value else: tree[parent].append(value) return root, tree def bfs_level_order(root, tree): if not root: return [] queue = deque([root]) result = [] while queue: level_nodes = [] for _ in range(len(queue)): node = queue.popleft() level_nodes.append(node) for child in tree[node]: queue.append(child) result.append(level_nodes) return result all_results = [] for nodes in cases: root, tree = build_tree(nodes) levels = bfs_level_order(root, tree) all_results.append(levels) return all_results def process_input_output(input_data): data = input_data.strip().split(\\"n\\") num_cases = int(data.pop(0)) index = 0 cases = [] for _ in range(num_cases): num_nodes = int(data[index]) nodes = [] for i in range(index + 1, index + num_nodes + 1): node_val, parent_val = map(int, data[i].split()) nodes.append((node_val, parent_val)) cases.append(nodes) index += num_nodes + 1 results = level_order_traversal(num_cases, cases) return results def format_output(results): output = [] for levels in results: for level in levels: output.append(\\" \\".join(map(str, level))) return \\"n\\".join(output) input_data = 2 6 1 -1 2 1 3 1 4 2 5 2 6 3 4 10 -1 20 10 30 20 40 10 result = process_input_output(input_data) print(format_output(result))"},{"question":"A palindrome is a word, phrase, or sequence that reads the same backward as forward. For example, \\"madam\\" and \\"racecar\\" are palindromes. You are given a string composed only of lowercase English letters. Your task is to determine the minimal number of character replacements required to transform the string into a palindrome. Each replacement changes a single character at a specific position in the string to another lowercase English letter. Compute the minimal number of replacements required to make the string a palindrome. -----Input----- The first line contains an integer n (1 le n le 100,000), the length of the string. The second line contains a string of length n consisting of only lowercase English letters. -----Output----- Print a single integer, the minimal number of character replacements required to make the string a palindrome. -----Examples----- Input 5 abcca Output 1 Input 6 abccba Output 0 Input 7 racecar Output 0 Input 8 abcdefgh Output 4","solution":"def min_replacements_to_palindrome(n, s): Returns the minimal number of character replacements required to transform the string into a palindrome. Parameters: n (int): Length of the string. s (str): Input string composed of lowercase English letters. Returns: int: Minimal number of replacements. replacements = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: replacements += 1 return replacements"},{"question":"Given a string of words separated by spaces, write a function to reverse the order of words. Do not reverse the individual words themselves. For example: - Given `\\"hello world\\"` your solution should return `\\"world hello\\"` - Given `\\"The quick brown fox\\"` your solution should return `\\"fox brown quick The\\"` You can assume, for the purpose of this kata, that the input string will not be empty and will not contain leading or trailing spaces.","solution":"def reverse_words(s): Reverses the order of words in a given string. Args: s (str): A string of words separated by spaces. Returns: str: A string with the order of words reversed. return \' \'.join(s.split()[::-1])"},{"question":"You are given a grid of size N times M initially filled with zeros. There are K operations to be performed on this grid. Each operation will toggle the cells (i.e., change 0 to 1 or 1 to 0) in a given submatrix defined by its top-left and bottom-right corners. Your task is to determine the final state of the grid after performing all K operations. ------ Input ------ The first line contains three integers N, M, and K — the number of rows, the number of columns, and the number of operations respectively. Each of the next K lines describes an operation with four integers r_1, c_1, r_2, and c_2 — the row and column indices of the top-left corner and the bottom-right corner of the submatrix to be toggled. ------ Output ------ Print the final state of the grid, having N rows and M columns. Each row should be printed on a new line, and columns should be separated by a space. ------ Constraints ------ 1 le N, M le 1000 1 le K le 1000 1 le r_1 le r_2 le N 1 le c_1 le c_2 le M ------ Sample Input ------ 4 4 2 1 1 2 2 2 2 4 4 ------ Sample Output ------ 1 1 0 0 1 0 1 1 0 1 1 1 0 1 1 1","solution":"def toggle_submatrix(n, m, k, operations): grid = [[0] * m for _ in range(n)] for op in operations: r1, c1, r2, c2 = op for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): grid[i][j] = 1 - grid[i][j] return grid def format_grid(grid): return \'n\'.join(\' \'.join(map(str, row)) for row in grid) # Sample inputs n, m, k = 4, 4, 2 operations = [(1, 1, 2, 2), (2, 2, 4, 4)] grid = toggle_submatrix(n, m, k, operations) print(format_grid(grid))"},{"question":"You are given a rectangular grid consisting of cells, each cell containing a value. The grid is represented as a list of lists where each inner list contains integers. For example: ``` grid = [ [1, 3, 6], [5, 8, 2], [7, 4, 9] ] ``` Your task is to write a function that finds the maximum sum path from the top-left cell to the bottom-right cell of the grid. You can only move to the right or down from each cell. For the given grid, the maximum sum path is `1 → 3 → 6 → 8 → 9`, which gives a sum of 27. Write a function `max_sum_path(grid)` that takes a rectangular integer grid as input and returns the maximum sum of any path from the top-left to the bottom-right cell. The function signature is: ```python def max_sum_path(grid: List[List[int]]) -> int: ``` **Constraints:** - The grid will have at least one row and one column. - The values in the grid are integers ranging from -1000 to 1000. - The dimensions of the grid will not exceed 100x100. **Example:** ```python grid = [ [1, 3, 6], [5, 8, 2], [7, 4, 9] ] print(max_sum_path(grid)) # Output: 27 ```","solution":"def max_sum_path(grid): rows = len(grid) cols = len(grid[0]) # Create a 2D dp array initialized to zero dp = [[0] * cols for _ in range(rows)] # Initialize the top-left cell dp[0][0] = grid[0][0] # Fill the first row (since we can only move right) for j in range(1, cols): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (since we can only move down) for i in range(1, rows): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right cell contains the result return dp[rows - 1][cols - 1]"},{"question":"In C Constraints - 1 ≤ n ≤ 100000 - 0 ≤ value ≤ 100000 - 1 ≤ k ≤ n Input n k value1 value2 ... valuen In the first line, you are provided two integers n (the number of elements) and k (the number of rotations) separated by a single space. In the next n lines, you are provided the values for each element. Output Output the array after k rotations to the right. Each number should be printed on a new line. Example Input 5 2 1 2 3 4 5 Output 4 5 1 2 3","solution":"def rotate_array(n, k, values): Rotates the array \'values\' n steps to the right. k = k % n # In case k is larger than n return values[-k:] + values[:-k]"},{"question":"Little Jhool loves decimals and has developed a quirky hobby: he enjoys converting binary numbers to their decimal equivalents. However, considering his busy con-man schedule, he often finds himself short on time to perform these conversions manually. To help him out, write a program that will take a list of binary numbers and output their decimal equivalents. The program should prompt the user to input multiple binary numbers, one per line, and terminate the input with an empty line. For each binary number, your program should output the corresponding decimal value on a new line. # Input Format: - The user will input multiple binary numbers, one per line. - The input terminates when the user enters an empty line. # Output Format: - For each binary number, output the corresponding decimal number on a new line. # Constraints: - The length of each binary number will be no more than 16 characters. - Each binary number is a valid binary number (contains only \'0\' and \'1\'). # Example: Input: ``` 1010 111 10001 ``` Output: ``` 10 7 17 ```","solution":"def binary_to_decimal(binary_list): Converts a list of binary numbers to their decimal equivalents. Parameters: binary_list (list of str): List of binary numbers as strings. Returns: list of int: List of decimal equivalents of the binary numbers. return [int(binary, 2) for binary in binary_list]"},{"question":"A software company develops a collaborative task management tool where users can create, assign, and complete tasks in a shared workspace. Each task has a unique identifier and a list of tags associated with it. The company wants to implement a new feature to analyze the overlap of tags between tasks. Your task is to create a function that identifies the maximum number of tasks sharing at least k common tags from a given list of tasks. Two tasks are considered to share k common tags if they have at least k tags in their tag lists. Input The first line contains two integers n (the number of tasks) and k (the minimum number of common tags required) where 1 ≤ n ≤ 100 and 1 ≤ k ≤ 10. The next n lines each contain a task identifier (a string of alphanumeric characters of length 1 to 10) followed by an integer m (the number of tags associated with the task) and then m space-separated tags (strings of alphanumeric characters of length 1 to 10). Output A single integer indicating the maximum number of tasks sharing at least k common tags. Examples Input 4 2 task1 3 tag1 tag2 tag3 task2 3 tag2 tag3 tag4 task3 2 tag1 tag2 task4 3 tag1 tag4 tag5 Output 3 Input 3 1 task1 2 tag1 tag2 task2 2 tag3 tag4 task3 2 tag2 tag3 Output 2","solution":"def max_tasks_sharing_k_tags(n, k, tasks): from collections import defaultdict def common_tags(tags1, tags2): return len(set(tags1) & set(tags2)) task_tags = [] for task in tasks: task_id, *tags = task.split()[1:] task_tags.append(tags) max_tasks = 0 for i in range(n): count = 1 # Counting the current task itself for j in range(i + 1, n): if common_tags(task_tags[i], task_tags[j]) >= k: count += 1 max_tasks = max(max_tasks, count) return max_tasks # Function usage example: n = 4 k = 2 tasks = [ \\"task1 3 tag1 tag2 tag3\\", \\"task2 3 tag2 tag3 tag4\\", \\"task3 2 tag1 tag2\\", \\"task4 3 tag1 tag4 tag5\\" ] print(max_tasks_sharing_k_tags(n, k, tasks)) # Output: 3"},{"question":"You are given a list of n elements where elements are integers between 1 and 10^9. Your task is to find and print the sum of the maximum and minimum elements in the list for each test case. Input The first line contains an integer T, the number of test cases (1 ≤ T ≤ 10^4). Each test case consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 10^5) representing the number of elements in the list. The second line contains n integers separated by spaces. Output For each test case, output the sum of the maximum and minimum elements in the list on a separate line. SAMPLE INPUT 2 5 1 2 3 4 5 3 10 11 12 SAMPLE OUTPUT 6 22","solution":"def sum_max_min_elements(test_cases): results = [] for case in test_cases: n, elements = case max_element = max(elements) min_element = min(elements) results.append(max_element + min_element) return results # Reading input and preparing test_cases def prepare_test_cases(inputs): index = 0 T = inputs[index] index += 1 test_cases = [] for _ in range(T): n = inputs[index] index += 1 elements = inputs[index] index += 1 test_cases.append((n, elements)) return test_cases def main(inputs): test_cases = prepare_test_cases(inputs) return sum_max_min_elements(test_cases)"},{"question":"A company network consists of n computers connected by network cables. Each cable has a certain data transfer speed, measured in Mbps (Megabits per second). Each computer in the network can be used as a server, where data is collected and processed before being sent to other computers. Due to recent security protocols, every data transfer must pass through a server. Your task is to design an efficient routing algorithm to minimize the maximum data transfer delay between all pairs of computers in the network. The delay between two directly connected computers is equal to the reciprocal of the cable speed multiplied by 1000 (i.e., if a cable has a speed of s Mbps, the delay is 1000/s seconds). You will be provided with the network layout and the data transfer speeds of each cable. Determine the minimum of the maximum delays for data transfer between any pairs of computers in the network. Input The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. For each test case: The first line contains an integer n (2 ≤ n ≤ 100) — the number of computers in the network. The next n-1 lines contain three integers u_i, v_i, s_i (1 ≤ u_i, v_i ≤ n, 1 ≤ s_i ≤ 10000), where u_i and v_i are the computers connected by the i-th cable, and s_i is the speed of the cable. Output For each test case, print a single integer representing the minimum of the maximum delays for data transfer between any pairs of computers in the network in milliseconds. Example Input 2 4 1 2 100 2 3 50 3 4 200 3 1 2 1000 2 3 500 Output 10 2 In the first example, the network layout is as follows: 1 -- 100 -- 2 -- 50 -- 3 -- 200 -- 4 The delays (in milliseconds) are: 1 <-> 2: 10 2 <-> 3: 20 3 <-> 4: 5 The minimum of the maximum delay is 20. In the second example, the network layout is as follows: 1 -- 1000 -- 2 -- 500 -- 3 The delays (in milliseconds) are: 1 <-> 2: 1 2 <-> 3: 2 The minimum of the maximum delay is 2.","solution":"import heapq def minimize_maximum_delay(t, test_cases): def prim_mst(n, edges): adj = [[] for _ in range(n)] for u, v, s in edges: u -= 1 v -= 1 delay = 1000 / s adj[u].append((v, delay)) adj[v].append((u, delay)) in_mst = [False] * n delays = [float(\'inf\')] * n delays[0] = 0 pq = [(0, 0)] max_delay = 0 while pq: current_delay, u = heapq.heappop(pq) if in_mst[u]: continue in_mst[u] = True max_delay = max(max_delay, current_delay) for v, delay in adj[u]: if not in_mst[v] and delay < delays[v]: delays[v] = delay heapq.heappush(pq, (delay, v)) return int(max_delay) results = [] for test_case in test_cases: n, edges = test_case result = prim_mst(n, edges) results.append(result) return results"},{"question":"An elite group of foxes have been trained to transmit messages using a special code language that they invented. This language is composed of a sequence of lowercase English letters. A clever fox, named Fenix, has crafted an algorithm to decipher the message and categorize the distinct substrings in the code. Given a code string s, Fenix wants to find out the number of distinct substrings of `s`. A substring is defined as any contiguous segment of `s`. Input The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 2000) consisting of lowercase English letters. Output For each test case, output the number of distinct substrings in the corresponding string. Examples Input 2 abc aaa Output 6 3 Note In the first test case, the distinct substrings of \\"abc\\" are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". In the second test case, the distinct substrings of \\"aaa\\" are: \\"a\\", \\"aa\\", and \\"aaa\\".","solution":"def distinct_substrings_count(s): Returns the count of distinct substrings of s. substrings = set() # generate all possible substrings for i in range(len(s)): for j in range(i+1, len(s)+1): substrings.add(s[i:j]) return len(substrings) def process_test_cases(t, test_cases): Processes multiple test cases to find the number of distinct substrings for each. :param t: Number of test cases :param test_cases: List of strings for each test case :return: List where each element is the count of distinct substrings of the corresponding test case string results = [] for test_case in test_cases: results.append(distinct_substrings_count(test_case)) return results"},{"question":"You have been hired by a delivery company that transports packages between different waypoints in a city. The company uses a fleet of drones that can carry packages from one waypoint to another autonomously. A drone can carry a package from one waypoint to another if there exists a direct route and the carrying capacity of the drone is sufficient for the weight of the package. Each route has a certain time duration which represents the time taken by a drone to fly from one waypoint to another. The company aims to deliver packages in the minimum time possible. Given the positions of the waypoints, the drone routes between waypoints, the weights of the packages, and the carrying capacity of the drones, determine the minimum time to deliver each package from its source waypoint to its destination waypoint. If a package cannot be delivered, output \\"unreachable\\". -----Input----- The input consists of: - One line with three integers W, R, and P representing the number of waypoints (2 leq W leq 1000), the number of routes (1 leq R leq 2000), and the number of packages (1 leq P leq 100). - R lines each with four integers a, b, c, and t (0 leq a, b < W, 1 leq c leq 1000, 1 leq t leq 1000). Each line describes a route from waypoint a to waypoint b where c is the weight capacity of the drone for this route and t is the time in seconds to travel this route. - P lines each with three integers s, d, and w (0 leq s, d < W, 1 leq w leq 1000). Each line describes a package with source waypoint s, destination waypoint d, and weight w. The waypoints are numbered from 0 to W-1. Each package needs to be delivered from its source to its destination. -----Output----- Output P lines, each containing one integer which is the minimum time in seconds required to deliver each package. If a package cannot be delivered, output \\"unreachable\\" for that package. -----Examples----- Sample Input: 3 3 1 0 1 5 10 1 2 5 15 0 2 2 50 0 2 5 Sample Output: 25","solution":"import heapq import sys def dijkstra(W, adj, start, end, weight): INF = sys.maxsize distances = [INF] * W distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, cost, capacity in adj[current_node]: if weight <= capacity: distance = current_distance + cost if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] def minimum_delivery_times(W, R, P, routes, packages): adj = [[] for _ in range(W)] for a, b, c, t in routes: adj[a].append((b, t, c)) adj[b].append((a, t, c)) # Assuming bidirectional routes results = [] for s, d, w in packages: min_time = dijkstra(W, adj, s, d, w) if min_time == sys.maxsize: results.append(\\"unreachable\\") else: results.append(str(min_time)) return results # Example usage W = 3 R = 3 P = 1 routes = [ (0, 1, 5, 10), (1, 2, 5, 15), (0, 2, 2, 50) ] packages = [ (0, 2, 5) ] result = minimum_delivery_times(W, R, P, routes, packages) for r in result: print(r)"},{"question":"Given a string of numbers representing a binary number, return the decimal value of the number without converting the entire string to an integer. You are only allowed to perform binary operations to calculate the decimal value directly from the binary string. The binary number string will always be non-empty and will consist of only \'0\'s and \'1\'s. Example 1: Input: binary = \\"110\\" Output: 6 Explanation: The binary \\"110\\" equals to 1*2^2 + 1*2^1 + 0*2^0 = 6 Example 2: Input: binary = \\"1001\\" Output: 9 Explanation: The binary \\"1001\\" equals to 1*2^3 + 0*2^2 + 0*2^1 + 1*2^0 = 9 Example 3: Input: binary = \\"1111\\" Output: 15 Explanation: The binary \\"1111\\" equals to 1*2^3 + 1*2^2 + 1*2^1 + 1*2^0 = 15 Note: 1. The input string is a valid binary number and is at most 32 bits long. 2. The output should be an integer.","solution":"def binary_to_decimal(binary): Converts a binary string to its decimal value without using direct conversion functions. decimal_value = 0 base = 1 # represents 2^0 # Iterate over the binary string in reverse for digit in binary[::-1]: if digit == \'1\': decimal_value += base base *= 2 # Move to the next base (2^n) return decimal_value"},{"question":"Given a list of integers nums, return the index of each peak element. A peak element is an element that is strictly greater than its neighbors. If the element is at the boundary of the list, it is only required to be greater than its single neighbor to be considered a peak. Note: You may assume the array contains no duplicates. Example 1: Input: nums = [1, 3, 2, 7, 6, 5] Output: [1, 3] Explanation: Element 3 is greater than its neighbors 1 and 2, and element 7 is greater than its neighbors 2 and 6. Example 2: Input: nums = [11, 15, 13, 21, 18, 20, 17] Output: [1, 3, 5] Explanation: Element 15 is greater than its neighbor 11, element 21 is greater than its neighbors 13 and 18, and element 20 is greater than its neighbors 18 and 17. Your Task: You don\'t need to read input or print anything. Your task is to complete the function peakIndices() which takes a list of integers nums as input and returns a list of indices of peak elements. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(nums) <= 10^5 1 <= nums[i] <= 10^6","solution":"def peakIndices(nums): Returns the indices of peak elements in the list nums. A peak element is one that is greater than its neighbors. n = len(nums) if n == 1: return [0] peaks = [] for i in range(n): if i == 0 and nums[i] > nums[i + 1]: peaks.append(i) elif i == n - 1 and nums[i] > nums[i - 1]: peaks.append(i) elif 0 < i < n - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]: peaks.append(i) return peaks"}]'),F={name:"App",components:{PoemCard:O},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},C={class:"card-container"},j={key:0,class:"empty-state"},R=["disabled"],Y={key:0},z={key:1};function L(s,e,l,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[_,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",C,[(n(!0),i(y,null,w(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",j,' No results found for "'+h(r.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",Y,"See more"))],8,R)):u("",!0)])}const D=d(F,[["render",L],["__scopeId","data-v-7c4f9274"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/28.md","filePath":"deepseek/28.md"}'),M={name:"deepseek/28.md"},W=Object.assign(M,{setup(s){return(e,l)=>(n(),i("div",null,[x(D)]))}});export{B as __pageData,W as default};
