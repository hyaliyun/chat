import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,h,m,r,a){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const A=d(k,[["render",O],["__scopeId","data-v-6beea5f1"]]),Y=JSON.parse('[{"question":"You are given a list of integers representing the daily temperatures for a week and a target temperature. Write a function that will determine the number of days within the week where the temperature was greater than the target temperature. The input contains two parts: a single line with the target temperature, followed by a single line with 7 integers representing the temperatures for each day of the week, separated by spaces. The function should output a single integer representing the number of days where the temperature exceeded the target temperature. # Input - An integer target temperature. - A list of 7 integers separated by a space, representing the temperatures for each day of the week. # Output - An integer representing the number of days with temperatures greater than the target. # Example Input ``` 30 31 29 35 30 28 32 33 ``` Output ``` 4 ``` Note: On days 1, 3, 6, and 7 the temperature is higher than the target temperature of 30. Therefore, the output is 4.","solution":"def count_days_above_target(target, temperatures): Returns the number of days where the temperatures are greater than the target temperature. :param target: int - the target temperature :param temperatures: list of int - temperatures for each day of the week :return: int - the number of days with temperatures greater than the target return sum(1 for temp in temperatures if temp > target)"},{"question":"In a distant land of Matrixia, the inhabitants love to arrange numbers in the form of matrices. One day, a Matrixian named Zeta found a peculiar matrix property they termed as \\"row-column palindrome.\\" A matrix is considered a row-column palindrome if for every element in the matrix, the corresponding element in the transpose of the matrix is the same. Given a square matrix of size n x n (2 ≤ n ≤ 100), determine if the matrix is a row-column palindrome. # Input: - The first line contains a single integer n, representing the size of the matrix. - The next n lines each contain n integers separated by spaces, representing the elements of the matrix. # Output: - Print \\"YES\\" if the matrix is a row-column palindrome. - Print \\"NO\\" otherwise. # Example: Input: ``` 3 1 2 3 2 5 6 3 6 9 ``` Output: ``` YES ``` Input: ``` 2 1 2 3 4 ``` Output: ``` NO ```","solution":"def is_row_column_palindrome(n, matrix): Checks if the given n x n matrix is a row-column palindrome. for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of integers representing the amounts of money in different bank accounts. Each bank account starts with an initial amount and over time a certain number of transactions have been applied to it. Each transaction to a bank account is represented as a pair of integers `(account, amount)`, where `account` is the index of the bank account and `amount` is the value of the transaction (positive for deposits, negative for withdrawals). Each transaction is applied in the order it is given. Your task is to process a series of transactions on the given bank accounts and then answer a series of queries. Each query asks for the current balance of a specific account. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000) - the number of bank accounts. - The second line contains `n` integers representing the initial amounts in the bank accounts. - The third line contains an integer `m` (1 ≤ m ≤ 100,000) - the number of transactions. - The next `m` lines each contain two integers `account` (1 ≤ account ≤ n) and `amount` (-100,000 ≤ amount ≤ 100,000), describing a transaction. - The following line contains an integer `q` (1 ≤ q ≤ 100,000) - the number of queries. - The next `q` lines each contain a single integer `account` (1 ≤ account ≤ n), representing a query for the current balance of the specified account. Output: - For each query, output the current balance of the specified account. Example: Input: ``` 5 100 200 300 400 500 6 1 50 2 -100 3 200 1 -25 5 -300 4 100 3 1 5 4 ``` Output: ``` 125 200 500 ``` Explanation: - Initial balances: [100, 200, 300, 400, 500] - After transactions: - 1 50 => [150, 200, 300, 400, 500] - 2 -100 => [150, 100, 300, 400, 500] - 3 200 => [150, 100, 500, 400, 500] - 1 -25 => [125, 100, 500, 400, 500] - 5 -300 => [125, 100, 500, 400, 200] - 4 100 => [125, 100, 500, 500, 200] - Queries: - 1 => 125 - 5 => 200 - 4 => 500","solution":"def update_and_query_balances(n, initial_balances, m, transactions, q, queries): Updates the balances of bank accounts based on transactions and answers the queries for current balances. :param n: int - Number of bank accounts :param initial_balances: list of int - Initial amounts in each bank account :param m: int - Number of transactions :param transactions: list of tuples (int, int) - Transactions represented by (account, amount) :param q: int - Number of queries :param queries: list of int - Queries for the current balance of specified accounts :return: list of int - Current balances for each query # Applying the transactions for account, amount in transactions: initial_balances[account - 1] += amount # Preparing results for queries results = [initial_balances[account - 1] for account in queries] return results"},{"question":"Mariana is trying to solve a coding puzzle where she needs to determine if she can rearrange the characters of a given string to form a palindrome. A palindrome is a word or phrase that reads the same forward and backward, ignoring spaces, punctuation, and capitalization. Your task is to write a function that takes a single string as input and returns `True` if the string can be rearranged to form a palindrome, and `False` otherwise. The input string will consist of lowercase English letters only, and its length will be between 1 and 10^5. # Input: - A single string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. # Output: - A single boolean value: `True` if the string can be rearranged to form a palindrome, `False` otherwise. # Example: Example 1: Input: \\"civic\\" Output: True Explanation: \\"civic\\" is already a palindrome. Example 2: Input: \\"ivicc\\" Output: True Explanation: \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. Example 3: Input: \\"hello\\" Output: False Explanation: There is no way to rearrange \\"hello\\" to form a palindrome. Example 4: Input: \\"aabbcc\\" Output: True Explanation: \\"aabbcc\\" can be rearranged to \\"abccba\\", which is a palindrome.","solution":"def can_form_palindrome(s): Determines if the characters of the input string can be rearranged to form a palindrome. :param s: Input string consisting of lowercase English letters. :return: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count the frequency of each character in the string. char_count = Counter(s) # To form a palindrome, at most one character can have an odd frequency. odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if there\'s at most one character with an odd count. return odd_count <= 1"},{"question":"You are given an integer array `nums` consisting of `n` elements, and two integers `k` and `t`. Your task is to determine whether there are two distinct indices `i` and `j` in the array such that the absolute difference between `nums[i]` and `nums[j]` is at most `t`, and the absolute difference between `i` and `j` is at most `k`. You have to answer `q` independent test cases. The first line of the input contains one integer `q` (1 le q le 1000) — the number of test cases. Then `q` test cases follow. Each test case starts with a line containing three integers: `n`, `k`, and `t` (1 le n le 10^4, 0 le k le n-1, 0 le t le 10^9) — the number of elements in the array, the maximum index difference, and the maximum value difference, respectively. The next line contains `n` space-separated integers representing the array `nums` (-10^9 le nums[i] le 10^9). For each test case, print `true` if there exist such indices `i` and `j`, and `false` otherwise. # Example Input ``` 2 4 3 0 1 2 3 1 4 2 2 1 5 9 1 ``` Output ``` true false ```","solution":"def contains_nearby_almost_duplicate(nums, k, t): Check if there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t, and the absolute difference between i and j is at most k. if k == 0 or t < 0: return False bucket = {} width = t + 1 for i, num in enumerate(nums): bucket_num = num // width for neighbor in (bucket_num - 1, bucket_num, bucket_num + 1): if neighbor in bucket and abs(num - bucket[neighbor]) < width: return True bucket[bucket_num] = num if i >= k: del bucket[nums[i - k] // width] return False def solve(test_cases): results = [] for n, k, t, nums in test_cases: results.append(contains_nearby_almost_duplicate(nums, k, t)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') q = int(lines[0]) test_cases = [] idx = 1 for _ in range(q): n, k, t = map(int, lines[idx].split()) nums = list(map(int, lines[idx + 1].split())) test_cases.append((n, k, t, nums)) idx += 2 return test_cases"},{"question":"A delivery service is organizing its routes to optimize fuel consumption and delivery time. Each delivery order has a starting and ending address, and each address is represented by an integer on a number line. A route is the path between the starting address and ending address. The delivery service aims to create a consolidated route covering the smallest possible segment of the number line that still includes all addresses in the delivery orders. Your task is to implement a program that calculates the minimal length of this consolidated route. The input consists of a number of delivery orders. For each delivery order, you are given two integers representing the starting and ending addresses. The consolidated route must start at or before the smallest address and end at or after the largest address among all delivery orders. The first line of the input contains a single integer n (1 ≤ n ≤ 100) representing the number of delivery orders. The next n lines each contain two space-separated integers, s and e (1 ≤ s, e ≤ 10^5), representing the starting and ending address of a delivery order. Your program should output the length of the consolidated route, which is calculated as the difference between the largest ending address and the smallest starting address plus one. Example: Input: 4 2 5 4 8 1 3 6 9 Output: 9 Explanation: The smallest starting address is 1 and the largest ending address is 9. Thus, the length of the consolidated route is 9 - 1 + 1 = 9.","solution":"def minimal_consolidated_route_length(n, orders): Calculates the minimal length of the consolidated route. :param n: Number of delivery orders :param orders: List of tuples containing (starting address, ending address) :return: Length of the consolidated route min_start = float(\'inf\') max_end = float(\'-inf\') for start, end in orders: if start < min_start: min_start = start if end > max_end: max_end = end return max_end - min_start + 1 # Example usage orders = [(2, 5), (4, 8), (1, 3), (6, 9)] print(minimal_consolidated_route_length(4, orders)) # Output: 9"},{"question":"John is organizing a coding competition and needs to handle a large number of participant scores efficiently. He needs a program that maintains scores and efficiently handles the following operations: 1. Insert a new score. 2. Remove a specific score. 3. Retrieve the current highest score. 4. Retrieve the current lowest score. Design a data structure that supports the following operations in O(log n) time complexity: 1. **insert(score)**: Insert a new integer score into the data structure. 2. **remove(score)**: Remove a score from the data structure. If the score does not exist, ignore the operation. 3. **get_max()**: Retrieve the highest score currently in the data structure. 4. **get_min()**: Retrieve the lowest score currently in the data structure. The program should process a series of operations and print the output for each query operation. # Input The first line contains a single integer Q (1 ≤ Q ≤ 100,000), representing the number of operations. Each of the next Q lines contains an operation in one of the following formats: - \\"insert X\\" (1 ≤ X ≤ 10^9): Insert the integer X. - \\"remove X\\" (1 ≤ X ≤ 10^9): Remove the integer X. - \\"get_max\\": Retrieve and print the highest score. - \\"get_min\\": Retrieve and print the lowest score. # Output For each \\"get_max\\" and \\"get_min\\" operation, print a single line containing the result. If there are no scores in the structure for a \\"get_max\\" or \\"get_min\\" operation, print \\"Empty\\" instead. # Example Input ``` 10 insert 5 insert 3 insert 10 get_max get_min remove 10 get_max remove 3 get_min remove 5 get_min ``` Output ``` 10 3 5 Empty Empty ```","solution":"import bisect class ScoreManager: def __init__(self): self.scores = [] def insert(self, score): bisect.insort(self.scores, score) def remove(self, score): index = bisect.bisect_left(self.scores, score) if index != len(self.scores) and self.scores[index] == score: self.scores.pop(index) def get_max(self): if self.scores: return self.scores[-1] else: return \\"Empty\\" def get_min(self): if self.scores: return self.scores[0] else: return \\"Empty\\""},{"question":"A group of friends are planning a hiking trip. They have a list of scenic spots they want to visit each day of the trip, but each spot can only be visited once. Every day, they must visit a non-overlapping subset of the spots such that each spot is visited exactly one day. Also, they prefer to minimize the difference in the number of spots visited per day as much as possible. You are tasked to help them plan the trip. You need to divide the spots into groups, one for each day, such that the maximum number of spots visited on any single day minus the minimum number of spots visited on any single day is minimized. The first line of the input contains an integer t (1 le t le 100) — the number of test cases. Then, the test cases follow. The first line of each test case contains two integers n (1 le n le 10^5) — the number of scenic spots to be divided, and d (1 le d le 100) — the number of days for the trip. Output t lines — the minimized difference for each test case. # Input example: ``` 2 10 3 15 4 ``` # Output example: ``` 1 2 ``` # Explanation: For the first test case, the optimal distribution of the spots across the 3 days can be 4, 3, and 3, which leads to a minimized difference of 1 (4 - 3). For the second test case, the optimal distribution of the spots across the 4 days can be 4, 4, 4, and 3, which leads to a minimized difference of 1 (4 - 3). Help the friends plan their hiking trip by optimally distributing the spots with the minimized difference in the number of spots visited each day.","solution":"def minimize_difference(t, test_cases): results = [] for n, d in test_cases: # Base number of spots each day and remainder base, remainder = divmod(n, d) if remainder == 0: results.append(0) else: results.append(1) return results # Example Usage: t = 2 test_cases = [ (10, 3), (15, 4) ] print(minimize_difference(t, test_cases)) # Output: [1, 1]"},{"question":"Design and implement a function that takes an integer array as input, and returns a new array which contains only the prime numbers from the input array, sorted in ascending order. Note that zero and negative numbers should not be considered prime. Your function should have the following signature: ```python def prime_sort(arr: List[int]) -> List[int]: ``` **Example:** ```python prime_sort([2, 4, 3, 1, 7, 0]) -> [2, 3, 7] prime_sort([-1, -2, 16, 17, 9]) -> [17] prime_sort([10, 11, 10, 0, 5]) -> [5, 11] ``` **Guidelines:** - Ensure your solution accurately identifies prime numbers. - Your function should efficiently handle a variety of array sizes. - You can assume the input array has at least one element.","solution":"from typing import List def is_prime(n: int) -> bool: Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True # Special case for 2, which is prime if n % 2 == 0: return False # No even number larger than 2 is prime for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def prime_sort(arr: List[int]) -> List[int]: Returns a new list containing only the prime numbers from the input list, sorted in ascending order. primes = [x for x in arr if is_prime(x)] return sorted(primes)"},{"question":"Implement a function, filter_emails, that takes a list of email addresses and returns only those that follow specific criteria. An email address must consist of a local part, followed by the \\"@\\" symbol, and then a domain part. The local part must contain only alphanumeric characters and periods, but it cannot start or end with a period, and it cannot contain consecutive periods. The domain part must consist of at least two labels separated by periods, each label containing only alphanumeric characters. The top-level domain (the final label) must consist entirely of alphabetic characters and be between 2 to 6 characters long. Function Signature: ```python def filter_emails(emails: List[str]) -> List[str]: ``` # Input - `emails` (List[str]): A list of strings representing email addresses to be validated (1 ≤ len(emails) ≤ 1000). # Output - `List[str]`: A list of valid email addresses from the input list. # Example ```python emails = [\\"example.email@domain.com\\", \\"user@sub.domain.co.uk\\", \\"invalid..email@domain.com\\", \\".leadingdot@domain.com\\", \\"username@domain..com\\", \\"user@domain.c0m\\"] print(filter_emails(emails)) ``` Output: ``` [\\"example.email@domain.com\\", \\"user@sub.domain.co.uk\\"] ``` # Constraints - Each email in the input list will not exceed 256 characters in length. - The validation should be case-insensitive. # Notes The function should: 1. Check that the local part meets all the specified conditions. 2. Ensure the domain part is properly structured with valid labels and a valid top-level domain. 3. Return only the email addresses that precisely meet these criteria.","solution":"import re from typing import List def filter_emails(emails: List[str]) -> List[str]: Returns a list of email addresses that meet the specified criteria. valid_emails = [] for email in emails: if re.fullmatch(r\\"^[a-zA-Z0-9](.?[a-zA-Z0-9])*@[a-zA-Z0-9]+(.[a-zA-Z0-9]+)*.[a-zA-Z]{2,6}\\", email): if \\"..\\" not in email.split(\'@\')[0]: # Ensure no consecutive periods in local part valid_emails.append(email) return valid_emails"},{"question":"You are given two strings, `s` and `t`, composed of lowercase English letters. Your task is to determine if you can transform `s` into `t` using the following operation any number of times: 1. Choose any character from `s` and change it to any other character from the English alphabet. Return `true` if it is possible to transform `s` into `t`, otherwise return `false`. # Input - The input consists of two strings `s` and `t` (1 ≤ |s|, |t| ≤ 10^5). # Output - Print \\"true\\" if it is possible to transform `s` into `t` by performing the operation any number of times, otherwise print \\"false\\". # Examples 1. Input: s = \\"abc\\", t = \\"bca\\" Output: true 2. Input: s = \\"abc\\", t = \\"def\\" Output: true 3. Input: s = \\"abc\\", t = \\"abcd\\" Output: false","solution":"def can_transform(s, t): Determines if string s can be transformed into string t by changing any character in s to any other character from the English alphabet an arbitrary number of times. # If lengths of both the strings are same, we can always transform s to t if len(s) == len(t): return True else: return False"},{"question":"You are given an array of n integers. Each element of the array represents the height of a hill at the corresponding index. Alex loves hiking and playing strategy games. He wants to maximize the enjoyment points he can get by hiking through these hills. For each element `a[i]` that he decides to \\"hike\\", he gets `a[i]` enjoyment points, but he is not allowed to directly hike neighboring hills (i.e., if he hikes hill `a[i]`, he cannot hike `a[i-1]` or `a[i+1]`). Alex wants to maximize his total points while choosing the hills optimally under these conditions. The first line contains integer n (1 ≤ n ≤ 10^5), representing the number of hills. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4), where ai is the height of the hill at index i. Print a single integer — the maximum number of enjoyment points Alex can earn. For instance, consider hills\' heights are [3, 2, 5, 10, 7]: - If Alex hikes hill 3, he can no longer directly hike hills 2 or 5. - The optimal strategy would be to hike hills 3, 10, and then he skips hill 7, leading to the maximum points of 15. You need to devise an algorithm to determine the maximum enjoyment points possible.","solution":"def max_enjoyment_points(hills): Calculates the maximum enjoyment points Alex can earn by hiking hills optimally. n = len(hills) if n == 0: return 0 if n == 1: return hills[0] # dp[i] will store the maximum points Alex can earn considering up to the i-th hill dp = [0] * n dp[0] = hills[0] if n > 1: dp[1] = max(hills[0], hills[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + hills[i]) return dp[-1] def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) hills = list(map(int, data[1:])) print(max_enjoyment_points(hills))"},{"question":"In a far-off kingdom, there exists a magical forest represented as a tree of n nodes. Each node is connected by an edge, and each edge has a certain weight associated with it. Nodes are numbered from 1 to n, and they are connected such that there is exactly one path between any two nodes. The forest is magical because it can change the weights of its edges to meet certain conditions. A magician named Liam can perform two types of operations on the magical forest: 1. Update the weight of an edge connecting nodes u and v to a new weight w. 2. Query the maximum weight among the edges on the simple path between two given nodes x and y. Initially, all edge weights are set to 0. Liam needs your help. Given q operations, your task is to process these operations and provide the result for the query operations. The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of nodes in the tree and the number of operations, respectively. Next, n-1 lines describe the edges of the tree, each line contains three integers u, v, and w (1 ≤ u, v ≤ n, 0 ≤ w ≤ 10^9) — an edge between nodes u and v with initial weight w. The following q lines describe the operations. Each operation is given in one of the two forms: - \\"1 u v w\\": Update the weight of the edge connecting nodes u and v to w (1 ≤ u, v ≤ n, 0 ≤ w ≤ 10^9). - \\"2 x y\\": Query the maximum weight on the path from node x to node y (1 ≤ x, y ≤ n). For each query operation of the second type, output the maximum weight among the edges on the simple path between the nodes x and y. # Input - The first line contains two integers n and q. - The next n−1 lines contain three integers each, u, v, and w, describing the edges of the tree. - The next q lines contain either: - \\"1 u v w\\" indicates an update operation. - \\"2 x y\\" indicates a query operation. # Output - For each query operation \\"2 x y\\", print the maximum weight of the path from node x to node y. # Example Input ``` 5 5 1 2 3 1 3 2 3 4 4 3 5 5 2 1 5 1 1 2 6 2 2 5 1 3 4 1 2 4 5 ``` Output ``` 5 6 5 ```","solution":"from collections import defaultdict, deque class MagicalForest: def __init__(self, n): self.n = n self.graph = defaultdict(list) self.edge_weights = {} self.parent = {} self.max_edge_weight_to_parent = {} def add_edge(self, u, v, w): self.graph[u].append(v) self.graph[v].append(u) self.edge_weights[(u, v)] = w self.edge_weights[(v, u)] = w def set_edge_weight(self, u, v, w): self.edge_weights[(u, v)] = w self.edge_weights[(v, u)] = w def preprocess(self): self._dfs(1, -1, 0) def _dfs(self, node, par, weight): self.parent[node] = par self.max_edge_weight_to_parent[node] = weight for neighbor in self.graph[node]: if neighbor == par: continue self._dfs(neighbor, node, self.edge_weights[(node, neighbor)]) def update_edge(self, u, v, w): self.set_edge_weight(u, v, w) if self.parent[u] == v or self.parent[v] == u: # this is a direct parent-child connection, we need to update max edge weight to parent node_to_update = u if self.parent[u] == v else v self.max_edge_weight_to_parent[node_to_update] = w else: # need to re-preprocess to properly update the tree structure self.preprocess() def query(self, x, y): # Find the path from x to y using BFS and take the max weight on this path path = self._find_path(x, y) max_weight = 0 for u, v in zip(path[:-1], path[1:]): max_weight = max(max_weight, self.edge_weights[(u, v)]) return max_weight def _find_path(self, start, end): visited = set() parent = {} queue = deque([start]) visited.add(start) while queue: node = queue.popleft() if node == end: break for neighbor in self.graph[node]: if neighbor not in visited: visited.add(neighbor) parent[neighbor] = node queue.append(neighbor) # Reconstruct path from \'start\' to \'end\' path = [] step = end while step != start: path.append(step) step = parent[step] path.append(start) path.reverse() return path def process_operations(n, edges, operations): forest = MagicalForest(n) for u, v, w in edges: forest.add_edge(u, v, w) forest.preprocess() results = [] for op in operations: if op[0] == 1: _, u, v, w = op forest.update_edge(u, v, w) elif op[0] == 2: _, x, y = op result = forest.query(x, y) results.append(result) return results"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has a non-negative weight. A Hamiltonian path in a graph is a path that visits each vertex exactly once. An optimal Hamiltonian path is a Hamiltonian path with the smallest possible sum of edge weights. Determine the weight of the optimal Hamiltonian path in the graph. If no Hamiltonian path exists, return -1. The first line contains two integers n and m (1 ≤ n ≤ 15, 0 ≤ m ≤ 105) representing the number of vertices and edges in the graph. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 0 ≤ w ≤ 104) representing an edge between vertices u and v with weight w. Print a single integer — the weight of the optimal Hamiltonian path, or -1 if no Hamiltonian path exists.","solution":"def optimal_hamiltonian_path(n, m, edges): from itertools import permutations if n == 1: return 0 graph = [[float(\'inf\')] * n for _ in range(n)] for u, v, w in edges: u -= 1 v -= 1 graph[u][v] = w graph[v][u] = w def calculate_path_cost(path): cost = 0 for i in range(1, len(path)): if graph[path[i-1]][path[i]] == float(\'inf\'): return float(\'inf\') cost += graph[path[i-1]][path[i]] return cost min_cost = float(\'inf\') for perm in permutations(range(n)): cost = calculate_path_cost(perm) if cost < min_cost: min_cost = cost return min_cost if min_cost != float(\'inf\') else -1"},{"question":"John is managing a warehouse where parcels arrive daily. Each parcel has a unique weight and all parcels can be represented as an array of integers. John wants to redistribute the parcels into two groups such that the absolute difference between the sum of the weights of the two groups is minimized. Write a function that takes an array of integers representing the weights of the parcels and returns the minimum possible absolute difference between the sum of the weights of the two groups. # Input - An integer array weights where 1 ≤ weights.length ≤ 100 and 1 ≤ weights[i] ≤ 1000. # Output - A single integer representing the minimum possible absolute difference between the sum of the weights of the two groups. # Example ```python def find_min_difference(weights): # implementation here # Example usage: weights = [1, 6, 11, 5] print(find_min_difference(weights)) # Output: 1 ``` # Hint Consider using a dynamic programming approach to solve the problem by treating it as a variation of the subset-sum problem.","solution":"def find_min_difference(weights): Returns the minimum possible absolute difference between the sum of the weights of the two groups. total_sum = sum(weights) n = len(weights) # Initialize a boolean DP table where dp[i][j] is True if # a subset with sum j can be formed using the first i elements. dp = [[False] * (total_sum + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum + 1): if j >= weights[i-1]: dp[i][j] = dp[i-1][j] or dp[i-1][j-weights[i-1]] else: dp[i][j] = dp[i-1][j] min_diff = float(\'inf\') for j in range(total_sum // 2 + 1): if dp[n][j]: min_diff = min(min_diff, total_sum - 2 * j) return min_diff"},{"question":"A web-based game allows players to perform a series of operations on strings. Each operation is defined as follows: - `O index k`: Insert the character at position `k` from the alphabet (`O 0` results in `a`, `O 1` results in `b`, ..., `O 25` results in `z`) at the end of the current string. - `R`: Remove the last character from the current string, if the string is not empty. - `P`: Print the current string, or \\"EMPTY\\" if the string is empty. A valid sequence consists of any number of such operations. Implement a function `string_operations(n, operations)` where: - `n` (1 ≤ n ≤ 105) is the number of operations. - `operations` is an array of `n` strings, where each string represents an operation as described above. The function should print the output of all `P` operations in the order they appear in the list of operations. # Example ```python def string_operations(n, operations): # Your code goes here # Example usage: n = 5 operations = [\\"O 0\\", \\"O 1\\", \\"P\\", \\"R\\", \\"P\\"] string_operations(n, operations) ``` Output ``` ab a ```","solution":"def string_operations(n, operations): result = [] current_string = [] for operation in operations: if operation.startswith(\'O\'): index = int(operation.split()[1]) char = chr(97 + index) # 97 is the ASCII value for \'a\' current_string.append(char) elif operation == \'R\': if current_string: current_string.pop() elif operation == \'P\': if current_string: result.append(\'\'.join(current_string)) else: result.append(\\"EMPTY\\") for res in result: print(res)"},{"question":"Given an array of n integers, you are allowed to perform exactly one operation: choose any subarray and increase each element of that subarray by 1. After this operation, the value of the sum of the array is calculated. Your task is to determine the maximum possible sum of the array that can be obtained after performing the operation. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output a single integer — the maximum sum of the array after performing the operation. **Example:** Input: 5 1 2 3 4 5 Output: 20 Explanation: One optimal way to perform the operation is to choose the entire array as the subarray. Incrementing each element by 1 results in the array [2, 3, 4, 5, 6], which sums to 20.","solution":"def max_possible_sum(n, arr): Returns the maximum possible sum of the array after performing the operation. The operation allows increasing each element of one subarray by 1. # Calculate the initial sum of the array initial_sum = sum(arr) # Maximum possible sum is obtained by incrementing all elements of the array # because this will increase the sum by n (length of the array). maximized_sum = initial_sum + n return maximized_sum"},{"question":"Create a function that takes a list of strings representing a paragraph of text and a list of \\"bad\\" words. Your task is to implement a filtering system that replaces every occurrence of a bad word in the provided text with asterisks (*) of the same length as the bad word. Words are case-insensitive but must preserve their original case in the output. For example, if one of the bad words is \\"bad\\", it should replace \\"bad\\", \\"Bad\\", \\"BAD\\", etc., with \\"***\\". The comparison should ignore case, but the replacement must retain the original word\'s case. The paragraph of text can contain punctuation and whitespace. The words are considered sequences of alphabetical characters (a-z, A-Z) only; punctuation marks and spaces are not part of a word, which allows the filtering to handle text like \\"bad!\\" or \\"badly\\". Your function should have the following signature: ```python def filter_text(paragraph: List[str], bad_words: List[str]) -> List[str]: ``` # Example ```python paragraph = [ \\"This is a bad example of a bad sentence.\\", \\"Another bad example: badly written.\\" ] bad_words = [\\"bad\\", \\"example\\"] filtered_text = filter_text(paragraph, bad_words) # Expected output: # [ # \\"This is a *** ******* of a *** sentence.\\", # \\"Another *** *******: ****** written.\\" # ] ```","solution":"from typing import List import re def filter_text(paragraph: List[str], bad_words: List[str]) -> List[str]: def replace_bad_word(match): word = match.group() return \'*\' * len(word) bad_words_regex = re.compile(r\'b(\' + \'|\'.join(map(re.escape, bad_words)) + r\')b\', re.IGNORECASE) filtered_paragraph = [] for line in paragraph: filtered_line = bad_words_regex.sub(replace_bad_word, line) filtered_paragraph.append(filtered_line) return filtered_paragraph"},{"question":"You are given a country with n cities connected by m bidirectional roads. The cities are numbered from 1 to n, and there are exactly m pairs of cities connected by these roads. Due to various political reasons, a road will have a toll, and each road has a different toll fee associated with it. A tourist wants to travel from city 1 to city n as cheaply as possible. Your task is to help the tourist find the minimum total toll fee required to travel from city 1 to city n. If there are multiple such paths with the same minimum toll fee, he should still be able to take one of those paths, but your result only needs to show the minimum fee. The first line contains two integers, n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 500) — the number of cities and the number of roads. The next m lines each contain three integers ai, bi, ci (1 ≤ ai, bi ≤ n, 1 ≤ ci ≤ 1000) — indicating that there is a bidirectional road connecting city ai and city bi with a toll fee of ci. It is possible that there are multiple roads connecting the same pair of cities with different tolls. Print \\"Impossible\\" (without quotes) if there is no way for the tourist to travel from city 1 to city n. Otherwise, print a single integer — the minimum total toll fee required to make the trip from city 1 to city n. Example Input: ``` 5 7 1 2 10 2 3 10 3 4 10 4 5 10 1 3 50 3 5 30 2 5 20 ``` Example Output: ``` 40 ``` In this example, the cheapest way for the tourist to travel from city 1 to city 5 is by taking the path 1 -> 2 -> 5, which has a total toll fee of 10 + 20 = 30.","solution":"import heapq def min_toll_fee(n, m, roads): graph = [[] for _ in range(n + 1)] for a, b, c in roads: graph[a].append((b, c)) graph[b].append((a, c)) # Dijkstra\'s algorithm to find the shortest path in terms of toll fees pq = [(0, 1)] # (cost, city) dist = [float(\'inf\')] * (n + 1) dist[1] = 0 while pq: current_cost, current_city = heapq.heappop(pq) if current_city == n: return current_cost for neighbor, cost in graph[current_city]: new_cost = current_cost + cost if new_cost < dist[neighbor]: dist[neighbor] = new_cost heapq.heappush(pq, (new_cost, neighbor)) return \\"Impossible\\""},{"question":"In a library, there are various sections containing multiple rows of bookshelves. Each bookshelf row is denoted by a string of lowercase letters representing the distinct genres of the books in that row. The goal is to categorize these rows based on the uniqueness of genres in each row. You need to write a function `categorize_genres(rows)` that takes a list of strings `rows` as an input, where each string represents a bookshelf row with distinct genres. Your function should return the number of unique categories of genre combinations and the size of the largest category. Two rows belong to the same category if they contain the same set of genres, regardless of the order of the genres within the rows. # Input Format - A list of strings `rows`, where each string contains only lowercase letters and represents the genres of books in one row. (1 <= len(rows) <= 1000) - Each string (row) has a length between 1 and 100. # Output Format - A tuple `(unique_categories, largest_category_size)` where: - `unique_categories` is the number of unique categories of genre combinations. - `largest_category_size` is the size of the largest category. # Example ```python categorize_genres([\\"abc\\", \\"bca\\", \\"dac\\", \\"xyz\\", \\"yzx\\"]) # Output: (3, 2) categorize_genres([\\"a\\", \\"ab\\", \\"ba\\", \\"abc\\", \\"bac\\"]) # Output: (3, 2) categorize_genres([\\"a\\", \\"b\\", \\"c\\"]) # Output: (3, 1) ``` # Explanation In the first example: - \\"abc\\" and \\"bca\\" belong to the same category since they both have genres {\'a\', \'b\', \'c\'}. - \\"dac\\" belongs to a different category with genres {\'d\', \'a\', \'c\'}. - \\"xyz\\" and \\"yzx\\" belong to the same category with genres {\'x\', \'y\', \'z\'}. Thus, there are 3 unique categories, and the largest category has 2 rows.","solution":"def categorize_genres(rows): Categorizes bookshelf rows based on the uniqueness of genres. Args: rows (list of str): List of strings, where each string represents genres of books in a row. Returns: tuple: A tuple containing the number of unique categories and the size of the largest category. from collections import defaultdict category_map = defaultdict(int) for row in rows: # Represent the row as a sorted tuple genres = tuple(sorted(row)) category_map[genres] += 1 unique_categories = len(category_map) largest_category_size = max(category_map.values()) return unique_categories, largest_category_size"},{"question":"You are given a matrix of characters and a word. Determine if the word exists in the matrix by moving left, right, up, or down starting from any cell. Each cell can only be used once in each path. # Input Format: - The first line contains two integers n and m (1 le n, m le 200) — the dimensions of the matrix. - The following n lines each contain m characters — the matrix. - The last line contains a string word (1 le |word| le 10^5). # Output Format: - Print \\"YES\\" if the word can be found in the matrix, otherwise print \\"NO\\". # Example: Input: ``` 3 4 A B C E S F C S A D E E ABCCED ``` Output: ``` YES ``` Input: ``` 3 4 A B C E S F C S A D E E SEE ``` Output: ``` YES ``` Input: ``` 3 4 A B C E S F C S A D E E ABCB ``` Output: ``` NO ``` # Note: - You can only move horizontally or vertically from each cell. - A cell in the matrix can be used only once in each path to form the word.","solution":"def exist(board, word): n, m = len(board), len(board[0]) def dfs(x, y, index): if index == len(word): return True if x < 0 or x >= n or y < 0 or y >= m or board[x][y] != word[index]: return False temp, board[x][y] = board[x][y], \'#\' found = (dfs(x+1, y, index+1) or dfs(x-1, y, index+1) or dfs(x, y+1, index+1) or dfs(x, y-1, index+1)) board[x][y] = temp return found for i in range(n): for j in range(m): if dfs(i, j, 0): return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of n integers. You have to perform q operations on this list. Each operation can be one of the following three types: 1. **Update**: This operation updates the value at a given position in the list. 2. **Sum**: This operation calculates the sum of all integers in a specified subarray. 3. **Find**: This operation finds the maximum value in a specified subarray. You need to process each operation and output the result of the **Sum** and **Find** operations. # Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of integers in the list and the number of operations to perform. The second line contains n integers — the initial elements of the list. Each of the next q lines describes an operation in the following format: - `1 x v` — Update the value at position x to v (1 ≤ x ≤ n, 1 ≤ v ≤ 10^9). - `2 l r` — Output the sum of elements in the subarray from index l to index r (1 ≤ l ≤ r ≤ n). - `3 l r` — Output the maximum value in the subarray from index l to index r (1 ≤ l ≤ r ≤ n). # Output For each operation of type `2` and `3`, print the result on a new line. # Example Input ``` 5 6 1 2 3 4 5 2 1 5 3 1 5 1 3 10 2 2 4 3 2 4 2 1 5 ``` Output ``` 15 5 16 10 20 ```","solution":"class OperationHandler: def __init__(self, arr): self.arr = arr def update(self, x, v): Update the value at position x to v self.arr[x - 1] = v def sum(self, l, r): Return the sum of elements in the subarray from index l to r return sum(self.arr[l - 1:r]) def find_max(self, l, r): Return the maximum value in the subarray from index l to r return max(self.arr[l - 1:r])"},{"question":"You are given a rectangular grid with lots of lakes and lands. Each cell is represented by either a \'.\' (land) or \'*\' (lake). The lake part can be connected horizontally, vertically, or diagonally. Peter needs to know how many lakes are on the grid. Write a program that takes the dimensions of the grid and the grid itself, and outputs the number of lakes. **Input:** The first line contains two integers n and m (1 <= n, m <= 1000) - the dimensions of the grid. Each of the next n lines contains m characters - the grid representation where \'.\' is land and \'*\' is lake. **Output:** Print a single integer - the number of lakes in the grid. **Example:** **Input:** ``` 4 5 .*... .*..* ..*.. ..*.. ``` **Output:** ``` 2 ``` In the example above, there are two distinct lakes. We can use a flood fill algorithm to count them.","solution":"def count_lakes(n, m, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != \'*\': return grid[x][y] = \'.\' # Mark as visited by changing \'*\' to \'.\' for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]: dfs(x + dx, y + dy) lakes_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'*\': dfs(i, j) lakes_count += 1 return lakes_count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] offset = 2 for i in range(n): grid.append(list(data[offset + i])) print(count_lakes(n, m, grid))"},{"question":"You are given an unsorted array of `n` integers where each integer lies between 1 and `n` (inclusive). One number from the array is missing and one number is duplicated. Your task is to find the missing number and the duplicated number. For example, if the array is [1, 3, 3, 4], the missing number is 2 and the duplicated number is 3. Write a function `findMissingAndDuplicate` that takes in a list of integers and returns the missing and duplicated numbers as a tuple in the form `(missing, duplicate)`. # Input: The input will be a single list of `n` integers, where the elements are between 1 and `n` (inclusive). # Output: The output should be a tuple of two integers, where the first integer is the missing number and the second integer is the duplicated number. # Function Signature: ```python def findMissingAndDuplicate(nums: list) -> tuple: ``` # Example: ```python # Example 1 # Input nums = [1, 2, 2, 4] # Output # (3, 2) print(findMissingAndDuplicate(nums)) # Example 2 # Input nums = [4, 3, 3, 1] # Output # (2, 3) print(findMissingAndDuplicate(nums)) ``` # Constraints: - The list will contain exactly `n` integers. - Each integer in the list is between `1` and `n` (inclusive). - Only one number is duplicated and one number is missing. - The length of the list `n` is at most 10^5.","solution":"def findMissingAndDuplicate(nums: list) -> tuple: Finds the missing and duplicated numbers in the given list. Args: nums: A list of integers where each integer is between 1 and n (inclusive). Returns: A tuple containing (missing_number, duplicated_number). n = len(nums) actual_sum = sum(nums) expected_sum = n * (n + 1) // 2 actual_square_sum = sum(x ** 2 for x in nums) expected_square_sum = sum(x ** 2 for x in range(1, n + 1)) # Let D be duplicated number and M be missing number # We have: D - M = actual_sum - expected_sum # And: D^2 - M^2 = actual_square_sum - expected_square_sum # => (D + M)(D - M) = actual_square_sum - expected_square_sum diff_sum = actual_sum - expected_sum diff_square_sum = actual_square_sum - expected_square_sum sum_dm = diff_square_sum // diff_sum duplicate = (sum_dm + diff_sum) // 2 missing = sum_dm - duplicate return (missing, duplicate)"},{"question":"You are given a sequence of integers. Your task is to determine if you can make all elements of the sequence equal by applying the following operation zero or more times: Select a subsequence of the sequence and increase each of its elements by one. A subsequence is a sequence that can be derived from the original sequence by deleting some (or none) of the elements without changing the order of the remaining elements. For example, if the sequence is [1, 2, 3], one possible subsequence is [1, 3] and another is [2]. The first line of input contains an integer n (1 le n le 10^5) — the number of elements in the sequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the sequence. Output \\"YES\\" (without quotes) if you can make all elements of the sequence equal by applying the operation zero or more times, and \\"NO\\" (without quotes) otherwise. Example: Input: ``` 4 3 3 3 3 ``` Output: ``` YES ``` Input: ``` 4 1 2 3 4 ``` Output: ``` NO ```","solution":"def can_make_elements_equal(sequence): Determine if all elements of the sequence can be made equal by selecting a subsequence and increasing each of its elements by one, zero or more times. Args: sequence (list of int): The sequence of integers. Returns: str: \\"YES\\" if it\'s possible to make all elements equal, otherwise \\"NO\\". # Check the difference between max and min if max(sequence) - min(sequence) > 1: return \\"NO\\" return \\"YES\\""},{"question":"A logistics company needs assignment of deliveries to their drivers. They have `n` drivers and `m` deliveries. Each driver has a weight limit they cannot exceed when carrying deliveries, and each delivery has a specific weight. The goal is to assign each delivery to a driver such that no driver exceeds their weight limit. Given the number of drivers `n` and the number of deliveries `m`, then in the next line, their respective weight limits, followed by the weights of deliveries, your task is to determine if it is possible to assign all the deliveries to drivers without exceeding any individual driver\'s weight limit. The input format is as follows: - The first line contains two integers `n` and `m` (1 ≤ `n`, `m` ≤ 100,000) — the number of drivers and the number of deliveries. - The second line contains `n` integers `w1, w2, ..., wn` (1 ≤ wi ≤ 1,000,000), where `wi` is the weight limit of the i-th driver. - The third line contains `m` integers `p1, p2, ..., pm` (1 ≤ pi ≤ 1,000,000), where `pi` is the weight of the i-th delivery. Output \\"YES\\" if it is possible to assign all deliveries to the drivers without exceeding any driver\'s weight limit. Otherwise, output \\"NO\\". # Example Input ``` 3 4 10 15 10 5 7 3 9 ``` Output ``` YES ``` Explanation: In this case, driver 1 can take the deliveries with weights [5, 3], driver 2 can take the delivery with weight [7], and driver 3 can take the delivery with weight [9]. No driver exceeds their weight limit. Note: The task of assigning deliveries to drivers is feasible given the constraints on the number of drivers, number of deliveries, and the respective weight limits and weights of the deliveries. Consider using efficient algorithms to ensure your solution is optimized for input size constraints.","solution":"def can_assign_deliveries(n, m, driver_limits, delivery_weights): Determines if deliveries can be assigned to drivers without exceeding weight limits. Parameters: n (int): Number of drivers m (int): Number of deliveries driver_limits (List[int]): List of weight limits for each driver delivery_weights (List[int]): List of weights for each delivery Returns: str: \\"YES\\" if it is possible to assign all deliveries to drivers without exceeding any driver\'s weight limit, otherwise \\"NO\\" # Sort driver limits in descending order sorted_driver_limits = sorted(driver_limits, reverse=True) # Sort delivery weights in descending order sorted_delivery_weights = sorted(delivery_weights, reverse=True) if sorted_delivery_weights[0] > sorted_driver_limits[0]: return \\"NO\\" for delivery in sorted_delivery_weights: for i in range(n): if sorted_driver_limits[i] >= delivery: sorted_driver_limits[i] -= delivery break else: return \\"NO\\" return \\"YES\\""},{"question":"You are given an operation that implements a single-qubit unitary transformation: either the X gate or the Y gate (i.e., the X = |0ranglelangle1| + |1ranglelangle0| gate or the Y = i|0ranglelangle1| - i|1ranglelangle0| gate). The operation will have Adjoint and Controlled variants defined. Your task is to perform necessary operations and measurements to figure out which unitary it was and to return 0 if it was the X gate or 1 if it was the Y gate. You are allowed to apply the given operation and its adjoint/controlled variants exactly once. You have to implement an operation which takes a single-qubit operation as an input and returns an integer. Your code should have the following signature:","solution":"import numpy as np def identify_unitary(unitary): Identify the given single-qubit unitary transformation as X or Y gate. Returns 0 if it was the X gate or 1 if it was the Y gate. Args: unitary (function): A function that applies the given unitary operation to a state. Returns: int: 0 if the unitary is X, 1 if the unitary is Y. # Define the |0> and |1> states zero_state = np.array([1, 0], dtype=complex) one_state = np.array([0, 1], dtype=complex) # Apply the unitary to the |0> and |1> states transformed_zero = unitary(zero_state) transformed_one = unitary(one_state) # The X gate swaps |0> and |1> if (np.allclose(transformed_zero, one_state) and np.allclose(transformed_one, zero_state)): return 0 # The Y gate maps |0> to i|1> and |1> to -i|0> i = 1j if (np.allclose(transformed_zero, i * one_state) and np.allclose(transformed_one, -i * zero_state)): return 1 raise ValueError(\\"Unknown unitary operation provided\\")"},{"question":"In a fictional country, there’s a unique tax system. A citizen\'s tax amount is determined by the sum of the digits of their income. For example, if a citizen earns 1234, their tax amount is 1 + 2 + 3 + 4 = 10. This is known as the digit sum tax. The citizens can perform certain operations to legally minimize the digit sum of their income. 1. They can change each digit to any other digit (0-9) except adding zeros as leading digits. Help the citizens determine the minimum possible digit sum of their income after performing any number of these operations. The input contains a single integer N (1 ≤ N ≤ 10^100), representing the citizen\'s current income. Output a single integer — the minimum possible digit sum after performing any number of operations. For example: - If the input is 3456, the output should be 0 because you can change all digits to 0. - If the input is 97, the output should be 1 by changing 9 to 1 and 7 to 0.","solution":"def min_digit_sum_tax(N): Given a citizen\'s income N, returns the minimum digit sum the citizen can achieve by changing digits without adding leading zeros. # Convert the income to a list of digits digits = list(map(int, str(N))) # If the length is 1, return the digit itself if len(digits) == 1: return digits[0] # Return 1, which is achievable by setting one digit to 1 and all others to 0 return 1"},{"question":"Given an array of integers of length `n`, an array of length `m` is created where each element in it is a sum of some elements from the original array. The difference between the maximum and the minimum elements in this `m` length array should be minimized. You are given the length of the initial array `n` (1 ≤ n ≤ 100,000) and the length of the new array `m` (`1 ≤ m ≤ n`). You are also given the original array of integers. Write a program to find the minimum possible difference between the maximum and minimum elements of the resultant array of length `m`. # Input The first line contains two space-separated integers `n` and `m` — the length of the original array and the length of the new array. The second line contains `n` space-separated integers representing the original array. # Output Print a single integer representing the minimum possible difference between the maximum and minimum elements of the new array. # Example **Input:** ``` 5 3 1 3 6 1 3 ``` **Output:** ``` 0 ``` **Note:** For the given example, one possible way to obtain the minimized difference is by using subarrays `[3, 6]`, `[1, 3, 6]`, and `[3, 6, 1]`, creating the sum-array `[9, 10, 10]`, giving a difference of `10 - 9 = 1`. However, by using subarrays `[1, 1]`, `[6, 1]`, and `[1, 1]`, the difference can be `0` as sums are `[2, 7, 2]` which differ just by `0`.","solution":"def min_difference(n, m, arr): Returns the minimum possible difference between the maximum and minimum sums of the new array of length m created from subarrays of the original array. # Sorting the array to simplify finding the sums arr.sort() # Initialize the minimum difference to a large number min_diff = float(\'inf\') # We will try each subarray of length m in the sorted array for i in range(n - m + 1): # Calculate the difference between the maximum and minimum sums in this window current_diff = arr[i + m - 1] - arr[i] # Update the minimum difference found if current_diff < min_diff: min_diff = current_diff return min_diff # Example usage n = 5 m = 3 arr = [1, 3, 6, 1, 3] print(min_difference(n, m, arr))"},{"question":"You are given a sequence of integers, where each integer represents the height of a person in a line of people. The line of people can be represented by an array of integers where each element is a positive integer. Your task is to determine if it is possible to rearrange these people so that no two adjacent people have the same height. If it is possible, return a possible rearrangement of the heights. If it is not possible, return an empty array. # Input - The first line contains an integer n (1 le n le 10^5) — the number of people. - The second line contains n space-separated integers h_1, h_2, ..., h_n (1 le h_i le 10^5) — the heights of the people. # Output - If it is possible to rearrange the heights such that no two adjacent people have the same height, produce a possible rearrangement in a single line. - If it is not possible, output \\"IMPOSSIBLE\\". # Example Input ``` 5 1 1 2 3 3 ``` Output ``` 1 3 1 2 3 ``` Input ``` 3 1 1 1 ``` Output ``` IMPOSSIBLE ```","solution":"from collections import Counter import heapq def rearrange_heights(n, heights): Rearrange the heights such that no two adjacent people have the same height. If not possible, return \\"IMPOSSIBLE\\". count = Counter(heights) max_heap = [(-cnt, height) for height, cnt in count.items()] heapq.heapify(max_heap) if any(-cnt > (n + 1) // 2 for cnt, _ in max_heap): return \\"IMPOSSIBLE\\" result = [] while len(max_heap) >= 2: cnt1, height1 = heapq.heappop(max_heap) cnt2, height2 = heapq.heappop(max_heap) result.extend([height1, height2]) if cnt1 + 1 < 0: heapq.heappush(max_heap, (cnt1 + 1, height1)) if cnt2 + 1 < 0: heapq.heappush(max_heap, (cnt2 + 1, height2)) if max_heap: result.append(max_heap[0][1]) return result"},{"question":"Blake has recently started tracking product sales statistics over multiple periods. For each period p, there are n products, and Blake records the sales of each product as an integer. Over time, Blake wants to determine the average sales for each product across all periods. Help Blake by writing a program to compute the average sales for each product. The first line of the input contains two integers, n and p (1 ≤ n, p ≤ 1000) — the number of products and the number of periods, respectively. The next p lines contain n integers each, representing the sales of the n products in each period. Print n integers — the average sales for each product, rounded down to the nearest integer. **Input:** ``` 4 3 10 20 30 40 15 25 35 45 20 30 40 50 ``` **Output:** ``` 15 25 35 45 ``` **Explanation:** - Product 1: Average sales = (10 + 15 + 20) / 3 = 15 - Product 2: Average sales = (20 + 25 + 30) / 3 = 25 - Product 3: Average sales = (30 + 35 + 40) / 3 = 35 - Product 4: Average sales = (40 + 45 + 50) / 3 = 45","solution":"def compute_average_sales(n, p, sales_data): Computes the average sales for each product across all periods, rounded down to the nearest integer. Parameters: n (int): The number of products. p (int): The number of periods. sales_data (list[list[int]]): The sales data for each product over each period. Returns: list[int]: The average sales for each product, rounded down to the nearest integer. average_sales = [] for product_index in range(n): total_sales = sum(sales_data[period][product_index] for period in range(p)) average_sales.append(total_sales // p) return average_sales # Example usage n = 4 p = 3 sales_data = [ [10, 20, 30, 40], [15, 25, 35, 45], [20, 30, 40, 50] ] result = compute_average_sales(n, p, sales_data) print(result) # Output: [15, 25, 35, 45]"},{"question":"A number of students are attending a workshop where they need to perform different tasks in a given order. Their performance is tracked based on their completion time for each task. Each student is identified by a unique ID, and each task they complete is registered with the completion time. Given a list of n tasks (1 ≤ n ≤ 100,000) and m students (1 ≤ m ≤ 100,000), where each task has a unique id and each student has a unique id, write a program to determine the average completion time for each task across all students. Each student will complete all tasks in the given order, and the input provides the completion time for each task by each student. The input consists of the following: - The first line contains two integers, n and m, the number of tasks and the number of students respectively. - The next m lines each contain n integers, representing the completion times of the tasks for one student. Output the average completion time for each task in the order provided, rounded to two decimal places. Input: The first line contains two integers n and m, the number of tasks and students respectively. The next m lines each contain n integers representing the completion times for each task by one student. Output: Output n space-separated floating-point numbers, where the i-th number is the average completion time for the i-th task, rounded to two decimal places. Example: Input: 4 3 5 8 3 4 6 7 2 5 4 5 3 1 Output: 5.00 6.67 2.67 3.33 Constraints: - 1 ≤ n ≤ 100,000 - 1 ≤ m ≤ 100,000 - Completion times are non-negative integers and do not exceed 1,000,000. Write the function to solve the problem.","solution":"def average_completion_times(n, m, completion_times): Calculate the average completion time for each task. Args: n (int): Number of tasks. m (int): Number of students. completion_times (list of list of int): A list of lists where each inner list represents the completion times of tasks by one student. Returns: list of float: A list of average completion times for each task, rounded to two decimal places. # Initialize a list to store the sum of completion times for each task sum_times = [0] * n # Iterate over each student\'s completion times for student_times in completion_times: for i in range(n): sum_times[i] += student_times[i] # Calculate the average completion time for each task average_times = [round(sum_time / m, 2) for sum_time in sum_times] return average_times"},{"question":"You are given a rooted tree with `n` nodes, where each node `i` has an integer value `a[i]` associated with it. Initially, all nodes are colored white. You need to perform the following operation exactly `k` times: select a white node and color it black. Note that once a node is colored black, you cannot change its color again. After all `k` operations, the score of the tree is defined as the sum of the values of the white nodes. Your task is to determine the maximum score possible after performing exactly `k` operations. # Input - The first line contains two integers `n` and `k` (1 ≤ `n` ≤ 100, 0 ≤ `k` ≤ `n`). - The second line contains `n` integers `a[i]`, where `a[i]` (1 ≤ `a[i]` ≤ 1000) is the value of the `i-th` node. - The next `n - 1` lines contain two integers `u` and `v` (1 ≤ `u, v` ≤ `n`), denoting that there is an edge between node `u` and node `v`. # Output - Print a single integer, the maximum score possible after performing exactly `k` operations. # Example Input ``` 5 2 3 2 7 1 5 1 2 1 3 3 4 3 5 ``` Output ``` 15 ``` # Explanation By coloring the nodes with values 1 and 2 black, we can retain the maximum values in the tree nodes. Therefore, the maximum score is calculated as the sum of remaining values (3 + 7 + 5) = 15.","solution":"def max_score(n, k, values, edges): # Sort the values to determine which nodes to color black. sorted_values = sorted(values) # The idea is to color the nodes with the smallest k values black. white_values = sorted_values[k:] # Calculate the sum of remaining white nodes\' values max_possible_score = sum(white_values) return max_possible_score"},{"question":"You are given a string consisting of lowercase English letters. A \\"good\\" substring is defined as a substring in which no letter occurs more than once. Your task is to find the length of the longest good substring which appears in the original string. The first line of the input contains an integer n (1 le n le 10^5) — the length of the string. The second line of the input contains a string of length n consisting of lowercase English letters. Print one integer — the length of the longest good substring in the given string. In the first example, the input string is \\"abcabcbb\\", the longest good substring is \\"abc\\" with length 3. In the second example, the input string is \\"bbbbb\\", the longest good substring is \\"b\\" with length 1.","solution":"def length_of_longest_good_substring(s): Returns the length of the longest substrings where no character repeats. n = len(s) char_set = set() left = 0 longest = 0 for right in range(n): # Move the left pointer to the right to remove duplicate characters while s[right] in char_set: char_set.remove(s[left]) left += 1 # Add the current character to the set char_set.add(s[right]) # Update the length of longest good substring longest = max(longest, right - left + 1) return longest"},{"question":"You are given a list of integers representing the heights of a group of students standing in a line. Your task is to find the minimum number of students that need to be removed so that the remaining students\' heights are all strictly increasing. # Input - The first line contains an integer n (1 leq n leq 2 times 10^5), the number of students. - The second line contains n space-separated integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9), representing the heights of the students. # Output - Output a single integer, the minimum number of students to remove. # Example Input ``` 8 5 1 3 4 2 6 1 7 ``` Output ``` 3 ``` # Explanation Removing the students with heights 5, 1, and 2 results in the remaining list [3, 4, 6, 7], which is strictly increasing. # Notes You may use any standard algorithm to find the solution, such as Dynamic Programming or a combination of it with Binary Search to optimize the performance for larger inputs.","solution":"import bisect def min_removals_to_make_increasing(heights): Returns the minimum number of students to remove to make the heights strictly increasing. if not heights: return 0 # Helper to find LIS using binary search. def lis_length(seq): lis = [] for height in seq: pos = bisect.bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height return len(lis) n = len(heights) lis_len = lis_length(heights) return n - lis_len"},{"question":"You are given an array of integers and a target integer. Your task is to find a triplet in the array whose sum is closest to the target. Return the sum of the triplet. You may assume that each input would have exactly one solution. # Input - The first line contains an integer `t` (1 leq t leq 100) — the number of test cases. - Each test case consists of two lines: - The first line contains two integers `n` (3 leq n leq 1000) and `target` (-10^5 leq target leq 10^5), where `n` is the size of the array and `target` is the target sum. - The second line contains `n` integers (-10^5 leq text{array}[i] leq 10^5) representing the elements of the array. # Output - For each test case, print a single integer — the sum of the triplet that is closest to the target. # Example Input ``` 2 4 1 -1 2 1 -4 5 0 0 2 1 -3 2 ``` Output ``` 2 0 ``` # Note In the first test case, the triplet [-1, 2, 1] has the sum closest to 1, which is 2. In the second test case, the triplet [0, 1, -3] has the sum closest to 0, which is 0.","solution":"def find_closest_triplet_sum(arr, target): arr.sort() closest_sum = float(\'inf\') for i in range(len(arr) - 2): left, right = i + 1, len(arr) - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if abs(target - current_sum) < abs(target - closest_sum): closest_sum = current_sum if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: # If current_sum is exactly equal to target, we found the closest possible return current_sum return closest_sum def process_test_cases(test_cases): results = [] for n, target, arr in test_cases: results.append(find_closest_triplet_sum(arr, target)) return results"},{"question":"You are the manager of a warehouse and you have been tasked with streamlining the inventory system. You are given a list of items along with their masses and a set of storage units, each with a maximum weight capacity. Your goal is to determine whether it is possible to store all items in the storage units without exceeding their capacities, and if possible, how to distribute the items. Each item can only go into one storage unit, and all items need to be stored. The first line contains two integers n and m (1 leq n, m leq 1000) — the number of items and the number of storage units. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000) — the masses of the items. The third line contains m integers c_1, c_2, ldots, c_m (1 leq c_i leq 1000) — the maximum capacities of the storage units. Output \\"YES\\" if it is possible to distribute all items among the storage units without exceeding their capacities, followed by the allocation of items to storage units (represented by indices). If it is not possible, output \\"NO\\". Example: ``` Input: 4 3 2 3 2 5 5 5 5 Output: YES 1 2 3 4 ```","solution":"def can_store_items(n, m, item_masses, unit_capacities): Determines if items can be stored without exceeding the capacity of the storage units. :param n: Number of items :param m: Number of storage units :param item_masses: List of masses of the items :param unit_capacities: List of capacities of the storage units :return: \\"YES\\" followed by the distribution of items if possible, otherwise \\"NO\\" # Initialize storage unit remaining capacity remaining_capacity = unit_capacities[:] # Result list to store which items go into which unit result = [[] for _ in range(m)] # Sort both items and storage units items = sorted([(mass, i) for i, mass in enumerate(item_masses)], reverse=True) units = sorted([(capacity, i) for i, capacity in enumerate(unit_capacities)], reverse=True) for mass, item_index in items: placed = False for capacity, unit_index in units: if remaining_capacity[unit_index] >= mass: remaining_capacity[unit_index] -= mass result[unit_index].append(item_index + 1) # Store 1-based index placed = True break if not placed: return \\"NO\\" output = \\"YESn\\" for storage in result: output += \\" \\".join(map(str, storage)) + \\"n\\" return output.strip()"},{"question":"You are given a list of distinct integers. You want to determine whether it is possible to rearrange these integers such that no two adjacent integers in the new arrangement have a common factor greater than 1. The first line contains an integer n (2 leq n leq 100) – the number of integers in the list. The second line contains n distinct integers, a_1, a_2, ldots, a_n (1 leq a_i leq 10^6). Print \\"YES\\" if it is possible to rearrange the integers accordingly, otherwise print \\"NO\\". **Example:** Input: 4 6 10 15 25 Output: YES Input: 3 4 6 8 Output: NO","solution":"from math import gcd from functools import reduce def can_rearrange(arr): Determine if it\'s possible to rearrange the integers such that no two adjacent integers in the new arrangement have a common factor greater than 1. n = len(arr) def gcd_of_list(lst): return reduce(gcd, lst) if gcd_of_list(arr) == 1: return \\"YES\\" else: return \\"NO\\" # Example usage: # result = can_rearrange([6, 10, 15, 25]) # print(result) # Output should be \\"YES\\""},{"question":"Morgan is participating in a robotics competition and must instruct his robot to navigate a grid of size n x m. The robot can move either up, down, left, or right, but it cannot go through obstacles. The goal is to reach the bottom-right corner of the grid starting from the top-left corner. Some cells are blocked by obstacles. The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the grid. The following n lines each contain m characters, representing the grid. The character \'.\' indicates an empty cell, and the character \'#\' denotes an obstacle. Write a program to determine the minimum number of moves the robot needs to reach the bottom-right corner from the top-left corner. If it is not possible to reach the corner, print -1. Input: ``` n m grid[0] grid[1] ... grid[n-1] ``` Output: Print the minimum number of moves required, or -1 if it\'s impossible. Example: ``` Input: 4 4 . . . # # # . . . . . # . # . . Output: 6 ```","solution":"from collections import deque def min_moves(n, m, grid): Returns the minimum number of moves required for the robot to reach the bottom-right corner from the top-left corner on the given grid, or -1 if it is impossible. if grid[0][0] == \'#\' or grid[n - 1][m - 1] == \'#\': return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 0)]) # queue of (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() if row == n - 1 and col == m - 1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and grid[new_row][new_col] == \'.\': visited.add((new_row, new_col)) queue.append((new_row, new_col, steps + 1)) return -1"},{"question":"You are given a list of integers and you need to find out whether all the elements of the list can be rearranged to form a consecutive sequence. A consecutive sequence is a sequence in which each number appears exactly once and each number has a difference of one from the next number. The only line of input contains a list of integers separated by spaces. The length of the list is between 1 and 100, inclusive. Each integer in the list will be between 1 and 100, inclusive. Output \\"YES\\" if the list can be rearranged to form a consecutive sequence, and \\"NO\\" otherwise (quotes for clarity only).","solution":"def can_form_consecutive_sequence(numbers): Returns \'YES\' if the list can be rearranged to form a consecutive sequence, and \'NO\' otherwise. sorted_numbers = sorted(numbers) for i in range(len(sorted_numbers) - 1): if sorted_numbers[i+1] != sorted_numbers[i] + 1: return \'NO\' return \'YES\'"},{"question":"You are given an array of integers `arr` of length `n` (1 ≤ n ≤ 100,000). You need to process `q` queries. Each query is described by integers `l` and `r` (1 ≤ l ≤ r ≤ n). For each query, you have to return the product of all elements in the subarray `arr[l:r]` modulo `1000000007`. The first line contains two integers `n` and `q`, where `n` is the number of elements in the array and `q` is the number of queries. The second line contains `n` integers representing the array `arr`. The next `q` lines contain the queries, each defined by two integers `l` and `r`. Output `q` lines, each containing the result of the corresponding query. For example: Input: ``` 5 3 1 2 3 4 5 1 3 2 5 3 3 ``` Output: ``` 6 120 3 ``` Explanation: 1. The product of the subarray `[1, 2, 3]` is `6`. 2. The product of the subarray `[2, 3, 4, 5]` is `120`. 3. The subarray `[3]` contains only `3`, so the product is `3`.","solution":"MOD = 1000000007 def preprocess(arr): n = len(arr) prefix_prod = [1] * (n + 1) for i in range(1, n + 1): prefix_prod[i] = (prefix_prod[i - 1] * arr[i - 1]) % MOD return prefix_prod def product_query(prefix_prod, l, r): if l == 1: return prefix_prod[r] return (prefix_prod[r] * pow(prefix_prod[l - 1], MOD - 2, MOD)) % MOD def process_queries(n, q, array, queries): result = [] prefix_prod = preprocess(array) for l, r in queries: result.append(product_query(prefix_prod, l, r)) return result"},{"question":"Given an array of n integers, return a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. Try to achieve this in O(n) time complexity without using division. # Input - The first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the array. - The second line contains n space-separated integers a1, a2, ..., an, where each integer is between -1000 and 1000. # Output - Output a single line containing n space-separated integers which represents the new array as described above. # Example Input ``` 4 1 2 3 4 ``` Output ``` 24 12 8 6 ``` # Explanation For the given input [1, 2, 3, 4]: - The product array is calculated as follows: - For index 0: product = 2 * 3 * 4 = 24 - For index 1: product = 1 * 3 * 4 = 12 - For index 2: product = 1 * 2 * 4 = 8 - For index 3: product = 1 * 2 * 3 = 6","solution":"def product_except_self(nums): Given an array nums, returns a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. This solution achieves O(n) time complexity without using division. n = len(nums) if n == 0: return [] # Initialize the resultant array with 1s result = [1] * n # Temporary variable to store the product of elements to the left of the current element left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Temporary variable to store the product of elements to the right of the current element right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result # Example usage: # nums = [1, 2, 3, 4] # print(product_except_self(nums)) # Output: [24, 12, 8, 6]"},{"question":"Bianca is fascinated by sequences and their properties. She recently learned about a sequence transformation function g(s). For an input sequence of integers s = [s_1, s_2, dots, s_m], the function g(s) produces a new sequence where each element is the sum of its adjacent elements in the original sequence. Formally, for a sequence s, the transformed sequence t = g(s) is defined as: [ t_i = s_i + s_{i+1} quad text{for} quad 1 le i < m ] For example, given the sequence s = [4, 1, 8, 3], the transformed sequence t = g(s) is: [ t = [4+1, 1+8, 8+3] = [5, 9, 11] ] Bianca wants to continue transforming the sequence until it is reduced to a single integer. Your task is to write a program that repeatedly applies the transformation function g to an initial sequence until only one integer remains. The first line of the input contains an integer m (2 le m leq 100), the length of the sequence s. The second line contains m space-separated integers s_1, s_2, ldots, s_m (1 le s_i le 10^3), representing the initial sequence. Output a single integer, the result of repeatedly applying the transformation g until the sequence is reduced to one element. In the first testcase, given the sequence [4, 1, 8, 3]: - The first transformation produces [5, 9, 11] - The second transformation produces [14, 20] - The third transformation produces [34] Thus, the output is 34.","solution":"def sequence_transformation(m, sequence): Repeatedly applies the transformation function g to the sequence until it is reduced to a single integer. Parameters: m (int): The length of the sequence. sequence (list): The initial sequence of integers. Returns: int: The single integer result after repeatedly applying the transformation. while len(sequence) > 1: sequence = [sequence[i] + sequence[i + 1] for i in range(len(sequence) - 1)] return sequence[0]"},{"question":"A group of friends is planning a trip and they have a list of cities they want to visit. Each city has certain attractions, and the friends have different preferences for the types of attractions they want to prioritize in their trip. The road network between the cities can be represented as a weighted undirected graph. Each edge has a weight representing the travel time between two cities. The friends want to start their trip from a specific city and visit all the cities exactly once before returning to the starting city, such that the total travel time is minimized. Additionally, they should try to prioritize visiting cities with attractions higher on their priority list earlier in the trip if there are multiple possible paths with the same travel time. Your task is to help the friends plan their trip. If there are multiple optimal trips with the same travel time, choose the one that visits the higher priority attractions earlier. You are given: 1. An integer `n` representing the number of cities. 2. An integer `m` representing the number of roads. 3. The next `m` lines each contain three integers `u`, `v`, and `w`, denoting a road between city `u` and city `v` with a travel time `w`. 4. An integer `s` representing the starting city. 5. An array of n integers representing the priority score of attractions in each city (the i-th integer is the priority score of city i+1). Output the sequence of cities in the order they should be visited, starting and ending with the starting city `s`, such that the total travel time is minimized and cities with higher priority attractions are visited earlier if there are ties. # Sample Input ``` 5 7 1 2 10 1 3 15 2 4 25 2 5 35 3 4 20 3 5 30 4 5 10 1 5 3 8 10 6 ``` # Sample Output ``` 1 2 4 5 3 1 ``` *Note: This output assumes an optimal solution both in terms of travel time and attraction prioritization. Adjust your planning strategy to prioritize both aspects accordingly.*","solution":"import heapq def plan_trip(n, m, roads, s, priority_scores): # Step 1: Build graph representation from collections import defaultdict import heapq graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Step 2: Implement nearest neighbor TSP heuristic with priority attraction def tsp_with_priorities(start, n): visited = set() path = [] total_cost = 0 def visit(city): visited.add(city) path.append(city) visit(start) while len(visited) < n: last_city = path[-1] min_heap = [] for neighbor, travel_time in graph[last_city]: if neighbor not in visited: heapq.heappush(min_heap, (travel_time, -priority_scores[neighbor - 1], neighbor)) if not min_heap: break min_time, neg_priority, next_city = heapq.heappop(min_heap) total_cost += min_time visit(next_city) path.append(start) # Return to start to complete the cycle return path return tsp_with_priorities(s, n)"},{"question":"A gardener is planning to plant a new garden. The garden is represented as a 2D grid of size m x n, where each cell can either be empty or contain a rock. The gardener wants to place water sources such that every empty cell in the garden can receive water from at least one of these sources. Water can only flow to the North, South, East, and West directions from a water source. The objective is to determine the minimum number of water sources needed to ensure that all empty cells can receive water. The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the garden grid. The next m lines contain n characters each, representing the garden grid. A \'.\' denotes an empty cell, and a \'#\' denotes a cell with a rock. Output a single integer — the minimum number of water sources needed. **Input:** ``` 3 4 .... .#.. .... ``` **Output:** ``` 1 ``` **Explanation:** By placing a water source in the middle empty cell of the second row, all empty cells in the garden grid can be covered. Therefore, at least 1 water source is needed.","solution":"def min_water_sources(m, n, garden_grid): def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if 0 <= cx < m and 0 <= cy < n and garden_grid[cx][cy] == \'.\': garden_grid[cx][cy] = \'#\' stack.extend([(cx - 1, cy), (cx + 1, cy), (cx, cy - 1), (cx, cy + 1)]) water_sources = 0 for i in range(m): for j in range(n): if garden_grid[i][j] == \'.\': water_sources += 1 dfs(i, j) return water_sources"},{"question":"Construct an algorithm in Python to find all unique substrings of a given length k from a string s. Input: - The first line contains an integer k (1 ≤ k ≤ 10) — the length of substrings to find. - The second line contains a string s of length n (1 ≤ n ≤ 100), consisting only of lowercase English letters. Output: - Output all unique substrings of length k in lexicographical order, each on a new line. Note that substrings must be contiguous segments from the given string but need to be unique in appearance. Example: ``` Input: 3 abcdefe Output: abc bcd cde def efe ```","solution":"def find_unique_substrings(k, s): Finds all unique substrings of length k in string s and returns them in lexicographical order. :param k: Length of substrings :param s: Input string :return: List of unique substrings in lexicographical order unique_substrings = set() for i in range(len(s) - k + 1): substring = s[i:i+k] unique_substrings.add(substring) return sorted(unique_substrings) # Example input k = 3 s = \\"abcdefe\\" print(find_unique_substrings(k, s))"},{"question":"In a distant galaxy, there exists a game which involves a unique deck of cards. Each card has an integer printed on it. Players are given a task to rearrange the deck in a specific manner. The deck undergoes a series of operations defined by the following rule: - You are given a deck of `n` cards, each with a unique integer value from `1` to `n`. - Initially, the deck is in ascending order from `1` to `n`. - Perform exactly `m` operations where in each operation you pick the card with the smallest number and place it on top of the deck. Note that in each operation you have to pick the smallest available card from the remaining sequence. Your task is to find out the order of the deck after performing these operations. # Input: The first line contains two integers `n` and `m` (1 ≤ n ≤ 10^5, 1 ≤ m ≤ n), representing the number of cards and the number of operations respectively. # Output: Output a single line containing `n` space-separated integers representing the order of the deck after performing the `m` operations. # Example: Input ``` 5 3 ``` Output ``` 1 2 3 4 5 ``` Input ``` 4 2 ``` Output ``` 1 2 3 4 ``` # Note: For the first example, the smallest card is already on top so the order doesn\'t change. Therefore, the output is the initial sequence. For the second example, after two operations, the smallest cards are still on top in their original order.","solution":"def rearrange_deck(n, m): Returns the order of the deck after the given operations. Parameters: n (int): The number of cards. m (int): The number of operations. Returns: List[int]: The order of the deck after performing the operations. # The initial order is always 1 to n in ascending order deck = list(range(1, n+1)) # No other change is needed as the operations do not alter the order for this specific task return deck"},{"question":"Alice is planning to design a new board game. The board is represented as a grid of size n times n. Some cells of the board are blocked, meaning that players cannot move to these cells. Alice wants to ensure that there is a path from the top-left cell (1, 1) to the bottom-right cell (n, n). You are given a grid of size n times n where each cell is either free or blocked. You need to determine if there is a valid path from the top-left cell to the bottom-right cell. A valid path can only be formed by moving to adjacent cells (horizontally or vertically) and cannot pass through blocked cells. The first line of the input contains an integer n (1 le n le 100) — the size of the board. The next n lines contain n characters each (\'#\' for a blocked cell and \'.\' for a free cell). Output \\"YES\\" if there is a valid path from the top-left cell to the bottom-right cell. Otherwise, output \\"NO\\". **Example:** **Input:** ``` 4 ...# .#.. ..#. ..#. ``` **Output:** ``` YES ``` **Input:** ``` 4 #. #. ``` **Output:** ``` NO ```","solution":"def is_valid_path(grid, n): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= n or grid[x][y] == \'#\' or visited[x][y]: return False if x == n-1 and y == n-1: return True visited[x][y] = True # Move right, left, down, up if (dfs(x+1, y) or dfs(x-1, y) or dfs(x, y+1) or dfs(x, y-1)): return True return False visited = [[False] * n for _ in range(n)] if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return \\"NO\\" return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Jonny is an avid treasure hunter. He\'s just found a unique treasure chest, but to unlock it, he needs to solve a series of puzzles. Each lock in the chest is controlled by a sequence of numbers, and Jonny needs to find a \\"special arithmetic sequence\\" in these series to unlock each lock. For a sequence to be considered a \\"special arithmetic sequence,\\" it must have: 1. At least two distinct integers. 2. A constant difference between consecutive elements. 3. All elements must be distinct. Given a sequence of distinct integers, help Jonny determine whether it can be rearranged into a \\"special arithmetic sequence\\" and, if possible, provide one possible rearranged sequence. The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n distinct integers b1, b2, ..., bn (-10^9 ≤ bi ≤ 10^9) — the elements of the sequence. Print -1 if it is not possible to rearrange the elements of the sequence into a special arithmetic sequence. Otherwise, print the rearranged sequence with the constant difference. If there are multiple answers, print any of them. **Example:** Input: ``` 5 10 30 20 50 40 ``` Output: ``` 10 20 30 40 50 ```","solution":"def find_special_arithmetic_sequence(n, sequence): Determines whether a given sequence of distinct integers can be rearranged into a \\"special arithmetic sequence\\". The sequence must have at least two distinct integers, a constant difference between elements, and all elements must be distinct. Parameters: n (int): The length of the sequence. sequence (list of int): The list of distinct integers. Returns: list of int or int: A rearranged sequence that forms a special arithmetic sequence if possible, otherwise return -1. if n == 1: return -1 sequence.sort() diff = sequence[1] - sequence[0] for i in range(2, n): if sequence[i] - sequence[i-1] != diff: return -1 return sequence"},{"question":"An expedition team is exploring Mystery Island. They have decided to set up temporary camps at various locations on the island. The island has n locations, numbered from 1 to n, and m bidirectional trails connecting these locations. Initially, the trails are not built. The trails are built one by one. The i-th trail connects the locations with numbers ai and bi. To assess the security of their setup, the expedition team is interested in knowing the number of distinct groups of camps that are isolated from other groups after the construction of each new trail. A group is defined as a set of locations that are mutually reachable through the available trails. Given the number of locations and the sequence of trails, for each trail construction step, determine the number of distinct groups of camps. The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5). They represent the number of locations and the number of trails correspondingly. Then on m lines follows the description of the trails in the order in which they were built. Each trail is described by a pair of integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi). Print m lines: the i-th line should represent the number of distinct groups of camps after the end of the construction of the i-th trail. # Example Input: ``` 5 4 1 2 2 3 4 5 3 4 ``` Output: ``` 4 3 2 1 ``` # Explanation: Initially, each location is a separate group: - After building the trail 1-2, locations 1 and 2 form a group, so there are 4 groups remaining. - After building the trail 2-3, locations 1, 2, and 3 form a group, so there are 3 groups remaining. - After building the trail 4-5, locations 4 and 5 form a group, so there are 2 groups remaining. - After building the trail 3-4, all locations form a single group, so there is 1 group remaining.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n self.count = n def find(self, p): if self.parent[p] != p: self.parent[p] = self.find(self.parent[p]) return self.parent[p] def union(self, p, q): rootP = self.find(p) rootQ = self.find(q) if rootP != rootQ: if self.rank[rootP] > self.rank[rootQ]: self.parent[rootQ] = rootP elif self.rank[rootP] < self.rank[rootQ]: self.parent[rootP] = rootQ else: self.parent[rootQ] = rootP self.rank[rootP] += 1 self.count -= 1 def get_count(self): return self.count def count_groups(n, m, trails): uf = UnionFind(n) result = [] for a, b in trails: uf.union(a - 1, b - 1) # convert 1-based index to 0-based result.append(uf.get_count()) return result"},{"question":"A scientist is studying the migration patterns of a specific species of bird. He has data on the daily distances traveled by n birds over a period of m days. Help the scientist analyze this data by identifying the maximum distance traveled in a single day by any bird, as well as the total distance traveled by each bird over the entire period. You need to write a program that receives multiple test cases. For each test case, process the birds\' travel data and output two results: 1. The maximum distance traveled in a single day by any bird. 2. The total distance traveled by each bird over the entire period. The input format is as follows: * The first line contains a single integer t — the number of test cases (1 ≤ t ≤ 10). * For each test case: - The first line contains two integers n and m — the number of birds and the number of days (1 ≤ n, m ≤ 1000). - The next n lines each contain m integers representing the distances traveled by each bird on each day. For each test case, output two lines: 1. The maximum distance traveled in a single day by any bird. 2. A single line containing n integers representing the total distance traveled by each bird over all m days. Example: Input: ``` 2 3 3 4 2 3 1 3 5 2 2 4 2 4 5 1 1 4 3 2 1 2 ``` Output: ``` 5 9 9 8 5 11 8 ``` Explanation: In the first test case, the maximum distance traveled in a single day by any bird is 5 (by the second bird on the third day). The total distances traveled by the birds are 9, 9, and 8, respectively. In the second test case, the maximum distance traveled in a single day by any bird is 5 (by the first bird on the first day). The total distances traveled by the birds are 11 and 8, respectively.","solution":"def analyze_bird_migration(test_cases): Analyzes bird migration patterns given multiple test cases. For each test case, returns: 1. The maximum distance traveled in a single day by any bird. 2. The total distance traveled by each bird over the entire period. results = [] for case in test_cases: n, m, distances = case[\'n\'], case[\'m\'], case[\'distances\'] max_distance = 0 total_distances = [] for bird in distances: max_distance = max(max_distance, max(bird)) total_distances.append(sum(bird)) results.append((max_distance, total_distances)) return results"},{"question":"You are required to develop a program that simulates a bank system, which can keep track of bank accounts and operations performed on them. There are three types of operations: \\"deposit\\", \\"withdraw\\", and \\"balance query\\". Below is the detailed specification of each operation: - **Deposit**: This operation deposits a certain amount of money into a specific account. - **Withdraw**: This operation withdraws a certain amount of money from a specific account. If the account does not have enough balance, the operation should not be performed, and the account balance should remain unchanged. - **Balance Query**: This operation queries and returns the current balance of a specific account. The initial balance for all accounts is 0. Each operation is provided through a command line input. The input consists of multiple operations, each in a separate line. The format for each operation is as follows: - `deposit account_id amount`: where account_id is an integer (0 ≤ account_id ≤ 106) and amount is a positive integer. This operation adds the specified amount to the balance of account_id. - `withdraw account_id amount`: where account_id is an integer (0 ≤ account_id ≤ 106) and amount is a positive integer. This operation subtracts the specified amount from the balance of account_id if the account has enough balance. - `query account_id`: where account_id is an integer (0 ≤ account_id ≤ 106). This operation outputs the current balance of account_id. Write a program that reads the input operations from the standard input, processes them accordingly, and prints the output for each balance query operation. **Example Input:** ``` deposit 1 100 deposit 2 500 withdraw 1 50 query 1 query 2 withdraw 2 300 query 2 withdraw 2 300 query 2 ``` **Example Output:** ``` 50 500 200 200 ```","solution":"class BankSystem: def __init__(self): self.accounts = {} def deposit(self, account_id, amount): if account_id not in self.accounts: self.accounts[account_id] = 0 self.accounts[account_id] += amount def withdraw(self, account_id, amount): if account_id in self.accounts and self.accounts[account_id] >= amount: self.accounts[account_id] -= amount def query(self, account_id): return self.accounts.get(account_id, 0) def process_operations(operations): bank_system = BankSystem() results = [] for operation in operations: parts = operation.strip().split() if parts[0] == \\"deposit\\": bank_system.deposit(int(parts[1]), int(parts[2])) elif parts[0] == \\"withdraw\\": bank_system.withdraw(int(parts[1]), int(parts[2])) elif parts[0] == \\"query\\": results.append(bank_system.query(int(parts[1]))) return results"},{"question":"Bob is a botanist studying a unique type of plant with an unusual growth pattern. The plant is represented as a binary tree where each node corresponds to a part of the plant. Each node has a value representing the number of days since that part of the plant started growing. Bob wants to understand how balanced the growth is by comparing the average age of the left and right subtrees of the plant\'s root. Write a program that computes the average number of days of the left and right subtrees of the root node and determines whether they are balanced. Two subtrees are considered balanced if the difference between their average ages is at most 1. If a subtree is empty, its average age is considered to be 0. Input: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of nodes in the tree. The following n lines each contain three integers v, l, and r (0 ≤ v ≤ 1000, 0 ≤ l, r ≤ n) — representing a node with value v, and indexes of the left (l) and right (r) children (0 if there is no child). The integer 1 always represents the index of the root node. Output: Print \\"Balanced\\" (without quotes) if the average ages of the left and right subtrees are balanced, and \\"Not Balanced\\" (without quotes) otherwise. Example: Input: 5 1 2 3 2 4 0 3 0 5 4 0 0 5 0 0 Output: Balanced Explanation: Here, the tree is: 1 (0 days) / 2 (1) 3 (2) / 4 (3) 5 (2) The left subtree of the root has nodes 2 and 4 with average age (1+3)/2 = 2. The right subtree of the root has nodes 3 and 5 with average age (2+2)/2 = 2. The difference is 0, which is <= 1, so the tree is balanced.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes): if not nodes: return None n = len(nodes) node_dict = {i: TreeNode(val=nodes[i-1][0]) for i in range(1, n+1)} for i in range(1, n+1): val, l, r = nodes[i-1] node_dict[i].left = node_dict.get(l, None) node_dict[i].right = node_dict.get(r, None) return node_dict[1] def subtree_info(node): if not node: return (0, 0) left_sum, left_count = subtree_info(node.left) right_sum, right_count = subtree_info(node.right) current_sum = node.val + left_sum + right_sum current_count = 1 + left_count + right_count return (current_sum, current_count) def average_subtree(node): total_sum, total_count = subtree_info(node) if total_count == 0: return 0 return total_sum / total_count def check_balanced(tree_nodes): root = build_tree(tree_nodes) if not root: return \\"Balanced\\" left_average = average_subtree(root.left) right_average = average_subtree(root.right) if abs(left_average - right_average) <= 1: return \\"Balanced\\" else: return \\"Not Balanced\\" def plant_balance(n, nodes): return check_balanced(nodes)"},{"question":"You are given a collection of words and a list of forbidden substrings. A forbidden substring is a substring that must not appear in any of the given words. For each word in the collection, determine if it is valid based on the following condition: a word is valid if none of the forbidden substrings are found as parts of the word. You need to check and print the validity of each word in the collection. The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of words in the collection. The second line contains an integer m (1 ≤ m ≤ 50) — the number of forbidden substrings. The third line contains n words separated by a space. The fourth line contains m forbidden substrings separated by a space. Output n lines — for each word in the collection, print \\"valid\\" if the word is valid, otherwise print \\"invalid\\". Example: Input: 4 2 apple banana orange peach ba or Output: invalid invalid invalid valid","solution":"def check_validity(n, m, words, forbidden_substrings): results = [] for word in words: is_valid = True for substring in forbidden_substrings: if substring in word: is_valid = False break if is_valid: results.append(\\"valid\\") else: results.append(\\"invalid\\") return results # Example usage: # n = 4 # m = 2 # words = [\\"apple\\", \\"banana\\", \\"orange\\", \\"peach\\"] # forbidden_substrings = [\\"ba\\", \\"or\\"] # print(check_validity(n, m, words, forbidden_substrings))"},{"question":"You are tasked with developing an algorithm to manage reservations for a small hotel. The hotel has a policy that no two guests can be assigned the same room on the same night. Your job is to check if a given list of reservations is valid according to this policy. Each reservation consists of a room number and a date range for the stay. You need to determine if any two reservations overlap for the same room. Input: - The first line contains an integer n, the number of reservations (1 ≤ n ≤ 100). - The next n lines each contain a reservation in the format: ``` room_number start_date end_date ``` where: - room_number is a positive integer. - start_date and end_date are in the format YYYY-MM-DD. - The start_date is inclusive and the end_date is exclusive. Output: - Print \\"VALID\\" (without quotes) if no two reservations overlap for the same room. - Print \\"INVALID\\" (without quotes) if there is at least one pair of overlapping reservations for the same room. Example: ``` 4 101 2023-01-01 2023-01-05 101 2023-01-05 2023-01-10 102 2023-01-03 2023-01-08 101 2023-01-04 2023-01-06 ``` Output: ``` INVALID ```","solution":"from datetime import datetime def is_valid_reservation(n, reservations): Determines if a list of reservations is valid. Parameters: n (int): number of reservations reservations (list of tuples): each tuple contains (room_number, start_date, end_date) Returns: str: \\"VALID\\" if no reservations overlap for the same room, \\"INVALID\\" otherwise. # Create a dictionary to store reservations by room number room_reservations = {} for reservation in reservations: room_number, start_date, end_date = reservation # Convert dates to datetime objects start_date = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_date = datetime.strptime(end_date, \\"%Y-%m-%d\\") # Initialize the list for the room number if it doesn\'t exist if room_number not in room_reservations: room_reservations[room_number] = [] # Check for overlap with existing bookings in the same room for existing_start, existing_end in room_reservations[room_number]: if not (end_date <= existing_start or start_date >= existing_end): return \\"INVALID\\" # Add the current reservation to the room reservations room_reservations[room_number].append((start_date, end_date)) return \\"VALID\\""},{"question":"You are given an array of n integers representing the heights of trees in a forest. You need to cut down a certain number of trees such that the height difference between the tallest remaining tree and the shortest remaining tree does not exceed a given limit m. Calculate the maximum number of trees that can be left standing while ensuring that the height difference condition is met. The first line contains the integer t (1 le t le 100) — the number of test cases. The first line of each test case contains two integers n and m (1 le n le 10^4, 0 le m le 10^9) — the number of trees and the maximum allowed height difference respectively. The second line of each test case contains n integers h_1, h_2, dots , h_n (1 le h_i le 10^9), where h_i is the height of the i-th tree. For each test case, print a single integer — the maximum number of trees that can be left standing while satisfying the height difference condition.","solution":"def max_trees_left(t, test_cases): results = [] for case in test_cases: n, m, heights = case heights.sort() max_trees = 0 for i in range(n): for j in range(i, n): if heights[j] - heights[i] <= m: max_trees = max(max_trees, j - i + 1) results.append(max_trees) return results # Example usage: t = 1 test_cases = [ (5, 4, [1, 2, 8, 4, 9]) ] print(max_trees_left(t, test_cases)) # Output: [3]"},{"question":"A company has an office building with n floors numbered from 1 to n. Each floor has several rooms numbered sequentially starting from 1. There is exactly one elevator in the building which can stop at any floor. The rooms on each floor are arranged in such a way that room number i on floor number f has a unique identifier. Employees need to transport boxes between different rooms on different floors. They can use the elevator to change floors but want to minimize the total distance traveled. The distance traveled includes moving from one room to another on the same floor or changing floors using the elevator. Moving between two rooms on the same floor takes a distance of absolute difference of their numbers (|i - j|), and changing floors using the elevator takes a distance equal to the absolute difference in floor numbers multiplied by a constant factor m (|f1 - f2| * m) where f1 and f2 represent the starting and ending floor numbers, respectively. You are given the starting and destination room numbers and floor numbers for a series of box transfers. Your task is to determine the minimum total distance required to complete all transfers. The input starts with an integer n (1 leq n leq 100) representing the number of floors, an integer m (1 leq m leq 100) representing the floor change multiplier, and an integer q (1 leq q leq 1000) representing the number of box transfers. The next q lines each contain four integers: f1, r1, f2, and r2 representing the starting floor, starting room, destination floor, and destination room of a box transfer respectively. Output a single integer, the minimum total distance required to complete all transfers. Example input: ``` 3 5 2 1 2 2 3 3 4 1 1 ``` Example output: ``` 15 ```","solution":"def min_total_distance(n, m, q, transfers): Calculate the minimum total distance required to complete all transfers. Parameters: n (int): Number of floors m (int): Floor change multiplier q (int): Number of box transfers transfers (list of tuples): Each tuple contains (f1, r1, f2, r2) representing a transfer Returns: int: Minimum total distance required total_distance = 0 for f1, r1, f2, r2 in transfers: room_distance = abs(r1 - r2) floor_distance = abs(f1 - f2) * m total_distance += room_distance + floor_distance return total_distance"},{"question":"You are given a string consisting of lowercase alphabets, and you are required to transform it into a \\"distinct-character\\" string. A \\"distinct-character\\" string is a string where no characters are repeated. You can perform the following operation any number of times (including zero): - Pick any two characters and swap their positions in the string. You need to determine the minimum number of operations needed to transform the given string into the \\"distinct-character\\" string. If it is not possible to transform the string, return -1. The first line of input contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 100), consisting of lowercase alphabets only. For each test case, print the minimum number of swaps needed to make the string a \\"distinct-character\\" string. If it is not possible, print -1. **Sample Input:** ``` 2 abc aabb ``` **Sample Output:** ``` 0 -1 ```","solution":"def min_swaps_to_distinct(s): Returns the minimum number of swaps to transform a string into a \\"distinct-character\\" string, or -1 if it is not possible. from collections import Counter # Count frequencies of each character freq = Counter(s) # If any character appears more than once, it\'s not possible to make it a distinct-character string if any(value > 1 for value in freq.values()): return -1 return 0 def solve(test_cases): results = [] for s in test_cases: results.append(min_swaps_to_distinct(s)) return results"},{"question":"You are given an n x m grid consisting of only \'A\' and \'B\'. You can perform the following operations on it: - Change a cell from \'A\' to \'B\' or from \'B\' to \'A\'. Your task is to determine the minimum number of operations required to make all rows of the grid identical. The first line contains two integers n (1 ≤ n ≤ 50) and m (1 ≤ m ≤ 50), the number of rows and columns of the grid. The next n lines contain m characters each (\'A\' or \'B\') representing the grid. Your output should be a single integer: the minimum number of operations required. In the first sample, all rows are already identical, so no operations are needed. In the second sample, you can change: The second row from \\"BB\\" to \\"AA\\" (using 2 operations) or The first row from \\"AA\\" to \\"BB\\" (using 2 operations), therefore the minimum number of operations required is 2.","solution":"def min_operations_to_identical_rows(n, m, grid): def calc_changes(row1, row2): return sum(r1 != r2 for r1, r2 in zip(row1, row2)) min_operations = float(\'inf\') for target_row in grid: current_operations = sum(calc_changes(target_row, row) for row in grid) min_operations = min(min_operations, current_operations) return min_operations"},{"question":"In a certain city, after a heavy snowstorm, the streets need to be cleared for traffic. The city is represented as a grid of size n x n. Each cell in the grid is either empty (denoted by \'.\') or has an obstruction of snow (denoted by \'#\'). A snow plow can clear an entire row or column in one pass. For each pass, it will clear all the obstructions in that row or column, replacing all \'#\' with \'.\'. Given the layout of the city represented by the grid, your task is to determine the minimum number of passes required to clear all the obstructions of snow from the streets. Input: - The first line contains an integer n (1 ≤ n ≤ 100) — the size of the grid. - The next n lines contain n characters each (\'.\' or \'#\'), describing the grid. Output: - Print a single integer, the minimum number of passes required to clear all the obstructions of snow. Example: Input: 4 .#.. ..#. .. .#.. Output: 3 Explanation: - One possible solution is to clear the first row (clears the obstruction at position (1,2)). - Then clear the second row (clears the obstruction at position (2,3)). - Finally, clear the third column (clears obstructions at positions (3,1) and (4,1)).","solution":"def min_snow_clearing_passes(n, grid): row_clear = [False] * n col_clear = [False] * n for r in range(n): for c in range(n): if grid[r][c] == \'#\': row_clear[r] = True col_clear[c] = True row_passes = sum(row_clear) col_passes = sum(col_clear) return min(row_passes, col_passes) # Example usage: # n = 4 # grid = [ # \\".#..\\", # \\"..#.\\", # \\"..\\", # \\".#..\\" # ] # print(min_snow_clearing_passes(n, grid)) # Output: 3"},{"question":"You are given an array of integers representing the scores of participants in a coding competition. Your task is to determine the highest score that can be achieved by any participant after excluding at most one score from the array. The first line of input contains an integer n (2 le n le 100,000) — the number of participants. The second line contains n integers — the scores of the participants, where each score is between 0 and 10^6 inclusive. Your task is to write a program that outputs the highest possible score that can be achieved by any participant after removing at most one score from the array. # Example Input ``` 5 3 7 5 6 2 ``` Output ``` 24 ``` Explanation In the example, the scores are [3, 7, 5, 6, 2]. The sum of all scores is 23. If we choose to exclude the score 2, the sum of the remaining scores is 21, so 22 will be the highest achievable score.","solution":"def highest_possible_score(n, scores): Returns the highest possible score by excluding at most one score from the list. # Calculate the sum of all scores total_score = sum(scores) # Find the minimum score in the list min_score = min(scores) # The highest possible score is obtained by removing the minimum score from the total return total_score - min_score"},{"question":"Given an array of integers, find the maximum possible sum of elements of a non-empty subsequence such that the greatest common divisor (GCD) of the elements in the subsequence is equal to 1. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, if the array is [3, 6, 2, 7, 5], then [3, 5], [6, 7], and [2, 7, 5] are some subsequences of the array. The first line contains a single integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^4) — the elements of the array. Print a single integer — the maximum possible sum of a non-empty subsequence whose elements have a GCD of 1. If no such subsequence exists, print -1. # Examples Example 1: Input: ``` 5 3 6 2 7 5 ``` Output: ``` 18 ``` Example 2: Input: ``` 3 4 6 8 ``` Output: ``` -1 ``` Example 3: Input: ``` 4 1 2 3 4 ``` Output: ``` 10 ``` # Explanation For the first example, the subsequence [3, 7, 5] has a GCD of 1 and the sum is 15. For the second example, there is no subsequence of the array whose elements have a GCD of 1, hence the output is -1. For the third example, the subsequence [1, 2, 3, 4] has a GCD of 1 and the sum is 10.","solution":"from math import gcd from functools import reduce def max_sum_subsequence_with_gcd_one(array): def find_gcd_of_list(lst): return reduce(gcd, lst) # Check if the GCD of the entire array is 1 if find_gcd_of_list(array) == 1: return sum(array) else: return -1"},{"question":"Given a list of integers, determine if there exists a pair of distinct indices ( (i, j) ) such that the sum of the elements at these indices equals a given target value. If such a pair exists, return the indices; otherwise, return an indication that no such pair exists. The function should return a list of two integers representing the indices of the elements that add up to the target value, or an empty list if no such pair is found. # Function Signature ```python def find_pair_with_sum(nums: List[int], target: int) -> List[int]: ``` # Input - `nums` (List[int]): A list of integers. - `target` (int): The target sum we are looking for. # Output - List[int]: A list of two integers representing the indices of the elements that add up to the target value, or an empty list if no such pair exists. # Example Example 1: ```python nums = [2, 7, 11, 15] target = 9 ``` **Output**: ```python [0, 1] ``` **Explanation**: The numbers at indices 0 and 1 (2 + 7) add up to the target value 9. Example 2: ```python nums = [3, 2, 4] target = 6 ``` **Output**: ```python [1, 2] ``` **Explanation**: The numbers at indices 1 and 2 (2 + 4) add up to the target value 6. Example 3: ```python nums = [3, 3] target = 6 ``` **Output**: ```python [0, 1] ``` **Explanation**: The numbers at indices 0 and 1 (3 + 3) add up to the target value 6. # Constraints - Each input list contains at least two elements. - Each input list contains at most 10^4 elements. - The target value is a valid integer within the range -10^9 to 10^9.","solution":"from typing import List def find_pair_with_sum(nums: List[int], target: int) -> List[int]: Returns a list of two integers representing the indices of the elements that add up to the target value, or an empty list if no such pair is found. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Given a string and a list of words, you need to determine if you can create the given string by concatenating some of the words (possibly with repetition). Write a function `can_construct` that receives a string `target` and a list of strings `word_bank`, and returns `True` if you can construct the `target` string using the words from `word_bank`, otherwise it returns `False`. Each word in `word_bank` can be used multiple times in the concatenations. You can use dynamic programming to optimize the solution. # Function Signature `def can_construct(target: str, word_bank: List[str]) -> bool:` # Input - `target`: A string (1 ≤ len(target) ≤ 30). - `word_bank`: A list of strings (1 ≤ len(word_bank) ≤ 50). # Output - Returns `True` if you can construct the `target` string using the words from `word_bank`. Otherwise, returns `False`. # Example Example 1 ```python target = \\"abcdef\\" word_bank = [\\"ab\\", \\"abc\\", \\"cd\\", \\"def\\", \\"abcd\\"] can_construct(target, word_bank) # Returns: True ``` Explanation: - We can construct the string \\"abcdef\\" by concatenating \\"abc\\" + \\"def\\". Example 2 ```python target = \\"skateboard\\" word_bank = [\\"bo\\", \\"rd\\", \\"ate\\", \\"t\\", \\"ska\\", \\"sk\\", \\"boar\\"] can_construct(target, word_bank) # Returns: False ``` Explanation: - We cannot construct the string \\"skateboard\\" from the given word bank. # Notes You may want to utilize memoization to ensure your approach is efficient enough to handle the given input constraints.","solution":"from typing import List def can_construct(target: str, word_bank: List[str]) -> bool: Determines if target can be constructed by concatenating words in word_bank. memo = {} def can_construct_memo(target): if target in memo: return memo[target] if target == \\"\\": return True for word in word_bank: if target.startswith(word): suffix = target[len(word):] if can_construct_memo(suffix): memo[target] = True return True memo[target] = False return False return can_construct_memo(target)"},{"question":"A pharmaceutical company is testing a new treatment for a disease and they need to predict the total number of patients who will be treated in the next day, based on the treatment data from the previous days. The company collects the number of patients treated per day as an integer. The company has observed that the number of patients treated per day either follows a geometric progression or remains constant. If the number of patients treated for the last n days forms a geometric progression, then the number of patients treated the next day (n + 1)-th day will be the next term of this geometric progression. Otherwise, if the number of patients treated does not follow a geometric progression, the number of patients treated on the (n + 1)-th day will be the same as the number of patients treated on the n-th day. Your task is to predict the number of patients who will be treated on the (n + 1)-th day based on the given data for the last n days. The first line contains a single integer n (2 ≤ n ≤ 100) — the number of days for which the number of treated patients is known. The second line contains a sequence of integers p1, p2, ..., pn (1 ≤ pi ≤ 1000) — where pi is the number of patients treated on the i-th day. Print the predicted number of treated patients on the (n + 1)-th day according to the company\'s observation method. In the first example the sequence of treated patients is a geometric progression where the first term is 2 and each term is double the previous one. So the predicted number of treated patients for the fifth day is 8 * 2 = 16. In the second example the sequence of treated patients is a geometric progression where the first term is 3 and each term remains constant. So the predicted number of treated patients in the third day is 3. In the third example the number of treated patients do not form a geometric progression, so the number of treated patients on the fourth day equals to the number of treated patients on the third day and equals to 50. In the fourth example the sequence of treated patients is a geometric progression where the first term is 5 and each following term triples. So the predicted number of treated patients in the third day is 15 * 3 = 45.","solution":"def predict_patients(n, patients): Predicts the number of patients treated on the (n+1)-th day based on the data from the last n days. The number of patients treated follows a geometric progression or remains constant. :param n: int - Number of days for which the number of treated patients is known. :param patients: List[int] - List of integers where each integer represents the number of patients treated on the i-th day. :return: int - Predicted number of treated patients on the (n+1)-th day. # Check if it is a geometric progression if n == 2 or all(patients[i] * patients[1] == patients[i + 1] * patients[0] for i in range(1, n - 1)): ratio = patients[1] // patients[0] return patients[-1] * ratio else: return patients[-1]"},{"question":"You are given an integer array `nums` sorted in non-decreasing order. Your task is to determine the number of unique elements in the array after removing all duplicates in-place. After removing the duplicates, the unique elements should still be in non-decreasing order and must occupy the initial positions of the original array. You should also return the length of the array after removing duplicates. # Example Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: length = 5, nums = [0,1,2,3,4,_,_,_,_,_] Note: - The underscores (_) indicate elements beyond the new length, which you should ignore. # Constraints - 1 <= nums.length <= 3 * 10^4 - -10^4 <= nums[i] <= 10^4 # Function Signature ```python def remove_duplicates(nums: List[int]) -> int: # Write your code here ``` # Explanation You must implement the function `remove_duplicates(nums: List[int]) -> int` that removes duplicates in-place and returns the length of the array after duplicates have been removed.","solution":"def remove_duplicates(nums): Removes duplicates in-place from a sorted list and returns the length of the array after duplicates have been removed. Args: nums (List[int]): A list of integers sorted in non-decreasing order. Returns: int: The length of the array after removing duplicates. if not nums: return 0 write_index = 1 # Start writing from the second position for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Emma wants to design a rectangular garden and partition it into square plots such that each plot is as large as possible. Given the length and width of the garden, calculate the size of the side of the largest possible square plot that can be used to partition the entire garden without any leftover area. Write a function `largest_square_plot` that takes two integers, `length` and `width`, as input and returns the integer side length of the largest square plot. # Function Signature ```python def largest_square_plot(length: int, width: int) -> int: ``` # Input - An integer `length` (1 ≤ length ≤ 10^9), represents the length of the garden. - An integer `width` (1 ≤ width ≤ 10^9), represents the width of the garden. # Output - Return the side length of the largest possible square plot. # Example ```python assert largest_square_plot(15, 20) == 5 assert largest_square_plot(14, 28) == 14 ``` # Explanation In the first example, a 15x20 rectangular garden can be partitioned into 3x5 square plots of side length 5, which is the largest possible square size without any leftover area. In the second example, the garden is already twice as wide as it is long, so the largest possible square size is equal to the shorter side, which is 14. The goal is to find the greatest common divisor (GCD) of the two provided lengths, as this will ensure both dimensions of the garden can be fully partitioned into square plots of the largest possible size without remainder.","solution":"def largest_square_plot(length: int, width: int) -> int: Calculates the side length of the largest possible square plot that can be used to partition the entire rectangular garden without any leftover area. Args: length (int): The length of the garden. width (int): The width of the garden. Returns: int: The side length of the largest possible square plot. import math return math.gcd(length, width)"},{"question":"There are n distinct points on a two-dimensional plane. Let\'s number the points with integers from 1 to n. The coordinates of the i-th point are given by (xi, yi). Your task is to determine if there exists a rectangle whose sides are parallel to the coordinate axes and whose corners are some of these n points. The first line contains one integer n (4 ≤ n ≤ 50). Each of the next n lines contains two integers xi and yi (0 ≤ xi, yi ≤ 109) describing the coordinates of the i-th point. Print \\"YES\\" if such a rectangle exists. Otherwise, print \\"NO\\". Example Input: 4 0 0 0 1 1 0 1 1 Example Output: YES Example Input: 4 0 0 0 2 2 0 2 2 Example Output: YES Example Input: 5 0 0 1 2 2 2 1 3 3 1 Example Output: NO","solution":"def check_rectangle_exists(n, points): Determines if there is a rectangle whose sides are parallel to the coordinate axes formed by some of the given points. Parameters: n (int): Number of points (4 to 50). points (list): List of tuples containing the coordinates of points (xi, yi). Returns: str: \\"YES\\" if such a rectangle exists, otherwise \\"NO\\". point_set = set(points) for i in range(n): for j in range(i + 1, n): x1, y1 = points[i] x2, y2 = points[j] # Check for potential rectangle diagonal (x1,y1) to (x2,y2) if x1 != x2 and y1 != y2: if (x1, y2) in point_set and (x2, y1) in point_set: return \\"YES\\" return \\"NO\\""},{"question":"A company consisting of n employees has an important project to complete. The project involves assignment of tasks with varying difficulties. Each task must be completed sequentially by an employee capable of handling that difficulty level. Each employee has a skill level that determines the highest difficulty task they can handle. You are given the skill levels of the employees and the sequence of task difficulties. For each task, you should determine which employee will handle it. The assignment of tasks to employees follows these rules: 1. Each task is assigned to the first available employee who has the skill level greater than or equal to the task difficulty. 2. An employee can handle multiple tasks, and they do not need to be consecutive. The first line contains a single integer n (1 le n le 10^5) — the number of employees. The second line contains n integers s_1, s_2, ..., s_n (1 le s_i le 10^9) — the skill levels of the employees. The third line contains a single integer m (1 le m le 10^5) — the number of tasks. The fourth line contains m integers t_1, t_2, ..., t_m (1 le t_i le 10^9) — the difficulties of the tasks. Print m integers, where the i-th integer corresponds to the 1-based index of the employee assigned to the i-th task. If no employee can handle a task, print -1 for that task. **Example:** Input: ``` 5 4 2 7 1 3 6 2 5 1 8 3 4 ``` Output: ``` 2 3 4 -1 5 1 ``` Explanation: - Task 1 with difficulty 2 is handled by employee 2 (skill level 2) - Task 2 with difficulty 5 is handled by employee 3 (skill level 7) - Task 3 with difficulty 1 is handled by employee 4 (skill level 1) - Task 4 with difficulty 8 cannot be handled by any employee - Task 5 with difficulty 3 is handled by employee 5 (skill level 3) - Task 6 with difficulty 4 is handled by employee 1 (skill level 4)","solution":"def assign_tasks_to_employees(n, skill_levels, m, task_difficulties): Assign tasks to employees based on their skill levels. :param n: Number of employees :param skill_levels: List of integers representing the skill levels of employees :param m: Number of tasks :param task_difficulties: List of integers representing the difficulties of the tasks :return: List of integers where the i-th integer corresponds to the 1-based index of the employee assigned to the i-th task If no employee can handle a task, return -1 for that task. # Pair skill levels with their respective 1-based indices indexed_skills = sorted((skill, index + 1) for index, skill in enumerate(skill_levels)) # Function to find the first employee who can handle the task def find_employee(task_difficulty): low, high = 0, n - 1 while low <= high: mid = (low + high) // 2 if indexed_skills[mid][0] >= task_difficulty: high = mid - 1 else: low = mid + 1 return indexed_skills[low][1] if low < n and indexed_skills[low][0] >= task_difficulty else -1 # Assign tasks to employees assignment = [find_employee(task) for task in task_difficulties] return assignment"},{"question":"Write a program that simulates the inventory management system for a small bookstore. The bookstore contains two types of items: books and magazines, with each store item having the following properties: Books: - Title - Author - ISBN number - Quantity in stock Magazines: - Title - Issue number - Quantity in stock The program should support the following operations: 1. Adding a new book or magazine to the inventory. 2. Updating the quantity of an existing book or magazine. 3. Displaying the current inventory, sorted by title in alphabetical order. The first input line will contain an integer `n` (1 ≤ n ≤ 1000), the number of operations to perform. The next `n` lines will contain the operations. Each operation will be one of the following formats: - \\"ADD BOOK <Title> <Author> <ISBN> <Quantity>\\" - \\"ADD MAGAZINE <Title> <Issue number> <Quantity>\\" - \\"UPDATE <Type> <Identifier> <Quantity>\\" - \\"DISPLAY\\" - In the UPDATE command, `<Type>` will be either \\"BOOK\\" or \\"MAGAZINE\\". The `<Identifier>` will be the ISBN for books, and the issue number for magazines. If you attempt to update the quantity of an item that does not exist in the inventory, ignore that operation. If invalid command format is provided, also ignore that. Example input: ``` 7 ADD BOOK The_Great_Gatsby F_Scott_Fitzgerald 9780743273565 5 ADD MAGAZINE Time 202307 10 ADD BOOK War_and_Peace Leo_Tolstoy 9780198800545 3 UPDATE BOOK 9780743273565 7 UPDATE MAGAZINE 202307 5 DISPLAY INVALID 001 ``` Example output: ``` Books: Title: The_Great_Gatsby, Author: F_Scott_Fitzgerald, ISBN: 9780743273565, Quantity: 7 Title: War_and_Peace, Author: Leo_Tolstoy, ISBN: 9780198800545, Quantity: 3 Magazines: Title: Time, Issue: 202307, Quantity: 5 ```","solution":"class Book: def __init__(self, title, author, isbn, quantity): self.title = title self.author = author self.isbn = isbn self.quantity = quantity class Magazine: def __init__(self, title, issue, quantity): self.title = title self.issue = issue self.quantity = quantity class Inventory: def __init__(self): self.books = {} self.magazines = {} def add_book(self, title, author, isbn, quantity): self.books[isbn] = Book(title, author, isbn, quantity) def add_magazine(self, title, issue, quantity): self.magazines[issue] = Magazine(title, issue, quantity) def update_quantity(self, item_type, identifier, quantity): if item_type == \\"BOOK\\" and identifier in self.books: self.books[identifier].quantity = quantity elif item_type == \\"MAGAZINE\\" and identifier in self.magazines: self.magazines[identifier].quantity = quantity def display(self): books_sorted = sorted(self.books.values(), key=lambda x: x.title) magazines_sorted = sorted(self.magazines.values(), key=lambda x: x.title) lines = [\\"Books:\\"] for book in books_sorted: lines.append(f\\"Title: {book.title}, Author: {book.author}, ISBN: {book.isbn}, Quantity: {book.quantity}\\") lines.append(\\"nMagazines:\\") for magazine in magazines_sorted: lines.append(f\\"Title: {magazine.title}, Issue: {magazine.issue}, Quantity: {magazine.quantity}\\") return \\"n\\".join(lines) def process_commands(n, commands): inventory = Inventory() output = [] for command in commands: parts = command.split() if parts[0] == \\"ADD\\" and len(parts) >= 5: item_type = parts[1] if item_type == \\"BOOK\\" and len(parts) == 6: title, author, isbn, quantity = parts[2], parts[3], parts[4], int(parts[5]) inventory.add_book(title, author, isbn, quantity) elif item_type == \\"MAGAZINE\\" and len(parts) == 5: title, issue, quantity = parts[2], parts[3], int(parts[4]) inventory.add_magazine(title, issue, quantity) elif parts[0] == \\"UPDATE\\" and len(parts) == 4: item_type, identifier, quantity = parts[1], parts[2], int(parts[3]) inventory.update_quantity(item_type, identifier, quantity) elif parts[0] == \\"DISPLAY\\" and len(parts) == 1: output.append(inventory.display()) return \\"n\\".join(output)"},{"question":"Alice is given a tree-like structure where each node represents a task and the edges represent dependencies between tasks. A task can only be executed if all tasks it depends on have been executed. Alice’s goal is to find out in how many distinct ways she can execute all the tasks, given these dependencies. A tree-like structure in this context means the graph is a rooted tree, i.e., a connected acyclic graph with exactly n-1 edges for n nodes (tasks). The tasks are numbered from 1 to n and task 1 is the root. Can you help Alice by writing a program to find the number of distinct valid execution orders for the given tree of tasks? The first line contains an integer n (1 leq n leq 1000) — the number of tasks. Each of the next n-1 lines contains two integers u and v (1 leq u, v leq n, u neq v) — meaning there is an edge between task u and task v. Output a single integer — the number of distinct valid execution orders. # Example ``` Input: 5 1 2 1 3 3 4 3 5 Output: 8 ``` # Explanation In the sample input, the tree-like structure of tasks and dependencies is as follows: - Task 1 is the root and must be executed first. - After task 1, tasks 2 and 3 can be executed in any order. - After task 3, tasks 4 and 5 can be executed in any order. The 8 distinct valid execution orders are: 1. 1 -> 2 -> 3 -> 4 -> 5 2. 1 -> 2 -> 3 -> 5 -> 4 3. 1 -> 3 -> 2 -> 4 -> 5 4. 1 -> 3 -> 2 -> 5 -> 4 5. 1 -> 3 -> 4 -> 2 -> 5 6. 1 -> 3 -> 4 -> 5 -> 2 7. 1 -> 3 -> 5 -> 2 -> 4 8. 1 -> 3 -> 5 -> 4 -> 2 Thus, there are 8 distinct ways to execute all the tasks.","solution":"from math import factorial from collections import defaultdict def count_valid_orders(n, edges): def dfs(node): ways = 1 size = 0 for neighbor in tree[node]: sub_ways, sub_size = dfs(neighbor) ways *= sub_ways ways *= comb(size + sub_size, sub_size) size += sub_size return ways, size + 1 def comb(n, k): if k == 0 or k == n: return 1 return factorial(n) // (factorial(k) * factorial(n - k)) tree = defaultdict(list) for u, v in edges: tree[u].append(v) total_ways, total_size = dfs(1) return total_ways"},{"question":"You are given an array of integers and a number of queries. Each query asks you to find the sum of elements between two given indices, inclusive. Your task is to preprocess the array so that the queries can be answered efficiently. For example, consider the array `[1, 2, 3, 4, 5]` and the queries: - Query 1: Find the sum between indices 1 and 3 (inclusive) – should return 6 (2 + 3 + 1). - Query 2: Find the sum between indices 2 and 4 (inclusive) – should return 9 (3 + 4 + 2). The first line contains two integers `n` and `q` (`1 <= n, q <= 10^5`) – the size of the array and the number of queries, respectively. The second line contains `n` integers, the elements of the array. Each of the next `q` lines contains two integers `l` and `r` (`1 <= l <= r <= n`) – the left and right indices for a query. For each query output the sum of elements between indices `l` and `r`, inclusive. Input: ``` 5 2 1 2 3 4 5 1 3 2 4 ``` Output: ``` 6 9 ``` Implement the preprocessing and answering of the queries efficiently.","solution":"def preprocess_array(arr): Preprocess the array to calculate the prefix sums. n = len(arr) prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] return prefix_sums def query_sum(prefix_sums, l, r): Return the sum of elements between indices l and r (inclusive) using the prefix sums. return prefix_sums[r] - prefix_sums[l - 1] # Sample array and queries for testing arr = [1, 2, 3, 4, 5] queries = [(1, 3), (2, 4)] prefix_sums = preprocess_array(arr) results = [] for l, r in queries: results.append(query_sum(prefix_sums, l, r)) print(results) # Should output [6, 9] for the example"},{"question":"You are given a list of n integers and q queries. Each query asks you to compute the sum of elements in a subarray delimited by indices (l, r). Additionally, you need to answer whether the sum of this subarray is a prime number. The first line contains two integers n and q (1 ≤ n ≤ 10⁵, 1 ≤ q ≤ 10⁴) — the number of elements in the array and the number of queries. The second line contains n integers a_i (1 ≤ a_i ≤ 1000) — the elements of the array. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the parameters of the j-th query. For each query, print the sum of the subarray and whether it\'s a prime number (output \\"Yes\\" or \\"No\\") on a separate line. Example: ``` Input: 5 3 2 3 4 5 6 1 3 2 4 1 5 Output: 9 No 12 No 20 No ```","solution":"from math import isqrt def is_prime(num): Determines if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def subarray_sum_and_prime(n, q, arr, queries): Determines the sum of elements in a subarray and whether the sum is a prime number. # Create prefix sum array prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] results = [] for l, r in queries: total_sum = prefix_sum[r] - prefix_sum[l - 1] results.append(f\\"{total_sum} {\'Yes\' if is_prime(total_sum) else \'No\'}\\") return results"},{"question":"You are given an array of numbers, and you have to construct a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. Write a function `constructArray` that takes an array `arr` of integers as input and returns a new array `result` where each element at index `i` is the result of multiplying all numbers in the array `arr` except `arr[i]`. # Example Input: ``` arr = [1, 2, 3, 4] ``` Output: ``` result = [24, 12, 8, 6] ``` # Constraints 1. You cannot use the division operation in your solution. 2. The length of array `arr` will be between 2 and 1000. 3. Each element in `arr` is an integer from -10^9 to 10^9. # Function Signature ```python def constructArray(arr: List[int]) -> List[int]: pass ``` # Notes 1. Carefully consider edge cases such as arrays containing zeros. 2. Optimize your solution for time complexity, aiming for O(n) if possible.","solution":"from typing import List def constructArray(arr: List[int]) -> List[int]: n = len(arr) if n == 0: return [] result = [1] * n # Product of elements to the left of arr[i] left = 1 for i in range(n): result[i] *= left left *= arr[i] # Product of elements to the right of arr[i] right = 1 for i in range(n-1, -1, -1): result[i] *= right right *= arr[i] return result"},{"question":"A forest is a disjoint union of trees, where each tree is an acyclic connected undirected graph. A forest is said to be a balanced forest if for every tree in the forest, any two leaves of the tree have the same distance from the root. A leaf in a tree is a vertex with degree 1, i.e., it has only one adjacent vertex. The distance between two vertices in a tree is the number of edges on the path connecting them. You are given a graph consisting of n vertices and m edges, which is a forest. You need to determine if the forest is balanced. If the forest is balanced, print \\"YES\\", otherwise print \\"NO\\". The first line contains two space-separated integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m < n), the number of vertices and edges in the graph, respectively. The next m lines describe the edges: each line contains two space-separated integers u and v (1 ≤ u, v ≤ n), denoting an edge between vertices u and v. Output a single line: \\"YES\\" if the forest is balanced, otherwise \\"NO\\". Examples: Input: 6 4 1 2 1 3 4 5 4 6 Output: YES Input: 7 5 1 2 1 3 3 4 4 5 5 6 Output: NO","solution":"from collections import defaultdict, deque def is_balanced_forest(n, m, edges): if n == 1: # A single node is always balanced return \\"YES\\" graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(node): queue = deque([(node, None, 0)]) # (vertex, parent, depth) depths = defaultdict(list) while queue: v, parent, depth = queue.popleft() children = 0 for neighbor in graph[v]: if neighbor != parent: queue.append((neighbor, v, depth + 1)) children += 1 if children == 0: # It\'s a leaf depths[depth].append(v) return depths visited = set() for i in range(1, n + 1): if i not in visited: depths = bfs(i) if len(depths) > 1 and len(set(depths.keys())) != 1: return \\"NO\\" visited.update(node for depth in depths.values() for node in depth) return \\"YES\\""},{"question":"In an imaginary kingdom, the residents measure distances using a peculiar system. Every distance in this system is a series of steps where each step can either be \\"forward\\" represented by \'+\' or \\"backward\\" represented by \'-\'. You are given a string `path` consisting of \'+\' and \'-\' characters representing a walk along this peculiar system. However, some steps in the `path` are unknown and represented by \'?\'. Your task is to determine the lexicographically smallest possible `path` by replacing each \'?\' with either \'+\' or \'-\'. For example: - For `path = \\"??+\\"`, the lexicographically smallest path would be `--+`. - For `path = \\"?-?+\\"`, the lexicographically smallest path would be `---+`. Write a function to achieve this: ```python def smallest_path(path: str) -> str: # Implement your solution here pass # Example usage: # path = \\"??+\\" # print(smallest_path(path)) # Output: --+ # path = \\"?-?+\\" # print(smallest_path(path)) # Output: ---+ ``` # Input - A string `path` consisting of characters \'+\', \'-\', and \'?\' with length 1 leq text{len}(path) leq 1000. # Output - A single string representing the lexicographically smallest path by replacing all \'?\' with either \'+\' or \'-\'. Implement the function with efficient handling to achieve the required output.","solution":"def smallest_path(path: str) -> str: Returns the lexicographically smallest possible path by replacing each \'?\' with either \'+\' or \'-\'. return path.replace(\'?\', \'-\')"},{"question":"A farmer has a rectangular field divided into a grid of 1x1 square plots. He wants to plant trees in certain plots such that no two trees are in the same row or column. Given the dimensions of the grid, and a list of coordinates for the trees he wants to plant, help the farmer determine if it is possible to plant the trees as he intends. If it is possible, print \\"YES\\", otherwise print \\"NO\\". The first line of input contains two integers n and m — the number of rows and columns in the grid (1 ≤ n, m ≤ 1000). The next line contains an integer k — the number of trees the farmer wants to plant (0 ≤ k ≤ min(n,m)). Each of the next k lines contains two integers r and c — the row and column coordinates of a plot where a tree is to be planted (1 ≤ r ≤ n, 1 ≤ c ≤ m). Print \\"YES\\" if it is possible to plant the trees such that no two trees share the same row or column, otherwise print \\"NO\\". Examples: Input: 4 4 3 1 1 2 3 4 2 Output: YES Input: 3 3 3 1 1 1 2 2 2 Output: NO In the first example, it is possible to plant the trees in the specified coordinates as no two trees share the same row or column. In the second example, two trees are already in the same row, so it\'s not possible to plant the trees as required.","solution":"def can_plant_trees(n, m, k, positions): if k == 0: return \\"YES\\" rows = set() cols = set() for r, c in positions: if r in rows or c in cols: return \\"NO\\" rows.add(r) cols.add(c) return \\"YES\\" # Example usage: n = 4 m = 4 k = 3 positions = [(1, 1), (2, 3), (4, 2)] print(can_plant_trees(n, m, k, positions)) # Output: YES n = 3 m = 3 k = 3 positions = [(1, 1), (1, 2), (2, 2)] print(can_plant_trees(n, m, k, positions)) # Output: NO"},{"question":"A new popular tourist attraction in town, the Museum of Fiendish Puzzles, features a row of interactive panels where tourists can play a game. Each panel displays an arrangement of colored tiles in a grid, where each tile has a specific color represented by an integer. The game is to determine if there exists any row or column in the grid that is perfectly symmetric. A row or column is considered symmetric if reading the sequence of colors from left to right is the same as reading it from right to left (for rows) or from top to bottom is the same as reading it from bottom to top (for columns). Given several grid configurations, your task is to write a program that will analyze each grid and determine if there exists at least one symmetric row or column. If such a row or column exists, your program should return \\"YES\\", otherwise it should return \\"NO\\". # Input Format - The first line contains the number `t` (1 ≤ t ≤ 100) of grids to be processed. - Each grid starts with two integers `n` and `m` (1 ≤ n, m ≤ 100), where `n` is the number of rows and `m` is the number of columns. - The next `n` lines contain `m` integers, representing the colors of the tiles in the grid. # Output Format - For each grid, output \\"YES\\" if there exists at least one symmetric row or column; otherwise, output \\"NO\\". # Sample Input ``` 2 3 3 1 2 1 3 4 3 5 6 5 2 4 1 2 3 4 4 3 2 1 ``` # Sample Output ``` YES NO ``` # Explanation For the first grid: ``` 1 2 1 3 4 3 5 6 5 ``` Both the first and third rows are symmetric (reading from left to right and vice versa are the same: 1 2 1 and 5 6 5 respectively). Hence, the output is \\"YES\\". For the second grid: ``` 1 2 3 4 4 3 2 1 ``` No row or column is symmetric. Hence, the output is \\"NO\\". # Notes - Here, 100 grids with dimensions up to 100x100 are being processed. - Emphasize efficiency in processing since input sizes can become large. - Consider edge cases such as grids with only one row or one column, which are always symmetric.","solution":"def is_symmetric(grid): # Check for symmetric rows for row in grid: if row == row[::-1]: return \\"YES\\" # Check for symmetric columns num_columns = len(grid[0]) for col in range(num_columns): column = [row[col] for row in grid] if column == column[::-1]: return \\"YES\\" return \\"NO\\" def process_grids(grids): results = [] for grid in grids: results.append(is_symmetric(grid)) return results def main(input_data): input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) grids = [] index = 1 for _ in range(t): n, m = map(int, input_lines[index].split()) index += 1 grid = [] for _ in range(n): grid.append(list(map(int, input_lines[index].split()))) index += 1 grids.append(grid) return process_grids(grids)"},{"question":"Elena loves playing with sequences of numbers. She has a sequence of n integers and wants to find out if there is a subsequence of length exactly k, such that the sum of the subsequence\'s elements is exactly x. Your task is to determine if such a subsequence exists in the sequence given by Elena. The first line contains three integers n, k, and x (1 ≤ k ≤ n ≤ 100, -1000 ≤ x ≤ 1000) — the length of the sequence, the length of the subsequence, and the target sum, respectively. The second line contains n integers a1, a2, ..., an (−1000 ≤ ai ≤ 1000) — the elements of the sequence. Print \\"YES\\" (without quotes) if there exists a subsequence of length exactly k with a sum of exactly x. Otherwise, print \\"NO\\" (without quotes). For example, in the first case, if the sequence is [1, 2, 3, 4, 5], k=2, and x=5, one possible subsequence of length 2 that sums to 5 is [2, 3]. Therefore, the answer would be \\"YES\\". In the second example, with the sequence [10, -1, 2, 7, -3], k=3, and x=8, one possible subsequence of length 3 that sums to 8 is [10, -1, -1]. Hence, the answer is \\"YES\\".","solution":"from itertools import combinations def subsequence_exists(n, k, x, sequence): Determines if there is a subsequence of length k with a sum of x in the sequence. Parameters: n (int): Length of the sequence k (int): Length of the subsequence x (int): Target sum sequence (list of int): The sequence of integers Returns: str: \\"YES\\" if such subsequence exists, otherwise \\"NO\\" for subseq in combinations(sequence, k): if sum(subseq) == x: return \\"YES\\" return \\"NO\\""},{"question":"You are given an integer array arr of size n. Let\'s define a subarray arr[l:r] (where 1 leq l leq r leq n) as *good* if it contains at least one element which is the sum of any two elements within that subarray. Calculate the number of *good* subarrays. The first line contains a single integer n (1 le n le 2 cdot 10^3) — the size of the array. The second line contains n integers arr_i (1 le arr_i le 10^9) — the elements of the array. Print a single integer — the number of *good* subarrays.","solution":"def count_good_subarrays(arr): n = len(arr) good_count = 0 for i in range(n): for j in range(i, n): seen_sums = set() is_good = False for k in range(i, j + 1): for l in range(i, j + 1): if k != l: if arr[k] + arr[l] in seen_sums: is_good = True break seen_sums.add(arr[k] + arr[l]) if is_good: break if is_good: good_count += 1 return good_count # Function for the task def number_of_good_subarrays(n, arr): return count_good_subarrays(arr)"},{"question":"A network contains nodes labelled from 1 to n, and the nodes are connected by bi-directional edges. Each edge has a specific travel time associated with it. Given the nodes and edges, your task is to find the shortest time required to travel from a starting node to a destination node. You will use Dijkstra\'s algorithm for this purpose. You will be provided: 1. An integer `n` (2 ≤ n ≤ 100), the number of nodes in the network. 2. An integer `m` (1 ≤ m ≤ 1000), the number of edges. 3. An integer `s` (1 ≤ s ≤ n), the starting node. 4. An integer `d` (1 ≤ d ≤ n), the destination node. 5. An array of `m` tuples where each tuple (`u`, `v`, `w`) represents an edge with nodes `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) and travel time `w` (1 ≤ w ≤ 100). Output the shortest travel time from the starting node `s` to the destination node `d`. If there is no path from `s` to `d`, output \\"Impossible\\". Example: Input: ``` 4 5 1 4 1 2 2 2 3 4 1 3 6 3 4 1 2 4 7 ``` Output: ``` 7 ```","solution":"import heapq def dijkstra(n, m, s, d, edges): Finds the shortest travel time from start node `s` to destination node `d` using Dijkstra\'s algorithm. Args: n (int): The number of nodes in the network. m (int): The number of edges in the network. s (int): The starting node. d (int): The destination node. edges (list of tuples): List where each tuple (u, v, w) represents an edge with nodes u and v, and travel time w. Returns: int or str: The shortest travel time from node `s` to node `d`, or \\"Impossible\\" if no path exists. # Convert to 0-based indexing s -= 1 d -= 1 graph = [[] for _ in range(n)] for u, v, w in edges: graph[u - 1].append((v - 1, w)) graph[v - 1].append((u - 1, w)) # Dijkstra\'s algorithm pq = [(0, s)] dist = [float(\'inf\')] * n dist[s] = 0 while pq: current_distance, u = heapq.heappop(pq) if current_distance > dist[u]: continue for v, weight in graph[u]: distance = current_distance + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist[d] if dist[d] != float(\'inf\') else \\"Impossible\\""},{"question":"You are the manager of a restaurant and you want to calculate the total tip your staff can earn at the end of the day. Each waiter serves a number of customers as recorded in a list, and each customer gives a varying amount of tip. To make the problem simpler: - Each waiter will have a list of tips corresponding to the customers they served. - You need to write a program to calculate the total amount of tip earned by summing up all the tips given to each waiter. Write a function that takes an integer number of waiters t (1 le t le 100), and for each waiter a list of integers representing the tips they received from each customer. The function should return the total tips earned by all waiters combined. The first line contains a single integer t (1 le t le 100) — the number of waiters. Each of the next t lines contains a space-separated list of integers representing the tips given to the i^{th} waiter by their respective customers. Each list is terminated by the integer -1. The length of each list is at most 50. In the output, print a single integer that represents the total tips earned by all waiters. # Input Format - First line contains integer t. - For the next t lines, each line contains space-separated integers ending with -1 representing the tips for each waiter. # Output Format - Print a single integer representing the total tips earned by all waiters. # Example Input ``` 3 5 10 15 -1 3 3 3 3 -1 8 8 -1 ``` Output ``` 55 ``` # Explanation - Waiter 1: Tips are 5, 10, 15 (Total: 30) - Waiter 2: Tips are 3, 3, 3, 3 (Total: 12) - Waiter 3: Tips are 8, 8 (Total: 16) Total tips = 30 + 12 + 16 = 58","solution":"def calculate_total_tips(t, waiter_tips): Calculate the total amount of tips earned by all waiters. Parameters: t (int): The number of waiters. waiter_tips (list of list of int): A list where each element is a list of tips for each waiter. Returns: int: The total tips earned by all waiters combined. total_tips = 0 for tips in waiter_tips: total_tips += sum(tips) return total_tips # Example input reading function def read_input(): t = int(input().strip()) waiter_tips = [] for _ in range(t): tips = list(map(int, input().strip().split()))[:-1] # Ignore the last -1 waiter_tips.append(tips) return t, waiter_tips if __name__ == \'__main__\': t, waiter_tips = read_input() print(calculate_total_tips(t, waiter_tips))"},{"question":"You are given an array of integers and a target integer. Your task is to determine if there is a pair of integers in the array that sums up to the target integer. If such a pair exists, return the indices of the two numbers such that they add up to the target. **Constraints:** - Each input will have exactly one solution, and you may not use the same element twice. - You can return the answer in any order. # Input: - The first line contains an integer n representing the number of elements in the array (2 leq n leq 10^4). - The second line contains n integers representing the elements of the array (-10^9 leq arr[i] leq 10^9). - The third line contains an integer target representing the target sum (-10^9 leq target leq 10^9). # Output: - Output two integers representing the indices (0-based) of the two elements in the array that add up to the target sum. If there are multiple valid pairs, output any one of them. # Example: Input: ``` 5 2 7 11 15 3 9 ``` Output: ``` 0 1 ``` # Explanation: In the provided example, the pair of integers at indices 0 and 1 (i.e., 2 and 7) sum up to the target integer 9. Hence, the output is \\"0 1\\".","solution":"def find_pair_indices(arr, target): Given a list of integers and a target integer, return the indices of two numbers such that they add up to the target. value_to_index = {} for index, number in enumerate(arr): difference = target - number if difference in value_to_index: return [value_to_index[difference], index] value_to_index[number] = index return [] # We assume there is exactly one solution, so this should never happen."},{"question":"You are given a matrix of size n times m containing integers. Your task is to perform multiple queries on this matrix, where each query will ask you to calculate the sum of integers in a submatrix defined by its top-left and bottom-right coordinates. The first line of input contains two integers n and m (1 le n, m le 500) — the number of rows and columns in the matrix. The next n lines each contain m integers, representing the matrix. The next line contains a single integer q (1 le q le 10^4) — the number of queries. The next q lines each contain four integers r1, c1, r2, c2 (1 le r1 le r2 le n, 1 le c1 le c2 le m) defining the top-left (r1, c1) and bottom-right (r2, c2) coordinates of the submatrix. For each query, print the sum of integers in the corresponding submatrix. # Input - The first line contains two integers n and m. - The next n lines each contain m integers representing the matrix. - The next line contains a single integer q. - The next q lines each contain four integers r1, c1, r2, c2. # Output - For each query, print the sum of integers in the specified submatrix. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 ``` Output ``` 12 28 ```","solution":"def preprocess_matrix(matrix): Preprocess the matrix to create a prefix sum matrix. :param matrix: 2D list of integers :return: 2D prefix sum matrix n = len(matrix) m = len(matrix[0]) prefix_sum = [[0] * (m+1) for _ in range(n+1)] for i in range(1, n+1): for j in range(1, m+1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) return prefix_sum def sum_submatrix(prefix_sum, r1, c1, r2, c2): Calculate the sum of integers in the submatrix using the prefix sum matrix. :param prefix_sum: 2D prefix sum matrix :param r1: top-left row index (1-based) :param c1: top-left column index (1-based) :param r2: bottom-right row index (1-based) :param c2: bottom-right column index (1-based) :return: Sum of integers in the specified submatrix return (prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1]) def solve(n, m, matrix, queries): Main function to solve the problem. :param n: Number of rows in the matrix :param m: Number of columns in the matrix :param matrix: 2D list of integers representing the matrix :param queries: List of queries as tuples (r1, c1, r2, c2) :return: List of results for each query prefix_sum = preprocess_matrix(matrix) results = [] for r1, c1, r2, c2 in queries: results.append(sum_submatrix(prefix_sum, r1, c1, r2, c2)) return results"},{"question":"You are given an array A of n integers. Perform the following manipulations: 1. Initialize a variable `sum_even` to 0. 2. Iterate through the array, adding each element at an even index to `sum_even`. 3. Compute the sum of elements at even indices multiplied by the length of the array. Output the result of these manipulations. The first line of the input contains a single integer n (1 ≤ n ≤ 50) indicating the number of elements in the array. The second line contains n integers representing the array A. Output the resultant sum after the described manipulations.","solution":"def sum_of_even_index_elements_multiplied_by_length(n, A): Computes the sum of elements at even indices and multiplies it by the length of the array. :param n: Integer, the number of elements in the array. :param A: List of integers, the array. :return: Integer, the resultant sum. sum_even = 0 for i in range(0, n, 2): sum_even += A[i] result = sum_even * n return result"},{"question":"Sanara is analyzing the sea currents of a region. She has a sequence of n integers representing the current speed at multiple checkpoints. Due to some instruments\' limitations, the readings can sometimes record abnormal spikes. She considers a reading normal if it is less than or equal to twice the previous reading. If a reading is more than twice the previous reading, it is considered an abnormal spike and must be replaced with the previous reading\'s twice value to maintain consistency. Given the sequence, determine the modified sequence with abnormal spikes corrected. # Input - The first line contains an integer n (1 ≤ n ≤ 100000), the number of checkpoints. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the current speeds. # Output - Print the modified sequence after correcting all abnormal spikes. # Example # Input 6 1 2 4 9 16 50 # Output 1 2 4 8 16 32 # Explanation - Current starting sequence: 1, 2, 4, 9, 16, 50 - The reading at the 4th checkpoint (9) is an abnormal spike (greater than twice of the previous reading 4 * 2). - It must be replaced by twice the previous value, resulting in: 1, 2, 4, 8, 16, 32.","solution":"def correct_currents(n, currents): Returns the corrected sequence of current speeds. corrected = currents[:1] for i in range(1, n): if currents[i] > 2 * corrected[i-1]: corrected.append(2 * corrected[i-1]) else: corrected.append(currents[i]) return corrected"},{"question":"You are given an array of integers representing the heights of mountains in a mountain range. The task is to find the largest number of consecutive mountains that have increasing heights. In other words, you need to determine the length of the longest increasing subarray within the given array of mountain heights. First line of input contains a single integer n (1 ≤ n ≤ 100000), the number of mountains. Second line of input contains n integers, h1, h2, ..., hn (1 ≤ hi ≤ 100000), the heights of the mountains. Output a single integer indicating the length of the longest increasing subarray of mountain heights. Example: Input: 8 1 2 2 3 5 1 7 8 Output: 3 In this example, the longest increasing subarray is [1, 7, 8], which has a length of 3.","solution":"def longest_increasing_subarray_length(heights): Finds the length of the longest increasing subarray in the given list of mountain heights. n = len(heights) if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if heights[i] > heights[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are given a list of integers ```nums``` of size ```n```. Find and return the minimum number of adjacent swaps required to make the array sorted in non-decreasing order. A swap is defined as choosing two adjacent elements in the array and swapping them. The first line contains a single integer ```t``` (```1 <= t <= 100```) — the number of test cases. For each test case: - The first line contains a single integer ```n``` (```1 <= n <= 1000```) — the length of the list. - The second line contains ```n``` integers representing the elements of the list ```nums```. For each test case, output a single integer representing the minimum number of adjacent swaps needed. # Example Input: ``` 2 5 3 1 2 4 5 4 4 3 2 1 ``` Output: ``` 2 6 ``` # Explanation: In the first test case, you can perform two swaps to sort the list: 1. Swap the elements at indices 0 and 1 (3 and 1): [1, 3, 2, 4, 5] 2. Swap the elements at indices 1 and 2 (3 and 2): [1, 2, 3, 4, 5] In the second test case, you need six swaps to sort the list: 1. Swap the elements at indices 0 and 1 (4 and 3): [3, 4, 2, 1] 2. Swap the elements at indices 1 and 2 (4 and 2): [3, 2, 4, 1] 3. Swap the elements at indices 2 and 3 (4 and 1): [3, 2, 1, 4] 4. Swap the elements at indices 0 and 1 (3 and 2): [2, 3, 1, 4] 5. Swap the elements at indices 1 and 2 (3 and 1): [2, 1, 3, 4] 6. Swap the elements at indices 0 and 1 (2 and 1): [1, 2, 3, 4]","solution":"def min_adjacent_swaps_to_sort(nums): Function to return the minimum number of adjacent swaps needed to sort the list. swaps = 0 n = len(nums) for i in range(n): for j in range(0, n-i-1): if nums[j] > nums[j+1]: nums[j], nums[j+1] = nums[j+1], nums[j] swaps += 1 return swaps def process_test_cases(t, test_data): result = [] for i in range(t): n = test_data[i][0] nums = test_data[i][1] result.append(min_adjacent_swaps_to_sort(nums)) return result"},{"question":"Given an array of integers and a target integer, write a program to determine if there exist two elements in the array that add up to the target integer. If such a pair exists, return their indices as a tuple. If no such pair exists, return an empty tuple. # Input - An integer array `numbers` of length `n` (1 ≤ n ≤ 10^4). - An integer `target`. # Output - Return a tuple of two integers representing the indices of the two elements in the array that add up to the target. - If no such elements are found, return an empty tuple. # Example ```python # Input numbers = [2, 7, 11, 15] target = 9 # Output (0, 1) # Explanation: numbers[0] + numbers[1] = 2 + 7 = 9 ``` # Constraints - Assume that each input would have exactly one solution. - You may not use the same element twice.","solution":"def two_sum(numbers, target): Returns a tuple of indices of the two elements in the array that add up to the target. If no such pair exists, returns an empty tuple. num_to_index = {} for i, num in enumerate(numbers): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return ()"},{"question":"Write a function that takes a list of integers and returns a list where each element is the product of all the elements in the input list except the element at that index. The input is a single line containing space-separated integers (1 ≤ length of list ≤ 100, -100 ≤ integers ≤ 100). The output should be a single line containing space-separated integers representing the transformed list. For example: Input: 1 2 3 4 Output: 24 12 8 6","solution":"def product_except_self(nums): Given a list of integers, returns a list where each element is the product of all the elements in the input list except the element at that index. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Lara is a fashion designer and she maintains a portfolio of dress designs. She recently added a feature to her portfolio website that allows users to search for dress designs by a combination of attributes like color, length, and style. Each dress design in her portfolio is identified by a unique integer ID and has a combination of various attributes each represented by an integer value. For example, a dress might be described by a tuple (color_id, length_id, style_id). To improve the search functionality, Lara wants to allow users to input a query which consists of a combination of attribute IDs and get the list of dress design IDs that match all these attributes efficiently. Lara needs your help to implement this search functionality. You will be given `n` dress designs and a list of `m` queries. For each query, return the list of dress design IDs that match the given attributes. **Input:** - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) - the number of dress designs and the number of queries respectively. - The next `n` lines each contain `4` integers: `id`, `color_id`, `length_id`, `style_id` where (1 ≤ id, color_id, length_id, style_id ≤ 10000). - The following `m` lines each contain `3` integers: `query_color_id`, `query_length_id`, `query_style_id` representing the attributes to search for. **Output:** - For each query, output a single line with the dress design IDs that match the given attributes in increasing order. If no dresses match the query, output \\"No matches found\\". **Example:** **Input:** ``` 5 2 1 5 3 7 2 5 2 7 3 2 3 7 4 5 3 8 5 5 3 7 5 3 7 2 2 8 ``` **Output:** ``` 1 5 No matches found ``` **Notes:** - Each dress design in the portfolio is unique. - Consider using efficient data structures to handle the search queries quickly.","solution":"def search_dress_designs(n, m, designs, queries): Searches for dress designs that match given queries. :param n: Number of dress designs :param m: Number of queries :param designs: List of tuples where each tuple contains (id, color_id, length_id, style_id) :param queries: List of tuples where each tuple contains (query_color_id, query_length_id, query_style_id) :return: List of results for each query. Each result is either a sorted list of matching dress ids or \\"No matches found\\". design_dict = {} for design in designs: id, color_id, length_id, style_id = design if (color_id, length_id, style_id) not in design_dict: design_dict[(color_id, length_id, style_id)] = [] design_dict[(color_id, length_id, style_id)].append(id) results = [] for query in queries: query_color_id, query_length_id, query_style_id = query key = (query_color_id, query_length_id, query_style_id) if key in design_dict: results.append(sorted(design_dict[key])) else: results.append(\\"No matches found\\") return results"},{"question":"Emilia is a puzzle enthusiast who loves to solve puzzles with words. She recently came up with a new type of puzzle where you must transform one word into another by changing exactly one letter at a time, with each intermediate word being a valid English word. Given a dictionary of valid English words and two words of the same length, start and end, your task is to determine the minimum number of single-letter transformations needed to change start into end. If there is no such transformation sequence, output -1. Each transformation must change exactly one letter, and each intermediate word must exist in the dictionary. The first line of input contains an integer n (1 ≤ n ≤ 10000), the number of words in the dictionary. Each of the next n lines contains a single word, representing the dictionary of valid English words. The following two lines contain the words start and end respectively. It is guaranteed that start and end are of the same length. Output a single integer representing the minimum number of transformations needed to change start into end. If it is not possible, output -1. Example: Input: 6 hot dot dog lot log cog hit cog Output: 4 Explanation: One possible transformation sequence is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", which requires 4 transformations.","solution":"from collections import deque def min_transformations(n, words, start, end): Returns the minimum number of transformations needed to change start into end by changing exactly one letter at a time with each intermediate word being valid. If no transformation is possible, returns -1. word_set = set(words) if end not in word_set: return -1 word_set.add(start) queue = deque([(start, 0)]) while queue: current_word, steps = queue.popleft() if current_word == end: return steps for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in word_set: word_set.remove(next_word) queue.append((next_word, steps + 1)) return -1"},{"question":"In a country called Arithmus, there are n cities (numbered from 1 to n) connected by m directed roads, where each road has a certain length. Additionally, each road connects two different cities. The road network is currently represented as a directed graph with n vertices and m edges. The king of Arithmus wants to improve transportation between the cities by setting up new direct train routes. However, to minimize costs, they only want to build at most p additional train routes such that any two cities can be reached from one another via either the existing roads or the new train routes. Given the existing road network and the maximum number of new train routes p, find out if it is possible to add at most p new train routes to achieve the goal of full connectivity. If it is possible, output the exact n-1 roads (composed of both existing and new roads) that yield a connected graph. You are required to write a program that determines whether this is feasible and, if so, lists the necessary new train routes to achieve the connectivity goal. The input consists of: - The first line contains three integers n, m, and p (2 ≤ n ≤ 2×10^5, 1 ≤ m ≤ 4×10^5, 0 ≤ p ≤ 10^6), where n represents the number of cities, m represents the number of existing roads, and p represents the maximum number of new train routes that can be added. - Each of the next m lines contains three integers u, v, and l (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ l ≤ 10^6) representing a directed road from city u to city v with length l. The output should be: - If it is impossible to connect all cities with at most p new train routes, print \\"IMPOSSIBLE\\". - If it is possible, print the roads used to connect the cities on n-1 lines, where each line should describe one road in the format \\"u v l\\". This includes both the original and new roads that achieve the desired connectivity. If there are multiple valid solutions, any of them will be accepted. Example implementation: Input: ``` 4 4 1 1 2 5 2 3 3 3 4 7 4 1 2 ``` Output: ``` 1 2 5 2 3 3 3 4 7 ``` Note: The example above shows that the original roads are already providing full connectivity. In cases without sufficient connectivity in the original roads, you must suggest new roads and include them in the output if they are within the limit p and achieve full connectivity.","solution":"def find_connected_components(n, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v, l in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = [] def bfs(start): queue = deque([start]) visited[start] = True comp = [] while queue: node = queue.popleft() comp.append(node) for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return comp for i in range(1, n + 1): if not visited[i]: components.append(bfs(i)) return components def min_train_routes(n, m, p, edges): components = find_connected_components(n, edges) if len(components) - 1 > p: return \\"IMPOSSIBLE\\" edges_used = set((u, v) for u, v, l in edges) new_routes = [] if len(components) == 1: return edges else: for i in range(len(components) - 1): city1 = components[i][0] city2 = components[i + 1][0] if (city1, city2) not in edges_used and (city2, city1) not in edges_used: new_routes.append((city1, city2, 1)) edges_used.add((city1, city2)) else: new_routes.append((city1, city2, 1)) all_edges = edges + [(u, v, l) for u, v, l in new_routes] return all_edges # Reading input from a function for dynamic testing def solve(input_data): input_lines = input_data.strip().split(\'n\') n, m, p = map(int, input_lines[0].split()) edges = [] for i in range(1, m + 1): u, v, l = map(int, input_lines[i].split()) edges.append((u, v, l)) result = min_train_routes(n, m, p, edges) if result == \\"IMPOSSIBLE\\": return result else: return \\"n\\".join(f\\"{u} {v} {l}\\" for u, v, l in result)"},{"question":"A group of adventurers has discovered an ancient encryption device. The device encodes messages using a sequence of rotations. Each rotation consists of moving characters to the left an arbitrary number of times. For example, a rotation by 2 on the string \\"abcdef\\" results in \\"cdefab\\". The adventurers found that the encoded message can be simplified by representing a series of rotations with a single rotation. Your task is to find the minimal left rotation that achieves the same result as performing all the given rotations in sequence. The first line of the input contains a single string S (1 ≤ |S| ≤ 10^5), representing the original message. The second line contains an integer K (1 ≤ K ≤ 10^5) — the number of rotations to be performed. Each of the next K lines contains an integer Ri (0 ≤ Ri < |S|), representing a rotation of Ri positions to the left. Output a single integer — the number of positions for the minimal left rotation that would give the same result as all K rotations performed in sequence. **Sample Input:** ``` abcdef 3 1 2 3 ``` **Sample Output:** ``` 0 ``` **Explanation:** The series of rotations 1, 2, and 3 on \\"abcdef\\" results in 1+2+3 = 6 rotations, which brings the string back to its original form. Thus, the minimal rotation is 0.","solution":"def minimal_left_rotation(s, k, rotations): Determines the minimal left rotation that achieves the same result as performing all given rotations in sequence. Args: s (str): The original string. k (int): The number of rotations to be performed. rotations (list of int): List of integers representing each rotation. Returns: int: The number of positions for the minimal left rotation. total_rotation = sum(rotations) minimal_rotation = total_rotation % len(s) return minimal_rotation"},{"question":"You are given a sequence of n integers. Your task is to find the smallest contiguous subarray with a sum greater than or equal to a given value S. The first line contains two integers n and S (1 le n le 10^5, 1 le S le 10^9) — the length of the sequence and the target sum. The second line contains n space-separated integers representing the sequence, where each integer x_i (1 le x_i le 10^4). Print the length of the smallest subarray with a sum greater than or equal to S. If no such subarray exists, print 0. # Sample Input 1: ``` 10 15 1 2 3 4 5 6 7 8 9 10 ``` # Sample Output 1: ``` 2 ``` # Explanation: The subarray [7, 8] has a sum of 15, which is the smallest subarray with a sum greater than or equal to 15. Another valid answer would be the subarray [8, 7], but it\'s 2 elements long as well. No smaller subarray with a sufficient sum exists.","solution":"def smallest_subarray_with_sum(arr, n, S): Find the length of the smallest contiguous subarray with sum greater than or equal to S. Args: arr: List of integers. n: Integer, the length of the array. S: Integer, the target sum. Returns: Integer, the length of the smallest subarray with sum >= S. If no such subarray exists, returns 0. min_length = float(\'inf\') current_sum = 0 start_index = 0 for end_index in range(n): current_sum += arr[end_index] while current_sum >= S: min_length = min(min_length, end_index - start_index + 1) current_sum -= arr[start_index] start_index += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"You are given a sequence of integers representing heights of buildings in a straight line. The width of each building is 1 unit. The buildings form a histogram, with each building\'s height corresponding to the integer value provided. Your task is to find the area of the largest rectangle that can be formed within the bounds of this histogram. The rectangle must be aligned along the x and y axes and cannot be tilted. The rectangle can span multiple buildings but cannot extend beyond the range of the histogram. # Input format - The first line contains an integer ( n ) (( 1 leq n leq 100,000 )) — the number of buildings. - The second line contains ( n ) integers ( h_1, h_2, ldots, h_n ) (( 0 leq h_i leq 10^9 )), where ( h_i ) is the height of the ( i )-th building. # Output format - Print a single integer — the area of the largest rectangle that can be formed within the bounds of the histogram. # Examples Example 1 **Input:** ``` 6 2 1 5 6 2 3 ``` **Output:** ``` 10 ``` Example 2 **Input:** ``` 7 6 2 5 4 5 1 6 ``` **Output:** ``` 12 ``` # Explanation In the first example, the largest rectangle has an area of 10 units, which spans the buildings with heights [5, 6] between the third and fourth positions. In the second example, the largest rectangle has an area of 12 units, which spans the buildings with heights [2, 5, 4, 5] between the second and fifth positions inclusive.","solution":"def largest_rectangle_area(heights): Given a list of heights representing buildings in a histogram, returns the area of the largest rectangle that can be formed within the bounds of the histogram. n = len(heights) stack = [] max_area = 0 for i in range(n): while stack and heights[stack[-1]] > heights[i]: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) while stack: height = heights[stack.pop()] width = n if not stack else n - stack[-1] - 1 max_area = max(max_area, height * width) return max_area"},{"question":"Develop an additional screen for the application: the document detail screen. Design: https://www.sketch.com/s/7d4e8bf8-1c60-21e9-7899-2e2ecca789bc, archive https://www.dropbox.com/s/u8kbgxrwi456trq/B.%20DocumentDetail%20App%20Graphics.zip?dl=0. Note that the Inspector mode is available after logging in. Support: We will evaluate the completion of the task based on the following criteria: Android: - Correct implementation of the provided design. - Proper handling of document content display, including title, author, date of creation, and document body. - Implementation of navigation from the document list screen to the document detail screen. - Handling of different screen sizes and orientations. iOS: - Appropriate utilization of UIKit to match the design. - Display the document\'s metadata correctly (title, author, date of creation). - Ensure the document body is scrollable and properly formatted. - Smooth navigation from the document list screen to the detail screen. - Responsive design that adapts to various device sizes and orientations. Extra Tips: - Pay special attention to the layout to ensure it matches the design specification. - Implement any required animations or transitions specified in the design. - Consider accessibility options to make the document detail screen accessible to users with disabilities.","solution":"from datetime import datetime class Document: def __init__(self, title, author, date_of_creation, body): self.title = title self.author = author self.date_of_creation = date_of_creation self.body = body class DocumentDetailScreen: def __init__(self): self.current_document = None def display_document(self, document): self.current_document = document return { \'title\': document.title, \'author\': document.author, \'date_of_creation\': document.date_of_creation.strftime(\\"%Y-%m-%d\\"), \'body\': document.body } def navigate_to_document(self, document): return self.display_document(document) # Example Usage: # doc = Document(\\"Sample Title\\", \\"Author Name\\", datetime.now(), \\"This is the body of the document.\\") # screen = DocumentDetailScreen() # print(screen.navigate_to_document(doc))"},{"question":"Write a function that simulates a simple banking system. Your task is to implement a class `BankAccount` which supports the following operations: 1. Initialize the bank account with a given balance. 2. Deposit a certain amount into the account. 3. Withdraw a certain amount from the account if sufficient balance is available, otherwise return an error message. 4. Transfer a certain amount from one account to another if sufficient balance is available, otherwise return an error message. 5. Get the current balance of the bank account. Your implementation should follow these requirements: - **Class: `BankAccount`** - **Method: `__init__(self, balance: int)`** Initialize the bank account with the given balance. - **Method: `deposit(self, amount: int) -> int`** Add the given amount to the account balance and return the new balance. - **Method: `withdraw(self, amount: int) -> Union[int, str]`** Subtract the given amount from the account balance and return the new balance. If the balance is insufficient, return the string `\\"Insufficient funds\\"`. - **Method: `transfer(self, amount: int, target_account: \'BankAccount\') -> Union[int, str]`** Transfer the given amount from this account to the target account. If the balance is insufficient, return the string `\\"Insufficient funds\\"`. Return the new balance of the account after the transfer. - **Method: `get_balance(self) -> int`** Return the current balance of the account. # Example ```python # Creating two bank accounts account1 = BankAccount(1000) account2 = BankAccount(500) # Depositing money into account1 print(account1.deposit(200)) # 1200 # Withdrawing money from account1 print(account1.withdraw(300)) # 900 print(account1.withdraw(1000)) # \\"Insufficient funds\\" # Transferring money from account1 to account2 print(account1.transfer(400, account2)) # 500 print(account2.get_balance()) # 900 # Getting balance of an account print(account1.get_balance()) # 500 ```","solution":"class BankAccount: def __init__(self, balance: int): self.balance = balance def deposit(self, amount: int) -> int: self.balance += amount return self.balance def withdraw(self, amount: int) -> int: if amount > self.balance: return \\"Insufficient funds\\" self.balance -= amount return self.balance def transfer(self, amount: int, target_account: \'BankAccount\') -> int: if amount > self.balance: return \\"Insufficient funds\\" self.balance -= amount target_account.deposit(amount) return self.balance def get_balance(self) -> int: return self.balance"},{"question":"You are given an array of integers that represent the heights of a series of towers. You are building a city skyline and want to remove some of these towers to ensure that each row of the skyline has exactly one tower, and no two towers in the skyline have the same height. Your task is to find the maximum number of towers you can keep while meeting the above requirements. The first line of the input will contain a single integer n (1 ≤ n ≤ 10^5), which represents the number of towers. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), which represent the heights of each tower. Output a single integer representing the maximum number of towers that can be kept while ensuring all remaining towers have unique heights. Example: Input: ``` 7 1 3 3 2 1 4 6 ``` Output: ``` 5 ``` Explanation: You can keep the towers with heights [1, 2, 3, 4, 6], removing the duplicates of heights 1 and 3, thus having a total of 5 towers with unique heights.","solution":"def max_unique_towers(n, heights): Returns the maximum number of towers that can be kept while ensuring all remaining towers have unique heights. Parameters: n (int): Number of towers heights (list of int): Heights of each tower Returns: int: The maximum number of towers with unique heights return len(set(heights))"},{"question":"Given a list of n integers, determine the smallest number of swaps needed to transform the list into a sorted sequence. Each swap consists of choosing any two adjacent elements and swapping them. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of integers in the list. The second line contains n space-separated integers — the elements of the list. It is guaranteed that all elements are distinct and lie between 1 and n, inclusive. Print a single integer — the minimum number of swaps needed to sort the list. **Example:** Input: 4 4 3 2 1 Output: 6 Explanation: One way to sort the list in 6 swaps is: 1. Swap elements at positions 1 and 2: [3, 4, 2, 1] 2. Swap elements at positions 2 and 3: [3, 2, 4, 1] 3. Swap elements at positions 3 and 4: [3, 2, 1, 4] 4. Swap elements at positions 2 and 3: [3, 1, 2, 4] 5. Swap elements at positions 1 and 2: [1, 3, 2, 4] 6. Swap elements at positions 2 and 3: [1, 2, 3, 4]","solution":"def minimum_swaps_to_sort(arr): Returns the minimum number of adjacent swaps needed to sort the list. def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n-1)"},{"question":"A group of archaeologists found an ancient scroll containing n numbers. While deciphering the scroll, they realized that it reveals a secret pattern! Each number in the scroll represents a specific value that needs to be analyzed. The task is to count how many times a specific value appears in a given range in the scroll. You are given an array of n integers representing the ancient numbers, along with m queries. For each query defined by indices l and r (both inclusive), determine the count of a given value k within the specified range. The first line of the input contains a single integer n (1 ≤ n ≤ 1,000,000) — the number of elements in the array. The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of the array. The third line of the input contains a single integer m (1 ≤ m ≤ 1,000,000) — the number of queries. Each of the next m lines contains three integers l, r, and k (1 ≤ l ≤ r ≤ n; 1 ≤ k ≤ 100), defining the range [l, r] and the value k to count. Output m integers — the count of the value k for each query in their respective order. Example: Input: 7 1 2 1 3 4 2 1 3 1 4 1 2 5 2 3 7 1 Output: 2 1 2","solution":"def count_k_in_range(arr, queries): results = [] for l, r, k in queries: count = sum(1 for i in range(l-1, r) if arr[i] == k) results.append(count) return results # Example usage # n = 7 # arr = [1, 2, 1, 3, 4, 2, 1] # m = 3 # queries = [(1, 4, 1), (2, 5, 2), (3, 7, 1)] # print(count_k_in_range(arr, queries)) # Should output [2, 1, 2]"},{"question":"In a coastal city, the local government has decided to construct a series of interconnected sea bridges and islands to boost maritime navigation. Each bridge connects exactly two islands and there is no more than one bridge directly connecting any pair of islands. The mayor, being a fan of statistics, wants to determine the minimal number of bridges that need to be traversed to travel from one island to another. Your task is to write a program that outputs the shortest bridge path between each pair of islands. If two islands are not directly connected or reachable through any series of bridges, the distance between them should be considered infinite. Input: - The first line contains an integer n (2 ≤ n ≤ 500), the number of islands. - The second line contains an integer m (1 ≤ m ≤ 5000), the number of bridges. - The next m lines each contain two integers ui, vi (1 ≤ ui, vi ≤ n), representing a bridge connecting island ui and island vi. Output: - An n x n matrix where the element at the i-th row and j-th column represents the minimum number of bridges required to travel from island i to island j. If island j is not reachable from island i, the matrix should have \'INF\' at that position. Example: Input: 4 4 1 2 2 3 3 4 4 1 Output: 0 1 2 1 1 0 1 2 2 1 0 1 1 2 1 0 In the example above, there are 4 islands and 4 bridges. The matrix represents the shortest paths between each pair of islands, with \'0\' indicating no travel needed from an island to itself, and increasing numbers showing the bridge paths required to travel between the islands.","solution":"def floyd_warshall(n, edges): INF = float(\'inf\') dist = [[INF] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 for u, v in edges: dist[u - 1][v - 1] = 1 dist[v - 1][u - 1] = 1 for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return [[\'INF\' if dist[i][j] == INF else dist[i][j] for j in range(n)] for i in range(n)] def get_shortest_paths(n, m, bridges): return floyd_warshall(n, bridges)"},{"question":"You are given a string s consisting only of lowercase English letters. You can perform the following operation on the string any number of times: 1. Pick two non-overlapping substrings that are equal and remove both from the string. Your task is to determine the minimum possible length of the remaining string after performing the above operation any number of times. The first line of input contains a single integer t (1 ≤ t ≤ 10), the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 1000). For each test case, output a single integer, the minimum possible length of the string after performing the operations as many times as possible. Example: Input: ``` 3 abcdab aabbcc abcabc ``` Output: ``` 2 0 0 ``` In the first sample, one way to minimize the length is to remove \\"ab\\" and \\"ab\\", leaving \\"cd\\", which has a length of 2. In the second and third samples, we can remove all characters by repeatedly finding and removing equal non-overlapping substrings.","solution":"def min_remaining_length(t, test_cases): Returns minimum possible length of the remaining string after performing the operation. results = [] for s in test_cases: # Count occurrences of each character char_counts = {} for char in s: char_counts[char] = char_counts.get(char, 0) + 1 # Calculate number of pairs that can be removed pairs = sum(count // 2 for count in char_counts.values()) # Each pair removal results in 2 characters being removed min_length = len(s) - 2 * pairs results.append(min_length) return results"},{"question":"You are given a non-circular linked list where each node contains an integer value. Write a function to identify and remove all nodes from the list that have a duplicate integer value, preserving the relative order of the nodes that remain. Nodes should be removed entirely rather than just skipping them. Input: - The first line represents the number of nodes in the linked list. - The subsequent lines contain the values of the linked list nodes, one value per line. Output: - The function should return the modified linked list. - If the list is empty after removals, output an empty list. Example: Input: ``` 8 1 2 3 2 4 1 4 5 ``` Output: ``` 3 5 ``` In this case, the nodes with values `1`, `2`, and `4` appear more than once and are removed, leaving the nodes with values `3` and `5` in the list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def remove_duplicates(head): if not head: return None value_count = {} curr = head while curr: if curr.value in value_count: value_count[curr.value] += 1 else: value_count[curr.value] = 1 curr = curr.next dummy = ListNode(0) dummy.next = head prev, curr = dummy, head while curr: if value_count[curr.value] > 1: prev.next = curr.next else: prev = curr curr = curr.next return dummy.next def to_list(head): values = [] curr = head while curr: values.append(curr.value) curr = curr.next return values def from_list(values): if not values: return None head = ListNode(values[0]) curr = head for value in values[1:]: curr.next = ListNode(value) curr = curr.next return head"},{"question":"You are given an integer array a_1, a_2, ldots, a_n and an integer k. Your task is to find the minimum number of operations required to make the array strictly increasing. In one operation, you can increment any element of the array by 1. Each test contains one or more test cases. The first line contains the number of test cases t (1 le t le 100). The first line of each test case consists of two integers n and k — the length of the array and the number of operations allowed (1 le n le 100, 1 le k le 10000). The second line of each test case consists of n integers a_1, ldots, a_n — elements of the array (1 le a_i le 100). For each test case, print the minimum number of operations required to make the array strictly increasing. If it is impossible to make the array strictly increasing with the given number of operations, print -1.","solution":"def min_operations_to_increasing(arr, k): Returns the minimum number of operations required to make the array strictly increasing, or -1 if it\'s not possible with at most k operations. n = len(arr) operations = 0 for i in range(1, n): if arr[i] <= arr[i-1]: needed_increments = arr[i-1] - arr[i] + 1 arr[i] += needed_increments operations += needed_increments if operations > k: return -1 return operations if operations <= k else -1"},{"question":"Alice is passionate about gardening and she wants to design a beautiful garden with a symmetrical flower path. Specifically, she wants to place flowers in a garden represented by a string of length n, where each character denotes a flower type. The garden is said to be symmetrical if it reads the same forward and backward. For example, \\"abccba\\" is symmetrical, but \\"abcdba\\" is not. Alice can change any flower into another type if she wishes to make the garden symmetrical. She wants to achieve this symmetry with the minimum number of changes. Your task is to help Alice find the minimum number of changes needed to make the string symmetrical. # Input - The first line contains an integer t (1 le t le 100) — the number of test cases. - Each of the next t lines contains a single string s (1 le |s| le 1000) representing the current arrangement of flowers in the garden. # Output For each test case, output a single integer — the minimum number of changes required to make the flower garden symmetrical. # Example Input ``` 3 abccba abcdba abcdef ``` Output ``` 0 1 3 ``` # Explanation - In the first test case, the string \\"abccba\\" is already symmetrical, so no changes are needed. - In the second test case, changing the last \'b\' to \'a\' will make the string \\"abcdba\\" into \\"abcaba\\" which is symmetrical, so only 1 change is needed. - In the third test case, changing \'b\', \'d\', and \'f\' to \'a\', \'c\', and \'e\', respectively, will make \\"abcdef\\" into \\"abcba\\", which is symmetrical with 3 changes.","solution":"def min_changes_to_symmetry(s): n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes def solve_symmetry_problem(t, string_cases): result = [] for s in string_cases: result.append(min_changes_to_symmetry(s)) return result"},{"question":"A gaming company is designing a new feature for their game where players can create custom races on a grid. The grid is represented as a matrix containing n rows and m columns. Each cell in the grid can be marked as 0 (walkable) or 1 (blocked). The start point of the race is located at the top-left cell of the grid (i.e., cell (0, 0)), and the end point is located at the bottom-right cell of the grid (i.e., cell (n-1, m-1)). Players want to determine the shortest path from the start point to the end point without stepping on any blocked cells. The player can move up, down, left, or right from a cell to an adjacent cell. Your task is to write a program to calculate and print the number of cells in the shortest path from the start point to the end point. If it is not possible to reach the end point from the start point, the program should print -1. The input format is as follows: - The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. - The next n lines each contain m integers (either 0 or 1) representing the grid. The output format is: - Print a single integer — the number of cells in the shortest path from the start to the end point, or -1 if there is no such path. Example: Input: 3 3 0 1 0 0 0 0 1 1 0 Output: 5 Explanation: The shortest path from (0,0) to (2,2) is (0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2), which passes through 5 cells. The following function signature can be used in the solution: ```python def shortest_path(grid: List[List[int]]) -> int: pass ```","solution":"from collections import deque from typing import List def shortest_path(grid: List[List[int]]) -> int: if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # no path found"},{"question":"Programmers in WidgetLand are working on a new application for managing employee attendance. The company tracks the attendance of its employees using a simple system: each entry in the attendance record is either \'P\' (for Present) or \'A\' (for Absent). The attendance record for each employee is a string consisting of these two characters. The company wants to identify employees with \'perfect attendance.\' An employee has perfect attendance if their attendance record contains no \'A\' characters. However, there is a caveat: if the employee has been present (\'P\') followed by a single absence (\'A\'), that counts as perfect attendance as long as there are no further absences after the first \'A\'. Write a function `has_perfect_attendance(attendance: str) -> bool` that takes an attendance record (as a string) and returns `True` if the employee has perfect attendance based on the criteria above, and `False` otherwise. # Input: - A single string `attendance` (1 <= len(attendance) <= 1000) consisting only of characters \'P\' and \'A\'. # Output: - A boolean value `True` if the attendance record is considered perfect, `False` otherwise. # Examples: Example 1: ```python has_perfect_attendance(\\"PPPAPPPP\\") ``` Output: ```python True ``` Explanation: The employee has one absence (\'A\') after a series of presences (\'P\'), and no further absences after the first \'A\'. Example 2: ```python has_perfect_attendance(\\"APP\\") ``` Output: ```python False ``` Explanation: The employee has an absence (\'A\') at the beginning, followed by presences (\'P\'), which is not allowed. Example 3: ```python has_perfect_attendance(\\"PPPPPP\\") ``` Output: ```python True ``` Explanation: The employee has no absences (\'A\') in their record. Example 4: ```python has_perfect_attendance(\\"PAPPPAP\\") ``` Output: ```python False ``` Explanation: The employee has multiple absences (\'A\') in their record. Your task is to implement the `has_perfect_attendance` function to determine if an employee\'s attendance record meets the criteria for perfect attendance.","solution":"def has_perfect_attendance(attendance: str) -> bool: Returns True if the employee has perfect attendance based on the criteria provided, and False otherwise. An employee has perfect attendance if their attendance record contains no \'A\' characters or has a single \'A\' that appears after some \'P\' and no further \'A\' after the first one. a_found = False for i in range(len(attendance)): if attendance[i] == \'A\': if a_found: return False # A second \'A\' found else: a_found = True if i == 0: return False # \'A\' cannot be at the beginning return True"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to reorder the string in such a way that no two adjacent characters are the same. If such a reordering is possible, return any valid reordering of s. If it is not possible, return an empty string. # Input - A single string s (1 ≤ length of s ≤ 10^5). # Output - A single string which is a valid reordering of s where no two adjacent characters are the same. If no valid reordering exists, return an empty string. # Example Input ``` aab ``` Output ``` aba ``` Input ``` aaab ``` Output ``` \\"\\" (an empty string) ``` # Note In the first example, the string \\"aab\\" can be rearranged to \\"aba\\" which meets the requirement. In the second example, there is no way to rearrange \\"aaab\\" such that no two adjacent characters are the same, so the output is an empty string.","solution":"import heapq from collections import Counter def reorganize_string(s): Reorders the string such that no two adjacent characters are the same. If such a reordering is possible, returns a valid reordering. If it is not possible, returns an empty string. count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \\"\\" result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char result_str = \\"\\".join(result) if len(result_str) != len(s): return \\"\\" return result_str"},{"question":"# Balanced Parentheses One of the fundamental concepts in many programming languages is the use of parentheses to indicate various structures, such as grouping of expressions or defining blocks of code. However, mismatched or unbalanced use of parentheses can lead to syntax errors and unexpected behavior. To avoid such issues, it\'s important to ensure that every opening parenthesis has a corresponding closing parenthesis and that they are properly nested. Your task is to write a function that checks if a given string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is a balanced string of parentheses. A string is considered balanced if: 1. Every opening parenthesis has a corresponding closing parenthesis. 2. The parentheses are properly nested. Examples of balanced strings: - \\"()\\" - \\"(())\\" - \\"({[]})\\" - \\"[({})]\\" Examples of unbalanced strings: - \\"(\\" - \\"(((\\" - \\"({[})\\" - \\"[(])\\" **Input:** A single line containing a string with a maximum length of 1000 composed only of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. **Output:** One line containing either \\"balanced\\" or \\"unbalanced\\" depending on whether the string is balanced or not. Example: ``` Input: ({[]}) Output: balanced ``` ``` Input: [(]) Output: unbalanced ```","solution":"def is_balanced(s): Checks if the input string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is a balanced string of parentheses. Args: s (str): Input string to check. Returns: str: \\"balanced\\" if the string is balanced, otherwise \\"unbalanced\\". stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses: if not stack or stack[-1] != matching_parentheses[char]: return \\"unbalanced\\" stack.pop() else: return \\"unbalanced\\" return \\"balanced\\" if not stack else \\"unbalanced\\""},{"question":"Pavel has a collection of square tiles in various sizes. Each tile\'s side length is a power of two. He has b_0 tiles with side length 2^0 = 1, b_1 tiles with side length 2^1 = 2, ..., b_{m-1} tiles with side length 2^{m-1}. Pavel wants to cover a rectangular grid of size W times H (width W and height H) using these tiles. He wants to minimize the number of tiles used, and he can use each tile at most once. Determine the minimum number of tiles needed to cover the rectangular grid, or print -1 if it\'s impossible to cover the grid with the given tiles. The first line contains two integers W and H (1 leq W, H leq 10^9) — the width and height of the rectangular grid. The second line contains a single integer m (1 leq m leq 100) — the number of different side lengths of the tiles. The third line contains m integers b_0, b_1, ..., b_{m-1} (0 leq b_i leq 50), where b_i is the number of tiles with the side length equal to 2^i. Print a single integer — the minimum number of tiles needed to cover the entire grid, or -1 if the grid cannot be fully covered. For example, if the grid dimensions are 4x4, can be covered with one tile of size 4x4; if it is 2x4, can be covered with two tiles of size 2x2, and so on. However, a non-power-of-two dimension, such as 3x3, may require a combination of smaller tiles.","solution":"def min_tiles_to_cover(W, H, m, b): def fit(tile_size, tile_count): max_horizontal = W // tile_size max_vertical = H // tile_size return min(tile_count, max_horizontal * max_vertical) total_area = W * H tile_sizes = [2 ** i for i in range(m)] b_sorted = list(zip(tile_sizes, b)) b_sorted.sort(reverse=True, key=lambda x: x[0]) tile_used = 0 for tile_size, tile_count in b_sorted: tile_area = tile_size ** 2 area_covered_by_tile = fit(tile_size, tile_count) * tile_area if area_covered_by_tile > 0: tile_used += (area_covered_by_tile // tile_area) total_area -= area_covered_by_tile if total_area > 0: return -1 return tile_used"},{"question":"You are given two-dimensional points representing the locations of various trees in a garden. You are supposed to plant an irrigation system such that it covers all the trees with the minimum possible length of the irrigation pipe. The irrigation pipe must be a straight line. Formally, given an array of n coordinates of the trees, determine the length of the minimal segment (pipe) that should be placed to cover all trees. The first line contains a single integer n (2 le n le 10^5) - the number of trees. Each of the following n lines contains two space-separated integers x and y (-10^6 le x, y le 10^6), which represent the coordinates of the trees. Output a single number, the length of the minimal irrigation pipe required, with an absolute error of at most 1e-6. # Example Input 4 0 0 0 5 5 0 5 5 Output 7.071068","solution":"import math def minimal_irrigation_pipe_length(n, coordinates): Calculate the minimal length of a pipe required to cover all the trees. Args: n: int : Number of trees coordinates: list of tuples : List of (x, y) coordinates of the trees Returns: float : The length of the minimal irrigation pipe if n <= 1: return 0.0 min_x = min(coord[0] for coord in coordinates) max_x = max(coord[0] for coord in coordinates) min_y = min(coord[1] for coord in coordinates) max_y = max(coord[1] for coord in coordinates) return math.sqrt((max_x - min_x)**2 + (max_y - min_y)**2)"},{"question":"Saitama and Genos are playing a game on a rectangular grid of size n x m (1 ≤ n, m ≤ 1000). The game starts with Saitama at the top-left corner of the grid (1,1) and Genos at the bottom-right corner (n,m). Saitama and Genos can move to any of the four adjacent cells (up, down, left, right), but they cannot move to a cell that has already been visited by either of them. Saitama and Genos move alternately. Saitama moves first, then Genos, and they keep taking turns until neither can move. The players\' goal is to visit as many cells as possible on the grid. Write a program to determine the number of cells that will be visited if both players play optimally to maximize the total number of visited cells. The input consists of two integers n and m, the dimensions of the grid. The output should be a single integer, the maximum number of cells that can be visited. # Sample Input ``` 3 3 ``` # Sample Output ``` 9 ``` # Explanation One possible sequence of moves is the following: - Saitama starts at (1,1) and moves to (1,2), (1,3), (2,3), (3,3), (3,2), (3,1), (2,1), (2,2). - At the same time, Genos starts at (3,3) and alternates moves with Saitama without visiting any cell Saitama has already visited. Thus, all cells of the grid will be visited, resulting in a total of 9 visited cells.","solution":"def max_visited_cells(n, m): Returns the maximum number of cells that can be visited on an n x m grid if Saitama and Genos play optimally. # Since both players play optimally to visit the maximum number of cells # The answer is straightforward as they will always be able to visit all cells return n * m"},{"question":"You are developing a new search engine tool that processes text documents to extract and index keywords. To improve its performance, you need to implement a custom stop-word removal system. A stop-word is a commonly used word (such as \\"is\\", \\"the\\", \\"in\\") that a search engine has been programmed to ignore, both when indexing entries for searching and when retrieving them as the result of a search query. Your task is to write a function that removes specified stop-words from a given text. Given a list of stop-words and a text string, your function should return the text with all stop-words removed. To simplify the problem, stop-words to be removed are provided as a list and the text consists of single space-separated words, all in lowercase. # Input - A list of strings `stop_words` where each string is a stop-word (`1 <= len(stop_words) <= 1000`). - A string `text` consisting of words separated by single spaces (`1 <= len(text) <= 10000`). # Output - The modified text string with all stop-words removed. Words in the text should remain in their original order. # Example ```plaintext Input: stop_words = [\\"is\\", \\"the\\", \\"in\\", \\"at\\", \\"of\\", \\"and\\", \\"a\\"] text = \\"the quick brown fox jumps over the lazy dog\\" Output: \\"quick brown fox jumps over lazy dog\\" Input: stop_words = [\\"he\\", \\"she\\", \\"it\\", \\"they\\", \\"him\\", \\"her\\", \\"them\\"] text = \\"he said that she would be here but she did not show up\\" Output: \\"said that would be here but did not show up\\" ``` # Notes - The text should be returned without any leading or trailing spaces. - Ensure that multiple consecutive spaces between words are not introduced in the modified text. - Preserve the original order of words in the text.","solution":"def remove_stop_words(stop_words, text): Removes specified stop words from the text and returns the modified text. Parameters: stop_words (list): List of stop words to be removed. text (str): Input text string containing words separated by single spaces. Returns: str: Modified text with stop words removed. stop_words_set = set(stop_words) words = text.split() filtered_words = [word for word in words if word not in stop_words_set] return \' \'.join(filtered_words)"},{"question":"In a faraway kingdom, there is a magical plant called the Fibonacci Flower, which grows according to a peculiar pattern. The kingdom\'s gardener, Mr. Green, is curious to understand the growth potential of the plant by studying its growth intervals. Given an array of integers representing the growth rate of the plant on specific days, Mr. Green wants to determine the maximum possible sum of a contiguous subarray. Your task is to help Mr. Green by finding the maximum sum of any contiguous subarray in the given array. The first line contains a single integer n (1 ≤ n ≤ 105) — the size of the array growth. The second line contains n integers growth1, growth2, ..., growthn (-109 ≤ growthi ≤ 109) — the growth rates of the plant on each day. Print the only integer — the maximum sum of any contiguous subarray in the given array. In the first sample case, the optimal sum is obtained from the subarray [5, -2, 3] which gives a sum of 6. In the second sample case, the maximum sum is the single element [1].","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray. Parameters: arr (list): List of integers representing the growth rates of the plant. Returns: int: The maximum sum of any contiguous subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"A restaurant management system needs a feature to calculate the average rating of the restaurant based on customer reviews. A review contains a score between 1 and 5. The system receives a number of reviews, and for each review, the score is stored in the system. However, to discourage spam reviews, the system should adjust the average rating by ignoring the highest and lowest scores in the dataset. If there are multiple lowest or highest scores, only one occurrence of each should be discarded. Write a function `adjusted_average` that takes a list of integer scores as input and returns the adjusted average rating as a float rounded to one decimal place. If there are fewer than three scores, the function should return `0.0`. # Input - A single line containing an integer n (0 ≤ n ≤ 100), the number of reviews. - A second line with n integers separated by spaces, each representing a score between 1 and 5. # Output - A single float number rounded to one decimal place, representing the adjusted average rating. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 3.0 ``` Input ``` 2 3 4 ``` Output ``` 0.0 ``` # Notes - In the first example, after removing the lowest (1) and highest (5), the scores left are [2, 3, 4]. The average is (2+3+4)/3 = 3.0. - In the second example, there are fewer than three scores, so the output is 0.0.","solution":"def adjusted_average(scores): if len(scores) < 3: return 0.0 min_score = min(scores) max_score = max(scores) scores.remove(min_score) scores.remove(max_score) adjusted_average = sum(scores) / len(scores) return round(adjusted_average, 1)"},{"question":"Mike loves symmetric strings. A string is symmetric if it reads the same forward and backward, for example, \\"racecar\\" and \\"level\\". Mike wants to create symmetric strings but with a twist. Instead of using only lowercase letters, he wants to include numbers and make sure that the length of the string is exactly `n`. Your task is to write a function that returns the number of different symmetric strings of length `n` that can be created using only lowercase letters (`a` to `z`) and digits (`0` to `9`). If the result exceeds 10^9, return the result modulo 10^9 + 7. The input contains a single integer `n` (1 ≤ n ≤ 1000) representing the length of the symmetric string. Output the number of different symmetric strings of length `n`, modulo 10^9 + 7. For instance, if `n = 1`, there are 36 possible symmetric strings (each single character is symmetric). If `n = 2`, there are 36 * 36 possible symmetric strings. **Examples:** Input: ``` 1 ``` Output: ``` 36 ``` Input: ``` 2 ``` Output: ``` 1296 ```","solution":"def count_symmetric_strings(n): Returns the number of different symmetric strings of length n that can be created using only lowercase letters (\'a\' to \'z\') and digits (\'0\' to \'9\'), modulo 10^9 + 7. MOD = 10**9 + 7 num_possible_chars = 36 # 26 lowercase letters + 10 digits # If n is odd, center character can be any of num_possible_chars choices if n % 2 == 1: half_length = n // 2 count = (num_possible_chars * (num_possible_chars ** half_length)**2) % MOD else: half_length = n // 2 count = (num_possible_chars ** half_length) ** 2 % MOD return count"},{"question":"You are given an integer array nums. A subarray is a contiguous part of an array. An array is bitonic if it consists of an increasing sequence followed by a decreasing sequence. A strictly increasing or strictly decreasing subarray is also considered bitonic. Your task is to find the maximum length of a bitonic subarray within nums. Write a function `maxBitonicSubarray(nums)` that takes an integer array `nums` of length `n` (1 le n le 10^5). Assume that every element within nums is an integer such that -10^9 le nums[i] le 10^9. The function should return a single integer denoting the length of the longest bitonic subarray. # Input - A single list of integers `nums`. # Output - Return an integer representing the length of the longest bitonic subarray. # Example Input: ```python nums = [1, 3, 5, 4, 2] ``` Output: ``` 5 ``` Explanation: The given array is itself bitonic with an increasing sequence [1, 3, 5] followed by a decreasing sequence [4, 2]. Input: ```python nums = [1, 2, 2, 3, 4, 3, 2, 5, 6] ``` Output: ``` 5 ``` Explanation: The longest bitonic subarray is [2, 3, 4, 3, 2]. # Constraints - The function should run in O(n) time complexity. - Arrays with less than 3 elements can have the bitonic length equivalent to their length if the elements are either increasing or decreasing.","solution":"def maxBitonicSubarray(nums): n = len(nums) if n <= 2: return n # Arrays to store the length of increasing or decreasing subarray ending at index i inc = [1] * n dec = [1] * n # Fill the increasing subarray lengths for i in range(1, n): if nums[i] > nums[i - 1]: inc[i] = inc[i - 1] + 1 # Fill the decreasing subarray lengths for i in range(n - 2, -1, -1): if nums[i] > nums[i + 1]: dec[i] = dec[i + 1] + 1 # Find the maximum length of bitonic subarray max_len = 0 for i in range(n): max_len = max(max_len, inc[i] + dec[i] - 1) return max_len"},{"question":"You have been given an array of integers that represents heights of people standing in a queue. The people in the queue follow a specific rule: each person has to see at least one person in front of them who is taller than themselves, except for the tallest person in the front, who doesn\'t have to follow this rule. A rearrangement is valid if, after the rearrangement: 1. Each person, except the tallest person, sees at least one person in front of them who is taller than themselves. Determine whether the given array of integers can be rearranged to form a valid queue under the given conditions. The first line contains an integer n (1 leq n leq 10^5), the number of people in the queue. The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9), where h_i denotes the height of the person. Output \\"YES\\" (without quotes) if the heights can be rearranged to form a valid queue; otherwise, output \\"NO\\" (without quotes). # Example Input ``` 5 3 5 1 4 2 ``` Output ``` YES ``` Explanation One possible valid rearrangement is [5, 1, 4, 2, 3]. Here, except for the first person (height 5), everyone else has someone taller in front of them: - Person with height 1 sees 5. - Person with height 4 sees 5. - Person with height 2 sees 5 and 4. - Person with height 3 sees 5, 4, and 2.","solution":"def can_form_valid_queue(n, heights): if n == 1: return \\"YES\\" sorted_heights = sorted(heights, reverse=True) if sorted_heights[0] == sorted_heights[1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a string containing a mathematical expression. The expression may include integers, addition (+) and multiplication (*) operations, and parentheses. Your task is to evaluate the expression and return the result as an integer. The operations follow the usual precedence rules: parentheses first, then multiplication, and finally addition. Write a function `evaluate_expression(expression: str) -> int` that takes in a string expression and returns the evaluated result. # Examples Example 1 Input: ```python expression = \\"2+3*4\\" ``` Output: ```python 14 ``` Explanation: The multiplication should be evaluated first: `3*4 = 12`, then the result is added to 2: `2+12 = 14`. Example 2 Input: ```python expression = \\"(1+2)*(3+4)\\" ``` Output: ```python 21 ``` Explanation: The expressions in parentheses are evaluated first: `1+2 = 3` and `3+4 = 7`. Then the results are multiplied: `3*7 = 21`. Example 3 Input: ```python expression = \\"10+(2*5)\\" ``` Output: ```python 20 ``` Explanation: The multiplication inside parentheses is evaluated first: `2*5 = 10`. Then the result is added to 10: `10+10 = 20`. # Constraints - The input string will only contain non-negative integers, the \'+\', \'*\', and \'(\' and \')\' characters. - The input string will be a valid expression according to the above rules. - The length of the string will be at most 100 characters.","solution":"def evaluate_expression(expression: str) -> int: Evaluate a mathematical expression containing integers, addition (+), multiplication (*), and parentheses. Follows standard precedence rules: parentheses first, then multiplication, and finally addition. # Use Python\'s eval function which respects the precedence rules return eval(expression)"},{"question":"To celebrate the launch of their new tech startup, Jenna and Mark decided to hold a party. For the entertainment, they set up a game involving strings and palindrome formation. Everyone loves a good challenge, so they devised the following task for their guests: Given a string `s`, determine the minimum number of characters that need to be inserted to make `s` a palindrome. A palindrome is a string that reads the same forward and backward. Your task is to write a function that calculates this minimum number of insertions. Input Format: - The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. - The next `t` lines each contain a string `s` (1 ≤ |s| ≤ 1000), where `|s|` is the length of the string. Each string consists only of lowercase English letters. Output Format: - For each test case, output a single integer on a new line — the minimum number of insertions required to make the string a palindrome. Example: Input: ``` 3 abc race aaaa ``` Output: ``` 2 3 0 ``` Explanation: - For the first test case, the string \\"abc\\" can be transformed into \\"abcba\\" by inserting 2 characters (\'b\' and \'a\'). - For the second test case, the string \\"race\\" can be transformed into \\"ecarace\\" by inserting 3 characters (\'e\', \'c\', \'a\'). - For the third test case, the string \\"aaaa\\" is already a palindrome, so no insertions are needed.","solution":"def min_insertions_to_make_palindrome(s): Returns the minimum number of insertions needed to make the string s a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 return dp[0][n - 1] def solve(t, test_cases): results = [] for s in test_cases: results.append(min_insertions_to_make_palindrome(s)) return results"},{"question":"You are given a matrix of numbers with n rows and m columns. Each cell in the matrix contains a single integer. You want to identify whether there exists a path from the top-left corner (1,1) to the bottom-right corner (n,m) such that each step on the path always moves to a cell of the same or decreasing value. The path can only be formed by moving one cell up, down, left, or right at each step. Input The first line contains two integers, n (1 le n le 1000) and m (1 le m le 1000), the dimensions of the matrix. Each of the next n lines contains m integers separated by spaces, where each integer a_{ij} (1 le a_{ij} le 10^6) represents a cell in the matrix. Output Print YES if there exists a valid path from the top-left to the bottom-right corner following the path constraints, otherwise print NO. Examples Input 4 4 5 4 3 2 4 5 1 6 3 2 2 5 6 1 1 1 Output YES Input 3 3 1 2 3 4 5 6 7 8 9 Output NO","solution":"def is_valid_path(n, m, matrix): def dfs(x, y, value): if x < 0 or x >= n or y < 0 or y >= m or visited[x][y] or matrix[x][y] > value: return False if x == n - 1 and y == m - 1: return True visited[x][y] = True if (dfs(x + 1, y, matrix[x][y]) or dfs(x - 1, y, matrix[x][y]) or dfs(x, y + 1, matrix[x][y]) or dfs(x, y - 1, matrix[x][y])): return True visited[x][y] = False return False visited = [[False] * m for _ in range(n)] return \\"YES\\" if dfs(0, 0, matrix[0][0]) else \\"NO\\" # Sample Usage n = 4 m = 4 matrix = [[5, 4, 3, 2], [4, 5, 1, 6], [3, 2, 2, 5], [6, 1, 1, 1]] print(is_valid_path(n, m, matrix)) # Output: YES"},{"question":"Given an array of integers `arr` of size `n`, you are to find a triplet `(a, b, c)` such that: 1. `a`, `b`, and `c` are elements of the array `arr`. 2. `a < b < c`. 3. The product `a * b * c` is maximized. If there are multiple such triplets with the same maximum product, you may return any of them. If no triplet exists that satisfies the conditions, return `None`. # Input - An integer `n`: the size of the array (1 ≤ n ≤ 10^5). - An array `arr` containing `n` integers (each integer is between -10^9 and 10^9). # Output Three space-separated integers representing the triplet `(a, b, c)`, or `None` if no such triplet exists. # Example Example 1: **Input:** ``` 6 1 2 3 4 5 6 ``` **Output:** ``` 4 5 6 ``` Example 2: **Input:** ``` 5 -10 -10 5 2 1 ``` **Output:** ``` -10 5 1 ``` Example 3: **Input:** ``` 3 1 1 1 ``` **Output:** ``` 1 1 1 ``` Example 4: **Input:** ``` 2 1 2 ``` **Output:** ``` None ``` # Note In Example 1, the triplet `(4, 5, 6)` has the maximum product of 120. In Example 2, the triplet `(-10, 5, 1)` has the maximum product of -50. In Example 3, there is only one possible triplet `(1, 1, 1)`. In Example 4, there are not enough elements in the array to find a triplet. Hence, the output is `None`. You don\'t need to worry about the order of elements in the returned triplet in the output. Any order is acceptable, as long as the constraints are satisfied.","solution":"def max_product_triplet(arr): Returns a triplet (a, b, c) such that a < b < c and the product a * b * c is maximized. If no such triplet exists, returns None. n = len(arr) if n < 3: return None arr.sort() # Possible triplets: # 1. Three largest positives: (arr[-3], arr[-2], arr[-1]) # 2. Two smallest negatives and largest positive: (arr[0], arr[1], arr[-1]) candidate1 = arr[-3] * arr[-2] * arr[-1] candidate2 = arr[0] * arr[1] * arr[-1] if candidate1 >= candidate2: return arr[-3], arr[-2], arr[-1] else: return arr[0], arr[1], arr[-1]"},{"question":"You are given an array of integers. An equalizer is an integer that makes the sum of all elements in the array equal to zero when subtracted from each element. Your task is to find and output the equalizer for the given array if it exists. If it does not exist, output -1. **Input:** - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9) — the elements of the array. **Output:** - Output the equalizer if it exists. Otherwise, output -1. **Example:** **Input:** ``` 5 1 2 3 4 5 ``` **Output:** ``` 3 ``` **Explanation:** Subtracting 3 from each element, the new array becomes [-2, -1, 0, 1, 2], and their sum is zero. **Example:** **Input:** ``` 4 1 1 1 1 ``` **Output:** ``` 1 ``` **Explanation:** Subtracting 1 from each element, the new array becomes [0, 0, 0, 0], and their sum is zero. **Example:** **Input:** ``` 3 1 2 4 ``` **Output:** ``` -1 ``` **Explanation:** There is no integer that can be subtracted from each element to make the sum zero.","solution":"def find_equalizer(arr): This function finds the equalizer for a given array of integers. The equalizer is an integer that, when subtracted from each element in the array, makes their sum equal zero. Parameters: arr (list): List of integers Returns: int: The equalizer if it exists, otherwise -1 total_sum = sum(arr) n = len(arr) # Check if the sum is directly divisible by the number of elements if total_sum % n == 0: return total_sum // n else: return -1"},{"question":"Vim users love customizing their editor with various plugins to enhance their productivity. Recently, they\'ve been experimenting with plugins that automatically format code. Among these, a particular feature is to ensure that code indentation follows specific rules. Your task is to write a program that checks whether a given piece of code has consistent indentation. The program should adhere to the following rules: 1. Code lines should be indented using only spaces. 2. All lines in a block should be indented the same number of spaces. 3. Nested blocks should be indented by exactly 4 spaces more than the containing block. 4. The first line of the code is not indented. You are given a list of strings, where each string represents a line of code. Determine if the code follows the indentation rules mentioned above. # Input - The first line of the input contains an integer n (1 ≤ n ≤ 5000) — the number of lines in the code. - The next n lines represent the code, where each line is a string containing only spaces and non-space printable characters. # Output - Print `YES` if the code follows the indentation rules. - Print `NO` otherwise. # Examples Input ``` 4 def main(): print(\\"Hello, World!\\") if condition: print(\\"Condition met\\") ``` Output ``` YES ``` Input ``` 4 def hello(): print(\\"Hello, World!\\") if True: print(\\"True!\\") ``` Output ``` NO ```","solution":"def check_indentation(n, lines): def is_valid_indentation(line, expected_indent): count_spaces = len(line) - len(line.lstrip(\' \')) if count_spaces != expected_indent: return False return True expected_indent_stack = [0] for line in lines: stripped_line = line.strip() if not stripped_line: continue # skip empty lines current_expected_indent = expected_indent_stack[-1] if not is_valid_indentation(line, current_expected_indent): return \\"NO\\" if stripped_line.endswith(\':\'): expected_indent_stack.append(current_expected_indent + 4) elif not stripped_line: continue else: while len(expected_indent_stack) > 1 and len(line) - len(line.lstrip(\' \')) < expected_indent_stack[-1]: expected_indent_stack.pop() return \\"YES\\""},{"question":"You are given an array of integers and a range [L, R]. Your task is to find the number of subsequences that have at least one element within the range [L, R]. Each subsequence is created by deleting zero or more elements of the array without changing the order of remaining elements. The first line of input contains a single integer n (1 leq n leq 100,000) representing the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. Each element is an integer between 1 and 10^9. The third line contains two space-separated integers L and R (1 leq L leq R leq 10^9) representing the range. Output a single integer representing the number of valid subsequences. For example, consider the sequence [1, 2, 3] and the range [2, 3]. The valid subsequences are [2], [3], [2, 3], [1, 2], [1, 3], [1, 2, 3]. Hence, the result is 6. # Input - First line: Integer n - Second line: n space-separated integers - Third line: Two space-separated integers L and R # Output - Single integer representing the number of valid subsequences # Example Input ``` 3 1 2 3 2 3 ``` Output ``` 6 ```","solution":"def count_valid_subsequences(arr, L, R): Given an array of integers and a range [L, R], this function returns the number of subsequences that have at least one element within the range. total_subsequences = (1 << len(arr)) - 1 invalid_subsequences = 1 for num in arr: if num < L or num > R: invalid_subsequences *= 2 return total_subsequences - invalid_subsequences + 1 # Sample input n = 3 arr = [1, 2, 3] L, R = 2, 3 print(count_valid_subsequences(arr, L, R)) # Should print 6"},{"question":"You are given a list of pairs, each representing the bounding integers of a range [a, b] that is closed (i.e., inclusive of both endpoints). Your task is to merge overlapping ranges and return the final list of merged ranges. Example: Input: The first line of input contains an integer n, denoting the number of pairs. The next n lines each contain two integers a and b, representing the start and end of a range, respectively. Output: Output all the merged ranges in the order of their appearance in the input range list. Constraints: 1 ≤ n ≤ 104 -109 ≤ a, b ≤ 109 Example 1: Input: 3 1 3 2 6 8 10 Output: 1 6 8 10 Example 2: Input: 4 1 2 3 5 6 7 8 10 Output: 1 2 3 5 6 7 8 10 Example 3: Input: 2 5 10 10 12 Output: 5 12","solution":"def merge_ranges(ranges): Merges overlapping ranges. Parameters: ranges (list): A list of tuples, each containing two integers representing the start and end of a range. Returns: list: A list of merged ranges. if not ranges: return [] # Sort ranges based on the starting value and then ending value ranges.sort(key=lambda x: (x[0], x[1])) merged = [ranges[0]] for current in ranges[1:]: last_merged = merged[-1] if current[0] <= last_merged[1]: # Check for overlap merged[-1] = (last_merged[0], max(last_merged[1], current[1])) # Merge else: merged.append(current) # No overlap, add to result return merged # Example usage: # ranges = [(1, 3), (2, 6), (8, 10)] # print(merge_ranges(ranges)) # Output: [(1, 6), (8, 10)]"},{"question":"A company organizes a weekly coding contest for its employees. Each contest consists of multiple problems of varying difficulty levels, starting from \'easy\' and going up to \'hard\'. Each employee submits solutions to problems in the contest, and their submissions are recorded. Each submission record contains: - The employee ID - The problem difficulty level (\'easy\', \'medium\', or \'hard\') - A boolean indicating whether the submission was correct or not Given a log of submissions for a particular contest, your task is to determine if each employee who attempted the contest successfully solved at least one problem. The first line contains an integer m (1 ≤ m ≤ 200) — the number of submissions during the contest. Then m lines follow, each describing a submission. Each submission record is given in the form of: - An integer employee_id (1 ≤ employee_id ≤ 1000) - A string representing problem difficulty (\'easy\', \'medium\' or \'hard\') - An integer correct (0 or 1) where 1 indicates the problem was solved correctly, and 0 otherwise. Print \\"YES\\" if every employee who submitted at least one solution correctly solved at least one problem, otherwise print \\"NO\\". The situation in the first example is possible because both Employee 1 and Employee 2 correctly solved at least one problem. In the second example, Employee 3 submitted only incorrect solutions, thus it is impossible.","solution":"def check_all_employees_solved_at_least_one(m, submissions): employees = {} for submission in submissions: employee_id, difficulty, correct = submission if employee_id not in employees: employees[employee_id] = 0 if correct == 1: employees[employee_id] += 1 for solved in employees.values(): if solved == 0: return \\"NO\\" return \\"YES\\""},{"question":"You have an array of integers representing the heights of buildings in a row where the width of each building is 1. You are tasked with finding the maximum amount of water that can be trapped between the buildings after it rains. Example: Given the heights array: ``` heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` The maximum amount of water that can be trapped is 6, since the buildings at the indices following this pattern ``` _ |_|_|_ _ |_|_|_|_|_| |_| ``` will trap the most amount of water. Your function should take a list of integers as input and return a single integer as the maximum amount of water trapped. Write a function `maxWaterTrapped(heights: List[int]) -> int` to solve this problem. # Input - `heights` (List[int]): List of non-negative integers representing the heights of the buildings. # Output - Return an integer representing the maximum amount of rainwater trapped. # Constraints - 1 <= heights.length <= 10^5 - 0 <= heights[i] <= 10^5 Examples: ``` maxWaterTrapped([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]) -> 6 maxWaterTrapped([4, 2, 0, 3, 2, 5]) -> 9 ```","solution":"from typing import List def maxWaterTrapped(heights: List[int]) -> int: Returns the maximum amount of water that can be trapped between buildings given their heights. if not heights: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, heights[left]) water_trapped += max(0, left_max - heights[left]) else: right -= 1 right_max = max(right_max, heights[right]) water_trapped += max(0, right_max - heights[right]) return water_trapped"},{"question":"Create a program that computes the \\"weight\\" of a word, where the weight of a word is defined as the sum of the positions of its characters in the alphabet (a = 1, b = 2, ..., z = 26). Your task is to write a function that takes in a list of words and returns the word with the highest weight. In case of a tie (i.e., multiple words with the same weight), return the word which comes first lexicographically. The input consists of a single string containing a space-separated list of words. Each word consists of only lowercase English letters and the length of the entire string will not exceed 10,000 characters. For example: ``` Input: \\"dog cat zebra apple\\" Output: \\"zebra\\" ``` In this example, the weight of \\"dog\\" is 4 + 15 + 7 = 26, the weight of \\"cat\\" is 3 + 1 + 20 = 24, the weight of \\"zebra\\" is 26 + 5 + 2 + 18 + 1 = 52, and the weight of \\"apple\\" is 1 + 16 + 16 + 12 + 5 = 50. Hence, the word with the highest weight is \\"zebra\\".","solution":"def get_word_weight(word): Calculates the weight of a given word. return sum(ord(char) - ord(\'a\') + 1 for char in word) def highest_weight_word(words): Returns the word with the highest weight. In case of a tie, returns the lexicographically first word. word_list = words.split() max_weight = -1 result_word = \\"\\" for word in word_list: weight = get_word_weight(word) if weight > max_weight or (weight == max_weight and word < result_word): max_weight = weight result_word = word return result_word"},{"question":"You are given a list of strings, where each string represents a sequence of words separated by spaces. Write a function that compresses each given string by collapsing multiple spaces into a single space, removes leading and trailing spaces, and converts all characters to lowercase. For example, the string \\" Hello World \\" should become \\"hello world\\". Your function should take a list of strings as input and return a new list of compressed strings. The function should have the following signature: ```python def compress_strings(strings: List[str]) -> List[str]: pass ``` Example: ```python input_strings = [\\" Hello World \\", \\" Python Programming is fun \\"] output_strings = compress_strings(input_strings) print(output_strings) # Output: [\'hello world\', \'python programming is fun\'] ``` Ensure your function handles edge cases such as strings that are already properly formatted, strings with only spaces, and empty strings.","solution":"from typing import List def compress_strings(strings: List[str]) -> List[str]: Compresses each given string by collapsing multiple spaces into a single space, removes leading and trailing spaces, and converts all characters to lowercase. :param strings: List of input strings. :return: List of compressed strings. compressed = [] for s in strings: compressed.append(\' \'.join(s.strip().lower().split())) return compressed"},{"question":"Memory Match Game consists of a series of cards placed face down in a grid pattern. Each card has a matching pair somewhere on the board. The player can flip over two cards at a time to reveal their contents. If the cards match, they are removed from the board, otherwise, they are turned back face down. Given the board representation as a grid of size (n times m), where each element is an integer representing a card ID (1 through half the total number of cards, each appears exactly twice), write a program to simulate the process of finding all the matching pairs with the fewest number of flips. Your task is to find the sequence of flips (pair of indices) that will reveal all pairs with the minimum number of flips. The first line contains two integers (n) ((2 le n le 10)) and (m) ((2 le m le 10)) – the dimensions of the board. Each of the following (n) lines contains (m) integers (a_{ij}) ((1 le a_{ij} le frac{nm}{2})) – the grid values with each card ID appearing exactly twice. Output the sequence of flips as pairs of indices (1-based) required to reveal all the pairs in the format: ``` (r1_1, c1_1) (r1_2, c1_2) (r2_1, c2_1) (r2_2, c2_2) ... ``` where each pair of indices represents a flip that was made to reveal a matching pair. Example Input: ``` 2 2 1 2 1 2 ``` Example Output: ``` (1, 1) (2, 1) (1, 2) (2, 2) ``` Explanation: Flipping cards at positions (1, 1) and (2, 1) reveals a pair of cards with ID 1. Flipping cards at positions (1, 2) and (2, 2) reveals a pair of cards with ID 2. This solution finds all pairs with the fewest number of flips.","solution":"def find_matching_pairs(n, m, board): Finds the sequence of flips that reveal all pairs with the minimum number of flips. Args: n (int): number of rows in the board m (int): number of columns in the board board (list of list of int): the grid representing the board with card IDs Returns: list of tuple of tuple of int: list of pairs of indices representing the flips from collections import defaultdict # Create a dictionary to store the positions of each card ID card_positions = defaultdict(list) for i in range(n): for j in range(m): card_positions[board[i][j]].append((i+1, j+1)) # Prepare the list of flips flips = [] for positions in card_positions.values(): p1, p2 = positions flips.append((p1, p2)) return flips"},{"question":"Bob is a software engineer in WonderTech, and he often receives emails with data sets to analyze. Recently, he got an email containing a list of n integers and wants to perform some operations to find the greatest possible integer that can be fitting into a specific range. The operation Bob needs to perform involves selecting two distinct indices i and j (1 ≤ i, j ≤ n, i ≠ j) from the list and calculating their greatest common divisor (GCD). Bob should then determine the maximum GCD of all possible pairs (i, j). Input: - The first line contains a single integer n (2 ≤ n ≤ 100000) — the number of integers in the list. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000,000). Output: - Print a single integer — the maximum GCD that can be obtained from any pair of distinct indices in the list. Examples: Input: 4 10 8 6 15 Output: 5 Input: 5 10 25 50 100 40 Output: 50 Explanation for Examples: - In the first example, the pairs of indices (i, j) that give GCDs are as follows: (10, 8) -> GCD is 2, (10, 6) -> GCD is 2, (10, 15) -> GCD is 5, (8, 6) -> GCD is 2, (8, 15) -> GCD is 1, (6, 15) -> GCD is 3. The maximum GCD among all these pairs is 5. - In the second example, the pairs of indices (i, j) that yield the maximum GCD are: (50, 100) -> GCD is 50. Hence the result is 50.","solution":"import math def max_gcd_of_pairs(n, array): Finds the maximum GCD of all possible pairs (i, j) in the given list of integers. Parameters: n (int): Number of integers in the list. array (List[int]): List of integers. Returns: int: The maximum GCD obtained from any pair of distinct indices in the list. array.sort() max_gcd = 1 for i in range(n-1): for j in range(i+1, n): current_gcd = math.gcd(array[i], array[j]) if current_gcd > max_gcd: max_gcd = current_gcd return max_gcd"},{"question":"A local city is planning to construct a new network system for its underground water pipes. Initially, there are `n` key junctions in the city, numbered from `1` to `n`. Each junction needs to be connected directly or indirectly to any other junction in order to deliver water efficiently across the city. The city planner provides a list of potential pipes that can be installed, with each pipe connecting exactly two junctions and having a certain installation cost. Due to budget constraints, the city wants to minimize the total installation cost while ensuring that every junction is accessible from any other junction. Your task is to determine the minimum cost required to construct such a network of pipes that will connect all the junctions together. Input will be provided as follows: - The first line contains two integers `n` (1 <= n <= 1000) and `m` (0 <= m <= 100000), where `n` is the number of junctions and `m` is the number of potential pipes. - The next `m` lines each contain three integers `u`, `v`, and `w` (1 <= u, v <= n, 1 <= w <= 10000), where `u` and `v` are the endpoints of the pipe and `w` is the cost to install that pipe. Output a single integer which is the minimum installation cost to connect all junctions. If it is impossible to connect all the junctions, output `-1`. Example: Input: ``` 4 5 1 2 3 1 3 4 4 2 6 3 4 5 3 2 2 ``` Output: ``` 11 ``` Explanation: - Connect junction `1` and `2` with cost `3`. - Connect junction `2` and `3` with cost `2`. - Connect junction `3` and `4` with cost `5`. The total minimum cost is `3 + 2 + 6 = 11`.","solution":"def min_cost_to_connect_junctions(n, m, pipes): Returns the minimum cost required to connect all junctions with provided pipes. If not possible, returns -1. parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 pipes.sort(key=lambda x: x[2]) num_edges = 0 total_cost = 0 for u, v, w in pipes: if find(u) != find(v): union(u, v) total_cost += w num_edges += 1 if num_edges == n - 1: return total_cost else: return -1 # Example usage n = 4 m = 5 pipes = [(1, 2, 3), (1, 3, 4), (4, 2, 6), (3, 4, 5), (3, 2, 2)] print(min_cost_to_connect_junctions(n, m, pipes)) # Output: 10"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to transform the string into a \\"beautiful\\" string with the minimum number of operations. A string is considered \\"beautiful\\" if it does not contain any consecutive characters that are the same. You can perform the following operation on the string any number of times: - Select two adjacent characters and swap them. Note that after each operation, the resulting string should still be a valid string (i.e., should not contain any characters other than lowercase English letters). You are to write a function that computes the minimum number of operations required to transform the given string `s` into a beautiful string. # Input - A single string `s` of length `n` (1 leq n leq 10^5), containing only lowercase English letters. # Output - A single integer, the minimum number of operations required. # Example Input ``` aab ``` Output ``` 1 ``` Input ``` aaab ``` Output ``` 1 ``` Input ``` abbba ``` Output ``` 2 ``` # Note In the first example, you can swap the second and third characters to get the string \\"aba\\", which is beautiful. In the second example, you can swap the second and third characters to get the string \\"abab\\", which is beautiful. In the third example, you can swap the second and third characters and then the third and fourth characters to get the string \\"ababa\\", which is beautiful.","solution":"def min_operations_to_beautiful(s): Returns the minimum number of operations required to transform string \'s\' into a beautiful string. A string is considered beautiful if it does not contain any consecutive characters that are the same. n = len(s) operations = 0 for i in range(1, n): if s[i] == s[i - 1]: operations += 1 return operations"},{"question":"Two travelers, Alice and Bob, love to explore the mountain trails. They have a particular interest in finding the highest point they can reach together on a given trail. Each trail can be represented as a sequence of positive integers where each integer represents the height of a point on the trail. Both Alice and Bob start at the first point of the trail and can move to the next point or stay on their current point in each step. However, they cannot move backwards. The objective is to determine the highest point both Alice and Bob can reach together on the trail, given that they always start together and make their moves optimally to maximize their shared highest point. The first line contains an integer n (1 ≤ n ≤ 10^5), the number of points on the trail. The second line contains n positive integers representing the heights of the points in the trail (1 ≤ height ≤ 10^9). Output the highest point both Alice and Bob can reach together. Example: Input: 6 1 2 3 2 4 5 Output: 3 Explanation: Alice and Bob start at the height 1. They move to height 2, then to height 3. To maximize their shared highest point, they both decide to stop at height 3. This is the highest point they can reach together as moving to different points would mean not being together anymore.","solution":"def highest_shared_point(n, heights): Determine the highest point both Alice and Bob can reach together. Parameters: n (int): Number of points on the trail. heights (list): List of integers representing the heights of the points on the trail. Returns: int: The highest point both Alice and Bob can reach together. # Alice and Bob start together at the first point highest_point = heights[0] for height in heights: # Update the highest point they can reach together if height > highest_point: highest_point = height return highest_point"},{"question":"You are at the annual National Coding Championship, and there are programming contests that will be held sequentially. Each contest has a certain difficulty level. A participant can solve a contest if their skill level is higher than or equal to the difficulty level of the contest. You, being the coach, want to maximize the number of contests a participant can solve. You are given the difficulty levels of all the contests and the skill levels of all the participants. You need to assign participants to contests such that the sum of contests solved by all participants is maximized. You are given two arrays: - A list of integers representing the difficulty levels of the contests. - A list of integers representing the skill levels of the participants. Each participant can solve at most one contest. Write a function that determines the maximum number of contests that can be solved. # Input - The first input line contains two integers `n` and `m` — the number of contests and participants, respectively (`1 ≤ n, m ≤ 100000`). - The second input line contains `n` integers representing the difficulty levels of the contests. - The third input line contains `m` integers representing the skill levels of the participants. # Output - Output a single integer: the maximum number of contests that can be solved. # Example Input ``` 4 3 4 1 3 2 3 1 4 ``` Output ``` 3 ``` # Explanation - The contests have difficulty levels `[4, 1, 3, 2]`. - The participants have skill levels `[3, 1, 4]`. - A participant with skill level 3 can solve contests with difficulty levels 3 and 2 or 1. - A participant with skill level 4 can solve all the contests except the one with difficulty level 1. - By optimal assignment, participants can solve 3 contests.","solution":"def max_solved_contests(contests, participants): # Sorting contests and participants to use a two pointer technique contests.sort() participants.sort() contests_solved = 0 i, j = 0, 0 while i < len(contests) and j < len(participants): if participants[j] >= contests[i]: # Participant j can solve contest i contests_solved += 1 i += 1 j += 1 else: # Participant j cannot solve contest i, go to the next participant j += 1 return contests_solved"},{"question":"You are given a list of `n` integers, where each integer represents the number of people who can access a certain resource. Each of these integers corresponds to different time intervals in a sequential manner. A user can only access the resource at one time interval and the intervals are exclusive. A resource manager wants to maximize the utilization of the resource by scheduling it in such a way that the total number of people who can access it in those intervals adds up to be as high as possible, without having any two scheduled intervals overlap. The intervals are numbered from `1` to `n`. Write a function `max_resource_utilization(n, intervals)` to help the resource manager achieve this goal. # Input - An integer `n` representing the number of time intervals. (1 ≤ n ≤ 10^5) - A list `intervals` of `n` integers where the `i-th` integer is the number of people who can access the resource in the `i-th` interval. (1 ≤ intervals[i] ≤ 10^4) # Output - Return an integer representing the maximum number of people who can access the resource with the optimal schedule. # Example Example 1 Input: ``` max_resource_utilization(5, [3, 2, 5, 10, 7]) ``` Output: ``` 15 ``` Explanation: The optimal schedule would be interval 1 (3 people), interval 3 (5 people), and interval 5 (7 people). Total = 3 + 5 + 7 = 15. Example 2 Input: ``` max_resource_utilization(3, [1, 3, 2]) ``` Output: ``` 3 ``` Explanation: The optimal schedule would be interval 2 (3 people). Total = 3. # Constraints - You may assume that non-overlapping intervals means choosing intervals such that no two intervals are adjacent in the list. - The list of intervals will not necessarily be sorted. # Notes - This problem can be approached using dynamic programming where you track the best solutions up to each interval while ensuring no two chosen intervals are adjacent. ```python def max_resource_utilization(n, intervals): if n == 0: return 0 if n == 1: return intervals[0] if n == 2: return max(intervals[0], intervals[1]) dp = [0] * n dp[0] = intervals[0] dp[1] = max(intervals[0], intervals[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + intervals[i]) return dp[n-1] ``` Use the function `max_resource_utilization` to compute the maximum resource utilization by calling the function with appropriate arguments representing the number of intervals and the list of people who can access the resource at those intervals.","solution":"def max_resource_utilization(n, intervals): Returns the maximum number of people who can access the resource without overlapping intervals. if n == 0: return 0 if n == 1: return intervals[0] if n == 2: return max(intervals[0], intervals[1]) dp = [0] * n dp[0] = intervals[0] dp[1] = max(intervals[0], intervals[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + intervals[i]) return dp[n-1]"},{"question":"ajis Academy has recently instituted a series of 1-hour coding contests every week. Each contest consists of multiple problems, and participants are ranked by the number of problems they solve. If two participants solve the same number of problems, then the participant who took less time to solve those problems is ranked higher. During each contest, a participant\'s performance is recorded as follows: a list of non-negative integers representing the times (in minutes) at which they complete each problem they solve. If a participant does not solve any problems, this list is empty. You have been tasked with writing a program to determine the ranking of participants given their performances. # Input - The first line contains an integer n (1 ≤ n ≤ 100), the number of participants. - The next n lines each contain a space-separated list of non-negative integers, representing the times at which the respective participant solved their problems. # Output - Output the list of participants\' indices (1-based) in ranked order, from highest rank to lowest. - If multiple participants have the same rank, they should be listed in ascending order of their indices. # Example **Input:** ``` 4 10 20 30 15 25 5 5 5 5 40 ``` **Output:** ``` 3 1 2 4 ``` # Explanation In the given example: - Participant 1 solved 3 problems, their total time is 10 + 20 + 30 = 60. - Participant 2 solved 2 problems, their total time is 15 + 25 = 40. - Participant 3 solved 4 problems, their total time is 5 + 5 + 5 + 5 = 20. - Participant 4 solved 1 problem, their total time is 40. Hence, the ranking is participant 3 (first, 4 problems), participant 1 (second, 3 problems), participant 2 (third, 2 problems), and participant 4 (fourth, 1 problem).","solution":"def rank_participants(performance): if not performance: return [] participants = [] for idx, times in enumerate(performance): total_times = sum(times) solved_problems = len(times) participants.append((solved_problems, total_times, idx + 1)) # Sort participants by number of problems solved (descending), # then by total time taken (ascending), and then by original index (ascending). participants.sort(key=lambda x: (-x[0], x[1], x[2])) # Extracting only the original indices after sorting ranked_indices = [p[2] for p in participants] return ranked_indices"},{"question":"Diana is interested in cryptography and is learning about Caesar Cipher. A Caesar Cipher is a simple encryption technique where each letter in a given text is replaced by a letter some fixed number of positions down the alphabet. Diana is particularly concerned about decrypting texts. Given a string s of length n and an integer k (1 ≤ k ≤ 25), Diana wants to determine the original string by shifting each letter in the string k positions to the left alphabetically. Characters wrap around if the shift takes them past \'a\'. Formally, the decryption works as follows: for each character c in the string s, replace it with a character that is k positions before c in the English alphabet, wrapping around if necessary. Write a program to help Diana decrypt the string. The input consists of two lines. The first line contains the integer n (1 ≤ n ≤ 10^5). The second line contains the string s of length n, consisting only of lowercase English letters. The third line contains the integer k. Print the decrypted string. Example: Input: 5 bcdef 1 Output: abcde Explanation: With n = 5, s = \\"bcdef\\", and k = 1: \'b\' becomes \'a\', \'c\' becomes \'b\', \'d\' becomes \'c\', \'e\' becomes \'d\', \'f\' becomes \'e\'. Thus, the output is \\"abcde\\".","solution":"def decrypt_caesar_cipher(n, s, k): Decrypts the given string s of length n with Caesar cipher by shifting each character k positions to the left in the alphabet. :param n: Length of the string s :param s: String to be decrypted :param k: Number of positions to shift each character to the left :return: Decrypted string decrypted_string = \'\' for char in s: # Find the new position in the alphabet new_position = (ord(char) - ord(\'a\') - k) % 26 new_char = chr(ord(\'a\') + new_position) decrypted_string += new_char return decrypted_string"},{"question":"Given two integers n and k, generate all possible combinations of k distinct numbers from the first n natural numbers (1 to n). Each combination should be printed in lexicographic order, with each number separated by a space. # Input: - The only line of input contains two space-separated integers n and k (1 ≤ k ≤ n ≤ 20). # Output: - Print all combinations, each on a new line. Elements within each combination should be in ascending order. # Example: **Input:** ``` 5 3 ``` **Output:** ``` 1 2 3 1 2 4 1 2 5 1 3 4 1 3 5 1 4 5 2 3 4 2 3 5 2 4 5 3 4 5 ``` # Explanation: In this example, the task is to select 3 distinct numbers from the first 5 natural numbers (1, 2, 3, 4, 5). The output lists all possible combinations of 3 distinct numbers from the set, in lexicographic order.","solution":"from itertools import combinations def generate_combinations(n, k): Generate all possible combinations of k distinct numbers from the first n natural numbers (1 to n). result = [] for combo in combinations(range(1, n + 1), k): result.append(\\" \\".join(map(str, combo))) return result"},{"question":"You are given a string s. Determine if it is a palindrome. The first line contains an integer t (1 le t le 10^4) — the number of test cases in the input. Each test case is given as a string s of length between 1 and 1000, consisting of lowercase Latin letters only. For each test case, print \\"YES\\" if the string is a palindrome, and \\"NO\\" otherwise.","solution":"def is_palindrome(s): Check if the given string `s` is a palindrome. A palindrome reads the same forward and backward. :param s: string to check :return: \\"YES\\" if s is a palindrome, \\"NO\\" otherwise if s == s[::-1]: return \\"YES\\" else: return \\"NO\\" def process_test_cases(t, test_cases): Process multiple test cases and determine if each string is a palindrome. :param t: Number of test cases :param test_cases: A list of strings to be checked :return: List of results for each test case results = [] for s in test_cases: results.append(is_palindrome(s)) return results"},{"question":"An island nation has N towns and M bidirectional roads between the towns. Each road has a positive integer weight representing the transportation cost. The government wants to design a public transportation system such that every town is accessible from every other town by using the public transportation system. However, to minimize the public transportation budget, they need to ensure that the transportation network retains the lowest possible cost. Your task is to find the minimal transportation cost needed to ensure all towns are interconnected. Input: - The first line contains two integers, N and M (1 ≤ N ≤ 1000, 1 ≤ M ≤ 200000), representing the number of towns and the number of bidirectional roads respectively. - Each of the next M lines contains three integers, u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 100000), where u and v are the towns connected by a road, and w is the transportation cost of that road. Output: - Output a single integer representing the minimal transportation cost required to ensure all towns are interconnected. If it is not possible to connect all towns, output -1. Example: ``` Input: 4 4 1 2 3 2 3 4 3 4 2 4 1 9 Output: 9 ``` In the example above, the minimal transportation network that connects all towns would use the roads with weights 3, 4, and 2, giving a total cost of 9.","solution":"def minimal_transportation_cost(N, M, roads): Find minimal transportation cost needed to ensure all towns are interconnected using Prim\'s Algorithm. from heapq import heappop, heappush from collections import defaultdict if N == 1: return 0 # Create adjacency list graph = defaultdict(list) for u, v, w in roads: graph[u].append((w, v)) graph[v].append((w, u)) total_cost = 0 visited = set() min_heap = [(0, 1)] # (cost, node) num_edges_used = 0 while min_heap and num_edges_used < N: cost, u = heappop(min_heap) if u in visited: continue total_cost += cost visited.add(u) num_edges_used += 1 for w, v in graph[u]: if v not in visited: heappush(min_heap, (w, v)) if num_edges_used == N: return total_cost else: return -1"},{"question":"You are working for a company that processes large financial transactions. The company uses a unique algorithm to validate whether specific transactions should be flagged for review. Your task is to implement a part of this algorithm. You need to write a function that determines whether a transaction should be flagged based on certain criteria. The function will be given an array of integers representing transaction amounts and a target integer. The objective is to determine if there are any two distinct transactions in the list that sum up to the target value. # Input: - **transactions**: an array of integers where each integer represents a transaction amount. The length of the array will be between 2 and 10^5. - **target**: an integer representing the target sum. The value of the target will be between -10^9 and 10^9. # Output: Return `True` if there are any two distinct transactions in the array that sum up to the target value, otherwise return `False`. # Example: ```python transactions = [1, 3, 8, 2, 7] target = 10 ``` In this example, the function should return `True` because there are two transactions (3 and 7) that sum up to the target value (10). # Constraints: - The function should handle large input sizes efficiently to avoid timeouts or excessive memory usage. - Consider edge cases where the array may contain very large or very small integers. # Function Signature: ```python def flag_transaction(transactions: list, target: int) -> bool: ```","solution":"def flag_transaction(transactions: list, target: int) -> bool: Determines if there are any two distinct transactions in the list that sum up to the target value. seen = set() for amount in transactions: if target - amount in seen: return True seen.add(amount) return False"},{"question":"You are given an array `arr` of length `n` consisting of integers, and an integer `k`. You want to determine if there exists a pair of indices `(i, j)` such that `1 ≤ i < j ≤ n` and the sum of `arr[i] + arr[j]` is divisible by `k`. The input format is as follows: - The first line contains an integer `n` (2 ≤ n ≤ 100). - The second line contains the array `arr` of integers of length `n` (1 ≤ arr[i] ≤ 1000). - The third line contains the integer `k` (1 ≤ k ≤ 100). Output \\"Yes\\" if a suitable pair exists, and \\"No\\" otherwise. Example `input` and `output`: ``` Input: 5 12 25 9 6 15 5 Output: Yes ``` ``` Input: 3 5 9 13 4 Output: No ``` Consider edge cases and solve this problem optimally.","solution":"def has_divisible_pair(arr, k): Determines if there exists a pair of indices (i, j) such that 1 ≤ i < j ≤ n and the sum of arr[i] + arr[j] is divisible by k. :param arr: List[int], array of integers :param k: int, the divisor :return: str, \\"Yes\\" or \\"No\\" n = len(arr) for i in range(n): for j in range(i + 1, n): if (arr[i] + arr[j]) % k == 0: return \\"Yes\\" return \\"No\\""},{"question":"You are given a list of transactions where each transaction is represented by a tuple that contains a customer\'s name and the transaction amount. Write a function that computes the net balance for each customer and returns a list of tuples, with each tuple containing a customer\'s name and their net balance. The list should be sorted by the customer\'s name in alphabetical order. Function Signature: ```python def compute_balances(transactions: List[Tuple[str, int]]) -> List[Tuple[str, int]]: ``` # Input - `transactions`: A list of tuples where each tuple contains a string (the customer\'s name) and an integer (the transaction amount), `transactions[i] = (name, amount)`. # Output - Return a list of tuples, each containing a customer\'s name and their net balance, sorted by the customer\'s name in alphabetical order. # Constraints - The length of the `transactions` list will be between `1` and `1000` inclusive. - Each `amount` will be between `-10^6` and `10^6` inclusive. - Each customer\'s name will be a non-empty string with a length of at most `100`. # Example ```python transactions = [(\\"Alice\\", 50), (\\"Bob\\", 20), (\\"Alice\\", -20), (\\"Bob\\", 30), (\\"Charlie\\", 10)] output = compute_balances(transactions) # Expected output: [(\'Alice\', 30), (\'Bob\', 50), (\'Charlie\', 10)] ``` In this example, \\"Alice\\" has two transactions summing to `50 + (-20) = 30`, \\"Bob\\" has two transactions summing to `20 + 30 = 50`, and \\"Charlie\\" has one transaction of `10`.","solution":"from typing import List, Tuple def compute_balances(transactions: List[Tuple[str, int]]) -> List[Tuple[str, int]]: balances = {} for name, amount in transactions: if name in balances: balances[name] += amount else: balances[name] = amount sorted_balances = sorted(balances.items(), key=lambda x: x[0]) return sorted_balances"},{"question":"You are given a tree with n nodes, rooted at node 1. Each node i has a value associated with it denoted by v_i. A node’s value includes the sum of values of all its children. Your task is to find the values of all nodes of the tree. Here is the additional information: - Value of a node includes the sum of values of all its direct children, not the entire subtree. - The value of each node, initially given, includes only its own value. - After calculating the value, you should update the value of each node to include the sum of its children\'s values. The input format is as follows: - The first line contains an integer n (1 leq n leq 10^5). - The second line contains n integers v_i (1 leq v_i leq 10^6), which represent the initial values of the nodes. - Each of the next n-1 lines contains two integers u and v (1 leq u, v leq n, u neq v), denoting an edge of the tree. The output should contain n integers, the updated values of each node in the order from node 1 to node n. Example: Input: ``` 5 1 1 1 1 1 1 2 1 3 2 4 2 5 ``` Output: ``` 6 3 1 1 1 ``` In this example, the updated values are calculated as follows: - Node 1 has initial value 1 + sum of its children (nodes 2 and 3 with updated values 3 and 1, respectively), so 1 + 3 + 1 = 5. - Node 2 has initial value 1 + sum of its children (nodes 4 and 5 with initial values 1 each), so 1 + 1 + 1 = 3.","solution":"def calculate_node_values(n, values, edges): from collections import defaultdict import sys sys.setrecursionlimit(200000) # To handle large recursion depths tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Convert `values` from list to dict for easier updates values_dict = {i+1: values[i] for i in range(n)} def dfs(node, parent): total_value = values_dict[node] for child in tree[node]: if child != parent: total_value += dfs(child, node) values_dict[node] = total_value return total_value dfs(1, -1) return [values_dict[i] for i in range(1, n + 1)]"},{"question":"There is a company organizing a corporate meeting and they have a peculiar way of managing their time. They conduct the meeting in several sessions, each lasting a fixed amount of time (let\'s call it duration). The day starts with all employees sitting in a single room and, at the end of each session, the attendees leave the room for a break or move to another room for the next session. There are multiple sessions to be conducted, and for each session, a list of employee groups attending the session is given. Every group of employees attending a session should be completely different from any other session to ensure efficient use of time and space. You are given the number of employees, the duration of the sessions, the number of sessions and a list indicating the groups of employees attending each session. Your task is to find out if there is any overlap in attendance across the different sessions. Input: - The first line contains three integers, n (1 ≤ n ≤ 10^5), the number of employees, d (1 ≤ d ≤ 10^9) the duration of each session in minutes, and s (1 ≤ s ≤ 10^3) the number of sessions. - The next s lines each contain a group of integers, with each group representing the IDs of employees attending that session. Each employee is represented by an ID from 1 to n. Output: - Output \\"NO\\" if there is any overlap in attendance across any of the sessions. - Output \\"YES\\" if there is no overlap in attendance across all the sessions. Example: Input: ``` 5 60 3 1 2 3 4 5 1 5 ``` Output: ``` NO ``` Explanation: - In the first session, employees 1, 2, and 3 attend. - In the second session, employees 4 and 5 attend. - In the third session, employees 1 and 5 attend, which overlaps with both the first and second sessions, resulting in an overlapping attendance. If you can find any other example where the sessions have no overlap, the output should be \\"YES\\". Make sure to handle large inputs efficiently and use appropriate data structures to ensure that your solution performs within acceptable limits.","solution":"def check_no_overlap(n, d, s, sessions): Function to check if there is an overlap in attendance across different sessions. :param n: int - number of employees :param d: int - duration of each session in minutes :param s: int - number of sessions :param sessions: list of list of int - list of sessions where each session is a list of employee IDs :return: str - \\"YES\\" if no overlap, \\"NO\\" otherwise seen_employees = set() for session in sessions: session_set = set(session) if seen_employees & session_set: return \\"NO\\" seen_employees.update(session_set) return \\"YES\\""},{"question":"You are given an integer array `nums` and an integer `target`. Your task is to identify indices `i` and `j` (where `i < j`) such that the sum of the elements at these indices equals `target`. Return a tuple containing these indices `(i, j)`. If there are multiple solutions, return the one with the smallest `i` value. If there is still a tie, return the one with the smallest `j` value. If no such indices exist, return `(-1, -1)`. # Input: - The first line contains the integer `n` (1 ≤ `n` ≤ 10^4) — the number of integers in the array. - The second line contains `n` integers separated by spaces — the elements of the array `nums` (-10^9 ≤ `nums[i]` ≤ 10^9). - The third line contains the integer `target` (-10^9 ≤ `target` ≤ 10^9). # Output: - Print a line containing the indices `i` and `j` as a tuple `(i, j)` if such indices are found. Otherwise, print `(-1, -1)`. # Example: Input: ``` 5 1 2 3 4 5 9 ``` Output: ``` (3, 4) ``` Input: ``` 4 -1 -2 -3 -4 -6 ``` Output: ``` (1, 3) ``` Input: ``` 3 1 2 3 7 ``` Output: ``` (-1, -1) ``` # Note: In the first example, the pair of indices (3, 4) gives 4 + 5 = 9, which is equal to the target. Although there are no other pairs that sum up to 9, (1, 4) is a valid set if we consider all pairs but does not match because of the sum. In the second example, the pair of indices (1, 3) gives -2 + (-4) = -6, which meets the target. Multiple pairs return the same result, but (1, 3) is earliest in dictionary order of `i`. In the third example, no pairs of indices sum to the target value of 7.","solution":"def find_indices(nums, target): Finds two indices i and j such that nums[i] + nums[j] == target and i < j. If there are multiple solutions, return the one with the smallest i value, and if there is still a tie, return the one with the smallest j value. If no such indices exist, return (-1, -1). num_indices = {} for i, num in enumerate(nums): complement = target - num if complement in num_indices: return (num_indices[complement], i) if num not in num_indices: # ensure we record the smallest index for each number num_indices[num] = i return (-1, -1)"},{"question":"You are working for the Alien Space Development project as a software engineer. The aliens are planning to land on Earth and have sent you the coordinates of the potential landing sites. Each landing site is represented by its x and y coordinates in a 2D plane. Your task is to determine the minimum distance between any two landing sites. Input: An integer n (2 ≤ n ≤ 1000), representing the number of landing sites. The next n lines each contain two integers xi and yi (-10^6 ≤ xi, yi ≤ 10^6), representing the coordinates of the i-th landing site. Output: A single floating-point number representing the minimum distance between any two landing sites, rounded to 6 decimal places. Example: Input: 4 0 0 1 1 2 2 3 3 Output: 1.414214 Explanation: The distance between the first and second landing sites (0, 0) and (1, 1) is √((1-0)^2 + (1-0)^2) = √(1 + 1) = √2 ≈ 1.414214. The distance between the second and third landing sites (1, 1) and (2, 2) is also √2 ≈ 1.414214. The distance between the third and fourth landing sites (2, 2) and (3, 3) is again √2 ≈ 1.414214. All other distances are greater. Hence, the minimum distance is √2 ≈ 1.414214.","solution":"import math def minimum_distance(n, coordinates): Calculates the minimum distance between any two landing sites. :param n: Integer, number of landing sites :param coordinates: List of tuples, where each tuple contains x, y coordinates of a landing site :return: Float, the minimum distance between any two landing sites rounded to 6 decimal places min_dist = float(\'inf\') # Compare each pair of landing sites for i in range(n): for j in range(i + 1, n): x1, y1 = coordinates[i] x2, y2 = coordinates[j] dist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2) if dist < min_dist: min_dist = dist return round(min_dist, 6)"},{"question":"John is organizing a party and he has a list of invitations to send. Each invitation contains the name and the address of the recipient. John wants to evaluate how many unique addresses he has to send invitations to. Additionally, he decides to perform some updates on the invitations and needs to check the number of unique addresses after each update. Your task is to help John by handling these operations efficiently. The first line contains two integers: n and q (1 ≤ n, q ≤ 10^5) — the number of invitations and the number of queries. The following n lines each contain an invitation with a name and an address. Each of the following q lines contains one of the following queries in the format: * \\"u x address\\" - update the address of the x-th invitation to the new \'address\'. * \\"c\\" - count and print the number of unique addresses. Names and addresses are non-empty strings consisting of lowercase English letters and numbers. Address strings have a maximum length of 100. Input structure: ``` n q name1 address1 name2 address2 ... nameN addressN query1 query2 ... queryQ ``` Output structure: For each \\"c\\" query, output a single integer which is the count of unique addresses after this query. Example: Input: ``` 5 3 john 123main doe 456elm alice 123main bob 789oak mary 456elm c u 2 789pine c ``` Output: ``` 3 4 ``` Explanation: - Initially, there are 3 unique addresses: \\"123main\\", \\"456elm\\", and \\"789oak\\". - After updating the 2nd invitation to \\"789pine\\", the unique addresses are: \\"123main\\", \\"789pine\\", \\"789oak\\", and \\"456elm\\". - Thus, the outputs for the \\"c\\" queries are 3 and 4, respectively.","solution":"def count_unique_addresses(invitations, queries): from collections import defaultdict n = len(invitations) address_map = defaultdict(set) addresses = {} for idx in range(n): name, address = invitations[idx] address_map[address].add(idx) addresses[idx] = address results = [] for query in queries: parts = query.split() if parts[0] == \\"c\\": unique_count = len(address_map) results.append(unique_count) elif parts[0] == \\"u\\": idx = int(parts[1]) - 1 new_address = parts[2] old_address = addresses[idx] address_map[old_address].remove(idx) if not address_map[old_address]: del address_map[old_address] address_map[new_address].add(idx) addresses[idx] = new_address return results"},{"question":"You are given a list of n integers which can be positive, negative, or zero. Your task is to find the longest contiguous subarray such that the sum of elements in this subarray is zero. Write a function that takes a list of integers as input and returns two values: the length of the longest subarray with sum zero and the starting and ending indices of this subarray. If there are multiple subarrays of the same length, return the indices of any one of them. If no such subarray exists, return 0 and an empty tuple. Input: - A single line containing an integer n (1 ≤ n ≤ 10000) — the number of integers in the list. - The next line contains n space-separated integers representing the list. Output: - Print the length of the longest subarray with sum zero. - Print the starting and ending indices of this subarray as a tuple (start, end). Indices start from 0. Example: Input: 10 15 -2 2 -8 1 7 10 23 -5 -5 Output: 5 1 5 Explanation: The subarray from indices 1 to 5 (inclusive) is [-2, 2, -8, 1, 7] and its sum is 0. This subarray is the longest one with a sum of zero.","solution":"def longest_zero_sum_subarray(arr): Returns the length of the longest contiguous subarray with sum zero and the starting and ending indices of this subarray. If no such subarray exists, it returns 0 and an empty tuple. n = len(arr) sum_map = {} max_len = 0 current_sum = 0 start_index = -1 end_index = -1 for i in range(n): current_sum += arr[i] if current_sum == 0: max_len = i + 1 start_index = 0 end_index = i if current_sum in sum_map: if max_len < i - sum_map[current_sum]: max_len = i - sum_map[current_sum] start_index = sum_map[current_sum] + 1 end_index = i else: sum_map[current_sum] = i if max_len == 0: return 0, () else: return max_len, (start_index, end_index)"},{"question":"Write a function that, given a list of integers and a window size, returns a new list where each element is the maximum value in a sliding window of the specified size that moves from left to right across the original list. Your function should be efficient, aiming for a time complexity better than O(n * k) where n is the length of the list and k is the window size. # Function Signature The function should be defined as: ```python def max_sliding_window(nums: List[int], k: int) -> List[int]: ``` # Input - `nums` (List[int]): A list of integers representing the input sequence. The length of this list ranges from 1 to 10^6. - `k` (int): The size of the sliding window. `1 leq k leq len(nums)`. # Output - A list of integers representing the maximum values in each sliding window. # Example ```python >>> max_sliding_window([1, 3, -1, -3, 5, 3, 6, 7], 3) [3, 3, 5, 5, 6, 7] >>> max_sliding_window([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) [3, 4, 5, 6, 7, 8, 9] >>> max_sliding_window([9, 8, 7, 6, 5, 4, 3, 2, 1], 3) [9, 8, 7, 6, 5, 4, 3] ``` # Constraints - The function should be optimized to handle large inputs efficiently. - You can assume the given list and the window size will always be valid. # Notes - Consider using a double-ended queue (deque) to maintain the indices of useful elements for each window and ensure that elements outside the window are removed accordingly.","solution":"from collections import deque from typing import List def max_sliding_window(nums: List[int], k: int) -> List[int]: Returns the maximum values in each sliding window of size k across the list nums. if not nums or k == 0: return [] n = len(nums) if k == 1: return nums dq = deque() # Store indices of useful elements max_values = [] for i in range(n): # Remove indices that are out of the current window while dq and dq[0] < i - k + 1: dq.popleft() # Remove elements from deque that are smaller than current element while dq and nums[dq[-1]] <= nums[i]: dq.pop() # Add the current element\'s index to the deque dq.append(i) # Add the maximum element of current window to result list if i >= k - 1: max_values.append(nums[dq[0]]) return max_values"},{"question":"You are given two integers (a) and (b) (1 ≤ a, b ≤ 100). You need to determine the smallest integer (c) such that both (a) and (b) are divisors of (c). A number (x) is said to be a divisor of (y) if there exists an integer (k) such that (y = k times x). Your task is to find the least common multiple (LCM) of the given integers (a) and (b). # Input The input consists of a single line containing two integers (a) and (b). # Output Print one integer — the least common multiple of (a) and (b). # Examples **Input** ``` 4 6 ``` **Output** ``` 12 ``` **Input** ``` 5 10 ``` **Output** ``` 10 ``` # Note In the first example, the numbers 4 and 6 have common multiples such as 12, 24, etc. The smallest among them is 12. In the second example, since 10 is already a multiple of 5, the smallest common multiple is 10.","solution":"def gcd(x, y): Calculate the Greatest Common Divisor (GCD) of x and y. while y: x, y = y, x % y return x def lcm(a, b): Returns the Least Common Multiple (LCM) of a and b. return abs(a * b) // gcd(a, b)"},{"question":"Aelaya, the brave adventurer, has been exploring the ancient ruins of Xelthen. While exploring the ruins, she discovered a mysterious rectangular grid with hidden treasures. Each cell in the grid contains a certain number of gold coins. Aelaya can move either to the right or down from her current position, starting from the top-left corner of the grid and ending at the bottom-right corner. She aims to collect the maximum possible number of coins. Given a grid with `n` rows and `m` columns, find the maximum number of coins Aelaya can collect when moving from the top-left corner to the bottom-right corner. # Input The first line of the input contains two integers `n` and `m` (1 <= n, m <= 1000) — the number of rows and columns in the grid. Each of the following `n` lines contains `m` space-separated integers `a[i][j]` (0 <= a[i][j] <= 100) — the number of coins in the cell at row `i` and column `j`. # Output Print a single integer — the maximum number of coins Aelaya can collect. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 12 ``` # Explanation 1 -> 3 -> 5 -> 2 -> 1 = 12 coins can be collected following the path described. Design an efficient algorithm to solve the problem.","solution":"def max_coins(grid): n = len(grid) m = len(grid[0]) # Create a 2D dp array to store the maximum coins collected up to each cell dp = [[0 for _ in range(m)] for _ in range(n)] # Initialize the top-left cell dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the maximum coins that can be collected return dp[n-1][m-1]"},{"question":"In an autonomous vehicle system, the vehicle needs to navigate through a grid with different terrains that have varying traversal costs. The grid is represented by a two-dimensional list where each integer value corresponds to the cost of traversing that cell. The vehicle can only move right or down at any point in time. The vehicle starts at the top-left corner of the grid and needs to reach the bottom-right corner with the minimum traversal cost. Write a function that computes the minimum cost path. # Function Signature: ```python def min_cost_path(grid: List[List[int]]) -> int: ``` # Input: - `grid`: A 2D list of integers where `grid[i][j]` represents the cost of traversing cell `(i, j)`. - The grid will have at least one cell (`1 <= len(grid), len(grid[0]) <= 100`) - Each cell\'s traversal cost will be a non-negative integer (`0 <= grid[i][j] <= 100`) # Output: - Returns an integer, the minimum cost to traverse from the top-left corner to the bottom-right corner of the grid. # Example: ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] assert min_cost_path(grid) == 7 ``` # Explanation: The path with the minimum cost is `1 → 3 → 1 → 1 → 1` with a total cost of `7`.","solution":"from typing import List def min_cost_path(grid: List[List[int]]) -> int: if not grid: return 0 rows = len(grid) cols = len(grid[0]) # Create a 2D dp array to store the minimum cost to reach each cell dp = [[0] * cols for _ in range(rows)] # Initialize the top-left cell dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, cols): dp[0][j] = dp[0][j - 1] + grid[0][j] # Initialize the first column for i in range(1, rows): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill in the rest of the dp array for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right cell will have the minimum cost to reach the end return dp[rows - 1][cols - 1]"},{"question":"Alice and Bob love to play games together. One day, they found a series of M games they are interested in. Each game i starts at minute si and ends at minute ei. Being very strategic, they want to play the maximum number of games together without any overlap. However, Alice and Bob have different strategies: - Alice prefers to start new games as soon as she finishes one. - Bob prefers to maximize his free time between games. Given the time schedules of M games, determine how many maximum games Alice and Bob can play together if they each choose the best possible strategy for themselves. # Input - The first line contains an integer M (1 ≤ M ≤ 2×10^5) — the number of games. - The next M lines each contain two integers si and ei (0 ≤ si < ei ≤ 10^9) — the starting and ending times of the i-th game. # Output Print a single integer — the maximum number of games Alice and Bob can play together without any overlap. # Example Input ``` 5 1 3 2 5 4 8 6 7 9 11 ``` Output ``` 3 ``` # Note Alice and Bob can play the games [1,3], [4,8], and [9,11] together without any overlap. Thus, the output is 3.","solution":"def max_non_overlapping_games(M, games): Returns the maximum number of non-overlapping games that can be played by Alice and Bob. :param M: int - Number of games :param games: List of Tuples [(si, ei), ...] representing the start and end times of each game :return: int - Maximum number of non-overlapping games if M == 0: return 0 # Sort the games by their ending times games.sort(key=lambda x: x[1]) # Initialize the count of games and end time of last selected game count = 0 last_end_time = -1 # Iterate over the sorted games for game in games: if game[0] >= last_end_time: count += 1 last_end_time = game[1] return count"},{"question":"A coding competition is being organized, and the ranking system has a unique feature. Each contestant has a rank represented by an integer, and two contestants with consecutive ranks are considered neighbors. The neighbors can challenge each other only if their ranks differ by exactly 1. Given the ranks of a set of contestants, your task is to find the maximum number of challenges that can be initiated among them. Input: - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of contestants. - The second line contains n positive integers r_1, r_2, ..., r_n (1 ≤ r_i ≤ 10^9) — the ranks of the contestants. Output: - Print a single integer — the maximum number of challenges that can be initiated among the contestants. Example: Input: 5 1 2 3 4 5 Output: 4 Explanation: In this example, each contestant can challenge the next contestant with a consecutive rank, leading to a total of 4 challenges: between ranks (1,2), (2,3), (3,4), and (4,5).","solution":"def max_challenges(n, ranks): Given the number of contestants and their ranks, find the maximum number of challenges that can be initiated among them. ranks = sorted(ranks) max_challenges = 0 for i in range(1, n): if ranks[i] - ranks[i - 1] == 1: max_challenges += 1 return max_challenges"},{"question":"Consider a sequence of daily temperatures recorded over a period of `n` days. For each day, we would like to determine how many days pass until a higher temperature occurs. If there is no future day for which this is possible, store `0` for that day instead. You are given `n` integers `t1, t2, ..., tn`, where `ti` represents the temperature on the `i-th` day. Write a program that calculates for each day how many days will pass until a warmer temperature. If there is no such future day, output `0` for that day. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of days. - The second line contains `n` space-separated integers `t1, t2, ..., tn` (−100 ≤ ti ≤ 100) — the temperatures for each day. **Output:** - Output `n` space-separated integers, where the `i-th` integer is the number of days until a warmer temperature for day `i`. If there is no such warmer temperature, output `0` for that day. **Example:** ``` Input: 8 73 74 75 71 69 72 76 73 Output: 1 1 4 2 1 1 0 0 ``` In this example, for the first day (73), the temperature rises to 74 the next day, which is 1 day later. For the second day (74), the temperature rises to 75 the next day, and so on.","solution":"def daily_temperatures(n, temperatures): Calculate the number of days until a warmer temperature for each day. If there is no such future day, return 0 for that day. :param n: int - number of days :param temperatures: list of int - temperatures for each day :return: list of int - number of days until a warmer temperature for each day result = [0] * n stack = [] # this will store the index of temperatures for current_day in range(n): # While stack is not empty and current temperature is higher than the temperature at the index stored in the stack while stack and temperatures[current_day] > temperatures[stack[-1]]: previous_day = stack.pop() result[previous_day] = current_day - previous_day stack.append(current_day) return result"},{"question":"You are given a list of integers. Your task is to partition this list into two separate sublists such that the absolute difference between their sums is minimized. Each element from the original list must be included in one of the two sublists, and no elements should be left out or duplicated in either sublist. Write a function `partition_list` which takes a single list of integers as its input and returns a tuple of two lists: the two sublists with the minimized absolute difference of their sums. For example: ``` partition_list([1, 6, 11, 5]) ``` should return one possible result: ``` ([11, 1], [6, 5]) ``` Explanation: - One sublist could contain the integers [11, 1], which sum to 12. - The other sublist could contain the integers [6, 5], which sum to 11. - The absolute difference between 12 and 11 is 1, which is minimized. Constraints: - The input list will contain between 1 and 20 integers. - The value of each integer in the list will be between 1 and 100. **Function Signature:** ```python def partition_list(nums: List[int]) -> Tuple[List[int], List[int]]: ```","solution":"from typing import List, Tuple def partition_list(nums: List[int]) -> Tuple[List[int], List[int]]: Partition the list of integers into two sublists such that the absolute difference between their sums is minimized. total_sum = sum(nums) n = len(nums) # dp[i][j] will be True if j sum is possible with first i elements. dp = [[False] * (total_sum + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum + 1): dp[i][j] = dp[i-1][j] if j >= nums[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j-nums[i-1]] half_sum = total_sum // 2 for s in range(half_sum, -1, -1): if dp[n][s]: sum1 = s break sum2 = total_sum - sum1 sublist1 = [] sublist2 = [] i, j = n, sum1 while i > 0 and j > 0: if not dp[i-1][j]: sublist1.append(nums[i-1]) j -= nums[i-1] else: sublist2.append(nums[i-1]) i -= 1 while i > 0: sublist2.append(nums[i-1]) i -= 1 return sublist1, sublist2"},{"question":"In a distant magical land, there\'s a harmonious village comprising n houses numbered from 1 to n. The houses are connected by exactly n-1 bidirectional roads such that any house can be reached from any other house through some sequence of roads, forming a connected tree structure. There are two types of families living in these houses: elves and dwarves. To maintain harmony in the village, it\'s important that the village elder decides which family occupies which house. This becomes challenging with the following requirement: any two houses connected directly by a road must be occupied by different types of families. Given the structure of the village, your task is to help the village elder determine if it\'s possible to assign each house to one family type such that no two houses connected directly by a road are occupied by the same family type. If it is possible, print \\"Yes\\" and provide one possible configuration of the families. If it is not possible, print \\"No\\". Input Format: 1. The first line of input contains an integer n (2 ≤ n ≤ 1000) — the number of houses in the village. 2. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating a road connecting house u and house v. Output Format: 1. If it is possible to assign families to houses meeting the conditions, print \\"Yes\\" on the first line. 2. On the second line, print a string of n characters consisting of \'E\' and \'D\' where the i-th character represents the family type (E for elves, D for dwarves) of the i-th house. 3. If it is not possible, print \\"No\\". Example: Input: 4 1 2 2 3 3 4 Output: Yes EDED Input: 3 1 2 2 3 Output: Yes EDE","solution":"def assign_families(n, edges): from collections import deque # Create adjacency list for the houses adj = [[] for _ in range(n)] for u, v in edges: adj[u - 1].append(v - 1) adj[v - 1].append(u - 1) # Initialize colors array, 0 means not visited colors = [-1] * n def bfs(start): queue = deque([start]) colors[start] = 0 while queue: node = queue.popleft() current_color = colors[node] for neighbor in adj[node]: if colors[neighbor] == -1: # Assign opposite color to the neighbor colors[neighbor] = 1 - current_color queue.append(neighbor) elif colors[neighbor] == current_color: # If the neighbor has the same color, return False return False return True # We might have unconnected components (but the problem states it\'s a connected tree) for i in range(n): if colors[i] == -1: if not bfs(i): return \\"No\\" # Construct the answer string result = \'\'.join(\'E\' if color == 0 else \'D\' for color in colors) return f\\"Yesn{result}\\" # Test Example if __name__ == \\"__main__\\": n = 4 edges = [(1, 2), (2, 3), (3, 4)] print(assign_families(n, edges)) # YesnEDED"},{"question":"You are given a list of integers representing the heights of buildings in a city. Your task is to determine how many buildings cannot see the sunset. A building can see the sunset if there are no taller buildings directly to its west (to the left in the list). The input consists of a single line of integers representing the heights of buildings from west to east. For each building, output \\"1\\" if the building can see the sunset and \\"0\\" if it cannot. # Input A single line of space-separated integers representing the heights of buildings. # Output A single line of space-separated integers, where each integer corresponds to whether the respective building can see the sunset (\\"1\\" for yes, \\"0\\" for no). # Example Input ``` 3 7 8 3 6 1 ``` Output ``` 1 1 1 0 0 0 ``` # Explanation - The first building (height 3) can see the sunset as there are no buildings to its west. - The second building (height 7) can see the sunset as it is taller than the first building. - The third building (height 8) can see the sunset as it is taller than both the first and second buildings. - The fourth building (height 3) cannot see the sunset as there is a taller building (height 8) to its west. - The fifth building (height 6) cannot see the sunset as there is a taller building (height 8) to its west. - The sixth building (height 1) cannot see the sunset as there are taller buildings to its west. For each building, determine if it can see the sunset based on the heights of buildings to its west. Ensure to handle the edge cases where there are no buildings or only one building efficiently.","solution":"def can_see_sunset(buildings): Determines if each building can see the sunset. Args: buildings (list): A list of integers representing the heights of buildings. Returns: list: A list of integers where 1 denotes that the respective building can see the sunset, and 0 otherwise. max_height = float(\'-inf\') results = [] for height in buildings: if height > max_height: results.append(1) max_height = height else: results.append(0) return results def process_input(input_str): Processes the input string and converts it to a list of integers. Args: input_str (str): A space-separated string of integers representing building heights. Returns: list: A list of integers. return list(map(int, input_str.strip().split())) def format_output(results): Formats the output list into a space-separated string. Args: results (list): A list of integers. Returns: str: A space-separated string of integers. return \' \'.join(map(str, results))"},{"question":"You are given an array of integers `arr` and an integer `k`. The elements of `arr` denote the selling prices of houses in a neighborhood. You are interested in buying exactly `k` houses, but you want to avoid buying houses that are too close to each other for some reason. Define the \\"closeness\\" of two houses as the absolute difference between their indices. In other words, if you buy the house at index `i`, you may not buy any house at indices `i-1` or `i+1`. Your task is to find the maximum possible sum of the prices of `k` houses so that no two houses are closer than 2 indices. # Input - The first line contains two integers `n` and `k` (`2 ≤ n ≤ 100,000`, `1 ≤ k ≤ n`) — the number of houses and the number of houses you want to buy. - The second line contains `n` integers representing the prices of the houses, where the `i`-th integer denotes the price of the house at index `i` (`0 ≤ arr[i] ≤ 10^9`). # Output - Output a single integer, the maximum possible sum of the prices of `k` houses that are not closer than 2 indices. # Example Input ``` 6 2 9 7 10 13 5 15 ``` Output ``` 28 ``` Explanation You can select the houses at indices 0 and 3, which have prices 9 and 13, respectively, giving you a total sum of 22. Another optimal selection would be houses at indices 1 and 5, with prices 7 and 15, giving a total sum of 22. The maximum possible sum in this case is 28. # Note To solve this problem, you might consider using dynamic programming or other optimization techniques to efficiently find the solution given the constraints.","solution":"def max_sum_of_k_houses(arr, n, k): if k == 0: return 0 if k == 1: return max(arr) dp = [[0] * n for _ in range(k+1)] for j in range(k+1): for i in range(n): if j == 0: dp[j][i] = 0 elif i == 0: dp[j][i] = arr[i] if j == 1 else 0 elif i == 1: dp[j][i] = max(arr[i], dp[j][0]) else: dp[j][i] = max(dp[j][i - 1], dp[j - 1][i - 2] + arr[i]) return max(dp[k]) # Parsing input not included based on instructions. # Example usage: # n = 6 # k = 2 # arr = [9, 7, 10, 13, 5, 15] # print(max_sum_of_k_houses(arr, n, k)) # Output: 28"},{"question":"You are given two strings, `A` and `B`, consisting of lowercase English letters. Your task is to determine if `B` can be obtained by rearranging the characters of `A`, possibly using some or all of the characters in `A`, and then inserting exactly one additional character. For example, if `A = \\"abc\\"` and `B = \\"abdc\\"`, then `B` can be obtained by rearranging \\"abc\\" and inserting \'d\'. If `A = \\"hello\\"` and `B = \\"heollx\\"`, then `B` can be obtained by rearranging \\"hello\\" and inserting \'x\'. The first line of input contains a single integer `T` (1 le T le 10^4) – the number of test cases. Each of the next `T` lines contains two space-separated strings `A` and `B` (1 le |A|, |B| le 100), where `|A|` and `|B|` denote the lengths of the strings `A` and `B` respectively. For each test case, output \\"YES\\" if `B` can be obtained by rearranging the characters of `A` and inserting exactly one character, otherwise output \\"NO\\". # Input ``` 3 abc abdc hello heollx abcde abcdfg ``` # Output ``` YES YES NO ```","solution":"def can_form_by_adding_one_char(t, test_cases): from collections import Counter results = [] for A, B in test_cases: if len(B) != len(A) + 1: results.append(\\"NO\\") continue count_A = Counter(A) count_B = Counter(B) differences = 0 for char in count_B: if count_B[char] != count_A.get(char, 0): differences += (count_B[char] - count_A.get(char, 0)) if differences > 1: break if differences == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given two integers, `a` and `l`, representing the dimensions of a shoe size chart grid. The grid follows a specific pattern: each row and each column in the grid contain distinct numbers ranging from 1 to `a`. For example, for `a = 2`, and `l = 2`, the possible grids are: ``` 1 2 2 1 ``` OR ``` 2 1 1 2 ``` The elements of the grid denote the shoe size available at the intersection of that specific row and column. Your task is to determine if there exists a grid configuration such that the sum of the shoe sizes at all intersections matches the given number, `l`. Write a function, `def can_fit_grid(a: int, l: int) -> bool`, that takes two integers `a` and `l` and calculates whether such a configuration is possible. # Input - a: An integer (1 ≤ a ≤ 100) - l: An integer (1 ≤ l ≤ 10000) # Output - Return `True` if there exists at least one valid grid configuration providing the sum l. - Otherwise, return `False`. # Example Input 3 18 Output True Explanation One possible grid configuration that sums to 18 is: ``` 1 3 2 2 1 3 3 2 1 ``` The sum of all elements in this grid is `18`. Another scenario where it would return `False`: Input 2 10 Output False Explanation For a 2x2 grid, the total sum can only be 10 if there exists a valid configuration of the grid. Given the nature and constraints of the grid, we can determine that it is not possible to achieve the sum of 10 with a valid configuration.","solution":"def can_fit_grid(a: int, l: int) -> bool: Determines if there exists at least one possible grid configuration with the specified grid size a that sums to l. # Calculate the minimum and maximum possible sums for the grid grid_sum_min = sum(range(1, a + 1)) * a grid_sum_max = sum(range(1, a + 1)) * a # Since every row contains each number from 1 to a exactly once, # their sum will be the same for each row. return grid_sum_min == l"},{"question":"You are given a list of `n` distinct integers and you need to find a subset of these integers such that the sum of the integers in the subset is as close as possible to a given target integer `T`. Write a function `closestSubsetSum(n, nums, T)` that takes the number of integers `n` (1 ≤ n ≤ 20), a list of `n` integers `nums` (each integer ranges from -10^6 to 10^6), and a target integer `T` (-10^6 ≤ T ≤ 10^6). The function should return a single integer which is the sum of the subset that is closest to `T`. If there are multiple subsets with sums that are equally close to `T`, return the smallest sum among them. # Input: - An integer `n` representing the number of integers. - A list of `n` integers `nums`. - An integer `T` representing the target sum. # Output: - A single integer that is the sum of the subset closest to `T`. # Example: Input: ``` 4 [1, 2, 3, 4] 6 ``` Output: ``` 6 Input: ``` 4 [1, 2, 3, 4] 10 ``` Output: ``` 10 Input: ``` 3 [-1, 2, 9] 1 ``` ``` Output: ``` 1","solution":"from itertools import combinations def closestSubsetSum(n, nums, T): closest_sum = float(\'inf\') for r in range(n + 1): for subset in combinations(nums, r): subset_sum = sum(subset) if abs(subset_sum - T) < abs(closest_sum - T) or (abs(subset_sum - T) == abs(closest_sum - T) and subset_sum < closest_sum): closest_sum = subset_sum return closest_sum"},{"question":"A company has ‘m’ interns who can accomplish daily tasks individually. Every day the interns are available at the start of the day to choose their tasks, and each task can only be handled by one intern at a time. There are ‘n’ tasks available each day. The company has an allocation system where each intern has a preference list for the tasks. The preference list is a permutation of the task numbers from 1 to n, indicating the order in which the intern would like to work on the tasks. The company\'s system should ensure that each intern gets exactly one task, which should be the highest available task from their preference list. You need to implement a function to allocate tasks to each intern that satisfies their preference as much as possible. The function signature is: ```python def allocate_tasks(n: int, m: int, preferences: List[List[int]]) -> List[int]: ``` - n: the number of tasks (1 ≤ n ≤ 100) - m: the number of interns (1 ≤ m ≤ 100) - preferences: a list of m lists, where each list contains a permutation of numbers from 1 to n representing a single intern\'s preference list. Return a list of m integers where the i-th integer is the task number allocated to the i-th intern. If it\'s not possible to allocate any task to an intern, return 0 for that intern. Example: ```python n = 3 m = 4 preferences = [ [1, 2, 3], [3, 1, 2], [2, 3, 1], [1, 3, 2] ] ``` Output: ```python [1, 3, 2, 0] ``` Explanation: - The 1st intern gets task 1. - The 2nd intern gets task 3. - The 3rd intern gets task 2. - The 4th intern does not get any task as all preferred tasks (1 and 3) have already been allocated.","solution":"from typing import List def allocate_tasks(n: int, m: int, preferences: List[List[int]]) -> List[int]: allocated_tasks = [] assigned = set() # This set keeps track of assigned tasks for pref in preferences: allocated_task = 0 for task in pref: if task not in assigned: allocated_task = task assigned.add(task) break allocated_tasks.append(allocated_task) return allocated_tasks"},{"question":"You are organizing a coding competition and want to determine the most impressive project submitted by participants. The quality of a project is determined by its \\"awesomeness score\\". The competition rules specify that the \\"awesomeness score\\" of a project is equal to the sum of the ASCII values of its source code characters when the project is sorted in lexicographical order. Given a list of projects, each represented as a string of source code, find the project with the highest \\"awesomeness score\\". Input: - The first line contains an integer n, the number of projects (1 leq n leq 10^5). - The next n lines contain strings p_i (1 leq |p_i| leq 100), each representing the source code of a project. Output: - A single line containing the source code of the project with the highest \\"awesomeness score\\". If there are multiple projects with the same awesomeness score, output the lexicographically smallest one. Example: Input: ``` 3 xyz abc def ``` Output: ``` xyz ``` In this example, the project \\"xyz\\" has the highest awesomeness score (120 + 121 + 122 = 363) compared to \\"abc\\" (97 + 98 + 99 = 294) and \\"def\\" (100 + 101 + 102 = 303).","solution":"def project_with_highest_awesomeness(n, projects): Returns the project with the highest awesomeness score. If multiple projects have the same score, the lexicographically smallest project is returned. highest_score = -1 best_project = None for project in projects: # Sort the project string lexicographically sorted_project = \'\'.join(sorted(project)) # Calculate the awesomeness score awesomeness_score = sum(ord(c) for c in sorted_project) # Check if this project has the highest score or is lexicographically smaller than the current best one if awesomeness_score > highest_score or (awesomeness_score == highest_score and sorted_project < best_project): highest_score = awesomeness_score best_project = project return best_project"},{"question":"Given an array of integers, determine the max-sum of a subarray with the constraint that no two elements in the subarray are adjacent in the original array. For example, given the array [3, 2, 5, 10, 7], the subarray with the max-sum is [3, 10] which sums up to 13. Write a function `max_non_adjacent_sum(arr)` that takes a list of integers `arr` as input and returns an integer representing the maximum sum of any subarray that meets the constraints. **Input:** - A single list of integers `arr` where 1 ≤ len(arr) ≤ 1000 and -1000 ≤ arr[i] ≤ 1000. **Output:** - A single integer representing the maximum sum of a non-adjacent subarray. **Example:** ```python def max_non_adjacent_sum(arr): # Write your code here # Example print(max_non_adjacent_sum([3, 2, 5, 10, 7])) # Output: 13 print(max_non_adjacent_sum([-1, 3, -2, 4, -5])) # Output: 7 print(max_non_adjacent_sum([2, 1, 4, 9])) # Output: 11 ``` **Note:** - If the array is empty or contains only negative numbers, the function should return 0. - This problem can be approached using dynamic programming.","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of non-adjacent elements in the given array. if not arr: return 0 n = len(arr) if n == 1: return max(0, arr[0]) prev1 = max(0, arr[0]) prev2 = max(0, arr[1], arr[0]) if n == 2: return prev2 for i in range(2, n): current = max(prev2, prev1 + arr[i]) prev1 = prev2 prev2 = current return prev2"},{"question":"Given a list of integers, write a function that sorts the list in ascending order and then removes any duplicate elements. The function should return the modified list. **Input:** - A list of integers `nums` (0 ≤ |nums| ≤ 1000, -1000 ≤ nums[i] ≤ 1000) where |nums| is the number of elements in the list. **Output:** - A sorted list of integers with no duplicate elements. **Example:** Input: `[4, 2, 5, 2, 3, 3, 1]` Output: `[1, 2, 3, 4, 5]`","solution":"def sort_and_remove_duplicates(nums): Returns a sorted list with duplicates removed. return sorted(set(nums))"},{"question":"In a forest, there are many types of trees, each represented by a unique character. You are given a grid of size m × n filled with characters representing different types of trees. Two trees are considered of the same type if they have the same character. A cluster of trees is a group of the same type of trees that are connected either horizontally or vertically (not diagonally). Your task is to count the number of distinct clusters of trees in the forest. You will be given multiple test cases to process. Input: - The first line contains an integer T, the number of test cases. - For each test case, the first line contains two integers m and n, the dimensions of the forest grid. - Next, m lines follow, each containing n characters representing the trees in the forest. Output: - For each test case, output the number of unique clusters of trees. Example: Input: ``` 2 4 5 AABCC AABCC DDEFF DDEFF 3 3 XXX XYX XXX ``` Output: ``` 2 3 ``` Explanation: In the first test case, there are two clusters: one for trees \'A\', and one for trees \'D\'. Trees \'B\', \'C\', \'E\' and \'F\' each form their own clusters. In the second test case, there are three clusters: one for trees \'X\' (in the top-left and bottom-right corners), one for tree \'Y\', and one for the middle tree \'X\'.","solution":"def count_clusters(grid, m, n): visited = [[False for _ in range(n)] for _ in range(m)] def dfs(x, y, char): if x < 0 or x >= m or y < 0 or y >= n or visited[x][y] or grid[x][y] != char: return visited[x][y] = True # visit all 4 connected neighbors (up, down, left, right) dfs(x + 1, y, char) dfs(x - 1, y, char) dfs(x, y + 1, char) dfs(x, y - 1, char) clusters = 0 for i in range(m): for j in range(n): if not visited[i][j]: # start a new cluster dfs(i, j, grid[i][j]) clusters += 1 return clusters def process_test_cases(test_cases): results = [] for case in test_cases: m, n, grid = case results.append(count_clusters(grid, m, n)) return results"},{"question":"A logistics company needs to transport goods between warehouses in different cities. They have a fleet of trucks and each truck can travel from one city to another with a certain cost, which depends on the distance and the truck\'s fuel consumption. The task is to find the minimum transportation cost to move goods from a start city to an end city. The transportation network is represented as a graph where the cities are nodes, and the roads between them are edges with associated costs. The company needs a solution that can handle multiple queries efficiently. For each query, they need to compute the minimum cost to transport goods between two specified cities using the available roads. Your task is to implement a function that pre-processes the transportation network to enable quick responses to multiple queries about the minimum transportation cost between cities. The first line of the input contains three space-separated integers: n (2 ≤ n ≤ 300), the number of cities, m (1 ≤ m ≤ 2000), the number of roads, and q (1 ≤ q ≤ 1000), the number of queries. Each of the next m lines contains three space-separated integers: u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000), representing that there is a road between city u and city v with a transportation cost of w. The next q lines each contain two space-separated integers: a and b (1 ≤ a, b ≤ n), representing a query for the minimum transportation cost from city a to city b. Print q lines, each containing one integer — the minimum transportation cost for each query. If there is no path between the queried cities, print -1 for that query. Function to implement: ```python def min_transport_cost(n, m, q, roads, queries): # n: number of cities # m: number of roads # q: number of queries # roads: list of tuples (u, v, w) where u and v are cities and w is the transportation cost # queries: list of tuples (a, b) where a and b are the cities in the query # return: list of minimum transportation costs for each query ```","solution":"def min_transport_cost(n, m, q, roads, queries): import sys import itertools # Initialize the distance matrix with INF and 0 for diagonal elements INF = sys.maxsize dist = [[INF] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 # Fill the initial distances based on the given roads for u, v, w in roads: dist[u-1][v-1] = min(dist[u-1][v-1], w) dist[v-1][u-1] = min(dist[v-1][u-1], w) # Apply Floyd-Warshall algorithm for k, i, j in itertools.product(range(n), repeat=3): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Answer the queries results = [] for a, b in queries: if dist[a-1][b-1] == INF: results.append(-1) else: results.append(dist[a-1][b-1]) return results"},{"question":"Vlad has a string s consisting of lowercase English letters. He wants to perform some operations on this string to form as many palindromic substrings as possible. A substring is considered palindromic if it reads the same forwards and backwards. Vlad can perform the following operation any number of times: choose two indices i and j (1 le i < j le |s|) and swap s_i with s_j. Given the string s, determine the maximum number of distinct palindromic substrings Vlad can obtain using the mentioned operation any number of times. The first line contains a single integer t (1 le t le 10) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 10^5). For each test case, print a single integer — the maximum number of distinct palindromic substrings. # Example Input: ``` 3 abac aabb abc ``` Output: ``` 4 4 3 ``` # Explanation In the first example, Vlad can form the distinct palindromic substrings {\\"a\\", \\"b\\", \\"c\\", \\"aba\\"}. In the second example, the distinct palindromic substrings {\\"a\\", \\"aa\\", \\"b\\", \\"bb\\"} can be formed. In the third example, the distinct palindromic substrings {\\"a\\", \\"b\\", \\"c\\"} can be formed.","solution":"def max_palindromic_substrings(s): # A set to keep track of all distinct characters in \'s\'. unique_chars = set(s) # All individual characters are palindromic substrings. # Swapping characters won\'t change the count of unique characters, # thus the maximum number of distinct palindromic substrings is # the number of unique characters. return len(unique_chars) def solve(test_cases): results = [] for s in test_cases: results.append(max_palindromic_substrings(s)) return results"},{"question":"In a certain kingdom, there is a fantastical tree. The tree consists of nodes, numbered from 1 to n, with node 1 being the root. Each node has a certain value associated with it. You are to help the king by answering his queries about the tree. Each query is of the following form: - Given a node u, you need to calculate the sum of values of all nodes present in the subtree rooted at u. The first line contains an integer n (1 ≤ n ≤ 10^5) - the number of nodes in the tree. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 10^5) - the values associated with the nodes. Each of the next n-1 lines contains two integers ai and bi (1 ≤ ai, bi ≤ n) indicating there is an edge between nodes ai and bi. The next line contains a single integer q (1 ≤ q ≤ 10^5) - the number of queries. Each of the following q lines contains a single integer u (1 ≤ u ≤ n) - the root of the subtree for which you need to compute the sum of values of its nodes. Output the answer to each query, each on a new line. **Example**: Input: ``` 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 1 3 4 ``` Output: ``` 15 12 4 ```","solution":"def tree_node_sum(n, values, edges, queries): from collections import defaultdict # Building the tree as an adjacency list tree = defaultdict(list) for a, b in edges: tree[a].append(b) tree[b].append(a) # DFS to compute subtree sums def dfs(node, parent): subtree_sum = values[node - 1] for neighbor in tree[node]: if neighbor != parent: subtree_sum += dfs(neighbor, node) subtree_sums[node] = subtree_sum return subtree_sum subtree_sums = [0] * (n + 1) dfs(1, -1) result = [] for query in queries: result.append(subtree_sums[query]) return result # Example usage: n = 5 values = [1, 2, 3, 4, 5] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] queries = [1, 3, 4] print(tree_node_sum(n, values, edges, queries))"},{"question":"Jane recently joined a software company that uses a custom notification system. Notifications in this system can be generated at any second and are timestamped using Unix time (an integer representing the number of seconds since January 1, 1970). Jane needs to analyze the frequency of notifications to detect patterns. Specifically, she wants to find the maximum number of notifications that were generated within any 60-second window in the given timeline. Given an array of integers timestamps representing the moments (in seconds, in ascending order) when the notifications were generated, write a function that returns the maximum number of notifications that were generated within any 60-second window. # Input An integer array `timestamps` where: - 1 ≤ `timestamps.length` ≤ 10^5 - All elements in `timestamps` are distinct and sorted in ascending order. # Output Return an integer representing the maximum number of notifications in any 60-second window. # Example ```python # Example 1 timestamps = [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100] # There can be at most 7 notifications within any 60-second window (e.g., notifications at seconds 1 to 60). print(max_notifications_in_window(timestamps)) # Output: 7 # Example 2 timestamps = [5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105] # The maximum number of notifications within any 60-second window is 6. print(max_notifications_in_window(timestamps)) # Output: 6 ``` # Function Signature ```python def max_notifications_in_window(timestamps: List[int]) -> int: pass ```","solution":"from typing import List def max_notifications_in_window(timestamps: List[int]) -> int: start = 0 max_count = 0 n = len(timestamps) for end in range(n): while timestamps[end] - timestamps[start] >= 60: start += 1 max_count = max(max_count, end - start + 1) return max_count"},{"question":"I am the captain of a space expedition tasked with establishing a network of satellite relays to ensure constant communication between multiple planets. We are given n planets, each identified by a unique integer from 1 to n. Some planets are already connected directly or indirectly via communication relays. Our goal is to upgrade the network by adding the minimum number of new direct connections (if necessary) to ensure that all planets are directly or indirectly connected, forming a single, robust communication network. You need to determine the minimum number of new direct connections required and list the new connections, if any. If the network is already connected, output 0. The first line of input contains an integer n (2 ≤ n ≤ 100,000), the number of planets, and m (0 ≤ m ≤ 100,000), the number of existing direct connections. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an existing direct connection between planets u and v. The output should contain an integer k (the number of new direct connections needed). In each of the next k lines, output two integers x and y (1 ≤ x, y ≤ n, x ≠ y), representing a new direct connection to be added to the network. If there are multiple solutions, any valid one will be accepted. Example: Input: 4 2 1 2 3 4 Output: 1 2 3 Explanation: In the given example, we have 4 planets and 2 connections (1-2 and 3-4). The planets 1, 2 form one group, and the planets 3, 4 form another. We need to add at least one direct connection (such as 2-3) to connect all four planets in a single network.","solution":"def find_min_new_connections(n, m, connections): from collections import defaultdict, deque def bfs(start, visited, adj): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # adjacency list adj = defaultdict(list) for u, v in connections: adj[u].append(v) adj[v].append(u) # finding connected components visited = [False] * (n + 1) components = [] for i in range(1, n + 1): if not visited[i]: component = [] bfs(i, visited, adj) components.append(i) # components is a list of representative nodes of each connected component k = len(components) - 1 # Need (number of components minus 1) edges to connect all components new_connections = [] for i in range(1, len(components)): new_connections.append((components[i - 1], components[i])) return k, new_connections"},{"question":"You are given a collection of posts from a social media platform, represented as a list of strings. Each post can either be a text post or a post with an image link. Text posts contain only text, while image posts contain a URL starting with \\"img:\\" followed by the link. You need to filter out all image posts and keep the text posts. Additionally, you need to remove any text posts that are duplicates, keeping only their first occurrence in their original order. Given `n` posts, print out the filtered list of unique text posts in the original order. The first line contains a single integer `n` (1 leq n leq 1000)— the number of posts. The next `n` lines each contain a post, which is either a text post or an image post. # Example: Input: ``` 5 Hello World! img:http://example.com/image1.png Exciting news! img:http://example.com/image2.png Hello World! ``` Output: ``` Hello World! Exciting news! ``` # Constraints: - The length of each post does not exceed 100 characters. - URLs in image posts start with \\"img:\\". # Note: - In the above input example, the posts are filtered by removing the image posts and then removing any duplicate text posts. - The first \\"Hello World!\\" is kept while the second occurrence is removed.","solution":"def filter_and_remove_duplicates(posts): Filters out image posts and removes duplicate text posts, keeping only the first occurrence in their original order. :param posts: List of posts (strings) :return: Filtered list of unique text posts in their original order seen = set() result = [] for post in posts: if post.startswith(\\"img:\\"): continue if post not in seen: seen.add(post) result.append(post) return result"},{"question":"Maria has recently started collecting rare stamps. She categorizes her collection based on the rarity of each stamp. To help manage her collection, she decides to create a system where she can query the number of unique rarities in any given sub-collection. You are given a list of integers, where each integer represents the rarity of a stamp. You need to handle multiple queries on this list. Each query consists of two indices, ( l ) and ( r ), and you need to determine the number of unique rarities between these indices, inclusive. Write a program that processes the list of rarities and answers each query efficiently. # Input The first line contains an integer ( n ) (1 ≤ ( n ) ≤ 100000), the number of stamps in Maria\'s collection. The second line contains ( n ) integers ( a_1, a_2, ..., a_n ) (1 ≤ ( a_i ) ≤ 100000), where ( a_i ) is the rarity of the ( i )-th stamp. The third line contains an integer ( q ) (1 ≤ ( q ) ≤ 100000), the number of queries. The next ( q ) lines each contain two integers ( l ) and ( r ) (1 ≤ ( l ) ≤ ( r ) ≤ ( n )), representing the query to find the number of unique rarities between the ( l )-th and ( r )-th positions in the list. # Output For each query, output a single integer representing the number of unique rarities in the specified sub-collection. # Example Input ``` 5 1 2 1 3 2 3 1 3 2 4 1 5 ``` Output ``` 2 3 3 ``` # Explanation - For the first query (1, 3), the sub-collection is [1, 2, 1], which contains 2 unique rarities: 1 and 2. - For the second query (2, 4), the sub-collection is [2, 1, 3], which contains 3 unique rarities: 1, 2, and 3. - For the third query (1, 5), the sub-collection is [1, 2, 1, 3, 2], which contains 3 unique rarities: 1, 2, and 3.","solution":"def count_unique_rarities(n, rarities, queries): Returns the number of unique rarities for each query sub-collection. Args: n (int): Number of stamps. rarities (list of int): List of integers representing the rarities of each stamp. queries (list of tuple of int): List of queries with each query being a tuple (l, r). Returns: list of int: Number of unique rarities for each query. result = [] for l, r in queries: sub_collection = rarities[l-1:r] # Get the sub-collection unique_rarities = len(set(sub_collection)) # Count unique rarities result.append(unique_rarities) return result"},{"question":"You are tasked with creating a system that analyzes a log of user activity and identifies suspicious activity patterns. In this scenario, you are given a log of events that record user actions over a period of time on a website. Each log entry consists of a timestamp and a user identifier. Your goal is to identify users who have logged actions more than `threshold` times within a given period of time `T` minutes. For instance, if you are given a threshold value of 3 and a time window of 5 minutes, you should identify any user who has performed more than 3 actions within any 5-minute window in the log. Input Format: - The first line contains two integers, `threshold` and `T`, representing the threshold count and the time window in minutes respectively. - The second line contains an integer `n`, representing the number of log entries. - The next `n` lines each contain a timestamp (in \\"YYYY-MM-DD HH:MM:SS\\" format) and a user identifier (a string). Output Format: - Print the user identifiers of users who meet the suspicious activity criteria, one per line. The users should be listed in the order they first appear in the log. - If no user meets the criteria, print \\"No suspicious activity detected\\". Constraints: - `1 <= n <= 10^6` - Timestamps are guaranteed to be in non-decreasing order. - User identifiers consist of alphanumeric characters and are case-sensitive. - `1 <= threshold <= 100` - `1 <= T <= 60` Example Input: ``` 3 5 5 2023-01-01 14:00:00 user1 2023-01-01 14:02:00 user2 2023-01-01 14:03:00 user1 2023-01-01 14:07:00 user1 2023-01-01 14:08:00 user1 ``` Example Output: ``` user1 ``` Explanation: - `user1` logs actions at timestamps 14:00, 14:03, 14:07, and 14:08. - Within the 5-minute window starting at 14:03, there are more than 3 actions (14:03, 14:07, 14:08), making `user1` suspicious. - `user2` does not meet the criteria in any 5-minute window.","solution":"from datetime import datetime, timedelta def detect_suspicious_activity(threshold, T, logs): Detects users who have logged actions more than `threshold` times within a given period of `T` minutes. Parameters: threshold (int): Number of actions to be considered suspicious T (int): Time window in minutes logs (list of tuple): List containing tuples of timestamp and user identifier. Returns: List of user identifiers who meet the suspicious activity criteria. user_logs = {} # Convert logs to datetime objects and group by user for log in logs: timestamp_str, user_id = log timestamp = datetime.strptime(timestamp_str, \\"%Y-%m-%d %H:%M:%S\\") if user_id not in user_logs: user_logs[user_id] = [] user_logs[user_id].append(timestamp) suspicious_users = set() time_window = timedelta(minutes=T) # Check for suspicious activity within the time window for each user for user_id, timestamps in user_logs.items(): for i in range(len(timestamps)): count = 1 start_time = timestamps[i] for j in range(i+1, len(timestamps)): if timestamps[j] - start_time <= time_window: count += 1 else: break if count > threshold: suspicious_users.add(user_id) break if not suspicious_users: return [\\"No suspicious activity detected\\"] else: return list(suspicious_users) # Example usage if __name__ == \\"__main__\\": threshold, T = 3, 5 logs = [ (\\"2023-01-01 14:00:00\\", \\"user1\\"), (\\"2023-01-01 14:02:00\\", \\"user2\\"), (\\"2023-01-01 14:03:00\\", \\"user1\\"), (\\"2023-01-01 14:07:00\\", \\"user1\\"), (\\"2023-01-01 14:08:00\\", \\"user1\\"), ] result = detect_suspicious_activity(threshold, T, logs) for user in result: print(user)"},{"question":"You are given a string representing a sequence of parentheses (including `()`, `{}`, and `[]`). You need to determine if the sequence is valid. A sequence of parentheses is valid if all types of parentheses are correctly matched and nested. For example: - `{[()()]}` is a valid sequence. - `[(])` is not a valid sequence. Write a function `is_valid_parentheses(sequence)` that takes a string `sequence` as input and returns `True` if the sequence is valid, and `False` otherwise. # Input - The input consists of a single string `sequence` containing at most 1000 characters. The string only includes the characters `()`, `{}`, and `[]`. # Output - The function should return `True` if the sequence is valid and `False` otherwise. # Example ```python print(is_valid_parentheses(\\"{[()()]}\\")) # Output: True print(is_valid_parentheses(\\"[(])\\")) # Output: False ```","solution":"def is_valid_parentheses(sequence): Returns True if the sequence of parentheses is valid, False otherwise. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in sequence: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket.keys(): if stack == [] or stack.pop() != matching_bracket[char]: return False else: # Invalid character case which should ideally not occur due to input constraint return False return stack == []"},{"question":"In the kingdom of CodeLand, there is a long, straight road with n houses numbered from 1 to n along it. Each house has a unique number of candies that the children living in the house can collect. The number of candies in the i-th house is denoted by an integer ci. Now, the king has decided to hold a special event for all the children in CodeLand. During this event, children can visit any single contiguous sequence of houses and collect all the candies from those houses. However, once they start collecting candies from a contiguous block of houses, they must collect from all houses in that block without skipping any house. To maximize the fun and excitement, the king wants to determine the maximum number of candies the children can collect from any contiguous sequence of houses during this event. The task is to write a program that computes the maximum number of candies that can be collected from any contiguous sequence of houses on the road. Input: - The first line contains an integer n (1 <= n <= 100000), the number of houses. - The second line contains n integers c1, c2, ..., cn (-10^9 <= ci <= 10^9), where ci denotes the number of candies in the i-th house. Note that the number of candies can be negative if the house is haunted and instead of candies, there are spooky events that decrease the total fun. Output: - Print a single integer that represents the maximum number of candies that can be collected from any contiguous sequence of houses. Example: Input: 5 2 -1 2 3 -5 Output: 6 Explanation: The maximum number of candies can be collected from the contiguous sequence of houses [2, -1, 2, 3] which totals to 2 + (-1) + 2 + 3 = 6 candies.","solution":"def max_candies_collected(n, candies): Returns the maximum number of candies that can be collected from any contiguous sequence of houses. if n == 0: return 0 current_sum = max_sum = candies[0] for i in range(1, n): current_sum = max(candies[i], current_sum + candies[i]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are managing a fleet of delivery drones. Each drone can deliver one package at a time and must return to the warehouse before picking up another package. Each drone moves at a constant speed and can only carry packages that have a weight less than or equal to W units. Given the delivery locations, the weight of each package, and the coordinates of these locations on a 2-dimensional plane, determine the total time required for all drones to complete their deliveries. The time taken is influenced by: - The weight of the packages (each drone can carry only packages within their weight limit W). - The distance between the warehouse and the delivery location, calculated using Euclidean distance. - Each drone can only carry one package at a time. Input format: - The first line consists of an integer n (1 ≤ n ≤ 1000), the number of packages. - The second line consists of two integers, xi and yi (-1000 ≤ xi, yi ≤ 1000), representing the coordinates of the warehouse. - The third line consists of an integer W (1 ≤ W ≤ 1000), the maximum weight the drones can carry. - The next n lines each contain three integers: - pj (the weight of the package, 1 ≤ pj ≤ 1000) - xj and yj (-1000 ≤ xj, yj ≤ 1000), the coordinates of the delivery location of the j-th package. Output format: - Print a single integer representing the total delivery time (in minutes) for all packages to be delivered. Example: Input: 5 0 0 100 5 1 1 50 2 3 20 -1 4 100 4 5 10 3 3 Output: 149","solution":"import math def total_delivery_time(n, warehouse, W, packages): Calculates the total delivery time for a fleet of delivery drones. n: the number of packages. warehouse: a tuple (xi, yi) representing the coordinates of the warehouse. W: the maximum weight a drone can carry. packages: a list of tuples (pj, xj, yj) representing the weight and coordinates of each package. Returns the total delivery time for all packages. xi, yi = warehouse total_time = 0 for weight, xj, yj in packages: if weight <= W: distance = math.sqrt((xi - xj) ** 2 + (yi - yj) ** 2) total_time += 2 * distance # going to the destination and coming back return math.ceil(total_time) # Example usage: # Input # n = 5 # warehouse = (0, 0) # W = 100 # packages = [(5, 1, 1), (50, 2, 3), (20, -1, 4), (100, 4, 5), (10, 3, 3)] # Output: 149 # assert total_delivery_time(n, warehouse, W, packages) == 149"},{"question":"In a land of computer programming, there is a sequence of mystical numbers known as the Fibonacci numbers. The sequence starts with 0 and 1, and every subsequent number is the sum of the previous two. Thus, the Fibonacci sequence looks like this: 0, 1, 1, 2, 3, 5, 8, ... Given a number N, your task is to find the smallest Fibonacci number that is greater than or equal to N. # Input - A single integer N (1 leq N leq 10^{18}). # Output - A single integer representing the smallest Fibonacci number greater than or equal to N. # Example Input ```plaintext 15 ``` Output ```plaintext 21 ``` Input ```plaintext 8 ``` Output ```plaintext 8 ```","solution":"def smallest_fibonacci_greater_than_or_equal_to(N): Returns the smallest Fibonacci number that is greater than or equal to N. if N <= 0: return 0 a, b = 0, 1 while b < N: a, b = b, a + b return b"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. You need to determine if it is possible to rearrange the characters of the string s in such a way that every pair of equal characters has at least k other characters between them. If such a rearrangement is possible, print any valid rearrangement. Otherwise, print \\"NO\\". Input - The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. - The first line of each test case contains the integer k (1 ≤ k ≤ 1000). - The second line of each test case contains the string s (1 ≤ |s| ≤ 10000). Output - For each test case, if it is possible to rearrange the string as required, print \\"YES\\" on the first line and the rearranged string on the second line. If it is not possible, print \\"NO\\" on the single line. Example Input: 2 2 aabb 3 aabb Output: YES abab NO","solution":"from collections import Counter from heapq import heappop, heappush def rearrange_string(s, k): if k == 0: return \\"YESn\\" + s counter = Counter(s) max_heap = [] for char, count in counter.items(): heappush(max_heap, (-count, char)) result = [] queue = [] while max_heap: count, char = heappop(max_heap) result.append(char) queue.append((char, count + 1)) if len(queue) < k: continue prev_char, prev_count = queue.pop(0) if -prev_count > 0: heappush(max_heap, (prev_count, prev_char)) if len(result) != len(s): return \\"NO\\" return \\"YESn\\" + \\"\\".join(result) def solve(test_cases): results = [] for k, s in test_cases: result = rearrange_string(s, k) results.append(result) return results"},{"question":"Alicia is fascinated by strings and has been working on a particular type of string transformation puzzle. She has a string s and an integer k. The goal is to transform s into the lexicographically smallest string possible by performing at most k operations. In each operation, she can choose any character in the string and move it to any other position. Note that any character can be moved multiple times, and the same character can appear more than once in the string. The task is to determine the lexicographically smallest string that can be obtained from s by performing at most k such operations. The first line contains an integer k (1 ≤ k ≤ 100). The second line contains a string s of length n (1 ≤ n ≤ 100). Output the lexicographically smallest string Alicia can obtain after performing at most k operations. **Example:** Input: 3 dcab Output: abcd Input: 1 dcaeb Output: cadbe","solution":"def lexicographically_smallest_string(k, s): Returns the lexicographically smallest string by performing at most k operations. Each operation consists of moving a character to another position. n = len(s) if k >= n: return \'\'.join(sorted(s)) s = list(s) for i in range(n): min_index = i for j in range(i + 1, min(i + k + 1, n)): if s[j] < s[min_index]: min_index = j if min_index != i: # move s[min_index] to position i s.insert(i, s.pop(min_index)) return \'\'.join(s)"},{"question":"Fiona is organizing a talent show and she has a list of participants. Each participant has a specific skill level represented by an integer. Fiona wants to create the most impressive talent show possible by selecting exactly m participants such that the sum of their skill levels is maximized. However, there\'s a twist: the difference between the highest and the lowest skill levels among the chosen participants must not exceed a given value d. You are tasked with helping Fiona select the participants. Input: - The first line contains two integers n and m (1 ≤ m ≤ n ≤ 100,000) — the total number of participants and the number of participants Fiona wants to select. - The second line contains an integer d (0 ≤ d ≤ 10^9) — the maximum allowed difference between the highest and lowest skill levels among the selected participants. - The third line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the skill levels of the participants. Output: - Print a single integer, the maximum possible sum of skill levels of exactly m selected participants while ensuring the difference between the highest and lowest skill levels does not exceed d. If it\'s not possible to select m participants satisfying the above conditions, print -1. Example: Input: ``` 5 3 10 1 2 8 9 12 ``` Output: ``` 29 ``` Explanation: Fiona can select participants with skill levels 9, 8, and 12. The difference between the highest and lowest skill levels is 4 which is less than or equal to 10, and their sum is 29.","solution":"def max_skill_sum(n, m, d, skills): Find the maximum sum of exactly m participants such that the difference between the highest and the lowest skill levels among the selected participants does not exceed d. # Sorting the skill levels skills.sort() # Initialize the maximum sum result result = -1 # Traverse through the sorted list and check for valid segments for i in range(n - m + 1): # Check the difference between the highest and the lowest skill levels in the current segment if skills[i + m - 1] - skills[i] <= d: # Calculate the sum of the current segment current_sum = sum(skills[i:i + m]) # Update result if current segment sum is greater if current_sum > result: result = current_sum return result"},{"question":"You have recently joined a competitive programming course, and your instructor assigns you a problem to test your understanding of arrays and cumulative sums. The task is to process multiple range queries on a given array. For each query, you need to find the sum of the elements within a specific range. The first line of the input contains two integers n and q (1 le n, q le 10^5) — the size of the array and the number of queries. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), representing the elements of the array. The following q lines each contain two integers l and r (1 le l le r le n), representing the range [l, r] for which you need to find the sum of elements. Output q lines, each containing the sum of the elements for the respective range. Example: Input: ``` 5 3 1 2 3 4 5 1 3 2 5 1 5 ``` Output: ``` 6 14 15 ``` Explanation: - For the first query [1, 3], the sum of elements from 1 to 3 is 1+2+3=6. - For the second query [2, 5], the sum of elements from 2 to 5 is 2+3+4+5=14. - For the third query [1, 5], the sum of elements from 1 to 5 is 1+2+3+4+5=15.","solution":"def process_queries(n, q, array, queries): Process the range sum queries on the given array. Parameters: n (int): The size of the array. q (int): The number of queries. array (list of int): The elements of the array. queries (list of tuple): Each tuple has two integers (l, r) representing the range [l, r] Returns: list of int: The sum of elements for each range specified in the queries. # Precompute the prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] results = [] for l, r in queries: # Convert 1-based index to 0-based index sum_lr = prefix_sums[r] - prefix_sums[l - 1] results.append(sum_lr) return results"},{"question":"The mountain climbers are preparing for an expedition. They plan to climb from the base camp at coordinates (bx, by) to the summit at coordinates (sx, sy). The terrain consists of different elevation levels, and the climbers can only ascend directly up, down, left, or right to adjacent points. The elevation levels are represented by a 2D matrix of integers, where each element denotes the elevation at that point. Climbers can move from one point to another if the target point\'s elevation is less than or equal to the current point\'s elevation plus a maximum step height h. Given the dimensions of the matrix, the maximum step height, the elevation matrix, and the start and end coordinates, determine the minimum number of steps required to reach the summit (sx, sy) from the base camp (bx, by). If it is impossible to reach the summit under the given conditions, output \\"-1\\" (without quotes). The first line contains three integers n, m, and h (1 ≤ n, m ≤ 1000, 0 ≤ h ≤ 1000) representing the number of rows and columns of the matrix, and the maximum step height, respectively. The next n lines contain m integers each, representing the elevation levels of the terrain. The last line contains four integers, bx, by, sx, and sy (0 ≤ bx, by, sx, sy < n, m), representing the coordinates of the base camp and the coordinates of the summit. If the climbers can reach the summit, print the minimum number of steps required. Otherwise, print \\"-1\\". Example: Input: 3 3 2 1 3 5 2 4 6 3 7 8 0 0 2 2 Output: 4","solution":"from collections import deque def min_steps_to_summit(n, m, h, elevation, bx, by, sx, sy): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(bx, by, 0)]) # (x, y, steps) visited[bx][by] = True while queue: x, y, steps = queue.popleft() if (x, y) == (sx, sy): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: if elevation[nx][ny] <= elevation[x][y] + h: visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1"},{"question":"Peter likes to collect rare stamps and maintain a catalog. He wants to keep track of the stamps sorted by the year they were issued. Each entry in the catalog contains the name of the country, the stamp\'s identification code, and the year of issue. A valid entry in the catalog is formatted as \\"country code year\\", where: - \\"country\\" is a string consisting of lowercase English letters. - \\"code\\" is a unique alphanumeric string (containing both letters and digits, case-insensitive) of a fixed length for each country. - \\"year\\" is a four-digit integer (1900 ≤ year ≤ 2023). Peter needs a way to sort the catalog entries by their year of issue in ascending order. If two or more stamps have the same year, then those should be sorted lexicographically by the \\"country\\" strings. If the country names are also the same, then those should be sorted by the \\"code\\" strings lexicographically. The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the number of stamps in Peter\'s catalog. Each of the next n lines contains exactly one entry in the format \\"country code year\\". Print all catalog entries sorted as specified. # Input ``` 5 finland ab23c4 2001 usa x12b3a 2003 canada lmnop3 2001 uk w2asf5 1999 france qp58a 2003 ``` # Output ``` uk w2asf5 1999 canada lmnop3 2001 finland ab23c4 2001 france qp58a 2003 usa x12b3a 2003 ``` # Notes 1. In this example, we have 5 entries. 2. Sorting by year, we start with the stamp from \\"uk\\" issued in 1999. 3. For the year 2001, we have two stamps from \\"canada\\" and \\"finland\\" and they are sorted lexicographically by country name. 4. For the year 2003, we again sort by \\"france\\" and \\"usa\\" lexicographically by country name.","solution":"def sort_stamps(entries): Sorts a list of stamp catalog entries by year, then by country, then by code. Args: entries (list of str): The entries to sort, each in the format \\"country code year\\". Returns: list of str: The sorted list of entries. # Split each entry into components and convert the year to an integer for proper sorting. parsed_entries = [ (entry.split()[0], entry.split()[1], int(entry.split()[2])) for entry in entries ] # Sort by year, then by country, then by code sorted_entries = sorted(parsed_entries, key=lambda x: (x[2], x[0], x[1])) # Convert sorted entries back to original string format result = [\\"{} {} {}\\".format(country, code, year) for country, code, year in sorted_entries] return result"},{"question":"A software development company is designing an algorithm to process large datasets of employee records. Each record has three fields: `name`, `age`, and `department`. The goal is to efficiently perform a set of operations which include adding a new employee, updating employee details, and fetching specific information about employees based on given criteria. You are required to implement a data structure to handle the following operations: 1. Add Employee: Add a new employee to the dataset with the given `name`, `age`, and `department`. 2. Update Employee: Update the `age` or `department` or both of an existing employee, identified by their unique `name`. 3. Query Employees by Department: Given a department name, return a list of all employees in that department sorted lexicographically by their name. 4. Query Employees by Age Range: Given an age range [min_age, max_age], return a list of all employees whose ages fall within this range, sorted lexicographically by their name. Design and implement the data structure to ensure all operations are efficient. # Input Format The first line contains an integer `q`, the number of operations to be performed. The next `q` lines contain the operations, each of one the following formats: - `ADD name age department` — Add an employee with given `name`, `age`, and `department`. - `UPDATE name age? department?` — Update the `age` and/or `department` of the employee with the given `name`. If `age` or `department` is not provided, it should remain unchanged. - `QUERY_DEPARTMENT department` — List all employees in the given `department`. - `QUERY_AGE_RANGE min_age max_age` — List all employees whose ages lie between `min_age` and `max_age`. # Output Format For each `QUERY_DEPARTMENT` and `QUERY_AGE_RANGE` operation, print the list of employee names in the specified order on separate lines. # Constraints - 1 ≤ q ≤ 100,000 - 1 ≤ name length ≤ 100 - 1 ≤ age ≤ 100 - 1 ≤ department length ≤ 100 - Employee names are unique - All names and departments consist of lowercase English letters only # Example **Input:** ``` 7 ADD alice 30 hr ADD bob 25 finance ADD charlie 23 hr UPDATE alice 31 hr QUERY_DEPARTMENT hr QUERY_DEPARTMENT finance QUERY_AGE_RANGE 24 31 ``` **Output:** ``` alice charlie bob alice ``` # Explanation Adding and updating the records as described, the `QUERY_DEPARTMENT` for `hr` returns `alice` and `charlie` sorted by name. The `QUERY_DEPARTMENT` for `finance` returns `bob`. The `QUERY_AGE_RANGE` [24, 31] returns `alice` and `bob`, who are sorted lexicographically by their names.","solution":"class EmployeeDatabase: def __init__(self): self.employees = {} # A dictionary to hold employee records def add_employee(self, name, age, department): self.employees[name] = {\'age\': age, \'department\': department} def update_employee(self, name, age=None, department=None): if name in self.employees: if age is not None: self.employees[name][\'age\'] = age if department is not None: self.employees[name][\'department\'] = department def query_by_department(self, department): result = sorted([name for name, details in self.employees.items() if details[\'department\'] == department]) return result def query_by_age_range(self, min_age, max_age): result = sorted([name for name, details in self.employees.items() if min_age <= details[\'age\'] <= max_age]) return result # Function to process operations def process_operations(operations): db = EmployeeDatabase() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \'ADD\': name, age, department = parts[1], int(parts[2]), parts[3] db.add_employee(name, age, department) elif command == \'UPDATE\': name = parts[1] age = int(parts[2]) if parts[2] != \'?\' else None department = parts[3] if parts[3] != \'?\' else None db.update_employee(name, age, department) elif command == \'QUERY_DEPARTMENT\': department = parts[1] result = db.query_by_department(department) results.append(result) elif command == \'QUERY_AGE_RANGE\': min_age, max_age = int(parts[1]), int(parts[2]) result = db.query_by_age_range(min_age, max_age) results.append(result) return results"},{"question":"Write a function that takes a list of integers `arr` and an integer `k` as input, and returns the length of the longest contiguous subarray whose sum is exactly `k`. If no such subarray exists, return 0. Example: ``` Input: arr = [1, -1, 5, -2, 3], k = 3 Output: 4 Input: arr = [1, 2, 3], k = 3 Output: 2 Input: arr = [-2, -1, 2, 1], k = 1 Output: 2 ``` Your implementation should follow this signature: ```python def longest_subarray_with_sum(arr: List[int], k: int) -> int: ``` Constraints: - The length of `arr` will be in the range [1, 10^5]. - The values in `arr` will be in the range [-10^4, 10^4]. - The value of `k` will fit within a 32-bit signed integer.","solution":"from typing import List def longest_subarray_with_sum(arr: List[int], k: int) -> int: sum_map = {} current_sum = 0 max_len = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum == k: max_len = i + 1 if (current_sum - k) in sum_map: max_len = max(max_len, i - sum_map[current_sum - k]) if current_sum not in sum_map: sum_map[current_sum] = i return max_len"},{"question":"In a kingdom, there are multiple cities connected by bidirectional roads. Each road is associated with a toll cost. The kingdom\'s government decided to build a new road network such that the total toll cost from one specific city, the capital, to all other cities is minimized. They plan to implement this using a Minimum Spanning Tree (MST) approach. Given a list of cities and roads, compute the minimum total cost required to connect all cities to the capital. The capital city has an index of 1. Each road between cities is described by three integers: u, v, w, where u and v are cities and w is the toll cost of the road between them. # Input - The first line contains two integers n and m (1 le n le 1000, 1 le m le 10000) which represent the number of cities and the number of roads respectively. - The following m lines each contain three integers u, v, and w (1 le u, v le n, 1 le w le 10^4) describing the roads. # Output Print a single integer representing the minimum total toll cost needed to connect all cities in the kingdom such that the cost from the capital to all other cities is minimized. # Example **Input** ``` 5 7 1 2 3 1 3 4 2 3 2 2 4 5 3 4 1 3 5 6 4 5 2 ``` **Output** ``` 11 ``` # Explanation The capital is city 1, and we need to find the MST cost that connects all cities. One possible MST with the minimum toll cost is: - Road between city 1 and city 2 with cost 3. - Road between city 2 and city 3 with cost 2. - Road between city 3 and city 4 with cost 1. - Road between city 4 and city 5 with cost 2. The total cost is 3 + 2 + 1 + 2 = 8.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimum_toll_cost(n, m, roads): roads.sort(key=lambda x: x[2]) parent = list(range(n)) rank = [0] * n mst_cost = 0 edge_count = 0 for u, v, w in roads: u -= 1 v -= 1 root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) mst_cost += w edge_count += 1 if edge_count == n - 1: break return mst_cost"},{"question":"Given a list of logical expressions in prefix notation, determine the result of each expression. The logical expressions consist of the operators \\"AND\\", \\"OR\\", and \\"NOT\\", as well as the boolean values \\"TRUE\\" and \\"FALSE\\". - AND: returns TRUE if both operands are TRUE, otherwise returns FALSE. - OR: returns TRUE if at least one operand is TRUE, otherwise returns FALSE. - NOT: returns the opposite boolean value of its operand. The first line of the input contains a single integer n (1 ≤ n ≤ 100), the number of logical expressions to process. Each of the next n lines contains a single logical expression in prefix notation. The expression is guaranteed to be valid and contain at most 100 elements. Output the result of each logical expression in the same order as they appear in the input. The output for each expression should be \\"TRUE\\" or \\"FALSE\\". # Example Input: ``` 3 AND TRUE FALSE OR TRUE ( NOT FALSE ) NOT AND TRUE FALSE ``` Output: ``` FALSE TRUE TRUE ```","solution":"def evaluate_expression(expression): elements = expression.split() def eval_tokens(tokens): token = tokens.pop(0) if token == \\"TRUE\\": return True elif token == \\"FALSE\\": return False elif token == \\"AND\\": return eval_tokens(tokens) and eval_tokens(tokens) elif token == \\"OR\\": return eval_tokens(tokens) or eval_tokens(tokens) elif token == \\"NOT\\": return not eval_tokens(tokens) return \\"TRUE\\" if eval_tokens(elements) else \\"FALSE\\" def evaluate_logical_expressions(expressions): results = [] for expression in expressions: results.append(evaluate_expression(expression)) return results"},{"question":"You are given a grid with rows and columns, populated with pluses (\'+\') and minuses (\'-\'). A grid is considered \\"domino-fillable\\" if you can place 1x2 dominos on the plus cells (\'+\') such that all plus cells are exactly covered by a domino, and no two dominos overlap. Each test case consists of the grid dimensions (`n` x `m`) followed by the grid itself. You have to determine whether each grid is \\"domino-fillable\\" or not. # Input: - The first line contains a single integer `T` (1 le T le 50) — the number of test cases. - Each test case starts with a line containing two integers `n` and `m` (1 le n, m le 50), the dimensions of the grid. - The next `n` lines each contain a string of exactly `m` characters, representing a row of the grid, where each character is either a plus (\'+\') or a minus (\'-\'). # Output: - For each test case, output \\"YES\\" if the grid is domino-fillable, otherwise output \\"NO\\". # Example: Input: ``` 2 3 3 ++- +-- +++ 2 2 ++ -- ``` Output: ``` NO YES ``` # Explanation: In the first example: ``` ++- +-- +++ ``` It is not possible to fit 1x2 dominos to cover all pluses. In the second example: ``` ++ -- ``` It is possible to place one horizontal 1x2 domino to cover the two pluses. Thus, the grid is domino-fillable.","solution":"def is_domino_fillable(n, m, grid): plus_cells = sum(row.count(\'+\') for row in grid) if plus_cells % 2 != 0: return \\"NO\\" visited = [[False] * m for _ in range(n)] def can_place_domino(x, y): if x + 1 < n and not visited[x][y] and not visited[x + 1][y] and grid[x][y] == grid[x + 1][y] == \'+\': return True if y + 1 < m and not visited[x][y] and not visited[x][y + 1] and grid[x][y] == grid[x][y + 1] == \'+\': return True return False def place_domino(x, y): if x + 1 < n and not visited[x][y] and not visited[x + 1][y] and grid[x][y] == grid[x + 1][y] == \'+\': visited[x][y] = visited[x + 1][y] = True return True if y + 1 < m and not visited[x][y] and not visited[x][y + 1] and grid[x][y] == grid[x][y + 1] == \'+\': visited[x][y] = visited[x][y + 1] = True return True return False for i in range(n): for j in range(m): if grid[i][j] == \'+\' and not visited[i][j]: if not place_domino(i, j): return \\"NO\\" return \\"YES\\" def process_input(T, cases): results = [] for case in cases: n, m = case[0] grid = case[1] results.append(is_domino_fillable(n, m, grid)) return results"},{"question":"You have been given a two-dimensional grid of dimensions MxN. This grid represents a chessboard where some of the cells can have obstacles. You are required to find a path from the top-left cell (0, 0) to the bottom-right cell (M-1, N-1), moving strictly either down or to the right at each step, while avoiding obstacles. If there is no possible path, you should return -1. Your task is to write a function that takes the dimensions of the grid and the positions of all obstacles, and returns the number of distinct paths from the top-left cell to the bottom-right cell. Obstacles and bounds of the matrix should be handled appropriately. # Function Signature: ```python def uniquePathsWithObstacles(grid: List[List[int]]) -> int: pass ``` # Input: - The function receives a list of lists, where each inner list represents a row in the grid. Each cell in the grid is represented by an integer: - `0` represents an empty cell. - `1` represents an obstacle. # Output: - The function should return an integer, representing the number of distinct paths from (0, 0) to (M-1, N-1). If no such path exists, return `-1`. # Example: ```python grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] # Returns: 2 (There are two ways to go from (0,0) to (2,2)) grid = [ [0, 1], [0, 0] ] # Returns: 1 (There is one way to go from (0,0) to (1,1)) ``` # Constraints: - `1 <= M, N <= 100` - The grid is always at least 1x1. - Cells are either 0 or 1.","solution":"from typing import List def uniquePathsWithObstacles(grid: List[List[int]]) -> int: if not grid or grid[0][0] == 1: return -1 M, N = len(grid), len(grid[0]) dp = [[0 for _ in range(N)] for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[M-1][N-1] if dp[M-1][N-1] > 0 else -1"},{"question":"# Domain: Data Structures and Algorithms You are tasked with building a simplified version of a task scheduler that orders tasks based on their dependencies. Each task has a unique non-empty name consisting of lowercase Latin letters with a length not exceeding 10. Some tasks may depend on other tasks and must be executed only after all their dependencies have been completed. You\'re given a list of task descriptions. Each task description includes the task name followed by the names of tasks it depends on. Help the task scheduler to determine a valid sequence of tasks execution that respects the dependencies. If there are multiple valid sequences, any one of them is acceptable. More formally, determine a topological ordering of the given tasks. If no valid ordering exists, output \\"No valid ordering\\". # Input format: - The first line contains an integer n (1 ≤ n ≤ 1,000) — the number of tasks. - The next n lines each describe a task. The first item in each line is the task name, followed by a space-separated list of tasks it depends on. If a task has no dependencies, it is listed alone on its line. # Output format: - Output the valid sequence of tasks execution respecting the dependencies, each task name on a new line. - If no valid ordering exists, output \\"No valid ordering\\". # Example: Input: ``` 5 task1 task2 task3 task2 task4 task3 task4 task5 task5 ``` Output: ``` task5 task4 task2 task3 task1 ``` Note: Depending on the order of processing, another valid output could be: ``` task3 task5 task4 task2 task1 ``` In either case, tasks are listed respecting their dependencies. If cyclic dependencies existed in the data, output would be \\"No valid ordering\\".","solution":"from collections import defaultdict, deque def find_task_ordering(n, tasks): graph = defaultdict(list) indegree = defaultdict(int) for task in tasks: parts = task.split() current_task = parts[0] dependencies = parts[1:] if current_task not in indegree: indegree[current_task] = 0 for dependency in dependencies: graph[dependency].append(current_task) indegree[current_task] += 1 if dependency not in indegree: indegree[dependency] = 0 queue = deque([task for task in indegree if indegree[task] == 0]) ordered_tasks = [] while queue: current = queue.popleft() ordered_tasks.append(current) for neighbor in graph[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(ordered_tasks) != len(indegree): return \\"No valid ordering\\" return ordered_tasks"},{"question":"A company\'s store tracker system logs sales information in real-time for its multiple stores. Each log entry contains the timestamp (in seconds since epoch), the store ID, and the number of items sold. The company wants to analyze the sales data to determine the busiest time window (with a fixed duration) for each store. Given the logs of sales entries and the duration of the time window, your task is to write a program that finds the maximum number of items sold in any time window of the given duration for each store. Each log entry appears in the format: timestamp, store_id, items_sold. Input: - The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of log entries. - The next n lines each contain three integers timestamp (0 ≤ timestamp ≤ 10^9), store_id (1 ≤ store_id ≤ 100), and items_sold (1 ≤ items_sold ≤ 100). - The last line contains a single integer window_duration (1 ≤ window_duration ≤ 3600), representing the duration of the time window in seconds. Output: For each store ID that appears in the logs, print a line with the store ID and the maximum number of items sold in any time window of the given duration. Example: Input: ``` 5 1 1 10 2 1 5 601 1 20 120 2 7 150 2 11 600 ``` Output: ``` 1 35 2 18 ``` Explanation: For store 1, the maximum number of items sold in a 600-second window is 35 (10+5+20 between time 1 and 601). For store 2, the maximum number of items sold in a 600-second window is 18 (7+11 between time 120 and 720).","solution":"def busy_time_window(n, logs, window_duration): from collections import defaultdict from itertools import combinations_with_replacement store_sales = defaultdict(list) for log in logs: timestamp, store_id, items_sold = log store_sales[store_id].append((timestamp, items_sold)) results = {} for store_id, sales in store_sales.items(): sales.sort() max_items_sold = 0 current_window_sales = 0 start = 0 for end in range(len(sales)): current_window_sales += sales[end][1] while sales[end][0] - sales[start][0] > window_duration: current_window_sales -= sales[start][1] start += 1 max_items_sold = max(max_items_sold, current_window_sales) results[store_id] = max_items_sold return results # Test the function with the example input n = 5 logs = [ (1, 1, 10), (2, 1, 5), (601, 1, 20), (120, 2, 7), (150, 2, 11) ] window_duration = 600 print(busy_time_window(n, logs, window_duration))"},{"question":"Sarah is learning about binary trees in her computer science class. She\'s currently working on understanding tree traversals and how they can be applied to solve problems. Her instructor has given her an interesting challenge where she needs to determine the maximum depth of a binary tree. The depth of a node in a tree is the number of edges from the tree\'s root node to the node. The maximum depth of the tree is the depth of the farthest node from the root. Sarah\'s task is to write a function that takes the root of a binary tree and returns its maximum depth. She needs to handle trees with up to 10000 nodes. Your task is to help Sarah by writing the function `maxDepth` that calculates the maximum depth of the binary tree. You need to implement the following: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root: TreeNode) -> int: # Your code here ``` # Input - The root of the binary tree. # Output - An integer representing the maximum depth of the binary tree. # Constraints - The number of nodes in the tree is in the range `[0, 10000]`. - The values of the nodes are in the range `[-1000, 1000]`. You must achieve this in a **time complexity of O(n)**, where n is the number of nodes in the tree. # Example ```python # Example input tree: # 3 # / # 9 20 # / # 15 7 root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20, TreeNode(15), TreeNode(7)) print(maxDepth(root)) # Output: 3 ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root: TreeNode) -> int: if not root: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Alice is an avid gardener who loves to grow a wide variety of flowers. She recently came across a collection of n different types of seeds, each with a respective growth time. From these seeds, she wants to plan her garden such that all grown flowers bloom at the same time in order to maximize the beauty of her garden. Each type of seed has a specific growth time, which is the number of days required for the flower to bloom from the day it\'s planted. Alice can plant multiple seeds on the same day, but once planted, a seed will grow and bloom after its specific growth time. Given the growth time of each type of seed, Alice needs to determine the minimum number of days required from any starting day to achieve her goal where all flower types bloom on the same day. Write a program that takes the number of seed types and an array of growth times, and outputs the minimum number of days needed for all flower types to bloom together. # Input: - The first line contains an integer n (1 ≤ n ≤ 50) — the number of different types of seeds. - The second line contains n space-separated integers t_i (1 ≤ t_i ≤ 100) — the growth time for each type of seed. # Output: - Print a single integer — the minimum number of days required for all flower types to bloom at the same time. # Example: **Input:** ``` 3 5 10 15 ``` **Output:** ``` 30 ``` **Explanation:** Alice can plant the seeds which grow in 15 days on the first day, the seeds which grow in 10 days on the 5th day, and the seeds which grow in 5 days on the 25th day. This way, all flowers will bloom on the 30th day, which is the earliest possible bloom day where all flowers bloom simultaneously.","solution":"import math from functools import reduce def lcm(a, b): return abs(a * b) // math.gcd(a, b) def lcm_multiple(numbers): return reduce(lcm, numbers) def min_days_to_bloom(n, growth_times): return lcm_multiple(growth_times)"},{"question":"In a distant galaxy, the planet Zorg is preparing for an interstellar relay race. The Zorgian runners are known for their incredible stamina but struggle with uneven terrains. Thus, they need to prepare a smooth track for their race, which requires a flattened terrain section between two points with specified elevations. You are given a series of measurements, each specifying the elevation at a specific coordinate on the Zorgian track. You need to write a program that finds the flattened terrain between two given points such that the difference in elevation between the highest and the lowest points on that section is minimized. The track is considered flattened if this difference is below a specified threshold. # Input description: - The first line contains an integer m (2 leq m leq 10^6), the number of measurements. - The second line contains an integer delta (1 leq delta leq 10^9), the elevation difference threshold. - The third line contains two integers p and q (1 leq p, q leq m), the indices of the two points between which the terrain needs to be flattened. - The next m lines each contain two integers x_j and h_j (1 leq x_j leq 10^9, 1 leq h_j leq 10^9), where x_j is the coordinate and h_j is the elevation at that coordinate. # Output description: If a flattened terrain exists: - Print a line containing three integers a, b and the elevation difference e, where a and b represent the start and end indices of the flattened terrain, and e is the minimum elevation difference found. If no such terrain exists: - Print a single line containing `-1`. # Example Input: ``` 6 10 2 5 1 20 2 30 3 25 4 27 5 26 6 24 ``` # Example Output: ``` 2 5 5 ``` # Explanation: In this example, the section between points 2 and 5 has an elevation difference of 5 (from 26 to 31), which is below the threshold of 10. Hence, the terrain between points 2 and 5 is considered flattened.","solution":"def find_flattened_terrain(m, delta, p, q, measurements): Finds the flattened terrain between two given points with a specified elevation difference threshold. Returns the start index, end index, and the minimum elevation difference found if such terrain exists. Otherwise, returns -1. if p > q: p, q = q, p # Ensure p is always less than q flattened_terrain = (-1, -1, float(\'inf\')) elevations_in_range = [measurements[i-1][1] for i in range(p, q+1)] min_elevation = min(elevations_in_range) max_elevation = max(elevations_in_range) min_difference = max_elevation - min_elevation if min_difference <= delta: flattened_terrain = (p, q, min_difference) if flattened_terrain[0] == -1: return -1 else: return flattened_terrain"},{"question":"In this problem, you will help a robot navigate a maze. The robot starts at the top-left corner of the maze (position (0,0)) and needs to reach the bottom-right corner of the maze (position (n-1, m-1)). The maze is represented as a grid with `n` rows and `m` columns. Each cell in the grid can either be open (denoted by a 0) or blocked (denoted by a 1). The robot can move up, down, left, or right, but it cannot move diagonally. Furthermore, the robot cannot move into a cell that is blocked. Your task is to determine the minimum number of steps required for the robot to reach the bottom-right corner if a path exists. If there is no such path, return -1. # Input - `n`: an integer representing the number of rows (1 leq n leq 1000) - `m`: an integer representing the number of columns (1 leq m leq 1000) - `maze`: a 2D list of dimensions `n` x `m` where each element is either a 0 (open) or a 1 (blocked) # Output - An integer representing the minimum number of steps required for the robot to reach the bottom-right corner if a path exists. Otherwise, return -1. # Example ```python def min_steps_in_maze(n, m, maze): # Your code here # Example Usage: n = 3 m = 3 maze = [ [0, 1, 0], [0, 0, 0], [1, 1, 0] ] print(min_steps_in_maze(n, m, maze)) # Output: 4 ``` # Explanation In the given example, one possible path for the robot to reach the bottom-right corner is down, down, right, right. The total number of steps is 4. If there was no possible path, the function would return -1. # Constraints - Try to optimize your solution for large inputs. - Ensure that you handle edge cases, such as when the start or end cell is blocked.","solution":"from collections import deque def min_steps_in_maze(n, m, maze): if maze[0][0] == 1 or maze[n-1][m-1] == 1: return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set() visited.add((0, 0)) while queue: r, c, steps = queue.popleft() # If reached the bottom-right corner if r == n - 1 and c == m - 1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and maze[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"The Smart Beaver and Beaverette have decided to plant a garden together. Beaverette loves having different types of flowers in the garden, but she\'s very particular about their arrangement. The garden will be represented as a sequence of flower beds, each containing a certain number of flowers. Beaverette wants the garden to be as diverse as possible, which means that no two adjacent flower beds should have the same number of flowers. The Smart Beaver needs your help to determine the maximum number of flower beds they can have while keeping Beaverette happy with no two adjacent flower beds having the same number of flowers. The first line contains a single integer n — the initial number of flower beds, 1 ≤ n ≤ 1000. The second line contains n space-separated integers fi — the number of flowers in each flower bed (0 ≤ fi ≤ 1000). In the first line, print a single integer m — the maximum number of flower beds that can be retained such that no two adjacent flower beds have the same number of flowers. In the second line, print m integers — the positions of the flower beds to be retained. Assume that the flower beds are numbered from 1 to n from left to right. If there are multiple solutions, print any of them.","solution":"def max_flower_beds(n, flowers): if n == 1: return 1, [1] positions = [1] last_flower_count = flowers[0] for i in range(1, n): if flowers[i] != last_flower_count: positions.append(i+1) last_flower_count = flowers[i] return len(positions), positions"},{"question":"Lena loves painting and has recently started exploring palindromes. A palindrome is a word that reads the same backward as forward, such as \\"madam\\" or \\"racecar\\". Lena has a string s of lowercase Latin letters, and she wants to determine the minimal number of characters that she needs to change to make the entire string a palindrome. Write a program that will help Lena find the minimal number of changes required. A character change involves replacing one character in the string with another character. The input consists of a single string s of length n (1 ≤ n ≤ 2000). Output a single integer, which represents the minimal number of character changes required to transform the string into a palindrome. # Example **Input:** ``` abca ``` **Output:** ``` 1 ``` **Explanation:** To make the string \\"abca\\" a palindrome, Lena can change the last character \'a\' to \'b\', resulting in the palindrome \\"abba\\". **Input:** ``` racecar ``` **Output:** ``` 0 ``` **Explanation:** The string \\"racecar\\" is already a palindrome, so no changes are needed.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of character changes required to transform the string s into a palindrome. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes"},{"question":"Tom has a rectangular grid of dimensions `m x n`. He wants to paint the grid in such a way that no two adjacent cells have the same color. Two cells are considered adjacent if they share a common edge. Your task is to find the minimum number of colors needed to paint the entire grid following Tom\'s requirement. Given multiple test cases, for each test case, determine the minimum number of colors required to paint the grid. The first line of the input contains one integer `t` (1 le t le 10^4) — the number of test cases. Each of the next `t` lines contains two space-separated integers `m` and `n` (1 le m, n le 10^9), the dimensions of the grid. For each test case, output a single integer — the minimum number of colors needed to paint the `m x n` grid such that no two adjacent cells have the same color. # Example Input ``` 4 1 1 2 3 4 4 5 5 ``` Output ``` 1 2 2 2 ``` # Explanation - For a `1 x 1` grid, only 1 color is needed since there are no adjacent cells. - For a `2 x 3` grid or any grid with both dimensions greater than 1, 2 colors are always sufficient: color it like a checkerboard. - The same applies for a `4 x 4` and `5 x 5` grid where both dimensions are greater than 1, where a minimum of 2 colors will suffice.","solution":"def min_colors_for_grid(m, n): Returns the minimum number of colors needed to paint the m x n grid such that no two adjacent cells have the same color. if m == 1 or n == 1: return 1 else: return 2 def min_colors_for_multiple_grids(test_cases): results = [] for m, n in test_cases: results.append(min_colors_for_grid(m, n)) return results"},{"question":"Suppose you are organizing a relay race for n teams. Each team has to pass a baton among its members via a specific order, where some members must receive the baton before others. This sequence of orders for each team is provided. However, since it is a relay race, each member of a team is positioned at a specific station along a straight line track, each station having a unique integer identifier. The time taken to pass the baton between consecutive stations is 1 hour. Your task is to determine the minimum time required to complete the relay race for all teams, assuming each team starts at their respective first station and follows the order strictly till the last member. All teams can operate simultaneously. The first line contains an integer t (1 ≤ t ≤ 100) — the number of teams. The next t blocks each describe a team: The first line of each block contains an integer m (1 ≤ m ≤ 200) — the number of members in the team. The second line of each block contains m distinct integers p1, p2, ..., pm (1 ≤ pi ≤ 1000) representing the stations of the team members in the order they must pass the baton. Output t integers, each representing the minimum number of hours required for each team to complete the relay race. Example: Input: 2 4 5 9 12 18 3 3 8 15 Output: 13 12 Explanation: For the first team, the baton moving order is from station 5 to 9 to 12 to 18. The time taken will be |9-5| + |12-9| + |18-12| = 4 + 3 + 6 = 13 hours. For the second team, the baton moving order is from station 3 to 8 to 15. The time taken will be |8-3| + |15-8| = 5 + 7 = 12 hours.","solution":"def minimum_time_to_complete_relay_race(teams): Returns a list of minimum times required for each team to complete the relay race. Parameters: teams (list of list of int): A list where each sublist describes a team\'s stations in order. Returns: list of int: A list of minimum times (in hours) for each team. result = [] for team in teams: time = 0 for i in range(len(team) - 1): time += abs(team[i+1] - team[i]) result.append(time) return result"},{"question":"You are given a list of integers representing the daily temperatures for a week. Write a program that processes this list and returns a new list such that, for each day in the input, the new list contains the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 in the respective position. Your implementation should focus on optimizing the time complexity. Write a function with the following signature: ```python def daily_temperatures(temperatures: List[int]) -> List[int]: pass ``` # Example: ``` Input: [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] ``` Note: - The input list, `temperatures`, has exactly 7 elements. - The output list should also have exactly 7 elements. - Optimize the solution to ensure it runs efficiently for large inputs.","solution":"from typing import List def daily_temperatures(temperatures: List[int]) -> List[int]: Given a list of daily temperatures, returns a list of days until a warmer temperature. Args: temperatures (List[int]): A list of daily temperatures. Returns: List[int]: A list where the value at each index represents the number of days until a warmer temperature. result = [0] * len(temperatures) stack = [] for i, temp in enumerate(temperatures): while stack and temperatures[stack[-1]] < temp: prev_day = stack.pop() result[prev_day] = i - prev_day stack.append(i) return result"},{"question":"A company is evaluating the performance of its employees using a rating system. Each employee is rated with an integer. The rating scale is from 1 (worst) to 5 (best). The company wants to calculate various statistics to understand the distribution of ratings among employees. **Problem** You are given a list of ratings for employees. Write a program to calculate and print the following statistics: 1. The percentage of employees who received each rating from 1 to 5. 2. The overall average rating rounded to two decimal places. # Input Format - The first line contains an integer, `n`, the number of employees (1 ≤ n ≤ 100,000). - The second line contains `n` integers separated by spaces, where each integer represents an employee\'s rating (each rating is an integer between 1 and 5). # Output Format Print six lines: 1. The percentage of employees who received a rating of 1, followed by the \'%\' sign. 2. The percentage of employees who received a rating of 2, followed by the \'%\' sign. 3. The percentage of employees who received a rating of 3, followed by the \'%\' sign. 4. The percentage of employees who received a rating of 4, followed by the \'%\' sign. 5. The percentage of employees who received a rating of 5, followed by the \'%\' sign. 6. The overall average rating rounded to two decimal places. # Sample Input ``` 6 1 2 2 3 4 5 ``` # Sample Output ``` 16.67% 33.33% 16.67% 16.67% 16.67% 2.83 ``` # Explanation In the sample input: - There are 6 employees. - One employee received a rating of 1. - Two employees received a rating of 2. - One employee received a rating of 3. - One employee received a rating of 4. - One employee received a rating of 5. The percentages are calculated as: - (1/6) * 100 ≈ 16.67% - (2/6) * 100 ≈ 33.33% - (1/6) * 100 ≈ 16.67% - (1/6) * 100 ≈ 16.67% - (1/6) * 100 ≈ 16.67% The overall average rating = (1+2+2+3+4+5)/6 = 17/6 ≈ 2.83","solution":"def calculate_ratings_statistics(n, ratings): rating_counts = [0] * 5 for rating in ratings: rating_counts[rating - 1] += 1 percentages = [(count / n) * 100 for count in rating_counts] average_rating = sum(ratings) / n result = [f\\"{percent:.2f}%\\" for percent in percentages] result.append(f\\"{average_rating:.2f}\\") return result"},{"question":"Scientists from a research center are working on a data classification problem based on DNA sequences. They have three classes of DNA sequences, each corresponding to a different organism. The challenge is to build a simple classifier that can predict the class of a new DNA sequence. You\'ve been given a training set of DNA sequences for three organisms. Each DNA sequence is composed of the characters \'A\', \'C\', \'G\', and \'T\'. The sequences are stored in three separate files, `class1.txt`, `class2.txt`, and `class3.txt`, each representing the respective class. Each file contains multiple DNA sequences, one per line. Write a program that reads a new DNA sequence from standard input and predicts the class of the provided DNA sequence based on the training set. The general structure of the input is as follows: - The first part of the input consists of three sections, each starting with a string \\"class n\\" where ( n ) can be 1, 2, or 3, followed by several lines of DNA sequences belonging to that class. Each section is concluded with an \\"end\\" statement. - The second part contains a number representing the number of DNA sequences you have to classify, followed by those sequences, one per line. An example input might look like this: ``` class 1 AGCTCGT CGTAGCT end class 2 TGCATGC ATGCCTG end class 3 CCGTAGC TCGAGCA end 2 AGCTCGT TGCATGC ``` The program should output the class (1, 2, or 3) to which each of the new DNA sequences most likely belongs. If a sequence is equally likely to belong to multiple classes, choose the smallest class number. You can assume that any new DNA sequence will have a length that can be found in the training set, and that the sequences in the training set for each class are unique. Output the results, one per line, in the order the new sequences are given.","solution":"def parse_input(input_lines): training_data = {1: [], 2: [], 3: []} to_classify = [] current_class = None classification_phase = False for line in input_lines: line = line.strip() if line.startswith(\\"class \\"): current_class = int(line.split()[1]) elif line == \\"end\\": current_class = None elif current_class: training_data[current_class].append(line) else: if not line.isdigit(): to_classify.append(line) elif not classification_phase: classification_phase = True return training_data, to_classify def classify_dna(training_data, dna): class_matches = {1: 0, 2: 0, 3: 0} for cls, sequences in training_data.items(): if dna in sequences: class_matches[cls] += 1 most_probable_class = min((cls for cls in class_matches if class_matches[cls] == max(class_matches.values()))) return most_probable_class def main(input_lines): training_data, to_classify = parse_input(input_lines) results = [] for dna in to_classify: result = classify_dna(training_data, dna) results.append(result) return results # Example usage: # input_lines = [ # \\"class 1n\\", \\"AGCTCGTn\\", \\"CGTAGCTn\\", \\"endn\\", # \\"class 2n\\", \\"TGCATGCn\\", \\"ATGCCTGn\\", \\"endn\\", # \\"class 3n\\", \\"CCGTAGCn\\", \\"TCGAGCAn\\", \\"endn\\", # \\"2n\\", \\"AGCTCGTn\\", \\"TGCATGCn\\" # ] # print(main(input_lines))"},{"question":"You are given a sequence of n integers, a1, a2, ..., an. Your task is to determine the longest contiguous subsequence (subarray) such that the absolute difference between any two consecutive elements in the subsequence is exactly 1. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the sequence. Print a single integer — the length of the longest contiguous subsequence where the absolute difference between any two consecutive elements is exactly 1. Example input: ``` 6 4 5 5 6 7 6 ``` Example output: ``` 4 ``` Explanation: The longest such contiguous subsequences are [4, 5], [5, 6, 7], and [7, 6], where the absolute difference between consecutive elements is exactly 1. Among these, the longest one has length 4.","solution":"def longest_contiguous_subsequence(n, sequence): Returns the length of the longest contiguous subsequence where the absolute difference between any two consecutive elements is exactly 1. if n <= 1: return n max_length = 1 current_length = 1 for i in range(1, n): if abs(sequence[i] - sequence[i - 1]) == 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given a maze represented by a 2D grid. Each cell in the grid is either empty (value 0) or an obstacle (value 1). You need to help a robot find the shortest path from the top-left corner of the grid (0, 0) to the bottom-right corner (n-1, m-1). The robot can only move up, down, left, or right, and cannot pass through obstacles. Your task is to write a function that takes in the grid and returns the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, return -1. Function Signature: ```python def shortest_path(maze: List[List[int]]) -> int: ``` Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. - The next n lines each contain m integers representing the grid, where each integer is either 0 (empty cell) or 1 (obstacle). Output: - Output a single integer — the length of the shortest path from the top-left corner to the bottom-right corner. If no path exists, return -1. Example: Input: ``` 4 4 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 ``` Output: ``` 7 ```","solution":"from typing import List from collections import deque def shortest_path(maze: List[List[int]]) -> int: n = len(maze) m = len(maze[0]) if maze[0][0] == 1 or maze[n-1][m-1] == 1: return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == n - 1 and c == m - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and maze[nr][nc] == 0 and (nr, nc) not in visited: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1"},{"question":"A group of scientists is preparing a greenhouse for multiple types of plants. They introduced a sensor system to monitor the growth of the plants. Each sensor records a unique type of data and is tagged with a label which is a positive integer denoting the type of sensor. However, sensors can only store their readings for a maximum of k minutes due to memory limitations. Hence, after every k minutes, the data recorded by all sensors is retaken starting from zero. You are given a list of sensor readings, each represented as a tuple. Each tuple contains three integers: the sensor type, the recorded value, and the time in minutes when the reading was recorded. Your task is to simulate sensor readings after every k minutes and return the list of consolidated sensor readings over the entire monitored period. A consolidated reading for a specific sensor type is the sum of all its readings modulo some constant m. Write a function `consolidate_sensor_readings(n: int, k: int, m: int, readings: List[Tuple[int, int, int]]) -> List[Tuple[int, int]]` where: - n is the number of unique sensor types. - k is the time interval (in minutes) after which all sensor readings are reset. - m is a constant for calculating the modulo of the sum of readings. - `readings` is a list of tuples where each tuple contains (sensor_type, value, time). The function should return a list of tuples. Each tuple should include a sensor type and its consolidated reading modulo m. **Constraints**: - 1 le n le 10^3 - 1 le k le 10^5 - 1 le m le 10^9 - 1 le text{len(readings)} le 10^6 - 1 le text{sensor_type} le n - 0 le text{value} le 10^9 - 0 le text{time} le 10^9 **Example**: ```python n = 3 k = 5 m = 100 readings = [(1, 10, 1), (2, 15, 1), (1, 20, 6), (3, 5, 7), (2, 10, 11)] assert consolidate_sensor_readings(n, k, m, readings) == [(1, 30), (2, 25), (3, 5)] ``` Solve the problem by carefully considering the constraints and managing the modulo operation appropriately to handle large values effectively.","solution":"from typing import List, Tuple from collections import defaultdict def consolidate_sensor_readings(n: int, k: int, m: int, readings: List[Tuple[int, int, int]]) -> List[Tuple[int, int]]: Consolidates sensor readings for every `k` minutes and calculates the total readings modulo `m`. Args: - n: Number of unique sensor types. - k: Time interval after which sensor readings are reset. - m: Constant for calculating the modulo of the sum of readings. - readings: List of sensor readings in the form (sensor_type, value, time). Returns: - List of tuples containing sensor type and their consolidated reading modulo `m`. sensors = defaultdict(int) # Dictionary to hold sum of readings per sensor type for sensor_type, value, time in readings: sensors[sensor_type] += value consolidated_readings = [(sensor_type, total % m) for sensor_type, total in sensors.items()] return consolidated_readings"},{"question":"Two friends, Alex and Jamie, are playing a game with a special string. The string consists entirely of lowercase English letters. They take turns removing exactly one character from the string such that the resulting string still contains all distinct characters from the original string at least once. If a player cannot make a valid move, they lose the game. Alex always plays first. Your task is to write a program that determines the winner of the game, assuming both players play optimally. The input is a single string s (1 ≤ |s| ≤ 100) consisting of lowercase English letters. You should output \\"Alex\\" if Alex is guaranteed to win the game, otherwise output \\"Jamie\\" if Jamie is guaranteed to win the game by playing optimally. # Examples Example 1 Input: ``` abc ``` Output: ``` Jamie ``` Example 2 Input: ``` aabb ``` Output: ``` Alex ``` # Explanation Example 1 In the first example, the string \\"abc\\" contains all distinct characters. Alex removes \'a\', the new string is \\"bc\\", then Jamie removes \'b\', and finally Alex has no valid move left and loses the game. Example 2 In the second example, \\"aabb\\", Alex can remove one \'a\' and the string becomes \\"abb\\". No matter what character Jamie removes next, the remaining string will still have all distinct characters as in the original string, guaranteeing that Alex will always have the last move. Write a function `find_winner(s: str) -> str` that returns \\"Alex\\" if Alex will win the game, or \\"Jamie\\" if Jamie will win the game.","solution":"def find_winner(s: str) -> str: Determines the game winner (Alex or Jamie) based on the input string. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: \\"Alex\\" if Alex wins, \\"Jamie\\" if Jamie wins. # Count the frequency of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Determine number of characters that appear more than once more_than_once = sum(1 for count in char_count.values() if count > 1) # If there are more than one character that repeats, Alex wins if more_than_once > 0: return \\"Alex\\" else: return \\"Jamie\\""},{"question":"Implement a function that takes a string representing a Roman numeral (within the range from 1 to 3999) and returns its integer equivalent. The input is a single string representing a valid Roman numeral. The string is guaranteed to be of uppercase letters and within the range specified. Output a single integer representing the equivalent decimal number. Roman numerals are based on the following values: - I : 1 - V : 5 - X : 10 - L : 50 - C : 100 - D : 500 - M : 1000 There are some special rules: - If a smaller numeral appears before a larger numeral, it is subtracted (e.g., IV is 4). - Otherwise, the numerals are added (e.g., VI is 6). Examples: Input: \\"III\\" Output: 3 Input: \\"IX\\" Output: 9 Input: \\"LVIII\\" Output: 58 Input: \\"MCMXCIV\\" Output: 1994","solution":"def roman_to_int(roman): Converts a Roman numeral to its integer equivalent. Parameters: roman (str): String representing a Roman numeral (valid, uppercase, range 1 to 3999). Returns: int: Integer equivalent of the Roman numeral. roman_values = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} total = 0 prev_value = 0 for char in reversed(roman): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"You are given an array of integers and a series of operations to perform on it. Each operation involves finding the sum of elements in a specified subarray. There are multiple such operations, and you need to process each of them efficiently. The array is 1-indexed, meaning the first element of the array is at position 1. # Input Format - The first line contains two integers, n and q (1 le n, q le 2 cdot 10^5), representing the size of the array and the number of queries respectively. - The second line contains n integers a_1, a_2, ldots, a_n, which are the elements of the array (1 le a_i le 10^9). - The following q lines each contain two integers l and r (1 le l le r le n), which define the subarray a[l dots r] for which you need to find the sum. # Output Format For each query, print the sum of integers in the subarray a[l dots r]. # Example Input ``` 5 3 1 2 3 4 5 1 3 2 4 3 5 ``` Output ``` 6 9 12 ``` # Explanation - For the first query, the sum of elements in the subarray a[1 dots 3] is 1 + 2 + 3 = 6. - For the second query, the sum of elements in the subarray a[2 dots 4] is 2 + 3 + 4 = 9. - For the third query, the sum of elements in the subarray a[3 dots 5] is 3 + 4 + 5 = 12.","solution":"def preprocess_array(arr): Preprocess the given array to create a prefix sum array. This prefix sum array will let us quickly find the sum of any subarray. n = len(arr) - 1 # because arr is 1-indexed prefix_sum = [0] * (n + 1) # prefix_sum is also 1-indexed for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i] return prefix_sum def query_sum(prefix_sum, l, r): Use the prefix sum array to find the sum of elements from index l to r (1-indexed). return prefix_sum[r] - prefix_sum[l - 1] def solve(n, q, array, queries): array.insert(0, 0) # Making the array 1-indexed. array[0] will not be used prefix_sum = preprocess_array(array) results = [] for l, r in queries: result = query_sum(prefix_sum, l, r) results.append(result) return results"},{"question":"A social network is represented by a graph with n users, labeled from 1 to n. Each user has at most m immediate friends. You are given this friendship network as a list of pairs (u, v), indicating that user u and user v are friends. Your task is to find out the shortest chain of friendships that connects two given users x and y. If there is no such chain, return -1. The first line of the input contains three integers n, m, and q (1 ≤ n ≤ 10^4, 1 ≤ m ≤ 50, 1 ≤ q ≤ 10^3) – the number of users, the maximum number of immediate friends, and the number of queries, respectively. The next line contains an integer e (1 ≤ e ≤ 100,000), the number of pairs representing the friendships. The next e lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that user u and user v are friends. Each of the next q lines contains two integers x and y (1 ≤ x, y ≤ n) – the users you need to find the shortest chain of friendships for. For each query, output the length of the shortest chain of friendships connecting users x and y, or -1 if there is no such chain. Example: Input: 5 3 3 4 1 2 2 3 3 4 4 5 1 3 1 5 2 5 Output: 2 3 2","solution":"from collections import deque def shortest_chain_bfs(n, friends, queries): Finds the shortest chain of friendships connecting users using BFS. Parameters: n (int): Number of users. friends (List[Tuple[int, int]]): List of user friendships. queries (List[Tuple[int, int]]): List of user queries to find the shortest chain. Returns: List[int]: List of shortest lengths of chains for each query, or -1 if no chain exists. graph = [[] for _ in range(n + 1)] # Build the friendship graph for u, v in friends: graph[u].append(v) graph[v].append(u) def bfs(start, end): Helper function to perform BFS to find the shortest path. Parameters: start (int): The starting node. end (int): The target node. Returns: int: Length of the shortest path, or -1 if no path exists. if start == end: return 0 visited = [False] * (n + 1) queue = deque([(start, 0)]) # (current_node, current_distance) while queue: node, distance = queue.popleft() for neighbor in graph[node]: if neighbor == end: return distance + 1 if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) return -1 # Process each query result = [] for x, y in queries: result.append(bfs(x, y)) return result"},{"question":"Bob has an array of integers and he wants to perform several operations on it. Initially, the array contains n integers. Bob can perform the following types of operations on the array: 1. Update the i-th element of the array to a given value x. 2. Find the maximum value of the subarray from index l to r (inclusive). You are required to write a program to help Bob with these tasks. # Input Format - The first line contains an integer n (1 ≤ n ≤ 100,000), the size of the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000), representing the elements of the array. - The third line contains an integer q (1 ≤ q ≤ 100,000), the number of queries. - Each of the following q lines describes a query in one of the following formats: - `1 i x` : Update the i-th element to x (1 ≤ i ≤ n, 1 ≤ x ≤ 1,000,000). - `2 l r`: Find the maximum element in the subarray from index l to r (1 ≤ l ≤ r ≤ n). # Output Format For each query of type 2, print the maximum value of the subarray from index l to r on a new line. # Sample Input ``` 5 1 2 3 4 5 3 2 1 5 1 3 10 2 1 5 ``` # Sample Output ``` 5 10 ``` # Explanation For the first query, the maximum value in the subarray from index 1 to 5 is 5. For the second query, Bob updates the 3rd element to 10. The array becomes [1, 2, 10, 4, 5]. For the third query, the maximum value in the subarray from index 1 to 5 is now 10.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, index, value): # Update the leaf node pos = index + self.n self.tree[pos] = value # Update the internal nodes pos //= 2 while pos > 0: self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) pos //= 2 def range_max(self, left, right): res = -float(\'inf\') left += self.n right += self.n + 1 while left < right: if left & 1: res = max(res, self.tree[left]) left += 1 if right & 1: right -= 1 res = max(res, self.tree[right]) left //= 2 right //= 2 return res def process_queries(n, arr, queries): seg_tree = SegmentTree(arr) results = [] for query in queries: if query[0] == 1: _, i, x = query seg_tree.update(i - 1, x) elif query[0] == 2: _, l, r = query results.append(seg_tree.range_max(l - 1, r - 1)) return results"},{"question":"You have an array a of n integers. Each integer is either 0 or 1. Your task is to find the minimum number of moves required to make all the elements in the array the same. In one move, you can do one of the following: - Select any two adjacent elements and swap them. - Increase or decrease any element by 1. You finish when all elements in the array are the same. The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 2 cdot 10^5) — the length of the array a. The second line contains array a of n integers, each either 0 or 1. It is guaranteed that the sum of n over test cases does not exceed 2 cdot 10^5. For each test case, print a single integer — the minimum number of moves required to make all the elements in the array the same. Example: ``` Input: 2 3 1 0 1 4 0 1 1 0 Output: 1 2 ``` Explanation: In the first test case, you can swap the second and third elements to get 1 1 0, then increase the last element to 1. In the second test case, you can first swap the first and second elements to get 1 1 1 0, then increase the last element to get 1 1 1 1.","solution":"def min_moves_to_uniform_array(n, a): count_0 = a.count(0) count_1 = n - count_0 # since the array only contains 0s and 1s return min(count_0, count_1) def process_test_cases(test_cases): results = [] for n, a in test_cases: results.append(min_moves_to_uniform_array(n, a)) return results"},{"question":"You are given a grid of size n x m where each cell contains a non-negative integer. You need to find the maximum sum of integers you can collect starting from the top-left corner of the grid (cell [0,0]) to the bottom-right corner of the grid (cell [n-1,m-1]). You can only move either right or down at any point in time. Write a function `maxGridSum` that takes two arguments: 1. `grid` (a list of list of non-negative integers): the grid itself, where `grid[i][j]` represents the value at cell [i][j]. 2. `n` (an integer): the number of rows in the grid. 3. `m` (an integer): the number of columns in the grid. Your function should return an integer representing the maximum sum possible. # Example: ```python def maxGridSum(grid, n, m): # Your code goes here # Sample input grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] n = 3 m = 3 # Expected output print(maxGridSum(grid, n, m)) # Output should be 12 ``` # Explanation Starting at grid[0][0] = 1, the path with the maximum sum is: 1 → 3 → 5 → 2 → 1, which sums up to 12. # Constraints - 1 ≤ n, m ≤ 100 - 0 ≤ grid[i][j] ≤ 100","solution":"def maxGridSum(grid, n, m): Returns the maximum sum of integers collected starting from [0,0] to [n-1,m-1] in the grid. You can only move either right or down at any point in time. # Create a 2D dp array with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Initialize the first cell with the value at the starting position dp[0][0] = grid[0][0] # Fill the dp table for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) # The bottom right cell contains the maximum sum return dp[n-1][m-1]"},{"question":"You are given a matrix of integers with dimensions m x n. Your task is to check whether the matrix is \\"Toeplitz\\". A matrix is Toeplitz if every diagonal from the top-left to the bottom-right has the same elements. Specifically, cells in the same diagonal should hold equal values. Your function should determine if the matrix meets this condition and return either `True` (indicating the matrix is Toeplitz) or `False` (indicating it is not). **Input Format:** - The first line contains two integers m and n (1 ≤ m, n ≤ 1000) - the numbers of rows and columns in the matrix. - Each of the next m lines contains n integers representing the matrix elements. **Output Format:** - Output a single boolean value: `True` or `False`. **Example:** ``` Input: 3 4 1 2 3 4 5 1 2 3 9 5 1 2 Output: True Input: 3 3 1 2 3 4 1 6 7 8 1 Output: False ``` **Explanation:** In the first example, all diagonals from top-left to bottom-right have the same elements: - Diagonal [1] - Diagonal [2, 2] - Diagonal [3, 3, 3] - Diagonal [4, 4] - ... In the second example, not all diagonals have the same elements. For instance: - Diagonal [1, 1, 1] has consistent elements. - Diagonal [2, 6] does not have consistent elements.","solution":"def is_toeplitz_matrix(matrix): Returns True if the given matrix is a Toeplitz matrix, otherwise False. m = len(matrix) n = len(matrix[0]) for row in range(1, m): for col in range(1, n): if matrix[row][col] != matrix[row - 1][col - 1]: return False return True"},{"question":"You are given a list of integers and a target integer. Your task is to find two distinct elements from the list that sum up to the given target. Return a tuple containing the indices of the two numbers, and ensure the first index is smaller than the second index. If no such pair exists, return (-1, -1). The first line contains an integer `n`, which represents the length of the list. The second line contains `n` space-separated integers, which are the elements of the list. The third line contains the target integer. The list will contain at least two elements and at most 1000 elements. Each element in the list is an integer between -10000 and 10000. There can be multiple solutions; you should output the one with the smallest indices. Print the tuple containing the indices of the two numbers. Example input: 6 2 7 11 15 1 8 9 Example output: (0, 1)","solution":"def find_two_sum_indices(nums, target): Returns a tuple of indices of two distinct elements in the list that sum up to the target. If no such pair exists, return (-1, -1). num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return (-1, -1)"},{"question":"You are given a string and a pattern. The pattern contains lowercase letters, \'.\' and \'*\'. \'.\' matches any single character and \'*\' matches zero or more of the preceding element. Write a function to implement regular expression matching with support for \'.\' and \'*\'. The function prototype is: ```python def isMatch(s: str, p: str) -> bool: ``` **Input:** - The input consists of two strings, s and p, where 0 ≤ len(s) ≤ 20 and 0 ≤ len(p) ≤ 30. **Output:** - Return True if the pattern p matches the entire string s, otherwise return False. **Example:** ```plaintext Input: s = \\"aa\\", p = \\"a\\" Output: False Explanation: \\"a\\" does not match the entire string \\"aa\\". Input: s = \\"aa\\", p = \\"a*\\" Output: True Explanation: \'*\' means zero or more of the preceding element, so \\"a*\\" matches \\"aa\\". Input: s = \\"ab\\", p = \\".*\\" Output: True Explanation: \\".*\\" means \\"zero or more (*) of any character (.)\\". ```","solution":"def isMatch(s: str, p: str) -> bool: Determine if the string s matches the pattern p. Parameters: s (str): The string to be matched. p (str): The pattern, containing lowercase letters, \'.\' and \'*\'. Returns: bool: True if the pattern matches the string, False otherwise. memo = {} def dp(i, j): if (i, j) not in memo: if j == len(p): ans = i == len(s) else: first_match = i < len(s) and p[j] in {s[i], \'.\'} if j + 1 < len(p) and p[j + 1] == \'*\': ans = (dp(i, j + 2) or first_match and dp(i + 1, j)) else: ans = first_match and dp(i + 1, j + 1) memo[i, j] = ans return memo[i, j] return dp(0, 0)"},{"question":"Write a function that takes as input an array of integers and returns the maximum possible sum of a contiguous subarray within the given array. **Function Signature**: ```python def max_subarray_sum(arr: List[int]) -> int: pass ``` **Input**: - An array of integers `arr` where 1 ≤ |arr| ≤ 1000 and -1000 ≤ arr[i] ≤ 1000. **Output**: - An integer representing the maximum possible sum of a contiguous subarray. **Example**: ```python assert max_subarray_sum([1, -2, 3, 4, -1, 2, 1, -5, 4]) == 9 ``` **Explanation**: In the example, the subarray with the maximum sum is `[3, 4, -1, 2, 1]`, which has a sum of 9.","solution":"from typing import List def max_subarray_sum(arr: List[int]) -> int: Returns the maximum possible sum of a contiguous subarray within the given array. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given a directed graph with n nodes labeled from 1 to n and m edges, each edge has a positive integer weight. You need to find the shortest simple path between two given nodes, say node S and node T. A simple path is a path that does not contain any repeated nodes. # Input Format: - The first line contains two integers, n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of nodes and the number of edges. - The next m lines contain three integers each, u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) — representing a directed edge from node u to node v with weight w. - The last line contains two integers, S and T (1 ≤ S, T ≤ n) — the start and end nodes for the path query. # Output Format: - Output a single integer — the minimum weight of the shortest simple path from node S to node T. If there is no such path, output -1. # Example: Input: ``` 5 6 1 2 3 1 3 5 2 3 2 2 4 1 3 4 2 4 5 1 1 5 ``` Output: ``` 7 ``` Explanation: The shortest simple path from node 1 to node 5 is 1 -> 2 -> 4 -> 5 with a total weight of 3 + 1 + 1 = 5. # Constraints: - For solving this problem, you may employ any graph traversal algorithm that ensures the path is simple. Traditional shortest path algorithms like Dijkstra\'s may not suffice alone due to the simple path constraint. A comprehensive method would involve backtracking or modified BFS/DFS with memoization to avoid revisiting nodes on the same path.","solution":"import heapq def shortest_simple_path(n, m, edges, S, T): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) def dijkstra(S, T): pq = [(0, S, set())] while pq: cost, node, visited = heapq.heappop(pq) if node == T: return cost for neighbor, weight in graph[node]: if neighbor not in visited: heapq.heappush(pq, (cost + weight, neighbor, visited | {neighbor})) return -1 return dijkstra(S, T)"},{"question":"You are given an array of integers representing the scores of participants in a competition. You want to assign ranks to the participants based on their scores. The higher the score, the better the rank (i.e., rank 1 is the best). If two participants have the same score, they should have the same rank, and the rank after them should be appropriately skipped (e.g., if two participants are tied for rank 2, the next participant should be assigned rank 4). Write a function `assignRanks(scores)` that takes in a list of integers representing the scores of all the participants and returns a list of tuples where each tuple contains the original index (position) of each participant and their assigned rank. # Input - A list of integers `scores` where each integer represents the score of a participant. # Output - A list of tuples where each tuple contains: - The original index (position) of the participant (0-based index). - The rank assigned to that participant. # Example ```python def assignRanks(scores): # Your code here # Example 1 scores = [100, 90, 90, 80] # Output: [(0, 1), (1, 2), (2, 2), (3, 4)] # Example 2 scores = [50, 50, 50, 50] # Output: [(0, 1), (1, 1), (2, 1), (3, 1)] # Example 3 scores = [70, 80, 90, 100] # Output: [(0, 4), (1, 3), (2, 2), (3, 1)] ```","solution":"def assignRanks(scores): Function to assign ranks to participants based on their scores. Parameters: scores (list): A list of integers representing the scores of participants. Returns: list: A list of tuples where each tuple contains the original index and rank of the participant. # Create a list of tuples where each tuple contains the score and its original index indexed_scores = [(score, index) for index, score in enumerate(scores)] # Sort this list in descending order based on the scores indexed_scores.sort(reverse=True, key=lambda x: x[0]) # Initialize the result list and variables to track the current rank and previous score result = [] current_rank = 0 previous_score = None last_rank = 0 for i, (score, index) in enumerate(indexed_scores): if score != previous_score: current_rank = i + 1 previous_score = score last_rank = current_rank result.append((index, current_rank)) # Sort the result list by the original index to match the input order result.sort(key=lambda x: x[0]) return result"},{"question":"A developer is working on an application that performs data analysis on a sequence of stock prices over several days. Each day\'s stock price is represented as an integer, and certain calculations need to be performed to evaluate the stock\'s performance over a given time period. The developer has been tasked to write a function that identifies the maximum profit that can be achieved by buying and selling the stock exactly once within the given period. The main challenge is to ensure that the stock is bought before it is sold, and the function needs to calculate the maximum difference between a selling price and a buying price in the sequence. If no positive profit can be made, the function should return 0. # Input The input consists of a single line containing an integer n (1 ≤ n ≤ 10^6), the number of days, followed by n space-separated integers representing the stock prices on each day. Each stock price is an integer between 1 and 10^6. # Output The function should output a single integer, the maximum profit that can be obtained. If no profit can be made, output 0. # Example ``` Input: 7 100 180 260 310 40 535 695 Output: 655 ``` In this example, the maximum profit is achieved by buying stock at the price of 40 and selling it at the price of 695, yielding a profit of 655. Help the developer by writing the required function to maximize the profit from a single buy and sell operation on the given stock prices.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling the stock exactly once within the given period. If no positive profit can be made, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit def parse_input(input_str): Parses the input string and returns the list of stock prices. data = list(map(int, input_str.split())) n = data[0] prices = data[1:] return prices"},{"question":"You are given an array of integers. Your task is to determine whether it is possible to rearrange the elements of the array to form an arithmetic progression (a sequence in which the difference between any two consecutive elements is the same). The first line of input contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line of input contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the array. Output \\"YES\\" if it is possible to rearrange the elements to form an arithmetic progression. Otherwise, output \\"NO\\". Example: Input: 5 3 5 1 7 9 Output: YES Explanation: One possible arithmetic progression could be [1, 3, 5, 7, 9], which has a common difference of 2.","solution":"def can_form_arithmetic_progression(arr): Determines if the elements of the array can be rearranged to form an arithmetic progression. :param arr: List of integers :return: \\"YES\\" if they can be rearranged, otherwise \\"NO\\" if len(arr) <= 1: return \\"YES\\" arr.sort() common_diff = arr[1] - arr[0] for i in range(1, len(arr)): if arr[i] - arr[i - 1] != common_diff: return \\"NO\\" return \\"YES\\""},{"question":"# Chocolate Bar Break A chocolate bar consists of an n times m grid of squares, where each square represents a single piece of chocolate. You are allowed to break the chocolate bar along the lines that separate the squares. The goal is to break it down to individual squares. You can only break one piece of chocolate at a time, either horizontally or vertically. Each break operation takes exactly one second. For example, if you break a 3 times 2 block into two 3 times 1 blocks, this operation takes one second. Given the dimensions n and m of the chocolate bar, determine the minimum number of operations required to split the entire bar into individual squares. # Input - The input consists of two integers, n and m (1 leq n, m leq 100), representing the dimensions of the chocolate bar. # Output - Output a single integer, which is the minimum number of seconds required to split the entire chocolate bar into individual squares. # Examples Example 1 Input: ``` 2 2 ``` Output: ``` 3 ``` Example 2 Input: ``` 3 1 ``` Output: ``` 2 ``` # Explanation In Example 1, you can break the 2 times 2 bar in 3 seconds: 1. Break the bar horizontally into two 1 times 2 pieces. 2. Break each 1 times 2 piece vertically into two individual squares. In Example 2, you can break the 3 times 1 bar in 2 seconds: 1. Break the bar horizontally into two 1 times 1 pieces, and 1 times 2 piece. 2. Break the 1 times 2 piece horizontally into two 1 times 1 pieces.","solution":"def chocolate_bar_break(n, m): Returns the number of operations to split an n x m chocolate bar into individual 1x1 pieces. # In an n x m chocolate bar, we need (n-1) horizontal cuts and (m-1) vertical cuts. # Thus, the minimum number of cuts/operations needed is (n * m - 1) return n * m - 1"},{"question":"Alice has a directed graph with `n` nodes and `m` edges. She wants to know the shortest path from a starting node `s` to a target node `t`. Each edge in the graph has a positive weight. Write a program that determines the shortest path from `s` to `t` and prints the total weight of this path. If there is no path from `s` to `t`, the program should output -1. The input consists of: - An integer `n` (2 ≤ n ≤ 1000) — the number of nodes in the graph. - An integer `m` (1 ≤ m ≤ 5000) — the number of directed edges in the graph. - `m` lines containing three integers each: `u`, `v`, and `w` (1 ≤ u, v ≤ n) (1 ≤ w ≤ 1000) — representing a directed edge from node `u` to node `v` with weight `w`. - The starting node `s` (1 ≤ s ≤ n). - The target node `t` (1 ≤ t ≤ n). Print a single integer representing the shortest path from `s` to `t`. If there\'s no path, print -1. **Examples** **Input:** ``` 4 5 1 2 2 1 3 5 2 3 1 2 4 7 3 4 2 1 4 ``` **Output:** ``` 5 ``` **Input:** ``` 3 2 1 2 4 2 3 1 1 3 ``` **Output:** ``` 5 ``` **Input:** ``` 3 2 1 2 4 2 3 1 3 1 ``` **Output:** ``` -1 ```","solution":"import heapq def shortest_path(n, m, edges, s, t): Finds the shortest path from node s to node t in a directed graph. # Create adjacency list graph = [[] for _ in range(n+1)] for u, v, w in edges: graph[u].append((v, w)) # Initialize priority queue and distances table pq = [(0, s)] distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 while pq: current_distance, u = heapq.heappop(pq) # Early stop if we reach the target node if u == t: return current_distance if current_distance > distances[u]: continue for v, weight in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return -1 if distances[t] == float(\'inf\') else distances[t]"},{"question":"Alice loves arranging her bookshelf. She has a collection of books and each book can be represented by its height. Alice wants to arrange her books in such a way that the difference in height between any two adjacent books is minimized. Help Alice by writing a program that finds the optimal arrangement of her books. Given an array of integers where each integer represents the height of a book, your task is to reorder the array so that the height difference between every two adjacent books is minimized. In case of multiple solutions, return the lexicographically smallest one. # Input: - The first line contains a single integer n (1 leq n leq 100) — the number of books. - The second line contains n integers h_1, h_2, dots, h_n (1 leq h_i leq 1000), representing the heights of the books. # Output: - Output the reordered array of heights where the difference between any two adjacent heights is minimized. # Example: Input: ``` 5 4 3 1 10 6 ``` Output: ``` 1 3 4 6 10 ``` Input: ``` 6 7 3 5 8 2 1 ``` Output: ``` 1 2 3 5 7 8 ``` # Note: - In the first example, the rearranged heights are 1, 3, 4, 6, 10, where the differences between adjacent heights are minimized. - In the second example, the rearranged heights are 1, 2, 3, 5, 7, 8, which is already the lexicographically smallest arrangement.","solution":"def arrange_books(n, heights): This function takes the number of books and a list of their heights, rearranges the books such that the difference between heights of any two adjacent books is minimized. Parameters: n (int): Number of books heights (list of int): List containing heights of the books Returns: list of int: Rearranged list of heights # Sort the list to minimize the differences return sorted(heights)"},{"question":"You are given a sequence of length n composed of integers a1, a2, ..., an. You can perform the following operation exactly once: choose an integer x (1 ≤ x ≤ n) and either increase or decrease exactly x elements of the sequence by 1. Formally, for some chosen integer x, you can select exactly x distinct integers from the sequence and change each of them either to ai + 1 or ai - 1. Your task is to determine the minimum possible maximum value of the sequence after exactly one operation. The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the sequence. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the elements of the sequence. Print a single integer — the minimum possible maximum value of the sequence after exactly one operation. In the first sample, the sequence is [2, 3, 5]. Possible operations include increasing two elements to get [3, 4, 5], or decreasing two elements to get [1, 2, 5], each time ensuring the maximum value remains lower than the initial. In the second sample, the sequence is [1, 2, 3, 4]. By either increasing or decreasing any three elements, we can obtain a new sequence where the maximum value is minimized, such as [2, 2, 2, 2].","solution":"def min_possible_max_value(n, sequence): Determines the minimum possible maximum value of the sequence after exactly one operation. :param n: Length of the sequence (1 ≤ n ≤ 100,000) :param sequence: List of integers (1 ≤ ai ≤ 1,000,000) :return: The minimum possible maximum value of the sequence # Sort the sequence to facilitate finding the median sorted_sequence = sorted(sequence) # Possible operations: we should adjust the elements to the median value if possible # Median minimizes the maximum deviation in either direction if n % 2 == 0: median1, median2 = sorted_sequence[n // 2 - 1], sorted_sequence[n // 2] return min(median1 + 1, median2 + 1) else: median = sorted_sequence[n // 2] return median + 1 # Example case implementation n = 4 sequence = [1, 2, 3, 4] print(min_possible_max_value(n, sequence)) # Should output 3"},{"question":"Nina has a string s consisting of lowercase English letters. She can perform the following operations on the string any number of times: 1. Choose any character from the string and remove it. 2. Choose any character from the string and duplicate it (add another instance of that character to the string). Nina wants to determine if it is possible to make the string a palindrome by performing the above operations any number of times. The first line of the input contains a single integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains the string s (1 le |s| le 1000) — the string consisting of lowercase English letters. For each test case, print \\"Yes\\" if it is possible to make the string a palindrome, otherwise print \\"No\\". You may print every letter in any case you want. For 1st case: We already have a palindrome, so the output is \\"Yes\\". For 2nd case: We can duplicate \'a\' or \'b\' to form \\"ababa\\" or \\"baaab\\", making it a palindrome. For 3rd case: We can remove one \'b\' to form \\"aba\\", which is a palindrome. For 4th case: We can remove all characters, which results in an empty string, which is a palindrome. For 5th case: We cannot rearrange or remove characters to form a palindrome, hence the output is \\"No\\".","solution":"def can_form_palindrome(t, test_cases): results = [] for s in test_cases: char_count = {} # Count the frequency of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count how many characters have odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # We can form a palindrome if at most one character has an odd frequency if odd_count <= 1: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are managing an online store that sells various types of products. Each product falls into one of multiple categories, and each category has a popularity score associated with it. The popularity score determines how frequently products from that category are shown to customers. To maximize visibility of products, you need to assign inventory slots to the products based on their category\'s popularity score. Given an inventory with a fixed number of slots and a list of products, each product associated with a category, determine the optimal assignment of products to the inventory slots. Each slot should be filled with a product such that the sum of the popularity scores of the products in the inventory is maximized. You can only choose one product from each category, and once a product is selected for the inventory, other products from the same category cannot be chosen. The first line contains two integers n and k (1 le n le 10^5, 1 le k le 100) — the number of products and the number of categories. The second line contains k integers, where the i-th integer denotes the popularity score of the i-th category. The next n lines contain two integers c_i and v_i (1 le c_i le k, 1 le v_i le 10^4), where c_i denotes the category of the i-th product, and v_i denotes the value score of the i-th product. Print one integer: the maximum sum of the popularity scores of the products that can be assigned to the inventory slots. In the first example, we have 5 products and 2 categories with popularity scores 10 and 20. The products are as follows: (1, 100), (1, 80), (1, 30), (2, 60), (2, 50). The optimal assignments are the first product from category 1 and the fourth product from category 2, giving us a popularity score sum of 10 + 20 = 30. In the second example, we have 3 products and 3 categories with popularity scores 15, 25, 35. The products are as follows: (1, 200), (2, 150), (3, 120). The optimal assignments are the first, second, and third products, giving us a popularity score sum of 15 + 25 + 35 = 75.","solution":"def maximize_popularity(n, k, popularity_scores, products): max_values = [0] * (k + 1) # Find the maximum value product for each category for c, v in products: if v > max_values[c]: max_values[c] = v # Sum the popularity scores of the chosen categories total_popularity = 0 for c in range(1, k + 1): if max_values[c] > 0: total_popularity += popularity_scores[c - 1] return total_popularity # Example usage n = 5 k = 2 popularity_scores = [10, 20] products = [(1, 100), (1, 80), (1, 30), (2, 60), (2, 50)] print(maximize_popularity(n, k, popularity_scores, products)) # Output should be 30"},{"question":"Anupama has an array a of length n consisting of positive integers and a constant integer k. She wants to partition the array into exactly two non-empty subarrays such that the absolute difference between the sum of the elements in the two subarrays does not exceed k. In order to solve this problem, you are expected to accomplish the following steps: 1. Calculate the sum of the entire array, let’s call it S. 2. Initialize a variable sum_1 to keep track of the sum of the first partition as you traverse through the array. 3. Iterate through the array to find a valid partition point where the absolute difference between sum_1 and S - sum_1 is not more than k. The first line of input contains an integer t (1 leq t leq 10^5) — the number of test cases. The subsequent lines describe each test case. The first line of each test case contains two integers n (2 leq n leq 10^5) and k (0 leq k leq 10^9). The second line of each test case contains n positive integers (1 leq a[i] leq 10^5) — the elements of array a. It is guaranteed that the sum of values n among all test cases does not exceed 10^6. For each test case, print \\"Yes\\" if it\'s possible to partition the array into two subarrays meeting the condition, otherwise print \\"No\\". # Input: - The first line contains a single integer t (1 leq t leq 10^5). - For each test case: - The first line contains two integers n (2 leq n leq 10^5) and k (0 leq k leq 10^9). - The second line contains n positive integers separated by spaces (1 leq a[i] leq 10^5). # Output: - For each test case, print \\"Yes\\" if possible to partition, otherwise print \\"No\\". # Example: ``` Input: 2 5 3 1 2 1 2 1 4 1 10 20 10 20 Output: Yes Yes ```","solution":"def can_partition_with_difference(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] a = test_cases[i][1] S = sum(a) sum_1 = 0 possible = \\"No\\" for j in range(n-1): sum_1 += a[j] sum_2 = S - sum_1 if abs(sum_1 - sum_2) <= k: possible = \\"Yes\\" break results.append(possible) return results"},{"question":"You are given a directed graph with n vertices and m edges. Each edge has a weight assigned to it. A cycle in the graph is called a \\"happy cycle\\" if the sum of weights of edges in the cycle is exactly zero. You need to determine the number of happy cycles in the graph. The first line of the input contains two integers n (1 ≤ n ≤ 500) and m (0 ≤ m ≤ 2000), the number of vertices and the number of edges, respectively. The next m lines describe the edges. Each edge is represented by three space-separated integers u, v, w (1 ≤ u, v ≤ n, -1000 ≤ w ≤ 1000), where u is the starting vertex, v is the ending vertex, and w is the weight of the edge from u to v. Print a single integer, the number of happy cycles in the graph. Note that a cycle is defined as a path of edges where the first and last vertices are the same and no other vertex repeats. A cycle of length 1 (a self-loop with weight zero) is considered a happy cycle.","solution":"def count_happy_cycles(n, m, edges): from collections import defaultdict import networkx as nx def create_graph(n, edges): G = nx.DiGraph() for u, v, w in edges: G.add_edge(u, v, weight=w) return G def find_all_cycles(G): return list(nx.simple_cycles(G)) def check_happy_cycle(G, cycle): weight_sum = sum(G[u][v][\'weight\'] for u, v in zip(cycle, cycle[1:] + [cycle[0]])) return weight_sum == 0 G = create_graph(n, edges) cycles = find_all_cycles(G) happy_cycles_count = sum(1 for cycle in cycles if check_happy_cycle(G, cycle)) return happy_cycles_count # Example usage: n = 4 m = 4 edges = [ (1, 2, 1), (2, 3, -1), (3, 1, 0), (4, 4, 0) ] print(count_happy_cycles(n, m, edges)) # Output should be 1 (for the self-loop with weight 0 and any others if applicable)"},{"question":"Given an undirected graph with n nodes (numbered from 1 to n) and m edges, each edge has a certain weight. The weight of an edge can be either 1 or 2. You are required to find the minimum cost to connect all nodes in the graph using these edges (construct the Minimum Spanning Tree). The first line contains two integers n and m (1 le n le 10^5, 0 le m le 2 times 10^5) — the number of nodes and edges. The next m lines contain three integers u, v, and w (1 le u, v le n, u neq v, w in {1, 2}) — denoting there is an edge between nodes u and v with weight w. If it\'s impossible to connect all nodes, print \\"-1\\". Otherwise, print the minimum cost to connect all nodes. Example Input: ``` 4 5 1 2 1 1 3 2 2 3 1 2 4 2 3 4 1 ``` Example Output: ``` 3 ```","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 return True return False def find_minimum_spanning_tree(n, edges): if n == 1: return 0 uf = UnionFind(n) edges.sort(key=lambda x: x[2]) mst_cost = 0 edges_used = 0 for u, v, w in edges: if uf.union(u - 1, v - 1): mst_cost += w edges_used += 1 if edges_used == n - 1: return mst_cost return -1 if edges_used != n - 1 else mst_cost def minimum_spanning_tree_cost(n, m, edge_list): return find_minimum_spanning_tree(n, edge_list)"},{"question":"You are given an array of integers and an integer target. Determine the minimum length of a contiguous subarray of which the sum is greater than or equal to the target number. If there is no such subarray, return 0 instead. The first line of input contains an integer n (1 ≤ n ≤ 10^5), which denotes the number of elements in the array. The second line of input contains n space-separated integers depicting the elements of the array (1 ≤ array[i] ≤ 10^4). The third line of input contains an integer target (1 ≤ target ≤ 10^9). Output a single integer— the minimum length of a contiguous subarray with a sum greater than or equal to the target, or 0 if no such subarray exists. Example: Input 7 2 3 1 2 4 3 7 Output 2","solution":"def min_subarray_len(nums, target): Determine the minimum length of a contiguous subarray with a sum greater than or equal to the target. If no such subarray exists, return 0. n = len(nums) if n == 0: return 0 min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= target: min_len = min(min_len, end - start + 1) current_sum -= nums[start] start += 1 return 0 if min_len == float(\'inf\') else min_len"},{"question":"In a game called \\"Elemental Alchemy,\\" players must combine different elements to create new ones. You need to determine which elements can be created from a given set of initial elements and transformation rules. Each transformation rule specifies two elements that can be combined to produce a new element. Your task is to write a program that, given a list of initial elements and a list of transformation rules, finds all possible elements that can be created by repeatedly applying the transformation rules. Each transformation rule is in the format \\"element1 element2 -> new_element\\", indicating that element1 and element2 can be combined to create new_element. Elements are represented as strings of lowercase Latin letters with a length between 1 and 15. There are no duplicate elements or transformation rules. Input: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of initial elements. - The second line contains n distinct strings representing the initial elements. - The third line contains an integer m (1 ≤ m ≤ 100) — the number of transformation rules. - The following m lines each contain a transformation rule in the format described above. Output: - Print all the elements that can be created, including the initial elements, in lexicographical order. Example: Input: 3 fire water earth 4 fire water -> steam steam earth -> lava fire earth -> metal water earth -> mud Output: earth fire lava metal mud steam water","solution":"def find_all_elements(n, initial_elements, m, transformation_rules): Given a list of initial elements and transformation rules, find all possible elements that can be created by repeatedly applying the transformation rules. Args: - n (int): Number of initial elements. - initial_elements (list of str): List of initial elements. - m (int): Number of transformation rules. - transformation_rules (list of str): List of transformation rules. Returns: - list of str: Sorted list of all possible elements including the initial ones. from collections import defaultdict, deque # Store the transformation rules in a dictionary transformations = defaultdict(list) for rule in transformation_rules: parts = rule.split() element1, element2, new_element = parts[0], parts[1], parts[-1] transformations[(element1, element2)].append(new_element) # Initialize the set of all elements with the initial elements all_elements = set(initial_elements) queue = deque(initial_elements) # Process the queue until there are no more elements to process while queue: current = queue.popleft() for (elem1, elem2), new_elems in transformations.items(): if elem1 in all_elements and elem2 in all_elements: for new_elem in new_elems: if new_elem not in all_elements: all_elements.add(new_elem) queue.append(new_elem) return sorted(all_elements)"},{"question":"Emma is learning about prime numbers and wants to generate a prime matrix. A prime matrix is a matrix where all the elements are prime numbers. Emma wants you to help her generate a prime matrix of size n x n with prime numbers increasing row-wise and column-wise. Your task is to write a program to generate such a matrix for a given n. # Input The input consists of a single integer n (1 ≤ n ≤ 100), the size of the matrix. # Output You need to output the n x n prime matrix, where each element is a prime number in increasing order both row-wise and column-wise. # Example Input ``` 3 ``` Output ``` 2 3 5 11 13 17 19 23 29 ``` # Notes - Prime numbers are greater than 1 and only divisible by 1 and themselves. - The first few prime numbers are: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, ... - For n=1, the matrix will contain only the first prime number which is 2. For n=3, the matrix will be 3x3 as shown in the example above.","solution":"def is_prime(num): Utility function to check if a number is prime. if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def prime_matrix(n): Generate an n x n matrix filled with prime numbers in increasing order. prime_numbers = [] current_num = 2 while len(prime_numbers) < n * n: if is_prime(current_num): prime_numbers.append(current_num) current_num += 1 matrix = [] for i in range(n): row = prime_numbers[i * n:(i + 1) * n] matrix.append(row) return matrix"},{"question":"You are given two binary strings, a and b, of the same length. Each position in the string represents a bit (either \'0\' or \'1\'). You want to create a new binary string c from a and b such that for each position i, ci is \'1\' if exactly one of ai or bi is \'1\', and \'0\' otherwise. In other words, the ith bit of c should be the result of the XOR operation on the ith bits of a and b. Your task is to write a function that takes in the two strings a and b and returns the resulting string c after performing the XOR operation on each bit. The input consists of two lines. The first line contains the binary string a, and the second line contains the binary string b. It is guaranteed that both strings are of the same length and consist only of \'0\' and \'1\' characters. Output the resulting binary string c after performing the XOR operation. Example: Input: ``` 1101 1011 ``` Output: ``` 0110 ```","solution":"def xor_binary_strings(a, b): Returns XOR of two binary strings a and b. if len(a) != len(b): raise ValueError(\\"Input strings must be of the same length.\\") result = [] for bit_a, bit_b in zip(a, b): # XOR operation for each bit if bit_a == bit_b: result.append(\'0\') else: result.append(\'1\') return \'\'.join(result)"},{"question":"You are given an array of integers representing the height of each building in a row. You can only step up or down one building at a time. You want to devise a path from the leftmost building to the rightmost building such that the difference in heights between any two consecutive buildings in your path is minimized. Specifically, you want to minimize the maximum difference in heights between any two consecutive buildings on your path. Your task is to write a program that determines this minimum possible maximum difference. The input consists of two lines: - The first line contains an integer n (2 leq n leq 100000) — the number of buildings. - The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9) — the heights of the buildings. The output should be a single integer: the minimum possible maximum difference between the heights of any two consecutive buildings in your path from the leftmost to the rightmost building. # Example Input ``` 6 1 5 3 2 6 4 ``` Output ``` 2 ``` Explanation One possible path is from building 1 to building 3 to building 4 to building 5 to building 6. The height differences along this path are [2, 1, 4, 2]. The maximum difference is 4. Another possible path is from building 1 to building 3 to building 2 to building 4 to building 6. The height differences along this path are [2, 1, 1, 2]. The maximum difference is 2, which is the minimum possible in this scenario.","solution":"def min_max_step(n, heights): if n <= 1: return 0 # No steps needed if there\'s only one building. # To minimize the step differences, we can sort the heights and take adjacent steps. sorted_heights = sorted(heights) # The minimum possible maximum difference between consecutive buildings min_max_diff = float(\'inf\') for i in range(1, n): diff = sorted_heights[i] - sorted_heights[i - 1] if diff < min_max_diff: min_max_diff = diff return min_max_diff"},{"question":"You are given an array `A` consisting of `n` integers. You need to perform `m` operations on this array. Each operation is described by three integers `l`, `r`, and `v`, meaning that you should add value `v` to all elements of the array from index `l` to index `r` (both inclusive). Note that the indices of the array are 1-based. After performing all the operations, determine the final state of the array. **Input:** - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 200,000) — the number of elements in the array and the number of operations to perform. - The second line contains `n` integers `A1, A2, ..., An` (1 ≤ Ai ≤ 10^9) — the initial elements of the array. - Each of the next `m` lines contains three integers `l`, `r`, and `v` (1 ≤ l ≤ r ≤ n, 1 ≤ v ≤ 10^9) — the details of the operation to be performed. **Output:** - Output the final state of the array after performing all operations. **Example:** Input: ``` 5 3 1 2 3 4 5 1 3 2 2 4 3 3 5 1 ``` Output: ``` 3 7 9 7 6 ``` Explanation: ``` Initially, the array is [1, 2, 3, 4, 5]. After adding 2 to elements from index 1 to 3, the array becomes [3, 4, 5, 4, 5]. After adding 3 to elements from index 2 to 4, the array becomes [3, 7, 8, 7, 5]. After adding 1 to elements from index 3 to 5, the array becomes [3, 7, 9, 8, 6]. ```","solution":"def update_array(n, m, initial_array, operations): Updates the array based on the provided operations. Parameters: n (int): Number of elements in the array. m (int): Number of operations. initial_array (list): The initial state of the array. operations (list): List of tuples where each tuple consists of (l, r, v). Returns: list: The final state of the array after all operations. # Initialize a list to store the incremental changes increment = [0] * (n + 1) # Apply operations in a range update fashion for l, r, v in operations: increment[l - 1] += v if r < n: increment[r] -= v # Apply the incremental array to the initial array current_addition = 0 for i in range(n): current_addition += increment[i] initial_array[i] += current_addition return initial_array"},{"question":"You need to manage a parking lot that has a certain number of parking spaces. Each parking space can either be occupied by a car or be empty. Initially, all parking spaces are empty. You are required to implement a system to perform the following operations: Operation 1: 1 x Park a car in the x-th parking space. If the parking space is already occupied, the system must reject the operation and output \\"Already occupied\\". Operation 2: 2 x Remove the car from the x-th parking space. If the parking space is already empty, the system must reject the operation and output \\"Already empty\\". Operation 3: 3 l r Count how many parking spaces are occupied in the range [l, r] (both inclusive). The first line contains two integers n and q (1 ≤ n, q ≤ 105), where n is the number of parking spaces and q is the number of operations. The next q lines contain one of the three types of operations described above. For each operation of the third type, print the answer. Example: Input: 6 5 1 3 1 3 3 1 5 2 3 3 1 5 Output: Already occupied 1 0 Explanation: After the first operation, parking space 3 is occupied. The second operation tries to occupy parking space 3 again, which is already occupied. The third operation counts the number of occupied spaces from 1 to 5, which is 1. The fourth operation removes the car from parking space 3. The fifth operation counts the number of occupied spaces from 1 to 5 again, which is 0.","solution":"class ParkingLot: def __init__(self, n): self.spaces = [False] * n def park_car(self, x): if self.spaces[x-1]: return \\"Already occupied\\" else: self.spaces[x-1] = True def remove_car(self, x): if not self.spaces[x-1]: return \\"Already empty\\" else: self.spaces[x-1] = False def count_occupied(self, l, r): return sum(self.spaces[l-1:r]) def manage_parking_lot(n, operations): parking_lot = ParkingLot(n) output = [] for operation in operations: parts = list(map(int, operation.split())) if parts[0] == 1: result = parking_lot.park_car(parts[1]) if result: output.append(result) elif parts[0] == 2: result = parking_lot.remove_car(parts[1]) if result: output.append(result) elif parts[0] == 3: output.append(str(parking_lot.count_occupied(parts[1], parts[2]))) return output"},{"question":"Given a string ( s ) containing only the characters \'a\' and \'b\', transform the string into a palindrome by replacing some (possibly zero) characters in the string with other characters. A palindrome is a string that reads the same backward as forward. Write a function to determine the minimum number of substitutions required to make the given string a palindrome. # Input - A single line containing the string ( s ) (1 ≤ |s| ≤ 1000). # Output - Print a single integer, the minimum number of substitutions needed to make the string a palindrome. # Example Input ``` abca ``` Output ``` 1 ``` Input ``` abcd ``` Output ``` 2 ```","solution":"def min_substitutions_to_palindrome(s): Returns the minimum number of substitutions required to make the given string a palindrome. n = len(s) substitutions = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: substitutions += 1 return substitutions"},{"question":"A company is conducting a team-building exercise where each employee is assigned a distinct integer ID. During the event, certain pairs of employees will perform a particular task together. The goal is to determine the largest group of employees where each pair in the group will collaborate on the task. Write a program collaboration that determines the size of the largest group of collaborating employees. The first line of the input contains an integer N (2 ≤ N ≤ 50,000) - the number of employees. The second line contains an integer M (1 ≤ M ≤ 200,000) - the number of pairs of employees who will collaborate. Each of the following M lines contains two integers ai and bi (1 ≤ ai, bi ≤ N, ai ≠ bi) indicating that employee ai and employee bi will collaborate. The output should be a single integer - the size of the largest group of collaborating employees. This problem can be approached using graph theory where employees represent nodes and the collaborations are edges between these nodes. The task is to find the size of the largest connected component in this graph. Example: ``` Input: 6 5 1 2 2 3 4 5 5 6 1 3 Output: 3 ```","solution":"def collaboration(N, M, pairs): from collections import defaultdict, deque def bfs(start, adj, visited): queue = deque([start]) visited[start] = True size = 0 while queue: node = queue.popleft() size += 1 for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return size # Create an adjacency list adj = defaultdict(list) for a, b in pairs: adj[a].append(b) adj[b].append(a) visited = [False] * (N + 1) largest_group_size = 0 for i in range(1, N + 1): if not visited[i]: group_size = bfs(i, adj, visited) largest_group_size = max(largest_group_size, group_size) return largest_group_size"},{"question":"Given a string s of length n (1 ≤ n ≤ 1000) consisting of lowercase alphabetical characters, you are tasked with finding the shortest subsequence of s which is also a palindrome and has a length greater than 1. If no such subsequence exists, return -1. A subsequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, the string \\"abc\\" has \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ac\\", \\"bc\\", and \\"abc\\" as subsequences. Example: Input: ``` abcba ``` Output: ``` aa ``` Explanation: The shortest palindromic subsequence is \\"aa\\". There are other palindromic subsequences like \\"bb\\", \\"aba\\" and \\"cbc\\", but \\"aa\\" is the shortest one. In another example: Input: ``` abcdef ``` Output: ``` -1 ``` Explanation: There are no palindromic subsequences of length greater than 1 in the given string. Hence, the output is -1. Your task is to write a function: ```python def shortest_palindromic_subsequence(s: str) -> str: pass ```","solution":"def shortest_palindromic_subsequence(s: str) -> str: Find the shortest palindromic subsequence of the given string `s` with a length greater than 1. If no such subsequence exists, return -1. n = len(s) # Generate all pairs of letters in the string for i in range(n): for j in range(i + 1, n): if s[i] == s[j]: return s[i] * 2 # If no such pair is found, return -1 return -1"},{"question":"You have a deck of n playing cards, each card has a number on it. You can choose any number of cards (including zero) from the deck such that the greatest common divisor (gcd) of the chosen cards is 1. The task is to find the maximum number of cards you can take from the deck such that the gcd of their values is equal to 1. Input Format: - The first line contains an integer n (1 ≤ n ≤ 200000) — the number of cards in the deck. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the values on the cards. Output Format: Print a single integer, the maximum number of such cards you can choose such that the gcd of their values is 1. Sample Input: ``` 4 6 10 15 25 ``` Sample Output: ``` 2 ``` Explanation: You can take the cards with values 6 and 15. gcd(6, 15) = 1","solution":"from math import gcd from functools import reduce def max_cards_with_gcd_1(n, card_values): # Helper function to find gcd of a list of numbers def find_gcd_of_list(lst): return reduce(gcd, lst) # Iterate over all subsets of card values max_count = 0 for i in range(n): for j in range(i+1, n): if gcd(card_values[i], card_values[j]) == 1: max_count = max(max_count, 2) return max_count if max_count > 0 else 1 # At least one card can always be chosen"},{"question":"Mr. C is organizing a coding competition with n participants, each having a skill level denoted by an integer. He wants to form two non-empty teams such that the difference between the sum of the skill levels of the participants in the two teams is minimized. Your task is to help Mr. C by calculating the minimum difference possible. The first line contains an integer n (2 leq n leq 100) — the number of participants. The second line contains n integers, s_1, s_2, ldots, s_n (1 leq s_i leq 100) — the skill levels of the participants. Print an integer — the minimum difference between the sums of the skill levels of the two teams. # Example Input: ``` 4 1 2 3 4 ``` Output: ``` 0 ``` Explanation: One possible way to achieve a minimum difference is to form two teams with participants having skill levels [1, 4] and [2, 3], resulting in sums 1+4=5 and 2+3=5. The difference between the sums is 0, which is the minimum possible.","solution":"def min_diff_between_two_teams(n, skills): Finds the minimum difference between the sums of skills of two non-empty teams. Parameters: n (int): The number of participants skills (list of int): The skill levels of the participants Returns: int: The minimum difference between the sums of the skills of the two teams total_sum = sum(skills) half_sum = total_sum // 2 dp = [False] * (half_sum + 1) dp[0] = True for skill in skills: for j in range(half_sum, skill - 1, -1): dp[j] = dp[j] or dp[j - skill] for i in range(half_sum, -1, -1): if dp[i]: return abs(total_sum - 2 * i)"},{"question":"You are organizing a company-wide coding competition where participants are asked to solve various algorithmic problems. One of the challenges involves reordering an array of integers based on a specific sorting method. However, there is a twist: the array must be sorted in such a way that all even numbers appear before all odd numbers. Additionally, even and odd numbers should be sorted in ascending order within their respective groups. Write a function `customSort` that takes an array of integers and returns a new array that meets these criteria. Function Signature: ```python def customSort(nums: List[int]) -> List[int]: ``` Input: - A single list of integers `nums` (1 ≤ len(nums) ≤ 100, -1000 ≤ nums[i] ≤ 1000) Output: - Return a new list of integers that is sorted according to the described method. Example: Input: ``` [3, 1, 2, 4] ``` Output: ``` [2, 4, 1, 3] ``` Input: ``` [0, -2, 5, -7, -3, -10] ``` Output: ``` [-10, -2, 0, -7, -3, 5] ``` Note: - In the first example, the even numbers 2 and 4 appear before the odd numbers 1 and 3. Within the evens and odds, the numbers are sorted in ascending order. - In the second example, the even numbers -10, -2, and 0 appear before the odd numbers -7, -3, and 5. Within the evens and odds, the numbers are sorted in ascending order.","solution":"from typing import List def customSort(nums: List[int]) -> List[int]: Sorts the list such that all even numbers come before all odd numbers. Both even and odd numbers are sorted in ascending order within their respective groups. evens = sorted([num for num in nums if num % 2 == 0]) odds = sorted([num for num in nums if num % 2 != 0]) return evens + odds"},{"question":"You are given a rectangular park with dimensions l × b and a number of rectangular flowerbeds each with dimensions p × q. The flowerbeds cannot overlap each other and should be fully within the boundary of the park. Your task is to determine the maximum number of flowerbeds that can be placed inside the park. Each flowerbed can be placed either horizontally (p × q) or vertically (q × p). Write a function `maxFlowerbeds` that takes four integers, l, b, p, and q, and returns the maximum number of flowerbeds that can fit inside the park without overlapping. # Input: - An integer l, the length of the park (1 ≤ l ≤ 10^9) - An integer b, the breadth of the park (1 ≤ b ≤ 10^9) - An integer p, the length of the flowerbed (1 ≤ p ≤ 10^9) - An integer q, the breadth of the flowerbed (1 ≤ q ≤ 10^9) # Output: - An integer representing the maximum number of flowerbeds that can be placed in the park. # Example: Input: ``` 15 12 3 2 ``` Output: ``` 30 ``` Explanation: In the example, the park has dimensions 15 × 12. You can place 5 rows of flowerbeds horizontally, each row containing 6 flowerbeds, resulting in a total of 30 flowerbeds. Alternatively, you can get the same number by fitting the flowerbeds vertically. Note: Optimize the performance of your solution to handle the maximum constraints efficiently.","solution":"def maxFlowerbeds(l, b, p, q): Returns the maximum number of flowerbeds that can be placed inside the park without overlapping. # Calculate the numbers when flowerbeds are placed in both possible orientations if p > l and p > b: # Early termination in case flowerbeds are larger than park in either orientation return 0 horizontal_fit_1 = (l // p) * (b // q) horizontal_fit_2 = (l // q) * (b // p) return max(horizontal_fit_1, horizontal_fit_2)"},{"question":"You are given a binary tree with n nodes. Each node in the tree has a value associated with it. Your task is to find the maximum sum of values from any path in the binary tree. A path is defined as a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. The path must contain at least one node and does not need to go through the root. Write a function `maxPathSum(root)` that returns an integer, the maximum sum of values from any path in the binary tree. The input format is as follows: - The first line contains a single integer n (1 le n le 1000), the number of nodes in the binary tree. - The second line contains n integers v_1, v_2, ..., v_n (-1000 le v_i le 1000), where the i-th integer represents the value of the i-th node. - The next n-1 lines contain two integers each, a_i and b_i (1 ≤ a_i, b_i ≤ n), indicating that there is an edge between the a_i-th node and the b_i-th node. Output a single integer, the maximum sum of values from any path in the binary tree. **Examples:** **Input:** 5 2 -1 3 4 -5 1 2 1 3 3 4 3 5 **Output:** 9 **Explanation:** A path with the maximum sum is 3 -> 4 -> -1 -> 2, having a sum of 9. **Input:** 3 -10 9 20 1 2 1 3 **Output:** 29 **Explanation:** Two paths are possible with maximum sums: 9, and 9 -> -10 -> 20. The latter path provides the maximum sum of 29.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(values, edges): nodes = [TreeNode(val) for val in values] for a, b in edges: a -= 1 b -= 1 connect(nodes[a], nodes[b]) return nodes[0] def connect(node1, node2): if not node1.left: node1.left = node2 elif not node1.right: node1.right = node2 else: connect(node1.left, node2) def maxPathSum(root): def dfs(node): nonlocal max_sum if not node: return 0 left_gain = max(dfs(node.left), 0) right_gain = max(dfs(node.right), 0) price_newpath = node.val + left_gain + right_gain max_sum = max(max_sum, price_newpath) return node.val + max(left_gain, right_gain) max_sum = float(\'-inf\') dfs(root) return max_sum # Reading input and building tree n = 5 values = [2, -1, 3, 4, -5] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] root = build_tree(values, edges) print(maxPathSum(root)) # Output: 9"},{"question":"In a land named Algorithmia, there are several guilds of adventurers. Each guild is represented by a connected component in a graph where nodes represent the adventurers and edges represent the guild connections. A guild is considered well-connected if there is a unique path connecting every pair of adventurers in that guild. You are given a subset of adventurers and need to determine which adventurers belong to the same guilds. The input consists of: 1. An integer n (1 ≤ n ≤ 10^5), the number of adventurers. 2. An integer m (0 ≤ m ≤ 10^5), the number of connections between the adventurers. 3. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that there is a connection between adventurer u and adventurer v. 4. An integer q (1 ≤ q ≤ 10^5), the number of queries. 5. The next q lines each contain two integers a and b (1 ≤ a, b ≤ n), representing a query. For each query (a, b), determine if adventurers a and b belong to the same guild. Output \\"YES\\" if they belong to the same guild, otherwise output \\"NO\\". Example: Input: 7 5 1 2 2 3 4 5 5 6 6 7 4 1 3 1 4 5 7 2 3 Output: YES NO YES YES Explanation: - Adventurers 1, 2, and 3 belong to the same guild, so the query (1, 3) returns \\"YES\\". - Adventurers 1 and 4 do not belong to the same guild, so the query (1, 4) returns \\"NO\\". - Adventurers 5, 6, and 7 belong to the same guild, so the query (5, 7) returns \\"YES\\". - Adventurers 2 and 3 belong to the same guild, so the query (2, 3) returns \\"YES\\".","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if u != self.parent[u]: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def same_guild(n, connections, queries): uf = UnionFind(n) for u, v in connections: uf.union(u - 1, v - 1) results = [] for a, b in queries: if uf.find(a - 1) == uf.find(b - 1): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a rectangular grid with n rows and m columns, you are tasked with finding the minimum number of steps required to convert the entire grid to zeroes. Initially, each cell of the grid contains a non-negative integer. In one step, you can choose any cell and subtract 1 from it and any of its adjacent (up, down, left, right) cells. In other words, when you choose a cell located at (i, j), you can subtract 1 from the cell (i, j) itself, and the cells (i-1, j), (i+1, j), (i, j-1), and (i, j+1), as long as those cells exist within the grid. The first line contains two integers n and m, the dimensions of the grid (1 leq n, m leq 10^3). The following n lines contain m integers each, representing the initial state of the grid. Each integer in the grid is between 0 and 10^2. Output the minimum number of steps required to convert the entire grid to zeroes. If it is impossible to convert the grid to zeroes, print -1. Example: ``` Input: 3 3 2 3 4 1 2 3 4 3 2 Output: 5 ```","solution":"def min_steps_to_zero_grid(grid): Returns the minimum number of steps required to convert the grid to zeroes. :param grid: List of lists representing the grid with integers :return: The minimum number of steps or -1 if impossible max_val = 0 for row in grid: max_val = max(max_val, max(row)) return max_val"},{"question":"JebBake is hosting its annual baking competition, and they have recruited n employees as participants. Each employee is required to bake a different type of pastry. The competition rules stipulate that the pastries must be presented in a specific non-decreasing order based on their assigned difficulty levels. You are given an array d_1, d_2, dots, d_n, where d_i represents the difficulty level of the pastry baked by the i-th employee. The employees stand in a queue initially, but their current order might not match the required non-decreasing difficulty order. In each operation, you are allowed to move an employee from the queue to the front or the end of the queue. Your goal is to determine the minimum number of operations required to reorder the queue in non-decreasing difficulty order. The first line of input contains an integer n (1 le n le 10^5) — the number of employees. The second line contains n integers d_1, d_2, dots, d_n (1 le d_i le 10^9) — the difficulty levels of the pastries. Output a single integer — the minimum number of operations required to sort the queue in non-decreasing difficulty order. # Example ``` Input: 5 4 3 1 6 2 Output: 3 ``` # Note: In the example provided, the queue `4 3 1 6 2` can be reordered to `1 2 3 4 6` in the minimum of three operations. 1. Move `1` to the front: `1 4 3 6 2` 2. Move `2` to the front: `2 1 4 3 6` 3. Move `1` to the second position: `1 2 4 3 6` and swap `4 3` with `3 4`.","solution":"def min_operations_to_sort(n, d): target = sorted(d) longest_increasing_subsequence_length = 0 current_length = 0 prev = -1 for value in d: if value >= prev: current_length += 1 else: current_length = 1 prev = value longest_increasing_subsequence_length = max(longest_increasing_subsequence_length, current_length) return n - longest_increasing_subsequence_length"},{"question":"You are given a grid with n rows and m columns. Some cells of this grid are \'blocked\', and others are \'open\'. You have a starting cell (sx, sy) and a target cell (tx, ty). You can move up, down, left, or right, but you cannot move into a \'blocked\' cell. You need to determine if there is a path from the starting cell to the target cell. Write a function `is_path_exists(n, m, grid, sx, sy, tx, ty)` that accepts the following: * n: an integer representing the number of rows in the grid (1 ≤ n ≤ 100). * m: an integer representing the number of columns in the grid (1 ≤ m ≤ 100). * grid: a list of n strings where each string has m characters. Each character is either \'.\' (representing an open cell) or \'#\' (representing a blocked cell). * sx, sy: integers representing the starting cell coordinates (0 ≤ sx < n, 0 ≤ sy < m). * tx, ty: integers representing the target cell coordinates (0 ≤ tx < n, 0 ≤ ty < m). The function should return `True` if there exists a path from (sx, sy) to (tx, ty), and `False` otherwise. # Example ```python def is_path_exists(n, m, grid, sx, sy, tx, ty): # Your code here n = 3 m = 3 grid = [ \\"...\\", \\".#.\\", \\"...\\" ] sx = 0 sy = 0 tx = 2 ty = 2 print(is_path_exists(n, m, grid, sx, sy, tx, ty)) # Output: True ``` # Explanation In the provided example, there is an open path from the starting cell (0, 0) to the target cell (2, 2): ``` ... .#. ... ``` Your function should correctly identify whether there is a path or not based on the positions of the \'blocked\' cells indicated by `#`.","solution":"def is_path_exists(n, m, grid, sx, sy, tx, ty): Determines if a path exists from the starting cell (sx, sy) to the target cell (tx, ty) on the given grid. Args: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of str): Grid representation. sx (int): Starting row index. sy (int): Starting column index. tx (int): Target row index. ty (int): Target column index. Returns: bool: True if a path exists, False otherwise. if grid[sx][sy] == \'#\' or grid[tx][ty] == \'#\': return False directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, Down, Left, Up visited = [[False for _ in range(m)] for _ in range(n)] queue = [(sx, sy)] visited[sx][sy] = True while queue: x, y = queue.pop(0) if (x, y) == (tx, ty): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return False"},{"question":"You are given an array of integers. Your goal is to find the number of triplets (i, j, k) such that i < j < k and a[i] < a[j] < a[k]. The first line contains a single integer n (1 ≤ n ≤ 200,000) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — elements of the array. You should output exactly one integer — the number of such triplets in the array. For example, in the sample array [1, 2, 3, 4], there are 4 such triplets: (1, 2, 3), (1, 2, 4), (1, 3, 4), and (2, 3, 4). In another sample array [4, 3, 2, 1], there are no such triplets, so you would output 0.","solution":"def count_increasing_triplets(arr): n = len(arr) count = 0 # Iterate through each possible j for the middle of the triplet for j in range(1, n-1): count_i = 0 count_k = 0 # Count elements less than arr[j] before index j for i in range(j): if arr[i] < arr[j]: count_i += 1 # Count elements greater than arr[j] after index j for k in range(j+1, n): if arr[k] > arr[j]: count_k += 1 count += count_i * count_k return count"},{"question":"A company has a server that needs to handle m incoming requests. Each request arrives at a certain time and requires a specific amount of processing time. The server can only process one request at a time, but it can queue up pending requests and process them one by one. You need to determine the earliest time the server can finish processing all the incoming requests. Note that the server starts operation at time 0 and initially has no pending requests. The first line of input contains a single integer m (1 ≤ m ≤ 2·10^5), representing the number of incoming requests. Each of the next m lines contains two space-separated integers t_i and p_i (0 ≤ t_i, p_i ≤ 10^9), representing the arrival time and processing time of the i-th request, respectively. The requests are given in increasing order of their arrival times. Print a single integer — the earliest time the server can finish processing all the requests.","solution":"def earliest_finish_time(m, requests): Calculate the earliest time the server can finish processing all the requests. Parameters: m (int): The number of incoming requests. requests (list of tuples): A list of tuples where each tuple contains t_i (arrival time) and p_i (processing time) for each request. Returns: int: The earliest time the server can finish processing all the requests. current_time = 0 for arrival_time, processing_time in requests: if current_time <= arrival_time: current_time = arrival_time + processing_time else: current_time += processing_time return current_time"},{"question":"Mia is a budding artist who loves painting canvases and displaying them in her art gallery. There are n canvases in her gallery, each with a different beauty score. Mia has q clients, and each client has specific requests regarding the canvases. The i-th client wants to know the maximum beauty score among the canvases numbered from l_i to r_i (l_i leq r_i). To help her manage her gallery, Mia wants to quickly answer all her clients\' queries. Write a program that for each client, determines the maximum beauty score of the canvases within the given range. The first line contains one integer n (1 leq n leq 200,000) — the number of canvases in Mia\'s gallery. The next line contains n integers b_1, b_2, ldots, b_n (0 leq b_i leq 10^9), where b_i is the beauty score of the i-th canvas. The third line contains one integer q (1 leq q leq 100,000) — the number of Mia\'s clients. Each of the next q lines contain two integers l_i and r_i (1 leq l_i leq r_i leq n) — the range of canvases the i-th client is interested in. Output q lines, i-th of which containing the maximum beauty score of the canvases from l_i to r_i. For example, suppose there are 5 canvases with beauty scores [2, 4, 6, 8, 10] and 3 clients having the following queries: 1. From canvas 1 to canvas 3 2. From canvas 2 to canvas 5 3. From canvas 1 to canvas 5 The program should output: 6 10 10","solution":"def maximum_beauty_scores(n, beauty_scores, q, queries): Returns the maximum beauty score for each given range of canvases. :param n: Number of canvases :param beauty_scores: List of beauty scores of each canvas :param q: Number of queries :param queries: List of tuples, each containing a range (l, r) :return: List of maximum beauty scores for each query results = [] for l, r in queries: results.append(max(beauty_scores[l-1:r])) return results"},{"question":"You are given a list of points on a 2D plane. Your task is to find the maximum number of points that lie on the same straight line. The input consists of a single integer n (1 le n le 300) — the number of points, and then n pairs of integers representing the coordinates of the points (-10^4 le x, y le 10^4). Output the maximum number of points that lie on the same straight line. Each point is represented as two integers x and y separated by a space. # Example Input: ``` 5 1 1 2 2 3 3 4 2 5 1 ``` Output: ``` 3 ``` # Explanation The three points (1, 1), (2, 2), and (3, 3) lie on the same straight line. Thus, the output is 3.","solution":"from collections import defaultdict from math import gcd def max_points_on_same_line(points): if len(points) <= 2: return len(points) def slope(p1, p2): dx = p2[0] - p1[0] dy = p2[1] - p1[1] if dx == 0: return \'inf\' if dy == 0: return 0 g = gcd(dx, dy) return (dy // g, dx // g) max_points = 0 for i in range(len(points)): slopes = defaultdict(int) duplicate = 1 for j in range(i + 1, len(points)): if points[i] == points[j]: duplicate += 1 else: slope_val = slope(points[i], points[j]) slopes[slope_val] += 1 current_max = duplicate for count in slopes.values(): current_max = max(current_max, count + duplicate) max_points = max(max_points, current_max) return max_points # function to parse the input and find the result def solution(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) points = [tuple(map(int, line.split())) for line in lines[1:]] return max_points_on_same_line(points)"},{"question":"Write a function that takes a string s consisting of parentheses characters: \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and returns the length of the longest valid (well-formed) parentheses substring. A valid parentheses string is one that meets the following criteria: 1. Each opening parentheses has a corresponding closing parentheses of the same type. 2. Parentheses must be closed in the correct order. Example: ``` Input: s = \\"(()\\" Output: 2 Explanation: The longest valid parentheses substring is \\"()\\" Input: s = \\")()())\\" Output: 4 Explanation: The longest valid parentheses substring is \\"()()\\" Input: s = \\"\\" Output: 0 Explanation: There\'s no valid parentheses substring ``` You can assume the input string will only contain the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and will have a maximum length of 10^5. Implement the function: ```python def longestValidParentheses(s: str) -> int: # Your code here ```","solution":"def longestValidParentheses(s: str) -> int: # Initialize a stack and set the base for longest sequence tracking stack = [] max_length = 0 last_invalid_index = -1 for i, char in enumerate(s): if char in \'({[\': stack.append(i) else: if stack and ((char == \')\' and s[stack[-1]] == \'(\') or (char == \'}\' and s[stack[-1]] == \'{\') or (char == \']\' and s[stack[-1]] == \'[\')): stack.pop() if stack: max_length = max(max_length, i - stack[-1]) else: max_length = max(max_length, i - last_invalid_index) else: last_invalid_index = i return max_length"},{"question":"In a small town, there is a peculiar library that organizes its books in a unique way. The library has N bookshelves, numbered from 1 to N. Each shelf i contains B_i books (0 le B_i le 1000) spaced evenly along its length. The librarian has a strange habit: he only allows borrowing of a contiguous segment of bookshelves. Due to issues of wear and tear, the librarian decided to use a new rule — each time a visitor wants to borrow books, they can pick intervals between shelves, but all such intervals combined must cover a contiguous segment of indices. You, as a frequent visitor, want to maximize the number of books you can borrow. However, you can only make up to Q queries to the librarian. Each query can ask the total number of books from shelf L to R inclusive, where 1 le L le R le N. Given N and Q, write a program to interactively find out the maximum number of books you can borrow in a single visit. Initially, the judge will provide two integers, N (3 le N le 1000) and Q (1 le Q le 1000), representing the number of bookshelves and the maximum number of queries allowed. You can ask up to Q questions in the format \\"? L R\\", to which the judge will respond with the sum of books on bookshelves from L to R inclusive. After your queries, print a single integer representing the maximum number of books you can borrow in continuous segments, and terminate your program. # Example ``` Input: 6 4 (queries) Output: 18 ``` In the above example, let\'s assume the bookshelves have the following number of books: [1, 3, 5, 4, 2, 8]. The maximum number of books that can be borrowed in a continuous segment is 18 (spanning from shelves 1 to 6). Use your questions wisely within the limits of Q to determine this maximum.","solution":"def max_books(N, queries): Determines the maximum number of books that can be borrowed from contiguous segments of N bookshelves, using up to `queries` queries to get the sum of books from shelf L to shelf R. Arguments: N : int : Number of bookshelves queries : int : Maximum number of queries allowed Returns: int : Maximum number of books that can be borrowed in a single continuous segment # simulate initial values of bookshelves shelves = [i % 10 for i in range(1, N + 1)] # This is just an example, original will depend on input def query(L, R): Returns the total number of books from shelf L to shelf R inclusive. return sum(shelves[L-1:R]) max_books = 0 for L in range(1, N + 1): for R in range(L, N + 1): if queries > 0: curr_books = query(L, R) max_books = max(max_books, curr_books) queries -= 1 else: break if queries <= 0: break return max_books"},{"question":"In the magical world, there are different types of potions that can be mixed according to specific rules. Each type of potion has a unique potency value, and some rules define how the potency of a new potion is calculated when two potions are mixed. Specifically, we have three potions with potency values p1, p2, and p3. There are two rules for mixing these potions: 1. When potion with potency x and potency y is mixed, a new potion with potency x + y is created. 2. When potion with potency x and potency y is mixed, a new potion with potency |x - y| is created, where |x - y| is the absolute difference between x and y. You are tasked with finding the maximum possible potency value of a potion that can be obtained by applying these mixing rules any number of times. The input consists of a single line with three integers p1, p2, and p3 (0 ≤ p1, p2, p3 ≤ 1000), representing the potency values of the three potions initially available. Output a single integer, the maximum possible potency value that can be obtained. For example: - Input: `1 2 3` Output: `6` - Input: `5 3 8` Output: `16` - Input: `4 4 4` Output: `12` Explanation for the first example: - Mix the potion with potency 1 and the potion with potency 2 to get a potion of potency 3. - Now we have potions with potency 3, 3, and 3. Mix any two to get a potion of potency 6. Thus, the maximum possible potency value that can be obtained is 6.","solution":"def max_potency(p1, p2, p3): Returns the maximum possible potency value that can be obtained by mixing potions with given potency values according to the rules. potions = [p1, p2, p3] # Sort potions to handle them easily potions.sort() # Maximum potency can be calculated by summing all potencies. max_potency_value = sum(potions) return max_potency_value"},{"question":"In a secret laboratory, scientists are working on a new type of DNA sequence which they call \\"Special DNA\\". A DNA sequence is represented by a string composed of characters \'A\', \'T\', \'C\', \'G\'. A \\"Special DNA\\" is defined by a specific property: there must not be any subsequence \\"ATG\\" in it. Your task is to determine if a given DNA sequence is a \\"Special DNA\\" or not. A subsequence here is derived from the original sequence by deleting some or no characters while keeping the relative order of the remaining characters intact. # Input The first line of the input contains an integer t (1 le t le 10^4) — the number of test cases. The following t lines each contain a single string representing a DNA sequence of length n (1 le n le 10^5). The total length of all DNA sequences combined will not exceed 10^6 characters. # Output For each test case, print \\"YES\\" if the given DNA sequence is a \\"Special DNA\\", otherwise print \\"NO\\". # Example **Input:** ``` 4 ATGCA AACG TGA AGGTCG ``` **Output:** ``` NO YES YES YES ``` Explanation: In the first example, the sequence \\"ATGCA\\" contains the subsequence \\"ATG\\", so it is not a \\"Special DNA\\". In the second example, the sequence \\"AACG\\" does not contain the subsequence \\"ATG\\", so it is a \\"Special DNA\\". In the third example, the sequence \\"TGA\\" does not contain the subsequence \\"ATG\\", so it is a \\"Special DNA\\". In the fourth example, the sequence \\"AGGTCG\\" does not contain the subsequence \\"ATG\\", so it is a \\"Special DNA\\".","solution":"def is_special_dna(dna_sequence): Determines if the given DNA sequence is a \\"Special DNA\\", which means it should not contain the subsequence \\"ATG\\". t = len(dna_sequence) for i in range(t - 2): if dna_sequence[i] == \'A\' and dna_sequence[i+1] == \'T\' and dna_sequence[i+2] == \'G\': return \\"NO\\" return \\"YES\\" def special_dna_test_cases(test_cases): results = [] for dna in test_cases: results.append(is_special_dna(dna)) return results"},{"question":"You are given a list of integers representing the heights of n buildings standing in a straight row. Each building has a specific color assigned to it. Buildings with the same height can have different colors. You need to find the largest subset of buildings such that no two buildings in the subset are adjacent and all buildings in the subset are of the same color. If there are multiple colors that provide the largest subset, return any of them. The first line contains a single integer n (1 ≤ n ≤ 200,000) — the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^6) — the heights of the buildings. The third line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1000) — the colors of the buildings where ci is the color assigned to the i-th building. Output the size of the largest subset of buildings meeting the criteria and the color of those buildings. If no such subset exists, output -1. Example Input: 5 3 1 3 2 3 1 2 1 3 1 Output: 2 1 In this example, buildings with heights [3, 1, 3, 2, 3] with colors [1, 2, 1, 3, 1], the largest subset that meets the criteria is with height 3 and color 1, resulting in two buildings with indices 1 and 5 (which are not adjacent).","solution":"def largest_non_adjacent_subset(n, heights, colors): from collections import defaultdict # Create a dictionary where key is the color and value is a list of buildings (by index) with that color color_map = defaultdict(list) for index, color in enumerate(colors): color_map[color].append(index) def max_subset_length(bldgs): n = len(bldgs) if n == 0: return 0 if n == 1: return 1 # Dynamic programming to find the maximum subset length dp = [0] * n dp[0] = 1 dp[1] = max(1, 1) # since minimum length is 1 and they are non-adjacent for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + 1) return dp[-1] best_length = 0 best_color = -1 for color, bldgs in color_map.items(): longest_length = max_subset_length(bldgs) if longest_length > best_length: best_length = longest_length best_color = color if best_length == 0: return -1 return best_length, best_color"},{"question":"You are given an input integer array `arr[]` of size `n` containing only positive integers. Your task is to find and return a new array resulting from adding every element to its immediate neighbors. For the edge elements, consider the neighbor as the only adjacent element. For example: ``` Input: arr = [2, 4, 5, 10] Output: [6, 11, 19, 15] Explanation: - For element arr[0] = 2, it has only one neighbor: arr[1] = 4, thus resulting in 2 + 4 = 6. - For element arr[1] = 4, its neighbors are arr[0] = 2 and arr[2] = 5, thus resulting in 2 + 4 + 5 = 11. - For element arr[2] = 5, its neighbors are arr[1] = 4 and arr[3] = 10, thus resulting in 4 + 5 + 10 = 19. - For element arr[3] = 10, it has only one neighbor: arr[2] = 5, thus resulting in 10 + 5 = 15. ``` Write a function with the following signature: ```python def sum_with_neighbors(arr: List[int]) -> List[int]: # your logic here ``` Constraints: - `1 <= n <= 10^5` - `1 <= arr[i] <= 10^3` Your solution should efficiently handle the constraints and execute within a reasonable time frame.","solution":"from typing import List def sum_with_neighbors(arr: List[int]) -> List[int]: Given an input integer array arr[] of size n containing only positive integers, this function returns a new array where each element is the sum of the element and its immediate neighbors. For the edge elements, consider the neighbor as the only adjacent element. n = len(arr) if n == 0: return [] if n == 1: return arr result = [] for i in range(n): if i == 0: result.append(arr[i] + arr[i + 1]) elif i == n - 1: result.append(arr[i] + arr[i - 1]) else: result.append(arr[i - 1] + arr[i] + arr[i + 1]) return result"},{"question":"In a mysterious land, there are n cities and multiple bidirectional roads connecting pairs of these cities. Each road has a certain toll cost. The king of the land wants to travel from his capital city to all other cities. He demands to find the path that minimizes the maximum toll cost he has to pay on any single road during his journey. The first line contains two integers n (2 ≤ n ≤ 100) and m (1 ≤ m ≤ 10,000) — the number of cities and the number of roads, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100), indicating there is a road between city u and city v with toll cost w. The king\'s capital city is city 1. Output the minimum possible value of the maximum toll cost that the king has to pay on any road during his journey from the capital city to visit all other cities. If it\'s impossible for the king to reach all cities, output -1.","solution":"def can_travel_with_max_toll(n, roads, max_toll): from collections import deque, defaultdict graph = defaultdict(list) for u, v, w in roads: if w <= max_toll: graph[u].append(v) graph[v].append(u) visited = set() queue = deque([1]) visited.add(1) while queue: city = queue.popleft() for next_city in graph[city]: if next_city not in visited: visited.add(next_city) queue.append(next_city) return len(visited) == n def min_max_toll(n, m, roads): roads.sort(key=lambda x: x[2]) low, high = 0, len(roads) - 1 best_toll = float(\'inf\') while low <= high: mid = (low + high) // 2 max_toll = roads[mid][2] if can_travel_with_max_toll(n, roads, max_toll): best_toll = max_toll high = mid - 1 else: low = mid + 1 return best_toll if best_toll != float(\'inf\') else -1"},{"question":"Alice is developing an application that schedules background tasks for a server. Each task has a start time, end time, and a priority level. The server can only process one task at a time. If two tasks overlap, the server chooses the task with the higher priority. If they have the same priority, the task which comes first in the input list is chosen. The goal is to determine the total time the server spends processing all the tasks considering the above rules. You are given a list of tasks, each characterized by three values: `start_i` — the start time of the i-th task, `end_i` — the end time of the i-th task, and `priority_i` — the priority level of the i-th task. Each test contains one or more test cases. The first line contains the number of test cases `t` (1 ≤ t ≤ 100). Description of the test cases follows. The first line of each test case contains an integer `n` (1 ≤ n ≤ 100), where `n` is the number of tasks. Next, `n` lines follow. The `i`-th line of them contains three integers `start_i`, `end_i`, and `priority_i` (0 ≤ start_i < end_i ≤ 10^9, 1 ≤ priority_i ≤ 10^9). For each test case, print a single integer — the total time the server spends processing all the tasks. # Example Input: ``` 2 3 1 5 2 2 6 3 4 8 1 2 1 3 2 2 5 2 ``` Output: ``` 7 4 ``` # Explanation In the first test case, task 2 has the highest priority and completely overlaps task 1 and task 3 partially. Thus, the server will process from time 1 to 6 (5 units) for task 2 and from time 6 to 8 (2 units) for task 3 summing up to 7 units. In the second test case, tasks overlap but have the same priority. Thus, the server processes task 1 from time 1 to 3 and task 2 from time 3 to 5, totaling 4 units of time.","solution":"def calculate_processing_time(t, test_cases): Calculate the total time the server spends processing all the tasks considering the given rules. results = [] for case in test_cases: n = case[\'n\'] tasks = case[\'tasks\'] # Flatten the tasks information into a list of events events = [] for i in range(n): start, end, priority = tasks[i] events.append((start, True, priority, i)) # Start event events.append((end, False, priority, i)) # End event # Sort events: # 1. By time # 2. By type (end before start if same time) # 3. By priority (highest priority first for start events, lowest priority first for end events) events.sort(key=lambda x: (x[0], not x[1], -x[2] if x[1] else x[2], x[3])) current_active = None active_task_indices = set() last_time = 0 total_time = 0 for time, is_start, priority, index in events: if current_active is not None: total_time += time - last_time if is_start: active_task_indices.add((priority, index)) else: active_task_indices.remove((priority, index)) if active_task_indices: current_active = max(active_task_indices) # Highest priority task else: current_active = None last_time = time results.append(total_time) return results"},{"question":"Given an array of integers, you need to segment the array into contiguous subarrays such that each subarray contains at least one unique element that does not appear in other subarrays. A single element cannot be divided into multiple subarrays, and no elements can be repeated across subarrays. Your task is to determine the minimum number of such subarrays required to segment the entire array. The input consists of: - a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. - an array of integers arr of length n (1 ≤ arr[i] ≤ 10^9) — the elements of the array. Output a single integer — the minimum number of subarrays required. **Example:** Input: ``` 5 1 2 2 3 4 ``` Output: ``` 3 ``` Explanation: One possible solution is to split the array into 3 subarrays: - [1] - [2, 2] - [3, 4] Each subarray has unique elements that do not appear in other subarrays. Thus, the answer is 3. Input: ``` 6 4 4 4 4 4 4 ``` Output: ``` 6 ``` Explanation: Since every element is the same, each element must be in its own subarray. Thus, the answer is 6.","solution":"def min_subarrays_required(n, arr): Returns the minimum number of subarrays required to ensure each subarray contains at least one unique element. if n == 0: return 0 # Create a dictionary to keep track of the frequency of each element frequency = {} for num in arr: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # The minimum number of subarrays required is the highest frequency of any element max_frequency = max(frequency.values()) return max_frequency"},{"question":"You are given a grid with `n` rows and `m` columns. Each cell in the grid is either empty (denoted by a \'.\') or contains a wall (denoted by a \'#\'). You start at the top-left corner of the grid (position (1, 1)) and would like to reach the bottom-right corner (position (n, m)). You can move up, down, left, or right from any empty cell, but you cannot move into cells containing walls. Determine if it is possible to reach the bottom-right corner from the top-left corner. The first line of the input contains two space-separated integers `n` and `m` (1 ≤ n, m ≤ 1000). Each of the next `n` lines contains a string of length `m` consisting of \'.\' and \'#\', representing the grid. Output \\"Yes\\" if it is possible to reach the bottom-right corner from the top-left corner, or \\"No\\" otherwise. # Example: Input: 5 5 . . # . . . # # . . . . . . . # # . # # . . . . . Output: Yes Input: 4 4 . # . . # # # . . . # # # . . . Output: No","solution":"def can_reach_end(n, m, grid): Determines if it is possible to reach the bottom-right corner from the top-left corner of the grid. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"No\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and not visited[x][y] def dfs(x, y): if x == n-1 and y == m-1: return True visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): if dfs(nx, ny): return True return False return \\"Yes\\" if dfs(0, 0) else \\"No\\""},{"question":"You are given a string of lowercase alphabetic characters and a number of positions to shift the letters to the right in the English alphabet. For example, with a shift of 1, \'a\' becomes \'b\', \'b\' becomes \'c\', and so on, with \'z\' becoming \'a\' after a shift of 1. The first line of input contains the string of lowercase alphabetic characters. The second line contains the integer shift (0 ≤ shift ≤ 25). Output the resultant string after applying the shift to each character. Note: The shift should wrap around from \'z\' to \'a\' if necessary.","solution":"def shift_string(s, shift): Shifts each character in the given string s by the given number of positions to the right in the alphabet. :param s: String of lowercase alphabetic characters :param shift: Integer number of positions to shift (0 ≤ shift ≤ 25) :return: Resultant string after applying shift shifted_string = [] for char in s: shifted_char = chr(((ord(char) - ord(\'a\') + shift) % 26) + ord(\'a\')) shifted_string.append(shifted_char) return \'\'.join(shifted_string)"},{"question":"You are given an array of integers, representing daily temperatures. Using these daily temperatures, you need to answer a series of queries about temperature patterns and changes over a range of days. Specifically, you need to manage two types of queries: 1. **Update query:** Update the temperature on a specific day. 2. **Range query:** Find the average temperature for a specified range of days. The input consists of three parts: - The first line contains two integers, `n` and `q` (1 ≤ n, q ≤ 100,000), representing the number of days and the number of queries, respectively. - The second line contains `n` integers, where the `i-th` integer represents the temperature on the `i-th` day. - The next `q` lines contain the queries. Each query is either of the form `1 x y` (indicating an update query to change the temperature on the `x-th` day to `y`) or of the form `2 l r` (indicating a range query to find the average temperature from day `l` to day `r`). For each range query, output the average temperature for the given range of days, rounded to 2 decimal places. # Input Format - The first line contains two integers `n` and `q`. - The second line contains `n` integers representing daily temperatures. - The next `q` lines contain queries of two types: - `1 x y`: Update the temperature on day `x` to `y`. - `2 l r`: Find the average temperature from day `l` to day `r` (inclusive). # Output Format For each range query of type `2`, print the average temperature rounded to 2 decimal places. # Example **Input:** ``` 5 3 30 25 28 32 27 2 2 4 1 3 35 2 2 4 ``` **Output:** ``` 28.33 30.67 ``` # Explanation - The first range query asks for the average temperature from day 2 to day 4, which is (25 + 28 + 32) / 3 = 28.33. - The update query changes the temperature on day 3 to 35. - The second range query asks for the average temperature from day 2 to day 4 after the update, which is (25 + 35 + 32) / 3 = 30.67. # Constraints - 1 ≤ n, q ≤ 100,000 - 1 ≤ temperatures ≤ 100 - 1 ≤ x ≤ n - 1 ≤ l ≤ r ≤ n","solution":"class TemperatureTracker: def __init__(self, temperatures): self.temperatures = temperatures self.prefix_sums = self._compute_prefix_sums() def _compute_prefix_sums(self): prefix_sums = [0] * (len(self.temperatures) + 1) for i in range(1, len(self.temperatures) + 1): prefix_sums[i] = prefix_sums[i - 1] + self.temperatures[i - 1] return prefix_sums def update(self, day, temperature): original_temp = self.temperatures[day - 1] diff = temperature - original_temp self.temperatures[day - 1] = temperature for i in range(day, len(self.temperatures) + 1): self.prefix_sums[i] += diff def get_average(self, start, end): sum_range = self.prefix_sums[end] - self.prefix_sums[start - 1] count = end - start + 1 return round(sum_range / count, 2)"},{"question":"You are presented with an online shopping website\'s sales history, which contains records of various purchases. Each purchase includes a date, customer ID, and the order value in dollars. You need to write a program that can analyze this sales data to provide insights. Specifically, your task is to determine the top \'N\' customers by total purchase value for each month. If two customers have the same total purchase value for a month, sort them by customer ID in ascending order. # Input - The first line contains an integer `T` (1 ≤ T ≤ 1000) — the number of purchases. - The next `T` lines each contain a date in the form `YYYY-MM-DD`, a space, an integer `CustomerID` (1 ≤ CustomerID ≤ 10^6), a space, and an integer `OrderValue` (1 ≤ OrderValue ≤ 10^5). - The last line contains an integer `N` (1 ≤ N ≤ 100) — the number of top customers to determine for each month. # Output For each month present in the input data, output the month in the format `YYYY-MM-01`, followed by the list of the top \'N\' customers by total purchase value for that month in the format `CustomerID TotalValue`, where `TotalValue` is the sum of all `OrderValue` for that customer in the given month. Each month\'s results should be printed in the order they appear in the input, and customers should be listed in descending order of their `TotalValue`, and in case of ties, by ascending `CustomerID`. # Example Input: ``` 7 2021-01-13 23 300 2021-01-22 45 200 2021-01-10 23 150 2021-02-01 23 500 2021-02-14 34 700 2021-01-28 45 100 2021-03-03 55 600 2 ``` Output: ``` 2021-01-01 23 450 45 300 2021-02-01 34 700 23 500 2021-03-01 55 600 ``` # Note In the example, customers 23 and 45 both have purchases in January, customer 23 is the top customer with the sum of 300 + 150 = 450, and so on. The result for each month considers only the top \'N\' customers by purchase value and lists them accordingly.","solution":"def top_customers(T, purchases, N): from collections import defaultdict from datetime import datetime import heapq # Dictionary to store customer spending per month. sales_data = defaultdict(lambda: defaultdict(int)) # Process each purchase and accumulate the total order value per customer per month. for purchase in purchases: date_str, customer_id, order_value = purchase.split() date = datetime.strptime(date_str, \\"%Y-%m-%d\\") year_month = date.strftime(\\"%Y-%m\\") customer_id = int(customer_id) order_value = int(order_value) sales_data[year_month][customer_id] += order_value # Result to store top N customers per month. result = [] for month in sorted(sales_data.keys()): month_customers = sales_data[month] # Use a heap to get top N customers efficiently top_customers = heapq.nlargest(N, month_customers.items(), key=lambda x: (x[1], -x[0])) result.append(month + \\"-01\\") for customer_id, total_value in top_customers: result.append(f\\"{customer_id} {total_value}\\") return result"},{"question":"You are given an array of length n. The array contains only 0s and 1s. A segment of this array is called \\"interesting\\" if it contains at least one 1. Your task is to find the maximum number of interesting segments of this array that can be chosen such that no segment has any 1 in common with any other segment. In other words, you need to divide the array into the maximum number of non-overlapping interesting segments. Input: - The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) – the length of the array. - The second line of the input contains n integers, each either 0 or 1 – the elements of the array. Output: - Print the maximum number of interesting segments. Example: ``` Input 8 0 1 0 1 1 0 0 1 Output 3 ``` Explanation: The three interesting segments can be [0, 1], [0, 1, 1], and [0, 0, 1]. Another possible set of segments could be [0, 1], [0, 1], and [1, 0, 0, 1]. In both cases, the maximum number of non-overlapping interesting segments is 3.","solution":"def max_interesting_segments(n, arr): count = 0 i = 0 while i < n: if arr[i] == 1: count += 1 while i < n and arr[i] == 1: i += 1 i += 1 return count"},{"question":"Moose the Mathematician has an array of integers a of length n. Moose can perform no more than n-1 (possibly zero) operations of the following form: In one operation, Moose can select positions i and i+1 for some i with 1 le i < n and replace a_i with a_i + a_{i+1}. Then Moose removes position i+1 from array a (after the removal, the remaining parts are concatenated). Note that after every operation the length of a decreases by 1. Moose wants to maximize the value of the sum of the elements in the array after performing any number of operations (up to n-1). Determine the maximum possible sum Moose can obtain. The first line of input contains an integer n (1 le n le 10^6) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n ((10^9 le a_i le 10^9) - 5) — the elements of the array. Output a single integer — the maximum possible sum Moose can obtain. For example, if Moose has the array [1, 2, 3, 4], he can select positions 1 and 2 to replace 1 with 3 (1 + 2), and remove 2, resulting in the array [3, 3, 4]. Then he can select positions 1 and 2 to replace 3 with 6 (3 + 3), and remove 2, resulting in the array [6, 4]. Finally, he can select positions 1 and 2 to replace 6 with 10 (6 + 4), resulting in the array [10], which is the maximum sum possible.","solution":"def maximum_possible_sum(n, a): Returns the maximum possible sum of the array elements after performing up to n-1 operations as described in the problem statement. return sum(a)"},{"question":"Anna is decorating a series of identical rooms for an event. Each room is a rectangle, and she wants to hang a continuous string of lights around the perimeter of each room. She has several reels of string lights, each of length n. Determine the minimal number of string light reels that Anna needs to decorate k rooms. Each perimeter side of the room must be a continuous piece of string light. The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of each string light reel. The second line contains three integers l, w, and k (1 ≤ l, w ≤ 100, 1 ≤ k ≤ 100) — the length and width of each room, and the number of rooms Anna wants to decorate, respectively. Output the minimal number of string light reels required to decorate all k rooms. In the first example, if the perimeter of a room requires 40 units of string lights and n is 50, then one reel is enough for one room, and k rooms would require k reels. In another example, if the perimeter of a room requires 40 units of string lights and n is 20, then each room will require 2 reels, and k rooms would require 2 * k reels.","solution":"def minimal_reels(n, l, w, k): Returns the minimal number of string light reels required to decorate k rooms. Parameters: n (int): Length of each string light reel. l (int): Length of each room. w (int): Width of each room. k (int): Number of rooms. Returns: int: Minimal number of string light reels required. # Calculate the perimeter of one room perimeter = 2 * (l + w) # Calculate the number of reels needed for one room reels_per_room = -(-perimeter // n) # Equivalent to ceil(perimeter / n) # Calculate the total number of reels needed for k rooms total_reels = reels_per_room * k return total_reels"},{"question":"You are working with a sequence of integers in a dynamic array. Your task is to process a series of operations in order to modify the array. The operations are of three types: 1. **Add an integer**: Insert an integer to the end of the array. 2. **Remove the last integer**: Remove the integer from the end of the array. If the array is empty, do nothing. 3. **Find the median**: Output the median of the list of current integers in the array. The median of a list is defined as: - If the length of the list is odd, the median is the middle element when the list is sorted. - If the length of the list is even, the median is the average of the two middle elements when the list is sorted. Write a program to read the series of operations and execute them in order. # Input The first line contains an integer, `q` (1 le q le 10^5), the number of operations. The next `q` lines each contain one of the following commands: - `1 x` to add integer `x` (-10^9 le x le 10^9) to the end of the array. - `2` to remove the last integer from the array. - `3` to find and print the median of the integers in the array. # Output For each `3` operation, output the median of the current array of integers on a new line. If the array is empty, output \\"Empty\\". # Example Input ``` 6 1 1 1 2 1 3 3 2 3 ``` Output ``` 2 1.5 ``` # Notes - Medians for integer lists should be presented as integers if they are whole, or as floating-point numbers with one decimal if they are fractional (even if the decimal part is zero). - Ensure the program handles large input sizes efficiently considering time and space complexity.","solution":"import bisect class DynamicArray: def __init__(self): self.arr = [] def add(self, x): bisect.insort(self.arr, x) def remove(self): if self.arr: self.arr.pop() def find_median(self): n = len(self.arr) if n == 0: return \\"Empty\\" mid = n // 2 if n % 2 == 1: return float(self.arr[mid]) else: return (self.arr[mid] + self.arr[mid - 1]) / 2.0 def process_operations(operations): da = DynamicArray() result = [] for op in operations: if op[0] == 1: da.add(op[1]) elif op[0] == 2: da.remove() elif op[0] == 3: result.append(da.find_median()) return result"},{"question":"Sarah is on a quest to collect rare stones hidden in a mysterious cave. The cave has multiple paths, each leading to a specific number of stones. Sarah can only traverse from the entrance to the exit, collecting stones. She can\'t revisit any path once taken. Each path is represented by an integer array where each element denotes the number of stones available on that path segment. Sarah can take any segment from the entrance to the exit, but she cannot split a segment. She aims to collect the maximum number of stones possible by choosing the optimal path. Given multiple test cases, each representing the paths available in one cave, determine the maximum number of stones Sarah can collect for each test case. The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. Then follow `t` test cases. For each test case, the first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of paths in the cave. The second line contains `n` integers `p_i` (1 ≤ p_i ≤ 10^4) — the number of stones on the i-th path. For each test case, print a line containing one integer — the maximum number of stones Sarah can collect. **Example:** Input: ``` 3 4 2 3 1 5 3 4 4 4 5 1 2 8 3 2 ``` Output: ``` 5 4 8 ``` In the first test case, the maximum number of stones Sarah can collect by choosing the optimal path is `5`. In the second test case, she can collect a maximum of `4` stones by any path since all have the same number of stones. In the last test case, the optimal path has `8` stones.","solution":"def max_stones_from_paths(test_cases): results = [] for paths in test_cases: results.append(max(paths)) return results # Example usage input_data = [ [2, 3, 1, 5], [4, 4, 4], [1, 2, 8, 3, 2] ] print(max_stones_from_paths(input_data)) # Output should be [5, 4, 8]"},{"question":"A travel company is developing an itinerary application that helps users plan their trips. One of the features of the application is to group nearby places of interest into clusters so that users can visit multiple places in one trip. You are given a list of places, each represented by their coordinates on a 2D plane, and a distance threshold. Two places belong to the same cluster if the Euclidean distance between them is less than or equal to the threshold. Your task is to find the number of unique clusters of places of interest. The first line contains two space-separated integers n and t (1 ≤ n ≤ 10^4; 1 ≤ t ≤ 10^3). The next n lines contain two space-separated integers x_i and y_i (-10^4 ≤ x_i, y_i ≤ 10^4) representing the coordinates of each place. Print a single integer — the number of unique clusters. Example: Input: 5 3 0 0 3 0 6 0 10 0 0 4 Output: 3","solution":"from math import sqrt from collections import deque def euclidean_distance(x1, y1, x2, y2): return sqrt((x1 - x2)**2 + (y1 - y2)**2) def find_clusters(n, t, coordinates): visited = [False] * n clusters = 0 def bfs(start): queue = deque([start]) visited[start] = True while queue: current = queue.popleft() for i in range(n): if not visited[i]: if euclidean_distance(coordinates[current][0], coordinates[current][1], coordinates[i][0], coordinates[i][1]) <= t: visited[i] = True queue.append(i) for i in range(n): if not visited[i]: clusters += 1 bfs(i) return clusters # The function to use for input processing def number_of_clusters(n, t, points): return find_clusters(n, t, points) # Example usage: # n = 5 # t = 3 # points = [(0, 0), (3, 0), (6, 0), (10, 0), (0, 4)] # print(number_of_clusters(n, t, points)) # Output: 3"},{"question":"You are given a sequence of n integers where each integer represents a height. You need to find the longest subsequence where each consecutive element in the subsequence is greater than or equal to the previous one. A subsequence is a sequence derived by deleting some or no elements of the original sequence without changing the order of the remaining elements. Note that the longest increasing subsequence is a classical DP problem, but here you need to return the length of the longest non-decreasing subsequence. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of integers in the sequence. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the sequence. Output: - Print a single integer, the length of the longest non-decreasing subsequence. Examples: Input: 6 5 3 4 8 6 7 Output: 4 Input: 5 2 2 2 2 2 Output: 5 Explanation: For the first example, one of the longest non-decreasing subsequences is [3, 4, 6, 7], making the answer 4. For the second example, since all numbers are equal, the whole sequence itself is the longest non-decreasing subsequence.","solution":"def longest_non_decreasing_subsequence(n, sequence): Returns the length of the longest non-decreasing subsequence. if n == 0: return 0 # Initialize the DP array dp = [1] * n # Calculate the longest non-decreasing subsequence using dynamic programming for i in range(1, n): for j in range(i): if sequence[i] >= sequence[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest non-decreasing subsequence return max(dp)"},{"question":"A game consists of a sequence of moves on a number. Initially, the number is x, and there are n moves. Each move is described by an operation and a value. Operations can be \\"add\\" or \\"multiply\\". For every move, you should compute the new value of the number according to the specified operation and value. You are given the initial number x and a list of moves. Each move consists of an operation (\\"add\\" or \\"multiply\\") and a value v. Compute the final number after all moves have been performed in the order given. # Input: - The first line contains an integer x (1 ≤ x ≤ 10^9) — the initial number. - The second line contains an integer n (1 ≤ n ≤ 10^5) — the number of moves. - The following n lines each contain a string and an integer, describing the operations and values. The string is either \\"add\\" or \\"multiply\\" and the integer v (1 ≤ v ≤ 10^9). # Output: - Output a single integer — the final result after performing all n moves in the order given. # Example: Input: ``` 5 3 add 3 multiply 4 add 2 ``` Output: ``` 34 ``` Explanation: - Start with x = 5 - First move: add 3 -> 5 + 3 = 8 - Second move: multiply 4 -> 8 * 4 = 32 - Third move: add 2 -> 32 + 2 = 34","solution":"def compute_final_number(x, n, moves): Returns the final number after performing all the moves on the initial number. Args: x (int): The initial number. n (int): The number of moves. moves (list of tuples): Each tuple consists of a string (\\"add\\" or \\"multiply\\") and an integer. Returns: int: The final number after all moves. for operation, value in moves: if operation == \\"add\\": x += value elif operation == \\"multiply\\": x *= value return x"},{"question":"The problem involves the residents of a fictional town called Graphia. Graphia is unique because the town\'s layout is represented as a connected graph consisting of n nodes and m edges. Each node represents a house, and each edge represents a road connecting two houses. The roads are bidirectional, allowing travel in both directions. The citizens of Graphia are planning a festival and need to decorate some roads. Due to budget constraints, they can only afford to decorate k roads. They want to choose k roads in such a way that after potentially removing some of these k roads (but keeping all other roads intact), the town\'s layout would remain a single connected graph. In other words, removing any subset of the chosen k roads should not disconnect the town. Your task is to help them determine whether it is possible to choose such k roads. If it is possible, return any one set of k roads that satisfy the condition. If it is not possible, return -1. The first line of the input contains three integers n, m, and k (1 ≤ n ≤ 100, 1 ≤ m ≤ 500, 1 ≤ k ≤ m). The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating a bidirectional road connecting node u and node v. Output should be one of the following: - One set of k lines, each containing two integers u and v, signifying that a road between node u and v is to be decorated. or - A single line containing -1 if it\'s not possible to choose such k roads. Example: Input: 4 5 2 1 2 1 3 2 3 2 4 3 4 Output: 1 2 2 3 In the above example, the selected roads are between nodes 1-2 and 2-3. Removing either one of these roads won\'t disconnect the town.","solution":"def find_decorated_roads(n, m, k, edges): Determine whether it is possible to choose k roads such that the removal of any subset of these roads does not disconnect the town. :param n: Number of nodes (houses) :param m: Number of edges (roads) :param k: Number of roads to decorate :param edges: List of tuples, where each tuple (u, v) represents a bidirectional road :return: List of k tuples representing the roads to decorate, or -1 if impossible if k > n - 1: return -1 # Use the first (n-1) edges if possible since they guarantee connectivity decorated_roads = edges[:k] return decorated_roads # Helper function to process input def process_input(input_data): data = input_data.strip().split(\'n\') n, m, k = map(int, data[0].strip().split()) edges = [tuple(map(int, line.strip().split())) for line in data[1:]] return n, m, k, edges # Example usage: # n, m, k, edges = process_input(\\"4 5 2n1 2n1 3n2 3n2 4n3 4\\") # result = find_decorated_roads(n, m, k, edges) # print(result)"},{"question":"A sequence of integers is called \\"balanced\\" if the number of occurrences of the digit 1 is the same as the number of occurrences of the digit 0. Given an integer n, write a function to determine how many balanced sequences of length n can be formed using only the digits 0 and 1. The first line of input contains a single integer n (1 le n le 20). Print one integer — the number of balanced sequences of length n. If no such sequence can exist, print 0. **Example:** _input:_ ``` 4 ``` _output:_ ``` 6 ``` _input:_ ``` 3 ``` _output:_ ``` 0 ``` _input:_ ``` 6 ``` _output:_ ``` 20 ```","solution":"def balanced_sequences_count(n): Returns the count of balanced sequences of length n. A sequence is balanced if the number of 0s is equal to the number of 1s. if n % 2 != 0: return 0 # No balanced sequence possible if length is odd # To find the balanced sequence count, we can use combinatorial approach: # In a balanced sequence of length n, there are exactly n//2 0s and n//2 1s. from math import comb half_n = n // 2 return comb(n, half_n)"},{"question":"Jamie is trying to stay on top of his assignments by organizing them in a to-do list along with their deadlines. Each assignment has a name and a deadline in days. Jamie wants to track the assignments he needs to complete each day and be able to easily find out which assignment is due next. Your task is to help Jamie manage his to-do list with the following operations: 1. **add assignment_name deadline**: Adds a new assignment with a given name and deadline to the to-do list. Deadlines are given as the number of days from today. 2. **remove assignment_name**: Removes an assignment with the given name from the to-do list. If the assignment does not exist, do nothing. 3. **next_deadline**: Returns the name of the assignment with the nearest deadline. If multiple assignments have the same deadline, return the one that was added first. If the to-do list is empty, return `\\"none\\"`. 4. **count due_days**: Returns the number of assignments that are due in exactly `due_days` days. If no assignments are due in that number of days, return `0`. The first line of input will contain an integer `q` (1 ≤ q ≤ 10^5) representing the number of operations. The next `q` lines will contain one of the four operations as described above. Output the result of each `next_deadline` and `count` operation as they appear in the input. For `next_deadline`, output the assignment name or `\\"none\\"`. For `count`, output the number of assignments due in the specified number of days. # Example Input ``` 8 add math 3 add english 5 next_deadline count 3 add history 3 add science 2 next_deadline remove science next_deadline ``` Output ``` math 1 science math ``` # Constraints - Assignment names only consist of lowercase English letters and have lengths between 1 and 15. - Deadlines are non-negative integers and do not exceed 365. Implement the program to help Jamie manage his to-do list efficiently.","solution":"from collections import defaultdict import heapq class ToDoList: def __init__(self): self.assignments = {} self.deadline_heap = [] self.deadline_count = defaultdict(int) self.counter = 0 # to handle assignments with same deadline, we use a counter def add(self, assignment_name, deadline): if assignment_name in self.assignments: return # do not allow duplicate assignments self.assignments[assignment_name] = (deadline, self.counter) heapq.heappush(self.deadline_heap, (deadline, self.counter, assignment_name)) self.deadline_count[deadline] += 1 self.counter += 1 def remove(self, assignment_name): if assignment_name not in self.assignments: return deadline, _ = self.assignments.pop(assignment_name) self.deadline_count[deadline] -= 1 def next_deadline(self): while self.deadline_heap: deadline, count, assignment_name = heapq.heappop(self.deadline_heap) if assignment_name in self.assignments and self.assignments[assignment_name] == (deadline, count): heapq.heappush(self.deadline_heap, (deadline, count, assignment_name)) return assignment_name return \\"none\\" def count(self, due_days): return self.deadline_count[due_days] def manage_assignments(operations): to_do_list = ToDoList() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"add\\": _, name, deadline = parts to_do_list.add(name, int(deadline)) elif command == \\"remove\\": _, name = parts to_do_list.remove(name) elif command == \\"next_deadline\\": results.append(to_do_list.next_deadline()) elif command == \\"count\\": _, due_days = parts results.append(str(to_do_list.count(int(due_days)))) return results"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each edge has a weight represented by `w`. The edges are bidirectional, meaning the edge (u, v, w) implies there is an edge from `u` to `v` with weight `w` and also from `v` to `u` with weight `w`. There are `k` nodes marked as special. Your task is to find the minimum weight of an edge that connects one of the special nodes to a non-special node. Input: - The first line contains three integers `n`, `m`, and `k` (`1 <= k < n <= 100000`, `1 <= m <= 200000`) — the number of nodes, the number of edges, and the number of special nodes. - The second line contains `k` integers, the list of special nodes. - Each of the next `m` lines contains three integers `u`, `v`, and `w` (`1 <= u, v <= n`, `1 <= w <= 1000000`) — representing an edge between nodes `u` and `v` with weight `w`. Output: - Output a single integer, the minimum weight of an edge that connects a special node to a non-special node. If there is no such edge, output `-1`. Example: Input: ``` 5 5 2 1 2 1 3 4 1 4 8 2 4 7 3 5 6 4 5 1 ``` Output: ``` 4 ``` Explanation: - There are 5 nodes and 5 edges in the graph. - Nodes 1 and 2 are special nodes. - The edge (1, 3) has the minimum weight of 4 that connects a special node (1) to a non-special node (3).","solution":"def find_minimum_special_edge(n, m, k, special_nodes, edges): Find the minimum weight of an edge connecting a special node to a non-special node. Parameters: - n: number of nodes in the graph. - m: number of edges in the graph. - k: number of special nodes. - special_nodes: list of special nodes. - edges: list of edges, where each edge is represented as (u, v, w). Returns: - Minimum weight of an edge connecting a special node to a non-special node, or -1 if no such edge exists. special_set = set(special_nodes) min_weight = float(\'inf\') for u, v, w in edges: if (u in special_set and v not in special_set) or (v in special_set and u not in special_set): min_weight = min(min_weight, w) return min_weight if min_weight != float(\'inf\') else -1"},{"question":"You are given an array of integers `arr` and an integer `k`. Your task is to shift the array `k` positions to the right. For example, if the input array is [1, 2, 3, 4, 5, 6, 7] and k = 3, the output should be [5, 6, 7, 1, 2, 3, 4]. The first line of input contains an integer `n` (1 ≤ n ≤ 100), the length of the array. The second line contains `n` space-separated integers representing the elements of the array. The third line contains the integer `k` (0 ≤ k ≤ 100). Output the array after it has been rotated `k` positions to the right.","solution":"def rotate_array(arr, k): Shifts the elements of array `arr` k positions to the right. Parameters: arr (list): List of integers k (int): Number of positions to shift the array Returns: list: Array after shifting `k` positions to the right n = len(arr) k = k % n # Handle cases where k >= n return arr[-k:] + arr[:-k]"},{"question":"In a magical forest, there are n different types of mythical creatures. Each type of creature has its own characteristic length of life cycle. The life cycle length of the i-th type of creature is denoted by li. Every creature type starts its life cycle at the beginning of the year and lives exactly li years before the next generation of the same type of creature is born. Due to some cosmic phenomenon, once every k years, all creatures gather at a specific spot in the forest to celebrate their synchrony if their life cycles allow them to. This celebration happens if and only if the current year number (from the starting point) is a multiple of every creature\'s life cycle length who is alive at that moment. Determine the earliest year after the initial year (year 0) when all n types of creatures can gather for the celebration. The first line of the input contains two positive integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 10^6) — the number of mythical creature types and the cosmic interval respectively. The second line contains n integers separated by space, where the i-th integer (1 ≤ li ≤ 10^6) represents the life cycle length of the i-th type of creature. Output a single integer — the smallest year number after year 0 when the creatures can gather for their celebration, given that year is also a multiple of k. Here\'s the input and output format: **Input:** ``` 2 12 3 4 ``` **Output:** ``` 12 ``` In this example: - The creature types have life cycle lengths of 3 and 4. - The celebration interval is every 12 years (value of k). - The least common multiple (LCM) of 3 and 4 is 12. - 12 is the smallest multiple of 12 that fits the criteria, hence the output is 12.","solution":"import math from functools import reduce def lcm(a, b): return abs(a*b) // math.gcd(a, b) def earliest_celebration_year(n, k, life_cycles): # Finding the LCM of all life cycle lengths lcm_all = reduce(lcm, life_cycles) # Find the first year that is multiple of both lcm_all and k if lcm_all % k == 0: return lcm_all else: return (lcm_all * k) // math.gcd(lcm_all, k) # Example n = 2 k = 12 life_cycles = [3, 4] print(earliest_celebration_year(n, k, life_cycles)) # Output should be 12"},{"question":"**Problem Statement** A company has recently decided to conduct an online auction for various items. One unique feature of their auction platform is that every bid made by a participant is recorded and the highest bid for each item is always shown. The company occasionally experiences a situation where some of the recorded bids are found to be fraudulent and must be removed from the system. Given the array of bids for an item, determine the highest valid bid after removing all fraudulent bids. If there are no valid bids remaining after the removal, return -1. Write a function `highest_valid_bid(n: int, bids: List[int], fraudulent: List[int]) -> int` that takes in the following parameters: - `n`: an integer representing the number of bids. - `bids`: a list of n integers where each integer represents a bid value made by a participant. - `fraudulent`: a list of integers representing the fraudulent bids that need to be removed. Your function should return the highest valid bid after removing all fraudulent bids. If no valid bids are remaining, return -1. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 2000), the number of bids. - The second line contains `n` space-separated integers, representing the bid values. - The third line contains an integer `m` (0 ≤ m ≤ 1000), the number of fraudulent bids. - The fourth line contains `m` space-separated integers, representing the fraudulent bids. # Output: - Output a single integer, the highest valid bid after removing all fraudulent bids, or -1 if no valid bids are remaining. # Example: Input: ``` 5 45 72 13 27 72 2 13 72 ``` Output: ``` 45 ``` # Explanation: There were originally five bids: 45, 72, 13, 27, and 72. After removing the fraudulent bids (13 and both instances of 72), the remaining bids are 45 and 27. The highest valid bid is 45. # Constraints: - All bid values are non-negative integers (0 ≤ bids[i] ≤ 10^6). - The number of valid bids after removing fraudulent bids is guaranteed to be at least one if there is at least one non-fraudulent bid originally. # Note: Use efficient processing to handle input constraints, ensuring your solution runs within the given limits.","solution":"from typing import List def highest_valid_bid(n: int, bids: List[int], fraudulent: List[int]) -> int: Returns the highest valid bid after removing all fraudulent bids from the list of bids. If no valid bids are remaining, returns -1. fraud_set = set(fraudulent) valid_bids = [bid for bid in bids if bid not in fraud_set] if not valid_bids: return -1 return max(valid_bids)"},{"question":"A city is represented as an n x n grid. Each cell in the grid can either be \'B\' representing a building, \'E\' representing an empty lot, or \'P\' representing a park. Policarp wants to create a new park in the city to increase the green area. The rule for placing a new park is that it should replace exactly one empty lot (\'E\'), and all cells adjacent (up, down, left, and right) to this new park should not contain a building (\'B\'). Given the city\'s grid representation, write a program to determine the number of valid locations where Policarp can place the new park. # Input: - The first line contains an integer n (1 ≤ n ≤ 100), the size of the city grid. - The next n lines each contain a string of length n consisting of characters \'B\', \'E\', or \'P\' representing the city. # Output: - Print a single integer — the number of valid locations where the new park can be placed. # Sample Input: ``` 5 EEEEE EBBBE EEPEE EEEPE BEEEB ``` # Sample Output: ``` 7 ``` # Explanation: The valid locations to place the new park are at coordinates: (1, 0), (2, 0), (2, 4), (3, 0), (4, 2), (4, 3), and (4, 4).","solution":"def count_valid_park_locations(n, grid): def is_valid_park_location(i, j): if grid[i][j] != \'E\': return False if i > 0 and grid[i-1][j] == \'B\': return False if i < n-1 and grid[i+1][j] == \'B\': return False if j > 0 and grid[i][j-1] == \'B\': return False if j < n-1 and grid[i][j+1] == \'B\': return False return True valid_count = 0 for i in range(n): for j in range(n): if is_valid_park_location(i, j): valid_count += 1 return valid_count"},{"question":"Given a list of integers, you are tasked with creating all possible unique subsets of this list. A subset is any combination of elements that can be derived from the original list, including the empty set and the set itself. The subsets should be returned in sorted order. Your goal is to write a function that accepts a list of integers and returns a list of lists, where each sublist is a unique subset of the given list. The subsets should appear in non-descending order based on their list values. # Input - The input contains a single list of integers, `nums` (1 ≤ len(nums) ≤ 16, -10 ≤ nums[i] ≤ 10). # Output - The output is a list of lists representing all unique subsets in non-descending order. Each subset should also be sorted in non-descending order. # Examples Example 1: Input: ``` nums = [1, 2, 2] ``` Output: ``` [ [], [1], [1, 2], [1, 2, 2], [2], [2, 2] ] ``` Example 2: Input: ``` nums = [4, 4, 4, 1, 4] ``` Output: ``` [ [], [1], [1, 4], [1, 4, 4], [1, 4, 4, 4], [1, 4, 4, 4, 4], [4], [4, 4], [4, 4, 4], [4, 4, 4, 4] ] ``` Note: - The order of elements in a subset and the order of subsets won\'t matter when the final output is compared as long as the result list contains all unique subsets.","solution":"from itertools import combinations def sorted_subsets(nums): Returns all unique subsets of a list of integers in non-descending order nums.sort() subsets = set() for i in range(len(nums) + 1): for comb in combinations(nums, i): subsets.add(comb) result = [list(subset) for subset in subsets] result.sort() return result"},{"question":"You are given an array of integers representing the strength levels of soldiers in an army. The objective is to determine the minimum number of groups that must be formed such that the difference in strength between the strongest and the weakest soldier in any group does not exceed a given threshold. Write a function `min_groups(soldiers, threshold)` that takes in an array of integers `soldiers` and an integer `threshold`, and returns the minimum number of groups required. # Input - `soldiers`: A list of integers where each integer represents the strength of a soldier. The length of the list will be between 1 and 10^5, and each strength level will be between 1 and 10^9. - `threshold`: An integer representing the maximum allowed difference in strength within a group. The value of `threshold` will be between 0 and 10^9. # Output - Return an integer representing the minimum number of groups. # Example Example 1 ``` Input: soldiers = [1, 3, 3, 4, 6] threshold = 3 Output: 2 Explanation: We can form two groups: [1, 3, 3, 4] and [6]. The differences within the groups do not exceed the threshold of 3. ``` Example 2 ``` Input: soldiers = [7, 2, 4, 10, 5] threshold = 2 Output: 3 Explanation: We can form three groups: [2, 4], [5, 7], and [10]. The differences within the groups do not exceed the threshold of 2. ``` # Constraints - Ensure the function completes within a reasonable time frame for large input sizes.","solution":"def min_groups(soldiers, threshold): Returns the minimum number of groups required such that the difference in strength between the strongest and weakest soldier in any group does not exceed the given threshold. # Sort the soldiers by their strength soldiers.sort() # Initialize the number of groups groups = 0 i = 0 # Traverse through the sorted list while i < len(soldiers): # Start a new group groups += 1 j = i # Expand the group as long as it satisfies the threshold constraint while j < len(soldiers) and soldiers[j] - soldiers[i] <= threshold: j += 1 # Move to the next soldier that has not been grouped yet i = j return groups"},{"question":"Polycarp loves playing video games. His favorite game is an interesting and complex maze, where each cell in the maze can either be empty (.), a wall (#), or an exit (E). Polycarp can move up, down, left, or right, but he cannot move through walls. He wants to find the shortest path to the exit from his starting position (S). If there are multiple such paths, any one of them can be returned. The maze is represented by an n x m grid, where n is the number of rows and m is the number of columns. The maze always has exactly one starting position and at least one exit, and all cells outside the maze boundaries are considered walls. Given the grid representation of the maze, find the shortest path length for Polycarp to reach the exit. If it\'s not possible for Polycarp to reach an exit, return -1. The first line of the input contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100) — the number of rows and columns of the maze. Each of the next n lines contains exactly m characters, representing the maze. The \'S\' character represents Polycarp\'s starting position, the \'E\' character represents an exit, the \'.\' character represents an empty cell, and the \'#\' character represents a wall. Output the length of the shortest path for Polycarp to reach an exit. If no such path exists, output -1. **Example:** Input: ``` 5 7 # #S..E.# #...# #.....# # ``` Output: ``` 3 ``` In this example, Polycarp can move right from \'S\' to the empty cell, then up to another empty cell, and finally right to the exit \'E\'. The shortest path length is 3.","solution":"from collections import deque def shortest_path_length(n, m, maze): Returns the length of the shortest path for Polycarp to reach an exit in the maze. If no such path exists, returns -1. # Locate the start position start = None exits = [] for i in range(n): for j in range(m): if maze[i][j] == \'S\': start = (i, j) elif maze[i][j] == \'E\': exits.append((i, j)) if not start or not exits: return -1 # Directions for moving: right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # BFS setup queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() if maze[x][y] == \'E\': return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and maze[nx][ny] != \'#\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given two lists **l1** and **l2** of the same length, containing integers. Your task is to determine if it is possible to reorder the elements of **l1** such that for every **i**, **l1[i]** is less than or equal to **l2[i]**. If such an arrangement exists, output the modified **l1** list. If not, output the string \\"No solution\\". # Input - The first line contains an integer **n** (1 ≤ n ≤ 10^5) — the number of elements in both lists. - The second line contains **n** integers representing the elements of the list **l1** (1 ≤ l1[i] ≤ 10^9). - The third line contains **n** integers representing the elements of the list **l2** (1 ≤ l2[i] ≤ 10^9). # Output - If the required reordering of list **l1** is possible, output the modified list **l1** so that for each **i**, **l1[i]** ≤ **l2[i]**. - If no such reordering exists, output \\"No solution\\". # Example Input ``` 5 4 5 1 2 3 5 4 4 3 2 ``` Output ``` 3 5 1 2 4 ``` Input ``` 3 2 7 4 3 3 3 ``` Output ``` No solution ```","solution":"def reorder_l1_to_fit_l2(n, l1, l2): Determines if l1 can be reordered so that l1[i] <= l2[i] for all i. Args: n : int : the number of elements in the lists l1 : list of int : first list of integers l2 : list of int : second list of integers Returns: list of int if reordering is possible, otherwise \\"No solution\\" l1.sort() l2.sort() for i in range(n): if l1[i] > l2[i]: return \\"No solution\\" return l1"},{"question":"The kingdom of Meridia is divided into p zones, each zone containing q cities. The kingdom is known for its unique transportation system where each city is connected to exactly two other cities within the same zone, forming a circular route. King Meridian the Fourth wants to place his guards in each city to ensure security. The guards should be placed in a manner that no two adjacent cities have guards of the same type. Given the number of zones p and the number of cities per zone q, determine if it\'s possible to place the guards accordingly, and if so, provide one possible arrangement. The first line contains two integers p and q — the number of zones and the number of cities per zone (1 ≤ p ≤ 100, 3 ≤ q ≤ 1000). Then, p lines follow, each containing q integers – a permutation of numbers from 1 to q representing the cities in that zone. If it\'s not possible to assign guards in the required manner, print \\"IMPOSSIBLE\\" (without the quotes). Otherwise, in the first line print \\"POSSIBLE\\" (without the quotes), and in the subsequent p lines print the assignment of guards for each city in each zone. Each line should contain q integers, where the i-th integer represents the type of guard assigned to the i-th city in that zone. Consider guards\' types to be integers starting from 1. If there are multiple solutions, print any of them.","solution":"def place_guards(p, q, zones): if q % 2 == 1: return \\"IMPOSSIBLE\\" def guard_arrangement(q): return [(i % 2) + 1 for i in range(q)] guards = [guard_arrangement(q) for _ in range(p)] return \\"POSSIBLE\\", guards # Example execution p = 2 q = 4 zones = [ [1, 2, 3, 4], [4, 3, 2, 1] ] result = place_guards(p, q, zones) print(result)"},{"question":"You are given an array of n integers **a** and an integer k. Your task is to split this array into exactly k non-empty subarrays and minimize the maximum sum of elements in any subarray. A subarray is defined as a contiguous segment of the array. Write a function `minimize_max_subarray_sum(n, k, a)` that takes in three parameters: - n: an integer, representing the length of the array. - k: an integer, representing the number of subarrays to split into. - **a**: a list of n integers, representing the array. The function should return a single integer, the minimum possible value of the maximum sum of the k subarrays. # Input - First line consists of two integers n and k (1 leq k leq n leq 1000). - Second line consists of n integers a_i (1 leq a_i leq 10^6) denoting the array elements. # Output - Output a single integer, the minimum possible value of the maximum sum of the k subarrays. # Example Example 1 Input: ``` 5 2 1 2 3 4 5 ``` Output: ``` 9 ``` Explanation: - The original array can be split into two subarrays as [1, 2, 3] and [4, 5], where the sum of the first subarray is 6 and the sum of the second subarray is 9. The maximum sum among the subarrays is 9, and there is no other way to split the array to get a smaller possible value of the maximum sum. Therefore, the answer is 9. Example 2 Input: ``` 5 3 1 2 3 4 5 ``` Output: ``` 6 ``` Explanation: - The original array can be split into three subarrays as [1, 2], [3, 4], and [5], where the sums of the subarrays are 3, 7, and 5. The maximum sum among the subarrays is 7. Another possible split is [1, 2, 3], [4], and [5] with the maximum sum being 6 which is smaller than 7. Therefore, the answer is 6.","solution":"def minimize_max_subarray_sum(n, k, a): def valid_partition(max_sum): current_sum = 0 required_subarrays = 1 for num in a: if current_sum + num > max_sum: required_subarrays += 1 current_sum = num if required_subarrays > k: return False else: current_sum += num return True low, high = max(a), sum(a) while low < high: mid = (low + high) // 2 if valid_partition(mid): high = mid else: low = mid + 1 return low"},{"question":"A vending machine offers a variety of snacks arranged in a single stack. Each snack has a different price. The machine only accepts coins of a certain denomination, and users can insert multiple coins to make a purchase. Given the total amount of coin value a user has inserted and the list of snack prices, determine if the user can purchase any snack exactly with the coins they have inserted. If yes, return the price of the snack they can purchase, else return \\"Not possible\\". Write a function that receives the total coin value inserted and a list of snack prices, and returns the price of the snack the user can purchase, or \\"Not possible\\" if no exact match can be found. Function signature: ```python def can_purchase(total_coin_value: int, prices: List[int]) -> Union[int, str]: ``` # Input - `total_coin_value`: an integer (1 ≤ total_coin_value ≤ 1000) representing the total value of coins inserted into the machine. - `prices`: a list of integers (1 ≤ price ≤ 1000) representing the prices of the snacks available in the vending machine. # Output - Return the price of the snack if the user can purchase it with the exact value of the coins inserted, otherwise return \\"Not possible\\". # Example Example 1: Input: ```python total_coin_value = 15 prices = [10, 15, 20, 25, 30] ``` Output: ```python 15 ``` Explanation: The user has inserted coins worth 15 units, which matches exactly with the price of one of the snacks (15). Example 2: Input: ```python total_coin_value = 12 prices = [5, 8, 14, 20] ``` Output: ```python \\"Not possible\\" ``` Explanation: There is no snack with the exact price of 12 units in the given list, so it is not possible to make a purchase.","solution":"from typing import List, Union def can_purchase(total_coin_value: int, prices: List[int]) -> Union[int, str]: Determine if the user can purchase any snack exactly with the coins they have inserted. :param total_coin_value: an integer representing the total value of coins inserted :param prices: a list of integers representing the prices of the snacks available :return: the price of the snack the user can purchase, or \\"Not possible\\" if no exact match can be found if total_coin_value in prices: return total_coin_value return \\"Not possible\\""},{"question":"You are given an array of integers of length n. You need to perform a series of operations to transform this array. In a single operation, you can select a contiguous subarray and reverse it. Your task is to find the minimum number of operations required to make the array sorted in non-decreasing order. The first line contains an integer n (1 ≤ n ≤ 1000), the length of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Output the minimum number of operations required. For example, if the input array is [4, 3, 1, 2], you can reverse the subarray [3, 1, 2] in the first operation to get [4, 2, 1, 3], and then reverse the subarray [2, 1] to get [4, 1, 2, 3], and then reverse the whole array to finally get a sorted array. Hence, the minimum number of operations is 3.","solution":"def min_operations_to_sort(arr): Determines the minimum number of contiguous subarray reverses required to sort the array in non-decreasing order. :param arr: List[int] - List of integers to sort :return: int - Minimum number of operations required n = len(arr) if arr == sorted(arr): return 0 sorted_arr = sorted(arr) l, r = 0, n-1 while arr[l] == sorted_arr[l]: l += 1 while arr[r] == sorted_arr[r]: r -= 1 if arr[l:r+1][::-1] == sorted_arr[l:r+1]: return 1 return 2"},{"question":"You are given an array of integers, where each integer represents the height of a building. The buildings are arranged in a line, and you need to calculate the amount of rainwater that can be trapped between the buildings after it rains. Water trapped between the buildings is defined by the lower height of the buildings surrounding it. To solve this problem, you need to find the sum of water trapped between all the buildings. # Input - The first line contains an integer n (1 le n le 10^5) — the number of buildings. - The second line contains n integers h_1, h_2, ldots, h_n (0 le h_i le 10^4) — the heights of the buildings. # Output - Print the total amount of trapped water. # Example Input ``` 6 0 1 0 2 1 0 1 3 2 1 2 1 ``` Output ``` 6 ``` # Explanation In the example, 6 units of water (highlighted sections) are trapped: - 2 units between building with height 1 and building with height 2. - 1 unit between building with height 2 and building with height 3. - 1 unit between building with height 0 and another building with height 1. - 1 unit between building with height 1 and another building with height 2. - 1 unit between building with height 2 and 1.","solution":"def trap_rainwater(heights): Given a list of building heights, calculate the amount of trapped rainwater. if not heights: return 0 n = len(heights) if n < 3: return 0 left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"You are working on a text processing project that involves analyzing user comments about the release of a new electronic gadget. Each comment provides feedback containing either positive, neutral, or negative sentiment about the gadget. Your task is to determine the overall sentiment distribution in a given set of comments. The input will be given as a single file in the following format: Each comment starts with the word \\"Comment:\\" followed by a single space and then the comment text. Each comment is on a separate line. The input is guaranteed to have at least one comment and contains up to 1000 lines. Each line will have between 1 and 200 characters, inclusive. A comment is considered: - \\"positive\\" if it contains any of the words: \\"good\\", \\"excellent\\", \\"amazing\\", \\"fantastic\\", or \\"great\\" (case-insensitive), - \\"negative\\" if it contains any of the words: \\"bad\\", \\"terrible\\", \\"poor\\", \\"awful\\", or \\"horrible\\" (case-insensitive), - \\"neutral\\" if it contains neither any positive words nor any negative words. You need to count the number of positive, negative, and neutral comments and output these counts in the following format: - The first line should contain the number of positive comments. - The second line should contain the number of negative comments. - The third line should contain the number of neutral comments. Examples: Input: ``` Comment: I think this gadget is absolutely fantastic! Comment: The performance of this gadget is poor. Comment: pretty good experience overall. Comment: It is just okay, not too good or bad. Comment: horrible build quality! Comment: AMAZING design, love it. ``` Output: ``` 3 2 1 ```","solution":"def sentiment_distribution(comments): positive_words = {\\"good\\", \\"excellent\\", \\"amazing\\", \\"fantastic\\", \\"great\\"} negative_words = {\\"bad\\", \\"terrible\\", \\"poor\\", \\"awful\\", \\"horrible\\"} positive_count = 0 negative_count = 0 neutral_count = 0 for comment in comments: comment_text = comment.strip().lower().replace(\\"comment: \\", \\"\\") if any(word in comment_text for word in positive_words): positive_count += 1 elif any(word in comment_text for word in negative_words): negative_count += 1 else: neutral_count += 1 return positive_count, negative_count, neutral_count"},{"question":"You are given an array b_1, b_2, dots, b_n. A subarray of array b is called \\"increasing\\" if for every two consecutive elements in the subarray, the latter is strictly greater than the former. Write an algorithm to find the length of the longest increasing subarray. The first line contains an integer n (1 le n le 10^5) — the length of array b. The second line contains n integers b_1, b_2, dots, b_n (1 le b_i le 10^9) — array b. Print a single integer representing the length of the longest increasing subarray. # Example Input: ``` 6 1 2 3 2 3 4 ``` Output: ``` 3 ``` Input: ``` 5 5 4 3 2 1 ``` Output: ``` 1 ``` # Note In the first example, the longest increasing subarray is either [1, 2, 3] or [2, 3, 4], both with a length of 3. In the second example, there are no increasing subarrays with a length greater than 1, since all elements are in descending order.","solution":"def longest_increasing_subarray_length(n, b): Returns the length of the longest increasing subarray. n: int - the length of array b b: list of int - the array b if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if b[i] > b[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Sure! Here\'s a new question that matches the style, complexity, and scope of the given question: Two friends, Alice and Bob, are playing a game with an array of integers. The game works as follows: Alice can choose any two elements from the array and swap them. Bob can then choose any two adjacent elements and replace both of them with the sum of these elements. They play alternately, starting with Alice. Given an array a of n integers, your task is to compute the maximum possible sum of the elements after any number of swaps by Alice and replacements by Bob. The first line contains a single integer n (2 leq n leq 2 cdot 10^5). The second line contains n integers a_1, ldots, a_n (-10^9 leq a_i leq 10^9). Print a single integer — the maximum possible sum of the elements that can be achieved after any number of swaps by Alice and replacements by Bob. In the first sample, you can swap and replace in such a way to obtain the maximum sum of 3. In the second sample, since there is no need to swap or replace, the sum of the elements remains 0. In the third sample, you can swap and replace to achieve the maximum sum of 15. Note: 1. It is guaranteed that the optimal strategy involves performing at most n - 1 additions. **Example:** ``` Input: 3 1 2 3 Output: 3 Input: 5 -1 -2 1 2 0 Output: 0 Input: 4 2 2 2 9 Output: 15 ```","solution":"def max_sum_after_game(n, a): Given an array a of length n, computes the maximum possible sum of the elements after any number of swaps by Alice and replacements by Bob. return sum(a)"},{"question":"Given an integer array `nums` and an integer `k`, you need to find the length of the shortest subarray whose sum is greater than or equal to `k`. If no such subarray exists, return `-1`. A subarray is a contiguous part of an array. # Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the array. The second line contains `n` space-separated integers, each representing an element of the array. The third line contains a single integer `k` (1 ≤ k ≤ 10^9). # Output Print a single integer — the length of the shortest subarray with a sum of at least `k`. If no such subarray exists, return `-1`. # Example Input ``` 8 2 3 1 2 4 3 1 2 7 ``` Output ``` 2 ``` # Note In the example above, the subarray `[4, 3]` is the shortest subarray whose sum is greater than or equal to `7`.","solution":"from collections import deque def shortest_subarray_with_sum_at_least_k(nums, k): Return the length of the shortest subarray whose sum is at least k. If no such subarray exists, return -1. n = len(nums) prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + nums[i] result = float(\'inf\') monoq = deque() for i, current_sum in enumerate(prefix_sums): # Checking if any prefix sum meets the target while monoq and current_sum - prefix_sums[monoq[0]] >= k: result = min(result, i - monoq.popleft()) # Maintain a monotonically increasing queue while monoq and prefix_sums[monoq[-1]] >= current_sum: monoq.pop() monoq.append(i) return result if result != float(\'inf\') else -1"},{"question":"A car-rental company offers a variety of cars for rent at different prices depending on the type of car (e.g., SUV, sedan, compact). Each car rental also includes the option to add various insurance packages. The objective is to calculate the total rental cost for a customer. To keep things simple, we\'ll assume: 1. The rental cost per day is fixed for each type of car. 2. A customer can rent a car for any number of days. 3. There are three types of cars: SUV, sedan, and compact, with daily rental costs of 50, 30, and 20 respectively. 4. The company offers three insurance packages: basic, premium, and deluxe, which cost 5, 10, and 15 per day respectively. 5. Insurance packages are optional, and a customer can choose only one type of insurance for the entire rental period. Write a function that calculates the total rental cost given the type of car, the number of days, and the chosen insurance package (if any). # Input - `car_type` (str): A string representing the type of car. It can be one of the following: \\"SUV\\", \\"sedan\\", \\"compact\\". - `days` (int): An integer representing the number of days the car will be rented. - `insurance` (str): A string representing the type of insurance package. It can be one of the following: \\"none\\", \\"basic\\", \\"premium\\", \\"deluxe\\". # Output - An integer representing the total cost of the rental. # Example ```python calculate_rental_cost(\\"SUV\\", 3, \\"premium\\") should return 180 ``` Explanation: - Cost for SUV per day = 50 - Cost for 3 days = 50 * 3 = 150 - Premium insurance per day = 10 - Premium insurance for 3 days = 10 * 3 = 30 - Total cost = 150 + 30 = 180","solution":"def calculate_rental_cost(car_type, days, insurance): Calculate the total rental cost given the type of car, number of days, and chosen insurance package. Parameters: car_type (str): Type of car (\\"SUV\\", \\"sedan\\", \\"compact\\"). days (int): Number of rental days. insurance (str): Type of insurance package (\\"none\\", \\"basic\\", \\"premium\\", \\"deluxe\\"). Returns: int: Total rental cost. car_prices = { \\"SUV\\": 50, \\"sedan\\": 30, \\"compact\\": 20 } insurance_prices = { \\"none\\": 0, \\"basic\\": 5, \\"premium\\": 10, \\"deluxe\\": 15 } if car_type not in car_prices: raise ValueError(\\"Invalid car type.\\") if insurance not in insurance_prices: raise ValueError(\\"Invalid insurance type.\\") car_cost = car_prices[car_type] * days insurance_cost = insurance_prices[insurance] * days total_cost = car_cost + insurance_cost return total_cost"},{"question":"Dreamoon is exploring sequences and patterns. He recently came across a sequence defined as follows: The nth term of the sequence, denoted by T(n), is the sum of the first n Fibonacci numbers. Dreamoon wants to quickly compute T(n) for large values of n. The Fibonacci sequence is defined as: - F(1) = 1 - F(2) = 1 - F(n) = F(n-1) + F(n-2) for n > 2 Dreamoon asks for your help to find T(n). Since the answer may be large, return the result modulo 1,000,000,007 (10^9+7). # Input A single integer n (1 ≤ n ≤ 10^9). # Output Print a single integer representing T(n) modulo 1,000,000,007. # Examples Example 1 # Input 2 # Output 2 Example 2 # Input 1 # Output 1 Example 3 # Input 10 # Output 143 # Note In the first example, T(2) = F(1) + F(2) = 1 + 1 = 2. In the second example, T(1) = F(1) = 1. In the third example, T(10) = F(1) + F(2) + F(3) + ... + F(10) = 1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + 34 + 55 = 143.","solution":"MOD = 1000000007 def fib_sum(n): Returns the sum of the first n Fibonacci numbers, modulo 10^9 + 7. Uses matrix exponentiation for efficient calculation. if n == 0: return 0 if n == 1: return 1 def matrix_mult(A, B, mod): # Multiplies two 2x2 matrices A and B under modulo return [ [(A[0][0] * B[0][0] + A[0][1] * B[1][0]) % mod, (A[0][0] * B[0][1] + A[0][1] * B[1][1]) % mod], [(A[1][0] * B[0][0] + A[1][1] * B[1][0]) % mod, (A[1][0] * B[0][1] + A[1][1] * B[1][1]) % mod] ] def matrix_pow(M, exp, mod): # Computes matrix exponentiation M^exp under modulo result = [[1, 0], [0, 1]] # Identity matrix base = M while exp > 0: if exp % 2 == 1: result = matrix_mult(result, base, mod) base = matrix_mult(base, base, mod) exp //= 2 return result # Transformation matrix for Fibonacci sequence T = [ [1, 1], [1, 0] ] T_n = matrix_pow(T, n + 1, MOD) # We calculate T^(n+1) as it contains F(n+2) in its result # Sum of first n Fibonacci numbers T(n) = F(n+2) - 1 F_n_plus_2 = T_n[0][0] # This gives us F(n+2) return (F_n_plus_2 - 1) % MOD # Example usage: # print(fib_sum(2)) # Output: 2 # print(fib_sum(1)) # Output: 1 # print(fib_sum(10)) # Output: 143"},{"question":"Given an integer array `arr` of positive and negative integers and a target integer `target`, you need to find the number of pairs (i, j) where i != j such that arr[i] + arr[j] == target. Note: 1. The array may contain duplicate elements. 2. Pairs (i, j) and (j, i) are considered the same and should be counted only once. # Input - The first line of input contains an integer n (2 ≤ n ≤ 10^5) – the number of elements in the array. - The second line contains n space-separated integers arr[i] (|arr[i]| ≤ 10^9) – the elements of the array. - The third line contains one integer target (|target| ≤ 10^9). # Output - Print one integer – the number of unique pairs (i, j) where i != j and arr[i] + arr[j] == target. # Example Input ``` 5 1 5 7 -1 5 6 ``` Output ``` 3 ``` Explanation The 3 pairs are: (1, 5), (7, -1), and the second (5, 1).","solution":"def count_pairs(arr, target): Returns the number of pairs (i, j) such that arr[i] + arr[j] = target and i != j. from collections import Counter # Count occurrences of each number count = Counter(arr) pairs = 0 for num in count: complement = target - num if complement in count: if complement == num: # For (num, num) pair, it must be counted as combination without repetition pairs += count[num] * (count[num] - 1) // 2 elif complement > num: # Each pair (num, complement) is counted once (avoid (complement, num)) pairs += count[num] * count[complement] return pairs"},{"question":"You are given a two-dimensional grid of n times m cells. Each cell contains either a 1 or a 0. Your task is to find the largest sub-grid that contains only 1s. # Input: - The first line contains two integers, n and m (1 leq n, m leq 1000), the dimensions of the grid. - The next n lines each contain m integers (either 0 or 1), representing the grid. # Output: - Output a single integer, the area of the largest sub-grid that contains only 1s. # Example: **Input:** ``` 4 5 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1 1 1 ``` **Output:** ``` 6 ``` **Explanation:** The largest sub-grid that contains only 1s is a 2x3 sub-grid in the bottom right corner. Therefore, the area is 2 times 3 = 6.","solution":"def maximalRectangle(matrix): if not matrix: return 0 max_area = 0 n, m = len(matrix), len(matrix[0]) heights = [0] * (m + 1) for i in range(n): for j in range(m): if matrix[i][j] == 1: heights[j] += 1 else: heights[j] = 0 stack = [-1] for k in range(m + 1): while heights[k] < heights[stack[-1]]: h = heights[stack.pop()] w = k - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(k) return max_area"},{"question":"You are organizing a programming competition, and you have a collection of n problems. Each problem has a difficulty level associated with it, which is any integer between 1 and 10^6. You want to create the most balanced problem set for the competition. A balanced problem set is defined as a set of problems where the difference between the maximum difficulty and the minimum difficulty is minimized. To achieve this, you are provided with a specific number of problems, and you need to form a balanced subset of exactly k problems that minimizes the difficulty range (maximum difficulty - minimum difficulty). Additionally, there are q queries that either update the difficulty of a problem or ask for the minimum possible difficulty range given the current list of problems. The possible types of queries are: 1. `1 i d`: Update the difficulty of the i-th problem to d. 2. `2 k`: Find the minimum possible difficulty range for any subset of exactly k problems (with respect to the current difficulties). You need to handle these queries efficiently. Constraints: - 1 le n le 2 cdot 10^5 - 1 le k le n - 1 le q le 10^5 - 1 le d le 10^6 - 1 le text{initial difficulty of each problem} le 10^6 Input: - The first line contains two integers n and q. - The second line contains n integers, the initial difficulties of the problems. - The following q lines each contain a query in one of the two formats described. Output: - For each query of type `2 k`, output the minimum possible difficulty range for a subset of exactly k problems. Sample Input: ``` 5 5 4 1 7 3 2 2 3 1 3 6 2 4 1 5 5 2 2 ``` Sample Output: ``` 2 3 1 ```","solution":"def update_difficulties(difficulties, i, d): Updates the difficulty of the i-th problem to d. difficulties[i] = d def minimum_difficulty_range(difficulties, k): Finds the minimum possible difficulty range for any subset of exactly k problems. # Sort the list of difficulties sorted_difficulties = sorted(difficulties) min_range = float(\'inf\') # Iterate through the sorted difficulties and find the minimum range for k consecutive problems for i in range(len(sorted_difficulties) - k + 1): current_range = sorted_difficulties[i + k - 1] - sorted_difficulties[i] if current_range < min_range: min_range = current_range return min_range def handle_queries(n, q, initial_difficulties, queries): Handles the queries and prints the appropriate outputs. # Make a copy of initial difficulties as they can be modified current_difficulties = initial_difficulties[:] results = [] for query in queries: if query[0] == 1: # Update query: query format is [1, i, d] _, i, d = query update_difficulties(current_difficulties, i - 1, d) elif query[0] == 2: # Range query: query format is [2, k] _, k = query result = minimum_difficulty_range(current_difficulties, k) results.append(result) return results"},{"question":"You are given an array of integers. You want to split this array into several (non-zero) contiguous subarrays such that each element is part of exactly one subarray. The goal is to minimize the sum of the maximum elements of each subarray. Formally, for a given array arr of length n, you want to partition it into k contiguous subarrays, each denoted as arr_1, arr_2, dots, arr_k, in such a way that the sum of the maximums of these subarrays is minimized. # Input The first line contains a single integer n (1 leq n leq 10^5), the length of the array. The second line contains n space-separated integers arr_1, arr_2, dots, arr_n (1 leq arr_i leq 10^6), the elements of the array. # Output Output a single integer, the minimum possible sum of the maximum elements of the contiguous subarrays you can obtain. # Example Input: ``` 6 4 3 2 5 1 6 ``` Output: ``` 10 ``` In this example, you could split the array as [4, 3, 2] and [5, 1, 6], where the maximums are 4 and 6, respectively. Therefore, the sum is 4 + 6 = 10. Example 2: Input: ``` 5 7 2 5 10 8 ``` Output: ``` 23 ``` Here, you could split the array as [7], [2], [5], [10], and [8], where the maximums are 7, 2, 5, 10, and 8, respectively. Therefore, the sum is 7 + 2 + 5 + 10 + 8 = 32. Note: The example provided could have alternative solutions that lead to different sums, but the goal is to find the one with the minimum sum.","solution":"def minimize_sum_of_max_elements(n, arr): This function returns the minimum possible sum of the maximum elements of the contiguous subarrays. # The best way to minimize the sum of maximums is to have each element # of the array as a separate subarray (since no greater elements can combine # and add up). # Therefore, the minimum possible sum of the maximum elements will be the max element itself, # since we partition each number into its own subarray. return max(arr)"},{"question":"You are managing a parking lot that consists of n consecutive parking spaces, numbered from 1 to n. There are two types of vehicles that can park in the lot: cars and motorcycles. Each parking space can hold exactly one car or one motorcycle. A given sequence of vehicles is arriving at the parking lot, and you need to park them in such a way that no two cars are parked in adjacent parking spaces. You need to process the vehicle sequence and determine whether it is possible to park all the vehicles obeying this constraint. The input consists of a string s of length n composed of characters \'C\' and \'M\' where \'C\' represents a car and \'M\' represents a motorcycle. Cars must be parked such that no two cars are adjacent, while motorcycles can be parked without any restrictions. Output \\"YES\\" if it is possible to park all the vehicles in the parking lot while adhering to the constraints, otherwise output \\"NO\\". # Input - The first line contains an integer n (1 le n le 200,000) – the length of the sequence. - The second line contains a string s of length n consisting of characters \'C\' and \'M\'. # Output - Output a single string \\"YES\\" or \\"NO\\". # Example **Input:** ``` 5 CMCMC ``` **Output:** ``` YES ``` **Input:** ``` 6 CCMMCM ``` **Output:** ``` NO ``` **Input:** ``` 3 MMM ``` **Output:** ``` YES ``` # Explanation In the first example, it is possible to park the vehicles without violating the constraint: \'C\', \'M\', \'C\', \'M\', \'C\'. In the second example, the two \'C\' characters at the start would cause a violation. In the third example, since there are no cars, the constraints are trivially satisfied.","solution":"def can_park_vehicles(n, s): Takes the total number of parking spaces n, and a sequence s of vehicles, and returns \\"YES\\" if all vehicles can be parked without any two cars being adjacent, otherwise returns \\"NO\\". for i in range(n - 1): if s[i] == \'C\' and s[i + 1] == \'C\': return \\"NO\\" return \\"YES\\""},{"question":"You are given a tree with n nodes. You need to determine the diameter of the tree. Recall that the diameter of a tree is the length of the longest path between any two nodes in the tree. In the first line of input there is a single integer n (2 le n le 10^5). In each of the next n-1 lines, there are two integers u and v (1 le u, v le n) indicating that there is an edge between node u and node v. Print the diameter of the tree. Input format: 1. The first line contains a single integer n. 2. Each of the next n-1 lines contains two integers u and v. Output format: 1. Print a single integer representing the diameter of the tree. Example: Input: 5 1 2 2 3 2 4 4 5 Output: 3","solution":"from collections import deque, defaultdict def tree_diameter(n, edges): def bfs(start): queue = deque([start]) distances = [-1] * (n + 1) distances[start] = 0 farthest_node = start max_distance = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if distances[neighbor] == -1: distances[neighbor] = distances[node] + 1 queue.append(neighbor) if distances[neighbor] > max_distance: max_distance = distances[neighbor] farthest_node = neighbor return farthest_node, max_distance graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) farthest_node_1, _ = bfs(1) farthest_node_2, diameter = bfs(farthest_node_1) return diameter"},{"question":"John has a string s consisting of lowercase English letters. John wants to reorder the characters of the string in such a way that no two adjacent characters are the same. If is possible for John to achieve his goal, help him find one such possible reordering of the string. If it is not possible, return \\"IMPOSSIBLE\\". The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Each of the next t lines contains one string s (1 ≤ |s| ≤ 1000) — the given string for the test case. For each test case, print a single line with one valid reordering of s, or \\"IMPOSSIBLE\\" if no such reordering exists. In the first example, one valid reordering of the string \\"aab\\" is \\"aba\\". In the second example, there is no valid reordering of the string \\"aa\\" where no two adjacent characters are the same, so the output is \\"IMPOSSIBLE\\". In the third example, one valid reordering of the string \\"abc\\" is \\"bac\\" or \\"bca\\".","solution":"from collections import Counter import heapq def reorganize_string(s): Returns a reordering of the string `s` such that no two adjacent characters are the same, or \\"IMPOSSIBLE\\" if no such reordering exists. # Count frequency of each character counter = Counter(s) max_len = (len(s) + 1) // 2 if any(count > max_len for count in counter.values()): return \\"IMPOSSIBLE\\" # Create a max heap with negative counts because heapq is a min-heap by default max_heap = [(-count, char) for char, count in counter.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) # Append current character to the result result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Prepare for the next round prev_count, prev_char = count + 1, char return \'\'.join(result) def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(reorganize_string(s)) return results"},{"question":"You are given two arrays of integers. Both arrays are of the same length. Your task is to determine the minimum cost to make the two arrays identical. The cost to change a number in one array to a corresponding number in the other array is calculated as the absolute difference between the two numbers. The input data consists of three lines: 1. The first line contains an integer `n`, the length of both arrays (1 <= n <= 100). 2. The second line contains `n` integers, representing the first array. Each integer is between 1 and 1000. 3. The third line contains `n` integers, representing the second array. Each integer is between 1 and 1000. Output a single integer — the minimum cost to make the two arrays identical. In the first example, changing 3 to 1 and 7 to 7 results in the minimum cost. In the second example, changing 5 to 4 and 8 to 5 results in the minimum cost.","solution":"def minimum_cost_to_make_arrays_identical(n, array1, array2): Returns the minimum cost to make the two arrays identical. Parameters: n (int): The length of both arrays. array1 (list of int): The first array of integers. array2 (list of int): The second array of integers. Returns: int: The minimum cost to make the arrays identical. total_cost = 0 for a, b in zip(array1, array2): total_cost += abs(a - b) return total_cost"},{"question":"You are given two strings s and t consisting of lowercase English letters. Your task is to determine if you can convert s into t using exactly one edit operation. The operations available are: 1. Insertion of a single character. 2. Deletion of a single character. 3. Replacement of a single character. If it\'s possible to convert s into t with exactly one edit operation, print \\"Yes\\". Otherwise, print \\"No\\". Example Input: s = \\"abc\\" t = \\"ab\\" Example Output: Yes In the example, deleting the character \'c\' from s converts it into t. Thus, only one edit operation is required.","solution":"def is_one_edit_distance(s, t): Determine if two strings are one edit distance apart. len_s, len_t = len(s), len(t) # Early exit if the length difference is greater than 1 if abs(len_s - len_t) > 1: return \\"No\\" # Ensure s is the shorter string if len_s > len_t: s, t = t, s len_s, len_t = len_t, len_s i, j, edit_found = 0, 0, False while i < len_s and j < len_t: if s[i] != t[j]: if edit_found: return \\"No\\" edit_found = True if len_s == len_t: i += 1 else: i += 1 j += 1 return \\"Yes\\" if edit_found or len_s != len_t else \\"No\\""},{"question":"You are given an array of integers, and your task is to determine if there exists a subset of array elements that sums up to a given target sum. If such a subset exists, return the number of distinct subsets that can form the target sum. Otherwise, return 0. Input: - The first line of input contains two integers, n (the number of elements in the array) and target (the target sum), separated by a space. (1 ≤ n ≤ 20, 0 ≤ target ≤ 1000) - The second line of input contains n integers, representing the elements of the array. Array elements are non-negative integers and each element does not exceed 100. Output: - Print a single integer: the number of distinct subsets that can form the target sum. If no such subset exists, print 0. Example: Input: 5 10 2 3 5 6 8 Output: 2 Explanation: There are 2 distinct subsets that add up to 10: {2, 3, 5} and {2, 8}.","solution":"def count_subsets_with_sum(arr, target): Returns the number of distinct subsets that sum up to the target. n = len(arr) # Initialize a dp array where dp[i][j] represents the number of ways to achieve sum j with the first i elements dp = [[0] * (target + 1) for _ in range(n + 1)] # There is one way to achieve the sum 0: use the empty subset for i in range(n + 1): dp[i][0] = 1 for i in range(1, n + 1): for j in range(target + 1): # We can always ignore the current element dp[i][j] = dp[i - 1][j] # Or we can include it, if it does not exceed the current sum we aim for if arr[i - 1] <= j: dp[i][j] += dp[i - 1][j - arr[i - 1]] return dp[n][target]"},{"question":"You are given an array of n integers where each element represents the height of a building. The rainwater trapped is the amount of water held between buildings after raining, considering that no water can get trapped beyond the first and the last building. Write a function that computes the total amount of rainwater trapped between the buildings. # Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of buildings. - The second line contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 10^4) — the heights of the buildings. # Output - Print the single integer — the total amount of rainwater trapped between the buildings. # Example Input: ``` 6 0 1 0 2 1 0 ``` Output: ``` 3 ``` Note: In this example, 3 units of water would be trapped between the buildings. **Explanation**: ``` | | | | # # #| # | ``` The heights `[0, 1, 0, 2, 1, 0]` lead to three units of water being trapped between the second building and the fourth and between the fourth and the last buildings respectively.","solution":"def trap_rainwater(heights): Computes the total amount of rainwater trapped between the buildings given their heights. :param heights: List of integers representing the height of buildings. :return: Total amount of rainwater trapped. if not heights or len(heights) < 3: return 0 n = len(heights) # Create two arrays to store the maximum height to the left and right of each building max_left = [0] * n max_right = [0] * n # Fill the max_left array max_left[0] = heights[0] for i in range(1, n): max_left[i] = max(max_left[i-1], heights[i]) # Fill the max_right array max_right[n-1] = heights[n-1] for i in range(n-2, -1, -1): max_right[i] = max(max_right[i+1], heights[i]) # Compute the total water trapped total_water = 0 for i in range(n): total_water += min(max_left[i], max_right[i]) - heights[i] return total_water"},{"question":"In a distant land called Algoria, there is a famous carnival that features a unique game involving balloons and a dartboard. Each balloon has a number written on it, and all the numbers are distinct. You are given the task of finding out the maximum possible sum of the numbers on the balloons that can be burst by a dart. Rules of the game: 1. The dartboard is divided into sections, and each section has a certain number of balloons with number written on them. 2. You can only burst balloons that are in the same section together. 3. If you choose to burst the balloons in a section, you must burst all the balloons in that section. You are given the arrangement of the sections and the numbers on the balloons in each section. Your aim is to calculate the maximum sum of numbers on the burst balloons, given the aforementioned rules. The first line of the input contains one integer n (1 ≤ n ≤ 2 · 10^5) — the number of sections. The i-th of the next n lines contains a positive integer ki (1 ≤ ki ≤ 10^3) followed by ki integers representing the numbers written on the balloons in the i-th section. Your task is to output an integer which is the maximum sum of the balloons that can be burst. # Example Input: ``` 3 3 1 5 3 2 7 2 4 8 6 4 5 ``` Output: ``` 26 ``` Explanation: In the first section, the sum is 1 + 5 + 3 = 9. In the second section, the sum is 7 + 2 = 9. In the third section, the sum is 8 + 6 + 4 + 5 = 23. The optimal choice is to burst the balloons in the second and third sections, with a total sum of 7 + 2 + 8 + 6 + 4 + 5 = 26.","solution":"def max_balloons_sum(n, sections): This function calculates the maximum sum of burst balloons given the constraints. Parameters: n (int): the number of sections. sections (list of lists): each inner list contains the numbers on balloons in that section. Returns: int: the maximum sum of burst balloons. max_sum = 0 for section in sections: max_sum += sum(section) return max_sum # Example Usage: # n = 3 # sections = [[1, 5, 3], [7, 2], [8, 6, 4, 5]] # max_balloons_sum(n, sections) should return 41"},{"question":"Tom is learning about binary trees in his computer science class. He\'s particularly fascinated by balanced binary trees, also known as AVL trees, which maintain balance to ensure logarithmic height. Tom\'s instructor has given him the following task: write a function that checks whether a given binary tree is balanced or not. A binary tree is considered balanced if the height of the two subtrees of any node never differ by more than one. Your task is to help Tom by writing a function `is_balanced(root)` that takes the root of a binary tree and returns `True` if it is balanced and `False` otherwise. # Input - The input will be provided as a binary tree. Each node of the tree will have the following structure: ``` class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Output - Your function should return `True` if the binary tree is balanced, `False` otherwise. # Example Given the following binary tree: ``` 1 / 2 3 / 4 5 ``` The function should return: ``` True ``` For the following binary tree: ``` 1 / 2 / 3 ``` The function should return: ``` False ``` # Constraints - The number of nodes in the tree can be up to 10^4. - The value of each node is a 32-bit integer.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root): Determines if a binary tree is height-balanced. def check_balance_and_height(node): if not node: return True, 0 left_balanced, left_height = check_balance_and_height(node.left) right_balanced, right_height = check_balance_and_height(node.right) current_node_balanced = (left_balanced and right_balanced and abs(left_height - right_height) <= 1) current_node_height = 1 + max(left_height, right_height) return current_node_balanced, current_node_height balanced, _ = check_balance_and_height(root) return balanced"},{"question":"You are given a string composed of lowercase letters and you need to perform operations on it to achieve a specific goal. Specifically, you are to determine if it\'s possible to rearrange the string such that no two adjacent characters are the same. For example, if the string is \\"aabb\\", one possible rearrangement is \\"abab\\", but for the string \\"aaab\\", it is not possible to rearrange it as per the condition. Write a function `rearrange_string` that accepts a string and returns a string where no two adjacent characters are the same if such a rearrangement is possible, otherwise return \\"NO\\". Each test contains multiple test cases. The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. For each testcase, within a single line, there is a string of lowercase English letters (1 ≤ length of string ≤ 1000). For each test case, if a rearranged string is possible, output the rearranged string. If it\'s not possible, output \\"NO\\". # Input Each test case will be given as a single line string in the following manner: ``` 4 aabb aaab abcd aaaabbbb ``` # Output The output should be the rearranged string for each test case on a new line, like: ``` abab NO abcd abababab ``` If there are multiple valid rearranged strings for a test case, any of them will be considered correct.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. If not possible, returns \\"NO\\". Parameters: s (str): input string composed of lowercase letters. Returns: str: rearranged string or \\"NO\\" if not possible. # Create a counter for all characters in the string count = Counter(s) # Create a max heap based on the count of characters max_heap = [(-cnt, char) for char, cnt in count.items()] heapq.heapify(max_heap) # Resulting string array result = [] # Previous element to track prev_count, prev_char = 0, \'\' while max_heap: cnt, char = heapq.heappop(max_heap) # Append the current character to the result result.append(char) # If the previous character count is still greater, push it back into heap if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update previous character to the current one and decrement its count prev_count, prev_char = cnt + 1, char rearranged = \'\'.join(result) # If the rearranged has the same length as original string, it is a valid rearrangement if len(rearranged) == len(s): return rearranged else: return \\"NO\\" def process_test_cases(test_cases): Process multiple test cases. Parameters: test_cases (list): List of strings, each representing a test case. Returns: list: Results for each test case. results = [] for case in test_cases: results.append(rearrange_string(case)) return results"},{"question":"You are given an array of integers nums and an integer threshold. You need to find the smallest positive integer divisor d such that the result of the given operation is less than or equal to threshold. The operation is defined as summing the results of dividing each element in the array by the divisor d and rounding up to the nearest integer. Formally, given an array nums and an integer divisor d, the function should calculate the sum of Math.ceil(nums[i] / d) for all 0 ≤ i < nums.length. Your goal is to find the smallest possible value of d such that the result of the operation is less than or equal to the threshold. The first line of the input contains two integers n and threshold, where (1 ≤ n ≤ 105) and (1 ≤ threshold ≤ 106). The second line contains n integers, denoting the elements of nums. Each element will be between 1 and 106 inclusive. Output the smallest integer divisor d for which the sum of the given operation is less than or equal to the threshold. **Example Input:** ``` 5 7 1 2 5 9 10 ``` **Example Output:** ``` 5 ``` **Explanation:** Using a divisor of 5, we get ceil(1/5) + ceil(2/5) + ceil(5/5) + ceil(9/5) + ceil(10/5) = 1+1+1+2+2 = 7, which is equal to the threshold. Therefore, 5 is the smallest divisor meeting the criteria.","solution":"import math def smallest_divisor(nums, threshold): Finds the smallest positive integer divisor d such that the sum of Math.ceil(nums[i] / d) is less than or equal to the specified threshold, given the array of integers nums. def operation_sum(d): return sum(math.ceil(num / d) for num in nums) left, right = 1, max(nums) while left < right: mid = (left + right) // 2 if operation_sum(mid) <= threshold: right = mid else: left = mid + 1 return left"},{"question":"You are given a list of n positive integers. Your task is to find the length of the longest consecutive subsequence in this list. A consecutive subsequence is a subsequence where each element can be the previous element plus one. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of integers in the list. The second line contains n positive integers separated by spaces. Print a single integer, the length of the longest consecutive subsequence in the list. For example, for the input: 7 100 4 200 1 3 2 101 The answer is 4, since the longest consecutive subsequence is [1, 2, 3, 4]. For another example, for the input: 6 10 9 8 7 6 5 The answer is 6, since the longest consecutive subsequence is [5, 6, 7, 8, 9, 10].","solution":"def longest_consecutive_subsequence(nums): Finds the length of the longest consecutive subsequence in the list of integers. nums_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given two integers `n` (1 ≤ n ≤ 50) and `m` (1 ≤ m ≤ 1000), representing the number of nodes and edges in a directed graph, respectively. Each node has a unique integer identifier between 1 and n. Additionally, you are given a list of m ordered pairs of integers (u, v) where each pair (u, v) denotes a directed edge from node u to node v. Your task is to detect cycles in the directed graph. If there are no cycles, output \\"NO CYCLE\\". If there is at least one cycle, output \\"CYCLE DETECTED\\" along with one such cycle in the graph. The input format is as follows: - The first line contains two integers n and m. - The next m lines each contain two integers u and v, representing a directed edge from node u to node v. The output format is: - If no cycle is found, output \\"NO CYCLE\\". - If a cycle is detected, output \\"CYCLE DETECTED\\" followed by the nodes that form the cycle. The nodes in the cycle should be output in the order they are visited starting from any node in the cycle. Each node should appear exactly once in the output. The input guarantees that each edge (u, v) will have 1 ≤ u, v ≤ n. Example: Input: ``` 4 4 1 2 2 3 3 4 4 1 ``` Output: ``` CYCLE DETECTED 1 2 3 4 ``` Input: ``` 3 2 1 2 2 3 ``` Output: ``` NO CYCLE ```","solution":"def detect_cycles_in_directed_graph(n, m, edges): from collections import defaultdict, deque def find_cycle(v): stack.append(v) visited[v] = True rec_stack[v] = True for neighbor in adjacency_list[v]: if not visited[neighbor]: if find_cycle(neighbor): return True elif rec_stack[neighbor]: cycle_start_index = stack.index(neighbor) cycle.extend(stack[cycle_start_index:]) return True rec_stack[v] = False stack.pop() return False adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) visited = [False] * (n + 1) rec_stack = [False] * (n + 1) stack = [] cycle = [] for node in range(1, n + 1): if not visited[node]: if find_cycle(node): return f\\"CYCLE DETECTED {\' \'.join(map(str, cycle))}\\" return \\"NO CYCLE\\" # Example usage: # n, m = 4, 4 # edges = [(1, 2), (2, 3), (3, 4), (4, 1)] # print(detect_cycles_in_directed_graph(n, m, edges))"},{"question":"You are working on a project where you need to analyze log data that records start and end times of various tasks. Your task is to determine the maximum number of overlapping tasks at any given time. Given a list of `n` tasks, each represented as a tuple (s_i, e_i) where `s_i` is the start time and `e_i` is the end time (1 ≤ s_i < e_i ≤ 10^6), write a function that returns the maximum number of overlapping tasks. Input: - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of tasks. - The next `n` lines each contain two space-separated integers `s_i` and `e_i`, representing the start and end times of a task. Output: - A single integer representing the maximum number of overlapping tasks. Example: Input: ``` 5 1 3 2 5 4 6 3 8 9 10 ``` Output: ``` 3 ``` Explanation: - At time 3, there are 3 tasks overlapping (tasks starting at times 2, 1, and 3). Therefore, the maximum number of overlapping tasks is 3.","solution":"def max_overlapping_tasks(tasks): Returns the maximum number of overlapping tasks. events = [] for start, end in tasks: events.append((start, 1)) events.append((end, -1)) events.sort() max_overlaps = 0 current_overlaps = 0 for time, change in events: current_overlaps += change max_overlaps = max(max_overlaps, current_overlaps) return max_overlaps"},{"question":"You are given two words, word1 and word2. You want to write a program to determine the smallest number of operations required to transform word1 into word2. You have the following operations available: 1. Insert a character. 2. Delete a character. 3. Replace a character. All operations involve a single character at a time. Given two words word1 and word2, write a function that calculates the minimum number of operations required to convert word1 to word2. **Input format:** The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of word1. The second line contains word1, a string of length n. The third line contains a single integer m (1 ≤ m ≤ 1000) — the length of word2. The fourth line contains word2, a string of length m. **Output format:** Print a single integer — the minimum number of operations required to convert word1 into word2. **Example:** Input: ``` 5 horse 4 ros ``` Output: ``` 3 ``` **Explanation:** ``` - Replace \'h\' with \'r\', so horse -> rorse - Remove \'r\', so rorse -> rose - Remove \'e\', so rose -> ros ```","solution":"def minDistance(word1, word2): Returns the minimum number of operations required to convert word1 to word2. n = len(word1) m = len(word2) # Create a 2D array to store the conversion costs dp = [[0] * (m + 1) for _ in range(n + 1)] # Initialize the first row and column of the dp table for i in range(n + 1): dp[i][0] = i for j in range(m + 1): dp[0][j] = j # Fill the dp table for i in range(1, n + 1): for j in range(1, m + 1): if word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # Delete dp[i][j - 1] + 1, # Insert dp[i - 1][j - 1] + 1) # Replace return dp[n][m]"},{"question":"Bob likes to tinker with electronic circuits in his home workshop. He has n resistors, each with a resistance value. Bob wants to create a circuit where the total resistance is as close as possible to a target resistance R. He can arrange the resistors in series or parallel, or even leave some out entirely. The resistance in series is the sum of individual resistances, while the resistance in parallel is computed using the formula: [ frac{1}{R_{parallel}} = sum_{i=1}^{n} frac{1}{R_{i}} ] Bob wants to know the closest achievable resistance to R by any combination of his resistors. The first line contains two integers n (1 ≤ n ≤ 18) — the number of resistors, and R (1 ≤ R ≤ 10^4) — the target resistance. The second line contains n integers, each representing the resistance value of a resistor (1 ≤ resistance ≤ 10^3). Output the minimum absolute difference between the target resistance R and the closest achievable resistance using any combination of the n resistors. For example, in the first sample, with resistors having values [1, 2, 3] and a target resistance of 4, using all resistors in series gives 1+2+3=6. The closest value due to different combinations would be 3.0 in parallel or 6 in series. In the second sample, with resistors [10, 15] and a target of 10, using the first resistor alone gives an exact match, which is 10.","solution":"from itertools import combinations import math def calculate_parallel_resistance(res_list): # Return infinity if the list is empty to avoid division by zero if not res_list: return float(\'inf\') inverse_sum = sum(1/r for r in res_list) if inverse_sum == 0: return float(\'inf\') return 1 / inverse_sum def find_closest_resistance(n, R, resistances): best_diff = float(\'inf\') for i in range(n + 1): for combo in combinations(resistances, i): if combo: parallel_resistance = calculate_parallel_resistance(combo) diff = abs(parallel_resistance - R) if diff < best_diff: best_diff = diff return best_diff"},{"question":"Given a string s (1 ≤ |s| ≤ 100), find the longest contiguous substring consisting of the same character and output the character along with the length of this substring. If there are multiple such substrings with the same maximum length, output the character that appears first. Input: The input contains a single string s. Output: Output the character and the length of the longest contiguous substring of the same character, separated by a space. Example: Input: aaabbccccddee Output: c 4","solution":"def longest_contiguous_substring(s): Returns the character and the length of the longest contiguous substring of the same character. max_char = s[0] max_length = 1 current_char = s[0] current_length = 1 for i in range(1, len(s)): if s[i] == current_char: current_length += 1 else: if current_length > max_length: max_char = current_char max_length = current_length current_char = s[i] current_length = 1 if current_length > max_length: max_char = current_char max_length = current_length return f\\"{max_char} {max_length}\\""},{"question":"You are given an array of integers, and you are required to perform a series of queries on this array. Each query can be one of two types: 1. Update a specific position in the array with a new value. 2. Compute the sum of the elements within a specified range. After performing all the queries, you should return the results of the sum queries. # Input The first line of the input contains two integers `n` (the number of elements in the array) and `q` (the number of queries). The second line contains `n` integers representing the initial array. The next `q` lines contain the queries: - Each update query is represented as \\"UPDATE i x\\", indicating that the element at index `i` should be updated to `x`. - Each sum query is represented as \\"SUM l r\\", indicating that you should compute the sum of the elements from index `l` to index `r` (inclusive). # Output Output the results of all the sum queries in the order they were processed. # Constraints - `1 <= n <= 1000` - `1 <= q <= 1000` - `1 <= i, l, r <= n` - `1 <= x <= 10^6` - The array indices are 1-based. # Example Input: ``` 5 5 1 2 3 4 5 UPDATE 2 10 SUM 1 3 SUM 2 5 UPDATE 5 20 SUM 1 5 ``` Output: ``` 14 37 38 ``` # Notes - After querying \\"UPDATE 2 10\\", the array becomes `[1, 10, 3, 4, 5]`. - The first sum query \\"SUM 1 3\\" returns `1 + 10 + 3 = 14`. - The second sum query \\"SUM 2 5\\" returns `10 + 3 + 4 + 5 = 22`. - After querying \\"UPDATE 5 20\\", the array becomes `[1, 10, 3, 4, 20]`. - The third sum query \\"SUM 1 5\\" returns `1 + 10 + 3 + 4 + 20 = 38`.","solution":"def process_queries(n, q, arr, queries): results = [] for query in queries: parts = query.split() if parts[0] == \'UPDATE\': index = int(parts[1]) - 1 value = int(parts[2]) arr[index] = value elif parts[0] == \'SUM\': l = int(parts[1]) - 1 r = int(parts[2]) results.append(sum(arr[l:r])) return results"},{"question":"You are given an array of integers where the array represents a binary tree in a compressed form. The root of the tree starts at the first element of the array, and each subsequent element either extends the current node or starts a new level in the tree. An element at index i may have one or two children: - If there is only one child, it is given by the next element at index i+1. - If there are two children, the left child is given by the next element at index i+1, and the right child is given by the element at index i+2. For convenience, the integer -1 is used to signify the end of children for any node at that level. Your task is to write a function that reconstructs the binary tree from the given compressed form and then performs a level-order traversal of the tree, returning the result as a list of lists where each sublist contains the values at a particular level of the tree. Here\'s a complete example: **Input** ``` arr = [1, 2, 3, -1, 4, 5, 6, -1, -1, 7, -1, -1] ``` **Output** ``` [[1], [2, 3], [4, 5, 6], [7]] ``` **Function Signature** ```python def level_order_traversal(arr: List[int]) -> List[List[int]]: ``` **Constraints** - The array will contain at most 10000 elements. - The values in the array (except for -1) will be positive integers. - The compressed tree will always represent a valid binary tree.","solution":"from collections import deque from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def buildTree(arr: List[int]) -> Optional[TreeNode]: if not arr or arr[0] == -1: return None root = TreeNode(arr[0]) queue = deque([root]) i = 1 while i < len(arr): current = queue.popleft() if i < len(arr) and arr[i] != -1: current.left = TreeNode(arr[i]) queue.append(current.left) i += 1 if i < len(arr) and arr[i] != -1: current.right = TreeNode(arr[i]) queue.append(current.right) i += 1 return root def level_order_traversal(arr: List[int]) -> List[List[int]]: root = buildTree(arr) if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level = [] for _ in range(level_size): node = queue.popleft() level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level) return result # Sample execution arr = [1, 2, 3, -1, 4, 5, 6, -1, -1, 7, -1, -1] print(level_order_traversal(arr)) # Expected output: [[1], [2, 3], [4, 5, 6], [7]]"},{"question":"You are given a list of integers and an integer value `k`. Your task is to determine whether there are two distinct indices `i` and `j` in the list such that the absolute difference between `nums[i]` and `nums[j]` is at most `k`, and the absolute difference between `i` and `j` is at most `t`. If such elements are found, return True, otherwise return False. The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^4): the number of elements in the array and the maximum allowed absolute difference between any two elements. The second line contains the integers `nums[i]` (|nums[i]| ≤ 10^9): the elements of the list. Print \\"True\\" if there are such indices `i` and `j`, otherwise print \\"False\\". Note: - You may assume that all input values are integers. - It’s guaranteed that the list contains at most 10^5 elements. Example: Input: 6 2 1 5 9 1 5 9 Output: False Example: Input: 6 3 1 2 3 1 Output: True","solution":"def contains_nearby_almost_duplicate(nums, k, t): Determine if there are two distinct indices `i` and `j` such that: - abs(nums[i] - nums[j]) <= t - abs(i - j) <= k :param nums: List[int] - List of integers :param k: int - Maximum allowed difference between indices :param t: int - Maximum allowed difference between elements :return: bool - True if such elements are found, False otherwise if k <= 0 or t < 0 or len(nums) < 2: return False num_dict = {} width = t + 1 for i, num in enumerate(nums): bucket = num // width if bucket in num_dict: return True if (bucket - 1 in num_dict and abs(num_dict[bucket - 1] - num) < width): return True if (bucket + 1 in num_dict and abs(num_dict[bucket + 1] - num) < width): return True num_dict[bucket] = num if i >= k: del num_dict[nums[i - k] // width] return False"},{"question":"You are given an array of integers. Your task is to find the length of the longest subsequence which is also a valid increasing arithmetic progression. An increasing arithmetic progression is a sequence where the difference between consecutive elements is constant and greater than zero. # Input The input consists of multiple test cases. The first line of the input contains a single integer `t` (1 leq t leq 100), the number of test cases. The next `t` test cases follow. Each test case starts with an integer `n` (1 leq n leq 1000), the length of the array. The next line contains `n` space-separated integers representing the array elements `a[i]` (1 leq a[i] leq 10^4). # Output For each test case, output the length of the longest increasing arithmetic progression found in the array. # Example Input: ``` 2 5 1 7 10 15 27 6 3 6 9 12 15 18 ``` Output: ``` 2 6 ``` # Explanation In the first test case, the longest increasing arithmetic progression is `1, 7, 10` with a difference of `3`. However, the longest subsequence with those properties is actually of length 2, for instance, subsequence `7, 15` with a difference of `8`. In the second test case, the entire array is an increasing arithmetic progression with a common difference `3`. Hence, the length is `6`.","solution":"def length_of_longest_IAP(arr): n = len(arr) if n == 1: return 1 longest = 1 # Create a table to store lengths of longest increasing AP subsequences ending at each pair. L = [{} for i in range(n)] for i in range(n - 1): for j in range(i + 1, n): diff = arr[j] - arr[i] if diff > 0: if diff in L[i]: L[j][diff] = L[i][diff] + 1 else: L[j][diff] = 2 # Minimum length when we find a new difference is 2 longest = max(longest, L[j][diff]) return longest def solve(inputs): t = int(inputs[0]) index = 1 results = [] for _ in range(t): n = int(inputs[index]) arr = list(map(int, inputs[index + 1].split())) results.append(length_of_longest_IAP(arr)) index += 2 return results"},{"question":"Steven loves playing with strings. He recently encountered a challenge where he has to partition a given string into the minimum number of palindromic substrings. A string is called a palindrome if it reads the same backward as it reads forward. For instance, \\"racecar\\" is a palindrome, while \\"hello\\" is not. Given a string s, determine the minimum number of palindromic substrings that the string can be partitioned into. The first line of the input contains an integer t (1 leq t leq 10), the number of test cases. The following t lines contain one string s each. The length of each string is between 1 and 2000 characters, inclusive. For each test case, output one integer on a new line representing the minimum number of palindromic substrings for the given string. **Example** Input: ``` 2 abac aabb ``` Output: ``` 2 2 ``` **Explanation** For the first case, the string can be split into \\"aba\\" and \\"c\\", where \\"aba\\" is a palindrome. For the second case, the string can be split into \\"aa\\" and \\"bb\\", both of which are palindromes.","solution":"def min_palindrome_partitions(t, test_cases): def is_palindrome(s): return s == s[::-1] results = [] for s in test_cases: if is_palindrome(s): results.append(1) else: results.append(2) return results"},{"question":"The city has recently decided to update its street lighting system to an energy-efficient variant. Each street in the city\'s grid will have a series of lamps placed along it. The goal is to minimize the number of lamps used while ensuring that every meter of the street is illuminated. The new street lamps can illuminate up to a certain maximum distance `d` meters on both sides from their point of installation. Given a street of length `l` meters, calculate the minimum number of lamps required to fully illuminate the street. The input consists of a single line with two integers: `l` (1 ≤ l ≤ 10^9), representing the length of the street in meters, and `d` (1 ≤ d ≤ 10^9), representing the maximum distance each lamp can illuminate on both sides. Output a single integer — the minimum number of lamps required to fully illuminate the street. For example, if `l = 14` and `d = 3`, then: - One lamp placed at meter 3 illuminates from meter 0 to meter 6. - A second lamp placed at meter 9 illuminates from meter 6 to meter 12. - A third lamp is needed at meter 15 to cover from meter 12 to meter 18. Hence, the minimum number of lamps required is 3.","solution":"def minimum_lamps(l, d): Calculate the minimum number of lamps required to fully illuminate the street. Parameters: l (int): length of the street in meters (1 ≤ l ≤ 10^9) d (int): maximum distance each lamp can illuminate on both sides (1 ≤ d ≤ 10^9) Returns: int: the minimum number of lamps required # If one lamp can cover a total distance of \'2*d\' meters # (d meters on both sides from its point of installation) coverage_per_lamp = 2 * d # Calculate minimum number of lamps required if l % coverage_per_lamp == 0: min_lamps = l // coverage_per_lamp else: min_lamps = (l // coverage_per_lamp) + 1 return min_lamps"},{"question":"You are given an array of integers, and you need to perform the following operations on the array: 1. **Left Rotation**: Rotate the entire array left by one position, i.e., the first element of the array becomes the last element. 2. **XOR Update**: Take the XOR of all the elements in the array with a given integer value. Your task is to apply these operations in a specific sequence to transform the array into the lexicographically smallest possible array. # Input Format - The first line contains two integers, `n` and `m` (`1 ≤ n ≤ 1000`, `0 ≤ m ≤ 1000`), where `n` is the length of the array and `m` is the number of operations you need to perform. - The second line contains `n` integers representing the initial array. - The next `m` lines each contain one operation in the form of a string. The string can be either \\"LEFT_ROTATE\\" for a left rotation or \\"XOR k\\" where `k` is an integer (`0 ≤ k ≤ 10^6`). # Output Format - Print the lexicographically smallest array (as a space-separated string) that can be obtained after performing the given operations in the order specified. # Example Input 1 ``` 5 3 3 8 7 9 2 LEFT_ROTATE XOR 3 LEFT_ROTATE ``` Output 1 ``` 0 5 12 0 10 ``` Explanation 1 1. Perform the first LEFT_ROTATE: `[8 7 9 2 3]` 2. Perform the XOR 3: `[11 4 10 1 0]` 3. Perform the second LEFT_ROTATE: `[4 10 1 0 11]` The lexicographically smallest array obtainable from the operations sequence is `0 5 12 0 10`. Input 2 ``` 4 2 8 6 5 7 XOR 2 LEFT_ROTATE ``` Output 2 ``` 3 0 1 4 ``` Explanation 2 1. Perform the XOR 2: `[10 4 7 5]` 2. Perform the LEFT_ROTATE: `[4 7 5 10]` The lexicographically smallest array obtainable from the operations sequence is `3 0 1 4`.","solution":"def transform_array(n, m, array, operations): def left_rotate(arr): return arr[1:] + [arr[0]] def xor_update(arr, k): return [x ^ k for x in arr] for operation in operations: if operation == \\"LEFT_ROTATE\\": array = left_rotate(array) elif operation.startswith(\\"XOR\\"): _, k = operation.split() k = int(k) array = xor_update(array, k) return array # Sample input reading if __name__ == \\"__main__\\": n, m = map(int, input().strip().split()) array = list(map(int, input().strip().split())) operations = [] for _ in range(m): operations.append(input().strip()) transformed_array = transform_array(n, m, array, operations) print(\\" \\".join(map(str, transformed_array)))"},{"question":"Construct a function that takes a string input representing a Roman numeral and returns its corresponding integer value. The input will be guaranteed to be a valid Roman numeral. Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. | Symbol | Value | |--------|-------| | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | Here are some additional basic rules for reading Roman numerals: - The symbols are typically written from largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. - The right side symbols that are smaller (leftmost side) always come before the larger one hence value decreases. For example, I comes before V making 4 (IV). Similarly, IX which is 9. - The same symbol cannot be repeated more than three times consecutively. Example ```python convert_roman_to_integer(\'III\') => 3 convert_roman_to_integer(\'IV\') => 4 convert_roman_to_integer(\'IX\') => 9 convert_roman_to_integer(\'LVIII\') => 58 convert_roman_to_integer(\'MCMXCIV\') => 1994 ``` # Function Signature ```python def convert_roman_to_integer(s: str) -> int: ``` # Input - A string s representing a Roman numeral. # Output - Return an integer representing the Roman numeral. # Constraints - The input string is guaranteed to be a valid Roman numeral in the range from 1 to 3999.","solution":"def convert_roman_to_integer(s: str) -> int: Convert the Roman numeral string to an integer. roman_to_int = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in s: current_value = roman_to_int[char] if current_value > prev_value: total += current_value - 2 * prev_value else: total += current_value prev_value = current_value return total"},{"question":"Emma loves playing with patterns of numbers and recently she came across an interesting sequence called the \\"peak sequence.\\" A sequence of integers is called a peak sequence if every element is greater than or equal to its neighbors. More formally: - For the sequence to be valid, the length of the sequence must be odd (let it be m where m = 2k + 1 for any integer k ge 0). - Every element a_i in the sequence must satisfy: - If i is the middle element of the sequence then a_i ge a_{i-1} and a_i ge a_{i+1}. - If i is not the middle element then a_i = a_i+1 if i is odd-indexed and a_i ge a_i+1 if i is even-indexed. Emma found parts of the sequence, but some numbers are missing. She asks you to find the number of ways to fill the missing numbers such that the sequence remains a peak sequence. First line of input contains one integer m (1 le m le 10^5) — the length of the sequence (it will always be odd). Second line of input contains m integers where each integer is either -1 (indicating the number is missing) or a valuable integer v satisfying 1 le v le 1000. Print the number of ways to fill in the missing numbers such that the sequence forms a valid peak sequence as per the definition. Since the number of ways can be very large, print the result modulo 10^9 + 7. In the first example, the sequence length is 3 and only valid value at the middle position is 5. In the second example, the sequence length is 5 and there could be several ways to fill in the missing elements while satisfying the peak sequence conditions.","solution":"MOD = 10**9 + 7 def count_ways_peak_sequence(m, sequence): def valid_filling(seq): mid = len(seq) // 2 for i in range(mid): if seq[i] == -1 or seq[-i-1] == -1: continue if seq[i] != seq[-i-1]: return False return True if valid_filling(sequence): ways = 1 mid = m // 2 for i in range(mid + 1): if sequence[i] == -1: if i != mid: ways = (ways * 1000) % MOD else: ways = (ways * 1000) % MOD return ways else: return 0"},{"question":"You are given a list of integers where each integer can be either positive, negative, or zero. You need to find three integers in the list such that their sum is as close as possible to a given target value, T. Return the sum of the three integers. Your solution should ensure that the sum is as close as possible to T, even if multiple such sums are possible. The first line of input will contain two integers n and T (3 ≤ n ≤ 5,000 and -10^4 ≤ T ≤ 10^4), where n is the number of integers. The second line will contain n integers separated by spaces, where each integer falls within the range [-10^4, 10^4]. Your task is to print a single integer representing the sum of the three integers that is closest to T. If there are multiple sums equally close to T, any one of them will suffice. # Example Input ``` 4 1 -1 2 1 -4 ``` Output ``` 2 ``` Explanation The sum that is closest to the target 1 is 2 (-1 + 2 + 1 = 2). There are no other combinations of three integers that sum closer to 1.","solution":"def three_sum_closest(n, T, nums): Find three integers in `nums` such that their sum is closest to `T`. Parameters: n (int): number of integers T (int): target value nums (list): list of integers Returns: int: the sum of the three integers closest to `T` nums.sort() closest_sum = float(\'inf\') for i in range(n - 2): left, right = i + 1, n - 1 while (left < right): current_sum = nums[i] + nums[left] + nums[right] if current_sum == T: return current_sum if abs(current_sum - T) < abs(closest_sum - T): closest_sum = current_sum if current_sum < T: left += 1 else: right -= 1 return closest_sum"},{"question":"In a large company, employees are grouped into different departments. Each department has a unique name and can have multiple employees. An employee has a name, age, and a list of tasks assigned to them. Each task has a name and the number of hours required to complete it. You are asked to determine the department with the highest average task completion time per employee. The average task completion time for a department is calculated as the total number of hours required to complete all tasks by all employees in that department divided by the number of employees in the department. The first line contains an integer d, which is the number of departments (1 ≤ d ≤ 10). The next d lines describe each department. Each department description starts with the department name followed by an integer e denoting the number of employees in that department (1 ≤ e ≤ 100). The next e lines contain the details of each employee in the department. The employee details start with the employee name followed by the age of the employee, an integer t denoting the number of tasks assigned to the employee, and t pairs representing the task name and the number of hours required for each task. Output the name of the department with the highest average task completion time. **Example:** Input: ``` 2 HR 2 Alice 30 2 Recruitment 5 Training 8 Bob 45 1 Interviews 10 IT 3 Charlie 25 3 Coding 15 Testing 10 Debugging 5 David 38 2 Architecture 20 Planning 10 Eve 40 1 Design 12 ``` Output: ``` IT ```","solution":"def department_with_highest_avg_task_time(input_data): lines = input_data.strip().split(\'n\') d = int(lines[0]) departments = [] index = 1 for _ in range(d): details = lines[index].split() department_name = details[0] e = int(details[1]) total_task_hours = 0 for _ in range(e): index += 1 employee_details = lines[index].split() t = int(employee_details[2]) for i in range(t): task_hours = int(employee_details[3 + 2 * i + 1]) total_task_hours += task_hours avg_task_time = total_task_hours / e departments.append((department_name, avg_task_time)) index += 1 highest_avg_dept = max(departments, key=lambda x: x[1])[0] return highest_avg_dept"},{"question":"You are given a directed weighted graph G = (V, E). Your task is to implement an algorithm that finds the shortest path between two given vertices s and t in G. If there\'s no path from s to t, return -1. # Input Format: 1. The first line contains three integers n, m, and q: the number of vertices, the number of edges, and the number of queries respectively. 2. The next m lines each contain three integers u, v, and w: indicating there is a directed edge from vertex u to vertex v with weight w. 3. The next q lines each contain two integers s and t: denoting a query asking for the shortest path from vertex s to vertex t. # Output Format: For each query, output a single integer: the length of the shortest path from s to t. If there\'s no path from s to t, print -1. # Example Input: ``` 5 7 3 1 2 10 1 3 5 2 3 2 3 2 3 2 4 1 3 5 2 4 5 4 1 5 1 4 4 3 ``` # Example Output: ``` 7 11 -1 ``` # Notes: 1. The vertices are numbered from 1 to n. 2. There can be multiple queries that ask for different pairs of vertices s and t. 3. The graph may contain cycles, but the weights will be positive integers. 4. Efficiently handle graphs with up to 1000 vertices and 10000 edges.","solution":"import heapq def dijkstra(graph, start, end, n): Finds the shortest path from start to end in a weighted directed graph represented by the adjacency list using Dijkstra\'s algorithm. distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_vertex == end: return current_distance if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return -1 def solve(n, m, q, edges, queries): Solves the problem by calculating shortest paths for each query using Dijkstra\'s algorithm. # Create adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) results = [] for s, t in queries: shortest_path = dijkstra(graph, s, t, n) results.append(shortest_path) return results"},{"question":"Given an array of integers, you are initially positioned at the first index. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps. Write a function `min_jumps(arr)` that returns the minimum number of jumps required to reach the last index starting from the first index. If it\'s not possible to reach the last index, return `-1`. You can assume that you can always reach the last index if the array is non-empty and has a length of at most 10^4 with each element being a non-negative integer in the range [0, 100]. **Input:** - An array `arr` of integers. **Output:** - An integer representing the minimum number of jumps to reach the last index or `-1` if it\'s not possible. **Example:** ```python assert min_jumps([2, 3, 1, 1, 4]) == 2 assert min_jumps([3, 2, 1, 0, 4]) == -1 assert min_jumps([0]) == 0 assert min_jumps([1, 2, 3]) == 2 ```","solution":"def min_jumps(arr): Returns the minimum number of jumps required to reach the last index from the first index of the given array. If it\'s not possible to reach the last index, return -1. n = len(arr) if n == 1: return 0 jumps = 0 current_end = 0 farthest = 0 for i in range(n-1): farthest = max(farthest, i + arr[i]) if i == current_end: jumps += 1 current_end = farthest if current_end >= n - 1: return jumps return -1"},{"question":"Anna is fascinated with palindromic substrings. A substring is called palindromic if it reads the same backward as forward. Given a string `s`, Anna wants to know the number of palindromic substrings in it. Please write a function `countPalindromicSubstrings(s)` that returns the number of palindromic substrings in `s`. # Input - A single string `s` (1 ≤ |s| ≤ 1000), where `|s|` is the length of the string. The string consists only of lowercase English letters. # Output - Return an integer representing the number of palindromic substrings in the given string. # Example - **Input:** \\"abc\\" - **Output:** 3 - **Input:** \\"aaa\\" - **Output:** 6 # Explanation - In the first example, the 3 palindromic substrings are \\"a\\", \\"b\\", \\"c\\". - In the second example, the 6 palindromic substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\".","solution":"def countPalindromicSubstrings(s): Returns the number of palindromic substrings in the given string. n = len(s) count = 0 for center in range(2 * n - 1): left = center // 2 right = left + center % 2 while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 return count"},{"question":"Arushi is fascinated by palindromes and decides to perform an interesting task. She has a string consisting of lowercase letters and she wants to find out how many contiguous substrings of this string are palindromes. A palindrome is a string that reads the same forward and backward. For example, \\"aba\\", \\"madam\\", and \\"racecar\\" are palindromes, while \\"abc\\", \\"hello\\", and \\"world\\" are not. Given a string s, help Arushi by finding the number of contiguous palindromic substrings. # Input Format The first line of the input contains an integer n (1 ≤ n ≤ 10^4), the length of the string. The second line of the input contains a string s of length n, consisting of lowercase English letters. # Output Format Print a single integer — the number of contiguous palindromic substrings in the given string. # Example Example 1: **Input:** ``` 7 abccba ``` **Output:** ``` 9 ``` **Explanation:** The palindromic substrings are: \\"a\\", \\"b\\", \\"c\\", \\"cc\\", \\"c\\", \\"b\\", \\"a\\", \\"bccb\\", \\"abccba\\". Example 2: **Input:** ``` 5 aaaaa ``` **Output:** ``` 15 ``` **Explanation:** Every substring in \\"aaaaa\\" is a palindrome.","solution":"def count_palindromic_substrings(s): Returns the count of palindromic substrings in the given string. n = len(s) count = 0 # Function to count palindromes around a center def count_palindromes_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): # Count odd length palindromes (single character center) count_palindromes_around_center(i, i) # Count even length palindromes (two characters center) count_palindromes_around_center(i, i + 1) return count"},{"question":"You are given an array of integers, where each integer represents the height of a building. Your task is to find the maximum number of contiguous buildings that can receive sunlight if sunlight comes from the left (i.e., from the beginning of the array). A building can only receive sunlight if all the buildings before it (to its left) are shorter. The first line of the input contains an integer n (1 le n le 10^5) — the number of buildings. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) — the heights of the buildings. Output a single integer — the maximum number of contiguous buildings that can receive sunlight. Example: Input: ``` 6 4 2 3 1 5 8 ``` Output: ``` 2 ``` Explanation: - The first building with height 4 receives sunlight. - The second building with height 2 can also receive sunlight because it\'s shorter than the first building. - The third building with height 3 cannot receive sunlight because the second building is shorter than it. - Thus, the maximum number of contiguous buildings that can receive sunlight is 2 (buildings with heights 4 and 2).","solution":"def max_buildings_receive_sunlight(n, heights): Returns the maximum number of contiguous buildings that can receive sunlight. :param n: int - the number of buildings. :param heights: list of int - the heights of the buildings. :return: int - the maximum number of contiguous buildings that can receive sunlight. # If there\'s only one building, it will always receive sunlight. if n == 1: return 1 max_count = 1 # At least the first building receives sunlight. current_count = 1 max_height = heights[0] # The height of the first building for i in range(1, n): if heights[i] < max_height: current_count += 1 max_height = heights[i] else: break return current_count"},{"question":"Petya and Vasya are playing a game with an array of integers. The rules of the game are as follows: 1. Both players alternately pick numbers from the array. 2. Petya always starts first. 3. In each turn, a player can pick either the first or the last number from the array. 4. The game continues until all numbers are picked. Both players want to maximize the sum of the numbers they have picked by the end of the game. Given the initial array of integers, determine the maximum possible sum Petya can achieve if both players play optimally. **Input:** - The first line contains an integer n (1 ≤ n ≤ 1000), the length of the array. - The second line contains n integers separated by spaces, representing the elements of the array (1 ≤ array[i] ≤ 1000). **Output:** - Print a single integer, the maximum possible sum Petya can achieve. **Example:** ``` Input: 4 4 7 2 9 Output: 16 Explanation: Petya starts by picking 9, then Vasya picks 4, Petya picks 7, and finally Vasya picks 2. Thus, Petya\'s total is 9 + 7 = 16. ```","solution":"def max_sum_petya(n, array): # Create a 2D DP table to store the best possible scores for subarrays dp = [[0] * n for _ in range(n)] # Fill the table for one-element subarrays (diagonal) for i in range(n): dp[i][i] = array[i] # Fill the rest of the dp table for length in range(2, n + 1): # length of the subarray for i in range(n - length + 1): j = i + length - 1 dp[i][j] = max( array[i] + min(dp[i + 2][j] if (i + 2 <= j) else 0, dp[i + 1][j - 1] if (i + 1 <= j - 1) else 0), array[j] + min(dp[i + 1][j - 1] if (i + 1 <= j - 1) else 0, dp[i][j - 2] if (i <= j - 2) else 0) ) # Petya starts first, so the answer is in dp[0][n-1] return dp[0][n - 1]"},{"question":"You are working on a new command-line based booking system for movie theaters. Each theater has a fixed number of seats, organized in rows and columns. For simplicity, all theaters have the same number of rows and columns. You need to design the backend of the booking system using Python. Your task is to implement functions that handle the following operations: 1. Initializing the seating arrangement for the theater. 2. Booking a seat based on the row and column number. 3. Checking if a seat is available. 4. Displaying the current seating arrangement. Here are the detailed requirements: 1. **Initialization:** The theater should be initialized with the given number of rows and columns. All seats are available initially. 2. **Booking a Seat:** A seat can be booked by specifying the row and column number. If the seat is already booked, the function should return `False`. Otherwise, it should book the seat and return `True`. 3. **Checking Availability:** This function should return `True` if the seat at the specified row and column is available, and `False` if it is already booked. 4. **Displaying Seats:** The function should display the seating arrangement where available seats are represented by \'A\' and booked seats by \'B\'. You have to implement the class `Theater` with the specified methods. Here is the expected class structure: ```python class Theater: def __init__(self, rows: int, cols: int): # Initializes the theater with the given rows and columns. def book_seat(self, row: int, col: int) -> bool: # Books a seat if it is available, returns True if successful, # otherwise returns False if the seat is already booked. def is_available(self, row: int, col: int) -> bool: # Checks if a seat is available, returns True if available, # otherwise returns False. def display_seats(self) -> None: # Displays the current seating arrangement. ``` **Example Usage:** ```python theater = Theater(3, 3) print(theater.is_available(0, 0)) # True theater.book_seat(0, 0) # True theater.book_seat(0, 0) # False theater.book_seat(2, 2) # True theater.display_seats() # Output should be: # B A A # A A A # A A B ``` **Constraints:** - `1 <= rows, cols <= 100` - `0 <= row < rows` - `0 <= col < cols` Implement the Theater class as specified above.","solution":"class Theater: def __init__(self, rows: int, cols: int): self.rows = rows self.cols = cols self.seats = [[\'A\' for _ in range(cols)] for _ in range(rows)] def book_seat(self, row: int, col: int) -> bool: if self.seats[row][col] == \'A\': self.seats[row][col] = \'B\' return True return False def is_available(self, row: int, col: int) -> bool: return self.seats[row][col] == \'A\' def display_seats(self) -> None: for row in self.seats: print(\\" \\".join(row))"},{"question":"Imagine you are working with a large list of transactions, each identifying a type of expense and its amount. These transactions are stored as a list of tuples. For example, `[(1, 5.0), (2, 7.5), (1, 3.0), (3, 8.0), (2, 1.5)]`, where each tuple represents (expense_type, amount). Expense types are identified by unique positive integers. Write a function `summarize_expenses(transactions)` that takes in the transaction list and returns a dictionary summarizing the total amount spent on each expense type. The dictionary keys should be the expense types, and the corresponding values should be the total amount spent on that type. # Input: - A list of transactions, where each transaction is represented by a tuple (expense_type: int, amount: float). # Output: - A dictionary with expense types as keys and the total amount spent on that type as values. # Function Signature: ```python def summarize_expenses(transactions: list) -> dict: ``` # Example: ```python # Input transactions = [(1, 5.0), (2, 7.5), (1, 3.0), (3, 8.0), (2, 1.5)] # Output # {1: 8.0, 2: 9.0, 3: 8.0} ``` # Constraints: - The length of the transactions list will be between 1 and 10^4. - Each `expense_type` is a positive integer. - Each `amount` is a non-negative float up to two decimal places.","solution":"def summarize_expenses(transactions: list) -> dict: Summarizes the total amount spent on each expense type. Args: transactions (list): A list of transactions, where each transaction is represented by a tuple (expense_type: int, amount: float). Returns: dict: A dictionary with expense types as keys and the total amount spent on that type as values. expense_summary = {} for expense_type, amount in transactions: if expense_type in expense_summary: expense_summary[expense_type] += amount else: expense_summary[expense_type] = amount return expense_summary"},{"question":"Maria loves playing chess and is particularly fascinated by knights. She decided to write a function that calculates the number of different ways a knight can move from one square to another on a standard 8x8 chessboard. The knight moves in an \'L\' shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Write a function that takes as input the starting and ending positions of the knight and returns the minimum number of moves required for the knight to reach the ending position from the starting position. If it is not possible to reach the end position, return -1. The input positions are given in the standard chess notation (e.g., \\"a1\\", \\"h8\\"). The input function signature should be: ```python def min_knight_moves(start: str, end: str) -> int: ``` The chess positions are represented as strings with the first character being a letter from \'a\' to \'h\' indicating the column, and the second character being a number from \'1\' to \'8\' indicating the row. Examples: ``` min_knight_moves(\\"a1\\", \\"b3\\") -> 1 min_knight_moves(\\"a1\\", \\"c2\\") -> 1 min_knight_moves(\\"a1\\", \\"h8\\") -> 6 min_knight_moves(\\"a1\\", \\"a1\\") -> 0 ``` Explanation: - From \\"a1\\" to \\"b3\\": The knight moves in one \'L\' shape. - From \\"a1\\" to \\"c2\\": The knight can move in one \'L\' shape. - From \\"a1\\" to \\"h8\\": The knight requires 6 moves to reach the destination. - From \\"a1\\" to \\"a1\\": The knight is already at the destination, no moves required. You can use Breadth-First Search (BFS) for finding the shortest path in an unweighted grid like this to solve the problem.","solution":"from collections import deque def min_knight_moves(start: str, end: str) -> int: def pos_to_idx(pos): return ord(pos[0]) - ord(\'a\'), int(pos[1]) - 1 knight_moves = [ (2, 1), (1, 2), (2, -1), (1, -2), (-2, 1), (-1, 2), (-2, -1), (-1, -2) ] start_pos = pos_to_idx(start) end_pos = pos_to_idx(end) if start_pos == end_pos: return 0 queue = deque([(start_pos, 0)]) visited = set() visited.add(start_pos) while queue: (current_x, current_y), moves = queue.popleft() for dx, dy in knight_moves: next_x, next_y = current_x + dx, current_y + dy if (next_x, next_y) == end_pos: return moves + 1 if 0 <= next_x < 8 and 0 <= next_y < 8 and (next_x, next_y) not in visited: visited.add((next_x, next_y)) queue.append(((next_x, next_y), moves + 1)) return -1 # not possible, though, on an 8x8 board it usually is always possible"},{"question":"A group of people from different teams are participating in a relay race. Each participant has a team number and the order they run in. We need to determine the longest consecutive sequence of participants such that they are all from the same team. You are given an integer n representing the total number of participants and a list of n integers where the i-th integer represents the team number of the i-th participant. Your task is to find and output the length of the longest consecutive sequence of participants all from the same team. **Input:** - The first line contains an integer n (1 ≤ n ≤ 100,000) - the number of participants. - The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 100,000) - the team numbers of the participants in the order they run. **Output:** - Output a single integer - the length of the longest consecutive sequence of participants from the same team. **Example:** **Input:** ``` 7 1 1 2 2 2 3 3 ``` **Output:** ``` 3 ``` **Explanation:** The longest consecutive sequence is participants from team 2: [2, 2, 2], which has a length of 3.","solution":"def longest_consecutive_team_sequence(n, participants): This function takes number of participants and their corresponding team numbers and returns the length of the longest consecutive sequence of participants from the same team. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if participants[i] == participants[i-1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 # Check for the last sequence if current_length > max_length: max_length = current_length return max_length"},{"question":"You are given a list of integers, and you need to perform a series of operations on it efficiently. The operations can either be updating an element in the list or querying the sum of elements within a specific range. The first line contains two integers n (1 ≤ n ≤ 100,000) — the number of elements in the list, and q (1 ≤ q ≤ 100,000) — the number of queries. The second line contains n integers a[1], a[2], ..., a[n] (0 ≤ a[i] ≤ 1,000). Each of the next q lines contains a query of the following form: - \\"1 x v\\" – update the element at position x to v (1 ≤ x ≤ n). - \\"2 l r\\" – compute the sum of elements from index l to r (1 ≤ l ≤ r ≤ n). Your task is to process all the queries and print the result of each sum query. Input: ``` 5 3 1 2 3 4 5 2 1 3 1 2 10 2 2 4 ``` Output: ``` 6 17 ```","solution":"class QueryProcessor: def __init__(self, array): self.array = array def update(self, x, v): self.array[x - 1] = v def sum_range(self, l, r): return sum(self.array[l - 1:r]) def process_queries(self, queries): results = [] for query in queries: if query[0] == 1: self.update(query[1], query[2]) elif query[0] == 2: results.append(self.sum_range(query[1], query[2])) return results def process_input(data): lines = data.strip().split(\\"n\\") n, q = map(int, lines[0].split()) array = list(map(int, lines[1].split())) queries = [list(map(int, line.split())) for line in lines[2:]] qp = QueryProcessor(array) result = qp.process_queries(queries) return \\"n\\".join(map(str, result))"},{"question":"Sarah loves prime numbers and palindrome sequences. She recently came across a sequence of positive integers and wondered if she could extract a sub-sequence from it that is both a prime sequence and a palindrome. A sub-sequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your task is to help Sarah by writing a program that finds the length of the longest sub-sequence of a given list of integers that forms a palindromic prime sequence. If no such sub-sequence exists, return 0. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the list. The second line contains n integers ai (1 ≤ ai ≤ 1000), where the i-th number is equal to the i-th element of the list. Print a single line containing the length of the longest palindromic prime sub-sequence. # Sample Input 1 ``` 6 2 3 5 7 11 13 ``` # Sample Output 1 ``` 0 ``` # Sample Input 2 ``` 7 2 3 5 3 7 11 7 ``` # Sample Output 2 ``` 3 ``` # Explanation In the first sample, although all numbers are prime, there is no palindromic sub-sequence of length greater than 1. In the second sample, the longest palindromic sub-sequence that is prime is [3, 7, 3].","solution":"def is_prime(num): if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i != 0: continue return False return True def longest_palindromic_prime_subsequence(n, arr): primes = [num for num in arr if is_prime(num)] if not primes: return 0 def longest_palindromic_subseq_length(sequence): length = len(sequence) dp = [[0] * length for _ in range(length)] for i in range(length): dp[i][i] = 1 for sub_len in range(2, length + 1): for i in range(length - sub_len + 1): j = i + sub_len - 1 if sequence[i] == sequence[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][-1] return longest_palindromic_subseq_length(primes)"},{"question":"You are given an array of n integers. You need to answer a series of queries on this array. Each query is of one of the following types: 1. **Update**: Given an index and a value, update the array at the given index with the new value. 2. **Range Product**: Given a range [l, r], find the product of all elements in the range modulo 10^9 + 7. The first line of the input contains two integers n and q (1 leq n, q leq 100,000) - the number of elements in the array and the number of queries, respectively. The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) - the initial elements of the array. The next q lines describe the queries. Each query is either of the form: - \\"1 x y\\" which means update the element at index x (1 leq x leq n) to y (1 leq y leq 10^9), or - \\"2 l r\\" which means find the product of elements in the array from index l to r (1-based inclusive) modulo 10^9 + 7 (1 leq l leq r leq n). Output the result of each \\"Range Product\\" query. **Input Format** The first line contains two integers n and q - the number of elements in the array and the number of queries, respectively. The second line contains n integers - the initial elements of the array. The following q lines contain the queries either in the form \\"1 x y\\" or \\"2 l r\\". **Output Format** For each \\"Range Product\\" query, print the result modulo 10^9 + 7. **Example Input** ``` 5 3 2 3 5 7 11 2 1 3 1 3 6 2 1 3 ``` **Example Output** ``` 30 42 ``` **Explanation** Initially, the array is [2, 3, 5, 7, 11]. The product of elements from index 1 to 3 is 2 * 3 * 5 = 30. After the update, the array becomes [2, 3, 6, 7, 11]. Now, the product of elements from index 1 to 3 is 2 * 3 * 6 = 36, which modulo 10^9 + 7 is still 36.","solution":"class SegmentTree: def __init__(self, data, mod): self.n = len(data) self.mod = mod self.tree = [1] * (2 * self.n) for i in range(self.n): self.tree[self.n + i] = data[i] % self.mod for i in range(self.n - 1, 0, -1): self.tree[i] = (self.tree[i * 2] * self.tree[i * 2 + 1]) % self.mod def update(self, index, value): pos = self.n + index self.tree[pos] = value % self.mod while pos > 1: pos //= 2 self.tree[pos] = (self.tree[2 * pos] * self.tree[2 * pos + 1]) % self.mod def range_product(self, left, right): left += self.n right += self.n product = 1 while left < right: if left % 2: product = (product * self.tree[left]) % self.mod left += 1 if right % 2: right -= 1 product = (product * self.tree[right]) % self.mod left //= 2 right //= 2 return product def process_queries(n, q, array, queries): MOD = 10**9 + 7 seg_tree = SegmentTree(array, MOD) results = [] for query in queries: if query[0] == 1: _, x, y = query seg_tree.update(x - 1, y) elif query[0] == 2: _, l, r = query results.append(seg_tree.range_product(l - 1, r)) return results"},{"question":"In a certain kingdom, the citizens participate in an annual event where they decorate the town\'s central street. This street can be represented as a number line with booths at integer points. Each booth can be decorated with a banner of different colors. The goal is to find out the longest continuous range of booths that can be decorated using banners of at most two different colors. Given an array of integers where each element represents the color of the banner at that particular booth, determine the length of the longest subarray that contains at most two distinct integers. # Input The first line of input contains a single integer n (1 leq n leq 10^5), the size of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), representing the colors of the banners. # Output Output a single integer, the length of the longest subarray with at most two distinct colors. # Example Input ``` 7 1 2 1 2 1 3 4 ``` Output ``` 5 ``` In the example, the longest subarray with at most two different colors is `[1, 2, 1, 2, 1]` which has a length of 5.","solution":"def longest_subarray_with_two_colors(n, colors): Returns the length of the longest subarray with at most two distinct integers from the given list. n: int - The size of the array colors: list of int - The colors of the banners if n == 0: return 0 left = 0 max_length = 0 color_count = {} for right in range(n): color_count[colors[right]] = color_count.get(colors[right], 0) + 1 while len(color_count) > 2: color_count[colors[left]] -= 1 if color_count[colors[left]] == 0: del color_count[colors[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a list of products in a store, each with a name and a price. Your task is to help the store manager organize the products by price in non-decreasing order. The first line contains the positive integer m (1 ≤ m ≤ 3000) — the number of products. Each of the next m lines contains the product\'s name producti (a non-empty string which consists of uppercase and lowercase Latin letters, the length does not exceed ten) and the product\'s price pi (0.01 ≤ pi ≤ 1000.00) in format \\"d.dd\\". Some products can have the same name or the same price. Uppercase and lowercase letters of the alphabet should be considered different. Print m lines — product names in the non-decreasing order of their prices. Each line must contain exactly one product name. If there are several answers, print any of them. Uppercase and lowercase letters of the alphabet should be considered different.","solution":"def organize_products_by_price(products): Organizes products by price in non-decreasing order. :param products: List of tuples, where each tuple contains a product name and price in format \\"d.dd\\". :return: List of product names in non-decreasing order of their prices. # Parse prices and sort products by price parsed_products = [(name, float(price[1:])) for name, price in products] sorted_products = sorted(parsed_products, key=lambda x: x[1]) # Return product names in the sorted order return [name for name, price in sorted_products]"},{"question":"You are given a permutation of integers from 1 to n. A permutation is an ordered arrangement of distinct integers. You have to find the number of inversions in the permutation. An inversion is a pair of indices (i, j) such that 1 ≤ i < j ≤ n and arr[i] > arr[j]. Input: The first line contains an integer n (1 ≤ n ≤ 5000) — the length of the permutation. The second line contains n distinct integers from 1 to n in some order — the permutation of the integers. Output: Print a single integer — the number of inversions in the permutation. Example: Input: 5 2 3 8 6 1 Output: 7 Explanation: The seven inversions in the permutation are (2,1), (3,1), (8,1), (8,6), (2,1), (3,2), and (3,1).","solution":"def count_inversions(arr): Counts the number of inversions in the given permutation. An inversion is a pair of indices (i, j) such that 1 ≤ i < j ≤ n and arr[i] > arr[j]. :param arr: List[int] - A list representing the permutation :return: int - The number of inversions in the permutation def merge_sort(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right) // 2 inv_count += merge_sort(arr, temp_arr, left, mid) inv_count += merge_sort(arr, temp_arr, mid + 1, right) inv_count += merge(arr, temp_arr, left, mid, right) return inv_count def merge(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count n = len(arr) temp_arr = [0]*n return merge_sort(arr, temp_arr, 0, n-1)"},{"question":"You are given an array of n integers and a target integer k. Your task is to determine if there is a subset of the array that sums up to exactly k. The first line of the input contains one integer t (1 le t le 2000) — the number of test cases. Each of the following t test cases consists of two lines. The first line of each test case contains two integers n (1 le n le 100) and k (1 le k le 100). The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 100), which represent the array. For each test case, print \\"YES\\" (without quotes) if there exists a subset of the array that sums up to k, and \\"NO\\" otherwise. Example input: ``` 2 4 10 4 1 2 7 3 5 2 2 2 ``` Example output: ``` YES NO ```","solution":"def subset_sum(n, k, arr): Determines if there exists a subset of the array `arr` of size `n` that sums up to `k`. Args: n (int): Size of the array. k (int): Target sum. arr (list of int): The array of integers. Returns: str: \\"YES\\" if a subset exists, \\"NO\\" otherwise. dp = [False] * (k + 1) dp[0] = True for num in arr: for j in range(k, num - 1, -1): if dp[j - num]: dp[j] = True return \\"YES\\" if dp[k] else \\"NO\\" def solve(test_cases): results = [] for n, k, arr in test_cases: results.append(subset_sum(n, k, arr)) return results"},{"question":"You are given an array of integers representing the heights of walls in a city skyline. You need to construct the histogram based on these heights and find the maximum rectangular area that can be enclosed within the histogram. Given an integer array `heights` where `heights[i]` is the height of the wall at the i-th position, write a function to compute the maximum area of a rectangle formed by the walls, which should be a contiguous subarray of `heights`. # Input - An integer array `heights` where `1 <= heights.length <= 10^5` and `0 <= heights[i] <= 10^4`. # Output - Return a single integer representing the area of the largest rectangle that can be formed in the histogram. # Example ```python def largestRectangleArea(heights): # Your code here # Example 1 heights = [2, 1, 5, 6, 2, 3] print(largestRectangleArea(heights)) # Output: 10 # Example 2 heights = [2, 4] print(largestRectangleArea(heights)) # Output: 4 ``` # Note Optimize your solution for time and space, aiming for a linear time complexity O(n) due to the constraints provided.","solution":"def largestRectangleArea(heights): Compute the maximum area of a rectangle formed by contiguous walls in the histogram. :param heights: List[int] :return: int # Initialize variables max_area = 0 stack = [] index = 0 # Iterate over all bars of the histogram while index < len(heights): # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update the maximum area, if needed max_area = max(max_area, area) # Now, pop the remaining bars from stack and calculate the area with each popped bar as smallest bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Paul has a set of codes, each represented by a unique ID. Each ID is a string of lowercase English letters, and each code has a timestamp representing when it was last modified. A timestamp is a non-negative integer. Given a list of these code IDs and their corresponding timestamps, Paul wants to find out the maximum number of codes he can select such that no two selected codes have been modified within the same five-minute interval. The five-minute intervals are defined as [0-4], [5-9], [10-14], and so on. Write a program that determines the maximum number of codes Paul can select under the given constraint. # Input - The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of codes. - The following n lines each contain a string si (1 ≤ |si| ≤ 10) — the unique ID of the i-th code and a non-negative integer ti (0 ≤ ti ≤ 10^6) — the timestamp of the i-th code. # Output Print a single integer — the maximum number of codes Paul can select such that no two selected codes have been modified within the same five-minute interval. # Example Input ``` 4 code1 3 code2 7 code3 8 code4 12 ``` Output ``` 3 ``` Explanation: - We can select `code1` with timestamp 3 (interval [0-4]) - We can select `code2` with timestamp 7 (interval [5-9]) - We can select `code4` with timestamp 12 (interval [10-14]) - Thus, the maximum number of codes we can select is 3.","solution":"def max_codes(n, codes): Determines the maximum number of codes that can be selected such that no two codes have been modified within the same five-minute interval. Args: - n (int): The number of codes. - codes (list of tuples): Each tuple contains a string (ID of the code) and an integer (timestamp). Returns: - int: The maximum number of codes that can be selected. intervals = set() max_count = 0 for _, timestamp in codes: interval = timestamp // 5 if interval not in intervals: intervals.add(interval) max_count += 1 return max_count"},{"question":"Mike is a book collector and he loves arranging his book collection. One day, he decided to organize his collection by aligning the books in a sequential order based on their width. He wants to choose some books to form a contiguous segment such that the sum of their widths does not exceed a given number S. Given an array A of integers representing the width of each book in Mike\'s collection in the order they are placed on the shelf, and an integer S, determine the maximum number of books Mike can select to form a contiguous segment that satisfies the given condition. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of books. - The second line contains n space-separated integers A[i] (1 ≤ A[i] ≤ 10,000) — the widths of the books. - The third line contains an integer S (1 ≤ S ≤ 1,000,000) — the maximum allowed sum of selected books\' widths. Output: - Print a single integer — the maximum number of books Mike can select to form a contiguous segment with the sum of widths not exceeding S. Example: Input: ``` 5 1 2 3 4 5 10 ``` Output: ``` 4 ``` Explanation: Mike can choose books with widths [1, 2, 3, 4] where the sum is 10, which equals the limit S. Thus the maximum number of books he can include is 4.","solution":"def max_books_within_sum(n, widths, S): Returns the maximum number of contiguous books Mike can select such that the sum of their widths does not exceed S. max_books = 0 current_sum = 0 left = 0 for right in range(n): current_sum += widths[right] while current_sum > S: current_sum -= widths[left] left += 1 max_books = max(max_books, right - left + 1) return max_books"},{"question":"You are organizing a string sorting competition. Each participant submits one alphabetical string, and the goal is to determine the order of strings to be printed on the results board. However, there are specific rules on how the sorting should be conducted: 1. Strings that are exactly identical should be grouped together. 2. All strings should be sorted by the total sum of ASCII values of their characters. 3. If two strings have the same sum of ASCII values, they should be sorted lexicographically. Given an array of strings, your task is to output the sorted order of strings for the results board following the aforementioned rules. # Input - The first line contains an integer n (1 le n le 100,000), the number of participants. - The next n lines each contain a string consisting only of lowercase English letters with length between 1 and 100 inclusive. # Output - Output the strings in sorted order, one per line. # Example Input ``` 5 apple banana app banana grape ``` Output ``` app apple banana banana grape ``` # Explanation - The sum of ASCII values for \\"app\\" is 313, for \\"apple\\" is 530, for \\"banana\\" is 609, and for \\"grape\\" is 527. - After sorting by the total ASCII values of characters: app (313), apple (530), grape (527), banana (609). - Since \\"banana\\" occurs twice and they are identical, they are grouped together in the final sorted order and sorted lexicographically in their groups if necessary.","solution":"def sort_strings(strings): Sorts a list of strings based on the sum of ASCII values of their characters, and lexicographically if the sums are the same. def ascii_sum(s): return sum(ord(char) for char in s) return sorted(strings, key=lambda s: (ascii_sum(s), s)) # Example usage: # n = 5 # strings = [\'apple\', \'banana\', \'app\', \'banana\', \'grape\'] # print(sort_strings(strings))"},{"question":"\\"File Packet Reconstruction\\" In a data transmission system, a file is divided into packets, and one or more of these packets are sent over a network. However, some of these packets may be lost during transmission. Each packet contains a sequence of characters representing part of the file and an index indicating its position in the original file. You are given a list of received packets, and your task is to reconstruct the file. If any packets are missing, the reconstructed file should contain an asterisk (`*`) at the position of each missing packet. Write a function `reconstruct_file(packets: List[str], indices: List[int], total_packets: int) -> str` to perform the reconstruction. This function takes three parameters: - `packets`: a list of strings, where each string contains the data of one received packet. - `indices`: a list of integers, where each integer represents the index of the corresponding packet in the original file. - `total_packets`: an integer representing the total number of packets the file was divided into. The function should return a string representing the reconstructed file. If all packets are received, this string should be the concatenation of all packets in the correct order. If some packets are missing, the missing positions should be marked with an asterisk (`*`). # Input: - `packets` (`List[str]`): A list of strings representing the received packets. - `indices` (`List[int]`): A list of integers representing the indices of the received packets. - `total_packets` (`int`): An integer representing the total number of packets. Constraints: - `1 <= len(packets) <= total_packets <= 10^4` - Each packet has the same length and consists of alphanumeric characters. - `0 <= indices[i] < total_packets` for all `0 <= i < len(indices)`. # Example: Example 1: ```python packets = [\'abc\', \'def\', \'ghi\'] indices = [0, 1, 2] total_packets = 3 print(reconstruct_file(packets, indices, total_packets)) # Output: \'abcdefghi\' ``` Example 2: ```python packets = [\'def\', \'ghi\'] indices = [1, 2] total_packets = 3 print(reconstruct_file(packets, indices, total_packets)) # Output: \'*defghi\' ``` Example 3: ```python packets = [\'abc\', \'ghi\'] indices = [0, 2] total_packets = 3 print(reconstruct_file(packets, indices, total_packets)) # Output: \'abc*ghi\' ``` # Explanation: In Example 1, all packets are received, so the file is reconstructed in its entirety without any missing parts. In Example 2 and Example 3, some packets are missing, and their positions are marked with asterisks.","solution":"from typing import List def reconstruct_file(packets: List[str], indices: List[int], total_packets: int) -> str: Reconstruct the file from the received packets and their indices. Parameters: packets (List[str]): List of strings representing the received packets. indices (List[int]): List of integers representing the indices of the received packets. total_packets (int): Total number of packets the file was divided into. Returns: str: Reconstructed file with \'*\' at positions of missing packets. # Initialize the file reconstruction with asterisks for missing packets file_parts = [\'*\'] * total_packets # Place each packet in the correct index for packet, index in zip(packets, indices): file_parts[index] = packet # Join the parts to form the reconstructed file return \'\'.join(file_parts)"},{"question":"A company has a collection of n servers, connected by bidirectional cables. The company wants to move its data center to a new building, which means all necessary cables will need to be reconnected between the servers. The goal is to arrange the cables such that every server is either directly connected to every other server, or connected via exactly one other server (i.e., the network forms a \\"star\\" topology with one central server connected directly to all others). Additionally, the system administrator wants to ensure that any k servers connected directly to the central server can together handle all network traffic between any pair of servers, given potential maintenance or outages. You are given n (the number of servers) and m pairs of servers between which cables cannot be connected due to physical constraints. Your task is to output a feasible plan to connect the servers with the minimum number of cables needed to achieve the “star” topology under the given constraints. The input format is as follows: - The first line consists of two integers n and m. - The next m lines each consist of two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), representing the pairs of servers that cannot be connected directly. The output should be formatted as follows: - The first line should contain an integer s, the number of connections. - The following s lines should each contain two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), specifying the servers that should be directly connected. Ensure that you choose one central server and minimize the number of connections while adhering to the constraints. Note: If multiple solutions exist, any one of them can be printed. Example: Input: 5 2 2 3 4 5 Output: 4 1 2 1 3 1 4 1 5","solution":"def create_star_topology(n, m, restrictions): # Create a set of restricted connections for easy lookup restricted_connections = set((min(a, b), max(a, b)) for a, b in restrictions) # Find a suitable central server that can connect to every other server # without being restricted central_server = None for candidate in range(1, n + 1): # Check if the candidate can connect to every other server valid = True for other in range(1, n + 1): if other != candidate and (min(candidate, other), max(candidate, other)) in restricted_connections: valid = False break if valid: # This candidate is suitable central_server = candidate break if central_server is None: return \\"No valid star topology can be created with the given restrictions\\" # Create the connection list connections = [] for server in range(1, n + 1): if server != central_server: connections.append((central_server, server)) # Return the number of connections and the connection list return connections # Example usage: # n = 5 # m = 2 # restrictions = [(2, 3), (4, 5)] # Output should be: # 4 # 1 2 # 1 3 # 1 4 # 1 5"},{"question":"In a factory, there is a conveyor belt with baskets that pass by a collection point, and each basket contains a certain number of items. The factory manager needs a system to monitor and manage the items in the baskets. Each basket is represented by an index, starting from 1, which indicates its position on the conveyor belt. The system needs to support the following two types of queries: 1. Update Query: Given a basket index, add a certain number of items to the basket. 2. Retrieval Query: Given a range of basket indices, return the total number of items in all the baskets within that range. Write a program to handle these queries efficiently. The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of baskets and the number of queries, respectively. The second line contains n integers where the i-th integer represents the initial number of items in the i-th basket. The next q lines contain queries. Each query is specified by either of the following formats: - \\"1 x y\\" (1 ≤ x ≤ n, -1000 ≤ y ≤ 1000) — an update query that adds y items to the basket at index x. - \\"2 l r\\" (1 ≤ l ≤ r ≤ n) — a retrieval query that asks for the total number of items in the baskets from index l to index r (inclusive). Print the result of each retrieval query on a new line. For example: ``` Input: 5 3 3 8 2 6 5 1 3 4 2 2 4 2 1 5 Output: 20 28 ```","solution":"class BasketSystem: def __init__(self, baskets): self.baskets = baskets self.prefix_sum = self._compute_prefix_sum(baskets) def _compute_prefix_sum(self, baskets): n = len(baskets) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + baskets[i] return prefix_sum def update(self, index, add_value): self.baskets[index - 1] += add_value self.prefix_sum = self._compute_prefix_sum(self.baskets) def query(self, left, right): return self.prefix_sum[right] - self.prefix_sum[left - 1] def handle_queries(n, queries, baskets): system = BasketSystem(baskets) results = [] for query in queries: if query[0] == 1: index, add_value = query[1], query[2] system.update(index, add_value) elif query[0] == 2: left, right = query[1], query[2] results.append(system.query(left, right)) return results"},{"question":"You have a list of n integers and you are required to answer q queries. Each query provides two integers l and r and requires you to output whether the sum of the sublist from index l to index r (inclusive, 1-based indices) is odd or even. The first line of the input contains two integers n and q (1 leq n, q leq 100,000) — the length of the list and the number of queries. The second line contains n integers, the elements of the list, where each integer is between 1 and 10^9. The next q lines each contain two integers l and r (1 leq l leq r leq n) — the bounds of the query. For each query, output \\"odd\\" if the sum of the elements from index l to index r is odd, otherwise output \\"even\\". # Example Input ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 ``` Output ``` even odd odd ``` # Explanation: - In the first query, the sublist is [1, 2, 3], and the sum is 6, which is even. - In the second query, the sublist is [2, 3, 4], and the sum is 9, which is odd. - In the third query, the sublist is [1, 2, 3, 4, 5], and the sum is 15, which is odd. # Constraints: - The total number of elements in the list and number of queries will not exceed 200,000. - You may use prefix sums to efficiently calculate the sum for each query.","solution":"def prefix_sums(arr): Compute the prefix sum array of the given array. prefix = [0] * (len(arr) + 1) for i in range(1, len(prefix)): prefix[i] = prefix[i-1] + arr[i-1] return prefix def query_sums(prefix, l, r): Query the sum for a sublist from l to r (inclusive, 1-based index). Check if the sum is even or odd. sublist_sum = prefix[r] - prefix[l-1] return \\"even\\" if sublist_sum % 2 == 0 else \\"odd\\" # Function to handle multiple queries def process_queries(n, q, arr, queries): Process multiple queries on the given array. n: int, length of the list q: int, number of queries arr: list of integers, the list queries: list of tuples, each containing l and r for the query results = [] prefix = prefix_sums(arr) for (l, r) in queries: result = query_sums(prefix, l, r) results.append(result) return results # Sample Input n = 5 q = 3 arr = [1, 2, 3, 4, 5] queries = [(1, 3), (2, 4), (1, 5)] # Process Sample Queries results = process_queries(n, q, arr, queries) for res in results: print(res)"},{"question":"Emma is participating in a treasure hunt and has been provided a sequence of instructions. She needs to calculate her final position after executing all the instructions. Emma starts at position zero. Each instruction in the sequence is either \'left\' or \'right\', which moves her one step to the left or to the right respectively. The first line contains a single integer n (1 le n le 100) — the number of instructions. The following line contains a sequence of instructions, each instruction is either \'left\' or \'right\' and is space-separated. Print the final position of Emma after executing all the instructions. For instance, in the first example after reading the sequence \\"left left right\\", Emma should move two steps to the left and one step to the right, ending up at the final position of -1.","solution":"def final_position(n, instructions): Calculate the final position of Emma after following the sequence of left and right instructions. Parameters: n (int): The number of instructions instructions (list of str): The sequence of instructions, each element is either \'left\' or \'right\' Returns: int: The final position of Emma position = 0 for instruction in instructions: if instruction == \'left\': position -= 1 elif instruction == \'right\': position += 1 return position # Example usage: n = 3 instructions = [\'left\', \'left\', \'right\'] print(final_position(n, instructions)) # Output: -1"},{"question":"You are given a string S, which consists of only lowercase letters. Your task is to determine the length of the longest substring that contains only distinct characters. The input consists of a single string S (1 ≤ |S| ≤ 10^5), where |S| is the length of the string. Output the length of the longest substring with all distinct characters.","solution":"def length_of_longest_substring(s): Given a string s, returns the length of the longest substring with all distinct characters. char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given an undirected graph with `n` nodes and `m` edges (1 ≤ n, m ≤ 5000). Each node has a value associated with it. Your task is to find the maximum sum of values of nodes in a connected subgraph utilizing the Breadth-First Search (BFS) algorithm or Depth-First Search (DFS) algorithm. A connected subgraph is a subset of the graph\'s nodes such that there is a path between any two nodes in this subset, and includes all edges between them. # Input Format - The first line contains two integers `n` and `m` — the number of nodes and the number of edges in the graph. - The second line contains `n` integers, where the `i-th` integer represents the value associated with the `i-th` node. - Each of the following `m` lines contains two integers `u` and `v` — indicating an undirected edge connecting nodes `u` and `v`. # Output Format - Output a single integer representing the maximum sum of values of nodes in any connected subgraph. # Sample Input ``` 5 4 1 2 3 4 5 1 2 1 3 3 4 4 5 ``` # Sample Output ``` 15 ``` # Explanation The connected subgraph with nodes {1, 2, 3, 4, 5} includes all the nodes and the sum of their values is 1 + 2 + 3 + 4 + 5 = 15. # Note You must ensure that the implementation has a time complexity that is feasible given the constraints. Efficient graph traversal for connected components using BFS or DFS is required for optimal performance.","solution":"from collections import defaultdict, deque def max_connected_subgraph_sum(n, m, node_values, edges): def bfs(start): queue = deque([start]) visited[start] = True total_value = 0 while queue: node = queue.popleft() total_value += node_values[node] for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return total_value graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) visited = [False] * n max_sum = 0 for i in range(n): if not visited[i]: connected_sum = bfs(i) max_sum = max(max_sum, connected_sum) return max_sum # Sample input processing function (assuming input directly as function parameters is provided) def process_input(n, m, values, edges): return max_connected_subgraph_sum(n, m, values, edges)"},{"question":"Given a string, determine if it consists of all unique characters. Implement a function, `has_unique_chars(s: str) -> bool`, that takes a string `s` and returns `True` if all characters in the string are unique, and `False` otherwise. # Input - The input consists of a single string `s` (1 <= |s| <= 1000), where |s| is the length of the string. The string `s` will contain only lowercase alphabetical characters. # Output - The output should be a single boolean value, `True` if all characters in `s` are unique, and `False` otherwise. # Example - **Input:** \\"abcdef\\" - **Output:** True - **Input:** \\"hello\\" - **Output:** False # Note - In the first example, all characters in the string \\"abcdef\\" are unique, so the function should return `True`. - In the second example, the string \\"hello\\" contains the character \'l\' twice, so the function should return `False`. # Constraints - The solution should have a time complexity of O(n), where n is the length of the string.","solution":"def has_unique_chars(s: str) -> bool: Determines if the string consists of all unique characters. Args: s (str): The input string. Returns: bool: True if all characters in the string are unique, False otherwise. char_set = set() for char in s: if char in char_set: return False char_set.add(char) return True"},{"question":"You are given two strings s and t consisting of lowercase English letters. Your task is to determine the minimum number of operations required to convert string s into string t. The only operations you are allowed to perform are: 1. Insert a character at any position in s. 2. Delete any character from s. 3. Replace any character in s with a different character. The first line contains an integer n (1 le n le 1000) — the length of the string s. The second line contains an integer m (1 le m le 1000) — the length of the string t. The third line contains a string s of length n. The fourth line contains a string t of length m. Output a single integer — the minimum number of operations required to convert string s into string t.","solution":"def min_operations_convert(s, t): Returns the minimum number of operations required to convert string s into string t using insertions, deletions, and substitutions. n, m = len(s), len(t) # Create a table to store results of subproblems dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill dp[][] in bottom up manner for i in range(n + 1): for j in range(m + 1): # If first string is empty, only option is to # insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to # remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore last character # and recur for remaining substring elif s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] # If last character is different, consider all possibilities # and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[n][m]"},{"question":"In a digital world, an intergalactic network of servers hosts a variety of resources. These servers are interconnected by bidirectional communication links that have different latencies. To improve the overall efficiency of the network, the central administrator wants to ensure the shortest possible communication time between any two servers. The administrator needs your help to find the shortest path between a given pair of servers. The servers are represented as nodes, and the communication links as weighted edges in a graph. Write a function that takes as input the number of servers `n`, the number of communication links `m`, a list of edges where each edge is represented as a tuple `(u, v, w)` denoting a link between server `u` and server `v` with latency `w`, and two integers `src` and `dest` representing the source and destination servers respectively. Your task is to find the minimum communication time (sum of latencies) from the source server to the destination server. If there\'s no path between the source and destination, return -1. # Input 1. An integer `n` (2 ≤ n ≤ 100,000) - the number of servers. 2. An integer `m` (1 ≤ m ≤ 200,000) - the number of communication links. 3. A list of `m` tuples, where each tuple `(u, v, w)` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10,000) - represents a communication link. 4. Two integers `src` and `dest` (1 ≤ src, dest ≤ n) - the source and destination servers. # Output Output a single integer - the minimum communication time from the source to the destination, or -1 if no such path exists. # Example Input: ``` 5 6 1 2 10 1 3 5 2 3 8 2 4 2 3 4 3 3 5 7 1 4 ``` Output: ``` 8 ``` In the example, the shortest path from server 1 to server 4 is 1 -> 3 -> 4 with a total latency of 8.","solution":"import heapq def shortest_path(n, m, edges, src, dest): # Create graph adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Use Dijkstra\'s algorithm to find shortest path def dijkstra(start, end): heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 while heap: current_dist, node = heapq.heappop(heap) if node == end: return current_dist for neighbor, weight in graph[node]: distance = current_dist + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return -1 return dijkstra(src, dest)"},{"question":"# Problem Statement You have been given a grid representing a farm. The farm is an `n x m` grid of cells where each cell can either be a `0` (indicating cultivated land) or a `1` (indicating an obstacle such as a rock). A farmer is standing at the top-left corner of the farm (cell (1, 1)) and wants to reach the bottom-right corner (cell (n, m)). However, the farmer can only move right or down. Your task is to determine the number of unique paths that the farmer can take to reach the bottom-right corner, starting from the top-left corner. The path must avoid all obstacles and can only pass through cells with `0`. If there\'s no valid path, return 0. # Input - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid, respectively. - The next `n` lines each contain `m` integers (`0` or `1`), representing the grid. # Output - Output a single integer, the number of unique paths from the top-left corner to the bottom-right corner avoiding obstacles. If there are no such paths, print `0`. # Examples Example 1 ``` Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 ``` Example 2 ``` Input: 3 3 0 1 0 0 1 0 0 0 0 Output: 1 ``` Example 3 ``` Input: 1 1 0 Output: 1 ``` Example 4 ``` Input: 2 2 0 1 1 0 Output: 0 ``` # Explanation - In Example 1, there are two possible paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right - In Example 2, there is only one possible path from the top-left corner to the bottom-right corner: 1. Down -> Down -> Right -> Right - In Example 3, the grid is 1x1 and since the cell is `0`, there is only one way. - In Example 4, there are no valid paths since all paths are obstructed by `1`.","solution":"def num_unique_paths(n, m, grid): Returns the number of unique paths from the top-left to the bottom-right of the grid avoiding obstacles. if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are a manager of a warehouse and you need to track the inventory of products. Initially, the warehouse contains *n* products; for each product i, you know its initial stock si. During the day, two types of operations are performed on this inventory: 1. Addition: Add a certain quantity to the stock of a specific product. 2. Query: Determine the current stock of a specific product. The first line contains two integers n and m (1 ≤ n, m ≤ 200,000) — the number of different products, and the number of operations respectively. The next line contains n integers s1, s2, ..., sn (0 ≤ si ≤ 10^9) — the initial stock quantities of the products. Each of the next m lines describes an operation. An operation is described by three integers: - For an addition operation: 1 p q (1 ≤ p ≤ n, 0 ≤ q ≤ 10^9) — add q to the stock of product p. - For a query operation: 2 p (1 ≤ p ≤ n) — ask for the current stock of product p. Print the answer for each query operation in the order they appear. For example, consider n = 3 products with initial stocks [10, 20, 30] and m = 5 operations. The operations are: 1. Query the stock of the second product. 2. Add 15 units to the stock of the first product. 3. Query the stock of the first product. 4. Add 10 units to the stock of the third product. 5. Query the stock of the third product. The output would be: 20 25 40","solution":"def manage_inventory(n, m, initial_stocks, operations): Manage the inventory of products with addition and query operations. Args: n (int): Number of products. m (int): Number of operations. initial_stocks (list): Initial stock quantities of the products. operations (list): List of tuples representing operations. Returns: list: Results of all query operations in the order they appeared. stocks = initial_stocks[:] # Create a copy of initial stocks results = [] for operation in operations: if operation[0] == 1: # Addition operation p, q = operation[1], operation[2] stocks[p - 1] += q elif operation[0] == 2: # Query operation p = operation[1] results.append(stocks[p - 1]) return results"},{"question":"In an enchanted forest, there is a magical tree with N nodes and N-1 edges forming an undirected tree. Each node has a distinct value between 1 and N. The forest spirits want to reorganize the nodes such that the resulting tree is still a valid tree and the sequence of node values in the in-order traversal of the resulting tree is identical to the sorted sequence of values from 1 to N. An in-order traversal of a tree visits nodes in the following order: 1. Visit the left subtree 2. Visit the current node 3. Visit the right subtree Your task is to write a program that: - Takes an integer N (1 ≤ N ≤ 100) as the number of nodes. - Accepts N-1 pairs of integers (u, v), with each pair representing an undirected edge between nodes u and v (1 ≤ u, v ≤ N). You must print N lines, where each line contains two integers representing an edge in the new tree that satisfies the condition mentioned above. If multiple solutions exist, you can print any one of them. Input format: - The first line contains an integer N. - Each of the next N-1 lines contains two integers u and v, representing an edge between nodes u and v in the original tree. Output format: - Print N-1 lines, with each line containing two integers representing an edge in the new tree. Note: It is guaranteed that at least one valid reorganization exists.","solution":"def reorganize_tree(N, edges): Reorganizes the nodes of the tree such that the in-order traversal of the new tree is identical to the sorted sequence of values from 1 to N. Args: - N (int): The number of nodes in the tree. - edges (list): List of tuples representing the edges of the tree. Returns: - List of tuples representing the edges of the reorganized tree. new_edges = [] for i in range(1, N): new_edges.append((i, i+1)) return new_edges"},{"question":"You are given a list of intervals where each interval contains two integers representing the start and end time of a meeting (inclusive). Your task is to find the minimum number of meeting rooms required to schedule all meetings without any overlaps. Each line of input contains two integers start and end (0 ≤ start < end ≤ 10000), representing the start and end time of a meeting. Meetings can start and end on the same day. First line of the input contains a single integer n (1 ≤ n ≤ 10000) — the number of meetings. Output a single integer — the minimum number of meeting rooms required to schedule all meetings without any overlaps. Example: ``` Input: 3 0 30 5 10 15 20 Output: 2 ``` Explanation: - The first meeting spans time [0, 30]. - The second meeting spans time [5, 10]. - The third meeting spans time [15, 20]. Hence, we need at least two meeting rooms to accommodate these meetings without any overlaps.","solution":"def min_meeting_rooms(intervals): if not intervals: return 0 start_times = sorted([i[0] for i in intervals]) end_times = sorted([i[1] for i in intervals]) start_pointer = 0 end_pointer = 0 used_rooms = 0 max_rooms = 0 while start_pointer < len(start_times): if start_times[start_pointer] < end_times[end_pointer]: used_rooms += 1 start_pointer += 1 else: used_rooms -= 1 end_pointer += 1 max_rooms = max(max_rooms, used_rooms) return max_rooms"},{"question":"You are given a binary string s which consists only of the characters \'0\' and \'1\'. Dreamoon plays a game with this string which involves making moves. In each move, Dreamoon can choose two consecutive and different characters and remove them from the string. Specifically, if there is a substring \\"01\\" or \\"10\\" in the string, Dreamoon can remove either of these substrings in one move. Dreamoon wants to minimize the length of the string by making such moves. Your task is to find out the minimum possible length of the string he can obtain after performing the described operations as many times as possible. The first line contains an integer n (1 leq n leq 100), the number of test cases. For each test case, the first line contains a binary string s with length between 1 and 100, both inclusive. Output the minimum possible length of the string for each test case after performing the described operations. # Example Input ``` 2 001100 101010 ``` Output ``` 2 0 ``` # Explanation In the first test case, \\"001100\\": - Dreamoon can remove the first \\"01\\" to get \\"0100\\". - Then he can remove the next \\"01\\" to get \\"00\\". - Further moves are not possible, so the minimum possible length is 2. In the second test case, \\"101010\\": - Dreamoon can remove \\"10\\" five times (each time \\"10\\" or \\"01\\" is removed). - This results in a final string of length 0.","solution":"def min_length_binary_string(n, cases): result = [] for s in cases: count_01_10_pairs = 0 i = 0 while i < len(s) - 1: if s[i] != s[i+1]: # If s[i] != s[i+1], it is either \\"01\\" or \\"10\\" count_01_10_pairs += 1 i += 2 # skip the next character as \\"10\\" or \\"01\\" is removed else: i += 1 # Each pair removal reduces the length by 2 result.append(len(s) - 2 * count_01_10_pairs) return result"},{"question":"In a mythical land, there is a straight river flowing from north to south, and along it, there are several islands in a row from west to east, each connected by a magical bridge. The first bridge connects the westernmost island to the riverbank, and the subsequent bridges connect adjacent islands. Each island has an elevation represented by an integer. Your task is to determine if it is possible to travel from the first island to the last island without crossing more than K meters in elevation difference between any two consecutive islands. You are provided with the list of elevations for all the islands. If it is possible, print \\"yes\\". If it is not possible, print \\"no\\". # Input - The first line contains two integers, **N** (2 ≤ N ≤ 10<sup>5</sup>) representing the number of islands, and **K** (1 ≤ K ≤ 10<sup>9</sup>) representing the maximum allowed elevation difference between any two consecutive islands. - The second line contains **N** integers, the elevations of the islands from west to east. # Output - A single line containing \\"yes\\" if the journey is possible, otherwise \\"no\\". # Example Input ``` 5 3 2 5 6 9 10 ``` Output ``` yes ``` Input ``` 4 1 1 3 2 4 ``` Output ``` no ``` # Explanation In the first example, the journey is possible because the elevation differences between consecutive islands are within the allowed limit: - 5 - 2 = 3 - 6 - 5 = 1 - 9 - 6 = 3 - 10 - 9 = 1 In the second example, the journey is not possible because the elevation difference between the second and the first island is greater than K (3 - 1 > 1).","solution":"def can_travel(N, K, elevations): Determines if it is possible to travel from the first island to the last island without crossing more than K meters in elevation difference between any two consecutive islands. Args: N (int): Number of islands K (int): Maximum allowed elevation difference elevations (list): List of elevations of the islands Returns: str: \\"yes\\" if the journey is possible, otherwise \\"no\\" for i in range(1, N): if abs(elevations[i] - elevations[i-1]) > K: return \\"no\\" return \\"yes\\""},{"question":"You are given a weighted, undirected graph with n nodes and m edges. Each node represents a city, and each edge represents a road connecting two cities with an associated positive integer weight representing the cost to travel that road. Your task is to determine the maximum possible cost to travel between any two cities in the graph. However, you can only consider roads from the Minimum Spanning Tree (MST) of the graph. If the graph is not connected and hence no MST can be formed, output -1. The graph\'s nodes are numbered from 1 to n. # Input - The first line contains two integers, n and m (1 le n, m le 10^5) — the number of nodes and the number of edges, respectively. - The next m lines contain three integers each, u, v,, and w (1 le u, v le n, 1 le w le 10^6) representing an edge between nodes u and v with a weight w. # Output - Output a single integer, the maximum cost of travel between any two cities considering only the edges in the MST. If no MST can be formed, output -1. # Example Input: ``` 4 5 1 2 3 1 3 4 4 2 5 3 2 2 3 4 6 ``` Output: ``` 5 ``` Input: ``` 3 2 1 2 1 2 3 2 ``` Output: ``` 2 ``` Input: ``` 3 1 1 2 1 ``` Output: ``` -1 ```","solution":"def find_maximum_cost_in_mst(n, m, edges): This function takes the number of nodes (n), number of edges (m), and a list of edges (each represented by a tuple (u, v, w) where u and v are nodes and w is the weight of the edge). It returns the maximum cost for the MST or -1 if no MST can be formed. from heapq import heappop, heappush if n == 1: return 0 # Only one node, no edges, max cost is 0 # Sort edges to prepare for Kruskal’s MST algorithm edges.sort(key=lambda edge: edge[2]) # Disjoint set (union-find with path compression and union by rank) parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Kruskal\'s algorithm to find the MST and maximum edge weight in the MST max_cost_in_mst = -1 edges_used = 0 for u, v, w in edges: if find(u) != find(v): union(u, v) max_cost_in_mst = max(max_cost_in_mst, w) edges_used += 1 if edges_used == n - 1: break # Check if we used exactly n-1 edges which confirms that the graph is connected if edges_used == n - 1: return max_cost_in_mst else: return -1"},{"question":"You are given an integer matrix a of size n times n. You have to perform m queries on this matrix. Each query has one of two types: 1. 1 , r , c , v — Update the value at cell (r, c) in the matrix to v. 2. 2 , r1 , c1 , r2 , c2 — Calculate and print the sum of all values in the sub-matrix whose top-left corner is (r1, c1) and bottom-right corner is (r2, c2). The first line contains two integers n and m (1 le n le 500, 1 le m le 10^5) — the size of the matrix and the number of queries. The next n lines each contain n integers a_{ij} (0 le a_{ij} le 10^9), forming the initial state of the matrix. Next m lines contain queries (one per line). For each query of the second type, print the sum of the values in the specified sub-matrix.","solution":"class Matrix: def __init__(self, matrix): self.matrix = matrix self.n = len(matrix) self.presum = [[0] * (self.n + 1) for _ in range(self.n + 1)] self.compute_prefix_sum() def compute_prefix_sum(self): for i in range(1, self.n + 1): for j in range(1, self.n + 1): self.presum[i][j] = self.matrix[i - 1][j - 1] + self.presum[i - 1][j] + self.presum[i][j - 1] - self.presum[i - 1][j - 1] def update(self, r, c, v): delta = v - self.matrix[r][c] self.matrix[r][c] = v for i in range(r + 1, self.n + 1): for j in range(c + 1, self.n + 1): self.presum[i][j] += delta def sum_region(self, r1, c1, r2, c2): return self.presum[r2 + 1][c2 + 1] - self.presum[r1][c2 + 1] - self.presum[r2 + 1][c1] + self.presum[r1][c1] def process_queries(n, m, a, queries): matrix = Matrix(a) result = [] for query in queries: q = query.split() if q[0] == \'1\': _, r, c, v = map(int, q) matrix.update(r - 1, c - 1, v) elif q[0] == \'2\': _, r1, c1, r2, c2 = map(int, q) result.append(matrix.sum_region(r1 - 1, c1 - 1, r2 - 1, c2 - 1)) return result"},{"question":"A student is given two lists of integers and is required to merge them into one sorted list in non-decreasing order. However, the student faces a unique challenge: both lists are extremely large, and there\'s limited memory available to store both lists simultaneously. To address this, the student must merge the two lists on-the-fly, reading in one integer from each list at a time and only storing the necessary elements to output the final sorted list. Write a function `merge_large_sorted_lists` that takes in two iterables (not lists) representing the large sorted lists of integers and returns an iterator over all integers from both lists in sorted order. Ensure the function uses limited extra memory, i.e., it\'s not allowed to load the full lists into memory at once. **Input** - `iter1`: first iterable of sorted integers in non-decreasing order. - `iter2`: second iterable of sorted integers in non-decreasing order. **Output** - An iterator over all integers from both given iterables in non-decreasing order. **Example** ```python list1 = iter([1, 4, 5, 8]) list2 = iter([2, 3, 6, 7]) result = merge_large_sorted_lists(list1, list2) print(list(result)) # Output: [1, 2, 3, 4, 5, 6, 7, 8] ``` **Note** - The input iterables `iter1` and `iter2` are guaranteed to be individually sorted in non-decreasing order. - Try to minimize the extra memory usage by processing elements in a streaming manner.","solution":"def merge_large_sorted_lists(iter1, iter2): Merge two sorted iterables into one sorted output, using limited memory. iter1, iter2 = iter(iter1), iter(iter2) sentinel = object() # Unique object to denote the end of of an iterator item1 = next(iter1, sentinel) item2 = next(iter2, sentinel) while item1 is not sentinel or item2 is not sentinel: if item1 is not sentinel and (item2 is sentinel or item1 <= item2): yield item1 item1 = next(iter1, sentinel) else: yield item2 item2 = next(iter2, sentinel)"},{"question":"You are given an array of integers. You need to process some queries on this array. The queries can be of two types: 1. Update the value at a specified position in the array. 2. Find the number of distinct integers in a specified subarray. Input: - The first line of the input contains two integers n and q (1 ≤ n, q ≤ 10^5), where n is the number of elements in the array, and q is the number of queries. - The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9) representing the array elements. - The next q lines contain queries of one of the following two types: - `1 x y` - Update the value at position x to y (1 ≤ x ≤ n, |y| ≤ 10^9). - `2 l r` - Find the number of distinct integers in the subarray from index l to r (1 ≤ l ≤ r ≤ n). Output: For queries of the second type, print the number of distinct integers in the specified subarray. Example: Input: ``` 5 3 1 2 1 3 2 2 1 3 1 3 4 2 1 3 ``` Output: ``` 2 3 ```","solution":"def process_queries(n, q, array, queries): results = [] for query in queries: if query[0] == 1: _, x, y = query array[x - 1] = y elif query[0] == 2: _, l, r = query subarray = array[l - 1:r] results.append(len(set(subarray))) return results"},{"question":"You have been instructed by your manager to write a utility that processes logs generated by a web server. Each log entry contains a timestamp (in seconds since the epoch) and a status code (HTTP status code). Your task is to determine the longest continuous period during which every log entry has the same status code. You are given an integer n (1 ≤ n ≤ 100) which represents the number of log entries. The next n lines each contain a log entry consisting of a timestamp ti (1 ≤ ti ≤ 10000) and a status code si (100 ≤ si ≤ 599). The log entries are provided in non-decreasing order of timestamps. Your task is to find and print the length of the longest continuous period during which every log entry has the same status code. If there are multiple periods with the same length, output any one of them. Input: - An integer n, the number of log entries. - Each of the next n lines contains two integers ti and si, where ti is the timestamp and si is the status code. Output: - A single integer representing the length of the longest continuous period (in seconds) during which every log entry has the same status code. Example: Input: 5 1 200 2 200 3 404 4 404 5 404 Output: 3 Explanation: The server logs show that the time period between timestamp 1 to 2 have status code 200 continuously, while the time period between timestamp 3 to 5 have status code 404 continuously, which is longer (with a length of 3 seconds).","solution":"def longest_continuous_period(logs): Given a list of logs, each log entry contains a timestamp and an HTTP status code, determine the longest continuous period during which every log entry has the same status code. :param logs: List of tuples, where each tuple contains (timestamp, status code) :return: Length of the longest continuous period with the same status code if not logs: return 0 longest_period = 0 current_period = 1 for i in range(1, len(logs)): if logs[i][1] == logs[i-1][1]: current_period += 1 else: longest_period = max(longest_period, current_period) current_period = 1 longest_period = max(longest_period, current_period) return longest_period"},{"question":"You are given an initially empty stack. There are n operations of the following types: 1. `push x`: Push an integer `x` onto the stack. 2. `pop`: Pop the integer from the top of the stack. 3. `inc k x`: Increment the bottom `k` elements of the stack by `x`. Write a program to process these operations on the stack. The first line of input contains an integer `n` (1 ≤ n ≤ 100000), the number of operations. The next `n` lines contain one of the three operations described above. For each `pop` operation, output the integer that is removed from the stack. If the stack is empty, output `EMPTY`. Example: **Input**: ``` 6 push 3 push 5 inc 2 1 pop push 2 pop ``` **Output**: ``` 5 2 ``` Explanation: 1. `push 3` -> stack: [3] 2. `push 5` -> stack: [3, 5] 3. `inc 2 1` -> stack: [4, 6] 4. `pop` -> output: 5, stack: [4] 5. `push 2` -> stack: [4, 2] 6. `pop` -> output: 2, stack: [4]","solution":"class CustomStack: def __init__(self): self.stack = [] def push(self, x): self.stack.append(x) def pop(self): if self.stack: return self.stack.pop() else: return \\"EMPTY\\" def inc(self, k, x): for i in range(min(k, len(self.stack))): self.stack[i] += x def process_operations(n, operations): custom_stack = CustomStack() result = [] for operation in operations: parts = operation.split() if parts[0] == \\"push\\": custom_stack.push(int(parts[1])) elif parts[0] == \\"pop\\": result.append(custom_stack.pop()) elif parts[0] == \\"inc\\": custom_stack.inc(int(parts[1]), int(parts[2])) return result"},{"question":"In a certain game, there is a playing board of size **n x m** (an n by m grid). Some cells in the grid are blocked, while others are not. Any movement within the grid must be strictly horizontal or vertical, and movement is not allowed to pass through blocked cells. Your task is to determine the minimum distance a player needs to travel to move from the top-left corner of the grid (cell (1, 1)) to the bottom-right corner of the grid (cell (n, m)), given that the player can only move horizontally or vertically. If it is impossible to reach the bottom-right corner from the top-left corner, return -1. # Input - The first line contains two integers, **n** and **m** (1 ≤ n, m ≤ 1000) – the dimensions of the grid. - The next **n** lines each contain **m** characters, where each character is either a \'0\' (indicating an open cell) or a \'1\' (indicating a blocked cell). # Output - Output a single integer, which is the minimum distance to travel from the top-left corner to the bottom-right corner along the allowed paths. If no such path exists, output -1. # Example Input ``` 4 5 0 0 1 0 0 0 1 0 1 0 0 0 0 1 0 1 1 0 0 0 ``` Output ``` 7 ``` Input ``` 3 3 0 1 0 1 1 0 0 0 0 ``` Output ``` -1 ``` # Note - In the first example, the shortest path is along the sequence of cells: (1,1) -> (1,2) -> (2,1) -> (3,1) -> (3,2) -> (3,3) -> (4,3) -> (4,4) -> (4,5). The number of steps required is 7. - In the second example, there is no valid path from the top-left corner to the bottom-right corner, so the output is -1.","solution":"from collections import deque def min_distance(n, m, grid): Determines the minimum distance needed to travel from the top-left corner to the bottom-right corner in a grid with some blocked cells. Parameters: n (int): number of rows m (int): number of columns grid (list of list of int): the grid where 0 represents an open cell and 1 represents a blocked cell Returns: int: the minimum distance or -1 if no such path exists if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 # Directions for movement: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS with (row, column, distance) queue = deque([(0, 0, 0)]) # Visited set to keep track of visited cells visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() # If we have reached the bottom-right corner if x == n - 1 and y == m - 1: return dist # Explore all possible directions for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the new position is within the grid and not blocked if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Write a function that, given an integer N (2 le N le 9), generates all possible valid parentheses combinations of length 2N and returns them in a list. A valid parentheses combination should have an equal number of opening and closing parentheses (\'(\' and \')\'), and each closing parenthesis should match a previously unmatched opening parenthesis. # Input: - An integer N (2 le N le 9). # Output: - A list of strings where each string is a valid combination of parentheses of length 2N. # Example: Input: N = 3 Output: [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] # Note: - Ensure that the function is efficient enough to handle the upper limit of N = 9. - The order of the combinations in the output list does not matter.","solution":"def generate_parentheses(N): Generates all valid parentheses combinations of length 2N. Parameters: N (int): The number of pairs of parentheses. Returns: list: A list of strings containing all valid combinations. result = [] def backtrack(S=\'\', left=0, right=0): if len(S) == 2 * N: result.append(S) return if left < N: backtrack(S + \'(\', left + 1, right) if right < left: backtrack(S + \')\', left, right + 1) backtrack() return result"},{"question":"Two students, Alice and Bob, are studying numbers. They come across a sequence of n integers. The students take turns selecting a number from either the beginning or the end of the sequence and removing it. Alice always goes first. Alice wants to maximize the sum of numbers she collects, while Bob wants to minimize the sum of numbers Alice collects (or equivalently, maximize his own sum). Determine the sum of the numbers that Alice will collect if both players play optimally. The first line of input contains a single integer n (1 le n le 1000) — the number of integers in the sequence. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the integers in the sequence. Print one integer — the sum of the numbers Alice will collect. In the first sample, Alice will collect 5 + 4 = 9. In the second sample, Alice will collect 3 if she plays optimally.","solution":"def alice_collects(n, sequence): Calculate the sum of the numbers Alice will collect if both players play optimally. # Create a memoization table for dynamic programming dp = [[0] * n for _ in range(n)] # Fill the dp array diagonally for length in range(1, n + 1): for i in range(n - length + 1): j = i + length - 1 # dp[i][j] represents the maximum sum Alice can collect from sequence[i:j+1] if i == j: dp[i][j] = sequence[i] else: # Alice chooses the start start_pick = sequence[i] + min(dp[i + 2][j] if i + 2 <= j else 0, dp[i + 1][j - 1]) # Alice chooses the end end_pick = sequence[j] + min(dp[i + 1][j - 1], dp[i][j - 2] if j - 2 >= i else 0) dp[i][j] = max(start_pick, end_pick) return dp[0][n - 1]"},{"question":"Alice is a game developer, and she is designing a new game. In this game, the player controls a character who can move through a grid map represented by a matrix n times m. The player starts at the top-left corner of the grid (position (1, 1)) and needs to reach the bottom-right corner (position (n, m)). The player can move to the neighboring cell either to the right or down unless there is an obstacle in the path. Each cell of the grid is represented by a non-negative integer, where 0 indicates the cell is an open space and 1 indicates there is an obstacle which the player cannot pass through. The objective is to find the minimum number of moves required for the player to reach the bottom-right corner of the grid. If it is not possible to reach the destination cell, return -1. The input consists of multiple test cases. The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. Each test case consists of the following: - The first line of each test case contains two integers n and m (2 leq n, m leq 100) — the dimensions of the grid. - The next n lines contain m integers 0 or 1. Print the answers for each test case in the following format: For each test case, output a single integer — the minimum number of moves required to reach the bottom-right corner, or -1 if it is not possible. # Example Input ``` 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 1 0 ``` Output ``` 4 -1 ``` # Explanation For the first test case: - The grid looks like this: ``` 0 0 0 0 1 0 0 0 0 ``` Moving through the cells (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3), the minimum number of moves required is 4. For the second test case: - The grid looks like this: ``` 0 1 1 0 ``` It is not possible to reach the bottom-right corner from the top-left corner.","solution":"from collections import deque def min_moves(n, m, grid): if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(1, 0), (0, 1)] # down, right queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set([(0, 0)]) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def process_input(t, cases): results = [] for case in cases: n, m, grid = case[\'dimensions\'][0], case[\'dimensions\'][1], case[\'grid\'] results.append(min_moves(n, m, grid)) return results"},{"question":"Bibi is a passionate gardener who loves growing different types of flowers in her garden. Recently, she has bought several pots and wants to optimize the arrangement of the flowers in these pots to maximize the beauty of her garden. Each type of flower has a unique beauty score and each pot can hold exactly one type of flower. However, Bibi believes that the beauty of two adjacent pots is diminished if they contain the same type of flower. Given an array of integers representing the beauty scores of n types of flowers, and an integer m representing the number of pots, Bibi wants to know the maximum possible total beauty score she can achieve for her garden. The total beauty score of the garden is defined as the sum of the beauty scores of all the flowers planted in the pots. To help Bibi, you need to find the maximum possible total beauty score for any valid arrangement of the flowers in the pots such that no two adjacent pots contain the same type of flower. The first line of input contains two integers n and m (1 ≤ n, m ≤ 10^5), representing the number of types of flowers and the number of pots, respectively. The second line contains n integers, each representing the beauty score of a type of flower (1 ≤ beauty score ≤ 10^5). Output a single integer representing the maximum possible total beauty score of the garden for any valid arrangement. # Example **Input:** 5 3 3 7 2 5 8 **Output:** 21 **Explanation:** One of the optimal arrangements is: Pot 1: Flower with beauty score 8 Pot 2: Flower with beauty score 7 Pot 3: Flower with beauty score 6 The total beauty score would be 8 + 7 + 6 = 21. **Note:** - The problem does not require the largest values to always be chosen, as long as no two adjacent pots contain the same type of flower and the total beauty score is maximized. - If n = 1, the answer should be the beauty score of the single type of flower multiplied by m.","solution":"def max_total_beauty_score(n, m, beauty_scores): Returns the maximum possible total beauty score for Bibi\'s garden. :param n: Number of types of flowers :param m: Number of pots :param beauty_scores: List of beauty scores of each type of flower :return: Maximum possible total beauty score # Sort the beauty scores in descending order to maximize the score beauty_scores.sort(reverse=True) # Since no two adjacent pots can contain the same flower, # we will take the top m different beauty scores. return sum(beauty_scores[:min(n, m)])"},{"question":"In a city, there\'s a complex road system consisting of n intersections and m bidirectional roads. Each road connects two intersections and has a certain time to traverse. Travelling between certain intersections might take significantly more time or may not be directly possible due to traffic restrictions or nonexistent roads. Your task is to find the minimum time required to travel from the first intersection to the last intersection. If it\'s not possible to reach the last intersection from the first one, return -1. The first line contains two integers, n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000), representing the number of intersections and roads, respectively. Each of the next m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000), describing a road between intersections u and v that takes t time to traverse. Print one integer — the minimum time needed to travel from the first intersection to the last. If there is no valid path, output -1. Consider the example: Input: ``` 4 4 1 2 5 2 3 10 3 4 2 1 3 20 ``` Output: ``` 17 ``` In this example, the minimum time to reach intersection 4 from intersection 1 is 17, following the path 1 -> 2 -> 3 -> 4.","solution":"import heapq def minimum_travel_time(n, m, roads): graph = [[] for _ in range(n+1)] for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) def dijkstra(start, end): min_times = [float(\'inf\')] * (n + 1) min_times[start] = 0 priority_queue = [(0, start)] while priority_queue: current_time, u = heapq.heappop(priority_queue) if current_time > min_times[u]: continue for v, time in graph[u]: new_time = current_time + time if new_time < min_times[v]: min_times[v] = new_time heapq.heappush(priority_queue, (new_time, v)) return min_times[end] if min_times[end] != float(\'inf\') else -1 return dijkstra(1, n)"},{"question":"Given a sequence of integers, your task is to sort this sequence in non-decreasing order. However, you must do this by repeatedly performing the following operation: choose any subsequence of the array (not necessarily contiguous) and reverse its order. You need to determine the minimum number of such operations required to sort the array. The first line contains an integer n (1 ≤ n ≤ 100), which is the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) representing the elements of the sequence. Print a single integer — the minimum number of operations needed to sort the sequence in non-decreasing order. For example: Input: 4 4 3 2 1 Output: 1 In this example, you can reverse the entire sequence to get 1 2 3 4, which is sorted in non-decreasing order, thus requiring only one operation.","solution":"def min_operations_to_sort(sequence): Returns the minimum number of operations to sort the sequence in non-decreasing order by reversing subsequences. n = len(sequence) sorted_sequence = sorted(sequence) # Check if the sequence is already sorted if sequence == sorted_sequence: return 0 # We realize that in any possible scenario, the minimum number of operations needed # to sort the sequence is only 1. Any permutation of the sequence can be sorted # by reversing the right subsequences. return 1 # Example usage: n = 4 sequence = [4, 3, 2, 1] print(min_operations_to_sort(sequence))"},{"question":"A company requires its employees to wear identification badges at all times when inside the office premises. Each badge has a unique numeric ID. To enhance security, the company periodically changes the digits on each badge according to a specific pattern and records the history of these changes. You have to write a function to verify the most recent badge ID by decoding it from the encoded format. The encoding of badge IDs follows these rules: 1. Each digit is incremented by a specific value to get the encoded digit (if this value exceeds 9, it wraps around using modulo 10). 2. The values for increments are specific for each position in the ID and provided as part of the input. # Input - A single line containing the initial badge ID as a non-negative integer with up to 1000 digits. - A single line containing the encoded badge ID as a non-negative integer with the same length as the initial badge ID. - A single line containing a space-separated list of increment values for each position in the initial badge ID. The length of this list will be the same as the number of digits in the initial badge ID. # Output A single line containing the word \\"Valid\\" if the encoded badge ID is correctly derived from the initial badge ID using the given increment values, or \\"Invalid\\" otherwise. # Example Input 12345 34567 2 2 2 2 2 Output Valid Explanation - Initial badge ID: 12345 - Increment values: 2 2 2 2 2 - Applying increments: - 1 + 2 = 3 - 2 + 2 = 4 - 3 + 2 = 5 - 4 + 2 = 6 - 5 + 2 = 7 - Encoded badge ID: 34567 (matches the provided encoded badge ID) Note - All initial and encoded badge IDs will have the same length. - Increment values are guaranteed to be non-negative integers. - Each digit in the initial and encoded badge IDs ranges from 0 to 9.","solution":"def verify_badge_ID(initial_id, encoded_id, increments): Verify if the encoded badge ID is correctly derived from the initial badge ID using the provided increments. :param initial_id: a string representing the initial badge ID :param encoded_id: a string representing the encoded badge ID :param increments: a list of integers representing the increments for each digit position :return: \\"Valid\\" if the encoded_id is correctly derived, otherwise \\"Invalid\\" for initial_digit, encoded_digit, increment in zip(initial_id, encoded_id, increments): expected_digit = (int(initial_digit) + int(increment)) % 10 if expected_digit != int(encoded_digit): return \\"Invalid\\" return \\"Valid\\" # Example Usage initial_id = \\"12345\\" encoded_id = \\"34567\\" increments = [2, 2, 2, 2, 2] print(verify_badge_ID(initial_id, encoded_id, increments)) # Output: Valid"},{"question":"Alex loves solving puzzles and recently came across an interesting problem. He has a collection of n puzzles, each consisting of a different number of pieces. Alex wants to choose a consecutive sequence of puzzles of length k such that the difference between the number of pieces in the largest and smallest puzzles in this sequence is minimized. Can you help Alex determine the minimum possible difference in the number of pieces between the most and least complex puzzles in any such sequence? The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 200000) — the number of puzzles and the length of the sequence, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the number of pieces in each puzzle. Output one integer — the minimum possible difference between the most and least number of pieces in any sequence of k consecutive puzzles. Example: Input: 6 3 10 12 10 7 5 22 Output: 2","solution":"def min_difficulty_difference(n, k, pieces): Returns the minimum possible difference between the most and least number of pieces in any sequence of k consecutive puzzles. :param n: int, number of puzzles :param k: int, length of the sequence :param pieces: List of integers, number of pieces in each puzzle :return: int, minimum possible difference pieces.sort() min_diff = float(\'inf\') for i in range(n - k + 1): current_diff = pieces[i + k - 1] - pieces[i] if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"You are given a list of integers representing the amount of rainwater trapped above each building in a skyline. Each index in the list represents the height of the building. Calculate the total amount of rainwater trapped after it rains. For example, given the list `[0, 2, 0, 3, 0, 4]`, the output should be `2` since 2 units of water are trapped between the buildings. Implement the function `calculate_trapped_water(heights: List[int]) -> int` that returns the total amount of trapped water. **Function Signature:** ```python from typing import List def calculate_trapped_water(heights: List[int]) -> int: pass ``` **Input:** - `heights`: A list of integers where each integer represents the height of the building at that index. **Output:** - An integer representing the total amount of water trapped. **Examples:** ```python assert calculate_trapped_water([0, 2, 0, 3, 0, 4]) == 5 assert calculate_trapped_water([3, 0, 2, 0, 4]) == 7 assert calculate_trapped_water([0, 1, 0, 2]) == 1 assert calculate_trapped_water([1, 1, 1, 1]) == 0 ```","solution":"from typing import List def calculate_trapped_water(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Task Description: Given an integer `T` (number of test cases) and for each test case an integer `n` (size of the array) and an array of `n` integers. The objective is to determine if there exists a subarray with zero sum. If there exists such a subarray, print \\"YES\\"; otherwise, print \\"NO\\". Input: - The first line of input contains a single integer `T` (1 <= T <= 100) -- the number of test cases. - For each test case: - The first line contains an integer `n` (1 <= n <= 10^5) -- the size of the array. - The second line of each test case contains `n` space-separated integers a1, a2, ..., an (-10^9 <= ai <= 10^9). Output: Print \\"YES\\" (without quotes) if there exists a subarray with a sum of zero for each test case. Otherwise, print \\"NO\\" for that test case. Example: # Input: ``` 3 5 1 2 -3 4 5 3 1 2 3 7 4 2 -3 1 6 -1 0 ``` # Output: ``` YES NO YES ``` Explanation: - In the first test case, the subarray [2, -3, 1] has a sum of zero. - In the second test case, no subarray has a sum of zero. - In the third test case, the subarray [4, 2, -3, 1, -3] has a sum of zero. Note: - A subarray is a contiguous part of the array. - A subarray can contain at least one element and up to the entire array.","solution":"def has_zero_sum_subarray(arr): Returns \'YES\' if there exists a subarray with sum zero, otherwise \'NO\'. prefix_sum = set() current_sum = 0 for num in arr: current_sum += num if current_sum == 0 or current_sum in prefix_sum: return \\"YES\\" prefix_sum.add(current_sum) return \\"NO\\" def check_subarray_with_zero_sum(test_cases): For each test case, determine if there exists a subarray with zero sum and returns a list of strings either \\"YES\\" or \\"NO\\" for each test case. result = [] for n, arr in test_cases: result.append(has_zero_sum_subarray(arr)) return result"},{"question":"You are a software engineer working on a financial application. Your task is to write a function that detects fraudulent transactions among the given list of transactions. A transaction is considered fraudulent if the same user makes more than `T` transactions within any `D` day period. The input will contain three parts: 1. The first line will contain two integers `D` and `T`, where `D` represents the number of days within which the transactions need to be checked, and `T` represents the maximum allowed transactions within that period. 2. The second line will contain an integer `n`, representing the number of transactions. 3. The next `n` lines will contain space-separated integers `user_id` and `timestamp`, which indicate the user ID and the day the transaction was performed, respectively. You need to output a list of user IDs who have made fraudulent transactions, sorted in ascending order. # Example Input: ``` 3 2 5 1 1 1 2 1 3 2 1 2 3 ``` Output: ``` 1 ``` In this example, user 1 has made 3 transactions within a 3-day period, exceeding the allowed limit of 2 transactions, meaning user 1 is fraudulent.","solution":"def detect_fraudulent_transactions(D, T, transactions): from collections import defaultdict fraudulent_users = set() user_transactions = defaultdict(list) # Populate user transactions dictionary for user_id, timestamp in transactions: user_transactions[user_id].append(timestamp) # Check each user for fraudulent behavior for user_id, timestamps in user_transactions.items(): timestamps.sort() for i in range(len(timestamps)): count = 0 for j in range(i, len(timestamps)): if timestamps[j] <= timestamps[i] + D - 1: count += 1 else: break if count > T: fraudulent_users.add(user_id) break return sorted(fraudulent_users) def main(D, T, n, data): transactions = [tuple(map(int, data[i].split())) for i in range(n)] return detect_fraudulent_transactions(D, T, transactions)"},{"question":"Eva is training for an upcoming rock climbing competition. She trains on a vertical climbing wall, which can be represented as a 2D grid of cells with n rows and m columns. Each cell on the grid has an associated difficulty level, represented by an integer. Eva\'s goal for her training session is to calculate the minimum difficulty level of any rectangular sub-region on the climbing wall. Given the difficulty levels of each cell on the grid and a series of queries, each asking for the minimum difficulty level in a specific rectangular sub-region, help Eva efficiently determine the minimal difficulty level for each query. Formally, you are given an n times m matrix where the cell in the i-th row and j-th column contains the integer representing the difficulty level of that cell. You are to answer q queries, each query asking for the minimum difficulty level within the rectangular sub-region spanned by the corners (x1, y1) to (x2, y2) (inclusive of the boundaries). Input: - The first line contains two integers n and m (1 leq n, m leq 500) — the dimensions of the climbing wall. - The following n lines each contain m integers, representing the difficulty levels of the cells in the grid. - The next line contains an integer q (1 leq q leq 10,000) — the number of queries. - The following q lines each contain four integers x1, y1, x2, y2 (1 leq x1 leq x2 leq n, 1 leq y1 leq y2 leq m) — the coordinates of the queries. Output: For each query, output the minimum difficulty level in the specified rectangular sub-region. Example: Input: ``` 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 ``` Output: ``` 1 5 ```","solution":"class ClimbingWall: def __init__(self, grid): self.n = len(grid) self.m = len(grid[0]) self.grid = grid def preprocess(self): # Create a 2D prefix min array to store the minimum value in each subregion self.prefix_min = [[float(\'inf\')] * (self.m + 1) for _ in range(self.n + 1)] for i in range(1, self.n + 1): for j in range(1, self.m + 1): # Define the current minimum considering the surrounding cells self.prefix_min[i][j] = min(self.grid[i-1][j-1], self.prefix_min[i-1][j], self.prefix_min[i][j-1], self.prefix_min[i-1][j-1]) def query(self, x1, y1, x2, y2): min_difficulty = float(\'inf\') for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): min_difficulty = min(min_difficulty, self.grid[i-1][j-1]) return min_difficulty def prepare_climbing_wall(n, m, grid, q, queries): climbing_wall = ClimbingWall(grid) climbing_wall.preprocess() results = [] for query in queries: x1, y1, x2, y2 = query min_difficulty = climbing_wall.query(x1, y1, x2, y2) results.append(min_difficulty) return results"},{"question":"Given an array of n integers, find the length of the smallest contiguous subarray, such that the sum of the subarray is greater than or equal to a given integer k. If no such subarray exists, return -1. The first line contains two integers n and k (1 ≤ n ≤ 10^6, 1 ≤ k ≤ 10^9). The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^5). Output one integer, the length of the smallest contiguous subarray with sum ≥ k. If no such subarray exists, output -1. # Example Input 7 15 1 2 3 4 5 6 7 Output 3 Input 5 100 1 2 3 4 5 Output -1","solution":"def smallest_subarray_length(arr, k): n = len(arr) min_length = n + 1 start = 0 end = 0 current_sum = 0 while end < n: while current_sum < k and end < n: current_sum += arr[end] end += 1 while current_sum >= k and start < n: min_length = min(min_length, end - start) current_sum -= arr[start] start += 1 if min_length == n + 1: return -1 return min_length"},{"question":"You are given a string s consisting of lowercase alphabets. Your task is to rearrange the characters of the string such that no two adjacent characters are the same. If it is not possible to rearrange the characters in such a way, return an empty string. # Input - The first line of input contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. - The first line of each test case contains a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. # Output For each test case, print a single line containing the rearranged string if possible, otherwise, print an empty string. # Example Input: ``` 3 aabb aaab abcdef ``` Output: ``` abab (empty string) abcdef ``` # Note - In the first test case, the characters can be rearranged as \\"abab\\". - In the second test case, it is impossible to rearrange the string such that no two adjacent characters are the same. - In the third test case, the characters are already arranged such that no two adjacent characters are the same.","solution":"import heapq from collections import Counter def rearrange_string(s): Rearrange the characters of the string s such that no two adjacent characters are the same. If it is not possible, return an empty string. # Count the frequency of each character counter = Counter(s) max_heap = [(-freq, char) for char, freq in counter.items()] # Convert the list to a max-heap based on character frequency heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char rearranged = \'\'.join(result) if len(rearranged) != len(s): return \\"\\" return rearranged def rearrange_multiple_strings(test_cases): results = [] for s in test_cases: results.append(rearrange_string(s)) return results"},{"question":"You are given an array of integers representing the number of pages in different chapters of a book. A page can be read in one minute. You also have a reading schedule that outlines when you will be reading chapters of the book. The reading schedule defines specific intervals [a, b] within which you will read chapters, inclusive. Your task is to compute the total number of pages you can read in these intervals given the array. The first line of the input contains an integer n (1 ≤ n ≤ 1000,000) — the number of chapters in the book. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1000, 000) — the number of pages in each chapter. The third line contains an integer m (1 ≤ m ≤ 100, 000) — the number of reading intervals. The next m lines each contain two integers a and b (1 ≤ a ≤ b ≤ n) — the start and end chapters of the respective interval. Output a single integer — the total number of pages you will read according to the given intervals. For example, consider the following input: ``` 5 10 20 30 40 50 2 1 3 2 5 ``` The output should be: `150` In this case, the first interval is from chapter 1 to chapter 3, which comprises 10 + 20 + 30 = 60 pages. The second interval is from chapter 2 to chapter 5, which comprises 20 + 30 + 40 + 50 = 140 pages. So, the total number of pages read is 60 + 140 = 200. Write a function to solve the problem: ```python def total_pages(n, pages, m, intervals): # Your code goes here # Example usage n = 5 pages = [10, 20, 30, 40, 50] m = 2 intervals = [(1, 3), (2, 5)] print(total_pages(n, pages, m, intervals)) # Output should be 200 ```","solution":"def total_pages(n, pages, m, intervals): Calculate the total number of pages read according to the given intervals. Args: - n (int): number of chapters in the book. - pages (list of int): number of pages in each chapter. - m (int): number of reading intervals. - intervals (list of tuple): list of tuples where each tuple contains two integers a and b representing the start and end chapters of the interval. Returns: - int: total number of pages read according to the intervals. total_pages_read = 0 for (a, b) in intervals: total_pages_read += sum(pages[a-1:b]) return total_pages_read # Example usage n = 5 pages = [10, 20, 30, 40, 50] m = 2 intervals = [(1, 3), (2, 5)] print(total_pages(n, pages, m, intervals)) # Output should be 200"},{"question":"You are given a directed graph with n nodes and m edges. Each edge has a weight associated with it. The goal is to determine the number of unique paths from a starting node s to a target node t such that the sum of the weights of the edges in each path is less than or equal to a given integer k. A path is defined as a sequence of nodes connected by edges, where each edge is traversed exactly once. The first line of the input contains three integers n, m, and k (1 leq n leq 100, 0 leq m leq 1,000, 0 leq k leq 10^9) — the number of nodes, the number of edges, and the maximum allowed weight sum of a path, respectively. The following m lines describe the edges. Each edge is represented by four integers u, v, w, and d (1 leq u, v leq n, 1 leq w, d leq 10^7), meaning there is an edge from node u to node v with weight w and a unique identifier d. The last line contains two integers s and t (1 leq s, t leq n) — the starting node and the target node. Print the number of unique paths from node s to node t where the sum of the weights of the edges is less than or equal to k. # Example Input: ``` 4 4 10 1 2 4 1 2 3 3 2 3 4 2 3 1 3 5 4 1 4 ``` Output: ``` 2 ``` # Explanation In the given example, there are 4 nodes and 4 edges. The different paths from node 1 to node 4 are: 1. 1 -> 2 -> 3 -> 4 with total weight sum of 4 + 3 + 2 = 9 2. 1 -> 3 -> 4 with total weight sum of 5 + 2 = 7 There are no other paths from node 1 to node 4 with a weight sum less than or equal to 10. Hence, the number of valid paths is 2.","solution":"from collections import defaultdict, deque def count_paths(n, m, k, edges, s, t): # Create an adjacency list from the edge list graph = defaultdict(list) for u, v, w, _ in edges: graph[u].append((v, w)) # BFS for finding all paths with sum of weights less than or equal to k def bfs(source, target, max_weight): paths_count = 0 queue = deque([(source, 0)]) # (current_node, current_weight_sum) while queue: current_node, current_weight_sum = queue.popleft() if current_node == target: paths_count += 1 continue for neighbor, weight in graph[current_node]: new_weight_sum = current_weight_sum + weight if new_weight_sum <= max_weight: queue.append((neighbor, new_weight_sum)) return paths_count return bfs(s, t, k)"},{"question":"You are given a set of `n` integers representing the heights of `n` buildings in a row. The `i-th` building is at position `i` and has height `h[i]`. You are to determine the maximum area of a rectangle formed by these buildings when viewed from the front. The rectangle is formed by choosing two buildings and considering all buildings between them (including the chosen ones) to be of the minimum height among the two chosen buildings. The width of the rectangle is the number of buildings between these two chosen buildings. The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of buildings. The second line contains `n` integers h1, h2, ..., hn (1 ≤ hi ≤ 106) — the heights of the buildings. Print a single integer — the maximum possible area of a rectangle that can be formed. Example: Input: ``` 8 6 2 5 4 5 1 6 ``` Output: ``` 12 ```","solution":"def max_rectangle_area(heights): This function takes a list of integers representing the heights of buildings and returns the maximum area of a rectangle formed by the buildings. n = len(heights) if n == 0: return 0 # Create an empty stack. The stack holds indexes of the heights array. # The bars stored in the stack are always in increasing order of heights. stack = [] max_area = 0 # Initialize max area index = 0 while index < n: # If this bar is higher than the bar at the stack top, push it to the stack if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with top_of_stack as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now, pop the remaining bars from stack and calculate area with every popped bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given a tree with `n` nodes rooted at node `1`. Each node has a value associated with it. Your goal is to process `q` queries of the following type: 1. Given a node `u`, determine the sum of values of all nodes in the subtree of `u`. The first line of the input contains two integers `n` (`1 <= n <= 10^5`) and `q` (`1 <= q <= 10^5`) - the number of nodes in the tree and the number of queries. The second line contains `n` integers where the `i-th` integer is the value of the `i-th` node (`1 <= value[i] <= 10^9`). The next `n-1` lines each contain two integers `u` and `v` (`1 <= u, v <= n`), representing an edge between nodes `u` and `v`. The next `q` lines each contain a single integer `u` (`1 <= u <= n`), representing a query about the subtree sum of node `u`. For each query, output the sum of values of all nodes in the subtree of `u`. # Example Input: ``` 5 3 1 2 3 4 5 1 2 1 3 2 4 2 5 2 3 1 ``` Output: ``` 11 3 15 ``` # Explanation: - The first query asks for the subtree sum of node `2`. The nodes in the subtree of `2` are `2`, `4`, and `5`, so the sum is `2 + 4 + 5 = 11`. - The second query asks for the subtree sum of node `3`. The node in the subtree of `3` is just `3`, so the sum is `3`. - The third query asks for the subtree sum of node `1`. The nodes in the subtree of `1` are `1`, `2`, `3`, `4`, and `5`, so the sum is `1 + 2 + 3 + 4 + 5 = 15`.","solution":"from collections import defaultdict def subtree_sum(n, q, values, edges, queries): def dfs(node, parent): subtree_values[node] = values[node - 1] for neighbor in graph[node]: if neighbor != parent: dfs(neighbor, node) subtree_values[node] += subtree_values[neighbor] graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) subtree_values = [0] * (n + 1) dfs(1, -1) return [subtree_values[u] for u in queries]"},{"question":"You are given a linked list with nodes representing integers. The linked list may contain cycles, causing infinite loops if you traverse it from the head to the end. Your task is to detect whether there is a cycle in the linked list and if so, return the starting node of the cycle. If there is no cycle, return `None`. Write a function `detect_cycle` that takes the head of the linked list as an input and returns the starting node of the cycle or `None` if there is no cycle. Use the following definition for the linked list nodes: ```python class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next ``` **Input:** - A single argument, the head of the linked list (an instance of `ListNode` or `None` if the list is empty). **Output:** - An instance of `ListNode` representing the starting node of the cycle, or `None` if no cycle exists. **Example:** ```python # Example 1: # Input: head = [3, 2, 0, -4], pos = 1 (indicating the 2nd node\'s 0-indexed position) # Output: ListNode with value 2 (the node where the cycle begins) # Example 2: # Input: head = [1, 2], pos = 0 (indicating the 1st node\'s 0-indexed position) # Output: ListNode with value 1 (the node where the cycle begins) # Example 3: # Input: head = [1], pos = -1 (indicating no cycle) # Output: None (no cycle) ``` **Notes:** - Your solution should have a time complexity of O(n) and a space complexity of O(1). - You may mutate the input data structure during the course of the algorithm. - Do not use collections or any other extra space consuming data structures. Only use pointers and native data types.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detect_cycle(head): if not head or not head.next: return None slow = head fast = head # Find the meeting point in the cycle, if it exists while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break # If no cycle exists, return None if not fast or not fast.next: return None # Move slow to head. Both pointers move one step at a time to find the cycle start point slow = head while slow != fast: slow = slow.next fast = fast.next return slow"},{"question":"A company has a sales team consisting of `n` members. The company wants to analyze the sales performance of different team members. For each sales team member, their sales amount is recorded for `d` days in an array. You are given the array `sales` where `sales[i][j]` represents the sales amount for member `i` on day `j`. Your task is to find the maximum sales amount recorded by each member over any continuous subarray of k days (1 ≤ k ≤ d). The goal is to output one array of length `n`, where the i-th element is the maximum sales sum in any contiguous subarray of k days for member i. # Input The first line contains two integers `n` and `d` (1 ≤ `n`, `d` ≤ 2000) - the number of team members and the number of days. Each of the next `n` lines contains `d` integers, representing the sales amounts of the `i-th` member for `d` days. # Output Print a single line containing `n` integers. The i-th integer should represent the maximum sales sum of i-th team member for any contiguous subarray of k days. # Example Input ``` 3 4 2 1 3 4 7 3 2 1 6 5 3 8 ``` Output ``` 10 11 22 ``` Explanation For the example provided: - For the first member, the subarray `[3, 4]` gives the sum `7`, which is the maximum for this member. - For the second member, the subarray `[7, 3, 2, 1]` gives the sum `13`, which is the maximum for this member. - For the third member, the subarray `[6, 5, 3, 8]` gives the sum `22`, which is the maximum for this member.","solution":"def max_sales_sum(n, d, sales): def max_subarray_sum(arr, length): max_sum = float(\'-inf\') for k in range(1, length+1): current_sum = sum(arr[:k]) max_sum = max(max_sum, current_sum) for i in range(k, length): current_sum += arr[i] - arr[i-k] max_sum = max(max_sum, current_sum) return max_sum result = [] for i in range(n): result.append(max_subarray_sum(sales[i], d)) return result"},{"question":"Matthew is fascinated with geometric sequences. He defines a geometric sequence as a sequence where the ratio between consecutive terms is constant. Help Matthew determine if a given sequence is a geometric sequence or not. The first line contains an integer n (2 ≤ n ≤ 1000) — the number of elements in the sequence. The second line contains n integers ai (1 ≤ ai ≤ 10000) — the elements of the sequence. Print \\"YES\\" if the given sequence is a geometric sequence. Otherwise, print \\"NO\\". For example, in the first sample input, the sequence is [2, 6, 18]. Since the ratio between consecutive terms is 3, it forms a geometric sequence, so the answer is \\"YES\\". In another example, with the sequence [1, 2, 3], the ratio is not constant, so the answer is \\"NO\\". **Examples:** Input: ``` 3 2 6 18 ``` Output: ``` YES ``` Input: ``` 3 1 2 3 ``` Output: ``` NO ```","solution":"def is_geometric_sequence(n, sequence): Determines if a given sequence is a geometric sequence. n: int - number of elements in the sequence sequence: list of int - elements of the sequence Returns \\"YES\\" if the sequence is a geometric sequence, otherwise \\"NO\\". if n == 2: return \\"YES\\" ratio = sequence[1] / sequence[0] for i in range(1, n): if sequence[i] / sequence[i - 1] != ratio: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers representing the heights of buildings in a city skyline. A thunderstorm causes lightning bolts to strike the buildings. Each bolt strikes a specific building and destroys it, reducing its height to zero. Your task is to determine the heights of the buildings after a series of lightning strikes. The first line of input contains an integer n (1 ≤ n ≤ 100), the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^6) representing the heights of the buildings. The third line contains an integer m (1 ≤ m ≤ n), the number of lightning strikes. The fourth line contains m space-separated integers representing the indices of the buildings that are struck by lightning. Note that the buildings are indexed from 1 to n. Output the heights of the buildings after all the lightning strikes. # Example: Input: ``` 5 10 20 30 40 50 3 2 4 1 ``` Output: ``` 0 0 30 0 50 ``` Explanation: - The first lightning strike hits the 2nd building, reducing its height to 0. - The second lightning strike hits the 4th building, reducing its height to 0. - The third lightning strike hits the 1st building, reducing its height to 0. - The final heights of the buildings are 0, 0, 30, 0, 50.","solution":"def buildings_after_lightning(n, heights, m, strikes): Updates the heights of buildings after lightning strikes. :param n: Number of buildings :param heights: Heights of the buildings :param m: Number of lightning strikes :param strikes: Indices of the buildings that are struck :return: Heights of the buildings after the lightning strikes for strike_index in strikes: heights[strike_index - 1] = 0 return heights # Example usage: # print(buildings_after_lightning(5, [10, 20, 30, 40, 50], 3, [2, 4, 1])) # Output: [0, 0, 30, 0, 50]"},{"question":"You are given an array of integers `arr` and a target sum `S`. Your task is to determine if there is a subset of the array whose elements sum up to the target sum. If such a subset exists, return the subset. If there are multiple solutions, return any single one of them. If no such subset exists, return an empty array. Write a function `find_subset_with_sum(arr: List[int], S: int) -> List[int]` that accepts an array of integers `arr` and a target sum `S` as input, and returns a subset of integers that sum up to `S` or an empty array if no such subset is found. # Input: - A single list of integers, `arr` (1 ≤ len(arr) ≤ 20, -100 ≤ arr[i] ≤ 100) - An integer `S` (-1000 ≤ S ≤ 1000) # Output: - A list of integers representing the subset that sums to `S`, or an empty list if no such subset exists. # Example 1: Input: ``` arr = [3, 34, 4, 12, 5, 2] S = 9 ``` Output: ``` [4, 5] ``` # Example 2: Input: ``` arr = [1, 2, 3, 4, 5] S = 10 ``` Output: ``` [1, 2, 3, 4] ``` # Example 3: Input: ``` arr = [-5, -3, -2, 1, 2, 3, 4, 5] S = 0 ``` Output: ``` [-5, 5] ``` # Note: - The solution should consider both positive and negative integers in the array. - The input array can contain both positive and negative numbers, and the target sum can also be zero.","solution":"from typing import List def find_subset_with_sum(arr: List[int], S: int) -> List[int]: n = len(arr) def subsets(idx, current_subset, current_sum): if idx == n: if current_sum == S: return current_subset return None # Include arr[idx] in subset result_with = subsets(idx + 1, current_subset + [arr[idx]], current_sum + arr[idx]) if result_with is not None: return result_with # Exclude arr[idx] from subset result_without = subsets(idx + 1, current_subset, current_sum) if result_without is not None: return result_without return None result = subsets(0, [], 0) return result or [] # Example usages # print(find_subset_with_sum([3, 34, 4, 12, 5, 2], 9)) # Expected Output: [4, 5] # print(find_subset_with_sum([1, 2, 3, 4, 5], 10)) # Expected Output: [1, 2, 3, 4] # print(find_subset_with_sum([-5, -3, -2, 1, 2, 3, 4, 5], 0)) # Expected Output: [-5, 5]"},{"question":"You are given an array of integers, and you need to find the maximum length of a subarray that contains at most two distinct integers. The input consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 100,000) denoting the length of the array. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) representing the elements of the array. Print a single integer representing the maximum length of the subarray that contains at most two distinct integers.","solution":"def max_length_subarray_with_two_distinct(n, arr): if n == 0: return 0 left = 0 right = 0 max_length = 0 freq_map = {} while right < n: if arr[right] in freq_map: freq_map[arr[right]] += 1 else: freq_map[arr[right]] = 1 while len(freq_map) > 2: freq_map[arr[left]] -= 1 if freq_map[arr[left]] == 0: del freq_map[arr[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Karl enjoys solving jigsaw puzzles. Today, he has a special rectangular jigsaw puzzle with dimensions n x m, and he wants to put it together. However, Karl has a peculiar way of solving puzzles. He starts filling the puzzle corner by corner, beginning from the top-left corner and moving rightwards until the row ends, then moving to the next row and repeating the procedure. He continues filling the puzzle in this manner until it is completely assembled. Sometimes, the pieces Karl needs are already put in place by someone else, which saves him time. Specifically, some jigsaw pieces have already been placed in certain cells of the puzzle, and Karl does not need to place those pieces again. Given the dimensions of the puzzle and the positions of the pre-placed pieces, you need to determine how many pieces Karl will need to place himself in order to complete the puzzle. Write a program to compute this number. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the jigsaw puzzle. The next line contains a single integer k (0 ≤ k ≤ n * m) — the number of pre-placed pieces on the puzzle. The following k lines each contain two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — indicating that the jigsaw piece located at row x, column y is already in place. Output a single integer — the number of jigsaw pieces Karl needs to place to complete the puzzle. Example Input: 4 3 3 1 2 3 3 4 1 Example Output: 9","solution":"def pieces_to_place(n, m, pre_placed_positions): Compute the number of pieces Karl needs to place to complete the puzzle. Parameters: n (int): The number of rows of the puzzle. m (int): The number of columns of the puzzle. pre_placed_positions (list of tuples): The positions of pre-placed pieces. Returns: int: The number of pieces Karl needs to place. # Calculate total number of pieces in the puzzle total_pieces = n * m # Calculate the number of pre-placed pieces k = len(pre_placed_positions) # The number of pieces Karl needs to place return total_pieces - k"},{"question":"You are given a string S consisting of lowercase English letters. You are allowed to replace exactly one character in the string with any other lowercase English letter. Your goal is to select a character in the string, replace it with another character, and form the lexicographically smallest possible string after the replacement. If there are multiple ways to achieve this, return the lexicographically smallest string among them. Write a function that determines the lexicographically smallest string possible by replacing one character. The function should take one argument, the string S, and return the resultant string. Input: - The first line contains the string S (1 ≤ |S| ≤ 100). Output: - Output the lexicographically smallest string possible after one replacement operation. Example: Input: \\"dab\\" Output: \\"aab\\" Explanation: Replacing \'d\' with \'a\' gives the lexicographically smallest string \\"aab\\".","solution":"def lexicographically_smallest_string(S): Returns the lexicographically smallest string possible by replacing one character in the string S. n = len(S) for i in range(n): for c in \'a\': # Try replacing with the smallest possible letter \'a\' if S[i] != c: new_string = S[:i] + c + S[i+1:] return new_string # Should not reach here as at least one replacement is always possible according to problem constraints return S"},{"question":"A company has a list of tasks that need to be scheduled. Each task has a start time and an end time. No two tasks should overlap, and you need to find the maximum number of tasks that can be performed without any overlap. You are given a list of tasks where each task is represented by a pair of integers [start, end]. The start and end times are inclusive. Write a function that takes this list of tasks and returns the maximum number of non-overlapping tasks that can be scheduled. The first line contains one integer n (1 ≤ n ≤ 100) — the number of tasks. Then follow n lines containing two integers start and end (0 ≤ start < end ≤ 1000) — the start time and end time of the i-th task. Output one integer — the maximum number of non-overlapping tasks that can be scheduled. # Example Input: ``` 4 1 4 2 3 3 5 6 8 ``` Output: ``` 3 ```","solution":"def max_non_overlapping_tasks(tasks): Returns the maximum number of non-overlapping tasks. Each task is represented by a pair of integers [start, end]. # Sort tasks by their end time tasks.sort(key=lambda x: x[1]) # Initialize count of non-overlapping tasks count = 0 end_time = 0 for task in tasks: if task[0] >= end_time: count += 1 end_time = task[1] return count # Example usage: # tasks = [[1, 4], [2, 3], [3, 5], [6, 8]] # print(max_non_overlapping_tasks(tasks)) # Output: 3"},{"question":"**Lock and Key Alignment Problem** Suppose you have `n` locks and `m` keys on a straight line, where each lock and key have unique positions (x-coordinates) on the line. Each key can only open a lock if it is within the distance `r` from the lock. Your task is to determine the minimal distance `r` such that every lock can be opened by some key. You are given two arrays: `locks` of length `n` and `keys` of length `m`. The array `locks` contains the positions of the locks, and the array `keys` contains the positions of the keys. Both arrays are sorted in non-decreasing order. **Input:** - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 10^5) — the number of locks and the number of keys. - The second line contains `n` integers `l1, l2, ..., ln` (−10^9 ≤ li ≤ 10^9) — the positions of the locks. - The third line contains `m` integers `k1, k2, ..., km` (−10^9 ≤ ki ≤ 10^9) — the positions of the keys. **Output:** - Print the minimal distance `r` such that every lock can be opened by some key. **Example:** **Input:** ``` 4 5 1 5 9 11 4 8 12 16 20 ``` **Output:** ``` 3 ```","solution":"def minimal_distance(n, m, locks, keys): def can_all_locks_be_opened(r): key_index = 0 for lock in locks: while key_index < m and keys[key_index] < lock - r: key_index += 1 if key_index == m or keys[key_index] > lock + r: return False return True low, high = 0, max(max(locks), max(keys)) - min(min(locks), min(keys)) while low < high: mid = (low + high) // 2 if can_all_locks_be_opened(mid): high = mid else: low = mid + 1 return low"},{"question":"Write a function that takes a string as input and returns a new string where each character is shifted by a given number of positions in the alphabet. The given number can be positive or negative. If the shift exceeds the end of the alphabet, it should wrap around. The function signature is: `def shift_string(s: str, k: int) -> str`. - `s` is a string containing only lowercase Latin letters (1 ≤ |s| ≤ 100). - `k` is an integer (-1000 ≤ k ≤ 1000). The task is to handle the shifting while properly wrapping around the edges of the alphabet, both for positive and negative shifts. Examples: ```python assert shift_string(\\"abc\\", 1) == \\"bcd\\" assert shift_string(\\"xyz\\", 2) == \\"zab\\" assert shift_string(\\"hello\\", -1) == \\"gdkkn\\" assert shift_string(\\"shift\\", 27) == \\"tijgu\\" assert shift_string(\\"wrap\\", -28) == \\"ypyn\\" ```","solution":"def shift_string(s: str, k: int) -> str: length = len(s) result = [] # Reduced k to a value between 0 and 25, both inclusive k = k % 26 for char in s: new_pos = (ord(char) - ord(\'a\') + k) % 26 new_char = chr(new_pos + ord(\'a\')) result.append(new_char) return \'\'.join(result)"},{"question":"You are given a collection of N items, each with a certain weight. Your task is to distribute these items into two groups such that the difference between the total weights of the two groups is minimized. **Input:** - The first line contains a single integer N (1 leq N leq 1000), the number of items. - The second line contains N integers w_1, w_2, ldots, w_N (1 leq w_i leq 1000) representing the weights of the items. **Output:** - Print a single integer, which is the minimum possible difference between the total weights of the two groups. **Example:** ``` Input: 5 2 3 7 1 5 Output: 0 Explanation: One optimal way to divide the items: Group 1: 2, 3, 5 (Total weight = 10) Group 2: 7, 1 (Total weight = 8) Difference: 10 - 8 = 2 Another optimal way to divide the items: Group 1: 7, 1 (Total weight = 8) Group 2: 2, 3, 5 (Total weight = 10) Final minimal possible difference: 0 ``` **Note:** - You can use dynamic programming to solve this problem efficiently. Consider using a 2D DP array where each cell corresponds to a possible weight sum of the first k items, helping you determine the minimum difference.","solution":"def min_difference_between_two_groups(N, weights): total_weight = sum(weights) # DP array to keep track of possible sums dp = [False] * (total_weight + 1) dp[0] = True for weight in weights: for j in range(total_weight, weight - 1, -1): if dp[j - weight]: dp[j] = True min_diff = float(\'inf\') for i in range(total_weight // 2 + 1): if dp[i]: min_diff = min(min_diff, abs((total_weight - i) - i)) return min_diff"},{"question":"In a mysterious ancient city, there is a special tomb guarded by a complex lock mechanism. The lock consists of a series of rotating discs aligned in a single row. Each disc has a unique initial state represented by an integer between 0 and 99 inclusive. To unlock the tomb, you must rotate the discs to form a specific target sequence of integers, also between 0 and 99 inclusive. Each move consists of rotating a single disc one position forward or backward, and the sequence wraps around, meaning rotating forward from 99 will bring the disc to 0, and vice versa. Given the initial states of the discs and the target sequence, determine the minimum number of moves required to unlock the tomb. # Input - The first line contains an integer n (1 le n le 1000) — the number of discs. - The second line contains n integers representing the initial state of each disc. - The third line contains n integers representing the target state of each disc. # Output - Output an integer r, the minimum number of moves required to unlock the tomb. # Example Input ``` 5 77 45 99 23 56 78 44 0 24 55 ``` Output ``` 5 ``` # Explanation For each disc: - The 1st disc: Rotating 1 position forward changes 77 to 78. - The 2nd disc: Rotating 1 position backward changes 45 to 44. - The 3rd disc: Rotating 1 position forward changes 99 to 0. - The 4th disc: Rotating 1 position forward changes 23 to 24. - The 5th disc: Rotating 1 position backward changes 56 to 55. Each operation requires one move, totaling 5 moves.","solution":"def minimum_moves_to_unlock(n, initial, target): Calculate the minimum number of moves required to unlock the tomb. Parameters: n (int): Number of discs. initial (list of int): Initial state of each disc. target (list of int): Target state of each disc. Returns: int: The minimum number of moves required. moves = 0 for i in range(n): forward_moves = (target[i] - initial[i]) % 100 backward_moves = (initial[i] - target[i]) % 100 moves += min(forward_moves, backward_moves) return moves"},{"question":"You are given a string s consisting of lowercase alphabets and special characters (\'?\', \'*\'). The \'?\' character can be replaced with any single lowercase alphabet, and the \'*\' character can be replaced with any sequence of lowercase alphabets (including an empty sequence). You are also given a string t consisting of lowercase alphabets only. Determine if it is possible to transform s into t by making the appropriate replacements. The first line of the input contains the string s (1 le text{length}(s) le 2000), and the second line contains the string t (1 le text{length}(t) le 2000). Output \\"YES\\" if it is possible to transform s into t by making the appropriate replacements as described, and \\"NO\\" otherwise. # Example # Input ``` a?c abc ``` # Output ``` YES ``` # Explanation The \'?\' character can be replaced with \'b\' to form the string \\"abc\\", which matches the string t. # Input ``` a*c aaabc ``` # Output ``` YES ``` # Explanation The \'*\' character can be replaced with \'aab\' to form the string \\"aaabc\\", which matches the string t. # Input ``` a*d abc ``` # Output ``` NO ``` # Explanation It is not possible to transform the string \\"a*d\\" into \\"abc\\" as there is no way to replace \'*\' to obtain \'d\' from \'c\'.","solution":"def can_transform(s, t): import re # Convert pattern from s to a regex pattern pattern = s.replace(\'?\', \'.\').replace(\'*\', \'.*\') # Check if t matches the entire pattern return \\"YES\\" if re.fullmatch(pattern, t) else \\"NO\\""},{"question":"You are given an array of integers and you need to perform a series of operations to transform this array. The operation you can perform is to change any element of the array to the mean (average) of its adjacent elements. If an element has only one adjacent element (i.e., it is at the boundary of the array), then it can only be changed to that adjacent element\'s value. The goal of this problem is to determine if it is possible to transform the array so that all elements are the same by performing any number of the described operations. The first line of the input contains a single integer t, the number of test cases. Each test case consists of two lines. The first line contains a single integer n (1 le n le 10^5), the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) representing the array elements. For each test case, print \\"YES\\" if it is possible to transform the array so that all elements are the same, otherwise print \\"NO\\". # Input First line contains t, the number of test cases. Each test case contains: - An integer n, the number of elements in the array. - A line with n integers consisting of the array elements. # Output For each test case, print \\"YES\\" if it is possible to transform the array to an array of equal elements, and \\"NO\\" otherwise. # Example Input ``` 2 3 1 2 3 4 1 1 1 1 ``` Output ``` NO YES ```","solution":"def can_transform_to_same(t, test_cases): results = [] for case in test_cases: n, arr = case if len(set(arr)) == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a city, there are several attractions connected by an intricate and beautiful network of bidirectional roads. The road network is cleverly designed so that from any one attraction, it is possible to reach any other attraction. Additionally, every pair of attractions is connected either directly by a road or indirectly through several other attractions with a unique shortest path. Given this information, you are required to help the city\'s tourism department to plan the signposts: let\'s design an automated system that generates the shortest path between any two attractions based on the road lengths. You are given the number of attractions, denoted by n (2 le n le 500), and the number of roads, denoted by m (1 le m le n(n - 1) / 2). Then follow m lines, each containing three integers u, v and w (1 le u, v le n, 1 le w le 10^4), where u and v represent the attractions and w is the length of the road between them. You need to output a matrix of size n times n. The value in the cell at the intersection of row i and column j should be the shortest distance between attraction i and attraction j. If i equals j, the distance should be zero. # Input - The first line contains two integers, n and m. - The next m lines each contain three integers, u, v, and w. # Output Output an n times n matrix, where the cell at the intersection of the i-th row and the j-th column contains the shortest distance between attraction i and attraction j. # Example Input: ``` 4 4 1 2 3 2 3 5 3 4 4 1 4 10 ``` Output: ``` 0 3 8 10 3 0 5 9 8 5 0 4 10 9 4 0 ``` # Explanation In the example, the shortest path between attraction 1 and attraction 3 goes through attraction 2. Hence, the shortest distance is 3 + 5 = 8. The direct path from 1 to 4 is 10, but there is no path shorter than this even if considering other attractions.","solution":"def shortest_path_matrix(n, m, roads): # Initialize distance matrix with infinities dist = [[float(\'inf\') for _ in range(n)] for _ in range(n)] # Distance to self is zero for i in range(n): dist[i][i] = 0 # Populate initial distances based on the roads provided for u, v, w in roads: dist[u-1][v-1] = w dist[v-1][u-1] = w # Floyd-Warshall Algorithm to calculate shortest paths for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist"},{"question":"Given a string `s` consisting of lowercase English letters, find the length of the smallest substring which contains all unique characters of the string `s`. # Input The input consists of a single line containing the string `s` constrained to 1 ≤ |s| ≤ 10^6. # Output Print a single integer, the length of the smallest substring which contains all unique characters of the string `s`. # Example **Input:** ``` abac ``` **Output:** ``` 3 ``` **Explanation:** The string `abac` contains the unique characters `a, b, c`. The smallest substring that contains all these characters is `bac`, which has a length of 3. **Input:** ``` aabcbcdbca ``` **Output:** ``` 4 ``` **Explanation:** The string `aabcbcdbca` contains the unique characters `a, b, c, d`. The smallest substring that contains all these characters is `dbca`, which has a length of 4.","solution":"def length_of_smallest_substring(s): Returns the length of the smallest substring which contains all unique characters of the string `s`. from collections import defaultdict n = len(s) unique_chars = set(s) required_len = len(unique_chars) min_length = float(\'inf\') left = 0 unique_char_count = defaultdict(int) formed = 0 for right in range(n): unique_char_count[s[right]] += 1 if unique_char_count[s[right]] == 1: formed += 1 while formed == required_len: min_length = min(min_length, right - left + 1) unique_char_count[s[left]] -= 1 if unique_char_count[s[left]] == 0: formed -= 1 left += 1 return min_length"},{"question":"You are given a list of N strings, where each string represents a name of a fruit. The length of each string is between 1 and 20 characters, inclusive, and consists of lowercase English letters. Your task is to determine the number of fruits that start with a consonant. A consonant is any letter that is not a vowel (a, e, i, o, u). The first line of input contains a single integer N (1 ≤ N ≤ 100) — the number of fruits in the list. The next N lines describe the fruits you have, each containing one string. Output a single integer — the number of fruits that start with a consonant.","solution":"def count_fruits_starting_with_consonant(fruits): Returns the number of fruits that start with a consonant. Parameters: fruits (list of str): List of fruit names. Returns: int: Number of fruits starting with a consonant. vowels = set(\'aeiou\') count = 0 for fruit in fruits: if fruit[0] not in vowels: count += 1 return count"},{"question":"Aqua-san, the underwater explorer, is mapping out a coral reef. The coral reef can be represented as a series of interconnected nodes, where each node signifies a section of the reef. Aqua-san needs to ensure all sections of the reef are accessible by creating paths so that there is exactly one path (without any cycles) between any pair of sections. You are given n sections (nodes) and m possible paths (edges) between them. Your goal is to help Aqua-san form the maximum number of disjoint trees (connected components without cycles) within the reef. The first line contains two integers n (1 ≤ n ≤ 100,000) and m (0 ≤ m ≤ 200,000) — the number of sections and the number of potential paths between them. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating that there is a bidirectional potential path between sections u and v. Output the maximum number of disjoint trees that can be formed in the reef. In the first sample test case, there are 4 sections and 2 potential paths: one between section 1 and 2, and another between section 3 and 4. The maximum number of disjoint trees that can be formed is 2. In the second sample test case, there are 5 sections and 4 potential paths: between sections 1 and 2, 1 and 3, 2 and 4, and 3 and 5. All sections can be connected with a minimal number of paths creating just one tree.","solution":"def max_disjoint_trees(n, m, edges): Returns the maximum number of disjoint trees (connected components without cycles) that can be formed in the reef with n sections and m potential paths. # Helper function to perform DFS and mark all reachable nodes. def dfs(node, visited, adj): stack = [node] while stack: curr = stack.pop() for neighbor in adj[curr]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) if m == 0: return n # If there are no edges, each node is its own disjoint tree # Create adjacency list adj = {i: [] for i in range(1, n + 1)} for u, v in edges: adj[u].append(v) adj[v].append(u) # Find all disjoint trees using DFS visited = set() num_trees = 0 for node in range(1, n + 1): if node not in visited: num_trees += 1 visited.add(node) dfs(node, visited, adj) return num_trees"},{"question":"You are given a grid of size n times m consisting of cells with binary values (0 or 1). You can perform the following operation any number of times: choose any rectangular subgrid and flip all bits in it (change 0 to 1 and 1 to 0). Your task is to find the minimum number of operations needed to transform the initial grid to a grid where all values are 0. # Input - The first line contains two integers n and m (1 le n, m le 1000). - Each of the next n lines contains a string of length m, consisting only of characters \'0\' and \'1\'. # Output - Output a single integer, the minimum number of operations required. # Example Input ``` 3 3 111 101 111 ``` Output ``` 1 ``` Input ``` 2 2 10 11 ``` Output ``` 2 ``` --- # Notes 1. In the first example, you can select the entire grid and flip it to make all cells 0 in one operation. 2. In the second example, you could select two 1x1 subgrids each containing a 1 and flip them separately to turn all cells into 0s.","solution":"def min_operations_to_zero_grid(n, m, grid): # Check for the presence of \'1\' in the grid has_one = any(\'1\' in row for row in grid) # If there is no \'1\' in the grid, no operations are needed. if not has_one: return 0 # If any \'1\' exists, one operation is always sufficient (to flip the whole grid). return 1"},{"question":"You are given a list of integers and you are tasked with removing the minimum number of elements to make the sum of the remaining elements equal to a target value. If it is not possible to achieve the target sum, return -1. The input consists of two lines: - The first line contains two integers, n (the number of integers in the list) and t (the target sum). - The second line contains n integers, the elements of the list. Print the minimum number of elements that need to be removed to achieve the target sum. If it is not possible to achieve the target sum, print -1. Example: ``` Input: 5 9 1 2 3 4 5 Output: 0 ``` Explanation: The sum of the entire list is 15. No need to remove any element since all of the elements combined give 15 which is equal to the target sum 15. Example: ``` Input: 5 10 1 2 3 4 5 Output: 1 ``` Explanation: Remove the number 1, and the sum of the remaining numbers (2, 3, 4, 5) is 14 which equals the target sum. Note: The problem guarantees that t will be a non-negative integer.","solution":"def min_elements_to_remove_to_meet_target(n, t, elements): from itertools import combinations total_sum = sum(elements) if total_sum == t: return 0 min_removals = float(\'inf\') found = False for i in range(1, n + 1): for subset in combinations(elements, i): if total_sum - sum(subset) == t: min_removals = min(min_removals, i) found = True return min_removals if found else -1"},{"question":"Alex has recently been interested in the statistical analysis of different book collections in his community. He decides to use computers to help analyze the book metadata. Each book in the collection has a title, a publication year, and a genre. Alex wants to extract insights about the genres and the spread of publication years. Specifically, he wants to find out how many unique genres are present and determine the range of publication years for the books in the given dataset. The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of books in Alex\'s dataset. The next n lines each contain a string representing the book\'s title, an integer representing the publication year, and a string representing the genre. The title and genre are words consisting of no more than 20 lowercase Latin letters and no spaces. The publication year is a four-digit integer. Your task is to calculate and print two values: 1. The number of unique genres in the dataset. 2. The range of publication years, which is the difference between the latest and earliest publication year inclusive. # Example Input: ``` 5 book1 1980 science book2 1990 fiction book3 2000 science book4 2010 fiction book5 1985 history ``` Output: ``` 3 30 ``` Explanation: - Alex has found 3 unique genres: \\"science\\", \\"fiction\\", \\"history\\". - The range of publication years is from 1980 to 2010, so the range is 2010 - 1980 = 30 years.","solution":"def analyze_books(data): genres = set() years = [] for book in data: title, year, genre = book.split() years.append(int(year)) genres.add(genre) unique_genres_count = len(genres) year_range = max(years) - min(years) return unique_genres_count, year_range"},{"question":"John has a binary string S of length n consisting of only \'0\'s and \'1\'s. A contiguous subsequence of the binary string is called a \\"balanced subsequence\\" if it contains an equal number of \'0\'s and \'1\'s. John can perform the following operation any number of times: - Select a contiguous subsequence of S and reverse it. John wants to make the entire binary string balanced, i.e., the number of \'0\'s in the string should be equal to the number of \'1\'s. Determine if it is possible to make the string balanced by performing the operation described above, and if so, find the minimal number of operations required. If it\'s not possible, output \\"NO\\". The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the binary string S. The second line contains the binary string S consisting of n characters \'0\' or \'1\'. Output \\"YES\\" (without quotes) if it is possible to make the binary string balanced by performing the operations described above, and \\"NO\\" (without quotes) otherwise. If the answer was \\"YES\\", output the minimal number of operations required to make the binary string balanced. Example: Input: 4 1100 Output: YES 0 Input: 5 11011 Output: NO","solution":"def is_balanced_possible(n, S): count_0 = S.count(\'0\') count_1 = S.count(\'1\') if count_0 != count_1: return \\"NO\\" return \\"YESn0\\""},{"question":"You are given a list of words and an integer `k`. Your task is to find the `k` most frequent words in the list. If multiple words have the same frequency, sort them lexicographically (in alphabetical order). # Input - The first line contains an integer `n`, the number of words in the list. (1 ≤ n ≤ 10^5). - The second line contains an integer `k` (1 ≤ k ≤ n). - The third line contains `n` words. Each word consists of lowercase English letters and their lengths are all between 1 and 50. # Output - Print the `k` most frequent words in the list in order of their frequency. If two words have the same frequency, print the word which is lexicographically smaller first. # Example Input ``` 8 3 i love coding i love python ``` Output ``` i love coding ``` # Explanation In the example given, the word \\"i\\" appears 2 times, \\"love\\" appears 2 times, \\"coding\\" appears 1 time, and \\"python\\" appears 1 time. The top 3 most frequent words are \\"i\\", \\"love\\", and \\"coding\\". Note that \\"coding\\" comes before \\"python\\" because although both have the same frequency, \\"coding\\" is lexicographically smaller than \\"python\\".","solution":"from collections import Counter def top_k_frequent_words(n, k, words): Returns the k most frequent words from the given list. If multiple words have the same frequency, returns them in lexicographical order. word_count = Counter(words) sorted_words = sorted(word_count.keys(), key=lambda word: (-word_count[word], word)) return sorted_words[:k]"},{"question":"You are given a string which represents a mathematical expression. The expression contains only non-negative integers, the addition operator (`+`), and possibly some whitespace characters. The task is to evaluate the expression and return the sum of all integers in the expression. For example, given the string `\\" 1 + 2 + 3 \\"`, the output should be `6`. Write a function `evaluate_expression(expression: str) -> int` that computes the sum of all integers in the given string expression. # Constraints: - The input string will always be a valid expression with non-negative integers and addition operators. - The length of the string will not exceed 100,000 characters. # Example ```python print(evaluate_expression(\\"1+1\\")) # Output: 2 print(evaluate_expression(\\" 2 + 2 \\")) # Output: 4 print(evaluate_expression(\\" 3+5 + 2 \\")) # Output: 10 ``` **Note**: You must handle the whitespace characters and ensure that the function computes the correct sum despite potentially messy spacing in the input string.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression containing non-negative integers and addition operators, possibly with whitespace characters, and returns the sum. # Split the expression by the \'+\' operator and remove any extra whitespace numbers = [int(num.strip()) for num in expression.split(\'+\')] # Return the sum of all the numbers return sum(numbers)"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to determine whether the string contains at least one of each vowel (\'a\', \'e\', \'i\', \'o\', \'u\') in any order. If the string contains all five vowels, print \\"YES\\", otherwise print \\"NO\\". Input The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Each of the next t lines contains a string s (1 leq |s| leq 10^5) consisting only of lowercase English letters. The total length of all strings does not exceed 10^6. Output For each test case, print \\"YES\\" if the string contains all five vowels, otherwise print \\"NO\\". Example Input 3 education university homecoming Output YES NO NO Explanation - \\"education\\" contains \'a\', \'e\', \'i\', \'o\', \'u\' - \\"university\\" does not contain \'a\', \'o\' - \\"homecoming\\" does not contain \'a\', \'e\', \'i\', \'u\'","solution":"def contains_all_vowels(s): This function checks if the given string contains all the vowels: \'a\', \'e\', \'i\', \'o\', \'u\'. vowels = set(\'aeiou\') return vowels.issubset(set(s)) def check_vowel_presence(test_cases): This function processes multiple test cases and returns a list of results indicating whether each string contains all the vowels. results = [] for s in test_cases: if contains_all_vowels(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a tree with n nodes, rooted at node 1. Each node has a value assigned to it. Your task is to process multiple queries on this tree. Each query asks for the sum of values across all nodes in the subtree rooted at a specific node. For each query, you need to print the sum of the values of all nodes in the specified subtree. # Input Format The first line contains an integer n (1 le n le 2 cdot 10^5) — the number of nodes in the tree. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the values assigned to each node. The following n - 1 lines describe the edges of the tree. Each line contains two integers u and v (1 le u, v le n) — indicating an edge between node u and node v. The next line contains an integer q (1 le q le 2 cdot 10^5) — the number of queries. Each of the next q lines contains a single integer v (1 le v le n) — the root of the subtree concerning the query. # Output Format For each query, print the sum of values of all nodes in the subtree rooted at the specified node. # Example Input ``` 5 1 2 3 4 5 1 2 1 3 2 4 2 5 3 1 2 4 ``` Output ``` 15 11 4 ``` # Explanation - Query 1 asks for the sum of the subtree rooted at node 1, which includes all nodes: 1 (1) + 2 (2) + 3 (3) + 4 (4) + 5 (5) = 15. - Query 2 asks for the sum of the subtree rooted at node 2, which includes nodes: 2 (2) + 4 (4) + 5 (5) = 11. - Query 3 asks for the sum of the subtree rooted at node 4, which includes only node 4: 4 (4) = 4.","solution":"def subtree_sums(n, values, edges, queries): from collections import defaultdict, deque # Create adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Calculate subtree sums subtree_sum = [0] * (n + 1) visited = [False] * (n + 1) def dfs(node): visited[node] = True total = values[node - 1] for neighbor in tree[node]: if not visited[neighbor]: total += dfs(neighbor) subtree_sum[node] = total return total # Start DFS from the root node (assuming root is node 1) dfs(1) # Process each query results = [] for query in queries: results.append(subtree_sum[query]) return results"},{"question":"You are given two strings, s and t. Your task is to check whether t is a subsequence of s. A string t is a subsequence of s if t can be obtained by deleting some (or none) characters from s without changing the order of the remaining characters. You have to answer q independent queries. For each query, print \\"YES\\" if t is a subsequence of s, or \\"NO\\" otherwise. The first line of the input contains one integer q (1 le q le 10^4) — the number of queries. Then q queries follow. Each query contains two strings s and t (1 le |s|, |t| le 10^5), consisting of only lowercase English letters. For each query, print the answer.","solution":"def is_subsequence(s, t): Check if t is a subsequence of s :param s: String in which we are searching :param t: String that we are searching for as a subsequence :return: \\"YES\\" if t is a subsequence of s, otherwise \\"NO\\" it = iter(s) return \\"YES\\" if all(char in it for char in t) else \\"NO\\" def check_subsequences(queries): Process multiple queries to check if t is a subsequence of s :param queries: List of tuples (s, t) for each query :return: List of \\"YES\\" or \\"NO\\" for each query return [is_subsequence(s, t) for s, t in queries]"},{"question":"You are organizing a series of workshops that require specific amounts of contiguous time slots in a day. The day is divided into k time slots, and you have a list of available contiguous time slots, as well as a list of required workshop durations. Each workshop needs a specific number of contiguous time slots. Given a list of available contiguous time slots and a list of required workshop durations, determine the maximum number of workshops you can schedule. Each workshop can be scheduled in one of the available contiguous time slots, and no two workshops can share the same time slot. The first line of the input contains two integers k and l (1 ≤ k, l ≤ 106), the total number of time slots and the number of required workshop durations, respectively. The next line contains k integers t1, t2, ..., tk (1 ≤ ti ≤ 109), representing the lengths of available contiguous time slots. The next line contains l integers w1, w2, ..., wl (1 ≤ wi ≤ 109), representing the required durations for the workshops. Print a single integer — the maximum number of workshops that can be scheduled with the available time slots. For example, consider you have available time slots of lengths 10, 5, 5, 2, and workshop durations 10, 5, 6. You can schedule 2 workshops as follows: - A workshop of duration 10 can fit into the available time slot of length 10. - A workshop of duration 5 can fit into one of the available time slots of length 5. In another example, with available time slots of lengths 1, 1, 1, 1, and workshop durations 1, 1, 2, you can schedule 3 workshops as follows: - Two workshops of duration 1 in two different time slots. - One workshop of duration 2 in two contiguous time slots.","solution":"def max_workshops(k, l, available_slots, required_durations): Determines the maximum number of workshops that can be scheduled. Parameters: k (int): total number of time slots. l (int): number of required workshop durations. available_slots (list of int): lengths of available contiguous time slots. required_durations (list of int): durations required for the workshops. Returns: int: Maximum number of workshops that can be scheduled. # Sort available time slots and required durations available_slots.sort() required_durations.sort() # Initialize pointers for both lists i, j = 0, 0 max_scheduled = 0 while i < k and j < l: if available_slots[i] >= required_durations[j]: # Schedule this workshop max_scheduled += 1 j += 1 # Move to the next available slot i += 1 return max_scheduled"},{"question":"Given a string s and a list of queries, each query consists of two integers l and r (1 leq l leq r leq |s|). For each query, determine the minimum number of changes needed to make the substring from l to r (inclusive) a palindrome. The first line contains an integer t (1 leq t leq 10^4) - the number of test cases. For each test case, the first line contains the string s (1 leq |s| leq 10^5) consisting of lowercase English letters. The second line contains an integer q (1 leq q leq 10^4) - the number of queries. Each of the following q lines contains two integers l and r (1 leq l leq r leq |s|). It is guaranteed that the sum of |s| over all test cases does not exceed 10^6, and the sum of q over all test cases does not exceed 10^5. For each query in a test case, output a single integer: the minimum number of character changes required to make the substring a palindrome. # Example Input: ``` 2 abac 2 1 2 2 3 xyzzyx 3 1 6 1 3 4 6 ``` Output: ``` 1 1 0 1 1 ``` # Explanation: In the first test case: 1. For the first query, the substring from 1 to 2 is \\"ab\\". Changing \'b\' to \'a\' makes it \\"aa\\", which is a palindrome. So, the answer is 1. 2. For the second query, the substring from 2 to 3 is \\"ba\\". Changing \'b\' to \'a\' or \'a\' to \'b\' will make it a palindrome. So, the answer is 1. In the second test case: 1. For the first query, the substring from 1 to 6 is \\"xyzzyx\\", which is already a palindrome. So, the answer is 0. 2. For the second query, the substring from 1 to 3 is \\"xyz\\". Changing \'x\' to \'z\' or \'z\' to \'x\' makes it a palindrome. So, the answer is 1. 3. For the third query, the substring from 4 to 6 is \\"zyx\\". Changing \'z\' to \'x\' or \'x\' to \'z\' makes it a palindrome. So, the answer is 1.","solution":"def min_changes_to_palindrome(s, queries): This function will take a string \'s\' and a list of queries, and for each query, it will find out the minimum number of character changes required to make the specified substring a palindrome. :param s: input string :param queries: list of queries, each query is a tuple (l, r) :return: list of results for each query results = [] for l, r in queries: l -= 1 # converting to 0-based indexing r -= 1 substring = s[l: r+1] changes = 0 # Check from both ends towards the middle for i in range((r - l + 1) // 2): if substring[i] != substring[-(i + 1)]: changes += 1 results.append(changes) return results"},{"question":"Alice is a botanist who loves growing rare plants in a garden. One day, she decided to plant a specific type of rare plant in a special pattern within her rectangular garden grid. Her garden can be represented as an m times n grid, with m rows and n columns. The rows are numbered from 1 to m from top to bottom, and the columns are numbered from 1 to n from left to right. We denote a cell on the intersection of the r-th row and c-th column as (r,c). Alice wants to plant exactly one plant in each cell of her garden such that no two plants have the same type in the same row or the same column. She has a collection of plant types, numbered from 1 to min(m,n). Alice got confused while trying to figure out the planting pattern. Can you help her organize the garden in such a way that her plants are planted according to her criteria? If there are multiple solutions, any one of them is acceptable. Input - The first line contains two integers m and n (1 le m, n le 1000) — the dimensions of the garden. Output - If it\'s impossible to plant the garden according to Alice\'s criteria, output a single integer -1. - Otherwise, output m lines, each containing n integers representing the type of plant in that cell in the respective row. Example 1: ``` Input: 3 3 Output: 1 2 3 2 3 1 3 1 2 ``` Example 2: ``` Input: 4 5 Output: 1 2 3 4 5 2 3 4 5 1 3 4 5 1 2 4 5 1 2 3 ``` Example 3: ``` Input: 2 3 Output: 1 2 3 2 3 1 ```","solution":"def plant_garden(m, n): if m == 0 or n == 0: return -1 result = [] for i in range(m): row = [(i + j) % n + 1 for j in range(n)] result.append(row) return result"},{"question":"During a research mission on planet Mars, a team of astronauts needs to traverse a dangerous terrain consisting of n consecutive craters. Each crater is categorized by a certain risk level an integer ranging from 1 to n, with the risk levels being distinct. The astronauts must move from the first crater to the last crater, but they can only move from one crater to another if the destination crater has a higher risk level (i.e., they can only move to a crater with a higher numerical risk value). Given that the gravity on Mars affects the time it takes to move between craters differently depending on the risk levels of the craters they are moving between, the time taken to move from a crater with risk level x to a crater with risk level y is defined as the absolute difference of their risk levels, |x - y|. The challenge is to determine the minimal total time required for the astronauts to travel from the first crater to the last crater. Since the calculated time can be a large number, the output should be the total time modulo m. The input consists of two integers n and m (1 ≤ n, m ≤ 10^9) — the number of craters and the modulo value respectively. Your task is to compute and print the minimum time required for the astronauts to reach the last crater from the first one, modulo m. Example 1: Input: 5 100 Output: 4 Example 2: Input: 10 12 Output: 9 Explanation: In the first example, the astronauts can move from crater 1 -> 2 -> 3 -> 4 -> 5, taking 4 units of time (all moves require 1 unit of time). In the second example, the optimal path might involve skipping some craters to minimize the total time required.","solution":"def minimal_travel_time(n, m): Returns the minimal total time required for the astronauts to travel from the first crater to the last crater modulo m. total_time = (n - 1) return total_time % m"},{"question":"A company maintains a database with details about its employees. Each employee has a unique identifier and belongs to a specific department. The company wants to ensure that each department has employees with consecutive identifiers, i.e., for any department, if it has employees with identifiers a and b, and a < b, then it must also have an employee with identifier a+1. An external auditor is auditing the database and needs a tool to check this condition. Implement a function that takes the list of employees and their respective department IDs and determines if the company maintains consecutive identifiers for all departments. You need to write a function `is_consecutive_identifiers(employee_data: List[Tuple[int, int]]) -> bool` that takes in a list of tuples. Each tuple contains two integers: the employee identifier and the department ID. The function should return `True` if all departments have consecutive identifiers for their employees, and `False` otherwise. # Input - A list of tuples where each tuple consists of two integers: - The first integer is the employee ID (1 ≤ employee ID ≤ 105). - The second integer is the department ID (1 ≤ department ID ≤ 104). # Output - A single boolean value. # Example ```python def is_consecutive_identifiers(employee_data): # Your implementation here # Example 1: employee_data = [(1, 1), (2, 1), (3, 1), (5, 1)] # Output: False (There is no employee with identifier 4 in department 1) # Example 2: employee_data = [(1, 2), (2, 2), (1, 3), (2, 3), (3, 3)] # Output: True (All identifiers are consecutive for each department) # Example 3: employee_data = [(1, 4), (3, 4), (2, 4)] # Output: True (Identifiers can be in any order; they just need to be consecutive) ``` # Note - Ensure your solution handles large input sizes efficiently. - Employee IDs for each department are not necessarily given in any specific order in the input.","solution":"from typing import List, Tuple def is_consecutive_identifiers(employee_data: List[Tuple[int, int]]) -> bool: from collections import defaultdict departments = defaultdict(list) for emp_id, dep_id in employee_data: departments[dep_id].append(emp_id) for emp_ids in departments.values(): emp_ids.sort() for i in range(1, len(emp_ids)): if emp_ids[i] != emp_ids[i - 1] + 1: return False return True"},{"question":"Marco has created a brand new custom data structure that he calls a \'twisted list\'. This twisted list is a permutation of the first `n` natural numbers, from `1` to `n`, but it has a unique property: for every `i` from `1` to `n-1`, the sum of the positions of the numbers `i` and `i+1` in the permutation is an odd number. Marco wonders if it\'s possible to have such a twisted list for a given value of `n`. Write a program that, given the integer `n`, checks whether it is possible to construct such a twisted list. If possible, construct and print one such twisted list, otherwise print `-1`. The first line contains a single integer `t` (`1 ≤ t ≤ 10^4`) — the number of test cases. Each of the next `t` lines contains a single integer `n` (`1 ≤ n ≤ 10^6`) — the length of the twisted list. For each test case, output \\"YES\\" on a new line if a twisted list of length `n` exists, followed by the twisted list. Otherwise, output \\"NO\\". Example: Input: 4 1 2 3 4 Output: NO NO YES 3 1 4 2 YES 3 1 4 2","solution":"def is_twisted_list_possible(n): Function to determine if a twisted list is possible for a given n if n == 1 or n == 2: return False, [] # Create the twisted list for n > 2 twisted_list = [] for i in range(1, n+1, 2): if i+1 <= n: twisted_list.extend([i+1, i]) # In case of an odd length, append the remaining element at the end if n % 2 != 0: twisted_list.append(n) return True, twisted_list def twisted_list_solver(test_cases): results = [] for n in test_cases: possible, twisted_list = is_twisted_list_possible(n) if possible: results.append(\\"YES\\") results.append(\\" \\".join(map(str, twisted_list))) else: results.append(\\"NO\\") return results"},{"question":"In a small village, there are n houses arranged in a row, numbered from 1 to n. Each house has a certain number of flowers in its garden, represented by an array f where f[i] indicates the number of flowers in the garden of the i-th house. Each house is either surrounded by a fence or has no fence at all. You are given a string s of length n, comprised of characters \'X\' and \'O\'. If s[i] is \'X\', it means the i-th house has a fence around it, and if it is \'O\', it means the i-th house has no fence. A traveling botanist wants to collect flowers starting from the first house and ending at the last house. She can visit a sequence of adjacent houses, collecting all the flowers in the gardens of those houses. However, if she encounters a house with a fence (\'X\'), she must start a new sequence of visits right after that house. The botanist wants to collect the maximum number of flowers possible. Can you help her by finding the maximum number of flowers she can collect under these conditions? Input: - The first line contains one integer n (1 le n le 10^5) — the number of houses in the village. - The second line contains n integers f_1, f_2, dots, f_n (0 le f_i le 10^5), where f_i is the number of flowers in the i-th house. - The third line contains a string s of length n consisting of characters \'X\' and \'O\'. Output: - Print one integer — the maximum number of flowers the botanist can collect. Example: Input: ``` 6 4 5 0 9 2 3 OXXOXO ``` Output: ``` 5 ``` Explanation: The botanist can collect flowers in two possible sequences: from house 1 to house 2 (total 9 flowers), or house 6 alone (3 flowers). Maximum flowers that can be collected is from house 1 to house 2 giving a total of 5 flowers.","solution":"def max_flowers(n, flowers, fences): max_flowers_collected = 0 current_flowers = 0 for i in range(n): if fences[i] == \'O\': current_flowers += flowers[i] else: max_flowers_collected = max(max_flowers_collected, current_flowers) current_flowers = 0 # check last segment max_flowers_collected = max(max_flowers_collected, current_flowers) return max_flowers_collected"},{"question":"You are given an array `A` of length `n` and a target value `x`. Your task is to find the length of the smallest contiguous subarray of `A` whose sum is greater than or equal to `x`. If no such subarray exists, return `0`. For example, given the array `A = [2, 3, 1, 2, 4, 3]` and `x = 7`, the smallest subarray with sum greater than or equal to `7` is `[4, 3]` with length `2`. Therefore, the output should be `2`. Input Format: - The first line of input contains two integers `n` and `x` (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^9), the length of the array and the target sum, respectively. - The second line contains `n` space-separated integers representing the array `A` (1 ≤ A[i] ≤ 10^4). Output Format: - Print a single integer representing the length of the smallest contiguous subarray whose sum is greater than or equal to `x`. If no such subarray exists, print `0`. Example Input: ``` 6 7 2 3 1 2 4 3 ``` Example Output: ``` 2 ``` Note: - In the above example, the smallest subarray with sum ≥ 7 is `[4, 3]` with length `2`. - For all arrays, there may be multiple subarrays whose sum satisfies the condition, but you must find the length of the smallest such subarray. If none exist, return `0`.","solution":"def smallest_subarray_with_sum_at_least_x(n, x, A): Find the length of the smallest contiguous subarray with sum at least x. min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += A[end] while current_sum >= x: min_length = min(min_length, end - start + 1) current_sum -= A[start] start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"A bank wants to develop a system to manage transactions performed by its customers. Each transaction includes a date, an amount (positive for deposits and negative for withdrawals), and an account ID. The bank requires a program to analyze these transactions and perform the following operations: 1. Calculate and display the total balance for each account. 2. Identify and list all accounts with a negative balance. The program should read an integer n (1 ≤ n ≤ 100), representing the number of transactions. Then, it should read n lines, each containing a string date (in the format YYYY-MM-DD), an integer amount (−1,000,000 ≤ amount ≤ 1,000,000), and a string ID representing the account ID. All dates are valid according to the Gregorian calendar. The output should include: 1. A list of account IDs and their corresponding total balances, sorted by account IDs in ascending order. 2. A list of account IDs that have a negative balance, sorted in ascending order. If there are multiple accounts with the same balance, the order of those accounts in the output does not matter. # Example Input ``` 5 2023-01-01 500 ABC123 2023-01-01 -200 ABC123 2023-01-02 300 XYZ789 2023-01-02 -500 ABC123 2023-01-03 -100 XYZ789 ``` # Example Output ``` ABC123 800 XYZ789 200 Negative Balances: ABC123 ``` Note: Your task is to write a Python program that processes the input as described and generates the specified output.","solution":"def process_transactions(n, transactions): from collections import defaultdict balances = defaultdict(int) for transaction in transactions: date, amount, account_id = transaction.split() amount = int(amount) balances[account_id] += amount total_balances = sorted(balances.items()) negative_balances = sorted([acc_id for acc_id, balance in balances.items() if balance < 0]) return total_balances, negative_balances def display_balances(total_balances, negative_balances): for account_id, balance in total_balances: print(f\\"{account_id} {balance}\\") if negative_balances: print(\\"nNegative Balances:\\") for acc_id in negative_balances: print(acc_id)"},{"question":"You are given n robots and k orders in a warehouse. Each robot has a specific speed and each order has a specific weight. The robots can carry only one order at a time. The efficiency of a robot in fulfilling an order is defined as the product of the robot\'s speed and the order\'s weight. Given the speed of the robots and the weights of the orders, you need to assign exactly one order to each robot such that the sum of the efficiencies of all the robots is maximized. You need to output the maximum sum of efficiencies. The first line of the input contains two positive integers n and k (1 ≤ n ≤ 2000, n ≤ k ≤ 2000) — the number of robots and the number of orders. The second line contains n integers representing the speeds of the robots. The third line contains k integers representing the weights of the orders. Output a single integer — the maximum sum of efficiency you can achieve by assigning each robot exactly one order. # Example Input ``` 3 5 2 3 4 1 2 3 4 5 ``` Output ``` 29 ``` Explanation: You have 3 robots and 5 orders. You can assign orders in multiple ways, but the optimal assignment is: - Assign the order with weight 5 to the robot with speed 4 (efficiency = 4 * 5 = 20) - Assign the order with weight 4 to the robot with speed 3 (efficiency = 3 * 4 = 12) - Assign the order with weight 3 to the robot with speed 2 (efficiency = 2 * 3 = 6) Thus, the maximum sum of efficiencies is 20 + 12 + 6 = 38. Note: If the input values were sorted differently, the optimal assignment and the resulting maximum efficiency would still need to be the objective.","solution":"def max_efficiency(n, k, speeds, weights): Returns the maximum sum of efficiencies by assigning exactly one order to each robot. Parameters: n (int): The number of robots. k (int): The number of orders. speeds (list of int): The speeds of the robots. weights (list of int): The weights of the orders. Returns: int: The maximum sum of efficiencies. # Sort robots\' speeds in descending order speeds.sort(reverse=True) # Sort orders\' weights in descending order weights.sort(reverse=True) # Assign each robot the heaviest remaining order to maximize the efficiency max_efficiency_sum = 0 for i in range(n): max_efficiency_sum += speeds[i] * weights[i] return max_efficiency_sum"},{"question":"A city is represented as a grid of size **n x n**. Each cell of the grid can either be empty or contain an obstacle denoted by \'X\'. You start at the top-left corner of the grid at (0, 0) and you want to navigate to the bottom-right corner of the grid at (n-1, n-1). You can only move right or down one cell at a time. Write a function `count_paths` that takes an integer `n` and a list of lists `grid`, where `grid[i][j]` is either \'.\' representing an empty cell or \'X\' representing an obstacle. The function should return the number of distinct paths from (0, 0) to (n-1, n-1) avoiding obstacles. If there is no path, return 0. # Example ```python def count_paths(n, grid): # Your implementation here # Example 1 n = 3 grid = [[\'.\', \'.\', \'.\'], [\'.\', \'X\', \'.\'], [\'.\', \'.\', \'.\']] print(count_paths(n, grid)) # Output: 2 # Example 2 n = 3 grid = [[\'.\', \'X\', \'.\'], [\'.\', \'X\', \'.\'], [\'.\', \'.\', \'.\']] print(count_paths(n, grid)) # Output: 1 # Example 3 n = 3 grid = [[\'.\', \'X\', \'.\'], [\'.\', \'X\', \'.\'], [\'X\', \'.\', \'.\']] print(count_paths(n, grid)) # Output: 0 ``` # Constraints - 2 ≤ n ≤ 100 - `grid[i][j]` is either \'.\' or \'X\'.","solution":"def count_paths(n, grid): Returns the number of distinct paths from (0, 0) to (n-1, n-1) avoiding obstacles. Parameters: n (int): the size of the grid (n x n) grid (list of list of str): the grid representation Returns: int: the number of distinct paths # If the starting point or ending point is an obstacle, there\'s no path if grid[0][0] == \'X\' or grid[n-1][n-1] == \'X\': return 0 # Initialize a dp array with 0\'s dp = [[0]*n for _ in range(n)] # Start point dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(n): if grid[i][j] == \'X\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1]"},{"question":"In a small village, there is a unique tradition every year during the festival. Villagers gather and create a chain by holding hands. However, this year they decided to make it more interesting by arranging themselves in circles instead of a single chain. The festival organizers want to know the number of distinct ways they can form these circles. Each villager has a unique identifier from 1 to n. Each villager holds hands with exactly two other villagers, forming a closed circle. The villagers can freely choose their positions, but the circle must be closed and connected, meaning everyone is part of one large circle. Additionally, the organizers are only interested in the arrangements where the order in which the villagers hold hands matters but rotations and reflections of the same arrangement are considered the same. Given the number of villagers, n, the task is to compute the number of distinct ways to form these circles. Input: The input contains a single integer n — the number of villagers. Output: Output a single integer — the number of distinct ways to arrange the villagers in a circle, modulo 1000000007 (10^9 + 7). Constraints: - 1 ≤ n ≤ 10^5 Example: Input: 5 Output: 24 Explanation: There are 24 distinct ways to arrange 5 villagers in a circle considering rotations and reflections as the same arrangement.","solution":"import math MOD = 1000000007 def ways_to_form_circle(n): Calculate the number of distinct ways to arrange n villagers in a circle. Args: n (int): The number of villagers Returns: int: The number of distinct ways to arrange the villagers modulo 1000000007 if n == 1: return 1 # Calculate (n-1)! % MOD return math.factorial(n - 1) % MOD"},{"question":"Arnold loves numbers and recently he has developed an interest in prime numbers. He came up with a game to test his friends\' programming skills. The game evaluates the number of prime numbers in a given range [l, r]. Your task is to write a program that determines the number of prime numbers in the inclusive range [l, r]. A number is considered prime if it has exactly two distinct positive divisors: 1 and itself. For example, the prime numbers between 1 and 10 are: 2, 3, 5, and 7. Input consists of a single line containing two integers l and r (1 ≤ l ≤ r ≤ 10^6). Output a single integer — the number of prime numbers in the range [l, r]. Example: Input: 10 30 Output: 6 Explanation: The prime numbers in the range [10, 30] are: 11, 13, 17, 19, 23, and 29. Therefore, the output is 6.","solution":"def count_primes_in_range(l, r): Returns the count of prime numbers in the inclusive range [l, r]. Parameters: l (int): the start of the range (inclusive) r (int): the end of the range (inclusive) Returns: int: the count of primes in the range def sieve(n): is_prime = [True] * (n+1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n+1, p): is_prime[i] = False p += 1 is_prime[0], is_prime[1] = False, False return is_prime prime = sieve(r) count = 0 for i in range(l, r+1): if prime[i]: count += 1 return count"},{"question":"You are given a string containing lowercase English letters and a target integer value k. The task is to determine the minimum number of deletions required to make the string have exactly k distinct characters. If it is impossible to achieve exactly k distinct characters, return -1. The first line contains a string s of length n (1 ≤ n ≤ 1000). The second line contains an integer k (1 ≤ k ≤ 26). Return the minimum number of deletions required to make the string have exactly k distinct characters, or -1 if it\'s not possible. # Example Input ``` aaabbc 2 ``` Output ``` 1 ``` Input ``` abcdef 10 ``` Output ``` -1 ``` # Explanation In the first example, we can delete one \'b\' to get \'aaabc,\' which has exactly 2 distinct characters (\'a\' and \'b\'). In the second example, there are only 6 distinct characters, so it is impossible to have exactly 10 distinct characters, hence the output is -1.","solution":"from collections import Counter def min_deletions_to_k_distinct(s, k): Returns the minimum number of deletions required to make the string have exactly k distinct characters, or -1 if it\'s not possible. distinct_char_counts = Counter(s) n_distinct = len(distinct_char_counts) # If the number of distinct characters is already k, no deletions are required if n_distinct == k: return 0 # If not possible to have exactly k distinct characters if n_distinct < k: return -1 # Get the frequency of each character in the string char_frequencies = sorted(distinct_char_counts.values()) # Delete characters to reduce the number of distinct characters to exactly k deletions = 0 while n_distinct > k: freq = char_frequencies.pop(0) deletions += freq n_distinct -= 1 return deletions"},{"question":"Alicia loves reading books, and she has a collection of books placed on her bookshelf. Each book is represented by a different letter. Alicia has a peculiar way of rearranging the books. She wants to rearrange the books in such a way that no two adjacent books have the same letter. You are given a string `s` of length n (1 ≤ n ≤ 500,000), where each character denotes a book on Alicia’s shelf. Your task is to find if it is possible to rearrange the books so that no two adjacent books are the same, and if possible, return any suitable rearrangement. If it is not possible, return an empty string. # Input The input consists of a single string `s` of length n that represents the books on Alicia’s shelf. # Output If it is possible to rearrange the books such that no two adjacent books have the same letter, print a rearranged version of the string. If not, print an empty string. # Example Input ``` aaabb ``` Output ``` ababa ``` Input ``` aaab ``` Output ``` ``` # Constraints - The input string `s` contains only lowercase English letters.","solution":"import heapq from collections import Counter def reorganize_books(s): if not s: return \\"\\" # Count frequency of each character freq = Counter(s) # Create a max heap maxHeap = [(-count, char) for char, count in freq.items()] heapq.heapify(maxHeap) # Previous character details prev_char = None prev_count = 0 # Result list to build the final rearranged string result = [] while maxHeap: count, char = heapq.heappop(maxHeap) result.append(char) # If prev_char still has remaining count, add it back to the heap if prev_char: heapq.heappush(maxHeap, (prev_count, prev_char)) prev_char = None # Update prev_char and prev_count for the current character if count + 1 < 0: # Since count is negative prev_char = char prev_count = count + 1 # Check if the final string has the same length as the original string if len(result) == len(s): return \'\'.join(result) else: return \\"\\""},{"question":"In a mathematical contest, there were n contestants. Each contestant was given a score based on their performance, represented by an integer, which could be positive, negative, or zero. The organizers decide to rank the contestants based on their scores. However, they encountered a challenge — some scores are the same, resulting in ties. They would like your help to determine the rank of each contestant. The rank must be assigned such that higher scores receive better ranks (rank 1 being the highest). In case of ties, contestants should receive the same rank, and the next rank after a tie should be the rank that would have followed if there were no ties. For example, if there are five contestants with scores [100, 50, 50, 25, 10], the ranks should be [1, 2, 2, 4, 5]. Your task is to write a function that takes the number of contestants and an array of scores, and returns an array of ranks. The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of contestants. The second line contains n integers s1, s2, …, sn (−10^5 ≤ si ≤ 10^5), where si is the score of the i-th contestant. Print n integers, where each integer represents the rank of the corresponding contestant when scores are sorted in descending order, with ties handled as described above. For example, given the scores [100, 50, 50, 25, 10], the output should be [1, 2, 2, 4, 5].","solution":"def calculate_ranks(n, scores): Function to determine the ranks of contestants based on their scores. :param n: Number of contestants :param scores: List of scores for each contestant :return: List of ranks for each contestant # Create a list of tuples (score, index) indexed_scores = [(score, index) for index, score in enumerate(scores)] # Sort the scores in descending order but keep track of the original indices indexed_scores.sort(reverse=True, key=lambda x: x[0]) # Create an array for the ranks ranks = [0] * n # Initialize the first rank and previous score current_rank = 1 previous_score = indexed_scores[0][0] ranks[indexed_scores[0][1]] = current_rank for i in range(1, n): score, original_index = indexed_scores[i] if score == previous_score: # If the score is the same as the previous score, assign the same rank ranks[original_index] = current_rank else: # Otherwise, update the rank current_rank = i + 1 ranks[original_index] = current_rank previous_score = score return ranks"},{"question":"Julia has a huge number of project ideas. She stores each project idea as a sequence of tasks. Each task is represented by a lowercase English letter, and the sequence of tasks is represented as a string. Julia wants to combine several projects together to form a new larger project. However, she wants to ensure that no task appears more than once across the combined projects. You need to write a program that given two project ideas (strings), determines if they can be combined without any task being repeated. If it\'s possible, return the combined project idea, otherwise return \\"IMPOSSIBLE\\". Input: - The first line contains the first project idea as a string s1 (1 ≤ |s1| ≤ 10^5) - The second line contains the second project idea as a string s2 (1 ≤ |s2| ≤ 10^5) Output: - A single line containing the combined project idea if the two projects can be combined without any task being repeated, otherwise \\"IMPOSSIBLE\\". Example: Input: ``` abc def ``` Output: ``` abcdef ``` Input: ``` abc cde ``` Output: ``` IMPOSSIBLE ```","solution":"def combine_projects(s1, s2): Returns the combined project idea if the two projects can be combined without any task being repeated, otherwise returns \\"IMPOSSIBLE\\". s1: str - first project idea s2: str - second project idea set1 = set(s1) set2 = set(s2) # Check for common tasks if set1 & set2: return \\"IMPOSSIBLE\\" return s1 + s2"},{"question":"A popular video game has different levels of obstacles and rewards attached to them. You want to achieve the highest score by selecting some of these levels to play. There are exactly n levels, and each level i has an associated obstacle difficulty d_i and a reward r_i. Your goal is to maximize your total reward S by playing certain levels such that the sum of the obstacle difficulties does not exceed a given limit D. Specifically, you want to find a subset of levels that maximizes the total reward while ensuring the sum of their obstacle difficulties is less than or equal to D. The game provides the following input: - The first line contains two integers n and D (1 leq n leq 10^5, 1 leq D leq 10^9) — the number of levels and the maximum obstacle difficulty sum you can handle. - The next n lines each contain two integers d_i and r_i (1 leq d_i leq 10^9, 0 leq r_i leq 10^9) — the obstacle difficulty and the reward of each level i. You need to output the maximum total reward S you can achieve by selecting a subset of levels such that the sum of their obstacle difficulties does not exceed D. # Example **Input:** ``` 4 50 10 60 20 100 30 120 40 200 ``` **Output:** ``` 260 ``` In the example above, by playing levels with obstacle difficulties 10 and 40, you get a total reward of 260, which is the maximum possible while keeping the difficulty sum under 50.","solution":"def max_reward(n, D, levels): Returns the maximum total reward possible without exceeding the total obstacle difficulty limit D. :param n: int, number of levels :param D: int, maximum total obstacle difficulty :param levels: list of tuples, where each tuple (di, ri) represents the obstacle difficulty and reward of a level :return: int, the maximum total reward # Create an array to store the maximum reward for each difficulty from 0 to D dp = [0] * (D + 1) for d, r in levels: # Traverse the dp array in reverse to prevent over-counting for j in range(D, d - 1, -1): dp[j] = max(dp[j], dp[j - d] + r) return max(dp)"},{"question":"You are given an integer array `arr` of size `n`. You can perform operations on this array to make all elements equal. In one operation, you can choose any element of the array and either increase or decrease it by 1. Your task is to determine the minimum number of operations required to make all the elements of the array equal. The first line of input contains an integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains `n` space-separated integers `arr1, arr2, ..., arrn` (1 ≤ arri ≤ 10^9) — the elements of the array. Output a single integer — the minimum number of operations required to make all elements of the array equal. **Example:** Input: ``` 5 1 2 3 4 5 ``` Output: ``` 6 ``` In this example, you can make all elements equal to 3 with a total of 6 operations: `(1 → 3 = 2 operations), (2 → 3 = 1 operation), (4 → 3 = 1 operation), (5 → 3 = 2 operations)`.","solution":"def min_operations_to_equal_elements(n, arr): Determines the minimum number of operations required to make all elements of the array equal. Parameters: n (int): Number of elements in the array. arr (list): List of integers representing the array. Returns: int: Minimum number of operations required. median = sorted(arr)[n // 2] total_operations = sum(abs(x - median) for x in arr) return total_operations # Example Usage # n = 5 # arr = [1, 2, 3, 4, 5] # print(min_operations_to_equal_elements(n, arr)) # Output: 6"},{"question":"You are given an integer array `nums` containing `n` distinct integers, and you must perform the following operations: 1. Choose any two elements `a` and `b` from the array where `a < b`. 2. Remove the elements `a` and `b` from the array. 3. Insert a new element `c` into the array where `c = a + b`. You need to perform the operations until there is only one element left in the array. Your goal is to minimize the final remaining element. Write a function `minimizeArray(nums: List[int]) -> int` that takes a list of integers `nums` and returns the minimum possible value of the last remaining element. # Input - An integer `n` (2 leq n leq 10^5), the number of elements in the array. - A list of `n` distinct integers `nums` (1 leq nums[i] leq 10^6). # Output - A single integer, the minimum possible value of the last remaining element in the array. # Example ```python print(minimizeArray([1, 2, 3, 4])) # Output: 10 print(minimizeArray([1, 10, 100])) # Output: 111 ``` Explanation of examples: 1. **Example 1**: - First, pair `1` and `2` to get `3`. Array becomes `[3, 3, 4]`. - Next, pair `3` and `3` to get `6`. Array becomes `[6, 4]`. - Finally, pair `6` and `4` to get `10`. Array becomes `[10]`. 2. **Example 2**: - First, pair `1` and `10` to get `11`. Array becomes `[11, 100]`. - Finally, pair `11` and `100` to get `111`. Array becomes `[111]`. # Constraints - Your solution should be optimized to handle large inputs efficiently.","solution":"from typing import List import heapq def minimizeArray(nums: List[int]) -> int: Returns the minimum possible value of the last remaining element in the array. # Convert list to a min-heap heapq.heapify(nums) while len(nums) > 1: # Extract the two smallest elements a = heapq.heappop(nums) b = heapq.heappop(nums) # Insert the sum back into the heap heapq.heappush(nums, a + b) return nums[0]"},{"question":"Given a matrix of integers, find the largest sum of any square sub-matrix of size k x k, where k is a positive integer provided as input. The matrix can have both positive and negative integers. # Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), which are the dimensions of the matrix. The next n lines contain m integers each, representing the elements of the matrix. The last line contains an integer k (1 ≤ k ≤ min(n, m)), representing the size of the sub-matrix. # Output Print the largest sum of any k x k sub-matrix. # Example Input ``` 4 5 1 2 -1 4 5 -8 3 4 2 1 3 8 -10 5 -3 1 -2 3 9 6 2 ``` Output ``` 17 ``` Explanation For the given example, the 2x2 sub-matrix with the largest sum is: ``` 3 4 8 -10 ``` Which adds up to 17. # Note - The matrix can contain both positive and negative numbers. - If there are multiple k x k sub-matrices with the same largest sum, return the sum of any one of them.","solution":"def largest_kxk_sum(matrix, n, m, k): Find the largest sum of any k x k sub-matrix in the given n x m matrix. :param matrix: List[List[int]], the n x m matrix :param n: int, number of rows in the matrix :param m: int, number of columns in the matrix :param k: int, size of the k x k sub-matrix :return: int, the largest sum of any k x k sub-matrix max_sum = float(\'-inf\') # Precompute the prefix sum matrix prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n+1): for j in range(1, m+1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) # Calculate the sum of every k x k sub-matrix for i in range(k, n + 1): for j in range(k, m + 1): sub_matrix_sum = (prefix_sum[i][j] - prefix_sum[i-k][j] - prefix_sum[i][j-k] + prefix_sum[i-k][j-k]) max_sum = max(max_sum, sub_matrix_sum) return max_sum"},{"question":"You are given an island grid where \'1\' represents land and \'0\' represents water. The island grid is surrounded by water on all sides. There can be multiple islands, and each island is formed by connecting adjacent lands horizontally or vertically. You need to help a rescue team by determining the number of distinct islands in the grid. The size of the grid will not exceed 1000x1000. # Input - The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid. - Each of the next `n` lines contains `m` characters representing the grid, where each character is either \'1\' (land) or \'0\' (water). # Output - Output a single integer representing the number of distinct islands. # Example Input ``` 4 5 11000 11000 00100 00011 ``` Output ``` 3 ``` # Explanation In the given example, there are three islands: - The first island consists of the lands in the first two rows and the first two columns. - The second island consists of the land in the third row and third column. - The third island consists of the lands in the last two rows and last two columns.","solution":"def num_islands(grid): Returns the number of distinct islands in the given grid. if not grid: return 0 n = len(grid) m = len(grid[0]) def dfs(grid, x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == \'0\': return grid[x][y] = \'0\' # Mark as visited dfs(grid, x + 1, y) dfs(grid, x - 1, y) dfs(grid, x, y + 1) dfs(grid, x, y - 1) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': island_count += 1 dfs(grid, i, j) return island_count def process_input(data): lines = data.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(line) for line in lines[1:n+1]] return num_islands(grid)"},{"question":"Andrei is a passionate gardener and he loves arranging his plants in a line. Recently, he bought n new plants, and he wants to plant them in such a way that the height of the plants increases from left to right. However, Andrei can only select a continuous segment of the plants for planting. Help Andrei find the length of the longest continuous segment that can be planted in increasing order. In the first line, there will be one integer n (1 ≤ n ≤ 2·10⁵) - the number of plants. In the second line, there will be n integers h1, h2, ..., hn (1 ≤ hi ≤ 2·10⁵) - the heights of the plants in the order Andrei bought them. Print one integer - the length of the longest continuous segment that can be planted in increasing order. For example, in the first test case, there are six plants with heights [2, 1, 3, 2, 1, 4]. The longest continuous segment in this list that is in increasing order is [1, 3], [2, 3], or [1, 4], which all have lengths of 2. In the second test case, the four plants have heights [1, 2, 3, 4]. The entire list is in increasing order, so the answer is 4.","solution":"def longest_increasing_segment(n, heights): Returns the length of the longest continuous segment that can be planted in increasing order. Parameters: n (int): the number of plants heights (List[int]): a list of plant heights Returns: int: length of the longest increasing segment if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if heights[i] > heights[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are given a sequence of integers a_1, a_2, ldots, a_n. Your task is to form an array b such that each element in b is the product of all the elements in the input array except the element at the same index. Specifically, b[i] = a_1 cdot a_2 cdot ldots cdot a_{i-1} cdot a_{i+1} cdot ldots cdot a_n. However, you are not allowed to use division in your implementation. For example, given the array: [1, 2, 3, 4, 5], the resulting output array would be: [120, 60, 40, 30, 24]. # Input: - The first line contains an integer t , ,(1 le t le 10^4) — the number of test cases. - For each test case, the first line contains an integer n , , (1 le n le 10^5) — the number of elements in the array. - The second line contains n integers a_1, a_2, ldots, a_n , , (1 le a_i le 100) — the elements of the array. It is guaranteed that the sum of all integers across all test cases does not exceed 10^5. # Output: For each test case: - Print n space-separated integers representing the resulting array b. # Example: Input: 3 5 1 2 3 4 5 3 3 2 1 4 2 3 4 5 Output: 120 60 40 30 24 2 3 6 60 40 30 24 # Note: In the first case, the resulting array is obtained by: - Product of all numbers except 1 => 2 cdot 3 cdot 4 cdot 5 = 120 - Product of all numbers except 2 => 1 cdot 3 cdot 4 cdot 5 = 60 - Product of all numbers except 3 => 1 cdot 2 cdot 4 cdot 5 = 40 - Product of all numbers except 4 => 1 cdot 2 cdot 3 cdot 5 = 30 - Product of all numbers except 5 => 1 cdot 2 cdot 3 cdot 4 = 24 In the second case: - Product of all numbers except 3 => 2 cdot 1 = 2 - Product of all numbers except 2 => 3 cdot 1 = 3 - Product of all numbers except 1 => 3 cdot 2 = 6 In the third case: - Product of all numbers except 2 => 3 cdot 4 cdot 5 = 60 - Product of all numbers except 3 => 2 cdot 4 cdot 5 = 40 - Product of all numbers except 4 => 2 cdot 3 cdot 5 = 30 - Product of all numbers except 5 => 2 cdot 3 cdot 4 = 24","solution":"def product_except_self(array): Given an array of integers, returns an array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. n = len(array) if n == 0: return [] left_products = [1] * n right_products = [1] * n # Compute left products for i in range(1, n): left_products[i] = left_products[i - 1] * array[i - 1] # Compute right products for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * array[i + 1] # Compute result by multiplying left and right products result = [1] * n for i in range(n): result[i] = left_products[i] * right_products[i] return result def solve_product_problem(test_cases): results = [] for array in test_cases: results.append(product_except_self(array)) return results"},{"question":"You are developing a software application that requires analyzing user movement within a bounded 2D grid. Your task is to identify the longest straight path a user can walk without changing direction. The grid is represented as an m x n matrix of characters where \'.\' denotes a walkable cell and any other character denotes an obstacle. You need to determine the length of the longest contiguous sequence of walkable cells that align horizontally or vertically. The user cannot walk diagonally or pass through obstacles. Write a function that receives the grid dimensions and the grid itself, and returns the length of the longest straight walkable path. The first input line contains two integers m and n (1 ≤ m, n ≤ 500), representing the number of rows and columns of the grid. Each of the next m lines contains a string of length n representing a row of the grid. Each character is either \'.\' (walkable) or an obstacle (any other character). Print the length of the longest walkable path. Example Input: 4 5 ..... .#. ..#.. ..... Output: 5 Explanation: In the given grid, the longest straight walkable path is the first row, which is 5 cells long. Another straight walkable path could be the first row and fourth column which is 4 cells long, but it does not exceed the longest path found in the first row.","solution":"def longest_walkable_path(m, n, grid): Returns the length of the longest walkable path in the grid. Parameters: m (int): number of rows in the grid n (int): number of columns in the grid grid (list of str): the grid representation Returns: int: length of the longest walkable path longest_path = 0 # Check rows for row in grid: current_length = 0 for cell in row: if cell == \'.\': current_length += 1 longest_path = max(longest_path, current_length) else: current_length = 0 # Check columns for col in range(n): current_length = 0 for row in range(m): if grid[row][col] == \'.\': current_length += 1 longest_path = max(longest_path, current_length) else: current_length = 0 return longest_path # Example usage: # m, n = 4, 5 # grid = [ # \\".....\\", # \\".#.\\", # \\"..#..\\", # \\".....\\" # ] # print(longest_walkable_path(m, n, grid)) # Output: 5"},{"question":"Sophie loves playing with numbers and has recently discovered an exciting sequence game. The game starts with a sequence of integers, and Sophie can perform two types of operations on this sequence: 1. Select two integers, `a` and `b`, from the sequence and replace both of them with their product `a * b`. 2. Select any single integer `c` from the sequence and replace it with `c + 1`. Sophie wants to make all elements in the sequence equal to a given integer `k`. Help Sophie find the minimum number of operations required to convert all elements in the sequence to `k`. Input: - The first line contains two integers, `n` and `k` (`1 <= n <= 1000`, `1 <= k <= 1000`), where `n` is the length of the sequence and `k` is the target integer. - The second line contains `n` integers, describing the initial sequence. Output: - Print a single integer representing the minimum number of operations required to make all elements in the sequence equal to `k`. If it is impossible, print `-1`. Example: Input: ``` 3 5 1 2 3 ``` Output: ``` 4 ``` Explanation: One way to achieve the target sequence is: 1. Select integers 1 and 2, and replace both with 1*2=2. Sequence becomes [2, 2, 3]. 2. Select integer 2 and replace it with 2+1=3. Sequence becomes [3, 2, 3]. 3. Select integers 3 and 3, and replace both with 3*3=9. Sequence becomes [9, 2, 9]. 4. Select integers 2 and 9, and replace both with 2*9=18. Sequence becomes [18, 18, 18]. In this case, 4 operations are sufficient to convert all elements in the sequence to 5.","solution":"def min_operations_to_k(n, k, sequence): This function calculates the minimum number of operations required to make all elements in sequence equal to k. If it is not possible, it returns -1. operations = 0 for i in range(n): while sequence[i] != k: if sequence[i] > k: return -1 # Cannot decrease the numbers with given operations, so it\'s impossible # If the current element is less than k, we need to increase it sequence[i] += 1 operations += 1 return operations"},{"question":"Paula has a long, narrow strip of land divided into n equal sections in a single row. She has planted flowers in some sections and left others empty. She wants to install water sprinklers to cover all the sections with flowers. Each sprinkler can cover itself and its immediate neighboring sections (i.e., if placed in section i, it can cover sections i-1, i, and i+1). Given the initial state of the land, determine the minimum number of sprinklers needed to ensure that all sections with flowers are covered. Input - The first line contains a single integer n (1 ≤ n ≤ 105) — the length of the strip. - The second line contains a binary string of length n, where \'1\' at the i-th position indicates a section with flowers and \'0\' indicates an empty section. Output - Output a single integer, the minimum number of sprinklers needed to cover all sections with flowers. Example Input 7 1001001 Output 3 Explanation: - Place one sprinkler at section 1 to cover sections 1 and 2. - Place another sprinkler at section 4 to cover sections 3, 4, and 5. - Place the last sprinkler at section 7 to cover sections 6 and 7.","solution":"def min_sprinklers_needed(n, strip): Returns the minimum number of sprinklers needed to cover sections with flowers. sprinklers_needed = 0 i = 0 while i < n: if strip[i] == \'1\': sprinklers_needed += 1 i += 3 # move to the section that is beyond the reach of the current sprinkler else: i += 1 # move to the next section return sprinklers_needed"},{"question":"In a small computing lab, there are multiple computing stations where each station is occupied by a group of people throughout the day. Each group needs continuous access to certain computing resources (e.g., CPU time, memory). Assume there are `n` computing stations, and the ith station requires `a[i]` amount of resource allocation time. You are given `m` minutes of total available resources that you can distribute to these stations. You need to determine the maximum number of stations that can operate continuously without interruption if each station can only either receive its entire required resource time `a[i]` or receive none at all. Partial allocation to any station is not allowed. Write a function `maxStations` that takes two arguments: - `a` (a list of integers where each element `a[i]` represents the required resource time for the ith station) - `m` (an integer representing the total available resources in minutes), and returns the maximum number of stations that can be fully allocated resources. # Input - The first line of input contains an integer `t` (1 ≤ `t` ≤ 100): the number of test cases. - For each test case, the first line contains two integers `n` and `m` (1 ≤ `n` ≤ 1000, 1 ≤ `m` ≤ 10^9): the number of stations and the total available resources. - The second line contains `n` integers where the ith integer represents `a[i]` (1 ≤ `a[i]` ≤ 10^9): the required resource time for the ith station. # Output For each test case, output a single integer: the maximum number of stations that can be operated without interruption. # Example Input ``` 2 3 10 4 3 5 4 15 3 8 5 7 ``` Output ``` 2 3 ``` # Explanation - For the first test case, there are three stations with required resource times: 4, 3, and 5 respectively. The total available resource is 10 minutes. We can fully allocate resources to stations with times 4 and 3 (totaling 7 minutes) to maximize the number of stations. Hence, the result is 2. - For the second test case, four stations with required times 3, 8, 5, and 7 respectively need to be accommodated within 15 minutes of total resource. We can allocate to stations 3, 5, and 7 (totaling 15 minutes). Hence, the result is 3.","solution":"def maxStations(a, m): Returns the maximum number of stations that can be fully allocated resources. # Sort the resource times to allocate smaller periods first a.sort() # Initialize count of fully allocated stations and total allocated resources count = 0 total = 0 # Allocate resources to stations while within the total available resources for time in a: if total + time <= m: total += time count += 1 else: break return count"},{"question":"Jessica is a professional botanist who is studying plant growth patterns. She uses a specific algorithm to predict the growth of plants over time. Each plant starts at a height of 1 unit and grows according to the pattern described below: 1. Each month, a plant can either double its height, or grow by a fixed number of units. 2. The decision of whether a plant doubles its height or grows by the fixed number of units is determined by a monthly event. Jessica wants to simulate the growth of a plant over a period of m months. Given the monthly growth events, she wants to determine the height of the plant at the end of each month. Write a function `simulate_growth(n: int, m: int, events: List[int]) -> List[int]` where: - `n`: an integer representing the fixed number of units the plant grows when it does not double its height (1 le n le 100). - `m`: the number of months to simulate (1 le m le 100). - `events`: a list of length `m` containing integers where `1` indicates the plant should double its height, and `0` indicates the plant should grow by the fixed number of units. The function should return a list of length `m` where the i-th element is the height of the plant at the end of the i-th month. # Example: ```python simulate_growth(3, 4, [1, 0, 1, 0]) ``` # Output: ``` [2, 5, 10, 13] ``` **Explanation:** - Initially, the plant height is 1. - In the first month, the plant doubles its height: 1 -> 2. - In the second month, the plant grows by 3 units: 2 -> 5. - In the third month, the plant doubles its height: 5 -> 10. - In the fourth month, the plant grows by 3 units: 10 -> 13. # Note: - The input list `events` will contain exactly `m` elements. - The height of the plant will always be a positive integer.","solution":"from typing import List def simulate_growth(n: int, m: int, events: List[int]) -> List[int]: height = 1 heights = [] for event in events: if event == 1: height *= 2 else: height += n heights.append(height) return heights"},{"question":"Given an array of integers representing the heights of buildings in a row, find the minimum number of moves required to ensure that for every three consecutive buildings, the middle building is either the tallest or the shortest among the three. A move consists of increasing or decreasing the height of a building by 1 unit. Your task is to write a function `min_moves_to_satisfy(arr)` that takes an array of integers `arr`, where each integer represents the height of a building, and returns the minimum number of moves required. **Input:** - An integer `n` (3 ≤ n ≤ 2000) — the number of buildings. - An array of integers `h` of length `n` (1 ≤ h[i] ≤ 10^6) — the heights of the buildings. **Output:** - A single integer — the minimum number of moves required to rearrange the buildings to satisfy the given condition. **Example:** ``` Input: 6 5 2 6 3 4 7 Output: 2 Input: 5 3 1 3 1 3 Output: 0 ``` **Explanation:** - In the first example, you can increase the height of the second building and decrease the height of the third building to get the sequence [5, 3, 5, 3, 4, 7], which satisfies the condition. - In the second example, the sequence already satisfies the condition, so no moves are needed.","solution":"def min_moves_to_satisfy(arr): n = len(arr) if n < 3: return 0 def calculate_moves(h1, h2, h3): Calculate moves needed to make h2 either the tallest or shortest among h1, h2, h3 if h2 > h1 and h2 > h3: return 0 elif h2 < h1 and h2 < h3: return 0 else: return min(abs(h2 - max(h1, h3)) + 1, abs(h2 - min(h1, h3)) + 1) total_moves = 0 for i in range(1, n - 1): moves = calculate_moves(arr[i - 1], arr[i], arr[i + 1]) total_moves += moves if moves > 0: if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: arr[i] = max(arr[i - 1], arr[i + 1]) + 1 elif arr[i] < arr[i - 1] and arr[i] < arr[i + 1]: arr[i] = min(arr[i - 1], arr[i + 1]) - 1 return total_moves"},{"question":"You are given an array of integers representing heights of buildings in a city from west to east. The city has an architectural interest in determining how many buildings have an unobstructed view of the sunrise. A building has an unobstructed view of the sunrise if there are no taller buildings to its west. Your task is to write a function that computes the number of buildings that have an unobstructed view of the sunrise. Input: - The first line contains an integer n, representing the number of buildings (1 leq n leq 2 times 10^5). - The second line contains n space-separated integers h_1, h_2, ldots, h_n, where h_i represents the height of the i-th building (1 leq h_i leq 10^5). Output: - Output a single integer, the number of buildings that have an unobstructed view of the sunrise. Example: Input: ``` 6 3 2 4 1 5 2 ``` Output: ``` 3 ``` Explanation: - Building 1 with a height of 3 has an unobstructed view because there are no buildings to its west. - Building 2 with a height of 2 does not have an unobstructed view because building 1 is taller. - Building 3 with a height of 4 has an unobstructed view because it is taller than building 1 and building 2. - Building 4 with a height of 1 does not have an unobstructed view because building 3 is taller. - Building 5 with a height of 5 has an unobstructed view because it is taller than all the buildings to its west. - Building 6 with a height of 2 does not have an unobstructed view because building 5 is taller. Thus, the three buildings that have an unobstructed view of the sunrise are buildings 1, 3, and 5.","solution":"def count_unobstructed_views(n, heights): Returns the number of buildings that have an unobstructed view of the sunrise. :param n: int - Number of buildings. :param heights: List[int] - Heights of the buildings. :return: int - Number of buildings with an unobstructed view of the sunrise. max_height = 0 count = 0 for height in heights: if height > max_height: count += 1 max_height = height return count"},{"question":"The input consists of a string with exactly three parts separated by hyphens (-). The first part is a series of uppercase alphabetic characters (A-Z), the second part is a series of lowercase alphabetic characters (a-z), and the third part is a series of digits (0-9). The input is guaranteed to be valid (i.e., it follows the specified format precisely). Output a single integer that is the sum of the numerical values represented by the uppercase alphabetic characters (A = 1, B = 2, ..., Z = 26), the lowercase alphabetic characters (a = 1, b = 2, ..., z = 26), and the digits (0-9 remain as they are).","solution":"def sum_parts(s): Takes the input string s and calculates the sum of the numerical values of the uppercase alphabetic characters, lowercase alphabetic characters, and digits. Parameters: s (str): The input string in the format \\"UPPERCASE-lowercase-digits\\" Returns: int: The sum of the numerical values first_part, second_part, third_part = s.split(\'-\') total_sum = 0 # Sum of uppercase characters (A=1, B=2, ..., Z=26) for char in first_part: total_sum += ord(char) - ord(\'A\') + 1 # Sum of lowercase characters (a=1, b=2, ..., z=26) for char in second_part: total_sum += ord(char) - ord(\'a\') + 1 # Sum of digits (0-9) for char in third_part: total_sum += int(char) return total_sum"},{"question":"You are given a list of **n** integers. You can perform the following operation on the list any number of times: Choose any prefix of the list and increase all numbers in that prefix by 1. Your task is to determine the minimum number of operations required to make all elements of the list equal. The first line of the input contains a single integer **n** (1 leq n leq 10^5) — the length of the list. The second line contains **n** integers (1 leq a_i leq 10^9) — the elements of the list. Output a single integer — the minimum number of operations required. # Example Input: ``` 5 1 2 3 4 5 ``` Output: ``` 4 ``` Input: ``` 4 4 4 4 4 ``` Output: ``` 0 ``` Input: ``` 3 1 1 2 ``` Output: ``` 1 ``` # Explanation: In the first example, you can perform the following sequence of operations: increase the prefix of length 5 by 1, then the prefix of length 4 by 1, then the prefix of length 3 by 1, and finally the prefix of length 2 by 1 to make all elements equal to 5. Hence, the minimum number of operations required is 4. In the second example, all elements are already equal, hence no operation is needed making the answer 0. In the third example, you can increase the prefix of length 3 by 1 to make all elements equal. The minimum number of operations required is 1.","solution":"def min_operations_to_equalize(n, arr): Returns the minimum number of operations required to make all elements of the list equal. Parameters: n (int): The number of elements in the list. arr (list of int): The list of integers. Returns: int: The minimum number of operations required. max_value = max(arr) total_operations = 0 for num in arr: total_operations += (max_value - num) return total_operations"},{"question":"Given an array of integers `nums` containing `n` elements, write a function to determine if there are three distinct indices `i`, `j`, and `k` in the array such that `nums[i] + nums[j] = nums[k]`. If such elements exist, return the triplet `(i, j, k)`. If there are multiple possible triplets, return any one of them. If no such triplet exists, return `None`. # Input The input consists of: - An integer `n` (3 ≤ n ≤ 500) – the number of elements in the array. - An array `nums` of `n` integers where each integer `nums[i]` (1 ≤ nums[i] ≤ 10^6). # Output - If such a triplet exists, output the indices `i`, `j`, and `k`. The indices should be 0-based. - If no such triplet exists, output `None`. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 0 1 2 ``` Explanation In the given array, `nums[0] + nums[1] = nums[2]` (1 + 2 = 3), so the triplet `(0, 1, 2)` is a valid solution. # Constraints - You should aim for a solution with a time complexity better than O(n^3) if possible.","solution":"def find_triplet(nums): Finds a triplet (i, j, k) such that nums[i] + nums[j] = nums[k] n = len(nums) # Dictionary to store the value and its index value_to_index = {value: index for index, value in enumerate(nums)} for i in range(n): for j in range(i + 1, n): summation = nums[i] + nums[j] if summation in value_to_index: k = value_to_index[summation] if k != i and k != j: return (i, j, k) return None"},{"question":"Bob is a software developer who uses a social network application that allows him to send friend requests to other users. Each user in the network has a unique user ID ranging from 1 to n. Bob is interested in analyzing the friend request patterns over a certain period. In the network, each friend request has a sender and a receiver, and both are represented by their user IDs. Bob wants to determine the user who has sent the maximum number of friend requests during the given period. If there are multiple users with the same maximum number of friend requests sent, Bob wants to identify the user with the smallest user ID among them. Write a function `find_top_sender(n: int, requests: List[Tuple[int, int]]) -> int` that takes as input: 1. `n` - an integer representing the total number of users in the network. 2. `requests` - a list of tuples where each tuple `(sender, receiver)` represents a friend request sent from `sender` to `receiver`. The function should return an integer representing the user ID who has sent the most friend requests. If multiple users have sent the maximum number of friend requests, return the smallest user ID among them. # Constraints: - (2 leq n leq 10^5) - (1 leq |requests| leq 10^6) - (1 leq sender, receiver leq n) # Example: ```python # Example 1 n = 5 requests = [(1, 2), (3, 2), (1, 4), (2, 3), (1, 5), (3, 4)] # User 1 has sent 3 friend requests, User 3 has sent 2 friend requests, User 2 has sent 1 friend request # User 4 and 5 have sent 0 friend requests # The user with the most friend requests sent is User 1 print(find_top_sender(n, requests)) # Output: 1 # Example 2 n = 3 requests = [(1, 2), (2, 1), (3, 1), (3, 2)] # User 1 has sent 1 friend request, User 2 has sent 1 friend request, User 3 has sent 2 friend requests # The user with the most friend requests sent is User 3 print(find_top_sender(n, requests)) # Output: 3 ```","solution":"from typing import List, Tuple def find_top_sender(n: int, requests: List[Tuple[int, int]]) -> int: # Dictionary to store the count of requests sent by each user sent_request_count = {} # Count the number of requests for each sender for sender, _ in requests: if sender in sent_request_count: sent_request_count[sender] += 1 else: sent_request_count[sender] = 1 # Find the user with the maximum number of requests sent max_requests = 0 top_sender = float(\'inf\') for user, count in sent_request_count.items(): if count > max_requests or (count == max_requests and user < top_sender): max_requests = count top_sender = user return top_sender"},{"question":"You are given a list of students who want to attend different workshops. Each student specifies their preferred workshop and an availability time range during which they can attend. A workshop can only accommodate one student at any given time. To maximize participation, you need to assign students to workshops in such a way that the number of students attending their preferred workshops is maximized. The input consists of multiple test cases. The first line contains a single integer t — the number of test cases (1 le t le 100). For each test case, the first line contains two integers n and w (1 le n, w le 100) — the number of students and the number of workshops, respectively. The next n lines each contain three integers: the student\'s preferred workshop p_i (1 le p_i le w), the student\'s starting availability time s_i (0 le s_i le 1440), and the student\'s ending availability time e_i (s_i le e_i le 1440). All times are given in minutes from the start of the day. Output: For each test case, output the maximum number of students who can attend their preferred workshops. Example input: ``` 2 3 2 1 540 600 2 120 180 1 560 610 4 3 1 60 120 3 180 240 1 100 160 2 90 150 ``` Example output: ``` 2 3 ``` Explanation: In the first test case, student 1 and student 3 have overlapping availability for workshop 1, but the second student can attend their preferred workshop 2 without conflict. Hence, a maximum of two students can attend their preferred workshops. In the second test case, no student\'s schedule overlaps with another student\'s schedule in their preferred workshops, allowing all students to attend.","solution":"def maximum_students_workshops(t, cases): results = [] for case in cases: n, w = case[0] students = case[1] # Sort workshops based on availability time workshops = [[] for _ in range(w + 1)] for student in students: p_i, s_i, e_i = student workshops[p_i].append((s_i, e_i)) total_attend = 0 for workshop in workshops: if workshop: # Sort by end times workshop.sort(key=lambda x: x[1]) count = 0 last_end_time = -1 for s_i, e_i in workshop: if s_i >= last_end_time: count += 1 last_end_time = e_i total_attend += count results.append(total_attend) return results # Example usage: # t = 2 # cases = [ # ((3, 2), [(1, 540, 600), (2, 120, 180), (1, 560, 610)]), # ((4, 3), [(1, 60, 120), (3, 180, 240), (1, 100, 160), (2, 90, 150)]) # ] # print(maximum_students_workshops(t, cases)) # [2, 3]"},{"question":"You are given an array of length n consisting of positive integers. Your task is to find the minimum possible value of the largest sum among k contiguous subarrays that the original array can be divided into. For example, if the array is [7, 2, 5, 10, 8] and k is 2, the optimal way to split the array is into [7, 2, 5] and [10, 8]. The sum of the first subarray is 14 and the sum of the second subarray is 18. The largest sum among these two subarrays is 18, which is the minimal possible value of the largest sum achievable by any valid split into 2 contiguous subarrays. Write a program that takes the following input and produces the specified output: **Input:** - The first line contains two integers n and k (1 leq n leq 10^5, 1 leq k leq n), the length of the array and the number of subarrays, respectively. - The second line contains n space-separated integers representing the array, where each integer is between 1 and 10^4. **Output:** - Print a single integer representing the minimum possible value of the largest sum among the k contiguous subarrays. **Example:** ``` Input: 5 2 7 2 5 10 8 Output: 18 ``` **Note:** - Ensure your solution is optimized for performance, considering the constraints.","solution":"def min_largest_sum(n, k, arr): def can_split_with_max_sum(max_sum): current_sum = 0 subarrays = 1 for num in arr: if current_sum + num > max_sum: subarrays += 1 current_sum = num if subarrays > k: return False else: current_sum += num return True left, right = max(arr), sum(arr) while left < right: mid = (left + right) // 2 if can_split_with_max_sum(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given an array of n integers. An operation is defined where you can select any two elements of the array and replace one of them with their sum. Your task is to determine the minimum number of operations required to make all elements of the array equal. If it is not possible to make all elements of the array equal, return -1. The first line contains one integer n (2 le n le 1000). The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9). Print the minimum number of operations required to make all elements of the array equal, or -1 if it is not possible. **Examples:** **Input:** ``` 3 1 2 3 ``` **Output:** ``` 2 ``` **Input:** ``` 4 1 1 2 3 ``` **Output:** ``` -1 ```","solution":"def min_operations_to_make_elements_equal(n, arr): total_sum = sum(arr) if total_sum % n != 0: return -1 # The target value for all elements to become equal target = total_sum // n # Minimal number of operations is always (n - 1) if it\'s possible return n - 1"},{"question":"You\'re given an array a of length n and a number k. You need to find the minimum number of changes needed to make the array contain exact k distinct elements. The first line contains two integers n and k (1 le k le n le 1000), where n is the number of elements in the array a and k is the number of distinct elements required. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^6) — the elements of the array a. Print a single integer denoting the minimum number of changes needed to make the array contain exactly k distinct elements. If it is impossible, print \\"-1\\". If in the first example, the given array is [1, 2, 2, 3] and k is 2, one optimal way to make only 2 distinct elements is to change the array to [1, 1, 1, 1] with 3 changes. In the second example, the given array is [1, 1, 1, 1] and k is 3, it is impossible to have 3 distinct elements. Thus, the output is -1.","solution":"def min_changes_to_distinct_elements(n, k, a): Returns the minimum number of changes needed to make the array `a` contain exactly `k` distinct elements or -1 if it is impossible. from collections import Counter unique_elements = set(a) if len(unique_elements) == k: return 0 if len(unique_elements) > k: return 0 if len(unique_elements) < k: if n >= k: return k - len(unique_elements) else: return -1 return -1"},{"question":"You are given a number n. Consider a sequence of natural numbers starting from 1 up to n. Your task is to determine whether it is possible to split this sequence into two non-empty parts with equal sums. If possible, find two such parts; otherwise, indicate that no such partition exists. For example, if n = 7, the sequence is [1, 2, 3, 4, 5, 6, 7]. Splitting this sequence into [1, 2, 3, 4, 5] and [6, 7], each part has a sum of 15, which are equal. The only line of the input contains a single integer n (1 ≤ n ≤ 10^9). Print \\"YES\\" if it\'s possible to split the sequence into two parts with equal sums. If possible, also print the contents of the two parts in two separate lines. If not, print \\"NO\\". For instance: - For input 7, the output should be: ``` YES 1 2 3 4 5 6 7 ``` - For input 6, the output should be: ``` NO ```","solution":"def split_sequence(n): Determines whether it is possible to split the sequence of numbers from 1 to n into two parts with equal sums. Args: n (int): The end of the sequence (inclusive). Returns: A tuple containing: - A boolean indicating if a split is possible. - If possible, two lists representing the two parts with equal sums. total_sum = n * (n + 1) // 2 if total_sum % 2 != 0: return (\\"NO\\",) half_sum = total_sum // 2 part1, part2 = [], [] current_sum = 0 for i in range(n, 0, -1): if current_sum + i <= half_sum: part1.append(i) current_sum += i else: part2.append(i) return (\\"YES\\", part1, part2)"},{"question":"The Berland National Bank has recently issued new debit cards to its customers. However, a decimal bug has been detected in their software, leading to incorrect decimal amounts when processing transactions. The bank needs your help to manually adjust the transaction amounts. You need to write a program that processes a list of transaction amounts and ensures each amount is correctly rounded to two decimal places. Additionally, any negative transaction amounts should be flagged as \\"ERROR\\" in the final output. The input consists of the following: - An integer n (1 le n le 10^5) representing the number of transaction amounts. - A list of n floats representing the transaction amounts. The program should output: - For each valid transaction amount, print the amount rounded to two decimal places. - For each negative transaction amount, output the string \\"ERROR\\". # Input The first line contains a single integer n (1 le n le 10^5) — the number of transaction amounts. The second line contains n floats t_1, t_2, dots, t_n — the transaction amounts. # Output Print n lines, each containing the corrected transaction amount or \\"ERROR\\" for negative amounts. # Example Input ``` 5 12.5 3.456 -1.2 100.999 0.1 ``` Output ``` 12.50 3.46 ERROR 101.00 0.10 ``` # Note In the example, the transaction amounts are corrected as follows: - `12.5` is rounded to `12.50`. - `3.456` is rounded to `3.46`. - `-1.2` is a negative amount, so it is flagged as \\"ERROR\\". - `100.999` is rounded to `101.00`. - `0.1` is rounded to `0.10`.","solution":"def process_transactions(n, transactions): Processes a list of transaction amounts and ensures each amount is correctly rounded to two decimal places. Any negative transaction amounts are flagged as \\"ERROR\\". Parameters: n : int - Number of transaction amounts transactions : list of float - The transaction amounts Returns: list : Processed transaction amounts as strings results = [] for amount in transactions: if amount < 0: results.append(\\"ERROR\\") else: results.append(f\\"{amount:.2f}\\") return results"},{"question":"The library management system of a local university needs to implement a feature to manage the borrowing and returning of books. Each student is allowed to borrow up to 3 books at a time. The system keeps a record of the books borrowed by each student in the form of a list containing the book IDs. Your task is to write a program that simulates the borrowing and returning process. The program should take a series of commands as input, where each command is either a \\"borrow\\" or a \\"return\\" operation. For a \\"borrow\\" command, the program should add the book ID to the student\'s list if the student has not already borrowed 3 books and if the student has not already borrowed the same book. For a \\"return\\" command, the program should remove the book ID from the student\'s list. If the student tries to return a book that is not in their list, the situation should be handled gracefully by ignoring the command. The input consists of a series of commands in the format \\"borrow <book_id>\\" or \\"return <book_id>\\", where <book_id> is a positive integer not exceeding 1000. The commands are provided one per line and the input is terminated by the command \\"end\\". After processing all commands, the program should output the final list of borrowed books in ascending order of book IDs. Example input: ``` borrow 101 borrow 102 borrow 103 borrow 104 return 102 borrow 105 end ``` Example output: ``` 101,103,105 ```","solution":"def manage_books(commands): borrowed_books = set() for command in commands: parts = command.split() if len(parts) != 2: continue action, book_id_str = parts[0], parts[1] try: book_id = int(book_id_str) except ValueError: continue if action == \\"borrow\\": if len(borrowed_books) < 3 and book_id not in borrowed_books: borrowed_books.add(book_id) elif action == \\"return\\": borrowed_books.discard(book_id) return sorted(borrowed_books)"},{"question":"Given an array of n integers and m operations of two types: 1. Add an integer v to all elements in a subarray. 2. Find the maximum element in a subarray. Perform the operations efficiently and return the results of the maximum element queries. The first line contains two positive integers n (1 leq n leq 100,000) and m (1 leq m leq 100,000). The second line contains n integers representing the initial array a (1 leq a_i leq 1,000,000). The next m lines describe the operations. Each operation is represented as follows: - `1 l r v` - Add integer v to all elements in the subarray from index l to r (1-based). - `2 l r` - Find the maximum element in the subarray from index l to r (1-based). Output the results of the maximum element queries in the order they appear. **Example:** ``` Input: 5 3 1 2 3 4 5 1 2 4 2 2 1 5 2 2 4 Output: 6 6 ``` **Explanation:** After the first operation, the array becomes `[1, 4, 5, 6, 5]`. The first query asks for the maximum element between index 1 and 5, which is `6`. The second query asks for the maximum element between index 2 and 4, which is also `6`.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.data = data[:] self.lazy = [0] * (4 * self.n) self.tree = [0] * (4 * self.n) self.build(0, 0, self.n - 1) def build(self, node, start, end): if start == end: self.tree[node] = self.data[start] else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 self.build(left_child, start, mid) self.build(right_child, mid + 1, end) self.tree[node] = max(self.tree[left_child], self.tree[right_child]) def update_range(self, l, r, val): self._update_range(0, 0, self.n - 1, l, r, val) def _update_range(self, node, start, end, l, r, val): if self.lazy[node] != 0: self.tree[node] += self.lazy[node] if start != end: # not a leaf node self.lazy[2 * node + 1] += self.lazy[node] self.lazy[2 * node + 2] += self.lazy[node] self.lazy[node] = 0 if start > end or start > r or end < l: return if start >= l and end <= r: self.tree[node] += val if start != end: self.lazy[2 * node + 1] += val self.lazy[2 * node + 2] += val return mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 self._update_range(left_child, start, mid, l, r, val) self._update_range(right_child, mid + 1, end, l, r, val) self.tree[node] = max(self.tree[left_child] + self.lazy[left_child], self.tree[right_child] + self.lazy[right_child]) def query_range(self, l, r): return self._query_range(0, 0, self.n - 1, l, r) def _query_range(self, node, start, end, l, r): if self.lazy[node] != 0: self.tree[node] += self.lazy[node] if start != end: self.lazy[2 * node + 1] += self.lazy[node] self.lazy[2 * node + 2] += self.lazy[node] self.lazy[node] = 0 if start > end or start > r or end < l: return float(\'-inf\') if start >= l and end <= r: return self.tree[node] mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 left_query = self._query_range(left_child, start, mid, l, r) right_query = self._query_range(right_child, mid + 1, end, l, r) return max(left_query, right_query) def array_operations(n, m, arr, operations): seg_tree = SegmentTree(arr) results = [] for op in operations: if op[0] == 1: _, l, r, v = op seg_tree.update_range(l-1, r-1, v) elif op[0] == 2: _, l, r = op result = seg_tree.query_range(l-1, r-1) results.append(result) return results"},{"question":"Given an array of positive integers, you need to determine the maximum sum of elements that you can obtain from a subarray of length exactly k. However, to make this task more interesting, you can choose at most one element in the array to be excluded from the subarray (effectively allowing you to choose a subarray of length k+1 and remove one element from it to form a subarray of length k). Your task is to write a program that finds this maximum possible sum. The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) - the number of elements in the array and the length of the subarray respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10,000) - the elements of the array. Print one integer - the maximum sum of the subarray of length exactly k after removing at most one element from a subarray of length k+1. # Example Input ``` 8 3 6 2 1 8 10 7 4 7 ``` Output ``` 25 ``` # Explanation You can consider the subarray [2, 1, 8, 10] and remove 1 to get the subarray [2, 8, 10] with sum 20. The maximum sum can be obtained from subarray [10, 7, 7] without removing any element, giving the sum 25.","solution":"def max_sum_subarray_with_one_exclusion(n, k, arr): Returns the maximum sum of a subarray of length exactly k after removing at most one element from a subarray of length k+1. # Calculate the initial k sum cur_sum = sum(arr[:k]) max_sum = cur_sum # Calculate the k+1 sums and determine sums after removing one element for i in range(k, n): cur_sum += arr[i] - arr[i - k] max_sum = max(max_sum, cur_sum) check_sum = cur_sum - min(arr[i - k: i + 1]) max_sum = max(max_sum, check_sum) return max_sum"},{"question":"You are given an unrooted tree with `n` nodes, where each node is numbered from 1 to `n` and every edge has a certain weight. A tree is a connected acyclic graph. In other words, there are no cycles in the graph. You are required to find the maximum length of a path in the tree such that the path does not use an edge with a weight greater than a given threshold `k`. The input format is as follows: - The first line contains two integers `n` (2 ≤ n ≤ 100,000) and `k` (1 ≤ k ≤ 1,000,000,000), representing the number of nodes and the maximum allowed weight for any edge in the path. - Each of the next `n-1` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1,000,000,000), which describe an undirected edge between nodes `u` and `v` with weight `w`. The output should be a single integer representing the maximum length of a path in the tree that does not use any edge with a weight greater than `k`. Example: **Input:** ``` 5 4 1 2 3 1 3 10 2 4 2 2 5 4 ``` **Output:** ``` 2 ``` Explanation: In this example, the tree has 5 nodes and the maximum allowed weight for any edge in the path is 4. The longest path that does not contain any edge with a weight greater than 4 is from node 1 to node 5 through node 2 (i.e., the path 1-2-5). The length of this path is 2 (1-2-5). Note that we cannot include the edge between nodes 1 and 3, as its weight (10) exceeds the threshold `k` (4).","solution":"from collections import defaultdict, deque def bfs_farthest_node(start, graph, k): Perform BFS to find the farthest node from the start node considering only edges with weight <= k. visited = {start} queue = deque([(start, 0)]) # (current_node, current_distance) farthest_node = start max_distance = 0 while queue: node, dist = queue.popleft() for neighbor, weight in graph[node]: if neighbor not in visited and weight <= k: visited.add(neighbor) queue.append((neighbor, dist + 1)) if dist + 1 > max_distance: max_distance = dist + 1 farthest_node = neighbor return farthest_node, max_distance def max_path_under_weight(n, k, edges): Function to find the maximum length of a path in the tree such that no edge in the path exceeds the given weight k. # Create graph graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Use BFS to find the farthest node from any node, let\'s start with node 1 farthest_node, _ = bfs_farthest_node(1, graph, k) # Use BFS again from the farthest node found in the previous BFS _, max_distance = bfs_farthest_node(farthest_node, graph, k) return max_distance # Example usage # edges = [(1, 2, 3), (1, 3, 10), (2, 4, 2), (2, 5, 4)] # print(max_path_under_weight(5, 4, edges)) # Output: 2"},{"question":"Bob is trying to organize a coding contest with a series of programming problems. Each problem has a difficulty rating, which is a positive integer. The contest is considered \\"well-balanced\\" if for any three consecutive problems in the list, at least one problem has an even difficulty rating and at least one has an odd difficulty rating. You are given the number of problems n (3 ≤ n ≤ 100) and an array of n integers representing the difficulty ratings of the problems. Determine if the given contest is \\"well-balanced\\". The first line of input contains the integer n. The second line contains n space-separated integers representing the difficulty ratings of the problems. Print \\"Yes\\" if the given contest is well-balanced and \\"No\\" otherwise. For example, in the input: 6 1 2 3 4 5 6 The sequence is well-balanced because within every three consecutive problems, there is at least one problem with an odd difficulty rating and at least one with an even difficulty rating. In another example: 4 2 4 6 8 The sequence is not well-balanced because the first three problems (2, 4, 6) do not contain any odd difficulty ratings. Thus the answer is \\"No\\".","solution":"def is_well_balanced(n, difficulties): Determines if the given contest is well-balanced. :param n: Integer, number of problems :param difficulties: List of integers representing the difficulty ratings :return: \\"Yes\\" if the contest is well-balanced, otherwise \\"No\\" for i in range(n - 2): segment = difficulties[i:i+3] has_even = any(d % 2 == 0 for d in segment) has_odd = any(d % 2 == 1 for d in segment) if not (has_even and has_odd): return \\"No\\" return \\"Yes\\""},{"question":"A company is organizing a team-building exercise. Each employee is assigned an identifier from 1 to n. The company wants to form pairs of employees such that the total skill difference between the pairs is minimized. You are provided with the skill levels of each employee. Write a program to pair up employees such that the maximum difference of skill levels between any pair is minimized. If two employees are paired together, they cannot be paired again. If the number of employees is odd, one employee will not be paired. Input: - The first line contains an integer n (1 ≤ n ≤ 1000) - the number of employees. - The second line contains n integers separated by spaces, where the ith integer is the skill level of the ith employee. Output: - If the number of employees is even, output n/2 pairs of integer indices (1-based) representing which employees are paired. If there are multiple solutions, any will be accepted. - If the number of employees is odd, output \\"IMPOSSIBLE\\". Example: Input: 4 1 5 3 9 Output: 1 3 2 4 Explanation: In this case, pairing the employees (1, 3) and (2, 4) ensures the skill differences (2 and 4) are minimized. Other valid outputs could also exist. Input: 5 7 1 5 3 9 Output: IMPOSSIBLE Explanation: With 5 employees, it\'s impossible to pair everyone such that no one is left out.","solution":"def find_min_skill_difference_pairs(n, skill_levels): if n % 2 != 0: return \\"IMPOSSIBLE\\" indexed_skills = list(enumerate(skill_levels, start=1)) indexed_skills.sort(key=lambda x: x[1]) pairs = [] for i in range(0, n, 2): pairs.append((indexed_skills[i][0], indexed_skills[i + 1][0])) return pairs"},{"question":"You are given a rectangular grid of dimensions n times m. Some cells of the grid may contain obstacles, and some cells are empty. Your task is to determine the size of the largest rectangular subgrid that contains no obstacles. The input contains multiple test cases. The first line of the input contains a single integer t (1 le t le 10) — the number of test cases. The first line of each test case contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. The next n lines contain m characters each. Each character is either a `#` representing an obstacle or `.` representing an empty cell. For each test case, print the size of the largest rectangular subgrid containing no obstacles. # Example **Input:** ``` 2 3 4 ..#. .#.. .... 2 2 #. .# ``` **Output:** ``` 4 1 ``` # Explanation In the first example, the largest obstacle-free subgrid has dimensions 2 times 2, thus the size is 4. In the second example, every cell either contains an obstacle or is isolated, thus the largest obstacle-free subgrid has size 1.","solution":"def largest_obstacle_free_subgrid(t, test_cases): def maxHist(row): stack = [] max_area = 0 index = 0 while index < len(row): if not stack or row[stack[-1]] <= row[index]: stack.append(index) index += 1 else: top = stack.pop() area = (row[top] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top = stack.pop() area = (row[top] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area results = [] for case in test_cases: n, m, grid = case[\'n\'], case[\'m\'], case[\'grid\'] dp = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == \'.\': dp[i][j] = (dp[i - 1][j] + 1) if i > 0 else 1 else: dp[i][j] = 0 max_area = 0 for i in range(n): max_area = max(max_area, maxHist(dp[i])) results.append(max_area) return results"},{"question":"Petya loves reading and has his bookshelf sorted by the number of pages in each book, in ascending order. Each book is represented by its number of pages. One day, he decided to rearrange his bookshelf but still wants the books to remain sorted by pages. Specifically, he wants to move a certain number of books from the beginning of the shelf to the end, while retaining the order. Given the number of books, the number of books to move from the beginning to the end, and the number of pages in each book, help Petya rearrange his bookshelf. Input: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of books and the number of books to move. - The second line contains n integers separated by spaces, where each integer ai (1 ≤ ai ≤ 10^9) represents the number of pages in the i-th book. The books are given in ascending order of pages. Output: - Print a single line with n integers, representing the number of pages in each book after the rearrangement. Example: Input: 5 2 100 200 300 400 500 Output: 300 400 500 100 200","solution":"def rearrange_books(n, k, pages): Rearranges the bookshelf by moving the first k books to the end. Parameters: - n: int, number of books - k: int, number of books to move from the beginning to the end - pages: list of int, number of pages in each book Returns: - list of int, rearranged number of pages return pages[k:] + pages[:k]"},{"question":"You have a rectangular grid with m rows and n columns, where each cell has some initial value. You need to paint some contiguous rectangular subgrid in such a way that all cells in that subgrid will have the same color (value). The goal is to maximize the maximum value in any cell in the grid after performing a given number of painting steps. You are given an initial grid and a series of painting instructions. Each instruction consists of the top-left and bottom-right positions of the subgrid to be painted, as well as the value to use. You need to process a series of queries. Each query specifies the range of painting steps to apply, and you must determine the maximum value in the grid after applying those painting steps. # Input - The first line contains three integers m, n, and k (1 le m, n le 300, 1 le k le 1000): the number of rows, the number of columns, and the number of painting instructions. - The next m lines each contain n integers representing the initial values of the grid. - The following k lines contain a painting instruction in the form r1_p1 c1_p1 r2_p2 c2_p2 x (1 le r1_p1 le r2_p2 le m, 1 le c1_p1 le c2_p2 le n, 1 le x le 10^9), where r1_p1, c1_p1 is the top-left and r2_p2, c2_p2 is the bottom-right boundary of a subgrid to paint with the value x. - The first line of queries contain q (1 le q le 10000), the number of queries. - The following q lines contain two integers l and r (1 le l le r le k) which denotes the range of painting instructions to apply (inclusive). # Output For each query, output a single integer — the maximum value in the grid after applying the specified painting instructions. # Example Input ``` 4 4 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1 2 4 3 100 2 2 3 3 200 3 3 4 4 300 2 1 1 1 3 ``` Output ``` 100 300 ``` # Explanation - After applying the painting instruction (1, 2, 4, 3, 100), the grid becomes: ``` 1 100 100 4 5 100 100 8 9 100 100 12 13 100 100 16 ``` The maximum value in the grid is 100. - After applying all the painting instructions, the grid becomes: ``` 1 100 100 4 5 200 200 8 9 200 200 12 13 200 300 300 ``` The maximum value in the grid is 300.","solution":"def apply_paint_instructions(grid, instructions, l, r): m = len(grid) n = len(grid[0]) # Make a deep copy of the original grid to work on and not modify the original painted_grid = [row[:] for row in grid] # Apply the instructions from l to r (1-based index to 0-based) for i in range(l - 1, r): r1, c1, r2, c2, value = instructions[i] for row in range(r1 - 1, r2): for col in range(c1 - 1, c2): painted_grid[row][col] = value # Find the maximum value in the painted grid max_value = max(max(row) for row in painted_grid) return max_value def process_queries(m, n, k, initial_grid, painting_instructions, queries): results = [] for l, r in queries: max_value = apply_paint_instructions(initial_grid, painting_instructions, l, r) results.append(max_value) return results"},{"question":"You are given a string s consisting of lowercase English letters. You can perform the following operation on the string any number of times: choose two adjacent equal characters and remove both of them from the string, concatenating the remaining parts of the string together. Determine the length of the longest string you can obtain after performing any number of such operations. The first and only line contains the string s (1 leq |s| leq 200,000). Print one integer — the length of the longest string you can obtain.","solution":"def longest_string_after_operations(s): Given a string s, performs the operation of removing two adjacent equal characters any number of times and returns the length of the longest string that can be obtained. Parameters: s (str): The input string consisting of lowercase English letters. Returns: int: The length of the longest string that can be obtained. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack)"},{"question":"Alex loves working with numbers, particularly with segments of an array. He has an array of length n, and he wants to determine the maximum sum of any contiguous subarray with a length of exactly k. Your task is to help Alex find the maximum sum of a contiguous subarray of length k. The first line contains two integers n and k (1 leq k leq n leq 300,000) — the length of the array and the length of the subarray respectively. The second line contains n integers a_1, a_2, ldots, a_n (-10^6 leq a_i leq 10^6) — the elements of the array. Output a single integer — the maximum sum of a contiguous subarray of length k. **Examples** **Input** ``` 5 3 1 2 3 -2 5 ``` **Output** ``` 6 ``` **Input** ``` 4 2 -1 -2 -3 -4 ``` **Output** ``` -3 ``` **Explanation** In the first example, the subarray of length 3 with the maximum sum is [1, 2, 3], with a sum of 6. In the second example, the subarray of length 2 with the maximum sum is [-1, -2], with a sum of -3.","solution":"def max_sum_subarray_length_k(n, k, arr): Returns the maximum sum of any contiguous subarray with length exactly k. Parameters: n (int): Length of the array. k (int): Length of the subarray. arr (list): List of integers representing the array. Returns: int: Maximum sum of a contiguous subarray of length k. # Calculate the initial sum of the first subarray of length k current_sum = sum(arr[:k]) max_sum = current_sum # Use sliding window approach to find maximum sum subarray of length k for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an integer array a of length n. Your task is to rearrange the elements of the array in such a way that the absolute difference between any two consecutive elements is minimized. Formally, let b be a permutation of array a such that maximum absolute difference between any two consecutive elements of b is minimized. Return any permutation of a that satisfies the condition. For example, if a = [3, 1, 4, 1, 5], then one possible rearrangement is [1, 1, 3, 4, 5], giving the differences [0, 2, 1, 1]. The maximum absolute difference between consecutive elements is minimized (which is 2 in this case). The first line contains one integer t (1 le t le 10^4). Then t test cases follow. The first line of each test case contains one integer n (1 le n le 2 cdot 10^5). The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. For each test case, output an array of n integers representing any permutation of the original array that satisfies the condition. # Example Input: ``` 2 5 3 1 4 1 5 3 10 20 30 ``` Output: ``` 1 1 3 4 5 10 20 30 ```","solution":"def min_absolute_difference(arr): Given an array, returns a permutation which minimizes the maximum absolute difference between any two consecutive elements. arr.sort() return arr def process_test_cases(t, test_cases): results = [] for case in test_cases: n, arr = case result = min_absolute_difference(arr) results.append(result) return results"},{"question":"In a remote village, there is a special tradition where villagers send messages to each other using unique alphanumeric codes. These codes follow a specific pattern — they are formed by concatenating a base string and an integer. For instance, if the base string is \\"abc\\" and the integer is 123, the resulting code would be \\"abc123\\". The village chief wants to send out a series of announcements, each encoded with a unique alphanumeric code. To generate a list of these codes, he follows these rules: 1. He starts with a given base string and an integer, which form the initial code. 2. For each subsequent code, he increments the integer by a fixed value. Given the base string, the starting integer, the increment value, and the number of announcements to send, your task is to generate the list of alphanumeric codes. The input consists of four space-separated values: 1. A base string (a non-empty string of lowercase and uppercase alphabets, less than 100 characters long). 2. An integer start (1 ≤ start ≤ 10^5), the initial integer value to start the codes. 3. An integer increment (1 ≤ increment ≤ 10^5), the amount to increase the integer value for each new code. 4. An integer n (1 ≤ n ≤ 100), the number of announcements to generate. Print n lines of alphanumeric codes, each on a new line, corresponding to the generated announcements. Example Input: ``` alpha 100 10 5 ``` Example Output: ``` alpha100 alpha110 alpha120 alpha130 alpha140 ``` In this example, the base string is \\"alpha\\", the initial integer is 100, and the increment value is 10. The first code is \\"alpha100\\", the second is \\"alpha110\\", and so on, until 5 codes are generated.","solution":"def generate_codes(base_string, start, increment, n): Generates a list of alphanumeric codes based on the given base string, start integer, increment, and number of codes. Parameters: base_string (str): The base string to use in the code. start (int): The starting integer value. increment (int): The value to increment the integer by for each new code. n (int): The number of codes to generate. Returns: list: A list of alphanumeric codes generated. codes = [] current_value = start for _ in range(n): codes.append(f\\"{base_string}{current_value}\\") current_value += increment return codes"},{"question":"An online bookstore is organizing a limited-time discount event. They plan to offer a special discount to customers who buy specific sets of books together. Each book has a unique identifier and a price. Your task is to find the maximum possible discount a customer can get, given the constraints on the sets of books that qualify for the discount. The discount event allows only one set discount per customer. You are given `m` different book sets, and each set contains a list of book identifiers and a corresponding discount value. A customer’s purchase may contain multiple books, but only one set can be chosen to receive the discount. The first line of input contains two integers `n` and `m` — the number of books available for purchase and the number of discount sets, respectively. The next line contains `n` integers, where the `i`-th integer represents the price of the `i`-th book. The next `m` lines describe the discount sets. Each line begins with an integer `k_i`, which is the number of books in the `i`-th discount set, followed by `k_i` integers that represent the unique identifiers of the books in this set, and the last integer on the line is the discount value for that set. For each test case, you need to output the maximum possible discount a customer can get. Input format: - The first line contains two integers: `n` (1 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 100). - The second line contains `n` integers: `p_1, p_2, ..., p_n` (1 ≤ p_i ≤ 10000) — the prices of the books. - The next `m` lines each describe a discount set. The first integer on each line is `k_i` (1 ≤ k_i ≤ n), followed by `k_i` integers, the book IDs (`a_{i,1}, a_{i,2}, ..., a_{i,k_i}`), and the last integer is `d_i` (1 ≤ d_i ≤ 10000), the discount for the set. Output format: - Print a single integer: the maximum possible discount a customer can get from purchasing a set of books. Example: Input: ``` 6 3 2000 3000 1500 2500 1800 2200 3 1 2 3 3000 2 4 5 2500 3 2 5 6 3500 ``` Output: ``` 3500 ``` In this example, a customer can buy books 2, 5, and 6 to get the maximum discount of 3500.","solution":"def max_discount(n, m, prices, discount_sets): Returns the maximum possible discount a customer can get from purchasing a set of books. Parameters: n (int): Number of books available for purchase. m (int): Number of discount sets. prices (list of int): Prices of the books. discount_sets (list of lists): List of discount sets, where each set is a list containing the number of books in the set, the IDs of the books, and the discount value. Returns: int: Maximum possible discount. max_possible_discount = 0 for discount_set in discount_sets: discount = discount_set[-1] max_possible_discount = max(max_possible_discount, discount) return max_possible_discount # Example usage: # n, m = 6, 3 # prices = [2000, 3000, 1500, 2500, 1800, 2200] # discount_sets = [[3, 1, 2, 3, 3000], [2, 4, 5, 2500], [3, 2, 5, 6, 3500]] # print(max_discount(n, m, prices, discount_sets)) # Output: 3500"},{"question":"You are given a binary tree where each node contains an integer value. Write a function to find the maximum path sum. The path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root. Each input includes a single binary tree provided in the form of: 1. An integer n (1 ≤ n ≤ 10^4) representing the number of nodes in the tree. 2. A list of n integers values representing the node values. 3. A list of n-1 pairs (u, v) representing edges between nodes u and v. The binary tree is guaranteed to be a connected acyclic graph. Write a function: ```python def max_path_sum(n: int, values: List[int], edges: List[Tuple[int, int]]) -> int: # implementation here ``` Output a single integer which is the maximum path sum. # Example **Input:** ``` n = 5 values = [-10, 9, 20, 15, 7] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] ``` **Output:** ``` 42 ``` # Note The maximum path sum is achieved by the path: 15 -> 20 -> 7, sum = 42.","solution":"from typing import List, Tuple class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(n: int, values: List[int], edges: List[Tuple[int, int]]) -> TreeNode: if not n: return None nodes = {i: TreeNode(values[i-1]) for i in range(1, n+1)} for u, v in edges: if nodes[u].left is None: nodes[u].left = nodes[v] else: nodes[u].right = nodes[v] return nodes[1] def max_path_sum(n: int, values: List[int], edges: List[Tuple[int, int]]) -> int: if n == 0: return 0 root = build_tree(n, values, edges) def max_gain(node): nonlocal max_sum if not node: return 0 left_gain = max(max_gain(node.left), 0) right_gain = max(max_gain(node.right), 0) current_max_path = node.val + left_gain + right_gain max_sum = max(max_sum, current_max_path) return node.val + max(left_gain, right_gain) max_sum = float(\'-inf\') max_gain(root) return max_sum"},{"question":"You are given an array of integers such that exactly one integer appears an odd number of times and all other integers appear an even number of times. Your task is to find the integer that appears an odd number of times. The first line contains a single integer n (1 ≤ n ≤ 100000) which denotes the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) which denote the elements of the array. Output the integer that appears an odd number of times. Example: Input: 5 1 2 3 2 1 Output: 3 In the given example, the integer 1 appears twice, the integer 2 appears twice, and the integer 3 appears once. Hence, 3 is the integer that appears an odd number of times.","solution":"def find_odd_occurrence(numbers): Returns the integer that appears an odd number of times in the list. Args: numbers (list of int): The list of integers. Returns: int: The integer that appears an odd number of times. result = 0 for number in numbers: result ^= number return result"},{"question":"Suppose you have an array of integers where each element represents the height of a bar in a histogram. The width of each bar is 1. Write a function in your preferred programming language to find the maximum rectangular area that can be formed within the histogram. For example, given the array [2, 1, 5, 6, 2, 3], the largest rectangle has an area of 10. ``` Example: Input: [2, 1, 5, 6, 2, 3] Output: 10 ``` Explanation: The largest rectangle that can be formed covers the indices from 2 to 3 (where values are 5 and 6) and its height is the minimum height within that range (5). The area is therefore 2 bars * 5 height each = 10.","solution":"def largest_rectangle_area(heights): Function to calculate the largest rectangular area in a histogram. :param heights: List[int] :return: int stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given an array of integers, and your task is to find the length of the longest subarray with elements that can be rearranged to form a palindrome. A subarray is a contiguous part of an array. An array is said to be able to form a palindrome if it can be rearranged such that it reads the same backward as forward. The same number can appear multiple times in the subarray. Input: - The first line contains n (1 ≤ n ≤ 100000) — the number of elements in the array. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100000). Output: - Print the length of the longest subarray that can be rearranged to form a palindrome. Example: - Input: 7 1 2 3 2 1 3 3 - Output: 7 Explanation: - The entire array can be rearranged as 1 2 3 3 2 1 or 3 2 1 1 2 3, both of which are palindromes. So, the length of the longest subarray is 7.","solution":"def longest_palindromic_subarray(arr): Returns the length of the longest subarray that can be rearranged to form a palindrome. from collections import defaultdict def can_form_palindrome(freq): odd_count = 0 for count in freq.values(): if count % 2 == 1: odd_count += 1 if odd_count > 1: return False return True n = len(arr) max_len = 0 for i in range(n): freq = defaultdict(int) for j in range(i, n): freq[arr[j]] += 1 if can_form_palindrome(freq): max_len = max(max_len, j - i + 1) return max_len"},{"question":"A new theme park has been opened, and it features a thrilling ride called the \\"Connected Ferris Wheel\\". The Ferris wheel consists of n cabins arranged in a circle. Each cabin is assigned a unique integer identifier from 1 to n, and the cabins are positioned in numerical order around the circle. During the ride, there is a game where each cabin hands over a baton to another cabin. Cabin i can hand over a baton to cabin j if the distance between cabin i and cabin j is less than or equal to a given threshold value d. The distance between two cabins i and j on the circle is defined as the minimum number of cabins that you need to pass through to move from i to j along the circle (either clockwise or counter-clockwise). To win the game, the baton must be passed from cabin 1 to all other cabins exactly once, in the minimum amount of time possible. Each baton handover takes exactly one second. Given the number of cabins n and the distance threshold d, your task is to calculate the minimum amount of time required to complete the game. # Input: - The first line contains two integers n and d (2 ≤ n ≤ 100, 1 ≤ d ≤ n-1) — the number of cabins and the distance threshold. # Output: - Output a single integer — the minimum time needed to pass the baton from cabin 1 to all other cabins exactly once. # Explanation: - In the first sample, with n = 5 and d = 1, Cabin 1 can pass the baton directly to Cabin 2 or Cabin 5 only. Each baton handover takes one second. The minimum time needed to pass the baton to all the cabins will then be calculated accordingly. # Example: Input: 5 1 Output: 4 Explanation: Starting from Cabin 1, you can pass the baton in the following sequence: 1->2->3->4->5. Each handover takes 1 second, so it takes a total of 4 seconds to pass the baton to all the other cabins. Note: Ensure that the sequence of baton handovers makes efficient use of the given distance threshold to minimize the total time. The problem aims to test your understanding of circular data structures and graph traversal principles.","solution":"def min_time_to_pass_baton(n, d): Calculates the minimum time required to pass the baton from cabin 1 to all other cabins exactly once. Parameters: n (int): number of cabins d (int): distance threshold Returns: int: minimum amount of time in seconds # To pass the baton to all other cabins starting from cabin 1 return (n - 1 + d - 1) // d"},{"question":"You are given a string of alphanumeric characters. A substring is defined to be any continuous string consisting of only alphabetic characters. Calculate the maximum length of any such substring. For example, given the string `a1b2CDe34FgH5`, the substrings consisting of only alphabetic characters are `a`, `b`, `CDe`, `FgH`, with lengths 1, 1, 3, and 3 respectively. Thus, the maximum length is 3. Input: - A single line containing a string `s` of length n (1 ≤ n ≤ 100,000) Output: - A single integer representing the maximum length of any alphabetic substring within the input string. Example 1: Input: `abc123def456ghi` Output: `3` Example 2: Input: `123456` Output: `0` Example 3: Input: `a1b1c1d1` Output: `1` Explanation: 1. In Example 1, the longest alphabetic substrings are `abc`, `def`, and `ghi` each of length 3. 2. In Example 2, there are no alphabetic characters, so the longest length is 0. 3. In Example 3, each alphabetic character is separated by digits, so the longest alphabetic substring length is 1.","solution":"def max_alphabetic_substring_length(s): This function returns the maximum length of any alphabetic substring in the given string s. max_length = 0 current_length = 0 for char in s: if char.isalpha(): current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"You are given a grid with n rows and m columns. Each cell of the grid can either be empty (represented by \'.\') or blocked (represented by \'*\'). You can move from any cell to its vertically or horizontally adjacent cell. You need to determine the number of connected components in the grid. A connected component is a group of non-blocked cells that one can traverse from one to another without crossing any blocked cells. Consider the following constraints: - The number of rows and columns in the grid is at most 1000. - The grid is guaranteed to have at least one empty cell. Write a function that reads the grid from the standard input and output the number of connected components in the grid. Input format: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) denoting the number of rows and columns in the grid. - Each of the next n lines contains a string of length m consisting of characters \'.\' and \'*\'. Output format: - Output a single integer which is the number of connected components in the grid. Example: Input: 4 5 ..*.. .*.*. ..*.. ..... Output: 2","solution":"def count_connected_components(grid, n, m): Returns the number of connected components in the grid. A connected component is a group of non-blocked cells (\'.\') that are connected vertically or horizontally. def dfs(grid, visited, x, y, n, m): # Define movement directions: left, right, up, down directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] stack = [(x, y)] while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True stack.append((nx, ny)) # Initialize visited matrix visited = [[False] * m for _ in range(n)] count = 0 # Traverse the grid to find all connected components for i in range(n): for j in range(m): if not visited[i][j] and grid[i][j] == \'.\': # Start a new DFS for each new component visited[i][j] = True dfs(grid, visited, i, j, n, m) count += 1 return count"},{"question":"Create a function that simulates the roll of a set of N dice, each with M sides. The function should return a list of integers representing the result of each dice roll. Write a function `roll_dice(N, M)` where: - `N` is the number of dice to roll. - `M` is the number of faces on each die. The function should return a list of `N` integers, each between 1 and `M` (inclusive), representing the result of each dice roll. # Example ```python roll_dice(3, 6) ``` Possible output could be: `[4, 2, 5]` (results will vary with each run)","solution":"import random def roll_dice(N, M): Simulates the roll of N dice, each with M sides. Parameters: N (int): Number of dice to roll. M (int): Number of faces on each die. Returns: list: List of integers representing the result of each dice roll. return [random.randint(1, M) for _ in range(N)]"},{"question":"Two cities, A and B, are connected by a network of roads. Each road has a specified travel time. Your task is to determine the shortest time it takes to travel from city A to city B. There may be multiple roads connecting the same pair of intermediate cities, and there may be cycles. You need to account for the possibility that, due to heavy traffic, some roads will be unavailable at various times. You will be given a list of roads that are available on the day you plan to travel. If there is no way to reach city B from city A, return -1. The first line of the input contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 20000), where n is the number of cities and m is the number of roads. The next m lines each contain three integers u, v, and t (1 ≤ u, v ≤ n, 0 ≤ t ≤ 1000), meaning there is a road connecting city u and city v with travel time t. The last line contains two integers a and b (1 ≤ a, b ≤ n), where a is the starting city and b is the destination city. Print a single integer, the shortest travel time from city a to city b. If there is no such path, print -1. Example input: ``` 5 7 1 2 10 1 3 3 2 3 1 2 4 5 3 4 8 3 5 2 4 5 7 1 5 ``` Example output: ``` 5 ```","solution":"import heapq def find_shortest_path(n, m, roads, a, b): Finds the shortest path from city a to city b given n cities, m roads, and their respective travel times. Returns the shortest travel time or -1 if no path exists. # Create an adjacency list graph = [[] for _ in range(n + 1)] for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # Apply Dijkstra\'s algorithm to find the shortest path from a to b def dijkstra(start, end): min_heap = [(0, start)] # (travel_time, city) dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 while min_heap: current_time, u = heapq.heappop(min_heap) if u == end: return current_time for v, travel_time in graph[u]: if current_time + travel_time < dist[v]: dist[v] = current_time + travel_time heapq.heappush(min_heap, (dist[v], v)) return -1 return dijkstra(a, b)"},{"question":"In a faraway kingdom, there is a marvelous machine that can produce magical crystals. The machine works in cycles, and in each cycle, it can produce a certain number of crystals. Each cycle i has an associated value pi, which represents the number of crystals produced in that cycle. The wizard in charge of operating the machine has n different settings that determine the number of cycles the machine will run, and m different magical power levels that determine the number of crystals produced in each cycle. Conveniently, the wizard has already determined the power level for each cycle. The wizard wants to maximize the total number of crystals produced by the machine by carefully selecting which cycles to run. However, the machine can only be run for exactly k cycles before it needs to recharge, and the wizard cannot change the power level of a cycle once it has been set. Given the number of cycles the wizard has the option to run (n), the number of crystals produced in each cycle (an array of m integers where the i-th integer represents the number of crystals produced in cycle i), and the exact number of cycles the wizard can select to run (k), help the wizard determine the maximum number of crystals that can be produced. The first line of the input contains three integers n, m, and k (1 ≤ k ≤ n ≤ 50, 1 ≤ m ≤ 50) — the number of available cycles, the number of crystals produced in each cycle, and the exact number of cycles to run, respectively. The second line contains m space-separated integers p1, p2, ..., pm, where pi (1 ≤ pi ≤ 1000) is the number of crystals produced in the i-th cycle. Print the maximum number of crystals that can be produced by running exactly k cycles. Example: Input: 7 7 3 3 7 9 2 5 8 10 Output: 27 Explanation: The wizard can choose the cycles that produce 9, 8, and 10 crystals, resulting in the maximum possible number of 27 crystals.","solution":"def max_crystals(n, m, k, crystals): Returns the maximum number of crystals possible by selecting exactly k cycles. :param n: int: Number of available cycles :param m: int: Number of crystals produced in each cycle :param k: int: Exact number of cycles to run :param crystals: List[int]: List of integers where the i-th integer represents the number of crystals in i-th cycle :return: int: Maximum number of crystals produced # Sort the crystals list in descending order crystals_sorted = sorted(crystals, reverse=True) # Sum up the largest k elements to get maximum crystals return sum(crystals_sorted[:k])"},{"question":"A factory produces metallic rods with different lengths. The rods need to be cut into smaller segments of designated lengths for further processing. There is a requirement to minimize the waste produced while cutting the rods. Let\'s define a function g(L), where L is a sequence of integers representing the lengths of rods produced. Function g(L) returns the smallest amount of waste produced when cutting each rod into the specified segment lengths. Given the sequence S of segment lengths and the sequence L of rod lengths, compute the total waste produced by cutting each rod in L to yield segments of lengths specified in S. The waste is defined as the sum of the remaining parts of all rods after cutting them completely into the required segment lengths. For example, if S = [2, 3] and L = [7, 8], the result would be as follows: - For rod length 7: - Using segment length 2: 7 % 2 = 1 (remainder) - Using segment length 3: 7 % 3 = 1 (remainder) - The minimum waste for rod 7 is min(1, 1) = 1 - For rod length 8: - Using segment length 2: 8 % 2 = 0 (remainder) - Using segment length 3: 8 % 3 = 2 (remainder) - The minimum waste for rod 8 is min(0, 2) = 0 The total waste is the sum of minimum remainders for each rod, which is 1 + 0 = 1. Input: - The first line contains an integer n (1 ≤ n ≤ 10^4) denoting the number of segment lengths. - The second line contains n space-separated integers S[i] (1 ≤ S[i] ≤ 10^6) denoting the segment lengths. - The third line contains an integer m (1 ≤ m ≤ 10^4) denoting the number of rod lengths. - The fourth line contains m space-separated integers L[j] (1 ≤ L[j] ≤ 10^9) denoting the rod lengths. Output: - A single integer, the total waste produced. Example: Input: 2 2 3 2 7 8 Output: 1","solution":"def compute_total_waste(S, L): Compute the total waste produced by cutting each rod in L to yield segments of lengths specified in S. Parameters: S (list of int): Segment lengths. L (list of int): Rod lengths. Returns: int: Total waste produced. total_waste = 0 for length in L: min_waste = min(length % segment for segment in S) total_waste += min_waste return total_waste"},{"question":"A communications company is deploying new fiber optic cables on a grid-like map of the city. The city map is represented as a 2D grid of integers where each cell represents the cost to install fiber optic cable on that particular grid cell. The company wants to minimize the total installation cost and is looking to lay the cables from the top-left corner of the grid to the bottom-right corner. You are tasked with finding the minimum installation cost path from the top-left corner to the bottom-right corner of the grid. You can only move right or down at any point in time. Given a 2D grid of integers, your task is to write a function that returns the minimum cost required to get from the top-left corner (0,0) to the bottom-right corner (n-1,m-1) of the grid. Function Signature: ```python def min_installation_cost(grid: List[List[int]]) -> int: pass ``` **Input:** - `grid`: A 2D list of integers where `grid[i][j]` represents the cost of the cell. The dimensions of the grid are `n x m` where `1 ≤ n, m ≤ 100`. **Output:** - Return an integer representing the minimum cost required to travel from the top-left to the bottom-right corner of the grid. **Example:** Input: ``` grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Output: ``` 7 ``` **Explanation:** The path with the minimum cost is `1 → 3 → 1 → 1 → 1` with total cost of `7`.","solution":"from typing import List def min_installation_cost(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the rest of dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Implement a program to simulate the functioning of an Automated Teller Machine (ATM). An ATM can perform several transactions on bank accounts. Each account has a unique account number and a balance. The ATM can process the following types of transactions: 1. **Deposit**: Add a specified amount of money to the account balance. 2. **Withdraw**: Subtract a specified amount of money from the account balance if there are sufficient funds; otherwise, the transaction should be declined. 3. **Transfer**: Transfer a specified amount of money from one account to another if the source account has sufficient funds; otherwise, the transaction should be declined. 4. **Check Balance**: Return the current account balance. You are given an integer `n` (1 ≤ n ≤ 100,000) denoting the number of transactions, followed by `n` lines describing the transactions. Each transaction is described as follows: - For deposits: `\\"DEPOSIT account_number amount\\"`. - For withdrawals: `\\"WITHDRAW account_number amount\\"`. - For transfers: `\\"TRANSFER source_account_number destination_account_number amount\\"`. - For balance checks: `\\"BALANCE account_number\\"`. Implement the ATM functionality by processing a list of transactions. Initially, all accounts start with a balance of 0. # Input - The first line contains the integer `n`. - Each of the next `n` lines contains a transaction in the format described above. # Output For each `\\"BALANCE\\"` transaction, output the balance of the specified account in a new line. The balance should be printed as an integer. # Example Input ``` 6 DEPOSIT 12345 1000 DEPOSIT 67890 2000 TRANSFER 12345 67890 500 WITHDRAW 67890 1500 WITHDRAW 12345 600 BALANCE 67890 ``` Output ``` 1000 ``` **Note**: Assume that all account numbers and transaction amounts are valid non-negative integers, and each account number is unique within a single transaction phrase. Write a function to simulate the ATM based on the given transactions and produce the required outputs for balance checks.","solution":"def atm_simulation(n, transactions): accounts = {} def process_transaction(transaction): parts = transaction.split() action = parts[0] if action == \\"DEPOSIT\\": account_number = parts[1] amount = int(parts[2]) if account_number not in accounts: accounts[account_number] = 0 accounts[account_number] += amount elif action == \\"WITHDRAW\\": account_number = parts[1] amount = int(parts[2]) if account_number in accounts and accounts[account_number] >= amount: accounts[account_number] -= amount elif action == \\"TRANSFER\\": from_account = parts[1] to_account = parts[2] amount = int(parts[3]) if from_account in accounts and accounts[from_account] >= amount: if to_account not in accounts: accounts[to_account] = 0 accounts[from_account] -= amount accounts[to_account] += amount elif action == \\"BALANCE\\": account_number = parts[1] return accounts.get(account_number, 0) results = [] for transaction in transactions: result = process_transaction(transaction) if result is not None: results.append(result) return results"},{"question":"A city has m skyscrapers, and there are n bridges connecting them. Each bridge can be described as a pair of integers (x, y) indicating that there is a bridge between skyscraper x and skyscraper y. The city\'s builders want to know the maximum number of skyscrapers that are connected directly or indirectly through the bridges. A component of skyscrapers is a group of skyscrapers such that there is a path between any two skyscrapers in the group. The task is to find the size of the largest such group. The input format is: - The first line contains two integers m and n (1 ≤ m, n ≤ 10^5), the number of skyscrapers and bridges, respectively. - The next n lines each contain two integers x and y (1 ≤ x, y ≤ m), indicating a bridge between skyscraper x and skyscraper y. The output should be a single integer, which is the size of the largest component. Sample Input: ``` 6 5 1 2 2 3 4 5 5 6 1 3 ``` Sample Output: ``` 3 ``` Explanation: In this example, there are two groups of connected skyscrapers: {1, 2, 3} and {4, 5, 6}. The size of the largest group is 3.","solution":"from collections import defaultdict, deque def largest_connected_component(m, n, bridges): def bfs(component_start): queue = deque([component_start]) visited.add(component_start) size = 0 while queue: node = queue.popleft() size += 1 for neighbor in adj_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return size adj_list = defaultdict(list) for x, y in bridges: adj_list[x].append(y) adj_list[y].append(x) visited = set() max_component_size = 0 for skyscraper in range(1, m + 1): if skyscraper not in visited: current_component_size = bfs(skyscraper) max_component_size = max(max_component_size, current_component_size) return max_component_size # Function to process the input def find_largest_connected_component(m, n, pairs): return largest_connected_component(m, n, pairs)"},{"question":"Marco enjoys playing a video game where he can gather and arrange different types of magical stones. He has a collection of n stones, each with a certain power level. This time, Marco is trying to sort his stones based on their power levels, but with a twist. He wants to be able to perform two types of operations to manipulate his collection: Operation 1: 1 l r x Marco can specify a range [l, r], and increase the power level of each stone in this range by x. Operation 2: 2 l r k Marco needs to find the k-th smallest stone\'s power level in the specified range [l, r]. You need to help Marco by writing a program that can handle these operations efficiently. Input Specification: - The first line contains two integers n and m (1 ≤ n, m ≤ 100,000), representing the number of stones and the number of operations, respectively. - The second line contains n integers, where the i-th integer is the power level of the i-th stone (1 ≤ power level ≤ 100,000). - The next m lines contain the operations in the format described above. Output Specification: - For each operation of the second type, print the k-th smallest power level in the specified range. Example: Input: ``` 5 3 10 20 30 40 50 1 2 4 5 2 1 5 3 2 2 4 2 ``` Output: ``` 35 45 ``` Explanation: - Initially, stones have power levels: [10, 20, 30, 40, 50] - After the first operation, the power levels become: [10, 25, 35, 45, 50] - The second operation queries the 3rd smallest stone\'s power level in range [1, 5] which is 35. - The third operation queries the 2nd smallest stone\'s power level in range [2, 4] which is 45.","solution":"class StoneGame: def __init__(self, stone_power_levels): self.stone_power_levels = stone_power_levels def operation_1(self, l, r, x): for i in range(l - 1, r): self.stone_power_levels[i] += x def operation_2(self, l, r, k): return sorted(self.stone_power_levels[l - 1:r])[k - 1] def process_operations(n, m, powers, operations): game = StoneGame(powers) results = [] for operation in operations: if operation[0] == 1: _, l, r, x = operation game.operation_1(l, r, x) elif operation[0] == 2: _, l, r, k = operation result = game.operation_2(l, r, k) results.append(result) return results def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) powers = list(map(int, data[2:2 + n])) operations = [] start = 2 + n for i in range(m): operation = list(map(int, data[start + 4 * i:start + 4 * (i + 1)])) operations.append(operation) return (n, m, powers, operations) def main(): n, m, powers, operations = read_input() results = process_operations(n, m, powers, operations) for result in results: print(result)"},{"question":"Write a function that takes a list of strings and a word as inputs and returns the index of the first occurrence of that word in the list, if it exists. If the word is not in the list, return -1. You must not use Python\'s built-in list.index method. Input: - A list of strings `words_list` (1 ≤ |words_list| ≤ 1000) - A string `word` (1 ≤ |word| ≤ 100) Output: - An integer representing the index of the first occurrence of the word in the list, or -1 if the word is not found. Examples: ``` Input: words_list = [\\"hello\\", \\"world\\", \\"foo\\", \\"bar\\"], word = \\"foo\\" Output: 2 Input: words_list = [\\"apple\\", \\"banana\\", \\"cherry\\"], word = \\"grape\\" Output: -1 Input: words_list = [\\"one\\", \\"two\\", \\"three\\", \\"two\\"], word = \\"two\\" Output: 1 ``` Note: - The function should iterate through the list and compare each string with the input word. - Ensure that the function efficiently handles the case where the list is large. - Consider edge cases such as an empty list or the word being at the first or last position in the list.","solution":"def find_first_occurrence(words_list, word): Returns the index of the first occurrence of the word in words_list, or -1 if it does not exist. :param words_list: List of strings :param word: A string to find in words_list :return: The index of the first occurrence or -1 if not found for index, current_word in enumerate(words_list): if current_word == word: return index return -1"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n, and a set of q queries. Each query asks you to find the minimum element in a given subarray [l_i, r_i] (where 1 le l_i le r_i le n). The first line contains two integers n and q (1 le n, q le 10^5) — the size of the array and the number of queries. The second line contains n integers a_i (1 le a_i le 10^9) — the values of the numbers in the array. Each of the next q lines contains two integers l_i and r_i (1 le l_i le r_i le n) — the endpoints of the subarray for each query. For each query, print a single integer — the minimum element in the subarray [l_i, r_i]. Input example: ``` 5 3 1 3 2 6 4 1 3 2 4 1 5 ``` Output example: ``` 1 2 1 ``` In the input example, the minimum element in the subarray from the 1st to the 3rd element is 1, from the 2nd to the 4th element is 2, and from the 1st to the 5th element is 1.","solution":"def find_minimum_in_subarrays(n, q, array, queries): Returns the minimum values in the specified subarrays of the given array. :param n: int, size of array :param q: int, number of queries :param array: list of int, the array elements :param queries: list of tuple of int, each tuple contains (l, r) for the subarray endpoints :returns: list of int, minimum values for each query results = [] for l, r in queries: results.append(min(array[l-1:r])) return results"},{"question":"You are given two arrays of integers `a` and `b` of the same length `n`. You should determine if you can make the arrays identical by performing the following allowed operations any number of times: 1. Select any index `i` in array `a` and multiply `a[i]` by any prime number. 2. Select any index `i` in array `b` and multiply `b[i]` by any prime number. Input: The first line contains an integer `n` (1 ≤ `n` ≤ 200,000). The second line contains `n` space-separated integers `a[i]` (1 ≤ `a[i]` ≤ 10^9). The third line contains `n` space-separated integers `b[i]` (1 ≤ `b[i]` ≤ 10^9). Output: Print \\"YES\\" (without quotes) if you can make the two arrays identical by performing the allowed operations any number of times. Otherwise, print \\"NO\\" (without quotes). Example: Input: 4 6 4 3 9 18 4 27 3 Output: YES Explanation: In this example, one way to make arrays identical is: - Multiply `a[0] (= 6)` by `3` to get `a[0] = 18`. - Multiply `b[2] (= 27)` by `1` which is implied as no operation. Both arrays `a` and `b` become [18, 4, 27, 3]. Thus, the output is \\"YES\\".","solution":"def prime_factors(number): Returns the set of prime factors of a given number. i = 2 factors = set() while i * i <= number: while (number % i) == 0: factors.add(i) number //= i i += 1 if number > 1: factors.add(number) return factors def can_make_identical(a, b): Determines if two arrays `a` and `b` can be made identical by multiplying elements by any prime number any number of times. n = len(a) for i in range(n): if prime_factors(a[i]) != prime_factors(b[i]): return \\"NO\\" return \\"YES\\""},{"question":"Given a string s of length n (1 le n le 100), where each character in the string is either \'A\' or \'B\', determine if there is any \'A\' that is followed immediately by \'B\'. If such a pair exists, output \\"FOUND\\", otherwise output \\"NOT FOUND\\".","solution":"def check_ab_pair(s): Determines if there is any \'A\' that is followed immediately by \'B\' in the string s. Returns \\"FOUND\\" if such a pair exists, otherwise returns \\"NOT FOUND\\". for i in range(len(s) - 1): if s[i] == \'A\' and s[i+1] == \'B\': return \\"FOUND\\" return \\"NOT FOUND\\""},{"question":"A hotel management system needs to manage room bookings efficiently. The hotel has different types of rooms identified by unique room IDs. Each room has a specific capacity, and guests can only book as many rooms as needed to fit their group size. Your task is to implement a function that processes a list of room bookings and determines if each booking request can be accommodated. Each booking request contains the number of guests and a list of room IDs they want to book. The function should return a list of booleans indicating whether each booking can be accommodated without exceeding the capacity of the specified rooms. If any booking can\'t be accommodated, the function should return `False` for that booking. Function signature: `def can_accommodate(bookings: List[Dict], rooms: Dict[int, int]) -> List[bool]:` # Input - `bookings`: A list of dictionaries representing the booking requests. Each dictionary contains: - `guests` (int): the number of guests in the booking. - `room_ids` (List[int]): a list of room IDs to be booked. - `rooms`: A dictionary where keys are room IDs (int) and values are their respective capacities (int). # Output - A list of booleans where each boolean corresponds to a booking request, indicating whether it can be accommodated (`True`) or not (`False`). # Example ```python bookings = [ {\\"guests\\": 4, \\"room_ids\\": [101, 102, 103]}, {\\"guests\\": 3, \\"room_ids\\": [104]} ] rooms = { 101: 2, 102: 1, 103: 1, 104: 2 } print(can_accommodate(bookings, rooms)) # Output: [True, False] ``` In the example: - The first booking request for 4 guests can be accommodated by rooms 101, 102, and 103 which have capacities of 2, 1, and 1 respectively. - The second booking request for 3 guests cannot be accommodated by room 104 which only has a capacity of 2.","solution":"def can_accommodate(bookings, rooms): Determines if each booking request can be accommodated. Parameters: bookings (List[Dict]): List of booking requests. rooms (Dict[int, int]): Dictionary of room capacities. Returns: List[bool]: List indicating whether each booking can be accommodated. results = [] for booking in bookings: guests_needed = booking.get(\\"guests\\", 0) room_ids = booking.get(\\"room_ids\\", []) total_capacity = sum(rooms.get(room_id, 0) for room_id in room_ids) if total_capacity >= guests_needed: results.append(True) else: results.append(False) return results"},{"question":"This is a problem where you need to figure out the hidden matrix. The judge holds a hidden square matrix of size n x n (1 ≤ n ≤ 1000), filled with integers between 1 and 10^9. You want to construct a matrix isomorphic to the judge\'s matrix by asking questions about the sums of certain sub-matrices. You can ask two types of questions: 1. Row sum: For a given row index i (1 ≤ i ≤ n), you can ask for the sum of the elements in row i. 2. Column sum: For a given column index j (1 ≤ j ≤ n), you can ask for the sum of the elements in column j. You may ask at most 10 * n questions in total. The judge will provide the relevant sum in response to each query. The first line of the input will contain a single integer n — the size of the matrix. To ask a question about row sums, print the string \\"row i\\", where i is the index of the row (1-based). To ask a question about column sums, print the string \\"col j\\", where j is the index of the column (1-based). To print the final answer, print the string \\"-1\\" by itself on a single line. On the next line, print n lines, each containing n integers, representing your reconstructed matrix. Your answer will be judged correct if your reconstructed matrix is isomorphic (structurally identical with permutation) to the hidden judge\'s matrix. Specifically, there should be a sequence of row and column permutations that can convert the judge\'s matrix into your reconstructed matrix. Output proportions and syntax should be carefully observed. After printing the final answer, ensure to flush the output properly as the problem involves interaction. To flush the output after printing an integer and end-of-line, consult your respective programming language\'s documentation. If you receive a response of -1 as an answer to one of your queries, terminate the program immediately. Examples: Input: ``` 4 ``` Queries: ``` col 1 row 1 col 3 ``` Assume the responses are: ``` 20 35 45 ``` This implies: - The sum of all elements in the first column is 20. - The sum of all elements in the first row is 35. - The sum of all elements in the third column is 45. Your task is to use these responses to infer the structure of the matrix and output an isomorphic version.","solution":"def reconstruct_matrix(n, row_queries, col_queries): Reconstructs a matrix based on given row and column sum queries. Args: - n (int): The size of the matrix (n x n). - row_queries (list): Sum queries for each row. - col_queries (list): Sum queries for each column. Returns: - matrix (list of lists): The reconstructed matrix. matrix = [[0] * n for _ in range(n)] # Distribute the sums evenly for simplicity (given the constraint) row_sum = row_queries[0] // n col_sum = col_queries[0] // n # Fill the matrix with reasonable values considering uniform distribution for i in range(n): for j in range(n): if row_sum == col_sum: matrix[i][j] = row_sum else: # Create compatible row and column values matrix[i][j] = row_sum if i == 0 else col_sum return matrix"},{"question":"A library wants to organize its collection of books such that the books are sorted by genre first and then by the publication year within each genre. Write a program that takes a list of tuples where each tuple contains the genre (as a string) and the publication year (as an integer) of a book. The program should sort the books based on the criteria mentioned and return the sorted list. If multiple books have the same genre and publication year, they should retain their original order. Example input: [(\\"Fiction\\", 1995), (\\"Non-Fiction\\", 2002), (\\"Fiction\\", 1987), (\\"Non-Fiction\\", 1998), (\\"Fiction\\", 1991), (\\"Non-Fiction\\", 1995)] Example output: [(\\"Fiction\\", 1987), (\\"Fiction\\", 1991), (\\"Fiction\\", 1995), (\\"Non-Fiction\\", 1995), (\\"Non-Fiction\\", 1998), (\\"Non-Fiction\\", 2002)]","solution":"def sort_books(books): Sorts a list of books by genre first and then by publication year within each genre. Parameters: books (list of tuples): A list where each tuple contains the genre (str) and the publication year (int) of a book. Returns: list of tuples: The sorted list of books. return sorted(books, key=lambda x: (x[0], x[1]))"},{"question":"Bob loves to play with strings in his free time. One day, he came up with an interesting problem for his friend Alice to solve. He gave her two strings, s1 and s2, each consisting of lowercase English letters, and asked her to transform s1 into s2 using the minimum number of the following operations: 1. Insert a single character into s1. 2. Delete a single character from s1. 3. Replace a single character in s1 with another character. Help Alice write a program to determine the minimum number of operations required to transform s1 into s2. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines: - The first line of each test case contains s1 (1 ≤ |s1| ≤ 100). - The second line of each test case contains s2 (1 ≤ |s2| ≤ 100). Print t lines, each line containing a single integer, the minimum number of operations required for each test case. **Example:** ``` Input 3 kitten sitting flaw lawn intention execution Output 3 2 5 ``` **Explanation:** For the first test case, \\"kitten\\" → \\"sitten\\" (replace \'k\' with \'s\') → \\"sittin\\" (replace \'e\' with \'i\') → \\"sitting\\" (insert \'g\'). Hence, 3 operations are required.","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform string s1 into string s2. The operations available are: 1. Insert a single character into s1. 2. Delete a single character from s1. 3. Replace a single character in s1 with another character. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n] def transform_strings(t, test_cases): results = [] for case in test_cases: s1, s2 = case results.append(min_operations(s1, s2)) return results"},{"question":"An e-commerce website wants to implement a feature that suggests related products based on the user\'s current product view. The product catalog is represented as an undirected graph where each node is a product, and edges represent a relatedness between products. Your task is to find the shortest path between two given products in the catalog, to recommend the most closely related products. Given the product catalog as a graph, write a function `find_shortest_path(graph: List[Tuple[int, int]], start: int, end: int) -> List[int]` that returns the shortest path from the product `start` to the product `end`. If there are multiple shortest paths, return any one of them. If there is no path, return an empty list. # Input - `graph`: A list of tuples representing the edges in the graph, where each tuple `(u, v)` means there is an edge between product `u` and product `v`. - `start`: An integer representing the starting product. - `end`: An integer representing the destination product. # Output - A list of integers representing the products in the order of the shortest path from `start` to `end`. If there is no path, return an empty list. # Constraints - You may assume that the product IDs are non-negative integers. - The number of nodes (products) can be up to 1000. - The number of edges (relationships between products) can be up to 5000. - There are no self-loops and no multiple edges between the same pair of nodes. # Example ```python graph = [(0, 1), (0, 2), (1, 2), (1, 3), (2, 3)] start = 0 end = 3 print(find_shortest_path(graph, start, end)) # Output: [0, 1, 3] or [0, 2, 3] - both are valid shortest paths graph = [(0, 1), (1, 2), (2, 3)] start = 0 end = 3 print(find_shortest_path(graph, start, end)) # Output: [0, 1, 2, 3] - only one shortest path in this case graph = [(0, 1), (2, 3)] start = 0 end = 3 print(find_shortest_path(graph, start, end)) # Output: [] - no path exists ``` # Note - Use a breadth-first search (BFS) approach for finding the shortest path in an unweighted graph. This ensures that you find the shortest path in terms of the number of edges traversed.","solution":"from collections import deque, defaultdict def find_shortest_path(graph, start, end): Returns the shortest path from start to end in the given graph. If no path exists, returns an empty list. if start == end: return [start] # Convert edge list to adjacency list adj_list = defaultdict(list) for u, v in graph: adj_list[u].append(v) adj_list[v].append(u) # BFS to find the shortest path queue = deque([(start, [start])]) visited = set() visited.add(start) while queue: current_node, path = queue.popleft() for neighbor in adj_list[current_node]: if neighbor == end: return path + [neighbor] if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, path + [neighbor])) return [] # Example usage: # graph = [(0, 1), (0, 2), (1, 2), (1, 3), (2, 3)] # start = 0 # end = 3 # print(find_shortest_path(graph, start, end)) # Output: [0, 1, 3] or [0, 2, 3]"},{"question":"A software company manages various servers, and each server has a unique identifier and a certain processing capacity. The company\'s network can be represented as an undirected graph where nodes represent servers and edges represent high-speed connections between pairs of servers. Every day, the company performs two types of operations on the network: 1. **Add Capacity:** Increase the capacity of a specific server by a certain amount. (Note that increasing the capacity of a server does not affect the capacities of connected servers, unlike the propagation property in the previous question.) 2. **Query Capacity:** Retrieve the capacity of a specific server. The network consists of n servers and m connections. The company needs to handle q queries efficiently. You are given n, m, q, and the capacities of the servers as input. Then, you are given the m connections, followed by the q queries. - The first line contains three integers n, m, and q (1 ≤ n, m, q ≤ 100000) representing the number of servers, the number of connections, and the number of queries respectively. - The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1000), where ci represents the initial capacity of the ith server. - Each of the next m lines contains two integers vi and ui (1 ≤ vi, ui ≤ n), indicating that there is an edge between servers vi and ui. - Each of the next q lines contains one of the following two types of queries: - `1 x val`: Increase the capacity of server x by val (1 ≤ x ≤ n, 1 ≤ val ≤ 1000). - `2 x`: Retrieve the capacity of server x (1 ≤ x ≤ n). For each query of type 2, output the capacity of the server x on a separate line. **Input Example:** ``` 5 4 5 3 6 2 7 1 1 2 2 3 3 4 4 5 1 3 5 2 3 1 4 2 2 4 2 1 ``` **Output Example:** ``` 7 9 5 ``` Note: In this example, `1 3 5` means server 3\'s capacity is increased by 5, making it 7 initially from 2. The query `2 3` then outputs 7. Similarly, `1 4 2` increases server 4\'s capacity by 2, making it 9, and subsequent queries retrieve the current capacities of specified servers.","solution":"def manage_server_capacities(n, m, q, capacities, connections, queries): # Initializing the server capacities from the given list server_capacities = capacities[:] # Processing each query results = [] for query in queries: if query[0] == 1: # Add capacity operation _, x, val = query server_capacities[x - 1] += val elif query[0] == 2: # Query capacity operation _, x = query results.append(server_capacities[x - 1]) return results"},{"question":"You are given a sequence of integers and you need to determine the number of inversions in the sequence. An inversion is a pair of indices (i, j) such that i < j and ai > aj. This is a common task in computer science and is often used to measure how far a given sequence is from being sorted. # Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the sequence. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the sequence. # Output: - Print a single integer, the number of inversions in the sequence. # Example: Input: 5 2 3 8 6 1 Output: 5 # Explanation: The 5 inversions are: - (2, 1) - (3, 1) - (8, 6) - (8, 1) - (6, 1) Your task is to write a program that efficiently computes the number of inversions in the given sequence.","solution":"def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all the remaining elements in the left # subarray (arr[i]...arr[mid]) are all greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def count_inversions(arr): temp_arr = [0]*len(arr) return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"},{"question":"In a magical land, there exist enchanted trees that grant special abilities. Each enchanted tree can only transfer its power to one of its children, chosen based on a particular ranking system. You are given a forest with multiple enchanted trees. Your task is to determine the best destination for each tree\'s power transfer. Each tree follows a hierarchical structure with a single root and several levels of children. Each node (representing parts of the enchanted tree) has a certain power value associated with it. The power can be transferred from a parent node to exactly one of its children based on the following rule: - The child with the highest initial power value is chosen as the recipient of power from its parent. Given the power values and the structure of the forest, for each tree, you need to compute the destination node (the node which receives the power from the root of the tree). # Input: - The first line contains an integer `t` (1 ≤ t ≤ 100), representing the number of enchanted trees. - For each tree, the first line contains an integer `n` (1 ≤ n ≤ 1000), representing the number of nodes in the tree. - The next line contains `n` integers, where the i-th integer represents the power value of the i-th node (1 ≤ power values ≤ 10^5). - Each of the next `n−1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n), representing an edge between nodes `u` and `v`. Node 1 is always the root node. # Output: For each enchanted tree, output a single integer representing the node that receives power from the root. # Example: Input: ``` 2 5 1 10 3 6 8 1 2 1 3 2 4 2 5 4 9 3 5 2 1 2 2 3 2 4 ``` Output: ``` 2 2 ``` # Explanation: - In the first tree, node 2 has the highest power value (10) among the direct children of the root node 1, so it receives the power. - In the second tree, node 2 has the highest power value (3) among the direct children of the root node 1, so it receives the power.","solution":"def find_power_destination(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] power_values = test_cases[i][1] edges = test_cases[i][2] from collections import defaultdict tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Finding the children of the root node (node 1) root = 1 direct_children = tree[root] if not direct_children: results.append(None) continue # Find the child node with the highest power best_child = direct_children[0] max_power = power_values[best_child - 1] for child in direct_children[1:]: if power_values[child - 1] > max_power: best_child = child max_power = power_values[child - 1] results.append(best_child) return results # Function to parse input format def parse_input(input_str): lines = input_str.strip().split(\'n\') idx = 0 t = int(lines[idx]) idx += 1 test_cases = [] for _ in range(t): n = int(lines[idx]) idx += 1 power_values = list(map(int, lines[idx].split())) idx += 1 edges = [] for _ in range(n - 1): u, v = map(int, lines[idx].split()) edges.append((u, v)) idx += 1 test_cases.append((n, power_values, edges)) return t, test_cases # Function to format output def format_output(output_list): return \\"n\\".join(map(str, output_list)) # The main function to solve the problem def solve_enchanted_trees(input_str): t, test_cases = parse_input(input_str) result = find_power_destination(t, test_cases) return format_output(result)"},{"question":"You are given a list of integers representing the heights of people standing in a line. Each person stands such that no person in front of them is taller. You are asked to process multiple queries on this list to find out the maximum possible height a person can have if they were to be inserted at a specific position without violating the height condition. For each query, you will be given the index position where a new person is to be inserted and the initial heights of the people already standing in the line. You need to determine the maximum possible height the new person can have without breaking the rule that no person in front of them can be taller. Input: - The first line contains an integer n, the number of people initially standing in the line (1 le n le 10^5), and q, the number of queries (1 le q le 10^5). - The second line contains n integers representing the heights of the people standing in the line (1 le height[i] le 10^9 for each 0 le i < n). - The next q lines contain one query each, where each query consists of a single integer, p (0 le p le n), the index position where a new person is to be inserted. Output: - For each query, output on a separate line the maximum possible height the new person can have without violating the height condition. Example: Input: ``` 5 3 1 2 3 4 5 0 3 5 ``` Output: ``` 1 4 5 ``` Explanation: - For the first query, if the new person is inserted at the beginning of the line, their maximum height must be 1 (to match the current first person). - For the second query, inserting after the third position means the maximum possible height is the fourth person\'s height which is 4. - For the third query, inserting at the end means the maximum height is 5 (to match the current last person).","solution":"def max_possible_height(n, q, heights, queries): For each query, determine the maximum possible height of the person to be inserted at the given position without violating the \'no person in front can be taller\' rule. Parameters: n (int): Number of people initially standing in the line. q (int): Number of queries. heights (list of int): Heights of the people initially standing in the line. queries (list of int): Positions where a new person is to be inserted. Returns: list of int: The maximum possible height for each query position. results = [] for p in queries: if p == 0: # Inserting at the start, can be at most the height of the first person results.append(heights[0]) elif p == n: # Inserting at the end, can be at most the height of the last person results.append(heights[-1]) else: # Inserting in between, can be at most the height of the person in the same position results.append(heights[p]) return results"},{"question":"# Evaluating Traffic Light Duration You are assigned to help manage the traffic flow in a busy city intersection. The city uses a smart traffic light system, which records the number of cars waiting and adjusts the duration of the green light for each lane accordingly. Each lane is represented by a queue in which cars arrive at a constant rate. Your task is to calculate the duration of the green light needed for each lane so that all waiting cars can pass through. The city authorities want you to ensure that no cars are left waiting once a lane gets a green light. You are given `N` lanes. For each lane `i`, you know the number of cars waiting `Wi` and the rate at which cars can pass through the intersection during the green light `Ri` cars per second. Calculate the minimum duration of the green light for each lane in seconds so that all cars waiting in that lane can pass through the intersection. # Input - The first line contains a single integer `N` (1 ≤ `N` ≤ 105) — the number of lanes. - The second line contains `N` integers `W1, W2, ..., WN` (0 ≤ Wi ≤ 109), where `Wi` is the number of cars waiting in the i-th lane. - The third line contains `N` integers `R1, R2, ..., RN` (1 ≤ Ri ≤ 109), where `Ri` is the rate at which cars can pass through the intersection for the i-th lane. # Output - Output a single line with `N` integers, representing the minimum duration of the green light needed for each lane in seconds. # Example **Input:** ``` 3 10 20 30 2 5 10 ``` **Output:** ``` 5 4 3 ``` **Explanation:** - For the first lane: 10 cars are waiting, and the rate is 2 cars per second. Thus, it takes 10 / 2 = 5 seconds for all cars to pass. - For the second lane: 20 cars are waiting, and the rate is 5 cars per second. Thus, it takes 20 / 5 = 4 seconds for all cars to pass. - For the third lane: 30 cars are waiting, and the rate is 10 cars per second. Thus, it takes 30 / 10 = 3 seconds for all cars to pass.","solution":"def traffic_light_duration(N, W, R): Calculate the duration of the green light needed for each lane. Parameters: N (int): The number of lanes W (list of int): The number of cars waiting in each lane R (list of int): The rate at which cars can pass through the intersection for each lane Returns: list of int: The minimum duration of the green light needed for each lane in seconds return [(W[i] + R[i] - 1) // R[i] for i in range(N)]"},{"question":"A robotics company is developing a system to manage their warehouse inventory. They need a program to identify the optimum way to stack boxes within given constraints. Each box has a weight and a maximum stack weight limit. A box can be placed on top of another box only if the total weight of all boxes in the stack does not exceed the stack weight limit of the bottom box. Your task is to write a program that determines the maximum number of stacks that can be formed while adhering to the constraints given each box\'s weight and stack limit. Input format: - The first line contains a single integer n (1 ≤ n ≤ 1000), the number of boxes. - Each of the next n lines contains two integers wi and li (1 ≤ wi, li ≤ 10^6), representing the weight and stack weight limit of the i-th box. Output format: - Print a single integer, the maximum number of stacks that can be formed. Example: Input: 4 5 10 3 6 4 8 2 5 Output: 3 Explanation: One possible stacking strategy is: - Stack 1: Box 1 (weight 5, limit 10), Box 4 (weight 2, limit 5) - Stack 2: Box 2 (weight 3, limit 6) - Stack 3: Box 3 (weight 4, limit 8) Note: The program should find the optimal solution such that the maximum number of stacks is formed. Each box can only be part of one stack.","solution":"def max_stacks(n, boxes): boxes.sort(key=lambda x: x[1]) # Sort boxes based on their stack weight limit stacks = [] for weight, limit in boxes: placed = False for stack in stacks: if sum(w for w, _ in stack) + weight <= stack[-1][1]: stack.append((weight, limit)) placed = True break if not placed: stacks.append([(weight, limit)]) return len(stacks) # Example usage: n = 4 boxes = [(5, 10), (3, 6), (4, 8), (2, 5)] print(max_stacks(n, boxes)) # Output: 3"},{"question":"You are managing a library system for a university. The library has several shelves, and each shelf can contain multiple books. To simplify managing the inventory, you decide to distribute the books such that each shelf contains an equal number of books. If there are books left over after evenly distributing them, you would place them on an extra shelf. Write a program that determines the minimum number of shelves required to store all the books, given the total number of books and the capacity of each shelf. The first line of the input contains an integer t (1 le t le 50) — the number of queries. Each of the next t lines contains two integers b (1 le b le 10^7) and s (1 le s le 10^6), representing the total number of books and the capacity of a single shelf, respectively. For each query, print the minimum number of shelves needed to store all the books. **Example Input:** ``` 3 10 3 25 5 7 7 ``` **Example Output:** ``` 4 5 1 ``` **Explanation:** 1. For the first query, you need 4 shelves because 10 books with 3 books per shelf results in 3 full shelves (9 books), and 1 extra shelf with 1 book. 2. For the second query, 25 books with 5 books per shelf results in exactly 5 shelves. 3. For the third query, 7 books with 7 books per shelf results in exactly 1 shelf.","solution":"def minimum_shelves(t, queries): results = [] for b, s in queries: shelves = b // s if b % s != 0: shelves += 1 results.append(shelves) return results"},{"question":"In a particular town, there is an efficient transportation system that uses autonomous cars. Each car can only move in two directions: north or east. The town\'s layout forms a grid consisting of m rows and n columns. Each cell in the grid represents a location the car can pass through. You need to find out the total number of unique paths a car can take to get from the top-left corner (cell (1,1)) to the bottom-right corner (cell (m,n)). Write a function to calculate the number of unique paths, given the dimensions of the grid. The function will receive two parameters: 1. An integer m (1 ≤ m ≤ 100), representing the number of rows. 2. An integer n (1 ≤ n ≤ 100), representing the number of columns. Return the total number of unique paths the car can take to reach the bottom-right corner from the top-left corner. **Example:** Input: ``` 3 7 ``` Output: ``` 28 ``` In this example, there are 28 unique paths from the top-left corner to the bottom-right corner in a 3x7 grid.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of a m x n grid. # Create a 2D array with m rows and n columns initialized to 1 dp = [[1] * n for _ in range(m)] # Fill the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[m - 1][n - 1]"},{"question":"You are given an integer array a of length n. Determine the maximum number of distinct integers you can achieve by removing exactly one element from the array. For example, if you start with the array [1, 2, 2, 3], removing one of the elements \'2\' will leave you with [1, 2, 3], a total of 3 distinct elements. The first line of input contains a single integer n (1 le n le 10^5) — the length of the array. The second line of input contains n integers, the array elements a_i (1 le a_i le 10^5), all separated by a space. Print the maximum number of distinct integers you can obtain by removing exactly one element from the array. In the first example, if the array is [1, 2, 2, 3], removing one of the \'2\'s will result in [1, 2, 3], achieving 3 distinct integers. In the second example, if the array is [4, 4, 4, 4], removing any one of the \'4\'s will still result in [4, 4, 4], achieving only 1 distinct integer.","solution":"def max_distinct_after_removal(n, a): Determine the maximum number of distinct integers you can achieve by removing exactly one element from the array. Parameters: n (int): Length of the array a (list): List of integers Returns: int: Maximum number of distinct integers after removal of one element unique_elements = set(a) if len(unique_elements) == n: return n - 1 else: return len(unique_elements)"},{"question":"You are given a set of N gemstones, each with a unique weight. Your goal is to split these gemstones into two groups such that the absolute difference between the sum of the weights of the gemstones in the two groups is minimized. You cannot exclude any gemstone from this partitioning. Write a function `minimizeDifference(weights: List[int]) -> int` that takes in a list of weights of the gemstones and returns an integer representing the smallest possible difference between the sums of the weights of the two groups. # Input: - A list of integers `weights` representing the weights of the N gemstones where (1 ≤ N ≤ 30 and 1 ≤ weights[i] ≤ 1000). # Output: - An integer representing the smallest possible difference between the sums of the two groups. # Example: ```python minimizeDifference([2, 4, 5, 6]) # Output: 1 minimizeDifference([1, 2, 3, 9]) # Output: 3 minimizeDifference([20]) # Output: 20 ``` # Explanation: In the first example, you can split the gemstones into two groups: {2, 6} and {4, 5}, so the difference between the sums is |8 - 9| = 1. In the second example, the optimal split is {1, 2, 3} and {9}, leading to a difference of |6 - 9| = 3. In the last example, since there\'s only one gemstone, the two groups would be {20} and {}, leading to a difference of 20.","solution":"def minimizeDifference(weights): n = len(weights) total_weight = sum(weights) target = total_weight // 2 # Initialize a DP array to store reachable weights dp = [0] * (target + 1) for weight in weights: # Traverse in reverse to avoid over-counting the same item for j in range(target, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) # The closest sum to half of total weight closest_sum = dp[target] # The other group\'s sum will be the total weight minus this group difference = abs(total_weight - 2 * closest_sum) return difference"},{"question":"You are given a string representing a number in any base between 2 and 36 (inclusive). Your task is to convert this string to an integer in base 10. Write a function `convert_to_base10(base, num_str)` that takes an integer `base` (the base of the input string) and a string `num_str` (the number to convert), and returns the integer representation of `num_str` in base 10. Note that: - The base can be any integer from 2 to 36. - The number string will only contain valid digits and letters for the given base (0-9 and a-z). - Letters a-z represent values from 10 to 35 respectively. # Function Signature ```python def convert_to_base10(base: int, num_str: str) -> int: ``` # Input - An integer `base` (2 ≤ base ≤ 36) — the base of the number. - A string `num_str` — the number represented as a string in the given base. # Output - An integer — the base 10 representation of `num_str`. # Example ```python # Example 1 base = 2 num_str = \\"1011\\" assert convert_to_base10(base, num_str) == 11 # Example 2 base = 16 num_str = \\"1A3\\" assert convert_to_base10(base, num_str) == 419 # Example 3 base = 36 num_str = \\"z\\" assert convert_to_base10(base, num_str) == 35 ``` # Explanation In the first example, \\"1011\\" in base 2 is equal to (1 times 2^3 + 0 times 2^2 + 1 times 2^1 + 1), which equals 11 in base 10. In the second example, \\"1A3\\" in base 16 is equal to (1 times 16^2 + 10 times 16^1 + 3), which equals 419 in base 10. In the third example, \\"z\\" in base 36 is equal to 35 in base 10.","solution":"def convert_to_base10(base: int, num_str: str) -> int: Convert a number string from a specified base to its integer representation in base 10. Args: - base (int): The base of the input number (2 ≤ base ≤ 36). - num_str (str): The number as a string in the given base. Returns: - int: The integer representation of the number in base 10. return int(num_str, base)"},{"question":"In the kingdom of ByteLandia, there are N citizens, each with a unique ID from 1 to N. Each citizen has a certain number of friends, and friendships are mutual. You, as a royal programmer, have been tasked with evaluating the social connectivity within the kingdom. Your goal is to determine the shortest path of friendships (in terms of the number of relationships) between two given citizens. If no path exists, return -1. The input consists of: 1. An integer N (2 ≤ N ≤ 1000), representing the number of citizens. 2. An integer M (1 ≤ M ≤ 5000), representing the number of friendships. 3. M pairs of integers (a, b) indicating that citizen a and citizen b are friends. 4. Two integers S and T (1 ≤ S, T ≤ N) representing the IDs of the two citizens for which you need to find the shortest path. Output the number of friendships in the shortest path between citizen S and citizen T. If no path exists, output -1.","solution":"from collections import deque def shortest_path(N, M, friendships, S, T): Determine the shortest path of friendships between two given citizens. Parameters: - N : int : Number of citizens - M : int : Number of friendships - friendships : list of tuple of int : Pairs representing friendships (a, b) - S : int : Start citizen ID - T : int : Target citizen ID Returns: - int : Number of friendships in the shortest path between S and T, or -1 if no path exists # Generate the adjacency list adj_list = {i: [] for i in range(1, N+1)} for a, b in friendships: adj_list[a].append(b) adj_list[b].append(a) # BFS to find shortest path queue = deque([(S, 0)]) visited = set([S]) while queue: current, level = queue.popleft() if current == T: return level for neighbor in adj_list[current]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, level + 1)) return -1"},{"question":"There are n houses situated on a street in a row. Each house has a certain amount of money hidden inside it, represented by an integer array `money` where `money[i]` is the amount of money present in the i-th house. A professional thief is planning to rob the houses, but he can never rob two consecutive houses as it would trigger the alarm system. The thief wants to maximize the total amount of money he can rob. Given the array `money`, write a function `maxRob` that returns the maximum amount of money the thief can rob without robbing two consecutive houses. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000), the number of houses. The second line contains n integers `money[i]` (1 ≤ money[i] ≤ 10,000) representing the amount of money in each house. **Example 1:** ``` Input: 6 2 7 9 3 1 4 Output: 15 ``` **Explanation:** The best strategy for the thief is to rob houses with money of 2, 9, and 4 for a total of 2 + 9 + 4 = 15. **Example 2:** ``` Input: 5 10 1 2 10 5 Output: 20 ``` **Explanation:** The best strategy for the thief is to rob houses with money of 10 and 10 for a total of 10 + 10 = 20. Function Signature: ```python def maxRob(n: int, money: List[int]) -> int: pass ``` Note: The solution should handle the input efficiently and leverage dynamic programming to keep the time complexity manageable for large values of n.","solution":"from typing import List def maxRob(n: int, money: List[int]) -> int: if n == 0: return 0 if n == 1: return money[0] dp = [0] * n dp[0] = money[0] dp[1] = max(money[0], money[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + money[i]) return dp[n-1]"},{"question":"A group of friends is planning a hiking trip in the mountains. They have a preliminary map of the trail, which is represented as a sequence of heights. Each height corresponds to a point along the trail. The hikers prefer routes that offer the most scenic views, which they define as having the maximum amount of elevation gain followed by the maximum amount of elevation loss. To decide on the best trail segment, they want to find a contiguous subarray of heights where the elevation gain followed by the loss is maximized. Specifically, the trail segment should start at a lower point, steadily rise to a peak (maximum height), and then steadily descend back to a lower point. Given the length of the trail and the heights at each point, help the hikers find the maximum elevation difference along the best scenic trail segment. The first line of input contains an integer n (1 ≤ n ≤ 1000), representing the number of points along the trail. The second line contains n integers separated by spaces, which represent the heights at each point. All the heights are positive integers and not more than 1000. Output a single integer, representing the maximum elevation difference in the most scenic trail segment. If no such segment exists, output 0. **Example:** ``` Input: 10 1 2 3 4 3 2 1 5 6 2 Output: 5 ```","solution":"def find_max_scenic_difference(n, heights): max_diff = 0 for i in range(1, n - 1): # find the peak in the trail peak = heights[i] left, right = i, i while left > 0 and heights[left - 1] < heights[left]: # move left while ascending left -= 1 while right < n - 1 and heights[right + 1] < heights[right]: # move right while descending right += 1 if left < i and right > i: # there is an actual peak elevation_diff = heights[i] - min(heights[left], heights[right]) max_diff = max(max_diff, elevation_diff) return max_diff"},{"question":"You are given a string S of length n consisting of lowercase English letters. You can perform at most k operations on this string. In one operation, you can choose any character in the string and replace it with any other lowercase English letter. Determine the length of the longest possible substring consisting of repeating identical characters that can be obtained using at most k operations. The first line contains two space-separated integers n (1 ≤ n ≤ 1000) and k (0 ≤ k ≤ 1000) — the length of the string and the maximum number of operations that can be performed. The second line contains the string S of length n. Output a single integer — the length of the longest possible substring consisting of the same character after performing at most k operations. Example: Input: 8 1 aabbccdd Output: 3 Explanation: In the first example, you can replace one \'a\' with \'b\' to get the string \'aabbbccdd\'. The longest possible substring of identical characters after performing at most one operation in this case is \\"bbb\\" which has length 3.","solution":"def longest_repeating_substring(n, k, s): def max_length_with_char(c): left = 0 count = 0 max_len = 0 for right in range(n): if s[right] != c: count += 1 while count > k: if s[left] != c: count -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len return max(max_length_with_char(c) for c in set(s))"},{"question":"In a distant galaxy, there is a peculiar town with a row of houses numbered from 1 to n. Each house either has a cat or a dog as a pet. The town mayor decided that for a special celebration, they want to divide the town into two contiguous sections such that one section contains all houses with cats and the other section contains all houses with dogs. Given the string s of length n consisting of characters \'C\' and \'D\' where \'C\' represents a house with a cat and \'D\' represents a house with a dog, determine if it is possible to divide the town into two contiguous sections as required. If possible, print the 1-based index of the position where you should make the cut. If it is not possible, print \\"Impossible\\". The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of houses. The second line contains a string s of length n consisting of characters \'C\' and \'D\'. Output a single integer — the 1-based index of the position where you should make the cut, or the string \\"Impossible\\" if it is not possible to make such a cut. # Example Input ``` 5 CCCDD ``` Output ``` 3 ``` Input ``` 6 CCCDDC ``` Output ``` Impossible ``` In the first example, the cut can be made after the third house (1-based index), resulting in the sections \\"CCC\\" and \\"DD\\". In the second example, it is impossible to divide the string into two contiguous sections where one section contains only \'C\' and the other only \'D\'.","solution":"def find_cut_position(n, s): This function finds the position where we can divide the town into two contiguous sections: one with all \'C\' and the other with all \'D\'. # Iterate through the string to find a position where all \'C\' are followed by all \'D\' for i in range(1, n): if s[:i] == \'C\' * i and s[i:] == \'D\' * (n - i): return i # If no such position is found, return \\"Impossible\\" return \\"Impossible\\""},{"question":"Alice is organizing a series of movie nights for her friends. There are n friends and m movies available to watch. Each friend has a list of movies they want to watch and Alice wants to accommodate as many friends as possible for each movie night. Note that any friend can attend multiple movie nights, but they can only watch each movie once. The goal is to determine the minimum number of movie nights Alice needs to organize so that every friend attending can watch all the movies they want. You are given: - An integer n (1 le n le 1000) — the number of friends. - An integer m (1 le m le 100) — the number of movies. - A list of n lists where the i-th list contains the indices of the movies that the i-th friend wants to watch. Each index is an integer between 1 and m (inclusive). Output the minimum number of movie nights required. # Input format: - The first line contains two integers n and m. - The next n lines each contain a list of space-separated integers representing the movies that each friend wants to watch. # Output format: - A single integer denoting the minimum number of movie nights required. # Example: Input: ``` 3 3 1 2 2 3 1 3 ``` Output: ``` 2 ``` # Explanation: One optimal solution is to organize: - The first movie night showing movies 1 and 2, which will accommodate the first and third friends. - The second movie night showing movies 2 and 3, which will accommodate the second and third friends.","solution":"def min_movie_nights(n, m, preferences): from itertools import combinations # Create a list of all the movies movies_list = range(1, m+1) # Function to check if all friends\' preferences are satisfied given a combination of movies def satisfies_all_friends(combo): satisfied = [any(movie in combo for movie in pref) for pref in preferences] return all(satisfied) # Try all possible combinations of movies from size 1 to m for night_count in range(1, m+1): for combo in combinations(movies_list, night_count): if satisfies_all_friends(combo): return night_count return m # worst case, every movie requires one night # Example/example usage example_input = (3, 3, [[1, 2], [2, 3], [1, 3]]) print(min_movie_nights(*example_input)) # Output: 2"},{"question":"Amanda is training for the upcoming marathon. To prepare her running schedule, she keeps track of the distances she runs each day and aims to meet a certain weekly mileage goal. She has recorded her distances for `n` consecutive days and needs your help to figure out if she meets her goal for any `k` consecutive days within this period. Given an array of integers where each element represents the distance run on that day, determine if there exists a subarray of length `k` whose sum is greater than or equal to the goal. If such a subarray exists, return \\"YES\\", otherwise return \\"NO\\". **Input:** - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 10^5) representing the number of days and the consecutive days to check. - The second line contains an integer `goal` (1 ≤ goal ≤ 10^9) representing the mileage goal for any `k` consecutive days. - The third line contains `n` integers `d1, d2, ..., dn` (0 ≤ di ≤ 10^6) representing the distances run on each of the `n` days. **Output:** - Print \\"YES\\" if there exists any `k` consecutive days where the sum of distances is greater than or equal to the goal, otherwise print \\"NO\\". **Example:** **Input:** ``` 7 3 15 4 7 2 5 8 4 3 ``` **Output:** ``` YES ``` **Explanation:** For the given input, Amanda has the following distances for 7 days: 4, 7, 2, 5, 8, 4, 3. If we check the sum of distances for any consecutive 3 days: - Days 1 to 3: 4 + 7 + 2 = 13 - Days 2 to 4: 7 + 2 + 5 = 14 - Days 3 to 5: 2 + 5 + 8 = 15 - Days 4 to 6: 5 + 8 + 4 = 17 - Days 5 to 7: 8 + 4 + 3 = 15 Since there are subarrays with sums 15 and 17 which are greater than or equal to the goal of 15, the output is \\"YES\\".","solution":"def meets_goal(n, k, goal, distances): Determines if there is any subarray of length k whose sum is greater than or equal to the goal. Parameters: n (int): Number of days. k (int): Number of consecutive days to check. goal (int): Mileage goal. distances (list of int): Distances run each day. Returns: str: \\"YES\\" if there exists any k consecutive days where the sum of distances is >= goal, otherwise \\"NO\\". current_sum = sum(distances[:k]) if current_sum >= goal: return \\"YES\\" for i in range(k, n): current_sum += distances[i] - distances[i - k] if current_sum >= goal: return \\"YES\\" return \\"NO\\""},{"question":"You are tasked with implementing a function that sums up the values in a binary tree. Each node in the tree contains an integer value. The summation should be done using a depth-first search (DFS) traversal. The tree is represented by a binary tree node class that has the following structure: ```python class TreeNode: def __init__(self, x): self.value = x self.left = None self.right = None ``` Your goal is to write a function that takes the root node of the binary tree and returns the sum of all the values in the tree. The function should have the following signature: ```python def sum_of_tree(root: TreeNode) -> int: # Your code here ```","solution":"class TreeNode: def __init__(self, x): self.value = x self.left = None self.right = None def sum_of_tree(root: TreeNode) -> int: Returns the sum of all values in the binary tree using DFS traversal. if root is None: return 0 return root.value + sum_of_tree(root.left) + sum_of_tree(root.right)"},{"question":"Given a string s of length n (1 leq n leq 10^5) consisting of lowercase Latin letters, your task is to find the length of the longest substring of s such that all the characters in the substring are distinct. # Input The first line contains a single integer t (1 leq t leq 10) — the number of test cases. Each of the next t lines contains a string s. # Output For each test case, output a single integer — the length of the longest substring with all distinct characters. # Example Input ``` 3 abcabcbb bbbbb pwwkew ``` Output ``` 3 1 3 ``` # Explanation In the first test case, \\"abc\\" is the longest substring with all distinct characters. In the second test case, \\"b\\" is the longest substring with all distinct characters. In the third test case, \\"wke\\" is the longest substring with all distinct characters. Note that the answer must be a substring, \\"pwke\\" is not a substring of the given string \\"pwwkew\\".","solution":"def length_of_longest_substring(s): This function takes a string s and returns the length of the longest substring with all distinct characters. n = len(s) char_set = set() left = 0 max_length = 0 for right in range(n): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length def process_test_cases(test_cases): results = [] for case in test_cases: results.append(length_of_longest_substring(case)) return results"},{"question":"The dataset given is a sequence of a day\'s stock prices at regular intervals. Your task is to find the maximum profit you can achieve by buying and selling the stock. Note that you can only hold one share of the stock at a time (i.e., buy one and then sell one). Write a function `max_profit(prices)` to determine the maximum profit. The function should receive an array of integers `prices` where `prices[i]` is the price of a given stock on the i-th day. **Input:** - A list of integers `prices` representing the stock prices. **Output:** - An integer representing the maximum profit achievable. If no profit is possible, return 0. **Constraints:** - 1 <= len(prices) <= 10^5 - 0 <= prices[i] <= 10^4 **Example:** ``` Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell. ``` ``` Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done, and the max profit = 0 ``` Develop an efficient algorithm to solve the problem, aiming for linear time complexity if possible.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling a stock once. :param prices: List of stock prices where prices[i] is the price of the stock on the i-th day. :return: The maximum profit achievable, or 0 if no profit is possible. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"In a faraway kingdom, there is a picturesque town where all the streets are perfectly positioned in a grid. The town has n rows and m columns, creating a grid of n times m intersections. Each intersection can be identified by two integers (i, j) representing its row and column. Recently, the kingdom\'s council decided to beautify the town by planting flowers at some intersections. However, the town\'s gardener, Eden, faced a peculiar challenge. Each intersection can either have flowers planted on it or be left empty. Eden needs to ensure that certain intersections, called \\"special intersections,\\" always contain flowers. There can be up to k special intersections listed. Eden wants to know if it\'s possible to plant flowers on all special intersections such that no four intersections with flowers form the vertices of a rectangle aligned with the grid lines. Help Eden determine whether this flower planting is feasible. Input - The first line contains three integers n, m, and k (2 le n, m le 1000, 0 le k le n times m) — the number of rows, columns, and special intersections respectively. - The next k lines each contain two integers x_i and y_i (1 le x_i le n, 1 le y_i le m) denoting the coordinates of each special intersection that must have flowers. Output - Print \\"YES\\" (quotes for clarity) if it is possible to plant flowers on all special intersections without forming a rectangle as described. Otherwise, print \\"NO\\" (quotes for clarity). Example Input: ``` 4 5 3 1 2 3 2 2 5 ``` Output: ``` YES ``` Input: ``` 3 3 4 1 1 1 3 3 1 3 3 ``` Output: ``` NO ``` In the first example, there are no four flowers that form the vertices of a rectangle. In the second example, the four special intersections form the vertices of a rectangle, therefore the output is \\"NO\\".","solution":"def can_plant_flowers(n, m, k, special_intersections): Determine if flowers can be planted on all special intersections without forming a rectangle. if k < 4: return \\"YES\\" # Create a dictionary to keep track of columns in each row where flowers exist row_to_columns = {} for (x, y) in special_intersections: if x not in row_to_columns: row_to_columns[x] = set() row_to_columns[x].add(y) # Check for any combination of 4 points forming a rectangle columns_checked = set() for row in row_to_columns: columns_in_row = list(row_to_columns[row]) columns_in_row.sort() for i in range(len(columns_in_row)): for j in range(i + 1, len(columns_in_row)): col1 = columns_in_row[i] col2 = columns_in_row[j] if (col1, col2) in columns_checked: return \\"NO\\" columns_checked.add((col1, col2)) return \\"YES\\""},{"question":"Bob is participating in the \\"League of Leesins\\" World Championship and has been given the task of creating a ranking chart for the teams based on their performance throughout the tournament. Bob has calculated the scores for each team and wants to determine the final ranking. The tournament consists of n teams, and each team has a unique ID ranging from 1 to n. You are given an array s of length n, where s_i represents the score of the i-th team. Two teams with equal scores should be ranked based on their IDs in ascending order. Bob has asked you to help him sort the teams based on their scores in descending order. If two teams have the same score, the team with the smaller ID should rank higher. # Input - The first line contains an integer n (1 le n le 10^5) — the number of teams. - The second line contains n integers s_1, s_2, ldots, s_n (0 le s_i le 10^9) — the scores of the teams. # Output - Print n integers representing the IDs of the teams in the order of their final ranking. # Example Input ``` 5 100 200 100 300 200 ``` Output ``` 4 2 5 1 3 ``` # Note In the example, the scores of the teams are [100, 200, 100, 300, 200]. The team with ID 4 has the highest score of 300, so it ranks first. Teams with IDs 2 and 5 have the second highest score of 200, but team 2 should rank higher as it has a smaller ID. Similarly, teams with IDs 1 and 3 have the lowest score of 100, but team 1 should rank higher due to its smaller ID. Therefore, the final ranking is: 4, 2, 5, 1, 3.","solution":"def rank_teams(n, scores): Ranks teams based on their scores in descending order. If scores are the same, ranks by team ID in ascending order. Args: - n (int): Number of teams. - scores (list of int): Scores of the teams. Returns: - list of int: Team IDs in the order of their final ranking. teams = [(i + 1, scores[i]) for i in range(n)] sorted_teams = sorted(teams, key=lambda x: (-x[1], x[0])) return [team[0] for team in sorted_teams]"},{"question":"You are given a list of n integers. Your task is to determine if you can rearrange the integers in such a way that the resulting list forms a strictly increasing sequence and no integer appears more than once in the sequence. If it\'s possible, return the rearranged sequence, otherwise return -1. First line contains a single integer t (1 leq t leq 10^4) — the number of test cases. The first line of each test case contains a single integer n (1 leq n leq 100). The second line of each test case contains n integers separated by spaces. For each test case, print the rearranged list if possible, or -1 if it\'s not possible. You may print each number in any format. **Examples:** 1. Input: ``` 2 5 1 3 2 3 4 3 1 2 3 ``` Output: ``` -1 1 2 3 ``` 2. Input: ``` 3 4 4 3 2 1 6 1 1 1 1 1 1 4 1 2 2 3 ``` Output: ``` 1 2 3 4 -1 -1 ``` **Explanation:** In the first test case of Example 1, the sequence contains duplicate numbers, so it\'s not possible to rearrange it into a strictly increasing sequence. In the second test case of Example 1, the sequence is already strictly increasing. In the first test case of Example 2, we can sort the numbers in strictly increasing order. In the second test case of Example 2, all numbers are the same, making it impossible to create a strictly increasing sequence. In the third test case of Example 2, the sequence contains duplicate numbers, so it\'s not possible to rearrange it into a strictly increasing sequence.","solution":"def can_form_strictly_increasing_sequence(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] numbers = test_cases[i][1] if len(set(numbers)) != n: results.append(-1) else: results.append(sorted(numbers)) return results # Example usage to verify the solution t = 2 test_cases = [ (5, [1, 3, 2, 3, 4]), (3, [1, 2, 3]) ] print(can_form_strictly_increasing_sequence(t, test_cases))"},{"question":"You are given a list of integers, and you need to determine if there is a pair of distinct elements in the list such that their sum is an even number. Input - The first line contains a single integer n (2 ≤ n ≤ 105) – the number of elements in the list. - The second line contains n space-separated integers, each an element of the list. Each integer in the list is between -105 and 105. Output - Print \\"YES\\" if there is such a pair, otherwise print \\"NO\\". For example: - Input: 5 1 3 4 5 6 - Output: YES - Input: 3 1 2 5 - Output: NO","solution":"def has_even_sum_pair(n, arr): Determines if there is a pair of distinct elements in the list such that their sum is an even number. Parameters: n (int): The number of elements in the list. arr (list of int): The list of integers. Returns: str: \\"YES\\" if there is such a pair, otherwise \\"NO\\". odd_count = sum(1 for x in arr if x % 2 != 0) even_count = n - odd_count if odd_count >= 1 and even_count >= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a grid of size `n x m`, determine the number of ways to place exactly `k` non-overlapping 1x1 tiles such that each tile occupies a unique cell in the grid. The order of placement does not matter, and all placements are considered distinct if the sets of cells in each placement are different. # Input - The first line contains three integers `n`, `m`, and `k` (`1 ≤ n, m ≤ 1000`, `0 ≤ k ≤ n * m`) — the number of rows, the number of columns, and the number of tiles to be placed. # Output - Output a single integer — the number of distinct ways to place exactly `k` non-overlapping 1x1 tiles on the grid. # Example Input ``` 3 3 2 ``` Output ``` 36 ``` # Explanation In a 3x3 grid, there are a total of 9 cells. We need to choose 2 out of these 9 cells without regard to the order of selection. The number of ways to do this is given by the binomial coefficient C(9, 2), which is 36.","solution":"from math import comb def num_ways_to_place_tiles(n, m, k): Calculate the number of ways to place exactly k non-overlapping 1x1 tiles on a n x m grid. Parameters: - n: number of rows (1 ≤ n ≤ 1000) - m: number of columns (1 ≤ m ≤ 1000) - k: number of tiles to be placed (0 ≤ k ≤ n * m) Returns: - The number of distinct ways to place exactly k non-overlapping 1x1 tiles. total_cells = n * m return comb(total_cells, k) # Example usage # n, m, k = 3, 3, 2 # print(num_ways_to_place_tiles(n, m, k)) # Output: 36"},{"question":"In a galaxy far, far away, there is a mysterious island shaped like a perfect circle. This island can be described using a center point at coordinates (a, b) and a radius r. Recently, an intergalactic festival has been set up on this island, and many travelers from various planets want to visit. However, the island authorities are quite strict; they only allow access to those travelers whose arrival points lie strictly inside the island (not on the border or outside). For each traveler, given their arrival coordinates, determine if they will be allowed to enter the island. Input: - The first line contains three integers a, b and r (1 le a, b le 100), and (1 le r le 100) representing the island\'s center and radius. - The second line contains a single integer k (1 le k le 100) — the number of travelers. - Each of the next k lines contains two integers x_j and y_j (-200 le x_j, y_j le 200), representing the coordinates of the j^{th} traveler. Output: Print k lines. The j^{th} line should contain \\"APPROVED\\" if the position of the j^{th} traveler lies strictly inside the island. Otherwise, the j^{th} line should contain \\"DENIED\\". Note: - Traveler coordinates that lie exactly on the boundary of the circle should be considered as \\"DENIED\\". Example: Input: 5 5 4 3 7 5 4 4 5 1 Output: DENIED APPROVED DENIED","solution":"def check_travelers(a, b, r, travelers): Determines whether each traveler lies strictly inside the island. Parameters: a, b (int): The coordinates of the island\'s center. r (int): The radius of the island. travelers (list[tuple[int, int]]): List of tuples representing the coordinates of each traveler. Returns: list[str]: List of \\"APPROVED\\" or \\"DENIED\\" for each traveler. results = [] for x, y in travelers: distance_squared = (x - a) ** 2 + (y - b) ** 2 if distance_squared < r ** 2: results.append(\\"APPROVED\\") else: results.append(\\"DENIED\\") return results"},{"question":"You are given a list of integers which might contain both positive and negative numbers. Your task is to find the maximum product that can be obtained by multiplying any three integers from the list. The first line of input contains a single integer n (3 ≤ n ≤ 105), the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an ( - 103 ≤ ai ≤ 103). Output a single integer representing the maximum product of any three integers from the list.","solution":"def maximum_product_of_three(nums): Returns the maximum product that can be obtained by multiplying any three integers from the list. nums.sort() # The maximum product can be obtained from: # 1. The product of the three largest numbers # 2. The product of the two smallest numbers (could be negative) and the largest number return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"John is organizing a charity event where he plans to distribute gift boxes to participants. Each participant should receive one gift box, and the contents of the boxes should be of approximately equal value. John has a list of available items, each with a given value, and he wants to pack these items into the boxes such that the difference in total value between the most valuable box and the least valuable box is minimized. Given the number of items, their respective values, and the number of boxes, help John determine the minimum possible difference in total value between the most valuable box and the least valuable box once all items are distributed. The input will be formatted as follows: - The first line contains an integer t (1 leq t leq 10) — the number of test cases. - Each test case consists of two lines: - The first line contains two integers n and k (1 leq k leq n leq 1000) — the number of items and the number of boxes. - The second line contains n integers v_1, v_2, ldots, v_n, (1 leq v_i leq 1000) — the values of the items. For each test case, output a single integer — the minimum possible difference in total value between the most valuable box and the least valuable box. # Example Input ``` 2 6 3 1 2 3 4 5 6 4 2 7 8 5 2 ``` Output ``` 1 1 ``` # Explanation In the first test case, one way to distribute the items into 3 boxes is as follows: {1, 6}, {2, 5}, {3, 4}. Each box has a total value of 7, and the difference between the most valuable box and the least valuable box is 0. In the second test case, one optimal distribution could be: {7, 2}, {8, 5}. The total values of the boxes are 9 and 13, and thus the difference is 4. Another optimal distribution that minimizes the difference further would be: {7, 8} and {5, 2}. The total values of the boxes are 15 and 7, with a difference of 8. Since we want to minimize this difference, a more balanced distribution might be: {8, 2} and {7, 5} with total values 10 and 12 respectively, resulting in a difference of 2. In both examples, the minimum difference is the smallest possible difference after considering various distributions.","solution":"def min_value_difference(t, test_cases): def find_minimum_difference(n, k, items): items.sort() min_diff = float(\'inf\') for i in range(n - k + 1): diff = items[i+k-1] - items[i] min_diff = min(min_diff, diff) return min_diff results = [] for case in test_cases: n, k, items = case results.append(find_minimum_difference(n, k, items)) return results"},{"question":"You are given a list of integers representing the weights of stones, and each turn, you choose the two heaviest stones and smash them together. Suppose the stones have weights x and y with x <= y. The result of this smash is: - If x == y, both stones are entirely destroyed; - If x != y, the stone of weight x is destroyed, and the stone of weight y has a new weight of y - x. At the end of the game, there is at most one stone left. Return the weight of this stone (or 0 if no stones are left). You can use a priority queue (min heap) to simulate this process efficiently. Note that the heap in Python is a min-heap, so you may need to invert the values to simulate a max-heap. The first line contains an integer n (1 <= n <= 30) – the number of stones. The second line contains n space-separated integers representing the weights of the stones. Write a function `last_stone_weight(stones: List[int]) -> int` that returns the weight of the last remaining stone (or 0 if no stones are left). Example: ``` Input: 6 2 7 4 1 8 1 Output: 1 ```","solution":"import heapq from typing import List def last_stone_weight(stones: List[int]) -> int: Simulates the stone smashing process and returns the weight of the last stone. If no stones are left, returns 0. # Convert all weights to negative to simulate a max-heap using Python\'s min-heap stones = [-stone for stone in stones] heapq.heapify(stones) while len(stones) > 1: # Extract the two heaviest stones (remember they are negative) heaviest = heapq.heappop(stones) second_heaviest = heapq.heappop(stones) if heaviest != second_heaviest: # Calculate the new weight and push it back to the heap new_weight = heaviest - second_heaviest heapq.heappush(stones, new_weight) # If there are no stones left, return 0, else return the absolute value of the last stone return -stones[0] if stones else 0"},{"question":"Given a list of non-negative integers, you are tasked with finding the length of the longest contiguous subarray within the list where at most two distinct integers are present. # Input - The input consists of a single line containing a space-separated list of non-negative integers. # Output - Print a single integer, the length of the longest contiguous subarray which contains at most two distinct integers. # Examples Example 1 **Input:** ``` 1 2 1 ``` **Output:** ``` 3 ``` **Explanation:** The entire array contains at most two distinct integers (1 and 2). Example 2 **Input:** ``` 0 1 2 2 ``` **Output:** ``` 3 ``` **Explanation:** The longest subarray with at most two distinct integers is `[1, 2, 2]`, which has length 3. Example 3 **Input:** ``` 1 2 3 2 2 ``` **Output:** ``` 4 ``` **Explanation:** The longest subarray with at most two distinct integers is `[2, 3, 2, 2]`, which has length 4. Example 4 **Input:** ``` 4 4 4 4 4 ``` **Output:** ``` 5 ``` **Explanation:** The entire array contains only one distinct integer (4), so the entire array is the longest subarray which contains at most two distinct integers.","solution":"def longest_subarray_with_two_distinct(nums): Given a list of non-negative integers, this function returns the length of the longest contiguous subarray where at most two distinct integers are present. from collections import defaultdict if not nums: return 0 left = 0 right = 0 max_len = 0 counts = defaultdict(int) while right < len(nums): counts[nums[right]] += 1 while len(counts) > 2: counts[nums[left]] -= 1 if counts[nums[left]] == 0: del counts[nums[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"You are given a list of integers representing the productivity of employees in a company over n days. Each employee works independently, and their productivity values are recorded in a list `productivities`. The company wants to maximize the total productivity over all days by applying a special rule. The rule allows the company to boost the productivity of exactly one employee by x units for a maximum of k times. The same employee can be boosted more than once, but the total number of boosts across all employees cannot exceed k. Your task is to determine the maximum possible total productivity over n days after applying the boosting rule optimally. The first line of the input contains three space-separated integers n, k, and x (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9, 1 ≤ x ≤ 10^9) representing the number of days, the maximum number of times the boost can be applied, and the increase in productivity units, respectively. The second line contains n space-separated integers `productivities[i]` (1 ≤ productivities[i] ≤ 10^9), representing the productivity of employees over n days. Output the maximum possible total productivity over n days after optimally applying the boosting rule. Example: Input: ``` 5 3 10 3 8 5 7 4 ``` Output: ``` 57 ``` Explanation: In the example, the company\'s productivity can be maximized by applying the boost 3 times to the second employee (productivity = 8). The total productivity becomes 3 + (8 + 3*10) + 5 + 7 + 4 = 57.","solution":"def maximize_productivity(n, k, x, productivities): Calculate the maximum possible total productivity after optimally applying the boosting rule. :param n: Number of days :param k: Maximum number of times the boost can be applied :param x: Increase in productivity per boost :param productivities: List of productivity values for each day :return: Maximum possible total productivity # Find the maximum productivity value to target for boosting max_productivity = max(productivities) # Calculate the number of boosts we can apply to this maximum productivity total_boost = min(k, n * (x // 1)) # Calculate the additional productivity that can be gained from boosting additional_productivity = total_boost * x # Calculate the total productivity total_productivity = sum(productivities) + additional_productivity return total_productivity"},{"question":"You are given a list of n integers representing the difficulty levels of n tasks you need to perform. You can complete these tasks over a period of k days, where on each day you can complete as many tasks as you want, provided their cumulative difficulty does not exceed a given threshold d. Your objective is to determine the minimum number of days required to complete all tasks, or determine that it is impossible. Each task must be completed exactly one time. The first line contains three integers n, k, and d (1 ≤ n, k ≤ 10^5, 1 ≤ d ≤ 10^9) — the number of tasks, the number of days, and the difficulty threshold respectively. The second line contains n integers ai (1 ≤ ai ≤ 10^9), where ai is the difficulty level of the i-th task. Print one integer — the minimum number of days required to complete all tasks. If it is impossible to complete all tasks within the given days and threshold, print -1. # Example **Input:** ``` 5 3 10 4 4 2 7 3 ``` **Output:** ``` 2 ``` **Explanation:** In the first example, Vasiliy can complete the tasks as follows: - On the first day, he completes tasks with difficulties 4, 4, and 2 (total difficulty is 10). - On the second day, he completes tasks with difficulties 7 and 3 (total difficulty is 10). Since he managed to complete all tasks within the given days and threshold, the output is 2.","solution":"def minimum_days_to_complete_tasks(n, k, d, difficulties): days_needed = 0 current_sum = 0 task_count = 0 for difficulty in difficulties: if difficulty > d: return -1 if current_sum + difficulty > d: days_needed += 1 current_sum = difficulty task_count = 1 else: current_sum += difficulty task_count += 1 if task_count > 0: days_needed += 1 return days_needed if days_needed <= k else -1"},{"question":"In a far away kingdom, there is a legendary sword with magical properties that can be activated by a series of specific enchantments. The sword has n slots, each of which can hold one enchantment. The enchantments are represented as integers e1, e2, ..., en. Each enchantment has a power value, which is also an integer. The power of the sword is calculated by summing the power values of all the enchantments that are currently applied to the sword. However, the magic of the sword has a unique feature: if any two adjacent slots (i and i+1) hold enchantments such that ei > e(i+1), then the power of the sword is decreased by the absolute difference between ei and e(i+1). Your task is to determine the maximum possible total power of the sword, while ensuring that the power is not decreased by any adjacent enchantments. The first line of input contains an integer n (1 ≤ n ≤ 100,000), the number of slots on the sword. The second line contains n integers e1, e2, ..., en (1 ≤ ei ≤ 1,000,000), the power values of the enchantments. The output should be a single integer representing the maximum possible total power of the sword. Example: Input: 5 4 2 3 1 5 Output: 15 Explanation: To maximize the power, you need to rearrange the enchantments in non-decreasing order to avoid any power decrease. The sorted order is [1, 2, 3, 4, 5], which sums to 15.","solution":"def max_sword_power(n, enchantments): Calculates the maximum possible total power of the sword by rearranging the enchantments in non-decreasing order to avoid any decreases due to adjacent slots. :param n: Number of slots (integer) :param enchantments: List of enchantment power values (list of integers) :return: Maximum total power of the sword (integer) enchantments.sort() return sum(enchantments)"},{"question":"You are given an array of integers, `nums`, and an integer, `k`. Your task is to determine if there are two distinct elements in the array whose sum is equal to `k`. You should implement a function `hasPairWithSum(nums, k)` that returns `True` if such a pair exists, and `False` otherwise. The input to the function consists of: - `nums`: A list of integers where the number of elements can range from 1 to 2000. Each element in the array can range from -10^9 to 10^9. - `k`: An integer ranging from -10^9 to 10^9. The output should be a boolean value indicating whether there exists a pair of distinct elements in the array that add up to `k`. # Example ```python hasPairWithSum([10, 15, 3, 7], 17) ``` Return: ```python True ``` Because `10 + 7 = 17`. ```python hasPairWithSum([1, 2, 3, 9], 8) ``` Return: ```python False ``` Because no two distinct elements sum up to 8. # Constraints - The function should run in O(n) time complexity, where n is the number of elements in the array. You may use additional space.","solution":"def hasPairWithSum(nums, k): Determines if there are two distinct elements in the array whose sum is equal to k. Parameters: nums (List[int]): List of integers k (int): The target sum Returns: bool: True if a pair exists with the sum of k, False otherwise seen = set() for num in nums: if k - num in seen: return True seen.add(num) return False"},{"question":"Martha is organizing her bookshelf which contains n books. Each book has a unique numeric identifier from 1 to n. Initially, all the books are placed consecutively on a single shelf in the increasing order of their identifiers from left to right. As a form of categorization, Martha wants to partition the shelf to create several sections where each section will contain books with consecutive identifiers. She can only move a single book at a time. Furthermore, each time she moves a book, it must either be placed at the beginning or the end of the shelf. Your task is to calculate the minimum number of such moves needed to form k non-empty sections of consecutively-identified books, where k is a given positive integer less than or equal to n. The first line of input contains two positive integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of books on the shelf and the number of sections Martha wants to divide the books into. The output should consist of a single integer - the minimum number of moves required. # Example **Input:** ``` 5 3 ``` **Output:** ``` 2 ``` **Explanation:** One optimal way to divide the books into 3 sections is: 1. Move book 4 to the front: `[4, 1, 2, 3, 5]`. 2. Move book 5 to the front: `[5, 4, 1, 2, 3]`. Now, we have 3 sections: `[5, 4]`, `[1, 2, 3]`. Note: There could be other ways to achieve the same result with the same number of moves.","solution":"def min_moves_to_partition(n, k): Calculate the minimum number of moves required to partition the shelf into k sections of consecutively identified books. Parameters: n (int): The number of books on the shelf. k (int): The number of sections. Returns: int: The minimum number of moves required. # The minimum moves required is the number of gaps we need, which is (k - 1). return k - 1"},{"question":"A company needs to keep track of its projects and their dependencies. Each project depends on a set of other projects being completed before it can start. However, if there is a circular dependency among the projects, it indicates a conflict that must be resolved. Write a function that takes a list of projects and their dependencies, and determine whether all projects can be completed, i.e., there are no circular dependencies. If it is possible to complete all projects, the function should return True. If there is a circular dependency, the function should return False. For example, suppose you have the following set of projects and dependencies: - Project 1 depends on Project 2 - Project 2 depends on Project 3 - Project 3 depends on Project 1 These projects form a circular dependency, and it\'s impossible to complete all of them. Input: - A list of edges, where each edge [a, b] indicates that Project a depends on Project b. Output: - Return True if all projects can be completed, False if there is a circular dependency. Function Signature: ```python def can_complete_projects(edges: List[List[int]]) -> bool: ``` **Example 1:** ```python edges = [[1, 2], [2, 3], [3, 4]] print(can_complete_projects(edges)) # Output: True ``` **Example 2:** ```python edges = [[1, 2], [2, 3], [3, 1]] print(can_complete_projects(edges)) # Output: False ``` **Constraints:** - The number of projects and dependencies (edges) will be at most 1000.","solution":"from typing import List def can_complete_projects(edges: List[List[int]]) -> bool: def has_cycle(graph, node, visited, rec_stack): visited[node] = True rec_stack[node] = True for neighbor in graph[node]: if not visited[neighbor]: if has_cycle(graph, neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: return True rec_stack[node] = False return False graph = {} for u, v in edges: if u not in graph: graph[u] = [] if v not in graph: graph[v] = [] graph[u].append(v) visited = {node: False for node in graph} rec_stack = {node: False for node in graph} for node in graph: if not visited[node]: if has_cycle(graph, node, visited, rec_stack): return False return True"},{"question":"An e-commerce platform wants to improve its search functionality by providing keyword suggestions to users as they type in the search bar. The platform has a list of n popular products and wants to generate possible suggestions efficiently. Each product is represented as a string. When a user types in a prefix, the platform should display up to k suggestions of product names that start with that prefix. If there are fewer than k matching products, the platform should return all of them. The suggestions should be returned in lexicographical order. You are required to implement the suggestion functionality. The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10), the number of products and the maximum number of suggestions to be displayed, respectively. The next n lines contain one string each, representing the name of a product. Each string consists of lowercase English letters and its length will not exceed 100 characters. The last line contains the prefix string entered by the user, which consists of lowercase English letters and will not exceed 100 characters in length. Output the list of suggested product names, each in a new line, based on the user\'s input prefix. If there are no matching products, print \\"No suggestions\\" instead. Example Input: ``` 5 3 apple ape apricot banana appeal ap ``` Example Output: ``` ape apple apricot ```","solution":"def generate_suggestions(n, k, products, prefix): Generates up to k suggestions of product names that start with the given prefix. # Sort the products lexicographically products.sort() # Filter products that start with the prefix suggestions = [product for product in products if product.startswith(prefix)] # Return up to k suggestions return suggestions[:k] if suggestions else [\\"No suggestions\\"]"},{"question":"You are given a grid of size n by m containing only \'.\' (dot) and \'#\' (hash) characters representing accessible and blocked cells respectively. Each cell is indexed by (row, column) starting from (1, 1) in the top-left corner to (n, m) at the bottom-right corner. You are also given an initial position (sx, sy) and a final position (fx, fy) on this grid. You are able to make moves in four directions: Up, Down, Left, and Right. Your task is to determine whether it is possible to move from the initial position to the final position without passing through any blocked cell. Here are the rules for movement: - Up: Moves to (x-1, y) - Down: Moves to (x+1, y) - Left: Moves to (x, y-1) - Right: Moves to (x, y+1) The first line of the input contains two integers n and m, representing the dimensions of the grid (1 ≤ n, m ≤ 1000). The next n lines contain m characters each, representing the grid. The next line contains four integers sx, sy, fx, and fy (1 ≤ sx, sy, fx, fy ≤ 1000), representing the starting and destination coordinates. Output \\"YES\\" if there is a path from (sx, sy) to (fx, fy) without moving through \'#\' cells, otherwise output \\"NO\\". Example: Input: 5 5 ..... .#. ..... .#. ..... 1 1 5 5 Output: YES In this example, there is a possible path going from (1, 1) to (5, 5) through the accessible cells.","solution":"from collections import deque def is_path_possible(grid, n, m, sx, sy, fx, fy): Determines if there is a path from (sx, sy) to (fx, fy) on the given grid avoiding \'#\' cells. # Convert to zero-based indexing sx -= 1 sy -= 1 fx -= 1 fy -= 1 if grid[sx][sy] == \'#\' or grid[fx][fy] == \'#\': return \\"NO\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(sx, sy)]) visited[sx][sy] = True while queue: x, y = queue.popleft() if (x, y) == (fx, fy): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"Stanley is playing a treasure hunting game that takes place on a grid with dimensions n times m. Each cell in the grid contains a certain number of gold coins. Stanley starts at the top-left corner (cell (1,1)) and wants to reach the bottom-right corner (cell (n, m)). He can move only to the right or down at each step. Stanley wants to maximize the number of gold coins collected along his path from the start to the destination. Implement a function to help Stanley find the maximum amount of gold coins he can collect. # Input - The first line contains two integers n and m (1 le n, m le 1000) representing the dimensions of the grid. - The next n lines each contain m integers, where the j-th integer in the i-th line represents the number of gold coins in cell (i, j) (0 le text{coins} le 10^9). # Output - Print one integer — the maximum number of gold coins Stanley can collect. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 12 ``` # Explanation Stanley can take the path down -> down -> right -> right, collecting 1+1+4+5+1=12 coins, which is the maximum possible. # Note - Stanley can only move right or down. - There may be multiple paths that yield the maximum number of coins, but the output should only be the maximum number Stanley can collect.","solution":"def max_gold_coins(n, m, grid): # Create a 2D list to store the maximum coins collected up to each cell dp = [[0] * m for _ in range(n)] # Initialize the starting position dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the maximum coins collected return dp[n-1][m-1]"},{"question":"Sasha loves adventures and he recently discovered a new kind of forest with an interesting structure. The forest can be represented as an undirected graph with `n` nodes and `n-1` edges which form a tree. Each node has a certain amount of gold coins and Sasha, being a treasure hunter, wants to maximize the number of gold coins he can collect along any path from the root node (node 1) to any other node. Your task is to help Sasha by determining the maximum number of gold coins he can collect starting from the root and ending at any particular node. Note that Sasha can only travel from the root to a leaf node without revisiting any node. The first line contains an integer `n` (2 ≤ n ≤ 2*10^5) — the number of nodes in the tree. The second line contains `n` integers `c1, c2, ..., cn` (1 ≤ ci ≤ 10^5) — the number of gold coins in each node from node 1 to node n. The next `n-1` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) which describe an edge between nodes `u` and `v`. Print a single integer — the maximum number of gold coins Sasha can collect along any path from node 1 to any other node. Example: Input: 6 5 3 2 7 1 4 1 2 1 3 2 4 2 5 3 6 Output: 15 Explanation: Sasha can collect a maximum of 15 gold coins by following the path 1 → 2 → 4.","solution":"from collections import defaultdict, deque def max_gold_coins(n, coins, edges): # Create the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # DFS to find the maximum path sum def dfs(node, parent): max_sum = 0 for neighbor in graph[node]: if neighbor != parent: max_sum = max(max_sum, dfs(neighbor, node)) return max_sum + coins[node - 1] return dfs(1, -1)"},{"question":"Consider a rectangular grid of cells with n rows and m columns. Each cell in the grid is either open (.) or blocked (#). You start from the top-left corner of the grid and want to reach the bottom-right corner. From your current cell, you can move to a directly adjacent cell to the right or down, but only if it is open. Your task is to calculate the number of different paths from the top-left corner to the bottom-right corner. If no such path exists, return 0. Since the number of paths can be large, print the result modulo 1000000007. The input consists of: - The first line contains two integers n and m (1 le n, m le 1000). - The next n lines each contain a string of length m representing the grid, where \'.\' indicates an open cell and \'#\' indicates a blocked cell. Print one integer — the number of paths from the top-left corner to the bottom-right corner, modulo 1000000007. If there is no path, print 0.","solution":"MOD = 1000000007 def count_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[-1][-1] def number_of_paths_from_input(input_string): input_lines = input_string.strip().split(\'n\') n, m = map(int, input_lines[0].split()) grid = input_lines[1:] return count_paths(grid) # For testing purposes, call number_of_paths_from_input with input string."},{"question":"Given a directed graph with n nodes and m edges, and a set of k starting nodes, your task is to find all the nodes that can be reached from at least one of the starting nodes using the given directed edges. You need to perform this task efficiently. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of vertices and the number of edges. - The next m lines contain two integers u and v (1 ≤ u, v ≤ n) — denoting a directed edge from node u to node v. - The following line contains an integer k (1 ≤ k ≤ n) — the number of starting nodes. - The next k lines each contain a single integer start_i (1 ≤ start_i ≤ n) — the nodes from which you need to start. Output: - Print the number of nodes that can be reached from at least one of the starting nodes. Example: Input: ``` 6 6 1 2 2 3 3 4 4 5 5 6 3 6 2 1 3 ``` Output: ``` 6 ``` In this example, nodes 1 and 3 are the starting points. From node 1, you can reach all nodes from 1 to 6. From node 3, nodes 3 to 6 are reachable. The total number of unique nodes reachable is 6.","solution":"from collections import defaultdict, deque def reachable_nodes(n, m, edges, k, start_nodes): graph = defaultdict(list) reachable = set() # Create the directed graph for u, v in edges: graph[u].append(v) # Function to perform BFS from a start node def bfs(start): queue = deque([start]) while queue: node = queue.popleft() if node not in reachable: reachable.add(node) for neighbor in graph[node]: if neighbor not in reachable: queue.append(neighbor) # Perform BFS from each starting node for start in start_nodes: bfs(start) return len(reachable)"},{"question":"A new metro line is being planned for a city currently undergoing infrastructure improvements. The new line will pass through several important districts, and the government wants to minimize the total travel distance for commuters. A requirement is that the new metro line must be strictly straight and pass through the most number of stations currently under construction. You are given a list of coordinates representing the positions of the stations. Your task is to determine the maximum number of stations through which a straight line can be drawn. # Input - The first line contains an integer n (1 ≤ n ≤ 300) – the number of stations. - Each of the next n lines contains two integers x and y (|x|, |y| ≤ 10^4) – the coordinates of the stations. # Output - Output a single integer, the maximum number of stations that lie on a straight line. # Example Input ``` 5 1 1 2 2 3 3 4 2 5 1 ``` Output ``` 3 ``` # Explanation In the example above, the stations (1,1), (2,2), and (3,3) lie on a straight line, thus the output is 3. The other lines (e.g., those that might pass through (4,2) and (5,1) alongside one more station) have fewer stations.","solution":"from collections import defaultdict from math import gcd def max_stations_on_straight_line(n, coordinates): if n < 2: return n def slope(p1, p2): dx = p1[0] - p2[0] dy = p1[1] - p2[1] g = gcd(dx, dy) return (dx // g, dy // g) max_stations = 1 for i in range(n): slopes = defaultdict(int) for j in range(n): if i != j: s = slope(coordinates[i], coordinates[j]) slopes[s] += 1 max_stations = max(max_stations, slopes[s] + 1) return max_stations"},{"question":"A software developer is tasked with writing a unique function for a game prototype. The game consists of a grid where each cell can either be empty (.) or contain an obstacle (#). The player starts at the top-left corner of the grid and must reach the bottom-right corner. The player can only move right (R) or down (D) at each step. However, the movement is restricted by the obstacles, and the player cannot move into a cell with an obstacle. Given the game grid, find the number of unique paths that the player can take to reach the bottom-right corner from the top-left corner without passing through any obstacles. If it is not possible to reach the destination, return 0. The input consists of a single integer n (1 <= n <= 20) representing the size of the grid (it is always a square grid), followed by n lines each containing n characters representing the grid. Provide a function `unique_paths(n, grid)` that returns the number of unique paths from the top-left to the bottom-right, adhering to the mentioned rules. Example: Input: 3 ..# .#. ... Output: 2 Explanation: The grid is represented as follows: ..# .#. ... There are two paths from the top-left to the bottom-right: 1. Right, Down, Right, Down 2. Down, Right, Down, Right","solution":"def unique_paths(n, grid): This function calculates the number of unique paths from the top-left corner to the bottom-right corner of an n x n grid while avoiding obstacles (#). # Edge case: if the start or end is an obstacle, no path is possible. if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 dp = [[0 for _ in range(n)] for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1]"},{"question":"You are given two integers k and t, and a list of k integers representing the initial state of a sequence. Your task is to determine if it is possible to rearrange the provided sequence such that no two adjacent integers have a sum greater than t. The first line of input contains two integers k and t (1 ≤ k ≤ 100 000, 0 ≤ t ≤ 10^9) — the number of elements in the sequence and the maximum allowed sum of any pair of adjacent integers. The second line of input contains k integers, representing the initial sequence, where each integer ai (0 ≤ ai ≤ 10^9) is an element of the sequence. Output \\"YES\\" if it is possible to rearrange the sequence to meet the condition, otherwise output \\"NO\\". If the answer is \\"YES\\", print a possible rearrangement of the sequence. If there are multiple correct answers, you can print any of them. If the answer is \\"NO\\", there\'s no need for further output.","solution":"def can_rearrange(k, t, sequence): from collections import Counter import heapq counter = Counter(sequence) max_heap = [(-count, num) for num, count in counter.items()] heapq.heapify(max_heap) total_count = sum(counter.values()) most_common_count = -max_heap[0][0] if most_common_count > (total_count + 1) // 2: return \\"NO\\" res = [] prev = None while max_heap: count1, num1 = heapq.heappop(max_heap) res.append(num1) if prev: heapq.heappush(max_heap, prev) prev = None if count1 + 1 < 0: prev = (count1 + 1, num1) return \\"YES\\", res # Input example k = 6 t = 5 sequence = [1, 1, 1, 2, 2, 3] result = can_rearrange(k, t, sequence) if result[0] == \\"YES\\": print(result[0]) print(\' \'.join(map(str, result[1]))) else: print(result[0])"},{"question":"Polycarp has recently started learning about sequences. He is particularly interested in finding subsequences of a given sequence. A subsequence of a sequence is derived by deleting some or none of the elements without changing the order of the remaining elements. Polycarp is specifically interested in finding the longest increasing subsequence (LIS) of a given sequence of integers. An increasing subsequence is a subsequence where each element is strictly greater than the preceding one. Your task is to write a program to determine the length of the longest increasing subsequence of a given sequence of integers. The first line of input contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the sequence. Output a single integer, the length of the longest increasing subsequence. **Example** Input: ``` 6 10 9 2 5 3 7 101 18 ``` Output: ``` 3 ``` Explanation: The longest increasing subsequence is [2, 5, 7], which has length 3.","solution":"def length_of_lis(sequence): Returns the length of the longest increasing subsequence in the given sequence of integers. :param sequence: List of integers :return: Length of the longest increasing subsequence if not sequence: return 0 from bisect import bisect_left lis = [] for num in sequence: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"Joseph is a computer scientist who loves working with binary strings. He often challenges himself by transforming strings through a series of operations to achieve specific goals. Joseph has recently come up with a new challenge: given an initial binary string and a target binary string, determine if it\'s possible to transform the initial string into the target string using a series of bit flip operations. A bit flip operation allows you to choose an index i (1 ≤ i ≤ n) in the binary string and toggle the bit at that position (i.e., change \'0\' to \'1\' or \'1\' to \'0\'). Joseph\'s challenge can be represented as follows: Given two binary strings, s1 and s2, of length n, determine if it is possible to transform s1 into s2 using an even number of bit flip operations. Input: - The first line contains an integer n (1 ≤ n ≤ 300000) – the length of the binary strings. - The second line contains the binary string s1 of length n. - The third line contains the binary string s2 of length n. Output: - Print \\"YES\\" (without quotes) if it is possible to transform s1 into s2 using an even number of bit flip operations. Otherwise, print \\"NO\\" (without quotes). Example: Input: 5 11001 10101 Output: YES Explanation: In this example, flipping the bit at index 2 and then at index 5 in the initial string \\"11001\\" results in \\"10101\\". The total number of bit flip operations is even (2), so the output is \\"YES\\".","solution":"def can_transform(s1, s2): Determines if it\'s possible to transform binary string s1 into binary string s2 using an even number of bit flip operations. :param s1: Initial binary string :param s2: Target binary string :return: \\"YES\\" if possible with an even number of bit flips, otherwise \\"NO\\" if len(s1) != len(s2): return \\"NO\\" bit_flips_needed = sum(1 for a, b in zip(s1, s2) if a != b) # It is possible if the number of differing bits is even return \\"YES\\" if bit_flips_needed % 2 == 0 else \\"NO\\""},{"question":"You are given an array consisting of n integers. The array follows a specific pattern: it first strictly increases, then strictly decreases. Your task is to efficiently answer multiple queries regarding the given array. Each query asks you to determine if a given integer x is a peak element of the array. A peak element in this context is defined as an element that is greater than its immediate neighbors. Specifically, element a[i] is a peak if (a[i-1] < a[i] > a[i+1]). The first line contains two integers n and q (3 le n le 10^5; 1 le q le 5 cdot 10^4) — the size of the array and the number of queries, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9), the elements of the array. Each of the next q lines contains a single integer x (1 le x le 10^9) — the value to check for peak status. Output q lines. For each query, output “YES” if the integer x is a peak element in the array, otherwise, output “NO”. Example: ``` Input: 7 3 1 3 8 12 4 2 1 3 12 5 Output: NO YES NO ```","solution":"def find_peak_index(arr): Utility function to find the peak index in a mountain array. left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] < arr[mid + 1]: left = mid + 1 else: right = mid return left def is_peak(arr, x): Returns \\"YES\\" if x is a peak element in the mountain array arr, otherwise \\"NO\\". peak_index = find_peak_index(arr) if arr[peak_index] == x: return \\"YES\\" return \\"NO\\""},{"question":"Luna is planning a new park layout by planting trees in a rectangular grid. She has a grid of size `m x n`, where some cells already have trees planted. Luna wants to plant new trees in some of the empty cells in such a way that the park looks aesthetically pleasing. She has determined that the park will be aesthetically pleasing if there are no more than two consecutive cells with trees in any row, column, or diagonal (both main and anti-diagonal). Given the current state of the grid, help Luna determine the maximum number of trees she can plant while keeping the park aesthetically pleasing. # Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100), the dimensions of the grid. The next `m` lines each contain `n` characters, either \'.\' or \'T\'. A \'.\' indicates an empty cell where a tree can be planted, and \'T\' indicates a cell that already has a tree. # Output Print a single integer representing the maximum number of trees Luna can plant while keeping the park aesthetically pleasing. # Example Input ``` 4 4 T.T. .... .T.. .... ``` Output ``` 6 ``` Explanation Luna can plant trees in the following cells: ``` T.TT .T.. .TT. .T.. ``` This ensures no more than two consecutive trees in any row, column, or diagonal.","solution":"def max_trees(m, n, grid): Function to determine the maximum number of trees that can be planted in the park grid while keeping it aesthetically pleasing. max_trees_count = 0 def is_valid(x, y): # Check horizontal if y > 1 and grid[x][y-1] == \'T\' and grid[x][y-2] == \'T\': return False if y < n-2 and grid[x][y+1] == \'T\' and grid[x][y+2] == \'T\': return False if y > 0 and y < n-1 and grid[x][y-1] == \'T\' and grid[x][y+1] == \'T\': return False # Check vertical if x > 1 and grid[x-1][y] == \'T\' and grid[x-2][y] == \'T\': return False if x < m-2 and grid[x+1][y] == \'T\' and grid[x+2][y] == \'T\': return False if x > 0 and x < m-1 and grid[x-1][y] == \'T\' and grid[x+1][y] == \'T\': return False # Check main diagonal if x > 1 and y > 1 and grid[x-1][y-1] == \'T\' and grid[x-2][y-2] == \'T\': return False if x < m-2 and y < n-2 and grid[x+1][y+1] == \'T\' and grid[x+2][y+2] == \'T\': return False if x > 0 and y > 0 and x < m-1 and y < n-1 and grid[x-1][y-1] == \'T\' and grid[x+1][y+1] == \'T\': return False # Check anti-diagonal if x > 1 and y < n-2 and grid[x-1][y+1] == \'T\' and grid[x-2][y+2] == \'T\': return False if x < m-2 and y > 1 and grid[x+1][y-1] == \'T\' and grid[x+2][y-2] == \'T\': return False if x > 0 and y < n-1 and x < m-1 and y > 0 and grid[x-1][y+1] == \'T\' and grid[x+1][y-1] == \'T\': return False return True def plant_tree(x, y): nonlocal max_trees_count grid[x][y] = \'T\' max_trees_count += 1 for row in range(m): for col in range(n): if grid[row][col] == \'.\' and is_valid(row, col): plant_tree(row, col) return max_trees_count # Example usage: m, n = 4, 4 grid = [ [\'T\', \'.\', \'T\', \'.\'], [\'.\', \'.\', \'.\', \'.\'], [\'.\', \'T\', \'.\', \'.\'], [\'.\', \'.\', \'.\', \'.\'] ] print(max_trees(m, n, grid)) # Output should be 6"},{"question":"In a kingdom far away, there is a square grid of size n x n with some magical gems placed on it. Each cell of the grid either contains a gem \'G\' or is empty \'.\'. The king wants to harvest the gems but he can collect them only in rectangular regions. You are given the grid configuration of gems. Your task is to determine the maximum number of gems that can be collected by selecting a single rectangular region on the grid. A rectangular region is defined by choosing two rows and two columns, and it includes all the cells that lie within those rows and columns. The first line contains a single integer n (1 ≤ n ≤ 20) — the size of the grid. Each of the next n lines contains n characters, each of them either \'G\' (gem) or \'.\' (empty cell). Print a single integer — the maximum number of gems that can be collected by selecting one rectangular region. # Example Input: ``` 3 .G. G.G .G. ``` Output: ``` 4 ``` # Explanation By selecting the rectangular region defined by rows 1 to 3 and columns 1 to 3, you can collect all 4 gems on the grid.","solution":"def max_gems_collected(n, grid): def preprocess_grid(grid): Preprocess the grid to create a sum table sum_grid = [[0] * n for _ in range(n)] for r in range(n): row_sum = 0 for c in range(n): row_sum += 1 if grid[r][c] == \'G\' else 0 sum_grid[r][c] = row_sum + (sum_grid[r-1][c] if r > 0 else 0) return sum_grid def get_sum(x1, y1, x2, y2, sum_grid): Get the sum of gems in the rectangular region (x1, y1) to (x2, y2) total = sum_grid[x2][y2] if x1 > 0: total -= sum_grid[x1-1][y2] if y1 > 0: total -= sum_grid[x2][y1-1] if x1 > 0 and y1 > 0: total += sum_grid[x1-1][y1-1] return total sum_grid = preprocess_grid(grid) max_gems = 0 for x1 in range(n): for x2 in range(x1, n): for y1 in range(n): for y2 in range(y1, n): max_gems = max(max_gems, get_sum(x1, y1, x2, y2, sum_grid)) return max_gems"},{"question":"Given an undirected graph, we want to determine the number of connected components in the graph. A connected component is a maximal set of vertices such that there is a path between any two vertices in this set. You are provided with multiple test cases to analyze. Each test case consists of a separate graph description. Input: - The first line of the input contains an integer t (1 ≤ t ≤ 10,000) — the number of test cases. - For each test case: - The first line contains two integers ni and mi (1 ≤ ni, mi ≤ 100,000) — the number of vertices and edges, respectively, in the given graph. - The following mi lines describe the edges of the graph. Each line contains two integers u and v (1 ≤ u, v ≤ ni), representing an edge between vertices u and v. It\'s guaranteed that the total number of vertices and edges in all test cases doesn\'t exceed 1,000,000. Output: For each test case, output a single integer — the number of connected components in the given graph. Example: Input: ``` 2 5 3 1 2 2 3 4 5 4 2 1 2 3 4 ``` Output: ``` 2 2 ``` Explanation: - In the first test case, the graph has 3 edges forming two connected components: {1, 2, 3} and {4, 5}. - In the second test case, the graph has 2 edges forming two connected components: {1, 2} and {3, 4}.","solution":"def dfs(node, graph, visited): Depth-First Search (DFS) to traverse the graph and mark all nodes in the same connected component. stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) def count_connected_components(t, test_cases): results = [] for n, m, edges in test_cases: # Initialize adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v in edges: graph[u].append(v) graph[v].append(u) # Array to keep track of visited nodes visited = [False] * (n + 1) connected_components = 0 for node in range(1, n + 1): if not visited[node]: visited[node] = True dfs(node, graph, visited) connected_components += 1 results.append(connected_components) return results"},{"question":"You are given two integers: `N` and `M`. Your task is to generate an `N x M` grid with randomly placed characters \'A\', \'B\', and \'C\'. Ensure that each character appears at least once in the grid. Write a function that takes two integers, `N` and `M`, and returns a list of strings representing the generated grid where each string corresponds to a row in the grid. **Input:** - The first line contains two space-separated integers, `N` and `M` (1 ≤ N, M ≤ 100). **Output:** - Output `N` lines, each containing a string of length `M` consisting of characters \'A\', \'B\', and \'C\'. **Example:** Input: ``` 3 4 ``` Output: ``` ABCA BCAB CABC ``` Note: - The exact output may vary as the characters are placed randomly, but every output must ensure that each character (\'A\', \'B\', and \'C\') appears at least once in the grid.","solution":"import random def generate_grid(N, M): Generates an N x M grid with randomly placed characters \'A\', \'B\', and \'C\'. Ensures each character appears at least once in the grid. characters = [\'A\', \'B\', \'C\'] grid = [] # Pre-fill the grid with random characters for _ in range(N): row = [random.choice(characters) for _ in range(M)] grid.append(\'\'.join(row)) # Ensure each character \'A\', \'B\', \'C\' appears at least once # Place \'A\', \'B\', \'C\' randomly in the grid if they are not present all_chars = set(\'ABC\') present_chars = set(\'\'.join(grid)) missing_chars = all_chars - present_chars for char in missing_chars: i, j = random.randint(0, N-1), random.randint(0, M-1) grid[i] = grid[i][:j] + char + grid[i][j+1:] return grid"},{"question":"You are given two sequences p1, p2, ..., pn and q1, q2, ..., qm consisting of integers. Aniston decides to play an interesting game with them. In this game, she can perform several moves. In each move, she has a choice between two actions: 1. Take any positive integer x and remove x elements from the start or from the end of sequence p. This action costs a units of energy per element removed. 2. Take any positive integer y and remove y elements from the start or from the end of sequence q. This action costs b units of energy per element removed. Aniston starts with k units of energy. The goal is to maximize the total number of elements removed from both sequences without allowing Aniston\'s energy to go negative at any point. The first line of the input contains four integers n, m, k, c (1 ≤ n, m ≤ 105, 1 ≤ k ≤ 3·105, 1 ≤ c ≤ 104). The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 105). The third line contains m integers q1, q2, ..., qm (1 ≤ qi ≤ 105). Print a single integer — the maximum total number of elements that Aniston can remove from both sequences. Example: Input: 5 4 10 3 1 2 3 4 5 6 7 8 9 Output: 6","solution":"def max_elements_to_remove(n, m, k, c, p, q): total_removed = 0 p_index, q_index = 0, 0 while p_index < n and k >= c: k -= c p_index += 1 total_removed += 1 while q_index < m and k >= c: k -= c q_index += 1 total_removed += 1 return total_removed"},{"question":"You are organizing a company party and want to form a dancing circle. There are p men and q women who will participate in the dance. They should stand in a circle in such a way that men and women alternate as much as possible to create an optimal dance formation. For this to be achieved, the number of adjacent pairs (i, j) where i-th and j-th positions (1 ≤ i, j ≤ p + q) contain people of different genders should be maximized. To form the optimal circle, consider the positions to be 1, 2, ..., p + q in a circular manner (i.e., after position p + q, it loops back to position 1). Your task is to determine the arrangement of men and women in the circle to maximize the alternation of genders. The single line of the input contains two integers p and q (1 ≤ p, q ≤ 100), separated by a space. Output a single line of p + q characters, where the i-th character is \\"M\\" if the i-th position should contain a man, and \\"W\\" if it should contain a woman. The number of \\"M\\" characters should equal p and the number of \\"W\\" characters should equal q. If there are multiple optimal solutions, print any of them. For example, for input `3 2`, possible arrangements include \\"MWMWM\\" or \\"WMWMW\\". For input `2 3`, possible arrangements include \\"MWMWM\\" or \\"WMWMW\\".","solution":"def form_dance_circle(p, q): Returns a string representing the optimal arrangement of men (M) and women (W) such that they alternate as much as possible in a circle. arrangement = [] larger = \'M\' if p > q else \'W\' larger_count = max(p, q) smaller = \'W\' if p > q else \'M\' smaller_count = min(p, q) diff = larger_count - smaller_count for i in range(smaller_count): arrangement.append(larger) arrangement.append(smaller) arrangement += [larger] * diff return \'\'.join(arrangement)"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has a weight that can either be 0 or 1. Your task is to find the least-cost path from vertex 1 to vertex n. The cost of a path is defined as the sum of edge weights along this path. If there is no path from vertex 1 to vertex n, return -1. Input format: - The first line contains two integers n and m (2 leq n leq 10^5, 1 leq m leq 2 cdot 10^5), the number of vertices and edges in the graph respectively. - Each of the next m lines contains three integers u, v and w (1 leq u, v leq n, u neq v, w in {0, 1}), representing an edge between vertices u and v with weight w. Output format: - Output a single integer: the least-cost from vertex 1 to vertex n. If there is no such path, output -1. Example: Input: ``` 5 6 1 2 0 2 3 1 3 5 0 1 4 1 4 5 0 2 5 1 ``` Output: ``` 1 ``` Explanation: The least-cost path from vertex 1 to vertex 5 is 1 -> 2 -> 3 -> 5, with a cost of 1.","solution":"from collections import deque, defaultdict def least_cost_path(n, m, edges): Returns the least-cost path from vertex 1 to vertex n, or -1 if no such path exists. graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Use a deque for BFS. Elements are tuples (node, cost) queue = deque([(1, 0)]) visited = [False] * (n + 1) visited[1] = True while queue: node, cost = queue.popleft() if node == n: return cost for neighbor, weight in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, cost + weight)) return -1"},{"question":"A company has a server that coordinates n tasks (numbered from 1 to n) to be executed in a specific order. Each task might depend on several other tasks which must finish before it can start. The company wants to know whether there is a valid way to execute all tasks so that all dependencies are respected. If such an order exists, it\'s called a valid schedule. The input consists of: - The first line containing an integer n (1 ≤ n ≤ 1000), the number of tasks. - The second line containing an integer m (0 ≤ m ≤ 10000), the number of dependencies between tasks. - The next m lines each containing two space-separated integers a and b (1 ≤ a, b ≤ n), indicating that task a must be finished before task b can start. Your task is to determine whether there exists a valid schedule (an ordering of tasks) so that all dependencies are respected. The output should be one line containing either \\"possible\\" if a valid schedule exists, or \\"impossible\\" if it doesn\'t. Example: ``` Input: 4 3 1 2 2 3 3 4 Output: possible ``` ``` Input: 4 4 1 2 2 3 3 4 4 2 Output: impossible ``` (mapping this to topological sorting if you\'ve seen the problem pattern)","solution":"from collections import deque def is_valid_schedule(n, m, dependencies): Determines if there is a valid order to execute all tasks given the dependencies. Args: - n (int): Number of tasks. - m (int): Number of dependencies. - dependencies (list of tuples): Each tuple contains two integers (a, b) meaning task a must be finished before task b. Returns: - str: \\"possible\\" if a valid schedule exists, otherwise \\"impossible\\". # Create an adjacency list for graph representation graph = {i: [] for i in range(1, n+1)} in_degree = {i: 0 for i in range(1, n+1)} # Build the graph for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 # Initialize the queue with all nodes that have no dependencies queue = deque([node for node in in_degree if in_degree[node] == 0]) # Counters for visited nodes visited_count = 0 while queue: node = queue.popleft() visited_count += 1 for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If all tasks are visited, there is a valid schedule; otherwise, it\'s impossible return \\"possible\\" if visited_count == n else \\"impossible\\""},{"question":"The kingdom of Verona is known for its beautiful gardens. Recently, the royal gardener faced a challenge involving a rectangular garden grid of size N x M. Some cells in the grid have a tree planted in them, some have flowers, and some cells are empty. The gardener decided to surround each tree with flowers, if possible. A tree can be surrounded by flowers if there are empty cells adjacent to it in the four cardinal directions (up, down, left, right). If empty cells exist in these directions, the gardener will plant flowers in those cells. The problem is to determine the number of empty cells in the grid that will have flowers planted in them after surrounding all possible trees. You are given the grid as input, where: - \'T\' represents a tree, - \'F\' represents a flower, and - \'.\' represents an empty cell. Your task is to write a program to determine the number of empty cells that will turn into flower cells. # Input - The first line contains two integers N and M (1 ≤ N, M ≤ 500) — the number of rows and columns in the grid. - The next N lines contain M characters each — the representation of the garden grid. # Output - Output a single integer — the number of empty cells that will have flowers planted in them. # Example Input ``` 4 5 ..... .T... ..T.. ..... ``` Output ``` 6 ``` Explanation: - The tree at position (2, 2) can have flowers planted at positions (1, 2), (3, 2), (2, 1), and (2, 3). - The tree at position (3, 3) can have flowers planted at positions (2, 3), (4, 3), (3, 2), and (3, 4). - Hence, the total number of empty cells that will have flowers is 6.","solution":"def count_flower_cells(N, M, grid): def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] count = 0 visited = [[False] * M for _ in range(N)] for i in range(N): for j in range(M): if grid[i][j] == \'T\': for dx, dy in directions: nx, ny = i + dx, j + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True count += 1 return count"},{"question":"You are given a list of n integers where each integer is between 1 and m, inclusive. Additionally, you are given a positive integer k. Your task is to find a subsequence of the list of length k such that the difference between the maximum and minimum elements of this subsequence is minimized. The first line of the input contains three integers n, m, and k (1 ≤ k ≤ n ≤ 5000; 1 ≤ m ≤ 10^9). The second line contains n integers representing the list (1 ≤ each integer ≤ m). The output should be the minimum possible difference between the maximum and minimum elements of any valid subsequence of length k. Example: Input: 6 10 3 10 1 5 3 4 8 Output: 2 Explanation: One possible subsequence of length 3 with the minimum difference is [3, 4, 5], where the difference between the maximum and minimum elements is 2.","solution":"def find_min_difference_subsequence(n, m, k, arr): Finds the minimum difference between the maximum and minimum elements of any subsequence of length k. arr.sort() min_diff = float(\'inf\') for i in range(n - k + 1): min_diff = min(min_diff, arr[i + k - 1] - arr[i]) return min_diff"},{"question":"You are given two strings of the same length consisting of lowercase English letters: `s` and `t`. Your task is to find the minimum number of moves required to make the string `s` equal to `t`. In one move, you can choose any index `i` in the string `s` and replace `s[i]` with any lowercase English letter except `s[i]`. You have to answer `n` independent test cases. The first line of input contains a single integer `n` (`1 <= n <= 1000`) — the number of test cases. The following `2n` lines contain two strings, `s` and `t`, each of length `m` (`1 <= m <= 100`). For each test case, print the answer: the minimum number of moves required to make `s` equal to `t`. Example: Input: ``` 2 abc def xyzz xyyx ``` Output: ``` 3 2 ``` Explanation: In the first test case, you need to replace all three characters (`a` with `d`, `b` with `e`, and `c` with `f`). In the second test case, you only need to replace the third character (`z` with `y`) and the fourth character (`z` with `x`).","solution":"def min_moves_to_equal_strings(test_cases): results = [] for s, t in test_cases: moves = sum(1 for x, y in zip(s, t) if x != y) results.append(moves) return results"},{"question":"You are given a string s which represents a non-negative integer. Your task is to check if the digits of the number can be rearranged to form a power of 2. If such a rearrangement is possible, print \\"YES\\". Otherwise, print \\"NO\\". The first line contains the string s that represents the non-negative integer. The length of the string s is between 1 and 1000. Input: ``` 821 ``` Output: ``` YES ``` Input: ``` 12345 ``` Output: ``` NO ```","solution":"def can_form_power_of_2(s): Returns \\"YES\\" if the digits of the number represented by string s can be rearranged to form a power of 2. Otherwise, returns \\"NO\\". from itertools import permutations num_set = set(\'\'.join(p) for p in permutations(s) if p[0] != \'0\') def is_power_of_2(n): return (n & (n - 1)) == 0 for num in num_set: if is_power_of_2(int(num)): return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of positive integers. A subarray is called \\"balanced\\" if it contains an equal number of even and odd numbers. Your task is to find the length of the longest balanced subarray. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output Print a single integer — the length of the longest balanced subarray. If there is no such subarray, print 0. Example: Input 6 1 2 3 4 5 6 Output 6 Explanation The entire array [1, 2, 3, 4, 5, 6] is balanced because it contains three even and three odd numbers. Example: Input 5 1 2 3 4 5 Output 4 Explanation The longest balanced subarray is [2, 3, 4, 5] which contains two even and two odd numbers.","solution":"def longest_balanced_subarray(n, arr): max_length = 0 for i in range(n): even_count = 0 odd_count = 0 for j in range(i, n): if arr[j] % 2 == 0: even_count += 1 else: odd_count += 1 if even_count == odd_count: max_length = max(max_length, j - i + 1) return max_length"},{"question":"A company has multiple branches represented by nodes in a graph, where each branch is connected to other branches by bidirectional edges representing possible direct communication. The company wishes to implement a new communication protocol for which only a subset of branches, called key branches, need to be able to communicate with each other directly or indirectly. Your task is to determine whether it is possible to select exactly k branches (nodes) such that: 1. All key branches can communicate with each other directly or indirectly. 2. The number of selected branches is exactly k. The first line of input contains a single integer T (1 le T le 50) — the number of test cases. The next lines contain descriptions of the test cases. The first line of each test case contains three integers n, m, and k (1 le n le 1000, 0 le m le 1000, 1 le k le n) — the number of branches (nodes), the number of connections (edges) between branches, and the number of key branches to be selected, respectively. The next m lines contain two integers u and v (1 le u, v le n, u neq v) — indicating that there is an edge between nodes u and v. For each test case, output \\"Yes\\" if it is possible to select exactly k branches so that all key branches can communicate with each other, otherwise print \\"No\\". Example: ``` Input 2 4 3 2 1 2 2 3 3 4 5 5 3 1 2 1 3 3 4 4 5 5 1 Output Yes Yes ```","solution":"def can_select_k_communicating_branches(n, m, k, edges): # Using DFS to find all connected components from collections import defaultdict, deque def find_components(n, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = [] for node in range(1, n+1): if not visited[node]: component = [] stack = [node] while stack: cur = stack.pop() if not visited[cur]: visited[cur] = True component.append(cur) for neighbor in graph[cur]: if not visited[neighbor]: stack.append(neighbor) components.append(component) return components components = find_components(n, edges) for comp in components: if len(comp) >= k: return \\"Yes\\" return \\"No\\" def solve(T, test_cases): answers = [] for n, m, k, edges in test_cases: answers.append(can_select_k_communicating_branches(n, m, k, edges)) return answers"},{"question":"A company wants to increase the productivity of their employees, so they decided to introduce a system where employees can log their working hours and breaks in a structured format. They need a program that can analyze these logs and compute the total working time for each employee, excluding breaks. Each log entry is a string in the following format: ``` [date] [employee_id] start:HH:MM stop:HH:MM ``` - `[date]` is in the format `YYYY-MM-DD`. - `[employee_id]` is a unique string representing an employee. - `start:HH:MM` represents the timestamp when the employee started working. - `stop:HH:MM` represents the timestamp when the employee stopped working. Moreover, some logs indicate breaks which appear in the following format: ``` [date] [employee_id] break_start:HH:MM break_stop:HH:MM ``` - `break_start:HH:MM` represents the timestamp when the employee started their break. - `break_stop:HH:MM` represents the timestamp when the employee ended their break. All times are given in 24-hour format. Write a function `total_working_time(n, logs)` that takes an integer `n` representing the number of log entries and a list of `logs` containing the log entries. The function should output the total working time for each employee in the format `[employee_id]: HH:MM`. # Input: - An integer `n` (1 ≤ n ≤ 10^4) – number of log entries. - A list of `n` strings – each string is a log entry. # Output: - A list of strings – each string in the format `[employee_id]: HH:MM`, representing the total working time for each employee. # Example: Input: ``` 6 [ \\"2023-05-01 emp1 start:09:00 stop:12:30\\", \\"2023-05-01 emp1 break_start:10:00 break_stop:10:15\\", \\"2023-05-01 emp2 start:08:00 stop:16:00\\", \\"2023-05-01 emp2 break_start:12:00 break_stop:13:00\\", \\"2023-05-01 emp2 break_start:15:00 break_stop:15:15\\", \\"2023-05-01 emp1 start:13:00 stop:17:00\\" ] ``` Output: ``` [ \\"emp1: 07:15\\", \\"emp2: 06:45\\" ] ``` # Explanation: In the given example: - `emp1` has logged working times: - 09:00 - 12:30 (3 hours 30 minutes) - 13:00 - 17:00 (4 hours) Break time: - 10:00 - 10:15 (15 minutes) Total working time for `emp1`: (3 hours 30 minutes + 4 hours) - 15 minutes = 07:15. - `emp2` has logged working times: - 08:00 - 16:00 (8 hours) Break times: - 12:00 - 13:00 (1 hour) - 15:00 - 15:15 (15 minutes) Total working time for `emp2`: 8 hours - (1 hour + 15 minutes) = 06:45.","solution":"from datetime import datetime, timedelta def parse_time(time_str): return datetime.strptime(time_str, \\"%H:%M\\") def total_working_time(n, logs): work_times = {} break_times = {} for log in logs: parts = log.split() date = parts[0] employee_id = parts[1] time_type = parts[2] if time_type.startswith(\\"start\\"): start_time = parse_time(parts[2].split(\\":\\")[1] + \\":\\" + parts[2].split(\\":\\")[2]) stop_time = parse_time(parts[3].split(\\":\\")[1] + \\":\\" + parts[3].split(\\":\\")[2]) duration = stop_time - start_time if employee_id not in work_times: work_times[employee_id] = timedelta() work_times[employee_id] += duration elif time_type.startswith(\\"break_start\\"): break_start_time = parse_time(parts[2].split(\\":\\")[1] + \\":\\" + parts[2].split(\\":\\")[2]) break_stop_time = parse_time(parts[3].split(\\":\\")[1] + \\":\\" + parts[3].split(\\":\\")[2]) break_duration = break_stop_time - break_start_time if employee_id not in break_times: break_times[employee_id] = timedelta() break_times[employee_id] += break_duration result = [] for employee_id, work_time in work_times.items(): total_break_time = break_times.get(employee_id, timedelta()) actual_work_time = work_time - total_break_time hours, remainder = divmod(actual_work_time.seconds, 3600) minutes = remainder // 60 result.append(f\\"{employee_id}: {hours:02}:{minutes:02}\\") return result"},{"question":"Alice and Bob are playing a game with an array of integers. The game proceeds in turns, with Alice going first. Each player must choose an element from either end of the array and remove it. The game ends when there are no more elements left to remove from the array. The goal of each player is to maximize the sum of the elements they have chosen. Write a function `alice_bob_game(arr)` that returns two integers: the total sum of elements chosen by Alice and by Bob, respectively, if both players play optimally. The function signature is: ```python def alice_bob_game(arr: List[int]) -> Tuple[int, int]: ``` # Input - `arr`: A list of integers representing the array, with `1 ≤ len(arr) ≤ 1000` and `-1000 ≤ arr[i] ≤ 1000`. # Output - A tuple of two integers, the first being the total sum of elements chosen by Alice, and the second being the total sum of elements chosen by Bob. # Example ```python alice_bob_game([4, 7, 2, 3]) Output: (10, 6) ``` In this example, Alice and Bob will choose elements as follows: - Alice takes 4 (from the start), Bob takes 3 (from the end). - Alice takes 7 (from the start), Bob takes 2 (from the end). Alice\'s total is 4 + 7 = 11, and Bob\'s total is 3 + 2 = 5.","solution":"from typing import List, Tuple def alice_bob_game(arr: List[int]) -> Tuple[int, int]: def optimal_choice(l: int, r: int, is_alice: bool, dp: dict) -> Tuple[int, int]: if l > r: return (0, 0) if (l, r, is_alice) in dp: return dp[(l, r, is_alice)] if is_alice: take_left = optimal_choice(l + 1, r, not is_alice, dp) take_right = optimal_choice(l, r - 1, not is_alice, dp) if arr[l] + take_left[0] > arr[r] + take_right[0]: result = (arr[l] + take_left[0], take_left[1]) else: result = (arr[r] + take_right[0], take_right[1]) else: take_left = optimal_choice(l + 1, r, not is_alice, dp) take_right = optimal_choice(l, r - 1, not is_alice, dp) if arr[l] + take_left[1] > arr[r] + take_right[1]: result = (take_left[0], arr[l] + take_left[1]) else: result = (take_right[0], arr[r] + take_right[1]) dp[(l, r, is_alice)] = result return result dp = {} alice_score, bob_score = optimal_choice(0, len(arr) - 1, True, dp) return alice_score, bob_score"},{"question":"You are given a tree with n nodes, rooted at node 1. Each node has a value assigned to it. The value of node i is represented as v[i]. For any pair of nodes (u, v), we define the distance between them as the number of edges in the path connecting them. You need to handle q queries on this tree. Each query is of the following form: - \\"1 u x\\": Update the value of node u to x. - \\"2 u v\\": Find the maximum value on the path from node u to node v. Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 100000) - the number of nodes and the number of queries, respectively. - The second line contains n integers v[1], v[2], ..., v[n] (1 ≤ v[i] ≤ 100000) which represent the initial values of the nodes. - The next n-1 lines each contain two integers a and b (1 ≤ a, b ≤ n), meaning there is an edge between nodes a and b. - The next q lines describe the queries. Each query is given in the form \\"1 u x\\" (1 ≤ u ≤ n, 1 ≤ x ≤ 100000) or \\"2 u v\\" (1 ≤ u, v ≤ n). Output: For each query of the second type, output the maximum value on the path from node u to node v. Example: Input: ``` 5 5 1 3 5 7 9 1 2 1 3 2 4 2 5 2 3 5 1 3 8 2 1 4 2 3 5 ``` Output: ``` 7 9 8 9 ``` Explanation: - Initially, the values of the nodes are [1, 3, 5, 7, 9]. - After the update \\"1 3 8\\", the values of the nodes become [1, 3, 8, 7, 9]. - For the query \\"2 3 5\\", the path between nodes 3 and 5 includes nodes [3, 1, 2, 5]. The maximum value along this path is 9. - For the query \\"2 1 4\\", the path between nodes 1 and 4 includes nodes [1, 2, 4]. The maximum value along this path is 7. - For the query \\"2 3 5\\", considering the updated value, the path between nodes 3 and 5 includes nodes [3, 1, 2, 5]. The maximum value along this path is 9.","solution":"class Tree: def __init__(self, n, values): self.n = n self.values = [0] + values self.graph = [[] for _ in range(n + 1)] def add_edge(self, a, b): self.graph[a].append(b) self.graph[b].append(a) def update_value(self, u, x): self.values[u] = x def find_path(self, u, v): self.visited = [False] * (self.n + 1) self.parent = [-1] * (self.n + 1) self._dfs(u, -1) path = [] current = v while current != -1: path.append(current) current = self.parent[current] path.reverse() return path def _dfs(self, node, par): self.visited[node] = True self.parent[node] = par for neighbor in self.graph[node]: if not self.visited[neighbor]: self._dfs(neighbor, node) def max_value_on_path(self, u, v): path = self.find_path(u, v) return max(self.values[node] for node in path) def process_queries(n, values, edges, queries): tree = Tree(n, values) for a, b in edges: tree.add_edge(a, b) result = [] for query in queries: if query[0] == 1: tree.update_value(query[1], query[2]) elif query[0] == 2: result.append(tree.max_value_on_path(query[1], query[2])) return result"},{"question":"In a world where every character is known by its unique integer identifier, converting textual messages into numerical representations becomes essential for various data processing tasks. You have been tasked with developing a system that can decode a sequence of numbers back into its original string. A character set is defined where each character has an associated unique number between 1 and 30 (inclusive). These numbers represent: - `1` to `26` correspond to the letters \'A\' to \'Z\' (Uppercase English characters). - `27` to `30` correspond to the symbols \' \', \'.\', \',\', \'?\' (a space, a period, a comma, and a question mark respectively). You need to write a function that takes a list of integers and returns the decoded message. Each integer in the list is guaranteed to be between 1 and 30. **Function Signature:** ```python def decode_message(numbers: List[int]) -> str: ``` **Input:** - `numbers`: A list of integers where each integer is between 1 and 30 (inclusive) representing the encoded message. **Output:** - A string that represents the decoded message. **Example 1:** ```python numbers = [8, 5, 12, 12, 15, 27, 23, 15, 18, 12, 4] assert decode_message(numbers) == \\"HELLO WORLD\\" ``` **Example 2:** ```python numbers = [1, 13, 1, 26, 9, 14, 7, 27, 9, 19, 27, 6, 21, 14] assert decode_message(numbers) == \\"AMAZING IS FUN\\" ``` **Example 3:** ```python numbers = [30, 1, 9, 14, 27, 20, 8, 5, 27, 12, 1, 19, 20, 27, 17, 21, 5, 19, 20, 9, 15, 14] assert decode_message(numbers) == \\"?AIN THE LAST QUESTION\\" ``` **Constraints:** - The `numbers` list will contain at least one element. - Each integer in the `numbers` list will be an integer between 1 and 30 (inclusive).","solution":"def decode_message(numbers): Decodes a list of integers into a string based on a defined character set. Args: numbers (List[int]): List of integers where each integer is between 1 and 30. Returns: str: Decoded string message. # Mapping of numbers to characters num_to_char = { i + 1: chr(65 + i) for i in range(26) # Maps 1-26 to \'A\'-\'Z\' } num_to_char.update({ 27: \' \', 28: \'.\', 29: \',\', 30: \'?\' # Maps 27-30 to space, period, comma, question mark }) # Decode the message return \'\'.join(num_to_char[num] for num in numbers)"},{"question":"In an amusement park, there is a roller coaster designed with a series of checkpoints. The roller coaster can perform a series of jumps in one direction either forward or backward. The excitement of the ride depends on the variety of checkpoints it visits. You are given a list of integers representing the height of checkpoints in the order they appear on the roller coaster track. The excitement level of a segment of the roller coaster ride is defined as the absolute difference between the maximum and minimum heights in that segment. Your task is to determine the maximum excitement level for any segment within the roller coaster ride. The first line contains a single integer n (1 ≤ n ≤ 100,000) which indicates the number of checkpoints. The second line contains n space-separated integers representing the heights of the checkpoints. Each height is an integer between 1 and 1,000,000. Print a single integer representing the maximum excitement level for any segment of the roller coaster ride. Example: Input: 5 1 2 3 4 5 Output: 4 Explanation: The maximum excitement level is achieved in the segment from checkpoint 1 to checkpoint 5, where the heights range from 1 to 5. Therefore, the excitement level is 5 - 1 = 4.","solution":"def maximum_excitement_level(n, heights): Determines the maximum excitement level for any segment by calculating the maximum difference between the maximum and minimum heights in that segment. if n == 0: return 0 max_height = max(heights) min_height = min(heights) return max_height - min_height # Read the input values # For testing purpose, we define an example input n = 5 heights = [1, 2, 3, 4, 5] # Calling the function with the input values result = maximum_excitement_level(n, heights) print(result)"},{"question":"There are n books on a shelf, each with varying thickness. The books are represented by a list of integers where the i-th integer denotes the thickness of the i-th book. You are allowed to rearrange the books so that they form a continuous subarray of specific thickness. Define a rearrangement of the books as optimal if the sum of thicknesses in the chosen subarray exactly equals to a given number S. If it is not possible to have such a subarray, return -1. The task is to find the length of the shortest possible subarray that meets this criterion. The first line contains two integers n and S (1 le n le 10^5, 1 le S le 10^9) — the number of books and the desired sum of the subarray, respectively. The second line contains n space separated integers t_1, t_2, dots, t_n (1 le t_i le 10^4) — the thicknesses of the books. Print one integer — the length of the shortest possible subarray with a sum of exactly S, or -1 if no such subarray exists. In the first example, given n = 5 and S = 12, and the thicknesses t = [5, 1, 3, 6, 2], the shortest subarray sum of 12 is [1, 3, 6, 2] which has length 4. In the second example, given n = 5 and S = 7, and the thicknesses t = [1, 2, 3, 4, 5], the shortest subarray sum of 7 is [2, 3, 2] which has length 3. In the third example, given n = 3 and S = 15, and the thicknesses t = [1, 2, 3], there is no subarray summing up to 15, so the answer is -1.","solution":"def shortest_subarray_length(arr, n, S): This function returns the length of the shortest subarray with a sum equal to S. If no such subarray exists, it returns -1. from collections import defaultdict current_sum = 0 min_length = float(\'inf\') sums_map = defaultdict(int) sums_map[0] = -1 # To handle the case when the subarray starts from index 0 for i in range(n): current_sum += arr[i] if (current_sum - S) in sums_map: min_length = min(min_length, i - sums_map[current_sum - S]) sums_map[current_sum] = i return min_length if min_length != float(\'inf\') else -1 # Example usage arr = [5, 1, 3, 6, 2] n = 5 S = 12 print(shortest_subarray_length(arr, n, S)) # Output: 4"},{"question":"Johnathan is organizing a relay marathon that involves multiple runners. Each runner has a positive integer value representing their stamina level, s_i. Johnathan wishes to arrange the runners into teams such that each team’s combined stamina meets or exceeds a specific threshold, S. Each team must consist of exactly 3 runners. To help Johnathan, you need to compute the maximum number of complete teams that can be formed given the constraints. The first line contains the number of independent test cases, T (1 leq T leq 10^5). Next 2T lines contain the descriptions of the test cases. For each test case, the first line contains two integers N and S (3 leq N leq 10^5, 1 leq S leq 10^9) where N is the number of runners and S is the stamina threshold. The second line contains N integers s_1, s_2, ldots, s_N (1 leq s_i leq 10^9) where s_i is the stamina level of the i-th runner. Print T numbers, each in a new line, where each number is the maximum number of teams that can be formed in the corresponding test case. # Example **Input:** ``` 2 6 15 5 6 7 8 9 10 7 20 1 2 3 4 5 6 7 ``` **Output:** ``` 2 0 ``` # Explanation: In the first test case, we can form two teams with the following compositions: - Team 1: runners with stamina levels [7, 8, 10] (Sum = 25) - Team 2: runners with stamina levels [5, 9, 10] (Sum = 24) In the second test case, it\'s impossible to form any team of exactly 3 runners whose combined stamina is at least 20. Thus, 0 teams can be formed.","solution":"def max_teams(T, test_cases): results = [] for case in test_cases: N, S, staminas = case staminas.sort(reverse=True) count = 0 i = 0 while i <= N - 3: if staminas[i] + staminas[i+1] + staminas[i+2] >= S: count += 1 i += 3 else: i += 1 results.append(count) return results"},{"question":"Given a binary tree, determine if it is height-balanced. A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than 1. Implement a function that takes the root node of the binary tree as input and returns a boolean indicating whether the tree is height-balanced. # Input - The input is a single line containing the serialized form of a binary tree. Null nodes are represented by the \'#\' character. For example, the serialized form of the following tree: ``` 1 / 2 3 / 4 5 ``` would be \\"1 2 3 4 5 # # # # # #\\". # Output - The output should be a single boolean value: True if the binary tree is height-balanced, and False otherwise. # Example Input ``` 1 2 3 4 5 # # # # # # ``` Output ``` True ``` Input ``` 1 2 3 4 # # # 5 # # # ``` Output ``` False ``` # Constraints - The number of nodes in the binary tree is between 1 and 100,000. - The value of each node is a positive integer between 1 and 1,000,000. Note: The input format is given in a serialized form to avoid the complex handling of actual binary tree structures in a programming assessment. You can assume that the input tree will always be valid.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def isBalanced(root: TreeNode) -> bool: Determine if a binary tree is height-balanced. def check_balance(node): if not node: return 0, True left_height, left_balanced = check_balance(node.left) right_height, right_balanced = check_balance(node.right) current_height = 1 + max(left_height, right_height) if abs(left_height - right_height) > 1 or not left_balanced or not right_balanced: return current_height, False return current_height, True _, balanced = check_balance(root) return balanced def deserialize(data: str) -> TreeNode: Deserialize string to binary tree. if not data: return None nodes = data.split() if nodes[0] == \'#\': return None root = TreeNode(int(nodes[0])) queue = [root] i = 1 while queue and i < len(nodes): current = queue.pop(0) if nodes[i] != \'#\': current.left = TreeNode(int(nodes[i])) queue.append(current.left) i += 1 if i < len(nodes) and nodes[i] != \'#\': current.right = TreeNode(int(nodes[i])) queue.append(current.right) i += 1 return root"},{"question":"Given an array of integers, you need to segregate the array into two parts. All the even numbers should come before all the odd numbers in the array. The relative order of both the even and odd numbers should remain the same as they were in the input array. Write a function `segregateEvenOdd(arr)` that takes an array of integers as input and modifies the array in place such that all even numbers appear before all the odd numbers. The relative order of the even and odd numbers in the original array must be preserved. **Function Signature:** ```python def segregateEvenOdd(arr: List[int]) -> None: ``` **Input:** - `arr`: A list of integers, where `1 <= len(arr) <= 10^5` and each integer is in the range `-10^9 <= arr[i] <= 10^9`. **Output:** - Modify the given list `arr` in place. **Examples:** ```python arr = [12, 34, 45, 9, 8, 90, 3] segregateEvenOdd(arr) print(arr) # Output: [12, 34, 8, 90, 45, 9, 3] arr = [1, 3, 5, 7] segregateEvenOdd(arr) print(arr) # Output: [1, 3, 5, 7] arr = [2, 4, 6, 8] segregateEvenOdd(arr) print(arr) # Output: [2, 4, 6, 8] ``` **Notes:** 1. The function should modify the list `arr` in place without using extra space for another array. 2. The function should have a time complexity of O(n) where n is the length of the array. Consider edge cases, such as an array that is already segregated, arrays that only contain odd/even numbers, or arrays with a single element.","solution":"from typing import List def segregateEvenOdd(arr: List[int]) -> None: Segregates even numbers to the left side and odd numbers to the right side. Modifies the given list in place. n = len(arr) even_index = 0 for i in range(n): if arr[i] % 2 == 0: arr[i], arr[even_index] = arr[even_index], arr[i] even_index += 1"},{"question":"The city transport authority wants to analyze the efficiency of its bus routes. They have collected data about n bus routes in the city, where each route is represented by a list of bus stops. The stops are identified using distinct integers from 1 to m. The authority needs to determine if there exists a transfer station — a bus stop where passengers can transfer from one bus route to both another two different routes. Specifically, given n bus routes, each represented as a list of bus stops, determine if there is a bus stop that is present in at least 3 different bus routes. If there is such a bus stop, print \\"YES\\" and the bus stop number. If there isn\'t, print \\"NO\\". The input consists of: - The first line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 500), where n is the number of bus routes and m is the number of bus stops. - The next n lines each describe a bus route. Each route description starts with an integer k_i (1 ≤ k_i ≤ m) — the number of bus stops on the route, followed by k_i integers — the identifiers of bus stops on the route. The output should be: - \\"YES\\" followed by the bus stop number, if such a bus stop exists. - \\"NO\\" if no such bus stop exists. Example: Input: ``` 4 10 6 1 2 3 4 5 6 3 3 7 8 5 2 3 8 9 10 4 1 7 8 4 ``` Output: ``` YES 8 ``` Explanation: In the given example, bus stop number 8 is present in three different routes (the second, third, and fourth routes), so the output is \\"YES 8\\". If there were no bus stops appearing in at least three different bus routes, the output would be \\"NO\\".","solution":"def find_transfer_station(n, m, routes): Determine if there is a bus stop present in at least 3 different bus routes. Parameters: n (int): Number of bus routes. m (int): Number of bus stops. routes (list of lists): List of bus routes, where each route is represented as a list of bus stops. Returns: str: \\"YES\\" followed by the bus stop number if such a bus stop exists, otherwise \\"NO\\". from collections import defaultdict stop_count = defaultdict(int) for route in routes: unique_stops = set(route) # To count only unique stops per route for stop in unique_stops: stop_count[stop] += 1 for stop, count in stop_count.items(): if count >= 3: return f\\"YES {stop}\\" return \\"NO\\" # Example n, m = 4, 10 routes = [ [1, 2, 3, 4, 5, 6], [3, 7, 8], [2, 3, 8, 9, 10], [1, 7, 8, 4] ] print(find_transfer_station(n, m, routes))"},{"question":"You are given an array `arr` of n integers, where each integer represents the height of a certain building in a city skyline. A beautiful city skyline is defined as a non-decreasing sequence of building heights from the leftmost building to the rightmost building. Your task is to determine the minimum number of buildings that need to be demolished in order to make the skyline beautiful. The first line of the input contains an integer n (1 ≤ n ≤ 1000) - the number of buildings. The second line contains n integers arr1, arr2, ..., arrn (1 ≤ arri ≤ 1000) - the heights of the buildings. You need to output a single integer, the minimum number of buildings that need to be demolished to achieve a non-decreasing sequence of buildings. In the first sample, if we demolish the building with heights 4 and 3, the remaining buildings\' heights form a non-decreasing sequence: [1, 2, 2]. In the second sample, we can simply keep the buildings with heights [1, 2, 3, 4] and we need to demolish the buildings with heights 5 and 3 to achieve the non-decreasing sequence. Example 1: Input: 6 1 2 4 3 2 2 Output: 2 Example 2: Input: 5 1 2 3 5 4 Output: 1","solution":"def min_demolitions_to_beautiful_skyline(arr): Returns the minimum number of buildings to be demolished to achieve a non-decreasing sequence. n = len(arr) lis = [1] * n # Initialize LIS array with 1 # Compute the length of LIS ending at each index of `arr` for i in range(1, n): for j in range(0, i): if arr[i] >= arr[j]: lis[i] = max(lis[i], lis[j] + 1) # Get the length of the longest increasing subsequence max_lis_len = max(lis) # The minimum number of demolitions needed return n - max_lis_len"},{"question":"You are given an operation that represents a single-qubit unitary transformation: either the Rx gate or the H (Hadamard) gate. The operation will have Adjoint and Controlled variants defined. Your task is to perform the necessary operations and measurements to determine which unitary it was and return 0 if it was the Rx gate or 1 if it was the H gate. You are allowed to apply the given operation and its adjoint/controlled variants exactly once (you can pass to it any rotation angle that you choose). You need to implement an operation which takes a single-qubit operation unitary as an input and returns an integer. The operation unitary will accept two parameters (similarly to Rx and H intrinsic gates): the first parameter is the rotation angle and the second parameter is the qubit to which the rotation is applied. Your code should have the following signature: ```plaintext function IdentifyGate(unitary: (Float, Qubit) => Unit): Int ```","solution":"def identify_gate(unitary): Identifies whether the unitary operation is Rx or H gate. Returns 0 if it is Rx, 1 if it is H. Parameters: unitary (function): A function representing the unitary operation to be identified. It takes a rotation angle and a qubit as parameters. # Mock objects to simulate qubit and measured outcome class MockQubit: def __init__(self): self.state = \\"initial\\" class MockMeasurement: def __call__(self, qubit): return 0 if qubit.state == \\"rx_applied\\" else 1 # Create a mock qubit qubit = MockQubit() # Apply the unitary with 0 rotation angle to the qubit unitary(0, qubit) # Simulate the measurement measurement = MockMeasurement() result = measurement(qubit) # Determine the gate based on measurement if result == 0: return 0 # Rx gate else: return 1 # H gate"},{"question":"In a parallel universe, a new kind of game with bouncing balls named \\"BounceMaster\\" has taken the world by storm. In this game, there is a vertical line, and balls are dropped one by one from a certain height. Each ball has a specific range it can cover as it bounces—determined by its bounce height. If a ball comes in contact with another ball within its range, it will bound over without touching the ground, and if it lands on the ground, it will stay there permanently. For instance, consider the scenario when three balls are dropped at heights 5, 7, and 3 units sequentially, each with ranges [4, 6], [5, 8], and [1, 2] respectively. The first ball will land and stay at 5 units height. The second ball will land on top of the first ball\'s range at 7 units. The third ball will avoid both the previous balls by bouncing and landing directly on the ground at 3 units. After each ball drop, determine the number of balls that remain on the ground. The first line contains a single integer n (1 le n le 10^5) — the number of balls. The i-th of the following n lines contains two integers h_i and r_i (1 le h_i, r_i le 10^9) — the height from which the i-th ball is dropped and the range it can bounce from that height. Output n integers. The i-th integer should be the number of balls that are left on the ground after the i-th ball drop. # Example: Input: ``` 3 5 1 7 2 3 0 ``` Output: ``` 1 2 3 ```","solution":"def count_balls_on_ground(ball_drops): Determines the number of balls on the ground after each ball drop. :param ball_drops: List of tuples, where each tuple contains (height, range) :return: List of integers representing the number of balls on the ground after each drop. balls_on_ground = [] current_ground_heights = [] for h, r in ball_drops: solid_ground = True for ground_height in current_ground_heights: if abs(ground_height - h) <= r: solid_ground = False break if solid_ground: current_ground_heights.append(h) balls_on_ground.append(len(current_ground_heights)) return balls_on_ground"},{"question":"Given a collection of 10 different positive integers, where any two numbers co-prime with each other sum up to a composite number, determine the minimum possible value of the largest number in the collection.","solution":"def minimum_largest_number_in_collection(numbers): sorted_numbers = sorted(numbers) return sorted_numbers[-1] # Assuming the collection of first 10 distinct odd positive integers numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"},{"question":"You have an array of n integers and you need to determine if it is possible to choose a subset of these integers such that their sum is exactly k. Here, each number from the array can only be used once in the subset. A single line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000). Output \\"YES\\" if there exists such a subset, otherwise print \\"NO\\".","solution":"def is_subset_sum(arr, n, sum): Determines if there exists a subset of the array `arr` of size `n` that adds up to `sum`. :param arr: List of integers. :param n: Integer, length of the list arr. :param sum: Integer, the target sum. :return: String \\"YES\\" if such subset exists, otherwise \\"NO\\". dp = [[False for _ in range(sum + 1)] for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, sum + 1): if j < arr[i - 1]: dp[i][j] = dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] return \\"YES\\" if dp[n][sum] else \\"NO\\""},{"question":"You are given an array of integers representing the heights of buildings along a street. The buildings form a contiguous block (no gaps between them), and you need to determine the maximum rectangular area that can be formed using these buildings. You can consider that each building has a width of 1 unit. Your task is to write a program that computes the largest possible rectangular area formed from any number of contiguous buildings. The first line contains one integer n (1 le n le 10^5) — the number of buildings. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^5) — the heights of the buildings. Output one integer — the largest rectangular area possible with the given buildings. # Example Input: 8 2 1 5 6 2 3 5 3 Output: 12 # Explanation In the example test case, the best course of action is to select buildings with heights 5 and 6 (3rd and 4th buildings), which form a rectangle of area 5 times 2 = 10. However, another option with a larger area would be to select buildings with heights 2 (5th and 6th buildings), which form a rectangle of area 2 times 3 = 6. The largest area rectangle in this case covers the 3rd, 4th, and 5th buildings (forming a rectangle of height 2 and width 3, resulting in an area of 2 times 3 = 6). The maximum possible rectangular area is 12.","solution":"def largest_rectangle_area(heights): Calculate the largest rectangular area in a histogram with given heights. heights: List of integers representing the heights of buildings Return: Integer, the largest rectangular area possible with the given buildings stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Consider you are developing a simulation game where the player controls the movement of multiple robots on a square grid of size n × n. The player can issue a series of commands to move the robots in different directions. Each command moves all robots one step in the specified direction (up, down, left, right). The robots can move off the grid, and once a robot moves off, it is removed from the simulation. Your task is to determine the final positions of the robots after all commands are executed, provided they are still on the grid. For simplicity, assume the initial positions of the robots and the commands are such that no two robots occupy the same position at the start and no robot will ever move to a cell occupied by another robot. Input: - The first line contains two integers n and r (1 ≤ n ≤ 1000, 1 ≤ r ≤ 100), which are the size of the grid and the number of robots, respectively. - The next r lines each contain two integers x and y (1 ≤ x, y ≤ n), specifying the initial coordinates of each robot on the grid. - The next line contains a string of commands consisting of characters \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right), representing the movements. Output: - Print the final positions of the robots that remain on the grid, one per line. Each position should be given as two integers representing the row and column. Example: Input: 5 3 1 1 2 3 4 4 UDLR Output: 2 1 1 2 4 4 Explanation: - Initially, there are 3 robots at positions (1, 1), (2, 3), and (4, 4). - After the \'U\' command, their positions are (0, 1), (1, 3), and (3, 4). Robot at (0, 1) moves off the grid. - After the \'D\' command, the positions are (2, 3) and (4, 4). - After the \'L\' command, the positions are (2, 2) and (4, 3). - After the \'R\' command, the positions are (2, 3) and (4, 4). Thus the remaining robots\' final positions are (2, 3) and (4, 4).","solution":"def move_robots(n, r, initial_positions, commands): directions = { \'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1) } positions = initial_positions.copy() for command in commands: dx, dy = directions[command] new_positions = [] for x, y in positions: new_x, new_y = x + dx, y + dy if 1 <= new_x <= n and 1 <= new_y <= n: new_positions.append((new_x, new_y)) positions = new_positions return positions"},{"question":"You are tasked with managing a transportation network within a city. The network consists of intersections connected by one-way roads. Your goal is to determine the shortest time required to travel from a given starting intersection to a destination intersection using the roads. Each road has a certain travel time associated with it. There might be several roads between the same pair of intersections, but with different travel times. You are given the number of intersections and roads in the city, the starting intersection and the destination intersection. Your task is to compute the shortest time needed to travel from the starting intersection to the destination intersection. If it is not possible to travel from the start to the destination, you should return -1. The first line of the input contains four integers n, m, s, and d (1 le n le 1000, 0 le m le 10000, 1 le s, d le n) — the number of intersections, the number of roads, the starting intersection, and the destination intersection, respectively. The next m lines describe the roads, each line containing three integers u, v, and w (1 le u, v le n, u ne v, 0 le w le 1000), where u is the starting intersection of the road, v is the ending intersection of the road, and w is the travel time along that road. Output a single integer — the shortest time to travel from the starting intersection to the destination intersection, or -1 if it is not possible. **Example:** Input: ``` 5 6 1 5 1 2 2 1 3 5 2 3 1 3 4 1 2 4 2 4 5 3 ``` Output: ``` 7 ``` In the example above, the shortest path from intersection 1 to intersection 5 can be taken as follows: 1 -> 2 -> 4 -> 5 with a total travel time of 7 units.","solution":"import heapq def shortest_travel_time(n, m, s, d, roads): graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) # Dijkstra\'s Algorithm heap = [(0, s)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[s] = 0 while heap: current_distance, current_node = heapq.heappop(heap) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return distances[d] if distances[d] != float(\'inf\') else -1 # Example usage: # result = shortest_travel_time(5, 6, 1, 5, [(1, 2, 2), (1, 3, 5), (2, 3, 1), (3, 4, 1), (2, 4, 2), (4, 5, 3)]) # print(result) # Output: 7"},{"question":"You are given an array of n integers where each element represents the height of a building. The width of each building is 1. The goal is to find the largest rectangular area that can be formed by any contiguous buildings in a histogram where the heights of the bars represent the heights of buildings. Write a function `largestRectangleArea` that takes a list of integers, `heights`, as input and returns an integer representing the area of the largest rectangle. # Function Signature ```python def largestRectangleArea(heights: List[int]) -> int: ``` # Input - A list of integers `heights` with length `n` (1 ≤ n ≤ 105) where each `heights[i]` (1 ≤ heights[i] ≤ 104) represents the height of a building. # Output - A single integer representing the area of the largest rectangle. # Example ```python largestRectangleArea([2,1,5,6,2,3]) ``` Output: 10 # Explanation The largest rectangle has height 2 and spans from the second building to the fifth building (1-based index). Thus the area is 2 * 5 = 10. # Constraints Your solution should run in O(n) time complexity making use of appropriate data structures such as stacks to efficiently find the largest rectangle area.","solution":"def largestRectangleArea(heights): This function determines the area of the largest rectangle that can be formed in a histogram represented by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"An e-commerce company is having a big sale and offering various discounts on different items. You are given a list of prices of items in a store and two different discount schemes: 1. **Percentage Discount**: Apply a discount of \'x\' percent on the price of each item. 2. **Flat Discount**: Apply a flat discount of \'d\' dollars on the price of each item. You need to determine and return the best price for each item after applying both discount schemes individually and choosing the lower price between the two schemes. # Input: - The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `m` (1 ≤ m ≤ 10^5), where `n` is the number of items and `m` is the number of discount schemes. - The second line contains `n` space-separated integers, representing the prices of the items (1 ≤ price ≤ 10^6). - The third line contains `m` space-separated integers, representing the different percentage discounts (1 ≤ x ≤ 100). - The fourth line contains `m` space-separated integers, representing the different flat discounts (1 ≤ d ≤ 10^6). # Output: - Print the best price for each item after applying the most beneficial discount for each item. # Example: Input: ``` 5 2 200 300 150 400 250 10 20 50 60 ``` Output: ``` 140 240 100 320 190 ``` # Explanation: - For the first item, the percentage discounts are 180 and 160, the flat discounts are 150 and 140, so the best price is 140. - For the second item, the percentage discounts are 270 and 240, the flat discounts are 250 and 240, so the best price is 240. - For the third item, the percentage discounts are 135 and 120, the flat discounts are 100 and 90, so the best price is 90. - For the fourth item, the percentage discounts are 360 and 320, the flat discounts are 350 and 340, so the best price is 320. - For the fifth item, the percentage discounts are 225 and 200, the flat discounts are 190 and 180, so the best price is 190. Note: If a discount results in a negative price, treat it as zero.","solution":"def best_prices_after_discounts(n, m, prices, percentages, flats): Calculate the best price for each item after applying both discount schemes and choosing the lower price between the two. Parameters: n (int): Number of items m (int): Number of discount schemes prices (list): Original prices of items percentages (list): Percentage discounts flats (list): Flat dollar discounts Returns: list: Best price for each item after applying the most beneficial discount best_prices = [] for price in prices: best_price = price # Apply percentage discounts for percent in percentages: discount_price = price * (1 - percent / 100) best_price = min(best_price, discount_price) # Apply flat discounts for flat in flats: discount_price = price - flat if discount_price < 0: discount_price = 0 best_price = min(best_price, discount_price) best_prices.append(int(best_price)) return best_prices"},{"question":"You have a set of lockers in a row, all of which are initially closed. You have a series of students, each of whom will toggle (i.e., open if it\'s closed, close if it\'s open) certain lockers following a specific rule. - The first student toggles every locker (i.e., student 1 toggles locker 1, locker 2, locker 3,...). - The second student toggles every second locker (i.e., student 2 toggles locker 2, locker 4, locker 6,…). - The third student toggles every third locker (i.e., student 3 toggles locker 3, locker 6, locker 9,…). - This continues until the nth student toggles only the nth locker. Given the number of lockers, you need to determine which lockers are open after all students have toggled the lockers according to the described rules. The input consists of multiple test cases. The first line contains an integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a single integer n (1 le n le 10^6) — the number of lockers for that test case. For each test case, output a space-separated list of integers representing the locker numbers that remain open after all students have toggled them according to the rules. Example: Input: 3 1 2 10 Output: 1 1 1 4 9","solution":"def lockers_open(t, cases): Determine which lockers are open after all students have toggled the lockers. Parameters: t (int): Number of test cases. cases (list of int): Each element represents the number of lockers for a test case. Returns: list of list of int: Each inner list contains the locker numbers that remain open. results = [] for n in cases: open_lockers = [i * i for i in range(1, int(n**0.5) + 1)] results.append(open_lockers) return results"},{"question":"You are given a tree with n nodes, rooted at node 1. Each node contains a certain amount of gold. The gold can be collected by visiting the nodes, but there are restrictions on how you can move through the tree. You can perform the following operations: 1. Start at the root node. 2. From a node, you can visit its children nodes. 3. If you visit a child node, you cannot go back to its parent node. Your goal is to collect as much gold as possible. The first line of the input contains an integer n (1 le n le 100,000) – the number of nodes in the tree. The second line contains n space-separated integers g_1, g_2, dots, g_n (0 le g_i le 10^9), where g_i is the amount of gold in the i-th node. Each of the next n - 1 lines contains two integers u and v (1 le u, v le n), denoting an edge between node u and node v. Print a single integer, the maximum amount of gold that can be collected. **Example:** Input: ``` 5 2 3 5 1 4 1 2 1 3 2 4 2 5 ``` Output: ``` 6 ``` **Explanation:** In the given tree: ``` 1 / 2 3 / 4 5 ``` The maximum amount of gold you can collect starts at node 1, moves to node 2, then visits node 4, collecting a total of 2+3+1=6 units of gold.","solution":"from collections import defaultdict def max_gold(n, gold, edges): # Create an adjacency list for the tree tree = defaultdict(list) for (u, v) in edges: tree[u].append(v) tree[v].append(u) def dfs(node, parent): # Max gold we can collect starting from this node max_gold_from_here = gold[node - 1] for child in tree[node]: if child != parent: max_gold_from_here += dfs(child, node) return max_gold_from_here # Start DFS from the root node which is 1 result = dfs(1, -1) return result"},{"question":"Alice loves sorting and manipulating arrays. She recently learned about the concept of rotation and wants to experiment with it. Given an array of integers, she wants to rotate it to the right by a given number of steps. After rotating, she wishes to find the maximum sum of any contiguous subarray. Help Alice by writing a function to achieve this. You need to implement the function `rotatedMaxSubarraySum(nums, steps)` that takes in a list of integers `nums` and an integer `steps`, and returns the maximum sum of any contiguous subarray after rotating the array to the right by the given number of steps. # Input - A list of integers `nums` where ( 1 leq text{len(nums)} leq 10^5 ) and (-10^5 leq text{nums}[i] leq 10^5) for all valid `i`. - An integer `steps` where ( 0 leq text{steps} leq 10^5 ). # Output - An integer, the maximum sum of any contiguous subarray after rotating the array to the right by `steps` number of steps. # Example ```python assert rotatedMaxSubarraySum([1, -2, 3, 4, -1, 2], 2) == 8 assert rotatedMaxSubarraySum([-1, -2, -3, -4], 1) == -1 assert rotatedMaxSubarraySum([10, -2, -3, 5], 3) == 15 ``` # Explanation - In the first example, rotating the array [1, -2, 3, 4, -1, 2] by 2 steps to the right gives [4, -1, 2, 1, -2, 3]. The maximum sum of any contiguous subarray is obtained from [4, -1, 2, 1, -2, 3] and is equal to 8. - In the second example, the array remains [ -1, -2, -3, -4 ] after 1 right rotation, and the maximum sum is -1. - In the third example, the array after rotating [10, -2, -3, 5] by 3 steps to the right is [ -3, 5, 10, -2]. The maximum sum of any contiguous subarray is obtained from [5, 10] and is equal to 15.","solution":"def rotatedMaxSubarraySum(nums, steps): from collections import deque # Rotating the list to the right by `steps` number of times n = len(nums) steps = steps % n rotated_nums = nums[-steps:] + nums[:-steps] # Function to find the maximum sum of a contiguous subarray def maxSubarraySum(arr): max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far return maxSubarraySum(rotated_nums)"},{"question":"You are playing a game with a grid of n times m cells. Each cell in this grid contains a number that indicates the energy level at that cell. You start at the top-left corner of the grid (cell (1, 1)) and your goal is to reach the bottom-right corner (cell (n, m)). You can move to a neighboring cell either to the right or down but not upwards or to the left. Every time you move to a neighboring cell, you consume the energy level of that cell. You would like to calculate the minimum amount of energy you need to reach the bottom-right corner of the grid. Given the grid, write a program to determine the minimum energy required to travel from the top-left corner to the bottom-right corner. The first line contains two integers n and m (1 leq n, m leq 100) denoting the number of rows and columns of the grid. Each of the following n lines contains m space-separated integers representing the energy levels of each cell in the grid. Output the minimum amount of energy required to reach the bottom-right corner from the top-left corner. # Example **Input:** ``` 3 3 1 3 1 1 5 1 4 2 1 ``` **Output:** ``` 7 ``` **Explanation:** The path with the least energy expenditure is: (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) consuming energy levels 1 -> 1 -> 4 -> 2 -> 1 summing up to 7.","solution":"def min_energy(grid): Computes the minimum energy required to travel from the top-left corner to the bottom-right corner. :param grid: A list of lists representing the grid with energy levels. :return: An integer representing the minimum energy required. n = len(grid) m = len(grid[0]) # Create a DP table to store the minimum energy required to reach each cell dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the grid for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The result is in the bottom-right corner return dp[n - 1][m - 1]"},{"question":"Mike enjoys puzzles, and his favorite ones involve transformations of strings. A new type of transformation, the \\"bridging transformation,\\" caught his interest. A bridging transformation converts one string into another by inserting exact copies of the second string into the first string. For example, transforming \\"abc\\" to \\"dabcf\\" requires inserting \\"abc\\" at the beginning of \\"dabcf\\". Given two strings `s` and `t`, determine the minimum number of bridging transformations required to transform `s` into `t`. If it is impossible, return -1. # Input: - `s` and `t` are two non-empty strings consisting of lowercase English letters. - The lengths of `s` and `t` are both between 1 and 1000. # Output: - Output the minimum number of bridging transformations required to convert `s` into `t`. If it is impossible, return -1. # Examples: **Example 1:** ``` Input: s: \\"abc\\" t: \\"abcbabccabc\\" Output: 3 Explanation: The transformation sequence could look like this: 1. \\"abc\\" -> \\"abcabc\\" 2. \\"abcabc\\" -> \\"abcabccabc\\" 3. \\"abcabccabc\\" -> \\"abcbabccabc\\" Total transformations: 3 ``` **Example 2:** ``` Input: s: \\"xyz\\" t: \\"xyzxyz\\" Output: 2 Explanation: The transformation sequence could look like this: 1. \\"xyz\\" -> \\"xyzxyz\\" Total transformations: 2 ``` **Example 3:** ``` Input: s: \\"abc\\" t: \\"def\\" Output: -1 Explanation: It is impossible to transform \\"abc\\" into \\"def\\" by bridging transformations. ``` In your solution, you must define the function `minTransformations(s: str, t: str) -> int`. The function should return the minimum number of transformations needed or -1 if it\'s impossible.","solution":"def minTransformations(s: str, t: str) -> int: Returns the minimum number of bridging transformations required to convert s into t. If it is impossible, returns -1. # Check if s is a substring of t anywhere. if not set(s).issubset(set(t)): return -1 n = len(s) m = len(t) # Removes the need for complex dynamic programming by simple greedy approach: transformations = 0 i = 0 while i < m: transformations += 1 j = 0 while i < m and j < n: if s[j] == t[i]: j += 1 i += 1 if j != n and i == m: return -1 return transformations"},{"question":"You have been tasked with creating an encrypted message system for a text-based adventure game where players can store and retrieve messages using a custom cipher. The cipher rotates each letter by a certain number of positions in the alphabet, wrapping from \'z\' to \'a\' as necessary. This is known as a Caesar cipher. Your job is to implement a pair of functions: `encrypt(message, shift)` and `decrypt(encrypted_message, shift)`. - **encrypt(message, shift)**: This function takes a plaintext message and a shift value. It returns the encrypted version of the message, where each letter in the message is shifted by the given number of positions in the alphabet. Non-alphabetical characters should remain unchanged. - **decrypt(encrypted_message, shift)**: This function takes an encrypted message and a shift value. It returns the decrypted version of the message by shifting letters in the opposite direction. # Input 1. The first line contains the plaintext message (a string) to be encrypted. 2. The second line contains an integer, the shift value. # Output 1. Print the encrypted message. 2. Print the decrypted message using the same shift value. # Example Input ``` hello world 3 ``` Output ``` khoor zruog hello world ``` # Constraints - The plaintext message will consist of any printable ASCII characters. - The shift value will be an integer in the range `0 <= shift < 26`. # Note - The encryption should handle both uppercase and lowercase letters appropriately. - Decryption must correctly reverse the encryption even when the shift value reaches the end of the alphabet and wraps around.","solution":"def encrypt(message, shift): Encrypt the message using a Caesar cipher with the given shift. encrypted_message = [] for char in message: if char.isalpha(): shift_base = ord(\'A\') if char.isupper() else ord(\'a\') shifted_char = chr(shift_base + (ord(char) - shift_base + shift) % 26) encrypted_message.append(shifted_char) else: encrypted_message.append(char) return \'\'.join(encrypted_message) def decrypt(encrypted_message, shift): Decrypt the message previously encrypted using a Caesar cipher with the given shift. decrypted_message = [] for char in encrypted_message: if char.isalpha(): shift_base = ord(\'A\') if char.isupper() else ord(\'a\') shifted_char = chr(shift_base + (ord(char) - shift_base - shift) % 26) decrypted_message.append(shifted_char) else: decrypted_message.append(char) return \'\'.join(decrypted_message)"},{"question":"Lauren loves writing unique messages to her friends. She recently learned that she can make her messages more engaging by encoding them. One method she uses involves shifting the letters of the message by a fixed number of positions in the alphabet. For example, if she shifts the letter \'A\' by 2 positions, it becomes \'C\'. The same shift would turn \'Z\' into \'B\'. Note that the shifting wraps around at the end of the alphabet. Given a message comprising only uppercase Latin letters and a fixed integer shift value, your task is to encode this message using Lauren\'s shifting technique. The first line contains a single integer `k` (1 ≤ k ≤ 25) – the shift value to be applied to each character. The second line contains a string `message` which consists of only uppercase Latin letters and has a length of at most 100 characters. Output the encoded message after applying the shift. Ensure to wrap around the alphabet when reaching the end. Example: Input: 3 HELLO Output: KHOOR","solution":"def encode_message(k, message): Encodes the message by shifting each letter by k positions in the alphabet. :param k: Shift value (1 ≤ k ≤ 25) :param message: Message to be encoded (only uppercase Latin letters) :return: Encoded message encoded_message = [] for char in message: # Find the original position of the character (0-based index) original_pos = ord(char) - ord(\'A\') # Calculate the new position using the shift, wrapping around at \'Z\' new_pos = (original_pos + k) % 26 # Convert the new position back to a character new_char = chr(new_pos + ord(\'A\')) # Append to the result encoded_message.append(new_char) # Join the list of characters into a single string return \'\'.join(encoded_message)"},{"question":"You are building a social media platform where each post can have tags. Each tag is represented by a distinct integer. You need to implement a feature that determines whether it\'s possible to reorder the tags of each post in a way that no post will have the same set of tags as another post. Given a list of posts, where each post is represented by a list of integers (the tags), write a function `areReorderableTagsDistinct(posts)` that returns `True` if it\'s possible to reorder the tags in such a way and `False` otherwise. # Input - A list of `k` lists, where each sublist represents a post and contains distinct integers denoting tags. Some posts may have the same tags. # Output - A boolean value, `True` if it is possible to reorder the tags of each post such that no two posts have the same set of tags, and `False` otherwise. # Examples Example 1 ```python posts = [ [1, 2, 3], [4, 5, 6], [1, 2, 3] ] print(areReorderableTagsDistinct(posts)) # Output: False ``` *Explanation*: There are two posts with the same tags [1, 2, 3]. Example 2 ```python posts = [ [1, 2, 3], [3, 2, 1], [1, 3, 2] ] print(areReorderableTagsDistinct(posts)) # Output: False ``` *Explanation*: Even though tag order is different, all posts have the same set of tags. Example 3 ```python posts = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(areReorderableTagsDistinct(posts)) # Output: True ``` *Explanation*: All posts have distinct sets of tags.","solution":"def areReorderableTagsDistinct(posts): Determines whether it\'s possible to reorder the tags of each post such that no post will have the same set of tags as another post. Args: posts (List[List[int]]): A list of lists, where each sublist represents a post with distinct integer tags. Returns: bool: True if it\'s possible to reorder the tags such that all posts have unique sets of tags, False otherwise. # Convert each list of tags to a sorted tuple which makes comparison easier sorted_post_sets = [tuple(sorted(post)) for post in posts] # Convert list of sorted tuples to a set to eliminate any duplicates unique_post_sets = set(sorted_post_sets) # If the length of the original list and the set are the same, all posts had unique sets return len(posts) == len(unique_post_sets)"},{"question":"Given a string `s` consisting of lowercase English letters, you are to determine the length of the longest substring that contains no more than `k` distinct characters. The first line contains a single integer `k` (1 ≤ k ≤ 26). The second line contains a string `s` (1 ≤ |s| ≤ 10^5) consisting of only lowercase English letters. Print a single integer — the length of the longest substring that contains no more than `k` distinct characters.","solution":"def longest_substring_with_k_distinct(k, s): Returns the length of the longest substring that contains no more than k distinct characters. if not s or k == 0: return 0 left = 0 right = 0 max_len = 0 char_count = {} while right < len(s): char = s[right] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"Miranda is playing a variation of the famous \\"Conway\'s Game of Life\\" on a 2D grid. In this version, the grid has finite dimensions m x n. The initial state of the grid is represented as a 2D list of integers, where each cell can be either 0 (dead) or 1 (alive). The update rule for transitioning from one generation to the next is as follows: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Miranda needs your help to compute the state of the grid after k generations. Write a function `game_of_life(initial_state: List[List[int]], k: int) -> List[List[int]]` that takes a 2D list representing the initial state of the grid and an integer k representing the number of generations. The function should return the state of the grid after k generations. # Example **Input:** ```python initial_state = [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] k = 1 ``` **Output:** ```python [ [0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0] ] ``` # Constraints - 1 ≤ m, n ≤ 50 (where m and n are the dimensions of the grid) - 0 ≤ k ≤ 100 - The initial state will be a valid m x n grid with cells only containing 0s and 1s.","solution":"from typing import List def game_of_life(initial_state: List[List[int]], k: int) -> List[List[int]]: def get_neighbors_count(board: List[List[int]], x: int, y: int) -> int: directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(board) and 0 <= ny < len(board[0]): count += board[nx][ny] return count def next_state(board: List[List[int]]) -> List[List[int]]: m, n = len(board), len(board[0]) new_board = [[0] * n for _ in range(m)] for i in range(m): for j in range(n): neighbors = get_neighbors_count(board, i, j) if board[i][j] == 1: if neighbors < 2 or neighbors > 3: new_board[i][j] = 0 else: new_board[i][j] = 1 else: if neighbors == 3: new_board[i][j] = 1 return new_board board = initial_state for _ in range(k): board = next_state(board) return board"},{"question":"You are given a rectangular grid with dimensions n times m (i.e., n rows and m columns). Each cell of the grid is either walkable (denoted by 0) or contains an obstacle (denoted by 1). Determine the length of the shortest path from the top-left cell (0, 0) to the bottom-right cell (n-1, m-1). You can move in four possible directions from a cell: up, down, left, or right. You cannot move outside the grid or into a cell containing an obstacle. If there is no such path, return -1. The first line of input contains a single integer T (1 le T le 100) - the number of test cases. Each test case consists of two lines. The first line contains two integers, n and m (1 le n, m le 1000) - the dimensions of the grid. The next n lines represent the grid, each containing m integers (either 0 or 1). Output the length of the shortest path for each test case in a new line. If there is no path, output -1. **Example:** Input: ``` 2 3 3 0 0 0 1 1 0 0 0 0 3 3 0 0 0 1 1 1 1 0 0 ``` Output: ``` 4 -1 ```","solution":"from collections import deque def shortest_path(grid, n, m): if grid[0][0] == 1 or grid[n - 1][m - 1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) while queue: row, col, dist = queue.popleft() if row == n - 1 and col == m - 1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and not visited[new_row][new_col] and grid[new_row][new_col] == 0: visited[new_row][new_col] = True queue.append((new_row, new_col, dist + 1)) return -1 def process_test_cases(T, test_cases): results = [] for i in range(T): n, m = test_cases[i][0] grid = test_cases[i][1] result = shortest_path(grid, n, m) results.append(result) return results # Example usage: if __name__ == \\"__main__\\": T = 2 test_cases = [ [(3, 3), [[0, 0, 0], [1, 1, 0], [0, 0, 0]]], [(3, 3), [[0, 0, 0], [1, 1, 1], [1, 0, 0]]] ] results = process_test_cases(T, test_cases) for result in results: print(result)"},{"question":"A company has n employees, and they need to communicate important information efficiently. Each employee can inform another employee directly. The company wants to ensure that starting from any employee, the information can reach every other employee through a series of direct communications. To do this, they want to add the minimum number of direct communication links necessary. Each of the n employees has a unique id from 1 to n. The provided list contains n space-separated integers, where the i-th integer indicates the id of the employee that employee i can currently inform directly. Your task is to determine the minimum number of additional direct communication links required and specify one possible set of these new links to ensure complete communication coverage from any employee to every other employee. # Input - The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of employees. - The second line contains n space-separated integers, where the i-th integer is the id of the employee that employee i can currently inform directly. # Output - On the first line, print one integer — the minimum number of new direct communication links needed. - On the subsequent lines, print the new pairs of direct communication links, where each pair is represented by two space-separated integers u and v, meaning employee u can now directly inform employee v. # Example Input ``` 4 2 3 4 1 ``` Output ``` 1 4 2 ``` In this example, employee 4 is directly informed by employee 1, completing the communication cycle to ensure total coverage. **Note**: The solution may not be unique, and any optimal set of new links is acceptable.","solution":"def find_min_additional_links(n, directs): # Create graph adjacency list adj = {i + 1: [] for i in range(n)} for i, emp in enumerate(directs): adj[i + 1].append(emp) # Finding connected components visited = set() components = [] def dfs(v, component): stack = [v] while stack: node = stack.pop() if node not in visited: visited.add(node) component.append(node) for neighbor in adj[node]: if neighbor not in visited: stack.append(neighbor) for i in range(1, n + 1): if i not in visited: component = [] dfs(i, component) components.append(component) # Number of components k = len(components) # If only one component, no new links are needed if k == 1: return 0, [] # To connect k components, we need (k - 1) links new_links = [] for i in range(k - 1): new_links.append((components[i][0], components[i + 1][0])) return k - 1, new_links"},{"question":"Given an undirected graph with `n` nodes and `m` edges, you are required to determine the number of distinct paths of length exactly `k` between two nodes `u` and `v`. The graph is represented as an adjacency matrix `A` where `A[i][j] = 1` indicates an edge between nodes `i` and `j`, and `A[i][j] = 0` indicates no edge. A path of length `k` from node `u` to node `v` is defined as a sequence of nodes starting from `u` and ending at `v` such that there are exactly `k` edges in the sequence and no node appears more than once in the path. Input: - An integer `n` (1 ≤ `n` ≤ 100), the number of nodes. - An integer `m` (1 ≤ `m` ≤ 10,000), the number of edges. - An integer `k` (1 ≤ `k` ≤ 10), the required path length. - The next `m` lines each contain two integers `x` and `y` (1 ≤ `x, y` ≤ `n`) representing an edge between node `x` and node `y`. - Two integers `u` and `v` (1 ≤ `u, v` ≤ `n`), the starting and ending nodes of the path respectively. Output: - Print a single integer, the number of distinct paths of length exactly `k` from node `u` to node `v`. Example: Input: ``` 4 4 2 1 2 2 3 3 4 4 1 1 3 ``` Output: ``` 2 ``` Note: In this example, there are exactly two distinct paths of length 2 from node 1 to node 3: `1 -> 2 -> 3` and `1 -> 4 -> 3`.","solution":"def count_paths(n, m, k, edges, u, v): import numpy as np # Create adjacency matrix A = np.zeros((n, n), dtype=int) for x, y in edges: A[x-1, y-1] = 1 A[y-1, x-1] = 1 # Using matrix exponentiation to find the number of paths of length k def matrix_power(A, p): result = np.identity(len(A), dtype=int) base = A while p > 0: if p % 2 == 1: result = np.dot(result, base) base = np.dot(base, base) p //= 2 return result A_k = matrix_power(A, k) # The number of paths of length k from u to v return A_k[u-1, v-1] # Example usage n = 4 m = 4 k = 2 edges = [(1, 2), (2, 3), (3, 4), (4, 1)] u = 1 v = 3 print(count_paths(n, m, k, edges, u, v)) # Output should be 2"},{"question":"Given an integer n and an array of n integers, find the maximum product of a contiguous subarray of the array. We define a contiguous subarray as a sequence of elements within the array, such that the elements are consecutive in the original array. Input: The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^4). Output: Output a single integer representing the maximum product of a contiguous subarray.","solution":"def max_product_subarray(nums): Returns the maximum product of a contiguous subarray. if not nums: return 0 max_product = nums[0] min_product = nums[0] result = nums[0] for i in range(1, len(nums)): current = nums[i] if current < 0: max_product, min_product = min_product, max_product max_product = max(current, max_product * current) min_product = min(current, min_product * current) result = max(result, max_product) return result"},{"question":"You are given a list of words. Two words are considered \\"similar\\" if they have the same set of characters, regardless of the order and the number of times each character appears. For example, \\"abc\\" and \\"cba\\" are similar, but \\"aab\\" and \\"abb\\" are not. Your task is to determine the number of groups of similar words in the list. Input: - The first line of the input contains an integer N (1 le N le 10^5), the number of words in the list. - The next N lines each contain a word consisting of lowercase English letters. The length of each word is at least 1 and at most 100. Output: - Output a single integer representing the number of groups of similar words. Example: Input: ``` 6 abc bca dabc dcba xyz zyx ``` Output: ``` 3 ``` Explanation: There are three groups of similar words: 1. \\"abc\\", \\"bca\\" 2. \\"dabc\\", \\"dcba\\" 3. \\"xyz\\", \\"zyx\\"","solution":"def count_similar_word_groups(words): Counts the number of groups of similar words in a list. :param words: List of words (strings) :return: Number of groups of similar words groups = {} for word in words: key = frozenset(word) if key in groups: groups[key].add(word) else: groups[key] = {word} return len(groups) # Example usage: words = [\\"abc\\", \\"bca\\", \\"dabc\\", \\"dcba\\", \\"xyz\\", \\"zyx\\"] print(count_similar_word_groups(words)) # Output: 3"},{"question":"You are building a small text editor and need to implement an auto-complete feature. The editor keeps a dictionary of words sorted lexicographically. The dictionary is dynamic; words can be added or deleted. The auto-complete feature should suggest the top k words that start with a given prefix. The first line contains an integer q (1 ≤ q ≤ 100000), the number of operations. Each of the next q lines represents an operation. Each operation can be one of the following: - \\"add word\\" (where word is a string of lowercase English letters with length between 1 and 20) which adds the word to the dictionary. - \\"del word\\" (where word is a string of lowercase English letters with length between 1 and 20) which removes the word from the dictionary. - \\"find prefix k\\" (where prefix is a string of lowercase English letters and k is an integer (1 ≤ k ≤ 100)) which returns the top k suggestions of words in the dictionary that start with the given prefix. For each \\"find\\" operation, print the top k words that start with the given prefix. If there are fewer than k words with that prefix, print all of them. If no words match the prefix, print \\"-1\\". Note: Ensure that adding and deleting a word, as well as finding suggestions, are efficient operations.","solution":"from collections import defaultdict import bisect class AutoComplete: def __init__(self): self.words = defaultdict(set) def add(self, word): for i in range(1, len(word) + 1): prefix = word[:i] self.words[prefix].add(word) self.words[\'\'].add(word) def delete(self, word): for i in range(1, len(word) + 1): prefix = word[:i] if word in self.words[prefix]: self.words[prefix].remove(word) if word in self.words[\'\']: self.words[\'\'].remove(word) def find(self, prefix, k): if prefix in self.words: suggestions = sorted(self.words[prefix]) return suggestions[:k] if suggestions else [\\"-1\\"] else: return [\\"-1\\"] # Example of how the class works auto_complete = AutoComplete() auto_complete.add(\\"apple\\") auto_complete.add(\\"app\\") print(auto_complete.find(\\"app\\", 2)) # Output: [\'app\', \'apple\'] auto_complete.delete(\\"app\\") print(auto_complete.find(\\"app\\", 2)) # Output: [\'apple\']"},{"question":"You are given a circular linked list of integers. Each node in this linked list contains an integer value and a pointer to the next node. The last node of the list points back to the first node, forming a circle. Your task is to determine if the linked list contains a cycle where the sum of the node values along the cycle is equal to zero. Write a function that takes the head of a circular linked list and returns a boolean indicating whether there exists a cycle in the list whose sum of node values is zero. # Input: - The head of a circular linked list. Each node in the linked list has a value that is an integer and a pointer to the next node. - The linked list size is at least 1 and at most 100,000. # Output: - Return `True` if there exists a cycle in the linked list where the sum of the node values along the cycle is zero, otherwise return `False`. # Example **Example 1** Input: ``` Node(1) -> Node(2) -> Node(-3) -> Node(1) -> Node(4) -> Node(-4) -> Node(1) -> (back to Node(1)) ``` Output: ``` True ``` Explanation: There is a cycle consisting of nodes with values [1, 4, -4, -1], which sums to zero. **Example 2** Input: ``` Node(3) -> Node(-2) -> Node(5) -> Node(7) -> (back to Node(3)) ``` Output: ``` False ``` Explanation: None of the cycles in the list sum to zero. # Note: - You can assume there are no duplicate values for nodes in the linked list. - The function should run in O(n*log(n)) time complexity.","solution":"class Node: def __init__(self, value=0, next=None): self.value = value self.next = next def has_zero_sum_cycle(head): Determine if a circular linked list has a cycle with a sum of zero. slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: break else: return False cycle_nodes = [] current = slow while True: cycle_nodes.append(current.value) current = current.next if current == slow: break for i in range(len(cycle_nodes)): current_sum = 0 for j in range(len(cycle_nodes)): current_sum += cycle_nodes[(i+j) % len(cycle_nodes)] if current_sum == 0: return True return False"},{"question":"You are given a list of integers of length ( n ). Your task is to find the maximum difference between any two elements in the list such that the larger element appears after the smaller one in the list. If no such pair exists, output -1. The first line contains a single integer ( T ge 1 ) — the number of test cases. The description of ( T ) test cases follows. Each test case consists of two lines: - The first line contains a single integer ( n ) ((1 leq n leq 10^5)) — the number of elements in the list. - The second line contains ( n ) integers separated by spaces, which represent the elements of the list ( a_1, a_2, ldots, a_n ) ((-10^9 leq a_i leq 10^9)). It is guaranteed that the sum of ( n ) over all test cases does not exceed ( 10^5 ). For each test case, print a single integer — the maximum difference between any two elements such that the larger element appears after the smaller one, or -1 if no such pair exists. # Input ``` 2 5 1 2 3 4 5 5 5 4 3 2 1 ``` # Output ``` 4 -1 ``` # Explanation In the first test case, the largest difference is ( 5 - 1 = 4 ). The element ( 5 ) comes after ( 1 ), so this is a valid pair. In the second test case, the array is strictly decreasing, so there are no pairs where the larger element comes after the smaller one. Therefore, the output is -1.","solution":"def maximum_difference(test_cases): results = [] for case in test_cases: n, arr = case if n < 2: results.append(-1) continue min_so_far = arr[0] max_diff = -1 for i in range(1, n): if arr[i] > min_so_far: max_diff = max(max_diff, arr[i] - min_so_far) min_so_far = min(min_so_far, arr[i]) results.append(max_diff) return results"},{"question":"The castle of King Artnur is under attack by a horde of cunning dragons. To defend his kingdom, the King has established a series of magical barriers in a grid formation. The grid can be represented as an `n x m` matrix of integers, where each integer represents the height of the barrier at that position. The dragons can attack any barrier, causing it to reduce its height to zero. The King can restore any barrier to its original height, but each restoration costs energy equivalent to the original height of the barrier. The King has `q` plans regarding the defense strategy for different attack sessions. Each plan specifies: - (x, y): The coordinates of the attacked barrier in the grid. - k: The number of times the barrier at (x, y) is attacked. Each attack reduces the barrier\'s height to zero. For the purpose of resource planning, the King needs to find out the total energy required to restore all the attacked barriers to their original height after each plan is carried out. **Input:** - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) denoting the size of the grid. - The next `n` lines contain `m` integers each, the `j-th` integer of `i-th` line denotes the height `h_ij` of the barrier at position `(i, j)` (1 ≤ h_ij ≤ 100). - The following line contains an integer `q` (1 ≤ q ≤ 10^5) denoting the number of plans. - The next `q` lines contain three integers `x`, `y`, and `k` (1 ≤ x ≤ n, 1 ≤ y ≤ m, 1 ≤ k ≤ 10^3) representing the attack coordinates and the number of attacks. **Output:** For each plan, print one integer representing the total energy required to restore the attacked barriers to their original height after the specified number of attacks. **Example Input:** ``` 3 3 4 3 2 2 5 7 1 8 6 2 2 2 1 3 1 2 ``` **Example Output:** ``` 5 10 ``` **Explanation:** - For the first plan, the barrier at (2, 2) is attacked once and its original height of 5 must be restored. Thus, the cost is 5. - For the second plan, the barrier at (3, 1) is attacked twice and its original height of 1 must be restored after each attack. Thus, the cost is 1 * 2 = 2. Total cost after the first and second plans is 5 + 2 = 10.","solution":"def calculate_restoration_costs(n, m, grid, plans): Calculates the energy required to restore attacked barriers in the grid. Args: n (int): number of rows in the grid. m (int): number of columns in the grid. grid (List[List[int]]): n x m grid representing the height of each barrier. plans (List[Tuple[int, int, int]]): List of attack plans where each plan is a tuple (x, y, k). Returns: List[int]: List of total restoration costs for each plan. costs = [] for x, y, k in plans: original_height = grid[x-1][y-1] cost = original_height * k costs.append(cost) return costs"},{"question":"You are provided with a graph containing n nodes and m edges. Each edge has a weight. The graph is connected, meaning there is a path between any two nodes. Your task is to handle multiple queries about the smallest path between two nodes in the graph. In this problem, you need to answer k queries. Each query is described by the indices of two nodes u and v. The answer to a query u, v is the minimum sum of weights along any path from node u to node v. The first line contains two integers n and m (2 ≤ n ≤ 10^3; 1 ≤ m ≤ 10^4), the number of nodes and the number of edges respectively. The next m lines each contain three integers x, y, w (1 ≤ x, y ≤ n; 1 ≤ w ≤ 10^6), representing an edge between nodes x and y with weight w. It is guaranteed that there is at most one edge between any pair of nodes. The next line contains a single integer k (1 ≤ k ≤ 10^4), the number of queries. The next k lines each contain two integers u and v (1 ≤ u, v ≤ n), representing the queries. Print k integers — the answers to the queries in the order the queries appear in the input. To clarify, the minimum sum of weights along any path from node u to node v can be found using famous algorithms like Dijkstra\'s or Floyd-Warshall. Example: Input: 4 4 1 2 10 2 3 5 3 4 7 4 1 8 3 1 3 2 4 1 4 Output: 15 12 8","solution":"def floyd_warshall(n, graph, queries): # Create a distance matrix initialized with infinity inf = float(\'inf\') dist = [[inf] * n for _ in range(n)] # Distance from a node to itself is zero for i in range(n): dist[i][i] = 0 # Fill initial distances based on the graph for u, v, w in graph: dist[u-1][v-1] = min(dist[u-1][v-1], w) dist[v-1][u-1] = min(dist[v-1][u-1], w) # Floyd-Warshall algorithm to find the shortest path between every pair of nodes for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Answer each query results = [] for u, v in queries: results.append(dist[u-1][v-1]) return results # Sample input for testing purposes n = 4 m = 4 graph = [ (1, 2, 10), (2, 3, 5), (3, 4, 7), (4, 1, 8) ] queries = [ (1, 3), (2, 4), (1, 4) ] print(floyd_warshall(n, graph, queries)) # Expected Output: [15, 12, 8]"},{"question":"Monocarp has taken up gardening and wants to create a beautiful flower arrangement for his garden. To do this, he plans to plant n types of flowers in a single line. Monocarp wants his arrangement to be colorful and diverse, meaning no two adjacent flowers should be of the same type. The garden is divided into n plots, each of which can hold one flower. Monocarp grows each type of flower once, so he has exactly one flower of each type. Monocarp struggles to find out in how many distinct ways he can plant the flowers in the garden to meet his requirement. Can you help him determine the number of such arrangements? The first line contains a single integer n (1 ≤ n ≤ 20) — the number of different types of flowers. Output a single integer — the number of valid arrangements such that no two adjacent flowers are of the same type. Examples: Input: 3 Output: 4 Input: 4 Output: 18 Explanation: In the first example, there are 3 types of flowers, say {A, B, C}. The valid arrangements are: ABC, ACB, BAC, BCA. In the second example, there are 4 types of flowers, say {A, B, C, D}. The valid arrangements are: ABCD, ABDC, ACBD, ACDB, ADBC, ADCB, BACD, BADC, BCAD, BCDA, BDAC, BDCA, CABD, CADB, CBAD, CBDA, CDAB, CDBA.","solution":"import math def count_flower_arrangements(n): Returns the number of valid flower arrangements such that no two adjacent flowers are of the same type. This is equivalent to finding the number of permutations of n unique items. if n == 1: return 1 return math.factorial(n)"},{"question":"You are given a series of video clips that are needed to form a continuous recording of an event. Each video clip is represented by its start and end times, and all times are in seconds. The first line of input contains an integer n (1 ≤ n ≤ 100), the number of video clips. The next n lines each contain two integers start and end (0 ≤ start < end ≤ 10^6), representing the start and end times of a video clip. Your task is to determine the minimum number of video clips required to cover the event from time 0 to T. If it is not possible to cover the entire event from 0 to T, output -1. Input format: - The first line contains the integers n and T (1 ≤ T ≤ 10^6). - The next n lines contain two integers each, start and end. Output format: - Output the minimum number of video clips required to cover the entire event from 0 to T, or -1 if it is not possible to cover the entire event. Example: Input: 3 10 0 5 5 10 1 6 Output: 2","solution":"def min_clips_to_cover_event(n, T, clips): # Sort clips by start time and then by end time in descending order clips.sort(key=lambda x: (x[0], -x[1])) max_end = 0 count = 0 i = 0 while max_end < T: # Find the clip with the furthest end time that starts at or before max_end new_end = max_end while i < n and clips[i][0] <= max_end: new_end = max(new_end, clips[i][1]) i += 1 # If we couldn\'t extend, then it\'s not possible to cover the event if new_end == max_end: return -1 # Use the selected clip and update the max_end max_end = new_end count += 1 return count"},{"question":"You are organizing a programming competition with a series of challenges of varying difficulty. As part of the competition rules, you decide that each participant\'s total score should be computed based on their performance across several challenges. You come up with a scoring algorithm where only the highest k scores out of all the challenges a participant has attempted will be considered for the final score. The first line contains an integer t (1 ≤ t ≤ 100), the number of participants. Each participant\'s data is given in two lines: - The first line contains two integers, n (1 ≤ n ≤ 1000), the number of challenges attempted by the participant, and k (0 ≤ k ≤ n), the number of highest scores to consider for the final score. - The second line contains n integers, representing the scores obtained by the participant in each challenge. Scores are guaranteed to be non-negative integers and will not exceed 1000. Your task is to determine the final score for each participant according to the given rules. If k is 0, the resulting final score should be 0 regardless of the scores. For each participant, output the final score on a new line. # Input format: ``` t n1 k1 scores1 n2 k2 scores2 ... nt kt scores_t ``` # Output format: ``` final_score1 final_score2 ... final_score_t ``` # Example: Input: ``` 3 5 3 10 20 30 40 50 6 2 5 15 25 35 45 55 4 0 5 10 15 20 ``` Output: ``` 120 100 0 ``` # Explanation: - For the first participant, the highest 3 scores are 30, 40, and 50. Their sum is 120. - For the second participant, the highest 2 scores are 45 and 55. Their sum is 100. - For the third participant, since k is 0, the final score is 0 regardless of the scores.","solution":"def calculate_final_scores(data): Calculate the final scores for each participant based on the given rules. Parameters: data (list): List of strings representing the input data where the first element is the number of participants followed by participant data with number of challenges, k and their scores. Returns: list: List of integers representing the final scores of each participant. t = int(data[0]) index = 1 results = [] for i in range(t): n, k = map(int, data[index].split()) scores = list(map(int, data[index + 1].split())) index += 2 if k == 0: results.append(0) else: scores.sort(reverse=True) results.append(sum(scores[:k])) return results"},{"question":"After observing the layout, structure, and complexity of the given sample question, the new question is designed as follows: --- In Berland, there are n cities, and some pairs of them are connected by two-way roads. It is guaranteed that you can travel from any city to any other, moving along the roads. Cities are numbered from 1 to n. K festivals are planned, each in a distinct city. Specifically, there are festivals in cities c_1, c_2, ldots, c_k (1 le k < n and 1 le c_i le n for all i). Count the number of pairs of cities x and y (x ne y and x, y notin {c_1, c_2, ldots, c_k}) such that any path from x to y must pass through at least one of the cities hosting the festivals. The first line of the input contains an integer t (1 le t le 10^4) — the number of test cases in the input. Each test case includes: 1. An integer n (3 le n le 2 cdot 10^5), the number of cities. 2. An integer m (n-1 le m le 5 cdot 10^5), the number of roads. 3. An integer k (1 le k < n), the number of festivals. 4. k distinct integers representing the cities c_1, c_2, ldots, c_k where the festivals are held. 5. m lines with pairs of integers u_i, v_i (1 le u_i, v_i le n and u_i ne v_i), describing the roads. Each road is bi-directional and connects two different cities. It is guaranteed that from any city you can reach any other by travelling on the roads. There may be more than one road between a pair of cities. Output: For each test case, print the number of pairs of cities x and y, such that any path from x to y passes through at least one festival hosting city. --- The task ensures to match the format, complexity, and technical demands comparable to the sample question provided.","solution":"def count_critical_pairs(test_cases): Given a list of test cases, count pairs of cities that require passing through a festival city results = [] for n, m, k, festival_cities, roads in test_cases: if k == 0 or k >= n: results.append(0) continue festival_set = set(festival_cities) isolated_count = n - k result = isolated_count * (isolated_count - 1) // 2 results.append(result) return results"},{"question":"Design a function that finds the longest common subsequence between two given strings. The function should be implemented using dynamic programming for efficient performance. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your code should take the two string inputs and return an integer representing the length of the longest common subsequence. Your function should have the following signature: ```python def longest_common_subsequence(s1: str, s2: str) -> int: ``` # Example: ```python # Example 1 s1 = \\"abcde\\" s2 = \\"ace\\" # Longest common subsequence is \\"ace\\" which has a length of 3 assert longest_common_subsequence(s1, s2) == 3 # Example 2 s1 = \\"abc\\" s2 = \\"abc\\" # Longest common subsequence is \\"abc\\" which has a length of 3 assert longest_common_subsequence(s1, s2) == 3 # Example 3 s1 = \\"abc\\" s2 = \\"def\\" # There is no common subsequence, hence the output would be 0 assert longest_common_subsequence(s1, s2) == 0 ``` # Constraints: - The input strings \'s1\' and \'s2\' will have lengths between 0 and 1000.","solution":"def longest_common_subsequence(s1: str, s2: str) -> int: Returns the length of the longest common subsequence between two given strings. m, n = len(s1), len(s2) # Create a 2D array to store the lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"To improve the understanding of tree structures and recursive algorithm design, consider the following problem related to minimum spanning trees and pathfinding: Given a tree represented as an undirected connected graph with `n` nodes (1 ≤ n ≤ 10^5) and `n-1` edges, where each node has a unique integer identifier from 1 to `n`, your task is to determine the diameter of the tree. The diameter of a tree is defined as the length of the longest simple path between any two nodes in the tree. # Input The first line consists of a single integer `n`, representing the number of nodes in the tree. The next `n-1` lines each contain two space-separated integers `u` and `v` representing an edge between node `u` and node `v`. # Output Output a single integer, the diameter of the tree. # Example Input ``` 5 1 2 1 3 3 4 3 5 ``` Output ``` 3 ``` In the given example, the longest path in the tree is from node 2 to node 4 (or 5) passing through node 1 and 3, which has a length of 3. # Notes - The input will be an undirected tree, which is a connected acyclic graph with `n` nodes and `n-1` edges. - You may use a breadth-first search (BFS) or depth-first search (DFS) to find the tree\'s diameter. Your solution should efficiently handle large inputs, with `n` up to 10^5.","solution":"def tree_diameter(n, edges): from collections import defaultdict, deque if n == 1: return 0 def bfs(start): visited = [False] * (n + 1) dist = [-1] * (n + 1) queue = deque([start]) visited[start] = True dist[start] = 0 max_dist_node = start while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True dist[neighbor] = dist[node] + 1 queue.append(neighbor) if dist[neighbor] > dist[max_dist_node]: max_dist_node = neighbor return max_dist_node, dist[max_dist_node] # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Step 1: BFS from an arbitrary node to find the farthest node \'x\' x, _ = bfs(1) # Step 2: BFS from \'x\' to find the farthest node from \'x\' and the distance \'d\' y, diameter = bfs(x) return diameter"},{"question":"Given a list of integers, your task is to divide this list into two non-empty parts such that the absolute difference between the sum of the elements in the first part and the sum of the elements in the second part is minimized. If there are multiple ways to divide the list, you can return any one of them. Write a function `min_difference` that takes a list of integers as input and returns the minimum possible absolute difference between the sums of the two parts. # Function Signature: ```python def min_difference(arr: List[int]) -> int: ``` # Input: - A list of integers `arr` where `2 <= len(arr) <= 100` and `-1000 <= arr[i] <= 1000`. # Output: - An integer representing the minimum possible absolute difference between the sums of the two parts. # Examples: ```python assert min_difference([1, 2, 3, 4, 5]) == 1 assert min_difference([10, 15, 20, 25]) == 0 assert min_difference([-1, -2, -3, -4]) == 0 assert min_difference([12, 3, 7, 5, 10, 8]) == 1 ``` # Note: In the first example, the list can be divided into [1, 2, 3] and [4, 5] with sums 6 and 9, so the absolute difference is |6 - 9| = 3. However, the optimal division is [1, 2, 3, 4] and [5] with sums 10 and 5, resulting in an absolute difference of |10 - 5| = 1.","solution":"from itertools import combinations def min_difference(arr): total_sum = sum(arr) n = len(arr) half_sum = total_sum // 2 best_diff = float(\'inf\') for i in range(1, n // 2 + 1): for comb in combinations(arr, i): current_sum = sum(comb) current_diff = abs(total_sum - 2 * current_sum) if current_diff < best_diff: best_diff = current_diff return best_diff"},{"question":"Write a function that simulates the roll of two fair dice and returns the sum of the results. The function should read a number of queries specifying the rolls to be performed and, for each query, output the sequence of sums of the dice rolls. The first line of the input contains a single integer q (1 le q le 10^5) — the number of queries. Each of the next q lines contains an integer n (1 le n le 10^4) — the number of times the dice are to be rolled in this query. For each query, output a single line containing n integers — the sequence of sums of the dice rolls. Note: Use a pseudo-random number generator to simulate the dice rolls. The random number generator should be seeded with the starting value 1337 for consistent results across different runs. # Example Input ``` 2 3 5 ``` Output ``` 8 6 7 9 5 7 11 9 ``` # Explanation In the first query, the dice are rolled 3 times, and the sums might be 8, 6, and 7, respectively. In the second query, the dice are rolled 5 times, and the sums might be 9, 5, 7, 11, and 9, respectively. The actual values may vary depending on the implementation of the random number generator.","solution":"import random def simulate_dice_rolls(q, queries): random.seed(1337) results = [] for n in queries: roll_sums = [random.randint(1, 6) + random.randint(1, 6) for _ in range(n)] results.append(roll_sums) return results"},{"question":"You are given an array of integers where the length of the array is between 3 and 20, inclusive. Each integer in the array is between 1 and 100, inclusive. Determine if the array forms a mountain sequence. A mountain sequence is defined as an increasing sequence followed by a decreasing sequence. For the sequence to be a valid mountain sequence, the length of the increasing part and the length of the decreasing part both have to be at least one. Output \\"Yes\\" if the array forms a mountain sequence. Otherwise, output \\"No\\".","solution":"def is_mountain_sequence(arr): Determines if the given array forms a mountain sequence. :param arr: List[int] - A list of integers where each integer is between 1 and 100. :return: str - \\"Yes\\" if the array forms a mountain sequence, otherwise \\"No\\". n = len(arr) if n < 3: return \\"No\\" i = 0 # Traverse the increasing part while i < n - 1 and arr[i] < arr[i + 1]: i += 1 # Check if we are at end or start or the peak is at the first or last position if i == 0 or i == n - 1: return \\"No\\" # Traverse the decreasing part while i < n - 1 and arr[i] > arr[i + 1]: i += 1 # Check if we have reached the end of the array return \\"Yes\\" if i == n - 1 else \\"No\\""},{"question":"In a distant land, there exists a city with n residential buildings arranged in a straight line. Each building has a certain height. The city\'s mayor has decided to label certain buildings as \\"special\\" based on a unique criterion: A building is considered special if it is taller than both of its immediate neighboring buildings. Given the array h of n integers, where h[i] represents the height of the i-th building, write a program to identify all the special buildings and return their indices (1-indexed). If there are no special buildings, output an empty list. Input: - The first line contains an integer n (3 ≤ n ≤ 10^5) — the number of buildings in the city. - The second line contains n space-separated integers h[i] (1 ≤ h[i] ≤ 10^9) — the heights of the buildings. Output: - Print the indices of all special buildings. The indices should be printed in ascending order, separated by spaces. If no special buildings exist, print an empty list. Example: Input: 7 3 1 2 1 4 1 5 Output: 3 5","solution":"def find_special_buildings(n, h): Returns the indices (1-indexed) of special buildings. Parameters: n : int : The number of buildings in the city. h : list : A list of integers where h[i] represents the height of the i-th building. Returns: list : A list of the indices of special buildings. special_buildings = [] for i in range(1, n - 1): if h[i] > h[i - 1] and h[i] > h[i + 1]: special_buildings.append(i + 1) # convert to 1-indexed return special_buildings"},{"question":"Emma decided to play a game with her friends using cards. She has a deck of cards labeled with numbers from 1 to N. Each friend picks a card at random from the deck. Emma wants to write a program to determine if it is possible to find three cards such that the sum of their values equals a given integer S. The function should return \\"YES\\" if such a set of three cards exists, and \\"NO\\" otherwise. Write a function `find_triplet_sum(cards: List[int], s: int) -> str` where: - `cards`: List of integers representing the values of the cards (Each card value is a unique integer). - `s`: An integer representing the targeted sum. # Input - An integer N (1 <= N <= 10^4), the number of cards. - List of N integers representing card values. - An integer S (1 <= S <= 3 * 10^4), the targeted sum. # Output - A string \\"YES\\" if there exists three distinct card values that sum up to S, otherwise \\"NO\\". # Example: Input: ``` 8 [1, 2, 3, 4, 5, 6, 7, 8] 15 ``` Output: ``` YES ``` Input: ``` 5 [5, 6, 7, 8, 9] 30 ``` Output: ``` NO ``` # Explanation In the first example, the cards with values [2, 5, 8] sum to 15, so the answer is \\"YES\\". In the second example, there are no three cards that sum to 30, so the answer is \\"NO\\".","solution":"def find_triplet_sum(cards, s): Determines if there is a triplet in `cards` that sums up to `s`. Args: cards (list of int): List of card values. s (int): Targeted sum. Returns: str: \\"YES\\" if there exists three distinct values that sum up to `s`, otherwise \\"NO\\". cards.sort() n = len(cards) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: triplet_sum = cards[i] + cards[left] + cards[right] if triplet_sum == s: return \\"YES\\" elif triplet_sum < s: left += 1 else: right -= 1 return \\"NO\\""},{"question":"You are programming a compute cluster for a research lab, where tasks often involve matrix calculations. One of the recurring tasks is to rotate a square matrix by 90 degrees clockwise. The size of the matrix, as well as its elements (which are integers), are provided to you. Your task is to write a program that accepts a matrix as input, rotates it 90 degrees clockwise, and then outputs the rotated matrix. # Input The first line of the input contains a single integer n (1 leq n leq 1000), where n is the size of the n x n matrix. The next n lines each contain n integers which represent the elements of the matrix. Each element of the matrix is an integer between -1000 and 1000, inclusive. # Output Output the rotated matrix, with each line containing n integers which represent one row of the rotated matrix. # Example Input ``` 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 7 4 1 8 5 2 9 6 3 ``` In the example, the given 3x3 matrix is: ``` 1 2 3 4 5 6 7 8 9 ``` After rotating it 90 degrees clockwise, you get: ``` 7 4 1 8 5 2 9 6 3 ``` Write a function \\"rotate_matrix\\" that performs this task: ```python def rotate_matrix(n, matrix): # Your code here ```","solution":"def rotate_matrix(n, matrix): Rotate the given square matrix by 90 degrees clockwise. :param n: Size of the n x n matrix :param matrix: List of lists representing the n x n matrix :return: Rotated matrix as a list of lists rotated_matrix = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n-1-i] = matrix[i][j] return rotated_matrix"},{"question":"You are given a square grid of n x n cells, where each cell may either be empty or occupied by a wall. Your task is to calculate the minimum number of moves required to travel from the top-left corner of the grid to the bottom-right corner. You can move up, down, left, or right but cannot move through walls. Write a function `min_moves_to_bottom_right(n: int, grid: List[List[int]]) -> int` that takes an integer `n` representing the size of the grid and a 2D list `grid` where 0 represents an empty cell and 1 represents a wall. The function should return the minimum number of moves required to reach the bottom-right corner from the top-left corner, or -1 if it is not possible to reach the bottom-right corner. **Example:** ```python n = 3 grid = [ [0, 1, 0], [0, 0, 0], [1, 0, 0] ] min_moves_to_bottom_right(n, grid) # Output: 4 ``` **Explanation:** In the example grid, the shortest path to reach the bottom-right corner from the top-left corner requires 4 moves: `[(0, 0), (1, 0), (1, 1), (2, 1), (2, 2)]`. **Note:** - Assume that (0,0) and (n-1,n-1) are always empty cells. - The function should handle grids with dimensions up to 100x100 efficiently.","solution":"from collections import deque from typing import List, Tuple def min_moves_to_bottom_right(n: int, grid: List[List[int]]) -> int: Returns the minimum number of moves required to travel from the top-left corner to the bottom-right corner of the grid, or -1 if it is not possible. # Directions are in order of right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x: int, y: int) -> bool: return 0 <= x < n and 0 <= y < n and grid[x][y] == 0 # BFS initialization queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() # Check if we have reached the bottom-right corner if x == n - 1 and y == n - 1: return steps # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"Nikita loves sequences. Nikita\'s best friend recently challenged her to find the longest consecutive subsequence in a given array. A consecutive subsequence is defined as a set of numbers that can be arranged such that all elements are consecutive, i.e., the set {x, x+1, ..., x+k}. Given an unsorted array of integers, can you help Nikita find the length of the longest consecutive subsequence? The input consists of: - The first line contains an integer n (1 leq n leq 10^5), the number of elements in the array. - The second line contains n space-separated integers representing the elements of the array. The elements of the array will be between -10^9 and 10^9. Output a single integer representing the length of the longest consecutive subsequence. **Example**: ``` Input: 7 100 4 200 1 3 2 3 Output: 4 ``` Explanation: The longest consecutive subsequence is [1, 2, 3, 4], so the output is 4.","solution":"def longest_consecutive_subsequence(n, nums): if n == 0: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: # Check if it\'s the start of a sequence current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Alice and Bob are playing a game where they take turns writing letters on a blackboard. Initially, the blackboard is empty. Each player on their turn must write either the letter \'A\' or \'B\'. Alice always starts first. The game is over when there are three consecutive identical letters (\'AAA\' or \'BBB\') on the blackboard, at which point the player who wrote the third letter loses. Write a function that predicts the outcome of the game given a string representing the sequence of letters already written on the blackboard. If the game is already over, return the name of the player who lost. If the game is still ongoing, return \\"Game is still ongoing\\". The input is a single string consisting only of the characters \'A\' and \'B\' with length between 0 and 100 inclusive. You should complete the function `predict_outcome(board: str) -> str` which takes a string `board` as input and returns a string as described above. **Examples:** 1. For the input `\\"AAAB\\"`, the function should return `\\"Alice loses\\"`. 2. For the input `\\"AABBAA\\"`, the function should return `\\"Game is still ongoing\\"`. 3. For the input `\\"BBB\\"`, the function should return `\\"Bob loses\\"`. **Note:** - If the initial string is empty, the game is considered to be ongoing. - Assume that both players play optimally from the beginning of the game. If a player is forced to write a letter that would make them lose, they will write it.","solution":"def predict_outcome(board: str) -> str: Predicts the outcome of the game given the current sequence of letters on the blackboard. Parameters: board (str): a string representing the sequence of letters already written on the blackboard Returns: str: the result of the game in the format \\"Player loses\\" or \\"Game is still ongoing\\" if \'AAA\' in board: return \\"Alice loses\\" elif \'BBB\' in board: return \\"Bob loses\\" else: return \\"Game is still ongoing\\""},{"question":"Alice and Bob are playing a game involving a string. They start with an empty string, and take alternating turns to add one character at a time from a given alphabet set {A, B, C, D, E}. Alice always goes first and tries to make the string lexicographically smaller, while Bob tries to make the string lexicographically larger. Both of them play optimally. Given the number of turns they play ( n ), predict the lexicographically smallest possible string they can end up with after the game. Write a function `optimal_game_result(n: int) -> str` that takes an integer ( n ), representing the number of turns in the game, and returns the lexicographically smallest possible string they can construct. **Input:** - A single integer ( n ) (1 ≤ ( n ) ≤ 100). **Output:** - A string of length ( n ) that represents the lexicographically smallest possible string after the game. **Example:** ```python # Example 1: optimal_game_result(1) # Output: \\"A\\" # Example 2: optimal_game_result(2) # Output: \\"AA\\" # Example 3: optimal_game_result(3) # Output: \\"AAA\\" # Example 4: optimal_game_result(4) # Output: \\"AAAA\\" ``` **Explanation:** If `n` is even, both Alice and Bob ensure that \\"A\\" is added to the string in every turn to keep it lexicographically smallest. If `n` is odd, Alice ensures that \\"A\\" is added in every turn she plays, leading to the smallest possible string.","solution":"def optimal_game_result(n: int) -> str: Predicts the lexicographically smallest possible string two players can construct after n turns, with Alice and Bob playing optimally. Alice tries to make it smaller and Bob tries to make it larger. return \'A\' * n"},{"question":"There are n cities in a country, and they are connected by m roads. Each road connects exactly two different cities, and it\'s possible to travel between any two cities either directly or indirectly through other cities. Each road has an associated travel cost, and the government wants to ensure that travel costs are minimized while maintaining the city\'s connectivity. They aim to construct a new road network such that the total cost is minimized, and every city is still reachable from any other city. Given the current number of cities, the roads between them, and the travel costs, determine the minimum possible total cost to ensure the connectivity of all cities. The first line contains two integers n (2 leq n leq 100) and m (1 leq m leq 1000) — the number of cities and the number of roads. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 1000), where u and v are the cities connected by a road, and w is the travel cost. Print the minimum cost to ensure all cities are connected. In the first example, the optimal way to connect all cities is to use the roads between cities 1-2 and 2-3 with a total cost of 7. In the second example, the optimal way to connect all cities is to use the roads between cities 1-2, 1-3, and 3-4 with a total cost of 6.","solution":"def find_minimal_cost(n, m, roads): Given the number of cities (n), number of roads (m), and a list of roads with costs (roads), this function returns the minimum possible total cost to ensure the connectivity of all cities. # Sorting edges by their weight. roads.sort(key=lambda x: x[2]) # Helper function to find the root of a city def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) # Helper function to union two subsets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Initially, each city is its own parent and has a rank of 0. parent = [i for i in range(n)] rank = [0] * n result = 0 # Initialize result e = 0 # Count of edges in the result i = 0 # Index of current edge # Number of edges in MST will be n-1 while e < n - 1: # Pick the smallest edge and increment the index for the next iteration u, v, w = roads[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) # If including this edge does not cause a cycle, include it in the result if x != y: e = e + 1 result = result + w union(parent, rank, x, y) return result"},{"question":"You are given a positive integer N (1 ≤ N ≤ 1000). Your task is to determine how many distinct pairs of positive integers (a, b) satisfy the condition: a * b = N The format of the input and output should be as follows: **Input:** The input contains a single integer N. **Output:** In the first line, print the number of distinct pairs M. In the next M lines, print the pairs (a, b), each pair on a new line in the format \\"a b\\". The pairs should be sorted in ascending order based on the value of a. **Examples:** **Example 1:** ``` Input: 12 Output: 3 1 12 2 6 3 4 ``` **Example 2:** ``` Input: 25 Output: 2 1 25 5 5 ``` **Explanation:** **Example 1:** For N = 12, the distinct pairs (a, b) that satisfy a * b = 12 are: 1 * 12 = 12 2 * 6 = 12 3 * 4 = 12 **Example 2:** For N = 25, the distinct pairs (a, b) that satisfy a * b = 25 are: 1 * 25 = 25 5 * 5 = 25","solution":"def find_pairs(N): Returns the number of distinct pairs (a, b) such that a * b = N, and the pairs themselves in ascending order based on the value of a. pairs = [] for a in range(1, int(N**0.5) + 1): if N % a == 0: b = N // a pairs.append((a, b)) return pairs def distinct_pairs(N): pairs = find_pairs(N) M = len(pairs) return M, pairs"},{"question":"In an ancient kingdom, there are n cities connected by m two-way roads forming a road network. Each road has a positive integer weight representing the travel time between the two cities it connects. The cities are numbered from 1 to n. The king of the kingdom wants to know the shortest possible travel time from the capital city (city 1) to all other cities in the kingdom. Your task is to help the king by providing a program that solves this problem. You are given: 1. The number of cities n (1 ≤ n ≤ 100,000) and the number of roads m (1 ≤ m ≤ 200,000). 2. A list of m road descriptions, each containing three integers u, v, and w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 10,000), where u and v are the cities connected by the road, and w is the travel time of the road. Your program should output n integers. The i-th integer in the output should be the shortest travel time from city 1 to city i. If there is no path from city 1 to city i, output -1 for that city. # Input The input consists of multiple lines: - The first line contains two integers, n and m. - The next m lines each contain three integers u, v, and w, representing a road between cities u and v with travel time w. # Output Output n integers where the i-th integer is the minimal travel time from city 1 to city i. If city i is unreachable from city 1, output -1 for that city. # Example Input ``` 5 6 1 2 2 1 3 5 2 3 1 2 4 2 3 5 3 4 5 1 ``` Output ``` 0 2 3 4 5 ``` # Constraints - 1 ≤ n ≤ 100,000 - 1 ≤ m ≤ 200,000 - 1 ≤ u, v ≤ n - 1 ≤ w ≤ 10,000 Use Dijkstra’s algorithm or any other efficient shortest path algorithm to solve this problem.","solution":"import heapq def shortest_paths(n, m, roads): Calculate the shortest path times from city 1 to all other cities. Parameters: n (int): Number of cities. m (int): Number of roads. roads (list): List of tuples (u, v, w) representing roads between cities with travel time w. Returns: list: List of shortest times from city 1 to all other cities. -1 if a city is unreachable. # Create adjacency list graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s Algorithm def dijkstra(source): min_heap = [(0, source)] # (distance, node) distances = [float(\'inf\')] * (n + 1) distances[source] = 0 while min_heap: curr_distance, u = heapq.heappop(min_heap) if curr_distance > distances[u]: continue for v, weight in graph[u]: distance = curr_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(min_heap, (distance, v)) return distances # Get shortest distances from city 1 distances = dijkstra(1) # Convert distances to required format result = [] for i in range(1, n + 1): result.append(distances[i] if distances[i] != float(\'inf\') else -1) return result"},{"question":"Given an array of integers, you need to perform the following operations: 1. Iterate through the array elements. 2. For each element, if it is an even number, divide it by 2. 3. If it is an odd number, multiply it by 3 and add 1. Output the resulting array after all operations are performed. # Input The first line contains an integer n (1 <= n <= 20), the number of elements in the array. The second line contains n space-separated integers, the elements of the array. Each element is between -10^6 and 10^6. # Output Output the array after performing the specified operations on each element. # Example Input 5 4 15 8 23 42 Output 2 46 4 70 21","solution":"def transform_array(arr): For each element in the array, if it is an even number, divide it by 2. If it is an odd number, multiply it by 3 and add 1. Returns the resulting array after all operations are performed. result = [] for num in arr: if num % 2 == 0: result.append(num // 2) else: result.append(num * 3 + 1) return result"},{"question":"You are given an integer array a of size n. In one move, you can pick any two adjacent indices i and j such that |a[i] - a[j]| geq 2 and swap the values at these indices. Your task is to find the minimum number of moves required to sort the array in non-decreasing order or determine if it is impossible to do so. You have to answer t independent test cases. The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 le n le 10^5) — the length of the array. The second line contains n integers a_{1}, a_{2}, dots, a_{n} (1 le a_{i} le 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5. For each test case, print the answer: -1 if it is impossible to sort the array using the given move, or the minimum number of moves required to sort the array in non-decreasing order. Example input: 2 3 4 5 3 4 5 2 3 4 Example output: 1 2","solution":"def minimum_moves_to_sort(t, test_cases): results = [] for case in test_cases: n, a = case if all(abs(a[i] - a[i + 1]) < 2 for i in range(n - 1)): results.append(-1) else: results.append(1) return results # Example usage: # t = 2 # test_cases = [ # (3, [4, 5, 3]), # (4, [5, 2, 3, 4]) # ] # print(minimum_moves_to_sort(t, test_cases)) # Output: [1, 1]"},{"question":"You are given an integer array `arr` of length `n`. Your task is to perform `k` operations on it. In each operation, select a contiguous subsequence of the array and reverse it. After applying the `k` operations, find the lexicographically smallest array that can be achieved. Return the lexicographically smallest array possible after performing the given operations. **Input:** - The first line contains two space-separated integers n and k (1 ≤ n ≤ 5000, 1 ≤ k ≤ 1000), the length of the array and the number of operations, respectively. - The second line contains n space-separated integers, representing the elements of the array. **Output:** - Output a single line containing n space-separated integers, the lexicographically smallest array possible after performing exactly k operations. **Example:** Input: ``` 7 3 7 6 5 8 3 4 1 ``` Output: ``` 1 3 4 5 6 7 8 ``` Explanation: By reversing appropriate selections of contiguous subarrays, the entire array can be sorted in ascending order after 3 operations, resulting in the lexicographically smallest array.","solution":"def lexicographically_smallest_array(n, k, arr): arr.sort() return arr"},{"question":"You are working on a project where you need to manage a system of warehouses and deliveries. Each warehouse has a certain supply of items, and every day you get a list of deliveries that have specific item demands. Your task is to determine if you can fulfill all the deliveries for the day. The warehouses and deliveries setup is described as follows: - There are `n` warehouses, each storing a certain number of items. - There are `m` deliveries, each requiring a certain number of items. You can fulfill deliveries from any warehouse, with no constraints on how items are distributed among the deliveries. You just need to check if the sum of the items in the warehouses is greater than or equal to the sum of the items demanded by the deliveries. Write a function `can_fulfill_deliveries(warehouses, deliveries)`: - `warehouses`: a list of integers where each integer represents the number of items in a warehouse. - `deliveries`: a list of integers where each integer represents the number of items required for a delivery. Return `True` if the sum of items in the warehouses is greater than or equal to the sum of items required by the deliveries, otherwise, return `False`. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 100) – the number of warehouses. - The second line contains `n` integers separated by spaces, where the i-th integer `w_i` (1 ≤ w_i ≤ 1000) represents the number of items in the i-th warehouse. - The third line contains an integer `m` (1 ≤ m ≤ 100) – the number of deliveries. - The fourth line contains `m` integers separated by spaces, where the i-th integer `d_i` (1 ≤ d_i ≤ 1000) represents the number of items required for the i-th delivery. # Output: - Print `True` if the sum of items in the warehouses is greater than or equal to the sum of items required by the deliveries, otherwise, print `False`. # Example: **Input:** ``` 3 10 20 30 2 15 25 ``` **Output:** ``` True ``` **Explanation:** - Total items in warehouses = 10 + 20 + 30 = 60 - Total items required for deliveries = 15 + 25 = 40 - Since 60 ≥ 40, the output is `True`. **Input:** ``` 2 5 5 3 3 4 4 ``` **Output:** ``` False ``` **Explanation:** - Total items in warehouses = 5 + 5 = 10 - Total items required for deliveries = 3 + 4 + 4 = 11 - Since 10 < 11, the output is `False`.","solution":"def can_fulfill_deliveries(warehouses, deliveries): Determines if the total supply in the warehouses can fulfill the total demand from the deliveries. Args: warehouses (list of int): A list of integers representing the number of items in each warehouse. deliveries (list of int): A list of integers representing the number of items required for each delivery. Returns: bool: True if total supply of items in warehouses is greater than or equal to the total demand from deliveries, False otherwise. total_supply = sum(warehouses) total_demand = sum(deliveries) return total_supply >= total_demand"},{"question":"Write a function `rotate_matrix` that takes a 2D list (matrix) of size `N x N` as input and rotates it 90 degrees clockwise in place, i.e., without using extra space for another matrix. The input matrix will be represented as a list of lists, where each sublist represents a row of the matrix. The function should modify the input matrix directly and not return anything. For example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # Output matrix should be modified to: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` # Constraints: - You may assume the input matrix is square (N x N). - You may assume that `N` will be an integer between 1 and 100 (inclusive). - The values in the matrix will be integers between `-1000` and `1000`.","solution":"def rotate_matrix(matrix): Rotates the given N x N matrix 90 degrees clockwise in place. :param matrix: 2D list of integers representing the matrix N = len(matrix) # Transpose the matrix for i in range(N): for j in range(i, N): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(N): matrix[i].reverse()"},{"question":"You are given an n x m matrix of distinct integers, where each row and each column is sorted in increasing order. Write a function that finds the position (row and column) of a target integer in the matrix, or returns (-1, -1) if the target is not present. The function should take in 3 arguments: 1. The matrix of integers, `matrix`. 2. The number of rows, `rows`. 3. The number of columns, `cols`. 4. The target integer, `target`. The function should return a tuple (i, j), where i is the row index and j is the column index of the target integer in the matrix. If the target is not found, return (-1, -1). Function signature: `def find_element(matrix: List[List[int]], rows: int, cols: int, target: int) -> Tuple[int, int]:` Example: ``` matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] rows = 5 cols = 5 target = 5 Output: (1, 1) Example: ``` matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] rows = 5 cols = 5 target = 20 Output: (-1, -1) ``` Constraints: - 1 <= rows, cols <= 500 - -10^9 <= matrix[i][j], target <= 10^9","solution":"from typing import List, Tuple def find_element(matrix: List[List[int]], rows: int, cols: int, target: int) -> Tuple[int, int]: Finds the position (row, column) of a target integer in a matrix where each row and column is sorted. If the target is not found, returns (-1, -1). # Start from the top-right corner of the matrix row, col = 0, cols - 1 # Traverse the matrix while row < rows and col >= 0: if matrix[row][col] == target: return (row, col) elif matrix[row][col] < target: row += 1 # Move down else: col -= 1 # Move left # Target not found return (-1, -1)"},{"question":"You are given a binary tree with n nodes. Each node has a unique integer value from 1 to n. You need to support two types of queries: 1. Update the value of a node. 2. Find the sum of the values in the subtree rooted at a given node. The tree is initially rooted at node 1. You need to perform the following operations on the tree: - The first line contains two integers n (1 le n le 100000) and q (1 le q le 100000) — the number of nodes in the tree and the number of queries, respectively. - The next n-1 lines each contain two integers, u and v, which describe an edge between node u and node v. - The next n lines contain an integer each, where the i-th integer (1 le i le n) represents the initial value of the node i. - The following q lines describe the queries. Each query is either of the format: - `1 x y`, meaning that the value of node x is updated to y. - `2 x`, meaning that you need to find the sum of the values of all nodes in the subtree rooted at node x. For each query of the second type, output the required sum.","solution":"class Tree: def __init__(self, n): self.n = n self.adj = [[] for _ in range(n + 1)] self.values = [0] * (n + 1) self.subtree_sum_cache = {} def add_edge(self, u, v): self.adj[u].append(v) self.adj[v].append(u) def set_value(self, node, value): self.values[node] = value def update_value(self, node, value): self.values[node] = value self.subtree_sum_cache.clear() # Invalidate the cache def dfs(self, node, parent): total_sum = self.values[node] for neighbor in self.adj[node]: if neighbor != parent: total_sum += self.dfs(neighbor, node) self.subtree_sum_cache[node] = total_sum return total_sum def subtree_sum(self, node): if node not in self.subtree_sum_cache: self.dfs(node, -1) return self.subtree_sum_cache[node] def process_queries(n, edges, values, queries): tree = Tree(n) for u, v in edges: tree.add_edge(u, v) for i, value in enumerate(values, start=1): tree.set_value(i, value) results = [] for query in queries: if query[0] == 1: _, x, y = query tree.update_value(x, y) elif query[0] == 2: _, x = query results.append(tree.subtree_sum(x)) return results"},{"question":"Given n railway stations and m direct rail connections between some pairs of stations, help the railway company determine if the rail network is connected. A rail network is considered connected if there exists a path (direct or indirect) between any pair of stations. The first line contains two integers, n (1 ≤ n ≤ 100000) and m (0 ≤ m ≤ 200000) — the number of stations and the number of rail connections respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) denoting a direct rail connection between station u and station v. Output \\"YES\\" if the rail network is connected; otherwise, output \\"NO\\". Input: - The first line contains two integers n and m. - The next m lines each contain two integers u and v, denoting a rail connection between stations u and v. Output: - Print \\"YES\\" if the network is connected. Otherwise, print \\"NO\\". Example: Input: 4 2 1 2 2 3 Output: NO Input: 4 3 1 2 2 3 3 4 Output: YES","solution":"def is_network_connected(n, m, connections): from collections import defaultdict, deque if n == 1: return \\"YES\\" if m == 0: return \\"NO\\" graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) queue = deque([1]) visited[1] = True count = 0 while queue: node = queue.popleft() count += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return \\"YES\\" if count == n else \\"NO\\""},{"question":"Given an array of integers, your task is to find the length of the longest contiguous subarray that has an equal number of even and odd numbers. **Input:** - The first line contains an integer t (1 le t le 10^4) — the number of test cases. - For each test case: - The first line contains an integer n (1 le n le 2 cdot 10^5) — the length of the array. - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. **Output:** - For each test case, print a single integer — the length of the longest contiguous subarray that contains an equal number of even and odd numbers. If no such subarray exists, print 0. **Example:** Input: ``` 3 6 1 2 1 2 1 2 5 1 1 1 1 1 8 2 4 6 8 1 3 5 7 ``` Output: ``` 6 0 8 ``` **Explanation:** - In the first test case, the entire array has an equal number of even and odd numbers, so the longest contiguous subarray is the array itself with length 6. - In the second test case, there are no equal even and odd numbers in any subarray, so the result is 0. - In the third test case, the entire array has an equal number of even and odd numbers; thus, the longest subarray has length 8.","solution":"def find_longest_subarray_with_equal_even_odd(arr): Returns the length of the longest contiguous subarray with an equal number of even and odd numbers. # Map to store the first occurrence of a particular count difference balance_map = {0: -1} balance = 0 max_length = 0 for i in range(len(arr)): # If the number is even, increment the balance # If the number is odd, decrement the balance if arr[i] % 2 == 0: balance += 1 else: balance -= 1 if balance in balance_map: max_length = max(max_length, i - balance_map[balance]) else: balance_map[balance] = i return max_length def solve(test_cases): results = [] for arr in test_cases: results.append(find_longest_subarray_with_equal_even_odd(arr)) return results"},{"question":"A financial analyst is working with investment records and needs to analyze the performance of several stocks over a certain period. Given the daily prices of the stocks, the analyst wants to identify the maximum profit that can be achieved by buying one share of a stock on one day and selling it on another day in the future. Write a function that takes a list of integers representing the daily prices of the stock and returns the maximum possible profit. If no profit can be achieved, return 0. **Constraints:** - The length of the list is between 1 and 10^5. - Each element in the list represents the price of the stock on a given day and will be a positive integer less than or equal to 10^9. **Examples:** *Example 1:* ``` Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. ``` *Example 2:* ``` Input: [7, 6, 4, 3, 1] Output: 0 Explanation: No transaction is made, as selling price is never higher than buying price. ``` **Function Signature:** ```python def max_profit(prices: List[int]) -> int: # Your code here ```","solution":"from typing import List def max_profit(prices: List[int]) -> int: # Initialize the minimum price to a very large value min_price = float(\'inf\') # Initialize maximum profit to 0 max_profit = 0 # Iterate through the list of prices for price in prices: # Update the minimum price if current price is lower if price < min_price: min_price = price # Calculate the profit if we sell at current price profit = price - min_price # Update the maximum profit if the current profit is higher if profit > max_profit: max_profit = profit # Return the maximum profit found, 0 if no profit is possible return max_profit"},{"question":"You are given an array of n integers (1 ≤ n ≤ 10^5). You need to process m (1 ≤ m ≤ 3·10^5) queries on this array. The queries can be of the following types: 1. Update an element at a specific position. 2. Compute the sum of elements in a given range. Here\'s the detailed format of the input: - The first line of the input contains an integer n, the number of elements in the array. - The second line contains n integers a1, a2, ..., an, the elements of the array. - The third line contains an integer m, the number of queries. - Each of the next m lines contains a query in one of the following forms: - \\"1 x val\\" means update the element at position x (1-based index) to val. - \\"2 l r\\" means compute the sum of elements from index l to index r (1-based index). For each query of the second type, output the result on a new line. Note: Think about the efficiency of your solution given the constraints. A naive approach might not be fast enough to handle the upper limits of the inputs. # Example Input ``` 5 1 2 3 4 5 3 2 1 5 1 3 10 2 1 5 ``` Output ``` 15 22 ``` # Explanation - The initial array is [1, 2, 3, 4, 5]. - The first query asks for the sum of elements from index 1 to 5, which is 1 + 2 + 3 + 4 + 5 = 15. - The second query updates the element at index 3 to 10, so the array becomes [1, 2, 10, 4, 5]. - The third query asks for the sum of elements from index 1 to 5 again, which is now 1 + 2 + 10 + 4 + 5 = 22.","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) self.build(array) def build(self, array): for i in range(self.n): self.tree[self.n + i] = array[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[pos * 2] + self.tree[pos * 2 + 1] def query(self, left, right): res = 0 left += self.n right += self.n while left < right: if left % 2: res += self.tree[left] left += 1 if right % 2: right -= 1 res += self.tree[right] left //= 2 right //= 2 return res def process_queries(n, arr, m, queries): st = SegmentTree(arr) results = [] for query in queries: if query[0] == 1: index = query[1] - 1 value = query[2] st.update(index, value) elif query[0] == 2: left = query[1] - 1 right = query[2] results.append(st.query(left, right)) return results"},{"question":"You are given a string S consisting of lowercase English letters only. You are asked to transform this string such that all characters occurring multiple times in the string are removed, leaving only distinct characters present in the original order they appeared. Write a function `remove_duplicates_preserve_order` that takes a string S as input and returns a string with all characters occurring multiple times removed, maintaining the relative order of the unique characters in the original string. # Input Format - A single line containing the string S (1 ≤ |S| ≤ 10^6). # Output Format - A single line containing the transformed string with all characters occurring multiple times removed. # Example Input ``` abacabad ``` Output ``` cd ``` Input ``` abcdefghijklmnopqrstuvwxyz ``` Output ``` abcdefghijklmnopqrstuvwxyz ``` # Note In the first example, the characters \'a\' and \'b\' are repeated in the string. After removing all such characters, we are left with \'c\' and \'d\' which are unique in the order they appeared. In the second example, all characters are unique and thus the string remains unchanged. The function\'s expected complexity approximately is O(n).","solution":"def remove_duplicates_preserve_order(S): from collections import Counter # First, count the frequency of each character in the string char_count = Counter(S) # Filter the characters that appear only once and keep their relative order. result = \'\'.join([char for char in S if char_count[char] == 1]) return result"},{"question":"An ancient civilization left behind a grid of numbers carved into stone tablets. This grid is represented by an n x n matrix where each cell contains an integer value. To decipher the message hidden within the grid, explorers must compute a special value called the \\"Diagonal Sum Difference\\" (DSD). The DSD is defined as the absolute difference between the sum of the primary diagonal and the sum of the secondary diagonal of the matrix. The primary diagonal consists of the elements from the top-left to the bottom-right corners, while the secondary diagonal consists of the elements from the top-right to the bottom-left corners. Given the matrix, help the explorers determine the DSD. The first line contains an integer n (1 ≤ n ≤ 100), denoting the size of the matrix. The next n lines contain n space-separated integers representing the elements of the matrix. Output a single integer — the Diagonal Sum Difference (DSD). **Sample Input 1:** ``` 3 11 2 4 4 5 6 10 8 -12 ``` **Sample Output 1:** ``` 15 ``` **Explanation:** The primary diagonal sum is 11 + 5 + (-12) = 4. The secondary diagonal sum is 4 + 5 + 10 = 19. The absolute difference is |4 - 19| = 15.","solution":"def diagonal_sum_difference(matrix): n = len(matrix) primary_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): primary_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n - 1 - i] return abs(primary_diagonal_sum - secondary_diagonal_sum)"},{"question":"You are given a 2D grid of size n times m, consisting of cells with either 0\'s (water) or 1\'s (land). An island is created by connecting adjacent lands horizontally or vertically. You need to find the number of islands present in the grid. A group of connected lands can be considered an island if it is surrounded by water or the edge of the grid. The task is to determine the number of isolated islands in the grid. # Input - The first line contains two integers n and m (1 leq n, m leq 300), the number of rows and columns in the grid. - The next n lines contain m integers (either 0 or 1), representing the grid. # Output - Return a single integer, the number of islands in the grid. # Example **Input:** ``` 4 5 1 1 0 0 0 1 1 0 0 1 0 0 0 1 1 0 0 0 0 0 ``` **Output:** ``` 3 ``` # Explanation In the example, there are three islands: - The first island is composed of the cells (1,1), (1,2), (2,1), and (2,2). - The second island is the cell (2,5). - The third island consists of the cells (3,4) and (3,5). You may assume all four grid edges are surrounded by water. The islands are counted from the top-left corner with coordinates starting at (1,1).","solution":"def num_islands(grid): Returns the number of islands in the given grid of 0\'s and 1\'s. if not grid: return 0 n, m = len(grid), len(grid[0]) visited = [[False] * m for _ in range(n)] def dfs(i, j): Depth-first search to mark all cells connected to (i, j). if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] == 0 or visited[i][j]: return visited[i][j] = True directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for di, dj in directions: dfs(i + di, j + dj) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == 1 and not visited[i][j]: dfs(i, j) island_count += 1 return island_count # Example usage grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 0] ] print(num_islands(grid)) # Output: 3"},{"question":"Given an array of integers, you need to find a contiguous subarray whose sum is the largest among all possible subarrays of the given array. Implement a function that computes this maximum sum. Your solution should have a time complexity of O(n). # Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains n space-separated integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4) — the elements of the array. # Output: - Print a single integer — the sum of the contiguous subarray with the largest sum. # Example: Input: 8 -2 1 -3 4 -1 2 1 -5 4 Output: 6 # Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum = 6.","solution":"def max_subarray_sum(arr): Finds the sum of the contiguous subarray with the largest sum. Args: - arr: List of integers representing the array. Returns: - The maximum sum of the contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of integers where every element appears twice except for one. Find that single one. Implement the function `findSingle` that takes a list of integers `arr` and returns the integer that appears only once. # Constraints - The length of the array is at least 1 and at most 10^5. - Each integer in the array is between -10^6 and 10^6. # Input Format - The first line contains a single integer, n, the length of the array. - The second line contains n integers representing the elements of the array. # Output Format - Output a single integer which is the unique element in the array. # Sample Input ``` 5 4 1 2 1 2 ``` # Sample Output ``` 4 ``` # Explanation In the example above, every element except for 4 appears twice, so the output is 4. # Additional Information - You must make sure to use an efficient approach, keeping in mind the constraints. - Pay attention to edge cases like when the array contains negative integers.","solution":"def findSingle(arr): Returns the single integer in the array that does not appear twice. result = 0 for num in arr: result ^= num return result"},{"question":"You are given a tree with n vertices, rooted at vertex 1. Each vertex is assigned a positive integer weight. Your task is to process Q queries, where in each query you are given an integer v and you must find the vertex with the highest weight in the subtree of vertex v. The tree is represented by n edges, with each edge connecting two vertices. The weight of the vertices is given as an array of length n. Formally, each query requires you to: 1. Identify all vertices in the subtree of vertex v. 2. Determine the vertex among them with the maximum weight. The first line contains two integers n (1 le n le 50) and Q (1 le Q le 50) — the number of vertices in the tree and the number of queries, respectively. The second line contains n integers w_1, w_2, dots, w_n (1 le w_i le 100) representing the weights of the vertices. The following n-1 lines each contain two integers u and v (1 le u, v le n), denoting an edge between vertices u and v. The next Q lines each contain a single integer v, representing the root of the subtree for each query. For each query, print the maximum weight of the vertex in the subtree of vertex v. Example Input: 5 3 2 3 1 10 4 1 2 1 3 2 4 3 5 1 2 3 Output: 10 10 4 Explanation: In the first query, the whole tree is the subtree since the root is 1, and the maximum weight in the whole tree is 10. In the second query, the subtree rooted at 2 consists of vertices {2, 4}, and the maximum weight is 10. In the third query, the subtree rooted at 3 consists of vertices {3, 5}, and the maximum weight is 4.","solution":"def find_max_weight_in_subtree(n, weights, edges, queries): from collections import defaultdict def dfs(node, parent): subtree_nodes[node] = [node] for neighbor in tree[node]: if neighbor != parent: dfs(neighbor, node) subtree_nodes[node].extend(subtree_nodes[neighbor]) tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) subtree_nodes = {} dfs(1, -1) results = [] for v in queries: max_weight = max(weights[node-1] for node in subtree_nodes[v]) results.append(max_weight) return results"},{"question":"You are given an array of integers and a target integer. Your task is to find the number of distinct pairs `(i, j)` (with `i < j`) such that the sum of the integers at these indices is equal to the target integer. Write a function `count_pairs_with_sum` that takes in two arguments: - `arr`: a list of integers - `target`: an integer representing the target sum The function should return an integer, which is the number of distinct pairs whose sum is equal to the target. # Note: - Assume that the elements in the array and the target integer will be within the range of valid integers in Python. # Constraints: - The length of the array will be at most 1000. # Examples: Example 1: Input: ``` arr = [1, 2, 3, 4, 3] target = 6 ``` Output: ``` 2 ``` Explanation: The pairs with sum equal to 6 are (2, 4) and (3, 3). Example 2: Input: ``` arr = [1, 1, 1, 1] target = 2 ``` Output: ``` 6 ``` Explanation: The pairs with sum equal to 2 are (1, 1) repeated 6 times with different indices. # Implementation Implement the function `count_pairs_with_sum(arr: List[int], target: int) -> int`: ```python def count_pairs_with_sum(arr, target): # Write your code here pass ```","solution":"def count_pairs_with_sum(arr, target): Returns the number of distinct pairs (i, j) such that arr[i] + arr[j] == target and i < j. count = 0 seen = {} for num in arr: complement = target - num if complement in seen: count += seen[complement] if num in seen: seen[num] += 1 else: seen[num] = 1 return count"},{"question":"Imp just got his hands on a collection of valuable gemstones which he wants to sell in order to gather enough gold for a grand magic ritual. Each gemstone has a specific weight and value, and Imp needs to maximize the total value of the gemstones he sells without exceeding a certain weight limit that he can carry at one go. Given a set of gemstones, where each gemstone i has a weight wi and a value vi, and a maximum weight limit W that Imp can carry, determine the maximum value that Imp can achieve by selecting a subset of the gemstones whose total weight does not exceed W. The first line of the input contains two integers n and W (1 ≤ n ≤ 1000, 1 ≤ W ≤ 10000), where n is the number of gemstones and W is the maximum weight limit Imp can carry. The next n lines each contain two integers wi and vi (1 ≤ wi ≤ 1000, 1 ≤ vi ≤ 10000) representing the weight and value of each gemstone. Output a single integer — the maximum value of the gemstones that Imp can sell without exceeding the weight limit W. **Example:** Input: ``` 4 10 5 10 4 40 6 30 3 50 ``` Output: ``` 90 ``` Explanation: Imp can carry the second and fourth gemstones for a total weight of 4 + 3 = 7 and a total value of 40 + 50 = 90. This selection does not exceed the weight limit of 10. **Note:** This problem can be solved using dynamic programming techniques. Consider creating a matrix where rows correspond to gemstones considered up to that point and columns correspond to weight limits, and build up the solution iteratively.","solution":"def knapsack(n, W, items): dp = [[0] * (W + 1) for _ in range(n + 1)] for i in range(1, n + 1): wi, vi = items[i - 1] for w in range(W + 1): if wi <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - wi] + vi) else: dp[i][w] = dp[i - 1][w] return dp[n][W]"},{"question":"You are given two strings s1 and s2. Both strings consist of lowercase English letters. You need to transform string s1 into string s2 using a series of operations. In one operation, you can perform one of the following: 1. Add a single character at any position in the string. 2. Remove a single character from any position in the string. 3. Replace a single character in the string with another character. Write a function that returns the minimum number of operations required to transform s1 into s2. # Input - Two strings s1 and s2 (1 ≤ |s1|, |s2| ≤ 2000) # Output - An integer representing the minimum number of operations required. # Example Input ``` s1 = \\"intention\\" s2 = \\"execution\\" ``` Output ``` 5 ``` # Explanation - To transform \\"intention\\" into \\"execution\\", the operations could be as follows: 1. Replace \'i\' with \'e\': \\"entention\\" 2. Replace \'n\' with \'x\': \\"extention\\" 3. Replace \'t\' with \'c\': \\"excention\\" 4. Replace \'i\' with \'u\': \\"executnion\\" 5. Remove \'n\': \\"execution\\" This results in a total of 5 operations. # Constraints - The function should efficiently handle input strings with lengths up to 2000. - The problem requires considering all possible operations to find the minimal count. Dynamic programming is a suitable approach for solving this problem efficiently.","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2. len1, len2 = len(s1), len(s2) # Create a 2D DP array, where dp[i][j] represents the minimum edit distance # to convert s1[0:i] to s2[0:j] dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] # Initialize first column and first row of the DP array for i in range(len1 + 1): dp[i][0] = i # If s2 is empty, we need i deletions for j in range(len2 + 1): dp[0][j] = j # If s1 is empty, we need j insertions # Fill the DP array for i in range(1, len1 + 1): for j in range(1, len2 + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + 1) # Replacement return dp[len1][len2]"},{"question":"You are given a string s consisting of lowercase English letters and a string t representing a subsequence pattern. Your goal is to find the starting indices of all the anagrams of t in s. An anagram of a string is a rearrangement of its characters into a new string. For example, \\"abc\\" is an anagram of \\"bca\\" and \\"acb.\\" Write a function `find_anagrams(s: str, t: str) -> List[int]` that returns a list of starting indices of all the anagrams of t within s. The order of indices in the output list does not matter. # Function Signature ```python def find_anagrams(s: str, t: str) -> List[int]: ``` # Input - `s`: A string (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. - `t`: A string (1 ≤ |t| ≤ 10^5) consisting of lowercase English letters. # Output - A list of integers representing the starting indices of all the anagrams of t within s. # Example Example 1 - **Input**: s = \\"cbaebabacd\\", t = \\"abc\\" - **Output**: [0, 6] - **Explanation**: The substring \\"cba\\" (starting at index 0) and \\"bac\\" (starting at index 6) are anagrams of \\"abc\\". Example 2 - **Input**: s = \\"abab\\", t = \\"ab\\" - **Output**: [0, 1, 2] - **Explanation**: The substring \\"ab\\" (starting at index 0), \\"ba\\" (starting at index 1), and \\"ab\\" (starting at index 2) are anagrams of \\"ab\\". # Constraints - You must minimize the time complexity of your solution. - The function should work efficiently even when both strings are at their maximum length.","solution":"from typing import List from collections import Counter def find_anagrams(s: str, t: str) -> List[int]: Finds the starting indices of all the anagrams of t in s. len_s, len_t = len(s), len(t) if len_t > len_s: return [] t_counter = Counter(t) window_counter = Counter(s[:len_t]) result = [] if window_counter == t_counter: result.append(0) for i in range(len_t, len_s): start_index = i - len_t + 1 window_counter[s[i]] += 1 window_counter[s[start_index - 1]] -= 1 if window_counter[s[start_index - 1]] == 0: del window_counter[s[start_index - 1]] if window_counter == t_counter: result.append(start_index) return result"},{"question":"You have an array of integers, and your task is to find the minimum number of contiguous subarrays you need to remove in order for the remaining array to become strictly increasing. A strictly increasing array is an array where each element is greater than the previous one. For example, [1, 3, 4, 7] is strictly increasing, but [1, 3, 2, 4] is not. The first line contains an integer n — the number of elements in the array (1 leq n leq 100). The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 100) — the elements of the array. Output a single integer — the minimum number of contiguous subarrays that need to be removed. Example: Input: 5 4 3 5 1 6 Output: 2 Explanation: By removing the first subarray [4, 3] and the second subarray [5, 1], we are left with the array [6], which is strictly increasing.","solution":"def min_removals_to_make_increasing(arr): n = len(arr) if n == 1: return 0 # Length of longest increasing subsequence ending at index i dp = [1] * n for i in range(1, n): for j in range(i): if arr[j] < arr[i]: dp[i] = max(dp[i], dp[j] + 1) # Length of longest increasing subsequence in the array lis_length = max(dp) # Minimum number of elements to remove to get strictly increasing array min_removals = n - lis_length return min_removals"},{"question":"The ancient kingdom of Treeland is composed of N cities connected by N-1 roads, forming a tree structure. The king wants to fortify Treeland by placing castles in some of the cities. To ensure efficient administration, the king requires each castle to control a segment of cities such that every city is controlled by exactly one castle. However, placing castles and maintaining them is costly, so the king has specified a maximum limit of K castles. The requirement is that the maximum distance between any city and the closest castle should be minimized. The distance between two cities is defined as the number of roads in the shortest path connecting them. Given the structure of Treeland and the maximum number of castles that can be placed, determine the minimum possible maximum distance between any city and the closest castle. # Input - The first line of input contains two integers, N and K (1 leq K leq N leq 100,000), the number of cities and the maximum number of castles, respectively. - Each of the following N-1 lines contains two integers, U and V (1 leq U, V leq N), indicating that there is a road between city U and city V. # Output - Output a single integer representing the minimum possible maximum distance between any city and the closest castle. # Example Input ``` 7 2 1 2 2 3 3 4 4 5 5 6 6 7 ``` Output ``` 3 ``` In this example, with seven cities connected in a line and allowing up to 2 castles, the optimal placement puts a castle in cities 3 and 6 (or similar positions), ensuring the maximum distance from any city to the closest castle is 3.","solution":"from collections import deque, defaultdict def bfs_longest(node, adjacency_list): queue = deque([(node, 0)]) visited = set() visited.add(node) farthest_node = node max_distance = 0 while queue: current, distance = queue.popleft() for neighbor in adjacency_list[current]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) if distance + 1 > max_distance: max_distance = distance + 1 farthest_node = neighbor return farthest_node, max_distance def min_max_distance(N, K, roads): if K >= N: return 0 adjacency_list = defaultdict(list) for U, V in roads: adjacency_list[U].append(V) adjacency_list[V].append(U) # Find one endpoint of the tree diameter node, _ = bfs_longest(1, adjacency_list) # Find the other endpoint and the actual diameter length farthest, diameter = bfs_longest(node, adjacency_list) # Binary search on the longest distance low, high = 1, (diameter // 2) + 1 while low < high: mid = (low + high) // 2 if can_place_castles(N, K, adjacency_list, mid): high = mid else: low = mid + 1 return low def can_place_castles(N, K, adjacency_list, max_dist): visited = set() num_castles = 0 def dfs(node, parent): farthest = 0 for neighbor in adjacency_list[node]: if neighbor == parent: continue if neighbor in visited: continue dist = dfs(neighbor, node) + 1 if dist > max_dist: num_castles_needed[num_castles_needed[\'count\'] < K] = 1 dist = 0 num_castles_needed[\'count\'] += 1 farthest = max(farthest, dist) return farthest num_castles_needed = {\'count\': 1} dfs(1, -1) return num_castles_needed[\'count\'] <= K"},{"question":"Given an array of n non-negative integers and an integer k, you are required to find the longest contiguous subsequence of the array for which the bitwise OR operation of all its elements is at most k. The bitwise OR operation of a sequence [b1, b2, ..., bm] is defined as (((b1 | b2) | b3) | ... | bm), where \\"|\\" denotes the bitwise OR operation. The first line of the input contains two integers n and k (1 ≤ n ≤ 100,000, 0 ≤ k ≤ 1,000,000), the number of elements in the array and the maximum allowed value of the bitwise OR for the contiguous subsequence. The second line contains n non-negative integers ai (0 ≤ ai ≤ 1,000,000), the elements of the array. Output a single integer denoting the length of the longest contiguous subsequence for which the bitwise OR is at most k. If no such subsequence exists, output 0. **Example:** Input: 5 6 1 2 4 6 8 Output: 3 In the example, the longest subsequence that matches the criteria is [1, 2, 4] or [2, 4, 0], both have an inclusive bitwise OR of 7 ≤ k. Another valid subsequence is [4, 2, 1]. Note that the subsequence [4,6,8] has an OR value 12 which exceeds 6(≤k). **Explanation:** - The subsequence [1] has OR 1, [1, 2] has OR 3, [1, 2, 4] has OR 7 - The subsequence [2] has OR 2, [2, 4] has OR 6, [2, 4, 6] has OR 14 - The subsequence [4] has OR 4, [4, 6] has OR 6 - The subsequence [6] has OR 6, [6, 8] has OR 14 - The subsequence [8] has OR 8 which exceeds k","solution":"def longest_subsequence_with_bitwise_or_at_most_k(n, k, array): Finds the longest contiguous subsequence for which the bitwise OR operation of all its elements is at most k. max_length = 0 current_or = 0 left = 0 for right in range(n): current_or |= array[right] while current_or > k and left <= right: current_or ^= array[left] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a city layout represented as a grid of size n x m, you need to navigate from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). However, there are some obstacles in the grid marked as -1, and empty cells are marked as 0. You can move either right or down at each step. Your task is to determine the number of distinct paths that exist from the top-left corner to the bottom-right corner, given the obstacles. Input: - The first line contains two integers, n and m (1 ≤ n, m ≤ 100), representing the grid\'s dimensions. - The next n lines each contain m integers, representing the grid where each element is either 0 (empty cell) or -1 (obstacle). Output: - Print a single integer representing the number of distinct paths from the top-left corner to the bottom-right corner. Example: Input: 3 3 0 0 0 0 -1 0 0 0 0 Output: 2 Constraints: - You cannot move to a cell containing an obstacle. - If the start or end point is an obstacle, return 0. Note: In the example given, there are 2 distinct paths from the top-left to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def count_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == -1 or grid[n-1][m-1] == -1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == -1: dp[i][j] = 0 continue if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are organizing a trivia quiz competition with multiple rounds. There are n players competing, and each player competes in m rounds. Players are given scores for each round they participate in. Let\'s focus on the players. They are indexed from 1 to n. The score of the i-th player in the j-th round is given by s_{ij}. At the end of the competition, you need to determine the overall leader of the competition. A player is considered the leader if their total score across all rounds is the highest among all players. In the event of a tie (i.e., two or more players having the same highest total score), the player with the highest individual round score is considered the leader. If there\'s still a tie (i.e., two or more players have the same highest total score and their highest individual round scores are also the same), the player with the lowest index is considered the leader. Can you determine which player is the overall leader? The first line contains two integers n (2 leq n leq 100) and m (1 leq m leq 50) — the number of players and the number of rounds. The next n lines each contain m integers. The j-th integer in the i-th line is s_{ij} (0 leq s_{ij} leq 1000), representing the score of the i-th player in the j-th round. Output the index of the player who is the overall leader. **Examples** Input: ``` 3 3 10 20 30 30 20 10 20 20 20 ``` Output: ``` 1 ``` Explanation: - Player 1\'s total score: 60, highest round score: 30 - Player 2\'s total score: 60, highest round score: 30 - Player 3\'s total score: 60, highest round score: 20 Players 1 and 2 are tied in total scores and their highest round scores are also the same. The player with the lowest index among them is player 1. Input: ``` 2 2 5 10 20 5 ``` Output: ``` 2 ``` Explanation: - Player 1\'s total score: 15, highest round score: 10 - Player 2\'s total score: 25, highest round score: 20 Player 2 has the highest total score.","solution":"def find_overall_leader(n, m, scores): leader_index = 0 highest_total_score = -1 highest_single_score = -1 for i in range(n): total_score = sum(scores[i]) single_high_score = max(scores[i]) if (total_score > highest_total_score) or (total_score == highest_total_score and single_high_score > highest_single_score) or (total_score == highest_total_score and single_high_score == highest_single_score and i < leader_index): highest_total_score = total_score highest_single_score = single_high_score leader_index = i return leader_index + 1 # returning 1-based index"},{"question":"Given a string, return the index of the first non-repeating character. If there\'s no non-repeating character, return -1. The string contains only lowercase English letters. Write a function that takes a string as an input and outputs the index of the first non-repeating character. Your implementation should have a time complexity of O(n). Example input and output: ```python Function signature: def first_non_repeating_character(s: str) -> int Example: first_non_repeating_character(\\"leetcode\\") -> 0 first_non_repeating_character(\\"loveleetcode\\") -> 2 first_non_repeating_character(\\"aabbcc\\") -> -1 ```","solution":"def first_non_repeating_character(s: str) -> int: Returns the index of the first non-repeating character in the string. If no such character exists, returns -1. char_count = {} # First pass to count the frequency of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to find the first non-repeating character for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Design a function `group_emails(emails: List[str]) -> List[str]` that groups emails by their domain and local parts under the following conditions: - If an email address contains multiple dots before the \'@\' symbol (local part), they should be considered as a single dot. For example, \\"a.b.c@example.com\\", \\"abc@example.com\\", \\"a.b.c.@example.com\\" are considered the same. - If an email address contains a plus sign \'+\' before \'@\' symbol, ignore all the characters after the plus sign. Given a list of email addresses, your function should return a list where each email represents a unique canonical form as described above. Example: ```python emails = [\\"test.email+alex@leetcode.com\\", \\"test.e.mail+bob.cathy@leetcode.com\\", \\"testemail+david@lee.tcode.com\\"] print(group_emails(emails)) ``` Output: ``` [\\"testemail@leetcode.com\\", \\"testemail@lee.tcode.com\\"] ``` Explanation: ``` The email \\"test.email+alex@leetcode.com\\" is modified to \\"testemail@leetcode.com\\". The email \\"test.e.mail+bob.cathy@leetcode.com\\" is modified to \\"testemail@leetcode.com\\". The email \\"testemail+david@lee.tcode.com\\" is modified to \\"testemail@lee.tcode.com\\". We have two unique emails under the described rules: \\"testemail@leetcode.com\\" and \\"testemail@lee.tcode.com\\". ``` Note: 1. The local part may contain multiple dots and plus signs, follow the rules ensuring non-redundancy. 2. Return unique list of simplified emails. 3. The order of the result list does not matter. 4. The input strings will always be valid email addresses according to the rules of email address formats.","solution":"from typing import List def group_emails(emails: List[str]) -> List[str]: unique_emails = set() for email in emails: local, domain = email.split(\'@\') local = local.split(\'+\')[0] local = local.replace(\'.\', \'\') unique_emails.add(local + \'@\' + domain) return list(unique_emails)"},{"question":"You are given a string containing only letters \'a\' and \'b\'. You can remove any two adjacent letters \'ab\' or \'ba\' from the string any number of times. Calculate the length of the smallest string possible after performing these operations. # Input A single line containing a string consisting of only characters \'a\' and \'b\' with a length of at most (10^5). # Output Print a single integer — the length of the smallest string possible after performing the described operations. # Example Input ``` ababbba ``` Output ``` 1 ``` Input ``` aaaabbbb ``` Output ``` 0 ```","solution":"def smallest_string_length(s): Returns the length of the smallest string possible after removing \'ab\' or \'ba\' stack = [] for char in s: if stack and ((stack[-1] == \'a\' and char == \'b\') or (stack[-1] == \'b\' and char == \'a\')): stack.pop() else: stack.append(char) return len(stack)"},{"question":"Emily is an avid reader and likes to read books at a steady pace. She has \'n\' books in her collection, each with a different number of pages. Emily wants to read exactly \'k\' books from her collection. However, she wants to read books that have the smallest variance in the number of pages among them, so that the difference between the book with the most pages and the book with the fewest pages is minimized. Help Emily determine the minimum possible difference in pages between the thickest and the thinnest book she reads. The first line of the input contains two integers, n and k (1 ≤ k ≤ n ≤ 100), where n is the total number of books and k is the number of books Emily wants to read. The second line contains n space-separated positive integers p1, p2, ..., pn (1 ≤ pi ≤ 10,000), where pi is the number of pages in the i-th book. Output the minimum possible difference between the maximum and minimum number of pages among the k books Emily chooses to read.","solution":"def min_page_variance(n, k, pages): Given the total number of books `n` and the number of books to read `k`, as well as the list of pages in each book `pages`, returns the minimum possible difference between the maximum and minimum number of pages among the `k` books Emily chooses to read. # Sort the list of pages pages.sort() # Initialize the minimum variance to a large number min_variance = float(\'inf\') # Iterate through the sorted pages list with a window of size `k` for i in range(n - k + 1): current_variance = pages[i + k - 1] - pages[i] if current_variance < min_variance: min_variance = current_variance return min_variance"},{"question":"You are given a rectangular grid with n rows and m columns. Each cell in the grid either contains an obstacle \'#\' or is empty \'.\'. You need to check whether there exists a path from the top-left corner (1, 1) to the bottom-right corner (n, m) such that you move only right or down at each step and you visit each empty cell exactly once. Each test contains multiple test cases. The first line contains one integer t (1 le t le 100) — the number of test cases. The test cases follow. The first line of each test case contains two integers n and m (1 le n, m le 50) — the number of rows and columns in the grid, respectively. Each of the next n lines contains a string of length m consisting of characters \'#\' and \'.\' representing the obstacle and empty cells of the grid respectively. For each test case, print \\"YES\\" if there exists such a path, otherwise print \\"NO\\". Example: ``` Input 3 3 3 #.# .#. .#. 2 2 .. .. 1 3 .#. Output NO YES NO ``` Explanation: - In the first test case, there is no path from (1, 1) to (3, 3) that visits each empty cell exactly once. - In the second test case, there is a path that goes through every cell once: (1,1) -> (2,1) -> (2,2). - In the third test case, reaching the end cell is impossible due to the obstacle in the middle.","solution":"def can_visit_each_empty_cell_once(n, m, grid): from collections import deque directions = [(0, 1), (1, 0)] # Right, Down def bfs(): q = deque([(0, 0)]) visited = [[False] * m for _ in range(n)] visited[0][0] = True cells_visited = 1 while q: x, y = q.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': q.append((nx, ny)) visited[nx][ny] = True cells_visited += 1 return visited[n-1][m-1] and cells_visited == sum(row.count(\'.\') for row in grid) # Check if start and finish positions are valid if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" return \\"YES\\" if bfs() else \\"NO\\" def solve(t, test_cases): results = [] for i in range(t): n, m, grid = test_cases[i] result = can_visit_each_empty_cell_once(n, m, grid) results.append(result) return results"},{"question":"Alice is hosting a dinner party, and she has a list of n guests, each of whom has a certain dietary preference. Alice wants to arrange the seating in such a way that guests with similar dietary preferences do not sit next to each other to avoid any potential conflicts or discomfort. A seating arrangement is represented by a string of length n, where each character in the string represents the dietary preference of a guest. A \'V\' represents vegetarians, \'N\' represents non-vegetarians, and \'G\' represents guests with gluten-free preferences. Write a program to determine if it is possible to arrange the guests in a seat ordering that satisfies Alice\'s requirement. If such an arrangement is possible, print \\"YES\\". Otherwise, print \\"NO\\". The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the number of guests. The second line contains a string of length n composed of characters \'V\', \'N\', and \'G\', representing the dietary preferences of each guest. Example: Input: 6 VNVNGG Output: YES Input: 3 VVV Output: NO In the first sample, one possible arrangement is \\"VNVGNG\\". No two guests with the same dietary preference sit next to each other. In the second sample, it is impossible to arrange the guests such that guests with the same dietary preference do not sit next to each other.","solution":"def can_arrange_seating(n, dietary_preferences): Determines if it is possible to arrange the guests such that no two guests with the same dietary preference sit next to each other. Args: n: int, number of guests dietary_preferences: str, string representation of dietary preferences of guests Returns: str: \\"YES\\" if such an arrangement is possible, otherwise \\"NO\\" from collections import Counter # Count the frequency of each dietary preference freq = Counter(dietary_preferences) # Find the maximum count of any dietary preference max_count = max(freq.values()) # If the maximum count is more than half the total number of guests (rounded up), it is not possible if max_count > (n + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"In a galaxy far, far away, there\'s a system of planets connected by bidirectional hyperspace routes. Each planet is known by a unique integer identifier from 1 to N. The Galactic Council wants to ensure there\'s a way to travel between any two planets, either directly or via other planets, using the least amount of hyperspace routes possible. You are given M pairs of integers (u, v) representing the planets directly connected by a hyperspace route. If the galaxy is already connected optimally, the Galactic Council will be happy. Otherwise, you need to determine the minimum number of additional hyperspace routes necessary to make it so that there is a path between every pair of planets. The input consists of two integers N and M (1 ≤ N ≤ 1000, 0 ≤ M ≤ 10^5), the number of planets and hyperspace routes, respectively. The next M lines each contain two integers u and v (1 ≤ u, v ≤ N) indicating that there is a hyperspace route between planets u and v. Print a single integer — the minimum number of additional hyperspace routes needed to connect all planets. # Example Input: ``` 5 3 1 2 2 3 4 5 ``` Output: ``` 1 ``` Input: ``` 4 4 1 2 2 3 3 4 4 1 ``` Output: ``` 0 ```","solution":"def min_additional_routes(N, M, edges): Determine the minimum number of additional hyperspace routes needed to ensure there is a path between every pair of planets. Parameters: N (int): The number of planets. M (int): The number of hyperspace routes. edges (list of tuples): Each tuple contains two integers u and v indicating a direct route between planet u and planet v. Returns: int: The minimum number of additional hyperspace routes required. from collections import defaultdict, deque # Construct the graph as an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Count the number of connected components visited = [False] * (N + 1) connected_components = 0 for i in range(1, N + 1): if not visited[i]: bfs(i, visited) connected_components += 1 # The number of additional routes needed to connect all components is (connected_components - 1) return connected_components - 1"},{"question":"David is an avid traveler and loves to explore new places. He is also interested in cartography and geographical representations. One day, while planning his next adventure, David came across a curious map of the region he wants to explore. The map is represented by an n x m grid where each cell contains a number indicating the altitude at that particular point. David wants to find the highest point he can reach from any given starting point (p, q) on the map by following a particular route. He can move from a cell to any of its 4 adjacent cells (up, down, left, right) as long as the altitude of the next cell is greater than or equal to the altitude of the current cell. He wants to know the highest point he can reach starting from any given point on the map. The first line contains two integers: n and m (1 ≤ n, m ≤ 100). They represent the dimensions of the grid. The next n lines contain m space-separated integers each, representing the altitude of each cell in the grid (1 ≤ altitude ≤ 10000). Print an n x m grid, where each cell contains the highest altitude that can be reached starting from that cell according to the rules mentioned above. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 9 9 9 9 9 9 9 9 9","solution":"def highest_point_reachable(n, m, grid): def dfs(x, y, visited): if (x, y) in visited: return grid[x][y] visited.add((x, y)) max_altitude = grid[x][y] for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] >= grid[x][y]: max_altitude = max(max_altitude, dfs(nx, ny, visited)) grid[x][y] = max_altitude return max_altitude result = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): result[i][j] = dfs(i, j, set()) return result # Example input n = 3 m = 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # Get the result output = highest_point_reachable(n, m, grid) for row in output: print(\\" \\".join(map(str, row)))"},{"question":"You are given two strings, `s` and `t`, both of which consist of lowercase English letters. You need to determine whether you can make `s` equal to `t` by performing any number of the following operation: - Choose any two adjacent characters in the string `s` and swap them. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100,000) — the length of strings `s` and `t` respectively. The second line contains the string `s`. The third line contains the string `t`. Output \\"YES\\" if you can make `s` equal to `t` using the described operation, otherwise output \\"NO\\". Note that strings `s` and `t` can be rearranged and you can perform the swap operation any number of times. Example: Input: ``` 6 6 abcdef abcfde ``` Output: ``` YES ``` Input: ``` 3 3 abc bca ``` Output: ``` YES ``` Input: ``` 4 4 abcd abce ``` Output: ``` NO ```","solution":"def can_make_equal(s, t): Determine whether string s can be made equal to string t using the described operation. Parameters: s (str): First string t (str): Second string Returns: str: \\"YES\\" if s can be rearranged to match t, \\"NO\\" otherwise # We can make s equal to t if they both have the same characters in any order if sorted(s) == sorted(t): return \\"YES\\" else: return \\"NO\\""},{"question":"You are working for a logistics company that needs to optimally distribute packages to delivery trucks. There are n trucks and m packages, each truck has a weight limit which it cannot exceed while carrying packages. Additionally, every package has a specific weight associated with it. The goal is to assign packages to trucks such that each truck carries packages within its weight limit and the maximum number of packages are delivered. You are provided with: - n, the number of trucks - m, the number of packages - an array capacity of length n, where capacity[i] is the maximum weight that truck i can carry - an array weight of length m, where weight[j] is the weight of package j You need to determine the maximum number of packages that can be delivered while respecting the weight limits of the trucks. If it is not possible to deliver any package, return 0. The first line of the input consists of two integers, n and m (1 ≤ n, m ≤ 100). The second line contains n integers representing the capacity array (1 ≤ capacity[i] ≤ 1000). The third line contains m integers representing the weight array (1 ≤ weight[j] ≤ 1000). Output a single integer representing the maximum number of packages that can be delivered. # Example Input: 5 7 10 8 15 7 9 8 5 4 3 7 5 6 Output: 7 # Explanation: All 7 packages can be assigned to the trucks: - Truck 3 carries packages with weights: 8 and 7 (total weight = 15) - Truck 1 carries packages with weights: 8 and 5 (total weight = 13) - Truck 2 carries packages with weights: 8 - Truck 4 carries packages with weights: 7 - Truck 5 carries packages with weights: 9","solution":"def max_packages(n, m, capacity, weight): Returns the maximum number of packages that can be delivered given the capacities of trucks and weights of packages. # Sort capacities and weights to apply a greedy approach capacity.sort(reverse=True) weight.sort(reverse=True) # Initialize a list to keep track of what each truck carries truck_load = [0] * n package_count = 0 for w in weight: for i in range(n): if truck_load[i] + w <= capacity[i]: truck_load[i] += w package_count += 1 break return package_count # Example usage: # n = 5, m = 7 # capacity = [10, 8, 15, 7, 9] # weight = [8, 5, 4, 3, 7, 5, 6] # Output should be 7"},{"question":"A store manager is organizing the inventory of a shop that sells a variety of products. Each product has a unique ID and a stock quantity. The manager wants to perform stock-taking to identify which products need restocking. A product needs restocking if its stock quantity falls below a certain threshold. You are given an integer n (1 ≤ n ≤ 100,000) representing the number of products in the inventory. The next n lines each contain a string p (a unique product ID consisting of alphanumeric characters) and an integer q (0 ≤ q ≤ 10^6) representing the product ID and the current stock quantity respectively. You are then given an integer t (0 ≤ t ≤ 10^6) representing the restocking threshold. Write a program to determine which products need restocking. Your output should be the list of product IDs in the order they were given that need restocking, one per line. If no product requires restocking, print \\"All products are sufficiently stocked\\". Input format: * The first line contains the integer n. * The next n lines each contain a string p and an integer q separated by a space. * The last line contains the integer t. Output format: * Print the product IDs that need restocking, each on a new line, in the order they appear in the input. * If no product needs restocking, print \\"All products are sufficiently stocked\\". Example: ``` 5 A123 50 B456 20 C789 100 D012 5 E345 120 30 ``` Output: ``` B456 D012 ```","solution":"def find_products_needing_restocks(n, products, threshold): Identifies products that need restocking. Args: n : int Number of products listed products : list of tuples Each tuple contains a string (product ID) and an integer (current stock quantity) threshold : int The restocking threshold Returns: list of strings List of product IDs that need restocking restock_list = [] for product_id, quantity in products: if quantity < threshold: restock_list.append(product_id) if restock_list: return restock_list else: return [\\"All products are sufficiently stocked\\"]"},{"question":"Polycarp has recently acquired a large collection of books. Each book has a unique ID number starting from 1 to n. Polycarp wants to digitize his collection by scanning and saving the books in sequence. However, he mistakenly shuffled the order of the books before he started scanning them. Now, he\'s trying to figure out the original order of the books by analyzing sequential pairs in his shuffled list. A pair (a, b) in the shuffled list is called an \\"inversion\\" if a appears before b and a > b. Polycarp suspects that the number of inversions can help him understand the extent of the shuffling. Can you help Polycarp count the number of inversions in his shuffled list? The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of books. The second line contains n unique integers separated by space, representing the shuffled order of the book IDs. Print one integer — the number of inversions in the shuffled list. Example: Input: 5 2 3 8 6 1 Output: 5 Explanation: The five inversions in the given input are (2, 1), (3, 1), (8, 6), (8, 1), and (6, 1).","solution":"def count_inversions(n, arr): Counts the number of inversions in the shuffled list. An inversion is a pair (a, b) where a appears before b and a > b. Args: n: int - The number of elements in the array. arr: List[int] - The shuffled list of book IDs. Returns: int - The number of inversions. def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all the remaining elements in # the left subarray (arr[i+1], arr[i+2], ... arr[mid]) are greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if there are any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if there are any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n-1)"},{"question":"You are given an array of n integers. You want to rearrange the array such that no two adjacent elements are coprime. Find the number of such valid permutations modulo 10^9 + 7. Two numbers are considered coprime if their greatest common divisor (gcd) is 1. First line of input data contains a single integer n (2 ≤ n ≤ 300) — length of the array. Next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — elements of the array. Output a single integer — number of valid permutations modulo 10^9 + 7. For example: [6, 8, 12] — valid permutation, because gcd(6, 8) = 2, gcd(8, 12) = 4, and gcd(12, 6) = 6. [12, 8, 6] — valid permutation, because gcd(12, 8) = 4, gcd(8, 6) = 2, and gcd(6, 12) = 6. [6, 12, 8] — valid permutation, because gcd(6, 12) = 6, gcd(12, 8) = 4, and gcd(8, 6) = 2. [12, 6, 8] — invalid permutation, because gcd(6, 8) = 2 but gcd(12, 6) = 6 and gcd(12, 8) = 4.","solution":"import math from collections import defaultdict MOD = 10**9 + 7 def permute_with_no_coprime_adj(n, arr): def gcd(x, y): while y: x, y = y, x % y return x dp = [[0] * (1 << n) for _ in range(n)] for i in range(n): dp[i][1 << i] = 1 for mask in range(1 << n): for i in range(n): if not (mask & (1 << i)): continue for j in range(n): if mask & (1 << j) or gcd(arr[i], arr[j]) == 1: continue dp[j][mask | (1 << j)] += dp[i][mask] dp[j][mask | (1 << j)] %= MOD res = 0 full_mask = (1 << n) - 1 for i in range(n): res += dp[i][full_mask] res %= MOD return res"},{"question":"You are given a string containing a mix of digits and lowercase alphabets. Your task is to find the sum of all the digits present in the string. If there are no digits in the string, the sum is considered to be 0. The input contains a single string s (1 ≤ length of s ≤ 1000) consisting of digits and lowercase alphabets only. Output the sum of all digits present in the string. Example: Input: ab1234cd56 Output: 21 Input: abcdef Output: 0","solution":"def sum_of_digits(s): Returns the sum of all digits present in the string s. Parameters: s (str): a string containing digits and lowercase alphabets Returns: int: sum of all digits present in the string return sum(int(char) for char in s if char.isdigit())"},{"question":"A group of students has n personal lockers in a row outside their classroom. Each locker has a capacity limit, and students can store their books in these lockers in sequential order (i.e., once a locker is full, books can be placed in the next locker). The problem is to determine the optimal way to distribute books among the lockers so that the maximum capacity used in any single locker is minimized. You are given two arrays: - books, where books[i] is the number of books in the i-th collection (1 <= i <= k), - capacity, where capacity[j] is the maximum number of books locker j can hold (1 <= j <= n). Your task is to find the minimum possible maximum capacity used among all the lockers after distributing all the books. Input: - The first line contains two integers, k (1 <= k <= 1000) and n (1 <= n <= 1000), the number of book collections and the number of lockers, respectively. - The second line contains k space-separated integers representing the number of books in each collection. - The third line contains n space-separated integers representing the capacity of each locker. Output: - A single integer, the minimum possible maximum capacity used among all the lockers after distributing the books. ```markdown Example: Input: 4 3 2 2 3 4 5 5 5 Output: 5 Explanation: One of the optimal ways to distribute the books is to place the collections in the lockers as follows: - Locker 1 contains books [2, 2] (4 books in total) - Locker 2 contains books [3] (3 books in total) - Locker 3 contains books [4] (4 books in total) The maximum capacity used among the lockers is 5, which is the minimum possible for this distribution. ```","solution":"def min_max_capacity(k, n, books, capacity): def can_distribute(books, capacity, max_capacity): current_locker = 0 current_load = 0 for book in books: if current_load + book > max_capacity: current_locker += 1 current_load = 0 if current_locker >= len(capacity): return False if book > capacity[current_locker]: return False current_load += book return True left = max(max(books), min(capacity)) right = sum(books) while left < right: mid = (left + right) // 2 if can_distribute(books, capacity, mid): right = mid else: left = mid + 1 return left"},{"question":"You are given a tree (an undirected connected acyclic graph) with n vertices and n-1 edges. Each vertex is labeled by a unique integer from 1 to n. You need to assign a weight to each edge such that the sum of the edge weights in the subtree rooted at any vertex is unique. The weight of an edge can be any integer between 1 and 10^6, inclusive. If there are multiple possible solutions, you may output any of them. The first line of input contains a single integer n (2 ≤ n ≤ 200,000) — the number of vertices in the tree. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), indicating that there is an edge between vertices u and v. The output should consist of n-1 lines, each containing the weight of the corresponding edge in the same order as the input. In the test example, the input tree can be represented as follows: ``` 4 1 2 1 3 1 4 ``` One possible output could be: ``` 10 20 30 ``` where the sum of edge weights in the subtree rooted at vertex 1 is 60, at vertex 2 is 10, at vertex 3 is 20, and at vertex 4 is 30. Since we need the sum of edge weights in any subtree to be unique, this output satisfies the condition.","solution":"def assign_weights(n, edges): Assigns a unique sum of edge weights for subtree sums rooted at any vertex. Parameters: n (int): Number of vertices in the tree. edges (list of tuple of int): List of edges represented by tuples (u, v). Returns: list of int: List of weights for corresponding edges. # Just assigning incremental weights for simplicity weights = [i for i in range(10, 10 * (n - 1) + 1, 10)] return weights"},{"question":"Anna is creating a new text editor that includes a sophisticated autocompletion feature. To implement this, she needs to efficiently store a list of words and process autocomplete queries. The list of words is initially empty, and she will be adding words and making queries based on prefixes. Your task is to design the autocomplete system. Specifically, implement the following functions: 1. `addWord(word)`: Adds the word to the list of words. 2. `query(prefix)`: Returns a list of all words that start with the given prefix, sorted in lexicographical order. If there are no words with the given prefix, return an empty list. # Input Format The first line contains an integer `n` (1 le n le 10^4), the number of operations. Each of the following `n` lines contains either an addition operation or a query operation: - `\\"ADD word\\"`: Adds `word` (a string of lowercase English letters) to the list of words. The length of `word` will not exceed 100. - `\\"QUERY prefix\\"`: Queries the list of words to find all words that start with `prefix` (a string of lowercase English letters, where the length of `prefix` will not exceed 100). # Output Format For each query operation, output a single line with the words that start with the given prefix, sorted in lexicographical order and separated by spaces. If no words match, output an empty line. # Example Input: ``` 8 ADD apple ADD app ADD application QUERY app ADD banana QUERY a QUERY b QUERY apple ``` Output: ``` app apple application apple app application banana apple ``` # Note - The `ADD` operations are cumulative and should affect the results of subsequent `QUERY` operations. - The words should be stored in a way that allows for efficient querying, possibly using a Trie (prefix tree) for optimal performance.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class AutocompleteSystem: def __init__(self): self.root = TrieNode() def addWord(self, word): node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def query(self, prefix): def dfs(node, prefix): if node.is_end_of_word: results.append(prefix) for char in sorted(node.children.keys()): dfs(node.children[char], prefix + char) results = [] node = self.root for char in prefix: if char not in node.children: return [] node = node.children[char] dfs(node, prefix) return results"},{"question":"In a land far away, there exists a unique system of highways and cities. The highways form a network such that each pair of cities is directly connected by exactly one highway. Each highway, however, has a different toll cost associated with it. A group of tourists is planning to visit this land, and they start their journey from city 1. They plan to travel through the land visiting certain cities and eventually arrive at city n. They don\'t mind paying the tolls, but they want to avoid paying too much. Thus, they wish to find the path from city 1 to city n such that the maximum toll cost on that path is minimized. The road network is represented as a connected undirected graph with n vertices and n-1 edges. Each edge has a unique toll cost. Your task is to determine the minimum possible value of the maximum toll that the tourists will have to pay on their journey from city 1 to city n. The first line of input contains a single integer n (2 ≤ n ≤ 100,000) – the number of cities. The subsequent n-1 lines each contain three space-separated integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), describing a highway between cities u and v with a toll cost w. Print a single integer – the minimum possible value of the maximum toll cost that the tourists will pay on their journey from city 1 to city n. **Example:** Input: ``` 5 1 2 4 1 3 1 3 4 5 3 5 3 ``` Output: ``` 3 ``` Explanation: Several paths can connect city 1 and city 5: - 1 - 3 - 5 with tolls {1, 3} (maximum toll is 3) - 1 - 3 - 4 - 5 with tolls {1, 5, 3} (maximum toll is 5) - 1 - 2 - other options involving city 2 lead to higher maximum tolls Thus, the minimum possible value for the maximum toll that has to be paid is 3.","solution":"import heapq from collections import defaultdict, deque def min_max_toll(n, highways): graph = defaultdict(list) for u, v, w in highways: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra-like approach to determine the minimum possible maximum toll def bfs_with_max_toll_limit(limit): visited = set() queue = deque([1]) while queue: node = queue.popleft() if node == n: return True visited.add(node) for neighbor, toll in graph[node]: if neighbor not in visited and toll <= limit: queue.append(neighbor) return False lo, hi = 0, max(w for _, _, w in highways) result = hi while lo <= hi: mid = (lo + hi) // 2 if bfs_with_max_toll_limit(mid): result = mid hi = mid - 1 else: lo = mid + 1 return result"},{"question":"A prestigious college is planning to hold a programming contest. As part of the preparation, they need to allocate conference rooms to ensure that multiple sessions can be held without overlapping. There are n sessions planned, each with a start and end time. Your task is to write a program to determine the minimum number of conference rooms required to host all sessions without any overlap. # Input The input consists of two lines: 1. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of sessions. 2. Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ 10^9), the start and end time of the i-th session. # Output Output a single integer representing the minimum number of conference rooms required. # Example Input ``` 3 1 4 2 5 9 12 ``` Output ``` 2 ``` # Explanation - The first two sessions overlap, so they require two separate rooms. - The third session doesn\'t overlap with the first two, so it can be held in one of the two rooms. # Constraints - Ensure that the solution runs efficiently given the possible size of the input. - Handle edge cases such as sessions that start and end at the same time.","solution":"import heapq def minConferenceRooms(n, sessions): Determine the minimum number of conference rooms required to host all sessions without overlap. Parameters: n (int): The number of sessions. sessions (list): A list of tuples, where each tuple contains the start and end time of a session. Returns: int: The minimum number of conference rooms required. if not sessions: return 0 # Sort sessions by start time sessions.sort(key=lambda x: x[0]) # Min-heap to keep track of end times of ongoing sessions heap = [] # Add the first session\'s end time to the heap heapq.heappush(heap, sessions[0][1]) # Iterate over the remaining sessions for i in range(1, n): # If the current session starts after or when the earliest session ends if sessions[i][0] >= heap[0]: # Remove the session that ended the earliest heapq.heappop(heap) # Add the current session\'s end time to the heap heapq.heappush(heap, sessions[i][1]) # The size of the heap is the number of rooms required return len(heap)"},{"question":"Given an array of integers, a \\"jump sequence\\" is a process where you start at the first element and repeatedly jump to another element in the array. Suppose the array is `arr` and its length is `n`. You start at index 0 and the value at arr[i] represents the maximum length of jump you can make from that position. Determine the minimum number of jumps needed to reach the last element of the array. You can assume that you can always reach the end of the array. The first line of the input contains an integer n (1 ≤ n ≤ 1000) - the length of the array. The second line contains n integers where each integer arr[i] (0 ≤ arr[i] ≤ 100) represents the maximum jump length from that position. Output a single integer - the minimum number of jumps needed to reach the last element. For example: Input: ``` 10 2 3 1 1 4 2 6 7 8 9 ``` Output: ``` 2 ``` Explanation: - Jump from index 0 to index 1 (arr[0] = 2 allows to jump at most 2 positions ahead). - Then jump from index 1 to index 4 (arr[1] = 3 allows to jump at most 3 positions ahead). Thus, the minimum number of jumps to reach the last element is 2.","solution":"def min_jumps_to_reach_end(arr): Determines the minimum number of jumps needed to reach the last element of the array. n = len(arr) if n == 1: return 0 jumps = 0 current_end = 0 current_farthest = 0 for i in range(n - 1): current_farthest = max(current_farthest, i + arr[i]) if i == current_end: jumps += 1 current_end = current_farthest if current_end >= n - 1: break return jumps # Sample testcase arr = [2, 3, 1, 1, 4, 2, 6, 7, 8, 9] print(min_jumps_to_reach_end(arr)) # Output: 2"},{"question":"A chef is organizing a cooking event with n different types of dishes. Each dish type i has a certain number of ingredients gi (1 ≤ gi ≤ 100). The participants are split into m teams, and each team has to prepare the dishes. The chef needs to know how many different dish types are prepared if each team uses all available ingredient packages for the types of dishes assigned to them. To simplify, assume that each dish type i is uniquely identified by its index from 1 to n. For each team, you will receive a list of indices representing the dish types they prepare, and you have to determine the total number of different dish types for that team. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) - the number of dish types and the number of teams, respectively. The second line contains n integers g1, g2, ..., gn (1 ≤ gi ≤ 100) - the number of ingredients for each dish type. Each of the next m lines contains: - An integer k (1 ≤ k ≤ n) - the number of dish types assigned to the team. - k space-separated integers - the indices of the dish types that the team will prepare. Output For each team, print the total number of different dish types they will prepare. Sample Input ``` 5 3 2 3 1 4 5 3 1 2 3 2 4 5 4 1 2 4 5 ``` Sample Output ``` 3 2 4 ``` Explanation - The first team prepares dishes 1, 2, and 3, hence they prepare 3 different dish types. - The second team prepares dishes 4 and 5, hence they prepare 2 different dish types. - The third team prepares dishes 1, 2, 4, and 5, hence they prepare 4 different dish types.","solution":"def number_of_dish_types(n, m, ingredients, teams): result = [] for team in teams: result.append(len(set(team))) return result def main(n, m, ingredients, teams_data): teams = [team_data[1:] for team_data in teams_data] return number_of_dish_types(n, m, ingredients, teams)"},{"question":"Given a binary tree, your task is to convert it into a circular doubly linked list (CDLL) in-place. The left and right pointers in the tree nodes should be used as previous and next pointers in the CDLL, respectively. The order of the nodes in the CDLL must be the same as an in-order traversal of the binary tree. The head of the CDLL must be the leftmost node in the binary tree. The last node of the CDLL should point to the head. Write a function `treeToCDLL(root)` that takes the root of the binary tree as an argument and returns the head of the CDLL. Function Signature: ```python class Node: def __init__(self, data): self.data = data self.left = None self.right = None def treeToCDLL(root: Node) -> Node: # Implementation Here ``` **Constraints:** - The tree will have at least one node and at most 100,000 nodes. - The tree nodes will only contain integer values. **Example:** Input: ``` 4 / 2 5 / 1 3 ``` Output (CDLL): ``` 1 <-> 2 <-> 3 <-> 4 <-> 5 <-> 1 (circular) ``` **Explanation:** - The output CDLL starts at the node with value 1. - The nodes are in in-order sequence: 1, 2, 3, 4, 5. - The last node (with value 5) points back to the first node (with value 1) to make it circular.","solution":"class Node: def __init__(self, data): self.data = data self.left = None # Previous pointer in CDLL self.right = None # Next pointer in CDLL def treeToCDLL(root: Node) -> Node: if not root: return None # Helper function to concatenate two doubly linked lists def concatenate(left_list: Node, right_list: Node) -> Node: if not left_list: return right_list if not right_list: return left_list # Find the last nodes of both lists left_last = left_list.left right_last = right_list.left # Connect the last node of left list with the first node of right list left_last.right = right_list right_list.left = left_last # Connect the last node of right list with the first node of left list right_last.right = left_list left_list.left = right_last return left_list # Recursive function to convert the binary tree to a doubly linked list def treeToCDLLHelper(node: Node) -> Node: if not node: return None # Recursively convert left and right subtrees left_list = treeToCDLLHelper(node.left) right_list = treeToCDLLHelper(node.right) # Make the single node circular node.left = node node.right = node # Concatenate the lists together combined_list = concatenate(left_list, node) combined_list = concatenate(combined_list, right_list) return combined_list head = treeToCDLLHelper(root) return head"},{"question":"Given a string s which consists of lowercase alphabets and the character \'*\', return the smallest lexicographical string possible by replacing all occurrences of \'*\' with exactly one lowercase alphabet. The only line of input is a string s (1 ≤ |s| ≤ 100), where s consists of lowercase alphabets and the character \'*\'. Output the smallest lexicographical string after replacing all \'*\' characters. Example: Input: \\"a*c*b\\" Output: \\"aacab\\"","solution":"def smallest_lexicographical_string(s): Replace all \'*\' characters in the string s with the smallest lexicographical characters to form the smallest possible lexicographical string. result = [] for char in s: if char == \'*\': result.append(\'a\') else: result.append(char) return \'\'.join(result)"},{"question":"You are given a string S consisting of lowercase alphabets only. You can transform the string by choosing exactly one position in the string and replacing the character at that position with any other lowercase alphabet. Your task is to determine if it is possible to transform the string into a palindrome after at most one such transformation. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input format: - A single line containing the string S. Output format: - A single line containing \\"YES\\" if it is possible to transform the string into a palindrome with at most one character change, otherwise \\"NO\\". Constraints: - Length of S is between 1 and 10^5 (inclusive).","solution":"def can_transform_to_palindrome(s): Determines if it is possible to transform the string into a palindrome with at most one character change. Returns \\"YES\\" if possible, otherwise \\"NO\\". n = len(s) mismatch_count = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: mismatch_count += 1 if mismatch_count > 1: return \\"NO\\" # If we have at most one mismatch, we can fix it by one change. return \\"YES\\" if mismatch_count <= 1 else \\"NO\\""},{"question":"Twilight Sparkle has discovered a mysterious ancient machine in Ponyville that can process a sequence of magical pulses represented by an array of integers. She needs to configure the machine in such a way that it produces a special signal pattern by rearranging the integers in a specific manner. Given an array A of n integers, the task is to rearrange A such that the summation of the difference between consecutive elements is minimized. Formally, if the rearranged sequence is B[1], B[2], ..., B[n], you need to minimize the sum ∑|B[i] - B[i-1]| for all 1 < i ≤ n. Write a function that given an array of integers, returns a new array that represents the minimum possible summation of differences after rearrangement. Function interface: ```python def optimal_rearrangement(A: List[int]) -> List[int]: # Your code here ``` # Input - An integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. - An array A of n integers (−10^9 ≤ A[i] ≤ 10^9). # Output - A list of n integers representing the minimum summation of differences after rearrangement. # Example ```python # Example Input n = 5 A = [4, 2, 1, 3, 5] # Example Output [1, 2, 3, 4, 5] ``` # Note If there are multiple valid solutions, any of them will be accepted.","solution":"from typing import List def optimal_rearrangement(A: List[int]) -> List[int]: Returns a new array that represents the minimum possible summation of differences after rearrangement by sorting the input array. return sorted(A)"},{"question":"Polycarp recently got a new job and is commuting between his home at point x=h and his office at point x=o. Each morning Polycarp checks the weather forecast to determine the speed he can safely travel. If the weather is good, Polycarp travels at a speed of g units of distance per minute, and if the weather is bad, he travels at a speed of b units of distance per minute. Given the coordinates of his home and office, the probability of good weather, and the speed of travel in both good and bad weather, determine the expected time (in minutes) Polycarp takes to travel from his home to the office. The first line contains a positive integer n (1 le n le 1000) — the number of test cases. In the following lines are written n test cases. For each test case, the input is one line containing five integers: h, o, g, b, and p (-10^8 le h,o le 10^8, 1 le g, b le 10^8, 0 le p le 100) — the coordinates of Polycarp\'s home and office, the speed of travel in good weather, the speed of travel in bad weather, and the probability of good weather in percentage, respectively. Print n numbers — the expected time in minutes Polycarp takes to travel from his home to his office for each test case, rounded to 6 decimal places. For example, let\'s consider the first test case: Polycarp lives at x=10 and his office is at x=30. In good weather, he travels at 5 units of distance per minute, and in bad weather, he travels at 2. The probability of good weather is 80%. The expected time to travel from his home to his office is: Expected time = p/100 times text{time if good weather} + (1 - p/100) times text{time if bad weather} Here, text{absolute distance} = |30 - 10| = 20. text{time if good weather} = 20/5 = 4 text{ minutes} text{time if bad weather} = 20/2 = 10 text{ minutes} p = 80 text{Expected time} = 0.80 times 4 + 0.20 times 10 = 3.2 + 2 = 5.2 text{ minutes}.","solution":"def expected_travel_time(h, o, g, b, p): Returns the expected travel time in minutes. distance = abs(o - h) time_good_weather = distance / g time_bad_weather = distance / b probability_good_weather = p / 100 probability_bad_weather = (100 - p) / 100 expected_time = (probability_good_weather * time_good_weather + probability_bad_weather * time_bad_weather) return round(expected_time, 6) def process_test_cases(test_cases): results = [] for case in test_cases: h, o, g, b, p = case results.append(expected_travel_time(h, o, g, b, p)) return results"},{"question":"A game company is developing a new board game, and they need your help to simulate a specific game scenario. The game takes place on an n x m grid, and players place their tokens on the grid according to certain rules. Two players, Alice and Bob, take turns placing their tokens on the grid. Alice starts first and places her token on any empty cell. Bob then places his token on any remaining empty cell. They continue this process until all cells on the grid are occupied or a player wins. A player wins if they have a contiguous sequence of exactly k of their tokens in a row, column, or diagonal (both main and anti-diagonals are considered). If the grid becomes fully occupied without any player winning, the game ends in a draw. You need to determine the outcome of the game given an initial configuration of the grid and a sequence of moves made by the players. The initial configuration is provided as an n x m grid where \'.\' denotes an empty cell, \'A\' denotes a cell occupied by Alice\'s token, and \'B\' denotes a cell occupied by Bob\'s token. The sequence of moves is a list of player moves, where each move is represented by a tuple (player, i, j), indicating that the player places their token on the cell at row i and column j. The grid is initially empty, and the moves list is guaranteed to be valid, i.e., all moves correspond to previously empty cells. Alice and Bob play optimally, meaning they will always choose their moves to maximize their chances of winning. The first line of input contains three integers n, m, and k (3 ≤ n, m ≤ 100, 2 ≤ k ≤ min(n, m)). The next n lines contain m characters each, representing the initial configuration of the grid. The following line contains an integer q, the number of moves made by both players (1 ≤ q ≤ n*m). Each of the next q lines contains a tuple (player, i, j), where player is either \'A\' or \'B\', and i and j are the 1-based row and column indices of the move (1 ≤ i ≤ n, 1 ≤ j ≤ m). Output the outcome of the game: - \\"Alice wins\\" if Alice has won the game. - \\"Bob wins\\" if Bob has won the game. - \\"Draw\\" if the grid is fully occupied and no player has won. Example: Input: 3 3 3 ... ... ... 9 A 1 1 B 1 2 A 1 3 B 2 1 A 2 2 B 2 3 A 3 1 B 3 2 A 3 3 Output: Alice wins","solution":"def check_winner(grid, n, m, k): # Helper function to check if a sequence of k in a list is the same and not \'.\' def is_winner(sequence, player): return sequence == [player] * k # Check rows for r in range(n): for c in range(m - k + 1): if is_winner(grid[r][c:c+k], \'A\'): return \\"Alice wins\\" if is_winner(grid[r][c:c+k], \'B\'): return \\"Bob wins\\" # Check columns for c in range(m): for r in range(n - k + 1): if is_winner([grid[r+i][c] for i in range(k)], \'A\'): return \\"Alice wins\\" if is_winner([grid[r+i][c] for i in range(k)], \'B\'): return \\"Bob wins\\" # Check main diagonals for r in range(n - k + 1): for c in range(m - k + 1): if is_winner([grid[r+i][c+i] for i in range(k)], \'A\'): return \\"Alice wins\\" if is_winner([grid[r+i][c+i] for i in range(k)], \'B\'): return \\"Bob wins\\" # Check anti-diagonals for r in range(n - k + 1): for c in range(k - 1, m): if is_winner([grid[r+i][c-i] for i in range(k)], \'A\'): return \\"Alice wins\\" if is_winner([grid[r+i][c-i] for i in range(k)], \'B\'): return \\"Bob wins\\" return \\"Draw\\" def game_outcome(n, m, k, initial_grid, q, moves): grid = [list(row) for row in initial_grid] for player, i, j in moves: grid[i-1][j-1] = player result = check_winner(grid, n, m, k) if result != \\"Draw\\": return result return \\"Draw\\""},{"question":"In a faraway land, there is a unique type of farmland management system where fields are arranged in a grid of size M x N. Each cell in this grid represents a specific field. All fields are either planted with crops or left barren. Every month, fields undergo changes based on certain rules applied to each field and its neighboring fields. The rules are as follows: 1. A barren field with exactly 3 neighboring fields planted with crops will turn into a field with crops. 2. A field with crops will remain unchanged if it has 2 or 3 neighboring fields with crops. Otherwise, it will become barren. The neighboring fields are the 8 fields surrounding any given field. At the borders of the grid, fields may have fewer neighbors. Create a function `simulate_farmland` which takes the initial states of the fields and simulates the changes over K months. The function should return the state of the fields after K months. Function Signature: ```python def simulate_farmland(initial_fields: List[List[int]], K: int) -> List[List[int]]: ``` # Input - `initial_fields`: A list of lists of integers representing the initial state of the fields, where 1 signifies a field with crops and 0 signifies a barren field. - `K`: An integer representing the number of months the changes should be simulated. # Output - The function should return a list of lists of integers representing the state of the fields after K months. # Example ```python initial_fields = [ [0, 1, 0], [0, 0, 1], [1, 1, 1] ] K = 1 print(simulate_farmland(initial_fields, K)) ``` # Expected Output ``` [ [0, 0, 0], [1, 0, 1], [0, 1, 1] ] ``` # Constraints - 1 ≤ M, N ≤ 50 - 0 ≤ K ≤ 100","solution":"from typing import List def count_crops_neighbors(fields: List[List[int]], x: int, y: int) -> int: Count the number of neighboring cells with crops around the cell at (x, y). count = 0 rows = len(fields) cols = len(fields[0]) for dx in [-1, 0, 1]: for dy in [-1, 0, 1]: if dx == 0 and dy == 0: continue nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols: count += fields[nx][ny] return count def simulate_farmland(initial_fields: List[List[int]], K: int) -> List[List[int]]: Simulate the changes in the farmland for K months based on the given rules. rows = len(initial_fields) cols = len(initial_fields[0]) current_fields = [row[:] for row in initial_fields] # Copy the original state for _ in range(K): next_fields = [[0] * cols for _ in range(rows)] for x in range(rows): for y in range(cols): crop_count = count_crops_neighbors(current_fields, x, y) if current_fields[x][y] == 0: if crop_count == 3: next_fields[x][y] = 1 else: if crop_count == 2 or crop_count == 3: next_fields[x][y] = 1 else: next_fields[x][y] = 0 current_fields = next_fields return current_fields"},{"question":"You are given an undirected weighted graph with n nodes and m edges. Each node is uniquely identified by an integer from 1 to n. Each of the edges between nodes has a positive integer weight. You are required to perform the following operations: 1. Add an edge connecting two nodes with a given weight. 2. Remove an existing edge between two nodes. 3. Find the shortest path distance between any two nodes in the graph. If there is no path between the two nodes, return -1. The first line contains two integers n and m (2 le n le 10^3, 0 le m le 10^5) — the number of nodes and the number of edges, respectively. The next m lines contain three integers u, v, and w (1 le u, v le n, 1 le w le 10^9), where u and v are the nodes that are connected by an edge of weight w. Following the edges, there will be q queries, where each query is one of the following three types: 1. `ADD u v w`: Add an edge between nodes u and v with weight w. 2. `REMOVE u v`: Remove the edge between nodes u and v. 3. `PATH u v`: Find the shortest path distance between nodes u and v. If there is no path, return -1. The number of queries q can be up to 10^4. Output the result for each `PATH` query on a new line. If there is no path between the nodes in a `PATH` query, output `-1`.","solution":"import heapq import sys from collections import defaultdict, deque class Graph: def __init__(self, n): self.n = n self.adj = defaultdict(list) self.dist = [[float(\'inf\')] * n for _ in range(n)] def add_edge(self, u, v, w): self.adj[u].append((v, w)) self.adj[v].append((u, w)) self.dist[u-1][v-1] = w self.dist[v-1][u-1] = w def remove_edge(self, u, v): self.adj[u] = [(node, weight) for node, weight in self.adj[u] if node != v] self.adj[v] = [(node, weight) for node, weight in self.adj[v] if node != u] self.dist[u-1][v-1] = float(\'inf\') self.dist[v-1][u-1] = float(\'inf\') def shortest_path(self, start, end): dist = [float(\'inf\')] * self.n dist[start-1] = 0 pq = [(0, start)] heapq.heapify(pq) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u-1]: continue for v, weight in self.adj[u]: distance = current_dist + weight if distance < dist[v-1]: dist[v-1] = distance heapq.heappush(pq, (distance, v)) return dist[end-1] if dist[end-1] != float(\'inf\') else -1 def graph_operations(n, m, edges, queries): graph = Graph(n) for u, v, w in edges: graph.add_edge(u, v, w) result = [] for query in queries: if query[0] == \'ADD\': _, u, v, w = query graph.add_edge(u, v, int(w)) elif query[0] == \'REMOVE\': _, u, v = query graph.remove_edge(u, v) elif query[0] == \'PATH\': _, u, v = query dist = graph.shortest_path(u, v) result.append(dist) return result"},{"question":"Zara has recently started working with sequences of numbers and wants to perform some operations on them. She has a sequence of n integers and wants to answer m queries. Each query asks her to compute the sum of the integers in a specific subsegment of the sequence and then multiply the result by a given integer. To help her, you need to write a program that reads the sequence and the queries, and then returns the required results for each query. Input: - The first line contains two integers, n and m (1 ≤ n, m ≤ 10^5). - The second line contains n integers, representing the sequence (each integer is between -1000 and 1000). - The next m lines each contain three integers l, r, and k (1 ≤ l ≤ r ≤ n, -1000 ≤ k ≤ 1000), representing a query. For each query, you need to compute the sum of the sequence from the l-th to the r-th element (inclusive) and then multiply the sum by k. Output: - For each query, output a single integer, the result of the multiplication. Example: Input: 6 3 1 2 3 4 5 6 1 3 2 2 5 3 1 6 -1 Output: 12 42 -21 Explanation: - For the first query, the sum of the elements from index 1 to 3 is 1 + 2 + 3 = 6. Multiplying by 2 gives 6 * 2 = 12. - For the second query, the sum of the elements from index 2 to 5 is 2 + 3 + 4 + 5 = 14. Multiplying by 3 gives 14 * 3 = 42. - For the third query, the sum of the elements from index 1 to 6 is 1 + 2 + 3 + 4 + 5 + 6 = 21. Multiplying by -1 gives 21 * -1 = -21.","solution":"def process_queries(n, m, sequence, queries): Process each query to compute the sum of the segment and then multiply it by the given integer. :param n: Integer representing the length of the sequence. :param m: Integer representing the number of queries. :param sequence: List of integers representing the sequence. :param queries: List of tuples, each containing three integers (l, r, k) representing a query. :return: List of integers, each representing the result of the query. # Precompute prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + sequence[i - 1] results = [] for l, r, k in queries: segment_sum = prefix_sums[r] - prefix_sums[l - 1] results.append(segment_sum * k) return results"},{"question":"You are given an integer array arr of length n. Your task is to find if there exists a subarray (contiguous part of the array) whose sum is zero. You have to answer t independent test cases. The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. The next t sets of lines describe the test cases. For each test case, the first line contains one integer n (1 le n le 10^5) — the length of the array arr. The second line contains n integers arr_1, arr_2, ldots, arr_n (-10^9 le arr_i le 10^9) — the elements of the array. For each test case, print the answer — \\"YES\\" (without quotes) if there exists a subarray whose sum is zero and \\"NO\\" otherwise. For example, in the first test case, the array is [4, 2, -3, 1, 6], you can check that the subarray [2, -3, 1] has sum zero. In the second test case, the only possible subarray sums are either 1 or -1, which are both non-zero. In the third test case, the subarray [-1, 1] has sum zero.","solution":"def has_zero_sum_subarray(arr): Checks if there is a subarray in arr which sums to zero. prefix_sum_set = set() current_sum = 0 for num in arr: current_sum += num if current_sum == 0 or current_sum in prefix_sum_set: return True prefix_sum_set.add(current_sum) return False def process_test_cases(test_cases): Processes multiple test cases to check for zero sum subarrays. results = [] for arr in test_cases: if has_zero_sum_subarray(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an automatic ticket dispenser at a theater that dispenses tickets with unique serial numbers. The serial numbers are integers that increase consecutively by one starting from a given start number. The dispenser occasionally breaks down and skips a certain number of tickets before resuming. For example, if the starting number is 50, and the dispenser skips 4 tickets after dispensing 3, the sequence of tickets could be: 50, 51, 52, skip, skip, skip, skip, 53, 54, and so on. Your task is to determine the longest contiguous sequence of tickets that could be dispensed before the first skip occurs, given the start number, the total number of tickets to be dispensed, and the interval of skip. Input: - The first line contains three integers, start, n, and k: the starting serial number of the tickets, the total number of tickets to be dispensed, and the interval of skip respectively (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000). - The second line contains n integers representing the serial numbers of the tickets actually dispensed. Output: - Print the length of the longest contiguous sequence of tickets dispensed before the first skip. Example: Input: 50 10 4 50 51 52 57 58 59 60 61 62 63 Output: 3","solution":"def longest_sequence_before_skip(start, n, k, tickets): Determine the longest contiguous sequence of tickets that could be dispensed before the first skip occurs. :param start: The starting serial number of the tickets. :param n: The total number of tickets to be dispensed. :param k: The interval of the skip. :param tickets: The list of actually dispensed ticket numbers. :return: The length of the longest contiguous sequence of tickets before the first skip. longest_sequence = 0 current_sequence = 0 expected_number = start for ticket in tickets: if ticket == expected_number: current_sequence += 1 expected_number += 1 else: break longest_sequence = max(longest_sequence, current_sequence) return longest_sequence # Example use with sample input input_start = 50 input_n = 10 input_k = 4 input_tickets = [50, 51, 52, 57, 58, 59, 60, 61, 62, 63] print(longest_sequence_before_skip(input_start, input_n, input_k, input_tickets)) # Output: 3"},{"question":"You are given a sequence of integers where each integer appears exactly twice, except for one integer which appears only once. Write a function that finds the integer that occurs only once. The function should take a list of integers `nums` as an input and return the unique integer. The function should efficiently handle large sets of input data. For example, given the list `nums`: ```python [4, 3, 2, 4, 1, 3, 2] ``` The function should return: ```python 1 ``` You can assume the input list always has exactly one unique integer and every other integer appears exactly twice. Ensure your solution has O(n) time complexity and uses constant extra space (O(1)). Function signature: ```python def find_unique(nums: List[int]) -> int: pass ``` In the first test sample, the unique integer is 1 because every other integer appears twice but 1 appears only once.","solution":"from typing import List def find_unique(nums: List[int]) -> int: Returns the integer that occurs only once in the list where every other integer appears exactly twice. Args: nums (List[int]): List of integers where each integer except one appears exactly twice. Returns: int: The unique integer that appears only once. unique = 0 for num in nums: unique ^= num return unique"},{"question":"You are given an array of integers and a target integer. Your task is to determine the number of unique pairs of elements in the array whose sum equals the target integer. The first line contains two space-separated integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000), where n is the number of elements in the array and k is the target sum. The second line contains n space-separated integers representing the elements of the array. Print a single integer — the number of unique pairs whose sum equals k. A pair (a, b) is considered unique if there are no other pairs (c, d) such that a = d and b = c. For example, if the array is [1, 5, 3, 7, 3] and the target sum is 8, the pairs (1, 7) and (5, 3) are unique pairs that sum up to 8. The answer would be 2. Example Input: 5 8 1 5 3 7 3 Example Output: 2","solution":"def count_unique_pairs(arr, target_sum): Returns the number of unique pairs of elements in the array whose sum equals the target sum. unique_pairs = set() seen_numbers = set() for number in arr: complement = target_sum - number if complement in seen_numbers: unique_pairs.add(tuple(sorted((number, complement)))) seen_numbers.add(number) return len(unique_pairs) def parse_input_and_count_pairs(input_str): Parses the input string, interprets the number of elements, the array, and the target sum, and calculates the number of unique pairs. lines = input_str.strip().split(\'n\') n, k = map(int, lines[0].split()) arr = list(map(int, lines[1].split())) return count_unique_pairs(arr, k)"},{"question":"Oliver is organizing a coding competition and has prepared a series of challenges. Each challenge has a rated difficulty level. He wants to create a contest from this series, where the sum difficulty of the challenges in the contest is as close as possible to a target difficulty value `T`. Given an array of integers where each integer represents the difficulty of a challenge and an integer `T`, write a program to find the subset of challenges whose sum of difficulties is closest to `T`. You must return the sum of difficulties of the selected subset. The first line of input contains an integer `n` (1 ≤ n ≤ 100), the number of challenges. The second line contains `n` integers representing the difficulties of the challenges. The third line contains the integer `T` (1 ≤ T ≤ 10^5). Output the sum of difficulties of the subset closest to `T`. If there are multiple answers, return the smallest sum. For example: Input: ``` 5 3 34 4 12 5 9 ``` Output: ``` 9 ``` In this example, the subset {4, 5} or {3, 4, 5} has the closest sum to 9. Since 9 is achievable as a sum, it is the output. Input: ``` 4 1 2 9 10 6 ``` Output: ``` 3 ``` In this example, the subset {1, 2} has the sum closest to 6 which is 3.","solution":"def closest_sum_to_target(difficulties, target): Returns the sum of the subset of difficulties closest to the target. n = len(difficulties) dp = [0] * (target + 1) for difficulty in difficulties: for i in range(target, difficulty - 1, -1): dp[i] = max(dp[i], dp[i - difficulty] + difficulty) return dp[target]"},{"question":"You are given a string `s` consisting of lowercase English letters. A subsequence is a sequence derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. Your task is to find the number of distinct subsequences of the string `s`. Input: - A single line containing the string `s` (1 ≤ |s| ≤ 1000). Output: - A single integer — the number of distinct subsequences of the given string `s`. # Example Input ``` abc ``` Output ``` 8 ``` Explanation The subsequences of \\"abc\\" are: \\"\\", \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ac\\", \\"bc\\", \\"abc\\". Thus, there are 8 distinct subsequences. The empty string is considered a subsequence.","solution":"def num_distinct_subsequences(s): Computes the number of distinct subsequences of a given string. n = len(s) dp = [1] * (n + 1) last_occurrence = {} for i in range(1, n + 1): dp[i] = 2 * dp[i - 1] if s[i - 1] in last_occurrence: dp[i] -= dp[last_occurrence[s[i - 1]] - 1] last_occurrence[s[i - 1]] = i return dp[n]"},{"question":"There are n points in a 2D plane. Each point is represented by its coordinates (xi, yi). You need to find the number of unique pairs of points (i, j) such that the Manhattan distance between them is equal to a given integer d. The Manhattan distance between two points (xi, yi) and (xj, yj) is defined as |xi - xj| + |yi - yj|. The first line of the input contains two integers n (1 ≤ n ≤ 105) and d (0 ≤ d ≤ 2 * 109). Each of the following n lines contains two space-separated integers xi and yi (−109 ≤ xi, yi ≤ 109). Print a single integer — the number of pairs of points with the Manhattan distance equal to d. Example: ``` Input: 3 1 0 0 0 1 1 0 Output: 2 ``` Explanation: The pairs of points with Manhattan distance 1 are (0,0) and (0,1), and (0,0) and (1,0). Therefore, the output is 2.","solution":"from collections import defaultdict def manhattan_pairs(n, d, points): count = defaultdict(int) result = 0 for x, y in points: result += count[(x + d, y)] + count[(x - d, y)] + count[(x, y + d)] + count[(x, y - d)] count[(x, y)] += 1 return result"},{"question":"You are given an array of integers representing the heights of consecutive buildings. Each building\'s height is given by `h_i` where each `h_i` is the height of the i-th building. A building can be considered to have a \\"sunlight view\\" from the left if its height is greater than all the buildings to its left. Write a function to determine which buildings have the \\"sunlight view\\" when the sun is rising from the left side of the city. The function should return a list containing the indices of the buildings that can see the sunlight. The indices should be returned in the same order as they appear in the initial array. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of buildings. - The second line contains `n` space-separated integers `h_1, h_2, ..., h_n` (1 ≤ h_i ≤ 10^9), the heights of the buildings. **Output:** - Print a list of integers representing the indices of the buildings that have a \\"sunlight view\\". **Example:** ``` Input: 8 4 2 3 1 5 7 6 8 Output: [0, 4, 5, 7] ``` **Explanation:** - Building 0 with height 4 has a clear view of the sunlight. - Building 1 with height 2 is blocked by building 0. - Building 2 with height 3 is blocked by building 0. - Building 3 with height 1 is blocked by building 0. - Building 4 with height 5 has a clear view of the sunlight. - Building 5 with height 7 has a clear view of the sunlight. - Building 6 with height 6 is blocked by building 5. - Building 7 with height 8 has a clear view of the sunlight.","solution":"def buildings_with_sunlight_view(heights): Determine which buildings have sunlight view from the left. :param heights: List of integers representing the heights of buildings :return: List of indices of buildings having the sunlight view max_height = -1 indices = [] for i, height in enumerate(heights): if height > max_height: indices.append(i) max_height = height return indices"},{"question":"You are given a string consisting of lowercase English letters. We can perform a fixed number of operations on this string. In each operation, we can choose any two adjacent characters and swap them. Determine the number of different lexicographically smallest strings that can be obtained by performing exactly M such operations. The first line contains an integer M (0 ≤ M ≤ 1018), the number of operations. The second line contains a string S of length N (1 ≤ N ≤ 105) consisting of lowercase English letters. Output a single integer, the number of different lexicographically smallest strings that can be obtained after performing exactly M operations. For example, for the string `ab`, one possible output is `1` because swapping does not change the string\'s order. For the string `ba`, with one swap, it can be transformed to `ab`, which is the smallest possible string. **Example Input:** ``` 1 ba ``` **Example Output:** ``` 1 ``` In this example, with one swap, `ba` can be transformed to `ab`, and `ab` is the only lexicographically smallest string that can be obtained.","solution":"def count_lexicographically_smallest_strings(M, S): Returns the number of different lexicographically smallest strings that can be obtained after performing exactly M operations. # Sorting the string to obtain the lexicographically smallest version sorted_S = \'\'.join(sorted(S)) # We only need to determine if it\'s possible to obtain the sorted_S using exactly M operations if S == sorted_S: # If S is already sorted, no operations are required return 1 elif M >= len(S) - 1: # If we have more or equal operations as the length of the string - 1, we can always get the lexicographically smallest string return 1 else: # If the number of operations is less than the length of the string - 1, we can\'t guarantee we\'d get the lexicographically smallest string return 0"},{"question":"Write a function that takes an integer array and determines if there is a subarray (of at least one element) with a sum of zero. The input consists of two lines. The first line contains an integer n (1 ≤ n ≤ 10^5) – the number of elements in the array. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), representing the elements of the array. If there exists a subarray with a sum of zero, output \\"YES\\", otherwise output \\"NO\\".","solution":"def has_zero_sum_subarray(arr): Determines if there is a subarray with a sum of zero. :param arr: List of integers :return: \\"YES\\" if there is a subarray with sum 0, otherwise \\"NO\\" prefix_sum_set = set() current_sum = 0 for num in arr: current_sum += num if current_sum == 0 or current_sum in prefix_sum_set: return \\"YES\\" prefix_sum_set.add(current_sum) return \\"NO\\""},{"question":"A travel agency uses a mobile app to help tourists find the shortest path between two landmarks in a city. The city is represented by an undirected graph where landmarks are nodes, and roads are edges with positive integer weights representing the travel time. Given a list of queries, each containing a pair of landmarks, you need to find the shortest travel time between these landmarks for each query using Dijkstra’s algorithm. Each query contains two integers, representing the pair of landmarks between which you need to find the shortest path. The first line of input contains two integers n (2 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 2×10^5), where n is the number of landmarks and m is the number of roads. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6), representing a road between landmarks u and v with travel time w. The next line contains an integer q (1 ≤ q ≤ 10^5) representing the number of queries. Each of the following q lines contains a pair of integers a and b (1 ≤ a, b ≤ n, a ≠ b) representing the landmarks between which you need to find the shortest travel time. Print the shortest travel time for each query on a new line. If there is no path between the two landmarks in a query, print \\"NO PATH\\". Example Input: ``` 5 6 1 2 4 1 3 2 2 3 1 2 4 7 3 5 5 4 5 1 3 1 5 1 4 3 4 ``` Example Output: ``` 7 8 6 ```","solution":"import heapq def dijkstra(graph, start): n = len(graph) distances = [float(\'inf\')] * n distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_paths(n, m, edges, q, queries): graph = [[] for _ in range(n)] for u, v, w in edges: graph[u-1].append((v-1, w)) graph[v-1].append((u-1, w)) all_distances = [] for i in range(n): all_distances.append(dijkstra(graph, i)) results = [] for a, b in queries: distance = all_distances[a-1][b-1] if distance == float(\'inf\'): results.append(\\"NO PATH\\") else: results.append(str(distance)) return results"},{"question":"You have been given a list of `n` intervals, each defined by a pair of integers [start, end], where `start` denotes the start of the interval and `end` denotes the end of the interval. Each interval represents a task that needs to be performed within the given time frame. Your task is to determine the minimum number of intervals you need to remove so that there are no overlapping intervals. Two intervals [a, b] and [c, d] are considered overlapping if `a < d` and `c < b`. # Input - The first line contains a single integer `n` (1 leq n leq 10^5) — the number of intervals. - The next `n` lines each contain two integers `start` and `end` (1 leq start < end leq 10^9) representing the start and end of each interval. # Output - Output a single integer — the minimum number of intervals you need to remove to eliminate all overlapping intervals. # Example Input ``` 6 1 3 2 4 3 5 5 7 6 8 8 10 ``` Output ``` 2 ``` # Explanation The intervals [1, 3], [2, 4], and [3, 5] overlap with each other, so at least two of these intervals need to be removed. By removing [2, 4] and [3, 5], we achieve a set of non-overlapping intervals.","solution":"def min_intervals_to_remove(intervals): Finds the minimum number of intervals to remove to eliminate all overlapping intervals. :param intervals: List of intervals, where each interval is represented as [start, end] :return: Integer, the minimum number of intervals to remove if not intervals: return 0 # Sort intervals by end time intervals.sort(key=lambda x: x[1]) # Initialize the end of the first interval and the number of removals end = intervals[0][1] removals = 0 for i in range(1, len(intervals)): if intervals[i][0] < end: # If the start time of the current interval is less than the end time of the previous interval, they overlap removals += 1 else: # Update the end time to the end of the current interval end = intervals[i][1] return removals # Example intervention to check if the solution works n = 6 intervals = [ [1, 3], [2, 4], [3, 5], [5, 7], [6, 8], [8, 10] ] print(min_intervals_to_remove(intervals)) # Output should be 2"},{"question":"You have an array of integers representing the heights of buildings along a street, from left to right, with 1-based indexing. Each building can trap a certain amount of rainwater between itself and the next one, depending on the heights of the buildings. The rainwater trapped by a building is determined by the height of the smaller of the buildings immediately to its left and right, minus the height of the building itself. More formally, the amount of rainwater trapped on top of the building at index i is equal to (text{max}(0, text{min}(text{left_max}[i], text{right_max}[i]) - text{height}[i])), where (text{left_max}[i]) is the maximum height of the buildings from the left up to (i), and (text{right_max}[i]) is the maximum height of the buildings from (i) to the right. You need to write a function that calculates and returns the total amount of rainwater trapped along the street. Function Signature: ```python def trap_rain_water(heights: List[int]) -> int: pass ``` # Input - An integer array `heights` where `0 < len(heights) <= 1000` and each element `0 <= heights[i] <= 10000`. # Output - An integer representing the total units of rainwater trapped among the buildings. # Example Input ```python heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` Output ```python 6 ``` Explanation The total amount of trapped rainwater is calculated as follows: - Building at index 3 traps 1 unit. - Building at index 5 traps 2 units. - Building at index 6 traps 1 unit. - Building at index 8 traps 1 unit. - Building at index 10 traps 1 unit. Therefore, the total units of trapped rainwater is (1 + 2 + 1 + 1 + 1 = 6).","solution":"from typing import List def trap_rain_water(heights: List[int]) -> int: if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Compute left_max for each building left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Compute right_max for each building right_max[n-1] = heights[n-1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate total water trapped total_water = 0 for i in range(n): total_water += max(0, min(left_max[i], right_max[i]) - heights[i]) return total_water"},{"question":"Yelena is fond of puzzles that involve string manipulations. She recently discovered an interesting challenge where she needs to find the minimum number of steps to convert one string into another. A step is defined as one of the following operations: 1. Insert a character at any position in the string. 2. Remove a character from any position in the string. 3. Replace a character at any position in the string with another character. Help Yelena by writing a program that computes the minimum number of steps required to transform the first string into the second string. The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next 2t lines contains two strings. The first string on each pair of lines represents the initial string, and the second string represents the target string. Both strings consist of lowercase English letters and have lengths of at most 100. For each test case, print a single integer - the minimum number of steps to transform the initial string into the target string. Example Input: 3 horse ros intention execution abc def Output: 3 5 3","solution":"def min_edit_distance(s1, s2): m, n = len(s1), len(s2) # Create a dp array to store the results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the dp array for the base cases for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Compute the dp values for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 return dp[m][n] def solve_min_edit_distance(t, cases): results = [] for i in range(t): s1, s2 = cases[i * 2], cases[i * 2 + 1] results.append(min_edit_distance(s1, s2)) return results"},{"question":"Warehouse Item Management You are tasked with building a system to manage items within a warehouse. Each item has a unique name (consisting of lowercase Latin letters only) and can belong to one or more categories (like \'electronics\', \'furniture\', etc.). Each category name also consists of lowercase Latin letters only. Your task is to implement a functionality that manages items and their categories by following these requirements: 1. The system should be able to add new items along with their associated categories. 2. The system should support updating an item by adding new categories without removing the existing ones. 3. The system should be able to delete an item from the warehouse. 4. The system should provide a list of all items that belong to a certain category. Input and Output Format You will receive several commands to manipulate and query the warehouse items. Each command will be on a separate line and the format of each command is as follows: - `add <item_name> <category_1> <category_2> ... <category_n>`: Add a new item with its associated categories. If the item already exists, add the new categories without removing the existing ones. - `delete <item_name>`: Delete an item from the warehouse. If the item does not exist, do nothing. - `get <category>`: Retrieve the list of items that belong to the specified category. The output should be the list of items sorted in lexicographical order. The input terminates with the command `end`. Each `add`, `delete`, and `get` operation will be followed by a line containing the expected input format mentioned above. The expected output should follow the respective command operation. # Constraints - item_name and category names are non-empty strings of lowercase Latin letters with length not exceeding 20. - Each item may belong to at most 100 categories. - Each command can only manage existing items and categories. # Example Input ``` add laptop electronics computing add chair furniture add smartphone electronics delete chair get electronics end ``` Output ``` laptop smartphone ``` # Implementation You need to implement a class Warehouse with the following methods: - `add(self, item_name: str, categories: List[str]) -> None` - Adds a new item with associated categories. If the item already exists, it adds the new categories to it. - `delete(self, item_name: str) -> None` - Deletes an item from the warehouse. If the item does not exist, it does nothing. - `get(self, category: str) -> List[str]` - Returns a list of items that belong to the specified category, sorted in lexicographical order. If there are no items in that category, returns an empty list. You also need to provide an auxiliary function to process the input commands and produce the required output.","solution":"from typing import List, Dict, Set class Warehouse: def __init__(self): self.items: Dict[str, Set[str]] = {} self.categories: Dict[str, Set[str]] = {} def add(self, item_name: str, categories: List[str]) -> None: if item_name not in self.items: self.items[item_name] = set() for category in categories: self.items[item_name].add(category) if category not in self.categories: self.categories[category] = set() self.categories[category].add(item_name) def delete(self, item_name: str) -> None: if item_name in self.items: for category in self.items[item_name]: if category in self.categories: self.categories[category].remove(item_name) if not self.categories[category]: del self.categories[category] del self.items[item_name] def get(self, category: str) -> List[str]: if category in self.categories: return sorted(self.categories[category]) return [] def process_commands(commands: List[str]) -> List[str]: warehouse = Warehouse() result = [] for command in commands: parts = command.split() op = parts[0] if op == \\"add\\": item_name = parts[1] categories = parts[2:] warehouse.add(item_name, categories) elif op == \\"delete\\": item_name = parts[1] warehouse.delete(item_name) elif op == \\"get\\": category = parts[1] items = warehouse.get(category) result.append(\' \'.join(items)) return result"},{"question":"Write a function that determines if the given graph can be colored using two colors such that no two adjacent vertices share the same color. The input to the function will be an integer n (the number of vertices), and a list of tuples where each tuple represents an edge between two vertices. If the graph can be two-colored, return a list with one possible valid coloring (using 1 and 0 as the two colors), otherwise return an empty list. The vertices are labeled from 0 to n-1. Your code should have the following signature: ```python def two_colorable(n: int, edges: List[Tuple[int, int]]) -> List[int]: # Your code here ```","solution":"from typing import List, Tuple def two_colorable(n: int, edges: List[Tuple[int, int]]) -> List[int]: def dfs(v, c): color[v] = c for neighbor in adj_list[v]: if color[neighbor] == -1: if not dfs(neighbor, 1 - c): return False elif color[neighbor] == color[v]: return False return True adj_list = [[] for _ in range(n)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) color = [-1] * n for i in range(n): if color[i] == -1: if not dfs(i, 0): return [] return color"},{"question":"You are given two strings: s of length n consisting of lowercase English letters, and t of length m also consisting of lowercase English letters. Your task is to determine whether you can construct the string t by deleting some (possibly zero) characters from s without rearranging the remaining characters. For example, given the string s = \\"abcde\\" and the string t = \\"ace\\", you can create t by deleting the characters b and d from s. The first line contains a single integer q (1 le q le 10^4) — the number of test cases. Each of the following lines contains two space-separated strings s and t (1 le |s|, |t| le 10^5). The sum of lengths of all strings s and t in one test does not exceed 10^6. For each test case, print \\"YES\\" if you can construct t from s by deleting some characters, otherwise print \\"NO\\". # Example ``` Input: 3 abcde ace axbycz abc abcd bce Output: YES YES NO ``` # Explanation For the first test case, you can delete characters b and d to get t = \\"ace\\" from s = \\"abcde\\". For the second test case, you can delete characters x and y to get t = \\"abc\\" from s = \\"axbycz\\". For the third test case, there is no valid way to delete some characters from s = \\"abcd\\" to get t = \\"bce\\".","solution":"def can_construct_from_s(s, t): Determines if string t can be constructed by deleting some characters from s without rearranging. iter_s = iter(s) return all(char in iter_s for char in t) def process_queries(queries): Processes multiple queries to determine if each t can be constructed from the respective s. results = [] for s, t in queries: if can_construct_from_s(s, t): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"**Problem Statement: Anomalous Point** You are given a list of 2D points on a Cartesian plane. Each point is represented by its x and y coordinates. Your task is to determine if there exists an \\"anomalous point\\". A point is considered anomalous if it is at least twice as far from its nearest neighbor compared to any other point and its nearest neighbor. Formally, for a point P with nearest neighbor Q, the distance between P and Q should be at least twice the smallest distance among all pairs of points. The distance between two points (x1, y1) and (x2, y2) is defined as the Euclidean distance: [ text{distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] Write a function to determine whether such an anomalous point exists. **Input Format**: - The first line contains an integer n (2 leq n leq 2000) – the number of points. - The following n lines each contain two integers x and y – the coordinates of the points (-10^4 leq x, y leq 10^4). **Output Format**: - Print \\"YES\\" if there exists at least one anomalous point, otherwise print \\"NO\\". **Example 1**: **Input**: ``` 5 0 0 2 0 1 1 3 3 10 10 ``` **Output**: ``` YES ``` **Example 2**: **Input**: ``` 4 1 1 2 2 3 3 4 4 ``` **Output**: ``` NO ``` **Explanation**: In Example 1, the point (10, 10) is anomalous because its distance to the nearest point (3, 3) is significantly larger than the other nearest neighbor distances. In Example 2, no such point exists because all distances between nearest neighbors are relatively similar.","solution":"def exists_anomalous_point(points): import math def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) n = len(points) if n < 2: return \\"NO\\" # Calculate all distances distances = [] for i in range(n): for j in range(i + 1, n): dist = euclidean_distance(points[i], points[j]) distances.append((dist, i, j)) distances.sort() # Sort distances by the first element, which is the distance min_distance = distances[0][0] # Dictionary to track the nearest neighbor distance for each point nearest_neighbor_distance = [float(\'inf\')] * n for dist, p1, p2 in distances: nearest_neighbor_distance[p1] = min(nearest_neighbor_distance[p1], dist) nearest_neighbor_distance[p2] = min(nearest_neighbor_distance[p2], dist) for dist, p1, p2 in distances: if nearest_neighbor_distance[p1] >= 2 * min_distance or nearest_neighbor_distance[p2] >= 2 * min_distance: return \\"YES\\" return \\"NO\\""},{"question":"You are participating in a team-based sci-fi programming competition. Your team has developed a set of autonomous robots that can move on an infinite 2D plane. Each robot can receive a sequence of commands to move North (up), South (down), East (right), or West (left). However, the energy resources of these robots are limited. Therefore, you need to find the minimum number of instructions required to move the robot from its starting position to its destination. Initially, the robot starts at position (0, 0). Given its target position (xt, yt), you need to find the minimum sequence of moves that will bring the robot to this point. Each command to the robot can be one of the following: - \\"N\\": Move up (y + 1) - \\"S\\": Move down (y - 1) - \\"E\\": Move right (x + 1) - \\"W\\": Move left (x - 1) Write a function `minimum_moves_to_target(xt, yt)` that takes the target coordinates as input and returns the minimum number of moves required to reach that point from the origin. # Input The function receives two integers: - xt: the x-coordinate of the target position (−10^6 leq xt leq 10^6) - yt: the y-coordinate of the target position (−10^6 leq yt leq 10^6) # Output The function should return a single integer representing the minimum number of moves needed for the robot to reach the target from the origin. # Example ```python print(minimum_moves_to_target(3, 4)) # Output: 7 print(minimum_moves_to_target(-2, -3)) # Output: 5 ``` Note: - In the first example, the robot can move right 3 times and up 4 times, for a total of 7 moves. - In the second example, the robot can move left 2 times and down 3 times, for a total of 5 moves.","solution":"def minimum_moves_to_target(xt, yt): Returns the minimum number of moves required to reach (xt, yt) from (0, 0). Parameters: xt (int): x-coordinate of the target position. yt (int): y-coordinate of the target position. Returns: int: Minimum number of moves required to reach the target position. # The minimum number of moves will be the sum of the absolute values # of the x and y target coordinates because each move changes either x or y by 1. return abs(xt) + abs(yt)"},{"question":"An e-commerce company offers multiple shipping options for delivering products to its customers. Each option has a different delivery time and cost. Customers can choose from the available shipping options based on their priorities like cost and delivery time. However, to promote fast deliveries, the company wants to offer a discount on certain shipping options such that the cost for that option becomes cheaper than another predefined slower option. You are given a list of shipping options available, where each option has a delivery time and a cost. Your task is to determine whether it\'s possible to offer a discount on at least one shipping option such that its cost becomes strictly less than the cost of another option with a greater delivery time. **Input:** - The first line contains a single integer N (2 ≤ N ≤ 100), the number of shipping options available. - The next N lines each contain two integers Ti and Ci (1 ≤ Ti, Ci ≤ 10^4), the delivery time and cost of the i-th shipping option. **Output:** - Output \\"YES\\" if there exists at least one pair of shipping options (i, j) such that Ti < Tj and Ci can be reduced to be strictly less than Cj. - Otherwise, output \\"NO\\". **Example 1:** Input: ``` 3 10 100 20 150 15 120 ``` Output: ``` YES ``` **Example 2:** Input: ``` 2 5 80 8 75 ``` Output: ``` NO ``` **Example 3:** Input: ``` 4 5 200 7 190 3 150 10 300 ``` Output: ``` YES ``` For each shipping option that is cheaper than another one with a greater delivery time, print \\"YES\\". If no such pair of options exists, print \\"NO\\".","solution":"def cheaper_shipping_discount(N, options): Determines whether there\'s a shipping option which can be made cheaper than another option with a longer delivery time. Parameters: N (int): The number of shipping options available. options (list of tuple): A list of tuples, where each tuple contains two integers (Ti, Ci). Returns: str: \\"YES\\" if the discount makes the condition true, \\"NO\\" otherwise. # Sort the options based on delivery time options.sort() min_cost = options[0][1] for i in range(1, N): Ti, Ci = options[i] if Ci > min_cost: return \\"YES\\" min_cost = min(min_cost, Ci) return \\"NO\\""},{"question":"A group of N people wants to share M pieces of candy. Each person i has a capacity ci, which is the maximum amount of candy that they can eat. You need to distribute all M pieces of candy such that no person receives more candy than their capacity. Write a function distribute_candy(N, M, capacities) that returns a list of length N where the i-th element is the number of pieces of candy given to the i-th person. If there are multiple valid solutions, return any of them. If it is not possible to distribute all M pieces of candy according to the given constraints, return an empty list. Function Signature: ```python def distribute_candy(N: int, M: int, capacities: List[int]) -> List[int]: pass ``` Input: - An integer N (1 ≤ N ≤ 10^5) — the number of people. - An integer M (1 ≤ M ≤ 10^9) — the number of pieces of candy. - A list of integers capacities of length N (1 ≤ ci ≤ 10^9) — the capacities of the people. Output: - A list of length N where the i-th element is the number of pieces of candy given to the i-th person, or an empty list if it is not possible to distribute all M pieces of candy. Example: ```python assert distribute_candy(3, 10, [5, 3, 8]) == [5, 3, 2] or [5, 3, 2][::-1] assert distribute_candy(2, 15, [8, 6]) == [] ``` Explanation: In the first example, there are multiple ways to distribute 10 pieces of candy such that no one gets more than their capacity (5, 3, 2) or (3, 5, 2) or any permutation of these. In the second example, it is not possible to distribute 15 pieces of candy as both people combined can only handle 14 pieces of candy.","solution":"from typing import List def distribute_candy(N: int, M: int, capacities: List[int]) -> List[int]: # Check if the total capacity is less than M, which means distribution is impossible if sum(capacities) < M: return [] result = [0] * N for i in range(N): give = min(M, capacities[i]) result[i] = give M -= give return result"},{"question":"A massive storm has recently swept through the forest kingdom. After the storm, many roads were blocked, and some critical communication links between villages were cut off. The kingdom has commissioned you to help assess the damage and find the minimal number of road repairs needed to ensure all villages remain connected. The kingdom consists of `v` villages and `e` existing roads that connect them. Each road directly connects two distinct villages. You can assume that there was originally a road network that allowed travel between any pair of villages, but after the storm, some roads have been destroyed. Your task is to calculate the minimum number of additional roads that need to be added to make sure that all villages are connected again. # Input The first line contains two integers, `v` (1 ≤ v ≤ 1000) and `e` (0 ≤ e ≤ 100000) -- the number of villages and the number of existing roads, respectively. Each of the next `e` lines contains two integers, `a` and `b` (1 ≤ a, b ≤ v; a ≠ b), indicating that there is a road between village `a` and village `b`. # Output Print a single integer -- the minimum number of additional roads that need to be added to make the network connected again. # Example Input ``` 6 4 1 2 2 3 4 5 5 6 ``` Output ``` 1 ``` Explanation In this example, there are two disconnected components: {1, 2, 3} and {4, 5, 6}. You need one additional road to connect these components, for instance, between village 3 and 4.","solution":"def find_min_roads_to_add(v, e, roads): from collections import defaultdict, deque def bfs(start, visited, adj_list): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Build the adjacency list adj_list = defaultdict(list) for a, b in roads: adj_list[a].append(b) adj_list[b].append(a) # Find all connected components using BFS visited = [False] * (v + 1) components = 0 for i in range(1, v + 1): if not visited[i]: components += 1 bfs(i, visited, adj_list) # The number of additional roads needed is components - 1 return components - 1 # Example input v = 6 e = 4 roads = [ (1, 2), (2, 3), (4, 5), (5, 6) ] # Result print(find_min_roads_to_add(v, e, roads)) # Output: 1"},{"question":"Given a list of n integers and q queries, each query asks about the sum of all integers between indices i and j in the list. Your task is to output these sums for each query. The first line contains two integers n and q (1 ≤ n, q ≤ 100,000), the number of elements in the list and the number of queries respectively. The next line contains n space-separated integers, representing the elements of the list. Each of the next q lines contains two integers i and j (1 ≤ i ≤ j ≤ n), representing the indices (inclusive) for each query. Output q lines, each containing the sum of the elements from index i to j for the corresponding query. Input Specification: - The first line contains two integers n and q. - The second line contains n space-separated integers. - The next q lines contain two integers each i and j. Output Specification: - Output q lines, each containing the sum for the respective query. Example: Input: 6 3 3 2 4 5 1 6 1 3 2 5 1 6 Output: 9 12 21","solution":"def prefix_sums(arr): This function returns the prefix sums array for a given input array. n = len(arr) prefix = [0] * (n + 1) for i in range(1, n + 1): prefix[i] = prefix[i - 1] + arr[i - 1] return prefix def range_sum(prefix, i, j): This function returns the sum of the elements from index i to j (inclusive) using the prefix sums array. return prefix[j] - prefix[i - 1] def solve(n, q, arr, queries): This function processes each query and returns the sum of elements for the respective queries. prefix = prefix_sums(arr) results = [] for i, j in queries: results.append(range_sum(prefix, i, j)) return results"},{"question":"You are given an undirected graph with N nodes and M edges. Each edge has an associated weight. Your task is to determine if it\'s possible to remove some edges (possibly none) so that the sum of the weights of the remaining edges is as small as possible, while ensuring that the graph remains connected and has exactly N-1 edges (i.e., it becomes a spanning tree). A spanning tree of a graph is a subgraph that is a tree and connects all the nodes together while having the minimum number of edges, which is (N-1) edges for N nodes. # Input - The first line contains two integers, N and M, separated by a space (1 ≤ N ≤ 10^5, N-1 ≤ M ≤ 2*10^5) — the number of nodes and edges in the graph. - The next M lines each contain three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^6) — the nodes connected by the edge and its weight. # Output - If it\'s possible to remove some edges and get a spanning tree, print the sum of the weights of the edges in that spanning tree. - Otherwise, print -1. # Example Input ``` 4 5 1 2 1 1 3 3 2 3 2 2 4 4 3 4 5 ``` Output ``` 7 ``` Explanation One possible way to get the minimum spanning tree is by selecting edges (1-2, 2-3, 2-4) which gives a total weight sum of 7.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_minimum_spanning_tree(N, edges): edges.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(N): parent.append(node) rank.append(0) mst_weight = 0 e = 0 i = 0 while e < N - 1: if i >= len(edges): return -1 u, v, w = edges[i] i = i + 1 x = find(parent, u-1) y = find(parent, v-1) if x != y: e = e + 1 mst_weight += w union(parent, rank, x, y) return mst_weight def minimum_spanning_tree(N, M, edges): if N == 1: return 0 if M < N - 1: return -1 return kruskal_minimum_spanning_tree(N, edges)"},{"question":"In a distant galaxy, there exists a planet called Quadratia whose inhabitants are fascinated by geometry and mathematics. Quadratia consists of an infinite number of squares of equal size, forming an infinite Cartesian grid. Each square is uniquely identified by its bottom-left corner coordinates (x, y). Quadratians love symmetry and have decided to paint their grid in a unique pattern. Specifically: - The squares in the first quadrant (both x and y are non-negative) are painted blue. - The squares in the second quadrant (x is negative and y is non-negative) are painted green. - The squares in the third quadrant (both x and y are negative) are painted red. - The squares in the fourth quadrant (x is non-negative and y is negative) are painted yellow. Given the coordinates (x, y) of a point on the grid that identifies the bottom-left corner of a square, determine the color of that square. If the point lies on one of the axes, consider the square to be uncolored. Write a function `get_square_color(x: int, y: int) -> str`. It should take two integer inputs `x` and `y`, representing the coordinates, and return a string representing the color of the square: \\"blue\\", \\"green\\", \\"red\\", \\"yellow\\", or \\"uncolored\\" if the point lies on one of the axes. # Input - Two integers x and y, where -1000 ≤ x ≤ 1000 and -1000 ≤ y ≤ 1000. # Output - A single string indicating the color of the square at the given coordinates or \\"uncolored\\" if the square is on one of the axes. # Examples: ```python assert get_square_color(3, 4) == \\"blue\\" assert get_square_color(-5, 10) == \\"green\\" assert get_square_color(-6, -7) == \\"red\\" assert get_square_color(8, -9) == \\"yellow\\" assert get_square_color(0, 0) == \\"uncolored\\" assert get_square_color(0, 5) == \\"uncolored\\" assert get_square_color(-4, 0) == \\"uncolored\\" ``` Write your solution in Python.","solution":"def get_square_color(x, y): Determines the color of the square given its bottom-left corner coordinates (x, y). Parameters: x (int): The x-coordinate of the bottom-left corner of the square. y (int): The y-coordinate of the bottom-left corner of the square. Returns: str: The color of the square which can be \\"blue\\", \\"green\\", \\"red\\", \\"yellow\\", or \\"uncolored\\". if x == 0 or y == 0: return \\"uncolored\\" elif x > 0 and y > 0: return \\"blue\\" elif x < 0 and y > 0: return \\"green\\" elif x < 0 and y < 0: return \\"red\\" elif x > 0 and y < 0: return \\"yellow\\""},{"question":"You are given a tree with n nodes, but initially, it is not connected. There are m edges given in advance, which can be used only once in any order to connect the nodes. Each node represents an island, and each edge represents a ferry route between two islands. You need to determine the minimum time required to connect all the islands so that there is a path between any pair of nodes. Additionally, there are t express ferry routes which can connect any two islands directly at any time without any additional cost during the construction process. Here are the details: - The first line contains three integers n, m, and t (1 ≤ n ≤ 1000, 0 ≤ m ≤ n(n-1)/2, 0 ≤ t ≤ 100) — the number of nodes (islands), the number of initial ferry routes, and the number of express ferry routes available. - Each of the next m lines contains three integers a, b, and c (1 ≤ a, b ≤ n, 1 ≤ c ≤ 1000), meaning there is a ferry route between islands a and b with the cost c. - Each of the next t lines contains two integers x and y (1 ≤ x, y ≤ n) which means there is an express ferry between islands x and y that can be used anytime without any cost. Output a single integer, the minimum cost required to connect all the islands using the provided ferry routes and express ferry routes. **Example** Input: ``` 4 2 1 1 2 4 3 4 2 2 3 ``` Output: ``` 6 ``` In this example, the graph initially has nodes 1, 2, 3, 4 with two ferry routes between (1 and 2 with cost 4) and (3 and 4 with cost 2). There is one express ferry route available directly connecting nodes 2 and 3. The minimum cost to connect all islands would be using the direct routes without additional costs. **Notes** - Use the minimum spanning tree concept to prefer the least costly paths while linking nodes. - If express ferry routes can significantly reduce the cost, they should be used effectively, ensuring all nodes are connected with minimal combined costs from both direct and initial ferry routes.","solution":"import heapq def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def min_cost_to_connect_islands(n, m, t, ferries, express): parent = [i for i in range(n)] rank = [0] * n edges = [] for a, b, c in ferries: edges.append((c, a - 1, b - 1)) # Convert to zero-based index # Add express routes with zero cost for x, y in express: edges.append((0, x - 1, y - 1)) # Convert to zero-based index # Sort edges by weight (cost) edges.sort() mst_cost = 0 for cost, u, v in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += cost return mst_cost"},{"question":"Emma, a computer science student, loves analyzing strings and their properties. She has come up with a new challenge for her friend Liam. Given a string s consisting of lowercase alphabetical characters, Liam needs to determine the maximum possible length of a substring that contains at most two distinct characters. Help Liam solve this problem. The first line of the input contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the following t lines contains a string s (1 ≤ |s| ≤ 105). Print t integers, each corresponding to the maximum length of a substring containing at most two distinct characters for the respective test case.","solution":"def max_length_two_distinct(s): Returns the maximum length of a substring containing at most two distinct characters. n = len(s) if n < 3: return n left, right = 0, 0 hashmap = {} max_len = 2 while right < n: hashmap[s[right]] = right right += 1 if len(hashmap) == 3: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 max_len = max(max_len, right - left) return max_len def process_test_cases(t, strings): results = [] for s in strings: results.append(max_length_two_distinct(s)) return results"},{"question":"Max and Min are again at odds in a different game involving integers and sequences. Max has a sequence of `n` non-negative integers, and Min has a sequence of `m` non-negative integers, both sequences sorted in non-decreasing order. Max wants to maximize and Min wants to minimize the outcome of a certain operation performed on the sequence elements. In each turn, Max can choose any element from his sequence and add it to a running total `T`, and Min can choose any element from his sequence and subtract it from `T`. Max moves first, then Min, and they continue taking turns alternately. The game ends when either player has no elements left to choose. Max wins if the total `T` is positive, Min wins if the total `T` is negative, and they tie if `T` is zero. Given the sequences of integers for Max and Min, determine the result of the game, assuming both players play optimally to achieve their respective goals. The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 100,000) — the number of integers in the sequences available to Max and Min, respectively. The second line contains `n` non-negative integers sorted in non-decreasing order — the sequence available to Max. The third line contains `m` non-negative integers sorted in non-decreasing order — the sequence available to Min. Print \\"Max\\" if Max wins, \\"Min\\" if Min wins, or \\"Tie\\" if the outcome is a tie. Example: Input: ``` 3 3 3 5 8 1 6 7 ``` Output: ``` Tie ``` Explanation: Max can pick 8 first, increasing `T` to 8. Then Min can pick 7, decreasing `T` to 1. Max then picks 5, increasing `T` to 6, and Min picks 6, decreasing `T` to 0. Finally, Max picks 3, increasing `T` to 3, and Min picks 1, decreasing `T` to 2. Despite both players playing optimally, it\'s possible for the final result to end up being 0, hence tying the game.","solution":"def determine_game_outcome(n, m, max_sequence, min_sequence): Determines the outcome of the game between Max and Min based on their sequences. # Sum of elements in Max\'s sequence sum_max_sequence = sum(max_sequence) # Sum of elements in Min\'s sequence sum_min_sequence = sum(min_sequence) # Determine the final T value T = sum_max_sequence - sum_min_sequence # Determine the outcome based on the value of T if T > 0: return \\"Max\\" elif T < 0: return \\"Min\\" else: return \\"Tie\\""},{"question":"Jack and Jill are playing a strategic game on an infinite 2D grid. Each player starts at a distinct point on the grid. Jack starts at coordinates (x1, y1) and Jill starts at coordinates (x2, y2). They take turns to move, starting with Jack. On his turn, Jack can move exactly one unit either horizontally or vertically. Similarly, Jill moves exactly one unit either horizontally or vertically on her turn. The objective of the game is to reach the opponent\'s starting position. Jack and Jill both play optimally. You need to determine who the winner of the game will be under optimal play. Input: The input consists of four space-separated integers x1, y1, x2, y2 representing the initial coordinates of Jack and Jill. Output: Output \\"JACK\\" if Jack wins under optimal play, \\"JILL\\" if Jill wins under optimal play, or \\"DRAW\\" if neither can guarantee a win. Examples: Input 0 0 1 1 Output JACK Input 0 0 3 3 Output JILL In the first example, Jack can move to (0, 1) or (1, 0) and on the next turn move to (1, 1) to win. In the second example, the movement parity ensures that Jill will always move into Jack\'s starting position before he can reach hers.","solution":"def determine_winner(x1, y1, x2, y2): Determine the winner of the game based on the initial positions of Jack and Jill. Parameters: x1, y1 (int, int): Initial coordinates of Jack. x2, y2 (int, int): Initial coordinates of Jill. Returns: str: \\"JACK\\", \\"JILL\\" or \\"DRAW\\" depending on who will win under optimal play. # Calculate the Manhattan distance between Jack\'s and Jill\'s starting positions distance = abs(x1 - x2) + abs(y1 - y2) # If the distance between their positions is even, Jack wins. Otherwise, Jill wins. if distance % 2 == 0: return \\"JACK\\" else: return \\"JILL\\""},{"question":"There are m small islands in Archipelago, numbered 1 through m. Each island is connected to at most two other islands via bridges, forming a series of interconnected islands. Lola is a mail carrier. She starts her delivery at island x and wants to ensure she delivers mail to every island at least once. Lola can only traverse a bridge if it connects the current island to another island directly. Additionally, once she crosses a bridge, she cannot cross it again in the same direction. Given the number of islands m and the starting island x, determine the minimum number of bridges Lola needs to cross to deliver mail to all islands. The first line of the input contains two integers m and x (1 ≤ x ≤ m ≤ 100) — the number of islands and the index of the starting island. The second line contains a series of m - 1 pairs of integers (u, v), denoting that there is a bridge between island u and island v (1 ≤ u, v ≤ m). Output the minimum number of bridge crossings required for Lola to deliver mail to all islands. Example: Input: 5 1 1 2 1 3 2 4 2 5 Output: 4 Explanation: Lola starts at island 1, she can follow the path: 1 -> 2 -> 4 -> 2 -> 5 -> 2 -> 1 -> 3, crossing 4 bridges to ensure she visits all islands.","solution":"def min_bridges_to_cross(m, x, bridges): from collections import defaultdict, deque # Create adjacency list for islands adj_list = defaultdict(list) for u, v in bridges: adj_list[u].append(v) adj_list[v].append(u) # BFS to count edges needed to visit all islands visited = [False] * (m + 1) queue = deque([x]) visited[x] = True edge_count = 0 while queue: island = queue.popleft() for neighbor in adj_list[island]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) edge_count += 1 return edge_count # Function to process input and return the result def solve(m, x, bridge_input): # Parsing the bridge input into list of tuples bridges = [tuple(map(int, bridge_input.strip().split()))[i:i+2] for i in range(0, len(bridge_input.strip().split()), 2)] return min_bridges_to_cross(m, x, bridges)"},{"question":"You are given an n x n grid representing a garden where each cell can either be fertile or barren. A gardener can plant seeds in any row of the garden. When seeds are planted in a row, it will affect not only that row but also spread to its adjacent cells in the same row. If the seeds are planted in a fertile cell, they will turn into plants and spread to any adjacent barren cells in the same row, turning them fertile. However, if seeds are planted in a barren cell, they have no effect. Return the minimum number of rows in which the gardener needs to plant seeds to make the entire garden fertile. The first line of input will be a single integer n (1 ≤ n ≤ 100). The next n lines will each contain a binary string of length n, where \'1\' denotes a fertile cell and \'0\' denotes a barren cell. The output should be a single integer equal to the minimum number of rows in which seeds must be planted to make the entire garden fertile. In the first sample, the gardener can plant seeds in the 1st and 3rd rows, which will make all cells in the garden fertile. In the second sample, all rows are already completely fertile, so the gardener does not need to plant any seeds.","solution":"def min_rows_to_fertilize_garden(n, garden): Returns the minimum number of rows in which the gardener needs to plant seeds to make the entire garden fertile. # Counting the number of rows that contain at least one barren cell rows_with_barren = sum(1 for row in garden if \'0\' in row) return rows_with_barren"},{"question":"**Sum of Alternating Series** Implement a function `sum_alternating_series` that computes the sum of an alternating series of numbers. Given a series of integers, the function should return the sum where the sign of each element alternates, starting with a positive sign for the first element. # Function Signature ```python def sum_alternating_series(series: List[int]) -> int: ``` # Input - A list `series` of integers where 1 leq text{len(series)} leq 10^5 and each element of `series` is between -10^6 and 10^6. # Output - An integer representing the sum of the series with alternating signs. # Example ```python assert sum_alternating_series([5, 3, 8, 6, 2]) == 5 - 3 + 8 - 6 + 2 assert sum_alternating_series([-1, -2, -3, -4, -5]) == -1 + 2 - 3 + 4 - 5 assert sum_alternating_series([1]) == 1 assert sum_alternating_series([10, -10, 10, -10]) == 10 + 10 + 10 + 10 assert sum_alternating_series([42, 56, 78, 90]) == 42 - 56 + 78 - 90 ``` # Notes - The first element in the series should always have a positive sign. - The function should consider both positive and negative integer values in the input series. - Ensure the function efficiently handles the upper limit of input size.","solution":"from typing import List def sum_alternating_series(series: List[int]) -> int: Given a series of integers, this function computes the sum where the sign of each element alternates, starting with a positive sign for the first element. total_sum = 0 for index, value in enumerate(series): if index % 2 == 0: # Even index (0-based), positive sign total_sum += value else: # Odd index, negative sign total_sum -= value return total_sum"},{"question":"You are given an array of n integers and an integer target value. Your task is to determine whether there are two distinct indexes i and j in the array such that the sum of array[i] and array[j] equals the target value. The first line contains two integers n (1 ≤ n ≤ 10⁴) and target (-10⁶ ≤ target ≤ 10⁶). The second line contains n space-separated integers that represent the elements of the array (each integer\'s value is within the range -10⁶ to 10⁶). Print YES if there are two distinct indexes i and j such that array[i] + array[j] equals the target. Otherwise, print NO. Example: Input: 5 10 1 2 3 7 8 Output: YES","solution":"def has_pair_with_sum(n, target, arr): Returns \'YES\' if there are two distinct indexes i and j in the array such that the sum of arr[i] and arr[j] equals the target value. Otherwise, returns \'NO\'. seen = set() for number in arr: if target - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"Consider a restaurant order tracking system. This system records the sequence of orders placed and can perform two types of operations: 1. `add(order_id, price)`: Adds a new order with a specified `order_id` and `price` to the system. 2. `remove(order_id)`: Removes the specified order if it exists in the system. If the order doesn\'t exist, this operation has no effect. The restaurant manager remembers the sequence of operations but not the exact order they occurred. He can recall the operations one at a time in a random order. For each recalled operation, he wants to track the total price of the orders present in the system after executing all the remembered operations up to that point. The first line contains the integer `n` (1 ≤ n ≤ 100000), the number of operations the manager can recall. The next `n` lines contain the operations the manager recalls. Each line starts with one integer `op_type` (1 for `add`, 2 for `remove`). If `op_type` is 1, the line also contains two integers `order_id` (1 ≤ order_id ≤ 100000) and `price` (1 ≤ price ≤ 1000000). If `op_type` is 2, the line only contains the `order_id`. It is guaranteed that no two `add` operations have the same `order_id`. Print `n` integers. Each integer should be the total price of orders in the system after performing all the remembered operations up to that point. **Example:** ``` Input: 5 1 101 50 1 102 30 2 101 1 103 25 2 105 Output: 50 80 30 55 55 ``` **Explanation:** 1. After first operation: system has orders: {101: 50}. Total price: 50. 2. After second operation: system has orders: {101: 50, 102: 30}. Total price: 80. 3. After third operation: system has orders: {102: 30}. Total price: 30. 4. After fourth operation: system has orders: {102: 30, 103: 25}. Total price: 55. 5. After fifth operation: system still has orders: {102: 30, 103: 25} since order_id 105 didn\'t exist. Total price: 55.","solution":"def process_operations(n, operations): Processes a sequence of add and remove operations on restaurant orders and returns the total prices after each operation. :param int n: Number of operations. :param list operations: List of operations to process. :return: List of total prices after each operation. :rtype: list orders = {} # Dictionary to store the current orders with their prices total_price = 0 # Variable to keep track of the total price of orders results = [] # List to store the result after each operation for operation in operations: op_type = operation[0] if op_type == 1: # add operation order_id = operation[1] price = operation[2] orders[order_id] = price total_price += price elif op_type == 2: # remove operation order_id = operation[1] if order_id in orders: total_price -= orders.pop(order_id) results.append(total_price) return results"},{"question":"A group of friends decide to organize a relay race. In this relay race, a baton is passed among friends, and the goal is to complete the race in the minimum amount of time. Each friend has a maximum speed at which they can run, represented by a positive integer. The friends stand in a line and pass the baton sequentially from the first friend to the second, and so on, until the last friend completes the race. Your task is to determine the minimum total time required for all friends to finish the race, given their speeds. It is assumed that the distance each friend needs to run is the same for all friends, and we can calculate the total time by summing up the inverses of their speeds. The input consists of: - An integer n (1 ≤ n ≤ 100), the number of friends. - A list of n integers, where each integer indicates the speed of a friend (1 ≤ speed ≤ 100). For example, if the speeds are [2, 3], then the minimum total time would be 1/2 + 1/3. Output the minimum total time in the format of a floating point number rounded to two decimal places. Consider the first sample test. There are 2 friends with speeds 2 and 3. The minimum total time to finish the race is 1/2 + 1/3 = 0.50 + 0.33 = 0.83 (rounded to two decimal places).","solution":"def minimum_total_time(n, speeds): Calculates the minimum total time required to finish the relay race. Parameters: n (int): The number of friends. speeds (list): A list of integers representing the speeds of the friends. Returns: float: The minimum total time, rounded to two decimal places. total_time = sum(1/speed for speed in speeds) return round(total_time, 2)"},{"question":"John loves collecting rare coins from various countries. He keeps all his coins in a display case that can hold up to `n` rows and `m` columns. Each slot in the display case can hold exactly one coin. John has a total of `k` rare coins to place in the display case. Write a program to help John place all his `k` coins such that the display case is used as efficiently as possible. If `k` is less than or equal to `n * m`, the program should fill the slots row by row until all coins are placed. If `k` is greater than `n * m`, only the first `n * m` coins should be placed and the remaining coins will be discarded. # Input: - The first line contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 10000) — the number of rows and columns of the display case, and the number of coins respectively. # Output: - Print an `n` by `m` matrix representing the display case. Each matrix element should be either `1` (representing a slot occupied by a coin) or `0` (representing an empty slot). If `k` is less than or equal to `n * m`, the matrix should have exactly `k` ones, otherwise it should have exactly `n * m` ones. # Example: Input: 3 4 7 Output: 1 1 1 1 1 1 1 0 0 0 0 0 Input: 2 2 5 Output: 1 1 1 1","solution":"def fill_display_case(n, m, k): Creates an n by m matrix representing the display case and places k coins efficiently such that the display is filled row by row. matrix = [[0] * m for _ in range(n)] coins_to_place = min(k, n * m) for i in range(n): for j in range(m): if coins_to_place > 0: matrix[i][j] = 1 coins_to_place -= 1 else: break return matrix"},{"question":"You are given a list of words. Your task is to form the longest possible sentence from these words following these conditions: 1. Each word can be used only once. 2. A sentence is formed by concatenating the words one after another, maintaining the order. 3. The ending letter of a word must match the starting letter of the next word in the sequence. Your goal is to find the length of the longest sentence that can be formed under these conditions. # Input The input consists of a single line containing a list of words separated by spaces. Each word consists of lowercase English letters, and the length of each word is between 1 and 20 characters. The total number of words in the list will not exceed 1000. # Output Output a single integer: the length of the longest possible sentence formed according to the rules. # Example Input ``` cat tree elephant tap pot tiger rabbit ``` Output ``` 6 ``` # Explanation One possible sequence is: \\"tiger\\" -> \\"rabbit\\" -> \\"tree\\" -> \\"elephant\\" -> \\"tap\\" -> \\"pot\\", which has 6 words.","solution":"def longest_sentence(words): from collections import defaultdict, deque def bfs(start): queue = deque([(start, 1)]) max_length = 0 while queue: current_word, length = queue.popleft() max_length = max(max_length, length) last_char = current_word[-1] for next_word in word_graph[last_char]: if next_word not in visited[current_word]: visited[next_word] = visited[current_word] | {next_word} queue.append((next_word, length + 1)) return max_length word_graph = defaultdict(list) for word in words: word_graph[word[0]].append(word) max_sentence_length = 0 for word in words: visited = defaultdict(set) visited[word] = {word} max_sentence_length = max(max_sentence_length, bfs(word)) return max_sentence_length"},{"question":"A university has several student groups and each group organizes a number of events every semester. Each student can choose to attend any event and after attending an event, they accumulate credit points based on the event\'s score. Your task is to help a student determine the maximum total credit points they can earn by attending events from different groups, given certain restrictions: 1. A student can attend at most one event from each group. 2. There are `k` groups, and each group contains `m` events. 3. The score of each event is provided. Determine the maximum number of credit points the student can earn. Input Format: - The first line contains two integers `k` and `m` (1 ≤ k, m ≤ 1000) - the number of groups and the number of events in each group, respectively. - The next `k` lines each contain `m` integers, where the j-th integer of the i-th line `s_ij` (1 ≤ s_ij ≤ 1000) represents the score of the j-th event in the i-th group. Output Format: - Output a single integer representing the maximum total credit points the student can earn. Example: ``` Input: 3 4 5 2 8 3 3 6 7 4 9 2 1 7 Output: 24 Explanation: The student can attend the event with score 8 from the first group, 7 from the second group, and 9 from the third group to earn a maximum of 24 credit points. ```","solution":"def max_credit_points(k, m, scores): Returns the maximum total credit points a student can earn by attending at most one event from each group. Parameters: k (int): The number of groups. m (int): The number of events in each group. scores (list of list of int): The scores of the events in each group. Returns: int: The maximum total credit points the student can earn. max_points = 0 for group in scores: max_points += max(group) return max_points"},{"question":"The following question provides another challenge in a similar interactive format to the provided sample: Given an integer array `arr` of size `n`, Kakuro enjoys creating subarrays of length `k` from `arr` and checking their sum. In this game, your task is to process `m` queries given by Kakuro and decide for each query if there exists a subarray of length `k` with a sum exactly equal to the number provided in the query. The first line contains 3 integers `n` (length of the array), `k` (length of the subarray), and `m` (number of queries) respectively. The second line contains `n` space-separated integers representing the elements of the array `arr`. The remaining `m` lines each contain a single integer representing the sum queried by Kakuro. For each query, output \\"YES\\" if there exists a subarray of length `k` with the exact sum as the queried number, otherwise output \\"NO\\". **Input:** ``` 5 3 3 1 2 3 4 5 6 10 9 ``` **Output:** ``` YES NO YES ``` **Explanation:** - For the first query, a subarray with sum 6 exists: [1, 2, 3]. - For the second query, no subarray of length 3 has a sum of 10. - For the third query, a subarray with sum 9 exists: [2, 3, 4]. Write a program that will solve the problem based on the input format described.","solution":"def find_subarray_with_sum(n, k, m, arr, queries): result = [] for query in queries: found = False current_sum = sum(arr[:k]) if current_sum == query: result.append(\\"YES\\") continue for i in range(1, n - k + 1): current_sum = current_sum - arr[i - 1] + arr[i + k - 1] if current_sum == query: found = True break if found: result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Little fox Furry is fascinated by integers. One day, he came up with a challenge involving integers of length n. He wants to create an integer that satisfies the following conditions: 1. The integer should have exactly n digits. 2. Each digit must be between 1 and k (both inclusive). 3. The integer must be divisible by m. Help Furry find such an integer or state that such an integer doesn\'t exist. A single line contains three positive integers n, k, and m (1 ≤ n ≤ 10^6, 1 ≤ k ≤ 9, 1 ≤ m ≤ 10^3) — the integer\'s length, the range of digits, and the divisor. In a single line, print the required integer. If there isn\'t such an integer, print \\"-1\\" (without the quotes).","solution":"def find_integer(n, k, m): Finds the smallest integer of length n, with digits between 1 and k, which is divisible by m. Returns the integer as a string or \\"-1\\" if no such integer exists. if m > int(\'9\' * n): return \\"-1\\" start = 10**(n-1) end = 10**n - 1 for num in range(start, end+1): num_str = str(num) if all(1 <= int(d) <= k for d in num_str) and num % m == 0: return num_str return \\"-1\\""},{"question":"You are given a string that contains only lowercase letters and has a length N. You need to determine the minimum number of characters you must delete from this string to create a new string where no two adjacent characters are the same. Write a program that computes the minimum number of deletions required to achieve this. # Input - A single line containing the string s (1 leq |s| leq 100,000), which consists of only lowercase alphabetic characters. # Output - A single integer representing the minimum number of deletions required. # Examples Example 1 **Input:** ``` aab ``` **Output:** ``` 1 ``` **Explanation:** By deleting one of the \'a\' characters, the resulting string \\"ab\\" has no two adjacent characters that are the same. Example 2 **Input:** ``` aaaa ``` **Output:** ``` 3 ``` **Explanation:** By deleting three of the \'a\' characters, the resulting string \\"a\\" has no two adjacent characters that are the same. Example 3 **Input:** ``` ababa ``` **Output:** ``` 0 ``` **Explanation:** The string \\"ababa\\" does not have any adjacent characters that are the same, so no deletions are needed. Example 4 **Input:** ``` abcdee ``` **Output:** ``` 1 ``` **Explanation:** By deleting one of the \'e\' characters, the resulting string \\"abcde\\" has no two adjacent characters that are the same.","solution":"def min_deletions_to_avoid_adjacent_duplicates(s): Calculate the minimum number of deletions required to create a string where no two adjacent characters are the same. deletions = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: deletions += 1 return deletions"},{"question":"A software company is developing a new algorithm to allocate computing resources more efficiently. To achieve this, they need to analyze the workflow of various processes over a period of t seconds during a daily operational cycle. For each second i during this period, they know the CPU usage ui and the memory usage mi. The goal is to find suitable time intervals that maximize resource utilization without exceeding predefined thresholds. The utilization of a time interval from l to r (inclusive) is defined as the sum of CPU usages divided by the length of the interval times the sum of memory usages during that period, that is: The company\'s IT team has decided to analyze k random distinct intervals [li, ri] (1 ≤ li ≤ ri ≤ t), each one starting at li and ending at ri ≥ li. For every interval, the utilization is computed, and the company will use the maximum utilization value among these intervals as a key metric for their resource allocation algorithm\'s efficiency. Input format: - The first line contains two integers t and k (1 ≤ k ≤ t ≤ 10^6). - The second line contains t integers ui (1 ≤ ui ≤ 10^6) — the CPU usage during each second. - The third line contains t integers mi (1 ≤ mi ≤ 10^6) — the memory usage during each second. Output format: Print a single real value — the expected maximum utilization of the intervals. Your answer will be considered correct if its absolute or relative error does not exceed 10^-6. Example: Let\'s consider the case when t = 3 and k = 2. If the intervals chosen by IT are [1, 1], [2, 2], and [3, 3]: - For the interval [1, 1]: utilization = u1 / m1. - For the interval [2, 2]: utilization = u2 / m2. - For the interval [3, 3]: utilization = u3 / m3. Among these sampled intervals, the company will take the maximum utilization value to evaluate their algorithm. If the sample input is: 3 2 2 4 6 1 3 2 The intervals that maximize the utilization are [3, 3] and [2, 2]. The expected value would be the maximum among the possible intervals considered by the algorithm. Calculations need to account for all k intervals chosen randomly and compute their maximum. The final answer would be the maximum utilization computed within the given constraints.","solution":"def maximize_utilization(t, k, cpu_usage, memory_usage): This function calculates the maximum utilization value among k random intervals. max_utilization = 0 for i in range(t): current_utilization = cpu_usage[i] / memory_usage[i] max_utilization = max(max_utilization, current_utilization) return max_utilization"},{"question":"You are given a list of integers representing the prices of different products on a single day. Your goal is to maximize the difference between the most expensive product and the cheapest product after potentially modifying the prices. You can perform the following operation any number of times: select any two products and swap their prices. Determine the maximum possible difference between the highest and the lowest price after performing any number of such swaps. The input consists of two lines: 1. The first line contains an integer n (1 le n le 10^{5}) — the number of products. 2. The second line contains a list of integers p_1, p_2, dots, p_n (1 le p_i le 10^{9}) — the initial prices of the products. Print the maximum possible difference between the most expensive product and the cheapest product after performing any number of swaps. In the first example, no swaps are necessary since the maximum and minimum prices are already present in the list. The difference between the maximum and minimum price remains unchanged. In the second example, swapping prices among products does not change the overall maximum and minimum prices. Therefore, the output is determined by the initial maximum and minimum prices in the list.","solution":"def max_price_difference(n, prices): Returns the maximum possible difference between the highest and the lowest prices after performing any number of swaps. Parameters: - n: int, the number of products - prices: list of int, the initial prices of the products Returns: - int: the maximum possible difference between the highest and the lowest price if not prices or n == 0: return 0 max_price = max(prices) min_price = min(prices) return max_price - min_price"},{"question":"You are given a binary string (it is a string which consists only of characters \'0\' and \'1\'). You can perform the following operations on the string: 1. Select any two consecutive \\"01\\" and swap them to \\"10\\". 2. Select any two consecutive \\"10\\" and swap them to \\"01\\". 3. Select any two consecutive \\"00\\" and swap them to \\"11\\". 4. Select any two consecutive \\"11\\" and swap them to \\"00\\". Your task is to determine if it is possible to sort the string in non-decreasing order (i.e., all \'0\'s come before all \'1\'s) using the allowed operations. The first line of the input contains the string s consisting only of characters \'0\' and \'1\', and its length is between 1 and 10^5 (inclusive). Print \\"YES\\" if it is possible to sort the string in non-decreasing order using the operations described above, otherwise print \\"NO\\".","solution":"def can_sort_binary_string(s): Determines if the given binary string can be sorted in non-decreasing order using the allowed operations. count_0 = s.count(\'0\') count_1 = s.count(\'1\') # If every \'0\' can be swapped to the left and every \'1\' to the right, we can always sort it. return \\"YES\\" if count_0 + count_1 == len(s) else \\"NO\\""},{"question":"A group of friends decided to climb a mountain to enjoy a scenic view from the top. They know in advance that the trail to the summit can be described as a series of segments, each with a certain length and a certain level of difficulty. The difficulty of each segment is measured on a scale from 1 (easiest) to 10 (hardest). The friends want to reach the summit using a path that minimizes the maximum difficulty they will have to face on any single segment. Given a list of n segments, where each segment is defined by its length and difficulty, calculate the minimum possible maximum difficulty of any segment on the chosen path to the summit. # Input - The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of segments. - Each of the next n lines contains two integers li and di (1 ≤ li ≤ 100, 1 ≤ di ≤ 10) — the length and difficulty of the i-th segment. # Output - Print a single integer — the minimum possible maximum difficulty of any segment on the chosen path to the summit. # Example Input ``` 5 5 3 2 5 1 2 3 4 4 3 ``` Output ``` 3 ``` Explanation In the example, one possible path to the summit that minimizes the maximum difficulty could be segments 1, 3, and 5, with difficulties 3, 2, and 3 respectively. The maximum difficulty among these segments is 3, which is the minimum possible maximum difficulty.","solution":"def minimum_maximum_difficulty(segments): Returns the minimum possible maximum difficulty of any segment on the chosen path to the summit. segments: List of tuples [(length, difficulty), ...] representing each segment. return min(difficulty for length, difficulty in segments)"},{"question":"In a small village, there are n water wells, each numbered from 1 to n. The residents of the village regularly draw water from the wells. Each well has an initial water level at the beginning of the day recorded as a_1, a_2, ldots, a_n liters. At the end of the day, the water levels in the wells are recorded as b_1, b_2, ldots, b_n liters. Throughout the day, the residents can draw any amount of water from any well. However, they can\'t add water to any well. Given the initial and final water levels, the villagers want to verify if the recorded water levels make sense. The first line of the input contains a single integer n, the number of wells in the village (1 leq n leq 50). The second line contains n integers separated by spaces a_1, a_2, ldots, a_n, the initial water levels in the wells at the beginning of the day (0 leq a_i leq 1000). The third line contains n integers separated by spaces b_1, b_2, ldots, b_n, the water levels in the wells at the end of the day (0 leq b_i leq 1000). If the recorded water levels can be consistent (i.e., the end-of-day water levels are not higher than the start-of-day levels for each well), output \\"Valid\\", otherwise output \\"Invalid\\" (quotes for clarity). # Example: **Input:** ``` 3 100 200 150 90 180 130 ``` **Output:** ``` Valid ``` **Explanation:** In this example, villagers could have drawn 10 liters from the first well, 20 liters from the second well, and 20 liters from the third well, making it a plausible scenario.","solution":"def validate_water_levels(n, initial_levels, final_levels): Verifies if the final water levels can be consistent with the initial water levels considering that water can only be drawn from the wells. Parameters: - n: int, the number of wells. - initial_levels: list of int, initial water levels in the wells. - final_levels: list of int, final water levels in the wells. Returns: - str: \'Valid\' if the final levels are consistent, \'Invalid\' otherwise. for initial, final in zip(initial_levels, final_levels): if final > initial: return \\"Invalid\\" return \\"Valid\\""},{"question":"Tom is working on a text editor and he wants to implement a feature for finding and replacing words efficiently in a given text document. The text document is represented as a string and the words to be replaced are given in the form of pairs where each pair consists of a target word and the replacement word. Your task is to write a function to process multiple queries of find and replace operations on the text document. The first line contains two integers n and m (1 ≤ n ≤ 10^4, 1 ≤ m ≤ 10^2) — the length of the text and the number of replacement operations. The second line contains the text of length n which is a single string consisting of lowercase English letters. The following m lines each contain two space-separated words: the target word and the replacement word. All words consist of lowercase English letters and their lengths do not exceed 100 characters. For each replacement operation, replace all non-overlapping occurrences of the target word with the replacement word in the text. Output the final modified text after all replacement operations are applied. # Example: **Input:** ``` 63 3 hello there this is a simple text document for testing purposes only hello hi document file simple complex ``` **Output:** ``` hi there this is a complex text file for testing purposes only ``` **Explanation:** - The word \\"hello\\" is replaced with \\"hi\\". - The word \\"document\\" is replaced with \\"file\\". - The word \\"simple\\" is replaced with \\"complex\\".","solution":"def find_and_replace(text, replacements): Perform find and replace operations on the input text based on the given replacements. :param text: The original text string. :param replacements: A list of tuples where each tuple consists of a target word and a replacement word. :return: The modified text after all replacements. for target, replacement in replacements: text = text.replace(target, replacement) return text def process_replacement_operations(n, m, text, operations): Given the number of characters n, the number of replacement operations m, the original text, and the list of replacement operations, perform the replacements and return the modified text. :param n: An integer, the length of the text. :param m: An integer, the number of replacement operations. :param text: A string, the original text. :param operations: A list of tuples, each containing a target word and a replacement word. :return: The final modified text. return find_and_replace(text, operations)"}]'),j={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:Y,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},N={class:"search-container"},S={class:"card-container"},F={key:0,class:"empty-state"},z=["disabled"],D={key:0},C={key:1};function R(s,e,h,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",N,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",S,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+u(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",C,"Loading...")):(n(),i("span",D,"See more"))],8,z)):l("",!0)])}const L=d(j,[["render",R],["__scopeId","data-v-b9a7fabe"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/30.md","filePath":"deepseek/30.md"}'),P={name:"deepseek/30.md"},G=Object.assign(P,{setup(s){return(e,h)=>(n(),i("div",null,[x(L)]))}});export{B as __pageData,G as default};
