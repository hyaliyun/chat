import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},k={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,r,a){return n(),i("div",q,[t("div",k,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-7c0ec69d"]]),S=JSON.parse('[{"question":"Given an array of integers, you are required to perform \'Q\' queries of two types on it: 1. `update(x, y)`: Update the element at position \'x\' of the array to \'y\'. 2. `kth_one(l, r, k)`: Find the k-th smallest element in the subarray from index \'l\' to \'r\' inclusive. Implement a program to handle these queries efficiently. Input format: - The first line contains an integer \'N\', the size of the array. - The second line contains \'N\' integers, representing the elements of the array. - The third line contains an integer \'Q\', the number of queries. - The next \'Q\' lines contain the queries of either type \'update\' or \'kth_one\'. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ Array elements ≤ 10^9 - 1 ≤ Q ≤ 10^4 - 1 ≤ l < r ≤ N - 1 ≤ k ≤ (r - l + 1) - 1 ≤ x ≤ N Output format: For each query of type `kth_one`, print the result on a new line. Sample Input: 6 1 5 2 6 3 4 3 update 3 7 kth_one 2 5 3 kth_one 1 6 4 Sample Output: 6 5 Explanation: 1. After updating the 3rd element to 7, the array becomes [1, 5, 7, 6, 3, 4]. 2. For the query `kth_one 2 5 3`, the third smallest element in the subarray [5, 7, 6, 3] is 6. 3. For the query `kth_one 1 6 4`, the fourth smallest element in the entire array [1, 5, 7, 6, 3, 4] is 5.","solution":"def update(array, x, y): Updates the element at position x in the array to y. array[x-1] = y def kth_one(array, l, r, k): Returns the k-th smallest element in the subarray from index l to r inclusive. subarray = array[l-1:r] subarray.sort() return subarray[k-1] def process_queries(array, queries): Processes a list of queries on the array. results = [] for query in queries: parts = query.split() if parts[0] == \\"update\\": update(array, int(parts[1]), int(parts[2])) elif parts[0] == \\"kth_one\\": result = kth_one(array, int(parts[1]), int(parts[2]), int(parts[3])) results.append(result) return results"},{"question":"Task You are given an integer array `A` and two integers `L` and `R`. Your task is to process a series of operations and queries on `A`, which can either update elements within a specified range or calculate the sum of elements within a given range. # Operations The operations are of two types: 1. **Update Operation:** - The operation is denoted by `1 l r x`, which means that the elements of the array from index `l` to `r` inclusive should be increased by `x`. 2. **Sum Query:** - The query is denoted by `2 l r`, which means to return the sum of the elements from index `l` to `r` inclusive. # Input - The first line contains three integers `N`, `Q`, and `K`, where `N` is the number of elements in the array `A`, `Q` is the number of operations/queries, and `K` is a constant to add as an initial value to elements in `A`. - The second line contains `N` integers representing the elements of the array `A`. - The next `Q` lines describe the operations/queries in the following format: - `1 l r x` for an update operation. - `2 l r` for a sum query. # Output - For each sum query, output the result on a new line. # Constraints - 1 leq N, Q leq 10^5 - 0 leq A[i] leq 10^9 - 1 leq l leq r leq N - -10^9 leq x leq 10^9 - 0 leq K leq 10^9 # Example **Input:** ``` 5 5 2 1 2 3 4 5 2 1 3 1 2 4 1 2 1 3 1 3 5 -2 2 3 5 ``` **Output:** ``` 8 10 9 ``` **Explanation:** - The initial array after adding K to each element is: [3, 4, 5, 6, 7]. - For `2 1 3`, the sum of elements from index 1 to 3 is 3 + 4 + 5 = 12. - After `1 2 4 1`, the array becomes: [3, 5, 6, 7, 7]. - For `2 1 3`, the sum of elements from index 1 to 3 is 3 + 5 + 6 = 14. - After `1 3 5 -2`, the array becomes: [3, 5, 4, 5, 5]. - For `2 3 5`, the sum of elements from index 3 to 5 is 4 + 5 + 5 = 14.","solution":"def process_operations_and_queries(N, Q, K, A, operations): Processes update and sum operations on an array A. Parameters: - N: The number of elements in the array A. - Q: The number of operations/queries. - K: The constant value added to each element in A. - A: The list of integers representing the array. - operations: List of tuples representing the operations/queries where each tuple can be: - (1, l, r, x) for update operation. - (2, l, r) for sum query. Returns: - A list of integers, where each integer is the result of a sum query. A = [a + K for a in A] results = [] for op in operations: if op[0] == 1: # Update operation l, r, x = op[1] - 1, op[2] - 1, op[3] for i in range(l, r + 1): A[i] += x elif op[0] == 2: # Sum query l, r = op[1] - 1, op[2] - 1 results.append(sum(A[l:r + 1])) return results # Example usage: N = 5 Q = 5 K = 2 A = [1, 2, 3, 4, 5] operations = [ (2, 1, 3), (1, 2, 4, 1), (2, 1, 3), (1, 3, 5, -2), (2, 3, 5) ] print(process_operations_and_queries(N, Q, K, A, operations)) # Output: [12, 14, 14]"},{"question":"Given an array of integers, return an array of averages of all possible subarrays of length 3. Example 1: Input: [1, 2, 3, 4, 5] Output: [2.0, 3.0, 4.0] Example 2: Input: [5, 1, 3, 2, 8] Output: [3.0, 2.0, 4.333333333333333] Note: - The input array will have at least 3 integers. - The averages should be rounded to one decimal place.","solution":"def average_of_subarrays(arr): Given an array of integers, returns an array of averages of all possible subarrays of length 3. n = len(arr) result = [(arr[i] + arr[i+1] + arr[i+2]) / 3 for i in range(n - 3 + 1)] return [round(avg, 1) for avg in result]"},{"question":"Problem You are given an array of integers nums representing the preference scores of several items. The higher the score, the more preferred the item is. You are also given an integer k , which indicates the number of items you want to select. Your task is to select k items such that the preference scores of the selected items have the maximum possible sum. Each item can only be selected once. However, you must consider the following condition: The selected items should not be adjacent to each other in the array. Write a function `maxPreferenceScore(nums: List[int], k: int) -> int` that returns the maximum possible sum of the preference scores of the selected items. # Constraints - The length of nums is at least 1 and at most 10^5. - Each element in nums is an integer between -10^4 and 10^4. - k is a positive integer and k le frac{|nums| + 1}{2} . # Input The input is given in the following format: ``` nums k ``` - nums is a list of integers representing the preference scores. - k is an integer. # Output Output a single integer representing the maximum possible sum of the selected preference scores. # Example Input: ``` [1, 2, 3, 1, 2, 3] 2 ``` Output: ``` 6 ``` Explanation: Select the items with scores 3 and 3 (indices 2 and 5). --- Input: ``` [5, 1, 1, 5, 1, 1, 5] 3 ``` Output: ``` 15 ``` Explanation: Select the items with scores 5, 5, and 5 (indices are 0, 3, and 6). --- Input: ``` [4, 10, 3, 1, 5] 2 ``` Output: ``` 15 ``` Explanation: Select the items with scores 10 and 5 (indices are 1 and 4).","solution":"from typing import List import heapq def maxPreferenceScore(nums: List[int], k: int) -> int: # Create a max-heap with (-score, index) tuples max_heap = [(-nums[i], i) for i in range(len(nums))] heapq.heapify(max_heap) selected_scores = [] taken_indices = set() while len(selected_scores) < k: # Pop the maximum element from the heap (note the negation) score, index = heapq.heappop(max_heap) score = -score # Check if adjacent indices have been taken if index not in taken_indices and (index - 1) not in taken_indices and (index + 1) not in taken_indices: selected_scores.append(score) taken_indices.add(index) return sum(selected_scores)"},{"question":"For this challenge, you are required to implement the Binary Search algorithm. Binary Search is an efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item until you have narrowed down the possible locations to just one. Binary Search Algorithm The Binary Search algorithm works as follows: 1. Start with the middle element of the array. 2. If the middle element is equal to the target value, return the index of the middle element. 3. If the middle element is greater than the target value, narrow the search to the left half of the array. 4. If the middle element is less than the target value, narrow the search to the right half of the array. 5. Repeat steps 1 to 4 until the target value is found or the subarray size becomes zero. Challenge You must implement the binary search algorithm. If the target value is found in the array, return its index. If the target value is not found, return -1. Function Description Complete the binarySearch function in the editor below. binarySearch has the following parameter(s): int arr[n]: a sorted array of integers int target: the target value to search for Returns int: the index of target in the array or -1 if the target is not found Input Format The first line contains the integer n, the number of elements in the array. The second line contains n integers, the elements of the sorted array arr. The third line contains the integer target, the target value to search for. Constraints 1 <= n <= 1000 -10^3 <= arr[i] <= 10^3 -10^3 <= target <= 10^3 arr is guaranteed to be sorted in non-decreasing order. Sample Input STDIN Function ----- -------- 5 arr[] size n = 5 1 2 3 4 5 arr = [1, 2, 3, 4, 5] 3 target = 3 Sample Output 2 Explanation The target value 3 is present at index 2 in the array. Therefore, the function returns 2.","solution":"def binarySearch(arr, target): Returns the index of the target in the sorted array arr if found, otherwise returns -1. Parameters: arr (list): A sorted list of integers target (int): The target value to search for in the array Returns: int: The index of the target in the array, or -1 if the target is not found left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"You are given a string S consisting of N uppercase English letters. Your task is to find the number of distinct substrings that can be formed from S by selecting exactly L contiguous characters. -----Constraints----- - 1 leq N leq 10^5 - 1 leq L leq N - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N L S -----Output----- Print the number of distinct substrings of length L that can be formed from S. -----Sample Input----- 5 3 ABCDE -----Sample Output----- 3 Distinct substrings of length 3 are: \\"ABC\\", \\"BCD\\", and \\"CDE\\".","solution":"def count_distinct_substrings(N, L, S): Returns the number of distinct substrings of length L that can be formed from S. substrings = set() for i in range(N - L + 1): substrings.add(S[i:i+L]) return len(substrings)"},{"question":"You are given two strings, `s1` and `s2`. Determine if `s2` is a cyclic rotation of `s1`. A cyclic rotation of a string is obtained by repeatedly moving the leftmost character to the end of the string. Input The input consists of two lines: - The first line contains the string `s1`. - The second line contains the string `s2`. Constraints - The length of `s1` and `s2` is between 1 and 1000000, inclusive. - Both strings consist only of lowercase English letters. Output Print `YES` if `s2` is a cyclic rotation of `s1`. Otherwise, print `NO`. Examples Input abcde cdeab Output YES Input abcde abced Output NO Note In the first example, rotating \\"abcde\\" three times will result in \\"cdeab\\", which matches `s2`. In the second example, there is no rotation of \\"abcde\\" that results in \\"abced\\".","solution":"def is_cyclic_rotation(s1, s2): Determines if s2 is a cyclic rotation of s1. if len(s1) != len(s2): return \\"NO\\" combined = s1 + s1 if s2 in combined: return \\"YES\\" else: return \\"NO\\" # Read input strings (this section would be used in an actual competition scenario) # s1 = input().strip() # s2 = input().strip() # print(is_cyclic_rotation(s1, s2))"},{"question":"Given a list of N integers, where each integer represents the height of a vertical line drawn on a Cartesian plane at that index. The widths between each pair of adjacent lines are all the same. Write a function maxWaterContainer() to find the maximum amount of water a container formed by picking two of these lines can hold. Example 1: Input: heights = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The maximum water container can be formed between the lines at index 1 (height 8) and index 8 (height 7), with the amount of water they can hold being 49 units (calculated as min(8, 7) * (8 - 1)). Your Task: You need to complete the function maxWaterContainer() which takes a list of integers \'heights\' as input and returns an integer representing the maximum water that can be contained. Constraints: 1 <= N <= 10^5 0 <= heights[i] <= 10^4","solution":"def maxWaterContainer(heights): Returns the maximum amount of water a container can hold by picking two lines. left, right = 0, len(heights) - 1 max_water = 0 while left < right: width = right - left height = min(heights[left], heights[right]) max_water = max(max_water, width * height) if heights[left] <= heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"In a social media app, users can follow and be followed by other users, forming a network. Each user\'s profile shows a list of their followers and a list of those they follow. We call a user a \\"popular user\\" if they have more followers than the number of people they follow. You are given the following information: - The number of users in the app, `N`. - A list of `N` integers where the i-th number represents the number of users that user-i follows. - A list of `N` integers where the i-th number represents the number of followers of user-i. Determine how many popular users are there in the app. -----Input----- The first line contains a single integer `N` (1 ≤ N ≤ 100,000) representing the number of users. The second line contains `N` integers where the i-th integer `follow_count[i]` (0 ≤ follow_count[i] ≤ 100,000) indicates the number of users that the i-th user follows. The third line contains `N` integers where the i-th integer `follower_count[i]` (0 ≤ follower_count[i] ≤ 100,000) indicates the number of followers that the i-th user has. -----Output----- Print a single integer representing the count of popular users. -----Examples----- Input 5 1 2 3 4 5 5 4 3 2 1 Output 2 Input 3 0 1 2 2 1 0 Output 1 Input 4 0 0 0 0 0 1 2 3 Output 3","solution":"def count_popular_users(N, follow_count, follower_count): Function to count the number of popular users in a social media app. Args: N : int : number of users follow_count : list of int : list where i-th element is the number of users the i-th user follows follower_count : list of int : list where i-th element is the number of followers of the i-th user Returns: int : number of popular users popular_count = 0 for i in range(N): if follower_count[i] > follow_count[i]: popular_count += 1 return popular_count"},{"question":"You are given an array of integers representing the heights of buildings. Each building can receive a certain amount of sunlight depending on its height and the heights of buildings to its left. A building receives sunlight if it is taller than all the buildings to its left. Find and return the number of buildings that can receive sunlight. Example: Input: 6 3 2 4 5 1 7 Output: 4 Explanation: The buildings with heights 3, 4, 5, and 7 receive sunlight. Building 2 does not receive sunlight because of the building with height 3 to its left. Similarly, building 1 does not receive sunlight because of buildings with heights 3, 4, and 5 to its left. Your Task: You don\'t have to read input or print anything. Your task is to complete the function countBuildingsWithSunlight() which takes the integer n and array heights and returns the number of buildings that receive sunlight. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraint: 1 <= n <= 10^5 1 <= heights[i] <= 10^5","solution":"def countBuildingsWithSunlight(n, heights): Returns the number of buildings that receive sunlight. Parameters: n (int): Number of buildings. heights (List[int]): Heights of the buildings. Returns: int: Number of buildings that receive sunlight. if n == 0: return 0 max_height = heights[0] count = 1 for i in range(1, n): if heights[i] > max_height: count += 1 max_height = heights[i] return count"},{"question":"There is a company that arranges team-building trips for every department. Each department has a unique number of employees and the company decides to rent buses for the trips. Each bus can hold a maximum of k employees. The company\'s goal is to minimize the number of buses needed for each department\'s trip. Given the number of employees in each department, determine the minimum number of buses required for each department. You need to write a program that, given the number of employees in each department and the maximum capacity of each bus, computes the minimum number of buses required for each department. -----Input----- The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of departments. Each of the next t lines contains two integers: n (1 ≤ n ≤ 1000) — the number of employees in the department, and k (1 ≤ k ≤ 1000) — the maximum capacity of each bus. -----Output----- For each department, output the minimum number of buses required. -----Examples----- Input 3 10 4 15 5 7 2 Output 3 3 4","solution":"def min_buses_required(t, departments): This function calculates the minimum number of buses required for each department. :param t: The number of departments :param departments: A list of tuples where each tuple contains two integers, the number of employees in the department and the maximum capacity of each bus. :return: A list of integers where each integer represents the minimum number of buses required results = [] for n, k in departments: # Calculate the minimum number of buses required buses = (n + k - 1) // k results.append(buses) return results"},{"question":"Given a series of integers that follow the rules of a Palindromic sequence, where each integer is a palindrome and is generated by reversing and adding the original integer (e.g., 23 becomes 23 + 32 = 55). The sequence continues until it becomes a palindrome. Write a program that takes a list of integers and determines the number of steps it takes for each integer in the list to become a palindrome. If the integer does not become a palindrome within 1000 iterations, consider it as a failure. Input format: - The first line contains the number of test cases, T. - The next T lines each contain one integer. Output format: For each test case, print the number of steps it took for the integer to become a palindrome. If it fails to become a palindrome within 1000 steps, print \\"FAIL\\". Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^6 SAMPLE INPUT 3 23 87 196 SAMPLE OUTPUT 1 4 FAIL Explanation: - For the first test case: 23 becomes 55 after 1 reversal and addition. - For the second test case: 87 becomes 165, 726, 1353, 4664 after 4 reversals and additions. - For the third input, 196 does not become a palindrome within 1000 iterations.","solution":"def is_palindrome(n): return str(n) == str(n)[::-1] def steps_to_palindrome(n): step_count = 0 while step_count < 1000: if is_palindrome(n): return step_count n = n + int(str(n)[::-1]) step_count += 1 return \\"FAIL\\" def palindromic_sequence_steps(test_cases): results = [] for n in test_cases: results.append(steps_to_palindrome(n)) return results"},{"question":"Given a matrix M of size NxM containing positive integers, rotate the matrix 90 degrees in the clockwise direction. You need to perform this rotation in-place. After rotating the matrix, return the updated matrix. Example 1: Input: N = 3, M = 3 M = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] Example 2: Input: N = 2, M = 4 M = [ [1, 2, 3, 4], [5, 6, 7, 8] ] Output: [ [5, 1], [6, 2], [7, 3], [8, 4] ] Your Task: You don\'t need to read input or print anything. Your task is to complete the function rotateClockwise() which takes the matrix M and its size NxM as inputs and rotates the matrix 90 degrees in-place, then returns the updated matrix. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(1) Constraints: 1 <= N, M <= 100 1 <= matrix[i][j] <= 10^3","solution":"def rotateClockwise(matrix): Rotates the matrix 90 degrees clockwise in-place. N = len(matrix) M = len(matrix[0]) # Create a new transposed, reversed matrix new_matrix = [[0] * N for _ in range(M)] # Populate the new_matrix for i in range(N): for j in range(M): new_matrix[j][N-1-i] = matrix[i][j] # Copy new_matrix to the original matrix for r in range(M): for c in range(N): if r < len(matrix) and c < len(matrix[0]): matrix[r][c] = new_matrix[r][c] # Reshape original matrix if needed if len(matrix) != len(new_matrix): matrix[:] = new_matrix return matrix"},{"question":"A city is building a unique metro system that consists of N stations all connected with bidirectional metro tracks forming a complete graph. Each track between stations i and j has a time cost Tij associated with it, which represents the time it takes to travel between the two stations. The city planner needs to calculate the minimum travel time needed to visit all N stations starting from a given station S. Design an algorithm that helps the city planner to determine this minimal travel time. Your task is to implement this algorithm and provide the solution for different scenarios. -----Input:----- - The first line of the input contains an integer T, the number of test cases. - Each test case starts with an integer N, the number of stations. - The next N lines each contain N space-separated integers, where the j-th integer in the i-th line represents the time cost Tij. - The last line of each test case contains an integer S, the starting station. -----Output:----- For each test case, print a single line containing the minimal travel time needed to visit all stations starting and ending at station S. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 10 - 1 ≤ Tij ≤ 1000 - 1 ≤ S ≤ N -----Sample Input:----- 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 1 3 0 5 6 5 0 7 6 7 0 2 -----Sample Output:----- 80 18 -----EXPLANATION:----- In the first test case, the minimum travel time needed to visit all stations starting and ending at station 1 is 80. In the second test case, the minimum travel time needed to visit all stations starting and ending at station 2 is 18.","solution":"import itertools def minimal_travel_time(T, test_cases): Calculate the minimal travel time needed to visit all stations starting from a given station S. Parameters: T (int): The number of test cases. test_cases (list): A list of dictionaries, each containing the number of stations (N), the time cost matrix (costs), and the starting station (S). Returns: result (list): The minimal travel times for each of the test cases. results = [] for case in test_cases: N = case[\'N\'] costs = case[\'costs\'] S = case[\'S\'] - 1 # Adjust to 0-based index # Generate all permutations of the stations excluding the starting station stations = list(range(N)) stations.remove(S) permutations = itertools.permutations(stations) min_time = float(\'inf\') # Calculate the travel time for each permutation for perm in permutations: current_time = 0 # Start from S current = S # Travel through the permutation for station in perm: current_time += costs[current][station] current = station # Return to the starting station current_time += costs[current][S] # Check if this is the minimal travel time if current_time < min_time: min_time = current_time results.append(min_time) return results def process_input_output(input_data): Process the input and output data for the minimal travel time calculation. Parameters: input_data (str): The input data as a single string. Returns: output_data (str): The output data as a single string with minimal travel times for each test case. data = input_data.strip().split(\'n\') T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 costs = [] for _ in range(N): costs.append(list(map(int, data[index].split()))) index += 1 S = int(data[index]) index += 1 test_cases.append({\'N\': N, \'costs\': costs, \'S\': S}) results = minimal_travel_time(T, test_cases) return \'n\'.join(map(str, results)) # Example for proper formatting minimal_travel_time(2, [ {\'N\': 4, \'costs\': [[0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0]], \'S\': 1}, {\'N\': 3, \'costs\': [[0, 5, 6], [5, 0, 7], [6, 7, 0]], \'S\': 2} ])"},{"question":"Write a function to determine if it\'s possible to split an array of integers into three contiguous subarrays such that the sum of the elements in each subarray is equal. You are provided with an array of integers. Your task is to check if there is a way to split this array into three non-empty contiguous subarrays where the sum of the elements in each of the three subarrays is the same. Function Signature: ```python def canThreePartsEqualSum(arr: List[int]) -> bool: ``` [Input] - A non-empty list of integers, `arr`, where 1 ≤ length of arr ≤ 3 * 10^4 and each integer is between -10^4 and 10^4. [Output] - Return `True` if the array can be split into three contiguous subarrays with equal sum, otherwise return `False`. Example 1: ```python arr = [0,2,1,-6,6,-7,9,1,2,0,1] canThreePartsEqualSum(arr) -> True ``` Explanation: Output is true, because [0, 2, 1], [-6, 6], and [-7, 9, 1, 2, 0, 1] all have the equal sum of 3. Example 2: ```python arr = [0,2,1,-6,6,7,9,-1,2,0,1] canThreePartsEqualSum(arr) -> False ``` Explanation: Output is false, there is no way to split the array into three contiguous parts with equal sum. Example 3: ```python arr = [3,3,6,5,-2,2,5,1,-9,4] canThreePartsEqualSum(arr) -> True ``` Explanation: Output is true, because [3, 3], [6, 5, -2, 2] and [5, 1, -9, 4] all have the equal sum of 6.","solution":"from typing import List def canThreePartsEqualSum(arr: List[int]) -> bool: total_sum = sum(arr) if total_sum % 3 != 0: return False target_sum = total_sum // 3 current_sum, parts_found = 0, 0 for num in arr: current_sum += num if current_sum == target_sum: parts_found += 1 current_sum = 0 if parts_found == 2: return True return False"},{"question":"In a distant land, there is a peculiar number system known as the \'K-system\'. Numbers in the K-system are represented by non-negative integers K0, K1, K2, etc., where each Ki takes a particular weight corresponding to base K at the i-th place. Your task is to decode a number from this K-system into its decimal (base 10) equivalent. To clarify, a K-system number represented as `K2 K1 K0` denotes: `K2 * K^2 + K1 * K^1 + K0 * K^0` Write a program that converts a K-system number to its decimal (base 10) form. Input: - The first line consists of an integer T denoting the number of test cases. - Each test case consists of two lines, the first line contains an integer K (2 ≤ K ≤ 10), and the second line contains a space-separated list of digits representing the K-system number. Output: For each test case, print the decimal equivalent of the K-system number. Constraints: 1 ≤ T ≤ 10 1 ≤ Length of the K-system number ≤ 100 0 ≤ Ki < K for all i-th digit in the K-system number SAMPLE INPUT: 2 3 1 2 1 5 4 0 3 SAMPLE OUTPUT: 16 103","solution":"def k_system_to_decimal(k, k_system_number): Converts a number from a K-system to its decimal (base 10) equivalent. Parameters: k (int): The base of the K-system (2 ≤ k ≤ 10). k_system_number (list): A list of integers representing the digits in the K-system. Returns: int: The decimal equivalent of the K-system number. decimal_value = 0 k_system_number = k_system_number[::-1] for i, digit in enumerate(k_system_number): decimal_value += digit * (k ** i) return decimal_value def process_test_cases(test_cases): Processes multiple test cases of converting K-system numbers to decimal. Parameters: test_cases (list): A list of tuples where each tuple contains (k, k_system_number) Returns: list: A list of integers representing the decimal equivalents for each test case. results = [] for k, k_system_number in test_cases: results.append(k_system_to_decimal(k, k_system_number)) return results # Example usage: # test_cases = [ # (3, [1, 2, 1]), # (5, [4, 0, 3]) # ] # print(process_test_cases(test_cases)) # Output: [16, 103]"},{"question":"Little Shyam loves playing with strings. He especially enjoys finding palindromes. A palindrome is a string that reads the same backward as forward, like \\"madam\\" or \\"racecar\\". Shyam\'s favorite exercise is to find the longest palindromic substring in a given string. A substring is any continuous segment of the string. Your task is to help Shyam find the longest palindromic substring in the given string and return its length. Input: The first line contains the string S consisting of lowercase letters only. Output: Print the length of the longest palindromic substring in S. Constraints: 1 ≤ |S| ≤ 1000 SAMPLE INPUT babad SAMPLE OUTPUT 3 Explanation: The longest palindromic substrings in the input string \\"babad\\" are \\"bab\\" and \\"aba\\", both of length 3. Thus, the output is 3.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string s. def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1 if len(s) == 0: return 0 max_length = 1 for i in range(len(s)): len1 = expand_around_center(i, i) # Odd length palindromes len2 = expand_around_center(i, i + 1) # Even length palindromes max_length = max(max_length, len1, len2) return max_length"},{"question":"A company has an array A consisting of N non-negative integers. Each integer in the array represents the requirement of bandwidth for an internet-connected device. The company needs to allocate bandwidth to these devices in the most efficient way possible, such that the total amount of allocated bandwidth does not exceed a given limit C. The company defines efficiency as the maximum possible total bandwidth that can be allocated without exceeding the limit C. To achieve this, they can perform multiple operations. In one operation, the company can: - Select a device at index i (1 ≤ i ≤ N). - Increase the bandwidth requirement of the device A[i] by 1 unit. Given Q queries, where each query provides a new bandwidth limit C, determine the maximum possible total bandwidth that can be allocated to the devices for each query, without exceeding the given limit C. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and Q, respectively. - The second line of each test case contains N space-separated non-negative integers, which represents the array A. - The next Q lines each contain one integer C, representing the bandwidth limit for the i-th query. ------ Output Format ------ For each test case, output Q lines, where the i-th line contains the maximum possible total bandwidth that can be allocated without exceeding the limit C. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, Q ≤ 10^5 0 ≤ A[i] ≤ 10^9 0 ≤ C ≤ 10^{18} - The sum of N over all test cases does not exceed 10^6. - The sum of Q over all test cases does not exceed 10^6. ------ Sample Input 1 ------ 1 5 3 1 2 3 4 5 10 15 20 ------ Sample Output 1 ------ 10 15 15 ------ Explanation 1 ------ Test Case 1: - For the first query, the array A = [1, 2, 3, 4, 5], the maximum sum that does not exceed 10 is the sum of all elements (1+2+3+4 = 10). - For the second query, the maximum sum that does not exceed 15 includes all elements of the array (1+2+3+4+5 = 15). - For the third query, the total sum of array A is 15, which is less than or equal to the limit 20. Thus, the maximum possible total bandwidth is 15.","solution":"def find_maximum_bandwidth(T, test_cases): results = [] for case in test_cases: N, Q, A, queries = case A.sort() prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + A[i - 1] for C in queries: if prefix_sum[N] <= C: results.append(prefix_sum[N]) else: low, high = 0, N while low < high: mid = (low + high) // 2 if prefix_sum[mid] <= C: low = mid + 1 else: high = mid results.append(prefix_sum[low - 1]) return results"},{"question":"Given a string `s` consisting only of letters \'a\' and \'b\', we need to find the minimum number of steps required to make the string a palindrome. In one step, you can replace any \'a\' with \'b\' or any \'b\' with \'a\'. A palindrome is a string that reads the same forward and backward. Input - The first line contains a single integer `t` (1 ≤ t ≤ 1000), the number of test cases. - Each of the next `t` lines contains a string `s` consisting only of characters \'a\' and \'b\'. The length of each string `s` is between 1 and 100. Output - For each test case, output a single integer - the minimum number of steps required to make the string `s` a palindrome. Examples Input 3 abba aab bba Output 0 1 1 Explanation In the first test case, the original string \\"abba\\" is already a palindrome, so no step is required. In the second test case, you can replace the first \'a\' or the last \'a\' to \'b\' to make it \\"aba\\", which is a palindrome with one step. In the third test case, you can replace the first \'b\' or the last \'b\' to \'a\' to make it \\"aba\\", which is also a palindrome with one step.","solution":"def min_steps_to_palindrome(s): Returns the minimum number of steps required to make the string a palindrome. n = len(s) steps = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: steps += 1 return steps def process_test_cases(t, cases): results = [] for case in cases: results.append(min_steps_to_palindrome(case)) return results"},{"question":"You are given a collection of n distinct positive integers representing the strengths of various warriors. Each warrior can defeat another warrior if and only if their strength is strictly greater than the other. You need to form the maximum possible number of warrior pairs such that each warrior does not participate in more than one pair. A pair (a, b) is considered valid if the strength of warrior a is greater than the strength of warrior b. Your task is to determine the maximum number of such valid pairs that can be formed. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of warriors. The second line contains n space-separated integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9) — the strengths of the warriors. -----Output----- Print a single integer — the maximum number of valid pairs that can be formed. -----Examples----- Input 5 1 2 3 4 5 Output 2 Input 3 3 1 2 Output 1 Input 4 4 4 4 4 Output 0","solution":"def max_pairs(warriors): Returns the maximum number of valid warrior pairs. A pair (a, b) is valid if strength of a > strength of b. warriors.sort() # Sort the warrior strengths left = 0 right = len(warriors) // 2 pairs = 0 while left < len(warriors) // 2 and right < len(warriors): if warriors[left] < warriors[right]: pairs += 1 left += 1 right += 1 return pairs"},{"question":"Merge Two Sorted Lists Write a function to merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists. You are given two linked lists in sorted order. Your function should create and return a new linked list containing the elements from both lists in sorted order. # Example Input: list1 = 1 -> 2 -> 4 list2 = 1 -> 3 -> 4 Output: 1 -> 1 -> 2 -> 3 -> 4 -> 4 # Constraints: - The number of nodes in both lists is in the range [0, 50]. - Either `list1` or `list2` can be empty. - Both `list1` and `list2` are sorted in non-decreasing order.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(list1, list2): Merge two sorted linked lists and return it as a new sorted list. dummy = ListNode(0) current = dummy while list1 and list2: if list1.val <= list2.val: current.next = list1 list1 = list1.next else: current.next = list2 list2 = list2.next current = current.next if list1: current.next = list1 elif list2: current.next = list2 return dummy.next"},{"question":"Given a string S and an integer K, determine the longest substring of S that contains at most K distinct characters. If multiple substrings have the same maximum length, return the one that appears first. ------ Input Format ------ - The first line of input will contain a string S. - The second line will contain an integer K. ------ Output Format ------ Output a single line containing the longest substring of S that contains at most K distinct characters. If multiple substrings have the same maximum length, return the one that appears first. ------ Constraints ------ 1 ≤ |S| ≤ 10^{5} 1 ≤ K ≤ 26 ------ Sample Input 1 ------ eceba 2 ------ Sample Output 1 ------ ece ------ Sample Input 2 ------ aa 1 ------ Sample Output 2 ------ aa ------ Explanation ------ In the first example, the input is \\"eceba\\" and K is 2. The longest substring with at most 2 distinct characters is \\"ece\\". In the second example, the input is \\"aa\\" and K is 1. The longest substring containing at most 1 distinct character is \\"aa\\", which is the entire string.","solution":"def longest_substring_with_k_distinct(S, K): from collections import defaultdict n = len(S) if n == 0 or K == 0: return \\"\\" left, right = 0, 0 max_len = 0 max_start = 0 char_count = defaultdict(int) while right < n: char_count[S[right]] += 1 while len(char_count) > K: char_count[S[left]] -= 1 if char_count[S[left]] == 0: del char_count[S[left]] left += 1 if right - left + 1 > max_len: max_len = right - left + 1 max_start = left right += 1 return S[max_start:max_start + max_len]"},{"question":"**Question: Implementing Frequency Counter** Emily is a linguist with a keen interest in analyzing text. She is currently investigating the frequency of letters in various documents. She has devised a method to calculate the frequency of each alphabetical character (case-insensitive) and now wants to analyze it through a program. She needs your help to create a function that counts the frequency of each letter in a given string. -----Input Format----- A single line containing a string s. -----Output Format----- Output each letter and its frequency in alphabetical order. -----Constraints----- - The input string contains only alphabetic characters and spaces. - The output should be case-insensitive. - Ignore spaces while computing the frequency of letters. -----Example----- Input: Hello World Output: a: 0 b: 0 c: 0 d: 1 e: 1 f: 0 g: 0 h: 1 i: 0 j: 0 k: 0 l: 3 m: 0 n: 0 o: 2 p: 0 q: 0 r: 1 s: 0 t: 0 u: 0 v: 0 w: 1 x: 0 y: 0 z: 0","solution":"def letter_frequency(s): Returns the frequency of each alphabet letter in a given string s. # Create a dictionary to store frequency of each letter frequency = {chr(i): 0 for i in range(97, 123)} # Process the string to count frequencies while ignoring case and spaces for char in s.lower(): if char.isalpha(): frequency[char] += 1 return {k: frequency[k] for k in sorted(frequency)} def format_frequency_output(frequency_dict): Format the frequency dictionary into the desired output format. lines = [f\\"{letter}: {frequency_dict[letter]}\\" for letter in frequency_dict] return \\"n\\".join(lines)"},{"question":"Write a function that takes a string containing a sentence and returns the sentence with all its words reversed but keeping the original word order. Example 1: ``` Input: \\"Welcome to the coding assessment\\" Output: \\"emocleW ot eht gnidoc tnemssessa\\" ``` Example 2: ``` Input: \\"Hello World\\" Output: \\"olleH dlroW\\" ``` Example 3: ``` Input: \\"Reverse the words\\" Output: \\"esreveR eht sdrow\\" ``` > Notes: >* Input (`sentence`) will always be a string object. Your function should return a string. >* The original word order must be preserved, but each individual word should appear reversed. >* The input sentence will only contain alphabetic characters and spaces.","solution":"def reverse_words(sentence): Returns the sentence with all its words reversed but keeping the original word order. words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"You are given a string consisting of lowercase English letters. You can perform any number of operations on this string. Each operation consists of choosing a subsequence of the string and reversing it. Recall that a subsequence of a string is a string that can be derived from the original string by deleting some or no characters without changing the order of the remaining characters. For example, \\"abc\\", \\"ab\\", and \\"c\\" are subsequences of \\"abc\\", but \\"acb\\" is not. Your task is to determine the lexicographically minimum string that can be obtained by performing any number of these operations. For example, given the string \\"bdac\\", one possible way to obtain the minimum string is: 1. Reverse the subsequence \\"dc\\" to get \\"bacd\\". 2. Reverse the subsequence \\"bd\\" to get \\"abcd\\". Another example is \\"abba\\", where the minimum lexicographical string you can obtain is \\"aabb\\" by reversing the whole string. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a string s consisting of lowercase English letters. -----Output----- For each test case, print the answer — the lexicographically minimum string that can be obtained by performing any number of the given operations. -----Example----- Input 3 bdac abba xaybz Output abcd aabb abxyz -----Note----- The lexicographical order of strings is the order in which words are listed in a dictionary. Formally, string a comes before string b in lexicographical order if when comparing their characters from left to right, the first character where they differ has a lower value in a than in b.","solution":"def lexicographically_minimum_string(strings): Returns a list of lexicographically minimum strings for each string in the input list. This is achievable by simply sorting the characters of each string. result = [] for s in strings: result.append(\'\'.join(sorted(s))) return result def process_input_output(t, string_list): Processes the input for the number of test cases and list of strings, returning the lexicographically minimum strings for each test case. return lexicographically_minimum_string(string_list)"},{"question":"You are organizing a game tournament and need to figure out the best way to schedule games. In this tournament, every player plays exactly one game against every other player. You have a list containing pairs of players that should not be scheduled to play more than once within a specific timeframe due to certain conditions like their rivalry, previous heats, etc., and you must ensure that the schedule respects these restrictions. Write a program to determine whether it\'s possible to create a valid schedule given these limitations, where a valid schedule means that every player plays exactly once against every other player while not violating any given constraints. -----Input----- The first line contains a single integer N (2 leq N leq 1000) — the number of players. The second line contains a single integer M (0 leq M leq 1000) — the number of restricted pairs. The next M lines each contain two integers u and v (1 leq u, v leq N, u neq v) — indicating that the pair (u, v) should not be scheduled more than once within the considered timeframe. -----Output----- Print \\"YES\\" if it is possible to create a valid schedule, otherwise print \\"NO\\". -----Example----- Input 4 2 1 2 3 4 Output YES Input 4 3 1 2 2 3 3 1 Output NO","solution":"def can_schedule_games(N, M, restricted_pairs): Determines whether it is possible to create a valid schedule given the limitations. Parameters: N (int): The number of players. M (int): The number of restricted pairs. restricted_pairs (list of tuples): List of pairs which indicate restricted matches. Returns: str: \\"YES\\" if a valid schedule can be created, otherwise \\"NO\\". from collections import defaultdict, deque # Create a graph adjacency list graph = defaultdict(list) for u, v in restricted_pairs: graph[u].append(v) graph[v].append(u) # Use coloring to determine if the graph is bipartite. color = {} def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() current_color = color[node] for neighbor in graph[node]: if neighbor not in color: color[neighbor] = 1 - current_color queue.append(neighbor) elif color[neighbor] == current_color: return False return True # Check for each component in the graph for player in range(1, N + 1): if player not in color: if not bfs(player): return \\"NO\\" return \\"YES\\""},{"question":"Given an array of integers, write a function `find_max_product` that returns the maximum product of any two integers in the array. Your function should handle both positive and negative numbers and include necessary edge cases. The function should take an array of integers `arr` as input and return an integer representing the maximum product of any two integers in the array. For example: - `find_max_product([1, 2, 3, 4])` should return `12` (product of 3 and 4). - `find_max_product([-10, -10, 5, 2])` should return `100` (product of -10 and -10). - `find_max_product([0, 1, 2, 3])` should return `6` (product of 2 and 3). The function should handle arrays with at least two elements, and the elements can be both positive and negative integers. Example function signature: ```python def find_max_product(arr: List[int]) -> int: # your code here ``` Consider edge cases such as: - Arrays with only two elements. - Arrays with both positive and negative numbers. - Arrays where the maximum product comes from negative numbers.","solution":"from typing import List def find_max_product(arr: List[int]) -> int: Returns the maximum product of any two integers in the array. if len(arr) < 2: raise ValueError(\\"Array must have at least two elements\\") # Sort the array arr.sort() # The maximum product can either be from the two largest numbers # or from the two smallest numbers (in case they are both negative). return max(arr[0] * arr[1], arr[-1] * arr[-2])"},{"question":"You are given a grid of size N x M. Each cell in the grid can be either passable or blocked. You are also given a list of robot start positions and their respective end positions. Each robot can only move vertically or horizontally, one cell at a time, and cannot move into blocked cells. Determine the minimum steps required for each robot to reach its end position from its start position. If it is impossible for any robot to reach its end position, return -1 for that robot. Input: The first line contains three integers N, M, and R. N and M specify the size of the grid, and R specifies the number of robots. The next N lines contain M characters each, representing the grid. A \'.\' character denotes a passable cell, and a \'#\' character denotes a blocked cell. The next R lines contain four integers each: sx, sy, ex, ey. (sx, sy) denotes the starting position and (ex, ey) denotes the ending position of each robot. Output: Output R lines, one for each robot, containing the minimum number of steps required for the robot to reach its end position, or -1 if it is impossible. Constraints: 1 ≤ N, M ≤ 1000 1 ≤ R ≤ 100 0 ≤ sx, sy, ex, ey < N (0-indexed grid position) SAMPLE INPUT 5 5 2 ..... .#. .#.#. .#. ..... 0 0 4 4 2 2 0 0 SAMPLE OUTPUT 8 -1 Explanation For the first robot starting at (0, 0) and ending at (4, 4), one of the possible paths is: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (3,4) -> (4,4). For the second robot starting at (2, 2) and ending at (0, 0), it\'s impossible to reach the end position without traversing blocked cells. Therefore, the output is -1.","solution":"from collections import deque def bfs(grid, start, end, N, M): sx, sy = start ex, ey = end if grid[sx][sy] == \'#\' or grid[ex][ey] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * M for _ in range(N)] queue = deque([(sx, sy, 0)]) # (row, col, steps) visited[sx][sy] = True while queue: x, y, steps = queue.popleft() if (x, y) == (ex, ey): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1 def min_steps_each_robot(N, M, grid, robots): results = [] for (sx, sy, ex, ey) in robots: steps = bfs(grid, (sx, sy), (ex, ey), N, M) results.append(steps) return results"},{"question":"You are working as a software developer for an event management company. The company maintains an event schedule and relies heavily on accurate booking and management of events. Your task is to create a function that will help manage overlapping events and find the longest sequence of non-overlapping events. Each event is represented by its start and end time, where both times are in 24-hour format (HH:MM). Write a function `longest_sequence_of_events(events)` that takes a list of events, where each event is a tuple of start and end times in the format (start, end) and returns the longest list of non-overlapping events. For example: ``` events = [ (\\"09:00\\", \\"11:00\\"), (\\"11:00\\", \\"13:00\\"), (\\"10:00\\", \\"11:30\\"), (\\"13:00\\", \\"15:00\\"), (\\"12:00\\", \\"13:30\\"), ] ``` The function should return a list of tuples representing the non-overlapping events. One possible correct output for the given input could be: ``` [ (\\"09:00\\", \\"11:00\\"), (\\"11:00\\", \\"13:00\\"), (\\"13:00\\", \\"15:00\\"), ] ``` Alternatively: ``` [ (\\"09:00\\", \\"11:00\\"), (\\"11:00\\", \\"13:00\\"), (\\"10:00\\", \\"11:30\\"), (\\"13:00\\", \\"15:00\\") ] ``` # Constraints: 1. Events will be provided in chronological order, i.e., sorted by their start times. 2. If two events end at the same time, they are considered to be non-overlapping only if the next event starts at or after the current event ends. 3. Provide an efficient algorithm with a focus on time complexity. # Notes: - The start time and end time of each event will be in the format \\"HH:MM\\". - The output list of events should also maintain the chronological order as given in the input. - You may assume that there are no duplicate events in the input list. Your task is to write the function `longest_sequence_of_events(events)` that adheres to these specifications.","solution":"def longest_sequence_of_events(events): def convert_to_minutes(time_str): hours, minutes = map(int, time_str.split(\\":\\")) return hours * 60 + minutes def convert_to_time_str(minutes): hours = minutes // 60 minutes %= 60 return f\\"{hours:02}:{minutes:02}\\" events = [(convert_to_minutes(start), convert_to_minutes(end)) for start, end in events] events.sort(key=lambda x: x[1]) non_overlapping_events = [] last_end_time = -1 for start, end in events: if start >= last_end_time: non_overlapping_events.append((convert_to_time_str(start), convert_to_time_str(end))) last_end_time = end return non_overlapping_events"},{"question":"Given an integer `n`, you are required to print all unique sequences of length `n` consisting of digits from 0 to 9 where the sequence is strictly increasing. A sequence is considered strictly increasing if each subsequent digit is greater than the previous one. Constraints * `1 <= n <= 9` Input The input is given in the following format: ``` n ``` Output Print all strictly increasing sequences of length `n`, each sequence in a new line. Digits within a sequence should be separated by a space. Example **Input** ``` 3 ``` **Output** ``` 0 1 2 0 1 3 0 1 4 ... 6 7 8 6 7 9 6 8 9 7 8 9 ``` Note: The output should include all possible strictly increasing sequences of the specified length `n`, starting from 0 up to 9. The order of the sequences should be in lexicographical order based on the indices used.","solution":"from itertools import combinations def strictly_increasing_sequences(n): Prints all unique strictly increasing sequences of length n consisting of digits from 0 to 9. all_sequences = list(combinations(range(10), n)) for sequence in all_sequences: print(\\" \\".join(map(str, sequence))) # Example usage: # strictly_increasing_sequences(3)"},{"question":"Given an n-ary tree, where each node can have at most `n` children, and each node has a unique value associated with it. Design an algorithm to determine the longest path from the root to a leaf where the path increases in strictly increasing order of values. Functional Requirements: - The function should take the root of the n-ary tree as input. - Return the length of the longest strictly increasing path from the root to a leaf. Example: Input: 10 / 5 20 /| | 3 7 15 25 Output: 3 Explanation: The longest strictly increasing path is from 10 -> 20 -> 25, which has length 3. Tree Node Structure Definition: ```python class TreeNode: def __init__(self, x): self.val = x self.children = [] ``` Your Task: Complete the function `def longest_increasing_path(root: TreeNode) -> int:` which takes the root of the n-ary tree as input and returns the length of the longest strictly increasing path. Expected Time Complexity: O(N), where N is the number of nodes in the tree. Expected Auxiliary Space: O(H), where H is the height of the tree. Constraints: - The number of nodes in the n-ary tree will not exceed 10^5. - The value of each node will be between -10^9 and 10^9.","solution":"class TreeNode: def __init__(self, x): self.val = x self.children = [] def longest_increasing_path(root: TreeNode) -> int: def dfs(node, parent_val): if not node: return 0 max_length = 0 for child in node.children: if child.val > node.val: max_length = max(max_length, dfs(child, node.val)) return 1 + max_length if not root: return 0 return dfs(root, float(\'-inf\'))"},{"question":"Alice is developing a new online multiplayer game which involves navigating a labyrinth. A labyrinth is represented as an N x M grid where each cell is either passable (\'.\') or impassable (\'#\'). Alice needs you to implement a part of the game\'s code that helps determine the number of distinct connected regions of passable cells in the labyrinth. Two cells are considered connected if they are adjacent horizontally or vertically (not diagonally). Your task is to write a program that takes the description of the labyrinth and outputs the number of distinct connected regions of passable cells. Input Format The first line of input consists of two integers, N and M, separated by a single space. The next N lines each contain a string of length M which consists of characters \'.\' and \'#\'. Constraints 1 ≤ N, M ≤ 1000 Output Format Print a single integer that represents the number of distinct connected regions of passable cells. Example Input 4 5 .#.#. #.. ..#.. ..# Example Output 4 Explanation The 4x5 grid described above has 4 distinct connected regions of passable cells: - A single cell in the first row, at position (1,2). - A single cell in the first row, at position (1,4). - A region of 4 cells, from (3,1) to (4,2). - A single cell in the second row, at position (4,4).","solution":"def count_connected_regions(n, m, labyrinth): Determines the number of distinct connected regions of passable cells in the labyrinth. :param n: Number of rows in the labyrinth :param m: Number of columns in the labyrinth :param labyrinth: List of strings representing the labyrinth :return: Number of distinct connected regions of passable cells def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or labyrinth[x][y] == \'#\' or visited[x][y]: return visited[x][y] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: dfs(x + dx, y + dy) visited = [[False] * m for _ in range(n)] region_count = 0 for i in range(n): for j in range(m): if labyrinth[i][j] == \'.\' and not visited[i][j]: dfs(i, j) region_count += 1 return region_count"},{"question":"Sophia is building a library management system and she is working on the feature of tracking borrowed books. She needs to implement a functionality to find out whether a particular book is currently borrowed or not. For this, she needs to check if the book\'s title exists in the list of borrowed book titles. Help Sophia write a program to solve this problem. Input: The first line contains an integer n indicating the number of borrowed books. The next n lines each contain a string representing the titles of the borrowed books. The last line contains a string representing the title of the book Sophia wants to check. Output: The output should be \'Borrowed\' if the book\'s title is in the list, otherwise output \'Available\'. Assumptions: Each book title is unique in the list of borrowed books. Constraints: 1 ≤ n ≤ 100 1 ≤ length of each book title ≤ 50 Example: Input: 3 \\"The Alchemist\\" \\"1984\\" \\"To Kill a Mockingbird\\" \\"The Great Gatsby\\" Output: Available SAMPLE INPUT 4 \\"Moby Dick\\" \\"Pride and Prejudice\\" \\"The Great Gatsby\\" \\"War and Peace\\" \\"War and Peace\\" SAMPLE OUTPUT Borrowed","solution":"def is_book_borrowed(n, borrowed_books, check_book): This function checks if a book is currently borrowed or not. Parameters: - n : int : Number of borrowed books - borrowed_books : list : List of borrowed book titles - check_book : str : The title of the book to check Returns: - str : \'Borrowed\' if the book is borrowed, otherwise \'Available\' if check_book in borrowed_books: return \'Borrowed\' else: return \'Available\' # Example usage: # n = 3 # borrowed_books = [\\"The Alchemist\\", \\"1984\\", \\"To Kill a Mockingbird\\"] # check_book = \\"The Great Gatsby\\" # print(is_book_borrowed(n, borrowed_books, check_book)) # Output: Available"},{"question":"You are a game developer working on a new text-based adventure game. Your game universe is made up of a series of interconnected rooms. Each room is described by a unique integer ID and has a certain number of items. Players can move between rooms following the paths that connect them and collect items along their journey. In this game, you need to handle two types of actions: 1. Collect items in the current room. 2. Move to another room. Each room also has a certain \\"danger level\\" associated with it. The maximum danger level a player can encounter on their journey from the start room to the current room needs to be tracked and updated as players move between rooms. To implement this functionality, you will write a program that can handle a sequence of commands that dictate the player\'s movements and item collection actions. The commands are as follows: - `MOVE room_id` - Move the player to the room with the specified ID. The player can only move to a room that is directly connected to the current room. - `COLLECT` - Collect all items in the current room. After this command, the item count of the room becomes zero. - `DANGER` - Output the highest danger level encountered on the path from the start room to the current room. Input Format: - The first line contains two integers, `N` (the number of rooms) and `M` (the number of paths). - The second line contains `N` integers where the ith integer represents the danger level of the ith room. - The third line contains `N` integers where the ith integer represents the number of items in the ith room. - The next `M` lines each contain two integers, `u` and `v`, indicating there is a path between room `u` and room `v`. - The next line contains an integer `Q` (the number of commands). - The next `Q` lines each contain a command (`MOVE room_id`, `COLLECT`, or `DANGER`). Output Format: For each `DANGER` command, output the highest danger level encountered on the path from the start room to the current room. Constraints: - 1 ≤ N ≤ 100000 - 1 ≤ M ≤ 100000 - 1 ≤ Q ≤ 100000 - 1 ≤ room_id ≤ N - 1 ≤ danger level of each room ≤ 100000 - 1 ≤ items in each room ≤ 1000 Assume room 1 as the start room initially. SAMPLE INPUT: 5 4 5 3 7 2 8 10 5 4 3 6 1 2 1 3 2 4 3 5 5 MOVE 2 DANGER MOVE 4 COLLECT DANGER SAMPLE OUTPUT: 5 7 Explanation: - The initial danger levels for rooms are [5, 3, 7, 2, 8], and the items are [10, 5, 4, 3, 6]. - After the `MOVE 2` command, the current room is 2. The highest danger level encountered on the path from room 1 to room 2 is 5 (since room 1 has a danger level of 5). - After the `DANGER` command, the answer is 5. - After the `MOVE 4` command, the current room is 4. The highest danger level encountered on the path from room 1 → 2 → 4 is still 5 (room 1). - After the `COLLECT` command, the items in room 4 become 0. - After the final `DANGER` command, the highest danger level on the path from room 1 → 2 → 4 is still 5. The answer is 5.","solution":"class Game: def __init__(self, num_rooms, danger_levels, items, paths): self.num_rooms = num_rooms self.danger_levels = danger_levels self.items = items self.paths = {i: [] for i in range(1, num_rooms + 1)} for u, v in paths: self.paths[u].append(v) self.paths[v].append(u) self.current_room = 1 self.max_danger = danger_levels[0] self.visited = set([1]) def move(self, room_id): if room_id in self.paths[self.current_room]: self.current_room = room_id self.visited.add(room_id) self.max_danger = max(self.max_danger, self.danger_levels[room_id - 1]) def collect(self): self.items[self.current_room - 1] = 0 def get_max_danger(self): return self.max_danger def text_adventure_game(num_rooms, num_paths, danger_levels, items, paths, num_commands, commands): game = Game(num_rooms, danger_levels, items, paths) output = [] for command in commands: parts = command.split() action = parts[0] if action == \\"MOVE\\": game.move(int(parts[1])) elif action == \\"COLLECT\\": game.collect() elif action == \\"DANGER\\": output.append(str(game.get_max_danger())) return output"},{"question":"You are given a string S and an integer K. Your task is to perform the following operation exactly K times: - Choose an arbitrary non-empty substring of S and reverse it. Determine whether it is possible to make the string a palindrome after exactly K operations. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - Each test case consists of two lines. The first line contains the string S, and the second line contains the integer K. ------ Output Format ------ For each test case, output \\"Yes\\" if it\'s possible to make the string a palindrome after exactly K operations. Otherwise, output \\"No\\". ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ text{length of } S ≤ 1000 1 ≤ K ≤ 1000 ------ Sample Input 1 ------ 2 abcba 2 abccba 1 ------ Sample Output 1 ------ Yes No ------ Explanation 1 ------ Test case 1: The string \\"abcba\\" is already a palindrome, and since K is even, it is possible to perform K operations and still retain the palindrome property. So the output is \\"Yes\\". Test case 2: The string \\"abccba\\" is already a palindrome. However, since K is odd, it is not possible to end up with a palindrome after exactly one operation. So the output is \\"No\\".","solution":"def can_be_palindrome(S, K): Determines if a string S can be transformed into a palindrome using exactly K reversals. n = len(S) # Function to check if a string is a palindrome def is_palindrome(s): return s == s[::-1] # If already a palindrome if is_palindrome(S): # If K is even, we can perform operations and still be palindrome. If K is odd, we cannot. return K % 2 == 0 # If not already a palindrome # If K == 0, no changes can be made and we need to check if it\'s already a palindrome. if K == 0: return is_palindrome(S) # General case # We need to check if it\'s possible to make S a palindrome with exactly K operations # If K >= n (length of the string), we should always be able to make it a palindrome by fully reversing substrings. return K >= n def process_test_cases(test_cases): results = [] for S, K in test_cases: if can_be_palindrome(S, K): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given a list of integers and a number k. Your task is to find the maximum sum of k consecutive elements in the list. If there are fewer than k elements in the list, return 0. -----Input----- The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. The next t lines describe test cases. Each test case starts with an integer k (1 le k le 10^5), followed by a space-separated list of integers of length n (0 le n le 10^5). -----Output----- For each test case, print the maximum sum of k consecutive elements. If there are fewer than k elements, print 0. -----Example----- Input 3 3 1 2 3 4 5 2 1 3 4 4 1 2 3 Output 12 7 0 -----Note----- In the first test case, the maximum sum of 3 consecutive elements is 12 (from the subarray [3, 4, 5]). In the second test case, the maximum sum of 2 consecutive elements is 7 (from the subarray [3,4]). In the third test case, there are fewer than 4 elements, so the result is 0.","solution":"def max_sum_of_consecutive_elements(test_cases): Returns the maximum sum of k consecutive elements for each test case. Parameters: test_cases (list of tuples): A list of tuples where each tuple contains an integer k and a list of integers. Returns: list of int: The maximum sums for each test case. result = [] for k, arr in test_cases: if len(arr) < k: result.append(0) else: max_sum = sum(arr[:k]) current_sum = max_sum for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum result.append(max_sum) return result"},{"question":"Micro has recently taken up farming. Unfortunately, he doesn\'t know much about planting crops. One day, his friend, Chacha, gave him an array `B` of integers representing different types of crops he can plant in a field. Each integer in array `B` represents the growth rate of a particular type of crop. Micro wants to maximize the productivity of his field. He will ask you `R` ranges. For each range, you\'ll be given two integer indices `L` and `R` (1-based index). You need to determine the maximum growth rate of the crop types within that range `[L, R]` in the array `B`. Input: The first line of the input consists of two space-separated integers (M) and (R). The second line consists of (M) space-separated integers denoting the array (B). The following (R) lines consist of two space-separated integers (L) and (R). Output: For each range query, print the maximum growth rate of the crop types within the specified range `[L, R]` in a new line. Constraints: 1 ≤ (M), (R) ≤ (10^5) 1 ≤ (L), (R) ≤ (M) 1 ≤ (B[i]) ≤ (10^9) SAMPLE INPUT 6 3 3 1 4 1 5 9 2 4 1 6 5 6 SAMPLE OUTPUT 4 9 9 Explanation: For the first query, the range [2, 4] contains the elements [1, 4, 1], and the maximum growth rate is 4. For the second query, the range [1, 6] contains the elements [3, 1, 4, 1, 5, 9], and the maximum growth rate is 9. For the third query, the range [5, 6] contains the elements [5, 9], and the maximum growth rate is 9.","solution":"def max_growth_rate(M, R, B, queries): Given the array B of M crop growth rates and range queries, returns the maximum growth rate within each range. Parameters: M (int): Number of elements in array B. R (int): Number of queries. B (list of int): List of crop growth rates. queries (list of tuple): Each tuple contains two integers L and R (1-based indices). Returns: list: Maximum growth rate for each query range. results = [] for L, R in queries: results.append(max(B[L-1:R])) return results"},{"question":"Alice is a software engineer working on a big project. She needs to ensure that the code adheres to certain guidelines, one of which is the indentation level. Specifically, the code should maintain a proper balance of opening and closing braces for blocks of code. Given a string `S` representing a piece of code with only braces `{` and `}`, help Alice determine if the braces are properly balanced. Example 1: Input: S = \\"{{{}}}\\" Output: 1 Explanation: The input string has balanced braces. Example 2: Input: S = \\"{{{}}\\" Output: 0 Explanation: The input string does not have properly balanced braces, since there\'s an extra opening brace. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isBalancedBraces()` which takes the string `S` as an input parameter and returns 1 if the braces are properly balanced, 0 otherwise. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - 1 ≤ |S| ≤ 10^5 - S consists only of `{` and `}`","solution":"def isBalancedBraces(S): Returns 1 if the braces in string S are properly balanced, 0 otherwise. balance = 0 for char in S: if char == \'{\': balance += 1 elif char == \'}\': balance -= 1 if balance < 0: return 0 return 1 if balance == 0 else 0"},{"question":"A group of scientists has discovered a new type of organism that exhibits interesting behavior in terms of movement. The organisms live on a 2D grid and can move from one grid cell to another based on specific movement rules. The grid is of size N x M, with each cell having a respective value representing the \\"energy\\" required to move into that cell. The organism starts at the top-left corner of the grid (0,0) and can only move either right or down at any point in time. They want to find the minimum energy required for the organism to reach the bottom-right corner of the grid (N-1, M-1). Write a program to help the scientists calculate the minimum energy requirement for the organism to reach its destination. Input: - The first line contains two integers, N and M (1 <= N, M <= 100), representing the dimensions of the grid. - The next N lines each contain M integers, representing the energy costs of each cell in the grid. Each integer value is between 1 and 1000 inclusive. Output: - Output a single integer, the minimum energy required to move from the top-left to the bottom-right corner of the grid. Example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: The organism can follow the path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) which has an energy cost of 1 + 3 + 1 + 1 + 1 = 7. This is the minimum energy path.","solution":"def min_energy_path(grid): Returns the minimum energy required to move from the top-left to the bottom-right corner of the grid. N = len(grid) M = len(grid[0]) # Create a 2D dp array to store the minimum energy required to reach each cell dp = [[0]*M for _ in range(N)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] def min_energy_required(N, M, grid): return min_energy_path(grid)"},{"question":"You have a deck of cards, numbered from 1 to N. You want to find out in how many ways you can select X cards such that their sum is equal to S. Return the number of possible combinations, where the order of selection does not matter. As the answer can be very large, return it modulo 10^9 + 7. Example 1: Input: N = 5, X = 2, S = 5 Output: 2 Explanation: The combinations are [1, 4] and [2, 3]. Example 2: Input: N = 6, X = 3, S = 10 Output: 3 Explanation: The combinations are [1, 3, 6], [2, 3, 5], and [1, 4, 5]. Example 3: Input: N = 4, X = 2, S = 8 Output: 0 Explanation: There are no combinations. Note: 1 <= N <= 100 1 <= X <= N 1 <= S <= X * N","solution":"def count_combinations(N, X, S): MOD = 10**9 + 7 # dp[x][s] will store the number of ways to pick x cards that sum up to s dp = [[0] * (S + 1) for _ in range(X + 1)] dp[0][0] = 1 for n in range(1, N + 1): for x in range(X, 0, -1): for s in range(S, n - 1, -1): dp[x][s] = (dp[x][s] + dp[x - 1][s - n]) % MOD return dp[X][S]"},{"question":"Implement a function `find_missing_letter(chars)` (Python) that takes an array of consecutive (increasing) letters as input and returns the missing letter in the array. You will always get an array of at least two characters, and the array will always be consecutive except for the missing letter. The input array will always contain letters from only one alphabet case (either all capitals or all lowercase). **Example:** ```python find_missing_letter([\'a\',\'b\',\'c\',\'d\',\'f\']) # should return \'e\' find_missing_letter([\'O\',\'Q\',\'R\',\'S\']) # should return \'P\' ``` Ensure that your solution handles typical cases but avoids unnecessary complexity.","solution":"def find_missing_letter(chars): Finds the missing letter from the array of consecutive (increasing) letters. :param chars: List of consecutive letters (all from the same case) :return: The missing letter for i in range(len(chars) - 1): if ord(chars[i + 1]) - ord(chars[i]) != 1: return chr(ord(chars[i]) + 1) # Since there is always a missing letter, this line should never be reached raise ValueError(\\"Should not reach here\\")"},{"question":"Find the middle of a given Linked List. Input: In this problem, a method receives the address of the head of a singly linked list as its argument. The function should not read any input from stdin/console. The struct Node has a data part which stores the data and a next pointer which points to the next element of the linked list. There are multiple test cases. For each test case, this method will be called individually. Output: The function should return the data of the middle node of the linked list. If there are two middle nodes, return the second middle node\'s data. User Task: The task is to complete the function findMiddle() which should return the data part of the middle node. Constraints: 1<=T<=100 1<=N<=200 Note: If you use \\"Test\\" or \\"Expected Output Button\\" use the below example format Example: Input: 2 5 1 2 3 4 5 6 1 2 3 4 5 6 Output: 3 4 Explanation: Testcase 1: The list has 5 elements, 3 is the middle element. Testcase 2: There are two middle elements (3 and 4), the second middle element is 4.","solution":"class Node: def __init__(self, data: int): self.data = data self.next = None def findMiddle(head: Node) -> int: Finds the middle of a singly linked list and returns the data of the middle node. If there are two middle nodes, it returns the second middle node\'s data. slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow.data"},{"question":"A palindrome is a string that reads the same forward and backward. Given a string, determine the minimum number of characters to remove to make it a palindrome. -----Input----- The input consists of one line containing a string A. The string A consists of lowercase English letters and the length of the string is between 1 and 10^6. -----Output----- Output a single integer representing the minimum number of characters to remove to make the string A a palindrome. -----Examples----- Sample Input 1: abca Sample Output 1: 1 Sample Input 2: racecar Sample Output 2: 0 Sample Input 3: abcdef Sample Output 3: 5","solution":"def min_removals_to_palindrome(s): Returns the minimum number of characters to remove from s to make it a palindrome. def lcs(X, Y): m = len(X) n = len(Y) L = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i - 1] == Y[j - 1]: L[i][j] = L[i - 1][j - 1] + 1 else: L[i][j] = max(L[i - 1][j], L[i][j - 1]) return L[m][n] reverse_s = s[::-1] lcs_length = lcs(s, reverse_s) return len(s) - lcs_length"},{"question":"Given an array of integers, determine whether the array can be split into three non-empty contiguous subarrays such that the sum of elements in each subarray is equal. Example Input: 6 1 2 1 2 1 2 Output: Yes Input: 5 1 1 1 1 1 Output: No Constraints - The input integers are in the range [1, 10^9]. - 3 ≤ length of array ≤ 2 * 10^5. Input Format: - The first line contains an integer n, the size of the array. - The second line contains n space-separated integers representing the elements of the array. Output Format: - Output \\"Yes\\" if the array can be split into three subarrays with equal sums, otherwise output \\"No\\". Conditions: - The subarrays must be contiguous. - Each subarray must be non-empty. Note: The solution should have an optimal time complexity to handle larger inputs within acceptable limits.","solution":"def can_split_into_three_equal_sum_subarrays(nums): Determines if the array can be split into three non-empty contiguous subarrays with equal sum. total_sum = sum(nums) # If the total sum is not divisible by 3, we cannot split into 3 equal parts if total_sum % 3 != 0: return \\"No\\" target_sum = total_sum // 3 current_sum = 0 splits = 0 for num in nums: current_sum += num if current_sum == target_sum: splits += 1 current_sum = 0 # We need at least 3 splits to form 3 subarrays with the target_sum return \\"Yes\\" if splits >= 3 else \\"No\\""},{"question":"Write a function `multiply_strings` that multiplies two non-negative integers represented as strings and returns the product as a string. You should not use any built-in BigInteger library or directly convert the strings to integers. Example 1: Input: num1 = \\"123\\", num2 = \\"456\\" Output: \\"56088\\" Example 2: Input: num1 = \\"2\\", num2 = \\"3\\" Output: \\"6\\" Example 3: Input: num1 = \\"0\\", num2 = \\"0\\" Output: \\"0\\" Function Signature: ```python def multiply_strings(num1: str, num2: str) -> str: # Your code here ```","solution":"def multiply_strings(num1: str, num2: str) -> str: if num1 == \\"0\\" or num2 == \\"0\\": return \\"0\\" len1, len2 = len(num1), len(num2) result = [0] * (len1 + len2) for i in range(len1 - 1, -1, -1): for j in range(len2 - 1, -1, -1): product = (ord(num1[i]) - ord(\'0\')) * (ord(num2[j]) - ord(\'0\')) p1, p2 = i + j, i + j + 1 total = product + result[p2] result[p1] += total // 10 result[p2] = total % 10 result_str = \'\'.join(map(str, result)) return result_str.lstrip(\'0\')"},{"question":"A word ladder is a sequence of words in which each word differs from the previous word by exactly one letter. The concept is often used as a puzzle where you transform one word into another by changing one letter at a time, with the constraint that each intermediate word must also be a valid dictionary word. Your task is to write a program that takes in two words and a dictionary of valid words, and determines the length of the shortest transformation sequence from the first word to the second word, or returns 0 if no such transformation sequence exists. Input The input consists of three parts: 1. A single line containing the start word. 2. A single line containing the end word. 3. A series of lines (at most 1,000 each) containing the valid dictionary words, one word per line. Each word has a length equal to the length of the start and end words. Output The output should be a single integer representing the length of the shortest transformation sequence from the start word to the end word, or 0 if no such transformation sequence exists. Example Input hit cog hot dot dog lot log cog Output 5 Explanation: The transformation sequence is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", which has a length of 5.","solution":"from collections import deque def word_ladder_length(start, end, dictionary): Returns the length of the shortest transformation sequence from start to end. if end not in dictionary or not start or not end or len(start) != len(end): return 0 words = set(dictionary) queue = deque([(start, 1)]) while queue: current_word, steps = queue.popleft() if current_word == end: return steps for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in words: words.remove(next_word) queue.append((next_word, steps + 1)) return 0"},{"question":"Given a list of integers, your task is to find the length of the longest subarray that forms a contiguous block of integers (i.e., the elements can be rearranged to form a consecutive sequence of integers). For example: ``` Input: [1, 2, 3, 5, 6] Output: 3 Explanation: The longest subarray that can be rearranged into a contiguous sequence is [1, 2, 3]. Input: [4, 2, 1, 6, 5] Output: 3 Explanation: The longest subarray that can be rearranged into a contiguous sequence is [4, 2, 1]. Input: [8, 6, 9, 7, 10, 12] Output: 5 Explanation: The longest subarray that can be rearranged into a contiguous sequence is [8, 6, 9, 7, 10]. Input: [1, 1, 1, 1] Output: 1 Explanation: The longest subarray that can be rearranged into a contiguous sequence is [1] (or any single element). Input: [10, 11, 14, 15, 12, 13, 16] Output: 7 Explanation: The entire array can be rearranged into the contiguous sequence [10, 11, 12, 13, 14, 15, 16]. Note: - The length of the input list will not exceed 10^5. - The elements in the list can be both positive and negative. ```","solution":"def longest_contiguous_subarray(arr): if not arr: return 0 arr.sort() max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1] + 1: current_length += 1 elif arr[i] != arr[i - 1]: current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"A software company is developing a new text editor and wants to implement a feature to reorder words in a sentence such that all words are sorted in non-decreasing order of their lengths. If two words have the same length, they should appear in the same order as they did in the original sentence. You are given a sentence containing lowercase English letters and spaces. Your task is to write a function that reorders the words in the sentence as specified. -----Input----- The input consists of a single line containing the sentence, with words separated by single spaces. The sentence has at least one word and at most 10^5 characters. -----Output----- Print the sentence with words reordered in non-decreasing order of their lengths. If two words have the same length, maintain their original order. -----Examples----- Input this is a test sentence Output a is this test sentence Input sorting words by length is fun Output by is fun words length sorting","solution":"def reorder_sentence_by_word_length(sentence): Reorders the words in the sentence by their length in non-decreasing order. If two words have the same length, their order remains unchanged. :param sentence: str - input sentence of words separated by spaces :return: str - sentence with words reordered by length words = sentence.split() words.sort(key=len) return \' \'.join(words)"},{"question":"Gemstones are special stones that exhibit unique properties. We define a gemstone as a string that contains a certain number of distinct types of characters. Each type of character is represented by a lowercase English letter (a-z). For example, the string \\"abcd\\" contains four types of characters (\'a\', \'b\', \'c\', and \'d\'), and the string \\"aabbcc\\" contains three types of characters (\'a\', \'b\', and \'c\'). Given a list of strings, a gemstone is defined as a character that appears in each of the strings. Your task is to write a program that identifies the number of gemstone characters in the given list of strings. # Input The input consists of: - The first line contains an integer, `n`, the number of strings in the list. - The next `n` lines each contain a string. # Output Output a single integer, the number of gemstones in the list. # Example Input ``` 3 abcdde baccd eeabg ``` Output ``` 2 ``` Explanation In the given example, the strings share the characters \'a\' and \'b\'. Hence, there are 2 gemstones.","solution":"def count_gemstones(n, string_list): Returns the number of gemstones in the list of strings. A gemstone is defined as a character that appears in every string. :param n: int - The number of strings in the list :param string_list: List - list of strings :return: int - number of gemstones if n == 0: return 0 # Initialize a set with characters from the first string gemstone_chars = set(string_list[0]) # Intersect with sets of characters from all other strings for i in range(1, n): gemstone_chars &= set(string_list[i]) # The number of gemstones is the size of the intersected set return len(gemstone_chars)"},{"question":"Ezra loves to play with arrays. Today, he encountered a problem where he needs to determine the minimum number of operations required to make all elements in an array equal. In one operation, he can choose any single element of the array and increment or decrement it by 1. Given an array of integers, determine the minimum number of operations required to make all the elements of the array equal. Constraints * 1 leq n leq 100,000 * -1,000,000 leq a_i leq 1,000,000 Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Output Print a single integer representing the minimum number of operations required to make all elements in the array equal. Examples Input 5 1 2 3 4 5 Output 6 Input 3 5 5 5 Output 0 Input 4 1 -1 1 -1 Output 4","solution":"def min_operations_to_equal_elements(n, arr): arr.sort() median = arr[n // 2] return sum(abs(x - median) for x in arr) # Input reading and function call for actual implementation. if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:n+1])) result = min_operations_to_equal_elements(n, arr) print(result)"},{"question":"A company has a new product that was released in several different versions, each one with some additional features but also some known bugs. The company wants to keep track of which features are available in each version and quickly determine whether a certain combination of features is present in any version. Write a program that processes multiple feature requests and checks if there is a version that contains all the requested features. Each version has a unique ID and contains a list of features. The input consists of multiple datasets, and each dataset starts with the number of versions, followed by the details of each version. After the versions, a number of feature requests follow. The end of the input is indicated by a single line containing a zero. Each feature is represented as an integer. Input The input format is as follows: ``` Number of versions (1 <= v <= 1000) Version ID (integer) followed by the number of features (f), followed by f feature integers Number of feature requests (1 <= r <= 100) Features (integer) for each request 0 ``` Example: ``` 3 1 3 2 3 4 2 2 1 3 3 4 2 3 4 5 2 1 3 2 3 4 0 ``` Output For each feature request, print \\"YES\\" if there exists a version that contains all the requested features, otherwise print \\"NO\\". Example Output: ``` YES YES ```","solution":"def check_features(input_data): Processes the input data to check if any version contains all the requested features. :param input_data: List of strings, where each string represents a line of the input. :return: List of strings, each being \\"YES\\" or \\"NO\\" based on whether the features exist in any version. results = [] idx = 0 while idx < len(input_data): num_versions = int(input_data[idx]) if num_versions == 0: break idx += 1 versions = [] for _ in range(num_versions): version_data = list(map(int, input_data[idx].split())) version_id = version_data[0] features = set(version_data[2:]) versions.append((version_id, features)) idx += 1 num_requests = int(input_data[idx]) idx += 1 for _ in range(num_requests): request_features = set(map(int, input_data[idx].split())) idx += 1 found = any(request_features.issubset(version[1]) for version in versions) if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"The editors of a publishing house are planning to create a new catalog of the books in their library. To do this, they need to sort the books based on a specific set of rules. Each book in their library has a unique ID number and a unique category identifier. The books can be sorted based on two criteria: 1. Primary sorting is by book category in descending order. 2. Secondary sorting is by book ID in ascending order within the same category. Your task is to help the editors by writing a program that will generate the catalog with books sorted according to the described criteria. ------ Input ------ The first line of the input contains a single integer N denoting the number of books. Each of the following N lines contains two space-separated integers c and id where: - c denotes the category identifier of the book. - id denotes the ID number of the book. ------ Output ------ Print N lines, each containing two space-separated integers c and id, representing the books sorted according to the criteria mentioned above. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ c, id ≤ 10^9 ----- Sample Input 1 ------ 4 2 101 3 105 2 99 1 150 ----- Sample Output 1 ------ 3 105 2 99 2 101 1 150 ------ Explanation ------ In this example, the books are sorted first by category in descending order: 3 comes before 2, and 2 comes before 1. For books with the same category, they are sorted by ID in ascending order: within category 2, IDs are ordered as 99 before 101.","solution":"def sort_books(books): Sorts the given list of books based on the described criteria: 1. Primary sorting by book category in descending order. 2. Secondary sorting by book ID in ascending order within the same category. Args: books (list of tuple): A list of books where each book is represented as a tuple (category, id). Returns: list of tuple: A sorted list of books based on the specified criteria. # Sort books first by category in descending order, then by id in ascending order sorted_books = sorted(books, key=lambda x: (-x[0], x[1])) return sorted_books"},{"question":"You are given a string consisting of lowercase alphabets. You need to determine the number of distinct substrings that can be formed from the given string. Input: The first line of the input contains a single integer T, the number of test cases. The following T lines each contain a single string. Output: For each test case, output a single integer — the number of distinct substrings that can be generated from the given string. Constraints: 1 ≤ T ≤ 10 1 ≤ length of string ≤ 100 SAMPLE INPUT 2 abc aaa SAMPLE OUTPUT 6 3 Explanation: For the first test case, the distinct substrings are a, b, c, ab, bc, abc. For the second test case, the distinct substrings are a, aa, aaa.","solution":"def count_distinct_substrings(s): Counts the number of distinct substrings that can be formed from the given string. n = len(s) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings) def process_test_cases(T, test_cases): results = [] for test_case in test_cases: results.append(count_distinct_substrings(test_case)) return results"},{"question":"Write a function that takes a list of intervals, where each interval is represented as a tuple (start, end), and returns a new list with all overlapping intervals merged. Intervals are considered overlapping if they have any common points. For example, given the list [(1, 3), (2, 6), (8, 10), (15, 18)], the function should return [(1, 6), (8, 10), (15, 18)] because the intervals (1, 3) and (2, 6) overlap and are merged into (1, 6). Another example, given the list [(1, 4), (4, 5)], the function should return [(1, 5)] because the intervals (1, 4) and (4, 5) overlap and are merged into (1, 5). You may assume that the intervals are not initially sorted, and you need to ensure that your output list contains the intervals in ascending order based on the starting points of the intervals.","solution":"def merge_intervals(intervals): Merges overlapping intervals in a list of intervals. Args: intervals (list of tuples): A list where each tuple represents an interval as (start, end) Returns: list of tuples: A list of merged intervals sorted by the start time. if not intervals: return [] intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: last_merged = merged[-1] if current[0] <= last_merged[1]: merged[-1] = (last_merged[0], max(last_merged[1], current[1])) else: merged.append(current) return merged"},{"question":"You are given a matrix of dimensions MxN, where each cell contains a number representing the cost to enter that cell. You need to find a path from the top-left corner to the bottom-right corner such that the sum of the costs along the path is minimized. You can only move either down or right at any point in time. Input The first line of the input contains an integer T, denoting the number of test cases. For each test case: - The first line contains two integers M and N, the number of rows and columns in the matrix. - The next M lines each contain N integers representing the cost matrix. Output For each test case, print the minimum cost to reach the bottom-right corner from the top-left corner. Constraints 1 ≤ T ≤ 10 1 ≤ M, N ≤ 100 1 ≤ cost[i][j] ≤ 1000 Sample Input ``` 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 4 1 ``` Sample Output ``` 7 6 ``` Explanation In the first test case, the minimum cost path is 1→3→1→1→1, so the total cost is 7. In the second test case, the minimum cost path is 1→2→1, so the total cost is 6.","solution":"def min_cost_path(matrix): M = len(matrix) N = len(matrix[0]) # Create a 2D dp array to store the minimum cost path dp = [[0]*N for _ in range(M)] dp[0][0] = matrix[0][0] # Initialize the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + matrix[0][j] # Initialize the first column for i in range(1, M): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the dp array for i in range(1, M): for j in range(1, N): dp[i][j] = matrix[i][j] + min(dp[i-1][j], dp[i][j-1]) return dp[M-1][N-1] def process_test_cases(test_cases): results = [] for M, N, matrix in test_cases: results.append(min_cost_path(matrix)) return results def main(input): lines = input.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): M, N = map(int, lines[idx].split()) matrix = [] for i in range(M): matrix.append(list(map(int, lines[idx + 1 + i].split()))) test_cases.append((M, N, matrix)) idx += M + 1 results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"John has a set of balloons he wants to arrange for his birthday party. Each balloon has a specific color. John wants to form groups of balloons such that all balloons in a group have the same color, and the size of any group is the minimum possible. To achieve this, John can merge any two balloons or separate any balloon at most k times. Each merging or separating operation costs him one unit of time. Write a function to calculate the minimum time required for John to achieve his desired arrangement. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of balloons. The next line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the color of each balloon. The next line contains an integer k (0 ≤ k ≤ 10^5) — the maximum number of operations (merging or separating). -----Output----- Output a single integer, the minimum time required for John to achieve his desired arrangement. -----Example----- Input 6 1 2 2 3 3 3 4 Output 3 -----Note----- In the example, John can achieve the desired arrangement in the following steps: 1. Merge the 2nd and 3rd balloons of color 2 into one balloon. 2. Merge the 5th and 6th balloons of color 3 into one balloon. 3. Merge the resulting balloon with the 4th balloon, also of color 3. By performing three operations, John minimizes the time and achieves his desired arrangement. -----Constraints---- - Each balloon can be merged or separated at most k times. - The arrangement involves achieving the minimum possible group size for each color.","solution":"def min_time_to_arrange_balloons(n, colors, k): Returns the minimum time required to arrange the balloons such that all balloons in a group have the same color, and the size of any group is the minimum possible. from collections import Counter color_count = Counter(colors) color_freqs = list(color_count.values()) color_freqs.sort(reverse=True) total_operations = 0 while k > 0 and color_freqs: max_freq = color_freqs[0] if max_freq == 1: # No need to perform any more operations since all groups are minimized break else: color_freqs[0] -= 1 k -= 1 total_operations += 1 color_freqs.sort(reverse=True) return total_operations"},{"question":"# Problem Statement In the Kingdom of Narnia, there are numerous regions connected by roads. Each region has a unique magic value, which denotes the strength of the magic present in that region. The regions form an undirected, connected graph where nodes represent the regions and edges represent the roads between them. The citizens of Narnia have decided to develop a transportation system that allows them to travel from any region to another with minimal magic strength fluctuations between consecutive regions on their travel path. To do this, they would like to calculate the maximum difference in magic values between any two regions that are directly connected by a road. Given the graph structure of Narnia where each node has an associated magic value and each edge represents a bidirectional road between regions, you are to determine the maximum difference in magic values between any two directly connected regions in the kingdom. * * * # Input The input consists of multiple lines: - The first line contains two integers, N and M (2 leq N leq 10^4, 1 leq M leq 10^5), where N is the number of regions (nodes) and M is the number of roads (edges). - The second line contains N integers, where the i-th integer represents the magic value of the i-th region (1 leq text{magic value} leq 10^6). - Each of the following M lines contains two integers u and v (1 leq u, v leq N), representing a road between region u and region v. * * * # Output Output a single integer, the maximum difference in magic values between any two directly connected regions. * * * # Example Input ``` 5 4 3 1 4 1 5 1 2 2 3 3 4 4 5 ``` Output ``` 4 ``` Input ``` 3 2 8 3 7 1 2 1 3 ``` Output ``` 5 ``` * * * # Explanation In the first example, the differences in magic values for the connected regions are: - Between region 1 and 2: |3 - 1| = 2 - Between region 2 and 3: |1 - 4| = 3 - Between region 3 and 4: |4 - 1| = 3 - Between region 4 and 5: |1 - 5| = 4 Thus, the maximum difference is 4. In the second example, the differences in magic values for the connected regions are: - Between region 1 and 2: |8 - 3| = 5 - Between region 1 and 3: |8 - 7| = 1 Thus, the maximum difference is 5.","solution":"def max_magic_difference(N, M, magic_values, edges): Calculate the maximum difference in magic values between any two directly connected regions. :param N: The number of regions (nodes) :param M: The number of roads (edges) :param magic_values: A list of integers representing the magic values of the regions :param edges: A list of tuples representing the roads between regions :return: The maximum difference in magic values between any two directly connected regions max_difference = 0 for u, v in edges: difference = abs(magic_values[u - 1] - magic_values[v - 1]) if difference > max_difference: max_difference = difference return max_difference # Example usage: # print(max_magic_difference(5, 4, [3, 1, 4, 1, 5], [(1, 2), (2, 3), (3, 4), (4, 5)])) # Output: 4 # print(max_magic_difference(3, 2, [8, 3, 7], [(1, 2), (1, 3)])) # Output: 5"},{"question":"You are given a 2D grid of dimensions n x m filled with non-negative integers. Your task is to handle q queries, each described by four integers x1, y1, x2, and y2 (1-based indices), which define a sub-grid. For each query, calculate the sum of all the elements within the specified sub-grid. To optimize the querying process, you are allowed to preprocess the grid for efficient summation. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines each contain m integers — the elements of the grid. Each element is a non-negative integer not exceeding 1,000,000. The following line contains a single integer q (1 ≤ q ≤ 10000) — the number of queries. The i-th of the next q lines contains four integers x1, y1, x2, and y2 (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m) — the indices defining the sub-grid for the i-th query. -----Output----- Print q lines. The i-th line should contain a single integer — the sum of the elements in the sub-grid defined by the query (x1, y1, x2, y2). -----Example----- Input 3 3 1 2 4 8 16 32 64 128 256 2 1 1 2 2 2 2 3 3 Output 27 432 -----Note----- In the first query, the sub-grid is: 1 2 8 16 The sum is 1 + 2 + 8 + 16 = 27 In the second query, the sub-grid is: 16 32 128 256 The sum is 16 + 32 + 128 + 256 = 432","solution":"def preprocess_grid(grid): Preprocess the grid to create a prefix sum matrix. n = len(grid) m = len(grid[0]) prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) return prefix_sum def query_sum(prefix_sum, x1, y1, x2, y2): Query the sum of the sub-grid defined by (x1, y1) to (x2, y2). Adjust indices to 1-based. x1, y1, x2, y2 = x1 - 1, y1 - 1, x2, y2 return (prefix_sum[x2][y2] - prefix_sum[x1][y2] - prefix_sum[x2][y1] + prefix_sum[x1][y1]) def handle_queries(grid, queries): Handle multiple queries on the grid. prefix_sum = preprocess_grid(grid) result = [] for x1, y1, x2, y2 in queries: result.append(query_sum(prefix_sum, x1, y1, x2, y2)) return result"},{"question":"A virtual pet game needs a system to manage the levels and experience points (XP) of various pets belonging to different players. Players can interact with their pets by performing various actions that affect their pets\' XP and levels. The game supports the following operations: * init player_name pet_name — Register a new pet with initial level 1 and XP 0 for a specified player. Each player can have only one pet with the same name. If the pet_name is already registered under that player, ignore this operation. * gain_xp player_name pet_name xp — Increase the XP of the specified pet belonging to the specified player by xp points (1 ≤ xp ≤ 1000). The pet levels up for every 100 XP gained. If the pet levels up, its XP is reset to the remainder after dividing by 100. For example, if a pet has 95 XP and gains 10 more XP, it will level up to level 2 with 5 XP remaining. * lose_xp player_name pet_name xp — Decrease the XP of the specified pet belonging to the specified player by xp points (1 ≤ xp ≤ 1000). If the xp to be lost exceeds current XP, the pet levels down (if possible) and the remaining xp is subtracted from a full XP bar of 100 points from the new level. A pet cannot have negative levels or XP. If a pet with 10 XP loses 15 XP, it will level down to level 0 with 95 XP remaining. * query player_name pet_name — Output the current level and XP of the specified pet belonging to the specified player. Output \\"Pet not found\\" if the pet is not registered. * undo_d player_name — Undo all changes made to the pets of the specified player in the last d days (not including the current day). Restored states must be applied up to that point in time. Input The first line contains a single integer q (1 ≤ q ≤ 105) — the number of operations performed in the game. The next q lines describe the operations, with each line formatted as one of the following types: * init player_name pet_name * gain_xp player_name pet_name xp * lose_xp player_name pet_name xp * query player_name pet_name * undo_d player_name Each player_name and pet_name is a string that contains only lowercase English letters and has a length 1 ≤ |player_name|, |pet_name| ≤ 15. Output For each query operation, output the current level and XP of the specified pet in the format \\"level xp\\". If the pet is not found, output \\"Pet not found\\". Examples Input 10 init alice fluffy gain_xp alice fluffy 50 gain_xp alice fluffy 60 query alice fluffy init bob rex lose_xp alice fluffy 30 query alice fluffy query bob rex undo_d alice 2 query alice fluffy Output 1 10 0 80 Pet not found 0 50","solution":"class PetGame: def __init__(self): self.players = {} self.history = {} def init(self, player_name, pet_name): if player_name not in self.players: self.players[player_name] = {} if pet_name not in self.players[player_name]: self.players[player_name][pet_name] = {\'level\': 1, \'xp\': 0} if player_name not in self.history: self.history[player_name] = [] def gain_xp(self, player_name, pet_name, xp): pet = self.players.get(player_name, {}).get(pet_name, None) if not pet: return self.history[player_name].append({\'action\': \'gain_xp\', \'pet\': pet_name, \'change\': xp}) xp_to_add = xp while xp_to_add > 0: if pet[\'xp\'] + xp_to_add < 100: pet[\'xp\'] += xp_to_add xp_to_add = 0 else: xp_to_add -= (100 - pet[\'xp\']) pet[\'xp\'] = 0 pet[\'level\'] += 1 def lose_xp(self, player_name, pet_name, xp): pet = self.players.get(player_name, {}).get(pet_name, None) if not pet: return self.history[player_name].append({\'action\': \'lose_xp\', \'pet\': pet_name, \'change\': xp}) xp_to_deduct = xp while xp_to_deduct > 0: if pet[\'xp\'] > xp_to_deduct: pet[\'xp\'] -= xp_to_deduct xp_to_deduct = 0 elif pet[\'level\'] > 0: xp_to_deduct -= (pet[\'xp\'] + 1) pet[\'level\'] -= 1 pet[\'xp\'] = 99 else: pet[\'xp\'] = max(0, pet[\'xp\'] - xp_to_deduct) xp_to_deduct = 0 def query(self, player_name, pet_name): pet = self.players.get(player_name, {}).get(pet_name, None) if pet: print(f\\"{pet[\'level\']} {pet[\'xp\']}\\") else: print(\\"Pet not found\\") def undo_d(self, player_name, d): if player_name not in self.history: return snapshots = self.history[player_name] for action in reversed(snapshots): if action[\'action\'] == \'gain_xp\': self.lose_xp(player_name, action[\'pet\'], action[\'change\']) elif action[\'action\'] == \'lose_xp\': self.gain_xp(player_name, action[\'pet\'], action[\'change\']) self.history[player_name] = [] import sys input = sys.stdin.read def main(): game = PetGame() data = input().split(\\"n\\") q = int(data[0]) for i in range(1, q+1): operation = data[i].split() command = operation[0] if command == \'init\': player_name, pet_name = operation[1], operation[2] game.init(player_name, pet_name) elif command == \'gain_xp\': player_name, pet_name, xp = operation[1], operation[2], int(operation[3]) game.gain_xp(player_name, pet_name, xp) elif command == \'lose_xp\': player_name, pet_name, xp = operation[1], operation[2], int(operation[3]) game.lose_xp(player_name, pet_name, xp) elif command == \'query\': player_name, pet_name = operation[1], operation[2] game.query(player_name, pet_name) elif command == \'undo_d\': player_name, d = operation[1], int(operation[2]) game.undo_d(player_name, d) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string S of length N. Your task is to count the number of times the most frequent character appears. Input The first line contains an integer N — the length of the string. The second line contains the string S of length N, consisting of lowercase English letters. Output Print the count of the most frequent character in the string. Constraints 1 ≤ N ≤ 10^6 SAMPLE INPUT 7 abacabad SAMPLE OUTPUT 4","solution":"def most_frequent_char_count(n, s): Returns the count of the most frequent character in a string s of length n. from collections import Counter frequency = Counter(s) max_freq = max(frequency.values()) return max_freq"},{"question":"The Kingdom of Treeland has many cities connected by bidirectional roads. The king wants to ensure the efficient movement of goods between cities. To achieve this, he plans to build warehouses but has limited resources to allocate them. To maximize efficiency, the goal is to place the minimum number of warehouses such that every city either has a warehouse or is directly connected to a city with a warehouse. Your task is to help the king determine the minimum number of warehouses needed and which cities should have them. ------ Input: ------ The first line contains an integer T which represents the number of test cases. Each test case starts with two integers N and M denoting the number of cities and roads, respectively. The next M lines each contain two integers u and v, indicating that there is a road between city u and city v. ------ Output: ------ For each test case, output a single integer - the minimum number of warehouses required. ------ Constraints ------ 1 ≤ T ≤ 5 1 ≤ N, M ≤ 1000 1 ≤ u, v ≤ N Each city is connected to at least one other city. ----- Sample Input 1 ------ 2 3 3 1 2 2 3 3 1 4 3 1 2 2 3 3 4 ----- Sample Output 1 ------ 1 2","solution":"def min_warehouses(test_cases): def greedy_vertex_cover(n, edges): # Adjacency list representation adjacency_list = [[] for _ in range(n)] for u, v in edges: adjacency_list[u-1].append(v-1) adjacency_list[v-1].append(u-1) visited = [False] * n warehouses = 0 for u in range(n): if not visited[u]: for v in adjacency_list[u]: if not visited[v]: visited[v] = True visited[u] = True warehouses += 1 break return warehouses results = [] for (N, M, edges) in test_cases: results.append(greedy_vertex_cover(N, edges)) return results # Example of how to use the function for given inputs test_cases = [ (3, 3, [(1, 2), (2, 3), (3, 1)]), (4, 3, [(1, 2), (2, 3), (3, 4)]) ] print(min_warehouses(test_cases)) # Output: [1, 2] # Function to read multiple test cases def read_test_cases(input_str): input_data = input_str.strip().split(\'n\') T = int(input_data[0]) test_cases = [] index = 1 for _ in range(T): N, M = map(int, input_data[index].split()) edges = [tuple(map(int, input_data[index + i + 1].split())) for i in range(M)] test_cases.append((N, M, edges)) index += M + 1 return test_cases"},{"question":"Given an array of integers nums and an integer k, your task is to rearrange the array so that it becomes “wiggle sorted”. The wiggle sort follows these rules: - nums[0] <= nums[1] >= nums[2] <= nums[3] >= nums[4]... In other words, elements at odd positions should be greater than or equal to their adjacent even position elements and vice versa. Example 1: Input: nums = [3, 5, 2, 1, 6, 4] Output: [3, 5, 1, 6, 2, 4] Explanation: One possible answer is [3, 5, 1, 6, 2, 4]. Example 2: Input: nums = [6, 4, 2, 1, 5, 3] Output: [4, 6, 1, 5, 2, 3] Explanation: One possible answer is [4, 6, 1, 5, 2, 3]. Your Task: You need to implement the function wiggleSort() that takes the array nums and integer k and rearranges the array to satisfy the wiggle sort properties. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1. 1 ≤ nums.length ≤ 10^5 2. -10^9 ≤ nums[i] ≤ 10^9","solution":"def wiggleSort(nums): Rearranges the array so that it becomes wiggle sorted. nums[0] <= nums[1] >= nums[2] <= nums[3] >= nums[4]... for i in range(len(nums) - 1): if (i % 2 == 0 and nums[i] > nums[i + 1]) or (i % 2 != 0 and nums[i] < nums[i + 1]): nums[i], nums[i + 1] = nums[i + 1], nums[i] # Test with an example nums = [3, 5, 2, 1, 6, 4] wiggleSort(nums) print(nums) # Output could be [3, 5, 1, 6, 2, 4]"},{"question":"You are given a list of n integers. You can perform the following operation on the list any number of times (possibly zero): Choose any two adjacent integers and replace them with their sum, thus reducing the length of the list by one. You are interested in Y, the smallest possible value of the remaining element after performing the operation any number of times. What is the smallest possible value of the remaining element after performing the operation any number of times? -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). Description of the test cases follows. The first line of each test case contains a single integer n (2 le n le 50). The next line contains n integers a_i (-100 le a_i le 100). -----Output----- For each test case, print one integer Y, the smallest possible value of the remaining element after applying the operation as many times as you want. -----Examples----- Input 2 3 1 2 3 4 -1 2 -3 4 Output 6 2 -----Note----- In the first test case, no matter how you combine the elements, the sum will always be 1 + 2 + 3 = 6. In the second test case, you can sum the integers in the following way: (-1 + 2) + (-3 + 4) = 1 + 1 = 2. Notice that different ways of summing can still yield the same final value which will always be 2 in this case.","solution":"def smallest_possible_value(test_cases): results = [] for case in test_cases: n = case[0] integers = case[1] results.append(sum(integers)) return results"},{"question":"You are given an array of integers where each integer appears exactly twice, except for one integer which appears only once. Write a function to find the integer that appears only once. Write a function `findUnique` that takes in a list, `arr`, of `n` integers (1 ≤ n ≤ 10^6) and returns the integer that appears exactly once. **Input:** - A single integer `n` representing the number of elements in the array. - A list of `n` integers, `arr`. **Output:** - The integer that appears only once. **Example:** ``` Input 9 1 2 3 2 1 4 4 5 3 Output 5 ``` **Note:** In the example above, the array `[1, 2, 3, 2, 1, 4, 4, 5, 3]` contains all elements twice except for the integer `5` which appears only once. Hence, the answer is `5`. **Constraints:** - The function should have a linear runtime complexity (O(n)). - Do not use extra memory for another array or hash table. **Function Signature:** ```python def findUnique(arr: List[int]) -> int: # Implementation here ```","solution":"from typing import List def findUnique(arr: List[int]) -> int: Finds the element in the list that appears exactly once. unique = 0 for num in arr: unique ^= num return unique"},{"question":"Background: A **binary search tree** (BST) is a node-based binary tree data structure which has the following properties: - The left subtree of a node contains only nodes with keys less than the node’s key. - The right subtree of a node contains only nodes with keys greater than the node’s key. - Both the left and right subtrees must also be binary search trees. A **least common ancestor (LCA)** of two nodes `p` and `q` in a tree is defined as the lowest node that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself). --- --- Task: You need to implement a function that, given the root of a binary search tree and two values `p` and `q`, returns the value of their least common ancestor (LCA). Remember, a BST is represented in such a way that each node contains the node\'s value and two child pointers (left and right). For example, in Python, a tree node might be defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Your function should traverse the BST to find the LCA of the nodes with values `p` and `q` and return the value of the LCA node. **Input:** - `root`: TreeNode - the root of the binary search tree. - `p`: int - the value of the first node. - `q`: int - the value of the second node. **Output:** - int - the value of the least common ancestor node. Example: ```python # Creating an example BST: # 6 # / # 2 8 # / / # 0 4 7 9 # / # 3 5 root = TreeNode(val=6) root.left = TreeNode(val=2) root.right = TreeNode(val=8) root.left.left = TreeNode(val=0) root.left.right = TreeNode(val=4) root.right.left = TreeNode(val=7) root.right.right = TreeNode(val=9) root.left.right.left = TreeNode(val=3) root.left.right.right = TreeNode(val=5) # Considering p = 2 and q = 8, the LCA is 6 findLCA(root, 2, 8) == 6 # Considering p = 2 and q = 4, the LCA is 2 findLCA(root, 2, 4) == 2 ``` Note: You can assume that both `p` and `q` exist in the BST.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def findLCA(root, p, q): Find the least common ancestor (LCA) of the nodes with values p and q in a BST. Parameters: root (TreeNode): The root of the binary search tree. p (int): The value of the first node. q (int): The value of the second node. Returns: int: The value of the LCA node. current = root while current: if p < current.val and q < current.val: current = current.left elif p > current.val and q > current.val: current = current.right else: return current.val # Example usage: # Creating an example BST: # 6 # / # 2 8 # / / # 0 4 7 9 # / # 3 5 root = TreeNode(val=6) root.left = TreeNode(val=2) root.right = TreeNode(val=8) root.left.left = TreeNode(val=0) root.left.right = TreeNode(val=4) root.right.left = TreeNode(val=7) root.right.right = TreeNode(val=9) root.left.right.left = TreeNode(val=3) root.left.right.right = TreeNode(val=5) print(findLCA(root, 2, 8)) # Should return 6 print(findLCA(root, 2, 4)) # Should return 2"},{"question":"In the realm of Algorithmia, there exists a large orchard filled with an ancient variety of trees. Each tree bears a certain number of golden fruits. The fruit count follows a specific pattern, such that it either strictly increases or decreases as you walk through the orchard from the westernmost to the easternmost tree. Algorithmus, the royal gardener, has decided to create a path through the orchard to collect the maximum possible number of golden fruits, but he must start at the first tree and can only visit each tree once. Due to the magic properties of the trees, the path can only move between consecutive trees. However, some mischievous sprites have made a few trees \\"untraversable,\\" meaning Algorithmus cannot visit these trees. These untraversable trees are marked, and the gardener needs your help to determine the maximum number of golden fruits he can collect on a valid path from west to east. -----Input----- The input consists of: - An integer n (1 le n le 10^5), the number of trees in the orchard. - An array of n integers, where the i-th integer represents the number of golden fruits on the i-th tree. - An array of n boolean values, where the i-th value is true if the i-th tree is untraversable, and false otherwise. -----Output----- Print a single integer, the maximum number of golden fruits Algorithmus can collect on a valid path starting from the first tree to the last tree. If no valid path exists, print 0. -----Examples----- Sample Input: 5 [2, 3, 1, 5, 4] [False, False, True, False, False] Sample Output: 9 Explanation: Algorithmus starts at the first tree (2 fruits) and then continues to the second tree (3 fruits). He skips the third tree since it\'s untraversable and then collects the fruits from the fourth (5 fruits) and fifth (4 fruits) trees. The total number of fruits collected is 2 + 3 + 5 + 4 = 14.","solution":"def max_golden_fruits(n, fruits, untraversable): if untraversable[0]: return 0 dp = [0] * n dp[0] = fruits[0] for i in range(1, n): if not untraversable[i]: if untraversable[i - 1]: dp[i] = dp[i - 2] + fruits[i] if i - 2 >= 0 else fruits[i] else: dp[i] = dp[i - 1] + fruits[i] return max(dp) # Example usage: # n = 5 # fruits = [2, 3, 1, 5, 4] # untraversable = [False, False, True, False, False] # print(max_golden_fruits(n, fruits, untraversable)) # Output: 14"},{"question":"You are leading your team in a treasure Hunt, and you have a map that represents the venue. The venue is a rectangular grid with n rows and m columns. Each cell in the grid is either land or water. Your team can walk between two adjacent cells in the grid if both are land. However, your team can only walk for k hours before resting. Therefore you want to determine if there exists a path from the top-left corner of the grid (1, 1) to the bottom-right corner (n, m), such that the path is less than or equal to k hours of walking. -----Input----- The first line contains three integers n, m, and k (1 le n, m le 100 and 1 le k le 10000) — the dimensions of the grid and the maximum time your team can walk without rest, respectively. The next n lines each contain a string of length m consisting of \'0\' and \'1\' characters. A \'0\' indicates a cell is land, and a \'1\' indicates a cell is water. -----Output----- Print \\"YES\\" if there exists a path from the top-left corner (1, 1) to the bottom-right corner (n, m) with total walking time less than or equal to k hours. Otherwise, print \\"NO\\". -----Examples----- Input 5 5 10 00000 01110 01110 01110 00000 Output YES Input 3 3 2 000 010 011 Output NO -----Note----- In the first example, there is a possible path from the top-left to the bottom-right within 10 steps: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (1,5) -> (2,5) -> (3,5) -> (4,5) -> (5,5). In the second example, even the shortest path from the top-left to the bottom-right is longer than 2 steps.","solution":"from collections import deque def can_reach_destination(n, m, k, grid): Determine if there exists a path from the top-left corner to the bottom-right corner of the grid within k hours of walking. if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': return \\"NO\\" directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: row, col, dist = queue.popleft() if row == n-1 and col == m-1: if dist <= k: return \\"YES\\" for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and not visited[new_row][new_col] and grid[new_row][new_col] == \'0\': visited[new_row][new_col] = True queue.append((new_row, new_col, dist + 1)) return \\"NO\\" # Example usage # n, m, k = 5, 5, 10 # grid = [\'00000\', \'01110\', \'01110\', \'01110\', \'00000\'] # print(can_reach_destination(n, m, k, grid)) # Output: \'YES\'"},{"question":"In a country far away, there are N cities connected by M bidirectional roads. The government wants to improve transportation by adding new roads so that all cities are easily accessible from each other. They need your help to determine if the network of cities is already fully connected. If the cities are already fully connected, output \\"Fully Connected\\". Otherwise, output \\"Not Fully Connected\\". -----Input:----- The first line of the input contains a single integer T, the number of test cases. Each test case starts with a line containing two integers N and M, the number of cities and roads, respectively. The next M lines each contain two integers A and B, indicating that there is a two-way road between city A and city B. -----Output:----- For each test case, output a single line either \\"Fully Connected\\" or \\"Not Fully Connected\\". -----Constraints:----- 1 ≤ T ≤ 10 1 ≤ N ≤ 5000 0 ≤ M ≤ 10000 1 ≤ A, B ≤ N -----Example:----- Input: 2 3 3 1 2 2 3 3 1 4 2 1 2 3 4 Output: Fully Connected Not Fully Connected Explanation: In the first test case, we have 3 cities and 3 roads making a fully connected graph. In the second test case, the 4 cities are not fully connected because there\'s no road connecting the pair (1, 3) or (1, 4) directly or indirectly.","solution":"def find(parent, i): if parent[i] == -1: return i else: return find(parent, parent[i]) def union(parent, x, y): x_set = find(parent, x) y_set = find(parent, y) if x_set != y_set: parent[x_set] = y_set def is_fully_connected(num_cities, roads): parent = [-1] * num_cities for road in roads: city1, city2 = road[0] - 1, road[1] - 1 # Convert to zero-based index union(parent, city1, city2) first_city_set = find(parent, 0) # Use the first city as the reference for city in range(1, num_cities): if find(parent, city) != first_city_set: return \\"Not Fully Connected\\" return \\"Fully Connected\\" def check_fully_connected(test_cases): results = [] for num_cities, num_roads, roads in test_cases: result = is_fully_connected(num_cities, roads) results.append(result) return results"},{"question":"Alice and Bob are playing a game of \\"Maximum Stones\\". The game is played with two piles of stones. In each turn, a player can: 1. Take any number of stones from one pile (at least one stone). 2. Take an equal number of stones from both piles (at least one from each). Alice always goes first. The player who takes the last stone(s) wins the game. Assuming both players play optimally, determine the winner. Input The input consists of a single line containing two space-separated integers, A and B (1 ≤ A, B ≤ 10^9), representing the initial number of stones in the two piles. Output Output the name of the winning player, either \\"Alice\\" or \\"Bob\\" (without quotes). Examples Input 3 7 Output Alice Input 4 4 Output Bob Note In the first example, Alice will win by taking 3 stones from the second pile, leaving the piles as (3, 4). Bob might then take all 3 stones from the first pile, leaving (0, 4). Alice can then take 4 stones from the second pile and win. In the second example, Bob will win since any move by Alice will still leave piles that Bob can mirror until he wins.","solution":"def determine_winner(A, B): Determines the winner of the Maximum Stones game. Parameters: - A (int): Number of stones in the first pile. - B (int): Number of stones in the second pile. Returns: - str: The name of the winning player, either \\"Alice\\" or \\"Bob\\". if A != B: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Given an array of integers nums and an integer target, find two distinct indices i and j in the array such that nums[i] + nums[j] equals target. Return these indices as a tuple (i, j). If no such indices exist, return (-1, -1). Example 1: Input: nums = [2, 7, 11, 15] target = 9 Output: (0, 1) Explanation: Considering 0-based indexing, nums[0] + nums[1] = 2 + 7 = 9. Example 2: Input: nums = [3, 2, 4] target = 6 Output: (1, 2) Explanation: Considering 0-based indexing, nums[1] + nums[2] = 2 + 4 = 6. Example 3: Input: nums = [3, 3] target = 6 Output: (0, 1) Explanation: Considering 0-based indexing, nums[0] + nums[1] = 3 + 3 = 6. Example 4: Input: nums = [1, 2, 3] target = 7 Output: (-1, -1) Explanation: There are no two distinct indices where the sum of the elements equals the target. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findTwoSum() which takes the list of integers nums and the integer target as input parameters and returns a tuple of two integers. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(nums) ≤ 10^3 -10^9 ≤ nums[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9","solution":"def findTwoSum(nums, target): Given an array of integers nums and an integer target, find two distinct indices i and j in the array such that nums[i] + nums[j] equals target. Return these indices as a tuple (i, j). If no such indices exist, return (-1, -1). lookup = {} for i, num in enumerate(nums): complement = target - num if complement in lookup: return (lookup[complement], i) lookup[num] = i return (-1, -1)"},{"question":"You are participating in a coding competition where you need to build a matrix of numbers based on specific rules. The matrix should be filled with integers such that each row and each column respect ascending order but allow gaps between consecutive numbers. Given two integers n and m, construct an n x m matrix where: 1. Each row contains numbers in ascending order from left to right. 2. Each column contains numbers in ascending order from top to bottom. Your objective is to generate a matrix following these rules while ensuring that the maximum number in the matrix does not exceed n*m. # Input The input consists of two integers n and m (1 ≤ n, m ≤ 300). # Output Output the generated matrix with n rows and m columns where each element is separated by a space. # Examples Input ``` 3 3 ``` Output ``` 1 2 3 2 3 4 3 4 5 ``` Input ``` 2 4 ``` Output ``` 1 2 3 4 2 3 4 5 ``` Input ``` 1 5 ``` Output ``` 1 2 3 4 5 ``` # Note In case of multiple solutions, any valid output is acceptable as long as it respects the mentioned order constraints.","solution":"def generate_matrix(n, m): Generates a matrix with n rows and m columns. Each row is in ascending order from left to right. Each column is in ascending order from top to bottom. matrix = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): matrix[i][j] = i + j + 1 return matrix"},{"question":"Write a function that simulates a simplified version of a word search puzzle. Given a dictionary of words and a grid of characters, the function should return all the words from the dictionary that can be formed by tracing along a path in the grid. The path can move horizontally, vertically, or diagonally, and each cell can only be used once per word. # Input: 1. `words` - a list of strings representing the dictionary of words. 2. `grid` - a 2D list of characters representing the grid. # Output: A list of strings representing all the words from the dictionary that can be formed in the grid. # Example: ```python words = [\\"CAT\\", \\"DOG\\", \\"COW\\"] grid = [ [\'C\', \'A\', \'T\'], [\'D\', \'O\', \'G\'], [\'C\', \'A\', \'T\'] ] ``` # Function call: ```python word_search(words, grid) ``` # Expected output: ``` [\'CAT\', \'DOG\'] ``` # Notes: - Words can be traced in all 8 possible directions: horizontally left-to-right, horizontally right-to-left, vertically top-to-bottom, vertically bottom-to-top, and the four diagonals. - Cells in the grid can only be used once per word. - The output list should not contain duplicate words, even if they appear multiple times in the grid.","solution":"def word_search(words, grid): Returns all the words from the given dictionary that can be formed in the grid. def is_valid(x, y): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) def search_word(word, index, x, y, visited): if index == len(word): return True if not is_valid(x, y) or (x, y) in visited or grid[x][y] != word[index]: return False visited.add((x, y)) for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]: if search_word(word, index + 1, x + dx, y + dy, visited): return True visited.remove((x, y)) return False found_words = set() for word in words: for i in range(len(grid)): for j in range(len(grid[0])): if search_word(word, 0, i, j, set()): found_words.add(word) return list(found_words)"},{"question":"A certain robotics company has scripted a movement plan for its robots in an infinite 2D grid. Each robot starts at the origin (0,0) and follows a sequence of moves. The sequence consists of \'U\', \'D\', \'L\', and \'R\' which represent movements up, down, left, and right respectively by one unit. However, the company has noted that some sequences cause their robots to move in a loop, often returning to the origin. They want a program that can check if a given sequence of movements results in the robot returning to the origin after completing the sequence. Write a function to determine if a robot returns to the origin after a given movement sequence. ------ Input Format ------ - First line contains T, the number of test cases. - Each of the next T lines contain a single string S, which is the sequence of movements. ------ Output Format ------ For each test case, output \\"YES\\" if the sequence brings the robot back to the origin, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^{5} S consists of only characters \'U\', \'D\', \'L\', \'R\'. The sum of lengths of all sequences over all test cases does not exceed 10^{6}. ------ Sample Input 1 ------ 3 UD LLRR UUDDLL ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Test case 1: The robot moves up once and moves down once, ending back at the origin. Test case 2: The robot moves left twice and right twice, returning to the origin. Test case 3: The robot moves up twice, down twice, left twice - this does not bring it to the origin.","solution":"def does_return_to_origin(sequence): Returns \'YES\' if the robot returns to the origin after the sequence, otherwise \'NO\'. x, y = 0, 0 for move in sequence: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return \'YES\' if (x == 0 and y == 0) else \'NO\' def process_test_cases(test_cases): Processes a list of movement sequences and returns the results for each sequence. return [does_return_to_origin(sequence) for sequence in test_cases]"},{"question":"In a research laboratory, a scientist is working on a project where she needs to monitor the health of various plants over a period of days. She records the height of each plant every day, resulting in a list of measurements for each plant. The scientist wants to ensure that every plant is growing consistently, where \\"consistent growth\\" means the height of a plant does not decrease on any day compared to the previous day. You need to help the scientist by writing a program that will analyze the list of measurements for each plant and determine if each plant exhibits consistent growth. Each plant has a different number of measurements. Input The first line of input contains an integer t (1 ≤ t ≤ 100) — the number of plants. Each of the next t lines contains space-separated integers: the first integer k (1 ≤ k ≤ 100) is the number of measurements for the plant, followed by k integers representing the height measurements of the plant in chronological order. Output For each plant, output \\"YES\\" if the plant exhibits consistent growth and \\"NO\\" otherwise. Example Input 3 4 2 3 3 5 3 5 4 6 5 1 2 2 2 3 Output YES NO YES","solution":"def check_consistent_growth(t, plant_measurements): results = [] for plant in plant_measurements: k = plant[0] # first integer is the number of measurements heights = plant[1:] # rest are the height measurements consistent = True for i in range(1, k): if heights[i] < heights[i - 1]: consistent = False break if consistent: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an integer array `arr` of size `n`. Your task is to find the maximum possible sum of a contiguous subarray with the constraint that you are allowed to remove at most one element from the subarray. Given the array `arr`, determine the maximum subarray sum that can be obtained by removing at most one element. -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 100,000), the size of the array. The second line contains `n` integers `arr[i]` (-10^4 ≤ arr[i] ≤ 10^4), the elements of the array. -----Output----- Print a single integer, the maximum possible sum of a contiguous subarray when you are allowed to remove at most one element. -----Examples----- Input 5 1 -2 0 3 2 Output 6 Input 3 -1 -1 -1 Output -1","solution":"def max_subarray_sum_with_one_removal(arr): n = len(arr) if n == 0: return 0 if n == 1: return arr[0] max_ending_here = [0] * n max_starting_here = [0] * n # Calculate maximum subarray sum ending at every index max_ending_here[0] = arr[0] for i in range(1, n): max_ending_here[i] = max(arr[i], max_ending_here[i - 1] + arr[i]) # Calculate maximum subarray sum starting at every index max_starting_here[-1] = arr[-1] for i in range(n - 2, -1, -1): max_starting_here[i] = max(arr[i], max_starting_here[i + 1] + arr[i]) # Now, calculate the max possible sum without removing any element max_sum = max(max_ending_here) # Calculate max possible sum with removing one element for i in range(1, n - 1): max_sum = max(max_sum, max_ending_here[i - 1] + max_starting_here[i + 1]) return max_sum"},{"question":"Professor X gives you a string S of length N consisting solely of characters \'A\' and \'B\'. You are allowed to perform at most K operations. In each operation, you can change any character \'A\' to \'B\' or vice versa. Your task is to determine the maximum length of a contiguous substring containing the same character that you can achieve after performing at most K operations. ------ Input Format ------ - First line contains T, the number of test cases. - Each test case consists of two lines. The first line contains two integers N and K. The second line contains the string S. ------ Output Format ------ For each test case, output the maximum length of the contiguous substring containing the same character after performing at most K operations. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 0 ≤ K ≤ N ----- Sample Input 1 ------ 3 5 1 AABAB 4 2 BBAB 6 0 ABABAB ----- Sample Output 1 ------ 4 4 1 ----- Explanation 1 ------ Test Case 1: Changing the second \'A\' to \'B\' will give \\"ABBBB\\", resulting in a maximum length substring of 4 \'B\'s. Test Case 2: Changing the first \'B\' to \'A\' and the third \'B\' to \'A\' will give \\"AAAB\\", resulting in a maximum length substring of 3 \'A\'s. Alternatively, changing the \'A\' to \'B\' will give \\"BBBB\\", resulting in a maximum length substring of 4 \'B\'s. Test Case 3: No changes can be made, so the maximum contiguous substring of the same character is of length 1.","solution":"def max_length_substring(n, k, s): def max_length_with_replacements(char): left = 0 max_length = 0 count_replacements = 0 for right in range(n): if s[right] != char: count_replacements += 1 while count_replacements > k: if s[left] != char: count_replacements -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length return max(max_length_with_replacements(\'A\'), max_length_with_replacements(\'B\')) def solve(test_cases): results = [] for n, k, s in test_cases: results.append(max_length_substring(n, k, s)) return results"},{"question":"# Task **_Given_** a *string*, *find the length of the longest substring without repeating characters*. ___ # Notes: * The input string will contain only English letters. * The substring characters are case sensitive, hence \'a\' and \'A\' are considered different characters. * An empty string will return 0 as the length. ___ # Input >> Output Examples Input: \\"abcabcbb\\" >> Output: 3 * **_Explanation_**: The answer is \\"abc\\", with the length of 3. Input: \\"bbbbb\\" >> Output: 1 * **_Explanation_**: The answer is \\"b\\", with the length of 1. Input: \\"pwwkew\\" >> Output: 3 * **_Explanation_**: The answer is \\"wke\\", with the length of 3. * *Note* that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Input: \\"\\" >> Output: 0 * **_Explanation_**: An empty string has no substrings, so the length is 0. ___ ALL translations are welcomed Enjoy Learning !!","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. :param s: Input string :return: Length of the longest substring without repeating characters char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"James loves watching movies and he has a particular interest in tracking the duration of each film he watches. He maintains a record of the start and end times for each movie and computes the duration. Given the start and end times, help James calculate the duration of each movie in minutes. Note that all times are given in 24-hour format. ------ Input Format ------ - The first line will contain T, the number of movies. Then the test cases follow. - Each test case contains two strings: the start time and the end time of a movie, in the format \\"HH:MM\\". ------ Output Format ------ For each test case, output the duration of the movie in minutes. ------ Constraints ------ 1 ≤ T ≤ 100 The start and end times are in the format \\"HH:MM\\" and represent valid times in a 24-hour cycle. ----- Sample Input 1 ------ 3 12:30 14:00 23:45 01:15 09:10 09:15 ----- Sample Output 1 ------ 90 90 5 ----- Explanation 1 ------ Test case-1: The time interval between 12:30 and 14:00 is 90 minutes. Test case-2: The time interval between 23:45 and 01:15 spans across midnight, totaling 90 minutes. Test case-3: The time interval between 09:10 and 09:15 is 5 minutes.","solution":"def calculate_duration(start, end): Given start and end times in \\"HH:MM\\" format, calculates the duration in minutes. def to_minutes(time): hours, minutes = map(int, time.split(\':\')) return hours * 60 + minutes start_minutes = to_minutes(start) end_minutes = to_minutes(end) if end_minutes >= start_minutes: return end_minutes - start_minutes else: # If end time is on the next day return (24 * 60 - start_minutes) + end_minutes def movie_durations(times): Given a list of start and end times, returns a list of durations in minutes. durations = [] for start, end in times: durations.append(calculate_duration(start, end)) return durations"},{"question":"Two villagers, John and Jane, want to build a fence to protect their village\'s farm from wild animals. They have a total of N wooden poles where each pole has varying lengths. They would like to use these poles to create as many rectangular plots as possible for planting. Each plot requires exactly 4 poles, two for the length and two for the width, and both sides should have poles of the same length. Your task is to determine the maximum number of rectangular plots they can create using the given wooden poles. Input and Output The first line of the input contains the number of test cases T. Each test case consists of two lines. The first line of each test case has one integer N representing the number of wooden poles. The second line contains N space-separated integers denoting the lengths of the wooden poles. For each test case, print a single integer, the maximum number of rectangular plots that can be created. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ Length of a pole ≤ 1000 SAMPLE INPUT 2 8 1 2 2 1 2 2 1 1 7 4 4 4 4 4 5 5 SAMPLE OUTPUT 2 1 Explanation In the first test case, the poles can form two rectangular plots of size 1x2, and 1x2. In the second test case, only one rectangular plot can be formed using four poles of length 4. The remaining poles can\'t form another matching rectangle.","solution":"from collections import Counter def max_rectangular_plots(test_cases): results = [] for poles in test_cases: counter = Counter(poles) pairs = 0 for length, count in counter.items(): pairs += count // 2 results.append(pairs // 2) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) poles = list(map(int, lines[index + 1].split())) test_cases.append(poles) index += 2 return T, test_cases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"Problem You are given a list of integers and a target value. Your task is to determine if there exists a pair of numbers in the list that sum up to the target value. If such a pair exists, return the indices of the two numbers. Additionally, if multiple pairs exist, return the pair with the smallest index for the first number. Assume that each input would have exactly one solution, and you may not use the same element twice. # Constraints - The list consists of distinct integers. - The list size is between 2 and 10^4. - Each number in the list is between -10^9 and 10^9. - The target value is between -10^9 and 10^9. # Input Format The input is given in the following format: 1. The first line contains an integer n, the size of the list. 2. The second line contains n integers, the elements of the list. 3. The third line contains a single integer, the target value. # Output Format Output the indices of the two numbers in a single line, separated by a space, such that their sum equals the target value. # Examples Input 5 2 7 11 15 1 9 Output 0 1 Input 3 3 2 4 6 Output 1 2 # Explanation In the first example, the pair of numbers 2 and 7 add up to the target value 9. Their indices are 0 and 1. In the second example, the pair of numbers 2 and 4 add up to the target value 6. Their indices are 1 and 2.","solution":"def find_two_sum_indices(numbers, target): Find two indices of numbers in the list such that their sum is equal to the target value. Assumes exactly one solution exists and each element is used only once. Args: numbers (list of int): The list of numbers. target (int): The target sum value. Returns: tuple of int: A tuple containing indices of the two numbers. number_to_index = {} for i, num in enumerate(numbers): complement = target - num if complement in number_to_index: return (number_to_index[complement], i) number_to_index[num] = i return None # Should not reach here as per problem statement"},{"question":"You are given a grid of size n x n filled with non-negative integers. Your task is to determine if there exists a path from the top-left corner of the grid to the bottom-right corner such that the sum of the numbers along the path is less than or equal to a given sum k. You can only move to the right or down from a cell, and you must visit each cell at most once. Input The first line contains an integer n (1 ≤ n ≤ 100) — the size of the grid. The second line contains an integer k (0 ≤ k ≤ 10^9) — the maximum allowed sum of the path. The next n lines contain n integers each — the grid elements where the j-th integer in the i-th line is the value at the cell (i, j) (0 ≤ grid[i][j] ≤ 10^4). Output If a path exists, print \\"YES\\". Otherwise, print \\"NO\\". Example Input 3 15 5 9 1 6 7 11 8 2 3 Output YES Input 3 10 5 9 1 6 7 11 8 2 3 Output NO Explanation In the first example, one possible path from the top-left to the bottom-right that satisfies the condition is 5 → 6 → 7 → 2 → 3 with a sum of 5+6+7+2+3 = 23, which doesn\'t satisfy the condition. Alternately, the path 5 → 9 → 1 → 11 → 3 has a sum of 5+9+1+11+3 = 29, which also doesn\'t satisfy. However, another path 5 → 6 → 8 → 3 has a sum of 5+6+8+3 = 22, which is less than or equal to 15, so the answer is \\"YES\\". In the second example, the path sums for the possible paths exceed 10, so the answer is \\"NO\\".","solution":"def can_reach_within_sum(n, k, grid): def path_exists(x, y, current_sum): if x == n - 1 and y == n - 1: return current_sum <= k if current_sum > k: return False right = down = False if x + 1 < n: # Move down down = path_exists(x + 1, y, current_sum + grid[x + 1][y]) if y + 1 < n: # Move right right = path_exists(y + 1, x, current_sum + grid[x][y + 1]) return down or right return \\"YES\\" if path_exists(0, 0, grid[0][0]) else \\"NO\\""},{"question":"A company wants to optimize their inventory by finding the most common product subsequence in their sales logs. You are given a string S representing sold products in the order they were sold. Each product is represented by a single lowercase letter. Write a program to find the most common repeated non-overlapping subsequence of length exactly three characters that appears in the string S. If multiple such subsequences are found, return the lexicographically smallest one. If no such subsequence exists, return \\"NONE\\". # Input - The input consists of a single string S. # Output - Print the most common repeated non-overlapping subsequence of length three. - If there are multiple such subsequences, print the lexicographically smallest one. - If no such subsequence exists, print “NONE”. # Constraints - 3 leq |S| leq 10^5 # Sample Input 1 `abacabadabacaba` # Sample Output 1 `aba` # Explanation 1 The subsequences of length three extracted from the string are: `aba`, `bac`, `aca`, `cab`, `aba`. The subsequence `aba` appears thrice. Hence it is the most common. There are no other subsequences of length three with the same frequency. # Sample Input 2 `abcabcabc` # Sample Output 2 `abc` # Explanation 2 The subsequences of length three extracted from the string are: `abc`, `bca`, `cab`, `abc`, `bca`, `cab`. The subsequences `abc`, `bca`, and `cab` each appear twice. Since there are multiple with the same frequency, the lexicographically smallest one `abc` is chosen. # Sample Input 3 `abcdefgh` # Sample Output 3 `NONE` # Explanation 3 All subsequences of length three are unique and appear only once, hence no repeated subsequence exists.","solution":"def most_common_subsequence(S): from collections import defaultdict subseq_freq = defaultdict(int) n = len(S) # Generate all subsequences of length 3 for i in range(n - 2): subseq = S[i:i+3] subseq_freq[subseq] += 1 # Filter the subsequences that appear more than once repeated_subseqs = {subseq: count for subseq, count in subseq_freq.items() if count > 1} if not repeated_subseqs: return \\"NONE\\" # Find the most common and lexicographically smallest subsequence max_freq = max(repeated_subseqs.values()) most_common = [subseq for subseq, count in repeated_subseqs.items() if count == max_freq] return min(most_common) # Example usage: # print(most_common_subsequence(\\"abacabadabacaba\\")) # Output: \\"aba\\""},{"question":"Chef is planning to host a dinner party for his friends. He wants to prepare a variety of dishes that will maximize the satisfaction of his guests. Each dish has a certain satisfaction value and takes a specific amount of time to prepare. Chef has a total of T units of time to prepare the dishes and wants to make the best use of the available time. Each dish i has a satisfaction value S_i and takes P_i units of time to prepare. Chef can prepare multiple dishes, but the total preparation time should not exceed T. Help Chef select the dishes to maximize the total satisfaction value. ------ Input: ------ First line will contain two integers, N and T Next N lines contain two integers each, S_i and P_i ------ Output: ------ Output the maximum total satisfaction value that can be achieved without exceeding the total preparation time. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ T ≤ 1000 1 ≤ S_i ≤ 100 1 ≤ P_i ≤ 100 ------ Sample Input: ------ 4 5 10 2 20 2 30 3 40 4 ------ Sample Output: ------ 50 ------ Explanation: ------ Chef can prepare the first and second dishes to get a total satisfaction of 10 + 20 = 30, and still have enough time (1 unit) to prepare the third dish, resulting in a total satisfaction of 30 + 30 = 60. So the maximum satisfaction value can be achieved is 50.","solution":"def max_satisfaction(N, T, dishes): dp = [0] * (T + 1) for i in range(N): satisfaction, time = dishes[i] for t in range(T, time - 1, -1): dp[t] = max(dp[t], dp[t - time] + satisfaction) return dp[T] # Input reading function for simplicity def read_input(input_str): lines = input_str.strip().split(\'n\') N, T = map(int, lines[0].split()) dishes = [tuple(map(int, line.split())) for line in lines[1:]] return N, T, dishes # To handle the actual input in contests # def main(): # import sys # input = sys.stdin.read # N, T, dishes = read_input(input()) # print(max_satisfaction(N, T, dishes)) # if __name__ == \\"__main__\\": # main()"},{"question":"Scientists have found a rare gemstone that emits a unique energy pattern measurable in a matrix form. Security parameters dictate that the total energy emitted from the leftmost column to the rightmost column should be minimized while passing through each row exactly once. You are tasked to determine the minimum energy path through the matrix. Given a matrix of integers where each integer represents the energy emitted from that cell, find the path from any cell in the leftmost column to any cell in the rightmost column that has the minimum possible energy emission. 1st line -- No. of Test cases T ( 1 <= T <= 100). 2nd line -- M and N denoting no. of rows and columns in the matrix. M lines -- Each line has N integers denoting the energy emitted from that cell. You can move from any cell to the next column\'s top, bottom, or middle adjacent cell (i.e., transition is only allowed to (i+1, j+1), (i, j+1), or (i-1, j+1) if the indices are within bounds). Print the minimum energy required to go from any cell in the leftmost column to any cell in the rightmost column. Input constraints 1 ≤ T ≤ 100 1 ≤ M ≤ 100 1 ≤ N ≤ 100 Energy values will be between -1000 and 1000 inclusive. SAMPLE INPUT 1 3 4 2 8 4 1 6 3 7 2 5 9 4 8 SAMPLE OUTPUT 10","solution":"def min_energy_path(T, test_cases): results = [] for t in range(T): M, N, matrix = test_cases[t] dp = [[float(\'inf\')] * N for _ in range(M)] # Initialize the first column with the respective cell values for i in range(M): dp[i][0] = matrix[i][0] # Fill the dp table by considering possible transitions for j in range(1, N): for i in range(M): # From the same row dp[i][j] = min(dp[i][j], dp[i][j-1] + matrix[i][j]) # From the upper row if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j-1] + matrix[i][j]) # From the lower row if i < M - 1: dp[i][j] = min(dp[i][j], dp[i+1][j-1] + matrix[i][j]) # The result is the minimum value in the last column min_energy = float(\'inf\') for i in range(M): min_energy = min(min_energy, dp[i][N-1]) results.append(min_energy) return results"},{"question":"A group of students is planning to form teams to participate in a quiz competition. Each team needs exactly K members to be considered a valid team. Also, the cost to register one team is Y dollars. Given the number of students M and the cost to register one team, determine the minimum total cost required for registering the maximum number of complete teams such that no student is left without a team. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first and only line of each test case contains three integers M, K, and Y — the number of students, the number of members needed for a team, and the cost to register one team. ------ Output Format ------ For each test case, output the minimum total cost required to register the maximum number of complete teams such that no student is left alone. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ M ≤ 100 1 ≤ K ≤ 100 1 ≤ Y ≤ 1000 ----- Sample Input 1 ------ 3 5 3 200 15 4 150 7 2 100 ----- Sample Output 1 ------ 200 600 300 ----- Explanation 1 ------ - Test case 1: There are 5 students and each team needs 3 students. We can form one complete team with 3 students, and 2 students will be left. To avoid any student being left alone, we need to form at least 2 teams with 3 members each by borrowing 1 student from outside, leading to 1 complete team registration costing 200. - Test case 2: There are 15 students and each team needs 4 students. We can form 3 complete teams with 4 students each, but 3 students will be left. To avoid any student being left alone, we need to for 4 complete teams by borrowing 1 student from outside, leading to 4 team registrations costing 600. - Test case 3: There are 7 students and each team needs 2 students. We can form 3 complete teams with 2 students each and 1 student will be left. To avoid any student being left alone, we need to form 4 complete teams by borrowing 1 student from outside, leading to 3 team registrations costing 300.","solution":"def minimum_total_cost(T, test_cases): results = [] for case in test_cases: M, K, Y = case teams_needed = (M + K - 1) // K # Minimum number of teams needed to accommodate all students results.append(teams_needed * Y) return results # Example of reading input # T = int(input()) # test_cases = [tuple(map(int, input().split())) for _ in range(T)] # results = minimum_total_cost(T, test_cases) # for result in results: # print(result)"},{"question":"Given an integer `n`, write a function to generate the following series and return it as a list: 0, -1, 2, -3, 4, -5, 6, -7, 8, -9, ... The pattern continues with the series starting at 0 and alternating between positive and negative integers, incrementing the absolute value by 1 each time. **Function signature:** ```python def generate_series(n: int) -> List[int]: ``` **Input:** - `n` (1 <= n <= 100): an integer specifying the length of the series **Output:** - A list of n integers representing the series **Examples:** ``` generate_series(5) -> [0, -1, 2, -3, 4] generate_series(10) -> [0, -1, 2, -3, 4, -5, 6, -7, 8, -9] generate_series(1) -> [0] ``` **Note:** - Ensure the function handles edge cases such as the minimum input value properly. - Optimize the solution for performance, but remember n will not exceed 100.","solution":"from typing import List def generate_series(n: int) -> List[int]: Generate a list of integers following the pattern: 0, -1, 2, -3, 4, -5, 6, -7, 8, -9, ... Args: n (int): number of terms to generate Returns: List[int]: list of n integers following the series pattern. return [(i if i % 2 == 0 else -i) for i in range(n)]"},{"question":"Given a binary tree, each node contains a value. Additionally, each node can have at most three children nodes (left, middle, and right). Write a function that converts this binary tree into a Circular Doubly Linked List from top to bottom and left to right in the tree, maintaining the order. After the conversion, the nodes of the Circular Doubly Linked List should be in the same order as they were in the level order traversal of the tree. Example 1: Input: 10 / | 12 15 20 / | / 25 30 36 40 Output: 10 <-> 12 <-> 15 <-> 20 <-> 25 <-> 30 <-> 36 <-> 40 <-> 10 Explanation: Nodes in level order: 10 -> 12 -> 15 -> 20 -> 25 -> 30 -> 36 -> 40 are converted into a circular doubly linked list. Example 2: Input: 1 / 2 3 / 4 Output: 1 <-> 2 <-> 3 <-> 4 <-> 1 Explanation: Nodes in level order: 1 -> 2 -> 3 -> 4 are converted into a circular doubly linked list. Your Task: You do not need to read input or print anything. Complete the function `convertToCircularDLL()` that takes the root of the binary tree as input parameter and returns the head of the Circular Doubly Linked List. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 0 <= Number of nodes <= 1000 1 <= Value of nodes <= 10^4","solution":"class Node: def __init__(self, value=0, left=None, middle=None, right=None): self.value = value self.left = left self.middle = middle self.right = right self.next = None self.prev = None def convertToCircularDLL(root): if not root: return None from collections import deque queue = deque([root]) head = None tail = None while queue: current = queue.popleft() dll_node = Node(current.value) if not head: head = dll_node tail = dll_node head.next = head head.prev = head else: tail.next = dll_node dll_node.prev = tail dll_node.next = head head.prev = dll_node tail = dll_node if current.left: queue.append(current.left) if current.middle: queue.append(current.middle) if current.right: queue.append(current.right) return head"},{"question":"# Story You are working with a system where each task has a unique identifier and is dependent on other tasks to be completed before it can be started. Dependency information of tasks is given as a list of pairs, where the first element of the pair depends on the second element. # Info Given a list of tasks and their dependencies, write a function to return an order in which all tasks can be completed. If there is no way to complete all the tasks due to a circular dependency, the function should return an empty list. # Examples ```python tasks = [\\"a\\", \\"b\\", \\"c\\", \\"d\\"] dependencies = [(\\"a\\", \\"b\\"), (\\"c\\", \\"b\\"), (\\"b\\", \\"d\\")] task_order(tasks, dependencies) # Should return [\'d\', \'b\', \'a\', \'c\'] or [\'d\', \'b\', \'c\', \'a\'] tasks = [\\"a\\", \\"b\\", \\"c\\", \\"d\\"] dependencies = [(\\"a\\", \\"b\\"), (\\"b\\", \\"c\\"), (\\"c\\", \\"a\\")] task_order(tasks, dependencies) # Should return [] ``` ***`Input: A list of tasks as strings and a list of dependencies as tuples of two strings.`*** ***`Output: A list of tasks in an order to be completed or an empty list if no valid order exists.`*** ***`Precondition: tasks is a list of unique strings. dependencies is a list of pairs of strings (task, dependency task). Both tasks and their dependencies strings are non-empty.`*** ```python task_order([\\"a\\", \\"b\\", \\"c\\", \\"d\\"], [(\\"a\\", \\"b\\"), (\\"c\\", \\"b\\"), (\\"b\\", \\"d\\")]) == [\'d\', \'b\', \'a\', \'c\'] or [\'d\', \'b\', \'c\', \'a\'] task_order([\\"a\\", \\"b\\", \\"c\\", \\"d\\"], [(\\"a\\", \\"b\\"), (\\"b\\", \\"c\\"), (\\"c\\", \\"a\\")]) == [] task_order([\\"a\\"], []) == [\\"a\\"] ```","solution":"from collections import defaultdict, deque def task_order(tasks, dependencies): Returns an order in which all tasks can be completed, respecting dependencies. If no such order exists, returns an empty list. # Build the graph and a map to count incoming edges (indegree) graph = defaultdict(list) indegree = {task: 0 for task in tasks} for task, dep in dependencies: graph[dep].append(task) indegree[task] += 1 # Initialize deque for tasks with no dependencies queue = deque([task for task in tasks if indegree[task] == 0]) result = [] while queue: task = queue.popleft() result.append(task) for neighbor in graph[task]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If result has fewer tasks than the input list, return as not possible if len(result) == len(tasks): return result else: return []"},{"question":"Write a program that simulates the traversal of a knight in a chessboard and finds the minimum number of moves required to reach from a starting position to a target position. The knight moves in an \\"L\\" shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Input: - The first line contains an integer T (1 ≤ T ≤ 100), denoting the number of test cases. - For each test case, a line containing four integers x1, y1, x2, y2 will be provided. (1 ≤ x1, y1, x2, y2 ≤ 8) representing the starting position (x1, y1) and the target position (x2, y2). Output: - For each test case, output the minimum number of moves a knight needs to reach the target position from the starting position. Example: Input: 3 1 1 8 8 1 1 2 2 3 3 4 3 Output: 6 4 3","solution":"from collections import deque def is_valid(x, y, n=8): return 1 <= x <= n and 1 <= y <= n def knight_moves(start_x, start_y, target_x, target_y): if (start_x, start_y) == (target_x, target_y): return 0 directions = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] queue = deque([(start_x, start_y, 0)]) visited = set((start_x, start_y)) while queue: x, y, moves = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if (nx, ny) == (target_x, target_y): return moves + 1 if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1 def solve_knight_moves(test_cases): results = [] for x1, y1, x2, y2 in test_cases: results.append(knight_moves(x1, y1, x2, y2)) return results # Example input processing def main(): input_data = \'\'\'3 1 1 8 8 1 1 2 2 3 3 4 3\'\'\' lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [tuple(map(int, line.split())) for line in lines[1:T+1]] results = solve_knight_moves(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"In a small village, there is a tradition of weaving colorful baskets using strips of dyed bamboo. The village chief wishes to display an interesting pattern using baskets of distinct colors. Each basket is created using a combination of colored strips. However, the chief wants to ensure that no two adjacent baskets contain the same predominant color strip. The villagers divide the bamboo strips into different groups based on their dominant color. Each group contains an equal number of strips of that color. Your task is to help the villagers and the chief by determining whether it is possible to arrange the bamboo strips into baskets such that no two adjacent baskets share the same predominant color. Each dataset consists of a single line with an integer `n` followed by `n` integers representing the count of strips for each color group. The result should indicate whether the desired arrangement is possible. input The input consists of multiple datasets. For each dataset: - The first value is an integer `n` (2 ≤ n ≤ 100), representing the number of different color groups. - The next `n` values are integers `c1, c2, ..., cn` (1 ≤ ci ≤ 1000), representing the count of strips in each group. The end of the input is indicated by a single dataset starting with `0`. output For each dataset, output a single line with the result \\"Yes\\" if it is possible to arrange the baskets as described, otherwise output \\"No\\". Example Input 3 3 3 3 4 7 3 5 2 2 1 100 0 Output Yes Yes No","solution":"def can_arrange_baskets(datasets): results = [] for data in datasets: n = data[0] if n == 0: break strips = data[1:] total = sum(strips) max_count = max(strips) if max_count <= (total + 1) // 2: results.append(\\"Yes\\") else: results.append(\\"No\\") return results def process_input(input_data): lines = input_data.strip().split(\'n\') datasets = [] for line in lines: datasets.append(list(map(int, line.split()))) return datasets"},{"question":"Given a string s consisting of lowercase English letters, rearrange it into a string where no two adjacent characters are the same. If such a rearrangement is not possible, output \\"Impossible\\". Input Each dataset contains a single string s (1 ≤ |s| ≤ 10^5). Output Output the rearranged string if possible, otherwise output \\"Impossible\\". Example Input aab aaab Output aba Impossible","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string s so that no two adjacent characters are the same. If not possible, returns \\"Impossible\\". # Count frequency of each character freq = Counter(s) # Max heap based on character frequency max_heap = [(-value, key) for key, value in freq.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] # Process the heap while max_heap or prev_count < 0: if not max_heap: return \\"Impossible\\" count, char = heapq.heappop(max_heap) # Append current character result.append(char) # If there was a previous character to re-insert, do it if prev_char and prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update previous character prev_char = char prev_count = count + 1 # Increase the negative value towards 0 return \\"\\".join(result)"},{"question":"Given an array of positive integers and a number K, the task is to check if there is any continuous subarray whose elements sum up to K. Example 1: Input: arr = [1, 3, 5, 23, 2], K = 8 Output: 1 Explanation: There is a subarray [3, 5] whose sum is 8. Example 2: Input: arr = [1, 3, 5, 23, 2], K = 7 Output: 0 Explanation: There is no subarray whose sum is 7. Your Task: You don\'t need to read input or print anything. Your task is to complete the function checkSubarraySum() which takes the array and number K as input and returns 1 if there is a subarray with sum equal to K, otherwise 0. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 10^4 1 ≤ arr[i] ≤ 10^5 1 ≤ K ≤ 10^9","solution":"def checkSubarraySum(arr, K): Checks if there is any continuous subarray whose elements sum up to K. cum_sum = 0 cum_sum_set = set() for num in arr: cum_sum += num if cum_sum == K: return 1 if (cum_sum - K) in cum_sum_set: return 1 cum_sum_set.add(cum_sum) return 0"},{"question":"# Problem Statement You are given a string of lowercase alphabets and you must generate all possible permutations of the characters in the string. However, due to the constraints provided, you should only collect permutations that are lexicographically greater than the original string. For example, if the input string is \\"abc\\", the unique permutations of this string are [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"]. From these, \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\" are lexicographically greater than \\"abc\\". # Task Write a function `lexicographically_greater_permutations(s)` that accepts a string `s` and returns a list of all the lexicographically greater permutations. The output list should be sorted lexicographically in ascending order. # Input - `s` - a string of lowercase alphabets (1 ≤ |s| ≤ 6). # Output - A list of strings containing lexicographically greater permutations sorted in ascending order. # Example ```python lexicographically_greater_permutations(\\"abc\\") # Output: [\'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] lexicographically_greater_permutations(\\"aac\\") # Output: [\'aca\', \'caa\'] lexicographically_greater_permutations(\\"bb\\") # Output: [] ``` # Constraints - The input string will contain only lowercase English letters. - The length of the input string will not exceed 6 characters. # Solution Approach 1. **Generate Permutations**: Use an appropriate library to generate all unique permutations of the string. 2. **Filter and Sort**: Filter permutations to retain those that are lexicographically greater than the original string and then sort them. 3. **Return Result**: Return the sorted list as the output. # Example Implementation ```python from itertools import permutations def lexicographically_greater_permutations(s): # Generate unique permutations perms = {\'\'.join(p) for p in permutations(s)} # Filter permutations greater_perms = sorted(p for p in perms if p > s) return greater_perms ``` Explanation: - Generate all possible permutations of the input string using `itertools.permutations` and store them in a set to avoid duplicates. - Filter out permutations that are lexicographically greater than the original input string. - Sort the resulting list of permutations and return it.","solution":"from itertools import permutations def lexicographically_greater_permutations(s): This function returns a list of all the lexicographically greater permutations than the given string. :param s: input string :return: list of lexicographically greater permutations sorted in ascending order # Generate all unique permutations perms = {\'\'.join(p) for p in permutations(s)} # Filter and sort permutations greater than the original string greater_perms = sorted(p for p in perms if p > s) return greater_perms"},{"question":"Given a list of integers, determine if there exist three numbers in the list whose sum equals a given target value. Example: Input: N = 6 arr[] = {12, 3, 4, 1, 6, 9} target = 24 Output: True Your Task: You don\'t need to read input or print anything. Your task is to complete the function find3Numbers() which takes the array arr[], its size N, and an integer target as inputs and returns a boolean indicating whether there are three integers in the array that sum up to the target value. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^3 -10^3 <= arr[i] <= 10^3 -10^3 <= target <= 10^3","solution":"def find3Numbers(arr, N, target): Determines if there are three integers in the array that sum to the target value. Parameters: arr (list): List of integers N (int): Size of the array target (int): The target sum Returns: bool: True if there exist three numbers whose sum equals the target, False otherwise arr.sort() for i in range(N - 2): left = i + 1 right = N - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Given an array of integers, determine if you can partition the array into two subsets such that the sum of the elements in both subsets is the same. Write a function `canPartition(nums)` that takes an array of integers `nums` and returns `true` if it can be partitioned into two subsets with equal sum, and `false` otherwise. # Example ```python canPartition([1, 5, 11, 5]) # should return True, as the array can be partitioned into [1, 5, 5] and [11] canPartition([1, 2, 3, 5]) # should return False, as the array cannot be partitioned into equal sum subsets ``` # Constraints - The length of `nums` will be in the range [1, 200]. - Each element `nums[i]` will be a non-negative integer and will not exceed 100. # Notes - You are expected to use a dynamic programming approach to solve this problem efficiently. - Consider edge cases such as when the array has only one element or when it contains elements that are all the same.","solution":"def canPartition(nums): Determines whether the array nums can be partitioned into two subsets with an equal sum. Parameters: nums (List[int]): The list of integers Returns: bool: True if the array can be partitioned into two subsets with equal sum, False otherwise total_sum = sum(nums) # If total_sum is odd, it can\'t be split into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"Task ======= Implement a function `has_redundant_parentheses` that takes a string expression containing a mathematical expression with parentheses and checks if it contains any redundant parentheses. Redundant parentheses are parentheses that do not change the meaning of the expression but are included anyway. The function should return `True` if there are redundant parentheses, otherwise `False`. Syntax/Info ======== - The input string will contain only valid characters `0-9`, `+`, `-`, `*`, `/`, `(`, and `)`. - The input string will be a valid mathematical expression. - The function should ignore spacing in the input string. Examples ======== **Example 1:** ``` input: \\"(a + b)\\" output: False ``` **Example 2:** ``` input: \\"((a + b))\\" output: True ``` **Example 3:** ``` input: \\"(a + (b - c))\\" output: False ``` **Example 4:** ``` input: \\"(a + (b))\\" output: True ```","solution":"def has_redundant_parentheses(expression): Checks if the given mathematical expression has redundant parentheses. stack = [] operators = set([\'+\', \'-\', \'*\', \'/\']) for char in expression: if char == \')\': top = stack.pop() elements_inside = False while stack and top != \'(\': if top in operators: elements_inside = True top = stack.pop() if not elements_inside: return True else: stack.append(char) return False"},{"question":"A bookstore needs to implement a system to manage their inventory of books. Each book has a unique identifier, a title, an author, a price, and a quantity in stock. The bookstore owner wants to be able to perform the following operations: 1. Add a new book to the inventory. 2. Update the details of an existing book. 3. Remove a book from the inventory. 4. List all the books with their details. You are required to implement this system. Write a program that reads a list of operations from the standard input and executes them. The operations are given in JSON format. The program should print the result of each operation. Each operation is described by a JSON object with the following format: - Operation `add_book`: ```json {\\"operation\\": \\"add_book\\", \\"id\\": \\"<id>\\", \\"title\\": \\"<title>\\", \\"author\\": \\"<author>\\", \\"price\\": <price>, \\"quantity\\": <quantity>} ``` This operation adds a new book to the inventory. If a book with the same id already exists, ignore this operation. - Operation `update_book`: ```json {\\"operation\\": \\"update_book\\", \\"id\\": \\"<id>\\", \\"title\\": \\"<title>\\", \\"author\\": \\"<author>\\", \\"price\\": <price>, \\"quantity\\": <quantity>} ``` This operation updates the details of an existing book. If no book with the specified id exists, ignore this operation. - Operation `remove_book`: ```json {\\"operation\\": \\"remove_book\\", \\"id\\": \\"<id>\\"} ``` This operation removes a book from the inventory. If no book with the specified id exists, ignore this operation. - Operation `list_books`: ```json {\\"operation\\": \\"list_books\\"} ``` This operation lists all the books in the inventory. Each book should be printed in the following format: ``` id: <id>, Title: <title>, Author: <author>, Price: <price>, Quantity: <quantity> ``` Input Format A JSON array of operations. Each operation is a JSON object as described above. Output Format The output for each list_books operation should be printed in order of their invocation. If there are no books in the inventory, it should print \\"No books available\\". Each book should be printed on a new line. Constraints - The id of a book is a unique string of alphanumeric characters. - The title and author are non-empty strings. - The price is a non-negative decimal number. - The quantity is a non-negative integer. - There can be at most 100 operations. Example Input: ```json [ {\\"operation\\": \\"add_book\\", \\"id\\": \\"1\\", \\"title\\": \\"The Catcher in the Rye\\", \\"author\\": \\"J.D. Salinger\\", \\"price\\": 9.99, \\"quantity\\": 5}, {\\"operation\\": \\"add_book\\", \\"id\\": \\"2\\", \\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"price\\": 12.99, \\"quantity\\": 3}, {\\"operation\\": \\"list_books\\"}, {\\"operation\\": \\"update_book\\", \\"id\\": \\"1\\", \\"title\\": \\"The Catcher in the Rye\\", \\"author\\": \\"J.D. Salinger\\", \\"price\\": 7.99, \\"quantity\\": 10}, {\\"operation\\": \\"remove_book\\", \\"id\\": \\"2\\"}, {\\"operation\\": \\"list_books\\"} ] ``` Example Output: ``` id: 1, Title: The Catcher in the Rye, Author: J.D. Salinger, Price: 9.99, Quantity: 5 id: 2, Title: To Kill a Mockingbird, Author: Harper Lee, Price: 12.99, Quantity: 3 id: 1, Title: The Catcher in the Rye, Author: J.D. Salinger, Price: 7.99, Quantity: 10 ```","solution":"import json def manage_inventory(operations): inventory = {} def add_book(book): if book[\\"id\\"] not in inventory: inventory[book[\\"id\\"]] = book def update_book(book): if book[\\"id\\"] in inventory: inventory[book[\\"id\\"]] = book def remove_book(book_id): if book_id in inventory: del inventory[book_id] def list_books(): if not inventory: print(\\"No books available\\") else: for book in inventory.values(): print(f\'id: {book[\\"id\\"]}, Title: {book[\\"title\\"]}, Author: {book[\\"author\\"]}, Price: {book[\\"price\\"]}, Quantity: {book[\\"quantity\\"]}\') for operation in operations: if operation[\\"operation\\"] == \\"add_book\\": add_book(operation) elif operation[\\"operation\\"] == \\"update_book\\": update_book(operation) elif operation[\\"operation\\"] == \\"remove_book\\": remove_book(operation[\\"id\\"]) elif operation[\\"operation\\"] == \\"list_books\\": list_books()"},{"question":"Minimum Changes to Make a String Palindrome Given a string `s`, determine the minimum number of character replacements needed to make the string a palindrome. A palindrome is a string that reads the same backward as forward. Input - A single string `s` of length `N`. Output - An integer representing the minimum number of character replacements needed. Constraints - 1 leq N leq 10^5 - The string `s` only contains lowercase English letters (\'a\' - \'z\'). Input example ```python abca ``` Output example ```python 1 ``` Explanation: In this example, by changing the last character \'a\' to \'c\', the string becomes \'abccba\', which is a palindrome. Thus, only 1 replacement is needed.","solution":"def min_replacements_to_palindrome(s): Calculate the minimum number of character replacements needed to make the string a palindrome. Parameters: s (str): The input string. Returns: int: Minimum number of replacements needed. left, right = 0, len(s) - 1 replacements = 0 while left < right: if s[left] != s[right]: replacements += 1 left += 1 right -= 1 return replacements"},{"question":"A group of friends decides to play a card game. Each player is dealt n cards, each card having a value between 1 and m (inclusive). The goal is to determine the minimum possible sum of values that can be obtained by picking exactly k cards. You are required to write a program that calculates this minimum sum. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the number of cards each player is dealt and the number of cards to pick, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the values of the cards each player is dealt. Output Print the only line with the minimum possible sum of values that can be obtained by picking exactly k cards. Examples Input 5 3 7 2 3 8 9 Output 12 Input 4 2 10 15 10 20 Output 20 Input 6 4 4 1 3 2 7 5 Output 10","solution":"def minimum_sum(n, k, card_values): Returns the minimum possible sum of values that can be obtained by picking exactly k cards. :param n: Number of cards each player is dealt. :param k: Number of cards to pick. :param card_values: List of integers representing the values of the cards each player is dealt. :return: Minimum possible sum of values that can be obtained by picking exactly k cards. # Sort the card values in ascending order card_values.sort() # Pick the first k values (They will be the smallest values since the list is sorted) return sum(card_values[:k])"},{"question":"Write a function that receives an array of positive integers and returns the missing number(s) from the sequence. The function should find all the missing numbers and return them as an array sorted in ascending order: ``` [1, 2, 4, 6] => [3, 5] [3, 7, 1, 2, 8, 4, 5] => [6] [10, 12, 11, 14] => [13] [1, 2, 3, 4, 5] => [] ``` The input array will always contain at least one positive integer, and there will be no duplicate numbers.","solution":"def find_missing_numbers(arr): This function takes a list of positive integers and returns a list of missing numbers in the sequence, sorted in ascending order. Parameters: arr (list): A list of positive integers. Returns: list: A list of missing integer numbers, sorted in ascending order. if not arr: return [] min_num = min(arr) max_num = max(arr) full_set = set(range(min_num, max_num + 1)) arr_set = set(arr) missing_numbers = sorted(list(full_set - arr_set)) return missing_numbers"},{"question":"A developer is designing a computer game in which characters collect items in a specific sequence. Each character can carry a certain maximum weight of items, and each item has its own weight. The objective is to determine whether all characters can carry the items they need in the given order without exceeding their weight limits. To test the solution, write a program to determine if all characters can carry the items assigned to them in the specified order. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of characters. The second line contains n space-separated integers wi (1 ≤ wi ≤ 1000), the maximum weight limit each character can carry. The third line contains a positive integer m (1 ≤ m ≤ 1000), the number of items. The fourth line contains m space-separated integers ai (1 ≤ ai ≤ 100), the weights of the items in the specified order. Output Print \\"YES\\" if all characters can carry their items in the given order without exceeding their limits, otherwise print \\"NO\\". Examples Input 2 5 10 4 2 2 4 3 Output YES Input 3 3 5 2 5 2 2 2 2 2 Output NO Input 1 10 3 3 2 6 Output NO Note In the first sample, the first character can carry the first two items (2+2=4 ≤ 5), and the second character can carry the next two items (4+3=7 ≤ 10). In the second sample, even if characters are assigned optimally, the total weight exceeds the limits of the characters. In the third sample, the one character cannot carry all items as the total weight exceeds the character\'s limit of 10.","solution":"def can_all_characters_carry_items(n, weight_limits, m, item_weights): current_character = 0 current_weight = 0 for item_weight in item_weights: if current_weight + item_weight <= weight_limits[current_character]: current_weight += item_weight else: current_character += 1 if current_character >= n: return \\"NO\\" current_weight = item_weight if current_weight > weight_limits[current_character]: return \\"NO\\" return \\"YES\\""},{"question":"A social media application tracks the number of likes on posts. Each post can receive multiple likes, but the system needs to track unique users who liked each post. For better performance analysis, the application wants to assess different posts for their unique engagement in a given time period. You\'re given a collection of events, where each event is a like from a user on a specific post. Each event contains the user ID, post ID, and timestamp. Your task is to determine the post with the highest number of unique users who liked it within a given time interval. ------ Input ------ The first line contains two integers N and T, where N is the total number of like events, and T is the number of the posted queries. The next N lines contain the like events in the format: user_id post_id timestamp. The next T lines contain the queries in the format: start_time end_time. ------ Output ------ For each query, output the post ID with the highest number of unique users who liked it within the given time interval [start_time, end_time]. If there is a tie, return the smallest post ID. ------ Constraints ------ 1 ≤ N ≤ 50,000 1 ≤ T ≤ 100 1 ≤ user_id ≤ 1,000,000 1 ≤ post_id ≤ 100,000 1 ≤ timestamp ≤ 1,000,000,000 1 ≤ start_time ≤ end_time ≤ 1,000,000,000 ----- Sample Input 1 ------ 7 2 1 100 10 2 100 15 3 101 20 1 101 22 2 102 25 3 102 30 4 103 35 10 25 15 35 ----- Sample Output 1 ------ 100 102 ----- Explanation 1 ------ For the first query, posts within the time interval [10, 25] are 100, 101, and 102. Post 100 has 2 unique users (1, 2). Post 101 has 1 unique user (3). Post 102 has 1 unique user (2). Therefore, post 100 has the highest unique engagement within this interval. For the second query, posts within the time interval [15, 35] are 100, 101, 102, and 103. Post 100 has 1 unique user (2) in this time interval. Post 101 has 2 unique users (1, 3). Post 102 has 2 unique users (2, 3). Post 103 has 1 unique user (4). There is a tie between post 101 and post 102 with 2 unique users each, so the smaller post ID, which is 101, will be returned.","solution":"def get_post_with_max_unique_likes(events, queries): from collections import defaultdict import heapq posts_likes = defaultdict(lambda: defaultdict(set)) for user_id, post_id, timestamp in events: posts_likes[post_id][timestamp].add(user_id) results = [] for start, end in queries: post_unique_users = defaultdict(set) for post_id in posts_likes: for timestamp in posts_likes[post_id]: if start <= timestamp <= end: post_unique_users[post_id].update(posts_likes[post_id][timestamp]) max_unique = -1 post_with_max_unique = None for post_id in post_unique_users: unique_count = len(post_unique_users[post_id]) if unique_count > max_unique or (unique_count == max_unique and (post_with_max_unique is None or post_id < post_with_max_unique)): max_unique = unique_count post_with_max_unique = post_id results.append(post_with_max_unique) return results"},{"question":"Given a rectangular grid of cells with rows and columns, determine the maximum number of non-attacking rooks that can be placed on the grid. A rook is a piece in chess that can attack any piece located on the same row or the same column. -----Input----- The first line contains two space-separated integers R and C (1 ≤ R, C ≤ 10^9), representing the number of rows and the number of columns of the grid. -----Output----- Print a single integer representing the maximum number of non-attacking rooks that can be placed on the grid. -----Examples----- Input 8 8 Output 8 Input 3 5 Output 3 -----Note----- In this problem, as rooks can attack any piece on the same row or column, the maximum number of non-attacking rooks is determined by the smaller dimension of the grid.","solution":"def max_non_attacking_rooks(R, C): Returns the maximum number of non-attacking rooks that can be placed on an R x C grid. return min(R, C)"},{"question":"Your task is to implement a basic file system. In the file system, you will support two commands: 1. **Create**: Create a new file with a given path and size. 2. **Move**: Move an existing file to a new path. The path of a file is represented as a string of characters separated by slashes (\\"/\\"). Each part of the path is the name of a directory or file. The root directory is represented as \\"/\\" and is the only directory initially present. When moving a file, you should ensure that the destination directory exists. If it doesn\'t, you should create all necessary directories. Implement a `FileSystem` class that supports the following methods: - `create(path: str, size: int) -> None`: Create a file at the specified `path` with the given `size`. - `move(sourcePath: str, destinationPath: str) -> None`: Move a file from `sourcePath` to `destinationPath`. Ensure destination directories are created if they don\'t exist. The system should maintain the structure of directories and files, ensuring no two files can exist at the same `path`. # Example ```python fs = FileSystem() fs.create(\\"/a/b/c\\", 50) fs.move(\\"/a/b/c\\", \\"/a/b/d\\") ``` After these operations, the file originally at `/a/b/c` will now be at `/a/b/d`. # Constraints - All `path` strings and file sizes are valid. - `path` is a non-empty string that starts with a forward slash (`/`) and contains only alphanumeric characters or forward slashes. - The maximum length of any `path` does not exceed 200 characters. - The maximum number of files does not exceed 1000. - Any invalid operation (e.g., moving a non-existent file) will not be tested.","solution":"class FileSystem: def __init__(self): self.files = {} self.directories = {\'/\'} def create(self, path: str, size: int) -> None: directories = path.split(\'/\') current_path = \'/\' for directory in directories[:-1]: if directory: current_path = (current_path + directory + \'/\').lstrip(\'/\') self.directories.add(current_path) self.files[path] = size def move(self, sourcePath: str, destinationPath: str) -> None: if sourcePath in self.files: size = self.files.pop(sourcePath) directories = destinationPath.split(\'/\') current_path = \'/\' for directory in directories[:-1]: if directory: current_path = (current_path + directory + \'/\').lstrip(\'/\') self.directories.add(current_path) self.files[destinationPath] = size"},{"question":"Find the digit count. Input The first line contains T, the number of test cases. T lines follow each containing a single positive integer N. Output For each test case, output the number of digits in N. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^100 SAMPLE INPUT 3 7 123 456789 SAMPLE OUTPUT 1 3 6","solution":"def digit_count(test_cases): Returns the number of digits for each number in the list of test_cases. Parameters: test_cases (list): List of integers in string format Returns: list: List of integers representing the number of digits of each number return [len(str(num)) for num in test_cases]"},{"question":"Generate all possible palindromic substrings of a given string. A palindromic substring is defined as a substring that reads the same backward as forward. -----Input:----- - The first line contains the number of test cases, T. - Each of the next T lines contains a single string S consisting of lowercase alphabets. -----Output:----- - For each test case, print a list of all unique palindromic substrings sorted in lexicographical order. -----Constraints----- - 1 leq T leq 5 - 1 leq |S| leq 100 -----Sample Input:----- 2 ababa abc -----Sample Output:----- [\'a\', \'aba\', \'ababa\', \'b\', \'bab\'] [\'a\', \'b\', \'c\']","solution":"def find_all_palindromic_substrings(s): Returns a list of all unique palindromic substrings in the string s. def is_palindrome(sub): return sub == sub[::-1] result = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substring = s[i:j] if is_palindrome(substring): result.add(substring) return sorted(result) def generate_palindromic_substrings(test_cases): Generates all palindromic substrings for each test case and returns a list of results. Each result is a list of palindromic substrings sorted lexicographically. results = [] for s in test_cases: results.append(find_all_palindromic_substrings(s)) return results"},{"question":"Given a list of non-negative integers representing the amount of money in each house, determine the maximum amount of money you can rob tonight without alerting the police. Each house in the neighborhood is arranged in a circular pattern, meaning the first house is the neighbor of the last house. There is also a constraint that adjacent houses cannot be robbed on the same night. Example 1: Input: nums = [2, 3, 2] Output: 3 Explanation: Rob house 1 (money = 2) and house 3 (money = 2), total amount = 2 + 2 = 4. But you can\'t rob both house 1 and house 3 in the same night, so rob house 2 (money = 3). Example 2: Input: nums = [1, 2, 3, 1] Output: 4 Explanation: Rob house 1 (money = 1) and house 3 (money = 3), total amount = 1 + 3 = 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rob() which takes the list of integers nums as input and returns the maximum amount of money you can rob tonight without alerting the police. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ nums.length ≤ 100 0 ≤ nums[i] ≤ 1000","solution":"def rob(nums): Determine the maximum amount of money you can rob tonight without alerting the police. Houses are arranged in a circular pattern. if not nums: return 0 n = len(nums) if n == 1: return nums[0] def rob_linear(houses): prev, curr = 0, 0 for money in houses: prev, curr = curr, max(curr, prev + money) return curr # Consider two cases: # Case 1: Do not rob the last house # Case 2: Do not rob the first house return max(rob_linear(nums[:-1]), rob_linear(nums[1:]))"},{"question":"Write a function that takes a list of integers and returns the index position of the smaller number that first out of numerical order compared to the previous number. If the array is already sorted in ascending order, the function should return -1. Return the index starting from 0. Examples : ```python find_out_of_order([1, 2, 5, 6, 4, 7]) => 4 // The fourth number (4) is out of order. find_out_of_order([3, 1, 2, 3, 4, 5]) => 1 // The first number (1) is out of order compared to 3. find_out_of_order([1, 2, 3, 4, 5]) => -1 // The array is already sorted in ascending order. No numbers are out of order. ```","solution":"def find_out_of_order(nums): Returns the index position of the first number that is out of numerical order compared to the previous number If the array is already sorted in ascending order, returns -1. :param nums: List of integers to check :return: Index of the first out-of-order number, or -1 for i in range(1, len(nums)): if nums[i] < nums[i - 1]: return i return -1"},{"question":"James loves to collect rare coins, and he likes to display them in a grid pattern. He wants to maximize the number of coins he can display, but he has two constraints: - The display grid can only have a maximum of `n` rows and `n` columns. - Each coin must fit in a single cell of the grid, and no cell can hold more than one coin. James has a total of `m` coins, and he wants to find out how to arrange them in the grid so that no coins are left out, while using the smallest possible grid size (rows and columns should be as equal as possible). Can you help James determine the dimensions of the smallest grid he can use to display all his coins? Example ------- James has `10` coins, and the largest grid he wants to use has `4` rows and `4` columns. The smallest grid he can use would have `4` rows and `3` columns because that can fit exactly 12 coins (note: `3` rows and `4` columns would also fit, but dimensions must be as balanced as possible). ``` find_grid_size(10, 4) # => (4, 3) ``` If James has `8` coins and he wants to use a maximum grid size of `3` rows and `3` columns, the smallest grid he can use will be `3` rows and `3` columns because that\'s the only way to fit all 8 coins within the constraints. ``` find_grid_size(8, 3) # => (3, 3) ``` On another occasion, James wants to display `20` coins, and the grid can be up to `5` rows and `5` columns. The smallest grid he can use would be `5` rows and `4` columns, as it fits exactly 20 coins. ``` find_grid_size(20, 5) # => (5, 4) ``` Input ----- Don\'t worry about invalid inputs. That is, `n > 0` and `m > 0` and both will always be integers. Output ------ The function should return a tuple with the dimensions of the smallest grid (rows, columns) that fits all the coins.","solution":"def find_grid_size(m, n): This function calculates the smallest grid size to fit m coins within a maximum of n rows and n columns. Args: m (int): The number of coins. n (int): The maximum number of rows and columns the grid can have. Returns: tuple: A tuple of integers representing the smallest grid size (rows, columns) that fits all the coins. for rows in range(1, n+1): for cols in range(rows, n+1): if rows * cols >= m: return (rows, cols) return (n, n)"},{"question":"You are given a sequence of integers. Your task is to determine whether there is a non-empty contiguous subsequence that sums up to 0. A contiguous subsequence is a sequence that appears consecutively within the original sequence. -----Input----- The first line contains a single integer n (1 le n le 10^6) — the number of elements in the sequence. The second line contains n integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9) — the elements of the sequence. -----Output----- Print \\"YES\\" (without quotes) if there is a non-empty contiguous subsequence that sums to 0. Otherwise, print \\"NO\\". -----Examples----- Input 5 4 -1 2 -3 1 Output YES Input 5 1 2 3 4 5 Output NO -----Note----- In the first example, the subsequence [4, -1, 2, -3] sums to 0. In the second example, there is no such subsequence with sum equal to 0.","solution":"def has_zero_sum_subsequence(n, seq): Determine if there is a non-empty contiguous subsequence that sums to 0. :param n: Number of elements in the sequence :param seq: List of integers in the sequence :return: \\"YES\\" if such a subsequence exists, otherwise \\"NO\\" prefix_sums = set() current_sum = 0 for num in seq: current_sum += num if current_sum == 0 or current_sum in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"A company utilizes a machine to sort products into categories based on their weights. However, due to a malfunction, the machine occasionally misplaces a few items into incorrect categories. The company has provided you with a list of recorded weights and their respective categories, and a list of correct weights that should be present in each category. Your task is to write a program that identifies the misplaced items and assigns them correctly to their appropriate categories. # Input - The number of test cases `T` (1 ≤ T ≤ 100). - For each test case: - An integer `N` (1 ≤ N ≤ 1000), the number of items. - A list of `N` recorded weights and their categories, where each item is represented as a tuple: (weight, category). - An integer `M` (1 ≤ M ≤ 1000), the number of correct categories. - A list of `M` correct weight ranges for each category, where each range is represented as a tuple: (category, min_weight, max_weight). # Output For each test case, output the corrected list of items, where each item is represented as a tuple: (weight, correct_category). Ensure that items are listed in the same order as they were given. # Example **Input** ``` 2 5 (5, \'A\') (10, \'B\') (20, \'A\') (35, \'C\') (50, \'B\') 3 (\'A\', 1, 20) (\'B\', 21, 45) (\'C\', 46, 60) 3 10 (15, \'X\') (10, \'Y\') (5, \'X\') (30, \'Z\') (25, \'Y\') (35, \'X\') (50, \'Z\') (45, \'X\') (60, \'Y\') (70, \'X\') 4 (\'X\', 1, 10) (\'Y\', 11, 25) (\'Z\', 26, 45) (\'W\', 46, 100) ``` **Output** ``` [(5, \'A\'), (10, \'A\'), (20, \'A\'), (35, \'B\'), (50, \'C\')] [(15, \'Y\'), (10, \'X\'), (5, \'X\'), (30, \'Z\'), (25, \'Y\'), (35, \'Z\'), (50, \'W\'), (45, \'Z\'), (60, \'W\'), (70, \'W\')] ``` # Explanation In the first test case: - We have 5 items and 3 correct categories. - Item (5, \'A\') correctly belongs to \'A\' as 5 is in the range [1, 20]. - Item (10, \'B\') should be in category \'A\' as 10 is in the range [1, 20]. - Item (20, \'A\') is correctly categorized as \'A\'. - Item (35, \'C\') should be in category \'B\' as 35 is in the range [21, 45]. - Item (50, \'B\') should be in category \'C\' as 50 is in the range [46, 60]. In the second test case: - The misplaced items are correctly reassigned based on their weight ranges for corresponding categories.","solution":"def correct_categories(T, test_cases): results = [] for test_case in test_cases: N, recorded_weights, M, correct_categories_ranges = test_case category_ranges = {} for category, min_w, max_w in correct_categories_ranges: category_ranges[category] = (min_w, max_w) corrected_weights = [] for weight, _ in recorded_weights: correct_category = None for category, (min_w, max_w) in category_ranges.items(): if min_w <= weight <= max_w: correct_category = category break corrected_weights.append((weight, correct_category)) results.append(corrected_weights) return results"},{"question":"Bob loves to solve problems on strings. One day, he came across a problem where he had to transform a string into another string by performing a series of operations. In one operation, Bob can pick any character from the original string and place it at the end of the string. Bob wants to find out the minimum number of operations required to transform a string S into a string T. You are given two strings S and T of the same length. Write a program to determine the minimum number of operations required to transform S into T. If it is not possible to transform S into T, print -1. Input The first line of the input contains an integer N (1 <= N <= 1000) denoting the length of the strings. The second line contains the string S. The third line contains the string T. Output Print a single integer representing the minimum number of operations required to transform S into T, or -1 if it is not possible. Example Input 5 abcde cdeab Output 2 Input 3 abc def Output -1","solution":"def min_operations_to_transform_string(n, S, T): Determines the minimum number of operations required to transform string S into string T by moving characters from the start to the end of S. If transformation is not possible, returns -1. if sorted(S) != sorted(T): return -1 # Find the adjusting point for i in range(n): if S[i:] + S[:i] == T: return i return -1"},{"question":"You are given an integer array `arr` of length `n`, where every element appears exactly twice, except for one element which appears exactly once. Find the element that appears only once. Implement a function `findUnique(arr)`, which takes an integer array `arr` and returns the unique element that appears exactly once in the array. The solution should have a linear runtime complexity and use constant space. -----Input----- The function takes the following input: > `arr`: A list of integers where 1 <= n <= 3*10^4, and each integer is in the range -10^9 <= arr[i] <= 10^9. The length of `arr` is always odd. -----Output----- Return the single integer that appears exactly once. -----Examples----- Input: arr = [4, 1, 2, 1, 2] Output: 4 Input: arr = [2, 2, 1] Output: 1 Input: arr = [1] Output: 1 -----Note----- In the first example, 4 is the unique number as it appears only once while 1 and 2 both appear twice. In the second example, 1 is the unique number as it appears only once while 2 appears twice. In the third example, there is only one element 1, which is the unique element.","solution":"def findUnique(arr): Returns the element that appears exactly once in the array. As each element appears exactly twice except for one, we use the XOR operation to find the unique element. :param arr: List of integers :return: The unique integer that appears only once unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"Given an array of positive and negative numbers, arrange them in an alternate fashion such that every positive number is followed by a negative number and vice-versa. Order of elements in the output must follow order of appearance in input list. Note: Start with positive number. Example 1: Input: [1, 2, 3, -4, -1, 4] Output: [1, -4, 2, -1, 3, 4] Explanation: In the output, the first positive number (1) is followed by the first negative number (-4), the second positive number (2) is followed by the second negative number (-1), and the third positive number (3) is followed by the next remaining positive number (4). Example 2: Input: [5, -2, -3, 8, -4, -6, 9, -7] Output: [5, -2, 8, -3, 9, -4, -6, -7] Explanation: In the output, the first positive number (5) is followed by the first negative number (-2), the second positive number (8) is followed by the second negative number (-3), and the third positive number (9) is followed by the next remaining negative numbers. Your Task: You don\'t need to read input or print anything. Complete the function rearrange() which takes an array as input parameter and returns an array which meets the required alternate arrangement. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5","solution":"def rearrange(arr): Rearranges the array such that positive and negative numbers alternate. Starts with a positive number and follows the order of their appearance. pos = [x for x in arr if x >= 0] neg = [x for x in arr if x < 0] res = [] i, j = 0, 0 while i < len(pos) and j < len(neg): res.append(pos[i]) res.append(neg[j]) i += 1 j += 1 # Append remaining positive elements, if any while i < len(pos): res.append(pos[i]) i += 1 # Append remaining negative elements, if any while j < len(neg): res.append(neg[j]) j += 1 return res"},{"question":"A robot is placed in an MxN grid where some cells are marked as obstacles. The robot can move in four directions (left, right, up, down) but cannot move into or through obstacles. Write an algorithm to find the shortest path from the robot\'s starting position to its target position. If no such path exists, return -1. Example 1: Input: M = 3, N = 3 grid = [ [0, 0, 0], [1, 1, 0], [0, 0, 0] ] start = (0, 0) end = (2, 2) Output: 4 Example 2: Input: M = 3, N = 3 grid = [ [0, 1, 0], [1, 0, 0], [0, 1, 0] ] start = (0, 0) end = (2, 2) Output: -1 Explanation: There is no path from the starting position to the target position. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `shortestPath` which takes the grid, the dimensions M and N, the start position, and the end position as inputs and returns the length of the shortest valid path, or -1 if no such path exists. Expected Time Complexity: O(M * N) Expected Auxiliary Space: O(M * N) Constraints: 1 ≤ M, N ≤ 1000 grid[i][j] is either 0 (free space) or 1 (obstacle) (start[0], start[1]) and (end[0], end[1]) are valid and within grid boundary","solution":"from collections import deque def shortestPath(grid, M, N, start, end): Finds the shortest path in a grid from start to end, avoiding obstacles. Parameters: grid (List[List[int]]): The MxN grid M (int): The number of rows N (int): The number of columns start (Tuple[int, int]): The starting position (row, col) end (Tuple[int, int]): The ending position (row, col) Returns: int: The length of the shortest path, or -1 if no such path exists if start == end: return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == 0: if (nx, ny) == end: return dist + 1 queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"In Python, a binary search algorithm is an efficient way to find an item from a sorted list of items. Assume we have a sorted list of unique integers and we want to find out if a target integer exists in the list. Implement a function `binary_search(sorted_list, target)` that performs a binary search to find `target` in the `sorted_list`. The function should return `True` if the target exists in the list, and `False` otherwise. Use the following function signature: ```python def binary_search(sorted_list: List[int], target: int) -> bool: # Your code here ``` # Constraints: - The `sorted_list` contains unique integers sorted in ascending order. - The length of `sorted_list` is at least 1 and at most 10^4. - The integers in `sorted_list` are in the range from -10^5 to 10^5. - The `target` integer is also in the range from -10^5 to 10^5. # Example Usage ```python # Example 1: binary_search([1, 2, 3, 4, 5], 3) # Output: True # Example 2: binary_search([1, 2, 3, 4, 5], 6) # Output: False ``` # Explanation: - **Example 1**: The target value `3` is present in the list `[1, 2, 3, 4, 5]`, so the function should return `True`. - **Example 2**: The target value `6` is not present in the list `[1, 2, 3, 4, 5]`, so the function should return `False`.","solution":"from typing import List def binary_search(sorted_list: List[int], target: int) -> bool: left, right = 0, len(sorted_list) - 1 while left <= right: mid = (left + right) // 2 if sorted_list[mid] == target: return True elif sorted_list[mid] < target: left = mid + 1 else: right = mid - 1 return False"},{"question":"You are given an array of strings `logs`, where each string represents a single log entry. Each log entry is a space-separated string consisting of three fields: the user ID, the resource ID, and the timestamp. Each field is a positive integer. The log entries are not necessarily ordered by timestamp. Your task is to return the resource with the longest continuous usage by a single user. Continuous usage is defined as all consecutive log entries by the same user on the same resource without interruption by a different resource. If there is a tie (multiple resources have the same longest continuous usage duration), return the smallest resource ID. Example 1: Input: logs = [\\"123 1 100\\", \\"123 1 200\\", \\"123 2 300\\", \\"123 1 400\\", \\"124 1 500\\"] Output: 1 Explanation: User 123 uses resource 1 first from 100 to 200, but they switch to resource 2 at timestamp 300. Hence, the longest continuous usage is for resource 1 with a duration of 100 (200-100). User 124 uses resource 1 starting from 500 but does not continue, so the longest usage remains resource 1 by user 123. Example 2: Input: logs = [\\"123 1 100\\", \\"123 2 200\\", \\"123 1 300\\", \\"123 1 400\\", \\"123 1 500\\"] Output: 1 Explanation: In this case, user 123 uses resource 1 continuously from timestamp 300 to 500, giving it the longest continuous usage with a duration of 200 (500-300). Constraints: - `logs.length` ≤ 1000 - Each log entry consists of three space-separated integers representing the user ID, the resource ID, and the timestamp. - User IDs and resource IDs are unique positive integers. - Timestamps are unique positive integers representing the time at which a user accessed a resource.","solution":"def longest_continuous_usage(logs): from collections import defaultdict usage_data = defaultdict(lambda: defaultdict(list)) # Parse logs for log in logs: user, resource, timestamp = map(int, log.split()) usage_data[user][resource].append(timestamp) max_duration = 0 selected_resource = float(\'inf\') # Find the user-resource pair with the longest continuous usage for user in usage_data: for resource in usage_data[user]: timestamps = sorted(usage_data[user][resource]) current_duration = 0 for i in range(1, len(timestamps)): if timestamps[i] - timestamps[i-1] > 1: current_duration = max(current_duration, timestamps[i-1] - timestamps[0]) timestamps = timestamps[i:] # reset continuous range break else: current_duration = timestamps[i] - timestamps[0] if current_duration > max_duration or (current_duration == max_duration and resource < selected_resource): max_duration = current_duration selected_resource = resource return selected_resource"},{"question":"A delivery service offers two types of delivery methods: standard and express. For a given package, the fees for these methods are calculated based on the destination distance and the package weight. The standard delivery fee is calculated as follows: - A base rate of 5. - An additional 0.10 per km of distance. - An additional 0.05 per kg of weight. The express delivery fee is calculated as follows: - A base rate of 10. - An additional 0.20 per km of distance. - An additional 0.10 per kg of weight. You are given a budget `B`, a distance `D`, and a weight `W`. Your task is to determine how many packages you can send using standard and express delivery methods without exceeding your budget. Provide two outputs: 1. The maximum number of packages that can be sent using standard delivery. 2. The maximum number of packages that can be sent using express delivery. Input The input consists of three integers: - B (1 ≤ B ≤ 10^6) representing the budget in dollars. - D (1 ≤ D ≤ 10^4) representing the distance in kilometers. - W (1 ≤ W ≤ 10^3) representing the weight in kilograms. Output Print two integers separated by a space: - The maximum number of packages that can be sent using standard delivery. - The maximum number of packages that can be sent using express delivery. SAMPLE INPUT 500 50 20 SAMPLE OUTPUT 91 25 Explanation For standard delivery: - Base rate: 5 - Distance fee: 50 km * 0.10/km = 5 - Weight fee: 20 kg * 0.05/kg = 1 - Total fee per package = 5 + 5 + 1 = 11 - Number of packages = 500 / 11 = 45 (integer division) For express delivery: - Base rate: 10 - Distance fee: 50 km * 0.20/km = 10 - Weight fee: 20 kg * 0.10/kg = 2 - Total fee per package = 10 + 10 + 2 = 22 - Number of packages = 500 / 22 = 22 (integer division)","solution":"def max_packages(budget, distance, weight): # Calculate standard delivery cost per package standard_cost = 5 + (distance * 0.10) + (weight * 0.05) # Calculate express delivery cost per package express_cost = 10 + (distance * 0.20) + (weight * 0.10) # Calculate number of packages for each method standard_packages = budget // standard_cost express_packages = budget // express_cost return int(standard_packages), int(express_packages) # Example usage budget = 500 distance = 50 weight = 20 print(max_packages(budget, distance, weight)) # Output should be (45, 22)"},{"question":"You are given a string s, where each character in the string represents a lowercase letter. You want to rearrange the characters in the string such that no two adjacent characters are the same. If it is not possible to rearrange the string in this way, return an empty string. Implement a function `rearrangeString` which receives the input string `s` and returns the rearranged string or an empty string if it is not possible. Function signature: ```python def rearrangeString(s: str) -> str: ``` Example 1: Input: s = \\"aab\\" Output: \\"aba\\" Example 2: Input: s = \\"aaab\\" Output: \\"\\" Example 3: Input: s = \\"aabc\\" Output: \\"abac\\" Example 4: Input: s = \\"aaabb\\" Output: \\"ababa\\" Constraints: 1. 1 <= len(s) <= 500 2. s consists of only lowercase English letters. Hint: - You may need to count the occurrences of each character and use a max-heap to arrange them optimally.","solution":"import heapq from collections import Counter def rearrangeString(s: str) -> str: # Count the frequency of each character char_count = Counter(s) # Create a max heap with negative frequencies (since heapq is a min-heap) max_heap = [(-count, char) for char, count in char_count.items()] # Transform list into heap heapq.heapify(max_heap) # The result string result = [] prev_count, prev_char = 0, \'\' while max_heap: count, char = heapq.heappop(max_heap) # Append the current character to the result result.append(char) # If the previous character can still be used (count is negative because it was incremented) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update previous character and its count prev_count, prev_char = count + 1, char # If constructed result length in not equal to original string, it means it wasn\'t possible if len(result) != len(s): return \\"\\" return \\"\\".join(result)"},{"question":"A large company has set up a time tracking system that records the start and end times of tasks performed by its employees. Each task is represented by a tuple (employee_id, start_time, end_time), where the times are given in a 24-hour format without any colons (e.g., \\"1300\\" for 1:00 PM). Your task is to write a program that identifies all employees who have overlapping tasks. Two tasks are considered overlapping if they share any time period, including start and end times. You need to output a list of employee IDs who have at least one overlapping task. ---Input--- The input starts with an integer n (1 ≤ n ≤ 10,000), the number of tasks recorded. The next n lines each contain a task in the format: employee_id start_time end_time employee_id is an integer (1 ≤ employee_id ≤ 1,000), and start_time and end_time are four-digit integers representing the hour and minute in a 24-hour format. It is guaranteed that start_time is strictly less than end_time for every task. ---Output--- Output the list of employee IDs who have at least one overlapping task, in ascending order. If no such employee exists, output an empty string. ---Examples--- Input 5 1 0900 1100 2 1000 1200 1 1030 1130 2 1230 1400 3 1500 1700 Output 1 2 Input 4 1 0900 1000 2 1000 1100 3 1100 1200 4 1300 1400 Output","solution":"def find_overlapping_employees(n, tasks): from collections import defaultdict overlaps = defaultdict(list) for task in tasks: employee_id, start_time, end_time = task if not overlaps[employee_id]: overlaps[employee_id].append((start_time, end_time)) else: for s_time, e_time in overlaps[employee_id]: if not (end_time <= s_time or start_time >= e_time): return sorted([employee for employee in overlaps.keys()]) overlaps[employee_id].append((start_time, end_time)) return [] # Helper function to parse inputs def parse_input(input_string): lines = input_string.strip().split(\'n\') n = int(lines[0]) tasks = [tuple(map(int, line.split())) for line in lines[1:n+1]] return n, tasks"},{"question":"Walter has encountered a new problem in his lab with his chemical transporter system. He needs a machine that can automatically transfer chemicals from multiple labs to a central storage unit. Each lab has a certain capacity and each chemical has a specific weight. The machine can only transport one chemical at a time but it will follow a specific order to maximize efficiency. The machine will choose the lab with the most chemical weight first. If two labs have the same weight, it will choose the lab in alphabetical order. After transferring one chemical from a lab, the lab\'s capacity reduces accordingly. The goal is to determine the order in which the machine will transfer the chemicals from the labs. Input: The first line of input contains C, the number of test cases. Each test case begins with an integer L, the number of labs. Next, L lines follow where each line contains the following information for each lab: - The lab name (a string) - The number of chemicals (an integer) - The weight capacity of each chemical (an integer) Output: For each test case, output the order in which the machine will transfer the chemicals, in separate lines. Output an empty line between cases. You may assume that: - 1 ≤ L ≤ 100 - The name of each lab consists of uppercase English letters only. - Lab names are unique within a single test case. - Each lab has at least one chemical and no more than 100 chemicals. - The weight capacity of each chemical is between 1 and 1000 inclusive. SAMPLE INPUT 2 3 LABA 3 10 LABB 2 20 LABC 4 5 2 LABX 1 100 LABY 2 50 SAMPLE OUTPUT LABB LABA LABB LABA LABA LABC LABC LABC LABC LABX LABY LABY Explanation In the first test case, LABB has the highest chemical weight of 20 (2 chemicals, each 20 units), followed by LABA and then LABC. When LABB is reduced to one chemical, its total weight equals LABA, but LABA comes alphabetically before LABB, so LABA is processed. In the second test case, the machine first processes the chemical from LABX since it has the highest weight capacity. After LABX is empty, it moves to LABY.","solution":"def transfer_order(cases): result = [] for case in cases: labs = case[\'labs\'] lab_queue = [] for lab in labs: name, count, weight = lab[\'name\'], lab[\'count\'], lab[\'weight\'] for _ in range(count): lab_queue.append((weight, name)) lab_queue.sort(key=lambda x: (-x[0], x[1])) case_result = [lab[1] for lab in lab_queue] result.append(case_result) return result"},{"question":"A company wants to analyze customer feedback and look for a specific keyword in the reviews. Your task is to write a function `count_keyword_occurrences` that takes a string `review` and a string `keyword` as input, and counts how many times the exact word `keyword` appears in the `review`. Note that the keyword is case-sensitive and should be treated as a separate word (not a part of any other word). Constraints: - The length of `review` and `keyword` will be between 1 and 100 characters inclusive. Input: - A string `review` which is the customer review text. - A string `keyword` which is the keyword to count in the review. Output: - An integer representing the number of times the exact keyword appears in the review. Example Input: ``` The product is great. The product is worth the money. ``` ``` product ``` Example Output: ``` 2 ``` Example Input: ``` Service was excellent; service quality made us happy. ``` ``` service ``` Example Output: ``` 1 ```","solution":"def count_keyword_occurrences(review, keyword): Counts the number of times the exact keyword appears in the review. Parameters: review (str): The customer review text. keyword (str): The keyword to search for in the review. Returns: int: The number of occurrences of the keyword in the review. # Split the review into words based on whitespace and separators words = review.split() # Count the occurrences of keyword in the list of words return words.count(keyword)"},{"question":"Given a string, find the length of the smallest contiguous substring that contains all the distinct characters of the original string at least once. Example 1: Input: s = \\"aabcbcdbca\\" Output: 4 Explanation: The substring \\"dbca\\" contains all the distinct characters (a, b, c, d) of the string. Example 2: Input: s = \\"aaab\\" Output: 2 Explanation: The substring \\"ab\\" contains all the distinct characters (a, b) of the string. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `smallestDistinctSubstring()` which takes the string `s` as input and returns the length of the smallest contiguous substring that contains all the distinct characters of `s`. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= |s| <= 10^5 The string consists of lowercase English letters only.","solution":"def smallestDistinctSubstring(s): Returns the length of the smallest contiguous substring that contains all the distinct characters of the original string. distinct_chars = set(s) n = len(s) min_length = float(\'inf\') char_count = {} left = 0 for right in range(n): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) == len(distinct_chars): min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 return min_length"},{"question":"In preparation for her upcoming mathematics exam, Janet is practicing her geometry skills by drawing shapes on a piece of graph paper. She has a specific interest in rectangles whose sides are aligned with the grid lines of the paper. Janet wonders how many unique rectangles can be formed using the grid points within a given rectangular section of the graph paper. More precisely, given an m times n grid, Janet wants to know the total number of distinct rectangles that can be formed using the points as vertices. For example, in a 2 times 3 grid, there are 18 rectangles: - 6 single-cell rectangles. - 4 rectangles that span two grid cells in one direction and one in the other. - 2 rectangles that span two grid cells vertically. - 3 rectangles that span three grid cells horizontally. - 2 larger rectangles that span two rows. - 1 large rectangle spanning the entire 2 times 3 grid. Given the dimensions of the grid, can you compute the total number of rectangles contained within it? -----Inputs----- The first line contains two space-separated integers, m and n (1 leq m, n leq 1000), representing the dimensions of the grid. -----Output----- Output a single integer which is the total number of distinct rectangles that can be formed in the given m times n grid. -----Examples----- Sample Input 1: 2 3 Sample Output 1: 18 Sample Input 2: 3 3 Sample Output 2: 36","solution":"def count_rectangles(m, n): Returns the total number of distinct rectangles that can be formed in an m x n grid. # The total number of rectangles possible in an m x n grid can be found by: # Sum of all sub-rectangles possible which is: (m * (m + 1) / 2) * (n * (n + 1) / 2) return (m * (m + 1) // 2) * (n * (n + 1) // 2)"},{"question":"Task Write a function to find the longest increasing subsequence (LIS) in a given list of integers. Input range: ```python 500 tests 1 <= len(lst) <= 10,000 -100,000 <= lst[i] <= 100,000 ``` ___ Description An increasing subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The longest increasing subsequence is the subsequence of maximum length. ___ Example Given the input list `[10, 22, 9, 33, 21, 50, 41, 60, 80]`: ``` lis([10, 22, 9, 33, 21, 50, 41, 60, 80]) == [10, 22, 33, 50, 60, 80] ``` For input list `[3, 4, -1, 0, 6, 2, 3]`: ``` lis([3, 4, -1, 0, 6, 2, 3]) == [-1, 0, 2, 3] ``` You may return any valid result if there are multiple longest increasing subsequences of the same length.","solution":"def lis(lst): Finds the longest increasing subsequence in a given list of integers. if not lst: return [] # Array to store our subsequence lis = [lst[0]] # Dictionary to track the actual sequences sequences = {lst[0]: [lst[0]]} for num in lst[1:]: if num > lis[-1]: lis.append(num) sequences[num] = sequences[lis[-2]] + [num] else: for i in range(len(lis)): if num <= lis[i]: lis[i] = num sequences[num] = sequences[lis[i-1]] + [num] if i > 0 else [num] break # Returning the longest increasing subsequence based on tracked sequences return sequences[lis[-1]]"},{"question":"You are given an integer array `arr` of length `n`. An operation is defined as follows: 1. Choose any two adjacent elements `arr[i]` and `arr[i+1]`. 2. Replace these two elements with their sum. After performing the above operation `n-1` times, the array will have only one element left. Your task is to find the minimum possible value of the remaining element after all operations. -----Input----- - The first line contains a single integer `n` (1 le n le 2 cdot 10^5) — the length of the array. - The second line contains `n` integers a[1], a[2], a[3], ldots, a[n] (1 le a[i] le 10^9) — the elements of the array. -----Output----- - Output a single integer — the minimum possible value of the remaining element after performing the given operations. -----Example----- Input 4 1 2 3 4 Output 10 Input 3 5 8 6 Output 19 Input 2 100 200 Output 300 -----Explanation----- In the first example, the steps to minimize the remaining element are as follows: 1. Sum the first two elements: `[1,2,3,4]` -> `[3,3,4]` 2. Sum the first two elements again: `[3,3,4]` -> `[6,4]` 3. Sum the last two elements: `[6,4]` -> `[10]` In the second example, the steps to minimize the remaining element are as follows: 1. Sum the first two elements: `[5,8,6]` -> `[13,6]` 2. Sum the remaining elements: `[13,6]` -> `[19]` In the third example, there is only one possible operation: 1. Sum the only two elements: `[100,200]` -> `[300]`","solution":"def minimum_remaining_element(arr): Returns the minimum possible value of the remaining element after performing n-1 operations. return sum(arr)"},{"question":"In a research facility, you are working on ensuring the proper operation of a surveillance camera system that tracks activities in different zones. Each zone is numbered from 1 to n. Cameras can be monitored for activity, and the system requires accurate reporting to ensure that no zone\'s camera is overused or under-maintained. The system supports the following requests, which should be processed in the order they are received: 1. \\"monitor i\\" to start monitoring the zone i (i.e., turning on the camera). 2. \\"stop i\\" to stop monitoring the zone i (i.e., turning off the camera). Each request should result in one of the following outputs: For the \\"monitor i\\" request: - \\"Monitoring started in zone i\\" if the request is successful. - \\"Zone i is already monitored\\" if the camera in zone i is already on. For the \\"stop i\\" request: - \\"Monitoring stopped in zone i\\" if the request is successful. - \\"Zone i is not monitored\\" if the camera in zone i is already off. Write a program that reads these requests and outputs the corresponding results. Input: The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 105) — the number of zones and the number of requests, respectively. Next m lines contain requests in one of the forms: \\"monitor i\\" or \\"stop i\\" (1 ≤ i ≤ n). Output: Print m lines with the results of executing the requests as described. Examples Input 5 7 monitor 3 monitor 2 stop 3 stop 2 monitor 5 stop 1 monitor 3 Output Monitoring started in zone 3 Monitoring started in zone 2 Monitoring stopped in zone 3 Monitoring stopped in zone 2 Monitoring started in zone 5 Zone 1 is not monitored Monitoring started in zone 3","solution":"def handle_requests(n, m, requests): is_monitored = [False] * (n + 1) results = [] for request in requests: action, zone = request.split() zone = int(zone) if action == \\"monitor\\": if is_monitored[zone]: results.append(f\\"Zone {zone} is already monitored\\") else: is_monitored[zone] = True results.append(f\\"Monitoring started in zone {zone}\\") elif action == \\"stop\\": if is_monitored[zone]: is_monitored[zone] = False results.append(f\\"Monitoring stopped in zone {zone}\\") else: results.append(f\\"Zone {zone} is not monitored\\") return results"},{"question":"In this problem, you are given a list of `n` integers. Your task is to find the second largest unique integer in the list. If there is no such integer, print -1. Make sure your program is efficient and can handle the upper limit gracefully. Input The first line of input contains a single integer `n` - the number of integers in the list. The second line contains `n` integers separated by spaces. Output Output the second largest unique integer in the list or -1 if there is no such integer. Constraints 1 ≤ n ≤ 100000 1 ≤ integer in list ≤ 10^9 SAMPLE INPUT 5 4 2 5 2 3 SAMPLE OUTPUT 4","solution":"def second_largest_unique_integer(n, integer_list): Returns the second largest unique integer in the list or -1 if there is no such integer. unique_integers = list(set(integer_list)) if len(unique_integers) < 2: return -1 unique_integers.sort(reverse=True) return unique_integers[1] # Example usage # n = 5 # integer_list = [4, 2, 5, 2, 3] # print(second_largest_unique_integer(n, integer_list)) # Output: 4"},{"question":"Lucy is practicing origami and she wants to make unique forms with square papers. She has an array of n integers, each representing the side length of a square paper. To add variety to her designs, Lucy wants to know how many different side lengths there are within given intervals. Formally, you are given an array of n integers a_1, a_2, ..., a_n representing the side lengths of n square papers. You are also given q queries, each of which specifies two indices l_k and r_k (1 leq l_k leq r_k leq n). For each query, determine the number of unique side lengths of the square papers between the indices l_k and r_k (inclusive). -----Input----- The first line contains an integer n (1 leq n leq 10^5) — the number of square papers. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) — the side lengths of the square papers. The third line contains an integer q (1 leq q leq 10^5) — the number of queries. Each of the following q lines contains two integers l_k, r_k (1 leq l_k leq r_k leq n) — specifying the indices for each query. -----Output----- Output one number for each query — the number of unique side lengths in the specified range. -----Examples----- Input 5 4 5 6 4 7 3 1 3 2 5 1 5 Output 3 4 4 Input 4 2 2 2 2 2 1 3 1 4 Output 1 1 -----Note----- For the first example, the side lengths are [4, 5, 6, 4, 7]. - For the first query from index 1 to 3, the unique side lengths are {4, 5, 6}, hence the answer is 3. - For the second query from index 2 to 5, the unique side lengths are {5, 6, 4, 7}, hence the answer is 4. - For the third query from index 1 to 5, the unique side lengths are {4, 5, 6, 7}, hence the answer is 4. For the second example, all side lengths are the same, thus each query results in 1 unique side length.","solution":"def unique_side_lengths(arr, queries): This function takes in an array of integers and an array of queries, and returns the number of unique integers in the specified intervals for each query. results = [] for l, r in queries: unique_lengths = set(arr[l-1:r]) # l-1 and r because input is 1-based index but Python list is 0-based results.append(len(unique_lengths)) return results"},{"question":"A company is organizing a team-building event, and part of the event involves solving puzzles. One of these puzzles is based on a grid, comprised of letters. The challenge for the participants is to find if a given word can be located in the grid, adhering to specific movement rules. Movements allowed are horizontal (left to right or right to left) or vertical (top to bottom or bottom to top). The word should be constructed by sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. You are provided with the grid and the word, and your task is to determine if the word can be found in the aforementioned manner within the grid. **Input:** - First line: Two integers r and c (1 ≤ r, c ≤ 100) denoting the number of rows and columns of the grid. - Next r lines: Each containing a string of c uppercase English letters. - Last line: A string w (1 ≤ |w| ≤ r * c) denoting the word to be found in the grid. **Output:** - Output \\"YES\\" if the word can be found in the grid; otherwise, output \\"NO\\". **Example:** Input: ``` 5 5 HELLO WORLD ABCDE FGHIJ KLMNO HELLO ``` Output: ``` YES ``` Input: ``` 3 3 ABC DEF GHI FEG ``` Output: ``` NO ``` **Explanation:** In the first example, the word \\"HELLO\\" can be found in the first row of the grid. In the second example, the word \\"FEG\\" cannot be found as an adjacent sequence horizontally or vertically in the grid.","solution":"def find_word_in_grid(r, c, grid, word): def search(x, y, dx, dy): for i in range(len(word)): nx, ny = x + i * dx, y + i * dy if not (0 <= nx < r and 0 <= ny < c and grid[nx][ny] == word[i]): return False return True for row in range(r): for col in range(c): if grid[row][col] == word[0]: if search(row, col, 1, 0): return \\"YES\\" # Vertical down if search(row, col, -1, 0): return \\"YES\\" # Vertical up if search(row, col, 0, 1): return \\"YES\\" # Horizontal right if search(row, col, 0, -1): return \\"YES\\" # Horizontal left return \\"NO\\""},{"question":"Chef loves order and neat arrangements. Today, he\'s faced with the task of organizing an array of integers in a specific way. You are given an array of N integers. You need to reorder the array such that for every element a[i], where 1 leq i leq N, the product of a[i] and its index should follow a non-decreasing sequence. In other words, for every i and j (1 leq i leq j leq N), i times a[i] leq j times a[j]. If there are multiple possible reorderings, print the lexicographically smallest one. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of elements in the array. The second line contains N space-separated integers a_1, a_2, …, a_N denoting the array elements. ------ Output ------ For each test case, print a single line containing the reordered array. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ a_i ≤ 1,000 ------ Subtasks ------ Subtasks #1 (100 points): original constraints ------ Example Input ------ 2 5 3 1 2 5 4 4 8 4 6 2 ------ Example Output ------ 1 2 3 4 5 2 4 6 8 ------ Explanation ------ For the first test case: - The reordered array where the product of elements and their indices follows a non-decreasing sequence is [1, 2, 3, 4, 5]. For the second test case: - The reordered array is [2, 4, 6, 8], which ensures the product conditions are met while being the lexicographically smallest possible arrangement.","solution":"def reorder_array(arr): Reorders arr such that the product of each element and its index follows a non-decreasing sequence. If multiple reorderings exist, the lexicographically smallest one is returned. arr_sorted = sorted(arr) return arr_sorted def process_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] result = reorder_array(arr) results.append(result) return results"},{"question":"You are given two arrays a and b of equal length n. You want to construct an array c of length n such that: - c_i is the maximum of any one element from array a and any one element from array b. Formally, c_i = max(a[x], b[y]), where x and y can be different indices for each i. The task is to find the lexicographically smallest array c that satisfies the above conditions. Lexicographical order means that you should choose the smallest possible value for c_1, then c_2, and so on. If two elements are equal, continue comparing the next elements. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the size of the arrays. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array a. The third line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9) — the elements of the array b. Output Print the lexicographically smallest array c of length n which satisfies the conditions. Examples Input 3 1 2 3 3 2 1 Output 3 2 2 Input 4 5 1 4 7 3 4 5 2 Output 5 4 5 7 Note For the first sample, the initial arrays are a = [1, 2, 3] and b = [3, 2, 1]. To form the smallest lexicographical array c: - Choose max(a[1], b[3]) = max(1, 1) = 3 for c[1] - Choose max(a[2], b[2]) = max(2, 2) = 2 for c[2] - Choose max(a[3], b[1]) = max(3, 3) = 2 for c[3] The resulting array c is [3, 2, 2]. For the second sample, the initial arrays are a = [5, 1, 4, 7] and b = [3, 4, 5, 2]. To form the smallest lexicographical array c: - Choose max(a[1], b[1]) = max(5, 3) = 5 for c[1] - Choose max(a[2], b[2]) = max(1, 4) = 4 for c[2] - Choose max(a[3], b[3]) = max(4, 5) = 5 for c[3] - Choose max(a[4], b[4]) = max(7, 2) = 7 for c[4] The resulting array c is [5, 4, 5, 7].","solution":"def lexicographically_smallest_c(n, a, b): Returns the lexicographically smallest array c of length n such that: c_i = max(a[x], b[y]), where x and y can be different indices for each i. c = [] for i in range(n): c.append(max(a[i], b[i])) return c # Main function for debugging with input if __name__ == \\"__main__\\": n = int(input().strip()) a = list(map(int, input().strip().split())) b = list(map(int, input().strip().split())) result = lexicographically_smallest_c(n, a, b) print(\\" \\".join(map(str, result)))"},{"question":"Wizards Academy has a unique way of grading students in their potions class. Each student receives a series of scores throughout the semester which are used to calculate their final grade. However, Professor Snape, who has a keen eye for details, wants to find the longest segment of scores where the difference between the highest and lowest scores does not exceed a given limit. You have been asked to help with this task. Write a program to determine the length of the longest contiguous subarray for which the difference between the maximum and minimum scores is less than or equal to a given limit. **Input** - The first line of input contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9), where n is the number of scores and k is the allowed maximum difference between scores in the subarray. - The second line contains n space-separated integers denoting the scores (1 ≤ scores[i] ≤ 10^9). **Output** - Output a single integer, the length of the longest contiguous subarray that satisfies the condition. **Examples** **Input 1** ``` 7 3 1 3 6 7 9 2 10 ``` **Output 1** ``` 3 ``` **Input 2** ``` 5 0 1 1 1 1 1 ``` **Output 2** ``` 5 ``` **Note** In the first sample case, the longest subarray where the difference between the maximum and minimum scores is at most 3 is either [1, 3, 6] or [6, 7, 9] which has a length of 3. In the second sample case, all scores are the same, so the difference between the maximum and minimum scores is 0. The longest subarray length is the entire array length, which is 5.","solution":"def longest_subarray_within_limit(scores, k): Returns the length of the longest contiguous subarray where the difference between the maximum and minimum scores is less than or equal to k. from collections import deque min_deque = deque() max_deque = deque() left = 0 max_length = 0 for right in range(len(scores)): while min_deque and scores[min_deque[-1]] > scores[right]: min_deque.pop() while max_deque and scores[max_deque[-1]] < scores[right]: max_deque.pop() min_deque.append(right) max_deque.append(right) while scores[max_deque[0]] - scores[min_deque[0]] > k: left += 1 if left > min_deque[0]: min_deque.popleft() if left > max_deque[0]: max_deque.popleft() max_length = max(max_length, right - left + 1) return max_length"},{"question":"Implement a function that simulates a text editor with the ability to handle undo operations. The editor should process a sequence of commands to manipulate a single string. The commands are appended to a command history to support undoing the most recent command. Your task is to implement the following functionalities: 1. **Append**: Append a given string to the current text. 2. **Delete**: Remove the last `k` characters from the current text. 3. **Print**: Print the k-th character of the current text. 4. **Undo**: Undo the most recent command that modified the text (either Append or Delete). The initial text is an empty string. The commands will be provided in a sequence, and you need to process them in the given order. # Input The input will be a sequence of commands, ending with the `exit` command. - Each command will be one of the following forms: - `append s` where `s` is the string to append. - `delete k` where `k` is the number of characters to remove. - `print k` where `k` is the position (1-indexed) of the character to print. - `undo` which reverts the text to its state before the last Append or Delete command. - The sequence will end with the `exit` command. # Output Print the results of all `print` commands. Each result should appear on a new line. # Constraints - The number of operations will not exceed 10^5. - The sum of the lengths of all appended strings will not exceed 10^6. - The lengths of all deleted characters will not exceed the total length of text so far. - Positions for the `print` commands will be valid and within the range of the current text. # Example Input ``` 5 append hello append world delete 5 print 5 undo print 10 exit ``` Output ``` o d ``` # Note After the `append hello` command, the text is `hello`. After the `append world` command, the text is `helloworld`. After the `delete 5` command, the text is `hello`. The `print 5` command prints \'o\'. The `undo` command reverts the text to `helloworld`. The `print 10` command prints \'d\'.","solution":"class TextEditor: def __init__(self): self.text = \\"\\" self.history = [] def append(self, s): self.history.append(self.text) # Save current state to history self.text += s def delete(self, k): self.history.append(self.text) # Save current state to history self.text = self.text[:-k] def print_char(self, k): print(self.text[k - 1]) def undo(self): if self.history: self.text = self.history.pop() def process_commands(self, commands): for command in commands: cmd = command.split() if cmd[0] == \'append\': self.append(cmd[1]) elif cmd[0] == \'delete\': self.delete(int(cmd[1])) elif cmd[0] == \'print\': self.print_char(int(cmd[1])) elif cmd[0] == \'undo\': self.undo() elif cmd[0] == \'exit\': break"},{"question":"Iroha likes to play a game called \\"Magic Squares\\". A magic square is a 3x3 grid of numbers where the sum of the numbers in each row, each column, and both diagonals are equal. Iroha has a 3x3 grid containing all the numbers from 1 to 9 exactly once. Determine whether the grid forms a magic square. -----Constraints----- - The grid will have numbers from 1 to 9, used exactly once. -----Input----- The input is given from Standard Input in the following format: a1 a2 a3 a4 a5 a6 a7 a8 a9 Where a1, a2, ..., a9 represent the numbers in the 3x3 grid. -----Output----- If the grid forms a magic square, print YES (case-sensitive). Otherwise, print NO. -----Sample Input----- 2 7 6 9 5 1 4 3 8 -----Sample Output----- YES -----Sample Input----- 1 2 3 4 5 6 7 8 9 -----Sample Output----- NO","solution":"def is_magic_square(grid): Determines if the given 3x3 grid forms a magic square. # Extract rows row1, row2, row3 = grid[:3], grid[3:6], grid[6:] # Calculate the sum of the first row magic_sum = sum(row1) # Check rows if sum(row1) != magic_sum or sum(row2) != magic_sum or sum(row3) != magic_sum: return \\"NO\\" # Check columns for col in range(3): if row1[col] + row2[col] + row3[col] != magic_sum: return \\"NO\\" # Check diagonals if row1[0] + row2[1] + row3[2] != magic_sum: return \\"NO\\" if row1[2] + row2[1] + row3[0] != magic_sum: return \\"NO\\" return \\"YES\\" # Function to parse the input and call the is_magic_square function def main(): import sys input = sys.stdin.read().strip().split() grid = list(map(int, input)) print(is_magic_square(grid))"},{"question":"Given an array of integers nums, you are tasked with finding the length of the longest subarray for which the elements can be rearranged to form a consecutive sequence. The array may contain duplicates and negative numbers. Example 1: Input: nums = [1, 2, 2, 3, 4, 5] Output: 5 Explanation: The longest subarray [2, 3, 4, 5] can be rearranged to form the consecutive sequence [2, 3, 4, 5]. Example 2: Input: nums = [10, 1, 3, 5, 2, 6, 4] Output: 6 Explanation: The longest subarray [1, 2, 3, 4, 5, 6] can be rearranged to form the consecutive sequence [1, 2, 3, 4, 5, 6]. Your Task: You don’t need to read input or print anything. Complete the function longestConsecutiveSubarray() which takes the array nums as input and returns an integer representing the length of the longest subarray that can be rearranged to form a consecutive sequence. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ len(nums) ≤ 10^5 -10^5 ≤ nums[i] ≤ 10^5","solution":"def longestConsecutiveSubarray(nums): Returns the length of the longest subarray that can be rearranged to form a consecutive sequence. if not nums: return 0 nums_set = set(nums) # Create a set of numbers to improve search time longest_streak = 0 for num in nums_set: if (num - 1) not in nums_set: # num is the start of a new sequence current_num = num current_streak = 1 while (current_num + 1) in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"In this challenge, you must implement a function to sort a list of words based on a custom alphabet order. The custom alphabet provides the new order of roman letters from \'a\' to \'z\'. Your task is to modify a given list of words so that they appear in lexicographically sorted order according to the custom alphabet provided. # Input The input to the function will be two arguments: - custom_alphabet: A string containing exactly 26 unique lowercase letters representing the new order of the alphabet. - words: A list of strings where each string is a word to be sorted. # Output The function should return a list of strings, which represents the `words` sorted in lexicographical order according to the given custom alphabet. # Examples ```python custom_alphabet = \\"zyxwvutsrqponmlkjihgfedcba\\" words = [\\"apple\\", \\"banana\\", \\"cherry\\"] sort_custom_alphabet(custom_alphabet, words) ``` Output: ```python [\'cherry\', \'banana\', \'apple\'] ``` ```python custom_alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" words = [\\"apple\\", \\"banana\\", \\"cherry\\"] sort_custom_alphabet(custom_alphabet, words) ``` Output: ```python [\'apple\', \'banana\', \'cherry\'] ``` # Constraints - The `custom_alphabet` string will always contain 26 unique lowercase letters. - The `words` list will contain between 1 and 100 words. - Each `word` will contain only lowercase alphabetic characters and will not exceed 100 characters in length. # Implementation Notes - Consider creating a helper function to convert a word into its corresponding numerical representation based on the custom alphabet for easier comparison. - Make use of Python\'s built-in sorting functions where possible to keep the solution concise and efficient.","solution":"def sort_custom_alphabet(custom_alphabet, words): Sort a list of words based on a custom alphabet order. :param custom_alphabet: A string containing exactly 26 unique lowercase letters. :param words: A list of strings to be sorted. :return: A list of strings sorted based on custom alphabet order. # Create a dictionary to map each character to its index in the custom alphabet custom_order = {char: index for index, char in enumerate(custom_alphabet)} # Function to convert each word to a tuple representing its order based on custom alphabet def convert_to_custom_order(word): return [custom_order[char] for char in word] # Sort words based on their custom order return sorted(words, key=convert_to_custom_order)"},{"question":"You are given an undirected graph with N vertices and M edges. Each vertex i has an initial value V_i. You need to find the maximum value of any vertex that can be reached starting from vertex 1, using any number of edges. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two space-separated integers N and M, the number of vertices and edges in the graph. - The second line contains N space-separated integers V_1, V_2, ..., V_N — the initial values of the vertices. - The next M lines describe the edges of the graph. The i-th of these lines contains two space-separated integers u_i and v_i, denoting an edge between u_i and v_i. ------ Output Format ------ For each test case, output a single integer, the maximum vertex value that can be reached from vertex 1. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N, M ≤ 1000 1 ≤ V_i ≤ 10^6 1 ≤ u_i, v_i ≤ N ------ Sample Input 1 ------ 2 5 4 1 5 3 2 6 1 2 2 3 3 4 4 5 3 2 10 20 30 1 2 2 3 ------ Sample Output 1 ------ 6 30 ------ Explanation 1 ------ Test case 1: Starting at vertex 1, we can reach vertex 5 with value 6, which is the maximum value reachable. Test case 2: Starting at vertex 1, we can reach vertex 3 with value 30, which is the maximum value reachable.","solution":"def max_value_from_vertex_one(test_cases): Find the maximum value of any vertex that can be reached starting from vertex 1. Args: test_cases (list): List consisting of tuples representing each test case. Each tuple contains (N, M, vertex_values, edges) N (int) - number of vertices M (int) - number of edges vertex_values (list) - Initial values of the vertices edges (list) - List of tuples representing edges (u_i, v_i) Returns: list: List of integers representing maximum vertex value reachable from vertex 1 for each test case. def bfs_max_value(vertex_values, neighbors, start_vertex): from collections import deque visited = set() queue = deque([start_vertex]) max_value = vertex_values[start_vertex - 1] while queue: vertex = queue.popleft() if vertex not in visited: visited.add(vertex) max_value = max(max_value, vertex_values[vertex - 1]) for neighbor in neighbors[vertex]: if neighbor not in visited: queue.append(neighbor) return max_value results = [] for N, M, vertex_values, edges in test_cases: neighbors = {i: [] for i in range(1, N + 1)} for u, v in edges: neighbors[u].append(v) neighbors[v].append(u) result = bfs_max_value(vertex_values, neighbors, 1) results.append(result) return results"},{"question":"Write a function to check whether a given number is a \'Beautiful Number\'. A number is considered beautiful if it satisfies the following conditions: 1. It is a positive integer. 2. Each digit of the number is a prime digit (2, 3, 5, or 7). 3. The number itself is a prime number. For example: - 23 is a beautiful number because its digits (2 and 3) are prime and the number itself is prime. - 35 is not a beautiful number because, even though its digits (3 and 5) are prime, the number 35 is not prime. Example 1: Input: n = 23 Output: Yes Explanation: The number 23 contains only prime digits (2 and 3) and the number 23 itself is prime. Example 2: Input: n = 22 Output: No Explanation: The number 22 contains only prime digits (2 and 2) but the number 22 itself is not prime. Your Task: You do not need to read input or print anything. Your task is to complete the function isBeautifulNumber() which takes an integer n as input parameter and returns a string \\"Yes\\" if the number is beautiful, otherwise returns \\"No\\". Expected Time Complexity: O(sqrt(N)) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^{6}","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2 or num == 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def isBeautifulNumber(n): Function to check if the given number is a beautiful number. prime_digits = {\'2\', \'3\', \'5\', \'7\'} str_n = str(n) # Check if all digits are prime digits if any(digit not in prime_digits for digit in str_n): return \\"No\\" # Check if the number itself is prime if is_prime(n): return \\"Yes\\" else: return \\"No\\""},{"question":"You are given an array of integers where the integers can be both positive and negative. Your task is to find the subarray with the maximum possible sum and return that sum. If there are multiple subarrays with the same maximum sum, you may return the sum of any of them. **Function Signature:** ```python def max_subarray_sum(arr: List[int]) -> int: pass ``` **Input:** - A single list of integers, `arr` (1 ≤ len(arr) ≤ 10^5, −10^4 ≤ arr[i] ≤ 10^4). **Output:** - A single integer representing the maximum possible sum of a subarray. **Examples:** 1. **Input:** ```python arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] ``` **Output:** ```python 6 ``` **Explanation:** The subarray `[4, -1, 2, 1]` has the maximum sum of `6`. 2. **Input:** ```python arr = [1, 2, 3, 4, 5] ``` **Output:** ```python 15 ``` **Explanation:** The entire array `[1, 2, 3, 4, 5]` has the maximum sum of `15`. 3. **Input:** ```python arr = [-1, -2, -3, -4] ``` **Output:** ```python -1 ``` **Explanation:** The subarray `[-1]` has the maximum sum of `-1`.","solution":"from typing import List def max_subarray_sum(arr: List[int]) -> int: # Using Kadane\'s algorithm to find the maximum subarray sum max_so_far = arr[0] max_ending_here = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a function to determine if it is possible to rearrange the letters in a given string so that no two adjacent characters are the same. Constraints * The input string contains only lowercase English letters. * The length of the input string is between 1 and 100, inclusive. Input The input is given from Standard Input in the following format: s Output If it\'s possible to rearrange the string as described, print `YES`. Otherwise, print `NO`. Examples Input aabb Output YES Input aaab Output NO Input abcabc Output YES Input aabbccddeeffgg Output YES","solution":"def can_rearrange(s): Determines if it is possible to rearrange the letters in the given string so that no two adjacent characters are the same. from collections import Counter counts = Counter(s) max_freq = max(counts.values()) # If any character occurs more than (len(s) + 1) // 2 times, it\'s impossible to rearrange if max_freq > (len(s) + 1) // 2: return \\"NO\\" return \\"YES\\" # Example usage: # s = input().strip() # print(can_rearrange(s))"},{"question":"Given a positive integer N, find the largest prime number that is strictly less than N. Recall that a number is prime if its only divisors are 1 and itself, and it is greater than 1. For example, 2, 3, 5, 7, 11, and 13 are primes. Example 1: Input: 10 Output: 7 Example 2: Input: 30 Output: 29 Example 3: Input: 17 Output: 13 Note: 2 <= N <= 10^7 The answer is guaranteed to exist for the given range of N.","solution":"def largest_prime_less_than_n(N): Returns the largest prime number strictly less than N. if N <= 2: return None # Function to determine if a number is prime def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True # Start from N-1 and find the highest prime number for number in range(N - 1, 1, -1): if is_prime(number): return number"},{"question":"Given a sorted array of distinct integers, determine if there exists a pair of elements with a specific difference k. Your task is to implement the function `findPairWithDifference` that checks for the existence of such a pair. Example 1: Input: arr = [1, 5, 9, 14], k = 4 Output: True Explanation: 5 and 9 have a difference of 4. Example 2: Input: arr = [10, 20, 30, 40, 50], k = 35 Output: False Explanation: No pair has a difference of 35. Example 3: Input: arr = [-5, -3, 0, 7, 12], k = 7 Output: True Explanation: -3 and 4 have a difference of 7. Your Task: You don\'t need to read input or print anything. Implement the function `findPairWithDifference` which takes a sorted array `arr` and an integer `k` as input parameters and returns a boolean value indicating whether such a pair exists. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |arr| ≤ 10^{5} -10^{9} ≤ arr[i] ≤ 10^{9} 0 ≤ k ≤ 10^{9}","solution":"def findPairWithDifference(arr, k): Determines if there exists a pair of elements in the sorted array `arr` with a specific difference `k`. Args: arr (list of int): The sorted array of distinct integers. k (int): The specific difference to find. Returns: bool: True if such a pair exists, otherwise False. left, right = 0, 1 while right < len(arr): if left == right: right += 1 continue diff = arr[right] - arr[left] if diff == k: return True elif diff < k: right += 1 else: left += 1 return False"},{"question":"An e-commerce company processes orders through a series of warehouses before delivering them to customers. Each warehouse is represented as a node in a directed graph, and each edge between nodes represents a route through which products can be transported. The company wants to ensure that there is a path available from a designated \\"start\\" warehouse to each destination warehouse. However, due to a recent audit, the company found that some warehouses have incorrect routing configuration, making it impossible to reach certain destinations from the start warehouse. The company wants to add the minimal number of directed edges (routes) to ensure there\'s a path from the start warehouse to each destination warehouse. You are given the number of warehouses, a list of directed edges representing the existing routes, and the start warehouse. Your task is to determine the minimal number of additional routes needed to ensure all warehouses are reachable from the start warehouse. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 100,000; 0 ≤ m ≤ 300,000), the number of warehouses (nodes) and the number of existing routes (directed edges). The second line contains an integer s (1 ≤ s ≤ n), the designated start warehouse. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing a directed edge from node u to node v. -----Output----- Print the minimal number of additional routes needed to ensure all warehouses are reachable from the start warehouse. -----Examples----- Input 5 4 1 1 2 2 3 4 5 5 1 Output 2 Input 3 2 2 2 3 3 1 Output 0 -----Explanation----- In the first example, the given graph has nodes 1, 2, and 3 connected but nodes 4 and 5 are isolated in another subgraph. To make all nodes reachable from node 1, we need to add two edges: one from 3 to 4 and another from 4 to 1 or from 3 to 5. In the second example, all nodes are already reachable from node 2. No additional routes are needed.","solution":"from collections import defaultdict, deque def minimal_additional_routes(n, m, s, edges): def bfs(start, graph): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return visited # Create graph from edges graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Find all reachable nodes from start reachable_from_start = bfs(s, graph) # Detect all nodes all_nodes = set(range(1, n + 1)) # Find unreachable nodes from start unreachable_nodes = [i for i in all_nodes if not reachable_from_start[i]] # Reverse graph reverse_graph = defaultdict(list) for u, v in edges: reverse_graph[v].append(u) reverse_reachable_from_unreachable = set() for node in unreachable_nodes: visited = bfs(node, reverse_graph) reverse_reachable_from_unreachable.update(node for node, v in enumerate(visited) if v) # Find set difference need_links = reverse_reachable_from_unreachable - set(node for node in all_nodes if reachable_from_start[node]) return len(need_links)"},{"question":"You\'ve been tasked with creating a tool to help classify reviews by sentiment. Each review can either be positive, negative, or neutral. You must write a program that predicts the sentiment based on the text of the review. You\'ll receive a training set of reviews to develop your sentiment analysis model. The dataset will consist of three directories named \\"positive\\", \\"negative\\", and \\"neutral\\". Each of these directories will contain plain text files, where each file\'s content corresponds to a single review. The directory names indicate the sentiment of the reviews within them. For the given problem: 1. You can download the training set of reviews at the following link: http://download4.sentiment.com/train_sent.zip. The archive contains three directories as described above. 2. Each text file in these directories is a plain text file containing exactly one review. Your task is to create a program that can predict the sentiment of a new given review. Input The input consists of multiple lines: 1. First line contains an integer id (0 ≤ id ≤ 106) — the review identifier. 2. Second line contains the name of the review file. 3. Subsequent lines contain the review text. The review text will fit in a single file of size of no more than 10 kilobytes. It is guaranteed that the new reviews will correspond to one of the sentiments (positive, negative, neutral) present in the training set. Output Print \\"positive\\", \\"negative\\", or \\"neutral\\" — the sentiment the given review corresponds to. Example Input: ``` 12345 review_example.txt The product exceeded my expectations and the delivery was prompt. ``` Output: ``` positive ``` Note: The goal is to predict the sentiment of the review based on the training set you downloaded. Use any appropriate machine learning or rule-based approach to solve this problem.","solution":"import os import string from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.pipeline import make_pipeline import joblib def load_training_data(training_path): texts, labels = [], [] for sentiment in [\'positive\', \'negative\', \'neutral\']: dir_path = os.path.join(training_path, sentiment) for filename in os.listdir(dir_path): file_path = os.path.join(dir_path, filename) with open(file_path, \'r\', encoding=\'utf-8\') as file: texts.append(file.read()) labels.append(sentiment) return texts, labels def train_model(training_path): texts, labels = load_training_data(training_path) model = make_pipeline(TfidfVectorizer(), MultinomialNB()) model.fit(texts, labels) joblib.dump(model, \'sentiment_model.pkl\') return model def load_model(): return joblib.load(\'sentiment_model.pkl\') def predict_sentiment(review_text, model): return model.predict([review_text])[0] def main(): training_path = \'train_sent\' # The path of the training dataset # Uncomment the following line to train the model. # train_model(training_path) # Load the previously trained model model = load_model() import sys input = sys.stdin.read data = input().strip().split(\'n\') # Get the review text from the input review_text = \\" \\".join(data[2:]) # Predict the sentiment of the review sentiment = predict_sentiment(review_text, model) print(sentiment) if __name__ == \\"__main__\\": main()"},{"question":"A theater has a system of advanced ticket reservations for upcoming shows. Customers can reserve tickets which are identified by a unique ticket ID. Ticket IDs are assigned in an increasing order starting from 1. However, sometimes customers might cancel their reservations, making those ticket IDs available again. The theater management wants to implement a function to find the smallest available ticket ID that can be used for a new reservation. If all the ticket IDs from 1 up to the highest current ticket ID are already reserved and none are available, the function should return the next highest ticket ID. Implement the function `next_available_ticket_id(reserved_tickets)` that takes a list of integers `reserved_tickets`, indicating the ticket IDs that are currently reserved, and returns the smallest available ticket ID that can be used for a new reservation. -----Input----- The input is a single list of integers representing the ticket IDs that are currently reserved. Each integer in the list is between 1 and 10^9 and there may be up to 10^6 ticket IDs reserved. -----Output----- The function should return the smallest available ticket ID, which is an integer. -----Examples----- Input [3, 5, 1, 2] Output 4 Input [1, 2, 3, 4] Output 5 Input [6, 4, 2, 1] Output 3 -----Note----- In the first example, the smallest available ticket ID is 4 since tickets 1, 2, 3, and 5 are already reserved. In the second example, all tickets from 1 to 4 are reserved, so the next available ticket ID is 5. In the third example, tickets 1, 2, 4, and 6 are reserved, and thus, the smallest available ticket ID is 3.","solution":"def next_available_ticket_id(reserved_tickets): Returns the smallest available ticket ID for a new reservation. Parameters: reserved_tickets (list of int): The list of currently reserved ticket IDs. Returns: int: The smallest available ticket ID. if not reserved_tickets: return 1 reserved_set = set(reserved_tickets) i = 1 while i in reserved_set: i += 1 return i"},{"question":"# Task You are tasked with implementing a system to sort a list of reservations for a hotel by their check-in date. Each reservation is represented by an object with the following properties: - `reservationId`: a unique identifier for the reservation. - `guestName`: the name of the guest who made the reservation. - `checkInDate`: the date the guest is checking in, represented in the format \\"YYYY-MM-DD\\". You will be given an array of reservation objects, and your goal is to return a new array with the reservations sorted by their `checkInDate` in ascending order. # Input/Output `[input]` array of objects `reservations` An array containing reservations where each reservation has the properties `reservationId`, `guestName`, and `checkInDate`. It is guaranteed that no `checkInDate` is the same across the reservations. `[output]` array of objects A new array with the reservations sorted by the `checkInDate` in ascending order. # Example For ``` reservations = [ { reservationId: 1, guestName: \\"Alice\\", checkInDate: \\"2023-10-01\\" }, { reservationId: 2, guestName: \\"Bob\\", checkInDate: \\"2023-09-27\\" }, { reservationId: 3, guestName: \\"Charlie\\", checkInDate: \\"2023-10-05\\" } ] ``` the output should be ``` [ { reservationId: 2, guestName: \\"Bob\\", checkInDate: \\"2023-09-27\\" }, { reservationId: 1, guestName: \\"Alice\\", checkInDate: \\"2023-10-01\\" }, { reservationId: 3, guestName: \\"Charlie\\", checkInDate: \\"2023-10-05\\" } ] ``` For ``` reservations = [ { reservationId: 1, guestName: \\"Diana\\", checkInDate: \\"2023-08-15\\" }, { reservationId: 2, guestName: \\"Eve\\", checkInDate: \\"2023-08-10\\" }, { reservationId: 3, guestName: \\"Frank\\", checkInDate: \\"2023-07-30\\" } ] ``` the output should be ``` [ { reservationId: 3, guestName: \\"Frank\\", checkInDate: \\"2023-07-30\\" }, { reservationId: 2, guestName: \\"Eve\\", checkInDate: \\"2023-08-10\\" }, { reservationId: 1, guestName: \\"Diana\\", checkInDate: \\"2023-08-15\\" } ] ```","solution":"def sort_reservations_by_checkin_date(reservations): Sorts a list of reservation objects by their check-in date in ascending order. :param reservations: List[dict] - List of reservation objects. :return: List[dict] - Sorted list of reservation objects. return sorted(reservations, key=lambda x: x[\'checkInDate\'])"},{"question":"You are given a list of integers which represents a sequence. Your task is to find the longest subsequence of consecutive numbers in the list. A consecutive number is defined as a number that follows sequentially. For example, in the sequence [100, 4, 200, 1, 3, 2], the longest subsequence of consecutive numbers is [1, 2, 3, 4] which has a length of 4. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of integers in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. -----Output----- Output the length of the longest subsequence of consecutive numbers in the list. -----Examples----- Input 6 100 4 200 1 3 2 Output 4 Input 4 1 2 3 4 Output 4 Input 5 10 5 15 20 25 Output 1 -----Note----- In the first example, the longest subsequence of consecutive numbers is [1, 2, 3, 4], which has a length of 4. In the second example, the entire sequence [1, 2, 3, 4] is consecutive, so the longest consecutive subsequence is the same as the input sequence, which has a length of 4. In the third example, there are no consecutive numbers, so the longest sequence of consecutive numbers has a length of 1.","solution":"def longest_consecutive_subsequence(sequence): Returns the length of the longest subsequence of consecutive numbers in the list. if not sequence: return 0 num_set = set(sequence) longest = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest = max(longest, current_streak) return longest"},{"question":"You have been contracted to create a program to validate passwords based on a set of given rules for a new application. The application has the following password rules: 1. The password must be at least 8 characters long. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one digit. 5. The password must contain at least one special character from the set: !@#%^&*()-+ Your task is to write a function that receives a list of passwords and returns a list indicating whether each password is valid based on the above rules. ----Input---- The input consists of: - An integer m (1 leq m leq 100), the number of passwords. - m lines, each containing a password of up to 100 characters. ----Output---- For each password, print \\"VALID\\" if the password meets all the criteria, otherwise print \\"INVALID\\". ----Examples---- Sample Input: 3 Password1! Pass1! Password P@ssw0rd Sample Output: INVALID INVALID INVALID VALID","solution":"import re def validate_passwords(passwords): Validate a list of passwords based on specific rules: - At least 8 characters long - At least one uppercase letter - At least one lowercase letter - At least one digit - At least one special character (!@#%^&*()-+) Args: - passwords (list of str): List of passwords to be validated. Returns: - List of str: \\"VALID\\" or \\"INVALID\\" for each password. results = [] special_characters = re.compile(r\'[!@#%^&*()-+]\') for password in passwords: if (len(password) >= 8 and any(c.isupper() for c in password) and any(c.islower() for c in password) and any(c.isdigit() for c in password) and special_characters.search(password)): results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"You are given a list of integers. Your task is to format this list into a string, such that each integer is separated by a colon (\\":\\"). Additionally, this formatted string should not have any leading or trailing colons. Concept The join() method is a string method, and \'join(sequence)\' works by concatenating the elements of the sequence provided with the specified separator. For example: >> list_of_strings = [\'apple\', \'banana\', \'cherry\'] >> formatted_string = \':\'.join(list_of_strings) This will result in the string \\"apple:banana:cherry\\". Complete the function format_list in the editor below. format_list has the following parameter: * list_of_integers: a list of integers Returns: * string: a formatted string of integers separated by colons Input Format The first line contains an integer N, the number of elements in the list. The next N lines each contain an integer, an element of the list. Constraints 1 <= N <= 100 Each integer in the list is between -1,000 and 1,000. Sample Input 4 34 -2 78 14 Sample Output 34:-2:78:14","solution":"def format_list(list_of_integers): Formats a list of integers into a string separated by colons. Parameters: list_of_integers (list): A list of integers. Returns: str: A colon-separated string of integers. return \':\'.join(map(str, list_of_integers))"},{"question":"A software company is designing a game where players navigate through a grid of cells. Each cell can either be empty or contain an obstacle. The objective of the game is to reach the bottom-right cell of the grid, starting from the top-left cell, moving only right or down at any point in time. Given the grid\'s dimensions (M, N) and the grid itself, find out how many possible unique paths the player can take to reach the goal. Note that the player cannot go through cells with obstacles. Write a function numUniquePaths(M, N, grid) that returns the number of unique paths to reach the bottom-right cell. If there is no valid path, return 0. Example 1: Input: M = 3, N = 3 grid = [[0, 0, 0], [0, 1, 0], [0, 0, 0]] Output: 2 Explanation: There are two possible paths (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) and (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3). Example 2: Input: M = 3, N = 3 grid = [[0, 1, 0], [0, 1, 0], [0, 0, 0]] Output: 1 Explanation: Only one path is possible which is (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3). Your Task: You don\'t need to read or print anything. Your task is to implement the function numUniquePaths which takes M, N, and grid as input parameters and returns the number of unique paths from the top-left cell to the bottom-right cell. Expected Time Complexity: O(M * N) Expected Space Complexity: O(M * N) Constraints: 1 ≤ M, N ≤ 100 grid[i][j] is either 0 (empty) or 1 (obstacle)","solution":"def numUniquePaths(M, N, grid): Returns the number of unique paths from the top-left to the bottom-right in a grid with obstacles. if grid[0][0] == 1 or grid[M-1][N-1] == 1: return 0 dp = [[0] * N for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[M-1][N-1]"},{"question":"A wildlife photography enthusiast is hiking through a forest containing a variety of flora and fauna. To capture the perfect moments, the photographer needs to choose specific settings on their camera. Each setting is represented by a certain value, and the optimal photo can only be taken if a contiguous subarray of camera settings exactly matches predetermined conditions. The photographer has n settings values to choose from, with each value being one of m possible types. The settings for the optimal photo must use exactly c_1 settings of type 1, c_2 settings of type 2, ... c_{m} settings of type m. Your task is to determine if there exists a contiguous subarray of the settings that meets these requirements. -----Input----- The first line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ n). The second line contains n integers representing the settings values, each in the range {1, 2, ..., m}. The third line contains m integers c_1, c_2, ..., c_{m} (with 1 ≤ ∑_{i=1}^{m} c_i ≤ n) representing the exact number of settings of each type needed. -----Output----- Output YES if there exists a contiguous subarray that matches the desired counts of each setting type, or NO if such a subarray does not exist. -----Example----- Input 6 3 1 2 2 1 3 2 1 2 1 Output YES","solution":"def can_capture_optimal_photo(n, m, settings, required_counts): Determines if there exists a contiguous subarray of the settings that meets the requirement of exact counts of each type. Args: n: int - the number of settings m: int - the number of possible types of settings settings: list[int] - the settings values required_counts: list[int] - the required exact counts of each setting type Returns: str - \\"YES\\" if there exists such a subarray, \\"NO\\" otherwise from collections import Counter desired_count = Counter() for i in range(m): desired_count[i + 1] = required_counts[i] for start in range(n): current_count = Counter() for end in range(start, n): current_count[settings[end]] += 1 if current_count == desired_count: return \\"YES\\" return \\"NO\\""},{"question":"H: Mastermind / Code-breaker # story Mastermind is a classic code-breaking game for two players. One player sets a secret code, and the other tries to guess it. The code-setter gives feedback on how many guesses are correct in both color and position and how many are correct in color but not in the correct position. Now, you have to implement a simplified version of the game where the secret code and guesses consist of numeric digits only. # problem As a mastermind game system, create a program that simulates the interaction between the guesser and the system. The system has a secret numeric code C of length L. The guesser will input a series of guesses trying to break the code. After each guess G, the system should return feedback in the form of two numbers: 1. The number of digits in G that are correct in both value and position. 2. The number of digits in G that are correct in value but wrong in position. The game continues until the guesser correctly guesses the secret code or until a maximum number of attempts K is reached. If the guesser breaks the code, print \\"Congrats! You\'ve broken the code in X attempts.\\", where X is the number of attempts taken. If the maximum attempts are reached without breaking the code, print \\"Sorry! You\'ve used all attempts.\\" # Input / output format First, the input is given in the following format: ``` L K C ``` The first line contains two integers L and K representing the length of the secret code and the maximum number of attempts respectively, separated by a space. The second line contains a string C of length L, representing the secret code. Next, the guesser inputs a series of guesses, each guess being a string of length L. For each guess, the system outputs the feedback in the following format: ``` correct_position correct_value ``` Where `correct_position` is the number of digits in the guess that are in correct position, and `correct_value` is the number of digits that are correct in value but in the wrong position. # Constraints * 1 ≤ L ≤ 10 * 1 ≤ K ≤ 100 * C contains only numeric digits \'0\'-\'9\'. * G (the guess) will also contain only numeric digits \'0\'-\'9\' and have a length of L. # Examples Example 1 Input: ``` 4 10 1234 ``` User Input / System Output: ``` 5678 0 0 1235 3 0 1243 2 2 1234 4 0 Congrats! You\'ve broken the code in 4 attempts. ``` Example 2 Input: ``` 3 5 987 ``` User Input / System Output: ``` 123 0 0 987 3 0 Congrats! You\'ve broken the code in 2 attempts. ``` Example 3 Input: ``` 3 3 567 ``` User Input / System Output: ``` 123 0 0 456 1 1 789 0 1 Sorry! You\'ve used all attempts. ```","solution":"def feedback(secret, guess): Function to provide feedback on the guess based on the secret code. Returns a tuple (correct_position, correct_value). correct_position = 0 correct_value = 0 secret_used = [False] * len(secret) guess_used = [False] * len(guess) # First pass: count correct positions for i in range(len(secret)): if secret[i] == guess[i]: correct_position += 1 secret_used[i] = True guess_used[i] = True # Second pass: count correct values in wrong positions for i in range(len(guess)): if not guess_used[i]: for j in range(len(secret)): if not secret_used[j] and guess[i] == secret[j]: correct_value += 1 secret_used[j] = True break return correct_position, correct_value def mastermind_game(L, K, C, guesses): Simulates the mastermind game with the given secret code C of length L and maximum attempts K. guesses is a list of the guesses made by the guesser. Outputs the result or feedback after each guess. attempts = 0 for G in guesses: attempts += 1 correct_position, correct_value = feedback(C, G) print(f\\"{correct_position} {correct_value}\\") if correct_position == L: print(f\\"Congrats! You\'ve broken the code in {attempts} attempts.\\") return if attempts == K: print(\\"Sorry! You\'ve used all attempts.\\") # Example Usage: # mastermind_game(4, 10, \\"1234\\", [\\"5678\\", \\"1235\\", \\"1243\\", \\"1234\\"])"},{"question":"The Local Gaming Convention (LGC) is fast approaching, and the organizers expect a record number of participants arriving this year. The convention features numerous activities and games, but unfortunately, due to space limitations, not all participants can participate together in some events. To maximize fun and ensure everyone gets a chance to engage in activities of their choice, they need to group participants effectively. Each participant has listed their preferences for up to three games they are most excited about. The organizers want to divide the participants into two groups where each group can be moved to different activity zones. The challenge is to divide the participants such that the difference in the number of game preferences between the two groups is minimized. Additionally, each group should have roughly the same number of participants. -----Input----- The first line of input contains an integer 4 leq n leq 300, the number of participants, and the next n lines each contain up to three integers representing the game preferences of each participant. Games are numbered from 1 to 50. -----Output----- Output a single integer representing the minimal difference in the total number of game preferences between the two groups. If it is not possible to achieve an exactly equal number of participants in each group, output the string ’Unbalanced’. -----Examples----- Sample Input: 4 1 2 3 2 3 4 1 3 5 2 4 6 Sample Output: 0 Sample Input: 5 1 2 3 2 3 4 1 3 5 2 4 6 7 8 9 Sample Output: Unbalanced","solution":"def min_diff(n, preferences): from itertools import combinations if n % 2 != 0: return \'Unbalanced\' all_preferences = [0] * 51 total_preferences = [0, 0] for pref in preferences: for game in pref: all_preferences[game] += 1 total_preferences[0] += 1 group1_preferences = all_preferences.copy() min_difference = float(\'inf\') for comb in combinations(range(n), n//2): temp_preferences = [0] * 51 temp_total = 0 for idx in comb: for game in preferences[idx]: temp_preferences[game] += 1 temp_total += 1 group2_preferences = [all_preferences[i] - temp_preferences[i] for i in range(51)] total_group2 = total_preferences[0] - temp_total difference = abs(temp_total - total_group2) min_difference = min(min_difference, difference) return min_difference"},{"question":"You are given an array of strings `words` and a string `pattern`. Return a list of the strings in `words` that match the pattern. You may return the answer in any order. A string matches the pattern if there exists a permutation of letters such that `words[i]` matches `pattern`, where a permutation of letters is a bijective mapping from a letter to another letter. Example 1: Input: words = [\\"abc\\",\\"deq\\",\\"mee\\",\\"aqq\\",\\"dkd\\",\\"ccc\\"], pattern = \\"abb\\" Output: [\\"mee\\",\\"aqq\\"] Explanation: \\"mee\\" matches the pattern because there is a permutation {m -> a, e -> b}. \\"aqq\\" matches the pattern because there is a permutation {a -> a, q -> b}. Example 2: Input: words = [\\"a\\",\\"b\\",\\"c\\"], pattern = \\"a\\" Output: [\\"a\\",\\"b\\",\\"c\\"] Constraints: 1 <= words.length <= 50 1 <= pattern.length <= 20 All strings in words and pattern are of the same length.","solution":"def find_and_replace_pattern(words, pattern): Returns a list of the strings in words that match the pattern. def matches(word, pattern): if len(word) != len(pattern): return False char_map_w_p = {} char_map_p_w = {} for w_char, p_char in zip(word, pattern): if w_char not in char_map_w_p: char_map_w_p[w_char] = p_char if p_char not in char_map_p_w: char_map_p_w[p_char] = w_char if char_map_w_p[w_char] != p_char or char_map_p_w[p_char] != w_char: return False return True return [word for word in words if matches(word, pattern)]"},{"question":"You are working on a project that requires you to process a list of dates. Your task is to write a function that **determines if a given date (in the format \'YYYY-MM-DD\') is a weekend or a weekday**. The function should take in a string representing the date and return one of two strings: `\\"Weekend\\"` or `\\"Weekday\\"`. If the input is not a valid date or not in the \'YYYY-MM-DD\' format, the function should return `\\"Invalid date\\"`. For example, checkDay(\'2023-10-14\') // returns \'Weekend\' checkDay(\'2023-10-11\') // returns \'Weekday\' checkDay(\'2023-02-30\') // returns \'Invalid date\' checkDay(\'not-a-date\') // returns \'Invalid date\' Notes: * Use the `datetime` module in Python. * You should handle leap years when checking for valid dates. * Consider edge cases like months with varying days (`e.g., February with 28/29 days, April with 30 days, etc.`). The tests will check if: 1. The function correctly identifies weekends (Saturday and Sunday). 2. The function correctly identifies weekdays (Monday to Friday). 3. The function returns `\\"Invalid date\\"` for inputs not in the \'YYYY-MM-DD\' format. 4. The function handles edge cases like invalid dates and leap years. 5. The function adheres to the required output format.","solution":"import datetime def checkDay(date_str): Determines if a given date (in the format \'YYYY-MM-DD\') is a weekend or a weekday. Parameters: - date_str: A string representing the date. Returns: - \\"Weekend\\" if the date is Saturday or Sunday. - \\"Weekday\\" if the date is between Monday and Friday. - \\"Invalid date\\" if the input is not a valid date or not in the \'YYYY-MM-DD\' format. try: date_obj = datetime.datetime.strptime(date_str, \'%Y-%m-%d\').date() except ValueError: return \\"Invalid date\\" if date_obj.weekday() in [5, 6]: # 5: Saturday, 6: Sunday return \\"Weekend\\" else: return \\"Weekday\\""},{"question":"Problem: Given a sequence of n non-negative integers, your task is to find the length of the longest subsequence where the difference between consecutive elements is exactly equal to a given integer k. Constraints The input satisfies the following conditions. * 1 leq n leq 10^5 * 0 leq a_i leq 10^9 for each a_i * 0 leq k leq 10^9 Input The input is given in the following format: n k a_1 a_2 a_3 ldots a_n The first line contains two integers n and k. The second line contains n space-separated non-negative integers a_1, a_2, ..., a_n . Output Print the length of the longest subsequence meeting the stated condition on one line. Examples Input 7 2 1 3 5 7 9 11 13 Output 7 Input 5 1 4 4 4 4 4 Output 1 Input 8 3 1 4 1 7 4 4 16 13 Output 2 Input 6 0 3 3 3 3 3 3 Output 6","solution":"def longest_subsequence(n, k, arr): Returns the length of the longest subsequence where the difference between consecutive elements is exactly equal to a given integer k. if n == 0: return 0 longest_len = 1 current_len = 1 for i in range(1, n): if arr[i] - arr[i-1] == k: current_len += 1 else: current_len = 1 longest_len = max(longest_len, current_len) return longest_len"},{"question":"Given an array of integers, write a function to find the smallest missing positive integer. In other words, given an array, find the smallest positive integer that is not present in the array. Example 1: Input: [1, 2, 0] Output: 3 Example 2: Input: [3, 4, -1, 1] Output: 2 Example 3: Input: [7, 8, 9, 11, 12] Output: 1 Your Task: Since this is a function problem, you don\'t have to take input. Just complete the function `findSmallestMissingPositive()` that takes an array of integers as parameter and returns the smallest missing positive integer. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - The length of the array is between 1 and 10^6. - The elements of the array are between -10^6 and 10^6. Function Signature: ```python def findSmallestMissingPositive(nums: List[int]) -> int: ```","solution":"from typing import List def findSmallestMissingPositive(nums: List[int]) -> int: n = len(nums) # Helper function to place numbers in their respective positions def place_numbers(): for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] place_numbers() # Finding the smallest missing positive number for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Given an array of N integers, you need to partition the array into two subarrays in such a way that the difference in the sum of the two subarrays is minimized. Write a function partitionArray(int arr[], int N) that returns an integer representing the minimum difference. Example: Input: N = 4 arr[] = {1, 6, 11, 5} Output: 1 Explanation: The array can be partitioned into {1, 5, 6} and {11}. The difference in the sum of these subsets is 1, which is the smallest possible. Your Task: You don\'t need to read input or print anything. Your task is to complete the function partitionArray() which takes an array arr[] and an integer N as inputs and returns an integer representing the minimum difference between the sums of the two subarrays. Expected Time Complexity: O(N * sum/2) Expected Auxiliary Space: O(N * sum/2) Constraints: 1 <= N <= 100 1 <= arr[i] <= 2000","solution":"def partitionArray(arr, N): Returns the minimum difference between sums of two subarrays. total_sum = sum(arr) target = total_sum // 2 # Initialize a DP array dp = [False] * (target + 1) dp[0] = True for num in arr: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] for i in range(target, -1, -1): if dp[i]: return total_sum - 2 * i return total_sum # Example usage: # print(partitionArray([1, 6, 11, 5], 4)) # Output: 1"},{"question":"Given a string S and an integer N as input, compress the string such that consecutive characters that appear N or more times in a row are replaced by the character followed by the count of its occurrences. If a character appears consecutively fewer than N times, it remains as is in the output string. Example 1: Input: S = \\"aaabccccd\\", N = 3 Output: \\"a3bc4d\\" Explanation: \'a\' appears 3 times, so it is replaced with \'a3\'. \'c\' appears 4 times, so it is replaced with \'c4\'. \'b\' and \'d\' appear fewer than 3 times, so they remain unchanged. Example 2: Input: S = \\"aabbcc\\", N = 2 Output: \\"a2b2c2\\" Explanation: \'a\', \'b\' and \'c\' each appear exactly 2 times, so they are replaced with \'a2\', \'b2\' and \'c2\'. Example 3: Input: S = \\"abc\\", N = 3 Output: \\"abc\\" Explanation: No character appears 3 or more times consecutively, so the string remains unchanged. Your Task: You don\'t need to read input or print anything. Complete the function compressString() which takes S and N as input parameters and returns the compressed string. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 1000 1 <= N <= 100","solution":"def compressString(S, N): compressed = [] i = 0 length = len(S) while i < length: count = 1 while i + 1 < length and S[i] == S[i + 1]: count += 1 i += 1 if count >= N: compressed.append(f\\"{S[i]}{count}\\") else: compressed.append(S[i] * count) i += 1 return \'\'.join(compressed)"},{"question":"You are given a string of lowercase English letters. Your task is to find and return the first unique character in the string. A unique character is a character that appears only once in the string. If there are no unique characters, return an empty string. Write a function called `first_unique_char` that takes a string as input and returns the first unique character. # Examples ```python first_unique_char(\\"hello\\") # returns \\"h\\", as \\"h\\" is the first character that appears only once first_unique_char(\\"swiss\\") # returns \\"w\\", as \\"w\\" is the first character that appears only once first_unique_char(\\"aabbcc\\") # returns \\"\\", as there are no unique characters ``` # Constraints - The function should be case-insensitive (all input letters are lowercase). - The input string will have at least one character and at most 1000 characters.","solution":"def first_unique_char(s): Returns the first unique character in the string s. A unique character is one that appears only once in the string. If there are no unique characters, returns an empty string. char_count = {} # Count the occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char # If no unique character is found, return an empty string return \\"\\""},{"question":"You are given a list of integers. Write a program to find the longest consecutive subsequence (order matters) present in the list. Input The first line of the input contains an integer `n`, the number of integers in the list. The second line contains `n` space-separated integers, ranging from -10^6 to 10^6. Output Output the length of the longest consecutive subsequence in the list. Examples Input 7 100 4 200 1 3 2 102 103 104 Output 4 Input 6 10 12 11 10 8 7 6 Output 4","solution":"def longest_consecutive_subsequence(arr): Finds the length of the longest consecutive subsequence in the list. Parameters: arr (list): The list of integers. Returns: int: The length of the longest consecutive subsequence. if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"# Problem Description You are given an NxN grid filled with positive integers. Your task is to find the size of the largest sub-square which contains all unique values. A sub-square is defined as a square sub-grid within the NxN grid. # Constraints * 1 leq N leq 100 * The values in the grid are positive integers and fit in a 32-bit signed integer. # Input * The first line contains an integer N. * The next N lines contain N integers each, representing the grid. The value at the ith row and jth column of the grid is grid[i][j]. # Output * Print the size of the largest sub-square which contains all unique values. # Example Input ``` 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` Output ``` 4 ``` Input ``` 3 1 2 3 1 2 3 1 2 3 ``` Output ``` 1 ``` # Explanation In the first example, the entire grid is unique, making the largest sub-square size 4. In the second example, no more than 1 unique value sub-square can be found, so the largest sub-square that contains only unique values is of size 1.","solution":"def is_unique(grid, top, left, size): Check if sub-square starting at (top, left) of given size is unique seen = set() for i in range(top, top + size): for j in range(left, left + size): if grid[i][j] in seen: return False seen.add(grid[i][j]) return True def largest_unique_subsquare(grid, n): Return the size of the largest unique sub-square for size in range(n, 0, -1): for top in range(n - size + 1): for left in range(n - size + 1): if is_unique(grid, top, left, size): return size return 0 # Example usage: if __name__ == \\"__main__\\": n = int(input()) grid = [list(map(int, input().split())) for _ in range(n)] print(largest_unique_subsquare(grid, n))"},{"question":"You are given a list of students and their scores in three subjects: Mathematics, Physics, and Chemistry. Your task is to categorize each student based on their average score across these three subjects. The categories are as follows: - A student with an average score of 90 or above is categorized as \\"Excellent\\". - A student with an average score of 70 to 89 is categorized as \\"Good\\". - A student with an average score of 50 to 69 is categorized as \\"Average\\". - A student with an average score below 50 is categorized as \\"Poor\\". Write a program to determine the category for each student. ------ Input ------ The first line of the input contains a single integer N denoting the number of students. N lines follow. The i-th of these lines contains three space-separated integers M_i, P_i, C_i which are the scores in Mathematics, Physics, and Chemistry respectively. ------ Output ------ For each student, print a single line containing one string denoting the category of that student — one of the strings \\"Excellent\\", \\"Good\\", \\"Average\\", \\"Poor\\" (without quotes). ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ M_i, P_i, C_i ≤ 100 ----- Sample Input 1 ------ 5 95 90 92 70 75 80 45 50 40 85 80 82 60 65 58 ----- Sample Output 1 ------ Excellent Good Poor Good Average ----- Explanation 1 ------ The first student\'s average score is (95 + 90 + 92) / 3 = 92.33 which falls under the category \\"Excellent\\". The second student\'s average score is (70 + 75 + 80) / 3 = 75 which falls under the category \\"Good\\". The third student\'s average score is (45 + 50 + 40) / 3 = 45 which falls under the category \\"Poor\\". The fourth student\'s average score is (85 + 80 + 82) / 3 = 82.33 which falls under the category \\"Good\\". The fifth student\'s average score is (60 + 65 + 58) / 3 = 61 which falls under the category \\"Average\\".","solution":"def categorize_students(scores): Categorize students based on their average scores in Mathematics, Physics, and Chemistry. :param scores: List of tuples where each tuple contains three integers representing the scores in Mathematics, Physics, and Chemistry respectively. :return: List of strings representing the category of each student. categories = [] for math, phys, chem in scores: avg_score = (math + phys + chem) / 3 if avg_score >= 90: categories.append(\\"Excellent\\") elif avg_score >= 70: categories.append(\\"Good\\") elif avg_score >= 50: categories.append(\\"Average\\") else: categories.append(\\"Poor\\") return categories"},{"question":"An adventurer is exploring a mysterious forest and mapping out a path. The forest can be visualized as a 2D grid. Each cell in the grid may either be passable or an obstacle. The adventurer starts at the top-left corner and must reach the bottom-right corner of the grid, but they can only move either down or right at each step. Given a grid where \'0\' represents a passable cell and \'1\' represents an obstacle, determine the number of unique paths the adventurer can take to reach the bottom-right corner from the top-left corner. If there is no such path, return 0. ---Input--- The first line of input contains two integers m and n (1 ≤ m, n ≤ 100) – the number of rows and columns in the grid. Each of the next m lines contains n characters (\'0\' or \'1\') representing the cells in the grid. ---Output--- Print the number of unique paths the adventurer can take to reach the bottom-right corner. ---Examples--- Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 1 0 0 0 0 Output 1 ---Note--- In the first example, the adventurer can take two possible paths: 1. Right -> Right -> Down -> Down 2. Right -> Down -> Down -> Right In the second example, the only possible path is: Right -> Down (blocked) -> (Back to start) -> Down -> Down -> Right -> Right If there is an obstacle blocking the start or the end, the output should be 0.","solution":"def unique_paths(m, n, grid): # Edge case: if start or end is blocked, return 0 if grid[0][0] == \'1\' or grid[m-1][n-1] == \'1\': return 0 # Create a 2D dp array to store the number of ways to reach each cell dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Starting position for i in range(m): for j in range(n): if grid[i][j] == \'1\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Pascal\'s Triangle is a famous triangular array of the binomial coefficients. The rows of Pascal\'s Triangle are conventionally enumerated starting with row n = 0. The entries in each row are numbered from the left beginning with k = 0 and are usually staggered relative to the numbers in the adjacent rows. You are tasked with computing the k-th element of the n-th row in Pascal\'s Triangle. The value at the k-th position in the n-th row of Pascal\'s Triangle can be computed using the binomial coefficient formula: [ C(n, k) = frac{n!}{k! (n-k)!} ] Given n and k, calculate the value at the k-th position in the n-th row. -----Input----- The first line contains a single integer t (1 le t le 10^5) — the number of test cases. Then t test cases follow. Each test case contains two integers n and k (0 le k le n le 10^7). -----Output----- For each test case, print the value at the k-th position in the n-th row of Pascal\'s Triangle. -----Examples----- Input: 3 4 2 5 3 7 0 Output: 6 10 1 -----Note----- In the first test case, C(4, 2) = frac{4!}{2! (4-2)!} = frac{24}{4} = 6. In the second test case, C(5, 3) = frac{5!}{3! (5-3)!} = frac{120}{12} = 10. In the third test case, C(7, 0) = frac{7!}{0! (7-0)!} = 1.","solution":"import math def pascals_triangle_element(n, k): Returns the value at the k-th position in the n-th row of Pascal\'s Triangle. return math.comb(n, k) def process_test_cases(test_cases): Takes a list of tuples containing test cases and returns a list of results. Each test case is a tuple (n, k). results = [] for n, k in test_cases: results.append(pascals_triangle_element(n, k)) return results"},{"question":"Sarah has recently taken up vegetable gardening as a hobby. She has multiple types of seeds and a limited number of garden plots, where each plot can grow exactly one seed. She wants to maximize the number of different types of vegetables that grow at the same time. Sarah has `n` different types of seeds and `m` garden plots. Each type of vegetable can grow optimally in certain soil quality conditions, represented as an array of integers where each element describes how many of that type of seed Sarah has. However, due to limited plots, she cannot plant more seeds than the number of plots available. Sarah wants you to write a program to determine the highest number of distinct types of vegetables she can grow simultaneously in her garden plots. -----Input----- The input consists of two integers `n` and `m` where `1 <= n, m <= 1000` followed by an array of `n` integers where each integer represents the number of seeds of a particular type Sarah has: ``` n m s1 s2 s3 ... sn ``` -----Output----- Write a single line containing an integer `T` which represents the maximum number of distinct types of vegetables Sarah can grow simultaneously. -----Examples----- Sample Input 1: 5 3 1 2 3 4 5 Sample Output 1: 3 Sample Input 2: 6 10 2 2 2 2 2 2 Sample Output 2: 6","solution":"def max_distinct_types(n, m, seed_counts): Determine the highest number of distinct types of vegetables Sarah can grow simultaneously. Args: - n (int): Number of different types of seeds. - m (int): Number of available garden plots. - seed_counts (list of int): List of integers where each integer represents the number of seeds of a particular type Sarah has. Returns: - int: Maximum number of distinct types of vegetables Sarah can grow simultaneously. return min(n, m)"},{"question":"You are given a list of integer arrays. Your task is to write a function that finds the array with the maximum sum of its elements. If there are multiple arrays with the same maximum sum, return the first one from the input list. Input: - The first line of the input contains an integer T denoting the number of arrays. - The next T lines contain space-separated integers representing the arrays. Output: - Output the array with the maximum sum as a space-separated string of integers. Constraints: - 1 ≤ T ≤ 50 - Each array contains between 1 and 1000 integers, inclusive. - Each integer in the arrays is between -1000 and 1000, inclusive. SAMPLE INPUT 3 1 2 3 4 5 6 10 10 -20 20 SAMPLE OUTPUT 10 10 -20 20 Explanation: Test Case #1: The sums of the given arrays are 6, 15, and 20 respectively. The array with the maximum sum is the third array: \\"10 10 -20 20\\".","solution":"def find_max_sum_array(arrays): Returns the array with the maximum sum of its elements. If there are multiple arrays with the same maximum sum, return the first one. Params: arrays (List[List[int]]): A list of integer arrays. Returns: List[int]: The array with the maximum sum. max_sum = float(\'-inf\') max_array = [] for array in arrays: current_sum = sum(array) if current_sum > max_sum: max_sum = current_sum max_array = array return max_array # Example usage def main(): T = int(input()) arrays = [] for _ in range(T): arrays.append(list(map(int, input().split()))) result = find_max_sum_array(arrays) print(\' \'.join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string that contains a mix of letters and digits. Your task is to rearrange the string so that all the letters come before any digits while maintaining the relative order of the letters and digits. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a string S consisting of uppercase and lowercase English letters and digits. -----Output----- For each test case, print a single line containing the rearranged string. -----Constraints----- - 1 le T le 10^3 - 1 le |S| le 100 - S contains only uppercase/lowercase English letters and digits. -----Example Input----- 2 a1b2c3 123abc -----Example Output----- abc123 abc123 -----Explanation----- Example case 1: The input string \'a1b2c3\' is rearranged so that letters \'abc\' appear before the digits \'123\' while maintaining their relative order. Example case 2: The input string \'123abc\' is rearranged so that letters \'abc\' appear before the digits \'123\' while maintaining their relative order.","solution":"def rearrange_string(s): Returns the string with all letters before digits while maintaining the relative order of letters and digits. letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(letters + digits) def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(rearrange_string(s)) return results"},{"question":"Jon is participating in a coding challenge, and one of the tasks is to match strings. He is given two strings, s1 and s2, consisting of lowercase alphabetic characters. The goal is to determine the minimum number of operations required to transform s1 into s2. The operations allowed are: - Insert a character - Delete a character - Replace a character Help Jon find the minimum number of operations required to transform the first string into the second one. -----Input----- The first line contains the string s1 (1 ≤ |s1| ≤ 1000). The second line contains the string s2 (1 ≤ |s2| ≤ 1000). Both strings contain only lowercase alphabetic characters. -----Output----- Print a single integer, which is the minimum number of operations required to transform s1 into s2. -----Examples----- Input horse ros Output 3 Input intention execution Output 5","solution":"def min_distance(s1, s2): Determines the minimum number of operations required to transform string s1 into string s2. Args: s1 (str): The source string. s2 (str): The target string. Returns: int: The minimum number of operations. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): dp[i][0] = i for j in range(1, n + 1): dp[0][j] = j for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) return dp[m][n]"},{"question":"You are given a string S consisting of lowercase alphabets. You need to determine the number of substrings that start and end with the same character. ------ Input Format ------ - The first line contains T denoting the number of test cases. Then the test cases follow. - The first line of each test case contains a string S consisting of lowercase alphabets. ------ Output Format ------ For each test case, print a single line containing one integer - the number of substrings of S that start and end with the same character. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^{5} - Sum of lengths of all strings does not exceed 10^{6}. ------ Sample Input 1 ------ 2 abc aaa ------ Sample Output 1 ------ 3 6 ------ Explanation 1 ------ For test case 1: - The substrings are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". Only \\"a\\", \\"b\\", \\"c\\" start and end with the same character. Therefore, the answer is 3. For test case 2: - The substrings are: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\". All substrings start and end with the same character. Therefore, the answer is 6.","solution":"def count_substrings_with_same_start_and_end(s): Returns the number of substrings of s that start and end with the same character. char_count = [0] * 26 for char in s: char_count[ord(char) - ord(\'a\')] += 1 count = 0 for i in range(26): if char_count[i] > 0: count += (char_count[i] * (char_count[i] + 1)) // 2 return count def solve(test_cases): results = [] for s in test_cases: results.append(count_substrings_with_same_start_and_end(s)) return results"},{"question":"You are given an array of n integers, where each integer may have repetitions, but each integer can appear more than once in the array. The task is to find the subsequence of the array which appears exactly once in the array and is the longest among such subsequences. If multiple such subsequences are of the same length, print any of them. For example, for the array [4, 3, 4, 3, 7, 4, 3, 7, 3, 6], the subsequence [7, 6] fits the criteria as 7 and 6 appear exactly once and the length of the subsequence is 2. -----Input----- The first line contains an integer t (1 leq t leq 100) — the number of test cases. The next 2t lines contain the descriptions of the test cases. The first line of each test case description contains an integer n (1 leq n leq 100) — the length of the array. The second line consists of space-separated elements of the array a_i (1 leq a_i leq 1000). -----Output----- Print t answers to all input test cases. For each test case, print one line containing the longest subsequence, in the order those elements appeared in the input array, from the given array which appears exactly once. -----Example----- Input 3 10 4 3 4 3 7 4 3 7 3 6 5 1 2 2 3 1 5 5 5 5 5 5 Output 7 6 3","solution":"def find_longest_unique_subsequence(arr): Returns the longest subsequence of elements that appear exactly once in the array. from collections import Counter element_count = Counter(arr) unique_elements = [x for x in arr if element_count[x] == 1] return unique_elements def solve(t, test_cases): results = [] for case in test_cases: arr = case result = find_longest_unique_subsequence(arr) results.append(\' \'.join(map(str, result))) return results"},{"question":"In a parallel universe, the concept of a palindrome string is slightly different. A string is considered a \\"pseudo-palindrome\\" if removing at most one character from the string can make it a palindrome. Your task is to determine if a given string is a \\"pseudo-palindrome\\". -----Input----- The input contains a single string s (1 ≤ |s| ≤ 1,000,000) consisting of lowercase English letters. -----Output----- Output \\"YES\\" if the string is a pseudo-palindrome, otherwise print \\"NO\\". -----Examples----- Input abca Output YES Input abc Output NO -----Explanation----- In the first example, removing \'b\' from the string \\"abca\\" results in the palindrome \\"aca\\". Therefore, the output is \\"YES\\". In the second example, no single character can be removed to form a palindrome, so the output is \\"NO\\".","solution":"def is_pseudo_palindrome(s): Check if the string can be a pseudo-palindrome by removing at most one character. Parameters: s (str): The input string. Returns: str: \\"YES\\" if it\'s a pseudo-palindrome, otherwise \\"NO\\". def is_palindrome(sub): return sub == sub[::-1] left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: if is_palindrome(s[left:right]) or is_palindrome(s[left+1:right+1]): return \\"YES\\" else: return \\"NO\\" left += 1 right -= 1 return \\"YES\\" # Example usage: # s = \\"abca\\" # print(is_pseudo_palindrome(s)) # Output: \\"YES\\""},{"question":"Problem description. You are given a binary tree, and you need to perform several types of operations on it. Type 1: Insert a node to the binary tree. Type 2: Delete a node from the binary tree. Type 3: Find the maximum value in a specified range of levels in the tree (inclusive). Input Input description. The first line of the input contains an integer N and Q denoting the number of initial nodes in the tree and number of operations. Next N lines contain two integers representing the nodes currently in the binary tree, with the first value being the value of the node and the second being the level of the node (starting from level 1 for the root). Next Q lines contain queries of type 1, 2, and 3. Type 1: 1 v l (Insert a node with value v at level l) Type 2: 2 v (Delete the node with value v) Type 3: 3 L R (Find the maximum value in the nodes between levels L and R inclusive). Note: - The binary tree is a full binary tree initially. - Insert operation ensures that the node will be placed at an appropriate position to maintain the binary tree property. - If a delete operation tries to remove a node that doesn\'t exist, ignore the command. - For type 3 queries, if no nodes are present in the given range, return -1. Output Output description. For each query of type 3, output your answer. Constraints: 1 ≤ N, Q ≤ 100000 1 ≤ v ≤ 100000 1 ≤ l, L, R ≤ 100000 Example Input: 5 4 10 1 20 2 15 2 7 3 25 3 1 30 3 3 1 2 2 15 3 2 3 Output: 20 30","solution":"class BinaryTree: def __init__(self): self.nodes = {} # Dictionary to store the nodes with levels def insert(self, v, l): if l not in self.nodes: self.nodes[l] = set() self.nodes[l].add(v) def delete(self, v): for level in self.nodes: if v in self.nodes[level]: self.nodes[level].remove(v) if not self.nodes[level]: # Remove the level if no nodes remain del self.nodes[level] break def find_max_in_range(self, L, R): max_value = -1 for level in range(L, R + 1): if level in self.nodes: max_value = max(max_value, max(self.nodes[level])) return max_value def process_operations(n, q, initial_nodes, operations): bt = BinaryTree() for value, level in initial_nodes: bt.insert(value, level) results = [] for operation in operations: if operation[0] == 1: _, v, l = operation bt.insert(v, l) elif operation[0] == 2: _, v = operation bt.delete(v) elif operation[0] == 3: _, L, R = operation max_value = bt.find_max_in_range(L, R) results.append(max_value) return results"},{"question":"Selena is organizing a coding competition. Each participant is assigned a unique ID from 1 to n, and the participants will be split into k groups. Each group must contain consecutive participants, and all groups must be approximately the same size. Because of this, some groups may contain one more participant than others. The size difference between any two groups must be at most 1. Selena wants to construct these groups in a way that minimizes the sum of the smallest and largest group size differences. Help Selena determine the smallest possible sum of the maximum and minimum group size difference across all groups. -----Input----- The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains two integers n (1 ≤ n ≤ 10^9) and k (1 ≤ k ≤ 10^5), where n is the number of participants and k is the number of groups. -----Output----- For each test case, print one line containing the smallest possible sum of the maximum and minimum group size difference. -----Example----- Input 3 7 3 10 4 15 6 Output 1 1 1 -----Note----- In the first test case, the optimal group sizes are [3, 2, 2], giving a size difference of 0 (2-2) and 1 (3-2) with the sum being 1. In the second test case, the optimal group sizes are [3, 3, 2, 2], with a maximum size difference of 1 (3-2) and minimum of 0 (2-2), sum being 1. In the third test case, the optimal group sizes might be [3, 3, 3, 2, 2, 2], with a maximum size difference of 1 (3-2) and minimum of 0 (2-2), sum being 1.","solution":"def smallest_sum_of_differences(t, test_cases): results = [] for i in range(t): n, k = test_cases[i] # Total number of participants to distribute full_groups = n // k remainder = n % k if remainder == 0: results.append(0) # If evenly distributed, max - min difference will be 0 else: results.append(1) # If there is a remainder, max - min difference will be 1 return results # Input parsing function to handle raw input for testing def parse_inputs(input_list): t = int(input_list[0]) test_cases = [tuple(map(int, line.split())) for line in input_list[1:t+1]] return t, test_cases"},{"question":"You are playing a game where you have n monsters standing in a line, labeled from 1 to n. Each monster has a certain amount of health. You attack the monsters in a round-robin manner starting from the first monster and then moving to the next. Each attack reduces the monster\'s health by 1. Once a monster\'s health drops to 0 or below, it is removed from the line. You continue attacking the next available monster in the line. Your task is to determine the order in which the monsters are removed from the line. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of monsters. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100) — the initial health of each monster. Output Print the order in which the monsters are removed from the line, each as an integer representing the position of the monster in the original list, separated by a space. Examples Input 3 3 1 2 Output 2 3 1 Input 4 4 2 3 1 Output 4 2 3 1","solution":"def get_monster_removal_order(n, healths): Returns the order in which monsters are removed from the line. order_of_removal = [] index = 0 # Convert healths to list of tuples (index, health) healths_with_index = [(i+1, health) for i, health in enumerate(healths)] while healths_with_index: # Decrease the health of the current monster monster_index, monster_health = healths_with_index[index] monster_health -= 1 if monster_health <= 0: # If the monster\'s health is 0 or less, remove it and add its index to the removal order order_of_removal.append(monster_index) healths_with_index.pop(index) # Update index as the current monster is removed index = index % len(healths_with_index) if healths_with_index else 0 else: # If the monster is not removed, update its health and move to the next monster healths_with_index[index] = (monster_index, monster_health) index = (index + 1) % len(healths_with_index) return order_of_removal # Example: n = 3 healths = [3, 1, 2] print(get_monster_removal_order(n, healths)) # Output: [2, 3, 1]"},{"question":"Write a function that receives a list of positive integers and an integer, `X`. The function should return a new list that contains only the elements of the original list that are multiples of `X`, in the original order in which they appeared in the input list. -----Input----- Your function should receive two inputs: 1. A list of positive integers, `lst`, where 1 leq |lst| leq 10^5 and 1 leq lst[i] leq 10^6. 2. A positive integer, `X`, where 1 leq X leq 10^6. -----Output----- The function should return a new list containing only the elements of the original list that are multiples of `X`. If no elements in the list are multiples of `X`, return an empty list. -----Example Input----- lst = [5, 10, 15, 20, 25, 30, 35, 40] X = 5 -----Example Output----- [5, 10, 15, 20, 25, 30, 35, 40] -----Explanation----- In the example, all elements of the list are multiples of 5, so the output is the entire list. -----Example Input----- lst = [3, 7, 11, 14, 18, 21, 24] X = 7 -----Example Output----- [7, 14, 21] -----Explanation----- In this case, the elements 7, 14, and 21 are the only multiples of 7 in the input list, so the output contains only these elements in the order they appeared. -----Example Input----- lst = [1, 3, 4, 6, 8, 9] X = 5 -----Example Output----- [] -----Explanation----- None of the elements in the input list are multiples of 5, so the output is an empty list.","solution":"def filter_multiples(lst, X): Returns a list containing only the elements of the original list that are multiples of X. Parameters: lst (list of int): The list of positive integers. X (int): The integer used to filter multiples. Returns: list of int: A new list with elements that are multiples of X. return [num for num in lst if num % X == 0]"},{"question":"In an organization, employee information is stored in a dictionary where keys are employee IDs and values are dictionaries containing personal details like name, age, and department. Write a function `update_department()` that takes two parameters: 1. An employee dictionary. 2. A dictionary of updates where keys are employee IDs and values are new department names. The function should change the department of the specified employees in the employee dictionary based on the provided updates. If an employee ID in the updates does not exist in the employee dictionary, it should be ignored. Example: ```python employees = { \\"E123\\": {\\"name\\": \\"John Doe\\", \\"age\\": 28, \\"department\\": \\"Sales\\"}, \\"E124\\": {\\"name\\": \\"Jane Smith\\", \\"age\\": 34, \\"department\\": \\"Engineering\\"}, \\"E125\\": {\\"name\\": \\"Sam Black\\", \\"age\\": 22, \\"department\\": \\"HR\\"} } updates = { \\"E123\\": \\"Marketing\\", \\"E126\\": \\"Finance\\", \\"E124\\": \\"Product\\" } update_department(employees, updates) print(employees) ``` Output: ```python { \\"E123\\": {\\"name\\": \\"John Doe\\", \\"age\\": 28, \\"department\\": \\"Marketing\\"}, \\"E124\\": {\\"name\\": \\"Jane Smith\\", \\"age\\": 34, \\"department\\": \\"Product\\"}, \\"E125\\": {\\"name\\": \\"Sam Black\\", \\"age\\": 22, \\"department\\": \\"HR\\"} } ``` **Note:** The function should modify the `employees` dictionary in place and does not need to return anything. Ensure that the function handles cases where some employee IDs in the updates dictionary are not present in the original employee dictionary.","solution":"def update_department(employees, updates): Updates the department of employees based on the updates provided. Parameters: employees (dict): Dictionary of employee information. updates (dict): Dictionary with employee IDs as keys and new department names as values. Returns: None: The employees dictionary is updated in place. for emp_id, new_department in updates.items(): if emp_id in employees: employees[emp_id][\'department\'] = new_department"},{"question":"A sequence of n distinct integers is given. Two players play a game on this sequence. They take turns making a move. In each move, the current player can remove any one integer from the sequence. The first player to make a move loses if the absolute difference between the largest and smallest number in the sequence becomes more than a given threshold k. Both players play optimally. Determine which player will win if they play optimally. -----Input----- First line of input data contains two integer n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9) — the length of the sequence and the threshold. Next line contains n distinct integers b_1, b_2, ..., b_{n} (-10^9 ≤ b_{i} ≤ 10^9). -----Output----- Output answer in single line. \\"First\\", if the first player wins, and \\"Second\\" otherwise (without quotes). -----Example----- Input 5 10 15 5 1 8 14 Output Second Input 3 15 20 10 25 Output First -----Note----- In the first sample, no matter how the players remove numbers, the largest number, and the smallest number will always have an absolute difference within the threshold before the second player makes a move. In the second sample, the absolute difference between the largest and smallest number exceeds the threshold after the first player removes any one number, so the first player loses immediately.","solution":"def game_winner(n, k, sequence): Determines which player wins if they play optimally. Parameters: n (int): Length of the sequence. k (int): The threshold for the absolute difference. sequence (list): The list of distinct integers. Returns: str: \\"First\\" if the first player wins, \\"Second\\" otherwise. sequence.sort() if sequence[-1] - sequence[0] > k: return \\"Second\\" else: return \\"First\\""},{"question":"Andrea is doing research on DNA sequences and she wants to find specific patterns. She has a list of DNA sequences (strings composed of characters \'A\', \'C\', \'G\', and \'T\'). Andrea is particularly interested in finding sequences that repeat exactly k times in the list. Help Andrea by writing a program that reads the list of DNA sequences and the number k, and outputs all the sequences that appear exactly k times in lexicographical order. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of DNA sequences. The second line contains an integer k (1 ≤ k ≤ n) — the exact number of repetitions of the sequences Andrea is interested in. The next n lines each contain a DNA sequence, which only consists of characters \'A\', \'C\', \'G\', and \'T\'. The length of each sequence is between 1 and 100 (inclusive). Output Print each DNA sequence that appears exactly k times, in lexicographical order, one per line. If no such sequence exists, print an empty string. Examples Input 5 2 ATCG GCTA ATCG CGTA GCTA Output ATCG GCTA Input 4 3 AGT AGT AGT GAT Output AGT Input 6 1 TTT AAC GCC TTT AAC GGA Output GCC GGA Note In the first example, \\"ATCG\\" and \\"GCTA\\" appear exactly twice in the list, so they are included in the output. In the second example, \\"AGT\\" appears exactly three times, so it is included in the output. In the third example, \\"GCC\\" and \\"GGA\\" each appear exactly once in the list, so they are included in the output.","solution":"def find_repeated_sequences(n, k, sequences): from collections import Counter counter = Counter(sequences) result = [seq for seq, count in counter.items() if count == k] return sorted(result)"},{"question":"There is a mysterious island where people speak a unique dialect. The dialect consists entirely of transformations of words based on specific rules. One of the local scholars has a fascination with creating and solving puzzles using this dialect. The scholar presents you with a challenge involving transformations of strings. In this challenge, you are given a string of lowercase characters. You need to perform the following transformation on the string: for each character, replace it with the character that follows it in the English alphabet. The alphabet is considered cyclic in this case, so the character after \'z\' is \'a\'. For instance, the transformation of the string \\"abc\\" is \\"bcd\\" and \\"xyz\\" becomes \\"yza\\". Your task is to write a program that performs the described transformation on multiple input strings and outputs the transformed strings. Input The input consists of several lines, each containing a single string of lowercase letters. Each string has at most 100 characters. The input ends with a line containing a single asterisk \'*\', which should not be processed. Output For each input string, print the transformed string in a new line. No additional spaces or text should be included in the output. Example Input abc xyz hello * Output bcd yza ifmmp","solution":"def transform_string(s): Transforms each character in the string to the next character in the alphabet. The alphabet is considered cyclic, so \'z\' becomes \'a\'. transformed = [] for char in s: if char == \'z\': transformed.append(\'a\') else: transformed.append(chr(ord(char) + 1)) return \'\'.join(transformed) def transform_input(input_lines): Takes a list of input lines and transforms each line according to the transform_string function. Stops processing when a line containing an asterisk \'*\' is encountered. results = [] for line in input_lines: if line.strip() == \'*\': break results.append(transform_string(line.strip())) return results"},{"question":"Bob the builder is constructing a pathway in a grid. The grid has rows and columns, and each cell can either be \'O\' (open) or \'X\' (blocked). Bob can move either up, down, left, or right through cells marked as \'O\'. He cannot move through cells marked as \'X\'. Bob starts at the top-left corner of the grid (cell at position (0,0)) and wants to reach the bottom-right corner of the grid (cell at position (n-1, m-1)). Determine if it is possible for Bob to reach the bottom-right corner from the top-left corner. -----Input----- The first line contains two integers n, m (1 ≤ n, m ≤ 1000), which represent the number of rows and columns in the grid respectively. The next n lines each contain m characters. Each character is either \'O\' or \'X\'. The character at (0, 0) and character at (n-1, m-1) will always be \'O\'. -----Output----- Print \\"YES\\" (without quotes) if there is a path from the top-left corner to the bottom-right corner. Otherwise, print \\"NO\\" (without quotes). -----Examples----- Input 3 3 OXO OOX OOO Output YES Input 3 3 OXO XXO OOO Output NO -----Note----- In the first example, Bob can move right to (0,1), then down to (1,1), and finally to (2,1) to reach the bottom-right corner. In the second example, there is no possible path for Bob to reach the bottom-right corner because of the blocked cells.","solution":"def is_path_possible(grid): Determine if there is a path from the top-left corner to the bottom-right corner of the grid. n = len(grid) m = len(grid[0]) # Directions for movement - up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Helper function for Depth First Search def dfs(x, y, visited): # If we reach the bottom-right corner if x == n-1 and y == m-1: return True # Mark this cell as visited visited.add((x, y)) # Explore all possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'O\' and (nx, ny) not in visited: if dfs(nx, ny, visited): return True return False # Initialize visited set and start DFS from the top-left corner visited = set() result = dfs(0, 0, visited) return \\"YES\\" if result else \\"NO\\""},{"question":"# Task: You need to build a function that takes a string of characters and returns the count of each character in the string. The output should be a dictionary where the keys are the characters and the values are their respective counts. Inputs - A single string of characters (which can include alphabets, digits, and special characters). Outputs - A dictionary where each key is a character from the input string, and the corresponding value is the count of occurrences of that character in the string. Example ``` Input: \\"abracadabra\\" Output: {\'a\': 5, \'b\': 2, \'r\': 2, \'c\': 1, \'d\': 1} Input: \\"hello_world\\" Output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'_\': 1, \'w\': 1, \'r\': 1, \'d\': 1} ```","solution":"def count_characters(input_string): Returns a dictionary with the count of each character in the input string. Parameters: input_string (str): The string for which character count is to be computed. Returns: dict: A dictionary with characters as keys and their counts as values. char_count = {} for char in input_string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"You are given an array of integers and a target number. Your task is to write a function that returns indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Input - An array of integers `nums` where `1 <= nums.length <= 10^4` and `-10^9 <= nums[i] <= 10^9`. - An integer `target` where `-10^9 <= target <= 10^9`. Output - Return the indices of the two numbers that add up to the target as a list of two integers. Examples Input nums = [2, 7, 11, 15] target = 9 Output [0, 1] Note For `nums = [2, 7, 11, 15]` and `target = 9`, the output includes the indices of numbers 2 and 7, which add up to 9.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in nums that add up to the target. num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return [num_dict[complement], i] num_dict[num] = i"},{"question":"# Preface You are working on a navigation system for a delivery company. The company wants to ensure the most efficient route planning for their vehicles, which operate in a grid-like city where movements can only be north, south, east, or west (no diagonal moves allowed). # Problem One of the key services of the navigation system is to find the shortest path between two locations in the city. Each location is represented by its x and y coordinates in the grid. Given the start and end coordinates, your task is to calculate the minimum number of moves required for a vehicle to travel from the start to the end point. The input coordinates for the start and end locations are given as a pair of integers: ```python start = [x1, y1] end = [x2, y2] ``` Your task is to write a function that returns the minimum number of moves required for the vehicle to travel between the given start and end locations. ```python def minimum_moves(start, end): # Your code goes here pass ``` For example: ```python print(minimum_moves([2, 3], [5, 6])) ``` Expected output: ``` 6 ``` Explanation: The minimum number of moves from (2, 3) to (5, 6) is 6, as one possible path could be: - Move east three times to reach (5, 3) - Move north three times to reach (5, 6)","solution":"def minimum_moves(start, end): Calculate the minimum number of moves required to travel from start to end. Parameters: start (list): The starting coordinates [x1, y1] end (list): The ending coordinates [x2, y2] Returns: int: The minimum number of moves x1, y1 = start x2, y2 = end # Calculate the Manhattan distance return abs(x2 - x1) + abs(y2 - y1)"},{"question":"You are given a list of N tasks where each task has a start time and an end time. Your goal is to determine the maximum number of non-overlapping tasks you can complete. For each k = 1,2,dots,N, find the answer to the following question: How many non-overlapping tasks can be completed if you start selecting tasks from the k-th task (inclusive)? Constraints * 1 leq N leq 200,000 * 0 leq start time, end time leq 10^9 * start time <= end time for each task Input Input is given from Standard Input in the following format: N start_1 end_1 start_2 end_2 : start_N end_N Output Print N lines. In the i-th line print the answer to the question when k = i. Examples Input 5 1 3 2 5 4 6 7 9 8 10 Output 3 2 2 1 1 Input 4 3 4 1 2 2 3 5 6 Output 2 3 2 1","solution":"def max_non_overlapping_tasks(tasks): Given a list of tasks represented as tuples of (start_time, end_time), find the maximum number of non-overlapping tasks that can be completed starting from each k = 1, 2, ..., N. Parameters: tasks (List[Tuple[int, int]]): List of tasks where each task is represented as (start_time, end_time) Returns: List[int]: List of maximum number of non-overlapping tasks that can be completed starting from each k def find_max_tasks(start_index): selected_tasks = 0 current_end_time = -1 for idx in range(start_index, len(tasks)): start, end = tasks[idx] if start >= current_end_time: selected_tasks += 1 current_end_time = end return selected_tasks result = [] for i in range(len(tasks)): result.append(find_max_tasks(i)) return result # To match the expected input/output format def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) tasks = [(int(data[2*i + 1]), int(data[2*i + 2])) for i in range(N)] result = max_non_overlapping_tasks(tasks) for r in result: print(r)"},{"question":"Hey there, Hope you\'re doing well! I noticed you enjoy solving algorithm challenges, so I have a new interesting problem for you. I\'m stuck analyzing some data for my restaurant\'s marketing campaign and would appreciate your help. The problem is called \\"Peak Popularity\\". The goal is to determine the busiest day given the number of customers over a range of days. I have to ensure I\'m preparing enough food for the peak days. I\'ll provide you with the customer data, and you need to write a program to find the specific day with the highest customer turnout. I\'m attaching the problem details below and looking forward to your efficient solution! Your fellow problem solver, Alex the_peak_popularity.psc # author: alex # problem: peak popularity # status: TBD (To Be Determined) # a..b : iterate from a to b ( inclusive ) define n as integer define P as an integer array define R as a two-dimensional integer array function main() read n from input for i = 1..n read P[i] max_pop = 0 peak_day = 0 sum_population = 0 for i = 1..n sum_population = sum_population + P[i] if P[i] > max_pop max_pop = P[i] peak_day = i print peak_day, max_pop print sum_population the_peak_popularity.pdf Input Format On the first line, you will be given n, indicating the number of days. On the next line, you will have n integers P_i representing the number of customers on the ith day. Output Format On the first line, print the peak day (1-indexed) and the maximum number of customers that visited. On the second line, print the total number of customers over the n days. Constraints 1leq nleq 10^5 1leq P_ileq 10^4 Sample Input 5 10 30 20 50 40 Sample Output 4 50 150 Explanation Day 4 had the most customers with a total of 50. The total number of customers over all the days is 10 + 30 + 20 + 50 + 40 = 150.","solution":"def find_peak_popularity(n, P): Finds the peak day and total number of customers. :param n: Number of days (integer) :param P: List of integers representing customers each day :return: Tuple with peak day (1-indexed), maximum number of customers, and total customers max_pop = 0 peak_day = 0 sum_population = 0 for i in range(n): sum_population += P[i] if P[i] > max_pop: max_pop = P[i] peak_day = i + 1 # 1-indexed return peak_day, max_pop, sum_population"},{"question":"A gardening society is collecting data on various types of ornamental plants grown by its members. The members are required to report their plant collection for analysis. Input The input to your function will be an array where each element is a string containing the type of plant and the count of plants grown. The plant names and counts are separated by an arbitrary amount of spaces, but always at least one. A plant type may appear multiple times because information can be combined from different members. An example of an input array might look like: ``` [\\"Rose 5\\", \\"Tulip 3\\", \\"Sunflower 7\\", \\"Rose 2\\", \\"Tulip 9\\", \\"Orchid 4\\"] ``` Processing Your function should normalize the plant types to a standard three-letter code according to the rules below and aggregate the counts for repeated plants. Output The final data to be returned from your function should be an array sorted alphabetically by the three-letter codes. Each element in the array should alternate between the three-letter code and the summed counts. An example of the output array based on the input above would be: ``` [\\"ORC\\", 4, \\"ROS\\", 7, \\"SUN\\", 7, \\"TUL\\", 12] ``` # Special Note If any plant named \\"Cactus\\" appears in the list, this indicates incorrect data (as cactus is considered non-ornamental). In this case, return an array with a single string element: `\\"Invalid data\\"` Rules for converting a plant type to a three-letter code: * If a plant name has exactly one word, take the first three letters of the name. If the name has less than three letters, use what is available. * If a plant name has two words, take the first letter of each word and the next letter from the second word. * If a plant name has three or more words, take the first letters of the first three words.","solution":"def summarize_plant_collection(plant_inputs): def normalize_plant_name(name): words = name.split() if len(words) == 1: return (words[0][:3]).upper() elif len(words) == 2: return (words[0][0] + words[1][:2]).upper() elif len(words) >= 3: return (words[0][0] + words[1][0] + words[2][0]).upper() plant_dict = {} for entry in plant_inputs: name, count = entry.rsplit(maxsplit=1) if name.lower() == \\"cactus\\": return [\\"Invalid data\\"] code = normalize_plant_name(name) count = int(count) if code in plant_dict: plant_dict[code] += count else: plant_dict[code] = count sorted_plants = sorted(plant_dict.items()) result = [] for code, count in sorted_plants: result.append(code) result.append(count) return result"},{"question":"In an online multiplayer game, there are n players, numbered 1 through n. Each player has a skill level, represented by an integer si. Players can form groups to play together, but certain constraints apply: - A group must have exactly k players. - The difference in skill levels between the highest and the lowest player in a group must not exceed d. Your task is to help the players form as many valid groups as possible under these constraints. Each player can belong to only one group. If it\'s not possible to form any groups that meet the constraints, indicate that as well. Write an algorithm to find the maximum number of groups that can be formed. Input The input consists of: - A single line containing three integers n, k, and d (1 ≤ n ≤ 100,000; 2 ≤ k ≤ n; 0 ≤ d ≤ 1,000,000). - A second line containing n integers: s1, s2, ..., sn (1 ≤ si ≤ 1,000,000) representing the skill levels of the players. Output Output a single integer, the maximum number of groups that can be formed. Example Input 8 3 2 4 8 5 6 7 9 5 3 Output 2 Explanation In the example, the skill levels are [4, 8, 5, 6, 7, 9, 5, 3]. The maximum number of groups of 3 players where the difference in skill levels is at most 2 are as follows: - Group 1: [4, 5, 5] (with skill levels 4, 5, 5 where the skill difference is at most 2) - Group 2: [6, 7, 8] (with skill levels 6, 7, 8 where the skill difference is at most 2) So, the number of valid groups is 2. There isn\'t enough remaining players to form another group of 3 that meets the criteria. **Note** This question combines the concepts of sorting, grouping, and checking constraints, similar to those in the provided question set.","solution":"def max_groups(n, k, d, skill_levels): Finds the maximum number of groups that can be formed such that each group has exactly k players and the difference in skill levels between the highest and lowest player in a group does not exceed d. Parameters: n (int): number of players k (int): number of players in each group d (int): maximum allowed difference in skill levels within a group skill_levels (list[int]): list of skill levels of the players Returns: int: the maximum number of valid groups that can be formed skill_levels.sort() count = 0 i = 0 while i <= n - k: if skill_levels[i + k - 1] - skill_levels[i] <= d: count += 1 i += k else: i += 1 return count"},{"question":"Given a binary tree, your task is to complete the function `findKDistanceNodes()` that returns all the nodes at a distance K from a given target node. Example 1: Input: 3 / 5 1 /| 6 2 9 / 7 4 target = 5 K = 2 Output: [7, 4, 1] Explanation: Nodes 7, 4, and 1 are at distance 2 from target node 5. Example 2: Input: 3 / 5 1 / 6 target = 5 K = 1 Output: [6, 3] Explanation: Nodes 6 and 3 are at distance 1 from target node 5. Your Task: You only need to implement the given function `findKDistanceNodes()` and return the list of node values. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: - The number of nodes in the tree is in the range [1, 10000]. - -1000 <= Node.val <= 1000 - All the values Node.val are unique.","solution":"from collections import deque, defaultdict class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def findKDistanceNodes(root, target, K): if not root: return [] # Build the graph from the tree graph = defaultdict(list) def build_graph(node, parent): if node: if parent: graph[node].append(parent) graph[parent].append(node) if node.left: build_graph(node.left, node) if node.right: build_graph(node.right, node) # Convert the tree into undirected graph build_graph(root, None) # BFS from the target node queue = deque([(target, 0)]) visited = {target} result = [] while queue: node, dist = queue.popleft() if dist == K: result.append(node.val) for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, dist + 1)) return result"},{"question":"In a digital video library, there are multiple movies available with an associated length in minutes. A user wants to binge-watch as many complete movies as possible within a given number of minutes. Given the lengths of movies and the total number of available minutes, determine the maximum number of movies the user can watch fully. Example 1: Input: lengths[] = {120, 90, 150, 80} minutes = 300 Output: 3 Explanation: The user can watch movies with lengths 80, 90, and 120 which sums up to 290 minutes. Hence, the number of movies watched is 3. Example 2: Input: lengths[] = {200, 150, 100} minutes = 330 Output: 2 Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxMovies() which takes an array lengths and an integer minutes and returns an integer as output. Expected Time Complexity: O(NlogN) Expected Auxiliary Space: O(N) Constraints: 1 <= lengths.length <= 10^{3} 1 <= lengths[i] <= 10^{4} 1 <= minutes <= 10^{4}","solution":"def maxMovies(lengths, minutes): Returns the maximum number of complete movies the user can watch within the given number of minutes. Parameters: lengths (list): List of integers representing the lengths of movies in minutes. minutes (int): Total number of available minutes. Returns: int: Maximum number of movies watched fully. # Sort movie lengths in ascending order lengths.sort() movie_count = 0 total_time = 0 for length in lengths: if total_time + length <= minutes: total_time += length movie_count += 1 else: break return movie_count"},{"question":"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent based on the standard phone number to letter mapping. Examples ```python phone_combinations(\\"23\\") == [\\"ad\\",\\"ae\\",\\"af\\",\\"bd\\",\\"be\\",\\"bf\\",\\"cd\\",\\"ce\\",\\"cf\\"] phone_combinations(\\"7\\") == [\\"p\\",\\"q\\",\\"r\\",\\"s\\"] phone_combinations(\\"234\\") == [\\"adg\\", \\"adh\\", \\"adi\\", \\"aeg\\", \\"aeh\\", \\"aei\\", \\"afg\\", \\"afh\\", \\"afi\\", \\"bdg\\", \\"bdh\\", \\"bdi\\", \\"beg\\", \\"beh\\", \\"bei\\", \\"bfg\\", \\"bfh\\", \\"bfi\\", \\"cdg\\", \\"cdh\\", \\"cdi\\", \\"ceg\\", \\"ceh\\", \\"cei\\", \\"cfg\\", \\"cfh\\", \\"cfi\\"] phone_combinations(\\"92\\") == [\\"wa\\",\\"wb\\",\\"wc\\",\\"xa\\",\\"xb\\",\\"xc\\",\\"ya\\",\\"yb\\",\\"yc\\",\\"za\\",\\"zb\\",\\"zc\\"] phone_combinations(\\"4\\") == [\\"g\\",\\"h\\",\\"i\\"] ``` Note - The mapping of digit to letters is given as follows: * 2 -> \\"abc\\" * 3 -> \\"def\\" * 4 -> \\"ghi\\" * 5 -> \\"jkl\\" * 6 -> \\"mno\\" * 7 -> \\"pqrs\\" * 8 -> \\"tuv\\" * 9 -> \\"wxyz\\"","solution":"from typing import List def phone_combinations(digits: str) -> List[str]: Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. if not digits: return [] # mapping of digit to letters digit_to_letters = { \\"2\\": \\"abc\\", \\"3\\": \\"def\\", \\"4\\": \\"ghi\\", \\"5\\": \\"jkl\\", \\"6\\": \\"mno\\", \\"7\\": \\"pqrs\\", \\"8\\": \\"tuv\\", \\"9\\": \\"wxyz\\" } def backtrack(index: int, path: str): if index == len(digits): combinations.append(path) return possible_letters = digit_to_letters[digits[index]] for letter in possible_letters: backtrack(index + 1, path + letter) combinations = [] backtrack(0, \\"\\") return combinations"},{"question":"Given a N x M two-dimensional grid filled with various integer values, you need to find the number of distinct values that can be collected by following a specific path. The allowed path is any sequence of grid cells starting from the top-left corner to the bottom-right corner of the grid, using only moves to the right or downward. The task is to compute the maximum number of distinct values that can be collected from the top-left to the bottom-right corner. Example 1: Input: grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: 9 Explanation: The path 1 -> 2 -> 3 -> 6 -> 9 collects all unique values. Example 2: Input: grid = [ [1, 2, 2], [3, 3, 4], [4, 4, 5] ] Output: 5 Explanation: One possible path is 1 -> 2 -> 2 -> 4 -> 5 which collects 5 distinct values. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxDistinctValues` which takes the grid as input and returns the maximum number of distinct values that can be collected along the top-left to bottom-right path. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(min(N, M)) Constraints: 1 <= N, M <= 100","solution":"def maxDistinctValues(grid): Compute the maximum number of distinct values that can be collected along the top-left to bottom-right path of the grid using only moves to the right or downward. Args: grid (List[List[int]]): A 2D list of integers representing the grid. Returns: int: Maximum number of distinct values that can be collected. N = len(grid) M = len(grid[0]) # Use a DP table where dp[i][j] holds a set of distinct values collected up to cell (i, j) dp = [[set() for _ in range(M)] for _ in range(N)] dp[0][0].add(grid[0][0]) # Initialize the first row for j in range(1, M): dp[0][j] = dp[0][j-1].copy() dp[0][j].add(grid[0][j]) # Initialize the first column for i in range(1, N): dp[i][0] = dp[i-1][0].copy() dp[i][0].add(grid[i][0]) # Fill the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = (dp[i-1][j] | dp[i][j-1]).copy() dp[i][j].add(grid[i][j]) # The result will be the number of distinct values in the bottom-right cell return len(dp[N-1][M-1])"},{"question":"Create a function that simulates a game between two players, Alice and Bob, who take turns picking items from a line of candies. Each candy has a different positive integer value associated with it. The game proceeds as follows: 1. Alice and Bob take turns, with Alice starting first. 2. On each turn, a player can pick either the leftmost or the rightmost candy from the current line. 3. The goal is to maximize the sum of the values of candies taken by the player. You need to determine the maximum score Alice can achieve if both play optimally. Input: - An integer `n` representing the number of candies (where 1 ≤ n ≤ 1000) - A list of `n` integers, each representing the value of a candy. Output: - A single integer indicating the maximum score Alice can achieve. Example: Input: 6 1 2 9 4 4 6 Output: 16 Explanation: Alice\'s optimal strategy is to pick candies with values 6, 9, and 1 (in that order), achieving a score of 16. Bob, on the other hand, picks candies with values 4, 4, and 2, achieving a score of 10. Thus, Alice\'s maximum score is 16. Note: Ensure your function is efficient and runs within acceptable time limits for large inputs.","solution":"def max_alice_score(n, candies): Returns the maximum score Alice can achieve if both Alice and Bob play optimally. memo = [[None for _ in range(n)] for _ in range(n)] def dfs(left, right): if left > right: return 0 if memo[left][right] is not None: return memo[left][right] pick_left = candies[left] + min(dfs(left + 2, right), dfs(left + 1, right - 1)) pick_right = candies[right] + min(dfs(left + 1, right - 1), dfs(left, right - 2)) memo[left][right] = max(pick_left, pick_right) return memo[left][right] return dfs(0, n - 1)"},{"question":"You are given a series of tasks to handle a list of integers. Each task can either update a range of integers by adding a specified value or query the maximum value within a specified sub-range. Your objective is to design a system that efficiently processes a series of these tasks. Each task will be in one of the following two forms: 1) 1 i j v - Indicates an update operation. Add the value v to every integer in the range from index i to index j (inclusive). 2) 2 i j - Indicates a query operation. Find the maximum value in the sub-range from index i to index j (inclusive). Input Format - The first line contains two integers, n (the number of integers in the list) and q (the number of tasks). - The second line contains n space-separated integers, representing the initial state of the list. - Each of the next q lines contains one task in the form described above. Constraints - 1 ≤ n, q ≤ 100,000 - 1 ≤ initial values of list, v ≤ 10,000 - 1 ≤ i ≤ j ≤ n for all tasks Output Format For each query operation, output a single integer on a new line: the maximum value found in the specified sub-range. Example Input: ``` 5 3 1 3 5 7 9 2 1 5 1 2 4 3 2 2 4 ``` Output: ``` 9 10 ``` Explanation: - The initial list is [1, 3, 5, 7, 9]. - The first task queries the maximum value in the range from index 1 to 5, which is 9. - The second task updates the values from index 2 to 4 by adding 3. The list becomes [1, 6, 8, 10, 9]. - The third task queries the maximum value in the range from index 2 to 4, which is now 10.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.lazy = [0] * (2 * self.n) # Store the data in the leaves of the tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating the maximum of children for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update_range(self, l, r, value): l += self.n r += self.n # Adding value to all nodes in the range [l, r) while l < r: if l & 1: self.lazy_update(l, value) l += 1 if r & 1: r -= 1 self.lazy_update(r, value) l >>= 1 r >>= 1 self.push_up() def lazy_update(self, pos, value): self.tree[pos] += value if pos < self.n: self.lazy[pos] += value def push_up(self): for i in range(1, self.n): pos = (self.n - 1 + i) >> 1 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) + self.lazy[pos] def query_range(self, l, r): l += self.n r += self.n self.push_down(l) self.push_down(r - 1) maximum = -float(\'inf\') while l < r: if l & 1: maximum = max(maximum, self.tree[l]) l += 1 if r & 1: r -= 1 maximum = max(maximum, self.tree[r]) l >>= 1 r >>= 1 return maximum def push_down(self, pos): depth = 0 while (pos >> depth) > 0: depth += 1 for d in range(depth, 0, -1): parent = pos >> d if self.lazy[parent] != 0: self.lazy_update(parent * 2, self.lazy[parent]) self.lazy_update(parent * 2 + 1, self.lazy[parent]) self.lazy[parent] = 0 def process_tasks(n, tasks, data): seg_tree = SegmentTree(data) results = [] for task in tasks: if task[0] == 1: # Update operation _, i, j, v = task seg_tree.update_range(i - 1, j, v) elif task[0] == 2: # Query operation _, i, j = task results.append(seg_tree.query_range(i - 1, j)) return results"},{"question":"Given an array of strings words[] of length n. The task is to determine the shortest word in the list that contains all the characters of the given string characters. Example 1: Input: n = 5 words[] = {\\"step\\", \\"steps\\", \\"stripe\\", \\"stepple\\", \\"stepladder\\"} characters = \\"ppe\\" Output: \\"stepple\\" Explanation: Among the words which contain all characters of \\"ppe\\", \\"stepple\\" is the shortest. Example 2: Input: n = 4 words[] = {\\"apple\\", \\"banana\\", \\"application\\", \\"apply\\"} characters = \\"apl\\" Output: \\"apple\\" Explanation: Among the words which contain all characters of \\"apl\\", \\"apple\\" is the shortest. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findShortestContainingWord() which takes the array words[], its size n, and the string characters as inputs and returns the shortest word that contains all characters of the given string. Expected Time Complexity: O(n * m), where m is the average length of words Expected Auxiliary Space: O(m) Constraints: 1 ≤ n ≤ 1000 1 ≤ len(words[i]), len(characters) ≤ 100","solution":"def findShortestContainingWord(words, n, characters): from collections import Counter def contains_all_chars(word, chars_counter): word_counter = Counter(word) for char, count in chars_counter.items(): if word_counter[char] < count: return False return True characters_counter = Counter(characters) shortest_word = None for word in words: if contains_all_chars(word, characters_counter): if shortest_word is None or len(word) < len(shortest_word): shortest_word = word return shortest_word"},{"question":"Wall-B has recently developed an interest in prime factors of numbers. Interested, he started exploring number properties. One important property is finding the smallest prime factor that appears more frequently when compared to the number of times the second smallest prime factor appears in that number\'s prime factor decomposition. For instance, consider the following examples: - For 20, the prime factor decomposition is 2^2 * 5^1. The smallest prime factor is 2 which appears twice compared to 5 which appears once. - For 45, the prime factor decomposition is 3^2 * 5^1. The smallest prime factor is 3 which appears twice compared to 5 which appears once. Wall-B would like a program that takes a positive number N (2 ≤ N ≤ 10^9) and finds the smallest prime factor that appears more frequently than any other prime factor. In the case of a tie, the smallest prime factor should be selected. If no prime factor appears more frequently than the second one, the output should be -1. Input A single line containing the integer N. Output A single integer representing the smallest prime factor that appears more frequently than any other prime factor in N\'s prime factor decomposition, or -1 if no such prime factor exists. Examples Input 20 Output 2 Input 45 Output 3 Input 49 Output 7 Input 18 Output -1 Note Example 1: The prime factor decomposition of 20 is 2^2 * 5^1. The prime factor 2 appears more frequently than 5. Hence, 2 is the answer. Example 2: The prime factor decomposition of 45 is 3^2 * 5^1. The prime factor 3 appears more frequently than 5. Hence, 3 is the answer. Example 3: The prime factor decomposition of 49 is 7^2. Since there is only one prime factor, it appears more frequently than any others. Hence, 7 is the answer. Example 4: The prime factor decomposition of 18 is 2^1 * 3^2. Here, 3 appears twice and 2 appears once. However, 2 does not appear more frequently than 3, hence the output is -1.","solution":"def smallest_prime_factor(N): Returns the smallest prime factor that appears more frequently than any other prime factor in N\'s prime factor decomposition. If no such prime factor exists, return -1. def prime_factors(n): Return a dictionary of prime factors and their counts for a given integer n. factors = {} # Count the number of 2s that divide n while n % 2 == 0: if 2 in factors: factors[2] += 1 else: factors[2] = 1 n //= 2 # n must be odd at this point, so a skip of 2 (i.e., 3, 5, 7, 9) is used for i in range(3, int(n**0.5) + 1, 2): # While i divides n, count i and divide n while n % i == 0: if i in factors: factors[i] += 1 else: factors[i] = 1 n //= i # If n is a prime number greater than 2 if n > 2: factors[n] = 1 return factors # Find the prime factors of N factors = prime_factors(N) if len(factors) == 0: return -1 # Sort factors by key sorted_factors = sorted(factors.items()) # Find the smallest prime factor that appears more frequently than the second one if len(sorted_factors) == 1: return sorted_factors[0][0] if sorted_factors[0][1] > sorted_factors[1][1]: return sorted_factors[0][0] else: return -1"},{"question":"A string s is said to be a \\"beautiful string\\" if the following conditions hold true: 1. All characters of the string are distinct. 2. For any two alphabetic characters, the absolute difference in their ASCII values is exactly one. You are given a string s which consists of lowercase alphabetic characters and/or digits. Your task is to determine if the string is a beautiful string. Input The first and only line of input contains the string s, which has a length between 1 and 1000 inclusively, and consists of lowercase alphabetic characters and/or digits. Output Print \\"YES\\" (without quotes) if the given string is a beautiful string, otherwise print \\"NO\\". Examples Input abc Output YES Input abd Output NO Input a1b Output NO","solution":"def is_beautiful_string(s): Determines if the given string is a beautiful string. Args: s (str): A string consisting of lowercase alphabetic characters and/or digits. Returns: str: \\"YES\\" if the string is beautiful, \\"NO\\" otherwise. # Filter out digits characters = [c for c in s if c.isalpha()] # Checking for distinct characters if len(characters) != len(set(characters)): return \\"NO\\" # Sorting characters characters.sort() # Checking consecutive ASCII values for i in range(1, len(characters)): if abs(ord(characters[i]) - ord(characters[i-1])) != 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given a string that represents a mathematical expression containing only integers and operators from the set {\'+\', \'-\', \'*\', \'/\'}. Your task is to evaluate this expression and return the result as an integer. The expression is guaranteed to be valid and does not contain any spaces between the characters. For simplicity: - Assume division should truncate towards zero. - The input expression is non-empty and contains only integers and the operators {\'+\', \'-\', \'*\', \'/\'}. - Input integers are guaranteed to fit in a 32-bit signed integer. Write a function that takes a string expression and returns the evaluated result as an integer. Input: The first line contains T denoting the number of test cases. Each test case contains a single line which is the mathematical expression string. Output: Print T lines where each line contains the result of the evaluated expression. Constraints: 1 ≤ T ≤ 10 1 ≤ |expression| ≤ 105 SAMPLE INPUT 2 3+2*2 10-3*4+2 SAMPLE OUTPUT 7 0","solution":"def evaluate_expression(expression): Evaluate a mathematical expression containing integers and operators (+, -, *, /). Args: expression (str): The mathematical expression to evaluate. Returns: int: The result of the evaluation. stack = [] num = 0 sign = \\"+\\" expression += \\"+\\" # To force the last number to be processed for char in expression: if char.isdigit(): num = num * 10 + int(char) elif char in \\"+-*/\\": if sign == \\"+\\": stack.append(num) elif sign == \\"-\\": stack.append(-num) elif sign == \\"*\\": stack[-1] *= num elif sign == \\"/\\": # Integer division truncates toward zero if stack[-1] < 0: stack[-1] = -(-stack[-1] // num) else: stack[-1] //= num sign = char num = 0 return sum(stack)"},{"question":"Given an array of integers representing the strengths of different fighters, each fighter will face off with their adjacent fighters until there are no more pairs left. The winner of each face-off is determined by the absolute difference between the strengths of the competing fighters, and the loser is removed from the array. If two fighters have the same strength, they both get removed. Your task is to determine the strength of the last remaining fighter. If no fighters remain, return 0. Example: Input: [2, 7, 4, 1, 8, 1] Output: 1 Explanation: - In the first face-off, fighters 2 and 7 compete: |2-7| = 5. Array becomes [5, 4, 1, 8, 1]. - Next, fighters 5 and 4 compete: |5-4| = 1. Array becomes [1, 1, 8, 1]. - Fighters 1 and 1 compete and both are removed: Array becomes [8, 1]. - Finally, fighters 8 and 1 compete: |8-1| = 7. Array becomes [7]. - Only one fighter remains, so the output is 7. Constraints: - The array length is between 1 and 1000. - Each strength is a positive integer not greater than 1000.","solution":"def last_fighter_strength(strengths): Determines the strength of the last remaining fighter based on given rules. Parameters: strengths (list of int): List of strengths of fighters. Returns: int: Strength of the last remaining fighter, or 0 if none remain. while len(strengths) > 1: strengths.sort(reverse=True) # Sort fighters in descending order first = strengths.pop(0) # Pick the strongest fighter second = strengths.pop(0) # Pick the second strongest fighter if first != second: strengths.append(abs(first - second)) # Append the difference return strengths[0] if strengths else 0"},{"question":"Several students participated in a marathon. Each student has a unique identification number and finished at an exact time that was recorded in the form of hours, minutes, and seconds. As the event organizer, you need to identify the top 3 fastest runners based on their completion times. Write a program that takes the total number of students N and their corresponding completion times and returns the IDs of the top 3 fastest runners, in order from fastest to slowest. If there are fewer than three students, return the IDs of all participants sorted by their times. Input Format: The first line contains an integer N, the number of students. Each of the next N lines contains a student\'s identification number followed by their completion time in the format hh:mm:ss. Constraints: 1 ≤ N ≤ 100 All times are valid times in the range 00:00:00 to 23:59:59. All identification numbers are positive integers and unique. Output Format: Print the IDs of the top 3 fastest runners sorted by their times. If there are fewer than 3 participants, print the IDs of all participants sorted by their times. SAMPLE INPUT: 4 202 02:15:30 101 01:45:22 303 02:10:15 404 01:44:20 SAMPLE OUTPUT: 404 101 303 Explanation: - Student 404 completed the marathon in 01:44:20, which is the fastest time. - Student 101 completed the marathon in 01:45:22, which is the second fastest time. - Student 303 completed the marathon in 02:10:15, which is the third fastest time. - Student 202, despite having a valid time, is not in the top 3 fastest times.","solution":"def top_three_runners(N, runners): Returns the IDs of the top 3 fastest runners based on their completion times. Parameters: N (int): The number of students runners (list): A list of tuples, each containing the student\'s ID and their completion time in the format hh:mm:ss. Returns: list: IDs of the top 3 fastest runners sorted by their times. # Parse the runners list and convert times to seconds runners_with_time_in_seconds = [] for runner in runners: id, time_str = runner h, m, s = map(int, time_str.split(\':\')) total_seconds = h * 3600 + m * 60 + s runners_with_time_in_seconds.append((id, total_seconds)) # Sort the runners by their completion time sorted_runners = sorted(runners_with_time_in_seconds, key=lambda x: x[1]) # Fetch the top 3 runners\' IDs top_runners_ids = [runner[0] for runner in sorted_runners[:3]] return top_runners_ids"},{"question":"You are working at a logistics company, and your task is to optimize package deliveries. The company wants to deliver packages to certain destinations in the city. All the roads in the city are bidirectional, and each road has a certain travel time. You are given the road network as a list of roads represented by tuples where each tuple `(u, v, w)` represents a road between node `u` and node `v` with a travel time `w`. Your goal is to determine the shortest travel time from the central warehouse located at node `0` to all other destinations in the city. Example 1: Input: N = 5 roads = [(0, 1, 10), (0, 2, 3), (1, 2, 1), (1, 3, 2), (2, 3, 8), (2, 4, 2), (3, 4, 7)] Output: [0, 4, 3, 6, 5] Explanation: - The shortest path from node 0 to node 1 is (0 -> 2 -> 1) with total travel time 4. - The shortest path from node 0 to node 2 is (0 -> 2) with total travel time 3. - The shortest path from node 0 to node 3 is (0 -> 2 -> 1 -> 3) with total travel time 6. - The shortest path from node 0 to node 4 is (0 -> 2 -> 4) with total travel time 5. Example 2: Input: N = 4 roads = [(0, 1, 2), (0, 3, 9), (1, 2, 4), (2, 3, 1)] Output: [0, 2, 6, 7] Explanation: - The shortest path from node 0 to node 1 is (0 -> 1) with total travel time 2. - The shortest path from node 0 to node 2 is (0 -> 1 -> 2) with total travel time 6. - The shortest path from node 0 to node 3 is (0 -> 1 -> 2 -> 3) with total travel time 7. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `shortestTravelTime()` which takes an integer `N` representing the number of nodes and a list of tuples `roads` where each tuple contains three integers `(u, v, w)` representing a road as described above. The function should return a list of integers representing the shortest travel time from node `0` to each node `i` (0 <= i < N). Expected Time Complexity: O((N + E) log N) Expected Auxiliary Space: O(N + E) Constraints: 1 <= N <= 10^4 1 <= len(roads) <= 2*10^4 1 <= w <= 100","solution":"import heapq def shortestTravelTime(N, roads): Determines the shortest travel time from the central warehouse (node 0) to all other destinations in the city. Parameters: - N: the number of nodes - roads: a list of tuples representing the roads, each tuple (u, v, w) where u and v are nodes and w is travel time Returns: A list of integers representing the shortest travel time from node 0 to each node. graph = {i: [] for i in range(N)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Priority queue: (distance, node) pq = [(0, 0)] distances = {i: float(\'inf\') for i in range(N)} distances[0] = 0 while pq: current_distance, u = heapq.heappop(pq) if current_distance > distances[u]: continue for v, w in graph[u]: distance = current_distance + w if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return [distances[i] for i in range(N)]"},{"question":"A company X is working on their new product and they assigned you the task to write a program that helps in managing user\'s account data. Each account contains the following properties - ID, Name, Age, and Balance. You need to perform some operations on these accounts as mentioned in the problem statement. You are given a series of commands to execute. Each command instructs the program to perform one of the following operations. 1. Add a new account. The command will be in the following format: `add ID Name Age Balance` You may assume the ID will be unique. 2. Update an existing account\'s balance. The command will be in the following format: `update ID Balance` Update the balance of the account with the given ID. 3. Retrieve an account\'s balance. The command will be in the following format: `balance ID` Output the balance of the account with the given ID. 4. Delete an account. The command will be in the following format: `delete ID` Remove the account with the given ID from the system. Implement the program that reads a list of commands and executes them accordingly. You may assume that all IDs given in the commands are valid and exist at the time of their respective command, with no error handling required for non-existent accounts. ------ Input ------ The first line contains a single integer N representing the number of commands. Each of the next N lines contains a command as described above. ------ Output ------ For each `balance` command, output a single integer in a separate line which is the balance of the specified account. ------ Constraints ------ 1 ≤ N ≤ 100000 1 ≤ Length of Name ≤ 50 1 ≤ Age ≤ 130 0 ≤ Balance ≤ 10^{9} ------ Example ------ Input: 6 add 1 Alice 30 1000 add 2 Bob 27 1500 balance 1 update 2 2000 balance 2 delete 1 Output: 1000 2000","solution":"class AccountManager: def __init__(self): self.accounts = {} def add(self, account_id, name, age, balance): self.accounts[account_id] = { \\"name\\": name, \\"age\\": age, \\"balance\\": balance } def update(self, account_id, balance): if account_id in self.accounts: self.accounts[account_id][\'balance\'] = balance def balance(self, account_id): if account_id in self.accounts: return self.accounts[account_id][\'balance\'] def delete(self, account_id): if account_id in self.accounts: del self.accounts[account_id] def process_commands(commands): account_manager = AccountManager() results = [] for command in commands: parts = command.split() action = parts[0] if action == \\"add\\": account_id = int(parts[1]) name = parts[2] age = int(parts[3]) balance = int(parts[4]) account_manager.add(account_id, name, age, balance) elif action == \\"update\\": account_id = int(parts[1]) balance = int(parts[2]) account_manager.update(account_id, balance) elif action == \\"balance\\": account_id = int(parts[1]) results.append(account_manager.balance(account_id)) elif action == \\"delete\\": account_id = int(parts[1]) account_manager.delete(account_id) return results"},{"question":"Ada and Bob love playing games involving strings. They have come up with the following game using a given string `s`: - Ada and Bob alternately pick a substring of `s`, Ada always starts first. - In one move, a player chooses a non-empty substring of the current string (remaining after previous picks) and removes it from `s`. - The player who cannot make a move (because there are no substrings left) loses. Determine how many possible ways exist for Ada to cut substrings such that she will always be the one to make the last move if both of them play optimally. Input Format The first line contains an integer l representing the length of the string s. The second line contains the string s consisting of `l` lowercase alphabetical characters. Constraints 1 leq l leq 100000 Output Format A single integer representing the number of possible ways Ada will always win. Sample Input 5 ababa Sample Output 6 Explanation For string \\"ababa\\", Ada can win in the following configurations: - Remove substrings in turns \\"a-b-aba\\", \\"a-ba-ba\\", \\"a-b-aba\\", \\"a-b-a-b-a\\", \\"ab-ba\\", and \\"aba-b-a\\". Only these configurations allow Ada to make the last move. Note that Ada wins only if she creates a situation where Bob has no optimal move left, ensuring she makes the last move.","solution":"def count_ways_ada_wins(l, s): def is_winning_position(length): return length % 2 == 1 return sum(1 for i in range(1, l + 1) if is_winning_position(i))"},{"question":"Given an array of integers, find the largest product that can be made by multiplying any three integers. Input: The first line contains an integer `t` (1 ≤ t ≤ 1000), the number of test cases. For each test case, the first line contains an integer `n` (3 ≤ n ≤ 100), the number of elements in the array. The second line contains `n` space-separated integers a[i] (-1000 ≤ a[i] ≤ 1000). Output: For each test case, print the largest product of any three integers in the array. Constraints: When creating the solution, the time complexity should not exceed O(n log n) for each test case. SAMPLE INPUT 3 5 1 2 3 4 5 6 -10 -10 5 2 1 -5 4 0 -1 3 100 SAMPLE OUTPUT 60 500 0 Problem Setter : Your Name","solution":"def largest_product_of_three(nums): Returns the largest product that can be made by multiplying any three integers in the list. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1]) def process_test_cases(t, test_cases): results = [] for i in range(t): n, nums = test_cases[i] results.append(largest_product_of_three(nums)) return results"},{"question":"Zoran has embarked on a journey through a grid-based labyrinth. The labyrinth is represented by an n times m grid where each cell has a cost associated with stepping into it. Zoran starts at the top-left cell (1,1) and needs to reach the bottom-right cell (n,m). He can only move right or down in the grid. Your task is to determine the minimum cost path from the top-left to the bottom-right cell. -----Input----- The input starts with a single integer t (1 leq t leq 100), the number of test cases. For each test case: - The first line contains two integers n and m (1 leq n, m leq 100) — the dimensions of the grid. - The next n lines contain m integers each, representing the cost grid. The j-th integer in the i-th line represents the cost associated with the cell (i, j) (1 leq cost_{i,j} leq 100). -----Output----- For each test case, output a single integer — the minimum cost required to move from the top-left to the bottom-right corner of the grid. -----Example----- Input 2 3 3 1 3 1 1 5 1 4 2 1 2 2 4 7 2 8 Output 7 14 -----Note----- For the first test case, the minimum cost path is as follows: 1 → 3 → 1 → 1 → 1 (total cost = 7). For the second test case, the minimum cost path is: 4 → 7 → 8 (total cost = 14).","solution":"def min_cost_path(t, test_cases): Calculate the minimum cost required to move from the top-left to the bottom-right corner of the grid. :param t: Number of test cases :param test_cases: List of tuples where each tuple contains n, m, and the grid (list of lists) :return: List of minimum costs for each test case results = [] for case in test_cases: n, m, grid = case # dp array to store the minimum cost to reach each cell dp = [[0] * m for _ in range(n)] # Initialize the top-left cell with the starting point cost dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The minimum cost to reach the bottom-right cell results.append(dp[n-1][m-1]) return results"},{"question":"You are given positions (X_i, Y_i) of N trees in a forest on an infinite grid. Each tree can fall to the right if not obstructed by another tree. If a tree falls, it will continue falling in the right direction until it either leaves the grid or hits another tree. Determine the number of trees that will be hit if each tree is pushed one by one. Constraints * 1 leq N leq 200000 * 1 leq X_i, Y_i leq 10^6 * X_i neq X_j * The positions of the trees are all unique. Input Input is given from Standard Input in the following format. N X_1 Y_1 X_2 Y_2 vdots X_N Y_N Output Print N lines. The i-th line is for the ith tree considered for pushing, it should contain one integer: the number of trees that will be hit when the ith tree is pushed to the right. Examples Input 5 1 1 2 2 3 3 4 4 5 5 Output 0 0 0 0 0 Input 4 1 1 2 1 3 1 4 1 Output 3 2 1 0 Input 3 1 1 4 4 2 3 Output 0 0 0","solution":"def number_of_trees_hit(N, positions): Determine the number of trees that will be hit if each tree is pushed one by one. Args: N (int): Number of trees. positions (list of tuple): List containing the positions of trees as (X_i, Y_i). Returns: list of int: List containing the number of trees hit for each tree. # Sort the positions by X coordinate for easier processing positions_sorted = sorted(positions) # Create a list to store the result for each tree result = [0] * N # Create a dictionary to map from tree index to the number of trees hit to the right tree_to_hits = {} # Iterate over each tree from right to left to calculate the number of hits for i in range(N - 1, -1, -1): x, y = positions_sorted[i] # Initialize hit count to 0 hits = 0 # Check if there are trees to the right with the same y coordinate for j in range(i + 1, N): if positions_sorted[j][1] == y: hits += 1 + (tree_to_hits[j] if j in tree_to_hits else 0) break # Save the result for this tree result[i] = hits tree_to_hits[i] = hits # Generate result in the original order of input position_to_hits_map = {pos: result[i] for i, pos in enumerate(positions_sorted)} original_order_result = [position_to_hits_map[pos] for pos in positions] return original_order_result"},{"question":"You are given a directed graph with n nodes and m edges. Your task is to determine if there is a way to travel from node 1 to node n using the edges provided. Input The first line of input contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of nodes and edges in the graph. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) indicating a directed edge from node u to node v. Output Print \\"YES\\" if there is a path from node 1 to node n using the edges provided, otherwise print \\"NO\\". Example Input 5 6 1 2 2 3 3 4 4 5 1 3 2 5 Output YES Note In this example, there is a path from node 1 to node 5, which can be 1 -> 2 -> 5 or 1 -> 3 -> 4 -> 5.","solution":"def can_travel_to_last_node(n, m, edges): from collections import deque, defaultdict # Define an adjacency list to represent the graph graph = defaultdict(list) # Add the edges to the graph for u, v in edges: graph[u].append(v) # BFS to check if there\'s a path from node 1 to node n queue = deque([1]) visited = set() while queue: current = queue.popleft() if current in visited: continue visited.add(current) if current == n: return \\"YES\\" for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return \\"NO\\""},{"question":"Write a function that takes a list of non-negative integers and returns the largest possible number that can be made by concatenating them together. Example 1: Input: [10, 2] Output: \\"210\\" Example 2: Input: [3, 30, 34, 5, 9] Output: \\"9534330\\" Constraints: - The result may be very large, so you need to return a string instead of an integer. - Elements in the input list will be in the range [0, 10^4].","solution":"from functools import cmp_to_key def largest_number(nums): Given a list of non-negative integers, arrange them such that they form the largest number. :param nums: List[int]: List of non-negative integers :return: str: Largest possible concatenated number in string form def custom_compare(x, y): # Compare based on concatenation in both possible orders if x + y > y + x: return -1 # x should come before y if x + y < y + x: return 1 # y should come before x return 0 # x and y are equal in terms of concatenation result # Convert numbers to strings because we need to concatenate them nums_str = [str(num) for num in nums] # Sort using the custom comparator nums_str.sort(key=cmp_to_key(custom_compare)) # Join the sorted numbers into the largest number string largest_num = \'\'.join(nums_str) # Edge case: if the largest number is \\"0\\" (when all numbers are zero) if largest_num[0] == \'0\': return \'0\' return largest_num"},{"question":"In a fantasy land called Gridlandia, the king has a peculiar interest in magic square matrices. A magic square matrix is a square grid filled with distinct positive integers such that the sum of the integers in each row, each column, and both main diagonals are the same. Given a 3x3 grid partially filled with integers (where some cells might be empty, represented by 0), you need to complete the grid such that it forms a magic square matrix. If it is possible to create one, output the completed grid. If it is not possible, output -1. ----- Input ----- * The input consists of 3 lines, each line representing a row of the 3x3 grid. * Each line contains 3 integers separated by spaces. The empty cells are denoted by 0. ----- Output ----- * If it is possible to complete the grid to a magic square matrix, output the completed 3x3 grid. * If it is not possible, output -1. ----- Example ----- Input: 8 1 6 3 0 0 0 0 0 Output: 8 1 6 3 5 7 4 9 2 By: Kiran, Sarthak, Manpreet, Priya","solution":"def is_magic_square(matrix): Check whether a 3x3 matrix is a magic square. s = sum(matrix[0]) for i in range(3): if sum(matrix[i]) != s or sum(matrix[j][i] for j in range(3)) != s: return False if sum(matrix[i][i] for i in range(3)) != s or sum(matrix[i][2-i] for i in range(3)) != s: return False return True def fill_grid(matrix): Try to complete the 3x3 grid to form a magic square. existing_numbers = [num for row in matrix for num in row if num != 0] missing_numbers = [num for num in range(1, 10) if num not in existing_numbers] def backtrack(grid, empty_positions, index): if index == len(empty_positions): return is_magic_square(grid) i, j = empty_positions[index] for num in missing_numbers: if num in grid[i] or num in [grid[k][j] for k in range(3)]: continue grid[i][j] = num if backtrack(grid, empty_positions, index + 1): return True grid[i][j] = 0 return False empty_positions = [(i, j) for i in range(3) for j in range(3) if matrix[i][j] == 0] if backtrack(matrix, empty_positions, 0): return matrix else: return -1 def complete_grid(matrix): matrix_filled = fill_grid(matrix) if matrix_filled == -1: return -1 else: return matrix_filled"},{"question":"You are working on an inventory management system for a small grocery store. The system must handle product restocking and customer purchases efficiently. Each product is uniquely identified by an integer product ID and has a quantity in stock. Your task is to write a program to process restocking and purchase requests based on the given commands. The commands are of two types: 1. \\"restock product_id quantity\\" - Restock the specified quantity of the product with the given product_id. 2. \\"purchase product_id quantity\\" - A customer wants to purchase the specified quantity of the product with the given product_id. If there is enough stock, the purchase is successful, and the stock is decreased by the specified quantity. If there is not enough stock, the purchase fails. The program should output the success or failure of each purchase request. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) - the number of commands. Each of the next n lines contains a command in one of the two formats: 1. For restocking: \\"restock product_id quantity\\" (1 ≤ product_id ≤ 10^6, 1 ≤ quantity ≤ 10^6) 2. For purchasing: \\"purchase product_id quantity\\" (1 ≤ product_id ≤ 10^6, 1 ≤ quantity ≤ 10^6) -----Output----- For each purchase command, print \\"SUCCESS\\" if the purchase was successful and \\"FAILURE\\" if the purchase was not successful. -----Example----- Input 6 restock 1 100 restock 2 200 purchase 1 50 purchase 1 60 purchase 2 300 purchase 2 150 Output SUCCESS SUCCESS FAILURE SUCCESS -----Note----- In the example: 1. The first command restocks 100 units of product 1. 2. The second command restocks 200 units of product 2. 3. The third command attempts to purchase 50 units of product 1, which is successful (stock goes from 100 to 50). 4. The fourth command attempts to purchase 60 units of product 1, which is also successful (stock goes from 50 to -10, but the stock is reduced by only 50, actual stock should end up at 0). 5. The fifth command attempts to purchase 300 units of product 2, which fails because only 200 units are available. 6. The sixth command attempts to purchase 150 units of product 2, which is successful (stock goes from 200 to 50).","solution":"def process_commands(commands): Processes a list of restock and purchase commands and returns the result of each purchase request. Args: commands (list of str): The list of commands to process. Returns: list of str: The results of the purchase commands (either \\"SUCCESS\\" or \\"FAILURE\\"). inventory = {} results = [] for command in commands: parts = command.split() cmd_type = parts[0] product_id = int(parts[1]) quantity = int(parts[2]) if cmd_type == \\"restock\\": if product_id in inventory: inventory[product_id] += quantity else: inventory[product_id] = quantity elif cmd_type == \\"purchase\\": if product_id in inventory and inventory[product_id] >= quantity: inventory[product_id] -= quantity results.append(\\"SUCCESS\\") else: results.append(\\"FAILURE\\") return results"},{"question":"You are given an array of N integers, each representing the amount of cookies of a certain type. Your task is to merge all the cookie types into one type by performing a series of operations. In each operation, you can merge two different types of cookies into one, consuming all the cookies of those two types, and gaining a certain number of new cookies. The number of new cookies gained is equal to the product of the two types being merged. Determine the maximum number of cookies you can have after merging all types of cookies. ------ Input ------ The first line contains a single integer T, the number of test cases. Then T test cases follow: Each test case starts with an integer N, the number of types of cookies. The next line contains N integers a_1, a_2, ldots, a_N, where a_i is the number of cookies of the i-th type. ------ Output ------ For each testcase, output in a single line the maximum number of cookies possible after merging all types. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 1 ≤ a_i ≤ 10^9 ----- Sample Input 1 ------ 2 3 2 3 4 4 1 1 1 1 ----- Sample Output 1 ------ 24 1 ----- Explanation 1 ------ In the first test case: - Merge types with 2 and 3 cookies to get 2 * 3 = 6 new cookies. - Merge the result (6 cookies) with the remaining type (4 cookies) to get 6 * 4 = 24 new cookies. In the second test case: - Merge any two types you get 1 * 1 = 1 new cookies, and this process results always in 1 ultimately.","solution":"def max_cookies(T, test_cases): def compute_max_cookies(N, cookies): max_cookies = 1 for cookie in cookies: max_cookies *= cookie return max_cookies results = [] for t in range(T): N = test_cases[t][0] cookies = test_cases[t][1] result = compute_max_cookies(N, cookies) results.append(result) return results"},{"question":"Mia is playing a game with her friends. She starts with a string S consisting of lowercase English letters and wants to transform it. She can perform the following operation any number of times: Select two indices i and j (1 ≤ i < j ≤ length of S) such that S[i] is the same as S[j], and remove all the characters between S[i] and S[j], inclusive, from the string. Mia wants to know the length of the longest possible string she can obtain after performing the operations any (possibly zero) number of times on S. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. Each test case contains one line. - The first line contains the string S. ------ Output Format ------ For each test case, print the length of the longest possible string that can be obtained after performing the operations any (possibly zero) number of times on S. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10000 - Sum of |S| over all test cases does not exceed 2 cdot 10^{5}. ----- Sample Input 1 ------ 2 abacaba aabbcc ----- Sample Output 1 ------ 7 6 ----- Explanation 1 ------ Test Case 1: The longest possible string obtained is \\"abacaba\\", which is already the longest. Test Case 2: The longest possible string obtained is \\"aabbcc\\". In this case, removing any characters wouldn\'t increase the length of the string.","solution":"def longest_possible_length(S): Returns the length of the longest possible string after performing the removal operations on S. # Each character is a potential palindrome center, so the original length is always the longest return len(S) def process_test_cases(T, test_cases): results = [] for i in range(T): S = test_cases[i] results.append(longest_possible_length(S)) return results"},{"question":"Given a string containing binary digits (0s and 1s) and a number `k`, return the maximum number of consecutive 1s you can achieve by flipping at most k 0s. You can assume the input string is non-empty and the number k is a non-negative integer. For instance: ``` maxConsecutiveOnes(\\"110100110\\", 3) => 8 maxConsecutiveOnes(\\"1100111\\", 2) => 7 maxConsecutiveOnes(\\"00001000\\", 1) => 2 maxConsecutiveOnes(\\"111\\", 0) => 3 maxConsecutiveOnes(\\"0\\", 2) => 1 ``` Example Function Signature **Python:** ```python def maxConsecutiveOnes(s: str, k: int) -> int: # Your implementation here ``` Constraints - The input string will contain only \'0\'s and \'1\'s. - The length of the string will not exceed 10^5. - The value of k will be a non-negative integer less than or equal to the length of the string.","solution":"def maxConsecutiveOnes(s: str, k: int) -> int: Return the maximum number of consecutive 1s achievable by flipping at most k 0s. left, max_1s = 0, 0 num_zeros = 0 for right in range(len(s)): if s[right] == \'0\': num_zeros += 1 while num_zeros > k: if s[left] == \'0\': num_zeros -= 1 left += 1 max_1s = max(max_1s, right - left + 1) return max_1s"},{"question":"Beta owns a garden with `n` plants. Each plant can be watered with a certain amount of water every day. Beta has a watering system that consists of pipes and junctions connecting all the plants in such a way that any plant can be reached from any other plant via pipes. Beta wants to make sure that every day, certain plants can be grouped together into a single watering task. A watering task is defined as a group of plants that can be watered with a specified amount of water, such that each plant in the group receives exactly the amount of water it requires. For each plant `i` (1 ≤ i ≤ n), Beta knows the exact amount of water `w_i` it needs daily. Beta also knows the amount of water `c_i,` denoting the capacity of each plant to hold excess water. Beta can choose to water the plants in groups such that each group forms a connected subgraph. However, the plants in each group must have a unique water requirement that does not exceed their capacity and each group’s total water requirement should not exceed the sum of capacities of all plants in the group. Given the gardening constraints, Beta wants to divide all the plants into watering tasks such that these conditions are met and the total watering needed is minimized. Input The first line contains an integer `n` (2 ≤ n ≤ 10^5), denoting the number of plants. The second line contains `n` integers `w_1, w_2, ..., w_n` (1 ≤ w_i ≤ 10^6), denoting the water requirement for each plant. The third line contains `n` integers `c_1, c_2, ..., c_n` (1 ≤ c_i ≤ 10^6), denoting the water capacity for each plant. Each of the following `n - 1` lines contains two integers `u_i, v_i` (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i), denoting a pipe connecting plants `u_i` and `v_i`. It is guaranteed that all plants are connected via pipes. Output Print a single integer: the minimum total watering needed to ensure the plants’ requirements are met. Examples Input 5 10 20 30 40 50 15 25 35 45 55 1 2 1 3 2 4 2 5 Output 150 Input 4 5 10 15 20 10 20 30 40 1 2 2 3 3 4 Output 50 Input 6 5 5 5 5 5 5 5 5 5 5 5 5 1 2 2 3 2 4 4 5 4 6 Output 30 Note In the first example, the optimal groupings are as follows: - Group 1: Plants 1, 2 (watering task: 10 + 20 = 30) - Group 2: Plants 3, 4 (watering task: 30 + 40 = 70) - Group 3: Plant 5 (watering task: 50) Total watering needed is 150.","solution":"def min_total_watering(n, water_requirements, capacities, pipes): Function to determine the minimum total watering needed to ensure the plants\' requirements are met. :param n: int, number of plants :param water_requirements: list, the water requirement for each plant :param capacities: list, the water capacity for each plant :param pipes: list of tuples, each tuple is a pair of integers representing the pipe connections between plants :return: int, the minimum total watering needed # Initialize the graph from the pipe connections from collections import defaultdict graph = defaultdict(list) for u, v in pipes: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) min_total_watering_result = 0 def dfs(node): # Using DFS to explore the graph and gather water requirements and capacities stack = [node] group_water_requirements = 0 group_capacities = 0 while stack: current_node = stack.pop() if not visited[current_node]: visited[current_node] = True group_water_requirements += water_requirements[current_node - 1] group_capacities += capacities[current_node - 1] for adjacent in graph[current_node]: if not visited[adjacent]: stack.append(adjacent) return min(group_water_requirements, group_capacities) for node in range(1, n + 1): if not visited[node]: min_total_watering_result += dfs(node) return min_total_watering_result"},{"question":"In a small village, a farmer is growing a variety of crops. To maintain the fertility of the soil, he follows a crop rotation strategy. The strategy involves arranging the crops in a rectangular grid such that no two adjacent cells (either horizontally or vertically) have the same type of crop. Given the current arrangement of the crops in the grid, determine if it is possible to find a permutation of the given entries that follows the rule. -----Input----- - The first line of input contains two integers n and m denoting the number of rows and columns in the grid, respectively. - The next n lines contain m integers each, where the j-th integer in the i-th line represents the type of crop present in the (i, j)-th cell. -----Output----- Print \\"YES\\" if it is possible to permute the entries of the grid such that no two adjacent cells have the same type of crop. Otherwise, print \\"NO\\". -----Constraints----- - 1 le n, m le 100 - 1 le text{crop_type} le 100 -----Example Input 1----- 3 3 1 2 3 2 3 1 3 1 2 -----Example Output 1----- YES -----Example Input 2----- 2 2 1 1 2 2 -----Example Output 2----- NO -----Explanation----- In the first example, one possible permutation of the crops that satisfies the rule could be: 1 3 2 2 1 3 3 2 1 In the second example, it is impossible to permute the entries such that no two adjacent cells have the same type of crop.","solution":"def is_possible_permutation(n, m, grid): Returns \\"YES\\" if it is possible to permute the entries of the grid such that no two adjacent cells have the same type of crop. Otherwise, returns \\"NO\\". from collections import defaultdict import itertools # Initialize dictionaries to count occurrences of each crop type in each row and column row_counts = [defaultdict(int) for _ in range(n)] col_counts = [defaultdict(int) for _ in range(m)] # Fill counts for i in range(n): for j in range(m): row_counts[i][grid[i][j]] += 1 col_counts[j][grid[i][j]] += 1 # Check if the maximum count of any crop type is more than half of the row length or column length for i in range(n): for count in row_counts[i].values(): if count > (m + 1) // 2: return \\"NO\\" for j in range(m): for count in col_counts[j].values(): if count > (n + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"You are given a sequence of numbers representing the heights of buildings in a row. You\'re tasked with finding out the maximum area of a rectangle that can be formed from these buildings. Each building\'s width is 1 unit. For example, if the heights of the buildings are `[2, 1, 5, 6, 2, 3]`, the largest rectangle has an area of `10` which is formed by buildings with height `5` and `6`. -----Input----- The first line of input data contains an integer t (1 leq t leq 100) — the number of test cases. Next, descriptions of t test cases follow. The first line of each test case contains an integer n (1 leq n leq 100000) — the number of buildings. The second line contains n integers h_1, h_2, dots, h_n (1 leq h_i leq 100000) — the heights of the buildings. It is guaranteed that the sum of the values n over all test cases does not exceed 100000. -----Output----- For each of t test cases, print one integer — the maximum area of a rectangle that can be formed from the buildings in that test case. -----Example----- Input 2 6 2 1 5 6 2 3 5 4 2 0 3 2 Output 10 4 -----Note----- In the first test case, the largest rectangle has an area of 10, which is formed by buildings with height 5 and 6. In the second test case, the largest rectangle has an area of 4, which is formed by the single building with height 4.","solution":"def largest_rectangle_area(heights): stack = [] max_area = 0 heights.append(0) # Add a sentinel value for final calculation for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) return max_area def solve(buildings_data): t = buildings_data[0] index = 1 results = [] for _ in range(t): n = buildings_data[index] heights = buildings_data[index + 1: index + 1 + n] index += n + 1 results.append(largest_rectangle_area(heights)) return results"},{"question":"A company wants to analyze the performance of its employees. They have a list of ratings given to each employee based on different parameters for multiple months. To simplify the performance evaluation, the company wants to find the longest contiguous subarray where the absolute difference between the maximum and minimum ratings is less than or equal to a given threshold. Can you help the company solve this task by writing a program that computes the length of the longest contiguous subarray for each employee? -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and D. - The second line contains N space-separated integers representing the ratings for the employee for different months. -----Output----- For each test case, print a single line containing one integer — the length of the longest contiguous subarray where the absolute difference between the maximum and minimum ratings is less than or equal to D. -----Constraints----- - 1 le T le 10 - 1 le N le 10^5 - 0 le D le 10^6 - 1 le text{Rating}_i le 10^6 for each valid i -----Subtasks----- Subtask #1 (20 points): - 1 le T le 5 - 1 le N le 100 Subtask #2 (30 points): - 1 le T le 5 - 1 le N le 1,000 Subtask #3 (50 points): original constraints -----Example Input----- 1 6 3 1 3 6 7 9 4 -----Example Output----- 3 -----Explanation----- Example case 1: The longest subarray where the absolute difference between the maximum and minimum ratings is less than or equal to 3 is [1, 3, 4] with length 3. The subarray [6, 7, 4] also satisfies the condition with the length being equal to 3. Thus, the longest length is 3.","solution":"from collections import deque def longest_contiguous_subarray(N, D, ratings): Returns the length of the longest contiguous subarray where the absolute difference between the maximum and minimum ratings is <= D. left = 0 max_deque = deque() # stores indices of ratings in decreasing order min_deque = deque() # stores indices of ratings in increasing order max_length = 0 for right in range(N): while max_deque and ratings[max_deque[-1]] <= ratings[right]: max_deque.pop() while min_deque and ratings[min_deque[-1]] >= ratings[right]: min_deque.pop() max_deque.append(right) min_deque.append(right) while ratings[max_deque[0]] - ratings[min_deque[0]] > D: left += 1 if max_deque[0] < left: max_deque.popleft() if min_deque[0] < left: min_deque.popleft() max_length = max(max_length, right - left + 1) return max_length def solve_performance_analysis(test_cases): Processes multiple test cases and returns the result for each. results = [] for N, D, ratings in test_cases: result = longest_contiguous_subarray(N, D, ratings) results.append(result) return results"},{"question":"You are given an input list of integers and a target integer. Write a function to determine if there are two distinct indices `i` and `j` in the input list such that the difference between `nums[i]` and `nums[j]` is exactly the target integer. Return `true` if such a pair exists, otherwise return `false`. ``` For example: solve([1, 5, 9, 13], 4) = true, because the difference between 5 and 1 is 4. solve([1, 5, 9, 13], 3) = false, because there is no pair with a difference of 3. solve([1, 3, 5, 7], 2) = true, because the difference between 3 and 1, 5 and 3, and 7 and 5 is 2. solve([1, 5, 5, 13], 0) = true, because there is a pair (5, 5) with a difference of 0. solve([1], 1) = false, because there are no two distinct indices in the list. ``` Complete the function to achieve the required functionality.","solution":"def solve(nums, target): Determines if there are two distinct indices i and j in the input list such that the difference between nums[i] and nums[j] is exactly the target integer. Args: nums : List[int] - A list of integers. target : int - The target difference. Returns: bool - True if such a pair exists, False otherwise. num_set = set(nums) if target == 0: # Special case to check pairs with zero difference from collections import Counter count = Counter(nums) for val in count.values(): if val > 1: return True else: for num in nums: if (num + target in num_set) or (num - target in num_set): return True return False"},{"question":"Problem Statement Given a list of integers, find the sublist (contiguous elements) which has the largest sum and return that sum. You should also return the start and end indices (1-based) of this sublist. If there are multiple sublists with the same largest sum, return the one which has the smallest start index. If the list is empty, return 0 as the sum with both indices as 0. **Examples:** 1. **Input:** `[-2,1,-3,4,-1,2,1,-5,4]` **Output:** `(6, 4, 7)` *Explanation:* The sublist `[4,-1,2,1]` has the largest sum of `6` and it starts from index `4` and ends at index `7`. 2. **Input:** `[1]` **Output:** `(1, 1, 1)` *Explanation:* The sublist `[1]` has the largest sum of `1` and it starts from index `1` and ends at index `1`. 3. **Input:** `[5,4,-1,7,8]` **Output:** `(23, 1, 5)` *Explanation:* The sublist `[5,4,-1,7,8]` has the largest sum of `23` and it starts from index `1` and ends at index `5`. 4. **Input:** `[]` **Output:** `(0, 0, 0)` *Explanation:* The list is empty, so the output should be `0` as the sum with both indices as `0`. **Function Signature:** ```python def max_sublist_sum(nums: List[int]) -> Tuple[int, int, int]: pass ``` # Note 1. Consider negative numbers and different scenarios of input lists. 2. The function signature suggests the input is a list of integers and the output is a tuple containing three integers. 3. You can assume the input list will contain integers only and will be provided according to the constraints explained.","solution":"from typing import List, Tuple def max_sublist_sum(nums: List[int]) -> Tuple[int, int, int]: if not nums: return (0, 0, 0) max_sum = current_sum = nums[0] start = end = 0 temp_start = 0 for i in range(1, len(nums)): if current_sum < 0: current_sum = nums[i] temp_start = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return (max_sum, start + 1, end + 1)"},{"question":"A treasure hunter is exploring an ancient labyrinth represented by a grid with N rows and M columns. Each cell in the grid contains either a free space, denoted by \'.\', or a wall, denoted by \'#\'. The hunter can move to any of the four adjacent cells (left, right, up, and down) if they contain a free space. The goal is to determine if there exists a simple path from the top-left cell (1, 1) to the bottom-right cell (N, M) while visiting every free space cell exactly once. A simple path does not revisit any cell it has already been to. -----Input----- - The first line of the input contains two integers N and M (the number of rows and columns of the grid). - The next N lines contain M characters each, representing the labyrinth. -----Output----- Print \\"YES\\" if there exists such a simple path, otherwise print \\"NO\\". -----Constraints----- - 2 le N, M le 10 - The top-left and bottom-right cell are always free spaces (\'.\'). - There is at least one free space (\'.\') in the grid. -----Example Input----- 3 3 ..# .#. ..# -----Example Output----- NO -----Explanation----- There is no simple path from the top-left to the bottom-right cell visiting all free spaces exactly once in this specific grid configuration.","solution":"def is_path_exists(N, M, grid): from collections import deque # Helper function to check if we can move to a given cell def is_free(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' # BFS to count total free cells and verify path def bfs(start_x, start_y): queue = deque([(start_x, start_y)]) visited = [[False] * M for _ in range(N)] visited[start_x][start_y] = True free_count = 1 free_cells = sum(row.count(\'.\') for row in grid) while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_free(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True free_count += 1 queue.append((nx, ny)) # Check if the bottom right corner is reached and all free cells are visited exactly once return free_count == free_cells and visited[N - 1][M - 1] # Start the search from the top-left cell return \\"YES\\" if bfs(0, 0) else \\"NO\\" # Example Usage: N = 3 M = 3 grid = [ \\"..#\\", \\".#.\\", \\"..#\\" ] print(is_path_exists(N, M, grid)) # Expected Output: \\"NO\\""},{"question":"Given an integer array of length n, where each element represents the number of books on one shelf. Your task is to determine if it is possible to redistribute the books such that all shelves have the same number of books by only moving books between the shelves. If it is possible, print YES. Otherwise, print NO. -----Constraints----- - 1 leq n leq 100 - 1 leq array[i] leq 1000 (where 1 leq i leq n) -----Input----- Input is given from Standard Input in the following format: n array[0] array[1] ... array[n-1] -----Output----- Print YES if it\'s possible to redistribute the books such that all shelves have an equal number of books; print NO otherwise. -----Sample Input----- 4 3 3 3 3 -----Sample Output----- YES It\'s already uniform, so the answer is YES. -----Sample Input----- 5 5 8 6 7 4 -----Sample Output----- YES Books can be redistributed to have all shelves with 6 books each: moving 1 book from the second shelf to the fifth shelf, and moving two books from the fourth shelf to the third shelf.","solution":"def can_redistribute_evenly(n, array): Determines if it is possible to redistribute the books such that all shelves have the same number of books. :param n: integer, number of shelves :param array: list of integers, number of books on each shelf :return: \'YES\' if redistribution is possible, \'NO\' otherwise total_books = sum(array) if total_books % n == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Problem You are tasked with implementing a system to manage an online store\'s promotional campaigns. Each campaign has a start date, an end date, and a promotional discount percentage. The store needs to determine the effective discount percentage on any given date, taking into account overlapping campaigns. If multiple campaigns overlap on a specific date, only the highest discount percentage should be applied. Your task is to write a function that, given a series of promotional campaigns and a specific date, returns the effective discount percentage on that date. Constraints * 1 ≤ number of campaigns ≤ 10^5 * All dates are given in the format YYYY-MM-DD Input The first line contains an integer n, the number of promotional campaigns. Each of the next n lines contains a start date, an end date, and a discount percentage, separated by spaces. The last line contains a single date in the format YYYY-MM-DD, representing the date for which you need to determine the effective discount percentage. Output Output a single integer representing the effective discount percentage on the given date. If there are no campaigns active on that date, output 0. Examples Input 3 2023-01-01 2023-01-10 15 2023-01-05 2023-01-12 20 2023-01-11 2023-01-20 10 2023-01-06 Output 20 Input 2 2022-10-01 2022-10-10 25 2022-10-15 2022-10-25 30 2022-10-05 Output 25","solution":"from datetime import datetime def effective_discount(campaigns, date): Determines the effective discount percentage on a given date, taking into account overlapping campaigns. Parameters: campaigns (list of tuples): A list where each tuple contains start date (YYYY-MM-DD), end date (YYYY-MM-DD), and discount percentage. date (str): The date (YYYY-MM-DD) for which to determine the effective discount. Returns: int: The effective discount percentage on the given date. If no campaigns are active on that date, returns 0. max_discount = 0 query_date = datetime.strptime(date, \\"%Y-%m-%d\\") for start_date, end_date, discount in campaigns: start_date = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_date = datetime.strptime(end_date, \\"%Y-%m-%d\\") if start_date <= query_date <= end_date: max_discount = max(max_discount, discount) return max_discount def parse_input(input_string): Parses the input string and returns campaigns and date. Parameters: input_string (str): The input string containing campaigns and date. Returns: tuple: A tuple containing a list of campaigns and the date to query. lines = input_string.strip().split(\'n\') n = int(lines[0]) campaigns = [] for i in range(1, 1 + n): start_date, end_date, discount = lines[i].split() discount = int(discount) campaigns.append((start_date, end_date, discount)) query_date = lines[-1] return campaigns, query_date"},{"question":"Polycarp is an avid collector of rare coins. He organizes his collection in albums, where each album can hold a certain number of coins. Polycarp wants to maximize the number of complete albums he has. An album is considered complete if it contains exactly the number of coins it is designed to hold. Polycarp has n coins of different types, represented by an array of integers, where each integer denotes a unique type of coin. Each type of coin can be considered unlimited, so Polycarp can choose how many of each type he wants to use to fill his albums. Given m albums, where each album has a specific capacity denoted by the integer c1, c2, ..., cm, determine the maximum number of complete albums Polycarp can have. The coins and the album capacities are such that the sum of the capacities never exceeds the number of coins Polycarp has. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 1000) — the number of different coin types and the number of albums respectively. The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 10^4) — the coin types available for Polycarp to use. The third line contains m integers c1, c2, ..., cm (1 ≤ ci ≤ 10^5) — the capacities of each album. Output Print a single integer — the maximum number of complete albums Polycarp can have. Examples Input 5 3 1 2 3 4 5 5 4 3 Output 3 Input 4 4 1 1 2 2 1 2 3 4 Output 2 Input 6 2 1 2 2 3 3 3 5 6 Output 1 Note In the first example, Polycarp can use his coins to completely fill all 3 albums. In the second example, Polycarp can fill the first two albums completely using coins of type 1 and 2. In the third example, Polycarp can only fill one album completely because the sum of coins is exactly 6, which is the capacity of the second album.","solution":"def max_complete_albums(n, m, coin_types, album_capacities): # We can fill an album if the sum of any subset of coins equals the album\'s capacity # Therefore, the answer is the number of albums m, since by constraints we know we have enough coins max_albums = min(m, len(album_capacities)) return max_albums"},{"question":"# Task You are organizing a programming competition with multiple participants. Each participant is assigned a unique ID between 1 and N. During various rounds of the competition, you recorded the times that each participant took to complete different tasks. You now want to summarize the performance of each participant by calculating the average time they took over all tasks. Write a function to calculate the average time for each participant given the recorded times of the tasks. # Input - An integer `N` representing the number of participants. - A list of tuples, where each tuple contains: - An integer `participant_id` representing the participant\'s unique ID. - A float `time` representing the time the participant took to complete a task. # Output - A dictionary where the keys are the participant IDs and the values are the average times taken by each participant. # Example Input: ``` N = 3 task_times = [(1, 5.0), (2, 6.1), (1, 4.2), (3, 7.0), (2, 5.4), (3, 6.3)] ``` Output: ``` {1: 4.6, 2: 5.75, 3: 6.65} ``` # Constraints - Each participant will have completed at least one task. - 1 <= N <= 1000 - The list `task_times` will have a length of at most 10^5. - The float times will be non-negative and have at most one decimal place.","solution":"def calculate_average_times(N, task_times): Calculate the average time taken by each participant. Args: N : int : number of participants task_times : list of tuple : (participant_id, time) Returns: dict: a dictionary where keys are participant IDs and values are the average times. from collections import defaultdict # Create dictionaries to store the cumulative time and count of tasks for each participant. total_times = defaultdict(float) task_counts = defaultdict(int) # Accumulate the times and task counts for each participant. for participant_id, time in task_times: total_times[participant_id] += time task_counts[participant_id] += 1 # Calculate the average times for each participant. average_times = {participant_id: total_times[participant_id] / task_counts[participant_id] for participant_id in total_times} return average_times"},{"question":"In a small town, there is a unique tradition where people celebrate by designing beautiful lanterns. Each lantern has a base value and various attachments, each adding a certain value to the lantern. Typically, people can select a contiguous subsequence of attachments to add to the lantern, without altering the primary base value. You’ve been asked to design a software that helps people determine the maximum possible value of their lantern after adding attachments. You are given the following: - The base value B of the lantern. - A sequence of N values where each value represents the attachment value. Your task is to determine the maximum possible total value of the lantern by choosing a contiguous subsequence of the attachments to add to the base value. # Input The first line contains an integer T denoting the number of test cases. For each test case: - The first line contains two integers, B (the base value of the lantern) and N (the number of attachments). - The second line contains N space-separated integers representing the values of the attachments. # Output For each test case, print the maximum possible total value of the lantern. # Constraints - 1 leq T leq 50 - -10^9 leq B leq 10^9 - 1 leq N leq 10000 - -1000000000 leq text{attachment_value} leq 1000000000 # Sample Input ``` 2 5 4 1 2 3 4 -5 3 -1 -2 3 ``` # Sample Output ``` 14 1 ``` # Explanation For the first test case: - The base value is 5. - One possible contiguous subsequence of attachments is [1, 2, 3, 4]. The sum of this subsequence is 10. - Adding this sum to the base value results in 5 + 10 = 15. For the second test case: - The base value is -5. - The optimal contiguous subsequence of attachments is [3]. The sum of this subsequence is 3. - Adding this sum to the base value results in -5 + 3 = -2.","solution":"def max_lantern_value(T, test_cases): results = [] for i in range(T): B, N = test_cases[i][\'B\'], test_cases[i][\'N\'] attachments = test_cases[i][\'attachments\'] # Using Kadane\'s Algorithm to find the maximum subarray sum current_max = 0 max_attachment_sum = -float(\'inf\') for value in attachments: current_max = max(value, current_max + value) max_attachment_sum = max(max_attachment_sum, current_max) max_total_value = B + max_attachment_sum results.append(max_total_value) return results"},{"question":"Implement a function `firstNonRepeatingChar(String s)` that takes a string input `s` and returns the first non-repeating character in the string. If all characters are repeating, return the character `None`. Consider only alphabetical characters (a-z and A-Z), and treat uppercase and lowercase characters as distinct. **Examples:** - `firstNonRepeatingChar(\\"swiss\\")` should return `w` - `firstNonRepeatingChar(\\"teeter\\")` should return `r` - `firstNonRepeatingChar(\\"aabbcc\\")` should return `None` # Constraints: - The input string `s` will have a length between 1 and 10,000 characters.","solution":"def firstNonRepeatingChar(s): Returns the first non-repeating character in the string s. If all characters are repeating, return None. # Dictionary to hold the counts of each character count_dict = {} # First pass to count the occurrences of each character for char in s: if char.isalpha(): # Only consider alphabetical characters if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 # Second pass to find the first non-repeating character for char in s: if char.isalpha() and count_dict[char] == 1: return char return None"},{"question":"Given a list of integers, your task is to write a function `cyclic_shift(L, k)` that returns a new list which is a cyclic shift of the original list `L` to the right by `k` positions. If `k` is negative, the shift should be to the left by `|k|` positions. For example: ``` cyclic_shift([1, 2, 3, 4, 5], 2) should return [4, 5, 1, 2, 3] cyclic_shift([1, 2, 3, 4, 5], -1) should return [2, 3, 4, 5, 1] cyclic_shift([1, 2, 3, 4, 5], 5) should return [1, 2, 3, 4, 5] cyclic_shift([1, 2, 3, 4, 5], 0) should return [1, 2, 3, 4, 5] ``` # Constraints: 1. Do not use built-in functions that perform rotation (such as collections.deque.rotate). 2. The shift should be efficient even for large lists. 3. Function should handle cases where `k` is greater than the length of the list. 4. If the list is empty, it should return an empty list. # Function Signature ```python def cyclic_shift(L: List[int], k: int) -> List[int]: ```","solution":"def cyclic_shift(L, k): Cyclically shifts list L to the right by k positions. If k is negative, shifts to the left by |k| positions. if not L: return [] n = len(L) k = k % n # Effective shifts needed if k > n return L[-k:] + L[:-k]"},{"question":"You are given a list of tasks represented by integer sequence tasks, where each task should be finished on a specific day. Each day, you can finish at most one task. You want to maximize the number of tasks you can complete within k days, where you can pick any consecutive k days to work on the tasks. Return the maximum number of tasks you can complete in those k days. Example 1: Input: tasks = [1, 2, 3, 4, 5], k = 3 Output: 3 Explanation: You can complete the following sequence of tasks in 3 days: - Finish task 3 on day 3 - Finish task 4 on day 4 - Finish task 5 on day 5 So, the maximum number of tasks you can complete is 3. Example 2: Input: tasks = [1, 2, 2, 3, 4, 5], k = 5 Output: 5 Explanation: You can complete the following sequence of tasks in 5 days: - Finish task 2 on day 2 - Finish task 2 on day 3 - Finish task 3 on day 4 - Finish task 4 on day 5 - Finish task 5 on day 6 So, the maximum number of tasks you can complete is 5. Note: 1 <= tasks.length <= 1000 1 <= tasks[i] <= 1000 1 <= k <= 100","solution":"def max_tasks(tasks, k): Returns the maximum number of tasks that can be completed in k consecutive days. tasks: List[int] - list of integers representing tasks to be finished on specific days k: int - number of consecutive days available to finish tasks return: int - maximum number of tasks that can be completed in k days n = len(tasks) max_tasks = 0 # Sort tasks to prioritize earlier days tasks.sort() # Use sliding window of size k to find the maximum number of tasks that can be done in k days for i in range(n): completed = 0 for j in range(i, min(n, i + k)): completed += 1 max_tasks = max(max_tasks, completed) return max_tasks"},{"question":"BumbleBee\'s Honey Production A beehive has two types of bees: worker bees and drone bees. Worker bees collect honey and drone bees protect the hive. Each worker bee can produce a certain amount of honey per day, and each drone bee can consume a certain amount of honey per day for their energy. Given the number of worker bees W, the honey production rate per worker bee per day P, the number of drone bees D, and the honey consumption rate per drone bee per day H, determine if the beehive will have a net gain or net loss in honey production after one day. If the beehive will produce more honey than it consumes in one day, print \\"Net Gain\\". If it will consume more honey than it produces, print \\"Net Loss\\". If the production and consumption are equal, print \\"Balanced\\". -----Constraints----- - 1 leq W leq 100 - 1 leq P leq 100 - 1 leq D leq 100 - 1 leq H leq 100 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: W P D H -----Output----- Print \\"Net Gain\\" if the beehive will produce more honey than it consumes, \\"Net Loss\\" if it will consume more honey than it produces, \\"Balanced\\" if the production and consumption are equal. -----Sample Input----- 10 5 4 10 -----Sample Output----- Net Gain In one day, 10 worker bees produce 10 * 5 = 50 units of honey. 4 drone bees consume 4 * 10 = 40 units of honey. Since 50 (production) > 40 (consumption), the output is \\"Net Gain\\".","solution":"def honey_production(W, P, D, H): Determines if the beehive will have a net gain, net loss, or balanced honey production. Args: W (int): Number of worker bees. P (int): Honey production rate per worker bee per day. D (int): Number of drone bees. H (int): Honey consumption rate per drone bee per day. Returns: str: \\"Net Gain\\", \\"Net Loss\\", or \\"Balanced\\". production = W * P consumption = D * H if production > consumption: return \\"Net Gain\\" elif production < consumption: return \\"Net Loss\\" else: return \\"Balanced\\""},{"question":"Aria and Ben love playing with strings, and have come up with a new game to test each other\'s skills. The game involves transforming one string into another using a series of allowed operations. The allowed operations are: 1. **Insert a character**: Aria can insert any character at any position in the string. 2. **Delete a character**: Aria can delete any character from the string. 3. **Replace a character**: Aria can replace any character in the string with any other character. Ben provides Aria with two non-empty strings, `source` and `target`. Aria\'s goal is to transform `source` into `target` using the minimum number of operations. Your task is to write a program to help Aria determine the minimum number of operations required to achieve the transformation. -----Input----- The input consists of two lines: - The first line contains the string `source` of length `m` (1 ≤ m ≤ 1000). - The second line contains the string `target` of length `n` (1 ≤ n ≤ 1000). Both strings contain only lowercase English letters. -----Output----- Output a single integer, the minimum number of operations required to transform `source` into `target`. -----Examples----- Sample Input 1: cat cut Sample Output 1: 1 Sample Input 2: abc yabd Sample Output 2: 2 Sample Input 3: intention execution Sample Output 3: 5","solution":"def min_edit_distance(source, target): m, n = len(source), len(target) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Insert all characters of target elif j == 0: dp[i][j] = i # Delete all characters of source elif source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] # No change needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1])# Replace return dp[m][n]"},{"question":"You are given a binary tree where each node has a value. Your task is to determine if the tree is a Binary Search Tree (BST). A Binary Search Tree is a tree in which for every node, the following properties hold: 1. The left subtree of a node contains only nodes with values less than the node\'s value. 2. The right subtree of a node contains only nodes with values greater than the node’s value. 3. Both the left and right subtrees must also be binary search trees. Write a function that checks if a given binary tree satisfies these conditions. Constraints * The number of nodes in the tree will not exceed 1000. * The value of each node will be within the range -10^9 to 10^9. Input The input will be given as a list of tuples, where each tuple represents a node and its children in the following format: node_value left_child_value right_child_value If a node does not have a left or right child, the corresponding value will be `None`. The input will be terminated with a \'null\' string. Output Print \\"YES\\" if the tree is a Binary Search Tree, and \\"NO\\" otherwise. Examples Input [(8, 3, 10), (3, 1, 6), (1, None, None), (6, 4, 7), (4, None, None), (7, None, None), (10, None, 14), (14, 13, None), (13, None, None)] null Output YES Input [(5, 1, 4), (1, None, None), (4, 3, 6), (3, None, None), (6, None, None)] null Output NO","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def create_tree(node_tuples): if not node_tuples: return None nodes = {} for val, left, right in node_tuples: if val not in nodes: nodes[val] = TreeNode(val) if left is not None: if left not in nodes: nodes[left] = TreeNode(left) nodes[val].left = nodes[left] if right is not None: if right not in nodes: nodes[right] = TreeNode(right) nodes[val].right = nodes[right] return nodes[node_tuples[0][0]] if node_tuples else None def is_bst(node, left=float(\'-inf\'), right=float(\'inf\')): if not node: return True if not (left < node.val < right): return False return is_bst(node.left, left, node.val) and is_bst(node.right, node.val, right) def check_if_bst(node_tuples): root = create_tree(node_tuples) return \\"YES\\" if is_bst(root) else \\"NO\\""},{"question":"In a certain land, there lives a Queen who loves to organize unusual cooperation tasks for her animals. One day, the Queen decides to test the animals\' ability to work together by setting a special task involving a sequence of commands. Here’s how the task works: - The Queen gives each animal a distinct position in a line from 1 to N. - Each animal can issue one of three commands to the other animals: 1. \\"Move left\\": The animal at position i moves to position i-1, if i-1 ≥ 1. 2. \\"Move right\\": The animal at position i moves to position i+1, if i+1 ≤ N. 3. \\"Swap\\": The animal at position i swaps places with the animal at position i+1, given i+1 ≤ N. - A command is represented as a pair (i, c), where i is the position of the animal issuing the command, and c is one of the characters \'L\', \'R\', or \'S\' representing \\"Move left\\", \\"Move right\\", and \\"Swap\\", respectively. The Queen wants to know whether it\'s possible for a specific permutation of the initial positions to be achieved after a certain number of commands. -----Input----- The input consists of three lines: - The first line contains a single integer N, the number of animals (1 ≤ N ≤ 10^5). - The second line contains a permutation of the integers from 1 to N, representing the target positions of the animals. - The third line contains a single integer M, the number of commands that the animals can issue (0 ≤ M ≤ 10^5). -----Output----- Output \\"YES\\" if it is possible to achieve the target permutation with the given number of commands. Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: 4 2 1 4 3 3 Sample Output 1: YES Sample Input 2: 5 5 1 2 3 4 1 Sample Output 2: NO","solution":"def is_permutation_possible(N, target, M): Determines if it\'s possible to achieve the target permutation with the given number of commands. Parameters: - N (int): The number of animals - target (list of int): The target permutation of the animals\' positions - M (int): The number of commands available Returns: - str: \\"YES\\" if the target permutation can be achieved, otherwise \\"NO\\" # We can always achieve the target permutation if M is greater than or equal to N-1. # This is because in the worst case, we\'d need N-1 swaps to sort the animals into any permutation. if M >= N - 1: return \\"YES\\" # Check if the target permutation is already sorted if target == sorted(target): return \\"YES\\" return \\"NO\\""},{"question":"A supermarket has recently introduced a new promotional scheme for customers. Each customer gets a unique promotional code consisting of lowercase alphabetical characters. The promotional code can have some repeated characters, but the supermarket wants to identify whether it is possible to rearrange the characters of the code such that no two adjacent characters are the same. Your task is to determine whether the promotional code can be rearranged to meet this criterion. -----Input----- The input is a single line containing a string s (1 leq |s| leq 10^5) consisting of lowercase English letters. -----Output----- Output \\"YES\\" if it is possible to rearrange the characters of the promotional code such that no two adjacent characters are the same. Otherwise, output \\"NO\\". -----Example----- Input aabb Output YES Input aaab Output NO -----Note----- In the first example, you can rearrange the string \\"aabb\\" to \\"abab\\" or \\"baba\\" to satisfy the condition. In the second example, there is no way to rearrange \\"aaab\\" such that no two adjacent characters are the same.","solution":"def can_rearrange_promotional_code(s): from collections import Counter n = len(s) char_count = Counter(s) # Find the frequency of the most common character max_freq = max(char_count.values()) # Check if we can rearrange such that no two adjacent characters are the same if max_freq <= (n + 1) // 2: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a sequence of integers which represent the amount of revenue generated by a company on each day. However, the company has a peculiar policy; they record the revenue as zero for any day when the revenue generated is less than the average revenue up to that point in time. Modify the sequence according to this policy. -----Input----- The first line of input contains an integer n (1 leq n leq 10^5) — the number of days for which revenue data is provided. The second line contains n integers r_1, r_2, dots, r_n (0 leq r_i leq 10^9), where r_i is the revenue generated on the i-th day. -----Output----- Print a single line with n integers representing the modified revenue sequence according to the company’s policy. -----Example----- Input 5 10 20 30 40 50 Output 10 20 30 40 50 Input 5 10 5 20 15 25 Output 10 0 20 15 25 Input 4 1 2 1 3 Output 1 2 0 3 -----Note----- In the first example, the revenue on each day is always equal to or greater than the average revenue up to that point, so the sequence remains unchanged. In the second example, the revenue on the second day is less than the average revenue of the previous days\' revenue (10), so it is recorded as 0 for that day. In the third example, the revenue on the third day is less than the average revenue of 1.5 up to that point (frac{1+2}{2}), so it is recorded as 0.","solution":"def modify_revenue_sequence(n, revenues): modified_revenues = [] total = 0 for i in range(n): total += revenues[i] average = total / (i + 1) if revenues[i] < average: modified_revenues.append(0) total -= revenues[i] else: modified_revenues.append(revenues[i]) return modified_revenues def parse_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) revenues = list(map(int, data[1:])) result = modify_revenue_sequence(n, revenues) print(\\" \\".join(map(str, result)))"},{"question":"You are given N sessions of a conference, each with a start time and an end time. Your task is to find the maximum number of sessions you can attend if you can only attend one session at a time. Note that if a session ends at the same time another one starts, you can attend both sessions consecutively. Write a function `max_sessions` which takes an integer N and a 2D list detailing the start and end times of the sessions and returns the maximum number of sessions you can attend. # Example 1: Input: N = 4 Sessions = 1 3 2 4 3 5 5 6 Output: 3 Explanation: You can attend the sessions (1,3), (3,5), and (5,6) without any overlap. # Example 2: Input: N = 3 Sessions = 5 7 1 3 3 6 Output: 2 Explanation: You can attend the sessions (1,3) and (5,7) without any overlap. Your Task: You don\'t need to read input or print anything. Complete the function `max_sessions()` which takes integer N and a list of lists representing the sessions as input parameters and returns the maximum number of sessions you can attend. # Expected Time Complexity: O(NlogN) # Expected Space Complexity: O(1) # Constraints: 1. 1 <= N <= 1000 2. 0 <= start, end <= 1000","solution":"def max_sessions(N, sessions): if N == 0: return 0 # Sort sessions by their end time sessions.sort(key=lambda x: x[1]) max_count = 1 last_end_time = sessions[0][1] for i in range(1, N): if sessions[i][0] >= last_end_time: max_count += 1 last_end_time = sessions[i][1] return max_count"},{"question":"A new tech company is working on a novel video streaming service. As part of their backend system, they need to implement a feature to validate and calculate the total playback length of the playlists users create. Each playlist consists of multiple video segments, and each segment has a specified duration. Additionally, some segments can be advertisements, which should not be counted towards the total playback length. Your task is to write a function to calculate the total playback length of a playlist, given that the playlist is represented as a list of tuples where each tuple denotes a segment. Each tuple contains two elements: the duration of the segment (in seconds) and a boolean value indicating whether the segment is an advertisement (True if it is an advertisement, False otherwise). Input Format: The first line contains an integer N, which denotes the number of segments in the playlist. The next N lines contain space-separated values where the first value is an integer denoting the duration of the segment (in seconds), and the second value is a boolean (either \\"True\\" or \\"False\\") denoting whether the segment is an advertisement. Output Format: Print the total playback length of the playlist, excluding advertisement segments. Constraints: 1 ≤ N ≤ 100 1 ≤ segment duration ≤ 3600 boolean value is either \\"True\\" or \\"False\\" SAMPLE INPUT 5 300 False 120 True 450 False 240 True 180 False SAMPLE OUTPUT 930 Explanation: Here, the total playback length of the playlist is calculated by summing up the durations of non-advertisement segments: 300 + 450 + 180 = 930 seconds.","solution":"def total_playback_length(playlist): calculates the total playback length of a playlist, excluding advertisement segments. Args: playlist (list of tuples): Each tuple contains the duration of the segment (int) and a boolean value (True if advertisement, False otherwise) Returns: int: Total playback length in seconds excluding advertisements. total_length = 0 for duration, is_ad in playlist: if not is_ad: total_length += duration return total_length"},{"question":"Munro is writing a new algorithm but is confused about how to proceed on a specific task. Could you assist Munro in solving the problem? Munro has a grid with N rows and M columns. Each cell in the grid contains a non-negative integer. He needs to find the maximum sum of integers that can be collected by starting at any cell in the first row and moving to any cell in the last row. From any cell, you can move straight down, down-left, or down-right to the next row. Help Munro determine this maximum sum. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M. The next N lines contain M space-separated integers each, representing the grid. ------ Output ------ For each test case, print a single line containing one integer — the maximum sum Munro can collect. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 0 ≤ text{grid}[i][j] ≤ 10^3 ------ Sample Input 1 ------ 1 3 3 1 2 3 4 5 6 7 8 9 ------ Sample Output 1 ------ 15 ------ Explanation 1 ------ Example case 1: Munro can start at cell (1,3) (value 3), move to cell (2,3) (value 6), and then move to cell (3,2) (value 8). The total sum collected is 3 + 6 + 6 = 15. Note that alternative paths with the same total sum exist. ------ Explanation 1 ------ Example case 1: Munro can start at cell (1,3) (value 3), move to cell (2,3) (value 6), and then move to cell (3,3) (value 9). The total sum collected is 3 + 6 + 9 = 18. Note that alternative paths with the same total sum exist.","solution":"def max_path_sum(n, m, grid): Returns the maximum path sum from any cell in the first row to any cell in the last row. # Create a dp table initialized with the values of the grid dp = [[0] * m for _ in range(n)] # Initialize the first row of dp table for j in range(m): dp[0][j] = grid[0][j] # Build the dp table for i in range(1, n): for j in range(m): max_val = dp[i-1][j] # Coming straight from above if j > 0: max_val = max(max_val, dp[i-1][j-1]) # Coming from the top-left if j < m-1: max_val = max(max_val, dp[i-1][j+1]) # Coming from the top-right dp[i][j] = grid[i][j] + max_val # The result will be the maximum value in the last row return max(dp[n-1]) def solve_max_path_sum(T, test_cases): Solves multiple test cases for the max path sum problem. results = [] for n, m, grid in test_cases: results.append(max_path_sum(n, m, grid)) return results"},{"question":"Joko is playing a game where he needs to collect exactly M stones. There are two types of stone packages available: one containing 4 stones and another containing 7 stones. Joko wants to collect exactly M stones with the least number of packages. INPUT First line of input gives P, the number of test cases. P lines follow, each having an integer M, the number of stones. OUTPUT Print the minimal number of packages Joko must buy. If it\'s impossible to collect exactly M stones, print -1. CONSTRAINTS 1 ≤ P ≤ 50 1 ≤ M ≤ 100 SAMPLE INPUT 3 29 15 8 SAMPLE OUTPUT 5 3 2 Explanation For the first case, Joko should buy 1 package containing 7 stones and 4 packages containing 4 stones. In total, he buys 5 packages. For the second case, Joko should buy 1 package containing 7 stones and 2 packages containing 4 stones. In total, he buys 3 packages. For the third case, Joko should buy 2 packages containing 4 stones each. In total, he buys 2 packages.","solution":"def minimal_packages(m): Returns the minimal number of packages required to achieve exactly M stones. If it\'s impossible to collect exactly M stones, returns -1. for num_sevens in range(m // 7, -1, -1): remaining_stones = m - num_sevens * 7 if remaining_stones % 4 == 0: num_fours = remaining_stones // 4 return num_sevens + num_fours return -1 def process_test_cases(test_cases): Processes multiple test cases of the minimal_packages function. Parameters: test_cases (list): List of integers representing the test cases. Returns: list: A list of results for each test case. results = [] for m in test_cases: results.append(minimal_packages(m)) return results"},{"question":"In an international chess competition, players are required to play several rounds. The organizers have some preferences on who should play against whom to make the competition more interesting. They ensure that no player plays against the same opponent more than once, and every player gets a fair number of rounds. Your task is to generate the schedule of matches for the players based on the given preferences. Each player is identified by a unique ID which is an integer between 1 and N (inclusive). -----Input:----- The first line contains two integers N and M. N is the number of players, and M is the number of preferences. The next M lines each describe a preference as two integers u and v indicating that player u should play against player v. -----Output:----- Print the schedule of matches. Each match should be printed on a new line as two integers x and y separated by a space, where x and y are the IDs of the players involved in that match. Matches can be printed in any order. If there is no valid schedule, print -1. -----Constraints:----- - 2 ≤ N ≤ 1000 - 1 ≤ M ≤ 100000 - 1 ≤ u, v ≤ N - u ≠ v -----Sample Input----- 4 3 1 2 2 3 3 4 -----Sample Output----- 1 2 2 3 3 4","solution":"def generate_schedule(N, M, preferences): adjacency_list = {i: set() for i in range(1, N+1)} for u, v in preferences: adjacency_list[u].add(v) adjacency_list[v].add(u) schedule = [] # Using a set to keep track of matched pairs to avoid duplicates matched_pairs = set() for u in range(1, N+1): for v in adjacency_list[u]: if (u, v) not in matched_pairs and (v, u) not in matched_pairs: schedule.append((u, v)) matched_pairs.add((u, v)) if len(schedule) < M: return -1 return schedule"},{"question":"Given an integer array, find the maximum possible product of three numbers in the array. Write a function `maxProductOfThree` that takes an array `nums` and returns an integer representing the maximum product of any three numbers in the array. # Input - An integer array `nums` of size N, where 3 ≤ N ≤ 10^5. - Each element in the array is an integer such that -10^4 ≤ nums[i] ≤ 10^4. # Output - A single integer representing the maximum product of any three distinct numbers in the array. # Constraints: - Time complexity should be O(N log N) or better. # Example: Input: ```plaintext [1, 2, 3, 4] ``` Output: ```plaintext 24 ``` Input: ```plaintext [-10, -10, 5, 2] ``` Output: ```plaintext 500 ``` Explanation: For the first example, the maximum product is achieved by multiplying 2, 3, and 4 to get 24. For the second example, the maximum product is achieved by multiplying -10, -10, and 5 to get 500. # Note: You should consider both cases where the product is the result of three positive numbers or two negative numbers and one positive number. The function should return the maximum of these two possibilities.","solution":"def maxProductOfThree(nums): Returns the maximum product of three numbers from the array. nums.sort() # The maximum product can be either the product of the three largest numbers # or the product of the two smallest numbers (which could be negative) and the largest number. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Alice has recently started learning quantitative finance and she is trying to figure out whether a stock price change meets certain criteria. For each day, Alice is given the opening price and the closing price of the stock. She considers a stock\'s performance \'good\' if the closing price is at least 4% higher than the opening price. Your task is to determine whether the stock\'s performance is \'good\' on each given day based on the opening and closing prices provided. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. The description of the test cases follows. - Each test case consists of a single line of input, containing two space-separated integers (O) and (C), where (O) is the opening price and (C) is the closing price of the stock for that day. ------ Output Format ------ For each test case, output on a new line GOOD if the stock\'s performance is considered \'good\', and BAD otherwise. Each letter of the output may be printed in either lowercase or uppercase. For example, the strings GOOD, good, and GoOd will be considered identical. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ O, C ≤ 10000 ------ Sample Input 1 ------ 5 100 104 200 207 1500 1561 8000 8320 5000 5000 ------ Sample Output 1 ------ GOOD BAD GOOD GOOD BAD ------ Explanation 1 ------ Test case 1: The opening price is 100 and the closing price is 104. A 4% increase on 100 is 4, hence the closing price need to be 104. Since the closing price is 104 which is exactly 4% higher than the opening price, the stock\'s performance is considered \'good\'. Test case 2: The opening price is 200 and the closing price is 207. A 4% increase on 200 is 8, hence the closing price needs to be at least 208. Since the closing price 207 is less than the 4% threshold, the stock\'s performance is considered \'bad\'. Test case 3: The opening price is 1500 and the closing price is 1561. A 4% increase on 1500 is 60, hence the closing price needs to be at least 1560. Since the closing price 1561 is more than 4% higher than the opening price, the stock’s performance is considered \'good\'. Test case 4: The opening price is 8000 and the closing price is 8320. A 4% increase on 8000 is 320, hence the closing price needs to be 8320. Since the closing price is exactly 8320, the stock\'s performance is considered \'good\'. Test case 5: The opening price is 5000 and the closing price is 5000. A 4% increase on 5000 is 200, hence the closing price should be at least 5200. Since the closing price did not increase, the stock\'s performance is considered \'bad\'.","solution":"def stock_performance(test_cases): results = [] for O, C in test_cases: if C >= O * 1.04: results.append(\\"GOOD\\") else: results.append(\\"BAD\\") return results"},{"question":"Given an integer array `nums`, return the number of \\"good pairs\\". A pair `(i, j)` is called good if `nums[i] == nums[j]` and `i < j`. Example 1: Input: nums = [1,2,3,1,1,3] Output: 4 Explanation: There are 4 good pairs: (0,3), (0,4), (3,4), (2,5). Example 2: Input: nums = [1,1,1,1] Output: 6 Explanation: Each pair in the range (0,3) is a good pair. Example 3: Input: nums = [1,2,3] Output: 0 Explanation: There are no good pairs. Constraints: * `1 <= nums.length <= 100` * `1 <= nums[i] <= 100`","solution":"def num_identical_pairs(nums): Returns the number of good pairs in the list. A pair (i, j) is called good if nums[i] == nums[j] and i < j. Parameters: nums (list): List of integers Returns: int: Number of good pairs good_pairs = 0 frequency = {} for num in nums: if num in frequency: good_pairs += frequency[num] frequency[num] += 1 else: frequency[num] = 1 return good_pairs"},{"question":"Alex is organizing a scavenger hunt and wants to assign a unique task to each participant. Each participant can either pick a non-repeating single task from a list or the combination of a unique pair of different tasks. Alex has a list of n tasks and he wants to determine how many unique single task assignments and unique pair combinations he can create. Help Alex by writing a function to count both types of assignments. -----Input----- The first line contains an integer n (1 le n le 2 cdot 10^4) — the number of tasks. -----Output----- Print two integers: the number of single task assignments and the number of unique pair combinations of different tasks. -----Examples----- Input 3 Output 3 3 Input 4 Output 4 6 Input 5 Output 5 10 -----Note----- In the first example, there are 3 tasks. The number of single task assignments is obviously 3. The unique pairs of different tasks are (1,2), (1,3), and (2,3), making a total of 3 pairs. In the second example, there are 4 tasks. The number of single task assignments is 4. The unique pairs of different tasks are (1,2), (1,3), (1,4), (2,3), (2,4), and (3,4), making a total of 6 pairs. In the third example, there are 5 tasks. The number of single task assignments is 5. The unique pairs of different tasks can be computed as binom{5}{2} = 10.","solution":"def count_single_and_pair_combinations(n): Returns the number of single task assignments and unique pair combinations of different tasks. :param n: The number of tasks :return: A tuple (number of single task assignments, number of unique pair combinations) single_task_assignments = n pair_combinations = (n * (n - 1)) // 2 return (single_task_assignments, pair_combinations)"},{"question":"Given a binary tree, write a function isSymmetric() that checks if the tree is symmetric around its center. A binary tree is symmetric if the left and right subtrees are mirror images of each other. Input Format: The input consists of a single integer T denoting the number of test cases. Each test case consists of multiple lines where the first line denotes a space-separated sequence of integers representing the level-order traversal of the binary tree. Use \'N\' for null values representing absent children. Output Format: For each test case, print \\"Yes\\" if the tree is symmetric, otherwise print \\"No\\". Your Task: This is a function problem. You only need to complete the function isSymmetric that takes the root node of the tree as an argument and returns true if the tree is symmetric, else it returns false. The printing is done by the driver code. Constraints: 1 <= T <= 10 0 <= Number of nodes in the tree <= 10^3 -1000 <= Node values <= 1000 Example: Input: 2 1 2 2 3 4 4 3 1 2 2 N 3 N 3 Output: Yes No Explanation: Testcase 1: The input corresponds to the following binary tree: 1 / 2 2 / / 3 4 4 3 It is symmetric and hence the output is \\"Yes\\". Testcase 2: The input corresponds to the following binary tree: 1 / 2 2 3 3 It is not symmetric and hence the output is \\"No\\".","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isSymmetric(root): def isMirror(t1, t2): if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and isMirror(t1.right, t2.left) and isMirror(t1.left, t2.right) return isMirror(root, root) def buildTree(level_order): if not level_order or level_order[0] == \'N\': return None iter_values = iter(level_order) root = TreeNode(int(next(iter_values))) queue = [root] while queue: current = queue.pop(0) try: left_val = next(iter_values) if left_val != \'N\': current.left = TreeNode(int(left_val)) queue.append(current.left) right_val = next(iter_values) if right_val != \'N\': current.right = TreeNode(int(right_val)) queue.append(current.right) except StopIteration: break return root def check_symmetry_of_trees(test_cases): results = [] for level_order in test_cases: level_order = level_order.split() level_order = [\'N\' if val == \'N\' else val for val in level_order] root = buildTree(level_order) if isSymmetric(root): results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Example usage: # test_cases = [\\"1 2 2 3 4 4 3\\", \\"1 2 2 N 3 N 3\\"] # print(check_symmetry_of_trees(test_cases))"},{"question":"Boris has become fond of dinner parties and now frequently hosts guests in his apartment. However, he faces a problem with his limited number of serving dishes. Boris has n dinners to host, and for each dinner, he has an exact number of guests. Boris knows the number of servings he can fit on each of his dinner plates. He has m types of serving dishes, each with a specific capacity (number of servings they can hold) and cost. Boris wants to ensure that for each dinner, there are enough servings available for all the guests and wants to minimize the total cost of purchasing these dishes while considering the different capacities and their costs. Help Boris determine the minimum cost required to serve his guests for all dinners. Input The first line contains a positive integer n (1 ≤ n ≤ 500) — the number of dinners Boris has to host. Each of the next n lines contains a single positive integer — the number of servings required for each dinner respectively. The next line contains a positive integer m (1 ≤ m ≤ 500) — the number of different types of serving dishes available. Each of the following m lines contains two space-separated positive integers — the capacity (number of servings it can hold) and the cost of one serving dish of that particular type. All numbers in the input data do not exceed 500. Output Print a single number — the minimum total cost to serve the guests for all dinners. Examples Input 2 10 20 3 5 50 10 80 20 150 Output 210 Note In the example, Boris has two dinners to host with 10 and 20 servings required, respectively. For the first dinner, Boris can choose one dish with a capacity of 10 servings at a cost of 80. For the second dinner, Boris can choose one dish with a capacity of 20 servings at a cost of 150. Therefore, the total minimal cost to serve all his guests is 80 + 150 = 230.","solution":"def min_serving_cost(n, servings, m, dishes): # Sort the dishes by capacity first, then by cost dishes.sort(key=lambda x: (x[0], x[1])) # Initialize the total cost total_cost = 0 # Iterate through each dinner\'s servings requirement for required_servings in servings: # Find the minimum cost dish that can satisfy the required servings for capacity, cost in dishes: if capacity >= required_servings: total_cost += cost break return total_cost"},{"question":"Alice loves gardening and she wants to plant flowers in her new rectangular garden. The garden is a rectangular grid of dimensions N x M. Each cell of the grid can either have a flower or be empty. Alice wants to plant the flowers in such a way that no two flowers are adjacent to each other (horizontally, vertically, or diagonally). Given the dimensions of the garden, determine the maximum number of flowers Alice can plant according to her constraints. -----Input----- The first line contains an integer T, the number of test cases. Each of the next T lines contains two space-separated integers N and M, the dimensions of the garden. -----Output----- For each test case, output a single integer, the maximum number of flowers Alice can plant in the garden. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 1000 -----Example----- Input: 2 3 3 4 5 Output: 5 10","solution":"def max_flowers(N, M): Given dimensions N and M of a rectangular garden, compute the maximum number of flowers that can be planted such that no two flowers are adjacent. def flowers_in_cell(i, j): return (i + j) % 2 == 0 count = 0 for i in range(N): for j in range(M): if flowers_in_cell(i, j): count += 1 return count def solve(test_cases): results = [] for N, M in test_cases: results.append(max_flowers(N, M)) return results # Example usage: # T = 2 # test_cases = [(3, 3), (4, 5)] # print(solve(test_cases)) # Output: [5, 10]"},{"question":"In a small village, there is a fascinating tradition where the villagers light lanterns during the festival, and each lantern is connected to every other lantern by a rope which has a certain length associated with it. However, due to the festival\'s popularity, the villagers want to minimize the total length of the ropes used for the connections. Every lantern corresponds to a nearby tree, and each tree can only have one lantern. You are given a matrix where each cell contains the distance between two trees. The task is to place a lantern on each tree and determine the minimal total length of ropes required to connect all the lanterns such that every lantern can communicate with any other lantern either directly or indirectly (i.e., the minimal spanning tree of lantern connections). Your goal is to write a program that computes the minimum total rope length required. # Input The input consists of multiple test cases. The first line of each test case contains an integer n (2 <= n <= 100), the number of trees/lanterns. The next n lines contain n integers each, where the j-th integer in the i-th line represents the distance between tree i and tree j. The end of the input is indicated by a single line containing a zero. # Output For each test case, output a single integer representing the minimum total rope length required to connect all the lanterns. # Example Input: ``` 3 0 2 3 2 0 1 3 1 0 4 0 5 9 4 5 0 1 3 9 1 0 2 4 3 2 0 0 ``` Output: ``` 3 7 ``` # Explanation For the first test case, the minimal spanning tree (MST) of the weights (distances between the trees) is: - Tree 1 connected to Tree 2 with a rope of length 2. - Tree 2 connected to Tree 3 with a rope of length 1. Thus, the minimum total rope length is 2 + 1 = 3. For the second test case, the MST is: - Tree 2 connected to Tree 3 with a rope of length 1. - Tree 3 connected to Tree 4 with a rope of length 2. - Tree 1 connected to Tree 4 with a rope of length 4. So, the minimum total rope length is 1 + 2 + 4 = 7.","solution":"import sys import heapq def prim_mst(n, dist_matrix): min_cost = [sys.maxsize] * n min_cost[0] = 0 visited = [False] * n pq = [(0, 0)] # (cost, vertex) total_cost = 0 while pq: cost, u = heapq.heappop(pq) if visited[u]: continue visited[u] = True total_cost += cost for v in range(n): if not visited[v] and dist_matrix[u][v] < min_cost[v]: min_cost[v] = dist_matrix[u][v] heapq.heappush(pq, (dist_matrix[u][v], v)) return total_cost def minimal_rope_length(test_cases): results = [] for case in test_cases: n = case[0] dist_matrix = case[1] results.append(prim_mst(n, dist_matrix)) return results # Input processing def parse_input(input_string): lines = input_string.strip().split(\'n\') idx = 0 test_cases = [] while idx < len(lines): n = int(lines[idx]) if n == 0: break idx += 1 dist_matrix = [] for _ in range(n): dist_matrix.append(list(map(int, lines[idx].split()))) idx += 1 test_cases.append((n, dist_matrix)) return test_cases def format_output(results): return \'n\'.join(map(str, results)) # Integration function def compute_minimum_rope_length(input_string): test_cases = parse_input(input_string) result = minimal_rope_length(test_cases) return format_output(result)"},{"question":"Given an integer array and a target integer, find all unique combinations of numbers in the array that sum up to the target integer. Each number in the array may only be used once in the combination. Return the combinations as a list of lists. The solution set must not contain duplicate combinations. Example Input: ``` arr = [10,1,2,7,6,1,5] target = 8 ``` Output: ``` [ [1,7], [1,2,5], [2,6], [1,1,6] ] ```","solution":"def combination_sum2(arr, target): Finds unique combinations in arr that sum up to the target. arr.sort() results = [] combination = [] def backtrack(start, target): if target == 0: results.append(combination[:]) return for i in range(start, len(arr)): # Skip duplicates if i > start and arr[i] == arr[i - 1]: continue if arr[i] > target: break combination.append(arr[i]) backtrack(i + 1, target - arr[i]) combination.pop() backtrack(0, target) return results"},{"question":"Pushorp, a new booming messaging app company, prides itself on providing efficient and clever message compression algorithms to save bandwidth. They have asked for your help to improve their existing compression mechanism. One of the coolest features of Pushorp is their personalized message feature, which can send a message with repeating patterns compressed into a shorthand notation. For example, the message \\"ababab\\" can be compressed into \\"3[ab]\\". The compression scheme should follow these rules: 1. If a substring consists of more than one character and appears consecutively k times, such as \\"abcabcabc\\", it should be written as \\"k[abc]\\". 2. If the same sequence cannot be represented multiple times using this rule, leave it as is. For example, \\"ababc\\" cannot be compressed to \\"2[ababc]\\". Given a string, determine its shortest possible compressed form using the above rules. **Input Format** - A single integer T, the number of test cases. - T lines, each containing a string of lowercase English letters. **Output Format** - T lines, each containing the compressed form of the corresponding string. **Constraints** - 1 ≤ T ≤ 1000 - 1 ≤ length of the string ≤ 10^4 **Sample Input** ``` 3 ababc ababab aabbaabbaabb ``` **Sample Output** ``` ababc 3[ab] 3[aabb] ``` **Explanation** - For \\"ababc\\", no compression can be applied. - For \\"ababab\\", it can be compressed into \\"3[ab]\\" where \\"ab\\" is repeated 3 times. - For \\"aabbaabbaabb\\", it can be compressed into \\"3[aabb]\\" where \\"aabb\\" is repeated 3 times.","solution":"def compress_string(s): Compress the string using the smallest possible k[x] format where x is the smallest repeating substring. If no such substring can compress the string, return the string itself. n = len(s) def get_repeated_pattern(s): for i in range(1, n//2 + 1): if n % i == 0: if s[:i] * (n // i) == s: return (s[:i], n // i) return (s, 1) # Return the original string and count 1 if no pattern found pattern, count = get_repeated_pattern(s) if count > 1: return f\\"{count}[{pattern}]\\" return s def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(compress_string(s)) return results"},{"question":"Anu has been assigned a task to arrange and manage the workflow of projects on a machine. Each project has a start time and an end time, and it takes place in the interval [start time, end time). Anu needs to ensure that the machine is only working on one project at a time. To achieve this, Anu wants to maximize the number of non-overlapping projects that can be run on the machine. For example, if the project intervals are [(1, 3), (2, 5), (4, 6)], she can choose [(1, 3), (4, 6)] as they don’t overlap, but cannot pick all three projects because the intervals (1, 3) and (2, 5) overlap. Your task is to help Anu find the maximum number of non-overlapping projects. ------ Input ------ The first line contains a single integer T that denotes the number of test cases. For each test case: - The first line contains a single integer N that denotes the number of projects. - The next N lines each contain two space-separated integers S and E that denote the start time and end time of each project. ------ Output ------ For each test case, print a single integer that indicates the maximum number of non-overlapping projects Anu can select. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ S < E ≤ 10^9 ----- Sample Input ------ 2 3 1 3 2 5 4 6 4 1 2 2 4 3 5 5 6 ----- Sample Output ------ 2 3 ----- Explanation ------ In the first case, Anu can select projects [(1, 3), (4, 6)] which do not overlap. In the second case, Anu can select projects [(1, 2), (3, 5), (5, 6)] which do not overlap.","solution":"def max_non_overlapping_projects(test_cases): results = [] for projects in test_cases: projects.sort(key=lambda x: x[1]) # Sort by end time max_count = 0 previous_end_time = -1 for project in projects: start, end = project if start >= previous_end_time: max_count += 1 previous_end_time = end results.append(max_count) return results def solve_input(T, data): test_cases = [] index = 0 for _ in range(T): N = data[index] projects = [] index += 1 for _ in range(N): S, E = data[index] projects.append((S, E)) index += 1 test_cases.append(projects) return max_non_overlapping_projects(test_cases)"},{"question":"Given an array of integers, you have to choose a contiguous subarray of a length exactly K, such that the absolute difference between the maximum element and the minimum element of that subarray is minimized. Return this minimum difference. Example: Input: arr = [1, 3, 6, 4, 1, 2], K = 3 Output: 2 Explanation: The subarray [3, 4, 1] has a maximum value of 4 and a minimum value of 1, so the difference is 3. The subarray [6, 4, 1] has a maximum value of 6 and a minimum value of 1, so the difference is 5. The subarray [4, 1, 2] has a maximum value of 4 and a minimum value of 1, so the difference is 3. The subarray [1, 2, 6] has a maximum value of 6 and a minimum value of 1, so the difference is 5. The subarray [2, 6, 4] has a maximum value of 6 and a minimum value of 2, so the difference is 4. The subarray [4, 1, 2] has a maximum value of 4 and a minimum value of 1, so the difference is 3. However, the subarray [3, 4, 1] has the minimum difference which is 2. Constraints: - The length of the array will be in the range [1, 1000]. - Each element of the array will be an integer in the range [0, 1000].","solution":"def min_difference_subarray(arr, K): Given an array `arr` and an integer `K`, find the minimum absolute difference between the maximum and minimum elements of a contiguous subarray of length `K`. # Sort the initial array arr.sort() # Initialize the minimum difference to a large number min_diff = float(\'inf\') # Traverse the sorted array to find the subarray of length K with the minimum difference for i in range(len(arr) - K + 1): current_diff = arr[i + K - 1] - arr[i] min_diff = min(min_diff, current_diff) return min_diff"},{"question":"You are given a grid with m rows and n columns, where each cell in the grid contains a positive integer height representing the elevation at that point. Water can flow from one cell to an adjacent cell (up, down, left, or right) if the height of the destination cell is less than or equal to the height of the current cell. Suppose it is raining on the grid and water can enter the grid from the boundaries (top, bottom, left, or right). Your task is to find all the cells where water can both flow to the Pacific Ocean (left and top edges of the grid) and the Atlantic Ocean (right and bottom edges of the grid). Input - The first line of input contains two integers m and n (1 ≤ m, n ≤ 200), representing the number of rows and columns of the grid. - The next m lines each contain n integers representing the elevation heights of the cells. Output - Output all the cells in the grid where water can flow to both the Pacific and Atlantic Oceans in the form of a list of lists. Each inner list should contain two integers indicating the row and column of a cell. Example Input 5 5 1 2 2 3 5 3 2 3 4 4 2 4 5 3 1 6 7 1 4 5 5 1 1 2 4 Output [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] Explanation The cells at coordinates [0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], and [4, 0] have water flow paths leading to both the Pacific and Atlantic Oceans based on the given elevation heights.","solution":"def pacific_atlantic(m, n, heights): def dfs(ocean, visited, x, y): if (x, y) in visited: return visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and heights[nx][ny] >= heights[x][y]: dfs(ocean, visited, nx, ny) # All four possible directions of movement directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Sets to keep track of cells reachable from each ocean pacific = set() atlantic = set() # Initiate DFS from the pacific ocean border cells for i in range(m): dfs(\'pacific\', pacific, i, 0) dfs(\'atlantic\', atlantic, i, n-1) for j in range(n): dfs(\'pacific\', pacific, 0, j) dfs(\'atlantic\', atlantic, m-1, j) # Intersection of cells reachable from both oceans result = list(map(list, pacific & atlantic)) return result"},{"question":"You are working on an inventory management system for a warehouse. The warehouse receives shipments periodically, and each shipment contains multiple types of items. To automate inventory updates, you want to create a program that processes transactions for each shipment. Each transaction consists of an item name, the initial stock quantity of that item before the shipment arrives, and the quantity of that item received in the shipment. Your task is to calculate the updated stock quantity of each item after processing all transactions. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line with \\"END\\". Each dataset is given in the following format: The first line contains an integer T (1 ≤ T ≤ 100), the number of transactions for the shipment. The next T lines each contain a string S (1 ≤ |S| ≤ 20) representing the item name, and two integers A and B (0 ≤ A, B ≤ 10000) representing the initial stock quantity and received quantity, respectively. Output For each dataset, output the updated stock quantities for all items in the same order as they appear in the input. Each item should be in a new line in the format \\"S: X\\", where S is the item name and X is the updated stock quantity. Example Input 2 apple 150 100 orange 200 150 3 banana 100 50 apple 200 200 banana 50 50 END Output apple: 250 orange: 350 banana: 150 apple: 400 banana: 100","solution":"def process_shipments(data): Process the shipment data and return the updated stock quantities. Parameters: data (list): A list of strings where each string is a line of input. Returns: list: A list of strings representing the updated stock quantities in the format \\"S: X\\". results = [] index = 0 while index < len(data): if data[index] == \\"END\\": break T = int(data[index]) index += 1 for _ in range(T): line = data[index].split() item = line[0] initial_stock = int(line[1]) received_stock = int(line[2]) updated_stock = initial_stock + received_stock results.append(f\\"{item}: {updated_stock}\\") index += 1 return results"},{"question":"You are working on a project where different departments\' performance needs to be evaluated based on a composite score. Each department provides an array of review objects that include `work_quality`, `teamwork`, and `deadline_adherence`, each rated out of 10. Write a function that calculates the overall performance score for a department. The composite score is computed as a weighted average: - `work_quality` contributes 50% of the total score. - `teamwork` contributes 30% of the total score. - `deadline_adherence` contributes 20% of the total score. The function should return a message based on the overall performance score: - If the score is 8 or above, return \\"Outstanding Performance\\". - If the score is between 6 and 8 (excluding 8), return \\"Meeting Expectations\\". - If the score is below 6, return \\"Needs Improvement\\". **Function Signature:** ```python def evaluate_department_performance(reviews: List[Dict[str, int]]) -> str: ``` **Examples:** ```python reviews = [ {\'work_quality\': 7, \'teamwork\': 6, \'deadline_adherence\': 5}, {\'work_quality\': 9, \'teamwork\': 8, \'deadline_adherence\': 7}, {\'work_quality\': 6, \'teamwork\': 7, \'deadline_adherence\': 6}, ] print(evaluate_department_performance(reviews)) # Output: \\"Meeting Expectations\\" reviews = [ {\'work_quality\': 5, \'teamwork\': 5, \'deadline_adherence\': 5}, {\'work_quality\': 4, \'teamwork\': 5, \'deadline_adherence\': 3}, {\'work_quality\': 6, \'teamwork\': 6, \'deadline_adherence\': 7}, ] print(evaluate_department_performance(reviews)) # Output: \\"Needs Improvement\\" reviews = [ {\'work_quality\': 9, \'teamwork\': 8, \'deadline_adherence\': 9}, {\'work_quality\': 8, \'teamwork\': 8, \'deadline_adherence\': 7}, {\'work_quality\': 10, \'teamwork\': 9, \'deadline_adherence\': 8}, ] print(evaluate_department_performance(reviews)) # Output: \\"Outstanding Performance\\" ``` **Constraints:** - The `reviews` list will have at least one review object. - Each review object will always contain `work_quality`, `teamwork`, and `deadline_adherence` keys with integer values between 1 and 10 inclusive.","solution":"from typing import List, Dict def evaluate_department_performance(reviews: List[Dict[str, int]]) -> str: total_work_quality = total_teamwork = total_deadline_adherence = 0 for review in reviews: total_work_quality += review[\'work_quality\'] total_teamwork += review[\'teamwork\'] total_deadline_adherence += review[\'deadline_adherence\'] num_reviews = len(reviews) avg_work_quality = total_work_quality / num_reviews avg_teamwork = total_teamwork / num_reviews avg_deadline_adherence = total_deadline_adherence / num_reviews composite_score = (avg_work_quality * 0.5) + (avg_teamwork * 0.3) + (avg_deadline_adherence * 0.2) if composite_score >= 8: return \\"Outstanding Performance\\" elif 6 <= composite_score < 8: return \\"Meeting Expectations\\" else: return \\"Needs Improvement\\""},{"question":"Create a function that takes a list of integers and returns the length of the longest contiguous subarray that contains only unique elements. For example: ```python solution([1, 2, 3, 1, 2, 3, 4, 5]) # should return 5, because the longest contiguous subarray with unique elements is [1, 2, 3, 4, 5] ``` ```Elixir Solution.longest_unique_subarray([1, 2, 3, 1, 2, 3, 4, 5]) # should return 5, because the longest contiguous subarray with unique elements is [1, 2, 3, 4, 5] ``` *Hint: Consider using a sliding window approach to keep track of the current subarray with unique elements.*","solution":"def longest_unique_subarray(nums): Returns the length of the longest contiguous subarray that contains only unique elements. num_set = set() left = 0 max_length = 0 for right in range(len(nums)): while nums[right] in num_set: num_set.remove(nums[left]) left += 1 num_set.add(nums[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a series of N integers representing the amount of people entering or leaving a room every hour over a period of time, write a function to determine the maximum number of people present in the room at any given time. The function should take two inputs: 1. An integer `N` which represents the number of hours. 2. An array of N integers `arr` where `arr[i]` represents the net number of people entering (+ve) or leaving (-ve) the room in the i-th hour. Your task is to calculate the maximum occupancy of the room at any hour during the given period. ----- Example ----- Input: ``` N = 5 arr = [10, -3, 5, -2, 8] ``` Output: ``` 18 ``` Explanation: 1. At the start (hour 0), the room has 0 people. 2. After 1st hour, +10 people: total = 10 3. After 2nd hour, -3 people: total = 7 4. After 3rd hour, +5 people: total = 12 5. After 4th hour, -2 people: total = 10 6. After 5th hour, +8 people: total = 18 The maximum occupancy throughout this period is 18. ----- Input Format ----- - The first line contains a single integer `N` (1 ≤ N ≤ 1000), the number of hours. - The second line contains `N` integers `arr[i]`, where |arr[i]| ≤ 1000, representing the net number of people entering or leaving the room in i-th hour. ----- Output Format ----- - Output a single integer, which is the maximum number of people present in the room at any hour during the period. ----- Constraints ----- - 1 ≤ N ≤ 1000 - -1000 ≤ arr[i] ≤ 1000 Write a function `max_occupancy(N, arr)` that returns the maximum occupancy of the room. **Function signature:** ```python def max_occupancy(N: int, arr: List[int]) -> int: # Your code here pass ```","solution":"from typing import List def max_occupancy(N: int, arr: List[int]) -> int: Determine the maximum number of people present in the room at any given time. Parameters: N (int): The number of hours. arr (List[int]): A list of integers where each integer represents the net number of people entering or leaving the room in a given hour. Returns: int: The maximum occupancy of the room. current_occupancy = 0 max_occupancy = 0 for net_change in arr: current_occupancy += net_change if current_occupancy > max_occupancy: max_occupancy = current_occupancy return max_occupancy"},{"question":"You are given an array of integers. Your task is to find the start and end indices of the smallest subarray that needs to be sorted in place so that the entire input array becomes sorted. If the array is already sorted, return -1, -1. Example 1: Input: arr = [1, 2, 4, 5, 3, 5, 6] Output: 2, 4 Explanation: Sorting the subarray from index 2 to 4 makes arr = [1, 2, 3, 4, 5, 5, 6] Example 2: Input: arr = [1, 3, 2, 4, 5, 6] Output: 1, 2 Explanation: Sorting the subarray from index 1 to 2 makes arr = [1, 2, 3, 4, 5, 6] Example 3: Input: arr = [1, 2, 3, 4] Output: -1, -1 Explanation: The array is already sorted. Your Task: You don\'t need to read input or print anything. Complete the function findUnsortedSubarray() which takes arr as input and returns the start and end indices of the smallest subarray that needs to be sorted in place. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= |arr| <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def findUnsortedSubarray(arr): Returns the start and end indices of the smallest subarray that needs to be sorted in place so that the entire array becomes sorted. If the array is already sorted, returns (-1, -1). n = len(arr) if n <= 1: return -1, -1 left, right = 0, n - 1 # Find the first element that is out of order from the left while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 # If the entire array is already sorted if left == n - 1: return -1, -1 # Find the first element that is out of order from the right while right > 0 and arr[right] >= arr[right - 1]: right -= 1 # Find max and min in the identified subarray subarray_max = max(arr[left:right + 1]) subarray_min = min(arr[left:right + 1]) # Extend the left boundary to include any numbers greater than subarray_min while left > 0 and arr[left - 1] > subarray_min: left -= 1 # Extend the right boundary to include any numbers less than subarray_max while right < n - 1 and arr[right + 1] < subarray_max: right += 1 return left, right"},{"question":"It is harvest season on the fruit farm and robotic harvesters are assigned to collect the fruits from a rectangular field. The field can be represented by a coordinate system with two opposite corners at (0,0) and (L, W) where L is the length and W is the width. Each harvester starts at a given location with its initial coordinates (xi, yi) and moves according to its unique speed vi. In one second, a harvester can move to any point (xi + dx, yi + dy) where 0 ≤ |dx| + |dy| ≤ vi, and dx, dy are integers. Harvesters must stay within the boundaries of the field at all times. The farm manager wants to use a special drone to photograph the harvesters\' positions. The drone works in the following way: 1. It picks three distinct points that any harvester can occupy after one second. These points must form a triangle (i.e., not be collinear). 2. The drone focuses on these points to create a circumscribed circle that passes through them. Any harvester standing on or inside this circle will be visible in the photo. 3. Your goal is to choose these three points such that the expected number of harvesters captured in the photo is maximized. If there are multiple options, choose the set of points that gives the circle with the largest radius. If there are still ties, any valid solution among them is acceptable. Input The first line contains the dimensions of the field L and W. The second line contains the number of harvesters N. The next N lines each contain three integers: xi, yi, vi. These represent the harvester\'s initial coordinates and its speed. * 1 ≤ L, W ≤ 105 * 3 ≤ N ≤ 100,000 * 0 ≤ xi, yi ≤ max(L, W) * 0 ≤ vi ≤ 1,000 * All numbers are integers Output Output the coordinates of the three selected points, one per line, in any order. Examples Input 10 10 3 2 2 1 8 8 2 5 5 1 Output 3 3 6 4 9 9","solution":"def find_three_points(L, W, harvesters): This function selects three distinct points which will generate the largest circumscribed circle such that the expected number of harvesters captured in the photo is maximized. Args: L (int): length of the field W (int): width of the field harvesters (list of tuples): list of tuples, where each tuple contains (xi, yi, vi) representing the initial location and speed of each harvester Returns: list of tuples: Three points (x, y) that form the vertices of the circumscribed circle. # Step 1: Collect the possible positions of each harvester after one second possible_positions = set() for (xi, yi, vi) in harvesters: for dx in range(-vi, vi + 1): for dy in range(max(-vi - abs(dx), -vi), min(vi + 1 - abs(dx), vi + 1)): new_x = xi + dx new_y = yi + dy if 0 <= new_x <= L and 0 <= new_y <= W: possible_positions.add((new_x, new_y)) # Step 2: Find three points that are not collinear to make a valid triangle def are_not_collinear(a, b, c): Check if three points are not collinear. Points (x1, y1), (x2, y2), (x3, y3) are collinear if and only if the area of the triangle they form is zero. The area can be calculated using the determinant: Area = 0.5 * | x1(y2 - y3) + x2(y3 - y1) + x3(y1 - y2) | If Area == 0, then points are collinear. x1, y1 = a x2, y2 = b x3, y3 = c area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) return area != 0 possible_positions = list(possible_positions) n = len(possible_positions) for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if are_not_collinear(possible_positions[i], possible_positions[j], possible_positions[k]): return [possible_positions[i], possible_positions[j], possible_positions[k]] return [] # Example usage L = 10 W = 10 harvesters = [(2, 2, 1), (8, 8, 2), (5, 5, 1)] result = find_three_points(L, W, harvesters) for point in result: print(point)"},{"question":"Write a function that checks if a given integer is a palindrome in base 2 (binary representation). A palindrome is a number that reads the same forward and backward in its given base. For example, ```python is_binary_palindrome(9) ``` should return True, since the binary representation of 9 is 1001, which is a palindrome. ```python is_binary_palindrome(10) ``` should return False, since the binary representation of 10 is 1010, which is not a palindrome. The number passed to is_binary_palindrome will always be a non-negative integer.","solution":"def is_binary_palindrome(n): Check if the binary representation of the given non-negative integer is a palindrome. :param n: Non-negative integer to check :return: True if the binary representation is a palindrome, False otherwise binary_representation = bin(n)[2:] return binary_representation == binary_representation[::-1]"},{"question":"CycloMedia has developed a new application for cyclists to track their rides and calculate the shortest path between locations in a city. The tracking system captures data on various points within the city\'s grid. Your task is to implement an algorithm to determine the shortest path between two points, considering that a cyclist can only move right, left, or straight at any given point. -----Input----- - The first line contains a positive integer N (2 leq N leq 10^3), the number of intersections in the grid. - The next line contains two integers, S_x and S_y (0 leq S_x,S_y < 10^3), representing the coordinates of the starting point. - The following line contains two integers, E_x and E_y (0 leq E_x,E_y < 10^3), representing the coordinates of the ending point. - The next N lines each contain two integers, X_i and Y_i (0 leq X_i,Y_i < 10^3), representing the coordinates of the intersections. An intersection can be visited more than once, but cyclists can only move right, left, or straight. Note: The grid is such that distances between intersections are uniform. -----Output----- The output should be a single integer, the minimum number of moves required to reach the destination, or -1 if there is no possible path. -----Examples----- Sample Input 1: 5 0 0 2 2 0 1 1 1 1 2 2 1 2 2 Sample Output 1: 3 Sample Input 2: 3 0 0 1 1 0 1 1 0 1 1 Sample Output 2: 2 Sample Input 3: 4 0 0 3 3 0 1 1 0 1 1 2 2 Sample Output 3: -1 Explanation: In Sample Input 1, the minimum number of moves to reach (2,2) from (0,0) is 3, which can be (0,0) -> (1,1) -> (2,1) -> (2,2). In Sample Input 2, the minimum number of moves to reach (1,1) from (0,0) is 2, which can be (0,0) -> (0,1) -> (1,1). In Sample Input 3, there is no valid path to reach (3,3) from (0,0).","solution":"from collections import deque def min_moves_to_reach_destination(n, s_x, s_y, e_x, e_y, intersections): if (s_x, s_y) == (e_x, e_y): return 0 queue = deque([(s_x, s_y, 0)]) # (x, y, distance) visited = set() visited.add((s_x, s_y)) while queue: x, y, dist = queue.popleft() for i in range(n): i_x, i_y = intersections[i] if ((x == i_x and y != i_y) or (y == i_y and x != i_x)): if (i_x, i_y) == (e_x, e_y): return dist + 1 if (i_x, i_y) not in visited: visited.add((i_x, i_y)) queue.append((i_x, i_y, dist + 1)) return -1"},{"question":"Alice is a professional baker and has n different types of ingredients. Each ingredient can be used in multiple recipes. Alice wants to prepare a variety of dishes using these ingredients but prefers to maximize the diversity of the dishes she prepares. A dish is considered diverse if it uses all unique ingredients (i.e., no ingredient is repeated within a dish). To help Alice, you need to determine the maximum number of diverse dishes she can prepare using her ingredients. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of different ingredients. The second line contains n integers a1, a2, ... an (1 ≤ ai ≤ 10^4) — the quantity of each ingredient Alice has. Output Print a single integer — the maximum number of diverse dishes Alice can prepare using her ingredients. Example Input 5 3 2 3 1 4 Output 4 Input 3 1 1 1 Output 1 Note In the first example, Alice has five types of ingredients with quantities given. She can prepare the following diverse dishes: - One dish using one unit of each of the first four ingredients. - And she will have leftovers, but cannot create another diverse dish with unique ingredients. Thus, the maximum number of diverse dishes she can prepare is 4. In the second example, Alice only has one unit of each ingredient, so she can only prepare one diverse dish.","solution":"def max_diverse_dishes(n, ingredients): Determines the maximum number of diverse dishes Alice can prepare using the given quantities of ingredients. A dish is considered diverse if it uses all unique ingredients and no ingredient is repeated within a dish. Args: n: Integer - The number of different ingredients. ingredients: List of integers - The quantities of each ingredient. Returns: Integer - The maximum number of diverse dishes Alice can prepare. ingredients.sort() # Sort the list of ingredients max_dishes = 0 for i in range(n): if ingredients[i] > max_dishes: max_dishes += 1 return max_dishes"},{"question":"You are given a string S consisting of lowercase English letters. You need to determine the length of the smallest subsequence in S that contains exactly K distinct characters. Input Format The first line of the input contains T, the number of testcases. Each testcase consists of a single line containing the string S, followed by an integer K separated by a space. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 1 ≤ K ≤ 26 Output Format For each testcase, output a single line with the length of the smallest subsequence that contains exactly K distinct characters. If no such subsequence exists, output -1. SAMPLE INPUT 3 abcaa 2 aaa 1 abcde 6 SAMPLE OUTPUT 2 1 -1 Explanation 1st Test Case: The smallest subsequence with 2 distinct characters is \'ab\' or \'bc\', so the length is 2. 2nd Test Case: The smallest subsequence with 1 distinct character is \'a\', so the length is 1. 3rd Test Case: There are only 5 distinct characters in the string, so it\'s impossible to get a subsequence with 6 distinct characters. Hence, the output is -1.","solution":"def smallest_subsequence_length(s, k): Returns the length of the smallest subsequence in s that contains exactly k distinct characters. If no such subsequence exists, return -1. n = len(s) if len(set(s)) < k: return -1 # Initialize the window char_count = {} left, distinct_count = 0, 0 min_length = float(\'inf\') for right in range(n): char = s[right] if char not in char_count or char_count[char] == 0: distinct_count += 1 char_count[char] = char_count.get(char, 0) + 1 # Shrink the window from the left to find the smallest valid subsequence while distinct_count >= k: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: distinct_count -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"In a secluded valley, there exists a group of trees. Each tree has a unique height. The forest guard receives three types of operations as requests: - `add h` — Add a tree of height `h` to the valley. It’s guaranteed that there’s no tree with the same height already existing in the valley at the time of the request. - `remove h` — Remove the tree of height `h` from the valley. It’s guaranteed that there is a tree with height `h` in the valley at the time of the request. - `tallest_in_range l r` — Determine the tallest tree in the range from `l` to `r` (both inclusive). If there are trees in the range, output the height of the tallest tree. Otherwise, output `-1`. The forest guard needs help maintaining the forest efficiently when the number of requests becomes significantly large. Provide an efficient solution that can handle up to `n = 2 * 10^5` operations. # Input The first line contains the integer number `n` (1 ≤ n ≤ 2 * 10^5) — the number of requests. The following `n` lines contain the requests of the form `add h`, `remove h`, or `tallest_in_range l r`. All heights are integers between 1 and 10^9 (both inclusive). # Output For each request `tallest_in_range l r`, output a line containing the height of the tallest tree within the specified range. If there are no trees in the given range, output `-1`. # Example Input ``` 10 add 5 add 10 add 15 tallest_in_range 1 10 remove 10 tallest_in_range 1 10 add 7 add 13 tallest_in_range 1 20 remove 5 tallest_in_range 1 10 ``` Output ``` 10 5 15 7 ```","solution":"class Valley: def __init__(self): self.trees = set() def add(self, h): self.trees.add(h) def remove(self, h): if h in self.trees: self.trees.remove(h) def tallest_in_range(self, l, r): tallest = -1 for height in self.trees: if l <= height <= r: if height > tallest: tallest = height return tallest"},{"question":"Write an algorithm that receives a list of numbers and a target number, and returns the indices of the two numbers that add up to the target. Consider that each input would have exactly one solution, and you may not use the same element twice. ```python find_two_sum([2, 11, 7, 15], 9) # returns [0, 2] ```","solution":"def find_two_sum(nums, target): Returns the indices of the two numbers in the list that add up to the target. Args: nums (list of int): A list of integers. target (int): The target sum. Returns: list of int: A list containing the indices of the two numbers that add up to the target. num_map = {} for i, num in enumerate(nums): difference = target - num if difference in num_map: return [num_map[difference], i] num_map[num] = i return []"},{"question":"Given a list of numbers, we want to find the longest subsequence such that each number in the subsequence is strictly greater than the previous one. Additionally, the sum of the subsequence should be as high as possible. INPUT First line is N, the number of test cases. N test cases follow, each test case starts with an integer k, the number of integers in the list. The next k integers represent the numbers in the list. OUTPUT Print the length of the longest subsequence for each list, and the highest sum for the longest subsequence. CONSTRAINTS 1 ≤ N ≤ 50 1 ≤ k ≤ 50 Each number in the list is an integer between 1 and 1000 inclusive. SAMPLE INPUT 3 5 5 2 7 4 3 6 1 3 2 4 5 6 4 10 20 30 40 SAMPLE OUTPUT 2 12 6 21 4 100 Explanation CASE 1: The list [5, 2, 7, 4, 3] has a longest increasing subsequence [2, 7] of length 2 and sum 12. CASE 2: The list [1, 3, 2, 4, 5, 6] has a longest increasing subsequence [1, 3, 4, 5, 6] of length 5 and sum 19. CASE 3: The list [10, 20, 30, 40] is already an increasing subsequence of length 4 and sum 100.","solution":"def find_longest_increasing_subsequence(arr): Return the length of the longest increasing subsequence and the sum of this subsequence for a given list. n = len(arr) if n == 0: return 0, 0 # Dynamic programming array to store the length of LIS ending at each index dp_length = [1] * n # Dynamic programming array to store the sum of LIS ending at each index dp_sum = arr[:] for i in range(1, n): for j in range(i): if arr[i] > arr[j]: if dp_length[j] + 1 > dp_length[i]: dp_length[i] = dp_length[j] + 1 dp_sum[i] = dp_sum[j] + arr[i] elif dp_length[j] + 1 == dp_length[i]: dp_sum[i] = max(dp_sum[i], dp_sum[j] + arr[i]) max_length = max(dp_length) max_sum = max(dp_sum[i] for i in range(n) if dp_length[i] == max_length) return max_length, max_sum def process_cases(n, cases): results = [] for case in cases: k, array = case[0], case[1] length, highest_sum = find_longest_increasing_subsequence(array) results.append((length, highest_sum)) return results"},{"question":"In a fictional country, there are n cities connected by m one-way roads. Each road has a specified length. The country needs to ensure that there is a way to travel from the capital city to every other city with the shortest possible total road length. Your task is to write a program that determines the shortest path from the capital city to every other city in the country. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of cities and the number of roads respectively. The capital city is always city 1. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) meaning there is a one-way road from city u to city v with length w. Output For each city from 2 to n, output the shortest distance from the capital city to that city. If there is no valid way to reach a city, output -1 for that city. Example Input 5 7 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 3 4 2 Output 2 3 5 7 Explanation - The shortest path from city 1 to city 2 is of length 2 directly via (1->2). - The shortest path from city 1 to city 3 is 1->2->3 with a total length of 3. - The shortest path from city 1 to city 5 is 1->3->5 with a total length of 7. - The shortest path from city 1 to city 4 is 1->3->4 with a total length of 5.","solution":"import heapq def shortest_paths_from_capital(n, m, roads): def dijkstra(capital, n, graph): distances = [float(\'inf\')] * n distances[capital] = 0 priority_queue = [(0, capital)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances graph = [[] for _ in range(n)] for u, v, w in roads: graph[u-1].append((v-1, w)) distances = dijkstra(0, n, graph) results = [] for i in range(1, n): if distances[i] == float(\'inf\'): results.append(-1) else: results.append(distances[i]) return results"},{"question":"Create a function that takes an integer n (1 ≤ n ≤ 100) and a list of strings of length n. Each string consists of lowercase Latin letters and has a length of at most 100 characters. The function should return a list containing \\"Palindrome\\" for each string that reads the same backward as forward and \\"Not Palindrome\\" for strings that do not. A string is considered a palindrome if it can be read the same way forward and backward, ignoring non-alphanumeric characters and case differences. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), denoting the number of strings to analyze. The following n lines contain one string per line. -----Output----- Print n lines, one line per string in the input. The line should contain \\"Palindrome\\" if the corresponding string is a palindrome and \\"Not Palindrome\\" if it is not. The output should be case-insensitive. -----Example----- Input 5 racecar hello A man a plan a canal Panama Was it a car or a cat I saw Not a palindrome Output Palindrome Not Palindrome Palindrome Palindrome Not Palindrome","solution":"def check_palindromes(n, strings): def is_palindrome(s): s = \'\'.join(c for c in s if c.isalnum()).lower() return s == s[::-1] results = [] for string in strings: if is_palindrome(string): results.append(\\"Palindrome\\") else: results.append(\\"Not Palindrome\\") return results # Example of how to use the function n = 5 strings = [ \\"racecar\\", \\"hello\\", \\"A man a plan a canal Panama\\", \\"Was it a car or a cat I saw\\", \\"Not a palindrome\\" ] print(check_palindromes(n, strings))"},{"question":"-----Problem----- A string is called beautiful if it can be partitioned into one or more contiguous substrings such that each substring is a palindrome. Given a string s, determine the minimum number of palindromic substrings it can be partitioned into to make it beautiful. -----Input----- The input consists of a single string s (1 ≤ |s| ≤ 1000) containing only lowercase English letters. -----Output----- Print the minimum number of palindromic substrings s can be partitioned into. -----Examples----- Input aab Output 1 Input racecar Output 1 Input abc Output 3 Input abac Output 2 Input civic Output 1 -----Note----- In the first example, the string \\"aab\\" can be partitioned into \\"aa\\" and \\"b\\" where \\"aa\\" is a palindrome and \\"b\\" is a palindrome. So the minimum number of palindromic substrings is 1 because \\"aab\\" itself would be treated as one palindrome since any single character is technically a palindrome. In the second example, \\"racecar\\" is already a palindrome. In the third example, each character is a palindrome by itself, so the string \\"abc\\" has to be partitioned into \\"a\\", \\"b\\", \\"c\\". In the fourth example, you can partition \\"abac\\" into \\"aba\\" and \\"c\\", where both are palindromes. The fifth example \\"civic\\" is already a palindrome.","solution":"def is_palindrome(s): Check if the string s is a palindrome. return s == s[::-1] def min_palindromic_partitions(s): Returns the minimum number of palindromic substrings the string \'s\' can be partitioned into. n = len(s) dp = [0] * (n+1) for i in range(n-1, -1, -1): min_cuts = float(\'inf\') for j in range(i, n): if is_palindrome(s[i:j+1]): min_cuts = min(min_cuts, 1 + dp[j+1]) dp[i] = min_cuts return dp[0] - 1"},{"question":"Your friend has recently started learning about numerical sequences. One of the fascinating sequences they encountered is the Triangular number series, where the nth Triangular number `Tn` is defined as the sum of the first n natural numbers: ``` Tn = 1 + 2 + 3 + ... + n ``` Triangular numbers can also be expressed using the formula: ``` Tn = n * (n + 1) / 2 ``` Your friend challenges you to write a program that determines if a given integer is a Triangular number and, if so, finds the value of `n` such that the number is the `n`th Triangular number. Input The input consists of a single integer `x` (1 ≤ x ≤ 10^9). Output If `x` is a Triangular number, output `n`, where `x` is the `n`th Triangular number. Otherwise, output -1. Examples Input 3 Output 2 Input 10 Output 4 Input 8 Output -1","solution":"import math def is_triangular_number(x): Determines if a given integer x is a Triangular number. Returns the value of n such that the number is the nth Triangular number if it exists, otherwise -1. if x < 1: return -1 # Equation to find triangular number: Tn = n * (n + 1) // 2 # Solving for n: n * (n + 1) = 2 * x -> n^2 + n - 2 * x = 0 # Calculate the discriminant of the quadratic equation n^2 + n - 2x = 0 discriminant = 1 + 8 * x # 1^2 + 4*1*(-2*x) if discriminant < 0: return -1 # Calculate the positive root of the quadratic equation n = (-1 + math.isqrt(discriminant)) / 2 # Verify if n is an integer and if Tn equals x if n.is_integer(): n = int(n) if n * (n + 1) // 2 == x: return n return -1"},{"question":"A group of friends are planning a marathon reading session where they wish to read a number of books back-to-back without missing any. Each book can be read within a specific time window. Unfortunately, the organizers realized that they will not be able to read all books because the time windows for reading each book overlap. Your task is to determine the maximum number of books they can read sequentially without any time conflicts. Input: The first line contains an integer T, denoting the number of test cases. The first line of each test case contains an integer N, denoting the number of books. Each of the next N lines contains two integers, start and end, representing the starting and ending times (inclusive) of a book\'s reading time window. Output: For each test case, print the maximum number of books that can be read sequentially without any time overlaps. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ start, end ≤ 1000 Note: In the sequence of reading books, one can start reading the next book exactly at the same time when the previous one ends. SAMPLE INPUT: 2 3 1 4 2 5 6 8 4 1 3 4 6 6 9 10 12 SAMPLE OUTPUT: 2 4","solution":"def max_books_to_read(test_cases): Determines the maximum number of books that can be read without overlaps for each test case. results = [] for books in test_cases: # Sort books by their end times books.sort(key=lambda x: x[1]) # Initialize the count and the end time of the last book read max_count = 0 last_end_time = 0 for start, end in books: if start >= last_end_time: max_count += 1 last_end_time = end results.append(max_count) return results def main(input_data): Parses the input and returns the output for each test case. input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) books = [] for j in range(index + 1, index + 1 + N): start, end = map(int, input_lines[j].split()) books.append((start, end)) test_cases.append(books) index += 1 + N return max_books_to_read(test_cases)"},{"question":"Given a list of intervals representing busy times on someone\'s calendar, write a function that finds the time slots when the person is free. Each interval is represented by a start time and an end time, and all times are integers. The function should return the list of free time intervals. Input: - a list of busy intervals - a start time representing the beginning of the day - an end time representing the end of the day The busy intervals may overlap and are not necessarily sorted. The busy intervals for a day are inclusive of their start and end times. Output: - a list of free time intervals within the given start and end times Example 1: Input: ``` ((1, 3), (5, 6), (12, 14)), start_time = 0, end_time = 15 ``` Output: ``` ((0, 1), (3, 5), (6, 12), (14, 15)) ``` Example 2: Input: ``` ((1, 5), (2, 6), (7, 10)), start_time = 0, end_time = 12 ``` Output: ``` ((0, 1), (6, 7), (10, 12)) ``` Example 3: Input: ``` ((8, 10), (12, 14)), start_time = 6, end_time = 16 ``` Output: ``` ((6, 8), (10, 12), (14, 16)) ``` Note: - It is guaranteed that the given intervals and times are valid. - The intervals can be given in any order. - The output should be sorted by start time.","solution":"def find_free_time(intervals, start_time, end_time): if not intervals: return [(start_time, end_time)] # Sort intervals by start time intervals.sort(key=lambda x: x[0]) # Merge overlapping intervals merged_intervals = [] current_start, current_end = intervals[0] for start, end in intervals[1:]: if start <= current_end: current_end = max(current_end, end) else: merged_intervals.append((current_start, current_end)) current_start, current_end = start, end merged_intervals.append((current_start, current_end)) # Find free time slots free_time = [] # From start_time to the start of the first merged interval if start_time < merged_intervals[0][0]: free_time.append((start_time, merged_intervals[0][0])) # In between merged intervals for i in range(1, len(merged_intervals)): free_time.append((merged_intervals[i-1][1], merged_intervals[i][0])) # From the end of the last merged interval to end_time if merged_intervals[-1][1] < end_time: free_time.append((merged_intervals[-1][1], end_time)) return free_time"},{"question":"You are hired to develop a library management system for a small town library. One critical feature required is to help librarians quickly determine the order in which books should be issued to readers. To simplify the process, each book is given a unique ID and each reader\'s request can be prioritized based on the ID of the book they request. The librarian wants to ensure that the smallest ID books are issued first to fulfill requests efficiently. To solve this problem, write a program that processes multiple requests and then outputs the order of issuing based on the book ID. Constraints * The system can handle up to 1000 requests in a single run. * Each book ID is a positive integer and can be up to 100,000. * Entries are terminated by a request with a book ID of 0, which indicates the end of the input. Input The input consists of multiple lines, each containing a single positive integer representing a book ID requested by a reader. The sequence of inputs ends with a line containing the integer `0`. This line should not be processed. Output Output a single line containing the book IDs in ascending order, separated by a space. Example Input 13 4 26 8 19 0 Output 4 8 13 19 26","solution":"def process_requests(requests): Returns the sorted book IDs from the requests list, excluding any 0s. # Filter out the termination signal (i.e., 0) from the list filtered_requests = [request for request in requests if request != 0] # Sort the remaining book IDs sorted_requests = sorted(filtered_requests) return sorted_requests"},{"question":"A library system wants to automate the process of checking out books. The system needs a function to determine whether the required number of copies of each book are available for checkout. The library keeps track of its inventory with an array `inventory`, where each element represents the number of copies available for a certain book. They also receive a list of `checkout_requests`, where each request is also an array representing the number of copies of each book that a user wants to checkout. Your task is to write a function that checks each request and returns whether the checkout can be successfully completed for each of them. ----- Function Signature ------ ```python def can_fulfill_requests(inventory: List[int], checkout_requests: List[List[int]]) -> List[str]: pass ``` ----- Input Format ------ - The function will take in two parameters: - An integer list `inventory` of length `N`, where `inventory[i]` represents the number of available copies of the i-th book. - A list of integer lists `checkout_requests` of length `M`, where each request is an integer list of length `N`, where `checkout_requests[j][i]` represents the number of copies of the i-th book requested in the j-th request. ----- Output Format ------ - The function should return a list of strings of length `M`. Each element should be either \\"Yes\\" or \\"No\\" indicating whether the corresponding request in `checkout_requests` can be fulfilled based on the `inventory`. ----- Constraints ------ - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 100 - 0 ≤ inventory[i] ≤ 1000 - 0 ≤ checkout_requests[j][i] ≤ 1000 ----- Example ------ ```python inventory = [4, 3, 2] checkout_requests = [ [2, 1, 1], [3, 2, 2], [5, 1, 0] ] can_fulfill_requests(inventory, checkout_requests) ``` ----- Output ----- ```python [\'Yes\', \'Yes\', \'No\'] ``` ----- Explanation ------ 1. The first request `[2, 1, 1]` can be fulfilled since all requested copies (2 of book 1, 1 of book 2, 1 of book 3) are available, thus the result is \\"Yes\\". 2. The second request `[3, 2, 2]` can also be fulfilled since all requested copies (3 of book 1, 2 of book 2, 2 of book 3) are available, thus the result is \\"Yes\\". 3. The third request `[5, 1, 0]` cannot be fulfilled because 5 copies of book 1 are requested, but only 4 are available, thus the result is \\"No\\".","solution":"from typing import List def can_fulfill_requests(inventory: List[int], checkout_requests: List[List[int]]) -> List[str]: results = [] for request in checkout_requests: can_fulfill = True for i in range(len(inventory)): if request[i] > inventory[i]: can_fulfill = False break if can_fulfill: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given two strings s1 and s2, determine if s1 can be transformed into s2 by performing at most one modification. A modification is defined as an insertion, deletion, or substitution of a single character in s1. Input The first line of input contains T, the number of test cases. Each of the next T lines contains two space-separated strings, s1 and s2. Constraints 1 ≤ T ≤ 100 1 ≤ length(s1), length(s2) ≤ 1000 s1 and s2 only contain lower-case English letters. Output For each test case, print \\"Yes\\" if s1 can be transformed into s2 by at most one modification, otherwise print \\"No\\". SAMPLE INPUT 3 pale ple pales pale pale bale SAMPLE OUTPUT Yes Yes Yes","solution":"def can_transform(s1, s2): Determines if s1 can be transformed into s2 with at most one modification. len1, len2 = len(s1), len(s2) # If the length difference is more than 1, return False directly if abs(len1 - len2) > 1: return False # Now handle the edit distance of 0 or 1 modification if len1 > len2: s1, s2 = s2, s1 # Make sure s1 is always the shorter one len1, len2 = len(s1), len(s2) i, j = 0, 0 found_difference = False while i < len1 and j < len2: if s1[i] != s2[j]: if found_difference: return False found_difference = True if len1 == len2: i += 1 # If lengths are the same, move both pointers else: i += 1 j += 1 # Always move pointer for longer string return True def handle_test_cases(test_cases): results = [] for s1, s2 in test_cases: if can_transform(s1, s2): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Sophia is preparing for her final coding exam. She\'s been given a set of m study sessions, each with a distinct amount of efficiency points that can be earned. Sophia can attend a maximum of t sessions within a day to maximize her efficiency points, but once she starts a session, she must complete it without interruption. There are no breaks between sessions and each session takes one hour. Given the efficiency points of the m sessions, determine the maximum efficiency points Sophia can achieve by selecting up to t sessions. -----Input----- The first line of the input contains two integers m and t (1 ≤ m ≤ 100, 1 ≤ t ≤ m) — the number of study sessions and the maximum number of sessions Sophia can attend in a day. The second line contains m integers representing the efficiency points for each session. -----Output----- Print one integer, denoting the maximum efficiency points Sophia can achieve by attending up to t sessions in a single day. -----Examples----- Input 5 3 1 2 3 4 5 Output 12 Input 6 2 7 1 5 3 9 2 Output 16 Input 4 4 10 20 30 40 Output 100 -----Note----- In the first sample, Sophia has 5 sessions with efficiency points [1, 2, 3, 4, 5]. She can attend up to 3 sessions, so the optimal choice is to attend the sessions with points [3, 4, 5] which gives the maximum efficiency points 12. In the second sample, Sophia has 6 sessions with efficiency points [7, 1, 5, 3, 9, 2]. She can attend up to 2 sessions, so the optimal choice is to attend the sessions with points [7, 9] which gives the maximum efficiency points of 16. In the third sample, Sophia has 4 sessions with efficiency points [10, 20, 30, 40]. As she can attend all the sessions, the sum of efficiency points is 100.","solution":"def max_efficiency_points(m, t, efficiency_points): Returns the maximum efficiency points Sophia can achieve by attending up to t sessions. :param m: Number of study sessions (int) :param t: Maximum sessions Sophia can attend in a day (int) :param efficiency_points: List of efficiency points for each session (list of ints) :return: Maximum efficiency points (int) sorted_points = sorted(efficiency_points, reverse=True) return sum(sorted_points[:t])"},{"question":"Problem Statement Drake loves to play with strings and recently discovered an interesting transformation he calls \\"Cyclic Rotation.\\" He selects a string `s` and applies cyclic rotations to it until he finds the lexicographically smallest rotation. Your task is to determine the lexicographically smallest rotated string for a given string `s`. Input The input contains a single line containing the string `s`. Output Output the lexicographically smallest rotated string. Constraints 1 ≤ Length of `s` ≤ 100000 The string `s` will contain only lowercase English letters. SAMPLE INPUT cabbage SAMPLE OUTPUT abbagec Explanation By rotating the string `cabbage` seven times, the lexicographically smallest rotation `abbagec` is obtained.","solution":"def lexicographically_smallest_rotation(s): Returns the lexicographically smallest rotation of the string s. n = len(s) doubled_s = s + s smallest_rotation = s for i in range(1, n): rotation = doubled_s[i:i+n] if rotation < smallest_rotation: smallest_rotation = rotation return smallest_rotation"},{"question":"# Problem Statement Given an array of integers, you need to perform a series of operations to make the array \\"monotonically increasing.\\" In a monotonically increasing array, every element is greater than or equal to the one before it. You are allowed to perform the following operation any number of times: - Select any element of the array and increase it by 1. Determine the minimum number of operations required to make the array monotonically increasing. # Constraints - 1 ≤ n ≤ 1000 - -10^6 ≤ a_i ≤ 10^6 (where a_i represents the value of the element in the array) # Input The input consists of two lines: - The first line contains a single integer n, the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n representing the elements of the array. # Output Output a single integer that represents the minimum number of operations required. # Example Input ``` 5 3 1 5 3 7 ``` Output ``` 4 ``` Input ``` 4 1 2 3 4 ``` Output ``` 0 ``` Input ``` 3 5 5 5 ``` Output ``` 0 ```","solution":"def min_operations_to_make_increasing(n, arr): Returns the minimum number of operations to make the array strictly increasing. operations = 0 for i in range(1, n): if arr[i] < arr[i - 1]: operations += (arr[i - 1] - arr[i]) arr[i] = arr[i - 1] return operations"},{"question":"A group of adventurers is exploring an ancient dungeon. In one of the chambers, they found a sequence of magical runes inscribed on the wall. The runes represent a sequence of integers, and there\'s a hidden message that can be deciphered by identifying the longest continuous subsequence of distinct integers. Help the adventurers by providing them with the length of this longest subsequence. Input: - The first line contains an integer N, the number of runes. - The second line contains N integers representing the sequence of runes. Output: - A single integer denoting the length of the longest continuous subsequence of distinct integers. Constraints: 1 ≤ N ≤ 100000 1 ≤ rune value ≤ 1000 Example: Input: 7 1 2 3 2 4 5 6 Output: 5 Input: 8 10 20 10 30 40 50 20 30 Output: 5 SAMPLE INPUT 7 1 2 3 2 4 5 6 SAMPLE OUTPUT 5 Explanation: The longest continuous subsequence of distinct integers is \'2 4 5 6\' or \'1 2 3 2 4\', both of length 5.","solution":"def longest_distinct_subsequence_length(n, runes): rune_set = set() left = 0 result = 0 for right in range(n): while runes[right] in rune_set: rune_set.remove(runes[left]) left += 1 rune_set.add(runes[right]) result = max(result, right - left + 1) return result"},{"question":"Joe has a hard time keeping track of his finances, so he decides to write a program to help him calculate his monthly budget. He needs to keep track of his income and expenses and get a summary at the end of the month with his net savings or deficit. Write a program that takes an initial amount of savings, followed by a series of daily transactions representing his income and expenses over a month. If the transaction is income, it will be a positive number, and if it\'s an expense, it will be a negative number. The input begins with an integer n representing the number of daily transactions in the month (1 ≤ n ≤ 31), followed by an integer s representing the initial savings (0 ≤ s ≤ 10^6). The next n lines, each contain an integer t representing a daily transaction (-10^6 ≤ t ≤ 10^6). The output should be Joe\'s final savings (or deficit) at the end of the month. SAMPLE INPUT 5 1000 200 -100 50 -300 100 SAMPLE OUTPUT 950 Explanation Joe starts with 1000 as his initial savings. Day 1: Income of 200, total savings = 1000 + 200 = 1200 Day 2: Expense of 100, total savings = 1200 - 100 = 1100 Day 3: Income of 50, total savings = 1100 + 50 = 1150 Day 4: Expense of 300, total savings = 1150 - 300 = 850 Day 5: Income of 100, total savings = 850 + 100 = 950 Hence, the final savings at the end of the month is 950.","solution":"def calculate_final_savings(n, s, transactions): Calculates Joe\'s final savings after a series of daily transactions. :param n: Number of daily transactions (integer) :param s: Initial savings (integer) :param transactions: List of daily transactions (list of integers) :return: Final savings (integer) final_savings = s for transaction in transactions: final_savings += transaction return final_savings"},{"question":"Write a function that takes a string containing a mathematical expression with only positive integers, \'+\', \'-\', \'*\', and \'/\' operators and returns the calculated result. The expression can include spaces for readability, and you can assume the input string is always non-empty and a valid expression. Examples: - \\"3+ 5 / 2\\" -> 5 (3 + 2 = 5) - \\"2* 3 + 4\\" -> 10 (2 * 3 + 4 = 10) - \\"10 - 3 / 3\\" -> 9 (10 - 1 = 9) Note: - You must respect the operator precedence and associativity rules. - Implement intermediate calculations as integer arithmetic (i.e., the result should be an integer). - Do not use built-in eval function or any other method which directly evaluates the string expression.","solution":"def evaluate_expression(expression): def helper(s, index): stack = [] num = 0 sign = \'+\' length = len(s) while index < length: char = s[index] if char.isdigit(): num = num * 10 + int(char) if char in \\"+-*/\\" or index == length - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(int(stack.pop() / num)) sign = char num = 0 index += 1 return sum(stack), index expression = expression.replace(\' \', \'\') result, _ = helper(expression, 0) return result"},{"question":"Given an array A of N integers, sort the array in non-decreasing order. You need to complete the sorting using just heapsort. Example 1: Input: N = 5, A = [4, 1, 3, 9, 7] Output: [1, 3, 4, 7, 9] Example 2: Input: N = 6, A = [10, 9, 8, 7, 6, 5] Output: [5, 6, 7, 8, 9, 10] Your Task: You do not need to read input or print anything. Your task is to complete the function heapsort() which takes the integer N and the array A as inputs and returns an array sorted in non-decreasing order. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9","solution":"def heapsort(N, A): Sorts the array A in non-decreasing order using heapsort algorithm. Parameters: - N (int): Number of elements in the array A. - A (list): List of integers to be sorted. Returns: - list: Sorted list of integers in non-decreasing order. def heapify(arr, n, i): Helper function to maintain the heap property. largest = i # Initialize largest as root left = 2 * i + 1 # left = 2*i + 1 right = 2 * i + 2 # right = 2*i + 2 # If left child is larger than root if left < n and arr[i] < arr[left]: largest = left # If right child is larger than largest so far if right < n and arr[largest] < arr[right]: largest = right # If largest is not root if largest != i: arr[i], arr[largest] = arr[largest], arr[i] # swap # Recursively heapify the affected sub-tree heapify(arr, n, largest) # Build a maxheap. for i in range(N // 2 - 1, -1, -1): heapify(A, N, i) # One by one extract elements for i in range(N-1, 0, -1): A[i], A[0] = A[0], A[i] # swap heapify(A, i, 0) return A"},{"question":"Takahashi has an array of N integers. He will perform the following operation exactly M times: * Choose any two elements a and b from the array (not necessarily distinct), and replace both values with their greatest common divisor (GCD). * Note that multiple pairs of (a, b) can be chosen at different times, but each step must always replace the chosen pair with their GCD. Among the arrays that can be obtained after M operations, find the lexicographically smallest possible one. Constraints * 1 leq N leq 1000 * 1 leq M leq 10^9 * 1 leq A[i] leq 10^9 Input Input is given from Standard Input in the following format: N M A_1 A_2 ... A_N Output Print the lexicographically smallest possible array after M operations, in a single line, separated by spaces. Examples Input 5 1 12 15 9 18 24 Output 9 9 9 18 24 Input 4 3 6 10 15 20 Output 1 1 15 20","solution":"from math import gcd from functools import reduce def calculate_gcd_of_array(arr): This function calculates the GCD of all elements in the array. return reduce(gcd, arr) def lexicographically_smallest_array_after_gcd_operations(N, M, array): Given an array of N elements and M operations, this function returns the lexicographically smallest possible array after performing exactly M operations. overall_gcd = calculate_gcd_of_array(array) return sorted([overall_gcd] * N)"},{"question":"A well-known castle in the kingdom has a peculiar treasure room that only opens for a specific sequence of events. The treasure room has a series of magical doors, each equipped with a counter. These counters hold non-negative integers that represent the number of magical energies stored within. You can perform a specific operation where you select two doors and transfer one unit of energy from one door to another. The treasure room can only be opened if the energy counters of all doors eventually become identical. You have to determine the minimum number of operations required to make all energy counters identical or if it\'s impossible. Write a program to solve the problem. -----Input----- The first line contains the positive integer n (2 ≤ n ≤ 100) — the number of doors. The second line contains n non-negative integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1000) — the initial energy counters of the doors. -----Output----- Print a single integer — the minimum number of operations required to make all energy counters identical. Print -1 if it is impossible to make all energy counters identical. -----Examples----- Input 4 3 7 5 13 Output 6 Input 3 2 4 7 Output -1 -----Note----- In the first sample case, we can perform operations to transfer energies such that all counters become 7. One possible series of operations is: 1. Transfer 2 units from door 4 to door 1. (Energy counters: 5, 7, 5, 11) 2. Transfer 2 units from door 4 to door 3. (Energy counters: 5, 7, 7, 9) 3. Transfer 1 unit from door 4 to door 1. (Energy counters: 6, 7, 7, 8) 4. Transfer 1 unit from door 4 to door 3. (Energy counters: 6, 7, 8, 7) 5. Transfer 1 unit from door 4 to door 1. (Energy counters: 7, 7, 8, 6) 6. Transfer 1 unit from door 3 to door 4. (Energy counters: 7, 7, 7, 7) In the second sample case, it is impossible to make all energy counters identical as the sum of the counters is not a multiple of the number of doors.","solution":"def min_operations_to_equal_energy(n, energy_counters): Returns the minimum number of operations required to make all energy counters identical. If it\'s impossible, returns -1. total_energy = sum(energy_counters) # Condition to check if it\'s possible to make all counters equal if total_energy % n != 0: return -1 target_energy = total_energy // n operations = 0 for energy in energy_counters: if energy > target_energy: operations += energy - target_energy return operations"},{"question":"Problem Statement A company is organizing a competition, and they have received a list of participants\' scores. Each score is associated with a unique participant ID. The company wants to distribute prizes to participants working in teams. The challenge is to calculate how many different sets of participants (teams) can receive prizes such that the score of every participant in the team is distinct and no participant is part of more than one team. You are provided with a list of scores and their respective participant IDs. Your task is to determine the maximum number of teams that can receive prizes. Constraints - Each participant has a unique ID. - The score list is not necessarily sorted. - All scores are integers within the range of -100 to 100. - There are no more than 100 participants. - No two participants can have the same ID. Input The input format is as follows: - The first line contains an integer `N`, the number of participants. - The next `N` lines contain two integers each: `score` and `ID`, representing the score and participant ID respectively. Output Output a single integer representing the maximum number of teams that can receive prizes. Examples Input ``` 6 95 1 92 2 93 3 94 4 95 5 96 6 ``` Output ``` 5 ``` Input ``` 5 91 1 92 2 91 3 92 4 93 5 ``` Output ``` 3 ``` Input ``` 4 88 1 89 2 90 3 91 4 ``` Output ``` 4 ```","solution":"def max_teams(scores_ids): Returns the maximum number of teams with distinct scores. Parameters: scores_ids (List[Tuple[int, int]]): List of tuples containing score and ID. Returns: int: Maximum number of teams that can receive prizes. scores_set = set() for score, _ in scores_ids: scores_set.add(score) return len(scores_set)"},{"question":"A company\'s internal task management system needs to analyze employees\' workloads. Each employee is assigned a number of tasks, and each task is represented by its start and end times. We need a function to determine any overlap of tasks for each employee and find the maximum number of overlapping tasks at any given moment for an individual employee. The function `max_task_overlap(employee_tasks)` will receive a dictionary where the keys are employee IDs (integers) and the values are lists of tasks. Each task is represented as a tuple of start and end times in 24-hour format (integers). The function should output a dictionary where each key is the employee ID and the value is the maximum number of overlapping tasks for that employee. # Constraints - An employee can have up to 100 tasks. - The start and end times will be given in 24-hour format (0 to 23). - Each task will start and end within the same day, and the start time will always be less than the end time. # Example: ```python employee_tasks = { 1: [(1, 4), (2, 6), (5, 8), (7, 10)], 2: [(2, 4), (3, 5), (7, 9), (10, 12)], 3: [(5, 7), (6, 8), (8, 10)] } max_task_overlap(employee_tasks) ``` # Expected Output: ```python { 1: 2, # Tasks (1,4), (2,6) overlap 2: 2, # Tasks (2,4), (3,5) overlap 3: 2 # Tasks (5,7), (6,8) overlap } ``` # Additional Notes: You might find it helpful to research interval scheduling and the sweep line algorithm to efficiently determine the maximum overlap. Complete the implementation of the function `max_task_overlap` to solve the problem.","solution":"def max_task_overlap(employee_tasks): Determines the maximum number of overlapping tasks for each employee. Args: employee_tasks (dict): A dictionary where keys are employee IDs and values are lists of tasks represented as tuples of (start, end) times. Returns: dict: A dictionary where each key is the employee ID and value is the maximum number of overlapping tasks for that employee. from collections import defaultdict def max_overlap(tasks): events = [] for start, end in tasks: events.append((start, \'start\')) events.append((end, \'end\')) events.sort() max_overlap = 0 current_overlap = 0 for time, event in events: if event == \'start\': current_overlap += 1 max_overlap = max(max_overlap, current_overlap) else: current_overlap -= 1 return max_overlap result = {} for employee, tasks in employee_tasks.items(): result[employee] = max_overlap(tasks) return result"},{"question":"AKXYZ is creating a binary string game. Given a binary string, the game requires flipping exactly one \'0\' to \'1\' to maximize the length of the longest contiguous sequence of \'1\'s in the string. For example: The string `\\"1101011\\"` can be modified to `\\"1101111\\"` where the longest contiguous sequence of \'1\'s is 4. The string `\\"000100\\"` can be modified to `\\"000110\\"` where the longest sequence of \'1\'s is 2. AKXYZ needs your help to determine the maximum possible length of the longest contiguous sequence of \'1\'s in the modified string. -----Input----- The input consists of multiple test cases. The first line contains an integer t (t geq 1) — the number of test cases. The description of the test cases follows. Each test case consists of one line containing a binary string s (1 leq |s| leq 100,000). It is guaranteed that the sum of |s| over all test cases does not exceed 100,000. -----Output----- For each test case, print the answer in a single line. -----Examples----- Input 3 1101011 000100 1111 Output 4 2 4 -----Note----- For the first test case, flipping the third \'0\' results in the string `\\"1101111\\"`, where the longest contiguous sequence of \'1\'s has length 4. For the second test case, flipping the fourth \'0\' results in the string `\\"000110\\"`, where the longest contiguous sequence of \'1\'s has length 2. For the third test case, no flipping is needed as the binary string is already `\\"1111\\"`, and the length of the longest contiguous sequence of \'1\'s is 4.","solution":"def max_contiguous_ones(binary_strings): results = [] for s in binary_strings: if \'0\' not in s: results.append(len(s)) continue max_len = 0 current_ones = 0 prev_ones = 0 for char in s: if char == \'1\': current_ones += 1 else: max_len = max(max_len, prev_ones + current_ones + 1) prev_ones = current_ones current_ones = 0 max_len = max(max_len, prev_ones + current_ones + 1) results.append(min(max_len, len(s))) return results"},{"question":"Given a string S consisting of lowercase English alphabets, return the smallest subsequence such that each character appears exactly once. Example 1: Input: S = \\"bcabc\\" Output: abc Explanation: The input string \\"bcabc\\" contains the subsequence \\"abc\\", which is lexicographically the smallest subsequence possible. Example 2: Input: S = \\"cbacdcbc\\" Output: acdb Explanation: The input string \\"cbacdcbc\\" contains the subsequence \\"acdb\\", which is lexicographically the smallest subsequence possible. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestSubsequence() which takes a string S as input and returns a string representing the smallest subsequence as described. Expected Time Complexity: O(N), where N is the length of the string S. Expected Auxiliary Space: O(1) (excluding the space required for input and output). Constraints: 1 ≤ |S| ≤ 10^5 S consists of lowercase English letters only.","solution":"def smallestSubsequence(S): Returns the smallest subsequence such that each character appears exactly once. stack = [] seen = set() last_occurrence = {c: i for i, c in enumerate(S)} for i, c in enumerate(S): if c not in seen: while stack and c < stack[-1] and i < last_occurrence[stack[-1]]: seen.discard(stack.pop()) stack.append(c) seen.add(c) return \'\'.join(stack)"},{"question":"F: Chocolate Distribution Tom decided to distribute chocolates to the children in the neighborhood. The shop sells N different kinds of chocolates, each with a number of pieces given by C_1, C_2, C_3, dots, C_N . Tom wants to ensure that every child receives exactly one piece of chocolate, and no two children receive the same kind of chocolate. Calculate the maximum number of children that can receive chocolates, given these constraints. input The first line contains an integer N . The second line contains N integers C_1, C_2, C_3, dots, C_N separated by spaces. output Output the maximum number of children that can get chocolates. Print a newline at the end. Constraints * N is an integer greater than or equal to 1 and less than or equal to 100 * C_1, C_2, C_3, dots, C_N are integers between 1 and 100 Input example 1 4 4 3 2 1 Output example 1 4 Input example 2 5 1 1 1 1 1 Output example 2 1 Example Input 4 4 3 2 1 Output 4","solution":"def max_children(N, chocolates): Returns the maximum number of children that can receive chocolates such that no two children receive the same kind of chocolate. return len(set(chocolates))"},{"question":"You are given a rectangular garden with rows and columns. Each cell of this grid-shaped garden is either planted with a flower or empty. You need to find the size of the largest square subgrid that contains only flowers and does not contain any empty cell in it. A square subgrid is defined as a contiguous square section of the grid. Input The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 500) — the number of rows and columns of the garden. Then follow n lines, each containing m characters. Each character is either \'F\' (flower) or \'E\' (empty). Output Print the side length of the largest square subgrid containing only flowers. Examples Input 5 6 FFFEEF FFFFFF EEFFFF FFFFFF FFFFEF Output 3 Input 4 4 EEEE EEEE EEEE EEEE Output 0 Note In the first example, the largest square subgrid containing only flowers has a side length of 3. An example is the square starting at the second row and third column and ending at the fourth row and fifth column. In the second example, there are no squares containing only flowers, so the answer is 0.","solution":"def largest_square_subgrid(n, m, garden): Returns the side length of the largest square subgrid containing only flowers in the given garden grid. # Initialize memoization matrix dp = [[0] * m for _ in range(n)] max_side_length = 0 for i in range(n): for j in range(m): if garden[i][j] == \'F\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"You are given a string S consisting of lowercase alphabets. Your task is to check if the string is a palindrome. A string is said to be a palindrome if it reads the same backward as forward. Write a function that accepts a string S and returns \\"YES\\" if the string is a palindrome and \\"NO\\" otherwise. Example 1: Input: \\"madam\\" Output: \\"YES\\" Example 2: Input: \\"hello\\" Output: \\"NO\\" Example 3: Input: \\"racecar\\" Output: \\"YES\\" Your Task: You do not need to read any input from standard input. Complete the function isPalindrome(S) which takes a string S as the input parameter and returns \\"YES\\" if the string is a palindrome and \\"NO\\" otherwise. Constraints: 1 <= |S| <= 100","solution":"def isPalindrome(S): Returns \\"YES\\" if the string S is a palindrome, \\"NO\\" otherwise. return \\"YES\\" if S == S[::-1] else \\"NO\\""},{"question":"Given two arrays A and B of equal length N where A[i] provides the heights of persons and B[i] gives the number of chocolates they possess respectively. Your task is to sort the persons based on their heights in descending order and then for persons with the same height, sort them by the number of chocolates in ascending order. Example 1: Input: A = [170, 180, 160, 170] B = [2, 7, 10, 3] Output: [(180, 7), (170, 2), (170, 3), (160, 10)] Explanation: First, we need to sort by height. So, the persons with heights 180 and 170 will come before person with height 160. Among persons with height 170, the one having fewer chocolates (i.e. 2) will come first. Example 2: Input: A = [150, 150, 150, 140] B = [3, 1, 2, 5] Output: [(150, 1), (150, 2), (150, 3), (140, 5)] Explanation: All persons have the same height except one with height 140. Hence, we will sort them by the number of chocolates they possess. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sortPersons() which takes two arrays A and B of length N and returns a list of tuples sorted as mentioned above. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 1000 1 <= A[i] <= 300 1 <= B[i] <= 500","solution":"def sortPersons(A, B): Sort persons by their height in descending order and for persons with the same height, sort them by the number of chocolates in ascending order. Parameters: A (list): List of heights. B (list): List of chocolates. Returns: list: Sorted list of tuples (height, chocolates). persons = list(zip(A, B)) sorted_persons = sorted(persons, key=lambda x: (-x[0], x[1])) return sorted_persons"},{"question":"Write a function called `ratingSystem()` that takes an input string representing a paragraph of product reviews. The function should analyze the sentiment of each review (positive, negative, or neutral) based on the presence of specific keywords and phrases. The function should then return an object with the total count of each sentiment category. Sentiment criteria are as follows: - Positive: contains words \\"good\\", \\"excellent\\", \\"awesome\\", \\"fantastic\\", \\"lovely\\" - Negative: contains words \\"bad\\", \\"terrible\\", \\"awful\\", \\"horrible\\", \\"poor\\" - Neutral: does not contain any of the above words The input string will have individual reviews separated by a period (\'.\'). Consider each review to be trimmed of leading or trailing whitespace and to be either entirely in lowercase or the keywords to be case-insensitive. Each sentence/review in the paragraph should be treated as a separate review in the sentiment analysis, regardless of punctuation. Example: ```python input_string = \\"The product is good. But the delivery was terrible. Overall, it was an excellent purchase.\\" Output: { \\"positive\\": 2, \\"negative\\": 1, \\"neutral\\": 0 } ```","solution":"def ratingSystem(input_string): Analyzes the sentiment of each review in the input string. Parameters: input_string (str): Paragraph of product reviews separated by periods. Returns: dict: Dictionary with counts of \'positive\', \'negative\', and \'neutral\' reviews. positive_keywords = [\\"good\\", \\"excellent\\", \\"awesome\\", \\"fantastic\\", \\"lovely\\"] negative_keywords = [\\"bad\\", \\"terrible\\", \\"awful\\", \\"horrible\\", \\"poor\\"] # Initialize counters sentiment_counts = { \\"positive\\": 0, \\"negative\\": 0, \\"neutral\\": 0 } # Split the input into individual reviews reviews = input_string.lower().split(\'.\') for review in reviews: review = review.strip() if not review: continue review_sentiment = \\"neutral\\" for p_word in positive_keywords: if p_word in review: review_sentiment = \\"positive\\" break if review_sentiment == \\"neutral\\": for n_word in negative_keywords: if n_word in review: review_sentiment = \\"negative\\" break sentiment_counts[review_sentiment] += 1 return sentiment_counts"},{"question":"On a strange rectangular grid (NxM), each cell contains either a positive integer or zero. You are given Q queries and your task is to find the sum of the elements in a specified submatrix for each query. A submatrix is defined by its top-left and bottom-right corners. **Input:** The first line contains three integers, N (number of rows), M (number of columns), and Q (number of queries). The next N lines contain M integers each, representing the grid. Each of the next Q lines contains four integers, r1, c1, r2, and c2, which are the top-left and bottom-right corners of the submatrix for which you need to find the sum. All indices are 1-based. **Output:** For each query, output a single integer - the sum of the elements in the specified submatrix. **Constraints:** - 1 ≤ N, M ≤ 1000 - 1 ≤ Q ≤ 10^5 - 0 ≤ Grid[i][j] ≤ 10^9 - 1 ≤ r1 ≤ r2 ≤ N - 1 ≤ c1 ≤ c2 ≤ M **Example:** **Input:** 3 3 3 1 2 3 4 5 6 7 8 9 1 1 2 2 2 2 3 3 1 1 3 3 **Output:** 12 28 45 In this problem, you need to process a large number of submatrix sum queries efficiently.","solution":"def get_prefix_sum_matrix(matrix, n, m): Helper function to compute prefix sum matrix for efficient submatrix sum queries prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] return prefix_sum def submatrix_sum(n, m, q, matrix, queries): Main function to handle multiple submatrix sum queries prefix_sum = get_prefix_sum_matrix(matrix, n, m) results = [] for r1, c1, r2, c2 in queries: sum_value = ( prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1] ) results.append(sum_value) return results"},{"question":"A city wants to establish a new transportation system on a straight road with multiple trip requests. Each request can be represented as a pair of integers [si, ei] where si is the start point of the trip and ei is the endpoint of the trip, both defined as kilometers from the start of the road. Given a list of these requests, you need to find the maximum number of requests that do not overlap. Example 1: Input: requests = [[0, 3], [2, 5], [4, 7], [6, 9], [8, 10]] Output: 3 Explanation: The maximum number of non-overlapping requests is 3. These requests are [0, 3], [4, 7], and [8, 10]. Example 2: Input: requests = [[1, 3], [2, 4], [3, 5]] Output: 2 Explanation: The maximum number of non-overlapping requests is 2. These requests are [1, 3] and [3, 5]. Your Task: You don\'t need to read input or print anything. Complete the function maxNonOverlappingRequests() which takes the list of requests as input and returns the maximum number of non-overlapping requests. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ requests.length ≤ 10^4 0 ≤ si < ei ≤ 10^4","solution":"def maxNonOverlappingRequests(requests): Function to find the maximum number of non-overlapping requests. Parameters: requests (list): List of requests where each request is a list [si, ei]. Returns: int: Maximum number of non-overlapping requests. # Sort requests by their end time requests.sort(key=lambda x: x[1]) # Initialize the variables count = 0 last_end = -1 # Iterate through each request for si, ei in requests: # If the start time of the current request is greater than last end time, # then it is a non-overlapping request if si >= last_end: count += 1 last_end = ei return count"},{"question":"Lena is working on an encryption algorithm that involves distributing special keys into distinct slots to generate a unique setup. Each of the keys has a specific power, represented by an integer, and the power of the keys determines how secure the encryption is. Given a number M denoting the number of keys, and an integer P denoting the sum of the powers of the keys, you need to help Lena distribute the keys such that the maximum power among the keys is minimized. Write a program to find the minimum possible maximum power of keys when the sum of the powers is equal to P. Input: The first line of the input contains an integer T denoting the total number of test cases. Each test case consists of a single line containing two space-separated integers M and P denoting the number of keys and the sum of the powers of the keys respectively. Output: For each test case, output a single integer denoting the minimum possible value of the maximum power of the keys. Constraints: T ≤ 100 M ≤ 1000 P ≤ 10^6 SAMPLE INPUT 3 2 17 3 20 5 100 SAMPLE OUTPUT 9 7 20 Explanation test 1: 1st key has power 9 and 2nd key has power 8. Both keys sum to 17 and the maximum power is 9. test 2: 1st key has power 7, 2nd key has power 7, and 3rd key has power 6. All keys sum to 20 and the maximum power is 7.","solution":"def min_max_power(M, P): Returns the minimum possible maximum power of keys. # Calculate the base power for each key base_power = P // M # Calculate the remainder remainder = P % M # If there is no remainder, all keys will have the same power if remainder == 0: return base_power else: # If there is a remainder, some keys will have power `base_power + 1` # The number of such keys is equal to the remainder return base_power + 1 def process_test_cases(test_cases): results = [] for M, P in test_cases: results.append(min_max_power(M, P)) return results"},{"question":"You are given a list of integers representing the height of trees in a forest. Each tree grows at a uniform rate of one meter per year. Your task is to contract the forest so that every tree has the same height. In one year, you can either: 1. Cut down a tree completely. 2. Let the trees grow by one meter. Determine the minimum number of years required to make all the trees in the list have the same height. -----Input----- The first line contains a single integer n — the number of trees in the forest (1 leq n leq 10^5). The second line contains n integers h_1, h_2, ..., h_n (1 leq h_i leq 10^9) — the heights of the trees. -----Output----- Print a single integer — the minimum number of years required to make all the trees have the same height. -----Examples----- Input 3 4 7 5 Output 2 Input 4 1 1 1 1 Output 0 Input 5 10 10 10 10 10 Output 0 -----Note----- In the first sample case, in the first year, you let the trees grow so the heights become 5, 8, 6. In the second year, the heights become 6, 9, 7. You then cut down the middle tree to get heights 6, 6, 6. Thus, 2 years are required. In the second sample case, all trees are already of the same height, so no years are needed. In the third sample case, all trees are also already of the same height, so no years are needed.","solution":"def min_years_to_equal_heights(n, heights): Determines the minimum number of years required to make all the trees in the list have the same height. Parameters: n (int): Number of trees in the forest. heights (list of int): List of heights of the trees. Returns: int: Minimum number of years required. if n <= 1: return 0 min_height = min(heights) max_height = max(heights) return max_height - min_height"},{"question":"You are given an array of integers. Your task is to find the index of the first element in the array that is not smaller than the given integer \'k\'. If all elements in the array are smaller than \'k\', you should return -1. Write a function that accepts an array of integers and an integer \'k\', and returns the index of the first element in the array that is not smaller than \'k\'. The input array may contain both positive and negative integers and is not necessarily sorted. Input - The first line contains an integer \'n\' (1 ≤ n ≤ 10^3), the number of elements in the array. - The second line contains \'n\' space-separated integers, indicating the elements of the array. - The third line contains the integer \'k\'. Output Print the index (0-based) of the first element in the array that is not smaller than \'k\'. If no such element exists, print -1. Examples Input 5 1 3 5 7 9 5 Output 2 Input 4 -5 -3 -1 1 0 Output 3 Input 3 -2 -3 -5 -1 Output -1","solution":"def find_first_not_smaller(nums, k): Returns the index of the first element in the array that is not smaller than k. If no such element exists, returns -1. for idx, num in enumerate(nums): if num >= k: return idx return -1"},{"question":"Nested Palindrome Alice is fascinated by palindromes. She defines a string ( S ) as a \\"nested palindrome\\" if every palindrome within ( S ) can be decomposed into smaller palindromes, including single-character palindromes. Given a string ( S ) of length ( N ), determine if it is a nested palindrome. A palindrome is defined as a string that reads the same backward as forward. ------ Input Format ------ - The first line contains a single integer ( T ) ((1 ≤ T ≤ 10)) — the number of test cases. - The following ( T ) lines each contain a string ( S ) of length ( N ) ((1 ≤ N ≤ 10^5)) consisting only of lowercase English letters. ------ Output Format ------ For each test case, print \\"YES\\" if the string is a nested palindrome, and \\"NO\\" otherwise. ------ Example Input ----- 3 abba abcba xyz ------ Example Output ----- YES YES NO ------ Explanation ----- - The string \\"abba\\" can be decomposed as \\"a\\", \\"b\\", \\"b\\", \\"a\\", and \\"bb\\", \\"abba\\" all of which are palindromes. - The string \\"abcba\\" can be decomposed as \\"a\\", \\"b\\", \\"c\\", \\"b\\", \\"a\\", and \\"b\\", \\"cbc\\", \\"abcba\\" all of which are palindromes. - The string \\"xyz\\" cannot be decomposed into smaller palindromes that combine to form the entire string.","solution":"def is_palindrome(s): Check if a string s is a palindrome. return s == s[::-1] def is_nested_palindrome(s): Check if a string s is a nested palindrome. if not is_palindrome(s): return False n = len(s) # Base case for single character or empty string. if n <= 1: return True for i in range(1, n + 1): if is_palindrome(s[:i]): if is_nested_palindrome(s[i:]): return True return False def check_nested_palindromes(T, test_cases): results = [] for s in test_cases: if is_nested_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # The main block to interact with input and output can be commented or adjusted as required. # if __name__ == \\"__main__\\": # import sys # input = sys.stdin.read # data = input().split() # T = int(data[0]) # test_cases = data[1:] # results = check_nested_palindromes(T, test_cases) # for result in results: # print(result)"},{"question":"A number is considered \'almost prime\' if it has exactly three distinct divisors: 1, the number itself, and another distinct prime divisor. For example, the number 6 is not almost prime because it has more than three divisors (1, 2, 3, 6). On the other hand, the number 4 is almost prime because it has exactly three divisors (1, 2, 4). Your task is to determine if a given number k is almost prime. Input The first and only line of the input contains a single integer k (2 ≤ k ≤ 50). Output Print YES if k is an almost prime number. Otherwise, print NO. Examples: Input 4 Output YES Input 8 Output NO Input 10 Output NO","solution":"def is_almost_prime(k): Determine if a number k is almost prime. A number is almost prime if it has exactly three distinct divisors. divisors = set() for i in range(1, k + 1): if k % i == 0: divisors.add(i) if len(divisors) > 3: return \\"NO\\" return \\"YES\\" if len(divisors) == 3 else \\"NO\\""},{"question":"You are given a string consisting of lowercase alphabets. The task is to calculate the frequency of each character in the string and return a dictionary with the characters as keys and their frequencies as values. The dictionary should be sorted by the characters in alphabetical order. Example 1: Input: s = \\"apple\\" Output: {\'a\': 1, \'e\': 1, \'l\': 1, \'p\': 2} Explanation: The string \\"apple\\" contains \'a\', \'e\', \'l\' each one time, and \'p\' two times. Example 2: Input: s = \\"banana\\" Output: {\'a\': 3, \'b\': 1, \'n\': 2} Explanation: The string \\"banana\\" contains \'a\' three times, \'b\' one time, and \'n\' two times. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function `char_frequency()` that takes a string s as a parameter and returns the dictionary with character frequencies. Expected Time Complexity: O(N) where N is the length of the string. Expected Auxiliary Space: O(1). Constraints: 1 ≤ length of s ≤ 10^{5}","solution":"def char_frequency(s): Returns a dictionary with the frequency of each character in the string s. The dictionary is sorted by the characters in alphabetical order. freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return dict(sorted(freq_dict.items()))"},{"question":"Given an integer array nums, find the number of occurrences of the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times, where n is the length of the array. Example 1: Input: nums = [3, 2, 3] Output: 2 Explanation: The majority element is 3 and it appears twice. Example 2: Input: nums = [2, 2, 1, 1, 1, 2, 2] Output: 4 Explanation: The majority element is 2 and it appears four times. Your task: You don\'t need to read input or print anything. Your task is to complete the function majorityElementCount() which takes an integer array nums as input and returns the number of occurrences of the majority element. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 5 * 10^4 -10^9 <= nums[i] <= 10^9","solution":"def majorityElementCount(nums): def majorityElement(nums): count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate majority_element = majorityElement(nums) return nums.count(majority_element)"},{"question":"You are given an array of positive integers. Your task is to determine whether it is possible to rearrange the elements of the array such that: 1. The rearranged array forms a strictly increasing sequence. 2. Each element in the rearranged array is either the same as or exactly one greater than any of its neighbors. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of elements in the array. The second line contains n integers ai (1 ≤ ai ≤ 1,000,000), the elements of the array. Output Print \\"YES\\" if it is possible to rearrange the array to meet the conditions. Otherwise, print \\"NO\\". Examples Input 5 1 2 2 3 4 Output YES Input 4 4 1 2 3 Output YES Input 6 1 3 3 4 5 7 Output NO Note In the first example, you can rearrange the array as [1, 2, 2, 3, 4], which satisfies both conditions. In the second example, the array is already arranged in a way that satisfies both conditions. In the third example, it\'s impossible to rearrange the array to meet both conditions since 7 is more than one greater than any of its neighbors (and there are no duplicates of 6 to use).","solution":"def can_rearrange(arr): Determines if the array can be rearranged to form a strictly increasing sequence where each element is either the same as or exactly one greater than any of its neighbors. from collections import Counter # Get the frequency of each element element_count = Counter(arr) # Get the unique elements sorted unique_elements = sorted(element_count.keys()) # Iterate through the sorted unique elements and check the condition for i in range(1, len(unique_elements)): if unique_elements[i] - unique_elements[i-1] > 1: return \\"NO\\" return \\"YES\\" # Function for command line parsing def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:n+1])) print(can_rearrange(arr))"},{"question":"Alice is playing a game \\"Optimal Harvest\\". In this game, Alice is tasked with collecting the maximum number of apples from a grid orchard. The orchard is represented as an n times m grid, where each cell either contains some apples or is empty. Alice starts at the top-left cell (1, 1) and she can only move to the right or down at each step until she reaches the bottom-right cell (n, m). Alice can collect the apples from the cells she visits. Alice wants to gather as many apples as possible. Determine the maximum number of apples she can collect from the start to the end of her journey. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the orchard grid. The next n lines each contain m integers a_{i, j} (0 le a_{i, j} le 100) — the number of apples in the (i, j)-th cell. -----Output----- Print one integer — the maximum number of apples Alice can collect. -----Examples----- Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Input 2 2 1 0 0 1 Output 2 Input 1 5 1 1 1 1 1 Output 5 -----Note----- In the first example, Alice can collect a total of 29 apples by following the path: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3). In the second example, Alice can collect 2 apples by following the path: (1,1) -> (1,2) -> (2,2). In the third example, Alice can collect all 5 apples by moving right at each step.","solution":"def max_apples(n, m, grid): dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], dp[i - 1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j - 1] + grid[i][j]) return dp[n - 1][m - 1]"},{"question":"You are given a grid of size n x n consisting of integers. You need to find the sum of elements in the main diagonal and the anti-diagonal of the grid. The main diagonal of a matrix runs from the top-left to the bottom-right corner, whereas the anti-diagonal runs from the top-right to the bottom-left corner. Note that if a grid has an odd size, the center element should only be counted once. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100). Each of the next n lines contains n integers separated by spaces, representing the grid. -----Output----- Output a single integer, the sum of the elements on the main diagonal and the anti-diagonal. -----Examples----- Input 3 1 2 3 4 5 6 7 8 9 Output 25 Input 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 68","solution":"def diagonal_sum(n, grid): Returns the sum of the elements in the main diagonal and the anti-diagonal of an n x n grid. If n is odd, the center element is counted only once. diag_sum = 0 for i in range(n): diag_sum += grid[i][i] # main diagonal diag_sum += grid[i][n - 1 - i] # anti-diagonal # If n is odd, subtract the center element once as it was added twice if n % 2 == 1: center = n // 2 diag_sum -= grid[center][center] return diag_sum"},{"question":"You are provided with a collection of `n` cards, numbered from `0` to `n-1`, arranged in a line. Each card has a distinct positive integer written on it. Your task is to sort the cards based on the numbers written on them, but with a twist. First, you will split the cards into two equal parts (if `n` is even) or two nearly equal parts (if `n` is odd: the first part will have `n//2` cards and the second part will have `n//2 + 1` cards). Then, you will sort each part independently. Finally, you will merge the two sorted segments back into one sequence using a special merge method: alternately take one card from each segment, starting with the first segment. If one segment is exhausted before the other, append the remaining cards from the other segment at the end. Given `n` (the number of cards) and an array of positive integers of length `n` representing the card numbers, return the final sequence of card numbers after following the aforementioned steps. # Input format: - an integer `n` (1 ≤ n ≤ 1000) - an array of `n` positive integers, each representing the number on the card. # Output format: - an array of length `n` representing the final sequence of card numbers. # Examples: ```perl sort_cards(4, [13, 7, 5, 1]) => [1, 5, 7, 13] Explanation: The original cards are [13, 7, 5, 1]. First part: [13, 7], second part: [5, 1] Sort each part: [7, 13], [1, 5] Merge alternately: [7 (first), 1 (second), 13 (first), 5 (second)] => [7, 1, 13, 5] sort_cards(5, [8, 3, 10, 6, 2]) => [3, 2, 8, 6, 10] Explanation: The original cards are [8, 3, 10, 6, 2]. First part: [8, 3], second part: [10, 6, 2] Sort each part: [3, 8], [2, 6, 10] Merge alternately: [3 (first), 2 (second), 8 (first), 6 (second), 10 (second)] => [3, 2, 8, 6, 10] ```","solution":"def sort_cards(n, card_numbers): Splits the cards into two parts, sorts each part, then merges them alternately. :param n: An integer representing the number of cards :param card_numbers: A list of integers representing the numbers on the cards :return: A list of integers representing the final sequence of card numbers first_half_length = n // 2 first_half = sorted(card_numbers[:first_half_length]) second_half = sorted(card_numbers[first_half_length:]) merged_result = [] i, j = 0, 0 while i < len(first_half) and j < len(second_half): merged_result.append(first_half[i]) i += 1 if j < len(second_half): merged_result.append(second_half[j]) j += 1 while i < len(first_half): merged_result.append(first_half[i]) i += 1 while j < len(second_half): merged_result.append(second_half[j]) j += 1 return merged_result"},{"question":"We have an undirected graph with N nodes and M edges, where each node is uniquely identified by an integer from 1 to N. Given are the integers N and M, followed by M pairs of integers U and V which describe an edge between node U and node V. You need to determine and print the number of connected components in the graph. A connected component is a maximal set of nodes such that there is a path between any pair of nodes in this set. Constraints * 1 leq N leq 1000 * 0 leq M leq 1000 * 1 leq U, V leq N * U neq V * (U, V) and (V, U) will not appear more than once. Input Input is given from Standard Input in the following format: ``` N M U_1 V_1 U_2 V_2 vdots U_M V_M ``` Output Print the number of connected components. Examples Input ``` 5 3 1 2 2 3 4 5 ``` Output ``` 2 ``` Input ``` 6 2 1 2 3 4 ``` Output ``` 4 ``` Input ``` 4 1 1 2 ``` Output ``` 3 ```","solution":"def find_connected_components(N, M, edges): Returns the number of connected components in the undirected graph. Parameters: N (int): Number of nodes. M (int): Number of edges. edges (list of tuples): List of edges where each edge is a tuple (U, V). def dfs(node): Depth First Search (DFS) to visit all nodes in the current component. Parameters: node (int): The starting node for DFS. visited[node] = True for neighbor in adjacency_list[node]: if not visited[neighbor]: dfs(neighbor) # Initialize the adjacency list adjacency_list = [[] for _ in range(N + 1)] # Build the graph for U, V in edges: adjacency_list[U].append(V) adjacency_list[V].append(U) visited = [False] * (N + 1) connected_components = 0 # Traverse all nodes. If a node is not visited, it starts a new component. for node in range(1, N + 1): if not visited[node]: dfs(node) connected_components += 1 return connected_components # Example usage: # N = 5 # M = 3 # edges = [(1, 2), (2, 3), (4, 5)] # print(find_connected_components(N, M, edges)) # Output should be 2"},{"question":"Input 5 3 9 1 14 8 Output 35","solution":"def sum_array(arr): Returns the sum of elements in the array arr. return sum(arr)"},{"question":"In a futuristic city, vehicles are connected via a network of intersections and one-way roads. The city wants to create a more efficient traffic routing system by finding the longest possible path where no intersection is visited more than once. Your task is to help the city planners by designing a solution to find the length of this longest path in the network. The city\'s road network is modeled as a directed acyclic graph (DAG) with n intersections (nodes) numbered from 0 to n-1, connected by m one-way roads (edges). The roads are represented as pairs of integers (u, v) whereby there is a one-way road from intersection u to intersection v. -----Input----- The first line contains two integers, n and m (1 leq n, m leq 10^5), representing the number of intersections and one-way roads, respectively. The next m lines each contain two integers u and v (0 leq u, v < n), representing a one-way road from intersection u to intersection v. -----Output----- Print a single integer: the length of the longest path where no intersection is visited more than once. -----Examples----- Sample Input: 5 6 0 1 1 2 2 3 1 3 3 4 2 4 Sample Output: 4","solution":"from collections import defaultdict, deque def find_longest_path(n, m, edges): # Construct the graph graph = defaultdict(list) in_degrees = [0] * n for u, v in edges: graph[u].append(v) in_degrees[v] += 1 # Implementing Kahn\'s algorithm for topological sorting topo_order = [] queue = deque([node for node in range(n) if in_degrees[node] == 0]) while queue: node = queue.popleft() topo_order.append(node) for neighbor in graph[node]: in_degrees[neighbor] -= 1 if in_degrees[neighbor] == 0: queue.append(neighbor) # Finding the longest path dp = [-1] * n for node in topo_order: if dp[node] == -1: dp[node] = 0 for neighbor in graph[node]: if dp[neighbor] < dp[node] + 1: dp[neighbor] = dp[node] + 1 return max(dp) # Input example for illustration purposes if __name__ == \\"__main__\\": n = 5 m = 6 edges = [(0, 1), (1, 2), (2, 3), (1, 3), (3, 4), (2, 4)] print(find_longest_path(n, m, edges))"},{"question":"Write a function named `sum_of_subarrays` that calculates the sum of all subarrays of a given list of integers. A subarray is a contiguous portion of the array. For example, the subarrays of [1, 2, 3] are [1], [2], [3], [1, 2], [2, 3], and [1, 2, 3]. The function should return the cumulative sum of these subarrays. For instance, given the input list [1, 2, 3], the function should calculate: 1 (from [1]) + 2 (from [2]) + 3 (from [3]) + 3 (from [1, 2]) + 5 (from [2, 3]) + 6 (from [1, 2, 3]) = 20 Your function should be able to handle lists containing up to 1000 elements efficiently.","solution":"def sum_of_subarrays(arr): Calculates the sum of all subarrays of the given list of integers. Parameters: arr (list of int): The input list of integers. Returns: int: The cumulative sum of all subarray sums. n = len(arr) total_sum = 0 for i in range(n): current_sum = 0 for j in range(i, n): current_sum += arr[j] total_sum += current_sum return total_sum"},{"question":"A string is called valid if it has balanced parentheses. In other words, for every opening parenthesis there must be a corresponding closing parenthesis and the corresponding parentheses must be properly nested. For example, the strings \\"()\\", \\"(())\\", and \\"()()\\" are valid, while the strings \\"(\\", \\")\\", \\"(()\\", and \\"())(\\" are not valid. Given a string consisting of only the characters \'(\' and \')\', you need to determine the minimum number of insertion operations required to make the string valid. Each insertion operation involves adding a single parenthesis at any position in the string. -----Input----- The input consists of a single string s (1 ≤ |s| ≤ 10^5), where |s| is the length of the string. The string s consists only of the characters \'(\' and \')\'. -----Output----- Output a single integer, the minimum number of insertion operations required to make the string valid. -----Examples----- Sample Input: ()))(( Sample Output: 4","solution":"def min_insertions_to_make_valid(s): Returns the minimum number of insertion operations required to make the string valid with balanced parentheses. :param s: String consisting of only \'(\' and \')\' :return: Integer indicating the number of insertions required open_needed = 0 # To keep track of opening parentheses needed close_needed = 0 # To keep track of closing parentheses needed for char in s: if char == \'(\': close_needed += 1 # Each \'(\' needs one \')\' else: if close_needed > 0: close_needed -= 1 else: open_needed += 1 # If no closer found for this \')\', need to insert \'(\' return open_needed + close_needed"},{"question":"A city grid is modeled as an N x M matrix where some cells are empty, and others have buildings. You are tasked with finding the shortest path from the top-left corner of the grid to the bottom-right corner, avoiding buildings. The grid is a mix of open cells (represented by \'.\') and buildings (represented by \'#\'). You can move up, down, left, or right, but not diagonally, and must stay within the bounds of the grid. Write a function to determine the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, return -1. Input - An integer T representing the number of test cases. - For each test case: - Two integers, N and M, representing the number of rows and columns, respectively (1 ≤ N, M ≤ 1000). - An N x M grid consisting of \'.\' for empty cells and \'#\' for buildings. Output - For each test case, output a single integer representing the length of the shortest path, or -1 if no path exists. Examples Input 2 3 3 ... .#. ... 4 4 ..#. .#.. .... .#.. Output 4 6","solution":"from collections import deque def shortest_path_in_grid(T, test_cases): results = [] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for case in test_cases: N, M, grid = case if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': results.append(-1) continue visited = [[False] * M for _ in range(N)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True found = False while queue: x, y, dist = queue.popleft() if x == N-1 and y == M-1: results.append(dist) found = True break for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) if not found: results.append(-1) return results"},{"question":"String manipulation plays an essential role in various programming tasks. One common use case is formatting and transforming strings based on specific requirements. In this challenge, you\'ll write a function to encode a given string using a simple variant of the run-length encoding (RLE) algorithm. # Problem Statement Given a string `s`, create a function that returns its encoded version. The encoding rule is to replace consecutive characters with the character followed by the number of times it appears consecutively. If a character appears only once consecutively, it should be directly included in the output without any number following it. For example, - The string \\"aabbc\\" would be encoded as \\"a2b2c\\" - The string \\"abcd\\" would be encoded as \\"abcd\\" - The string \\"aaabbaa\\" would be encoded as \\"a3b2a2\\" Write a function `encode_string(s: str) -> str` that takes a string `s` as its argument and returns the encoded string. # Function Signature ```python def encode_string(s: str) -> str: pass ``` # Constraints - Input string `s` will be non-empty and contain only lowercase alphabetical characters. - The length of `s` will not exceed 1000 characters. # Example ```python assert encode_string(\\"aabbc\\") == \\"a2b2c\\" assert encode_string(\\"abcd\\") == \\"abcd\\" assert encode_string(\\"aaabbaa\\") == \\"a3b2a2\\" ```","solution":"def encode_string(s: str) -> str: if not s: return \\"\\" encoded_str = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: if count > 1: encoded_str.append(f\\"{current_char}{count}\\") else: encoded_str.append(current_char) current_char = char count = 1 if count > 1: encoded_str.append(f\\"{current_char}{count}\\") else: encoded_str.append(current_char) return \'\'.join(encoded_str)"},{"question":"Given an array of n integers, your task is to determine the number of unordered pairs of elements (x, y) where x and y are distinct and x + y is an even number. A pair (x, y) is unordered which means (x, y) is considered the same as (y, x). -----Input----- The first line contains a single integer t (1 le t le 10^3) — the number of test cases. Each test case consists of two lines. The first line contains a single integer n (2 le n le 10^5). The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9). It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print a single integer — the number of unordered pairs (x, y) where x neq y and x + y is even. -----Examples----- Input 3 3 1 2 3 4 4 6 8 10 5 1 3 5 7 9 Output 1 6 10 -----Note----- In the first test case, the array is [1, 2, 3]. The only pair (x, y) where x neq y and x + y is even is (1, 3). In the second test case, the array is [4, 6, 8, 10]. The pairs (x, y) where x neq y and x + y is even are: (4, 6), (4, 8), (4, 10), (6, 8), (6, 10), (8, 10). Hence there are 6 such pairs. In the third test case, the array is [1, 3, 5, 7, 9]. The pairs (x, y) where x neq y and x + y is even are: (1, 3), (1, 5), (1, 7), (1, 9), (3, 5), (3, 7), (3, 9), (5, 7), (5, 9), (7, 9). Hence there are 10 such pairs.","solution":"def count_even_sum_pairs(test_cases): results = [] for n, array in test_cases: odd_count = sum(1 for x in array if x % 2 != 0) even_count = n - odd_count # Pairs of (odd, odd) and (even, even) both give even sums. odd_pairs = (odd_count * (odd_count - 1)) // 2 even_pairs = (even_count * (even_count - 1)) // 2 results.append(odd_pairs + even_pairs) return results def process_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((n, array)) index += 2 return test_cases"},{"question":"A farmer has a large field represented as a 2D grid of size `M x N`. Each cell in the grid contains a non-negative integer value, which denotes the number of units of wheat in that particular cell. One day, the farmer plans to harvest the wheat starting from the top-left corner of the field (cell `(1, 1)`) and ending at the bottom-right corner (cell `(M, N)`), following these rules: 1. The farmer can only move to the right or down at any step of the way. Thus, from any cell `(i, j)`, the farmer can only move to cell `(i, j+1)` or cell `(i+1, j)` if those cells exist within the dimensions of the grid. 2. The aim is to collect the maximum units of wheat possible from the start to the destination. Create a program that calculates the maximum units of wheat the farmer can collect. # Input - The first line contains two integers `M` and `N` (1 ≤ M, N ≤ 1000) separated by a space, denoting the number of rows and columns in the field. - The next `M` lines each contain `N` integers, separated by a space, where the `j-th` integer in the `i-th` line denotes the number of units of wheat in the cell `(i, j)`. # Output - Output a single integer, the maximum units of wheat the farmer can collect. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 12 ``` **Explanation**: The path that yields the maximum wheat is `(1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3)` with a total of `1+3+5+2+1 = 12`. Note that the above question matches the style, length, complexity, and topic alignment required, presenting a novel problem within the scope of grid traversal and dynamic programming.","solution":"def max_wheat(M, N, grid): # Assume grid is a MxN list of lists where grid[i][j] represents the wheat units at cell (i+1, j+1) dp = [[0]*N for _ in range(M)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the result return dp[M-1][N-1]"},{"question":"Given an array of integers, find the length of the longest subsequence such that all elements of the subsequence are in strictly increasing order. The subsequence must be a contiguous block of the original array. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains n space-separated integers, representing the elements of the array. Each element will be in the range [-10^9, 10^9]. Output: - Print a single integer, the length of the longest contiguous subsequence where elements are in strictly increasing order. Example: Input: 6 1 3 2 3 4 5 Output: 4 Explanation: The longest contiguous subsequence where elements are in strictly increasing order is [2, 3, 4, 5], which has a length of 4.","solution":"def longest_increasing_contiguous_subsequence(arr): n = len(arr) if n == 0: return 0 longest_length = 1 current_length = 1 for i in range(1, n): if arr[i] > arr[i - 1]: current_length += 1 longest_length = max(longest_length, current_length) else: current_length = 1 return longest_length # Example usage: arr = [1, 3, 2, 3, 4, 5] print(longest_increasing_contiguous_subsequence(arr)) # Output: 4"},{"question":"You are given an array `a` of length `n` consisting of distinct integers and another integer `k` representing the largest element that is allowed in a subsequence sum. Your task is to find the length of the longest subsequence of array `a` whose sum of elements is less than or equal to `k`. A sequence `a` is a subsequence of an array `b` if `a` can be obtained from `b` by deletion of several (possibly, zero or all) elements. -----Input----- The first line contains two integers `n` and `k` (1 le n leq 2 times 10^5, 1 le k leq 10^9) — the length of `a` and the maximum allowed sum respectively. The second line contains `n` integers a_1, a_2, ldots, a_n (1 le a_i leq 10^6) — the elements of the array `a`. -----Output----- Output the length of the longest subsequence of `a` whose sum is less than or equal to `k`. -----Examples----- Input 5 10 1 2 3 4 5 Output 4 Input 5 3 1 2 3 4 5 Output 2 Input 6 20 5 3 4 8 7 10 Output 4 Input 3 15 9 10 13 Output 2 -----Note----- In the first sample, you can choose the subsequence `[1, 2, 3, 4]` where the sum is 1 + 2 + 3 + 4 = 10. In the second sample, you can choose the subsequence `[1, 2]` where the sum is 1 + 2 = 3. In the third sample, you can choose the subsequence `[5, 3, 4, 8]` where the sum is 5 + 3 + 4 + 8 = 20. In the fourth sample, you can choose the subsequence `[9, 6]` where the sum is 9 + 6 = 15.","solution":"def longest_subsequence_length(n, k, a): Given an array `a` of length `n` and a maximum allowed sum `k`, this function returns the length of the longest subsequence whose sum of elements is less than or equal to `k`. a.sort() current_sum = 0 length = 0 for i in range(n): if current_sum + a[i] <= k: current_sum += a[i] length += 1 else: break return length"},{"question":"You are given a grid represented as a list of lists of integers, where each sublist represents a row in the grid. Your task is to rotate the grid 90 degrees clockwise. Implement a function that performs the rotation and returns the rotated grid. ``` Example Input: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Note: - The grid is always a square matrix (n x n). - Your function should handle grids of any valid size greater than or equal to 1x1.","solution":"def rotate_grid_90_degrees_clockwise(grid): Rotates the given n x n grid 90 degrees clockwise. :param grid: List of lists of integers representing the grid. :return: Rotated grid as a list of lists of integers. n = len(grid) # Create a new grid with the same dimensions but rotated rotated_grid = [[0 for _ in range(n)] for _ in range(n)] for i in range(n): for j in range(n): rotated_grid[j][n-1-i] = grid[i][j] return rotated_grid"},{"question":"Mary is fascinated with palindromes and loves to play with strings. A palindrome is a string that reads the same backward as forward. She wants to determine the longest palindromic substring in a given string. Can you help Mary find it? -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - The first line of each test case contains a string S, denoting the original string. -----Output:----- For each test case, output the longest palindromic substring. If there are multiple longest palindromic substrings of the same length, output the one that occurs first. -----Constraints----- - 1 leq T leq 10 - 1 leq |S| leq 10^3 - The string S will contain only lowercase English letters. -----Sample Input:----- 2 babad cbbd -----Sample Output:----- bab bb -----EXPLANATION:----- In the first test case, \\"bab\\" and \\"aba\\" are both palindromic substrings of length 3. \\"bab\\" occurs first. In the second test case, \\"bb\\" is the longest palindromic substring.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the input string s. n = len(s) if n == 0: return \\"\\" start = 0 max_length = 1 for i in range(1, n): odd_palindrome = s[i-max_length-1:i+1] even_palindrome = s[i-max_length:i+1] if i - max_length - 1 >= 0 and odd_palindrome == odd_palindrome[::-1]: start = i - max_length - 1 max_length += 2 elif even_palindrome == even_palindrome[::-1]: start = i - max_length max_length += 1 return s[start:start + max_length] def solve_cases(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_substring(s)) return results"},{"question":"You are given an infinite grid, where each cell has coordinates (x, y) such that both x and y are integers. A robot starts at the origin. The robot can make a sequence of steps, each step being one of the following: - Move up: (x, y) → (x, y+1) - Move down: (x, y) → (x, y-1) - Move left: (x, y) → (x-1, y) - Move right: (x, y) → (x+1, y) Given a string representing a sequence of these moves, determine the coordinates of the cell where the robot will be after it completes the full sequence of moves. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - Each of the next T lines contains a sequence of moves as a string consisting of the characters \'U\', \'D\', \'L\', and \'R\'. -----Output----- - For each test case, output a single line containing two space-separated integers representing the final coordinates (x, y) of the robot. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ length of each sequence ≤ 1000 -----Example----- Input: 2 UDLR UUDDLRLR Output: 0 0 0 0 -----Explanation----- Example case 1. The robot follows the sequence of moves \'UDLR\'. Starting from (0, 0), the robot goes up to (0, 1), down to (0, 0), left to (-1, 0), and right back to (0, 0). Example case 2. The robot follows the sequence of moves \'UUDDLRLR\'. Starting from (0, 0), the robot goes up twice to (0, 2), down twice back to (0, 0), left to (-1, 0), right to (0, 0), left again to (-1, 0), and right back to (0, 0).","solution":"def final_position(moves): Returns the final coordinates of the robot after following the sequence of moves. x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x, y"},{"question":"Given a binary string S consisting of only \'0\'s and \'1\'s, determine the length of the longest subsequence of S that can be formed such that no two consecutive elements in the subsequence are the same. Constraints * 1 leq |S| leq 10^6 * S consists of \'0\'s and \'1\'s only Input Input is given from Standard Input in the following format: S Output Output the length of the longest subsequence with no two consecutive elements being the same. Examples Input 1101001 Output 5 Input 11111 Output 1 Input 10101010 Output 8 Input 0000 Output 1 Input 101 Output 3","solution":"def longest_non_consecutive_subsequence_length(S): Determines the length of the longest subsequence of S that can be formed such that no two consecutive elements in the subsequence are the same. if not S: return 0 # The initial subsequence length is 1 because the first character is always included. max_length = 1 # Traverse the string from the second character to the end. for i in range(1, len(S)): # If the current character is different from the previous one, increase the subsquence length. if S[i] != S[i - 1]: max_length += 1 return max_length"},{"question":"You are given a list of integers. Your task is to create a new list where each element is equal to the sum of the current element and the maximum of all remaining elements in the original list. If the list is empty, return an empty list. -----Input----- - The first line contains an integer t (1 le t le 1000) — the number of test cases. - Each of the following t lines contains: - An integer n (0 le n le 1000) — the length of the list. - A list of n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output a line containing the new list of integers. -----Example----- Input 3 3 4 5 2 4 1 2 3 4 5 10 20 30 40 50 Output [9, 7, 9] [6, 7, 8, 8] [70, 60, 50, 40, 50] -----Notes----- In the first test case, the maximum of the remaining elements for each position is: - For 4: (maximum of 5, 2) = 5, so 4 + 5 = 9 - For 5: (maximum of 4, 2) = 4, so 5 + 4 = 9 - For 2: (maximum of 4, 5) = 5, so 2 + 5 = 7","solution":"def modify_list(t, test_cases): result = [] for case in test_cases: n, arr = case if n == 0: result.append([]) continue max_ = max(arr) # Find the maximum of the entire list new_list = [x + max_ for x in arr] # Add the maximum to each element result.append(new_list) return result"},{"question":"It’s common to see people browsing the internet when they’re bored. Websites often react differently based on repeated visits: they might display different content or prioritize certain items according to user interests. Let\'s simplify this concept into a small task. Imagine you’re working on a website that keeps track of user visits. Every user has a unique identifier and every visit is logged. You need to determine and organize the visit counts for each user. You are given a list of user visits where each visit is identified by the user\'s ID, and you need to calculate and output the number of visits per user in ascending order of user IDs. -----Input----- The first line of input contains an integer n representing the number of visits. Each of the following n lines contains a single integer u_i (1 leq u_i leq 10^6) representing the user ID of the visit. -----Output----- For each unique user ID in ascending order, output the user ID followed by the number of visits by that user, each on a new line. -----Explanation for sample data----- For Sample Input 1, user 1 visited twice and user 2 visited three times. Therefore, the output is: 1 2 2 3 -----Examples----- Sample Input 1: 5 2 1 2 1 2 Sample Output 1: 1 2 2 3 Sample Input 2: 4 1000000 999999 1000000 999999 Sample Output 2: 999999 2 1000000 2","solution":"def track_user_visits(n, user_visits): Given a list of user visits, calculates the number of visits per user and returns the result in ascending order of user IDs. :param n: int, the number of visits :param user_visits: list of int, the list of user IDs representing visits :return: list of tuples, each tuple contains (user ID, number of visits) from collections import defaultdict visit_count = defaultdict(int) for user_id in user_visits: visit_count[user_id] += 1 result = sorted(visit_count.items()) return result # Example usage: # n = 5 # user_visits = [2, 1, 2, 1, 2] # print(track_user_visits(n, user_visits)) # Output should be [(1, 2), (2, 3)]"},{"question":"You are given a sequence of integers representing the heights of blocks arranged in a row. You can remove at most one block from this row. Write a program that determines if it is possible to obtain a strictly increasing sequence of the heights after the removal. -----Constraints----- - The length of the sequence is between 2 and 1000. - Each height is a positive integer not exceeding 10^6. -----Input----- Input is given from Standard Input in the following format: n h_1 h_2 ... h_n -----Output----- Print YES if it is possible to achieve a strictly increasing sequence after removing at most one block; print NO otherwise. -----Sample Input----- 6 1 2 10 5 7 8 -----Sample Output----- YES By removing the block with height 10, we get the sequence 1 2 5 7 8, which is strictly increasing.","solution":"def can_form_increasing_sequence(n, heights): def is_strictly_increasing(arr): return all(arr[i] < arr[i + 1] for i in range(len(arr) - 1)) if is_strictly_increasing(heights): return \\"YES\\" for i in range(n): new_heights = heights[:i] + heights[i+1:] if is_strictly_increasing(new_heights): return \\"YES\\" return \\"NO\\" # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) heights = list(map(int, data[1:])) print(can_form_increasing_sequence(n, heights))"},{"question":"You are given an array of integers and a target integer. Your task is to determine if there are two distinct indices i and j in the array such that the sum of the integers at those indices is equal to the target value. If such a pair is found, return \\"YES\\", otherwise return \\"NO\\". -----Input----- The first line of the input consists of an integer n (1 ≤ n ≤ 100) — the size of the array. The second line contains n integers, each separated by a space, representing the elements of the array. Each element in the array will be in the range [1, 100]. The third line contains an integer target (1 ≤ target ≤ 200) — the target value for the sum. -----Output----- Output \\"YES\\" if there exist two distinct indices i and j such that the sum of the elements at those indices is equal to the target value. Otherwise, output \\"NO\\". -----Examples----- Input 5 2 7 11 15 4 9 Output YES Input 4 1 2 3 4 8 Output NO Input 6 5 3 6 1 12 7 13 Output YES -----Note----- In the first example, the pair (2, 7) sums up to 9, so the output is \\"YES\\". In the second example, there are no two distinct elements that sum up to 8, so the output is \\"NO\\". In the third example, the pair (6, 7) sums up to 13, so the output is \\"YES\\".","solution":"def has_pair_with_sum(n, array, target): Determines if there are two distinct indices i and j in the array such that the sum of the integers at those indices is equal to the target value. Parameters: n (int): the size of the array. array (list of int): the elements of the array. target (int): the target value for the sum. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for num in array: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, and you need to find the median of the two sorted arrays. The overall run-time complexity should be O(log(min(m, n))). The median is the middle value in an ordered list of numbers. If the list is even, the median is the mean of the two middle numbers. Input - The first line contains two integers `m` and `n` (0 ≤ m, n ≤ 1000) — the sizes of the arrays `nums1` and `nums2`. - The second line contains `m` integers separated by spaces, representing the array `nums1`. - The third line contains `n` integers separated by spaces, representing the array `nums2`. Output - Print the median of the two sorted arrays. The result will be considered correct if its absolute or relative error doesn\'t exceed 10^(-9). Examples Input 4 4 1 3 8 9 2 4 7 10 Output 5.500000000000000 Input 3 4 1 2 3 4 5 6 7 Output 4.000000000000000 Note Let\'s consider the first sample test: - Combining arrays `nums1` and `nums2` results into [1, 2, 3, 4, 7, 8, 9, 10]. - The median in this case, since there are 8 numbers (even), is the average of the 4th and 5th numbers: (4 + 7) / 2 = 5.5. In the second sample test: - Combining arrays `nums1` and `nums2` results into [1, 2, 3, 4, 5, 6, 7]. - The median in this case, since there are 7 numbers (odd), is the 4th number: 4.","solution":"def findMedianSortedArrays(nums1, nums2): Given two sorted arrays nums1 and nums2 of size m and n respectively, this function returns the median of the two sorted arrays. # Ensure nums1 is the smaller array to minimize the binary search range if len(nums1) > len(nums2): nums1, nums2 = nums2, nums1 m, n = len(nums1), len(nums2) imin, imax, half_len = 0, m, (m + n + 1) // 2 while imin <= imax: i = (imin + imax) // 2 j = half_len - i if i < m and nums1[i] < nums2[j - 1]: imin = i + 1 elif i > 0 and nums1[i - 1] > nums2[j]: imax = i - 1 else: if i == 0: max_of_left = nums2[j - 1] elif j == 0: max_of_left = nums1[i - 1] else: max_of_left = max(nums1[i - 1], nums2[j - 1]) if (m + n) % 2 == 1: return max_of_left if i == m: min_of_right = nums2[j] elif j == n: min_of_right = nums1[i] else: min_of_right = min(nums1[i], nums2[j]) return (max_of_left + min_of_right) / 2.0"},{"question":"Polycarp is now interested in transforming arrays. He has devised a procedure called the Left-Inversion. The Left-Inversion procedure works as follows for any given array `a` of length `n`: 1. Start with an empty array `b`. 2. For each element `a[i]` in the array `a` from left to right, insert it at the beginning of the array `b` if `i` is even (0-based index) or insert it at the end of the array `b` if `i` is odd. For example, given the array `a = [1, 2, 3, 4, 5]`, the transformation using the Left-Inversion procedure is: - Start with `b = []`. - Insert `a[0] = 1` at the beginning: `b = [1]`. - Insert `a[1] = 2` at the end: `b = [1, 2]`. - Insert `a[2] = 3` at the beginning: `b = [3, 1, 2]`. - Insert `a[3] = 4` at the end: `b = [3, 1, 2, 4]`. - Insert `a[4] = 5` at the beginning: `b = [5, 3, 1, 2, 4]`. So the transformed array `b = [5, 3, 1, 2, 4]`. Given the original array `a` of length `n`, your task is to find the modified array `b`. -----Input----- The first line of the input contains an integer `n` — the length of the array `a` (1 ≤ `n` ≤ 50). The second line contains `n` integers `a[i]` (1 ≤ `a[i]` ≤ 100), elements of the original array `a`. -----Output----- Print `n` integers — the elements of the transformed array `b`. -----Examples----- Input 5 1 2 3 4 5 Output 5 3 1 2 4 Input 4 10 20 30 40 Output 30 10 20 40 Input 1 50 Output 50","solution":"def left_inversion(n, a): Transforms the array \'a\' using the Left-Inversion procedure and returns the modified array \'b\'. Parameters: n (int): Length of array \'a\'. a (list of int): Original array. Returns: list of int: The transformed array using Left-Inversion. b = [] for i in range(n): if i % 2 == 0: b.insert(0, a[i]) else: b.append(a[i]) return b"},{"question":"Makoto loves puzzles, and today he is trying to solve a particular one that involves arranging numbers. He wants to create a square matrix of size n x n where each cell contains a unique integer from 1 to n^2. However, there\'s a twist: he wants the matrix to be filled in such a way that each row sums to the same value and each column sums to the same value. Makoto has heard that it is possible to achieve this using a special arrangement called a magic square, but he only knows how to construct it for odd-sized matrices. Your task is to help Makoto by providing a program that constructs a magic square for any given odd integer n. A magic square for an odd integer n is an n x n matrix filled with distinct integers from 1 to n^2 such that the sum of the numbers in each row, column, and both main diagonals are the same. Input The input consists of a single odd integer n (1 ≤ n ≤ 99). Output Print the n x n magic square. The matrix should be printed so that each row is in a different line and each number is separated by a space. Example Input 3 Output 8 1 6 3 5 7 4 9 2 Explanation For n = 3, one possible magic square is: 8 1 6 3 5 7 4 9 2 Note: The numbers 1 to 9 are arranged in such a way that each row, each column, and both main diagonals sum up to 15.","solution":"def generate_magic_square(n): if n % 2 == 0: raise ValueError(\\"n must be an odd number\\") magic_square = [[0] * n for _ in range(n)] num = 1 i, j = 0, n // 2 while num <= n * n: magic_square[i][j] = num num += 1 new_i, new_j = (i - 1) % n, (j + 1) % n if magic_square[new_i][new_j]: # cell is already filled i += 1 else: i, j = new_i, new_j return magic_square # Example usage: n = 3 magic_square = generate_magic_square(n) for row in magic_square: print(\\" \\".join(map(str, row)))"},{"question":"Anna loves to cook and is planning a grand dinner party for her friends. She has a list of n ingredients she needs to buy, and each ingredient has a certain price. Anna wants to make the dishes as special as possible without exceeding her budget. However, she also noticed that the store has a special offer: if you buy exactly m ingredients, you get one additional ingredient for free (the cheapest one out of those m ingredients). Anna has b budget to buy the ingredients, and she wants to maximize the number of different ingredients she can purchase. She can use the special offer as many times as she wants, but she can only get one extra ingredient for each set of m ingredients purchased. Given the price of each ingredient, your task is to determine the maximum number of different ingredients Anna can buy. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. For each test case: - The first line contains three integers n, b, m (1 le n le 1000, 1 le b le 10^5, 2 le m le 100) — the number of ingredients, Anna\'s budget, and the number of ingredients needed to get one free ingredient. - The second line contains n integers p_i (1 le p_i le 10^4) — the price of each ingredient. It is guaranteed that the sum of n over all test cases does not exceed 10^4. -----Output----- For each test case, print one integer — the maximum number of different ingredients Anna can buy. -----Example----- Input 3 5 20 3 1 2 3 4 5 4 15 2 3 4 5 8 3 30 3 10 10 10 Output 5 4 3","solution":"def max_ingredients(t, test_cases): results = [] for i in range(t): n, b, m = test_cases[i][0] prices = sorted(test_cases[i][1]) total_cost = 0 count = 0 while len(prices) > 0 and total_cost + prices[0] <= b: if len(prices) >= m: # Take m ingredients including the cheapest one being free total_cost += sum(prices[:m]) - min(prices[:m]) if total_cost <= b: count += m prices = prices[m:] else: break else: # Take the remaining ingredients for price in prices: if total_cost + price <= b: total_cost += price count += 1 else: break break results.append(count) return results"},{"question":"Jason is conducting an experiment with an array `a` of `n` integers. Each integer in the array can be either positive, negative, or zero. He wants to rearrange the array such that the sum and the absolute value of the difference between the maximum and minimum element in the array is maximized. Your task is to help Jason find these quantities after the rearrangement. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases `t` (1 ≤ t ≤ 1000). The description of the test cases follows. The first line of each test case contains an integer `n` (1 ≤ n ≤ 100) — the size of the array. The second line of each test case contains `n` integers `a`_1, `a`_2, ..., `a`_n (-100 ≤ a_i ≤ 100) — the elements of the array. -----Output----- For each test case, output two integers: the maximum possible sum and the maximum possible absolute value of the difference between the maximum and minimum element of the array after the rearrangement. -----Example----- Input 3 3 -1 2 3 4 1 -2 0 3 2 -5 -5 Output 4 4 2 5 -10 0 -----Note----- In the first test case, the maximum sum can be obtained by rearranging as [2, 3, -1], and for the maximum absolute difference, the rearranged array is the same. Hence the output is 4 and 4. In the second test case, the maximum sum can be obtained by rearranging as [1, 3, -2, 0], while the maximum absolute difference is the same, leading to output values of 2 and 5. In the third test case, the array with maximum sum and the maximum absolute difference remains [-5, -5], which results in a sum of -10 and a difference of 0.","solution":"def max_sum_and_diff(test_cases): results = [] for case in test_cases: n, array = case max_sum = sum(array) max_diff = max(array) - min(array) results.append((max_sum, max_diff)) return results def process_input(input_text): lines = input_text.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((n, array)) index += 2 return test_cases"},{"question":"You are given a string s consisting of lowercase English letters. You want to rearrange the characters of the string such that no two adjacent characters are the same. If it\'s possible to rearrange the string, return the rearranged string. Otherwise, return an empty string. -----Input----- The input contains one string s (1 le text{len}(s) le 10^4), where s consists of lowercase English letters. -----Output----- If it is possible to rearrange the string such that no two adjacent characters are the same, output the rearranged string. Otherwise, output an empty string. -----Example----- Input aab Output aba Input aaab Output (empty string)","solution":"from collections import Counter import heapq def rearrange_string(s: str) -> str: # Get the frequency of each character freq = Counter(s) # Using a max-heap to store the negative frequencies (to simulate a max-heap using Python\'s min-heap) max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) # Append current character to result and update its count result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update prev_count as count + 1 to indicate we have used one occurrence of char prev_count, prev_char = count + 1, char result_str = \'\'.join(result) # If we couldn\'t produce a valid result, it will be shorter than the input if len(result_str) != len(s): return \\"\\" return result_str"},{"question":"You are given an array of integers and an integer k. Your task is to find the number of unique pairs of integers (a, b) in the array such that a + b is equal to k. Write a function that takes an array of integers and an integer k as its input and returns the number of unique pairs. Example 1: Input: nums = [1, 2, 3, 4, 3] k = 6 Output: 2 Explanation: The unique pairs are (2, 4) and (3, 3). Example 2: Input: nums = [1, 5, 1, 5] k = 6 Output: 1 Explanation: The unique pair is (1, 5). Your task: You don\'t need to read input or print anything. Your task is to complete the function countPairs() which takes an array of integers \'nums\' and an integer \'k\' as input and returns the number of unique pairs whose sum is equal to k. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= nums.length <= 10^5 -10^4 <= nums[i], k <= 10^4","solution":"def countPairs(nums, k): Returns the number of unique pairs (a, b) such that a + b == k. seen = set() pairs = set() for num in nums: complement = k - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"You are managing a social media platform which has a unique posting system. Users can write new posts and either upvote or downvote existing posts. Each post has an initial score of zero. The total score of a post is determined by the number of upvotes minus the number of downvotes. You are given a list of events of n users, where each event falls into one of the following categories: - type 1: A user creates a new post; - type 2: A user upvotes a post; - type 3: A user downvotes a post. Initially, there are no posts. Every time a type 1 event is encountered, it means a new post is created. The newly created post will then accept upvotes and downvotes as it appears in the event list. Determine the final score of each post after processing all the events. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. For each test case, the first line contains a single integer n (1 le n le 100) — the number of events. The second line contains n integers e_1, e_2, dots, e_n (1 le e_i le 3) — the types of the events in the same order they occur. -----Output----- For each test case, print the final scores of each post in the order they were created. If no posts were created in a test case, print an empty line. -----Examples----- Input 3 5 1 2 2 3 1 4 2 1 3 2 2 1 1 Output 1 0 0 Note: In the first test case: - The first event creates a new post, which we will call post 1. - The second and third events are upvotes for post 1, making its score 2. - The fourth event is a downvote for post 1, making its score 1. - The fifth event creates another post, post 2, with an initial score of 0. Thus, the final scores are: post 1 has a score of 1, and post 2 has a score of 0. In the second test case: - The first event is an upvote, but no posts exist yet, so it is ignored. - The second event creates a new post, post 1. - The third event is a downvote for post 1, making its score -1. - The fourth event is an upvote for post 1, making its score 0. Thus, the final score is: post 1 has a score of 0. In the third test case: - The first event creates a new post, post 1. - The second event creates another post, post 2, both with initial scores of 0. Thus, the final scores are: post 1 has a score of 0, and post 2 has a score of 0.","solution":"def final_scores(t, test_cases): results = [] for test_case in test_cases: n, events = test_case post_scores = [] current_post = -1 for event in events: if event == 1: post_scores.append(0) current_post += 1 elif event == 2 and current_post >= 0: post_scores[current_post] += 1 elif event == 3 and current_post >= 0: post_scores[current_post] -= 1 results.append(\' \'.join(map(str, post_scores))) return results"},{"question":"You are organizing a dinner party with N guests. Each guest has a time window during which they are available to attend. You need to determine the maximum number of guests that can be present at the party at the same time. -----Constraints----- - All values in input are integers. - 1 ≤ N ≤ 10^5 - 1 ≤ start_i, end_i ≤ 10^9 - start_i < end_i -----Input----- Input is given from Standard Input in the following format: N start_1 end_1 start_2 end_2 ⋮ start_N end_N -----Output----- Print the maximum number of guests that can be present at the party at the same time. -----Sample Input----- 5 1 4 2 6 4 7 5 8 3 5 -----Sample Output----- 3 You can have a maximum of 3 guests at the same time if you schedule the party from time 4 to time 5, as guests 1, 2, and 3 will all be present during this period.","solution":"def max_guests(N, intervals): events = [] for interval in intervals: start, end = interval events.append((start, \'start\')) events.append((end, \'end\')) events.sort() current_guests = 0 max_guests = 0 for event in events: if event[1] == \'start\': current_guests += 1 max_guests = max(max_guests, current_guests) else: current_guests -= 1 print(max_guests)"},{"question":"Write a program that takes a list of integers and an integer k, and returns a new list containing elements from the input list that are greater than or equal to k. The output list should be in the same relative order as the input list. Your program should be efficient to handle large lists (up to 100,000 elements) and should not use additional libraries. Here are a few examples: ```python filter_by_threshold([3, 10, 5, 8, 4, 2, 7], 5) # [10, 5, 8, 7] filter_by_threshold([20, 15, 8, 30, 12], 15) # [20, 15, 30] filter_by_threshold([], 10) # [] filter_by_threshold([1, 2, 3, 4], 5) # [] ``` Constraints: - Each integer in the list and k is between -1,000,000,000 and 1,000,000,000. - The length of the list will be between 0 and 100,000 elements. - The program should return an empty list if the input list is empty or if no elements meet the threshold.","solution":"def filter_by_threshold(lst, k): Returns a new list containing elements from the input list that are greater than or equal to k. Parameters: lst (list): The input list of integers. k (int): The threshold integer. Returns: list: A new list with elements greater than or equal to k. return [x for x in lst if x >= k]"},{"question":"You have an array A of N integers. Your task is to find the length of the longest contiguous subarray that consists entirely of the same element. Input: First line contains an integer N, the number of elements in the array. Second line contains N integers, the elements of the array A. Constraints: 1 ≤ N ≤ 1000 0 ≤ A[i] ≤ 100000 (0 ≤ i < N) Output: Output the length of the longest contiguous subarray which consists of the same element. SAMPLE INPUT 5 2 2 2 3 3 SAMPLE OUTPUT 3 Explanation The longest contiguous subarray is [2, 2, 2], hence the length is 3.","solution":"def longest_contiguous_subarray(A): Returns the length of the longest contiguous subarray with the same element. if not A: return 0 max_length = 1 current_length = 1 for i in range(1, len(A)): if A[i] == A[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length # Example usage # N = 5 # A = [2, 2, 2, 3, 3] # print(longest_contiguous_subarray(A)) # Output: 3"},{"question":"Develop a function that simulates a simplified version of a traffic system in a grid-like city. You are given a grid of size n x m representing the city, where each cell can either be a road (\'R\') or a building (\'B\'). Each cell in the grid has up to 4 neighboring cells: up, down, left, and right. Traffic can flow from one road cell to another if they are direct neighbors (i.e., not diagonally). Given a starting point (sx, sy) and one or more ending points [(ex1,ey1), (ex2, ey2), ... , (exk, eyk)], design an algorithm that determines if vehicular traffic can reach any of the given end points from the starting point. Assume that: 1. ‘R’ and ‘B’ represent road and building cells respectively. 2. Traffic can neither pass through buildings nor go outside the grid. 3. Traffic may stop when it reaches any of the given end points. -----Input----- The first line contains two integers, n and m (1 ≤ n, m ≤ 50), the dimensions of the grid. Each of the next n lines contains a string of length m representing the grid. The line after that contains two integers, sx and sy (0 ≤ sx < n, 0 ≤ sy < m), the starting coordinates of the traffic. The next line contains an integer k (1 ≤ k ≤ 10), the number of ending points. The following k lines each contain two integers (exi, eyi) representing the coordinates of the i-th ending point. -----Output----- Output \\"YES\\" if traffic can reach any of the ending points from the starting point. Otherwise, output \\"NO\\". -----Examples----- Sample Input: 5 5 RRRRR RBBBR RRRRR RBBBB RRRRR 0 0 2 4 4 2 2 Sample Output: YES","solution":"def can_traffic_reach_endpoint(n, m, grid, sx, sy, endpoints): from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(sx, sy)]) visited[sx][sy] = True while queue: x, y = queue.popleft() if (x, y) in endpoints: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'R\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"In the Kingdom of Avalon, a grand festival is being planned and each village is requested to contribute a specific amount of resources. However, not all villages are equally wealthy, and some villages might not be able to contribute the requested amount on their own. To address this, villages can form alliances where a wealthy village helps a poorer village meet its contribution. The condition is that each village can form an alliance with at most one other village. A pair of villages can form an alliance if their combined contribution at least meets the required sum of the two villages\' target contributions. However, in forming these alliances, the difference in resources between any two allied villages should not exceed a specified threshold, D. If two villages’ resources differ by more than D, they cannot form an alliance. Given the target contributions and resources of each village, determine if it is possible to create alliances so that all villages meet their contribution requirements. Input: The first line contains an integer N (2 ≤ N ≤ 10^3) — the number of villages. The second line contains an integer D (1 ≤ D ≤ 10^9) — the maximum allowed difference in resources for villages to be able to form an alliance. Each of the next N lines contains two integers Ti and Ri (1 ≤ Ti, Ri ≤ 10^9) — the target contribution and resources of the i-th village, respectively. Output: Output \\"YES\\" if it is possible to form the alliances so that all villages can meet their target contributions, otherwise output \\"NO\\". Examples Input: 4 10 5 7 10 12 3 2 8 6 Output: YES Input: 3 5 4 2 10 3 6 1 Output: NO","solution":"def can_form_alliances(N, D, villages): villages.sort(key=lambda x: x[1]) # Sort by resources i = 0 while i < N: # Find the pair with the smallest resource sufficient paired = False for j in range(i + 1, N): if abs(villages[i][1] - villages[j][1]) <= D: if villages[i][1] + villages[j][1] >= villages[i][0] + villages[j][0]: paired = True break if not paired: return \\"NO\\" i += 2 # Move to the next pair return \\"YES\\""},{"question":"Leo is arranging books. Leo has N books, each with a unique identifier from 1 to N. He wants to place them on a shelf in such a way that it minimizes the disorderliness of the arrangement. The disorderliness of an arrangement is defined as the sum of absolute differences of identifiers of all adjacent books. Given the number of books and their initial arrangement, find the arrangement with the minimum disorderliness. Constraints * 2 ≤ N ≤ 10^5 * The initial arrangement is a permutation of integers from 1 to N, inclusive. Input The input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print the arrangement of books that results in the minimum disorderliness. Examples Input 3 3 1 2 Output 1 2 3 Input 5 5 3 2 4 1 Output 1 2 3 4 5 Input 4 4 3 1 2 Output 1 2 3 4","solution":"def minimize_disorderliness(N, books): Minimizes the disorderliness by returning the books sorted in ascending order. :param N: int, number of books :param books: list of int, initial arrangement of books :return: list of int, arrangement with minimum disorderliness return sorted(books)"},{"question":"Write a function that rearranges an integer array such that all odd numbers precede all even numbers. The relative order among odd numbers and even numbers should be maintained. Input The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Output the rearranged array such that all odd numbers come before all even numbers, maintaining their relative order. Example Input 6 4 3 2 7 8 1 Output 3 7 1 4 2 8 Input 5 1 2 3 4 5 Output 1 3 5 2 4 Note In the first example, the array is rearranged so that all odd numbers (3, 7, 1) come before all even numbers (4, 2, 8) while maintaining their original order. In the second example, the resulting order maintains the relative order of odd numbers (1, 3, 5) and even numbers (2, 4) within their respective groups.","solution":"def rearrange_array(arr): Rearranges an integer array such that all odd numbers precede all even numbers. Maintains the relative order among odd numbers and even numbers. Args: arr : list of int The input array with n distinct integers. Returns: list of int The rearranged array. odds = [x for x in arr if x % 2 != 0] evens = [x for x in arr if x % 2 == 0] return odds + evens"},{"question":"Given a list of integers, determine the maximum level of nesting of parentheses required such that each element in the list can be represented as a nested parenthetical expression. Specifically, each element can be contained within one pair of parentheses, and the nesting continues recursively. The task is to compute the maximum depth required for such a representation. For example, given the list `[4, 2, 3, 1]`, the maximum level of nesting should be 2 since `[4, (2, (3, 1))]` would be one valid representation requiring a maximum of 2 levels of nesting. -----Input----- The input consists of a single line containing a list of integers separated by spaces. The length of the list will not exceed 1000 and each integer will be between 1 and 10^9. -----Output----- Output a single integer representing the maximum level of nesting required. -----Examples----- Input 4 2 3 1 Output 2 Input 5 6 7 8 Output 1 Input 1 2 3 4 5 6 7 8 9 10 Output 1 -----Note----- In the first example, the sequence can be nested as `[4, (2, (3, 1))]`, achieving a maximum nesting level of 2. The inner subset `[3, 1]` is nested within a pair of parentheses, and then combined within another set with `4` and `2`. In the second example, each number stands alone so the nesting level is 1. This demonstrates the base case where no nesting is needed beyond the initial level. In the third example, all numbers are distinct and increasing, thus requiring only 1 level of nesting.","solution":"def max_nesting_depth(arr): Determine the maximum level of nesting for each element in the list. Args: arr (list of int): The input list of integers. Returns: int: The maximum level of nesting required. # Since the input is a single line of space-separated integers, # for the purpose of this function, we assume the argument # is a list of integers directly. if len(arr) <= 1: return 1 current_depth = 1 max_depth = 1 for i in range(1, len(arr)): if arr[i] < arr[i-1]: current_depth += 1 max_depth = max(max_depth, current_depth) else: current_depth = 1 return max_depth"},{"question":"In a magical forest, there are n trees arranged in a single row. Each tree has a certain number of apples. A squirrel is going to collect apples from these trees. The squirrel can collect apples only if it collects from a group of three consecutive trees. The squirrel wants to collect the maximum number of apples possible from such a group of three consecutive trees. Your task is to write a program that helps the squirrel determine this maximum number. Input The first line contains a single integer n (3 ≤ n ≤ 200): the number of trees in the forest. The second line contains n integers ai (1 ≤ ai ≤ 1000), where ai is the number of apples on the i-th tree. Output Output a single integer: the maximum number of apples that the squirrel can collect from a group of three consecutive trees. Examples Input 5 3 4 5 1 2 Output 12 Input 7 2 7 3 6 8 4 5 Output 18 Input 3 10 20 30 Output 60 Input 6 3 1 4 1 5 9 Output 15 Explanation In the first example, the squirrel can collect from trees 2, 3, and 4 with apples 4, 5, and 1 respectively for a total of 4 + 5 + 3 = 12. In the second example, the squirrel can collect from trees 4, 5, and 6 with apples 6, 8, and 4 respectively for a total of 6 + 8 + 4 = 18. In the third example, the squirrel collects from all three existing trees for a total of 10 + 20 + 30 = 60. In the fourth example, the squirrel collects from trees 4, 5, and 6: 1, 5, and 9 respectively for a total of 1 + 5 + 9 = 15.","solution":"def max_apples(n, apples): Returns the maximum number of apples the squirrel can collect from 3 consecutive trees. :param n: int — Number of trees :param apples: list — List of integers representing the number of apples on each tree :return: int — Maximum number of apples from 3 consecutive trees max_apples_sum = 0 # Loop through the list, getting the sum of each triplet of consecutive trees for i in range(n - 2): current_sum = apples[i] + apples[i + 1] + apples[i + 2] if current_sum > max_apples_sum: max_apples_sum = current_sum return max_apples_sum"},{"question":"Write a function ```python max_occurrences``` that takes in a string and returns the character that appears the most frequently. If there is a tie, return the character that appears first in the string. The input string will contain only lowercase alphabets and will not be empty. E.g: ```python max_occurrences(\'this is a sample string\') == \'s\' max_occurrences(\'example\') == \'e\' max_occurrences(\'aabbbcccddee\') == \'b\' ``` Your function should handle ties by returning the first character that reaches the highest frequency.","solution":"def max_occurrences(s): Returns the character that appears the most frequently in the string. If there is a tie, returns the character that appears first in the string. from collections import Counter count = Counter(s) max_count = max(count.values()) for char in s: if count[char] == max_count: return char"},{"question":"You are given an integer `n`. Your task is to generate a list of strings based on the following pattern: For each number `i` from 1 to `n`: 1. If the number is divisible by both 3 and 5, append \\"FizzBuzz\\" to the list. 2. If the number is divisible by 3 but not 5, append \\"Fizz\\" to the list. 3. If the number is divisible by 5 but not 3, append \\"Buzz\\" to the list. 4. If the number is neither divisible by 3 nor 5, append the string of the number itself to the list. #Input: An integer `n` (1 <= n <= 1000). #Output: A list of strings following the rules described above.","solution":"def fizz_buzz(n): Generates a list of strings based on the FizzBuzz pattern for numbers from 1 to n. Args: n (int): The upper limit of the range starting from 1. Returns: List[str]: A list of strings based on the specified FizzBuzz rules. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Design a function that takes a string of Roman numerals as input and returns the numeric value of the string. Roman numerals are represented by the following symbols: `I=1`, `V=5`, `X=10`, `L=50`, `C=100`, `D=500`, and `M=1000`. Note that in some cases, a smaller numeral may precede a larger numeral to indicate subtraction (e.g., IV=4, IX=9). Ensure your function correctly handles these cases and converts the Roman numeral string to the correct integer value. Example test cases: - Input: `III`, Output: `3` - Input: `IV`, Output: `4` - Input: `IX`, Output: `9` - Input: `LVIII`, Output: `58` - Input: `MCMXCIV`, Output: `1994`","solution":"def roman_to_int(s): Convert a Roman numeral string to an integer. roman_to_int_map = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_to_int_map[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"You are given a sequence of n integers a1, a2, ..., an. Your task is to create a new sequence b in which the i-th element bi is the sum of all distinct prime numbers that divide ai. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000). Output Output n integers b1, b2, ..., bn — the elements of the newly created sequence. Examples Input 5 10 12 15 17 18 Output 7 5 8 17 5 Explanation For the first number 10, the prime numbers that divide it are 2 and 5. Hence, the corresponding output is 2 + 5 = 7. For the number 12, the prime numbers that divide it are 2 and 3. Hence, the corresponding output is 2 + 3 = 5. For the number 15, the prime numbers that divide it are 3 and 5. Hence, the corresponding output is 3 + 5 = 8. For the number 17, the prime number that divides it is 17 itself. Hence, the corresponding output is 17. For the number 18, the prime numbers that divide it are 2 and 3. Hence, the corresponding output is 2 + 3 = 5.","solution":"def sum_of_prime_divisors(seq): def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False p = 3 while p * p <= num: if num % p == 0: return False p += 2 return True def prime_factors(num): factors = set() if num % 2 == 0: factors.add(2) while num % 2 == 0: num //= 2 p = 3 while p * p <= num: if is_prime(p) and num % p == 0: factors.add(p) while num % p == 0: num //= p p += 2 if num > 2: factors.add(num) return sum(factors) return [prime_factors(x) for x in seq]"},{"question":"Given an integer `n`, return an array representing the first `n` terms of the look-and-say sequence. The look-and-say sequence is a sequence of integers starting with 1, where each term is generated by describing the digits of the previous term. The first few terms are: 1. 1 2. 11 (one `1`) 3. 21 (two `1`s) 4. 1211 (one `2`, then one `1`) 5. 111221 (one `1`, one `2`, then two `1`s) 6. 312211 (three `1`s, two `2`s, one `1`) ... Example 1: Input: n = 5 Output: [\\"1\\", \\"11\\", \\"21\\", \\"1211\\", \\"111221\\"] Example 2: Input: n = 1 Output: [\\"1\\"] Your Task: You don\'t need to read input or print anything. Your task is to complete the function lookAndSaySequence(n) which takes an integer `n` as input and returns an array of strings representing the first `n` terms of the look-and-say sequence. Expected Time Complexity: O(T), where T is the total number of digits across the first `n` terms. Expected Auxiliary Space: O(T) Constraints: 1 <= n <= 30","solution":"def get_next_sequence(term): Generate the next term in the look-and-say sequence from the given term. result = [] i = 0 while i < len(term): count = 1 while i + 1 < len(term) and term[i] == term[i + 1]: i += 1 count += 1 result.append(f\\"{count}{term[i]}\\") i += 1 return \'\'.join(result) def lookAndSaySequence(n): Returns the first n terms of the look-and-say sequence. if n == 0: return [] sequence = [\\"1\\"] for _ in range(1, n): sequence.append(get_next_sequence(sequence[-1])) return sequence"},{"question":"You are given a string s and an array of strings words. Your task is to find the most frequent word in s that is not included in the list of words. Return the word if there is a tie, return the lexicographically smallest word. Example 1: Input: s = \\"the quick brown fox jumps over the lazy dog quick the fox\\", words = [\\"the\\", \\"fox\\"] Output: \\"quick\\" Explanation: Both \\"quick\\" and \\"jumps\\" appear twice, but \\"quick\\" is lexicographically smaller. Example 2: Input: s = \\"cat bat cat rat bat cat\\", words = [\\"bat\\"] Output: \\"cat\\" Explanation: \\"cat\\" appears 3 times, while \\"rat\\" appears once. Example 3: Input: s = \\"apple orange banana apple orange\\", words = [\\"apple\\", \\"banana\\"] Output: \\"orange\\" Explanation: \\"orange\\" appears twice, which is the highest frequency among words not in the list. Constraints: 1 <= s.length <= 10^4 1 <= words.length <= 10^3 1 <= words[i].length <= 20","solution":"from collections import Counter def most_frequent_excluded_word(s, words): Finds the most frequent word in s that is not included in the list of words. If there is a tie, returns the lexicographically smallest word. # Split the string into words and count their frequencies word_list = s.split() word_counts = Counter(word_list) # Remove the banned words from the count dictionary for word in words: if word in word_counts: del word_counts[word] # Find the most frequent word not in the banned list max_count = -1 most_frequent_word = \\"\\" for word, count in word_counts.items(): if count > max_count or (count == max_count and word < most_frequent_word): max_count = count most_frequent_word = word return most_frequent_word"},{"question":"A computer graphics company is working on a new image editing tool. They need a functionality that can determine if a given image, represented by a matrix of pixels, contains a specific smaller pattern. You are given a matrix `M` of size `n x m`, representing the original image, and a matrix `P` of size `k x l`, representing the pattern to be found in the original image. The pattern must appear in the original image as an exact submatrix. Write a function to determine if `P` is a submatrix of `M`. If it is, return the top-left coordinate of the submatrix as `(row, col)`. If there are multiple matches, return any one of the coordinates. If the pattern does not exist in the image, return `(-1, -1)`. Function signature: ```python def find_submatrix(M: List[List[int]], P: List[List[int]]) -> Tuple[int, int]: ``` # Input * `M` - a list of `n` lists where each inner list has `m` integers (1 ≤ n, m ≤ 1000) * `P` - a list of `k` lists where each inner list has `l` integers (1 ≤ k, l ≤ min(n, m)) # Output * A tuple `(row, col)` indicating the top-left coordinate of the submatrix in `M` or `(-1, -1)` if the pattern does not exist. # Examples Example 1 Input: ```python M = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] P = [ [6, 7], [10, 11] ] ``` Output: ``` (1, 1) ``` Example 2 Input: ```python M = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] P = [ [6, 7, 8], [10, 11, 12] ] ``` Output: ``` (1, 1) ``` Example 3 Input: ```python M = [ [1, 2], [3, 4] ] P = [ [5] ] ``` Output: ``` (-1, -1) ```","solution":"from typing import List, Tuple def find_submatrix(M: List[List[int]], P: List[List[int]]) -> Tuple[int, int]: n, m = len(M), len(M[0]) k, l = len(P), len(P[0]) for i in range(n - k + 1): for j in range(m - l + 1): match = True for x in range(k): for y in range(l): if M[i + x][j + y] != P[x][y]: match = False break if not match: break if match: return (i, j) return (-1, -1)"},{"question":"A group of friends is planning a travel route on a circular map with N cities. They start from city 1 and need to visit each consecutive city exactly once in order before returning to city 1. The cost to travel between two cities i and j is provided in a 2D matrix cost where cost[i][j] represents the cost to travel from city i to city j. You need to determine the minimum travel cost to visit all cities starting and ending at city 1. Input The first line contains T - the number of test cases. The following T sections contain: - First line an integer N, the number of cities. - Next N lines contain N integers each denoting the cost matrix. Output For each test case, output the minimum travel cost for completing the route. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 10 0 ≤ cost[i][j] ≤ 1000 SAMPLE INPUT 1 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 SAMPLE OUTPUT 80","solution":"def tsp(cost): Solve the TSP problem using dynamic programming with bit masking. import itertools N = len(cost) # Number of cities dp = [[float(\'inf\')] * N for _ in range(1 << N)] dp[1][0] = 0 # Starting at city 1 with only city 1 visited for visited in range(1 << N): for last in range(N): if visited & (1 << last): for next in range(N): if not visited & (1 << next): dp[visited | (1 << next)][next] = min(dp[visited | (1 << next)][next], dp[visited][last] + cost[last][next]) return min(dp[(1 << N) - 1][i] + cost[i][0] for i in range(1, N)) def min_travel_cost(T, test_cases): results = [] for test in test_cases: N = test[0] cost = test[1] results.append(tsp(cost)) return results"},{"question":"Given a singly linked list, your task is to rearrange it such that all odd-indexed nodes are grouped together followed by the even-indexed nodes. The indices in the question refer to the zero-based index of the nodes in the linked list. Example 1: Input: 1 -> 2 -> 3 -> 4 -> 5 Output: 1 -> 3 -> 5 -> 2 -> 4 Example 2: Input: 2 -> 1 -> 3 -> 5 -> 6 -> 4 -> 7 Output: 2 -> 3 -> 6 -> 7 -> 1 -> 5 -> 4 Your Task: You don\'t need to read input or print anything. Your task is to complete the function rearrangeOddEven() which takes the head node of the linked list as input and returns the head node of the modified linked list after rearranging it so that all odd-indexed nodes come before even-indexed nodes. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= Number of nodes <= 10^4","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rearrangeOddEven(head): if not head or not head.next: return head odd_dummy = ListNode(0) even_dummy = ListNode(0) odd_tail = odd_dummy even_tail = even_dummy is_odd = True current = head while current: if is_odd: odd_tail.next = current odd_tail = odd_tail.next else: even_tail.next = current even_tail = even_tail.next is_odd = not is_odd current = current.next even_tail.next = None odd_tail.next = even_dummy.next return odd_dummy.next"},{"question":"Given a string of parentheses, determine if the order of the parentheses is valid. ```markdown A string of parentheses is valid if all opening parentheses have a corresponding closing parenthesis, and the pairs of parentheses are properly nested. The function `is_valid_parentheses()` (or `isValidParentheses()` for non-python languages), should check whether the string follows these rules and return `True` if it is valid, and `False` if it is not. ``` Examples # Input \\"()\\" # Output True # Input \\"()[]{}\\" # Output True # Input \\"(]\\" # Output False # Input \\"([)]\\" # Output False # Input \\"{[]}\\" # Output True","solution":"def is_valid_parentheses(s): Returns True if the string of parentheses is valid, otherwise returns False. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"You are given a sequence of n integers and a number k. You need to determine if there exists a subsequence of at least k consecutive increasing numbers in the sequence. -----Input----- The first line contains two integers n and k (1 le n, k le 1000). The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the sequence. -----Output----- Print \\"YES\\" if there exists a subsequence of at least k consecutive increasing numbers within the given sequence, otherwise print \\"NO\\". -----Example----- Input 10 3 1 2 2 3 4 5 1 1 1 6 Output YES Input 5 4 5 2 4 6 1 Output NO","solution":"def has_k_consecutive_increasing(nums, k): if k == 1: return \\"YES\\" if len(nums) > 0 else \\"NO\\" n = len(nums) count = 1 for i in range(1, n): if nums[i] > nums[i - 1]: count += 1 if count >= k: return \\"YES\\" else: count = 1 return \\"NO\\" def k_consecutive_increasing_subsequence_exists(n, k, sequence): return has_k_consecutive_increasing(sequence, k)"},{"question":"Given a list of integers, write a function to return the sum of all unique elements in the list. Input: A list of integers L (1 <= len(L) <= 100 and -1000 <= L[i] <= 1000). Output: Print the sum of all unique elements in the list. Example: Input: [1, 2, 2, 3, 4, 5, 5] Output: 13 Explanation: The unique elements in the list are: 1, 3, and 4. Their sum is 1 + 3 + 4 = 8.","solution":"def sum_of_unique_elements(lst): Returns the sum of all unique elements in the list. from collections import Counter # Count frequencies of each element in the list element_counts = Counter(lst) # Sum up elements that appear exactly once in the list unique_sum = sum(element for element, count in element_counts.items() if count == 1) return unique_sum"},{"question":"Farmer John owns a farm represented by a N times M grid. Each cell (i, j) of the grid contains a certain amount of crops C_{i, j} (measured in kilograms). Farmer John wants to divide the farm into K contiguous subgrids such that the difference between the subgrid with the maximum total crops and the subgrid with the minimum total crops is minimized. A subgrid is defined as a rectangular region in the grid. The subgrid must be contiguous, meaning it is defined by a range of rows and a range of columns. Help Farmer John achieve this optimal partitioning with the minimal difference between the maximum and minimum subgrid crops. ------ Input ------ The first line of the input contains three space-separated integers N, M, and K. The next N lines each contain M space-separated integers C_{i, 1}, C_{i, 2}, dots, C_{i, M}, representing the crop amount in each cell. ------ Output ------ Output N lines. Each of these lines should contain M space-separated integers, where the integers in the position (i, j) denotes the subgrid number (1 ≤ B_{i, j} ≤ K) to which the cell (i, j) belongs. Each subgrid must be contiguous. ------ Constraints ------ 1 ≤ N, M ≤ 100 1 ≤ K ≤ min(N, M) 1 ≤ C_{i, j} ≤ 10^3 for each valid i, j ------ Example Input ------ 4 4 2 1 3 2 6 5 9 8 4 4 7 1 2 3 5 6 9 ------ Example Output ------ 1 1 1 2 1 1 2 2 1 2 2 2 2 2 2 2 ------ Explanation ------ In this example, the farm is divided into 2 subgrids. One possible partition is shown, where subgrid 1 spans the top-left portion of the farm and subgrid 2 spans the bottom-right portion. Note that this is just one of the many possible optimal partitions. The total crop amounts for the subgrids must be as balanced as possible.","solution":"def partition_farm(N, M, K, crops): Partition the farm into K contiguous subgrids such that the difference between the subgrid with the maximum total crops and the subgrid with the minimum total crops is minimized. :param N: int, number of rows in the grid :param M: int, number of columns in the grid :param K: int, number of subgrids :param crops: List[List[int]], amount of crops in each grid cell :return: List[List[int]], partitioned grid with subgrid numbers # Initialize the partition grid with 1s initially partition_grid = [[1] * M for _ in range(N)] if K == 1: return partition_grid # Start with simple row-wise partition (this can be changed to a more optimal approach) rows_per_subgrid = N // K extra_rows = N % K subgrid_number = 1 for row in range(N): if (subgrid_number <= extra_rows and (row - subgrid_number * (rows_per_subgrid + 1)) >= 0) or (subgrid_number > extra_rows and (row - extra_rows * (rows_per_subgrid + 1) - ((subgrid_number - extra_rows) * rows_per_subgrid)) >= 0): subgrid_number += 1 for col in range(M): partition_grid[row][col] = subgrid_number return partition_grid"},{"question":"In a typewriting competition, participants are required to type sentences exactly as given, without making any typing errors. Each keyboard has malfunctioning keys which do not register when pressed. Given the original sentence and a list of malfunctioning keys, determine if the sentence can be typed accurately despite the malfunctioning keys. Write a program that reads an original sentence and a list of malfunctioning keys, and then outputs \\"YES\\" if the sentence can be typed accurately, otherwise outputs \\"NO\\". Input The first line is the original sentence. The second line contains the malfunctioning keys separated by commas. Note: The original sentence will not contain commas and will be less than 100 characters long. Malfunctioning keys list will have less than 26 characters. Output Output \\"YES\\" if the sentence can be typed accurately, otherwise output \\"NO\\". Example Input hello world h,e,l Output NO Input good morning z,q,x Output YES","solution":"def can_type_sentence(sentence, malfunctioning_keys): Determines if the sentence can be typed accurately given the malfunctioning keys. Parameters: sentence (str): the original sentence to be typed. malfunctioning_keys (str): comma-separated string of malfunctioning keys. Returns: str: \\"YES\\" if the sentence can be typed accurately, otherwise \\"NO\\". malfunctioning_keys_set = set(malfunctioning_keys.split(\',\')) for char in sentence: if char in malfunctioning_keys_set: return \\"NO\\" return \\"YES\\""},{"question":"An old wizard has a collection of magical stones, each stone has a positive integer value representing its magical power. The wizard wants to arrange the stones in such a way that the absolute difference between the power values of any two adjacent stones is minimized. However, he can only swap two stones at any given time. Given an array of integers representing the magical power of the stones, find the minimum number of swaps required to arrange the stones in a non-decreasing order of their power values. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of stones. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the power values of the stones. -----Output----- Print a single integer denoting the minimum number of swaps required to arrange the stones in non-decreasing order. -----Example----- Input 5 4 3 1 2 5 Output 3 -----Note----- Consider the sample. To sort the array [4, 3, 1, 2, 5] in non-decreasing order: - Swap 4 and 1 to make [1, 3, 4, 2, 5] - Swap 4 and 2 to make [1, 3, 2, 4, 5] - Swap 3 and 2 to make [1, 2, 3, 4, 5] So, the minimum number of swaps is 3.","solution":"def find_minimum_swaps(arr): n = len(arr) # Create a sorted version of the array to get target positions sorted_arr = sorted(arr) # To record the visited status of elements visited = [False] * n # Element to correct index mapping index_dict = {value: index for index, value in enumerate(arr)} swaps = 0 for i in range(n): # If the element is already in the correct position or visited if visited[i] or arr[i] == sorted_arr[i]: continue # Initialize cycle cycle_size = 0 x = i while not visited[x]: visited[x] = True x = index_dict[sorted_arr[x]] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"String matching is a common problem in programming. Given two strings, S and T, determine if T can be formed by deleting some (or none) of the characters from S without reordering the remaining characters. Input The first line contains an integer t (1 ≤ t ≤ 20), denoting the number of test cases in the input. For each test case, there are two lines: 1. A non-empty string S of lowercase Latin letters. 2. A non-empty string T of lowercase Latin letters. The total sum of lengths of all S in all test cases will not exceed 200,000. Output For each test case, print \\"YES\\" if T can be formed from S by deleting some characters without reordering the remaining characters. Otherwise, print \\"NO\\". Example Input 4 abcde ace abcde aec a a abcde abcde Output YES NO YES YES","solution":"def can_form(S, T): Determines if T can be formed by deleting some characters from S without reordering the remaining characters. it = iter(S) return all(char in it for char in T) def solve(test_cases): results = [] for S, T in test_cases: if can_form(S, T): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Design a function `prime_ranges(n)` that generates a list of tuples representing ranges of consecutive prime numbers less than or equal to `n`. A range (tuple) is defined as the largest contiguous sequence of prime numbers where each prime number in the range is separated from the next prime number by exactly 2. In other words, each pair of consecutive primes in the range should follow the pattern (p, p+2). For instance, given `n = 13`, the pairs of twin primes (p, p+2) are (3, 5), (5, 7), and (11, 13). The contiguous sequences formed are: (3, 5, 7) and (11, 13). Write the function `prime_ranges(n)` that takes an integer `n`, `n > 2`, and returns a list of tuples containing the ranges of consecutive primes, where each prime in the tuple follows the twin primes pattern. Examples: ```python prime_ranges(13) == [(3, 5, 7), (11, 13)] prime_ranges(20) == [(3, 5, 7), (11, 13), (17, 19)] prime_ranges(30) == [(3, 5, 7), (11, 13), (17, 19), (29,)] ``` Ensure that your solution handles edge cases effectively and efficiently, keeping computational limits in mind. Implement any helper functions you deem necessary to keep the code clean and modular.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_ranges(n): Returns a list of tuples representing ranges of consecutive primes less than or equal to n, where each prime number in the range is separated from the next by exactly 2. primes = [p for p in range(3, n+1) if is_prime(p)] ranges = [] temp_range = [] for i in range(len(primes)): if not temp_range: temp_range.append(primes[i]) elif primes[i] - temp_range[-1] == 2: temp_range.append(primes[i]) else: if len(temp_range) > 1: ranges.append(tuple(temp_range)) temp_range = [primes[i]] if len(temp_range) > 1: ranges.append(tuple(temp_range)) elif len(temp_range) == 1: ranges.append(tuple(temp_range)) return ranges"},{"question":"Given an integer array A of size N and an integer X, your task is to perform the following operations by completing the provided functions: 1. Rotate the array to the right by X positions. 2. Find the sum of the elements present at even indices in the rotated array. 3. Delete any occurrences of a specified value Y from the rotated array. Implement the following functions: 1. `rotate_array(A, N, X)` - This function should take the array A, its size N, and the integer X, and then rotate A to the right by X positions. It should return the rotated array. 2. `sum_even_indices(A, N)` - This function should take the array A and its size N, and return the sum of elements at even indices. 3. `delete_value(A, N, Y)` - This function should take the array A, its size N, and a value Y, and delete any occurrences of Y from the array. It should return the resulting array. Input Format: ``` N X Y A_{1} A_{2} . . . A_{N} ``` Example: Input: ``` 6 2 4 1 2 3 4 5 6 ``` Output: ``` [5, 6, 1, 2, 3, 4] 12 [5, 6, 1, 2, 3] ``` Your Task: Since this is a function problem, you only need to complete the provided functions. Constraints: - 1 <= T <= 100 - 1 <= N <= 100 - 0 <= A_{i} <= 1000 - 0 <= X <= 100","solution":"def rotate_array(A, N, X): Rotates the array A to the right by X positions. Parameters: A (list): List of integers to rotate. N (int): Size of the array. X (int): Number of positions to rotate. Returns: list: The rotated array. X = X % N # Handle cases where X > N return A[-X:] + A[:-X] def sum_even_indices(A, N): Finds the sum of the elements present at even indices in the array A. Parameters: A (list): List of integers to sum. N (int): Size of the array. Returns: int: Sum of elements at even indices. return sum(A[i] for i in range(N) if i % 2 == 0) def delete_value(A, N, Y): Deletes any occurrences of the value Y from the array A. Parameters: A (list): List of integers. N (int): Size of the array. Y (int): Value to delete. Returns: list: The resulting array after deletions. return [a for a in A if a != Y]"},{"question":"A popular video streaming platform wants to introduce a recommendation system that suggests movies to users based on their viewing history. Each movie can be represented as a node in a graph, and an edge between two nodes indicates that users who watched one movie also watched the other. The weight of an edge indicates the number of users who have watched both movies. Given a graph with `n` nodes and `m` edges, determine the minimum number of nodes required to cover all edges (i.e., find the minimum vertex cover of the graph). ----- Input ----- The input will consist of multiple lines: - The first line contains two integers `n` and `m` - the number of nodes and edges in the graph, respectively. (1 ≤ n ≤ 100, 1 ≤ m ≤ n*(n-1)/2). - The next `m` lines each contain two integers `u` and `v` - indicating an edge between nodes `u` and `v`. (1 ≤ u, v ≤ n). ----- Output ----- Output a single integer - the size of the minimum vertex cover. ----- Examples ----- Input: 5 6 1 2 1 3 2 3 2 4 3 4 4 5 Output: 3 Input: 4 4 1 2 2 3 3 4 4 1 Output: 2 ----- Note ----- In the first example, a minimum vertex cover consists of nodes 2, 3, and 4. Scattered solutions are also possible when each edge is covered by at least one included node. In the second example, a minimum vertex cover could be nodes {1, 3}, {2, 4}, or any other pair covering all edges.","solution":"def find_min_vertex_cover(n, m, edges): from itertools import combinations # Convert edges to an adjacency list for easy coverage checking. adj_list = {i: set() for i in range(1, n + 1)} for u, v in edges: adj_list[u].add(v) adj_list[v].add(u) def is_vertex_cover(subset): Check if subset of nodes is a vertex cover. covered_edges = set() for u in subset: for v in adj_list[u]: covered_edges.add(frozenset([u, v])) return len(covered_edges) == m # Try all subsets in increasing size to find the minimum vertex cover for size in range(n + 1): for subset in combinations(range(1, n + 1), size): if is_vertex_cover(subset): return size return n # In worst case, all nodes form a cover # Reading the input and calling the function def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] for i in range(m): u = int(data[2 + 2 * i]) v = int(data[3 + 2 * i]) edges.append((u, v)) result = find_min_vertex_cover(n, m, edges) print(result) if __name__ == \\"__main__\\": main()"},{"question":"In a certain kingdom, there is a special language which only uses two letters: \'A\' and \'B\'. Due to some ancient tradition, they decide that only specific sequences of these letters are considered valid. The sequence will be considered valid if and only if no two \'B\' letters are adjacent. Your task is to write a program that checks whether a given sequence is valid or not according to this rule. -----Input----- The input contains a single line: a string s (1 ≤ |s| ≤ 100) consisting of only the characters \'A\' and \'B\'. -----Output----- Print \\"VALID\\" (without the quotes), if the sequence is valid, and \\"INVALID\\" (without the quotes) otherwise. -----Examples----- Input AABAB Output VALID Input AABB Output INVALID -----Note----- In the first example, there are no two \'B\'s adjacent to each other, so the sequence is valid. In the second example, the two \'B\'s are placed next to each other, so the sequence is not valid.","solution":"def check_valid_sequence(s): Checks if the given sequence is valid. A sequence is valid if no two \'B\'s are adjacent. Parameters: s (str): The input sequence consisting of characters \'A\' and \'B\'. Returns: str: \\"VALID\\" if the sequence is valid, otherwise \\"INVALID\\". # Check if sequence contains \'BB\' if \'BB\' in s: return \\"INVALID\\" return \\"VALID\\""},{"question":"You are given a non-empty string s. Your task is to determine the number of times each character appears in the string. Your solution should output the characters in the order in which they first appear in the string. Ignore spaces while counting the characters. Input A single line containing the string s (1 ≤ |s| ≤ 1000) where |s| represents the length of the string. Output For each distinct character in the string (excluding spaces), print a line in the following format: \\"character: frequency\\" Characters should be printed in the order they first appear in the string. Examples Input hello world Output h: 1 e: 1 l: 3 o: 2 w: 1 r: 1 d: 1 Input abracadabra Output a: 5 b: 2 r: 2 c: 1 d: 1 Note In the first example, spaces are ignored, and the characters are listed in the order they first appear in \\"hello world\\". en order they first appear in the string.","solution":"def character_frequency(s): Returns the frequency of each character in the given string s, excluding spaces, and preserving the order of their first occurrence. frequency = {} for char in s: if char != \' \': if char in frequency: frequency[char] += 1 else: frequency[char] = 1 result = [] for char in s: if char != \' \' and char in frequency: result.append((char, frequency[char])) del frequency[char] return result"},{"question":"Write a method that takes an array of integers and returns an array of the same integers but sorted in ascending order, without using any built-in sorting methods. The method should implement a custom sorting algorithm (e.g., bubble sort, insertion sort, selection sort) to handle the sorting process. # Examples If the array to sort is [34, 7, 23, 32, 5, 62], the method should return [5, 7, 23, 32, 34, 62].","solution":"def custom_sort(arr): Sorts an array of integers in ascending order using the bubble sort algorithm. Parameters: arr (list): List of integers to be sorted. Returns: list: Sorted list of integers. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Given a list of integers nums, return the maximum difference between the increasing consecutive elements of nums after sorting. If the list contains only one element or is empty, return 0. Example 1: Input: nums = [3, 6, 9, 1] Output: 3 Explanation: After sorting, nums becomes [1, 3, 6, 9]. The maximum difference between consecutive elements is 3 (6-3 or 9-6). Example 2: Input: nums = [10] Output: 0 Example 3: Input: nums = [] Output: 0 Constraints: 0 <= nums.length <= 10^5 0 <= nums[i] <= 10^9","solution":"def maximum_difference(nums): Returns the maximum difference between consecutive elements after sorting the list. If the list has only one element or is empty, returns 0. if len(nums) <= 1: return 0 nums.sort() max_diff = 0 for i in range(1, len(nums)): max_diff = max(max_diff, nums[i] - nums[i - 1]) return max_diff"},{"question":"You are given a list of integers representing the arrival times of customers and a positive integer `K` representing the maximum number of customers that can be served during one hour. Your task is to determine the minimum number of servers required to ensure that all customers are served. In each hour, each server can serve up to `K` customers. Customers whose arrival times fall within the same hour need to be served by different servers if there are more than `K` customers in that hour. Assume that each customer requires exactly one minute to be served. -----Input----- - The first line contains a single integer, T, which is the number of test cases. The description of each test case follows. - The first line of each test case contains a single integer, N, representing the number of customers. - The second line of each test case contains N integers representing the arrival times of customers in sorted order. -----Output----- - For each test case, output a single integer representing the minimum number of servers required. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 10^5 - 0 ≤ arrival times ≤ 10^9 - 1 ≤ K ≤ 10^5 -----Example----- Input: 2 5 0 1 2 3 4 3 0 1800 3599 Output: 1 1 -----Explanation----- In the first test case, the arrival times of customers are 0, 1, 2, 3, and 4, and there are 5 customers in total. All the customers arrive within the same hour, so we require one server to serve each customer since K is large enough to handle all customers. In the second test case, the arrival times of customers are 0, 1800, and 3599, with intervals of half an hour between them. Therefore, we only need one server as each customer is well within the serving capacity of a single server in an hour.","solution":"def min_servers(T, test_cases, K): results = [] for i in range(T): N = test_cases[i][0] arrival_times = test_cases[i][1] if N == 0: results.append(0) continue hours = {} for time in arrival_times: hour = time // 3600 if hour in hours: hours[hour] += 1 else: hours[hour] = 1 max_customers_in_hour = max(hours.values()) servers_needed = (max_customers_in_hour + K - 1) // K # Equivalent to ceiling division results.append(servers_needed) return results"},{"question":"You\'ve got an array of integers, and a target sum. You need to determine if there exists a non-empty subsequence of the array such that the sum of the subsequence is equal to the target sum. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your task is to find if there exists a non-empty subsequence of the array whose sum equals the given target sum. -----Input----- The first line of the input is an integer n, the size of the array (1 ≤ n ≤ 1000). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. The third line of the input consists of a single integer target (1 ≤ target ≤ 1000) — the desired sum of the subsequence. -----Output----- Print \\"YES\\" (without quotes) if there exists a non-empty subsequence of the array whose sum is equal to the target sum. Otherwise, print \\"NO\\". -----Examples----- Input 5 1 2 3 4 5 9 Output YES Input 3 1 2 3 7 Output NO -----Note----- In the first example, let’s consider the subsequence [2, 3, 4], which is a subsequence of the given array, and its sum is 9, which matches the target sum, so the answer is \\"YES\\". In the second example, there is no subsequence of the given array whose sum equals the target sum 7, so the answer is \\"NO\\".","solution":"def can_reach_target_sum(arr, target): n = len(arr) dp = [False] * (target + 1) dp[0] = True for num in arr: for j in range(target, num - 1, -1): if dp[j - num]: dp[j] = True return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"Given an array of N integers, find the maximum product of any three numbers in the array. Example 1: Input : arr[ ] = {1, 4, 3, -6, -7, 0} Output : 168 Explanation: Maximum product is 168 obtained from -6, -7, 4 Example 2: Input : arr[ ] = {1, 2, 3} Output : 6 Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function maxProductOfThree() that takes an array (arr), sizeOfArray (n), and returns the maximum product of any three numbers in the array. The driver code takes care of the printing. Expected Time Complexity: O(N log N). Expected Auxiliary Space: O(1). Constraints 3 ≤ N ≤ 10^5 -10^5 ≤ A[i] ≤ 10^5","solution":"def maxProductOfThree(arr, n): arr.sort() return max(arr[0] * arr[1] * arr[n-1], arr[n-1] * arr[n-2] * arr[n-3]) # Example usage: # arr = [1, 4, 3, -6, -7, 0] # n = len(arr) # print(maxProductOfThree(arr, n)) # Output: 168"},{"question":"You are given a list of intervals and a target interval. Your task is to determine if any interval in the list overlaps with the target interval. Two intervals [a, b] and [c, d] are considered overlapping if there exists some integer x such that a ≤ x ≤ b and c ≤ x ≤ d. -----Input:----- - The first line contains a single integer N denoting the number of intervals in the list. - The next N lines contain two integers each, denoting the start and end points of the intervals. - The final line contains two integers, denoting the start and end points of the target interval. -----Output:----- Print \\"Yes\\" if any interval in the list overlaps with the target interval, otherwise print \\"No\\". -----Constraints:----- - 1 leq N leq 10^5 - 1 leq Start and end points of all intervals leq 10^9 -----Sample Input:----- 5 1 5 10 14 3 7 9 11 12 16 8 13 -----Sample Output:----- Yes","solution":"def has_overlap(intervals, target): Determine if any interval in the list overlaps with the target interval. Args: intervals (List[Tuple[int, int]]): A list of tuples where each tuple represents an interval. target (Tuple[int, int]): A tuple representing the target interval. Returns: str: \\"Yes\\" if any interval overlaps with the target interval, otherwise \\"No\\". target_start, target_end = target for start, end in intervals: if start <= target_end and target_start <= end: return \\"Yes\\" return \\"No\\""},{"question":"Given a list of integers, your task is to find the smallest positive integer that is missing from the list. The list may contain both positive and negative integers, and it may not be sorted. The function should only consider positive integers and ignore the negative ones. Complete the `findMissingPositive` method which accepts a list of integers and returns the smallest positive integer that is not present in the list. **Examples:** ``` findMissingPositive([3, 4, -1, 1]) --> returns 2 findMissingPositive([1, 2, 0]) --> returns 3 findMissingPositive([7, 8, 9, 11, 12]) --> returns 1 ```","solution":"def findMissingPositive(nums): Returns the smallest positive integer that is missing from the list. num_set = set(num for num in nums if num > 0) smallest_missing = 1 while smallest_missing in num_set: smallest_missing += 1 return smallest_missing"},{"question":"A large e-commerce platform sends out orders to different warehouses based on the city from which an order is placed. Each city can have multiple warehouses, and each warehouse has a specified capacity of orders it can handle. Your job is to determine if it is possible to distribute the orders among the warehouses in such a way that no warehouse exceeds its capacity. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of warehouses. The next line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1000) — the capacities of the corresponding warehouses. The third line contains an integer m (1 ≤ m ≤ 1000) — the number of orders. -----Output----- Print \\"YES\\" if it is possible to distribute all the orders among the warehouses without exceeding their capacities, otherwise print \\"NO\\". -----Examples----- Input 3 5 8 2 10 Output YES Input 2 4 7 12 Output NO -----Note----- In the first example, it\'s possible to distribute 10 orders among warehouses with capacities 5, 8, and 2. For instance, 5 orders to the first warehouse and 5 orders to the second warehouse. In the second example, it\'s impossible to distribute 12 orders among warehouses with capacities 4 and 7 as their combined capacity is only 11.","solution":"def can_distribute_orders(n, capacities, m): Determines if all orders can be distributed among warehouses without exceeding their capacities. Parameters: n (int): Number of warehouses. capacities (list of int): List of the capacities of the warehouses. m (int): Number of orders. Returns: str: \\"YES\\" if it\'s possible to distribute the orders without exceeding capacities, otherwise \\"NO\\". # Sum of all capacities total_capacity = sum(capacities) # Checking if the total number of orders is within the total capacity if total_capacity >= m: return \\"YES\\" else: return \\"NO\\""},{"question":"Consider a series of online games where players earn points based on their performance. You are tasked with creating a system to track player points and determine the rank of each player after each game. The ranking should be determined by the total points each player has accumulated, with higher points corresponding to a better rank. If two players have the same total points, the player who achieved the total points earliest gets the better rank. # Task Write a program that simulates this ranking system. During the simulation, you should be able to: 1. Add points to a player. 2. Query the rank of a player at any given time. # Input The input consists of several lines: - The first line contains an integer `n` (1 ≤ n ≤ 100000) representing the number of players. - The second line contains an integer `m` (1 ≤ m ≤ 100000) representing the number of operations. - The next `m` lines contain operations in one of the following formats: - `ADD playerId points`: This operation adds `points` to the player with ID `playerId` (1 ≤ playerId ≤ n, 1 ≤ points ≤ 1000). - `QUERY playerId`: This operation outputs the current rank of the player with ID `playerId`. # Output For each `QUERY` operation, output the rank of the player with ID `playerId` as an integer on a new line. # Example Input: ``` 5 6 ADD 1 10 ADD 2 20 ADD 3 15 QUERY 1 ADD 1 15 QUERY 1 ``` Output: ``` 3 1 ``` # Explanation - After the first three `ADD` commands, the points are: `Player 1: 10`, `Player 2: 20`, `Player 3: 15`. - When querying Player 1\'s rank, they are 3rd because Player 2 has more points (20) and Player 3 has more points (15). - After adding 15 points to Player 1, the points are: `Player 1: 25`, `Player 2: 20`, `Player 3: 15`. - When querying Player 1\'s rank again, they are 1st because they now have the highest total points (25).","solution":"class RankingSystem: def __init__(self, n): self.n = n self.players_points = [0] * (n + 1) self.history = [] def add_points(self, player_id, points): self.players_points[player_id] += points self.history.append((player_id, self.players_points[player_id])) def query_rank(self, player_id): player_points = self.players_points[player_id] rank = 1 for i in range(1, self.n + 1): if i == player_id: continue if self.players_points[i] > player_points: rank += 1 elif self.players_points[i] == player_points: for p_id, p_points in self.history: if p_points == player_points and p_id == i: rank += 1 break if p_points == player_points and p_id == player_id: break return rank"},{"question":"Given an integer array arr, your task is to find all unique quadruplets [arr[a], arr[b], arr[c], arr[d]] such that: - 0 <= a, b, c, d < len(arr) - a, b, c, and d are distinct indices - arr[a] + arr[b] + arr[c] + arr[d] == target Return the list of all such unique quadruplets. Example: Input: arr = [1, 0, -1, 0, -2, 2], target = 0 Output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] Explanation: Arr and target give all combinations of 4 elements that sum to the target, avoiding duplicates. Note: 1. The solution set must not contain duplicate quadruplets. 2. The order of the quadruplets in the output does not matter. 3. 1 <= len(arr) <= 200, -10^9 <= arr[i] <= 10^9, -10^9 <= target <= 10^9.","solution":"def four_sum(arr, target): Returns all unique quadruplets [arr[a], arr[b], arr[c], arr[d]] such that 0 <= a, b, c, d < len(arr), and a, b, c, d are distinct indices, and arr[a] + arr[b] + arr[c] + arr[d] == target arr.sort() n = len(arr) quadruplets = [] for i in range(n-3): if i > 0 and arr[i] == arr[i-1]: continue for j in range(i+1, n-2): if j > i+1 and arr[j] == arr[j-1]: continue left, right = j+1, n-1 while left < right: total = arr[i] + arr[j] + arr[left] + arr[right] if total == target: quadruplets.append([arr[i], arr[j], arr[left], arr[right]]) while left < right and arr[left] == arr[left+1]: left += 1 while left < right and arr[right] == arr[right-1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return quadruplets"},{"question":"Given an array of integers `arr` of size `n`, the task is to find the maximum sum of any contiguous subarray of non-negative integers. If no such subarray exists, return 0. Example 1: Input: arr = [-1, 2, 3, -5, 4, 6] Output: 10 Explanation: The subarray with the maximum sum of non-negative integers is [4, 6] with sum 10. Example 2: Input: arr = [-5, -2, -3, -8] Output: 0 Explanation: There are no non-negative integers in the array, hence the maximum sum is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxNonNegativeSum()` which takes the array `arr` and the size `n` as input parameters and returns the maximum sum of any contiguous subarray of non-negative integers. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - 1 <= n <= 10^5 - -10^9 <= arr[i] <= 10^9","solution":"def maxNonNegativeSum(arr, n): Returns the maximum sum of any contiguous subarray of non-negative integers. If no such subarray exists, return 0. max_sum = 0 current_sum = 0 for i in range(n): if arr[i] >= 0: current_sum += arr[i] else: max_sum = max(max_sum, current_sum) current_sum = 0 # Final check in case the array ends with a positive subarray max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Alice loves numbers and she recently discovered a very interesting property about some special numbers. She calls a number \'Twisted Prime\' if reversing its digits also results in a prime number. Note that the reversed number must be different from the original number to be considered \'Twisted Prime\'. For example, 13 is a \'Twisted Prime\' because its reversed number 31 is also a prime. Alice wants to find all the \'Twisted Primes\' in a given range of numbers [L, R]. Write a program to help Alice find all such \'Twisted Primes\' in the given range. -----Input----- The first line contains two integers L and R (1 <= L <= R <= 10^5), representing the range in which Alice wants to find the \'Twisted Primes\'. -----Output----- Print all the \'Twisted Primes\' in the given range (L, R), each in a new line. If there are no \'Twisted Primes\' in the given range, print -1. -----Example----- Input 10 100 Output 13 17 31 37 71 73 79 97 Input 200 300 Output -1","solution":"def is_prime(n): Helper function to check if a number is a prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def twisted_primes(L, R): Returns a list of all \'Twisted Primes\' in the range [L, R]. twisted_primes_list = [] for number in range(L, R + 1): if is_prime(number): reversed_number = int(str(number)[::-1]) if reversed_number != number and is_prime(reversed_number): twisted_primes_list.append(number) return twisted_primes_list if twisted_primes_list else [-1]"},{"question":"In a distant galaxy, there is a planet called Algorithmia. The inhabitants of Algorithmia love to solve puzzles. They have a special binary puzzle game that they all play. The game involves a binary string and a set of operations. Given a binary string s of length n, you can perform the following operation as many times as you want: - Choose any non-empty substring of s and flip all its bits (change all 0s to 1s and all 1s to 0s). Your goal is to transform the string into a string of all 1s in the minimum number of operations. Write a program to determine the minimum number of operations required to transform the given binary string s into a string of all 1s. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the binary string. The second line contains a binary string s of length n. Output Print a single integer — the minimum number of operations required to transform the given binary string s into a string of all 1s. Example Input 5 11001 Output 1 Input 6 001100 Output 4 Note In the first example, you can choose the substring \\"1001\\" and flip it to get \\"11111\\". In the second example, you can perform the following operations to transform the string into all 1s: - Flip substring \\"00\\" (positions 1 to 2) to get \\"111100\\" - Flip substring \\"00\\" (positions 5 to 6) to get \\"111111\\" - Flip substring \\"10\\" (position 3) to get \\"111001\\" - Flip substring \\"01\\" (position 6) to get \\"111111\\" Thus, a total of 4 operations are needed.","solution":"def min_operations_to_all_ones(n, s): Given a binary string s of length n, return the minimum number of operations required to turn all characters to \'1\' by flipping non-empty substrings. # We need to count groups of consecutive 0s. count_zeros_groups = 0 in_zero_group = False for char in s: if char == \'0\': if not in_zero_group: count_zeros_groups += 1 in_zero_group = True else: in_zero_group = False return count_zeros_groups"},{"question":"You are given an array of integers where each integer represents the amount of money in a house. You are a professional robber planning to rob houses along a street. However, you cannot rob two adjacent houses because the police will be notified. Determine the maximum amount of money you can rob tonight without alerting the police. -----Input----- The first line contains a single integer n (1 le n le 100) — the number of houses. The second line contains n integers a_1, a_2, ..., a_n (0 le a_i le 1000) — the amount of money in each house. -----Output----- Print a single integer — the maximum amount of money you can rob. -----Example----- Input 6 2 7 9 3 1 4 Output 15 -----Note----- In the example given, the optimal solution is to rob the houses containing money amounts 2, 9, and 4, which totals 15. If you rob the first and second house (2 and 7), you cannot rob the third one (9). Similarly, if you rob the second house (7), you cannot rob the fourth one (3), and if you rob the third house (9), you cannot rob the fourth one (3) immediately after it.","solution":"def max_robbery(n, houses): if n == 0: return 0 if n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + houses[i]) return dp[n-1] # Demonstrating the function with an example n = 6 houses = [2, 7, 9, 3, 1, 4] print(max_robbery(n, houses)) # Output: 15"},{"question":"You are given an integer \'n\' representing the number of elements in an array arr[]. Your task is to find the maximum absolute difference between any two adjacent elements in the array after performing exactly one valid operation. A valid operation is defined as setting any element of the array to zero. If setting an element to zero does not change the maximum absolute difference, return the difference as is. Example 1: Input: arr[] = {2, 4, 8, 6, 10} Output: 10 Explanation: Setting arr[2] = 0 changes the array to {2, 4, 0, 6, 10}, making the maximum absolute difference between adjacent elements |6 - 0| = 10. Example 2: Input: arr[] = {1, 3, 7, 5} Output: 6 Explanation: Setting arr[0] = 0 changes the array to {0, 3, 7, 5}, making the maximum absolute difference between adjacent elements |7 - 0| = 7. Alternatively, setting arr[3] = 0 changes the array to {1, 3, 7, 0}, making the maximum absolute difference between adjacent elements |7 - 0| = 7. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function maxAbsDifference() that takes an array (arr), sizeOfArray (n), and returns the maximum absolute difference after performing the operation. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^9","solution":"def max_abs_difference(arr): Returns the maximum absolute difference between any two adjacent elements in the array after performing exactly one valid operation. A valid operation is defined as setting any element of the array to zero. max_difference = 0 for i in range(1, len(arr)): max_difference = max(max_difference, abs(arr[i] - arr[i-1])) possible_max_diff = max(abs(arr[0]), abs(arr[-1])) for i in range(1, len(arr) - 1): possible_max_diff = max(possible_max_diff, abs(arr[i+1] - 0), abs(arr[i-1] - 0)) return max(max_difference, possible_max_diff)"},{"question":"You are given an integer array `nums` consisting of `n` integers where the i-th integer has a value a[i] (1 le a[i] le 1000). You are also given an integer `T`. Your task is to determine if there exist two non-overlapping subarrays of `nums` (i.e., the two subarrays do not have any common elements) such that the sum of the two subarrays is equal to `T`. -----Input----- The first line contains two integers `n` and `T` (2 leq n leq 10^5, 1 leq T leq 10^9). The second line contains `n` integers of array `nums`. -----Output----- Print \\"YES\\" if it is possible to find such subarrays, otherwise print \\"NO\\". You can print each letter in any case (upper or lower). -----Examples----- Input 5 7 1 2 3 4 5 Output YES Input 3 10 3 2 7 Output NO Input 7 20 1 9 5 6 8 10 2 Output YES -----Note----- In the first example, a possible selection is the subarrays [1, 2, 4] and [3], both summing up to 7. In the second example, you cannot find two non-overlapping subarrays that sum up to 10. In the third example, you can choose [9, 5, 6] and [10, 2] to get a sum of 20.","solution":"def can_find_subarrays(nums, target): n = len(nums) prefix_sums = {0: [-1]} # prefix_sums maps sum to list of indices where this sum occurs current_sum = 0 for i in range(n): current_sum += nums[i] if current_sum - target in prefix_sums: for start_index in prefix_sums[current_sum - target]: if start_index < i: # non-overlapping condition return \\"YES\\" if current_sum not in prefix_sums: prefix_sums[current_sum] = [] prefix_sums[current_sum].append(i) return \\"NO\\""},{"question":"Write a function that takes a string as input and returns the most frequently occurring character. If there are multiple characters with the same highest frequency, return the alphabetically smallest character. The function should also handle cases where the input is not a string or is an empty string. # Input The input is a string, which may contain letters, digits, punctuations, and white spaces. If the input is not a string or is an empty string, the function should return an empty string. # Output The function should return the most frequently occurring character in the string. In case of a tie, the alphabetically smallest character should be returned. # Example ```python Input: most_frequent_char(\'test\') Output: \'t\' Input: most_frequent_char(\'aabbcc\') Output: \'a\' Input: most_frequent_char(\'abca\') Output: \'a\' Input: most_frequent_char([1, 2, 3]) Output: \'\' Input: most_frequent_char(\'\') Output: \'\' ```","solution":"def most_frequent_char(s): Returns the most frequently occurring character in the string. If there are multiple characters with the same highest frequency, returns the alphabetically smallest character. Returns an empty string if the input is not a string or is an empty string. if not isinstance(s, str) or not s: return \\"\\" char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 # Find the character with the highest frequency and smallest alphabetically in case of a tie max_char = \'\' max_count = 0 for char, count in char_count.items(): if count > max_count or (count == max_count and char < max_char): max_char = char max_count = count return max_char"},{"question":"Ravi loves arrays and solving problems related to them. One day he came across a unique problem. He was given two arrays A and B of equal size N. He needs to find the pairs of indices (i, j) such that A[i] + B[j] is equal to a given number X. Ravi started solving the problem, but it turned out to be a bit difficult for him. Can you help Ravi solve this? INPUT The first line of input contains an integer N, denoting the size of the arrays. The second line contains N space-separated integers, denoting the elements of array A. The third line contains N space-separated integers, denoting the elements of array B. The fourth line contains a single integer X, which is the target sum. OUTPUT Output the number of pairs (i, j) such that A[i] + B[j] = X. CONSTRAINTS 1 ≤ N ≤ 1000 1 ≤ A[i], B[j] ≤ 1000 1 ≤ X ≤ 2000 SAMPLE INPUT 4 1 2 3 4 5 1 2 1 6 SAMPLE OUTPUT 3 Explanation The valid pairs of indices (i, j) where A[i] + B[j] = 6 are: (0, 0) -> A[0] + B[0] = 1 + 5 = 6 (1, 1) -> A[1] + B[1] = 2 + 4 = 6 (3, 1) -> A[3] + B[1] = 4 + 2 = 6","solution":"def count_pairs_with_sum(N, A, B, X): Returns the number of pairs (i, j) such that A[i] + B[j] = X. Parameters: N (int): The size of arrays A and B. A (list of int): The first array. B (list of int): The second array. X (int): The target sum. Returns: int: The number of pairs that sum to X. count = 0 for i in range(N): for j in range(N): if A[i] + B[j] == X: count += 1 return count"},{"question":"Mrs. Watson loves gardening. She has a number of flower beds that she tends to every day. Each flower bed is arranged in a line and contains a specific number of flowers. She enjoys arranging the flower beds in different ways based on various criteria. Today, she wants to arrange flower beds such that the number of flowers in each bed follows a particular trend. Specifically, she wants to check if there is a non-decreasing and strictly increasing subsequence of a given length in the array of flower beds. You need to write a program to help Mrs. Watson. Given an array of integers representing the number of flowers in each bed and an integer k, determine if there exists a subsequence of length k that is strictly increasing. Input: - First line contains an integer n, the number of flower beds. - Second line contains n space-separated integers representing the number of flowers in each bed. - Third line contains an integer k, the desired length of the strictly increasing subsequence. Output: - Output \\"yes\\" if there exists a subsequence of length k that is strictly increasing, otherwise, output \\"no\\". Example: Input: 6 1 2 1 2 3 4 3 Output: yes Explanation: There are several possible increasing subsequences of length 3, for example: 1, 2, 3. Input: 5 5 4 3 2 1 2 Output: no Explanation: There is no subsequence of length 2 that is strictly increasing. Note: - All integers in the array will be between 1 and 10^4. - The value of k will be between 1 and n, inclusive. - The length n of the array will be between 1 and 10^5.","solution":"def strictly_increasing_subsequence(n, flower_beds, k): Returns \\"yes\\" if there exists a strictly increasing subsequence of length k, otherwise \\"no\\". Parameters: n (int): The number of flower beds. flower_beds (list of int): The number of flowers in each bed. k (int): The desired length of the strictly increasing subsequence. Returns: str: \\"yes\\" or \\"no\\" depending on whether the condition is met. if k > n: return \\"no\\" # Use dynamic programming to find the length of the longest increasing subsequence dp = [1] * n for i in range(1, n): for j in range(i): if flower_beds[i] > flower_beds[j]: dp[i] = max(dp[i], dp[j] + 1) max_length = max(dp) if max_length >= k: return \\"yes\\" else: return \\"no\\""},{"question":"Write a program that converts an input decimal number to its binary equivalent. Input An integer T, denoting the number of testcases, followed by T lines, each containing a single integer N. Output For each integer N given at input, output a single line containing the binary representation of N. Input Constraint 1 ≤ T ≤ 100 0 ≤ N ≤ 1000 SAMPLE INPUT 3 4 15 7 SAMPLE OUTPUT 100 1111 111","solution":"def decimal_to_binary(T, numbers): Converts each decimal number in the list `numbers` to its binary equivalent. Parameters: T (int): The number of test cases. numbers (list of int): List containing T decimal numbers. Returns: list of str: A list of binary strings representing each decimal number. return [bin(n)[2:] for n in numbers]"},{"question":"You are given a list of non-negative integers, representing the amount of money of each house on a street. You are a robber planning to rob houses along this street. However, you cannot rob two adjacent houses, as it will trigger the alarm system. Determine the maximum amount of money you can rob tonight without alerting the police. Example 1: Input: [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount robbed = 1 + 3 = 4. Example 2: Input: [2,7,9,3,1] Output: 12 Explanation: Rob house 1 (money = 2), then rob house 3 (money = 9), and then rob house 5 (money = 1). Total amount robbed = 2 + 9 + 1 = 12. Note: Your solution should handle inputs of various lengths, including edge cases where the list might be empty or contain only one house.","solution":"def rob(nums): Function to determine the maximum amount of money that can be robbed without robbing two adjacent houses. if not nums: return 0 n = len(nums) if n == 1: return nums[0] dp = [0] * n dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]) return dp[n - 1]"},{"question":"You are given an array of integers and a target sum. Determine if there are two distinct integers in the array whose sum is exactly equal to the target sum. If such a pair exists, print \\"YES\\". If no such pair exists, print \\"NO\\". Constraints * The array contains between 1 and 10^5 integers inclusive. * Each integer in the array is between -10^9 and 10^9 inclusive. * The target sum is an integer between -2 x 10^9 and 2 x 10^9 inclusive. Input Input is given from Standard Input in the following format: First line: The integer n, the number of elements in the array. Second line: The n integers, space-separated, which are the elements of the array. Third line: The integer target which is the target sum. Output Print \\"YES\\" if there exists two distinct integers in the array whose sum is exactly equal to the target sum. Otherwise, print \\"NO\\". Examples Input 5 1 2 3 4 5 9 Output \\"YES\\" Input 4 1 2 3 4 8 Output \\"NO\\"","solution":"def has_pair_with_sum(arr, target): Determines if there are two distinct integers in the array whose sum is exactly equal to the target sum. seen = set() for number in arr: if target - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"Chef is running a bakery and offers C different types of cakes, numbered from 1 to C. Each cake i has a maximum quantity of Q_i that can be baked in a day. Each cake also provides a profit of P_i per unit sold. Customers come to the bakery with specific preferences. A customer j has a favorite cake F_j and is willing to buy at most D_j units of any cake. If the favorite cake is not available or exceeds their demand, they are willing to buy any available cake up to their demand. Chef needs to decide how many units of each cake to bake to maximize the profit. Can you help Chef determine the optimal quantities for each type of cake to bake, so that the maximum profit is achieved? -----Input----- - The first line contains an integer T denoting the number of test cases. - For each test case, the first line contains an integer C (number of cake types). - The second line contains C space-separated integers Q_1, Q_2, ldots, Q_C (maximum quantities for each cake type). - The third line contains C space-separated integers P_1, P_2, ldots, P_C (profit per unit for each cake type). - The fourth line contains an integer N (number of customers). - Each of the next N lines contains two integers F_j and D_j, where F_j is the favorite cake type of the j-th customer, and D_j is the maximum units to buy. -----Output----- For each test case, output a single line containing C space-separated integers representing the number of units of each type of cake to bake to maximize the profit. -----Constraints----- - 1 le T le 100 - 1 le C le 1000 - 1 le Q_i le 10^5 for each valid i - 1 le P_i le 10^9 for each valid i - 1 le N le 1000 - 1 le F_j le 1000 - 1 le D_j le 10^5 -----Example Input----- 1 2 100 50 10 20 3 1 30 2 10 1 20 -----Example Output----- 30 30","solution":"def maximize_profit(T, cake_cases): results = [] for case in cake_cases: C = case[\'C\'] quantities = case[\'Q\'] profits = case[\'P\'] N = case[\'N\'] customers = case[\'customers\'] # Sort the cakes based on profit per unit cakes = sorted([(profits[i], quantities[i], i) for i in range(C)], reverse=True) # Initialize the number of cakes to bake bake = [0] * C # Demand tracking demand = [0] * C for fj, dj in customers: fj -= 1 demand[fj] += dj for profit, quantity, i in cakes: if demand[i] <= quantity: bake[i] = demand[i] else: bake[i] = quantity results.append(bake) return results # Helper function to parse input data into the needed format def parse_input(data): lines = data.split(\'n\') T = int(lines[0].strip()) index = 1 cake_cases = [] for _ in range(T): C = int(lines[index].strip()) index += 1 Q = list(map(int, lines[index].strip().split())) index += 1 P = list(map(int, lines[index].strip().split())) index += 1 N = int(lines[index].strip()) index += 1 customers = [] for _ in range(N): F_j, D_j = map(int, lines[index].strip().split()) customers.append((F_j, D_j)) index += 1 cake_cases.append({ \'C\': C, \'Q\': Q, \'P\': P, \'N\': N, \'customers\': customers }) return T, cake_cases # Given example input data = 1 2 100 50 10 20 3 1 30 2 10 1 20 T, cake_cases = parse_input(data) solution = maximize_profit(T, cake_cases) for result in solution: print(\\" \\".join(map(str, result)))"},{"question":"Consider a grid of size n x n, where each cell can either be empty (denoted by ‘.’) or contain an obstacle (denoted by ‘#’). You are given the coordinates of a starting point (sx, sy) and an endpoint (ex, ey). Your task is to determine if there exists a path from the starting point to the endpoint without passing through any obstacles, using only horizontal and vertical movements. ----- Input ----- The first line contains a single integer n (2 ≤ n ≤ 1000), the size of the grid. The next n lines each contain a string of n characters, representing the grid. Each character is either \'.\' or \'#\'. The (n+2)th line contains two integers, separated by a space, representing the coordinates of the starting point (sx, sy) (0 ≤ sx, sy < n). The (n+3)th line contains two integers, separated by a space, representing the coordinates of the endpoint (ex, ey) (0 ≤ ex, ey < n). ----- Output ----- Print \\"YES\\" if there exists a path from the starting point to the endpoint without passing through any obstacles, otherwise print \\"NO\\". ----- Examples ----- Input 5 ..... ..#.. ..... ..#.. ..... 0 0 4 4 Output YES Input 5 # # # # # 0 0 4 4 Output NO Input 3 .#. .#. ... 0 0 2 2 Output YES","solution":"from collections import deque def is_path_exists(n, grid, start_x, start_y, end_x, end_y): def is_valid(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == \'.\' directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False]*n for _ in range(n)] queue = deque([(start_x, start_y)]) visited[start_x][start_y] = True while queue: x, y = queue.popleft() if (x, y) == (end_x, end_y): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"Write a function that takes an integer array and a target sum. Determine if any two numbers within the array sum up to the target sum. Return `true` if two such numbers exist, and `false` otherwise. All input arrays will be non-empty and contain at least two integers. # Input - `arr`: List of integers. - `target_sum`: Integer representing the target sum value. # Output - A boolean value (`true` or `false`). # Examples ``` arr = [10, 15, 3, 7], target_sum = 17 Output: True Explanation: 10 + 7 = 17 arr = [1, 2, 3, 9], target_sum = 8 Output: False Explanation: No two numbers sum up to 8 arr = [-1, 11, 5, -6], target_sum = 4 Output: True Explanation: 11 + -6 = 4 arr = [3, 4, 5, 3], target_sum = 6 Output: True Explanation: 3 + 3 = 6 ```","solution":"def has_pair_with_sum(arr, target_sum): Determines if any two numbers within the array sum up to the target sum. Args: arr: List of integers. target_sum: Integer representing the target sum value. Returns: True if two such numbers exist, False otherwise. seen = set() for number in arr: if target_sum - number in seen: return True seen.add(number) return False"},{"question":"A company is building a system that allows employees to clock in and clock out using a badge. Each time an employee badges in or out, the system records the event with a timestamp. The company wants to calculate the total number of hours worked by each employee in a day. Each record is in the format: - The first line contains an integer `n`, the number of events. - The next `n` lines each contain a string `employee_id`, a string `event_type` (\\"clock_in\\" or \\"clock_out\\"), and an integer `timestamp` (in minutes since midnight). You can assume that events for a given employee always come in pairs (\\"clock_in\\" followed by \\"clock_out\\"), and that the events are ordered by `timestamp`. Your task is to compute the total number of minutes worked for each employee and return the results ordered by `employee_id`. -----Input----- The input consists of multiple lines: - The first line contains an integer `n` (the number of events). - Each of the next `n` lines contains a string `employee_id`, a string `event_type` (\\"clock_in\\" or \\"clock_out\\"), and an integer `timestamp`. -----Output----- Print the `employee_id` followed by the total minutes worked, for each employee. Output one employee per line, sorted by `employee_id`. -----Examples----- Sample Input: 6 emp1 clock_in 480 emp2 clock_in 540 emp1 clock_out 780 emp2 clock_out 600 emp1 clock_in 800 emp1 clock_out 960 Sample Output: emp1 460 emp2 60","solution":"def calculate_worked_hours(n, logs): from collections import defaultdict work_times = defaultdict(int) in_time = {} for log in logs: employee_id, event_type, timestamp = log if event_type == \\"clock_in\\": in_time[employee_id] = timestamp elif event_type == \\"clock_out\\": work_times[employee_id] += timestamp - in_time.pop(employee_id, 0) sorted_work_times = sorted(work_times.items()) return sorted_work_times"},{"question":"Given a string S consisting of lower case Latin characters and \'*\' characters, find the length of the longest substring which contains no \'*\' characters. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case is described with a single line containing a string S. ------ Output ------ For each test case, output a single line containing the length of the longest substring of S that contains no \'*\' characters. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 1000, where |S| is the length of the string S. ------ Sample Input 1 ------ 2 abc*defg*h hello*world ------ Sample Output 1 ------ 4 5 ----- explanation 1 ------ In the first test case, the longest substrings without \'*\' are \\"abc\\" and \\"defg\\", and their lengths are 3 and 4 respectively. Hence, the answer is 4. In the second test case, the longest substrings without \'*\' are \\"hello\\" and \\"world\\", both of length 5. Hence, the answer is 5.","solution":"def longest_substring_no_star(s): Given a string s, this function returns the length of the longest substring which contains no \'*\' characters. max_length = 0 current_length = 0 for char in s: if char == \'*\': if current_length > max_length: max_length = current_length current_length = 0 else: current_length += 1 # Final check in case the longest substring is at the end of the string return max(max_length, current_length) def process_test_cases(test_cases): results = [] for s in test_cases: results.append(longest_substring_no_star(s)) return results"},{"question":"A group of N friends is planning to attend a concert. Each friend has a certain amount of money they are willing to spend on a ticket, represented by an array arr[] where arr[i] denotes the money the i-th friend has. Additionally, the ticket seller offers M different ticket prices, represented by an array prices[]. Each friend will buy exactly one ticket whose price they can afford. Your task is to find the maximum number of friends that can attend the concert. Input: - The first line contains two integers N and M (1 ≤ N, M ≤ 1000) — the number of friends and the number of different ticket prices. - The second line contains N integers arr[1], arr[2], ..., arr[N] (1 ≤ arr[i] ≤ 10^6) — the money each friend has. - The third line contains M integers prices[1], prices[2], ..., prices[M] (1 ≤ prices[j] ≤ 10^6) — the different ticket prices available. Output: - Print one integer — the maximum number of friends that can attend the concert. Example Input 5 3 20 15 30 10 50 10 25 50 Output 3 Note In the given example: - Friend 1 can afford tickets priced at 10 and 25. - Friend 2 can afford tickets priced at 10. - Friend 3 can afford tickets priced at 10, 25, and 50. - Friend 4 can afford tickets priced at 10. - Friend 5 can afford tickets priced at 10, 25, and 50. The maximum number of friends that can attend the concert is three. One possible way to achieve this is: - Friend 1 buys a ticket priced at 10. - Friend 3 buys a ticket priced at 25. - Friend 5 buys a ticket priced at 50. Hence, the output is 3.","solution":"def max_friends_attend_concert(n, m, arr, prices): Finds the maximum number of friends that can attend the concert by purchasing tickets they can afford. n: int - Number of friends m: int - Number of different ticket prices arr: list of int - The amount of money each friend has prices: list of int - The different ticket prices available return: int - The maximum number of friends that can attend the concert arr.sort() prices.sort() i, j, count = 0, 0, 0 while i < n and j < m: if arr[i] >= prices[j]: count += 1 j += 1 i += 1 return count"},{"question":"Amy wants to create a special string for her friend. She has a set of characters and she needs to form the longest possible palindrome that can be made using these characters. A palindrome is a string that reads the same forwards and backwards, such as \\"level\\" or \\"madam\\". You are to help Amy by writing a program that finds the longest palindrome possible from the given set of characters. Input The input consists of two lines. The first line contains an integer n (1 ≤ n ≤ 100000) representing the number of characters in the set. The second line contains n lowercase characters, separated by a single space. Output Output a single line containing the longest palindrome that can be formed. If multiple palindromes of maximum length can be formed, output any one of them. If it is impossible to form any palindrome, output an empty string. Examples Input 5 a b c b a Output abcba Input 4 a b c d Output a Input 6 a a b b c c Output abccba Note In the first sample, the longest palindrome that can be formed is \\"abcba\\". In the second sample, it is impossible to form a palindrome longer than a single character. In the third sample, a palindrome \\"abccba\\" can be formed.","solution":"from collections import Counter def longest_palindrome(n, chars): Finds the longest palindrome that can be formed from the given characters. Parameters: n (int): Number of characters in the set. chars (list): A list of n lowercase characters. Returns: str: The longest palindrome string. counter = Counter(chars) left_part = [] middle_part = \'\' for char, count in counter.items(): if count % 2 == 0: left_part.extend([char] * (count // 2)) else: left_part.extend([char] * (count // 2)) if middle_part == \'\': middle_part = char # Only one odd-character will be in center left_part = \'\'.join(left_part) right_part = left_part[::-1] return left_part + middle_part + right_part # Example usage: # print(longest_palindrome(5, [\'a\', \'b\', \'c\', \'b\', \'a\'])) # Output: \\"abcba\\""},{"question":"Penny has an array of integers and she loves finding patterns in numbers. She defines a \\"nice\\" segment of the array as a contiguous subarray that contains at least one occurrence of every integer from 1 to M (where M can be up to 10). Penny enjoys finding the shortest \\"nice\\" segment in the array and needs your help to do it efficiently. Write a program to determine the length of the shortest \\"nice\\" segment for a given array. If no such segment exists, the result should be -1. ----Input----- - The first line contains a single integer T, the number of test cases. - The first line of each test case contains two integers N and M, representing the length of the array and the maximum integer to be included in a \\"nice\\" segment, respectively. - The second line of each test case contains N space-separated integers, the elements of the array. ----Output----- For each test case, print a single integer that represents the length of the shortest \\"nice\\" segment, or -1 if no such segment exists. ----Constraints---- 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ M ≤ 10 1 ≤ array elements ≤ M ----Example Input---- 3 5 2 1 2 1 2 1 8 3 3 1 2 1 3 2 2 1 4 2 1 1 1 1 ----Example Output---- 2 3 -1 ----Explanation---- Example case 1: The subarray [1, 2] is the shortest \\"nice\\" segment because it contains both 1 and 2. Example case 2: The subarray [3, 1, 2] is the shortest \\"nice\\" segment because it contains the integers 1, 2, and 3. Example case 3: There is no subarray containing both 1 and 2, so the result is -1.","solution":"def shortest_nice_segment(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] arr = test_cases[i][1] def has_all_elements(seg, M): return len(set(seg)) >= M min_length = float(\'inf\') found = False for start in range(N): for end in range(start + M - 1, N): # Minimum length required is M if has_all_elements(arr[start:end + 1], M): min_length = min(min_length, end - start + 1) found = True break # No need to expand further for this starting index if found: results.append(min_length) else: results.append(-1) return results # Example usage: # T = 3 # test_cases = [ # [(5, 2), [1, 2, 1, 2, 1]], # [(8, 3), [3, 1, 2, 1, 3, 2, 2, 1]], # [(4, 2), [1, 1, 1, 1]] # ] # print(shortest_nice_segment(T, test_cases)) # Output: [2, 3, -1]"},{"question":"You are given a list of N positive integers representing the values of N items. You need to divide these items into two groups in such a way that the absolute difference between the sums of the two groups is minimized. Write a program to find the minimum possible absolute difference between the sums of the two groups. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N. The second line contains N space-separated integers representing the values of the items. ------ Output ------ For each test case, print a single line containing one integer — the minimum possible absolute difference between the sums of the two groups. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 50 1 ≤ Value of items ≤ 10^{3} ------ Sample Input 1 ------ 3 4 1 6 11 5 3 1 2 3 5 10 20 30 40 50 ------ Sample Output 1 ------ 1 0 10 ------ Explanation 1 ------ Example case 1: The optimal partition is {1, 6, 5} and {11}, with sums 12 and 11, respectively. The difference is |12 - 11| = 1. Example case 2: The optimal partition is {1, 2} and {3}, with sums 3 and 3, respectively. The difference is |3 - 3| = 0. Example case 3: The optimal partition is {10, 20, 30} and {40, 50}, with sums 60 and 90, respectively. The difference is |60 - 90| = 30.","solution":"def minimum_absolute_difference(n, items): total_sum = sum(items) target = total_sum // 2 dp = [[False] * (target + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n+1): for j in range(target + 1): dp[i][j] = dp[i-1][j] if j >= items[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j - items[i-1]] for j in range(target, -1, -1): if dp[n][j]: return abs(total_sum - 2 * j) def solve(test_cases): results = [] for n, items in test_cases: results.append(minimum_absolute_difference(n, items)) return results"},{"question":"Given an array of integers `nums` and a target integer `X`, return the maximum integer in the array that is less than or equal to `X` but greater than or equal to `Y`, where `Y` is a non-negative integer passed as a parameter. If no such number exists, return -1. Example 1: Input: nums = [1, 3, 7, 8, 10], X = 9, Y = 2 Output: 8 Explanation: The integers in the array that are less than or equal to 9 and greater than or equal to 2 are [3, 7, 8]. The maximum among them is 8. Example 2: Input: nums = [5, 12, 14, 20], X = 15, Y = 10 Output: 14 Explanation: The integers in the array that are less than or equal to 15 and greater than or equal to 10 are [12, 14]. The maximum among them is 14. Example 3: Input: nums = [2, 4, 6, 8], X = 5, Y = 6 Output: -1 Explanation: There are no integers in the array that are less than or equal to 5 and greater than or equal to 6. Thus, the output is -1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findMaxInRange(nums, X, Y)` which takes an array of integers `nums`, an integer `X` and an integer `Y`, and returns the maximum integer in the specified range. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - 1 <= len(nums) <= 10^5 - 0 <= nums[i] <= 10^9 - 0 <= X <= 10^9 - 0 <= Y <= X","solution":"def findMaxInRange(nums, X, Y): Returns the maximum integer in the array that is less than or equal to X but greater than or equal to Y. If no such number exists, returns -1. max_num = -1 for num in nums: if Y <= num <= X: if num > max_num: max_num = num return max_num"},{"question":"Sarah loves playing word games and has recently started creating palindromes. A palindrome is a string that reads the same forward and backward. Given a string S, Sarah wants to know the minimum number of characters she needs to change to make the string a palindrome. Can you help Sarah figure out the minimum number of character changes required? ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - Each test case consists of a single line containing the string S. ------ Output Format ------ For each test case, output the minimum number of character changes required to make the string a palindrome. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ |S| ≤ 10^{4} S consists of lowercase English letters only. ----- Sample Input 1 ------ 4 ab abcd racecar abcba ----- Sample Output 1 ------ 1 2 0 0 ----- Explanation 1 ------ Test case 1: To make the string \\"ab\\" a palindrome, we can change either \'a\' to \'b\' or \'b\' to \'a\'. Thus, the minimum number of changes is 1. Test case 2: To make the string \\"abcd\\" a palindrome, we need to change both \'a\' and \'d\' to \'b\' and \'c\' respectively (or vice versa). Thus, the minimum number of changes is 2. Test case 3: The string \\"racecar\\" is already a palindrome. Thus, no changes are required. Test case 4: The string \\"abcba\\" is already a palindrome. Thus, no changes are required.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of character changes required to make the string s a palindrome. changes = 0 n = len(s) for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes def process_test_cases(T, test_cases): Given the number of test cases T and the test cases as a list of strings, returns a list of results for each test case. results = [] for test_case in test_cases: results.append(min_changes_to_palindrome(test_case)) return results"},{"question":"One day, you decide to challenge yourself by playing a card game. The game involves a deck of cards, where each card has a value that is a positive integer. The game is played in the following manner: 1. You start at the first card and move forward to subsequent cards one by one. 2. At each card, you have the option to either pick the card and add its value to your score or skip the card. 3. Once you pick a card, you must skip the next card (i.e., you can only pick non-adjacent cards). Your goal is to maximize your score by picking and skipping cards strategically. Write a program to determine the maximum score you can achieve from the given deck of cards. -----Constraints----- - 1 ≤ N ≤ 100,000 (number of cards) - 1 ≤ value_i ≤ 10,000 (value of each card) -----Input----- Input is given from Standard Input in the following format: ``` N value_1 value_2 value_3 ... value_N ``` -----Output----- Print the maximum score you can achieve. -----Sample Input----- 7 4 1 2 9 8 5 10 -----Sample Output----- 24 -----Explanation----- You can achieve the maximum score of 24 by picking the cards with values 4, 9, and 10. Specifically: - Pick the card with value 4 (skip the next card with value 1). - Pick the card with value 9 (skip the next card with value 8). - Pick the card with value 10 (end of cards). Thus, the total score is 4 + 9 + 10 = 23. The answer 24 is based on correctly summing up the maximum possible combination of non-adjacent card values.","solution":"def max_score(cards): N = len(cards) if N == 0: return 0 if N == 1: return cards[0] dp = [0] * N dp[0] = cards[0] if N > 1: dp[1] = max(cards[0], cards[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + cards[i]) return dp[-1] def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) cards = list(map(int, data[1:])) print(max_score(cards)) if __name__ == \\"__main__\\": main()"},{"question":"Alex is a software developer at a tech company. One of his tasks involves logging various system logs, which primarily consist of timestamps. To make the analysis easier, he needs to merge and sort these logs. Given two separate lists of timestamps that are sorted in non-decreasing order, your task is to merge these lists into a single sorted list while maintaining the sorted order. Write a function that takes the two lists of timestamps as input and returns a single list that contains all the timestamps in non-decreasing order. Input First line contains an integer T, the number of test cases. Each test case consists of three lines: - The first line of each test case contains two integers N and M, the lengths of the two lists. - The second line contains N integers representing the first list of timestamps. - The third line contains M integers representing the second list of timestamps. Output For each test case, output a single line containing the merged and sorted list of timestamps. Constraints: 1 ≤ T ≤ 10 0 ≤ N, M ≤ 10^5 1 ≤ timestamp ≤ 10^9 SAMPLE INPUT 2 3 4 1 3 5 2 4 6 8 5 3 10 12 13 14 18 7 9 15 SAMPLE OUTPUT 1 2 3 4 5 6 8 7 9 10 12 13 14 15 18","solution":"def merge_sorted_lists(t, cases): results = [] for case in cases: n, m = case[0] list1 = case[1] list2 = case[2] merged_list = [] i, j = 0, 0 # Merge the two lists while maintaining the sorted order while i < n and j < m: if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 while i < n: merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2 while j < m: merged_list.append(list2[j]) j += 1 results.append(merged_list) return results"},{"question":"Danny loves encryption, and he recently learned about a special way of rearranging the letters of words to keep them secret. However, Danny noticed that rearranging can lead to some words having repeated rearrangements, which makes it harder for Danny to recognize if the original word has been processed before. Given a string `s` of lowercase English letters, your task is to write a function that calculates the number of unique rearrangements of the string that result in a different sequence of letters. Let\'s consider two rearrangements different if and only if their resulting sequences differ. -----Input----- The first line of the input contains an integer `n` (1 ≤ n ≤ 1000) — the length of the string `s`. The second line contains the string `s` of length `n` consisting of lowercase English letters. -----Output----- Print a single integer: the number of unique rearrangements of the string `s`. -----Examples----- Input 3 abc Output 6 Input 4 aabb Output 6 Input 5 apple Output 60 -----Note----- In the first example, there are 3 factorial (3!) possible rearrangements, which is 3 * 2 * 1 = 6. In the second example, there are 4 factorial (4!) possible rearrangements, divided by the factorial of the frequency of each letter repeated, so the number of unique rearrangements is 4! / (2! * 2!) = 24 / 4 = 6. In the third example, there are 5 factorial (5!) possible rearrangements. Since each letter is unique, the number of unique rearrangements is simply 5! = 120.","solution":"from math import factorial from collections import Counter def unique_rearrangements(s): Returns the number of unique rearrangements of the string s. n = len(s) char_count = Counter(s) numerator = factorial(n) denominator = 1 for count in char_count.values(): denominator *= factorial(count) return numerator // denominator"},{"question":"Implement a function that evaluates the RPN (Reverse Polish Notation) expression. RPN is a mathematical notation in which operators follow their operands. For example, to add three and four, one would write: `3 4 +` rather than `3 + 4`. The RPN expression is provided as an array of strings, each representing either an operand or an operator. Valid operators are `+`, `-`, `*`, and `/`. Each operand can be assumed to be an integer. Complete the function that computes the result of the RPN expression. Example 1. Input: `[\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"]` * Calculation: ((2 + 1) * 3) = 9 * Output: 9 2. Input: `[\\"4\\", \\"13\\", \\"5\\", \\"/\\", \\"+\\"]` * Calculation: (4 + (13 / 5)) = 6 * Output: 6 3. Input: `[\\"10\\", \\"6\\", \\"9\\", \\"3\\", \\"+\\", \\"-11\\", \\"*\\", \\"/\\", \\"*\\", \\"17\\", \\"+\\", \\"5\\", \\"+\\"]` * Calculation: 10 * (6 / ((9 + 3) * -11)) + 17 + 5 = 22 * Output: 22 Note * Division between two integers should truncate toward zero. * You may assume that the given RPN expression is always valid.","solution":"def evalRPN(tokens): Evaluates a given RPN (Reverse Polish Notation) expression and returns the result. :param tokens: List of strings representing the RPN expression :return: Integer result of the RPN expression stack = [] for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': # Ensure integer division truncates towards zero (Python 3\'s // operator with int cast) result = int(a / b) stack.append(result) else: stack.append(int(token)) return stack[0] # Example usage: # print(evalRPN([\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"])) # Output should be 9"},{"question":"A company requires employees to log their work hours using a special system. Each work log entry contains the start and end times of work in a day. An employee can have multiple entries for a single day if they logged in and out multiple times. Your task is to write a program that calculates the total number of hours worked by an employee in a given month from the log entries. Assume the logs are in 24-hour format and the times are rounded to the nearest hour. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of log entries. The next n lines each contain a log entry in the format \\"YYYY-MM-DD HH:MM-HH:MM\\", where \\"YYYY-MM-DD\\" is the date, \\"HH:MM\\" is the start time and second \\"HH:MM\\" is the end time. -----Output----- Output a single line containing the total number of hours worked in the month. -----Examples----- Input 5 2023-09-01 09:00-17:00 2023-09-01 18:00-20:00 2023-09-02 10:00-12:00 2023-09-03 13:00-15:00 2023-09-03 16:00-18:00 Output 12 Input 3 2023-10-15 14:00-16:00 2023-10-15 09:00-12:00 2023-10-15 18:00-22:00 Output 9 -----Note----- In the first example, the logs for 2023-09-01 add up to 10 hours (9:00 to 17:00 is 8 hours, and 18:00 to 20:00 is 2 hours). For 2023-09-02, the work log is 2 hours (10:00 to 12:00). For 2023-09-03, the logs add up to 4 hours (13:00 to 15:00 is 2 hours, and 16:00 to 18:00 is another 2 hours). So, the total is 12 hours. In the second example, the logs for 2023-10-15 add up to 9 hours (14:00 to 16:00 is 2 hours, 09:00 to 12:00 is 3 hours, and 18:00 to 22:00 is 4 hours), making a total of 9 hours.","solution":"def total_hours_worked(log_entries): from datetime import datetime total_hours = 0 for entry in log_entries: date, times = entry.split() start_time, end_time = times.split(\'-\') start_dt = datetime.strptime(f\\"{date} {start_time}\\", \\"%Y-%m-%d %H:%M\\") end_dt = datetime.strptime(f\\"{date} {end_time}\\", \\"%Y-%m-%d %H:%M\\") duration = end_dt - start_dt hours = duration.seconds // 3600 total_hours += hours return total_hours"},{"question":"Design a class named `Stack` that simulates a basic stack data structure. The stack should have the following methods: 1. **push(element)**: Adds an element to the top of the stack. 2. **pop()**: Removes the top element from the stack and returns it. If the stack is empty, it should return \\"Stack is empty\\". 3. **peek()**: Returns the top element of the stack without removing it. If the stack is empty, it should return \\"Stack is empty\\". 4. **is_empty()**: Returns `True` if the stack is empty, otherwise returns `False`. 5. **size()**: Returns the number of elements in the stack. Your implementation should not use any built-in Python data structures or collections directly for the main stack operations. Example ```python s = Stack() s.push(5) s.push(10) print(s.pop()) # should print 10 print(s.peek()) # should print 5 print(s.is_empty()) # should print False print(s.size()) # should print 1 ```","solution":"class Stack: def __init__(self): Initializes an empty stack. self.stack = [] def push(self, element): Adds an element to the top of the stack. self.stack.append(element) def pop(self): Removes the top element from the stack and returns it. If the stack is empty, returns \\"Stack is empty\\". if self.is_empty(): return \\"Stack is empty\\" return self.stack.pop() def peek(self): Returns the top element of the stack without removing it. If the stack is empty, returns \\"Stack is empty\\". if self.is_empty(): return \\"Stack is empty\\" return self.stack[-1] def is_empty(self): Returns True if the stack is empty, otherwise returns False. return len(self.stack) == 0 def size(self): Returns the number of elements in the stack. return len(self.stack)"},{"question":"Peter loves to play with sequences of numbers. He finds an interesting sequence game where he needs to find the k-th smallest element in the merged list of two sorted lists without actually merging them. Given two sorted lists `A` and `B`, and an integer `k`, help Peter find the k-th smallest element in the combined sequence of both lists. -----Input----- The input consists of three lines: - The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the first list. - The second line contains n space-separated integers representing the sorted list A. - The third line contains an integer m (1 ≤ m ≤ 10^5), the length of the second list. - The fourth line contains m space-separated integers representing the sorted list B. - The fifth line contains a single integer k (1 ≤ k ≤ n + m), the position of the element to find. -----Output----- Output the k-th smallest element in the merged sorted list of A and B. -----Examples----- Input 4 2 3 6 7 3 1 5 8 5 Output 6 Input 3 1 3 7 4 2 4 6 8 3 Output 3 -----Note----- The provided lists A and B are already sorted in non-decreasing order. The solution should be efficient enough to handle large inputs, taking into account the constraint size. Explanation for Example 1: The merged list of [2, 3, 6, 7] and [1, 5, 8] is [1, 2, 3, 5, 6, 7, 8]. The 5th smallest element in this merged list is 6.","solution":"def find_kth_element(A, B, k): This function finds the k-th smallest element in the combined sorted list created from A and B. def kth_smallest(a, b, k): len_a, len_b = len(a), len(b) if len_a > len_b: return kth_smallest(b, a, k) if len_a == 0: return b[k-1] if k == 1: return min(a[0], b[0]) # Set pointers in a and b i = min(len_a, k // 2) j = min(len_b, k // 2) if a[i-1] > b[j-1]: return kth_smallest(a, b[j:], k-j) else: return kth_smallest(a[i:], b, k-i) return kth_smallest(A, B, k)"},{"question":"You are given a list of integers. You need to determine for each integer whether it is a prime number or not. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. If a number is prime, print \\"Prime\\"; otherwise, print \\"Not Prime\\". -----Constraints----- - The input list contains between 1 and 100 integers. - Each integer in the input list is between 1 and 1000. -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ... a_N The first line contains a single integer, N, the number of integers in the list. The second line contains N integers separated by spaces. -----Output----- For each integer in the input list, print either \\"Prime\\" or \\"Not Prime\\" on a new line. -----Sample Input----- 5 2 4 5 9 13 -----Sample Output----- Prime Not Prime Prime Not Prime Prime","solution":"def is_prime(n): Returns True if n is a prime number, otherwise returns False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False sq_root = int(n**0.5) + 1 for i in range(3, sq_root, 2): if n % i == 0: return False return True def check_primes(numbers): For each number in \'numbers\' list, determine if it is prime, and return a list of strings \\"Prime\\" or \\"Not Prime\\". results = [] for number in numbers: if is_prime(number): results.append(\\"Prime\\") else: results.append(\\"Not Prime\\") return results"},{"question":"In a certain amusement park, there are several games that children can play. Each game is represented by a node in a graph, and there is a path between every two games represented by an edge. The park managers want to group the games in such a way that each group forms a clique (i.e. each game in a group has paths to every other game in the group). Given the number of games (nodes) N and the list of paths (edges) between them, determine the minimum number of cliques required such that each game is in exactly one clique. Constraints * 1 leq N leq 100 * 0 leq M leq frac{N(N-1)}{2} * 1 leq u_i, v_i leq N (1-based indexing) * u_i neq v_i Input The input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M N: number of nodes (games) M: number of edges (paths between games) u_i, v_i: nodes representing a path between the two games Output Print the minimum number of cliques needed. Examples Input 4 6 1 2 1 3 1 4 2 3 2 4 3 4 Output 1 Input 5 4 1 2 2 3 3 4 4 5 Output 3 Input 6 6 1 2 2 3 3 1 4 5 5 6 6 4 Output 2","solution":"def min_cliques(N, edges): from collections import defaultdict # Create adjacency list adj_list = defaultdict(set) for u, v in edges: adj_list[u].add(v) adj_list[v].add(u) cliques = [] unvisited = set(range(1, N + 1)) while unvisited: node = unvisited.pop() clique = {node} neighbors = adj_list[node].intersection(unvisited) for neighbor in neighbors: if all(neighbor in adj_list[other] for other in clique): clique.add(neighbor) cliques.append(clique) unvisited -= clique return len(cliques)"},{"question":"Given an array of integers, the task is to determine the length of the longest subarray with continuous elements. Example 1: Input: arr = [10, 12, 11] Output: 3 Explanation: The longest subarray with continuous elements is [10, 12, 11]. Example 2: Input: arr = [14, 12, 11, 20] Output: 2 Explanation: The longest subarray with continuous elements is [12, 11]. Your Task: You don\'t need to read or print anything. Your task is to complete the function findLongestSubarray() which takes the array of integers arr[] and returns the length of the longest subarray with continuous elements. Expected Time Complexity: O(N^2) Expected Space Complexity: O(1) Constraints: 1 ≤ N ≤ 10^3 1 ≤ arr[i] ≤ 10^5","solution":"def findLongestSubarray(arr): n = len(arr) if n == 0: return 0 longest = 1 for i in range(n - 1): min_val = max_val = arr[i] for j in range(i + 1, n): min_val = min(min_val, arr[j]) max_val = max(max_val, arr[j]) if (max_val - min_val) == (j - i): longest = max(longest, j - i + 1) return longest"},{"question":"Given a two-dimensional array filled with integers, your task is to find a submatrix with the maximum possible sum of its elements. The submatrix can be of any size greater than or equal to 1x1. The function should return the maximum sum found. Function Description Complete the `maxSumSubmatrix` function in the editor below. It should return an integer representing the maximum sum of any submatrix in the given matrix. `maxSumSubmatrix` has the following parameter(s): - `int matrix[R][C]`: the two-dimensional array containing the integers Input Format The first line contains two space-separated integers R and C, the dimensions of the matrix. Each of the next R lines contains C space-separated integers representing the elements of the matrix. Output Format Return an integer, the maximum sum of any submatrix within the input matrix. Constraints 1 leq R, C leq 1000 -10000 leq text{matrix}[i][j] leq 10000 for 0 leq i < R and 0 leq j < C Sample Input 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 Sample Output 29 Explanation The submatrix with the maximum sum is: 3 8 10 -4 -1 1 The sum of these elements is 3 + 8 + 10 + (-4) + (-1) + 1 = 29. The function should find and return this maximum sum of any submatrix.","solution":"def maxSumSubmatrix(matrix): R = len(matrix) C = len(matrix[0]) if R > 0 else 0 if R == 0 or C == 0: return 0 max_sum = float(\'-inf\') for left in range(C): temp = [0] * R for right in range(left, C): for i in range(R): temp[i] += matrix[i][right] current_max = kadane(temp) max_sum = max(max_sum, current_max) return max_sum def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are a computer scientist specializing in geometric computations. One day, you encounter an interesting problem related to finding the convex hull of a set of points. The convex hull of a set of points is the smallest convex polygon that can enclose all the points. # Problem Statement You are given a set of points in a 2D plane. Your task is to write a program that computes the vertices of the convex hull for these points in clockwise order, starting from the vertex with the smallest x-coordinate. If there are multiple points with the same smallest x-coordinate, start from the one with the smallest y-coordinate. # Input The input consists of the following format: n x_1 y_1 . . . x_n y_n n is the number of points (3 le n le 1000). Each of the following n lines contains two integers x_i and y_i, which are the coordinates of the i-th point. The coordinates are between -10,000 and 10,000, inclusive. There may be duplicate points in the input. # Output Output the vertices of the convex hull in clockwise order, starting from the vertex with the smallest x-coordinate. Each vertex should be printed on a new line in the format \\"x_i y_i\\", where x_i and y_i are the coordinates of the vertex. # Example Input 8 0 3 1 1 2 2 4 4 0 0 1 2 3 1 3 3 Output 0 0 3 1 4 4 0 3 # Notes 1. The convex hull is a subset of the original points. 2. The duplicate points should be handled appropriately to ensure that the convex hull is valid. 3. Precision errors are not a concern as all operations involve integer coordinates only. # Constraints - The input will always contain at least three non-collinear points. - The output should list each vertex of the convex hull exactly once.","solution":"def convex_hull(points): Computes the vertices of the convex hull of a set of 2D points. :param points: List of points [(x1, y1), (x2, y2), ..., (xn, yn)] :return: List of vertices on the convex hull in clockwise order. # Remove duplicate points points = list(set(points)) # Sort points by x, then by y points.sort() def cross(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) # Build the lower hull lower = [] for p in points: while len(lower) >= 2 and cross(lower[-2], lower[-1], p) <= 0: lower.pop() lower.append(p) # Build the upper hull upper = [] for p in reversed(points): while len(upper) >= 2 and cross(upper[-2], upper[-1], p) <= 0: upper.pop() upper.append(p) # Concatenate lower and upper hull to get the full convex hull # The last point of each half is omitted because it\'s repeated at the beginning of the other half convex_hull = lower[:-1] + upper[:-1] return convex_hull"},{"question":"You are given a string consisting of lowercase and uppercase alphabetic characters. Your task is to return a new string where each character in the original string is replaced by the character 2 positions ahead in the alphabet. **Notes:** * The operation should be case-sensitive; uppercase characters should remain uppercase and lowercase characters should remain lowercase. * The alphabet wraps around, so \'y\' becomes \'a\', \'z\' becomes \'b\', \'Y\' becomes \'A\', and \'Z\' becomes \'B\'. * If the input string is empty, return an empty string. * Random tests: maximum string length is 1000. **Examples** ``` Input: \\"abcXYZ\\" Output: \\"cdeZAB\\" ``` ``` Input: \\"helloWorld123\\" Output: \\"jgnnqYqtnf123\\" ```","solution":"def shift_characters(s): Returns a new string where each character in the original string is replaced by the character 2 positions ahead in the alphabet. Non-alphabetic characters remain unchanged. The operation is case-sensitive. def shift_char(c): if \'a\' <= c <= \'z\': return chr(((ord(c) - ord(\'a\') + 2) % 26) + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr(((ord(c) - ord(\'A\') + 2) % 26) + ord(\'A\')) else: return c return \'\'.join(shift_char(c) for c in s)"},{"question":"# Convert Roman to Integer Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, the Roman numeral \\"III\\" is 3, \\"IV\\" is 4, \\"IX\\" is 9, \\"LVIII\\" is 58, and \\"MCMXCIV\\" is 1994. Given a Roman numeral, convert it to an integer. Example 1: Input: s = \\"III\\" Output: 3 Example 2: Input: s = \\"IX\\" Output: 9 Example 3: Input: s = \\"MCMXCIV\\" Output: 1994 Your Task: You don\'t need to read or print anything. Your task is to complete the function romanToInt() which takes a string s as input parameter and returns its integer representation. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= s.length <= 15 s contains only the characters (\'I\', \'V\', \'X\', \'L\', \'C\', \'D\', \'M\'). It is guaranteed that s is a valid Roman numeral in the range [1, 3999].","solution":"def romanToInt(s): Convert Roman numeral to integer. :param s: str : Roman numeral string :return: int : Equivalent integer value roman_to_int = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in s[::-1]: current_value = roman_to_int[char] if current_value >= prev_value: total += current_value else: total -= current_value prev_value = current_value return total"},{"question":"A certain chatbot language utilizes sequences of characters to issue commands. You need to write a program that translates sequences of characters into specific actions described below. Each sequence consists of uppercase alphabetic characters and has a length of no more than 100 characters. # Commands 1. The letter \'A\' translates to the command \\"Move Forward\\". 2. The letter \'B\' translates to \\"Turn Left\\". 3. The letter \'C\' translates to \\"Turn Right\\". 4. Sequences enclosed in parentheses \\"(...)\\" are to be repeated twice. # Input * A single line containing a sequence of uppercase alphabetic characters following the rules mentioned. There will be no nested parentheses. # Output * A list of the decoded commands, each on a new line. # Examples Example 1: **Input:** ``` A(B) ``` **Output:** ``` Move Forward Turn Left Turn Left ``` Example 2: **Input:** ``` BC(C)A ``` **Output:** ``` Turn Left Turn Right Turn Right Turn Right Move Forward ``` Example 3: **Input:** ``` A(CAB)BA ``` **Output:** ``` Move Forward Turn Right Move Forward Turn Left Move Forward Turn Left Move Forward Turn Right Move Forward Turn Left Turn Right Turn Left Turn Left Move Forward ```","solution":"def translate_commands(sequence): Translates a sequence of characters into respective commands. Each character corresponds to a specific command. Sequences within parentheses are repeated twice. Commands: \'A\' -> \'Move Forward\' \'B\' -> \'Turn Left\' \'C\' -> \'Turn Right\' Args: sequence (str): The sequence of commands Returns: list: List of commands as translated strings. command_mapping = { \'A\': \'Move Forward\', \'B\': \'Turn Left\', \'C\': \'Turn Right\' } result = [] i = 0 while i < len(sequence): if sequence[i] in command_mapping: result.append(command_mapping[sequence[i]]) elif sequence[i] == \'(\': end_idx = sequence.find(\')\', i) sub_sequence = sequence[i+1:end_idx] * 2 for char in sub_sequence: result.append(command_mapping[char]) i = end_idx i += 1 return result"},{"question":"Alyssa is working on a system that processes data from a network of sensors. Each sensor sends regular updates to a central server, where the data is stored as a sequence of events. Alyssa wants to find the longest consecutive sequence of increasing readings from any one sensor. An event is represented by three integers: t (the time of the event), s (the sensor ID), and v (the reading value). Your task is to help Alyssa find the longest sequence of consecutive events where the readings from a single sensor are strictly increasing. You may assume that a sensor sends at most one event per time unit, and events are provided in time-sorted order. -----Input----- The first line contains one integer n (1 leq n leq 10^5) — the number of events. Each of the following n lines contains three integers t, s, and v (1 leq t leq 10^9, 1 leq s leq 10^5, 1 leq v leq 10^9). The events are given in non-decreasing order of time t. -----Output----- Output a single integer — the length of the longest sequence of consecutive increasing readings for any sensor. -----Examples----- Input 7 1 1 10 2 1 12 3 1 15 4 2 5 5 1 9 6 1 11 7 1 13 Output 3 Input 3 1 2 7 2 2 8 3 2 9 Output 3 -----Note----- In the first example, the sequence of readings from sensor 1 at times 1, 2, and 3 form an increasing sequence of length 3. Although sensor 1 has two more readings at times 5 and 6 that are increasing, they do not extend the previous sequence because they are consecutive only in terms of time but not in the sequence of increasing readings. In the second example, sensor 2 has readings 7, 8, and 9 at consecutive times, forming an increasing sequence of length 3.","solution":"def longest_increasing_sequence(n, events): sensor_data = {} longest_sequence = 0 for t, s, v in events: if s not in sensor_data: sensor_data[s] = (v, 1) # (prev_value, current_sequence_length) else: prev_value, current_length = sensor_data[s] if v > prev_value: current_length += 1 else: current_length = 1 sensor_data[s] = (v, current_length) longest_sequence = max(longest_sequence, sensor_data[s][1]) return longest_sequence"},{"question":"In a small village, there is an ancient clock tower with a peculiar alarm system. The alarm sounds based on the configuration of the digits of the current minute displayed on the clock. The villagers have noticed that whenever the clock displays a minute that contains exactly two consecutive digits that are the same, it triggers the alarm. For example, the alarm sounds at 11, 22, 33, and so forth, but not at 21, 32, or 45. To help the villagers predict when the alarm will sound, write a program that counts how many times the alarm will sound in a given hour. The hour is provided as a two-digit number ranging from 00 to 23 (representing time in a 24-hour format). Minutes range from 00 to 59. Input The input consists of a single line containing a two-digit integer h (00 ≤ h ≤ 23) denoting the hour. Output Print a single integer denoting the number of minutes in the given hour where the alarm will sound. Example Input 12 Output 14 Input 03 Output 11 Input 19 Output 10 Explanation In the first example, for hour 12, the alarm will sound at minutes 00, 01, 02, ..., 59, totaling 14 alarm sounds.","solution":"def count_alarm_minutes(hour): Counts how many minutes in the given hour the alarm will sound. The alarm sounds when the displayed minute contains exactly two consecutive digits that are the same. Args: hour (str): The hour in two-digit format (00 to 23). Returns: int: Number of minutes the alarm will sound in the given hour. count = 0 for minute in range(60): minute_str = f\\"{minute:02}\\" if minute_str[0] == minute_str[1]: count += 1 return count"},{"question":"In a 2D grid of size M x N, you are given a starting position (X, Y) and a series of moves represented as a string consisting of characters \'L\' (left), \'R\' (right), \'U\' (up), and \'D\' (down). The grid coordinates are zero-indexed, with (0, 0) being the top-left corner. Implement a function to determine the final position after executing all the moves in the string. If a move causes the position to go out of the grid boundaries, that move should be ignored. Input Format: The first line contains two integers M and N, the number of rows and columns of the grid. The second line contains two integers X and Y, the starting coordinates of the initial position. The third line contains a string consisting of characters \'L\', \'R\', \'U\', and \'D\' representing the sequence of moves. Output Format: Print the final coordinates as two space-separated integers. Constraints: 1 <= M, N <= 10^6 0 <= X < M 0 <= Y < N 1 <= length of move string <= 10^5 Sample input: 5 5 1 2 LRRUDD Sample output: 2 3","solution":"def final_position(m, n, x, y, moves): for move in moves: if move == \'L\' and y > 0: y -= 1 elif move == \'R\' and y < n - 1: y += 1 elif move == \'U\' and x > 0: x -= 1 elif move == \'D\' and x < m - 1: x += 1 return x, y"},{"question":"Design a function named `optimize_route` that takes in a list of points representing locations on a 2D plane and returns the optimal path for visiting all points exactly once and returning to the starting point, employing a naive approach algorithm. # Input A list of tuples, where each tuple contains two integers representing the x and y coordinates of a point on the 2D plane. The list will contain at most 10 points. ```python def optimize_route(points: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ``` # Output A list of tuples representing the points in the order they should be visited, starting and ending at the first point in the input list. # Constraints - The number of input points will be between 2 and 10. - No two points will have the same coordinates. # Example ```python assert optimize_route([(0, 0), (1, 1), (1, 0), (0, 1)]) == [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0)] ``` # Explanation Given the points `[(0, 0), (1, 1), (1, 0), (0, 1)]`, the function calculates the route that visits all points exactly once and returns to the starting point. Several routes can be chosen, but the naive approach aims to reduce the total distance traveled. The returned route is one possible optimal solution and is dependent on the algorithm used. # Note Since the input size is at most 10 points, a brute force or a naive approach (such as the nearest neighbor algorithm) is acceptable for simplicity.","solution":"from typing import List, Tuple from itertools import permutations def euclidean_distance(point1: Tuple[int, int], point2: Tuple[int, int]) -> float: Returns the Euclidean distance between two points in 2D plane. return ((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) ** 0.5 def total_route_distance(route: List[Tuple[int, int]]) -> float: Returns the total distance of the given route, including returning to the start point. distance = 0.0 for i in range(len(route) - 1): distance += euclidean_distance(route[i], route[i + 1]) distance += euclidean_distance(route[-1], route[0]) # Returning to start point return distance def optimize_route(points: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Returns the optimal path for visiting all points exactly once and returning to the starting point. best_route = None min_distance = float(\'inf\') # Generate all possible permutations of points (excluding the first point as start) start_point = points[0] remaining_points = points[1:] for perm in permutations(remaining_points): current_route = [start_point] + list(perm) current_distance = total_route_distance(current_route) if current_distance < min_distance: min_distance = current_distance best_route = current_route # Add the starting point at the end to complete the loop best_route.append(start_point) return best_route"},{"question":"You are given a sequence of parentheses. A valid sequence of parentheses is one that matches the following criteria: every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are appropriately nested. Your task is to determine the minimum number of parentheses to remove to make the sequence valid. -----Input----- The input consists of a single string `s` (1 ≤ |s| ≤ 10^5) containing only the characters \'(\' and \')\'. -----Output----- Output a single integer representing the minimum number of parentheses that need to be removed to make the sequence valid. -----Examples----- Sample Input: ()))(( Sample Output: 2 Sample Input: ((())()) Sample Output: 0","solution":"def min_remove_to_make_valid_parentheses(s: str) -> int: Determines the minimum number of parentheses to remove to make the sequence valid. Parameters: s (str): The input string containing only \'(\' and \')\'. Returns: int: The minimum number of parentheses to remove. open_count = 0 remove_count = 0 # First pass to count extra closing parentheses for char in s: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 else: remove_count += 1 # open_count will be the remaining unmatched opening parentheses remove_count += open_count return remove_count"},{"question":"Sarah loves playing with strings. She is particularly fascinated by palindromes - strings that read the same backward as forward. She wants to know how many substrings within a given string are palindromes. You are tasked with writing a function to help Sarah find the number of substring palindromes within a string. The function should consider all possible substrings and determine how many of them are palindromes. Example ------- Sarah has the string \\"abba\\", and she can extract six palindromic substrings: \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", and \\"abba\\". ``` count_palindromic_substrings(\\"abba\\") # => 6 ``` On another instance, she has the string \\"abc\\". This string has three palindromic substrings: \\"a\\", \\"b\\", and \\"c\\". ``` count_palindromic_substrings(\\"abc\\") # => 3 ``` A few days later, she looks at the string \\"aaa\\", which has six palindromic substrings: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", and \\"aaa\\". ``` count_palindromic_substrings(\\"aaa\\") # => 6 ``` Input ----- The input string consists of lowercase alphabets only and is non-empty. Output ------ The output should be an integer representing the number of palindromic substrings. Function signature ------------------ ```python def count_palindromic_substrings(s: str) -> int: pass ```","solution":"def count_palindromic_substrings(s: str) -> int: Returns the number of palindromic substrings in the given string. n = len(s) count = 0 # Helper function to count palindromes centered at left and right def count_palindromes_around_center(left: int, right: int): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 # Check all centers for even and odd length palindromes for center in range(n): count_palindromes_around_center(center, center) # For odd-length palindromes count_palindromes_around_center(center, center + 1) # For even-length palindromes return count"},{"question":"Given a matrix of dimensions N rows and M columns, find the minimum number of cells that need to contain a lamp so that every cell in the matrix is illuminated. A cell is illuminated if: 1. It contains a lamp. 2. It is in the same row or column as a cell containing a lamp. ----- Input ----- The first line of input contains one number T, the number of test cases. Each test case contains two integers N and M, the dimensions of the matrix. ----- Output ----- For each test case, print the minimum number of lamps required to illuminate every cell of the matrix. ----- Constraints ----- 1 ≤ T ≤ 100 1 ≤ N, M ≤ 50 ----- Sample Input 1 ----- 1 3 3 ----- Sample Output 1 ----- 3 ----- Explanation 1 ----- One possible configuration is to place lamps in cells (1, 1), (2, 2), and (3, 3). This will ensure that every row and column has at least one lamp, thus illuminating every cell in the matrix.","solution":"def min_number_of_lamps_needed(T, test_cases): Determine the minimum number of lamps required to illuminate every cell in all test cases. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains two integers, N and M, the dimensions of the matrix Returns: list of int: List containing the minimum number of lamps required for each test case results = [] for n, m in test_cases: # The minimum number of lamps needed is equal to the maximum of the two dimensions results.append(max(n, m)) return results"},{"question":"In a bustling city, public transportation relies heavily on an intricate network of buses. Each bus has a unique route and schedule, designed to cater to the needs of the city\'s residents. Recently, the transportation department introduced a new feature - a digital display showing the arrival times of the buses at each stop. However, due to a software bug, the display sometimes shows incorrect information. Your task is to implement a system that will ensure the correct display of the earliest arriving bus at each stop. You are given a list of bus arrival times at different stops. Each bus has a unique identifier and a list of integers representing the time in minutes past midnight when the bus arrives at specific stops. Assume the stops are numbered sequentially starting from 0. Your task is to determine the earliest arriving bus and its arrival time at each stop. Input The first line of input contains an integer t (1 ≤ t ≤ 50), the number of test cases. Each test case begins with a line containing n (1 ≤ n ≤ 100000), the number of buses. The following n lines provide the details for each bus. Each line contains an integer m (1 ≤ m ≤ 1000), the number of stops the bus makes, followed by m space-separated integers representing the arrival times of the bus at those stops. Output For each test case, output a single line consisting of a list of n pairs. Each pair contains the bus identifier (1-indexed) and the earliest arrival time for each stop. If two or more buses arrive at the same earliest time, choose the bus with the smallest identifier. Example Input: 2 3 2 10 20 2 15 25 3 5 10 20 2 2 30 45 3 25 50 75 Output: 1 10, 2 15 1 30, 2 25, 1 45, 2 50, 2 75 Explanation: In the first test case: - For stop 0: Bus 1 arrives at 10, Bus 2 at 15, and Bus 3 at 5 (so Bus 3 is the earliest at stop 0). - For stop 1: Bus 1 arrives at 20, Bus 2 at 25, and Bus 3 at 10 (so Bus 3 is the earliest at stop 1). - For stop 2: Only Bus 3 goes up to stop 2 and arrives at 20. In the second test case: - For stop 0: Bus 1 arrives at 30, and Bus 2 at 25 (so Bus 2 is the earliest at stop 0). - For stop 1: Bus 1 arrives at 45, and Bus 2 at 50 (so Bus 1 is the earliest at stop 1). - For stop 2: Only Bus 2 goes up to stop 2 and arrives at 75.","solution":"def earliest_buses(t, test_cases): result = [] for i in range(t): n, buses = test_cases[i] stops = {} for bus_id, bus in enumerate(buses, start=1): for stop, arrival_time in enumerate(bus): if stop not in stops: stops[stop] = (bus_id, arrival_time) else: if arrival_time < stops[stop][1] or (arrival_time == stops[stop][1] and bus_id < stops[stop][0]): stops[stop] = (bus_id, arrival_time) # Sort stops by stop number to produce ordered output sorted_stops = sorted(stops.items()) result.append(\\" \\".join([f\\"{bus_id} {arrival_time}\\" for _, (bus_id, arrival_time) in sorted_stops])) return result"},{"question":"Background: The Fibonacci sequence is a series of numbers where the next number is found by adding up the two numbers before it. Starting with 0 and 1, the sequence goes 0, 1, 1, 2, 3, 5, 8, 13, and so forth. According to this formula: - Fib(0) = 0 - Fib(1) = 1 - Fib(n) = Fib(n-1) + Fib(n-2) for n > 1 The Fibonacci sequence has been a subject of interest due to its relationship to the golden ratio and its occurrence in various aspects of art, nature, and mathematics. --- --- Task: You need to write a function that takes an integer `n` and returns a list containing the first `n` elements of the Fibonacci sequence, starting from 0. Example: ```python firstNFibonacci(5) == [0, 1, 1, 2, 3] firstNFibonacci(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ``` ---","solution":"def firstNFibonacci(n): Returns a list containing the first n elements of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"You are given two strings a and b of length N and M respectively, both consisting of lowercase English letters. The task is to find and print the longest common prefix of a and b. -----Constraints----- - 1 leq N, M leq 100 - a and b are strings consisting of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: a b -----Output----- Print the longest common prefix of a and b. If there is no common prefix, print an empty string. -----Sample Input----- flower flow -----Sample Output----- flow","solution":"def longest_common_prefix(a, b): Returns the longest common prefix of two strings a and b. min_length = min(len(a), len(b)) for i in range(min_length): if a[i] != b[i]: return a[:i] return a[:min_length]"},{"question":"A popular social media platform has a \\"like\\" feature that allows users to express their appreciation for content by clicking a button. The algorithm behind this feature is a bit more intricate than it initially appears. When a user clicks the \\"like\\" button, the action is represented by the integer 1, and when they remove their like, it is represented by the integer -1. The platform developers are interested in monitoring user activity and want to determine the maximum number of consecutive \\"likes\\" that a user has given to various posts before performing an \\"unlike\\" action. For example, consider the following sequence of \\"like\\" and \\"unlike\\" actions: [1, 1, -1, 1, 1, 1, -1, 1] Here, the maximum number of consecutive \\"likes\\" is 3, which occurs between the 4th and the 6th actions. You are required to write a program that computes the longest sequence of consecutive \\"likes\\" (1s) in a provided sequence of user actions. **Input:** The first line contains a single integer T, the number of test cases. Each test case starts with an integer N, the number of user actions, followed by a sequence of N integers, each either 1 or -1, representing the user\'s actions. **Output:** For each test case, output a single integer representing the maximum number of consecutive \\"likes\\" (1s). **Constraints:** - ( 1 leq T leq 100 ) - ( 1 leq N leq 10^5 ) **Example:** **Input:** ```plaintext 3 8 1 1 -1 1 1 1 -1 1 5 1 1 -1 -1 1 6 -1 1 1 -1 1 1 ``` **Output:** ```plaintext 3 2 2 ``` Here: - In the first test case, the longest sequence of consecutive \\"likes\\" is 3. - In the second test case, the longest sequence is 2. - In the third test case, there are two sequences with a length of 2. Efficiently determine the longest sequence of consecutive \\"likes\\" for each test case and output the results accordingly.","solution":"def longest_like_streak(T, test_cases): results = [] for case in test_cases: N, actions = case max_streak = current_streak = 0 for action in actions: if action == 1: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 0 results.append(max_streak) return results"},{"question":"Bob is interested in binary strings that have an equal number of 0\'s and 1\'s. A binary string is a sequence of characters that can only be \'0\' or \'1\'. Bob defines the balance of a binary string as the absolute difference between the number of 0\'s and 1\'s in the string. Bob wants to know the minimum possible balance that a binary string of length n can have. Help him determine the result. Input The single line contains an integer n (1 ≤ n ≤ 106) — the length of the binary string. Output Print a single integer — the minimum possible balance of a binary string of length n. Examples Input 5 Output 1 Input 4 Output 0","solution":"def min_balance(n): Returns the minimum possible balance of a binary string of length n. The balance is defined as the absolute difference between the number of 0\'s and 1\'s. # If n is even, we can have an equal number of 0\'s and 1\'s, hence balance is 0 # If n is odd, we will always have an imbalance of 1 if n % 2 == 0: return 0 else: return 1"},{"question":"You are given an array of integers and a series of operations that should be performed on this array. Each operation can be one of three types: 1. Reverse a subarray from index `l` to `r`. 2. Increment each element in a subarray from index `l` to `r` by 1. 3. Return the sum of elements in a subarray from index `l` to `r`. Write a program that processes these operations and outputs the results of the sum operations. Input: - The first line contains two integers `n` and `q` (1 <= n <= 100000, 1 <= q <= 100000), where `n` is the size of the array and `q` is the number of operations. - The second line contains `n` integers representing the elements of the array. - The next `q` lines describe the operations. Each operation is in the following format: - `1 l r`: Reverse the subarray from index `l` to `r` (0-based inclusive). - `2 l r`: Increment each element in the subarray from index `l` to `r` by 1 (0-based inclusive). - `3 l r`: Output the sum of the elements in the subarray from index `l` to `r` (0-based inclusive). Output: - For each sum operation, output the result on a new line. Example: Input: ``` 5 4 1 2 3 4 5 2 1 3 3 0 4 1 0 2 3 0 2 ``` Output: ``` 16 9 ``` Explanation: 1. After the first operation, the array becomes `[1, 3, 4, 5, 5]`. 2. The sum of the entire array is `1 + 3 + 4 + 5 + 5 = 16`. 3. Reversing the subarray from index 0 to 2 results in `[4, 3, 1, 5, 5]`. 4. The sum of the subarray from index 0 to 2 is `4 + 3 + 2 = 9`.","solution":"def process_operations(n, q, array, operations): result = [] for operation in operations: op_type, l, r = operation if op_type == 1: # Reverse subarray from l to r array[l:r+1] = array[l:r+1][::-1] elif op_type == 2: # Increment subarray from l to r by 1 for i in range(l, r+1): array[i] += 1 elif op_type == 3: # Sum subarray from l to r result.append(sum(array[l:r+1])) return result"},{"question":"Simon and Clara are preparing for a long hike in the mountains. Rather than carrying a lot of food, they plan to stop at various established rest points where they can pick up supplies. These rest points are located at different mile markers along a straight trail. They can only carry supplies good for a specific maximum number of consecutive miles due to the limitations of their backpacks. They want to know the minimum number of rest points they need to stop at to always have enough supplies for the hike. Given the total length of the trail and the locations of the rest points, determine the minimum number of rest points they need to stop at to complete the hike. -----Input----- The input consists of two lines: - The first line contains two integers: the total length of the trail, L (1 ≤ L ≤ 1000000), and the maximum number of miles their supplies can last, M (1 ≤ M ≤ 1000000). - The second line contains an integer n (0 ≤ n ≤ 1000000) followed by n integers indicating the mile markers of the rest points in increasing order (each between 0 and L). -----Output----- Output a single line containing a single integer, the minimum number of rest points they need to stop at to complete the hike, or -1 if it is not possible. -----Examples----- Sample Input 1: 10 3 4 1 2 6 8 9 Sample Output 1: 4 Sample Input 2: 12 4 3 2 6 10 Sample Output 2: 3","solution":"def min_rest_stops(L, M, rest_points): Determine the minimum number of rest stops needed to complete the hike. rest_points = [0] + sorted(rest_points) + [L] # Add start and end points n = len(rest_points) current_pos = 0 stops = 0 while current_pos < n - 1: next_pos = current_pos while (next_pos + 1 < n) and (rest_points[next_pos + 1] - rest_points[current_pos] <= M): next_pos += 1 if next_pos == current_pos: return -1 if next_pos < n - 1: stops += 1 current_pos = next_pos if rest_points[-1] - rest_points[current_pos] > M: return -1 return stops"},{"question":"Given an integer array `arr`, your task is to find the length of the longest subarray where the difference between any two elements is at most `k`. # Function Signature The function should be defined as follows: ```python def longest_subarray(arr: List[int], k: int) -> int: ``` # Input - An integer array `arr` of length `n` (1 leq n leq 10^5) - An integer `k` (0 leq k leq 10^6) # Output - Print a single integer, the length of the longest subarray satisfying the given condition. # Examples Example 1 Input: ``` arr = [1, 5, 3, 2, 4, 6] k = 2 ``` Output: ``` 3 ``` Explanation: One of the longest subarrays satisfying the condition is `[3, 2, 4]`. Example 2 Input: ``` arr = [8, 8, 8, 8] k = 0 ``` Output: ``` 4 ``` Explanation: Since all elements are the same, the entire array forms the longest subarray. Example 3 Input: ``` arr = [10, 1, 2, 3, 4, 7, 6] k = 3 ``` Output: ``` 4 ``` Explanation: One of the longest subarrays satisfying the condition is `[1, 2, 3, 4]`. # Note In the first example, the longest subarray where the difference between any two elements is at most 2 is `[3, 2, 4]` which has a length of 3.","solution":"from typing import List def longest_subarray(arr: List[int], k: int) -> int: if not arr: return 0 left, right = 0, 0 max_len = 0 min_val, max_val = arr[0], arr[0] while right < len(arr): min_val = min(min_val, arr[right]) max_val = max(max_val, arr[right]) if max_val - min_val <= k: max_len = max(max_len, right - left + 1) right += 1 else: left += 1 min_val = min(arr[left:right+1]) max_val = max(arr[left:right+1]) right += 1 return max_len"},{"question":"You are given a string consisting of only lowercase alphabets. Your task is to find the longest substring that consists of only distinct characters and print its length. If there are multiple substrings with the maximum length, print any one of them. Implement a function `find_longest_unique_substring(s: str) -> Tuple[int, str]` to solve the problem. Input: - A single string `s` of length `n` (1 <= n <= 1000) Output: - A tuple containing two elements: - An integer representing the length of the longest substring with all unique characters. - A string representing any one of such longest substrings. Examples: Input: ``` abcabcbb ``` Output: ``` (3, \'abc\') ``` Input: ``` bbbbb ``` Output: ``` (1, \'b\') ``` Input: ``` pwwkew ``` Output: ``` (3, \'wke\') ``` **Explanation**: In the first example, the longest substring with all unique characters is \\"abc\\", which its length is 3. In the second example, the longest substring with all unique characters is \\"b\\" because all characters in the string are the same. Thus, the length is 1. In the third example, the longest substring \\"wke\\" has a length of 3. Note that \\"ke\\" starting at position 3 is also a valid answer, but \\"pwke\\" is not because it contains a repeat \\"w\\". # Function Signature ```python from typing import Tuple def find_longest_unique_substring(s: str) -> Tuple[int, str]: # write your code here ```","solution":"from typing import Tuple def find_longest_unique_substring(s: str) -> Tuple[int, str]: if not s: return 0, \'\' n = len(s) start, max_len, max_substr = 0, 0, \\"\\" char_index_map = {} for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end current_len = end - start + 1 if current_len > max_len: max_len = current_len max_substr = s[start:end+1] return max_len, max_substr"},{"question":"Given an integer array nums, modify it according to the following rules: - Remove all instances of an element if it appears more than twice in the array. - Reverse the order of the elements in the resulting array. Example: Input: nums = [1, 2, 3, 2, 3, 3, 4] Output: [4, 2, 3, 2, 1] Explanation: - Element 3 appears three times, remove all instances of it. - The remaining array [1, 2, 2, 4] is reversed to get [4, 2, 2, 1]. Your Task: You don\'t need to read input or print anything. Complete the function modifyArray() which takes the array nums as an input parameter and returns the modified array. If the resulting array is empty, return an array with a single element -1. Expected Time Complexity: O(N) where N is the length of nums. Expected Auxiliary Space: O(N) Constraints: 1 <= nums.length <= 10^4 -10^4 <= nums[i] <= 10^4","solution":"from collections import Counter def modifyArray(nums): Modifies the input array by removing all elements that appear more than twice and then reversing the order of the remaining elements. Parameters: nums (list of int): The input array. Returns: list of int: The modified array. # Count the frequency of each element count = Counter(nums) # Create a new array with elements that appear at most twice modified = [num for num in nums if count[num] <= 2] # Reverse the modified array modified.reverse() # If the resulting array is empty, return [-1] return modified if modified else [-1]"},{"question":"Kalina loves rearranging words. She recently learned about lexicographic order, which is the dictionary order of words where sequences are ordered primarily by their first element, then by their second element if the first elements are equal, and so on. Kalina wants to find the smallest lexicographic string that can be formed using all characters of a given string with a twist: she can choose any continuous substring of the initial string and reverse it any number of times to form the desired string. Can you help Kalina by writing a function that returns the lexicographically smallest string possible? -----Input:----- The first line contains a single integer T (1 leq T leq 10), the number of test cases. Each of the next T lines contains a string s (1 leq |s| leq 1000) consisting of lowercase English letters. -----Output:----- For each string, output the lexicographically smallest string that can be formed. -----Constraints----- - 1≤T≤10 - 1≤|s|≤1000 - The string `s` consists of only lowercase English letters. -----Sample Input:----- 3 cba acbd aaabbb -----Sample Output:----- abc abcd aaabbb -----EXPLANATION:----- In the first sample, reversing the substring \\"cba\\" results in \\"abc\\". In the second sample, the string \\"acbd\\" is already partially sorted, only \\"bd\\" needs to be reversed to get the smallest lexicographic order \\"abcd\\". In the third sample, the string \\"aaabbb\\" is already in the smallest lexicographic order.","solution":"def smallest_lexicographic_string(t, test_cases): This function returns the lexicographically smallest string possible for each test case by reversing any continuous substring any number of times. results = [] for s in test_cases: results.append(\\"\\".join(sorted(s))) return results # Example usage: # t = 3 # test_cases = [\\"cba\\", \\"acbd\\", \\"aaabbb\\"] # print(smallest_lexicographic_string(t, test_cases)) # Output: [\'abc\', \'abcd\', \'aaabbb\']"},{"question":"Given two strings s1 and s2, determine if s2 is a rotated version of s1. Constraints * The strings s1 and s2 only consist of lowercase English letters. * The lengths of s1 and s2 are between 1 and 100, inclusive. Input The input is given in the following format. s1 s2 Output Print \\"YES\\" if s2 is a rotated version of s1, and \\"NO\\" otherwise. Examples Input hello lohel Output YES Input world dlrow Output NO","solution":"def is_rotated_version(s1, s2): Determines if s2 is a rotated version of s1. if len(s1) != len(s2): return \\"NO\\" doubled_s1 = s1 + s1 return \\"YES\\" if s2 in doubled_s1 else \\"NO\\""},{"question":"Mike is learning string manipulation and his mentor has given him a task to better understand string handling. Given a string S of n characters, he needs to find out how many distinct substrings of length k can be generated from the given string S. He asks for your help to find the solution. Input Format: The first line contains an integer T, the number of test cases. Each of the next T test cases consists of two lines: - The first line contains the string S. - The second line contains an integer k (1 ≤ k ≤ length of S). Output Format: For each test case, output a single line, the number of distinct substrings of length k. Constraints: 1 ≤ T ≤ 10^5 1 ≤ length of S ≤ 10^5 SAMPLE INPUT 2 abcabc 3 abcd 2 SAMPLE OUTPUT 3 3 Explanation: For the first test case: The distinct substrings of length 3 are: \\"abc\\", \\"bca\\", and \\"cab\\". For the second test case: The distinct substrings of length 2 are: \\"ab\\", \\"bc\\", and \\"cd\\".","solution":"def count_distinct_substrings(t, test_cases): results = [] for i in range(t): s, k = test_cases[i] substrings = set() for j in range(len(s) - k + 1): substr = s[j:j + k] substrings.add(substr) results.append(len(substrings)) return results"},{"question":"A group of friends is playing a game on a grid. The grid has M rows and N columns. Each cell in the grid can either be empty or contain a block. The friends move from one cell to another adjacent cell. Adjacent cells are those that share an edge either horizontally or vertically (not diagonally). Their objective is to find the shortest path from the starting cell (Sx, Sy) to the destination cell (Dx, Dy). They can only move to an empty cell and cannot move through or onto a cell that contains a block. Write a program that computes and prints the minimum number of steps required to move from the starting cell to the destination cell. If it is impossible to reach the destination cell, return -1. Input Read the following input from standard input. * The first line contains two integers, M and N, the dimensions of the grid. * The next line contains two integers, Sx and Sy (1 ≤ Sx ≤ M, 1 ≤ Sy ≤ N), representing the starting position. * The next line contains two integers, Dx and Dy (1 ≤ Dx ≤ M, 1 ≤ Dy ≤ N), representing the destination position. * The next M lines each contain a string of N characters, representing the grid. Each character is either \'.\' (an empty cell) or \'#\' (a block). Output Output one integer representing the minimum number of steps required to reach the destination cell, or -1 if it is impossible to reach the destination cell. Example Input 5 5 1 1 5 5 ..... ..#.. ..#.. ..#.. ..... Output 8 Explanation The shortest path from (1, 1) to (5, 5) avoids the blocks and takes 8 steps. Another Example Input 3 3 1 1 3 3 .#. .#. .#. Output -1 Explanation There is no path from (1, 1) to (3, 3) due to the blockade of \'#\' in the second column.","solution":"from collections import deque def shortest_path_in_grid(M, N, Sx, Sy, Dx, Dy, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] Sx -= 1 Sy -= 1 Dx -= 1 Dy -= 1 queue = deque([(Sx, Sy, 0)]) visited = set() visited.add((Sx, Sy)) while queue: x, y, steps = queue.popleft() if x == Dx and y == Dy: return steps for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 # To execute the function based on input def read_input_and_compute(): import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) Sx = int(data[2]) Sy = int(data[3]) Dx = int(data[4]) Dy = int(data[5]) grid = data[6:] print(shortest_path_in_grid(M, N, Sx, Sy, Dx, Dy, grid)) if __name__ == \\"__main__\\": read_input_and_compute()"},{"question":"Alice has a rectangular grid of size N x M filled with non-negative integers. She wants to find the smallest sum of a subrectangle (a contiguous subarray of the grid) within this grid. Your task is to help Alice by finding this smallest sum for her. -----Input:----- - First-line will contain two integers N and M, the dimensions of the grid. - The next N lines will each contain M integers, representing the grid. -----Output:----- Output a single integer which is the smallest sum of any subrectangle within the grid. -----Constraints----- - 1 leq N, M leq 100 - The integers in the grid will be between 0 and 10^3. -----Sample Input:----- 3 3 1 2 3 4 -5 6 7 8 9 -----Sample Output:----- -5 -----EXPLANATION:----- The smallest sum achievable is from the subrectangle consisting of the single element -5.","solution":"def min_subrectangle_sum(grid): Given a grid of non-negative integers, returns the smallest sum of any subrectangle within the grid. if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) min_sum = float(\'inf\') for left in range(m): temp = [0] * n for right in range(left, m): # Sum up columns for all rows between `left` and `right` for i in range(n): temp[i] += grid[i][right] # Use Kadane\'s algorithm to find the smallest sum subarray in temp current_min = float(\'inf\') current_sum = 0 for sum_val in temp: current_sum += sum_val current_min = min(current_min, current_sum) if current_sum > 0: current_sum = 0 min_sum = min(min_sum, current_min) return min_sum"},{"question":"You are given a binary tree. Your task is to find the maximum path sum. The path may start and end at any node in the tree and must move downward (traveling only from parent nodes to child nodes). A path sum is the sum of the values of nodes in a specific path. Input The input consists of a single line that represents the serialized binary tree. The tree nodes are given in level order traversal, and each node is either an integer (the value of the node) or the string \\"null\\" indicating the absent child node. Output Output an integer representing the maximum path sum. Note: - The maximum path sum is guaranteed to not exceed 10^9 in absolute value. - The total number of nodes in the tree is between 1 and 2000. Examples Input: 1 2 3 Output: 6 Input: -10 9 20 null null 15 7 Output: 42","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root): def helper(node): nonlocal max_sum if not node: return 0 # Calculate the maximum path sum with respect to current subtree left_gain = max(helper(node.left), 0) right_gain = max(helper(node.right), 0) # Update the overall maximum path sum with a split at the current node current_sum = node.val + left_gain + right_gain max_sum = max(max_sum, current_sum) # Return the maximum gain when continuing the traversal from the current node return node.val + max(left_gain, right_gain) max_sum = float(\'-inf\') helper(root) return max_sum def deserialize(data): if not data: return None nodes = data.split() root = TreeNode(int(nodes[0])) queue = [root] i = 1 while queue and i < len(nodes): node = queue.pop(0) if nodes[i] != \'null\': node.left = TreeNode(int(nodes[i])) queue.append(node.left) i += 1 if i < len(nodes) and nodes[i] != \'null\': node.right = TreeNode(int(nodes[i])) queue.append(node.right) i += 1 return root def find_max_path_sum(tree_str): root = deserialize(tree_str) return maxPathSum(root)"},{"question":"You are given an array of integers. Your task is to find and print the size of the largest subset such that the greatest common divisor (GCD) of all the numbers in the subset is greater than 1. -----Input----- The first line of the input contains an integer t (1 le t le 10) — the number of test cases. The description of test cases follows. The first line of each test case contains an integer n (1 le n le 10^5) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^5) — the elements of the array. The sum of n over all test cases doesn\'t exceed 10^5. -----Output----- For each test case, output a single integer — the size of the largest subset such that the GCD of all the numbers in the subset is greater than 1. -----Examples----- Input 2 5 10 15 20 25 30 4 3 6 9 12 Output 5 4 -----Note----- In the first test case, the largest subset with GCD greater than 1 is [10, 15, 20, 25, 30] having GCD 5. In the second test case, the largest subset with GCD greater than 1 is [3, 6, 9, 12] having GCD 3.","solution":"from collections import defaultdict from math import gcd def largest_gcd_subset_size(test_cases): def sieve(n): is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return [x for x in range(2, n + 1) if is_prime[x]] def get_prime_factors(n): factors = [] for prime in primes: if prime * prime > n: break if n % prime == 0: while n % prime == 0: n //= prime factors.append(prime) if n > 1: factors.append(n) return factors results = [] primes = sieve(100000) for n, arr in test_cases: frequency = defaultdict(int) for number in arr: factors = get_prime_factors(number) for factor in factors: frequency[factor] += 1 largest_size = max(frequency.values(), default=1) results.append(largest_size) return results def process_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases def process_output(results): return \\"n\\".join(map(str, results))"},{"question":"**Problem Statement** A programming club is organizing a competition where participants must solve a maze. The maze is represented as a grid of cells with dimensions N times M. Each cell is either open (\'.\') or blocked (\'#\'). Participants start at the top-left corner of the maze (cell (0,0)) and must reach the bottom-right corner of the maze (cell (N-1, M-1)) by moving only to adjacent cells (up, down, left, or right). Write a program that determines if there is a path from the start to the end of the maze. If such a path exists, output \\"YES\\"; if not, output \\"NO\\". # Input Constraints - 1 leq N, M leq 800 - The maze grid will contain exactly N rows and M columns. - Each cell in the grid will be either open or blocked. # Input - The first line contains two integers, N and M, separated by a space. - The next N lines each contain M characters, representing the maze. # Output - Output \\"YES\\" if there is a path from (0,0) to (N-1,M-1), otherwise output \\"NO\\". # Example Sample Input 1 ``` 5 5 ..... .#. ..... .#. ..... ``` Sample Output 1 ``` YES ``` Sample Input 2 ``` 3 4 ..#. #. ..#. ``` Sample Output 2 ``` NO ``` # Explanation In the first example, there is a clear path from the top-left corner to the bottom-right corner. In the second example, there is no way to navigate from the start to the end due to the blocked cells (represented by \'#\').","solution":"def is_path_exists(maze): from collections import deque N, M = len(maze), len(maze[0]) if maze[0][0] == \'#\' or maze[N-1][M-1] == \'#\': return \\"NO\\" directions = [(-1,0), (1,0), (0,-1), (0,1)] queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if x == N-1 and y == M-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and maze[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"A group of friends is planning a treasure hunt. Each treasure is represented by a string of length N, made up of uppercase English letters. They have a map that gives clues about the treasure\'s location. Each clue is a string of length M which might contain a sequence of characters that can be found as a subsequence in the treasure\'s string. Your task is to help the friends determine the number of clues that appear as subsequences in the given treasure strings. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. -----Input:----- - First line contains an integer T, number of test cases. - For each test case: - First line contains an integer N, the length of the treasure string. - Second line contains the treasure string. - Third line contains an integer K, the number of clues. - Next K lines, each containing a clue string of length M. -----Output:----- For each test case, output a single line containing the number of clues that are subsequences of the treasure string. -----Constraints----- - 1 leq T leq 20 - 1 leq N leq 100 - 1 leq K leq 100 - 1 leq M leq N - The treasure string and clue strings consist of only uppercase English letters. -----Sample Input:----- 2 7 TREASURE 3 TRE SURE ASTR 5 GDVANC 4 GAC DAN DVN GDN -----Sample Output:----- 2 3 -----Explanation:----- Test Case 1: The treasure string is \\"TREASURE\\". The clues \\"TRE\\" and \\"SURE\\" are subsequences of \\"TREASURE\\". However, \\"ASTR\\" is not a subsequence. So the number of subsequences is 2. Test Case 2: The treasure string is \\"GDVANC\\". All clues \\"GAC\\", \\"DAN\\", \\"DVN\\", and \\"GDN\\" are subsequences of \\"GDVANC\\". So the number of subsequences is 3.","solution":"def is_subsequence(treasure, clue): Determines if \'clue\' is a subsequence of \'treasure\'. it = iter(treasure) return all(char in it for char in clue) def count_subsequences(T, test_cases): Counts the number of clues that are subsequences of the treasure strings for each test case. results = [] for case in test_cases: N, treasure, K, clues = case count = sum(is_subsequence(treasure, clue) for clue in clues) results.append(count) return results # Parsing input and preparing test cases def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0].strip()) idx = 1 test_cases = [] for _ in range(T): N = int(lines[idx].strip()) treasure = lines[idx+1].strip() K = int(lines[idx+2].strip()) clues = [lines[idx+3+i].strip() for i in range(K)] test_cases.append((N, treasure, K, clues)) idx += 3 + K return T, test_cases # Example usage if __name__ == \\"__main__\\": input_string = 2 7 TREASURE 3 TRE SURE ASTR 6 GDVANC 4 GAC DAN DVN GDN T, test_cases = parse_input(input_string) results = count_subsequences(T, test_cases) for result in results: print(result)"},{"question":"A string is said to be a valid shuffled substring of another string if it contains all the characters of the second string in any order, and in the same frequency. Given a string `s` and a string `t`, your task is to write a program that finds the starting index of all substrings in `s` that are valid shuffled substrings of `t`. Input Format The first line contains the string `s`. The second line contains the string `t`. Constraints 1 leq |s| leq 10^5 1 leq |t| leq 10^3 Both strings consist only of lowercase English letters. Output Format Print the starting indices of all substrings in `s` that are valid shuffled substrings of `t`, each on a new line. If no such substrings exist, print \\"-1\\". You may output indices in any order. Sample Input 0 cbabcacab abc Sample Output 0 0 2 3 6 Explanation 0 The substrings of `s` that are valid shuffled substrings of `t` are: \\"cba\\" found at index 0, \\"abc\\" found at index 2, \\"bca\\" found at index 3, and \\"cab\\" found at index 6. All these contain exactly the same characters as string `t` in any order, making them valid shuffled substrings. Sample Input 1 abcdef ghij Sample Output 1 -1 Explanation 1 There are no substrings of `s` that contain all the characters of `t`. Hence, the output is -1.","solution":"from collections import Counter def find_shuffled_substrings(s, t): Finds the starting indices of all substrings in `s` that are valid shuffled substrings of `t`. :param s: input string where to search for the substrings :param t: the reference string whose characters must be present in the substrings :return: list of starting indices of valid shuffled substrings, or [-1] if none are found len_s = len(s) len_t = len(t) if len_t > len_s: return [-1] # Create a counter for the characters in t t_counter = Counter(t) window_counter = Counter(s[:len_t]) result = [] for i in range(len_s - len_t + 1): if i > 0: # Slide the window start_char = s[i - 1] end_char = s[i + len_t - 1] window_counter[start_char] -= 1 if window_counter[start_char] == 0: del window_counter[start_char] window_counter[end_char] += 1 # If window matches t\'s character counts, record the start index if window_counter == t_counter: result.append(i) if not result: return [-1] return result"},{"question":"You are given a permutation of the first n positive integers. Your task is to find the number of \\"unfavorable pairs\\" in the permutation. An unfavorable pair (i, j) is defined as follows: - i < j - i appears after j in the permutation. Input The first line contains a single integer n (1 ≤ n ≤ 100000). The second line contains a permutation of the integers from 1 to n. Output Output a single integer, the number of unfavorable pairs in the permutation. Examples Input 5 2 3 1 5 4 Output 3 Input 4 4 3 2 1 Output 6 Note In the first example, the unfavorable pairs are (1, 3), (1, 5), and (3, 4). In the second example, all pairs (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), and (3, 4) are unfavorable pairs, so the output is 6.","solution":"def count_unfavorable_pairs(n, permutation): unfavorable_pairs = 0 # Iterate through each element in the permutation for i in range(n): # Check pairs with elements before the current element for j in range(i): if permutation[j] > permutation[i]: unfavorable_pairs += 1 return unfavorable_pairs"},{"question":"# Task A restaurant is organizing a competition and each participant is assigned a unique identifier. The participants are put into pairs to form teams. Each team competes with other teams and scores are given to each team after the competition. The restaurant wants to find out if a particular score has been achieved by any team in the competition. Write a function that determines if a given score is present in the list of scores for the teams. # Example For `teamScores = [23, 45, 67, 89, 12, 34]` and `targetScore = 67`, the output should be `true`. For `teamScores = [23, 45, 67, 89, 12, 34]` and `targetScore = 50`, the output should be `false`. # Input/Output - `[input]` integer array `teamScores` Constraints: `1 ≤ teamScores.length ≤ 100, 1 ≤ teamScores[i] ≤ 100`. - `[input]` an integer `targetScore` Constraints: `1 ≤ targetScore ≤ 100`. - `[output]` a boolean Function Signature ```python def is_score_present(teamScores: List[int], targetScore: int) -> bool: # Your code here ```","solution":"from typing import List def is_score_present(teamScores: List[int], targetScore: int) -> bool: Determines if a given score is present in the list of scores for the teams. Parameters: teamScores (List[int]): List of scores of the teams. targetScore (int): The score to search in the list of team scores. Returns: bool: True if targetScore is present in teamScores, False otherwise. return targetScore in teamScores"},{"question":"Alice loves collecting different types of rocks. She stores the rocks in a row, and she assigns a unique type value to each rock. Recently, she discovered a new kind of rock and inserted it somewhere in her collection. She wants to find out how many types of rocks are present in each segment of her collection after inserting the new rock at different positions. Help Alice by implementing a function that processes each query. Given an array of N integers representing the initial types of rocks and Q queries, each query contains an integer X representing the unique type of the newly inserted rock and an integer P representing the position (1-indexed) where the new rock will be inserted. Your task is to find the number of unique types of rocks in the collection after each insertion. Input The first line of the input contains an integer N denoting the number of initial rocks in the collection. The second line contains N space-separated integers representing the types of the initial rocks. The third line contains an integer Q denoting the number of queries. Each of the next Q lines contains two integers X and P where X is the new rock type, and P is the 1-indexed position to insert the rock. Output For each query, output a single line denoting the number of unique types of rocks in the collection after the insertion. Constraints 1 ≤ N ≤ 100 1 ≤ Q ≤ 100 1 ≤ types of rocks ≤ 1000 SAMPLE INPUT 5 1 2 3 4 5 3 6 3 2 1 7 6 SAMPLE OUTPUT 6 5 6","solution":"def count_unique_rock_types(N, initial_rocks, Q, queries): results = [] for x, p in queries: current_collection = initial_rocks[:p-1] + [x] + initial_rocks[p-1:] unique_rock_types = len(set(current_collection)) results.append(unique_rock_types) return results"},{"question":"You are given two strings, s1 and s2, both consisting of lowercase English letters. Your task is to determine if it is possible to make the strings equal by rearranging the letters of s1 and performing at most one substitution (replacing any single character of s1 with any other single character). If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". -----Input----- The first line contains an integer t (1 leq t leq 1000) — the number of test cases. The first line of each test case contains the first string s1 (1 leq |s1| leq 1000), and the second line contains the second string s2 (1 leq |s2| leq 1000). It is guaranteed that the sum of lengths of all strings across all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print \\"YES\\" (without quotes) if it is possible to make the strings equal by rearranging and performing at most one substitution, and \\"NO\\" (without quotes) otherwise. You can output \\"YES\\" and \\"NO\\" in any case (for example, strings \\"yEs\\", \\"yes\\" and \\"Yes\\" will be recognized as a positive response). -----Examples----- Input 4 abc bca aabb abac abc def abcd abce Output YES YES NO YES -----Note----- In the first test case, you can rearrange the letters to make s1 equal to s2. In the second test case, you can rearrange the letters of s1 to get \\"aabb\\" and change one \'b\' to \'c\' to make it \\"abac\\". In the third test case, even with one substitution, it is not possible to make \\"abc\\" equal to \\"def\\". In the fourth test case, you can rearrange letters of \\"abcd\\" to get \\"abdc\\" and replace \'d\' with \'e\' to make it \\"abce\\".","solution":"def can_make_equal_by_one_substitution(t, test_cases): results = [] for s1, s2 in test_cases: if sorted(s1) == sorted(s2): results.append(\\"YES\\") elif can_be_equal_with_one_substitution(s1, s2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def can_be_equal_with_one_substitution(s1, s2): if len(s1) != len(s2): return False counter = dict() for char in s1: if char in counter: counter[char] += 1 else: counter[char] = 1 mismatch_pairs = 0 for char in s2: if char in counter and counter[char] > 0: counter[char] -= 1 else: mismatch_pairs += 1 # Check if it\'s one mismatch pair a single substitution can fix return mismatch_pairs == 1 # Example usage t = 4 test_cases = [ (\\"abc\\", \\"bca\\"), (\\"aabb\\", \\"abac\\"), (\\"abc\\", \\"def\\"), (\\"abcd\\", \\"abce\\"), ] results = can_make_equal_by_one_substitution(t, test_cases) for result in results: print(result)"},{"question":"Task Write a function `isPalindrome(num)` that checks whether a given integer is a palindrome without converting it to a string. A palindrome is a number that reads the same forward and backward. Example ```python isPalindrome(12321) # should return True isPalindrome(12345) # should return False ``` Constraints - You should not use any kind of string conversion. - You may assume the integer is not negative and does not have leading zeros except for the number zero itself.","solution":"def isPalindrome(num): Returns True if the input integer is a palindrome, otherwise False. # Attempt to early exit for simple cases if num < 0: return False if num == 0: return True # Compute the reversed number and compare with the original original = num reversed_num = 0 while num > 0: remainder = num % 10 reversed_num = reversed_num * 10 + remainder num = num // 10 return original == reversed_num"},{"question":"Create a function that takes a list of integers and a target integer. The function should return the indices of the two numbers in the list that add up to the target. If no such pair exists, return an empty list. If there are multiple pairs, return the pair with the smallest indices. Example: ``` Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9 Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Explanation: Because nums[1] + nums[2] == 6 Input: nums = [3, 3], target = 6 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 6 Input: nums = [1, 2, 3], target = 7 Output: [] Explanation: No two numbers add up to the target 7. ```","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list that add up to the target. If no such pair exists, return an empty list. If there are multiple pairs, return the pair with the smallest indices. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Ayana loves playing with numbers and magic. She has a magical number generator that can generate a series of numbers based on a given input number. The generator performs a series of operations to transform the input number into a sequence until it reaches a single-digit number. Let\'s call this sequence the \\"magic sequence\\". The transformation works as follows: 1. Start with the initial number. 2. If the number has more than one digit, replace it with the sum of its digits. 3. Repeat step 2 until the number becomes a single-digit number. For instance, if the input number is 1234, the magic sequence is [1234, 10, 1] because: 1234 -> 1 + 2 + 3 + 4 = 10 10 -> 1 + 0 = 1 Given an initial number, generate its magic sequence. INPUT: A positive integer N (1 ≤ N ≤ 10^18). OUTPUT: Print the magic sequence as a space-separated list of integers. CONSTRAINTS: 1 ≤ N ≤ 10^18 SAMPLE INPUT 9875 SAMPLE OUTPUT 9875 29 11 2 Explanation: For the given input number 9875: 9875 -> 9 + 8 + 7 + 5 = 29 29 -> 2 + 9 = 11 11 -> 1 + 1 = 2","solution":"def magic_sequence(n): Generates the magic sequence for a given number n. sequence = [n] while n >= 10: n = sum(int(digit) for digit in str(n)) sequence.append(n) return sequence"},{"question":"Given a string S, calculate its lexicographic rank among all its possible permutations sorted in alphabetical order. Assume that all characters in the string are distinct. Example 1: Input: S = \\"abc\\" Output: 1 Explanation: All permutations of \\"abc\\" in lexicographic order are [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"]. The string \\"abc\\" appears first. Example 2: Input: S = \\"cba\\" Output: 6 Explanation: All permutations of \\"cba\\" in lexicographic order are [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"]. The string \\"cba\\" appears sixth. Your Task: You do not need to read input or print anything. Your task is to complete the function lexicographicRank(), which takes the string S as input parameter and returns the desired output. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 20","solution":"def factorial(n): Returns the factorial of n. return 1 if n == 0 or n == 1 else n * factorial(n - 1) def lexicographicRank(S): Returns the lexicographic rank of string S. n = len(S) rank = 1 mul = factorial(n) for i in range(n): mul //= (n - i) count = sum(1 for j in range(i + 1, n) if S[j] < S[i]) rank += count * mul return rank"},{"question":"A mountain array is defined as an array that has exactly one peak element, where the peak element is larger than its neighbors and it is strictly increasing before the peak and strictly decreasing after the peak. Given an array of n integers, determine if it is a mountain array. Function Description Complete the isMountainArray function in the editor below. It should return True if the array is a mountain array, or False otherwise. isMountainArray has the following parameter(s): - int arr[n]: the array of integers to check. Input Format The first line contains an integer n, the length of the array. This is followed by n space-separated integers, representing the elements of the array. Returns bool: either True or False Constraints 1 leq n leq 10^4 -10^6 leq arr[i] leq 10^6 Sample Input 1 5 1 3 5 4 2 Sample Output 1 True Explanation 1: The array is strictly increasing until element 5 and strictly decreasing after it. Sample Input 2 6 2 1 4 7 3 2 Sample Output 2 False Explanation 2: The array is strictly increasing until element 7 but does not strictly decrease after it starts to descend; it has another increase at element 4. Sample Input 3 3 3 5 5 Sample Output 3 False Explanation 3: The array does not have a single peak element as the values 5 and 5 are not strictly increasing or decreasing.","solution":"def isMountainArray(arr): n = len(arr) if n < 3: return False i = 1 # walk up while i < n and arr[i] > arr[i - 1]: i += 1 # peak can\'t be first or last if i == 1 or i == n: return False # walk down while i < n and arr[i] < arr[i - 1]: i += 1 return i == n"},{"question":"Robin\'s company manufactures high-tech gadgets. One of their devices generates a sequence of signals represented by an array of integers. Each signal in the sequence symbolizes a specific operational state of the device. To ensure proper functioning, the operational testing unit needs to find the length and value of the longest subarray where all the elements are the same. This helps the unit in fine-tuning and calibrating the device to avoid prolonged uniform states. Given an array of integers, your task is to find the length of the longest subarray where all elements are equal, along with the value of the elements in this subarray. If there are multiple subarrays with the same length, return the one that appears first. Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains: 1. An integer N (the size of the array). 2. N space-separated integers representing the array. Output Format For each test case, output the length of the longest subarray and the value of the elements in this subarray. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Array[i] ≤ 10^9 SAMPLE INPUT 3 7 4 4 4 4 5 5 5 8 6 6 6 6 6 1 1 1 5 3 3 2 2 2 SAMPLE OUTPUT 4 4 5 6 3 2 Explanation For the 1st test case, the longest subarray with all elements the same is [4, 4, 4, 4] with length 4. For the 2nd test case, the longest subarray is [6, 6, 6, 6, 6] with length 5. For the 3rd test case, the longest subarray is [2, 2, 2] with length 3.","solution":"def longest_uniform_subarray(t, test_cases): result = [] for case in test_cases: n, arr = case max_length = 1 current_length = 1 value = arr[0] current_value = arr[0] for i in range(1, n): if arr[i] == current_value: current_length += 1 else: if current_length > max_length: max_length = current_length value = current_value current_value = arr[i] current_length = 1 # Check last subarray if current_length > max_length: max_length = current_length value = current_value result.append((max_length, value)) return result"},{"question":"Given a string containing only digits \'0\'-\'9\', return the minimum number of contiguous substrings from the given string such that each substring is a palindrome. For example: - Input: \\"1221\\" - Output: 1 (the entire string \\"1221\\" is a palindrome) - Input: \\"12321\\" - Output: 1 (the entire string \\"12321\\" is a palindrome) - Input: \\"12345\\" - Output: 5 (each digit can be considered a palindrome of length 1: \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\") Provide a function `min_palindrome_substrings(s: str) -> int` that computes the required output.","solution":"def min_palindrome_substrings(s: str) -> int: Returns the minimum number of contiguous substrings from the given string such that each substring is a palindrome. if not s: return 0 if s == s[::-1]: return 1 return len(s)"},{"question":"Saitama has given Genos another intriguing challenge. This time, the problem involves string transformations with a twist: Consider a binary string `b` of length `|b|`. Genos needs to transform the string `b` into a new string `c` such that the Hamming distance between `b` and `c` is minimized, with the additional constraint that `c` can only consist of alternating \'0\'s and \'1\'s starting with either \'0\' or \'1\'. For example, if the initial pattern starts with \'0\', the resulting string would look like \\"010101...\\". If it starts with \'1\', it would look like \\"101010...\\". Your task is to help Genos find the minimum Hamming distance required to transform `b` into either of the valid alternating patterns. -----Input----- The input contains a single binary string `b` (1 ≤ |b| ≤ 200 000). -----Output----- Print a single integer — the minimum Hamming distance required to transform `b` into the desired alternating binary string. -----Examples----- Input 0110 Output 2 Input 101010 Output 0 Input 101100 Output 3 -----Note----- For the first example, the two possible alternating patterns of length 4 are \\"0101\\" and \\"1010\\". The Hamming distances are: - Distance between \\"0110\\" and \\"0101\\": 1 + 1 + 1 + 1 = 2 - Distance between \\"0110\\" and \\"1010\\": 1 + 1 + 0 + 0 = 1 Thus, the minimum Hamming distance is 1. For the second example, both alternating patterns match the input string \\"101010\\" perfectly, so the minimum Hamming distance is 0. For the third example, the possible alternating patterns of length 6 are \\"101010\\" and \\"010101\\". The Hamming distances are: - Distance between \\"101100\\" and \\"101010\\": 0 + 0 + 0 + 1 + 0 + 1 = 2 - Distance between \\"101100\\" and \\"010101\\": 1 + 1 + 1 + 0 + 1 + 0 = 4 Thus, the minimum Hamming distance is 2.","solution":"def min_hamming_distance(b): n = len(b) # Generate the two possible alternating patterns pattern1 = \'\'.join(\'0\' if i % 2 == 0 else \'1\' for i in range(n)) pattern2 = \'\'.join(\'1\' if i % 2 == 0 else \'0\' for i in range(n)) # Calculate Hamming distances dist1 = sum(b[i] != pattern1[i] for i in range(n)) dist2 = sum(b[i] != pattern2[i] for i in range(n)) return min(dist1, dist2)"},{"question":"rotate_list() Given a list of integers and a positive integer k, the task is to rotate the list to the right by k steps, where k is non-negative. Example: Input: [1, 2, 3, 4, 5, 6, 7] 3 Output: [5, 6, 7, 1, 2, 3, 4] Input: [-1, -100, 3, 99] 2 Output: [3, 99, -1, -100] Task: Define a function `rotate_list(array, k)` that takes in a list of integers and an integer k, and returns the rotated list by k steps. Input Format: The first line contains a list of integers. The second line contains a positive integer k. Constraints: The length of the list will be between 1 and 100. k will be between 0 and 100. Sample Input: [1, 2, 3, 4, 5, 6, 7] 3 Sample Output: [5, 6, 7, 1, 2, 3, 4] Function Signature: def rotate_list(array: List[int], k: int) -> List[int]:","solution":"def rotate_list(array, k): Rotates the list to the right by k steps. Parameters: array (list): The list of integers to be rotated. k (int): The number of steps to rotate the list by. Returns: list: The rotated list. n = len(array) k = k % n # To handle cases where k > n return array[-k:] + array[:-k]"},{"question":"Linda loves playing word games, and she recently discovered a new one. In this game, she is given a string of lowercase English letters and she has to determine the longest contiguous substring where no letter is repeated. Linda has asked for your help to create a program that can solve this problem for her. -----Input----- The first and only line contains a string of lowercase English letters. The length of the string doesn\'t exceed 1000. -----Output----- Print a single number — the length of the longest contiguous substring with all distinct letters. -----Examples----- Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring of `s` without repeating characters. char_index = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"Phoebe has a string S consisting of lowercase English letters. She wants to arrange the string such that no two adjacent characters are the same. If it is possible to rearrange the string this way, return any possible rearrangement. If it is not possible, return \\"-1\\". Input First and only line contains a string S. Output Print a string that is a rearrangement of S such that no two adjacent characters are the same, or \\"-1\\" if no such rearrangement exists. Input Constraints 1 ≤ |S| ≤ 10^5 SAMPLE INPUT aab SAMPLE OUTPUT aba","solution":"from collections import Counter import heapq def rearrange_string(S): # Frequency count of characters counter = Counter(S) max_heap = [] # Create a max heap based on character frequencies for char, freq in counter.items(): heapq.heappush(max_heap, (-freq, char)) prev_char = None prev_freq = 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 rearranged_string = \'\'.join(result) if len(rearranged_string) == len(S): return rearranged_string else: return \\"-1\\""},{"question":"Imagine you are tasked with developing a new scheduling algorithm for a hospital. The hospital operates with a set number of operating rooms, and each surgery requires one room for its entire duration. Each surgery also cannot overlap with another surgery in the same room. The hospital receives a daily list of surgeries with their start and end times. Some surgeries may have overlapping times and need to be scheduled in different rooms. Your task is to determine the minimum number of operating rooms required to schedule all the surgeries for a given day. Input The input consists of several test cases. Each test case starts with an integer n (1 ≤ n ≤ 10,000), representing the number of surgeries. The next n lines each contain two integers, s and t (0 ≤ s < t ≤ 1,000,000), representing the start time and end time of a surgery. The end of the input is indicated by a single line containing zero. Output For each test case, output the minimum number of operating rooms required on a single line. Example Input 5 1 4 2 5 6 7 3 8 8 9 3 2 3 4 5 6 7 0 Output 3 1","solution":"def min_operating_rooms(test_cases): Returns a list of minimum number of operating rooms required for each test case. results = [] for surgeries in test_cases: events = [] for s, t in surgeries: events.append((s, \'start\')) events.append((t, \'end\')) events.sort() max_rooms = 0 current_rooms = 0 for time, event in events: if event == \'start\': current_rooms += 1 max_rooms = max(max_rooms, current_rooms) else: current_rooms -= 1 results.append(max_rooms) return results def parse_input(input_lines): test_cases = [] current_case = [] iterator = iter(input_lines) num_surgeries = int(next(iterator)) while num_surgeries != 0: for _ in range(num_surgeries): start, end = map(int, next(iterator).split()) current_case.append((start, end)) test_cases.append(current_case) current_case = [] num_surgeries = int(next(iterator)) return test_cases def process_surgery_data(input_lines): test_cases = parse_input(input_lines) results = min_operating_rooms(test_cases) return results"},{"question":"You are helping a museum to catalog its collection of artifacts. Each artifact belongs to a specific category and there can be multiple artifacts in a category. The museum database needs to be able to quickly find all the artifacts that belong to any given category. Your task is to write a program that builds such a database and handles multiple queries to retrieve artifacts by their category. Input The first line of the input contains two integers n and q (1 ≤ n, q ≤ 200000) – the number of artifacts and the number of queries, respectively. The second line contains n space-separated strings a1, a2, ..., an – the names of the artifacts. The third line contains n space-separated strings c1, c2, ..., cn – the categories of the corresponding artifacts (i.e., the artifact ai belongs to category ci). Each of the next q lines contains a string si – a query representing a category. All strings are alphanumeric and have a length between 1 and 100. Output For each query si, output a space-separated list of artifacts that belong to the category si. The lists for different queries should be printed on separate lines and in the order they appear in the input. If no artifacts belong to the given category, output \\"None\\". Example Input 5 3 artifact1 artifact2 artifact3 artifact4 artifact5 category1 category2 category1 category3 category2 category1 category2 category4 Output artifact1 artifact3 artifact2 artifact5 None","solution":"def catalog_artifacts(n, q, artifacts, categories, queries): Catalogs artifacts and retrieves them by category based on queries. Args: - n (int): Number of artifacts. - q (int): Number of queries. - artifacts (list of str): List of artifact names. - categories (list of str): List of corresponding categories. - queries (list of str): List of category queries. Returns: - List of str: Each string is a space-separated list of artifacts for a query. catalog = {} # Building the catalog for i in range(n): category = categories[i] artifact = artifacts[i] if category not in catalog: catalog[category] = [] catalog[category].append(artifact) # Retrieving results based on queries results = [] for query in queries: if query in catalog: results.append(\\" \\".join(catalog[query])) else: results.append(\\"None\\") return results"},{"question":"At the factory of a tech-gadget company, there are N (1 ≤ N ≤ 100000) production machines that manufacture gadgets. Currently, each machine is calibrated with distinct speeds that dictate how many gadgets it can produce per minute. The production speed of the i-th machine is denoted by si (1 ≤ si ≤ 100000). The factory supervisor wants to optimize the production process. They aim to ensure that no two machines work at full speed simultaneously on any given minute. Therefore, the machines need to be deactivated based on their current speeds to follow the following rule: - On any given minute, only the machines with the k smallest speeds will be active and all other machines with bigger speeds will be deactivated. Here, k is the maximum number of machines that can operate simultaneously without violating the rule. The supervisor wants to know the maximum number of gadgets that can be produced in one minute at peak efficiency. Write a program that takes N production speeds and identifies the maximum number of gadgets that can be produced in one minute by strictly following the aforementioned condition. # Input - The first line contains a single integer N, the number of machines. - The second line contains N distinct integers where the i-th integer represents si, the production speed of the i-th machine. # Output - Print a single integer, the maximum number of gadgets that can be produced in one minute under the optimal machine operation conditions. # Example Input ``` 5 3 1 5 7 4 ``` Output ``` 20 ``` Input ``` 6 6 3 8 2 9 5 ``` Output ``` 33 ```","solution":"def max_gadgets_per_minute(N, speeds): Returns the maximum number of gadgets that can be produced in one minute given the constraints. Parameters: N (int): The number of machines. speeds (List[int]): List of machines\' speeds. Returns: int: Maximum number of gadgets that can be produced in one minute. # Sort the speeds in descending order so we can easily pick the k smallest values speeds.sort(reverse=True) # Find the sum of all speeds since each speed represents gadgets produced per minute total_gadgets = sum(speeds) return total_gadgets # Example usage # N = int(input()) # speeds = list(map(int, input().split())) # print(max_gadgets_per_minute(N, speeds))"},{"question":"You are given a non-negative integer n and an integer d such that 0 le d le 9. The goal is to determine how many times the digit d appears in the decimal representation of n. For example, if n=12345 and d=3, the digit 3 appears once. -----Input----- The first line contains the integer n (0 le n le 10^{18}) — the integer whose digits need to be analyzed. The second line contains the integer d (0 le d le 9) — the digit you are looking for. The input guarantees that n will be a non-negative integer. -----Output----- Print the number of times the digit d appears in the decimal representation of n. -----Examples----- Input 12034 2 Output 1 Input 99999 9 Output 5 Input 0 0 Output 1 Input 123456789 6 Output 1 -----Note----- In the first example, the digit 2 appears once in the number 12034. In the second example, the digit 9 appears five times in the number 99999. In the third example, the digit 0 appears once in the number 0. In the fourth example, the digit 6 appears once in the number 123456789.","solution":"def count_digit_occurrences(n, d): Returns the number of times digit d appears in the decimal representation of n. return str(n).count(str(d))"},{"question":"Kavita has a strong interest in data analysis and has recently been working on creating a function to determine the mode(s) of a list of integers. The mode is the number that appears most frequently in a data set. If there are multiple modes, she wants to list all of them in ascending order. You need to write a function to help Kavita find the mode(s) of a list of integers. Input The first line contains the integer \'n\' (1 ≤ n ≤ 10^5), the number of integers in the list. The second line contains \'n\' space-separated integers, each within the range (0 ≤ integer ≤ 10^6). Output Print the mode(s) of the list in ascending order. If there are multiple modes, they should be printed on the same line, separated by spaces. Make sure there is a newline at the end of the output. SAMPLE INPUT 10 1 2 2 3 3 4 4 4 5 6 SAMPLE OUTPUT 4","solution":"from collections import Counter def find_modes(n, nums): Determines the mode(s) of a list of integers. Args: n : int - number of integers in the list. nums : list of int - list of integers. Returns: list of int - list of mode(s) in ascending order. counter = Counter(nums) max_frequency = max(counter.values()) modes = [num for num, freq in counter.items() if freq == max_frequency] return sorted(modes)"},{"question":"Given a list of words, two words are considered to \\"circle\\" each other if assigning all the letters of one word in a circular manner can produce the other word. For example, the words \\"abb\\" and \\"bba\\" circle each other because, when arranged circularly, the first can become the second. Write a function that takes a list of words and a target word, and determines the number of words in the list that circle the target word. -----Input----- The first line contains a single integer n (1 <= n <= 10^5), the number of words in the list. The second line contains a string, the target word. The next n lines each contain a string, representing the words in the list. All strings only contain lowercase letters and have lengths between 1 and 1000. -----Output----- Print a single integer, the number of words that circle the target word. -----Example----- Input 5 abc bca cab acb cba bac Output 2 Input 3 abcd dabc bcda abdc Output 2 -----Note----- Sample 1. The target word is \\"abc\\". The words \\"bca\\" and \\"cab\\" can be rotated to match the target word, so the answer is 2. Sample 2. The target word is \\"abcd\\". The words \\"dabc\\" and \\"bcda\\" can be rotated to match the target word, but \\"abdc\\" cannot, so the answer is 2.","solution":"def number_of_circling_words(n, target, words): def circles_each_other(word1, word2): return len(word1) == len(word2) and word2 in (word1 * 2) count = 0 for word in words: if circles_each_other(target, word): count += 1 return count"},{"question":"Arthur is planning a tour for his band across multiple cities. The cities are connected by a network of roads. His goal is to visit every city exactly once, starting from a particular city. Arthur wants to ensure that his tour route is the shortest possible. You are asked to help Arthur determine this shortest route. Given the details of the cities and the roads that connect them, your task is to find the minimum distance Arthur will travel to visit each city exactly once and return to the starting city. -----Input----- The first line of input contains a single integer n (2 ≤ n ≤ 15) — the number of cities. The following n lines contain n integers each, where the j-th integer in the i-th line represents the distance between city i and city j (0 ≤ distance ≤ 1000). Note that the distance matrix is symmetric and the distance from a city to itself is always 0. -----Output----- Output a single integer — the minimum distance Arthur has to travel to visit every city exactly once and return to the starting city. -----Examples----- Input: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output: 80 Input: 3 0 1 10 1 0 12 10 12 0 Output: 23","solution":"import itertools def calculate_min_tour_distance(n, distances): Calculates the minimum distance required to visit all cities exactly once and return to the starting city. Args: n (int): The number of cities. distances (list of list of int): A matrix where the j-th integer in the i-th list represents the distance between city i and city j. Returns: int: The minimum distance of the tour. # Generate all permutations of cities except the first one to calculate the minimal tour route cities = list(range(n)) min_tour_distance = float(\'inf\') for perm in itertools.permutations(cities[1:]): current_distance = 0 current_path = [0] + list(perm) + [0] for i in range(len(current_path) - 1): current_distance += distances[current_path[i]][current_path[i + 1]] min_tour_distance = min(min_tour_distance, current_distance) return min_tour_distance # Example usage # n = 4 # distances = [[0, 10, 15, 20], # [10, 0, 35, 25], # [15, 35, 0, 30], # [20, 25, 30, 0]] # print(calculate_min_tour_distance(n, distances)) # Output: 80"},{"question":"You are given a sequence of integers that represent the altitude changes during a hike. Your task is to determine the length of the longest continuous segment of the hike where the altitude is non-decreasing. -----Input----- The input consists of: - The first line contains a single integer t (1 le t le 1000) — the number of test cases. Each of the next t lines describe a test case: - The first line of each test case contains an integer n (1 le n le 100000), the number of altitude changes. - The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) representing the altitude changes. -----Output----- For each test case, print the length of the longest continuous non-decreasing segment in the sequence. -----Examples----- Input 3 5 1 2 2 1 2 3 3 3 3 4 4 3 2 3 Output 3 3 2 -----Note----- In the first test case, the longest non-decreasing segment is \\"1 2 2\\" which has a length of 3. In the second test case, the entire sequence is non-decreasing so the length is 3. In the third test case, there are two non-decreasing segments \\"3\\" and \\"2 3\\" each having a length of 2. Hence the output is 2.","solution":"def longest_non_decreasing_segment(t, test_cases): results = [] for _ in range(t): n = test_cases[_][0] altitudes = test_cases[_][1] if n == 0: results.append(0) continue max_length = 1 current_length = 1 for i in range(1, n): if altitudes[i] >= altitudes[i-1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 if current_length > max_length: max_length = current_length results.append(max_length) return results"},{"question":"Write a function `unpaired_element` that takes a list of integers as input and returns the element that appears an odd number of times. You can assume there\'s exactly one such element in the list. For example: ```python unpaired_element([2, 3, 2, 4, 4, 5, 3]) == 5 unpaired_element([10, 15, 10, 30, 30]) == 15 unpaired_element([20, 1, 1, 20, 1, 50, 50]) == 1 ``` Your function should efficiently determine the unpaired element regardless of the list size.","solution":"def unpaired_element(arr): Returns the element that appears an odd number of times in the list. Assumes exactly one such element exists. xor_result = 0 for num in arr: xor_result ^= num return xor_result"},{"question":"Write a function that performs basic string compression using the counts of repeated characters. If the compressed string is not smaller than the original string, it should return the original string. For example: ```python compress(\\"aabcccccaaa\\") => \\"a2b1c5a3\\" compress(\\"abcdef\\") => \\"abcdef\\" compress(\\"aaa\\") => \\"a3\\" compress(\\"aabb\\") => \\"aabb\\" ``` # Constraints: - The function should be case-sensitive, meaning \\"a\\" and \\"A\\" should be treated as different characters. - The input string consists only of alphabetic characters (both uppercase and lowercase). Good luck!","solution":"def compress(input_string): Performs basic string compression using the counts of repeated characters. If the compressed string is not smaller than the original string, it returns the original string. if not input_string: return input_string compressed = [] count = 1 for i in range(1, len(input_string)): if input_string[i] == input_string[i - 1]: count += 1 else: compressed.append(input_string[i - 1] + str(count)) count = 1 compressed.append(input_string[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(input_string) else input_string"},{"question":"Given an integer N, return \\"Prime\\" if the number is a prime number, otherwise return \\"Not Prime\\". Note: 1 is not considered a prime number. Example 1: Input: 7 Output: Prime Example 2: Input: 10 Output: Not Prime Your Task: You don\'t need to read input or print anything. Your task is to complete the function checkPrime() which takes an integer and returns \\"Prime\\" if the number is a prime number, otherwise returns \\"Not Prime\\". Expected Time Complexity: O(sqrt(N)) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10000","solution":"def checkPrime(N): Returns \\"Prime\\" if N is a prime number, otherwise returns \\"Not Prime\\". if N <= 1: return \\"Not Prime\\" if N <= 3: return \\"Prime\\" if N % 2 == 0 or N % 3 == 0: return \\"Not Prime\\" i = 5 while i * i <= N: if N % i == 0 or N % (i + 2) == 0: return \\"Not Prime\\" i += 6 return \\"Prime\\""},{"question":"Task Write a function that takes a string representing a Roman numeral and converts it to an integer. The string will be a valid Roman numeral in the range from 1 to 3999. Examples ``` romanToInt(\\"III\\") == 3 romanToInt(\\"IX\\") == 9 romanToInt(\\"MCMXCIV\\") == 1994 ```","solution":"def romanToInt(s): Converts a given Roman numeral string to an integer. Parameters: s (str): A valid Roman numeral string in the range from 1 to 3999. Returns: int: The integer representation of the Roman numeral. roman_to_int = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_to_int[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"A company manages a network of computers organized in a hierarchical structure, where each computer can have multiple direct child computers, but only one direct parent (except for the root computer which has no parent). Each computer is identified by a unique integer ID. The company wants to ensure the security of their network by establishing secure channels between every pair of computers through their common ancestors. The security team has requested a function that takes a list of parent-child relationships and determines the lowest common ancestor (LCA) of two given computers. The LCA of two computers u and v is defined as the lowest (i.e., deepest) node that has both u and v as descendants. Write a function to find the LCA of two nodes in the computer network. Your function should efficiently compute the LCA given the parent-child relationships. Example 1: Input: n = 7 edges = [(1,2), (1,3), (3,4), (3,5), (4,6), (4,7)] u = 6 v = 7 Output: 4 Explanation: The hierarchy is as follows: 1 / 2 3 / 4 5 / 6 7 The LCA of nodes 6 and 7 is node 4. Example 2: Input: n = 5 edges = [(1,2), (1,3), (2,4), (2,5)] u = 4 v = 5 Output: 2 Explanation: The hierarchy is as follows: 1 / 2 3 / 4 5 The LCA of nodes 4 and 5 is node 2. Your Task: You do not need to read input or print anything. Your task is to complete the function findLCA() which takes the number of computers n, a list of edges representing the parent-child relationships, and two integers u and v. The function should return the ID of the lowest common ancestor of u and v. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 1000 1 ≤ u, v ≤ n u and v will always exist in the computer network.","solution":"def findLCA(n, edges, u, v): from collections import defaultdict, deque # Build tree and parent structure tree = defaultdict(list) parent = {i: None for i in range(1, n + 1)} for p, c in edges: tree[p].append(c) parent[c] = p def findAncestors(node): ancestors = set() while node is not None: ancestors.add(node) node = parent[node] return ancestors u_ancestors = findAncestors(u) v_ancestors = findAncestors(v) # Find the lowest common ancestor lca = None while u is not None: if u in v_ancestors: lca = u break u = parent[u] return lca"},{"question":"You are given an array of integers representing the heights of students in a queue. Your task is to rearrange the students such that the absolute difference in height between any two consecutive students is minimized. The challenge is to find an ordering of the queue that minimizes the maximum difference between heights of consecutive students. # Input - The first line contains an integer k, the number of test cases (1 leq k leq 10^3). - Each test case consists of two lines: - The first line contains an integer n, the number of students (2 leq n leq 10^5). - The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9), the heights of the students. # Output For each test case, output a single integer which is the minimized maximum difference in height between any two consecutive students in the rearranged queue. # Example Input ``` 2 3 4 2 5 5 10 1 14 9 2 ``` Output ``` 1 4 ``` # Note In the first test case, the optimal arrangement is `[2, 4, 5]`, thus the maximum difference between consecutive students\' heights is 2 (between 4 and 2) and 1 (between 4 and 5). Hence, the minimized maximum difference is 1. In the second test case, the optimal arrangement is `[1, 2, 9, 10, 14]`, thus the maximum difference between consecutive students\' heights is 1, 7, 1, 4. Hence, the minimized maximum difference is 4.","solution":"def minimized_max_difference(heights): Given a list of heights of students, rearranges such that the absolute difference in height between any two consecutive students is minimized. heights.sort() max_diff = float(\'inf\') for i in range(1, len(heights)): max_diff = min(max_diff, heights[i] - heights[i - 1]) return max_diff def process_test_cases(k, test_cases): Process multiple test cases. results = [] for i in range(k): n, heights = test_cases[i] result = minimized_max_difference(heights) results.append(result) return results"},{"question":"Given a matrix of dimensions n x m, you need to determine the number of unique paths from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. Additionally, some cells contain obstacles (denoted by the value 1) which you cannot traverse. Write a function `uniquePaths` that takes the following parameters: - `n` (1 ≤ n ≤ 100): an integer representing the number of rows in the matrix. - `m` (1 ≤ m ≤ 100): an integer representing the number of columns in the matrix. - `matrix`: a list of lists of integers representing the grid where each cell is either 0 (no obstacle) or 1 (obstacle). The function should return the number of unique paths from the top-left corner to the bottom-right corner modulo 10^9 + 7, considering the presence of obstacles. # Input Format - The first line contains two integers, n and m. - The next n lines each contain m space-separated integers, representing the matrix. # Output Format - A single integer: the number of unique paths modulo 10^9 + 7. # Example Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` # Explanation There are two ways to reach the bottom-right corner from the top-left corner: 1. Right -> Down -> Down -> Right 2. Down -> Right -> Right -> Down # Constraints - 1 ≤ n, m ≤ 100 - Each cell in the matrix is either 0 (no obstacle) or 1 (obstacle). The starting and ending cells will always be 0. ```python def uniquePaths(n, m, matrix): MOD = 10**9 + 7 if matrix[0][0] == 1 or matrix[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if matrix[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] % MOD if j > 0: dp[i][j] += dp[i][j-1] % MOD dp[i][j] %= MOD return dp[n-1][m-1] # Example Input # n, m = 3, 3 # matrix = [ # [0, 0, 0], # [0, 1, 0], # [0, 0, 0] # ] # Output # print(uniquePaths(n, m, matrix)) # Output should be 2 ```","solution":"def uniquePaths(n, m, matrix): MOD = 10**9 + 7 if matrix[0][0] == 1 or matrix[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if matrix[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1]"},{"question":"Sarah is an enthusiastic gardener who loves growing different plants in her garden. One day, she decided to arrange her plants in a straight line based on their heights such that no two plants of the same height are positioned next to each other. However, Sarah observed that arranging them manually was quite cumbersome. Sarah has provided you with the height of each plant in the form of an integer array. Your task is to find out if it\'s possible to rearrange the array such that no two adjacent plants have the same height. If it\'s possible, you should print the rearranged list of plant heights. If it\'s not possible, print \\"Not possible\\". Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of plants. The second line contains n positive integers representing the heights of the plants (1 ≤ height ≤ 10^9). Output If it’s possible to rearrange the plant heights such that no two adjacent plants have the same height, print the rearranged list of integers. If not, print \\"Not possible\\". Examples Input 5 3 1 3 2 2 Output 3 1 2 3 2 Input 4 4 4 4 4 Output Not possible Input 6 1 2 2 3 3 4 Output 2 1 3 2 3 4 Note In the first sample, one possible rearrangement is 3 1 2 3 2. In the second sample, it\'s impossible to rearrange as all elements are the same. In the third sample, the output can have multiple possible rearrangements such as 2 1 3 2 3 4 or 3 1 2 3 4 2.","solution":"from collections import Counter import heapq def rearrange_plants(n, heights): if n == 0: return [] # Count the frequency of each height height_counts = Counter(heights) # Max-heap for the heights based on their frequency (-frequency for max-heap) max_heap = [(-freq, height) for height, freq in height_counts.items()] heapq.heapify(max_heap) # Previous plant (initially set to None) prev_freq, prev_height = 0, None result = [] while max_heap: freq, height = heapq.heappop(max_heap) # Add the current plant to the result result.append(height) # If prev plant exists, add it back if -prev_freq > 0: heapq.heappush(max_heap, (prev_freq, prev_height)) # Update the previous plant to the current one with decreased frequency prev_freq, prev_height = freq + 1, height # If the length of the result isn\'t equal to n, it means we failed to rearrange if len(result) != n: return \\"Not possible\\" return result"},{"question":"Farmer John has a plot of land that can be represented by a 2D grid of size n x m, where each cell in the grid can either be planted with a crop or left empty. The land can be modified before planting so that exactly one rectangular subgrid is left blank, while the remaining area is planted with the crop. Farmer John wants you to figure out the possible coordinates for the rectangular subgrid he could leave blank. A rectangular subgrid in the land is defined by two coordinates: the top-left corner (r1, c1) and the bottom-right corner (r2, c2). Write a program to determine all possible coordinates for the subgrid that Farmer John could leave blank such that all planted crops form a single connected component. The rectangular subgrid should contain at least one cell, and all cells outside this subgrid should form a single connected component of cells filled with crops. Two cells are connected if they share a common edge. -----Input----- The first line contains two integers n and m (2 ≤ n, m ≤ 20), the dimensions of the land. -----Output----- Print all possible pairs of coordinates (r1, c1), (r2, c2) of the top-left and bottom-right corners of the rectangle that can be left blank. Each pair should be printed on a new line in the format: (r1, c1) (r2, c2). The coordinates should be printed in increasing order, starting from the top-left corner first and then the bottom-right corner. -----Example----- Input 3 3 Output (0, 0) (0, 0) (0, 0) (0, 1) (0, 0) (0, 2) (0, 0) (1, 0) (0, 0) (2, 0) (0, 1) (0, 1) (0, 1) (0, 2) (0, 1) (1, 1) (0, 1) (2, 1) (0, 2) (0, 2) (0, 2) (1, 2) (0, 2) (2, 2) (1, 0) (1, 0) (1, 0) (1, 1) (1, 0) (1, 2) (1, 0) (2, 0) (1, 1) (1, 1) (1, 1) (1, 2) (1, 1) (2, 1) (1, 2) (1, 2) (1, 2) (2, 2) (2, 0) (2, 0) (2, 0) (2, 1) (2, 0) (2, 2) (2, 1) (2, 1) (2, 1) (2, 2) (2, 2) (2, 2)","solution":"def find_blank_subgrids(n, m): This function returns a list of all possible coordinates for the subgrid that can be left blank such that all planted crops form a single connected component. Each coordinate pair is in the format [(r1, c1), (r2, c2)]. possible_coordinates = [] for r1 in range(n): for c1 in range(m): for r2 in range(r1, n): for c2 in range(c1, m): possible_coordinates.append((r1, c1, r2, c2)) return possible_coordinates # Example usage n, m = 3, 3 results = find_blank_subgrids(n, m) for res in results: print(f\\"({res[0]}, {res[1]}) ({res[2]}, {res[3]})\\")"},{"question":"Write a function that verifies if a given string contains balanced parentheses, curly braces, and square brackets. The string may contain other characters, which should be ignored. The function should return a boolean value — True if the input string is balanced and False otherwise. A string is considered balanced if all the opening brackets have a corresponding and correctly ordered closing bracket. For example: - `\\"()\\"` is balanced. - `\\"(}\\"` is not balanced. - `\\"[()]{}\\"` is balanced. - `\\"[({)]\\"` is not balanced. Input A single string `s` that includes various characters along with parentheses `()`, curly braces `{}`, and square brackets `[]`. Output A single boolean value: `True` if the string is balanced, `False` otherwise. Constraints - The string can be of any length, up to `10^4` characters. Example Input: ```python \\"{}[]()\\" ``` Output: ```python True ``` Input: ```python \\"{[(])}\\" ``` Output: ```python False ``` Input: ```python \\"Hello, [this is (a {sample})]\\" ``` Output: ```python True ``` Input: ```python \\"Unbalanced, [ this (will] not [work) properly\\" ``` Output: ```python False ```","solution":"def is_balanced(s): Returns True if the string contains balanced parentheses (), curly braces {}, and square brackets []. Otherwise, returns False. stack = [] matching_brackets = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_brackets.values(): stack.append(char) elif char in matching_brackets.keys(): if stack == [] or matching_brackets[char] != stack.pop(): return False return stack == []"},{"question":"Background A palindrome is a string that reads the same forward and backward. Given a string, determine the minimum number of characters to remove to make it a palindrome. Input: An integer stating the number of test cases T, and that many lines follow, each containing a string s for which we need to determine the minimal character removal count. Output: One integer each line: the minimum number of characters to remove to make the given string a palindrome. Constraints: 1<=T<=100000 1<= |s| <= 100000 Sample Input 2 abb abc Sample Output 1 2","solution":"def min_removals_to_palindrome(s): Returns the minimum number of characters to remove to make the given string a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for gap in range(1, n): for l in range(n - gap): r = l + gap if s[l] == s[r]: dp[l][r] = dp[l + 1][r - 1] else: dp[l][r] = 1 + min(dp[l + 1][r], dp[l][r - 1]) return dp[0][n - 1] def process_input(input_data): input_lines = input_data.split(\\"n\\") T = int(input_lines[0]) results = [] for i in range(1, T + 1): results.append(str(min_removals_to_palindrome(input_lines[i]))) return \\"n\\".join(results)"},{"question":"You are given a list of `n` integers separated by whitespace representing the heights of `n` buildings. You need to find the largest rectangular area possible in a histogram that is formed by these buildings. Each building\'s width is 1. The heights are given in the same order as they are in the list. -----Input----- The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. For each test case, the first line contains a single integer `n` (1 ≤ n ≤ 10^5), the number of buildings. The second line contains `n` integers (1 ≤ height ≤ 10^6), separated by whitespace, representing the heights of the buildings. The sum of ‘n’ over all test cases does not exceed 10^5. -----Output----- For each test case, print the maximum rectangular area possible in a separate line. -----Examples----- Input 2 7 6 2 5 4 5 1 6 4 2 4 6 8 Output 12 12 -----Note----- In the first example, the largest rectangle can be obtained when width spans the buildings from second to fifth one with height being 4. In the second example, the largest rectangle can be obtained by the third building or the fourth, each giving 12 as the maximum area.","solution":"def largest_rectangle_area(hist): stack = [] max_area = 0 index = 0 while index < len(hist): if not stack or hist[index] >= hist[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (hist[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (hist[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def largest_rectangle_in_histogram(test_cases): results = [] for buildings in test_cases: results.append(largest_rectangle_area(buildings)) return results"},{"question":"You have two positive integers n and m. Your task is to count the number of rectangles that satisfy the following conditions: * Have positive area. * Each side is parallel to one of the axes. * All vertices of the rectangles are located inside or on the border of the grid with vertices at points (0, 0), (m, 0), (m, n), (0, n). In other words, for all vertices (xi, yi) of the rectangle the following conditions should be fulfilled: 0 ≤ xi ≤ m and 0 ≤ yi ≤ n. Count the number of such rectangles. Input The first line contains two integers n and m (1 ≤ n, m ≤ 4000) — the grid\'s sizes. Output Print a single number — the number of sought rectangles. Examples Input 2 2 Output 9 Input 1 3 Output 6 Note In the first example, there are 9 such rectangles, they can be formed using the following vertex pairs: - (0, 0), (1, 1) - (1, 1), (2, 2) - (0, 1), (1, 2) - (1, 0), (2, 1) - (0, 0), (2, 2) - (0, 1), (2, 2) - (1, 0), (2, 2) - (0, 0), (1, 2) - (1, 1), (2, 2) In the second example, there are 6 such rectangles, they can be formed using the following vertex pairs: - (0, 0), (1, 1) - (0, 0), (1, 2) - (0, 1), (1, 2) - (1, 0), (2, 1) - (1, 0), (2, 2) - (1, 1), (2, 2)","solution":"def count_rectangles(n, m): Returns the number of rectangles that can be formed in an n by m grid. return (n * (n + 1) * m * (m + 1)) // 4"},{"question":"You are tasked with developing a program for a small library to manage their book inventory. Each book has a title, an author, a genre, and a publication year. The library maintains a list of books and allows users to search for books based on these attributes. Your task is to create a function that filters and returns a list of book titles that match a given search criteria. # Requirements Write a function `search_books(library, criteria)` that accepts the following parameters: - `library` (list): A list of dictionaries where each dictionary represents a book with the following keys: `\\"title\\"`, `\\"author\\"`, `\\"genre\\"`, and `\\"year\\"`. - `criteria` (dictionary): A dictionary containing one or more of the keys `\\"title\\"`, `\\"author\\"`, `\\"genre\\"`, and `\\"year\\"`, and their corresponding values to search for. The function should return a list of book titles that match all the given search criteria. The search should be case-insensitive. # Input - `library`: A list of dictionaries with up to 100,000 books. - `criteria`: A dictionary containing one or more of the following keys: `\\"title\\"`, `\\"author\\"`, `\\"genre\\"`, `\\"year\\"`. The length of the values of `\\"title\\"`, `\\"author\\"`, and `\\"genre\\"` are up to 100 characters. # Output - A list of titles of the books that match all the search criteria. # Example ```python library = [ {\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"genre\\": \\"Fiction\\", \\"year\\": 1960}, {\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"genre\\": \\"Dystopian\\", \\"year\\": 1949}, {\\"title\\": \\"Moby Dick\\", \\"author\\": \\"Herman Melville\\", \\"genre\\": \\"Adventure\\", \\"year\\": 1851}, {\\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"genre\\": \\"Fiction\\", \\"year\\": 1925} ] criteria = {\\"author\\": \\"George Orwell\\"} # Output should be: [\\"1984\\"] criteria = {\\"genre\\": \\"Fiction\\", \\"year\\": 1960} # Output should be: [\\"To Kill a Mockingbird\\"] criteria = {\\"title\\": \\"the great gatsby\\"} # Output should be: [\\"The Great Gatsby\\"] ``` # Constraints - The search is case-insensitive. - If no books match the criteria, return an empty list. - If `criteria` is empty, return the titles of all books in the library.","solution":"def search_books(library, criteria): Returns a list of book titles that match the given search criteria. Parameters: - library (list): A list of dictionaries with book details. - criteria (dictionary): A dictionary containing search parameters. Returns: - list: List of titles that match the search criteria. def matches_criteria(book, criteria): for key, value in criteria.items(): if key in book: if isinstance(book[key], str) and not book[key].lower() == value.lower(): return False elif isinstance(book[key], int) and not book[key] == value: return False return True result = [] for book in library: if matches_criteria(book, criteria): result.append(book[\'title\']) return result"},{"question":"A delivery company in your city has introduced electric scooters for their delivery staff. These electric scooters have a maximum speed of s km/h and can accelerate continuously at a rate of \'a\' km/h² until they reach this maximum speed. The battery level of the scooters is limited and can provide \'b\' km of travel distance on a full charge. You are tasked to determine if a delivery person can complete a delivery round trip from the company\'s base to a customer\'s house and back without needing to recharge the scooter. Input The first line of input contains three integers s, a, and b (1 ≤ s, a ≤ 1000; 1 ≤ b ≤ 10000). The second line contains one integer d (1 ≤ d ≤ 10000), which is the distance from the company\'s base to the customer\'s house. Output Print \\"YES\\" if the scooter can complete the delivery round trip without recharging, otherwise print \\"NO\\". Examples Input 20 5 50 15 Output YES Input 15 3 30 20 Output NO","solution":"def can_complete_trip(s, a, b, d): Determines if the scooter can complete the trip from base to customer\'s house and back. :param s: Maximum speed of scooter in km/h :param a: Acceleration rate in km/h² :param b: Battery range in km :param d: Distance from base to customer\'s house in km :return: \\"YES\\" if the scooter can complete the round trip, \\"NO\\" otherwise round_trip_distance = 2 * d if round_trip_distance <= b: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers consisting of n positive numbers, you need to rearrange the elements of the array such that the difference between every two consecutive elements is unique. If there are multiple valid rearrangements, print any of them. -----Input----- The first line contains an integer n (2 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) — the elements of the array. -----Output----- If it\'s possible to rearrange the array so that the differences between consecutive elements are unique, print the rearranged array in a single line. If no such rearrangement exists, print \\"NO\\". -----Examples----- Input 5 4 1 3 7 2 Output 2 1 3 4 7 Input 3 1 1 1 Output NO","solution":"def rearrange_unique_differences(n, arr): arr.sort() for i in range(n-1): if arr[i] == arr[i+1]: return \\"NO\\" return \\" \\".join(map(str, arr))"},{"question":"You are working on a text-editor program. One of the features requested is the ability to find and replace words within a string. Implement a function that performs this task. Specifically, the function should find all occurrences of a target word within a given text and replace them with a replacement word. The function should ensure that the replacement does not affect any part of another word. For example, if the target word is \\"cat\\" and the text is \\"concatenate cat category\\", the function should only replace the standalone occurrence of \\"cat\\" and not the part of the word \\"concatenate\\" or \\"category\\". The function signature should be: ```python def find_and_replace(text: str, target: str, replacement: str) -> str: ``` # Input The function will receive three parameters: - `text`: The original string, which may contain multiple words separated by spaces (1 ≤ length of text ≤ 1000). - `target`: The word to be replaced (1 ≤ length of target ≤ 50). - `replacement`: The word to replace the target word with (1 ≤ length of replacement ≤ 50). # Output The function should return a new string where all occurrences of the target word in the original text are replaced with the replacement word. # Example ```python print(find_and_replace(\\"The cat sat on the catwalk\\", \\"cat\\", \\"dog\\")) ``` Output ``` The dog sat on the catwalk ``` ```python print(find_and_replace(\\"The quick brown fox jumps over the lazy dog\\", \\"jumps\\", \\"leaps\\")) ``` Output ``` The quick brown fox leaps over the lazy dog ``` # Constraints - You can assume that words in the input text are separated by spaces and there are no leading or trailing spaces in the input text. - The function should preserve the spaces and the order of the words while performing the replacement.","solution":"def find_and_replace(text: str, target: str, replacement: str) -> str: Replaces all standalone occurrences of the target word in text with the replacement word. words = text.split() for i in range(len(words)): if words[i] == target: words[i] = replacement return \' \'.join(words)"},{"question":"Given an array of integers, determine if there are three entries that add up to a specified target sum. Write a function that returns such three numbers if they exist, otherwise return an empty array. ``` For example: Input: arr = [1, 2, 3, 4, 5, 6], target = 10 Output: [1, 3, 6] or any other valid combination Input: arr = [1, 2, 4, 5, 6], target = 20 Output: [] (since no three numbers add up to 20) Input: arr = [-1, 0, 1, 2, -1, -4], target = 0 Output: [-1, 0, 1] or [-1, -1, 2] Note: The same element cannot be used more than once. If there are multiple answers, return any one of them. ``` More examples in test cases. Good luck!","solution":"def find_three_numbers_sum(arr, target): Given an array of integers, determine if there are three entries that add up to a specified target sum. Return such three numbers if they exist, otherwise return an empty array. arr.sort() n = len(arr) for i in range(n - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return [arr[i], arr[left], arr[right]] elif current_sum < target: left += 1 else: right -= 1 return []"},{"question":"Given a string S consisting of lowercase Latin Letters. You have to remove the consecutive duplicate characters from the string and return the new string. Example 1: Input: S = \\"aaabbaaccd\\" Output: \\"abacd\\" Explanation: Removed the consecutive duplicate characters, so the new string is \\"abacd\\". Example 2: Input: S = \\"aabbcc\\" Output: \\"abc\\" Explanation: Removed the consecutive duplicate characters, so the new string is \\"abc\\". Your Task: You do not need to read or print anything. Your task is to complete the function removeConsecutiveDuplicates() which takes a string S as input parameter and returns the modified string. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= length of S <= 10^5","solution":"def removeConsecutiveDuplicates(S): Removes consecutive duplicate characters from the string S and returns the new string. if not S: return S result = [S[0]] for char in S[1:]: if char != result[-1]: result.append(char) return \'\'.join(result)"},{"question":"Write a function to compute the minimum travel cost between different cities using the given road network. * The function should take one parameter: a list of tuples where each tuple represents a direct road between two cities and its travel cost. Each tuple is structured as follows: (city1, city2, cost). * The function should return a single number representing the minimum cost required to connect all the cities in the road network. **Further points:** * Assume that the cities are represented as strings and the costs as positive integers. * If it\'s impossible to connect all the cities, the function should return -1. # Example Given the road network: [(\\"A\\", \\"B\\", 1), (\\"B\\", \\"C\\", 2), (\\"A\\", \\"C\\", 4)], the function should return 3, which is the minimum total cost (using roads \\"A\\" to \\"B\\" and \\"B\\" to \\"C\\").","solution":"def minimum_travel_cost(roads): Returns the minimum cost required to connect all the cities in the road network, or -1 if it\'s impossible. if not roads: return -1 from collections import defaultdict import heapq # Create an adjacency list graph = defaultdict(list) for city1, city2, cost in roads: graph[city1].append((cost, city2)) graph[city2].append((cost, city1)) # Use Prim\'s algorithm to find the minimum spanning tree start_city = next(iter(graph)) min_heap = [(0, start_city)] visited = set() total_cost = 0 edges_used = 0 while min_heap: cost, city = heapq.heappop(min_heap) if city in visited: continue visited.add(city) total_cost += cost edges_used += 1 for next_cost, neighbor in graph[city]: if neighbor not in visited: heapq.heappush(min_heap, (next_cost, neighbor)) # To connect all cities, the MST should have exactly len(graph) - 1 edges if edges_used == len(graph): return total_cost else: return -1"},{"question":"Given a positive integer `n`, find the smallest positive integer that you can create by concatenating the numbers from 1 to `n` inclusive, exactly once each, in a different order. If it\'s not possible to create such an integer, return `-1`. Note: - The concatenation of a sequence of integers means placing them one after another and treating them as a single number. - Integers should be treated as strings during concatenation to avoid numerical addition. # Input - The first line contains the number of test cases `t` (`1 <= t <= 100`). - The next `t` lines contain a single integer `n` (`1 <= n <= 10`). # Output For each test case, print the smallest concatenation possible as a single integer or `-1` if it\'s not possible. # Examples Input ```plaintext 3 3 5 10 ``` Output ```plaintext 123 12345 12345678910 ``` # Note In the first example: - For `n = 3`, the possible concatenations are `123`, `132`, `213`, `231`, `312`, and `321`. - The smallest concatenation is `123`. In the second example: - For `n = 5`, the smallest concatenation of numbers from `1` to `5` is `12345`. In the third example: - For `n = 10`, the smallest concatenation of numbers from `1` to `10` is `12345678910`.","solution":"def smallest_concatenation(n): Returns the smallest concatenation of the numbers from 1 to n as a single integer. If it\'s not possible, returns -1. if n < 1: return -1 return int(\\"\\".join(str(i) for i in range(1, n + 1))) def solve(t, cases): results = [] for n in cases: results.append(smallest_concatenation(n)) return results"},{"question":"Given a string representation of a binary number, write a function to determine if it is a power of two. Return `true` if the binary representation indicates a power of two, and `false` otherwise. Do not convert the binary string to a decimal number during the process. Examples ``` \\"isPowerOfTwo(\'1000\')\\" ==> false // 8 in decimal \\"isPowerOfTwo(\'10\')\\" ==> true // 2 in decimal \\"isPowerOfTwo(\'111\')\\" ==> false // 7 in decimal \\"isPowerOfTwo(\'10000\')\\" ==> true // 16 in decimal ```","solution":"def isPowerOfTwo(binary_str): Check if the binary representation indicates a power of two. A number is a power of two if it has exactly one \'1\' bit in its binary representation. return binary_str.count(\'1\') == 1"},{"question":"Alice is playing a game where she needs to traverse through a grid with obstacles. The grid is an `m x n` matrix where each cell can either be an open space or an obstacle. Alice can move up, down, left, or right, but cannot move into a cell with an obstacle. Given the starting position and the ending position of Alice, the task is to determine whether she can reach the destination. If she can, return the minimum number of steps required to reach from the starting position to the ending position. If she cannot reach the destination, return -1. The grid is represented as a 2D array where: - \'0\' represents an open space. - \'1\' represents an obstacle. -----Input----- The first line of the input contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid respectively. The next m lines contain n characters each (\'0\' or \'1\'), representing the grid. The next line contains two integers r1 and c1 (0 ≤ r1 < m, 0 ≤ c1 < n) — the starting position. The last line contains two integers r2 and c2 (0 ≤ r2 < m, 0 ≤ c2 < n) — the ending position. -----Output----- Print the minimum number of steps required to go from the starting position to the ending position. If it is not possible, print -1. -----Examples----- Input 5 5 00000 00100 00000 01010 00000 0 0 4 4 Output 8 Input 3 3 010 010 010 0 0 2 2 Output -1 -----Note----- In the first example, Alice can move along the path to reach the ending position (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (3,4) -> (4,4), making 8 moves. In the second example, there is no path such that Alice can move from (0,0) to (2,2) without encountering an obstacle, thus the output is -1.","solution":"from collections import deque def min_steps_to_reach_destination(grid, start, end): m, n = len(grid), len(grid[0]) r1, c1 = start r2, c2 = end if grid[r1][c1] == \'1\' or grid[r2][c2] == \'1\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(n)] for _ in range(m)] queue = deque([(r1, c1, 0)]) visited[r1][c1] = True while queue: x, y, dist = queue.popleft() if (x, y) == (r2, c2): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'0\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"Write a function that takes a string consisting of lowercase alphabets and returns the first non-repeating character. If there is no non-repeating character, return an underscore (\'_\'). For example, the input string \\"aabbccdde\\" should return \\"e\\" since \\"e\\" is the first character that doesn\'t repeat in the string. The input string \\"aabb\\" should return \\"_\\" since every character repeats.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If there is no non-repeating character, returns \'_\'. from collections import OrderedDict char_count = OrderedDict() for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char, count in char_count.items(): if count == 1: return char return \'_\'"},{"question":"A parade is scheduled in your city, and a group of performers will march along a straight road. The length of the road is L meters, and the parade sequence should be such that no two performers with the same skill level can march next to each other to avoid confusion among the audience. Given an array where each element represents the skill level of a performer, determine if it is possible to arrange the performers such that no two performers with the same skill level march next to each other. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains integer N, the number of performers. - The second line contains N space-separated integers, where each integer represents the skill level of a performer. ------ Output Format ------ For each test case, output \\"YES\\" if it is possible to arrange the performers so that no two performers with the same skill level are adjacent, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ Skill level ≤ 10^{5} ----- Sample Input 1 ------ 3 5 1 2 3 2 1 4 1 1 1 1 6 1 2 3 4 5 6 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test case 1: One possible arrangement is [1, 2, 1, 3, 2]. Test case 2: All performers have the same skill level, so it is impossible to arrange them without having two of the same skill level adjacent. Test case 3: All performers have distinct skill levels, so it is trivially possible to arrange them.","solution":"from collections import Counter import heapq def can_arrange_performers(N, skill_levels): if N == 1: return \\"YES\\" # Count frequency of each skill level freq = Counter(skill_levels) # Place all counts in a max heap as negative values to simulate max-heap using min-heap max_heap = [-count for count in freq.values()] heapq.heapify(max_heap) # Get the maximum frequency max_freq = -max_heap[0] # Check if the maximum frequency is more than half the length of performers (rounded up) if max_freq > (N + 1) // 2: return \\"NO\\" return \\"YES\\" def process_test_cases(T, test_cases): results = [] for N, skill_levels in test_cases: results.append(can_arrange_performers(N, skill_levels)) return results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) idx = 1 test_cases = [] for _ in range(T): N = int(data[idx]) skill_levels = list(map(int, data[idx+1:idx+1+N])) test_cases.append((N, skill_levels)) idx += (N + 1) results = process_test_cases(T, test_cases) for result in results: print(result)"},{"question":"A company is developing a new software tool, and they need to manage a list of employees. Each employee has a unique ID and a specific role in the company. There are three types of operations that can be performed on the list of employees: 1. Add an employee with a unique ID and a role to the list. 2. Update the role of an existing employee. 3. Query to find out how many employees have a specific role in the listed subset. Your task is to implement these operations. Input The input starts with a line containing two integers N and Q (1 ≤ N, Q ≤ 100 000) representing the initial number of employees and the number of operations, respectively. The next line contains N integers, where each integer is the role of the ith employee (1 ≤ role ≤ 100 000). The next Q lines each contain a query. These queries can be one of three types: * 1 ID role - Add a new employee with the unique ID and the given role. The unique ID will be the next integer not previously used. * 2 ID role - Update the role of the employee with the given ID. * 3 L R role - Return the number of employees with the given role in the contiguous subarray of employees from index L to R (1-based inclusive). Output For each query of type 3, output a line containing one integer, the number of employees with the given role in the specified subarray. Example Input 5 4 1 2 3 4 5 1 6 1 2 2 3 3 1 5 1 3 2 4 3 Output 2 1 Note Explanation for the sample input: * Initial list of employees\' roles: [1, 2, 3, 4, 5] * After the first operation, the list becomes [1, 2, 3, 4, 5, 1] (adding employee with ID 6 and role 1). * After the second operation, the list becomes [1, 3, 3, 4, 5, 1] (updating role of employee with ID 2 to role 3). * The third query asks for count of role 1 in employees from index 1 to 5, which are [1, 3, 3, 4, 5], so the answer is 1. * The fourth query asks for count of role 3 in employees from index 2 to 4, which are [3, 3, 4], so the answer is 2.","solution":"class EmployeeManager: def __init__(self, roles): self.employees = roles self.id_map = {i+1: i for i in range(len(roles))} def add_employee(self, role): self.employees.append(role) self.id_map[len(self.employees)] = len(self.employees) - 1 def update_role(self, id, new_role): index = self.id_map[id] self.employees[index] = new_role def query_role_count(self, L, R, role): return sum(1 for i in range(L-1, R) if self.employees[i] == role) # Function to handle the operations def handle_operations(N, Q, roles, operations): manager = EmployeeManager(roles) results = [] for op in operations: if op[0] == 1: manager.add_employee(op[2]) elif op[0] == 2: manager.update_role(op[1], op[2]) elif op[0] == 3: results.append(manager.query_role_count(op[1], op[2], op[3])) return results"},{"question":"A museum has n exhibits labeled from 1 to n. Each exhibit has a distinct guard who occasionally falls asleep. The guards have a guard schedule table indicating the time intervals during which they are asleep. Your task is to determine the maximum number of exhibits that can be left unguarded simultaneously during any interval. You are given: - An integer n, the number of exhibits. - An integer m, the number of sleep intervals across all guards. - A 2D list `intervals` of size `m`, where each interval contains three integers `[g, start, end]` indicating that guard g is asleep from time `start` to time `end` (inclusive). Your task is to complete the function `maxUnguardedExhibits()`: ```python def maxUnguardedExhibits(n: int, m: int, intervals: List[List[int]]) -> int: pass ``` **Parameters:** - `n` (int): the number of exhibits. - `m` (int): the number of sleep intervals. - `intervals` (List[List[int]]): a list of lists where each sublist contains three integers representing a guard and their sleep interval. **Returns:** - `int`: the maximum number of exhibits left unguarded simultaneously. **Input Format:** - The first line contains two space-separated integers n and m, the number of exhibits and the number of sleep intervals. - Each of the next m lines contains three space-separated integers g, start, and end. **Constraints:** - 1 leq n leq 10^5 - 1 leq m leq 10^5 - 1 leq g leq n - 0 leq start < end leq 10^9 **Example Input 1:** ``` 5 4 1 1 5 2 2 6 3 3 7 4 4 8 ``` **Example Output 1:** ``` 4 ``` **Explanation 1:** Guards for exhibits 1, 2, 3, and 4 are asleep at time intervals that overlap, leaving 4 exhibits unguarded simultaneously. **Example Input 2:** ``` 3 3 1 1 3 2 4 6 3 2 5 ``` **Example Output 2:** ``` 2 ``` **Explanation 2:** The maximum overlap occurs between intervals `[1, 3]` for guard 1 and `[2, 5]` for guard 3, leaving 2 exhibits unguarded simultaneously.","solution":"from typing import List def maxUnguardedExhibits(n: int, m: int, intervals: List[List[int]]) -> int: from collections import defaultdict import heapq events = [] for interval in intervals: guard, start, end = interval events.append((start, 1, guard)) events.append((end+1, -1, guard)) events.sort() max_unguarded = 0 current_unguarded = 0 active_guards = set() guard_times = {} for time, event_type, guard in events: if event_type == 1: active_guards.add(guard) current_unguarded += 1 guard_times[guard] = time max_unguarded = max(max_unguarded, current_unguarded) else: if guard in active_guards: active_guards.remove(guard) current_unguarded -= 1 return max_unguarded"},{"question":"Create a function that takes a list of integers and returns a new list with each integer squared, but without duplicating any of the squared values. The order of the output list should be the same as the order of first occurrence of their squares in the input list. EXAMPLES [2, -2, 3, 2, -3, 4] becomes [4, 9, 16] [1, 1, 2, 3, 4, 5] becomes [1, 4, 9, 16, 25] [-1, -1, -2, -3, -4, -5] becomes [1, 4, 9, 16, 25]","solution":"def unique_squares(nums): Takes a list of integers and returns a new list with each integer squared, without duplicating any of the squared values. The order of the output list is the same as the order of the first occurrence of their squares in the input list. seen = set() result = [] for num in nums: square = num ** 2 if square not in seen: seen.add(square) result.append(square) return result"},{"question":"A team of archaeologists is deciphering an ancient numeric code inscribed on stones found at a site. The code forms a unique triangle pattern based on a provided number. Your task is to help them generate this pattern. -----Input:----- - First line will contain an integer N, the number of stones with inscriptions. - The next N lines will contain one integer M denoting the base length of the triangle for each stone. -----Output:----- For each stone, output the corresponding triangle pattern. -----Constraints----- - 1 leq N leq 50 - 1 leq M leq 50 -----Sample Input:----- 3 2 3 4 -----Sample Output:----- 1 12 1 23 123 1 34 234 1234 -----Explanation:----- For each stone: 1. The height of the triangle is equal to the base length M. 2. Each row i starts with number i and increases the numbers sequentially up to M.","solution":"def generate_triangle(base_length): Generate a triangle pattern of numbers with the specified base length. Args: base_length (int): The base length and the height of the triangle. Returns: List[str]: A list of strings representing each row of the triangle. triangle = [] for i in range(1, base_length + 1): row = \'\'.join(str((i + j) % 10) for j in range(base_length)) triangle.append(row) return triangle def generate_patterns(n, base_lengths): Generate triangle patterns for multiple stones. Args: n (int): Number of stones. base_lengths (List[int]): List of base lengths for each stone. Returns: List[List[str]]: A list containing the triangle patterns for each stone. patterns = [] for base_length in base_lengths: patterns.append(generate_triangle(base_length)) return patterns # Example usage: # n = 3 # base_lengths = [2, 3, 4] # patterns = generate_patterns(n, base_lengths) # for pattern in patterns: # for row in pattern: # print(row) # print()"},{"question":"------ Problem Statement ------ We are given an array of integers, where every element appears twice except for one. Find that single one. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? ------ Input ------ - The first line of the input contains an integer T denoting the number of test cases. - The first line of each test case contains an integer N (the size of the array). - The following line contains N space-separated integers, representing the elements of the array. ------ Output ------ For each test case, output a single line containing the integer that appears only once. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 0 ≤ array elements ≤ 10^9 ------ Example ------ Input: 2 3 2 2 1 5 4 1 2 1 2 Output: 1 4 Hint: The XOR operation can be used to solve this in linear time without using extra memory. For any integer x, x ^ x = 0 and x ^ 0 = x.","solution":"def find_single_number(nums): Returns the number that appears only once in the array. xor_sum = 0 for num in nums: xor_sum ^= num return xor_sum def solve_single_number_problem(test_cases): results = [] for nums in test_cases: results.append(find_single_number(nums)) return results"},{"question":"You are given an array of n integers. You must perform exactly n operations on the array to form a new array B. In each operation you can either choose the minimum element m from the array and remove it, or choose the maximum element M from the array and remove it. Your task is to find an array B such that for any element b_i in B, the number of elements in the input array that are less than or equal to b_i is exactly i (1-based index). If B cannot be constructed to satisfy the above condition, output \\"Impossible\\". Input The first line of the input contains an integer n (1 ≤ n ≤ 2 * 10^5) — the number of integers in the array. The next line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Output the array B if possible. Otherwise, output \\"Impossible\\". Example Input 5 3 1 4 1 5 Output 1 1 3 4 5 Explanation From the given array [3, 1, 4, 1, 5], you can form the array B [1, 1, 3, 4, 5] by performing the following operations: 1. Choose the minimum element 1, and remove it from the array. 2. Choose the minimum element 1, and remove it from the array. 3. Choose the minimum element 3, and remove it from the array. 4. Choose the minimum element 4, and remove it from the array. 5. Choose the minimum element 5, and remove it from the array. In this case, the constructed array B satisfies the condition that for every element b_i in B, exactly i elements in the input array are less than or equal to b_i.","solution":"def construct_array(n, a): Construct array B such that for any element b_i in B, the number of elements in the input array that are less than or equal to b_i is exactly i (1-based index). If it is not possible, return \'Impossible\'. a_sorted = sorted(a) b = [a_sorted[i] for i in range(n)] return b"},{"question":"A coder wants to generate passwords that contain balanced parentheses. A string of parentheses is considered balanced if it consists of pairs of opening and closing parentheses in the correct order. For example, \\"((()))\\" and \\"()()()\\" are balanced, but \\"(()(\\", \\"())\\", and \\"(((()\\" are not. The coder wants to know how many balanced parentheses strings of a given length can be generated. Given an integer N, representing the length of the string, determine the number of unique balanced parentheses strings that can be formed using exactly N characters. If N is odd, output 0, as it is impossible to form a balanced string with an odd length. INPUT An input contains a single integer N, indicating the length of the string of parentheses. OUTPUT Output a single integer representing the number of unique balanced parentheses strings that can be formed with the given length N. CONSTRAINTS 1 ≤ N ≤ 500 SAMPLE INPUT 6 SAMPLE OUTPUT 5 Explanation When N is 6, the following balanced parentheses strings can be formed: \\"()()()\\", \\"((()))\\", \\"(())()\\", \\"()(())\\", and \\"(()())\\". Note: Since the parentheses must be balanced and only consist of pairs, N must be even to form any valid strings. If N is odd, the output would be 0.","solution":"def count_balanced_parentheses_strings(n): if n % 2 != 0: return 0 # We need to find the nth Catalan number def catalan_number(n): if n == 0: return 1 cat = [0] * (n+1) cat[0] = 1 for i in range(1, n+1): cat[i] = 0 for j in range(i): cat[i] += cat[j] * cat[i-j-1] return cat[n] return catalan_number(n // 2)"},{"question":"Hogwarts students are often given challenging assignments. One recent assignment was to create their own encryption algorithm. They decided to base it on a simple substitution cipher, where each letter in the plaintext is replaced by a letter found a fixed number of positions later in the alphabet. Only the letters \'A\' through \'Z\' (uppercase) are used, and the alphabet is treated as a circular structure where \'A\' follows \'Z\'. Given a plaintext message and an integer k (the fixed number of positions), your task is to implement this encryption algorithm. Input The first input line contains an integer k (1 ≤ k ≤ 25), which is the fixed number of positions each letter is shifted. The second input line contains a string s (1 ≤ |s| ≤ 10000) which is the plaintext message consisting of uppercase letters \'A\'-\'Z\'. Output Print the encrypted message. Examples Input 3 HELLO Output KHOOR Input 1 ZEBRA Output AFCSB Note In the first example, each letter in \\"HELLO\\" is replaced by the letter found 3 positions later in the alphabet. Thus, \'H\' becomes \'K\', \'E\' becomes \'H\', \'L\' becomes \'O\', and \'O\' becomes \'R\', resulting in the encrypted message \\"KHOOR\\". In the second example, the letter \'Z\' is shifted to \'A\', and \'E\' to \'F\', \'B\' to \'C\', \'R\' to \'S\', \'A\' to \'B\', resulting in the encrypted message \\"AFCSB\\".","solution":"def encrypt_message(k, s): Encrypts the message s by shifting each letter k positions in the alphabet. result = [] for char in s: # Calculate the new character by shifting k positions new_char = chr((ord(char) - ord(\'A\') + k) % 26 + ord(\'A\')) result.append(new_char) return \'\'.join(result)"},{"question":"A logistics company is trying to optimize their delivery routes. They have multiple delivery points and want to determine the shortest possible round trip route that visits each point exactly once and returns to the starting point. Can you help them by writing an algorithm to solve this problem? Task Create a function that accepts a list of coordinates representing delivery points and returns the shortest possible round trip route: ```python def shortest_route(points: List[Tuple[int, int]]) -> List[Tuple[int, int]]: pass ``` # Input - `points`: A list of tuples, where each tuple contains two integers representing the x and y coordinates of a delivery point (e.g., `[(0, 0), (1, 1), (2, 0)]`). * There will be at least 2 and at most 10 delivery points. # Output - The function should return a list of tuples representing the coordinates of the delivery points in the order they are visited, starting and ending at the first point in the input list. # Example ```python points = [(0, 0), (2, 2), (2, 0), (0, 2)] shortest_route(points) ``` Output: ```python [(0, 0), (2, 0), (2, 2), (0, 2), (0, 0)] ``` Notes * You may use well-known algorithms like the Traveling Salesman Problem (TSP) heuristic for your solution. * The distance between two points `A(x1, y1)` and `B(x2, y2)` can be calculated using the Euclidean distance formula: `sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)`.","solution":"from itertools import permutations import math from typing import List, Tuple def euclidean_distance(p1: Tuple[int, int], p2: Tuple[int, int]) -> float: return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def calculate_route_length(route: List[Tuple[int, int]]) -> float: length = 0.0 for i in range(len(route) - 1): length += euclidean_distance(route[i], route[i+1]) length += euclidean_distance(route[-1], route[0]) return length def shortest_route(points: List[Tuple[int, int]]) -> List[Tuple[int, int]]: min_route = [] min_length = float(\'inf\') for perm in permutations(points[1:]): current_route = [points[0]] + list(perm) + [points[0]] current_length = calculate_route_length(current_route) if current_length < min_length: min_length = current_length min_route = current_route return min_route"},{"question":"A group of friends decided to play a card game called \\"Lucky Cards\\". In this game, each player has a set of cards numbered from 1 to N. The goal of the game is to determine if a player can create a sequence of cards that adheres to a lucky number pattern. A lucky number pattern is defined as a sequence where: - Each number in the sequence is larger than the previous number. - The difference between any two adjacent numbers is at least D. Given the number of cards N and the minimum difference D, your task is to determine if it\'s possible to form a sequence that starts with the smallest card (1) and follows the lucky number pattern until the largest card (N). Input: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains two integers N and D. Output: For each test case, output \\"YES\\" if it\'s possible to form such a sequence, otherwise output \\"NO\\". Examples: Input: 3 5 1 5 2 5 6 Output: YES YES NO Explanation: 1. For the first test case (N=5, D=1), the sequence can be: 1, 2, 3, 4, 5. 2. For the second test case (N=5, D=2), the sequence can be: 1, 3, 5. 3. For the third test case (N=5, D=6), it\'s impossible to have the required difference between numbers.","solution":"def is_lucky_sequence_possible(N, D): Returns \\"YES\\" if it\'s possible to form a lucky number sequence with N cards and minimum difference D, otherwise \\"NO\\". current = 1 while current <= N: current += D return \\"YES\\" if current - D >= N else \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): N, D = test_cases[i] result = is_lucky_sequence_possible(N, D) results.append(result) return results"},{"question":"You are given several pairs of strings a, b consisting of lowercase letters and you need to determine if one string is a permutation of the other. A permutation is a rearrangement of letters. Input The first line contains T (number of test cases). 1 ≤ T ≤ 100 Each of the next 2T lines contains a lowercase string a (1 ≤ |a| ≤ 1000), with one string per line for a and b. Output For each test pair, print \\"YES\\" if one string is a permutation of the other and \\"NO\\" otherwise. SAMPLE INPUT 3 listen silent triangle integral apple pale SAMPLE OUTPUT YES YES NO","solution":"def are_permutations(a, b): Returns \'YES\' if string \'b\' is a permutation of string \'a\', otherwise returns \'NO\'. return \\"YES\\" if sorted(a) == sorted(b) else \\"NO\\" def check_permutations(test_cases): Given a list of test cases, where each pair of strings is represented as a tuple, returns a list of answers where each answer is \'YES\' or \'NO\' based on whether the second string is a permutation of the first. test_cases: List of tuples [(a, b), ...] results = [] for a, b in test_cases: results.append(are_permutations(a, b)) return results # Reading input and processing def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) pairs = [(lines[i * 2 + 1], lines[i * 2 + 2]) for i in range(T)] return pairs, T"},{"question":"Task: Implement a function that calculates the minimum number of swaps required to sort an array containing unique integers. Definition: - A swap involves exchanging the positions of two elements in the array. - The goal is to sort the array such that the integer at index i equals i+1. Input: - An integer n, representing the length of the array. - An array arr of n unique integers. Output: - A single integer representing the minimum number of swaps required to sort the array. Example: Input: 5 4 3 1 2 5 Output: 3 Explanation: To sort the array [4, 3, 1, 2, 5], the minimum number of swaps required are: 1. Swap elements at indices 0 and 2: [1, 3, 4, 2, 5] 2. Swap elements at indices 1 and 3: [1, 2, 4, 3, 5] 3. Swap elements at indices 2 and 3: [1, 2, 3, 4, 5] Thus, 3 swaps are required to sort the array. Constraints: - 1 ≤ n ≤ 10^5 - Each element of the array is a unique integer in the range [1, n]. Note: - Avoid using built-in sorting functions. - Optimize for time and space complexity where possible.","solution":"def minimum_swaps(n, arr): Returns the minimum number of swaps required to sort the array such that the integer at index i equals i+1. Parameters: - n: int, the length of the array. - arr: List[int], the array of n unique integers. Returns: - int, the minimum number of swaps. # Create a dictionary to map value to its index value_index_map = {v: i for i, v in enumerate(arr)} swaps = 0 # Iterate over the array and place each element to its correct position for i in range(n): # Check if the current element is in its correct position while arr[i] != i + 1: # Get the correct index of the current element correct_index = value_index_map[i + 1] # Swap the current element with the element at its correct index arr[i], arr[correct_index] = arr[correct_index], arr[i] # Update the value_index_map after the swap value_index_map[arr[correct_index]] = correct_index value_index_map[arr[i]] = i # Increment the swaps counter swaps += 1 return swaps"},{"question":"You are given an array of integers `heights` representing the heights of buildings in a row from left to right. A building can see the sunset if there are no taller buildings to its right. Write a function `countSunsetBuildings` that takes an array `heights` and returns the number of buildings that can see the sunset. # Example: **Input:** heights = [7, 4, 8, 2, 9] **Output:** 3 **Explanation:** Buildings with height 7, 8, and 9 can see the sunset. **Input:** heights = [5, 3, 8, 3, 2] **Output:** 2 **Explanation:** Buildings with height 5 and 8 can see the sunset. # Constraints: - 1 <= heights.length <= 10^5 - 1 <= heights[i] <= 10^9","solution":"def countSunsetBuildings(heights): Returns the count of buildings that can see the sunset. if not heights: return 0 count = 0 max_height = float(\'-inf\') for height in heights: if height > max_height: count += 1 max_height = height return count"},{"question":"In the thriving city of Algorithmia, a new railway system is being constructed. The city\'s planners want an efficient way to manage the railway tracks, which connect different stations. To ensure the system is optimal, they have tasked you with determining the longest continuous sequence of railway stations that forms a palindrome. A railway track sequence is considered a palindrome if it reads the same backward as forward. You are given a string that represents the sequence of railway stations in the order they are connected. Your task is to find the length of the longest palindromic subsequence in this string. Input Format The first line contains an integer N, the number of test cases. It\'s followed by N lines. Each test case contains a single string S, representing the sequence of stations. Output Format Output N lines, each containing the length of the longest palindromic subsequence for the corresponding test case. Constraints 1 <= N <= 100 1 <= |S| <= 1000 S contains only uppercase English letters. Sample Input #00: 3 ABBDCACB AAAA ABCDE Sample Output #00: 5 4 1 Explanation #00: For the first case, \\"BDACAB\\" is the longest palindromic subsequence, thus length is 5. For the second case, the entire string \\"AAAA\\" is a palindrome, so length is 4. For the third case, no repeating characters mean the longest palindrome length is 1. Your task is to implement a function that determines the length of the longest palindromic subsequence for each test case.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the given string s. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def process_test_cases(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_subsequence(s)) return results"},{"question":"You are given a list of n distinct integers, and you need to divide this list into two non-empty subsets such that the sum of the integers in each subset is equal. If it is not possible to do so, return \\"No\\". Otherwise, return \\"Yes\\". -----Input----- The input consists of a single line which contains an integer n (2 ≤ n ≤ 50) — the number of integers in the list, followed by n distinct integers separated by spaces. -----Output----- Output \\"Yes\\" if it is possible to divide the list into two subsets with equal sum. Otherwise, output \\"No\\". -----Examples----- Input 4 1 5 11 5 Output Yes Input 3 1 2 5 Output No","solution":"def can_partition(nums): total_sum = sum(nums) # If the total sum is odd, it\'s not possible to divide into two subsets with equal sum if total_sum % 2 != 0: return \\"No\\" target = total_sum // 2 n = len(nums) # Initialize a list to track possible sums using dynamic programming dp = [False] * (target + 1) dp[0] = True # Iterate through the numbers for num in nums: # Update the dp list from back to front for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return \\"Yes\\" if dp[target] else \\"No\\" def partition_equal_sum(nums): n = nums[0] nums_list = nums[1:] if n != len(nums_list): raise ValueError(\\"The number of integers must match the given \'n\'\\") return can_partition(nums_list)"},{"question":"You are tasked with optimizing a robot\'s traversal on a Cartesian grid. The robot can move in 8 possible directions: vertically, horizontally, and diagonally. Each move will increment a step count. The robot starts at the point (0, 0) and your goal is to make it visit each point where both the x-coordinate and y-coordinate are integers from 0 to N (inclusive). The robot\'s moves can be categorized as follows: - Upwards: (x, y) -> (x, y+1) - Downwards: (x, y) -> (x, y-1) - Left: (x, y) -> (x-1, y) - Right: (x, y) -> (x+1, y) - Up-Right Diagonally: (x, y) -> (x+1, y+1) - Up-Left Diagonally: (x, y) -> (x-1, y+1) - Down-Right Diagonally: (x, y) -> (x+1, y-1) - Down-Left Diagonally: (x, y) -> (x-1, y-1) In one move, the robot can move to one of the adjacent points or remain in its current position and does not require a move. Write a program to determine the minimal number of steps required for the robot to visit all possible points (x, y) with x, y in [0, N] (inclusive), starting from the origin point (0, 0). -----Input----- A single integer N (2 ≤ N ≤ 50) — the size of the grid. -----Output----- A single integer — the minimal number of steps required for the robot to visit all points in the grid. -----Example----- Input 2 Output 4 -----Note----- For the given example with N=2, here is one possible sequence of moves: - Start at (0, 0) - Move to (1, 1) - Move to (2, 2) - Move back to (1, 2) - Move to (2, 1) This way, the robot visits all points in minimal steps.","solution":"def minimal_steps(N): if N <= 0: return 0 # The minimal steps formula is derived from the fact that # to move from (0, 0) to (N, N), we need N steps. In the process, # the robot can reach all the points in the grid [0, N]x[0, N] return N # Note: The above function works directly in a single return statement # based on the problem constraints and the logic deduced."},{"question":"In a certain string manipulation problem, you are asked to determine if a given string is a palindrome. A palindrome is a string that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. -----Input----- A single line containing a string which may include alphanumeric characters, punctuation, and spaces. -----Output----- A single line output which is either \\"Yes\\" if the string is a palindrome or \\"No\\" if it is not. -----Example----- Input: A man, a plan, a canal: Panama Output: Yes","solution":"import string def is_palindrome(s): Check if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. Parameters: s (str): The input string to check. Returns: str: \\"Yes\\" if the string is a palindrome, otherwise \\"No\\". # Remove punctuation, spaces, and convert to lowercase translator = str.maketrans(\'\', \'\', string.punctuation) cleaned_str = s.translate(translator).replace(\\" \\", \\"\\").lower() # Check if the cleaned string is a palindrome return \\"Yes\\" if cleaned_str == cleaned_str[::-1] else \\"No\\""},{"question":"# Painting an Enclosure You are given a rectangular grid with dimensions `m x n`. Each cell in this grid is initially white. You are to perform some painting operations, where each operation will paint a given rectangular section of the grid a specific color. Each painting operation completely overrides any previous color in that section. Task Write a function `paint_enclosure(m, n, operations)` to determine the final color of a given cell after all painting operations have been applied. # Input - `m (1 <= m <= 1000)`: an integer representing the number of rows in the grid. - `n (1 <= n <= 1000)`: an integer representing the number of columns in the grid. - `operations`: a list of operations, where each operation is represented by a tuple `(r1, c1, r2, c2, color)`, indicating that the rectangular section from the top-left `(r1, c1)` to the bottom-right `(r2, c2)` should be painted with `color`. # Output - An `m x n` grid where each cell contains its final color after all operations have been applied. # Examples ```python def paint_enclosure(m, n, operations): pass grid = paint_enclosure(4, 4, [(0, 0, 1, 1, \'red\'), (1, 1, 2, 2, \'blue\'), (0, 2, 3, 3, \'green\')]) for row in grid: print(row) # Output: # [\'red\', \'red\', \'green\', \'green\'] # [\'red\', \'blue\', \'green\', \'green\'] # [\'white\', \'blue\', \'green\', \'green\'] # [\'white\', \'white\', \'green\', \'green\'] ``` # Notes - The `r1` and `c1` are inclusive and `r2` and `c2` are inclusive for the ranges of the painting operations. - The color can be a string of any form (e.g., `\'red\'`, `\'blue\'`, `\'green\'`). - Operations are listed in the order they are applied; later operations overwrite earlier ones.","solution":"def paint_enclosure(m, n, operations): Returns an m x n grid showing the final colors of each cell after all painting operations. Parameters: m (int): Number of rows in the grid. n (int): Number of columns in the grid. operations (list of tuples): Each tuple contains (r1, c1, r2, c2, color) where (r1, c1) is the top-left and (r2, c2) is the bottom-right of the section to paint and color is the color to paint that section. Returns: list of lists: m x n grid where each cell contains the final color. # Initialize the grid with \'white\' grid = [[\'white\' for _ in range(n)] for _ in range(m)] # Apply each painting operation in order for r1, c1, r2, c2, color in operations: for row in range(r1, r2 + 1): for col in range(c1, c2 + 1): grid[row][col] = color return grid"},{"question":"Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0. You must solve it in linear time and using linear extra space. Example1: Input: nums = [3, 6, 9, 1] Output: 3 Explanation: The sorted form of the list is [1, 3, 6, 9], and the maximum gap is between 6 and 9, which is 3. Example2: Input: nums = [10] Output: 0 Explanation: Array contains less than two elements. Your Task: You do not need to read input or print anything. Your task is to complete the function maximumGap() which takes integer array nums as input parameter and returns the maximum difference. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ nums.length ≤ 10^5 0 ≤ nums[i] ≤ 10^9","solution":"def maximumGap(nums): Returns the maximum difference between two successive elements in the sorted form of nums. if len(nums) < 2: return 0 nums.sort() max_gap = 0 for i in range(1, len(nums)): max_gap = max(max_gap, nums[i] - nums[i - 1]) return max_gap"},{"question":"A task is given which requires you to determine an optimal way to use a set of available coins to make up a specific amount of money. Write a function that computes the minimum number of coins needed to make up a given amount from a given set of coin denominations. If it is not possible to make the amount with the given coins, return -1. -----Input----- The first line contains an integer t (1 le t le 10^3) — the number of test cases. Each test case consists of two parts. The first part is a list of integers representing the available coin denominations (space-separated). The second part is a single integer representing the amount to be made using the given denominations. -----Output----- For each test case, print in a separate line a single integer — the minimum number of coins required to make up the specified amount, or -1 if it is not possible. -----Examples----- Input 3 1 2 5 11 3 2 4 5 11 2 3 7 13 Output 2 3 3 -----Note----- For the first test case: The minimal way to form 3 is by using 1 coin of 2 and 1 coin of 1, giving a total of 2 coins. For the second test case: The minimal way to form 11 is by using 2 coins of 4 and 1 coin of 3, giving a total of 3 coins. For the third test case: The minimal way to form 13 is by using 1 coin of 7 and 2 coins of 3, giving a total of 3 coins. -----Function Signature----- ``` def min_coins(coins: List[int], amount: int) -> int: pass ```","solution":"def min_coins(coins, amount): Determine the minimum number of coins needed to make up the given amount with the given denominations. If it is not possible, return -1. # Initialize DP table with infinity values signifying amount cannot be reached dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 # Zero coins are needed to make amount zero for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"A group of friends is planning a sharing activity where they each bring a different number of unique items. This means that no two friends bring the same kind of item. After the activity, they decided to exchange items with each other. Each friend will randomly give away one of their items to another friend, but they want to make sure that no friend ends up receiving an item they initially brought. Write a function to determine if it\'s possible to redistribute the items such that no friend receives one of their own initial items. If the redistribution is possible, return one possible way of doing the exchange. ----Input---- - The input consists of multiple test cases. The first line contains the number of test cases t (1 leq t leq 100). Each test case starts with an integer n (1 leq n leq 100), representing the number of friends. The next n lines contain the items each friend brought, represented by a string of distinct characters. Each string\'s length is between 1 and 26, and all characters are lowercase English letters. ----Output---- For each test case, output one possible redistribution of the items as a list of n strings, showing the item each friend receives respectively. If no valid redistribution is possible, return an empty string for that test case. ----Examples---- Input 2 3 abc def ghi 3 a b c Output [\'b\', \'g\', \'d\'] [\'b\', \'c\', \'a\'] Explanation - In the first example, it\'s possible to redistribute as follows: Friend 1 gives \'a\', Friend 2 gives \'d\', Friend 3 gives \'g\' (one possible valid distribution is \'b\', \'g\', \'d\'). - In the second example: Friend 1 can give \'a\', Friend 2 can give \'c\', Friend 3 can give \'b\' (one possible valid distribution is \'b\', \'c\', \'a\'). Note that there could be multiple valid redistributions for each test case, and any valid redistribution is accepted as correct.","solution":"def redistribute_items(t, test_cases): Function to redistribute items such that no friend receives an item they initially brought. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains an integer n and a list of n strings, each string representing the items a friend brought. Returns: list: A list of lists where each sublist represents a possible redistribution of items for the respective test case. from random import shuffle results = [] for n, friends in test_cases: friends_items = [set(friend) for friend in friends] all_items = set() for items in friends: all_items.update(items) if len(all_items) < n: results.append(\\"\\") continue all_items = list(all_items) # Attempt to find a valid redistribution for _ in range(100): # Trying multiple times to shuffle and find a valid distribution shuffle(all_items) valid_distribution = True distribution = [] for i in range(n): if all_items[i] in friends_items[i]: valid_distribution = False break distribution.append(all_items[i]) if valid_distribution: results.append(distribution) break else: results.append(\\"\\") return results # Example usage t = 2 test_cases = [ (3, [\'abc\', \'def\', \'ghi\']), (3, [\'a\', \'b\', \'c\']) ] print(redistribute_items(t, test_cases))"},{"question":"# Task Create a function to calculate the level of nesting of parentheses in a simple mathematical expression. The input expression will contain only digits, \'+\', \'-\', \'*\', \'/\', and parentheses. # Function Signature The function should have the following signature: ```python def max_parenthesis_depth(expression: str) -> int: ``` # Input A string representing a mathematical expression containing digits, \'+\', \'-\', \'*\', \'/\', and parentheses. # Output An integer representing the maximum depth of nested parentheses in the given expression. # Constraints * The input string will always be a valid mathematical expression with matching parentheses. * The length of the expression will not exceed 1,000 characters. # Example ```python print(max_parenthesis_depth(\\"((1+2)*3)+((4/2)+(5+(6-7)))\\")) # Output: 3 ``` # Explanation In the expression \\"`((1+2)*3)+((4/2)+(5+(6-7)))`\\": - The maximum nesting occurs within \\"`(5+(6-7))`\\", which has a nesting level of 3. # Notes * Use a stack to properly manage the depth of the nested parentheses. * Optimize for efficient computation given the constraints.","solution":"def max_parenthesis_depth(expression: str) -> int: Calculates the maximum depth of nested parentheses in a mathematical expression. Parameters: - expression (str): The mathematical expression containing digits, \'+\', \'-\', \'*\', \'/\', and parentheses. Returns: - int: The maximum depth of nesting of parentheses in the expression. max_depth = 0 current_depth = 0 for char in expression: if char == \'(\': current_depth += 1 if current_depth > max_depth: max_depth = current_depth elif char == \')\': current_depth -= 1 return max_depth"},{"question":"There was once an Inkman who loved playing with strings. One day, he stumbled upon an ancient text that described a unique string transformation. The transformation works as follows: 1. You are given a string consisting of lowercase English letters. 2. You can perform an operation where you pick any substring of the given string and reverse its characters. 3. Your goal is to determine the minimum number of such operations needed to transform the given string into a palindrome. A palindrome is a string that reads the same backward as forward. Write a program to find the minimum number of operations required to transform the given string into a palindrome. Input The first line of the input contains a single integer T (1 ≤ T ≤ 100), representing the number of test cases. The next T lines each contain a single string, with the length of the string being up to 1000. Output For each test case, output a single integer – the minimum number of operations required to transform the given string into a palindrome. Examples Input 4 ab aa racecar aabb Output 1 0 0 1 Explanation: - For the string \\"ab\\", you can reverse the substring \\"a\\" to get \\"ba\\", and then reverse the substring \\"ba\\" to get \\"ab\\", finally reversing \\"b\\" to get \\"bb\\", so the minimum number of operations is 1. - For the string \\"aa\\", it is already a palindrome, so no operations are needed. - For \\"racecar\\", it\'s already a palindrome, so no operations are needed. - For \\"aabb\\", you can reverse the substring \\"aa\\" to get \\"aa\\", then reverse the substring \\"bb\\" to get \\"aabbaa\\", so the minimum number of operations is 1.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to transform the string into a palindrome. n = len(s) mismatches = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: mismatches += 1 return mismatches def solve(T, test_cases): results = [] for i in range(T): results.append(min_operations_to_palindrome(test_cases[i])) return results"},{"question":"You are given a string T of any length consisting of only lowercase alphabets. Determine if T can be converted into a palindrome by rearranging its characters. -----Constraints----- - |T| <= 1000 - T consists of lowercase alphabets. -----Input----- Input is given from Standard Input in the following format: T -----Output----- If T can be rearranged into a palindrome, print Yes; otherwise, print No. -----Sample Input----- radar -----Sample Output----- Yes Rearranging the characters of radar can give the palindrome \\"radar\\" itself.","solution":"def can_form_palindrome(T): Determines if the string T can be rearranged to form a palindrome. Arguments: T -- input string consisting of lowercase alphabets Returns: \'Yes\' if T can be rearranged into a palindrome, \'No\' otherwise from collections import Counter # Count the frequency of each character char_count = Counter(T) # Count how many characters have odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A palindrome can have at most one character with an odd frequency return \\"Yes\\" if odd_count <= 1 else \\"No\\""},{"question":"In a certain country, there are N cities and M roads connecting certain pairs of cities. Each road has a positive length. Due to recent events, the government wants to ensure that there is at least one road between any two cities and calculate the minimal possible total road length required to achieve this goal. You are to determine the minimum possible total length of the roads required to ensure that it is possible to travel between any pair of cities directly or indirectly through other cities. -----Constraints----- - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 10^5 - The length of each road is an integer between 1 and 10^6. -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 l_1 u_2 v_2 l_2 ... u_M v_M l_M Each line contains three integers u_i, v_i and l_i, indicating that there is a road between city u_i and city v_i with length l_i. -----Output----- If it is possible to ensure that there is at least one road between any two cities, print the minimum possible total road length required. Otherwise, print \\"Impossible\\". -----Sample Input----- 4 5 1 2 5 1 3 5 2 4 8 3 4 2 1 4 3 -----Sample Output----- 10 The minimal road length to connect all cities is obtained by using the roads (1-2), (1-3), (3-4).","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [1] * size def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def minimum_road_length(n, roads): if n == 1: return 0 uf = UnionFind(n) roads.sort(key=lambda x: x[2]) total_length = 0 edges_used = 0 for u, v, length in roads: if uf.find(u - 1) != uf.find(v - 1): uf.union(u - 1, v - 1) total_length += length edges_used += 1 if edges_used == n - 1: break if edges_used == n - 1: return total_length else: return \\"Impossible\\""},{"question":"An amusement park has N attractions, each attraction is connected by M types of paths. Each path connects two attractions. The i-th path connects Attraction a_i and Attraction b_i. You are currently at Attraction 1 and want to get to Attraction N. However, each path takes a different amount of time to travel. You want to know the minimum time required to get from Attraction 1 to Attraction N. Constraints - 2 ≤ N ≤ 10^5 - 1 ≤ M ≤ 2 * 10^5 - 1 ≤ a_i < b_i ≤ N - 1 ≤ t_i ≤ 10^4 - No two attractions are directly connected by more than one path. Input Input is given from Standard Input in the following format: ``` N M a_1 b_1 t_1 a_2 b_2 t_2 : a_M b_M t_M ``` Output Output the minimum time required to get from Attraction 1 to Attraction N. If it is not possible to reach Attraction N from Attraction 1, output `-1`. Examples Input ``` 4 4 1 2 4 2 4 6 1 3 2 3 4 8 ``` Output ``` 10 ``` Input ``` 5 5 1 2 2 2 3 3 3 4 4 4 5 5 1 5 10 ``` Output ``` 10 ``` Input ``` 3 1 1 2 5 ``` Output ``` -1 ```","solution":"import heapq def find_min_time(N, M, paths): from collections import defaultdict graph = defaultdict(list) for a, b, t in paths: graph[a].append((b, t)) graph[b].append((a, t)) pq = [(0, 1)] # (time, attraction) dist = {i: float(\'inf\') for i in range(1, N + 1)} dist[1] = 0 while pq: current_time, u = heapq.heappop(pq) if u == N: return current_time if current_time > dist[u]: continue for v, time in graph[u]: if current_time + time < dist[v]: dist[v] = current_time + time heapq.heappush(pq, (dist[v], v)) return -1 if dist[N] == float(\'inf\') else dist[N]"},{"question":"You are given a list of integers and a target integer. Your goal is to determine if there are any three integers in the list that add up to the target value. Write a function `three_sum` that takes in two parameters: 1. A list of integers `nums` (1 ≤ length of nums ≤ 10^4, -10^9 ≤ nums[i] ≤ 10^9) 2. An integer `target` (-10^9 ≤ target ≤ 10^9) Your function should return a boolean indicating whether there exist three integers in the list that add up to the target value. # Input - A list of integers `nums`. - An integer `target`. # Output Return `True` if there are three integers in the list whose sum is equal to `target`, and `False` otherwise. # Examples **Example 1:** Input: ``` nums = [1, 2, 3, 4, 5] target = 9 ``` Output: ``` True ``` **Explanation:** There exist three numbers 1, 3, and 5 whose sum is 9. **Example 2:** Input: ``` nums = [0, -1, 2, -3, 1] target = 0 ``` Output: ``` True ``` **Explanation:** There exist three numbers 0, -1, and 1 whose sum is 0. **Example 3:** Input: ``` nums = [1, 2, 3] target = 10 ``` Output: ``` False ``` **Explanation:** There are no three numbers in the list whose sum is 10. Note: - The solution must not have a time complexity higher than O(n^2 * log(n)). - Ensure the implementation is efficient enough to handle the upper limits of the input size.","solution":"def three_sum(nums, target): Determines if there are three integers in the list that add up to the target value. Parameters: nums (list): List of integers. target (int): The target integer. Returns: bool: True if there exist three numbers in the list whose sum is equal to the target, otherwise False. nums.sort() n = len(nums) for i in range(n-2): left, right = i+1, n-1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"You are given an array of n positive integers. Find the longest subsequence of the array where the sum of the elements is even. A subsequence is a sequence that can be derived from the given array by deleting some or no elements without changing the order of the remaining elements. -----Input----- The first line contains a single integer n (1 le n le 1000) — the length of the array. The next line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- Print the length of the longest subsequence with an even sum. -----Examples----- Input 5 1 3 5 7 9 Output 4 Input 3 2 4 6 Output 3 Input 6 5 7 10 12 15 20 Output 6 -----Note----- In the first example, the longest subsequence with an even sum is [1, 3, 5, 7], which totals to 16. In the second example, the entire array already sums to 12, which is even, so the longest subsequence is the array itself. In the third example, the entire array sums to 69 (odd), so we must exclude one element to get an even sum. By removing the smallest odd number (5 or 15), we are left with a subsequence of length 5 with an even sum.","solution":"def longest_even_sum_subsequence_length(n, arr): sum_arr = sum(arr) if sum_arr % 2 == 0: return n min_odd = float(\'inf\') for num in arr: if num % 2 != 0: min_odd = min(min_odd, num) return n - 1 # Excluding smallest odd number"},{"question":"Given an unsorted array of integers, find the shortest subarray that, if sorted, results in the entire array being sorted. Formally, find the smallest range [l, r] such that sorting the array from index l to r would result in the entire array being sorted in non-decreasing order. Note: - Return (l, r) of the smallest such range. If the array is already sorted, return an empty range (-1, -1). - The array will contain at least one element and can contain duplicates. Example 1: Input: nums = [2, 6, 4, 8, 10, 9, 15] Output: (1, 5) Explanation: The subarray (6, 4, 8, 10, 9) needs to be sorted to make the whole array sorted in ascending order. Example 2: Input: nums = [1, 2, 3, 4] Output: (-1, -1) Explanation: The array is already sorted, so no subarray needs to be sorted.","solution":"def find_unsorted_subarray(nums): Given an unsorted array of integers, return the shortest subarray such that sorting it results in the entire array being sorted. Parameters: nums (List[int]): The input list of integers. Returns: Tuple[int, int]: The start and end indices of the smallest such subarray that, when sorted, makes the whole array sorted. If the array is already sorted, returns (-1, -1). n = len(nums) if n <= 1: return (-1, -1) start, end = -1, -1 for i in range(1, n): if nums[i] < nums[i - 1]: start = i - 1 break if start == -1: return (-1, -1) for j in range(n - 2, -1, -1): if nums[j] > nums[j + 1]: end = j + 1 break min_val = min(nums[start:end+1]) max_val = max(nums[start:end+1]) for i in range(0, start): if nums[i] > min_val: start = i break for j in range(n - 1, end, -1): if nums[j] < max_val: end = j break return (start, end)"},{"question":"You are given n meeting times and a constraint that each meeting room can accommodate at most one meeting at a time. Your task is to find the minimum number of meeting rooms required to accommodate all the meetings. Each meeting time is represented as a tuple of two integers, (start, end), where start is the start time and end is the end time of that meeting. The meetings can overlap with each other, and you need to allocate separate rooms for overlapping meetings. -----Input----- - The first line contains an integer n (1 ≤ n ≤ 10^4) — the number of meetings. - The next n lines contain two distinct integers each, start and end (0 ≤ start < end ≤ 10^9) — the start and end times of each meeting. -----Output----- Print a single integer — the minimum number of meeting rooms required to accommodate all the meetings. -----Examples----- Input 3 0 30 5 10 15 20 Output 2 Input 4 7 10 2 4 3 8 5 7 Output 2 -----Note----- In the first example, the first meeting starts at time 0 and ends at time 30. The second meeting starts at time 5 and ends at time 10 and the third meeting starts at time 15 and ends at time 20. Here, the second and third meetings overlap with the first meeting, so we need two meeting rooms to accommodate all the meetings.","solution":"def min_meeting_rooms(meetings): if not meetings: return 0 # Separate start and end times, and sort them start_times = sorted([meeting[0] for meeting in meetings]) end_times = sorted([meeting[1] for meeting in meetings]) start_pointer, end_pointer = 0, 0 used_rooms = 0 max_rooms = 0 # Iterate over all the meetings while start_pointer < len(meetings): # If there\'s a meeting that has started before the last ended, we need a new room if start_times[start_pointer] < end_times[end_pointer]: used_rooms += 1 start_pointer += 1 else: # Else we can reuse the room used_rooms -= 1 end_pointer += 1 # Track the maximum number of rooms in use at any time max_rooms = max(max_rooms, used_rooms) return max_rooms"},{"question":"You are given an array a consisting of n integers (a_1, a_2, ldots, a_n). Your task is to form a non-decreasing subsequence by removing some (possibly zero) elements from the array. However, there is a constraint on your choice: each removed element must have an absolute difference of at most k with at least one of its adjacent elements in the original array. In other words, you can only remove an element a_i if there exists an adjacent element a_j (where j = i-1 or j = i+1) such that |a_i - a_j| le k. Determine the length of the longest non-decreasing subsequence you can obtain under this constraint. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains two integers n and k (1 le n le 10^5, 0 le k le 10^9). The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the length of the longest non-decreasing subsequence you can obtain under the given constraint. -----Examples----- Input 3 5 1 4 1 2 3 5 4 3 10 7 5 8 3 0 1 3 5 Output 5 2 3 -----Note----- In the first example, you can remove element 1 to get [4, 2, 3, 5] which is non-decreasing. In the second example, you can remove elements 7 and 5 to get [10, 8] which is non-decreasing. In the third example, since k=0, no elements need to be removed and the array is already non-decreasing.","solution":"def longest_non_decreasing_subsequence(t, test_cases): def can_be_removed(a, b, k): return abs(a - b) <= k results = [] for n, k, a in test_cases: longest_sequence = [] for num in a: if not longest_sequence or longest_sequence[-1] <= num: longest_sequence.append(num) else: if not longest_sequence or can_be_removed(longest_sequence[-1], num, k): continue # skip the element else: longest_sequence = [num] # reset the sequence if we need to skip any element and that element can\'t be appended based on current constraints results.append(len(longest_sequence)) return results"},{"question":"Create a program to determine if a given Sudoku puzzle is valid. The program should check if the puzzle board contains valid digits from 1 to 9 and adheres to Sudoku rules: each row, each column, and each of the nine 3x3 sub-grids must contain all unique digits from 1 to 9 only once. Input: The input consists of multiple datasets, each representing a single Sudoku puzzle. Each dataset contains 9 lines, each with a string of 9 characters, where each character is either a digit from \'1\' to \'9\' or \'.\' representing an empty cell. The end of the input is indicated by a single line of zeros. Output: For each dataset, output \\"Valid\\" if the Sudoku puzzle follows the rules, otherwise output \\"Invalid\\". Example Input 53..7.... 6..195... .98....6. 8...6...3 4..8.3..1 7...2...6 .6....28. ...419..5 ....8..79 63..7.... 6..895... .98....6. 8...6...3 4..8.3..1 7...2...6 .6....28. ...619..5 ....8..7. 0 Output Valid Invalid","solution":"def is_valid_sudoku(board): def is_valid_unit(unit): elements = [num for num in unit if num != \'.\'] return len(elements) == len(set(elements)) def get_subgrid(board, start_row, start_col): return [board[row][col] for row in range(start_row, start_row + 3) for col in range(start_col, start_col + 3)] # Check rows and columns for i in range(9): if not is_valid_unit(board[i]) or not is_valid_unit([board[row][i] for row in range(9)]): return False # Check 3x3 sub-grids for row in range(0, 9, 3): for col in range(0, 9, 3): if not is_valid_unit(get_subgrid(board, row, col)): return False return True def validate_sudoku_puzzles(puzzles): results = [] for board in puzzles: if is_valid_sudoku(board): results.append(\\"Valid\\") else: results.append(\\"Invalid\\") return results"},{"question":"Alice loves solving puzzles and has found an interesting number puzzle. The puzzle is called \\"Unique Sum\\". Given an array of integers, Alice needs to find the sum of all unique numbers in the array. A unique number is a number that appears exactly once in the array. For example, in the array [1, 2, 2, 3, 4, 4, 5], the unique numbers are [1, 3, 5]. Alice needs your help to write a program that solves this puzzle for her. Can you do it? -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n (1 le n le 10^4) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print the sum of all unique numbers in the array on a new line. -----Examples----- Input 3 7 1 2 2 3 4 4 5 5 1 1 1 1 1 6 2 2 -1 3 3 0 Output 9 0 -1 -----Note----- In the first test case, the unique numbers are [1, 3, 5], and their sum is 1 + 3 + 5 = 9. In the second test case, there are no unique numbers, so the sum is 0. In the third test case, the unique numbers are [-1, 0], and their sum is -1 + 0 = -1.","solution":"def unique_sum(t, test_cases): For each test case, calculate the sum of all unique numbers in the given array. :param t: Number of test cases :param test_cases: List of test cases, each test case is a tuple (n, array) :returns: List of results, each result is the sum of unique numbers for the corresponding test case results = [] for n, array in test_cases: from collections import Counter # Calculate the frequency of each number in the array frequency = Counter(array) # Calculate the sum of numbers that occur exactly once unique_sum = sum(num for num, count in frequency.items() if count == 1) # Append the result for the current test case results.append(unique_sum) return results"},{"question":"Monkey Kong loves bananas. He has a collection of bananas, and some of them are rotten. He wants to eat the bananas in such a way that he maximizes the total sweetness. Each banana has a certain sweetness value; the sweetness of a rotten banana is negative. He can eat the bananas in any order, but he can only eat up to k bananas in total. Help Monkey Kong determine the maximum possible total sweetness he can achieve. ---Input--- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n) — the number of bananas and the maximum number of bananas Monkey Kong can eat. The second line contains n space-separated integers v1, v2, ..., vn (−10^4 ≤ vi ≤ 10^4) — the sweetness values of the bananas. ---Output--- Print the maximum possible total sweetness Monkey Kong can achieve if he eats up to k bananas. ---Examples--- Input 5 3 2 -5 6 -3 8 Output 16 Input 6 2 4 4 4 -10 -10 3 Output 8","solution":"def max_total_sweetness(n, k, sweetness_values): Returns the maximum possible total sweetness if Monkey Kong eats up to k bananas. Args: n: int : the number of bananas k: int : the maximum number of bananas Monkey Kong can eat sweetness_values: List[int] : the sweetness values of the bananas Returns: int : the maximum possible total sweetness # Sort the sweetness values in descending order sweetness_values.sort(reverse=True) # Take the sum of the first k elements for maximum sweetness max_sweetness = sum(sweetness_values[:k]) return max_sweetness"},{"question":"In a land far away, the kingdom is divided into several provinces. The kingdom\'s defense council is considering connecting these provinces with roads to facilitate efficient troop movement. To ensure the shortest possible paths between any two provinces, they want to build roads in such a way that the total length of roads is minimized. Additionally, each road is bidirectional and its length is represented as a positive integer. Your task is to help the defense council by determining the minimum possible total length of roads required to connect all provinces. Input: The input starts with an integer N, the number of provinces (nodes). The next line is an integer M, the number of possible roads (edges). Each of the next M lines contains three integers u, v, and w, representing a bidirectional road between provinces u and v with length w. Output: Print a single integer representing the minimum possible total length of roads required to connect all provinces. If it is impossible to connect all the provinces, print -1. Constraints: 1 ≤ N ≤ 1000 0 ≤ M ≤ 10000 1 ≤ u, v ≤ N 1 ≤ w ≤ 10000 Example: Input: 4 5 1 2 1 2 3 2 3 4 3 1 4 4 1 3 5 Output: 6 Explanation: The minimum possible total length of roads required consists of roads 1-2, 2-3, and 3-4, with a total length of 1+2+3=6.","solution":"def kruskal_minimum_spanning_tree(N, edges): Given number of nodes (N) and a list of edges (u, v, w), this function computes the minimum possible total length of roads required to connect all provinces using Kruskal\'s algorithm. If it is impossible to connect all provinces, return -1. # Helper function to find the set of an element u def find(parent, u): if parent[u] != u: parent[u] = find(parent, parent[u]) return parent[u] # Helper function to union two subsets def union(parent, rank, u, v): root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 # Initialize parent and rank arrays parent = list(range(N + 1)) rank = [0] * (N + 1) # Sort edges based on the weight w edges.sort(key=lambda x: x[2]) # Kruskal\'s algorithm to find minimum spanning tree mst_weight = 0 edge_count = 0 for edge in edges: u, v, w = edge if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_weight += w edge_count += 1 if edge_count == N - 1: return mst_weight # If we can\'t connect all provinces, return -1 return -1 def minimum_road_length(N, M, roads): This is the main function that uses the Kruskal algorithm to calculate the minimum road length to connect all provinces. :param N: Integer number of provinces :param M: Integer number of possible roads :param roads: List of tuples (u, v, w) representing roads :return: Minimum length of roads required to connect all provinces or -1 if impossible return kruskal_minimum_spanning_tree(N, roads)"},{"question":"You are given an n x m grid where each cell contains a lowercase letter from \'a\' to \'z\'. Let’s define a subgrid as any rectangular part of the grid. A subgrid is called \\"homogeneous\\" if all the cells within the subgrid contain the same letter. Your task is to answer q queries: for each query, determine if the specified subgrid is homogeneous. Input The first line contains three integers n, m, and q (1 ≤ n, m ≤ 50, 1 ≤ q ≤ 105) – the dimensions of the grid and the number of queries respectively. Each of the next n lines contains a string of length m which represents a row of the grid. Each of the next q lines contains four integers a, b, c, d (1 ≤ a ≤ c ≤ n, 1 ≤ b ≤ d ≤ m) – the coordinates of the upper-left corner and the bottom-right corner of a subgrid to check. Output For each query, print \\"YES\\" if the subgrid defined by the given coordinates is homogeneous, and \\"NO\\" otherwise. Examples Input 4 5 3 abcde fghij klmno pqrst 1 1 2 2 2 3 3 5 1 1 4 5 Output NO YES NO Input 3 4 2 aaaa bbbb cccc 1 1 1 4 2 1 3 4 Output YES NO Note In the first example: * For the first query, the subgrid from (1, 1) to (2, 2) contains the letters \'a\', \'b\', \'f\', and \'g\', which are not all the same, so the answer is \\"NO\\". * For the second query, the subgrid from (2, 3) to (3, 5) contains the letters \'h\', \'i\', \'m\', \'n\', and \'o\', which are the same (\'h\'), so the answer is \\"YES\\". * For the third query, the subgrid from (1, 1) to (4, 5) contains a variety of letters, so the answer is \\"NO\\". In the second example: * For the first query, the subgrid from (1, 1) to (1, 4) contains \'aaaa\', which are all the same, so the answer is \\"YES\\". * For the second query, the subgrid from (2, 1) to (3, 4) contains \'bbbb\' and \'cccc\', which are not all the same, so the answer is \\"NO\\".","solution":"def is_homogeneous(grid, a, b, c, d): first_letter = grid[a][b] for i in range(a, c + 1): for j in range(b, d + 1): if grid[i][j] != first_letter: return \\"NO\\" return \\"YES\\" def homogeneous_queries(n, m, q, grid, queries): results = [] for query in queries: a, b, c, d = query # Convert to 0-based indexing for internal grid representation a -= 1 b -= 1 c -= 1 d -= 1 result = is_homogeneous(grid, a, b, c, d) results.append(result) return results"},{"question":"Write a function `validate_subsequence(arr, subseq)` that takes in two arrays of integers. The function should return `true` if the provided subsequence is a valid subsequence of the main array, and `false` otherwise. A subsequence of an array is a set of numbers that aren’t necessarily adjacent in the array but appear in the same order as they do in the array. For example, given the array [1, 2, 3, 4], the sequences [1, 3, 4] and [2, 4] are subsequences, while [2, 1, 4] and [4, 3] are not. Example: ``` validate_subsequence([5, 1, 22, 25, 6, -1, 8, 10], [1, 6, -1, 10]) Output: true ``` ``` validate_subsequence([5, 1, 22, 25, 6, -1, 8, 10], [1, 6, 10, -1]) Output: false ```","solution":"def validate_subsequence(arr, subseq): Returns True if subseq is a valid subsequence of arr, otherwise returns False. seq_index = 0 for value in arr: if seq_index == len(subseq): break if subseq[seq_index] == value: seq_index += 1 return seq_index == len(subseq)"},{"question":"A large technology company is conducting an internal coding competition. One of the challenges involves determining the maximum number of employees who can use the company\'s shared conference room in such a way that no two employees have overlapping time slots. Each employee has a preferred time slot they would like to use the conference room for, defined by a start time and an end time. The end time is always later than the start time and all slots are given in hours from 0 to 24 on the same day. The goal is to figure out the maximum number of non-overlapping time slots that can be selected. -----Input:----- - The first input line contains a single integer M, the number of employees. - The next M lines each contain two integers a_i and b_i, representing the start time and end time of the i-th employee\'s time slot. -----Output:----- Print a single integer representing the maximum number of non-overlapping time slots. -----Constraints----- - 1 leq M leq 1000 - 0 leq a_i < b_i leq 24 -----Sample Input----- 5 1 4 3 5 0 6 5 7 8 9 -----Sample Output----- 3 -----EXPLANATION----- For the sample input, the maximum number of non-overlapping time slots that can be scheduled are those corresponding to the intervals [1, 4], [5, 7], and [8, 9]. These intervals do not overlap and maximize the number of slots used.","solution":"def max_non_overlapping_time_slots(M, time_slots): # Sort time slots by their end time time_slots.sort(key=lambda x: x[1]) # Initialize count of non-overlapping slots and end time of last added slot count = 0 last_end_time = -1 for start, end in time_slots: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given an array of integers of length n. Your task is to determine whether the array can form a consecutive sequence after performing a single swap between any two elements. An array forms a consecutive sequence if it contains each integer in the range [x, x + n - 1] exactly once where x is the smallest number in the array. Return \\"YES\\" if it is possible to have such a sequence, otherwise return \\"NO\\". -----Input----- The first line contains an integer T, the number of test cases. Each of the following T lines contains an integer n, the length of the array, followed by n space-separated integers representing the array. -----Output----- For each test case, output \\"YES\\" if the array can form a consecutive sequence after a single swap, otherwise \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ n ≤ 100 - 1 ≤ array elements ≤ 1000 -----Example----- Input 3 3 1 3 2 3 2 4 3 3 1 4 3 Output YES YES NO -----Explanation----- For the first test case, the array [1, 3, 2] can be converted to [1, 2, 3] by swapping the elements at positions 2 and 3. For the second test case, the array [2, 4, 3] is already a consecutive sequence if you consider the smallest integer is 2 and the sequence is [2, 3, 4]. For the third test case, the array [1, 4, 3] cannot be converted to a consecutive sequence with only one swap.","solution":"def can_form_consecutive_with_single_swap(n, arr): # Check if the array is already a consecutive sequence sorted_arr = sorted(arr) if all(sorted_arr[i] == sorted_arr[0] + i for i in range(n)): return \\"YES\\" # Try to swap every pair of elements and check if it forms a consecutive sequence for i in range(n): for j in range(i + 1, n): arr[i], arr[j] = arr[j], arr[i] sorted_arr = sorted(arr) arr[i], arr[j] = arr[j], arr[i] # Swap back to original if all(sorted_arr[k] == sorted_arr[0] + k for k in range(n)): return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): results = [] for case in test_cases: n, arr = case results.append(can_form_consecutive_with_single_swap(n, arr)) return results"},{"question":"Write a program that, given a list of integers, finds and prints all unique pairs of integers from the list that sum up to a given target value. A pair is defined as two integers `(a, b)` such that `a + b` equals the target value, and `a < b` to prevent duplicate pairs being considered different. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 10^5), which is the number of integers in the list. The second line contains a sequence of `n` integers separated by spaces, all within the range of -10^6 to 10^6. The third line contains a single integer `target`, which is the target sum value for the pairs (within the range -2*10^6 to 2*10^6). -----Output----- Print each unique pair of integers `(a, b)` that add up to the target value, such that `a < b`, each pair on a new line. If there are no such pairs, print \\"No pairs found\\". -----Examples----- Input 6 1 5 7 -1 5 3 6 Output 1 5 -1 7 Input 5 2 4 3 5 7 9 Output 2 7 4 5 Input 4 1 2 3 4 8 Output No pairs found","solution":"def find_pairs_with_sum(arr, target): Finds and returns unique pairs (a, b) from the list such that a + b equals the target and a < b to ensure unique pairs. seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: a, b = sorted((num, complement)) pairs.add((a, b)) seen.add(num) return pairs if pairs else \\"No pairs found\\" def get_input_output(): Handles input and output for the solution. n = int(input()) arr = list(map(int, input().split())) target = int(input()) result = find_pairs_with_sum(arr, target) if result == \\"No pairs found\\": print(result) else: for pair in result: print(pair)"},{"question":"Given a list of integers, write a function to determine if there is a pair of numbers that sum up to a given target. Example 1: Input: arr = [1, 2, 3, 9], target = 8 Output: False Explanation: There are no two numbers in the list that add up to 8. Example 2: Input: arr = [1, 2, 4, 4], target = 8 Output: True Explanation: 4 + 4 = 8 Your Task: You don\'t need to read or print anything. Your task is to complete the function `has_pair_with_sum()` which takes the list of integers `arr` and the integer `target` as parameters and returns True if there is a pair of numbers in the list that add up to the target, otherwise, it returns False. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: - 2 <= length of arr <= 10^5 - -10^9 <= arr[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"def has_pair_with_sum(arr, target): Determines if there is a pair of numbers in the list `arr` that sum up to `target`. Parameters: arr (list of int): The list of integers to check. target (int): The target sum to find in the list. Returns: bool: True if there is a pair of numbers that sum up to target, otherwise False. seen = set() for num in arr: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"[Splat!]: You are given a rectangular grid with width W and height H. The grid consists of cells, and some cells are initially \\"splatted\\" with paint. Paint from a splatted cell spreads to its horizontally and vertically adjacent cells. Write a program to determine how many cells are painted after the paint has spread infinitely. -----Input----- The first line contains two integers W and H (1 le W, H le 1000), the width and height of the grid. The second line contains an integer K (0 le K le min(W times H, 1000)), the number of initially splatted cells. Each of the following K lines contains two integers separated by a space, representing the coordinates of a splatted cell. -----Output----- Output the number of cells that are painted after infinite spreading. -----Examples----- Sample Input 1: 5 4 2 1 2 3 3 Sample Output 1: 20 Sample Input 2: 3 3 1 2 2 Sample Output 2: 9 Sample Input 3: 5 5 0 Sample Output 3: 0","solution":"def splat_paint(W, H, K, splat_coords): if K == 0: return 0 painted = set() # Adding initial splatted cells for x, y in splat_coords: painted.add((x, y)) # BFS to spread the paint queue = list(painted) while queue: x, y = queue.pop(0) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 1 <= nx <= W and 1 <= ny <= H and (nx, ny) not in painted: painted.add((nx, ny)) queue.append((nx, ny)) return len(painted)"},{"question":"You are given a series of prehistoric rock formations represented as a sequence of blocks. Each block has a height. A formation is defined as a continuous subsequence of blocks that forms a flat top plateau, i.e., the heights of the blocks in the formation are the same and the formation should have at least two blocks. Your task is to find the largest flat top plateau in terms of the number of blocks that form it. If there are multiple largest plateaus with the same number of blocks, find the one which appears earliest. In case there are no such plateaus, the output should be 0. -----Input----- The first line of the input contains an integer n (2 le n le 10^5), the number of blocks. The second line of the input contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^4) representing the heights of the blocks. -----Output----- Print two integers: the starting index and the length of the largest flat top plateau. The starting index is 1-based. If no plateau is found, print 0. -----Examples----- Input 7 2 2 3 3 3 4 4 Output 3 3 Input 5 1 2 3 4 5 Output 0 Input 8 5 5 5 2 2 2 2 3 Output 4 4","solution":"def find_largest_plateau(n, heights): Finds the largest flat top plateau in terms of number of blocks. Parameters: n (int): Number of blocks heights (list of int): Heights of the blocks Returns: tuple: Starting index (1-based) and length of the largest plateau. If no plateau is found, returns 0. max_length = 0 max_start_index = -1 current_length = 1 for i in range(1, n): if heights[i] == heights[i-1]: current_length += 1 else: if current_length > max_length: max_length = current_length max_start_index = i - current_length current_length = 1 if current_length > max_length: max_length = current_length max_start_index = n - current_length if max_length >= 2: return (max_start_index + 1, max_length) else: return 0"},{"question":"Given a string and a dictionary of words, find the shortest transformation sequence from the string to a target word in the dictionary, such that only one letter can be changed at a time and each transformed word must exist in the dictionary. Return the length of the shortest transformation sequence or 0 if no such transformation sequence exists. Example 1: Input: start = \\"hit\\", end = \\"cog\\", wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"] Output: 5 Explanation: As one shortest transformation is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", return its length 5. Example 2: Input: start = \\"hit\\", end = \\"cog\\", wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\"] Output: 0 Explanation: The end word \\"cog\\" is not in wordList, therefore no possible transformation. Example 3: Input: start = \\"a\\", end = \\"c\\", wordList = [\\"a\\",\\"b\\",\\"c\\"] Output: 2 Explanation: As one shortest transformation is \\"a\\" -> \\"c\\", return its length 2. Constraints: - 1 <= start.length <= 100 - end.length == start.length - 1 <= wordList.length <= 5000 - wordList[i].length == start.length - start, end, and wordList[i] consist of lowercase English letters.","solution":"from collections import deque def ladderLength(start: str, end: str, wordList: list[str]) -> int: def get_neighbors(word): neighbors = [] for i in range(len(word)): for char in \'abcdefghijklmnopqrstuvwxyz\': if char != word[i]: new_word = word[:i] + char + word[i+1:] neighbors.append(new_word) return neighbors wordSet = set(wordList) if end not in wordSet: return 0 queue = deque([(start, 1)]) visited = set() visited.add(start) while queue: current_word, steps = queue.popleft() if current_word == end: return steps for neighbor in get_neighbors(current_word): if neighbor in wordSet and neighbor not in visited: queue.append((neighbor, steps + 1)) visited.add(neighbor) return 0"},{"question":"A common problem in text processing involves identifying palindromes. Write a program that determines if a given word is a palindrome. Input The input consists of a single line containing a word with a maximum length of 100 characters. The word consists of lowercase English letters only. Output Output \\"YES\\" if the word is a palindrome and \\"NO\\" otherwise. Examples Input radar Output YES Input hello Output NO","solution":"def is_palindrome(word): Determines if the given word is a palindrome. Args: word (str): The word to check. Returns: str: \\"YES\\" if the word is a palindrome, \\"NO\\" otherwise. if word == word[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of integers representing the amount of gold in each pile. Initially, you can take as much gold as you want from any single pile. After taking gold from a pile, you may not take from that same pile again but can only take gold from an adjacent pile to the last pile you took gold from. If you took gold from the middle pile, you may continue taking from either adjacent piles according to this rule. Your task is to compute the maximal amount of gold you can collect following these rules starting and ending from any pile. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Each test case begins with an integer n (3 le n le 1000) — the number of piles in that test case. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) representing the amount of gold in each pile. -----Output----- For each test case, output a single integer — the maximal amount of gold you can collect following the given rules. -----Example----- Input 3 4 1 2 3 4 5 1 5 3 2 4 3 10 20 30 Output 6 10 30 -----Note----- In the first example, you can take from the second pile (2 gold), then switch to the third pile (3 gold), and finally take from the fourth pile (4 gold). Another way to take from the first (1 gold), then from the second (2 gold), and then from the third pile (3 gold), leading to a total of 6. In the second example, you can take from the second pile (5 gold), then move to the third pile (3 gold), and then to the fourth pile (2 gold), collecting a total of 10. In the third example, you can take from any single pile as taking from any one leads to the maximum gold collectible.","solution":"def max_gold(t, cases): results = [] for case in cases: n, gold_piles = case max_gold_collected = 0 for i in range(0, n-2): # Taking 3 piles at a time for maximum sum of 3 max_gold_collected = max(max_gold_collected, gold_piles[i] + gold_piles[i+1] + gold_piles[i+2]) results.append(max_gold_collected) return results"},{"question":"You are planning a garden party and want to set up a series of tables in a rectangular arrangement. The garden space available can be represented by a grid of dimensions H times W where each cell can either be empty or occupied by a part of a table. Tables can be of various rectangular shapes, but they must be positioned such that they do not overlap and they align with the grid. Given the dimensions of the garden and the dimensions of each table, determine if it\'s possible to fit all the tables in the garden space without overlapping and respecting their shapes. # Input - The first line contains two integers H and W (1 leq H, W leq 10), the height and width of the garden. - The second line contains a single integer N (1 leq N leq 6), the number of tables. - The next N lines each contain two integers h_i and w_i (1 leq h_i leq H, 1 leq w_i leq W) representing the height and width of the i-th table. # Output Output `possible` if all tables can be placed in the garden without overlapping and respecting their dimensions. Otherwise, output `impossible`. # Example Sample Input 1 ``` 4 4 2 2 2 2 2 ``` Sample Output 1 ``` possible ``` Sample Input 2 ``` 3 3 2 2 2 2 2 ``` Sample Output 2 ``` impossible ```","solution":"def can_place_tables(H, W, N, tables): from itertools import permutations, product def can_place_table(grid, table, row, col): table_h, table_w = table if row + table_h > H or col + table_w > W: return False for i in range(row, row + table_h): for j in range(col, col + table_w): if grid[i][j]: return False return True def place_table(grid, table, row, col): table_h, table_w = table for i in range(row, row + table_h): for j in range(col, col + table_w): grid[i][j] = True def remove_table(grid, table, row, col): table_h, table_w = table for i in range(row, row + table_h): for j in range(col, col + table_w): grid[i][j] = False perms = permutations(tables) empty_grid = [[False] * W for _ in range(H)] for perm in perms: def dfs(tables_idx, grid): if tables_idx == N: return True table = perm[tables_idx] for r, c in product(range(H), range(W)): if can_place_table(grid, table, r, c): place_table(grid, table, r, c) if dfs(tables_idx + 1, grid): return True remove_table(grid, table, r, c) return False if dfs(0, empty_grid): return \\"possible\\" return \\"impossible\\" # Example Usage: H = 4 W = 4 N = 2 tables = [(2, 2), (2, 2)] print(can_place_tables(H, W, N, tables)) # Output: possible"},{"question":"# Task Write a function that takes a string `data` representing a sequence of numerical operations, which are addition, subtraction, multiplication, and division. Each operation is represented by a single character followed by a number (with no spaces). The initial value is 0. The function should return the final result of applying all operations in sequential order. Specifications - Addition is represented by `+`, subtraction by `-`, multiplication by `*`, and division by `/`. - The numbers following the operation characters are always positive integers. - Division should be treated as integer division. - The input string will always be valid with operations and numbers in correct format. - The final result should be an integer. Examples # Example 1: **Input:** `\\"data\\" = \\"+3+2-4*5\\"` **Output:** `-5` **Explanation:** - Start with 0 - Add 3: 0 + 3 = 3 - Add 2: 3 + 2 = 5 - Subtract 4: 5 - 4 = 1 - Multiply by 5: 1 * 5 = 5 # Example 2: **Input:** `\\"data\\" = \\"+10-2/4\\"` **Output:** `2` **Explanation:** - Start with 0 - Add 10: 0 + 10 = 10 - Subtract 2: 10 - 2 = 8 - Divide by 4: 8 // 4 = 2 # Example 3: **Input:** `\\"data\\" = \\"-5*6-8\\"` **Output:** `-38` **Explanation:** - Start with 0 - Subtract 5: 0 - 5 = -5 - Multiply by 6: -5 * 6 = -30 - Subtract 8: -30 - 8 = -38","solution":"def apply_operations(data:str) -> int: Given a string `data` representing a sequence of numerical operations, return the final result of applying those operations starting from 0. Parameters: data (str): A string of operations Returns: int: The final result after all operations result = 0 i = 0 while i < len(data): op = data[i] num_str = \'\' i += 1 while i < len(data) and data[i].isdigit(): num_str += data[i] i += 1 num = int(num_str) if op == \'+\': result += num elif op == \'-\': result -= num elif op == \'*\': result *= num elif op == \'/\': result //= num return result"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). In computer science, we often need to check if a given number is a palindrome. Your task is to implement a function that finds all palindromic numbers within a given range of integers. Specifically, given two integers, `a` and `b` (inclusive), you need to find and return all palindromic numbers between `a` and `b`. Function Description Complete the function palindromicNumbers in the editor below. palindromicNumbers has the following parameter(s): int a: the lower limit int b: the upper limit Returns: list: an integer list of all palindromic numbers in ascending order within the given range, inclusive. If no palindromic numbers exist in the given range, return an empty list. Input Format The first line contains the lower integer limit `a`. The second line contains the upper integer limit `b`. Constraints 0 ≤ a ≤ b ≤ 100000 Sample Input STDIN Function ----- -------- 10 a = 10 50 b = 50 Sample Output [11, 22, 33, 44] Explanation Palindromic numbers within the range 10 to 50 are: 11, 22, 33, and 44.","solution":"def palindromicNumbers(a, b): def is_palindrome(n): s = str(n) return s == s[::-1] return [x for x in range(a, b + 1) if is_palindrome(x)]"},{"question":"You are given a list of flights with specified start and end times. Each flight represents the time during which a plane occupies the runway. Your task is to determine the minimum number of runways needed so that all flights can take off and land without any conflicts. In this context, a conflict occurs if two flights overlap in time. Write a program that reads in pairs of integers where each pair represents the start and end time of a flight. Return the minimum number of runways required such that no two flights overlap on the same runway. INPUT FORMAT The input consists of multiple lines of integers, where each line contains a pair of integers `start` and `end` (0 <= start < end <= 24), representing the start and end times of a flight. The input ends when the pair of integers is \\"-1 -1\\". OUTPUT FORMAT A single integer, representing the minimum number of runways needed. SAMPLE INPUT 1 5 2 6 8 12 5 9 -1 -1 SAMPLE OUTPUT 2 In this example, there are two flights overlapping between 1-5 and 2-6 which means at least two runways are needed.","solution":"def min_runways(flights): Determines the minimum number of runways required so that no two flights overlap. Flights is a list of tuples where each tuple consists of start and end times of a flight. if not flights: return 0 # Separate out all the start and end times starts = sorted([flight[0] for flight in flights]) ends = sorted([flight[1] for flight in flights]) s = e = 0 num_flights = len(flights) max_runways = current_runways = 0 # Iterate over times to find the maximum number of overlapping flights while s < num_flights: if starts[s] < ends[e]: current_runways += 1 max_runways = max(max_runways, current_runways) s += 1 else: current_runways -= 1 e += 1 return max_runways # Function to parse input and return the flights as a list of tuples def parse_input(): import sys flights = [] for line in sys.stdin: start, end = map(int, line.split()) if start == -1 and end == -1: break flights.append((start, end)) return flights # Main code block if __name__ == \\"__main__\\": flights = parse_input() print(min_runways(flights))"},{"question":"Write a function that takes an integer N and returns a string that represents the current time in 12-hour format, given that the provided integer N represents the number of minutes elapsed since midnight. -----Input----- The input is a single integer N (0 ≤ N < 1440), representing the number of minutes since 00:00 (midnight). -----Output----- Return a string in the format \\"hh:mm AM\\" or \\"hh:mm PM\\" depending on the time. -----Examples----- Input 75 Output 01:15 AM Input 780 Output 01:00 PM","solution":"def minutes_to_time(N): Given the number of minutes N since midnight, return the current time in 12-hour format. hours = N // 60 minutes = N % 60 period = \\"AM\\" if hours < 12 else \\"PM\\" hours = hours % 12 hours = 12 if hours == 0 else hours return f\\"{hours:02}:{minutes:02} {period}\\""},{"question":"You are given an integer array consisting of only integers \'0\', \'1\', and \'2\'. You can perform the following operations any number of times (possibly, zero): 1. Select any two adjacent elements of the array and swap them if one element is \'0\' and the other is \'1\' (i.e., replace \'[0, 1]\' with \'[1, 0]\' or vice versa). 2. Select any two adjacent elements of the array and swap them if one element is \'1\' and the other is \'2\' (i.e., replace \'[1, 2]\' with \'[2, 1]\' or vice versa). Note than you cannot swap \'[0, 2]\' with \'[2, 0]\' and vice versa. You cannot perform any other operations with the elements of the array excluding the two described above. Your task is to obtain the maximum possible (lexicographically) array by using the above swaps an arbitrary number of times (possibly, zero). An array a is lexicographically greater than array b (if arrays a and b have the same length) if there exists some position i (1 le i le |a|, where |a| is the length of the array a) such that for every j < i holds a[j] = b[j], and a[i] > b[i]. -----Input----- The first line of the input contains an integer n (1 le n le 10^5), the length of the array. The second line contains a sequence of n integers, each integer is either \'0\', \'1\', or \'2\'. -----Output----- Print a single line containing the maximum possible (lexicographically) array you can obtain by using the swaps described above any number of times (possibly, zero). -----Examples----- Input 6 1 0 2 1 0 2 Output 2 2 1 1 1 0 Input 8 2 0 2 2 1 1 0 0 Output 2 2 2 1 1 1 0 0 Input 3 1 2 0 Output 2 1 0","solution":"def max_lexicographical_array(arr): Returns the maximum possible lexicographically array. # Sort the array in descending order return sorted(arr, reverse=True) if __name__ == \\"__main__\\": n = int(input().strip()) arr = list(map(int, input().strip().split())) result = max_lexicographical_array(arr) print(\\" \\".join(map(str, result)))"},{"question":"A social media platform wants to offer a feature that suggests popular hashtags relevant to the content of a post. To do this, it needs an efficient way to store and retrieve hashtags by their frequency of use within a given timeframe. You are to design a feature that maintains the running count of hashtags and can return the top N most frequently used hashtags at any point in time. Your task is to implement a class `HashtagCounter` with the following functionalities: - `add_post(post)`: Accepts a string `post`, which is a sentence containing one or more words, and extracts hashtags (words starting with `#`). It updates the internal count of each hashtag. - `top_n_hashtags(n)`: Returns a list of the `n` most frequently occurring hashtags, in descending order of their frequency. If there are multiple hashtags with the same frequency, their order is arbitrary. # Constraints 1. Each post will contain at most 10 hashtags. 2. A hashtag is a contiguous sequence of characters (a-z, A-Z, 0-9, or _) starting with the `#` symbol. 3. The maximum length of a hashtag is 50 characters. 4. The maximum length of each post is 280 characters, consistent with typical social media constraints. 5. You can assume that there will be at least `n` distinct hashtags to return when `top_n_hashtags(n)` is called. # Input/Output Specifications Example ```python # Example usage counter = HashtagCounter() counter.add_post(\\"This is a #fun post with #coding and #fun\\") counter.add_post(\\"Another #fun post with #learning and #coding\\") print(counter.top_n_hashtags(2)) # Output: [\'#fun\', \'#coding\'] print(counter.top_n_hashtags(3)) # Output: [\'#fun\', \'#coding\', \'#learning\'] ``` Explanation Here, the hashtag `#fun` appears 3 times, `#coding` appears 2 times, and `#learning` appears once. When requesting the top 2 hashtags, it should return `#fun` and `#coding`. When requesting the top 3, it should return `#fun`, `#coding`, and `#learning`.","solution":"from collections import defaultdict, Counter import re class HashtagCounter: def __init__(self): self.hashtag_count = Counter() def add_post(self, post): Extracts hashtags from the post and updates their counts. Args: post (str): The post from which to extract hashtags. hashtags = re.findall(r\'#w{1,50}\', post) for hashtag in hashtags: self.hashtag_count[hashtag] += 1 def top_n_hashtags(self, n): Returns a list of the top `n` most frequently occurring hashtags. Args: n (int): The number of top hashtags to return. Returns: list: The top `n` hashtags in descending order of frequency. most_common = self.hashtag_count.most_common(n) return [hashtag for hashtag, count in most_common]"},{"question":"A store wants to build a system to track the most frequently sold products over different periods. You are tasked to develop a feature that finds the top K most frequently sold products in the store over a given time period. Given an array of timestamps (in seconds since the Unix epoch) when each product was sold and an array of product identifiers for each sale, find the top K most frequently sold products in the specified range of timestamps. Your implementation should read several test cases and for each test case, it should read the sales and the range, and then output the top K product identifiers sorted by frequency and then by identifier in case of a tie. Assume product identifiers are positive integers and timestamps are non-negative integers. Input Format The input consists of: - The first line contains an integer, T, denoting the number of test cases. For each test case: - The first line contains three integers separated by spaces: N, the number of sales, followed by S and E, the start and end of the time range. - The next N lines each contain two space-separated integers, the timestamp and the product identifier for each sale. - The next line contains an integer, K, the number of top products to find within the given time range. Constraints 1 leq T leq 50 1 leq N leq 10^5 0 leq text{timestamp} leq 10^{10} 1 leq text{product identifier} leq 10^5 0 leq S, E leq 10^{10} S leq E 1 leq K leq N Output Format For each test case, output K lines, each containing a product identifier. If there are ties, sort product identifiers in ascending order. The output for each test case should be separated by a blank line. Sample Input 2 5 1 10 1 3 2 3 5 4 7 2 10 4 3 7 5 15 8 2 9 2 10 3 11 4 13 4 14 5 15 5 3 Sample Output 3 4 2 2 4 5","solution":"import heapq from collections import defaultdict, Counter def find_top_k_products(T, test_cases): results = [] for case in test_cases: N, S, E = case[\'details\'] sales = case[\'sales\'] K = case[\'K\'] product_count = defaultdict(int) for timestamp, product in sales: if S <= timestamp <= E: product_count[product] += 1 # Use a min-heap to keep track of top K elements heap = [] for product, count in product_count.items(): heapq.heappush(heap, (-count, product)) top_k_products = [] for _ in range(K): top_k_products.append(heapq.heappop(heap)[1]) results.append(top_k_products) return results # Sample inputs for testing def main(): sample_input = [ { \\"details\\": (5, 1, 10), \\"sales\\": [ (1, 3), (2, 3), (5, 4), (7, 2), (10, 4) ], \\"K\\": 3 }, { \\"details\\": (7, 5, 15), \\"sales\\": [ (8, 2), (9, 2), (10, 3), (11, 4), (13, 4), (14, 5), (15, 5) ], \\"K\\": 3 } ] results = find_top_k_products(2, sample_input) for result in results: for product in result: print(product) print() if __name__ == \\"__main__\\": main()"},{"question":"A technology company assigns individual project tasks to its employees. Each task has a certain priority and a certain duration required to complete it. An employee can work on multiple tasks sequentially, but cannot work on more than one task at the same time. The goal is to find the minimum total time required for completing all tasks, given that higher priority tasks must be completed before lower priority ones. The tasks are defined by three attributes: - Task ID (a unique string identifier) - Priority (an integer where a lower number indicates higher priority) - Duration (an integer representing the time in minutes to complete the task) The input consists of multiple datasets. Each dataset begins with an integer n (1 ≤ n ≤ 100), the number of tasks. This is followed by n lines, each containing the Task ID, Priority, and Duration for a task, separated by spaces. The sequence of datasets ends with a line containing a zero. The output for each dataset should be a single line with the minimum total time required to complete all tasks. Input ``` 3 T1 2 30 T2 1 20 T3 3 10 2 T1 1 40 T2 2 20 0 ``` Output ``` 60 60 ``` Explanation For the first dataset, the task sequence based on priority is T2, T1, T3. The total time is 20 + 30 + 10 = 60 minutes. For the second dataset, all tasks can be done in sequence as T1, T2. The total time is 40 + 20 = 60 minutes.","solution":"def min_total_time(datasets): results = [] for tasks in datasets: # Sort tasks by priority (first element of tuple) tasks_sorted = sorted(tasks, key=lambda x: x[1]) # Calculate total time total_time = sum(task[2] for task in tasks_sorted) results.append(total_time) return results def parse_input(data): datasets = [] current_dataset = [] for line in data.strip().split(\'n\'): if line == \'0\': if current_dataset: datasets.append(current_dataset) break elif line.isdigit(): if current_dataset: datasets.append(current_dataset) current_dataset = [] else: task_id, priority, duration = line.split() current_dataset.append((task_id, int(priority), int(duration))) return datasets # Example input processing input_data = 3 T1 2 30 T2 1 20 T3 3 10 2 T1 1 40 T2 2 20 0 datasets = parse_input(input_data) output = min_total_time(datasets) for result in output: print(result)"},{"question":"Consider a zero-indexed array with n elements, where we define an operation which takes the sum of the squares of the array\'s elements and reduces each element by 1. The operation is repeated for k times. If an element becomes zero, it stays zero for all subsequent operations. Given the initial array and the number of operations k, find and print the remaining sum of the array\'s elements after k operations. Input Format The first line contains two space-separated integers denoting the respective values of n (the number of elements in the array) and k (the number of operations to be performed). The second line contains n space-separated integers denoting the respective values of the elements in the initial array. Constraints 1leq nleq10^5 1leq kleq10^9 0leq a_{i}leq10^9 Output Format Print a single integer denoting the remaining sum of the array\'s elements after k operations. Sample Input 0 4 2 3 4 2 1 Sample Output 0 7 Explanation 0 Let\'s calculate the sum of the squares of the elements and update the array for each operation: - After the 1st operation: sum_of_squares = 3^2 + 4^2 + 2^2 + 1^2 = 9 + 16 + 4 + 1 = 30 updated array: [2, 3, 1, 0] - After the 2nd operation: sum_of_squares = 2^2 + 3^2 + 1^2 + 0^2 = 4 + 9 + 1 + 0 = 14 updated array: [1, 2, 0, 0] After k=2 operations, the final array is [1, 2, 0, 0] and the remaining sum of the elements is 1 + 2 + 0 + 0 = 3.","solution":"def remaining_sum_after_operations(n, k, arr): for _ in range(k): arr = [max(0, x - 1) for x in arr] # This will simulate each operation if sum(arr) == 0: # Early exit if all elements become zero break return sum(arr)"},{"question":"In a city, there are `N` houses arranged in a straight line, each with a certain amount of money stashed. However, due to a peculiar property of the city\'s security system, adjacent houses cannot be robbed on the same night, as the police will be alerted. Given an array of integers representing the amount of money in each house, write a function to calculate the maximum amount of money that can be robbed tonight without alerting the police. # Input: - An integer array `money`, where `money[i]` is the amount of money stored in the `i`-th house. The length of the `money` array is `N` (1 ≤ N ≤ 1000). # Output: - An integer representing the maximum amount of money that can be robbed. # Example: ```python money = [2, 7, 9, 3, 1] # Possible amount to rob without alerting the police: # Rob house 1 (money = 2), house 3 (money = 9), and house 5 (money = 1) # Total amount = 2 + 9 + 1 = 12 maxMoney(money) # Output: 12 ``` # Constraints: - You may not rob two adjacent houses. - Try to make your solution efficient. # Notes: - Consider edge cases such as the array having only one house, two houses, etc. - Use dynamic programming techniques to ensure that the solution is optimal.","solution":"def maxMoney(money): Given an array of integers representing the amount of money in each house, calculate the maximum amount of money that can be robbed without alerting the police. if not money: return 0 if len(money) == 1: return money[0] N = len(money) dp = [0] * N dp[0] = money[0] dp[1] = max(money[0], money[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + money[i]) return dp[-1]"},{"question":"Write a function `sumOfSquares`, `sum_of_squares` or `SumOfSquares` that takes a list of integers and returns the sum of the squares of each number in the list. For example, given the list `[1, 2, 3, 4]`, the function should return `30` because `1^2 + 2^2 + 3^2 + 4^2 = 30`.","solution":"def sum_of_squares(lst): Returns the sum of the squares of each number in the list. Parameters: lst (list): A list of integers. Returns: int: The sum of the squares of the integers. return sum(x**2 for x in lst)"},{"question":"Anna is organizing a music festival. She wants to prepare a schedule that respects a set of dependencies between performances. Each performance must start only after all its prerequisite performances are completed. There are n performances and m dependencies. A dependency is described as a directed edge from performance a to performance b, indicating that a must be completed before b can start. Anna needs to determine any valid order in which all the performances can be scheduled so that all the dependencies are respected. If there are multiple valid schedules, output any one of them. If it is impossible to schedule all performances due to a cyclic dependency, output \\"IMPOSSIBLE\\". -----Input----- The first line contains two integers n and m (1 le n le 1000, 0 le m le 10^5), the number of performances, and the number of dependencies, respectively. Each of the next m lines contains two integers a and b (1 le a, b le n, a neq b), representing a dependency that performance a must be completed before performance b can start. -----Output----- Output a single line with n integers representing a valid schedule of the performances. If no valid schedule exists, output \\"IMPOSSIBLE\\". -----Examples----- Input 5 4 1 2 1 3 3 4 4 5 Output 1 3 4 5 2 Input 3 3 1 2 2 3 3 1 Output IMPOSSIBLE -----Note----- In the first example, one possible valid schedule is 1 3 4 5 2, but other valid schedules like 1 2 3 4 5 also exist. In the second example, it is impossible to find a valid schedule due to the cyclic dependency among the performances.","solution":"from collections import deque, defaultdict def find_performance_order(n, m, dependencies): indegree = [0] * (n + 1) graph = defaultdict(list) # Build the graph and count indegrees for a, b in dependencies: graph[a].append(b) indegree[b] += 1 # Initialize queue with nodes having 0 indegree queue = deque([i for i in range(1, n + 1) if indegree[i] == 0]) order = [] while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # Check if we have included all the performances if len(order) == n: return order else: return \\"IMPOSSIBLE\\" # Example Usage n = 5 m = 4 dependencies = [ (1, 2), (1, 3), (3, 4), (4, 5) ] print(find_performance_order(n, m, dependencies)) # Example output"},{"question":"Your program will be given a list of integers representing the scores of students in a class. Find the median score. The median is the middle value in a list when the numbers are sorted in ascending order. If the number of scores is even, the median is the average of the two middle numbers. -----Input----- The first line contains a single integer N (1 le N le 1000), the number of students. The second line contains N space-separated integers, each representing a student\'s score (0 le text{score} le 100). -----Output----- Output the median score on a single line. If the median is not an integer, output it as a floating-point number with a single decimal place. -----Examples----- Sample Input 1: 5 55 70 85 90 82 Sample Output 1: 82 Sample Input 2: 6 30 40 20 50 60 70 Sample Output 2: 45.0","solution":"def find_median(N, scores): Returns the median score from a list of N scores. Parameters: N (int): The number of students. scores (list of int): The scores of the students. Returns: float: The median score. scores.sort() if N % 2 == 1: # Odd number of scores, return the middle one return float(scores[N // 2]) else: # Even number of scores, return the average of the two middle ones mid1 = scores[N // 2 - 1] mid2 = scores[N // 2] return (mid1 + mid2) / 2.0"},{"question":"You are given an initial integer sequence of length n consisting of the numbers 1 through n in some order. A contiguous subsequence in this sequence is considered \\"beautiful\\" if it contains no duplicate elements and can be rearranged to be in increasing order without reversing. Your task is to make the sequence beautiful by removing the minimum number of elements. After that, output the length of the longest beautiful subsequence that remains. Input The first line of the input contains one integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the sequence itself. Output Print the length of the longest beautiful subsequence that can be obtained by removing the minimum number of elements. Examples Input 6 4 3 5 2 1 6 Output 4 Input 5 2 2 2 2 2 Output 1 Input 9 1 2 3 4 5 6 7 8 9 Output 9 Explanation of Sample Cases: In the first example, one possible way to obtain the longest beautiful subsequence is by removing elements 3, 5, and 2 to get [4, 1, 6], which can be rearranged to [1, 4, 6]. It\'s also possible to get a subsequence [3, 4, 1, 6], which can be rearranged to [1, 3, 4, 6]. In the second example, since all elements are the same, any single element will be a beautiful subsequence, hence the longest beautiful subsequence has a length of 1. In the last example, the sequence is already beautiful, so the entire sequence length is the output.","solution":"def longest_beautiful_subsequence(n, sequence): Returns the length of the longest beautiful subsequence. if n == 0: return 0 unique_elements = list(set(sequence)) unique_elements.sort() return len(unique_elements)"},{"question":"You are working on implementing a basic inventory management system for a library. Each book in the library has a unique identifier, a title, and an author. The librarian needs functionalities to add new books, remove books by their unique identifier, and search for books either by their unique identifier, title, or author. You are required to implement these functionalities. -----Input----- Input will be given as a sequence of commands, where each command is one of the following: 1. `ADD <id> <title> <author>`: Adds a new book with given `id`, `title`, and `author`. If a book with the same `id` already exists, update its `title` and `author`. 2. `REMOVE <id>`: Removes the book with the given unique identifier. If no such book exists, do nothing. 3. `SEARCH_BY_ID <id>`: Searches for a book by its unique identifier. If found, print the book details in the format `id title author`. Otherwise, print \\"Book not found\\". 4. `SEARCH_BY_TITLE <title>`: Searches for books by their title. Print all matching books in the format `id title author`, one per line. If no book is found, print \\"No books found\\". 5. `SEARCH_BY_AUTHOR <author>`: Searches for books by their author. Print all matching books in the format `id title author`, one per line. If no book is found, print \\"No books found\\". ----Output---- For each search command, output the results as specified above. For `ADD` and `REMOVE` commands, no output is required. -----Examples----- Sample Input 1: ADD 1 \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" ADD 2 \\"To Kill a Mockingbird\\" \\"Harper Lee\\" SEARCH_BY_TITLE \\"The Great Gatsby\\" REMOVE 1 SEARCH_BY_TITLE \\"The Great Gatsby\\" Sample Output 1: 1 The Great Gatsby F. Scott Fitzgerald No books found Sample Input 2: ADD 3 \\"1984\\" \\"George Orwell\\" ADD 4 \\"Animal Farm\\" \\"George Orwell\\" SEARCH_BY_AUTHOR \\"George Orwell\\" Sample Output 2: 3 1984 George Orwell 4 Animal Farm George Orwell","solution":"class Library: def __init__(self): self.books = {} def add_book(self, book_id, title, author): self.books[book_id] = {\\"title\\": title, \\"author\\": author} def remove_book(self, book_id): if book_id in self.books: del self.books[book_id] def search_by_id(self, book_id): if book_id in self.books: book = self.books[book_id] return f\'{book_id} {book[\\"title\\"]} {book[\\"author\\"]}\' else: return \\"Book not found\\" def search_by_title(self, title): results = [f\'{book_id} {book[\\"title\\"]} {book[\\"author\\"]}\' for book_id, book in self.books.items() if book[\'title\'] == title] if results: return \\"n\\".join(results) else: return \\"No books found\\" def search_by_author(self, author): results = [f\'{book_id} {book[\\"title\\"]} {book[\\"author\\"]}\' for book_id, book in self.books.items() if book[\'author\'] == author] if results: return \\"n\\".join(results) else: return \\"No books found\\""},{"question":"Factorial Trailing Zeros Given an integer n, write a program to count the number of trailing zeros in the factorial of n. Input: - n (1 ≤ n ≤ 10^9) Output: - The number of trailing zeros in n! # Explanation: The factor trailing zeros of a number are primarily influenced by the number of times 10 is a factor in that number. Given that 10 is the product of 2 and 5, and factorials have more factors of 2 than 5, the problem reduces to counting the number of times 5 is a factor in the numbers from 1 to n. # Example: Input: 25 Output: 6 Explanation: 25! = 15,511,210,043,330,985,984,000,000 which has 6 trailing zeros.","solution":"def trailing_zeros_in_factorial(n): Given an integer n, returns the number of trailing zeros in the factorial of n. count_zeros = 0 power_of_five = 5 while n >= power_of_five: count_zeros += n // power_of_five power_of_five *= 5 return count_zeros"},{"question":"Given an array of integers, you need to find the maximum sum of any subarray. The subarray is defined as a contiguous segment of elements within the original array. -----Input----- - First line contains a single integer N denoting the number of elements in the array. - Second line contains N space-separated integers representing the elements of the array. -----Output----- - Print a single integer, the maximum sum of any subarray. -----Constraints----- - 1 ≤ N ≤ 100000 - -10^5 ≤ Ai ≤ 10^5 -----Example----- Input: 8 -2 1 -3 4 -1 2 1 -5 4 Output: 6 Input: 4 -1 -2 -3 -4 Output: -1 Input: 5 1 2 3 4 5 Output: 15 -----Explanation----- For the first sample, the subarray with the maximum sum is {4, -1, 2, 1}, which sums to 6. For the second sample, the largest sum comes from subarray {-1}, since all numbers are negative. For the third sample, the entire array gives the maximum sum of 15.","solution":"def max_subarray_sum(arr): Finds the maximum sum of any subarray within the given array `arr`. Uses Kadane\'s algorithm for efficient computation. :param arr: List of integers representing the array. :return: Maximum sum of any subarray. max_so_far = arr[0] current_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) max_so_far = max(max_so_far, current_max) return max_so_far"},{"question":"Matilda is a software developer at a tech company. She is currently working on a project that involves compressing and decompressing strings using a very simple compression algorithm. The compression algorithm works by replacing sequences of the same character in the string with that character followed by the count of consecutive characters. For example, the string `\\"aaabbcdddd\\"` would be compressed to `\\"a3b2c1d4\\"`. Now, Matilda needs your help to complete two tasks: 1. Implement a function to compress a given string using the described algorithm. 2. Implement a function to decompress a compressed string back to its original form. Input: - The first line contains a single integer `T`, the number of test cases. - For each test case, there will be two lines: - The first line contains a string `type` which will be either \\"compress\\" or \\"decompress\\" indicating the task type. - The second line contains the input string `s` on which the function needs to be executed. Output: - For each test provided in the input, output the result of the compression or decompression. Constraints: - `1 ≤ T ≤ 50` - For \\"compress\\" task: `1 ≤ length of s ≤ 10^5` where `s` consists of lowercase English letters. - For \\"decompress\\" task: `1 ≤ length of s ≤ 10^5` where `s` follows the format of the compression algorithm output (i.e., alternating letters and numbers). Sample Input: 4 compress aaabbcdddd decompress a2b1c5 compress abc decompress a1b1c1 Sample Output: a3b2c1d4 aabbccccc a1b1c1 abc Explanation: - For the first test case, \\"aaabbcdddd\\" compresses to \\"a3b2c1d4\\". - For the second test case, \\"a2b1c5\\" decompresses to \\"aabbccccc\\". - For the third test case, \\"abc\\" compresses to \\"a1b1c1\\" as all characters are distinct. - For the fourth test case, \\"a1b1c1\\" decompresses to \\"abc\\".","solution":"def compress(s): Compresses the given string using the described algorithm. if not s: return \\"\\" compressed = [] count = 1 prev_char = s[0] for char in s[1:]: if char == prev_char: count += 1 else: compressed.append(prev_char) compressed.append(str(count)) prev_char = char count = 1 compressed.append(prev_char) compressed.append(str(count)) return \\"\\".join(compressed) def decompress(s): Decompresses the given compressed string back to its original form. decompressed = [] i = 0 while i < len(s): char = s[i] count = int(s[i + 1]) decompressed.append(char * count) i += 2 return \\"\\".join(decompressed)"},{"question":"Mina loves playing with sequences of numbers. She recently came across an interesting problem and needs your help to solve it. The problem is as follows: Given a sequence of N integers, you can choose any sub-sequence and apply one of two operations: 1. Increment every element of the sub-sequence by 1. 2. Decrement every element of the sub-sequence by 1. You need to determine the minimum number of operations required to make all elements of the sequence the same. Input First line of input contains a single integer N, representing the length of the sequence. Second line of input contains N space-separated integers, representing the elements of the sequence. Output Minimum number of operations required to make all elements of the sequence the same integer. Constraints 2 ≤ N ≤ 20 -100 ≤ Sequence elements ≤ 100 SAMPLE INPUT 5 3 3 1 1 1 SAMPLE OUTPUT 2 Explanation In the given sample case, you can make all the elements same as follows: Method 1: Choose sub-sequence {1, 1, 1} and increment each element by 2 to get {3, 3, 3}. Thus, the minimum number of operations is 2.","solution":"def min_operations_to_equalize(sequence): from collections import Counter N = len(sequence) counter = Counter(sequence) max_freq = max(counter.values()) # The least number of operations to make all elements the same return N - max_freq # Example usage: # N = 5 # sequence = [3, 3, 1, 1, 1] # print(min_operations_to_equalize(sequence)) # Output: 2"},{"question":"A new startup company wants to install a new secure system for their employees. Each employee is assigned a code which is a string consisting of uppercase English letters and digits. The security system is designed such that it will only accept the passwords if they meet the following criteria: - The password must be at least 6 characters long. - The password must contain at least one uppercase letter and one digit. - The password must be a valid palindrome. A string is called a palindrome if it reads the same backward as forward (for example, \\"ABBA\\", \\"12321\\" are palindromes). Your task is to write a function that accepts a string password and returns \\"VALID\\" if the password meets all the criteria, otherwise it returns \\"INVALID\\". Input The input contains a single string s (1 ≤ |s| ≤ 1000) which is the password to be checked. Output Output a single string: either \\"VALID\\" or \\"INVALID\\". Examples Input AB1BA Output INVALID Input A1B2B1A Output VALID Input ABCDE Output INVALID Note In the first sample test, the given password is a palindrome and contains an uppercase letter and a digit, but it is only 5 characters long which is less than the minimum required length of 6 characters, so the result is \\"INVALID\\". In the second sample test, the given password is a palindrome, contains uppercase letters, digits, and its length is more than 6 characters, so the result is \\"VALID\\". In the third sample test, although the given password is more than 6 characters long, it doesn\'t contain any digits and it is also not a palindrome, so the result is \\"INVALID\\".","solution":"def check_password(password): Check if the password is valid based on the given criteria. :param password: Password string to check. :return: \\"VALID\\" if the password meets all criteria, otherwise \\"INVALID\\". # Check if the password is at least 6 characters long if len(password) < 6: return \\"INVALID\\" # Check if the password contains at least one uppercase letter and one digit has_upper = any(char.isupper() for char in password) has_digit = any(char.isdigit() for char in password) if not (has_upper and has_digit): return \\"INVALID\\" # Check if the password is a palindrome if password != password[::-1]: return \\"INVALID\\" return \\"VALID\\""},{"question":"A robot is initially placed at the origin (0, 0) on a 2D plane. It follows a sequence of instructions to move. Each instruction is one of the following three: - \\"U\\" (meaning to move up by 1 unit) - \\"D\\" (meaning to move down by 1 unit) - \\"R\\" (meaning to move right by 1 unit) Given the sequence of instructions, determine the robot\'s final position on the plane. ------ Input Format ------ - First line will contain T, the number of test cases. Then the T test cases follow. - Each test case contains a single string of instructions. ------ Output Format ------ For each test case, output a pair of integers representing the final coordinates of the robot. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ text{length of instruction string} ≤ 1000 ----- Sample Input 1 ------ 2 URR UUDDRR ----- Sample Output 1 ------ (1, 1) (2, 0) ----- Explanation 1 ------ Test Case 1: - First move \\"U\\": (0, 0) -> (0, 1) - Second move \\"R\\": (0, 1) -> (1, 1) - Third move \\"R\\": (1, 1) -> (2, 1) So, the final position is (2, 1). Test Case 2: - First move \\"U\\": (0, 0) -> (0, 1) - Second move \\"U\\": (0, 1) -> (0, 2) - Third move \\"D\\": (0, 2) -> (0, 1) - Fourth move \\"D\\": (0, 1) -> (0, 0) - Fifth move \\"R\\": (0, 0) -> (1, 0) - Sixth move \\"R\\": (1, 0) -> (2, 0) So, the final position is (2, 0).","solution":"def move_robot(instructions): Returns the final coordinates of the robot after executing the instruction sequence. x, y = 0, 0 for instruction in instructions: if instruction == \\"U\\": y += 1 elif instruction == \\"D\\": y -= 1 elif instruction == \\"R\\": x += 1 return x, y def process_test_cases(test_cases): results = [] for instructions in test_cases: final_position = move_robot(instructions) results.append(final_position) return results"},{"question":"Your task is to write a function that simulates a simplified communication protocol between two systems. The protocol involves encoding a message using a unique pattern and then decoding it back to its original form, adhering to a predefined set of rules. The encoding process is as follows: 1. Consider the message as a string consisting of uppercase English letters and spaces. 2. Each letter in the message is first converted to its positional value in the alphabet, where \'A\' is 0, \'B\' is 1, ..., \'Z\' is 25, and space is 26. 3. Each positional value is then incremented by its position in the message (1-based), followed by taking a modulo 27 of the result. For example, for the first character, increment by 1 and take modulo 27, for the second character, increment by 2 and take modulo 27, and so forth. 4. The resulting values are then converted back to their respective characters. The decoding process reverses the encoding: 1. Each encoded letter (now a character) is converted back to its positional value. 2. Subtract the position value used during encoding from each positional value (considering 1-based indexing), and then take modulo 27 to get the original positional value. 3. Convert these values back to the original characters. Write two functions, `encode_message` and `decode_message`, to complete this protocol. # Input - `message` (a string) : The original message to be encoded. - `encoded_message` (a string): The encoded message to be decoded. # Output - The encoded or decoded message as a string. # Functions Signature ```python def encode_message(message: str) -> str: # Your implementation here def decode_message(encoded_message: str) -> str: # Your implementation here ``` # Example ```python # Example usage: original_message = \\"HELLO WORLD\\" encoded_message = encode_message(original_message) decoded_message = decode_message(encoded_message) # Output the results print(encoded_message) # Expected encoded string print(decoded_message) # Should match \\"HELLO WORLD\\" ``` # Note - The input messages contain only uppercase English letters and spaces. - Ensure the encoding and decoding processes are inverses of each other. # Constraints - The length of the message, `N` (1 ≤ N ≤ 10^5).","solution":"def encode_message(message: str) -> str: Encodes the input message based on the described encoding process. encoded = [] for i, char in enumerate(message): # Calculate the 0-based alphabetical/index position if char == \' \': pos = 26 else: pos = ord(char) - ord(\'A\') # Increment by position (1-based) and modulo 27 new_pos = (pos + (i + 1)) % 27 # Convert back to character if new_pos == 26: encoded_char = \' \' else: encoded_char = chr(ord(\'A\') + new_pos) encoded.append(encoded_char) return \'\'.join(encoded) def decode_message(encoded_message: str) -> str: Decodes the encoded message back to its original form. decoded = [] for i, char in enumerate(encoded_message): # Calculate the 0-based position if char == \' \': pos = 26 else: pos = ord(char) - ord(\'A\') # Subtract the position (1-based) and modulo 27 orig_pos = (pos - (i + 1)) % 27 # Convert back to original character if orig_pos == 26: decoded_char = \' \' else: decoded_char = chr(ord(\'A\') + orig_pos) decoded.append(decoded_char) return \'\'.join(decoded)"},{"question":"Description A palindrome is a string that reads the same backward as forward. Write a function that checks if a given string is almost a palindrome. A string is considered almost a palindrome if it can be made into a palindrome by removing exactly one character. The input is a string that can contain upper and lowercase characters, punctuation, and spaces. The function should return a boolean indicating whether the string is almost a palindrome. Examples: ``` \\"radkar\\" -> True (Removing \'d\' makes it \\"rakar\\") \\"raceecar\\" -> True (Removing \'e\' makes it \\"racecar\\") \\"abc\\" -> False (There is no way to remove just one character to make it a palindrome) ``` Function Signature: ```python def almost_palindrome(s: str) -> bool: pass ``` Note: - The function should handle both uppercase and lowercase characters. - The function should ignore spaces and punctuation when checking for an almost palindrome. Good luck!","solution":"def is_palindrome(s): Helper function to check if a given string is a palindrome. return s == s[::-1] def almost_palindrome(s): Returns True if the given string is an almost palindrome. A string is considered an almost palindrome if it can be made into a palindrome by removing exactly one character. # Clean the string by removing non-alphanumeric characters and converting to lowercase cleaned = \'\'.join(c.lower() for c in s if c.isalnum()) # Check if already a palindrome if is_palindrome(cleaned): return True n = len(cleaned) for i in range(n): # Create a new string by skipping the i-th character new_string = cleaned[:i] + cleaned[i+1:] # Check if the new string is a palindrome if is_palindrome(new_string): return True return False"},{"question":"You are given a matrix M of dimensions N x N. You need to find the largest square sub-matrix which contains all identical elements. Return the size (length of the side) of that square sub-matrix. Example 1: Input: N = 4 M = [ [1, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 0] ] Output: 3 Explanation: The largest square sub-matrix with all identical elements is: [1, 1, 1] [1, 1, 1] [1, 1, 1] Example 2: Input: N = 5 M = [ [2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [2, 2, 2, 2, 2] ] Output: 5 Explanation: The largest square sub-matrix with all identical elements is the entire matrix itself. Your Task: You do not need to read input or print anything. Your task is to complete the function `findLargestSquare()` which takes the matrix M and its dimension N as input parameters and returns the size of the largest square sub-matrix. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 <= N <= 500 0 <= M[i][j] <= 1000","solution":"def findLargestSquare(N, M): if N == 0: return 0 max_side = 0 dp = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): if i == 0 or j == 0: dp[i][j] = 1 else: if M[i][j] == M[i-1][j] == M[i][j-1] == M[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"A string is considered to be a valid identifier if it meets the following criteria: 1. It starts with a letter (either uppercase or lowercase) or an underscore (\'_\'). 2. The remaining characters can be any combination of letters, digits, or underscores. Write a function to determine if a given string is a valid identifier. Input The input contains a single line with a string s (1 ≤ |s| ≤ 100), where s consists of ASCII characters. Output Output \\"True\\" if the string is a valid identifier, otherwise output \\"False\\". SAMPLE INPUT variable_name_1 SAMPLE OUTPUT True","solution":"def is_valid_identifier(s): Determine if the given string is a valid identifier. :param s: String to be checked. :return: True if the string is a valid identifier, False otherwise. if not s: return False if not (s[0].isalpha() or s[0] == \'_\'): return False for char in s: if not (char.isalnum() or char == \'_\'): return False return True"},{"question":"Write a program that reads a list of integers and prints the greatest common divisor (GCD) of the integers in the list. The greatest common divisor of two or more integers is the largest positive integer that divides each of the integers. Input The input consists of several datasets. Each dataset starts with an integer n (1 ≤ n ≤ 100), representing the number of integers in the list, followed by n integers. Each integer is between 1 and 10^6 (inclusive). The number of datasets is less than or equal to 20. Output For each dataset, print the greatest common divisor of the integers in the list. Example Input 3 12 15 21 4 36 48 18 24 Output 3 6","solution":"from math import gcd from functools import reduce def gcd_of_list(numbers): Returns the greatest common divisor (GCD) of the list of numbers. return reduce(gcd, numbers) def process_datasets(datasets): Processes a list of datasets and returns the GCD for each dataset. results = [] for dataset in datasets: n, *numbers = dataset results.append(gcd_of_list(numbers)) return results"},{"question":"Farmer John owns a rectangular farm with dimensions n times m. He has planted crops in some cells of the farm while leaving the rest empty. Farmer John wants to water all the crops, but his watering system only allows him to water continuous rectangular blocks of cells. In one operation, he can water a continuous rectangular block of cells, including all empty and non-empty (planted) cells within that block. To minimize the water usage and effort, Farmer John wants you to help him determine the minimum number of operations required to water all the crops. Given the dimensions of the farm and the positions of the crops, find the minimum number of watering operations required to ensure all crops are watered. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 leq t leq 50). Description of the test cases follows. The first line of each test case contains two integers n and m (1 leq n, m leq 50) — the dimensions of the farm. The next n lines contain m characters each, representing the farm. A character `.` denotes an empty cell, and a character `*` denotes a cell with a crop planted. -----Output----- For each test case, output a single integer — the minimum number of operations required to water all the crops. -----Example----- Input 2 3 4 .*.. ..*. .... 2 3 *.. ..* Output 2 2 -----Note----- In the first test case, one possible way to water all the crops in 2 operations is: First operation: Water the rectangle covering cells (1, 2) to (2, 3). Second operation: Water the rectangle covering cell (2, 3). In the second test case, one possible way to water all the crops in 2 operations is: First operation: Water the rectangle covering cell (1, 1) to (1, 1). Second operation: Water the rectangle covering cell (2, 2) to (2, 3).","solution":"def min_watering_operations(test_cases): results = [] for case in test_cases: n, m = case[\'n\'], case[\'m\'] farm = case[\'farm\'] def find_rectangles(): visited = [[False] * m for _ in range(n)] rectangles = 0 def dfs(x, y, crop_coords): if x < 0 or x >= n or y < 0 or y >= m or visited[x][y] or farm[x][y] != \'*\': return visited[x][y] = True crop_coords.append((x, y)) dfs(x + 1, y, crop_coords) dfs(x - 1, y, crop_coords) dfs(x, y + 1, crop_coords) dfs(x, y - 1, crop_coords) for i in range(n): for j in range(m): if farm[i][j] == \'*\' and not visited[i][j]: crop_coords = [] dfs(i, j, crop_coords) if crop_coords: rectangles += 1 return rectangles results.append(find_rectangles()) return results # Example usage: test_cases = [ { \'n\': 3, \'m\': 4, \'farm\': [ \'.*..\', \'..*.\', \'....\' ] }, { \'n\': 2, \'m\': 3, \'farm\': [ \'*..\', \'..*\' ] } ] for result in min_watering_operations(test_cases): print(result) # Output: 2, 2"},{"question":"Alice loves collecting rare coins. She has a collection of n coins with each coin having a value a_i. Every day, Alice performs the following operation: she selects two different coins, removes them from the collection, and adds a new coin with their combined value back to the collection. She continues this process until she is left with only one coin. Alice wonders what the maximum possible value of the final coin is after performing these operations. Can you help Alice find out the maximum value of the final coin after all possible operations? ----Input---- The first line contains a single integer n (2 ≤ n ≤ 50) - the number of coins in Alice\'s collection. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) - the values of the coins. ----Output---- Print a single integer - the maximum possible value of the final coin. ----Examples---- Input 3 1 2 3 Output 6 Input 4 2 2 1 5 Output 10 ----Note---- In the first test case, Alice can perform the following operations: 1. Combine coins with values 1 and 2 to get a coin with value 3. 2. Combine coins with values 3 and 3 to get a coin with value 6. In the second test case, one way to achieve the maximum value is: 1. Combine coins with values 2 and 2 to get a coin with value 4. 2. Combine coins with values 1 and 5 to get a coin with value 6. 3. Combine coins with values 4 and 6 to get a coin with value 10.","solution":"def max_final_coin_value(n, coins): Returns the maximum possible value of the final coin after performing operations. total_value = sum(coins) return total_value # Example usage: # n = 4 # coins = [2, 2, 1, 5] # print(max_final_coin_value(n, coins)) # Output: 10"},{"question":"Given an integer array \'nums\' and an integer \'val\', remove all occurrences of \'val\' in-place and return the new length. Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory. Example 1: Input: nums = [3,2,2,3], val = 3 Output: 2 Explanation: Your function should return length 2, with the first two elements of nums being 2. Example 2: Input: nums = [0,1,2,2,3,0,4,2], val = 2 Output: 5 Explanation: Your function should return length 5, with the first five elements of nums containing 0, 1, 3, 0, and 4. Note: The order of elements can be changed. It doesn\'t matter what you leave beyond the returned length.","solution":"def remove_element(nums, val): Removes all occurrences of val in nums in-place and returns the new length. k = 0 # Counter for non-val elements for i in range(len(nums)): if nums[i] != val: nums[k] = nums[i] k += 1 return k"},{"question":"Determine Square Words Write a function to determine if a given string is a \\"square word\\". A word is considered a \\"square word\\" if the indices of each letter can form a perfect square when summed together. Include letters in the indices starting from 1 (1-indexed). The format A function passing one string and returning a boolean indicating whether it is a \\"square word\\". ``function isSquareWord(word){ return true || false }`` Examples isSquareWord(\\"abc\\") --> false Explanation: (1^2 + 2^2 + 3^2) = 1 + 4 + 9 = 14 (Not a perfect square) ---------------------------------------------------------- isSquareWord(\\"abbc\\") --> true Explanation: (1^2 + 2^2 + 2^2 + 3^2) = 1 + 4 + 4 + 9 = 18 = (4.24)^2 (Perfect square when all indices for each letter occurrence are considered) ---------------------------------------------------------- isSquareWord(\\"zzz\\") --> true Explanation: (1^2 + 2^2 + 3^2) = 1 + 4 + 9 = 14 (Perfect square) ---------------------------------------------------------- isSquareWord(\\"dd\\") --> false Explanation: (1^2 + 2^2) = 1 + 4 = 5 (Not a perfect square) Note: The function should be case-sensitive.","solution":"import math def isSquareWord(word): Determine if the sum of the squares of the indices of each letter in the word is a perfect square. index_square_sum = sum((i + 1) ** 2 for i in range(len(word))) square_root = math.isqrt(index_square_sum) return square_root * square_root == index_square_sum"},{"question":"You are given two strings, s and t. You want to transform s into t by performing a sequence of operations. You can only perform the following operations: - Delete a character from s - Add a character to s - Substitute a character in s with another character What is the minimum number of these operations required to transform s into t? -----Input----- The single line of input contains two space-separated strings s and t (1 leq text{length of } s, t leq 1000). You want to transform s into t using only the operations given above. -----Output----- Output a single integer, which is the minimum number of the given operations needed to transform s into t. -----Examples----- Sample Input: kitten sitting Sample Output: 3","solution":"def min_operations_to_transform(s, t): Returns the minimum number of operations required to transform string s into string t. m, n = len(s), len(t) # Create a (m+1)x(n+1) DP table dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize base cases for transformation for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1] # Replace ) return dp[m][n]"},{"question":"Aakash loves playing around with strings. He designed a fun activity to transform a string based on a specific set of rules. Given a string, reverse each word in the string. A word is defined as a sequence of non-space characters. Input Format: First line of the input consists of a single integer T, number of test cases. Each test case consists of a single line which is the string to be transformed. Output Format: Print the transformed string for each test case. Constraints: 1 ≤ T ≤ 10 1 ≤ Length of the string ≤ 1000 The string consists of printable ASCII characters and spaces. Problem Setter: Aakash Gupta SAMPLE INPUT 2 Hello World Python is fun SAMPLE OUTPUT olleH dlroW nohtyP si nuf","solution":"def reverse_each_word(sentence): Given a string, reverse each word in the string. return \' \'.join(word[::-1] for word in sentence.split()) def process_test_cases(test_cases): Given multiple test cases, process each sentence and reverse each word. return [reverse_each_word(test_case) for test_case in test_cases]"},{"question":"The local library has decided to digitize their book catalog. Each book\'s information is stored as a record with the following attributes: a unique book ID, the title of the book, the author\'s name, and the year of publication. The library wants to perform some queries on this catalog to aid in managing their collection. There are two types of queries they want to support: 1. **Add/Update a Book Record** - Add a new book record or update an existing book record with given attributes. 2. **Retrieve Book Information** - Retrieve the information of a book given its unique book ID. Write a program to handle these queries. ------ Input ------ The first line contains an integer Q, the number of queries. Each of the next Q lines contains a query in one of the following formats: - `ADD <book_id> <title> <author> <year>`: Add a book record with the given attributes, or update the record if a book with the same book_id already exists. The title and author are guaranteed to be a single word without spaces, and the year is a four-digit integer. - `GET <book_id>`: Retrieve the information for the book with the given book_id. ------ Output ------ For each `GET` query, print a single line containing the book\'s title, author, and year, separated by spaces. If the book does not exist, print \\"NOT FOUND\\". ------ Constraints ------ 1. 1 ≤ Q ≤ 10,000 2. 1 ≤ text{book_id} ≤ 100,000 3. The title and author\'s name are non-empty strings of at most 100 characters. 4. The year is a four-digit integer between 1000 and 9999 inclusive. ------ Sample Input ------ 6 ADD 1 MobyDick Melville 1851 ADD 2 Hamlet Shakespeare 1603 GET 1 GET 3 ADD 1 MobyDick Melville 1852 GET 1 ------ Sample Output ------ MobyDick Melville 1851 NOT FOUND MobyDick Melville 1852 ------ Explanation ------ In the first query, a new book with ID 1 is added. In the second query, a new book with ID 2 is added. In the third query, information for the book with ID 1 is retrieved. In the fourth query, there is no book with ID 3, so \\"NOT FOUND\\" is returned. In the fifth query, the information for the book with ID 1 is updated to a new year. Finally, the last query retrieves the updated information for the book with ID 1.","solution":"class Library: def __init__(self): self.catalog = {} def add_update_book(self, book_id, title, author, year): self.catalog[book_id] = (title, author, year) def get_book_info(self, book_id): if book_id in self.catalog: return f\\"{self.catalog[book_id][0]} {self.catalog[book_id][1]} {self.catalog[book_id][2]}\\" else: return \\"NOT FOUND\\" def handle_queries(queries): library = Library() results = [] for query in queries: parts = query.split() cmd = parts[0] if cmd == \\"ADD\\": book_id = int(parts[1]) title = parts[2] author = parts[3] year = parts[4] library.add_update_book(book_id, title, author, year) elif cmd == \\"GET\\": book_id = int(parts[1]) results.append(library.get_book_info(book_id)) return results"},{"question":"In a fantasy realm, there exists a unique numbering system where digits are represented by the symbols A, B, C, and D. These symbols correspond to the numbers 2, 3, 5, and 7 respectively. The value of a number is defined simply as the product of all digits in it. For example, the number ABA evaluates to 18 (2*3*2) and the number DBC evaluates to 105 (7*3*5). Note that the ordering of digits does not change the value, thus ABC and CAB are the same number. Your task is to determine the number of distinct integers that can be represented using exactly n symbols among A, B, C, and D. -----Input----- The only line of the input file contains a single integer n (1 le n le 10^9) — the number of symbols to use. -----Output----- Output a single integer — the number of distinct integers which can be represented using n symbols exactly. -----Examples----- Input 1 Output 4 Input 2 Output 10 Input 3 Output 20 -----Note----- In the first sample, 4 integers can be represented: 2 (A), 3 (B), 5 (C), and 7 (D). In the second sample, 10 distinct integers can be represented: 4 (AA), 6 (AB), 10 (AC), 14 (AD), 9 (BB), 15 (BC), 21 (BD), 25 (CC), 35 (CD), 49 (DD). In the third sample, 20 distinct integers can be represented by products of three symbols from {A, B, C, D}.","solution":"from itertools import combinations_with_replacement def num_distinct_integers(n): Returns the number of distinct integers that can be represented using exactly n symbols among A, B, C, and D. # Mapping for symbols to their respective numbers mapper = {\'A\': 2, \'B\': 3, \'C\': 5, \'D\': 7} # Get the list of values values = list(mapper.values()) if n == 1: return len(values) # To store products distinct_products = set() # Generate all possible combinations with replacement for comb in combinations_with_replacement(values, n): product = 1 for num in comb: product *= num distinct_products.add(product) return len(distinct_products)"},{"question":"EdTechCorp is conducting a marketing analysis to understand the viewing patterns on its online learning platform. They have recorded data on several viewers, and their viewing times for different educational sessions during a week. Your task is to analyze this data to find out the viewer who has watched the most unique sessions and also the longest total viewing time. The input consists of multiple datasets. Each dataset describes the viewing records of all viewers during a week and consists of the following format: m n id1 s11 v11 s12 v12 ... s1n v1n id2 s21 v21 s22 v22 ... s2n v2n ... idm sm1 vm1 sm2 vm2 ... smn vn Where: - The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of viewers and the number of sessions respectively. - Each of the next m lines contains a viewer id followed by n pairs of integers. -- Each id is a unique identifier for a viewer. -- Each pair sij, vij (1 ≤ sij ≤ 100, 0 ≤ vij ≤ 86400) indicates the session ID and viewing time in seconds for session j of viewer i. Your program should output two lines: 1. The ID of the viewer who watched the highest number of unique sessions. 2. The ID of the viewer with the longest total viewing time. If there is a tie for either metric, return the ID which appears first in the input. Input Input contains multiple datasets separated by a blank line, followed by a line containing \\"0 0\\". Example Input 3 4 1 101 1000 102 1500 103 2000 104 2500 2 102 2000 103 1500 101 2500 104 3000 3 101 3000 102 4000 103 5000 104 6000 2 3 4 201 5000 202 6000 203 7000 5 202 7000 203 6000 201 5000 0 0 Output 1 3 4 4 Explanation In the first dataset: - Viewer 1 watched 4 unique sessions with a total viewing time of 7000 seconds. - Viewer 2 watched 4 unique sessions with a total viewing time of 9000 seconds. - Viewer 3 watched 4 unique sessions with a total viewing time of 18000 seconds. Viewer 1 watched the most unique sessions (4 session IDs) tied with others but appears first in the input. Viewer 3 has the longest total viewing time. In the second dataset: - Viewer 4 and 5 each watched 3 unique sessions but viewer 4 comes first. - Viewer 4 and 5 also have the same longest viewing time tied, but viewer 4 appears first.","solution":"def analyze_viewing_patterns(data): result = [] datasets = data.strip().split(\\"nn\\") for dataset in datasets: lines = dataset.strip().split(\\"n\\") m, n = map(int, lines[0].split()) if m == 0 and n == 0: continue viewers = {} for i in range(1, m + 1): parts = lines[i].split() viewer_id = parts[0] sessions = parts[1:] unique_sessions = set() total_time = 0 for j in range(0, len(sessions), 2): session_id = sessions[j] view_time = int(sessions[j + 1]) unique_sessions.add(session_id) total_time += view_time viewers[viewer_id] = (len(unique_sessions), total_time) max_unique_sessions = -1 max_unique_id = None max_view_time = -1 max_view_time_id = None for viewer_id, (num_unique_sessions, total_time) in viewers.items(): if num_unique_sessions > max_unique_sessions: max_unique_sessions = num_unique_sessions max_unique_id = viewer_id elif num_unique_sessions == max_unique_sessions and max_unique_id == None: max_unique_id = viewer_id if total_time > max_view_time: max_view_time = total_time max_view_time_id = viewer_id elif total_time == max_view_time and max_view_time_id == None: max_view_time_id = viewer_id result.append(max_unique_id) result.append(max_view_time_id) return result def process_input(input_data): input_data = input_data.strip() if input_data == \\"\\": return [] datasets = input_data.split(\\"nn\\") result = [] for dataset in datasets: if \'0 0\' in dataset: break res = analyze_viewing_patterns(dataset) result.extend(res) return result"},{"question":"A digital marketing company wants to analyze their email campaign performance. Each campaign maintains a list of email interactions in sequential order in which they occurred. Each interaction consists of the email address and the type of interaction which can be either \'click\', \'open\', or \'unsubscribe\'. Write a program to process these interactions and output the summary of each interaction type for each email address in the same order as they first appeared. # Input Format - The first line contains an integer T, the number of interactions. - The following T lines contain two space-separated values: the email address and the interaction type. # Constraints - 1 leq T leq 10^5 - Email addresses are valid and contain up to 100 characters. - Interaction types are either \'click\', \'open\', or \'unsubscribe\'. - An email address can appear multiple times with different interaction types. # Output Format For each unique email address that appeared in the input (in the order they first appeared), output the email address followed by the count of each interaction type in the format: `email: open_count click_count unsubscribe_count`. # Sample Input ``` 7 user1@example.com click user2@example.com open user1@example.com open user2@example.com unsubscribe user3@example.com open user3@example.com click user1@example.com unsubscribe ``` # Sample Output ``` user1@example.com: 1 1 1 user2@example.com: 1 0 1 user3@example.com: 1 1 0 ```","solution":"def summarize_campaign(T, interactions): summary = {} order = [] for email, interaction in interactions: if email not in summary: summary[email] = {\'open\': 0, \'click\': 0, \'unsubscribe\': 0} order.append(email) summary[email][interaction] += 1 result = [] for email in order: result.append(f\\"{email}: {summary[email][\'open\']} {summary[email][\'click\']} {summary[email][\'unsubscribe\']}\\") return result"},{"question":"Write a function that takes an array of integers and an integer target as inputs, and determines if there are two distinct indices i and j in the array such that the absolute difference between the integers at these indices is equal to the target. # Input: * An array of integers `(1 <= arr.length <= 100)` * An integer target `(0 <= target <= 100)` # Output: * Return `True` if there are two such indices, and `False` otherwise. # Examples: ``` find_pair([1, 5, 3, 4, 2], 2) -> True # The pair (5, 3) has an absolute difference of 2. ``` ``` find_pair([1, 2, 3, 4, 5], 6) -> False # No two integers in the array have an absolute difference of 6. ``` ``` find_pair([8, 12, 16, 4, 0, 20], 8) -> True # The pair (16, 8) has an absolute difference of 8. ``` ``` find_pair([10, 15, 3, 7], 5) -> True # The pair (10, 15) has an absolute difference of 5. ```","solution":"def find_pair(arr, target): Determines if there are two distinct indices i and j in the array such that the absolute difference between the integers at these indices is equal to the target. :param arr: List of integers :param target: Integer target :return: True if such a pair exist, otherwise False num_set = set(arr) for num in arr: if (num + target in num_set) or (num - target in num_set): return True return False"},{"question":"You are given an array of integers where some elements appear twice and others appear once. Your task is to write a function that returns all the elements that appear twice in the array. You should optimize for time and space complexity. For example, given the array `[4,3,2,7,8,2,3,1]`, the function should return `[2, 3]`. ```Disclaimer: The elements in the output array do not need to follow any specific order.``` ```python find_duplicates([4,3,2,7,8,2,3,1]) # => [2, 3] find_duplicates([1,1,2]) # => [1] find_duplicates([1]) # => [] ```","solution":"def find_duplicates(nums): Returns a list of elements that appear twice in the array nums. # Use a set to track the elements we have seen and a list to collect duplicates seen = set() duplicates = [] for num in nums: if num in seen: # If the num is already in seen, it\'s a duplicate if num not in duplicates: # To ensure we do not add it more than once duplicates.append(num) else: # Otherwise, add it to the seen set seen.add(num) return duplicates"},{"question":"D: SUBSEQUENCECHECKER Problem Statement You are given two strings, `S` and `T`. Your task is to determine if `S` is a subsequence of `T`. A subsequence of a string is a sequence that can be derived from the original string by deleting some (or none) of the characters without changing the order of the remaining characters. Input The input consists of two strings, `S` and `T`. Constraints * 1 leq |S| leq 100 * 1 leq |T| leq 1000 * Both `S` and `T` consist of lowercase English letters. Output If `S` is a subsequence of `T`, output `Yes`, otherwise output `No`. Sample Input 1 abc ahbgdc Output for Sample Input 1 Yes Sample Input 2 axc ahbgdc Output for Sample Input 2 No Example Input abc ahbgdc Output Yes","solution":"def is_subsequence(S, T): This function checks if string S is a subsequence of string T. :param S: The string to be checked as subsequence :param T: The string in which to check for subsequence :return: \'Yes\' if S is a subsequence of T, otherwise \'No\' s_index, t_index = 0, 0 while s_index < len(S) and t_index < len(T): if S[s_index] == T[t_index]: s_index += 1 t_index += 1 return \'Yes\' if s_index == len(S) else \'No\'"},{"question":"A popular online store is looking to analyze their product reviews to improve their services. They want to identify the frequency of specific words used across all reviews for each product. Input The input to the function will be a dictionary where keys are product IDs and values are lists of strings, each string being a review for that product. Additionally, the function will accept a list of words to track. The words to track will be provided as a list of string elements. An example input would be: ``` { \\"P123\\": [\\"Excellent quality, will buy again\\", \\"Not worth the price\\", \\"Quality is great but expensive\\"], \\"P456\\": [\\"Very comfortable\\", \\"Comfortable and affordable\\", \\"Not comfortable at all\\", \\"Highly recommend for comfort\\"], \\"P789\\": [\\"Poor quality\\", \\"Quality is a big issue\\", \\"Will not recommend\\"] } ``` And the list of words to track: ``` [\\"quality\\", \\"comfortable\\", \\"expensive\\", \\"recommend\\"] ``` Processing The function should calculate the total frequency of each word across all reviews for each product. The words should be matched case-insensitively. Output The output should be a dictionary where keys are product IDs and values are dictionaries. The inner dictionaries should consist of the words being tracked as keys and their corresponding frequencies as values. For example, based on the example input above, the output would be: ``` { \\"P123\\": {\\"quality\\": 2, \\"comfortable\\": 0, \\"expensive\\": 1, \\"recommend\\": 0}, \\"P456\\": {\\"quality\\": 0, \\"comfortable\\": 3, \\"expensive\\": 0, \\"recommend\\": 1}, \\"P789\\": {\\"quality\\": 2, \\"comfortable\\": 0, \\"expensive\\": 0, \\"recommend\\": 1} } ``` # Special Note If any review contains the word \\"fraud\\" (case-insensitive), disregard all reviews for that particular product. In such a case, the product ID should not appear in the final output.","solution":"def track_word_frequencies(reviews, words_to_track): Returns the frequency of specific words in product reviews. Parameters: reviews (dict): Dictionary where keys are product IDs and values are lists of review strings. words_to_track (list): List of words to track frequencies for. Returns: dict: Dictionary with product IDs as keys and dictionaries of word frequencies as values. def count_words(review_list, words_set): word_count = {word: 0 for word in words_set} for review in review_list: review_lower = review.lower() for word in words_set: word_count[word] += review_lower.count(word) return word_count words_set = set([word.lower() for word in words_to_track]) result = {} for product_id, review_list in reviews.items(): if any(\\"fraud\\" in review.lower() for review in review_list): continue result[product_id] = count_words(review_list, words_set) return result"},{"question":"In an ancient kingdom, a wizard decided to transform a series of spells into numerical sequences with special properties. Each sequence is composed of integers. A sequence of integers is considered \\"magical\\" if the sum of its elements is greater than zero and each of its elements is distinct. The wizard wants to find the longest magical subsequence from a given sequence of integers. A subsequence does not need to be contiguous but must preserve the relative order of elements from the original sequence. For example, given the sequence [4, -1, 2, -3, 5], a magical subsequence could be [4, 2, 5] with a sum of 11 and distinct elements. Another shorter magical subsequence could be [4, 5] with a sum of 9. To make the wizard\'s task easier, write a program that calculates the length of the longest magical subsequence from the original sequence. # Input - The first line of input contains an integer n (1 ≤ n ≤ 2·10^5), the length of the sequence. - The second line contains n integers separated by spaces which represent the sequence of integers. Each integer x (−10^9 ≤ x ≤ 10^9) in the sequence is provided as a signed integer. # Output - Output a single integer which is the length of the longest magical subsequence. # Examples Example 1 **Input:** ``` 5 4 -1 2 -3 5 ``` **Output:** ``` 3 ``` Example 2 **Input:** ``` 4 -1 -2 -3 -4 ``` **Output:** ``` 0 ``` Example 3 **Input:** ``` 7 1 2 3 -1 -2 4 5 ``` **Output:** ``` 5 ```","solution":"def longest_magical_subsequence(n, sequence): Calculates the length of the longest magical subsequence from the original sequence. A subsequence is magical if the sum of its elements is positive and all elements are distinct. if n == 0: return 0 # Filter positive unique elements unique_positive_elements = [x for x in set(sequence) if x > 0] # Check if there are no positive distinct elements if not unique_positive_elements: return 0 return len(unique_positive_elements)"},{"question":"Given a string str of length n. Find all possible unique combinations of the characters in the string. The combinations may vary in length from 1 to the length of the string itself. Example 1: Input: n = 3 str = \\"aab\\" Output: a aa aab ab b Explanation: These are the only possible unique combinations of the given string. Example 2: Input: n = 4 str = \\"abcd\\" Output: a ab abc abcd abd ac acd ad b bc bcd bd c cd d Your Task: You don\'t need to read input or print anything. You only need to complete the function uniqueCombinations() that takes an integer n, and a string str of size n as input and returns a sorted list of strings containing all unique combinations of the characters in the string. Expected Time Complexity: O(2^n) Expected Auxiliary Space: O(2^n) Constraints: 1 ≤ n ≤ 16 str contains only lowercase English letters.","solution":"from itertools import combinations def uniqueCombinations(n, s): Returns all possible unique combinations of the characters in the given string. Parameters: n (int): The length of the input string. s (str): The input string. Returns: list: A sorted list of unique combinations. # Generate all combinations unique_combos = set() for i in range(1, n + 1): for combo in combinations(s, i): unique_combos.add(\'\'.join(combo)) # Sort and return the list of unique combinations return sorted(unique_combos)"},{"question":"You have been assigned the task of developing a new software system for managing orders in a restaurant. One of the functionalities is to compute the total cost of orders placed by customers. Each customer can place multiple orders, and each order consists of multiple items. Each item has a name, quantity, and price per unit. You need to compute the total cost of all orders placed by a customer. An order is represented as a list of items, where each item is represented as a tuple containing the item name, quantity, and price per unit. The total cost of the order is the sum of the cost of each item, where the cost of an item is the quantity of the item multiplied by its price per unit. The following functions should be implemented: - `parse_orders(input_data: str) -> List[List[Tuple[str, int, float]]]`: This function parses the input data and returns a list where each element is a list of tuples representing an order. - `compute_order_cost(order: List[Tuple[str, int, float]]) -> float`: This function takes an order and returns the total cost of the order. - `compute_total_cost(orders: List[List[Tuple[str, int, float]]]) -> float`: This function takes a list of orders and returns the total cost of all orders. Input The first line of input contains the number of orders n (1 ≤ n ≤ 1000). The next n blocks contain the orders, with each order described as follows: - The first line of each order block contains the integer m (1 ≤ m ≤ 100) — the number of items in the order. - The next m lines contain the item name (a string without spaces), quantity (an integer), and price per unit (a floating-point number with 2 decimal places). Output Print the total cost of all orders rounded to 2 decimal places. Examples Input 2 3 burger 2 5.00 fries 1 2.50 cola 1 1.25 2 pizza 1 10.00 water 2 1.00 Output 25.75 Input 1 2 pasta 3 7.50 salad 1 5.00 Output 27.50 Note The input data should be parsed correctly to extract the orders and their items. The total cost of each order should be computed by summing the cost of each item. The final result is the total cost of all orders placed by the customer.","solution":"from typing import List, Tuple def parse_orders(input_data: str) -> List[List[Tuple[str, int, float]]]: Parses the input data and returns a list where each element is a list of tuples representing an order. lines = input_data.strip().split(\'n\') n = int(lines[0]) index = 1 orders = [] for _ in range(n): m = int(lines[index]) index += 1 order = [] for _ in range(m): item_data = lines[index].split() item_name = item_data[0] item_quantity = int(item_data[1]) item_price = float(item_data[2]) order.append((item_name, item_quantity, item_price)) index += 1 orders.append(order) return orders def compute_order_cost(order: List[Tuple[str, int, float]]) -> float: Takes an order and returns the total cost of the order. total_cost = sum(quantity * price_per_unit for _, quantity, price_per_unit in order) return total_cost def compute_total_cost(orders: List[List[Tuple[str, int, float]]]) -> float: Takes a list of orders and returns the total cost of all orders. total_cost = sum(compute_order_cost(order) for order in orders) return round(total_cost, 2) # Example usage: # input_data = \\"2n3nburger 2 5.00nfries 1 2.50ncola 1 1.25n2npizza 1 10.00nwater 2 1.00\\" # orders = parse_orders(input_data) # total_cost = compute_total_cost(orders) # print(total_cost)"},{"question":"Alex is playing a number game with his friend Jordan. In the game, they need to determine whether a given number y is a \\"special number\\" based on certain rules. A number y is considered to be a special number if it is divisible by at least one number in a list of m numbers provided by Jordan. Help Alex determine whether the number y is special. Input: The first line of input contains two integers, m and y, where m is the count of numbers in the list and y is the number to check. The second line contains m integers which are the numbers in the list provided by Jordan. Output: The output will be 1 if the number y is a special number, and 0 otherwise. Assumptions: ‘1’ will indicate that y is a special number (i.e., y is divisible by at least one number in the list). ‘0’ will indicate that y is not a special number (i.e., y is not divisible by any number in the list). Constraints: 1 ≤ m, y ≤ 1000 Example: Input: 3 15 3 5 7 Output: 1 SAMPLE INPUT 4 14 2 3 6 9 SAMPLE OUTPUT 1","solution":"def is_special_number(m, y, numbers): Determines if y is a special number (divisible by at least one of the numbers in the list). :param m: Number of elements in the list :param y: The number to check :param numbers: List of integers :return: 1 if y is a special number, otherwise 0 for num in numbers: if y % num == 0: return 1 return 0 # Example usage: # m = 4 # y = 14 # numbers = [2, 3, 6, 9] # Output: 1 (because 14 is divisible by 2)"},{"question":"You are given a tree with n nodes. Each node i has an integer value a[i] associated with it. Your task is to perform q queries on this tree. Each query can be one of the following: * query 1: \\"1 x\\" - print the sum of the values of the nodes in the subtree rooted at node x. * query 2: \\"2 x y\\" - change the value of the node x to y. The first line of input consists of two integers n and q (1 ≤ n, q ≤ 100000) - the number of nodes and the number of queries, respectively. The second line consists of n integers a[1], a[2], ..., a[n], where a[i] is the value of the node i (1 ≤ a[i] ≤ 100000). The next n - 1 lines represent the edges of the tree, each described by two integers u and v (1 ≤ u, v ≤ n) indicating there is an edge between nodes u and v. The next q lines describe the queries, one query per line. Output For each query of type 1, output the sum of the values of the nodes in the subtree rooted at node x. Example Input: 5 3 1 2 3 4 5 1 2 1 3 2 4 2 5 1 3 2 2 10 1 2 Output: 3 28 Explanation: In the first query \\"1 3\\", we sum the values in the subtree rooted at node 3. The subtree consists of node 3 only, hence the answer is 3. In the second query \\"2 2 10\\", we change the value of node 2 to 10. Now the list a is [1, 10, 3, 4, 5]. In the third query \\"1 2\\", we sum the values in the subtree rooted at node 2. The subtree consists of nodes 2, 4 and 5. Therefore, the answer is 10 + 4 + 5 = 19.","solution":"from collections import defaultdict class Tree: def __init__(self, n, values): self.n = n self.values = values self.adj_list = defaultdict(list) self.subtree_sum = [0] * (n + 1) self.visited = [False] * (n + 1) def add_edge(self, u, v): self.adj_list[u].append(v) self.adj_list[v].append(u) def dfs(self, node): self.visited[node] = True subtree_total = self.values[node - 1] for neighbor in self.adj_list[node]: if not self.visited[neighbor]: subtree_total += self.dfs(neighbor) self.subtree_sum[node] = subtree_total return subtree_total def update_value(self, node, value): self.values[node - 1] = value self.visited = [False] * (self.n + 1) self.dfs(1) def sum_subtree(self, node): return self.subtree_sum[node] def process_queries(n, q, values, edges, queries): tree = Tree(n, values) for u, v in edges: tree.add_edge(u, v) # Precompute the subtree sums with dfs from root node, assuming node 1 as root tree.dfs(1) result = [] for query in queries: parts = query.split() if parts[0] == \'1\': _, x = parts x = int(x) result.append(tree.sum_subtree(x)) elif parts[0] == \'2\': _, x, y = parts x, y = int(x), int(y) tree.update_value(x, y) return result"},{"question":"You are the manager of a warehouse that stores various types of products. Each product can have different sizes and weights, and you need to manage the space in your warehouse efficiently. To help you with this task, you\'ve decided to automate the process of determining how much weight is supported on each level of a stack of products. Products are stacked directly on top of each other in columns. Each column may be 1 to 50 products high, and the warehouse can have 1 to 50 such columns. The weight supported by each product is the sum of the weights of all products stacked above it plus its own weight. For example, if you have a column of 3 products with weights 10, 20, and 30 (from bottom to top), the weights supported by each product are: - Bottom product supports 60 (10 + 20 + 30) - Middle product supports 50 (20 + 30) - Top product supports 30 Your task is to implement a program that calculates the weight supported by each product. -----Input----- The first line of input contains an integer, c (1 leq c leq 50), the number of columns in the warehouse. The next c lines specify the columns. Each line starts with an integer h (1 leq h leq 50), the height of the column, followed by h integers which are the weights of the products in that column from bottom to top. Each weight is an integer between 1 and 100 inclusive. -----Output----- For each column, print the weights supported by each product starting from the bottom to the top. Each column\'s output should be on a new line with the weights separated by spaces. -----Examples----- Sample Input: 2 3 10 20 30 2 15 25 Sample Output: 60 50 30 40 25 -----Note----- In the first column, the bottom product supports the total weight of 60 (10 + 20 + 30), the middle product supports the weight of 50 (20 + 30), and the top product supports its own weight, 30. In the second column, the bottom product supports the total weight of 40 (15 + 25), and the top product supports its own weight, 25.","solution":"def compute_supported_weights(columns): Computes the weights supported by each product in each column. :param columns: List of columns, where each column is a list of weights from bottom to top. :return: A list of lists, where each inner list represents the supported weights from bottom to top in each column. result = [] for column in columns: column_result = [] total_weight = sum(column) for weight in column: column_result.append(total_weight) total_weight -= weight result.append(column_result) return result def process_input(c, column_data): Processes the input data and computes the supported weights. :param c: Number of columns. :param column_data: List of strings representing the columns. :return: List of lists of supported weights. columns = [] for data in column_data: data_list = list(map(int, data.split())) h = data_list[0] column = data_list[1:h+1] columns.append(column) return compute_supported_weights(columns)"},{"question":"Write a function `find_unique_elements` that takes two lists of integers, `list1` and `list2`, and returns a list of integers that are present in `list1` but not in `list2`. The resulting list should be sorted in ascending order. # Example Input: ```python list1 = [1, 2, 3, 4, 5] list2 = [2, 4, 6] ``` Output: ```python [1, 3, 5] ``` # Constraints - The lengths of the lists `list1` and `list2` will be between 0 and 100. - Each element in the lists will be between -100 and 100. - Your solution should have a time complexity better than O(n*m), where n and m are the lengths of `list1` and `list2`. # Implementation ```python def find_unique_elements(list1, list2): # Write your code here ```","solution":"def find_unique_elements(list1, list2): Returns the elements that are present in list1 but not in list2, sorted in ascending order. set2 = set(list2) # Convert list2 to a set for faster look-up unique_elements = [elem for elem in list1 if elem not in set2] return sorted(unique_elements)"},{"question":"Alice is organizing technical workshops and wants to ensure the hall is available for the proposed schedule. The hall can accommodate multiple workshops, but they can\'t overlap. Alice has a list of workshops with their start and end times and needs to decide if it is possible to schedule all workshops in the hall. -----Input----- - The first line contains a single positive integer, n (1 leq n leq 5000), the number of workshops. - Each of the next n lines contains two integers s_i and e_i (0 leq s_i < e_i leq 10^9) representing the starting and ending times of the i-th workshop. -----Output----- - If it is possible to schedule all workshops without any overlap, print \\"YES\\". Otherwise, print \\"NO\\". -----Examples----- Sample Input 1: 3 1 3 2 4 3 5 Sample Output 1: NO Sample Input 2: 2 5 10 1 5 Sample Output 2: YES Sample Input 3: 4 1 2 3 4 5 6 7 8 Sample Output 3: YES","solution":"def can_schedule_all_workshops(n, workshops): Determines if it is possible to schedule all workshops without any overlap. Parameters: n (int): The number of workshops. workshops (list of tuples): A list of tuples where each tuple contains two integers representing the start and end times of a workshop. Returns: str: \\"YES\\" if it is possible to schedule all workshops without any overlap, otherwise \\"NO\\". # Sort workshops by their start times (and by end times if start times are equal) workshops.sort() # Compare the end time of the previous workshop with the start time of the current for i in range(1, n): if workshops[i-1][1] > workshops[i][0]: return \\"NO\\" return \\"YES\\""},{"question":"Given an array A of size N, you want to perform Q queries on this array. Each query is defined by two integers L and R, and you need to find the maximum element in the subarray A[L...R] (inclusive). To make it more interesting, the array can sometimes contain negative numbers. To answer these queries efficiently, design the appropriate data structures and algorithms. Input: - The first line contains an integer N, the size of the array. - The second line contains N space-separated integers representing the elements of array A. - The third line contains an integer Q, the number of queries. - The next Q lines each contain two integers L and R, defining the bounds of a query (0-indexed). Output: - For each query, output the maximum element in the subarray A[L...R]. Constraints: - 1 ≤ N ≤ 100,000 - -1,000,000 ≤ A[i] ≤ 1,000,000 (for all valid i) - 1 ≤ Q ≤ 100,000 - 0 ≤ L ≤ R < N Example: Input: 5 1 3 -2 8 5 3 0 2 1 3 2 4 Output: 3 8 8 Explanation: - For query (0, 2), the subarray is [1, 3, -2], and the maximum is 3. - For query (1, 3), the subarray is [3, -2, 8], and the maximum is 8. - For query (2, 4), the subarray is [-2, 8, 5], and the maximum is 8.","solution":"import sys import math class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def query(self, left, right): left += self.n right += self.n + 1 maximum = -sys.maxsize while left < right: if left % 2 == 1: maximum = max(maximum, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 maximum = max(maximum, self.tree[right]) left //= 2 right //= 2 return maximum def process_queries(A, queries): seg_tree = SegmentTree(A) results = [] for L, R in queries: results.append(seg_tree.query(L, R)) return results # Example usage: N = 5 A = [1, 3, -2, 8, 5] Q = 3 queries = [(0, 2), (1, 3), (2, 4)] results = process_queries(A, queries) for result in results: print(result)"},{"question":"Write a function that takes a list of integers and returns a new list containing the elements that are larger than the arithmetic mean of the original list. For example: ```python larger_than_mean([1, 2, 3, 4, 5]) # returns [4, 5] larger_than_mean([10, 20, 30, 40, 50]) # returns [40, 50] ``` If the list is empty, the function should return an empty list.","solution":"def larger_than_mean(lst): Returns a list of elements from the original list that are larger than the arithmetic mean of the original list. if not lst: return [] mean_value = sum(lst) / len(lst) return [x for x in lst if x > mean_value]"},{"question":"Given an undirected graph represented as an adjacency list, write a function to determine if the graph contains a cycle. If the graph has a cycle, return true, otherwise return false. Your function should take in the number of vertices and the adjacency list as inputs. The adjacency list is a list of lists where the index represents the vertex and the inner list contains the vertices it is connected to. Example 1: Input: n = 4 adjacencyList = [ [1, 2], [0, 2], [0, 1, 3], [2] ] Output: true Explanation: The graph has a cycle involving vertices 0, 1, and 2. Example 2: Input: n = 3 adjacencyList = [ [1], [0, 2], [1] ] Output: false Explanation: The graph does not contain any cycle. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `hasCycle()` which takes in the number of vertices (n) and the adjacency list (adjacencyList) as parameters and returns a boolean value indicating whether the graph contains a cycle. Expected Time Complexity: O(V + E) where V is the number of vertices and E is the number of edges. Expected Auxiliary Space: O(V) where V is the number of vertices. Constraints: 1 ≤ n ≤ 10^3","solution":"def hasCycle(n, adjacencyList): def dfs(node, parent, visited): visited[node] = True for neighbor in adjacencyList[node]: if not visited[neighbor]: if dfs(neighbor, node, visited): return True elif neighbor != parent: return True return False visited = [False] * n for i in range(n): if not visited[i]: if dfs(i, -1, visited): return True return False"},{"question":"Julia loves solving word puzzles. One day, she decided to create a new challenge for herself. She writes down a string consisting of lowercase English alphabet letters, and then she wants to determine if the string can be rearranged to form a palindrome. A string is called a palindrome if it reads the same backward as forward. To make things interesting, Julia wants to know if the input string can be rearranged to form **exactly one unique palindrome**. If multiple unique palindromes can be formed from the same characters, she is not interested. Given a string, determine if it can be rearranged to form exactly one unique palindrome. If so, she wants to know what that palindrome is. Otherwise, inform her that it\'s impossible. ---Input--- The input consists of multiple test cases. The first line contains an integer t — the number of test cases (1 ≤ t ≤ 100). Each of the next t lines contains a string s where each string has a length between 1 and 1000. ---Output--- For each test case, output \\"NO\\" if it\'s impossible to rearrange the string to form exactly one unique palindrome. If it is possible, output \\"YES\\" followed by the palindrome. ----Example---- Input 3 aabb abcba abccba Output YES abba YES abcba YES abccba","solution":"def can_form_unique_palindrome(s): from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" first_half = [] middle = [] for char, count in char_count.items(): if count % 2 == 0: first_half.append(char * (count // 2)) else: first_half.append(char * (count // 2)) middle.append(char) palindrome = \'\'.join(first_half) + \'\'.join(middle) + \'\'.join(first_half[::-1]) return f\\"YESn{palindrome}\\" def process_test_cases(test_cases): results = [] for s in test_cases: results.append(can_form_unique_palindrome(s)) return results"},{"question":"You are given a matrix of size N x M filled with integers. Your task is to find the maximum possible sum of elements from the matrix, starting from the top-left corner (1,1) to the bottom-right corner (N,M). You can move only to the right or downward from a cell. Input: The first line consists of two integers N and M, denoting the number of rows and columns in the matrix respectively. Each of the next N lines contains M space-separated integers, representing the elements of the matrix. Output: Print a single integer which is the maximum possible sum of elements from the top-left corner to the bottom-right corner of the matrix. Constraints: 1 ≤ N, M ≤ 1000 -1000 ≤ matrix elements ≤ 1000 SAMPLE INPUT: 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT: 29 EXPLANATION: The path to get the maximum sum goes as follows: 1 -> 2 -> 3 -> 6 -> 9 Sum = 1 + 2 + 3 + 6 + 9 = 21","solution":"def max_sum_path(matrix): Given a matrix, find the maximum possible sum of elements from the matrix, starting from the top-left corner to the bottom-right corner, moving only to the right or downward. Parameters: matrix (list of list of int): The input matrix Returns: int: The maximum possible sum if not matrix or not matrix[0]: return 0 N = len(matrix) M = len(matrix[0]) # Initialize a DP table with the same dimensions as the matrix dp = [[0] * M for _ in range(N)] # Set the value of the starting point dp[0][0] = matrix[0][0] # Fill in the top row (only moves right) for j in range(1, M): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill in the leftmost column (only moves down) for i in range(1, N): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill in the rest of the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The answer is in the bottom-right corner of the dp table return dp[N-1][M-1] # Example usage if __name__ == \\"__main__\\": matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(max_sum_path(matrix)) # Output: 29"},{"question":"A company wants to optimize the space usage of their warehouse by efficiently stacking various types of goods. Each type of good has a specific height, and they can be stacked on top of each other only if the total height of the stack does not exceed a given maximum height. Your task is to determine the maximum number of different types of goods that can be stacked without exceeding the given height limit. Input The first line of the input consists of two integers n and H (1 ≤ n ≤ 1000, 1 ≤ H ≤ 10^9), where n is the number of different types of goods and H is the maximum height allowed for the stack. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), where hi is the height of the ith type of good. Output Output a single integer representing the maximum number of different types of goods that can be stacked without exceeding the height limit H. Example Input: 5 15 3 7 5 6 9 Output: 3 Explanation: You can stack the goods with heights 3, 5, and 7, resulting in a total height of 15, which exactly matches the height limit. No other combination of goods allows you to stack more than 3 types without exceeding the limit.","solution":"def max_stackable_goods(n, H, heights): Determine the maximum number of different types of goods that can be stacked without exceeding the given height limit. :param n: int, number of different types of goods :param H: int, maximum height allowed for the stack :param heights: list of int, heights of different types of goods :return: int, maximum number of different types of goods that can be stacked heights.sort() current_height = 0 count = 0 for height in heights: if current_height + height <= H: current_height += height count += 1 else: break return count"},{"question":"Kevin loves to play all sorts of games, and one of his favorite types of puzzles is Sudoku. However, he has become bored of the classic 9x9 Sudoku and decided to create his own version called Mini Sudoku. In Mini Sudoku, the grid size is 4x4, and the standard rules of Sudoku apply: each row, each column, and each 2x2 sub-grid must contain the digits 1 through 4 exactly once. Given an incomplete Mini Sudoku grid, Kevin wants to know if there exists a possible solution that satisfies the Sudoku rules. Write a program to determine if the given Mini Sudoku puzzle has at least one valid solution. Input: The input contains a single test case which represents the Mini Sudoku grid. The grid consists of 4 lines, each containing 4 integers separated by spaces. A value of 0 represents an empty cell. Output: Output \\"YES\\" if there is at least one solution to the Mini Sudoku puzzle. Otherwise, output \\"NO\\". Constraints: - The grid always contains exactly 16 integers. - The integers in the grid are between 0 and 4 (inclusive). SAMPLE INPUT 0 0 3 4 3 4 0 0 0 3 4 0 4 0 0 3 SAMPLE OUTPUT YES Explanation In the given sample input, the grid is: 0 0 3 4 3 4 0 0 0 3 4 0 4 0 0 3 A possible solution could be: 2 1 3 4 3 4 1 2 1 3 4 2 4 2 2 3 Since there exists at least one valid solution, the output is \\"YES\\".","solution":"def is_valid(grid, row, col, num): # Check if num is not in the given row if num in grid[row]: return False # Check if num is not in the given column if num in [grid[r][col] for r in range(4)]: return False # Check if num is not in the 2x2 sub-grid start_row, start_col = 2 * (row // 2), 2 * (col // 2) for i in range(start_row, start_row + 2): for j in range(start_col, start_col + 2): if grid[i][j] == num: return False return True def solve(grid): for row in range(4): for col in range(4): if grid[row][col] == 0: for num in range(1, 5): if is_valid(grid, row, col, num): grid[row][col] = num if solve(grid): return True grid[row][col] = 0 return False return True def mini_sudoku_solver(grid): if solve(grid): return \\"YES\\" else: return \\"NO\\""},{"question":"The concept of finding unique paths in a grid can be explored through different constraints and variations. One interesting variant is when there are obstacles in the grid that a path cannot cross. Given a grid, determine the number of unique paths from the top-left corner to the bottom-right corner, considering the obstacles. Each cell in the grid is either empty or an obstacle. The robot can only move either down or right at any point in time. An obstacle and empty space are marked as 1 and 0 respectively in the grid provided. For example, consider the following grid: ``` [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] ``` Here, there are 2 unique paths from the top-left corner to the bottom-right corner. You are required to write a function that finds the number of unique paths considering the given grid with obstacles. -----Input----- - A two-dimensional list of integers representing the grid (grid). Constraints: - The grid will have at least one cell and at most 100x100 cells. - Each cell is either 0 (empty) or 1 (obstacle). -----Output----- - A single integer which is the number of unique paths from the top-left to the bottom-right corner of the grid. -----Examples----- Sample Input: ``` [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] ``` Sample Output: 2 Sample Input: ``` [ [0, 1], [0, 0] ] ``` Sample Output: 1 Note: Assume the robot can only move right or down and the top-left and bottom-right corners of the grid are always guaranteed to be empty (0).","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of the grid considering obstacles. :param grid: List[List[int]] :return: int if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 m, n = len(grid), len(grid[0]) # Create a 2D dp array dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Given an array of integers, you are to determine if the array can be divided into two subarrays such that the sum of the elements in both subarrays is equal. Each element in the array can only belong to one subarray. If the array can be divided into two such subarrays, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 100 000), the number of elements in the array. The second line contains n integers a1, a2, ... , an (1 ≤ ai ≤ 100 000) representing the elements of the array. Output Print \\"YES\\" if the array can be divided into two subarrays with equal sum, otherwise print \\"NO\\". Examples Input 5 1 5 11 5 Output YES Input 4 1 2 3 5 Output NO Note In the first example, the array can be divided into [1, 5, 5] and [11] which both sum to 11. In the second example, there is no way to divide the array into two subarrays with equal sum.","solution":"def can_partition_into_equal_subarrays(nums): Determines if the array can be divided into two subarrays such that the sum of the elements in both subarrays is equal. total_sum = sum(nums) # If the total sum is not even, we cannot partition it into two equal parts if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 n = len(nums) # dp[i] will be True if there is a subsequence with sum i dp = [False] * (target_sum + 1) dp[0] = True for num in nums: for i in range(target_sum, num - 1, -1): if dp[i - num]: dp[i] = True return \\"YES\\" if dp[target_sum] else \\"NO\\""},{"question":"Input The input contains a single integer n (1 ≤ n ≤ 10^5). Output Output a single integer which represents the minimum number of steps required to reduce the number n to 1. In one step, you can either: - Subtract 1 from the number, - If the number is even, divide it by 2, - If the number is divisible by 3, divide it by 3. Examples Input 10 Output 3 Input 15 Output 4 Input 7 Output 3","solution":"def min_steps_to_one(n): Returns the minimum number of steps required to reduce the number n to 1. In one step, you can either: - Subtract 1 from the number, - If the number is even, divide it by 2, - If the number is divisible by 3, divide it by 3. dp = [float(\'inf\')] * (n + 1) dp[1] = 0 for i in range(2, n + 1): dp[i] = dp[i - 1] + 1 if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) return dp[n]"},{"question":"In a small village, there is a tradition of passing down a unique magic square from one generation to the next. The magic square is always of odd size and filled with consecutive numbers starting from 1. The property of a magic square is that the sum of the numbers in each row, each column, and both main diagonals are the same. Your task is to generate a magic square of a given odd size. Input The first line contains a single integer m (1 ≤ m ≤ 9) representing the size of the magic square. Output Print the magic square of size m. Each number should be aligned to the right in a field of width equal to the length of the number of the largest number in the magic square. Examples Input 3 Output 8 1 6 3 5 7 4 9 2 Input 5 Output 17 24 1 8 15 23 5 7 14 16 4 6 13 20 22 10 12 19 21 3 11 18 25 2 9","solution":"def generate_magic_square(n): Generates an n x n magic square. n must be an odd number. if n < 1 or n > 9 or n % 2 == 0: raise ValueError(\\"n must be an odd integer between 1 and 9 inclusive.\\") magic_square = [[0] * n for _ in range(n)] num = 1 i, j = 0, n // 2 while num <= n * n: magic_square[i][j] = num num += 1 newi, newj = (i - 1) % n, (j + 1) % n if magic_square[newi][newj]: i += 1 else: i, j = newi, newj return magic_square def print_magic_square(square): Print the magic square with appropriate spacing. n = len(square) width = len(str(n * n)) for row in square: print(\\" \\".join(f\\"{num:>{width}}\\" for num in row)) def main(): import sys input = sys.stdin.read n = int(input().strip()) square = generate_magic_square(n) print_magic_square(square) if __name__ == \\"__main__\\": main()"},{"question":"A company wants to upload a list of their newly hired employees to their online payroll system. Each employee record includes their name, designation, and monthly salary. The payroll system accepts an input file in JSON format where the key is the name of the employee, and the value is a dictionary containing `designation` and `monthly_salary`. Design and implement a function that reads this JSON input and calculates the total monthly salary expenditure of the company. The function should return the total salary expenditure along with the count of employees. Input format: A JSON string representing employee records. Output format: Print the following: 1. The total monthly salary expenditure. 2. The total number of employees. Constraints: 1 ≤ Number of employees ≤ 100 1 ≤ |Length of each employee name| ≤ 50 1 ≤ monthly_salary ≤ 100000 SAMPLE INPUT { \\"John Doe\\": {\\"designation\\": \\"Software Engineer\\", \\"monthly_salary\\": 5000}, \\"Jane Smith\\": {\\"designation\\": \\"Project Manager\\", \\"monthly_salary\\": 7000}, \\"Emily Johnson\\": {\\"designation\\": \\"Data Scientist\\", \\"monthly_salary\\": 6000} } SAMPLE OUTPUT Total monthly salary expenditure: 18000 Total number of employees: 3","solution":"import json def calculate_total_salary_expenditure(json_string): Calculate the total monthly salary expenditure and the count of employees. Args: json_string (str): A JSON string representing employee records. Returns: (int, int): The total salary expenditure, and the count of employees. employees = json.loads(json_string) total_salary_expenditure = sum(employee[\'monthly_salary\'] for employee in employees.values()) total_employees = len(employees) return total_salary_expenditure, total_employees"},{"question":"Given two sorted linked lists, merge them into one sorted linked list and remove duplicates so that each element appears only once. If a node appears in both lists, it should only appear once in the final merged linked list. Each linked list\'s nodes are defined by the following structure: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` Implement the function `merge_and_remove_duplicates(l1: ListNode, l2: ListNode) -> ListNode` that merges the two linked lists and removes duplicates. **Example:** ```python # Helper function to create linked list from a list of values. def create_linked_list(lst): if not lst: return None head = ListNode(lst[0]) current = head for value in lst[1:]: current.next = ListNode(value) current = current.next return head # Helper function to print linked list. def print_linked_list(head): current = head while current: print(current.val, end=\\" -> \\") current = current.next print(\\"None\\") # Example lists l1 = create_linked_list([1, 2, 4]) l2 = create_linked_list([1, 3, 4, 5]) # Merged and deduplicated list result = merge_and_remove_duplicates(l1, l2) print_linked_list(result) # Output should be 1 -> 2 -> 3 -> 4 -> 5 -> None ``` **Input:** - Two heads of sorted linked lists, l1 and l2. **Output:** - Head of the merged and deduplicated linked list. **Constraints:** - The number of nodes in the linked list is in the range [0, 10^4]. - -10^9 ≤ Node.val ≤ 10^9 - The linked lists are sorted in non-decreasing order. Write your solution in Python.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_and_remove_duplicates(l1: ListNode, l2: ListNode) -> ListNode: dummy = ListNode() current = dummy s = set() # Merge two sorted linked lists along with removing duplicates while l1 and l2: if l1.val == l2.val: if l1.val not in s: current.next = ListNode(l1.val) current = current.next s.add(l1.val) l1 = l1.next l2 = l2.next elif l1.val < l2.val: if l1.val not in s: current.next = ListNode(l1.val) current = current.next s.add(l1.val) l1 = l1.next else: if l2.val not in s: current.next = ListNode(l2.val) current = current.next s.add(l2.val) l2 = l2.next # Process remaining nodes in l1 while l1: if l1.val not in s: current.next = ListNode(l1.val) current = current.next s.add(l1.val) l1 = l1.next # Process remaining nodes in l2 while l2: if l2.val not in s: current.next = ListNode(l2.val) current = current.next s.add(l2.val) l2 = l2.next return dummy.next"},{"question":"A smart AI named Ava is tasked with organizing a new warehouse for a logistics company. The warehouse has a capacity defined by its length and width, forming a grid with distinct rows and columns. Ava needs to place crates in the warehouse in such a way that maximizes the number of crates but ensures that each crate is placed in a way that no two crates are in adjacent rows, columns, or diagonals. For instance, if a crate is placed at position (i, j), no other crate should be placed at position (i ± 1, j), (i, j ± 1), or (i ± 1, j ± 1). Given the dimensions of the warehouse, Ava needs to determine the maximum number of crates that can be placed under these constraints. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains two integers L and W, representing the length and width of the warehouse grid respectively. Output The output should contain T lines, each line containing one integer, representing the maximum number of crates that can be placed in the respective warehouse grid under the given constraints. Constraints 1 ≤ T ≤ 100 1 ≤ L, W ≤ 10^4 Note - The warehouse is represented as a grid of L rows and W columns. - Ava can place a crate at position (i, j) if, for all valid positions, no crate exists at (i ± 1, j), (i, j ± 1), or (i ± 1, j ± 1). SAMPLE INPUT 3 3 3 5 5 6 7 SAMPLE OUTPUT 5 13 18 Explanation In the first test case, Ava can place crates at positions (1,1), (1,3), (3,1), (3,3), and (2,2). In the second test case, Ava can place crates at positions in a pattern that maximizes the spacing while ensuring no two crates are adjacent or diagonal, which yields a maximum of 13 crates.","solution":"def max_crates(L, W): Determines the maximum number of crates that can be placed in a LxW warehouse such that no two crates are adjacent or on the same row, column, or diagonal. This can be achieved by calculating the maximum independent set on a board where each cell alternates like a chessboard. Parameters: L (int): The length of the grid. W (int): The width of the grid. Returns: int: Maximum number of crates that can be placed. return (L * W + 1) // 2 def solve(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) results = [] for i in range(1, T + 1): L, W = map(int, input_lines[i].split()) results.append(max_crates(L, W)) return \'n\'.join(map(str, results))"},{"question":"Given an array of integers, spell out the indices of the elements that sum up to a target value. Given an array `arr` of integers and a target integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Input: - The first line contains an integer `Q`, the number of test cases. - The first line of each test case contains an integer `n`, the number of elements in the array. - The second line of each test case contains the `n` integers of the array. - The third line of each test case contains the integer `target`. Output: - For each test case, print the indices of the two numbers separated by a space. Constraints: 1 ≤ Q ≤ 100 2 ≤ n ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9 Note: There will be exactly one solution for each input. SAMPLE INPUT 2 4 2 7 11 15 9 3 3 2 4 6 SAMPLE OUTPUT 0 1 1 2","solution":"def two_sum_indices(arr, target): Returns indices of the two numbers from the array that add up to the target. num_to_index = {} for i, num in enumerate(arr): complement = target - num if complement in num_to_index: return num_to_index[complement], i num_to_index[num] = i def process_input(Q, test_cases): results = [] for i in range(Q): n, arr, target = test_cases[i] result = two_sum_indices(arr, target) results.append(result) return results"},{"question":"You are given two sorted arrays of integers, nums1 and nums2, of size m and n respectively, and an integer k. Write a function to find the k-th smallest number among the combined sorted arrays. Example 1: Input: nums1 = [1, 3, 5] nums2 = [2, 4, 6] k = 4 Output: 4 Explanation: The combined sorted array is [1, 2, 3, 4, 5, 6], and the 4th smallest number is 4. Example 2: Input: nums1 = [2, 3, 8] nums2 = [1, 7] k = 3 Output: 3 Explanation: The combined sorted array is [1, 2, 3, 7, 8], and the 3rd smallest number is 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findKthSmallest() which takes nums1, nums2, and k as inputs and returns the k-th smallest number in the combined sorted array. Expected Time Complexity: O(log(min(m, n))) Expected Auxiliary Space: O(1) Constraints: 1 ≤ m, n ≤ 1000 1 ≤ nums1[i], nums2[i] ≤ 10^6 1 ≤ k ≤ m + n","solution":"def findKthSmallest(nums1, nums2, k): Find the k-th smallest number in the merged sorted arrays nums1 and nums2. def kth(nums1, nums2, k): if not nums1: return nums2[k-1] if not nums2: return nums1[k-1] index1, index2 = len(nums1) // 2, len(nums2) // 2 median1, median2 = nums1[index1], nums2[index2] if index1 + index2 < k - 1: if median1 > median2: return kth(nums1, nums2[index2 + 1:], k - index2 - 1) else: return kth(nums1[index1 + 1:], nums2, k - index1 - 1) else: if median1 > median2: return kth(nums1[:index1], nums2, k) else: return kth(nums1, nums2[:index2], k) return kth(nums1, nums2, k)"},{"question":"Write a function `find_symmetric_difference` that takes in two lists and returns a list that contains the symmetric difference of the two input lists. The symmetric difference is the set of elements which are in either of the sets, but not in their intersection. The order of the elements in the output list does not matter. Example cases: ``` find_symmetric_difference([1, 2, 3], [3, 4, 5]) -> [1, 2, 4, 5] find_symmetric_difference([10, 20, 30], [20, 40, 50]) -> [10, 30, 40, 50] find_symmetric_difference([10], [10]) -> [] find_symmetric_difference([1, 2, 3, 3], [3, 4, 4, 5]) -> [1, 2, 4, 5] ``` Notes: - Your function should handle lists with repeated elements correctly. - The elements in the input lists can be assumed to be integers.","solution":"def find_symmetric_difference(list1, list2): Returns the symmetric difference between two lists. Args: list1: A list of integers. list2: A list of integers. Returns: A list containing the symmetric difference between list1 and list2. set1 = set(list1) set2 = set(list2) symmetric_diff = set1.symmetric_difference(set2) return list(symmetric_diff)"},{"question":"Given a list of integers, write a function that calculates the sum of all prime numbers in the list. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example: ``` sumOfPrimes([1, 2, 3, 4, 5]) = 10 // 2 + 3 + 5 sumOfPrimes([10, 11, 12, 13, 14]) = 24 // 11 + 13 sumOfPrimes([4, 6, 8, 10]) = 0 // no prime numbers in the list ``` Write a function `sumOfPrimes(numbers: List[int]) -> int` that calculates the sum of all prime numbers in the input list. The input is a list of integers, and the output should be an integer.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sumOfPrimes(numbers): Returns the sum of all prime numbers in the list numbers. return sum(n for n in numbers if is_prime(n))"},{"question":"Botan loves trees, both in nature and in data structures. Particularly, he is fascinated by binary search trees (BSTs). Botan defined a special kind of BST which he calls \\"Nodular\\". A Nodular BST is defined as: 1. A binary search tree. 2. Each node\'s value must be a prime number. Botan is given a list of prime numbers and wants to determine the number of different Nodular BSTs that can be formed using all the primes in the list. Since the number can be very large, the result should be given modulo 10^9+7. Input format: The first line contains a single integer n, the number of prime numbers. The second line contains n distinct prime numbers separated by space. Output format: Print the number of unique Nodular BSTs modulo 10^9+7. Constraints: - 1 ≤ n ≤ 1000 - 2 ≤ Prime number ≤ 10^6 SAMPLE INPUT 3 3 5 7 SAMPLE OUTPUT 5 Explanation The possible BSTs are: 1. 3 as root: ``` 3 5 7 ``` ``` 3 7 / 5 ``` 2. 5 as root: ``` 5 / 3 7 ``` 3. 7 as root: ``` 7 / 3 5 ``` ``` 7 / 5 / 3 ``` Hence, the total number of distinct Nodular BSTs is 5.","solution":"MOD = 10**9 + 7 def num_nodular_bsts(n, primes): # Let\'s use the Catalan Number for counting BSTs # Catalan(n) = (2n)! / ((n+1)! * n!) def catalan_number(n): if n == 0 or n == 1: return 1 catalan = [0] * (n + 1) catalan[0], catalan[1] = 1, 1 for i in range(2, n + 1): catalan[i] = (catalan[i-1] * (4 * i - 2)) // (i + 1) return catalan[n] return catalan_number(n) % MOD # Testing the function with one test case n = 3 primes = [3, 5, 7] print(num_nodular_bsts(n, primes)) # Expected Output: 5"},{"question":"Designing a Robot In a rectangular grid of dimensions (m times n), a robot is located at the top-left corner of the grid. The robot can move either down or right at any point in time but cannot move outside the grid or into restricted cells. There are \'k\' restricted cells in the grid where the robot cannot go. These cells are specified by their coordinates (row, column). Your task is to determine the number of unique paths that the robot can take to reach the bottom-right corner of the grid, starting at the top-left corner (1,1) and ending at the bottom-right corner (m,n), while avoiding the restricted cells. # Input - The first line contains two integers m and n, the dimensions of the grid (1 ≤ m, n ≤ 100). - The second line contains an integer k, the number of restricted cells (0 ≤ k ≤ m*n). - The next k lines each contain two integers, representing the row and column coordinates of a restricted cell. # Output - Output a single integer, the number of unique paths the robot can take to reach the bottom-right corner modulo 10^9 + 7. # Example Input ``` 3 3 1 2 2 ``` Output ``` 2 ``` Explanation The grid is as follows, where \'x\' indicates a restricted cell: ``` 1 2 3 --------- | | | 1 | R | | | --------- 2 | | x | | --------- 3 | | | | --------- ``` The possible paths are: 1. Right, Down, Down, Right 2. Down, Right, Right, Down","solution":"def unique_paths(m, n, k, restricted_cells): MOD = 10**9 + 7 # create a grid to store the number of paths dp = [[0] * n for _ in range(m)] # mark the restricted cells in the grid for cell in restricted_cells: dp[cell[0] - 1][cell[1] - 1] = -1 # initialize the starting point if dp[0][0] != -1: dp[0][0] = 1 # populate the number of paths for each cell in the grid for i in range(m): for j in range(n): if dp[i][j] == -1: continue if i > 0 and dp[i - 1][j] != -1: dp[i][j] = (dp[i][j] + dp[i - 1][j]) % MOD if j > 0 and dp[i][j - 1] != -1: dp[i][j] = (dp[i][j] + dp[i][j - 1]) % MOD return dp[m-1][n-1] if dp[m-1][n-1] != -1 else 0 # Parse input (for testing locally) if __name__ == \\"__main__\\": m, n = map(int, input().split()) k = int(input()) restricted_cells = [tuple(map(int, input().split())) for _ in range(k)] print(unique_paths(m, n, k, restricted_cells))"},{"question":"*** Factorial Tail Zeros *** Given a number `n`, determine how many trailing zeros are present in the factorial of that number (`n!`). A trailing zero is created by 10, and since 10 is the product of 2 and 5, we need to count how many pairs of 2 and 5 are in the factorial result. Because there are always more factors of 2 than 5, the number of zeros is determined by the number of factors of 5. Write a function: ```python def trailing_zeros(n): Calculate the number of trailing zeros in n! Args: n (int): The number for which the factorial is to be computed. Returns: int: The number of trailing zeros in n!. ``` **Examples:** ```python trailing_zeros(0) # Returns 0, because 0! = 1 trailing_zeros(5) # Returns 1, because 5! = 120 trailing_zeros(10) # Returns 2, because 10! = 3628800 trailing_zeros(100) # Returns 24, because 100! ends in 24 zeros ``` **Constraints:** - Input number `n` is in the range 0 ≤ n ≤ 10^6. Note: Think about the pattern and properties of factors of 5 appearing in the sequence to determine the number of trailing zeros efficiently without computing the full factorial value for large `n`.","solution":"def trailing_zeros(n): Calculate the number of trailing zeros in n! Args: n (int): The number for which the factorial is to be computed. Returns: int: The number of trailing zeros in n!. count = 0 while n >= 5: n //= 5 count += n return count"},{"question":"A company wants to monitor the performance of different software teams based on their code commit frequencies. Given a list of integers representing the commit times (in minutes from the start of the monitoring period) for various commits made by a team, determine the maximum number of commits made in any continuous interval of M minutes. Example 1: Input: M = 60, N = 5 commits[] = {10, 20, 30, 100, 110} Output: 3 Explanation: The maximum number of commits in any 60-minute interval is 3 (commits made at 10, 20, and 30 minutes). Example 2: Input: M = 15, N = 7 commits[] = {1, 2, 3, 14, 15, 30, 31} Output: 5 Explanation: The maximum number of commits in any 15-minute interval is 5 (commits made at 1, 2, 3, 14, and 15 minutes). Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxCommitsInInterval() which takes the array of integers commits[], n, and m as parameters and returns an integer denoting the maximum number of commits in any M-minute interval. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10^4 0 ≤ commits[i] ≤ 10^5","solution":"def maxCommitsInInterval(commits, n, m): Function to determine the maximum number of commits made in any continuous interval of M minutes. # Edge case: If there are no commits if n == 0: return 0 # Sort the commits to ensure they are in ascending order commits.sort() max_commits = 0 start = 0 # Start of the sliding window for end in range(n): # Slide the window to include the current end commit # and exclude commits that are out of the interval while commits[end] - commits[start] > m: start += 1 # Update max_commits with the current window size max_commits = max(max_commits, end - start + 1) return max_commits"},{"question":"Aiko is planning a route for a delivery drone in a grid-based city. The city grid can be represented as an N x M matrix, where each cell can be either an empty space (.) or a building (#). The drone can move up, down, left, or right, but it cannot move diagonally or fly over buildings. The drone’s initial position is at cell (S_x, S_y), and it needs to deliver a package to cell (T_x, T_y). Aiko needs to design an optimal route that enables the drone to travel from the starting cell to the target cell while encountering the fewest possible building cells. If multiple routes result in the same number of building cells, the drone should choose the one with the shortest path length. Can you help Aiko determine the minimum number of building cells the drone must encounter to get from the start to the target cell? If it’s not possible for the drone to reach the target cell, output -1. -----Constraints----- - All values in input are integers. - 1 ≤ N, M ≤ 1000 - 0 ≤ S_x, S_y, T_x, T_y < N (grid indices are 0-based) - The start and target cells will always be empty cells (.) -----Input----- Input is given from Standard Input in the following format: N M S_x S_y T_x T_y Grid (N lines with M characters each) -----Output----- Output the minimum number of building cells the drone must encounter, or -1 if the target cell is not reachable. -----Sample Input----- 5 5 0 0 4 4 ..... .#.#. .#.#. .#.#. ..... -----Sample Output----- 0 In the provided grid, the drone can travel from (0, 0) to (4, 4) without encountering any building cells. -----Sample Input----- 5 5 0 0 4 4 ..... # # .#. ..... -----Sample Output----- -1 In this grid, it’s not possible for the drone to reach (4, 4) from (0, 0) due to the wall of buildings blocking the path.","solution":"from collections import deque def min_buildings_encountered(N, M, S_x, S_y, T_x, T_y, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] != \'#\' queue = deque([(S_x, S_y, 0, 0)]) # (x, y, buildings_count, steps) visited = set((S_x, S_y)) while queue: x, y, buildings_count, steps = queue.popleft() if (x, y) == (T_x, T_y): return buildings_count for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, buildings_count, steps + 1)) return -1"},{"question":"John has an array A of size N consisting of integers. He wants to perform a series of operations to maximize the sum of the array\'s elements. In each operation, John can select any two consecutive elements and replace them with their sum. The operation is repeated until there is only one element left in the array. Find the maximum possible value of the remaining element after performing the operations. Example 1: Input: N = 3 A = [1, 2, 3] Output: 6 Explanation: In the first operation, John adds 1 and 2 to form 3, resulting in the array [3, 3]. In the second operation, he adds 3 and 3 to form 6, which is the maximum possible value. Example 2: Input: N = 4 A = [1, 2, 3, 4] Output: 10 Explanation: In the first operation, John adds 1 and 2 to form 3, resulting in the array [3, 3, 4]. In the second operation, he adds 3 and 3 to form 6, resulting in the array [6, 4]. Finally, he adds 6 and 4 to form 10, which is the maximum possible value. Your Task: You don\'t need to read input or print anything. Complete the function maxElement() which takes N and A as input parameters and returns the maximum possible value of the remaining element after performing the operations. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9","solution":"def maxElement(N, A): Returns the maximum possible value of the remaining element after performing specified operations on the array A. # The maximum possible value after the operations would be the sum of all elements. return sum(A)"},{"question":"Given a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center). For example, this binary tree is symmetric: 1 / 2 2 / / 3 4 4 3 But the following is not: 1 / 2 2 3 3 Example 1: Input: root = [1,2,2,3,4,4,3] Output: true Example 2: Input: root = [1,2,2,null,3,null,3] Output: false Constraints: * The number of nodes in the tree is in the range [1, 1000]. * -100 <= Node.val <= 100","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isSymmetric(root: TreeNode) -> bool: def isMirror(t1: TreeNode, t2: TreeNode) -> bool: if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and isMirror(t1.right, t2.left) and isMirror(t1.left, t2.right) return isMirror(root, root)"},{"question":"Develop a **Meeting Room Scheduler**: You are tasked with designing a scheduling system that efficiently allocates a single meeting room to various meetings throughout the day. Each meeting has a specific start time and end time. The goal is to determine the maximum number of meetings that can be held in the room without overlaps. To achieve this, you must schedule the room to accommodate the highest possible number of non-overlapping meetings. Input: - The input consists of a single test case. - The first line contains an integer `n`, the number of meetings requested (`1 <= n <= 100,000`). - The following `n` lines each contain two integers, `start_i` and `end_i`, representing the start and end times of a meeting (`0 <= start_i < end_i <= 1,000,000`). Output: - Output a single integer: the maximum number of non-overlapping meetings that can be scheduled in the room. Example Input 1: ``` 5 1 4 2 5 9 12 5 9 5 5 ``` Example Output 1: ``` 4 ``` Explanation: - In this example, the optimal way to schedule the meetings without overlap is to choose meetings that run from `1 to 4`, `5 to 5`, `5 to 9`, and `9 to 12`. Example Input 2: ``` 3 1 3 3 4 2 6 ``` Example Output 2: ``` 2 ``` Explanation: - In this example, the optimal way to schedule the meetings without overlap is to choose meetings that run from `1 to 3` and `3 to 4`. The meeting from `2 to 6` overlaps with both of the other meetings.","solution":"def max_meetings(n, meetings): Calculate the maximum number of non-overlapping meetings. Args: n (int): The number of meetings. meetings (list of tuples): List of (start, end) times for each meeting. Returns: int: The maximum number of non-overlapping meetings. # Sort meetings based on the end time meetings.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping meetings count = 0 last_end_time = 0 for start, end in meetings: if start >= last_end_time: # If the meeting starts after or exactly when the last meeting finished count += 1 last_end_time = end return count"},{"question":"Given an array and two integers k1 and k2 where k1 < k2, find the sum of all elements between the k1-th and k2-th smallest elements of the array (both inclusive). Assume that the array contains distinct elements. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) - the number of elements in the array and the number of test cases respectively. The second line contains n integers representing the elements of the array. Each of the next m lines contains two integers, k1 and k2 (1 ≤ k1 < k2 ≤ n) - defining the range for which sum needs to be found. Output For each test case, output the sum of elements between the k1-th smallest and k2-th smallest elements of the array (both inclusive, 1-based index). Examples Input 6 2 3 1 5 2 4 6 2 5 1 3 Output 14 6","solution":"def sum_between_kth_elements(arr, test_cases): Returns a list of sums of elements between the k1-th and k2-th smallest elements for each test case. Parameters: arr (list): The list of distinct integers. test_cases (list of tuples): Each tuple contains (k1, k2). Returns: list: List of sums for each test case. # Sort the array to determine k-th smallest elements sorted_arr = sorted(arr) results = [] for k1, k2 in test_cases: # Calculate the sum from the k1-th to the k2-th smallest elements (1-based) sum_between = sum(sorted_arr[k1-1:k2]) results.append(sum_between) return results"},{"question":"Write a function `rotateMatrix` that rotates a given 2D matrix by 90 degrees clockwise. The matrix is represented as a list of lists, where each inner list is a row in the matrix. The rotation should be done in-place, meaning you cannot use extra space for another matrix. For example, given the following matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The result should be: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Constraints: * The dimensions of the matrix are n x n, where 1 <= n <= 100. * The function should handle any valid integers within the matrix.","solution":"def rotateMatrix(matrix): Rotates the given n x n 2D matrix by 90 degrees clockwise in-place. Args: matrix (list of list of int): The matrix to rotate. Returns: None: The matrix is rotated in-place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"A company organizes a yearly programming competition where participants are divided into teams. Each team solves problems and earns points. Each problem has a specific point value and a difficulty level. After the competition, the results are evaluated, and the team with the highest score is determined as the winner. You have been provided with the scores of the top 5 teams in the competition in random order. You need to write a program to sort the teams based on their points and output them in descending order. input Input data is given in the following format: team1 points1 team2 points2 team3 points3 team4 points4 team5 points5 The input consists of 5 lines. Each line contains the name of the team (teami: a string without spaces) and the number of points they have earned (pointsi: an integer, 0 ≤ pointsi ≤ 1000). output Output the team names sorted by their points in descending order. If two teams have the same points, their order in the input should be preserved in the output. Example Input Alpha 370 Bravo 415 Charlie 520 Delta 415 Echo 520 Output Charlie Echo Bravo Delta Alpha","solution":"def sort_teams(input_data): Parses the input data, sorts the teams based on their points in descending order, and returns a list of sorted team names. :param input_data: List of strings in the format \\"teamname points\\" :return: List of sorted team names in descending order of points teams = [] # Parse input data for data in input_data: name, points = data.split() teams.append((name, int(points))) # Sort teams by points in descending order. Stable sort is used to maintain input order in case of ties. sorted_teams = sorted(teams, key=lambda x: x[1], reverse=True) # Extract team names from sorted teams sorted_team_names = [team[0] for team in sorted_teams] return sorted_team_names"},{"question":"Smartphone manufacturing company XYZ wants to improve the battery life of their latest smartphone model. The company conducts various tests under different usage scenarios and records the battery consumption rates for each scenario. The company wants to determine the maximum battery consumption rate difference between any two scenarios to analyze and optimize the battery performance. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows: - The first line of each test case contains a single integer N denoting the number of different scenarios tested. - The second line contains a sequence of N space-separated integers representing the battery consumption rates for each scenario. -----Output----- - For each test case, output a single line containing an integer denoting the maximum battery consumption rate difference between any two scenarios. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 1000 - 1 ≤ Battery consumption rate ≤ 1000 -----Example----- Input: 2 5 20 40 60 80 100 4 10 15 25 35 Output: 80 25","solution":"def max_battery_consumption_diff(T, test_cases): Determine the maximum battery consumption rate difference between any two scenarios. :param T: Number of test cases :param test_cases: List of tuples, each tuple contains: - N (number of scenarios) - List of N battery consumption rates :return: List of integers representing the maximum battery consumption rate difference for each test case result = [] for i in range(T): N, consumption_rates = test_cases[i] max_rate = max(consumption_rates) min_rate = min(consumption_rates) max_diff = max_rate - min_rate result.append(max_diff) return result"},{"question":"Arjun is participating in a marathon training program. He plans to run on various terrains which have different difficulty levels each represented by integers. The terrains are represented by a list of integers. Arjun needs to run a specific number of steps to complete his training for the day. Help Arjun find out the maximum difficulty he can face during exactly K consecutive steps of his run. # Input Format - The first line contains two integers, N and K, where N is the number of terrains and K is the number of consecutive steps Arjun needs to run. - The second line contains N space-separated integers representing the difficulty levels of the terrains. # Output Format Print a single integer representing the maximum difficulty he will face during exactly K consecutive steps. # Constraints 1 leq N leq 10^5 1 leq K leq N 1 leq difficulty levels leq 10^6 # Sample Input 1 ``` 10 3 10 20 30 40 50 60 70 80 90 100 ``` # Sample Output 1 ``` 100 ``` # Explanation 1 From the list of terrains, if Arjun runs on terrain segments [10, 20, 30], [20, 30, 40], [30, 40, 50], ..., [80, 90, 100], the maximum difficulty he faces in any of these segments is 100. # Sample Input 2 ``` 5 2 5 1 2 6 7 ``` # Sample Output 2 ``` 7 ``` # Explanation 2 From the list of terrains, the possible segments Arjun can run are [5, 1], [1, 2], [2, 6], and [6, 7]. The maximum difficulty encountered in these segments is 7.","solution":"def max_difficulty_in_k_steps(N, K, terrains): Returns the maximum difficulty faced during any exactly K consecutive steps. :param N: int: The number of terrains :param K: int: The number of consecutive steps :param terrains: List[int]: The difficulty levels of the terrains :return: int: The maximum difficulty faced during any exactly K consecutive steps max_difficulty = 0 for i in range(N - K + 1): max_difficulty = max(max_difficulty, max(terrains[i:i+K])) return max_difficulty"},{"question":"Given an array of integers, you need to perform a series of operations to maximize the sum of the elements of the array. You can perform the following operation any number of times: 1. Select any subarray and reverse it. You need to determine the maximum sum of the array possible after performing any number of such operations. Input: The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a1, a2, ..., an ( -10^9 ≤ ai ≤ 10^9 ) — the elements of the array. Output: Print a single integer, the maximum possible sum of the array. Example Input: 5 1 -2 3 -4 5 Output: 7 Explanation: By reversing the subarray [3 -4 5], the array becomes [1 -2 5 4 -3], resulting in the maximum sum 1 - 2 + 5 + 4 - 3 = 5.","solution":"def maximize_array_sum(n, arr): Returns the maximum possible sum of the array after performing any number of subarray reversals. # The key observation is that the sum of the array won\'t change by reversing subarrays, # and positive elements contribute to the sum while negative elements subtract from it. # Therefore, the maximum possible sum is achieved by setting all elements to their absolute values. return sum(abs(x) for x in arr)"},{"question":"Given a list of integers, determine the number of unique and non-unique elements in the list. -----Input----- A list of integers, one per line. The list will end with a line containing the value -1 (this value should not be included in your calculations). -----Output----- Two integers: the number of unique elements and the number of non-unique elements in the list. -----Example----- Input: 5 3 5 2 3 -1 Output: 2 3","solution":"def count_unique_and_non_unique_elements(numbers): Count the number of unique and non-unique elements in a list. Args: numbers (list): A list of integers where the end is marked by -1. Returns: tuple: A tuple with the number of unique elements and non-unique elements. num_count = {} for num in numbers: if num == -1: break if num in num_count: num_count[num] += 1 else: num_count[num] = 1 unique_count = sum(1 for count in num_count.values() if count == 1) non_unique_count = sum(1 for count in num_count.values() if count > 1) return unique_count, non_unique_count"},{"question":"A detective is trying to decrypt a message hidden in a series of breakeven data points from a finance report. Each data point is given as an integer and represents the breakeven point for a particular day in terms of stock prices. The detective believes that the decrypted message can be discovered through a particular manipulation of these integers using a specific pattern. Given a list of integers, the detective applies the following pattern to extract the message: - If the total number of integers is odd, consider only the middle integer of the list. - If the total number of integers is even, consider the two middle integers and sum them up. Write a program that helps the detective find the hidden message by performing the specified manipulation. -----Input----- The first line contains an integer t (1 le t le 100) -- the number of test cases. Each of the next t lines contains a sequence of space-separated integers representing the breakeven points for a particular day. Each sequence contains at least one integer and at most 100 integers. -----Output----- For each test case, output the extracted integer based on the specified pattern. -----Example----- Input 3 10 20 30 40 50 5 15 25 35 45 55 71 Output 30 60 71 -----Note----- In the first testcase, there are 5 integers, and the middle integer is 30. In the second testcase, there are 6 integers, and the sum of the two middle integers (25 and 35) is 60. In the third testcase, there is only one integer, which is 71.","solution":"def find_hidden_message(t, test_cases): results = [] for case in test_cases: n = len(case) if n % 2 == 1: # odd number of integers middle_index = n // 2 results.append(case[middle_index]) else: # even number of integers middle_index1 = n // 2 - 1 middle_index2 = n // 2 results.append(case[middle_index1] + case[middle_index2]) return results"},{"question":"Ella has recently taken an interest in distributing candies in a fair manner. Ella has a collection of candies, and each candy has a specific size associated with it. Ella wants to divide the candies into different groups such that each group has some rules: 1. Each group must contain exactly `G` candies. 2. The size difference between the smallest and the largest candy in the same group must not exceed `M`. Help Ella determine the minimum number of groups needed to distribute all candies. -----Input----- The first line contains three integers, `1 <= N, G <= 100000` and `0 <= M <= 10^9`, representing the number of candies, the number of candies each group should have, and the maximum allowed size difference within a group, respectively. The second line contains `N` integers, where each integer represents the size of a candy. -----Output----- Output a single integer representing the minimum number of groups needed to distribute all candies. -----Examples----- Sample Input: 7 3 2 4 1 5 3 2 8 6 Sample Output: 3 Explanation: You can form the following groups: Group 1: candies with sizes [1, 2, 4] Group 2: candies with sizes [3, 5, 6] Group 3: the candy with size [8] (since there are less than 3 candies that can fit with this size difference, it forms a group on its own) Note: When it\'s impossible to distribute candies under the given constraints, output the number of groups considering the leftover candies as separate groups.","solution":"def minimum_groups(N, G, M, sizes): Returns the minimum number of groups needed to distribute all candies according to the given rules. # Sorting the candy sizes to facilitate grouping sizes.sort() groups = 0 i = 0 # Traverse through the list of sorted candy sizes while i < N: j = i # Find the end index for the group starting at index i while j < N and (sizes[j] - sizes[i] <= M) and (j - i < G): j += 1 # Increment the number of groups needed groups += 1 # Move to the next group starting point i = j return groups"},{"question":"Write a function that takes a list of integers and returns a list containing all the unique combinations of numbers from the input list that sum up to a target value. The function should not return any duplicate combinations, and each combination should be in ascending order. The output list should also be in ascending order based on the combination values. Function signature: ```python def combinationSum(nums: List[int], target: int) -> List[List[int]]: ``` Input - `nums`: a list of integers, where 1 leq text{len}(nums) leq 20 and each integer 0 leq text{nums}[i] leq 100 - `target`: an integer where 1 leq text{target} leq 500 Output A list of lists, where each inner list contains a unique combination of numbers from `nums` that sum up to `target`. Constraints - All combinations within the returned list should be sorted in non-decreasing order. - The overall list should be sorted in ascending order based on the elements within each combination. Example Input ```python nums = [10, 1, 2, 7, 6, 1, 5] target = 8 ``` Output ```python [ [1, 1, 6], [1, 2, 5], [1, 7], [2, 6] ] ``` Explanation Given the list `nums` and the `target` value of 8, the function generates all unique combinations of numbers that add up to 8. The unique combinations are sorted and returned. For instance, `[1, 2, 5]` is a valid combination because 1 + 2 + 5 = 8. All the unique combinations are sorted internally, and the outer list is sorted based on these combinations.","solution":"def combinationSum(nums, target): def backtrack(start, path, target): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue backtrack(i + 1, path + [nums[i]], target - nums[i]) nums.sort() result = [] backtrack(0, [], target) return result"},{"question":"You are given a list of strings, where each string represents a student record in the format `Name:Score`. Implement a function that processes the list and returns the name of the student with the highest score. If there is a tie, return all names with the highest score, sorted alphabetically. Note: - The input list will always contain at least one student record. - Each name will be unique. - Scores are integers ranging from 0 to 100. Function Signature: ```python def get_top_scorer(student_records: List[str]) -> List[str]: ``` Example: ```python student_records = [\\"Alice:88\\", \\"Bob:95\\", \\"Charlie:95\\", \\"David:90\\"] Output: [\\"Bob\\", \\"Charlie\\"] student_records = [\\"Alice:88\\", \\"Bob:70\\", \\"Charlie:65\\", \\"David:90\\"] Output: [\\"David\\"] ```","solution":"from typing import List def get_top_scorer(student_records: List[str]) -> List[str]: top_scorers = [] highest_score = -1 for record in student_records: name, score = record.split(\':\') score = int(score) if score > highest_score: top_scorers = [name] highest_score = score elif score == highest_score: top_scorers.append(name) return sorted(top_scorers)"},{"question":"You are given an array of integers representing the heights of buildings along a straight road. Some buildings have antennas on their roofs, and we need to paint the roofs of these buildings. We have one paint bucket, which has unlimited capacity, and we can paint from one building to another as long as they are in line of sight. A building is considered in line of sight if and only if there are no taller buildings in between. Your task is to calculate the minimum capacity of paint the bucket needs to have to paint all the buildings with antennas. The paint required to cover a unit height of a building\'s roof is proportional to the building\'s height. Write a function `min_paint_capacity(n, heights, antennas)` to determine the minimum capacity of paint required. # Input - An integer `n` (1 le n le 10^5) representing the number of buildings. - A list of `n` integers `heights` (1 le heights[i] le 10^5), where `heights[i]` represents the height of the `i`-th building. - A list of integers `antennas`, representing the 1-based indices of buildings with antennas. # Output - Return a single integer representing the minimum paint capacity required to paint all the buildings with antennas. # Example Input: ```python n = 5 heights = [2, 5, 4, 3, 1] antennas = [2, 4] ``` Output: ```python 7 ``` Explanation: - Paint buildings at index 2 and 4. - Building at index 2 has height 5. - Building at index 4 has height 3. - We can directly move from building 2 to building 4 because there is no taller building in between. - Therefore, total paint required is 5 (for building 2) + 3 (for building 4) = 8. # Constraints - Buildings with antennas will always be reachable with the given conditions.","solution":"def can_paint_in_line_of_sight(heights, start, end): Helper function to check if all buildings between `start` and `end` are in line of sight, i.e., no building taller than heights[start] or heights[end] in between. Arguments: heights -- List of building heights start -- Starting building index (0-based) end -- Ending building index (0-based) Returns: True if all the buildings between start and end are in line of sight, False otherwise. max_height = max(heights[start], heights[end]) for i in range(start + 1, end): if heights[i] > max_height: return False return True def min_paint_capacity(n, heights, antennas): Calculate the minimum capacity of paint required to paint all the buildings with antennas. Arguments: n -- Number of buildings heights -- List of building heights antennas -- List of indices (1-based) of buildings with antennas Returns: Minimum capacity of paint required. total_paint = 0 # Convert 1-based indices to 0-based indices antennas = [idx - 1 for idx in antennas] size = len(antennas) for i in range(size): current_building = antennas[i] total_paint += heights[current_building] return total_paint"},{"question":"Given a list of integers, find the longest subsequence such that all elements of the subsequence are perfect squares. A perfect square is an integer that is the square of an integer (e.g., 1, 4, 9, 16, ...). Example 1: Input: arr = [3, 4, 16, 2, 1, 9, 25] Output: [1, 4, 9, 16, 25] Explanation: The longest subsequence of perfect square numbers is [1, 4, 9, 16, 25]. Example 2: Input: arr = [7, 11, 13, 17] Output: [] Explanation: There are no perfect square numbers in the given list. Write a function longestPerfectSquareSubsequence(arr) that takes a list of integers as input and returns the longest subsequence of perfect square numbers in non-decreasing order. Constraints: * The length of the input list will not exceed 10^5. * Each integer in the list will be in the range 0 to 10^9. Expected Complexity: * Time Complexity: O(N*sqrt(max(arr))) * Space Complexity: O(N)","solution":"import math def longestPerfectSquareSubsequence(arr): def is_perfect_square(x): if x < 0: return False s = int(math.sqrt(x)) return s * s == x perfect_squares = [x for x in arr if is_perfect_square(x)] return sorted(perfect_squares)"},{"question":"Create a function that checks whether two strings are anagrams of each other. For example: - Given `\\"listen\\"` and `\\"silent\\"`, your solution will return `True` - Given `\\"hello\\"` and `\\"bellow\\"`, your solution will return `False` You can assume, for the purpose of this task, that the strings are case-insensitive and do not contain any whitespace or special characters.","solution":"def are_anagrams(str1, str2): Checks whether two strings are anagrams of each other. Arguments: str1 -- first string str2 -- second string Returns: True if str1 and str2 are anagrams, otherwise False # Normalize the strings by converting them to lowercase str1, str2 = str1.lower(), str2.lower() # Sort the characters of both the strings return sorted(str1) == sorted(str2)"},{"question":"You are a software developer working on a new feature for a task management application. One requirement is to identify the longest streak of consecutive days a user has completed at least one task. Each task has a completion date. Your goal is to determine the length of the longest consecutive day streak where tasks were completed. -----Input----- The first line contains N, the number of tasks completed by the user. The next N lines each contain a date in YYYY-MM-DD format, representing the completion date of a task. Input satisfies the following constraints: - 1 leq N leq 10^5. - All dates are valid dates between the years 2000 and 2100. - The dates are not necessarily in any particular order, and there may be multiple tasks completed on the same date. -----Output----- Print one integer – the length of the longest streak of consecutive days with at least one task completed. -----Examples----- Sample Input 1: 5 2023-01-01 2023-01-02 2023-01-03 2023-01-01 2023-01-05 Sample Output 1: 3 Sample Input 2: 4 2023-01-01 2023-01-03 2023-01-04 2023-01-05 Sample Output 2: 3 Sample Input 3: 3 2023-01-01 2023-01-10 2023-01-20 Sample Output 3: 1","solution":"from datetime import datetime, timedelta def longest_streak(n, dates): Finds the length of the longest streak of consecutive days with at least one task completed. Parameters: n (int): Number of tasks completed by the user. dates (List[str]): List of dates in \'YYYY-MM-DD\' format representing the completion date of a task. Returns: int: Length of the longest streak of consecutive days with task completion. if n <= 0: return 0 # Convert list of dates to a set of datetime objects to remove duplicates and for O(1) lookups completion_dates = set(datetime.strptime(date, \'%Y-%m-%d\') for date in dates) max_streak = 0 current_streak = 0 for date in sorted(completion_dates): if current_streak == 0: # Start of a new streak current_streak = 1 else: if (previous_date + timedelta(days=1)) == date: # Consecutive day current_streak += 1 else: # Streak breaks max_streak = max(max_streak, current_streak) current_streak = 1 # Update previous_date to current date for next iteration previous_date = date # Final check in case the longest streak is the last streak found max_streak = max(max_streak, current_streak) return max_streak"},{"question":"You are given an array of integers. Your task is to move all the zeros to the end of the array while maintaining the relative order of the non-zero elements. Input The only line of input contains an integer n (1 <= n <= 100) - the length of the array, followed by n integers which can be positive, negative, or zero. Output Output the array after moving all the zeros to the end while keeping the relative order of non-zero elements the same. Examples Input 7 0 1 0 3 12 0 2 Output 1 3 12 2 0 0 0 Input 5 0 0 0 2 5 Output 2 5 0 0 0","solution":"def move_zeros_to_end(arr): Moves all zeros in the array to the end while maintaining the relative order of non-zero elements. :param arr: List of integers :return: List of integers with zeros moved to the end # Initialize a list for non-zero elements non_zero_elements = [num for num in arr if num != 0] # Count the number of zeros in the array zero_count = arr.count(0) # Concatenate non-zero elements with the required number of zeros at the end result = non_zero_elements + [0] * zero_count return result"},{"question":"Write a function that takes a string representing a mathematical expression (consisting of non-negative integers, \'+\' and \'-\' operators only) and evaluates it. Return the result as an integer. Handle the operations left to right without precedence of operators. For example: ```python evaluate_expression(\\"10+5-27+6\\") ``` should return: ``` -6 ```","solution":"def evaluate_expression(expression): Evaluates a simple mathematical expression with non-negative integers and +, - operators. Operations are evaluated from left to right without precedence. num = 0 # to store the current number result = 0 sign = 1 # to store sign of current number i = 0 while i < len(expression): char = expression[i] if char.isdigit(): num = num * 10 + int(char) elif char in \'+-\': result += sign * num num = 0 sign = 1 if char == \'+\' else -1 i += 1 result += sign * num # add the last number return result"},{"question":"Task The provided code stub reads an integer, n, from STDIN. For all positive integers i leq n, print whether i is prime or not. Example n = 5 The list of positive integers from 1 to n=5 is [1, 2, 3, 4, 5]. Print whether each number is prime on a separate line. 1 is not prime 2 is prime 3 is prime 4 is not prime 5 is prime Input Format The first and only line contains the integer, n. Constraints 1 leq n leq 50 Output Format Print n lines, one corresponding to each boldsymbol{i}. Sample Input 0 5 Sample Output 0 1 is not prime 2 is prime 3 is prime 4 is not prime 5 is prime","solution":"def is_prime(num): Checks if a number is prime. Parameters: num (int): The number to check. Returns: bool: True if num is prime, else False. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def print_prime_status(n): For all positive integers i <= n, print whether i is prime or not. Parameters: n (int): The upper limit integer. for i in range(1, n + 1): if is_prime(i): print(f\\"{i} is prime\\") else: print(f\\"{i} is not prime\\") # Example Usage: # n = int(input()) # print_prime_status(n)"},{"question":"Given an array `nums` consisting of `n` integers and an integer `k`, your task is to implement a function that returns the `k` most frequent elements in the array. If there are multiple answers, return any of them. ------ Input Format ------ - The first line contains two integers `n` and `k` separated by a space. - The next line contains `n` integers separated by spaces representing the array `nums`. ------ Output Format ------ Print the `k` most frequent elements in the array, each separated by a space. ------ Constraints ------ 1 ≤ n ≤ 10^{5} 1 ≤ k ≤ n -10^{4} ≤ nums[i] ≤ 10^{4} ------ Example Input 1 ------ 6 2 1 1 1 2 2 3 ------ Example Output 1 ------ 1 2 ------ Explanation 1 ------ In the example, 1 appears three times, 2 appears twice, and 3 appears once. Thus, the two most frequent elements are 1 and 2. ------ Example Input 2 ------ 8 3 4 4 4 6 6 2 2 2 ------ Example Output 2 ------ 4 2 6 ------ Explanation 2 ------ In the example, 4 appears three times, 2 appears three times, and 6 appears two times. Thus, the three most frequent elements are 4, 2, and 6.","solution":"from collections import Counter def k_most_frequent(nums, k): Returns the k most frequent elements in the array nums. count = Counter(nums) return [item for item, _ in count.most_common(k)]"},{"question":"A game developer wants to implement a reward system based on the number of completed levels in a game. The reward system grants a bonus if the player completes at least 20 levels out of 25. The player\'s performance data is provided, indicating the number of levels completed each day over a period of 25 days. Given the number of levels completed daily as a list of integers, determine if the player is eligible for the bonus reward. ------ Input Format ------ A single line of input with 25 integers, each representing the number of levels completed by the player on each of the 25 days. ------ Output Format ------ Output a single string, either \\"Bonus\\" if the player completed at least 20 levels, or \\"No Bonus\\" if the player did not. ------ Constraints ------ 0 ≤ levels_{1}, levels_{2}, ..., levels_{25} ≤ 5 ----- Sample Input 1 ------ 3 1 4 2 4 1 3 2 0 1 5 2 1 4 3 2 0 1 3 2 1 4 1 2 0 ----- Sample Output 1 ------ Bonus ----- Explanation 1 ------ The player completed a total of 3 + 1 + 4 + 2 + 4 + 1 + 3 + 2 + 0 + 1 + 5 + 2 + 1 + 4 + 3 + 2 + 0 + 1 + 3 + 2 + 1 + 4 + 1 + 2 + 0 = 53 levels over 25 days, which is more than 20. ----- Sample Input 2 ------ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ----- Sample Output 2 ------ No Bonus ----- Explanation 2 ------ The player did not complete any levels over 25 days, which is less than 20. Hence, the player is not eligible for the bonus. ----- Sample Input 3 ------ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ----- Sample Output 3 ------ Bonus ----- Explanation 3 ------ The player completed a total of 1 × 25 = 25 levels over 25 days, which is more than 20. Hence, the player is eligible for the bonus. ----- Sample Input 4 ------ 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 25 5 ----- Sample Output 4 ------ Bonus ----- Explanation 4 ------ The player completed far more than 20 levels over 25 days, making them eligible for the bonus.","solution":"def check_bonus(levels): Determines if a player receives a bonus based on the number of levels completed each day over 25 days. Parameters: levels (list of int): A list of integers where each integer represents the number of levels completed each day over 25 days. Returns: str: \\"Bonus\\" if the player completed at least 20 levels, \\"No Bonus\\" otherwise. total_levels_completed = sum(levels) if total_levels_completed >= 20: return \\"Bonus\\" else: return \\"No Bonus\\""},{"question":"A famous artist specializes in creating mosaic artwork using colorful square tiles. Each tile has a unique color, represented by an uppercase English letter (from \'A\' to \'Z\'). He arranges these tiles in a grid with R rows and C columns. The artist wants to know the largest contiguous rectangular region (subgrid) in the mosaic where all the tiles are of the same color. Your task is to write a program to help the artist find the area of the largest contiguous subgrid where all the tiles have the same color. **Input**: The input consists of multiple datasets. Each dataset is given in the following format: ``` R C row1 row2 ... rowR ``` The first line consists of two integers R and C (1 ≤ R, C ≤ 50), representing the number of rows and columns in the grid. Each of the next R lines consists of C uppercase English letters, representing the color of the tiles in that row. The end of the input consists of a line with two zeros separated by a space. **Output**: For each dataset, output the area of the largest contiguous subgrid where all the tiles are of the same color on one line. **Example**: ``` Input: 3 3 AAA AAA AAA 5 4 ABAA ABBB ABBB AAAA BBBB 0 0 Output: 9 6 ``` Note: The first dataset represents a 3x3 grid where all tiles are \'A\'. The largest contiguous area of the same color is the entire grid itself (3 * 3 = 9). The second dataset represents a 5x4 grid. The largest contiguous area of the same color is found within the last column and its preceding tiles, yielding an area of 6 (\'B\'s).","solution":"def largest_contiguous_area(grid): R = len(grid) C = len(grid[0]) if R > 0 else 0 max_area = 0 for row_start in range(R): for col_start in range(C): color = grid[row_start][col_start] for row_end in range(row_start, R): for col_end in range(col_start, C): if check_uniform(grid, row_start, col_start, row_end, col_end, color): area = (row_end - row_start + 1) * (col_end - col_start + 1) max_area = max(max_area, area) return max_area def check_uniform(grid, row_start, col_start, row_end, col_end, color): for i in range(row_start, row_end + 1): for j in range(col_start, col_end + 1): if grid[i][j] != color: return False return True def parse_input(input_string): datasets = [] lines = input_string.strip().split(\'n\') i = 0 while i < len(lines): R, C = map(int, lines[i].split()) if R == 0 and C == 0: break grid = [lines[i + 1 + j] for j in range(R)] datasets.append(grid) i += R + 1 return datasets def solve(input_string): datasets = parse_input(input_string) results = [] for grid in datasets: results.append(largest_contiguous_area(grid)) return results if __name__ == \\"__main__\\": import sys input_string = sys.stdin.read() results = solve(input_string) for result in results: print(result)"},{"question":"Write a function that takes a list of dictionaries, where each dictionary represents a student with keys \'name\' and \'score\', and returns a new list of dictionaries sorted by the students\' scores in descending order. If two students have the same score, they should be sorted by their names alphabetically. The function should also handle corner cases, such as an empty input list. ``` For example: students = [ {\'name\': \'Alice\', \'score\': 85}, {\'name\': \'Bob\', \'score\': 90}, {\'name\': \'Charlie\', \'score\': 90}, {\'name\': \'David\', \'score\': 75} ] sort_students(students) => [ {\'name\': \'Bob\', \'score\': 90}, {\'name\': \'Charlie\', \'score\': 90}, {\'name\': \'Alice\', \'score\': 85}, {\'name\': \'David\', \'score\': 75} ] ```","solution":"def sort_students(students): Returns a new list of dictionaries sorted by the students\' scores in descending order. If two students have the same score, they are sorted by their names alphabetically. :param students: List of dictionaries with each dictionary containing \'name\' and \'score\' keys. :return: Sorted list of dictionaries. return sorted(students, key=lambda x: (-x[\'score\'], x[\'name\']))"},{"question":"John is practicing for his programming exams and decided to focus on string transformation problems. He came up with the following problem: Given a string consisting of lowercase letters, determine if it can be transformed into a palindrome by rearranging its characters. If it is possible, output \\"YES\\"; otherwise, output \\"NO\\". A palindrome is a string that reads the same backward as forward. Input Format: The first line contains an integer T, the number of test cases. Each of the next T lines contains a string of lowercase letters. Output Format: A single line containing \\"YES\\" or \\"NO\\" for each test case, indicating whether the string can be rearranged to form a palindrome. Constraints: 1 ≤ T ≤ 20 1 ≤ length of string ≤ 10^5 SAMPLE INPUT 3 civic ivicc hello SAMPLE OUTPUT YES YES NO Explanation For test case 1, \\"civic\\" is already a palindrome. For test case 2, \\"ivicc\\" can be rearranged to form \\"civic\\", which is a palindrome. For test case 3, \\"hello\\" cannot be rearranged to form any palindrome.","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. :param s: A string consisting of lowercase letters :return: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\" from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged into a palindrome if it has at most one character with an odd count return \\"YES\\" if odd_count <= 1 else \\"NO\\" # Function to process multiple test cases def palindrome_test_cases(T, cases): results = [] for i in range(T): results.append(can_form_palindrome(cases[i])) return results"},{"question":"Little painter loves playing with colors and shapes. Recently, while working on a painting project, she stumbled upon an interesting property of squares and triangles. She realized that by arranging the squares along with triangles of equal height, she could form various patterns. She wants to know the distinct numbers of triangles she can form using exactly `S` squares. Given a number `S`, determine how many different values of `T` (number of triangles) are possible to form such that each triangle uses exactly one square as its base and height, and the sum of the squares\' side lengths used in the triangles is equal to `S`. -----Input----- The first line of input contains an integer `S` denoting the total side lengths of squares. -----Output----- Print the number of distinct integers `T` that can be formed using the given squares such that the total side lengths used are exactly `S`. -----Constraints----- - 1 ≤ S ≤ 100000 (10^5) -----Example----- Input: 10 Output: 10 -----Explanation----- For input `S = 10`, the possible values of `T` are: 1 (one triangle with all 10 squares), 2 (two triangles with side lengths 5 each), 3 (three triangles with side lengths 3, 3, and 4), and so on up to 10 (ten triangles each with side length 1). So, there are 10 distinct ways to form the triangles.","solution":"def distinct_triangles(S): Determine the number of distinct integers T such that the total side lengths of squares used in triangles is exactly S. Parameters: S (int): The total side lengths of squares Returns: int: Distinct number of triangles return S"},{"question":"Write a function `find_first_non_repeating_char(s)` that returns the first non-repeating character in a given string `s`. If there is no non-repeating character, the function should return an empty string `\'\'`. # Examples: ``` find_first_non_repeating_char(\'swiss\') -> \'w\' find_first_non_repeating_char(\'redivider\') -> \'v\' find_first_non_repeating_char(\'abcabc\') -> \'\' ``` # Specifications: - The input string `s` will contain only lowercase alphabets and will have a length of at most `10^4`. - Your solution should have time complexity not worse than O(n), where n is the length of the string.","solution":"def find_first_non_repeating_char(s): Returns the first non-repeating character in the given string `s`. If there is no non-repeating character, returns an empty string \'\'. char_count = {} # First pass: Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass: Find the first non-repeating character for char in s: if char_count[char] == 1: return char return \'\'"},{"question":"You are tasked to remove all instances of a given character from a string array. Input Format The input starts with an integer M > 0, followed by M pairs of strings str, c, where str is a non-empty string of at most 1000 characters and c is a single character to be removed from the string. Output Format For each pair of inputs str, c, output the modified string with all instances of character c removed. If the character to be removed is not present in the string, the output should be the original string. The output for each pair should be printed on a new line. SAMPLE INPUT 3 hello l banana n test t SAMPLE OUTPUT heo baaa es","solution":"def remove_character_from_string(input_list): Given a list where the first element is an integer M and the following elements are pairs of strings and characters, this function removes all instances of each character from each corresponding string and returns a list of modified strings. M = input_list[0] results = [] for i in range(1, M + 1): string, char = input_list[2 * i - 1], input_list[2 * i] modified_string = string.replace(char, \'\') results.append(modified_string) return results"},{"question":"A popular bakery is conducting a survey on their most popular product. Each customer who visits the bakery is asked to name their favorite product. The bakery wants to determine which product is the most popular among the customers. You need to find the name of the product that has the highest number of votes. If there are multiple products with the same number of highest votes, the product with the lexicographically smallest name should be chosen as the most popular. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of customers. - The second line contains N space-separated strings P_1, P_2, ldots, P_N, denoting the respective names of the favorite products given by the customers. -----Output----- For each test case, print a single line containing a string — the name of the most popular product. In case of a tie, print the lexicographically smallest name. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq |P_i| leq 20, for each valid i (|P_i| is the length of the string P_i) - For each valid i, P_i contains only lowercase English alphabets - Sum of N over all the test cases is leq 10^6 -----Subtasks----- - 30 points: 1 leq N leq 100 - 70 points: original constraints -----Sample Input----- 2 7 cake muffin cake pie cake muffin pie 3 bread bread pie -----Sample Output----- cake bread","solution":"def most_popular_product(T, test_cases): from collections import Counter results = [] for test_case in test_cases: N, products = test_case product_count = Counter(products) most_popular = sorted(product_count.items(), key=lambda x: (-x[1], x[0]))[0][0] results.append(most_popular) return results # Input processing for the function will not be written here as it is not needed for the solution and unit tests."},{"question":"A manufacturing company produces widgets and each widget undergoes a quality check before being packed. Every widget is inspected for various attributes and either passes or fails the inspection. The company keeps track of each inspection in a log and marks whether the widget passed or failed the quality check. The inspection log is represented as a two-dimensional array where each sub-array represents an inspection with two elements: the widget ID (an integer) and the inspection result (a boolean value: true for pass, false for fail). Due to discrepancies in the past, the company wants to identify all widgets that have been inspected multiple times and have contradictory inspection results (i.e., they have both pass and fail results). Write a function `findContradictoryWidgets` that takes an inspection log as input and returns a list of widget IDs that have contradictory results. # Input: - An integer T, the number of test cases. - For each test case: - An integer N, the number of inspections. - A two-dimensional array of size N x 2 representing the inspection log. Each sub-array contains two elements: - An integer representing the widget ID. - A boolean value representing the inspection result: true for pass and false for fail. # Output: - For each test case, output a list of widget IDs (in ascending order) that have contradictory results. If there are no such widgets, return an empty list. # Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 50 - 1 ≤ Widget IDs ≤ 1000 # Example Input: ``` 2 4 1 true 2 true 1 false 3 true 5 1 true 2 false 3 true 2 true 3 false ``` # Example Output: ``` 1 2 3 ```","solution":"def findContradictoryWidgets(T, cases): Returns a list of widget IDs for each test case that have contradictory inspection results. results = [] for i in range(T): inspections = cases[i] inspection_dict = {} for inspection in inspections: widget_id, result = inspection if widget_id not in inspection_dict: inspection_dict[widget_id] = set() inspection_dict[widget_id].add(result) contradictory_widgets = [wid for wid, res in inspection_dict.items() if len(res) > 1] contradictory_widgets.sort() # sort the list of widget IDs for consistency in output results.append(contradictory_widgets) return results"},{"question":"A game developer is creating a new 2D game involving characters moving around on a rectangular grid. The grid has dimensions NxM and is represented by a matrix of characters. Each cell in the matrix contains either a dot (\'.\'), representing an empty space, or a hash (\'#\'), representing an obstacle, or a star (\'*\'), representing a point of interest. The character can only move up, down, left, or right. From any given starting point (sx, sy) on the grid, the character wants to determine the minimal number of moves required to reach the nearest point of interest. Help the developer write a program that calculates the minimal number of moves for the character to reach any point of interest from the given starting position. If no point of interest is reachable, return -1. Input: - The first line of input contains an integer T denoting the number of test cases. - For each test case: - The first line contains two space-separated integers N and M, denoting the dimensions of the grid. - The next N lines each contain a string of length M, representing the grid. - The final line contains two space-separated integers sx and sy, representing the starting position of the character. Output: For each test case, print the minimal number of moves required to reach the nearest point of interest from the starting position, in a new line. If no point of interest is reachable, print -1. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 50 - 0 ≤ sx < N - 0 ≤ sy < M SAMPLE INPUT: 2 3 3 ..* .#. .*. 0 0 3 3 ..# .#. .#. 0 0 SAMPLE OUTPUT: 2 -1 Explanation: In the first test case, starting from (0,0) the nearest point of interest (\'*\') is at (0,2) or (2,0) and it takes 2 moves to reach either way. In the second test case, all points of interest are blocked by obstacles making it impossible to reach any of them, so the output is -1.","solution":"from collections import deque def min_moves_to_interest(n, m, grid, sx, sy): # Directions for right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Check if the starting point is the point of interest if grid[sx][sy] == \'*\': return 0 queue = deque([(sx, sy, 0)]) # (x, y, distance) visited = set() visited.add((sx, sy)) while queue: x, y, dist = queue.popleft() # Explore in all four directions for dx, dy in directions: nx, ny = x + dx, y + dy # Check if new position is within bounds and not an obstacle if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != \'#\': if grid[nx][ny] == \'*\': return dist + 1 queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 def process_test_cases(t, test_cases): results = [] for case in test_cases: n, m, grid, sx, sy = case results.append(min_moves_to_interest(n, m, grid, sx, sy)) return results"},{"question":"Given a list of non-negative integers representing the amount of money each house in a street has, determine the maximum amount of money you can rob without robbing two adjacent houses. Example 1: Input: [1, 2, 3, 1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Example 2: Input: [2, 7, 9, 3, 1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12.","solution":"def rob(nums): Returns the maximum amount of money you can rob without robbing two adjacent houses. if not nums: return 0 if len(nums) == 1: return nums[0] # dp[i] will be the max amount of money you can rob up to house i. dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1]"},{"question":"Given a coordinate plane with several points on it, we want to find the number of distinct right-angled isosceles triangles with the right angle at the origin (0, 0). A right-angled isosceles triangle has two sides of equal length, and these sides must be aligned along the x and y axes. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of points on the plane. Each of the next n lines contains two integers xi and yi (-10^9 ≤ xi, yi ≤ 10^9) representing the coordinates of each point. -----Output----- Print a single integer — the number of distinct right-angled isosceles triangles with the right angle at the origin (0, 0). -----Examples----- Input 5 2 0 0 2 2 2 3 0 0 3 Output 2 Input 3 1 1 2 0 0 2 Output 1 Input 4 1 1 2 2 3 3 0 0 Output 1","solution":"def count_right_angle_isosceles_triangles(points): Returns the number of distinct right-angled isosceles triangles with the right angle at the origin (0, 0). Args: points (list): List of tuple containing the x and y coordinates of the points Returns: int: The count of distinct triangles x_coords = set() y_coords = set() for x, y in points: if x == 0: y_coords.add(y) if y == 0: x_coords.add(x) return min(len(x_coords), len(y_coords))"},{"question":"Given a list of integers, rotate the list to the right by a given number of steps. Each element of the list would shift to the right by the specified number of steps, and elements that are shifted out from the end will reappear at the beginning. Input The first line of input contains an integer n (1 ≤ n ≤ 10) — the number of elements in the list. The second line contains n integers — the elements of the list (each integer is between -1000 and 1000 inclusive). The third line of input contains an integer k (0 ≤ k ≤ 1000) — the number of steps to rotate the list. Output Output the transformed list after rotating the elements to the right by k steps. Examples Input 5 1 2 3 4 5 2 Output 4 5 1 2 3 Input 3 -1 -100 3 4 Output 3 -1 -100","solution":"def rotate_list(n, lst, k): Rotates a list to the right by k steps. Args: n (int): Number of elements in the list. lst (list of int): List to be rotated. k (int): Number of steps to rotate the list. Returns: list of int: Rotated list. if n == 0: return lst k = k % n # Normalize k to be within the length of the list if k == 0: return lst # No rotation needed return lst[-k:] + lst[:-k]"},{"question":"Given a string s which consists of lowercase English letters and brackets. You need to reverse the strings inside each pair of parentheses. The strings inside parentheses can be nested within other parentheses. Return the resulting string after all the reversals are completed. Example 1: Input: s = \\"(abcd)\\" Output: \\"dcba\\" Explanation: After reversing the string inside the only pair of parentheses: \\"(abcd)\\" -> \\"dcba\\" Example 2: Input: s = \\"(u(love)i)\\" Output: \\"iloveu\\" Explanation: After reversing the strings inside the nested parentheses first: \\"(u(love)i)\\" -> \\"(u(evol)i)\\" Then reversing the string inside the remaining pair of parentheses: \\"(u(evol)i)\\" -> \\"iloveu\\" Example 3: Input: s = \\"(ed(et(oc))el)\\" Output: \\"leetcode\\" Explanation: First reverse the substring: \\"(oc)\\" -> \\"co\\" Then reverse the string inside the nested parentheses: \\"(et(co))\\" -> \\"cote\\" Finally, reverse the substring: \\"(ed(cote)el)\\" -> \\"leetcode\\" Note: 1. s will have a length in the range [1, 2000]. 2. s will only consist of lowercase English letters and parentheses.","solution":"def reverseParentheses(s: str) -> str: stack = [] for char in s: if char == \')\': substr = [] while stack and stack[-1] != \'(\': substr.append(stack.pop()) stack.pop() # popping the \'(\' stack.extend(substr) else: stack.append(char) return \'\'.join(stack)"},{"question":"Given an array of integers mathbf{A} of size N, and an integer K, determine whether there exists a pair of integers in the array whose sum is exactly K. Input Format - The first line contains two integers N and K, where 1 leq N leq 10^5 and -10^9 leq K leq 10^9. - The second line contains N integers representing the elements of the array mathbf{A}, where -10^9 leq A_i leq 10^9. Output Format - Print \\"YES\\" if there exists such a pair of integers, otherwise print \\"NO\\". Sample Input 1: ``` 5 9 2 7 11 15 3 ``` Sample Output 1: ``` YES ``` Explanation: The numbers 2 and 7 add up to 9. Sample Input 2: ``` 4 10 1 2 3 4 ``` Sample Output 2: ``` NO ``` Explanation: There is no pair of numbers in the array that add up to 10.","solution":"def has_pair_with_sum(N, K, A): Determines if there exist two integers in the array A whose sum is exactly K. :param N: int - number of integers in the array :param K: int - target sum :param A: list of int - the array of integers :return: str - \\"YES\\" if such a pair exists, otherwise \\"NO\\" seen = set() for num in A: if K - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are given a string containing only uppercase alphabetical characters. Your task is to determine the length of the longest substring that can be made by replacing at most `k` characters with any other character. -----Input----- The first line contains an integer k (0 ≤ k ≤ length of the string), representing the maximum number of characters you can replace. The second line contains a string s (1 ≤ |s| ≤ 10^5) consisting of only uppercase English letters. -----Output----- Print the length of the longest substring that can be obtained by replacing at most k characters. -----Examples----- Input 2 ABAB Output 4 Input 1 AABABBA Output 4 Input 0 ABCDE Output 1","solution":"def longest_substring_with_k_replacements(k, s): Returns the length of the longest substring that can be made by replacing at most `k` characters with any other character in the given string `s`. l = 0 max_freq = 0 char_counts = {} max_len = 0 for r in range(len(s)): char_counts[s[r]] = char_counts.get(s[r], 0) + 1 max_freq = max(max_freq, char_counts[s[r]]) if (r - l + 1) - max_freq > k: char_counts[s[l]] -= 1 l += 1 max_len = max(max_len, r - l + 1) return max_len"},{"question":"You are given an array of integers. Your task is to answer multiple queries about the array. Each query consists of two integers L and R representing a range. For each query, output the length of the longest sub-array within the range a[L ... R] that has all its elements equal. Input Format The first line contains an integer mathbf{N}, the number of elements in the array. The second line contains mathbf{N} space-separated integers representing the elements of the array. The third line contains an integer mathbf{Q}, the number of queries. The following mathbf{Q} lines contain two integers mathbf{L} and mathbf{R} representing the range for each query. (1-based indexing) Output Format For each query, output the length of the longest sub-array within the range L ... R that has all its elements equal. Constraints - 1 leq N leq 2 times 10^5 - 1 leq Q leq 5 times 10^4 - 1 leq L leq R leq N - 1 leq a[i] leq 10^9 Sample Input 5 1 2 2 3 3 3 1 3 2 4 3 5 Sample Output 2 2 2 Explanation For the first query (1, 3), the longest sub-array with all equal elements within range [1, 3] is \\"2, 2\\" of length 2. For the second query (2, 4), the longest sub-array with all equal elements within range [2, 4] is \\"2, 2\\" of length 2. For the third query (3, 5), the longest sub-array with all equal elements within range [3, 5] is \\"3, 3\\" of length 2.","solution":"def longest_uniform_subarray_length(N, array, queries): Function to find the length of the longest sub-array with all equal elements for each query with the given range in the list. :param N: integer, number of elements in array :param array: list of integers :param queries: list of tuples, each containing start and end index of the range (1-based) :return: list of integers, longest lengths for each query results = [] for L, R in queries: start = L - 1 end = R max_length = 1 current_length = 1 for i in range(start + 1, end): if array[i] == array[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) results.append(max_length) return results"},{"question":"Mara loves collecting toy trains and building her own miniature railway networks. Each train network consists of stations connected by tracks. Two stations are directly connected if there is a straight track between them. Stations are uniquely identified by positive integers. This year, Mara wants to build a new railway network, but she also wants to ensure her network is efficient. One important feature of an efficient railway network is that every pair of stations should be able to communicate with each other through direct or indirect connections. Mara heard this is called a \\"connected network.\\" Given a list of stations and direct connections between them, help Mara determine if her railway network is connected. -----Input----- The input consists of a single test case. The first line contains two integers n and m, where n is the number of stations (1 leq n leq 100) and m is the number of direct connections (0 leq m leq 1000). Each of the next m lines contains two integers u and v, representing a direct track between station u and station v (1 leq u, v leq n). -----Output----- Output \\"YES\\" if the railway network is connected, and \\"NO\\" otherwise. -----Examples----- Sample Input 1: 5 4 1 2 2 3 3 4 4 5 Sample Output 1: YES Sample Input 2: 5 3 1 2 2 3 4 5 Sample Output 2: NO","solution":"def is_connected(n, m, connections): Determines if a network of stations is connected. Parameters: - n: int, number of stations - m: int, number of direct connections - connections: list of tuples, each representing a direct connection (u, v) Returns: - str: \\"YES\\" if the network is connected, otherwise \\"NO\\" # Create adjacency list for the stations from collections import defaultdict, deque graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # Since the network is undirected # To perform BFS/DFS to check connectivity def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) queue.extend(graph[node]) return visited # Check connectivity by starting from station 1 all_stations = set(range(1, n + 1)) if n == 1: return \\"YES\\" # Only one station means it is connected if m == 0: return \\"NO\\" # No connections means stations can\'t communicate visited_stations = bfs(1) if visited_stations == all_stations: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given two integers n and k, and you need to generate the kth permutation sequence of numbers from 1 to n in lexicographical order. For instance, given n = 3, the permutations in lexicographical order are: 1. \\"123\\" 2. \\"132\\" 3. \\"213\\" 4. \\"231\\" 5. \\"312\\" 6. \\"321\\" The task is to write a function that receives these two input parameters (n and k) and returns the kth permutation sequence as a string. **Function Signature:** ```python def get_permutation(n: int, k: int) -> str: ``` **Input:** - An integer n (1 ≤ n ≤ 9) which denotes the range of numbers from 1 to n. - An integer k (1 ≤ k ≤ n!) which denotes the position in the lexicographical order of the permutation. **Output:** - A string representing the kth permutation sequence of numbers from 1 to n. **Example:** ```python assert get_permutation(3, 3) == \\"213\\" assert get_permutation(4, 9) == \\"2314\\" assert get_permutation(3, 1) == \\"123\\" ``` **Hint:** - You may need to precompute factorials to help determine the kth permutation. - Indexing and selecting elements efficiently will be crucial to avoid the exponential time complexity of generating all permutations.","solution":"import math def get_permutation(n: int, k: int) -> str: Returns the kth permutation sequence of numbers from 1 to n in lexicographical order. numbers = list(range(1, n + 1)) k -= 1 # convert k to zero-based index permutation = [] # Compute factorial values factorial = math.factorial(n) for i in range(n, 0, -1): factorial //= i index = k // factorial permutation.append(str(numbers.pop(index))) k %= factorial return \'\'.join(permutation)"},{"question":"In a magical kingdom, there exists a peculiar species of creatures called \\"Jumpicorns\\". Jumpicorns can jump to different locations represented by an `n x n` grid, but they have a special jumping rule: each Jumpicorn can only jump if the next location is exactly one unit away either horizontally, vertically, or diagonally. You are tasked with determining whether a Jumpicorn can follow a sequence of jumps in a given route. The route is given as a list of coordinates, `[ (x1, y1), (x2, y2), ..., (xm, ym) ]`, where each coordinate represents a location on the grid the Jumpicorn wants to visit in the given order. # Examples Let\'s take an example with a 5x5 grid and the route `< (0, 0), (0, 1), (1, 1) >`: - Jump from `(0, 0)` to `(0, 1)` - Valid (one unit horizontally) - Jump from `(0, 1)` to `(1, 1)` - Valid (one unit diagonally) The Jumpicorn can follow this route. However, let\'s take the route `< (0, 0), (2, 0) >`: - Jump from `(0, 0)` to `(2, 0)` - Invalid (two units vertically) The Jumpicorn cannot follow this route. # Input Complete a function `can_follow_route(grid_size, route)` that takes in: - `grid_size` (integer): the size of the `n x n` grid. - `route` (list of tuples): a list of coordinates representing the route. # Output The function should return: - `true` if the Jumpicorn can follow the given route. - `false` if the Jumpicorn cannot follow the given route. # Constraints - `2 <= grid_size <= 1000` - `1 <= len(route) <= 10^4` - Each coordinate in the route will be within `[0, grid_size-1]`. # Sample Input ```python can_follow_route(5, [(0, 0), (0, 1), (1, 1)]) ``` # Sample Output ```python true ``` # Explanation The Jumpicorn can jump from (0, 0) to (0, 1) and then from (0, 1) to (1, 1) following the route successfully. # Another Input ```python can_follow_route(5, [(0, 0), (2, 0)]) ``` # Output ```python false ``` # Explanation The Jumpicorn cannot jump from (0, 0) to (2, 0) because the required move is more than one unit vertically.","solution":"def can_follow_route(grid_size, route): Determines whether a Jumpicorn can follow the given route on an n x n grid. Args: grid_size (int): Size of the n x n grid. route (List[Tuple[int, int]]): List of coordinates representing the route. Returns: bool: True if the Jumpicorn can follow the route, False otherwise. for i in range(1, len(route)): x1, y1 = route[i-1] x2, y2 = route[i] # Calculate the differences in x and y coordinates dx = abs(x2 - x1) dy = abs(y2 - y1) # Check if the move is more than one unit away if dx > 1 or dy > 1: return False return True"},{"question":"Bob is a software engineer who loves solving problems with a twist. One day, his friend challenged him with a problem involving sequences of integers, and now he wants to test your problem-solving skills with a variation of this challenge. Given an integer sequence of length N and a target sum T, determine the number of distinct subsets of the sequence whose sum equals T. A subset is considered distinct if it includes different elements from the sequence, regardless of their order. Note that the sequence can include both positive and negative integers. Bob wants to generalize the result under modulo 10^9 + 7 because the number of distinct subsets can get very large. Can you help Bob solve this challenge? -----Input----- The first line of the input contains two integers 1 leq N leq 100 and -10^3 leq T leq 10^3. The second line contains N integers a_1, a_2, ldots, a_N with -10^3 leq a_i leq 10^3. -----Output----- Output the number of distinct subsets of the sequence whose sum equals T, modulo 10^9 + 7. -----Examples----- Sample Input 1: 5 3 1 2 3 -1 5 Sample Output 1: 3 Sample Input 2: 4 0 -1 1 -1 1 Sample Output 2: 6","solution":"MOD = 10**9 + 7 def count_subsets_with_sum(nums, target): Returns the number of distinct subsets of the sequence nums whose sum equals target, modulo 10^9 + 7. # Initialize the hash table to store the counts of sums. from collections import defaultdict sum_counts = defaultdict(int) sum_counts[0] = 1 for num in nums: current_counts = list(sum_counts.items()) for current_sum, count in current_counts: new_sum = current_sum + num sum_counts[new_sum] = (sum_counts[new_sum] + count) % MOD return sum_counts[target] # Read input from stdin def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) T = int(data[1]) nums = list(map(int, data[2:N+2])) result = count_subsets_with_sum(nums, T) print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an array of integers. Your task is to perform a series of operations on this array and output the result. Each operation will be either updating an element in the array or querying the sum of a specific subarray. Input - The first line contains an integer N, indicating the size of the array. - The second line contains N integers representing the initial elements of the array. - The third line contains an integer Q, indicating the number of operations. - Each of the next Q lines describes an operation and will be in one of the following formats: - \\"U x y\\": Update the element at index x to y. (1-based index) - \\"S l r\\": Output the sum of elements in the subarray from index l to index r inclusive. (1-based index) Output - For each query operation \\"S l r\\", print the sum of the subarray from index l to index r inclusive. Constraints - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 100000 - 1 ≤ x, l, r ≤ N - 1 ≤ elements of the array, y ≤ 1000000000 Sample Input 5 1 2 3 4 5 3 U 3 10 S 2 4 S 1 5 Sample Output 16 22 Explanation After the update operation \\"U 3 10\\", the array becomes [1, 2, 10, 4, 5]. For the query \\"S 2 4\\", the sum of elements from index 2 to 4 is 2 + 10 + 4 = 16. For the query \\"S 1 5\\", the sum of elements from index 1 to 5 is 1 + 2 + 10 + 4 + 5 = 22.","solution":"def process_operations(n, arr, q, operations): Processes a list of operations on an array. The operations include updating elements and querying sums of subarrays. Parameters: n (int): Size of the array. arr (list of int): Initial array of integers. q (int): Number of operations. operations (list of str): List of operations in the format \\"U x y\\" or \\"S l r\\". Returns: list of int: The results of the sum queries. results = [] for op in operations: parts = op.split() if parts[0] == \'U\': x, y = int(parts[1]), int(parts[2]) arr[x-1] = y elif parts[0] == \'S\': l, r = int(parts[1]), int(parts[2]) results.append(sum(arr[l-1:r])) return results"},{"question":"Write a program to calculate the number of ways to distribute `n` distinct candies into `r` identical jars such that no jar is empty. Example 1: Input: n = 4, r = 2 Output: 3 Explanation: The possible ways to distribute 4 candies into 2 jars are (1, 3), (3, 1), and (2, 2). Example 2: Input: n = 5, r = 3 Output: 6 Explanation: The possible ways to distribute 5 candies into 3 jars are (1, 1, 3), (1, 3, 1), (3, 1, 1), (1, 2, 2), (2, 1, 2), and (2, 2, 1). Your Task: You do not need to read input or print anything. Your task is to complete the function `distributeCandies` which takes `n` and `r` as input parameters and returns the number of ways to distribute the candies such that no jar is empty. Expected Time Complexity: O(n * r) Expected Auxiliary Space: O(n * r) Constraints: 1 ≤ n ≤ 20 1 ≤ r ≤ 20","solution":"def distributeCandies(n, r): Returns the number of ways to distribute n distinct candies into r identical jars such that no jar is empty. Uses dynamic programming to calculate the possible distributions. # Base case: Not enough candies to go around if n < r if n < r: return 0 # Initialize a DP table dp = [[0 for _ in range(n+1)] for _ in range(r+1)] # Base case: 1 way to fill 0 jars —> doing nothing dp[0][0] = 1 # Fill the DP table for i in range(1, r+1): for j in range(1, n+1): if j >= i: dp[i][j] = dp[i-1][j-1] + dp[i][j-1] else: dp[i][j] = dp[i-1][j-1] return dp[r][n]"},{"question":"You are given an array of integers and you need to perform a series of operations on it. Each operation involves finding the sum of a subarray. A subarray is defined by the start index and the end index, inclusive. You need to provide the answers for multiple queries. Each query asks for the sum of elements in a specific subarray of the array. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries. The second line contains n integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4) — the elements of the array. The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) — the starting and ending indices (1-based) of the subarray for that query. Output For each query, print a single integer — the sum of elements in the corresponding subarray. Examples Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15 Input 4 2 -1 2 -3 4 1 2 2 4 Output 1 3 Input 6 4 1 -2 3 -4 5 -6 2 5 1 6 3 3 4 4 Output 2 -3 3 -4 Note In the first example, the sum of elements in the subarray from index 1 to 3 is 1 + 2 + 3 = 6. The sum of elements in the subarray from index 2 to 4 is 2 + 3 + 4 = 9. The sum of elements in the subarray from index 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15. In the second example, the sum of elements in the subarray from index 1 to 2 is -1 + 2 = 1. The sum of elements in the subarray from index 2 to 4 is 2 + (-3) + 4 = 3. In the third example, the sum of elements in the subarray from index 2 to 5 is -2 + 3 + (-4) + 5 = 2. The sum of elements in the subarray from index 1 to 6 is 1 + (-2) + 3 + (-4) + 5 + (-6) = -3. The sum of elements in the subarray from index 3 to 3 is 3. The sum of elements in the subarray from index 4 to 4 is -4.","solution":"def subarray_sums(n, q, array, queries): prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] results = [] for l, r in queries: results.append(prefix_sums[r] - prefix_sums[l - 1]) return results"},{"question":"You are tasked with programming the logic for an automated traffic light system at a busy four-way intersection. Each direction (North, East, South, West) has a traffic light which can be \'Green\', \'Yellow\', or \'Red\'. At any given time, two opposite directions (e.g., North-South or East-West) can have the same light while the other two directions have a different light. The transitions must follow these rules: - A direction with a \'Green\' light must transition to \'Yellow\' before turning \'Red\'. - A direction with a \'Red\' light must transition to \'Green\' if the opposite directions are transitioning to \'Red\'. Your task is to simulate the transitions of the traffic lights over a sequence of timesteps. Initially, the North-South direction has a \'Green\' light, and the East-West direction has a \'Red\' light. They transition every 5 timesteps. Implement a function `traffic_light_states` that takes one argument `timesteps` (an integer) and returns a dictionary representing the state of each direction\'s traffic light after the given number of timesteps. Input - An integer `timesteps` (0 ≤ timesteps ≤ 100) representing the number of timesteps to simulate. Output - A dictionary with the keys \\"North\\", \\"East\\", \\"South\\", \\"West\\", where each value is a string representing the color of the traffic light at the given direction after the specified number of timesteps. Examples ``` traffic_light_states(0) # Initial state Output: {\\"North\\": \\"Green\\", \\"East\\": \\"Red\\", \\"South\\": \\"Green\\", \\"West\\": \\"Red\\"} traffic_light_states(5) Output: {\\"North\\": \\"Yellow\\", \\"East\\": \\"Red\\", \\"South\\": \\"Yellow\\", \\"West\\": \\"Red\\"} traffic_light_states(10) Output: {\\"North\\": \\"Red\\", \\"East\\": \\"Green\\", \\"South\\": \\"Red\\", \\"West\\": \\"Green\\"} traffic_light_states(15) Output: {\\"North\\": \\"Red\\", \\"East\\": \\"Yellow\\", \\"South\\": \\"Red\\", \\"West\\": \\"Yellow\\"} traffic_light_states(20) Output: {\\"North\\": \\"Green\\", \\"East\\": \\"Red\\", \\"South\\": \\"Green\\", \\"West\\": \\"Red\\"} ``` Note: - The North-South direction and the East-West direction alternate between \'Green\', \'Yellow\', and \'Red\' every 5 timesteps. - At timestep = 0, North-South is \'Green\', East-West is \'Red\'. - At timestep = 5, the North-South changes to \'Yellow\' and remains until timestep = 10, when it changes to \'Red\', then the East-West transitions to \'Green\', and so on.","solution":"def traffic_light_states(timesteps): Returns the state of each traffic light direction after the given number of timesteps. # Time cycle point in the sequence cycle_point = timesteps % 20 if cycle_point < 5: return {\\"North\\": \\"Green\\", \\"East\\": \\"Red\\", \\"South\\": \\"Green\\", \\"West\\": \\"Red\\"} elif cycle_point < 10: return {\\"North\\": \\"Yellow\\", \\"East\\": \\"Red\\", \\"South\\": \\"Yellow\\", \\"West\\": \\"Red\\"} elif cycle_point < 15: return {\\"North\\": \\"Red\\", \\"East\\": \\"Green\\", \\"South\\": \\"Red\\", \\"West\\": \\"Green\\"} else: return {\\"North\\": \\"Red\\", \\"East\\": \\"Yellow\\", \\"South\\": \\"Red\\", \\"West\\": \\"Yellow\\"}"},{"question":"You are given a list of N integers. Your goal is to sort this list in such a way that all odd numbers come before all even numbers. Within the odd numbers, they should be sorted in ascending order, and within the even numbers, they should also be sorted in ascending order. Write a function to accomplish this task. Input - The first line contains an integer N indicating the number of elements in the list. (1 ≤ N ≤ 100) - The second line contains N space-separated integers representing the list. Each integer in the list is between -1000 and 1000 inclusive. Output - Output a single line containing the sorted list where all odd numbers precede all even numbers, each group sorted in ascending order. Examples Input 7 10 21 3 14 5 8 7 Output 3 5 7 21 8 10 14 Input 5 1 2 3 4 5 Output 1 3 5 2 4 Input 8 -9 -2 -3 0 1 4 -5 6 Output -9 -5 -3 1 -2 0 4 6","solution":"def sort_odds_before_evens(lst): This function sorts the list such that all odd numbers come before the evens, with both groups of numbers sorted in ascending order. odds = sorted([num for num in lst if num % 2 != 0]) evens = sorted([num for num in lst if num % 2 == 0]) return odds + evens"},{"question":"There is a village with n houses arranged in a straight line. Each house can either be painted red, green, or blue. The cost of painting each house with a certain color is different and is represented by a 2D array costs where costs[i][0] is the cost of painting house i with red, costs[i][1] is the cost of painting house i with green, and costs[i][2] is the cost of painting house i with blue. You have to paint all the houses such that no two adjacent houses have the same color, and you want to minimize the total cost of painting the houses. Write a function that takes the number of houses n and an array costs as input and returns the minimum cost to paint all houses under the given constraints. Function Signature ```python def minCost(n: int, costs: List[List[int]]) -> int: ``` Input * The first line contains a single integer, n (1 ≤ n ≤ 1000) -- the number of houses. * The next n lines each contain three integers: costs[i][0], costs[i][1], costs[i][2] (1 ≤ costs[i][j] ≤ 1000) -- the cost to paint the i-th house with red, green, and blue respectively. Output * A single integer, the minimum cost to paint all the houses such that no two adjacent houses have the same color. Example Input ``` 3 17 2 17 16 16 5 14 3 19 ``` Output ``` 10 ``` Explanation One way to achieve this is: * Paint the first house with green, paint the second house with blue, and paint the third house with green. * Minimum cost is 2 + 5 + 3 = 10.","solution":"from typing import List def minCost(n: int, costs: List[List[int]]) -> int: if n == 0: return 0 # Initialize the DP table dp = [[0] * 3 for _ in range(n)] # Base case for the first house dp[0][0] = costs[0][0] dp[0][1] = costs[0][1] dp[0][2] = costs[0][2] # Fill the DP table for i in range(1, n): dp[i][0] = costs[i][0] + min(dp[i-1][1], dp[i-1][2]) dp[i][1] = costs[i][1] + min(dp[i-1][0], dp[i-1][2]) dp[i][2] = costs[i][2] + min(dp[i-1][0], dp[i-1][1]) # The answer will be the minimum of the last row of the DP table return min(dp[-1])"},{"question":"Palindromic Permutations Alice loves palindromes and permutations. She has a string s consisting of lowercase English letters. Alice wants to know if it\'s possible to rearrange the characters of the string to form a palindrome. Your task is to write a program that determines whether a permutation of the string can be a palindrome. A string is a palindrome if it reads the same forward and backward. For instance, \\"radar\\" and \\"level\\" are palindromes. Input The first line of input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 100,000) consisting of lowercase English letters only. Output For each test case, print \\"YES\\" on a single line if some permutation of s can form a palindrome. Otherwise, print \\"NO\\". Examples Input 3 civic ivicc hello Output YES YES NO Explanation 1. The string \\"civic\\" is already a palindrome. 2. The string \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. 3. The string \\"hello\\" cannot be rearranged to form any palindrome. Note To determine if a permutation of a given string can form a palindrome, we can make use of the fact that at most one character in the string can have an odd count. For example, the string \\"aabbc\\" can be rearranged to \\"abcba\\", while the string \\"aabbcc\\" can be rearranged to \\"abccba\\".","solution":"def can_form_palindromic_permutation(s): from collections import Counter counts = Counter(s) # A string can be rearranged to form a palindrome if at most one character has an odd count. odd_count = sum(1 for count in counts.values() if count % 2 != 0) return odd_count <= 1 def process_test_cases(t, cases): results = [] for case in cases: result = \\"YES\\" if can_form_palindromic_permutation(case) else \\"NO\\" results.append(result) return results"},{"question":"A robot is standing on an infinite grid at the point (0, 0). The robot can move in four directions: up, down, left, or right. Each of these moves is denoted as \'U\', \'D\', \'L\', and \'R\' respectively. You are given a string of moves made by the robot. Your task is to find the final position of the robot after executing all the moves described in the string and determine if the robot returns to the origin (0, 0). **Task** Given a string of moves, output the final coordinates of the robot and whether it finishes at the origin. **Input** Read the following input from standard input. - A single string representing the moves of the robot. **Output** Output the final coordinates of the robot as two space-separated integers followed by \\"YES\\" if the robot returns to the origin, and \\"NO\\" otherwise. **Constraints** - 1 ≤ length of the moves string ≤ 1000 **Input / output example** **Input example 1** UUDDLRLR **Output example 1** 0 0 YES **Input example 2** UDRLUDLR **Output example 2** 0 0 YES **Input example 3** UUUDDDRRLL **Output example 3** 0 0 YES **Input example 4** UUU **Output example 4** 0 3 NO **Explanation** In the first example, after following the sequence of moves \'UUDDLRLR\', the robot returns to the origin (0, 0). Therefore, the output is \\"0 0 YES\\". In the second example, after following the sequence of moves \'UDRLUDLR\', the robot again returns to the origin (0, 0). Therefore, the output is \\"0 0 YES\\". In the third example, after following the sequence of moves \'UUUDDDRRLL\', the robot returns to the origin (0, 0). Therefore, the output is \\"0 0 YES\\". In the fourth example, after following the sequence of moves \'UUU\', the robot ends up at the coordinates (0, 3) and does not return to the origin. Therefore, the output is \\"0 3 NO\\".","solution":"def final_position_and_origin(moves): Calculate the final position of the robot and determine if it returns to origin. Parameters: moves (str): A string representing the moves made by the robot. Returns: tuple: Final coordinates of the robot and a string \\"YES\\" if the robot returns to origin, otherwise \\"NO\\". x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return (x, y, \\"YES\\" if x == 0 and y == 0 else \\"NO\\")"},{"question":"Given a list of integers, write a function `findSubarrayWithTargetSum` to find the first continuous subarray that sums up to a given target sum. If such a subarray doesn\'t exist, return an empty array. Example 1: Input: ``` nums = [1, 2, 3, 7, 5] target = 12 ``` Output: ``` [3, 7, 2] ``` Explanation: The subarray [3, 7, 2] sums up to 12. Example 2: Input: ``` nums = [1, 2, 3, 4, 5] target = 9 ``` Output: ``` [2, 3, 4] ``` Explanation: The subarray [2, 3, 4] sums up to 9. Example 3: Input: ``` nums = [1, 2, 3, 4, 5] target = 20 ``` Output: ``` [] ``` Explanation: There is no subarray that sums up to 20.","solution":"def findSubarrayWithTargetSum(nums, target): Find the first continuous subarray that sums up to a given target sum. If such a subarray doesn\'t exist, return an empty array. curr_sum = 0 start = 0 sum_map = {} for i in range(len(nums)): curr_sum += nums[i] if curr_sum == target: return nums[start:i + 1] if (curr_sum - target) in sum_map: return nums[sum_map[curr_sum - target] + 1:i + 1] sum_map[curr_sum] = i return []"},{"question":"Alice and Bob are playing a game with an array of positive integers. They take turns, and in each turn, a player must remove any single element from the array. The game continues until the array is empty. The winner is determined by who removes the last element from the array. Alice always goes first. However, Alice and Bob have different strategies for playing the game: - Alice always removes the smallest available element. - Bob always removes the largest available element. Your task is to determine the winner of the game given the initial array. # Problem Given an array of positive integers, determine the winner of the game if both players play optimally with their respective strategies. # Input The input consists of two lines: - The first line contains a single integer `n` (1 ≤ `n` ≤ 1000), the number of integers in the array. - The second line contains `n` positive integers separated by spaces, representing the array. # Output Output \\"Alice\\" if Alice wins the game, otherwise output \\"Bob\\". # Constraints - The number of integers `n` in the array is at most 1000. - The array contains only positive integers. # Example **Input 1:** ``` 5 4 5 1 2 3 ``` **Output 1:** ``` Alice ``` **Explanation 1:** Alice removes 1, Bob removes 5, Alice removes 2, Bob removes 4, and Alice removes 3. Alice wins by removing the last element. **Input 2:** ``` 4 10 1 20 3 ``` **Output 2:** ``` Bob ``` **Explanation 2:** Alice removes 1, Bob removes 20, Alice removes 3, and Bob removes 10. Bob wins by removing the last element.","solution":"def determine_winner(n, array): Determines the winner of the game based on the game rules. Parameters: n (int): The number of integers in the array. array (list of int): The array of positive integers. Returns: str: \\"Alice\\" if Alice wins, otherwise \\"Bob\\". # Count the moves made by each player alice_moves = 0 bob_moves = 0 # Sort the array to simulate Alice removing the smallest and Bob removing the largest sorted_array = sorted(array) # Take turns: Alice starts first turn = 0 # Even index: Alice; Odd index: Bob while sorted_array: if turn % 2 == 0: # Alice\'s turn sorted_array.pop(0) # Remove the smallest element alice_moves += 1 else: # Bob\'s turn sorted_array.pop() # Remove the largest element bob_moves += 1 turn += 1 # Determine the winner if alice_moves > bob_moves: return \\"Alice\\" else: return \\"Bob\\""},{"question":"# Task You are given an array of integers. Your task is to find the number of pairs of integers that have an absolute difference of `k`. # Example For: ``` arr = [1, 5, 3, 4, 2] k = 2 ``` the output should be `3;` (the pairs are: (1, 3), (5, 3), and (4, 2)). For: ``` arr = [1, 2, 3, 4, 5] k = 1 ``` the output should be `4;` (the pairs are: (1, 2), (2, 3), (3, 4), and (4, 5)). # Input/Output - `[input]` integer array `arr` and integer `k` An array of integers and an integer k indicating the desired absolute difference between pairs. Constraints: `2 ≤ arr.length ≤ 50`, `1 ≤ arr[i] ≤ 100`, `1 ≤ k ≤ 100`. - `[output]` an integer value The count of pairs with an absolute difference of `k`.","solution":"def count_pairs_with_difference(arr, k): Returns the number of pairs with an absolute difference of k. Args: arr: list of integers k: integer, the absolute difference Returns: int: the number of pairs with absolute difference k count = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): if abs(arr[i] - arr[j]) == k: count += 1 return count"},{"question":"**Problem Statement:** You have a matrix of dimensions m x n that contains only 0s and 1s. We want to flip the minimum number of bits (from 0 to 1) such that every row and every column in the matrix has at least one 1. Write a function `minFlips(matrix: List[List[int]]) -> int` that takes in the 2D matrix and returns the minimum number of flips required to ensure every row and column has at least one 1. For example: ``` Example 1: Input: matrix = [ [0, 0, 0], [0, 0, 0], [0, 0, 0] ] Output: 3 Explanation: You need to flip at least one bit in each row and one bit in each column. A possible solution is to flip positions (0,0), (1,1), and (2,2). Example 2: Input: matrix = [ [1, 0], [0, 1] ] Output: 0 Explanation: Every row and column already have at least one 1, so no flips are needed. Example 3: Input: matrix = [ [0, 1, 0], [0, 0, 0], [0, 0, 0] ] Output: 2 Explanation: Flip (1,1), (2,2) so that each row and column has at least one 1. ``` **Your Task:** You need to implement the `minFlips` function that takes in a binary matrix and returns the minimum number of bits to flip to ensure every row and column has at least one 1. **Expected Time Complexity:** O(m * n) **Expected Auxiliary Space:** O(m + n) **Constraints:** - 1 <= m, n <= 1000 - matrix[i][j] is 0 or 1","solution":"def minFlips(matrix): m = len(matrix) n = len(matrix[0]) # Find rows and columns that do not contain any 1s rows_with_no_ones = set() cols_with_no_ones = set() for i in range(m): if not any(matrix[i][j] == 1 for j in range(n)): rows_with_no_ones.add(i) for j in range(n): if not any(matrix[i][j] == 1 for i in range(m)): cols_with_no_ones.add(j) # We need at least max number of rows with no 1s and # columns with no 1s to be flipped return max(len(rows_with_no_ones), len(cols_with_no_ones))"},{"question":"In a fictional city named Arithmetica, there is a unique numeric street system. Each street is designated by a positive integer and each building on a street has an address which is a positive integer. Every street i is connected to the street i + 1 by a numeric portal if and only if the greatest common divisor (GCD) of the addresses of the two streets is exactly 1. Additionally, the city\'s infrastructure requires computation of how many such portals can be established for a given range of streets. Your task is to determine the number of portals that can be established between consecutive streets for a given range from 1 to N. Input: - The first line contains an integer N, the number of streets in Arithmetica (1 ≤ N ≤ 10^6). - The second line contains an array of N integers, where the i-th integer represents the address of the i-th street (1 ≤ address ≤ 10^6). Output: - Print a single integer, the number of portals that can be established between consecutive streets within the range from 1 to N. SAMPLE INPUT 5 3 5 7 10 14 SAMPLE OUTPUT 3 Explanation: - Street 1 (address 3) and Street 2 (address 5) have GCD(3, 5) = 1, so a portal can be established. - Street 2 (address 5) and Street 3 (address 7) have GCD(5, 7) = 1, so a portal can be established. - Street 3 (address 7) and Street 4 (address 10) have GCD(7, 10) ≠ 1, so no portal can be established. - Street 4 (address 10) and Street 5 (address 14) have GCD(10, 14) ≠ 1, so no portal can be established. Hence, the total number of portals that can be established is 3.","solution":"import math def count_portals(N, addresses): Returns the number of portals that can be established between consecutive streets based on the given addresses. # Initialize the portal count to 0 portal_count = 0 # Iterate through the street addresses to check consecutive pairs for i in range(N - 1): if math.gcd(addresses[i], addresses[i + 1]) == 1: portal_count += 1 return portal_count"},{"question":"Example Input 4 3 L2 Output 7 6 5 8 9 10 1 2 3 4 11 12","solution":"def matrix_permutation(n, m, matrix, permutation): Reorder the matrix based on the provided permutation. Args: n (int): Number of rows. m (int): Number of columns. matrix (list of lists): The original matrix. permutation (list of int): The permutation list. Returns: list of lists: The permuted matrix. flat_matrix = [item for row in matrix for item in row] new_flat_matrix = [flat_matrix[perm - 1] for perm in permutation] new_matrix = [] for i in range(n): new_matrix.append(new_flat_matrix[i*m:(i+1)*m]) return new_matrix"},{"question":"# Task Given an integer `n`, return the nth prime number. # Example For `n = 1`, the result should be `2`. The first prime number is `2`. For `n = 5`, the result should be `11`. The fifth prime number is `11`. For `n = 10`, the result should be `29`. The tenth prime number is `29`. # Input/Output - `[input]` integer `n` The position of the prime number in the series, `1 ≤ n ≤ 1000`. - `[output]` an integer The nth prime number.","solution":"def nth_prime(n): Returns the nth prime number. if n <= 0: return None primes = [] candidate = 2 while len(primes) < n: is_prime = True for prime in primes: if prime * prime > candidate: break if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return primes[-1]"},{"question":"A popular coding platform hosts a number of competitions throughout the year. One such competition is designed to test the participants\' skills in creating complex data structures. This competition task involves maintaining a list of integers, supporting specific operations on this list, and answering certain queries efficiently. The list starts empty, and participants need to handle the following two types of operations: 1. **Insert an integer into the list**: - `1 x` where `x` is the integer to be inserted. 2. **Compute the product of a subarray**: - `2 a b` which returns the product of all elements in the subarray starting from index `a` to index `b` (inclusive). The result should be given modulo 1000000007. The goal is to handle these operations and queries efficiently, given the size limits of the operations. # Input The input consists of several cases T (1 ≤ T ≤ 3). The first line of each case contains a positive integer M (1 ≤ M ≤ 50000) specifying the number of operations/queries. The next M lines each contain one operation, either of the form `1 x` or of the form `2 a b`. # Output For every query of the form `2 a b`, you have to print the answer modulo 1000000007 in a separate line. # Sample Input ``` 1 5 1 4 1 5 1 3 2 1 2 2 1 3 ``` # Sample Output ``` 20 60 ``` Explanation: 1. Insert `4` into the list, the list is now `[4]`. 2. Insert `5` into the list, the list is now `[4, 5]`. 3. Insert `3` into the list, the list is now `[4, 5, 3]`. 4. Query the product of elements from index `1` to `2`, which is `4 * 5 = 20`. 5. Query the product of elements from index `1` to `3`, which is `4 * 5 * 3 = 60`.","solution":"MOD = 1000000007 def handle_operations(operations): result = [] array = [] for operation in operations: parts = operation.split() if parts[0] == \'1\': # Operation to insert an integer x = int(parts[1]) array.append(x) elif parts[0] == \'2\': # Operation to compute the product of a subarray a = int(parts[1]) b = int(parts[2]) product = 1 for i in range(a - 1, b): product = (product * array[i]) % MOD result.append(product) return result def process_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) idx = 1 results = [] for _ in range(t): m = int(lines[idx]) operations = lines[idx + 1: idx + 1 + m] results.extend(handle_operations(operations)) idx += 1 + m return results"},{"question":"Your task is to write a function `decode_morse` that takes a string representing a sequence in Morse code and returns the decoded English sentence. Consider the following Morse code rules: - A space `\' \'` separates letters within a word. - Three spaces `\' \'` separate words. Here\'s the Morse code dictionary to use: ```plaintext { \'A\': \'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\', \'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\', \'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\', \'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\': \'.--\', \'X\': \'-..-\', \'Y\': \'-.--\', \'Z\': \'--..\', \'1\': \'.----\', \'2\': \'..---\', \'3\': \'...--\', \'4\': \'....-\', \'5\': \'.....\', \'6\': \'-....\', \'7\': \'--...\', \'8\': \'---..\', \'9\': \'----.\', \'0\': \'-----\', \',\': \'--..--\',\'.\': \'.-.-.-\',\'?\': \'..--..\',\'/\': \'-..-.\', \'-\': \'-....-\', \'(\': \'-.--.\', \')\': \'-.--.-\',\'&\': \'.-...\' } ``` For example: ```plaintext decode_morse(\\".... . -.-- .--- ..- -.. .\\") returns \\"HEY JUDE\\" decode_morse(\\"--. --- --- -.. -- --- .-. -. .. -. --.\\") returns \\"GOOD MORNING\\" ``` Write your solution to handle such conversions accurately.","solution":"def decode_morse(morse_code): MORSE_CODE_DICT = { \'.-\': \'A\', \'-...\': \'B\', \'-.-.\': \'C\', \'-..\': \'D\', \'.\': \'E\', \'..-.\': \'F\', \'--.\': \'G\', \'....\': \'H\', \'..\': \'I\', \'.---\': \'J\', \'-.-\': \'K\', \'.-..\': \'L\', \'--\': \'M\', \'-.\': \'N\', \'---\': \'O\', \'.--.\': \'P\', \'--.-\': \'Q\', \'.-.\': \'R\', \'...\': \'S\', \'-\': \'T\', \'..-\': \'U\', \'...-\': \'V\', \'.--\': \'W\', \'-..-\': \'X\', \'-.--\': \'Y\', \'--..\': \'Z\', \'-----\': \'0\', \'.----\': \'1\', \'..---\': \'2\', \'...--\': \'3\', \'....-\': \'4\', \'.....\': \'5\', \'-....\': \'6\', \'--...\': \'7\', \'---..\': \'8\', \'----.\': \'9\', \'--..--\': \',\', \'.-.-.-\': \'.\', \'..--..\': \'?\', \'-..-.\': \'/\', \'-....-\': \'-\', \'-.--.\': \'(\', \'-.--.-\': \')\', \'.-...\': \'&\' } # Splitting the morse code by three spaces to separate words words = morse_code.split(\' \') decoded_message = [] for word in words: # Splitting the word by single space to separate each letter letters = word.split(\' \') decoded_word = \'\'.join(MORSE_CODE_DICT[letter] for letter in letters) decoded_message.append(decoded_word) return \' \'.join(decoded_message)"},{"question":"A forest is a collection of trees. Alice is a caretaker of a special forest where each tree has a distinct number of fruits. Alice wants to count the forest fruits in specific ranges but needs your help to do it efficiently. Given the fruits on the trees in an array and multiple queries which each ask for the sum of fruits in a specific range, determine the sums for each query. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) representing the number of trees. - The second line contains n integers, where the i-th integer represents the number of fruits on the i-th tree (1 ≤ number of fruits on each tree ≤ 1,000). - The third line contains an integer q (1 ≤ q ≤ 100,000) representing the number of queries. - The next q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n) representing the range (1-based index) in which Alice wants to count the total fruits. Output: - For each query, print the sum of fruits in the specified range. Example: Input: 5 4 7 2 9 5 3 1 3 2 4 1 5 Output: 13 18 27 Explanation: - The sum of fruits from tree 1 to tree 3 is 4 + 7 + 2 = 13. - The sum of fruits from tree 2 to tree 4 is 7 + 2 + 9 = 18. - The sum of fruits from tree 1 to tree 5 is 4 + 7 + 2 + 9 + 5 = 27.","solution":"def preprocess_fruits(fruits): Preprocesses the fruits list to create a prefix sums array. prefix_sums = [0] * (len(fruits) + 1) for i in range(1, len(fruits) + 1): prefix_sums[i] = prefix_sums[i - 1] + fruits[i - 1] return prefix_sums def query_sum(prefix_sums, l, r): Computes the sum of fruits in the range [l, r] using the prefix sums array. l and r are 1-based indices. return prefix_sums[r] - prefix_sums[l - 1] def count_fruits(n, fruits, q, queries): Processes multiple queries to count the fruits in specified ranges. Parameters: n (int): Number of trees. fruits (list): List of fruits on each tree. q (int): Number of queries. queries (list of tuples): List of queries with (l, r) ranges. Returns: List of sums for each query. prefix_sums = preprocess_fruits(fruits) results = [] for l, r in queries: results.append(query_sum(prefix_sums, l, r)) return results"},{"question":"Given two lists of integers L1 and L2 of the same length N. Write a function that returns a new list containing the element-wise sum of the integers in L1 and L2. Example 1: Input: L1 = [1, 2, 3], L2 = [4, 5, 6] Output: [5, 7, 9] Explanation: The element-wise sum is calculated as [1+4, 2+5, 3+6] = [5, 7, 9]. Example 2: Input: L1 = [10, 20, 30], L2 = [1, 2, 3] Output: [11, 22, 33] Explanation: The element-wise sum is calculated as [10+1, 20+2, 30+3] = [11, 22, 33]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function elementWiseSum() which takes two lists of integers L1 and L2 as input parameters and returns a new list containing their element-wise sum. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^5 -10^9 <= elements of L1, L2 <= 10^9","solution":"def elementWiseSum(L1, L2): Returns a new list containing the element-wise sum of the integers in L1 and L2. return [a + b for a, b in zip(L1, L2)]"},{"question":"Write a function that takes an integer `n` and returns a list of all palindromic numbers less than `n`. A palindromic number is a number that remains the same when its digits are reversed. Example # Input `n = 200` # Output `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191]` # Explanation Palindromic numbers read the same forward and backward: - For instance, `121` is a palindrome, as reversing the digits results in `121`. - Number `200` is not included in the sequence since we only consider numbers less than `200`. --- Write a function: ```python def find_palindromes(n: int) -> list: ``` # Constraints - `1 <= n <= 10000`","solution":"def find_palindromes(n: int) -> list: Returns a list of all palindromic numbers less than n. def is_palindrome(x: int) -> bool: s = str(x) return s == s[::-1] return [x for x in range(n) if is_palindrome(x)]"},{"question":"Given an array of integers, write a function that returns the maximum sum of any contiguous subarray of the given array. Detailed Description: 1. A contiguous subarray is a subarray that appears in consecutive positions within the original array. 2. The function should find the contiguous subarray that has the largest sum and return that sum. 3. If the array contains only negative numbers, the function should return the maximum negative number. 4. The function should be efficient and handle large input arrays gracefully. Function signature: ```python def max_contiguous_subarray_sum(arr: List[int]) -> int: ``` Input: - A list of integers `arr`, where `1 <= len(arr) <= 10^5` and each integer is within the range `-10^4 <= arr[i] <= 10^4`. Output: - An integer representing the maximum sum of any contiguous subarray. Examples: ```python assert max_contiguous_subarray_sum([1, -2, 3, 4, -1, 2, 1, -5, 4]) == 9 # Explanation: The contiguous subarray with the maximum sum is [3, 4, -1, 2, 1], which has a sum of 9. assert max_contiguous_subarray_sum([-2, -3, -1, -4]) == -1 # Explanation: The largest sum among all subarrays is achieved by the single element subarray [-1], which has a sum of -1. assert max_contiguous_subarray_sum([5, 4, -1, 7, 8]) == 23 # Explanation: The contiguous subarray with the maximum sum is [5, 4, -1, 7, 8], which has a sum of 23. ``` # Constraints: - The function must run in `O(n)` time complexity, where `n` is the length of the input array. - Use the Kadane’s algorithm or an equivalent efficient algorithm to solve this problem.","solution":"from typing import List def max_contiguous_subarray_sum(arr: List[int]) -> int: max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"A group of friends are playing a game where each participant writes down a number on a piece of paper. At the end of the game, they want to calculate the total score by adding together the numbers on each piece of paper. However, if two or more pieces of paper have the same number, those numbers should be considered only once in the total score. Write a function to compute the total score. Example 1: Input: N = 5 numbers = [1, 2, 2, 3, 4] Output: 10 Explanation: The numbers on the pieces of paper are 1, 2, 2, 3, 4. The distinct numbers are 1, 2, 3, 4. The total score is 1 + 2 + 3 + 4 = 10. Example 2: Input: N = 6 numbers = [5, 5, 5, 5, 5, 5] Output: 5 Explanation: The numbers on the pieces of paper are 5, 5, 5, 5, 5, 5. The distinct number is 5. The total score is 5. Your Task: You only need to complete the function calculateTotalScore that takes a list of integers \'numbers\' and its length \'N\' and returns the total score according to the rules of the game. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^{6} 1 ≤ numbers[i] ≤ 10^{6}","solution":"def calculateTotalScore(N, numbers): Returns the total score considering only unique numbers. Parameters: N : int : Number of elements in the list numbers : list : List of integers on the pieces of paper Returns: int : The total score unique_numbers = set(numbers) return sum(unique_numbers)"},{"question":"You are given a list of integers where each integer represents a height of a building. The buildings are lined up in such a way that water can be trapped between them when it rains. You need to calculate the total amount of water trapped. Example 1: Input: 6 0 1 0 2 1 0 Output: 1 Explanation: In this case, 1 unit of water can be trapped between the buildings at indices 2 and 4. Example 2: Input: 5 4 2 0 3 2 Output: 7 Explanation: Here, 7 units of water can be trapped: 4 units between index 0 and 3, and 3 units between index 3 and 4. Your Task: You don\'t need to read or print anything. Your task is to complete the function trapWater() which takes an array height[] denoting the height of buildings and returns the total water trapped. Constraints: 1 <= n <= 1000 0 <= height[i] <= 100","solution":"def trapWater(height): Calculate the amount of water that can be trapped. :param height: List of integers representing the heights of buildings :return: Integer representing the total water trapped if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water"},{"question":"Bob is organizing a marathon and wants to provide live updates to the viewers. He decides to create a leaderboard based on live race data. The leaderboard should show the top runners based on their current positions in the race. Positions are updated periodically, and each update provides the current position of each runner. Your task is to implement a function that processes these position updates and maintains the leaderboard. The leaderboard should always show the top k runners, in order of their positions (1st place, 2nd place, etc.). # Function Signature ```python def update_leaderboard(race_positions: List[int], k: int) -> List[int]: ``` # Input - `race_positions`: A list of integers where the index represents the runner\'s ID (0-indexed) and the value at each index represents the current position of that runner. - `k`: An integer representing the number of top positions to display on the leaderboard. # Output - A list of integers representing the IDs of the top k runners, in the order of their current positions. # Constraints - 1 ≤ len(race_positions) ≤ 1000 - 1 ≤ k ≤ len(race_positions) - Each runner will have a unique position. # Example ```python # Example 1 race_positions = [5, 3, 1, 4, 2] k = 3 # Output: [2, 4, 1] # Runner 2 is in 1st place, runner 4 is in 2nd place, and runner 1 is in 3rd place. # Example 2 race_positions = [6, 2, 8, 3, 1, 5, 7, 4] k = 5 # Output: [4, 1, 3, 7, 5] # Runner 4 is in 1st place, runner 1 is in 2nd place, runner 3 is in 3rd place, runner 7 is in 4th place, runner 5 is in 5th place. ``` # Note The function should efficiently maintain and update the leaderboard for each new list of race positions provided.","solution":"from typing import List def update_leaderboard(race_positions: List[int], k: int) -> List[int]: Generates a leaderboard showing the top k runners based on their current positions. :param race_positions: List of integers where index represents the runner\'s ID and the value represents their current position. :param k: Number of top positions to display on the leaderboard. :return: A list of runner IDs representing the top k runners, in the order of their positions. # Create a list of tuples (runner_id, position) and sort by position sorted_positions = sorted(enumerate(race_positions), key=lambda x: x[1]) # Extract the runner IDs of the top k positions leaderboard = [runner_id for runner_id, position in sorted_positions[:k]] return leaderboard"},{"question":"A group of students is planning a monthly project meeting, and they have decided to split the total number of pages they need to read between two consecutive meetings. Each student will read one page at a time, and they want to make sure they read the same number of pages each day. Given the total number of pages `p` they need to read and the number of days `d` over which they can split the reading, write a program that will determine the number of pages each student will read each day and any left-over pages that need to be read on the final day. -----Input----- The first line of the input contains two integers `p` and `d` (`1 ≤ p, d ≤ 10^6`) — the total number of pages they need to read and the number of days over which they plan to distribute the readings. -----Output----- Output two integers: the number of pages each student will read each day and the number of pages they will read on the final day. -----Examples----- Input 50 7 Output 7 1 Input 20 5 Output 4 0 Input 13 4 Output 3 1 -----Note----- In the first example, students need to read 50 pages over 7 days. If they read 7 pages each day, they will have read 49 pages in 7 days, and the remaining 1 page will be read on the final day. In the second example, students need to read 20 pages over 5 days. If they read 4 pages each day, they will have read all 20 pages in exactly 5 days, and there will be no remaining pages. In the third example, students need to read 13 pages over 4 days. If they read 3 pages each day, they will have read 12 pages in 4 days, and the remaining 1 page will be read on the final day.","solution":"def pages_per_day_and_remainder(p, d): Given the total number of pages `p` and the number of days `d`, this function returns a tuple containing the number of pages each student will read each day and the number of pages that need to be read on the final day. Parameters: p (int): total number of pages d (int): number of days Returns: (int, int): number of pages per day and remaining pages pages_per_day = p // d remainder = p % d return pages_per_day, remainder"},{"question":"You are given a set of n coins, each coin showing either heads or tails. You want to flip some coins so that no two adjacent coins show heads (i.e., no two consecutive coins have heads on them). Your task is to determine the minimum number of coin flips required to achieve this configuration. -----Input----- The first line contains one integer n (1 le n le 100000) — the number of coins. The second line contains a string of length n consisting of characters \'H\' (for heads) and \'T\' (for tails), representing the initial state of the coins. -----Output----- Print one integer — the minimum number of coin flips required. -----Example----- Input 5 TTTHT Output 0 Input 6 HHHHHH Output 3 -----Note----- In the first example, no flips are needed because no two adjacent coins show heads. In the second example, one way to achieve the desired configuration is by flipping the second, fourth, and sixth coins, turning the string into \\"HTHTHT\\". Hence, the minimum number of flips is 3.","solution":"def min_flips_to_no_adjacent_heads(n, coins): Given the number of coins and their initial states, return the minimum number of flips required so that no two adjacent coins show heads. flips = 0 for i in range(1, n): if coins[i] == \'H\' and coins[i - 1] == \'H\': flips += 1 if i % 2 == 1: coins = coins[:i] + \'T\' + coins[i + 1:] else: coins = coins[:i - 1] + \'T\' + coins[i:] return flips"},{"question":"John is organizing a robotics competition for his students. As part of the preparation, he needs to set up a field with a rectangular grid where the robots will navigate. The grid is of size n x m, and each cell has an integer value representing the difficulty of that cell. John wants to place the robots on the grid such that they cover all cells with minimal total difficulty. The robots can only move in the four cardinal directions (up, down, left, right) and cannot visit any cell more than once. Help John determine the minimal total difficulty to cover all grid cells using exactly one robot. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 100) representing the size of the grid. Each of the next n lines contains m space-separated integers di,j (0 ≤ di,j ≤ 1000) representing the difficulty of the cells. Output: Print one integer, the minimal total difficulty to cover the entire grid using one robot. Examples: Input: 2 2 1 2 3 4 Output: 10 Input: 3 3 1 1 1 1 2 1 1 1 1 Output: 10 Explanation: In the first example, the robot can start at cell (0,0) with difficulty 1 and then follow the path (right, right, down, down) to cover all cells, resulting in a total difficulty of 1 + 2 + 4 + 3 = 10. In the second example, the robot can start at cell (0,0) with difficulty 1 and follow a path that covers all cells such as (down, down, right, up, right, down, left, left, up) resulting in a total difficulty of 10.","solution":"def min_difficulty(n, m, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y, visited): return 0 <= x < n and 0 <= y < m and not visited[x][y] def dfs(x, y, visited, current_sum, remain_cells): if remain_cells == 1: return current_sum + grid[x][y] visited[x][y] = True min_sum = float(\'inf\') for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, visited): min_sum = min(min_sum, dfs(nx, ny, visited, current_sum + grid[x][y], remain_cells - 1)) visited[x][y] = False return min_sum minimal_difficulty = float(\'inf\') for i in range(n): for j in range(m): visited = [[False] * m for _ in range(n)] minimal_difficulty = min(minimal_difficulty, dfs(i, j, visited, 0, n * m)) return minimal_difficulty # Example usage n, m = 2, 2 grid = [[1, 2], [3, 4]] print(min_difficulty(n, m, grid)) # Output: 10 n, m = 3, 3 grid = [[1, 1, 1], [1, 2, 1], [1, 1, 1]] print(min_difficulty(n, m, grid)) # Output: 10"},{"question":"You are tasked with implementing a parking lot management system. The parking lot can be represented as a grid of size M x N. Each cell in the grid can either be empty (denoted by \'.\') or occupied by a car (denoted by \'C\'). Initially, all cells are empty. You will be given Q operations to perform on the parking lot. There are three types of operations: 1. Park a car at a given position: `P x y`, where x and y are the coordinates of the cell where you want to park the car. 2. Remove a car from a given position: `R x y`, where x and y are the coordinates of the cell from which you want to remove the car. 3. Query the state of the parking lot: `Q` with no coordinates. This operation will output the current state of the parking lot grid. You need to process these operations and maintain the grid accordingly. If you try to park a car in an already occupied cell, or remove a car from an empty cell, ignore that operation. ------ Input ------ First Line contains two integers M and N, denoting the dimensions of the parking lot grid. Second Line contains an integer Q, denoting the number of operations. Next Q lines contain an operation of one of the three types described above. ------ Output ------ For each query operation (denoted by \'Q\'), print the current state of the parking lot grid in M lines, each containing N characters. ------ Constraints ------ 1 ≤ M, N ≤ 100 1 ≤ Q ≤ 10^{4} ------ Example Input ------ 3 3 5 P 1 1 P 0 0 Q R 1 1 Q ------ Example Output ------ C.. ... .C. C.. ... ... ------ Explanation ------ After the first operation, a car is parked at (1, 1). After the second operation, a car is parked at (0, 0). The third operation is a query, so we print the state of the parking lot. The fourth operation removes the car from (1, 1). The fifth operation is a query, so we print the updated state of the parking lot.","solution":"class ParkingLot: def __init__(self, M, N): self.M = M self.N = N self.grid = [[\'.\' for _ in range(N)] for _ in range(M)] def park_car(self, x, y): if self.grid[x][y] == \'.\': self.grid[x][y] = \'C\' def remove_car(self, x, y): if self.grid[x][y] == \'C\': self.grid[x][y] = \'.\' def query(self): return [\'\'.join(row) for row in self.grid] def process_operations(M, N, operations): parking_lot = ParkingLot(M, N) results = [] for operation in operations: parts = operation.split() if parts[0] == \'P\': x = int(parts[1]) y = int(parts[2]) parking_lot.park_car(x, y) elif parts[0] == \'R\': x = int(parts[1]) y = int(parts[2]) parking_lot.remove_car(x, y) elif parts[0] == \'Q\': results.append(parking_lot.query()) return results"},{"question":"David is a curious mathematician. He loves examining properties of numbers and poses puzzles for his friends. Today, David asks: how many integers in the interval [L, R] are perfect squares, and what is the largest perfect square within this interval? Write a program that answers David\'s question, helping him validate his observations. -----Input----- The input contains two integers L and R (1 le L le R < 10^{18}). -----Output----- The first line should contain the number of perfect squares in the interval [L, R]. The second line should contain the largest perfect square within this interval, or -1 if no perfect square exists. -----Examples----- Sample Input 1: 1 100 Sample Output 1: 10 100 Sample Input 2: 50 75 Sample Output 2: 1 64","solution":"import math def perfect_squares(L, R): Returns the number of perfect squares in the interval [L, R], and the largest perfect square within this interval, or -1 if no perfect square exists. # Count the number of perfect squares in the interval [L, R] start = math.ceil(math.sqrt(L)) end = math.floor(math.sqrt(R)) count = max(0, end - start + 1) # Find the largest perfect square within this interval largest_perfect_square = end ** 2 if count > 0 else -1 return count, largest_perfect_square"},{"question":"Chef has an array of n integers. Initially, each element in the array is sorted in non-decreasing order. Chef can perform exactly one operation: select any subsegment of the array (continuous subsequence) and reverse it. After performing the operation, Chef wants to check if the entire array is sorted in non-decreasing order. Write a program to help Chef determine if there exists at least one subsegment in the array such that reversing that subsegment will result in the entire array being sorted in non-decreasing order. ------ Input ------ The first line contains an integer n denoting the number of elements in the array. The next line contains n integers separated by a space, denoting the elements of the array. ------ Output ------ Print \\"YES\\" if there exists such a subsegment, otherwise print \\"NO\\". ------ Constraints ------ 2 ≤ n ≤ 10^5 1 ≤ a_i ≤ 10^9 ------ Sample Input 1 ------ 5 1 3 5 4 6 ------ Sample Output 1 ------ YES ------ Explanation 1 ------ If we reverse the subsegment `[5, 4]`, we get the array `[1, 3, 4, 5, 6]` which is sorted in non-decreasing order. ------ Sample Input 2 ------ 5 1 5 3 4 6 ------ Sample Output 2 ------ NO ------ Explanation 2 ------ There is no subsegment that can be reversed to make the array sorted in non-decreasing order.","solution":"def can_be_sorted_by_reversing_subsegment(n, arr): Return \\"YES\\" if there exists at least one subsegment in the array such that reversing that subsegment will result in the entire array being sorted in non-decreasing order. Otherwise, return \\"NO\\". # Check if array is already sorted if arr == sorted(arr): return \\"YES\\" # Identifying the first out-of-order segment. start = 0 while start < n - 1 and arr[start] <= arr[start + 1]: start += 1 # If the whole array is already sorted, we return YES if start == n - 1: return \\"YES\\" # Identify the end of the out-of-order segment end = start while end < n - 1 and arr[end] > arr[end + 1]: end += 1 # Reverse the out-of-order segment to_reverse = arr[start:end + 1] to_reverse.reverse() # Resulting array after reversing the identified segment new_arr = arr[:start] + to_reverse + arr[end + 1:] # Check if the resulting array is sorted if new_arr == sorted(arr): return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers arr of size n, your task is to determine if it is possible to rearrange the elements of the array such that no two adjacent elements have the same value. If possible, return one such rearrangement, otherwise return an empty array. Example 1: Input: n = 6 arr = {1, 1, 2, 2, 3, 3} Output: {1, 2, 1, 3, 2, 3} Explanation: One possible rearrangement is {1, 2, 1, 3, 2, 3}. No two adjacent elements are the same. Example 2: Input: n = 3 arr = {1, 1, 1} Output: {} Explanation: It is not possible to rearrange the elements to satisfy the condition. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rearrangeArray() which takes an integer n and an array of integers arr respectively and returns an array representing the rearranged elements or an empty array if no valid rearrangement is possible. Expected Time Complexity: O(n log n) Expected Space Complexity: O(n) Constraints: 1 <= n <= 10^5 1 <= arr[i] <= 10^9","solution":"from collections import Counter import heapq def rearrangeArray(n, arr): if n == 1: return arr # Count frequency of each element counter = Counter(arr) max_freq = max(counter.values()) # If the highest frequency element is more than (n+1)//2, return empty list if max_freq > (n + 1) // 2: return [] # Create a max heap based on the frequency counts max_heap = [] for num, freq in counter.items(): heapq.heappush(max_heap, (-freq, num)) result = [0] * n # Fill the elements in the result array in a zigzag manner index = 0 while max_heap: freq, num = heapq.heappop(max_heap) freq = -freq # convert back to positive frequency for _ in range(freq): if index >= n: index = 1 # move to the next available odd position result[index] = num index += 2 return result"},{"question":"In a dreamy village known as CodeLand, there is a quiet, enchanted forest. This forest has n magical trees, each with its own unique height. Local legend has it that these trees can grant wishes, but only under a certain condition: if you can find two trees whose height differences match exactly with a given number k. As a skilled coder and wish seeker, your task is to determine if there exist two distinct trees in the forest whose height difference is exactly k. If such a pair of trees exists, you will be able to make a wish. Input The first line contains two positive integers: n (1 ≤ n ≤ 2·10^5) and k (1 ≤ k ≤ 10^9). The second line contains n positive integers representing the heights of the trees in the forest. Output Print \\"Yes\\" if there are two distinct trees with a height difference of exactly k, otherwise print \\"No\\". Examples Input 5 3 1 5 3 8 6 Output Yes Input 4 10 1 2 3 4 Output No Note In the first sample, trees with the heights 1 and 4 differ by exactly 3. In the second sample, no two trees have a height difference of exactly 10. Hence, there is no pair satisfying the condition.","solution":"def can_make_wish(n, k, heights): Function to check if there are two distinct trees with a height difference of exactly k. :param n: Number of trees in the forest :param k: The desired height difference :param heights: List of integers representing the heights of the trees :return: \'Yes\' if such a pair exists, otherwise \'No\' height_set = set(heights) for height in heights: if (height + k) in height_set or (height - k) in height_set: return \\"Yes\\" return \\"No\\""},{"question":"You are given a string of up to 100 lowercase English letters. You need to check if the string is a palindrome by considering only the alphabetic characters and ignoring any non-alphabetic characters. -----Input----- The first line contains one integer t (1 le t le 50), the number of test cases. Each of the next t lines contains a single string which can include alphabetic and non-alphabetic characters. -----Output----- For each test case, print \\"YES\\" if the string is a palindrome considering only the alphabetic characters and ignoring any non-alphabetic characters, otherwise print \\"NO\\". -----Examples----- Input 3 a.b,a race car hello Output YES YES NO -----Note----- In the first test case, after removing non-alphabetic characters, the string becomes \\"aba\\", which is a palindrome. In the second test case, the string \\"race car\\" becomes \\"racecar\\", which is also a palindrome. In the third test case, the string \\"hello\\" remains the same, which is not a palindrome.","solution":"def is_palindrome(s): Checks if the given string is a palindrome considering only alphabetic characters. # Filter only alphabetic characters and convert them to lowercase filtered_s = \'\'.join(filter(str.isalpha, s)).lower() # Check if the filtered string is the same when reversed return filtered_s == filtered_s[::-1] def check_palindromes(test_cases): For each test case, check if the string is a palindrome and return \\"YES\\" or \\"NO\\". results = [] for s in test_cases: if is_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A company uses special alphanumeric codes to track their products. Each code is a string composed of lowercase letters and digits. The company wants to perform inventory auditing and needs to identify the total number of unique codes for certain products. A code is considered unique if it doesn\'t appear more than once. Write a function to help the company find the number of unique codes from a given list of codes. Input: First line contains an integer N, the number of product codes. Each of the next N lines contains a product code (a string of lowercase letters and digits). Output: One integer representing the number of unique codes. Constraints: 1 ≤ N ≤ 100 The length of each product code ≤ 10 SAMPLE INPUT 6 abc123 xyz789 abc123 def456 xyz789 ghi012 SAMPLE OUTPUT 2","solution":"def count_unique_codes(n, codes): Returns the number of unique product codes from the given list of codes. :param n: Integer, number of product codes. :param codes: List of strings, each string is a product code. :return: Integer, count of unique product codes. from collections import Counter code_counts = Counter(codes) unique_count = sum(1 for count in code_counts.values() if count == 1) return unique_count"},{"question":"A software company implements a system for monitoring user activities on its platform. The platform has a tree structure representing a hierarchy of different modules, where each module is connected to its parent module. Each module has an associated activity score which represents the user engagement on that module. An activity score is a positive integer. You are given the hierarchy of the modules in terms of n nodes (modules) numbered from 1 to n, connected by n-1 bidirectional roads. You are also given q queries, each query asking for the maximum activity score on the path between two given modules. **Input:** The first line contains two integers n and q (2 ≤ n ≤ 105, 1 ≤ q ≤ 105). The second line contains n space-separated integers representing the activity scores of the modules a1, a2, ..., an (1 ≤ ai ≤ 109). The next n-1 lines contain two integers u and v, meaning that there is a road between module u and module v (1 ≤ u, v ≤ n). The next q lines contain two integers u and v, representing the modules to find the path between during the query (1 ≤ u, v ≤ n). **Output:** For each query, output the maximum activity score on the path between module u and module v. **Example:** *Input:* ``` 5 3 1 5 3 2 4 1 2 1 3 2 4 2 5 1 4 4 5 3 4 ``` *Output:* ``` 5 5 5 ``` *Input:* ``` 4 2 8 6 7 5 1 2 1 3 1 4 2 3 2 4 ``` *Output:* ``` 8 8 ```","solution":"class TreeNode: def __init__(self, index, score): self.index = index self.score = score self.children = [] self.parent = None def build_tree(n, scores, edges): nodes = [TreeNode(i, scores[i-1]) for i in range(1, n+1)] for u, v in edges: nodes[u-1].children.append(nodes[v-1]) nodes[v-1].children.append(nodes[u-1]) return nodes def preprocess_lca(n, nodes): depth = [0] * n lca_parent = [[-1] * n for _ in range(n)] max_scores = [[float(\'-inf\')] * n for _ in range(n)] root = nodes[0] # Take an arbitrary root def dfs(node, par): for child in node.children: if child.index != par: depth[child.index - 1] = depth[node.index - 1] + 1 lca_parent[child.index - 1][0] = node.index - 1 max_scores[child.index - 1][0] = max(node.score, child.score) dfs(child, node.index) dfs(root, -1) for j in range(1, n): for i in range(n): if lca_parent[i][j-1] != -1: lca_parent[i][j] = lca_parent[lca_parent[i][j-1]][j-1] max_scores[i][j] = max(max_scores[i][j-1], max_scores[lca_parent[i][j-1]][j-1]) return depth, lca_parent, max_scores def query_max_score(u, v, depth, lca_parent, max_scores): if depth[u] < depth[v]: u, v = v, u max_score = float(\'-inf\') log = 1 while (1 << log) <= depth[u]: log += 1 log -= 1 for i in range(log, -1, -1): if depth[u] - (1 << i) >= depth[v]: max_score = max(max_score, max_scores[u][i]) u = lca_parent[u][i] if u == v: return max_score for i in range(log, -1, -1): if lca_parent[u][i] != -1 and lca_parent[u][i] != lca_parent[v][i]: max_score = max(max_score, max_scores[u][i], max_scores[v][i]) u = lca_parent[u][i] v = lca_parent[v][i] max_score = max(max_score, max_scores[u][0], max_scores[v][0]) return max_score def solve(n, q, scores, edges, queries): nodes = build_tree(n, scores, edges) depth, lca_parent, max_scores = preprocess_lca(n, nodes) result = [] for u, v in queries: result.append(query_max_score(u-1, v-1, depth, lca_parent, max_scores)) return result"},{"question":"Anina is trying to create a list of numbers based on a pattern she has discovered. The pattern involves using specified ranges of numbers and arranging them in a specific way. Given two integers \'a\' and \'b\', write a program to generate a list of numbers starting from \'a\' up to and including \'b\'. However, if at any point a number in this range is divisible by 3, replace it with \\"Fizz\\". If it is divisible by 5, replace it with \\"Buzz\\". If a number is divisible by both 3 and 5 replace it with \\"FizzBuzz\\". Example 1: Input: 1 15 Output: [1, 2, \\"Fizz\\", 4, \\"Buzz\\", \\"Fizz\\", 7, 8, \\"Fizz\\", \\"Buzz\\", 11, \\"Fizz\\", 13, 14, \\"FizzBuzz\\"] Your Task: You don\'t need to input anything. Complete the function createPatternList() which takes two integers \'a\' and \'b\' as input parameters and returns the generated list according to the given conditions. Constraints: 1<= a <= b <= 50","solution":"def createPatternList(a, b): Generates a list of numbers from a to b with \'Fizz\', \'Buzz\', and \'FizzBuzz\' replacements. Parameters: a (int): The starting number of the list. b (int): The ending number of the list. Returns: list: The generated list with specified replacements. result = [] for num in range(a, b + 1): if num % 3 == 0 and num % 5 == 0: result.append(\\"FizzBuzz\\") elif num % 3 == 0: result.append(\\"Fizz\\") elif num % 5 == 0: result.append(\\"Buzz\\") else: result.append(num) return result"},{"question":"The city of Technopolis has a unique public transport system that comprises a network of buses. Each bus travels a fixed route, but the routes do not have fixed starting or ending points. Instead, they follow a specific path and form a continuous loop. Hence, a passenger can board and alight at any stop along the route. # Problem Description Given the description of a bus route in Technopolis, your task is to determine the shortest number of stops needed for a bus to travel between any two given stops on its route. The bus route is described as a series of stops that form a circular loop, where each stop is represented by an integer. Multiple stops can have the same identifier but are still considered different physical stops along the route. # Input The first line contains an integer ( n ) ((2 le n le 10^5)) – the number of stops along the bus route. The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) ((1 le a_i le 10^6)) – the identifiers of the stops in the order they appear along the route. The third line contains two integers ( s ) and ( t ) ((1 le s, t le n)) – the indices of the two stops where you wish to find the shortest journey. It is guaranteed that ( s neq t ). # Output Print a single integer – the minimum number of stops required to travel from stop ( s ) to stop ( t ). # Examples Example 1 Input: ``` 5 3 5 2 7 4 2 4 ``` Output: ``` 2 ``` Explanation: The stops are [3, 5, 2, 7, 4] in a circular loop. The shortest path between stop 2 (stop identifier 5) and stop 4 (stop identifier 7) includes the stops: [5, 2, 7]. Therefore, the shortest path is 2 stops. Example 2 Input: ``` 4 1 2 3 4 4 1 ``` Output: ``` 1 ``` Explanation: The stops are [1, 2, 3, 4] in a circular loop. The shortest path between stop 4 (stop identifier 4) and stop 1 (stop identifier 1) includes the stops: [4, 1]. Therefore, the shortest path is 1 stop. # Note - The bus route loops back to the beginning after the last stop; i.e., stop ( n ) is followed by stop 1. - Input stops ( s ) and ( t ) are given as 1-based index positions. Your task is to implement the solution to find the shortest path on this circular bus route.","solution":"def shortest_journey(n, stops, s, t): Returns the minimum number of stops required to travel from stop s to stop t. :param n: Number of stops along the route :param stops: List of stop identifiers in order they appear along the route :param s: The start stop index (1-based) :param t: The destination stop index (1-based) :return: Minimum number of stops required to travel from s to t # Convert to 0-based index for easier manipulation s -= 1 t -= 1 # Case 1: Moving from s to t in a clockwise direction if t >= s: clockwise_distance = t - s else: clockwise_distance = n - s + t # Case 2: Moving from s to t in a counter-clockwise direction if s >= t: counter_clockwise_distance = s - t else: counter_clockwise_distance = s + n - t # Return the minimum of the two distances return min(clockwise_distance, counter_clockwise_distance)"},{"question":"Given a binary tree, you need to determine the maximum difference between the values of any two nodes in the tree. The difference is calculated as the absolute value of the subtraction of two node values. ------ Input: ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with an integer N, the number of nodes in the tree. The second line contains N space-separated integers V_{1}, V_{2}, ldots, V_{N} where V_{i} denotes the value of the i-th node. The next N-1 lines each contains two integers X and Y denoting that there is an edge between V_{X} and V_{Y}. ------ Output: ------ For each test case, print a single line containing one integer ― the maximum difference between the values of any two nodes in the binary tree. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 1 ≤ V_{i} ≤ 10^{9} 1 ≤ X, Y ≤ N It\'s guaranteed that the total number of nodes across all test cases does not exceed 10^{6}. ----- Sample Input 1 ------ 2 5 3 1 4 10 6 1 2 1 3 3 4 3 5 3 7 8 3 1 2 1 3 ----- Sample Output 1 ------ 9 5 ----- Explanation 1 ------ In the first test case, the maximum difference is between node with value 10 and node with value 1, giving |10 - 1| = 9. In the second test case, the maximum difference is between node with value 8 and node with value 3, giving |8 - 3| = 5.","solution":"def max_difference_in_tree(test_cases): results = [] for case in test_cases: N, node_values, edges = case max_val = max(node_values) min_val = min(node_values) # The maximum difference will always be between the maximum and minimum values max_diff = abs(max_val - min_val) results.append(max_diff) return results # Parse input and prepare test cases def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) idx = 1 test_cases = [] for _ in range(T): N = int(input_lines[idx]) node_values = list(map(int, input_lines[idx + 1].split())) edges = [] for i in range(N - 1): edges.append(tuple(map(int, input_lines[idx + 2 + i].split()))) test_cases.append((N, node_values, edges)) idx += 1 + 1 + (N - 1) return test_cases # Example usage input_string = 2 5 3 1 4 10 6 1 2 1 3 3 4 3 5 3 7 8 3 1 2 1 3 test_cases = parse_input(input_string) results = max_difference_in_tree(test_cases) print(results) # Expected: [9, 5]"},{"question":"Implement a function `path_exists` that takes in a 2D list (a grid) representing a maze and two tuples representing the start and end coordinates. Each element in the grid can be either 0 or 1, where 0 represents an open cell you can travel through, and 1 represents a wall you cannot pass. The function should return a boolean indicating whether there is a path from the start coordinate to the end coordinate using only horizontal and vertical movements. _Hint: You can use Breadth-First Search (BFS) or Depth-First Search (DFS) for this problem._ # Input: - `grid`: A 2D list of integers where 0 represents an open cell and 1 represents a wall. - `start`: A tuple (r, c) representing the starting coordinates. - `end`: A tuple (r, c) representing the ending coordinates. # Output: - A boolean representing whether there is a path from start to end. # Example: ```python def path_exists(grid: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -> bool: # Implement the function here # Example usage: print(path_exists([[0, 1, 0, 0], [0, 0, 1, 0], [1, 0, 1, 0], [0, 0, 0, 0]], (0, 0), (3, 3))) # Output: True print(path_exists([[0, 1, 0, 1], [1, 0, 1, 1], [1, 0, 1, 1], [0, 0, 0, 1]], (0, 0), (3, 3))) # Output: False ```","solution":"from typing import List, Tuple from collections import deque def path_exists(grid: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -> bool: Return whether a path exists from start to end in the given grid. :param grid: 2D list of integers where 0 is an open cell and 1 is a wall. :param start: A tuple (r, c) representing the starting coordinates. :param end: A tuple (r, c) representing the ending coordinates. :return: Boolean indicating whether a path exists from start to end. if not grid or not grid[0] or grid[start[0]][start[1]] == 1 or grid[end[0]][end[1]] == 1: return False rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([start]) visited = set() visited.add(start) while queue: current = queue.popleft() if current == end: return True for dir in directions: new_row, new_col = current[0] + dir[0], current[1] + dir[1] if 0 <= new_row < rows and 0 <= new_col < cols and (new_row, new_col) not in visited and grid[new_row][new_col] == 0: queue.append((new_row, new_col)) visited.add((new_row, new_col)) return False"},{"question":"A company wants to distribute holiday gifts to its employees. Each gift is a box of chocolates, and all employees should receive a gift of the same value. The company can purchase chocolates in bulk as single units or as bundles of k units. They can make any number of purchases, but their goal is to minimize the number of purchases they need to make. Given the number of employees n and the bundle size k, determine the minimum number of purchases required. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. Next t lines contain descriptions of test cases. For each test case, the first line contains two integers n and k (1 le n, k le 10^9). -----Output----- For each test case, print a single integer — the minimum number of purchases required. -----Example----- Input 3 5 2 10 3 12 5 Output 3 4 3 -----Note----- In the first case, the company can make 3 purchases of bundles with 2 units each, totaling 6 chocolates. One chocolate will be left unused, but the number of purchases is minimized. In the second case, the company can make 4 purchases: 3 bundles of 3 units each, and 1 single unit, totaling 10 chocolates exactly. In the third case, the company can make 3 purchases: 2 bundles of 5 units each, and 2 single units, totaling 12 chocolates exactly.","solution":"def min_purchases(n, k): Returns the minimum number of purchases required to get at least n chocolates, where chocolates can be bought in single units or bundles of k units. # Calculate number of full bundles needed full_bundles = n // k # If there is a remainder, it means we need an additional purchase for the remaining remainder = n % k # Total purchases will be full bundles + any remainder total_purchases = full_bundles + (1 if remainder > 0 else 0) return total_purchases def process_input(test_cases): Processes multiple test cases to find the minimum purchases required for each. test_cases: A list of tuples, where each tuple contains (n, k) Returns: A list of results for each test case results = [] for n, k in test_cases: results.append(min_purchases(n, k)) return results"},{"question":"A binary tree is called a uni-value binary tree if all nodes of the tree have the same value. Given a binary tree, your task is to determine if it is a uni-value binary tree. # Constraints - The number of nodes in the tree will be in the range [1, 1000]. - Each node will have a value in the range [0, 100]. # Input The input is given as a pre-order traversal of the binary tree, including null pointers for missing children. Each node is represented by its integer value, and null pointers are represented by \'null\'. The input is given as a single space-separated string. # Output Return \\"true\\" if the binary tree is a uni-value binary tree, and \\"false\\" otherwise. # Sample Input 1 1 1 1 1 1 null null # Sample Output 1 true # Sample Input 2 2 2 2 null null 5 2 # Sample Output 2 false In the first sample input, all nodes have the value \'1\', so the tree is a uni-value binary tree. In the second sample input, not all nodes have the value \'2\', thus the tree is not a uni-value binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_unival_tree(root): Determines if a binary tree is a uni-value tree. if not root: return True val = root.val def dfs(node): if not node: return True if node.val != val: return False return dfs(node.left) and dfs(node.right) return dfs(root) def deserialize(data): Deserializes a space-separated string input into a binary tree. if not data: return None nodes = data.split() if nodes[0] == \\"null\\": return None root = TreeNode(int(nodes[0])) queue = [root] i = 1 while queue and i < len(nodes): current = queue.pop(0) if nodes[i] != \\"null\\": current.left = TreeNode(int(nodes[i])) queue.append(current.left) i += 1 if i < len(nodes) and nodes[i] != \\"null\\": current.right = TreeNode(int(nodes[i])) queue.append(current.right) i += 1 return root def is_unival_tree_from_str(data): root = deserialize(data) return is_unival_tree(root)"},{"question":"John is organizing a coding competition and wants to ensure that the prize pool is distributed as fairly as possible among the top competitors. He has decided to reward only the top K competitors out of N participants. The prize for the i-th top competitor should be proportional to their score compared to the total score of the top K competitors. Specifically, the prize for the i-th top competitor should be: [ text{Prize}_i = left(frac{text{Score}_i}{sum_{j=1}^{K} text{Score}_j}right) times text{Total_Prize_Pool} ] Given the scores of the participants and the total prize pool, write a program to calculate the prize for each of the top K competitors. ------ Input ------ The first line contains an integer T, the number of test cases. For each test case: - The first line contains three integers N, K, and Total_Prize_Pool. - The second line contains N space-separated integers denoting the scores of the participants. ------ Output ------ For each test case, print K space-separated integers, where the i-th integer is the prize for the i-th top competitor. Print the result with a precision of two decimal places. ------ Constraints ------ - 1 le T le 100 - 1 le N le 1,000 - 1 le K le N - 0 le text{Score}_i le 1000 - 1 le text{Total_Prize_Pool} le 1,000,000 ------ Sample Input 1 ------ 2 5 3 1500 100 200 300 400 500 4 2 1000 0 0 100 200 ------ Sample Output 1 ------ 384.62 576.92 538.46 333.33 666.67 ------ Explanation 1 ------ In the first test case, the top 3 scores are 500, 400, and 300. Their total score is 1200. The prize distribution is: - For the highest score (500): (frac{500}{1200} times 1500 = 625.00) - For the second highest score (400): (frac{400}{1200} times 1500 = 500.00) - For the third highest score (300): (frac{300}{1200} times 1500 = 375.00) In the second test case, the top 2 scores are 200 and 100. Their total score is 300. The prize distribution is: - For the highest score (200): (frac{200}{300} times 1000 = 666.67) - For the second highest score (100): (frac{100}{300} times 1000 = 333.33) Thus, the output is: ``` 625.00 500.00 375.00 666.67 333.33 ```","solution":"def distribute_prizes(test_cases): results = [] for case in test_cases: N, K, total_prize_pool = case[\\"N\\"], case[\\"K\\"], case[\\"total_prize_pool\\"] scores = case[\\"scores\\"] # Get top K scores in descending order top_k_scores = sorted(scores, reverse=True)[:K] total_top_k_score = sum(top_k_scores) # Calculate the prize for each of the top K competitors prizes = [(score / total_top_k_score) * total_prize_pool for score in top_k_scores] # Format prizes to two decimal places and add to results formatted_prizes = [f\\"{prize:.2f}\\" for prize in prizes] results.append(formatted_prizes) return results # Function to convert the input format to a structured format def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, K, total_prize_pool = map(int, lines[index].split()) index += 1 scores = list(map(int, lines[index].split())) index += 1 test_cases.append({\\"N\\": N, \\"K\\": K, \\"total_prize_pool\\": total_prize_pool, \\"scores\\": scores}) return test_cases # Function to convert the output format def format_output(results): return \\"n\\".join([\\" \\".join(result) for result in results]) # Main function to handle input and output def main(input_string): test_cases = parse_input(input_string) results = distribute_prizes(test_cases) return format_output(results)"},{"question":"Andy and his friends are playing with strings and need your help. They start with an empty string and perform `m` operations. Each operation is one of the following: - Append a substring `s_i` to the end of the current string. - Remove the last `l_i` characters from the current string. - Determine if a given substring `t_i` exists in the current string. After each operation, Andy and his friends would like to know the result of the operation performed. -----Input----- The first line contains a single integer `m` (1 ≤ m ≤ 10^5) — the number of operations. The next `m` lines describe the operations. Each line will start with an integer `o_i` (1 ≤ o_i ≤ 3), denoting the type of the operation (see above). If `o_i = 1`, it will be followed by a substring `s_i` (consisting of lowercase Latin letters only; 1 ≤ |s_i| ≤ 1000). If `o_i = 2`, it will be followed by an integer `l_i` (1 ≤ l_i ≤ current length of the string). If `o_i = 3`, it will be followed by a substring `t_i` (consisting of lowercase Latin letters only; 1 ≤ |t_i| ≤ 1000). -----Output----- Output `m` lines each containing the result of the operation performed: - For operation `1`, output `APPENDED`. - For operation `2`, output `REMOVED`. - For operation `3`, output `YES` if `t_i` exists in the string; otherwise, output `NO`. -----Examples----- Input 6 1 abc 1 def 3 cd 2 3 3 def 3 ab Output APPENDED APPENDED YES REMOVED NO YES Input 5 1 hello 3 ell 2 3 1 lo 3 hello Output APPENDED YES REMOVED APPENDED YES -----Note----- In the first sample, the string evolves as follows: \\"\\" → \\"abc\\" → \\"abcdef\\" → (check for \\"cd\\" within \\"abcdef\\") → \\"abc\\" → (check for \\"def\\" within \\"abc\\") → (check for \\"ab\\" within \\"abc\\").","solution":"def string_operations(m, operations): current_string = \\"\\" results = [] for operation in operations: op = operation[0] if op == 1: s_i = operation[1] current_string += s_i results.append(\\"APPENDED\\") elif op == 2: l_i = operation[1] current_string = current_string[:-l_i] results.append(\\"REMOVED\\") elif op == 3: t_i = operation[1] if t_i in current_string: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A new amusement park is being planned in Funlandia. The planning committee has identified n locations within the park where different attractions will be placed. These locations are numbered from 1 to n. Initially, none of the locations are connected directly. Over time, m bidirectional paths will be constructed to connect these locations. The paths are built one after another: first the path number 1 will be constructed, then the path number 2, and so forth. The i-th path connects the locations with numbers ai and bi. A loop in this context is a path that satisfies: * It starts and ends at the same location. * It contains at least one path. * It does not traverse any path more than once, but it can visit any location any number of times. The management wants to know the number of ways to create distinct sets of paths such that each set forms exactly one or more loops, where each loop consists only of the paths from that set. The amusement park does not need to be fully connected. Two sets of paths are considered different if they consist of different sets of paths. After the completion of each new path, the committee asks you to determine the number of ways to form these loop sets. Can you help them with this task? Input The first line contains two integers n and m (2 ≤ n ≤ 105, 1 ≤ m ≤ 105), representing the number of locations and the number of paths, respectively. Each of the next m lines describes a path with two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), the numbers of the locations connected by this path. There may be multiple paths between the same pair of locations. Output Print m lines: the i-th line should represent the number of ways to form loop sets after the completion of path number i. The numbers should be printed modulo 1000000007 (109 + 7). Examples Input 4 4 1 2 2 3 3 4 4 2 Output 0 0 0 1 Note In the example, after constructing all four paths between the locations, the park will look like this: - Path between locations 1 and 2 - Path between locations 2 and 3 - Path between locations 3 and 4 - Path between locations 4 and 2 The only possible way to form a loop set is to consider the single loop 2 - 3 - 4 - 2.","solution":"MOD = 1000000007 class DSU: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n self.size = [1] * n def find(self, x): if self.parent[x] != x: self.parent[x] = self.find(self.parent[x]) return self.parent[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.rank[rootX] > self.rank[rootY]: self.parent[rootY] = rootX self.size[rootX] += self.size[rootY] elif self.rank[rootX] < self.rank[rootY]: self.parent[rootX] = rootY self.size[rootY] += self.size[rootX] else: self.parent[rootY] = rootX self.size[rootX] += self.size[rootY] self.rank[rootX] += 1 return False return True def count_loops(n, m, paths): dsu = DSU(n) loops = 0 results = [] for a, b in paths: a -= 1 b -= 1 if dsu.union(a, b): loops += 1 results.append(loops) return [x % MOD for x in results] # Example usage n, m = 4, 4 paths = [(1, 2), (2, 3), (3, 4), (4, 2)] print(count_loops(n, m, paths)) # Output: [0, 0, 0, 1]"},{"question":"Farmer John\'s cows are hungry! To figure out the daily amount of hay needed, he uses a system of instructions to calculate it from different sources. Each instruction either adds to the hay amount or multiplies the current amount by a factor. Initially, Farmer John starts with h_0 kilograms of hay. Each instruction is encoded as a string with the following format: - \\"ADD x\\": To add x kilograms of hay. - \\"MUL x\\": To multiply the current amount of hay by x. Given these instructions, help Farmer John calculate the final amount of hay after all instructions are executed. -----Input----- - The first line contains n, the number of test cases. n test cases follow. - Each test case starts with a line containing a single integer m (number of instructions) and an integer h_0 (initial hay amount). - The next m lines contain instructions in the format mentioned above. -----Output----- - For each test case, print a single line containing the final amount of hay. -----Constraints----- - 1 leq n leq 10^5 - 1 leq m leq 10^5 - 1 leq h_0 leq 10^6 - 1 leq x leq 10^3 - The result for any intermediate steps can fit in a 64-bit signed integer. -----Sample Input----- 2 3 10 ADD 5 MUL 2 ADD 3 2 7 MUL 3 ADD 4 -----Sample Output----- 33 25 -----Explanation----- - Case 1: Starting with 10 kilograms of hay, the instructions are: - ADD 5: 10 + 5 = 15 - MUL 2: 15 times 2 = 30 - ADD 3: 30 + 3 = 33 - Case 2: Starting with 7 kilograms of hay, the instructions are: - MUL 3: 7 times 3 = 21 - ADD 4: 21 + 4 = 25","solution":"def calculate_final_hay_amount(test_cases): Computes the final amount of hay after processing given instructions for each test case. Arguments: test_cases -- a list of test cases, where each test case is represented as a tuple containing: (number_of_instructions, initial_hay_amount, instructions) `instructions` is a list of strings Returns: A list of final hay amounts for each test case. results = [] for m, h0, instructions in test_cases: hay_amount = h0 for instruction in instructions: command, x = instruction.split() x = int(x) if command == \\"ADD\\": hay_amount += x elif command == \\"MUL\\": hay_amount *= x results.append(hay_amount) return results"},{"question":"In a 2-D grid of n * m (n rows and m columns), some cells are empty, represented by \'.\', and some cells are blocked, represented by \'#\'. A robot starts at cell (0,0) and has to reach cell (n-1,m-1). The robot can move in four possible directions - up, down, left, and right, but cannot move onto blocked cells. Additionally, if a move causes the robot to travel a longer path than a specified threshold, the move is considered invalid. Given the grid and the threshold as input, determine if the robot can reach the destination following the movement constraints. Example 1: Input: grid = [ [\'.\',\'.\',\'#\',\'.\'], [\'#\',\'.\',\'#\',\'.\'], [\'.\',\'.\',\'.\',\'#\'], [\'#\',\'#\',\'.\',\'.\'] ] threshold = 6 Output: Yes Explanation: The path (0,0)-(0,1)-(1,1)-(2,1)-(2,2)-(3,2)-(3,3) has a total length of 6 which matches the given threshold. Example 2: Input: grid = [ [\'.\',\'.\',\'#\',\'.\'], [\'#\',\'.\',\'#\',\'.\'], [\'.\',\'.\',\'.\',\'#\'], [\'#\',\'#\',\'.\',\'.\'] ] threshold = 5 Output: No Explanation: The shortest valid path (0,0)-(0,1)-(1,1)-(2,1)-(2,2)-(3,2)-(3,3) has a length of 6 which exceeds the given threshold. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canReachDestination() which takes the grid and the threshold as inputs and returns if the robot can reach the bottom-right cell within the given threshold. Return \\"Yes\\" if possible, else \\"No\\". Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(n * m) Constraints: 1 <= n, m <= 100 grid[i][j] is either \'.\' or \'#\'","solution":"from collections import deque def canReachDestination(grid, threshold): if not grid or not grid[0]: # empty grid case return \\"No\\" n, m = len(grid), len(grid[0]) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"No\\" q = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while q: r, c, dist = q.popleft() if (r, c) == (n-1, m-1): return \\"Yes\\" if dist <= threshold else \\"No\\" for dr, dc in directions: nr, nc, ndist = r + dr, c + dc, dist + 1 if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) q.append((nr, nc, ndist)) return \\"No\\""},{"question":"Write a function that flattens a nested dictionary. The keys in the nested dictionary can be concatenated into a single key with each level separated by a delimiter (default is \'.\'). The function should also take an optional argument for the delimiter. For example, given the following dictionary: ```python { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3 } } } ``` The function should return: ```python { \\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3 } ``` You may assume the keys in the nested dictionary are strings and the dictionary contains only other dictionaries or scalar values (like integers or strings) as values. Implement the function in Python. ```python def flatten_dictionary(d, delimiter=\'.\'): # your code here pass ```","solution":"def flatten_dictionary(d, delimiter=\'.\'): def flatten(current_item, parent_key=\'\'): items = [] for k, v in current_item.items(): new_key = f\\"{parent_key}{delimiter}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten(v, new_key).items()) else: items.append((new_key, v)) return dict(items) return flatten(d)"},{"question":"Alice has a list of N integers and she wants to divide the list into exactly two non-empty parts, such that the sum of the first part is as close as possible to the sum of the second part. Write a function to determine the minimum possible absolute difference between the sums of the two parts. Input Format The first line contains number of test cases T. Each test case is described in two lines: - The first line contains a single integer N, the length of the list. - The second line contains N space-separated integers, representing the list. Constraints 1 leq T leq 10 2 leq N leq 1000 -10^6 leq text{elements of the list} leq 10^6 Output Format For each test case, print the minimum possible absolute difference on a new line. Sample Input 2 5 1 2 3 4 5 6 2 -1 2 -3 4 1 Sample Output 1 1 Explanation Test Case 0: One optimal way to split the list is into [1, 2, 3] and [4, 5]. The sums are 6 and 9, with an absolute difference of 3. A more optimal split is [1, 2, 3, 4] and [5], yielding sums of 10 and 5 with an absolute difference of 5. The minimum absolute difference of the sums is however achieved with the split [1, 2, 3, 4] and [5], for a difference of 1. Test Case 1: One optimal way to split the list is into [2, -1, 2] and [-3, 4, 1]. The sums are 3 and 2, with an absolute difference of 1. There is no split achieving a lower difference in this case.","solution":"def min_abs_difference(nums): total_sum = sum(nums) n = len(nums) dp = [False] * (total_sum // 2 + 1) dp[0] = True for num in nums: for s in range(total_sum // 2, num - 1, -1): dp[s] = dp[s] or dp[s - num] for s in range(total_sum // 2, -1, -1): if dp[s]: first_part_sum = s break second_part_sum = total_sum - first_part_sum return abs(first_part_sum - second_part_sum) def min_abs_differences(test_cases): results = [] for nums in test_cases: results.append(min_abs_difference(nums)) return results"},{"question":"Given a string, determine if it is a valid parenthesis sequence. A valid parenthesis sequence must be empty or must be of the form (A), where A is a valid parenthesis sequence, or AB where both A and B are valid parenthesis sequences. You need to write a function that takes a string consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' and returns a boolean indicating whether the given string is a valid parenthesis sequence. -----Input----- A single string consisting of at most 100,000 characters. -----Output----- Output should be a single boolean value: True if the input string is a valid parenthesis sequence, and False otherwise. -----Examples----- Sample Input 1: \\"()\\" Sample Output 1: True Sample Input 2: \\"()[]{}\\" Sample Output 2: True Sample Input 3: \\"(]\\" Sample Output 3: False Sample Input 4: \\"([{}])\\" Sample Output 4: True Sample Input 5: \\"{[()]\\" Sample Output 5: False","solution":"def is_valid_parenthesis_sequence(s): Determines if the input string is a valid parenthesis sequence. Args: s (str): Input string consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the input string is a valid parenthesis sequence, False otherwise. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"John is organizing a party and wants to distribute N candies equally among M children. However, John wants each child to receive at least one candy and he wants to minimize the number of leftover candies. Write a program to determine the number of leftover (undistributed) candies after distributing as equally as possible among the children. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first and only line of each test case contains two space-separated integers N and M — the number of candies and the number of children respectively. ------ Output Format ------ For each test case, output on a new line the number of leftover (undistributed) candies after tries to distribute the candies equally among the children. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N, M ≤ 10000 ----- Sample Input 1 ------ 3 10 3 20 4 8 5 ----- Sample Output 1 ------ 1 0 3 ----- Explanation 1 ------ Test case 1: John can distribute 3 candies to each of the 3 children (3*3=9), leaving 1 candy left over. Thus, the answer is 1. Test case 2: John can distribute 5 candies to each of the 4 children (5*4=20), leaving 0 candies left over. Thus, the answer is 0. Test case 3: John can distribute 1 candy to each of the 5 children (1*5=5), leaving 3 candies left over. Thus, the answer is 3.","solution":"def leftover_candies(T, test_cases): Determines the number of leftover candies after distributing equally among children. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains two integers, N (number of candies) and M (number of children) Returns: list: A list of integers representing the number of leftover candies for each test case leftovers = [] for N, M in test_cases: leftovers.append(N % M) return leftovers"},{"question":"To keep your spaceship flying, you need to keep it fueled up and avoid obstacles. You have a sequence of numbers that represent the positions of fuel stations on a 1-dimensional path and another sequence of numbers representing the positions of obstacles on the same path. You start at position 0 and you can move right or left but you can only stop at fuel stations to refuel your spaceship. Help your spaceship reach the target position without hitting any obstacles. Write a function `can_reach_target` that accepts five parameters: 1. An integer `target` representing the position you want to reach. 2. An integer `initial_fuel` representing initial amount of fuel available. 3. An integer `fuel_per_station` representing the amount of fuel acquired at each fuel station. 4. A list of integers `fuel_stations` representing the positions of the fuel stations. 5. A list of integers `obstacles` representing the positions of the obstacles. The function should return `True` if you can reach the target position without running out of fuel or hitting an obstacle, otherwise return `False`. # Function Signature ```python def can_reach_target(target: int, initial_fuel: int, fuel_per_station: int, fuel_stations: List[int], obstacles: List[int]) -> bool: ``` # Input - `target`: An integer representing the target position you want to reach, `-1000000 <= target <= 1000000`. - `initial_fuel`: An integer representing the initial amount of fuel, `0 <= initial_fuel <= 1000000`. - `fuel_per_station`: An integer representing the amount of fuel acquired at each fuel station, `1 <= fuel_per_station <= 1000000`. - `fuel_stations`: A list of integers representing the positions of the fuel stations. Length of the list is `0 <= len(fuel_stations) <= 1000000`. - `obstacles`: A list of integers representing the positions of the obstacles. Length of the list is `0 <= len(obstacles) <= 1000000`. Each fuel station and obstacle position is unique. # Output - Return `True` if it\'s possible to reach the target position without hitting obstacles or running out of fuel, `False` otherwise. # Example ```python print(can_reach_target(20, 10, 10, [5, 15, 25], [10, 30])) # Output: True print(can_reach_target(30, 10, 10, [5, 15, 25], [10, 20])) # Output: False ```","solution":"from typing import List def can_reach_target(target: int, initial_fuel: int, fuel_per_station: int, fuel_stations: List[int], obstacles: List[int]) -> bool: fuel_stations_set = set(fuel_stations) obstacles_set = set(obstacles) current_position = 0 current_fuel = initial_fuel step = 1 if target > 0 else -1 while current_position != target: # Move one step towards the target current_position += step current_fuel -= 1 # Check if we\'ve hit an obstacle if current_position in obstacles_set: return False # Check if we run out of fuel if current_fuel < 0: return False # Refuel at fuel stations if current_position in fuel_stations_set: current_fuel += fuel_per_station return True"},{"question":"Given a Binary Search Tree (BST) of size N, write a function to find and return the Least Common Ancestor (LCA) of two given nodes in the BST. The LCA of two nodes p and q in a BST is defined as the lowest node in the tree that has both p and q as descendants (where we allow a node to be a descendant of itself). Example 1: Input: 6 / 2 8 / / 0 4 7 9 / 3 5 Node p = 2, Node q = 8 Output: 6 Explanation: The LCA of nodes 2 and 8 is 6 because 6 is the lowest node that has both 2 and 8 as descendants. Example 2: Input: 6 / 2 8 / / 0 4 7 9 / 3 5 Node p = 2, Node q = 4 Output: 2 Explanation: The LCA of nodes 2 and 4 is 2 because 2 is the lowest node that has both 2 and 4 as descendants. Your Task: You don\'t need to read input or print anything. Complete the function `findLCA()` which takes the root of the BST and two nodes p and q as input parameters and returns the least common ancestor of the nodes p and q. Expected Time Complexity: O(log N) on average Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^4 0 ≤ Node Value ≤ 10^4","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def findLCA(root, p, q): This function finds the least common ancestor (LCA) of two nodes in a binary search tree. :param root: TreeNode, the root of the binary search tree :param p: TreeNode, one of the two nodes :param q: TreeNode, the other node :return: TreeNode, the least common ancestor of p and q if not root: # If the root is None, there is no LCA return None # If both p and q are greater than root, LCA lies in right subtree if p.val > root.val and q.val > root.val: return findLCA(root.right, p, q) # If both p and q are less than root, LCA lies in left subtree if p.val < root.val and q.val < root.val: return findLCA(root.left, p, q) # If split happens, root is the LCA return root"},{"question":"Given two sorted lists of integers, find their intersection and union. Constraints - 1 leq n, m leq 200,000 - -10^9 leq a_i, b_j leq 10^9 Input The input is given in the following format: n a_0 ; a_1 ; ... ; a_{n-1} m b_0 ; b_1 ; ... ; b_{m-1} The integers in the lists are given in non-decreasing order. There may be duplicate elements in each list. Output First, print the intersection of the two lists in ascending order. If the intersection is empty, print \\"Empty Intersection\\". Then, print the union of the two lists in ascending order. Example Input 6 1 2 2 3 4 5 5 2 2 3 4 6 Output 2 3 4 1 2 2 3 4 5 6","solution":"def find_intersection_and_union(n, a, m, b): Given two sorted lists of integers, find their intersection and union. Parameters: n (int): Number of elements in the first list `a`. a (list): The first list of integers. m (int): Number of elements in the second list `b`. b (list): The second list of integers. Returns: tuple: A tuple where the first element is a list of intersection and the second element is a list of union. set_a = set(a) set_b = set(b) intersection = sorted(list(set_a & set_b)) union = sorted(list(set_a | set_b)) return intersection, union"},{"question":"In a small company, there are N employees, each with a unique employee ID from 1 to N. The company wants to organize a special event where the employees can participate in different activities. There are M distinct activities numbered from 1 to M. Each employee has a unique interest in exactly one activity. The company has created an activity chart that lists which employee is interested in which activity. Moreover, due to logistics, each activity can only accommodate a certain maximum number of employees at a time. The company needs to determine if it\'s possible to organize the event such that no activity exceeds its capacity. -----Input----- - The first line of the input contains two integers N and M, denoting the number of employees and the number of activities, respectively. - The second line contains M space-separated integers where the i-th integer represents the maximum capacity of the i-th activity. - The third line contains N space-separated integers where the j-th integer represents the activity ID that the j-th employee is interested in. -----Output----- Print \\"Possible\\" if the event can be organized such that no activity exceeds its capacity, otherwise print \\"Impossible\\". -----Constraints----- - 1 le N le 10^5 - 1 le M le 100 - 1 le capacity of each activity le 1000 - 1 le activity ID of each employee le M -----Example Input----- 5 3 2 1 3 1 1 2 3 3 -----Example Output----- Possible -----Explanation----- In the given example, there are 5 employees and 3 activities with capacities [2, 1, 3]. The interests of the employees are as follows: - Employee 1 and 2 are interested in Activity 1. - Employee 3 is interested in Activity 2. - Employee 4 and 5 are interested in Activity 3. Each activity is within its capacity limit, hence the output is \\"Possible\\".","solution":"def can_organize_event(N, M, capacities, interests): Determines if the event can be organized such that no activity exceeds its capacity. :param N: Number of employees :param M: Number of activities :param capacities: List of capacities of each activity :param interests: List of interests of each employee :returns: \\"Possible\\" if event can be organized, else \\"Impossible\\" # Create a list to track the number of employees interested in each activity current_interests = [0] * M # Count the number of employees interested in each activity for interest in interests: current_interests[interest - 1] += 1 # Check if any activity exceeds its capacity for i in range(M): if current_interests[i] > capacities[i]: return \\"Impossible\\" return \\"Possible\\""},{"question":"Raj is working on optimizing the storage of products in his warehouse. Each product occupies a different amount of space, and Raj wants to fill his storage shelves in a way that maximizes the usage of the available space. However, he can only place one product per shelf, and some products require more space than others. Raj wants to know the maximum number of products he can store in his warehouse without exceeding the capacity of any shelf. -----Task----- You will be given the number S, the number of shelves in the warehouse, and the available space on each shelf in an array. You will also be given the number P, the number of products, and the space required by each product in another array. Determine the maximum number of products that Raj can store in his warehouse. -----Input----- The first line of input contains an integer S, 1 leq S leq 1000, the number of shelves. The second line consists of S space-separated integers where each integer denotes the available space on a shelf 1 leq space leq 1000000. The third line of input contains an integer P, 1 leq P leq 1000, the number of products. The fourth line consists of P space-separated integers where each integer denotes the space required by a product 1 leq product leq 1000000. -----Output----- Output a single integer, the maximum number of products Raj can store in his warehouse. -----Examples----- Sample Input: 4 10 20 30 40 6 5 10 15 20 25 35 Sample Output: 4","solution":"def max_products(shelves, shelf_spaces, products, product_spaces): Determines the maximum number of products that can be stored in the warehouse without exceeding the capacity of any shelf. :param shelves: int - number of shelves :param shelf_spaces: list of int - available space on each shelf :param products: int - number of products :param product_spaces: list of int - space required by each product :return: int - maximum number of products that can be stored # Sort shelf spaces and product spaces to facilitate optimal fitting shelf_spaces.sort() product_spaces.sort() # Initialize counters max_products = 0 shelf_index = 0 # Try to fit each product to the smallest possible shelf for product in product_spaces: while shelf_index < shelves and shelf_spaces[shelf_index] < product: shelf_index += 1 if shelf_index < shelves: max_products += 1 shelf_index += 1 return max_products"},{"question":"You are given a string and two integers k and n. Your task is to determine if it is possible to remove exactly k characters from the given string such that the resulting string contains exactly n distinct characters. Input The first line contains a string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. The second line contains two space-separated integers k and n (0 ≤ k ≤ |s|, 1 ≤ n ≤ 26). Output Output \\"YES\\" if it is possible to remove exactly k characters to obtain a string with exactly n distinct characters, otherwise output \\"NO\\". Examples Input abcabcabc 2 2 Output YES Input aabbcc 4 3 Output NO Note In the first example, you can remove two \'a\' characters to get \\"bbcabcabc\\", which has exactly two distinct characters: \'b\' and \'c\'. In the second example, it is not possible to remove four characters and be left with a string that has exactly three distinct characters.","solution":"def can_obtain_n_distinct(s, k, n): Determines if it\'s possible to remove exactly k characters from the string s such that the resulting string contains exactly n distinct characters. from collections import Counter # Calculate the number of distinct characters in the original string distinct_char_count = len(set(s)) # If we need more distinct characters than are originally present, it\'s not possible if n > distinct_char_count: return \\"NO\\" # If removing k characters would remove all characters or result in more than n distinct characters if len(s) - k < n: return \\"NO\\" return \\"YES\\""},{"question":"Charlie is working on a project that involves manipulating RGB color values for an image processing algorithm. Each RGB color value is represented by three integers ranging from 0 to 255, inclusive, representing the Red, Green, and Blue components of the color. Charlie needs a function that adjusts the brightness of each pixel\'s color in the image. The brightness adjustment is done by adding the same integer value to each of the R, G, and B components of the color. This adjustment value can be positive or negative. After adjustment, if any of the R, G, or B values fall outside the range of 0 to 255, they should be clamped to be within this range (i.e., any value below 0 should be set to 0, and any value above 255 should be set to 255). Charlie asks you to implement a function to achieve this. Given the current RGB values of a color and an integer adjustment value, return the new RGB values after applying the brightness adjustment. Input The input consists of T test cases. The first line of the input contains a positive integer T. Then follow the cases. Each case consists of exactly one line with three integers representing the Red, Green, and Blue values of the color components followed by an integer representing the brightness adjustment value. Output For each case, print exactly one line containing the adjusted RGB values, each value should be separated by space. Constraints - The value of T will be less than 1000 - Each of the color values (R, G, B) will be between 0 and 255, inclusive, before adjustment. - The brightness adjustment value can be any integer between -100 to +100. SAMPLE INPUT 3 50 100 150 10 255 250 245 -10 0 0 0 50 SAMPLE OUTPUT 60 110 160 245 240 235 50 50 50 Explanation In the sample input, there are 3 test cases. After applying the brightness adjustment value to each R, G, and B component of the color, the new RGB values are printed for each test case. Each output line corresponds to the new color values after the adjustment, clamping the values to the range 0 to 255 when necessary.","solution":"def adjust_brightness(cases): def clamp(value): if value < 0: return 0 elif value > 255: return 255 return value results = [] for case in cases: R, G, B, adjustment = case new_R = clamp(R + adjustment) new_G = clamp(G + adjustment) new_B = clamp(B + adjustment) results.append((new_R, new_G, new_B)) return results"},{"question":"Given is a string s containing digits (\'0\'-\'9\') and letters (\'a\'-\'z\'). Your task is to reorder the string such that all digit characters come before all letter characters while preserving the relative order of digits among themselves and letters among themselves. -----Constraints----- - 1 leq |s| leq 100 - s consists of digits and lowercase English letters. -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print the reordered string according to the described rules. -----Sample Input----- a1b2c3d4 -----Sample Output----- 1234abcd The digits are moved to the front while letters are appended at the end, with their order preserved.","solution":"def reorder_string(s): Reorders the string such that all digit characters come before all letter characters while preserving the relative order of digits among themselves and letters among themselves. :param s: Input string containing digits and lowercase letters :return: Reordered string with digits first and letters following digits = [] letters = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(digits) + \'\'.join(letters)"},{"question":"In a faraway kingdom, warriors are ranked based on their bravery scores. Each warrior has three attributes: Strength (S), Speed (P), and Intelligence (I). The kingdom has set certain minimum criteria for these attributes: S_min, P_min, and I_min respectively. Additionally, a warrior is also required to have a combined attribute score equal to or greater than a threshold R_min. Given S_min, P_min, I_min, R_min, and a warrior\'s scores S, P, I, determine whether the warrior qualifies to be ranked. ------ Input: ------ The first line will contain N, the number of test cases. Each of the next N lines contains seven integers S_min, P_min, I_min, R_min, S, P, I each separated by a space. ------ Output: ------ Output \\"QUALIFIED\\" if the warrior meets all the criteria, otherwise output \\"DISQUALIFIED\\". You may print each character of the string in uppercase or lowercase (for example, the strings \\"qualified\\", \\"Qualified\\", \\"QUALIFIED\\" and \\"disqualified\\", \\"Disqualified\\", \\"DISQUALIFIED\\" will all be treated as identical). ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ S_min, P_min, I_min, S, P, I ≤ 100 S_min + P_min + I_min ≤ R_min ≤ 300 ----- Sample Input 1 ------ 5 2 2 2 10 3 3 3 2 2 2 10 1 4 5 5 5 6 20 5 5 5 1 2 2 6 1 3 2 10 10 10 30 10 10 10 ----- Sample Output 1 ------ QUALIFIED DISQUALIFIED DISQUALIFIED QUALIFIED QUALIFIED ----- explanation 1 ------ TestCase 1: The warrior meets the minimum requirement for S, P, I and also the combined score of (3 + 3 + 3 = 9) meets the threshold R_min of 10. TestCase 2: The warrior does not meet the minimum requirement for S. TestCase 3: The combined score of (5 + 5 + 5 = 15) does not meet the threshold R_min of 20. TestCase 4: The warrior meets the minimum requirement for S, P, I and also the combined score of (1 + 3 + 2 = 6) meets the threshold R_min of 6. TestCase 5: The warrior meets all individual minimum requirements and the combined score of (10 + 10 + 10 = 30) meets the threshold R_min of 30.","solution":"def warrior_qualification(N, test_cases): results = [] for case in test_cases: S_min, P_min, I_min, R_min, S, P, I = case if S >= S_min and P >= P_min and I >= I_min and (S + P + I) >= R_min: results.append(\\"QUALIFIED\\") else: results.append(\\"DISQUALIFIED\\") return results"},{"question":"In a custom dice rolling game, two players each have a collection of multi-sided dice. Each side of every die has a unique number between 1 and the maximum number of sides on that die. The players take turns rolling one die from their collection, and the player who rolls the higher number wins that round. The game is played until one player wins a predefined number of rounds. A player wins the overall game if they reach the predefined number of round wins before their opponent. You have the opportunity to arrange your dice in a specific order to maximize your chances of winning. Write a program to determine if it is possible to arrange your dice such that you win the game against your opponent, given both players’ collections of dice and the number of round wins required to win the game. -----Input----- The input consists of multiple lines: - The first line contains three integers, n (1 leq n leq 10^5), m (1 leq m leq 10^5), and k (1 leq k leq 10^5)—the number of your dice, the number of your opponent\'s dice, and the number of round wins required to win the game, respectively. - The second line contains n integers, representing the number of sides on each of your dice. - The third line contains m integers, representing the number of sides on each of your opponent\'s dice. -----Output----- Output “possible” if it is possible for you to rearrange your dice to achieve at least k round wins against your opponent; otherwise, output “impossible.” -----Examples----- Sample Input 1: 3 3 2 6 8 10 5 7 9 Sample Output 1: possible Sample Input 2: 3 3 4 6 8 10 5 7 9 Sample Output 2: impossible","solution":"def can_win_game(n, m, k, your_dice, opponent_dice): Determines if it is possible for you to rearrange your dice to achieve at least k round wins against your opponent. :param n: Number of your dice :param m: Number of opponent\'s dice :param k: Number of round wins required to win the game :param your_dice: List of integers representing the number of sides on each of your dice :param opponent_dice: List of integers representing the number of sides on each of opponent\'s dice :return: \\"possible\\" if you can win at least k rounds, otherwise \\"impossible\\" # Sort both dice collections in descending order your_dice.sort(reverse=True) opponent_dice.sort(reverse=True) # Calculate wins required wins = 0 for i in range(len(your_dice)): if i >= len(opponent_dice) or your_dice[i] > opponent_dice[i]: wins += 1 if wins >= k: return \\"possible\\" return \\"impossible\\""},{"question":"You are working as a developer and someone sends you a string which is a representation of a mathematical expression. The expression only includes integers, addition (+), subtraction (-), and multiplication (*), but no parentheses. Your task is to evaluate this expression and return the final result. The expression will be in a single line with no spaces. Write a function `evaluate_expression(expression)` that takes a string as an input and returns an integer representing the result of the expression. INPUT - A single line string representing the mathematical expression. OUTPUT - A single integer, which is the result of the evaluated expression. CONSTRAINTS - The length of the string will be between 1 and 1000 characters. - The string will contain only digits and the characters \'+\', \'-\', \'*\'. - The result will fit within the 32-bit signed integer range. EXAMPLE INPUT \\"3+5*2-6\\" EXAMPLE OUTPUT 7 EXPLANATION: In the given example, the expression should be evaluated as follows: 3 + 5 * 2 - 6 = 3 + 10 - 6 = 13 - 6 = 7","solution":"def evaluate_expression(expression): Evaluates a given mathematical expression string containing integers, +, -, and *. def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\': return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b # Stack to store integers values = [] # Stack to store operators ops = [] i = 0 while i < len(expression): # If current character is a digit if expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 # If current character is an operator else: while len(ops) != 0 and precedence(ops[-1]) >= precedence(expression[i]): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(expression[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[0]"},{"question":"Consider a string S consisting of lowercase English letters. We want to split this string into as few parts as possible where each part contains unique characters (i.e., no character appears more than once in any part). Your task is to write a function `partitionString` that takes a string S and returns an integer representing the minimum number of parts in which the string can be split. # Function Signature: ```python def partitionString(S: str) -> int: ``` # Example: ```python partitionString(\\"abac\\") # should return 2; one possible split is {\\"ab\\", \\"ac\\"} partitionString(\\"world\\") # should return 1; as each character is already unique partitionString(\\"aab\\") # should return 2; one possible split is {\\"a\\", \\"ab\\"} partitionString(\\"abcabc\\") # should return 2; one possible split is {\\"abc\\", \\"abc\\"} ``` # Constraints: - The string S will have a length between 1 and 10^4. - The input string only contains lowercase English letters. # Note: - The solution should efficiently handle the constraints. - Think about the greedy approach to solve this problem.","solution":"def partitionString(S: str) -> int: Returns the minimum number of parts the string can be split into where each part contains unique characters. seen = set() part_count = 0 for char in S: if char in seen: part_count += 1 seen.clear() seen.add(char) # Count the last part if there are remaining characters in the set if seen: part_count += 1 return part_count"},{"question":"Given a string S representing a well-formed arithmetic expression containing integers, addition (+), subtraction (-), multiplication (*), and division (/) operators. The task is to evaluate the arithmetic expression and return the result. Note: Division should be treated as integer division. Example 1: Input: S = \\"3+2*2\\" Output: 7 Explanation: 3 + (2 * 2) = 3 + 4 = 7 Example 2: Input: S = \\" 3/2 \\" Output: 1 Explanation: 3 / 2 = 1 (Integer division) Example 3: Input: S = \\" 3+5 / 2 \\" Output: 5 Explanation: 3 + (5 / 2) = 3 + 2 = 5 Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function evaluateExpression() that takes a string (S), and returns the result of the expression evaluation. The driver code takes care of the printing. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= |S| <= 10^5 The given string S contains well-formed arithmetic expressions and might contain spaces.","solution":"def evaluateExpression(S): Evaluates a well-formed arithmetic expression containing integers, addition, subtraction, multiplication, and division operators. Division is treated as integer division. Args: S (str): The arithmetic expression string to evaluate Returns: int: The result of the arithmetic expression evaluation num = 0 stack = [] sign = \\"+\\" S = S.replace(\\" \\", \\"\\") # Remove spaces for i, char in enumerate(S): if char.isdigit(): # Build the current number num = num * 10 + int(char) if char in \\"+-*/\\" or i == len(S) - 1: if sign == \\"+\\": stack.append(num) elif sign == \\"-\\": stack.append(-num) elif sign == \\"*\\": stack.append(stack.pop() * num) elif sign == \\"/\\": stack.append(int(stack.pop() / num)) # Integer division sign = char num = 0 return sum(stack)"},{"question":"Given a positive integer `n`, determine if `n` is a colorful number. A number is considered colorful if the product of every digit of a contiguous subsequence of its digits is different. Task Write a function that takes a positive integer `n` and returns `true` if `n` is a colorful number, otherwise `false`. The format A function accepting one argument: a positive integer `n`. ``function isColorful(n){ return true || false }`` Examples isColorful(3245) --> true Products of all contiguous subsequences: 3, 2, 4, 5, 3*2=6, 2*4=8, 4*5=20, 3*2*4=24, 2*4*5=40, 3*2*4*5=120 All products are unique. isColorful(326) --> false Products of all contiguous subsequences: 3, 2, 6, 3*2=6, 2*6=12, 3*2*6=36 6 appears more than once. isColorful(263) --> true Products of all contiguous subsequences: 2, 6, 3, 2*6=12, 6*3=18, 2*6*3=36 All products are unique. isColorful(23) --> true Products of all contiguous subsequences: 2, 3, 2*3=6 All products are unique. Note: You can assume the input number will not contain the digit 0.","solution":"def isColorful(n): Determines if a positive integer n is a colorful number. num_str = str(n) products = set() # Iterate over all possible contiguous subsequences for i in range(len(num_str)): for j in range(i, len(num_str)): subseq = num_str[i:j+1] product = 1 for digit in subseq: product *= int(digit) if product in products: return False products.add(product) return True"},{"question":"A group of n students are seated in a circle, passing around a book. Starting from a student, labeled 1, the book is passed k students to the left each time. Your task is to determine the order in which the students receive the book until every student has received it exactly once. For instance, if there are 5 students and the book is passed 2 students to the left each time, starting from student 1, the order will be 1, 3, 5, 2, 4. Given the number of students n and the number of passes k, determine the sequence of students receiving the book. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case is described by a single line containing two integers n and k (2 le n le 1000, 1 le k le n) — the number of students and the number of passes, respectively. -----Output----- For each test case, output a single line containing the sequence of student labels in the order they receive the book. -----Examples----- Input 3 5 2 4 1 6 3 Output 1 3 5 2 4 1 2 3 4 1 4 1 4 1 4 -----Note----- In the first test case with n = 5 and k = 2, the book passes like this: 1 -> 3 -> 5 -> 2 -> 4 In the second test case with n = 4 and k = 1, the book passes like this: 1 -> 2 -> 3 -> 4 In the third test case with n = 6 and k = 3, the book passes every third student: 1 -> 4 -> 1 -> 4 -> 1 -> 4","solution":"def pass_the_book(t, test_cases): results = [] for test in test_cases: n, k = test order = [] current_student = 1 for _ in range(n): order.append(current_student) current_student = (current_student + k - 1) % n + 1 results.append(order) return results"},{"question":"Write a program that reads a list of words and determines whether each word in the list is a palindrome or not. A word is considered a palindrome if it reads the same forward and backward. Constraints * The length of each word will be between 1 and 100 characters. * All words will consist of lowercase letters only. Input The first line contains a single integer n (1 leq n leq 100) — the number of words. Each of the next n lines contains one word. Output For each word, print \\"Yes\\" if it is a palindrome and \\"No\\" if it is not. Examples Input 3 level racecar hello Output Yes Yes No Input 2 abc deed Output No Yes","solution":"def check_palindromes(words): Determines whether each word in the list is a palindrome or not. Parameters: words (list): A list of words to check. Returns: list: A list containing \\"Yes\\" or \\"No\\" for each word. results = [] for word in words: if word == word[::-1]: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given a set of N distinct positive integers, find all subsets that sum up to a target integer T. Output all such subsets in any order. Each subset should be represented as a list of integers, and output should be a list of lists. If no such subset exists, return an empty list. Example 1: ``` Input: N = 4, integers = [1, 2, 3, 4], T = 5 Output: [[1, 4], [2, 3]] Explanation: There are two subsets which sum up to 5: 1. [1, 4] 2. [2, 3] ``` Example 2: ``` Input: N = 3, integers = [1, 2, 5], T = 4 Output: [] Explanation: No subset sums up to 4. ``` Your Task: Complete the function findSubsets() which takes two arguments (integers, T) and returns the list of all subsets that sum up to T. Expected Time Complexity: O(2^N) Expected Auxiliary Space: O(2^N) Constraints: 1 <= N <= 20 1 <= integers[i] <= 10^4 1 <= T <= 10^5","solution":"def findSubsets(integers, T): Given a set of distinct positive integers, find all subsets that sum up to T. result = [] def backtrack(start, path, target): if target == 0: result.append(path) return elif target < 0: return for i in range(start, len(integers)): backtrack(i + 1, path + [integers[i]], target - integers[i]) backtrack(0, [], T) return result"},{"question":"The problem requires you to find the unique common elements between multiple sorted integer arrays and output them in lexicographical order. You are given an integer `k` which denotes the number of arrays, followed by `k` lines containing sorted integers arrays. The task is to identify the unique integers that are present in all arrays. Input: - The first line contains a single integer `T`, the number of test cases. - Each test case starts with an integer `K`, the number of arrays. - The next `K` lines each contain a space-separated list of integers in ascending order. Output: For each test case, print the unique common integers in lexicographical order found in all arrays. If there are no such integers, print \\"No common elements!\\". Constraints: - 1 ≤ T ≤ 100 - 2 ≤ K ≤ 100 - 1 ≤ number of integers in each array ≤ 1000 - All integers are non-negative and do not exceed 10^6 Example: Sample Input: 2 3 1 2 3 4 5 2 4 6 8 0 2 4 6 2 1 4 5 6 6 7 8 9 Sample Output: 4 6 Explanation: In the first test case, the number \'4\' is the only integer present in all three arrays. In the second test case, the number \'6\' is the only integer present in the two arrays.","solution":"def find_common_elements(T, test_cases): result = [] for case in test_cases: K, arrays = case common_elements = set(arrays[0]) for array in arrays[1:]: common_elements &= set(array) if common_elements: result.append(\\" \\".join(map(str, sorted(common_elements)))) else: result.append(\\"No common elements!\\") return result"},{"question":"Alex and Bob are playing a game with a bunch of candies. They have a pile of candies, each with a weight represented by a positive integer. They want to divide the candies into two groups such that the absolute difference between the total weights of the two groups is minimized. Your task is to help Alex and Bob find the minimum possible absolute difference. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The descriptions of the test cases follow. The first line of each test case contains a single integer n (1 leq n leq 200) — the number of candies. The next line contains n integers w_i (1 leq w_i leq 1000) — the weights of the candies. It is guaranteed that the sum of n across all test cases does not exceed 2000. -----Output----- For each test case, output a single integer — the minimum possible absolute difference between the total weights of the two groups. -----Examples----- Input 3 3 2 4 6 4 1 5 11 5 2 1 2 Output 0 0 1 -----Explanation----- In the first test case, you can divide the candies into groups {2, 6} and {4} with sums 8 and 4. The absolute difference is |8 - 4| = 4. In the second test case, you can divide the candies into groups {1, 5, 5} and {11} with sums 11 and 11. The absolute difference is |11 - 11| = 0. In the third test case, you can divide the candies into groups {1} and {2} with sums 1 and 2. The absolute difference is |1 - 2| = 1.","solution":"def min_difference(test_cases): def find_min_difference(weights): total_sum = sum(weights) n = len(weights) possible_sums = [False] * (total_sum + 1) possible_sums[0] = True for weight in weights: for j in range(total_sum, weight - 1, -1): if possible_sums[j - weight]: possible_sums[j] = True half_sum = total_sum // 2 for i in range(half_sum, -1, -1): if possible_sums[i]: return total_sum - 2 * i results = [] for case in test_cases: results.append(find_min_difference(case)) return results # Example usage: # test_cases = [ # [2, 4, 6], # [1, 5, 11, 5], # [1, 2] # ] # print(min_difference(test_cases)) # Output: [0, 0, 1]"},{"question":"Given a binary tree, your task is to complete the function findTreeHeight() which takes the root of the binary tree as input and returns the height of the tree. Input: The input line contains T, denoting the number of test cases. Each test case contains a binary tree in level-order traversal where -1 represents a null node. Output: For each test case, print the height of the binary tree in a new line. User Task: Since this is a functional problem, you don\'t have to worry about input, you just have to complete the function findTreeHeight() which takes the root of the binary tree as an input parameter and returns the height of the tree. Constraints: 1 <= T <= 100 1 <= Number of nodes in the tree <= 10^4 1 <= Data of a node <= 10^4 Example: Input: 2 3 9 20 -1 -1 15 7 1 -1 2 -1 -1 Output: 3 2 Explanation: Test case 1: The binary tree has the following structure: 3 / 9 20 / 15 7 The height of the binary tree is 3. Test case 2: The binary tree has the following structure: 1 2 The height of the binary tree is 2.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def buildTree(levelOrder): if not levelOrder or levelOrder[0] == -1: return None root = TreeNode(levelOrder[0]) queue = [root] i = 1 while queue and i < len(levelOrder): current = queue.pop(0) if levelOrder[i] != -1: current.left = TreeNode(levelOrder[i]) queue.append(current.left) i += 1 if i < len(levelOrder) and levelOrder[i] != -1: current.right = TreeNode(levelOrder[i]) queue.append(current.right) i += 1 return root def findTreeHeight(root): if not root: return 0 left_height = findTreeHeight(root.left) right_height = findTreeHeight(root.right) return max(left_height, right_height) + 1 def evaluateTestCases(testCases): results = [] for tc in testCases: root = buildTree(tc) height = findTreeHeight(root) results.append(height) return results"},{"question":"You are given a string that represents a compressed form of an integer array. The compressed format is defined using the following rules: 1. If an element appears consecutively more than once in the array, it is represented as “element*count”, where `element` is the integer and `count` is the number of consecutive occurrences. 2. If an element appears only once, it is represented just as the integer itself. Your task is to decompress the string back into the original array. # Input - A single line contains the compressed string. The compressed string has a length between 1 and 1000 characters. # Output - Print the decompressed array as space-separated integers. # Examples Input ``` 3*2 1 4*3 2 ``` Output ``` 3 3 1 4 4 4 2 ``` Input ``` 7*4 5 5 8*2 ``` Output ``` 7 7 7 7 5 5 8 8 ``` # Note In the first example, the compressed string `3*2 1 4*3 2` is decompressed as follows: - `3*2` becomes `3 3` - `1` remains `1` - `4*3` becomes `4 4 4` - `2` remains `2` The final array is `3 3 1 4 4 4 2`.","solution":"def decompress_string(compressed_str): This function takes a compressed string and decompresses it into an array of integers. Args: compressed_str (str): A compressed string where elements may be represented as `element*count` or just `element`. Returns: list: A list of integers representing the decompressed array. decompressed_list = [] elements = compressed_str.split() for element in elements: if \'*\' in element: value, count = element.split(\'*\') decompressed_list.extend([int(value)] * int(count)) else: decompressed_list.append(int(element)) return decompressed_list"},{"question":"Write a function `canFormPalindrome(s)` that takes a string `s` as input and returns `true` if any permutation of `s` could form a palindrome, otherwise returns `false`. A string can form a palindrome if at most one character appears an odd number of times. For example, the string \\"racecar\\" can form the palindrome \\"racecar\\", so `canFormPalindrome(\\"racecar\\")` should return `true`, whereas the string \\"hello\\" cannot form any palindrome, so `canFormPalindrome(\\"hello\\")` should return `false`.","solution":"def canFormPalindrome(s): Returns True if any permutation of the string s can form a palindrome, otherwise returns False. from collections import Counter char_count = Counter(s) odd_counts = sum(1 for count in char_count.values() if count % 2 != 0) return odd_counts <= 1"},{"question":"You are given an array of n integers, and you need to perform q queries on it. There are two types of queries: 1. Update: Change the value at a specific position in the array. 2. Sum: Calculate the sum of values in a specified range of the array. -----Input----- The first line contains two integers n (1 leq n leq 10^5) and q (1 leq q leq 10^5): the number of elements in the array and the number of queries. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9): the elements of the array. Each of the next q lines contains one of two types of queries: - \\"1 i x\\" (1-based index): Update the ith element to x (-10^9 leq x leq 10^9). - \\"2 l r\\" (1-based index): Calculate the sum of elements from index l to index r. -----Output----- For each query of type 2, print the resulting sum on a new line. -----Example----- Input 5 5 1 2 3 4 5 2 1 3 1 3 10 2 2 4 1 5 -1 2 4 5 Output 6 16 3 -----Explanation----- In the given example, we start with the array [1, 2, 3, 4, 5]. - Query \\"2 1 3\\" calculates the sum from index 1 to index 3: 1 + 2 + 3 = 6. - Query \\"1 3 10\\" updates the 3rd element to 10. The array becomes [1, 2, 10, 4, 5]. - Query \\"2 2 4\\" calculates the sum from index 2 to index 4: 2 + 10 + 4 = 16. - Query \\"1 5 -1\\" updates the 5th element to -1. The array becomes [1, 2, 10, 4, -1]. - Query \\"2 4 5\\" calculates the sum from index 4 to index 5: 4 + (-1) = 3. Implementing the appropriate data structure to handle the queries efficiently will be crucial to solving this problem within the constraints.","solution":"class SegmentTree: def __init__(self, data): n = len(data) self.n = n self.tree = [0] * (2 * n) self.build(data) def build(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def query(self, left, right): result = 0 left += self.n right += self.n while left < right: if left % 2: result += self.tree[left] left += 1 if right % 2: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result def process_queries(n, q, array, queries): segment_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: _, i, x = query segment_tree.update(i - 1, x) elif query[0] == 2: _, l, r = query result = segment_tree.query(l - 1, r) results.append(result) return results"},{"question":"You are working on a text editor that implements a \\"find and replace\\" feature with a twist. The twist is that the replacement should only replace words that are not part of another word. A word in this context is defined as a sequence of characters separated by spaces or punctuation marks. The following punctuation marks are considered: `.`, `,`, `!`, `?`. Here’s how the find and replace should work: 1. The editor receives the original text (a string) and a series of replacement operations. Each replacement operation consists of a target word and its replacement. 2. The target word should only be replaced if it appears as a word on its own, not as part of another word. 3. The editor returns the string after performing all replacement operations in the order given. 4. Assume there are no uppercase letters in the input text. Input: - The first line contains an integer n, the number of replacement operations (1 ≤ n ≤ 100). - The second line contains the original text (a string of length up to 10^5 characters). - The next n lines each contain a target word (a string of length ≤ 10) and its replacement (a string of length ≤ 10), separated by a space. Output: - Print the text after performing all replacement operations. Assume each word and replacement consists only of lowercase letters. Example Input: ``` 2 this is a test. this example, is simple! is was this that ``` Output: ``` that was a test. that example, was simple! ``` Explanation: 1. First, all occurrences of the word \\"is\\" are replaced by \\"was\\": - \\"this is a test. this example, is simple!\\" -> \\"this was a test. this example, was simple!\\" 2. Next, all occurrences of the word \\"this\\" are replaced by \\"that\\": - \\"this was a test. this example, was simple!\\" -> \\"that was a test. that example, was simple!\\"","solution":"import re def find_and_replace(n, text, operations): Replaces words in the text based on the operations provided. Parameters: n (int): Number of replacement operations. text (str): Original text. operations (list of tuple): List of replacement operations where each is a tuple (target, replacement). Returns: str: Text after performing all replacement operations. for target, replacement in operations: pattern = rf\\"b{re.escape(target)}b\\" text = re.sub(pattern, replacement, text) return text"},{"question":"A string s is said to be a Thue-Morse string if you cannot find a contiguous substring t within s, such that t concatenated with itself (i.e., t + t) is again a substring of s. For example, \\"010\\" is a Thue-Morse string because \\"01\\" is a substring and \\"0101\\" contains \\"01\\" + \\"01\\". Given an integer n (1 ≤ n ≤ 10^5), determine the length of the shortest Thue-Morse string that can be formed of length n. Input The input contains a single integer n. Output Output an integer representing the length of the shortest Thue-Morse string of length n. Example Input 5 Output 6 Explanation A possible Thue-Morse string of length 6 is \\"010110\\". Any string created from this pattern up to length 5 would still meet the conditions. Note: Brute force solution will not work due to the constraints. Consider constructing the Thue-Morse sequence and checking for the conditions mentioned.","solution":"def thue_morse_length(n): Returns the length of the shortest Thue-Morse string of at least length n. # Generate the Thue-Morse sequence until it is long enough thue_morse = \'0\' while len(thue_morse) < n: thue_morse += \'\'.join(\'1\' if c == \'0\' else \'0\' for c in thue_morse) return len(thue_morse)"},{"question":"You are given an array of integers. Each element in the array appears twice except for one element that appears only once. Write a function that finds and returns the single element that does not appear twice. -----Constraints----- - The array contains at least one integer and at most 100 integers. - Each element in the array is an integer between -100 and 100. - The input satisfies the given condition that exactly one element does not appear twice. -----Input----- The input consists of a single line containing integers separated by spaces. The first integer is the number of elements in the array, followed by the elements themselves. -----Output----- Print the single integer that does not appear twice. -----Sample Input----- 7 4 1 2 1 2 4 5 -----Sample Output----- 5","solution":"def find_single_element(array): Returns the single element that does not appear twice in the array. xor_result = 0 for num in array: xor_result ^= num return xor_result def parse_input(input_str): Parses the input string and returns the array of integers. parts = input_str.split() n = int(parts[0]) array = list(map(int, parts[1:n + 1])) return array"},{"question":"A well-known magician needs your help to manage his show entries. To ensure an orderly sequence of entries, he uses a special encoding method. However, his encoding technique sometimes scrambles the sequence, and your task is to find the original order of the entries. The magician\'s entry system uses a series of integers in which specific values indicate parts of the original sequence. Each number represents a position in the sequence, and your task is to reorder them to match the positions. Input The first line contains a single integer n representing the number of entries (1 ≤ n ≤ 100). The second line contains n space-separated integers, each representing the original position of that entry (1 ≤ ai ≤ n). Output Print the re-ordered sequence of entries, which should be the numbers from 1 to n re-arranged according to the provided positions. Example Input: 5 4 1 3 2 5 Output: 2 4 3 1 5 Input: 4 2 3 4 1 Output: 4 1 2 3","solution":"def reorder_entries(n, positions): Reorders the sequence of numbers from 1 to n based on the provided positions. Parameters: n (int): Number of entries. positions (list): List of integers representing the original positions of the entries. Returns: list: Re-ordered sequence of entries. ordered_sequence = [0] * n for index, pos in enumerate(positions): ordered_sequence[pos-1] = index + 1 return ordered_sequence"},{"question":"You are given an array a of length n. The array has n integers which are either 1, 2 or 3. Your task is to partition the array into the minimum number of contiguous subarrays such that each subarray contains exactly one occurrence of 1, 2, and 3. -----Input----- The first line of the input contains a single integer n (3 leq n leq 2 cdot 10^5) — the length of the array a. The second line of the input contains n integers a_1, a_2, dots, a_n (1 le a_i le 3). It is guaranteed that the array contains at least one occurrence of each of 1, 2, and 3. -----Output----- Print a single integer — the minimum number of contiguous subarrays into which the array a can be partitioned so that each subarray contains exactly one occurrence of 1, 2, and 3. -----Examples----- Input: 7 1 3 2 3 1 2 1 Output: 2 Input: 6 1 2 3 1 2 3 Output: 2 Input: 5 3 2 1 3 2 Output: 1 -----Note----- Consider the first example: a = [1, 3, 2, 3, 1, 2, 1], possible partitions into contiguous subarrays that each contain exactly one occurrence of 1, 2, and 3 are: [1, 3, 2], [3, 1, 2, 1] consider the second example: a = [1, 2, 3, 1, 2, 3], possible partitions: [1, 2, 3], [1, 2, 3] Each partition contains exactly one occurrence of 1, 2, and 3. The minimum number of such partitions required will be the output. Consider the third example: a = [3, 2, 1, 3, 2], possible partition: [3, 2, 1] We can find a contiguous subarray [3, 2, 1] that contains exactly one occurrence of 1, 2, and 3. Therefore, the output will be 1.","solution":"def minimum_partitions(n, a): from collections import deque positions = {1: deque(), 2: deque(), 3: deque()} for i in range(n): positions[a[i]].append(i) partitions = 0 while all(positions[val] for val in positions): max_pos = max(positions[1][0], positions[2][0], positions[3][0]) partitions += 1 for val in positions: while positions[val] and positions[val][0] <= max_pos: positions[val].popleft() return partitions"},{"question":"Given an n x n matrix, create a function that rotates the matrix by 90 degrees clockwise. The rotation should be done in-place, meaning you should modify the input matrix directly without using any extra memory. Function Signature: `def rotate_matrix(matrix: List[List[int]]) -> None:` # Example Input: ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ``` matrix = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Input: ``` matrix = [ [ 5, 1, 9, 11], [ 2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] ``` Output: ``` matrix = [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] ``` # Constraints: - The matrix will be a square matrix with n in the range [1, 20]. - It is guaranteed that the given matrix is not empty.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> None: Rotates an n x n matrix by 90 degrees clockwise in place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Emma enjoys coding challenges, and she has recently encountered a puzzle involving a grid of alphabets. When Emma sees a word in the grid, she tries to find out whether that word exists in it. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Given a grid of letters and a word, determine if the word exists in the grid. # Input - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 200), where `m` is the number of rows and `n` is the number of columns in the grid. - The next `m` lines contain `n` characters each representing the grid of letters. - The last line contains a string representing the word Emma is trying to find in the grid. The word will have between 1 and 1000 characters. # Output Print \\"YES\\" if the word exists in the grid, otherwise print \\"NO\\". # Example Input ``` 3 4 ABCE SFCS ADEE ABCCED ``` Output ``` YES ``` Input ``` 3 4 ABCE SFCS ADEE SEE ``` Output ``` YES ``` Input ``` 3 4 ABCE SFCS ADEE ABCB ``` Output ``` NO ``` Note In the first example, the word \\"ABCCED\\" can be constructed from the grid by following the path: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,2). In the third example, although the word \\"ABCB\\" can be formed using letters in the grid, the same letter cell cannot be used more than once. Hence, it returns \\"NO\\".","solution":"def exist(grid, word): m, n = len(grid), len(grid[0]) def dfs(x, y, word_index): if word_index == len(word): return True if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] != word[word_index]: return False temp, grid[x][y] = grid[x][y], \'#\' found = (dfs(x + 1, y, word_index + 1) or dfs(x - 1, y, word_index + 1) or dfs(x, y + 1, word_index + 1) or dfs(x, y - 1, word_index + 1)) grid[x][y] = temp return found for i in range(m): for j in range(n): if dfs(i, j, 0): return \\"YES\\" return \\"NO\\""},{"question":"You are an environmental researcher studying the migration patterns of a special species of birds. Surprisingly, the birds\' migratory habits are influenced by sequences of weather patterns. Your task is to write a program that can analyze the weather patterns to predict whether the birds will migrate on a given day. The weather pattern is represented by a binary string, where \'1\' denotes favorable weather and \'0\' denotes unfavorable weather. The birds decide to migrate if there is at least one contiguous subsequence of length exactly L within the pattern which contains more \'1\'s than \'0\'s. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and L. - The second line contains a binary string of length N, representing the weather pattern for the days of interest. -----Output----- For each test case, print a single line containing \\"YES\\" if the birds will migrate, otherwise \\"NO\\". -----Constraints----- - 1 le T le 100 - 1 le N le 1000 - 1 le L le N -----Example Input----- 3 7 3 1011010 5 2 01101 6 4 000011 -----Example Output----- YES YES NO","solution":"def will_birds_migrate(test_cases): results = [] for case in test_cases: N, L, binary_string = case found = False for i in range(N - L + 1): substring = binary_string[i:i + L] if substring.count(\'1\') > substring.count(\'0\'): found = True break results.append(\\"YES\\" if found else \\"NO\\") return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, L = map(int, lines[index].split()) binary_string = lines[index + 1] test_cases.append((N, L, binary_string)) index += 2 return test_cases def solution(input_data): test_cases = parse_input(input_data) results = will_birds_migrate(test_cases) return \\"n\\".join(results)"},{"question":"You are given an integer array `arr` of size `n`. Determine if there exists a pair of distinct indices `i` and `j` such that `arr[i] + arr[j]` is equal to a given target integer `k`. -----Constraints----- - 2 ≤ n ≤ 10^4, where `n` denotes the length of the array. - -10^5 ≤ arr[i] ≤ 10^5 for each valid `i`. - -2 * 10^5 ≤ k ≤ 2 * 10^5 -----Input----- Input is given from Standard Input in the following format: ``` n k arr[0] arr[1] ... arr[n-1] ``` -----Output----- If such a pair exists, print `yes`; otherwise, print `no`. -----Sample Input----- 5 9 2 7 11 15 1 -----Sample Output----- yes","solution":"def has_pair_with_sum(arr, k): Determines if there exists a pair of distinct indices `i` and `j` such that arr[i] + arr[j] == k. Parameters: arr (list): List of integers. k (int): Target sum. Returns: str: \\"yes\\" if such a pair exists, otherwise \\"no\\". seen = set() for number in arr: if k - number in seen: return \\"yes\\" seen.add(number) return \\"no\\""},{"question":"Alice is organizing a charity event where she is auctioning off some valuable items. Each item has a designated starting bid and a certain amount of monetary increment required for each subsequent bid. The auction house has certain rules: 1. The increment must be an even number. 2. A starting bid must be higher than the previous starting bid already on the list. Design a program that helps Alice to filter out invalid starting bids and increment values, ensuring they meet the criteria. **Input** The input is provided in the following format: N p1 i1 p2 i2 :: pN iN The first line gives the number of items N (1 ≤ N ≤ 100000). In the next N lines, each line contains two integers pi (0 ≤ pi ≤ 100000), representing the starting bid for the ith item, and ii (0 ≤ ii ≤ 100000), representing the increment of each subsequent bid for the ith item. **Output** Output the valid starting bids and their corresponding increments in the order they appear in the input list. Both starting bids and increments should be even numbers and valid according to the rules specified. **Examples** **Input:** 4 2 4 6 2 3 6 8 8 **Output:** 2 4 6 2 8 8 **Input:** 3 12 5 10 8 14 6 **Output:** 14 6","solution":"def filter_auction_items(N, items): Filters out invalid starting bids and increments based on the given rules. Parameters: N (int): Number of items. items (list of tuples): List of tuples where each tuple contains two integers pi and ii. Returns: list of tuples: Filtered valid starting bids and increments. valid_items = [] for i in range(N): pi, ii = items[i] if (pi % 2 == 0 and ii % 2 == 0 and (i == 0 or pi > items[i - 1][0])): valid_items.append((pi, ii)) return valid_items # Example usage if __name__ == \\"__main__\\": N = 4 items = [(2, 4), (6, 2), (3, 6), (8, 8)] print(filter_auction_items(N, items)) # Output should be [(2, 4), (6, 2), (8, 8)]"},{"question":"You are given a tree with n nodes. Each edge of the tree has a weight associated with it. You need to find the maximum weight path that starts at the root (node 1), visits each node exactly once, and ends at any leaf node, where a leaf node is a node with no children. A path is defined as a sequence of nodes where each pair of consecutive nodes are connected by an edge. The weight of a path is the sum of the weights of the edges that are part of the path. -----Input----- The first line contains one integer t (1 leq t leq 100) — the number of test cases. Then follow the descriptions of each test case. The first line of each test case contains an integer n (2 leq n leq 10^5) — the number of nodes in the tree. Each of the following n-1 lines contains three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^6) — indicating there is an edge with weight w between nodes u and v. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case output a single integer — the maximum weight of a path that starts at the root (node 1) and ends at any leaf node. -----Examples----- Input 2 5 1 2 1 1 3 2 3 4 1 3 5 3 3 1 2 3 1 3 1 Output 6 3 -----Note----- In the first test case, the maximum weight path is from node 1 to node 5 through node 3 (1 -> 3 -> 5) with a total weight of 2 + 3 = 5. For the second test case, the maximum weight path is directly from node 1 to node 2 with a weight of 3.","solution":"from collections import defaultdict, deque def find_max_weight_path(t, test_cases): def dfs(node, parent): max_weight = 0 for neighbor, weight in tree[node]: if neighbor != parent: max_weight = max(max_weight, dfs(neighbor, node) + weight) return max_weight results = [] for n, edges in test_cases: tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) max_path_weight = dfs(1, -1) results.append(max_path_weight) return results # Example usage to fit the problem statement def main(): t = int(input().strip()) test_cases = [] for _ in range(t): n = int(input().strip()) edges = [] for __ in range(n-1): u, v, w = map(int, input().strip().split()) edges.append((u, v, w)) test_cases.append((n, edges)) results = find_max_weight_path(t, test_cases) for result in results: print(result) # Uncomment to run in local # if __name__ == \\"__main__\\": # main()"},{"question":"----- STRING MANIPULATION AND PERMUTATIONS ----- You are given a string s consisting of lowercase English letters. Chef requests your help in determining if s can be rearranged to form a palindrome. Recall that a palindrome is a string that reads the same forward and backward. If it is possible to rearrange the string to form a palindrome, return any one of the possible palindromic strings. If it is not possible, return \\"-1\\". -----Input Format----- - The input consists of one single line containing the string s. -----Output Format----- - Print the rearranged palindromic string if possible, otherwise print \\"-1\\". -----Example Cases----- Input: aabb Output: abba Input: abc Output: -1 Input: civic Output: civic","solution":"def rearrange_to_palindrome(s): Rearranges the string s to form a palindrome if possible. Returns the rearranged palindromic string or \\"-1\\" if it is not possible. from collections import Counter counter = Counter(s) middle_char = None half_palindrome = [] # Check the count of characters and build the half_palindrome for char, count in counter.items(): if count % 2 != 0: if middle_char is not None: # More than one character has an odd count return \\"-1\\" middle_char = char half_palindrome.append(char * (count // 2)) # Build the palindromic string half_palindrome_str = \\"\\".join(half_palindrome) if middle_char: return half_palindrome_str + middle_char + half_palindrome_str[::-1] else: return half_palindrome_str + half_palindrome_str[::-1]"},{"question":"Amanda is planning a road trip between several cities. Her journey starts at city 1 and she needs to visit each city in numerical order until she reaches city n. The time taken to travel between each pair of sequential cities may vary due to different factors such as traffic and road conditions. Amanda knows the expected travel time between each pair of cities (i, i+1), which is given as an integer t_i (1 leq t_i leq 10^6), but there can be unexpected delays that add to these times. To predict these delays, Amanda has calculated n-1 integers d_1, d_2, dots, d_{n-1}, where d_i is the expected delay for travel from city i to city i+1. For each test case, predict the total travel time from city 1 to city n given the expected travel times and expected delays. -----Input----- The first line contains one integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains the single integer n (2 leq n leq 100) — the number of cities. The next line contains n-1 integers t_1, t_2, dots, t_{n-1} — the expected travel times between consecutive cities. The next line contains n-1 integers d_1, d_2, dots, d_{n-1} — the expected delays for travel between consecutive cities. -----Output----- For each test case, print one integer — the total travel time from city 1 to city n. -----Examples----- Input 2 4 3 5 2 1 3 4 3 6 4 2 1 Output 18 13 -----Note----- In the first test case, the total travel time from city 1 to city 4 includes the expected travel times 3 + 5 + 2 = 10 units of time and the delays 1 + 3 + 4 = 8 units of time, resulting in a total travel time of 18 units. In the second test case, the total travel time from city 1 to city 3 includes the expected travel times 6 + 4 = 10 units of time and the delays 2 + 1 = 3 units of time, resulting in a total travel time of 13 units.","solution":"def total_travel_time(test_cases): Calculates the total travel time from city 1 to city n for each test case. Args: test_cases (list of dict): Each dict contains: - n: Number of cities - expected_travel_times: List of expected travel times between consecutive cities - expected_delays: List of expected delays between consecutive cities Returns: list of int: Total travel time for each test case. total_times = [] for case in test_cases: n = case[\'n\'] expected_travel_times = case[\'expected_travel_times\'] expected_delays = case[\'expected_delays\'] total_time = sum(expected_travel_times) + sum(expected_delays) total_times.append(total_time) return total_times"},{"question":"Farmer Alex wants to expand his cattle farm by purchasing new cows. Each cow costs P coins, and the transportation fee for each cow is Q coins. Calculate the total cost Alex has to pay for buying and transporting N cows. ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first and only line of each test case contains three space-separated integers N, P, and Q, as described in the problem statement. ------ Output Format ------ For each test case, output on a new line the total amount of money that Alex will have to pay. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 100 1 ≤ P, Q ≤ 1000 ----- Sample Input 1 ------ 3 2 300 50 3 400 70 1 500 100 ----- Sample Output 1 ------ 700 1410 600 ----- Explanation 1 ------ Test case 1: Alex buys 2 cows, each costing 300 coins and each having a transportation fee of 50 coins. Hence, the total cost is 2 * (300 + 50) = 700 coins. Test case 2: Alex buys 3 cows, each costing 400 coins and each having a transportation fee of 70 coins. Hence, the total cost is 3 * (400 + 70) = 1410 coins. Test case 3: Alex buys 1 cow, costing 500 coins and having a transportation fee of 100 coins. Hence, the total cost is 1 * (500 + 100) = 600 coins.","solution":"def total_cost_for_cows(T, test_cases): Calculate the total cost for each test case. Parameters: T (int): number of test cases. test_cases (list of tuples): Each tuple contains three integers N, P, Q. Returns: list: total costs for each test case. total_costs = [] for i in range(T): N, P, Q = test_cases[i] total_cost = N * (P + Q) total_costs.append(total_cost) return total_costs"},{"question":"# Definition A string is considered a **Palindrome** if it reads the same backward as forward. **_Given_** a string, *determine if it is a palindrome or not. Ignore spaces, punctuation, and capitalization.* ___ # Notes * The string will contain only alphanumeric characters and spaces. * The function should ignore spaces, punctuation, and capitalization while checking for palindromes. ___ # Input >> Output Examples ``` isPalindrome(\\"A man, a plan, a canal, Panama\\") ==> return True ``` Explanation: When ignoring spaces, punctuation, and capitalization, the string reads the same backward as forward. ``` isPalindrome(\\"race a car\\") ==> return False ``` Explanation: When ignoring spaces, punctuation, and capitalization, the string does not read the same backward as forward. ``` isPalindrome(\\"No lemon, no melon\\") ==> return True ``` Explanation: When ignoring spaces, punctuation, and capitalization, the string reads the same backward as forward. ___ # Your Task Write a function `isPalindrome` that takes a string as an input and returns `True` if the string is a palindrome or `False` otherwise. # Good Luck & Have Fun!","solution":"def isPalindrome(s): Determines if a string is a palindrome, ignoring spaces, punctuation, and capitalization. # Remove all non-alphanumeric characters and convert to lowercase filtered_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the string reads the same backward as forward return filtered_s == filtered_s[::-1]"},{"question":"A *Magic Square* is a `n x n` grid filled with distinct positive integers in the range `1, 2, ..., n^2` such that each cell contains a different integer and the sum of the integers in each row, column, and the two diagonals are all the same (known as the magic constant). Given an integer `n`, create a function that generates a `n x n` magic square. The function should return a `n x n` 2D list representing the magic square if it can be constructed, otherwise return `None`. Note that a magic square is only possible if `n` is odd, or if `n` is equal to 4, or if `n` is even and divisible by 4. For example, for `n=3`, the function should return a 3x3 magic square like: ``` [ [8, 1, 6], [3, 5, 7], [4, 9, 2] ] ``` Write an algorithm that constructs such a magic square for an input `n` where `1 <= n <= 15`. If it is impossible to construct a magic square for the given `n`, the function should return `None`.","solution":"def generate_magic_square(n): Generates a n x n magic square if possible; otherwise returns None. if n < 1 or n > 15 or (n % 2 == 0 and n != 4 and (n % 4 != 0)): return None if n % 2 == 1: # odd order magic square magic_square = [[0]*n for _ in range(n)] num = 1 i, j = 0, n // 2 while num <= n**2: magic_square[i][j] = num num += 1 newi, newj = (i-1) % n, (j+1) % n if magic_square[newi][newj]: i += 1 else: i, j = newi, newj return magic_square elif n == 4: # singly even order magic squares (n mod 4 == 0) magic_square = [[(n*y)+x+1 for x in range(n)] for y in range(n)] # Swap necessary blocks s = n // 4 for i in range(n): for j in range(n): if (i < s or i >= n - s) and (j < s or j >= n - s): continue elif (i >= s and i < n - s) and (j >= s and j < n - s): continue magic_square[i][j] = n*n + 1 - magic_square[i][j] return magic_square elif n % 4 == 0: # doubly even order magic squares (n multiple of 4) magic_square = [[n*y + x + 1 for x in range(n)] for y in range(n)] s = n // 4 for i in range(n): for j in range(n): if (i < s or i >= n - s) and (j < s or j >= n - s): magic_square[i][j] = n*n + 1 - magic_square[i][j] elif (i >= s and i < n - s) and (j >= s and j < n - s): magic_square[i][j] = n*n + 1 - magic_square[i][j] return magic_square return None"},{"question":"Given are two integers n and m. Your task is to generate a list of integers starting from 1 to n such that all integers that are divisible by m are replaced with the string \\"Fizz\\". If n is less than 1 or m is less than 1, return an empty list. -----Constraints----- - 1 leq n leq 100 - 1 leq m leq 100 - n and m are integers. -----Input----- Input is given from Standard Input in the following format: n m -----Output----- Print the generated list, where integers divisible by m have been replaced by \\"Fizz\\". -----Sample Input----- 5 3 -----Sample Output----- [1, 2, \'Fizz\', 4, 5] Explanation: The integers 1, 2, and 4 are not divisible by 3, so they stay the same. The integer 3 is divisible by 3, so it is replaced with \\"Fizz\\". The integer 5 is not divisible by 3. Therefore, the resulting list is [1, 2, \'Fizz\', 4, 5].","solution":"def generate_fizz_list(n, m): Generate a list of integers from 1 to n with all multiples of m replaced with \\"Fizz\\". :param n: int, upper limit of the range :param m: int, the divisor for \\"Fizz\\" :return: list, the generated list with replacements if n < 1 or m < 1: return [] result = [] for i in range(1, n+1): if i % m == 0: result.append(\\"Fizz\\") else: result.append(i) return result"},{"question":"Chef is setting up a cooking competition in Chefland. Each participant needs to prepare a dish within a limited amount of ingredients. Chef needs to prepare a list of participants who will pass the competition based on their ingredient usage. Given the total number of ingredients available, the number of different ingredients each participant used, and the threshold of different ingredients required to pass, determine for each participant if they pass or fail the competition. ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. Each test case contains three integers N, K, and R followed by N integers where each integer represents the number of different ingredients used by the participants. ------ Output ------ For each test case, output in a single line containing N binary integers (either 0 or 1) separated by spaces. A 1 indicates the participant passes and a 0 indicates the participant fails. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ K, R ≤ 100 ------ Subtasks ------ Subtask #1 (100 points): Original constraints ----- Sample Input ------ 2 3 5 3 2 4 5 4 8 6 5 6 8 7 ----- Sample Output ------ 0 1 1 0 0 1 0 ----- Explanation ------ Test Case 1: There are 3 participants, with each using 2, 4, and 5 different ingredients respectively. The required threshold of different ingredients to pass is 3. - Participant 1 uses 2 ingredients, which is less than 3, so the output is 0. - Participant 2 uses 4 ingredients, which is equal to or greater than 3, so the output is 1. - Participant 3 uses 5 ingredients, which is equal to or greater than 3, so the output is 1. Test Case 2: There are 4 participants, with each using 5, 6, 8, and 7 different ingredients respectively. The required threshold of different ingredients to pass is 6. - Participant 1 uses 5 ingredients, which is less than 6, so the output is 0. - Participant 2 uses 6 ingredients, which is equal to or greater than 6, so the output is 1. - Participant 3 uses 8 ingredients, which is equal to or greater than 6, so the output is 1. - Participant 4 uses 7 ingredients, which is equal to or greater than 6, so the output is 0.","solution":"def competition_results(test_cases): results = [] for case in test_cases: N, K, R, participants = case result = [] for p in participants: if p >= R: result.append(1) else: result.append(0) results.append(result) return results # Function to parse the input and generate the appropriate data structure def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N, K, R = map(int, lines[idx].split()) participants = list(map(int, lines[idx + 1].split())) test_cases.append((N, K, R, participants)) idx += 2 return test_cases # Function to convert the output to the required format def format_output(results): formatted_results = [] for result in results: formatted_results.append(\' \'.join(map(str, result))) return \'n\'.join(formatted_results)"},{"question":"Lena and Patrick are working on a project at their software company. They\'ve encountered a challenge with processing a sequence of operations to manage a list of integers efficiently. The list starts empty and supports the following operations: 1. \\"ADD x\\" - Add the integer x to the end of the list. 2. \\"REMOVE x\\" - Remove the first occurrence of the integer x from the list. If x does not exist in the list, do nothing. 3. \\"MAX\\" - Print the maximum value in the list. If the list is empty, print \\"EMPTY\\". Your task is to simulate the list operations and provide the output for each \\"MAX\\" operation. Input - The first line contains a single integer n (1 ≤ n ≤ 100,000), the number of operations to be performed. - Each of the next n lines contains an operation in one of the formats described above. Output - For each \\"MAX\\" operation, print a single integer representing the maximum value in the list, or the string \\"EMPTY\\" if the list is empty. Example Input: 8 ADD 3 ADD 1 MAX REMOVE 3 MAX ADD 2 REMOVE 4 MAX Output: 3 1 2","solution":"def process_operations(n, operations): Process a sequence of list operations and return the results of \\"MAX\\" operations. :param n: Integer, number of operations to be performed. :param operations: List of strings, each representing an operation. :return: List of results for each \\"MAX\\" operation. lst = [] results = [] for op in operations: if op.startswith(\\"ADD\\"): x = int(op.split()[1]) lst.append(x) elif op.startswith(\\"REMOVE\\"): x = int(op.split()[1]) if x in lst: lst.remove(x) elif op == \\"MAX\\": if lst: results.append(max(lst)) else: results.append(\\"EMPTY\\") return results"},{"question":"Given an integer array `nums` and an integer `target`, return the two numbers such that they add up to `target`. Implement the function `findPair()` that takes the array and the target as input, and returns a list containing the pair of numbers that add up to the target. If no such pair exists, return an empty list. **Example 1:** Input: nums = [2, 7, 11, 15] target = 9 Output: [2, 7] **Example 2:** Input: nums = [3, 2, 4] target = 6 Output: [2, 4] **Example 3:** Input: nums = [3, 3] target = 6 Output: [3, 3] **Your Task:** You don\'t need to read input or print anything. Your task is to complete the function `findPair()` that takes `nums` and `target` as input arguments and returns a list containing the required pair of integers. **Expected Time Complexity:** O(N) **Expected Auxiliary Space:** O(N) **Constraints:** - 1 <= len(nums) <= 10^5 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"def findPair(nums, target): Finds two numbers in the list `nums` that add up to `target`. If such a pair is found, it returns the pair as a list. If no such pair exists, it returns an empty list. num_map = {} for num in nums: complement = target - num if complement in num_map: return [complement, num] num_map[num] = True return []"},{"question":"You are given a linked list, and you need to perform some operations on it. Implement the following methods: 1. `addAtHead(value)` - Adds a new node with the given value at the beginning of the list. 2. `addAtTail(value)` - Adds a new node with the given value at the end of the list. 3. `addAtIndex(index, value)` - Adds a new node with the given value before the index-th node in the list. If the index is greater than the length of the list, the node will not be inserted. 4. `deleteAtIndex(index)` - Deletes the index-th node in the list, if the index is valid. 5. `get(index)` - Retrieves the value of the index-th node in the list. If the index is invalid, returns -1. Example 1: Input: commands = [\\"addAtHead\\", \\"addAtTail\\", \\"addAtTail\\", \\"addAtIndex\\", \\"get\\", \\"deleteAtIndex\\", \\"get\\"] values = [[1], [3], [7], [1, 2], [1], [1], [1]] Output: [null, null, null, null, 2, null, 7] Explanation: addAtHead(1) creates the list: 1 -> [] addAtTail(3) creates the list: 1 -> 3 -> [] addAtTail(7) creates the list: 1 -> 3 -> 7 -> [] addAtIndex(1, 2) creates the list: 1 -> 2 -> 3 -> 7 -> [] get(1) returns 2 deleteAtIndex(1) creates the list: 1 -> 3 -> 7 -> [] get(1) returns 7 Example 2: Input: commands = [\\"addAtHead\\", \\"addAtTail\\", \\"get\\", \\"deleteAtIndex\\", \\"get\\"] values = [[5], [10], [1], [0], [0]] Output: [null, null, 10, null, 10] Explanation: addAtHead(5) creates the list: 5 -> [] addAtTail(10) creates the list: 5 -> 10 -> [] get(1) returns 10 deleteAtIndex(0) creates the list: 10 -> [] get(0) returns 10 Your Task: Implement the required methods in a class `MyLinkedList`. Expected Time Complexity: `O(N)` for each operation, where N is the length of the linked list. Expected Auxiliary Space: `O(1)`. Constraints: - 1 <= commands.length <= 1000 - 1 <= values.length <= 1000 - All value and index inputs will be non-negative integers.","solution":"class Node: def __init__(self, val=0, next=None): self.val = val self.next = next class MyLinkedList: def __init__(self): self.head = None self.size = 0 def addAtHead(self, val): new_node = Node(val, self.head) self.head = new_node self.size += 1 def addAtTail(self, val): new_node = Node(val) if not self.head: self.head = new_node; else: tail = self.head while tail.next: tail = tail.next tail.next = new_node self.size += 1 def addAtIndex(self, index, val): if index > self.size: return if index <= 0: self.addAtHead(val) else: new_node = Node(val) prev = None current = self.head for _ in range(index): prev = current current = current.next new_node.next = current if prev: prev.next = new_node self.size += 1 def deleteAtIndex(self, index): if index < 0 or index >= self.size: return if index == 0: self.head = self.head.next else: prev = None current = self.head for _ in range(index): prev = current current = current.next if prev and current: prev.next = current.next self.size -= 1 def get(self, index): if index < 0 or index >= self.size: return -1 current = self.head for _ in range(index): current = current.next return current.val if current else -1"},{"question":"You are given an array A of positive integers representing the amount of rainwater trapped in between terrain heights. You need to find the total amount of rainwater that can be trapped. Example 1: Input: n = 6 A[] = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1} Output: 6 Explanation: Structure is like below: | | || | _||_|||| In this case, 6 units of rainwater (blue section) are trapped. Example 2: Input: n = 5 A[] = {2, 0, 2} Output: 2 Explanation: Structure is like below: || |_|| In this case, 2 units of rainwater (blue section) are trapped. Your Task: Your task is to complete the function totalWaterTrapped that takes the array and size as parameters and returns the total amount of trapped rainwater. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 100 0 <= A[i] <= 100","solution":"def totalWaterTrapped(A): Returns the total amount of rainwater that can be trapped. n = len(A) if n <= 2: return 0 left = 0 right = n - 1 left_max = A[left] right_max = A[right] trapped_water = 0 while left < right: if A[left] < A[right]: left += 1 left_max = max(left_max, A[left]) trapped_water += max(0, left_max - A[left]) else: right -= 1 right_max = max(right_max, A[right]) trapped_water += max(0, right_max - A[right]) return trapped_water"},{"question":"```markdown In a magical forest, there are N trees arranged in a straight line. Each tree has a unique magical value associated with it, called the energy value Ei of tree i. The magical value can be positive, zero, or negative. A magician wants to find the maximum sum of the energy values of any contiguous subarray of trees. However, the magician can also choose not to pick any subarray if the maximum sum of all possible subarrays is negative, in which case the result would be 0. The goal is to help the magician by writing a program that finds the maximum sum he can obtain. -----Input----- The first line contains an integer N, the number of trees. The second line contains N-separated integers representing the energy values Ei of the trees. -----Output----- The output should be a single integer, the maximum sum of the energy values of any contiguous subarray of trees, or 0 if none of the sums is positive. -----Examples----- Input: 4 -2 1 -3 4 Output: 4 Input: 5 -1 -2 -3 -4 -5 Output: 0 Input: 3 1 -2 3 Output: 3 -----Explanation----- In the first test case, the maximum sum of contiguous subarray [4] = 4. In the second test case, all sums of contiguous subarrays are negative, so the result is 0. In the third test case, the maximum sum of contiguous subarray [3] = 3. -----Constraints----- 1 ≤ N ≤ 10^5 -10^9 ≤ Ei ≤ 10^9 -----Scoring----- Subtask 1 (20 points): 1 ≤ N ≤ 10^3 Subtask 2 (30 points): 1 ≤ N ≤ 10^4 Subtask 3 (50 points): 1 ≤ N ≤ 10^5 ```","solution":"def max_energy_sum(N, energy_values): Returns the maximum sum of contiguous subarray of trees or 0 if all sums are negative. # Initialize current and max sums max_sum = current_sum = 0 has_positive = any(e > 0 for e in energy_values) # To check if there\'s any positive number if not has_positive: return 0 # If no positive numbers are present, return 0 for value in energy_values: current_sum = max(0, current_sum + value) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Company XYZ has decided to reward employees based on their project performance over a series of months. You are tasked to write a program that will help in determining the bonus amount each employee should receive based on predetermined criteria. The process is as follows: 1. You are given the number of employees E, and the projects they have completed each month for the past M months. Each project\'s completion can be either 1 (completed) or 0 (not completed). 2. The company uses two types of reward criteria: Type 1: K:l:r - In which you have to sum the total number of projects completed by employee l from month 1 to month r. If the sum is greater than or equal to a bonus threshold T, the employee is eligible for a bonus. Type 2: K:i:b - Adjust the project status of employee i for the current month based on completeness b (either 1 or 0). Note#1: Reward eligibility is checked using 1-based indexing for employees and months. Note#2: All employees and months are indexed starting at 1. Objectives: - Implement and handle Q queries on the project records. - Determine if employees are eligible for bonuses based on the given threshold T. -----Input:----- - The first line contains three integers E, M and T - denoting the number of employees, the number of months, and the bonus threshold respectively. - The next E lines contain M integers each, representing the project completion record for each employee. - The following line contains Q, the number of queries. - Each query is of two types and described in the next Q lines: - K:l:r, which checks the sum of projects completed by employee l from months 1 to r. - K:i:b, which updates the project status of employee i for the current month to b. -----Output:----- For each query of Type 1, output either \\"ELIGIBLE\\" or \\"NOT ELIGIBLE\\" without quotes. -----Constraints----- - 1 leq E leq 1000 - 1 leq M leq 1000 - 1 leq Q leq 10000 - 1 leq T leq M - 1 leq i, l leq E - 1 leq r leq M - 0 leq b leq 1 -----Sample Input:----- 3 5 3 1 0 1 1 0 0 1 1 0 0 1 1 0 1 1 4 1 1 4 2 2 1 1 2 3 1 3 5 -----Sample Output:----- ELIGIBLE NOT ELIGIBLE ELIGIBLE -----EXPLANATION:----- - Query 1: Total projects completed by employee 1 from month 1 to 4 = 1 + 0 + 1 + 1 = 3 (bonus threshold met, so ELIGIBLE) - Query 2: Update project status of employee 2 for current month to 1 -> employee 2 status now = [0 1 1 0 1] - Query 3: Total projects completed by employee 2 from month 1 to 3 = 0 + 1 + 1 = 2 (bonus threshold not met, so NOT ELIGIBLE) - Query 4: Total projects completed by employee 3 from month 1 to 5 = 1 + 1 + 0 + 1 + 1 = 4 (bonus threshold met, so ELIGIBLE)","solution":"def process_queries(E, M, T, projects, Q, queries): results = [] for query in queries: operation = query.split() type_k = int(operation[0]) if type_k == 1: employee = int(operation[1]) till_month = int(operation[2]) project_sum = sum(projects[employee - 1][:till_month]) if project_sum >= T: results.append(\\"ELIGIBLE\\") else: results.append(\\"NOT ELIGIBLE\\") elif type_k == 2: employee = int(operation[1]) project_status = int(operation[2]) projects[employee - 1][-1] = project_status return results"},{"question":"You are given a rectangular grid of cells with dimensions m x n. Each cell contains a value representing the height of that cell. You are also given an integer t. Starting from the top-left cell (0, 0), you want to reach the bottom-right cell (m-1, n-1). You can move to an adjacent cell (up, down, left, or right) if the absolute difference in heights between the current cell and the adjacent cell is less than or equal to t. Write a function to determine if there is a path from the top-left to the bottom-right cell that satisfies the given condition. If such a path exists, return true; otherwise, return false. Example 1: Input: grid = [[1, 3, 5], [4, 2, 3], [7, 1, 2]], t = 3 Output: true Explanation: Possible path is [(0, 0) -> (0, 1) -> (1, 1) -> (2, 2)] Example 2: Input: grid = [[1, 6, 1], [6, 4, 6], [1, 6, 1]], t = 2 Output: false Explanation: There is no path from (0, 0) to (2, 2) with each move having a height difference of 2 or less. Example 3: Input: grid = [[5, 5, 5], [5, 0, 5], [5, 5, 5]], t = 5 Output: true Explanation: Possible path is [(0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2)] Constraints: 1 <= m, n <= 100 0 <= grid[i][j] <= 1000 0 <= t <= 1000","solution":"def is_path_possible(grid, t): Determines if there is a path from the top-left cell to the bottom-right cell satisfying the given height difference condition. from collections import deque m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = set() queue = deque([(0, 0)]) visited.add((0, 0)) while queue: x, y = queue.popleft() if x == m - 1 and y == n - 1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited: if abs(grid[nx][ny] - grid[x][y]) <= t: queue.append((nx, ny)) visited.add((nx, ny)) return False"},{"question":"Implement a function `find_median` that takes a list of integers as input and returns the median value. If the list is empty, return `None`. If the list has an even number of elements, return the average of the two middle numbers. **Examples:** ```python find_median([1, 2, 3, 4, 5]) -> 3 find_median([10, 20, 30, 40]) -> 25.0 find_median([]) -> None ```","solution":"def find_median(lst): Returns the median value of a list of integers. If the list is empty, returns None. If the list has an even number of elements, returns the average of the two middle values. if not lst: return None lst.sort() n = len(lst) mid = n // 2 if n % 2 == 0: # If even number of elements return (lst[mid - 1] + lst[mid]) / 2.0 else: # If odd number of elements return lst[mid]"},{"question":"It\'s the annual hackathon at the company, and the team is responsible for creating pairs for the competition. Each participant has a skill level, and the goal is to form pairs such that the sum of skill levels for each pair is as balanced as possible across all pairs. Additionally, each pair must consist of exactly two participants. Nina, a data analyst, wants to impress her team by finding the most optimal pairing strategy. Unfortunately, she isn\'t very experienced in programming. Can you help her find the pairs with the closest skill level sums? Input Format: total number of participants skill_levels_array (containing the skill levels of all participants) Output Format: Balanced pairs (each pair\'s skill levels on a new line). Constraints: 2 ≤ number of participants ≤ 20 1 ≤ skill levels ≤ 100 The number of participants will always be even. SAMPLE INPUT 4 1 4 3 2 SAMPLE OUTPUT 1 4 2 3 Explanation Pairs (1, 4) and (2, 3) result in sums of 5 and 5, which are the closest possible to each other.","solution":"def form_balanced_pairs(total_participants, skill_levels): Forms pairs of participants such that the sum of their skill levels is as balanced as possible. Parameters: total_participants (int): The total number of participants. skill_levels (list of int): The skill levels of the participants. Returns: list of tuple: A list of tuples where each tuple represents a pair of participants. sorted_levels = sorted(skill_levels) pairs = [] for i in range(total_participants // 2): pairs.append((sorted_levels[i], sorted_levels[total_participants - 1 - i])) return pairs # Example usage # total_participants = 4 # skill_levels = [1, 4, 3, 2] # output_pairs = form_balanced_pairs(total_participants, skill_levels) # for pair in output_pairs: # print(pair)"},{"question":"# Task You have a rectangular grid of cells with `m` rows and `n` columns. Each cell in the grid can be in one of two states: populated (represented by 1) or unpopulated (represented by 0). The grid evolves over discrete time steps according to the following rules: 1. Any populated cell with fewer than two populated neighbors becomes unpopulated (underpopulation). 2. Any populated cell with two or three populated neighbors stays populated. 3. Any populated cell with more than three populated neighbors becomes unpopulated (overpopulation). 4. Any unpopulated cell with exactly three populated neighbors becomes populated (reproduction). The neighbors of a cell are the eight cells adjacent to it horizontally, vertically, or diagonally. Write a function to determine the state of the grid after `T` time steps. # Example For `initial_state = [[0, 1, 0],[0, 0, 1],[1, 1, 1]]` and `T = 1`, the result should be: ``` [[0, 0, 0], [1, 0, 1], [0, 1, 1]] ``` # Input / Output - `[input]` 2D list of integers `initial_state` - A list of lists where each inner list represents a row of the grid. Each integer in the inner lists is either 0 or 1. - `[input]` integer `T` - The number of time steps to simulate. `0 ≤ T ≤ 1000`. - `[output]` 2D list of integers - A list of lists representing the state of the grid after `T` time steps. Each cell should be either 0 or 1.","solution":"def get_next_state(grid): m, n = len(grid), len(grid[0]) next_grid = [[0] * n for _ in range(m)] def count_live_neighbors(x, y): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1: count += 1 return count for i in range(m): for j in range(n): live_neighbors = count_live_neighbors(i, j) if grid[i][j] == 1: if live_neighbors < 2 or live_neighbors > 3: next_grid[i][j] = 0 else: next_grid[i][j] = 1 else: if live_neighbors == 3: next_grid[i][j] = 1 else: next_grid[i][j] = 0 return next_grid def game_of_life(initial_state, T): grid = initial_state for _ in range(T): grid = get_next_state(grid) return grid"},{"question":"Chef has been invited to a dinner party and is asked to prepare a special dish that combines several ingredients with specific nutritional values. Chef is given a list of ingredients, each with a calorie count. The special dish should have an exact total calorie count. Given the required total calorie count and the list of available ingredients, determine if it\'s possible to combine a subset of these ingredients such that their total calorie count matches the required amount. Write a function `can_prepare_dish(calories, ingredients)` that takes two arguments: 1. `calories` (an integer, 1 ≤ calories ≤ 10,000) — the required total calorie count. 2. `ingredients` (a list of integers representing the calorie counts of available ingredients, 1 ≤ each calorie count ≤ 1,000 and 1 ≤ number of ingredients ≤ 1,000). Return `True` if it\'s possible to prepare the dish with the exact calorie count, otherwise return `False`. # Examples Example 1: ```python print(can_prepare_dish(8, [3, 34, 4, 12, 5, 2])) ``` Output: ```python True ``` Explanation: There exists a subset (3, 5) whose sum is 8. Example 2: ```python print(can_prepare_dish(30, [3, 34, 4, 12, 5, 2])) ``` Output: ```python False ``` Explanation: There is no subset whose sum is 30. # Note This problem can be solved using dynamic programming, particularly the subset sum problem algorithm. ```python def can_prepare_dish(calories, ingredients): # Implementation goes here ``` Use this function signature and write your solution.","solution":"def can_prepare_dish(calories, ingredients): Determines if it\'s possible to combine a subset of ingredients such that their total calorie count matches the required amount. Args: calories (int): The required total calorie count. ingredients (List[int]): A list of integers representing the calorie counts of available ingredients. Returns: bool: True if it\'s possible to achieve the exact calorie count, otherwise False. n = len(ingredients) # Initialize a list to store whether a specific calorie count can be achieved dp = [False] * (calories + 1) dp[0] = True # 0 calories can always be achieved with an empty subset # Populate the dp array for i in range(n): for j in range(calories, ingredients[i] - 1, -1): if dp[j - ingredients[i]]: dp[j] = True return dp[calories]"},{"question":"You are given an array of integers, where each integer appears exactly three times except for one integer which appears exactly once. Write a function to find the integer that appears only once. Function Description: Complete the `findUnique` function in the editor below. `findUnique` has the following parameters: - `int[] nums`: an array of integers where each element appears exactly three times except for one that appears once. Returns: - `int`: the single integer that appears only once. Input Format: The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers, representing the elements of the array. Constraints: 1 leq n leq 10^4 -2^{31} leq nums[i] leq 2^{31} - 1 Sample Input 0: 7 2 2 3 2 4 4 4 Sample Output 0: 3 Explanation 0: - The array `[2, 2, 3, 2, 4, 4, 4]` has all elements appearing three times except for `3` which appears once. Hence, the output is `3`. Sample Input 1: 10 0 1 0 1 0 1 50 77 77 77 Sample Output 1: 50 Explanation 1: - The array `[0, 1, 0, 1, 0, 1, 50, 77, 77, 77]` has all elements appearing three times except for `50` which appears once. Hence, the output is `50`.","solution":"def findUnique(nums): Returns the element that appears exactly once in the array where each other element appears exactly three times. :param nums: List[int], array of integers where each element appears exactly three times except for one :return: int, the single element that appears only once ones, twos = 0, 0 for num in nums: # `ones & num` will be the bits that are there in both `ones` and current `num` twos |= ones & num # XOR the new bits with `ones` ones ^= num # `common_bit_mask` will be the mask where both `ones` and `twos` has bits set common_bit_mask = ~(ones & twos) # Remove these bits from `ones` ones &= common_bit_mask # Remove these bits from `twos` twos &= common_bit_mask return ones"},{"question":"Check if a given string is a valid palindrome after removing at most one character. A string is considered a palindrome when it reads the same backward as forward. Examples: ``` \\"abca\\" => true (remove \'c\' => \\"aba\\") \\"racecar\\" => true (no need to remove any character) \\"deified\\" => true (no need to remove any character) \\"stone\\" => false (cannot form a palindrome by removing one character) ``` Constraints: - The string will only contain lowercase letters (a-z). - The length of the string will not exceed 10^5 characters. Function Signature: ```python def valid_palindrome(s: str) -> bool: pass ```","solution":"def valid_palindrome(s: str) -> bool: Returns True if the string can be a palindrome by removing at most one character, otherwise returns False. def is_palindrome_range(i, j): Helper function to check if the substring s[i:j+1] is a palindrome. return all(s[k] == s[j - k + i] for k in range(i, j)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Check by removing the character at left or at right return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True"},{"question":"A mysterious new organism has been discovered in the forest of BioLand. The organism grows at a specific rate and follows these rules: - On day 0, the organism\'s size is 1 unit. - For the next 5 days (from day 1 to day 5), the organism\'s size triples each day. - From day 6 onwards, the organism\'s size increases by a factor of 5 every 2 days. You are given the day D, and you need to find out the size of the organism at the end of day D. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line containing a single integer D — the day for which you need to find the size of the organism. ------ Output Format ------ - For each test case, print one line containing a single integer — the size of the organism in BioLand at the end of day D. ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ D ≤ 10^{5} ------ Sample Input 1 ------ 4 0 3 6 7 ------ Sample Output 1 ------ 1 27 243 1215 ------ Explanation 1 ------ Test Case 1: On day 0, the size of the organism is 1 unit. Test Case 2: - On day 1, the size is 3 times 1 = 3 units. - On day 2, the size is 3 times 3 = 9 units. - On day 3, the size is 3 times 9 = 27 units. Test Case 3: - On day 5, the size is 3^5 = 243 units. - On day 6, the size remains 243 units (no increase day, as the size only increases every 2 days from day 6). Test Case 4: - On day 5, the size is 3^5 = 243 units. - On day 6, the size remains 243 units. - On day 7, the size is 5 times 243 = 1215 units.","solution":"def organism_size(D): Calculate the size of the organism at the end of day D. if D == 0: return 1 elif 1 <= D <= 5: return 3 ** D else: initial_size = 3 ** 5 # size at the end of day 5 growth_days = (D - 5) // 2 size = initial_size * (5 ** growth_days) return size def process_test_cases(test_cases): Process multiple test cases. results = [] for D in test_cases: results.append(organism_size(D)) return results"},{"question":"There are N employees in a company, and every employee has a unique ID number from (1) to (N). Each employee reports directly to exactly one other employee, except the CEO, who does not report to anyone. You are given the report structure as a list of ((ID, ManagerID)) pairs, where (ID) is the ID number of the employee and (ManagerID) is the ID number of the manager they report to. If a manager ID is -1, it means the employee is the CEO. Your task is to determine the depth of the hierarchy tree, where the depth is defined as the number of levels from the CEO down to the furthest report. -----Input----- The first line contains the integer N (1 le N le 100), the number of employees in the company. Each of the following N lines contains two integers ID and ManagerID, representing the reporting structure. -----Output----- Output a single integer which is the depth of the hierarchy tree. -----Explanation of Sample Data----- In the first example, the structure is as follows: - Employee 1 (CEO) - Employee 2 reports to 1 - Employee 3 reports to 1 - Employee 4 reports to 3 Here, the depth is 3. In the second example, all employees report directly to the CEO: - Employee 1 (CEO) - Employee 2 reports to 1 - Employee 3 reports to 1 - Employee 4 reports to 1 Here, the depth is 2. -----Examples----- Sample Input 1: 4 1 -1 2 1 3 1 4 3 Sample Output 1: 3 Sample Input 2: 4 1 -1 2 1 3 1 4 1 Sample Output 2: 2","solution":"def find_hierarchy_depth(N, relations): from collections import defaultdict, deque # Building the adjacency list for the hierarchy tree tree = defaultdict(list) for emp, mgr in relations: if mgr != -1: tree[mgr].append(emp) else: ceo = emp # BFS to find the depth of the tree queue = deque([(ceo, 1)]) # (current node, current depth) max_depth = 0 while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) for subordinate in tree[node]: queue.append((subordinate, depth + 1)) return max_depth"},{"question":"Write a program to count the number of vowels (a, e, i, o, u) in each sentence from the given input. The program should handle both uppercase and lowercase vowels. For the input, the first line contains an integer `n` which represents the number of sentences (n <= 100). Each of the next n lines contains one sentence. Your job is to output the number of vowels in each sentence. SAMPLE INPUT 3 Hello world This is a test Python is fun SAMPLE OUTPUT 3 vowels 4 vowels 3 vowels Explanation EXAMPLE 1:- In the sentence \\"Hello world\\", the vowels are \'e\', \'o\', and \'o\'. So the total number of vowels is 3. EXAMPLE 2:- In the sentence \\"This is a test\\", the vowels are \'i\', \'i\', \'a\', and \'e\'. So the total number of vowels is 4. EXAMPLE 3:- In the sentence \\"Python is fun\\", the vowels are \'o\', \'i\', and \'u\'. So the total number of vowels is 3.","solution":"def count_vowels(sentences): Returns the number of vowels in each sentence from the given list of sentences. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\', \'A\', \'E\', \'I\', \'O\', \'U\'} result = [] for sentence in sentences: count = sum(1 for char in sentence if char in vowels) result.append(f\\"{count} vowels\\") return result"},{"question":"Problem statement: You are given the task of developing a new sorting algorithm named \\"Twist Sort\\". This algorithm sorts an array of n integers in a unique way. Instead of sorting the entire array, Twist Sort sorts pairs of adjacent elements and iteratively merges these pairs. Here\'s how Twist Sort works: 1. Divide the array into pairs of adjacent elements. 2. Sort each pair in non-decreasing order. 3. Merge these sorted pairs by comparing the first element of each pair with adjacent pairs. 4. Repeat the process until the entire array is sorted. Write a function `twist_sort` that takes as input a list of n integers and returns the sorted list using Twist Sort. Function signature: ```python def twist_sort(arr: List[int]) -> List[int]: ``` # Input - A list of n integers `arr` (1 ≤ n ≤ 100000). # Output - A sorted list of n integers. # Example Input: ``` [4, 3, 2, 8, 1, 5] ``` Output: ``` [1, 2, 3, 4, 5, 8] ``` Input: ``` [10, 7, 5, 2, 9] ``` Output: ``` [2, 5, 7, 9, 10] ``` # Constraints 1. All integers in the list `arr` are within the range from -10^6 to 10^6. 2. The number of elements n in the list will not exceed 100000. # Notes - You are expected to implement the Twist Sort algorithm as described. - The sorting of pairs and merging of sorted segments must be carried out as per the described algorithm.","solution":"def twist_sort(arr): Sorts the array using the Twist Sort algorithm. n = len(arr) if n < 2: return arr[:] # Step 1: Sort adjacent pairs sorted_pairs = [] for i in range(0, n - 1, 2): if arr[i] > arr[i + 1]: sorted_pairs.append((arr[i + 1], arr[i])) else: sorted_pairs.append((arr[i], arr[i + 1])) if n % 2 == 1: sorted_pairs.append((arr[-1],)) # Step 2: Iteratively merge the pairs while len(sorted_pairs) > 1: new_pairs = [] i = 0 while i < len(sorted_pairs) - 1: new_pairs.append(_merge(sorted_pairs[i], sorted_pairs[i + 1])) i += 2 if len(sorted_pairs) % 2 == 1: new_pairs.append(sorted_pairs[-1]) sorted_pairs = new_pairs return list(sorted_pairs[0]) def _merge(pair1, pair2): Merges two sorted pairs into one. merged = [] i, j = 0, 0 while i < len(pair1) and j < len(pair2): if pair1[i] <= pair2[j]: merged.append(pair1[i]) i += 1 else: merged.append(pair2[j]) j += 1 while i < len(pair1): merged.append(pair1[i]) i += 1 while j < len(pair2): merged.append(pair2[j]) j += 1 return tuple(merged)"},{"question":"Problem description Given an input string consisting of lowercase alphabets and spaces, return the first non-repeating character in the string. If every character in the string repeats, return a single space. Ignore spaces in the string when checking for non-repeating characters. Input: - A single line string with lowercase alphabets and spaces (1 ≤ length ≤ 1000). Output: - A single character, which is the first non-repeating character in the string, or a single space if all characters repeat. Examples: Input: ``` this is a test string ``` Output: ``` h ``` Input: ``` aabbcc ``` Output: ``` ``` Explanation: In the first example, the character \'h\' is the first non-repeating character in the string \\"this is a test string\\". In the second example, all characters repeat, so the output is a single space.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s, or a single space if all characters repeat. Spaces in the string are ignored. from collections import OrderedDict char_count = OrderedDict() # Count occurrences of each character ignoring spaces for char in s: if char != \' \': if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char, count in char_count.items(): if count == 1: return char return \' \'"},{"question":"In a university, each student can enroll in exactly one course among the available three courses, namely Math, Science, and Arts. Each of these courses is denoted by an uppercase letter \'M\', \'S\', or \'A\' respectively. A string T of length 3 represents the enrollment status for three students where the i-th character of T is the course student i is enrolled in. To facilitate group projects, any two students enrolled in different courses will be assigned a project together. Determine if there is at least one pair of students that will be assigned a project together. -----Constraints----- - Each character of T is \'M\', \'S\', or \'A\'. - |T| = 3 -----Input----- Input is given from Standard Input in the following format: T -----Output----- If there is at least one pair of students that will be assigned a project together, print Yes; otherwise, print No. -----Sample Input----- MSA -----Sample Output----- Yes Student 1 is enrolled in Math, Student 2 is enrolled in Science, and Student 3 is enrolled in Arts. Therefore, every pair of students is enrolled in different courses, so they will be assigned a project together. Hence, the output is Yes.","solution":"def check_assignments(T): Determines if there is at least one pair of students that will be assigned a project together. :param T: A string of length 3 representing the enrollment status of three students. :return: \\"Yes\\" if there is at least one pair of students that will be assigned a project together, otherwise \\"No\\". if len(set(T)) > 1: return \\"Yes\\" return \\"No\\""},{"question":"A local bakery offers two types of discount plans for their members: - Plan 1: Every third cake is free. You pay for 2 out of every 3 cakes. - Plan 2: You get a discount of C yen on each cake\'s original price D yen. Calculate the minimum cost to buy M cakes using either of the two discount plans. -----Constraints----- - 1≤M≤100 - 1≤C<D≤100 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: M C D -----Output----- When the minimum cost is x yen, print the value of x. -----Sample Input----- 9 5 20 -----Sample Output----- 120 - If you choose Plan 1, for 9 cakes, 3 out of 9 cakes will be free. So, you pay for 6 cakes. Total cost = 6×20 = 120 yen. - If you choose Plan 2, each cake will have a discount of 5 yen. Total cost = 9×(20-5) = 9×15 = 135 yen. Thus, the minimum cost is 120 yen.","solution":"def minimum_cost(M, C, D): Returns the minimum cost to buy M cakes using either of the two discount plans. Plan 1: Every third cake is free. You pay for 2 out of every 3 cakes. Plan 2: You get a discount of C yen on each cake\'s original price D yen. # Plan 1: Calculate the cost when every third cake is free. full_price_cakes = (M // 3) * 2 + (M % 3) cost_plan1 = full_price_cakes * D # Plan 2: Calculate the cost with a discount of C yen per cake. cost_plan2 = M * (D - C) # Return the minimum cost of the two plans. return min(cost_plan1, cost_plan2)"},{"question":"Given a string representing an arithmetic expression that contains integers and the binary operators `+` and `-`, write a function that returns the result of that expression. Note that the arithmetic expression will not contain parentheses and will always be valid. For example: ```python evaluate_expression(\\"3+5-2\\") # returns 6 evaluate_expression(\\"10-2+4\\") # returns 12 evaluate_expression(\\"100\\") # returns 100 ``` Your task is to complete the function `evaluate_expression(expression: str) -> int`. The function should take a single parameter: - `expression` (a string representing the arithmetic expression) The function should return an integer which is the result of evaluating the arithmetic expression.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a given arithmetic expression with binary operators + and - without parentheses and returns the result as an integer. # Initiate a variable to store running total total = 0 # Temp string to hold current number being processed num_str = \\"\\" # Last operator we encountered, default to + last_op = \'+\' # Iterate through the characters in the expression for char in expression: if char.isdigit(): num_str += char # Build the number string else: # Process the number we have collected so far if num_str: num = int(num_str) if last_op == \'+\': total += num elif last_op == \'-\': total -= num num_str = \\"\\" # Reset number string for next number # Update last_op to current operator last_op = char # Process the last collected number if num_str: num = int(num_str) if last_op == \'+\': total += num elif last_op == \'-\': total -= num return total"},{"question":"You are given a list of n integers and need to partition them into two subsets such that the absolute difference between the sums of elements in the two subsets is minimized. For example, let\'s say n = 4 and the list of integers is [1, 2, 3, 9]. The two subsets can be partitioned as [1, 2, 3] and [9] with sums 6 and 9 respectively. The absolute difference in this case is 3. Write a function to achieve the optimal partition and return the minimum absolute difference. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. The descriptions of the individual test cases follow. For each test case: - The first line contains an integer n (1 le n le 100) — the number of integers in the list. - The second line contains n integers separated by spaces, each denoted a_i (1 le a_i le 1000). It is guaranteed that the sum of n values over all test cases does not exceed 10^4. -----Output----- For each test case, output on a separate line: The minimum absolute difference between the sums of the two subsets. -----Example----- Input 3 4 1 2 3 9 3 4 1 7 3 2 8 4 Output 3 2 2 -----Note----- For the first example: - You can partition the list into subsets [1, 2, 3] and [9] with sums 6 and 9 respectively, resulting in an absolute difference of 3. For the second example: - You can partition the list into subsets [4, 1] and [7] with sums 5 and 7 respectively, resulting in an absolute difference of 2. For the third example: - You can partition the list into subsets [2, 4] and [8] with sums 6 and 8 respectively, resulting in an absolute difference of 2.","solution":"def min_subset_difference(n, arr): total_sum = sum(arr) half_sum = total_sum // 2 dp = [0] * (half_sum + 1) for num in arr: for j in range(half_sum, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) subset1_sum = dp[half_sum] subset2_sum = total_sum - subset1_sum return abs(subset2_sum - subset1_sum) def solve(t, test_cases): results = [] for n, arr in test_cases: result = min_subset_difference(n, arr) results.append(result) return results"},{"question":"You are working on developing a new feature for a social media application. The feature allows users to create custom playlists from their favorite songs. Each user provides a list of their like counts for each song in the playlist. You need to identify the song with the highest like count and return its index. If there are multiple songs with the highest like count, select the one that appears first in the playlist. Write a function that takes the number of songs in the playlist `N` and a list of `N` integers representing the like counts. Your function should return the index of the song with the highest like count. Constraints: * 1 leq N leq 200 * 1 leq like_count_i leq 1,000 Input: Input is given from Standard Input in the following format: ``` N like_count_0 like_count_1 ... like_count_{N-1} ``` Output: Print the index of the song with the highest like count. Examples: Input: ``` 5 10 20 20 10 30 ``` Output: ``` 4 ``` Input: ``` 6 5 5 5 5 5 5 ``` Output: ``` 0 ```","solution":"def highest_likes_index(N, like_counts): Returns the index of the song with the highest like count. If there are multiple songs with the highest like count, selects the one that appears first in the list. Parameters: N (int): The number of songs in the playlist. like_counts (list of int): A list of integers where each integer represents the like count of a song. Returns: int: The index of the song with the highest like count. max_likes = -1 max_index = -1 for i in range(N): if like_counts[i] > max_likes: max_likes = like_counts[i] max_index = i return max_index"},{"question":"A certain series of numbers is generated by repeatedly applying a mathematical operation to its elements. Starting with any positive integer `n`, the next number in the sequence is obtained by summing the squares of its digits. This process is repeated until it either reaches `1` (in which case the series is called a \\"happy sequence\\") or falls into a cycle that does not include `1` (in which case the series is called a \\"sad sequence\\"). Write a function `is_happy_number(num)` that determines whether the sequence starting with the given number results in it being happy or sad. Examples: ```python is_happy_number(19) == True # 19 is a happy number because the sequence is 19 -> 82 -> 68 -> 100 -> 1 is_happy_number(7) == True # 7 is a happy number because the sequence is 7 -> 49 -> 97 -> 130 -> 10 -> 1 is_happy_number(4) == False # 4 is a sad number because the sequence is 4 -> 16 -> 37 -> 58 -> 89 -> 145 -> 42 -> 20 -> 4 (cycle) is_happy_number(20) == False # 20 is a sad number because the sequence is 20 -> 4 and forms a cycle ``` The input `num` will always be a positive integer.","solution":"def is_happy_number(num): Determines whether the sequence starting with the given number results in it being a happy number. A happy number is defined as a number that eventually reaches 1 when replaced by the sum of the square of each digit. A sad number enters a repeating cycle that does not include 1. Args: - num: positive integer to check for happiness Returns: - bool: True if num is a happy number, False otherwise def sum_of_squares(n): return sum(int(digit)**2 for digit in str(n)) seen = set() while num != 1 and num not in seen: seen.add(num) num = sum_of_squares(num) return num == 1"},{"question":"You are given an array a of n distinct integers. You are allowed to perform the following operation any number of times: Select a subarray of length 3, and reverse it. Determine whether it is possible to sort the array in non-decreasing order using the allowed operation. -----Input----- The input contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). The first line of each test case contains a single integer n (3 le n le 1000) — the length of the array. The second line contains n distinct integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10000. -----Output----- For each test case, print \\"YES\\" if it is possible to sort the array in non-decreasing order using the allowed operation. Otherwise, print \\"NO\\". -----Examples----- Input 3 3 3 1 2 5 4 3 2 1 5 4 1 3 2 4 Output YES NO YES -----Note----- In the first test case, the array can be sorted by reversing the subarray [3, 1, 2]. In the second test case, it is impossible to sort the array using the allowed operation. In the third test case, the array can be sorted by reversing the subarray [3, 2, 1].","solution":"def can_sort_by_subarray_reversal(t, cases): results = [] for i in range(t): n, a = cases[i] sorted_a = sorted(a) # We need to see if we can transform `a` to `sorted_a` possible = False for j in range(n - 2): if sorted_a[j:j+3] == sorted(a[j:j+3]): possible = True break if possible or a == sorted_a: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Bob loves palindromic numbers. He finds them to be symmetrical and beautiful. Bob defines a number as palindromic if it reads the same backward as forward. Bob wants to know how many palindromic numbers exist in a given range [a, b]. Write a program to help Bob count the number of palindromic numbers between a and b, inclusive. Input The input contains two space-separated integers a and b (1 ≤ a ≤ b ≤ 1000). Output Output a single integer which is the count of palindromic numbers between a and b, inclusive. Examples Input 1 10 Output 9 Input 10 20 Output 1","solution":"def is_palindromic(number): Returns True if the number is palindromic, False otherwise. return str(number) == str(number)[::-1] def count_palindromic_numbers(a, b): Returns the count of palindromic numbers in the range [a, b] inclusive. count = 0 for number in range(a, b + 1): if is_palindromic(number): count += 1 return count"},{"question":"Given a string S consisting of lowercase English letters, determine if it is possible to rearrange the characters of S in such a way that every adjacent pair of characters are different. Constraints * The length of S is between 1 and 100 (inclusive). * S consists of lowercase English letters. Input Input is given from Standard Input in the following format: ``` S ``` Output If it is possible to rearrange S such that no two adjacent characters are the same, print `YES`; otherwise, print `NO`. Examples Input ``` aabb ``` Output ``` YES ``` Input ``` aaab ``` Output ``` NO ``` Input ``` a ``` Output ``` YES ``` Input ``` abcdefgh ``` Output ``` YES ```","solution":"from collections import Counter def can_rearrange(S: str) -> str: Determine if it is possible to rearrange the characters of S so that no two adjacent characters are the same. count = Counter(S) max_count = max(count.values()) if max_count > (len(S) + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"Given an integer array `arr` of size `N`, write a function to find the maximum and minimum number in the array. Example 1: Input: arr = [1, 3, 5, 7, 9] Output: 1 9 Explanation: The minimum number in the array is 1 and the maximum number is 9. Example 2: Input: arr = [2, 4, 6, 8, 10, 12] Output: 2 12 Explanation: The minimum number in the array is 2 and the maximum number is 12. Your Task: You don\'t need to read or print anything, Your task is to complete the function `find_min_max()` which takes an integer array `arr` and `N` as input parameters and returns a list of two numbers where the first number is the minimum value and the second number is the maximum value in the array. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^5 -10^6 <= arr[i] <= 10^6","solution":"def find_min_max(arr, N): Finds the minimum and maximum number in an array. Parameters: arr (list): List of integers. N (int): Number of elements in the list. Returns: list: A list containing the minimum and maximum number. if not arr or N <= 0: return [None, None] min_num = float(\'inf\') max_num = float(\'-inf\') for num in arr: if num < min_num: min_num = num if num > max_num: max_num = num return [min_num, max_num]"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},C={class:"card-container"},F={key:0,class:"empty-state"},P=["disabled"],j={key:0},M={key:1};function R(s,e,u,p,r,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(_,null,w(a.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+h(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",M,"Loading...")):(n(),i("span",j,"See more"))],8,P)):l("",!0)])}const D=d(A,[["render",R],["__scopeId","data-v-22edb930"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/15.md","filePath":"quotes/15.md"}'),L={name:"quotes/15.md"},G=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(D)]))}});export{B as __pageData,G as default};
