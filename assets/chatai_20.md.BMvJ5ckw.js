import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,h,m,a,r){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const j=d(k,[["render",O],["__scopeId","data-v-bd271ec3"]]),Y=JSON.parse('[{"question":"Simon lives in a town with a grid layout. The town has `n` intersections, each identified by a pair of coordinates `(xi, yi)`. Simon wants to place traffic lights at some of these intersections. However, he wants to ensure that no two intersections in a horizontal or vertical line both have traffic lights. Your task is to help him find the maximum number of intersections where he can place traffic lights without violating the above condition. The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of intersections. Each of the following n lines contains two integers xi and yi (1 ≤ xi, yi ≤ 1000) — the coordinates of the i-th intersection. All intersections\' locations are distinct. Output a single integer representing the maximum number of intersections where Simon can place traffic lights. Example: Input: 5 1 1 2 2 3 3 4 4 5 5 Output: 5 Explanation: In the given sample, no two intersections fall on the same horizontal or vertical line, so traffic lights can be placed at all intersections.","solution":"def max_traffic_lights(n, intersections): Find the maximum number of intersections where Simon can place traffic lights without violating the condition that no two intersections in a horizontal or vertical line both have traffic lights. Args: n (int): the number of intersections intersections (List[Tuple[int, int]]): list of intersections coordinates Returns: int: the maximum number of intersections where traffic lights can be placed rows = set() cols = set() for x, y in intersections: rows.add(x) cols.add(y) return min(len(rows), len(cols))"},{"question":"You are a risk assessment manager for an insurance company. Your company\'s policies are based on evaluating the potential risk scores of insured properties. Each property has a certain risk level associated with it and is characterized by a unique identification number. You are given a list of properties, each with its unique identification number and its risk score. Additionally, you are given the intervals of risk scores that correspond to different risk categories, such as low, medium, and high risk. To aid you in the evaluation, you need to write a function that processes this data and categorizes each property based on its risk score. # Input: - The first line contains three integers, `n`, `m`, and `k`: - `n` (1 ≤ n ≤ 10⁵): the number of properties. - `m` (1 ≤ m ≤ 10³): the number of unique risk categories. - `k` (1 ≤ k ≤ 10⁵): the number of category intervals. - The next line contains `n` integers, each representing the risk scores of the properties. - The following `n` lines contain two integers each: - The unique identification number of the property. - Its corresponding risk score. - The last `m` lines contain three values each: - A string describing the risk category (e.g., \\"Low\\" or \\"Medium\\" or \\"High\\"). - Two integers representing the inclusive range of risk scores for that category. - `k` integers representing the intervals within which the properties fall for that given range. Your task is to categorize each property into one of the risk categories based on its risk score and the provided intervals. # Output: - Print the unique identification number of each property followed by its respective risk category. # Example: Input: ``` 5 3 4 150 300 450 600 750 1001 150 1002 300 1003 450 1004 600 1005 750 Low 100 299 100 199 250 Medium 300 599 300 399 450 High 600 899 600 799 50 ``` Output: ``` 1001 Low 1002 Medium 1003 Medium 1004 High 1005 High ``` # Notes: - Each property will have a distinct identification number. - Each risk category will have a unique range of risk scores. - The intervals provided will cover all the risk scores without overlap, but all properties will have their scores falling into exactly one of the k partitions of the stated intervals. Write an efficient algorithm to determine the appropriate risk category for each property based on their risk score and the intervals provided for each range.","solution":"def categorize_properties(n, m, k, risk_scores, properties, categories): # Create a dictionary to map property id to its risk score property_dict = {pid: score for pid, score in properties} # Initialize result list to store the final categories of properties result = [] # Iterate over each property to determine its category for pid, score in properties: for category in categories: category_name = category[0] lower_bound = category[1] upper_bound = category[2] if lower_bound <= score <= upper_bound: result.append(f\\"{pid} {category_name}\\") break # Return the result as a list of strings return result"},{"question":"The festival organizers are planning a musical event across several stages, and they want to ensure that the performances on different stages do not overlap as much as possible, so attendees can enjoy multiple performances. Each stage has its list of performances, and each performance has a start and end time. The goal is to determine the maximum number of performances a single attendee can watch if they can move from one stage to another without any travel time. Each performance is represented by a tuple (stage, start_time, end_time), where - stage is a string identifying the stage where the performance is happening, - start_time and end_time are integers (in minutes past midnight) representing when the performance begins and ends, respectively. Given a list of performances, write a program to find the maximum number of non-overlapping performances an attendee can watch. Input: - The first line contains an integer N (1 ≤ N ≤ 1000) representing the number of performances. - The next N lines each contain a string and two integers, `stage`, `start_time`, and `end_time`, separated by spaces. Output: - Print the maximum number of non-overlapping performances an attendee can watch. Example: Input: 5 MainStage 0 30 MainStage 35 45 Stage1 0 15 Stage1 20 30 MainStage 50 70 Output: 4 Explanation: One possible way to watch the maximum number of performances is: Watch performance 1 (MainStage: 0-30) Move to Stage1 and watch performance 3 (Stage1: 0-15) Watch performance 4 (Stage1: 20-30) Go back to MainStage and watch performance 5 (MainStage: 50-70)","solution":"def max_non_overlapping_performances(performances): Finds the maximum number of non-overlapping performances an attendee can watch. Args: performances: list of tuples, where each tuple contains a performance identified by (stage, start_time, end_time) Returns: int: maximum number of non-overlapping performances # Sort performances by end time performances.sort(key=lambda x: x[2]) max_count = 0 last_end_time = -1 # Loop through the sorted performances and count non-overlapping ones for stage, start_time, end_time in performances: if start_time >= last_end_time: max_count += 1 last_end_time = end_time return max_count # Example usage: N = 5 performances = [ (\'MainStage\', 0, 30), (\'MainStage\', 35, 45), (\'Stage1\', 0, 15), (\'Stage1\', 20, 30), (\'MainStage\', 50, 70) ] print(max_non_overlapping_performances(performances)) # Output: 4"},{"question":"Given two strings, you are to determine if they are isomorphic. Two strings are isomorphic if the characters in one string can be replaced to get the other string, preserving the order of characters. More formally, the strings \'egg\' and \'add\' are isomorphic because \'e\' can be replaced with \'a\' and \'g\' can be replaced with \'d\'. However, \'foo\' and \'bar\' are not isomorphic because \'f\' mapping to \'b\' and \'o\' mapping to both \'a\' and \'r\' results in a contradiction. Write a function to determine if two strings are isomorphic. The function should return true if the strings are isomorphic, and false otherwise. The input consists of two lines: - The first line contains a string s of length n (1 le n le 100,000). - The second line contains a string t of length m (1 le m le 100,000). Print \\"yes\\" if the strings are isomorphic, and \\"no\\" otherwise. # Example Input ``` egg add ``` # Example Output ``` yes ``` # Example Input ``` foo bar ``` # Example Output ``` no ``` # Example Input ``` ab aa ``` # Example Output ``` no ```","solution":"def is_isomorphic(s, t): Determines if two strings s and t are isomorphic. Args: s (str): First string. t (str): Second string. Returns: str: \\"yes\\" if the strings are isomorphic, \\"no\\" otherwise. if len(s) != len(t): return \\"no\\" s_to_t = {} t_to_s = {} for c1, c2 in zip(s, t): if c1 in s_to_t and s_to_t[c1] != c2: return \\"no\\" if c2 in t_to_s and t_to_s[c2] != c1: return \\"no\\" s_to_t[c1] = c2 t_to_s[c2] = c1 return \\"yes\\""},{"question":"Alex loves playing with sequences of numbers. Today he discovered a sequence defined as follows: - Start with any positive integer x. - If x is even, divide it by 2. - If x is odd, multiply it by 3 and add 1. - Repeat the process with the new value of x until x becomes 1. This sequence is known as the Collatz sequence. Alex is curious about the number of steps it takes for a starting number x to reach 1. Given an integer x (1 ≤ x ≤ 10^6), help Alex determine the number of steps required for x to reach 1. The single line of input contains the integer x. Output the number of steps required to transform x into 1 using the described process. For example, for the input `6`, the output should be `8` as the sequence is: 6 -> 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1, which takes 8 steps.","solution":"def collatz_steps(x): Determines the number of steps required for a number x to reach 1 following the Collatz sequence rules. steps = 0 while x > 1: if x % 2 == 0: x = x // 2 else: x = 3 * x + 1 steps += 1 return steps"},{"question":"An online store organizes a flash sale where multiple products are available at huge discounts. During the sale, customers can buy products by selecting a start and end index on the product list, purchasing all the products between these indices (inclusive). Each product has a certain discount value, and customers aim to maximize the total discount for their purchases. However, there are some constraints to ensure fairness: 1. No customer can buy more than a certain number of products in a single transaction. 2. No customer is allowed to make more than one transaction. Given the list of products with their discount values, the maximum number of products allowed per transaction, and the total number of customers, determine the maximum discount a single customer can get while adhering to the constraints. # Input - The first line contains three integers n, k, and m (1 leq n, k, m leq 10^5): - n is the total number of products. - k is the maximum number of products allowed per transaction. - m is the total number of customers. - The second line contains n integers d_1, d_2, ..., d_n (1 leq d_i leq 10^4), where d_i represents the discount value of the i-th product. # Output - Print a single integer, the maximum discount a single customer can get. # Example Input ``` 5 3 4 10 20 30 40 50 ``` Output ``` 120 ``` Explanation In this example, the customer can buy up to 3 consecutive products. The maximum possible discount is achieved by selecting products with indices [3, 4, 5] which have discount values [30, 40, 50]. The total discount is 30 + 40 + 50 = 120. # Notes - Try to find an efficient solution that works within the constraints, as the input size can be large.","solution":"def max_discount(n, k, m, discounts): Returns the maximum discount a single customer can get while adhering to the constraints. Parameters: n (int): The total number of products. k (int): The maximum number of products allowed per transaction. m (int): The total number of customers. discounts (list of int): The discount values of the products. Returns: int: The maximum discount a single customer can get. # Initialize the maximum discount value max_discount_value = 0 # Use a sliding window to calculate the sum of products within the allowed transaction limit \'k\' current_window_sum = sum(discounts[:k]) max_discount_value = current_window_sum for i in range(1, n - k + 1): current_window_sum = current_window_sum - discounts[i - 1] + discounts[i + k - 1] if current_window_sum > max_discount_value: max_discount_value = current_window_sum return max_discount_value"},{"question":"Dev and his friend Raj are playing a game with a large matrix. They are given an n x m matrix of positive integers and need to find the sum of all unique elements in the matrix. An element is considered unique if it appears exactly once in the entire matrix. Your task is to help Dev and Raj find the sum of all unique elements in the matrix. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the matrix. Each of the next n lines contains m integers (1 ≤ a_ij ≤ 1000) — the elements of the matrix, where a_ij represents the element in the i-th row and j-th column. Output a single integer — the sum of all unique elements in the matrix. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 1 ``` Output ``` 35 ``` Explanation The matrix contains the elements [1, 2, 3, 4, 5, 6, 7, 8, 1]. The unique elements are [2, 3, 4, 5, 6, 7, 8]. Their sum is 2 + 3 + 4 + 5 + 6 + 7 + 8 = 35.","solution":"def sum_unique_elements(matrix): Returns the sum of all unique elements in the provided n x m matrix. An element is considered unique if it appears exactly once in the entire matrix. :param matrix: a list of lists representing the n x m matrix of positive integers :return: the sum of all unique elements from collections import Counter # Flatten the matrix into a single list flat_list = [item for row in matrix for item in row] # Count the frequency of each element element_count = Counter(flat_list) # Sum up elements that appear exactly once unique_sum = sum([value for value, count in element_count.items() if count == 1]) return unique_sum"},{"question":"You are given a series of n buildings in a row. Each building has a certain height. Your task is to determine the total number of buildings that will receive sunlight if the sunlight comes from the left side (i.e., from the direction of the first building towards the last building). A building will receive sunlight if and only if it is taller than all the buildings before it. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10000) — the heights of the buildings. Print a single line containing the number of buildings that will receive sunlight. Example 1: Input: 5 4 3 7 1 8 Output: 3 Example 2: Input: 4 1 2 3 4 Output: 4 In the first example, the buildings with heights 4, 7, and 8 receive sunlight. In the second example, all buildings receive sunlight.","solution":"def count_buildings_receiving_sunlight(n, heights): Returns the total number of buildings that receive sunlight. count = 0 max_height_so_far = 0 for height in heights: if height > max_height_so_far: count += 1 max_height_so_far = height return count"},{"question":"Given a binary tree, write a function to check whether it is a valid binary search tree (BST). A binary search tree is a binary tree in which for every node, the values of all the nodes in the left subtree are less than the node\'s value, and the values of all the nodes in the right subtree are greater than the node\'s value. You should write a function `isValidBST(root)` that receives the root node of the binary tree. Each node contains three attributes: `val`, `left`, and `right`, where `val` is the integer value of the node, and `left` and `right` are references to the left and right child nodes, respectively. **Input:** - A binary tree represented by its root node, where the number of nodes is between 1 and 10^4. - Each node\'s value is an integer within the range -2^31 to 2^31 - 1. **Output:** - Return \\"YES\\" if it is a valid BST, otherwise return \\"NO\\". **Example:** ``` 2 / 1 3 Input: root (the root node of the above tree) Output: \\"YES\\" ``` ``` 5 / 1 4 / 3 6 Input: root (the root node of the above tree) Output: \\"NO\\" ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isValidBST(root): def validate(node, low=float(\'-inf\'), high=float(\'inf\')): if not node: return True if not (low < node.val < high): return False return validate(node.left, low, node.val) and validate(node.right, node.val, high) return \\"YES\\" if validate(root) else \\"NO\\""},{"question":"A kindergarten class is organizing a sticker collection competition. Every day, each child is allowed to trade their stickers with another child. Each child begins with a certain number of stickers. The rules of trading are as follows: 1. A child can only trade a single sticker with another child. 2. A child can only trade if the child they are trading with has more stickers than any other child with whom they\'ve already traded that day. The goal is to find out the maximum number of unique trades that can be made in a day. You are given `n`, the number of children, and an array `s` of size `n` where `si` represents the number of stickers the i-th child has. The first line contains an integer `n` (1 ≤ n ≤ 100). The second line contains `n` integers `s1, s2, ..., sn` (1 ≤ si ≤ 100). Output a single integer — the maximum number of unique trades that can be made in a day. **Example:** **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` 6 ``` (Note: In this example, child 1 trades with child 2, 3, and 4; child 2 trades with child 3 and 4; child 3 trades with child 4. This totals to 6 unique trades).","solution":"def max_unique_trades(n, stickers): Returns the maximum number of unique trades that can be made in a day. :param n: Number of children. :param stickers: List of stickers each child has. :return: Maximum number of unique trades. stickers_sorted = sorted(stickers) trades = 0 for i in range(n): for j in range(i + 1, n): if stickers_sorted[j] > stickers_sorted[i]: trades += 1 return trades"},{"question":"Michael is a big fan of coding challenges. He has recently been working on a unique type of problem involving sequences of numbers. The sequence that Michael is dealing with has an interesting property: the difference between consecutive numbers is not fixed but follows a pattern based on prime numbers. Given a sequence of length `n`, determine the sum of the differences between consecutive prime-indexed numbers in the sequence. Prime-indexed numbers are the numbers at positions in the sequence that are prime numbers (considering the first position as 1). The first line of the input contains a single integer `n` (1 ≤ `n` ≤ 10^5) — the length of the sequence. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ `ai` ≤ 10^9), which represent the sequence of numbers. Output the sum of the differences between consecutive prime-indexed numbers in the sequence. If there is only one prime-indexed number or none, the sum is considered to be zero. In the first sample test with n = 6: The primes up to 6 are 2, 3, and 5. The prime-indexed numbers are a2 = 3, a3 = 10, and a5 = 20. The sum of differences is (10 - 3) + (20 - 10) = 17. In the second sample test with n = 4: The primes up to 4 are 2 and 3. The prime-indexed numbers are a2 = 25 and a3 = 30. The sum of differences is (30 - 25) = 5. Example: Input: 6 1 3 10 4 20 7 Output: 17 Input: 4 10 25 30 40 Output: 5","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_prime_index_differences(n, sequence): prime_indices = [i for i in range(1, n + 1) if is_prime(i)] if len(prime_indices) <= 1: return 0 sum_differences = 0 for i in range(1, len(prime_indices)): sum_differences += sequence[prime_indices[i] - 1] - sequence[prime_indices[i - 1] - 1] return sum_differences # Example usage: # n = 6 # sequence = [1, 3, 10, 4, 20, 7] # print(sum_prime_index_differences(n, sequence)) # Output: 17"},{"question":"A company has hired you to create a network of streetlights for a new city block. The city block can be represented as a 2D grid of size n x n. Some cells in the grid contain obstacles where it is not possible to install a streetlight. Each streetlight illuminates all cells in its row and column unless blocked by an obstacle. Your task is to determine the minimum number of streetlights needed to ensure that every cell without an obstacle is illuminated. The first line contains two integers n and k (1 ≤ n ≤ 500, 0 ≤ k ≤ n * n) — the size of the grid and the number of cells that contain obstacles. Each of the next k lines contains two integers xi and yi (1 ≤ xi, yi ≤ n) — the coordinates of the cells that contain obstacles. Print a single integer — the minimum number of streetlights needed to illuminate all cells without obstacles. Example: Input: 4 2 2 2 3 3 Output: 4 Explanation: In this example, a streetlight can be placed at (1, 1), (2, 1), (3, 1), and (4, 1) to ensure all non-obstacle cells are illuminated.","solution":"def minimum_streetlights(n, k, obstacles): rows_with_obstacles = set() cols_with_obstacles = set() for x, y in obstacles: rows_with_obstacles.add(x) cols_with_obstacles.add(y) # The number of streetlights needed is the maximum of the unique rows with obstacles and the unique columns with obstacles return max(len(rows_with_obstacles), len(cols_with_obstacles)) # Driver code to test solution # Test case n = 4 k = 2 obstacles = [(2, 2), (3, 3)] print(minimum_streetlights(n, k, obstacles)) # Expected Output: 2"},{"question":"Berland\'s roads are laid out in a grid of size n × m. The city has decided to set up construction zones where road maintenance work will be done. Each construction zone forms a rectangular area in the grid and can be represented by two points: the top-left corner and the bottom-right corner. For example, a construction zone from (r1, c1) to (r2, c2) will indicate that all the blocks (r, c) with r1 ≤ r ≤ r2 and c1 ≤ c ≤ c2 are under construction. However, for the city\'s annual festival, they want to ensure that there is at least one path from the top-left corner of the grid (0, 0) to the bottom-right corner of the grid (n-1, m-1) that is not affected by construction. Your task is to determine if it\'s possible to navigate from (0, 0) to (n-1, m-1) without passing through any construction zone. The first line of input contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 0 ≤ k ≤ 1000) — the dimensions of the grid and the number of construction zones respectively. Each of the next k lines contains four integers r1, c1, r2, c2 which represent the construction zones as described above (0 ≤ r1 ≤ r2 < n, 0 ≤ c1 ≤ c2 < m). Output \\"YES\\" if there is at least one path from (0, 0) to (n-1, m-1) without passing through any construction zones, and \\"NO\\" otherwise. # Example: Input: ``` 5 5 2 1 1 3 3 0 0 2 2 ``` Output: ``` NO ``` Input: ``` 5 5 1 1 1 2 2 ``` Output: ``` YES ``` # Note: In the first example, since one of the construction zones overlaps with the entirety of another path that connects the top-left and bottom-right corners, it\'s impossible to navigate through the grid without encountering the construction. Hence, the output is \\"NO\\". In the second example, the construction zone does not block all possible paths from (0, 0) to (n-1, m-1), so the output is \\"YES\\".","solution":"def is_path_possible(n, m, k, construction_zones): from collections import deque grid = [[0 for _ in range(m)] for _ in range(n)] # Mark construction zones on the grid for r1, c1, r2, c2 in construction_zones: for r in range(r1, r2+1): for c in range(c1, c2+1): grid[r][c] = 1 # BFS to find a path from (0, 0) to (n-1, m-1) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: r, c = queue.popleft() if (r, c) == (n-1, m-1): return \\"YES\\" for dr, dc in directions: rr, cc = r + dr, c + dc if 0 <= rr < n and 0 <= cc < m and grid[rr][cc] == 0 and (rr, cc) not in visited: queue.append((rr, cc)) visited.add((rr, cc)) return \\"NO\\""},{"question":"You are given an array of integers. Your task is to determine if there exists a pair of indices (i) and (j) (1 ≤ (i) < (j) ≤ n) such that the absolute difference between the elements at these indices is equal to a given integer (k). The first line of input contains two integers (n) (2 ≤ (n) ≤ 2 * 10^5) and (k) (1 ≤ (k) ≤ 10^9), where (n) is the length of the array and (k) is the target absolute difference. The second line of input contains (n) integers (a_1, a_2, ... , a_n) (1 ≤ (a_i) ≤ 10^9) representing the array elements. Print \\"YES\\" (without quotes) if there exists such a pair of indices, otherwise print \\"NO\\". In the first sample test, the pair of indices (2, 3) has elements 7 and 3 respectively, and their absolute difference is 4. In the second sample test, no pair of indices exists with an absolute difference of 3. In the third sample test, the pair of indices (1, 4) has elements 1 and 4 respectively, and their absolute difference is 3.","solution":"def has_pair_with_difference(arr, k): Determines if there exists a pair of indices in the array such that the absolute difference between the elements at these indices is equal to k. Parameters: arr (list): List of integers. k (int): The target absolute difference. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen_elements = set() for num in arr: if (num + k) in seen_elements or (num - k) in seen_elements: return \\"YES\\" seen_elements.add(num) return \\"NO\\""},{"question":"Alex loves sequences of numbers. He came up with a new game involving two players and an array of integers. The game is played as follows: 1. The players take turns, starting with Player 1. 2. On each turn, a player can remove one element from the array and add its value to their score. 3. The game ends when there are no elements left in the array. The player with the higher score wins. Both players play optimally, meaning they always make the move that maximizes their chances of winning (or at least, not losing). Given the array of integers, determine which player will win if both play optimally. Assume both players start with a score of 0. The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^3), the number of test cases. Each test case starts with a line containing a single integer n (1 ≤ n ≤ 10^5), the length of the array. The next line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), the elements of the array. For each test case, print \\"Player 1\\" if the first player will win, otherwise print \\"Player 2\\". **Example:** Input: ``` 2 3 1 2 3 4 1 2 3 4 ``` Output: ``` Player 1 Player 1 ```","solution":"def determine_winner(t, test_cases): results = [] for case in test_cases: n, array = case array.sort(reverse=True) player1_score = sum(array[0::2]) player2_score = sum(array[1::2]) if player1_score > player2_score: results.append(\\"Player 1\\") else: results.append(\\"Player 2\\") return results"},{"question":"Alice has a new assessment concerning a grid of n times m cells. Each cell of the grid can either be empty or contain an obstacle. Alice is free to traverse through any empty cell and travel in either up, down, left, or right direction, but she cannot move through cells with obstacles. Alice\'s task is to find all different shortest paths from the top-left cell (1,1) to the bottom-right cell (n,m). Two paths are considered different if they do not traverse through exactly the same cells in the same order. The amount of empty cells does not exceed 100 in total. Write a program that calculates the number of different shortest paths from the top-left to the bottom-right cell of the grid or determines it is impossible to reach the target cell. The first line contains two integers n and m (1 leq n, m leq 50) — the number of rows and columns in the grid. The next n lines contain m characters each. Each character is either \\".\\" (an empty cell) or \\"#\\" (an obstacle). Output the number of different shortest paths from the top-left to the bottom-right cell. If it\'s impossible to reach the bottom-right cell, output 0. # Example **Input:** ``` 3 3 ... .#. ... ``` **Output:** ``` 2 ``` **Input:** ``` 3 3 #.# .#. ... ``` **Output:** ``` 0 ```","solution":"from collections import deque def shortest_paths(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' queue = deque([(0, 0)]) visited = [[False for _ in range(m)] for _ in range(n)] visited[0][0] = True paths = [[0 for _ in range(m)] for _ in range(n)] paths[0][0] = 1 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): if not visited[nx][ny]: queue.append((nx, ny)) visited[nx][ny] = True if grid[nx][ny] == \'.\': paths[nx][ny] += paths[x][y] return paths[n-1][m-1] def parse_input(): import sys input = sys.stdin.read data = input().split() n, m = int(data[0]), int(data[1]) grid = [] index = 2 for i in range(n): grid.append(data[index + i]) return n, m, grid if __name__ == \\"__main__\\": n, m, grid = parse_input() print(shortest_paths(n, m, grid))"},{"question":"You\'re given a grid of size n x m where each cell can contain a letter or be empty. The player starts at the top-left corner (1, 1) and aims to reach the bottom-right corner (n, m). The player can only move to adjacent cells (up, down, left, right) and every move must be to a cell with the same letter as the first cell the player stepped on. Your task is to determine if it is possible for the player to reach the bottom-right corner under these conditions. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 50) — the dimensions of the grid. The next n lines contain m characters each, representing the cells of the grid. The characters are either lowercase English letters or a dot representing an empty cell. Print \\"YES\\" (without quotes) if there is a path from the top-left corner to the bottom-right corner under the given conditions. Otherwise, print \\"NO\\". **Example** Input: ``` 3 4 aaaa a..a aaaa ``` Output: ``` YES ``` Input: ``` 3 4 abca a..a abcd ``` Output: ``` NO ```","solution":"def can_reach_bottom_right(grid): n = len(grid) m = len(grid[0]) start_char = grid[0][0] if start_char == \'.\': return \\"NO\\" directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == start_char visited = [[False]*m for _ in range(n)] queue = [(0, 0)] visited[0][0] = True while queue: x, y = queue.pop(0) if (x == n-1 and y == m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given a sequence of integers. Your task is to determine if it is possible to reorder the sequence such that the sum of every two consecutive elements is odd. The first line of the input contains a single integer t (1 le t le 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 10^5) — the length of the sequence. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the sequence. Output \\"YES\\" if it is possible to reorder the sequence such that the sum of every two consecutive elements is odd, otherwise output \\"NO\\". A sum of two numbers is odd if one of the numbers is odd and the other is even. # Input ``` 3 4 1 2 3 4 3 2 4 6 5 1 3 5 7 9 ``` # Output ``` YES NO NO ``` # Explanation - For the first test case, one possible reordered sequence is [2, 1, 4, 3]. - For the second test case, there are no odd elements to pair with the even numbers, making it impossible. - For the third test case, all numbers are odd, so pairing them can\'t produce an odd sum.","solution":"def can_reorder_to_odd_sum(t, test_cases): results = [] for case in test_cases: n, sequence = case odd_count = sum(1 for x in sequence if x % 2 != 0) even_count = n - odd_count # Check if it\'s possible to have alternating odd and even sequences if odd_count > 0 and even_count > 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Petya is learning math and particularly enjoys solving math puzzles. His current task is to find all pairs of integers (a, b) that satisfy the equation a^2 + b^2 = n for a given integer (n). He finds this task challenging and has asked for your help. Write a program that takes a positive integer (n as input and outputs all unique pairs of integers (a and (b such that (a^2 + b^2 = n. The order of pairs doesn\'t matter, i.e., the pair (a, b) is considered the same as (b, a). If there are no such pairs, your program should output \\"No pairs found\\". # Input - A single integer (n ((1 leq n leq 10^4)). # Output - Print all unique pairs of integers (a, (b such that (a^2 + b^2 = n. Each pair should be on a separate line. - If there are no pairs, print \\"No pairs found\\". # Example ```plaintext Input: 5 Output: 1 2 ``` ```plaintext Input: 3 Output: No pairs found ``` ```plaintext Input: 50 Output: 1 7 5 5 ```","solution":"def find_pairs(n): Returns all pairs (a, b) such that a^2 + b^2 = n. Order of pairs doesn\'t matter, i.e., (a, b) is the same as (b, a). pairs = [] for a in range(int(n**0.5) + 1): b_squared = n - a**2 b = int(b_squared**0.5) if b**2 == b_squared and a <= b: pairs.append((a, b)) return pairs def display_pairs(n): pairs = find_pairs(n) if not pairs: print(\\"No pairs found\\") else: for a, b in pairs: print(a, b)"},{"question":"You are organizing a marathon event. Each participant has to complete a series of checkpoints in a certain order. However, not all participants can necessarily pass through all checkpoints due to various restrictions, such as physical capabilities or specific conditions. Your task is to determine if there\'s a valid way to assign participants to checkpoint routes so that all checkpoints are covered. Each participant has a specific range of checkpoints they can cover. Formally, each participant i can cover checkpoints from li to ri (inclusive). Each checkpoint j must be covered by at least one participant. The first line contains two integers n and m — the number of checkpoints (1 ≤ n ≤ 10^5) and the number of participants (1 ≤ m ≤ 10^5), respectively. Each of the next m lines contains two space-separated integers li and ri (1 ≤ li ≤ ri ≤ n) — the start and end checkpoints that the i-th participant can cover. If there is an assignment that ensures every checkpoint from 1 to n is covered by at least one participant, print \\"YES\\" (without quotes) in the first line. In the next line, print n space-separated integers. The j-th integer should be the number of the participant who will cover the j-th checkpoint. If there are multiple valid assignments, print any of them. If there is no valid assignment, print \\"NO\\" (without quotes). Example: Input: 5 3 1 3 2 5 4 5 Output: YES 1 1 2 2 2 This example indicates that the first participant can cover checkpoints 1 through 3, the second participant can cover checkpoints 2 through 5, and the third participant can cover checkpoints 4 and 5. One valid assignment is to have the first participant cover checkpoints 1 and 2, the second participant cover checkpoints 3, 4, and 5.","solution":"def assign_participants(n, m, ranges): Determine if all checkpoints can be covered by participants and generate an assignment plan if possible. Parameters: n (int): The total number of checkpoints. m (int): The total number of participants. ranges (List[Tuple[int, int]]): A list of tuples, each containing the start and end checkpoints a participant can cover. Returns: str: \\"YES\\" if a valid assignment exists, otherwise \\"NO\\". List[int]: An assignment list if a valid assignment exists. coverage = [0] * (n + 1) for li, ri in ranges: coverage[li - 1] += 1 if ri < n: coverage[ri] -= 1 for i in range(1, n): coverage[i] += coverage[i - 1] if any(c == 0 for c in coverage[:-1]): return \\"NO\\" assignment = [-1] * n for idx, (li, ri) in enumerate(ranges): for j in range(li - 1, ri): if assignment[j] == -1: assignment[j] = idx + 1 return \\"YES\\", assignment"},{"question":"Amira is fascinated with number sequences and their properties. One day, she explored a special type of sequence called a \\"magic subsequence\\". A magic subsequence of a given sequence is a subsequence where each element appears exactly twice. Amira wants to help you find the longest magic subsequence for given sequences. Each element in the sequence may appear multiple times, but in the magic subsequence, each element should occur exactly twice, and any two elements in the subsequence should maintain the order relative to their occurrence in the original sequence. The first line contains a single integer t (1 ≤ t ≤ 100) indicating the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 100000) — the length of the sequence. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — elements of the sequence. For each test case, print the length of the longest magic subsequence. # Example Input: ``` 2 5 1 2 2 1 3 6 1 1 2 2 2 1 ``` Output: ``` 4 4 ``` # Explanation For the first test case: The longest magic subsequence is [1, 2, 2, 1]. For the second test case: The longest magic subsequence is [1, 2, 2, 1]. Note that the magic subsequence must consist of elements that appear exactly twice, and the relative order of elements must follow the original sequence.","solution":"def longest_magic_subsequence(t, test_cases): results = [] for case in test_cases: n, sequence = case from collections import defaultdict # Dictionary to count occurrences of each element count = defaultdict(int) # Count the occurrences of each element for num in sequence: count[num] += 1 # Calculate the length of the longest magic subsequence length = 0 for num, cnt in count.items(): if cnt >= 2: length += 2 # Only count pairs results.append(length) return results"},{"question":"You are given a list of n tasks, each with a certain start time and end time. You have to find out the maximum number of non-overlapping tasks that you can complete if you can only work on one task at a time. Each task is defined by a pair of integers [start, end], representing the time during which you must be working on that task. # Input The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains a single integer n (1 leq n leq 10^5) — the number of tasks. Then follow n lines, each containing two integers start and end (1 leq start < end leq 10^9) which represent the start and end times of each task. # Output For each test case, print a single integer, the maximum number of non-overlapping tasks you can complete. # Example Input: ``` 2 3 1 3 2 4 3 5 4 1 2 2 3 3 4 4 5 ``` Output: ``` 2 4 ``` # Explanation In the first test case, you can choose tasks [1, 3] and [3, 5] to maximize the number of tasks. In the second test case, you can choose all tasks [1, 2], [2, 3], [3, 4], and [4, 5] as they do not overlap.","solution":"def max_non_overlapping_tasks(test_cases): results = [] for tasks in test_cases: tasks.sort(key=lambda x: x[1]) # sort by end times max_tasks = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: max_tasks += 1 last_end_time = end results.append(max_tasks) return results def process_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0].strip()) index = 1 test_cases = [] for _ in range(t): n = int(lines[index].strip()) tasks = [] for i in range(n): index += 1 start, end = map(int, lines[index].strip().split()) tasks.append((start, end)) test_cases.append(tasks) index += 1 return test_cases def format_output(results): return \\"n\\".join(map(str,results)) # Example usage: # input_string = \\"2n3n1 3n2 4n3 5n4n1 2n2 3n3 4n4 5\\" # test_cases = process_input(input_string) # max_tasks_per_case = max_non_overlapping_tasks(test_cases) # print(format_output(max_tasks_per_case))"},{"question":"Max wants to start a series of multiplayer online battle royale game servers. He has identified N potential server locations (numbered from 1 to N) and the cost to run a server in each location. Each server location has a certain amount of latency to each other server location. Players in the game will be randomly assigned to one of these servers. Max wants to ensure that for every player, the latency to the server they are assigned to is below a certain threshold. Therefore, he needs to choose some server locations to run the game servers in such a way that for every server location, the maximum latency to any other server location assigned to that same game server is minimized. Given the costs of running a server at each location and the latency between each pair of server locations, help Max determine which server locations he should choose and what the minimum running cost will be, while ensuring the latency requirement is met. # Input - The first line contains three integers N, K, and L (1 leq N leq 200,000, 1 leq K leq N, 0 leq L leq 10^9): the number of potential server locations, the number of game servers to run, and the maximum allowable latency. - The second line contains N integers. The i-th integer is C_i (1 leq C_i leq 10^9) which represents the cost to run a server at location i. - The next N lines contain N integers each. The j-th integer in the i-th line is D_{ij} (0 leq D_{ij} leq 10^9) which represents the latency between server locations i and j. # Output - Output a single integer: the minimum running cost to meet the latency requirement. If it\'s impossible to meet the latency requirement, output -1. # Example Input ``` 4 2 10 1 2 3 4 0 5 10 20 5 0 15 25 10 15 0 30 20 25 30 0 ``` Output ``` 3 ``` In this example, he should choose to run game servers at locations 1 and 2, which have costs of 1 and 2 respectively, making the total running cost 3. The maximum latency requirement of 10 is respected as all players in these locations have latency of at most 10 between them. If the latency requirement could not be met, the output would be -1.","solution":"def find_min_cost(N, K, L, costs, latencies): from scipy.sparse.csgraph import floyd_warshall import numpy as np # Step 1: Use Floyd-Warshall algorithm to find shortest paths between all pairs latencies = np.array(latencies) shortest_paths = floyd_warshall(latencies, directed=False) # Step 2: Check every combination of K server locations from itertools import combinations # initialize the minimum cost to a large number min_cost = float(\'inf\') for comb in combinations(range(N), K): max_latency = 0 total_cost = 0 for i in comb: total_cost += costs[i] for j in comb: if i != j: max_latency = max(max_latency, shortest_paths[i, j]) if max_latency <= L: min_cost = min(min_cost, total_cost) # Step 3: Check if there was a valid combination found return min_cost if min_cost != float(\'inf\') else -1 # Example input N = 4 K = 2 L = 10 costs = [1, 2, 3, 4] latencies = [ [0, 5, 10, 20], [5, 0, 15, 25], [10, 15, 0, 30], [20, 25, 30, 0] ] print(find_min_cost(N, K, L, costs, latencies))"},{"question":"You are given a series of tasks to complete, and each task has a specific time requirement. There are two workers, A and B, who can perform these tasks. Each worker can work on only one task at a time, and each task must be completed by one of the workers. Your goal is to assign tasks to the workers such that the tasks are completed in the minimum amount of time, considering that the time taken to complete the tasks is the maximum of the total time taken by either of the workers. The first line contains an integer n (1 ≤ n ≤ 20) — the number of tasks. The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 100) — the time required to complete each task. Print a single integer — the minimum possible time required to complete all the tasks. # Example Input: ``` 5 2 2 3 4 5 ``` Output: ``` 8 ``` Explanation: One optimal assignment of tasks could be: - Worker A: tasks with times 2, 4, 2 - Worker B: tasks with times 5, 3 Worker A takes 2 + 4 + 2 = 8 units of time. Worker B takes 5 + 3 = 8 units of time. Hence, the minimum possible amount of time to complete all the tasks is 8 units of time. In another example: Input: ``` 3 1 2 3 ``` Output: ``` 3 ``` Explanation: One optimal assignment of tasks could be: - Worker A: tasks with times 1, 2 - Worker B: task with time 3 Worker A takes 1 + 2 = 3 units of time. Worker B takes 3 units of time. Hence, the minimum possible amount of time to complete all the tasks is 3 units of time.","solution":"def minimum_task_time(n, tasks): def helper(index, time_a, time_b): if index == n: return max(time_a, time_b) task_time = tasks[index] # Assign current task to worker A assign_to_a = helper(index + 1, time_a + task_time, time_b) # Assign current task to worker B assign_to_b = helper(index + 1, time_a, time_b + task_time) # Return the minimum time achievable return min(assign_to_a, assign_to_b) return helper(0, 0, 0)"},{"question":"A company organizes a programming contest where participants have to solve various algorithmic problems. Each problem has two attributes: difficulty and duration. The goal is to select a subset of problems that maximizes the sum of difficulties while ensuring the total duration does not exceed a given limit. Given a list of problems where each problem is represented by its difficulty and duration, write a function to determine the maximum sum of difficulties of the subset of problems that can be chosen within the given time limit. The input format is as follows: - The first line contains two integers n and T (1 ≤ n ≤ 100, 1 ≤ T ≤ 1000) — the number of problems and the total duration limit. - The next n lines each contain two integers d and t (1 ≤ d, t ≤ 100) — the difficulty and duration of each problem. Output the maximum sum of difficulties of the chosen subset of problems. Example: ```plaintext Input: 4 10 5 2 6 3 7 1 8 4 Output: 26 Explanation: You can choose all problems within the duration limit of 10. The total difficulty is 5 + 6 + 7 + 8 = 26. ```","solution":"def max_difficulty(n, T, problems): Determines the maximum sum of difficulties of a subset of problems that can be solved within the given time limit. Args: n (int): Number of problems. T (int): Total duration limit. problems (list of tuples): Each tuple contains the difficulty and duration of a problem. Returns: int: Maximum sum of difficulties. dp = [0] * (T + 1) for d, t in problems: for j in range(T, t - 1, -1): dp[j] = max(dp[j], dp[j-t] + d) return max(dp)"},{"question":"You are given a grid of size `n x m` consisting of empty cells (\'.\') and blocks (\'#\'). Your task is to determine if there exists a path from the top-left corner of the grid (cell at (1, 1)) to the bottom-right corner of the grid (cell at (n, m)) that passes through each cell exactly once. If such a path exists, print \\"Yes\\"; otherwise, print \\"No\\". Note: The path can move only in four possible directions: left, right, up, or down, and must visit each cell exactly once without revisiting any cell. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 10^3) — the dimensions of the grid. - The following `n` lines each contain `m` characters (\'.\' or \'#\') — the grid description. # Output - Print \\"Yes\\" if there exists such a path, and \\"No\\" otherwise. # Sample Input ``` 4 4 .... .. .... .... ``` # Sample Output ``` No ``` # Explanation In the sample input, it is not possible to find a path that visits each cell exactly once due to the blocks present in the grid. Hence, the output is \\"No\\".","solution":"def is_valid(x, y, n, m, grid, visited): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and not visited[x][y] def find_hamiltonian_path(n, m, grid): def dfs(x, y, step): if step == n * m: return True visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, n, m, grid, visited): if dfs(nx, ny, step + 1): return True visited[x][y] = False return False if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"No\\" visited = [[False] * m for _ in range(n)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] if dfs(0, 0, 1): return \\"Yes\\" else: return \\"No\\""},{"question":"Given a rectangular grid of size n x m where each cell contains a certain number of candies, you can perform the following operation exactly k times: Pick any subgrid (a rectangular part of the grid) and take all the candies from it. Your goal is to maximize the number of candies you can collect after exactly k operations. The first line contains three integers n, m, and k (1 ≤ n, m ≤ 500, 1 ≤ k ≤ 5). The next n lines contain m integers each, representing the number of candies in each cell of the grid (0 ≤ candies in each cell ≤ 1000). Print a single integer which is the maximum number of candies you can collect after exactly k operations. Examples: Input: 3 3 2 1 2 3 4 5 6 7 8 9 Output: 45","solution":"def max_candies(n, m, k, grid): def max_candies_in_subgrid(row, col, height, width): return sum( grid[i][j] for i in range(row, row + height) for j in range(col, col + width) ) max_candies_total = 0 for _ in range(k): current_max_candies = 0 best_row, best_col, best_height, best_width = 0, 0, 1, 1 for row in range(n): for col in range(m): for height in range(1, n - row + 1): for width in range(1, m - col + 1): candies_collected = max_candies_in_subgrid(row, col, height, width) if candies_collected > current_max_candies: current_max_candies = candies_collected best_row, best_col, best_height, best_width = row, col, height, width max_candies_total += current_max_candies for i in range(best_row, best_row + best_height): for j in range(best_col, best_col + best_width): grid[i][j] = 0 return max_candies_total"},{"question":"Alice loves sorting arrays, but she is bored of regular sorting. This time, she wants to sort an array in a custom order defined by another array. You are given two arrays: - `order`: a permutation of the first `m` natural numbers (1 through m). - `arr`: an array of `n` integers, each integer is between 1 and m, inclusive. Your task is to sort `arr` such that the elements appear in the order specified by `order`. Specifically, if an integer `x` appears before an integer `y` in `order`, then all occurrences of `x` in `arr` should appear before any occurrence of `y` in `arr`. If an integer does not appear in `order`, it should be appended at the end of the sorted array, maintaining its relative order. # Input The first line contains an integer `m` (1 ≤ m ≤ 1000) - the size of the `order` array. The second line contains `m` integers - the `order` array. The third line contains an integer `n` (1 ≤ n ≤ 1000) - the size of the `arr` array. The fourth line contains `n` integers - the `arr` array. # Output Output a single line containing the sorted array. # Example Input 5 2 4 3 5 1 7 1 2 3 4 5 1 2 Output 2 2 4 3 5 1 1","solution":"def custom_sort(m, order, n, arr): Sorts `arr` based on the `order` specified. Elements in `arr` that do not appear in `order` are appended at the end in their relative order. :param m: int, size of the order array :param order: list of int, array denoting the order of elements :param n: int, size of the arr array :param arr: list of int, array to be sorted :return: list of int, sorted array based on the custom order order_map = {val: idx for idx, val in enumerate(order)} # Separate elements that are and are not in the order array in_order = [] not_in_order = [] for num in arr: if num in order_map: in_order.append((order_map[num], num)) else: not_in_order.append(num) # Sort elements that are in the order based on their index in the order array in_order.sort() # Extract the sorted values and combine with the not_in_order list sorted_arr = [num for _, num in in_order] + not_in_order return sorted_arr"},{"question":"You are given an m x n binary matrix grid, where 1 represents land, and 0 represents water. An island consists of a group of 1\'s that are connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water. Your task is to find the maximum area of an island in the given grid. An island\'s area is the number of cells with value 1 in the island. The first line contains two integers m and n (1 ≤ m, n ≤ 50) — the number of rows and columns in the grid. Each of the next m lines contains n integers, where each integer is 0 or 1. Print the maximum area of an island in the given grid. **Example:** Input: 4 5 1 1 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 0 1 1 Output: 4 In the first example, the first island has an area of 4 while the second island also has an area of 4. Hence, the maximum area is 4. In the second example, the maximum area is 0 as there are no islands.","solution":"def max_area_of_island(grid): Returns the maximum area of an island in the given grid. if not grid: return 0 rows, cols = len(grid), len(grid[0]) def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == 0: return 0 grid[r][c] = 0 # mark as visited area = 1 area += dfs(r + 1, c) area += dfs(r - 1, c) area += dfs(r, c + 1) area += dfs(r, c - 1) return area max_area = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: max_area = max(max_area, dfs(r, c)) return max_area"},{"question":"You have a collection of integers where each integer occurs an even number of times, except for one integer that occurs an odd number of times. Your task is to identify that integer. The first line of the input contains an integer n (1 leq n leq 10^6) — the total number of integers. The second line contains n integers, each between 1 and 10^9 inclusive. Print the integer that occurs an odd number of times. In the first example, the odd occurring integer is 3 since all other integers occur twice. In the second example, the odd occurring integer is 4 since all other integers occur twice. In the third example, the odd occurring integer is 7 since all other integers occur four times.","solution":"def find_odd_occurrence(arr): Finds the integer that occurs an odd number of times in the array. result = 0 for number in arr: result ^= number return result"},{"question":"Consider a grid-based maze composed of obstacles and one character. Each cell in the grid is represented by a character, where \'X\' denotes an obstacle, \'.\' denotes a free cell, and \'C\' denotes the initial position of the character. The character can move up, down, left, or right, but cannot move into cells marked as \'X\'. Your task is to determine if there is a path that the character can take to reach the bottom-right corner of the grid from the initial position marked as \'C\'. The input consists of multiple test cases. The first input line contains one integer t — the number of test cases (1 ≤ t ≤ 100). Each test case starts with two integers n and m — the dimensions of the maze grid (1 ≤ n, m ≤ 50). This is followed by n lines, each containing m characters describing the maze. For each test case, print \\"YES\\" if there is a valid path from the initial position \'C\' to the bottom-right corner, and \\"NO\\" otherwise. # Input ``` 2 4 4 .X.. ..X. .C.. .... 3 3 .X. .C. ..X ``` # Output ``` YES NO ```","solution":"def find_initial_position(maze, n, m): for i in range(n): for j in range(m): if maze[i][j] == \'C\': return (i, j) return None def is_valid_position(x, y, n, m, maze, visited): return 0 <= x < n and 0 <= y < m and maze[x][y] != \'X\' and not visited[x][y] def dfs(maze, x, y, n, m, visited): if x == n-1 and y == m-1: return True visited[x][y] = True directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_position(nx, ny, n, m, maze, visited): if dfs(maze, nx, ny, n, m, visited): return True return False def can_reach_end(t, test_cases): results = [] for case in range(t): n, m = test_cases[case][0] maze = test_cases[case][1] start_x, start_y = find_initial_position(maze, n, m) visited = [[False for _ in range(m)] for _ in range(n)] if dfs(maze, start_x, start_y, n, m, visited): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a galaxy far far away, there is a space station which acts as a hub for spacecrafts. Unfortunately, the station has a fuel leak problem, and you are tasked to determine how long it will take for the station to run out of fuel completely. The fuel leak occurs in a very specific manner: every second, the station loses fuel equal to the number of spacecrafts docked at it. However, at the end of every second, a random number of new spacecrafts (between 0 and a given maximum m) can dock at the station. You need to write a program that calculates the time in seconds for the space station to run out of fuel, given the initial amount of fuel f, the initial number of docked spacecrafts s, and the maximum number of new spacecrafts m that can dock per second. The input format is as follows: - The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. - For each test case, there are three space-separated integers: f (1 ≤ f ≤ 10^9) — the initial fuel amount, s (1 ≤ s ≤ 10^5) — the initial number of spacecrafts docked, and m (0 ≤ m ≤ 1000) — the maximum number of new spacecrafts that can dock per second. The program should output t integers, each representing the number of seconds it will take for the fuel to deplete for each test case. # Example: Input: 3 10 2 3 20 3 2 15 4 1 Output: 5 8 4 Explanation: - For the first test case, the fuel depletes as follows: - Second 1: Fuel = 10 - 2 = 8; 2 new spacecrafts arrive, so spacecrafts = 4. - Second 2: Fuel = 8 - 4 = 4; 1 new spacecraft arrives, so spacecrafts = 5. - Second 3: Fuel = 4 - 5 = -1 (Fuel is depleted). Hence, it takes 3 seconds for the fuel to deplete. Note: Since new spacecraft arrivals are determined randomly, this specific sequence of arrivals is hypothetical for illustration purposes. Note that each test case is independent and results will differ based on the random spacecraft arrivals each second.","solution":"import random def time_to_deplete(f, s, m): Calculates the time in seconds for the space station to run out of fuel. Args: f (int): Initial amount of fuel. s (int): Initial number of docked spacecrafts. m (int): Maximum number of new spacecrafts that can dock per second. Returns: int: Number of seconds it takes for the fuel to deplete. time = 0 while f > 0: time += 1 f -= s if f <= 0: break s += random.randint(0, m) return time def process_test_cases(test_cases): results = [] for f, s, m in test_cases: result = time_to_deplete(f, s, m) results.append(result) return results"},{"question":"You are given a matrix n times m filled with non-negative integers. You need to perform q queries on this matrix. For each query, you are given two indices r and c that specify the coordinates of a submatrix of size k times k, with the top-left corner at (r, c). Your task is to determine the sum of all elements within this submatrix. The first line of input contains three integers n, m, and k (1 leq n, m leq 1000 and 1 leq k leq min(n, m)). The next n lines contain m integers each, representing the matrix. The following line contains an integer q (1 leq q leq 10^5), the number of queries. Each of the next q lines contains two integers r and c (1 leq r leq n-k+1 and 1 leq c leq m-k+1), representing the top-left corner of a k times k submatrix. Print the sum of each submatrix for each query in the order they are presented. For example: Input: ``` 3 3 2 1 2 3 4 5 6 7 8 9 3 1 1 1 2 2 1 ``` Output: ``` 12 16 24 ``` Explanation: - The sum of the 2x2 submatrix starting at (1,1) is 1+2+4+5 = 12 - The sum of the 2x2 submatrix starting at (1,2) is 2+3+5+6 = 16 - The sum of the 2x2 submatrix starting at (2,1) is 4+5+7+8 = 24","solution":"def submatrix_sums(matrix, k, queries): Given a matrix and a list of queries, this function returns the sum of elements within a k x k submatrix for each query. n = len(matrix) m = len(matrix[0]) # Precompute prefix sums prefix_sums = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sums[i][j] = matrix[i-1][j-1] + prefix_sums[i-1][j] + prefix_sums[i][j-1] - prefix_sums[i-1][j-1] # Function to compute the sum of submatrix from (r, c) to (r+k-1, c+k-1) def get_submatrix_sum(r, c): r1 = r - 1 c1 = c - 1 r2 = r + k - 2 c2 = c + k - 2 return (prefix_sums[r2+1][c2+1] - prefix_sums[r1][c2+1] - prefix_sums[r2+1][c1] + prefix_sums[r1][c1]) result = [] for r, c in queries: result.append(get_submatrix_sum(r, c)) return result"},{"question":"You are given an array of positive integers arr of length n (1 le n le 10^5). You want to perform a cyclic right shift on the array any number of times (possibly zero). In each such operation, you take the last element of the array and move it to the front, and shift all other elements one position to the right. For example, performing one cyclic right shift on the array [1, 2, 3, 4, 5] results in the array [5, 1, 2, 3, 4]. Your task is to determine if it is possible to achieve a strictly increasing order in the array by performing multiple cyclic right shifts. The first line contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. Each test case is written on a separate line that contains one integer n (1 le n le 10^5) followed by n space-separated positive integers representing the array arr (1 le arr[i] le 10^9). Output t lines, each of them must contain the answer to the corresponding test case. Output YES if a strictly increasing order can be achieved through cyclic right shifts, and NO otherwise. For example: ``` Input: 3 5 3 4 5 1 2 4 1 3 2 4 3 6 7 8 Output: YES NO YES ```","solution":"def is_strictly_increasing_possible(t, cases): Determine if it\'s possible to achieve a strictly increasing array by performing multiple cyclic right shifts. results = [] for case in cases: n = case[0] arr = case[1:] sorted_arr = sorted(arr) for i in range(n): if arr[i:] + arr[:i] == sorted_arr: results.append(\\"YES\\") break else: results.append(\\"NO\\") return results # Example usage: # t = 3 # cases = [ # [5, 3, 4, 5, 1, 2], # [4, 1, 3, 2, 4], # [3, 6, 7, 8] # ] # result = is_strictly_increasing_possible(t, cases) # print(result) # Output: [\'YES\', \'NO\', \'YES\']"},{"question":"Little Y recently found a very interesting problem involving permutations and transformations. Let\'s consider the following problem. You are given a permutation of numbers from 1 to n. A permutation is an arrangement of n distinct numbers from 1 to n. Let s be the permutation given. You can apply the following transformation to s any number of times: choose an index i (1 ≤ i < n) and swap s[i] and s[i+1]. Your task is to determine how many unique permutations you can generate by applying the transformation any number of times on s. The first line contains an integer n (2 ≤ n ≤ 1000) — the length of the permutation. The second line contains n distinct integers from 1 to n — the permutation s. Print the number of distinct permutations that can be obtained by applying the given transformations on s. # Example Input ``` 4 3 1 4 2 ``` Output ``` 24 ``` Note: The permutations count should include the given permutation as well. The permutations generated by the transformation are considered unique.","solution":"from itertools import permutations def count_unique_permutations(n, s): Return the number of unique permutations that can be generated by applying the allowed transformations any number of times. all_permutations = set(permutations(s)) return len(all_permutations)"},{"question":"You are given an array of integers of length n. You need to determine the minimum number of moves required to make all the elements of the array equal. In one move, you can increment or decrement an element by 1. For example, you have an array [1, 3, 2, 2]. You can make the following moves: - Decrease 3 to 2 (1 move) - Increase 1 to 2 (1 move) The array [2, 2, 2, 2] is formed with 2 moves. Write a function that calculates the minimum number of moves required to make all the elements of the array equal. # Input The first line contains a single integer n (1 ≤ n ≤ 2 * 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. # Output Output a single integer — the minimum number of moves required to make all elements equal. # Example Input 4 1 3 2 2 Output 2","solution":"def min_moves_to_equal_elements(n, arr): Returns the minimum number of moves required to make all elements in the array equal. # Finding the median of the array arr_sorted = sorted(arr) median = arr_sorted[n // 2] # Calculating the total number of moves required moves = sum(abs(x - median) for x in arr) return moves"},{"question":"In a faraway kingdom of Algorithmia, the king has organized a grand tournament of knights. Each knight, identified by his unique number from 1 to n, will compete in a series of duels. The tournament employs a special scoring system: for each duel, the winning knight’s score increases by his opponent\'s number. Given the initial scores of the knights, your task is to determine the minimum total score difference between the highest-scoring knight and the lowest-scoring knight after all possible duels have been accounted for. # Input Format - The first line of the input contains one integer n (2 ≤ n ≤ 1000) — the number of knights. - The second line contains a sequence of n integers s1, s2, ..., sn (0 ≤ si ≤ 1000), where si is the initial score of the i-th knight. # Output Format - Output a single integer — the minimum possible difference between the highest and the lowest score after the scores are updated based on the duels. # Example Input: ``` 3 3 5 2 ``` Output: ``` 2 ``` # Explanation: Consider all pairwise duels between knights. After calculating the possible outcomes, the knights\' scores will be adjusted, and the difference between the maximum and minimum score can be minimized. Knights 1, 2, and 3 will have duels, leading to score adjustments. The optimal order reduces the largest difference between their scores to 2. Your task involves understanding the dueling and score updating process to derive the minimum score difference.","solution":"def min_score_difference(n, scores): Returns the minimum possible difference between the highest and lowest scores after all possible duels. scores.sort() min_diff = float(\'inf\') for i in range(1, n): # Calculate difference between each adjacent pair diff = scores[i] - scores[i-1] if diff < min_diff: min_diff = diff return min_diff"},{"question":"Given an array of integers representing the daily temperatures, you have to find out how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put `0` for that day instead. For example, given the list `temps = [73, 74, 75, 71, 69, 72, 76, 73]`, your output should be `[1, 1, 4, 2, 1, 1, 0, 0]`. Your function should return a list of integers, where each element represents the number of days you have to wait for a warmer temperature. # Constraints: - The length of `temps` will be in the range `[1, 10000]`. - Each temperature in `temps` will be in the range `[30, 100]`. **Function signature:** ```python def daily_temperatures(temps: List[int]) -> List[int]: pass ``` # Example: ```python # Input temps = [73, 74, 75, 71, 69, 72, 76, 73] # Output [1, 1, 4, 2, 1, 1, 0, 0] ``` # Explanation: - For day `0` (temperature `73`), you have to wait `1` day until temperature `74`. - For day `1` (temperature `74`), you have to wait `1` day until temperature `75`. - For day `2` (temperature `75`), you have to wait `4` days until temperature `76`. - For day `3` (temperature `71`), you have to wait `2` days until temperature `72`. - For day `4` (temperature `69`), you have to wait `1` day until temperature `72`. - For day `5` (temperature `72`), you have to wait `1` day until temperature `76`. - For day `6` (temperature `76`), there is no future day with a warmer temperature, so you put `0`. - For day `7` (temperature `73`), there is no future day with a warmer temperature, so you put `0`.","solution":"from typing import List def daily_temperatures(temps: List[int]) -> List[int]: Given an array of temperatures, returns a list of integers representing the number of days to wait for a warmer temperature. If there is no future day for which this is possible, puts 0 for that day instead. n = len(temps) result = [0] * n stack = [] for i in range(n): while stack and temps[i] > temps[stack[-1]]: idx = stack.pop() result[idx] = i - idx stack.append(i) return result"},{"question":"You are given a rectangular grid of size n x m consisting of lowercase English letters. You are allowed to move from a cell to one of the four adjacent cells (up, down, left, right) if and only if it shares the same letter as the current cell. You start from the cell (1, 1) and can end at any cell in the rightmost column. Determine if there exists a path from (1, 1) to any cell in the rightmost column such that all cells in the path contain the letter \'a\'. The first line contains two integers n and m (1 ≤ n, m ≤ 1000), which are the dimensions of the grid. Each of the next n lines contains a string of length m consisting of lowercase English letters, which represents the grid. Print \\"YES\\" if such a path exists, otherwise print \\"NO\\". In the first example, there exists a path from (1, 1) to (3, 3) through cells {(1, 1), (2, 1), (3, 1), (3, 2), (3, 3)}, thus the answer is \\"YES\\". In the second example, no such path exists, as there is no continuous sequence of \'a\' from the leftmost column to the rightmost column.","solution":"def has_path(grid, n, m): Returns \'YES\' if there exists a path of \'a\' characters from (1, 1) to any cell in the rightmost column, otherwise returns \'NO\'. if grid[0][0] != \'a\': return \\"NO\\" from collections import deque def in_bounds(x, y): return 0 <= x < n and 0 <= y < m directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if y == m - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if in_bounds(nx, ny) and not visited[nx][ny] and grid[nx][ny] == \'a\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"Sophie has been fascinated by prime numbers and decided to conduct an experiment involving arrays of integers. She wants to modify an array of integers in such a way that each element is increased to the nearest prime number that is greater than or equal to the element itself. To help Sophie with her experiment, you need to write a program that takes an array of integers as input and outputs an array where each integer is the nearest prime number greater than or equal to the original integer. The first line of the input contains one integer n (1 ≤ n ≤ 100) – the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) – the elements of the array. The output should be a single line containing n integers, where the ith integer is the smallest prime number that is greater than or equal to ai. For example, if the input array is [10, 15, 20], the output should be [11, 17, 23]. Note: The array may contain duplicates and the same prime number can be the nearest prime for multiple elements of the array. Example 1: Input: 3 10 15 20 Output: 11 17 23 Example 2: Input: 4 2 10 14 18 Output: 2 11 17 19","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def nearest_prime(n): Find the nearest prime number greater than or equal to n. while not is_prime(n): n += 1 return n def nearest_primes_array(arr): Modify array so that each element is the nearest prime number greater than or equal to the element. return [nearest_prime(x) for x in arr]"},{"question":"Kira has recently joined a new company, and she wants to make friends with her colleagues. The company has n employees, and some of them are already friends with each other. Each employee i has a unique friendliness level fi (1 ≤ fi ≤ 1000). Kira wants to form the largest possible group of friends so that in this group, each person is friends with at least one other person in the group and the difference in friendliness levels between any two people in the group is at most D (0 ≤ D ≤ 1000). You are given an integer n, the number of employees, an integer m, the number of pairs of friends, a list of n integers representing the friendliness levels of each employee, and m pairs of integers representing which employees are already friends. Your task is to find the size of the largest possible group Kira can form. The first line contains three integers n, m, and D (1 ≤ n ≤ 2000, 0 ≤ m ≤ 2000, 0 ≤ D ≤ 1000). The second line contains n integers fi (1 ≤ fi ≤ 1000), representing the friendliness levels of the employees. The next m lines each contain two integers xi and yi (1 ≤ xi, yi ≤ n, xi ≠ yi), indicating that employees xi and yi are friends. Output the size of the largest group Kira can form that satisfies the given conditions. In the first example, the best decision is to form a group with the first, third, and fourth employees because the difference in their friendliness levels is within D and they are all connected through friendships. In the second example, the optimal decision is to include all employees because the difference in their friendliness levels is within the given D and they form a connected group through friendships.","solution":"def find_largest_friendly_group(n, m, D, friendliness, friendships): from collections import defaultdict, deque def bfs(node, visited, graph, nodes): queue, group_nodes = deque([node]), [] while queue: s = queue.popleft() if s not in visited: visited.add(s) group_nodes.append(s) queue.extend(graph[s] - visited) nodes.extend(group_nodes) # Creating adjacency list for graph graph = defaultdict(set) for x, y in friendships: graph[x-1].add(y-1) graph[y-1].add(x-1) visited = set() groups = [] for i in range(n): if i not in visited: group = [] bfs(i, visited, graph, group) groups.append(group) def max_group_size(group): if not group: return 0 group.sort(key=lambda x: friendliness[x]) max_size = 1 i = 0 for j in range(1, len(group)): if friendliness[group[j]] - friendliness[group[i]] <= D: max_size = max(max_size, j - i + 1) else: i = j return max_size return max(max_group_size(group) for group in groups) # Example usage: n = 4 m = 3 D = 4 friendliness = [1, 100, 3, 5] friendships = [(1, 2), (2, 3), (3, 4)] print(find_largest_friendly_group(n, m, D, friendliness, friendships)) # Output: 3"},{"question":"During a holiday, three friends, Alice, Bob, and Charlie, decide to go on a trip. They plan to visit a series of cities numbered from 1 to n. However, their travel routes differ, and each city can only be visited by one friend at a time. Alice, Bob, and Charlie each have their own list of preferred cities they want to visit. If a city appears in multiple friends\' lists, priority is given to Alice, then Bob, and then Charlie in terms of who gets to visit that city. Formulate an optimal visiting sequence such that all cities are visited exactly once, and the priority rule is maintained. The input format is as follows: - The first line contains a single integer n (1 leq n leq 1000) — the number of cities. - The second line contains an integer a (1 leq a leq n) — the number of cities Alice wants to visit. - The following line contains a integers indicating the cities Alice wants to visit. - The next line contains an integer b (1 leq b leq n) — the number of cities Bob wants to visit. - The following line contains b integers indicating the cities Bob wants to visit. - The next line contains an integer c (1 leq c leq n) — the number of cities Charlie wants to visit. - The following line contains c integers indicating the cities Charlie wants to visit. Output: Print n lines, each containing a single integer and a character, representing the city number and the corresponding visitor\'s initial (\'A\' for Alice, \'B\' for Bob, \'C\' for Charlie). If the lists are provided as: ``` 5 3 1 2 3 2 3 4 2 4 5 ``` The output should be: ``` 1 A 2 A 3 A 4 B 5 C ``` Alice visits cities 1, 2, and 3 because she has the highest priority. Bob visits city 4 because the city appears in both Bob and Charlie\'s lists, but Bob has higher priority. Finally, Charlie visits city 5.","solution":"def plan_trip(n, a, alice_cities, b, bob_cities, c, charlie_cities): Determines the optimal visiting sequence for Alice, Bob, and Charlie with given priorities. # Create a city to visitor map city_to_visitor = {} # Alice\'s cities (highest priority) for city in alice_cities: city_to_visitor[city] = \'A\' # Bob\'s cities (second highest priority) for city in bob_cities: if city not in city_to_visitor: city_to_visitor[city] = \'B\' # Charlie\'s cities (lowest priority) for city in charlie_cities: if city not in city_to_visitor: city_to_visitor[city] = \'C\' # Prepare the output in a sorted manner based on city numbers output = [(city, city_to_visitor[city]) for city in range(1, n+1)] return output"},{"question":"Given the increasing pollution in urban areas, a new initiative has been taken to minimize air pollution. A city consists of n intersections connected by m roads, where each road has a pollution impact factor associated with it. The city must improve air quality by minimizing the pollution on a specific path from a starting intersection to a destination intersection. You are given n intersections (1 to n) and m two-way roads. Each road is described by three integers, u, v, and p, indicating there is a road connecting intersections u and v with a pollution impact factor p. Your task is to determine the minimum cumulative pollution from the starting intersection s to the destination intersection t. Input The first line of input contains four integers n, m, s, and t (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^6, 1 ≤ s, t ≤ n, s ≠ t) – the number of intersections, the number of roads, the starting intersection, and the destination intersection. The next m lines each contain three integers u, v, and p (1 ≤ u, v ≤ n, 1 ≤ p ≤ 10^9, u ≠ v) – indicating there is a road between intersections u and v with a pollution impact factor of p. It is guaranteed that there is at least one path from s to t. Output Print a single integer representing the minimum cumulative pollution from the starting intersection s to the destination intersection t. Example Input: 5 6 1 5 1 2 4 1 3 2 2 4 7 3 4 3 4 5 1 2 5 8 Output: 6 Explanation: The path with the minimum cumulative pollution from intersection 1 to intersection 5 is 1 → 3 → 4 → 5, with a pollution impact factor of 2 + 3 + 1 = 6.","solution":"import heapq from collections import defaultdict, deque def min_cumulative_pollution(n, m, s, t, roads): # Create graph as adjacency list graph = defaultdict(list) for u, v, p in roads: graph[u].append((v, p)) graph[v].append((u, p)) # Dijkstra\'s algorithm to find the shortest path from s to t based on pollution impact factor def dijkstra(source, target): # Min-heap to store the minimum pollution paths heap = [(0, source)] # Dictionary to store the minimum pollution to reach each node min_pollution = {i: float(\'inf\') for i in range(1, n+1)} min_pollution[source] = 0 while heap: current_pollution, current_node = heapq.heappop(heap) # If we reach the target, return the pollution value if current_node == target: return current_pollution # Explore neighbors for neighbor, pollution in graph[current_node]: new_pollution = current_pollution + pollution if new_pollution < min_pollution[neighbor]: min_pollution[neighbor] = new_pollution heapq.heappush(heap, (new_pollution, neighbor)) return -1 # In case there\'s no path, but the problem guarantees at least one path return dijkstra(s, t) # Example usage n = 5 m = 6 s = 1 t = 5 roads = [ (1, 2, 4), (1, 3, 2), (2, 4, 7), (3, 4, 3), (4, 5, 1), (2, 5, 8) ] print(min_cumulative_pollution(n, m, s, t, roads)) # Output should be 6"},{"question":"You are given two arrays of integers, `A` and `B`, both of length `n`. You have to perform the following operation no more than `k` times: you can choose any element from `A` and any element from `B` and swap them. Your goal is to maximize the sum of elements in array `A`. The first line contains two integers, `n` and `k` (1 ≤ n ≤ 100, 0 ≤ k ≤ n). The second line contains `n` integers, the elements of array `A`. The third line contains `n` integers, the elements of array `B`. Output a single integer, the maximum possible sum of elements in array `A` after performing the swap operation up to `k` times. In the example case, if `A` = [1, 2, 5], `B` = [8, 3, 1], and `k` = 2, the optimal strategy is to swap `1` from `A` with `8` from `B`, and `2` from `A` with `3` from `B`. The maximum possible sum of array `A` after these swaps is 16.","solution":"def maximize_sum_after_swaps(n, k, A, B): Maximizes the sum of elements in array A after performing the swap operation up to k times. n: Length of the arrays A and B. k: Maximum number of swaps allowed. A: List of integers representing the array A. B: List of integers representing the array B. Returns the maximum possible sum of elements in array A after performing swaps. A = sorted(A) B = sorted(B, reverse=True) for i in range(min(k, n)): if A[i] < B[i]: A[i], B[i] = B[i], A[i] else: break return sum(A)"},{"question":"You are given a grid of size n x m filled with non-negative integers. You need to perform q operations on the grid. Each operation is characterized by four values (x1, y1, x2, y2) which represent the top-left and bottom-right corners of a subgrid. For each operation, calculate the sum of all numbers in the specified subgrid. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the dimensions of the grid. Each of the next n lines contains m integers representing the elements of the grid, where each integer is between 0 and 1000 inclusive. The next line contains an integer q (1 ≤ q ≤ 100000) - the number of operations. Each of the next q lines contains four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m) defining the corners of the subgrid. For each operation, output a single integer - the sum of the subgrid specified by the operation. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 3 1 1 3 3 2 2 3 3 1 2 3 2 Output: 45 28 12","solution":"def calculate_subgrid_sums(n, m, grid, operations): # Create a prefix sum matrix prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] # Fill prefix sum matrix for i in range(n): for j in range(m): prefix_sum[i + 1][j + 1] = grid[i][j] + prefix_sum[i + 1][j] + prefix_sum[i][j + 1] - prefix_sum[i][j] # Function to calculate sum of subgrid (x1, y1) to (x2, y2) def subgrid_sum(x1, y1, x2, y2): return (prefix_sum[x2][y2] - prefix_sum[x1 - 1][y2] - prefix_sum[x2][y1 - 1] + prefix_sum[x1 - 1][y1 - 1]) result = [] for x1, y1, x2, y2 in operations: result.append(subgrid_sum(x1, y1, x2, y2)) return result"},{"question":"In a city, there are n intersections and m bidirectional roads connecting some pairs of these intersections. Each road has a unique positive integer length associated with it. The city planner wants to create a network of bike paths that has the following properties: 1. Every intersection is reachable from every other intersection using some combination of bike paths. 2. The total length of the bike paths is minimized. You are tasked with writing a program to find the shortest possible total length of the bike paths that form such a network. # Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 200000) — the number of intersections and the number of bidirectional roads, respectively. Then, the following m lines contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10000), denoting a road connecting intersections u and v with length w. It is guaranteed that the graph defined by these roads is connected. # Output Output a single integer — the minimum possible total length of the bike paths that meet the required properties. # Examples Example 1: Input: ``` 4 5 1 2 1 1 3 4 2 3 2 2 4 6 3 4 3 ``` Output: ``` 6 ``` Example 2: Input: ``` 3 3 1 2 5 2 3 4 1 3 1 ``` Output: ``` 5 ``` # Explanation In the first example, the minimum spanning tree includes the roads with lengths 1, 2, and 3, giving a total length of 6. In the second example, the minimum spanning tree consists of the roads with lengths 1 and 4, giving a total length of 5.","solution":"import heapq def minimum_bike_path_length(n, m, roads): Compute the minimum length of bike paths needed to connect all intersections. :param n: Number of intersections :param m: Number of bidirectional roads :param roads: List of tuples (u, v, w) representing roads with their lengths :return: Minimum total length of the bike paths that connect all intersections # Initialize the graph graph = [[] for _ in range(n)] for u, v, w in roads: graph[u-1].append((w, v-1)) graph[v-1].append((w, u-1)) # Minimum spanning tree using Prim\'s algorithm min_length = 0 visited = [False] * n min_heap = [(0, 0)] # (cost, start_node) while min_heap: cost, node = heapq.heappop(min_heap) if visited[node]: continue min_length += cost visited[node] = True for edge_cost, neighbor in graph[node]: if not visited[neighbor]: heapq.heappush(min_heap, (edge_cost, neighbor)) return min_length # Example usage if __name__ == \\"__main__\\": n, m = 4, 5 roads = [ (1, 2, 1), (1, 3, 4), (2, 3, 2), (2, 4, 6), (3, 4, 3) ] print(minimum_bike_path_length(n, m, roads)) # Output: 6"},{"question":"You are given an array of n integers a1, a2, ..., an. You are also given an integer k. You need to find the length of the shortest segment (continuous subarray) that has a sum greater than or equal to k. If there is no such segment, output -1. The first line contains two integers n (1 ≤ n ≤ 100,000) and k (1 ≤ k ≤ 10^9). The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9). Output one integer — the length of the shortest segment with a sum ≥ k. If there is no such segment, output -1. Example: Input: 10 15 5 1 3 5 10 7 4 9 2 8 Output: 2 Explanation: One of the shortest segments is from index 4 to 5, which sums up to 10+7=17. Hence, the length is 2.","solution":"def shortest_subarray_with_sum_at_least_k(n, k, arr): from collections import deque prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] deque_index = deque() min_length = float(\'inf\') for i in range(n + 1): while deque_index and prefix_sum[i] - prefix_sum[deque_index[0]] >= k: min_length = min(min_length, i - deque_index.popleft()) while deque_index and prefix_sum[i] <= prefix_sum[deque_index[-1]]: deque_index.pop() deque_index.append(i) return min_length if min_length != float(\'inf\') else -1"},{"question":"An online shopping platform has a system where users can add items to their shopping carts. Each item is represented by a product ID, and users can add multiple items (with possibly repeating product IDs) to their carts. The platform wants to keep track of the total number of distinct product IDs for each user\'s cart. Tragically, the platform experienced a data loss and only has the product IDs of the items, in the order they were added to the cart. You are given a sequence of product IDs representing the items added to the cart. Each ID is represented by a positive integer. Write a program that calculates the number of distinct product IDs in the cart. The input consists of multiple lines. The first line contains a single integer `t` (1 ≤ `t` ≤ 10) — the number of test cases. The first line of each test case contains an integer `n` (1 ≤ `n` ≤ 100,000) — the number of items added to the cart. The next line contains `n` integers, each of which represents a product ID (1 ≤ product ID ≤ 1,000,000). For each test case, print a single line containing the number of distinct product IDs in the cart. Sample Input: ``` 2 5 1 2 3 2 1 4 4 4 4 4 ``` Sample Output: ``` 3 1 ``` Explanation: In the first test case, the product IDs are [1, 2, 3, 2, 1], so there are 3 distinct product IDs: 1, 2, and 3. In the second test case, the product IDs are [4, 4, 4, 4], so there is only 1 distinct product ID: 4.","solution":"def distinct_product_ids(test_cases): results = [] for case in test_cases: t, items = case distinct_ids = len(set(items)) results.append(distinct_ids) return results def format_input_output(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) items = list(map(int, lines[index + 1].split())) test_cases.append((n, items)) index += 2 return test_cases def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"You are given an undirected graph of `n` nodes and `m` edges. You need to determine whether it is possible to remove some or all of the edges such that the resulting graph is still connected and forms a tree. A tree is an undirected graph with no cycles in which there is exactly one path between any two nodes. If it is possible to remove some edges to form a tree, print the edges that should remain in the graph. If there are multiple solutions, print any of them. If it is not possible to form a tree, print \\"-1\\". The first line contains integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000), representing the number of nodes and edges respectively. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n), representing an edge between node `u` and node `v`. If there are multiple valid outputs, any correct solution will be accepted. # Example Input ``` 4 5 1 2 2 3 3 4 4 1 1 3 ``` Output ``` 1 2 2 3 3 4 ``` Or ``` 1 2 2 3 4 3 ``` Or any other combination of edges that forms a tree. Explanation There are edges forming cycles in the given undirected graph. By removing some edges such that there are no cycles and all nodes are connected, the remaining edges form a tree. Input ``` 3 2 1 2 2 3 ``` Output ``` 1 2 2 3 ``` Explanation The given graph is already a tree, as it has no cycles and every pair of nodes are connected by exactly one path. Input ``` 2 0 ``` Output ``` -1 ``` Explanation The graph with no edges cannot be made into a tree. Therefore, the output is \\"-1\\". Note that there may be multiple ways to form a tree from the graph. Any correct tree formation is an acceptable output.","solution":"def find_tree_edges(n, m, edges): Determines if it is possible to remove edges such that the resulting graph is a connected tree. Parameters: - n: Number of nodes - m: Number of edges - edges: List of edge tuples (u, v) Returns: - List of edges that form a tree if it is possible, otherwise -1 if n == 1 and m == 0: return [] from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Depth-First Search to find all connected nodes visited = set() spanning_tree_edges = [] def dfs(node, parent): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: spanning_tree_edges.append((node, neighbor)) dfs(neighbor, node) # Start DFS from node 1 dfs(1, -1) # Check if all nodes are visited if len(visited) == n and len(spanning_tree_edges) == n - 1: return spanning_tree_edges return -1"},{"question":"You are given an array of integers and you need to perform operations to achieve a certain outcome. The goal is to make all elements of the array equal by incrementing or decrementing any element by 1 in each operation. The task is to calculate the minimum number of operations required to make all elements of the array equal. The first line of the input contains a single integer n (1 leq n leq 10^5) - the length of the array. The second line contains n integers a_1, a_2, ... , a_n (-10^9 leq a_i leq 10^9) - the elements of the array. Output a single integer - the minimum number of operations required to make all elements of the array equal. # Example Input: ``` 5 1 2 3 4 5 ``` Output: ``` 6 ``` Explanation: You can make all the numbers equal to 3 using the following operations: 1 -> 3 (2 operations), 2 -> 3 (1 operation), 3 -> 3 (0 operations), 4 -> 3 (1 operation), 5 -> 3 (2 operations). Therefore, the total number of operations is 2 + 1 + 0 + 1 + 2 = 6 operations.","solution":"def min_operations_to_equal_elements(n, arr): Given an array of integers, this function calculates the minimum number of operations required to make all elements equal. Incrementing or decrementing any element by 1 is considered a single operation. # The median minimizes the sum of absolute deviations (L1 norm) arr.sort() median = arr[n // 2] # Compute the total number of operations needed operations = sum(abs(median - x) for x in arr) return operations"},{"question":"Consider a connected undirected graph with n nodes and m edges. Each node is assigned a color from 1 to k. You need to answer q questions, each asking for the number of distinct colors in the shortest path between two given nodes, u and v. For each query, find the shortest path (in terms of number of edges) between u and v, and count the number of distinct colors of the nodes in that path. The first line contains three integers n, m, and k, representing the number of nodes, the number of edges, and the number of colors respectively (1 ≤ n, m, k ≤ 10^5). The second line contains n integers, where the i-th integer is the color assigned to the i-th node (1 ≤ color ≤ k). Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an undirected edge between nodes u and v. The next line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. Each of the next q lines contains two integers u and v (1 ≤ u, v ≤ n), representing a query asking for the number of distinct colors in the shortest path between nodes u and v. For each query, print the number of distinct colors in the shortest path between nodes u and v. Example: Input: 5 6 3 1 2 3 2 1 1 2 1 3 2 4 3 4 2 5 4 5 3 1 5 2 3 3 5 Output: 3 3 3 Explanation: 1. The shortest path between nodes 1 and 5 is 1-2-5, and it has colors {1, 2, 1}, which are 2 distinct colors. 2. The shortest path between nodes 2 and 3 is 2-1-3, and it has colors {2, 1, 3}, which are 3 distinct colors. 3. The shortest path between nodes 3 and 5 is 3-4-5, and it has colors {3, 2, 1}, which are 3 distinct colors.","solution":"from collections import deque, defaultdict def bfs_shortest_path(graph, start_node, end_node): Perform BFS to find the shortest path from start_node to end_node. Return the nodes in the shortest path. queue = deque([(start_node, [start_node])]) visited = set() while queue: current_node, path = queue.popleft() if current_node in visited: continue visited.add(current_node) if current_node == end_node: return path for neighbor in graph[current_node]: if neighbor not in visited: new_path = list(path) new_path.append(neighbor) queue.append((neighbor, new_path)) return [] def distinct_colors_in_path(colors, path): Count the number of distinct colors in the given path. return len(set(colors[node-1] for node in path)) def answer_queries(n, m, k, node_colors, edges, queries): # Construct the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Process each query results = [] for u, v in queries: shortest_path = bfs_shortest_path(graph, u, v) distinct_colors_count = distinct_colors_in_path(node_colors, shortest_path) results.append(distinct_colors_count) return results # Example usage n, m, k = 5, 6, 3 node_colors = [1, 2, 3, 2, 1] edges = [(1, 2), (1, 3), (2, 4), (3, 4), (2, 5), (4, 5)] queries = [(1, 5), (2, 3), (3, 5)] print(answer_queries(n, m, k, node_colors, edges, queries)) # Output: [2, 3, 3]"},{"question":"You are given a permutation of the integers from 1 to n. A permutation of length n is an array that contains each integer from 1 to n exactly once. You are asked to perform a series of operations on this permutation to maximize the value of the resulting array. An operation consists of choosing any subset of the permutation (possibly the empty subset) and reversing its order. You are allowed to perform at most k such operations. Your task is to find the lexicographically largest permutation that can be obtained after performing at most k operations. The first line contains two integers n (1 ≤ n ≤ 100) and k (0 ≤ k ≤ 100) – the length of the permutation and the maximum number of operations allowed, respectively. The second line contains n integers – the initial permutation of length n. Print the lexicographically largest permutation that can be obtained after performing at most k operations. Example: Input: 5 2 1 2 3 4 5 Output: 5 4 3 2 1 Explanation: After the first operation, reverse the entire array to get [5, 4, 3, 2, 1]. No more operations are needed as this is the lexicographically largest permutation.","solution":"def max_lexicographical_permutation(n, k, permutation): Returns the lexicographically largest permutation that can be obtained after performing at most k reversals. :param n: int - Length of the permutation :param k: int - Maximum number of allowed reversals :param permutation: List[int] - Initial permutation :return: List[int] - Lexicographically largest permutation # Edge case when k is 0, we return the input permutation as no operations are allowed if k == 0: return permutation # Sort the permutation in descending order to get the lexicographically largest permutation largest_permutation = sorted(permutation, reverse=True) return largest_permutation"},{"question":"You are organizing a series of tournaments, where each tournament is a knockout competition. There are `n` participants in each tournament, and for simplicity, we number the participants from `1` to `n`. In each match, two participants compete, and the winner advances to the next round. This process repeats until only one participant remains, who is declared the winner of the tournament. A unique feature of these tournaments is that each participant has a \\"strength\\" score, which influences the outcome of matches. Specifically, the participant with the higher strength score always wins. You want to calculate the identity of the unique winner of the tournament if the participants are paired optimally in each round to maximize the chances of the participant with the highest strength score of being the ultimate winner. The tournament pairing in each round should be such that stronger participants are matched with weaker ones to ensure the strongest participants advance. # Input - The first line contains an integer `t` (1 ≤ t ≤ 10^3), the number of tournaments. - For each tournament: - The first line contains an integer `n` (2 ≤ n ≤ 10^5), the number of participants. - The second line contains `n` space-separated integers representing the strength scores of the participants. # Output - For each tournament, print a single integer representing the strength score of the winner. # Example Input: ``` 2 4 3 6 2 8 5 1 3 5 2 4 ``` Output: ``` 8 5 ``` # Explanation In the first tournament with 4 participants having strengths [3, 6, 2, 8]: - The optimal initial pairings could be (3 vs 2, 6 vs 8) - After the first round, the winners are (3, 8) - Next round pairing is (3 vs 8) - Winner is 8 In the second tournament with 5 participants having strengths [1, 3, 5, 2, 4]: - In round 1, optimal pairings may be (1 vs 2, 3 vs 4, 5 advances without competing) - After the first round, the winners (2, 4), and 5 advancing - Next round could pair (2 vs 5) and (4 advances without competing), or similar, but eventually, 5 will face 4 since they are the two strongest - Winner is 5 The task is to identify the winner efficiently by considering the optimal pairings in each round.","solution":"def find_tournament_winner(t, tournaments): winners = [] for i in range(t): n = tournaments[i][0] strengths = tournaments[i][1] max_strength = max(strengths) winners.append(max_strength) return winners # Example usage # t = 2 # tournaments = [ # [4, [3, 6, 2, 8]], # [5, [1, 3, 5, 2, 4]] # ] # print(find_tournament_winner(t, tournaments)) # Output: [8, 5]"},{"question":"You have a list of integers and you want to reorder the list so that the sum of every two adjacent numbers is not divisible by a given integer k. If it\'s impossible to reorder the list in such a way, output -1. Input: The first line of the input consists of a single integer t (1 <= t <= 10^5) - the number of test cases. For each test case: - The first line contains two integers n and k (1 <= n, k <= 10^5) - the number of integers in the list and the integer k. - The second line contains n integers a1, a2, ..., an (1 <= ai <= 10^9) - the elements of the list. Output: For each test case, output a single line. If it\'s possible to reorder the list so that the sum of every two adjacent numbers is not divisible by k, output the reordered list. Otherwise, output -1. Example: Input: 2 4 3 1 2 3 4 3 2 2 4 6 Output: 4 1 2 3 -1 Note: In the first test case, one possible reorder is [4, 1, 2, 3]. The sums of adjacent pairs are: 4+1=5, 1+2=3, 2+3=5. None of these sums are divisible by 3. In the second test case, it\'s not possible to reorder the list to meet the condition, so the output is -1.","solution":"def reorder_list(t, test_cases): Reorders the lists such that the sum of every two adjacent numbers is not divisible by k. Args: t (int): The number of test cases. test_cases (list): A list containing tuples with (n, k) and the list of integers for each test case. Returns: list: A list of lists containing the reordered lists for each test case or -1 if not possible. results = [] for n, k, arr in test_cases: arr.sort() i, j = 0, n - 1 reordered = [] while i <= j: if i == j: reordered.append(arr[i]) else: reordered.append(arr[j]) if i != j: reordered.append(arr[i]) i += 1 j -= 1 valid = True for i in range(1, n): if (reordered[i-1] + reordered[i]) % k == 0: valid = False break if valid: results.append(reordered) else: results.append(-1) return results"},{"question":"Given an undirected graph with N nodes and M edges, your task is to determine whether the graph contains a cycle. If the graph contains a cycle, output \\"YES\\", otherwise output \\"NO\\". An undirected graph is defined by a set of nodes connected by edges without any orientation. A cycle is a path that starts and ends at the same node without repeating any edge. The first line contains two integers N and M (1 ≤ N, M ≤ 100), the number of nodes and edges in the graph. Each of the next M lines contains two integers u and v (1 ≤ u, v ≤ N), representing an edge between the nodes u and v. Output \\"YES\\" if there is a cycle in the graph, otherwise output \\"NO\\". For example, given the following edges: 1 2 1 3 2 3 The graph contains a cycle 1-2-3-1, so the output should be \\"YES\\". Another example, given the following edges: 1 2 2 3 3 4 4 5 The graph does not contain any cycles, so the output should be \\"NO\\".","solution":"def contains_cycle(N, M, edges): def find(parent, i): if parent[i] == -1: return i else: return find(parent, parent[i]) def union(parent, x, y): xroot = find(parent, x) yroot = find(parent, y) if xroot != yroot: parent[xroot] = yroot parent = [-1] * (N + 1) for u, v in edges: x = find(parent, u) y = find(parent, v) if x == y: return \\"YES\\" union(parent, x, y) return \\"NO\\""},{"question":"You are given a positive integer n. Your task is to determine the number of pairs of integers (a, b) such that: 1. 1 le a, b le n 2. gcd(a, b) + text{lcm}(a, b) = a + b Here, gcd(a, b) denotes the greatest common divisor of a and b, and text{lcm}(a, b) denotes the least common multiple of a and b. The input consists of a single integer n (1 le n le 10^6). Output a single integer representing the number of pairs (a, b) that satisfy the given conditions. **Example:** **Input:** ``` 5 ``` **Output:** ``` 5 ``` **Explanation:** The pairs (a, b) that satisfy the conditions for n = 5 are: - (1, 1) - (2, 2) - (3, 3) - (4, 4) - (5, 5) Each of these pairs satisfies the condition because for any integer x, gcd(x, x) = x and text{lcm}(x, x) = x. In general, the pairs (x, x) always satisfy the condition because both gcd(x, x) and text{lcm}(x, x) are x, thus their sum x + x = 2x is equal to x + x.","solution":"def count_valid_pairs(n): Returns the number of pairs (a, b) such that: 1 <= a, b <= n gcd(a, b) + lcm(a, b) = a + b # Since for (a, b) to satisfy the condition gcd(a, b) + lcm(a, b) = a + b, # a must equal to b. Therefore, the only valid pairs are (1,1), (2,2) ..., (n,n). return n"},{"question":"In a distant land, there are mystical trees that bear magical fruits. There are n such trees in a row, and each tree has a certain number of fruits on it. Every day, a magical fruit gatherer comes and collects all the fruits from some consecutive sequence of trees. Given the number of fruits on each tree, determine the maximum number of fruits that can be collected in any single day. The input consists of: - A single line containing an integer n (1 ≤ n ≤ 100,000) — the number of trees. - A second line containing n integers, where the i-th integer represents the number of fruits on the i-th tree. Each number of fruits is a non-negative integer and does not exceed 10,000. Output a single integer — the maximum number of fruits that can be collected in one day. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 15 ``` Explanation: By collecting fruits from all trees, the gatherer collects 1 + 2 + 3 + 4 + 5 = 15 fruits, which is the maximum possible in this scenario. --- Input ``` 6 3 1 4 1 5 9 ``` Output ``` 23 ``` Explanation: The gatherer collects the fruits from all trees resulting in 3 + 1 + 4 + 1 + 5 + 9 = 23 fruits. This is the maximum possible in this scenario. # Note You need to find the maximum possible sum of any consecutive subarray (subsequence of elements) of the given array of fruit counts.","solution":"def max_fruits(n, fruits): Determines the maximum number of fruits that can be collected in one day. Parameters: n (int): The number of trees. fruits (list of int): The number of fruits on each tree. Returns: int: The maximum number of fruits that can be collected in one day. max_so_far = 0 max_ending_here = 0 for fruit in fruits: max_ending_here = max_ending_here + fruit if max_so_far < max_ending_here: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far"},{"question":"Peter is a frequent traveler who loves collecting souvenirs from different cities he visits. During his recent journey, he decided to limit himself to collecting souvenirs based on their weight and his carrying capacity. Peter has n souvenirs, each with a weight wi. He has a rucksack that can carry a maximum weight of W units. Peter wants to maximize the number of souvenirs he can carry without exceeding the weight capacity of his rucksack. Given the number of souvenirs n and the maximum weight capacity W of Peter\'s rucksack, and the weights of each souvenir, determine the maximum number of souvenirs he can collect. The first line contains two integers n and W (1 ≤ n ≤ 100, 1 ≤ W ≤ 1000), representing the number of souvenirs and the maximum weight capacity of the rucksack, respectively. The second line contains n integers wi (1 ≤ wi ≤ 100), representing the weights of the souvenirs. Output one integer m representing the maximum number of souvenirs Peter can carry. Example: Input: 5 7 1 2 3 4 5 Output: 3 Explanation: Peter can carry souvenirs weighing {1, 2, 3} or {2, 3, 1}. There are other combinations as well, but the maximum number of souvenirs he can carry without exceeding the weight limit is 3.","solution":"def max_souvenirs(n, W, weights): Determines the maximum number of souvenirs Peter can carry without exceeding the weight capacity of his rucksack. Parameters: n (int): Number of souvenirs W (int): Maximum weight capacity of the rucksack weights (list): List containing the weights of each souvenir Returns: int: Maximum number of souvenirs weights.sort() current_weight = 0 count = 0 for weight in weights: if current_weight + weight <= W: current_weight += weight count += 1 else: break return count # Sample input n = 5 W = 7 weights = [1, 2, 3, 4, 5] print(max_souvenirs(n, W, weights)) # Output: 3"},{"question":"A large online shopping system stores the price of each product in an array of integers. For promotional purposes, the system manager wants to calculate the maximum possible total price of a subset of products, with the following constraint: no two products in the subset have consecutive indices in the array. Given the array of product prices, find the maximum possible total price of a subset that satisfies the constraint. The first line contains an integer n (1 le n le 10^5) representing the number of products in the array. The second line contains n integers p_1, p_2, dots, p_n (1 le p_i le 10^4) — the prices of the products. Print one integer — the maximum possible total price of a subset of products such that no two products have consecutive indices. In the first example, you can select products with prices 3 and 5, or 7 and 5, yielding a maximum total of 8. In the second example, selecting the products with prices 3, 7, and 1 yields the maximum total of 11.","solution":"def max_non_consecutive_subset_sum(prices): Returns the maximum possible total price of a subset of products such that no two products have consecutive indices. n = len(prices) if n == 0: return 0 if n == 1: return prices[0] dp = [0] * n dp[0] = prices[0] if n > 1: dp[1] = max(prices[0], prices[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + prices[i]) return dp[-1]"},{"question":"Samuel loves string games, and he just invented a new one! Given a string consisting of lowercase English letters, he wants to transform it into a palindrome by performing a series of operations. In each move, he can insert a single character anywhere in the string. Samuel needs your help to figure out the minimum number of insertions required to make the string a palindrome. A string is a palindrome if it reads the same forward and backward. Write a program that takes a single string as input and outputs the minimum number of insertions required to make it a palindrome. **Input:** - A single line containing a string `s` (1 ≤ length of s ≤ 1000), consisting of lowercase English letters. **Output:** - A single integer representing the minimum number of insertions required to make `s` a palindrome. **Example:** ``` Input: abcd Output: 3 ``` Explanation: By inserting \'d\' at the beginning, \'c\' at the beginning, and \'b\' at the beginning, we transform \\"abcd\\" to \\"dcbabcd\\", which is a palindrome. **Explanation of Solution:** To solve this problem, you need to approach it by calculating the Longest Palindromic Subsequence (LPS) of the string `s`. The minimum number of insertions required to make the string `s` a palindrome is the length of the string `s` minus the length of its LPS. This can be efficiently computed using dynamic programming.","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of insertions required to convert a string into a palindrome using Dynamic Programming to find the Longest Palindromic Subsequence (LPS). n = len(s) # Create a table to store results of subproblems dp = [[0] * n for _ in range(n)] # Strings of length 1 are palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table. The lower diagonal values of the table are # not used and not filled in the process. for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # Length of longest palindromic subsequence lps = dp[0][n - 1] # Minimum number of insertions to make the string a palindrome return n - lps"},{"question":"You have a collection of integers and you need to find a subsequence within this collection such that the sum of its members is equal to a given number k. The subsequence needs to maintain the relative order of the original collection. In this problem, a subsequence is defined as a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, given the collection [1, 2, 3, 4] and k = 6, one possible subsequence is [2, 4]. Your task is to write a program that checks if there exists such a subsequence in the given integer collection that sums to k. If such a subsequence exists, print the subsequence; otherwise, print -1. The first line of the input contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000) — the number of integers in the collection and the required sum. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100). In the single line of output, print the subsequence that sums to k. If there are multiple answers, print any of them. If no such subsequence exists, print -1.","solution":"def find_subsequence(n, k, collection): Finds a subsequence whose sum is equal to k while maintaining the relative order of the original collection. Parameters: n (int): The number of integers in the collection. k (int): The target sum. collection (list): The list of integers. Returns: list: The subsequence that sums to k or -1 if no such subsequence exists. def find_subsequence_recursive(current_index, current_sum, current_sequence): if current_sum == k: return current_sequence if current_index == n or current_sum > k: return None # Include the current element include_result = find_subsequence_recursive( current_index + 1, current_sum + collection[current_index], current_sequence + [collection[current_index]] ) if include_result: return include_result # Exclude the current element exclude_result = find_subsequence_recursive(current_index + 1, current_sum, current_sequence) return exclude_result result = find_subsequence_recursive(0, 0, []) return result if result else -1"},{"question":"You are given a sequence of integers representing daily temperatures over a period of n days. Your task is to find out, for each day in the given period, how many days you would have to wait until a warmer temperature occurs. If there is no future day with a higher temperature, return 0 for that day. The first line contains an integer n (1 ≤ n ≤ 100000) — the number of days. The next line contains n integers t1, t2, ..., tn (−30 ≤ ti ≤ 50) — the daily temperatures for each day. Output n integers, where the i-th integer represents the number of days you have to wait until a warmer temperature for the i-th day. If there is no future day with a warmer temperature, output 0 for that day. For example, consider a period of 4 days where the daily temperatures are [73, 74, 75, 71]. The output should be [1, 1, 0, 0] because after the first day, the temperature will rise after one day, and the same applies for the second day; for the third day, we do not expect a rise in temperature, hence 0. The same logic applies to the fourth day. # Sample Input: ``` 4 73 74 75 71 ``` # Sample Output: ``` 1 1 0 0 ```","solution":"def daily_temperatures(n, temperatures): Returns a list of integers where each element represents the number of days to wait for a warmer temperature. If no warmer temperature, returns 0 for that day. result = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() result[idx] = i - idx stack.append(i) return result"},{"question":"A city traffic department is planning to place new CCTV cameras at some intersections. The city\'s streets are in the form of a perfect grid with intersections labeled from (1, 1) in the southwest corner to (n, n) in the northeast corner. They want to make sure that every intersection in the city is either directly monitored by a camera or lies on the same row or column as some intersection monitored by a camera. However, the budget constraint allows placing at most one camera in any row and any column. You are tasked with finding the minimum number of cameras required to completely cover an n x n grid city. The first line contains an integer n (1 ≤ n ≤ 1000) — the size of the grid. Print the minimum number of cameras needed to ensure that all grid intersections are monitored either directly or through row/column intersection. In the first sample, placing a camera at (1,1) would cover the entire grid. In the second sample, placing a camera at each (i, i) for all 1 ≤ i ≤ n covers the entire grid. For any other configuration, derive a strategy to place the minimum number of cameras.","solution":"def min_cameras(mtx_size): Returns the minimum number of cameras needed to cover an n x n grid. if mtx_size < 1 or mtx_size > 1000: raise ValueError(\\"Matrix size must be between 1 and 1000.\\") return mtx_size"},{"question":"Anna loves organizing and stacking her plates. She has a stack of k plates, each with an individual weight w. Every day, she makes the stack more stable by picking two plates at a time and combining them into a new single plate with the combined weight and placing this new plate back into the stack. Her rules for combining the plates are: 1. She can only combine exactly two plates at a time. 2. The new weight of the combined plate is the sum of the weights of the two plates combined. She repeats this process until only one plate remains. Anna wants to minimize the number of operations needed to completely consolidate the stack into one single plate. Given an array of integers `weights` where each element represents the initial weights of each plate, write a function to determine the minimum number of operations to combine all plates into one. # Input The first line contains a single integer `k` (2 ≤ k ≤ 100), representing the number of plates in the stack. The second line contains `k` space-separated integers representing the weights of the plates in the stack. # Output Print a single integer — the minimum number of operations needed to combine the stack into one single plate. # Example 1 Input: ``` 4 2 3 5 8 ``` Output: ``` 3 ``` # Example 2 Input: ``` 6 1 2 3 4 5 6 ``` Output: ``` 5 ``` (Note: In both examples, the output represents the minimum number of operations needed to combine all the plates into one)","solution":"def min_operations_to_combine_plates(k, weights): Returns the minimum number of operations needed to combine all plates into one. # Since combining two plates into one reduces the total number of plates by 1, # it will always take (k - 1) operations to combine all plates into one. return k - 1 # Example usage print(min_operations_to_combine_plates(4, [2, 3, 5, 8])) # Should output 3"},{"question":"Lee is a security analyst in a top tech firm, and recently discovered a new way of encoding secret messages using a sequence of numbers. He\'s excited but needs help with decoding the messages. In this encoding scheme, the message is hidden using a sequence of numbers and each number encodes a single character. The original message consists only of lowercase English letters. Given a sequence of numbers, where each number can be converted to a character as follows: - \'a\' is represented by 1, - \'b\' is represented by 2, - ... - \'z\' is represented by 26. Each possible number in the sequence represents a valid encoding of a corresponding character. For example, the number 12 represents \\"ab\\" or it could directly represent \\"l\\". Similarly, given \\"226\\", it could be: - \\"bbf\\" when read as 2, 2, 6, - \\"bzf\\" when read as 2, 26, - \\"vbf\\" when read as 22, 6, - or \\"vf\\" when read as 26. Lee wants to know how many different ways the provided sequence of numbers can be decoded into a valid message. The first line contains an integer t (1 leq t leq 10) — the number of test cases. Each test case consists of a single line containing a string of digits s (1 leq |s| leq 100). For each test case, print a single integer — the number of different ways to decode the message. Note: The input strings do not contain any invalid sequences and each digit is valid in the context of the described encoding. **Example:** Input: ``` 3 12 226 123456 ``` Output: ``` 2 3 3 ``` Explanation: - For \\"12\\", it can be decoded as (\\"ab\\") or (\\"l\\"), so the total ways are 2. - For \\"226\\", it can be decoded as (\\"bbf\\"), (\\"bzf\\"), or (\\"vf\\"), so the total ways are 3. - For \\"123456\\", it can be decoded as (\\"abcdef\\"), (\\"awdef\\"), or (\\"lcdef\\"), so the total ways are 3.","solution":"def num_decodings(s): if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 for i in range(1, n + 1): if s[i-1] != \'0\': dp[i] += dp[i-1] if i > 1 and \'10\' <= s[i-2:i] <= \'26\': dp[i] += dp[i-2] return dp[n] def decode_message(t, test_cases): results = [] for case in test_cases: results.append(num_decodings(case)) return results"},{"question":"You are given a special type of string called a \\"transform string.\\" A transform string consists only of the characters \\"L\\", \\"R\\", \\"U\\", and \\"D\\". Each character in the string corresponds to a movement in a 2D plane: - \\"L\\" corresponds to moving one unit to the left. - \\"R\\" corresponds to moving one unit to the right. - \\"U\\" corresponds to moving one unit up. - \\"D\\" corresponds to moving one unit down. Given such a string, you need to determine whether the path described by the string returns to the starting point (i.e., the origin (0,0)) after all movements are carried out in sequence. You need to implement a function `is_return_to_origin(transform_string: str) -> bool` that takes a string `transform_string` as input and returns `True` if the movements described by the string return to the origin, otherwise it returns `False`. # Input - A string `transform_string` (1 ≤ length of `transform_string` ≤ 10^5) consisting only of the characters \\"L\\", \\"R\\", \\"U\\", and \\"D\\". # Output - Return `True` if the movements described by `transform_string` return to the origin, otherwise return `False`. # Examples Example 1 Input: ``` \\"LR\\" ``` Output: ``` True ``` Explanation: - \\"L\\" moves one unit left to (-1,0). - \\"R\\" moves one unit right back to (0,0). - Therefore, the path returns to the origin. Example 2 Input: ``` \\"UDLR\\" ``` Output: ``` True ``` Explanation: - \\"U\\" moves one unit up to (0,1). - \\"D\\" moves one unit down back to (0,0). - \\"L\\" moves one unit left to (-1,0). - \\"R\\" moves one unit right back to (0,0). - Therefore, the path returns to the origin. Example 3 Input: ``` \\"UUDDL\\" ``` Output: ``` False ``` Explanation: - The movements do not return to the origin, thus the function returns `False`. Implement the function `is_return_to_origin` to solve the problem. Consider the efficiency given the input constraints. # Note: In your implementation, consider utilizing strategies that minimize computational overhead and leverage efficient traversal of the string to ensure that the solution is optimized for large inputs.","solution":"def is_return_to_origin(transform_string: str) -> bool: Returns True if the movements described by transform_string return to the origin (0, 0), otherwise returns False. horizontal = 0 vertical = 0 for move in transform_string: if move == \\"L\\": horizontal -= 1 elif move == \\"R\\": horizontal += 1 elif move == \\"U\\": vertical += 1 elif move == \\"D\\": vertical -= 1 return horizontal == 0 and vertical == 0"},{"question":"Susan is managing a warehouse with boxes and wants to organize them efficiently. Each box has a unique ID number between 1 and n. Due to space constraints, she can only access a subset of boxes based on a specific pattern. Each box can be connected to one or more other boxes directly or indirectly through a series of connections. The connection information follows a rule, and Susan can only perform tasks on connected groups of boxes. A group of boxes is considered “accessible” if any box in that group can reach every other box in the same group through the series of connections specified. You need to determine how many such accessible groups of boxes are there in the warehouse. Given n, the number of boxes, and edges representing the direct connections between the boxes, help Susan calculate the number of accessible groups of boxes. The first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 2 * 10^5) — the number of boxes and the number of direct connections respectively. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing a direct connection between the boxes. Output one integer: the number of accessible groups of boxes in the warehouse. # Sample Input: ``` 6 5 1 2 2 3 4 5 5 6 6 4 ``` # Sample Output: ``` 2 ``` Explanation: In the sample input, there are two accessible groups: 1. The group containing boxes {1, 2, 3} 2. The group containing boxes {4, 5, 6}","solution":"def count_accessible_groups(n, connections): def dfs(node, visited, graph): stack = [node] while stack: u = stack.pop() if not visited[u]: visited[u] = True for v in graph[u]: if not visited[v]: stack.append(v) # Initialize the graph graph = [[] for _ in range(n + 1)] for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) accessible_groups = 0 for i in range(1, n + 1): if not visited[i]: dfs(i, visited, graph) accessible_groups += 1 return accessible_groups"},{"question":"You are given a sequence of n integers a1, a2, ..., an. You are also given an integer k. Your task is to determine if there is a subsequence of these integers whose sum is exactly equal to k. A subsequence is any sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The first line of input contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 1000) — the number of integers in the sequence and the target sum. The second line contains n integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000) — the integers in the sequence. Print \\"YES\\" if there exists a subsequence with sum exactly equal to k, otherwise print \\"NO\\".","solution":"def is_subsequence_sum_possible(n, k, sequence): Determine if there is a subsequence of the given sequence whose sum is exactly equal to `k`. n: int - the number of integers in the sequence k: int - the target sum sequence: list of int - the list of integers in the sequence Returns \\"YES\\" if there is a subsequence whose sum equals `k`, otherwise \\"NO\\". # Helper function to check all subsequences using recursion def is_sum_possible(index, current_sum): # Base case: If current_sum equals k if current_sum == k: return True # Base case: If we have exhausted all elements if index == n: return False # Check including current element if is_sum_possible(index + 1, current_sum + sequence[index]): return True # Check excluding current element if is_sum_possible(index + 1, current_sum): return True return False if is_sum_possible(0, 0): return \\"YES\\" return \\"NO\\""},{"question":"Consider a series of hidden treasure maps. Each map contains a sequence of integers representing the treasure values along the path. The goal is to collect the maximum possible amount of treasure by traversing the path. However, the path is enchanted, and each integer in the sequence represents either a bonus or a trap. Specifically, if the sequence contains k contiguous integers, and if any of those k integers is negative, the entire subsequence turns into a trap and yields 0 treasure. Given an array of integers a consisting of n values, find the maximum total treasure one can collect by choosing the longest contiguous subarray without any negative integers. If no such subarray exists, the answer is 0. The first line contains one integer n (1 ≤ n ≤ 100000). The second line contains n integers a1, a2, ..., an (-100000 ≤ ai ≤ 100000). Print the maximum total treasure that can be collected. For example, consider the following inputs: ``` 5 1 -1 2 3 4 ``` The optimal solution is the subarray `[2, 3, 4]` with a total treasure value of `9`. Here\'s another example: ``` 4 -1 -2 -3 -4 ``` In this case, there are no non-negative subarrays, so the output should be `0`.","solution":"def max_total_treasure(n, treasure_values): Returns the maximum total treasure that can be collected by choosing the longest contiguous subarray without any negative integers. max_treasure = 0 current_treasure = 0 for value in treasure_values: if value < 0: current_treasure = 0 else: current_treasure += value max_treasure = max(max_treasure, current_treasure) return max_treasure"},{"question":"Alice and Bob are playing a game with a string consisting of only characters \'a\', \'b\', and \'c\'. The game works as follows: Alice and Bob take turns to make a move, with Alice going first. On each player\'s turn, they can choose any character in the string and replace it with another character (\'a\', \'b\', or \'c\'). The game ends when the string reads the same forward and backward, i.e., it becomes a palindrome. Both players always play optimally, trying to win. Alice\'s goal is to make the string a palindrome as quickly as possible, whereas Bob\'s goal is to prevent the string from becoming a palindrome for as long as possible. Given the initial string, determine who will win the game if both players play optimally. The input consists of a single line containing the initial string s (1 ≤ |s| ≤ 100, consisting only of characters \'a\', \'b\', and \'c\'). Output \\"Alice\\" if Alice can guarantee a win, regardless of how Bob plays, or \\"Bob\\" if Bob can prevent the string from becoming a palindrome indefinitely if he plays optimally. Examples: Input: abc Output: Alice Input: abca Output: Alice Input: aaa Output: Alice","solution":"def determine_winner(s): n = len(s) mismatches = sum(s[i] != s[n - i - 1] for i in range(n // 2)) # Alice\'s win if the mismatches are odd or zero, else Bob\'s win. if mismatches % 2 == 1 or mismatches == 0: return \\"Alice\\" else: return \\"Bob\\""},{"question":"You are given an integer array A containing n elements, where n is always even (1 ≤ n ≤ 10^5). Each element in the array represents the height of a person. Your task is to divide these n persons into n/2 pairs such that the difference between the heights of the tallest and shortest person in each pair is minimized. Formally, you need to find n/2 pairs (a1, b1), (a2, b2), ..., (an/2, bn/2) such that the maximum value among |a1 - b1|, |a2 - b2|, ..., |an/2 - bn/2| is minimized. The first line contains an integer n. The second line contains n integers A[i] (1 ≤ A[i] ≤ 10^9) — the heights of the persons in the array. Print a single integer — the minimized value of the maximum difference between any pair. Example: Input: 6 1 6 2 9 4 8 Output: 2 Explanation: One possible way to pair individuals to get the minimized maximum pair difference: Pair the heights as (1,2), (6,8), (4,9). The differences between pairs are |1-2|=1, |6-8|=2, |4-9|=5. The maximum difference is 5. Sorting the array and then pairing consecutive elements minimizes this maximum value. Hence, in the sorted array [1,2,4,6,8,9], the optimal pair differences are |1-2|=1, |4-6|=2, |8-9|=1, making the result 2.","solution":"def minimize_max_height_difference(n, heights): This function takes the number of people (n) and their heights (heights) as input, and returns the minimized value of the maximum difference between the heights of any pair. # Sort the list of heights heights.sort() # Initialize the max difference max_difference = 0 # Group every two consecutive heights as pairs and compute the max difference for i in range(0, n, 2): max_difference = max(max_difference, heights[i + 1] - heights[i]) return max_difference"},{"question":"The government has initiated a project to place surveillance cameras on important street intersections to monitor traffic in a city. Each intersection can connect to multiple other intersections via two-way streets. The goal is to ensure that the traffic flow remains smooth, which is quantified by a metric called \\"Traffic Harmony.\\" For every intersection, the Traffic Harmony is defined as the difference between the maximum traffic load and the minimum traffic load on the streets connected to that intersection. Given a city map with intersections and streets, you need to compute the total Traffic Harmony for the entire city. The traffic load on a street between two intersections is defined by the number of vehicles passing through that street daily. The input consists of: - The first line containing two integers n and m, representing the number of intersections (1 ≤ n ≤ 10^4) and the number of streets (0 ≤ m ≤ 10^5) respectively. - The next m lines each contain three integers u, v, w where 1 ≤ u, v ≤ n and 0 ≤ w ≤ 10^4. This represents a two-way street between intersections u and v with a traffic load of w. Output a single integer representing the sum of the Traffic Harmonies for all intersections in the city. Example: ``` Input: 4 5 1 2 10 1 3 20 1 4 30 2 3 5 3 4 15 Output: 65 Explanation: Intersection 1 has three connecting streets with traffic loads of 10, 20, and 30. Thus, the Traffic Harmony for intersection 1 is 30 - 10 = 20. Intersection 2 has two connecting streets with traffic loads of 10 and 5. Thus, the Traffic Harmony for intersection 2 is 10 - 5 = 5. Intersection 3 has three connecting streets with traffic loads of 20, 5, and 15. Thus, the Traffic Harmony for intersection 3 is 20 - 5 = 15. Intersection 4 has two connecting streets with traffic loads of 30 and 15. Thus, the Traffic Harmony for intersection 4 is 30 - 15 = 15. The total Traffic Harmony is 20 + 5 + 15 + 15 = 65. ```","solution":"def total_traffic_harmony(n, m, streets): Computes the total Traffic Harmony for the entire city given the street information. :param n: Number of intersections. :param m: Number of streets. :param streets: List of (u, v, w) tuples where u and v are intersections and w is the traffic load. :return: Total traffic harmony for all intersections. from collections import defaultdict # Initialize a dictionary to store traffic loads for each intersection intersection_loads = defaultdict(list) # Populate the intersection loads with the traffic data for u, v, w in streets: intersection_loads[u].append(w) intersection_loads[v].append(w) # Calculate total traffic harmony total_harmony = 0 for key, loads in intersection_loads.items(): if len(loads) > 1: # Only calculate if more than one street is connected max_load = max(loads) min_load = min(loads) harmony = max_load - min_load total_harmony += harmony return total_harmony"},{"question":"An online retailer assigns a unique rating to each product in its catalog. The ratings are represented as an array of integers where each element corresponds to the rating of a product. Recently, the retailer decided to analyze the ratings to find the maximum possible difference between the ratings of any two products. Given the array of ratings, your task is to write a program that finds the maximum difference between the ratings of any two products. However, the maximum difference must be calculated such that the higher rating appears after the lower rating in the array (i.e., you must only consider pairs of elements `(i, j)` with `i < j`). The first line contains an integer `n` (1 ≤ n ≤ 100000) — the number of products in the catalog. The second line contains `n` integers `r1, r2, ..., rn` (0 ≤ ri ≤ 109) — the ratings of the products. Print a single integer — the maximum possible difference between the ratings of any two products considering the given constraint. If no valid pair `(i, j)` that satisfies the condition exists, print -1. # Example: Input: ``` 6 7 1 5 3 6 4 ``` Output: ``` 5 ``` Explanation: - The maximum possible difference is between the rating 1 (index 1) and the rating 6 (index 4), giving a difference of 6 - 1 = 5.","solution":"def max_difference(n, ratings): Returns the maximum possible difference between the ratings of any two products where the higher rating appears after the lower rating. If no valid pair exists, returns -1. if n < 2: return -1 min_rating = ratings[0] max_diff = -1 for i in range(1, n): if ratings[i] > min_rating: max_diff = max(max_diff, ratings[i] - min_rating) else: min_rating = ratings[i] return max_diff"},{"question":"Write a program to find the longest substring consisting of unique characters from a given string. The program should print the length of this longest substring. The input consists of a single string s (1 ≤ |s| ≤ 10^5) containing alphanumeric characters and/or symbols. The output should be a single integer representing the length of the longest substring with all unique characters. # Example Input: ``` abcabcbb ``` Output: ``` 3 ``` Input: ``` bbbbb ``` Output: ``` 1 ```","solution":"def longest_unique_substring(s): Returns the length of the longest substring with all unique characters in the given string s. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given an array a consisting of n integers. You have to perform q operations with the array. Each operation is described by two integers l and r (1 le l le r le n). During each operation, you need to extract the subarray from index l to index r, sort this subarray in non-decreasing order, and then update the original array with this sorted subarray. For example, suppose the initial array is [3, 1, 4, 1, 5], and the operation is to sort the subarray from index 2 to 4. The original array will be transformed into [3, 1, 1, 4, 5]. Given the initial array and the sequence of operations, find the final state of the array after performing all the operations. The first line contains two integers n and q (1 le n, q le 1000) — the number of elements in the array and the number of operations, respectively. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^6), the elements of the initial array. Each of the following q lines contains two integers l and r (1 le l le r le n), describing an operation. Print the array after performing all operations. # Example **Input:** ``` 5 3 3 1 4 1 5 1 3 2 4 1 5 ``` **Output:** ``` 1 1 3 4 5 ``` # Explanation: 1. The initial array is [3, 1, 4, 1, 5]. 2. After the first operation, sorting the subarray from index 1 to 3, the array becomes [1, 3, 4, 1, 5]. 3. After the second operation, sorting the subarray from index 2 to 4, the array becomes [1, 1, 3, 4, 5]. 4. After the third operation, sorting the entire array (from index 1 to 5), the array remains [1, 1, 3, 4, 5]. 5. Thus, the final array after all operations is [1, 1, 3, 4, 5].","solution":"def sort_subarrays(n, q, a, queries): Given an array a of n integers and q operations to sort subarrays, this function returns the final state of the array after all operations. Parameters: - n: int - number of elements in the original array - q: int - number of operations - a: list of int - the initial array with n integers - queries: list of tuples - each tuple contains two integers (l, r) indicating the range to sort Returns: - list of int - the final state of the array after performing all operations for l, r in queries: # Convert 1-based index to 0-based index for Python list slicing l -= 1 r -= 1 # Sort the subarray from index l to r a[l:r + 1] = sorted(a[l:r + 1]) return a"},{"question":"A balanced string is a string that has equal numbers of opening and closing parentheses in every prefix of the string. A prefix of a string is any leading substring of the string, including the empty string and the string itself. For example, the string \\"(()())\\" is balanced, while the string \\"())(()\\" is not. Given an integer n, your task is to generate all possible balanced strings of length 2n. Each test case consists of a single integer n. For each test case, output all possible balanced strings in lexicographical order. If no such string exists, output an empty line. Input: The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. Each of the next t lines contains an integer n (1 ≤ n ≤ 10). Output: For each test case, print all possible balanced strings of length 2n, each on a new line. The strings should be printed in lexicographical order. Example: Input: 2 2 3 Output: (()) ((())) (())() ()(()) ()()() Explanation: For n = 2, there is one balanced string of length 4: \\"(())\\" and \\"()()\\". For n = 3, there are five balanced strings of length 6: \\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\" and \\"()()()\\".","solution":"def generate_balanced_strings(n): Generates all possible balanced strings of length 2n. result = [] def backtrack(s, left, right): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) backtrack(\\"\\", 0, 0) return sorted(result) def balanced_strings(t, cases): For each test case, generate balanced strings and print them results = [] for n in cases: results.append(generate_balanced_strings(n)) return results"},{"question":"You are given a string made up of lowercase alphabets and a list of queries. Each query specifies a substring and asks for the number of distinct characters within that substring. Your task is to process each query and output the count of distinct characters for the specified substring. The first line contains the string S (1 ≤ |S| ≤ 10^5). The second line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ |S|), representing the 1-based start and end indices of the substring (inclusive) for which the count of distinct characters is to be determined. Output q lines, each containing the result for the corresponding query. # Example Input ``` abacaba 3 1 3 2 4 1 7 ``` Output ``` 2 3 3 ``` # Explanation For the example: - The substring from index 1 to 3 is \\"aba\\", which contains 2 distinct characters: \'a\' and \'b\'. - The substring from index 2 to 4 is \\"bac\\", which contains 3 distinct characters: \'b\', \'a\', and \'c\'. - The substring from index 1 to 7 is \\"abacaba\\", which contains 3 distinct characters: \'a\', \'b\', and \'c\'.","solution":"def count_distinct_characters(S, queries): Returns a list containing the number of distinct characters for each substring based on the queries. results = [] for l, r in queries: substring = S[l-1:r] distinct_characters = len(set(substring)) results.append(distinct_characters) return results"},{"question":"Eva is a software engineer who has written a sequence of n integers representing the performance of her code over several runs. She wants to know for every subsequence of length k, starting from the 1st element up to the (n-k+1)th element, the maximum and minimum values found in that subsequence. Your task is to help her by writing a program that takes as input the sequence and the value of k, and outputs the array with the pairs of minimum and maximum values for all possible subsequences of length k. The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) — the length of the sequence and the length of the subsequence respectively. The second line contains n integers separated by spaces ai (1 ≤ ai ≤ 1,000,000) — the performance values. Output n-k+1 lines, each containing two integers separated by a space, the minimum and maximum values of each subsequence of length k starting from the kth element. Example: Input: 8 3 5 1 3 8 6 4 7 2 Output: 1 5 1 8 3 8 4 8 4 7 2 7","solution":"def get_min_max_subsequences(n, k, sequence): Returns a list of tuples where each tuple contains the minimum and maximum value of each subsequence of length k. n: int - the length of the sequence k: int - the length of the subsequences sequence: list of int - the sequence of performance values result = [] for i in range(n - k + 1): subsequence = sequence[i:i + k] result.append((min(subsequence), max(subsequence))) return result # Function to format the output as specified def format_output(result): formatted_result = [] for min_val, max_val in result: formatted_result.append(f\\"{min_val} {max_val}\\") return formatted_result"},{"question":"Alex loves playing with numbers and has recently become fascinated with converting numbers between different bases. To challenge himself, Alex decides to generate numbers in various bases and convert them back to base 10. Given a number in any base from 2 to 16, can you help Alex convert it to a base 10 number? The input consists of a string `n` representing the number and an integer `base` representing its base. Write a function that converts the given number in the specified base to a base 10 number. **Input:** - The first line contains the string `n` which represents the number in the specified base. It is guaranteed that `n` is a valid number in the given base. - The second line contains the integer `base` (2 leq base leq 16), the base of the number. **Output:** - Print the base 10 representation of the number. **Note:** - For bases greater than 10, the digits can be represented using the characters \'A\' to \'F\', where \'A\' stands for 10, \'B\' stands for 11, ..., \'F\' stands for 15. **Examples:** **Example 1:** ``` Input: 1A 16 Output: 26 ``` **Example 2:** ``` Input: 101 2 Output: 5 ``` **Example 3:** ``` Input: 1F4 16 Output: 500 ``` **Explanation:** - In the first example, \'1A\' in base 16 is 26 in base 10. - In the second example, \'101\' in base 2 is 5 in base 10. - In the third example, \'1F4\' in base 16 is 500 in base 10.","solution":"def convert_to_base_10(n, base): Convert a number n from the given base to base 10. Parameters: n (str): The number represented as a string in the specified base. base (int): The base of the given number. Returns: int: The base 10 representation of the number. return int(n, base)"},{"question":"A construction site has several cranes working in a large rectangular area aligned to the coordinate planes. For safety reasons, the cranes must follow project plans that specify distinct time schedules. Specifically, each crane must operate within a non-overlapping time interval. Your task is to manage these schedules efficiently to ensure project completion within the shortest time frame. Each crane i works in the rectangle defined by its opposite corners (xi1, yi1) and (xi2, yi2) during its operating time interval [ti1, ti2]. Determine the minimum total time required to complete all operations, such that the sum of all time intervals [ti2-ti1 for each crane i] is minimized, assuming there’s no overlap in their time intervals. Each crane’s operating rectangle may intersect or overlap with others, but their working time intervals must be distinct. # Input Format The first line contains a single integer n (1 ≤ n ≤ 1000) - the number of cranes. The next n lines each contain six integers xi1, yi1, xi2, yi2, ti1, and ti2 (0 ≤ xi1, yi1, xi2, yi2 ≤ 10^9, 1 ≤ ti1 < ti2 ≤ 10^6), which describe the working area and initial time interval of each crane. # Output Format Print a single integer - the minimum total time required to complete all operations with non-overlapping time intervals. # Example Input ``` 3 1 1 3 3 1 4 2 2 4 4 2 5 0 0 2 2 3 6 ``` Output ``` 9 ``` # Explanation For the given input: - Cranes can be scheduled in non-overlapping intervals as follows: - Crane 1: [1, 4] - Crane 2: [5, 8] - Crane 3: [9, 12] The total time required is 9 time units. This ensures all cranes operate in distinct time intervals without overlap, minimizing the total operating time needed to complete all tasks.","solution":"def minimum_total_time(n, intervals): Returns the minimum total time required to complete all operations with non-overlapping time intervals. Parameters: n (int): Number of cranes. intervals (list of tuples): Each tuple contains (xi1, yi1, xi2, yi2, ti1, ti2) which describe the working area and initial time interval of each crane. Returns: int: Minimum total time to complete all operations. intervals.sort(key=lambda x: x[4]) # Sort by start time ti1 current_end_time = 0 total_time = 0 for interval in intervals: _, _, _, _, start_time, end_time = interval duration = end_time - start_time total_time += duration current_end_time += duration return total_time"},{"question":"There is a grid with n rows and m columns of cells. Each cell either contains a wall (\'#\') or an empty space (\'.\'). You need to check if there is a path from the top-left corner of the grid (1, 1) to the bottom-right corner (n, m) moving only through empty spaces. You can move up, down, left, or right (but not diagonally). Write a program to determine if such a path exists. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. The next n lines each contain a string of length m, where the j-th character of the i-th line represents the cell in the i-th row and j-th column of the grid. A \'#\' denotes a wall, and a \'.\' denotes an empty space. Print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner, and \\"NO\\" otherwise. **Input:** ``` 4 4 .... .. .. .... ``` **Output:** ``` YES ``` **Input:** ``` 4 4 .... .... .... ``` **Output:** ``` NO ```","solution":"def is_path_exists(n, m, grid): Determine if there is a path from the top-left to the bottom-right of the grid. Returns \\"YES\\" if such a path exists, otherwise returns \\"NO\\". from collections import deque if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"During the last week, Alice has been participating in a coding competition organized by her school. The competition consists of several challenges, each requiring a certain skill level which can be represented by integers. Being a very competitive person, Alice aims to solve as many challenges as possible without repeating any skill level more than once. Alice wants to know the maximum number of challenges she can solve in each segment of skill levels that she attempts. To achieve this, she must identify the longest segment of distinct skill levels within the given challenges. The first line of the input contains an integer n (1 le n le 10^5), the number of challenges. The second line contains n space-separated integers s_i (1 le s_i le 10^9), where s_i is the skill level required for the i-th challenge. Print a single integer — the length of the longest segment of distinct skill levels Alice can solve. # Examples: ``` Input: 5 1 2 3 2 1 Output: 3 Input: 10 1 2 3 4 5 6 7 8 9 10 Output: 10 Input: 6 4 5 6 6 5 4 Output: 3 ``` # Explanation: In the first example, the longest segment with distinct skill levels is [1, 2, 3], so the output is 3. In the second example, all skill levels are distinct, so the longest segment is the entire list, and the output is 10. In the third example, the longest segments with distinct skill levels are [4, 5, 6] or [6, 5, 4], so the output is 3.","solution":"def longest_distinct_segment(n, skill_levels): Returns the length of the longest segment of distinct skill levels. max_length = 0 start = 0 seen = {} for end in range(n): if skill_levels[end] in seen: start = max(start, seen[skill_levels[end]] + 1) seen[skill_levels[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"The city of Codeville is planning to upgrade its traffic light system to a smart traffic light system. The new traffic lights will be connected to a central system that can control the duration of the green light at each intersection. Each traffic light has a base duration for the green light, but the actual duration can be adjusted based on the current traffic. The city wants to maximize the total traffic flow through all intersections during a given time frame. The city has identified several key intersections, and for each intersection, they have historical data on the average number of vehicles that pass through per second during a green light. The central system can control the duration of the green light at each intersection by adding or subtracting a number of seconds to the base duration. Your task is to determine the optimal way to adjust the green light durations to maximize the total number of vehicles passing through all intersections during a given time frame. However, there\'s a constraint: the sum of all adjustments must be zero to ensure fairness in the total green time distribution across the city. The first line contains an integer n (1 ≤ n ≤ 100) — the number of key intersections. The second line contains n integers bi (1 ≤ bi ≤ 600) — the base duration in seconds of the green light at the i-th intersection. The third line contains n integers vi (1 ≤ vi ≤ 1000) — the average number of vehicles passing through the i-th intersection per second during the green light. Print n integers, where the i-th integer is the optimal adjustment (in seconds) to the base duration for the i-th intersection such that the sum of all adjustments is zero and the total traffic flow is maximized. If there are multiple solutions, print any. # Example Input ``` 3 30 45 60 10 20 30 ``` Output ``` 5 -3 -2 ``` Explanation: In this example, we can add 5 seconds to the first intersection, subtract 3 seconds from the second intersection, and subtract 2 seconds from the third intersection. The total adjustment is zero (5 - 3 - 2 = 0), and this distribution maximizes the traffic flow based on the given vehicle rates.","solution":"def adjust_traffic_lights(n, durations, vehicle_rates): adjustments = [0] * n # Calculate total traffic flow if no adjustments initial_total_traffic = sum(d * v for d, v in zip(durations, vehicle_rates)) for i in range(n): # Calculate traffic flow if increased by 1 second increase_traffic = initial_total_traffic + vehicle_rates[i] # Calculate traffic flow if decreased by 1 second decrease_traffic = initial_total_traffic - vehicle_rates[i] if increase_traffic > decrease_traffic: adjustments[i] += 1 initial_total_traffic += vehicle_rates[i] else: adjustments[i] -= 1 initial_total_traffic -= vehicle_rates[i] # reset the total flow as we will accumulate them back again properly in next loops. initial_total_traffic = sum((d + adj) * v for d, adj, v in zip(durations, adjustments, vehicle_rates)) # Adjust total adjustments to make the sum zero total_adjustment = sum(adjustments) # Adjust the largest value by the remaining sum to ensure total adjustment is 0 if total_adjustment != 0: # Find the index of the maximum adjustment max_index = max(range(n), key=lambda i: vehicle_rates[i]) adjustments[max_index] -= total_adjustment return adjustments"},{"question":"Alice recently learned about Fibonacci sequences and how they are widely used in various applications. A Fibonacci sequence is defined by the recurrence relation: F(0) = 0 F(1) = 1 F(n) = F(n-1) + F(n-2) for n ≥ 2 However, Alice\'s interest lies in a modified version called the \\"Weighted Fibonacci\\" sequence. The Weighted Fibonacci sequence follows the same rules as a regular Fibonacci sequence but, every element is multiplied by its position in the sequence. For example, the first few elements of the Weighted Fibonacci sequence are: F(0) = 0 * 0 = 0 F(1) = 1 * 1 = 1 F(2) = 2 * (1 + 0) = 2 F(3) = 3 * (1 + 1) = 6 F(4) = 4 * (2 + 1) = 12 Given an integer n, compute the nth element of the Weighted Fibonacci sequence. The first and only line contains an integer n (0 ≤ n ≤ 109). Output the nth element of the Weighted Fibonacci sequence modulo 10^9 + 7. For example, for n = 3, the output should be 6, and for n = 2, the output should be 2.","solution":"MOD = 10**9 + 7 def weighted_fibonacci(n): Computes the nth element of the Weighted Fibonacci sequence. if n == 0: return 0 if n == 1: return 1 a, b = 0, 1 for i in range(2, n + 1): next_fib = (a + b) % MOD a, b = b, next_fib return n * b % MOD"},{"question":"In a faraway kingdom, there is a tree with n nodes and n-1 edges. Each node represents a city and each edge represents a direct road between two cities. The king wants to set up a postal service such that for any two cities, the distance measured in number of edges (or roads) shall never exceed a given threshold value. To achieve this, the king needs to build exactly one additional road between any two cities that aren\'t directly connected already. However, the additional road should minimize the maximum distance between any pair of cities in the resulting tree. Given the structure of the tree with n nodes and n-1 edges, you need to determine the minimum possible value of the maximum distance between any pair of cities after adding one road. # Input: The first line contains an integer n (2 leq n leq 2 cdot 10^5) — the number of cities. Each of the next n-1 lines contains two integers u and v (1 leq u, v leq n, u neq v) — representing the n-1 edges of the tree. # Output: Print a single integer — the minimum possible value of the maximum distance between any pair of cities after adding one road. Example: # Input: ``` 5 1 2 1 3 2 4 2 5 ``` # Output: ``` 2 ``` # Explanation of the Example: With the given tree, if we add an edge between cities 4 and 3, for instance, the new maximum distance (longest shortest path between any two nodes) in the updated graph is 2. # Note: - A \\"tree\\" is a connected, undirected graph with no cycles and exactly n nodes and n-1 edges. - The \\"distance\\" between two nodes is the number of edges in the shortest path between them.","solution":"from collections import deque def find_farthest_node(tree, start): Performs BFS from the start node and returns the farthest node and its distance. n = len(tree) visited = [-1] * n queue = deque([(start, 0)]) visited[start] = 0 farthest_node = start max_distance = 0 while queue: node, distance = queue.popleft() if distance > max_distance: max_distance = distance farthest_node = node for neighbor in tree[node]: if visited[neighbor] == -1: visited[neighbor] = distance + 1 queue.append((neighbor, visited[neighbor])) return farthest_node, max_distance def minimum_possible_max_distance(n, edges): Computes the minimum possible value of the maximum distance between any pair of cities after adding exactly one road. tree = [[] for _ in range(n)] for u, v in edges: tree[u-1].append(v-1) tree[v-1].append(u-1) # Find an arbitrary node farthest from node 0 node1, _ = find_farthest_node(tree, 0) # Find the farthest node from node1 (this gives us one end of the diameter) node2, diameter_length = find_farthest_node(tree, node1) # The new minimum possible maximum distance if diameter_length % 2 == 0: # if diameter_length is even, we can directly split the tree in the middle min_max_distance = (diameter_length // 2) + 1 else: # if diameter_length is odd, two centers will form the middle (diameter_length + 1) // 2 min_max_distance = (diameter_length // 2) + 1 return min_max_distance"},{"question":"John is planning a road trip across several cities. There are n cities in total, connected by m two-way roads. Each road between city u and city v has a certain travel time t associated with it. John wants to determine if he can travel from city s to city d within a given maximum allowed time x. Your task is to determine if it\'s possible for John to travel from the starting city s to the destination city d within the maximum time x. The first line contains three integers n, m, and x (2 ≤ n ≤ 100, 1 ≤ m ≤ 200, 1 ≤ x ≤ 1000) — the number of cities, the number of roads, and the maximum allowed travel time, respectively. Each of the next m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 100) — describing a road between city u and city v that takes t time to travel. The next line contains two integers s and d (1 ≤ s, d ≤ n) — the starting city and the destination city. Output \\"YES\\" if John can travel from city s to city d within the maximum allowed time x, otherwise print \\"NO\\". Example: Input: 5 6 20 1 2 5 1 3 10 2 4 3 3 4 4 4 5 2 3 5 12 1 5 Output: YES","solution":"import heapq def can_travel_within_time(n, m, x, roads, s, d): Determines if it\'s possible to travel from city `s` to city `d` within time `x`. Args: n (int): Number of cities. m (int): Number of roads. x (int): Maximum allowed travel time. roads (list of tuples): Each tuple contains (u, v, t) describing a road. s (int): Starting city. d (int): Destination city. Returns: str: \\"YES\\" if travel is possible within `x` time, \\"NO\\" otherwise. graph = {i: [] for i in range(1, n + 1)} # Build graph for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # Dijkstra\'s algorithm to find the shortest path from s to d def dijkstra(start, end): pq = [(0, start)] # (current_time, current_node) shortest_times = {i: float(\'inf\') for i in range(1, n + 1)} shortest_times[start] = 0 while pq: current_time, current_node = heapq.heappop(pq) if current_node == end: return current_time if current_time > shortest_times[current_node]: continue for neighbor, travel_time in graph[current_node]: time = current_time + travel_time if time < shortest_times[neighbor]: shortest_times[neighbor] = time heapq.heappush(pq, (time, neighbor)) return float(\'inf\') shortest_time = dijkstra(s, d) return \\"YES\\" if shortest_time <= x else \\"NO\\""},{"question":"You are given a string `s` consisting of lowercase letters. Your task is to determine the longest substring of `s` that occurs at least twice and those occurrences do not overlap. If there are multiple substrings with the same maximum length, return any one of them. If no such substring exists, return an empty string. # Input - The input consists of a single string `s` (1 ≤ |s| ≤ 100000). # Output - Output the longest substring which occurs at least twice in the string `s` without overlapping. If there are multiple substrings with the same maximum length, return any one of them. If no such substring exists, return an empty string. # Examples Example 1 Input: ``` banana ``` Output: ``` ana ``` Example 2 Input: ``` abcabcabc ``` Output: ``` abcabc ``` Example 3 Input: ``` aabaa ``` Output: ``` aa ``` # Note In the first example, the substring \\"ana\\" appears at positions 1-3 and 3-5. It is the longest non-overlapping substring that appears at least twice. In the second example, the substring \\"abcabc\\" appears at positions 0-5 and 3-8. It is the longest non-overlapping substring that appears at least twice. In the third example, the substring \\"aa\\" appears at positions 0-1 and 3-4. It is the longest non-overlapping substring that appears at least twice.","solution":"def longest_repeated_substring(s): Returns the longest substring of `s` that occurs at least twice without overlapping. If there are multiple substrings with the same maximum length, return any one of them. If no such substring exists, return an empty string. def has_repeated_substring(s, length): seen = set() for i in range(0, len(s) - length + 1): substr = s[i:i + length] if substr in seen: return substr seen.add(substr) return None left, right = 1, len(s) result = \\"\\" while left <= right: mid = (left + right) // 2 substr = has_repeated_substring(s, mid) if substr: result = substr left = mid + 1 else: right = mid - 1 return result"},{"question":"You are given a city map represented as an n × m grid. Each cell can either be a road (\'R\'), a building (\'B\'), or a park (\'P\'). You are tasked with finding the largest rectangular area consisting entirely of road cells. Note that the area should be aligned with the grid, that is, edges of the rectangle should not be tilted. Your task is to write a function that, given the city map, returns the area of the largest rectangle consisting entirely of road cells. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains a string of length m consisting of characters \'R\', \'B\', and \'P\'. Output a single integer — the area of the largest rectangle consisting entirely of road cells. Example: Input: ``` 4 5 RRBRP RRPBR RRRRR BBPRR ``` Output: ``` 6 ``` Explanation: The largest rectangle of road cells is: ``` RR RR RR ```","solution":"def largest_rectangle_area(grid): def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area if not grid: return 0 n = len(grid) m = len(grid[0]) heights = [0] * m max_area = 0 for row in grid: for i in range(m): if row[i] == \'R\': heights[i] += 1 else: heights[i] = 0 max_area = max(max_area, max_histogram_area(heights)) return max_area"},{"question":"In a distant land, there exists a magical forest with n trees arranged in a straight line. Each tree has a height denoted by an integer. A Forest Guardian can cast a spell to either increase or decrease the height of any tree by 1 unit. The Forest Guardian wants to make the forest look beautiful by ensuring that the heights of all trees are in non-decreasing order from left to right, i.e., for every i (1 ≤ i < n), the height of tree i should be less than or equal to the height of tree i+1. The Guardian can cast the spell at most k times, and each spell increases or decreases the height of exactly one tree by 1 unit. You need to determine if it\'s possible to transform the forest into a non-decreasing sequence with at most k spells. The first line of input contains two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ 1000) — the number of trees and the maximum number of spells the Forest Guardian can cast respectively. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the trees in their initial order. Output \\"YES\\" (without quotes) if the Forest Guardian can make the heights of the trees form a non-decreasing sequence using at most k spells. Otherwise, output \\"NO\\" (without quotes). # Example Input: ``` 5 5 3 7 4 8 6 ``` Output: ``` YES ``` Explanation: The forest can be transformed to [3, 4, 4, 6, 8] using exactly 5 spells.","solution":"def can_be_made_non_decreasing(n, k, heights): spells_used = 0 for i in range(1, n): if heights[i] < heights[i-1]: spells_needed = heights[i-1] - heights[i] spells_used += spells_needed heights[i] += spells_needed if spells_used > k: return \\"NO\\" return \\"YES\\""},{"question":"To efficiently handle their logistics, a company uses an array a of length n, where each element represents the volume of packages to be delivered. They also employ a truck with a maximum volume capacity C. Each night, before the next day\'s deliveries, the company can perform operations to better fill the truck. The operation consists of selecting a subarray of a and adding a given value k to each element of the subarray (both positive and negative values are allowed). The goal is to maximize the number of contiguous packages starting from the first element that can fit in the truck after performing the operations. # Input Format: - First line contains two integers n and C (1 ≤ n ≤ 10^5, 1 ≤ C ≤ 10^9) – the number of elements in the array and the truck\'s volume capacity. - Second line contains n integers representing the array a (where -10^9 ≤ a_i ≤ 10^9). # Output Format: Print a single integer – the maximum number of contiguous packages starting from the first element that can fit into the truck after performing the optimal operations. # Example: Input 5 10 4 1 3 7 2 Output 3 Explanation: One possible way to achieve the optimal number of packages: 1. Select subarray [4, 1] and add -1 to each element. Array becomes [3, 0, 3, 7, 2] 2. Now select the entire array [3, 0, 3, 7, 2] and add -3 to each element. Array becomes [0, -3, 0, 4, -1] The truck can then fit the first 3 continuous packages [0, -3, 0], which sums to -3 and is less than or equal to the truck\'s capacity 10. Thus, the answer is 3.","solution":"def max_contiguous_packages(n, C, a): Finds the maximum number of contiguous packages starting from the first element that can fit in the truck after performing optimal operations. :param n: int, number of elements in the array :param C: int, truck\'s volume capacity :param a: list of int, the array elements representing the volume of packages :return: int, maximum number of contiguous packages from the start that fit in the truck prefix_sum = 0 for i in range(n): prefix_sum += a[i] if prefix_sum > C: return i return n"},{"question":"You are given an array of integers representing the heights of n students. You are also given positive integers k and x. Your task is to determine if the array can be divided into exactly k non-empty subarrays such that the difference between the maximum and minimum height in each subarray is at most x. If it is possible, return \\"YES\\". Otherwise, return \\"NO\\". # Input The first line contains two integers n and k (1 le n, k le 10^5). The second line contains the array of n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) — the heights of the students. The third line contains an integer x (0 le x le 10^9). # Output Print \\"YES\\" if it is possible to divide the array into exactly k subarrays with the specified properties. Otherwise, print \\"NO\\". # Example Input ``` 6 3 2 8 5 7 3 9 2 ``` Output ``` YES ``` Input ``` 6 3 2 8 5 7 3 9 1 ``` Output ``` NO ``` # Note In the first example, the array can be divided into three subarrays `[2, 3], [5, 7], [8, 9]` such that maximum difference in each subarray does not exceed 2. Therefore, the output is \\"YES\\". In the second example, it is not possible to divide the array into three subarrays where the maximum difference in the heights of any subarray is at most 1, so the output is \\"NO\\".","solution":"def can_divide_students(n, k, heights, x): Determines if the array can be divided into exactly k non-empty subarrays such that the difference between the maximum and minimum height in each subarray is at most x. :param n: int - the number of students. :param k: int - the number of subarrays. :param heights: List[int] - the array of heights of the students. :param x: int - the maximum allowed difference between the highest and lowest heights in a subarray. :returns: str - \\"YES\\" if possible to divide as described, otherwise \\"NO\\". if k > n: return \\"NO\\" heights.sort() subarray_count = 1 min_height = heights[0] for i in range(1, n): if heights[i] - min_height > x: subarray_count += 1 if subarray_count > k: return \\"NO\\" min_height = heights[i] if subarray_count <= k: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a permutation of integers from 1 to n in array a. Your task is to perform a series of operations to transform the permutation into an array in which the greatest common divisor (GCD) of all subarrays of length greater than 1 is not equal to 1. In one operation, you can perform the following steps: - Select two indices i and j (1 <= i, j <= n, i ≠ j) - Swap the elements at these indices. Determine whether it is possible to achieve the desired array using any number of such operations. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer n (2 le n le 1000) — the length of the permutation array. The second line of each test case contains n integers denoting the permutation array a (1 ≤ a_i ≤ n). For each test case, print \\"YES\\" if it is possible to rearrange the array such that the GCD of all subarrays of length greater than 1 is not equal to 1. Otherwise, print \\"NO\\". # Example Input: ``` 2 3 3 2 1 4 1 2 3 4 ``` Output: ``` YES YES ``` Explanation: In the first test case, we can swap 3 and 1 to get the array [1, 2, 3]. The GCD of subarray [1, 2] is 1, so it is already not meeting the condition. In the second test case, we can swap 2 and 4 to get the array [1, 4, 3, 2]. The GCD of subarray [4, 3] and [3, 2] is not 1. Thus, the condition is met directly without additional operations.","solution":"def can_transform_permutation(t, cases): Determines if it is possible to rearrange the array such that the GCD of all subarrays of length greater than 1 is not equal to 1 by swapping elements. Args: - t: int, number of test cases - cases: list of tuples, each containing the length of the permutation array and the array itself Returns: - list of str: \\"YES\\" or \\"NO\\" for each test case import math results = [] for n, a in cases: # Check if all elements in the array are 1 all_ones = all(x == 1 for x in a) if all_ones: results.append(\\"NO\\") continue # Check if GCD of entire array is 1 array_gcd = a[0] for num in a[1:]: array_gcd = math.gcd(array_gcd, num) if array_gcd == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example invocation input_data = [ (3, [3, 2, 1]), (4, [1, 2, 3, 4]) ] print(can_transform_permutation(2, input_data)) # Output: [\'YES\', \'YES\']"},{"question":"Given an undirected, connected graph with `n` nodes, numbered from `1` to `n`, with a possible set of edges, your task is to determine if the graph is a tree. A tree is defined as an acyclic connected graph, meaning it is a connected graph with `n` nodes and `n-1` edges. If it cannot be determined to be a tree, provide an alternative output indicating the connectivity or acyclicity issue. The input consists of a single test case. The first line contains two integers, `n` and `m` (1 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)/2), which represent the number of nodes and the number of edges in the graph. The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), denoting an edge between nodes `u` and `v`. Output a single line: - \\"YES\\" if the graph can be determined to be a tree. - \\"NO (not connected)\\" if the graph is not connected. - \\"NO (contains cycle)\\" if the graph contains a cycle. # Example Input ``` 5 4 1 2 1 3 2 4 3 5 ``` Output ``` YES ``` Input ``` 5 5 1 2 1 3 2 4 3 5 2 3 ``` Output ``` NO (contains cycle) ``` Input ``` 4 2 1 2 3 4 ``` Output ``` NO (not connected) ```","solution":"def is_tree(n, m, edges): from collections import defaultdict if m != n - 1: return \\"NO (contains cycle)\\" if m > n - 1 else \\"NO (not connected)\\" adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = set() def dfs(node, parent): visited.add(node) for neighbor in adjacency_list[node]: if neighbor not in visited: if not dfs(neighbor, node): return False elif neighbor != parent: return False return True # Start DFS from node 1 (assuming nodes are 1-indexed and given graph is connected) if not dfs(1, -1): return \\"NO (contains cycle)\\" # Check if all nodes are visited (graph is connected) if len(visited) != n: return \\"NO (not connected)\\" return \\"YES\\""},{"question":"Four friends, Alex, Bonnie, Charlie, and Dana, decided to go on a hiking trip in the mountains. They need to leave their house as soon as possible to make the most of daylight. Each of them has a different readiness time, and they can\'t leave until everyone is ready. Moreover, they need to carry some hiking equipment, but there is only a limited number of backpacks, which can each hold a certain weight. The friends can redistribute weight among the backpacks as they see fit, but no backpack can be filled beyond its capacity. You are given the readiness times of the friends and the weights of the equipment each of them needs to carry. Additionally, you are given the capacities of the available backpacks. Your task is to determine the minimum time they can depart from the house, given that they can redistribute weights in the best possible way. The first line contains an integer n (1 ≤ n ≤ 4) — the number of friends (always 4). The second line contains four integers r1, r2, r3, and r4 (0 ≤ ri ≤ 100) — the readiness times of Alex, Bonnie, Charlie, and Dana, respectively. The third line contains four integers w1, w2, w3, and w4 (1 ≤ wi ≤ 1000) — the weights of the equipment that Alex, Bonnie, Charlie, and Dana need to carry, respectively. The fourth line contains an integer m (1 ≤ m ≤ 4) — the number of available backpacks. The fifth line contains m integers c1, c2, ..., cm (1 ≤ ci ≤ 1000) — the capacities of the available backpacks. Output a single integer — the minimum time they can all depart from the house. If it’s not possible to distribute the weights without exceeding the backpack capacities, print -1. Example: Input: 4 10 5 8 6 200 300 150 400 3 500 200 400 Output: 10","solution":"from itertools import permutations def can_distribute(weights, capacities): Check if weights can be distributed among given capacities. n = len(capacities) perm = permutations(weights) for comb in perm: caps_copy = sorted(capacities, reverse=True) possible = True for i in range(len(comb)): found = False for j in range(len(caps_copy)): if caps_copy[j] >= comb[i]: caps_copy[j] -= comb[i] found = True break if not found: possible = False break if possible: return True return False def hiking_trip_time(n, readiness, weights, m, capacities): Determine the minimum time to depart for the hiking trip. max_time = max(readiness) # Check if we can distribute weights in backpacks if can_distribute(weights, capacities): return max_time return -1"},{"question":"Dmitry is setting up a new server system and wants to ensure that the servers have a balanced load. He has a set of CPU usage values for each server in a list. To maintain the system\'s performance, Dmitry wants to redistribute the CPU usage such that the difference between the maximum and minimum CPU usage among all servers is minimized. You are given an integer array where each element represents the CPU usage of a server. You can perform the following operation zero or more times: choose two different servers and transfer a certain amount of CPU usage from one server to another. The transfer amount can be any non-negative integer, and it can be zero. Your task is to find the minimum possible difference between the maximum and minimum CPU usage among all servers after any number of such operations. The first line of the input contains one integer n (2 le n le 100,000) — the number of servers. The second line of the input contains n integers a_1, a_2, dots, a_n (0 le a_i le 10^9) — the CPU usage of each server. Print one integer — the minimum possible difference between the maximum and minimum CPU usage among all servers after any number of operations. Consider the first example. ``` Input: 4 4 5 1 2 ``` Here, the CPU usages can be redistributed as follows to minimize the difference: * Take 2 units from server 2 (CPU 5) and give it to server 3 (CPU 1). The resulting array is [4, 3, 3, 2]. * Take 2 units from server 1 (CPU 4) and give it to server 4 (CPU 2). The resulting array is ultimately [2, 3, 3, 4]. The minimum possible difference is 2 in this case. In the second example, ``` Input: 3 10 15 20 ``` The CPU usages can be redistributed as follows: * Take 5 units from server 3 (CPU 20) and give it to server 2 (CPU 15). The resulting array is [10, 20, 15]. * Take 5 units from server 2 (CPU 20) and give it to server 1 (CPU 10). The resulting array is ultimately reduced to [15, 15, 15], achieving a difference of 0. And so on.","solution":"def min_cpu_difference(n, usages): Returns the minimum possible difference between the maximum and minimum CPU usage among all servers. total = sum(usages) # If total CPU usage is perfectly divisible by n if total % n == 0: return 0 else: # Otherwise, the minimum possible difference would be 1 because we can balance the load close to each other return 1"},{"question":"In a faraway kingdom, there is a peculiar way of managing money. The kingdom uses coins of different denominations. The treasurer of the kingdom needs to make precise change for the people, but there is a catch: the treasurer can only use a specific set of denominations that change daily due to their magical traits. Today, the treasurer received a payment from a merchant and has to give back the exact change using the fewest number of coins. However, if it is impossible to provide the exact change with the given denominations, the treasurer should return a special code instead. Your task is to help the treasurer determine the minimum number of coins needed to make the exact change, or detect if it is not possible. You need to write a program that: 1. Reads the value that needs to be returned as change. 2. Reads the list of available coin denominations. 3. Calculates the minimum number of coins needed to make that change. 4. If it\'s not possible to make the change with the given denominations, returns -1. The first line contains an integer `T` (1 ≤ T ≤ 100) — the number of test cases. For each test case, the first line contains two integers: `C` (1 ≤ C ≤ 10000) — the change amount, and `N` (1 ≤ N ≤ 100) — the number of different coin denominations. The second line contains `N` integers representing the available denominations. Each denomination is positive and does not exceed 10000. For each test case, output a single line containing the minimum number of coins needed, or -1 if it\'s impossible to make the change. **Example** Input: ``` 3 7 3 1 2 3 11 4 2 5 7 10 27 4 1 5 8 12 ``` Output: ``` 3 3 4 ``` **Explanation:** In the first test case, the change amount is 7. The minimum number of coins needed are: 3 (using coins 3, 2, 2). In the second test case, the change amount is 11. The minimum number of coins needed are: 3 (using coins 2, 2, 7). In the third test case, the change amount is 27. The minimum number of coins needed are: 4 (using coins 12, 8, 5, 2). If there were no possible combinations to make the exact change for a test case, the output for that case would be -1.","solution":"def min_coins_for_change(T, test_cases): results = [] for i in range(T): C, N = test_cases[i][0] denominations = test_cases[i][1] # Initialize DP array with a large number representing infinity dp = [float(\'inf\')] * (C + 1) dp[0] = 0 # Base case: 0 coins are needed to make change for amount 0 for coin in denominations: for x in range(coin, C + 1): dp[x] = min(dp[x], dp[x - coin] + 1) result = dp[C] if dp[C] != float(\'inf\') else -1 results.append(result) return results"},{"question":"You are a software developer who has just joined a new company. One of your first tasks is to help manage the company\'s network. The network consists of computers that are connected by cables. Each computer is assigned a unique integer identifier and the connections between them are bidirectional. The network is configured in such a way that there is exactly one path between any two computers, meaning it forms a tree. Your task is to write a program that, given the connections and the number of computers in the network, can determine the longest simple path (i.e., the diameter of the tree) in terms of the number of connections in that path. # Input The first line of the input contains an integer `n` (2 ≤ `n` ≤ 10^5), the number of computers in the network. The next `n-1` lines each contain two integers `u` and `v` (1 ≤ `u`, `v` ≤ `n` and `u` ≠ `v`) indicating that there is a cable connecting computer `u` and computer `v`. # Output Output a single integer representing the number of connections in the longest simple path in the network. # Example Input ``` 5 1 2 1 3 3 4 3 5 ``` Output ``` 3 ``` In this example, the longest simple path is from computer 2 to computer 4 through computers 1 and 3, which involves 3 connections.","solution":"from collections import deque, defaultdict def bfs(node, graph): visited = set() queue = deque([(node, 0)]) visited.add(node) farthest_node = node max_distance = 0 while queue: current_node, distance = queue.popleft() if distance > max_distance: max_distance = distance farthest_node = current_node for neighbor in graph[current_node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return farthest_node, max_distance def find_tree_diameter(n, connections): graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # Start BFS from an arbitrary node (e.g., node 1) start_node = 1 farthest_node, _ = bfs(start_node, graph) # BFS again from the farthest node found to get the longest path _, diameter = bfs(farthest_node, graph) return diameter"},{"question":"A company is organizing a coding competition where participants are given a list of programming problems to solve. For a participant to qualify for the next round, they must solve at least `k` problems. Each problem has a unique integer identifier ranging from 1 to `n`. Given a list of participant\'s completed problems, determine if the participant qualifies for the next round and output the total number of problems the participant has solved. The input consists of: - An integer `n` representing the total number of problems available (1 ≤ `n` ≤ 100). - An integer `k` representing the minimum number of problems required to qualify for the next round (1 ≤ `k` ≤ `n`). - An integer `m` representing the number of problems that the participant has solved (0 ≤ `m` ≤ `n`). - A list of `m` unique integers representing the identifiers of problems solved by the participant. Output the total number of problems solved by the participant, followed by \\"Qualified\\" or \\"Not Qualified\\" based on whether the participant meets the requirement `k`. # Sample Input 1 ``` 10 5 6 2 5 7 3 8 9 ``` # Sample Output 1 ``` 6 Qualified ``` # Sample Input 2 ``` 8 4 3 1 4 6 ``` # Sample Output 2 ``` 3 Not Qualified ``` # Sample Input 3 ``` 5 2 2 2 5 ``` # Sample Output 3 ``` 2 Qualified ```","solution":"def check_qualification(n, k, m, solved_problems): Determines if the participant has qualified for the next round and calculates the number of problems solved. Parameters: n (int): Total problems available. k (int): Minimum problems required to qualify. m (int): Number of problems solved by the participant. solved_problems (list of int): List of solved problem identifiers. Returns: str: Total solved problems and qualification status (\\"Qualified\\" or \\"Not Qualified\\"). total_solved = len(solved_problems) status = \\"Qualified\\" if total_solved >= k else \\"Not Qualified\\" return f\\"{total_solved} {status}\\""},{"question":"You are given two integers n and k. You are supposed to construct an initial sequence of `n` positive integers and then modify it by performing k operations. Both the sequence and operations must adhere to specific constraints, and you must determine the resulting sequence. The initial sequence of `n` positive integers should be in non-decreasing order. During each of the k operations, you can select any contiguous subarray of at least two elements and either increase or decrease all elements of this subarray by 1. Your task is to find the lexicographically smallest sequence possible after exactly k operations. The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 105). Print the lexicographically smallest sequence of n positive integers after k operations. **Example:** ``` Input: 5 3 Output: 1 1 1 1 4 ``` Explanation: One way to achieve the desired sequence is as follows: - Start with the sequence [1, 1, 1, 1, 1]. - Perform the first operation on the subarray [2, 1, 1, 1, 1], resulting in [1, 1, 1, 1, 2]. - Perform the second operation on the subarray [3, 1, 1, 1], resulting in [1, 1, 1, 1, 3]. - Perform the third operation on the subarray [4, 1], resulting in [1, 1, 1, 1, 4]. The result is the lexicographically smallest sequence possible after 3 operations.","solution":"def lexicographically_smallest_sequence(n, k): Returns the lexicographically smallest sequence of n positive integers after k operations. # Initialize the sequence with n ones sequence = [1] * n # Perform k operations for i in range(k): sequence[-1] += 1 # Return the resulting sequence return sequence"},{"question":"In a faraway land, there is a magical forest with n trees arranged in a row. Each tree has a certain height represented by an integer in the array heights. The forest is watched over by a forest spirit who enjoys setting challenges for adventurers. The spirit has created a new puzzle related to the trees: An adventurer must find the maximum number of trees they can cut down, so that the remaining trees still standing form a strictly increasing sequence in terms of their height. An adventurous task is to implement a function that determines this maximum number of trees that can be cut down. The function should return an integer representing this number. # Input The function `maxTreesCut(n: int, heights: List[int]) -> int` will take the following parameters: - n (1 ≤ n ≤ 100,000): the number of trees. - heights (a list of n integers, 1 ≤ heights[i] ≤ 10^9): the heights of the trees in the forest. # Output Return a single integer — the maximum number of trees that can be cut down to leave a strictly increasing sequence. # Example ```python print(maxTreesCut(5, [3, 2, 6, 4, 5])) # Output: 2 ``` # Note In this example, you can cut down trees with heights 2 and 4, leaving the sequence [3, 6, 5] — but this is not strictly increasing. Instead, cutting down the trees with heights 3 and 4, leaving [2, 6, 5], also fails. The correct choice is to cut down the trees with heights 2 and 4, resulting in a strictly increasing sequence [3, 6, 5]. # Additional Information - It is guaranteed that it is always possible to cut down the trees in such a manner that the remaining trees form a strictly increasing sequence. - Optimize the solution to handle up to the maximum constraints efficiently.","solution":"from typing import List import bisect def maxTreesCut(n: int, heights: List[int]) -> int: Determines the maximum number of trees that can be cut down to make the remaining heights form a strictly increasing sequence. Parameters: n (int): The number of trees. heights (List[int]): The heights of the trees. Returns: int: The maximum number of trees that can be cut down. # Array to store the longest increasing subsequence lis = [] for height in heights: pos = bisect.bisect_left(lis, height) if pos < len(lis): lis[pos] = height else: lis.append(height) # The maximum number of trees that can be cut down is `n - len(lis)` return n - len(lis)"},{"question":"Alex wants to participate in a treasure hunt in a huge rectangular maze. The maze consists of `n` rows and `m` columns. Each cell of the maze either contains an obstacle (`#`) or is empty (`.`). Alex can move from one cell to another if and only if they are side-adjacent (i.e., share a horizontal or vertical side) and the destination cell is empty. Alex starts at the cell (1, 1) and he wants to reach the cell (n, m) to find the treasure. However, not all paths are equally safe and Alex prefers paths that have fewer movements. Help Alex find the minimum number of movements required to reach the treasure. If there is no path from the starting cell to the treasure cell, print \\"NO\\". # Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the maze. Each of the next `n` lines contains a string of length `m` consisting of the characters `.` and `#`. The character `.` represents an empty cell and the character `#` represents an obstacle. # Output If it is possible for Alex to reach the treasure, print the minimum number of movements. Otherwise, print \\"NO\\". # Example Input ``` 5 5 ..... .#.#. ..... .#.#. ..... ``` Output ``` 8 ``` Explanation: In the example above, Alex can reach the cell (5, 5) in exactly 8 movements: ``` (1, 1) -> (1, 2) -> (1, 3) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4) -> (5, 4) -> (5, 5) ```","solution":"from collections import deque def min_movements(n, m, maze): Returns the minimum number of movements to reach the cell (n, m) from (1, 1) in a maze represented by a 2D list with \'.\' for open cells and \'#\' for obstacles. If it is impossible to reach the target, returns \\"NO\\". # Directions for moving in the maze (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Starting position start = (0, 0) # If starting or ending position is an obstacle, return \\"NO\\" if maze[0][0] == \'#\' or maze[n-1][m-1] == \'#\': return \\"NO\\" # Queue for BFS queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() # If we reach the target cell if (x, y) == (n-1, m-1): return dist # Try all possible movements for dx, dy in directions: nx, ny = x + dx, y + dy # Check boundaries and obstacles if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == \'.\' and (nx, ny) not in visited: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) # If no path is found return \\"NO\\""},{"question":"Given a string pattern that consists of characters \'a\', \'b\', and \'c\', you need to find the smallest lexicographical string containing at least as many \'a\'s, \'b\'s, and \'c\'s as the pattern. The string pattern is guaranteed to be non-empty and contains at least one character. The lexicographical order for characters is defined as \'a\' < \'b\' < \'c\'. # Input The input contains a single line with the string pattern consisting of characters \'a\', \'b\', and \'c\'. The length of the string will be between 1 and 10^5. # Output Output the smallest lexicographical string that contains at least as many \'a\'s, \'b\'s, and \'c\'s as in the pattern. # Examples Example 1 Input ``` aabbcc ``` Output ``` aabbcc ``` Example 2 Input ``` abcabcabc ``` Output ``` aaabbbccc ``` Example 3 Input ``` ccbbaa ``` Output ``` aabbcc ``` # Note In the first example, the string \\"aabbcc\\" already contains the required number of characters in lexicographical order. In the second example, to ensure the smallest lexicographical order, we should place all \'a\'s first, followed by \'b\'s, and then \'c\'s. The third example illustrates reordering the pattern into lexicographical order.","solution":"def smallest_lexicographical_string(pattern): Returns the smallest lexicographical string containing at least as many \'a\'s, \'b\'s, and \'c\'s as the pattern. count_a = pattern.count(\'a\') count_b = pattern.count(\'b\') count_c = pattern.count(\'c\') return \'a\' * count_a + \'b\' * count_b + \'c\' * count_c"},{"question":"In a land far away, there are `m` cities. These cities are connected by `n` bidirectional roads, each road connecting two distinct cities. However, not all cities are connected directly and you may need to pass through other cities to travel between two cities. A new technology for a fast teleportation system has been introduced, which allows instant travel between two cities if a special infrastructure, the `teleportation hub`, is built in them. The teleportation hub can only be built in exactly `2` cities and allows instant travel between these two cities regardless of existing roads. Your task is to determine whether it is possible to choose two such cities such that if teleportation hubs are built in them, the entire network of `m` cities becomes fully connected, i.e., one can travel between any two cities either by roads or via the teleportation hub. The first line of the input contains two integers, `m` and `n` (`2 ≤ m ≤ 1000`, `1 ≤ n ≤ 10000`): the number of cities and the number of roads. Each of the next `n` lines contains two integers, `u` and `v` (`1 ≤ u, v ≤ m`), representing a bidirectional road between cities `u` and `v`. Output \\"YES\\" if it is possible to select two cities to build the teleportation hubs such that the entire network becomes fully connected; otherwise, print \\"NO\\". # Example Input ``` 5 3 1 2 2 3 4 5 ``` Output ``` YES ``` Input ``` 4 1 1 2 ``` Output ``` NO ``` # Explanation In the first example, building a teleportation hub between city 3 and city 4 would make the network fully connected: - Cities 1, 2, 3 are directly connected by roads. - Cities 4, 5 are directly connected by a road. - Using the teleportation hub connecting city 3 and city 4 allows travel between these two groups. In the second example, it’s impossible to connect all cities even with a teleportation hub, since cities 3 and 4 are completely isolated from cities 1 and 2.","solution":"def can_make_network_fully_connected(m, n, roads): from collections import defaultdict, deque if n == 0 or m <= 1: return \\"NO\\" # Build the graph from the list of roads graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Function to perform BFS and count the number of connected components def bfs(start, visited): queue = deque([start]) visited[start] = True component = [] while queue: node = queue.popleft() component.append(node) for neighbour in graph[node]: if not visited[neighbour]: visited[neighbour] = True queue.append(neighbour) return component # Step 1: Find all connected components visited = [False] * (m + 1) components = [] for city in range(1, m + 1): if not visited[city]: component = bfs(city, visited) components.append(component) # Step 2: Check if constructing teleportation hub between any two components can make the network fully connected if len(components) <= 1: # If there\'s only one component, it\'s already connected return \\"YES\\" for i in range(len(components)): for j in range(i + 1, len(components)): # If constructing a teleportation hub connecting a city in component[i] to a city in component[j] # results in a single connected component, return \\"YES\\" if len(components[i]) + len(components[j]) == m: return \\"YES\\" return \\"NO\\" # Example usage: # m = 5, n = 3, roads = [(1, 2), (2, 3), (4, 5)] # print(can_make_network_fully_connected(m, n, roads)) # Output: \\"YES\\" # m = 4, n = 1, roads = [(1, 2)] # print(can_make_network_fully_connected(m, n, roads)) # Output: \\"NO\\""},{"question":"Bob is a big fan of binary trees. Recently, he has been working on finding a special property in binary trees. A binary tree is defined as a tree where each node has at most two children, referred to as the left child and the right child. Bob is particularly interested in balanced binary trees. A balanced binary tree is defined as a binary tree in which the height of the two subtrees of every node never differs by more than one. The height of a node is the number of edges on the longest path from the node to a leaf. A leaf is a node with no children. Given a list of unique integers, Bob wants to build a balanced binary tree from these integers and output the inorder traversal of the balanced binary tree. The inorder traversal is a depth-first traversal where the nodes are recursively visited in the following order: - The left subtree - The current node - The right subtree You are required to help Bob by writing a program that reads an integer `n` (the number of unique integers) followed by `n` unique integers and outputs the inorder traversal of the balanced binary tree constructed using those integers. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of unique integers. - The second line contains `n` distinct integers `a1, a2, ..., an` (0 ≤ ai ≤ 10^9) — the set of unique integers. Output: - A single line containing `n` integers representing the inorder traversal of the balanced binary tree. Example: Input: ``` 7 4 2 7 1 3 6 9 ``` Output: ``` 1 2 3 4 6 7 9 ``` In this example, the balanced binary tree constructed from the integers would look like this: ``` 4 / 2 7 / / 1 3 6 9 ``` And its inorder traversal would be `1 2 3 4 6 7 9`.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sorted_array_to_bst(nums): if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sorted_array_to_bst(nums[:mid]) root.right = sorted_array_to_bst(nums[mid+1:]) return root def inorder_traversal(root): if not root: return [] return inorder_traversal(root.left) + [root.value] + inorder_traversal(root.right) def construct_balanced_bst_and_inorder_traversal(nums): nums.sort() root = sorted_array_to_bst(nums) return inorder_traversal(root) def process_input(n, arr): return construct_balanced_bst_and_inorder_traversal(arr)"},{"question":"You are given a sequence of integers representing the stock prices of a company over a period of days. You need to determine the maximum profit you can achieve if you are allowed to buy exactly one stock and then sell it at a later date. In other words, you need to find two indices i and j such that i < j and the difference between the stock prices at j and i (price[j] - price[i]) is maximized. If no profit is possible, return 0. The first line contains an integer n (1 ≤ n ≤ 100000) — the number of days. The second line contains n integers representing the stock prices on each day. The stock prices are guaranteed to be non-negative integers and do not exceed 100000. Output a single integer — the maximum profit achievable. If no profit is possible, output 0. Example 1: Input: 6 7 1 5 3 6 4 Output: 5 Example 2: Input: 5 7 6 4 3 1 Output: 0 In the first example, the optimal solution is to buy on day 2 (price=1) and sell on day 5 (price=6), yielding a profit of 6-1 = 5. In the second example, no transactions are possible that yield a profit, so the output is 0.","solution":"def max_profit(prices): Returns the maximum profit achievable from buying and selling the stock. If no profit is possible, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given an array of *n* integers, and you are asked to perform *m* queries on this array. Each query can be one of the following types: 1. `update(i, x)`: Update the element at index *i* in the array to *x*. 2. `sum(l, r)`: Find the sum of the elements from index *l* to *r* inclusive. The goal is to efficiently perform these queries on large arrays. The first line contains two integers *n* and *m* (1 ≤ *n*, *m* ≤ 100,000) — the size of the array and the number of queries, respectively. The second line contains *n* integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the initial values of the array. Each of the next *m* lines contains a query of one of the two types mentioned above. The command for an update query is given in the form of `1 i x` (1 ≤ *i* ≤ *n*, 1 ≤ *x* ≤ 10^9), meaning you should update the *i*-th element in the array to *x*. The command for a sum query is given in the form of `2 l r` (1 ≤ *l* ≤ *r* ≤ *n*), meaning you should compute the sum of the elements from index *l* to *r* inclusive. Print the sum for each query of type 2 in the order they appear in the input. Example: Input: ``` 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 2 5 1 5 20 ``` Output: ``` 6 14 39 ``` In this example: - The array starts as [1, 2, 3, 4, 5]. - The first query asks for the sum from index 1 to 3: 1 + 2 + 3 = 6. - The second query updates index 2 to 10, resulting in the array [1, 10, 3, 4, 5]. - The third query asks for the sum from index 1 to 3: 1 + 10 + 3 = 14. - The fourth query asks for the sum from index 2 to 5: 10 + 3 + 4 + 5 = 22. - The fifth query updates index 5 to 20, resulting in the array [1, 10, 3, 4, 20]. - Note: You only print the output of the sum queries.","solution":"class RangeQueries: def __init__(self, array): self.array = array self.n = len(array) self.tree = [0] * (2 * self.n) self.build() def build(self): # Build the segment tree for i in range(self.n): self.tree[self.n + i] = self.array[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def sum(self, l, r): l += self.n r += self.n + 1 # Make it inclusive s = 0 while l < r: if l % 2 == 1: s += self.tree[l] l += 1 if r % 2 == 1: r -= 1 s += self.tree[r] l //= 2 r //= 2 return s"},{"question":"You are given a grid with n rows and m columns. Each cell of the grid contains a lowercase English letter. Your task is to check if the grid contains a given target word in any of the four directions: horizontally from left to right, horizontally from right to left, vertically from top to bottom, and vertically from bottom to top. The first line contains two integers n and m (1 le n, m le 100) — the number of rows and columns in the grid. The next n lines each contain m lowercase English letters representing the grid. The last line contains a string target (1 le text{length of target} le 100) — the target word that you need to search for. Print \\"YES\\" if the target word is found in the grid in any of the four specified directions, otherwise print \\"NO\\". # Example Input ``` 3 4 abcd efgh ijkl fg ``` Output ``` YES ``` Input ``` 3 3 abc def ghi acf ``` Output ``` NO ```","solution":"def word_in_grid(n, m, grid, target): def search_horizontally(): for row in grid: if target in row or target[::-1] in row: return True return False def search_vertically(): for col in range(m): col_string = \'\'.join(grid[row][col] for row in range(n)) if target in col_string or target[::-1] in col_string: return True return False if search_horizontally() or search_vertically(): return \\"YES\\" else: return \\"NO\\""},{"question":"Amy loves reading and wants to track her reading progress. She has a list of books where each book has a certain number of pages. Amy reads books in the order they appear in her list, but she can decide how many pages she wants to read each day. Given the number of pages Amy reads each day, you need to determine how many days it will take her to finish all the books. The first line contains an integer n (1 ≤ n ≤ 100000) — the number of books. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the number of pages in each book. The third line contains an integer p (1 ≤ p ≤ 1000) — the number of pages Amy can read each day. Print the number of days it will take Amy to finish all the books. Example input: ``` 3 100 200 300 150 ``` Example output: ``` 4 ```","solution":"def calculate_reading_days(n, pages_per_book, pages_per_day): total_pages = sum(pages_per_book) days_needed = total_pages // pages_per_day if total_pages % pages_per_day != 0: days_needed += 1 return days_needed # Example usage: # n = 3 # pages_per_book = [100, 200, 300] # pages_per_day = 150 # print(calculate_reading_days(n, pages_per_book, pages_per_day)) # Output: 4"},{"question":"In a small town, there is a school with n students and m teachers. During the examination period, each student attends one classroom. A classroom is deemed overcrowded if there are more students assigned to it than the number of available teachers. The principal wants to monitor the overcrowded classrooms. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of students and the number of teachers, respectively. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 100), where si is the number of the classroom that the i-th student attends. The third line contains m integers t1, t2, ..., tm (1 ≤ ti ≤ 100), where ti is the number of the classroom assigned to the i-th teacher. The task is to calculate how many classrooms are overcrowded. A classroom is overcrowded if the number of students attending that classroom is greater than the number of teachers assigned to it. Print a single integer — the number of overcrowded classrooms. For example, in the first test, if classroom 1 has 4 students and 2 teachers, it\'s overcrowded. In the second test, if classroom 3 has no students but 3 teachers, it\'s not counted as overcrowded. Input: 3 2 1 1 2 1 2 Output: 1 In the input example, there are 3 students and 2 teachers. The first two students are in classroom 1, and the third student is in classroom 2. The first teacher is in classroom 1, and the second teacher is in classroom 2. In this case, no classroom is overcrowded because classroom 1 has exactly 2 teachers for 2 students and classroom 2 has 1 teacher for 1 student. So the output is 0.","solution":"def count_overcrowded_classrooms(n, m, student_classrooms, teacher_classrooms): student_counts = {} teacher_counts = {} for s in student_classrooms: if s in student_counts: student_counts[s] += 1 else: student_counts[s] = 1 for t in teacher_classrooms: if t in teacher_counts: teacher_counts[t] += 1 else: teacher_counts[t] = 1 overcrowded_count = 0 for classroom in student_counts: if student_counts[classroom] > teacher_counts.get(classroom, 0): overcrowded_count += 1 return overcrowded_count"},{"question":"Given n teams participating in a multi-stage relay race, each team consists of exactly k runners. The race is structured such that each team completes the same set of stages sequentially. However, the race is characterized by varying segment lengths and each runner\'s speed can differ. Your task is to determine the total time taken by each team to finish the race and identify the team that finishes last. The input consists of: - The first line contains integers n and k (1 ≤ n, k ≤ 100) — the number of teams and the number of runners per team. - The second line contains integers m (1 ≤ m ≤ 100) — the number of stages in the race. - The following m lines contain the length of the stage and a list of k integers representing the speed (distance per unit time) of each team\'s runner for that stage. Each of these lines is in the format: `length speed1 speed2 ... speedk`. Each runner runs exactly one stage and passes the baton to the next runner in their team. The first runner of each team runs the first stage, the second runner runs the second stage, and so on. If a team has more stages than runners, they start reusing the runners in the same order (first runner runs the (k+1)-th stage, second runner runs the (k+2)-th stage, and so on). Output the team number that finishes last based on the total time taken to complete the race. If multiple teams have the same completion time, output the smallest team number among them. # Example: **Input:** ``` 3 2 4 10 5 8 20 6 10 15 7 9 25 4 11 ``` **Output:** ``` 1 ``` **Explanation:** - Team 1: - Stage 1: Runner 1 (speed 5) -> 10 / 5 = 2 units of time - Stage 2: Runner 2 (speed 8) -> 20 / 8 = 2.5 units of time - Stage 3: Runner 1 (speed 5) -> 15 / 5 = 3 units of time - Stage 4: Runner 2 (speed 8) -> 25 / 8 = 3.125 units of time - Total time: 2 + 2.5 + 3 + 3.125 = 10.625 units of time - Team 2: - Stage 1: Runner 1 (speed 6) -> 10 / 6 = 1.6667 units of time - Stage 2: Runner 2 (speed 10) -> 20 / 10 = 2 units of time - Stage 3: Runner 1 (speed 6) -> 15 / 6 = 2.5 units of time - Stage 4: Runner 2 (speed 10) -> 25 / 10 = 2.5 units of time - Total time: 1.6667 + 2 + 2.5 + 2.5 = 8.6667 units of time - Team 3: - Stage 1: Runner 1 (speed 7) -> 10 / 7 = 1.4286 units of time - Stage 2: Runner 2 (speed 9) -> 20 / 9 = 2.2222 units of time - Stage 3: Runner 1 (speed 7) -> 15 / 7 = 2.1429 units of time - Stage 4: Runner 2 (speed 9) -> 25 / 9 = 2.7778 units of time - Total time: 1.4286 + 2.2222 + 2.1429 + 2.7778 = 8.5715 units of time Since Team 1 has the highest total time of 10.625 units, they finish last. Hence, the output is 1.","solution":"def find_last_team(n, k, m, stages_info): Determine the team that finishes last based on the total time taken to complete the race. Parameters: n (int): Number of teams k (int): Number of runners per team m (int): Number of stages stages_info (list of list of ints): Information for each stage. Each element is a list containing the stage length followed by the speeds of runners for all teams. Returns: int: The team number that finishes last. total_times = [0] * n for stage in range(m): length = stages_info[stage][0] for team in range(n): runner_index = stage % k speed = stages_info[stage][team + 1] total_times[team] += length / speed return total_times.index(max(total_times)) + 1"},{"question":"A painting competition is being organized in MegaCity, featuring n participants. Each participant may use varying amounts of time and paint to complete their artworks. Specifically, the i-th participant requires ti hours and pi liters of paint to finish their painting. The organizers have a fixed budget of H hours and P liters of paint for the event. Given the constraints of time and paint, the goal is to select participants such that the total hours spent and the total paint used do not exceed H and P respectively, while maximizing the number of selected participants. Each participant can either be selected or not selected; partial participation is not allowed. You are required to determine the maximum number of participants that can be selected within the given time and paint constraints. The first line of input contains three integers n, H, and P (1 ≤ n ≤ 1000, 1 ≤ H, P ≤ 10^5) — the number of participants, the maximum available hours, and the maximum available liters of paint, respectively. The following n lines each contain two integers ti and pi (1 ≤ ti, pi ≤ 10^4) — the hours and paint required by the i-th participant. Print a single integer — the maximum number of participants that can be selected. Example: Input: ``` 5 10 10 4 4 5 5 6 6 1 2 2 3 ``` Output: ``` 3 ``` Explanation: In this example, we can select the first, fourth, and fifth participants. The total time required is 4 + 1 + 2 = 7 hours, and the total amount of paint required is 4 + 2 + 3 = 9 liters, both within the given constraints of 10 hours and 10 liters of paint.","solution":"def max_participants(n, H, P, participants): Given the constraints of time and paint, selects the maximum number of participants whose total hours and total paint used do not exceed H and P, respectively. :param n: Number of participants :param H: Maximum available hours :param P: Maximum available liters of paint :param participants: List of tuples where each tuple contains (ti, pi) for each participant :return: Maximum number of participants that can be selected # Dynamic programming table dp = [[0] * (P + 1) for _ in range(H + 1)] for ti, pi in participants: for hours in range(H, ti - 1, -1): for paint in range(P, pi - 1, -1): dp[hours][paint] = max(dp[hours][paint], dp[hours - ti][paint - pi] + 1) return dp[H][P] # Reading input function def read_input(): n, H, P = map(int, input().strip().split()) participants = [tuple(map(int, input().strip().split())) for _ in range(n)] return n, H, P, participants # Main function to run the solution if __name__ == \\"__main__\\": n, H, P, participants = read_input() print(max_participants(n, H, P, participants))"},{"question":"In a galaxy far away, there is a planetary system with n planets. These planets are connected by m bidirectional space routes. Each space route connects two distinct planets and requires a certain amount of energy to traverse. The energy required is given as a positive integer for each route. A traveler wants to visit every planet in such a way that the total energy required for the journey is minimized. Help the traveler plan their journey by determining the minimum total energy required to visit all the planets, starting from any planet and returning to the starting point (i.e., completing a cycle). You are given n planets and m space routes. The planets are numbered from 1 to n. The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of planets and the number of space routes. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6) representing a space route between planet u and planet v with a required energy w. Print a single integer — the minimum total energy required to complete a cycle that visits every planet exactly once and returns to the starting planet. If it\'s impossible to complete such a cycle, print -1.","solution":"import itertools def find_min_energy(n, m, routes): import sys from itertools import permutations def tsp(graph, s): vertex = [] for i in range(n): if i != s: vertex.append(i) min_path = sys.maxsize next_permutation=permutations(vertex) for i in next_permutation: current_pathweight = 0 k = s for j in i: current_pathweight += graph[k][j] k = j current_pathweight += graph[k][s] min_path = min(min_path, current_pathweight) return min_path adj_matrix = [[sys.maxsize] * n for _ in range(n)] for u, v, w in routes: adj_matrix[u-1][v-1] = w adj_matrix[v-1][u-1] = w min_energy = sys.maxsize for i in range(n): cycle_energy = tsp(adj_matrix, i) if cycle_energy < min_energy: min_energy = cycle_energy if min_energy >= sys.maxsize: return -1 else: return min_energy # Example usage n = 4 m = 6 routes = [ (1, 2, 10), (1, 3, 15), (1, 4, 20), (2, 3, 35), (2, 4, 25), (3, 4, 30) ] print(find_min_energy(n, m, routes)) # Should output the minimum energy required to visit all planets and return to the start"},{"question":"The prestigious FooBar Tech Conference is on the horizon, and the organizers want to ensure an equal representation of junior and senior engineers among attendees. To facilitate this, they decide to organize the conference in the form of teams where each team must have an equal number of junior and senior engineers. The conference invites consist of n engineers, described in a list. Each invitation specifies the engineer\'s level, either \'J\' for junior or \'S\' for senior. Additionally, a team must be composed of k engineers where k is always an even number. Given the list of invitations and the value of k, determine the maximum number of complete teams that can be formed while maintaining equal representation within teams. The first line contains two integers n and k (2 ≤ k ≤ n ≤ 100), which represent the number of invited engineers and the size of each team, respectively. The second line contains a string of length n describing the engineers\' levels, where \'J\' denotes a junior engineer and \'S\' denotes a senior engineer. Output the maximum number of equal representation teams that can be formed. **Example** Input: ``` 10 4 JJSSSJJSJS ``` Output: ``` 2 ``` Here, the two teams that can be formed are of 4 engineers each with equal juniors and seniors (JJSS or SJJS).","solution":"def max_teams(n, k, invitations): Determines the maximum number of complete teams that can be formed with equal representation of junior and senior engineers. Parameters: n (int): the number of invited engineers k (int): the size of each team (always an even number) invitations (str): a string of length n describing the engineers\' levels Returns: int: the maximum number of complete teams juniors = invitations.count(\'J\') seniors = invitations.count(\'S\') teams_possible_by_juniors = juniors // (k // 2) teams_possible_by_seniors = seniors // (k // 2) # The maximum number of teams is the minimum of the above two values return min(teams_possible_by_juniors, teams_possible_by_seniors)"},{"question":"A software company is working on an application that processes a list of documents. Each document can be represented as a string containing only lowercase Latin letters. The application needs to determine whether a document can be considered \\"sorted text\\". A document is considered \\"sorted text\\" if the letters in the string are in non-decreasing alphabetical order. Additionally, the application should be able to perform the following operations: 1. Add a new document to the collection. 2. Remove an existing document from the collection. 3. Check if a specific document in the collection is \\"sorted text\\". Write a program to manage the collection of documents and perform the required operations. The input consists of multiple lines: - The first line contains an integer \'n\' (1 ≤ n ≤ 100), the number of initial documents. - The next \'n\' lines each contain a single string representing a document. - Subsequent lines contain commands, one per line, to perform on the collection: - \\"ADD doc\\" where doc is a string representing the new document to add. - \\"REMOVE doc\\" where doc is a string representing the document to remove. - \\"CHECK doc\\" where doc is a string representing the document to check for sorted status. The output should include the results of \\"CHECK\\" commands, each on a new line: - Print \\"YES\\" if the document is \\"sorted text\\". - Print \\"NO\\" if the document is not \\"sorted text\\". If a document to be removed or checked does not exist in the collection, ignore the command and continue processing the next command. # Example Input: ``` 3 hello world abc ADD zzz CHECK zzz REMOVE world CHECK world CHECK abc ADD ddd CHECK ddd ``` # Example Output: ``` YES NO YES YES ``` # Note: - For the first \\"CHECK\\" command, \\"zzz\\" is added to the collection and is checked whether it is sorted. The answer is \\"YES\\". - For the second \\"CHECK\\" command, \\"world\\" is removed from the collection, so checking \\"world\\" results in no output. - For the third \\"CHECK\\" command, \\"abc\\" is already sorted, so the answer is \\"YES\\". - For the fourth \\"CHECK\\" command, \\"ddd\\" is added to the collection and is sorted, so the answer is \\"YES\\".","solution":"class DocumentManager: def __init__(self, documents): self.documents = set(documents) def add_document(self, document): self.documents.add(document) def remove_document(self, document): if document in self.documents: self.documents.remove(document) def check_document(self, document): if document in self.documents: return all(document[i] <= document[i+1] for i in range(len(document)-1)) return False def process_commands(n, docs, commands): manager = DocumentManager(docs) results = [] for command in commands: cmd_type, *arg = command.split() if cmd_type == \\"ADD\\": manager.add_document(arg[0]) elif cmd_type == \\"REMOVE\\": manager.remove_document(arg[0]) elif cmd_type == \\"CHECK\\": is_sorted = manager.check_document(arg[0]) results.append(\\"YES\\" if is_sorted else \\"NO\\") return results"},{"question":"A cybersecurity company is evaluating different ways to store encrypted passwords. They want to ensure that even when sorted lexicographically, no password should reveal its original position or collide with its prefix. They designated you to implement a unique password concatenation algorithm with specific constraints. You are given n distinct strings (passwords), each with equal length k. Your task is to determine if it is possible to concatenate these strings in such a way that the resulting long string does not contain any other given string as a prefix. The first line contains integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5). Each of the next n lines contains a string of k characters (a mix of lowercase English letters). Print \\"YES\\" if it is possible to concatenate the strings under the given constraints, otherwise, print \\"NO\\". For example: Input: ``` 3 4 abcf bcde cdef ``` Output: ``` YES ```","solution":"def is_possible_to_concatenate_passwords(n, k, passwords): Check if it is possible to concatenate given n strings of length k such that no password is a prefix of the concatenated result. Parameters: n (int): Number of passwords. k (int): Length of each password. passwords (List[str]): List of passwords. Returns: str: \\"YES\\" if it is possible to concatenate, otherwise \\"NO\\". # To avoid prefix collisions, we can sort the passwords and check consecutive pairs passwords.sort() # Check if any password is a prefix of the next one in sorted order for i in range(1, n): if passwords[i].startswith(passwords[i - 1]): return \\"NO\\" return \\"YES\\""},{"question":"You are given a long list of integer numbers where you need to process multiple queries. Each query can be of two types: 1. Update the value at a specific position in the list. 2. Retrieve the sum of all elements in a specified range within the list. You need to support these operations efficiently given the constraints. The first line contains two integers, `n` and `q` (1 le n, q le 10^5) — the size of the list and the number of queries. The second line contains `n` integers denoting the elements of the list. The next `q` lines contain queries, each in one of the following formats: - `1 x y` — Update the value at index `x` to `y` (1-based index). - `2 l r` — Retrieve the sum of elements from index `l` to index `r` (1-based index, inclusive). For each query of the second type, print the corresponding sum. **Example:** **Input:** ``` 5 4 1 2 3 4 5 2 1 3 1 3 10 2 1 3 2 4 5 ``` **Output:** ``` 6 13 9 ``` **Explanation:** - The initial list is `[1, 2, 3, 4, 5]`. - The first query retrieves the sum of elements from index 1 to 3, which is `1 + 2 + 3 = 6`. - The second query updates the value at index 3 to 10, so the list becomes `[1, 2, 10, 4, 5]`. - The third query retrieves the sum of elements from index 1 to 3, which is `1 + 2 + 10 = 13`. - The fourth query retrieves the sum of elements from index 4 to 5, which is `4 + 5 = 9`.","solution":"class NumList: def __init__(self, nums): self.nums = nums self.prefix_sums = self._compute_prefix_sums(nums) def _compute_prefix_sums(self, nums): prefix_sums = [0] * (len(nums) + 1) for i in range(1, len(nums) + 1): prefix_sums[i] = prefix_sums[i - 1] + nums[i - 1] return prefix_sums def update(self, x, y): difference = y - self.nums[x - 1] self.nums[x - 1] = y for i in range(x, len(self.prefix_sums)): self.prefix_sums[i] += difference def range_sum(self, l, r): return self.prefix_sums[r] - self.prefix_sums[l - 1] def process_queries(n, q, nums, queries): num_list = NumList(nums) result = [] for query in queries: if query[0] == 1: num_list.update(query[1], query[2]) elif query[0] == 2: result.append(num_list.range_sum(query[1], query[2])) return result"},{"question":"You are given an array of integers of size n representing the heights of students in a line. The students are standing in such a way that every student\'s height is either equal to or greater than the height of the student standing immediately before them. Your task is to determine the minimum number of students that need to be removed to make the array strictly increasing (each student is taller than the previous one). For example, given the array [1, 2, 2, 3, 4, 3, 5], you would need to remove the second occurrence of 2 and the second occurrence of 3 to make the array strictly increasing (resulting in [1, 2, 3, 4, 5]). # Input Format: - The first line contains an integer n (2 le n le 2 cdot 10^5) — the number of students. - The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) — the heights of the students in the order they are standing. # Output Format: - Print a single integer: the minimum number of students that need to be removed to make the array strictly increasing. # Example: Input: ``` 7 1 2 2 3 4 3 5 ``` Output: ``` 2 ``` # Explanation: To make the array strictly increasing, you need to remove the second occurrence of 2 and the second occurrence of 3, resulting in the array [1, 2, 3, 4, 5]. Thus, the minimum number of students that need to be removed is 2.","solution":"def min_removals_to_make_strictly_increasing(heights): Determines the minimum number of students that need to be removed to make the array strictly increasing. Parameters: heights (list): List of integers representing the heights of students. Returns: int: Minimum number of students to remove. from bisect import bisect_left def length_of_lis(sequence): Helper function to compute the length of the longest increasing subsequence (LIS). lis = [] for height in sequence: pos = bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height return len(lis) n = len(heights) lis_length = length_of_lis(heights) return n - lis_length"},{"question":"Given a positive integer n, determine the minimum number of steps needed to reduce n to 1, following these operations: 1. If n is even, divide it by 2. 2. If n is odd, you can either add 1 to it or subtract 1 from it. You need to answer several test cases. The first line of the input contains a single integer t (1 le t le 10^4) — the number of test cases. Each of the following t lines contains a single integer n (1 le n le 10^9). For each test case, print the minimum number of steps to reduce n to 1. # Example ```plaintext Input: 3 3 10 25 Output: 2 4 6 ``` # Explanation - For the first test case, 3 -> 4 -> 2 -> 1 (2 steps). - For the second test case, 10 -> 5 -> 4 -> 2 -> 1 (4 steps). - For the third test case, 25 -> 24 -> 12 -> 6 -> 3 -> 2 -> 1 (6 steps).","solution":"def min_steps_to_one(n): Returns the minimum number of steps to reduce n to 1. steps = 0 while n != 1: if n % 2 == 0: n //= 2 else: # If n is odd, we can add or subtract 1. # To minimize steps, check if (n-1) or (n+1) is more divisible by 2. if n == 3 or n % 4 == 1: n -= 1 else: n += 1 steps += 1 return steps def min_steps_solver(test_cases): results = [] for n in test_cases: results.append(min_steps_to_one(n)) return results"},{"question":"Lana is organizing a coding competition with a series of tasks. Each task requires a certain number of points to be accumulated before it can be tackled. You are given a list of tasks, where each task has a certain number of points associated with it. Competitors can choose any subset of tasks to maximize their total points, but they cannot exceed a given maximum points limit. Given a list of tasks and their associated points, along with a maximum points limit, determine the maximum total points a competitor can accumulate without exceeding the maximum points limit. The first line of the input contains two integers n and P (1 ≤ n ≤ 100, 1 ≤ P ≤ 10^4), where n is the number of tasks and P is the maximum points limit. The second line contains n space-separated integers representing the points required for each task. Output a single integer, the maximum total points a competitor can accumulate without exceeding the points limit. # Sample Input ``` 5 10 2 3 7 1 4 ``` # Sample Output ``` 10 ``` In this sample, competitors can choose the tasks with points [3, 7] to achieve a total of 10 points without exceeding the points limit.","solution":"def max_points(n, P, points): Determines the maximum total points accumulated without exceeding the points limit. :param n: Number of tasks. :param P: Maximum points limit. :param points: List of points for each task. :return: Maximum points accumulated without exceeding the limit. # Initialize a dp array where dp[j] is the maximum points we can get with a limit of j points. dp = [0] * (P + 1) for point in points: # Traverse dp array from right to left for j in range(P, point - 1, -1): dp[j] = max(dp[j], dp[j - point] + point) return dp[P]"},{"question":"Farida the gardener is planning to create a beautiful pattern with her plants. She has a row of plants, some of which may already be blooming with flowers. Farida loves symmetry and wants to make the row as symmetric as possible by flipping some subsegments of plants. Flipping a subsegment [l, r] means choosing indices l and r, and reversing the order of plants between these indices. You need to help Farida determine the minimum number of flips required to make the entire row of plants symmetric. Input consists of a single line containing a string `plants` (`1 ≤ |plants| ≤ 1000`) — a sequence of plants, where each plant is represented by a lowercase Latin letter. Print a single integer — the minimum number of flips required to make the sequence symmetric. For example: Input ``` abca ``` Output ``` 1 ``` Explanation: By flipping the subsegment from index 2 to index 3, the sequence becomes `acba`, which is symmetric. Thus, only one flip is required.","solution":"def min_flips_to_symmetric(plants): Returns the minimum number of flips required to make the plant sequence symmetric. n = len(plants) # Initialize a 2D DP array where dp[i][j] holds the minimum flips required to make plants[i:j+1] symmetric. dp = [[0] * n for _ in range(n)] # Fill DP array for length in range(2, n + 1): # Length of the substring for i in range(n - length + 1): j = i + length - 1 if plants[i] == plants[j]: dp[i][j] = dp[i + 1][j - 1] if i + 1 <= j - 1 else 0 else: dp[i][j] = 1 + min( dp[i + 1][j] if i + 1 <= j else float(\'inf\'), dp[i][j - 1] if j - 1 >= i else float(\'inf\') ) return dp[0][n - 1]"},{"question":"A software company is developing a reservation system for conference rooms. You are tasked with implementing a function to determine the maximum number of non-overlapping reservations that can be made in a single conference room. Each reservation has a start and end time (both inclusive). The reservation times are given as a list of tuples, where each tuple consists of two integers (start, end). You must return the maximum number of non-overlapping reservations possible. # Input The input consists of: - An integer `n` (1 ≤ n ≤ 100) — the number of reservation requests. - A list of `n` tuples. Each tuple contains two integers `start` and `end` (1 ≤ start ≤ end ≤ 1000) representing the start and end times of the reservation. # Output Return a single integer — the maximum number of non-overlapping reservations. # Example Input ``` n = 3 reservations = [(1, 3), (2, 5), (4, 6)] ``` Output ``` 2 ``` Explanation The optimal solution is to select the reservations (1, 3) and (4, 6) which do not overlap. # Constraints - The conference room can handle only one reservation at a time. - The times are given in a 24-hour format (i.e., integers). # Note - Be sure to optimize your solution to handle the constraints efficiently.","solution":"def max_non_overlapping_reservations(n, reservations): # Sort reservations based on end times reservations.sort(key=lambda x: x[1]) # Initialize variables count = 0 end_time = 0 # Iterate and select non-overlapping reservations for start, end in reservations: if start > end_time: count += 1 end_time = end return count"},{"question":"Nora is planning a treasure hunt game for the annual summer camp. For this, she needs to set up a series of clues that lead from one point to another on a grid. The grid is a square matrix of size ( n times n ), and each cell has a certain number of coins. The participants start at the top-left corner of the grid (cell (1,1)) and need to reach the bottom-right corner of the grid (cell (n,n)). They can only move either right or down at any point in time. She wants to make the game more innovative by allowing participants to collect the maximum number of coins possible from the start to the finish point. Can you help her compute the maximum number of coins that can be collected? # Input - The first line contains an integer ( n ) (( 1 leq n leq 1000 )) — the size of the grid. - The next ( n ) lines contain ( n ) integers each, where the ( j )-th integer in the ( i )-th line ( c_{ij} ) (( 0 leq c_{ij} leq 100 )) represents the number of coins available in cell ((i, j)). # Output - Print a single integer representing the maximum number of coins that can be collected from the start to the finish point by only moving right or down. # Example Input ``` 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 29 ``` Explanation The grid is as follows: ``` 1 2 3 4 5 6 7 8 9 ``` One possible path to collect the maximum coins is to move right, right, down, down which yields coins: (1 + 2 + 3 + 6 + 9 = 21). However, the maximum path for collecting coins would involve moves as either: down, down, right, right which yields coins: (1 + 4 + 7 + 8 + 9 = 29). Hence, the output is 29.","solution":"def max_coins(n, grid): Computes the maximum number of coins that can be collected from the start to the finish point on an n x n grid by only moving right or down. Parameters: n (int): Size of the grid grid (list of list of int): 2D list representing the grid with coins in each cell Returns: int: The maximum number of coins that can be collected # Create a 2D list to store the maximum coins collected up to each cell dp = [[0] * n for _ in range(n)] # Initialize the dp grid with the coins at the start position dp[0][0] = grid[0][0] # Fill the first row (can only come from left) for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp grid for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right cell contains the maximum coins collected from (0,0) to (n-1,n-1) return dp[n-1][n-1]"},{"question":"You are given a binary string s consisting of n characters, where each character is either \'0\' or \'1\'. Your task is to find the length of the longest contiguous substring consisting solely of \'1\'s. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the length of the binary string s. The second line contains the binary string s of length n. Print a single integer — the length of the longest contiguous substring of \'1\'s in the given binary string s. Example: Input: 7 1001101 Output: 2 Explanation: The longest contiguous substring of \'1\'s in \\"1001101\\" is \\"11\\", which has a length of 2.","solution":"def longest_contiguous_ones(n, s): Finds the length of the longest contiguous substring consisting solely of \'1\'s in the given binary string s. Parameters: n (int): length of the binary string s s (str): binary string of length n Returns: int: length of the longest contiguous substring of \'1\'s max_length = 0 current_length = 0 for char in s: if char == \'1\': current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"The Smith family has a unique tradition during winter. They love skiing on a special slope that resembles an M x N grid. Each cell on the grid has a height associated with it, and the family has found a peculiar joy in making their way down the slope based on these heights. Starting from a cell on the grid, they can move to any of the four directly adjacent cells (up, down, left, right), but only if the cell they are moving to has a strictly lower height than the current cell. Each cell represents a possible starting point, and the goal is to find the length of the longest possible path they can ski down from any cell on the grid. You are given an M x N grid of integers representing the heights of the cells. Write a program to determine the length of the longest ski path that can be taken starting from any cell. The first line contains two integers M and N (1 ≤ M, N ≤ 1000), the dimensions of the grid. Each of the next M lines contains N integers h_ij (-10^6 ≤ h_ij ≤ 10^6), where h_ij is the height of the cell in the i-th row and j-th column. Print a single integer: the length of the longest ski path. Here is a sample input and output for clarification: **Input:** 4 4 9 6 3 2 5 3 2 1 8 7 4 0 6 5 2 3 **Output:** 6 Explanation: One possible longest ski path is 9 -> 6 -> 5 -> 3 -> 2 -> 1, which has length 6.","solution":"def longest_ski_path(grid): if not grid: return 0 M, N = len(grid), len(grid[0]) dp = [[-1 for _ in range(N)] for _ in range(M)] def dfs(r, c): if dp[r][c] != -1: return dp[r][c] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_length = 1 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < M and 0 <= nc < N and grid[nr][nc] < grid[r][c]: max_length = max(max_length, 1 + dfs(nr, nc)) dp[r][c] = max_length return dp[r][c] longest_path = 0 for i in range(M): for j in range(N): longest_path = max(longest_path, dfs(i, j)) return longest_path"},{"question":"In a distant galaxy, there are various planets connected by a series of bidirectional space routes. Some of these routes are more dangerous due to asteroid fields or space pirates, and thus have higher weights representing the risk level. You are tasked with finding the safest path from Planet A to Planet B, where the safest path is defined as the one with the smallest maximum risk among all routes taken to reach the destination. Formally, you are given a graph where nodes represent planets and weighted edges represent the risk level of the space routes between the planets. You need to find the path with the minimum maximum edge weight from Planet A to Planet B. The input format is as follows: - The first line contains two integers n and m — the number of planets and the number of space routes, respectively. - Each of the next m lines contains three integers u, v, and w — indicating a bidirectional space route between planets u and v with a risk level of w. - The last line contains two integers A and B — the starting and ending planets. The output should be a single integer — the minimum possible value of the maximum risk level on the safest path from Planet A to Planet B. If there\'s no path from Planet A to Planet B, output -1. Example: Input: ``` 6 7 1 2 4 1 3 2 2 4 6 3 4 3 3 5 8 4 5 7 4 6 5 1 6 ``` Output: ``` 5 ``` Explanation: The safest path from planet 1 to planet 6 can be 1 -> 3 -> 4 -> 6 with route risks 2, 3, and 5, respectively, and the maximum risk among these routes is 5.","solution":"import heapq from collections import defaultdict def safest_path(n, m, edges, A, B): Find the path with the minimum maximum edge weight from planet A to planet B. :param n: Number of planets :param m: Number of space routes :param edges: List of tuples, each containing (u, v, w) representing a route between planet u and planet v with risk level w :param A: Start planet :param B: Destination planet :return: Minimum possible value of the maximum risk level on the safest path from A to B, or -1 if no such path exists graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) pq = [(0, A)] # (current maximum risk, current node) visited = [float(\'inf\')] * (n + 1) visited[A] = 0 while pq: max_risk, node = heapq.heappop(pq) if node == B: return max_risk for neighbor, risk in graph[node]: new_risk = max(risk, max_risk) if new_risk < visited[neighbor]: visited[neighbor] = new_risk heapq.heappush(pq, (new_risk, neighbor)) return -1"},{"question":"Let’s consider the concept of a \\"match\\" between two strings, which is defined by the following rules: - Two strings match if they are of the same length. - During a match, characters in corresponding positions should be either the same or one can be a wildcard character represented by `\\"*\\"`. - Wildcard characters `\\"*\\"` can match any single character from `a` to `z`. Given two strings `s` and `t` of equal length consisting of lowercase Latin letters and the wildcard character `\\"*\\"`, determine if these two strings match. # Example: - For `s = \\"a*c\\"` and `t = \\"abc\\"`, the output should be \\"YES\\" because the wildcard character `\'*\'` in `s` can match to the character `\'b\'`. - For `s = \\"a*cb\\"` and `t = \\"axcy\\"`, the output should be \\"NO\\" because the lengths of the two strings must be the same. # Input: The first line contains a single integer `k` (1 ≤ `k` ≤ 100), representing the number of test cases. Each test case consists of two lines: - The first line contains string `s`. - The second line contains string `t`. Both `s` and `t` are of the same length and consist of lowercase Latin letters (`a`-`z`) and may contain the wildcard character `\\"*\\"`. The length of each string is between 1 and 100 (inclusive). # Output: - For each test case, print \\"YES\\" if strings `s` and `t` match according to the given rules. - Print \\"NO\\" otherwise. # Sample Input: ``` 3 abc a*c abc a*d abc abc ``` # Sample Output: ``` YES NO YES ``` # Note: For the first test case, the `\'*\'` in `s` can match the `\'b\'` in `t`. For the second test case, the `\'*\'` in `s` cannot match the `\'d\'` in `t` because the other characters don\'t match up. For the third test case, both `s` and `t` are identical.","solution":"def string_match(s, t): Determines if two strings s and t match based on given rules. if len(s) != len(t): return \\"NO\\" for i in range(len(s)): if s[i] != t[i] and s[i] != \'*\' and t[i] != \'*\': return \\"NO\\" return \\"YES\\" def process_test_cases(k, test_cases): results = [] for s, t in test_cases: result = string_match(s, t) results.append(result) return results"},{"question":"You are working with a file that contains a list of students and their grades in different subjects. The task is to parse the file and calculate the average grade for each student. Each line in the file contains a student\'s name followed by their grades in different subjects, separated by spaces. Your goal is to read the file, calculate the average grade for each student, and print each student\'s name followed by their average grade. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of students. The next n lines contain information about each student in the following format: \'name grade1 grade2 ... gradek\', where name is a string (1 ≤ |name| ≤ 100) representing the student\'s name, and grade1, grade2, ..., gradek (0 ≤ gradei ≤ 100) are the grades of the student in different subjects. Print n lines where each line contains the student\'s name followed by their average grade, rounded to two decimal places. Example: Input: 3 John 75 80 65 Jane 95 100 90 Bob 55 60 58 Output: John 73.33 Jane 95.00 Bob 57.67 Note: - Each student\'s name will be unique. - The number of grades for each student may be different.","solution":"def calculate_average_grades(input_lines): Takes a list of strings as input where the first line contains the number of students and each subsequent line contains a student\'s name followed by their grades. Returns a list of strings with each student\'s name followed by their average grade rounded to two decimal places. n = int(input_lines[0]) results = [] for i in range(1, n+1): parts = input_lines[i].split() name = parts[0] grades = list(map(int, parts[1:])) average_grade = sum(grades) / len(grades) results.append(f\\"{name} {average_grade:.2f}\\") return results"},{"question":"You are given a board of dimensions `n x m` filled with integers. You need to find the minimum path sum from the top-left corner to the bottom-right corner. The path can only move either down or right at any point in time. Write a program to find the minimum path sum. The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 1000`) — the dimensions of the board. Each of the next `n` lines contains `m` integers representing the elements of the board. The value of each element on the board is between `-1000` and `1000`. Output a single integer — the minimum path sum from the top-left corner to the bottom-right corner. Example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: The path 1 → 3 → 1 → 1 → 1 minimizes the sum.","solution":"def min_path_sum(matrix): n = len(matrix) m = len(matrix[0]) # Initialize dp array with the same dimensions as the matrix dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = matrix[0][0] # Fill the first row (only right moves) for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column (only down moves) for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The bottom-right corner contains the minimum path sum return dp[n-1][m-1]"},{"question":"You are assisting a team developing a security protocol for critical communications. They need to encode messages using a custom encryption algorithm that rotates the ASCII values of each character in a given string by a specified number of positions. However, the rotation should only apply to alphabetic characters (both uppercase and lowercase), while other characters should remain unchanged. Write a function `encrypt_message` that takes a string `message` and an integer `rotation` as input and returns the encrypted string. The rotation value can be positive (shifts forward) or negative (shifts backward). Alphabetic characters should wrap around if they go past \'Z\' or \'z\' with the rotation. Non-alphabetic characters should stay the same. # Input - A single string `message` containing the message to be encrypted. - An integer `rotation` specifying the number of positions to rotate the alphabetic characters. # Output - A single string representing the encrypted message. # Example ```plaintext Input: message: \\"Hello, World!\\" rotation: 5 Output: \\"Mjqqt, Btwqi!\\" ``` ```plaintext Input: message: \\"abcd XYZ!\\" rotation: -3 Output: \\"xyaU UWT!\\" ``` # Notes - The string `message` contains up to 10^4 characters. - All characters are ASCII characters. - Your function should handle both positive and negative rotation values correctly. Here is the function signature for you to use: ```python def encrypt_message(message: str, rotation: int) -> str: pass ```","solution":"def encrypt_message(message: str, rotation: int) -> str: encrypted_message = [] def rotate_char(c, base, rotation): return chr((ord(c) - base + rotation) % 26 + base) for c in message: if \'A\' <= c <= \'Z\': encrypted_message.append(rotate_char(c, ord(\'A\'), rotation)) elif \'a\' <= c <= \'z\': encrypted_message.append(rotate_char(c, ord(\'a\'), rotation)) else: encrypted_message.append(c) return \'\'.join(encrypted_message)"},{"question":"Given an n x n grid, where some of the cells have positive integers, and some of the cells are empty (denoted by 0). A number in the cell represents the cost required to pass the cell. You are required to move from the top-left cell (0, 0) to the bottom-right cell (n-1, n-1). From a cell (i, j) you can only move to (i+1, j) or (i, j+1), if those cells are within grid boundaries. Write a function to find the path that minimizes the total cost required to reach the destination. Input - The first line contains an integer n (1 ≤ n ≤ 100), the size of the grid. - The following n lines contain n space-separated integers, representing the grid grid[i][j] (0 ≤ grid[i][j] ≤ 100). Output - Output a single integer, the minimal cost required to reach from (0, 0) to (n-1, n-1). Example Input: 3 1 2 3 4 5 6 7 8 9 Output: 21 Explanation: The path with minimum cost is 1 -> 2 -> 3 -> 6 -> 9. Total cost = 1 + 2 + 3 + 6 + 9 = 21.","solution":"def min_cost_path(n, grid): Finds the path that minimizes the total cost required to reach from (0, 0) to (n-1, n-1). Parameters: - n: integer, size of the grid (1 ≤ n ≤ 100) - grid: list of lists of integers representing the grid Returns: - Integer, the minimal cost required to reach from (0, 0) to (n-1, n-1). # Create a 2D dp array initialized with infinity dp = [[float(\'inf\')] * n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(n): for j in range(n): if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[-1][-1]"},{"question":"You are given a sequence of integers and you need to find the length of the longest subsequence that forms a valid mountain. A sequence is called a mountain if it consists of three parts: 1. A strictly increasing part. 2. A peak element (the highest point). 3. A strictly decreasing part. For example, the sequence [2, 3, 5, 4, 3, 2] is a mountain, while [1, 2, 3, 4, 5] is not because it is only increasing. The first line of input contains a single integer n (1 ≤ n ≤ 10^4) - the number of elements in the sequence. The second line contains n integers ai (1 ≤ ai ≤ 10^9) - the elements of the sequence. Output the length of the longest subsequence that forms a valid mountain. If no mountain exists, output 0. Example: Input: 8 2 1 4 7 3 2 5 1 Output: 5 Explanation: The longest mountain subsequence in [2, 1, 4, 7, 3, 2, 5, 1] is [1, 4, 7, 3, 2]. Its length is 5.","solution":"def longest_mountain(arr): n = len(arr) if n < 3: return 0 max_length = 0 for i in range(1, n-1): if arr[i-1] < arr[i] > arr[i+1]: left = i - 1 right = i + 1 while left > 0 and arr[left-1] < arr[left]: left -= 1 while right < n-1 and arr[right] > arr[right+1]: right += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given two arrays of integers, `a` and `b`, both of length `n` (1 ≤ n ≤ 10^5). You can perform the following operation on either of the arrays as many times as you want: - Choose an \\"unmarked\\" element from the array - Mark the element - Increase the element by 1 Initially, all elements are unmarked. You want to make both arrays identical. Determine the minimum number of operations required to achieve this. Input: - The first line contains one integer `n` — the length of the arrays. - The second line contains `n` integers representing the array `a` (1 ≤ ai ≤ 10^5). - The third line contains `n` integers representing the array `b` (1 ≤ bi ≤ 10^5). Output: - Print one integer — the minimum number of operations required to make the arrays identical. Example: Input: ``` 3 1 2 3 2 3 4 ``` Output: ``` 3 ``` Explanation: We can make arrays `a` and `b` identical by performing the following operations: - Increase `a[0]` by 1 - Increase `a[1]` by 1 - Increase `a[2]` by 1","solution":"def min_operations_to_make_arrays_identical(n, a, b): Returns the minimum number of operations required to make arrays a and b identical. Parameters: n (int): The length of the arrays. a (list of int): The first array. b (list of int): The second array. Returns: int: The minimum number of operations to make arrays a and b identical. operations = 0 for i in range(n): operations += max(0, b[i] - a[i]) return operations"},{"question":"John is interested in finding the longest substring of a given string that contains at most two distinct characters. Given a string `s`, help John find the longest substring that fits this criteria. Your task is to write a function that will accept a string and return the length of the longest substring with at most two distinct characters. # Input The first line contains an integer `t` (1 ≤ t ≤ 105) — the number of test cases. Each of the next `t` lines contains a single string `s` (1 ≤ |s| ≤ 105), which consists of lowercase English letters. # Output For each test case, output a single integer — the length of the longest substring of the corresponding string that contains at most two distinct characters. # Example ``` Input: 3 eceba ccaabbb aaaa Output: 3 5 4 ``` # Explanation - For the first test case, the longest substring with at most two distinct characters is \\"ece\\" with length 3. - For the second test case, the longest substring with at most two distinct characters is \\"aabbb\\" with length 5. - For the third test case, the entire string \\"aaaa\\" is the longest substring with at most two distinct characters with length 4.","solution":"def length_of_longest_substring_two_distinct(s: str) -> int: Returns the length of the longest substring with at most two distinct characters. from collections import defaultdict n = len(s) if n == 0: return 0 # Dictionary to store the count of characters in the current window char_count = defaultdict(int) left = 0 max_length = 0 for right in range(n): char_count[s[right]] += 1 # If we have more than 2 distinct characters, shrink the window from the left while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given an array of integers, find the longest increasing subsequence (LIS). A subsequence is derived from another sequence by deleting some or no elements without changing the order of the remaining elements. An increasing subsequence is one where each element is larger than the previous one. **Input:** - The first line contains a single integer `n` (1 ≤ n ≤ 1000), the length of the array. - The second line contains `n` integers `a1, a2, ..., an` (−10^9 ≤ ai ≤ 10^9) representing the array. **Output:** - Print the length of the longest increasing subsequence. **Example:** ``` Input: 8 10 9 2 5 3 7 101 18 Output: 4 ``` **Explanation:** In the example, one of the longest increasing subsequences is [2, 3, 7, 101], which has a length of 4. Note that there can be multiple correct answers, but you need to find the length of the longest one.","solution":"def lis_length(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Given an array of positive integers, we need to determine the number of pairs of integers (i, j) such that array[i] is divisible by array[j] and i < j. Write a function `countPairsDivisible(arr)` that takes an array of positive integers `arr` as input and returns the count of such pairs. **Input:** - A single line containing an integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. - The next line contains `n` positive integers `a1, a2, ..., an` (1 ≤ ai ≤ 100,000) — the elements of the array. **Output:** - A single integer — the number of pairs (i, j) such that array[i] is divisible by array[j] and i < j. **Example:** **Input:** ``` 5 10 5 2 20 4 ``` **Output:** ``` 4 ``` **Note:** In the provided example, the valid pairs are: - (10, 2) → 10 is divisible by 2. - (10, 5) → 10 is divisible by 5. - (20, 2) → 20 is divisible by 2. - (20, 5) → 20 is divisible by 5.","solution":"def countPairsDivisible(n, arr): Returns the number of pairs (i, j) such that arr[i] is divisible by arr[j] and i < j. :param n: int - number of elements in the array :param arr: list of int - the elements of the array :return: int - the number of valid pairs count = 0 for i in range(n): for j in range(i + 1, n): if arr[j] % arr[i] == 0: count += 1 return count"},{"question":"Alex has recently started working as a software engineer and is excited to test his coding skills. His first task is to analyze the network data packets received by their server. Each data packet is represented as a non-negative integer. The server tracks the arrival time of each packet in milliseconds. Given a list of n packet arrival timestamps, Alex needs to find the maximum time difference between any two consecutive packets. To make the task more challenging, some packets might be received out of order, so the timestamps need to be sorted first. Write a function `findMaxGap(timestamps)` where `timestamps` is a list of n integers representing the packet arrival times. The function should return the maximum time difference between two consecutive packets, after sorting the timestamps. # Input - A single integer `n` (2 ≤ `n` ≤ 10^5) — the number of data packets. - A list of `n` non-negative integers separated by spaces — the arrival times of the packets. # Output - Print a single integer — the maximum time difference between any two consecutive packets after sorting the timestamps. # Example Input ``` 5 2 5 1 8 3 ``` Output ``` 3 ``` In this example, after sorting the timestamps [1, 2, 3, 5, 8], the maximum time difference between two consecutive packets is between 5 and 8, which is 3 milliseconds. Note: The input will be provided in a format compatible for reading from stdin in competitive programming platforms.","solution":"def findMaxGap(n, timestamps): Returns the maximum time difference between any two consecutive packets after sorting the timestamps. :param n: int - the number of timestamps :param timestamps: List[int] - a list of n non-negative integers representing the arrival times :return: int - the maximum time difference between two consecutive packets if n < 2: return 0 timestamps.sort() max_gap = 0 for i in range(1, n): max_gap = max(max_gap, timestamps[i] - timestamps[i - 1]) return max_gap"},{"question":"Given an integer array, you need to perform a series of operations on it. There are two types of operations: 1. Update the value of an element in the array. 2. Calculate the sum of a subarray (i.e., the contiguous segment of the array). You are to implement and utilize a suitable data structure to efficiently handle these operations. The input consists of: - An integer n (1 ≤ n ≤ 10^5), which represents the length of the array. - An integer m (1 ≤ m ≤ 10^5), which represents the number of operations. - An array of n integers, containing the initial values of the array elements. - m subsequent lines, each containing a query in one of the following formats: - `1 i x`: Update the element at index i (1-based index) to the value x. - `2 l r`: Compute the sum of the subarray from index l to r (inclusive, 1-based index). For each query of type `2 l r`, output the computed sum. Example: Input: ``` 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 1 5 1 5 20 ``` Output: ``` 6 14 32 ``` Explanation: - The initial array is [1, 2, 3, 4, 5]. - The first query asks for the sum of the subarray from index 1 to 3, which is `1 + 2 + 3 = 6`. - The second query updates the element at index 2 to 10, so the array becomes [1, 10, 3, 4, 5]. - The third query asks for the sum of the subarray from index 1 to 3, which is `1 + 10 + 3 = 14`. - The fourth query asks for the sum of the subarray from index 1 to 5, which is `1 + 10 + 3 + 4 + 5 = 23`. - The fifth query updates the element at index 5 to 20, so the array becomes [1, 10, 3, 4, 20]. Consider the constraints carefully to choose an efficient data structure for handling the operations.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, index, value): pos = self.n + index self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, left, right): result = 0 left += self.n right += self.n + 1 while left < right: if left % 2 == 1: result += self.tree[left] left += 1 if right % 2 == 1: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result def process_operations(n, m, array, operations): segment_tree = SegmentTree(array) results = [] for operation in operations: if operation[0] == 1: _, i, x = operation segment_tree.update(i-1, x) elif operation[0] == 2: _, l, r = operation result = segment_tree.range_sum(l-1, r-1) results.append(result) return results"},{"question":"A square matrix of integers is called \\"beautiful\\" if all rows and all columns are palindromes. A palindrome is a sequence of characters which reads the same backward as forward. You are given a square matrix of integers. Your task is to determine whether the given matrix is beautiful or not. The first line contains an integer n (1 ≤ n ≤ 500) — the size of the matrix. Each of the next n lines contains n integers representing the elements of the matrix. Print \\"YES\\" if the matrix is beautiful and \\"NO\\" otherwise. Sample Input 1: ``` 3 1 2 1 2 3 2 1 2 1 ``` Sample Output 1: ``` YES ``` Sample Input 2: ``` 3 1 2 3 4 5 6 7 8 9 ``` Sample Output 2: ``` NO ```","solution":"def is_palindrome(seq): return seq == seq[::-1] def is_beautiful(m): n = len(m) for i in range(n): if not is_palindrome(m[i]): return \\"NO\\" for j in range(n): col = [m[i][j] for i in range(n)] if not is_palindrome(col): return \\"NO\\" return \\"YES\\" def matrix_beautiful(n, matrix): return is_beautiful(matrix)"},{"question":"Anita is studying data structures in computer science, and one day she encounters a problem involving circular arrays. She knows that an array is circular if it can be formed by rotating another array. For example, the arrays [5, 2, 7, 0] and [0, 5, 2, 7] are circular to each other. Given an array of integers, Anita\'s task is to determine the maximum sum of any contiguous subarray in its circular version. The first line contains an integer n (1 ≤ n ≤ 10^5), representing the length of the array. The second line contains n space-separated integers a1, a2, ..., an (|ai| ≤ 10^9), representing the elements of the array. Output the maximum sum of any contiguous subarray in the circular array. **Note:** A subarray may only include each element of the fixed buffer a maximum of once. Thus, for circular arrays, the subarray sum may consist of wrapping around the end of the array to the beginning to maximize the sum. # Example **Input:** ``` 5 3 -2 5 -1 4 ``` **Output:** ``` 11 ``` **Explanation:** Here, the maximum sum is obtained by considering the subarray [5, -1, 4, 3]. The sum of this subarray is 11.","solution":"def max_subarray_sum_circular(nums): def kadane(arr): current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum total_sum = sum(nums) max_kadane = kadane(nums) # Inverting the numbers for finding the minimum subarray sum nums = [-num for num in nums] max_wrap_kadane = kadane(nums) max_wrap = total_sum + max_wrap_kadane # actual minimum subarray sum # Edge case: If all numbers are negative, max_wrap will be zero which is incorrect return max(max_kadane, max_wrap) if max_wrap_kadane != -total_sum else max_kadane"},{"question":"Jason is preparing for a programming competition and is trying different problems to improve his skills. Today he came across a peculiar problem involving unique digits. He has a number `N` and he needs to find out the minimum number of swaps required to rearrange the digits of `N` such that it becomes the smallest possible number but still greater than N. Write a function that receives an integer `N` and returns the minimum number of swaps required to make the smallest number greater than N using all digits of `N`. If it is not possible to obtain such a number, return -1. # Input - A single integer `N` (1 ≤ N ≤ 10^9) # Output - A single integer representing the minimum number of swaps required to rearrange the digits of `N` to obtain the smallest number greater than `N`. If not possible, return -1. # Examples Example 1: **Input:** ``` 123 ``` **Output:** ``` 1 ``` **Explanation:** By swapping the 2 and 3, we get 132 which is the smallest number greater than 123. Example 2: **Input:** ``` 321 ``` **Output:** ``` -1 ``` **Explanation:** It is not possible to rearrange 321 to make it a number greater than 321. Example 3: **Input:** ``` 115 ``` **Output:** ``` 1 ``` **Explanation:** By swapping the 1 and 5, we get 151 which is the smallest number greater than 115.","solution":"from itertools import permutations def minimum_swaps_to_next_permutation(N): Find the minimum number of swaps required to rearrange the digits of N such that it becomes the smallest possible number but still greater than N. If it is not possible to obtain such a number, return -1. str_N = str(N) digits = list(str_N) length = len(digits) # Generate the next permutation next_perm = None for i in range(length-2, -1, -1): if digits[i] < digits[i+1]: break else: return -1 # if no such \'i\' is found, it\'s not possible to get the next permutation for j in range(length-1, i, -1): if digits[j] > digits[i]: break digits[i], digits[j] = digits[j], digits[i] digits = digits[:i+1] + sorted(digits[i+1:]) next_perm = \'\'.join(digits) # Calculate the minimum number of swaps original = list(str_N) count = 0 for k in range(length): if original[k] != digits[k]: swap_idx = k + digits[k+1:].index(original[k]) + 1 digits[k], digits[swap_idx] = digits[swap_idx], digits[k] count += 1 return count"},{"question":"Plesk the Space Explorer is on a mission to discover and document the flora of planet Zog. There are n different types of plants in a garden, and each type is represented by a unique integer from 1 to n. A plant of type i has a unique identifier which is also i. Plesk has a collection device that can select plants with a specific pattern. The pattern is defined by a sequence of integers d1, d2, ..., dk, where each integer represents the type of plant to select in that order. Plesk\'s device can start the pattern from any plant in the garden and proceed sequentially to the next specified type in the pattern, but it cannot skip plants. Given the layout of the garden as a sequence of integers representing plant types, help Plesk determine the maximum number of complete patterns the collection device can select. The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 100) — the number of plants in the garden and the length of the pattern sequence respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^5) — the types of plants in the garden in the order they appear. The third line contains k integers d1, d2, ..., dk (1 ≤ di ≤ 10^5) — the pattern sequence that Plesk needs to follow to collect the plants. Output a single integer — the maximum number of complete patterns the device can select from the garden. Example: Input: 10 3 1 2 3 1 2 3 1 2 3 4 1 2 3 Output: 3 Explanation: In this example, the device can start at the first plant and follow the pattern to collect the first three plants (1, 2, 3). It can then start at the fourth plant and collect the next three plants (1, 2, 3). Finally, it can start at the seventh plant and collect three more plants (1, 2, 3), completing the pattern a total of three times.","solution":"def max_patterns_selected(n, k, plants, pattern): i, j, count = 0, 0, 0 while i < n: if plants[i] == pattern[j]: j += 1 if j == k: count += 1 j = 0 i += 1 return count"},{"question":"You are given an n x n grid where each cell contains an integer. You can perform the following operation any number of times: select any cell in the grid, and add 1 to all the integers in the row and column where that cell is located. Your goal is to make all the integers in the grid equal using the minimum number of operations. The first line contains a single integer n (2 ≤ n ≤ 1000) — the size of the grid. Each of the next n lines contains n integers a[i][j] (0 ≤ a[i][j] ≤ 10^6) — the integers in the grid. Print one integer — the minimum number of operations required to make all the integers in the grid equal. Consider the first example. In the first example, the input grid is: ``` 1 2 3 4 ``` By selecting the (1, 1) cell and adding 1 to its row and column, the grid becomes: ``` 2 3 4 5 ``` By selecting the (2, 2) cell and adding 1 to its row and column, the grid becomes: ``` 2 4 6 5 ``` By selecting the (1, 2) cell and adding 1 to its row and column, the grid becomes: ``` 3 6 7 6 ``` By selecting the (2, 1) cell and adding 1 to its row and column, the grid becomes: ``` 4 6 8 6 ``` By selecting the (2, 1) cell and adding 1 to its row and column again, the grid becomes: ``` 5 7 8 7 ``` By selecting the (1, 2) cell and adding 1 to its row and column again, the grid becomes: ``` 6 8 9 8 ``` By selecting the (1, 1) cell and adding 1 to its row and column again, the grid becomes: ``` 9 10 11 10 ``` By selecting the (2, 2) cell and adding 1 to its row and column again, the grid becomes: ``` 10 10 10 10 ``` Thus, the minimum number of operations required is 8.","solution":"def min_operations_to_equalize_grid(n, grid): Determines the minimum number of operations to make all integers in the grid equal. Each operation involves selecting a cell and adding 1 to all cells in its row and column. Parameters: n (int): Size of the grid (number of rows/columns). grid (List[List[int]]): The n x n grid of integers. Returns: int: Minimum number of operations required to make all integers in the grid equal. max_value = max(max(row) for row in grid) min_value = min(min(row) for row in grid) # The minimum number of operations required would be the difference between # the maximum and minimum values in the grid. return max_value - min_value"},{"question":"You are given a list of strings, each string contains a series of characters. Your task is to determine if any string in the list can be transformed into a palindrome by rearranging its characters. If at least one such string exists, print \\"YES\\" and the string, otherwise print \\"NO\\". A string can be rearranged into a palindrome if at most one character in the string has an odd frequency. # Input - The first line contains a single integer n (1 le n le 10^5) — the number of strings in the list. - Each of the next n lines contains a single string s (1 le |s| le 100), where |s| is the length of the string. The strings consist of lowercase English letters only. # Output - If there is at least one string that can be rearranged to form a palindrome, print \\"YES\\" followed by one such string. - If no such string exists, print \\"NO\\". # Example Input ``` 4 abccba aabb abc aab ``` Output ``` YES abccba ```","solution":"def can_form_palindrome(s): from collections import Counter count = Counter(s) odd_count = sum(1 for freq in count.values() if freq % 2 != 0) return odd_count <= 1 def palindrome_check(n, strings): for s in strings: if can_form_palindrome(s): return f\\"YESn{s}\\" return \\"NO\\""},{"question":"An adventure map is represented as an n x m grid, where each cell contains a rune. Your goal is to find the maximum size of a square sub-grid that contains only the same type of rune. The input consists of: - The first line containing two integers n and m (1 ≤ n, m ≤ 500), representing the dimensions of the grid. - The next n lines each containing m characters, representing the grid. Each character is either \'A\', \'B\', \'C\', \'D\', or \'E\', representing different runes. Your task is to find the maximum size of a square sub-grid that contains only one type of rune. Output a single integer: the maximum size of such a square sub-grid. Example Input: ``` 5 6 AAAAAA ABBBAA ABBBBA ABBBBA AAAAAA ``` Example Output: ``` 3 ``` In the given example, the largest square sub-grid which contains only the same type of rune (\'B\') has a size of 3.","solution":"def find_largest_square(n, m, grid): # Create a DP table to store the size of the largest square sub-grid ending at (i, j) dp = [[0] * m for _ in range(n)] max_square_size = 0 for i in range(n): for j in range(m): # For cells in the first row or first column if i == 0 or j == 0: dp[i][j] = 1 elif grid[i][j] == grid[i-1][j] == grid[i][j-1] == grid[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 # Update the maximum size found so far max_square_size = max(max_square_size, dp[i][j]) return max_square_size"},{"question":"Tanya is programming a new game where players navigate mazes. Each maze is represented as a grid with n rows and m columns. Each cell in the grid can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). The player can move up, down, left, or right, but cannot move diagonally or pass through obstacles. Tanya needs to find the shortest path from the player\'s starting position to the target position. If no such path exists, indicate that it\'s impossible. The first line contains two integers n and m (1 leq n, m leq 1000) — the number of rows and columns in the grid. The second line contains four integers sx, sy, tx, ty (1 leq sx, sy, tx, ty leq 1000) — the starting coordinates (row and column) of the player and the target coordinates respectively. It is guaranteed that both starting and target positions are empty cells. Each of the next n lines contains exactly m characters — the grid representation, where \'.\' denotes an empty cell and \'#\' denotes an obstacle. Print the minimum number of moves required to reach the target position from the starting position. If it\'s impossible to reach the target position, print \\"-1\\". **Example:** Input: ``` 5 5 1 1 5 5 ..... ..#.. .#... ....# #.... ``` Output: ``` 8 ```","solution":"from collections import deque def shortest_path(n, m, sx, sy, tx, ty, grid): Finds the shortest path from (sx, sy) to (tx, ty) on the grid. :param n: int - number of rows :param m: int - number of columns :param sx: int - starting x coordinate (row) :param sy: int - starting y coordinate (column) :param tx: int - target x coordinate (row) :param ty: int - target y coordinate (column) :param grid: list of strings - grid representation :return: int - minimum number of moves to reach the target or -1 if impossible # Convert to 0-indexed sx, sy, tx, ty = sx - 1, sy - 1, tx - 1, ty - 1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue for BFS queue = deque([(sx, sy, 0)]) # Set to keep track of visited nodes visited = set() visited.add((sx, sy)) while queue: x, y, dist = queue.popleft() # If we reach the target if (x, y) == (tx, ty): return dist # Explore all possible movements for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) # If no path found return -1"},{"question":"You are given a string s consisting of lowercase Latin letters, and an integer k. You need to create a new string t that contains exactly k of the most frequent characters in s. If there are multiple such strings, return any of them. The first line contains an integer k (1 ≤ k ≤ 26) — the number of most frequent characters to include. The second line contains a string s (1 ≤ |s| ≤ 200) — the original string consisting of only lowercase Latin letters. Print the resulting string which contains exactly k of the most frequent characters. If there are multiple valid results, print any of them. In the first example, the most frequent characters are \'a\', \'b\', and \'c\', and they can be included in any order to form the string; In the second example, the result is \'aaa\' as \'a\' is the most frequent character and appears exactly 3 times.","solution":"from collections import Counter def most_frequent_chars(s, k): Returns a string containing exactly k of the most frequent characters from the input string s. # Count frequency of each character char_count = Counter(s) # Sort characters by frequency and then alphabetically sorted_chars = sorted(char_count.items(), key=lambda x: (-x[1], x[0])) # Form the result using the k most frequent characters result = \'\'.join([char * count for char, count in sorted_chars[:k]]) return result"},{"question":"You are given a list of n integers representing the heights of n trees in a forest. Your task is to adjust the heights of the trees such that the difference between the tallest tree and the shortest tree is minimized. You can decrease the height of any tree any number of times but cannot increase the height of any tree. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of trees. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the initial heights of the trees. Print a single integer — the minimum possible difference between the height of the tallest tree and the height of the shortest tree after adjustments. For example, if the input is: 5 7 3 9 15 12 The minimum difference can be achieved by adjusting the heights to: 9 9 9 9 9 So the output would be: 0","solution":"def minimize_tree_height_difference(tree_heights): Returns the minimum possible difference between the height of the tallest tree and the height of the shortest tree after adjustments. if not tree_heights: return 0 max_height = max(tree_heights) return max_height - max_height # Since adjusting all heights to max_height minimizes the difference to 0"},{"question":"You are given an array of n integers, and your task is to find the starting and ending indices of the smallest subarray that needs to be sorted in ascending order so that the entire array becomes sorted. If the array is already sorted, output -1. The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers separated by spaces, representing the elements of the array. The integers will be in the range -1000 to 1000. Output two integers, the starting index (1-based) and the ending index (1-based) of the subarray that needs to be sorted. If the array is already sorted, output -1. For example, if the input array is [1, 2, 6, 5, 8], the output should be \\"3 4\\" as sorting the subarray [6, 5] will result in the entire array being sorted. If the input array is already sorted, such as [1, 2, 3, 4], the output should be -1.","solution":"def find_unsorted_subarray(arr): Finds the smallest subarray that needs to be sorted. Parameters: arr (List[int]): The input array of integers. Returns: tuple: A tuple containing the starting and ending indices (1-based) of the subarray, or -1 if the array is already sorted. n = len(arr) start, end = 0, -1 max_seen, min_seen = -float(\'inf\'), float(\'inf\') for i in range(n): max_seen = max(max_seen, arr[i]) if arr[i] < max_seen: end = i for i in range(n-1, -1, -1): min_seen = min(min_seen, arr[i]) if arr[i] > min_seen: start = i if end == -1: return -1 else: return (start + 1, end + 1)"},{"question":"You are given a binary tree with n nodes, where each node has a unique value ranging from 1 to n. The root of the tree is the node with the value 1. For each node in the tree, you can visit its children nodes directly, and from any node, you can travel to its parent node. Each move from one node to an adjacent node (parent or child) takes exactly 1 unit of time. Your task is to determine the minimum time required to visit all the nodes in the tree starting from the root node and return back to it. The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of nodes in the tree. Each of the following n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between the nodes u and v. Output a single integer — the minimum time required to visit all nodes and return to the root. For example: Input: 5 1 2 1 3 3 4 3 5 Output: 6 The output is derived by visiting the nodes in the following order 1 -> 2 -> 1 -> 3 -> 4 -> 3 -> 5 -> 3 -> 1. The total travel time is 6 units.","solution":"from collections import defaultdict, deque def min_time_to_visit_all_nodes(n, edges): if n == 1: return 0 # Building the adjacency list for the tree. tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Function to find the farthest node and its distance from the given start node def farthest_node(start): visited = [False] * (n + 1) visited[start] = True queue = deque([(start, 0)]) farthest = (start, 0) while queue: node, dist = queue.popleft() if dist > farthest[1]: farthest = (node, dist) for neighbor in tree[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + 1)) return farthest # We need the diameter of the tree to calculate the minimum time. # First, find the farthest node from the root (node 1). farthest = farthest_node(1) # Then find the farthest node from the previously found farthest node to get the diameter. _, diameter = farthest_node(farthest[0]) # The minimum time required to visit all nodes and return to the root is 2 * (n - 1) # as we need to traverse each edge twice initially and then return. return 2 * (n - 1)"},{"question":"In a large city, there are n buildings, each with a distinct height expressed in meters. Each day, the buildings receive sunlight from one direction (left to right). A building receives some direct sunlight if it is taller than any of the buildings that are to its left. Given the heights of the buildings, determine the total number of buildings that receive direct sunlight for a particular day. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000) — the heights of the buildings. Print the single integer — the number of buildings that receive direct sunlight. Example: Input: 6 3 1 4 1 5 9 Output: 4 Explanation: - The first building with height 3 receives sunlight since it\'s the first building. - The second building with height 1 does not receive sunlight since 3 is taller. - The third building with height 4 receives sunlight since it\'s taller than 3. - The fourth building with height 1 does not receive sunlight since 4 is taller. - The fifth building with height 5 receives sunlight since it\'s taller than 4. - The sixth building with height 9 receives sunlight since it\'s taller than 5. Thus, a total of 4 buildings receive direct sunlight.","solution":"def num_buildings_with_sunlight(n, heights): Returns the number of buildings that receive direct sunlight. Parameters: n (int): number of buildings heights (list of int): list of building heights Returns: int: number of buildings that receive direct sunlight if not heights: return 0 max_height = 0 count = 0 for height in heights: if height > max_height: count += 1 max_height = height return count"},{"question":"You are given a sequence of n integers, and you need to perform the following operations: 1. Update the value at a specific index to a new value. 2. Calculate the sum of elements in a subarray from index l to r (inclusive). The first line of the input contains two integers n and q (1 ≤ n, q ≤ 2 * 10^5) — the number of elements in the sequence and the number of operations, respectively. The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the initial sequence. Each of the next q lines contains one of the following types of queries: - `1 x y`: Update the value at index x to y (1 ≤ x ≤ n, −10^9 ≤ y ≤ 10^9). - `2 l r`: Calculate the sum of elements from index l to r (1 ≤ l ≤ r ≤ n). Output the results of each sum query. Example input: ``` 5 3 1 2 3 4 5 2 1 3 1 3 10 2 2 5 ``` Example output: ``` 6 21 ``` Explanation: - The initial array is [1, 2, 3, 4, 5]. - The sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. - Updating the value at index 3 to 10, the array becomes [1, 2, 10, 4, 5]. - The sum of elements from index 2 to 5 is 2 + 10 + 4 + 5 = 21. Note: To efficiently handle the operations, consider using data structures such as Fenwick Tree (Binary Indexed Tree) or Segment Tree.","solution":"class FenwickTree: def __init__(self, n): self.n = n self.tree = [0] * (n + 1) def update(self, index, delta): while index <= self.n: self.tree[index] += delta index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def range_query(self, left, right): return self.query(right) - self.query(left - 1) def process_queries(n, initial_array, queries): fenwick_tree = FenwickTree(n) current_values = [0] * (n + 1) for i in range(1, n + 1): fenwick_tree.update(i, initial_array[i-1]) current_values[i] = initial_array[i-1] results = [] for query in queries: if query[0] == 1: index, new_value = query[1], query[2] delta = new_value - current_values[index] fenwick_tree.update(index, delta) current_values[index] = new_value elif query[0] == 2: left, right = query[1], query[2] results.append(fenwick_tree.range_query(left, right)) return results"},{"question":"Dasha loves flowers and she has n flower pots arranged in a row. Each pot has a certain number of flowers in it. Dasha wants to know the maximum number of flowers she can collect by picking exactly k consecutive pots. Help Dasha determine this maximum number. The first line contains two integers n (1 ≤ n ≤ 100,000) and k (1 ≤ k ≤ n) — the number of flower pots and the number of consecutive pots Dasha needs to pick. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the number of flowers in each pot. Print a single integer — the maximum number of flowers Dasha can collect by picking exactly k consecutive pots. In the first sample, Dasha can collect the most flowers by picking the last two pots together. In the second sample, picking the third, fourth, and fifth pots gives Dasha the maximum number of flowers. In the third sample, picking the only available pot is the only option. Sample Input 1: 5 2 1 3 1 2 5 Sample Output 1: 7 Sample Input 2: 7 3 2 4 1 9 3 7 6 Sample Output 2: 19 Sample Input 3: 1 1 10 Sample Output 3: 10","solution":"def max_flowers_in_k_pots(n, k, pots): Given the number of pots (n), the number of consecutive pots to pick (k), and a list of integers representing the flowers in each pot, returns the maximum number of flowers in any k consecutive pots. # Initialize the maximum flowers to be the sum of the first k pots max_flowers = sum(pots[:k]) current_sum = max_flowers # Use sliding window approach to find the maximum sum of k consecutive pots for i in range(k, n): current_sum += pots[i] - pots[i - k] if current_sum > max_flowers: max_flowers = current_sum return max_flowers"},{"question":"A programming contest is taking place, and the participants are given a special type of problem involving trees. They are presented with a tree (a connected acyclic graph) with weighted edges. Each node of the tree can have at most one special property: being either \\"active\\" or \\"inactive.\\" A transformation from the initial tree to another tree involves converting an active node to an inactive one. The cost of this transformation is the weight of the edge that connects this node to its parent. If the node is the root of the tree, then the cost is zero. The goal is to turn all active nodes into inactive ones while minimizing the total transformation cost. The input format is as follows: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of nodes in the tree. - The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1) where ai is 1 if the node is initially active and 0 if inactive. - The following n-1 lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) — representing an edge between nodes u and v with weight w. The output should contain a single integer — the minimum cost required to convert all active nodes into inactive ones. Example: Input: ``` 5 1 0 1 1 0 1 2 3 1 3 2 3 4 4 3 5 1 ``` Output: ``` 3 ``` Explanation: - The tree has nodes 1, 3, and 4 as active. - The minimum cost involves the transformation of node 4 to inactive (cost: 4) and node 1 to inactive (cost: 2). - Therefore, the total cost is 4 (for node 4) + 2 (for node 1), which results in 6. To achieve this, we will traverse the tree and evaluate the cost of transforming each active node using a depth-first search (DFS) strategy, ensuring that we select the minimal set of transformations to convert all active nodes to inactive nodes while minimizing the overall cost. Please note that the tree is always connected and contains no cycles.","solution":"def dfs(node, parent, tree, active, costs): Depth First Search to calculate the minimum cost to transform all active nodes to inactive. Parameters: - node (int): The current node - parent (int): The parent node of the current node - tree (list): Adjacency list of the tree [(destination, weight)] - active (list): List indicating if nodes are initially active - costs (dict): Dictionary to store the cost of activating each node as key Returns: The cost to deactivate active nodes in the subtree rooted at \'node\'. total_cost = 0 # Evaluate all children of the current node for neighbor, weight in tree[node]: if neighbor != parent: total_cost += dfs(neighbor, node, tree, active, costs) if active[node] == 1: if parent != -1: total_cost += costs[(min(node, parent), max(node, parent))] return total_cost def minimum_transformation_cost(n, active, edges): Calculate the minimum cost to deactivate all active nodes. Parameters: - n (int): Number of nodes in the tree - active (list): List indicating if nodes are initially active - edges (list): List of edges specifying connections and weights Returns: The minimum cost required to deactivate all active nodes. from collections import defaultdict tree = defaultdict(list) costs = {} for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) costs[(min(u, v), max(u, v))] = w return dfs(1, -1, tree, active, costs)"},{"question":"You are given a grid of n x n cells, each of which can either be empty or contain an obstacle. You need to start at the top-left corner of the grid and move to the bottom-right corner. You can only move right or down from a cell, and you cannot move through cells that contain obstacles. The task is to determine the total number of unique paths from the top-left to the bottom-right corner of the grid. The first line of input contains an integer n (1 ≤ n ≤ 50) — the size of the grid. The next n lines each contain n characters, either \'.\' or \'#\'. A \'.\' indicates an empty cell, and a \'#\' indicates an obstacle. Output the total number of unique paths from the top-left to the bottom-right corner of the grid. If no such path exists, output 0. Example: Input: ``` 3 ... .#. ... ``` Output: ``` 2 ``` In this example, there are 2 unique paths from the top-left to the bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths_with_obstacles(grid): Returns the total number of unique paths from the top-left to the bottom-right corner of the grid. n = len(grid) if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] # Reading input def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) grid = [] for i in range(n): grid.append(list(data[i+1])) return grid if __name__ == \\"__main__\\": grid = read_input() print(unique_paths_with_obstacles(grid))"},{"question":"A city is planning to optimize its traffic light system. The city has n intersections, each connected by a set of one-way roads. For each intersection, the city plans to place a single traffic light which will operate in one of three colors - red, green, and yellow. The city\'s goal is to ensure that from any intersection, you should be able to reach any other intersection through a sequence of roads passing only through intersections with different colored traffic lights. In other words, no two consecutive intersections in such a sequence should have the same color of traffic light. Write a program to determine if it is possible to color the traffic lights at the intersections in such a way that this goal is achieved. The first line of input contains an integer n (1 ≤ n ≤ 100,000), the number of intersections, and m (1 ≤ m ≤ 200,000), the number of one-way roads. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing a one-way road from intersection u to intersection v. Print \\"YES\\" if such a coloring is possible, otherwise print \\"NO\\". Example: Input: 6 7 1 2 2 3 3 4 4 5 5 6 6 1 1 3 Output: NO Explanation: In the example above, there is a cycle that forces a repeated color which makes it impossible to fulfill the requirement. Input: 4 4 1 2 2 3 3 4 4 1 Output: YES Explanation: In this example, it is possible to color the intersections such that no two consecutive intersections have the same colored traffic light.","solution":"from collections import defaultdict, deque def can_color_traffic_lights(n, m, roads): def is_bipartite(graph, start, colors): queue = deque([start]) colors[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if colors[neighbor] == -1: colors[neighbor] = 1 - colors[node] queue.append(neighbor) elif colors[neighbor] == colors[node]: return False return True graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) colors = [-1] * (n + 1) for i in range(1, n + 1): if colors[i] == -1: if not is_bipartite(graph, i, colors): return \\"NO\\" return \\"YES\\""},{"question":"Markus often visits a team restaurant where he needs to help the restaurant manager with seating guests. The restaurant has a rectangular seating arrangement with dimensions `n x m`, represented as a grid. Each cell in the grid can be either \'E\' (Empty), \'C\' (Chair), or \'T\' (Table). Markus’ task is to allocate guests such that they are seated on chairs (\'C\') and each guest should have access to at least one table (\'T\'). A chair is considered to have access to a table if it is directly adjacent to a table horizontally, vertically, or diagonally. Markus needs to know how many guests can be seated given the initial seating arrangement. # Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 500) — the dimensions of the grid. - The next `n` lines describe the grid, each containing `m` characters (\'E\', \'C\', \'T\') indicating the initial state of each cell. # Output: - Print one integer — the maximum number of guests that can be seated. # Sample Input: ``` 4 4 ECTE EECE CTCE EETE ``` # Sample Output: ``` 4 ``` # Note: In the sample input, the chairs marked on the grid can be seated if they are adjacent to a table: ``` E C T E E E C E C T C E E E T E ``` The guests can be seated on chairs in positions (1,2), (2,3), (3,1), and (3,3) as each is adjacent to at least one table. Hence, the output is `4`.","solution":"def get_max_guests_seated(n, m, grid): Returns the maximum number of guests that can be seated on chairs with access to a table. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of list of str): The seating arrangement. Returns: int: The maximum number of guests that can be seated. def is_accessible_to_table(x, y): Checks if a chair at the position (x, y) is accessible to a table. directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'T\': return True return False count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'C\' and is_accessible_to_table(i, j): count += 1 return count"},{"question":"A farmer has a rectangular field represented by an n x m grid. Each cell in the grid contains either a 0 or a 1, where 0 represents an empty cell, and 1 represents a cell with a crop. To make the field more efficient, the farmer wants to count the number of connected components of crops (i.e., clusters of adjacent 1\'s). Two cells are considered adjacent if they share a common edge (up, down, left, or right). The task is to write a program that finds the number of such clusters in the field. Input format: - The first line contains two integers n and m (1 ≤ n, m ≤ 500), representing the dimensions of the field. - The next n lines each contain m characters (0 or 1) without spaces between them, representing the field. Output format: - Print a single integer, the number of connected components of crops in the field. Example: Input: 4 5 11000 11011 00101 00001 Output: 3 Explanation: There are three clusters of crops in the given field. The first cluster is formed by the 1\'s in cells (1,1), (1,2), (2,1), and (2,2). The second cluster is formed by the 1\'s in cells (2,4) and (2,5). The third cluster is formed by the 1 in cell (4,5).","solution":"def count_clusters(field, n, m): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or field[x][y] == \'0\': return field[x][y] = \'0\' dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) cluster_count = 0 for i in range(n): for j in range(m): if field[i][j] == \'1\': dfs(i, j) cluster_count += 1 return cluster_count def parse_input(input_str): lines = input_str.strip().split(\\"n\\") n, m = map(int, lines[0].split()) field = [list(line) for line in lines[1:]] return field, n, m def solve(input_str): field, n, m = parse_input(input_str) return count_clusters(field, n, m)"},{"question":"You are given a set of N friends, each of whom can send a message to any other friend. The message can contain an arbitrary integer value. However, due to the modest transmission capabilities of their messaging system, each friend can only send a message to another friend if the absolute difference between their identifiers does not exceed a given threshold D. A group of friends wants to know the number of unique ways messages can be sent, considering the given limitation. That means for each pair (i, j) where friend i sends a message to friend j, the condition |i - j| ≤ D must be satisfied. The first line of input contains two integers N and D (1 ≤ N ≤ 10^5, 0 ≤ D ≤ 10^5) — the number of friends and the maximum allowed identifier difference for a message to be sent. Output a single integer — the number of unique ways messages can be sent. **Example:** Input: 5 1 Output: 8 **Explanation:** The friends are numbered 1 through 5. Unique pairs satisfying the condition |i - j| ≤ 1 are: (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), (4, 3), (4, 5), and (5, 4). So the answer is 8.","solution":"def count_message_pairs(N, D): Returns the number of unique ways messages can be sent satisfying the condition |i - j| ≤ D. if D == 0: return 0 total_pairs = 0 for i in range(1, N+1): total_pairs += min(D, N - i) total_pairs += min(D, i - 1) return total_pairs"},{"question":"A squirrel wants to collect nuts for the winter. The squirrel\'s tree is located at point 0, and there are `n` nut trees positioned along the coordinate line at distinct points. The squirrel can travel any distance in one step to collect nuts. However, to remain efficient, the squirrel wants to minimize the total distance traveled to collect all the nuts and return to its tree. Given `n` unique positions on the coordinate line where nuts are located, determine the minimum total distance the squirrel needs to travel to collect all nuts and return to its tree. The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5) — the number of nut trees. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) — the positions of the nut trees. Print the minimum total distance the squirrel needs to travel to collect all nuts and return to its starting point. **Examples:** **Input:** ``` 3 2 4 6 ``` **Output:** ``` 8 ``` **Input:** ``` 2 10 20 ``` **Output:** ``` 20 ``` **Explanation:** In the first example, the squirrel can move from 0 to 2, from 2 to 4, from 4 to 6, and then return to 0. The total distance is (2 - 0) + (4 - 2) + (6 - 4) + (6 - 0) = 2 + 2 + 2 + 6 = 12. However, the optimal way is to move from 0 to 6, collect all nuts on the way and return: (6 - 0) + (6 - 0) = 12. In the second example, the optimal total distance is calculated by moving from 0 to 20, then returning: (20 - 0) + (20 - 0) = 20.","solution":"def min_total_distance(n, positions): Calculate the minimum total distance the squirrel needs to travel to collect all nuts and return to its starting point. :param n: Number of nut trees :param positions: List of positions of nut trees :return: Minimum total distance max_position = max(positions) min_position = min(positions) return 2 * (max_position - min_position)"},{"question":"There is an island with n cities and m roads connecting them. Each road has a certain travel time associated with it. The government wants to build a new telecommunication network such that every city can communicate with each other. They aim to minimize the total cost of building this network. However, the government has special conditions for the network: no single road should be used by exactly one city more than once. Given the cities and roads information, you need to calculate the minimum cost required to build the network. The first line contains two integers n and m (2 le n le 100,000, 1 le m le 200,000) — the number of cities and the number of roads between them. Each of the next m lines describes a road. Each road is represented by three integers u, v, and w (1 le u, v le n, u ne v, 1 le w le 10^6), where u and v are the cities connected by the road and w is the travel time on this road. Output a single integer representing the minimum cost to build the network such that all cities can communicate with each other. Consider the following sample test case. There are 4 cities and 5 roads. The goal is to connect all cities with the minimum cost. The roads are described as follows: - Road 1 connects city 1 and city 2 with a travel time of 1. - Road 2 connects city 1 and city 3 with a travel time of 4. - Road 3 connects city 1 and city 4 with a travel time of 3. - Road 4 connects city 2 and city 3 with a travel time of 3. - Road 5 connects city 3 and city 4 with a travel time of 2. The optimal network coverage in this case will have a minimum cost of 6.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 for edge in edges: u, v, w = edge root_u = find(parent, u - 1) root_v = find(parent, v - 1) if root_u != root_v: mst_weight += w union(parent, rank, root_u, root_v) return mst_weight"},{"question":"In a galaxy far, far away, there is a new type of transportation system called SpaceHyperLoop. The SpaceHyperLoop operates in a rectangular grid where each node (i.e., each coordinate) can teleport to another node if certain conditions are met. To use the SpaceHyperLoop efficiently, we need to determine the minimum distance between two given points A and B on the grid. The grid has some nodes that are blocked, meaning teleportation cannot occur through these nodes. Teleportation can only occur horizontally or vertically to adjacent nodes. You are given the dimensions of the grid, the coordinates of the start point A, the coordinates of the destination point B, and the list of blocked nodes. Write a program to determine the minimum number of teleports needed to get from point A to point B, or state that it is impossible if no path exists. # Input Format: The first line contains four integers n, m, ax, ay (1 ≤ ax, ay ≤ n, m) and bx, by (1 ≤ bx, by ≤ n, m) – the dimensions of the grid, the coordinates of point A, and the coordinates of point B. The second line contains an integer k (0 ≤ k ≤ n*m) – the number of blocked nodes. Each of the next k lines contains two integers xi and yi (1 ≤ xi, yi ≤ n, m) – the coordinates of a blocked node. # Output Format: Print a single integer – the minimum number of teleports needed to travel from point A to point B. If no such path exists, print -1. # Example: Input: ``` 5 5 1 1 5 5 3 2 2 3 3 4 4 ``` Output: ``` 8 ``` Explanation: Teleporting through the grid from (1, 1) to (5, 5), avoiding blocked nodes (2, 2), (3, 3), and (4, 4), the minimum number of teleports required is 8.","solution":"from collections import deque def min_teleports(n, m, ax, ay, bx, by, blocked): Returns the minimum number of teleports needed to travel from point A to point B in a grid, or -1 if no such path exists. :param n: int - number of rows in the grid :param m: int - number of columns in the grid :param ax: int - x-coordinate of the starting point A :param ay: int - y-coordinate of the starting point A :param bx: int - x-coordinate of the destination point B :param by: int - y-coordinate of the destination point B :param blocked: list of tuples - coordinates of blocked nodes :return: int - minimum number of teleports, or -1 if no path exists if (ax, ay) == (bx, by): return 0 blocked_set = set(blocked) if (ax, ay) in blocked_set or (bx, by) in blocked_set: return -1 directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] queue = deque([(ax, ay, 0)]) visited = set([(ax, ay)]) while queue: cx, cy, dist = queue.popleft() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 1 <= nx <= n and 1 <= ny <= m and (nx, ny) not in blocked_set and (nx, ny) not in visited: if (nx, ny) == (bx, by): return dist + 1 queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Gaurav is organizing a charity fundraising event. He has prepared a list of potential donors he wants to contact. Each donor has a different willingness to donate and a fixed contact period during which they can be contacted. Gaurav wants to maximize the total donations by contacting donors at the right time. Given a list of donors with their respective amounts they are willing to donate and their contact period, determine the maximum total donation Gaurav can collect if he can\'t contact more than one donor at the same time. Each donor is represented by three integers: start time, end time, and donation amount. The first line of the input contains a single integer n (1 leq n leq 10^5), which represents the number of donors. Each of the following n lines contains three integers s_i, e_i, d_i (1 leq s_i < e_i leq 10^9, 1 leq d_i leq 10^5), where s_i is the start time, e_i is the end time and d_i is the donation amount of the ith donor. Print a single integer representing the maximum total donation Gaurav can collect. Example: Input: 5 1 3 50 3 5 20 2 5 100 3 4 200 1 5 50 Output: 250 Explanation: - The optimal way is to contact the donor at (3, 4) with donation 200 and then donor at (1, 3) with donation 50. - The total donation collected is 200 + 50 = 250.","solution":"def max_donations(donors): donors.sort(key=lambda x: x[1]) # Sort by end time # Initialize a dp array where each slot represents max donation up to this donor dp = [0] * len(donors) dp[0] = donors[0][2] # The donation amount for the first donor for i in range(1, len(donors)): include_donation = donors[i][2] # Donation including the current donor # Find the last non-conflicting donor for j in range(i - 1, -1, -1): if donors[j][1] <= donors[i][0]: include_donation += dp[j] break dp[i] = max(dp[i - 1], include_donation) return dp[-1]"},{"question":"You are given a list of integers which represent the scores of students in a class. You are asked to determine if the scores can be rearranged to form an arithmetic progression. An arithmetic progression is a sequence of numbers in which the difference of any two successive members is a constant. Your task is to write a program to check whether it is possible to rearrange the given scores to form an arithmetic progression. If it is possible, print \\"Possible\\". If it is not possible, print \\"Impossible\\". The input consists of multiple lines: - The first line contains an integer n (2 ≤ n ≤ 1000) representing the number of scores. - The next line contains n integers, the scores, separated by spaces. The scores are between -10^4 and 10^4 inclusive. Your output should be a single line. If the scores can be rearranged to form an arithmetic progression, print \\"Possible\\". Otherwise, print \\"Impossible\\". For example: Input: 5 3 5 1 7 9 Output: Possible Input: 4 1 2 4 7 Output: Impossible","solution":"def can_form_arithmetic_progression(scores): Determines if the given list of scores can be rearranged to form an arithmetic progression. scores.sort() diff = scores[1] - scores[0] for i in range(2, len(scores)): if scores[i] - scores[i - 1] != diff: return \\"Impossible\\" return \\"Possible\\""},{"question":"Given an integer array nums containing n distinct numbers, you need to determine if there exists a subset of nums such that the sum of the elements in the subset is equal to a given target sum t. If such a subset exists, output the subset; otherwise, output \\"No solution\\". The first line of the input contains two integers n and t (1 ≤ n ≤ 1000, 1 ≤ t ≤ 10^9). The second line contains n distinct space-separated integers representing the array nums (-10^9 ≤ nums[i] ≤ 10^9). Output either a valid subset of nums whose sum is equal to t, or \\"No solution\\" if no such subset exists. If there are multiple solutions, output any of them. Example input: 5 10 2 4 6 8 10 Example output: 2 8 Example input: 4 15 1 2 3 4 Example output: No solution","solution":"def subset_sum(nums, t): Determine if there exists a subset of nums that sums to t. If such a subset exists, return it as a list. Otherwise, return \\"No solution\\". n = len(nums) dp = {0: []} # Initial state with zero sum having an empty subset for num in nums: current_dp = list(dp.items()) for current_sum, subset in current_dp: new_sum = current_sum + num if new_sum == t: return subset + [num] if new_sum not in dp: dp[new_sum] = subset + [num] return \\"No solution\\" # Function to parse input received in the specified format def parse_and_run(): import sys input = sys.stdin.read data = input().split() n, t = int(data[0]), int(data[1]) nums = list(map(int, data[2:2+n])) solution = subset_sum(nums, t) if solution == \\"No solution\\": print(solution) else: print(\\" \\".join(map(str, solution)))"},{"question":"Megan has a new board game where she can place tokens on a grid. The grid is an R by C matrix (1 ≤ R, C ≤ 1000) of cells initially containing zeros. Megan can perform two types of operations on the grid: 1. Set the value of a specific cell to 1. 2. Query a subgrid and count the number of cells with a value of 1 in that subgrid. A subgrid is defined by two pairs of coordinates (r1, c1) and (r2, c2) such that 1 ≤ r1 ≤ r2 ≤ R and 1 ≤ c1 ≤ c2 ≤ C. Write a program to simulate this board game. The first line of the input contains two integers R and C, followed by a number of operations Q (1 ≤ Q ≤ 100,000). The next Q lines describe the operations. Each operation is represented by: - \\"SET r c\\" to set the (r, c) cell to 1. - \\"QUERY r1 c1 r2 c2\\" to query the subgrid from (r1, c1) to (r2, c2) and return the count of cells with a value of 1 in that subgrid. Output the results of the QUERY operations in order. Example: Input: 3 3 5 SET 1 1 SET 2 2 QUERY 1 1 2 2 SET 3 3 QUERY 1 1 3 3 Output: 2 3","solution":"def board_game_simulation(r, c, operations): # Initialize the grid with zeros grid = [[0] * c for _ in range(r)] query_results = [] def set_value(row, col): grid[row - 1][col - 1] = 1 def query_subgrid(r1, c1, r2, c2): count = 0 for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): if grid[i][j] == 1: count += 1 return count for operation in operations: parts = operation.split() if parts[0] == \\"SET\\": row, col = int(parts[1]), int(parts[2]) set_value(row, col) elif parts[0] == \\"QUERY\\": r1, c1, r2, c2 = map(int, parts[1:]) query_results.append(query_subgrid(r1, c1, r2, c2)) return query_results"},{"question":"You are given a list of integers and a sliding window of size k which moves from the very left of the list to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Your task is to implement a function that returns an array of the maximum values of each sliding window of size k. The input consists of: 1. An integer n (1 le n le 10^5) — the length of the list. 2. A list of integers of length n where each integer is within the range [-10^4, 10^4]. 3. An integer k (1 le k le n) — the size of the sliding window. The output should be: - An array of integers representing the maximum values of each sliding window of size k. # Example Input: ``` 8 1 3 -1 -3 5 3 6 7 3 ``` Output: ``` 3 3 5 5 6 7 ``` In the first example, the sliding windows and their maximum values are as follows: - [1, 3, -1] -> 3 - [3, -1, -3] -> 3 - [-1, -3, 5] -> 5 - [-3, 5, 3] -> 5 - [5, 3, 6] -> 6 - [3, 6, 7] -> 7","solution":"from collections import deque def max_sliding_window(nums, k): Given a list of integers and a sliding window size k, this function returns an array of the maximum values for each sliding window. n = len(nums) if n * k == 0: return [] if k == 1: return nums def clean_deque(i): # Remove indexes that are out of bounds if deq and deq[0] == i - k: deq.popleft() # Remove indexes of elements which are not useful while deq and nums[i] > nums[deq[-1]]: deq.pop() # Initialize the deque and the output deq = deque() max_index = 0 for i in range(k): clean_deque(i) deq.append(i) # Compute max in nums[:k] if nums[i] > nums[max_index]: max_index = i output = [nums[max_index]] # Build output for i in range(k, n): clean_deque(i) deq.append(i) output.append(nums[deq[0]]) return output"},{"question":"A company requires its employees to log their daily working hours using a simple online timesheet. The timesheet allows each employee to log the hours worked on each project labeled from 1 to n. Due to some technical constraints, an employee must log a non-negative integer number of hours for each project. The sum of hours logged on all projects in a single day must be exactly equal to a given number, H. The company is preparing their new timesheet system and needs to test if it\'s possible for an employee to log the required hours under given constraints. They need a function that checks whether it\'s possible to distribute exactly H hours into the given number of projects n. Write a function `is_possible(n: int, H: int, hrs: List[int]) -> str` that checks if it\'s possible to log exactly H hours for the given n projects. # Input Format The first line contains two integers n (1 leq n leq 10^4) – the number of projects, and H (0 leq H leq 10^6) – the total number of hours to be logged. The next line contains n integers separated by spaces, representing the non-negative integer lower bounds for each project, denoted by hrs (0 leq hrs[i] leq 10^6). # Output Format Return \\"YES\\" if it\'s possible to log exactly H hours, otherwise return \\"NO\\". # Examples Example 1 ``` Input: 3 10 1 2 3 Output: YES Explanation: 1 + 2 + 3 + 4 (distribution) we can rearrange the hours to sum up to 10 satisfying the constraints. ``` Example 2 ``` Input: 3 6 3 3 3 Output: NO Explanation: Since the lower bounds sum to 9 which is already over 6. It\'s not possible to exactly log 6 hours. ``` Example 3 ``` Input: 2 0 0 0 Output: YES Explanation: The lower-bound on all projects are 0 and sum of 0 can be satisfied with given constraint. ```","solution":"def is_possible(n, H, hrs): Determines if it\'s possible to distribute exactly H hours into the given n projects based on their lower bounds hrs. Parameters: n (int): The number of projects. H (int): The total number of hours to be logged. hrs (List[int]): List of lower bounds on hours for each project. Returns: str: \\"YES\\" if it\'s possible to log exactly H hours, otherwise \\"NO\\". sum_hours = sum(hrs) if sum_hours > H: return \\"NO\\" return \\"YES\\""},{"question":"Mikey has a peculiar way of navigating through buildings. He only uses elevators, and each building has exactly one elevator which only goes from the ground floor to the top floor and vice versa. Mikey likes to move between floors of a building using a set of specific commands: \\"U\\" for moving one floor up, \\"D\\" for moving one floor down, and \\"S\\" for staying on the current floor. Given the current floor Mikey is on, he wants to find out the minimum number of commands required to reach a target floor. You are given the number of floors in the building (including the ground floor, which is floor 0), Mikey’s starting floor, and the target floor he wishes to reach. Implement a function to find the minimum number of commands needed. The input consists of: - An integer `n` (1 ≤ n ≤ 1,000,000) - the number of floors in the building. - An integer `start` (0 ≤ start < n) - the starting floor. - An integer `target` (0 ≤ target < n) - the target floor. Output a single integer - the minimum number of commands required to move Mikey from the starting floor to the target floor. Example: ``` Input: 10 3 7 Output: 4 ``` In this example, moving from floor 3 to floor 7 in the minimal steps would be \\"UUUU\\" or \\"U\\" repeated 4 times.","solution":"def minimum_commands(n, start, target): Returns the minimum number of commands required to move Mikey from the starting floor to the target floor in a building with n floors. Parameters: - n: Number of floors in the building. - start: Starting floor (0 ≤ start < n). - target: Target floor (0 ≤ target < n). Returns: - int: Minimum number of commands required. return abs(target - start)"},{"question":"A software company has a coding platform where users can write, test and run algorithms. They decided to implement a security feature that limits the maximum execution time of user-submitted programs. The time limit for each program is set based on its estimated complexity, which is provided as an integer `k`. Given an integer `k`, determine the time limit for the program. The time limit is calculated as follows: - If `k` is less than or equal to 10, the time limit is `k` seconds. - If `k` is between 11 and 30 (inclusive), the time limit is twice `k` seconds. - If `k` is more than 30, the time limit is 10 seconds plus three times `k`. Write a program that accepts an integer k (1 ≤ k ≤ 1000) as input and prints the appropriate time limit. # Input A single integer k. # Output Print a single integer representing the time limit in seconds. # Example Input 8 Output 8 Input 25 Output 50 Input 40 Output 130 # Explanation In the first example, k is 8, which is less than or equal to 10, so the time limit is `8` seconds. In the second example, k is 25, which is between 11 and 30, so the time limit is `25 * 2 = 50` seconds. In the third example, k is 40, which is greater than 30, so the time limit is `10 + 40 * 3 = 130` seconds.","solution":"def calculate_time_limit(k): Determines the time limit based on the given complexity k. Parameters: k (int): The complexity of the program (1 ≤ k ≤ 1000). Returns: int: The calculated time limit in seconds. if k <= 10: return k elif k <= 30: return 2 * k else: return 10 + 3 * k # Example usage: # k = int(input()) # print(calculate_time_limit(k))"},{"question":"You are given a tree with n nodes, numbered from 1 to n. The tree structure is provided as n-1 edges, each represented by two nodes u and v which indicate an edge between node u and node v. Your task is to encode this tree into a unique and minimal string format. A tree encoding scheme can be defined as follows: starting from the root node (consider node 1 as the root), perform a Depth First Search (DFS) traversal of the tree. Each node should be represented by its number within parentheses, and its entire subtree should also be enclosed within those parentheses. Nodes should be visited in ascending order of their numbers at each level. This way, a tree with root node 1 and two child nodes 2 and 3 would be encoded as \\"(1(2)(3))\\". The input format is a follows: The first line contains an integer n (2 ≤ n ≤ 100000), the number of nodes in the tree. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), which describe an edge between nodes u and v. Output the encoded string representation of the tree, starting from root node 1. Example: Input: 5 1 2 1 3 2 4 2 5 Output: (1(2(4)(5))(3)) In this example, starting from node 1, we have an edge to node 2 and node 3. Node 2 has edges to nodes 4 and 5, while node 3 has no children. Therefore, the tree is encoded as \\"(1(2(4)(5))(3))\\".","solution":"def encode_tree(n, edges): from collections import defaultdict # Build the adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Function to perform DFS and build the encoded string def dfs(node, parent): children = sorted(child for child in tree[node] if child != parent) return f\\"({node}\\" + \\"\\".join(dfs(child, node) for child in children) + \\")\\" # Start DFS from root node 1 return dfs(1, None)"},{"question":"You are tasked with creating a simulation for a futuristic dispatch system used by the Interstellar Space Patrol (ISP). The ISP dispatch system manages a fleet of drones spread across a vast 3D space grid. Each drone operates in a cubic space of dimensions ( x times y times z ), where ( x, y, z ) are positive integers representing the width, height, and depth of the grid, respectively. Your goal is to develop an efficient algorithm for handling emergency situations by dispatching the nearest available drone to the location of the alert. The space grid has the following constraints: - ( 1 leq x, y, z leq 500 ) - There are ( n ) drones located at distinct grid points ((d_i^x, d_i^y, d_i^z)). - There are ( m ) emergency alerts, each located at a grid point ((a_j^x, a_j^y, a_j^z)). Your task is to determine which drone should respond to each emergency alert based on the shortest Manhattan distance. The Manhattan distance ( D ) between two points ((x_1, y_1, z_1)) and ((x_2, y_2, z_2)) is calculated as: [ D = |x_1 - x_2| + |y_1 - y_2| + |z_1 - z_2| ] # Input The input consists of several lines: 1. The first line contains three space-separated integers ( x, y, z ). 2. The second line contains an integer ( n ) representing the number of drones. 3. The following ( n ) lines each contain three space-separated integers ( d_i^x, d_i^y, d_i^z ) representing the coordinates of the ( i )-th drone. 4. The next line contains an integer ( m ) representing the number of emergency alerts. 5. The following ( m ) lines each contain three space-separated integers ( a_j^x, a_j^y, a_j^z ) representing the coordinates of the ( j )-th emergency alert. # Output Output ( m ) lines. Each line should contain a single integer representing the 1-based index of the drone that should respond to the corresponding emergency alert. # Example Input ``` 10 10 10 3 1 2 3 4 5 6 7 8 9 2 3 3 3 9 9 9 ``` # Example Output ``` 1 3 ``` # Explanation For the first emergency alert at ((3, 3, 3)), the distances to the drones are: - Drone 1: ( |1-3| + |2-3| + |3-3| = 2 + 1 + 0 = 3 ) - Drone 2: ( |4-3| + |5-3| + |6-3| = 1 + 2 + 3 = 6 ) - Drone 3: ( |7-3| + |8-3| + |9-3| = 4 + 5 + 6 = 15 ) The nearest drone is Drone 1. For the second alert at ((9, 9, 9)), distances to the drones are: - Drone 1: ( |1-9| + |2-9| + |3-9| = 8 + 7 + 6 = 21 ) - Drone 2: ( |4-9| + |5-9| + |6-9| = 5 + 4 + 3 = 12 ) - Drone 3: ( |7-9| + |8-9| + |9-9| = 2 + 1 + 0 = 3 ) The nearest drone is Drone 3. Thus, the output is: ``` 1 3 ```","solution":"def nearest_drones(x, y, z, drones, alerts): Determines the nearest drone for each emergency alert based on Manhattan distance. Parameters: x (int): Width of the 3D space grid. y (int): Height of the 3D space grid. z (int): Depth of the 3D space grid. drones (List[Tuple[int, int, int]]): List of drone coordinates. alerts (List[Tuple[int, int, int]]): List of emergency alert coordinates. Returns: List[int]: List of 1-based indices of the nearest drones for each alert. result = [] for ax, ay, az in alerts: min_distance = float(\'inf\') closest_drone = -1 for i, (dx, dy, dz) in enumerate(drones): distance = abs(ax - dx) + abs(ay - dy) + abs(az - dz) if distance < min_distance: min_distance = distance closest_drone = i + 1 # convert 0-based index to 1-based result.append(closest_drone) return result"},{"question":"Mina is playing a game on a 2D grid of size n x m. Each cell of the grid is either empty or contains an obstacle. The cells are indexed using standard matrix notation (rows from 1 to n, and columns from 1 to m). Mina starts at the top-left corner, i.e., cell (1, 1), and wants to reach the bottom-right corner, i.e., cell (n, m). She can move to an adjacent cell in four possible directions - up, down, left, or right. However, she cannot move outside the boundaries of the grid or into cells with obstacles. Write a program to determine the minimum number of moves required for Mina to reach the bottom-right corner from the top-left corner. If it is not possible for Mina to reach the destination, print -1. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid, respectively. Each of the next n lines contains m characters, where each character is either \'.\' (representing an empty cell) or \'#\' (representing an obstacle). Output a single integer, the minimum number of moves required, or -1 if it is not possible to reach the destination. Example: Input: 5 5 ..... ..#.. ..... .#... ...#. Output: 8 In this example, the optimal path would require 8 moves.","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): Determines the minimum number of moves required for Mina to reach the bottom-right corner from the top-left corner of the grid, or returns -1 if it is not possible. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of str): 2D grid represented as a list of strings where \'.\' denotes an empty cell and \'#\' denotes an obstacle. Returns: int: Minimum number of moves required or -1 if it is not possible. directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, Down, Left, Up start = (0, 0) end = (n-1, m-1) if grid[0][0] == \'#\' or grid[end[0]][end[1]] == \'#\': return -1 queue = deque([(start, 0)]) # (position, moves) visited = set([start]) while queue: (curr_x, curr_y), moves = queue.popleft() if (curr_x, curr_y) == end: return moves for dx, dy in directions: next_x, next_y = curr_x + dx, curr_y + dy if 0 <= next_x < n and 0 <= next_y < m and (next_x, next_y) not in visited and grid[next_x][next_y] == \'.\': visited.add((next_x, next_y)) queue.append(((next_x, next_y), moves + 1)) return -1"},{"question":"Given a sequence of n integers a1, a2, ..., an, a partitioning point p (1 ≤ p < n) divides it into two subsequences a1, a2, ..., ap and ap+1, ap+2, ..., an. Your task is to find if there exists a partitioning point that results in the sum of the first subsequence being equal to the sum of the second subsequence. If such partitioning point exists, return \\"YES\\" and the index of the partition point (1-based index); otherwise, return \\"NO\\". Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the sequence. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the sequence. Output If there is a partition point that splits the array into two subsequences with equal sums, output \\"YES\\" followed by the partition point index (1-based index). If there are multiple such partition points, return the smallest one. If no such partition point exists, output \\"NO\\". Example Input 6 1 2 3 3 2 1 Output YES 3 In this example, partitioning at index 3 results in subsequences [1, 2, 3] and [3, 2, 1], both of which have a sum of 6.","solution":"def find_partition_point(n, sequence): Finds the partition point in the sequence that divides it into two subsequences with equal sums. Parameters: n (int): The number of elements in the sequence. sequence (list): A list of integers representing the sequence. Returns: str: \'YES\' and the 1-based partition index if such partition exists, otherwise \'NO\'. total_sum = sum(sequence) left_sum = 0 for i in range(n - 1): left_sum += sequence[i] if left_sum == total_sum - left_sum: return f\\"YES {i + 1}\\" return \\"NO\\""},{"question":"Vlad and Lena are playing a new board game on an m×n grid, initially empty. The game proceeds with turns as follows: Each turn, Vlad places a single coin in any empty cell of the grid. His goal is to place N coins such that no two coins are in the same row or column. Lena\'s goal is to prevent Vlad from achieving his goal by identifying an invalid placement or determining that Vlad has completed his placement successfully. Write a program to simulate this game, ensuring that Vlad can place all N coins correctly, or declare an invalid placement if it becomes impossible to do so. The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case: The first line contains three integers m (1 ≤ m ≤ 100), n (1 ≤ n ≤ 100), and N (1 ≤ N ≤ min(m, n)) — the number of rows, columns, and the number of coins Vlad needs to place, respectively. The following N lines describe Vlad\'s placement attempts. Each line contains two integers x and y (1 ≤ x ≤ m, 1 ≤ y ≤ n) — the row and column of the attempted placement for a coin. Output \\"Invalid\\" if Lena can prove that the placement is invalid at any step, or \\"Valid\\" if Vlad successfully places all N coins. Example Input: ``` 2 3 3 3 1 1 2 2 3 3 3 3 3 1 1 2 1 3 3 ``` Example Output: ``` Valid Invalid ```","solution":"def vlad_and_lena_game(t, test_cases): results = [] for case in test_cases: m, n, N, placements = case[\'m\'], case[\'n\'], case[\'N\'], case[\'placements\'] rows = set() cols = set() valid = True for x, y in placements: if x in rows or y in cols: results.append(\\"Invalid\\") valid = False break rows.add(x) cols.add(y) if valid: results.append(\\"Valid\\") return results"},{"question":"Alice has a collection of unique stamps from different countries. She decides to gift some of the stamps to her friend Bob. However, she wants to make sure that the monetary value difference between the stamps she keeps and the stamps she gives to Bob is minimized. Each stamp has an associated monetary value. Formally, given an array of stamp values `v` of size `n`, you need to partition this array into two non-empty subsets such that the absolute difference between the sums of the values in these subsets is minimized. Write a function `minimizeStampDifference(n: int, v: List[int]) -> int` that takes in the number of stamps `n` and a list `v` of integers representing the monetary values of the stamps. The function should return an integer which is the minimal possible difference between the sums of the two subsets. # Input The first line contains an integer `n` (2 ≤ n ≤ 100) — the number of stamps. The second line contains `n` integers `v[i]` (1 ≤ v[i] ≤ 1000) — the monetary values of the stamps. # Output Output a single integer — the minimal possible difference between the sums of the two subsets. # Example Input ``` 4 1 2 3 4 ``` Output ``` 0 ``` Explanation One possible way to partition the array `[1, 2, 3, 4]` into two subsets with minimal difference is `[1, 4]` and `[2, 3]`. The difference between their sums is `|5 - 5| = 0`. # Constraints: - The input array will have at most 100 elements. - All values in the array will be positive integers.","solution":"from typing import List def minimizeStampDifference(n: int, v: List[int]) -> int: total_sum = sum(v) target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for value in v: for j in range(target, value - 1, -1): dp[j] = dp[j] or dp[j - value] for i in range(target, -1, -1): if dp[i]: sum1 = i break sum2 = total_sum - sum1 return abs(sum2 - sum1)"},{"question":"You are given an array of integers representing the heights of buildings and a list of queries. You need to determine the maximum difference in height between any two buildings within specified subarrays for each query. The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of buildings and the number of queries, respectively. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000) — the heights of the buildings. The following q lines contain two integers li and ri (1 ≤ li ≤ ri ≤ n) — the range of buildings [li, ri] (inclusive) for each query. For each query, print a single integer which is the maximum height difference within the specified range of buildings. **Input:** ``` n q h1 h2 ... hn l1 r1 l2 r2 . . . lq rq ``` **Output:** For each query, print the maximum difference in heights within the specified range of buildings. **Example:** ``` Input: 8 3 1 5 3 9 8 4 6 2 1 4 2 6 3 8 Output: 8 6 7 ```","solution":"def max_height_difference(n, q, heights, queries): This function computes the maximum height difference within specified subarrays for each query. Parameters: n (int): Number of buildings. q (int): Number of queries. heights (list): Heights of the buildings. queries (list): Queries in the form of (li, ri) tuples where li and ri are the range Returns: list: List of maximum height differences for each query. results = [] for li, ri in queries: sub_range = heights[li-1: ri] max_diff = max(sub_range) - min(sub_range) results.append(max_diff) return results"},{"question":"A local bakery is popular for its unique pastries. The bakery sells exactly ( n ) types of pastries, numbered from ( 1 ) to ( n ), and the demand for each type of pastry is given by an array ( d ) of length ( n ). The bakery can produce any type of pastry in any given quantity without limitations. However, they want the variety in every consecutive ( k ) pastries to be maximized, ensuring that they don\'t produce more than one kind of pastry in a batch of ( k ) consecutive pastries. Your task is to help the bakery determine the maximum possible variety (number of different types of pastries) in every consecutive ( k ) pastries. You have to arrange the pastries in such a way that this maximum variety is achieved while fulfilling the demands for each type of pastry. # Input The input consists of a single test case: - The first line contains two integers ( n ) and ( k ) (( 1 leq n leq 100 ), ( 1 leq k leq 100 )) — the number of different types of pastries and the size of the batch. - The second line contains ( n ) integers ( d_1, d_2, ldots, d_n ) (( 1 leq d_i leq 100 )) — the demand for each type of pastry. # Output Print a single integer — the maximum possible variety in every consecutive ( k ) pastries. # Examples Example 1 Input: ``` 3 2 4 3 1 ``` Output: ``` 2 ``` Example 2 Input: ``` 4 3 3 2 2 2 ``` Output: ``` 3 ``` # Explanation In the first example, the bakery can produce pastries in the sequence [1, 2, 1, 2, 1, 3, 2, 1]. In any consecutive 2 pastries, at most 2 different types are observed. Hence output is 2. In the second example, the sequence [1, 2, 3, 1, 2, 3, 4, 1, 2, 3] in every consecutive 3 pastries has at most 3 different types. Hence output is 3.","solution":"def max_variety(n, k, demand): Determine the maximum possible variety in every consecutive k pastries. Parameters: n (int): Number of different types of pastries. k (int): The size of the batch. demand (list of int): List of demands for each type of pastry. Returns: int: The maximum possible variety in every consecutive k pastries. # The maximum possible variety is the minimum of number of types and k return min(n, k)"},{"question":"Farmer John has a rectangular barn with dimensions n by m. He wants to place his cows in the barn such that no two cows can see each other. The barn consists of rows and columns of cells, where each cell can either be empty (.) or contain an obstacle (x) that blocks the line of sight. A cow placed in cell (i, j) can see another cow in cell (k, l) if and only if they share the same row or column and there are no obstacles between them. Your task is to help Farmer John determine the maximum number of cows that can be placed in the barn such that no two cows can see each other. The first line contains two integers, n and m (1 ≤ n, m ≤ 300) — the dimensions of the barn. The next n lines each contain m characters representing the barn\'s layout. A \'.\' denotes an empty cell, and an \'x\' denotes an obstacle. Output a single integer representing the maximum number of cows that can be placed in the barn such that no two cows can see each other. # Example Input 5 5 ..... ..x.. ..... .x... ....x Output 5 Explanation One possible placement of cows is: ..C.. ..x.. .C... .x... .C..x Another possible placement is: C.... ..x.. C.... .x..C ....x Both placements result in 5 cows, which is the maximum possible.","solution":"def max_cows_placement(n, m, barn): from itertools import product def can_place(barn, placed, i, j): for k in range(i): if barn[k][j] == \'.\' and placed[k][j] == \'C\': return False for l in range(j): if barn[i][l] == \'.\' and placed[i][l] == \'C\': return False return True def place_cows(index, cnt, max_cows): if index >= len(empty_cells): return max(max_cows, cnt) i, j = empty_cells[index] if can_place(barn, placed, i, j): placed[i][j] = \'C\' max_cows = place_cows(index + 1, cnt + 1, max_cows) placed[i][j] = \'.\' max_cows = place_cows(index + 1, cnt, max_cows) return max_cows empty_cells = [(i, j) for i, j in product(range(n), range(m)) if barn[i][j] == \'.\'] placed = [[\'.\' for _ in range(m)] for _ in range(n)] return place_cows(0, 0, 0) # Function to handle input and output def solve(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) barn = [] index = 2 for i in range(n): barn.append(data[index + i]) print(max_cows_placement(n, m, barn))"},{"question":"Given a matrix of size n x m filled with non-negative integers, you are required to process q queries. Each query can either update a value at a specific cell in the matrix or calculate the sum of a submatrix defined by its top-left and bottom-right corners. Specifically, each query can be of two types: 1. Update query: change the value at a specified cell in the matrix. 2. Sum query: calculate the sum of all elements in a submatrix. The following operations must be supported: 1. `U x y v` - Update the element at position (x, y) to v. 2. `S x1 y1 x2 y2` - Calculate the sum of the elements in the submatrix defined by the top-left corner (x1, y1) and bottom-right corner (x2, y2). You must output the result of each sum query. The first line of the input contains three integers n, m, and q (1 ≤ n, m ≤ 1000, 1 ≤ q ≤ 100000) — the dimensions of the matrix and the number of queries, respectively. The next n lines contain m integers each — the initial state of the matrix. Each of the next q lines contains one query in one of the following two formats: - `U x y v` (1 ≤ x ≤ n, 1 ≤ y ≤ m, 0 ≤ v ≤ 1000) — update the matrix. - `S x1 y1 x2 y2` (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m) — calculate the sum of the specified submatrix. Output the results of all sum queries, one per line.","solution":"class MatrixHandler: def __init__(self, n, m, matrix): self.n = n self.m = m self.matrix = matrix self.prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] self._build_prefix_sum() def _build_prefix_sum(self): for i in range(1, self.n + 1): for j in range(1, self.m + 1): self.prefix_sum[i][j] = (self.matrix[i-1][j-1] + self.prefix_sum[i-1][j] + self.prefix_sum[i][j-1] - self.prefix_sum[i-1][j-1]) def _update_prefix_sum(self): self.prefix_sum = [[0] * (self.m + 1) for _ in range(self.n + 1)] self._build_prefix_sum() def update(self, x, y, v): self.matrix[x-1][y-1] = v self._update_prefix_sum() def sum_query(self, x1, y1, x2, y2): return (self.prefix_sum[x2][y2] - self.prefix_sum[x1-1][y2] - self.prefix_sum[x2][y1-1] + self.prefix_sum[x1-1][y1-1]) def process_queries(n, m, initial_matrix, queries): handler = MatrixHandler(n, m, initial_matrix) results = [] for query in queries: parts = query.split() if parts[0] == \'U\': x, y, v = int(parts[1]), int(parts[2]), int(parts[3]) handler.update(x, y, v) elif parts[0] == \'S\': x1, y1, x2, y2 = map(int, parts[1:]) results.append(handler.sum_query(x1, y1, x2, y2)) return results"},{"question":"You are given an array of integers and a list of queries. Each query consists of a range within the array, and you must determine the maximum product that can be obtained by choosing two distinct elements from that range. Formally, for each query, you are given two integers `L` and `R` (1 ≤ L ≤ R ≤ n), and you need to find two distinct elements `a` and `b` within the subarray from index `L` to index `R` (inclusive) such that the product `a * b` is maximized. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains `n` integers: `a1, a2, …, an` (0 ≤ ai ≤ 10^9) — the elements of the array. - The third line contains an integer `q` (1 ≤ q ≤ 10^5), the number of queries. - The next `q` lines each contain two integers `L` and `R` (1 ≤ L ≤ R ≤ n), representing the range for that query. # Output For each query, output a single integer: the maximum product of any two distinct elements within the specified range. # Example Input ``` 5 3 2 1 5 4 3 1 3 2 5 1 5 ``` Output ``` 6 20 20 ``` # Explanation - For the first query (1, 3): The maximum product in the subarray [3, 2, 1] is 3 * 2 = 6. - For the second query (2, 5): The maximum product in the subarray [2, 1, 5, 4] is 5 * 4 = 20. - For the third query (1, 5): The maximum product in the subarray [3, 2, 1, 5, 4] is 5 * 4 = 20.","solution":"def max_product_in_range(arr, queries): For each query, finds the maximum product of any two distinct elements within the specified range. Parameters: arr (list of int): The array of integers. queries (list of tuple): The list of queries where each query is a tuple (L, R). Returns: list of int: The maximum product for each query. results = [] for L, R in queries: subrange = arr[L-1:R] if len(subrange) < 2: results.append(0) continue # Find the top two maximum numbers in the subrange first, second = 0, 0 for num in subrange: if num > first: second = first first = num elif num > second: second = num results.append(first * second) return results"},{"question":"A fictional programming language named Zedo allows users to write simple arithmetic expressions which are converted into a sequence of actions. Each expression is a combination of integers (each between 1 and 100) and addition (+) or multiplication (*) operators. For the given assignment, you need to write a parser for Zedo expressions that evaluates the given expression and outputs the corresponding result. The key details: 1. The input is a single string representing an expression in Zedo. 2. The string consists of integers (1-100) separated by either `+` or `*` operators. 3. Zedo follows the standard arithmetic precedence rules, where multiplication (*) has higher precedence over addition (+). 4. You need to parse the expression, evaluate it according to these rules, and return the result. # Input - A single line containing a Zedo expression as a string with a length between 1 and 100. # Output - A single integer, the result of evaluating the expression. # Examples ```text Input: \\"3+5*2\\" Output: 13 Input: \\"10*3+5\\" Output: 35 Input: \\"1+2*3+4\\" Output: 11 ``` # Note 1. In the first example, `3+5*2` is evaluated as `3+(5*2) = 3+10 = 13`. 2. In the second example, `10*3+5` is evaluated as `(10*3)+5 = 30+5 = 35`. 3. In the third example, `1+2*3+4` is evaluated as `1+(2*3)+4 = 1+6+4 = 11`.","solution":"def evaluate_zedo_expression(expression: str) -> int: Evaluates a Zedo expression according to arithmetic precedence rules. The expression contains integers (1-100) separated by + or * operators. :param expression: Zedo expression as a string :return: Evaluated result as an integer import re def compute_multiplications(expression): parts = expression.split(\'+\') evaluated_parts = [] for part in parts: if \'*\' in part: values = map(int, part.split(\'*\')) result = 1 for value in values: result *= value evaluated_parts.append(result) else: evaluated_parts.append(int(part)) return evaluated_parts # Step 1: Handle all multiplications first evaluated_parts = compute_multiplications(expression) # Step 2: Handle all additions result = sum(evaluated_parts) return result"},{"question":"You have a string s of length n consisting of lowercase English letters. You are required to divide the string into the minimum number of contiguous substrings such that each substring is a palindrome. A palindrome is a string that reads the same backward as forward. For example, if s = \\"aabaca\\", you can divide it into the following palindromes: [\\"aa\\", \\"b\\", \\"a\\", \\"c\\", \\"a\\"] or [\\"aa\\", \\"b\\", \\"aca\\"]. Print the minimum number of palindromic substrings the string s can be divided into. The first line of the input contains a single integer n (1 le n le 1000) — the length of the string s. The second line contains the string s. In the output, print one integer — the minimum number of palindromic substrings. In the first sample, the optimal way to divide the string is [\\"aa\\", \\"baca\\"]. In the second sample, the optimal way to divide the string is [\\"a\\", \\"a\\", \\"b\\", \\"b\\"].","solution":"def min_palindrome_partitions(s): n = len(s) dp = [0] * n palindrome = [[False] * n for _ in range(n)] for i in range(n): min_cuts = i for j in range(i + 1): if s[i] == s[j] and (i - j < 2 or palindrome[j + 1][i - 1]): palindrome[j][i] = True min_cuts = 0 if j == 0 else min(min_cuts, dp[j - 1] + 1) dp[i] = min_cuts return dp[-1] + 1 # Example usage s = \\"aabaca\\" print(min_palindrome_partitions(s)) # Output: 3"},{"question":"A massive company called GreatTech is conducting a talent identification sweep across different regions. Each region has its own set of participants, and the company wants to identify the top-performing talent from each region for further consideration. The company\'s criterion for top performance is to have the highest score in a participant\'s region. If there are multiple participants with the highest score in the same region, any one of them can be considered as the top performer. You are given information about the regions and the scores of all participants in each region. Help the company identify the top performer from each region. The first line of input contains an integer n (1 ≤ n ≤ 10^5), the number of participants. Each of the following n lines contains two integers ri and si (1 ≤ ri ≤ 10^5, 1 ≤ si ≤ 10^9), where ri is the region number of the participant, and si is the score of the participant. Output the identification numbers (line numbers from the input, starting from 1) of the top performers from each region. The regions can be printed in any order. If there are multiple top performers with the same score in a region, any one of them can be chosen. Example input: 6 1 95 2 85 1 100 2 90 3 100 3 100 Example output: 3 4 5","solution":"def find_top_performers(n, participants): Identifies the top performers in each region. Args: n (int): Number of participants. participants (list of tuple): Each tuple contains the region number and score of a participant. Returns: list of int: List of identification numbers of the top performers in each region. region_top_performer = {} for idx, (region, score) in enumerate(participants): if region not in region_top_performer or score > region_top_performer[region][1]: region_top_performer[region] = (idx + 1, score) return [id_num for id_num, _ in region_top_performer.values()] # Example usage: # participants = [ # (1, 95), # (2, 85), # (1, 100), # (2, 90), # (3, 100), # (3, 100) # ] # n = len(participants) # print(find_top_performers(n, participants)) # Should output: [3, 4, 5]"},{"question":"There is a city with n intersections and exactly n-1 roads such that each pair of intersections is connected either directly or indirectly. The city\'s traffic regulations require that each road is designated as either one-way or two-way. One-way roads can be traversed only in the specified direction, while two-way roads can be traversed in both directions. Your task is to determine whether it\'s possible to assign a direction to each road in such a way that all intersections are still reachable from each other, either directly or indirectly, regardless of the direction of the roads. If possible, print the directions of the roads. If not, print \\"NO\\". The first line of input contains an integer n (2 ≤ n ≤ 10^5) — the number of intersections. The following n-1 lines contain two integers u and v (1 ≤ u, v ≤ n) — each describing a road between intersections u and v. Print \\"YES\\" if it is possible to assign directions to the roads in such a way that all intersections remain reachable from each other. Then, print n-1 lines each containing \\"1\\" or \\"2\\". \\"1\\" means the road is one-way, and \\"2\\" means the road is two-way. If there are multiple solutions, print any of them. If it is not possible to assign the roads according to the given conditions, print \\"NO\\". **Example:** Input: ``` 4 1 2 1 3 2 4 ``` Output: ``` YES 2 1 2 ``` In this example, the directions assigned ensure that all intersections remain reachable from each other. The road between intersections 1 and 2 and the road between intersections 1 and 3 are two-way, and the road between intersections 2 and 4 is one-way.","solution":"def assign_road_directions(n, roads): from collections import defaultdict, deque # Disjoint Set Union-Find with path compression parent = list(range(n + 1)) rank = [1] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 # Initialize adjacency list adj = defaultdict(list) for u, v in roads: adj[u].append(v) adj[v].append(u) union(u, v) # Check if all nodes belong to the same connected component root = find(1) for i in range(2, n + 1): if find(i) != root: return \\"NO\\" # BFS to assign directions directions = [] visited = [False] * (n + 1) queue = deque([1]) visited[1] = True parent = [-1] * (n + 1) while queue: node = queue.popleft() for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True parent[neighbor] = node queue.append(neighbor) directions.append((node, neighbor)) elif parent[node] != neighbor: directions.append((node, neighbor)) result = [\\"YES\\"] for u, v in directions: if parent[v] == u or parent[u] == v: result.append(\\"1\\") else: result.append(\\"2\\") return \\"n\\".join(result) # Example usage: n = 4 roads = [(1, 2), (1, 3), (2, 4)] print(assign_road_directions(n, roads))"},{"question":"Alex has recently started using a new social media platform. On this platform, user interactions generate notifications. Alex wants to analyze these notifications, but there are too many of them to go through manually. The platform logs notifications with a timestamp and an identifier for the user who generated the notification. Alex wants to create a summary that counts the number of notifications generated by each user within specified time windows. You will be provided a list of notifications, where each notification is represented as a tuple (timestamp, user_id). Additionally, you will receive a list of query time windows, each represented as a tuple (start_time, end_time). The task is to return the count of notifications for each user_id within each time window in the queries. # Function Signature ```python def count_notifications_in_windows(notifications: List[Tuple[int, int]], queries: List[Tuple[int, int]]) -> List[Dict[int, int]]: ``` # Input - `notifications`: a list of tuples where each tuple contains two integers; the first integer is a timestamp (0 ≤ timestamp ≤ 10^9) representing when the notification was generated, and the second integer is a user_id (1 ≤ user_id ≤ 10^6) representing the user who generated the notification. - `queries`: a list of tuples where each tuple contains two integers, start_time and end_time (0 ≤ start_time ≤ end_time ≤ 10^9), representing the time window for which you need to count the notifications. # Output - Return a list of dictionaries where each dictionary corresponds to a query and contains the count of notifications for each user_id within the corresponding time window. If a user has no notifications in a time window, they should not appear in the dictionary for that query. # Example ```python # Example Input notifications = [(100, 1), (200, 2), (150, 1), (300, 3), (250, 2), (400, 3)] queries = [(100, 200), (150, 300), (0, 400)] # Example Output [ {1: 2, 2: 1}, # From time 100 to 200, user 1 has 2 notifications, user 2 has 1 {1: 1, 2: 2, 3: 1}, # From time 150 to 300, user 1 has 1, user 2 has 2, user 3 has 1 notification {1: 2, 2: 2, 3: 2} # From time 0 to 400, user 1 has 2, user 2 has 2, user 3 has 2 notifications ] ``` # Note - Ensure solutions are optimized for handling large inputs efficiently, as the number of notifications and the number of queries can be very large. - Pay attention to the constraints on time and user_id to develop an efficient algorithm.","solution":"from collections import defaultdict from typing import List, Tuple, Dict def count_notifications_in_windows(notifications: List[Tuple[int, int]], queries: List[Tuple[int, int]]) -> List[Dict[int, int]]: result = [] # Sort notifications by timestamp for faster querying notifications.sort() for start_time, end_time in queries: user_count = defaultdict(int) for timestamp, user_id in notifications: if timestamp > end_time: break if start_time <= timestamp <= end_time: user_count[user_id] += 1 result.append(dict(user_count)) return result"},{"question":"Explorers on an uncharted island discovered a set of magical stones. Each stone has an integer value, and they form a sequential chain. Unfortunately, the stones have been shuffled and now they want to reorder them into the correct sequence. Your task is to help them recover the order of the stones, but there is a challenge: some stones are missing. Write a program that reads the shuffled list of stone values and reconstructs the original sequence, filling in the missing values with zeros. The first line contains an integer n (1 ≤ n ≤ 100) — the number of stones (including the missing ones). The second line contains n integers, which are the shuffled stone values. The missing values are represented by -1. The list will always include both the smallest and largest values of the sequence, and the difference between any two adjacent stones in the original sequence is always 1. Output the reconstructed sequence of n integers where the missing values are replaced by zero(s). Example Input: ``` 5 4 -1 -1 1 3 ``` Example Output: ``` 1 2 3 4 0 ``` In another example, the input: ``` 7 3 -1 1 -1 -1 2 7 ``` Should output: ``` 1 2 3 4 5 6 7 ```","solution":"def reconstruct_stones(n, stones): Reconstructs the original sequence of stones by filling missing values with zeros. :param n: int, number of stones (including the missing ones) :param stones: list of int, shuffled stone values with missing values represented by -1 :return: list of int, reconstructed sequence of stones with missing values filled as zeros stones = sorted([stone for stone in stones if stone != -1]) min_value = stones[0] max_value = stones[-1] complete_sequence = [0] * n for i in range(n): if min_value + i <= max_value: complete_sequence[i] = min_value + i return complete_sequence"},{"question":"You are given a binary string s of length n. A binary string is a string consisting only of characters \'0\' and \'1\'. You are also given an integer k. Your task is to find the number of unique binary strings of length n that differ from s in exactly k positions. In other words, count how many binary strings of the same length as s have exactly k bits different from s. The first line of the input contains a single integer n (1 le n le 10^5) — the length of the binary string. The second line of the input contains a single integer k (0 le k le n) — the number of positions that must be different. The third line of the input contains a binary string s of length n. Output a single integer — the number of unique binary strings of length n that differ from s in exactly k positions. Examples: Input: 5 2 10101 Output: 10 Input: 3 1 000 Output: 3","solution":"import math def count_unique_binary_strings(n, k, s): Returns the number of unique binary strings of length n that differ from s in exactly k positions. # Calculating the binomial coefficient C(n, k) return math.comb(n, k)"},{"question":"Sergey recently got interested in a new card game he created. The game uses a standard deck of 52 cards, which includes 13 ranks (Ace, 2, 3, ..., 10, Jack, Queen, King) in 4 suits (Hearts, Diamonds, Clubs, Spades). In each round of the game, Sergey draws a card randomly from the deck without replacement. Each card has a certain point value: - Ace is worth 1 point, - Number cards (2 through 10) are worth their face value, - Jack, Queen, and King are each worth 10 points. Sergey wants to find out the maximum possible points he can achieve if he plays optimally to draw cards until he reaches or exceeds a target score of N points. Given the target score N (1 ≤ N ≤ 1000), Sergey wants to determine the minimum number of cards he needs to draw from the deck in order to reach at least N points. The first line of input contains an integer T (1 ≤ T ≤ 100), representing the number of test cases. Each of the next T lines contains a single integer N, the target score Sergey wants to achieve. For each test case, output a single integer, the minimum number of cards Sergey needs to draw to reach at least the target score N. # Example Input ``` 3 15 23 100 ``` Output ``` 2 3 10 ``` # Explanation - In the first case, Sergey can draw a King (10 points) and a 5 (5 points), making a total of 15 points with just 2 cards. - In the second case, one possible way is drawing a King (10 points), a Jack (10 points), and an Ace (1 point), totaling 21 points with 3 cards. - In the third case, if Sergey draws 10 cards each worth 10 points (e.g., 10 Kings), he will reach exactly 100 points.","solution":"def min_cards_to_reach_score(T, scores): Determines the minimum number of cards needed to reach at least the target score N. Parameters: T (int): Number of test cases. scores (list of int): List of target scores Sergey wants to achieve. Returns: list of int: List of minimum number of cards needed for each target score. max_points_per_card = 10 # Maximum points a single card can have (J, Q, K) results = [] for N in scores: min_cards = (N + max_points_per_card - 1) // max_points_per_card # Ceiling of N / 10 results.append(min_cards) return results"},{"question":"You are given an integer array `nums`. Your task is to find the maximum difference between any two elements in the array such that the larger element comes after the smaller one. Write a function `maxDifference` to solve the problem, where: - `nums` is an array of `n` integers (`2 ≤ n ≤ 10^5`). Function signature: ```python def maxDifference(nums: List[int]) -> int: ``` Return an integer representing the maximum difference between any two elements in the array such that the larger element appears after the smaller element. If no such pair exists, return `-1`. **Example:** ```python assert maxDifference([2, 3, 10, 6, 4, 8, 1]) == 8 assert maxDifference([7, 9, 5, 6, 3, 2]) == 2 assert maxDifference([10, 8, 7, 6, 5, 2]) == -1 ``` **Explanation:** In the first example, the maximum difference (8) is between `10` and `2`. In the second example, the maximum difference (2) is between `9` and `7`. In the third example, there is no pair where the larger element appears after the smaller one, hence the output is `-1`.","solution":"from typing import List def maxDifference(nums: List[int]) -> int: if len(nums) < 2: return -1 min_value = nums[0] max_diff = -1 for i in range(1, len(nums)): if nums[i] > min_value: max_diff = max(max_diff, nums[i] - min_value) min_value = min(min_value, nums[i]) return max_diff"},{"question":"You are given an integer sequence, and you are asked to find the length of the longest subsequence of this sequence that is a palindrome. A subsequence is a sequence that can be derived from the sequence by deleting some or no elements without changing the order of the remaining elements. The first line contains one integer n (1 le n le 2000) — the number of elements in the sequence. The second line contains n space-separated integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the sequence. Output a single integer — the length of the longest subsequence of the given sequence that is a palindrome. **Example:** **Input:** 6 1 2 3 2 1 4 **Output:** 5 **Explanation:** In this example, the longest subsequence that is a palindrome is [1, 2, 3, 2, 1], and its length is 5.","solution":"def longest_palindromic_subsequence(n, sequence): Given a sequence, returns the length of the longest subsequence that is a palindrome. dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Fill the dp array for length in range(2, n + 1): # Length of the substring for i in range(n - length + 1): j = i + length - 1 if sequence[i] == sequence[j] and length == 2: dp[i][j] = 2 elif sequence[i] == sequence[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"Given a tree with `n` vertices, each vertex has a certain value associated with it. A path in the tree is called a \\"special path\\" if the greatest common divisor (GCD) of all the values of the vertices on the path is greater than 1. You are required to find the longest \\"special path\\" in the tree. The first line contains an integer `n` (1 leq n leq 2 cdot 10^5), the number of vertices in the tree. The second line contains `n` integers a_i (1 leq a_i leq 10^6), where a_i is the value associated with the vertex `i`. The next `n-1` lines contain two integers `u` and `v` (1 leq u, v leq n), representing an edge in the tree between vertices `u` and `v`. Output one integer — the length of the longest \\"special path\\". # Example **Input:** ``` 6 2 4 6 3 9 15 1 2 1 3 2 4 3 5 3 6 ``` **Output:** ``` 2 ``` **Explanation:** In the provided tree: ``` 1 (2) / 2 (4) 3 (6) | / 4 (3) 5 (9) 6 (15) ``` - The path `(1, 2)` has values `2, 4` with GCD `2`. - The path `(1, 3)` has values `2, 6` with GCD `2`. - The path `(3, 5)` has values `6, 9` with GCD `3`. The result is `2` because the longest special paths have a length of `2` here, for instance (1,2) or (3, 5).","solution":"from math import gcd from collections import defaultdict, deque def longest_special_path(n, vertex_values, edges): def bfs(start): queue = deque([(start, vertex_values[start - 1])]) visited = {start} parent = [-1] * (n + 1) distance = [0] * (n + 1) while queue: node, current_gcd = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: new_gcd = gcd(current_gcd, vertex_values[neighbor - 1]) if new_gcd > 1: visited.add(neighbor) parent[neighbor] = node distance[neighbor] = distance[node] + 1 queue.append((neighbor, new_gcd)) return max(distance) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) return max(bfs(i) for i in range(1, n + 1)) # For generating unit tests, use the example case provided: def find_longest_special_path(n, vertex_values, edges): Given a tree with n vertices and their associated values, returns the length of the longest special path. return longest_special_path(n, vertex_values, edges)"},{"question":"Tom and Jerry are playing a game with a large matrix filled with integers. The matrix has dimensions n x m, and each cell initially contains a non-negative integer. The game starts with Tom. In each turn, the current player (Tom or Jerry) must select a non-zero cell within the matrix and decrease the value in that cell by 1, without changing any other cells. They continue to take turns until no more moves can be made (i.e., all cells contain zero). The player who cannot make a move loses the game. Both Tom and Jerry play optimally, and Tom always makes the first move. The task is to determine who will win the game. The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the dimensions of the matrix. The next n lines each contain m integers, representing the initial values in the matrix. The integers in the matrix are between 0 and 1000 (inclusive). Print \\"Tom\\" if Tom wins the game, otherwise print \\"Jerry\\". Examples: Example 1: Input: 2 3 1 2 0 0 0 3 Output: Tom Example 2: Input: 2 2 0 1 2 0 Output: Jerry In the first example, Tom can make his move on any non-zero cell, after which he will always have a move to make until Jerry is forced to make the last move, leading Tom to win. In the second example, no matter how Tom plays, Jerry will always have the advantage to avoid making the last move, leading Jerry to win.","solution":"def game_winner(n, m, matrix): Determines the winner of the game between Tom and Jerry. Parameters: n (int): Number of rows in the matrix. m (int): Number of columns in the matrix. matrix (list of list of int): The initial values in the matrix. Returns: str: \\"Tom\\" if Tom wins, otherwise \\"Jerry\\". total_non_zero_cells = sum(matrix[i][j] != 0 for i in range(n) for j in range(m)) # If the number of non-zero cells is odd, Tom wins, otherwise Jerry wins if total_non_zero_cells % 2 == 1: return \\"Tom\\" else: return \\"Jerry\\""},{"question":"You have an array of integers containing n elements, and an integer k. Your goal is to determine how many contiguous subarrays have a product that is strictly less than k. For example, if the array is [10, 5, 2, 6] and k = 100, the answer is 8. The subarrays that meet the criteria are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], and [5, 2, 6]. **Input:** The first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 1015) — the length of the array and the threshold for the product. The second line contains n integers where each integer is between 1 and 109, representing the elements of the array. **Output:** Print a single integer — the number of contiguous subarrays such that the product of their elements is strictly less than k. **Example:** ```plaintext Input: 4 100 10 5 2 6 Output: 8 ``` In this example, the subarrays that meet the criteria are: - [10] with product 10 < 100 - [5] with product 5 < 100 - [2] with product 2 < 100 - [6] with product 6 < 100 - [10, 5] with product 50 < 100 - [5, 2] with product 10 < 100 - [2, 6] with product 12 < 100 - [5, 2, 6] with product 60 < 100. The subarray [10, 5, 2] with product 100 is not included because the product is not strictly less than 100.","solution":"def num_subarrays_with_product_less_than_k(arr, k): Returns the number of contiguous subarrays whose product is strictly less than k. n = len(arr) count = 0 product = 1 left = 0 for right in range(n): product *= arr[right] while product >= k and left <= right: product //= arr[left] left += 1 count += right - left + 1 return count"},{"question":"Given a string s consisting of lowercase English letters, and an integer x, your task is to find the length of the longest substring of s such that the substring contains at most x distinct characters. For example, for the string \\"abcabcbb\\" and x = 2, the longest substring with at most 2 distinct characters is \\"bcb\\", which has length 3. **Input**: The first line contains an integer x (1 ≤ x ≤ 26), the maximum number of distinct characters allowed in the substring. The second line contains a string s (1 ≤ |s| ≤ 100,000), the input string consisting of lowercase English letters. **Output**: Output a single integer, the length of the longest substring with at most x distinct characters. **Sample Input**: ``` 2 eceba ``` **Sample Output**: ``` 3 ``` **Explanation**: For the string \\"eceba\\" with x = 2, the longest substring with at most 2 distinct characters is \\"ece\\", which has length 3.","solution":"def longest_substring_with_k_distinct_characters(s, x): Returns the length of the longest substring with at most x distinct characters. from collections import defaultdict n = len(s) if n == 0 or x == 0: return 0 left = 0 right = 0 char_count = defaultdict(int) max_length = 0 while right < n: char_count[s[right]] += 1 while len(char_count) > x: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Given a grid of numbers, you are required to find the largest sum of a contiguous subarray within a 2D matrix using the Kadane’s algorithm. You are given an `n x m` grid of integers where `1 ≤ n, m ≤ 1000`. Write a function to compute the largest sum of any contiguous sub-array within the grid. Your function should optimize the performance to handle the large input sizes. # Input The first line contains two integers, `n` and `m`, representing the number of rows and columns in the grid respectively. Each of the next `n` lines contains `m` space-separated integers that represent the elements of the grid. # Output Output a single integer, the maximum sum of any contiguous sub-array within the grid. # Example Input: ``` 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 ``` Output: ``` 29 ``` Explanation: The contiguous subarray with the largest sum is: ``` 3 8 10 -4 -1 1 7 ``` The sum of the above subarray is 29.","solution":"def find_largest_sum_contiguous_subarray(grid): def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def max_sum_grid(grid): n = len(grid) m = len(grid[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += grid[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum return max_sum_grid(grid)"},{"question":"Given a string of parentheses, determine the length of the longest balanced substring. A balanced parentheses substring is a substring that contains equal numbers of opening and closing parentheses in the correct order. The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^5) consisting of only characters \'(\' and \')\'. Output the length of the longest balanced substring. For example, for an input string \\"(()())\\", the output is 6 as the whole string is balanced. For the input string \\")()())\\", the output is 4 as the longest balanced substring is \\"()()\\".","solution":"def longest_balanced_parentheses(s): Returns the length of the longest balanced substring of parentheses. max_len = 0 stack = [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: stack.append(i) return max_len"},{"question":"Alice and Bob are playing a game with an array containing `n` integers. Alice makes the first move, and they take alternating turns. On each turn, a player must choose one positive integer from the array and remove it. The game ends when there are no positive integers left in the array. The player who cannot make a move loses the game. Alice and Bob both play optimally. Given an array of `n` integers, determine the winner of the game. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100) — the length of the array. - The second line contains `n` integers `a1, a2, ..., an` (0 ≤ ai ≤ 100) — the elements of the array. # Output - Print \\"Alice\\" if Alice will win the game, otherwise print \\"Bob\\". # Example Example 1: Input: ``` 5 1 2 3 4 0 ``` Output: ``` Alice ``` Example 2: Input: ``` 3 0 0 0 ``` Output: ``` Bob ``` # Explanation In the first example, Alice takes the last positive integer on her turn, ensuring Bob has no positive integers to take, hence Alice wins. In the second example, there are no positive integers to start with, so Alice cannot make a move and loses immediately.","solution":"def determine_winner(n, array): Determines the winner of the game between Alice and Bob. Args: n : int : the length of the array array : list : the list of integers Returns: str : \\"Alice\\" if Alice wins, \\"Bob\\" otherwise positive_count = sum(1 for num in array if num > 0) # Alice wins if there is at least 1 positive integer, otherwise Bob wins if positive_count > 0: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Fluttershy has a magical garden with an array of plants. Each day, she must water exactly one plant. If she waters the same plant on two consecutive days, it will wither away. Fluttershy wants to know if it\'s possible to water the plants for a given number of days without withering any of them. You are given an array of integers where the i-th element represents the number of days it can survive without water after being watered. Your task is to determine if it\'s possible to form a watering schedule for the given number of days without causing any plant to wither. Input: - The first line contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 10^6) — the number of plants and the number of days Fluttershy needs to water the plants. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the number of days each plant can survive without water after being watered. Output: - If it\'s possible to water the plants for d days without withering any of them, print \\"YES\\". Otherwise, print \\"NO\\". Example: Input: 3 5 2 3 1 Output: YES Explanation: One of the possible schedules to water the plants without causing any of them to wither is: plant 1 (day 1), plant 2 (day 2), plant 1 (day 3), plant 2 (day 4), plant 1 (day 5).","solution":"def can_water_plants(n, d, plants): Determines if it\'s possible to water the plants for d days without causing any plant to wither. Parameters: n (int): Number of plants. d (int): Number of days Fluttershy needs to water the plants. plants (list): Number of days each plant can survive without water after being watered. Returns: str: \\"YES\\" if it\'s possible to water the plants for d days without causing any plant to wither, otherwise \\"NO\\". # Ensure there is always a different plant available for each day if d <= sum(plants): return \\"YES\\" else: return \\"NO\\""},{"question":"In a large park, multiple paths connect various points of interest. The park can be represented as a graph with nodes as points of interest and edges as paths between these nodes. Each path has a certain length associated with it. You are to help a park visitor find the shortest path between two given points, while taking into consideration that some paths might be temporarily closed for maintenance. You are given the following: 1. The number of points of interest ( n ) (2 ≤ ( n ) ≤ 100). 2. The number of paths ( m ) (1 ≤ ( m ) ≤ 500). 3. A list of ( m ) paths, where each path is represented by three integers ( u ), ( v ), and ( l ) (1 ≤ ( u, v ) ≤ ( n ), ( u neq v ), 1 ≤ ( l ) ≤ 100), indicating there is a path of length ( l ) between points ( u ) and ( v ). The paths are bidirectional. 4. A list of ( p ) temporarily closed paths, where each closed path is represented by two integers ( u ), ( v ) (1 ≤ ( u, v ) ≤ ( n ), ( u neq v )) indicating the path between points ( u ) and ( v ) is currently unavailable. Your task is to determine the shortest path from point 1 to point ( n ). If there is no such path due to closed paths, return -1. The input consists of: 1. Two integers ( n ) and ( m ). 2. m lines each containing three integers ( u ), ( v ), and ( l ). 3. An integer ( p ) (0 ≤ ( p ) ≤ 500). 4. ( p ) lines each containing two integers ( u ) and ( v ). Output a single integer which is the length of the shortest path from point 1 to point ( n ). If there is no available path, output -1. Example: Input: ``` 5 6 1 2 4 1 3 2 2 3 5 2 4 10 3 5 3 4 5 6 2 2 4 1 3 ``` Output: ``` 9 ``` Explanation: The shortest path from point 1 to point 5 is 1 -> 2 -> 3 -> 5 with a total length of 4 + 5 + 3 = 12. But since the path 2 -> 4 is closed, and the path 1 -> 3 is also closed, the shortest available path is 1 -> 2 -> 3 -> 5, with the total length being 4 + 5 + 3 = 12. Therefore, the output is 12.","solution":"import heapq def find_shortest_path(n, m, paths, p, closed_paths): # Create the graph as an adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v, l in paths: graph[u].append((v, l)) graph[v].append((u, l)) # Remove closed paths from the graph closed_set = set((min(u, v), max(u, v)) for u, v in closed_paths) for u, v in closed_paths: graph[u] = [(vv, l) for vv, l in graph[u] if (min(u, vv), max(u, vv)) not in closed_set] graph[v] = [(uu, l) for uu, l in graph[v] if (min(v, uu), max(v, uu)) not in closed_set] # Dijkstra\'s algorithm to find shortest path from 1 to n priority_queue = [(0, 1)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_node == n: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return -1"},{"question":"You are given an integer array a of length n (1 le n le 1000). You need to partition the array into two non-empty subarrays such that the sum of elements in each subarray is different. In other words, find two indices i and j (1 le i < j le n), where sum_{k=1}^{i} a[k] neq sum_{k=i+1}^{j} a[k]. If such a partition is not possible, then report it. Input The first line contains an integer t (1 le t le 100) — the number of test cases. Next, t test cases are given. Each test case starts with an integer n, followed by n integers representing the array a. Output For each test case, if it is possible to partition the array, print \\"YES\\" on one line followed by two space-separated integers representing the indices of the partition. If it is not possible, print \\"NO\\". You can print the letters in the words YES and NO in any case. Example Input: 2 4 1 1 1 2 3 2 2 2 Output: YES 1 4 NO","solution":"def find_partition(t, test_cases): Finds valid partitions for given test cases. Parameters: t (int): Number of test cases test_cases (list of tuples): Each tuple is (n, a) where - n (int): Length of the array a - a (list of ints): The array of integers Returns: list of strings: Each string is either \\"YES i j\\" or \\"NO\\" results = [] for case in test_cases: n, a = case # To find a valid partition, we need to check if there exists # a partition such that the sums of the two subarrays are different. # Simplest case is to check if all elements are the same. if all(x == a[0] for x in a): results.append(\\"NO\\") continue # A simple solution is to have the first element in one subarray # and the rest in another, as long as not all elements are the same. results.append(f\\"YES 1 {n}\\") return results"},{"question":"You have been given an n x n matrix of integers. Your task is to find the submatrix whose sum of elements is maximum. The submatrix must contain at least one element and can be of any size from 1x1 up to nxn. For the given matrix: The first line contains a single integer n (1 ≤ n ≤ 300) - the size of the matrix. The next n lines each contain n space-separated integers representing the elements of the matrix. The absolute value of each element does not exceed 1000. You need to determine the sum of the elements of the submatrix with the maximum sum. Output a single integer - the sum of the submatrix with the maximum sum. For example: Input ``` 3 -1 -2 -3 -4 5 6 -7 8 9 ``` Output ``` 24 ``` In this example, the maximum sum submatrix is: ``` 5 6 8 9 ``` with the sum 5 + 6 + 8 + 9 = 28.","solution":"def maximum_sum_submatrix(n, matrix): def kadane(arr): Kadane\'s algorithm to find maximum sum subarray in 1D array. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_sum = float(\'-inf\') for left in range(n): temp = [0] * n for right in range(left, n): for i in range(n): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"A group of robotic vehicles are navigating a grid to perform certain tasks. Each robot moves within an n × m grid and can navigate using the following moves: - \'U\' (move up) - \'D\' (move down) - \'L\' (move left) - \'R\' (move right) Due to power consumption constraints, each robot has a limited range d, which defines the maximum number of steps (in any sequence of moves) a robot can make. Your task is to determine the number of unique robots that can successfully navigate from their starting position (provided in the list of robots\' starting positions) to a designated target position within the grid. The grid contains some obstacles that robots cannot pass through. These obstacles are represented by the character \'#\', while free spaces are represented by the character \'.\'. The starting and target positions are always located on free spaces. **Input:** - The first line contains two integers n and m (1 ≤ n, m ≤ 50) – the number of rows and columns in the grid, respectively. - The next n lines each contain m characters – the grid layout, describing free spaces and obstacles. - The next line contains two space-separated integers tx and ty (1 ≤ tx ≤ n, 1 ≤ ty ≤ m) – the coordinates of the target position. - The next line contains an integer k (1 ≤ k ≤ 100) – the number of robots. - The next k lines each contain three space-separated integers sx, sy, and d (1 ≤ sx ≤ n, 1 ≤ sy ≤ m, 1 ≤ d ≤ 100) – the starting position and the range of each robot. It is guaranteed that the target position and all starting positions are free spaces. **Output:** Print one integer – the number of robots that can reach the target position from their starting positions within the given range. **Example:** Input: ``` 5 5 ..... .#... .#... .#... ..... 5 5 3 1 1 10 2 2 3 3 5 2 ``` Output: ``` 2 ``` Explanation: - From (1, 1), the robot can navigate around the obstacles to reach (5, 5) within 10 steps. - From (2, 2), the robot cannot reach (5, 5) within 3 steps. - From (3, 5), the robot cannot reach (5, 5) within 2 steps.","solution":"def can_reach_target(grid, n, m, tx, ty, sx, sy, d): from collections import deque # Directions for \'U\', \'D\', \'L\', \'R\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(sx, sy, 0)]) # (row, col, distance) visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() if dist > d: continue if (x, y) == (tx, ty): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != \'#\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return False def num_robots_to_target(n, m, grid, tx, ty, robots): tx -= 1 ty -= 1 count = 0 for sx, sy, d in robots: sx -= 1 sy -= 1 if can_reach_target(grid, n, m, tx, ty, sx, sy, d): count += 1 return count"},{"question":"Wizards in a magical school are preparing for a potion-making competition. Each wizard has a certain number of ingredients allocated to them. A wizard can donate ingredients to another wizard if it\'s beneficial for the competition. Specifically, the goal is to maximize the smallest number of ingredients that any wizard has after redistribution. You are given an integer n representing the number of wizards and an array a of n integers where ai denotes the number of ingredients the ith wizard initially has. You need to determine the maximum possible value of the smallest number of ingredients any wizard has after some wizards donate ingredients to others. The first line contains one integer n (1 ≤ n ≤ 1000) — the number of wizards. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Output one integer — the maximum possible value of the smallest number of ingredients any wizard has after redistribution. Example Input: 4 2 5 3 9 Output: 4 Explanation: 1. One way to achieve this is to move 3 ingredients from the 4th wizard (who starts with 9) to the 1st wizard (who starts with 2). Thus, the ingredients distribution will be [5, 5, 3, 6]. 2. Another redistribution can result in [4, 4, 4, 7] after appropriate transfers. 3. The optimal redistribution makes the smallest number of ingredients any wizard has as 4.","solution":"def max_min_ingredients(n, a): Function to determine the maximum possible value of the smallest number of ingredients any wizard has after redistribution. low, high = min(a), sum(a) // n def can_distribute(min_ingredients): extra = 0 for x in a: if x < min_ingredients: extra -= (min_ingredients - x) else: extra += (x - min_ingredients) return extra >= 0 while low < high: mid = (low + high + 1) // 2 if can_distribute(mid): low = mid else: high = mid - 1 return low"},{"question":"You are working on optimizing the operations of a manufacturing plant. The plant has several machines that need to be operated to complete tasks. Each machine can handle tasks represented by different loads. Given the processing capabilities of each machine and the load requirements of each task, your objective is to assign the tasks to the machines in a way that maximizes the total load processed, without any machine exceeding its maximum capacity. The constraints are as follows: - You have `n` machines and `m` tasks. - Each machine `i` has a maximum capacity `mi` (1 ≤ `mi` ≤ 10^9). - Each task `j` has a load requirement `lj` (1 ≤ `lj` ≤ 10^9). Your goal is to determine the maximum total load that can be processed by the machines. Note that each task can be assigned to exactly one machine or not assigned at all. The first line contains two space-separated integers `n` and `m` — the number of machines and the number of tasks. The second line contains `n` space-separated integers `m1, m2, ..., mn`, where `mi` is the capacity of the i-th machine. The third line contains `m` space-separated integers `l1, l2, ..., lm`, where `lj` is the load of the j-th task. Output a single integer — the maximum total load that can be processed by the machines. # Example **Input:** ``` 3 4 10 15 20 5 10 15 20 ``` **Output:** ``` 45 ``` In this example, the tasks with load requirements 5, 10, and 15 can be assigned to machines with capacities 10, 15, and 20 respectively, and the task with load 20 can be assigned to the machine with capacity 20. Thus, the maximum total load processed is 45.","solution":"def max_total_load(n, m, machine_capacities, task_loads): Returns the maximum total load that can be processed by the machines. Parameters: n (int): Number of machines m (int): Number of tasks machine_capacities (list of int): Capacities of the machines task_loads (list of int): Load requirements of the tasks Returns: int: The maximum total load that can be processed by the machines machine_capacities.sort(reverse=True) task_loads.sort(reverse=True) i = 0 j = 0 total_load = 0 while i < n and j < m: if task_loads[j] <= machine_capacities[i]: total_load += task_loads[j] i += 1 j += 1 else: j += 1 return total_load"},{"question":"Nikita is developing a new website that contains a collection of articles. To make the articles more engaging, the editor wants to highlight sections of the text based on user interest. The articles are represented as strings, and user interests are represented as a list of keyword phrases. Nikita wants to find the shortest segment of the article that includes at least one occurrence of all the keyword phrases. If multiple shortest segments have the same length, return the one that appears first. You need to help Nikita by writing a function that finds the shortest segment of the article containing all the keyword phrases. Write a function `shortest_segment(article: str, keywords: List[str]) -> str` that takes a string `article` and a list of strings `keywords` and returns the shortest segment of the article that contains all the keywords. If there is no such segment, return an empty string. # Input: - The `article` string containing the text of the article. It is guaranteed that `1 ≤ len(article) ≤ 10^5`. - The `keywords` list containing `k` keyword phrases. Each keyword is a non-empty string. It is guaranteed that `1 ≤ k ≤ 100` and `1 ≤ len(keywords[i]) ≤ 50`. # Output: - A string representing the shortest segment of the article containing all the keyword phrases. If no such segment exists, print an empty string. # Example: ```python article = \\"this is a simple example of a simple text that includes keyword phrases\\" keywords = [\\"simple\\", \\"keyword\\", \\"phrases\\"] print(shortest_segment(article, keywords)) ``` Output: ``` \\"simple text that includes keyword phrases\\" ``` # Explanation: The shortest segment of the article that contains all three keywords is \\"simple text that includes keyword phrases\\". # Notes: - The solution should consider case-sensitivity. - The solution should handle cases where keyword phrases can be a single word or multiple words. - If any keyword is not present in the article, return an empty string.","solution":"from typing import List def shortest_segment(article: str, keywords: List[str]) -> str: # Helper function to check if all keywords are in a substring def contains_keywords(substring, keywords): return all(kw in substring for kw in keywords) words = article.split() n = len(words) shortest = \\"\\" shortest_length = float(\'inf\') for i in range(n): for j in range(i, n): substring = \' \'.join(words[i:j+1]) if contains_keywords(substring, keywords): if j - i + 1 < shortest_length: shortest = substring shortest_length = j - i + 1 return shortest"},{"question":"Given two strings s and t, determine if they are anagrams of each other. Two strings are anagrams if one string can be formed by rearranging the letters of the other string, using all the original letters exactly once. Write a function that takes two strings s and t, and returns True if they are anagrams, and False otherwise. Constraints: - Both strings will only contain lowercase English letters. - The length of the strings can be anything from 1 to 10^5. # Function Signature ```python def are_anagrams(s: str, t: str) -> bool: pass ``` # Input - Two strings s and t. # Output - Return True if s and t are anagrams of each other, otherwise return False. # Example ```python assert are_anagrams(\\"listen\\", \\"silent\\") == True assert are_anagrams(\\"hello\\", \\"billion\\") == False ``` # Note In the first example, \\"listen\\" and \\"silent\\" contain the same letters with the same frequencies, so they are anagrams. In the second example, \\"hello\\" and \\"billion\\" do not contain the same letters and thus cannot be rearranged to form each other.","solution":"def are_anagrams(s: str, t: str) -> bool: Determines if two strings s and t are anagrams of each other. # Anagrams must be the same length if len(s) != len(t): return False # Count the occurrences of each character in s and t from collections import Counter return Counter(s) == Counter(t)"},{"question":"In a small town, there are several row houses arranged in a straight line. The town council has decided to paint each row house, but they need to follow these specific rules: 1. No two adjacent houses can be painted the same color. 2. There are exactly k colors available, and it is guaranteed that k is at least 2. The input consists of multiple test cases. Each test case starts with an integer n (1 ≤ n ≤ 1000) — the number of houses in the row followed by a single integer k (2 ≤ k ≤ 100) — the number of available colors. For each test case, you have to determine if it\'s possible to paint all houses while satisfying the given constraints. If possible, you should output one such valid painting arrangement. The output should be for each test case: - \\"Yes\\" in the first line if it is possible to paint all houses according to the constraints, otherwise \\"No\\". - If the answer is \\"Yes\\", print a second line containing n space-separated integers in the range 1 to k representing the colors of each house in order. Example Input: ``` 3 4 3 1 2 5 2 ``` Example Output: ``` Yes 1 2 3 1 Yes 1 2 1 2 1 No ``` In the first test case, the houses can be painted with colors {1, 2, 3}, and they alternate correctly to prevent adjacent houses from having the same color. In the second test case, the houses are painted with two colors, alternating between 1 and 2. The third test case is impossible to solve with only one color available besides another, so the output is \\"No\\".","solution":"def paint_houses(n, k): Determines if it\'s possible to paint n houses with k colors such that no two adjacent houses have the same color. If possible, returns \\"Yes\\" and a valid painting arrangement, otherwise returns \\"No\\". if k < 2: return \\"No\\" result = [\\"Yes\\"] color_pattern = [(i % k) + 1 for i in range(n)] result.append(\\" \\".join(map(str, color_pattern))) return \\"n\\".join(result) def process_test_cases(test_cases): Processes a list of test cases, returning results for each in sequence. Each test case is given as a tuple (n, k). results = [] for n, k in test_cases: results.append(paint_houses(n, k)) return results"},{"question":"In the magical kingdom of Medoria, there are n mages, each with a certain level of magic power. The kingdom occasionally organizes duels between mages to determine the strongest mage among a group of participants. Each duel is between exactly two mages, with the mage having higher magic power winning the duel (in case of a tie, the duel ends in a draw). Given the magic power of each mage and a list of duels to be conducted, determine the winner for each duel or if it ends in a draw. Also, provide the results of each duel in the order they are given. The first line of input contains two integers n and d (1 ≤ n ≤ 100, 1 ≤ d ≤ 10^5) — the number of mages and the number of duels. The second line contains n integers m1, m2, ..., mn (1 ≤ mi ≤ 10^9) — the magic power of the mages, where mi is the magic power of the i-th mage. The next d lines contain pairs of space-separated integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) — the indices of the mages involved in each duel. For each duel, output \\"ai\\" if the mage ai wins, \\"bi\\" if the mage bi wins, and \\"draw\\" if the duel ends in a draw. # Example Input ``` 5 3 10 20 30 40 50 1 2 4 5 2 3 ``` Output ``` 2 5 3 ``` Explanation: - In the first duel, mage 2 (with power 20) defeats mage 1 (with power 10). - In the second duel, mage 5 (with power 50) defeats mage 4 (with power 40). - In the third duel, mage 3 (with power 30) defeats mage 2 (with power 20). If there were a tie in the magic power between any two mages in a duel, the output for that duel would be \\"draw\\".","solution":"def determine_duel_winners(n, d, magic_powers, duels): results = [] for duel in duels: a, b = duel if magic_powers[a-1] > magic_powers[b-1]: results.append(str(a)) elif magic_powers[a-1] < magic_powers[b-1]: results.append(str(b)) else: results.append(\\"draw\\") return results"},{"question":"A prominent biochemist is researching a newly discovered set of enzymes and their interactions within cells. Each enzyme can interact with specific other enzymes to form functional complexes. The biochemist has a list of potential interactions between pairs of enzymes and is interested in finding the maximum size of any subset of enzymes where no two enzymes within the subset interact directly. Given an integer n representing the number of enzymes, and an integer m representing the number of potential interactions, along with m pairs of integers where each pair represents a bidirectional interaction between two distinct enzymes, write a program to determine the size of the largest subset of enzymes for which no two enzymes directly interact. The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) — the number of enzymes and the number of interactions between them, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an interaction between enzyme u and enzyme v. Output a single integer — the size of the largest subset of enzymes such that no two enzymes in the subset have an interaction between them. For example, if we are given the input: ``` 5 3 1 2 1 3 4 5 ``` The output would be: ``` 3 ``` Explanation: One of the largest possible subsets is {1, 4, 5}.","solution":"def largest_independent_set_size(n, m, interactions): import networkx as nx G = nx.Graph() # Adding nodes G.add_nodes_from(range(1, n + 1)) # Adding edges from interactions for u, v in interactions: G.add_edge(u, v) # Precompute the degree of each node degree_dict = {node: G.degree(node) for node in G.nodes()} # Greedily select nodes independent_set = set() used_nodes = set() sorted_nodes = sorted(degree_dict.items(), key=lambda x: x[1]) for node, degree in sorted_nodes: if node not in used_nodes: independent_set.add(node) used_nodes.update(G.neighbors(node)) used_nodes.add(node) return len(independent_set) # Example usage: # print(largest_independent_set_size(5, 3, [(1, 2), (1, 3), (4, 5)])) # Expected output: 3"},{"question":"You are given a sequence of n integers. Determine the smallest non-negative integer x that does not appear in any contiguous subarray of length k within the sequence. The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 2 * 10^5) — the length of the sequence and the length of the subarrays. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ n) — the sequence. Print the smallest non-negative integer x that does not appear in any subarray of length k. Example: Input: 5 3 1 2 4 1 3 Output: 0 Explanation: - The subarrays of length 3 are: `[1, 2, 4]`, `[2, 4, 1]`, and `[4, 1, 3]`. - None of these subarrays contains the integer `0`. - Hence, the smallest non-negative integer not appearing in any subarray of length 3 is `0`.","solution":"def smallest_missing_integer(n, k, sequence): Returns the smallest non-negative integer that does not appear in any contiguous subarray of length k within the sequence. from collections import defaultdict # Initialize a set to keep track of existing numbers in the current window current_window_values = set() # Count the occurrences of each number in the current window num_count = defaultdict(int) # Initialize the current window with the first k elements for i in range(k): current_window_values.add(sequence[i]) num_count[sequence[i]] += 1 # Initialize the smallest missing integer missing_integer = 0 # Function to update the missing_integer def update_missing_integer(): nonlocal missing_integer # Loop until we find the smallest missing integer while missing_integer in current_window_values: missing_integer += 1 # Update for the first window update_missing_integer() # Slide the window over the rest of the sequence for i in range(k, n): if sequence[i - k] in num_count: num_count[sequence[i - k]] -= 1 if num_count[sequence[i - k]] == 0: current_window_values.remove(sequence[i - k]) current_window_values.add(sequence[i]) num_count[sequence[i]] += 1 update_missing_integer() return missing_integer"},{"question":"You are given an integer n, which represents the size of a square grid. You need to find the number of distinct paths from the top-left corner to the bottom-right corner of the grid, where you can only move either down or right at any point in time. Input begins with an integer n (1 ≤ n ≤ 1000), representing the size of the grid. Output a single integer, the number of distinct paths from the top-left corner to the bottom-right corner of the grid. For example, for a grid size of 2, the possible paths are: right -> right -> down -> down and right -> down -> right -> down. For a grid size of 3, the possible paths increase significantly as you can move right or down in many different sequences while always reaching the bottom-right corner. You need to print the total count of such distinct paths.","solution":"def num_paths(n): Returns the number of distinct paths from the top-left corner to the bottom-right corner of an n x n grid. # Create a 2D table to store results of subproblems dp = [[0] * (n + 1) for _ in range(n + 1)] # There is one way to reach any cell in the first row or first column for i in range(1, n + 1): dp[i][1] = 1 dp[1][i] = 1 # Calculate the number of distinct paths for other cells for i in range(2, n + 1): for j in range(2, n + 1): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] # The bottom-right cell contains the number of distinct paths return dp[n][n] # Example Usage # n = 2 # print(num_paths(n)) # Output: 2"},{"question":"Tiny is studying recursion and has learned about a problem called the \\"Fibonacci sequence.\\" He decides to test his new skills by writing a program to compute the nth Fibonacci number. Recall that the Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n ≥ 2 However, Tiny\'s program is very slow because it uses a simple recursive approach without memoization. You are asked to help Tiny optimize his program using dynamic programming to efficiently compute the nth Fibonacci number. **Input:** A single integer n (0 ≤ n ≤ 1000) representing the position in the Fibonacci sequence. **Output:** Print the nth Fibonacci number. **Example:** Input: ``` 10 ``` Output: ``` 55 ``` Input: ``` 0 ``` Output: ``` 0 ``` Input: ``` 1 ``` Output: ``` 1 ``` **Note:** Ensure that your solution efficiently handles large values of n by implementing a dynamic programming approach to store intermediate results and avoid redundant computations.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. :param n: The index of the Fibonacci sequence (0 ≤ n ≤ 1000) :return: The nth Fibonacci number if n == 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[0] = 0 fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"In a factory, there are `n` machines that produce widgets. Each machine operates independently at a different speed. Specifically, machine `i` produces a widget every `ti` seconds. Due to the increasing demand, the factory management wants to optimize the machines\' production schedule such that within a certain timeframe `T`, the total number of widgets produced by all machines is maximized. Additionally, any machine can be turned ON at any moment and must remain ON until the end of the timeframe `T`. Determine the maximum number of widgets that can be produced by optimally scheduling the machines. The following input is given: - The first line contains two integers `n` and `T` (1 ≤ `n` ≤ 10^4, 1 ≤ `T` ≤ 10^9), representing the number of machines and the total timeframe in seconds. - The second line contains `n` integers t1, t2, ..., tn (1 ≤ ti ≤ 10^9), where `ti` is the time in seconds it takes for machine `i` to produce one widget. Output the maximum number of widgets that can be produced within the timeframe `T` using the optimal schedule. # Example Input ``` 3 10 3 5 7 ``` Output ``` 8 ``` Explanation - Machine 1 produces 3 widgets (10 // 3 = 3). - Machine 2 produces 2 widgets (10 // 5 = 2). - Machine 3 produces 1 widget (10 // 7 = 1). - Total widgets produced = 3 + 2 + 1 = 6. So the maximum number of widgets that can be produced within 10 seconds is 6.","solution":"def max_widgets(n, T, times): Given the number of machines, total timeframe, and the array of times each machine takes to produce a widget, return the maximum number of widgets produced in the timeframe T. :param n: Number of machines :param T: Total timeframe in seconds :param times: List of times each machine takes to produce one widget :return: Maximum number of widgets produced within the timeframe T total_widgets = 0 for time in times: total_widgets += T // time return total_widgets"},{"question":"You are given an array a consisting of n positive integers. You are allowed to perform the following operation any number of times: choose a subarray of length at least 2 and replace each element of this subarray with the minimum element of this subarray. Your task is to determine the minimum number of operations needed to make all elements of the array equal. The first line of the input contains a single integer t (1 leq t leq 100) — the number of test cases. Each of the next t cases contains two lines: - The first line contains a single integer n (2 leq n leq 10^3) — the length of the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^4) — the elements of the array. Output a single integer for each test case — the minimum number of operations needed to make all elements of the array equal. # Example **Input:** ``` 2 3 2 2 2 4 4 3 2 3 ``` **Output:** ``` 0 2 ``` # Explanation In the first test case, the array is already equal, so no operations are needed. In the second test case, you can perform the following two operations: 1. Replace the subarray [4, 3] with [3, 3], resulting in [3, 2, 3, 3]. 2. Replace the subarray [3, 2, 3, 3] with [2, 2, 2, 2], making all elements equal.","solution":"def min_operations_to_equalize_array(t, test_cases): Returns the minimum number of operations to make all elements of the array equal. Parameters: t (int): Number of test cases test_cases (list of tuples): Each tuple contains two elements - the length of array n and the array a. Returns: list: A list of integers representing the minimum number of operations for each test case. results = [] for n, a in test_cases: unique_elements = set(a) if len(unique_elements) == 1: results.append(0) else: results.append(len(unique_elements) - 1) return results"},{"question":"You are given a string s consisting of lowercase Latin letters and a positive integer k (1 le k le |s|). You have to find a substring of length k which contains the maximum number of distinct characters. If there are multiple such substrings, return the lexicographically smallest one. The first line contains a single string s (1 le |s| le 10^5) — the input string. The second line contains an integer k (1 le k le |s|) — the desired length of the substring. Output a substring of length k that contains the maximum number of distinct characters. If there are multiple such substrings, print the lexicographically smallest one. For example: Input: ``` abcdefabc 3 ``` Output: ``` abc ``` Input: ``` aabbccdd 2 ``` Output: ``` ab ```","solution":"def max_distinct_char_substring(s, k): Finds a substring of length k which contains the maximum number of distinct characters. If there are multiple such substrings, return the lexicographically smallest one. from collections import defaultdict n = len(s) if k == 1: return min(s) max_distinct_count = 0 best_substring = s[0:k] for i in range(n - k + 1): current_substr = s[i:i+k] distinct_count = len(set(current_substr)) if distinct_count > max_distinct_count: max_distinct_count = distinct_count best_substring = current_substr elif distinct_count == max_distinct_count: best_substring = min(best_substring, current_substr) return best_substring"},{"question":"You are given a set of n productivity scores for employees in a company, represented as an array of integers. The company wants to form the most productive teams of employees. A team is defined as a contiguous subsequence of the array, and its productivity score is the sum of the productivity scores of its members. The company decided that the optimal team will be the one with the highest average productivity score. Your task is to determine the maximum average productivity score achievable by any team. The first line of input contains a single integer n (1 ≤ n ≤ 100,000), the number of employees. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the productivity scores of the employees. Output a single floating-point number — the maximum average productivity score of any team. Your answer will be considered correct if its absolute or relative error does not exceed 10^-6. Example: Input: 6 1 12 -5 -6 50 3 Output: 15.000000 Explanation: The optimal team is the contiguous subsequence [12, -5, -6, 50, 3], which has an average productivity score of (12 + (-5) + (-6) + 50 + 3) / 5 = 10.8. The subsequence [50] has a higher average, which is 50.0. Therefore, the maximal average productivity score is 15.0.","solution":"def max_average_productivity(n, productivity_scores): max_sum = current_sum = productivity_scores[0] for i in range(1, n): current_sum = max(productivity_scores[i], current_sum + productivity_scores[i]) max_sum = max(max_sum, current_sum) return max_sum def max_average(n, a): max_avg = float(\'-inf\') for k in range(1, n + 1): current_sum = sum(a[:k]) max_sum = current_sum for i in range(k, n): current_sum += a[i] - a[i - k] max_sum = max(max_sum, current_sum) max_avg = max(max_avg, max_sum / k) return max_avg"},{"question":"Nina is fascinated with numbers and their properties. One day, she discovered an interesting function f(x) that is defined for a positive integer x in the following manner: 1. If x is a prime number, then f(x) = 1. 2. If x is a composite number, then f(x) is the smallest prime number that divides x. Nina wants to apply the function to a list of numbers and then multiply the results together. However, she quickly realized that for large lists, this product can be very large. Therefore, she decided to take the product modulo (10^9 + 7). You are given a list of n integers. Compute the product of the function f applied to each number in the list, and return the result modulo (10^9 + 7). # Input The first line contains an integer n (1 ≤ n ≤ 1000), denoting the number of integers in the list. The second line contains n integers (a_1, a_2, ldots, a_n) (1 ≤ (a_i) ≤ (10^9)), representing the list of integers. # Output Print a single integer that denotes the product of f applied to each number in the list, modulo (10^9 + 7). # Example Input ``` 3 6 7 15 ``` Output ``` 21 ``` # Note In the given example: - f(6) = 2 (2 is the smallest prime dividing 6). - f(7) = 1 (7 is a prime number). - f(15) = 3 (3 is the smallest prime dividing 15). So, the product is (2 times 1 times 3 = 6), and the result is 21.","solution":"def is_prime(x): if x <= 1: return False if x <= 3: return True if x % 2 == 0 or x % 3 == 0: return False i = 5 while i * i <= x: if x % i == 0 or x % (i + 2) == 0: return False i += 6 return True def smallest_prime_divisor(x): if is_prime(x): return 1 if x % 2 == 0: return 2 i = 3 while i * i <= x: if x % i == 0: return i i += 2 return x def compute_product_modulo(numbers, mod=10**9 + 7): result = 1 for number in numbers: result = (result * smallest_prime_divisor(number)) % mod return result def nina_numbers(n, numbers): return compute_product_modulo(numbers)"},{"question":"Simon the Sailor is planning to sail his boat through a number of checkpoints placed along a river. Each checkpoint has a certain reward associated with it, and checkpoints are always sailed in sequential order, from 1 through n. Simon can choose to collect the reward from each checkpoint he sails through or skip that reward. Due to the strength of the current, every time Simon collects a reward from a checkpoint, he is forced to skip the reward from the next checkpoint. If he skips a checkpoint, he can freely choose whether to collect or skip the reward from the next checkpoint again. Given the list of rewards for each checkpoint, help Simon determine the maximum reward he can collect by the time he reaches the n-th checkpoint. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of checkpoints. The second line contains n integers ri (1 ≤ ri ≤ 10,000) — the reward at the i-th checkpoint. Output a single integer — the maximum reward Simon can collect. In the first example, Simon will choose to collect rewards from checkpoints 1 and 3, skipping checkpoints 2 and 4. In the second example, Simon will collect rewards from checkpoints 1, 3, and 5, skipping checkpoints 2 and 4.","solution":"def max_reward(n, rewards): if n == 0: return 0 if n == 1: return rewards[0] if n == 2: return max(rewards[0], rewards[1]) dp = [0] * n dp[0] = rewards[0] dp[1] = max(rewards[0], rewards[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + rewards[i]) return dp[-1]"},{"question":"Given a list of n integers, determine the maximum sum of any subsequence in which no two elements are adjacent in the original list. You are to write a function `maxSumNonAdjacent` that takes in a list of integers and returns this maximum sum. # Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the list. The second line contains n integers separated by spaces, representing the elements of the list. Each element is between -10^9 and 10^9, inclusive. # Output Output a single integer, the maximum sum of any subsequence such that no two elements are adjacent in the original list. # Example Input ``` 4 3 2 5 10 ``` Output ``` 13 ``` Input ``` 3 -1 7 8 ``` Output ``` 8 ``` # Explanation In the first example, the maximum sum of a subsequence in which no two elements are adjacent is achieved by picking the elements 3 and 10, resulting in a sum of 13. In the second example, the maximum sum is achieved with the single element 8, since including -1 or 7 along with it would reduce the sum.","solution":"def maxSumNonAdjacent(nums): if not nums: return 0 elif len(nums) == 1: return max(0, nums[0]) n = len(nums) incl = max(0, nums[0]) excl = 0 for i in range(1, n): new_excl = max(incl, excl) incl = excl + nums[i] excl = new_excl return max(incl, excl)"},{"question":"Tina loves playing with numbers. Recently, she discovered a fun way to generate interesting sequences of numbers. Given an integer n, Tina constructs a sequence of length n that satisfies the following properties: - The sequence should be strictly increasing. - Each number in the sequence should be represented as a binary string that is lexicographically larger than its preceding number when viewed as a binary string. Help Tina construct such a sequence or determine if it\'s impossible to do so. The first and only line contains a single integer n (1 ≤ n ≤ 1000), the length of the desired sequence. If it\'s not possible to construct such a sequence, print \\"-1\\" (without quotes). Otherwise, print n binary strings of length up to 50, each on a new line, representing the sequence that meets Tina\'s requirements.","solution":"def generate_binary_sequence(n): if n > 50: return -1 sequence = [] for i in range(n): sequence.append(bin(i + 1)[2:]) return sequence"},{"question":"In a distant town, there is a strange ritual. They have a special ritual stone that needs to be broken into smaller pieces. The stone is represented by an integer S (1 ≤ S ≤ 10^5), and it can only be broken down using specific ritual tools. Each tool can break the stone into a smaller piece, but each use of a tool costs a certain amount of energy. There are multiple types of tools available, and each tool can reduce the stone\'s size by a specific number of units. You are given n types of tools, and each tool type i reduces the size of the stone by ai units at a cost of bi energy units. Your task is to determine the minimum energy required to reduce the stone\'s size to exactly zero. If it is not possible to reduce the stone\'s size to exactly zero using the available tools, print \\"-1\\". The first line contains the integer S – the initial size of the stone. The second line contains the integer n (1 ≤ n ≤ 100) – the number of types of tools. The following n lines each contain two integers ai and bi (1 ≤ ai ≤ S, 1 ≤ bi ≤ 1000) – the reduction in size and energy cost of each tool type. Print the minimum energy required to reduce the stone\'s size to zero, or \\"-1\\" if it is not possible. For example, for an initial stone size of 7 and two types of tools with the following characteristics: 1. Tool 1: reduces size by 3 units, energy cost is 5 2. Tool 2: reduces size by 2 units, energy cost is 2 The output would be the minimum energy required to break the stone into size zero units using the best combination of tools.","solution":"def min_energy_to_break_stone(S, tools): Determine the minimum energy required to reduce the stone\'s size to exactly zero. Parameters: S (int): initial size of the stone tools (list): list of tuples where each tuple (ai, bi) represents: ai (int): reduction in size by the tool bi (int): energy cost of the tool Returns: int: minimum energy required to break the stone into size zero units, or -1 if it is not possible. # Initialize the dp array to a large value (infinity) dp = [float(\'inf\')] * (S + 1) dp[0] = 0 # Base case: no energy needed to reduce a stone of size 0 # DP solution to solve this problem for current_size in range(1, S + 1): for reduction, cost in tools: if current_size >= reduction: dp[current_size] = min(dp[current_size], dp[current_size - reduction] + cost) return dp[S] if dp[S] != float(\'inf\') else -1 # Read input function def read_input(): import sys input = sys.stdin.read data = input().split() S = int(data[0]) n = int(data[1]) tools = [(int(data[2 + 2 * i]), int(data[3 + 2 * i])) for i in range(n)] return S, tools"},{"question":"You have an array of integers representing the car speeds on a highway. All cars are moving in a single direction. We define a segment of continuous cars as a subarray of the given array. We consider that a segment is compliant if all cars in that segment are moving at a speed greater than or equal to a given speed threshold k. Your task is to determine the maximum length of a compliant segment. For instance, for the speeds array [10, 20, 30, 40, 50, 60] and the threshold k = 30, the maximal compliant segment would be [30, 40, 50, 60] with a length of 4. If no car meets the speed threshold, return 0. # Input - The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100), where n is the number of cars, and k is the speed threshold. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100), representing the speeds of the cars. # Output - Print an integer, the length of the maximum compliant segment. # Example **Input** ``` 6 30 10 20 30 40 50 60 ``` **Output** ``` 4 ``` **Input** ``` 4 25 10 15 20 25 ``` **Output** ``` 1 ``` **Input** ``` 5 70 10 20 30 40 50 ``` **Output** ``` 0 ``` Write a program that finds and outputs the length of the maximum compliant segment.","solution":"def max_compliant_segment_length(n, k, speeds): Determines the maximum length of a segment of the speeds array where all values are greater than or equal to the given threshold k. Parameters: n (int): Number of speeds. k (int): Speed threshold. speeds (list of int): List of speeds. Returns: int: Length of the maximum compliant segment. max_length = 0 current_length = 0 for speed in speeds: if speed >= k: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"A city is planning to build a new bridge across a river to connect two districts. There are several available locations where the bridge can be built, each with a different cost and a different level of environmental impact. You have been tasked with selecting the most suitable location based on a balance between cost and environmental impact. The bridge\'s total score is calculated as the product of its cost and its level of environmental impact. Your goal is to find the location with the minimum total score. The first line of the input contains a single integer n (1 le n le 10^5), the number of possible locations for the bridge. The next n lines each contain two integers, the cost c_i (1 le c_i le 10^9) and the environmental impact e_i (1 le e_i le 10^9) of constructing the bridge at that location. Output a single integer, the minimum total score. **Example** _Input:_ ``` 4 10 5 6 8 9 7 4 6 ``` _Output:_ ``` 24 ``` _In this example, the location with cost 6 and environmental impact 4 provides the minimum total score (6 * 4 = 24)._","solution":"def find_minimum_total_score(n, locations): Finds the location with the minimum total score, calculated as the product of cost and environmental impact. :param n: Number of locations (int) :param locations: List of tuples [(c1, e1), (c2, e2), ...] where ci is the cost and ei is the environmental impact. :return: The minimum total score (int) min_score = float(\'inf\') for cost, impact in locations: score = cost * impact if score < min_score: min_score = score return min_score"},{"question":"You are given a 2D grid of size `n x m` consisting of non-negative integers. Your task is to find the maximum possible sum of a rectangle subgrid within the given grid. A rectangle subgrid is defined by its top-left corner `(i1, j1)` and bottom-right corner `(i2, j2)` where `1 ≤ i1 ≤ i2 ≤ n` and `1 ≤ j1 ≤ j2 ≤ m`. The input consists of several test cases. The first line contains a single integer `T` (`1 ≤ T ≤ 10`), the number of test cases. For each test case: - The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 1000`), the dimensions of the grid. - The next `n` lines each contain `m` integers representing the grid values. The values are non-negative integers and don’t exceed `10^6`. For each test case, print the maximum sum of a rectangle subgrid. # Example Input ``` 2 3 3 1 2 3 4 5 6 7 8 9 2 2 1 2 3 4 ``` Output ``` 45 10 ``` # Explanation In the first test case, the rectangle subgrid that provides the maximum sum covers the entire grid: ``` 1 2 3 4 5 6 7 8 9 ``` with a sum of `1+2+3+4+5+6+7+8+9 = 45`. In the second test case, the rectangle subgrid that provides the maximum sum is also the entire grid: ``` 1 2 3 4 ``` with a sum of `1+2+3+4 = 10`.","solution":"def max_sum_subgrid(n, m, grid): # Function to find the maximum sum subgrid in a given 2D grid max_sum = float(\'-inf\') # Precompute prefix sums for the 2D grid prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = grid[i-1][j-1] if i > 1: prefix_sum[i][j] += prefix_sum[i-1][j] if j > 1: prefix_sum[i][j] += prefix_sum[i][j-1] if i > 1 and j > 1: prefix_sum[i][j] -= prefix_sum[i-1][j-1] # Compute the maximum sum subgrid for i1 in range(1, n + 1): for i2 in range(i1, n + 1): for j1 in range(1, m + 1): for j2 in range(j1, m + 1): total = prefix_sum[i2][j2] if i1 > 1: total -= prefix_sum[i1 - 1][j2] if j1 > 1: total -= prefix_sum[i2][j1 - 1] if i1 > 1 and j1 > 1: total += prefix_sum[i1 - 1][j1 - 1] max_sum = max(max_sum, total) return max_sum def process_test_cases(input_data): result = [] data = input_data.strip().split(\'n\') T = int(data[0]) index = 1 for _ in range(T): n, m = map(int, data[index].split()) grid = [list(map(int, data[index + 1 + i].split())) for i in range(n)] result.append(max_sum_subgrid(n, m, grid)) index += n + 1 return result"},{"question":"You have been given a set of N students, each represented by a pair of integers indicating their height and weight. Your task is to form a group of students such that the difference between the maximum and minimum height in the group does not exceed H, and the difference between the maximum and minimum weight does not exceed W. Determine the maximum number of students that can form such a group. The first line contains an integer N (1 ≤ N ≤ 100), the number of students. Each of the next N lines contains two integers, h and w (1 ≤ h, w ≤ 100), representing the height and weight of a student. Print a single integer: the maximum number of students that can form a group satisfying the given criteria. **Input Example:** ``` 6 160 70 150 65 155 75 165 80 170 77 160 69 ``` **Output Example:** ``` 4 ``` **Explanation:** One possible group of students could be those with the following height and weight pairs: (160, 70), (160, 69), (155, 75), and (165, 80). The height difference is 10, and the weight difference is 11.","solution":"def max_students_in_group(students, H, W): Determine the maximum number of students in a group satisfying the height and weight difference criteria. Parameters: students (List[Tuple[int, int]]): List of tuples where each tuple contains height and weight of a student H (int): Maximum allowed height difference W (int): Maximum allowed weight difference Returns: int: Maximum number of students that can form a group n = len(students) # Function to check if a given subset of students satisfies the height and weight constraints def is_valid_group(group): heights = [students[i][0] for i in group] weights = [students[i][1] for i in group] return (max(heights) - min(heights) <= H) and (max(weights) - min(weights) <= W) # Generate all possible subsets and find the maximum valid subset max_group_size = 0 from itertools import combinations for r in range(1, n+1): for subset in combinations(range(n), r): if is_valid_group(subset): max_group_size = max(max_group_size, r) return max_group_size # Example usage: # students = [(160, 70), (150, 65), (155, 75), (165, 80), (170, 77), (160, 69)] # H = 10 # W = 15 # print(max_students_in_group(students, H, W)) # Output: 4"},{"question":"Andrew has a list of n integers and a series of m operations he wants to perform on the list. Each operation can be one of two types: 1. Increase the value at position x by a certain amount v. 2. Find the maximum value within a subarray from index l to r (inclusive). Help Andrew process the operations efficiently. The first line contains two integers n (1 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 100,000) – the size of the list and the number of operations respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) – the initial values of the list. Each of the next m lines contains an operation in one of the following formats: - \\"1 x v\\" – increase the value at index x (1 ≤ x ≤ n) by v (1 ≤ v ≤ 1,000,000). - \\"2 l r\\" – find the maximum value in the subarray from index l to r (1 ≤ l ≤ r ≤ n). For each operation of the second type, output the maximum value within the specified range. Example input: ``` 5 4 1 2 3 4 5 1 3 10 2 1 3 1 4 5 2 2 5 ``` Example output: ``` 13 10 ```","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self._build_tree(data) def _build_tree(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i << 1], self.tree[i << 1 | 1]) def update(self, idx, value): idx += self.n self.tree[idx] += value while idx > 1: idx >>= 1 self.tree[idx] = max(self.tree[idx << 1], self.tree[idx << 1 | 1]) def query(self, l, r): l += self.n r += self.n max_val = float(\'-inf\') while l < r: if l & 1: max_val = max(max_val, self.tree[l]) l += 1 if r & 1: r -= 1 max_val = max(max_val, self.tree[r]) l >>= 1 r >>= 1 return max_val def process_operations(n, m, initial_values, operations): segment_tree = SegmentTree(initial_values) results = [] for operation in operations: if operation[0] == 1: _, x, v = operation segment_tree.update(x - 1, v) elif operation[0] == 2: _, l, r = operation result = segment_tree.query(l - 1, r) results.append(result) return results"},{"question":"Given an integer array a of length n, you need to perform the following operation exactly k times: Choose any subarray of a of length m (i.e. m leq n) and reverse it. Determine if it is possible to make the array sorted in non-decreasing order after exactly k operations. The first line of the input contains three integers n, k, and m (1 leq n leq 1000, 1 leq k, m leq n) — the length of the array, the number of operations, and the length of the subarray respectively. The second line of the input contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. For each test case, print \\"YES\\" if it is possible to sort the array in non-decreasing order after exactly k operations, otherwise print \\"NO\\".","solution":"def is_sortable_with_reversals(n, k, m, a): sorted_a = sorted(a) if k * m >= n: # If we can cover the entire array with the operations, it\'s sortable return \\"YES\\" if k == 1 and m < n: # If we can only reverse one subarray which is smaller than the entire array, # we need such a subarray to contain the elements which, when reversed, makes # the array part correctly ordered. This is often not trivially possible. if a == sorted_a: return \\"YES\\" else: return \\"NO\\" def reverse_subarray(array, start, length): end = start + length subarray = array[start:end] subarray.reverse() return array[:start] + subarray + array[end:] for i in range(n - m + 1): # reverse different subarrays of length m and check if they can be sorted new_a = reverse_subarray(a, i, m) if new_a == sorted_a: return \\"YES\\" return \\"NO\\""},{"question":"Jane is an avid rock collector and loves organizing her collection by type and size. She has recently acquired a new batch of rocks in various sizes and wants to arrange them in a visually appealing manner on her display shelves. Her display strategy is to place them in rows such that each row contains rocks of strictly increasing size from left to right. Jane has several rows on her display shelves, and each row has a certain rock capacity. Specifically, each row can hold a `k` number of rocks. Jane wants to fill the rows such that no row has any empty slots left. She suspects that she may not be able to use all of the rocks in the new batch because of this constraint. She needs your help to calculate the maximum number of rocks she can display following her requirements. # Input - The first line contains two integers, `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ n), representing the number of rocks in her collection and the capacity of each row respectively. - The second line contains `n` integers, `a1, a2, ..., an` (1 ≤ ai ≤ 10^5) representing the sizes of the rocks. # Output Print a single integer — the maximum number of rocks that can be displayed on the shelves. # Example Input ``` 8 3 1 2 2 3 4 5 6 7 ``` Output ``` 6 ``` # Explanation Jane can arrange the rocks on the shelves in the following way: - Row 1: 1 2 3 - Row 2: 4 5 6 7 does not satisfy the condition to be part of any complete row of size 3. Therefore, 6 is the maximum number of rocks that can be displayed. Feel free to provide a different mechanism for selecting rocks that ensures maximum utilization of the display capacity!","solution":"def max_rocks_displayed(n, k, rock_sizes): Returns the maximum number of rocks that can be displayed on the shelves. Parameters: n (int): Number of rocks. k (int): Capacity of each row. rock_sizes (list): List of integers representing the sizes of the rocks. Returns: int: Maximum number of rocks that can be displayed. # Sort the rock sizes to facilitate placing them in increasing order in rows rock_sizes.sort() # Initialize a variable to count the maximum number of rocks that can be displayed max_displayed_rocks = 0 # Iterate through the rock sizes and try to form as many full rows as possible for i in range(0, n, k): if i + k <= n: row = rock_sizes[i:i + k] if len(row) == k: max_displayed_rocks += k return max_displayed_rocks"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n and an integer k. The goal is to find the length of the shortest contiguous subarray such that the sum of all elements in this subarray is at least k. If no such subarray exists, return -1. For example, consider the array a = [2, 3, 1, 2, 4, 3] and k = 7: - The shortest subarray is [4, 3] with length 2 and sum 7. - There is no shorter subarray with a sum of 7 or more. Your task is to implement a function that finds the length of the shortest such subarray or returns -1 if no such subarray exists. Function signature: `def shortest_subarray_length(arr: List[int], k: int) -> int:` # Input - An integer n (1 le n le 10^5) — the number of elements in the array. - An array a_1, a_2, ldots, a_n of integers (-10^5 le a_i le 10^5). - An integer k (1 le k le 10^9). # Output - An integer representing the length of the shortest subarray with sum at least k, or -1 if no such subarray exists. # Example Input: ``` 6 2 3 1 2 4 3 7 ``` Output: ``` 2 ``` Explanation: The subarray [4, 3] is the shortest subarray with sum >= 7. # Additional Examples Input: ``` 5 1 2 3 4 5 11 ``` Output: ``` 3 ``` Explanation: The subarray [3, 4, 5] is the shortest subarray with sum >= 11. Input: ``` 5 1 1 1 1 1 5 ``` Output: ``` 5 ``` Explanation: The subarray [1, 1, 1, 1, 1] is the shortest subarray with sum = 5. Input: ``` 4 1 2 3 4 15 ``` Output: ``` -1 ``` Explanation: There is no subarray with sum >= 15.","solution":"from typing import List def shortest_subarray_length(arr: List[int], k: int) -> int: n = len(arr) min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += arr[right] while current_sum >= k: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Given an array of integers, you are to segment it into contiguous subarrays such that the sum of the elements in each subarray is odd. Return the fewest possible number of such subarrays. If it\'s not possible to split the array in such a way, return -1. The first line contains an integer n (1 leq n leq 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. Output the minimum number of contiguous subarrays needed. If it\'s not possible to split the array with all subarray sums being odd, output -1. For example: # Input: 6 1 2 3 4 5 6 # Output: 3 Explanation: A possible segmentation is [1, 2], [3, 4], [5, 6]. # Input: 4 2 4 6 8 # Output: -1 Explanation: All numbers in this array are even, so it\'s not possible to have any subarray with an odd sum.","solution":"def min_odd_subarrays(n, arr): Returns the minimum number of contiguous subarrays needed such that the sum of elements in each subarray is odd. If it\'s not possible, returns -1. # Check if it\'s possible to obtain an odd sum subarray has_odd = any(x % 2 != 0 for x in arr) if not has_odd: return -1 subarrays = 0 current_sum = 0 for num in arr: current_sum += num if current_sum % 2 != 0: subarrays += 1 current_sum = 0 return subarrays"},{"question":"You are given an array of positive integers representing the amount of time different tasks will take to complete. Each task can only be assigned to one worker, and each worker can only work on one task at a time. You need to assign tasks to two workers in such a way that the difference in the total time taken by each worker is minimized. Write a function `minimizeTimeDifference()` that takes in a list of integers representing the durations of the tasks and returns the minimum possible difference in the total time taken by each worker. **Input:** - A single integer `n` (1 ≤ n ≤ 20) representing the number of tasks. - A list of `n` positive integers representing the duration of each task. **Output:** - A single integer representing the minimal difference in the total time taken by each worker. **Example:** ``` Input: 5 1 2 3 4 5 Output: 1 ``` In the example given, the optimal assignment of tasks could be: - Worker 1: 1, 4, 5 (Total time = 10) - Worker 2: 2, 3 (Total time = 5) The difference in total time is |10 - 9| = 1, which is the minimum possible difference for this set of tasks. **Note:** 1. You can assume that there will always be at least one way to distribute the tasks among the two workers. 2. The constraints allow for a solution that explores different subsets or combinations of tasks.","solution":"def minimizeTimeDifference(n, task_times): A function to minimize the difference in total time taken to complete tasks by two workers. Args: n: int - Number of tasks. task_times: list of int - List of task durations. Returns: int - Minimum possible difference in the total time taken by each worker. import itertools def total_time(subset): return sum(subset) # Calculate the total time of all tasks total_sum = sum(task_times) min_difference = float(\'inf\') # Iterate over all possible subsets of the tasks for i in range(n+1): for subset in itertools.combinations(task_times, i): subset_sum = total_time(subset) other_subset_sum = total_sum - subset_sum current_difference = abs(subset_sum - other_subset_sum) if current_difference < min_difference: min_difference = current_difference return min_difference"},{"question":"Given a tree with n nodes rooted at node 1, where each node has a positive integer value assigned to it, calculate the maximum sum of node values you can obtain by selecting a subset of nodes such that no two selected nodes are directly connected by an edge. The tree is described by its edges, and the nodes are guaranteed to be labeled from 1 to n. Input: - The first line contains a single integer n (1 ≤ n ≤ 100,000), the number of nodes in the tree. - The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 10^9), where vi represents the value of the i-th node. - Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) representing an edge between nodes u and v. Output: - Print a single integer, the maximum sum of node values obtainable under the described condition. Example: Input: 5 1 2 3 4 5 1 2 1 3 3 4 3 5 Output: 11 Explanation: The optimal subset of nodes to select is {2, 4, 5}. The sum of their values is 2 + 4 + 5 = 11.","solution":"def max_subset_sum(n, values, edges): from collections import defaultdict, deque # Construct the adjacency list for the tree adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Dynamic programming arrays include = [0] * (n + 1) exclude = [0] * (n + 1) # Depth-first search to populate include and exclude arrays def dfs(node, parent): include[node] = values[node - 1] # Node is 1-indexed in problem description for neighbor in adj_list[node]: if neighbor != parent: dfs(neighbor, node) include[node] += exclude[neighbor] exclude[node] += max(include[neighbor], exclude[neighbor]) # Start DFS from the root node (1) dfs(1, -1) # The result is the max value we can get whether we include or exclude the root node return max(include[1], exclude[1])"},{"question":"You are given an array of positive integers representing the number of pages in various books. You need to assign these books to two people in such a way that the difference in the total number of pages read by each person is minimized. Each book must be read by exactly one person. The first line contains an integer n (1 leq n leq 100) — the number of books. The next line contains n space-separated integers p_1, p_2, ldots, p_n (1 leq p_i leq 1000) — the number of pages in each book. Output the minimal possible difference between the total number of pages read by the two people. For example, consider the input: ``` 5 10 20 30 40 50 ``` A valid output would be: ``` 10 ``` Here, one possible way is that one person reads books with pages [10, 50] and the other person reads books with pages [20, 30, 40]. The total number of pages read by the first person is 60 and by the second person is 90, making the difference 30. Another way is to have one person read books [20, 40] and the other [10, 30, 50], making the difference 10 which is minimal.","solution":"def min_diff_pages(n, pages): Assign books to two people such that the difference in the total number of pages read by each person is minimized. total_sum = sum(pages) dp = [False] * (total_sum + 1) dp[0] = True for page in pages: for j in range(total_sum, page - 1, -1): dp[j] = dp[j] or dp[j - page] min_diff = float(\'inf\') for s1 in range(total_sum // 2 + 1): if dp[s1]: s2 = total_sum - s1 min_diff = min(min_diff, abs(s2 - s1)) return min_diff"},{"question":"In a kingdom far far away, there are several villages under the rule of a wise king. The kingdom is particular about its layout and has n village gates. Each gate is connected to some other gates by unique paths. The king wants to build a new road network such that it is still possible to travel from one gate to another without passing through any village more than once. The king has decided to improve this road network by adding exactly one new road connecting two gates that are not currently directly connected. Your task is to determine all pairs of gates between which a new road can be constructed such that the resulting network still remains a valid road network and where a valid road network is defined as having no cycles (a tree). The first line of input contains an integer n (2 ≤ n ≤ 100) — the number of village gates. The next n-1 lines each contain two integers ui and vi (1 ≤ ui, vi ≤ n) — indicating an existing road between gate ui and gate vi. Print all pairs of gates (a, b) such that adding a road between gate a and gate b does not create a cycle in the road network. Each pair should appear in a separate line as (a, b) with a < b. The pairs should be printed in lexicographical order. For instance, consider when n=4, there are 3 roads (paths) already between gates, described by the pairs (1,2), (2,3), and (3,4). There are multiple ways to add one road to connect the remaining gate pairs without creating a cycle while still being connected. Example: ``` Input: 4 1 2 2 3 3 4 Output: 1 3 1 4 2 4 ```","solution":"def possible_new_roads(n, roads): from collections import defaultdict, deque graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs(start): visited = set() q = deque([start]) while q: node = q.popleft() if node in visited: continue visited.add(node) for neighbor in graph[node]: if neighbor not in visited: q.append(neighbor) return visited all_nodes = set(range(1, n + 1)) components = [] visited_nodes = set() for node in range(1, n + 1): if node not in visited_nodes: component = bfs(node) components.append(component) visited_nodes |= component possible_edges = [] for i in range(1, n): for j in range(i + 1, n + 1): if j not in graph[i]: possible_edges.append((i, j)) return possible_edges"},{"question":"You are given a list of n integers. Your task is to determine the smallest number of operations required to make the list strictly decreasing. In one operation, you can choose any element of the list and decrease its value by 1. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of integers in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Print the smallest number of operations required to make the list strictly decreasing. Note: A list is strictly decreasing if for every i (1 ≤ i < n), ai > ai+1.","solution":"def min_operations_to_strictly_decreasing(lst): operations = 0 for i in range(len(lst) - 2, -1, -1): if lst[i] <= lst[i + 1]: operations += (lst[i + 1] - lst[i] + 1) lst[i] = lst[i + 1] + 1 return operations"},{"question":"Alex has recently started learning how to juggle with different objects. He decided to write a program to simulate his juggling pattern and determine if he can successfully juggle with a given set of objects without dropping any of them. The juggling pattern can be represented as a string s of length n. Each character in the string can be either \'(\' representing an \\"add\\" action or \')\' representing a \\"remove\\" action. A correct juggling pattern requires the following: 1. For every \\"add\\" action \'(\' there must be a corresponding \\"remove\\" action \')\' later in the string so that the number of objects currently being juggled never goes negative. 2. At the end of the pattern, there should be no objects left being juggled (i.e., the number of \\"add\\" actions should match the number of \\"remove\\" actions). Given a string s, determine if it represents a valid juggling pattern. You should output \\"YES\\" if the pattern is valid, and \\"NO\\" otherwise. # Input - The first line contains an integer n (1 leq n leq 10^6) — the length of the string. - The second line contains a string s of length n consisting of characters \'(\' and \')\'. # Output - Print \\"YES\\" if the string represents a valid juggling pattern, and \\"NO\\" otherwise. # Examples Example 1 Input: ``` 6 ((())) ``` Output: ``` YES ``` Example 2 Input: ``` 6 (()()) ``` Output: ``` YES ``` Example 3 Input: ``` 3 ())( ``` Output: ``` NO ``` # Note - In the first example, the pattern \\"((()))\\" is valid because all \\"add\\" actions are matched by corresponding \\"remove\\" actions, resulting in zero objects being juggled by the end. - In the second example, the pattern \\"(()())\\" is also valid as each \\"add\\" is properly matched by a \\"remove\\". - In the third example, the pattern \\"())(\\" is invalid due to an unmatched \\"remove\\" action occurring before enough \\"add\\" actions.","solution":"def is_valid_juggling_pattern(n, s): balance = 0 for char in s: if char == \'(\': balance += 1 else: balance -= 1 if balance < 0: return \\"NO\\" return \\"YES\\" if balance == 0 else \\"NO\\""},{"question":"Given an integer array `nums`, you are required to perform a series of operations to make all elements of the array equal. In one operation, you can choose any subarray of `nums` and increment all its elements by 1. Determine the minimum number of operations needed to make all elements of the array equal. The first line of input contains an integer `n` (1 ≤ n ≤ 2000) which denotes the number of elements in the array `nums`. The second line contains `n` space-separated integers `nums[i]` (1 ≤ nums[i] ≤ 10^6) representing the elements of the array. Output a single integer — the minimum number of operations needed to make all elements of the array equal. # Example Input ``` 4 1 2 3 4 ``` Output ``` 3 ``` Explanation One efficient way to make all elements equal: 1. Increment subarray [1, 2, 3, 4] → [2, 3, 4, 5] 2. Increment subarray [3, 4, 5] → [2, 4, 5, 6] 3. Increment subarray [4, 5, 6] → [2, 5, 6, 7] After these 3 operations, all elements of the array become equal (7, in this case). Note that different sequences of operations might also lead to the same result in the minimum number of operations.","solution":"def min_operations_to_make_elements_equal(n, nums): Returns the minimum number of operations needed to make all elements of the array equal. # To minimize the number of operations, we should make all elements equal to the maximum element in the array. max_num = max(nums) # Calculate the number of operations needed operations = 0 for num in nums: operations += max_num - num return operations"},{"question":"You are given an array of integers representing the profit earned by a company for each day of a certain period. The company is looking to identify the maximum profit they could have earned by investing in that period on exactly one day and withdrawing the investment on exactly one later day. Write a function `max_profit` that takes an array of integers and returns an integer representing the maximum possible profit. If no profit can be made, return 0. **Input:** - An array of integers `prices` where `prices[i]` represents the profit on the `i-th` day. The length of the array is between 2 and 100,000, inclusive. - Each profit value is an integer within the range -100,000 to 100,000, inclusive. **Output:** - A single integer representing the maximum possible profit from exactly one buy-sell transaction. If no profit is possible, return 0. **Example 1:** ``` Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (profit = 1) and sell on day 5 (profit = 6), profit is 6-1 = 5. ``` **Example 2:** ``` Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0. ``` **Constraints:** - You should complete this in O(n) time complexity. - Use only constant extra space.","solution":"def max_profit(prices): Returns the maximum possible profit from exactly one buy-sell transaction. Parameters: prices (list): A list of integers representing daily profits. Returns: int: The maximum possible profit. If no profit is possible, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Polycarp and Vasiliy found a board game called \\"Equalizer\\". The board consists of n cells arranged in a line. Each cell i initially contains a positive integer ti that represents the value in that cell. In one move, you can choose any cell and increase its value by 1. The goal of the game is to make all the values in the cells equal using the minimum number of moves. You are given the initial values in the cells. Determine the minimum number of moves required to make all the values in the cells equal. The first line contains an integer n (1 ≤ n ≤ 100) — the number of cells on the board. The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 100) — the initial values in the cells. Output the minimum number of moves required to equalize all the values. For example: Input: 5 2 3 5 2 1 Output: 12","solution":"def minimum_moves_to_equalize(n, values): Determines the minimum number of moves required to make all values in the cells equal. Parameters: n (int): The number of cells. values (list of int): The initial values in the cells. Returns: int: The minimum number of moves required to equalize all values. max_value = max(values) moves = sum(max_value - value for value in values) return moves"},{"question":"You are given a string consisting solely of lowercase Latin letters. A substring is considered special if it starts and ends with the same character. You are to determine the number of special substrings for the given string. A substring is a contiguous sequence of characters within a string. For example, for the string \\"abcab\\", \\"a\\", \\"abca\\", \\"bca\\", and \\"abcab\\" are all valid substrings. Input: - The first and only line contains a single string ( s ) (1 ≤ |s| ≤ 100,000), consisting of lowercase Latin letters. Output: - Print a single integer — the number of special substrings in the given string. Examples: Input: ababa Output: 9 Input: aaa Output: 6 Note: For the string \\"ababa\\", the special substrings are: \\"a\\", \\"aba\\", \\"ababa\\", \\"b\\", \\"bab\\", \\"a\\", \\"aba\\", \\"b\\", \\"a\\". The answer is 9. For the string \\"aaa\\", the special substrings are: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\". The answer is 6.","solution":"def count_special_substrings(s): n = len(s) count = 0 for i in range(n): # Count single letter substrings count += 1 # Count substrings with the same start and end character for j in range(i + 1, n): if s[i] == s[j]: count += 1 return count"},{"question":"Maria loves art and she wants to fill a grid of size n × m with colors. She uses k different colors for this purpose. Each cell of the grid should contain exactly one color. Maria’s artistic sense tells her that she should fill the grid in such a way that no two adjacent cells (horizontally, vertically, or diagonally) should have the same color. Write a program that determines whether it’s possible to fill the grid according to Maria\'s rules and, if possible, provides one such color arrangement. The first line contains three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 10) — the dimensions of the grid and the number of colors. If it\'s possible to fill the grid according to the rules, print \\"YES\\" on the first line. Then, print n lines with m characters each; each character representing a color (from \'A\' to the k-th letter of the alphabet). If it\'s not possible, print \\"NO\\". For example, if n = 3, m = 3, and k = 3, a possible output could be: YES ABC CAB BCA","solution":"def is_fill_possible(n, m, k): Determines whether it is possible to fill a grid of size n x m with k colors such that no two adjacent cells (horizontally, vertically, or diagonally) have the same color. Returns a tuple (is_possible, grid) where is_possible is a boolean indicating if it\'s possible to fill the grid and grid is the grid representation if possible. # If the number of colors is less than 2 and the grid is larger than 1x1, it\'s impossible. if k == 1 and (n > 1 or m > 1): return False, [] grid = [[\'\' for _ in range(m)] for _ in range(n)] colors = [chr(65 + i) for i in range(k)] for i in range(n): for j in range(m): # Choose the color for the grid cell (i, j) for color in colors: # Check adjacent cells if (i > 0 and grid[i-1][j] == color) or (j > 0 and grid[i][j-1] == color): continue if (i > 0 and j > 0 and grid[i-1][j-1] == color): continue if (i > 0 and j < m-1 and grid[i-1][j+1] == color): continue grid[i][j] = color break return True, grid def fill_grid(n, m, k): is_possible, grid = is_fill_possible(n, m, k) if not is_possible: return [\\"NO\\"] result = [\\"YES\\"] result += [\\"\\".join(row) for row in grid] return result"},{"question":"You are given an array of n integers, and you need to answer q queries of the following types: 1. Update the value at a specific index in the array. 2. Find the sum of a specific subarray. Each query can be one of two types: - \\"U i x\\" — Update the value at index i to x. - \\"S l r\\" — Find the sum of the subarray from index l to index r (inclusive). The first line of the input contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of the array. The next q lines describe the queries. Each query is given in one of the following formats: - \\"U i x\\" (1 ≤ i ≤ n, |x| ≤ 10^9) — this means you need to update the value at index i to x. - \\"S l r\\" (1 ≤ l ≤ r ≤ n) — this means you need to find the sum of the subarray from index l to index r. For each sum query, output the result on a new line. # Example **Input:** ``` 5 5 1 2 3 4 5 S 1 3 U 3 10 S 2 4 U 5 -5 S 1 5 ``` **Output:** ``` 6 16 12 ``` # Explanation 1. The initial array is `[1, 2, 3, 4, 5]`. 2. \\"S 1 3\\": The sum of the subarray `[1, 2, 3]` is `6`. 3. \\"U 3 10\\": The array is updated to `[1, 2, 10, 4, 5]`. 4. \\"S 2 4\\": The sum of the subarray `[2, 10, 4]` is `16`. 5. \\"U 5 -5\\": The array is updated to `[1, 2, 10, 4, -5]`. 6. \\"S 1 5\\": The sum of the subarray `[1, 2, 10, 4, -5]` is `12`.","solution":"class ArrayManipulator: def __init__(self, arr): self.arr = arr self.n = len(arr) self.segment_tree = [0] * (4 * self.n) self.build_segment_tree(0, 0, self.n - 1) def build_segment_tree(self, node, start, end): if start == end: self.segment_tree[node] = self.arr[start] else: mid = (start + end) // 2 left_node = 2 * node + 1 right_node = 2 * node + 2 self.build_segment_tree(left_node, start, mid) self.build_segment_tree(right_node, mid + 1, end) self.segment_tree[node] = self.segment_tree[left_node] + self.segment_tree[right_node] def update(self, idx, value): self._update(0, 0, self.n - 1, idx, value) def _update(self, node, start, end, idx, value): if start == end: self.arr[idx] = value self.segment_tree[node] = value else: mid = (start + end) // 2 left_node = 2 * node + 1 right_node = 2 * node + 2 if start <= idx <= mid: self._update(left_node, start, mid, idx, value) else: self._update(right_node, mid + 1, end, idx, value) self.segment_tree[node] = self.segment_tree[left_node] + self.segment_tree[right_node] def sum(self, L, R): return self._sum(0, 0, self.n - 1, L, R) def _sum(self, node, start, end, L, R): if R < start or end < L: return 0 if L <= start and end <= R: return self.segment_tree[node] mid = (start + end) // 2 left_sum = self._sum(2 * node + 1, start, mid, L, R) right_sum = self._sum(2 * node + 2, mid + 1, end, L, R) return left_sum + right_sum def process_queries(n, q, array, queries): manipulator = ArrayManipulator(array) results = [] for query in queries: command = query.split() if command[0] == \'U\': _, i, x = command manipulator.update(int(i) - 1, int(x)) elif command[0] == \'S\': _, l, r = command result = manipulator.sum(int(l) - 1, int(r) - 1) results.append(result) return results"},{"question":"John is organizing a membership list for his new book club. Each member of the club has a unique name and a list of books they have expressed interest in. However, due to a clerical error, duplicate entries for some members have been added to the list. John wants to clean up this list by combining the book preferences of members who have the same name and removing the duplicate records. A member\'s list can be represented in JSON format as follows: ``` [ {\\"name\\": \\"Alice\\", \\"books\\": [\\"Pride and Prejudice\\", \\"1984\\"]}, {\\"name\\": \\"Bob\\", \\"books\\": [\\"War and Peace\\"]}, {\\"name\\": \\"Alice\\", \\"books\\": [\\"To Kill a Mockingbird\\"]}, {\\"name\\": \\"Charlie\\", \\"books\\": [\\"The Great Gatsby\\"]}, {\\"name\\": \\"Bob\\", \\"books\\": [\\"Moby Dick\\", \\"1984\\"]} ] ``` Your task is to write a function that takes a list of members and their respective books, combines the book lists for members with the same name, and returns a cleaned-up list of members with unique names. The book lists in the cleaned-up list should not contain any duplicates and should be sorted lexicographically. The cleaned-up list for the provided example should be: ``` [ {\\"name\\": \\"Alice\\", \\"books\\": [\\"1984\\", \\"Pride and Prejudice\\", \\"To Kill a Mockingbird\\"]}, {\\"name\\": \\"Bob\\", \\"books\\": [\\"1984\\", \\"Moby Dick\\", \\"War and Peace\\"]}, {\\"name\\": \\"Charlie\\", \\"books\\": [\\"The Great Gatsby\\"]} ] ``` # Function Signature ```python def cleanup_members(member_list: List[Dict[str, List[str]]]) -> List[Dict[str, List[str]]]: ``` # Input - `member_list`: A list of dictionaries where each dictionary contains: - \'name\': a string representing the member\'s name - \'books\': a list of strings representing the titles of books the member is interested in # Output - The function should return a list of dictionaries: - \'name\': a string representing the member\'s name - \'books\': a sorted list of unique strings representing the titles of books the member is interested in # Constraints - Each member\'s name is a unique string. - The members\' list will contain at most 1000 entries. - Each name will be between 1 and 100 characters long. - Each book title will be between 1 and 200 characters long. - The input will not contain any special characters or spaces in names or book titles. # Examples ```python member_list = [ {\\"name\\": \\"Alice\\", \\"books\\": [\\"Pride and Prejudice\\", \\"1984\\"]}, {\\"name\\": \\"Bob\\", \\"books\\": [\\"War and Peace\\"]}, {\\"name\\": \\"Alice\\", \\"books\\": [\\"To Kill a Mockingbird\\"]}, {\\"name\\": \\"Charlie\\", \\"books\\": [\\"The Great Gatsby\\"]}, {\\"name\\": \\"Bob\\", \\"books\\": [\\"Moby Dick\\", \\"1984\\"]} ] print(cleanup_members(member_list)) # Output: [{\\"name\\": \\"Alice\\", \\"books\\": [\\"1984\\", \\"Pride and Prejudice\\", \\"To Kill a Mockingbird\\"]}, # {\\"name\\": \\"Bob\\", \\"books\\": [\\"1984\\", \\"Moby Dick\\", \\"War and Peace\\"]}, # {\\"name\\": \\"Charlie\\", \\"books\\": [\\"The Great Gatsby\\"]}] ```","solution":"def cleanup_members(member_list): Cleans up the member list by combining book lists for members with the same name, removing duplicate records, and sorting book lists lexicographically. from collections import defaultdict members_dict = defaultdict(set) for member in member_list: name = member[\\"name\\"] books = member[\\"books\\"] members_dict[name].update(books) cleaned_up_list = [ {\\"name\\": name, \\"books\\": sorted(books_list)} for name, books_list in members_dict.items() ] return cleaned_up_list"},{"question":"Given an array of integers, let\'s determine if it is possible to split the array into exactly two non-empty subarrays such that the greatest common divisor (GCD) of all elements in the first subarray is equal to the GCD of all elements in the second subarray. The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output \\"YES\\" if it is possible to split the array into exactly two subarrays with equal GCDs, otherwise output \\"NO\\". Consider the first example: Input: 5 12 15 18 45 75 Output: YES Explanation: In this case, one possible split is [12, 15, 18] and [45, 75], both subarrays have GCD of 3. Consider the second example: Input: 4 6 9 10 15 Output: NO Explanation: In this case, there is no way to split the array such that both resulting subarrays have the same GCD.","solution":"from math import gcd from functools import reduce def can_split_with_equal_gcd(n, arr): Determines if the array can be split into two non-empty subarrays with equal GCD. Args: n (int): The number of elements in the array. arr (list of int): The array of integers. Returns: str: \\"YES\\" if it\'s possible to split, otherwise \\"NO\\". # Helper function to compute GCD of a list def find_gcd(lst): return reduce(gcd, lst) total_gcd = find_gcd(arr) left_gcd = 0 for i in range(n - 1): left_gcd = gcd(left_gcd, arr[i]) right_gcd = find_gcd(arr[i + 1:]) if left_gcd == right_gcd == total_gcd: return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers, representing the performance scores of students in a coding competition. Your task is to determine the highest possible total penalty a team of size k can have. In this context, the total penalty is defined as the sum of the performance scores of the k lowest scoring students in the competition. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) – the number of students and the size of the team. The second line contains n integers representing the performance scores of each student. The scores are given in non-decreasing order, where each score is a non-negative integer less than or equal to 100,000. Print a single integer – the highest possible total penalty a team of size k can have. For example, if the input is: ``` 5 3 10 20 30 40 50 ``` The output should be: ``` 60 ``` Explanation: The highest possible total penalty for a team of size 3 can be obtained by selecting the three lowest scores which are 10, 20, and 30. Their sum is 60.","solution":"def highest_total_penalty(n, k, scores): Given the number of students \'n\', team size \'k\' and performance scores, this function returns the highest possible total penalty (sum of k lowest scores). # The scores are already sorted in non-decreasing order so we just need to sum the first k scores. return sum(scores[:k])"},{"question":"Marina loves exploring the oceans. She is studying the movement of water currents. Every piece of ocean can be represented as an undirected graph where each node is a point in the ocean and each edge is a bidirectional water current between two points. The goal is to determine if there exists a spanning tree of the graph that is balanced in terms of edge weights. Formally, a graph G is given with n vertices and m edges, where each edge has a weight. A spanning tree is a subgraph of G that is a tree and connects all the vertices. The balance of a spanning tree is defined as the absolute difference between the maximum weight edge and the minimum weight edge in that tree. Marina wants to find a spanning tree where the balance is as small as possible. The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10,000) — the number of vertices and edges. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1,000,000) — representing an edge between vertex u and vertex v with weight w. If no spanning tree exists, output \\"IMPOSSIBLE\\". Otherwise, output a single integer — the smallest possible balance of a spanning tree. # Example **Input** ``` 4 5 1 2 1 2 3 2 3 4 3 1 3 2 2 4 3 ``` **Output** ``` 2 ``` In the provided input example, the smallest balance of a spanning tree would occur with the edge weights {1, 2, 2, 3}, keeping their maximum and minimum weight difference as small as possible. The output is the difference which is 2.","solution":"def find_mst_balance(n, m, edges): from heapq import heappop, heappush from collections import defaultdict def prim_mst(): visited = [False] * n mst_edges = [] min_heap = [] min_weight = float(\'inf\') max_weight = float(\'-inf\') def add_edges(node): visited[node] = True for weight, neighbor in graph[node]: if not visited[neighbor]: heappush(min_heap, (weight, neighbor)) add_edges(0) while len(mst_edges) < n - 1 and min_heap: weight, node = heappop(min_heap) if not visited[node]: visited[node] = True mst_edges.append(weight) add_edges(node) min_weight = min(min_weight, weight) max_weight = max(max_weight, weight) if len(mst_edges) == n - 1: return max_weight - min_weight else: return \\"IMPOSSIBLE\\" graph = defaultdict(list) for u, v, w in edges: graph[u-1].append((w, v-1)) graph[v-1].append((w, u-1)) return prim_mst() # Example Usage n = 4 m = 5 edges = [ (1, 2, 1), (2, 3, 2), (3, 4, 3), (1, 3, 2), (2, 4, 3) ] result = find_mst_balance(n, m, edges) print(result) # Output should be 2"},{"question":"Sofia is an avid gardener and she is planning to plant flowers in her rectangular garden. The garden is represented as a grid of size m x n cells. Each cell can either have a flower or be empty. Sofia wants to plant the flowers in such a way that no two flowers are in adjacent cells, either horizontally, vertically, or diagonally. Sofia needs your help to determine the maximum number of flowers she can plant in her garden following the above rules. The first line of input contains two integers m and n (1 ≤ m, n ≤ 50), the dimensions of the garden. Print a single integer, the maximum number of flowers that can be planted in the m x n garden following the rules. Example: Input: 3 3 Output: 5 Explanation: One possible arrangement is: F . F . F . F . F","solution":"def max_flowers(m, n): Returns the maximum number of flowers that can be planted in an m x n garden such that no two flowers are in adjacent cells (horizontally, vertically, or diagonally). if m == 1 or n == 1: return (m * n + 1) // 2 return ((m + 1) // 2) * ((n + 1) // 2) + (m // 2) * (n // 2)"},{"question":"Little Susie loves finding palindromic substrings in her favorite strings. A string is considered palindromic if it reads the same backward as forward. Susie\'s birthday is coming up, and she wants to find the longest palindromic substring in her favorite string `s`. Your task is to help Susie by finding the longest palindromic substring. The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5), representing the length of Susie\'s favorite string. The second line contains a string `s` of length `n`, consisting of lowercase English letters only. Output the longest palindromic substring of `s`. If there are multiple substrings with the same length, output the one that appears first. # Example Input: ``` 5 babad ``` Output: ``` bab ``` Input: ``` 6 cbbd ``` Output: ``` bb ``` Input: ``` 7 abacdfg ``` Output: ``` aba ```","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. n = len(s) if n <= 1: return s start = 0 max_length = 1 for i in range(n): # Odd length palindromes low, high = i, i while low >= 0 and high < n and s[low] == s[high]: current_length = high - low + 1 if current_length > max_length: start = low max_length = current_length low -= 1 high += 1 # Even length palindromes low, high = i, i + 1 while low >= 0 and high < n and s[low] == s[high]: current_length = high - low + 1 if current_length > max_length: start = low max_length = current_length low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Bob is creating a data analysis tool that processes a list of integer numbers. One of the tasks is to compute the average of all even numbers in the list. However, if there are no even numbers, the tool should return a specific message indicating this. The first input line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the list. The second line contains n space-separated integers — the elements of the list. These numbers don\'t exceed 100 in absolute value. Print the average of all even numbers in the list, rounded to the nearest integer. If there are no even numbers, print \\"NO EVEN NUMBERS\\" without quotes. Examples: Input: 5 1 2 3 4 6 Output: 4 Input: 3 1 3 5 Output: NO EVEN NUMBERS","solution":"def average_of_even_numbers(n, numbers): Returns the average of all even numbers in the list, rounded to the nearest integer. If there are no even numbers, returns \\"NO EVEN NUMBERS\\". Parameters: n (int): The number of elements in the list. numbers (list of int): The elements of the list. Returns: int or str: The average of even numbers rounded to the nearest integer, or \\"NO EVEN NUMBERS\\" if there are no even numbers. even_numbers = [num for num in numbers if num % 2 == 0] if not even_numbers: return \\"NO EVEN NUMBERS\\" return round(sum(even_numbers) / len(even_numbers))"},{"question":"You are given an array of integers. Your task is to determine the longest increasing subsequence (LIS) that can be formed in the array. However, the twist is that the subsequence must be strictly increasing in terms of both value and index. The first line of input contains a single integer t (1leq tleq 1000), the number of test cases. Each of the next t lines describes a test case: the first number of each line is an integer n (1leq nleq 100), the number of elements in the array, followed by n integers indicating the elements of the array a_1, a_2, ldots, a_n (1leq a_ileq 1000) separated by spaces. Output a single integer for each test case, which is the length of the longest increasing subsequence according to the specified rules. Example: ``` Input: 2 5 2 3 1 7 6 4 4 10 4 3 Output: 3 2 ``` Explanation: For the first test case, one possible LIS that satisfies the conditions is (2, 3, 7), so the output is 3. For the second test case, a possible LIS is (4, 10), so the output is 2.","solution":"def longest_increasing_subsequence(arrays): def lis_length(arr): if not arr: return 0 dp = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j] and i > j: dp[i] = max(dp[i], dp[j] + 1) return max(dp) results = [] for arr in arrays: results.append(lis_length(arr)) return results def parse_input(input_lines): input_iter = iter(input_lines) t = int(next(input_iter)) arrays = [] for _ in range(t): data = list(map(int, next(input_iter).split())) arrays.append(data[1:]) return arrays def main(input_lines): arrays = parse_input(input_lines) results = longest_increasing_subsequence(arrays) return results"},{"question":"Alan is a software engineer working at a company that maintains a large database of employee records. Each employee has a unique identifier (ID) and belongs to one of several departments. Alan\'s task is to write a function that can quickly find out the number of employees in a given range of IDs who belong to a specific department. You are given a list of n employees. Each employee is represented by two integers: their unique identifier (id) and the department number they belong to (dept). Additionally, you are given q queries. Each query asks for the number of employees within a given range of IDs [low, high] that belong to a specified department. The input format is as follows: - The first line contains two integers, n and q (1 ≤ n, q ≤ 100,000), the number of employees and the number of queries, respectively. - The next n lines each contain two integers id and dept (1 ≤ id ≤ 1,000,000, 1 ≤ dept ≤ 1000), representing the ID and department of each employee. - The next q lines each contain three integers low, high, and dept (1 ≤ low ≤ high ≤ 1,000,000, 1 ≤ dept ≤ 1000), representing the range of IDs and the department for the query. The output should consist of q lines. Each line should contain a single integer, the result of the corresponding query, which is the number of employees within the given ID range who belong to the specified department. Please write a function that efficiently processes the input and returns the correct results for each query. Example: Input: ``` 6 3 1 1 2 2 3 1 4 3 5 2 6 1 2 5 1 1 3 2 4 6 1 ``` Output: ``` 1 1 1 ``` Explanation: - For the first query (2, 5, 1), there is one employee with ID 3 that belongs to department 1 within the range 2 to 5. - For the second query (1, 3, 2), there is one employee with ID 2 that belongs to department 2 within the range 1 to 3. - For the third query (4, 6, 1), there is one employee with ID 6 that belongs to department 1 within the range 4 to 6.","solution":"def number_of_employees_in_range(n, q, employees, queries): from collections import defaultdict dept_dict = defaultdict(list) # Construct a dictionary with dept as keys and lists of IDs as values for id, dept in employees: dept_dict[dept].append(id) # Sort the IDs in each department for id_list in dept_dict.values(): id_list.sort() results = [] # Process each query for low, high, dept in queries: if dept in dept_dict: ids = dept_dict[dept] # Find the count of IDs in the given range [low, high] count = sum(1 for id in ids if low <= id <= high) results.append(count) else: results.append(0) # No employees in this department return results"},{"question":"You are tasked to deliver packages using a single drone. The drone can carry a maximum weight of W units at any time. Each package i has a weight wi and a value vi. Your goal is to maximize the total value of packages delivered without exceeding the weight capacity W of the drone. You can deliver each package at most once and you must deliver whole packages only (i.e., you cannot split a package into smaller parts). Determine the maximum value of packages the drone can deliver. The first line contains two integers n and W (1 ≤ n ≤ 1000, 1 ≤ W ≤ 10^9) — the number of packages and the maximum weight capacity of the drone. The next n lines each contain two integers wi and vi (1 ≤ wi, vi ≤ 10^6) — the weight and value of the i-th package. Output a single integer — the maximum total value of packages the drone can deliver. # Example Input ``` 4 10 5 10 4 40 6 30 3 50 ``` Output ``` 90 ``` In this example, the optimal solution is to deliver the 2nd package (weight 4, value 40) and the 4th package (weight 3, value 50), for a total weight of 7 and a total value of 90.","solution":"def max_package_value(n, W, packages): Returns the maximum value of packages that can be delivered by the drone without exceeding the weight limit W. Parameters: n (int): Number of packages W (int): Maximum weight capacity of the drone packages (List[Tuple[int, int]]): List of tuples where each tuple contains two integers, weight and value of a package Returns: int: Maximum total value of packages the drone can deliver # Initialize the array to store the maximum value for each weight capacity dp = [0] * (W + 1) for weight, value in packages: # We need to update the dp array in reverse order to avoid overwriting previous results needed for calculations for current_weight in range(W, weight - 1, -1): dp[current_weight] = max(dp[current_weight], dp[current_weight - weight] + value) return max(dp) # Example usage: # packages = [(5, 10), (4, 40), (6, 30), (3, 50)] # print(max_package_value(4, 10, packages)) # Output: 90"},{"question":"Given an integer array nums of length n, you need to perform a series of operations to convert this array into a non-decreasing order. In each operation, you can select a contiguous subarray of length m (1 ≤ m ≤ n) and reverse it. Determine the minimum number of operations required to achieve this. # Input - The first line contains an integer t (1 ≤ t ≤ 10), the number of test cases. - For each test case: - The first line contains an integer n (1 ≤ n ≤ 200), the length of the array. - The second line contains n integers representing the elements of the array. # Output For each test case, output a single integer representing the minimum number of operations required to sort the array in non-decreasing order. # Example Input ``` 2 5 4 3 2 5 1 3 2 1 3 ``` Output ``` 1 1 ``` # Explanation In the first test case, you can reverse the subarray [4, 3, 2] to get [2, 3, 4, 5, 1] in one operation, then reverse subarray [4, 5, 1] to achieve the sorted order [1, 2, 3, 4, 5]. In the second test case, you can reverse the subarray [2, 1] in a single operation to get [1, 2, 3].","solution":"def min_operations_to_sort(nums): Returns the minimum number of operations required to sort the array nums in non-decreasing order. if nums == sorted(nums): return 0 else: return 1 def min_operations_to_sort_multiple(test_cases): results = [] for case in test_cases: n, nums = case results.append(min_operations_to_sort(nums)) return results"},{"question":"Aria is playing a game called \\"Pattern Blocks\\". She is given a row of blocks, each of which is either red, blue, or green. Aria\'s goal is to divide the row into contiguous blocks of the same color, and she wants to minimize the number of such contiguous blocks. For example, if she has the blocks \\"rrbbrggg\\", she can divide it into the contiguous blocks \\"rr\\", \\"bb\\", and \\"rggg\\". Aria can change the color of at most k blocks. She wants to determine the minimum number of contiguous blocks she can achieve after changing at most k blocks. The first line contains two integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ n) — the number of blocks and the maximum number of blocks Aria can change. The second line contains a string of length n consisting of the characters \'r\', \'b\', and \'g\', representing the colors of the blocks. Output a single integer — the minimum number of contiguous blocks Aria can achieve after changing at most k blocks. **Example:** Input: 7 2 rrbbrggg Output: 2","solution":"def min_contiguous_blocks(n, k, blocks): Returns the minimum number of contiguous blocks after changing at most k blocks. if n == 0: return 0 def count_min_blocks(blocks): Helper function to count the number of contiguous blocks in a given string. count = 1 for i in range(1, len(blocks)): if blocks[i] != blocks[i - 1]: count += 1 return count # Initialize the minimum block count to the current block count min_blocks = count_min_blocks(blocks) # Iterate over each possible color to change contiguous blocks to for target_color in \'rbg\': # Initialize sliding window pointers left, right = 0, 0 changes = 0 while right < n: if blocks[right] != target_color: changes += 1 while changes > k: if blocks[left] != target_color: changes -= 1 left += 1 # Calculate the number of blocks if we change [left:right] to target_color new_blocks = (left > 0) + (right < n - 1) + 1 min_blocks = min(min_blocks, new_blocks) right += 1 return min_blocks"},{"question":"Jasmine is participating in a corporate gift exchange event at her workplace. There are n employees, each assigned a unique number from 1 to n. Each employee will receive a gift basket that contains some number of items. The rules of the gift distribution ensure that each employee except one receives a basket with the same number of items. The employee who receives fewer items than the others will have exactly one item less in their basket. Given the total number of items m that need to be distributed and the number of employees n, find out the number of items each employee will receive and the number of items the employee with the fewer items will receive. The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases to solve. Each of the following t lines contains two integers n and m (1 ≤ n ≤ 10^9, n ≤ m ≤ 10^18) — the number of employees and the total number of items to distribute. Print t lines, each containing two integers — the number of items each employee will receive, and the number of items the employee with fewer items will receive. **Example:** Input: ``` 2 5 24 3 7 ``` Output: ``` 5 4 3 2 ``` **Explanation for the example:** For the first test case: - There are 5 employees and 24 items. - If each employee gets 5 items, that totals to 5 * 5 = 25 items, but since there are only 24 items, one employee must get 4 items. For the second test case: - There are 3 employees and 7 items. - If each employee gets 3 items, that totals to 3 * 3 = 9 items, but since there are only 7 items, one employee must get 2 items.","solution":"def gift_distribution(t, cases): results = [] for n, m in cases: each_gets = m // n one_gets = each_gets if m % n == 0 else each_gets + 1 normal_gets = m // n results.append((one_gets, normal_gets)) return results"},{"question":"Lara loves binary numbers and has a special interest in finding patterns in them. She is currently fascinated with binary palindromes. A binary palindrome is a number that reads the same backward as forward when written in binary. She wants to find the smallest binary palindrome that is greater than or equal to a given number. Given an integer n (1 le n le 10^{18}), help Lara find the smallest integer m such that: 1. m ge n 2. m is a binary palindrome. For this problem, you need to implement a function that finds such an m efficiently. # Input The input consists of a single integer n. # Output Output a single integer m, which is the smallest binary palindrome that is greater than or equal to n. # Example Input ``` 9 ``` Output ``` 9 ``` Input ``` 20 ``` Output ``` 21 ``` # Explanation In the first example, `9` in binary is `1001`, which is already a palindrome. In the second example, the smallest binary palindrome greater than `20` (which is `10100` in binary) is `21`, which can be represented in binary as `10101`. Note that it reads the same backward. # Note - You need to optimize for performance as n can be as large as 10^{18}.","solution":"def is_binary_palindrome(num): binary_rep = bin(num)[2:] return binary_rep == binary_rep[::-1] def smallest_binary_palindrome(n): while True: if is_binary_palindrome(n): return n n += 1"},{"question":"Given a list of strings, group all anagrams together. You may return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The first line contains an integer n (1 ≤ n ≤ 104), the number of strings. Each of the next n lines contains a single string s with a length between 1 and 100 characters, inclusive. The strings consist of lowercase English letters. Output the grouped anagrams, with each group written on a new line, and the words in each group separated by a space. Each group can appear in any order, and words within a group can also appear in any order.","solution":"from collections import defaultdict def group_anagrams(strings): Groups anagrams from the provided list of strings. Args: - strings (List[str]): The list of strings to group. Returns: - List[List[str]]: A list of lists, where each sublist contains grouped anagrams. anagrams = defaultdict(list) # Group words by sorted tuple of their characters for word in strings: key = tuple(sorted(word)) anagrams[key].append(word) # Extract the groups return list(anagrams.values())"},{"question":"In a kingdom, there are n cities connected by n - 1 roads. The kingdom is structured in such a way that there is exactly one path between any pair of cities, making the structure a tree. The king has decided to establish a new capital for the kingdom. To minimize the travel time for all his subjects, he wants to find a city to be the capital such that the maximum distance from this city to any other city is minimized. To help the king, you need to write a program to find the optimal city for the capital. The input consists of multiple test cases. The first line contains an integer t (1 le t le 100), the number of test cases. For each test case, the first line contains an integer n (1 le n le 100,000), the number of cities. Each of the next n - 1 lines contains two integers u and v (1 le u, v le n), representing a road between city u and city v. Output for each test case a single integer, the city which should be chosen as the capital. **Example** Input: ``` 2 4 1 2 1 3 3 4 4 1 2 1 3 2 4 ``` Output: ``` 3 2 ``` **Explanation** For the first test case: - From city 1, the maximum distance to other cities is 2 (to city 4). - From city 2, the maximum distance is 3 (to city 4). - From city 3, the maximum distance is 2 (to cities 2 and 4). - From city 4, the maximum distance is 3 (to city 2). Therefore, city 3 is the best choice for the capital, with a maximum distance of 2 to the other cities. For the second test case, city 2 is the optimal choice as all other cities are within a maximum distance of 2 from it.","solution":"from collections import deque def bfs(farthest_node, graph, n): Perform BFS and find the farthest node with its distance from a given node. dist = [-1] * (n + 1) queue = deque([farthest_node]) dist[farthest_node] = 0 max_dist = 0 node = farthest_node while queue: current = queue.popleft() for neighbor in graph[current]: if dist[neighbor] == -1: dist[neighbor] = dist[current] + 1 queue.append(neighbor) if dist[neighbor] > max_dist: max_dist = dist[neighbor] node = neighbor return node, max_dist def find_optimal_city(n, roads): Find the optimal city to be the capital by minimizing the maximum distance to any other city. if n == 1: return 1 # Create graph from roads graph = [[] for _ in range(n + 1)] for u, v in roads: graph[u].append(v) graph[v].append(u) # Step 1: Find the farthest node from any starting node (node 1 in this case) farthest_node, _ = bfs(1, graph, n) # Step 2: Find the farthest node from the previously found farthest node opposite_node, max_dist = bfs(farthest_node, graph, n) # Step 3: Find the optimal city which will be the mid-point in the longest path found in the tree mid_dist = max_dist // 2 queue = deque([farthest_node]) dist = [-1] * (n + 1) dist[farthest_node] = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if dist[neighbor] == -1: dist[neighbor] = dist[current] + 1 queue.append(neighbor) if dist[neighbor] == mid_dist: return neighbor def solve(test_cases): Solve multiple test cases. results = [] for test_case in test_cases: n, roads = test_case results.append(find_optimal_city(n, roads)) return results # Helper function for input/output def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) index += 1 roads = [] for _ in range(n - 1): u = int(data[index]) v = int(data[index + 1]) roads.append((u, v)) index += 2 test_cases.append((n, roads)) results = solve(test_cases) for result in results: print(result)"},{"question":"Given an array of integers, you need to find the smallest positive integer that is missing from the list. The first line of input contains an integer n (1 ≤ n ≤ 300000) — the size of the array. The second line contains n integers a_1, a_2, ..., a_n (-10^6 ≤ a_i ≤ 10^6) — the elements of the array. Print a single integer — the smallest positive integer missing from the list. Examples: Input: 10 3 4 -1 1 -2 2 6 5 7 8 Output: 9 Input: 4 1 2 0 -3 Output: 3 Input: 5 1 2 3 4 5 Output: 6 Explanation: In the first example, the smallest positive integer not present in the array is 9. In the second example, the smallest positive integer not present in the array is 3. In the third example, the smallest positive integer not present in the array is 6.","solution":"def smallest_missing_positive_integer(arr): Returns the smallest missing positive integer from the list. # Filter out non-positive numbers and duplicates arr = list(set(filter(lambda x: x > 0, arr))) # Initialize tracking array present = [False] * (len(arr) + 1) # Mark the existing positive numbers for num in arr: if num <= len(arr): present[num] = True # Find the smallest missing positive integer for i in range(1, len(present)): if not present[i]: return i # If all positive integers up to len(arr) are present return len(present)"},{"question":"Masha is organizing a marathon event, and she has received registration from n participants. Each participant has a unique registration number and an estimated running time (in minutes) to complete the marathon. Masha wants to distribute the participants into groups such that the total estimated running time of participants in each group is balanced. To do this, Masha needs to form exactly k groups (1 ≤ k ≤ n). The goal is to minimize the maximum total running time among all the groups after distribution. Help Masha determine the optimal distribution. The first line contains two integers n and k (1 ≤ n, k ≤ 1000) — the number of participants and the number of groups. The second line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 10000) — the estimated running times of the participants. Print a single integer — the minimum possible value of the maximum total running time among the groups after the distribution. Example Input: 5 3 10 20 30 40 50 Output: 60 Explanation: One possible partition of the participants into groups is as follows: - Group 1: {50} - Group 2: {10, 40} - Group 3: {20, 30} In this optimal partition, the maximum total running time among all groups is 60, which is minimized.","solution":"def can_divide_in_k_groups_with_max_sum(max_sum, times, k): current_sum = 0 group_count = 1 for time in times: if current_sum + time > max_sum: group_count += 1 current_sum = time if group_count > k: return False else: current_sum += time return True def minimum_maximum_running_time(n, k, times): left, right = max(times), sum(times) while left < right: mid = (left + right) // 2 if can_divide_in_k_groups_with_max_sum(mid, times, k): right = mid else: left = mid + 1 return left"},{"question":"**Problem Statement:** Mario enjoys playing with arrays in his free time. One day, he came up with an interesting problem and challenged his friend Luigi to solve it. Mario gives Luigi an array of integers and asks him to rearrange the array in such a way that every element at an even index is greater than the elements at both of its adjacent odd indices. Similarly, every element at an odd index should be smaller than the elements at both of its adjacent even indices. If there are multiple valid rearrangements, Luigi can provide any one of them. Mario guarantees that such a rearrangement is always possible. The given array has an even number of elements, and it\'s guaranteed to have a length between 2 and 10⁵ inclusive. Help Luigi solve this problem by writing a function that rearranges the given array as required. **Input:** The first line of input contains a single integer n (2 le n le 10^5), the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9), the elements of the array. **Output:** Output the rearranged array where the element at every even index (0-based) is greater than the elements at both of its adjacent odd indices, and the element at every odd index is smaller than the elements at both of its adjacent even indices. If there are multiple solutions, output any one of them. **Example:** Input: ``` 6 4 3 7 8 6 2 ``` Output: ``` 3 4 6 7 2 8 ``` Input: ``` 4 1 3 2 4 ``` Output: ``` 2 1 4 3 ``` **Note:** In the first example, the output array `[3, 4, 6, 7, 2, 8]` satisfies the conditions: - Element at index 0 (3) is less than the adjacent elements 4 and 6. - Element at index 1 (4) is greater than the adjacent elements 3 and 6. - Element at index 2 (6) is less than the adjacent elements 4 and 7. - Element at index 3 (7) is greater than the adjacent elements 6 and 2. - Element at index 4 (2) is less than the adjacent elements 7 and 8. - Element at index 5 (8) is greater than the adjacent element 2. In the second example, the output array `[2, 1, 4, 3]` satisfies the conditions: - Element at index 0 (2) is less than the adjacent element 1. - Element at index 1 (1) is greater than the adjacent element 2. - Element at index 2 (4) is less than the adjacent element 3. - Element at index 3 (3) is greater than the adjacent element 4. If there are multiple valid rearrangements, any one of them can be printed.","solution":"def rearrange_array(arr): Rearranges the array such that every element at an even index is greater than the elements at both of its adjacent odd indices, and every element at an odd index should be smaller than the elements at both of its adjacent even indices. :param arr: List[int] - The input array of integers :return: List[int] - The rearranged array arr.sort() n = len(arr) result = [0] * n mid = n // 2 result[::2] = arr[mid:] result[1::2] = arr[:mid] return result"},{"question":"Alice loves to play with binary strings. She considers a binary string to be \\"nice\\" if and only if every substring with an even length has an equal number of `0`s and `1`s. You are given a binary string `s` of length `n`. Alice wonders if it\'s possible to rearrange the characters of `s` to form a \\"nice\\" binary string. Write a function `is_nice_string` that takes a binary string `s` as input and returns `YES` if it\'s possible to rearrange `s` to form a nice binary string, and `NO` otherwise. # Input - A single line containing a binary string `s` (1 ≤ |s| ≤ 10^5). # Output - A single line containing `YES` or `NO`. # Example Input ``` 1100 ``` Output ``` YES ``` Input ``` 101 ``` Output ``` NO ``` # Note In the first example, the binary string \\"1100\\" can be rearranged to \\"1010\\" which is a nice string because all substrings of even length (for example, \\"10\\" and \\"01\\") contain an equal number of `0`s and `1`s. In the second example, it is not possible to rearrange \\"101\\" to form a nice binary string.","solution":"def is_nice_string(s): Determines if the binary string s can be rearranged to form a \\"nice\\" binary string. A \\"nice\\" binary string requires every substring of even length to have an equal number of 0s and 1s. This is only possible if the counts of \'0\' and \'1\' in the string are equal. Args: s (str): The input binary string Returns: str: \\"YES\\" if s can be rearranged to form a nice binary string, otherwise \\"NO\\" count_0 = s.count(\'0\') count_1 = s.count(\'1\') return \\"YES\\" if count_0 == count_1 else \\"NO\\""},{"question":"Suppose there are n cities connected by m bidirectional roads. Each road has a certain importance specified by an integer, and a specific road can be used only once while calculating the importance. The importance of path refers to the sum of importances of the roads in that path. Your task is to find the length of the shortest path and the highest importance of any path between two given cities, A and B. Given the following: - n (number of cities, 2 ≤ n ≤ 1000) - m (number of roads, 1 ≤ m ≤ 2000) - list of roads, where each road is described with three integers (u, v, w), representing a road from city u to city v with importance w (1 ≤ w ≤ 1000, 1 ≤ u, v ≤ n, u ≠ v) - two integers A and B, the cities between which you are to find the shortest path and the highest importance path (1 ≤ A, B ≤ n). Output two integers, representing the length of the shortest path and the highest importance of any path from city A to city B. If there is no path from city A to city B, output -1 for both. Input Format: - The first line contains two integers n and m. - The next m lines each contain three integers u, v, and w. - The last line contains two integers A and B. Output Format: - A single line containing two integers separated by a space: the length of the shortest path and the highest importance of any path from city A to city B. Example input: ``` 5 6 1 2 2 1 3 3 2 4 2 2 3 1 3 4 4 4 5 3 1 5 ``` Example output: ``` 7 10 ``` Explanation: - The shortest path from city 1 to city 5 is: 1 -> 2 -> 4 -> 5 with length 7. - The path with the highest importance is: 1 -> 3 -> 4 -> 5 with importance 10.","solution":"import heapq def dijkstra(graph, source, n): Performs the Dijkstra algorithm to find the shortest path from the source to all other nodes. Returns the distances dictionary. distances = {node: float(\'inf\') for node in range(1, n + 1)} distances[source] = 0 priority_queue = [(0, source)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # Nodes can only get added to the priority queue once for each minimum way to get there if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def find_highest_importance(graph, u, v, n): visited = [False] * (n + 1) return dfs(graph, u, v, visited) def dfs(graph, current, destination, visited): if current == destination: return 0 visited[current] = True max_importance = float(\'-inf\') for neighbor, importance in graph[current]: if not visited[neighbor]: result = dfs(graph, neighbor, destination, visited) if result != float(\'-inf\'): max_importance = max(max_importance, importance + result) visited[current] = False return max_importance def find_path_stats(n, m, roads, A, B): # Creating the graph as an adjacency list representation graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Finding the shortest path using Dijkstra\'s algorithm shortest_distances = dijkstra(graph, A, n) shortest_path_length = shortest_distances[B] if shortest_path_length == float(\'inf\'): shortest_path_length = -1 # Finding the highest importance path using DFS highest_path_importance = find_highest_importance(graph, A, B, n) if highest_path_importance == float(\'-inf\'): highest_path_importance = -1 return shortest_path_length, highest_path_importance def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) m = int(data[1]) roads_data = data[2:2 + 3 * m] A = int(data[2 + 3 * m]) B = int(data[3 + 3 * m]) roads = [] for i in range(0, len(roads_data), 3): u = int(roads_data[i]) v = int(roads_data[i + 1]) w = int(roads_data[i + 2]) roads.append((u, v, w)) shortest_path_length, highest_path_importance = find_path_stats(n, m, roads, A, B) print(shortest_path_length, highest_path_importance) # Uncomment the below line to run with input # if __name__ == \\"__main__\\": # main()"},{"question":"Fiona is working on a network security system that monitors a large number of interconnected servers within a data center. Each server is identified by a unique integer id, and certain pairs of servers have direct communication links between them. Communication between any two servers within the same connected component is considered secure. Fiona needs to quickly determine the connected components of the network to ensure that communication remains secure whenever new direct communication links are added or removed between servers. Your task is to help Fiona by implementing a system to manage these updates and queries efficiently. Each test case consists of a list of servers and a series of operations. An operation can be one of the following: - Add a direct link between two servers. - Remove an existing direct link between two servers (if it exists). - Query how many connected components are currently in the network. The first line of each test case contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) — the number of servers and the number of initial direct links between them. The next m lines contain two integers u and v (1 ≤ u, v ≤ n) each, representing a direct link between servers u and v. Then follows a series of operations, terminated by the end of input for the current test case. Each operation is of one of the following forms: - `1 u v` (1 ≤ u, v ≤ n): Add a direct link between servers u and v. - `2 u v` (1 ≤ u, v ≤ n): Remove the direct link between servers u and v (if it exists). - `3`: Query the number of connected components currently in the network. For each test case, produce the output for every query operation (`3`) in the order they appear. Example: Input: ``` 4 2 1 2 3 4 3 1 1 3 3 2 3 4 3 ``` Output: ``` 2 1 2 ``` Explanation: Initially, there are four servers and two pairs of direct links. Servers are organized into the following connected components: {1, 2}, {3, 4}, making it 2 connected components. After adding a link between server 1 and server 3, the number of connected components reduces to 1 ({1, 2, 3, 4}). When the link between servers 3 and 4 is removed, the components change to: {1, 2, 3}, {4}, resulting in 2 connected components again. Implement a solution to perform the operations as per the given instructions while efficiently managing updates to the network\'s connected components.","solution":"class DisjointSet: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n self.count = n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 self.count -= 1 def connected_components_count(self): # Return the current number of connected components return self.count def manage_network_operations(n, m, links, operations): ds = DisjointSet(n) link_set = set() for u, v in links: ds.union(u - 1, v - 1) link_set.add((u - 1, v - 1)) results = [] for op in operations: if op[0] == 1: u, v = op[1] - 1, op[2] - 1 if (u, v) not in link_set and (v, u) not in link_set: ds.union(u, v) link_set.add((u, v)) elif op[0] == 2: u, v = op[1] - 1, op[2] - 1 if (u, v) in link_set: link_set.remove((u, v)) elif (v, u) in link_set: link_set.remove((v, u)) # Adjust the disjoint set data structure accordingly # Recompute connected components (not efficient, this part needs improvement) ds = DisjointSet(n) for uu, vv in link_set: ds.union(uu, vv) elif op[0] == 3: results.append(ds.connected_components_count()) return results"},{"question":"You are given a string ( S ) containing only the characters \'X\', \'Y\', and \'Z\'. Your task is to transform the string into a \\"beautiful\\" string. A string is considered beautiful if it does not contain three consecutive identical characters (e.g., \\"XXX\\" or \\"YYY\\" or \\"ZZZ\\"). To achieve this, you are allowed to perform the following operation multiple times: replace any character at any position with one of the other two characters. For example, from the string \\"XXXYXZ\\", you can replace the third character \'X\' with \'Y\', resulting in \\"XXYXYZ\\", which is beautiful. Your goal is to find the minimum number of operations needed to transform the given string into a beautiful string. # Input - The first line contains a single integer ( n ) ((1 leq n leq 10^6)) — the length of the string S. - The second line contains a string ( S ) of length ( n ) consisting of the characters \'X\', \'Y\', and \'Z\'. # Output - Print a single integer — the minimum number of operations required to transform the string into a beautiful string. # Example Input ``` 6 XXXYXZ ``` Output ``` 1 ``` Input ``` 9 ZZZYXYZZZ ``` Output ``` 2 ``` Note In the first example, replace the third character \'X\' with \'Y\' to avoid having \\"XXX\\" consecutively. In the second example, one possible way to make the string beautiful is to: 1. Replace the third character \'Z\' with \'X\', evolving the string into \\"ZZXYXYZZZ\\". 2. Replace the seventh character \'Z\' with \'Y\', resulting in the beautiful string \\"ZZXYXYZYZ\\". This involves 2 operations.","solution":"def minimum_operations_to_make_beautiful(s): Returns the minimum number of operations to transform the given string into a beautiful string. A beautiful string does not contain three consecutive identical characters. n = len(s) operations = 0 i = 0 while i < (n - 2): if s[i] == s[i + 1] == s[i + 2]: # Found three consecutive identical characters operations += 1 i += 3 # Skip past the three consecutive characters else: i += 1 return operations"},{"question":"A circus company is organizing performances for the upcoming festival. They have a list of acts, each represented by an integer indicating its duration. To avoid audience boredom, the company wants to ensure that no two consecutive acts have the same duration. Given an initial list of acts, the company can swap the duration of any two acts any number of times to achieve this goal. Write a function that takes a list of integers as input and returns a boolean value indicating whether it is possible to rearrange the list such that no two consecutive elements are the same. # Input - A single integer n (1 ≤ n ≤ 10^5), the number of acts. - A list of n integers where each integer represents the duration of an act. # Output - Return \\"Yes\\" if it is possible to rearrange the list such that no two consecutive elements are the same. Otherwise, return \\"No\\". # Example Input ``` 5 1 2 3 2 1 ``` Output ``` Yes ``` Explanation One possible rearrangement is `[1, 2, 1, 3, 2]`, which does not have any two consecutive acts of the same duration. Input ``` 3 1 1 1 ``` Output ``` No ``` Explanation No matter how the elements are rearranged, consecutive acts will always have the same duration. # Constraints - The list of integers will always contain at least one element and no more than 100000 elements. - Each integer in the list will be a positive integer representing the duration of an act.","solution":"from collections import Counter def can_rearrange_no_consecutive_same(n, acts): Determines if it is possible to rearrange the list of acts such that no two consecutive acts have the same duration. Args: n: int, the number of acts. acts: List[int], list of integers where each integer represents the duration of an act. Returns: bool: \\"Yes\\" if it is possible to rearrange the list such that no two consecutive elements are the same. \\"No\\" otherwise. if n == 1: return True freq = Counter(acts) most_common = freq.most_common(1)[0][1] # Check if the most common element can be placed without repetition possible = most_common <= (n + 1) // 2 return possible"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n and another integer value k. Your task is to determine whether there exists a subarray of array a with the sum exactly equal to k. A subarray is defined as a contiguous part of the array. The array may contain both positive and negative integers. The first line contains two integers n and k (1 leq n leq 100000, -10^9 leq k leq 10^9) — the size of the array and the target sum. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the elements of the array. Output \\"YES\\" (without quotes) if there is a subarray with the sum exactly equal to k and \\"NO\\" otherwise. # Example: Input: 5 8 1 2 3 4 1 Output: YES Input: 5 15 1 2 3 4 1 Output: NO # Note: In the first example, the subarray [3, 4, 1] has a sum of 8. In the second example, there is no subarray with a sum of 15.","solution":"def subarray_sum_exists(arr, k): Determines whether there exists a subarray with sum exactly equal to k. current_sum = 0 prefix_sums = {0} for num in arr: current_sum += num if (current_sum - k) in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"You are given a directed graph with `n` nodes and `m` edges. Each edge has a weight assigned to it. You are also given `k` special nodes and a sequence of operations that either add a new edge to the graph or ask for the shortest path from one of these special nodes to another node in the graph. Your task is to process each operation and output the required information. Initially, the graph is empty and contains `n` nodes labeled from 1 to `n`. # Input: - The first line contains three integers `n`, `m`, and `k` (`1 ≤ n, m, k ≤ 100,000`) — the number of nodes, the number of operations, and the number of special nodes. - The second line contains `k` integers indicating the special nodes. - Each of the next `m` lines describes one operation: - If the line starts with a \\"1\\", it means this is an edge addition operation, followed by three integers `u`, `v`, and `w` (`1 ≤ u, v ≤ n`, `1 ≤ w ≤ 10^6`) which indicates an edge from node `u` to node `v` with weight `w`. - If the line starts with a \\"2\\", it means this is a path query operation, followed by two integers `a` and `b` (`1 ≤ a, b ≤ k`), you need to find the shortest path from the special node `a` to the `b`-th special node. # Output: For each path query operation, print the shortest path from the special node `a` to the `b`-th special node. If there is no path, print `-1`. # Example: Input: ``` 5 5 3 1 3 5 1 1 2 4 1 2 3 1 1 3 4 6 2 1 2 1 4 5 2 2 2 3 ``` Output: ``` 5 8 ``` Explanation: - First query asks the shortest path from the 1st special node (node 1) to the 2nd special node (node 3), which results in `1 -> 2 (4), 2 -> 3 (1)` giving total weight `4 + 1 = 5`. - Second query asks for the shortest path from the 2nd special node (node 3) to the 3rd special node (node 5), which results in `3 -> 4 (6), 4 -> 5 (2)` giving total weight `6 + 2 = 8`.","solution":"import heapq from collections import defaultdict, deque def process_operations(n, m, k, special_nodes, operations): # Build the graph graph = defaultdict(list) # A function to run Dijkstra\'s algorithm from a start node def dijkstra(start, end): dist = {i: float(\'inf\') for i in range(1, n+1)} dist[start] = 0 pq = [(0, start)] visited = set() while pq: curr_dist, node = heapq.heappop(pq) if node in visited: continue visited.add(node) if node == end: return curr_dist for neighbor, weight in graph[node]: if neighbor not in visited and curr_dist + weight < dist[neighbor]: dist[neighbor] = curr_dist + weight heapq.heappush(pq, (dist[neighbor], neighbor)) return -1 results = [] special_index = {i + 1: special_nodes[i] for i in range(k)} for operation in operations: if operation[0] == 1: _, u, v, w = operation graph[u].append((v, w)) elif operation[0] == 2: _, a, b = operation node_a = special_index[a] node_b = special_index[b] shortest_path = dijkstra(node_a, node_b) results.append(shortest_path) return results"},{"question":"You are given two integers, n and k, where n represents the number of participants in a competition, and k represents the number of stages each participant must complete. Each participant attempts each stage once, and the time taken for each attempt is provided in a grid format. Your task is to determine the minimum possible time taken for all participants to complete all stages, under the condition that no two participants can attempt the same stage simultaneously. In the first line of the input, you are given two integers n and k (1 ≤ n, k ≤ 100) — the number of participants and the number of stages. The next n lines contain k space-separated integers each, where the j-th integer in the i-th line represents the time taken by the i-th participant to complete the j-th stage. Output a single integer, the minimum possible time required for all participants to complete all stages. For example, given the following input: ``` 3 3 4 5 6 1 2 3 7 8 9 ``` each participant must complete three stages, and we need to determine an optimal schedule to minimize the total time for all participants to complete all stages without any conflicts. A possible optimal schedule might be: - Participant 1 completes Stage 1 in 4 minutes, Stage 2 in 5 minutes, and Stage 3 in 6 minutes. - Participant 2 completes Stage 2 in 2 minutes and then can be scheduled in the remaining time slots to avoid conflict. - Participant 3 completes Stage 1 in 7 minutes and so forth. The output should be: ``` 13 ```","solution":"def min_total_time(n, k, times): # Initialize the schedule for all stages with large values (inf) schedule = [0] * k # Iterate through each participant\'s times for each stage for i in range(n): for j in range(k): # Calculate time when participant i starts stage j if j == 0: # If it\'s the first stage, start after previous participant finished this stage schedule[j] = schedule[j] + times[i][j] else: # For subsequent stages, wait for the current stage of this participant or previous stages schedule[j] = max(schedule[j], schedule[j - 1]) + times[i][j] # The minimum possible total time is the finishing time of the last participant in the last stage return schedule[-1]"},{"question":"Maria is organizing a social event and she needs to distribute invitations to the guests. She wants to ensure that the invitations are distributed in a fair and efficient manner. Maria has a list of guests, each with a specified number of invitations they should receive. Initially, Maria has an unlimited number of invitations. However, each guest can only receive a certain number of invitations at certain times, due to availability constraints. You are given a list of t test cases. For each test case, you need to determine whether it is possible to distribute the invitations according to the guests\' requirements. Each test case consists of the following: - The first line contains one integer n (1 le n le 10^5) — the number of guests. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^8), where a_i is the number of invitations the i-th guest should receive. - The third line contains n integers b_1, b_2, ldots, b_n (1 le b_i le 10^8), where b_i is the number of invitations that the i-th guest can receive at a time. Your task is to determine if it is possible to distribute the invitations to all guests such that the i-th guest receives exactly a_i invitations and can receive up to b_i invitations at a time. Output \\"YES\\" if it is possible to distribute the invitations to all guests as required, otherwise output \\"NO\\". The input is given as follows: - The first line contains an integer t (1 le t le 10^3) — the number of test cases. - For each test case: - The first line contains the integer n. - The second line contains n integers a_1, a_2, ldots, a_n. - The third line contains n integers b_1, b_2, ldots, b_n. Output \\"YES\\" or \\"NO\\" for each test case on a separate line. # Example Input: ``` 2 3 5 10 15 5 5 5 2 7 9 3 5 ``` Output: ``` YES NO ``` # Explanation In the first test case, Maria can distribute the invitations as follows: - The first guest receives 5 invitations at a time. - The second guest receives 5 invitations twice (for a total of 10). - The third guest receives 5 invitations thrice (for a total of 15). In the second test case, it is not possible to distribute 7 invitations to the first guest with a max limit of 3 at a time or 9 invitations to the second guest with a max limit of 5 at a time. Hence, the output is \\"NO\\".","solution":"def can_distribute_invitations(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] b = test_cases[i][2] possible = True for j in range(n): if a[j] % b[j] != 0: possible = False break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A technique called \\"Sort and Merge\\" helps in merging overlapping intervals in a list. Given a list of intervals where each interval is represented by a pair of integers [start, end], your task is to merge all overlapping intervals and return the list of merged intervals in ascending order of their start times. Two intervals [a, b] and [c, d] are considered overlapping if their intersection is non-empty, i.e., either of these conditions holds: - a ≤ c ≤ b - a ≤ d ≤ b - c ≤ a ≤ d - c ≤ b ≤ d If one interval is a subset of the other, they are also considered overlapping. # Input The first line contains an integer n (0 ≤ n ≤ 10^5) representing the number of intervals. The following n lines each contain two integers start and end (0 ≤ start ≤ end ≤ 10^9) representing an interval. # Output Output the list of merged intervals, each represented by a pair of integers [start, end] in ascending order of their start times. # Example **Input:** ``` 4 1 3 2 6 8 10 15 18 ``` **Output:** ``` 1 6 8 10 15 18 ``` In the example, the first and second intervals [1, 3] and [2, 6] overlap and are merged into [1, 6]. The other intervals do not overlap with any other intervals and remain as is.","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns the merged list of intervals. :param intervals: List of tuples/lists where each tuple/list has two integers [start, end] :return: List of merged intervals as lists if not intervals: return [] # Sort intervals by their start time intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for interval in intervals[1:]: # Get the last merged interval last_merged = merged[-1] # Check if there is an overlap if interval[0] <= last_merged[1]: # Merge the intervals last_merged[1] = max(last_merged[1], interval[1]) else: # No overlap, add this interval to the merged list merged.append(interval) return merged # Helper function to convert input to the required format for the solution def merge_intervals_from_input(n, raw_intervals): intervals = [list(map(int, interval.split())) for interval in raw_intervals] merged_intervals = merge_intervals(intervals) return [\\"{} {}\\".format(interval[0], interval[1]) for interval in merged_intervals]"},{"question":"Imagine you own a small chain of coffee shops and you want to introduce a new loyalty program to encourage repeat customers. Each time a customer visits one of your shops, their visit is recorded. You decide to reward customers with a free coffee after every k visits. You are given n integers representing the timestamps of customer visits (in seconds from the start of the program). For simplicity, you can assume that no two visits happen at the same exact second. Your task is to write a program that determines how many free coffees you will have to give out based on the visit timestamps. # Input The first line contains two integers, n (1 ≤ n ≤ 100,000) and k (1 ≤ k ≤ n), where n is the total number of visits recorded and k is the number of visits required for a free coffee. The second line contains n integers t1, t2, ..., tn (1 ≤ t1 < t2 < ... < tn ≤ 10^9), where ti represents the second at which the i-th visit occurs. # Output Print a single integer, representing the total number of free coffees given out. # Example - Input: ``` 10 3 1 3 7 8 9 13 15 16 17 18 ``` - Output: ``` 3 ``` # Explanation In the example above, a free coffee is given out every 3 visits. The first set of 3 visits at times 1, 3, and 7 earns one free coffee, the next set at times 8, 9, and 13 earns another free coffee, and the final set at times 15, 16, and 17 earns the third free coffee. The last visit at time 18 does not earn a free coffee because it doesn\'t complete a set of k visits.","solution":"def free_coffees(n, k, visits): Given the number of visits and the threshold k, return the number of free coffees earned. :param n: int, number of visits :param k: int, number of visits required for a free coffee :param visits: list of int, timestamps of the visits :return: int, number of free coffees earned # Total free coffees is the number of complete groups of k visits return n // k"},{"question":"A large company has a hierarchy of employees organized in a tree structure with the CEO as the root. Each employee has a unique employee ID, and every employee, except the CEO, reports to exactly one manager. The performance of each employee is represented by a unique integer value. The company wants to evaluate the performance of various teams led by specific managers by calculating the sum of performance values of all employees in their respective subtrees. Given the employee structure and performance values, you need to determine the sum of performance values for the subtrees of specified employees (managers). # Input Format: - The first line contains an integer `n` (1 ≤ n ≤ 100000), representing the number of employees, including the CEO. - The second line contains `n` space-separated integers, where the i-th integer represents the performance value of the employee with ID `i+1`. - Then `n-1` lines follow, each containing two integers `u` and `v` (1 ≤ u, v ≤ n), which denote an edge in the tree representing that `u` is the manager of `v` or vice-versa. - The next line contains an integer `q` (1 ≤ q ≤ 10000), representing the number of queries. - Each of the next `q` lines contains a single integer `x` (1 ≤ x ≤ n), representing the ID of a manager whose subtree performance sum needs to be calculated. # Output Format: - For each query, print a single integer, the sum of performance values of the employees in the subtree of the given manager. # Sample Input: ``` 5 10 5 8 6 7 1 2 1 3 2 4 2 5 2 2 1 ``` # Sample Output: ``` 26 36 ``` # Explanation: - The performance values of employees are: [10, 5, 8, 6, 7] - The tree structure: ``` 1 / 2 3 / 4 5 ``` - Subtree rooted at employee 2 has employees [2, 4, 5] with performance values [5, 6, 7], sum is 18. - Subtree rooted at employee 1 has employees [1, 2, 3, 4, 5] with performance values [10, 5, 8, 6, 7], sum is 36.","solution":"def calculate_subtree_performance(n, performances, edges, queries): from collections import defaultdict, deque # Build the tree as an adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Define a function to perform DFS and calculate the subtree sums def dfs(node, parent): subtree_sum = performances[node - 1] for neighbor in tree[node]: if neighbor != parent: subtree_sum += dfs(neighbor, node) subtree_sums[node] = subtree_sum return subtree_sum # Dictionary to keep track of subtree sums subtree_sums = {} # Start DFS from the root node (assumed to be node 1) dfs(1, -1) # Answer each query results = [] for manager in queries: results.append(subtree_sums[manager]) return results"},{"question":"A company has a warehouse with n boxes of different weights. The company wants to organize the boxes in such a way that the weight difference between any two consecutive boxes is minimized. You are given the weight of each box. You need to find a way to arrange the boxes that minimizes the maximum weight difference between any two consecutive boxes in the arrangement. The first line of the input contains a single integer n (2 ≤ n ≤ 1000) — the number of boxes. The second line contains n space-separated integers wi (1 ≤ wi ≤ 1000) — the weights of the boxes. Output two lines: The first line should contain the minimized maximum weight difference. The second line should contain the arrangement of the boxes with the minimized maximum weight difference. If there are multiple valid arrangements, output any of them. Example: Input: 5 4 8 1 7 2 Output: 3 1 2 4 7 8 In this example, the arrangement [1, 2, 4, 7, 8] minimizes the maximum weight difference, which is 3 (between 4 and 7).","solution":"def minimize_max_weight_difference(n, weights): Arranges the boxes to minimize the maximum weight difference between any two consecutive boxes. Returns the minimized maximum weight difference and the arrangement. # Sort the weights weights.sort() # Calculate the maximum difference between consecutive weights in the sorted arrangement max_diff = max(weights[i] - weights[i - 1] for i in range(1, n)) return max_diff, weights"},{"question":"You are given a grid of size n times m where each cell contains an integer value. You need to identify the subgrid (contiguous subgroup of the original grid) that has the maximum sum among all possible subgrids in the grid. The first line of input contains two integers, n and m (1 leq n, m leq 300) — the dimensions of the grid. The next n lines each contain m integers representing the grid elements (-10^5 leq text{grid}[i][j] leq 10^5). Output a single integer representing the maximum sum of any subgrid from the given grid. **Example:** ``` Input: 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 Output: 29 Explanation: The maximum sum subgrid is: 3 8 10 -4 -1 1 ``` **Note:** To solve this problem efficiently, you can utilize a modification of the Kadane’s algorithm for 2D arrays, where you treat each column of the grid as a potential subarray and apply Kadane’s algorithm to find the maximum subarray sum for the columns within your chosen subgrid.","solution":"def max_sum_subgrid(grid): def kadane(arr): max_sum = float(\'-inf\') current_sum = 0 for value in arr: current_sum = max(value, current_sum + value) max_sum = max(max_sum, current_sum) return max_sum n = len(grid) m = len(grid[0]) max_sum = float(\'-inf\') for left in range(m): row_sum = [0] * n for right in range(left, m): for row in range(n): row_sum[row] += grid[row][right] max_sum = max(max_sum, kadane(row_sum)) return max_sum"},{"question":"In a binary tree, each node contains an integer value, and each node has at most two children. You need to determine the size of the maximum independent set (MIS). An independent set is a set of nodes such that no two nodes in the set are direct parent-child. The input consists of multiple test cases. The first line of the input contains an integer T (1 ≤ T ≤ 100) - the number of test cases. For each test case, the binary tree is described as follows. The first line contains an integer n (1 ≤ n ≤ 10^4) - the number of nodes in the binary tree. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) - indicating that there is an edge between nodes u and v. Output T lines, where each line contains the size of the maximum independent set for the corresponding binary tree. Each node is guaranteed to have a unique value. Example: Input: 2 5 1 2 1 3 2 4 2 5 6 1 2 1 3 3 4 3 5 4 6 Output: 3 3 Explanation: In the first test case, one possible maximum independent set is {1, 4, 5}, yielding a size of 3. In the second test case, one possible maximum independent set is {1, 4, 5}, also yielding a size of 3.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def build_tree(edges, n): nodes = {i: TreeNode(i) for i in range(1, n + 1)} for u, v in edges: nodes[u].children.append(nodes[v]) nodes[v].children.append(nodes[u]) return nodes[1] def mis(node, parent): if not node: return 0 inclusive = 1 for child in node.children: if child != parent: for grandchild in child.children: if grandchild != node: inclusive += mis(grandchild, child) exclusive = 0 for child in node.children: if child != parent: exclusive += mis(child, node) return max(inclusive, exclusive) def find_mis(tree, n): return mis(tree, None) def solve(test_cases): results = [] for n, edges in test_cases: if n == 0: results.append(0) continue tree = build_tree(edges, n) results.append(find_mis(tree, n)) return results"},{"question":"You are given an integer array representing the heights of buildings in a row. You are also given the number of rain units that fall on these buildings. When it rains on consecutive buildings with varying heights, the rainwater gets trapped between the buildings. Your task is to compute the total amount of trapped rainwater. The first line contains two integers `n` and `r` (1 ≤ n ≤ 10^6, 0 ≤ r ≤ 10^12) — the number of buildings and the number of rain units. The second line contains `n` space-separated integers `h1, h2, ..., hn` (0 ≤ hi ≤ 10^9) — representing the heights of the buildings. Compute the total units of rainwater that are trapped between the buildings after `r` units of rainfall. Print a single integer — the amount of rainwater trapped, which could be limited by the rainfall amount, or the total potential trapping capacity of the buildings. **Example:** Input: ``` 6 12 0 1 0 2 1 0 1 3 2 1 2 1 ``` Output: ``` 6 ``` Explanation: Before rainfall, the buildings look like this: ``` _ _ _| |_|_| ``` After 6 units of rain, the trapped water is as follows (denoted by \\"~\\"): ``` ~ ~ _|~|_|~| ``` Therefore, the total volume of trapped water is `6` units.","solution":"def compute_trapped_rainwater(building_heights): Computes the total amount of trapped rainwater between buildings. Parameters: - building_heights (list): A list of integers representing the heights of the buildings. Returns: - int: The total units of rainwater that can be trapped. if not building_heights: return 0 n = len(building_heights) left_max = [0] * n right_max = [0] * n # Fill left max array left_max[0] = building_heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], building_heights[i]) # Fill right max array right_max[n - 1] = building_heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], building_heights[i]) # Calculate total water trapped total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - building_heights[i] return total_water def trapped_rainwater(building_heights, rainfall): Computes the trapped rainwater amount limited by the rainfall. Parameters: - building_heights (list): A list of integers representing the heights of buildings. - rainfall (int): The total units of rain falling on the buildings. Returns: - int: The total amount of rainwater trapped, limited by the rainfall amount. trapped_water = compute_trapped_rainwater(building_heights) return min(trapped_water, rainfall)"},{"question":"Polycarp has a collection of dolls, some of which are nested inside each other. A doll can either be a \\"shell\\" or a \\"figure\\". A \\"shell\\" can contain a single \\"figure\\" or another \\"shell\\". A \\"figure\\" cannot contain anything. Each \\"shell\\" and \\"figure\\" doll is uniquely labeled by an integer. Polycarp wants to order his dolls by their labels, but only in a way that respects the nesting relationship. More specifically, consider two dolls, A and B. If A directly contains B (i.e., B is nested inside A), then A must come before B in the ordered list. Your task is to help Polycarp find such a valid ordering. You are given n pairs of integers (a_i, b_i) which describes the nesting relationships between the dolls. This means that the doll labeled a_i directly contains the doll labeled b_i. Determine if it is possible to order all dolls by their labels in a way that respects all the nesting relationships. If that is the case, print the ordering. Otherwise, print \\"IMPOSSIBLE\\". # Input: - The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of nesting relationships. - The next n lines contain two integers a_i and b_i (1 ≤ a_i, b_i ≤ 1000) where the doll labeled a_i directly contains the doll labeled b_i. It is guaranteed that each doll is labeled with a unique integer. # Output: - If there is a valid ordering, print the label of the dolls in a single line separated by a space in a valid order. - Otherwise, print \\"IMPOSSIBLE\\". # Example: Input: ``` 3 3 1 4 2 2 3 ``` Output: ``` 4 2 3 1 ``` Explanation: - Doll labeled 4 contains the doll labeled 2. - Doll labeled 2 contains the doll labeled 3. - Doll labeled 3 contains the doll labeled 1. - Thus, an ordering respecting all relations could be (4, 2, 3, 1).","solution":"def find_doll_order(n, nesting_pairs): from collections import defaultdict, deque # Create a graph and in-degree dictionary graph = defaultdict(list) in_degree = defaultdict(int) dolls = set() for a, b in nesting_pairs: graph[a].append(b) in_degree[b] += 1 dolls.add(a) dolls.add(b) # Find all nodes with zero in-degree queue = deque([doll for doll in dolls if in_degree[doll] == 0]) sorted_order = [] while queue: current = queue.popleft() sorted_order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(sorted_order) == len(dolls): return sorted_order else: return \\"IMPOSSIBLE\\" # Example Function Usage def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nesting_pairs = [] for i in range(n): a, b = int(data[2 * i + 1]), int(data[2 * i + 2]) nesting_pairs.append((a, b)) result = find_doll_order(n, nesting_pairs) if result == \\"IMPOSSIBLE\\": print(result) else: print(\\" \\".join(map(str, result)))"},{"question":"Quarantine is growing an array and he does not want to do so alone, so he asked for your help. Initially, the array has only one element: the integer 1. In one operation, Quarantine can either: 1. Choose one element of the array and keep it unchanged. 2. Choose one element of the array and replace it with any of the following four pairs of integers: (a, b), (b, a), (a+b, b), or (a, a+b). Quarantine wants to know if it\'s possible to make the array contain exactly the elements 1, 2, ..., n using a finite number of operations. The first line of the input contains a single integer T (1 ≤ T ≤ 50) — the number of independent test cases. Each of the following T lines contains an integer n (1 ≤ n ≤ 1000) — the target number. For each test case, print \\"YES\\" if there exists a sequence of operations that makes the array contain exactly the elements 1, 2, ..., n. Otherwise, print \\"NO\\". You can print each letter in any case (upper or lower). **Example:** Input: ``` 3 1 3 8 ``` Output: ``` YES YES YES ``` Explanation: - For n = 1, the initial array already contains the element 1, so the answer is \\"YES\\". - For n = 3, the array can transform as follows: Start with [1]. Replace 1 with (1, 2) to get [1, 2]. Then replace 2 with (1, 3) to get [1, 3], and then replace 3 with (1, 2) to get [1, 2, 3]. - For n = 8, a sequence of operations can introduce every integer from 1 to 8 into the array.","solution":"def can_form_sequence(n): Given a number n, determines if it is possible to form the sequence [1, 2, ..., n] through the specified operations. if n == 1: return \\"YES\\" # If n > 1, we can always achieve the sequence 1 to n by repeatedly # doubling and adding until reaching or surpassing n. # This can be shown by analyzing the capabilities of the replacement operations. return \\"YES\\" def solve(T, test_cases): results = [] for n in test_cases: results.append(can_form_sequence(n)) return results"},{"question":"The citizens of Groland are preparing for their annual grand festival. They have decided to create a large display of colored lights in the center of the city. The display consists of ( n ) segments, each represented by a light bulb with a distinct integer color. They want to perform a decoration task split among ( k ) workers, ensuring no two adjacent segments have the same color to make the display visually appealing. However, because of the bustling festival preparations, the display company can only change the color of exactly one segment to make sure that it meets the criteria. Your task is to determine the minimum number of changes needed to ensure no two adjacent segments have the same color, by changing at most one segment\'s color. If it\'s already meeting the criteria, print 0. If it is impossible to meet the criteria by modifying at most one segment, print -1. The first line of the input contains two integers ( n ) (2 ≤ n ≤ ( 10^5 )) — the number of segments, and ( k ) (1 ≤ ( k ) ≤ ( n )) — the number of workers. The second line contains ( n ) integers ( a_1, a_2, ..., a_n ) (1 ≤ ( a_i ) ≤ ( 10^9 )), where ( a_i ) is the color of the ( i )-th segment. Output the minimum number of changes required, or -1 if it is impossible. # Examples: Input ``` 5 3 1 2 2 3 4 ``` Output ``` 1 ``` *Explanation*: Change the third segment color from 2 to any color that is not 2 or 1 (like 5). Input ``` 3 2 1 2 3 ``` Output ``` 0 ``` *Explanation*: No changes are needed as no two adjacent segments have the same color.","solution":"def minimum_changes_to_decorate(n, k, colors): adjacent_same_count = 0 for i in range(n - 1): if colors[i] == colors[i + 1]: adjacent_same_count += 1 if adjacent_same_count == 0: return 0 if adjacent_same_count == 1: return 1 return -1"},{"question":"There is a number game being played between two players, Alice and Bob. They have a row of integers and they would like to split it into two contiguous subarrays such that each player gets one subarray. The sum of the integers in Alice\'s subarray should be as close as possible to, but not greater than, Bob\'s subarray sum. You are given a row of n integers. Determine the maximum possible sum for Alice’s subarray such that her sum is as close as possible to Bob’s sum without exceeding it. The first line of input contains a single integer n (1 ≤ n ≤ 10^5), which is the length of the row of integers. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), which represent the row of integers. Output a single integer, the maximum possible sum of Alice’s subarray. **Example:** Input: ``` 5 4 2 3 9 2 ``` Output: ``` 9 ``` **Explanation:** One optimal way to split the array is: - Alice’s subarray: [4, 2, 3] with sum 9 - Bob’s subarray: [9, 2] with sum 11 Another way to split: - Alice’s subarray: [4, 2, 3, 9] with sum 18 - Bob’s subarray: [2] with sum 2 But since we want to maximize Alice’s subarray sum without exceeding Bob’s, the best sum Alice can get in this case is 9.","solution":"def max_alice_subarray_sum(n, arr): Returns the maximum possible sum of Alice\'s subarray such that the sum is as close as possible to, but not greater than, Bob\'s subarray sum. total_sum = sum(arr) alice_sum = 0 closest_sum = 0 for i in range(n - 1): alice_sum += arr[i] bob_sum = total_sum - alice_sum if alice_sum <= bob_sum: closest_sum = max(closest_sum, alice_sum) return closest_sum"},{"question":"You are given a sequence of operations to perform on a list of integers. Each operation is one of the following types: 1. Insert an integer k at the end of the list. 2. Delete the most recently inserted integer from the list. If the list is empty, this operation does nothing. 3. Print the maximum integer in the list. If the list is empty, print \\"Empty\\". Your task is to write a function that performs these operations and outputs the appropriate responses to any print operation. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of operations. The next n lines describe the operations, one per line. Each operation is of one of the following three types: - \\"1 k\\", where 1 indicates the insert operation and k (1 ≤ k ≤ 10^9) is the integer to be inserted. - \\"2\\", which indicates the delete operation. - \\"3\\", which indicates the print operation. Output the result of each print operation in the order they appear in the input. Example: Input: ``` 6 1 97 2 1 20 1 26 3 2 3 ``` Output: ``` 26 20 ``` Explanation: - Initially, the list is empty. - The first operation adds 97 to the list. List: [97] - The second operation deletes the most recent element. List: [] - The third operation adds 20 to the list. List: [20] - The fourth operation adds 26 to the list. List: [20, 26] - The fifth operation prints the maximum element, which is 26. - The sixth operation deletes the most recent element. List: [20] - The seventh operation prints the maximum element, which is 20.","solution":"def manage_operations(operations): Performs a sequence of operations on a list and returns the results of \'print\' operations. :param operations: List of operation strings. :return: List of results of \'print\' operations. stack = [] results = [] for operation in operations: if operation.startswith(\\"1\\"): _, k = operation.split() stack.append(int(k)) elif operation == \\"2\\": if stack: stack.pop() elif operation == \\"3\\": if stack: results.append(max(stack)) else: results.append(\\"Empty\\") return results"},{"question":"You are given a directed graph with `n` nodes and `m` edges, where nodes are numbered from 1 to n. Each edge has a weight and a direction, specified by three integers `u`, `v`, and `w` which means there is an edge from node `u` to node `v` with weight `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000). Your task is to determine if there is a path from node 1 to node n and, if such a path exists, find the minimum weight of any path from node 1 to node n. The first line of the input contains two integers `n` and `m` (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of nodes and the number of edges, respectively. The next `m` lines contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), describing each edge in the graph. If there is a path from node 1 to node n, print the minimum weight of any path from node 1 to node n. Otherwise, print `-1`. # Input ``` 5 6 1 2 3 2 3 4 3 5 2 1 4 15 4 5 10 2 5 8 ``` # Output ``` 9 ``` Note: The minimum weight path from node 1 to node 5 is 1 -> 2 -> 3 -> 5 with a total weight of 9.","solution":"import heapq def find_minimum_weight_path(n, m, edges): # Create adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) # Use Dijkstra\'s algorithm to find the shortest path from node 1 to node n def dijkstra(start, end): heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 visited = set() while heap: current_distance, current_node = heapq.heappop(heap) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return distances[end] # Get the minimum path weight from node 1 to node n min_path_weight = dijkstra(1, n) return min_path_weight if min_path_weight != float(\'inf\') else -1"},{"question":"A popular social media company wants to analyze the network of a user. The user\'s connections can be represented as a directed graph where each node is a user, and each directed edge (u, v) means that user u follows user v. The company is particularly interested in finding the user\'s most influential connection, defined as the user who has the maximum reachable users through any number of following connections. You are given the number of users n and the number of connections m in the social network. You are also given the list of directed connections. Your task is to write a program that finds the most influential user. The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) - the number of users and the number of connections. The next m lines contain two integers u and v (1 ≤ u, v ≤ n) each, representing a directed connection from user u to user v. Print the index of the most influential connection (user) who can reach the maximum number of other users via following connections. If there are multiple users with the same maximum reach, print the smallest index. # Example: Input: ``` 5 5 1 2 2 3 3 4 4 5 2 5 ``` Output: ``` 1 ``` Explanation: - User 1 can reach Users 2, 3, 4, and 5. - User 2 can reach Users 3, 4, and 5. - User 3 can reach Users 4 and 5. - User 4 can reach User 5. - User 5 can\'t reach any other users. Thus, User 1 is the most influential user.","solution":"from collections import defaultdict, deque def most_influential_user(n, m, connections): def bfs(start): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True reachable_count = 0 while queue: node = queue.popleft() reachable_count += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return reachable_count graph = defaultdict(list) for u, v in connections: graph[u].append(v) max_reach = 0 influential_user = 0 for user in range(1, n + 1): reach = bfs(user) if reach > max_reach or (reach == max_reach and user < influential_user): max_reach = reach influential_user = user return influential_user # Example input n = 5 m = 5 connections = [(1, 2), (2, 3), (3, 4), (4, 5), (2, 5)] print(most_influential_user(n, m, connections)) # Output should be 1"},{"question":"A group of n students is playing a task distribution game in their classroom. They are numbered from 1 to n and formed into pairs. In each round, each pair of students is assigned a specific task. After completing the task, the winning student from each pair (decided randomly) advances to the next round. If two students become paired multiple times during different rounds, one of them might win in different instances, depending on the luck factor. The game continues until one student remains, who is declared the champion. Given the sequence of student pairs for each round, determine the round in which two specific students, a and b, will first compete against each other. The first input line contains an integer r (1 ≤ r ≤ 7) — the number of rounds played. Each of the next r lines describes the pairs for that round. Each line starts with an integer p (1 ≤ p ≤ 128), the number of pairs in that round, followed by p pairs of integers, representing the student IDs for each pair. The last input line contains two integers a and b (1 ≤ a, b ≤ 256) — the IDs of the two students of interest. Print a single integer — the number of the round in which students a and b first meet. If they never meet, print -1. Example: Input: 4 2 1 2 3 4 2 1 3 5 6 1 1 5 1 5 7 1 6 Output: 1 Explanation: Students 1 and 2 meet in the first round in pairs (1 2).","solution":"def find_round_first_meeting(r, rounds_pairs, a, b): for round_num, pairs in enumerate(rounds_pairs): if any((a == p[0] and b == p[1]) or (a == p[1] and b == p[0]) for p in pairs): return round_num + 1 return -1"},{"question":"Polycarpus is developing a new software system that processes large amounts of data. One of the core functionalities involves efficiently merging multiple sorted lists into a single sorted list. Each sorted list contains distinct integers. Polycarpus needs your help to optimize this merging process. Given `t` test cases, each test case begins with an integer `k` (1 ≤ k ≤ 10^5) which denotes the number of sorted lists. For each test case, the next `k` lines describe the sorted lists. Each line starts with an integer `ni` (1 ≤ ni ≤ 10^5) representing the number of integers in the `i`-th list followed by `ni` sorted distinct integers. Your task is to merge the `k` sorted lists from each test case into a single sorted list and output it. # Input - The first input line contains an integer `t` — the number of test cases. - For each test case: - The first line contains an integer `k`. - `k` lines follow, each containing a list description as mentioned above. # Output - For each test case, output a single line containing all the integers from the merged list in sorted order. # Example Input ``` 2 2 3 1 4 5 5 2 3 6 7 8 3 4 1 3 5 7 3 2 4 6 2 8 9 ``` Output ``` 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 ``` # Note - In the first test case, the two sorted lists `[1, 4, 5]` and `[2, 3, 6, 7, 8]` are merged into `[1, 2, 3, 4, 5, 6, 7, 8]`. - In the second test case, the three sorted lists `[1, 3, 5, 7]`, `[2, 4, 6]`, and `[8, 9]` are merged into `[1, 2, 3, 4, 5, 6, 7, 8, 9]`.","solution":"import heapq def merge_sorted_lists(test_cases): Merges k sorted lists for each test case into a single sorted list. :param test_cases: List of test cases, where each test case is a list of k sorted lists. :return: List of merged sorted lists for each test case. result = [] for lists in test_cases: merged_list = list(heapq.merge(*lists)) result.append(merged_list) return result def process_input(input_str): Processes the input string as per the given format in the question and returns structured test cases. :param input_str: Input string containing the test cases. :return: Structured test cases for processing. input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): k = int(input_lines[index]) index += 1 current_case = [] for _ in range(k): current_case.append(list(map(int, input_lines[index].split()[1:]))) index += 1 test_cases.append(current_case) return test_cases"},{"question":"The inhabitants of Graphland are building a new city, and their city planning is based on distinct regions defined by coordinates in a 2D plane. Each region is represented as a polygon with the vertices given in a counter-clockwise order. To protect the city, they need to place guards at certain key points. A guard can only protect points that lie inside a specific polygon. Therefore, the city planners need to determine if a set of points lies within the boundaries of the polygon they should protect. Your task is to write a function that checks if a given set of points lies within a specific polygon. You will be given the vertices of the polygon and the coordinates of the points to check. Input: - The first line contains a single integer n (3 <= n <= 1000), the number of vertices of the polygon. - Each of the next n lines contains two integers xi and yi (-10000 <= xi, yi <= 10000), the coordinates of the i-th vertex of the polygon. - The next line contains a single integer m (1 <= m <= 1000), the number of points to check. - Each of the next m lines contains two integers px and py (-10000 <= px, py <= 10000), the coordinates of a point. Output: For each of the m points, print \\"INSIDE\\" if the point lies inside the polygon, \\"OUTSIDE\\" if it lies outside, and \\"BORDER\\" if the point is on the boundary of the polygon. Note: - The vertices of the polygon are given in a counter-clockwise order. - A point on the edge or vertex of the polygon is considered on the \\"BORDER\\". Example: Input: ``` 4 1 1 4 1 4 3 1 3 3 2 2 4 2 5 2 ``` Output: ``` INSIDE BORDER OUTSIDE ```","solution":"def point_in_polygon(n, vertices, m, points): def is_point_on_segment(point, segment_start, segment_end): px, py = point sx, sy = segment_start ex, ey = segment_end if min(sx, ex) <= px <= max(sx, ex) and min(sy, ey) <= py <= max(sy, ey): if (ex - sx) * (py - sy) == (ey - sy) * (px - sx): return True return False def is_point_in_polygon(point): x, y = point inside = False i, j = 0, n - 1 for i in range(n): xi, yi = vertices[i] xj, yj = vertices[j] if is_point_on_segment(point, vertices[i], vertices[j]): return \\"BORDER\\" if ((yi > y) != (yj > y) and (x < (xj - xi) * (y - yi) / (yj - yi) + xi)): inside = not inside j = i return \\"INSIDE\\" if inside else \\"OUTSIDE\\" results = [] for point in points: results.append(is_point_in_polygon(point)) return results # Example usage n = 4 vertices = [(1, 1), (4, 1), (4, 3), (1, 3)] m = 3 points = [(2, 2), (4, 2), (5, 2)] print(point_in_polygon(n, vertices, m, points))"},{"question":"You are given an undirected graph with n nodes and m edges. Each node is painted with one of k different colors. The goal is to check if there exists at least one edge in the graph where both endpoints of the edge are of the same color. The first line of input contains three integers n, m, and k (1 ≤ n, m ≤ 10^5, 1 ≤ k ≤ 100), the number of nodes, edges, and colors, respectively. The second line contains n integers, each representing the color of the corresponding node (colors are 1-indexed, i.e., 1 to k). The following m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an undirected edge between node u and node v. Output \\"YES\\" if there exists at least one edge in the graph such that both endpoints of this edge have the same color. Otherwise, output \\"NO\\". Example: Input: 5 4 3 1 2 3 1 2 1 2 2 3 3 4 4 5 Output: NO Input: 5 5 2 1 2 1 2 1 1 2 2 3 3 4 4 5 5 1 Output: YES In the first example, no edge connects nodes of the same color. In the second example, there are multiple edges, and an edge exists where both endpoints share the same color (1 and 5 are both color 1).","solution":"def has_same_color_edge(n, m, k, colors, edges): Checks if there exists any edge in the graph where both endpoints have the same color. Parameters: n (int): Number of nodes m (int): Number of edges k (int): Number of colors colors (List[int]): List of node colors edges (List[Tuple[int, int]]): List of edges Returns: str: \\"YES\\" if an edge with both endpoints having the same color exists, otherwise \\"NO\\" for u, v in edges: if colors[u-1] == colors[v-1]: return \\"YES\\" return \\"NO\\""},{"question":"Valeriya is an aspiring software developer and she likes puzzles involving strings and substrings. Recently she encountered a problem with ordered combinations and she needs your help. Valeriya considers a string beautiful if it contains at least one substring which is a palindrome. She needs a program that will tell her, for any given string, if it is beautiful. Consider a string s of length n (1 ≤ n ≤ 10000). Check if it contains at least one palindromic substring. A substring is called a palindrome if it reads the same backward as forward. Input The first line contains an integer t — the number of test cases (1 ≤ t ≤ 100). Each of the next t lines contains a string s of length n. Output For each test case, print \\"YES\\" (without quotes) if the string is beautiful, otherwise print \\"NO\\" (without quotes). Examples Input 3 abc aaa racecar Output NO YES YES Note: In the first case, there are no palindromic substrings. In the second case, \'a\', \'aa\', and \'aaa\' are all palindromic substrings. In the third case, \'racecar\' itself is a palindromic substring.","solution":"def is_beautiful(s: str) -> str: Check if the given string contains at least one palindromic substring. n = len(s) # Function to check if a substring is a palindrome def is_palindrome(sub): return sub == sub[::-1] # Single character substrings are always palindromes if n == 1: return \\"YES\\" # Check for palindromic substrings of length 2 or more for length in range(2, n+1): for start in range(n - length + 1): if is_palindrome(s[start:start+length]): return \\"YES\\" return \\"NO\\" def check_beautiful_strings(t: int, test_cases: list) -> list: Given t test cases, check if each string is beautiful (contains a palindromic substring). results = [] for s in test_cases: results.append(is_beautiful(s)) return results"},{"question":"A sequence of lowercase Latin letters is called a palindrome if it reads the same from left to right and from right to left. For example, \\"ababa\\", \\"racecar\\", \\"a\\" are palindromes and \\"abac\\", \\"hello\\", \\"abc\\" are not. The task is to append the fewest number of characters to the end of a given string to make it a palindrome. Write a program that calculates the minimum number of characters required and outputs the resulting palindrome string. # Input The input consists of a single line containing a non-empty string s of lowercase Latin letters. The length of s is at most 100 . # Output Print the minimum number of characters to append to the string to make it a palindrome along with the resulting palindrome string. # Examples Example 1 Input: ``` abac ``` Output: ``` 3 abacaba ``` Example 2 Input: ``` race ``` Output: ``` 3 racecar ``` Example 3 Input: ``` a ``` Output: ``` 0 a ``` # Note In the first example, by appending \\"aba\\" to \\"abac\\", it becomes the palindrome \\"abacaba\\". In the second example, by appending \\"car\\" to \\"race\\", it becomes the palindrome \\"racecar\\". In the third example, the input string \\"a\\" is already a palindrome and no characters need to be appended.","solution":"def make_palindrome(s): Append the minimum number of characters to the end of the string to make it a palindrome. Return the number of characters added and the resulting palindrome string. def is_palindrome(substring): return substring == substring[::-1] n = len(s) if is_palindrome(s): return 0, s for i in range(n): if is_palindrome(s[i:]): to_add = s[:i][::-1] return len(to_add), s + to_add return len(s), s[::-1]"},{"question":"Rick wants to stock his kitchen with drinks and snacks, but his pantry has limited capacity. There are `n` types of drinks and `m` types of snacks. Each type of drink has a volume `vi` and each type of snack has a volume `wi`. Rick\'s pantry can hold up to `V` volume of drinks and `W` volume of snacks. Rick wants to maximize the number of drink and snack pairs he can stock such that each pair consists of exactly one type of drink and one type of snack. Additionally, the sum of the volume of drinks in the pantry must not exceed `V`, and the sum of the volume of snacks in the pantry must not exceed `W`. Given the volume requirements of each type of drink and snack, determine the maximum number of drink and snack pairs Rick can stock in his pantry. **Input:** - The first line contains three integers `n`, `m`, and `p` (`1 ≤ n, m, p ≤ 1000`), where `n` is the number of types of drinks, `m` is the number of types of snacks, and `p` is the number of drink-snack pairs Rick wants to stock. - The second line contains two integers `V` and `W` (`1 ≤ V, W ≤ 10^6`), where `V` is the maximum volume for drinks and `W` is the maximum volume for snacks in the pantry. - The third line contains `n` integers `v1, v2, ..., vn` where `vi` (`1 ≤ vi ≤ 10^6`) is the volume of the `i`-th type of drink. - The fourth line contains `m` integers `w1, w2, ..., wm` where `wi` (`1 ≤ wi ≤ 10^6`) is the volume of the `i`-th type of snack. **Output:** - Print a single integer representing the maximum number of drink and snack pairs Rick can stock. **Example:** ``` Input: 3 3 2 7 5 3 4 2 5 3 1 Output: 2 ``` **Explanation:** Rick can stock the following pairs: 1. (3, 1): total drink volume = 3, total snack volume = 5. 2. (4, 5): total drink volume = 4, total snack volume = 5. Summing up volumes: - Total drink volume = 3 + 4 = 7, which is within the limit of 7. - Total snack volume = 5 + 0 = 5, which is within the limit of 5. Hence, the maximum number of pairs Rick can stock is `2`.","solution":"def max_drink_snack_pairs(n, m, p, V, W, drinks, snacks): Returns the maximum number of drink and snack pairs Rick can stock such that the sum of the volumes of the drinks does not exceed V and the sum of the volumes of the snacks does not exceed W. drinks.sort() snacks.sort() max_pairs = 0 for i in range(min(n, p)): for j in range(min(m, p)): if drinks[i] <= V and snacks[j] <= W: max_pairs += 1 V -= drinks[i] W -= snacks[j] if max_pairs == p or V < 0 or W < 0: return max_pairs return max_pairs"},{"question":"Lucy is a military strategist preparing for an upcoming battle. She has n units under her command, and each unit can be deployed to a particular zone to maximize defense. Each unit will build a fort in its designated zone. Lucy has a blueprint with the exact time required to complete building the fort for each zone, and it takes exactly 1 hour to deploy a unit to a zone. The i-th unit can be deployed to any one of the zones but each zone has a specified time to complete a fort. Lucy wants to ensure that she has at least k forts completed by specific times to maximize their strategic benefit. The fort building times are strictly increasing. Given the number of units n (1 <= n <= 500), the required number of forts k (1 <= k <= 500), and a list of zone times (1 <= time <= 10^6) in which each zone specifies the completion time of a fort, find the minimum time required to complete building at least k forts. If it is impossible to build at least k forts, return -1. The first line contains two integers n and k, representing the number of units Lucy has and the minimum number of forts that need to be completed. The second line contains n space-separated integers representing the times to complete building the forts in each zone. Print a single integer: the minimum possible time to have at least k forts completed, or -1 if it is not possible to complete k forts. In the first sample, Lucy has 3 units and needs to complete at least 2 forts. The zones have fort completion times of 2, 5, and 7. Lucy can deploy units to complete forts in zones with times 2 and 5, thus meeting her requirement by time 5. In the second sample, Lucy has 4 units and needs to complete at least 3 forts. The zones have fort completion times of 2, 3, 4, and 7. Lucy can deploy units to complete forts in zones with times 2, 3, and 4, meeting the requirement by time 4.","solution":"def min_time_to_complete_forts(n, k, times): Determines the minimum time required to complete at least k forts. :param n: Number of units :param k: Minimum number of forts required :param times: List of times to complete building forts in each zone :return: Minimum possible time to complete at least k forts, or -1 if not possible if k > n: return -1 times.sort() return times[k - 1]"},{"question":"You are given an array of integers which represents the price of a given stock on different days. You want to maximize your profit by completing at most one transaction (i.e., buy one and sell one share of the stock). However, the transaction must follow a cooler period of at least one day, meaning after you sell the stock, you must wait at least one day before you can buy it again. Write a function to find the maximum profit by completing at most one transaction after considering the cooler period. If no profit can be made, return 0. The first line of input contains a single integer n (1 ≤ n ≤ 10^5), representing the number of days. The second line contains n integers, each representing the price of the stock on that day (1 ≤ price ≤ 10^4). Your function should output a single integer, the maximum profit obtainable considering the cooler period, or 0 if no profit can be made. Example: Input 6 1 2 3 0 2 5 Output 5 Input 5 7 1 5 3 6 Output 5 Explanation: In the first example, the maximum profit can be achieved by buying the stock on day 1 (price = 1) and selling it on day 3 (price = 3), then buying the stock again on day 4 (price = 0) and selling it on day 6 (price = 5), making the maximum profit of (3 - 1) + (5 - 0) = 2 + 5 = 7. However, since you can only complete one transaction, the correct profit is the higher single transaction profit achievable which is (5 - 0) = 5. In the second example, the maximum profit is achieved by buying the stock on day 2 (price = 1) and selling it on day 5 (price = 6), making a profit of 5.","solution":"def maxProfitWithCoolerPeriod(prices): Returns the maximum profit achievable with at most one transaction considering a cooling period of one day. If no profit can be made, returns 0. if not prices or len(prices) < 2: return 0 n = len(prices) max_profit = 0 min_price = prices[0] for i in range(1, n): max_profit = max(max_profit, prices[i] - min_price) min_price = min(min_price, prices[i]) return max(0, max_profit)"},{"question":"A mysterious coded message has been discovered in the ancient ruins of Ziron. The message is a list of integers. According to the legend, the message unlocks a secret door if the sum of a subset of these integers equals a mysterious target number. Your task is to determine if it is possible to find a subset of the list such that the sum of the subset equals this target number. The first line of input contains an integer `t` (1 ≤ t ≤ 10) - the number of test cases. For each test case, the first line contains two integers `n` (1 ≤ n ≤ 40) and `k` (1 ≤ k ≤ 10^6) - the number of integers in the list and the target number, respectively. The second line contains `n` integers a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6) - the integers in the list. For each test case, print \\"YES\\" (without quotes) if there is a subset whose sum equals the target number `k`, otherwise print \\"NO\\". Example: Input: 3 5 9 1 2 3 4 5 3 7 1 2 5 4 0 -1 -2 3 1 Output: YES YES YES Explanation: In the first test case, the subset {4, 5} adds up to the target number 9. In the second test case, the subset {2, 5} adds up to the target number 7. In the third test case, the sum of the subset {-1, -2, 3} is exactly 0.","solution":"def can_sum_to_target(nums, target): # Dynamic programming approach with memoization n = len(nums) dp = {0} for num in nums: new_dp = dp.copy() for x in dp: new_sum = x + num if new_sum == target: return \\"YES\\" new_dp.add(new_sum) dp = new_dp return \\"NO\\" def process_test_cases(test_cases): results = [] for n, k, nums in test_cases: results.append(can_sum_to_target(nums, k)) return results"},{"question":"You are given a series of tasks to be completed. Each task has a certain number of prerequisites that must be completed before it can begin. You need to determine if it is possible to complete all tasks, and if so, output a valid order of completion. The first line contains two integers, n (1 le n le 10^5) — the total number of tasks, and m (0 le m le 10^5) — the number of prerequisite pairs. Each of the next m lines contains two integers u and v (1 le u, v le n) indicating that task u must be completed before task v. Output \\"NO\\" if it\'s impossible to complete all tasks. Otherwise, output \\"YES\\" on the first line and a valid order of tasks on the second line. In the first example, there are three tasks with the following prerequisites: 1 -> 3 2 -> 3 A possible valid order of completion is 1 2 3 or 2 1 3. In the second example, it is impossible to complete all tasks due to a circular dependency. Sample Input 1: ``` 3 2 1 3 2 3 ``` Sample Output 1: ``` YES 1 2 3 ``` Sample Input 2: ``` 3 3 1 2 2 3 3 1 ``` Sample Output 2: ``` NO ```","solution":"from collections import defaultdict, deque def find_order_of_tasks(n, m, prereqs): # Create an adjacency list to represent the graph adj_list = defaultdict(list) in_degree = [0] * (n + 1) # To keep track of in-degrees of nodes # Read the prerequisites relationships for u, v in prereqs: adj_list[u].append(v) in_degree[v] += 1 # Queue to maintain nodes with zero in-degrees zero_in_degree_queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: zero_in_degree_queue.append(i) order = [] while zero_in_degree_queue: node = zero_in_degree_queue.popleft() order.append(node) # Decrease the in-degree of the neighboring nodes for neighbor in adj_list[node]: in_degree[neighbor] -= 1 # If in-degree becomes zero, add it to the queue if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) if len(order) == n: return \\"YES\\", order else: return \\"NO\\", [] # Example usage: # n = 3, m = 2, prereqs = [(1, 3), (2, 3)] # print(find_order_of_tasks(n, m, prereqs))"},{"question":"In order to determine the winner of a simple card game between Alice and Bob, they decided to play with a deck of unique cards, each marked with a distinct integer. The game proceeds as follows: 1. Alice and Bob each have their own sequence of cards. 2. They play a series of rounds. In each round, Alice plays the first card from her sequence, and Bob plays the first card from his sequence. 3. The player with the higher card wins the round and takes both cards, placing them at the bottom of their own sequence. 4. If the cards are equal, each player discards their card. 5. The game continues until one of the players can no longer play a card, meaning their sequence is empty. The winner is the player who has cards remaining when the other player runs out of cards, or both players are declared as having tied if they run out of cards simultaneously. Write a function that determines the winner of the card game or whether it is a tie. **Input format:** - The first line contains an integer `t` (1 le t le 1000) — the number of test cases. - For each test case: - The first line contains two integers `n` and `m` (1 le n, m le 100) — the number of cards in Alice\'s and Bob\'s sequences, respectively. - The second line contains `n` distinct integers representing Alice\'s initial sequence of cards. - The third line contains `m` distinct integers representing Bob\'s initial sequence of cards. **Output format:** For each test case, print \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins, or \\"Tie\\" if the game ends in a tie. **Example:** Input: ``` 2 3 3 5 3 7 6 2 4 4 2 9 7 6 5 8 4 ``` Output: ``` Alice Alice ``` **Explanation:** - In the first test case: - Round 1: Alice plays 5, Bob plays 6 (Bob wins and takes both cards). - Round 2: Alice plays 3, Bob plays 2 (Alice wins and takes both cards). - Round 3: Alice plays 7, Bob plays 4 (Alice wins and takes both cards). - Round 4: Alice plays 6, Bob has no cards left (Alice wins). - In the second test case: - Round 1: Alice plays 9, Bob plays 8 (Alice wins and takes both cards). - Round 2: Alice plays 7, Bob plays 4 (Alice wins and takes both cards). - Round 3: Alice plays 6, Bob has no cards left (Alice wins).","solution":"def card_game_winner(t, test_cases): results = [] for case in test_cases: n, m, alice_cards, bob_cards = case while alice_cards and bob_cards: alice_card = alice_cards.pop(0) bob_card = bob_cards.pop(0) if alice_card > bob_card: alice_cards.append(alice_card) alice_cards.append(bob_card) elif bob_card > alice_card: bob_cards.append(bob_card) bob_cards.append(alice_card) if alice_cards and not bob_cards: results.append(\\"Alice\\") elif not alice_cards and bob_cards: results.append(\\"Bob\\") else: results.append(\\"Tie\\") return results"},{"question":"Eureka recently got her dream job as a software developer. She has a habit of frequently using various libraries and functions to make her code efficient. One day, her manager gave her a task to analyze a list of integers and find patterns within a sliding window. The challenge is that Eureka needs to find the maximum sum of a subsequence of the list of integers within any sliding window of a fixed size. Given a list of integers and a sliding window size, Eureka needs to determine the maximum sum that can be achieved by any subsequence of integers within any of the sliding windows. Input: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) — the number of integers in the list and the size of the sliding window, respectively. - The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the list of integers. Output: - A single integer representing the maximum sum of any subsequence within any sliding window of the given size. Example: Input: 6 3 1 2 -1 4 5 -6 Output: 11 Explanation: - The sliding window size is 3. - The possible sliding windows are [1, 2, -1], [2, -1, 4], [-1, 4, 5], and [4, 5, -6]. - The maximum subsequence sums for these windows are: - [1, 2, -1]: 1 + 2 = 3 - [2, -1, 4]: 2 + 4 = 6 - [-1, 4, 5]: 4 + 5 = 9 - [4, 5, -6]: 4 + 5 = 9 - Hence, the result is 9.","solution":"def max_subsequence_sum_within_window(a, k): Returns the maximum sum of any subsequence within any sliding window of size k in the list a. Parameters: a (list): The list of integers. k (int): The size of the sliding window. Returns: int: The maximum sum of any subsequence within any sliding window of size k. n = len(a) max_sum = float(\'-inf\') for i in range(n - k + 1): current_window = a[i:i+k] current_max_sum = sum(x for x in current_window if x > 0) max_sum = max(max_sum, current_max_sum) return max_sum"},{"question":"Chef has a rectangle-shaped sugarcane farm that is represented on a 2D coordinate plane. The farm is defined by two opposite corners, (x1, y1) and (x2, y2), where they form a diagonal of the rectangle. The coordinates are all integers. One day, a severe storm destroyed some sections of the fence enclosing his farm, so Chef has decided to build a new fence around the entire perimeter of the farm boundary. To accomplish this, he needs to calculate the coordinates of all the fence posts that will be placed at each integer point along the perimeter of the rectangle. Help Chef by writing a program that will generate a list of all unique integer-coordinate fence post locations around the rectangle formed by the given two corners. The posts should be listed in a clockwise order starting from (x1, y1). # Input The input consists of one line containing four integers x1, y1, x2, and y2 (−10,000 ≤ x1, y1, x2, y2 ≤ +10,000; x1 ≠ x2, y1 ≠ y2), representing the coordinates of the two opposite corners of the rectangle. # Output Generate the list of fence post coordinates in clockwise order starting from (x1, y1). Each coordinate should be output on a new line as two space-separated integers. # Example Input ``` 1 1 4 3 ``` Output ``` 1 1 2 1 3 1 4 1 4 2 4 3 3 3 2 3 1 3 1 2 ``` # Note - The two corners provided define the rectangle completely without ambiguity. - Ensure no coordinates are repeated in the resulting list of fence posts.","solution":"def generate_fence_posts(x1, y1, x2, y2): Generate all unique integer-coordinate fence post locations around the rectangle boundary formed by (x1, y1) and (x2, y2) in a clockwise order starting from (x1, y1). if x1 > x2: x1, x2 = x2, x1 if y1 > y2: y1, y2 = y2, y1 perimeter_posts = [] # Bottom edge (y1) for x in range(x1, x2 + 1): perimeter_posts.append((x, y1)) # Right edge (x2) for y in range(y1 + 1, y2 + 1): perimeter_posts.append((x2, y)) # Top edge (y2) for x in range(x2 - 1, x1 - 1, -1): perimeter_posts.append((x, y2)) # Left edge (x1) for y in range(y2 - 1, y1, -1): perimeter_posts.append((x1, y)) return perimeter_posts"},{"question":"Given a list of `n` integers, your task is to determine the length of the longest contiguous subsequence where, after sorting, all the elements are consecutive numbers. # Input - The first line contains an integer `n` (1 ≤ n ≤ 200,000), the number of elements in the list. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9), the elements of the list. # Output - Print a single integer, the length of the longest contiguous subsequence that can be sorted into consecutive numbers. # Example Input: ``` 6 1 2 2 3 4 5 ``` Output: ``` 5 ``` Explanation: The longest contiguous subsequence is `[2, 2, 3, 4, 5]` which can be sorted into `[2, 3, 4, 5, 6]` and consists of all consecutive numbers. # Note: The subsequence does not need to be unique; any valid longest contiguous subsequence which can be sorted into consecutive numbers is correct.","solution":"def longest_consecutive_subsequence(arr): Determine the length of the longest contiguous subsequence which, after sorting, all the elements are consecutive numbers. :param arr: List of integers :return: Length of the longest contiguous subsequence if not arr: return 0 arr_set = set(arr) longest_streak = 0 for num in arr: if num - 1 not in arr_set: # Check if it\'s the start of a sequence current_num = num current_streak = 1 while current_num + 1 in arr_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given an array of integers nums and an integer k. Define the distance between two integers as the absolute difference between them. Your task is to find the largest distance between any two distinct elements in the array, but the two elements must be at least k positions away from each other. For example, if the array is [1, 3, 1, 1, 8] and k=2, the largest distance considering the constraint is between 1 (at position 1) and 8 (at position 4) which is |1 - 8| = 7. Note that elements must be separated by at least 2 positions. If it is not possible to find such pair, return -1. The first line of input contains two integers n (2 leq n leq 10^5) — the length of the array, and k (1 leq k leq n-1) — the required minimum distance between the indices. The second line of input contains n integers nums[i] (-10^9 leq nums[i] leq 10^9) — the elements of the array. Output the maximum possible distance under the given condition, or -1 if it\'s not possible to find such a pair. **Example Input** 5 2 1 3 1 1 8 **Example Output** 7","solution":"def largest_distance(nums, k): Returns the largest distance between any two distinct elements in the array that are at least k positions away. If no such pair exists, return -1. max_distance = -1 n = len(nums) for i in range(n): for j in range(i + k, n): max_distance = max(max_distance, abs(nums[i] - nums[j])) return max_distance"},{"question":"In a country far away, there is a powerful wizard known for his ability to manipulate arrays. One day, the wizard decided to play a game with his apprentices to test their skills. The wizard prepared an array of integers and defined a special operation called a \\"wizard step.\\" A wizard step involves taking any two different elements from the array and transforming them into their difference (in absolute value). This process is repeated until the array is reduced to a single element. The goal is to determine the minimum possible value of the final element after performing a series of wizard steps. You are given an array of integers. Your task is to write a program to calculate the minimum possible value of the final element after repeatedly performing the wizard steps. Input: - The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output: - Print one integer — the minimum possible value of the final element after performing the wizard steps. Example: ``` Input: 5 10 6 8 3 2 Output: 1 ``` Explanation: One sequence of wizard steps is as follows: 1. |10 - 6| = 4 2. |4 - 8| = 4 3. |4 - 3| = 1 4. |1 - 2| = 1 Here, the minimum possible value of the final element is 1.","solution":"def min_wizard_step(n, arr): Calculates the minimum possible value of the final element after repeatedly performing wizard steps. Parameters: n (int): The number of elements in the array. arr (list of int): The list of integers in the array. Returns: int: The minimum possible value of the final element after the operations. from functools import reduce from math import gcd return reduce(gcd, arr)"},{"question":"Maria is participating in a competitive baking competition. She is required to create multiple identical batches of cookies using a precise number of ingredients. She has a limited supply of each ingredient and needs to determine how many complete and identical batches she can make. You are given n integers, where the i-th integer represents the amount of the i-th ingredient she has. You are also given another n integers, where the i-th integer represents the amount of the i-th ingredient required for one batch of cookies. Write a program that determines the maximum number of complete batches of cookies Maria can make with her available ingredients. The first line contains a single integer n (1 ≤ n ≤ 20) — the number of different ingredients. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the amount of each ingredient Maria currently has. The third line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 100) — the amount of each ingredient required for one batch of cookies. Print a single integer — the maximum number of complete batches of cookies Maria can make. In the first example, Maria has 5 units of the first ingredient and 10 units of the second ingredient. She needs 2 units of the first ingredient and 5 units of the second ingredient per batch. She can thus make 5/2 = 2 complete batches. In the second example, Maria has 6, 8, and 10 units of the three ingredients and needs 2, 4, and 4 units of each respectively per batch. She can make 6/2 = 3, 8/4 = 2, and 10/4 = 2 batches, so she is limited by the second and third ingredients to a maximum of 2 complete batches.","solution":"def max_batches(n, available, required): return min(available[i] // required[i] for i in range(n))"},{"question":"You are given an array of integers representing the amount of gold in gold mines. You need to help a miner maximize the gold they can collect given that the miner can start at any mine but can only move to an adjacent mine. However, the miner cannot revisit a mine once it has been left. The miner can continue moving indefinitely as long as there are adjacent mines to move to. The task is to calculate the maximum amount of gold the miner can collect. The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of gold mines. The second line contains n non-negative integers g1, g2, ..., gn (0 ≤ gi ≤ 10000) representing the amount of gold in each mine. Print a single integer — the maximum amount of gold the miner can collect. Consider the first sample. The maximum amount of gold can be collected by starting at the first mine (5), moving to the second mine (10), and collecting all the gold without skipping any adjacent mines. The total would be 5 + 10 + 9 + 0 = 24. **Example** Input: ``` 5 5 10 9 0 6 ``` Output: ``` 24 ```","solution":"def max_gold(n, gold_mines): if n == 0: return 0 # Early return if there is only one mine if n == 1: return gold_mines[0] max_gold = 0 for i in range(n): current_sum = 0 for j in range(i, n): current_sum += gold_mines[j] if current_sum > max_gold: max_gold = current_sum return max_gold # Example usage: n = 5 gold_mines = [5, 10, 9, 0, 6] print(max_gold(n, gold_mines)) # Output: 30"},{"question":"Aksaray, an ancient city, has recently discovered a network of underground tunnels connecting various sites. The city council has tasked Azra, a local historian, with documenting the connectivity of these tunnels. Each site is represented as a node, and each tunnel connecting two sites is represented as an undirected edge between two nodes. The connectivity network can be represented as a graph where nodes are sites and edges are tunnels. Azra has to determine the following: 1. Whether all sites are connected, i.e., if the entire graph is fully connected. 2. Identify any sites that, if removed along with their connections, would divide the remaining network into two or more disconnected subgraphs. These critical sites are also known as articulation points. Help Azra write a program to assist her with these tasks. # Input - The first line contains two integers, `n` (1 ≤ n ≤ 1000) and `m` (0 ≤ m ≤ 5000), representing the number of nodes (sites) and the number of edges (tunnels), respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), indicating an undirected edge between nodes `u` and `v`. # Output - On the first line, print \\"Yes\\" if all sites are connected, otherwise print \\"No\\". - On the second line, print the number of critical sites. If there are no critical sites, print 0. - On the third line, print a list of all critical sites in increasing order of their node numbers, separated by spaces. If there are no critical sites, leave this line blank. # Example Input ``` 5 5 1 2 1 3 2 3 3 4 4 5 ``` Output ``` Yes 2 3 4 ``` Explanation In this example, the graph is fully connected. Removing site 3 or site 4 would result in the graph being divided into two separate subgraphs, thus they are critical sites.","solution":"def find_articulation_points_and_check_connected(n, edges): from collections import defaultdict def dfs(v, discovery_time, low, visited, parent, articulation_points, adj, time): children = 0 visited[v] = True discovery_time[v] = low[v] = time[0] time[0] += 1 for to in adj[v]: if not visited[to]: parent[to] = v children += 1 dfs(to, discovery_time, low, visited, parent, articulation_points, adj, time) # Check if the subtree rooted at to has a connection back to one of ancestors of v low[v] = min(low[v], low[to]) # (1) v is an articulation point if it is root of DFS tree and has two or more children. if parent[v] is None and children > 1: articulation_points.add(v) # (2) v is an articulation point if it is not root and low value of one of its child is more # than discovery value of v. if parent[v] is not None and low[to] >= discovery_time[v]: articulation_points.add(v) elif to != parent[v]: low[v] = min(low[v], discovery_time[to]) # Construct adjacency list adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # Checking connectivity visited = [False] * (n + 1) discovery_time = [float(\'inf\')] * (n + 1) low = [float(\'inf\')] * (n + 1) parent = [None] * (n + 1) articulation_points = set() time = [0] # Perform a DFS from node 1 (assuming nodes are 1-indexed) count = 0 for i in range(1, n + 1): if not visited[i]: dfs(i, discovery_time, low, visited, parent, articulation_points, adj, time) count += 1 connected = count == 1 return \\"Yes\\" if connected else \\"No\\", len(articulation_points), sorted(articulation_points) # The main function that reads input and calls the processing function def main(): import sys input = sys.stdin.read data = input().split() n, m = int(data[0]), int(data[1]) edges = [tuple(map(int, data[i:i+2])) for i in range(2, 2 * m + 2, 2)] is_connected, num_articulation_points, articulation_points = find_articulation_points_and_check_connected(n, edges) print(is_connected) print(num_articulation_points) if num_articulation_points > 0: print(\\" \\".join(map(str, articulation_points)))"},{"question":"Consider a robot that is initially located at the origin (0, 0) on a Cartesian plane. The robot can move in four possible directions: up, down, left, and right. The robot\'s movement is controlled by a series of commands. Each command is one of the following letters: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). After processing a sequence of commands, we want to determine whether the robot returns to the origin (0, 0). You need to implement a function that takes a string `commands` as its input and returns a boolean indicating whether the robot returns to the origin after executing all the commands. **Function Signature:** ```python def judge_circle(commands: str) -> bool: ``` **Input:** - A string `commands` consisting of the characters \'U\', \'D\', \'L\', and \'R\'. - The length of the string is between 1 and 10^4 inclusively. **Output:** - Returns `True` if the robot returns to the origin after executing all the commands, otherwise, returns `False`. **Examples:** Input: ``` \\"UD\\" ``` Output: ``` True ``` Input: ``` \\"LL\\" ``` Output: ``` False ``` **Note:** In the first example, the robot moves up and then down, which moves it back to the origin. In the second example, the robot moves left twice and does not return to the origin. Hint: Consider the effect of each command on the robot\'s coordinates and check if the robot returns to the origin by the end of the command sequence.","solution":"def judge_circle(commands: str) -> bool: # Initialize starting position x, y = 0, 0 # Loop through each command for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 # Check if the robot is back at the origin return x == 0 and y == 0"},{"question":"Imagine you are working with a delivery company that routes packages across various cities. The company\'s routing system is modeled as a directed graph, where each node represents a city, and each directed edge represents a road connecting two cities along with the time it takes to travel that road. The delivery company wants to determine the shortest time required to deliver a package from one city to another. Given the routing network of cities and the travel times of the roads, you need to write a program to find the shortest travel time between two specified cities. The first line of input contains two integers `n` and `m` — the number of cities and the number of roads respectively (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000). Each of the next `m` lines contains three integers `u`, `v`, and `t` — a directed road from city `u` to city `v` with a travel time `t` (1 ≤ u, v ≤ n, 1 ≤ t ≤ 100). Then, the last line contains two integers `start` and `end` — the source city and the destination city (1 ≤ start, end ≤ n). If there is no path from `start` to `end`, print \\"NO PATH\\". Otherwise, print the shortest travel time from `start` to `end`. # Example Input: ``` 5 7 1 2 10 1 3 5 2 3 2 3 2 3 2 4 1 4 5 4 3 5 7 1 5 ``` Output: ``` 12 ``` # Explanation In the given example, there are 5 cities and 7 roads. The shortest travel time from city 1 to city 5 is 12. The optimal path is 1 → 3 → 5.","solution":"import heapq def find_shortest_path(n, m, edges, start, end): # Create the graph using adjacency list representation graph = {i: [] for i in range(1, n + 1)} for u, v, t in edges: graph[u].append((v, t)) # Use Dijkstra\'s algorithm to find the shortest path pq = [(0, start)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 while pq: current_distance, current_node = heapq.heappop(pq) # If we reach the end node, return the distance if current_node == end: return current_distance # If the current_distance is greater than recorded, skip it if current_distance > distances[current_node]: continue # Explore neighbors for neighbor, weight in graph[current_node]: distance = current_distance + weight # Only consider this new path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) # If the end node is still unreachable, return \\"NO PATH\\" return \\"NO PATH\\" if distances[end] == float(\'inf\') else distances[end]"},{"question":"Polycarpus has a long piece of wire, and he wants to cut it into several smaller pieces. Each time he cuts the wire, he decides whether he wants to maximize or minimize the length of the resulting pieces. Specifically, he is given two integers, `m` and `n`, where: - `m` is the length of the wire, - `n` is the number of pieces he needs to cut it into. He wants to cut the wire in such a way that the difference between the longest and shortest pieces is minimized. The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each of the next `t` lines contains two integers `m` and `n` (1 ≤ m ≤ 10^9, 1 ≤ n ≤ 1000). For each test case, output the minimum possible difference between the longest and shortest pieces after cutting the wire into `n` pieces. Input: ``` 2 10 3 12 4 ``` Output: ``` 1 1 ``` Explanation: In the first test case, the best way to cut the wire of length 10 into 3 pieces is to create two pieces of length 3 and one piece of length 4, resulting in the minimal difference of 1 between the longest and shortest pieces. In the second test case, the best way to cut the wire of length 12 into 4 pieces is to create four pieces of length 3, resulting in no difference between the longest and shortest pieces.","solution":"def min_length_difference(t, cases): Returns the minimum possible difference between the longest and shortest pieces for each test case. Args: t : int Number of test cases. cases : list of tuples Each tuple contains two integers `m` (length of the wire) and `n` (number of pieces). Returns: list of int Minimum possible differences for each test case. results = [] for m, n in cases: if n == 1: # If n is 1, no cut is needed so difference is 0. results.append(0) continue # The key is to divide the wire as evenly as possible. base_length = m // n remainder = m % n if remainder == 0: # If the wire can be evenly divided, the difference is 0. results.append(0) else: # If not, the difference will be 1. results.append(1) return results"},{"question":"X-Y Inc. is developing a new inventory system for its warehouse. Part of the task is to create a system that can predict the minimum number of storage units required to store a given set of items. Each item has a specific volume, and each storage unit has a maximum capacity. You are given a list of n integers representing the volumes of the items and a single integer representing the maximum capacity of a storage unit. Your task is to determine the minimum number of storage units needed to store all items such that the total volume of items in each storage unit does not exceed its capacity. You can assume that the items can be rearranged in any order within the storage units. The first line contains two integers n (1 ≤ n ≤ 10^5) and c (1 ≤ c ≤ 10^9) representing the number of items and the capacity of each storage unit, respectively. The second line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 10^9) representing the volumes of the items. Print a single integer — the minimum number of storage units required to store all items. Example: Input: 5 10 2 3 8 4 5 Output: 3 Explanation: In this example, the minimum number of storage units required is 3. One possible way to distribute the items is as follows: - Storage unit 1: 8, 2 (total volume = 10) - Storage unit 2: 5, 3 (total volume = 8) - Storage unit 3: 4 (total volume = 4)","solution":"def min_storage_units(volumes, capacity): Calculates the minimum number of storage units needed to store all items. Parameters: volumes (list of int): List of item volumes. capacity (int): Maximum capacity of a single storage unit. Returns: int: Minimum number of storage units required. # Sort the items by volume in descending order volumes.sort(reverse=True) # Use a list to keep track of remaining capacities of storage units units = [] for volume in volumes: placed = False for i in range(len(units)): if units[i] >= volume: units[i] -= volume placed = True break if not placed: # If the item couldn\'t be placed in any existing unit, create a new unit units.append(capacity - volume) return len(units)"},{"question":"You have been given an array of n integers. You need to determine how many distinct pairs (i, j) exist in the array such that i < j and the sum of the elements at these indices is even. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of integers in the array. The second line contains the n integers of the array (1 ≤ array[i] ≤ 100,000), separated by spaces. Print a single integer, the number of distinct (i, j) pairs such that i < j and the sum of array[i] and array[j] is even. Sample Input 1: 5 1 2 3 4 5 Sample Output 1: 4 Sample Input 2: 6 2 4 6 8 10 12 Sample Output 2: 15 Explanation: In the first sample, the valid pairs are (1, 3), (1, 5), (2, 4), and (3, 5), making a total of 4 pairs with even sums. In the second sample, all pairs are valid since all numbers are even, making all pairs in this fully even set result in even sums. The total number of ways to choose 2 out of 6 items is 6 choose 2, which is 15.","solution":"def count_even_sum_pairs(arr): Returns the number of distinct pairs (i, j) in the array such that i < j and the sum of arr[i] and arr[j] is even. even_count = 0 odd_count = 0 for num in arr: if num % 2 == 0: even_count += 1 else: odd_count += 1 # The number of valid pairs from evens and odds even_pairs = (even_count * (even_count - 1)) // 2 odd_pairs = (odd_count * (odd_count - 1)) // 2 return even_pairs + odd_pairs"},{"question":"Given a string `s` consisting of only lowercase alphabetical characters and a character `c`, find the longest substring of `s` that contains no occurrences of the character `c`. The first line of the input contains the string `s` (1 ≤ |s| ≤ 10^5), and the second line contains the character `c` which will be a lowercase alphabetical character. Output the length of the longest substring of `s` that contains no occurrences of the character `c`. **Example:** **Input:** ``` abacabad c ``` **Output:** ``` 4 ``` **Explanation:** The longest substrings without \'c\' are \\"ab\\" and \\"abad\\", both with length 4.","solution":"def longest_substring_without_char(s, c): Returns the length of the longest substring of `s` that contains no occurrences of the character `c`. max_length = 0 current_length = 0 for char in s: if char == c: max_length = max(max_length, current_length) current_length = 0 else: current_length += 1 # Check the last segment max_length = max(max_length, current_length) return max_length"},{"question":"You are tasked with hosting an online multiplayer game where players can join different servers. Each server has a maximum capacity, and players must join according to the server capacity. Given a set of servers and their maximum capacities, as well as a list of player IDs trying to join, your objective is to distribute the players across the servers efficiently, ensuring that no server exceeds its maximum capacity. Write a function that takes the maximum capacity of each server and a list of player IDs as input and returns a list of lists, where each inner list contains the player IDs of the players assigned to that server. Aim to assign players to the first available server that has the capacity for that player and move to the next server if the current server reaches its capacity. The function signature should be: ```python def distribute_players(capacities: List[int], players: List[int]) -> List[List[int]]: ``` # Input - `capacities`: A list of integers where each integer represents the maximum capacity of a server. - `players`: A list of integers where each integer represents a player\'s ID. # Output - A list of lists, where each list contains the player IDs assigned to that server in the order they were added. Each sublist should not exceed the corresponding capacity. # Constraints - The length of `capacities` will be at most 100. - The total number of players will not exceed 10^4. - Player IDs are unique integers. # Example ```python capacities = [4, 2, 3] players = [101, 102, 103, 104, 105, 106, 107, 108, 109] # Expected output: # [ # [101, 102, 103, 104], # [105, 106], # [107, 108, 109] # ] print(distribute_players(capacities, players)) ```","solution":"from typing import List def distribute_players(capacities: List[int], players: List[int]) -> List[List[int]]: Distribute players across servers based on server capacities. Parameters: capacities (List[int]): List of server capacities. players (List[int]): List of player IDs. Returns: List[List[int]]: A list of lists where each inner list contains the player IDs assigned to that server. servers = [[] for _ in capacities] server_index = 0 for player in players: while server_index < len(capacities) and len(servers[server_index]) >= capacities[server_index]: server_index += 1 if server_index < len(capacities): servers[server_index].append(player) return servers"},{"question":"In a hypothetical kingdom, there are \\"n\\" towns (numbered 1 through n) and \\"m\\" direct roads connecting some pairs of different towns. Each road is bidirectional and has an associated travel time. The kingdom\'s king wants to build a high-speed railway system that connects all towns with the minimum total travel time without using any cycles (to prevent unnecessary travel). Given the current road network of the kingdom, determine the minimum travel time required to connect all towns using the high-speed railway system described above. Note that if it is impossible to connect all towns (i.e., the road network is disconnected), output -1. The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of towns and the number of roads, respectively. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6), which represents a direct road between towns u and v with a travel time of w. Output a single integer — the minimum travel time required to connect all towns using the high-speed railway system. If it is impossible to connect all the towns, output -1. **Example 1:** Input: ``` 4 4 1 2 1 2 3 2 3 4 3 4 1 4 ``` Output: ``` 6 ``` **Example 2:** Input: ``` 4 2 1 2 1 3 4 1 ``` Output: ``` -1 ``` In the first example, you can form a minimum spanning tree connecting all towns with a total travel time of 6 (using roads 1-2, 2-3, and 3-4). In the second example, it is impossible to connect all towns because the road network is disconnected.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) # path compression return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): edges.sort(key=lambda x: x[2]) parent = [i for i in range(n + 1)] rank = [0] * (n + 1) mst_cost = 0 mst_edges = 0 for u, v, w in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += w mst_edges += 1 if mst_edges == n - 1: break if mst_edges != n - 1: return -1 return mst_cost def minimum_travel_time(n, m, roads): if n == 1: return 0 if m == 0 else min([w for _, _, w in roads]) # single town edge case handling edges = [] for road in roads: u, v, w = map(int, road) edges.append((u, v, w)) return kruskal(n, edges)"},{"question":"Given a string s and a string t, find the minimum window in s which will contain all the characters in t in complexity O(n). If there is no such window in s that covers all characters in t, return the empty string \\"\\". Note that if there is such a window, it is guaranteed that there will always be only one unique minimum window in s. The input strings are non-empty and consist only of lowercase English letters. # Input - A string s - A string t # Output - A string denoting the minimum window in s that contains all the characters of t. # Example Input: ``` s: \\"ADOBECODEBANC\\" t: \\"ABC\\" ``` Output: ``` \\"BANC\\" ``` Input: ``` s: \\"a\\" t: \\"a\\" ``` Output: ``` \\"a\\" ``` # Constraints - The length of both strings s and t will be at most 10^5. - The input strings will consist of lowercase English letters only.","solution":"from collections import Counter, defaultdict def min_window(s, t): if not s or not t: return \\"\\" t_count = Counter(t) current_count = defaultdict(int) required = len(t_count) formed = 0 left = 0 right = 0 min_length = float(\\"inf\\") min_window = \\"\\" while right < len(s): char = s[right] current_count[char] += 1 if char in t_count and current_count[char] == t_count[char]: formed += 1 while left <= right and formed == required: char = s[left] if right - left + 1 < min_length: min_length = right - left + 1 min_window = s[left:right + 1] current_count[char] -= 1 if char in t_count and current_count[char] < t_count[char]: formed -= 1 left += 1 right += 1 return min_window"},{"question":"You are given a string, and you need to perform operations to convert it into a palindrome. A palindrome is a string that reads the same backward as forward. In a single operation, you can remove any one character from the string. Determine the minimum number of operations required to make the string a palindrome. The input consists of a single line containing a string s (1 leq |s| leq 2000) which consists of lowercase Latin letters. Output a single integer, the minimum number of operations required to make the string a palindrome. For example: - Input: abcba Output: 0 - Input: abcd Output: 3","solution":"def min_removals_to_palindrome(s): Returns the minimum number of removals required to make the string a palindrome. n = len(s) # Create a table to store results of subproblems dp = [[0 for _ in range(n)] for _ in range(n)] # Build the table. The bottom-up approach is used here. for gap in range(1, n): for l in range(n - gap): r = l + gap if s[l] == s[r]: dp[l][r] = dp[l + 1][r - 1] else: dp[l][r] = 1 + min(dp[l + 1][r], dp[l][r - 1]) # The value at dp[0][n-1] will be our answer. return dp[0][n-1]"},{"question":"You are given an array of integers a consisting of n elements. You need to determine the minimum number of operations required to make all the array elements equal. In one operation, you can select any two adjacent elements and add 1 to both of them or subtract 1 from both of them. The input consists of multiple test cases. The first line contains an integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains an integer n (2 le n le 50) — the number of elements in the array a. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the array. For each test case, output the minimum number of operations required to make all elements in the array equal. Example: Input: ``` 2 3 1 3 5 4 2 2 2 2 ``` Output: ``` 2 0 ``` Explanation: In the first test case, you can make the array elements equal by performing the following operations: 1. Choose elements 1 and 3, add 1 to both: [2, 4, 5] 2. Choose elements 2 and 4, subtract 1 from both: [2, 3, 4] 3. Choose elements 3 and 4, subtract 1 from both: [2, 3, 3] 4. Choose elements 3 and 4, subtract 1 from both: [2, 2, 2] So a minimum of 2 operations is needed to make all elements equal. In the second test case, all the elements are already equal, so no operations are needed.","solution":"def min_operations_to_equal_elements(t, test_cases): results = [] for case in test_cases: n, a = case min_val = min(a) max_val = max(a) difference = max_val - min_val results.append(difference) return results"},{"question":"In a magical land, there are n cities connected by m roads. Each road is bidirectional and has a certain magical energy cost associated with it. However, due to a cosmic event, some of these roads suddenly have energy boosters attached, and the cost to travel through them is reduced by exactly half. The creatures of this land want to know the minimum magical energy required to travel from the capital city (city 1) to the destination city (city n). Formally, each road between cities u and v has an original magical energy cost of w. Some roads are labeled as boosted, meaning their cost is halved to w/2. Write a function to compute the minimum magical energy required to travel from city 1 to city n. The input consists of: - The first line contains three integers n, m, b (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000, 1 ≤ b ≤ m) — the number of cities, the number of roads, and the number of boosted roads, respectively. - The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) — describing a road between cities u and v with energy cost w. - The next b lines each contain a single integer x (1 ≤ x ≤ m) — indicating the x-th road is a boosted road. Output a single integer — the minimum magical energy required to travel from city 1 to city n. If there is no way to travel from city 1 to city n, output -1. Example: Input: 6 7 2 1 2 10 1 3 20 2 3 5 2 4 7 3 5 10 4 6 2 5 6 3 1 4 Output: 10 Explanation: The roads between city 1 and city 2, and city 4 and city 6 have their costs halved due to boosters. The minimum path from city 1 to city 6 would be 1 → 2 → 4 → 6, with a total cost of 10 (5 from 1 → 2 as it\'s boosted, then 7 for 2 → 4, and finally 1 from 4 → 6 as it\'s boosted).","solution":"import heapq def minimum_magical_energy(n, m, b, roads, boosted_roads): graph = [[] for _ in range(n)] for i in range(m): u, v, w = roads[i] if i + 1 in boosted_roads: w = w // 2 graph[u - 1].append((w, v - 1)) graph[v - 1].append((w, u - 1)) def dijkstra(start, end): pq = [(0, start)] dist = [float(\'inf\')] * n dist[start] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_node == end: return current_distance if current_distance > dist[current_node]: continue for weight, neighbor in graph[current_node]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 return dijkstra(0, n - 1)"},{"question":"There is a popular game named \\"Treasure Hunt\\" that Alice and Bob like to play. The game involves a grid with dimensions m rows and n columns. Each cell in the grid either holds a treasure or is empty. The goal is to find the maximum number of treasures that Alice and Bob can collect if they start from the top-left corner and the bottom-right corner of the grid, respectively. Alice can only move right or down, and Bob can only move left or up. They can collect treasures by visiting cells where treasures are located, and a cell can only be visited by one person to collect the treasure if there is one. Determine the maximum number of treasures Alice and Bob can collect together. The first line contains two integers m and n (1 ≤ m, n ≤ 50) – the number of rows and columns of the grid. The next m lines each contain n characters, either \'T\' for a treasure or \'.\' for an empty cell. Output one integer – the maximum number of treasures Alice and Bob can collect together. Example: Input: 3 3 T.T T.. ..T Output: 3 In the first example, Alice can go right and down, collecting the treasures in cells (1,1). Bob can collect treasures in cells (3,3) and (3,1) by going up and left. Thus, they collect 3 treasures in total. In the second example, Alice can only collect the treasure at (1,1) and (2,1). Bob collects the treasure at (3,3). Thus, they collect 2 treasures in total. In the third example, Alice collects all three treasures by moving right then down, and Bob doesn\'t participate as Alice has already collected all treasures on her own. Thus, they collect 3 treasures in total.","solution":"def max_treasures(m, n, grid): dp_alice = [[0] * n for _ in range(m)] dp_bob = [[0] * n for _ in range(m)] # Fill Alice\'s DP table for i in range(m): for j in range(n): if grid[i][j] == \'T\': dp_alice[i][j] = 1 if i > 0: dp_alice[i][j] += dp_alice[i-1][j] if j > 0: dp_alice[i][j] += dp_alice[i][j-1] - (dp_alice[i-1][j] if i > 0 else 0) # Fill Bob\'s DP table for i in range(m-1, -1, -1): for j in range(n-1, -1, -1): if grid[i][j] == \'T\': dp_bob[i][j] = 1 if i < m-1: dp_bob[i][j] += dp_bob[i+1][j] if j < n-1: dp_bob[i][j] += dp_bob[i][j+1] - (dp_bob[i+1][j] if i < m-1 else 0) max_treasure = 0 for i in range(m): for j in range(n): if grid[i][j] == \'T\': max_treasure = max(max_treasure, dp_alice[i][j] + dp_bob[i][j] - 1) else: max_treasure = max(max_treasure, dp_alice[i][j] + dp_bob[i][j]) return max_treasure # Example usage: # m, n = 3, 3 # grid = [\'T.T\', \'T..\', \'..T\'] # print(max_treasures(m, n, grid))"},{"question":"Imagine you are playing a game where you need to collect stars. The game is played on a 2D grid with dimensions n x m. Each cell in the grid represents either a blocked cell (designated by \'#\') or an open cell (designated by \'.\'). You can move from an open cell to any of the 4 adjacent cells that are also open (up, down, left, right). You begin at the top-left corner of the grid (cell (1, 1)) and your goal is to move to the bottom-right corner of the grid (cell (n, m)). At each step, you can move to an adjacent cell, collecting stars if the cell has one. However, there is a twist: at every second cell you move to, you must collect exactly one star. You cannot collect two stars in consecutive steps, and you must collect one star for every other step you take. Determine the minimum number of cells you need to pass through to successfully collect the desired number of stars and reach the bottom-right corner. If it is not possible to reach the target cell while adhering to the rules, output -1. The first line of input contains two integers n and m (2 ≤ n, m ≤ 500) — the number of rows and columns of the grid. Each of the next n lines contains a string of length m consisting of characters \'#\' or \'.\'. Output one integer — the minimum number of cells needed to pass through to reach cell (n, m) while following the rules described. If it is impossible, output -1. **Example:** Input: 4 4 .... .#.. ..#. .... Output: 7 In the example, a valid path could be (1,1)->(1,2)->(2,2)->(3,2)->(4,2)->(4,3)->(4,4) where every second move collects a star.","solution":"from queue import Queue def min_cells_to_collect_stars(grid, n, m): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Create a 3D visited array to mark cells as visited visited = [[[False, False] for _ in range(m)] for _ in range(n)] q = Queue() # Start from the top-left corner with step parity 0 (not expecting a star) q.put((0, 0, 0, 1)) # (current row, current column, current parity, steps count) visited[0][0][0] = True while not q.empty(): x, y, parity, steps = q.get() # If reached bottom-right corner if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\': new_parity = (parity + 1) % 2 if not visited[nx][ny][new_parity]: visited[nx][ny][new_parity] = True q.put((nx, ny, new_parity, steps + 1)) return -1 # Function to read input, process the grid and return the result def game_grid(input_str): input_list = input_str.split(\\"n\\") n, m = map(int, input_list[0].split()) grid = [list(row) for row in input_list[1:n+1]] return min_cells_to_collect_stars(grid, n, m)"},{"question":"The coding course you are designing to be used by Meka-Naruto came under attack by hackers who compromised the security system. To protect his students, Meka-Naruto has to isolate important nodes in the network from the rest. Meka-Naruto has a directed graph with `n` nodes and `m` edges. Nodes are numbered from `1` to `n`. He needs to identify the minimum number of nodes to remove in order to disconnect a given target node `t` from node `1`. Write a function that, given `n`, `m`, the list of edges, and the target node `t`, returns the minimum number of nodes that need to be removed to ensure there is no path from node `1` to node `t`. If it is not possible to disconnect node `t` from node `1`, return `-1`. The first line of the input contains four integers `n`, `m`, `t` and `s` (2 leq n leq 1000, 1 leq m leq 5000, 1 leq t leq n, 1 leq s leq n) denoting the number of nodes, the number of edges, node `t`, and source node `s`. Each of the next `m` lines contains two integers `u` and `v` (1 leq u, v leq n), indicating there is a directed edge from node `u` to node `v`. Output the minimum number of nodes that need to be removed to disconnect node `t` from node `1`, or `-1` if it\'s not possible. # Sample Input ` 5 6 5 1 1 2 2 3 3 4 4 5 1 3 2 4 ` # Sample Output ` 1 ` Explanation: Removing node `3` we can ensure that node `5` is not reachable from node `1`. # Note You can remove the node `u` from the graph by disconnecting all outbound and inbound edges from that node. # Constraints: - The graph may contain cycles. - The graph might be disconnected.","solution":"def min_nodes_to_disconnect(n, m, t, s, edges): from collections import defaultdict, deque # Convert to zero-indexed s -= 1 t -= 1 # Build graph using adjacency lists graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: u -= 1 v -= 1 graph[u].append(v) reverse_graph[v].append(u) # BFS to find all nodes that can reach target t def bfs(start_node, graph): visited = set() queue = deque([start_node]) while queue: node = queue.popleft() if node in visited: continue visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited # Use BFS to find all nodes reachable from the start node and all nodes that can reach to t nodes_from_s = bfs(s, graph) nodes_to_t = bfs(t, reverse_graph) # Intersection of nodes reachable from start node and nodes that can reach t critical_nodes = nodes_from_s.intersection(nodes_to_t) if t not in critical_nodes: return -1 # t is not reachable from s # Minimum vertex cut problem, reduced to single node for node in critical_nodes: if node == t: continue # Remove node and see if we can reach t new_graph = defaultdict(list) for u, v in edges: u -= 1 v -= 1 if u == node or v == node: continue new_graph[u].append(v) new_nodes_from_s = bfs(s, new_graph) if t not in new_nodes_from_s: return 1 return -1 # Test the function with sample input n = 5 m = 6 t = 5 s = 1 edges = [(1, 2), (2, 3), (3, 4), (4, 5), (1, 3), (2, 4)] print(min_nodes_to_disconnect(n, m, t, s, edges)) # Output: 1"},{"question":"Given a string of lowercase Latin letters, you need to compress it in a way that consecutive identical characters are represented by the character followed by the number of occurrences. If a character appears only once, it should be represented by the character itself without the number \'1\'. For example, the string \\"aaabbc\\" should be compressed to \\"a3b2c\\" and the string \\"abcd\\" should be compressed to \\"abcd\\". Write a program to compress a given string as described above. Input: - A single line containing a string consisting of lowercase Latin letters. The length of the string is between 1 and 100, inclusive. Output: - A single line containing the compressed string. Example: Input: aaabbc Output: a3b2c Input: abcd Output: abcd Explanation of the examples: 1. In the first example, \'a\' appears 3 times consecutively, \'b\' appears 2 times consecutively, and \'c\' appears once. So the compressed form is \\"a3b2c\\". 2. In the second example, all characters appear only once, so the compressed form is the same as the original string \\"abcd\\".","solution":"def compress_string(s): Compresses a string such that consecutive identical characters are replaced by the character followed by the count of occurrences. Single occurrence does not show the count. Args: s (str): Input string consisting of lowercase Latin letters Returns: str: Compressed string if not s: return \\"\\" compressed = [] count = 1 prev_char = s[0] for i in range(1, len(s)): if s[i] == prev_char: count += 1 else: if count > 1: compressed.append(f\\"{prev_char}{count}\\") else: compressed.append(prev_char) prev_char = s[i] count = 1 if count > 1: compressed.append(f\\"{prev_char}{count}\\") else: compressed.append(prev_char) return \'\'.join(compressed)"},{"question":"You are working on a project for a popular streaming service. Your current task is to implement a feature that distributes free trial subscriptions to users based on their activity. Given the activity logs of users and a threshold, you need to determine which users should receive a free trial. The activity log contains records of user actions in the format `timestamp user_id action`, where `timestamp` is a positive integer indicating the time of the action, `user_id` is a unique identifier for each user, and `action` is a string describing the action taken by the user. Each user should receive a free trial if they have performed at least `k` different types of actions within a time window of the past `t` minutes at any point in the log. Write a program that, given the log, the threshold for different types of actions `k`, and the time window `t`, determines which users qualify for free trials. The first line of input contains three integers `n`, `k`, and `t` (1 ≤ n ≤ 1000, 1 ≤ k ≤ 50, 1 ≤ t ≤ 1000), where `n` is the number of log entries. The next `n` lines each contain an activity log entry in the format of `timestamp user_id action` (1 ≤ timestamp ≤ 1000000, user_id is a string of lowercase English letters and digits with length up to 15, action is a string of lowercase English letters with length up to 20). Output the list of user_ids that should receive a free trial, in lexicographical order. Example: ``` input 6 2 10 1 user1 play 2 user2 play 3 user1 pause 11 user1 stop 12 user3 play 13 user3 pause output user1 user3 ``` Explanation: - user1 has actions [play, pause, stop] at timestamps [1, 3, 11], which includes at least 2 different actions (play, pause) within the time window of 10 minutes. - user3 has actions [play, pause] at timestamps [12, 13], which includes 2 different actions within the time window of 10 minutes. - user2 only has one action [play], which does not meet the threshold of 2 different actions within any time window of 10 minutes.","solution":"import collections def free_trial_users(logs, k, t): Determine which users should receive a free trial based on their activity logs. def qualify_actions(actions, k, window): action_count = collections.defaultdict(int) unique_actions = set() i = 0 for j in range(len(actions)): timestamp, action = actions[j] unique_actions.add(action) action_count[action] += 1 while actions[j][0] - actions[i][0] > window: action_count[actions[i][1]] -= 1 if action_count[actions[i][1]] == 0: unique_actions.remove(actions[i][1]) i += 1 if len(unique_actions) >= k: return True return False # Parse the logs and sort by timestamp parsed_logs = [] for log in logs: timestamp, user_id, action = log.split() parsed_logs.append((int(timestamp), user_id, action)) parsed_logs.sort() # Organize user actions user_actions = collections.defaultdict(list) for timestamp, user_id, action in parsed_logs: user_actions[user_id].append((timestamp, action)) # Determine users who qualify for free trial qualified_users = [] for user_id, actions in user_actions.items(): if qualify_actions(actions, k, t): qualified_users.append(user_id) return sorted(qualified_users)"},{"question":"Stella loves creating themed digital photo albums to cherish her memories. She has photographs labeled from 1 to n. Stella wants to arrange these photographs in such a way that the differences between the positions of every two consecutive photographs in the album are minimized. Formally, let p_1, p_2, ldots, p_n be the positions of the photographs in the album. Stella wants to minimize the value of max_{1 le i < n} |p_{i+1} - p_i|. Help Stella to find such an arrangement of the photographs that minimizes this value. # Input: The input consists of multiple test cases. The first line contains an integer t (1 le t le 5000), indicating the number of test cases. Each of the next t test cases contains: - A single integer n (2 le n le 10^5) — the number of photographs. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the costs associated with each photograph. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. # Output: For each test case, output a single line containing n integers, denoting the arrangement of the photographs that minimizes the value of max_{1 le i < n} |p_{i+1} - p_i|. # Example: Input: ``` 2 5 4 2 1 3 5 4 7 3 2 8 ``` Output: ``` 1 2 3 4 5 2 3 7 8 ``` # Note: In the first test case, the differences between consecutive positions are minimized for the arrangement [1, 2, 3, 4, 5]. In the second test case, the differences between consecutive positions are minimized for the arrangement [2, 3, 7, 8].","solution":"def minimize_diff(arr): This function takes a list of integers arr and returns a new list where the differences between the positions of consecutive elements are minimized by sorting the array. return sorted(arr) def themed_photo_albums(t, testcases): This function processes multiple test cases and for each test case returns the arrangement of photographs that minimizes the differences between the positions of consecutive photographs. t: int - number of test cases testcases: list of tuples - each tuple contains the number of photographs \'n\' and a list of photograph costs results = [] for n, photographs in testcases: result = minimize_diff(photographs) results.append(result) return results"},{"question":"Natasha and her friends are avid coin collectors. They have arrived at a coin market where they can find a vast array of different coins. Natasha realizes that she wants to maximize the number of unique coin sets she can buy with the money she has. A set of coins is defined as unique if it contains all different types of coins and follows a strict type order. Given a list of coin types and their respective prices, your task is to determine the maximum number of unique coin sets Natasha can buy without exceeding the total money she has. Each type of coin can only appear once in a set, and the order of the types must be strictly maintained as given. The first line contains an integer n (1 ≤ n ≤ 100) — the number of different coin types. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 100) — the prices of the coins of each type. The third line contains a single integer m (1 ≤ m ≤ 10000) — the total amount of money Natasha and her friends have. The output should be a single integer — the maximum number of unique coin sets Natasha can buy. # Example **Input:** ``` 4 2 3 5 7 20 ``` **Output:** ``` 2 ``` Explanation: Natasha can buy at most 2 unique sets of the 4 different coin types given her total money. Each set will cost 2 + 3 + 5 + 7 = 17 units of money, and with 20 units, she can afford 1 set once, leaving her with 3 units which is not enough to buy another full set. Therefore, the answer is 1 set. For another case: **Input:** ``` 3 4 5 6 30 ``` **Output:** ``` 2 ``` Explanation: Natasha wants to buy as many sets as possible. Each complete set costs 4 + 5 + 6 = 15 units. With 30 units, she can buy exactly 2 sets.","solution":"def max_unique_coin_sets(n, prices, m): Determines the maximum number of unique coin sets Natasha can buy. Parameters: n (int): Number of different coin types. prices (list of int): List of integers representing the prices of the coin types. m (int): Total amount of money Natasha has. Returns: int: The maximum number of unique coin sets Natasha can buy. # Calculate the cost of one complete set cost_of_one_set = sum(prices) # Calculate the maximum number of sets Natasha can buy max_sets = m // cost_of_one_set return max_sets"},{"question":"You are given a string consisting of lowercase Latin letters. Let\'s call two different positions in the string \\"similar\\" if the character at one position can be replaced by the character at the other position to make the string a palindrome. Your task is to calculate the number of pairs of indices that are similar. Input: - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the string. - The second line contains a string s of length n, consisting of lowercase Latin letters. Output: - Print a single integer — the number of pairs of indices (i, j) (1 ≤ i < j ≤ n) that are similar. Example: Input: 5 ababa Output: 4 Explanation: The pairs are (1,5), (2,4), (3,3). Positions 1 and 5 form a palindrome when \\"a\\" is swapped with \\"a\\". Similarly, positions 2 and 4 form a palindrome when \\"b\\" is swapped with \\"b\\". Position 3 is a special case where it is inherently similar because it is the middle character in a palindrome.","solution":"def count_similar_positions(n, s): Counts the number of pairs of indices (i, j) (1 ≤ i < j ≤ n) that are similar. A pair of indices (i, j) is similar if the character at position i can replace the character at position j to make the string a palindrome. :param n: Length of the string s :param s: The string of lowercase Latin letters :return: The number of similar pairs if n == 1: return 0 count = 0 counter = {} for char in s: if char in counter: counter[char] += 1 else: counter[char] = 1 for char, freq in counter.items(): if freq > 1: count += freq * (freq - 1) // 2 return count"},{"question":"In an n x m grid, you are given k non-overlapping rectangular regions. Each region is specified by its top-left corner and bottom-right corner. Your task is to find a permutation of integers from 1 to n * m that maximizes the sum of integers in these rectangular regions. The first line of input contains three integers n, m, and k (1 ≤ n, m ≤ 50, 1 ≤ k ≤ 1000). Each of the next k lines contains four integers r1, c1, r2, and c2 (1 ≤ r1, r2 ≤ n, 1 ≤ c1, c2 ≤ m), specifying the top-left and bottom-right corners of each rectangular region. The given regions are guaranteed to be non-overlapping. Output a permutation of integers from 1 to n * m in n rows and m columns such that the sum of integers in the specified rectangular regions is maximized. If there are multiple correct answers, print any of them.","solution":"def maximize_rect_sum(n, m, k, regions): Returns a permutation of integers from 1 to n * m in n rows and m columns such that the sum of integers in the specified rectangular regions is maximized. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. k (int): Number of rectangular regions. regions (List[Tuple[int, int, int, int]]): List of rectangular regions specified by (r1, c1, r2, c2). Returns: List[List[int]]: Permutation of integers from 1 to n * m in n rows and m columns. # Fill the grid with maximum to minimum values nums = list(range(1, n * m + 1)) grid = [[0] * m for _ in range(n)] # Sort the regions based on their area in descending order regions.sort(key=lambda x: (x[2]-x[0]+1) * (x[3]-x[1]+1), reverse=True) # Assign values to the regions first idx = len(nums) - 1 for r1, c1, r2, c2 in regions: for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): grid[i][j] = nums[idx] idx -= 1 # Assign remaining values to the empty spots for i in range(n): for j in range(m): if grid[i][j] == 0: grid[i][j] = nums[idx] idx -= 1 return grid"},{"question":"Given an undirected graph with `n` nodes and `m` edges, where each edge has a weight denoted by `w`. Each node represents a city, and each edge represents a road connecting two cities. Ollie the tourist wants to start a journey from city 1 and visit every other city exactly once before returning to city 1. Help Ollie find the minimum cost of completing his journey. The input consists of: - The first line contains two integers `n` and `m` (2 ≤ n ≤ 18; 1 ≤ m ≤ 50) representing the number of cities and the number of roads, respectively. - The next `m` lines contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n; 1 ≤ w ≤ 100) describing a road between city `u` and city `v` with weight `w`. Output a single integer representing the minimum cost of visiting every city exactly once and returning to city 1, or print `-1` if it\'s not possible to make such a journey. Example: ``` Input: 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 Output: 80 ``` Explanation: Ollie can follow the path: 1 -> 2 -> 4 -> 3 -> 1 with a total cost of 10 + 25 + 30 + 15 = 80.","solution":"import itertools def minimum_tour_cost(n, m, edges): inf = float(\'inf\') distances = [[inf] * n for _ in range(n)] # Create adjacency matrix for u, v, w in edges: distances[u-1][v-1] = w distances[v-1][u-1] = w # Handle the simple case with only two nodes if n == 2: if m == 1: return distances[0][1] * 2 else: return -1 cities = list(range(1, n)) min_cost = inf # Try all permutations of cities, since 1 is always the starting city for perm in itertools.permutations(cities): cost = distances[0][perm[0]] if cost == inf: # Skip invalid permutations continue for i in range(len(perm) - 1): cost += distances[perm[i]][perm[i+1]] if cost == inf: # Skip invalid permutations break cost += distances[perm[-1]][0] if cost < min_cost: min_cost = cost return min_cost if min_cost < inf else -1"},{"question":"You are given a social network consisting of n users and m friendship relations. Each friendship relation is bi-directional. The users can communicate with each other directly if they are friends, otherwise, they need a mediator who can relay messages between them through a series of friendships. Initially, each user can only communicate with themselves. Then, you will be given q communication queries. Each communication query will ask if two specified users can communicate, either directly or indirectly through other users. If they can communicate, respond with \\"YES\\", otherwise respond with \\"NO\\". The first line contains two integers n (1 ≤ n ≤ 100,000) and m (0 ≤ m ≤ 100,000) — the number of users and the number of friendships, respectively. The next m lines describe the friendship relations: each line contains two integers u and v (1 ≤ u, v ≤ n) — indicating that user u and user v are friends. The following line contains an integer q (1 ≤ q ≤ 100,000) — the number of communication queries. Each of the next q lines contains two integers x and y (1 ≤ x, y ≤ n) — the users the query is asking about. For each query, print \\"YES\\" if users x and y can communicate with each other, either directly or indirectly, and \\"NO\\" otherwise. Make sure your solution is efficient to handle large input sizes.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def can_communicate(n, friendships, queries): uf = UnionFind(n) for u, v in friendships: uf.union(u - 1, v - 1) results = [] for x, y in queries: if uf.find(x - 1) == uf.find(y - 1): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to parse input and execute the solution def parse_and_execute(n, m, friendships, q, queries): return can_communicate(n, friendships, queries)"},{"question":"You are given an array of integers a of length n. Your task is to answer q queries. Each query gives you two integers l and r and asks for the sum of the elements in the array between indices l and r (inclusive). The first line of the input contains an integer n (1 le n le 100000) — the length of the array. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9). The third line contains an integer q (1 le q le 100000) — the number of queries to answer. The following q lines each contain two integers l and r (1 le l le r le n) - the bounds of the range for each query. For each query, print the sum of the elements in the array between indices l and r. Consider the following sample case. The array is [1, 2, 3, 4, 5]. The sum of elements in the range [2, 4] is 9 (2 + 3 + 4). Input: ``` 5 1 2 3 4 5 3 1 3 2 4 1 5 ``` Output: ``` 6 9 15 ```","solution":"def prefix_sum_array(arr): Creates a prefix sum array. prefix_sum = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sum[i] = prefix_sum[i-1] + arr[i-1] return prefix_sum def sum_range(prefix_sum, l, r): Computes the sum of elements between indices l and r using prefix sums. return prefix_sum[r] - prefix_sum[l - 1] def process_queries(n, arr, queries): Processes a list of queries to return sums of subarrays. prefix_sum = prefix_sum_array(arr) results = [] for l, r in queries: results.append(sum_range(prefix_sum, l, r)) return results"},{"question":"You are given a grid with dimensions n x m, initially filled with zeros. We call a path non-decreasing if the values along the path are in a non-decreasing order. The value at the top-left corner (1, 1) is set to 1, and the value at the bottom-right corner (n, m) is set to k. The task is to fill the grid such that the grid contains exactly k different integers from 1 to k and there is at least one non-decreasing path from the top-left to the bottom-right corner. A valid grid has the following properties: 1. Each cell in the grid contains an integer between 1 and k. 2. There is at least one non-decreasing path from cell (1,1) to cell (n,m) containing all integers from 1 to k. Given multiple test cases, for each test case, determine if it is possible to create such a grid. If possible, print \\"YES\\" and one valid grid configuration. Otherwise, print \\"NO\\". Input: - The first line consists of an integer T (1 ≤ T ≤ 1000), the number of test cases. - The next T lines contain three integers each: n (1 ≤ n ≤ 50), m (1 ≤ m ≤ 50), and k (1 ≤ k ≤ 2500). Output: - For each test case, print \\"YES\\" and the corresponding grid configuration (n lines of m integers each) if it\'s possible to create such a grid. Otherwise, print \\"NO\\". Example Input: ``` 2 2 2 4 3 3 9 ``` Example Output: ``` YES 1 2 3 4 YES 1 2 3 4 5 6 7 8 9 ``` Explanation of Example: For the first test case, a valid grid is achieved by filling it with integers from 1 to 4. We place 1 in the top-left corner and 4 in the bottom-right corner. The grid 1 2 | 3 4 has a non-decreasing path from the top left to the bottom right. For the second test case, all cells can be filled consecutively from 1 to 9, creating a valid non-decreasing path from 1 to 9.","solution":"def generate_grid(n, m, k): if k < n + m - 1: return \\"NO\\" grid = [[0] * m for _ in range(n)] num = 1 for i in range(n): for j in range(m): grid[i][j] = num num += 1 return \\"YES\\", grid def solve_grids(test_cases): results = [] for n, m, k in test_cases: result = generate_grid(n, m, k) if result == \\"NO\\": results.append(\\"NO\\") else: results.append(\\"YES\\") _, grid = result results.append(grid) return results"},{"question":"A city grid is represented as an n times m grid. Each cell can either be land (represented by a \'1\') or water (represented by a \'0\'). A connected landmass is defined as a group of \'1\'s connected horizontally or vertically (not diagonally). Your task is to determine the size of the largest connected landmass in the city grid. The first line of input contains two integers n and m (1 leq n, m leq 1000) — the dimensions of the grid. The next n lines each contain m characters, either \'1\' or \'0\', representing the grid\'s cells. Output one integer — the size of the largest connected landmass in the city grid. # Example Input ``` 4 5 11000 11000 00100 00011 ``` Output ``` 4 ``` Explanation In the given grid, there are three connected landmasses. The first one includes cells (1, 1), (1, 2), (2, 1), and (2, 2), making its size 4. The second one includes a single cell (3, 3), making its size 1. The third one includes cells (4, 4) and (4, 5) making its size 2. The largest connected landmass is of size 4. # Note This problem tests your ability to perform a depth-first search (DFS) or breadth-first search (BFS) in a grid and determine the size of connected components.","solution":"def largest_landmass(grid): n = len(grid) m = len(grid[0]) if n > 0 else 0 def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'0\': return 0 grid[x][y] = \'0\' # Mark the cell as visited size = 1 size += dfs(x+1, y) size += dfs(x-1, y) size += dfs(x, y+1) size += dfs(x, y-1) return size max_landmass = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': max_landmass = max(max_landmass, dfs(i, j)) return max_landmass def parse_input_and_find_largest_landmass(input_str): lines = input_str.strip().split(\\"n\\") n, m = map(int, lines[0].split()) grid = [list(lines[i+1].strip()) for i in range(n)] return largest_landmass(grid)"},{"question":"Rakesh enjoys working with strings and sequences. One day, he came up with a new investigation involving strings. Given a string s consisting of lowercase English letters, he wants to know how many distinct ways he can transform this string into a beautiful string. A beautiful string is defined as a string in which all characters are unique and sorted in lexicographical order. A transformation is a process of selecting some characters from the given string (possibly removing none) and arranging them to form the beautiful string. Can you help Rakesh find the number of distinct beautiful strings that can be derived from the given string s? The first line contains an integer n (1 le n le 10^5), the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Output a single integer, the number of distinct beautiful strings that can be formed from the string s. **Example** Input: ``` 4 abac ``` Output: ``` 3 ``` Explanation: For the string \\"abac\\", the distinct beautiful strings are: 1. \\"a\\" 2. \\"ab\\" 3. \\"abc\\" Thus, the output is 3.","solution":"def count_distinct_beautiful_strings(s): Counts the number of distinct beautiful strings that can be derived from the given string. A beautiful string is defined as a string in which all characters are unique and sorted in lexicographical order. Parameters: s (str): The input string consisting of lowercase English letters. Returns: int: The number of distinct beautiful strings. # Create a set to store the unique characters in the string unique_chars = set(s) # Convert the set to a sorted list sorted_unique_chars = sorted(unique_chars) # The number of beautiful strings that can be formed is the size of the sorted unique characters list return len(sorted_unique_chars)"},{"question":"You are developing a file system, and you need to implement a command-line utility that simulates a basic form of file management. The utility should support the following commands: 1. `CREATE <folder_name>`: Create a folder in the current directory. 2. `DELETE <folder_name>`: Delete an empty folder in the current directory. 3. `OPEN <folder_name>`: Open the folder and navigate into it. 4. `CLOSE`: Navigate back to the parent directory. The root directory cannot be closed. 5. `LIST`: List all folders in the current directory in lexicographic order. You need to implement the functionality to handle these commands and maintain an internal representation of the file system to perform the required operations. Each folder name is a string containing only letters and numbers, with a maximum length of 10 characters. The following constraints apply: - There will not be more than 10,000 folders created during any sequence of commands. - The depth of the folder tree will not exceed 100. The first line of the input contains an integer `q` (1 ≤ q ≤ 100,000) — the number of commands. Each of the following `q` lines contains one of the commands described above. Print the result of each `LIST` command as a space-separated list of folder names in lexicographic order. If the current directory is empty, print a blank line. # Example: Input: ``` 10 CREATE docs CREATE images OPEN docs CREATE projects LIST CLOSE LIST DELETE images LIST ``` Output: ``` projects docs ``` Your task is to implement the function to handle these command inputs and produce the required outputs.","solution":"class FileSystem: def __init__(self): self.root = {} self.current = self.root self.path = [] def create(self, folder_name): if folder_name not in self.current: self.current[folder_name] = {} def delete(self, folder_name): if folder_name in self.current and not self.current[folder_name]: del self.current[folder_name] def open(self, folder_name): if folder_name in self.current: self.path.append(self.current) self.current = self.current[folder_name] def close(self): if self.path: self.current = self.path.pop() def list_folders(self): return sorted(self.current.keys()) def process_commands(commands): fs = FileSystem() results = [] for command in commands: parts = command.split() if parts[0] == \'CREATE\': fs.create(parts[1]) elif parts[0] == \'DELETE\': fs.delete(parts[1]) elif parts[0] == \'OPEN\': fs.open(parts[1]) elif parts[0] == \'CLOSE\': fs.close() elif parts[0] == \'LIST\': results.append(\\" \\".join(fs.list_folders())) return results # Example usage: # commands = [ # \'CREATE docs\', # \'CREATE images\', # \'OPEN docs\', # \'CREATE projects\', # \'LIST\', # \'CLOSE\', # \'LIST\', # \'DELETE images\', # \'LIST\' # ] # results = process_commands(commands) # for result in results: # print(result)"},{"question":"A special task needs to be accomplish: You are given an interesting array of integers where some elements may be zero or negative. You need to find a subsequence in this array that starts and ends at a non-negative number, with the following properties: 1. The subsequence contains exactly three non-negative numbers. 2. The product of these three non-negative numbers is as large as possible. 3. The product should be calculated without including any intervening zero or negative elements between the chosen non-negative numbers. If there are multiple subsequences with the same maximum product, return the subsequence with the earliest appearance in the array. Your task is to output the product of the maximum subsequence or -1 if such subsequence does not exist. The first line contains a single integer n (3 ≤ n ≤ 1000) — the length of the array. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Print a single integer — the maximum product of the subsequence of length 3 that starts and ends with a non-negative number, or -1 if no such subsequence exists. # Example Input: 7 2 -4 6 8 -1 3 -5 Output: 144 Explanation: The maximum product is achieved with the subsequence [2, 6, 8], and the product is 2 * 6 * 8 = 96. In another example, Input: 5 -1 4 0 5 1 Output: 20 Explanation: The maximum product is achieved with the subsequence [4, 5, 1], and the product is 4 * 5 * 1 = 20. If no valid subsequence exists, return -1.","solution":"def max_product_of_subsequence(arr): n = len(arr) if n < 3: return -1 max_product = -1 for i in range(n): if arr[i] < 0: continue for j in range(i + 1, n): if arr[j] < 0: continue for k in range(j + 1, n): if arr[k] < 0: continue product = arr[i] * arr[j] * arr[k] if product > max_product: max_product = product return max_product"},{"question":"There is a coding contest with n participants. For each participant, you initially know the number of problems they have solved. Each participant starts with an initial score based directly on the problems they solved. Over the duration of the contest, there can be two types of events: 1. A participant gains a number of points (e.g., solving a new problem). 2. A query asking for the current top k participants by score. However, after updating the scores, the participants\' ranks may change, and there could be ties. You need to keep track of all these events and be able to respond to each query correctly. The first line contains two integers n (1 le n le 1000) — the number of participants, and e (1 le e le 1000) — the number of events. The next line contains n integers a_1, a_2, ..., a_n (0 le a_{i} le 10^4) — the initial scores of the participants. Each of the next e lines describes an event: - \\"1 p x\\" means that the p-th participant gains x points (1 le p le n, 0 le x le 10^4). - \\"2 k\\" means you need to output the top k participants by their current scores (1 le k le n). For each query of the second type, print the scores of the top k participants, sorted in descending order. If multiple participants have the same score, order them by their original indices (1-based). In the first example, the scores are updated as follows: 4 2 10 8 rightarrow 4 2 15 8 rightarrow 4 2 15 10 rightarrow 4 2 21 10 In the second example, the scores are queried in descending order: Initially: 10 20 30 15 After event 1: 10 30 30 15 After event 2: 10 30 30 25","solution":"def coding_contest(n, e, initial_scores, events): scores = initial_scores[:] outputs = [] for event in events: parts = event.split() if parts[0] == \\"1\\": p = int(parts[1]) - 1 x = int(parts[2]) scores[p] += x elif parts[0] == \\"2\\": k = int(parts[1]) top_k_scores = sorted( [(i + 1, scores[i]) for i in range(n)], key=lambda x: (-x[1], x[0]) )[:k] outputs.append([score for idx, score in top_k_scores]) return outputs"},{"question":"There are n cities in a country called Graphlandia. FlyDirect, a national airline, wants to maximize its customer connection network by offering the fewest number of direct flights between cities such that all cities are connected (directly or indirectly through other cities). However, some cities are situated in areas where building airports or flight paths are too costly, and thus only specific pairs have been approved for direct flights. Given a list of these approved pairs of cities, determine the minimal number of direct flights FlyDirect should establish to connect all cities optimally. If it\'s not possible to connect all cities with the given pairs, return -1. The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 100,000) — the number of cities and the number of approved pairs of direct flights. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the identifiers of a pair of cities that may have a direct flight. Output a single integer — the minimal number of direct flights needed to connect all the cities, or -1 if it\'s impossible to connect all the cities. Example: Input: 6 7 1 2 2 3 2 4 3 4 3 5 4 6 5 6 Output: 5","solution":"def minimal_flights(n, m, approved_pairs): from collections import defaultdict import heapq # Function to perform Union-Find operation find def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Function to perform Union-Find operation union def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Kruskal\'s Algorithm to find the MST def kruskal_mst(n, edges): result = [] # This will store the resulting MST i = 0 # An index variable, used for sorted edges e = 0 # An index variable, used for result[] # Step 1: Sort all the edges in non-decreasing order of their weight edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] # Create V subsets with single elements for node in range(n): parent.append(node) rank.append(0) # Number of edges to be taken is equal to V-1 while e < n - 1 and i < len(edges): # Step 2: Pick the smallest edge. Check if it forms a cycle with # the spanning tree formed so far. If cycle is not formed, include it. # Otherwise, discard it. u, v, w = edges[i] i = i + 1 x = find(parent, u) y = find(parent, v) # If including this edge does not cause a cycle, include it in result # and increment the index of result for next edge if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) # Else discard the edge # If we do not include all nodes in the MST, return -1 if e != n - 1: return -1 return e edges = [] for u, v in approved_pairs: edges.append((u-1, v-1, 1)) # setting all weights to 1 since we just care about connectivity return kruskal_mst(n, edges)"},{"question":"In a certain city, there are n intersections and m roads connecting the intersections. Each road has a certain length. The city council has decided to improve the city\'s infrastructure by adding k new roads. The goal is to ensure that, after adding these roads, the shortest path between any two intersections is minimized as much as possible. You are given the current road network and the new possible roads. Determine the length of the shortest path from intersection 1 to intersection n after adding the most optimal k new roads. If it is not possible to connect intersection 1 to intersection n, return -1. The first line of input contains three integers, n, m, and k (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2·10^5, 1 ≤ k ≤ 100),denoting the number of intersections, the number of existing roads, and the number of new possible roads, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6), describing a road between intersections u and v with length w. Each of the next k lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6), describing a new possible road between intersections u and v with length w. Output a single integer, the length of the shortest path from intersection 1 to intersection n after adding the k new roads, or -1 if there is no such path.","solution":"import heapq from collections import defaultdict import sys def find_shortest_path(n, m, k, current_roads, new_roads): def dijkstra(graph, start, end): dist = [float(\'inf\')] * (n+1) dist[start] = 0 pq = [] heapq.heappush(pq, (0, start)) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, length in graph[u]: distance = current_dist + length if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist[end] if dist[end] != float(\'inf\') else -1 graph = defaultdict(list) for u, v, w in current_roads: graph[u].append((v, w)) graph[v].append((u, w)) base_dist = dijkstra(graph, 1, n) if k == 0: return base_dist min_dist = base_dist for u, v, w in new_roads: graph[u].append((v, w)) graph[v].append((u, w)) new_dist = dijkstra(graph, 1, n) min_dist = min(min_dist, new_dist) graph[u].remove((v, w)) graph[v].remove((u, w)) return min_dist"},{"question":"Suppose you are given a list of n integers and two positive integers m and t. Your task is to determine the number of contiguous subarrays of length m within which the product of the elements is not greater than t. Formally, you are given an array a of length n and you need to count all subarrays a[l...l+m-1] (1 ≤ l ≤ n-m+1) such that the product of the elements in that subarray is less than or equal to t. For example, given n = 5, m = 3, t = 10, and array a = [1, 5, 2, 3, 2], there are two valid subarrays: - Subarray [1, 5, 2] with a product of 10 - Subarray [5, 2, 3] with a product of 30 (which is greater than t, hence invalid) - Subarray [2, 3, 2] with a product of 12 (which is greater than t, hence invalid) So the output will be 1. Input: The first line contains three integers n, m, t (1 ≤ n ≤ 10^5, 1 ≤ m ≤ n, 1 ≤ t ≤ 10^9) - the number of elements in the array, the length of each subarray, and the threshold product value respectively. The second line contains n integers ai (1 ≤ ai ≤ 10^6), representing the elements of the array. Output: Output a single integer — the number of contiguous subarrays of length m for which the product of the elements is less than or equal to t. Example: Input: 5 3 10 1 5 2 3 2 Output: 1","solution":"def count_valid_subarrays(n, m, t, array): count = 0 current_product = 1 start = 0 for end in range(n): current_product *= array[end] if end - start + 1 > m: current_product //= array[start] start += 1 if end - start + 1 == m: if current_product <= t: count += 1 return count"},{"question":"Nick loves mazes and puzzles. He recently bought a new toy that\'s a rectangular grid with dimensions ( n times m ). Each cell in the grid can either be empty (represented by \'.\') or have an obstacle (represented by \'#\'). Nick\'s task is to find the longest path Nick can walk from the top-left corner (1,1) to the bottom-right corner (n,m) while only moving right or down and visiting each cell at most once. However, once Nick leaves a row or column, he cannot come back to it. Formally, Nick can start at cell (1,1) and move to cell (n,m) in such a way that each move is either to the right or down, and he cannot retrace his steps or move back up or left. The path must consist of valid cells only (\'.\') and avoid cells with obstacles (\'#\'). Given the grid, find the length of the longest valid path from the top-left corner to the bottom-right corner. The first line of the input contains two integers ( n ) and ( m ) (1 leq n, m leq 1000) — the dimensions of the grid. Each of the next ( n ) lines contains a string of ( m ) characters, representing the grid. Print a single integer — the length of the longest valid path from the top-left corner to the bottom-right corner. If there is no valid path, output -1. # Example Input: ``` 5 5 ..... .#... ..... ...#. ..... ``` Output: ``` 9 ``` Explanation: One of the longest paths Nick can take is (1,1) -> (1,2) -> (1,3) -> (1,4) -> (1,5) -> (2,5) -> (3,5) -> (4,5) -> (5,5). This path visits 9 cells in total.","solution":"def longest_path_in_grid(n, m, grid): Find the length of the longest valid path from the top-left corner (1,1) to the bottom-right corner (n,m) only moving right or down and visiting each cell at most once. # If the starting or ending cell is an obstacle, return -1 immediately. if grid[0][0] == \'#\' or grid[-1][-1] == \'#\': return -1 # Initialize a dp array with -1 dp = [[-1] * m for _ in range(n)] dp[0][0] = 1 # Starting cell # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'#\': continue if i > 0 and dp[i-1][j] != -1: dp[i][j] = max(dp[i][j], dp[i-1][j] + 1) if j > 0 and dp[i][j-1] != -1: dp[i][j] = max(dp[i][j], dp[i][j-1] + 1) # Return the value at the bottom-right corner cell return dp[-1][-1]"},{"question":"You are given a matrix `M` with dimensions `n x m`, where `n` is the number of rows and `m` is the number of columns. Each cell in this matrix contains either a `1` or a `0`. You want to find the length of the shortest path from the top-left corner (1,1) to the bottom-right corner (n,m) such that you can only move right or down. If there is no such path, return `-1`. The path is considered valid if you can traverse from the starting cell to the ending cell by moving only to adjacent cells (right or down) that contain `1`. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the matrix. Each of the next `n` lines contains `m` characters — \'0\' or \'1\', representing the matrix. Output the length of the shortest path if it exists, otherwise output `-1`. Example: ``` Input 4 4 1 0 0 1 1 1 0 0 0 1 1 0 1 1 1 1 Output 7 Input 3 3 1 0 0 0 1 0 0 0 1 Output -1 ```","solution":"from collections import deque def shortest_path(matrix): n = len(matrix) m = len(matrix[0]) if n > 0 else 0 if matrix[0][0] == 0 or matrix[n-1][m-1] == 0: return -1 directions = [(1, 0), (0, 1)] queue = deque([(0, 0, 1)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: new_x, new_y = x + dx, y + dy if 0 <= new_x < n and 0 <= new_y < m and matrix[new_x][new_y] == 1 and (new_x, new_y) not in visited: queue.append((new_x, new_y, dist + 1)) visited.add((new_x, new_y)) return -1"},{"question":"You are given a list of n integers. Your task is to find the longest subarray where the difference between any two elements is at most k. The input contains several independent test cases. The first line of the input contains a single integer T (1 ≤ T ≤ 100), the number of test cases. Each of the following T sets of lines begin with two integers n (1 ≤ n ≤ 1000) and k (0 ≤ k ≤ 1000). The next line contains n space-separated integers representing the elements of the array. For each test case, output the length of the longest subarray where the difference between any two elements is at most k. For example, if the input is: ``` 2 5 3 1 5 3 4 2 6 2 4 3 1 1 5 6 ``` The output should be: ``` 4 3 ``` In the first test case, the longest subarray that satisfies the condition is [1, 3, 4, 2] or [3, 4, 2, 1] with length 4, and in the second test case, the longest subarray is [4, 3, 1] with length 3.","solution":"def longest_subarray_with_difference(arr, k): Function to find the length of the longest subarray where the difference between any two elements is at most k. arr.sort() left, right = 0, 0 max_len = 0 while right < len(arr): if arr[right] - arr[left] <= k: max_len = max(max_len, right - left + 1) right += 1 else: left += 1 return max_len def process_test_cases(test_cases): results = [] for (n, k, arr) in test_cases: results.append(longest_subarray_with_difference(arr, k)) return results"},{"question":"Alice is an avid gardener who loves to grow plants in her garden. Unfortunately, she doesn\'t have much space and she can only plant a restricted number of plants. She also has a certain preference for the types of plants she wants to grow and each type provides a certain level of happiness. Given the total space available in her garden, a list of types of plants she can grow, and the happiness value each plant type gives her, help Alice maximize her total happiness while staying within her space constraints. You are given an integer `S` (1 ≤ S ≤ 1000) representing the total space in Alice\'s garden, an integer `T` (1 ≤ T ≤ 100) representing the number of types of plants Alice can choose from, and two arrays `spaces` and `happiness` each of length `T` where `spaces[i]` (1 ≤ spaces[i] ≤ 100) denotes the space required to plant the `i-th` type of plant and `happiness[i]` (1 ≤ happiness[i] ≤ 1000) denotes the happiness value that the `i-th` type of plant gives Alice. You need to find the maximum total happiness Alice can achieve while planting the plants such that the total space occupied by the plants does not exceed `S`. The first line contains two integers `S` and `T` separated by a space. The second line contains `T` integers representing the `spaces` array. The third line contains `T` integers representing the `happiness` array. Print one integer - the maximum total happiness Alice can achieve. Example: Input: 5 3 2 3 4 3 4 5 Output: 7 In this example, Alice can choose the first two plant types (which take up 2 and 3 units of space respectively) and gain happiness 3 + 4 = 7.","solution":"def max_happiness(S, T, spaces, happiness): Returns the maximum happiness Alice can achieve while planting the plants such that the total space occupied by the plants does not exceed S. :param S: Total space available in the garden (1 ≤ S ≤ 1000) :param T: Number of types of plants (1 ≤ T ≤ 100) :param spaces: List of space requirements for each plant type :param happiness: List of happiness values for each plant type :return: Maximum total happiness achievable dp = [0] * (S + 1) for i in range(T): for j in range(S, spaces[i] - 1, -1): dp[j] = max(dp[j], dp[j - spaces[i]] + happiness[i]) return dp[S]"},{"question":"Given an array of integers, you need to sort the array, but with a twist. You are allowed to perform the following operation any number of times: choose an index `i` (1 ≤ `i` ≤ n) and reverse the subarray starting from index `i` to the end of the array. What is the minimum number of such operations required to sort the array in non-decreasing order? The first line of the input contains one integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains `n` integers `a_1, a_2, ..., a_n` (−10^9 ≤ a_i ≤ 10^9) — the elements of the array. Output the minimum number of subarray reversals needed to sort the array. Consider the first example. If the array is `[5, 4, 3, 2, 1]`, you can choose index `1` and reverse the entire array to get `[1, 2, 3, 4, 5]` in one move. In the second example, the array is already sorted, so no operations are needed.","solution":"def min_reversals_to_sort(n, arr): Returns the minimum number of subarray reversals needed to sort the array in non-decreasing order. sorted_arr = sorted(arr) if arr == sorted_arr: return 0 left_mismatch = 0 while arr[left_mismatch] == sorted_arr[left_mismatch]: left_mismatch += 1 right_mismatch = n - 1 while arr[right_mismatch] == sorted_arr[right_mismatch]: right_mismatch -= 1 if arr[left_mismatch:right_mismatch + 1] == sorted_arr[left_mismatch:right_mismatch + 1][::-1]: return 1 return 2"},{"question":"Given an undirected graph with unweighted edges, your task is to determine the minimum number of edges to remove in order to make the graph acyclic (i.e., a forest). Input: The first line of the input contains two integers n and m (1 leq n leq 1000, 0 leq m leq 2000), where n is the number of vertices and m is the number of edges. The next m lines contain two integers each, u and v (1 leq u, v leq n, u neq v), denoting an edge between vertices u and v. Output: Print a single integer — the minimum number of edges to remove to make the graph acyclic. Example: Input: ``` 4 4 1 2 2 3 3 4 4 2 ``` Output: ``` 1 ``` Explanation: The graph contains a cycle: 2-3-4-2. Removing any one of the edges (2-3), (3-4), or (4-2) will make the graph acyclic. Therefore, the minimum number of edges to remove is 1.","solution":"def find_parent(parent, i): if parent[i] == i: return i else: return find_parent(parent, parent[i]) def union(parent, rank, x, y): x_root = find_parent(parent, x) y_root = find_parent(parent, y) if rank[x_root] < rank[y_root]: parent[x_root] = y_root elif rank[x_root] > rank[y_root]: parent[y_root] = x_root else: parent[y_root] = x_root rank[x_root] += 1 def min_edges_to_remove(n, m, edges): parent = [] rank = [] # Initializing the parent and rank of each node for node in range(n): parent.append(node) rank.append(0) cycle_edges = 0 for edge in edges: u, v = edge u_root = find_parent(parent, u-1) v_root = find_parent(parent, v-1) if u_root == v_root: cycle_edges += 1 else: union(parent, rank, u_root, v_root) return cycle_edges"},{"question":"A team of developers is working on a chat application. They need to implement a feature that allows users to send messages with specific words automatically replaced by emojis. Given a set of words and their corresponding emojis, implement a function that processes a given message and replaces all occurrences of the specified words with their corresponding emojis. The input consists of: - A single integer n (1 ≤ n ≤ 100) — the number of words that need to be replaced by emojis. - The next n lines each contain a string wi and its corresponding emoji ei (1 ≤ |wi| ≤ 20, 1 ≤ |ei| ≤ 3). - The last line contains a string message (1 ≤ |message| ≤ 1000) — the message in which the words need to be replaced. Replace all occurrences of each specified word in the message with its corresponding emoji. Words in the message are separated by spaces. The output should be the processed message with all the specified words replaced by their corresponding emojis. Example: Input: ``` 3 hello 😊 world 🌍 python 🐍 hello world, welcome to the python world! ``` Output: ``` 😊 🌍, welcome to the 🐍 🌍! ``` Notes: - The words in the message may appear in any case (uppercase, lowercase, or mixed case), but the replacement is case sensitive. - Punctuation is considered as part of the word. For example, replacing \\"world\\" will not replace \\"world,\\". - Process the message in such a way that the replacement is consistent with the order and format specified in the input.","solution":"def replace_words_with_emojis(n, replacements, message): Replaces specified words in a message with their corresponding emojis. :param n: Number of replacement pairs. :param replacements: List of tuples containing a word and its corresponding emoji. :param message: The message in which words need to be replaced with emojis. :return: Processed message with words replaced by emojis. for word, emoji in replacements: message = message.replace(word, emoji) return message # Example Usage: # replacements = [(\\"hello\\", \\"😊\\"), (\\"world\\", \\"🌍\\"), (\\"python\\", \\"🐍\\")] # message = \\"hello world, welcome to the python world!\\" # print(replace_words_with_emojis(3, replacements, message)) # Should output: \\"😊 🌍, welcome to the 🐍 🌍!\\""},{"question":"Polycarp is very fond of palindromes. A palindrome is a string that reads the same forward and backward. Today, Polycarp came across a string s of length n (2 le n le 1000). He wants to know the minimum number of characters he must change to make the string a palindrome. Your task is to find the minimum number of character changes required to transform the given string into a palindrome. **Input:** - The first line contains an integer n. - The second line contains a string s of length n consisting of lowercase Latin letters. **Output:** - Print a single integer — the minimum number of changes needed to turn the string into a palindrome. **Example 1:** **Input:** 4 abca **Output:** 1 **Example 2:** **Input:** 5 abcde **Output:** 2 In the first example, changing \'c\' to \'b\' or \'b\' to \'c\' will make the string a palindrome (\\"abba\\" or \\"acca\\"). In the second example, changing \'b\' to \'d\' and \'c\' to \'e\' will transform the string into a palindrome (\\"aedcdea\\").","solution":"def min_changes_to_palindrome(n, s): Returns the minimum number of character changes needed to transform the string `s` into a palindrome. Parameters: - n: Length of the string `s` (2 <= n <= 1000) - s: A string of length `n` consisting of lowercase Latin letters. Returns: - An integer representing the minimum number of character changes needed. changes = 0 half_length = n // 2 for i in range(half_length): if s[i] != s[n - i - 1]: changes += 1 return changes"},{"question":"You are given a string `s` consisting of lowercase Latin letters. You need to determine the number of distinct substrings of `s` that are palindromes. A substring is a contiguous sequence of characters within a string, and a palindrome is a string that reads the same forward and backward. The input string `s` has a length of at most 1000 characters. # Input - The first and only line of input contains the string `s` (1 ≤ |s| ≤ 1000). # Output - Output a single integer representing the number of distinct palindromic substrings in `s`. # Example Input ``` ababa ``` Output ``` 5 ``` # Explanation The distinct palindromic substrings of `ababa` are: `a`, `b`, `aba`, `bab`, `ababa`. Thus, the output is 5. # Note To solve this problem efficiently, consider using techniques such as dynamic programming or Manacher\'s algorithm to count distinct palindromic substrings.","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the string s. n = len(s) dp = [[False] * n for _ in range(n)] palindromic_substrings = set() for length in range(1, n + 1): # length of substring for start in range(n - length + 1): # starting index of substring end = start + length - 1 # ending index of substring if length == 1: dp[start][end] = True elif length == 2: dp[start][end] = (s[start] == s[end]) else: dp[start][end] = (s[start] == s[end]) and dp[start + 1][end - 1] if dp[start][end]: palindromic_substrings.add(s[start:end + 1]) return len(palindromic_substrings)"},{"question":"Given a list of positive integers, you need to find out the number of subsequences that are strictly increasing and have a length equal to the number of elements in a specified list itself. You are given two arrays of integers, `a` and `b`. The array `a` of length `n` contains the integers to form subsequences from, and the array `b` contains different lengths `k1, k2, ..., km` for which you need to count the number of strictly increasing subsequences in `a` of length `k1, k2, ..., km`. For each `ki` in `b`, output the number of strictly increasing subsequences of length `ki` in `a`. If there are no such subsequences, output `0`. The first line of input contains two integers `n` and `m`, where `n` is the number of elements in list `a` and `m` is the number of elements in list `b`. The second line contains `n` integers representing the elements of `a`. The third line contains `m` integers representing the elements of `b`. The output should be `m` integers, where each integer is the count of strictly increasing subsequences of length `ki` in `a`, respectively. # Example **Input:** ``` 6 3 1 2 3 4 5 6 1 2 3 ``` **Output:** ``` 6 15 20 ``` In this example: - For `k1 = 1`, all elements are valid single-element subsequences, so the output is 6. - For `k2 = 2`, the number of strictly increasing subsequences of length 2 is 15. - For `k3 = 3`, the number of strictly increasing subsequences of length 3 is 20. # Constraints - `1 ≤ n ≤ 1000` - `1 ≤ m ≤ 100` - `1 ≤ a[i] ≤ 10^9` - `1 ≤ b[i] ≤ n`","solution":"def count_increasing_subsequences(a, b): Given a list of integers a, and a list of lengths b, this function returns a list of counts of strictly increasing subsequences of a for each length in b. n = len(a) max_k = max(b) if b else 0 # dp[i][l] will store the number of increasing subsequences of length l ending at index i dp = [[0] * (max_k + 1) for _ in range(n)] # Initial state for single element subsequences for i in range(n): dp[i][1] = 1 # Fill dp table for length in range(2, max_k + 1): for i in range(n): for j in range(i): if a[j] < a[i]: dp[i][length] += dp[j][length-1] # Result result = [] for k in b: count = 0 for i in range(n): count += dp[i][k] result.append(count) return result"},{"question":"You are given a binary tree with `n` nodes. Each node has a unique value ranging from `1` to `n`. Your task is to find the maximum path sum, where the path is any sequence of nodes in the tree starting and ending at any two nodes, and traveling downwards or upwards through the parent-child connections. A path sum is defined as the sum of the values of nodes along that path. Implement a function to find the maximum path sum in the binary tree, where you will be given the number of nodes and the edges of the tree. The first line of input contains an integer `n` (`2 ≤ n ≤ 10^5`) — the number of nodes in the binary tree. Each of the next `n-1` lines contains two space-separated integers `u` and `v` (`1 ≤ u, v ≤ n`) — meaning there is an edge between node `u` and node `v`. Output a single integer — the maximum path sum in the binary tree. # Example Input ``` 5 1 2 1 3 3 4 3 5 ``` Output ``` 15 ``` Explanation For the given example, the maximum path sum is from node 2 to node 5 or node 2 to node 4, both through the root node 1 and node 3. The path sum for this path is `2 + 1 + 3 + 5 = 11` or `2 + 1 + 3 + 4 = 10`, respectively. The correct output is `15`, considering both paths share the node `3`. Function Signature: ```python def find_maximum_path_sum(n: int, edges: List[Tuple[int, int]]) -> int: pass ```","solution":"from typing import List, Tuple def find_maximum_path_sum(n: int, edges: List[Tuple[int, int]]) -> int: from collections import defaultdict, deque if n == 1: return 1 # Create the adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Helper function to perform BFS and find the furthest node from the start node def bfs(start): visited = set() queue = deque([(start, 0)]) visited.add(start) furthest_node = start max_distance = 0 while queue: node, dist = queue.popleft() if dist > max_distance: max_distance = dist furthest_node = node for neighbor in tree[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, dist + 1)) return furthest_node, max_distance # Find the furthest node from an arbitrary starting node (e.g., node 1) node_a, _ = bfs(1) # Use the furthest node found to find the longest path in the tree node_b, max_path_length = bfs(node_a) return max_path_length"},{"question":"You are given an n x n grid filled with non-negative integers. Your task is to traverse the grid from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1). You can only move either down or right at any point in time. The cost of a path is defined as the sum of all the integers along the path. Write a function to find the minimum cost to reach the bottom-right corner of the grid. The first line of the input contains an integer n (1 < n ≤ 1000) — the size of the grid. The next n lines contain n integers each, separated by spaces, representing the grid values. Print a single integer — the minimum cost to traverse the grid from the top-left to the bottom-right corner. # Example Input: ``` 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 ``` # Explanation: One of the optimal paths to reach from the top-left to the bottom-right corner is as follows: 1 → 3 → 1 → 1 → 1, having a total cost of 7.","solution":"def min_path_sum(grid): Calculates the minimum cost to traverse the grid from the top-left to the bottom-right corner. n = len(grid) # Initialize DP table to store the costs dp = [[0] * n for _ in range(n)] # Fill the dp table dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1] # A function to parse input data def parse_input_data(input_data): input_lines = input_data.strip().split(\'n\') n = int(input_lines[0]) grid = [] for line in input_lines[1:]: grid.append(list(map(int, line.split()))) return grid"},{"question":"You are given two strings s and t. You have to determine the minimum number of operations required to convert s into t. The operations allowed are: 1. **Insert a character** at any position in the string. 2. **Delete a character** from any position in the string. 3. **Replace a character** with another character. The first line contains the string s (1 ≤ |s| ≤ 1000). The second line contains the string t (1 ≤ |t| ≤ 1000). Print a single integer — the minimum number of operations required to convert string s into string t. Examples: ``` Input: abcdef azced Output: 3 Input: sunday saturday Output: 3 ```","solution":"def min_operations_to_convert(s, t): Returns the minimum number of operations required to convert string s into string t. Operations allowed are insert, delete and replace a character. m, n = len(s), len(t) # Create a 2D array dp where dp[i][j] represents the minimum number of operations to convert # the first i characters of s to the first j characters of t. dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize dp for transformations from empty string for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s is empty, insert all characters from t elif j == 0: dp[i][j] = i # If t is empty, delete all characters from s elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last characters are the same, ignore last char else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Julius is facing a unique challenge in his orchard. He has an array of fruit trees, where each tree yields a certain number of fruits. Julius wants to maximize the total number of fruits collected by picking either all the fruits from some contiguous subarray of trees or from any one individual tree. Given the number of trees and the number of fruits each tree yields, determine the maximum number of fruits Julius can collect by choosing the optimal subarray or a single tree. The first line contains an integer, `n` (1 ≤ n ≤ 1000), the number of trees in the orchard. The second line contains `n` space-separated integers, where the i-th integer represents the number of fruits yielded by the i-th tree. Each integer can range from -10^4 to 10^4, inclusive. Output a single integer representing the maximum number of fruits Julius can collect. # Example Input: ``` 7 -2 1 -3 4 -1 2 1 ``` Output: ``` 6 ``` In the sample input, the maximum number of fruits Julius can collect is from the subarray [4, -1, 2, 1], which sums to 6.","solution":"def max_fruits(n, fruits): Returns the maximum number of fruits that can be collected from either a contiguous subarray or any single tree in the orchard. if n == 1: return fruits[0] max_current = fruits[0] max_global = fruits[0] for i in range(1, n): max_current = max(fruits[i], max_current + fruits[i]) if max_current > max_global: max_global = max_current max_single = max(fruits) return max_global if max_global > max_single else max_single"},{"question":"An e-commerce company tracks the sales of its products. Each product is identified by a unique product ID and belongs to a specific category. The company wants to analyze the sales data to determine the most popular product in each category based on the number of units sold. You are given a list of sales records. Each record contains three fields: product ID, category, and the number of units sold. Your task is to process these records and determine the most popular product for each category. If there is a tie in the number of units sold, choose the product with the smallest product ID. Write a function `most_popular_products(sales)` that takes a list of sales records and returns a dictionary where the keys are categories and the values are the product IDs of the most popular products in those categories. **Input:** - `sales`: A list of tuples where each tuple has the format (product_id, category, units_sold). The length of the list can be up to 100,000 entries. **Output:** - A dictionary where the keys are category names and the values are the product IDs of the most popular products in those categories. **Example:** ``` sales = [ (101, \'electronics\', 150), (102, \'electronics\', 120), (103, \'electronics\', 150), (201, \'books\', 210), (202, \'books\', 230), (203, \'books\', 230), (301, \'clothing\', 310) ] ``` **Result:** ``` { \'electronics\': 101, \'books\': 202, \'clothing\': 301 } ``` **Explanation:** - In the electronics category, both product 101 and 103 sold 150 units, but 101 has a smaller product ID. - In the books category, both product 202 and 203 sold 230 units, but 202 has a smaller product ID. - In the clothing category, only one product 301 was sold.","solution":"def most_popular_products(sales): Returns the most popular product in each category based on the number of units sold. If there is a tie, the product with the smallest product ID is chosen. category_popularity = {} for product_id, category, units_sold in sales: if category not in category_popularity: category_popularity[category] = (product_id, units_sold) else: current_most_popular = category_popularity[category] if units_sold > current_most_popular[1] or (units_sold == current_most_popular[1] and product_id < current_most_popular[0]): category_popularity[category] = (product_id, units_sold) return {category: product_id for category, (product_id, units_sold) in category_popularity.items()}"},{"question":"Alice is a puzzle enthusiast who loves solving problems involving sequences and patterns. She recently came across a unique number sequence challenge. The sequence follows a simple rule: starting with a number `x`, each subsequent number is the smallest integer that is greater than the previous number and has a digit sum equal to the digit sum of `x`. The digit sum of a number is the sum of all its digits. For instance, the digit sum of 123 is 1 + 2 + 3 = 6. Alice wants to generate a sequence of `m` numbers starting from a given initial number `x`. Your task is to help Alice by generating this sequence. The first line of input contains two integers `x` and `m` (1 ≤ x ≤ 9999, 1 ≤ m ≤ 1000), where `x` is the starting number of the sequence and `m` is the length of the sequence. Output `m` numbers of the sequence on a single line, separated by spaces. For example, if the input is: ``` 23 5 ``` The output should be: ``` 23 32 41 50 104 ``` In this example: - The digit sum of the initial number 23 is 2 + 3 = 5. - The smallest number greater than 23 with a digit sum of 5 is 32. - The smallest number greater than 32 with a digit sum of 5 is 41. - The smallest number greater than 41 with a digit sum of 5 is 50. - The smallest number greater than 50 with a digit sum of 5 is 104.","solution":"def digit_sum(n): Returns the sum of the digits of n. return sum(int(digit) for digit in str(n)) def next_number_with_same_digit_sum(n): Returns the smallest integer greater than n that has the same digit sum as n. target_digit_sum = digit_sum(n) current_number = n + 1 while digit_sum(current_number) != target_digit_sum: current_number += 1 return current_number def generate_sequence(x, m): Generates a sequence of m numbers starting from x, where each subsequent number is the smallest number greater than the previous number having the same digit sum as x. sequence = [x] current_number = x for _ in range(m - 1): current_number = next_number_with_same_digit_sum(current_number) sequence.append(current_number) return sequence # Function to facilitate testing def get_sequence(x, m): sequence = generate_sequence(x, m) return \' \'.join(map(str, sequence))"},{"question":"A famous sports league is organizing a tournament and requires teams to earn a certain number of points to qualify. Each team can either win (earns 3 points), draw (earns 1 point), or lose (earns 0 points). The league wants to know how many different combinations of wins, draws, and losses will make a team reach exactly k points during the tournament. The team is allowed to play up to n games. Given two integers n and k, compute the number of distinct combinations of results (wins, draws, losses) that make the team earn exactly k points after playing at most n games. The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 300). Print a single integer, the number of distinct combinations of wins, draws, and losses to achieve exactly k points.","solution":"def count_combinations(n, k): Returns the number of distinct combinations of wins, draws, and losses to achieve exactly k points in at most n games. count = 0 for wins in range(n + 1): for draws in range(n + 1 - wins): losses = n - wins - draws points = wins * 3 + draws * 1 if points == k: count += 1 return count"},{"question":"Mark loves shopping for gadgets and he found a website that offers him two new gadgets at a time. Each gadget has a unique price and a usefulness score. Mark has C amount of money to spend on gadgets. He wants to maximize the total usefulness score of the gadgets he can buy. However, there\'s a catch: Mark can only buy gadgets in pairs (two gadgets at a time). Given the list of gadgets with their prices and usefulness scores, determine the maximum total usefulness score Mark can achieve without exceeding his budget C. Mark is not allowed to spend more than his total budget and he must buy exactly two gadgets or none at all. Input: - The first line contains an integer T (1 leq T leq 50) — the number of test cases. - Each test case starts with an integer n (1 leq n leq 1000) — the number of gadgets available. - The second line contains an integer C (1 leq C leq 10^6) — Mark\'s total budget. - The next n lines each contain two integers p_i and u_i (1 leq p_i leq 10^6, 1 leq u_i leq 10^6) — the price and usefulness score of the gadget. Output: For each test case, print the maximum total usefulness score Mark can achieve. If it\'s impossible to buy any pair of gadgets within the budget, print 0. Example: Input: ``` 2 4 50 10 30 20 40 50 60 10 50 3 15 10 10 5 5 7 7 ``` Output: ``` 90 15 ``` Explanation: In the first test case, Mark can buy the gadgets priced at 10 and 10 with total usefulness of 30 + 50 = 80. Another pair he can buy is the gadgets priced at 10 and 20 with total usefulness 30 + 40 = 70. But the optimal pair is of gadgets priced at 10 and 20, giving a total usefulness of 90. In the second test case, Mark can buy gadgets priced at 5 and 7 with total usefulness 5 + 7 = 12, but the optimal pair is 5 and 10 giving the maximum usefulness score of 15.","solution":"def max_usefulness(T, test_cases): results = [] for i in range(T): n, C, gadgets = test_cases[i] max_usefulness_score = 0 # Consider every pair of gadgets for j in range(n): for k in range(j + 1, n): price1, usefulness1 = gadgets[j] price2, usefulness2 = gadgets[k] total_price = price1 + price2 total_usefulness = usefulness1 + usefulness2 if total_price <= C: max_usefulness_score = max(max_usefulness_score, total_usefulness) results.append(max_usefulness_score) return results"},{"question":"Alex likes to play with strings. Recently, he developed a new game involving two strings, s1 and s2. The rules of the game are simple: Alex can swap any two characters in string s1. The objective is to determine if, after some (possibly zero) swaps, he can make s1 equal to s2. Write a program that will determine whether Alex can transform s1 into s2 by swapping characters any number of times. If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the length of the strings s1 and s2. The second line contains the string s1 of length n, consisting of only lowercase English letters. The third line contains the string s2 of length n, also consisting of only lowercase English letters. It is guaranteed that the lengths of s1 and s2 are equal. Print \\"YES\\" if it is possible to transform s1 into s2 by swapping characters; otherwise, print \\"NO\\". # Sample Input 1. ``` 4 abcd dcba ``` 2. ``` 3 abc def ``` # Sample Output 1. ``` YES ``` 2. ``` NO ```","solution":"def can_transform(s1, s2): Determines if s1 can be transformed into s2 by swapping characters any number of times. :param s1: Source string :param s2: Target string :return: \\"YES\\" if transformation is possible, otherwise \\"NO\\" from collections import Counter return \\"YES\\" if Counter(s1) == Counter(s2) else \\"NO\\""},{"question":"Alchemist Merlin is working on creating a philosopher\'s stone. To do so, he needs to combine several magical ingredients in a precise order. Each ingredient has a unique magical energy value, and to create the stone, Merlin needs to achieve an exact total energy value. To assist Merlin, you must write a program to find out if it is possible to achieve the target total energy using any combination of the given ingredients. Each ingredient can only be used once. The input consists of two lines. The first line contains two integers n and T (1 ≤ n ≤ 100, 1 ≤ T ≤ 10^9), where n is the number of ingredients and T is the target total energy. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) which represent the magical energy values of the ingredients. Output \\"YES\\" if it is possible to achieve the exact total energy T using the given ingredients. Otherwise, output \\"NO\\". Examples: Input: 5 9 3 34 4 12 5 Output: YES Input: 3 10 1 2 4 Output: NO","solution":"def can_achieve_target(n, T, ingredients): Returns \\"YES\\" if it is possible to achieve the exact total energy T using the given ingredients. Otherwise, returns \\"NO\\". from itertools import combinations # Checking all possible subsets for r in range(1, n + 1): for subset in combinations(ingredients, r): if sum(subset) == T: return \\"YES\\" return \\"NO\\""},{"question":"Alice has recently taken up jogging and decided to keep track of her progress on a daily route. The route consists of multiple straight segments joined together, forming a polyline. Alice starts at the first point and jogs through all segments in order, ending at the last point. Alice\'s fitness app records two types of data for each segment: the length of the segment and the elevation change between its starting and ending points. She wants to create a new metric called \\"Total Elevation Gain (TEG),\\" which is the sum of elevation increases over all segments. That is, if the elevation increases on a segment (the ending point is higher than the starting point), it contributes positively to the TEG, otherwise, it does not contribute at all. Given the details of the segments, help Alice compute the Total Elevation Gain of her jogging route. The first line contains an integer n (1 leq n leq 10^5) – the number of segments in her route. The next two lines each contain n integers. The first of these lines contains the lengths of the segments, and the second line contains the elevation changes of the corresponding segments. Print a single integer - the Total Elevation Gain (TEG) of Alice\'s jogging route. **Example:** ``` Input: 5 3 4 2 1 5 -1 2 3 -2 1 Output: 6 ``` Explanation: In this example, only the second, third and last segments contribute to the TEG. The total elevation gains are 2 + 3 + 1 = 6.","solution":"def calculate_teg(n, segment_lengths, elevation_changes): Calculate the Total Elevation Gain (TEG) for Alice\'s jogging route. Parameters: n (int): The number of segments in the route. segment_lengths (list of int): The lengths of the segments. elevation_changes (list of int): The elevation changes of the corresponding segments. Returns: int: The total elevation gain. teg = 0 for elevation_change in elevation_changes: if elevation_change > 0: teg += elevation_change return teg # Example usage n = 5 segment_lengths = [3, 4, 2, 1, 5] elevation_changes = [-1, 2, 3, -2, 1] print(calculate_teg(n, segment_lengths, elevation_changes)) # Output: 6"},{"question":"Vivi is a fan of palindromes and loves playing with numbers. She defines a palindromic subsequence of a number as a sequence that reads the same forward and backward and is derived from the number\'s digits by deleting some or no digits without changing the order of the remaining digits. You are given a number n. Vivi wants to determine the length of the longest palindromic subsequence of n. The first line of the input contains a single integer n (1 le n le 10^{18}). Print a single integer – the length of the longest palindromic subsequence of n. For example: - If the input is 12321, the output should be 5 because the entire number is a palindrome. - If the input is 12345, the output should be 1 because each digit itself is the maximum possible palindrome.","solution":"def longest_palindromic_subsequence(n): Function to determine the length of the longest palindromic subsequence of an integer n. def lps(seq): n = len(seq) # Create a 2D table to store results of subproblems L = [[0 for x in range(n)]for y in range(n)] # Strings of length 1 are palindrome of length 1 for i in range(n): L[i][i] = 1 # Build the table. Note that the lower diagonal values # of table are useless and not filled in the process. for cl in range(2, n+1): for i in range(n-cl+1): j = i + cl - 1 if seq[i] == seq[j] and cl == 2: L[i][j] = 2 elif seq[i] == seq[j]: L[i][j] = L[i+1][j-1] + 2 else: L[i][j] = max(L[i][j-1], L[i+1][j]) return L[0][n-1] # Convert integer to string s = str(n) return lps(s)"},{"question":"Given an array of integers, A, representing the heights of students, you are tasked with finding the minimum number of jumps required to move from the first student to the last student in the array. Each student can jump to the right up to \'k\' students ahead, but can only land on a student who is taller than the current student. If it is impossible for the student to reach the last student, you should return -1. Input: - The first line of input contains two integers, n (2 ≤ n ≤ 100), the number of students, and k (1 ≤ k ≤ n-1), the maximum number of students the current student can jump ahead. - The second line contains n integers, representing the heights of the students. Output: - Print the minimal number of jumps required for the first student to reach the last student. If it is impossible, print -1. Example Input: ``` 5 2 1 2 3 2 4 ``` Example Output: ``` 2 ``` Explanation: - From student 1 (height 1), jump to student 2 (height 2). - From student 2 (height 2), jump to student 5 (height 4). For a second example: ``` 6 2 4 3 2 5 1 2 ``` Output: ``` -1 ``` Explanation: - From student 1 (height 4), no valid jumps are possible to reach the end due to height restrictions.","solution":"def min_jumps(n, k, heights): Function to find the minimum number of jumps needed to go from the first student to the last student. :param n: int - The number of students :param k: int - The maximum number of students the current student can jump ahead :param heights: List[int] - List of heights of the students :return: int - Minimum number of jumps required to reach the last student, or -1 if impossible dp = [float(\'inf\')] * n dp[0] = 0 for i in range(n): for j in range(1, k + 1): if i + j < n and heights[i + j] > heights[i]: dp[i + j] = min(dp[i + j], dp[i] + 1) return dp[-1] if dp[-1] != float(\'inf\') else -1"},{"question":"The kingdom is under attack by a swarm of enemy drones, and it\'s up to the royal wizard to save the day. The wizard can cast a protective barrier with a certain strength that can neutralize enemy drones. However, each enemy drone has a specific power level, and the barrier can only neutralize a drone if the barrier\'s strength is greater than or equal to the drone\'s power level. The wizard can also gain power-ups to increase the barrier\'s strength. The wizard starts with an initial barrier strength of k. There are n drones attacking the kingdom, each with a specific power level pi. Additionally, there are m power-ups available, each with a power boost value bi. When the wizard uses a power-up, the strength of the barrier increases by the value of the power-up. The wizard must neutralize all drones, and she can use the power-ups in any order she wishes. If it\'s not possible to neutralize all drones, output \\"Impossible\\". If it is possible, output the minimum number of power-ups required to neutralize all drones. The first line of input contains three integers n, m, and k (1 ≤ n, m, k ≤ 1000) — the number of drones, the number of power-ups, and the initial strength of the barrier, respectively. The second line contains n integers, representing the power levels of the drones. The third line contains m integers, representing the power boost values of the power-ups. Print a single integer — the minimum number of power-ups required to neutralize all drones, or \\"Impossible\\" if it\'s not possible. Example: Input: 5 3 10 15 12 20 9 7 4 6 5 Output: 2 Explanation: The wizard starts with a barrier strength of 10. She can use the power-ups with boost values 5 and 6 to increase her barrier strength to 21. With this strength, she can neutralize drones with power levels 15, 12, 20, 9, and 7. Thus, only 2 power-ups are needed to neutralize all drones.","solution":"def min_power_ups(n, m, k, drones_power, power_ups): Returns the minimum number of power-ups required to neutralize all drones, or \\"Impossible\\" if it\'s not possible. # Sort the drones\' power levels and power-ups in descending order drones_power.sort(reverse=True) power_ups.sort(reverse=True) power_ups_count = 0 for drone in drones_power: while k < drone: if power_ups: k += power_ups.pop(0) power_ups_count += 1 else: return \\"Impossible\\" return power_ups_count"},{"question":"In a distant village, the villagers decided to redistribute their farmland into smaller equally sized square plots. They have a rectangular piece of farmland with a length of L and a width of W. The goal is to redistribute the land such that the new plots are square and have the maximum possible side length. To achieve this, the villagers must determine the largest side length of the square plots that can be obtained without any leftover land. If different sizes of square plots can be devised, they must select the one with the maximum side length. # Input The first line of input contains an integer t (1 le t le 10^4) — the number of test cases. The following t lines each contain two integers L and W (1 le L, W le 10^9) — the dimensions of the farmland. # Output For each of the t test cases, output a single integer — the side length of the largest square plots that can be made. # Example Input ```plaintext 3 4 6 10 15 7 9 ``` Output ```plaintext 2 5 1 ``` # Explanation - In the first test case, a 4x6 piece of land can be divided into 2x2 square plots, hence the answer is 2. - In the second test case, a 10x15 piece of land can be divided into 5x5 square plots, hence the answer is 5. - In the third test case, a 7x9 piece of land can only be divided into 1x1 square plots, hence the answer is 1.","solution":"import math def max_square_side_length(t, cases): For each test case, find the largest side length of the square plots that can be made from the given dimensions of farmland without any leftover land. Parameters: t (int): Number of test cases cases (list of tuples): Each tuple contains two integers L and W (dimensions of the farmland) Returns: list: A list containing the side length of the largest square plot for each test case results = [] for L, W in cases: results.append(math.gcd(L, W)) return results"},{"question":"You are a director of a theater and you are organizing a line of people for the final scene of a play. There are n people standing in a line and each person has a unique height. You want to make the line as interesting as possible by following these rules: 1. Each person can either stand in their current position or switch places with someone else. 2. You want the resulting heights to form a zigzag pattern. In a zigzag pattern, heights should alternate between going up and down such that: - Heights[2i] < Heights[2i + 1] (for even indexed positions) AND - Heights[2i + 1] > Heights[2i + 2] (for odd indexed positions) You need to determine if it\'s possible to rearrange the line to meet these conditions with exactly one swap. The first line contains an integer n (1 ≤ n ≤ 10^5), the number of people in the line. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the people in the original order. Output \\"YES\\" if it is possible to rearrange the line with exactly one swap to meet the conditions, otherwise output \\"NO\\". Example: Input: 5 3 5 2 7 6 Output: YES Explanation: By swapping heights 5 and 2, the sequence [3, 2, 5, 7, 6] forms a zigzag pattern: 3 < 5 > 2 < 7 > 6 In the second test case, swapping cannot lead to a zigzag pattern, hence the output is \\"NO\\".","solution":"def can_form_zigzag(n, heights): def is_zigzag(arr): for i in range(len(arr) - 2): if i % 2 == 0: if arr[i] >= arr[i + 1] or arr[i + 1] <= arr[i + 2]: return False else: if arr[i] <= arr[i + 1] or arr[i + 1] >= arr[i + 2]: return False return True if is_zigzag(heights): return \\"YES\\" for i in range(n): for j in range(i + 1, n): heights[i], heights[j] = heights[j], heights[i] if is_zigzag(heights): return \\"YES\\" heights[i], heights[j] = heights[j], heights[i] return \\"NO\\""},{"question":"Eva is organizing a charity auction and wants to manage the inventory of donated items. She has a list of item categories, and each item belongs to a specific category. When a donor donates an item, Eva needs to check if the item category already exists in her inventory database. If the category does not exist, she adds it to the database; otherwise, she increases the item count for that category. She also needs to be able to query how many items are currently available for any given category. Write a program that helps Eva manage her inventory. The program should support the following operations: - \\"donate <category> <count>\\": Adds the specified count of items to the mentioned category in the inventory. If the category does not exist, it should be created. - \\"query <category>\\": Returns the current count of items for the specified category. Input: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of operations. The following n lines each contain an operation in the format described above. Output: For each \\"query\\" operation, print the current count of items in the specified category. If the category does not exist, print 0. Example: Input: 7 donate books 10 donate clothes 5 query books donate toys 2 query clothes donate clothes 3 query clothes Output: 10 5 8","solution":"class Inventory: def __init__(self): self.categories = {} def donate(self, category, count): if category in self.categories: self.categories[category] += count else: self.categories[category] = count def query(self, category): return self.categories.get(category, 0) def manage_inventory(n, operations): inventory = Inventory() results = [] for op in operations: parts = op.split() if parts[0] == \\"donate\\": category = parts[1] count = int(parts[2]) inventory.donate(category, count) elif parts[0] == \\"query\\": category = parts[1] results.append(inventory.query(category)) return results # Function to be directly called in test cases def execute_inventory_operations(n, operations): return manage_inventory(n, operations)"},{"question":"A treasure hunt is being organized in your neighborhood, involving a series of challenges at various locations. Each location is represented by a number on a circle, and the locations are numbered from 1 to n. To make the hunt more interesting, some shortcuts are added, allowing participants to directly jump from one location to another. You need to determine if there is a way for a participant to reach from a start location to a treasure location using a sequence of moves. You are given the total number of locations n, the number of shortcuts m, the starting location s and the location of the treasure t. Each shortcut allows a direct jump between two locations which are given as pairs (u, v). Your task is to check if there is a way to reach the treasure location from the start location using any combination of the shortcuts. The first line of the input contains four space-separated integers n, m, s, and t (1 ≤ n ≤ 100, 1 ≤ m ≤ 100, 1 ≤ s, t ≤ n) – the number of locations, the number of shortcuts, the starting location, and the treasure location. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) – a shortcut allowing a direct jump from location u to location v. Print the word \\"YES\\" if there is a sequence of shortcuts that allows reaching the treasure location from the start location, otherwise, print \\"NO\\". Consider the following sample input: 7 6 1 5 1 2 2 3 3 4 4 5 5 6 6 1 In this case, the output should be: YES As there is a sequence of shortcuts from location 1 to location 5 (1 -> 2 -> 3 -> 4 -> 5).","solution":"def can_reach_treasure(n, m, s, t, shortcuts): from collections import defaultdict, deque # Represent the graph using adjacency list graph = defaultdict(list) for u, v in shortcuts: graph[u].append(v) graph[v].append(u) # Assuming bi-directional as not mentioned otherwise # Using BFS to find if there is a path from s to t queue = deque([s]) visited = set() while queue: current = queue.popleft() if current == t: return \\"YES\\" for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return \\"NO\\""},{"question":"Alice is organizing an event and needs to create a seating arrangement for her guests. She has a certain number of guests n, each identified by a unique integer from 1 to n. Alice wants to place her guests in a single line with the condition that no two guests who dislike each other sit next to each other. You are given m pairs of integers, each indicating a pair of guests who dislike each other. Your task is to determine if it is possible to arrange all the guests in a single line such that no two guests in a given pair are adjacent. If such an arrangement is possible, output any one valid arrangement. Otherwise, output \\"IMPOSSIBLE\\". The first line consists of two integers n and m. Then m lines follow, each consisting of two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), which means that guests ai and bi dislike each other. Print a single line containing a permutation of integers from 1 to n that satisfies the condition or \\"IMPOSSIBLE\\" if no such arrangement exists. If there are multiple correct answers, you may print any of them. Example: Input: 5 3 1 2 2 3 4 5 Output: 1 3 2 4 5","solution":"from collections import defaultdict, deque def seating_arrangement(n, m, dislikes): dislike_graph = defaultdict(list) for a, b in dislikes: dislike_graph[a].append(b) dislike_graph[b].append(a) color = {} # Try to color the graph using two colors (0 and 1) def bfs(start): queue = deque([start]) color[start] = 0 while queue: v = queue.popleft() for neighbor in dislike_graph[v]: if neighbor in color: if color[neighbor] == color[v]: return False else: color[neighbor] = 1 - color[v] queue.append(neighbor) return True for guest in range(1, n + 1): if guest not in color: if not bfs(guest): return \\"IMPOSSIBLE\\" # Separate guests into two groups based on their color group_0 = [guest for guest in range(1, n + 1) if color[guest] == 0] group_1 = [guest for guest in range(1, n + 1) if color[guest] == 1] # Return one of the valid arrangements by combining both groups return group_0 + group_1 # Example usage n = 5 m = 3 dislikes = [(1, 2), (2, 3), (4, 5)] print(seating_arrangement(n, m, dislikes)) # Output should be a valid arrangement or \\"IMPOSSIBLE\\""},{"question":"You are organizing a coding competition with n participants. Each participant has a unique skill level from 1 to n, where a participant with skill level i can complete any problem with difficulty <= i. The competition has m problems, each with a certain difficulty level, given in an array. The goal is to distribute medals to participants based on the number of problems they solve. A participant wins a medal if they solve the highest number of problems among all participants. You need to count how many participants won at least one medal and by how many problems. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of participants and the number of problems. The second line contains m integers d1, d2, ..., dm (1 ≤ di ≤ n) — the difficulties of the problems. Print two integers: the number of participants who won a medal and the maximum number of problems solved by a participant. Example Input: ``` 5 7 1 3 2 4 3 2 1 ``` Example Output: ``` 2 3 ``` Explanation: In the given example, participants with skill levels 1 through 5 can solve the following number of problems: - Skill level 1: 2 problems (difficulties 1, 1) - Skill level 2: 4 problems (difficulties 1, 2, 2, 1) - Skill level 3: 6 problems (difficulties 1, 3, 2, 3, 2, 1) - Skill level 4: 7 problems (all of them) - Skill level 5: 7 problems (all of them) The participants with skill levels 4 and 5 win medals, solving the maximum 7 problems.","solution":"def distribute_medals(n, m, difficulties): Returns the number of participants who won a medal and the maximum number of problems solved. :param n: Number of participants :param m: Number of problems :param difficulties: List of problem difficulties :return: Tuple with number of medal winners and the maximum number of problems solved # List to keep count of problems each participant can solve problems_solved = [0] * n # Count problems each participant can solve for difficulty in difficulties: for i in range(difficulty - 1, n): problems_solved[i] += 1 # Find the maximum number of problems solved max_problems_solved = max(problems_solved) # Find number of participants who solved the maximum number of problems num_medal_winners = problems_solved.count(max_problems_solved) return num_medal_winners, max_problems_solved"},{"question":"You are given two strings s1 and s2 consisting of lowercase English letters. You need to check if it is possible to transform s1 into s2 by deleting some (possibly zero) characters from s1 without rearranging the order of the remaining characters. For example, if s1 is \\"abcde\\" and s2 is \\"ace\\", you can delete \'b\' and \'d\' from s1 to obtain s2. The first line contains an integer t (1 ≤ t ≤ 10^5) — the number of test cases in the input. Each test case is given in two lines: - The first line contains the string s1 (1 ≤ |s1| ≤ 10^5) — the original string. - The second line contains the string s2 (1 ≤ |s2| ≤ 10^5) — the target string. It is guaranteed that the total length of all strings in one test does not exceed 10^6. Print t answers, each of which is a string \\"YES\\" if the transformation is possible or \\"NO\\" if it is not. The letters in words can be printed in any case (upper or lower).","solution":"def can_transform(s1, s2): Check if it\'s possible to transform s1 into s2 by deleting some characters from s1 without rearranging the order. i, j = 0, 0 while i < len(s1) and j < len(s2): if s1[i] == s2[j]: j += 1 i += 1 return j == len(s2) def transformation_possible(test_cases): Takes a list of tuples containing test cases and returns a list of \\"YES\\" or \\"NO\\" for each test case. results = [] for s1, s2 in test_cases: if can_transform(s1, s2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A group of friends decided to play a game where they collect unique tokens with values assigned to each token. The game is played over several rounds, and in each round, new tokens are collected. After all rounds are played, each friend\'s collection is evaluated, and points are awarded based on the sum of the values of the tokens in their collection. The friend with the highest total points wins the game. You are provided with the number of friends, the number of rounds, and the token values collected by each friend in each round. Your task is to determine the winner of the game. Assume that the number of friends and rounds is such that the problem can be processed efficiently. The input data will always form valid collections, and there are no constraints on the values of the tokens except that they are integers. **Input Format:** - The first line contains two integers: `f` (1 ≤ f ≤ 1000) - the number of friends, and `r` (1 ≤ r ≤ 1000) - the number of rounds. - The next `r` lines each contain `f` integers, where the `j`-th integer in the `i`-th line represents the value of the token collected by the `j`-th friend in the `i`-th round. **Output Format:** - The output should be a single line containing the index (1-based) of the friend with the highest total points. If there is a tie, print the smallest index. **Example:** ``` Input: 3 4 8 6 7 5 3 9 1 10 4 9 3 2 Output: 1 ``` In this example, friend 1 collects tokens with values 8, 5, 1, and 9 giving a total point of 23. Friend 2 collects tokens with values 6, 3, 10, and 3 for a total of 22 points. Friend 3 collects tokens with values 7, 9, 4, and 2 for a total of 22 points. Hence, friend 1 is the winner with the highest points (23).","solution":"def determine_winner(f, r, token_values): Determines the winner of the game based on the highest total points. :param f: int - number of friends :param r: int - number of rounds :param token_values: List[List[int]] - 2D list where each row represents token values collected in each round by each friend. :return: int - the 1-based index of the friend with the highest total points. total_points = [0] * f for round_values in token_values: for i in range(f): total_points[i] += round_values[i] max_points = max(total_points) winner = total_points.index(max_points) + 1 return winner"},{"question":"Polycarp participated in a programming competition and received a strange problem. He was given a directed graph and needed to find whether it contains any cycles. A directed graph is a graph in which the edges have a direction, going from one vertex to another. Polycarp has written down all the vertices and edges of the directed graph. Your task is to help Polycarp determine if the graph contains any cycles. A cycle in a directed graph is a non-empty sequence of vertices v1, v2, ..., vk such that there is a directed edge from vi to vi+1 for all 1 ≤ i < k and a directed edge from vk back to v1. The first line contains two integers n and m (1 ≤ n, m ≤ 10000) — the number of vertices and edges in the graph, respectively. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n), which means there is a directed edge from vertex u to vertex v. Output \\"YES\\" if the graph contains a cycle, otherwise, print \\"NO\\". Example: ``` Input: 3 3 1 2 2 3 3 1 Output: YES ``` In this example, the vertices 1, 2, and 3 form a cycle: 1 → 2 → 3 → 1.","solution":"def contains_cycle(n, m, edges): from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [False] * (n + 1) rec_stack = [False] * (n + 1) def dfs(v): visited[v] = True rec_stack[v] = True for neighbour in graph[v]: if not visited[neighbour]: if dfs(neighbour): return True elif rec_stack[neighbour]: return True rec_stack[v] = False return False for node in range(1, n + 1): if not visited[node]: if dfs(node): return True return False def detect_cycle_in_graph(n, m, edges): if contains_cycle(n, m, edges): return \\"YES\\" else: return \\"NO\\""},{"question":"A prestigious coding competition is about to start, and you are one of the participants. Each participant will be given a sequence of positive integers representing their scores in previous contests. The competition organizers want to ensure a fair initial ranking and therefore will give special privileges to participants who meet certain criteria. The criteria for a \\"privileged\\" participant is defined as follows: - The participant must have a strictly increasing sequence of scores in their previous contests. - The sum of all scores in their sequence must be a prime number. Your task is to determine how many participants are privileged according to these criteria. The first line of the input contains an integer, `T` (1 ≤ T ≤ 100), the number of participants. The next `T` lines each contain an integer `n` (1 ≤ n ≤ 100), followed by `n` space-separated positive integers representing the scores of the participant in previous contests. Print the number of participants who are privileged. Input: ``` 3 5 1 2 3 4 5 4 2 3 5 7 3 2 2 4 ``` Output: ``` 1 ``` Explanation: - The first participant has scores [1, 2, 3, 4, 5], which is strictly increasing and sums to 15 (not prime). - The second participant has scores [2, 3, 5, 7], which is strictly increasing and sums to 17 (prime). - The third participant has scores [2, 2, 4], which is not strictly increasing. Therefore, only 1 participant is privileged.","solution":"def is_prime(num): Checks if a number is prime. if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def is_strictly_increasing(seq): Checks if a sequence of numbers is strictly increasing. for i in range(1, len(seq)): if seq[i] <= seq[i - 1]: return False return True def count_privileged_participants(T, participants_scores): privileged_count = 0 for scores in participants_scores: if is_strictly_increasing(scores) and is_prime(sum(scores)): privileged_count += 1 return privileged_count"},{"question":"The University of Animal Intelligence (UAI) has a unique method for grading student assignments. As part of their final exams, students are given a string representing their assignment and a dictionary of animal intelligence rules that determine the gradek of the string. Each rule maps a substring to a specific grade increment. A string is evaluated by finding all non-overlapping substrings that match any of the rules and summing their respective grade increments. If a substring matches more than one rule, only the rule with the highest grade increment applies. You are given the assignment string and a list of grading rules. Write an algorithm that calculates the final grade for the assignment. The first line contains a non-empty string `assignment` consisting of lowercase Latin letters. The length of the string doesn\'t exceed 10^5. The second line contains an integer `m` representing the number of grading rules (1 ≤ m ≤ 100). Each of the next `m` lines contains a string `substring` and an integer `increment` (1 ≤ |substring| ≤ 10, 1 ≤ increment ≤ 10^6), representing a grading rule. Print a single integer, the final grade calculated for the assignment. Example input: ``` assignment 5 cat 3 dog 4 mouse 5 at 2 do 3 ``` Example output: ``` 10 ``` In the example, the string \\"assignment\\" is matched by: - \\"cat\\" which gives 3 points, - \\"dog\\" which gives 4 points, - \\"at\\" which can be considered but \\"cat\\" is preferred because it has a higher increment. Hence, the final grade would be 3 + 4 + 3 = 10.","solution":"def calculate_final_grade(assignment, rules): Calculate the final grade for the assignment based on the given grading rules. Parameters: assignment (str): The assignment string containing only lowercase Latin letters. rules (list): A list of tuples where each tuple contains a substring and its corresponding grade increment. Returns: int: The final grade for the assignment. from collections import defaultdict # Convert rules to a dictionary with maximum increment for each substring rule_dict = defaultdict(int) for substring, increment in rules: if rule_dict[substring] < increment: rule_dict[substring] = increment final_grade = 0 i = 0 n = len(assignment) while i < n: max_increment = 0 max_length = 0 # Check all possible starting substrings from current position for length in range(1, 11): # Substrings can be up to length 10 if i + length <= n: candidate = assignment[i:i + length] if candidate in rule_dict and rule_dict[candidate] > max_increment: max_increment = rule_dict[candidate] max_length = length # Increment the final grade and move the index accordingly final_grade += max_increment i += max_length if max_length > 0 else 1 return final_grade"},{"question":"Given an array of integers representing heights of stacks of coins, you need to determine if it is possible to make all stacks equal in height by performing a series of moves. In each move, you can choose any two stacks and transfer one coin from the taller stack to the shorter stack. The first line of the input contains a single integer `t` (1 ≤ t ≤ 50) — the number of test cases. Each test case consists of two lines. The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of stacks. The second line contains `n` space-separated integers `h1, h2, ..., hn` (1 ≤ hi ≤ 1000) — the heights of the stacks. For each test case, print \\"YES\\" if it is possible to make all stacks equal in height by performing the allowed moves, otherwise print \\"NO\\". # Example ``` Input: 3 3 3 4 5 2 8 3 4 7 7 7 7 Output: YES NO YES ``` # Explanation In the first test case, the stacks can be equalized with the following moves: Move one coin from stack 3 to stack 1 and move one coin from stack 3 to stack 2, making each height 4. In the second test case, there is no way to equalize the stacks by moving coins between them. In the third test case, all stacks are already of equal height.","solution":"def can_make_stacks_equal(t, test_cases): results = [] for i in range(t): n, heights = test_cases[i] total_coins = sum(heights) if total_coins % n == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each node has a certain value associated with it. Your task is to determine the maximum sum of node values across all paths on the graph. A path is defined as a sequence of nodes connected by edges, starting from any node and ending at any other node (or the same node), without reusing any node along the path. The first line of input contains two integers `n` (1 ≤ n ≤ 100,000) and `m` (0 ≤ m ≤ 200,000) — the number of nodes and the number of edges. The second line contains `n` space-separated integers `v1, v2, ..., vn` (1 ≤ vi ≤ 1,000,000) — the values of the nodes. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — denoting an edge between node `u` and node `v`. Output a single integer — the maximum sum of node values across all possible paths. Example: Input: ``` 5 4 1 2 3 4 5 1 2 1 3 3 4 4 5 ``` Output: ``` 15 ``` Explanation: The graph can be visualized as follows: ``` 1 - 2 | 3 - 4 - 5 ``` The maximum sum path is from node 1 to node 5 with the path 1 -> 3 -> 4 -> 5, giving a sum of 1 + 3 + 4 + 5 = 13. Similar reasoning applies to any optimal path found.","solution":"def get_max_path_sum(nodes_values, edges, n): import sys sys.setrecursionlimit(200000) from collections import defaultdict def dfs(node, visited, values_sum, adj_list): visited[node] = True current_sum = values_sum[node] max_sum = current_sum for neighbor in adj_list[node]: if not visited[neighbor]: path_sum = dfs(neighbor, visited, values_sum, adj_list) max_sum = max(max_sum, current_sum + path_sum) visited[node] = False return max_sum adj_list = defaultdict(list) values_sum = [0] + nodes_values for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) max_path_sum = 0 for node in range(1, n + 1): max_path_sum = max(max_path_sum, dfs(node, visited, values_sum, adj_list)) return max_path_sum # Example usage: # n, m = 5, 4 # nodes_values = [1, 2, 3, 4, 5] # edges = [(1, 2), (1, 3), (3, 4), (4, 5)] # result = get_max_path_sum(nodes_values, edges, n) # print(result) # Output should be 15"},{"question":"You are given an array of length n where each element is an integer. You have to select a subset (possibly empty) of the array such that the sum of the elements in the subset is even. Calculate the number of such subsets. If an array only contains one element and it is odd, return 0. The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the length of the array. The second line contains n integers a1, a2, ..., an (|ai| ≤ 1000) — the elements of the array. The output should contain a single integer — the number of subsets with an even sum. For example, for input: ``` 3 1 2 3 ``` The output should be: ``` 4 ``` Explanation: The possible subsets with even sums are: - [] - [2] - [1, 3] - [1, 2, 3] For another input: ``` 2 1 1 ``` The output should be: ``` 1 ``` Explanation: The only subset with an even sum is the empty subset [].","solution":"def count_even_sum_subsets(n, arr): Function to count subsets with an even sum if n == 1: return 1 if arr[0] % 2 == 0 else 0 total_subsets = 2 ** n odd_count = sum(1 for x in arr if x % 2 != 0) if odd_count == 0: return total_subsets even_count_subsets = total_subsets // 2 return even_count_subsets"},{"question":"Alice just received a new pair of magic binoculars for her birthday. These binoculars are special because they filter out all the disturbances and allow her to detect the exact number of stars she can see in the night sky. The stars are represented by a grid of size n x n, where each cell contains either \'0\' (no star) or \'1\' (star). If Alice looks at any cell (i, j) in the grid and there is a star at that cell, she can also see stars in the same row and column as (i, j). Alice wants to count the total number of unique stars she can see in the entire grid using this method. Help Alice by writing a program that calculates the number of unique stars she can see. # Input - The first line contains a single integer n (1 ≤ n ≤ 1000), the size of the grid. - The next n lines contain n characters each, representing the grid (each character is either \'0\' or \'1\'). # Output - Print a single integer, the number of unique stars Alice can see. # Example Input ``` 3 101 010 101 ``` Output ``` 5 ``` In this example, Alice can see all the stars located in the same row and column where any star appears. The unique stars she can see are located at positions (1,1), (1,3), (2,2), (3,1), and (3,3) — a total of 5 stars. # Explanation Alice’s method of viewing stars includes all stars situated in the same row and column as any ‘1’ detected. Therefore, count the unique stars based on these rules to give Alice the accurate number she can observe.","solution":"def count_unique_stars(n, grid): Returns the number of unique stars Alice can see in the grid. Parameters: n (int): The size of the grid. grid (list of str): The grid containing \'0\' and \'1\' characters, where \'1\' represents a star. Returns: int: The number of unique stars in the grid. rows_with_stars = set() cols_with_stars = set() for i in range(n): for j in range(n): if grid[i][j] == \'1\': rows_with_stars.add(i) cols_with_stars.add(j) count = 0 for i in rows_with_stars: for j in cols_with_stars: if grid[i][j] == \'1\': count += 1 return count"},{"question":"Alice loves creating patterns using a specific type of string. She starts with an empty string and repeatedly appends a lowercase English letter (\'a\' to \'z\') to it according to the following rules: 1. Each letter append operation to the string can be represented as a tuple consisting of the letter and the index in the string after which the letter is to be appended. 2. If Alice wants to append a letter at the beginning of the string, the index is specified as -1. 3. Alice wants to know how many unique strings she can create by making exactly k operations. Given an integer k (0 ≤ k ≤ 20), determine the total number of unique strings Alice can create by performing exactly k operations as per her rules. # Input: A single integer k. # Output: A single integer representing the number of unique strings that can be formed by performing exactly k operations. # Example: Input: ``` 2 ``` Output: ``` 28 ``` Explanation: For k = 2, Alice can perform two operations in multiple ways: 1. Append \'a\' and then \'b\' resulting in \\"ab\\". 2. Append \'b\' and then \'a\' resulting in \\"ba\\". 3. Append \'a\' and then \'a\' resulting in \\"aa\\". 4. Append \'z\' and then \'a\' resulting in \\"za\\". 5. And so on... Thus, there are 28 unique strings that can be formed with exactly 2 operations.","solution":"def count_unique_strings(k): Returns the number of unique strings that can be formed by performing exactly k operations. if k == 0: return 1 # only the empty string return 26 ** k"},{"question":"You are given an array of integers and an integer value `k`. Your task is to determine if it\'s possible to partition the array into exactly `k` groups such that the sum of the elements in each group is equal. The first line of the input contains an integer `t` (`1 ≤ t ≤ 100`), the number of test cases. Each test case consists of two lines. The first line contains two integers `n` and `k` (`1 ≤ n ≤ 100`, `1 ≤ k ≤ n`), where `n` is the number of elements in the array. The second line contains `n` space-separated integers `a1, a2, ..., an` (`0 ≤ ai ≤ 1000`), the elements of the array. For each test case, print \\"YES\\" if it\'s possible to partition the array into exactly `k` groups with equal sum, otherwise print \\"NO\\". # Input The input consists of multiple test cases based on the following format: ``` t n k a1 a2 … an ``` # Output For each test case, output \\"YES\\" if the partition is possible and \\"NO\\" otherwise. # Examples Example 1 Input: ``` 2 5 3 2 1 4 3 2 6 2 1 2 3 4 5 6 ``` Output: ``` YES NO ``` Example 2 Input: ``` 1 4 2 4 5 1 6 ``` Output: ``` NO ``` # Explanation **Example 1:** In the first test case, it\'s possible to partition the array [2, 1, 4, 3, 2] into groups [2, 3] and [2, 1, 4] with equal sum. In the second test case, the array [1, 2, 3, 4, 5, 6] cannot be partitioned into 2 groups with equal sum. **Example 2:** For the second example, it is not possible to partition [4, 5, 1, 6] into 2 parts with equal sum.","solution":"def can_partition_into_k_equal_sum_groups(n, k, arr): total_sum = sum(arr) if total_sum % k != 0: return \\"NO\\" target_sum = total_sum // k visited = [False] * n def backtrack(start, k_remaining, current_sum): if k_remaining == 0: return True if current_sum == target_sum: return backtrack(0, k_remaining - 1, 0) for i in range(start, n): if not visited[i] and current_sum + arr[i] <= target_sum: visited[i] = True if backtrack(i + 1, k_remaining, current_sum + arr[i]): return True visited[i] = False return False return \\"YES\\" if backtrack(0, k, 0) else \\"NO\\" def solve(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] results.append(can_partition_into_k_equal_sum_groups(n, k, arr)) return results"},{"question":"You are given an array of integers. You need to determine the length of the longest increasing subsequence that can be derived from the given array. An increasing subsequence is a sequence of elements from the array where each subsequent element is greater than the previous one, and the elements in the sequence are in the same order as they appear in the array. The first line contains an integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the array. Print a single integer — the length of the longest increasing subsequence in the array. Example: Input: 6 10 22 9 33 21 50 Output: 4 In this example, one possible longest increasing subsequence is [10, 22, 33, 50], which has length 4.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the given list of numbers. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Alex has a collection of distinct videos he wants to watch. Each video has a start time and an end time. You are to determine the maximum number of videos Alex can watch without any overlaps. The first line contains an integer n (1 leq n leq 10^5) — the number of videos. The next n lines contain two integers each, s_i and e_i (1 leq s_i < e_i leq 10^9) — the start and end times of the i-th video. The start and end times of each video are distinct. Print the maximum number of videos Alex can watch without any overlaps. # Example **Input:** ``` 5 1 3 2 5 4 6 6 7 5 8 ``` **Output:** ``` 3 ``` # Explanation: Alex can watch videos that start and end at the following times: [1, 3], [4, 6], and [6, 7]. This leads to the maximum number of videos (3) that Alex can watch without any overlaps.","solution":"def max_videos_watchable(n, videos): Determines the maximum number of non-overlapping videos Alex can watch. Parameters: n (int): Number of videos. videos (list of tuples): List containing the start and end times of each video. Returns: int: Maximum number of videos that can be watched without overlaps. # Sort the videos by their end time videos.sort(key=lambda x: x[1]) max_videos = 0 last_end_time = -1 for start, end in videos: if start >= last_end_time: max_videos += 1 last_end_time = end return max_videos"},{"question":"Dan has a rectangular grid with n rows and m columns. Each cell in the grid contains an integer. Dan wants to move from the top-left cell to the bottom-right cell. He can only move either to the right or down at any point in time. The goal is to find the path that maximizes the sum of the integers along the path. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Each of the next n lines contains m integers representing the values in each cell of the grid (-1000 ≤ cell value ≤ 1000). Output a single integer — the maximum sum that can be obtained by moving from the top-left cell to the bottom-right cell. **Example:** Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 29 In this example, the path is 1 -> 4 -> 7 -> 8 -> 9, and the sum is 1 + 4 + 7 + 8 + 9 = 29.","solution":"def max_path_sum(n, m, grid): Returns the maximum sum of the integers along the path from the top-left cell to the bottom-right cell of the grid. # Create a DP table to store the maximum sums dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Starting point # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the maximum sum return dp[n-1][m-1]"},{"question":"You are given a network of interconnected computers. Each computer can communicate directly with any other computer it is connected to. Your task is to optimize the communication in the network by ensuring that the maximum number of computers can communicate with each other with the minimal number of direct connections utilized. A set of computers that can communicate with each other is called a \\"communication cluster.\\" You can assume that there are no direct communications already established, and it\'s your job to set up these connections to form the communication clusters. Your goal is to connect the computers such that the maximum number of computers can communicate with everyone else in their respective cluster, and the number of direct cables (connections) used is minimized. You must output the minimal number of such direct communications required to achieve this. The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of computers in the network. Output two integers — the number of communication clusters formed and the minimal number of direct communications required. Example: Input: 5 Output: 1 4 Explanation: All 5 computers can communicate with each other by creating a fully connected cluster using 4 direct communications: connect computer 1 to 2, 2 to 3, 3 to 4, and 4 to 5. The entire network of computers can now communicate with each other.","solution":"def communication_clusters(n): Given the number of computers n, this function returns the minimal number of communication clusters and the minimal number of direct communications required to ensure all computers in the network can communicate with each other. # The network forms a single communication cluster clusters = 1 # For n computers, we need n-1 connections to form a single fully connected cluster cables = n - 1 return clusters, cables"},{"question":"You are given a list of n integers and a sliding window size k. You need to find the maximum value in each sliding window of size k moving from the start of the list to the end. For example, given the list [1, 3, 1, 2, 0, 5] and k = 3, the maximum values in each sliding window are [3, 3, 2, 5]. Write a function that receives the list of integers and the sliding window size k, and returns a list of the maximum values in each sliding window. Your solution should have a time complexity of O(n). **Input:** - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^6). - The second line contains n integers, the elements of the list (each integer between -10^5 and 10^5). **Output:** - A single line containing n - k + 1 integers, the maximum values in each sliding window of size k. **Example:** Input: ``` 6 3 1 3 1 2 0 5 ``` Output: ``` 3 3 2 5 ```","solution":"from collections import deque def max_sliding_window(nums, k): Returns the maximum values in each sliding window of size k. if not nums or k == 0: return [] n = len(nums) if k == 1: return nums deq = deque() result = [] for i in range(n): # Remove indices that are out of the current window if deq and deq[0] < i - k + 1: deq.popleft() # Remove elements from the deque that are smaller than the current element while deq and nums[deq[-1]] < nums[i]: deq.pop() deq.append(i) # The first k-1 windows are smaller than k so we start adding to result from i >= k - 1 if i >= k - 1: result.append(nums[deq[0]]) return result"},{"question":"Sancho is participating in a programming contest. There are multiple problems in the contest and each problem can have a certain number of points assigned. However, the contest has a rule: if two problems have the same number of points, they are considered equivalent, and solving any one of them counts as solving the other ones of the same points. Sancho wants to know the maximum number of distinct problems he can solve given this rule. Help Sancho determine that. You are given a list of integers representing the points of the problems in the contest. Write a function that returns the maximum number of distinct problems Sancho can solve. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 10^5) — the number of problems. The second line of each test case contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9) — the points of the problems. For each test case, print one integer — the maximum number of distinct problems Sancho can solve. Example: Input: 3 5 1 2 2 3 3 4 4 4 4 4 6 5 6 7 8 8 8 Output: 3 1 4","solution":"def max_distinct_problems(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] problems = test_cases[i][1] distinct_problems = len(set(problems)) results.append(distinct_problems) return results"},{"question":"Anna is organizing a coding competition for her friends, and she wants to ensure that everyone has fun solving the problems. She knows that her friends love puzzles involving arrays and optimal strategies. To make it interesting, she decided on the following challenge: You are given an array a of n integers. You can perform a series of operations on this array. In each operation, you must choose two consecutive elements of the array (i.e., elements at indices i and i+1 for some 1 leq i < n), and replace both elements with their sum. After each operation, the length of the array decreases by one. Your task is to determine the minimum possible value of the last remaining element of the array after performing exactly n-1 operations. The first line of input consists of a single integer t (1 leq t le 10^4) — the number of test cases. Each test case starts with a single integer n (2 leq n leq 200) — the number of elements in the array. The second line of each test case contains n space-separated integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) — the elements of the array. For each test case, output a single integer - the minimum possible value of the last remaining element of the array after performing exactly n-1 operations. __Input:__ ``` 2 3 4 2 1 4 1 2 3 4 ``` __Output:__ ``` 7 10 ``` __Explanation:__ For the first test case: - Choose elements 4 and 2, replace them with their sum 6. New array: [6, 1] - Choose elements 6 and 1, replace them with their sum 7. New array: [7] Thus, the minimum possible value of the last array element is 7. For the second test case: - Choose elements 1 and 2, replace them with their sum 3. New array: [3, 3, 4] - Choose elements 3 and 3, replace them with their sum 6. New array: [6, 4] - Choose elements 6 and 4, replace them with their sum 10. New array: [10] Thus, the minimum possible value of the last array element is 10.","solution":"def min_possible_value(t, test_cases): Determines the minimum possible value of the last remaining element of the array after performing exactly n-1 operations as described. Parameters: - t (int): Number of test cases - test_cases (list of tuples): List of test case tuples, each containing: - n (int): Number of elements in the array - array (list of int): The array of integers Returns: - list: A list of integers, where each integer is the result for the corresponding test case results = [] for n, array in test_cases: # The minimum possible value of the last remaining element is always the sum of all elements in the initial array. result = sum(array) results.append(result) return results"},{"question":"You are given a binary tree with n nodes. Each node is identified by a unique integer between 1 and n. The root node is always node 1. You need to process q queries on this tree, where each query is of one of the following two types: 1. `UPDATE x value`: Update the value of the node with id x to `value`. 2. `QUERY x k`: Find the maximum value among all nodes that are in the subtree of node x and have a distance of at most k edges from node x. # Input - The first line contains an integer n (1 leq n leq 10^5), the number of nodes in the tree. - The second line contains n integers values_1, values_2, ..., values_n, where values_i is the initial value of node i. - The next n-1 lines each contain two integers u and v (1 leq u, v leq n, u ne v) which denote an edge in the tree. - The following line contains an integer q (1 leq q leq 10^5), the number of queries. - The following q lines each describe a query: - `UPDATE x value` denoting an update query. - `QUERY x k` denoting a query for maximum value. # Output For each query of type `QUERY x k`, output the maximum value of the nodes satisfying the query conditions. Each result should be printed on a new line. # Example Input ``` 5 3 4 5 1 2 1 2 1 3 2 4 2 5 3 QUERY 2 1 UPDATE 4 6 QUERY 1 2 ``` Output ``` 4 6 ``` # Explanation In the first query, we are looking for nodes within 1 edge from node 2. These nodes are node 1, node 4, and node 5. The maximum value among them is 4. In the second query, after updating the value at node 4 to 6, we query for nodes within 2 edges from node 1. The nodes are node 2, node 3, node 4, and node 5. The maximum value among them is 6.","solution":"from collections import defaultdict, deque class BinaryTree: def __init__(self, n, values, edges): self.n = n self.values = values self.adj = defaultdict(list) for u, v in edges: self.adj[u].append(v) self.adj[v].append(u) def update_value(self, x, value): self.values[x-1] = value def query_max_value(self, x, k): queue = deque([(x, 0)]) visited = set([x]) max_value = self.values[x-1] while queue: node, distance = queue.popleft() if distance > k: continue max_value = max(max_value, self.values[node-1]) for neighbor in self.adj[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return max_value def process_queries(n, values, edges, queries): tree = BinaryTree(n, values, edges) result = [] for query in queries: parts = query.split() if parts[0] == \'UPDATE\': x, value = int(parts[1]), int(parts[2]) tree.update_value(x, value) elif parts[0] == \'QUERY\': x, k = int(parts[1]), int(parts[2]) result.append(tree.query_max_value(x, k)) return result # Example usage n = 5 values = [3, 4, 5, 1, 2] edges = [(1, 2), (1, 3), (2, 4), (2, 5)] queries = [\\"QUERY 2 1\\", \\"UPDATE 4 6\\", \\"QUERY 1 2\\"] results = process_queries(n, values, edges, queries) print(\\"n\\".join(map(str, results))) # Example will print: 4, 6"},{"question":"You are given a series of N cities connected by M bidirectional roads. Each road connects two different cities and has a specific travel cost associated with it. The cities are labeled from 1 to N. Your task is to determine the minimum cost required to travel from city 1 to city N. If there is no path from city 1 to city N, return -1. Note that it is guaranteed there are no negative travel costs. You need to solve this problem for multiple test cases. Input: - The first line contains a single integer T (1 ≤ T ≤ 50), the number of test cases. - For each test case: - The first line contains two integers N (2 ≤ N ≤ 100) and M (1 ≤ M ≤ 1000) — the number of cities and the number of roads, respectively. - The next M lines each contain three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^6), representing a road between cities u and v with a travel cost of w. Output: For each test case, output a single integer — the minimum cost required to travel from city 1 to city N, or -1 if there is no path. Example: Input: 2 4 4 1 2 1 2 3 2 3 4 3 1 4 10 3 2 1 2 3 2 3 4 Output: 6 7 Explanation: In the first test case, the minimum cost from city 1 to city 4 is achieved by taking the path 1 -> 2 -> 3 -> 4 with a total cost of 1 + 2 + 3 = 6. In the second test case, the minimum cost from city 1 to city 3 is achieved by taking the path 1 -> 2 -> 3 with a total cost of 3 + 4 = 7.","solution":"import heapq def dijkstra(n, edges, start, end): graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) pq = [(0, start)] # (cost, node) dist = {i: float(\'inf\') for i in range(1, n+1)} dist[start] = 0 while pq: current_cost, u = heapq.heappop(pq) if u == end: return current_cost for w, v in graph[u]: next_cost = current_cost + w if next_cost < dist[v]: dist[v] = next_cost heapq.heappush(pq, (next_cost, v)) return -1 def find_min_cost(test_cases): results = [] for (n, m, edges) in test_cases: cost = dijkstra(n, edges, 1, n) results.append(cost) return results"},{"question":"You are given an integer array `arr` of length `n`, and a series of `q` queries. Each query is one of two types: 1. `1 l r k`: Increment each element in the subarray from the `l`-th to the `r`-th position (both inclusive) by `k`. 2. `2 l r`: Calculate the sum of elements in the subarray from the `l`-th to the `r`-th position (both inclusive). Implement a function that processes the array and answers all given queries. The first line of input contains two integers `n` (1 ≤ n ≤ 10^5) and `q` (1 ≤ q ≤ 10^5) — the length of the array and the number of queries, respectively. The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial elements of the array. Each of the following `q` lines contains a query in one of the two formats described above. It is guaranteed that for each query `1 l r k`, 1 ≤ l ≤ r ≤ n, and for each query `2 l r`, 1 ≤ l ≤ r ≤ n. Output the result of each `2 l r` query. **Example** Input: ``` 5 5 1 2 3 4 5 1 2 4 1 2 1 3 1 1 5 2 2 2 5 2 1 5 ``` Output: ``` 6 22 28 ``` **Explanation** - Initial array: [1, 2, 3, 4, 5] - After first query (1 2 4 1): [1, 3, 4, 5, 5] - Sum of elements from the 1st to the 3rd: 1 + 3 + 4 = 8 - After second query (1 1 5 2): [3, 5, 6, 7, 7] - Sum of elements from the 2nd to the 5th: 5 + 6 + 7 + 7 = 25 - Sum of elements from the 1st to the 5th: 3 + 5 + 6 + 7 + 7 = 28","solution":"def process_queries(n, q, arr, queries): Processes an array and answers a list of queries. Each query is of two types: 1. Increment each element in the subarray by a given value. 2. Calculate the sum of elements in the subarray. Parameters: n (int): Length of the array. q (int): Number of queries. arr (list of int): The initial elements of the array. queries (list of list of int): The queries to be processed. Returns: list of int: Results of sum queries. # Initialize the results list for type 2 queries. results = [] # Process each query. for query in queries: if query[0] == 1: # Increment operation _, l, r, k = query for i in range(l-1, r): arr[i] += k elif query[0] == 2: # Sum operation _, l, r = query results.append(sum(arr[l-1:r])) return results"},{"question":"Bob recently learned about conic sections and is particularly fascinated by ellipses. He devised a mathematical puzzle involving ellipses and points on the Cartesian plane. Given an ellipse defined by the equation frac{(x-h)^2}{a^2} + frac{(y-k)^2}{b^2} = 1 and a set of points, Bob wants to determine how many of those points lie inside or on the boundary of the ellipse. The first line contains one integer N (1 leq N leq 10^5) – the number of points. The next line contains four integers h, k, a, and b (|h|, |k| leq 10^4 and a, b leq 10^4) defining the ellipse. Each of the next N lines contains two integers x_i and y_i (|x_i|, |y_i| leq 10^4) – the coordinates of the points. Print a single integer – the number of points that lie inside or on the boundary of the ellipse. In the first example, the point (2, 2) lies outside the ellipse, while the points (0, 0) and (1, 1) lie inside. For the second example, all points lie on the boundary of the ellipse. **Example:** Input: ``` 3 0 0 2 3 2 2 0 0 1 1 ``` Output: ``` 2 ```","solution":"def count_points_in_ellipse(N, h, k, a, b, points): Counts how many points lie inside or on the boundary of the ellipse defined by ((x-h)^2 / a^2) + ((y-k)^2 / b^2) = 1 Parameters: N (int): Number of points h (int): x-coordinate of the center of the ellipse k (int): y-coordinate of the center of the ellipse a (int): Semi-major axis of the ellipse b (int): Semi-minor axis of the ellipse points (list): List of tuples, where each tuple (x, y) represents the coordinates of a point Returns: int: Number of points that lie inside or on the boundary of the ellipse count = 0 for x, y in points: if ((x - h)**2 / a**2) + ((y - k)**2 / b**2) <= 1: count += 1 return count # Example usage N = 3 h, k, a, b = 0, 0, 2, 3 points = [(2, 2), (0, 0), (1, 1)] print(count_points_in_ellipse(N, h, k, a, b, points)) # Output should be 2"},{"question":"Given a binary tree, return all paths from the root to each leaf node, each path in the form of a list. A leaf node is a node with no children. The first line contains an integer n (1 ≤ n ≤ 2500), the number of nodes in the tree. Each of the following n lines contains three integers x, y, z. x denotes the value of the node, y denotes the value of the left child and z denotes the value of the right child. If a node does not have a left child or right child, the corresponding value will be -1. Output all paths from the root to each leaf in lexicographical order, where each path should be represented as a list of node values. Example: Input: 5 1 2 3 2 -1 -1 3 4 5 4 -1 -1 5 -1 -1 Output: [1, 2] [1, 3, 4] [1, 3, 5]","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(n, nodes_info): if n == 0: return None nodes = {} for info in nodes_info: x, y, z = info if x not in nodes: nodes[x] = TreeNode(x) if y != -1: if y not in nodes: nodes[y] = TreeNode(y) nodes[x].left = nodes[y] if z != -1: if z not in nodes: nodes[z] = TreeNode(z) nodes[x].right = nodes[z] return nodes[nodes_info[0][0]] def all_paths_from_root_to_leaf(root): def dfs(node, path, result): if node: path.append(node.val) if not node.left and not node.right: # leaf node result.append(list(path)) else: dfs(node.left, path, result) dfs(node.right, path, result) path.pop() result = [] dfs(root, [], result) result.sort() return result def get_all_paths(n, nodes_info): root = build_tree(n, nodes_info) return all_paths_from_root_to_leaf(root)"},{"question":"**Problem Statement: Palindromic Partitioning** You are given a string ( s ) of length ( n ). A palindromic partition of ( s ) is a partition of the string into multiple non-empty contiguous substrings such that each substring is a palindrome. Your task is to find the minimum number of cuts needed to partition the string ( s ) into palindromic substrings. # Input - The first line contains an integer ( n ) (( 1 leq n leq 5000 )) — the length of the string ( s ). - The second line contains a string ( s ) of length ( n ) consisting of lowercase English letters. # Output - Output a single integer — the minimum number of cuts needed to partition the given string into palindromic substrings. # Examples **Example 1:** **Input:** ``` aab ``` **Output:** ``` 1 ``` **Explanation:** The string \\"aab\\" can be partitioned into \\"aa\\" and \\"b\\" with 1 cut. Both \\"aa\\" and \\"b\\" are palindromes. **Example 2:** **Input:** ``` abc ``` **Output:** ``` 2 ``` **Explanation:** The string \\"abc\\" can be partitioned into \\"a\\", \\"b\\", and \\"c\\" with 2 cuts. Each of \\"a\\", \\"b\\", and \\"c\\" is a palindrome. # Notes - The solution should efficiently handle strings of length up to 5000. - Utilize dynamic programming and palindrome checking to optimize the solution.","solution":"def min_palindromic_cut(s): n = len(s) # Create a 2D array to keep track of palindromic substrings is_palindrome = [[False] * n for _ in range(n)] for i in range(n): is_palindrome[i][i] = True # Single character is always a palindrome for length in range(2, n + 1): # length of the substring for i in range(n - length + 1): j = i + length - 1 if length == 2: is_palindrome[i][j] = (s[i] == s[j]) else: is_palindrome[i][j] = (s[i] == s[j]) and is_palindrome[i + 1][j - 1] cuts = [float(\'inf\')] * n for i in range(n): if is_palindrome[0][i]: cuts[i] = 0 else: for j in range(i): if is_palindrome[j + 1][i]: cuts[i] = min(cuts[i], cuts[j] + 1) return cuts[-1] if n > 0 else 0"},{"question":"The United Islands is a small nation with n islands numbered from 1 to n. Some islands are connected by direct sea routes, and others are not connected at all. The country\'s president wants to know if it is possible to travel from any island to any other island using the available sea routes. To achieve this, you need to find out if the graph formed by the islands and sea routes is fully connected. The first line of the input contains two integers n (1 ≤ n ≤ 100 000) and m (0 ≤ m ≤ 200 000) — the number of islands and the number of sea routes, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing a direct sea route between islands u and v. Output \\"Yes\\" if it is possible to travel between any two islands using the given sea routes, otherwise output \\"No\\". In the first example, there is a direct route between each pair of islands, making it possible to travel between all islands. Thus, the output is \\"Yes\\". In the second example, island 4 is not connected to the others, making it impossible to travel between all islands. Therefore, the output is \\"No\\".","solution":"def is_fully_connected(n, m, routes): Determines if it is possible to travel between any two islands using the given sea routes. Parameters: - n: number of islands (1 ≤ n ≤ 100,000) - m: number of sea routes (0 ≤ m ≤ 200,000) - routes: list of tuples representing the sea routes Returns: - \\"Yes\\" if the islands are fully connected, \\"No\\" otherwise if n == 1: return \\"Yes\\" # Only one island is trivially connected from collections import defaultdict, deque # Create an adjacency list to represent the graph graph = defaultdict(list) for u, v in routes: graph[u].append(v) graph[v].append(u) # Function to perform BFS def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited # Perform BFS from the first island (node 1) visited_islands = bfs(1) # Check if all islands are visited return \\"Yes\\" if len(visited_islands) == n else \\"No\\""},{"question":"Emma is planning her birthday party and wants to create the perfect drinking game for her friends. The game consists of distributing a set of glasses with different volumes among her friends in such a way that the game can last as long as possible. Each friend can drink from only one glass, and no two friends can drink from glasses of the same volume. Emma wants to ensure that the difference in volume between the smallest and the largest glass each friend gets is minimized. You are given a list of integers representing the volume of each glass. Your task is to help Emma by distributing the glasses to her friends in such a way that the maximum difference in volume between the smallest and largest glass each friend gets is minimized. Each friend gets exactly one glass. Input Format: - The first line contains an integer n (2 ≤ n ≤ 100,000), the number of glasses. - The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 1,000,000), representing the volumes of the glasses. Output: - Output a single integer, the minimized maximum difference in volume between the smallest and largest glass each friend gets. Example: Input: 5 1 2 3 4 5 Output: 1 Explanation: Emma can distribute the glasses as follows: - Friend 1: glass with volume 1 - Friend 2: glass with volume 2 - Friend 3: glass with volume 3 - Friend 4: glass with volume 4 - Friend 5: glass with volume 5 The maximum difference in volume between the smallest and largest glass each friend gets is 1, and this is the minimized value.","solution":"def minimize_max_difference(n, glasses): Given the number of glasses and their respective volumes, this function returns the minimized maximum difference in volume between the smallest and largest glass each friend gets. glasses.sort() min_diff = float(\'inf\') for i in range(n - 1): min_diff = min(min_diff, glasses[i + 1] - glasses[i]) return min_diff"},{"question":"You are given a rectangular grid of size n x m filled with lowercase Latin letters. You need to find the largest rectangular sub-grid where every cell in the sub-grid is filled with the same character. Note that the sub-grid itself must also be a rectangular structure. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains a string of length m consisting of lowercase Latin letters. Print the area of the largest rectangular sub-grid with uniform characters. # Examples Input: 4 5 abbaa aabbb aabba aaaab Output: 6 Input: 3 3 aaa aaa aaa Output: 9","solution":"def largest_uniform_subgrid_area(n, m, grid): max_area = 0 for i in range(n): for j in range(m): current_char = grid[i][j] for k in range(i, n): for l in range(j, m): if all(grid[x][y] == current_char for x in range(i, k + 1) for y in range(j, l + 1)): max_area = max(max_area, (k - i + 1) * (l - j + 1)) return max_area"},{"question":"Alice loves geometry and is fascinated by triangles. One day, she came up with a unique challenge for herself: she wants to form the largest possible perimeter triangle using a set of given stick lengths. She has an array of integers where each integer represents the length of a stick. The challenge is to select three lengths from the array such that they can form a valid triangle with the maximum perimeter. A triangle is valid if and only if the sum of any two sides is greater than the third side. Can you help Alice find the maximum perimeter of a triangle that can be formed with the given stick lengths? If no valid triangle can be formed, return -1. # Input - The first line contains an integer `n` (3 ≤ n ≤ 10^5) — the number of sticks. - The second line contains `n` space-separated positive integers `l1, l2, ..., ln` (1 ≤ li ≤ 10^9) — the lengths of the sticks. # Output - Print the maximum perimeter of a valid triangle that can be formed with the given stick lengths. If no valid triangle can be formed, print -1. # Examples Example 1 Input: ``` 5 2 1 2 4 5 ``` Output: ``` 11 ``` Explanation: - The combination of lengths 4, 5, and 2 forms a valid triangle with a perimeter of 4 + 5 + 2 = 11. - No other combination of lengths can form a triangle with a larger perimeter. Example 2 Input: ``` 3 1 2 10 ``` Output: ``` -1 ``` Explanation: - No combination of the given lengths can satisfy the triangle inequality theorem; therefore, no valid triangle can be formed. Example 3 Input: ``` 6 10 15 20 5 25 30 ``` Output: ``` 75 ``` Explanation: - The combination of lengths 25, 25, and 30 forms a valid triangle with a perimeter of 25 + 25 + 30 = 75. - No other combination of lengths can form a triangle with a larger perimeter.","solution":"def max_perimeter_triangle(n, lengths): Given an integer n and an array of integers lengths, returns the maximum perimeter of a valid triangle that can be formed with the stick lengths. If no valid triangle can be formed, returns -1. # Sort the lengths in descending order lengths.sort(reverse=True) # Iterate through the lengths and find the maximum perimeter for i in range(n - 2): if lengths[i] < lengths[i + 1] + lengths[i + 2]: return lengths[i] + lengths[i + 1] + lengths[i + 2] # If no valid triangle is found return -1"},{"question":"Given an array of integers, determine if the array can be divided into two parts such that the sum of elements in both parts is equal. The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The next line contains n integers ai (1 ≤ ai ≤ 1000) — the elements of the array. Print \\"YES\\" if the array can be divided into two parts with equal sum, otherwise print \\"NO\\".","solution":"def can_partition_array(arr): Determines if the array can be divided into two parts with equal sum. :param arr: List of integers :return: \\"YES\\" if it can be partitioned into two parts with equal sum, otherwise \\"NO\\" total_sum = sum(arr) # If the total sum is odd, it cannot be split into two equal parts if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(arr) # Use dynamic programming to find if a subset with the target sum exists dp = [False] * (target + 1) dp[0] = True # There\'s always a subset (empty set) that adds up to 0 for num in arr: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"You are given a binary string s of length n. We define a \\"01-segment\\" to be any substring of contiguous characters that starts with a \'0\' and ends with a \'1\'. Your task is to find the length of the longest \\"01-segment\\" in the given binary string. If no such segment exists, the length should be considered as 0. # Input - The first line contains a single integer t (1 le t le 10^4) — the number of test cases. - The following t lines each contain a binary string s of length n (1 le n le 2 cdot 10^5). # Output For each test case, output a single integer — the length of the longest \\"01-segment\\". If there is no such segment, output 0. # Example Input ``` 3 001001 11111 010101 ``` Output ``` 3 0 2 ``` # Explanation - In the first test case, the longest \\"01-segment\\" is \\"001\\". - In the second test case, there are no \\"01-segments\\", so the output is 0. - In the third test case, the longest \\"01-segment\\" is \\"01\\" which appears multiple times with length 2.","solution":"def longest_01_segment(s: str) -> int: Returns the length of the longest \\"01-segment\\" in the given binary string. max_length = 0 current_length = 0 in_segment = False for char in s: if char == \'0\': if not in_segment: in_segment = True current_length = 1 else: current_length += 1 elif char == \'1\' and in_segment: current_length += 1 max_length = max(max_length, current_length) in_segment = False else: in_segment = False return max_length def solve(t: int, test_cases: [str]) -> [int]: Processes each test case and returns the length of longest \\"01-segment\\" for each string. results = [] for s in test_cases: results.append(longest_01_segment(s)) return results"},{"question":"Ivan loves palindromes and introduced a new concept called \\"circular palindromes.\\" A circular palindrome is a string that can be read the same forwards and backwards even when wrapping around end to end. For example, \\"aabcc\\" is not a circular palindrome, but \\"aabcb\\" would be, because after wrapping around, it can be read both ways. Given a string of lowercase Latin letters, determine whether it is a circular palindrome or not. The input consists of a single line containing a string ( s ) ( ( 1 leq |s| leq 10^5 ) ), where ( |s| ) denotes the length of the string ( s ). Output \\"YES\\" (without the quotes) if the string is a circular palindrome, and \\"NO\\" (without the quotes) otherwise. For example: - Input: \\"abcba\\" - Output: \\"YES\\" - Input: \\"abcab\\" - Output: \\"NO\\"","solution":"def is_circular_palindrome(s): Determines if the given string is a circular palindrome. s_length = len(s) for i in range(s_length): # Rotate the string by i and check if it is a palindrome rotated_s = s[i:] + s[:i] if rotated_s == rotated_s[::-1]: return \\"YES\\" return \\"NO\\""},{"question":"John is designing an experiment with robots that roam in a 2D grid. The grid has N rows and M columns. Each cell can contain a building (represented by the character \'#\') or be empty (represented by the character \'.\'). Robots can move between adjacent cells that are not buildings, and two cells are considered adjacent if they share one side. Initially, each robot is at some starting cell, and you are given the unique coordinates of the starting position of each robot. You want to determine if all robots can reach each other\'s starting cells, meaning that there should be a path between any pair of starting cells that avoids buildings. Write a program to analyze the grid and starting positions to determine if the connectivity condition holds. # Input - The first line contains two integers N and M (1 le N, M le 1000) — the number of rows and columns of the grid. - The next N lines each contain M characters (either \'#\' or \'.\') — the description of the grid. - The following line contains an integer K (1 le K le 100) — the number of robots. - The next K lines contain two integers r_i and c_i (1 le r_i le N, 1 le c_i le M) — the starting coordinates of each robot. # Output Output \\"YES\\" if all robots can reach each other\'s starting positions. Otherwise, output \\"NO\\". # Example Input: ``` 5 5 ..#.. .#.#. ..#.. .#... ..#.. 3 1 1 3 3 5 5 ``` Output: ``` NO ``` Input: ``` 5 5 ..#.. .#.#. ..#.. .#... ..#.. 3 1 1 3 1 5 2 ``` Output: ``` YES ```","solution":"def can_all_robots_meet(n, m, grid, k, start_positions): from collections import deque def bfs(start_r, start_c): visited = [[False] * m for _ in range(n)] queue = deque([(start_r, start_c)]) visited[start_r][start_c] = True reachable = set() while queue: r, c = queue.popleft() reachable.add((r, c)) for dr, dc in [(-1,0), (1,0), (0,-1), (0,1)]: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc)) return reachable # Convert the grid and coordinates to 0-indexed grid = [list(row) for row in grid] start_positions = [(r-1, c-1) for r, c in start_positions] # Take the first robot\'s starting position as the source for BFS first_r, first_c = start_positions[0] reachable_from_first = bfs(first_r, first_c) # Check if all starting positions of the robots are in the reachable set for r, c in start_positions: if (r, c) not in reachable_from_first: return \\"NO\\" return \\"YES\\""},{"question":"You are given a binary tree with `n` nodes. Each node has a label (an integer) and each label is unique. The depth of a node in the binary tree is the number of edges from the root to the node. Write a program to find the maximum possible sum of labels of nodes at any single depth level in the binary tree. The first line contains an integer `n` (`1 ≤ n ≤ 10^5`) — the number of nodes in the tree. The second line contains `n` space-separated integers `label_1, label_2, ..., label_n` — the labels of the nodes in any arbitrary order. The next `n - 1` lines contains pairs of space-separated integers `u` and `v` (`1 ≤ u, v ≤ n`) representing an edge between nodes `u` and `v`. Print a single integer — the maximum possible sum of labels at any single depth level of the binary tree. # Example ``` Input: 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Output: 9 ``` In this example, the nodes at depth 2 are `4` and `5`, and their sum is `9`. This is the maximum sum at any level of the tree.","solution":"from collections import defaultdict, deque def max_sum_at_depth(n, labels, edges): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) depth_sum = defaultdict(int) visited = set() queue = deque([(1, 0)]) # Start from node 1 with depth 0 visited.add(1) while queue: node, depth = queue.popleft() depth_sum[depth] += labels[node-1] for neighbor in tree[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, depth+1)) return max(depth_sum.values())"},{"question":"In a galaxy far, far away, scientists have discovered a new form of energy called Zeta energy. This energy can only be harnessed from Zeta planets, and each Zeta planet has a specific amount of Zeta energy it can produce. The scientists have a list of Zeta planets and the respective Zeta energy each planet produces. The scientists intend to select a group of planets such that the total amount of Zeta energy produced by this group is exactly equal to a given target value. However, they want to ensure that the number of planets selected is minimized. You are given an integer array `planets`, where `planets[i]` represents the Zeta energy produced by the ith planet, and an integer `target` representing the exact amount of Zeta energy the scientists need to harness. Write a program to find the minimum number of planets the scientists need to select to achieve exactly `target` Zeta energy. If it is not possible to achieve the target energy, return `-1`. # Input - The first line contains an integer `T` (1 ≤ T ≤ 100) — the number of test cases. - For each test case, the first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of planets. - The second line contains `n` integers `planets[i]` (1 ≤ planets[i] ≤ 1000) — the Zeta energy produced by the ith planet. - The third line contains an integer `target` (1 ≤ target ≤ 1000) — the target Zeta energy. # Output For each test case, print a single line containing the minimum number of planets needed to produce the exact `target` Zeta energy. If it is not possible, print `-1`. # Example Input ``` 3 5 2 3 7 4 8 11 4 1 5 9 12 15 3 5 5 5 10 ``` Output ``` 2 3 2 ``` # Explanation - In the first test case, the minimum number of planets needed to obtain exactly 11 Zeta energy are planets with energies 3 and 8. - In the second test case, the minimum number of planets needed to obtain exactly 15 Zeta energy are planets with energies 5, 9, and 1. - In the third test case, the minimum number of planets needed to obtain exactly 10 Zeta energy are planets with energies 5 and 5.","solution":"def min_planets_for_target_energy(planets, target): Function to determine the minimum number of planets needed to achieve exactly the target Zeta energy. Returns -1 if it is not possible. from collections import defaultdict import sys n = len(planets) dp = [sys.maxsize] * (target + 1) dp[0] = 0 for energy in planets: for j in range(target, energy - 1, -1): if dp[j - energy] != sys.maxsize: dp[j] = min(dp[j], dp[j - energy] + 1) return dp[target] if dp[target] != sys.maxsize else -1 def process_test_cases(T, test_cases): results = [] for i in range(T): n, planets, target = test_cases[i] results.append(min_planets_for_target_energy(planets, target)) return results"},{"question":"You are given an array of integers. In one operation, you can pick any two adjacent elements of the array and replace them with their sum. For example, if the array is [a, b, c], you can replace \'a\' and \'b\' with \'a + b\', making the array [a + b, c], or you can replace \'b\' and \'c\' with \'b + c\', making the array [a, b + c]. You need to determine the maximum and minimum result you can obtain by performing the described operation repeatedly until only one element remains in the array. The first line contains an integer n (2 ≤ n ≤ 2 * 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output two integers: the maximum and the minimum result obtainable after performing the operations until only one element remains. Input: ``` 5 1 2 3 4 5 ``` Output: ``` 15 15 ``` Explanation: In this example, since we are performing addition, the result will always be the same regardless of the order of operations. Thus, both the maximum and minimum results are 15.","solution":"def min_max_sum(arr): Returns the minimum and maximum sum of elements in the array after repeatedly replacing two adjacent elements with their sum until one element remains. total_sum = sum(arr) # Since we only perform addition, both the minimum and maximum result will be the same as total sum. return total_sum, total_sum"},{"question":"You are given an array of integers representing the elevation map where the width of each bar is 1. Write a program to compute how much water it can trap after raining. The input consists of a single line that contains n space-separated integers, where each integer represents the height of the elevation map at that point. The width of each bar is 1. For example, given n = 9 and height = [0,1,0,2,1,0,1,3,2,1,2,1], the program should output the total water trapped, which is 6. Note that the height of each bar is a non-negative integer. Constraints: - 1 <= n <= 10^5 - 0 <= height[i] <= 10^4 Input: - The first line contains one integer n (1 <= n <= 10^5) — the number of bars in the elevation map. - The second line contains n space-separated integers (0 <= height[i] <= 10^4). Output: - Print a single integer representing the total water trapped. Example: Input 12 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 Explanation: - At index 1, the water trapped is 0 units. - At index 2, the water trapped is 1 unit. - At index 4, the water trapped is 1 unit. - At index 5, the water trapped is 2 units. - At index 6, the water trapped is 1 unit. - At index 10, the water trapped is 1 unit. - Total water trapped = 1 + 1 + 2 + 1 + 1 = 6 units.","solution":"def trap_rain_water(heights): Given the elevation map (heights), returns the total amount of water trapped after raining. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the trapped water total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - heights[i] return total_water # Example input n = 12 heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] print(trap_rain_water(heights)) # Output should be 6"},{"question":"Given a weighted, undirected graph where each edge has a cost associated with it, your task is to find the shortest path from a starting node to a destination node. If multiple paths have the same shortest distance, find any one of those paths. # Input The input consists of: 1. An integer `n` (`2 ≤ n ≤ 1000`) - the number of nodes in the graph. 2. An integer `m` (`1 ≤ m ≤ 5000`) - the number of edges. 3. An integer `s` (`1 ≤ s ≤ n`) - the starting node. 4. An integer `d` (`1 ≤ d ≤ n`) - the destination node. 5. `m` lines, each containing three positive integers `u`, `v`, and `w` (`1 ≤ u, v ≤ n`, `1 ≤ w ≤ 10^6`), representing an edge between nodes `u` and `v` with weight `w`. It is guaranteed that there will be at least one path from `s` to `d`. # Output The output should be a single line containing a list of node indices that form the shortest path from the starting node `s` to the destination node `d`. If there are multiple shortest paths, you may output any one of them. # Example Input ``` 5 6 1 5 1 2 3 1 3 1 2 3 1 3 4 6 2 5 5 4 5 2 ``` Output ``` 1 3 2 5 ``` # Notes - You should use an appropriate algorithm like Dijkstra\'s Algorithm to find the shortest path efficiently. - Ensure the output path is valid and corresponds to the shortest distance from the starting node to the destination node.","solution":"import heapq def shortest_path(n, m, s, d, edges): # Construct the graph in adjacency list representation graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Initialize Dijkstra\'s algorithm distances = {i: float(\'inf\') for i in range(1, n+1)} previous_nodes = {i: None for i in range(1, n+1)} distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance previous_nodes[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) # Reconstruct the path from s to d path = [] current_node = d while previous_nodes[current_node] is not None: path.append(current_node) current_node = previous_nodes[current_node] path.append(s) path.reverse() return path"},{"question":"Zombie Apocalypse Survival In a distant future, mankind is facing a zombie apocalypse. A group of survivors has gathered in a city that consists of a grid of n x m blocks. Each block is either safe or contaminated by zombies. The group needs to figure out if it\'s possible to travel from the top-left block of the grid (1,1) to the bottom-right block of the grid (n,m) without stepping on any contaminated blocks. The group can only move up, down, left, or right. You are given the grid in the form of a binary matrix, where 0 represents a safe block and 1 represents a contaminated block. The survivors start at the top-left block (1,1) and want to reach the bottom-right block (n,m) while avoiding contaminated blocks. Write a program to determine if there is a path from the top-left block to the bottom-right block. # Input - The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) - the dimensions of the grid. - Each of the next n lines contains m integers (either 0 or 1), representing the grid. # Output Print \\"YES\\" if there is a way for the survivors to travel from the top-left to the bottom-right block avoiding contaminated blocks, otherwise print \\"NO\\". # Example Input 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 Output YES","solution":"def is_path_possible(n, m, grid): Determine if there is a path from the top-left block to the bottom-right block without stepping on contaminated blocks. if grid[0][0] == 1 or grid[n - 1][m - 1] == 1: return \\"NO\\" from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] visited[0][0] = True queue = deque([(0, 0)]) while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"Astrid is organizing a panoramic photo exhibition using panoramic camera films. Each film captures a very wide image by stitching together multiple narrower images side by side. She has a collection of n panoramic films, and each film consists of a sequence of distinct images represented by unique integers. The images within a film are always in a fixed sequence. Due to space constraints, she wants to display these films vertically in a single column in an art gallery. However, to maintain the aesthetic appeal, she needs to ensure that the sequence of images in any film is preserved throughout the display. In other words, if image a appears before image b in a particular film, then image a should appear before image b in the final arrangement as well. Help Astrid determine if it is possible to arrange all the images from the given films in a single sequence while maintaining the order of images in each film. The first line of input contains the number of panoramic films n (1 ≤ n ≤ 100). Each of the next n lines describes a panoramic film. The ith line starts with an integer mi (1 ≤ mi ≤ 100) indicating the number of images in the ith film, followed by mi distinct integers representing the sequence of images in the ith film (1 ≤ image ≤ 1000). Output \\"YES\\" if Astrid can arrange the images in a single sequence while preserving the order of images for each film. Otherwise, output \\"NO\\". **Example** Input: ``` 3 4 1 3 5 7 3 2 3 6 5 1 2 3 4 5 ``` Output: ``` YES ``` Input: ``` 2 3 1 2 3 3 3 1 2 ``` Output: ``` NO ``` In the first example, Astrid can arrange the images as 1, 2, 3, 5, 6, 7 while maintaining the order of sequences from each film. However, in the second example, the order of images in the two films conflicts with each other, and thus it\'s not possible to arrange them in a single sequence.","solution":"def can_arrange_images(films): from collections import defaultdict, deque # Graph and in-degrees dictionary graph = defaultdict(list) in_degrees = defaultdict(int) all_images = set() # Build the graph for film in films: for i in range(len(film) - 1): u, v = film[i], film[i + 1] graph[u].append(v) in_degrees[v] += 1 all_images.add(u) all_images.add(v) all_images.add(film[-1]) # Add the last image in the film # Initialize in-degrees for images that do not yet have entries for image in all_images: if image not in in_degrees: in_degrees[image] = 0 # Topological Sort Generation queue = deque([image for image in in_degrees if in_degrees[image] == 0]) sorted_order = [] while queue: node = queue.popleft() sorted_order.append(node) for neighbor in graph[node]: in_degrees[neighbor] -= 1 if in_degrees[neighbor] == 0: queue.append(neighbor) # If sorted_order has all the images, it means we can arrange them in a single sequence if len(sorted_order) == len(all_images): return \\"YES\\" else: return \\"NO\\" # Example usage: films = [ [1, 3, 5, 7], [2, 3, 6], [1, 2, 3, 4, 5] ] print(can_arrange_images(films)) # Output: YES films = [ [1, 2, 3], [3, 1, 2] ] print(can_arrange_images(films)) # Output: NO"},{"question":"In Chef\'s village, there are n houses aligned in a straight line, numbered from 1 to n. Each house has a certain amount of apples. The village is divided into m segments such that each segment contains some contiguous houses. Chef wants to make sure that his village remains healthy by keeping track of the total number of apples in any given segment. There are two types of queries you need to handle: 1. **Update:** \\"U x y\\" - where x is the house number and y is the new number of apples in that house. 2. **Query:** \\"Q a b\\" - where a and b are the starting and ending house numbers of a segment. For each query of type \\"Q\\", output the total number of apples in the specified segment [a, b]. # Input 1. The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) separated by a space. 2. The second line contains n integers representing the initial number of apples in each house. 3. The following m lines each describe a query. Each query will be in one of the two following formats: - \\"U x y\\" (1 ≤ x ≤ n, 0 ≤ y ≤ 1,000,000,000) - \\"Q a b\\" (1 ≤ a ≤ b ≤ n) # Output Output For each query of type \\"Q\\", output the total number of apples in the specified segment. # Example Input ``` 5 4 1 2 3 4 5 Q 1 3 U 2 10 Q 1 3 Q 2 5 ``` Output ``` 6 14 22 ```","solution":"class AppleTracker: def __init__(self, n, apples): self.n = n self.apples = apples self.segment_tree = [0] * (4 * n) self.build(0, 0, n-1) def build(self, node, start, end): if start == end: self.segment_tree[node] = self.apples[start] else: mid = (start + end) // 2 left_node = 2 * node + 1 right_node = 2 * node + 2 self.build(left_node, start, mid) self.build(right_node, mid + 1, end) self.segment_tree[node] = self.segment_tree[left_node] + self.segment_tree[right_node] def update(self, idx, value, node, start, end): if start == end: self.apples[idx] = value self.segment_tree[node] = value else: mid = (start + end) // 2 left_node = 2 * node + 1 right_node = 2 * node + 2 if start <= idx <= mid: self.update(idx, value, left_node, start, mid) else: self.update(idx, value, right_node, mid + 1, end) self.segment_tree[node] = self.segment_tree[left_node] + self.segment_tree[right_node] def query(self, L, R, node, start, end): if start > R or end < L: return 0 if start >= L and end <= R: return self.segment_tree[node] mid = (start + end) // 2 left_node = 2 * node + 1 right_node = 2 * node + 2 left_sum = self.query(L, R, left_node, start, mid) right_sum = self.query(L, R, right_node, mid + 1, end) return left_sum + right_sum def handle_queries(n, m, apples, queries): tracker = AppleTracker(n, apples) results = [] for q in queries: q_type = q[0] if q_type == \'U\': x, y = int(q[1]) - 1, int(q[2]) tracker.update(x, y, 0, 0, n-1) elif q_type == \'Q\': a, b = int(q[1]) - 1, int(q[2]) - 1 result = tracker.query(a, b, 0, 0, n-1) results.append(result) return results"},{"question":"Emma has a collection of N fancy lights. Each light i (1 ≤ i ≤ N) can glow either red or blue. Due to a recent spell malfunction, some of the lights are dimmer than others. She wants to arrange the lights in a sequence such that no two adjacent lights have the same color. Moreover, Emma also wants to minimize the total dimness of the lights in the sequence. Each light i has a dimness value di for red and a different dimness value bi for blue. Help Emma find the sequence that satisfies the condition and also results in the minimum total dimness. Input: - The first line contains the integer N (1 ≤ N ≤ 1000). - The next N lines each contain two integers di and bi (0 ≤ di, bi ≤ 1000): the dimness of light i when it glows red and when it glows blue, respectively. Output: - Print the minimum total dimness of the sequence. Example: Input: ``` 4 1 2 2 3 3 1 4 3 ``` Output: ``` 7 ```","solution":"def min_total_dimness(N, dimness): # Initialize dp arrays to store minimum dimness if ending with Red or Blue dp_red = [0] * N dp_blue = [0] * N # Base cases dp_red[0] = dimness[0][0] dp_blue[0] = dimness[0][1] # Fill the dp arrays for i in range(1, N): dp_red[i] = min(dp_red[i-1] + dimness[i][0], dp_blue[i-1] + dimness[i][0]) dp_blue[i] = min(dp_red[i-1] + dimness[i][1], dp_blue[i-1] + dimness[i][1]) # The result is the minimum of the two values at the last light return min(dp_red[N-1], dp_blue[N-1])"},{"question":"You are given a string containing only lowercase alphabets. You should make a series of moves to convert this string into a palindrome. In one move, you can either: - Choose any character in the string and change it to any other lowercase letter. Your goal is to convert the string into a palindrome with the least number of moves. A palindrome is a string that reads the same backward as forward. The first line contains an integer t (1 leq t leq 10^3) — the number of test cases. Each of the next t lines contains a string s (1 leq text{length of } s leq 10^4). For each test case, output one integer — the minimum number of moves required to convert the string into a palindrome.","solution":"def min_moves_to_palindrome(t, strings): results = [] for s in strings: n = len(s) moves = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: moves += 1 results.append(moves) return results"},{"question":"In a land full of magic and strategy, there is a kingdom divided into m regions. Each region has a certain number of fortresses, and every fortress in a region is connected to every other fortress in the same region by a series of bidirectional roads. However, these roads can be destroyed due to constant battles and invasions, which may lead to some fortresses being disconnected from others in the same region. Your task is to determine the minimum number of additional roads required to be built in each region so that all fortresses within each region can be connected again (i.e., make the graph of that region a single connected component). The first line contains a single integer m (1 ≤ m ≤ 200), the number of regions. For each region, the first line contains an integer f (2 ≤ f ≤ 1000), the number of fortresses in the region, and an integer r (0 ≤ r < f*(f-1)/2), the number of existing roads in the region. The following r lines each contain two integers u and v (1 ≤ u, v ≤ f), representing a road between fortresses u and v. Print m newline-separated integers, each representing the minimum number of additional roads needed for every region to form a single connected component. Example: Input: ``` 3 4 2 1 2 2 3 4 1 1 2 5 0 ``` Output: ``` 1 2 4 ``` In the first region, you can connect the remaining fortress 4 to any other fortress with just one road. In the second region, you need to connect the remaining fortresses into a connected component by adding two additional roads. In the third region, there are no existing roads, so you need to build the minimum number of roads to connect all 5 fortresses.","solution":"def minimum_additional_roads_needed(m, regions): def dfs(node, visited, graph): stack = [node] while stack: v = stack.pop() if v not in visited: visited.add(v) for neighbor in graph[v]: if neighbor not in visited: stack.append(neighbor) results = [] for f, r, roads in regions: graph = {i: [] for i in range(1, f + 1)} for u, v in roads: graph[u].append(v) graph[v].append(u) visited = set() components = 0 for i in range(1, f + 1): if i not in visited: components += 1 dfs(i, visited, graph) results.append(components - 1) return results"},{"question":"You are given a string that represents a numerical expression containing digits (0-9), addition signs (+), and multiplication signs (*). Your task is to evaluate this expression following the standard operator precedence: Multiplications are computed before additions. Write a function that takes the string as input and returns the result as an integer. The input string will contain only non-negative integers, addition signs (+), and multiplication signs (*). There will be no spaces in the string, and it is guaranteed that the given string will form a valid expression. The first line contains the expression string which is at most 100 characters long. Print a single integer — the result of evaluating the expression according to the standard operator precedence. # Example: ``` Input: 3+2*2 Output: 7 Input: 2+3*4+5 Output: 19 ``` # Explanation: For the first example, you need to compute the result of the expression `3+2*2`. Following the operator precedence rules, the multiplication is computed first: `2*2 = 4`, then the result is added to `3`, yielding `3+4 = 7`. For the second example, the input is `2+3*4+5`. The multiplications are computed first: `3*4 = 12`. Then, the additions are performed: `2+12+5 = 19`.","solution":"def evaluate_expression(expression): Evaluate a numerical expression following standard operator precedence. # First split the expression by the \'+\' operator addition_terms = expression.split(\'+\') total_sum = 0 for term in addition_terms: # Split each term by the \'*\' operator to handle multiplications first multiplication_terms = term.split(\'*\') # Convert terms to integers and compute the product product = 1 for num in multiplication_terms: product *= int(num) # Add the product to the total sum total_sum += product return total_sum"},{"question":"You are given a list of n integers and a sequence of m operations to perform on this list. Each operation can either update an element at a specific index to a new value or query the sum of elements within a given range. Your task is to handle these operations efficiently. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of elements in the list and the number of operations, respectively. The second line contains n space-separated integers a1, a2, ..., an — the initial values of the list. The next m lines describe the operations: - If the operation is an update, it is represented by \\"1 x y\\" (1 ≤ x ≤ n, -10^9 ≤ y ≤ 10^9), which means update the element at index x to the value y. - If the operation is a query, it is represented by \\"2 l r\\" (1 ≤ l ≤ r ≤ n), which means find the sum of elements from index l to index r inclusive. Output the result of each query operation on a new line. Example: ``` Input: 5 4 3 1 4 1 5 2 1 3 1 2 2 2 1 3 2 3 5 Output: 8 9 10 ``` In this example, the list starts as [3, 1, 4, 1, 5]. The first query asks for the sum of elements from index 1 to 3, which is 3 + 1 + 4 = 8. The update operation changes the second element to 2, making the list [3, 2, 4, 1, 5]. The next query sums the first three elements again, resulting in 3 + 2 + 4 = 9. The final query sums elements from index 3 to 5, which is 4 + 1 + 5 = 10.","solution":"def perform_operations(n, m, a, operations): result = [] for operation in operations: op = operation.split() if op[0] == \\"1\\": index = int(op[1]) - 1 value = int(op[2]) a[index] = value elif op[0] == \\"2\\": l = int(op[1]) - 1 r = int(op[2]) result.append(sum(a[l:r])) return result"},{"question":"Alice and Bob are playing a game with n cards, numbered from 1 to n, placed in a circle. Initially, the cards are arranged such that card i is followed by card (i % n) + 1. Alice starts at card 1 and Bob starts at card k. In each turn, Alice moves to the next card in the circle (i.e., to card (i % n) + 1) and so does Bob. Both move simultaneously and Alice always moves first. If they both land on the same card, Alice wins. If Bob completes a full circle (back to card k) without them meeting, Bob wins. Determine the winner of the game. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Each of the following t lines contains two integers n and k (2 leq n leq 10^6, 1 leq k < n) — the number of cards and Bob\'s starting card. For each test case, output \\"Alice\\" if Alice wins and \\"Bob\\" if Bob wins. In the first example, Alice and Bob start at different cards, and after 2 moves they both meet at card 2. In the second example, Alice and Bob will never meet, because Bob returns to his starting position without encountering Alice.","solution":"def determine_winner(t, test_cases): results = [] for n, k in test_cases: if n == 2 or k == n - 1: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"You are tasked with managing a series of tutoring sessions. There are n students, each requiring a certain number of sessions denoted by an array s of length n where s[i] is the number of sessions required by the i-th student. There are m available tutors, each of whom can conduct one session per day. Your goal is to determine the minimum number of days required to satisfy all students\' tutoring needs. Each day, a tutor can hold exactly one session, and each student can only attend one session per day. A day is considered utilized if at least one session is conducted. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 100), the number of students and the number of tutors, respectively. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 100), representing the number of sessions each student needs. Output: Output a single integer, the minimum number of days required to complete all the tutoring sessions. Example: Input: 4 3 1 2 3 4 Output: 4 Explanation: - On the first day, 3 tutors can handle 3 sessions for the students who need 1, 2, and 4 sessions respectively (remaining needs are [0,1,3]). - On the second day, 3 tutors can handle 3 sessions for the students who need more sessions (remaining needs are [0,0,2]). - On the third day, 3 tutors can handle 2 sessions for the remaining needs (remaining needs are [0,0,0]). - On the fourth day, 1 tutor can handle the last remaining session. - Therefore, the total number of days required is 4.","solution":"def min_days_to_complete_sessions(n, m, s): Calculates the minimum number of days required to complete all tutoring sessions. n: Number of students m: Number of tutors s: List of integers representing the number of sessions required by each student Return: The minimum number of days required # Calculate the total number of sessions required total_sessions = sum(s) # Calculate minimum number of days required days_needed = total_sessions // m if total_sessions % m != 0: days_needed += 1 return days_needed"},{"question":"Grumpy Cat loves to eat fish. There is a pond with `n` fish, where each fish has a weight of either `g` grams or `b` grams. Grumpy Cat can only catch `t` fish from the pond. You need to help Grumpy Cat maximize the total weight of the fish he catches. You are given multiple test cases. For each test case, you need to find the maximum possible weight of the `t` fish Grumpy Cat can catch under the given constraints. Note that Grumpy Cat cannot catch more fish than actually present in the pond. # Input - The first line contains an integer `q`, the number of test cases (`1 ≤ q ≤ 10^4`). - Each test case consists of four integers `n`, `g`, `b`, and `t`: - `n` is the number of fish in the pond (`1 ≤ n ≤ 10^9`). - `g` is the weight of a fish of type g (`1 ≤ g ≤ 100`). - `b` is the weight of a fish of type b (`1 ≤ b ≤ 100`). - `t` is the number of fish Grumpy Cat wants to catch (`1 ≤ t ≤ 10^9`). # Output For each test case, output a single integer — the maximum total weight of the fish Grumpy Cat can catch. # Example Input ``` 2 10 3 5 4 7 2 8 3 ``` Output ``` 20 24 ``` Explanation In the first test case: - The maximum total weight is found by catching 4 fish all weighing `5` grams each (since `5` is greater than `3`). In the second test case: - The maximum total weight is found by catching 3 fish all weighing `8` grams each (since `8` is greater than `2`).","solution":"def max_total_weight(q, test_cases): Calculates the maximum total weight of the fish Grumpy Cat can catch for given test cases. :param q: Number of test cases :param test_cases: List of tuples (n, g, b, t) for each test case :return: List of integers representing the maximum total weight for each test case results = [] for case in test_cases: n, g, b, t = case max_fish_to_catch = min(n, t) # Grumpy Cat can\'t catch more fish than there are in the pond, or more than he wants. max_weight = max(g, b) * max_fish_to_catch # Catch the heaviest available fish of the total possible fish he can catch. results.append(max_weight) return results"},{"question":"In a certain kingdom, there are n castles numbered from 1 to n. Each castle is connected to at most two other castles by roads. Each road has a length, and it takes time proportional to the road\'s length to travel it. The roads can be represented as edges of a tree, where each castle corresponds to a node. The queen wants to find out the shortest travel time between her favorite two castles, say castle u and castle v. You are provided with the number of castles, the roads connecting them (along with their lengths), and the identification numbers of the queen\'s favorite castles. Your task is to calculate the minimum travel time required to travel from castle u to castle v. The first line of the input contains an integer n (2 ≤ n ≤ 1000) — the number of castles. Each of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), describing a road of length w connecting castle u and castle v. The last line contains two integers u and v (1 ≤ u, v ≤ n) — the identification numbers of the queen\'s favorite castles. Print a single integer — the minimum travel time required to travel from castle u to castle v. Example: ``` Input: 5 1 2 3 1 3 1 2 4 4 2 5 2 4 5 Output: 6 ``` Explanation: The tree representation is: ``` 1 / 2 3 / 4 5 ``` The shortest path from castle 4 to castle 5 goes through castle 2 with a travel time of 4 + 2 = 6.","solution":"import sys import heapq from collections import defaultdict def dijkstra(graph, start, end): # Min-heap priority queue for Dijkstra\'s algorithm heap = [(0, start)] # Dictionary to store the shortest distance to each node distances = {i: float(\'inf\') for i in graph} distances[start] = 0 while heap: current_distance, current_node = heapq.heappop(heap) if current_distance > distances[current_node]: continue if current_node == end: return current_distance for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return distances[end] def shortest_travel_time(n, roads, u, v): graph = defaultdict(list) for road in roads: start, end, weight = road graph[start].append((end, weight)) graph[end].append((start, weight)) return dijkstra(graph, u, v)"},{"question":"Ali has a list of integers and wants to split it into two non-empty parts. The difference between the maximum element of the first part and the minimum element of the second part should be maximized. You are asked to find the maximum difference possible. The first line contains a single integer n (2 leq n leq 10^5) — the number of integers in the list. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the list. Output a single integer — the maximum difference between the maximum element of the first part and the minimum element of the second part. # Example Input ``` 5 1 5 9 2 5 ``` Output ``` 8 ``` Explanation If you split the array into [1, 5, 9] and [2, 5], the maximum element of the first part is 9 and the minimum element of the second part is 1. Therefore, the difference is 9 - 1 = 8, which is the maximum difference possible.","solution":"def max_difference(n, arr): Given an integer array `arr` of size `n`, split the array into two non-empty parts and compute the maximum difference between the maximum element of the first part and the minimum element of the second part. max_elem = max(arr) min_elem = min(arr) return max_elem - min_elem"},{"question":"Dave is a little boy who loves to play with numbers. One day, he started writing down a sequence of integers in a special way: he takes an initial integer s and appends digits one by one from 1 to m, forming a new integer each time. For example, if s = 4 and digits are appended in the sequence 1, 2, 3, ..., then the intermediate numbers become 41, 412, 4123, and so on. Now, Dave wants to determine how many unique integers he can form by using the digits from 1 to m exactly once in any order. However, since the numbers can get quite large, he is only interested in the final number modulo 1000000007. You are given the initial integer s and the value of m. Write a program that outputs the total number of unique integers modulo 1000000007 that can be formed by appending and reordering digits from 1 to m. The first line contains a single integer s (0 ≤ s ≤ 100). The second line contains a single integer m (1 ≤ m ≤ 9). Output a single integer — the total number of unique integers modulo 1000000007 that can be formed by appending and reordering digits from 1 to m. Example: Input: 4 3 Output: 24 Explanation: For s = 4 and m = 3, the unique integers formed by appending digits from 1, 2, 3 are: 41, 42, 43, 412, 421, 413, 431, 423, 432, 4123, 4132, 4213, 4231, 4312, 4321 Thus, the total unique integers modulo 1000000007 is 24.","solution":"import math def count_unique_integers(s, m): Returns the number of unique integers that can be formed by appending and reordering digits from 1 to m exactly once in any order, starting with integer s. The result is given modulo 1000000007. MOD = 1000000007 return math.factorial(m) % MOD"},{"question":"Maria loves playing with words and palindromes. She finds palindromes fascinating and wants to see how many palindromes can be created from a given list of words. She has n words and she wants to create as many distinct palindromes as possible by concatenating these words. A palindrome is a string that reads the same backward as forward. A particular word can be used multiple times to create different palindromes, but the same palindrome should not be counted more than once. Help Maria determine the maximum number of distinct palindromes she can create using the given words. The first line contains one integer n (1 ≤ n ≤ 100), the number of words. The next n lines each contain a word consisting of lowercase English letters. The length of each word will be no more than 100 characters. Output one integer - the maximum number of distinct palindromes that can be created using the given words. For example, given the words \\"noon\\", \\"civic\\", \\"level\\", \\"deified\\", \\"radar\\", \\"deed\\", \\"madam\\", and \\"rotor\\", she can create 8 distinct palindromes since all the words themselves are palindromes. If given the words \\"a\\", \\"b\\", \\"c\\", \\"aa\\", \\"bb\\", \\"cc\\", \\"abc\\", she can create the palindromes \\"a\\", \\"aa\\", \\"b\\", \\"bb\\", \\"c\\", and \\"cc\\". **Sample Input:** ``` 7 noon civic level deified radar deed madam ``` **Sample Output:** ``` 7 ``` **Sample Input:** ``` 7 a b c aa bb cc abc ``` **Sample Output:** ``` 6 ```","solution":"def count_distinct_palindromes(words): Returns the maximum number of distinct palindromes that can be created from the given list of words. distinct_palindromes = set() for word in words: if word == word[::-1]: # Check if the word is a palindrome distinct_palindromes.add(word) return len(distinct_palindromes)"},{"question":"In a mysterious town, there exists a peculiar type of garden known as the \\"Symmetrical Garden.\\" This garden is characterized by two distinct flowers placed symmetrically along both axes of a grid. You are standing at the coordinates (0,0) and are given the coordinates of one of the flowers in the symmetrical pair. Your task is to find the coordinates of the other flower. A point (x, y) in this grid system is symmetrical to (a, b) if: 1. (x = -a, y = b) or 2. (x = a, y = -b) or 3. (x = -a, y = -b) Given the coordinates of one flower, find the coordinates of the other flower such that the pair (x, y) and its symmetrical pair (a, b) are distinct. The coordinates are within the range of -100 to 100. Input: The input consists of a single line with two integers x and y (-100 ≤ x, y ≤ 100), the coordinates of one of the flowers. Output: Output the coordinates of the two possible symmetrical pairs that meet the above conditions (there are always exactly two possible solutions). If there are multiple solutions, ensure to list both of them. Example: Input: 3 4 Output: -3 4 3 -4 Note: In this example: For the flower (3, 4), the possible symmetrical pairs are: (-3, 4) which is symmetrical along the Y-axis. (3, -4) which is symmetrical along the X-axis.","solution":"def find_symmetrical_pairs(x, y): Given the coordinates of one flower (x, y), find the coordinates of the two possible symmetrical pairs. return [(-x, y), (x, -y)]"},{"question":"Anna is trying to color a graph in her math class. The graph is represented as an undirected tree with `n` nodes. Each node should be colored either red or blue such that no two adjacent nodes share the same color, which is a typical bipartite graph requirement. Anna loves symmetry, so she wants to know the number of possible distinct colorings of the graph when relative coloring (i.e., swapping all red colors with blue and vice versa) is considered the same. Your task is to help Anna by counting the number of distinct ways to color the nodes of the given tree. # Input - The first line contains an integer `n` (`1 ≤ n ≤ 100,000`) — the number of nodes in the tree. - Each of the next `n-1` lines contains two integers `u` and `v` (`1 ≤ u, v ≤ n`) — the endpoints of an edge in the tree. # Output - Return a single integer representing the number of distinct colorings of the tree. # Example **Input** ``` 3 1 2 2 3 ``` **Output** ``` 2 ``` **Explanation:** There are 2 ways to color the tree: 1. Color node 1 blue, node 2 red, node 3 blue. 2. Color node 1 red, node 2 blue, node 3 red. Swapping colors does not produce a new distinct coloring. Hence, the result is 2.","solution":"def count_distinct_colorings(n, edges): from collections import defaultdict, deque # Create adjacency list for the tree graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Perform BFS to color the tree (bipartite graph) color = [-1] * (n + 1) queue = deque([1]) color[1] = 0 # start coloring node 1 with color 0 (red) while queue: node = queue.popleft() current_color = color[node] for neighbor in graph[node]: if color[neighbor] == -1: # if the neighbor node hasn\'t been colored yet color[neighbor] = 1 - current_color # color it with opposite color queue.append(neighbor) elif color[neighbor] == current_color: raise ValueError(\\"The input graph is not a tree (it should be bipartite)\\") # Since every tree is a bipartite graph, we can guarantee two colorings are possible return 2"},{"question":"Xander is trying to traverse a grid to collect as many coins as possible. The grid is represented as an m times n matrix where each element of the matrix represents the number of coins at that cell. Xander starts at the top-left corner of the matrix, and he can only move either to the right or down at each step. He wants to collect the maximum number of coins by the time he reaches the bottom-right corner of the matrix. Write a function `max_coins(matrix)` that takes a 2D list `matrix` representing the grid and returns the maximum number of coins Xander can collect. # Input - The first line contains two integers m and n (1 le m, n le 1000) — the number of rows and columns of the grid. - Each of the next m lines contains n integers, representing the number of coins at each cell in the grid (0 le text{coins} le 100). # Output - Print a single integer, the maximum number of coins Xander can collect. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 12 ``` # Explanation In the given example, the optimal path to collect the maximum number of coins (`1 -> 3 -> 5 -> 1 -> 2 -> 1`) would result in a total of 12 coins. Note: You can assume that the input grid will always have at least one cell, i.e., m ge 1 and n ge 1.","solution":"def max_coins(matrix): if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = matrix[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + matrix[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + matrix[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[m-1][n-1]"},{"question":"In a rectangular city, the main roads form a grid with m rows and n columns of blocks. Each block is a rectangle composed of an integral number of unit squares. Each unit square can either have a pleasant scent or no scent at all, represented by a binary matrix where 1 indicates a pleasant scent and 0 indicates no scent. You are given the binary matrix of size m x n representing the blocks\' unit squares. The task is to find the size of the largest square sub-matrix that contains only 1s. The first line of the input contains two integers m and n (1 ≤ m, n ≤ 1000) - the dimensions of the city grid. The next m lines each contain n characters: either \'1\' or \'0\', representing the scents in the unit squares of each block. Output a single integer - the size of the largest square sub-matrix that contains only \'1\'s. Sample Input: ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Sample Output: ``` 2 ``` Explanation: ``` The largest square sub-matrix with all \'1\'s is of size 2x2. ```","solution":"def largest_square_submatrix(matrix, m, n): if not matrix: return 0 dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if matrix[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side def parse_input(input_str): lines = input_str.strip().split(\'n\') m, n = map(int, lines[0].split()) matrix = [line.split() for line in lines[1:]] return matrix, m, n # Example usage: input_str = 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 matrix, m, n = parse_input(input_str) print(largest_square_submatrix(matrix, m, n))"},{"question":"Aiden is organizing a sports event where there are multiple races, each race having a different number of participants. Each participant is represented by their speed. Aiden wants to find out how many participants are potential winners in each race based on a special condition: a participant is called a potential winner if their speed is higher than the average speed of the race. The first line contains a single integer t — the number of test cases (1 le t le 10). The t tests follow. The first line of each test contains an integer n (1 le n le 10^5) — the number of participants in the race. The following line contains n integers s_1, s_2, dots, s_n (1 le s_i le 10^9) — the speeds of the participants. For each test case, output the number of participants whose speed is greater than the average speed of their race. Example: Input: 2 5 10 20 30 40 50 4 60 70 80 90 Output: 2 2 Explanation: In the first test case, the average speed is (10 + 20 + 30 + 40 + 50) / 5 = 30. There are two participants with a speed higher than 30 (with speeds 40 and 50). In the second test case, the average speed is (60 + 70 + 80 + 90) / 4 = 75. There are two participants with a speed higher than 75 (with speeds 80 and 90).","solution":"def count_potential_winners(test_cases): results = [] for participants in test_cases: n = participants[0] speeds = participants[1] average_speed = sum(speeds) / n potential_winners = sum(1 for speed in speeds if speed > average_speed) results.append(potential_winners) return results"},{"question":"Bob and Alice are playing a game with two arrays of integers, A and B. Each array has a length of n, and initially, both players have zero score. They move alternately, starting with Bob. During a turn, a player must choose a pair of the same index (i.e., A[i] and B[i]) and either add A[i] to their score or add B[i] to their opponent\'s score. Each pair can only be chosen once. Alice and Bob play optimally to maximize their own score. If both players end up with the same score, Bob wins. Your task is to determine if Bob can ensure a win or a tie, assuming both play optimally. The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the arrays. The second line contains n space-separated integers A1, A2, ..., An (1 ≤ Ai ≤ 1000). The third line contains n space-separated integers B1, B2, ..., Bn (1 ≤ Bi ≤ 1000). Output \\"Bob\\" if Bob can ensure a win or a tie, and \\"Alice\\" otherwise. # Example Input: 3 1 3 2 2 1 4 # Example Output: Bob # Explanation: In the first move, Bob can select the pair (1, 2) and either add 1 to his score or add 2 to Alice\'s score. In such optimal play, the sequence of moves would favor Bob ending up ensuring at least a tie scenario.","solution":"def determine_winner(n, A, B): Determines if Bob can ensure a win or a tie in the game. :param n: int - length of arrays A and B :param A: list of int - array A :param B: list of int - array B :return: str - \\"Bob\\" if Bob can ensure a win or a tie, \\"Alice\\" otherwise pairs = list(zip(A, B)) # Sort pairs by the sum of elements in descending order pairs.sort(key=lambda x: x[0] + x[1], reverse=True) bob_score, alice_score = 0, 0 # Bob starts and they take turns for i in range(n): if i % 2 == 0: # Bob\'s turn bob_score += pairs[i][0] else: # Alice\'s turn alice_score += pairs[i][1] if bob_score >= alice_score: return \\"Bob\\" else: return \\"Alice\\""},{"question":"In a distant galaxy, there are n planets connected by m bidirectional space routes. Each route has a certain distance associated with it. A spaceship needs to travel from planet A to planet B with the minimum possible distance. Due to the scarcity of fuel, the spaceship can travel at most k space routes from the initial planet A to reach the final planet B. Your task is to compute the shortest distance that the spaceship can achieve traveling from planet A to planet B using at most k routes. If it\'s not possible to reach planet B from planet A within k routes, output -1. Input: The first line contains four integers n, m, k, A, and B (1 ≤ n ≤ 1,000, 1 ≤ m ≤ 10,000, 1 ≤ k ≤ n-1, 1 ≤ A, B ≤ n) — the number of planets, the number of routes, the maximum number of routes the spaceship can travel, and the starting and ending planets respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1,000) — indicating there is a bidirectional route between planet u and planet v with a distance of w. Output: Print a single integer — the minimum distance required to travel from planet A to planet B using at most k routes, or -1 if it\'s not possible. Example: Input: 5 6 3 1 5 1 2 10 1 3 20 2 4 10 3 4 10 4 5 5 3 5 60 Output: 25 Explanation: The spaceship can travel from planet 1 to planet 2, then from planet 2 to planet 4, and finally from planet 4 to planet 5, with a total distance of 25 which is under the limit of 3 routes.","solution":"import heapq import sys from collections import defaultdict, deque def shortest_path_with_max_k_routes(n, m, k, A, B, routes): Compute the shortest distance from planet A to planet B using at most k routes. Args: n (int): Number of planets. m (int): Number of routes. k (int): Maximum number of routes. A (int): Starting planet. B (int): Ending planet. routes (list of tuples): List of routes (u, v, w). Returns: int: The shortest distance or -1 if not possible. # Create the adjacency list for the graph graph = defaultdict(list) for u, v, w in routes: graph[u].append((v, w)) graph[v].append((u, w)) # Min-heap to store (current_distance, current_node, routes_taken) heap = [(0, A, 0)] visited = defaultdict(lambda: float(\'inf\')) while heap: curr_dist, node, routes_taken = heapq.heappop(heap) if routes_taken > k: continue if node == B: return curr_dist if visited[(node, routes_taken)] < curr_dist: continue visited[(node, routes_taken)] = curr_dist for neighbor, weight in graph[node]: new_dist = curr_dist + weight heapq.heappush(heap, (new_dist, neighbor, routes_taken + 1)) return -1"},{"question":"Jafar is a professional jewelry designer and has a collection of N diamonds that he wants to use to design a necklace. Each diamond has a certain beauty value. However, to create a beautiful necklace, Jafar wants to ensure that each selected diamond\'s beauty value is unique and maximized. Jafar can select any contiguous subarray of diamonds to create the necklace, but he must maximize the sum of the beauty values of the diamonds in the selected subarray while ensuring all selected diamonds have unique beauty values. The first line of input contains an integer N (1 ≤ N ≤ 100,000), the number of diamonds. The second line contains N integers representing the beauty values of the diamonds. Each beauty value is an integer between 1 and 1,000,000. Output a single integer, the maximum sum of the beauty values of the diamonds in the selected subarray with all unique beauty values. Example Input: ``` 6 4 2 4 5 6 2 ``` Example Output: ``` 17 ``` Explanation: The optimal contiguous subarray with unique beauty values is [4, 5, 6, 2], which has a sum of 4 + 5 + 6 + 2 = 17.","solution":"def max_beauty_sum(n, beauties): # Using sliding window and set to find the maximum sum of unique beauty values in a subarray unique_elements = set() max_sum = 0 current_sum = 0 left = 0 for right in range(n): while beauties[right] in unique_elements: unique_elements.remove(beauties[left]) current_sum -= beauties[left] left += 1 unique_elements.add(beauties[right]) current_sum += beauties[right] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Jake enjoys playing chess, and he wants to create new chessboards of different sizes. However, he noticed that certain sizes of chessboards allow him to rearrange the pieces in multiple ways to achieve symmetry. Jake defines a symmetric arrangement as one where the board looks identical after rotating by 180 degrees. Given an n x n chessboard, Jake wants to know how many symmetric arrangements of pieces there are. An empty cell or a cell with a piece can be any character on a chessboard. The input consists of: - An integer n (1 ≤ n ≤ 10^3), the size of the chessboard. Output the number of cells in the n x n chessboard that must be identical to its 180-degree rotated counterpart for the board to be symmetric. For example: - For n = 3, the output should be 5. - For n = 4, the output should be 8. Each cell should be specified by its coordinates (i, j). The cells for an n x n board should be calculated such that they match the respective symmetrical position after a 180-degree rotation. The output should be a single integer, representing the number of symmetric cells required for the entire board.","solution":"def num_symmetric_cells(n): Return the number of cells in an n x n chessboard that must be identical to its 180-degree rotated counterpart for the board to be symmetric. symmetric_cells = (n * n + 1) // 2 return symmetric_cells"},{"question":"You are tasked with distributing a total of k candies among n children sitting in a straight line such that the difference between the maximum number of candies any child gets and the minimum number of candies any child gets is minimized. The first line of input contains two integers, n and k (1 le n le 1000, 0 le k le 10^6). Print a single integer — the minimum possible difference between the maximum and minimum number of candies any child gets. **Example:** ``` Input: 3 7 Output: 1 Explanation: Distribute the candies as [2, 3, 2] or [3, 2, 2]. The maximum difference is 1. ``` ``` Input: 4 15 Output: 1 Explanation: Distribute the candies as [3, 4, 4, 4]. The maximum difference is 1. ```","solution":"def min_candy_difference(n, k): This function calculates the minimum possible difference between the maximum number of candies any child gets and the minimum number of candies any child gets. :param n: Number of children :param k: Total number of candies :return: The minimum difference between the max and min number of candies any child gets if n == 0: return 0 min_candies_per_child = k // n remaining_candies = k % n if remaining_candies == 0: return 0 else: return 1"},{"question":"You are given a matrix of size n x n, filled with integer values. Your task is to find the maximum sum of elements in any row or column. The first line contains one integer n (1 ≤ n ≤ 100), the size of the matrix. The next n lines contain n integers each, representing the elements of the matrix. Each element of the matrix is an integer between -1000 and 1000 inclusive. Print the maximum sum of elements in any single row or column of the matrix. For example, consider the following input: ``` 3 1 2 -1 -3 4 0 2 -1 5 ``` For the example above, the maximum sum of elements in any row or column is 6 (sum of the elements in the third column: -1 + 0 + 5).","solution":"def max_sum_in_matrix(matrix): Returns the maximum sum of elements in any row or column of the matrix. n = len(matrix) max_sum = float(\'-inf\') # Check row sums for row in matrix: row_sum = sum(row) if row_sum > max_sum: max_sum = row_sum # Check column sums for col in range(n): col_sum = sum(matrix[row][col] for row in range(n)) if col_sum > max_sum: max_sum = col_sum return max_sum"},{"question":"Alice has a special type of string consisting of lowercase alphabetic characters. She can perform two types of operations on the string: 1. Select any character and change it to any other lowercase alphabetic character. 2. Select any two adjacent characters and swap them. Alice wants to transform the string into a palindrome with the minimum number of operations. Help Alice determine the minimum number of operations needed to make the string a palindrome. The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains exactly n lowercase alphabetic characters — the string s. Output the minimum number of operations required to make the string a palindrome. If it\'s impossible to transform the string into a palindrome, print -1. In the first sample, Alice can select the first character \'a\' and change it to \'c\', resulting in \\"cbbbc,\\" which is a palindrome. In the second sample, it is not possible to transform the string \\"abcd\\" into a palindrome even with the given operations. Alice should output -1.","solution":"def min_operations_to_palindrome(n, s): Returns the minimum number of operations required to transform the given string into a palindrome. If it is impossible to transform the string into a palindrome, returns -1. changes_needed = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes_needed += 1 return changes_needed"},{"question":"The following question is designed to align with the style, complexity, and scope of the provided questions: You are given a sequence of N natural numbers (positive integers) and an integer M. Your task is to find two subsequences of the given sequence such that the sum of the first subsequence is as close to M as possible (but not greater than M) and the second subsequence contains the remaining elements of the original sequence. If there are multiple solutions with the same sum closer to M, return the lexicographically smallest subsequence. A subsequence is considered lexicographically smaller if at the first position where they differ, the subsequence has a smaller element. The first line of input contains two integers N and M (1 ≤ N ≤ 100, 1 ≤ M ≤ 10^9) - the number of elements in the sequence and the target sum. The second line contains N natural numbers a1, a2, ..., aN (1 ≤ ai ≤ 10^6), the elements of the sequence. If there is no solution, print \\"No solution\\". Otherwise, print the two subsequences in two separate lines. The elements of each subsequence should be printed in the order they appear in the original sequence, separated by spaces. Example: Input: 5 10 1 2 3 4 8 Output: 1 2 3 4 8 In this example, the sum of the first subsequence (1 2 3 4) is 10, which is equal to M. The remaining element forms the second subsequence containing 8.","solution":"def find_subsequences(n, m, sequence): from itertools import combinations closest_sum = float(\'-inf\') best_subseq = None # generate all possible subsequences for length in range(1, n + 1): for subseq in combinations(sequence, length): sub_sum = sum(subseq) if sub_sum <= m: if sub_sum > closest_sum: closest_sum = sub_sum best_subseq = list(subseq) elif sub_sum == closest_sum: best_subseq = min(best_subseq, list(subseq)) if best_subseq is None: return None remaining_elements = [x for x in sequence if x not in best_subseq] return best_subseq, remaining_elements # Wrapper function to properly format the output or indicate no solution. def solve(n, m, sequence): result = find_subsequences(n, m, sequence) if result is None: return \\"No solution\\" else: subseq1, subseq2 = result return \\" \\".join(map(str, subseq1)), \\" \\".join(map(str, subseq2))"},{"question":"You are given a series of online orders. Each order can be represented by a unique integer ID and the price at which the order was placed. You need to manage and process m modifications to the list of orders. Each modification can either delete an order or add a new order to the list. For each requested modification, output the total sum of the prices of all orders after the modification is applied. The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the initial number of orders and the number of modifications. The next n lines describe the initial orders. Each line contains two integers id_i and price_i (1 ≤ id_i ≤ 10^5, -10^9 ≤ price_i ≤ 10^9) — the ID and price of the order. The following m lines describe the modifications. Each modification is described by either: - \\"D x\\" meaning the order with ID x should be deleted - \\"A id y\\" meaning a new order with ID id and price y should be added It is guaranteed that: - No delete operation will attempt to delete a non-existent order. - No add operation will attempt to add an order with an ID that already exists. Output m integers, each being the total sum of prices of all orders after the corresponding modification is applied. Example Input: ``` 5 3 1 100 2 200 3 300 4 400 5 500 D 3 A 6 600 D 2 ``` Output: ``` 1200 1800 1600 ``` Explanation: Initially, the total sum of prices is 1500 (100+200+300+400+500). 1. The first modification deletes order 3. The total sum becomes 1200 (100+200+400+500). 2. The second modification adds a new order with ID 6 and price 600. The total sum becomes 1800 (100+200+400+500+600). 3. The third modification deletes order 2. The total sum becomes 1600 (100+400+500+600).","solution":"def process_orders(n, m, initial_orders, modifications): order_dict = {} total_sum = 0 # Add initial orders to the order_dict and calculate initial total sum for order_id, price in initial_orders: order_dict[order_id] = price total_sum += price results = [] for mod in modifications: mod_type = mod[0] if mod_type == \\"D\\": order_id = mod[1] total_sum -= order_dict[order_id] del order_dict[order_id] elif mod_type == \\"A\\": order_id, price = mod[1], mod[2] order_dict[order_id] = price total_sum += price results.append(total_sum) return results"},{"question":"You are given a sequence of integers a1, a2, ..., an. You can perform the following operation any number of times: select any integer from the sequence and remove it. Your goal is to minimize the number of operations needed to be performed so that the remaining sequence does not contain any two adjacent elements that are equal. The first line contains an integer n (1 ≤ n ≤ 10^5). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Print the minimum number of operations needed to be performed so that the remaining sequence does not contain any two adjacent elements that are equal. For example, if the input sequence is \\"1 2 2 3 3\\", you would either remove the second \\"2\\" or the first \\"3\\" to achieve \\"1 2 3 3\\" (or \\"1 2 2 3\\") with a total of 1 operation.","solution":"def minimize_operations_to_avoid_adjacent_duplicates(n, sequence): This function minimizes the number of operations needed to ensure that the remaining sequence does not contain any two adjacent elements that are equal. Parameters: n (int): Length of the sequence. sequence (list of int): The initial sequence of integers. Returns: int: Minimum number of operations needed. if n == 1: return 0 operations = 0 for i in range(1, n): if sequence[i] == sequence[i - 1]: operations += 1 return operations"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a weight associated with it. Your task is to find the Minimum Spanning Tree (MST) of the graph. A Minimum Spanning Tree is a subset of the edges which connects all vertices in the graph without any cycles and with the minimum possible total edge weight. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of nodes and the number of edges, respectively. - Each of the next m lines describes an edge using three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) — the endpoints of the edge and its weight. # Output - Print the total weight of the MST. If there are multiple MSTs with the same total weight, print the one with the smallest weight. # Example Input ``` 4 5 1 2 1 1 3 4 2 3 2 2 4 3 3 4 5 ``` Output ``` 6 ``` # Explanation The given graph has 4 nodes and 5 edges. The MST in this case would include the edges with weights 1, 2, and 3, thus the total weight is 6. The MST edges are {(1,2), (2,3), (2,4)} since they connect all nodes with the minimum total edge weight and without forming any cycles. # Note It\'s recommended to use Kruskal\'s or Prim\'s algorithm to solve this problem efficiently. Make sure to handle large inputs effectively within the given constraints.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(n, edges): edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 edge_count = 0 for edge in edges: u, v, w = edge root_u = find(parent, u-1) root_v = find(parent, v-1) if root_u != root_v: edge_count += 1 mst_weight += w union(parent, rank, root_u, root_v) if edge_count == n - 1: break return mst_weight"},{"question":"Goran is interested in buying some products online. However, due to shipping constraints, he can only buy products whose weights are divisible by a certain number k. Given a list of n products, each with a specific weight, help Goran determine the maximum number of products he can buy that meet this condition. The first line of input contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5) separated by a space, representing the number of products and the number k respectively. The second line contains n integers representing the weights of the products (1 ≤ weight ≤ 10^5). Output a single integer, the maximum number of products Goran can buy that have weights divisible by k. Example: Input: 5 3 4 9 6 8 15 Output: 2 Explanation: Among the weights {4, 9, 6, 8, 15}, the weights 9, 6, and 15 are divisible by 3. Therefore, the maximum number of products Goran can buy is 3.","solution":"def max_products_buyable(n, k, weights): Returns the maximum number of products Goran can buy that have weights divisible by k. Args: n (int): Number of products. k (int): The divisor. weights (list of int): List of weights of the products. Returns: int: The maximum number of products with weights divisible by k. count = 0 for weight in weights: if weight % k == 0: count += 1 return count"},{"question":"A web-based messaging system is being developed where users can send and receive messages. The system stores all the messages in a database with a timestamp indicating when the message was sent. Some users have requested a feature to retrieve all the messages exchanged between two specific users within a certain time period. The first line contains five integers n, m, u1, u2, and t (1 ≤ n, m, u1, u2 ≤ 10^3, 0 ≤ t ≤ 10^9) — the total number of users, the total number of messages, the ID of the first user, the ID of the second user, and the time period in seconds, respectively. The next m lines describe each message. Each message is represented by three integers: sender, receiver, and timestamp (1 ≤ sender, receiver ≤ n, 0 ≤ timestamp ≤ 10^9), meaning a message was sent from the sender to the receiver at the given timestamp. Print the number of messages exchanged between user u1 and user u2 during the time period t. If there are no such messages, print 0. In the first sample, user 1 sent message at time 5 and at 3. And user 2 received at time 2. So there are three such messages. In the second sample, user 1 and user 2 did not exchange any message. In the third sample, all messages are within the given period. So 6 messages are exchanged. Input: ``` 4 6 1 2 10 1 2 4 1 2 8 2 1 3 1 3 9 3 1 7 2 3 10 ``` Output: ``` 3 ```","solution":"def count_messages(n, m, u1, u2, t, messages): Returns the number of messages exchanged between user u1 and user u2 within the time period t. count = 0 for message in messages: sender, receiver, timestamp = message if ((sender == u1 and receiver == u2) or (sender == u2 and receiver == u1)) and timestamp <= t: count += 1 return count # Example usage n, m, u1, u2, t = 4, 6, 1, 2, 10 messages = [[1, 2, 4], [1, 2, 8], [2, 1, 3], [1, 3, 9], [3, 1, 7], [2, 3, 10]] print(count_messages(n, m, u1, u2, t, messages)) # should output 3"},{"question":"A company is planning to digitize their library and they need to scan books. Each book is represented by a string of lowercase letters. To ensure accuracy in the database, the company implements a verification step that counts the number of anagrams each book title can form. Your task is to determine the number of distinct anagrams a given book title can form. The first line contains an integer n (1 leq n leq 10^5), the number of book titles. Each of the following n lines contains a string s_i (1 leq |s_i| leq 100), representing a book title. Print n lines, where the i-th line contains a single integer — the number of distinct anagrams of the i-th book title. **Example** Input: ``` 2 aabb abc ``` Output: ``` 6 6 ``` When the book title \\"aabb\\" is given, there are 6 distinct anagrams possible: \\"abab\\", \\"baba\\", \\"aabb\\", \\"bbaa\\", \\"abba\\", and \\"baab\\". When the book title \\"abc\\" is given, there are also 6 distinct anagrams possible: \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\".","solution":"import math from collections import Counter def count_anagrams(book_titles): results = [] for title in book_titles: freq = Counter(title) denominator = 1 for count in freq.values(): denominator *= math.factorial(count) total_anagrams = math.factorial(len(title)) // denominator results.append(total_anagrams) return results def number_of_anagrams(n, book_titles): return count_anagrams(book_titles)"},{"question":"A famous data scientist is exploring techniques to manipulate genetic sequences. Genetic sequences are composed of characters \'A\', \'C\', \'G\', and \'T\' representing different nucleotides. Given a string representing a genetic sequence and a specific nucleotide count requirement, you need to determine the length of the smallest contiguous substring that contains at least the required number of each nucleotide \'A\', \'C\', \'G\', and \'T\'. The first line contains a single integer t (1 le t le 100), the number of test cases. Each of the next 2 times t lines contains: - The first line of each test case contains a string s (1 le |s| le 10^5) — the genetic sequence. - The second line of each test case contains a string of four integers a c g t (0 le a, c, g, t le 10^5) — the required counts of \'A\', \'C\', \'G\', and \'T\', respectively. Output one integer per test case — the length of the smallest substring that contains at least the required count of each nucleotide. If no such substring exists, output -1. # Example: ``` Input: 3 ACGTACGTA 1 1 1 1 AAGTCG 2 1 1 1 CGTAG 1 2 1 1 Output: 4 5 -1 ``` # Explanation: In the first case, the smallest substring that contains at least 1 of each nucleotide \'A\', \'C\', \'G\', and \'T\' is \\"ACGT\\", which has length 4. In the second case, the entire string \\"AAGTCG\\" must be considered, as it is the smallest substring that meets the criteria and has length 6. In the third case, no substring can contain at least 2 \'C\'s along with the other required nucleotides, so the output is -1.","solution":"def smallest_substring_with_nucleotides(s, required_counts): n = len(s) min_length = float(\'inf\') required_a, required_c, required_g, required_t = map(int, required_counts.split()) if required_a == 0 and required_c == 0 and required_g == 0 and required_t == 0: return 0 count_a = count_c = count_g = count_t = 0 l = 0 for r in range(n): if s[r] == \'A\': count_a += 1 elif s[r] == \'C\': count_c += 1 elif s[r] == \'G\': count_g += 1 elif s[r] == \'T\': count_t += 1 while (count_a >= required_a and count_c >= required_c and count_g >= required_g and count_t >= required_t): min_length = min(min_length, r - l + 1) if s[l] == \'A\': count_a -= 1 elif s[l] == \'C\': count_c -= 1 elif s[l] == \'G\': count_g -= 1 elif s[l] == \'T\': count_t -= 1 l += 1 return min_length if min_length != float(\'inf\') else -1 def process_test_cases(t, test_cases): results = [] for i in range(t): s = test_cases[2 * i].strip() required_counts = test_cases[2 * i + 1].strip() result = smallest_substring_with_nucleotides(s, required_counts) results.append(result) return results"},{"question":"In an ancient kingdom, there is a tradition that every citizen must perform a unique morning routine. The routine consists of entering a magical cave and touching a set of mystical stones in a specific sequence. The cave contains n unique stones arranged in a row, each stone denoted by an integer from 1 to n. A citizen\'s routine is represented by an ordered array of integers where each integer corresponds to a stone index that needs to be touched. The High Priest discovered that once a citizen touches the k-th stone in their list, they lose interest and will not touch any subsequent stones. This means the citizen will only follow the first k stones in their routine. The new king wants to verify if a specific citizen\'s routine is valid under these conditions. The routine is considered valid if: 1. The routine consists of unique stone indices. 2. The length of the routine does not exceed the number of stones in the cave. 3. The routine does not cause the citizen to touch any stone more than once. You are required to write a program that checks the validity of the routine. If the routine is valid, print \\"VALID\\". Otherwise, print \\"INVALID\\". # Input The first line contains an integer n (1 ≤ n ≤ 10⁵) – the number of stones in the cave. The second line contains an integer k (1 ≤ k ≤ n) – the number of stones the citizen is interested in touching. The third line contains k space-separated integers a₁, a₂, ..., aₖ (1 ≤ aᵢ ≤ n) – the sequence of stone indices the citizen plans to touch. # Output Print a single line \\"VALID\\" if the routine meets the conditions, otherwise print \\"INVALID\\". # Example Input ``` 5 4 1 3 2 4 ``` Output ``` VALID ``` Input ``` 5 6 1 2 3 4 5 6 ``` Output ``` INVALID ``` Input ``` 5 3 1 1 2 ``` Output ``` INVALID ``` # Note In the first example, the routine [1, 3, 2, 4] is valid since it contains unique indices and the length does not exceed the number of stones. In the second example, the routine [1, 2, 3, 4, 5, 6] is invalid since k exceeds n. In the third example, the routine [1, 1, 2] is invalid because stone 1 is repeated.","solution":"def validate_routine(n, k, routine): This function checks if a citizen\'s morning routine is valid. Parameters: n (int): The number of stones in the cave. k (int): The number of stones the citizen is interested in touching. routine (list of int): The sequence of stone indices the citizen plans to touch. Returns: str: \'VALID\' if the routine is valid, \'INVALID\' otherwise. # Check if the length of the routine exceeds the number of stones in the cave if k > n: return \\"INVALID\\" # Check if the routine contains unique indices if len(set(routine)) != len(routine): return \\"INVALID\\" # Check if all indices in the routine are within the valid range for stone in routine: if not 1 <= stone <= n: return \\"INVALID\\" return \\"VALID\\""},{"question":"In a distant galaxy, there is a highly advanced civilization that uses a unique system for encrypting their secret messages. Each message is represented as a string of lowercase English letters. To decode a message, one must find the length of the maximum subsequence that forms a palindrome when read from left to right or right to left. Given a string `s`, return the length of the longest palindromic subsequence. A subsequence is a sequence that can be derived from the given string by deleting some or no characters without changing the order of the remaining characters. # Input The input consists of a single string `s` of length `1 ≤ |s| ≤ 1000`. The string contains only lowercase English letters. # Output The output should be a single integer representing the length of the longest palindromic subsequence. # Example Example 1 **Input**: ``` bbbab ``` **Output**: ``` 4 ``` **Explanation**: One possible longest palindromic subsequence is \\"bbbb\\". Example 2 **Input**: ``` cbbd ``` **Output**: ``` 2 ``` **Explanation**: One possible longest palindromic subsequence is \\"bb\\". # Note - In the first example, the longest palindromic subsequence is \\"bbbb\\", giving a length of 4. - In the second example, the longest palindromic subsequence is \\"bb\\", giving a length of 2.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the string s. n = len(s) # dp[i][j] will be storing the length of LPS from s[i] to s[j] dp = [[0]*n for _ in range(n)] for i in range(n-1, -1, -1): dp[i][i] = 1 # Each character is a palindrome of length 1 for j in range(i+1, n): if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1]"},{"question":"Masha loves playing games involving strings. She recently came across a puzzle that involves figuring out the number of distinct substrings of a given string. Intrigued by the challenge, she decided to write a program to help her solve the problem and asked for your help. A substring is defined as any sequence of consecutive characters within a string. For example, the string \\"abc\\" has the following substrings: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Given a string s, your task is to calculate the number of distinct substrings it contains. The first and only line of input contains a string s of length n (1 ≤ n ≤ 1000). The string s consists of lowercase English letters only. Output a single integer, the number of distinct substrings in the string s. Example: Input: ababa Output: 9 In the given sample, the distinct substrings are: \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"abab\\", \\"baba\\", and \\"ababa\\". Thus, the output is 9.","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings in the string s. n = len(s) substrings = set() # Generate all possible substrings and add them to a set to ensure uniqueness for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"You are a thorough investigator working on a digital forensics case. You have been given a list of log entries representing user actions on a secure system. Each log entry consists of a timestamp and an action type. Your task is to determine the maximum number of concurrent actions taking place at any given time. Each action in the log entry can either be a \\"login\\" or a \\"logout\\". A \\"login\\" action indicates that a user has started an action, and a \\"logout\\" action indicates the completion of an action. The format of each log entry is: `timestamp action_type`, where `timestamp` is a positive integer representing the time the action took place, and `action_type` is either \\"login\\" or \\"logout\\". The log entries are provided in chronological order. You need to write a function that takes in the number of log entries and the list of log entries, and returns the maximum number of concurrent actions observed. Function signature: ```python def max_concurrent_actions(n: int, logs: List[Tuple[int, str]]) -> int: ``` # Input - An integer `n` (1 ≤ n ≤ 100,000) representing the number of log entries. - A list of `n` tuples, where each tuple consists of: - An integer `timestamp` (1 ≤ timestamp ≤ 10^9). - A string `action_type` which is either \\"login\\" or \\"logout\\". # Output - An integer representing the maximum number of concurrent actions. # Example ```python n = 6 logs = [(1, \\"login\\"), (2, \\"login\\"), (5, \\"logout\\"), (6, \\"login\\"), (7, \\"logout\\"), (8, \\"logout\\")] print(max_concurrent_actions(n, logs)) # Output: 2 ``` # Explanation At time `1`, the first \\"login\\" occurs, so the number of concurrent actions is 1. At time `2`, another \\"login\\" occurs, so the number of concurrent actions increases to 2. At time `5`, the first \\"logout\\" occurs, reducing the number of concurrent actions to 1. The concurrent actions are at their peak (2) between time `2` and `5`. Your task is to write the function that processes the logs and determines the maximum number of concurrent actions at any time.","solution":"from typing import List, Tuple def max_concurrent_actions(n: int, logs: List[Tuple[int, str]]) -> int: current_actions = 0 max_concurrent = 0 for timestamp, action_type in logs: if action_type == \\"login\\": current_actions += 1 elif action_type == \\"logout\\": current_actions -= 1 max_concurrent = max(max_concurrent, current_actions) return max_concurrent"},{"question":"Alice and Bob are playing a game involving an array of integers. Initially, Alice selects an integer k (1 ≤ k ≤ n) from the array and subtracts any positive integer from it. After Alice\'s move, Bob will select any remaining integer (different from the one selected by Alice) and subtract the same value from it. Bob must choose an integer such that after subtracting the value chosen by Alice, it is still a positive integer. The game continues in turns until one of the players cannot make a valid move. You are asked to determine whether Alice can always ensure that she will make a move, regardless of how Bob plays. The first line of input contains an integer t (1 le t le 50), the number of test cases. Each test case consists of two lines: - The first line contains an integer n (2 le n le 200), the number of integers in the array. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^6), representing the array. For each test case, print \\"YES\\" if Alice can always ensure she will make a move regardless of Bob\'s moves, or \\"NO\\" otherwise. # Example Input: ``` 2 3 10 5 7 4 4 4 4 4 ``` Output: ``` YES NO ``` # Explanation - In the first test case, Alice can always leave at least one integer for Bob that remains positive after subtracting her chosen value. - In the second test case, all integers are the same, and Alice cannot ensure a move regardless of Bob\'s choice.","solution":"def can_alice_always_move(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] array = sorted(test_cases[i][1]) valid = any(array[j] - array[j - 1] > 0 for j in range(1, n)) if valid: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice is building a game where players move through a grid of size `n x n` by making a series of moves up, down, left, or right. The goal for the player is to collect the maximum number of coins placed on the grid. Each cell in the grid may have a certain number of coins or be empty. The player starts at the top-left corner of the grid (cell [1, 1]) and can move in any of the four directions as long as they do not move outside the boundaries of the grid. Given the size of the grid `n` and the number of coins in each cell, determine the maximum number of coins that the player can collect if they must minimize the number of moves taken to any cell that has the maximum coins in it. The first line contains an integer `n` (1 ≤ n ≤ 1000) — the size of the grid. The next `n` lines contain `n` integers each. The `j`-th integer in the `i`-th line represents the number of coins `c_{ij}` (0 ≤ c_{ij} ≤ 10^6) in the cell at the i-th row and j-th column. Output a single integer — the maximum number of coins that can be collected. # Example Input: ``` 3 1 0 7 2 8 3 4 5 6 ``` Output: ``` 8 ``` Explanation: - Alice starts at cell [1, 1] with 1 coin. - Moves from cell [1, 1] → [2, 2] and collects 8 coins. Thus, the maximum number of coins collected is 8, and the minimum number of moves taken to reach it is 2. Since the problem only asks for the maximum coins collected, the output is 8.","solution":"def max_coins(n, grid): Returns the maximum number of coins that can be collected in the grid. max_coins_collected = 0 for i in range(n): for j in range(n): max_coins_collected = max(max_coins_collected, grid[i][j]) return max_coins_collected"},{"question":"To cater to the provided guidelines and match the existing set\'s style, complexity, and scope, here is a new question aligned with the specified parameters. --- You are given an array of integers representing the daily stock prices of a company. Your task is to determine the maximum profit you can achieve by buying one day and selling at any later day. If no profit can be made, return 0. The first line of input contains an integer n (1 le n le 10^5), representing the number of days. The second line contains n space-separated integers p_1, p_2, ..., p_n (1 le p_i le 10^9), representing the stock prices on the i-th day. Print a single integer, the maximum profit that can be achieved. If no profit is possible, print 0. Example 1: ``` Input: 6 7 1 5 3 6 4 Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. ``` Example 2: ``` Input: 5 7 6 4 3 1 Output: 0 Explanation: In this case, no transactions are done and the max profit = 0. ``` Note: You are allowed to buy and sell only once.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from the given stock prices. If no profit can be made, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given a grid of size m x n containing integers. You need to find the sub-grid with the maximum sum. A sub-grid is any rectangular region within the grid. The size of the grid is moderate (1 ≤ m, n ≤ 1000), and the values of the integers range between -10000 and 10000. Implement a function to determine the sum of the sub-grid with the maximum sum. Input: - The first line contains two integers m and n, indicating the number of rows and columns of the grid respectively. - The next m lines contain n integers each, representing the grid. Output: - Print a single integer, the maximum sum of any sub-grid in the given grid. Example: Input: 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 Output: 29 Explanation: The sub-grid with the maximum sum is: 3 8 10 -4 -1 1 which adds up to 29.","solution":"def max_sum_subgrid(grid): def kadane(arr): max_sum = float(\'-inf\') current_sum = 0 for value in arr: current_sum = max(value, current_sum + value) if current_sum > max_sum: max_sum = current_sum return max_sum if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) max_sum = float(\'-inf\') for left in range(n): temp = [0] * m for right in range(left, n): for i in range(m): temp[i] += grid[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"Alice loves palindromes! She recently came across an interesting problem. Alice has a string and she wants to change it into a palindrome by adding the minimum number of characters. Your task is to help Alice find the length of the shortest palindrome that can be formed by adding characters to the end of her string. A palindrome is a string that reads the same forwards and backwards. For example, \\"radar\\" and \\"level\\" are palindromes. The first line contains a single integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 1000) consisting only of lowercase English letters. For each test case, output a single integer — the length of the shortest possible palindrome that can be formed by adding characters to the end of the given string. **Example:** Input: ``` 3 abcd aba aabb ``` Output: ``` 7 3 5 ``` **Explanation:** 1. For \\"abcd\\", the shortest palindrome that can be formed is \\"abcdcba\\", which has a length of 7. 2. For \\"aba\\", it is already a palindrome, so no characters need to be added, the length is 3. 3. For \\"aabb\\", the shortest palindrome that can be formed is \\"aabbaa\\", which has a length of 5.","solution":"def shortest_palindrome_length(s): This function returns the length of the shortest palindrome that can be formed by adding characters to the end of the given string `s`. def is_palindrome(s): return s == s[::-1] n = len(s) for i in range(n): if is_palindrome(s[i:]): return n + i return 2 * n def batch_shortest_palindrome_length(t, test_cases): results = [] for s in test_cases: results.append(shortest_palindrome_length(s)) return results"},{"question":"You are given a string s of length n consisting of lowercase English letters. You are also given an integer k, and you need to transform the string into an another string t of the same length. The transformation should maximize the lexicographical order of the string t, and each letter in the string s can be used at most once in string t. Additionally, the operations are limited to at most k operations where each operation consists of swapping any two characters in the string s. The first line of input contains two integers n and k (1 le n le 10^5; 0 le k le 10^5). The second line contains the string s of length n consisting of lowercase English letters. Output the resulting string t after performing the transformation to maximize its lexicographical order, with at most k swaps allowed. # Example **Input:** ``` 5 1 abcde ``` **Output:** ``` ebcda ``` **Explanation:** With only one swap allowed, the best way to maximize the lexicographical order is to swap \'a\' and \'e\', resulting in the string \\"ebcda\\".","solution":"def maximize_lexicographical_order(n, k, s): s = list(s) for i in range(n): if k == 0: break max_char = s[i] max_idx = i for j in range(i + 1, n): if s[j] > max_char: max_char = s[j] max_idx = j if max_idx != i: s[i], s[max_idx] = s[max_idx], s[i] k -= 1 return \\"\\".join(s)"},{"question":"You are a participant in a treasure hunt organized in a city represented as a grid of size n times n. The city contains some checkpoints and one starting point. At each checkpoint, you earn a certain number of points, but you must decide the order in which to visit them to maximize your total points. However, you can only move to adjacent cells (either horizontally or vertically) and you cannot move to a cell more than once. Given the coordinates of the starting point and the checkpoints with their respective points, determine the maximum points you can collect if you start at the starting point and visit the checkpoints. The first line contains two integers n (2 leq n leq 10) — the size of the grid, and m (1 leq m leq 10) — the number of checkpoints. The second line contains two integers x and y (1 leq x, y leq n) — the starting point coordinates. Each of the next m lines contains three integers a_i, b_i (1 leq a_i, b_i leq n) and p_i (1 leq p_i leq 100), representing the coordinates of the checkpoint and the points you earn for visiting it. Output the maximum number of points you can collect. # Example Input ``` 4 3 1 1 2 2 10 3 3 20 4 4 30 ``` # Example Output ``` 60 ``` Explanation: Starting at (1,1), visit (2,2), then (3,3), and finally (4,4) for a total of 60 points.","solution":"from itertools import permutations def max_points(n, m, start, checkpoints): def manhattan_distance(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) max_points_collected = 0 for perm in permutations(checkpoints): points_collected = 0 current_position = start for checkpoint in perm: points_collected += checkpoint[2] current_position = (checkpoint[0], checkpoint[1]) max_points_collected = max(max_points_collected, points_collected) return max_points_collected # Example usage: n, m = 4, 3 start = (1, 1) checkpoints = [(2, 2, 10), (3, 3, 20), (4, 4, 30)] print(max_points(n, m, start, checkpoints)) # Output should be 60"},{"question":"Traditionally, a binary tree is a rooted tree with nodes connected by edges, where each node can have up to two children. A perfect binary tree is a type of binary tree in which every internal node has exactly two children, and all leaf nodes are at the same level. Anderson has built a perfect binary tree of height h. The height of a tree is defined by the number of edges on the longest path from the root to a leaf. In Anderson\'s tree, each node is assigned a unique integer value from 1 to 2^(h+1) - 1, inclusive. Given a perfect binary tree of height h, you need to calculate the sum of values of all nodes at a particular level `k`. Note that levels are 0-indexed, so the root node is at level 0, its children are at level 1, and so on. The input consists of a single line containing two integers h and k (0 ≤ k ≤ h ≤ 20), where h is the height of the tree, and k is the level you\'re interested in. The output should be a single integer representing the sum of values of all nodes at level k. For example, for a perfect binary tree of height 2 (k = 2): ``` 1 / 2 3 / / 4 5 6 7 ``` The sum of values at level 2 is 4 + 5 + 6 + 7 = 22. Print the sum of values of all nodes at level k. Example input: ``` 2 2 ``` Example output: ``` 22 ```","solution":"def sum_of_level_in_perfect_binary_tree(h, k): Returns the sum of values of all nodes at level k in a perfect binary tree of height h. :param h: height of the binary tree, which is an integer :param k: level at which the sums of node values are to be calculated, which is an integer :return: sum of node values at the k-th level # Number of nodes at level k num_nodes = 2 ** k # First node value at level k first_value = 2 ** k # Last node value at level k last_value = first_value + num_nodes - 1 # Sum of arithmetic series from first_value to last_value level_sum = (first_value + last_value) * num_nodes // 2 return level_sum # Example usage h = 2 k = 2 print(sum_of_level_in_perfect_binary_tree(h, k)) # Output: 22"},{"question":"In a digital library, there are n books arranged on a shelf. Each book has a unique identifier from 1 to n. The library allows users to borrow some consecutive books from the shelf, but there is a restriction: the total number of pages in the books borrowed must be divisible by a given integer k. You are given an array of integers pages where pages[i] represents the number of pages in the i-th book. Your task is to find any consecutive subarray of books such that the sum of the pages in the subarray is divisible by k. If there are multiple valid subarrays, you can print any of them. If no such subarray exists, print \\"No Solution\\". The first line of the input contains two integers, n and k (1 le n, k le 10^5) — the number of books on the shelf and the divisor. The second line contains n integers pages_1, pages_2, dots, pages_n (1 le pages[i] le 10^4), representing the number of pages in each book. If a solution exists, print \\"Yes\\" in the first line. In the second line, print two integers l and r (1 le l le r le n) which represent the starting and ending indices of the consecutive subarray of books. If there are multiple answers, print any of them. Indices are 1-based. If there is no solution, print \\"No Solution\\".","solution":"def find_subarray(n, k, pages): Finds any consecutive subarray of books such that the sum of the pages in the subarray is divisible by k. Parameters: n (int): Number of books on the shelf. k (int): The divisor. pages (list of int): List with the number of pages in each book. Returns: tuple: A tuple with a string \\"Yes\\" and two indices (1-based) if solution exists, otherwise a string \\"No Solution\\". remainder_map = {0: -1} current_sum = 0 # Iterate through the books and check for valid subarray for i in range(n): current_sum += pages[i] remainder = current_sum % k if remainder in remainder_map: start_index = remainder_map[remainder] + 1 end_index = i + 1 # 1-based indexing return \\"Yes\\", start_index + 1, end_index remainder_map[remainder] = i return \\"No Solution\\" # Example usage: # n = 5, k = 5 # pages = [1, 2, 3, 4, 5] # find_subarray(n, k, pages) should return (\\"Yes\\", 1, 3) or similar valid range"},{"question":"Polycarpus loves playing with arrays and binary operations. One day, he came up with a new game with his friend Semyon. They have an array of integers and a number k. They take turns choosing a subarray, and the player who makes the subarray elements bitwise AND equal to k wins. The game goes as follows: - Initially, Polycarpus chooses a subarray. - If the bitwise AND of all the elements in the subarray equals k, Polycarpus wins. - Otherwise, Semyon can pick a different subarray. - If Semyon finds a subarray whose bitwise AND equals k, Semyon wins. - If neither finds such a subarray, the game is a draw. Given an array of integers and a number k, determine whether Polycarpus, Semyon, or neither can win. The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9), where n is the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the elements of the array. Print \\"POLYCARP\\" if Polycarpus can win by selecting any subarray with bitwise AND k on his first move. Print \\"SEMYON\\" if Semyon can win after Polycarpus fails to find such a subarray. Print \\"DRAW\\" if neither of them can find such a subarray. For example: Input: 4 2 5 3 2 4 Output: POLYCARP In this example, one of Polycarpus\'s possible subarrays would be [2], which has a bitwise AND equal to k. Hence, Polycarpus wins.","solution":"def determine_winner(n, k, arr): Determines the winner of the subarray bitwise AND game. Parameters: n (int): Number of elements in the array. k (int): The target bitwise AND value. arr (list of int): The array of integers. Returns: str: \'POLYCARP\' if Polycarpus wins, \'SEMYON\' if Semyon wins, \'DRAW\' if neither wins. # Check if there is any single element that is equal to k if k in arr: return \\"POLYCARP\\" # Create a set to store candidate pairs whose AND might equal to k candidates = set(arr) # Check pairs for i in arr: for j in candidates: if (i & j) == k: return \\"SEMYON\\" return \\"DRAW\\""},{"question":"Alice enjoys finding patterns in sequences of numbers. One day, she came across a special type of sequence known as an arithmetic progression (AP). An arithmetic progression is a sequence of numbers in which the difference between any two consecutive terms is constant. For instance, [3, 7, 11, 15] is an AP with a common difference of 4. Alice invents her own problem revolving around APs and decides to call it the Maximum Subsequence AP (MSAP) problem. The task is to find the length of the longest subsequence of a given sequence that forms an arithmetic progression. A subsequence is derived from the sequence by deleting some or none of the elements without changing the order of the remaining elements. Your task is to help Alice solve the MSAP problem. The first line of the input contains a single integer n (2 ≤ n ≤ 1000) — the length of the sequence. The next line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the sequence. Output a single integer — the length of the longest subsequence that is an arithmetic progression. **Example:** Input: ``` 6 9 4 7 2 10 3 ``` Output: ``` 3 ``` In this example, the longest subsequence that forms an arithmetic progression is [4, 7, 10] with a common difference of 3.","solution":"def longest_arithmetic_subsequence_length(arr): Returns the length of the longest subsequence that forms an arithmetic progression. from collections import defaultdict if not arr: return 0 n = len(arr) longest = 0 # A dictionary to store the length of the longest AP that ends at index i with difference d. dp = [defaultdict(int) for _ in range(n)] for i in range(n): for j in range(i): diff = arr[i] - arr[j] dp[i][diff] = dp[j][diff] + 1 longest = max(longest, dp[i][diff]) return longest + 1 # plus one to include the initial element # Example usage print(longest_arithmetic_subsequence_length([9, 4, 7, 2, 10, 3])) # Output: 3"},{"question":"A birthday party is being organized for a child who loves puzzles. To add a fun challenge, there will be a treasure hunt where kids need to solve a series of math-based clues to find their next hint. Each clue is represented as a pair of integers (a, b) and the challenge is to determine how many numbers divisible by 6 exist between them. Write a program that calculates the number of integers divisible by 6 between given pairs of numbers inclusive. The first line of input contains a single integer t (1 ≤ t ≤ 1000), which is the number of pairs of integers. Each of the next t lines contains two integers a and b (1 ≤ a ≤ b ≤ 10^9) — the pairs of integers. Output t lines where each line contains one integer, the number of integers divisible by 6 within the given range for each pair. For example: If the input is ``` 3 1 10 15 30 10 61 ``` The output should be ``` 1 3 9 ``` Explanation: 1. Between 1 and 10, only 6 is divisible by 6. 2. Between 15 and 30, 18, 24, and 30 are divisible by 6. 3. Between 10 and 61, 12, 18, 24, 30, 36, 42, 48, 54, and 60 are divisible by 6.","solution":"def count_divisibles_by_six(a, b): Returns the count of numbers divisible by 6 between a and b inclusive. def count_up_to(n): return n // 6 return count_up_to(b) - count_up_to(a - 1) def treasure_hunt_divisibles(t, ranges): For each pair (a, b) in ranges, returns the number of integers divisible by 6 between a and b inclusive. results = [] for a, b in ranges: results.append(count_divisibles_by_six(a, b)) return results"},{"question":"You have been tasked with designing a robotic vacuum cleaner pathways manager. Your house has a hallway composed of interconnected rooms in a line. The robotic vacuum cleaner starts in the first room and needs to clean every room exactly once, then return to the starting room. However, each room has a distinct amount of dust, and the cleaner’s battery usage increases with the amount of dust it needs to clean in each room. You are given a list of integers representing the amount of dust in each room. Your task is to design an algorithm to calculate the minimum battery usage required for the robotic vacuum cleaner to clean all the rooms and return to the start. The battery usage is the sum of the dust in each room twice (once for cleaning and once for returning). For example, consider the following hallway with dust amounts [2, 4, 3]: - The cleaner will start in the first room with 2 units of dust, then move to the second room with 4 units of dust, and finally move to the third room with 3 units of dust. - It returns in the reverse order, cleaning each room again. The minimal battery usage required is the sum of all room dust amounts multiplied by 2 (for cleaning and returning). Your task: Write a function `minimum_battery_usage(n, dust)` that takes: - An integer `n` (1 ≤ n ≤ 1000) – the number of rooms. - A list of integers `dust` (1 ≤ dust[i] ≤ 1000) – the amount of dust in each room. The function should return the minimum battery usage required. Example: Input: ``` n = 3 dust = [2, 4, 3] ``` Output: ``` 18 ``` Explanation: The cleaner will go through the dust amounts [2, 4, 3] forward and then [3, 4, 2] in reverse, requiring a total battery usage of (2 + 4 + 3) * 2 = 18. **Note:** Ensure the solution is efficient and adheres to the constraints.","solution":"def minimum_battery_usage(n, dust): Calculates the minimum battery usage required for the robotic vacuum cleaner to clean all the rooms and return to the start. Args: n (int): The number of rooms. dust (list): A list of integers representing the amount of dust in each room. Returns: int: The minimum battery usage required. total_dust = sum(dust) return total_dust * 2"},{"question":"In an online multiplayer game, players gather resources from `n` regions distributed in a circular map. Each region has a different amount of resources, represented by an integer array `a` of size `n`, where `a[i]` corresponds to the resources in the `i-th` region (0-based index). Players can start from any region and collect resources by moving clockwise through the regions. They must stop collecting when they arrive back at the starting region. Given that each player can only collect once and must move in a clockwise direction, each region can only be visited once in a single collection round. Your task is to write a program to find and output the maximum resources a player can collect in a single continuous run. # Input: - The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of regions. - The second line contains `n` integers `a[0], a[1], ..., a[n-1]` (1 ≤ a[i] ≤ 10^6) — the resources available in each region. # Output: - Output the maximum resources a player can collect in a single continuous run. # Example: Input: ``` 5 2 3 1 5 4 ``` Output: ``` 15 ``` Explanation: The player can start from region 0 and collect resources as follows: 2 (region 0) + 3 (region 1) + 1 (region 2) + 5 (region 3) + 4 (region 4) = 15. This is the maximum resources collectible in a continuous run. In this problem, the challenge is to correctly handle the circular nature of the map while efficiently calculating the maximum sum of the resources.","solution":"def max_resources(n, a): This function returns the maximum resources a player can collect in a single continuous run on a circular map. Parameters: n (int): number of regions a (list of int): resources in each region Output: int: maximum resources collectable # Edge case, if there\'s just one region, that\'s the maximum sum if n == 1: return a[0] # Calculate total sum of array elements total_sum = sum(a) # To handle the circular nature, we consider the array two times consecutively a = a + a max_sum = float(\'-inf\') current_sum = 0 start = 0 # Slide window of size n across the extended array for i in range(2 * n): current_sum += a[i] if (i - start + 1) == n: max_sum = max(max_sum, current_sum) current_sum -= a[start] start += 1 return max_sum"},{"question":"You are given a list of intervals, where each interval is represented as a list containing two integers [start, end]. The intervals may overlap, and you need to merge all overlapping intervals into one. Write a function that merges overlapping intervals and returns a new list of non-overlapping intervals. The function signature is: ```python def merge_intervals(intervals: List[List[int]]) -> List[List[int]]: ``` The input parameters are: - `intervals`: a list of lists, where each inner list contains two integers `start` and `end`, representing an interval. Each `start` and `end` will be between 0 and 10^6 inclusive. The output should be: - A list of merged intervals, such that no two intervals overlap. Each interval in the result should be sorted by the starting value. # Example Input: ```python intervals = [[1, 3], [2, 6], [8, 10], [15, 18]] ``` Output: ```python [[1, 6], [8, 10], [15, 18]] ``` Input: ```python intervals = [[1, 4], [4, 5]] ``` Output: ```python [[1, 5]] ``` # Constraints - The number of intervals in the input list will be between 1 and 10^5. - Each interval\'s `start` and `end` will be between 0 and 10^6 inclusive. - The intervals given in the input can be out of order. The final output should return the merged intervals sorted by their start times.","solution":"from typing import List def merge_intervals(intervals: List[List[int]]) -> List[List[int]]: Merge overlapping intervals and return a new list of non-overlapping intervals. if not intervals: return intervals # Sort intervals by the starting value intervals.sort(key=lambda x: x[0]) merged_intervals = [] current_interval = intervals[0] for i in range(1, len(intervals)): interval = intervals[i] # If the current interval overlaps with the next interval, merge them if current_interval[1] >= interval[0]: current_interval[1] = max(current_interval[1], interval[1]) else: merged_intervals.append(current_interval) current_interval = interval merged_intervals.append(current_interval) return merged_intervals"},{"question":"You are tasked with designing a system to request customer feedback for an online retailer. The company wants to collect responses from customers who recently made a purchase and are asked to answer a series of questions and rate their shopping experience. Each customer provides their feedback on a scale of 1 to 5 for different aspects (e.g., product quality, delivery service) and writes optional comments. The feedback system needs to store the responses and compute summary statistics for analysis. # Problem Statement You are given a list of feedback submissions by customers. Each submission contains the customer ID, ratings for different aspects of their experience, and optional textual comments. The ratings are provided as integer values between 1 and 5. Each submission is a dictionary with the following format: ```python { \\"customer_id\\": 1234, \\"ratings\\": { \\"product_quality\\": 4, \\"delivery_service\\": 5, \\"customer_service\\": 3 }, \\"comments\\": \\"The product was as described, but the delivery was slow.\\" } ``` Your task is to implement a function `process_feedback(feedback_list)` that takes a list of feedback submissions and computes the average rating for each aspect. The average rating should be rounded to one decimal place. Additionally, provide a summary count of all feedback submissions that contain comments (i.e., the `comments` field is non-empty). # Input - `feedback_list`: A list of dictionaries, each representing a feedback submission. # Output - A dictionary with the average ratings for each aspect and the count of feedback submissions with comments. ```python { \\"average_ratings\\": { \\"product_quality\\": 3.8, \\"delivery_service\\": 4.2, \\"customer_service\\": 3.5 }, \\"comments_count\\": 15 } ``` # Example ```python feedback_list = [ { \\"customer_id\\": 1234, \\"ratings\\": { \\"product_quality\\": 4, \\"delivery_service\\": 5, \\"customer_service\\": 3 }, \\"comments\\": \\"The product was as described, but the delivery was slow.\\" }, { \\"customer_id\\": 5678, \\"ratings\\": { \\"product_quality\\": 3, \\"delivery_service\\": 4, \\"customer_service\\": 5 }, \\"comments\\": \\"\\" }, { \\"customer_id\\": 4321, \\"ratings\\": { \\"product_quality\\": 5, \\"delivery_service\\": 4, \\"customer_service\\": 2 }, \\"comments\\": \\"The support was very helpful but the product was damaged during delivery.\\" } ] print(process_feedback(feedback_list)) ``` # Expected Output: ```python { \\"average_ratings\\": { \\"product_quality\\": 4.0, \\"delivery_service\\": 4.3, \\"customer_service\\": 3.3 }, \\"comments_count\\": 2 } ``` # Constraints - You may assume that the input list `feedback_list` is non-empty. - The keys in the `ratings` dictionary are consistent across all feedback submissions. - There is at least one aspect rating in each submission.","solution":"def process_feedback(feedback_list): Processes a list of feedback submissions and computes average ratings and comments count. Parameters: feedback_list (list): A list of dictionaries, each representing a feedback submission. Returns: dict: A dictionary containing the average ratings and the count of feedback submissions with comments. total_ratings = {} count_ratings = {} comments_count = 0 for feedback in feedback_list: # Count the comments if present if feedback.get(\\"comments\\"): comments_count += 1 # Aggregate ratings for aspect, rating in feedback[\\"ratings\\"].items(): if aspect not in total_ratings: total_ratings[aspect] = 0 count_ratings[aspect] = 0 total_ratings[aspect] += rating count_ratings[aspect] += 1 # Calculate average ratings average_ratings = {aspect: round(total / count_ratings[aspect], 1) for aspect, total in total_ratings.items()} return { \\"average_ratings\\": average_ratings, \\"comments_count\\": comments_count }"},{"question":"Jonah is developing his own programming language and needs to implement a unique feature for variable storage. Each variable name can be transformed into another unique representation by permuting its characters. Jonah wants to leverage this feature to check if different variable names can produce the same transformed result through permutation. Given \'n\' variable names, each consisting of lowercase Latin letters, you are required to find how many unique transformed representations can be created by permuting the characters of these variable names. The first line contains a single integer \'n\' (1 leq n leq 10^5) — the number of variable names. The following \'n\' lines each contain a single variable name of length from 1 to 10^5. Output a single integer — the number of unique transformed representations. Example: Input: ``` 4 abc bca dac cad ``` Output: ``` 2 ``` Explanation: - The first three variable names \'abc\', \'bca\', and \'dac\' can each be transformed to a permutation of \'abc\' or \'dac\'. - Therefore, there are 2 unique transformed representations: \'abc\' and \'dac\'.","solution":"def count_unique_transformed_representations(n, variable_names): Returns the number of unique transformed representations of variable names by permuting their characters. Parameters: n (int): The number of variable names. variable_names (List[str]): List of variable names. Returns: int: Number of unique transformed representations. unique_representations = set() for name in variable_names: sorted_name = \'\'.join(sorted(name)) unique_representations.add(sorted_name) return len(unique_representations)"},{"question":"Given a positive integer n, define a sequence a(i) as follows: - a(1) = 1 - a(2) = 2 - a(i) = a(i-1) + a(i-2) for i > 2 Your task is to find the smallest index k such that a(k) is greater than or equal to a given integer n. The input consists of a single positive integer n (1 ≤ n ≤ 10^18). Print the smallest index k such that a(k) ≥ n. Example: Input: 10 Output: 6 Explanation: The sequence a(i) starts as 1, 2, 3, 5, 8, 13... The smallest index where the sequence value is at least 10 is 6 (since a(6) = 13).","solution":"def find_smallest_index(n): Finds the smallest index k such that a(k) is greater than or equal to n where a(i) is defined as: - a(1) = 1 - a(2) = 2 - a(i) = a(i-1) + a(i-2) for i > 2 if n == 1: return 1 if n == 2: return 2 a1, a2 = 1, 2 k = 2 while a2 < n: a1, a2 = a2, a1 + a2 k += 1 return k"},{"question":"Polycarpus loves arranging his collection of strings. You are given a string consisting of lowercase Latin letters and Polycarpus wants to reorder the characters in such a way that the string contains as few distinct characters as possible for the maximum possible number of positions. The reordering should follow these rules: 1. The reordered string should be a permutation of the input string. 2. The maximum possible number of successive positions should contain the same character. Determine and print any such reordered string. The input consists of a single line containing a string s (1 ≤ |s| ≤ 2 × 10^5) of lowercase Latin letters. The output should be a single line containing the reordered string. For example, given the input string \\"aabbcc\\", one possible output would be \\"ababcc\\" or \\"aabbcc\\". If there are multiple outputs, print any of them. # Example Input ``` aabbcc ``` Output ``` aabbcc ```","solution":"def rearrange_string(s: str) -> str: from collections import Counter import heapq # Count the frequency of each character freq = Counter(s) # Create a max heap based on the frequency of each character max_heap = [(-value, key) for key, value in freq.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) if prev_char: heapq.heappush(max_heap, (prev_freq, prev_char)) result.append(char) prev_char = char prev_freq = freq + 1 # Increase frequency since it\'s negative in heap (max-heap simulation) if prev_freq == 0: prev_char = None return \'\'.join(result)"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each edge has a weight associated with it. Your task is to find the minimum weight of a path that creates a cycle in the graph. If there is no cycle, return `-1`. A path creates a cycle if it starts and ends at the same node and includes at least one edge. Assume that the graph has no self-loops or multiple edges between any pair of nodes. # Input The first line of the input contains two integers, `n` (2 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 2000), the number of nodes and edges respectively. Each of the following `m` lines contains three integers `u`, `v` (1 ≤ u, v ≤ n, u ≠ v) and `w` (1 ≤ w ≤ 1000), denoting an edge between nodes `u` and `v` with weight `w`. # Output Output a single integer — the minimum weight of a path that creates a cycle, or `-1` if no cycle exists. # Example Input ``` 4 4 1 2 3 2 3 4 3 1 5 2 4 2 ``` Output ``` 12 ``` Input ``` 3 2 1 2 1 2 3 2 ``` Output ``` -1 ``` **Explanation:** - In the first example, the minimum weight cycle is: 1 → 2 → 3 → 1, with a total weight of 3 + 4 + 5 = 12. - In the second example, there is no possible cycle in the graph.","solution":"import heapq from collections import defaultdict, deque def min_cycle_weight(n, m, edges): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(start): dist = {node: float(\'inf\') for node in range(1, n + 1)} dist[start] = 0 q = deque([(start, -1)]) # (current_node, parent_node) while q: current, parent = q.popleft() for neighbor, weight in graph[current]: if dist[neighbor] > dist[current] + weight: dist[neighbor] = dist[current] + weight q.append((neighbor, current)) elif neighbor != parent: # Found a cycle return dist[current] + weight + dist[neighbor] return float(\'inf\') min_cycle = float(\'inf\') for node in range(1, n + 1): min_cycle = min(min_cycle, bfs(node)) return -1 if min_cycle == float(\'inf\') else min_cycle # Example usage: # n, m = 4, 4 # edges = [ # (1, 2, 3), # (2, 3, 4), # (3, 1, 5), # (2, 4, 2) # ] # print(min_cycle_weight(n, m, edges)) # Output: 12"},{"question":"You have been given a grid of dimensions `n x m`, consisting of empty cells and walls. Your task is to find out the minimum number of steps required to move from the starting cell to the destination cell if movement is allowed only horizontally and vertically, one step at a time. You are given `t` test cases. For each test case, the grid dimensions `n` and `m`, the starting cell, and the destination cell are provided along with the positions of walls in the grid. The input format is as follows: - The first line contains an integer `t` (1 ≤ t ≤ 10) — the number of test cases. - Each test case starts with a line containing two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. - The second line of each test case contains two integers `sx` and `sy` (1 ≤ sx ≤ n, 1 ≤ sy ≤ m) — the row and column of the starting cell. - The third line of each test case contains two integers `dx` and `dy` (1 ≤ dx ≤ n, 1 ≤ dy ≤ m) — the row and column of the destination cell. - The next line contains an integer `k` (0 ≤ k ≤ 1000) — the number of walls in the grid. - Each of the next `k` lines contains two integers `wx` and `wy` (1 ≤ wx ≤ n, 1 ≤ wy ≤ m) — the row and column of a wall cell. Output: For each test case, print a single line containing the minimum number of steps required to move from the starting cell to the destination cell. If it is not possible to reach the destination, print `-1`. # Constraints: - The grid contains only empty cells and walls. - You can only move to an adjacent empty cell (no diagonals allowed). # Example: Input: ``` 2 5 5 1 1 5 5 2 3 3 4 4 4 4 1 4 4 1 3 2 2 3 3 4 2 ``` Output: ``` 8 6 ``` Explanation: For the first test case, you can move from (1,1) to (5,5) by navigating around the walls at (3,3) and (4,4) in 8 steps. For the second test case, you can move from (1,4) to (4,1) while avoiding the walls at (2,2), (3,3), and (4,2) in 6 steps.","solution":"from collections import deque def min_steps_to_destination(t, test_cases): results = [] for i in range(t): n, m, sx, sy, dx, dy, k, walls = test_cases[i] # Initialize grid and mark walls grid = [[0] * m for _ in range(n)] for wx, wy in walls: grid[wx-1][wy-1] = 1 # mark wall with 1 # Check if start or destination is a wall if grid[sx-1][sy-1] == 1 or grid[dx-1][dy-1] == 1: results.append(-1) continue # Initialize BFS directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx-1, sy-1, 0)]) # (x, y, steps) visited = set() visited.add((sx-1, sy-1)) found = False while queue: x, y, steps = queue.popleft() if (x, y) == (dx-1, dy-1): results.append(steps) found = True break for dir_x, dir_y in directions: nx, ny = x + dir_x, y + dir_y if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and not grid[nx][ny]: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) if not found: results.append(-1) return results # Function for handling input and formatting the output def process_input(input_string): input_lines = input_string.strip().split(\\"n\\") t = int(input_lines[0]) current_line = 1 test_cases = [] for _ in range(t): n, m = map(int, input_lines[current_line].split()) sx, sy = map(int, input_lines[current_line + 1].split()) dx, dy = map(int, input_lines[current_line + 2].split()) k = int(input_lines[current_line + 3]) walls = [] for j in range(k): wx, wy = map(int, input_lines[current_line + 4 + j].split()) walls.append((wx, wy)) current_line += 4 + k test_cases.append((n, m, sx, sy, dx, dy, k, walls)) return t, test_cases # Example input input_data = 2 5 5 1 1 5 5 2 3 3 4 4 4 4 1 4 4 1 3 2 2 3 3 4 2 # Process and generate results t, test_cases = process_input(input_data) for result in min_steps_to_destination(t, test_cases): print(result)"},{"question":"You are working on a project that involves analyzing a periodic sequence. A sequence is considered periodic if it consists of one or more repetitions of a substring. For example, the sequence \\"abcabcabc\\" is periodic because it consists of three repetitions of the substring \\"abc\\". Your task is to identify the minimal period of the sequence, which is the smallest substring that can be repeated to form the sequence. The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 1000), which is the length of the sequence. The second line contains a string s of length n consisting of lowercase English letters. For each test case, print the length of the minimal period of the sequence. For example, if the input is: ``` 3 6 ababab 9 abcabcabc 4 aaaa ``` The output should be: ``` 2 3 1 ``` In the first test case, the sequence \\"ababab\\" has a minimal period of \\"ab\\", which is of length 2. In the second test case, the sequence \\"abcabcabc\\" has a minimal period of \\"abc\\", which is of length 3. In the third test case, the sequence \\"aaaa\\" has a minimal period of \\"a\\", which is of length 1.","solution":"def find_minimal_period(n, s): Returns the length of the minimal period of the sequence s. for i in range(1, n + 1): substring = s[:i] if substring * (n // i) == s: return i def analyze_sequences(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] results.append(find_minimal_period(n, s)) return results"},{"question":"You are given two strings, s and t, each consisting of lowercase English letters. Your task is to determine if you can transform s into t by performing the following operations any number of times (including zero times): 1. Append any single lowercase English letter to the end of the string s. 2. Delete any single lowercase English letter from the end of the string s. 3. Replace any single lowercase English letter in s with another lowercase English letter. These operations can be combined as needed, and you are allowed to perform the operations in any order. Note that the length of the string s can become longer or shorter to match the length of the string t. The first line of the input contains an integer q (1 ≤ q ≤ 100) — the number of queries. The following q lines each contain two strings s and t (1 ≤ |s|, |t| ≤ 100) respectively. For each query, print \\"YES\\" if it is possible to transform s into t using the described operations, otherwise print \\"NO\\". Examples: Input: 3 abc cba a ab abc def Output: YES YES NO Explanation: In the first query, we can transform \\"abc\\" to \\"cba\\" by replacing \'a\' with \'c\', and \'c\' with \'a\'. In the second query, we can transform \\"a\\" to \\"ab\\" by appending \'b\'. In the third query, it is not possible to transform \\"abc\\" into \\"def\\" by only using the described operations since it involves changing all letters and not specific replacements.","solution":"def can_transform(s, t): Determines if string s can be transformed into string t using the allowed operations. set_s = set(s) set_t = set(t) # Check if there is at least one common character between s and t if set_s.intersection(set_t): return \\"YES\\" return \\"NO\\" def process_queries(queries): Process a list of queries and return the results. Each query is a tuple (s, t). results = [] for s, t in queries: results.append(can_transform(s, t)) return results"},{"question":"Grid Navigation with Obstacles Bob is a game enthusiast and has recently designed a new puzzle game where he controls a robot on a grid filled with obstacles. The grid is represented as an n times m matrix where each cell is either free or contains an obstacle. Bob needs to determine if the robot can navigate from the top-left corner of the grid (cell (1, 1)) to the bottom-right corner of the grid (cell (n, m)) without hitting an obstacle. The robot can only move in four directions: up, down, left, and right. The grid cells are represented as follows: - \'0\' denotes a free cell. - \'1\' denotes an obstacle. Write a program that takes the grid configuration as input and outputs \\"Yes\\" if the robot can reach the bottom-right corner from the top-left corner, and \\"No\\" otherwise. # Input - The first line contains two integers n and m (1 leq n, m leq 1,000) — the dimensions of the grid. - The next n lines contain m integers each (either \'0\' or \'1\') representing the grid. # Output - Output \\"Yes\\" if the robot can reach the bottom-right corner, otherwise output \\"No\\". # Examples Input ``` 5 5 0 0 0 0 0 1 1 0 1 0 0 0 0 1 0 0 1 1 0 0 0 0 0 0 0 ``` Output ``` Yes ``` Input ``` 3 3 0 1 0 1 0 1 0 1 0 ``` Output ``` No ``` # Explanation In the first example, the robot can navigate from (1, 1) to (5, 5) by following a path that avoids obstacles. In the second example, there is no available path that allows the robot to reach the bottom-right corner without hitting an obstacle.","solution":"def can_reach_end(n, m, grid): from collections import deque # Edge case: if the start or end is an obstacle, return \\"No\\" if grid[0][0] == 1 or grid[n-1][m-1] == 1: return \\"No\\" # Initialize a queue for BFS queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) # Directions for moving right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: x, y = queue.popleft() # Check if we reached the bottom-right corner if (x, y) == (n-1, m-1): return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the new position is within the grid and not an obstacle or visited if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"No\\""},{"question":"You are given a list of integers representing the height of flowers in a garden. You need to arrange them into the most aesthetically pleasing arrangement possible. The aesthetic value of a flower arrangement is defined as the number of pairs of flowers (a, b) such that there is exactly one flower with height between the heights of a and b. Given an arrangement, you need to maximize the aesthetic value by rearranging the flowers. You must answer multiple test cases. The first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each test case consists of two lines. The first line of each test case contains an integer n (2 ≤ n ≤ 3 × 10^5) — the number of flowers. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^6) — the heights of the flowers. For each test case, output a single line containing the maximum aesthetic value possible for that test case. A pair of flowers (a, b) is considered for the aesthetic value if and only if: 1. There exists exactly one flower c such that (height of a) < (height of c) < (height of b) or (height of b) < (height of c) < (height of a). Example: Input: 2 5 3 1 4 1 5 4 1 2 3 4 Output: 3 2 In the first test case, one of the optimal arrangements is [1, 3, 4, 1, 5], which forms 3 pairs: (1,4), (3,5), and (1,5). In the second test case, the optimal arrangement could be [1, 3, 4, 2], which forms 2 pairs: (1,4) and (2,4).","solution":"def max_aesthetic_value(t, test_cases): results = [] for case in test_cases: n, heights = case heights.sort() # Building an optimal arrangement arrangement = [] left, right = 0, n - 1 switch = True while left <= right: if switch: arrangement.append(heights[left]) left += 1 else: arrangement.append(heights[right]) right -= 1 switch = not switch # Counting aesthetic pairs count = 0 for i in range(1, n - 1): if (arrangement[i-1] < arrangement[i] > arrangement[i+1]) or (arrangement[i-1] > arrangement[i] < arrangement[i+1]): count += 1 results.append(count) return results"},{"question":"You have been hired as the chief operator for a busy shipping company responsible for transporting containers between two major ports. The company operates exactly one cargo ship, which can carry a fixed weight capacity of up to W kgs. There are exactly N containers available at the port, each container having a certain weight. As the chief operator, it is your job to determine the maximum number of containers that can be loaded onto the ship without exceeding the weight capacity. The first line of the input contains two integers N and W (1 le N le 10^5, 1 le W le 10^9) — the number of containers and the maximum weight capacity of the ship. The second line contains N integers separated by spaces representing the weights of the containers. The weight of each container is an integer wi (1 le wi le 10^6). Output a single integer, the maximum number of containers that can be loaded onto the ship. **Example Input:** ``` 5 10 1 2 3 4 5 ``` **Example Output:** ``` 4 ``` **Explanation:** In the first example, the ship can carry containers with weights [1, 2, 3, 4] exactly summing up to 10. The weight of 5 alone is too heavy to fit into the remaining capacity, so it isn\'t included in the optimal selection. In the second example, the input indicates a scenario, which will be followed by logical reasoning on weight capacity optimization.","solution":"def max_containers(N, W, weights): weights.sort() total_weight = 0 count = 0 for weight in weights: if total_weight + weight <= W: total_weight += weight count += 1 else: break return count"},{"question":"You are a software engineer working for a company that runs a maze-solving competition. Your task is to develop a program that determines the shortest time a robot can take to navigate from the start of a maze to the end, following a set of specific movement rules. The maze is represented by a grid of n rows and m columns. Each cell in the maze can either be passable (denoted by \'.\') or impassable (denoted by \'#\'). The robot can move to any of the four adjacent cells (left, right, up, down) as long as the cell is passable and within the grid boundaries. The robot starts at the top-left cell (0, 0) and needs to reach the bottom-right cell (n-1, m-1). If it is impossible for the robot to reach the bottom-right cell, your program should return -1. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the maze. The next n lines each contain m characters (either \'.\' or \'#\'), representing the maze itself. Print a single integer representing the shortest time (in number of moves) for the robot to reach the bottom-right cell. If it is impossible, print -1. Example: Input: 5 5 ..... .#. ....# .#. ..... Output: 8","solution":"from collections import deque def shortest_path_maze(n, m, maze): # Initialize directions for navigation (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Check if the start or end point is blocked if maze[0][0] == \'#\' or maze[n-1][m-1] == \'#\': return -1 # Initialize queue for BFS with start point queue = deque([(0, 0, 0)]) # (row, col, distance) # Initialize a set to keep track of visited cells visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() # Check if reached the destination if x == n-1 and y == m-1: return dist # Explore the neighbors for dx, dy in directions: nx, ny = x + dx, y + dy # Check bounds and if the cell is passable and not visited if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If destination is not reached return -1 # Example usage: # n, m = 5, 5 # maze = [ # \\".....\\", # \\".#.\\", # \\"....#\\", # \\".#.\\", # \\".....\\" # ] # print(shortest_path_maze(n, m, maze))"},{"question":"You are given a grid of size n times m, initially filled with \'.\' (dots) representing empty cells. Bob wants to place obstacles on the grid in such a way that there must be at least one valid path from the top-left cell (1, 1) to the bottom-right cell (n, m) by only moving right or down at each step. However, the number of obstacles in the grid must be maximized. An obstacle is represented by a \'#\' character. Bob can place obstacles in any cell except for the start (1, 1) and the end (n, m) cells. Determine the maximum number of obstacles that can be placed on the grid while still ensuring at least one valid path exists from (1, 1) to (n, m). # Input - The first line of input contains two integers, n and m (2 le n, m le 1000) — the number of rows and columns in the grid, respectively. # Output - Output a single integer — the maximum number of obstacles that can be placed on the grid. # Example Input ``` 3 3 ``` Output ``` 4 ``` Explanation One of the valid configurations for the grid could be: ``` . # . # . # # # . ``` In this configuration, there is a valid path from (1, 1) to (3, 3) and the maximum number of obstacles (4) has been placed.","solution":"def max_obstacles(n, m): Returns the maximum number of obstacles that can be placed on the grid such that there\'s at least one valid path from (1, 1) to (n, m). return (n - 1) * (m - 1)"},{"question":"You are given a rectangular grid with \'n\' rows and \'m\' columns. Each cell of the grid can either be empty or contain a barrier. You start at the top-left cell (1,1) and want to reach the bottom-right cell (n, m). However, you can only move to a cell directly below or directly to the right of your current cell. Your task is to determine the minimum number of moves required to reach the bottom-right cell from the top-left cell if it is possible to do so, or determine that it is not possible. A move is defined as moving to an adjacent empty cell. The input consists of: - The first line contains two space-separated integers n and m (2 ≤ n, m ≤ 1000) — the number of rows and the number of columns of the grid. - The next n lines each contain m characters. Each of these characters is either \'.\' (indicating an empty cell) or \'#\' (indicating a barrier). Output a single integer representing the minimum number of moves required to reach the bottom-right cell. If there is no such path, output -1. For example: Input: ``` 3 3 ... .#. ... ``` Output: ``` 4 ``` Explanation: In this example, you start at (1,1). A possible path is (1,1) → (1,2) → (1,3) → (2,3) → (3,3), which takes 4 moves.","solution":"def min_moves_to_reach_end(n, m, grid): from collections import deque # Directions array for moving right and down directions = [(0, 1), (1, 0)] # Check if the starting or ending positions are blocked if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 # BFS queue and visited set queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == n-1 and col == m-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited: if grid[new_row][new_col] == \'.\': queue.append((new_row, new_col, dist + 1)) visited.add((new_row, new_col)) return -1"},{"question":"John, a scientist, is working on a new type of ecosystem simulation involving interactions between various species. For the simulation, he needs to model the behavior of predators and prey in a grid. The grid is represented by a 2D matrix of size n times n where each cell can be: - Empty (denoted by \'.\'), - Containing a prey (denoted by \'P\'), - Or containing a predator (denoted by \'D\'). The predators move in a fixed pattern: they can move one cell up, down, left, or right. John wants to determine whether every prey on the grid has at least one predator capable of reaching it. To achieve this, he needs to verify if for every prey cell, there exists at least one predator that can move to that prey\'s position. Write a program to help John determine the answer. Output \\"SAFE\\" if every prey can be reached by at least one predator, otherwise output \\"DANGER\\". The first line contains a single integer n (2 leq n leq 500) — the dimensions of the grid. Each of the next n lines contains n characters (either \'.\', \'P\', or \'D\') representing the grid. # Example Input ``` 3 .DP .PD DD. ``` Output ``` SAFE ``` Input ``` 4 D..P ..D. P... ...P ``` Output ``` DANGER ```","solution":"def check_prey_safety(grid): Function to determine if every prey cell \'P\' in the grid has at least one predator \'D\' capable of reaching it. :param grid: List of strings where each string represents a row in the grid. :return: String \\"SAFE\\" if every prey is reachable by a predator, otherwise \\"DANGER\\". n = len(grid) for i in range(n): for j in range(n): # If we find a prey if grid[i][j] == \'P\': # Check if there is a predator in the neighboring cells (up, down, left, right) predator_nearby = ( (i > 0 and grid[i - 1][j] == \'D\') or (i < n - 1 and grid[i + 1][j] == \'D\') or (j > 0 and grid[i][j - 1] == \'D\') or (j < n - 1 and grid[i][j + 1] == \'D\') ) if not predator_nearby: return \\"DANGER\\" return \\"SAFE\\" # Example usage: grid1 = [ \\".DP\\", \\".PD\\", \\"DD.\\" ] print(check_prey_safety(grid1)) # Expected output: SAFE grid2 = [ \\"D..P\\", \\"..D.\\", \\"P...\\", \\"...P\\" ] print(check_prey_safety(grid2)) # Expected output: DANGER"},{"question":"In a social media application, users can form friendship connections. When a user makes a post, it should be displayed to all friends connected directly to the user. Your task is to implement a function that calculates the visibility of a post, that is, the total number of unique friends who can see the post made by a given user. The friendship network is represented as an undirected graph where nodes represent users and edges represent friendship connections. Your function will receive the graph\'s representation and the ID of the user who made the post. # Function Signature ```python def post_visibility(n: int, friendships: List[Tuple[int, int]], user_id: int) -> int: ``` # Input - `n`: An integer (1 ≤ n ≤ 1000), the number of users. - `friendships`: A list of tuples where each tuple (a, b) represents a bidirectional friendship connection between user a and user b. - `user_id`: An integer (1 ≤ user_id ≤ n), the ID of the user who made the post. # Output - Return the number of unique friends who can see the post made by the user with ID `user_id`. # Example ```python print(post_visibility(5, [(1, 2), (2, 3), (3, 4), (4, 5), (1, 5)], 1)) # Output: 2 print(post_visibility(6, [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6)], 2)) # Output: 3 ``` # Explanation - In the first example, user 1 is directly connected to user 2 and user 5. These 2 friends can see the post made by user 1. - In the second example, user 2 is directly connected to user 1, user 4, and user 5. These 3 friends can see the post made by user 2.","solution":"from typing import List, Tuple def post_visibility(n: int, friendships: List[Tuple[int, int]], user_id: int) -> int: Returns the number of unique friends who can see the post made by the user with ID user_id. :param n: An integer, the number of users. :param friendships: A list of tuples where each tuple (a, b) represents a bidirectional friendship connection. :param user_id: An integer, the ID of the user who made the post. :return: The number of unique friends who can see the post. # Create an adjacency list to represent the graph friends = {i: set() for i in range(1, n + 1)} for a, b in friendships: friends[a].add(b) friends[b].add(a) # The number of unique friends is the size of the set for user_id return len(friends[user_id])"},{"question":"Given an array of positive integers, you are asked to partition the array into several contiguous subarrays, such that for each subarray, the sum of its elements is a prime number. If there is more than one valid partition, you can output any of them. If no such partitioning is possible, print -1. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The first line contains a single integer n (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains n positive integers separated by a space (1 ≤ ai ≤ 109) — the elements of the array. If a partition is possible, print the number of subarrays m, followed by m lines each containing two integers l and r — the start and end indices of the subarray (1-indexed). If no partition is possible, print -1.","solution":"def is_prime(n): Determines if a number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_partition(arr): Partitions the array into contiguous subarrays where each subarray sum is a prime number. If such a partition is possible, returns the partition details; otherwise, returns -1. n = len(arr) current_sum = 0 partitions = [] start = 0 for i in range(n): current_sum += arr[i] if is_prime(current_sum): partitions.append((start + 1, i + 1)) current_sum = 0 start = i + 1 # If the array was fully partitioned if start == n: return partitions else: return -1 # Example usage: # Input n = 5 arr = [2, 3, 5, 7, 11] # Call the function result = prime_partition(arr) if result == -1: print(result) else: print(len(result)) for l, r in result: print(l, r)"},{"question":"In the ancient city of Apollonia, there are n monuments and m roads connecting them. Each road has a distinct non-negative weight that signifies the amount of time required to travel from one monument to another. The Apollonian Council wants to maintain only the essential roads needed to ensure that every monument can be reached from any other monument, while minimizing the total travel time. Can you help them determine the minimized total travel time using the least number of roads necessary? Given n and m, the number of monuments and roads, followed by m triplets (u, v, w) describing a road from monument u to monument v with a travel time of w, find the minimum total travel time required to connect all the monuments. The input consists of: - The first line containing two integers n and m (1 ≤ n ≤ 1000, n-1 ≤ m ≤ 50000), the number of monuments and the number of roads. - Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 0 ≤ w ≤ 10^6), describing the road between monument u and monument v with travel time w. The roads form an undirected graph, thus both (u, v) and (v, u) roads are considered the same. The output should be: - A single integer representing the minimized total travel time required to ensure all monuments are reachable from each other. If it\'s not possible to connect all the monuments, print -1. Example: ``` Input: 4 5 1 2 1 1 3 2 2 3 3 2 4 6 3 4 4 Output: 7 ``` Explanation: In the given example, the optimal way to connect all the monuments is to use the roads with travel times 1, 2, and 4, resulting in a minimized total travel time of 7.","solution":"def find_minimum_travel_time(n, m, roads): Finds the minimum total travel time required to connect all the monuments using the Kruskal\'s algorithm for Minimum Spanning Tree. parent = list(range(n+1)) def find(x): if x != parent[x]: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY # Sort roads based on their weights roads.sort(key=lambda x: x[2]) mst_weight = 0 edges_used = 0 for u, v, w in roads: if find(u) != find(v): union(u, v) mst_weight += w edges_used += 1 if edges_used == n - 1: break # Check if all nodes are connected root = find(1) for i in range(1, n+1): if find(i) != root: return -1 return mst_weight # Sample usage if __name__ == \\"__main__\\": n = 4 m = 5 roads = [ (1, 2, 1), (1, 3, 2), (2, 3, 3), (2, 4, 6), (3, 4, 4), ] print(find_minimum_travel_time(n, m, roads)) # Output should be 7"},{"question":"Alex is fond of geometric patterns and triangles hold a special place in his heart. Recently, he has been exploring triangles represented in a Cartesian coordinate system. Alex defines a triangle using three points ((x1, y1)), ((x2, y2)), and ((x3, y3)). He is particularly interested in knowing if a given set of three points form a right-angled triangle. A right-angled triangle has one angle exactly equal to 90 degrees. He needs your help to automate the verification process. Given the coordinates of the three points, determine if they form a right-angled triangle. You need to check this for multiple sets of points. # Input - The first line of input contains an integer (t) ((1 leq t leq 10^5)) — the number of test cases. - Each of the next (t) lines contains six integers (x1, y1, x2, y2, x3, y3) ((-10^6 leq x1, y1, x2, y2, x3, y3 leq 10^6)) — the coordinates of the three points. # Output For each test case, print \\"YES\\" if the points form a right-angled triangle and \\"NO\\" otherwise. # Example Input ``` 2 0 0 3 0 0 4 1 1 2 2 3 3 ``` Output ``` YES NO ``` # Note To determine if the triangle is right-angled, you can use the Pythagorean theorem. Calculate the squared distances between all pairs of points and check if the sum of the squares of any two distances equals the square of the third distance.","solution":"def is_right_angled_triangle(x1, y1, x2, y2, x3, y3): def squared_distance(x1, y1, x2, y2): return (x1 - x2) ** 2 + (y1 - y2) ** 2 # Squared lengths of the sides of the triangle d1 = squared_distance(x1, y1, x2, y2) d2 = squared_distance(x2, y2, x3, y3) d3 = squared_distance(x3, y3, x1, y1) # Check the Pythagorean theorem for right-angled triangle return (d1 + d2 == d3) or (d1 + d3 == d2) or (d2 + d3 == d1) def solve(t, test_cases): results = [] for case in test_cases: x1, y1, x2, y2, x3, y3 = case if is_right_angled_triangle(x1, y1, x2, y2, x3, y3): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example Usage if __name__ == \\"__main__\\": t = 2 test_cases = [ (0, 0, 3, 0, 0, 4), (1, 1, 2, 2, 3, 3) ] results = solve(t, test_cases) for result in results: print(result)"},{"question":"You are given an array of `n` integers. You need to divide the array into the minimal number of non-empty contiguous subarrays so that each subarray has the sum of its elements strictly less than a given integer `m`. The first line of input contains two integers `n` (1 ≤ n ≤ 100000) and `m` (1 ≤ m ≤ 10^9) — the length of the array and the maximum allowed sum of the elements of any subarray, respectively. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the elements of the array. Print a single integer — the minimal number of contiguous subarrays needed so that each subarray has a sum of its elements strictly less than `m`. If it is impossible to meet the criteria, print `-1`. For the first example, the optimal solution is to divide the array into `[1, 2]`, `[3]`, `[1, 2]`, `[4]`, `[1]`. For the second example, the optimal solution is to divide the array into `[1]`, `[2]`, `[1, 2]`. For the third example, it is impossible to meet the criteria since the single element `5` is already greater than `4`. Example: Input: 4 5 1 2 1 2 Output: 2 Input: 5 6 1 2 3 1 2 Output: 3 Input: 3 4 5 1 1 Output: -1","solution":"def min_subarrays(n, m, arr): Returns the minimal number of non-empty contiguous subarrays where the sum of elements in each subarray is strictly less than the integer m. If it\'s impossible to do so, returns -1. if any(x >= m for x in arr): return -1 current_sum = 0 subarray_count = 1 for value in arr: if current_sum + value < m: current_sum += value else: subarray_count += 1 current_sum = value return subarray_count"},{"question":"Eve is taking part in a digital forensics challenge. She needs to reconstruct a file from a series of fragments. The file was broken into several chunks and the order in which they should be reassembled is unknown. Each chunk contains a sequence of characters and a unique identifier that helps indicate the position of the chunk in the file. Eve is provided with N chunks, each described by an identifier and a sequence of characters. She needs to reconstruct the original file by ordering the chunks based on their identifiers. The first line of input contains a single integer N (1 ≤ N ≤ 10,000) indicating the number of chunks. Each of the next N lines contains a unique identifier followed by a space and then a sequence of characters. The identifiers are guaranteed to be integers in the range [1, N] and are given in no particular order. The sequences contain only alphanumeric characters and are non-empty. Output the reconstructed file as a single string by concatenating the sequences in order of their identifiers from 1 to N. Example: Input: 4 3 file3data 1 file1data 2 file2data 4 file4data Output: file1datafile2datafile3datafile4data In this example, the chunks should be ordered as: file1data, file2data, file3data, and file4data. Concatenating these sequences results in the reconstructed file string \\"file1datafile2datafile3datafile4data\\".","solution":"def reconstruct_file(chunks): Reconstruct the original file from a list of chunks based on their identifiers. Args: chunks (List[Tuple[int, str]]): A list of tuples where each tuple consists of an identifier and a sequence of characters. Returns: str: The reconstructed file as a single string. # Create a dictionary to store the chunks by their identifiers chunk_dict = {identifier: sequence for identifier, sequence in chunks} # Initialize list to hold the ordered sequences ordered_sequences = [] # Iterate over identifiers from 1 to N to collect the sequences in order for i in range(1, len(chunks) + 1): ordered_sequences.append(chunk_dict[i]) # Concatenate all the sequences to form the reconstructed file reconstructed_file = \'\'.join(ordered_sequences) return reconstructed_file"},{"question":"The annual Galactic CodeFest is underway and one of the challenges involves finding efficient routes across different space sectors. Each sector in the galaxy is represented as a node, and wormholes between sectors are represented as directed edges. Each wormhole has an associated risk level, which is quantified as a positive integer. A wormhole with a higher risk level is more dangerous to use. Your mission is to determine the safest paths from one sector to all other sectors in the galaxy. The safest path is defined as the one with the minimum sum of risk levels. However, to make things more challenging, certain sectors have restricted wormholes. You cannot use any wormhole that leads to a restricted sector directly. Given the number of sectors and wormhole connections, along with the list of restricted sectors and their incident wormholes, you need to compute the minimum risk level to travel from the starting sector to all other sectors that can be reached. The first line contains three integers: `n` (2 ≤ `n` ≤ 10^5), the number of sectors; `m` (0 ≤ `m` ≤ 10^5), the number of wormholes; and `k` (0 ≤ `k` ≤ `n`), the number of restricted sectors. The next line contains `k` distinct integers, indicating the indices of the restricted sectors. If `k` is zero, there are no restricted sectors. Each of the next `m` lines contains three integers: `ui`, `vi`, and `wi` (1 ≤ `ui`, `vi` ≤ `n`, 1 ≤ `wi` ≤ 10^4), representing a wormhole from sector `ui` to sector `vi` with a risk level of `wi`. Print `n` integers, where the `i`-th integer is the minimum risk level to travel from the starting sector (sector 1) to sector `i`. If a sector `i` is unreachable, print -1 for that sector. The result for the starting sector (sector 1) should be 0. Note: Although the graph is directed and can have wormholes leading back to the starting sector, you must ignore these to prevent infinite loops. Example Inputs: - n = 5, m = 6, k = 2 - Restricted sectors = [3, 5] - Wormholes: - 1 2 2 - 1 3 4 - 2 3 1 - 2 4 7 - 3 4 3 - 4 5 2 Example Output: - 0 2 -1 9 -1 Explanation: From sector 1: - Sector 2 is reachable with a minimum risk level of 2. - Sector 3 is restricted directly. - Sector 4 is reachable through sector 2 (risk level 2) + sector 3 (restricted) taking an alternative path, but it avoids sector 3, so 1 -> 2 -> 4 with a total risk level of 2 + 7 = 9. - Sector 5 is restricted directly.","solution":"import heapq def find_safest_paths(n, m, k, restricted, wormholes): # Create a graph graph = {i: [] for i in range(1, n + 1)} for ui, vi, wi in wormholes: if vi not in restricted: graph[ui].append((vi, wi)) # Dijkstra\'s algorithm using a priority queue. def dijkstra(start_node): min_heap = [(0, start_node)] # (risk, sector) risks = {i: float(\'inf\') for i in range(1, n + 1)} risks[start_node] = 0 visited = set() while min_heap: current_risk, current_sector = heapq.heappop(min_heap) if current_sector in visited: continue visited.add(current_sector) for neighbor, risk in graph[current_sector]: if neighbor not in visited: new_risk = current_risk + risk if new_risk < risks[neighbor]: risks[neighbor] = new_risk heapq.heappush(min_heap, (new_risk, neighbor)) return risks risks = dijkstra(1) result = [] for i in range(1, n + 1): if risks[i] == float(\'inf\'): result.append(-1) else: result.append(risks[i]) return result"},{"question":"The mystical forest is filled with magical creatures. As an aspiring mage, you want to study the social structure of these creatures. These creatures live in a graph-like structure of burrows. Each burrow connects to other burrows through tunnels. You are particularly interested in groups of burrows where every burrow is reachable from every other burrow in that group. Such a group is called a connected component. To understand the social structure better, you want to determine the number of connected components in the burrow network. You are given a network of n burrows (numbered from 1 to n) and m tunnels between them. Your task is to count the number of connected components in this network. The input consists of: - An integer n (1 ≤ n ≤ 1000) - the number of burrows. - An integer m (0 ≤ m ≤ 10000) - the number of tunnels. - m pairs of integers u and v (1 ≤ u, v ≤ n) indicating that there is a tunnel between burrow u and burrow v. Output a single integer - the number of connected components in this network. Example: Input: 6 5 1 2 2 3 4 5 5 6 4 6 Output: 2 Explanation: There are two connected components in the example: {1, 2, 3} and {4, 5, 6}.","solution":"def count_connected_components(n, m, tunnels): def dfs(node, visited, adjacency_list): stack = [node] while stack: current = stack.pop() for neighbor in adjacency_list[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) # Build the adjacency list adjacency_list = {i: [] for i in range(1, n + 1)} for u, v in tunnels: adjacency_list[u].append(v) adjacency_list[v].append(u) # Initialize visited tracking visited = {i: False for i in range(1, n + 1)} components_count = 0 # Traverse all nodes using DFS for i in range(1, n + 1): if not visited[i]: components_count += 1 visited[i] = True dfs(i, visited, adjacency_list) return components_count"},{"question":"Let\'s implement a solution to a classic problem using dynamic programming to determine the length of the longest increasing subsequence (LIS) in an array. The goal is to not only find the length of the LIS but also to reconstruct one such subsequence. A subsequence is a sequence derived by removing some or no elements from the array without changing the order of the remaining elements. Write a function `find_LIS_length_and_sequence` that takes an integer array `arr` as input and returns a tuple containing two elements: 1. An integer representing the length of the longest increasing subsequence. 2. A list of integers representing one of the longest increasing subsequences. # Function Signature: ```python def find_LIS_length_and_sequence(arr: List[int]) -> Tuple[int, List[int]]: ``` # Input: - A single line containing an integer n (1 le n le 1000) — the size of the array. - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000) — the elements of the array. # Output: - Print the length of the longest increasing subsequence. - Print one of the longest increasing subsequences. # Example Input: ``` 6 5 2 8 6 3 6 ``` Output: ``` 3 2 6 8 ``` Explanation: The longest increasing subsequences are `[2, 6, 8]` and `[2, 3, 6]`, both with length 3. The function should return one of them. # Note: - Multiple valid solutions might exist for the subsequence. Any valid subsequence can be returned. - Ensure that the function is optimized for performance, given the constraints.","solution":"from typing import List, Tuple def find_LIS_length_and_sequence(arr: List[int]) -> Tuple[int, List[int]]: n = len(arr) if n == 0: return (0, []) # Create an array to store the length of LIS at each index lis_lengths = [1] * n prev_index = [-1] * n # Array to reconstruct the path # Populate the lis_lengths array for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lis_lengths[i] < lis_lengths[j] + 1: lis_lengths[i] = lis_lengths[j] + 1 prev_index[i] = j # Find the maximum length of LIS and its last index max_length = max(lis_lengths) max_index = lis_lengths.index(max_length) # Reconstruct the LIS sequence lis_sequence = [] while max_index != -1: lis_sequence.append(arr[max_index]) max_index = prev_index[max_index] lis_sequence.reverse() # The sequence was built backwards, so reverse it return (max_length, lis_sequence)"},{"question":"You are given a tree with `n` nodes rooted at node 1. Each node has well-defined depth in the tree and every edge in the tree connects two different nodes. A binary tree can be described with `2 * n - 1` nodes and nodes 1, 2, ..., n are specifically referred to as leaves. For any leaf node `i`, the depth is equal to `d_i` and for any non-leaf node `j`, its depth is at least `1`, meaning all nodes in the set `{n+1, ..., 2n-1}` are non-leaf nodes. You need to find the smallest possible height of the corresponding complete binary tree from given depths where the height is defined as the length of the longest path from the root to any leaf. The input consists of: - The first line contains an integer `n` (1 ≤ n ≤ 2 * 10^5). - The second line contains `n` integers `d_1, d_2, ..., d_n` (1 ≤ d_i ≤ 2 * n - 1). Output a single integer - the minimum height of the binary tree. For example: Input: ``` 5 3 2 1 4 2 ``` Output: ``` 4 ``` Explanation: By correctly placing the leaf nodes respecting their depth constraints and forming non-leaf nodes, the minimum height of the complete binary tree is found to be 4.","solution":"def min_height_binary_tree(n, depths): from collections import Counter # Count the frequency of each depth depth_count = Counter(depths) # Add all depths to get the max height possible max_depth = max(depths) # Initialize current height to 0 current_height = 0 # Iterate over each depth level for depth in range(1, max_depth + 1): if depth_count[depth] > 0: current_height = max(current_height, depth) return current_height"},{"question":"Kaito is planning to organize a competition where the participants will be solving arithmetic puzzles. One type of puzzle he has planned involves evaluating arithmetic expressions without using parentheses but respecting operator precedence. The expression will consist of three types of operators \'+\', \'-\', and \'*\'. Due to the precedence and associativity rules, \'*\' has higher precedence over \'+\' and \'-\', and both \'+\' and \'-\' have the same precedence which is resolved based on left-to-right associativity. To ensure the participants can practice, Kaito needs a program that can evaluate such arithmetic strings correctly. Write a function to evaluate an arithmetic expression string containing integers and operators \'+\', \'-\', and \'*\'. The input expression will not contain any spaces, and all integers are non-negative. Function Signature: ```python def evaluate_expression(expression: str) -> int: ``` # Input - A string `expression` where each character is either a digit (0-9) or one of the operators \'+\', \'-\', \'*\'. (1 ≤ len(expression) ≤ 10^5) # Output - Return the integer result of evaluating the arithmetic expression according to the precedence and associativity rules. # Examples ```python # Example 1: expression = \\"3+2*2\\" assert evaluate_expression(expression) == 7 # Example 2: expression = \\"3*2+2\\" assert evaluate_expression(expression) == 8 # Example 3: expression = \\"3+5-2*2\\" assert evaluate_expression(expression) == 4 # Example 4: expression = \\"2*3*4+1\\" assert evaluate_expression(expression) == 25 ``` # Note - Evaluating `3+2*2`: the multiplication `2*2` is evaluated first, resulting in `3+4 = 7`. - Evaluating `3*2+2`: the multiplication `3*2` is evaluated first, resulting in `6+2 = 8`. - Evaluating `3+5-2*2`: the multiplication `2*2` is evaluated first, resulting in `3+5-4 = 4`. - Evaluating `2*3*4+1`: the multiplications `2*3` and `6*4` are evaluated first, resulting in `24+1 = 25`.","solution":"def evaluate_expression(expression: str) -> int: Evaluates an arithmetic expression containing integers and the operators \'+\', \'-\', and \'*\'. n = len(expression) stack = [] current_number = 0 operation = \\"+\\" # to handle the first operation correctly for i in range(n): char = expression[i] if char.isdigit(): current_number = current_number * 10 + int(char) if char in \\"+-*\\": if operation == \\"+\\": stack.append(current_number) elif operation == \\"-\\": stack.append(-current_number) elif operation == \\"*\\": stack.append(stack.pop() * current_number) operation = char current_number = 0 if operation == \\"+\\": stack.append(current_number) elif operation == \\"-\\": stack.append(-current_number) elif operation == \\"*\\": stack.append(stack.pop() * current_number) return sum(stack)"},{"question":"You have been provided with a list of integer heights representing the elevation at each unit of a one-dimensional landscape, and you are required to compute the volume of water that can be trapped between the elevations after a rainfall. Given a list of non-negative integers where each integer represents the height of a unit-width bar. The task is to compute how much water it can trap after raining. For example, given heights [0,2,0,3,0,1,2], water in unit-widths [0,2,0,3,0,1,2] would fill to the following levels: [0,0,1,0,2,1,0], resulting in a total of 6 trapped water units. Write a function `trap_water(heights)` that takes a list of integers representing the landscape and returns an integer representing the amount of trapped water. # Function Signature: ```python def trap_water(heights: List[int]) -> int: ``` # Input: - The function accepts a list of n non-negative integers representing the heights of the bars, where ( 0 leq n leq 10^5 ). - Each height value ( h_i ) will satisfy ( 0 leq h_i leq 10^4 ). # Output: - The function returns a single integer representing the total amount of trapped water. # Example: ```python # Input: trap_water([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]) # Output: 6 ``` **Note**: For the given input heights, the total trapped water would be: - Between the first and third columns: 1 unit of water - Between the fourth height and the sixth height: 2 units of water - Between the sixth and eighth heights: 2 units of water - Between the tenth and twelfth heights: 1 unit of water Thus, the solution should compute the correct amount of trapped water for a given landscape.","solution":"def trap_water(heights): Given a list of non-negative integers representing the heights of the bars, compute how much water it can trap after raining. if not heights: return 0 n = len(heights) left, right = 0, n - 1 left_max, right_max = heights[left], heights[right] trapped_water = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) trapped_water += left_max - heights[left] else: right -= 1 right_max = max(right_max, heights[right]) trapped_water += right_max - heights[right] return trapped_water"},{"question":"Xenia is playing a game with her friend, and they have come up with an interesting challenge. The challenge involves two sequences of integers, and Xenia needs to determine some properties based on the sequences. The first sequence, `a`, consists of `n` integers, and the second sequence, `b`, consists of `m` integers. Xenia needs to determine if both sequences contain the same integers when considering frequencies of occurrence. Given the two sequences, determine if it is possible to rearrange the elements of `a` to match the elements of `b` exactly (considering the frequency of each integer must be the same in both sequences). The first line contains a single integer `t` (`1 ≤ t ≤ 100`) — the number of test cases. For each test case, the first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 300`) — the lengths of the two sequences `a` and `b`. The second line contains `n` integers `a1, a2, ..., an` (`1 ≤ ai ≤ 1000`) — the elements of the first sequence. The third line contains `m` integers `b1, b2, ..., bm` (`1 ≤ bi ≤ 1000`) — the elements of the second sequence. Output \\"YES\\" if it\'s possible to rearrange `a` to match `b` exactly, or \\"NO\\" otherwise. # Sample Input: ``` 3 3 3 1 2 3 3 2 1 4 4 1 1 1 1 1 1 2 1 5 5 1 2 3 4 5 5 4 3 2 1 ``` # Sample Output: ``` YES NO YES ```","solution":"def are_sequences_equal(t, test_cases): Determine if it\'s possible to rearrange the first sequence to match the second sequence exactly, considering frequencies of each integer must be the same in both. Parameters: t (int): Number of test cases. test_cases (list): List where each element is a tuple of the format: (n, m, a, b) where n is the length of first sequence, m is the length of the second sequence, a is the first sequence and b is the second sequence. Returns: list: List of strings \\"YES\\" or \\"NO\\" for each test case index. results = [] for n, m, sequence_a, sequence_b in test_cases: if sorted(sequence_a) == sorted(sequence_b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Diane is trying to organize her bookshelf. She has a collection of books numbered from 1 to n, and each book has a thickness associated with it. Diane can adjust the position of any book on the shelf, but the goal is to minimize the total thickness of books in any continuous segment of length k after at most one swap of any two books. Diane needs to figure out the minimum possible thickness for any segment of length k after performing at most one swap. Could you help her determine that? You are given an array `thickness` of `n` integers, where `thickness[i]` represents the thickness of the i-th book. You are also given an integer `k`, the length of the segment. First line contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ n). Second line contains `n` space-separated integers where the i-th integer represents the thickness of the i-th book. Output the minimum possible total thickness of any continuous segment of length `k` after at most one swap of any two books. For example, given the input: ``` 7 3 4 5 2 3 6 1 7 ``` The function should return: ``` 6 ``` Explanation: - Without any swaps: The segment [2, 3, 6] has a sum of 11. - With one swap: Swapping books 2 and 6, the segment [2, 3, 1] has a sum of 6, which is the minimum possible.","solution":"def min_thickness_after_swap(n, k, thickness): Finds the minimum possible total thickness of any continuous segment of length k after performing at most one swap of any two books. def segment_sum(thick, k): return sum(thick[:k]) min_total = float(\'inf\') # Calculate initial sum of first segment of length k total_thickness = segment_sum(thickness, k) min_total = min(min_total, total_thickness) # Iterate through possible swaps for i in range(n): for j in range(i + 1, n): # Perform the swap thickness[i], thickness[j] = thickness[j], thickness[i] # Check all segments of length k for l in range(n - k + 1): segment = thickness[l:l + k] current_sum = sum(segment) min_total = min(min_total, current_sum) # Swap back to get the original array thickness[i], thickness[j] = thickness[j], thickness[i] return min_total"},{"question":"You are given a mystical string consisting of lowercase Latin letters and two initial positions of Alfie and Bella who are stuck at two different points in the string. Both of them want to meet each other at the earliest possible position in the string. Alfie can only move to the right and Bella can only move to the left one character at a time. You need to determine the minimum number of moves required for Alfie and Bella to meet, or if it is impossible for them to meet, return -1 instead. The first line contains one integer n (2 ≤ n ≤ 100) — the length of the mystical string. The second line contains the mystical string of length n, consisting of lowercase Latin letters. The third line contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) — the starting positions of Alfie and Bella respectively. The positions are 1-based indexes. Print one integer — the minimum number of moves required for Alfie and Bella to meet. If they cannot meet, print -1. For example, considering the first example below, Alfie starts at position 2 and Bella starts at position 5 on the string \\"abcde\\". Moving right from \\"b\\" to \\"c\\" takes 1 step for Alfie and moving left from \\"e\\" to \\"d\\" takes 1 step for Bella, making a total of 2 steps for them to meet at \\"c\\". In the second example below, positions are chosen such that Alfie starting at position 1 and Bella at position 10 will never be able to meet. Examples: Input 5 abcde 2 5 Output 2 Input 10 abcdefghij 1 10 Output -1","solution":"def minimum_moves_to_meet(n, mystical_string, a, b): Returns the minimum moves required for Alfie (starting at position a) and Bella (starting at position b) to meet, or -1 if they cannot meet. a -= 1 # Convert to 0-based index b -= 1 # Convert to 0-based index if a > b: # If Alfie is already to the right of Bella, they can\'t meet return -1 return b - a # They meet at b and the number of moves is b - a"},{"question":"You are given an array of integers and you need to split it into several contiguous non-empty subarrays such that the maximum possible sum among the subarrays is minimized. Your task is to determine the minimized maximum sum for a given number of subarrays. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 105), the number of elements in the array and the number of subarrays to split the array into, respectively. The second line contains n integers a1, a2, ... , an (1 ≤ ai ≤ 109), the elements of the array. Output a single integer — the minimized maximum sum among the subarrays. In the first example, you need to split [7, 2, 5, 10, 8] into 2 subarrays. The possible splits are: - [7, 2, 5] and [10, 8], with the maximum sum of 15 and 18, respectively. - [7, 2] and [5, 10, 8], with the maximum sum of 9 and 23, respectively. - [7, 2, 5, 10] and [8], with the maximum sum of 24 and 8, respectively. The answer is 18, as it is the minimal value among the possible splits. In the second example, you need to split [1, 2, 3, 4, 5] into 2 subarrays. The possible splits are: - [1, 2, 3] and [4, 5], resulting in maximum sums of 6 and 9. - [1, 2] and [3, 4, 5], resulting in maximum sums of 3 and 12. The answer is 9, as it is the minimal value among the possible splits.","solution":"def split_array(nums, k): def can_split(mid): count = 1 total = 0 for num in nums: total += num if total > mid: total = num count += 1 if count > k: return False return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if can_split(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given a string containing lowercase alphabetical characters (\'a\' to \'z\') and integer numbers (from \'0\' to \'9\'). Your task is to group the characters by type, i.e., separate the alphabetical characters and the numerical characters, and then concatenate the separated groups. However, the order should be as follows: first, all the alphabetical characters sorted in ascending order, followed by all the numerical characters sorted in ascending order. Input Format: A single line containing the string. Output Format: A single line containing the concatenated result of sorted alphabetical characters followed by the concatenated sorted numbers. Constraints: The length of the input string will not exceed 1000 characters. Example: Input: bd3a2c1 Output: abcd123 Explanation: The alphabetical characters are \'b\', \'d\', \'a\', and \'c\', which, when sorted, become \'abcd\'. The numerical characters are \'3\', \'2\', and \'1\', which, when sorted, become \'123\'. Therefore, the final output is \'abcd123\'.","solution":"def group_and_sort_characters(input_str): This function takes a string containing lowercase alphabetical characters and digits, separates them into alphabetical and numerical groups, sorts each group, and then concatenates the sorted groups in order with alphabetical characters first. alphabetical_chars = [] numerical_chars = [] for char in input_str: if char.isalpha(): alphabetical_chars.append(char) elif char.isdigit(): numerical_chars.append(char) sorted_alphabetical = \'\'.join(sorted(alphabetical_chars)) sorted_numerical = \'\'.join(sorted(numerical_chars)) return sorted_alphabetical + sorted_numerical"},{"question":"Bojan loves playing with strings during his free time. One day, he came up with an intriguing challenge: given a string s, he wants to find the number of distinct non-empty palindromic substrings in it. A string is a palindrome if it reads the same forward and backward. He asked for your help to implement this challenge. Input: - The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. - The descriptions of t test cases follow. - Each test case contains a single string s (1 ≤ |s| ≤ 1000) — the string Bojan is interested in. Output: For each test case, output one integer — the number of distinct non-empty palindromic substrings in the given string. Examples: Input ``` 3 ababa abc aaa ``` Output ``` 5 3 3 ``` Explanation: - For the string \\"ababa\\", the distinct non-empty palindromic substrings are: \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\". - For the string \\"abc\\", the distinct non-empty palindromic substrings are: \\"a\\", \\"b\\", \\"c\\". - For the string \\"aaa\\", the distinct non-empty palindromic substrings are: \\"a\\", \\"aa\\", \\"aaa\\".","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct non-empty palindromic substrings in the given string s. def is_palindrome(sub): return sub == sub[::-1] n = len(s) palindromic_substrings = set() for i in range(n): # Check odd length palindromes centered at i l, r = i, i while l >= 0 and r < n and s[l] == s[r]: palindromic_substrings.add(s[l:r+1]) l -= 1 r += 1 # Check even length palindromes centered at i, i+1 l, r = i, i + 1 while l >= 0 and r < n and s[l] == s[r]: palindromic_substrings.add(s[l:r+1]) l -= 1 r += 1 return len(palindromic_substrings) def solve(test_cases): results = [] for s in test_cases: results.append(count_distinct_palindromic_substrings(s)) return results"},{"question":"You are given a set of cards, where each card has a unique positive integer value. The cards form a sequence where each subsequent card\'s value is either equal to or greater than the previous card\'s value. However, there might be a hacker among the cards who swapped the position of exactly one pair of cards in an attempt to mess up the sequence. Your task is to identify these two cards and swap them back to restore the sorted order. The first line contains an integer n (2 ≤ n ≤ 100) – the number of cards. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) – the values on the cards. If there is no need to swap any cards (sequence is already sorted), print \\"YES\\". Otherwise, print two space-separated integers indicating the positions of the two cards (1-based) that you need to swap to restore the sorted order. If there are multiple valid answers, print any of them. Example: Input: 5 1 3 5 4 6 Output: 3 4","solution":"def find_swapped_positions(n, card_values): Identifies the positions to swap to restore sorted order or returns \\"YES\\" if the sequence is already sorted. :param n: An integer representing the number of cards. :param card_values: A list of integers representing the values of the cards. :return: \\"YES\\" if the sequence is already sorted, else two space-separated integers indicating the positions of the two cards to be swapped. sorted_cards = sorted(card_values) # Check if the sequence is already sorted if card_values == sorted_cards: return \\"YES\\" # Identify the two positions to be swapped pos1, pos2 = -1, -1 for i in range(n): if card_values[i] != sorted_cards[i]: if pos1 == -1: pos1 = i else: pos2 = i # Return the positions in 1-based index return f\\"{pos1 + 1} {pos2 + 1}\\""},{"question":"Given an undirected tree with n nodes (numbered from 1 to n) and n - 1 edges, you need to determine the minimum possible value of the sum of weights of the longest paths originating from each node when you assign integer weights to the edges. You are allowed to assign the weights of the edges in such a way that the weight of any edge is an integer between 1 to 109. The weight of a path is the sum of weights of edges in that path. The first line contains a single integer n (2 ≤ n ≤ 1e5) — the number of nodes in the tree. Each of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating that there is an edge between node u and node v. Output a single integer — the minimum possible sum of the weights of the longest paths originating from each node, when the edge weight assignment can be done optimally. # Example Input: 5 1 2 1 3 2 4 2 5 Output: 4 # Explanation Assign the weights as follows: - Edge between 1 and 2: weight 1 - Edge between 1 and 3: weight 1 - Edge between 2 and 4: weight 1 - Edge between 2 and 5: weight 1 The longest path from each node: - Node 1: length 2 (1 → 2 → (4 or 5)) - Node 2: length 2 (2 → 1 → 3) - Node 3: length 2 (3 → 1 → 2) - Node 4: length 2 (4 → 2 → 1) - Node 5: length 2 (5 → 2 → 1) So the minimum possible sum of the weights of the longest paths is 4.","solution":"def minimum_sum_of_longest_paths(n, edges): Returns the minimum possible value of the sum of weights of the longest paths originating from each node. return (n - 1) * 2"},{"question":"In a kingdom far away, there are n castles connected by m roads. Each road connects exactly two different castles, and it is possible to travel between any two castles by traversing one or more roads. The king wants to establish several communication hubs in the castles. A communication hub can directly communicate with any castle that it is connected to by a road, and castles not directly connected to a hub can still communicate through intermediate hubs. The objective is to determine the minimum number of communication hubs needed so that every castle can communicate with every other castle, directly or indirectly, via the hubs. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 100), the number of castles and roads respectively. Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n; a ≠ b), representing a two-way road between castles a and b. Output a single integer — the minimum number of communication hubs required. Example(s): Input: 5 5 1 2 1 3 2 4 3 4 4 5 Output: 1 Explanation: Although there are multiple ways to place the hubs, one optimal way is to place the hub in castle 4. In this setup, castles 1, 2, 3, and 5 can all communicate through castle 4. Thus, the minimum number of hubs required is 1.","solution":"def count_communication_hubs(n, m, roads): Function to count the minimum number of communication hubs required. Parameters: n (int): Number of castles. m (int): Number of roads. roads (list of tuples): Each tuple represents a road connecting two castles. Returns: int: Minimum number of communication hubs required. from collections import defaultdict # Build the adjacency list graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) visited = [False] * (n + 1) def dfs(node): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) components = 0 # Find all connected components using DFS for castle in range(1, n + 1): if not visited[castle]: components += 1 visited[castle] = True dfs(castle) return components"},{"question":"Jennifer is a software engineer who loves solving puzzles in her free time. She recently came across an interesting problem involving arrays and subarrays, and she needs your help to solve it. You are given an array of n integers. You need to find the maximum sum of any subarray of the given array such that the length of this subarray is between l and r (inclusive). Formally, a subarray is defined as a contiguous part of the array. Write a function that, given the array and the integers l and r, returns the maximum sum of a subarray whose length lies within the specified range. The first line of input contains three integers n, l, and r (1 ≤ l ≤ r ≤ n ≤ 100,000) — the length of the array and the range of the subarray lengths. The second line contains n integers a_i (−10^9 ≤ a_i ≤ 10^9) — the elements of the array. Print a single integer — the maximum sum of a subarray whose length is at least l and at most r. Example: Input: 8 2 4 1 -2 3 4 -1 2 1 -5 Output: 8 Explanation: The subarray [3, 4, -1, 2] has the maximum sum of 8 with a length of 4, which is between the specified range l and r.","solution":"def max_subarray_sum_length_range(arr, l, r): Returns the maximum sum of any subarray whose length is between l and r (inclusive). n = len(arr) max_sum = float(\'-inf\') pre_sum = [0] * (n + 1) for i in range(n): pre_sum[i + 1] = pre_sum[i] + arr[i] from collections import deque deq = deque() for i in range(l, n + 1): if i - r - 1 >= 0: while deq and deq[0] <= i - r - 1: deq.popleft() while deq and pre_sum[deq[-1]] >= pre_sum[i - l]: deq.pop() deq.append(i - l) current_sum = pre_sum[i] - pre_sum[deq[0]] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a fantasy world, there are several magical swords known as Elemental Blades. Each sword has a certain power level, and when two adjacent swords are combined, they form a sword with a power level equal to their sum. Combining swords can create a more powerful single sword by decreasing the number of swords by one each time. Given an initial array representing the power levels of these swords, your task is to determine the minimum number of combinations required to ensure that the power levels are strictly increasing from left to right. If it is impossible to achieve a strictly increasing array, print -1. **Input:** - The first line contains a single integer n (2 le n le 10^5), representing the number of swords. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) representing the initial power levels of the swords. **Output:** - Print a single integer representing the minimum number of combinations needed to make the array strictly increasing, or -1 if it is not possible. **Example:** _Input:_ ``` 4 3 3 1 5 ``` _Output:_ ``` 2 ``` _Explanation:_ Initially, the power levels are [3, 3, 1, 5]. 1. Combine the first two swords: [6, 1, 5] 2. Combine the first two swords again: [7, 5] In the result [7, 5], the power levels are not strictly increasing, thus it\'s possible to continue combining. If we consider another exemplary case: _Input:_ ``` 5 1 2 4 4 6 ``` _Output:_ ``` 1 ``` _Explanation:_ Initially, the power levels are [1, 2, 4, 4, 6]. 1. Combine the third and fourth swords: [1, 2, 8, 6] The result [1, 2, 8, 6] isn\'t strictly increasing, so no possible combination may result in a strictly increasing array. Note that simply combining adjacent swords will not always work out, and in some cases, it\'s impossible to create a strictly increasing array regardless of the number of combinations performed.","solution":"def min_combinations_to_strictly_increasing(n, power_levels): Given the initial power levels of elemental swords, determine the minimum number of combinations required to ensure that the power levels are strictly increasing. if n == 1: return 0 combinations = 0 for i in range(1, n): if power_levels[i] <= power_levels[i-1]: return -1 return combinations"},{"question":"In an enchanted forest, there are m mystical portals that connect various points in the forest. Each portal can teleport anyone passing through it from one point in the forest to another specific point instantly, but only in one direction. The forest is also home to n wandering spirits, each starting at a particular point, and your task is to determine how many spirits can reach a specified destination point utilizing the portals. You are given: - The number of spirits n (1 ≤ n ≤ 100,000) and the number of portals m (1 ≤ m ≤ 100,000). - The starting points of the n spirits. - Each of the m portals described by its start and end points. - A specific destination point. Determine the number of spirits that can reach the given destination point using zero or more portals. The first line of the input contains three integers n, m, and d (1 ≤ n, m ≤ 100,000, 1 ≤ d ≤ 100,000) where n is the number of spirits, m is the number of portals, and d is the destination point. The second line contains n integers representing the starting points of the spirits. The next m lines each contain two integers, u and v (1 ≤ u, v ≤ 100,000), describing a portal that teleports from point u to point v. Output the number of spirits that can reach the destination point. # Example: Input: ``` 5 5 7 1 2 3 4 5 1 6 6 7 2 8 8 7 9 10 ``` Output: ``` 2 ``` Explanation: - The forest has 5 spirits starting at points 1, 2, 3, 4, and 5. - The available portals are (1 -> 6), (6 -> 7), (2 -> 8), (8 -> 7), (9 -> 10). - Spirits starting at points 1 and 2 can reach the destination point 7 by using the portals (1 -> 6 -> 7) and (2 -> 8 -> 7) respectively. No other spirits can reach point 7 using the given portals. Hence, the output is 2.","solution":"from collections import defaultdict, deque def spirits_reaching_destination(n, m, d, spirits, portals): graph = defaultdict(list) for u, v in portals: graph[v].append(u) reachable = set() queue = deque([d]) while queue: current = queue.popleft() if current not in reachable: reachable.add(current) for next_point in graph[current]: queue.append(next_point) count = sum(1 for spirit in spirits if spirit in reachable) return count # Example input and output # n, m, d = 5, 5, 7 # spirits = [1, 2, 3, 4, 5] # portals = [(1, 6), (6, 7), (2, 8), (8, 7), (9, 10)] # print(spirits_reaching_destination(n, m, d, spirits, portals)) # Output: 2"},{"question":"You are given an array of integers where each element represents the price of a stock on a given day. Your task is to determine the days on which you should buy and sell the stock to maximize your profit. However, you can make at most two transactions throughout the entire period. A transaction consists of buying on one day and selling on another later day. Write a function that takes an array of integer prices as input and returns the maximum profit that can be achieved with at most two transactions. Function Signature: ```python def maxProfit(prices: List[int]) -> int: pass ``` # Input - An array `prices` of length `n` (1 le n le 10^5), where `prices[i]` is the price of the stock on the `i-th` day. # Output - An integer representing the maximum profit that can be achieved with at most two transactions. # Example ```python assert maxProfit([3,3,5,0,0,3,1,4]) == 6 # Explanation: Buy on day 3 (price = 0) and sell on day 5 (price = 3), profit = 3-0 = 3. # Then buy on day 6 (price = 1) and sell on day 7 (price = 4), profit = 4-1 = 3. # Total profit is 3 + 3 = 6. assert maxProfit([1,2,3,4,5]) == 4 # Explanation: Buy on day 0 (price = 1) and sell on day 4 (price = 5), profit = 5-1 = 4. # Total profit is 4. assert maxProfit([7,6,4,3,1]) == 0 # Explanation: No transactions are done, i.e. max profit = 0. ``` # Note - It is allowed to perform zero transactions, which will result in a profit of zero. - You cannot engage in multiple transactions at the same time (i.e., you must sell the stock before you can buy again).","solution":"from typing import List def maxProfit(prices: List[int]) -> int: if not prices: return 0 n = len(prices) # Initialize arrays for the profit left_profits = [0] * n right_profits = [0] * n # Fill the left_profits array left_min_price = prices[0] for i in range(1, n): left_profits[i] = max(left_profits[i-1], prices[i] - left_min_price) left_min_price = min(left_min_price, prices[i]) # Fill the right_profits array right_max_price = prices[-1] for i in range(n-2, -1, -1): right_profits[i] = max(right_profits[i+1], right_max_price - prices[i]) right_max_price = max(right_max_price, prices[i]) # Calculate the maximum possible profit max_profit = 0 for i in range(n): max_profit = max(max_profit, left_profits[i] + right_profits[i]) return max_profit"},{"question":"You are given an array of n integers. Your task is to determine the maximum absolute difference between any element and its nearest smaller element to the left of it. If there is no smaller element to the left of an element, the absolute difference for that element is considered to be the element itself. The first line of the input contains an integer n (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the elements of the array. Print a single integer — the maximum absolute difference between any element and its nearest smaller element to the left. Consider the sample input: Input: 6 2 1 5 6 2 3 Output: 4 Explanation: For element 2, no smaller element to the left, difference = 2. For element 1, no smaller element to the left, difference = 1. For element 5, nearest smaller element to the left is 2, difference = 5 - 2 = 3. For element 6, nearest smaller element to the left is 5, difference = 6 - 5 = 1. For element 2, nearest smaller element to the left is 1, difference = 2 - 1 = 1. For element 3, nearest smaller element to the left is 2, difference = 3 - 2 = 1. So, the maximum absolute difference is 4.","solution":"def max_absolute_difference(arr): stack = [] max_diff = 0 for num in arr: while stack and stack[-1] >= num: stack.pop() if stack: diff = abs(num - stack[-1]) else: diff = num max_diff = max(max_diff, diff) stack.append(num) return max_diff # Example usage: # n = 6 # arr = [2, 1, 5, 6, 2, 3] # print(max_absolute_difference(arr)) # Output: 4"},{"question":"Jane is fond of puzzles, and today she came across an interesting one related to strings and palindromes. A palindrome is a string that reads the same backward as forward. Given a string, Jane wants to determine the minimum number of characters she needs to insert into the string to make it a palindrome. Given a string s of length n (1 ≤ n ≤ 1000), find the minimum number of insertions needed to make the string a palindrome. Input - The first and only line of the input contains a string s consisting of lowercase English letters. Output - Print a single integer that represents the minimum number of insertions needed to make the string a palindrome. Example 1: Input: aab Output: 1 Explanation: By inserting \'a\' at the end, we get \\"aaba\\" which is a palindrome. Example 2: Input: abcd Output: 3 Explanation: By inserting \'dcb\' at the beginning or \'bcd\' at the end, we get \\"dcbabcd\\" or \\"abcdcbad\\" respectively, both of which are palindromes. The minimum number of insertions needed is 3. Help Jane solve her puzzle by implementing a function that outputs the minimum number of insertions needed to transform any given string into a palindrome.","solution":"def min_insertions_to_make_palindrome(s): Returns the minimum number of insertions needed to make the string s a palindrome. n = len(s) # Create a table to store results of subproblems dp = [[0] * n for _ in range(n)] # Fill the table for gap in range(1, n): for l in range(n-gap): r = l + gap if s[l] == s[r]: dp[l][r] = dp[l+1][r-1] else: dp[l][r] = min(dp[l][r-1], dp[l+1][r]) + 1 # The minimum number of insertions needed to make the string a palindrome return dp[0][n-1]"},{"question":"You are given an array of positive integers representing heights of buildings arranged in a street. You are positioned at the first building and want to reach the last building. However, you can only move to the next building if it is of the same height or lower. Additionally, you are given a set of boosters that you can use to jump over up to k buildings of any heights in a single jump. Your task is to determine whether you can reach the last building from the first one using the given rules and boosters effectively. The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n-1) — the number of buildings and the maximum number of boosters you can use. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the buildings. Output \\"YES\\" if you can reach the last building from the first one using the given rules and boosters, otherwise print \\"NO\\". Example 1: Input: 5 1 6 5 4 2 1 Output: YES Example 2: Input: 5 0 3 4 5 2 1 Output: NO Example 3: Input: 6 2 4 5 2 7 6 5 Output: YES In Example 1, you can move to each building sequentially downwards. In Example 2, you cannot move from building 3 to building 4 as it’s higher and you have no boosters. In Example 3, you can jump from building 2 to building 5 (using 1 booster) and then move to building 6 sequentially.","solution":"def can_reach_last_building(n, k, heights): Determine if it\'s possible to reach the last building given the rules and number of boosters. Parameters: n (int): The number of buildings. k (int): The maximum number of boosters. heights (list): A list containing the heights of the buildings. Returns: str: \\"YES\\" if it\'s possible to reach the last building, otherwise \\"NO\\". boosters_used = 0 # Traverse through the list of building heights for i in range(n - 1): if heights[i + 1] > heights[i]: # Next building is higher, use a booster boosters_used += 1 if boosters_used > k: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers. Your task is to find an integer that appears an odd number of times in the array. If there are multiple such integers, return any one of them. If no such integer exists, return -1. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers, where each integer is between -10^9 and 10^9 inclusive. Output an integer that appears an odd number of times. If there are multiple such integers, return any one of them. If there is no such integer, return -1. Example: Input: 7 1 2 3 2 3 1 1 Output: 1 Explanation: The integer 1 appears 3 times, which is an odd number, so it is one of the possible answers. The integers 2 and 3 each appear 2 times, which is an even number, so they cannot be the answer.","solution":"def find_odd_occurrence(arr): Finds an integer that appears an odd number of times in the array. Parameters: arr (list): List of integers. Returns: int: An integer that appears an odd number of times, or -1 if there is none. count_map = {} # Count the occurrences of each element for num in arr: if num in count_map: count_map[num] += 1 else: count_map[num] = 1 # Find an element that appears an odd number of times for num, count in count_map.items(): if count % 2 != 0: return num return -1 def find_odd_occurrence_from_input(n, elements): Wrapper to facilitate input processing as per the given problem statement Parameters: n (int): Number of elements in the array. elements (list): The array of integers. Returns: int: An integer that appears an odd number of times, or -1 if there is none. return find_odd_occurrence(elements)"},{"question":"Pillars in the desert have numbers carved on them. A researcher is tasked with analyzing these numbers to determine the symmetry properties of the sequence. Specifically, the researcher wants to know the longest subsequence where the subsequence reads the same forward and backward (a palindrome). You are given an array of integers representing the numbers on the pillars. Your task is to calculate the length of the longest palindromic subsequence in the array. The first line contains an integer n (1 leq n leq 3000) representing the number of pillars. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000) — the numbers carved on the pillars. Output one integer — the length of the longest palindromic subsequence. **Example** Input: ``` 7 1 2 3 4 3 2 1 ``` Output: ``` 7 ``` In the provided example, the complete sequence is already a palindrome, hence the longest palindromic subsequence has the length 7.","solution":"def longest_palindromic_subsequence(arr): n = len(arr) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if arr[i] == arr[j] and cl == 2: dp[i][j] = 2 elif arr[i] == arr[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1]"},{"question":"You are given a line of text. A palindrome is a string that reads the same backward as forward. Your task is to determine the minimum number of characters that need to be inserted anywhere in the text to make it a palindrome. For example, the string \\"race\\" can be turned into a palindrome by inserting 3 characters to make \\"ecarace\\" or \\"racecar\\". The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. For each of the next t lines, a string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters is given. For each test case, print the minimum number of characters needed to turn the string into a palindrome. **Input:** ``` 2 race google ``` **Output:** ``` 3 2 ``` **Explanation:** For the first test case: - \\"race\\" can be turned into \\"ecarace\\" or \\"racecar\\" by adding 3 characters. For the second test case: - \\"google\\" can be turned into \\"elgoogle\\" or \\"googlelog\\" by adding 2 characters.","solution":"def min_insertions_to_palindrome(s): Given a string s, returns the minimum number of characters that need to be inserted to make it a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for gap in range(1, n): i = 0 for j in range(gap, n): if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] else: dp[i][j] = min(dp[i][j-1], dp[i+1][j]) + 1 i += 1 return dp[0][-1] def min_insertions_for_multiple_cases(test_cases): return [min_insertions_to_palindrome(s) for s in test_cases]"},{"question":"Several students from the programming club decided to hold a contest. They agreed on a rule that each participant should create a programming problem to submit. They marked each problem with a certain complexity level represented by a positive integer. Yet, they want the contest to be interesting and challenging, so they decided that the problem with the highest complexity should be handled first. However, not all problems can be solved in a single round - there is a system with multiple rounds where in each round, one problem can be tackled. The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ n) — the number of problems and the number of rounds. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the complexities of the problems. Determine the maximum complexity of problems dealt with in each of the m rounds. Return these complexities in a non-increasing order of complexity. For example, if there are 5 problems with complexities [7, 4, 3, 6, 5] and there are 3 rounds, the problems with the highest complexities (7, 6, and 5) should be handled first. # Input The first line contains the integers n and m. The second line contains n integers representing the complexities of the problems. # Output Output a single line containing m integers: the maximum complexities of the problems handled in each of the m rounds in non-increasing order. Example # Input ``` 5 3 7 4 3 6 5 ``` # Output ``` 7 6 5 ```","solution":"def max_complexities(n, m, complexities): Given the number of problems n, the number of rounds m, and a list of complexities, returns the maximum complexities of the problems handled in each of the m rounds in non-increasing order. complexities.sort(reverse=True) return complexities[:m]"},{"question":"Sarah is a biologist studying the growth patterns of a certain type of bacteria. The growth pattern of the bacteria follows a distinct rule: on each successive day, the bacteria population either doubles or remains the same. Given an initial bacteria population and a target population, Sarah wants to determine the minimum number of days required for the bacteria population to reach exactly the target population. Write a program to help Sarah compute the minimum number of days needed for the bacteria population to grow from the initial population to the target population using the given rules. The first line contains two integers, the initial population and the target population (1 ≤ initial population < target population ≤ 10^9). Print one integer, the minimum number of days required for the bacteria population to reach exactly the target population. For example: Input: ``` 3 12 ``` Output: ``` 2 ``` Explanation: - On the first day, the population can double from 3 to 6. - On the second day, the population can double again from 6 to 12. - Therefore, it takes 2 days to grow the population from 3 to 12.","solution":"def min_days_to_target(initial_population, target_population): days = 0 while initial_population < target_population: if target_population % 2 == 0 and target_population // 2 >= initial_population: target_population //= 2 else: target_population -= 1 days += 1 return days"},{"question":"Ravi loves to play word games with his little sister Lili. One day, he decided to challenge her with a special type of crossword puzzle. Ravi gives Lili a word and a list of characters. He then asks Lili to count how many times she can form the given word using only the characters from the provided list. Lili can use each character in the list at most once for forming the word. However, the characters in the word and the list are case-insensitive, but they can appear in any order. For example, both \\"a\\" and \\"A\\" are treated as the same character. Given the target word and the list of characters, can you help Lili determine how many times she can fully form the exact word? # Input: - The first line contains the integer t (1 ≤ t ≤ 100), the number of test cases. - The following 2 * t lines describe the test cases. - The first line of each test case contains the string target (1 ≤ |target| ≤ 100), the word that needs to be formed. - The second line contains the string characters (1 ≤ |characters| ≤ 1000), the list of characters available to form the word. # Output: - For each test case, print a single integer, the maximum number of times the word can be formed using the given characters. # Example: Input ``` 2 apple aappplle Banana bnaanNaAabnnAa ``` Output ``` 1 2 ``` # Explanation - In the first test case, the word \\"apple\\" can be formed exactly once from the characters \\"aappplle\\". - In the second test case, the word \\"Banana\\" can be formed twice from the characters \\"bnaanNaAabnnAa\\". Note: The problem guarantees case-insensitivity, meaning \\"A\\" and \\"a\\" are considered the same character for the purpose of matching.","solution":"def count_word_formations(target, characters): from collections import Counter # Make both the target and characters lowercase target = target.lower() characters = characters.lower() # Count the frequency of each character in target and in the characters list target_count = Counter(target) characters_count = Counter(characters) # Calculate the maximum number of times the word can be formed min_count = float(\'inf\') for char in target_count: if char in characters_count: min_count = min(min_count, characters_count[char] // target_count[char]) else: return 0 return min_count def word_game(t, test_cases): results = [] for i in range(t): target = test_cases[i * 2] characters = test_cases[i * 2 + 1] result = count_word_formations(target, characters) results.append(result) return results"},{"question":"You are given a grid of size n × m. Each cell of the grid can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). You are also given the coordinates of a starting cell (sx, sy) and a destination cell (dx, dy). You need to determine if there is a path from the starting cell to the destination cell that does not pass through any obstacles and moves only in the four cardinal directions (left, right, up, down). The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains a string of length m, representing the grid, where \'.\' denotes an empty cell and \'#\' denotes an obstacle. The last line contains four space-separated integers sx, sy, dx, dy (1 ≤ sx, sy, dx, dy ≤ n, m) — the starting and destination cell coordinates. The coordinates are 1-based indices. Output \\"YES\\" if there is a path from the starting cell to the destination cell, otherwise output \\"NO\\". # Example **Input:** ``` 4 4 .... .. .... .... 1 1 4 4 ``` **Output:** ``` YES ``` **Input:** ``` 4 4 .... .. .... 1 1 4 4 ``` **Output:** ``` NO ```","solution":"from collections import deque def is_path_exists(n, m, grid, sx, sy, dx, dy): Determines if there is a path from (sx, sy) to (dx, dy) in the grid. Args: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of str): Representation of the grid. sx (int): Starting row (1-based index). sy (int): Starting column (1-based index). dx (int): Destination row (1-based index). dy (int): Destination column (1-based index). Returns: str: \'YES\' if a path exists, \'NO\' otherwise. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] sx, sy, dx, dy = sx-1, sy-1, dx-1, dy-1 queue = deque([(sx, sy)]) visited = set((sx, sy)) while queue: x, y = queue.popleft() if (x, y) == (dx, dy): return \\"YES\\" for dxn, dyn in directions: nx, ny = x + dxn, y + dyn if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given a grid (matrix) of size n times m representing a park. Some cells in the park contain trees, while others are empty. A robot starts at the top-left corner and wants to reach the bottom-right corner of the park. The robot can only move down or right, and it cannot pass through cells containing trees. You need to determine the number of unique paths the robot can take to reach its destination. Input: - The first line contains two integers n and m (1 leq n, m leq 100) representing the number of rows and columns in the grid, respectively. - Each of the following n lines contains m integers, either 0 or 1. A cell containing 0 represents an empty space where the robot can move, and 1 represents a tree where the robot cannot move. Output: - Output a single integer representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. Example: Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` Explanation: The robot can take the following paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths(n, m, grid): if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"Given an array of integers, you are to determine whether it is possible to rearrange the array to form a strictly alternating sequence of even and odd numbers. A strictly alternating sequence is one where: - An even number is followed by an odd number, or - An odd number is followed by an even number If multiple rearrangements are possible, any valid one will suffice. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case is described with: - An integer n (1 ≤ n ≤ 100) — the size of the array. - A sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) representing the elements of the array. Output For each test case, if a valid rearrangement is possible, print \\"YES\\" along with the rearranged sequence. Otherwise, print \\"NO\\". Example Input: 3 5 1 2 3 4 5 4 2 4 6 8 3 1 3 2 Output: YES 1 2 3 4 5 NO YES 2 1 3 Explanation - In the first test case, the given sequence can be rearranged to form an alternating sequence with even and odd numbers, so the output is \\"YES\\" followed by the sequence. - In the second test case, all numbers are even, so it is impossible to form an alternating sequence. The output is \\"NO.\\" - In the third test case, the sequence can be rearranged as [2, 1, 3].","solution":"def can_form_alternating_sequence(arr): evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] if abs(len(evens) - len(odds)) > 1: return False, [] result = [] if len(evens) > len(odds): while evens or odds: if evens: result.append(evens.pop()) if odds: result.append(odds.pop()) else: while odds or evens: if odds: result.append(odds.pop()) if evens: result.append(evens.pop()) return True, result def rearrange_arrays(t, cases): results = [] for i in range(t): n, arr = cases[i] possible, sequence = can_form_alternating_sequence(arr) if possible: results.append(f\\"YESn{\' \'.join(map(str, sequence))}\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an ancient library with old books. Due to the age of the books, some pages have been torn apart, leading to missing paragraphs or full pages. Each book is represented as a sequence of paragraphs, and each paragraph contains unique words. You have received a specific sequence of words that belongs to some paragraph in one of these books. Your task is to find the book and the paragraph that contains the exact sequence of words in the correct order. The first line of input contains an integer k (1 le k le 100) — the number of books in the ancient library. The next lines contain the description of the books: - Each book starts with an integer p_j (1 le p_j le 100) — the number of paragraphs in the j-th book. - For the next p_j lines, each paragraph is given as a sequence of words separated by spaces. Each word consists of lowercase English letters and has a length between 1 and 10 characters. After the books\' descriptions, there is a line containing an integer m (1 le m le 50) — the number of words in the sequence you need to find. Finally, there is a line with m space-separated words representing the sequence to search for within the books. Output the 1-based index of the book and 1-based index of the paragraph that contains the exact sequence of words, separated by a space. If no such paragraph exists, print \\"Sequence not found\\". # Example **Input:** ``` 2 3 the quick brown fox jumps over the lazy dog in a galaxy far away 2 a long time ago on planet earth 4 over the lazy dog ``` **Output:** ``` 1 2 ```","solution":"def find_paragraph_with_sequence(k, books, m, search_sequence): search_sequence = \\" \\".join(search_sequence) for book_index in range(k): paragraphs = books[book_index] for paragraph_index in range(len(paragraphs)): if search_sequence in paragraphs[paragraph_index]: return book_index + 1, paragraph_index + 1 return \\"Sequence not found\\" # Transformation of input for testing purposes def transform_input(input_text): input_lines = input_text.strip().split(\'n\') k = int(input_lines[0]) books = [] current_line = 1 for _ in range(k): p_j = int(input_lines[current_line]) paragraphs = input_lines[current_line + 1: current_line + 1 + p_j] books.append(paragraphs) current_line += p_j + 1 m = int(input_lines[current_line]) search_sequence = input_lines[current_line + 1].split() return k, books, m, search_sequence # Combined function to handle input and output (for isolation in test cases) def find_paragraph(input_text): k, books, m, search_sequence = transform_input(input_text) return find_paragraph_with_sequence(k, books, m, search_sequence)"},{"question":"Given an array ( a ) consisting of ( n ) integers, and an integer ( k ). Your task is to find the maximum sum of ( k ) consecutive elements in the array. **Input** - The first line contains two integers ( n ) and ( k ) (1 ≤ ( k ) ≤ ( n ) ≤ ( 10^5 )) — the size of the array ( a ) and the number of consecutive elements you have to sum. - The second line contains ( n ) integers ( a_1, a_2, ..., a_n ) (−10^9 ≤ ( a_i ) ≤ 10^9). **Output** - Print a single integer — the maximum sum of ( k ) consecutive elements in the array. **Example** **Input:** ``` 5 2 1 3 -2 5 -1 ``` **Output:** ``` 8 ``` **Explanation:** From the array [1, 3, -2, 5, -1]: - The sum of the first 2 elements is 1 + 3 = 4. - The sum of the next 2 elements is 3 + (-2) = 1. - The sum of the next 2 elements is -2 + 5 = 3. - The sum of the next 2 elements is 5 + (-1) = 4. The maximum sum of 2 consecutive elements is 4.","solution":"def max_sum_of_k_consecutive_elements(n, k, array): Returns the maximum sum of k consecutive elements in the array. :param n: int: Size of the array :param k: int: Number of consecutive elements to sum :param array: list[int]: The array of integers :return: int: The maximum sum of k consecutive elements # Calculate the initial sum of the first k elements current_sum = sum(array[:k]) max_sum = current_sum # Slide the window across the array and update the sums for i in range(k, n): current_sum = current_sum + array[i] - array[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Alice is playing a board game that involves moving a token on a grid. The grid is an `n x n` matrix where `n` is given. The token starts at the top-left corner of the grid (position (1, 1)) and should be moved to the bottom-right corner (position (n, n)). Alice can only move the token to the right or down at any step. However, some cells in the grid are blocked and the token cannot move through them. The goal of the game is to find the number of unique paths that the token can take to reach the bottom-right corner. You are given the grid with blocked cells in an `n x n` matrix format. Each cell contains either `0` (which means the cell is blocked) or `1` (which means the cell is free). Find the total number of unique paths from the top-left to the bottom-right corner while avoiding the blocked cells. The first line of the input contains a single integer `n` (2 le n le 500), representing the size of the grid. The next `n` lines each contain `n` integers (`0` or `1`), representing the grid. Print a single integer, the number of unique paths from the top-left to the bottom-right corner. If there is no such path, print `0`. # Example ``` Input: 3 1 1 1 1 0 1 1 1 1 Output: 2 Input: 3 1 0 1 1 0 1 1 1 1 Output: 1 Input: 3 1 0 1 0 0 1 1 1 1 Output: 0 ``` # Note In the first example, there are two ways to reach the bottom-right corner: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right In the second example, there is only one way to reach the bottom-right corner: - Down -> Down -> Right -> Right In the third example, there is no way to reach the bottom-right corner due to the blocked cells.","solution":"def unique_paths_with_obstacles(n, grid): Calculate the number of unique paths from the top-left to bottom-right in a grid with obstacles. :param n: Integer, size of the grid (n x n) :param grid: List of List of integers, representing the grid with 1s as free cells and 0s as blocked cells :return: Integer, the number of unique paths from (1,1) to (n,n) if grid[0][0] == 0 or grid[n-1][n-1] == 0: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 1: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1]"},{"question":"A popular social media platform is organizing a hackathon and decided to introduce a fun and challenging problem for the participants. The challenge is based on constructing the longest palindrome substring from a given string. A palindrome is a sequence of characters that reads the same forward and backward. For instance, \\"racecar\\" and \\"madam\\" are palindromes. Given a string `s` of lowercase Latin letters, your task is to find the longest palindrome substring within `s`. If there are multiple substrings of the same maximum length, return the one which appears first. # Input The first line contains an integer `n` (1 ≤ n ≤ 1000), which is the length of the string `s`. The second line contains the string `s` of length `n`. # Output Output a single string, the longest palindrome substring in `s`. # Example **Input:** ``` 7 babad ``` **Output:** ``` bab ``` **Explanation:** Although \\"dad\\" is also a palindrome, \\"bab\\" appears first. **Input:** ``` 4 cbbd ``` **Output:** ``` bb ``` **Explanation:** The longest palindrome substring in this case is \\"bb\\". # Note Write a function to efficiently solve for the longest palindromic substring, ensuring that the solution adheres to the constraints provided. Consider optimizing your approach to handle the upper limits effectively.","solution":"def longest_palindromic_substring(s): This function returns the longest palindromic substring in the given string `s`. if len(s) == 0: return \\"\\" n = len(s) start, maxlen = 0, 1 # starting index and length of longest palindrome for i in range(n): for j in range(i, n): substr = s[i:j+1] if substr == substr[::-1]: # check if the substring is a palindrome if len(substr) > maxlen: start, maxlen = i, len(substr) return s[start:start + maxlen]"},{"question":"David is a professional marble collector and wants to showcase a selection of his rarest marbles by arranging them in a specific order. He has ( n ) marbles where each marble has a unique identifier number. To ensure uniqueness, no two marbles have the same identifier. One day, while cleaning his collection, he noticed that his marbles can be shuffled to form a smooth sequence. David defines a sequence as smooth if for every marble in the sequence, the difference between the identifier number of that marble and the marble that immediately follows it is exactly 1. Given the current sequence of marble identifiers, David wants to determine if it\'s possible to rearrange his marbles into a smooth sequence. If it\'s possible, return \\"Yes\\", otherwise return \\"No\\". # Input - The first line of input contains a single integer ( n ) (2 ≤ ( n ) ≤ ( 10^5 )), representing the number of marbles. - The second line contains ( n ) space-separated integers ( a_1, a_2, ldots, a_n ) (1 ≤ ( a_i ) ≤ ( 10^9 )), representing the identifiers of the marbles. # Output - Output a single word \\"Yes\\" if the marbles can be rearranged into a smooth sequence, otherwise print \\"No\\". # Examples Example 1: **Input:** ``` 5 3 4 1 2 5 ``` **Output:** ``` Yes ``` **Explanation:** The sequence can be arranged as 1, 2, 3, 4, 5, which is a smooth sequence. Example 2: **Input:** ``` 4 10 12 11 15 ``` **Output:** ``` No ``` **Explanation:** There is no way to rearrange the marbles such that every adjacent pair has a difference of exactly 1. **Note:** - Ensure to consider marble identifiers that are unique and large. - Efficient handling of large ( n ) is crucial for solving this problem.","solution":"def can_form_smooth_sequence(n, marbles): Determines if the marbles can be rearranged into a smooth sequence. Parameters: n (int): The number of marbles marbles (list of int): The list of marble identifiers Returns: string: \\"Yes\\" if the marbles can form a smooth sequence, otherwise \\"No\\" marbles.sort() for i in range(1, n): if marbles[i] - marbles[i - 1] != 1: return \\"No\\" return \\"Yes\\""},{"question":"Sherzod has recently started working at a tech company where he needs to schedule jobs on a cloud server. Each job can either run normally or in high priority mode. Running a job in high priority mode allows it to complete in half the time, but it takes twice the resources. Sherzod can switch between modes at any point during the job\'s execution. The server has `n` jobs to be scheduled, each characterized by three integers: `bi` (time required to complete the job in normal mode), `ci` (resource consumption in normal mode), and `di` (priority level). Sherzod can allocate a maximum of `R` resources per unit time from the cloud server. However, he must also ensure that jobs with a higher priority level are given precedence if there are resource constraints at any time unit. Sherzod\'s goal is to determine the least amount of time in which all jobs can be completed, respecting the given resource constraint and priority levels. The program should be designed as follows: The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of jobs. Each of the next `n` lines contains three integers `bi`, `ci`, and `di` (1 ≤ bi, ci, di ≤ 10^9) — the time required to run the i-th job in normal mode, the resource consumption in normal mode, and the priority level of the i-th job. The last line contains an integer `R` (1 ≤ R ≤ 10^9) — the maximum resources available per unit time. Output a single integer — the minimum amount of time required to complete all jobs while respecting the constraints. **Example:** Input: ``` 3 10 5 2 20 3 1 15 4 3 10 ``` Output: ``` 35 ``` In this example, Sherzod can run the jobs with consideration for their priority and the resource constraints, efficiently allocating resources to complete the jobs in the minimum amount of time.","solution":"def min_completion_time(n, jobs, R): # Sort jobs based on priority level (higher priority first) jobs.sort(key=lambda x: x[2], reverse=True) total_time = 0 for job in jobs: bi, ci = job[0], job[1] # Determine the number of time units required to complete the job in normal mode normal_time = bi high_priority_time = bi // 2 remaining_time = bi if bi <= (R // ci) else (R // ci) * (bi // ci) if remaining_time < high_priority_time: total_time += normal_time else: total_time += high_priority_time return total_time"},{"question":"Iahub loves to plant flowers in his garden. He has a rectangular garden of size m x n which is divided into unit squares. Each square can either have a flower or be empty. The garden is represented as a 2D grid where 0 represents an empty square and 1 represents a square with a flower. Iahub wants to maximize the beauty of his garden. The beauty of a garden is defined as the number of flowers that can see the sunrise. A flower can see the sunrise if there is no other flower to the left of it in the same row. Write a program to find the maximum beauty of Iahub\'s garden. The first line contains two integers m and n (1 ≤ m, n ≤ 100000), the number of rows and columns in the garden respectively. Each of the next m lines contains n integers (0 or 1) representing the garden\'s grid. Print a single integer, the maximum beauty of the garden. In the first sample, the flowers in positions (1, 1) and (2, 1) can see the sunrise, so the maximum beauty is 2.","solution":"def max_beauty(m, n, garden): Calculate the maximum beauty of the garden. The beauty of a garden is defined as the number of flowers that can see the sunrise. A flower can see the sunrise if there is no other flower to the left of it in the same row. Parameters: m (int): number of rows (1 ≤ m ≤ 100000) n (int): number of columns (1 ≤ n ≤ 100000) garden (list of list of int): 2D grid representing the garden Returns: int: maximum beauty of the garden max_beauty_count = 0 for row in garden: max_beauty_count += row[0] return max_beauty_count"},{"question":"Alice is a linguistics researcher running an experiment on word sequences. She has n words and wants to test the effect of different word orders. A key part of her experiment is ensuring that no repeated sequences occur. More specifically, she wants to count how many unique sequences of the words can be made. Two sequences are distinct if the order of words differs in at least one position. Given the number of words n, determine how many unique permutations of these words exist. The input consists of a single integer n (2 ≤ n ≤ 12) — the number of words. Output a single integer — the number of unique sequences that can be formed with these n words. **Example:** Input: 3 Output: 6 Explanation: With 3 words, the sequences that can be formed are: 1. word1, word2, word3 2. word1, word3, word2 3. word2, word1, word3 4. word2, word3, word1 5. word3, word1, word2 6. word3, word2, word1 Hence, there are 6 unique sequences possible.","solution":"import math def count_unique_sequences(n): Returns the number of unique permutations of n words. return math.factorial(n)"},{"question":"An archaeologist named Dina discovered an ancient grid-like structure during an excavation. The structure is represented as an n x m grid filled with various artifacts. Dina wants to collect artifacts by moving from the top-left corner of the grid (position (1, 1)) to the bottom-right corner (position (n, m)). She can only move right or down at each step. Each cell in the grid contains a certain number of artifacts. Given the grid, determine the maximum number of artifacts Dina can collect on her path from the top-left to the bottom-right corner. The first line of input contains two integers, n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. The next n lines contain m integers each, where the j-th integer in the i-th line represents the number of artifacts in cell (i, j) (0 ≤ number of artifacts in each cell ≤ 100). Output a single integer, the maximum number of artifacts Dina can collect. Sample Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Sample Output: ``` 12 ``` Explanation: The path to collect the maximum number of artifacts is (1, 1) → (1, 2) → (2, 2) → (3, 2) → (3, 3), yielding 1 + 3 + 5 + 2 + 1 = 12 artifacts. Note: You may assume that there will always be at least one valid path from the top-left to the bottom-right corner of the grid.","solution":"def max_artifacts(grid, n, m): # Create a 2D dp array to store the maximum artifacts collected up to each cell dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the dp array for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[n-1][m-1] # Example usage # print(max_artifacts([[1, 3, 1], [1, 5, 1], [4, 2, 1]], 3, 3)) # Output: 12"},{"question":"Simon is a botanist who enjoys studying the growth patterns of different plants. In particular, he is fascinated by a type of plant that grows in a peculiar pattern. Each plant grows in height by a fixed constant amount every day, but if the height of the plant reaches a particular threshold value, it doesn’t grow any further until Simon waters it again. The growth pattern can be described more formally: the plant grows by `g` units in height each day, and stops growing if its height reaches or exceeds `h` units. Simon needs to water the plant to reset its growth threshold, and the plant resumes growing from its current height the next day. Simon wants to determine the height of the plant after `d` days, given `g`, `h`, and the initial height of the plant `init`. Write a function `plant_growth(g, h, d, init)` that calculates and returns the height of the plant after `d` days. # Input - `g` (1 ≤ g ≤ 100): The growth units per day. - `h` (1 ≤ h ≤ 10000): The maximum height threshold. - `d` (1 ≤ d ≤ 100000): The number of days. - `init` (0 ≤ init < h): The initial height of the plant. # Output - Return the height of the plant after `d` days. # Example ```python print(plant_growth(10, 100, 5, 0)) # Output: 50 print(plant_growth(20, 50, 4, 10)) # Output: 50 print(plant_growth(5, 12, 4, 7)) # Output: 12 ``` # Explanation 1. In the first example, the plant grows by 10 units per day. In 5 days, it reaches a height of 50 units. 2. In the second example, the plant grows by 20 units per day but stops at the maximum threshold of 50 units by the 2nd day itself. 3. In the third example, the plant starts at 7 units. After the first day, it reaches 12 units and stops growing further.","solution":"def plant_growth(g, h, d, init): Calculates the height of the plant after `d` days given daily growth `g`, maximum height threshold `h`, and initial height `init`. height = init for _ in range(d): if height + g >= h: height = h else: height += g return height"},{"question":"You are given an array of integers representing the heights of students in a classroom. The teacher wants to divide the students into groups such that the height difference between the tallest and shortest student in each group is minimized. Each group must have exactly k students, and all students must be included in a group. Given the total number of students n and the value k, determine the minimum possible maximum height difference that can be achieved in any group. The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of students and the number of students in each group, respectively. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the students. Print one integer, the minimum possible maximum height difference in any group. Example: Input: 5 2 1 5 9 14 20 Output: 4 Explanation: One possible way to form the groups is {1, 5}, {9, 14}, {20}. The height differences are 4, 5, and 0. The maximum difference is 5. Another optimal way to form the groups is {1, 5}, {14, 20}, {9}. The height differences are 4, 6, and 0. The maximum difference is 6. But since we want to minimize the maximum height difference, the first grouping gives us the desired answer of 4.","solution":"def minimum_height_difference(n, k, heights): heights.sort() # Sort the heights to make grouping easier min_diff = float(\'inf\') # Initialize min_diff to a large number # Iterate through the list, considering each window of size k for i in range(n - k + 1): min_diff = min(min_diff, heights[i + k - 1] - heights[i]) return min_diff # Example Usage: # n, k = 5, 2 # heights = [1, 5, 9, 14, 20] # print(minimum_height_difference(n, k, heights)) # Output should be 4"},{"question":"Mary is organizing a gaming tournament. The tournament is conducted in a bracket format where each player plays against another player in a one-on-one match, and the winner advances to the next round. Each match is played in a best-of-5 series, and the player who first wins 3 games wins the match and advances. Mary has the initial list of players along with the ratings of each player. A player\'s rating indicates their skill level, and in any game, the player with the higher rating will always win. To prepare for the tournament, Mary needs to determine the expected winner of the whole tournament based on the ratings. You are given an integer n (1 ≤ n ≤ 105) indicating the number of players, followed by n integers r1, r2, ..., rn (1 ≤ ri ≤ 109) representing the ratings of the players. Assume the ratings are given in increasing order. Write a function or program that determines the expected winner of the tournament. The output should be the rating of the player who is expected to win the tournament. **Input:** - The first line contains an integer n (1 ≤ n ≤ 105). - The second line contains n integers r1, r2, ..., rn (1 ≤ ri ≤ 109). **Output:** - Print the single integer representing the rating of the player who is expected to win the tournament. **Example:** ``` Input: 4 100 200 300 400 Output: 400 ``` **Explanation:** In this example, since the players are matched in order of their ratings and higher rating guarantees a win, the highest-rated player will always win through all the rounds of the tournament.","solution":"def determine_winner(n, ratings): This function takes in the number of players `n` and a list of their ratings `ratings`, and returns the expected winner of the tournament based on their ratings. # The player with the highest rating will always win return ratings[-1]"},{"question":"In a forest, there are n trees in a row. Each tree has a certain number of apples. A squirrel wants to gather as many apples as possible, but it can only gather apples from a consecutive sequence of trees. Additionally, the squirrel is only allowed to move a maximum distance of k trees to the right from any starting tree. In other words, if the squirrel starts gathering apples from tree i, it can only gather apples up to tree min(i + k, n - 1). Given the number of apples on each tree, determine the maximum number of apples the squirrel can gather. The first line contains two integers n (2 leq n leq 10^5) — the number of trees in the forest, and k (1 leq k leq n) — the maximum distance the squirrel can move to the right from any tree. The second line contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9) representing the number of apples on each tree. Print a single integer — the maximum number of apples the squirrel can gather. Example: Input: 5 2 1 2 3 4 5 Output: 9 In this example, the squirrel can start from tree 3 (index 2) and gather apples from tree 3, 4, and 5 resulting in a total of 9 apples.","solution":"def max_apples(n, k, apples): Calculate the maximum number of apples the squirrel can gather. Params: n (int): Number of trees. k (int): Maximum distance the squirrel can move to the right from any starting tree. apples (list of int): Number of apples on each tree. Returns: int: Maximum number of apples the squirrel can gather. max_apples_gathered = 0 current_sum = sum(apples[:k+1]) max_apples_gathered = current_sum for i in range(1, n - k): current_sum = current_sum - apples[i-1] + apples[i + k] if current_sum > max_apples_gathered: max_apples_gathered = current_sum return max_apples_gathered"},{"question":"Alex likes playing with strings. Recently, he came across a problem that involves finding the longest palindromic substring within a given string. A palindrome is a string that reads the same forward and backward. Given a string s, determine the longest palindromic substring in s. If there are multiple longest palindromic substrings, return the one that appears first. The input string s consists of lowercase English letters and has a length between 1 and 1000. Write a function `longest_palindromic_substring(s)` to solve this problem. # Input - A single string `s` of length between 1 and 1000, inclusive. # Output - A single string representing the longest palindromic substring in `s`. # Example ```python longest_palindromic_substring(\\"babad\\") # Returns \\"bab\\" (or \\"aba\\") longest_palindromic_substring(\\"cbbd\\") # Returns \\"bb\\" ```","solution":"def longest_palindromic_substring(s): # Helper function to expand around center def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] if s is None or len(s) == 0: return \\"\\" longest = \\"\\" for i in range(len(s)): # Odd length palindrome odd_palindrome = expand_around_center(s, i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Even length palindrome even_palindrome = expand_around_center(s, i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"Akbar is fascinated by strings these days and came up with an interesting problem. He called the string \\"balanced\\" if it contains the same number of characters \'a\' and \'b\'. Now he wants to know the minimum number of characters he needs to delete from a given string to make the string \\"balanced\\". Given a string s consisting only of characters \'a\' and \'b\', determine the minimum number of deletions required to make the string balanced. The first line contains a single string s (1 ≤ |s| ≤ 100000) — the string that needs to be processed. Print a single integer — the minimum number of deletions required to make the string balanced. If the string is already balanced, print 0. Example 1: Input: aaaabb Output: 2 Example 2: Input: ababab Output: 0","solution":"def min_deletions_to_balance(s): Determines the minimum number of deletions required to make the string balanced. A string is considered balanced if it contains the same number of characters \'a\' and \'b\'. count_a = s.count(\'a\') count_b = s.count(\'b\') return abs(count_a - count_b)"},{"question":"Lucas loves studying algorithms and data structures. Recently, he came across the concept of binary search trees (BST). Lucas is fascinated by this structure and decided to practice his skills by solving the following problem: Given a binary search tree (BST) with unique integer values and two integers ( v_1 ) and ( v_2 ), find the lowest common ancestor (LCA) of the two nodes with values ( v_1 ) and ( v_2 ). The LCA is defined as the lowest node in the BST that has both ( v_1 ) and ( v_2 ) as descendants (where we allow a node to be a descendant of itself). You are to write a function that, given the root of the BST and the two values ( v_1 ) and ( v_2 ), returns the value of their lowest common ancestor. # Function Signature ```python def find_lca(root: TreeNode, v1: int, v2: int) -> int: ``` # Input Format - The function receives a BST root, which is the root of the BST (a TreeNode object). - The function receives two integers ( v_1 ) and ( v_2 ), representing the values of the two nodes. # Output Format - Return the integer value of the LCA of the nodes with values ( v_1 ) and ( v_2 ). # Constraints - Each node in the BST has a unique value. - Nodes and values are guaranteed to exist in the BST. # Example Given the BST: ``` 6 / 2 8 / / 0 4 7 9 / 3 5 ``` And the values ( v_1 = 2 ) and ( v_2 = 8 ), the output should be 6, because 6 is the lowest common ancestor of nodes 2 and 8. For ( v_1 = 2 ) and ( v_2 = 4 ), the output should be 2, because 2 is the lowest common ancestor of nodes 2 and 4. # Notes - The BST is defined by the TreeNode class, which has the following structure: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` Implement the given function to solve the problem.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def find_lca(root: TreeNode, v1: int, v2: int) -> int: Finds the lowest common ancestor of nodes with values v1 and v2 in a BST. current = root while current: # If both v1 and v2 are smaller than current node\'s value, LCA is in left subtree if v1 < current.val and v2 < current.val: current = current.left # If both v1 and v2 are greater than current node\'s value, LCA is in right subtree elif v1 > current.val and v2 > current.val: current = current.right else: # We have found the split point, i.e., the LCA node return current.val return None"},{"question":"A courier company wants to optimize the route of their delivery trucks. They have a grid map of a city represented by an n x m matrix where each cell denotes a certain amount of fuel required to traverse through it. The company has multiple delivery trucks that start from the top-left corner of the grid (cell (0, 0)) and need to reach the bottom-right corner (cell (n-1, m-1)). Each delivery truck can only move either down or right at any point in time. You are to write a program that helps the company determine the minimum fuel cost required for a truck to travel from the top-left corner to the bottom-right corner of the grid. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the dimensions of the grid. Each of the next n lines contains m integers, where each integer f_ij (0 ≤ f_ij ≤ 1000) represents the fuel cost of the cell (i, j). Output a single integer - the minimum fuel cost required to travel from the top-left corner to the bottom-right corner of the grid. Example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: The minimum fuel cost path is 1 -> 3 -> 1 -> 1 -> 1, which types out to a total fuel cost of 7.","solution":"def min_fuel_cost(n, m, grid): # Create a 2D list to store the minimum fuel cost to reach each cell dp = [[0 for _ in range(m)] for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (since only one way to reach each cell, by moving right) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (since only one way to reach each cell, by moving down) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner of the dp table contains the result return dp[n-1][m-1] # Example usage # n, m = 3, 3 # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1], # ] # print(min_fuel_cost(n, m, grid)) # Output: 7"},{"question":"You are given a binary tree with nodes containing integers. The tree is unbalanced, meaning it can be deeper on one side. Your task is to determine the maximum depth of the tree. The depth of a binary tree is the number of nodes along the longest path from the root node down to the farthest leaf node. Write a function `maxDepth` that takes the root of the binary tree as its input and returns the maximum depth of the tree. Example: ``` Input: root = [3,9,20,null,null,15,7] Output: 3 Explanation: The maximum depth is 3, as the path 3 -> 20 -> 7 is the longest. Input: root = [1,null,2,3,null,null,4,null,5] Output: 4 Explanation: The maximum depth is 4, as the path 1 -> 2 -> 4 -> 5 is the longest. Input: root = [] Output: 0 Explanation: Since there is no tree, the depth is 0. ``` Constraints: - The number of nodes in the tree is in the range [0, 10^4]. - -100 <= Node value <= 100 In the format for trees, the value of each node is represented, and \'null\' signifies that no node exists in that position. Note: You may use any programming language that you are comfortable with to solve this problem. The function should accept a binary tree and return the maximum depth of the tree. Consider recursive and iterative solutions.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root): Returns the maximum depth of a binary tree. if root is None: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Ada loves palindromes. Given a string s of length n, Ada wants to generate all unique palindromic substrings of s. Your task is to help Ada and count the number of unique palindromic substrings in the given string s. A palindromic substring is a substring that reads the same forward and backward. Substrings that are considered the same if their contents are identical should be counted only once, regardless of their positions in the string. Input: The input line contains a string s of length n (1 ≤ n ≤ 2000) consisting only of lowercase Latin letters. Output: Output a single integer: the number of unique palindromic substrings in string s. Example: Input: ababa Output: 5 Explanation: The unique palindromic substrings in the string \\"ababa\\" are: \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\". Hence, there are 5 unique palindromic substrings.","solution":"def count_unique_palindromic_substrings(s): Returns the count of unique palindromic substrings in the given string s. def is_palindrome(sub): return sub == sub[::-1] unique_palindromes = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): sub = s[i:j] if is_palindrome(sub): unique_palindromes.add(sub) return len(unique_palindromes)"},{"question":"You are given a matrix with n rows and m columns, filled with integers. Your task is to find the submatrix that has the maximum possible sum and return the sum of its elements. The submatrix should be contiguous, meaning it must contain elements only from consecutive rows and columns. The matrix is represented as a two-dimensional list, where each element in the list is an integer denoting the value at that particular cell in the matrix. # Input - The first line contains a single integer t (1 le t le 50) — the number of test cases. - For each test case: - The first line contains two integers n and m (1 le n, m le 300) — the number of rows and columns in the matrix. - The next n lines each contain m integers representing the elements of the matrix. Each element of the matrix a_{ij} is bounded by -10^9 and 10^9. # Output For each test case, output a single integer — the maximum sum of any submatrix. # Example Input ``` 2 3 3 1 2 -1 -3 -4 5 2 3 -8 2 2 -1 -2 -3 -4 ``` Output ``` 5 -1 ``` # Note In the first test case, the submatrix with the maximum sum is: ``` 5 ``` In the second test case, the submatrix with the maximum sum is: ``` -1 ```","solution":"def max_sum_submatrix(matrix, n, m): def max_subarray(arr): max_sum = float(\'-inf\') current_sum = 0 for x in arr: current_sum = max(x, current_sum + x) max_sum = max(max_sum, current_sum) return max_sum max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] max_sum = max(max_sum, max_subarray(temp)) return max_sum def get_max_sum_all_matrices(test_cases): results = [] for case in test_cases: n, m, matrix = case results.append(max_sum_submatrix(matrix, n, m)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, lines[index].split()) matrix = [list(map(int, lines[index + i + 1].split())) for i in range(n)] test_cases.append((n, m, matrix)) index += n + 1 return test_cases def max_sum_submatrices_from_input(input_str): test_cases = parse_input(input_str) return get_max_sum_all_matrices(test_cases) # Sample usage for testing input_str = 2 3 3 1 2 -1 -3 -4 5 2 3 -8 2 2 -1 -2 -3 -4 print(max_sum_submatrices_from_input(input_str))"},{"question":"You are given a string of length n consisting of lowercase English letters. You need to perform exactly one operation — select a substring of the given string and rearrange its characters to create a palindrome. Determine the length of the longest possible palindromic substring you can create by such rearrangement. Note that you cannot rearrange characters from outside the selected substring. The first line of the input contains an integer n (1 le n le 10^5) — the length of the string. The second line contains the string of length n consisting of lowercase English letters. Output a single integer — the maximum length of a palindromic substring you can create by rearranging a substring of the given string. **Example:** Input: 7 abacaba Output: 7 Explanation: You can take the entire string \\"abacaba\\" and rearrange it to \\"aabccba\\", which is a palindrome with length 7.","solution":"def max_palindromic_length(n, s): Returns the length of the longest possible palindromic substring that can be created by rearranging a substring of the given string. from collections import Counter freq = Counter(s) odd_count = sum(v % 2 for v in freq.values()) return n - max(0, odd_count - 1)"},{"question":"A company has recently implemented an innovative package delivery system where packages are delivered using a smart robotic arm. The arm moves in precise directions controlled by special commands. The robotic arm can move on an infinite two-dimensional grid starting from the origin (0, 0). You are given a sequence of commands that guide the arm\'s movements. Each command is one of the following four directions: - \'U\' - move up (increase y coordinate by 1) - \'D\' - move down (decrease y coordinate by 1) - \'L\' - move left (decrease x coordinate by 1) - \'R\' - move right (increase x coordinate by 1) Your task is to determine the final position of the robotic arm after executing all the commands. **Input:** - The first line contains an integer `t` (1 ≤ t ≤ 1000) - the number of test cases. - Each of the next `t` lines represents a string of commands (1 ≤ length of the commands ≤ 100). **Output:** - For each test case, output the final coordinates (x, y) of the robotic arm after executing all the commands, separated by a space. **Sample Input:** ``` 3 UDLR UUUDDDLRR RRRRRR ``` **Sample Output:** ``` 0 0 1 0 6 0 ``` # Explanation: - In the first test case, the robotic arm moves up, down, left, and right, returning to the origin (0, 0). - In the second test case, the arm moves up three times, down three times, left once, and right twice, resulting in the final position (1, 0). - In the third test case, the arm moves right six times, resulting in the final position (6, 0).","solution":"def final_position(t, commands_list): Calculates the final position of the robotic arm for each set of commands. :param t: Int, the number of test cases :param commands_list: List of strings, where each string is sequence of commands :return: List of tuples, where each tuple contains the final coordinates (x, y) for each test case positions = [] for commands in commands_list: x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 positions.append((x, y)) return positions"},{"question":"You are given a grid consisting of \'0\'s and \'1\'s. Each \'1\' represents a piece of land, and each \'0\' represents water. Connected pieces of land (horizontally or vertically adjacent) form an island. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You need to find the number of islands present in the given grid. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500) representing the number of rows and columns of the grid, respectively. The next n lines contain m characters each, representing the grid of \'0\'s and \'1\'s. Output the number of islands found in the grid. Example input: ``` 4 5 11000 11000 00100 00011 ``` Example output: ``` 3 ```","solution":"def count_islands(grid): Returns the number of islands in the given grid. if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) visited = [[False] * m for _ in range(n)] def dfs(i, j): if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] == \'0\' or visited[i][j]: return visited[i][j] = True dfs(i+1, j) dfs(i-1, j) dfs(i, j+1) dfs(i, j-1) count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: count += 1 dfs(i, j) return count"},{"question":"You are responsible for managing a cloud storage service. The service allows users to store files, and each file has a certain size. The service has a limit on the maximum total size of files that can be stored, and you need to optimize the allocation of storage to maximize the number of files that can be stored without exceeding the size limit. Write a function to find the maximum number of files that can be stored with the given size constraints. The function should take two arguments: 1. An integer `max_size` representing the maximum total size of files that can be stored. 2. A list `file_sizes` of integers representing the sizes of the files to be stored. Return an integer representing the maximum number of files that can be stored without exceeding the `max_size`. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of files. - The second line contains an integer `max_size` (1 ≤ max_size ≤ 10^9) — the maximum total size of files that can be stored. - The third line contains `n` integers representing the sizes of the files. # Output - Print one integer — the maximum number of files that can be stored without exceeding the given `max_size`. # Example Input ``` 5 10 2 3 5 2 1 ``` Output ``` 4 ``` Explanation By selecting files with sizes 2, 3, 2, and 1, their total size becomes 8, which is within the `max_size` of 10. Thus, the result is 4 files.","solution":"def max_files_to_store(max_size, file_sizes): file_sizes.sort() # Sort the file sizes to attempt to store smaller files first total_size = 0 count = 0 for size in file_sizes: if total_size + size <= max_size: total_size += size count += 1 else: break return count"},{"question":"You are given a list of n integers. Your task is to split the list into the minimal number of contiguous subarrays such that each subarray forms a strictly increasing sequence. The first line of the input contains an integer n (1 le n le 10^5) — the number of integers in the list. The second line of the input contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), representing the list of integers. Output a single integer — the minimal number of contiguous subarrays such that each subarray is strictly increasing. # Example Input: ``` 7 1 2 3 2 3 4 5 ``` Output: ``` 2 ``` Explanation: The list can be split into the subarrays [1, 2, 3] and [2, 3, 4, 5]. Each subarray is strictly increasing.","solution":"def min_increasing_subarrays(n, a): if n == 0: return 0 count = 1 for i in range(1, n): if a[i] <= a[i - 1]: count += 1 return count"},{"question":"Mario is standing at the starting point of a long hallway divided into `n` rooms, numbered from 1 to `n`. Each room can contain a number of coins. Mario can only move forward, either by stepping into the next room or by skipping exactly one room. Mario\'s goal is to collect as many coins as possible by the time he reaches the last room. Help Mario to determine the maximum number of coins he can collect, assuming he always starts from room 1 and ends at room `n`. The input consists of: 1. A single integer `n` (1 ≤ n ≤ 10^5), representing the number of rooms. 2. A line of `n` space-separated integers, where the `i-th` integer ci (0 ≤ ci ≤ 1000) represents the number of coins in the `i-th` room. Output the maximum number of coins Mario can collect by the time he reaches the last room. # Example: Input: ``` 5 1 2 9 4 5 ``` Output: ``` 15 ``` # Explanation: Mario can collect 1 coin from room 1, skip room 2, collect 9 coins from room 3, skip room 4, and finally collect 5 coins from room 5, resulting in a total of 1 + 9 + 5 = 15 coins.","solution":"def max_coins(n, coins): if n == 0: return 0 if n == 1: return coins[0] # dp array where dp[i] will store the maximum coins that can be collected up to room i dp = [0] * n # Start by setting up the base cases dp[0] = coins[0] if n > 1: dp[1] = max(coins[0], coins[1]) # Fill in the dp array for the rest of the rooms for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + coins[i]) return dp[n-1]"},{"question":"You are given an array of integers where you can add or subtract 1 from any single element of the array in each move. You need to make all elements of the array equal to each other with the minimum number of moves. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 1000). The description of the test cases follows. The first line of each test case contains an integer n (1 le n le 100) — the size of the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (-1000 le a_i le 1000) — elements of the array. For each test case, output the minimum number of moves required to make all elements of the array equal. In the first test case, the optimal way is to make all elements equal to 2 by adding/subtracting 1 to/from each element. The total moves required would be 5. In the second test case, the optimal way is to make all elements equal to 2 by adding/subtracting 1 to/from each element. The total moves required would be 4. In the third test case, the optimal way is to make all elements equal to 1 (since they are already equal). No moves are required.","solution":"def min_moves_to_equal_elements(t, test_cases): def calculate_moves(arr): # Optimally, you want to make all elements equal to the median of the array arr.sort() median = arr[len(arr) // 2] moves = sum(abs(x - median) for x in arr) return moves results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(calculate_moves(arr)) return results"},{"question":"Imagine you are given a grid of size n times m, where each cell in the grid contains either a 0 or a 1. A cell containing 1 is considered a land cell, while a cell containing 0 is considered a water cell. An island is a group of land cells connected vertically or horizontally (not diagonally) and surrounded by water. Write a program to find the number of distinct islands in the grid. You are given n and m on the first line. The following n lines each contain a string of length m consisting of characters \'0\' and \'1\' that represent the grid cells. The output should be a single integer that gives the number of islands in the provided grid. Constraints: - 1 leq n, m leq 1000 Example: Input: 4 5 11000 11000 00100 00011 Output: 3","solution":"def num_islands(grid): if not grid: return 0 n = len(grid) m = len(grid[0]) visited = [[False] * m for _ in range(n)] def dfs(i, j): if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] == \'0\' or visited[i][j]: return visited[i][j] = True dfs(i+1, j) dfs(i-1, j) dfs(i, j+1) dfs(i, j-1) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: dfs(i, j) island_count += 1 return island_count def parse_input_and_calculate_islands(input_data): lines = input_data.strip().split() n = int(lines[0]) m = int(lines[1]) grid = lines[2:n+2] return num_islands(grid) # Example input for demonstration input_data = \\"4 5n11000n11000n00100n00011\\" print(parse_input_and_calculate_islands(input_data)) # Output should be 3"},{"question":"Alice is practicing her coding skills and came across a new problem. She now wants to generate a special permutation of numbers from 1 to n. A permutation is called special if it satisfies the following conditions: 1. No two adjacent numbers in the permutation are consecutive integers. 2. No number is immediately followed or preceded by another number that differs from it by 1. Alice asks for your help to generate one such special permutation for a given n. The input is a single integer n (2 ≤ n ≤ 10^5). Output a single line containing n space-separated integers representing a special permutation of the numbers from 1 to n. If there are multiple valid solutions, any one will do. If it is not possible to generate such a permutation, print -1. Example: Input: 4 Output: 2 4 1 3 Explanation: In the permutation [2, 4, 1, 3], no two adjacent numbers are consecutive, and the conditions are fulfilled.","solution":"def special_permutation(n): if n == 2: return [2, 1] # For n = 3, impossible to create such permutation if n == 3: return [-1] perm = [] # Fill with even numbers first for i in range(2, n + 1, 2): perm.append(i) # Then fill with odd numbers for i in range(1, n + 1, 2): perm.append(i) return perm"},{"question":"You are given an n x m grid of integers. Each cell in the grid contains an integer which represents the height of that cell. You need to perform a water rain simulation on this grid for one time-step. Each cell in the grid will receive 1 unit of water, and then the water will distribute itself based on the heights of the neighboring cells. Water will flow to any neighboring cell (up, down, left, or right) which has a lower height than the current cell until equilibrium is reached or until it can no longer flow. If a cell has the same height as an adjacent cell, it shares the water equally with that cell. Write a program to simulate this process and print the grid after the water has been distributed. If a cell cannot distribute its water to any neighbors, it retains the water it received. The first line contains two integers, n and m (1 ≤ n, m ≤ 50) — the dimensions of the grid. The next n lines contain m space-separated integers each, representing the height of each cell in the grid. Output the grid after one time-step of water distribution. # Example **Input** ``` 3 3 1 2 3 4 5 6 7 8 9 ``` **Output** ``` 2 3 4 5 6 7 8 9 10 ``` Explanation: After 1 unit of water is added to each cell: ``` 2 3 4 5 6 7 8 9 10 ```","solution":"def water_rain_simulation(n, m, grid): new_grid = [[grid[i][j] + 1 for j in range(m)] for i in range(n)] return new_grid def print_grid(grid): for row in grid: print(\\" \\".join(map(str, row))) # Example usage: if __name__ == \\"__main__\\": n, m = 3, 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] new_grid = water_rain_simulation(n, m, grid) print_grid(new_grid)"},{"question":"Alice is trying to learn about prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. You need to write a program that, given an integer n, returns the closest prime number to n. If there are two prime numbers equally close, return the smaller one. The input consists of a single integer n (2 ≤ n ≤ 1000). Output a single integer: the closest prime number to n. If two primes are equally close, output the smaller one. # Examples Example 1 **Input:** ``` 10 ``` **Output:** ``` 11 ``` Example 2 **Input:** ``` 15 ``` **Output:** ``` 13 ``` Example 3 **Input:** ``` 20 ``` **Output:** ``` 19 ``` Example 4 **Input:** ``` 25 ``` **Output:** ``` 23 ``` Example 5 **Input:** ``` 37 ``` **Output:** ``` 37 ```","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def closest_prime(n): Returns the closest prime number to n. If there are two prime numbers equally close, returns the smaller one. if n < 2: return 2 # The closest prime to any number less than 2 is 2, though by the problem constraints n >= 2 lower = n upper = n while True: if is_prime(lower): return lower if is_prime(upper): return upper lower -= 1 upper += 1"},{"question":"Polycarp is playing a game with sequences of numbers. He starts with an array of n integers a = [a_1, a_2, dots, a_n]. Polycarp can perform the following operation as many times as he wants: - Choose two consecutive elements in the array and remove them. The operation costs |a_i - a_{i+1}| (the absolute difference of the two chosen elements). Polycarp aims to find the minimum cost to remove all elements from the array. If the array has only one element left, no more operations can be performed. For instance, given an array a = [3, 2, 4], he could choose to remove 3 and 2 at a cost of |3 - 2| = 1, resulting in the array [4] being left with a total cost of 1. Alternatively, he could choose to remove 2 and 4 at a cost of |2 - 4| = 2, resulting in the array [3] being left with a total cost of 2. The task is to help Polycarp compute the minimum cost required to remove all elements from the array. # Input: - The first line contains a single integer n (1 leq n leq 100), the number of elements in the array. - The second line contains n integers a_1, a_2, dots, a_n (0 leq a_i leq 1000), the elements of the array. # Output: - Print a single integer, the minimum cost required to remove all elements from the array. # Examples: Example 1: ``` Input: 3 3 2 4 Output: 1 ``` Example 2: ``` Input: 4 1 3 2 4 Output: 2 ``` Example 3: ``` Input: 1 5 Output: 0 ```","solution":"def min_removal_cost(n, a): Returns the minimum cost to remove all elements from the array. n: int - The number of elements in the array. a: List[int] - The list of integers. if n == 1: return 0 min_cost = float(\'inf\') for i in range(n-1): min_cost = min(min_cost, abs(a[i] - a[i+1])) return min_cost"},{"question":"You are a renowned Engineer specialized in drone communication systems. Recently, a new project has been initiated to establish seamless communication between a fleet of drones operating in a remote area. The drones need to synchronize their operations with each other, ensuring they all perform their tasks simultaneously. Each drone receives time signals which tells it when it should either start or stop its task. The time signal uses a series of integers, where each integer represents a unique time in seconds. The drone\'s task is to interpret these time signals and determine if there\'s a common moment when all drones receive the same signal to execute their tasks together. Given the time signal lists from multiple drones, your task is to determine whether there\'s a common time that appears in all lists. If such a time exists, print \\"YES\\" and the time; otherwise, print \\"NO\\". # Input - The first line contains a single integer `n` (2 ≤ n ≤ 100), the number of drones. - The following n lines each contain a sequence of space-separated integers representing the time signals received by each drone. Each sequence starts with an integer `m_i` (1 ≤ m_i ≤ 1000), the number of time signals received by the \'i-th\' drone, followed by `m_i` integers representing the time signals sorted in non-decreasing order. # Output - Print \\"YES\\" and the common time if all drones have a common time signal. - If no such common time exists, print \\"NO\\". # Example Input ``` 3 4 1 2 3 4 3 2 3 4 5 1 3 4 5 6 ``` Output ``` YES 3 ``` Input ``` 2 3 1 2 3 4 4 5 6 7 ``` Output ``` NO ``` Analyze the input sequences to identify any overlaps efficiently, ensuring the synchronization requirement is met for the fleet of drones.","solution":"def find_common_time(drone_signals): Returns \\"YES\\" and the common time if all drones have a common time signal. Returns \\"NO\\" otherwise. # Convert the drone signals into sets sets = [] for signals in drone_signals: m_i, *times = signals sets.append(set(times)) # Find the common time across all sets common_times = set.intersection(*sets) if common_times: common_time = min(common_times) return f\\"YES {common_time}\\" else: return \\"NO\\" # Function to process the input and convert it to the desired format for find_common_time def process_input(n, signal_lines): drone_signals = [] for i in range(n): signals = list(map(int, signal_lines[i].split())) drone_signals.append(signals) return find_common_time(drone_signals)"},{"question":"You have an array of n integers where each integer represents the height of a tree. A forester wants to cut down some trees such that after cutting, the remaining trees form a non-decreasing sequence based on their heights. The forester can perform two types of operations on the trees: 1. Cut down a tree (removes it from the sequence). 2. Increase the height of a tree by k units (can be performed only once per tree). Your task is to help the forester determine the minimum number of trees that need to be cut down so that the remaining trees (after optionally applying the height increases) form a non-decreasing sequence. The first line of input contains two integers n and k (1 ≤ n ≤ 100,000 and 1 ≤ k ≤ 100). The second line contains n integers h1, h2, ... hn (1 ≤ hi ≤ 1,000,000), representing the initial heights of the trees. Output a single integer representing the minimum number of trees that need to be cut down to form a non-decreasing sequence after optionally increasing the height of one tree by k units. Example Input: 5 3 3 1 2 6 4 Output: 1 Explanation: We need to cut down 1 tree to achieve a non-decreasing sequence. One optimal solution is to cut down the tree with height 1 (the second tree). The remaining sequence [3, 2+3, 6, 4] forms a non-decreasing sequence after increasing the height of the third tree by 3 units.","solution":"def min_trees_to_cut(n, k, heights): Returns the minimum number of trees that need to be cut down to form a non-decreasing sequence after optionally increasing the height of one tree by k units. def longest_non_decreasing_subsequence(seq): from bisect import bisect_right lis = [] for h in seq: pos = bisect_right(lis, h) if pos < len(lis): lis[pos] = h else: lis.append(h) return len(lis) best_result = float(\'inf\') for i in range(n + 1): if i < n: modified_heights = heights[:i] + [heights[i] + k] + heights[i+1:] else: modified_heights = heights lis_length = longest_non_decreasing_subsequence(modified_heights) cuts_required = n - lis_length best_result = min(best_result, cuts_required) return best_result # Example usage n = 5 k = 3 heights = [3, 1, 2, 6, 4] print(min_trees_to_cut(n, k, heights)) # Outputs: 1"},{"question":"Tom is organizing a hiking trip for his friends. During the hike, they will take several rest stops, and Tom wants to ensure that the rest stops are evenly spaced along the trail. He has already selected the start and end points of the trail and wants to determine the positions of the rest stops. You are given two integers, `L` and `N`: - `L` (1 ≤ L ≤ 1000): The total length of the trail. - `N` (1 ≤ N ≤ L): The number of rest stops, including the start and end points. Tom needs your help to find the positions of all rest stops such that they are as evenly spaced as possible along the trail. Output the positions of the rest stops as a list of `N` integers in ascending order. The positions should be integers, and the first and last positions should be 0 and `L`, respectively. If there are multiple valid solutions, you may output any of them. # Input The input consists of a single line containing two integers L and N. # Output Print a single line containing N integers representing the positions of the rest stops. # Example Input ``` 10 4 ``` Output ``` 0 3 6 10 ``` Input ``` 15 6 ``` Output ``` 0 3 6 9 12 15 ``` Note In the first example, the rest stops 0, 3, 6, and 10 are all evenly spaced along the length of the trail. In the second example, the rest stops 0, 3, 6, 9, 12, and 15 are all evenly spaced along the length of the trail.","solution":"def rest_stops(L, N): Returns the positions of N rest stops evenly spaced along the trail of length L. if N == 1: return [0, L] else: interval = L // (N - 1) positions = [i * interval for i in range(N)] positions[-1] = L return positions"},{"question":"Meteorologists in Byteland have identified a new weather pattern that affects the temperature readings in their rectangular n × m grid. Each cell in the grid represents a specific area and has an associated temperature value. Due to recent climatic changes, some cells within the grid need adjustment. You are given an initial grid of n rows and m columns, where each cell contains an integer representing the temperature. You are also given k adjustments, each defining an area with four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m) and another integer t. For each adjustment, you need to increase the temperatures of all cells within the subrectangle from (r1, c1) to (r2, c2) by t. After all adjustments are applied, print the final grid. The first line contains three space-separated integers n, m, and k (1 ≤ n, m ≤ 500, 1 ≤ k ≤ 1000) — the number of rows, columns, and adjustments respectively. Each of the next n lines contains m integers representing the initial temperature of each cell. The next k lines each contains five space-separated integers r1, c1, r2, c2, t describing the adjustments. Print the final grid after all adjustments are applied. Output n lines with m integers each, representing the temperature of each cell. Example input: 3 3 2 1 2 3 4 5 6 7 8 9 1 1 2 2 1 2 2 3 3 2 Example output: 2 3 3 5 8 8 7 10 11","solution":"def adjust_temperatures(n, m, k, grid, adjustments): for adjustment in adjustments: r1, c1, r2, c2, t = adjustment for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): grid[i][j] += t return grid # Example usage: n = 3 m = 3 k = 2 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] adjustments = [ (1, 1, 2, 2, 1), (2, 2, 3, 3, 2) ] adjusted_grid = adjust_temperatures(n, m, k, grid, adjustments) for row in adjusted_grid: print(\' \'.join(map(str, row)))"},{"question":"Given an array of integers, find the smallest positive integer that is missing from the array. The array can contain both positive and negative integers, and your solution should run in O(n) time and use O(1) extra space. Input The first line contains an integer n (1 ≤ n ≤ 10^6), the number of elements in the array. The second line contains n integers separated by spaces, which represent the elements of the array. Output Print a single integer, the smallest positive integer that is missing from the array. Example Input 5 3 4 -1 1 2 Output 5 Input 4 1 2 0 3 Output 4 Input 3 -2 -3 -5 Output 1 Note In the first example, the smallest positive integer missing from the array is 5 since all integers from 1 to 4 are present in the array. In the second example, 4 is the smallest missing positive integer. The third example, all available integers are negative, hence the smallest missing positive integer is 1.","solution":"def find_missing_positive(nums): n = len(nums) # Step 1: Mark elements outside the range [1, n] as n+1 since they are not useful for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Step 2: Use the index of the array to mark presence of numbers 1 to n for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Step 3: The first positive index + 1 is the smallest missing positive number for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"In a coding challenge, participants need to write a function that simulates a simple inventory system to manage stocks of products. Each product has a unique identifier and a quantity in stock. The function needs to support three types of operations: 1. \\"SET x y\\" - Set the quantity of product x to y. If product x does not already exist, it should be added. 2. \\"GET x\\" - Return the current quantity of product x. If product x does not exist, return 0. 3. \\"REMOVE x\\" - Remove product x from the inventory. You are given the number of operations n (1 ≤ n ≤ 1000) followed by n lines containing the operations. Your task is to implement the inventory system and handle these operations accordingly. The first line contains a single integer n, the number of operations. Each of the next n lines contains one of the operations described above. For each \\"GET\\" operation, output the corresponding quantity of the product on a new line. There is no output for \\"SET\\" and \\"REMOVE\\" operations. **Example:** Input: ``` 8 SET 1 10 SET 2 20 GET 1 REMOVE 1 GET 1 GET 2 REMOVE 2 GET 2 ``` Output: ``` 10 0 20 0 ``` Here, the first \\"GET 1\\" returns 10 as the quantity of product 1. The second \\"GET 1\\" returns 0 because product 1 has been removed. The first \\"GET 2\\" returns 20, and the second \\"GET 2\\" returns 0 because product 2 has also been removed.","solution":"def inventory_system(n, operations): Manage inventory system based on given operations. Args: n : int : Number of operations. operations : list : List of operation strings. Returns: list : List of results of \\"GET\\" operations. inventory = {} results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"SET\\": product_id = int(parts[1]) quantity = int(parts[2]) inventory[product_id] = quantity elif command == \\"GET\\": product_id = int(parts[1]) results.append(inventory.get(product_id, 0)) elif command == \\"REMOVE\\": product_id = int(parts[1]) if product_id in inventory: del inventory[product_id] return results"},{"question":"You are given a grid with N rows and M columns (1 ≤ N, M ≤ 100). Each cell in the grid contains an integer, which can be either 0 or 1. You can start from any cell that contains a 1 and perform the following operation: Move to an adjacent cell that also contains a 1. You can move to a cell in any of the four possible directions: up, down, left, or right. Your goal is to determine the number of connected components of 1s in the grid. Two cells are part of the same component if they are connected directly or indirectly through adjacent cells containing 1s. The first line of the input contains two integers N and M. Each of the next N lines contains M integers (0 or 1), representing the grid. Print a single integer which is the number of connected components of 1s in the grid. # Example Input ``` 4 5 1 1 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 1 1 ``` Output ``` 2 ``` # Explanation: - In the example input, there are two connected components of 1s: one consists of the 1s in the first two rows and the other consists of the 1s in the last two rows. Hence, the output is 2.","solution":"def count_connected_components(grid): Counts the number of connected components of 1s in the given grid. Args: grid (list[list[int]]): 2D list representing the grid with 0s and 1s. Returns: int: Number of connected components of 1s. def dfs(x, y): # Stack for DFS stack = [(x, y)] while stack: cx, cy = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == 1: grid[nx][ny] = -1 # mark visited stack.append((nx, ny)) N = len(grid) M = len(grid[0]) count = 0 for i in range(N): for j in range(M): if grid[i][j] == 1: count += 1 grid[i][j] = -1 # mark visited dfs(i, j) return count"},{"question":"Suppose you are given a rectangular grid of cells, each cell being either walkable or blocked. You need to determine the minimum distance required for a person to travel from the top-left corner to the bottom-right corner of the grid. The person can only move up, down, left, or right, and cannot move through blocked cells. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next n lines contain m characters each — describing the grid. Each character is either \'.\' (indicating a walkable cell) or \'#\' (indicating a blocked cell). The top-left cell (1,1) and the bottom-right cell (n,m) are guaranteed to be walkable (i.e., \'.\'). You need to print a single integer — the minimum number of moves required to travel from the top-left corner to the bottom-right corner. If there is no valid path, print -1. # Input - The first line contains two integers n and m. - The next n lines contain m characters each (\'.\' or \'#\'). # Output Print the minimum number of moves required to travel from the top-left corner to the bottom-right corner, or -1 if no valid path exists. # Example Input ``` 3 3 ... .#. ... ``` Output ``` 4 ``` Input ``` 3 3 ... # ... ``` Output ``` -1 ```","solution":"from collections import deque def min_moves(n, m, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n - 1 and y == m - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"There are two large warehouses, each containing boxes of different heights. Your task is to find the minimum height difference between the tallest box in the first warehouse and the tallest box in the second warehouse. The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of boxes in the first warehouse and the number of boxes in the second warehouse, respectively. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the boxes in the first warehouse. The third line contains m integers g1, g2, ..., gm (1 ≤ gi ≤ 10^9) — the heights of the boxes in the second warehouse. Output a single integer — the minimum height difference between the tallest box in the first warehouse and the tallest box in the second warehouse. Consider the first test case, where the highest box in the first warehouse is 50, and the highest box in the second warehouse is 45. The height difference is 5. Consider the second test case, where each warehouse has a single box with height 10. The height difference is 0 as both boxes have the same height.","solution":"def min_height_difference(n, m, heights_first, heights_second): Returns the minimum height difference between the tallest box in the first warehouse and the tallest box in the second warehouse. tallest_first = max(heights_first) tallest_second = max(heights_second) return abs(tallest_first - tallest_second)"},{"question":"You are given a set of weights and a target weight. Your task is to determine if it is possible to choose a subset of these weights such that their sum is exactly equal to the target weight. Write a function `canFormTargetWeight(weights, target)` that takes an array of integers `weights` representing the weights and an integer `target` representing the target weight. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of weights. - The second line contains `n` integers, each representing a weight `wi` (1 ≤ wi ≤ 1000). - The third line contains an integer `target` (1 ≤ target ≤ 1000). # Output: - Print \\"YES\\" if it is possible to choose a subset of the weights that sum up to exactly the target weight. - Otherwise, print \\"NO\\". # Example: Input: ``` 5 3 34 4 12 5 9 ``` Output: ``` YES ``` Input: ``` 3 1 2 5 4 ``` Output: ``` NO ``` # Explanation: In the first example, the subset [3, 4, 2] adds up to 9. Therefore, the output is \\"YES\\". In the second example, no subset of the given weights sums up to the target weight of 4, so the output is \\"NO\\".","solution":"def canFormTargetWeight(weights, target): Determines if a subset of weights can sum up to the target weight. Args: weights: list of integers representing the weights. target: integer representing the target weight. Returns: string \\"YES\\" if it is possible to form the target weight, otherwise \\"NO\\". n = len(weights) # Create a 2D array to store the solutions to subproblems dp = [[False] * (target + 1) for _ in range(n + 1)] # If target is 0, then the answer is True (0 sum is possible with empty subset) for i in range(n + 1): dp[i][0] = True # Fill the dp array for i in range(1, n + 1): for j in range(1, target + 1): if j < weights[i-1]: dp[i][j] = dp[i-1][j] else: dp[i][j] = dp[i-1][j] or dp[i-1][j - weights[i-1]] # The answer is in the bottom right corner of the dp array return \\"YES\\" if dp[n][target] else \\"NO\\""},{"question":"You are organizing a marathon with n runners. Each runner is assigned a unique number from 1 to n. During the marathon, you want to track the runners\' positions as they cross the finish line and determine the top k runners. On the marathon day, each runner crosses the finish line at a unique time, and you record the order in which they finish. Your task is to compute and return the IDs of the top k runners who finish first. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of runners. The second line contains an integer k (1 ≤ k ≤ n) — the number of top runners you need to find. The third line contains a sequence of n distinct integers representing the runner IDs in the order they finish. Print a single line containing k space-separated integers representing the IDs of the top k runners who finish the marathon first, in the order they finished. Input: ``` 6 3 4 2 1 6 5 3 ``` Output: ``` 4 2 1 ``` Explanation: In this example, there are 6 runners. We need to find the top 3 runners. The order in which runners finish is recorded as [4, 2, 1, 6, 5, 3]. The top 3 runners, in the order they finished, are 4, 2, 1.","solution":"def top_k_runners(n, k, finish_order): Returns the IDs of the top k runners who finish first. :param n: Number of runners :param k: Number of top runners to return :param finish_order: List of runner IDs in the order they finished :return: List of IDs of the top k runners return finish_order[:k]"},{"question":"You are developing a new transportation system in your city and need to design a prototype railway network. The city is represented as a grid of size n x m and you are given the locations of important buildings that must be directly connected by railway tracks. The railway tracks can only go vertically or horizontally along the grid lines, and they cannot overlap or intersect except at their endpoints where two tracks meet. Your task is to determine if it\'s possible to connect all important buildings with these restrictions. If it is possible, print \\"Possible\\" and the configuration of tracks using characters \'|\' for vertical tracks and \'-\' for horizontal tracks. If it is not possible, print \\"Impossible\\". Input: The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The second line contains an integer k (1 ≤ k ≤ 100) — the number of important buildings. Each of the next k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the coordinates of an important building. Output: If it is possible to connect all the buildings within the grid constraints, print \\"Possible\\" followed by the grid configuration. Otherwise, print \\"Impossible\\". Example: Input: 5 5 4 1 1 1 4 4 1 4 4 Output: Possible -oo- | | o | | | -oo- In this example, \'o\' represents important buildings, \'-\' and \'|\' represent horizontal and vertical tracks respectively. The solution should ensure that all given important buildings are connected directly or indirectly through tracks.","solution":"def connect_buildings(n, m, k, buildings): Determines if it\'s possible to connect all important buildings with non-overlapping horizontal and vertical rail tracks. Args: n (int): Number of rows in the grid. m (int): Number of columns in the grid. k (int): Number of important buildings. buildings (list of tuples): List of coordinates (x, y) of important buildings. Returns: str: \\"Possible\\" + grid configuration or \\"Impossible\\". # Can only connect up to 100 buildings from itertools import product if k == 1: # If there\'s only one building, it\'s trivially possible grid = [[\' \' for _ in range(m)] for _ in range(n)] x, y = buildings[0] grid[x-1][y-1] = \'o\' return \\"Possiblen\\" + \'n\'.join(\'\'.join(row) for row in grid) # Ensure all buildings are connectable by placing tracks grid = [[\' \' for _ in range(m)] for _ in range(n)] for x, y in buildings: grid[x-1][y-1] = \'o\' for x, y in buildings: # Connect vertically if another building shares the same column for bx, by in buildings: if (bx, by) != (x, y) and by == y: for i in range(min(x, bx), max(x, bx)): if grid[i-1][y-1] == \'o\': continue grid[i-1][y-1] = \'|\' # Connect horizontally if another building shares the same row for bx, by in buildings: if (bx, by) != (x, y) and bx == x: for j in range(min(y, by), max(y, by)): if grid[x-1][j-1] == \'o\': continue grid[x-1][j-1] = \'-\' return \\"Possiblen\\" + \'n\'.join(\'\'.join(row) for row in grid) # Sample data for manual testing n, m, k = 5, 5, 4 buildings = [(1, 1), (1, 4), (4, 1), (4, 4)] print(connect_buildings(n, m, k, buildings))"},{"question":"You are given an array of n positive integers and another integer target. You need to determine if there exists a subset of the array such that the sum of the elements in the subset is equal to target. If such a subset exists, print \\"YES\\" and the subset. If multiple solutions exist, print any one of them. Otherwise, print \\"NO\\". The first line contains two integers n (1 ≤ n ≤ 1000) — the number of integers in the array, and target (1 ≤ target ≤ 10^5) — the target sum. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the integers in the array. If a subset exists, print \\"YES\\" on the first line, followed by the number of elements in the subset on the next line, and then the elements of the subset on the third line separated by spaces. If multiple solutions exist, print any one of them. If no subset exists, print \\"NO\\". In the first example, a subset {2, 3} that sums up to 5 exists. In the second example, a subset {5} that sums up to 5 exists. In the third example, no subset sums up to 15.","solution":"def subset_sum(n, target, arr): Determines if there exists a subset of the array such that the sum of the elements in the subset is equal to target. If such a subset exists, returns (\\"YES\\", subset). Otherwise, returns (\\"NO\\", []). Parameters: n (int) : Number of integers in the array. target (int) : Target sum. arr (List[int]) : List of integers. Returns: Tuple[str, List[int]] : (\\"YES\\", subset) if a subset exists, otherwise (\\"NO\\", []). # Initialize a DP array where dp[i] is a subset summing up to \'i\' dp = [None] * (target + 1) dp[0] = [] for num in arr: for j in range(target, num - 1, -1): if dp[j - num] is not None: dp[j] = dp[j - num] + [num] if dp[target] is not None: return \\"YES\\", dp[target] else: return \\"NO\\", []"},{"question":"You are given a string consisting of lowercase English letters. Your task is to check if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. If such an arrangement is possible, return any possible rearrangement of the characters. Otherwise, return \\"NOT POSSIBLE\\". # Input - The first and only line of the input contains a string `s` (1 leq |s| leq 10^5), consisting only of lowercase English letters. # Output - If rearranging the string in the described way is possible, print the rearranged string. Otherwise, print \\"NOT POSSIBLE\\". # Example Input ``` aabb ``` Output ``` abab ``` Input ``` aaab ``` Output ``` NOT POSSIBLE ``` # Note In the first example, \\"abab\\" or \\"baba\\" are valid rearrangements where no two adjacent characters are the same. In the second example, no rearrangements can satisfy the required condition since there are three \'a\'s and only one \'b\'.","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_string(s): Rearranges the characters of the given string such that no two adjacent characters are the same. If such a rearrangement is not possible, returns \\"NOT POSSIBLE\\". counter = Counter(s) max_heap = [] for char, freq in counter.items(): heappush(max_heap, (-freq, char)) prev_char, prev_freq = None, 0 result = [] while max_heap: freq, char = heappop(max_heap) result.append(char) if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_char, prev_freq = char, freq + 1 return \'\'.join(result) if len(result) == len(s) else \\"NOT POSSIBLE\\""},{"question":"You are given a binary tree with n nodes where each node has a unique value between 1 and n. Your task is to write a function to find the diameter of the tree. The diameter of a tree is defined as the number of nodes on the longest path between two leaves in the tree. The input is provided as an adjacency list of the tree, specifying the connections between nodes as pairs (u, v) where u and v are nodes such that u and v are connected by an edge. # Input Format - The first line contains a single integer n (1 ≤ n ≤ 10^4), the number of nodes in the tree. - The next n-1 lines each contain two space-separated integers u and v, representing an edge between node u and node v. # Output Format - A single integer representing the diameter of the tree. # Constraints - The tree contains exactly n nodes and n-1 edges. - Each node will have a unique value from 1 to n. # Example Input ``` 5 1 2 1 3 2 4 2 5 ``` Output ``` 4 ``` Explanation The longest path in this tree goes through the nodes 4-2-1-3 or 5-2-1-3. Therefore, the diameter of the tree is 4.","solution":"def calculate_diameter(n, edges): from collections import deque, defaultdict if n == 1: return 1 # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Function to find the farthest node and its distance def bfs(start): visited = [False] * (n + 1) queue = deque([(start, 0)]) visited[start] = True farthest_node = start max_distance = 0 while queue: node, distance = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) if distance + 1 > max_distance: max_distance = distance + 1 farthest_node = neighbor return farthest_node, max_distance # First BFS to find one endpoint of the diameter endpoint1, _ = bfs(1) # Second BFS to find the actual diameter _, diameter = bfs(endpoint1) return diameter + 1"},{"question":"You are given a list of integers representing the heights of trees in a forest. Lumberjacks want to cut the trees in such a way that they form a fence in a zigzag manner, meaning the height of each tree must strictly alternate between being taller and shorter than the previous tree. Your task is to determine the maximum possible length of the zigzag sequence that can be made from the given list of tree heights. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of trees in the forest. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the trees. Output a single integer — the length of the longest zigzag sequence of tree heights that can be achieved. Example: Input: 7 1 7 4 9 2 5 1 Output: 6 Explanation: One possible longest zigzag sequence is 1, 7, 4, 9, 2, 5 which has length 6.","solution":"def longest_zigzag_sequence(trees): n = len(trees) if n == 1: return 1 up = [1] * n down = [1] * n for i in range(1, n): for j in range(i): if trees[i] > trees[j]: up[i] = max(up[i], down[j] + 1) elif trees[i] < trees[j]: down[i] = max(down[i], up[j] + 1) return max(max(up), max(down))"},{"question":"You are given a grid with n rows and m columns, initialized with zeroes. You need to perform a series of operations on the grid. Each operation can be one of the following types: 1. **Add:** Add a certain value to all elements in a specified subgrid. 2. **Set:** Set all elements in a specified subgrid to a certain value. 3. **Sum:** Return the sum of all elements in a specified subgrid. Each operation is described by six integers: - For **Add**: - \\"Add x r1 c1 r2 c2\\" means adding value x to each element in the subgrid with top-left corner (r1, c1) and bottom-right corner (r2, c2). - For **Set**: - \\"Set x r1 c1 r2 c2\\" means setting each element in the subgrid with top-left corner (r1, c1) and bottom-right corner (r2, c2) to value x. - For **Sum**: - \\"Sum r1 c1 r2 c2\\" means returning the sum of elements in the subgrid with top-left corner (r1, c1) and bottom-right corner (r2, c2). The grid supports multiple queries of this type. Implement a function to process these operations efficiently. The first line of input contains three integers n, m (1 ≤ n, m ≤ 1000) and q (1 ≤ q ≤ 100000) - the number of rows, columns, and queries. The next q lines describe the queries. The format of each query is one of the following: - \\"Add x r1 c1 r2 c2\\" - \\"Set x r1 c1 r2 c2\\" - \\"Sum r1 c1 r2 c2\\" Print the result of each \\"Sum\\" query. Example: ``` Input 3 3 5 Add 2 1 1 2 2 Sum 1 1 3 3 Set 5 2 2 3 3 Sum 1 1 3 3 Add 1 1 1 3 3 Output 8 26 ```","solution":"class Grid: def __init__(self, n, m): self.grid = [[0] * m for _ in range(n)] self.n = n self.m = m def add(self, x, r1, c1, r2, c2): for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): self.grid[i][j] += x def set(self, x, r1, c1, r2, c2): for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): self.grid[i][j] = x def sum(self, r1, c1, r2, c2): total = 0 for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): total += self.grid[i][j] return total def process_operations(n, m, q, operations): grid = Grid(n, m) results = [] for operation in operations: parts = operation.split() if parts[0] == \\"Add\\": _, x, r1, c1, r2, c2 = parts grid.add(int(x), int(r1), int(c1), int(r2), int(c2)) elif parts[0] == \\"Set\\": _, x, r1, c1, r2, c2 = parts grid.set(int(x), int(r1), int(c1), int(r2), int(c2)) elif parts[0] == \\"Sum\\": _, r1, c1, r2, c2 = parts result = grid.sum(int(r1), int(c1), int(r2), int(c2)) results.append(result) return results"},{"question":"You are given a square matrix of size `n x n` filled with positive integers. Your task is to find the sum of the elements on its diagonals. The matrix has two diagonals: the main diagonal and the anti-diagonal. - The main diagonal runs from the top-left corner to the bottom-right corner. - The anti-diagonal runs from the top-right corner to the bottom-left corner. If an element is common to both diagonals (in the case of an odd-length matrix), it should be counted only once. Write a program that computes the sum of the elements on both diagonals. # Input Format The first line contains an integer `n` (1 leq n leq 1000) — the size of the matrix (number of rows and columns). The next `n` lines contain `n` integers each, representing the matrix. # Output Format Print a single integer, the sum of the elements on the diagonals. # Sample Input 1 ``` 3 1 2 3 4 5 6 7 8 9 ``` # Sample Output 1 ``` 25 ``` # Explanation: In the given matrix, the elements on the main diagonal are `1, 5, 9` and the elements on the anti-diagonal are `3, 5, 7`. The sum is `1 + 5 + 9 + 3 + 7 = 25`. Note that the element `5` (the center of the matrix) is counted only once. # Sample Input 2 ``` 2 1 2 3 4 ``` # Sample Output 2 ``` 10 ``` # Explanation: In the given matrix, the elements on the main diagonal are `1, 4` and the elements on the anti-diagonal are `2, 3`. The sum is `1 + 4 + 2 + 3 = 10`.","solution":"def diagonal_sum(matrix): Returns the sum of the elements on the main diagonal and anti-diagonal of a square matrix, counting the middle element only once if it is common to both diagonals. Args: matrix (list of list of int): 2D list representing the square matrix Returns: int: The sum of the diagonal elements n = len(matrix) main_diagonal_sum = sum(matrix[i][i] for i in range(n)) anti_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n)) if n % 2 == 1: middle_element = matrix[n // 2][n // 2] total_sum = main_diagonal_sum + anti_diagonal_sum - middle_element else: total_sum = main_diagonal_sum + anti_diagonal_sum return total_sum"},{"question":"Fred is a tennis coach who has n players, each with a certain skill level. He wants to find the maximum possible difference in skill levels between the two best players in his team. However, the catch is that the best two players must be next to each other in the given list of players. The first line of the input contains a single integer n (2 ≤ n ≤ 10^5) — the number of players. The second line contains n integers, where each integer si (1 ≤ si ≤ 10^9) represents the skill level of the i-th player in the list. Print a single integer — the maximum difference between the skill levels of the two best players that are next to each other in the list. For example, if Fred has players with skill levels [5, 3, 8, 4, 9], the maximum difference between any two adjacent players\' skill levels is |8 - 3| = 5. Input: 5 5 3 8 4 9 Output: 5","solution":"def max_adjacent_difference(n, skill_levels): Returns the maximum possible difference in skill levels between any two adjacent players. max_diff = 0 for i in range(n - 1): diff = abs(skill_levels[i] - skill_levels[i + 1]) if diff > max_diff: max_diff = diff return max_diff"},{"question":"Alice loves playing with strings. She has two strings a and b with the same length n. She can perform the following operation on these strings: select some indices i and j (1 leq i, j leq n) and swap a[i] and b[j]. Alice\'s goal is to make the string a equal to the string b. Help her determine the minimum number of operations needed to achieve this, or determine if it is impossible. Input: The first line contains a single integer n (1 leq n leq 10^5), the length of the strings. The second line contains the string a. The third line contains the string b. Output: Print a single integer: the minimum number of swaps needed to make the strings equal. If it is impossible, print -1. Example: Input: 4 abac baca Output: 2 Explanation: In the first swap, we can choose i = 2 and j = 1, so the strings become \\"baac\\" and \\"baca\\". In the second swap, we can choose i = 3 and j = 4, so the strings become \\"baca\\" and \\"baca\\", making them equal.","solution":"def min_swaps_to_make_equal(n, a, b): from collections import Counter # Count the characters in both strings count_a = Counter(a) count_b = Counter(b) # Each character must be present in both strings the same number of times if count_a != count_b: return -1 # Determine the positions of mismatching characters mismatch_a = [] mismatch_b = [] for i in range(n): if a[i] != b[i]: mismatch_a.append(a[i]) mismatch_b.append(b[i]) # Find any optimal pairing for swaps swaps = 0 i = 0 while i < len(mismatch_a): j = i + 1 while j < len(mismatch_b): if mismatch_a[i] == mismatch_b[j] and mismatch_a[j] == mismatch_b[i]: swaps += 1 mismatch_a.pop(j) mismatch_b.pop(j) mismatch_a.pop(i) mismatch_b.pop(i) break j += 1 else: i += 1 return swaps + len(mismatch_a) // 2"},{"question":"You are given a string consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', which represents a sequence of parentheses. Your task is to determine if the sequence is valid. A sequence of parentheses is considered valid if: 1. It is an empty string, or 2. It can be written as AB (A concatenated with B), where A and B are valid sequences, or 3. It can be written as (A), [A], or {A}, where A is a valid sequence. The only line of the input contains a string s (1 ≤ |s| ≤ 10^4) consisting of the parentheses characters as described above. Output \\"YES\\" if the given string is a valid sequence of parentheses, otherwise output \\"NO\\".","solution":"def is_valid_parentheses(s): Returns \'YES\' if the given string is a valid sequence of parentheses, otherwise returns \'NO\'. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping.values(): stack.append(char) elif char in mapping: if stack and stack[-1] == mapping[char]: stack.pop() else: return \'NO\' else: return \'NO\' return \'YES\' if not stack else \'NO\'"},{"question":"Mountain hiking is a popular pastime, but it can be dangerous if hikers are not careful. You are planning a hiking trip for a group of people. Given the elevation map of the mountain range represented as an array of heights, you need to determine if there exists a peak that satisfies the following conditions: 1. The peak is higher than any point to its left, and any point to its right. 2. The difference in height between the peak and the points immediately to its left and right should be at least a given threshold `d`. Consider a point `i` in the elevation map, the point is a peak if and only if: - `heights[i] > heights[i-1]` - `heights[i] > heights[i+1]` - `heights[i] - heights[i-1] >= d` - `heights[i] - heights[i+1] >= d` Your task is to find the index of such a peak if it exists, otherwise return `-1`. If there are multiple such peaks, return the index of the first occurring peak. # Input: - The first line of input contains an integer `n` (2 leq n leq 10^5) — the number of points in the elevation map. - The second line contains `n` integers representing the heights of the mountain points, where each height is within the range [1, 10^9]. - The third line contains an integer `d` (1 leq d leq 10^9) — the minimum required height difference. # Output: - Print a single integer — the index of the first occurring peak that satisfies the conditions, or `-1` if no such peak exists. # Example: Input: ``` 8 2 3 1 5 3 6 2 4 2 ``` Output: ``` 3 ``` Explanation: - The peak at index 3 (height 5) is higher than its neighbors (heights 1 and 3) and the height differences (5 - 1 = 4 and 5 - 3 = 2) are both greater than or equal to `d` (which is 2). - Though height at index 5 is another peak (height 6), index 3 is the first occurring peak that satisfies the conditions. Input: ``` 5 5 3 6 2 8 1 ``` Output: ``` 2 ``` Explanation: - The peak at index 2 (height 6) is higher than its neighbors (heights 3 and 2) and the height differences (6 - 3 = 3 and 6 - 2 = 4) are both greater than or equal to `d` (which is 1). - The peak at index 4 is higher, but index 2 is the first occurring peak that satisfies the conditions.","solution":"def find_peak(n, heights, d): for i in range(1, n-1): if (heights[i] > heights[i-1] and heights[i] > heights[i+1] and heights[i] - heights[i-1] >= d and heights[i] - heights[i+1] >= d): return i return -1"},{"question":"Given a sequence of integers, we want to determine how we can make the sequence non-decreasing by removing the minimum number of elements. Formally, you are given a sequence of integers of length `n`. The task is to find out the minimum number of elements that need to be removed from the sequence to make it non-decreasing. The first line of the input contains an integer `t` (1 ≤ t ≤ 1000), the number of test cases. Each test case consists of two lines: The first line contains an integer `n` (1 ≤ n ≤ 2000) — the number of elements in the sequence. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^4) — the sequence of integers. For each test case, print a single integer — the minimum number of elements that need to be removed to make the sequence non-decreasing. # Example Input ``` 2 6 5 3 4 8 6 7 5 4 3 2 1 5 ``` Output ``` 2 3 ```","solution":"def min_removals_to_make_non_decreasing(t, test_cases): def longest_non_decreasing_subsequence_length(arr): from bisect import bisect_right dp = [] for num in arr: pos = bisect_right(dp, num) if pos == len(dp): dp.append(num) else: dp[pos] = num return len(dp) results = [] for n, sequence in test_cases: lnds_len = longest_non_decreasing_subsequence_length(sequence) min_removals = n - lnds_len results.append(min_removals) return results"},{"question":"In a certain computer network, there are n computers connected by m bidirectional communication links. Each link has a communication time associated with it. The system administrator wants to estimate the minimal time required to send a message from any computer to another computer in this network. You are given the number of computers n and the number of communication links m. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n and 1 leq w leq 10^6), representing a bidirectional communication link between computers u and v with a communication time w. Write a program to find the minimal maximum communication time required for message transmission between the most distant pair of computers in this network. Input: - The first line contains two integers n and m (1 leq n leq 1000, 1 leq m leq 10000). - Each of the next m lines contains three integers u, v, and w. Output: - Print a single integer representing the minimal maximum time required to send a message between the most distant pair of computers in the network. Example: Input: ``` 4 4 1 2 4 1 3 2 2 4 6 3 4 8 ``` Output: ``` 10 ``` In this example, the minimal maximum time required to send a message between the most distant pair of computers is 10.","solution":"import heapq import sys def minimal_max_communication_time(n, m, edges): Returns the minimal maximum communication time required to send a message between the most distant pair of computers in a network. :param n: Number of computers :param m: Number of communication links :param edges: List of edges, each defined as (u, v, w) :return: Minimal maximum communication time def dijkstra(start, n, graph): distances = [sys.maxsize] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) all_distances = [] for i in range(1, n + 1): distances = dijkstra(i, n, graph) max_distance = max(distances[1:]) # Ignore the 0th index which is dummy. all_distances.append(max_distance) return max(all_distances)"},{"question":"Ivan has a collection of unique books, each identified by an integer ID. He likes to arrange his collection in order, but lately, he has been too busy to organize it. Each day, he receives a new book, and he places it in a stack on top of the books he received from previous days. Occasionally, he finds some time to arrange the books from the top of the stack down to a certain depth. Since Ivan doesn\'t like to rearrange the same book more than once, he wants to make sure he arranges as many unique books as possible during his available time. Ivan wants to know how many unique books he can arrange if he starts from the top of the stack and goes down to a certain depth. The input consists of two lines: 1. The first line contains two integers n and d (1 ≤ n ≤ 100, 1 ≤ d ≤ n) — the total number of books Ivan has received and the depth to which he has time to arrange the books, respectively. 2. The second line contains n integers representing the IDs of the books in the order Ivan received them, from the first book received to the last book placed on the top of the stack. Output a single integer — the number of unique books Ivan can arrange from the top of the stack down to depth d. # Example Input: ``` 6 3 4 6 4 2 3 2 ``` Output: ``` 2 ``` Explanation: From the top of the stack (last received) down to depth 3, the books are [2, 3, 2]. There are 2 unique books (2 and 3) within this depth.","solution":"def count_unique_books(n, d, books): Count the number of unique books from the top of the stack down to depth d. Parameters: n (int): The total number of books. d (int): The depth to which Ivan has time to arrange the books. books (list): A list of integers representing the IDs of the books. Returns: int: The number of unique books within the depth d. # Get the top d books from the stack top_books = books[-d:] # Use a set to count unique book IDs unique_books = set(top_books) return len(unique_books)"},{"question":"Santa\'s Sleigh has broken down! To fuel his sleigh, Santa needs to collect exactly m magical snowflakes. Each snowflake has an energy value associated with it. The North Pole has n snowbanks, each containing an unlimited number of snowflakes, and every snowflake in the snowbank has the same energy value. Santa can collect as many snowflakes as needed from any snowbank. You are given the energy values of each snowbank. Santa wants to maximize the total energy of the snowflakes he collects. However, Santa wants to keep the load light, and hence, he will only collect exactly m magical snowflakes in total. Write a program that determines the maximum total energy Santa can collect by choosing exactly m snowflakes from the given snowbanks. The first line of the input contains two integers n and m (1 leq n leq 1000, 1 leq m leq 10^6) — the number of snowbanks and the total number of snowflakes Santa needs to collect. The second line contains n integers e_1, e_2, ..., e_n (1 leq e_i leq 1000), the energy values of the snowflakes in each snowbank. Print one integer, the maximum total energy Santa can collect by choosing exactly m snowflakes from the given snowbanks. For example, if Santa needs to collect exactly 5 snowflakes and there are 3 snowbanks with energy values [100, 200, 300], Santa should collect all 5 snowflakes from the third snowbank, resulting in a maximum total energy of 1500.","solution":"def max_total_energy(n, m, energy_values): Returns the maximum total energy Santa can collect by choosing exactly m snowflakes. :param n: int: Number of snowbanks :param m: int: Total number of snowflakes to collect :param energy_values: List[int]: Energy values of snowflakes in each snowbank :return: int: Maximum total energy # Sort energy values in decreasing order to maximize total energy energy_values.sort(reverse=True) # The maximum energy will be the highest energy value multiplied by m max_energy = energy_values[0] * m return max_energy # Example usage: # n = 3, m = 5, energy_values = [100, 200, 300] # The maximum total energy should be 1500 n = 3 m = 5 energy_values = [100, 200, 300] print(max_total_energy(n, m, energy_values)) # Output: 1500"},{"question":"Given a sequence of integers, determine the longest arithmetic subarray. An arithmetic subarray is an array that contains at least two integers and the differences between consecutive integers are all the same. For example, in the array `[1, 3, 5, 6, 7, 9]`, the subarray `[1, 3, 5]` is an arithmetic subarray because the difference between consecutive elements is `2`. The first line contains an integer n (1 leq n leq 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9). Print a single integer — the length of the longest arithmetic subarray. # Examples: **Input:** ``` 6 1 3 5 6 7 9 ``` **Output:** ``` 3 ``` **Input:** ``` 4 9 7 5 3 ``` **Output:** ``` 4 ``` **Input:** ``` 5 1 2 2 2 3 ``` **Output:** ``` 3 ```","solution":"def longest_arithmetic_subarray(n, arr): if n < 2: return n max_length = 2 curr_length = 2 diff = arr[1] - arr[0] for i in range(2, n): current_diff = arr[i] - arr[i-1] if current_diff == diff: curr_length += 1 else: diff = current_diff curr_length = 2 max_length = max(max_length, curr_length) return max_length # Example usage: # n = 6 # arr = [1, 3, 5, 6, 7, 9] # print(longest_arithmetic_subarray(n, arr)) # Output: 3"},{"question":"Magda recently discovered a fascinating number sequence, which she called a p-sequence. A p-sequence is defined as follows: - The first element of the sequence is 1. - Each subsequent element is the product of the previous element and a fixed integer p. She now wants to find out the sum of the first m elements of a p-sequence modulo 1000000007 (10^9 + 7). Given values for p and m, calculate the sum of the first m elements of the p-sequence modulo 1000000007. # Input A single line containing two space-separated integers: p (1 ≤ p ≤ 10^9) and m (1 ≤ m ≤ 10^5). # Output Print a single integer — the sum of the first m elements of the p-sequence modulo 1000000007. # Example Input ``` 2 4 ``` Output ``` 15 ``` # Explanation The 2-sequence with 4 elements is: [1, 2, 4, 8]. The sum of these elements is 1 + 2 + 4 + 8 = 15. 15 modulo 1000000007 is 15.","solution":"def p_sequence_sum(p, m): Calculate the sum of the first m elements of a p-sequence modulo 1000000007. Parameters: p (int): The fixed integer multiplier of the p-sequence. m (int): The number of elements in the p-sequence. Returns: int: The sum of the first m elements of the p-sequence modulo 1000000007. MOD = 1000000007 if p == 1: return m % MOD sum_p_seq = (pow(p, m, MOD * (p - 1)) - 1) // (p - 1) return sum_p_seq % MOD"},{"question":"Julia is an avid collector of gemstones. She classifies gemstones based on their rarity and their unique properties. One day, she decides to arrange her collection and wants to count the number of distinct types of gemstones she has, based on a certain classification rule. Julia’s collection can be represented as a list of gemstones, where each gemstone is described by a string. Each string is composed of lowercase English letters, and each letter represents a specific property of the gemstone. Julia wants to classify gemstones such that gemstones having the exact same set of properties are considered of the same type. For example, the gemstones represented by the strings \\"ab\\" and \\"ba\\" are of the same type because they both have the properties \'a\' and \'b\'. Help Julia by writing a program to determine the number of distinct types of gemstones in her collection. # Input - The first line contains an integer n (1 leq n leq 10^5), the number of gemstones in Julia\'s collection. - The next n lines each contain a string of lowercase English letters representing a gemstone. The length of each string is between 1 and 100. # Output - Print a single integer, the number of distinct types of gemstones in Julia\'s collection. # Example Input ``` 5 aab bca abc bac aaa ``` Output ``` 3 ``` Explanation - The set {a, b} corresponds to the gemstones \\"aab\\", \\"bca\\", \\"abc\\", and \\"bac\\". - The set {a} corresponds to the gemstone \\"aaa\\". - Therefore, there are 3 distinct types of gemstones.","solution":"def count_distinct_gemstone_types(n, gemstones): Determines the number of distinct types of gemstones based on unique property sets. Parameters: n (int): Number of gemstones. gemstones (list of str): List of gemstones represented as strings of properties. Returns: int: Number of distinct types of gemstones. unique_sets = set() for gemstone in gemstones: # Create a frozenset of properties in the gemstone to ensure uniqueness property_set = frozenset(gemstone) unique_sets.add(property_set) return len(unique_sets)"},{"question":"Alice has been given a set of interference tasks to solve by her professor. As the control unit of an automated factory line, her job is to ensure the line operates within specific constraints. There is a factory line controlled by a sequence of operations, which is represented as an array of integers. The array can contain both positive and negative numbers. A positive number represents that operation should be done, and a negative number indicates that operation should be skipped. Alice wants to find the maximum sum of a contiguous subarray with length not exceeding a given integer K. Can you help her achieve this? Input details: - The first line contains two integers n and K (1 ≤ n ≤ 200,000, 1 ≤ K ≤ n), where n is the length of the array and K is the maximum length of the contiguous subarray. - The second line contains n integers a1, a2, ..., an (-100,000 ≤ ai ≤ 100,000), representing the sequence of operations. Output details: - Output the maximum sum of a contiguous subarray with length not exceeding K. Example: Input: 8 3 -1 2 3 -4 5 6 -7 8 Output: 11 Explanation: In this example, the maximum sum of a contiguous subarray with length not exceeding 3 is achieved by the subarray [5, 6], which sums to 11.","solution":"def max_sum_subarray_with_length_not_exceeding_k(arr, K): n = len(arr) max_sum = float(\'-inf\') for curr_length in range(1, K+1): current_sum = sum(arr[:curr_length]) max_sum = max(max_sum, current_sum) for i in range(curr_length, n): current_sum += arr[i] - arr[i - curr_length] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a distant kingdom, there is a tradition where people decorate their houses with multicolored strings of lights during the holiday season. Each string of lights can be represented as a sequence of integers, where each integer denotes a different color. The beauty of a string of lights is determined by how many distinct colors it has. However, due to an ancient rule in the kingdom, any string of lights used for decoration must only change colors at most once. This means that each string of lights can be divided into two non-empty continuous parts, one part where all the lights are of the same color, and the other part can be of a different single color. Given a string of lights represented as an array of integers, determine the maximum beauty that can be achieved by selecting a contiguous subarray of this string that follows the kingdom\'s rule. **Input:** - The first line contains a single integer n (1 leq n leq 10^5) — the length of the string of lights. - The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^5) — the colors of the lights in the string. **Output:** - Print a single integer — the maximum beauty (the number of distinct colors) of any valid contiguous subarray of the given string of lights according to the kingdom\'s rule. **Example:** ``` Input: 6 2 2 2 3 3 3 Output: 2 Input: 4 1 2 2 1 Output: 2 Input: 5 4 4 4 4 4 Output: 1 ``` **Explanation:** In the first example, the entire string \\"2 2 2 3 3 3\\" follows the rule, resulting in a beauty of 2. In the second example, the subarray \\"2 2\\" followed by \\"1\\" or \\"1\\" followed by \\"2 2\\" will result in the maximum beauty of 2. In the third example, the entire string consists of the same color, which results in a beauty of 1.","solution":"def find_maximum_beauty(n, lights): Determine the maximum beauty of any valid contiguous subarray of lights according to the kingdom\'s rule. # As we are dealing with the arr which changes color at most once, # we can find the maximum beauty by checking pairs. max_beauty = 1 color_counts = {} # Keeps track of the colors and their counts for i in range(n): # If it\'s the same color as the previous one, continue if i > 0 and lights[i] != lights[i-1]: # Check how many distinct colors we have in this part if len(color_counts) > max_beauty: max_beauty = len(color_counts) # Reset color_counts when we find a new color color_counts = {lights[i-1]: 0} # Add current color to the map if lights[i] in color_counts: color_counts[lights[i]] += 1 else: color_counts[lights[i]] = 1 # Final check after finishing the loop return max(max_beauty, len(color_counts))"},{"question":"You are given a two-dimensional matrix of size `n x m` where each cell contains an integer value. Your task is to find the sum of the integers in any sub-matrix of the given matrix for a number of queries. Define the sum function which calculates the total sum of the elements present in the given sub-matrix. The first line contains two integers `n` and `m` (1 le n, m le 10^3) — the number of rows and columns in the matrix. The next `n` lines contain `m` integers each, representing the values in the matrix, with each value between `-10^9` and `10^9`. The following line contains an integer `q` (1 le q le 10^4) — the number of queries. The following `q` lines each contain four integers `x1`, `y1`, `x2`, `y2` (1 le x1 ≤ x2 ≤ n, 1 le y1 ≤ y2 ≤ m) representing the top-left and bottom-right corners of the sub-matrix for which you need to calculate the sum. Output `q` integers — the sum of integers for each query. **Example** Input: ``` 3 3 1 -2 3 -4 5 6 7 -8 9 2 1 1 2 2 2 2 3 3 ``` Output: ``` 0 12 ``` Explanation: For the first query, summing the elements from `(1, 1)` to `(2, 2)` results in: ``` 1 -2 -4 5 ``` Which totals `0`. For the second query, summing the elements from `(2, 2)` to `(3, 3)` results in: ``` 5 6 -8 9 ``` Which totals `12`.","solution":"def sum_sub_matrix(matrix, queries): n = len(matrix) m = len(matrix[0]) # Calculate prefix sums prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): prefix_sum[i + 1][j + 1] = (matrix[i][j] + prefix_sum[i][j + 1] + prefix_sum[i + 1][j] - prefix_sum[i][j]) results = [] for x1, y1, x2, y2 in queries: # Convert 1-based indices to 0-based indices sum_value = (prefix_sum[x2][y2] - prefix_sum[x1 - 1][y2] - prefix_sum[x2][y1 - 1] + prefix_sum[x1 - 1][y1 - 1]) results.append(sum_value) return results"},{"question":"There is a magical tree with n nodes and n-1 edges. Each node of the tree has an integer value assigned to it. The nodes are indexed from 1 to n and the root of the tree is node 1. Your task is to process multiple queries on the tree. Each query is given in the form of a node and a threshold value, and for each query, you need to find the number of nodes in the subtree of the given node whose assigned values are at least equal to the threshold value. The first line of input contains two integers n and q (1 leq n, q leq 10^5) — the number of nodes in the tree and the number of queries respectively. The second line contains n integers, where the i-th integer represents the value assigned to the i-th node. Each of the next n-1 lines contains two integers u and v (1 leq u, v leq n) denoting an edge between node u and node v. Each of the next q lines contains two integers v and k (1 leq v leq n, 1 leq k leq 10^9) — the node and the threshold value for the query. Output q integers, where the i-th integer denotes the number of nodes in the subtree of node v whose values are at least k for the i-th query. Note: The subtree of a node v includes all nodes that are reachable from v by descending edges. **Example:** Input: ``` 5 3 3 5 2 6 4 1 2 1 3 2 4 2 5 1 4 2 3 3 2 ``` Output: ``` 3 3 2 ``` **Explanation:** For the first query (1, 4), the subtree of node 1 includes all nodes (1, 2, 3, 4, 5). Three of these nodes have values at least 4: nodes 2, 4, and 5 (with values 5, 6, and 4). For the second query (2, 3), the subtree of node 2 includes nodes (2, 4, 5). All three nodes have values at least 3. For the third query (3, 2), the subtree of node 3 includes only itself and its value (2) is at least 2.","solution":"from collections import defaultdict, deque def process_queries(n, q, values, edges, queries): # Construct adjacency list for the tree graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Store subtree info subtree_values = defaultdict(list) def dfs(node, parent): subtree_nodes = [values[node - 1]] # Node values are 1-indexed for neighbor in graph[node]: if neighbor != parent: subtree_nodes.extend(dfs(neighbor, node)) subtree_values[node] = sorted(subtree_nodes, reverse=True) return subtree_nodes # Perform DFS from the root node (1) dfs(1, -1) results = [] for v, k in queries: subtree_val_list = subtree_values[v] # Find the first value which is less than k using binary search count = sum(val >= k for val in subtree_val_list) results.append(count) return results"},{"question":"Alice is organizing a coding competition and wants to create unique identifiers for participants. Each identifier consists of lowercase alphabetic characters only and should be of a specific length. However, some strings might not be eligible because they could have a repeating pattern of characters. Alice defines a string as \\"valid\\" if it does not contain any substring that is repeated consecutively. For instance, \\"ababa\\" is invalid because \\"ab\\" is repeated, whereas \\"abcabc\\" is invalid because \\"abc\\" is repeated. However, \\"abcde\\" and \\"aabbaabb\\" are considered valid because they do not contain any repeating substrings of any length. Your task is to determine if a given string is valid according to Alice\'s criteria. You are given a single string of lowercase alphabetic characters with a length ranging from 1 to 100 inclusive. Output \\"YES\\" if the string is valid, and \\"NO\\" otherwise.","solution":"def is_valid_string(s): Returns \'YES\' if the string is valid, \'NO\' otherwise. A string is considered valid if it does not contain any substring that is repeated consecutively. length = len(s) for i in range(1, length // 2 + 1): for j in range(length - i * 2 + 1): if s[j:j + i] == s[j + i:j + i * 2]: return \\"NO\\" return \\"YES\\""},{"question":"Petya has a favorite number which he considers very special. He calls a number \\"beautiful\\" if it consists only of digits 3 and 6. For example, numbers 333, 3663, and 666 are \\"beautiful\\" while 123, 345, and 789 are not. One day, Petya received a number `n` as a present. He wants to determine the largest \\"beautiful\\" number that is smaller than or equal to `n`. If no such number exists, he would like to know. Help Petya find this number. # Input The single line contains a single integer `n` (1 ≤ n ≤ 10^18). The number doesn\'t contain leading zeroes. # Output Print the largest \\"beautiful\\" number that is smaller than or equal to `n`. If no such number exists, print `-1`. # Example Input 573 Output 366 Input 3 Output 3 Input 1 Output -1","solution":"def largest_beautiful_number(n): Finds the largest \\"beautiful\\" number smaller than or equal to n. A \\"beautiful\\" number consists only of the digits 3 and 6. str_n = str(n) length = len(str_n) # Generate the largest beautiful numbers of the same length or shorter for length in range(len(str_n), 0, -1): beautiful_numbers = generate_beautiful_numbers(\\"\\", length) for num in sorted(beautiful_numbers, reverse=True): if int(num) <= n: return int(num) return -1 def generate_beautiful_numbers(prefix, length): Recursively generate all beautiful numbers of a given length. if length == 0: return {prefix} beautiful_numbers = set() beautiful_numbers |= generate_beautiful_numbers(prefix + \'3\', length - 1) beautiful_numbers |= generate_beautiful_numbers(prefix + \'6\', length - 1) return beautiful_numbers"},{"question":"You are given a collection of words composed of lowercase English letters. Each word is unique in this collection. Your task is to determine, for each word, the least number of characters you need to append to the end of it to make it a palindrome. A palindrome is a word that reads the same forwards and backwards. The first line contains an integer n (1 ≤ n ≤ 1 000) – the number of words in the collection. Each of the following n lines contains a single word wi (1 ≤ |wi| ≤ 1000) – a unique word in the collection. Output n lines. Each line should contain a single integer – the minimum number of characters that need to be appended to the end of wi to make it a palindrome. # Example Input ``` 3 abc race madam ``` Output ``` 2 2 0 ``` # Explanation 1) For the word \\"abc\\": Appending \\"cb\\" results in the palindrome \\"abccba\\". 2) For the word \\"race\\": Appending \\"car\\" results in the palindrome \\"racecar\\". 3) The word \\"madam\\" is already a palindrome, so no characters need to be appended.","solution":"def min_append_to_palindrome(word): Returns the minimum number of characters that need to be appended to the end of the word to make it a palindrome. for i in range(len(word)): if word[i:] == word[i:][::-1]: return i return len(word) def process_words(n, words): Takes an integer n and a list of n words, returns a list of integers where each integer represents the minimum number of characters that need to be appended to the end of the corresponding word to make it a palindrome. return [min_append_to_palindrome(word) for word in words]"},{"question":"Arina is managing a library system and is trying to optimize the shelving process. The library has n shelves, each with a maximum capacity of k books. Arina has a total of m unique books, each with a unique ID from 1 to m. She wants an algorithm to help her distribute all the books such that no two adjacent books on a shelf have IDs that differ by more than d. Determine if it is possible to place all books on the shelves according to the rules given. If it is possible, print \\"YES\\" and provide any valid distribution of the books on the shelves. If it is not possible, print \\"NO\\". The first line of the input contains three integers n, k, and d (1 ≤ n ≤ 100, 1 ≤ k ≤ 100, 1 ≤ d ≤ 100,000). The second line contains an integer m (1 ≤ m ≤ n*k), the number of unique books. Output \\"YES\\" if it’s possible to place all the books under the given constraints, followed by n lines, each with the IDs of the books on a particular shelf in a valid order. If it’s not possible, output \\"NO\\". Example Input: 3 5 1 12 Example Output: YES 1 2 3 4 5 6 7 8 9 10 11 12 Explanation: All the shelves have no books with adjacent IDs differing by more than 1, and all the books are accommodated.","solution":"def distribute_books(n, k, d, m): This function checks if it\'s possible to distribute m books across n shelves and whether the difference between adjacent book ids on each shelf does not exceed d. If possible, it returns \\"YES\\" and the distribution, otherwise, it returns \\"NO\\". if m > n * k: return \\"NO\\" distribution = [] book_id = 1 for _ in range(n): shelf = [] for _ in range(k): if book_id <= m: shelf.append(book_id) book_id += 1 else: break distribution.append(shelf) for shelf in distribution: for i in range(1, len(shelf)): if abs(shelf[i] - shelf[i-1]) > d: return \\"NO\\" result = [\\"YES\\"] for shelf in distribution: result.append(\\" \\".join(map(str, shelf))) return \\"n\\".join(result)"},{"question":"Alice\'s favorite number is 5. She has a list of integers, and she calls a segment of the list \\"nice\\" if the sum of the numbers in the segment is divisible by 5. She wonders how many nice segments exist in the list. Given an integer array `arr` with `n` elements, find the number of nice segments in the array. The first line of the input contains an integer `n` (1 ≤ n ≤ 200,000) — the number of elements in the array. The second line contains `n` space-separated integers `arr[i]` (|arr[i]| ≤ 1,000) — the elements of the array. Output a single integer, the count of nice segments in the array. **Example:** Input: ``` 5 1 2 3 4 5 ``` Output: ``` 4 ``` **Explanation:** The nice segments are: - [5] - [2, 3] - [1, 4] - [1, 2, 3, 4, 5]","solution":"def count_nice_segments(n, arr): Returns the number of nice segments in the array where the sum is divisible by 5. count = 0 prefix_sums = {0: 1} current_sum = 0 for num in arr: current_sum += num remainder = current_sum % 5 if remainder in prefix_sums: count += prefix_sums[remainder] prefix_sums[remainder] = prefix_sums.get(remainder, 0) + 1 return count"},{"question":"Unicode Software Solutions has developed a unique text editor that allows users to highlight matching substrings easily. The highlighted substrings must adhere to specific match rules defined by the user. One particular match rule requires that two substrings are considered matching if they have the exact same set of characters, regardless of the order of characters in each substring. You are given a string `mainStr` of length `n` and a string `subStr` of length `m` (1 ≤ m ≤ n ≤ 100,000). You need to find all the starting indexes (0-based) of `subStr` in `mainStr` where the substring from `mainStr` matches `subStr` according to the matching rule described above. Note that the characters’ frequencies must match between `subStr` and the corresponding substring in `mainStr`. Input: - The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the length of `mainStr`. - The second line contains a single integer `m` (1 ≤ m ≤ n) — the length of `subStr`. - The third line contains a string `mainStr` of length `n`. - The fourth line contains a string `subStr` of length `m`. Output: - Print the count of the starting indexes where `subStr` matches in `mainStr`. - Print all starting indices (0-based) in the form of a space-separated list on the second line. If there are no positions, print an empty line. Example: Input: ``` 10 3 abcdfabcda bca ``` Output: ``` 2 0 5 ``` Explanation: - The string `subStr = \\"bca\\"` has character frequencies `a:1`, `b:1`, and `c:1`. - The substring of `mainStr` from index 0 to 2 is `\\"abc\\"` which matches `subStr` because it contains exactly one `a`, one `b`, and one `c`. - Similarly, the substring of `mainStr` from index 5 to 7 is `\\"abc\\"`, so it also matches `subStr`.","solution":"from collections import Counter def find_matching_substring_indices(n, m, mainStr, subStr): Finds all starting indices where the substring in mainStr matches subStr according to the matching rule (exact same set of characters). matching_indices = [] subStr_freq = Counter(subStr) window_freq = Counter(mainStr[:m]) if window_freq == subStr_freq: matching_indices.append(0) for i in range(m, n): window_freq[mainStr[i]] += 1 window_freq[mainStr[i - m]] -= 1 if window_freq[mainStr[i - m]] == 0: del window_freq[mainStr[i - m]] if window_freq == subStr_freq: matching_indices.append(i - m + 1) return matching_indices def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) mainStr = data[2] subStr = data[3] matching_indices = find_matching_substring_indices(n, m, mainStr, subStr) print(len(matching_indices)) print(\\" \\".join(map(str, matching_indices))) if __name__ == \'__main__\': main()"},{"question":"Given a string s consisting of lowercase letters, determine whether the string can be rearranged such that no two adjacent characters are the same. If such an arrangement is possible, return \\"YES\\", otherwise return \\"NO\\". The input contains a single string s of length between 1 and 100, inclusive. Output \\"YES\\" if the string can be rearranged without two identical adjacent characters, otherwise output \\"NO\\". For example: - For the input string \\"aab\\", the output should be \\"YES\\". One possible arrangement is \\"aba\\". - For the input string \\"aaab\\", the output should be \\"NO\\". There is no arrangement that avoids adjacent identical characters.","solution":"from collections import Counter def can_rearrange_no_adjacent(s): Determines if the string can be rearranged such that no two adjacent characters are the same. Parameters: s (str): The input string consisting of lowercase letters. Returns: str: \\"YES\\" if the string can be rearranged accordingly, otherwise \\"NO\\". # Count the frequency of each character freq = Counter(s) # Find the maximum frequency of any character max_freq = max(freq.values()) # Check if any character frequency is greater than half the length of the string plus one if max_freq > (len(s) + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"At a research lab, scientists are analyzing a special digital sequence of bits. They are interested in determining the longest contiguous subsequence that contains an equal number of 0s and 1s. The sequence is represented as a string of \\"0\\" and \\"1\\" characters. You need to write a function to find the length of the longest contiguous subsequence in which the number of zeros is equal to the number of ones. If no such subsequence exists, your function should return 0. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Each of the next t lines contains a binary string s (1 leq |s| leq 10^5). Print the length of the longest contiguous subsequence for each test case. # Example: Input: ``` 3 110001 1001 1111 ``` Output: ``` 6 4 0 ``` # Explanation: In the first example, the entire sequence \\"110001\\" has equal number of 0s and 1s. In the second example, the longest contiguous subsequence is \\"1001\\". In the third example, there is no subsequence with an equal number of 0s and 1s, so the result is 0.","solution":"def longest_equal_subsequence(t, sequences): This function takes the number of test cases t and a list of binary string sequences. It returns a list of integers representing the length of the longest contiguous subsequence with an equal number of 0s and 1s for each string. results = [] for s in sequences: n = len(s) max_len = 0 prefix_sum = 0 prefix_sum_map = {0: -1} for i in range(n): if s[i] == \'0\': prefix_sum -= 1 else: prefix_sum += 1 if prefix_sum in prefix_sum_map: current_len = i - prefix_sum_map[prefix_sum] if current_len > max_len: max_len = current_len else: prefix_sum_map[prefix_sum] = i results.append(max_len) return results"},{"question":"Given a binary tree, write a program to find the longest path from the root node to a leaf node. A path is defined as a sequence of nodes from the root to any leaf node, where each node in the sequence is connected by an edge. A root is a node with no parent, and a leaf is a node with no children. The length of a path is the number of edges in the path. # Input The input consists of several lines: - The first line contains an integer n (1 le n le 10^5) which is the number of nodes in the tree. - Each of the next n-1 lines contains two integers u and v (1 le u, v le n) indicating there is an edge connecting node u and node v. # Output Output a single integer, which is the length of the longest path from the root node to any leaf node. # Example Input: ``` 5 1 2 1 3 3 4 3 5 ``` Output: ``` 2 ``` # Explanation In the given example, the root node is node 1. The longest path from node 1 to a leaf node (either 4 or 5) is: 1 -> 3 -> 4 or 1 -> 3 -> 5 Each of these paths has a length of 2 edges. Hence, the output is 2.","solution":"class TreeNode: def __init__(self, val): self.val = val self.children = [] def build_tree(n, edges): Build an adjacency list representation of the tree. nodes = {i: TreeNode(i) for i in range(1, n + 1)} for u, v in edges: nodes[u].children.append(nodes[v]) nodes[v].children.append(nodes[u]) return nodes[1] # Return the root node def longest_path(root): Find the longest path from the root to a leaf node. def dfs(node, parent): max_depth = 0 for child in node.children: if child != parent: max_depth = max(max_depth, dfs(child, node)) return max_depth + 1 return dfs(root, None) - 1 def find_longest_path(n, edges): root = build_tree(n, edges) return longest_path(root)"},{"question":"Alice loves playing with arrays. Today, she invented a new game with an array of integers. She will start with an integer array of size n, and her goal is to make all the elements equal by performing the minimum number of operations. In one operation, she can select any subarray of size at least 2 and replace all elements of the subarray with their median. Note: The median of a subarray of odd length is the middle element when all elements are sorted in non-decreasing order, and if the subarray length is even, either of the two central elements can be considered as the median. Alice is wondering what the minimum number of operations she needs to make all elements of the original array equal. The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 100): the size of the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100): the elements of the array. Output the minimum number of operations required to make all elements of the array equal. **Example:** Input: ``` 5 3 3 3 3 3 ``` Output: ``` 0 ``` Input: ``` 4 5 10 5 10 ``` Output: ``` 2 ``` Explanation: In the first example, the array is already composed of equal elements, so no operations are needed. In the second example, you can choose subarrays [5, 10] and replace them with their median [5], and then similar subarray operations to make the array finally equal.","solution":"def min_operations_to_make_equal(n, arr): Returns the minimum number of operations required to make all elements of the array equal. Each operation involves selecting any subarray of size at least 2 and replacing all elements of the subarray with their median. if n == 1: # If there\'s only one element, it\'s already equal return 0 distinct_elements = len(set(arr)) # If there are no distinct elements, array is already equal if distinct_elements == 1: return 0 return distinct_elements - 1 # We need at least (number of distinct elements - 1) operations # Example for unit tests print(min_operations_to_make_equal(5, [3, 3, 3, 3, 3])) # Expected: 0 print(min_operations_to_make_equal(4, [5, 10, 5, 10])) # Expected: 2"},{"question":"Bruce is organizing a concert where m bands will perform. The concert consists of n time slots, with each time slot exactly one hour long. He wants to schedule the bands such that each band will perform at exactly one time slot and no two bands perform simultaneously. Each band has a set of preferred time slots where they wish to perform, and to make it more challenging, every time slot has a popularity score indicating how good it is for the bands to perform in. Bruce wants to maximize the total popularity score of the assigned time slots for all the bands. Given the list of time slots each band prefers and the popularity scores of each time slot, help Bruce schedule the bands to maximize the total popularity score. The first line contains two integers m and n (1 ≤ m ≤ 1000, 1 ≤ n ≤ 1000) — the number of bands and the number of time slots respectively. The second line contains n integers, where the i-th integer is the popularity score of the i-th time slot (0 ≤ score ≤ 1000). Each of the next m lines contains an integer k followed by k distinct integers t1, t2, ..., tk (1 ≤ k ≤ n, 1 ≤ t1 < t2 < ... < tk ≤ n) indicating the preferred time slots of the band. Print the maximum total popularity score Bruce can achieve. If it is impossible to schedule the bands under the given constraints, print -1. Example: For the first sample, if Bruce schedules Band 1 in slot 2, Band 2 in slot 5, Band 3 in slot 3 and Band 4 in slot 1, the total popularity score is 10 + 8 + 6 + 4 = 28. In the second example, it is impossible to schedule all the bands since Band 3 and Band 4 have no available slots. Therefore, the result is -1.","solution":"import heapq def schedule_bands(m, n, popularity_scores, preferences): Schedule the bands to time slots to maximize the total popularity score. Parameters: m (int): Number of bands. n (int): Number of time slots. popularity_scores (list): List of popularity scores for each time slot. preferences (list of lists): List containing preferred time slots for each band. Returns: int: Maximal total popularity score or -1 if it\'s impossible to schedule all bands. # Create a list of tuples (popularity_score, time_slot_index). popularity_heap = [(-score, i) for i, score in enumerate(popularity_scores)] heapq.heapify(popularity_heap) # Convert preferences to a set of preferred time slots for each band for easy lookup. preferred_slots = [set(p[1:]) for p in preferences] # Result tally total_popularity = 0 assigned_slots = set() for _ in range(m): while popularity_heap: score, slot = heapq.heappop(popularity_heap) slot += 1 # to adjust index as the time slots have indices from 1 to n for band_slots in preferred_slots: if slot in band_slots and slot not in assigned_slots: total_popularity -= score assigned_slots.add(slot) break else: continue break else: return -1 # If there\'s no valid slot to assign return total_popularity"},{"question":"You are provided with an array `a` consisting of `n` integers. Your task is to determine if you can rearrange the array such that no two adjacent elements have the same value. If it is possible, print \\"YES\\" and the rearranged array; otherwise, print \\"NO\\". Input - The first line contains a single integer `n` (`2 ≤ n ≤ 10^5`) — the number of elements in the array. - The second line contains `n` integers `a1, a2, ..., an` (`1 ≤ ai ≤ 10^9`) — the elements of the array. Output - If it is possible to rearrange the array such that no two adjacent elements are equal, print \\"YES\\" on the first line and the rearranged array on the second line. - If it is not possible, print \\"NO\\". Examples # Example 1: **Input:** ``` 5 1 1 2 2 3 ``` **Output:** ``` YES 1 2 1 3 2 ``` # Example 2: **Input:** ``` 4 3 3 3 3 ``` **Output:** ``` NO ``` # Example 3: **Input:** ``` 6 1 2 2 2 2 3 ``` **Output:** ``` NO ``` # Example 4: **Input:** ``` 4 1 2 3 3 ``` **Output:** ``` YES 1 3 2 3 ```","solution":"from collections import Counter import heapq def rearrange_array(n, a): Rearranges array such that no two adjacent elements are the same. :param n: int, the number of elements in the array :param a: list of int, the elements of the array :return: tuple (str, list of int or None), \\"YES\\" and the rearranged array, or \\"NO\\" and None if it is not possible to rearrange # Count frequency of each element count = Counter(a) max_count = max(count.values()) # If the maximum frequency is greater than half of n rounded up, it is impossible to rearrange if max_count > (n + 1) // 2: return \\"NO\\", None # Max-heap based on the frequency of elements max_heap = [(-freq, num) for num, freq in count.items()] heapq.heapify(max_heap) result = [] prev_freq, prev_num = 0, None while max_heap: freq, num = heapq.heappop(max_heap) result.append(num) # Add the previous character back if there\'s remaining count if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_num)) prev_freq, prev_num = freq + 1, num # Use one instance of the current number return \\"YES\\", result # Example of usage: n = 5 a = [1, 1, 2, 2, 3] status, rearranged = rearrange_array(n, a) if status == \\"YES\\": print(status) print(\' \'.join(map(str, rearranged))) else: print(status)"},{"question":"Given an integer array `arr` of length `n`, arrange the array elements into the minimum number of groups such that each group contains two or more contiguous elements with each pair of elements having the same greatest common divisor (GCD). The array elements are between 1 and 1000 (inclusive). Your task is to write a function that returns the minimum number of groups satisfying the above condition. # Input - The first line contains integer `n` (2 ≤ n ≤ 1000) – the length of the array. - The second line contains `n` space-separated integers – the elements of the array `arr`. # Output - Print a single integer – the minimum number of groups. # Example: Input: ``` 5 4 8 6 3 9 ``` Output: ``` 2 ``` Explanation: One possible grouping is [4, 8, 6] and [3, 9]. Both groups have GCD 2 and 3 respectively. **Note:** You can assume that any given arrangement of the array will have at least one valid grouping.","solution":"import math from typing import List def min_gcd_groups(arr: List[int]) -> int: Function to determine the minimum number of groups such that each group contains two or more contiguous elements with each pair of elements having the same greatest common divisor (GCD). n = len(arr) group_count = 0 i = 0 while i < n: j = i current_gcd = arr[i] while j < n and math.gcd(current_gcd, arr[j]) == current_gcd: current_gcd = math.gcd(current_gcd, arr[j]) j += 1 if j - i > 1: group_count += 1 i = j else: i += 1 return group_count def min_gcd_groups_from_input(n: int, arr: List[int]) -> int: return min_gcd_groups(arr)"},{"question":"Nora gave her younger brother Sam a set of blocks to play with. Each block has a unique height. Sam likes to arrange the blocks in a line such that the height of the blocks is non-decreasing or non-increasing. However, Sam doesn\'t want the blocks to be rearranged strictly in one direction (i.e., strictly increasing or strictly decreasing). Instead, he wants to find the longest subsequence where the sequence first increases and then decreases. Given the heights of the blocks, help Sam determine the length of the longest subsequence that first increases and then decreases. Note that the subsequence should be strictly increasing and then strictly decreasing, and each block can be part of at most one subsequence. The input consists of two lines: - The first line contains an integer ( n ) (1 leq n leq 1000) — the number of blocks. - The second line contains ( n ) distinct integers ( h_1, h_2, ldots, h_n ) (1 leq h_i leq 10^6) where ( h_i ) is the height of the ( i )-th block. Output a single integer — the length of the longest subsequence that first increases and then decreases. # Example Input ``` 8 1 2 3 4 5 3 2 1 ``` Output ``` 8 ``` Input ``` 5 5 4 3 2 1 ``` Output ``` 0 ``` Explanation In the first example, the entire sequence forms an increasing and then decreasing subsequence. In the second example, there is no subsequence that first increases and then decreases, so the answer is 0.","solution":"def longest_bitonic_subsequence_length(heights): n = len(heights) if n == 0: return 0 # Increasing subsequence lengths inc = [1] * n for i in range(1, n): for j in range(0, i): if heights[i] > heights[j] and inc[i] < inc[j] + 1: inc[i] = inc[j] + 1 # Decreasing subsequence lengths dec = [1] * n for i in range(n-2, -1, -1): for j in range(n-1, i, -1): if heights[i] > heights[j] and dec[i] < dec[j] + 1: dec[i] = dec[j] + 1 # The longest bitonic subsequence length max_len = 0 for i in range(n): if inc[i] > 1 and dec[i] > 1: max_len = max(max_len, inc[i] + dec[i] - 1) return max_len"},{"question":"You are given a list of integers that represent the heights of different buildings on a street. Your task is to determine the area of the largest rectangle that can be formed by these buildings when viewed from the front. The rectangle\'s width is defined by the number of contiguous buildings, and its height is the height of the shortest building within this range. Each test contains multiple test cases. The first line contains one positive integer t (1 ≤ t ≤ 10) denoting the number of test cases. Description of the test cases follows. The first line of each test case contains one positive integer n (1 ≤ n ≤ 10^5) — the number of buildings on the street. The second line contains n positive integers h_i (1 ≤ h_i ≤ 10^5) — the heights of the buildings. It is guaranteed that the sum of n over all test cases does not exceed 10^5. For every test case, print one integer — the maximum possible rectangle area. Example: Input: 3 6 2 1 5 6 2 3 5 1 2 3 4 5 7 2 1 4 5 1 3 3 Output: 10 9 8 Explanation: In the first test case, the largest rectangle has an area of 10 units, formed by the buildings with heights [5, 6], spanning 2 buildings with a height of 5. In the second test case, the largest rectangle has an area of 9 units, formed by the buildings with heights [1, 2, 3, 4, 5], spanning all 5 buildings with a minimum height of 1. In the third test case, the largest rectangle has an area of 8 units, formed by the buildings with heights [4, 5], spanning 2 buildings with a height of 4.","solution":"def largest_rectangle_area(histogram): Function to calculate the largest rectangle area in a histogram. stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def process_test_cases(test_cases): Function to process multiple test cases. results = [] for case in test_cases: n, heights = case result = largest_rectangle_area(heights) results.append(result) return results"},{"question":"You are given an array of integers of length n. Let\'s call an array beautiful if the sum of the elements in every contiguous subarray of length k is divisible by k. Your task is to find the smallest possible array (in lexicographical order) that satisfies this condition. The first line of input contains two integers n and k (2 le k le n le 100,000). Output an array of n integers, the smallest possible lexicographically, that is beautiful. In the first sample, the smallest possible array that meets the conditions is [1, 1, 1, 1]. For the second sample, the smallest possible array is [1, 2, 1, 2]. Example input: ``` 4 2 ``` Example output: ``` 1 1 1 1 ```","solution":"def find_beautiful_array(n, k): Returns the smallest possible lexicographically array of length n such that the sum of elements in every contiguous subarray of length k is divisible by k. pattern = [(i % k) + 1 for i in range(k)] return (pattern * (n // k)) + pattern[:(n % k)]"},{"question":"Scientists are experimenting with a new type of sequence called an \\"Oscillating Sequence\\". An Oscillating Sequence of length n is defined as a sequence of integers where the absolute difference between consecutive elements is exactly 1. Given an integer n (1 ≤ n ≤ 2 * 10^5), your task is to generate an Oscillating Sequence of length n such that its elements alternate between increasing and decreasing while maintaining the absolute difference rule. Specifically, for even indices, the next element should be one unit greater than the current element, and for odd indices, the next element should be one unit less than the current element. To ensure uniqueness and simplicity, the sequence must start with 1. Input - A single integer n, representing the length of the sequence. Output - A line containing n integers, the elements of the Oscillating Sequence of length n. # Example Input ``` 5 ``` Output ``` 1 0 1 0 1 ``` Input ``` 6 ``` Output ``` 1 0 1 0 1 0 ``` Note: - The starting element is always `1`. - For even indices, add `1` to the previous element, and for odd indices, subtract `1` from the previous element.","solution":"def generate_oscillating_sequence(n): Generate an Oscillating Sequence of length n. sequence = [1] for i in range(1, n): if i % 2 == 0: sequence.append(sequence[-1] + 1) else: sequence.append(sequence[-1] - 1) return sequence"},{"question":"You are given a list of n integers representing the heights of students standing in a line. For a social-awareness campaign, you want to form groups of students such that in each group, the difference between the tallest and the shortest student does not exceed a given value d. More formally, given an array heights of n integers where heights[i] represents the height of the i-th student, you need to split them into one or more groups such that in each group the difference between the maximum and minimum height does not exceed d. Each student must belong to exactly one group. Determine the minimum number of groups required to achieve this. The first line of the input contains two integers n and d (1 ≤ n ≤ 10^5, 0 ≤ d ≤ 10^9) — the number of students and the maximum allowed difference in height within a group. The second line contains n integers heights[i] (0 ≤ heights[i] ≤ 10^9) — the list of students’ heights. Output a single integer — the minimum number of groups required to satisfy the condition. Example: ``` Input: 5 3 1 5 3 6 2 Output: 2 ``` Explanation: We can form the following groups: - Group 1: [1, 2, 3] (since 3 - 1 ≤ 3) - Group 2: [5, 6] (since 6 - 5 ≤ 3)","solution":"def minimum_groups(n, d, heights): Determines the minimum number of groups required such that in each group, the difference between the tallest and shortest student does not exceed d. Args: n: Number of students. d: Maximum allowed difference in height within a group. heights: List of integers representing the students\' heights. Returns: Integer representing the minimum number of groups required. heights.sort() groups = 0 i = 0 while i < n: groups += 1 current_min = heights[i] while i < n and heights[i] - current_min <= d: i += 1 return groups"},{"question":"John is planning a camping trip to a mountainous region. To prepare for the trip, he wants to analyze the temperature variations for each day in that region. He has collected temperature data for the past week, with readings taken every hour. You are given a 2D list where each row represents a day, and each column represents an hour in that day. Each value in the list is an integer representing the temperature at that particular hour on that day. Write a program to find the day with the largest temperature difference (the difference between the maximum and minimum temperatures on that day) over the past week. Input: - A 2D list `temperatures` of size 7x24, where `temperatures[i][j]` is the temperature on the i-th day at the j-th hour. The temperatures are integers. Output: - An integer representing the index of the day (0-based) with the largest temperature difference. If there are multiple days with the same maximum difference, return the smallest index. Example: ```python temperatures = [ [10, 20, 13, 15, 16, 17, 18, 11, 12, 22, 23, 11, 15, 13, 14, 18, 17, 20, 19, 16, 15, 14, 15, 16], [12, 14, 16, 17, 19, 13, 15, 14, 20, 22, 24, 25, 14, 13, 12, 19, 18, 17, 16, 20, 21, 22, 23, 24], [13, 15, 14, 18, 16, 19, 17, 15, 23, 24, 22, 21, 19, 18, 20, 19, 17, 18, 17, 21, 20, 19, 18, 22], [15, 18, 19, 20, 21, 22, 23, 17, 18, 20, 21, 23, 22, 21, 20, 19, 18, 15, 14, 13, 12, 11, 10, 12], [11, 13, 15, 17, 19, 21, 12, 14, 16, 18, 20, 22, 14, 16, 17, 19, 21, 15, 18, 20, 22, 24, 23, 21], [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10], [10, 15, 20, 25, 30, 35, 40, 45, 16, 15, 20, 25, 20, 15, 18, 19, 23, 21, 20, 18, 17, 16, 19, 20] ] Output: 6 ```","solution":"def day_with_largest_temp_difference(temperatures): Returns the index of the day with the largest temperature difference. largest_difference = float(\'-inf\') index_of_day_with_largest_diff = 0 for i, day_temps in enumerate(temperatures): max_temp = max(day_temps) min_temp = min(day_temps) temp_difference = max_temp - min_temp if temp_difference > largest_difference: largest_difference = temp_difference index_of_day_with_largest_diff = i return index_of_day_with_largest_diff"},{"question":"In a vast and old kingdom, there are several towns and bidirectional roads connecting some pairs of these towns. The kingdom\'s map can be represented as a graph where towns are vertices and roads are edges. The kingdom is going to celebrate its anniversary by holding a grand festival and the ruler wants to invite singers from different towns. However, due to different traditions, bringing more than one singer from the same town is not allowed. To celebrate in style, the ruler wants to ensure that there are as many guest singers as possible. As part of the plan, the ruler wants to determine the maximum number of towns that can be visited from the capital town such that every town visited contributes one singer to the festival. The first line contains two integers, n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of towns and the number of roads in the kingdom. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) denoting a road between town u and town v. The capital town is town 1. Print one integer — the maximum number of towns that can be visited from the capital town such that each visited town contributes one singer to the festival. For example: Input: 6 6 1 2 1 3 2 4 3 5 3 6 5 6 Output: 4 Explanation: In this example, we can visit towns 1, 2, 3, and 5.","solution":"def max_towns_visited(n, m, roads): from collections import deque, defaultdict # Create an adjacency list from the roads adj_list = defaultdict(list) for u, v in roads: adj_list[u].append(v) adj_list[v].append(u) # BFS from the capital town (town 1) visited = [False] * (n + 1) queue = deque([1]) visited[1] = True visited_count = 0 while queue: town = queue.popleft() visited_count += 1 for neighbor in adj_list[town]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return visited_count"},{"question":"Given an array `a` of length `n`, you need to answer several queries on this array. Each query can be one of two types: 1. Reverse the subarray from index `l` to `r` (1-based inclusive). 2. Find the maximum element in the subarray from index `l` to `r` (1-based inclusive). The queries are given in random order, and you need to handle them efficiently. The first line of input contains two integers `n` and `q` (1 ≤ n, q ≤ 100 000) — the length of the array and the number of queries respectively. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9). Each of the next `q` lines contains a query of one of the following two types: - `1 l r` (1 ≤ l ≤ r ≤ n) - reverse the subarray from index `l` to `r` (inclusive). - `2 l r` (1 ≤ l ≤ r ≤ n) - find the maximum element in the subarray from index `l` to `r` (inclusive). For each query of the second type (`2 l r`), print the result on a new line. Example: ``` Input: 6 5 1 3 5 2 4 6 1 2 4 2 1 5 1 1 6 2 3 6 2 1 6 Output: 5 5 2 ```","solution":"class ArrayManipulator: def __init__(self, array): self.array = array def reverse_subarray(self, l, r): self.array[l-1:r] = self.array[l-1:r][::-1] def find_max_subarray(self, l, r): return max(self.array[l-1:r]) def process_queries(n, queries, array): manipulator = ArrayManipulator(array) result = [] for query in queries: if query[0] == 1: manipulator.reverse_subarray(query[1], query[2]) elif query[0] == 2: result.append(manipulator.find_max_subarray(query[1], query[2])) return result"},{"question":"Bob the Baker is famous for his delicious cakes. He operates a cake shop where customers can order cakes in various custom shapes and sizes. However, Bob only has a limited number of cake molds, and each mold can only be used to bake cakes of a specific size. Bob has `N` different cake molds, and each cake mold `i` can bake cakes of `size[i]`. A customer comes to Bob\'s shop and places an order for a specific size of cake, `C`. Bob needs to determine whether it is possible to bake a cake of size `C` by using one or more molds. Note that Bob can use each mold multiple times. If it is possible, Bob wants to know the minimum number of molds required to bake exactly `C`. Write a function `min_molds` that takes two parameters: 1. An array of integers `size` where `size[i]` represents the size of the `i-th` cake mold. 2. An integer `C` representing the size of the cake to be baked. The function should return the minimum number of molds required to bake a cake of size `C`. If it is not possible to bake a cake of size `C`, return -1. # Input: - The first line contains an integer `N` (1 <= N <= 1000), the number of cake molds. - The second line contains `N` integers separated by a space, where each integer represents `size[i]` (1 <= size[i] <= 1000), denoting the size of the `i-th` mold. - The third line contains an integer `C` (1 <= C <= 10^6), the size of the cake to be baked. # Output: - Output a single integer, the minimum number of molds required to bake a cake of size `C`. If it is not possible, return -1. # Example: Input: ``` 3 1 2 3 7 ``` Output: ``` 3 ``` Explanation: Bob can bake a cake of size `7` using three molds: 3 + 3 + 1.","solution":"def min_molds(size, C): Determine the minimum number of molds required to bake a cake of size C. If it is not possible to bake a cake of size C, return -1. :param size: List of integers representing the sizes of the cake molds. :param C: Integer representing the size of the cake to be baked. :return: Minimum number of molds required to bake a cake of size C or -1 if not possible. # Initialize a large value for comparison max_value = float(\'inf\') # Create a dp array and initialize with max_value dp = [max_value] * (C + 1) dp[0] = 0 # Base case: zero molds needed to bake cake of size 0 # Bottom-up DP approach - Fill in dp array for i in range(1, C + 1): for s in size: if i >= s: dp[i] = min(dp[i], dp[i - s] + 1) return dp[C] if dp[C] != max_value else -1"},{"question":"You are given two integers n and m representing the number of rows and columns of a grid, respectively. Each cell in the grid initially contains a positive integer. You want to transform this grid such that every cell in the grid contains the smallest possible value after performing a series of operations. The operation you can perform is as follows: select any cell and any non-negative integer x, then add x to the selected cell and subtract x from every cell in the same row and the same column as the selected cell. Your task is to determine the final grid after performing a series of operations to minimize the values. # Input - The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100). - The next n lines contain m space-separated integers each, representing the initial values of the cells in the grid. # Output - Print n lines, each containing m space-separated integers, representing the final grid after performing the operations to minimize the values. # Example Input ``` 3 4 5 9 3 6 8 7 4 2 3 6 9 5 ``` Output ``` 2 2 2 2 2 2 2 2 2 2 2 2 ``` Note In the given example, by sequentially selecting appropriate cells and values for x, you can make all the cells in the grid equal to 2, which is the smallest value that can be achieved for any cell in the grid.","solution":"def transform_grid(n, m, grid): Transforms the grid to minimize all values in the grid by performing the operations described. min_value = min(map(min, grid)) return [[min_value] * m for _ in range(n)]"},{"question":"Bob is a fervent book collector and likes to organize his books by their unique IDs. He has a collection system where each book is identified by an integer ID. Bob recently acquired a new batch of books and needs your assistance in determining which IDs are missing from his collection. You are given two lists of integers: one representing all possible book IDs in the range [1, n], inclusive, where n is a large positive integer, and another list representing the IDs of books currently in Bob\'s collection. Write a program to identify the missing book IDs that Bob does not have in his collection. # Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the total range of possible book IDs. The second line contains an integer m (0 ≤ m ≤ n) — the number of books currently in Bob\'s collection. The third line contains m integers, each a distinct book ID currently in Bob\'s collection. Each ID is between 1 and n. # Output Output all book IDs that are missing from Bob\'s collection in increasing order. If there are no missing IDs, print a single number 0. # Example Input: ``` 10 6 2 4 6 7 8 9 ``` Output: ``` 1 3 5 10 ``` Input: ``` 5 5 1 2 3 4 5 ``` Output: ``` 0 ``` In the first example, the complete set of book IDs is {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}. Bob has the IDs {2, 4, 6, 7, 8, 9}, so the missing IDs are {1, 3, 5, 10}. In the second example, Bob has all possible IDs within the given range, so no IDs are missing, and the output is 0.","solution":"def find_missing_ids(n, m, collection_ids): Returns the list of missing book IDs in increasing order. If no IDs are missing, returns [0]. all_ids = set(range(1, n + 1)) collection_ids_set = set(collection_ids) missing_ids = sorted(all_ids - collection_ids_set) return missing_ids if missing_ids else [0]"},{"question":"The company XYZ is developing a versatile home automation system. One of the features they are working on is controlling lighting systems in different rooms. Each room is equipped with a smart light bulb which can be either ON or OFF. The bulbs in the rooms can be controlled via a control panel with buttons, each button can toggle the states of a certain set of bulbs. The system needs to ensure that at any given time, a specific number of rooms have their lights turned ON. Given the initial states of bulbs in n rooms, and m buttons that control these bulbs, your task is to determine if it\'s possible to achieve exactly k bulbs turned ON by pressing some buttons any number of times. Each button, when pressed, toggles the state (ON to OFF or OFF to ON) of all the bulbs it controls. # Input - The first line contains three integers n, m, and k (1 le n le 1000, 1 le m le 1000, 0 le k le n) — the number of rooms, the number of buttons, and the required number of bulbs to be ON. - The second line contains n space-separated integers b_1, b_2, ldots, b_n (0 le b_i le 1) which denote the initial state of each bulb (0 for OFF, 1 for ON). - The following m lines describe the buttons. The i-th line starts with an integer t_i (1 le t_i le n), representing the number of bulbs that the i-th button controls, followed by t_i integers which are the indices of the bulbs that this button controls. Indices are 1-based. # Output - Output \\"YES\\" if it\'s possible to achieve exactly k bulbs turned ON, otherwise output \\"NO\\". # Example Input ``` 5 3 3 0 1 0 1 0 3 1 2 3 2 4 5 3 2 3 4 ``` Output ``` YES ``` Explanation Initially, the bulbs in rooms are [0, 1, 0, 1, 0]. By pressing the first button, the state becomes [1, 0, 1, 1, 0]. By pressing the third button, the state becomes [1, 1, 0, 0, 0]. This state has exactly 3 bulbs turned ON, which matches the requirement k = 3. # Note It may not always be possible to achieve exactly k bulbs turned ON by merely toggling buttons. Ensure you check all possibilities before deciding the output.","solution":"def is_possible_lights(n, m, k, initial_states, buttons): Determines if it is possible to have exactly k bulbs turned ON. from itertools import combinations # Count the initial number of bulbs that are ON initial_on_count = sum(initial_states) # Calculate the impact of each button (number of bulbs it affects) button_impacts = [] for button in buttons: impact = 0 for bulb in button: if initial_states[bulb - 1] == 1: impact -= 1 else: impact += 1 button_impacts.append(impact) # Check if it is possible to reach exactly k ON bulbs impacts = button_impacts[:] for i in range(1, m + 1): for combination in combinations(button_impacts, i): current_sum = initial_on_count + sum(combination) if current_sum == k: return \\"YES\\" if initial_on_count == k: return \\"YES\\" return \\"NO\\" # Example usage: n = 5 m = 3 k = 3 initial_states = [0, 1, 0, 1, 0] buttons = [ [1, 2, 3], [4, 5], [2, 3, 4] ] print(is_possible_lights(n, m, k, initial_states, buttons)) # Output should be \\"YES\\""},{"question":"In a galaxy far, far away, the Interstellar Programming Championship is being held. One of the tasks involves helping robots on different planets communicate more efficiently. Each robot on a planet communicates using a unique sequence of beeps, represented as a string of characters. However, network traffic on each planet must be kept to a minimum, and hence, it is crucial to find the most efficient way to represent these sequences, utilizing a common prefix where possible. Given a list of string sequences representing beeps from different robots on a particular planet, your task is to help optimize the communication by finding the length of the longest common prefix shared by all sequences. The sequences are guaranteed to contain only lowercase English letters. # Input The first line contains a single integer n (1 ≤ n ≤ 1000) – the number of sequences. Each of the next n lines contains a string of length between 1 and 1000, representing the beep sequence of a robot. # Output Output a single integer – the length of the longest common prefix of all given sequences. # Examples **Example 1:** Input: ``` 3 interstellar internet internal ``` Output: ``` 5 ``` Explanation: The longest common prefix is \\"inter\\". **Example 2:** Input: ``` 4 galaxy galactic galleon gallant ``` Output: ``` 3 ``` Explanation: The longest common prefix is \\"gal\\". **Example 3:** Input: ``` 2 planet star ``` Output: ``` 0 ``` Explanation: There is no common prefix. # Note The longest common prefix of a set of strings is the longest initial segment that all the strings share.","solution":"def longest_common_prefix(sequences): Finds the length of the longest common prefix shared by all sequences. :param sequences: List of string sequences representing beeps from different robots. :return: Length of the longest common prefix. if not sequences: return 0 # Start with the first sequence as the initial prefix prefix = sequences[0] # Compare the prefix with each sequence in the list for seq in sequences[1:]: # Update prefix by comparing characters with the current sequence for i in range(min(len(prefix), len(seq))): if prefix[i] != seq[i]: prefix = prefix[:i] break else: prefix = prefix[:min(len(prefix), len(seq))] if not prefix: return 0 return len(prefix)"},{"question":"While exploring a mysterious dungeon, adventurer Leo encounters n doors. Each door is locked by a unique magical mechanism, which can be unlocked by pressing buttons in a specific sequence. Each door i has a magic code represented by a lowercase English word ai. Leo has a set of keys, where each key is also represented by a lowercase English word. Leo can unlock door i if he has a key that contains the magic code ai as a substring. Given the list of n magic codes for the doors and Leo\'s list of m keys, determine which doors Leo can unlock. # Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of doors and the number of keys. The next n lines each contain a single string ai (1 ≤ |ai| ≤ 50) — the magic code of the i-th door. The next m lines each contain a single string — the keys Leo possesses (1 ≤ |key| ≤ 50). # Output Print a single integer — the number of doors Leo can unlock. # Example Input ``` 3 3 abc def ghi abcxyz zabcdefgh ghijkl ``` Output ``` 3 ``` # Note In the example, Leo can unlock all three doors: - The first key \\"abcxyz\\" contains \\"abc\\". - The second key \\"zabcdefgh\\" contains \\"def\\". - The third key \\"ghijkl\\" contains \\"ghi\\".","solution":"def count_unlockable_doors(n, m, magic_codes, keys): Given the number of doors, number of keys, the magic codes for each door, and the keys Leo possesses, returns the number of doors Leo can unlock. Parameters: n (int): Number of doors. m (int): Number of keys. magic_codes (list of str): Magic codes for each door. keys (list of str): Keys Leo possesses. Returns: int: Number of doors Leo can unlock. unlock_count = 0 for code in magic_codes: for key in keys: if code in key: unlock_count += 1 break return unlock_count"},{"question":"You have been tasked with developing a software module that processes a collection of records containing details about various scientific experiments. Each record consists of a unique experiment identifier, followed by a series of timestamped observations recorded during the experiment. The goal is to determine if there are any overlapping observations between the experiments, and if so, identify the pairs of experiments with overlapping observations. Input: - The first line contains a single integer `n` (1 ≤ n ≤ 100000), the number of experiments. - The next `n` blocks each describe one experiment. Each block starts with an integer `m` (1 ≤ m ≤ 10000), the number of observations for that experiment. This is followed by `m` lines, each containing two integers `t1` and `t2` (0 ≤ t1 < t2 ≤ 10^9), representing the start and end times of an observation. Output: - Print \\"No Overlaps\\" if there are no overlapping observations between any pair of experiments. - If there are overlaps, print one line for each overlapping pair of experiments in the format: `experiment_i experiment_j`, where `experiment_i` and `experiment_j` are the identifiers of the overlapping experiments, and `experiment_i < experiment_j`. Example: Input: ``` 3 2 1 5 8 10 3 2 6 7 9 12 15 2 5 9 10 12 ``` Output: ``` 1 2 2 3 ``` Explanation: - Experiment 1 has observations [1, 5] and [8, 10]. - Experiment 2 has observations [2, 6], [7, 9], and [12, 15]. - Experiment 3 has observations [5, 9] and [10, 12]. - Observations [1, 5] from experiment 1 and [2, 6] from experiment 2 overlap. - Observations [8, 10] from experiment 1 and [7, 9] from experiment 2 overlap. - Observations from experiment 3 and those from experiment 2 also overlap. You need to write a function `find_overlapping_experiments` that takes the input as described and prints the overlapping pairs of experiments.","solution":"def find_overlapping_experiments(n, experiments): def has_overlap(obs1, obs2): Check if two observations overlap. Observations are represented as tuples (start, end). return not (obs1[1] <= obs2[0] or obs2[1] <= obs1[0]) overlaps = [] for i in range(n): for j in range(i + 1, n): for obs1 in experiments[i]: for obs2 in experiments[j]: if has_overlap(obs1, obs2): overlaps.append((i + 1, j + 1)) break if (i + 1, j + 1) in overlaps: break if not overlaps: print(\\"No Overlaps\\") else: for overlap in overlaps: print(f\\"{overlap[0]} {overlap[1]}\\") # Example usage: n = 3 experiments = [ [(1, 5), (8, 10)], [(2, 6), (7, 9), (12, 15)], [(5, 9), (10, 12)] ] find_overlapping_experiments(n, experiments)"},{"question":"You are given an array of integers representing the heights of stones placed in a certain order along a river bank. A frog aims to reach from the first stone to the last by jumping from one stone to another. The frog can jump to any stone situated at a higher position than its current stone, but it has to follow the rule that it can only jump to the next higher stone. The goal is to find the minimum total distance the frog needs to jump in order to reach the last stone. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of stones in the river. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000,000) — the heights of the stones. Print one integer — the minimum total distance that the frog needs to jump in order to reach the last stone from the first stone. If it is impossible for the frog to reach the last stone, print -1. In the first example, the frog starts at stone 1 with height 1, jumps to stone 3 with height 3, then to stone 5 with height 5. The minimum total distance is 2 (1 to 3) + 2 (3 to 5) = 4. In the second example, the frog can jump from the first stone (height 1) directly to the seventh stone (height 7) without needing intermediate stones, with a total distance of 6. In the third example, it is impossible for the frog to reach the last stone, so the answer is -1.","solution":"def min_total_distance_to_last_stone(n, heights): Calculate the minimum total distance the frog needs to jump to reach the last stone. if n == 1: return 0 min_distance = float(\'inf\') dp = [float(\'inf\')] * n dp[0] = 0 for i in range(1, n): for j in range(0, i): if heights[j] < heights[i]: dp[i] = min(dp[i], dp[j] + (heights[i] - heights[j])) return dp[-1] if dp[-1] != float(\'inf\') else -1"},{"question":"You are working on a project that requires managing a collection of unique strings. To optimize the retrieval process, you plan to use a data structure that maintains the uniqueness of strings while supporting two key operations efficiently: insertion and lookup. Your task is to implement a data structure that maintains a collection of unique strings. The data structure should support the following operations: 1. `add(value)`: Adds a string `value` to the collection. If the string is already present in the collection, it should be ignored. 2. `exists(value)`: Checks if a string `value` exists in the collection. Returns `True` if the string is present, otherwise returns `False`. Input Format The input consists of multiple lines. Each line specifies an operation in one of the following formats: - `\\"add <value>\\"`: Adds the string `<value>` to the collection. - `\\"exists <value>\\"`: Checks if the string `<value>` exists in the collection. The input ends with a line containing the keyword `\\"stop\\"`, which should not be processed. Output Format For each `exists` operation, output `True` or `False` depending on whether the string exists in the collection. Constraints - The string `<value>` consists of alphanumeric characters and has a length of at most 100. - The number of operations will not exceed 10^5. Example **Input:** ``` add hello add world exists hello add hello exists world exists python stop ``` **Output:** ``` True True False ``` Your implementation should efficiently handle the operations even when the number of operations approaches the upper limit of the constraints.","solution":"class UniqueStringsCollection: def __init__(self): self.strings_set = set() def add(self, value): self.strings_set.add(value) def exists(self, value): return value in self.strings_set def process_operations(operations): collection = UniqueStringsCollection() results = [] for operation in operations: if operation.startswith(\\"add \\"): _, value = operation.split(\\" \\", 1) collection.add(value) elif operation.startswith(\\"exists \\"): _, value = operation.split(\\" \\", 1) results.append(collection.exists(value)) return results"},{"question":"A network of computers is hit by a virus that exploits a bug in the system. The virus can spread from one computer to another if there is a direct connection between them. You are given the network\'s topology as a list of direct connections, but unfortunately, some connections have been destroyed and need to be repaired. Your task is to determine the minimum number of connections that need to be repaired to ensure the virus can spread throughout the entire network. The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)/2), the number of computers and the number of direct connections, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating there is a direct connection between computers u and v. Print the minimum number of connections that need to be repaired so that all the computers in the network are still connected and the virus can spread to any computer from any other computer. Input example: ``` 4 2 1 2 3 4 ``` Output example: ``` 1 ``` Explanation: In the example, there are 4 computers and only 2 connections: (1, 2) and (3, 4). The network is divided into two segments {1, 2} and {3, 4}. To connect the entire network, we need to repair at least 1 connection, for instance, we can repair the connection between 2 and 3.","solution":"def find_min_repairs(n, m, connections): parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX for u, v in connections: union(u, v) root_set = set(find(i) for i in range(1, n + 1)) return len(root_set) - 1 # Parse input def min_repairs_from_input(input_string): input_lines = input_string.strip().split(\'n\') n, m = map(int, input_lines[0].split()) connections = [tuple(map(int, line.split())) for line in input_lines[1:]] return find_min_repairs(n, m, connections)"},{"question":"A famous robotic company has developed an inventory management system that relies on a grid of robots moving items around the warehouse. They use a grid system, where each cell is identified by its row and column numbers. There are some tasks that need to be completed on the grid. Each task involves moving an item from a source cell to a destination cell. The company wants to minimize the total Manhattan distance the robots travel while completing all tasks. The Manhattan distance between two cells (r1, c1) and (r2, c2) is defined as |r1 - r2| + |c1 - c2|. You are given the number of tasks and for each task, you are given the coordinates of the source and destination cells. Your goal is to calculate the total Manhattan distance the robots need to travel to complete all the tasks. Input: - The first line contains an integer t (1 ≤ t ≤ 10^6) — the number of tasks. - Each of the next t lines contains four integers r1, c1, r2, c2 (0 ≤ r1, r2, c1, c2 < 10^9) — the row and column of the source cell and the row and column of the destination cell for each task. Output: - An integer — the total Manhattan distance the robots need to travel for all tasks. Example: Input: 3 1 1 2 3 4 4 1 1 3 3 3 3 Output: 10 Explanation: - The first task requires moving from (1, 1) to (2, 3), with a distance of |1 - 2| + |1 - 3| = 3. - The second task requires moving from (4, 4) to (1, 1), with a distance of |4 - 1| + |4 - 1| = 6. - The third task has the source and destination at the same cell (3, 3), so the distance is |3 - 3| + |3 - 3| = 0. The total distance is therefore 3 + 6 + 0 = 9.","solution":"def total_manhattan_distance(tasks): Calculates the total Manhattan distance the robots need to travel to complete all tasks. Args: tasks (list of tuples): List of tasks where each task is represented as a tuple (r1, c1, r2, c2). Returns: int: The total Manhattan distance. total_distance = 0 for r1, c1, r2, c2 in tasks: total_distance += abs(r1 - r2) + abs(c1 - c2) return total_distance"},{"question":"Vasya is currently practicing his number transformation skills. He has a number `n` and wants to transform it to `1` using a specific set of operations. The allowed operations are: 1. If `n` is even, divide it by 2. 2. If `n` is odd and greater than 1, subtract 1 from it. Help Vasya determine the minimum number of operations to transform the number `n` to `1`. The first line contains an integer `n` (1 ≤ n ≤ 10^9) — the number Vasya wants to transform. Print a single integer — the minimum number of operations to transform `n` to `1`. # Example Input: 10 Output: 4 Explanation: The transformation sequence is as follows: 10 -> 5 -> 4 -> 2 -> 1, requiring 4 operations.","solution":"def min_operations_to_one(n): Returns the minimum number of operations to transform the number n to 1. Operations allowed: 1. If n is even, divide it by 2. 2. If n is odd and greater than 1, subtract 1 from it. count = 0 while n > 1: if n % 2 == 0: n //= 2 else: n -= 1 count += 1 return count"},{"question":"Emily is participating in a treasure hunt. To reach the final treasure, she needs to cross multiple checkpoints. Each checkpoint has a certain number of minutes required to pass through it, and she can use a limited number of shortcuts that save a specific number of minutes at some checkpoints. However, there is a catch: the shortcuts can only be used a limited number of times for specific checkpoints. Emily wants to minimize the total time spent to cross all checkpoints within the given constraints on the number of times shortcuts can be used. The first line of the input contains an integer n (1 leq n leq 10^5)—the number of checkpoints. The second line contains n space-separated integers a_i (1 leq a_i leq 10^4)—the number of minutes required to pass through each checkpoint. The third line contains an integer m (1 leq m leq 10^5)—the number of shortcuts available. The next m lines each contain three integers c_j, d_j, and u_j (1 leq c_j leq n, 1 leq d_j leq 10^4, 1 leq u_j leq 10^3)—indicating that for checkpoint c_j, Emily can use the shortcut to reduce the time from a_{c_j} to d_j, and that the shortcut can be used up to u_j times. Print the minimum total time Emily needs to pass through all checkpoints. For the first example, the minimum time is achieved by using the shortcuts at appropriate checkpoints. For the second example, it might not be possible to use any shortcuts effectively, hence the total time will be the sum of all checkpoint times without reductions.","solution":"def min_total_time(n, a, m, shortcuts): # Dictionary to store minimum time for each checkpoint with limits on using shortcuts checkpoint_times = dict((i, (a[i-1], 0)) for i in range(1, n+1)) for c, d, u in shortcuts: original_time, used_shortcuts = checkpoint_times[c] if used_shortcuts < u: checkpoint_times[c] = (min(original_time, d), used_shortcuts + 1) total_time = sum(time for time, _ in checkpoint_times.values()) return total_time"},{"question":"Given two strings S and T, your task is to determine whether T is a subsequence of S. A subsequence is a derived string that can be obtained from another string by deleting some characters without changing the order of the remaining characters. Input The input consists of two lines: - First line: string S (1 ≤ |S| ≤ 10^4) - Second line: string T (1 ≤ |T| ≤ 10^4) Output Output \\"Yes\\" if T is a subsequence of S, otherwise output \\"No\\". Example Input: abcde ace Output: Yes Input: abcde aec Output: No Explanation: - In the first example, \\"ace\\" is a subsequence of \\"abcde\\" as it can be obtained by deleting \'b\' and \'d\'. - In the second example, \\"aec\\" is not a subsequence of \\"abcde\\" as \'c\' comes before \'e\' in the string T which does not match the order in string S.","solution":"def is_subsequence(S, T): Determines if T is a subsequence of S. Args: S: string T: string Returns: \\"Yes\\" if T is a subsequence of S, otherwise \\"No\\". iter_s = iter(S) return \\"Yes\\" if all(char in iter_s for char in T) else \\"No\\""},{"question":"You are given a set of n points in a 2D plane, each with distinct coordinates. Determine the smallest circle that can enclose all these points. The circle\'s radius should be minimized, and both the center and radius of the circle should be calculated with precision. First, input the integer n (1 ≤ n ≤ 100) — the number of points. Next, input n lines, each containing two integers x and y (−10^4 ≤ x, y ≤ 10^4) — the coordinates of each point. Output the center coordinates (cx, cy) of the smallest enclosing circle and its radius r, all in the form of floating point numbers with at least six digits after the decimal point. Example: Input: 3 0 0 0 1 1 0 Output: 0.500000 0.500000 0.707107","solution":"import math from itertools import combinations def dist_squared(p1, p2): return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2 def circle_from_two_points(p1, p2): cx = (p1[0] + p2[0]) / 2.0 cy = (p1[1] + p2[1]) / 2.0 radius = math.sqrt(dist_squared(p1, p2)) / 2.0 return (cx, cy), radius def circumcenter(p1, p2, p3): d = 2 * (p1[0] * (p2[1] - p3[1]) + p2[0] * (p3[1] - p1[1]) + p3[0] * (p1[1] - p2[1])) if d == 0: return None ux = ((p1[0]**2 + p1[1]**2) * (p2[1] - p3[1]) + (p2[0]**2 + p2[1]**2) * (p3[1] - p1[1]) + (p3[0]**2 + p3[1]**2) * (p1[1] - p2[1])) / d uy = ((p1[0]**2 + p1[1]**2) * (p3[0] - p2[0]) + (p2[0]**2 + p2[1]**2) * (p1[0] - p3[0]) + (p3[0]**2 + p3[1]**2) * (p2[0] - p1[0])) / d radius = math.sqrt(dist_squared((ux, uy), p1)) return (ux, uy), radius def min_enclosing_circle(n, points): if n == 1: return points[0], 0.0 best_center = (0, 0) best_radius = float(\'inf\') for (p1, p2) in combinations(points, 2): center, radius = circle_from_two_points(p1, p2) if all(math.sqrt(dist_squared(center, p)) <= radius for p in points): if radius < best_radius: best_center, best_radius = center, radius for (p1, p2, p3) in combinations(points, 3): circumcenter_result = circumcenter(p1, p2, p3) if circumcenter_result: center, radius = circumcenter_result if all(math.sqrt(dist_squared(center, p)) <= radius for p in points): if radius < best_radius: best_center, best_radius = center, radius return best_center, best_radius def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) points = [] for i in range(n): points.append((int(data[2 * i + 1]), int(data[2 * i + 2]))) center, radius = min_enclosing_circle(n, points) print(f\\"{center[0]:.6f} {center[1]:.6f} {radius:.6f}\\")"},{"question":"Peter loves playing with strings. Recently, he invented a game with strings where he repeatedly performs a specific operation on the string until it becomes empty. The operation consists of selecting any character in the string and removing all its occurrences from the string. Peter is curious to find out how many unique operations he will have to perform before the string becomes empty. Given a string consisting only of lowercase English letters, determine the number of unique operations Peter will need to perform to make the string empty. The input contains a single string s (1 ≤ |s| ≤ 1000) — the string Peter is playing with. Print a single integer — the number of unique operations needed to empty the string. Examples: Input: abacbc Output: 3 Input: aabbcc Output: 3 Note: In the first example, the string can be cleared by removing \'a\', \'b\', and \'c\', which makes 3 unique operations. In the second example, removing \'a\', \'b\', and \'c\' will also make 3 unique operations.","solution":"def unique_operations_to_empty_string(s): Returns the number of unique operations needed to make the string s empty. # Using a set to find unique characters unique_chars = set(s) # The number of unique operations is the number of unique characters return len(unique_chars)"},{"question":"You are given a set of strings and a pattern string. Your task is to determine which strings from the set match the pattern. A string matches the pattern if it can be transformed into the pattern by replacing each distinct character of the pattern consistently with a distinct character of the string. More formally, a string s matches the pattern p if there exists a bijection `f` between the characters of `p` and the characters of `s` such that for every index `i`, `p[i] = f(s[i])`. The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10^3) — the number of strings in the set and the length of the pattern string, respectively. The second line contains the pattern string `p` of length `m` (1 ≤ m ≤ 100). The next `n` lines each contain a string `s` of length `m`. Output a single integer, the number of strings in the set that match the pattern. # Example Input ``` 4 3 abc xyz xxy aba bcd ``` Output ``` 2 ``` # Explanation In this example, the pattern is `abc`. The strings `xyz` and `bcd` match the pattern as each character in the pattern can be mapped to distinct characters in the strings. The string `xxy` does not match because the pattern `abc` requires three distinct characters. The string `aba` does not match because mapping `a` to `b` and `c` to `a` would be inconsistent.","solution":"def match_pattern_count(n, m, p, strings): def matches(s, p): if len(s) != len(p): return False s_to_p = {} p_to_s = {} for sc, pc in zip(s, p): if sc in s_to_p and s_to_p[sc] != pc: return False if pc in p_to_s and p_to_s[pc] != sc: return False s_to_p[sc] = pc p_to_s[pc] = sc return True count = 0 for s in strings: if matches(s, p): count += 1 return count"},{"question":"Jane owns a small Squareville bakery and wants to streamline her daily ingredient inventory process. Every morning, she needs to know how many different types of ingredients she has for the day\'s baking. She receives a list of ingredients, each represented by a string (for instance, \\"flour\\", \\"sugar\\", \\"eggs\\") and needs to count unique ingredient types. Create a program to help Jane. Given an array of strings, where each string represents an ingredient, return the number of unique ingredient types. Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of ingredients. - The second line contains n space-separated strings, each representing an ingredient. Output - Print a single integer, the number of unique ingredient types. Example Input: 7 flour sugar eggs milk butter sugar flour Output: 5 Explanation The list of ingredients has 5 unique items: \\"flour\\", \\"sugar\\", \\"eggs\\", \\"milk\\", and \\"butter\\".","solution":"def count_unique_ingredients(n, ingredients): Returns the number of unique ingredients. Parameters: n (int): The number of ingredients. ingredients (list of str): The list of ingredients represented as strings. Returns: int: The number of unique ingredient types. return len(set(ingredients))"},{"question":"Alex is a passionate traveler and a hobbyist photographer. He plans to embark on a new journey to capture some beautiful landscapes. For this, he has a limited amount of memory cards, each with a certain capacity measured in gigabytes, and he also knows the size of each photo he plans to take, also measured in gigabytes. Given an integer `n` (`1 ≤ n ≤ 300`), which represents the number of photos Alex wants to take, and an array `A` of size `n`, where `A[i]` (`1 ≤ A[i] ≤ 1000`) represents the size of the `i-th` photo in gigabytes, your task is to help Alex determine the minimum number of memory cards required, given that each memory card has a maximum capacity of `C` gigabytes (`1 ≤ C ≤ 10000`). Alex can use multiple memory cards, but he wants to minimize the number of memory cards he has to carry. Obvious condition is that the total size of photos on a single memory card cannot exceed the card\'s capacity. Print the minimum number of memory cards Alex needs to store all his photos. The first line contains two integers `n` and `C` — the number of photos and the capacity of each memory card. The second line contains `n` integers `A[1], A[2], ..., A[n]` — the sizes of the photos Alex wants to take. Output a single integer — the minimum number of memory cards required. Example: Input: ``` 5 10 2 3 5 4 7 ``` Output: ``` 3 ``` Explanation: Alex might distribute the photos as follows: - Memory card 1: 2GB, 3GB, and 5GB (total: 10GB) - Memory card 2: 4GB (total: 4GB) - Memory card 3: 7GB (total: 7GB) The three memory cards will be enough to store all the photos Alex wants to take. Hence, he needs 3 memory cards.","solution":"def min_memory_cards(n, C, A): Determines the minimum number of memory cards required to store all photos. Parameters: - n (int): Number of photos - C (int): Capacity of each memory card in gigabytes - A (list of int): List of photo sizes in gigabytes Returns: - int: Minimum number of memory cards required # Sort the sizes of the photos in descending order A.sort(reverse=True) # Initialize the memory cards needed cards = 0 used_capacity = 0 while A: used_capacity = 0 cards += 1 for i in range(len(A)): if used_capacity + A[i] <= C: used_capacity += A[i] A[i] = -1 # Remove the used photos A = [x for x in A if x != -1] return cards"},{"question":"You are given a set of integers. Your task is to partition this set into two subsets such that the absolute difference between the sums of the elements in the two subsets is minimized. The first line contains a single integer n (1 ≤ n ≤ 20), the number of elements in the set. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Output a single integer, the minimum possible absolute difference between the sums of the elements in the two subsets. **Example:** **Input:** 4 1 6 11 5 **Output:** 1 **Explanation:** The set {1, 6, 11, 5} can be partitioned into {1, 6, 5} and {11}, where the sums are 12 and 11, resulting in an absolute difference of |12 - 11| = 1.","solution":"def min_partition_difference(n, arr): Returns the minimum possible absolute difference between the sums of the elements in the two subsets. Parameters: n (int): Number of elements in the set. arr (list of int): List of integers in the set. Returns: int: Minimum possible absolute difference. total_sum = sum(arr) dp = [0] * (total_sum // 2 + 1) for num in arr: for j in range(total_sum // 2, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) return total_sum - 2 * dp[total_sum // 2]"},{"question":"You are given an array of integers `nums` representing the rainfall on each day in a city with n days. The rainfall can be non-negative or negative where a negative number indicates no rainfall on that particular day. Your task is to find the maximum sum of rainfall over any contiguous subarray of days and the corresponding subarray\'s start and end indices. The first line contains an integer `n` (1 ≤ n ≤ 100,000), the number of days. The second line contains `n` space-separated integers, the rainfall amounts for each of the `n` days. If there are multiple subarrays with the same maximum sum, choose the one that starts earliest. Return the maximum sum along with the 1-based start and end indices of the subarray. **Input:** - First line: an integer `n` (1 ≤ n ≤ 100,000). - Second line: `n` space-separated integers representing the rainfall. **Output:** - Print three integers: the maximum sum, and the start and end indices (1-based) of the subarray that yields the maximum sum. **Example:** Input: ``` 6 3 -1 4 -1 5 9 ``` Output: ``` 19 1 6 ``` In this example, the subarray with the maximum sum is [3, -1, 4, -1, 5, 9], which spans from day 1 to day 6, and the sum is 19.","solution":"def max_subarray_sum(nums): Finds the maximum sum of any contiguous subarray of the given nums and returns the sum along with the 1-based start and end indices of the subarray. if not nums: return 0, 0, 0 n = len(nums) max_sum = current_sum = nums[0] start = end = s = 0 for i in range(1, n): if current_sum < 0: current_sum = nums[i] s = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return max_sum, start + 1, end + 1"},{"question":"Hiroshi, an avid coder, has devised a game involving an NxM grid filled with numbers. Each cell of the grid contains a positive integer. The objective is to find a path from the top-left corner (cell (1,1)) to the bottom-right corner (cell (N,M)) such that the sum of the values on the path is maximized. Hiroshi can only move right or down from a given cell. Write a code to solve this problem. The first line contains two integers N and M (1 ≤ N, M ≤ 1000) — the dimensions of the grid. The next N lines each contain M integers representing the grid, where each integer is between 1 and 1000. Print a single integer, the maximum sum of values on a path from the top-left corner to the bottom-right corner. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 29 Explanation: The optimal path from (1,1) to (3,3) is 1 → 4 → 7 → 8 → 9, summing to 29.","solution":"def max_path_sum(grid): N = len(grid) M = len(grid[0]) # Create a 2D dp array to store the maximum sum up to each position dp = [[0]*M for _ in range(N)] # Initialize the top-left cell dp[0][0] = grid[0][0] # Initialize the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the dp array for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell will have the result return dp[N-1][M-1] # Wrapper function to read the input and call the max_path_sum function def solve_max_path_sum(N, M, grid): return max_path_sum(grid)"},{"question":"You are given a list of integers, where each number represents the energy required to achieve a specific goal in a game. Each integer is positive. Also, there are three types of goals: \\"strength\\", \\"dexterity\\", and \\"intelligence\\". The first goal in the list is a \\"strength\\" goal, the second is a \\"dexterity\\" goal, and the third is an \\"intelligence\\" goal. This pattern repeats for the entire list. Your task is to determine which type of goal requires the most total energy across all occurrences of that goal in the list. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of goals. The second line contains n integers e1, e2, ..., en (1 ≤ ei ≤ 100) — the energy required for each goal. Print the word \\"strength\\" if strength goals require the most total energy, \\"dexterity\\" if dexterity goals require the most total energy, and \\"intelligence\\" if intelligence goals require the most total energy. The answer is guaranteed to be unambiguous. # Example Input 9 10 15 20 5 10 15 10 5 20 Output intelligence Explanation In this example: - Strength goals have energies 10, 5, 10 (total: 25). - Dexterity goals have energies 15, 10, 5 (total: 30). - Intelligence goals have energies 20, 15, 20 (total: 55). Thus, intelligence goals require the most energy.","solution":"def most_energy_goal(n, energies): Determines which type of goal requires the most total energy across all occurrences of that goal in the list. Args: n: integer, the number of goals. energies: list of integers, energy required for each goal. Returns: A string denoting which type of goal (\\"strength\\", \\"dexterity\\", \\"intelligence\\") requires the most total energy. strength_energy = sum(energies[i] for i in range(0, n, 3)) dexterity_energy = sum(energies[i] for i in range(1, n, 3)) intelligence_energy = sum(energies[i] for i in range(2, n, 3)) if strength_energy > dexterity_energy and strength_energy > intelligence_energy: return \\"strength\\" elif dexterity_energy > intelligence_energy: return \\"dexterity\\" else: return \\"intelligence\\""},{"question":"Bertie loves playing with blocks in his free time. He has n identical blocks, and he wants to stack them according to certain rules. Specifically, he wants to form successive tiers or layers, where each tier consists of 1 block more than the tier directly above it. For instance, the top tier has 1 block, the tier below it has 2 blocks, the tier below that has 3 blocks, and so on. Given the number of blocks Bertie has, he wants to know what is the maximum number of complete tiers he can form. The input consists of a single integer n (1 ≤ n ≤ 10^9) representing the number of blocks. Print a single integer representing the maximum number of complete tiers Bertie can form. Example Input: 10 Output: 4 Explanation: Using 10 blocks, Bertie can form the following tiers: ``` Tier 1: 1 block Tier 2: 2 blocks Tier 3: 3 blocks Tier 4: 4 blocks ``` Total blocks used = 1 + 2 + 3 + 4 = 10 blocks. Hence, 4 complete tiers can be formed.","solution":"def max_complete_tiers(n): Given the number of blocks n, return the maximum number of complete tiers that can be formed. if n <= 0: return 0 tiers = 0 used_blocks = 0 while True: # The next tier will need (tiers + 1) blocks needed = tiers + 1 if used_blocks + needed <= n: used_blocks += needed tiers += 1 else: break return tiers"},{"question":"Sergey is an avid collector of rare stones. He owns a collection where each stone has a distinct integer weight. Sergey is interested in finding out the beauty of his collection. The beauty of a collection is defined as the difference between the maximum weight and the minimum weight of the stones in the collection. Given an array of integers representing the weights of the stones in Sergey\'s collection, help Sergey determine the beauty of his collection. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of stones in the collection. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the weights of the stones. Print a single integer — the beauty of the collection. For example: Input: 5 3 1 9 12 5 Output: 11 In the first example, the maximum weight is 12 and the minimum weight is 1, so the beauty of the collection is 12 - 1 = 11.","solution":"def collection_beauty(n, weights): Returns the beauty of the collection, which is defined as the difference between the maximum weight and the minimum weight of the stones in the collection. if n == 1: return 0 max_weight = max(weights) min_weight = min(weights) return max_weight - min_weight"},{"question":"You are given several test cases. In each test case, you are given a grid of size ( n times m ) filled with non-negative integers. Your task is to determine the maximum sum of all elements in any subgrid of size ( 2 times 2 ). Input The first line of the input contains a single integer ( t ) (1 ≤ ( t ) ≤ 100) — the number of test cases. The first line of each test case contains two integers ( n ) and ( m ) (2 ≤ ( n ), ( m ) ≤ 100) — the number of rows and columns in the grid, respectively. Each of the next ( n ) lines contains ( m ) non-negative integers separated by spaces — the elements of the grid. It is guaranteed that each element ( a_{ij} ) (0 ≤ ( a_{ij} ) ≤ 1000). Output For each test case, print a single integer — the maximum sum of all elements in any ( 2 times 2 ) subgrid of the given grid. Example Input: 2 3 3 1 2 3 4 5 6 7 8 9 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output: 28 54 Explanation: In the first test case, the maximum sum of any 2x2 subgrid is from the subgrid containing the elements: [ 5 6 ] [ 8 9 ] So the sum is ( 5 + 6 + 8 + 9 = 28 ). In the second test case, the maximum sum of any 2x2 subgrid is from the subgrid containing the elements: [ 11 12 ] [ 15 16 ] So the sum is ( 11 + 12 + 15 + 16 = 54 ).","solution":"def max_2x2_subgrid_sum(n, m, grid): max_sum = 0 for i in range(n - 1): for j in range(m - 1): current_sum = ( grid[i][j] + grid[i][j + 1] + grid[i + 1][j] + grid[i + 1][j + 1] ) max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(test_cases): results = [] for n, m, grid in test_cases: results.append(max_2x2_subgrid_sum(n, m, grid)) return results"},{"question":"A grocery store clerk needs to arrange the products on the store\'s shelves. Each product has a specific weight, and the shelves have a weight limit that cannot be exceeded. To optimize the use of shelf space, the clerk wants to maximize the number of products placed on the shelves without exceeding the weight limit of any shelf. Given the weights of the products and the weight limit of the shelves, determine the maximum number of products that can be placed on the shelves. The first line contains two integers, n (1 ≤ n ≤ 100,000) — the number of products, and w (1 ≤ w ≤ 1,000,000,000) — the weight limit of each shelf. The second line contains n space-separated integers, weights (1 ≤ weights[i] ≤ 100,000) — the weights of the products. Output a single integer — the maximum number of products that can be placed on the shelves without exceeding the weight limit. **Example**: Input ``` 5 10 2 3 4 5 6 ``` Output ``` 3 ``` **Explanation**: - The optimal way is to choose the weights [2, 3, 4] which total to 9, just under the weight limit of 10. Choosing any other combination either results in fewer products or exceeds the limit. Therefore, the maximum number of products is 3.","solution":"def max_products_on_shelf(n, w, weights): Determines the maximum number of products that can be placed on the shelves without exceeding the weight limit w using the given weights of the n products. Arguments: n : int : number of products w : int : weight limit of the shelf weights : list[int] : list of weights of the products Returns: int : the maximum number of products that can be placed on the shelves weights.sort() current_weight = 0 product_count = 0 for weight in weights: if current_weight + weight <= w: current_weight += weight product_count += 1 else: break return product_count"},{"question":"A small village has a set of wells and pipelines to supply water to all the houses. Each well has a limited capacity of water it can provide per day and each house requires a certain amount of water every day. There is one pipeline from each well to each house, and each pipeline has a cost associated with it. We need to determine the minimum cost to supply water to all the houses such that each house gets its required amount of water from exactly one well and no well exceeds its capacity. The first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of houses and wells in the village. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100) — the amount of water each house requires per day. The third line contains m integers w1, w2, ..., wm (1 ≤ wi ≤ 100) — the maximum capacity of each well per day. The next n lines each contain m integers representing the cost of supplying water from the j-th well to the i-th house. The j-th integer in the i-th line represents the cost of supplying water from the j-th well to the i-th house. Print the minimum total cost to supply water to all the houses while satisfying the constraints. If it is not possible to satisfy the conditions, print -1. **Example:** Input: ``` 3 3 5 10 7 10 15 10 2 4 6 5 7 3 8 6 4 ``` Output: ``` 11 ``` Explanation: In the example, house 1 can get its required 5 units of water from well 1 at a cost of 2. House 2 can get its required 10 units of water from well 2 at a cost of 7. House 3 can get its required 7 units of water from well 3 at a cost of 2. The total minimum cost is 2 + 7 + 2 = 11.","solution":"def min_water_supply_cost(n, m, house_req, well_capacity, cost): from itertools import permutations def calculate_total_cost(order, house_req, cost): total_cost = 0 well_usage = [0] * m for i in range(n): min_cost = float(\'inf\') chosen_well = -1 for j in range(m): if well_usage[j] + house_req[i] <= well_capacity[j]: if cost[i][j] < min_cost: min_cost = cost[i][j] chosen_well = j if chosen_well == -1: return float(\'inf\') well_usage[chosen_well] += house_req[i] total_cost += min_cost return total_cost best_cost = float(\'inf\') for perm in permutations(range(n)): perm_house_req = [house_req[i] for i in perm] current_cost = calculate_total_cost(perm, perm_house_req, cost) best_cost = min(best_cost, current_cost) return best_cost if best_cost != float(\'inf\') else -1"},{"question":"In a certain city, there are n intersections connected by m streets. Each street connects exactly two different intersections and is bidirectional. However, some streets are temporarily closed due to maintenance, which makes certain paths between intersections unusable. Given the list of streets, your task is to determine the maximum number of intersections that remain connected in a single group, after accounting for the closed streets. In other words, you need to find the largest connected component in the graph defined by the intersections and the remaining streets. # Input - The first line contains two integers `n` and `m` (`1 ≤ n ≤ 100,000`, `0 ≤ m ≤ 200,000`), the number of intersections and the number of streets, respectively. - The next `m` lines each contain three integers `u`, `v`, and `c` (`1 ≤ u, v ≤ n`, `u ≠ v`, `0 ≤ c ≤ 1`), where: - `u` and `v` represent intersections connected by a street. - `c` indicates whether the street is open (`c = 1`) or closed (`c = 0`). # Output - Print a single integer, the size of the largest connected component of intersections, considering only the open streets. # Example Input: ``` 5 4 1 2 1 2 3 0 3 4 1 4 5 1 ``` Output: ``` 3 ``` (Note: The largest connected component is {3, 4, 5} or {1, 2}, both of which are size 3). # Explanation In the example above: - The streets between intersections (1, 2) and (3, 4), (4, 5) are open. - The street between intersections (2, 3) is closed. - Therefore, the largest connected component consists of 3 intersections (either from {3, 4, 5} or from {1, 2}).","solution":"def largest_connected_component(n, m, streets): from collections import defaultdict, deque graph = defaultdict(list) for u, v, c in streets: if c == 1: # Only consider open streets graph[u].append(v) graph[v].append(u) def bfs(start, visited): queue = deque([start]) visited.add(start) count = 0 while queue: node = queue.popleft() count += 1 for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return count largest_component_size = 0 visited = set() for intersection in range(1, n + 1): if intersection not in visited: component_size = bfs(intersection, visited) largest_component_size = max(largest_component_size, component_size) return largest_component_size"},{"question":"You are given a string s consisting of lowercase letters, and a set of characters chars. A substring is considered \\"special\\" if and only if it contains all characters from the set chars at least once. Find the length of the shortest \\"special\\" substring of s. If no such substring exists, return -1. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 1000). The description of the test cases follows. For each test case, the first line contains a string s (1 le text{length of } s le 10^5). The second line contains a string chars consisting of distinct lowercase letters (1 le text{length of } chars le 26). It is guaranteed that the sum of the lengths of s over all test cases does not exceed 10^6. For each test case, print the length of the shortest \\"special\\" substring, or -1 if no such substring exists. Example: Input: 2 abacabadabacaba abc aaaaaaa bc Output: 3 -1","solution":"def shortest_special_substring(s, chars): Finds the length of the shortest substring of s which contains all characters in chars at least once. import sys from collections import Counter, defaultdict n = len(s) chars_set = set(chars) chars_count = Counter(chars) left = 0 formed = 0 window_counts = defaultdict(int) answer = float(\'inf\') for right in range(n): char = s[right] if char in chars_set: window_counts[char] += 1 if window_counts[char] == chars_count[char]: formed += 1 while left <= right and formed == len(chars_set): answer = min(answer, right - left + 1) char = s[left] if char in chars_set: if window_counts[char] == chars_count[char]: formed -= 1 window_counts[char] -= 1 left += 1 return answer if answer != float(\'inf\') else -1 def find_shortest_special_substrings(t, test_cases): results = [] for s, chars in test_cases: result = shortest_special_substring(s, chars) results.append(result) return results"},{"question":"Well-known writer Paulo Bob is working on his latest novel, and he is currently obsessed with creating the most dramatic revelations possible. His latest idea involves a sequence of dramatic moments, represented by a string, where each character corresponds to a type of dramatic event. To measure the impact of these revelations, Paulo decides to calculate the number of distinct substrings in the string. A substring is distinct if it does not appear more than once in the sequence. Given a string s of length n, can you help Paulo determine the number of distinct substrings in the string? The first line of input contains a single integer t (1 ≤ t ≤ 100,000) — the number of test cases. Each of the following t lines contains a single string s (1 ≤ |s| ≤ 100,000). The total length of all strings in the input does not exceed 500,000. For each test case, print a single integer: the number of distinct substrings in the string. Example: Input: 3 ababa abc aaa Output: 9 6 3 Explanation: For the first test case \\"ababa\\", the distinct substrings are: \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"abab\\", \\"baba\\", and \\"ababa\\". For the second test case \\"abc\\", the distinct substrings are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". For the third test case \\"aaa\\", the distinct substrings are: \\"a\\", \\"aa\\", and \\"aaa\\".","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings in the string s. n = len(s) substrings = set() # Generate all possible substrings and add to the set to ensure uniqueness for i in range(n): for j in range(i+1, n+1): substrings.add(s[i:j]) return len(substrings) def process_test_cases(test_cases): Given a list of test cases, returns a list of numbers representing the count of distinct substrings for each string. results = [] for s in test_cases: results.append(count_distinct_substrings(s)) return results"},{"question":"You are a florist with a unique challenge. Your shop has exactly n shelves arranged in a row, and each shelf can hold exactly one bouquet. You have m different bouquets to display, where each bouquet has a specific beauty value. You want to display these bouquets on the shelves in such a way that the sum of the absolute differences of beauty values between every pair of adjacent bouquets is minimized. Note that you have more bouquets than shelves and each bouquet is distinct in its beauty value. Given the beauty values of the bouquets, find the minimum possible sum of the absolute differences of beauty values between adjacent bouquets after arranging n bouquets on the shelves. The first line contains two integers n and m (2 le n le 1000, n le m le 2000) — the number of shelves and the number of available bouquets respectively. The second line contains m distinct integers b_1, b_2, ldots, b_m (1 le b_i le 10^9) — the beauty values of the bouquets. Output a single integer — the minimum sum of the absolute differences of beauty values between adjacent bouquets that can be achieved by displaying n out of the m bouquets on the shelves. In the first sample, the optimal arrangement could be achieved by choosing the bouquets with beauty values 2, 3, and 5, leading to a minimum sum of absolute differences of 3 (|2 - 3| + |3 - 5| = 1 + 2 = 3). In the second sample, the optimal arrangement could be achieved by choosing the bouquets with beauty values 1 and 2, with a sum of absolute differences of 1.","solution":"def min_sum_absolute_diff(n, m, beauty_values): beauty_values.sort() min_diff = float(\'inf\') for i in range(m - n + 1): current_diff = beauty_values[i + n - 1] - beauty_values[i] if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"In a magical forest, there are n magical creatures living harmoniously. Each creature can communicate with others through a mystical network of tunnels. These tunnels are bi-directional and connect two different creatures. There is a wizard who controls the mystical network and has the power to teleport any creature to any other creature using these tunnels. However, the wizard wants to keep the balance of the forest by ensuring minimal interference in their natural network. The wizard needs your help to determine the minimum number of tunnels that need to be added to ensure that every creature can reach every other creature directly or indirectly. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ n(n - 1)/2) — the number of creatures and the number of tunnels, respectively. Each of the next m lines contains two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) indicating that there is a tunnel connecting creature ai and creature bi. Print a single integer — the minimum number of tunnels to be added to ensure that the network is fully connected. # Example ```plaintext Input 5 2 1 2 3 4 Output 2 ``` # Explanation To ensure that every creature can communicate with every other creature directly or indirectly, the wizard needs to add a tunnel between creatures 2 and 3 and another tunnel between creatures 4 and 5, resulting in a total of 2 additional tunnels.","solution":"def minimum_tunnels_to_add(n, m, connections): from collections import defaultdict def dfs(node, visited, adjacency_list): stack = [node] while stack: current = stack.pop() if current not in visited: visited.add(current) stack.extend(adjacency_list[current]) if n == 1: # If there is only one creature, no tunnel is needed return 0 # Create the adjacency list (graph) adjacency_list = defaultdict(list) for a, b in connections: adjacency_list[a].append(b) adjacency_list[b].append(a) # Find the number of connected components visited = set() components = 0 for i in range(1, n + 1): if i not in visited: components += 1 dfs(i, visited, adjacency_list) # To connect all components, we need at least (components - 1) tunnels return components - 1"},{"question":"You are given an array of integers a of length n. The array contains elements that may be positive, negative, or zero. Your task is to determine the maximum sum of any continuous subarray within the array. A subarray is obtained by deleting some (possibly zero) elements from the beginning and some (possibly zero) elements from the end of the array. The first line of the input contains one integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (-10^4 le a_i le 10^4), representing the elements of the array. Print one integer — the maximum sum of any continuous subarray. In the first example, the maximum sum subarray is [4, -1, 2, 1], yielding a sum of 6. In the second example, the entire array has non-positive elements, so the largest sum is -1.","solution":"def max_subarray_sum(a): Returns the maximum sum of any continuous subarray within the array a. Uses Kadane\'s Algorithm. max_current = max_global = a[0] for num in a[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global # Example Usage: # n = 5 # a = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # print(max_subarray_sum(a)) # Output: 6"},{"question":"You are given an array of positive integers representing the prices of different items available in a store. You have a budget that you can spend to buy items. Your task is to select a subset of items such that the total cost is minimized, but the number of distinct items bought is maximized within your budget. The first line of the input contains a single integer m (1 leq m leq 1000) — the number of test cases. Each test case contains two lines: - The first line has two integers: n (1 leq n leq 100) and b (1 leq b leq 10^5) — the number of items and your budget, respectively. - The second line contains n positive integers separated by space, where the i-th integer represents the price of the i-th item (each integer is between 1 and 10^5). For each test case, output the maximum number of distinct items you can buy within the given budget on a new line. # Example Input: ``` 2 5 10 1 2 3 4 5 3 7 4 6 8 ``` Output: ``` 4 1 ``` # Explanation In the first test case, you can buy items with prices [1, 2, 3, 4] which total to 10. This is the maximum number of items you can buy within the budget of 10. In the second test case, you can only buy one item with price 4 or price 6 within the budget of 7. Therefore, the maximum number of items you can buy is 1.","solution":"def max_items_within_budget(m, test_cases): result = [] for i in range(m): n, b = test_cases[i][0] prices = test_cases[i][1] prices.sort() total_cost = 0 count = 0 for price in prices: if total_cost + price <= b: total_cost += price count += 1 else: break result.append(count) return result"},{"question":"There is a sequence of integers where each element represents the number of items at a certain time. Initially, the sequence has `n` number of zeros. Over time, several operations are performed on this sequence. Two types of operations can occur: 1. \\"add i x\\" — Add `x` items at position `i`. 2. \\"sum l r\\" — Calculate the sum of items from position `l` to position `r` (inclusive). The first line of the input contains two integers `n` (1 ≤ n ≤ 200,000) and `q` (1 ≤ q ≤ 200,000) — the number of positions in the sequence and the number of operations respectively. Each of the next `q` lines contains one of the two operations described above. For each \\"sum\\" operation, print the result on a new line. # Example **Input:** ``` 5 4 add 2 3 add 4 5 sum 1 5 sum 2 4 ``` **Output:** ``` 8 8 ``` In the above example, the array starts as `[0, 0, 0, 0, 0]`. 1. \\"add 2 3\\" makes the array `[0, 3, 0, 0, 0]`. 2. \\"add 4 5\\" makes the array `[0, 3, 0, 5, 0]`. 3. \\"sum 1 5\\" calculates the sum of all elements, which is `0 + 3 + 0 + 5 + 0 = 8`. 4. \\"sum 2 4\\" calculates the sum of elements from position `2` to `4`, which is `3 + 0 + 5 = 8`.","solution":"def process_operations(n, operations): sequence = [0] * n results = [] for op in operations: split = op.split() if split[0] == \\"add\\": i = int(split[1]) x = int(split[2]) sequence[i-1] += x elif split[0] == \\"sum\\": l = int(split[1]) r = int(split[2]) results.append(sum(sequence[l-1:r])) return results"},{"question":"You are given a matrix with `n` rows and `m` columns, consisting of lowercase Latin letters (\'a\' - \'z\'). Your task is to find the size of the largest square sub-matrix that can be found in the matrix such that all the elements in this sub-matrix are the same character. The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the matrix. Each of the next `n` lines contains a string of length `m` consisting of lowercase Latin letters. Output the size of the side of the largest square sub-matrix containing identical characters. Example: Input: ``` 5 6 aaaaaa aaaabb aaabbb aaaabb aaaaaa ``` Output: ``` 4 ```","solution":"def largest_square_sub_matrix(matrix): Finds the size of the largest square sub-matrix in the given matrix where all the elements are the same character. n = len(matrix) m = len(matrix[0]) if n > 0 else 0 if n == 0 or m == 0: return 0 dp = [[0] * (m+1) for _ in range(n+1)] max_size = 0 for i in range(1, n+1): for j in range(1, m+1): if (i > 1 and j > 1 and matrix[i-1][j-1] == matrix[i-2][j-1] == matrix[i-1][j-2] == matrix[i-2][j-2]): dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_size = max(max_size, dp[i][j]) return max_size # Example usage and testing n = 5 m = 6 matrix = [ \\"aaaaaa\\", \\"aaaabb\\", \\"aaabbb\\", \\"aaaabb\\", \\"aaaaaa\\" ] print(largest_square_sub_matrix(matrix)) # Output should be 4"},{"question":"You are organizing a treasure hunt event at your local park. In the park, some locations are marked with special landmarks. There are 100 landmarks, each labeled with a unique integer from 1 to 100. Each landmark can be connected to any other landmark with a directed path. You have been given the task of finding the longest possible route a team can take starting from any landmark, following the directed paths, such that each landmark is visited only once. A route is considered as a sequence of unique landmarks. You are given two arrays `u` and `v` of length `m`, where `u[i]` is the starting landmark of the path and `v[i]` is the ending landmark of the path. No two paths will direct between the same pair of landmarks in the same direction. Write a program that finds the length of the longest route a team can take. The first line of the input contains an integer `m` (1 le m le 10,000) — the number of directed paths. The next `m` lines contain two integers `u[i]` and `v[i]` (1 le u[i], v[i] le 100, u[i] neq v[i]) — the starting and ending landmarks of each directed path. Print one integer — the length of the longest route that can be taken.","solution":"from collections import defaultdict def longest_route(m, edges): Finds the length of the longest route in a directed graph. Args: m (int): Number of directed paths. edges (list of tuples): Each tuple contains two integers (u, v) representing the directed path from u to v. Returns: int: Length of the longest route. graph = defaultdict(list) for u, v in edges: graph[u].append(v) def dfs(vertex, visited, memo): if vertex in memo: return memo[vertex] max_length = 0 visited.add(vertex) for neighbor in graph[vertex]: if neighbor not in visited: route_length = 1 + dfs(neighbor, visited, memo) max_length = max(max_length, route_length) visited.remove(vertex) memo[vertex] = max_length return max_length memo = {} max_route_length = 0 for landmark in range(1, 101): visited = set() max_route_length = max(max_route_length, dfs(landmark, visited, memo)) return max_route_length"},{"question":"You are given an array of n integers where the indices of the array range from 1 to n. In one operation, you can perform the following: - Choose any two indices i and j (1 ≤ i, j ≤ n, i ≠ j) such that the sum of the elements at these indices equals a given integer k. After choosing indices i and j where ai + aj = k, you must remove one of these elements from the array (either ai or aj). Your task is to find the maximum number of operations that can be performed on the given array. The first line contains two space-separated integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000) — the number of elements in the array and the target sum. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output the maximum number of operations that can be performed. Example: Input: 4 7 1 6 2 5 Output: 2 Explanation: Operation 1: Choose indices 1 and 2 (1 + 6 = 7), remove element 1. New array: [6, 2, 5] Operation 2: Choose indices 2 and 3 (2 + 5 = 7), remove element 2. New array: [6, 5] No more operations can be performed, so the maximum number of operations is 2.","solution":"def max_operations(n, k, arr): Calculate the maximum number of operations that can be performed on the array such that for any two indices i and j, the sum of elements at these indices equals to k, and one of these elements is removed after each operation. Args: n (int): Number of elements in the array. k (int): Target sum. arr (list): List of integers representing the array. Returns: int: Maximum number of operations. from collections import Counter # Count the occurrences of each number in the array count = Counter(arr) operations = 0 for num in arr: complement = k - num if count[num] > 0 and count[complement] > 0: if num == complement and count[num] < 2: continue count[num] -= 1 count[complement] -= 1 operations += 1 return operations"},{"question":"A toy robot moves on a grid, starting from the cell (0, 0). The robot can receive four types of commands: - \'U\' moves the robot up by one cell. - \'D\' moves the robot down by one cell. - \'L\' moves the robot left by one cell. - \'R\' moves the robot right by one cell. You are given a string `commands` which represents a sequence of such commands. After executing all the commands, determine whether the robot returns to the starting cell (0, 0). The input is a single line string `commands`. The length of the string is between 1 and 100 characters, inclusive. Each character of the string is one of the characters \'U\', \'D\', \'L\', \'R\'. Output \\"YES\\" if the robot returns to the starting cell after executing all commands, and \\"NO\\" otherwise (quotes for clarity only). For example: - For the input `\\"UD\\"`, the output is `\\"YES\\"`. - For the input `\\"LL\\"`, the output is `\\"NO\\"`.","solution":"def does_robot_return(commands): Determines if the robot returns to the starting cell after executing all commands. :param commands: str - A string containing the sequence of commands. :return: str - \\"YES\\" if the robot returns to (0, 0), otherwise \\"NO\\". x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"Tina loves string manipulation and is currently fascinated by palindrome substrings. A palindrome is a word, phrase, or sequence of characters that reads the same backward as forward. Tina has a string of length ( n ) and wants to analyze it in the following way: Given ( q ) queries, each asking for the length of the longest palindromic substring within a specific substring of the original string, Tina needs to quickly find the answer to each query. A query is represented by two integers ( l ) and ( r ) (1 ≤ ( l leq r leq n )), indicating the start and end of the substring (inclusive) within the original string. Help Tina determine the length of the longest palindromic substring for each query. The first line of the input contains two space-separated integers ( n ) and ( q ) (1 ≤ ( n leq 2 times 10^4 ), 1 ≤ ( q leq 10^4 )), representing the length of the string and the number of queries, respectively. The second line contains the string of length ( n ), consisting of lowercase English letters. Each of the next ( q ) lines contains two space-separated integers ( l ) and ( r ) (1 ≤ ( l leq r leq n )), representing a query. For each query, print a single integer on a new line, the length of the longest palindromic substring within the given substring of the original string. # Example **Input:** ``` 7 2 abacaba 1 7 2 3 ``` **Output:** ``` 7 1 ``` In the example: - The substring for the first query \\"abacaba\\" is a palindrome itself, so the output is 7. - The substring for the second query \\"ba\\" is not a palindrome and its longest palindromic substring is \\"a\\" or \\"b\\", both of length 1.","solution":"def longest_palindromic_substring(s): This function returns the length of the longest palindromic substring in the input string s. n = len(s) if n == 0: return 0 # Create a 2D DP array to store the longest palindromic substring dp = [[False] * n for _ in range(n)] max_len = 1 # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_len = 2 for k in range(3, n + 1): # Length of substring for i in range(n - k + 1): j = i + k - 1 # Ending index of the current substring if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if k > max_len: start = i max_len = k return max_len def palindrome_queries(string, queries): This function takes a string and a list of queries and returns a list of results. Each query is a tuple (l, r) asking for the longest palindromic substring within the substring string[l-1:r]. results = [] for l, r in queries: substring = string[l-1:r] results.append(longest_palindromic_substring(substring)) return results"},{"question":"A new theme park has a series of rides arranged in a straight line. Each ride has a certain excitement level associated with it, given as an integer. You are tasked with finding the contiguous subarray of rides which maximizes the sum of excitement levels, while ensuring that this sum is non-negative. Write a function that takes an array of integers representing the excitement levels of the rides and returns the sum of the maximum sum contiguous subarray with non-negative sum. If all excitement levels are negative, return 0. The first line of the input contains a single integer n (1 ≤ n ≤ 100000), the number of rides. The second line contains n space-separated integers a1, a2, ..., an (-10000 ≤ ai ≤ 10000), the excitement levels of the rides. Output the sum of the maximum sum contiguous subarray with non-negative sum. # Example: Input: 6 -2 -3 4 -1 -2 1 5 -3 Output: 7 Explanation: The contiguous subarray [4, -1, -2, 1, 5] has the maximum sum of 7. Write the function in any programming language of your choice.","solution":"def max_sum_contiguous_subarray(n, excitement_levels): Finds the sum of the maximum sum contiguous subarray with non-negative sum. If all excitement levels are negative, returns 0. max_sum = 0 current_sum = 0 for excitement in excitement_levels: current_sum += excitement if current_sum < 0: current_sum = 0 max_sum = max(max_sum, current_sum) return max_sum"},{"question":"The kingdom of CodeLand consists of n cities and m bidirectional roads linking the cities. Every road connects two distinct cities and no two roads connect the same pair of cities. CodeLand government wants to make sure that residents can travel easily between cities, so they have tasked you with ensuring that the kingdom is fully connected by adding the minimum number of new roads. A kingdom is fully connected if there is a path (not necessarily direct) between any pair of cities. You are given n, m, and the description of the roads. Your task is to compute the minimum number of new roads needed to make the kingdom fully connected, and provide a set of new roads that achieve this. The first line contains two integers n and m (2 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of cities and the number of roads, respectively. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the cities directly connected by a road. Print the minimum number of new roads needed to make the kingdom fully connected. Then print the pairs of cities for each new road needed. Example: Input: 5 2 1 2 3 4 Output: 2 2 3 2 5","solution":"def find(parent, i): A utility function to find the subset of an element i if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): A function that does union of two subsets x and y xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_new_roads(n, m, roads): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) for u, v in roads: u -= 1 # converting to 0-based indexing v -= 1 # converting to 0-based indexing union(parent, rank, find(parent, u), find(parent, v)) components = set(find(parent, i) for i in range(n)) needed_roads = [] components = list(components) for i in range(1, len(components)): needed_roads.append((components[i-1] + 1, components[i] + 1)) # converting back to 1-based indexing union(parent, rank, components[i-1], components[i]) return len(needed_roads), needed_roads"},{"question":"Mike is a store manager at a warehouse. The warehouse consists of n distinct items labelled 1 through n. Mike wants to automate the process of inventory management. He needs to track incoming and outgoing transactions for these items. Each transaction can be of three types: 1. \\"+ i k\\" — Add k units of item i to the warehouse inventory. 2. \\"- i k\\" — Remove k units of item i from the warehouse inventory. 3. \\"? i\\" — Query the current number of units of item i in the warehouse. Initially, the warehouse\'s inventory for all items is zero. The quantities for any item cannot go below zero. For a removal transaction that attempts to remove more units than are available, only the available units are removed. Write a program that processes a sequence of transactions and outputs the results of the query operations. The first line contains two integers n and m (1 leq n, m leq 10^5) — the number of items and the number of transactions, respectively. The next m lines contain transactions in the format described. Each transaction is either: - \\"+ i k\\" where 1 leq i leq n and 1 leq k leq 10^9 - \\"- i k\\" where 1 leq i leq n and 1 leq k leq 10^9 - \\"? i\\" where 1 leq i leq n For each query transaction \\"? i\\", output a single integer — the current number of units of item i in the warehouse. # Example Input ``` 5 10 + 1 10 + 2 5 - 1 3 ? 1 ? 2 - 2 10 ? 2 + 3 20 + 3 10 ? 3 ``` Output ``` 7 5 0 30 ``` In this example, the transactions occur as follows: 1. Item 1 has 10 units added. 2. Item 2 has 5 units added. 3. Item 1 has 3 units removed, leaving 7 units. 4. Query for item 1 returns 7. 5. Query for item 2 returns 5. 6. Attempt to remove 10 units from item 2, but only 5 units are removed, leaving 0 units. 7. Query for item 2 returns 0. 8. Item 3 has 20 units added. 9. Item 3 has another 10 units added, totaling 30 units. 10. Query for item 3 returns 30.","solution":"def process_transactions(n, m, transactions): inventory = [0] * (n + 1) results = [] for transaction in transactions: parts = transaction.split() op = parts[0] i = int(parts[1]) if op == \'+\': k = int(parts[2]) inventory[i] += k elif op == \'-\': k = int(parts[2]) inventory[i] = max(inventory[i] - k, 0) elif op == \'?\': results.append(inventory[i]) return results"},{"question":"Given an array of positive integers, we define an \\"interesting subset\\" as a subset of the array where the sum of the maximum and minimum elements of the subset is even. Your task is to count the number of interesting subsets in the array. The first line contains a single integer n (1 leq n leq 100,000) — the number of integers in the array. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). Print a single integer representing the number of interesting subsets in the array. As the answer can be large, print it modulo 10^9 + 7. In the first sample case, for the array [1, 3], there is 1 interesting subset: {1, 3} since the sum of the maximum and minimum elements is even. In the second sample case, for the array [2, 4, 6], there are 7 interesting subsets: {2}, {2, 4}, {2, 6}, {4}, {4, 6}, {6}, and {2, 4, 6} where each has the sum of the maximum and minimum elements as an even number.","solution":"def count_interesting_subsets(arr): MOD = 10**9 + 7 odd_count = sum(1 for x in arr if x % 2 == 1) even_count = len(arr) - odd_count # Number of subsets with all even elements all_even_subsets = (pow(2, even_count, MOD) - 1) % MOD # Number of subsets with all odd elements all_odd_subsets = (pow(2, odd_count, MOD) - 1) % MOD # Number of subsets with a mix of even and odd elements mix_odd_even_subsets = (pow(2, len(arr), MOD) - all_even_subsets - all_odd_subsets - 1) % MOD total_interesting_subsets = (all_even_subsets + all_odd_subsets + mix_odd_even_subsets) % MOD return total_interesting_subsets"},{"question":"Simon is playing a game with a new type of dice. This dice has `n` faces, each labeled with a unique integer between `1` and `n`. Simon rolls the dice `m` times and records the results. He wins the game if he can collect exactly `k` consecutive numbers anywhere in his list of results. Help Simon determine if he wins the game. The first line contains three integers `n`, `m`, and `k` (1 le n, m le 10^6, 1 le k le n) where `n` is the number of faces of the dice, `m` is the number of times Simon rolls the dice, and `k` is the length of the consecutive sequence he needs to find to win. The second line contains `m` integers representing the results of Simon\'s dice rolls, each between `1` and `n`. Print \\"YES\\" if Simon wins the game, otherwise print \\"NO\\". # Example: **Input:** ``` 6 10 3 4 5 2 1 2 3 4 5 6 2 ``` **Output:** ``` YES ``` **Input:** ``` 4 7 4 1 2 3 1 2 4 1 ``` **Output:** ``` NO ``` # Explanation: In the first example, Simon rolls the dice 10 times. Among his results, the sequence `[1, 2, 3]` appears, which is a consecutive sequence of length 3. Therefore, he wins the game, and the output is \\"YES\\". In the second example, although there are some consecutive numbers, there is no sequence of exactly 4 consecutive numbers, so the output is \\"NO\\".","solution":"def simon_wins_game(n, m, k, rolls): Determine if Simon wins the game by finding a sequence of k consecutive integers in the dice rolls. :param n: Number of faces of the dice (integer) :param m: Number of times the dice is rolled (integer) :param k: Length of the consecutive sequence to find (integer) :param rolls: List of integers representing the results of the dice rolls :return: \\"YES\\" if a consecutive sequence of length k is found, \\"NO\\" otherwise for i in range(m - k + 1): consecutive = True for j in range(1, k): if rolls[i + j] != rolls[i + j - 1] + 1: consecutive = False break if consecutive: return \\"YES\\" return \\"NO\\""},{"question":"A forest ranger needs to monitor the health of trees along a riverbank. He has recorded the heights of trees in a row for several weeks. You need to help him by identifying patterns in the tree growth. A tree is defined as \\"healthy\\" if its height is greater than the height of its immediate left and right neighbors. The ranger wants to know if there are any healthy trees in the recorded sequence for each week. Given the heights of trees for several weeks (each week represented as an array of integers), determine if there is at least one healthy tree in each week’s recorded data. Input: - The first line contains an integer w (1 ≤ w ≤ 10^5) — the number of weeks. - Each of the next w lines describes the tree heights for a single week and contains the following: - An integer n (3 ≤ n ≤ 10^5) — the number of trees. - n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^6) — the heights of the trees in that week. It is guaranteed that the sum of n over all weeks does not exceed 10^6. Output: - For each week, print \\"YES\\" if there is at least one healthy tree, otherwise print \\"NO\\". Example: Input: 3 5 1 3 2 4 1 4 1 2 3 4 3 5 5 5 Output: YES NO NO","solution":"def is_healthy_tree_present(weeks): result = [] for week in weeks: n = week[0] heights = week[1:] found_healthy_tree = False for i in range(1, n-1): if heights[i-1] < heights[i] > heights[i+1]: found_healthy_tree = True break if found_healthy_tree: result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Given an array of integers and a number M, your task is to find out whether there exists a contiguous subarray whose sum is exactly M. If such a subarray exists, print \\"YES\\"; otherwise, print \\"NO\\". The first line contains two integers n and M (1 ≤ n ≤ 10^5, 1 ≤ M ≤ 10^9), where n is the length of the array and M is the target sum. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4), which are the elements of the array. Input: The first line of input contains two integers n and M. The second line contains n integers. Output: Print \\"YES\\" if there exists a contiguous subarray whose sum is exactly M. Otherwise, print \\"NO\\". For example: Input: 5 12 1 2 3 7 5 Output: \\"YES\\" Explanation: In the above example, the sum of the contiguous subarray [2, 3, 7] is 12. Another example: Input: 4 15 1 2 3 4 Output: \\"NO\\" Explanation: There is no contiguous subarray whose sum is 15.","solution":"def find_subarray_with_sum(n, M, arr): Determines if there exists a contiguous subarray whose sum is exactly M. Parameters: - n: Length of the array - M: Target sum - arr: List of integers representing the array Returns: - \\"YES\\" if such a subarray exists, otherwise \\"NO\\" current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > M and start <= end: current_sum -= arr[start] start += 1 if current_sum == M: return \\"YES\\" return \\"NO\\""},{"question":"You are developing a system that monitors air quality in a city using sensors placed at various locations. Each sensor reports the air quality index (AQI) at regular intervals. Unfortunately, data from some sensors can be missing at certain intervals due to various reasons such as sensor failures or maintenance activities. Your task is to analyze the air quality data collected from sensors over a period of time and calculate the average AQI for each interval. If data from any sensor is missing for a particular interval, that sensor is ignored for that interval\'s calculation. If all sensors miss for a particular interval, the average AQI for that interval should be reported as -1. Given the AQI data from multiple sensors, represented as a list of tuples where each tuple contains three elements: sensor id, interval id, and AQI value, you need to calculate the average AQI for each interval ID that appears in the data. # Input - The first line contains two integers `n` and `m` (1 leq n leq 10^5) and (1 leq m leq 10^5) — the number of AQI records and the number of sensors, respectively. - The next `n` lines each contain three integers `sensor_id`, `interval_id`, `AQI` (1 leq sensor_id leq m, 1 leq interval_id leq 10^9, 0 leq AQI leq 500) — representing the AQI reported by the sensor for that interval. # Output - For each unique interval ID that appears in the input, print a single line containing two integers `interval_id` and the average AQI for that interval. The output should be sorted by `interval_id` in ascending order. If all sensors miss for an interval, print `-1` as the average AQI for that interval. # Example Input ``` 7 3 1 1 100 2 1 50 3 1 75 1 2 200 2 3 120 1 3 80 3 3 90 ``` Output ``` 1 75 2 200 3 96 ``` In this example, interval 1 has data from all three sensors with AQIs 100, 50, and 75. So the average is (100+50+75)/3 = 75. Interval 2 has data from only one sensor with an AQI of 200. Interval 3 has data from three sensors with AQIs 120, 80, and 90. So the average is (120+80+90)/3 ≈ 96. If at any interval, no sensor reported data, the average should be -1.","solution":"def average_aqi(n, m, records): from collections import defaultdict interval_aqi = defaultdict(list) # Collect AQI records for each interval for sensor_id, interval_id, aqi in records: interval_aqi[interval_id].append(aqi) # Calculate the average AQI for each interval result = [] for interval_id in sorted(interval_aqi): aqi_values = interval_aqi[interval_id] if aqi_values: average_aqi = sum(aqi_values) // len(aqi_values) else: average_aqi = -1 result.append((interval_id, average_aqi)) return result"},{"question":"You are given a grid of size n × m filled with numbers. You can perform the following operation any number of times: 1. Select a rectangular subgrid and rotate it by 90 degrees clockwise. Your task is to determine if it\'s possible to make all the elements in the grid the same by performing the given operation any number of times. The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns of the grid. Each of the following n lines contains m integers ai,j (1 ≤ ai,j ≤ 100) — the elements of the grid. Print \\"YES\\" (without quotes) if it\'s possible to make all elements of the grid the same, otherwise print \\"NO\\". # Example Input: ``` 3 3 1 2 1 2 1 2 1 2 1 ``` Output: ``` YES ``` Input: ``` 2 2 1 2 3 4 ``` Output: ``` NO ``` # Explanation: In the first example, rotating the entire grid or subgrids will eventually make all elements equal since the pattern is symmetric. In the second example, it is impossible to make all elements equal with any number of rotations.","solution":"def can_make_grid_uniform(n, m, grid): Determine if it\'s possible to make all elements in the grid the same by performing the subgrid rotation operation any number of times. from collections import Counter total_elements = n * m flat_grid = [grid[i][j] for i in range(n) for j in range(m)] freq = Counter(flat_grid) max_freq = max(freq.values()) # If the most frequent element appears more than or equal to half of the # total elements in the grid, it is possible to make all elements the same if max_freq >= total_elements / 2: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an integer array `nums` and an integer `k`, you need to rearrange the array such that the maximum difference between any two adjacent elements is minimized. This can be done by cutting the array into exactly `k` non-empty continuous subarrays and the maximum difference between the smallest and largest number in each subarray is minimized. Your task is to find the minimized maximum difference. Each element in the array represents an integer value and you can split the array into exactly `k` continuous subarrays. These subarrays must together include all elements of the original array and order must be maintained. For example, given the array [1, 3, 6, 4, 1, 2], if you\'re to split it into 3 subarrays, an optimal solution would be ([1, 3], [6, 4], [1, 2]) with difference in subarrays being [2, 2, 1] and maximum among these being 2. # Input - The first line of the input contains an integer `n` (1 ≤ `n` ≤ 100,000) representing the size of the array. - The second line contains `n` space-separated integers `nums` where each integer is between 1 and 1,000,000. - The third line contains an integer `k` (1 ≤ `k` ≤ `n`). # Output - Print a single integer representing the minimized maximum difference between the largest and smallest values in any of the `k` subarrays. # Example Input ``` 6 1 3 6 4 1 2 3 ``` Output ``` 2 ``` # Note In the example, by dividing the array into 3 subarrays such as ([1, 3], [6, 4], [1, 2]) the maximum difference in each subarray is [2, 2, 1] and the overall minimized maximum difference is 2. Carefully think about how to approach partitioning and check all possible ways to split the array to achieve the minimum maximum difference. A binary search or a dynamic programming approach might be useful.","solution":"def min_max_difference(nums, k): def can_partition(nums, k, max_diff): partitions = 1 current_min = current_max = nums[0] for num in nums[1:]: current_min = min(current_min, num) current_max = max(current_max, num) if current_max - current_min > max_diff: partitions += 1 current_min = current_max = num if partitions > k: return False return True left, right = 0, max(nums) - min(nums) while left < right: mid = (left + right) // 2 if can_partition(nums, k, mid): right = mid else: left = mid + 1 return left # Example usage n = 6 nums = [1, 3, 6, 4, 1, 2] k = 3 print(min_max_difference(nums, k)) # Output: 2"},{"question":"The kingdom of Farland consists of n cities connected by m bidirectional roads. King Faru wants to ensure that there is a system in place to quickly find the shortest path between any two cities. Each road has a certain length associated with it. To help the king, you need to implement a function that finds the shortest path between any two given cities. The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of cities and the number of roads. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) — the identifiers of the cities connected by this road and the length of the road respectively. The next line contains an integer q (1 ≤ q ≤ 100) — the number of queries. Each of the next q lines contains two integers s and t (1 ≤ s, t ≤ n) — the identifiers of the starting and target cities for each query. For each query, output a single integer — the length of the shortest path between city s and city t. If there is no path between the two cities, output -1 instead. In the first example query, the shortest path between city 1 and city 3 is via cities 1 -> 2 -> 3 with a total length of 3 (roads of length 1 from 1 to 2, and length 2 from 2 to 3). In the second example query, there\'s no path from city 4 to city 1, so the output should be -1.","solution":"import heapq def dijkstra(graph, start): Uses Dijkstra\'s algorithm to find the shortest paths from the start node to all other nodes in the graph. Returns a dictionary with the shortest distance to each node. distance = {node: float(\'inf\') for node in graph} distance[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distance[current_node]: continue for neighbor, weight in graph[current_node]: distance_via_current = current_distance + weight if distance_via_current < distance[neighbor]: distance[neighbor] = distance_via_current heapq.heappush(priority_queue, (distance_via_current, neighbor)) return distance def shortest_paths(n, m, edges, q, queries): Finds the shortest path between any two cities given the roads connecting them. :param n: Number of cities :param m: Number of roads :param edges: List of tuples where each tuple is (u, v, w) representing a road between city u and v with distance w :param q: Number of queries :param queries: List of tuples where each tuple is (s, t) representing a query for the shortest path from city s to city t :return: List of shortest path lengths for each query. If no path exists, return -1 for that query. # Create a graph representation using an adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for s, t in queries: distances = dijkstra(graph, s) result = distances[t] if distances[t] != float(\'inf\') else -1 results.append(result) return results"},{"question":"A group of friends is playing a game where they pass around a ball. The game starts with one of the friends and proceeds by passing the ball according to a series of instructions. If a friend receives the ball, they pass it to the left or right as dictated by the instructions. You are to determine the final holder of the ball after all instructions are completed. Each friend is numbered from 1 to n, and they are standing in a circle such that each friend passes to their left (friend number decreases by 1, and 1 passes to n) or to their right (friend number increases by 1, and n passes to 1). The input consists of two lines. The first line contains two integers: n (2 ≤ n ≤ 100,000) — the number of friends, and m (1 ≤ m ≤ 100,000) — the number of instructions. The second line contains m characters, each being either \'L\' (pass to the left) or \'R\' (pass to the right). Output the number of the friend who ends up with the ball after all the instructions have been applied, assuming the ball initially starts at friend number 1. Examples: Input: 6 5 LRRLL Output: 4 Explanation: - Start at friend 1. - Instruction \'L\': Pass to 6. - Instruction \'R\': Pass to 1. - Instruction \'R\': Pass to 2. - Instruction \'L\': Pass to 1. - Instruction \'L\': Pass to 6. - Thus, the final holder of the ball is friend 6.","solution":"def find_final_holder(n, m, instructions): Determines the final holder of the ball after m instructions. :param n: int - Number of friends :param m: int - Number of instructions :param instructions: str - Instructions where \'L\' represents passing to the left and \'R\' represents passing to the right :return: int - The number of the friend who ends up with the ball current_position = 1 for instruction in instructions: if instruction == \'L\': current_position = ((current_position - 2) % n) + 1 # Pass to the left elif instruction == \'R\': current_position = (current_position % n) + 1 # Pass to the right return current_position"},{"question":"Given a rectangular grid with dimensions n x m, where each cell has a value of either 0 or 1, your task is to find the maximum size of a square sub-grid that contains only the value 1. Write a function that takes in the dimensions of the grid and the grid itself, and returns the size of the largest square sub-grid containing only 1\'s. The input consists of: - An integer n (1 ≤ n ≤ 1000) that represents the number of rows. - An integer m (1 ≤ m ≤ 1000) that represents the number of columns. - A list of n strings, each containing m characters, where each character is either \'0\' or \'1\'. The function should output a single integer, the side length of the largest square sub-grid containing only 1\'s. Example: Input: ``` 4 5 10111 10111 11111 10010 ``` Output: ``` 3 ``` In this example, the largest square contains all 1\'s and its side length is 3.","solution":"def find_max_square_subgrid(n, m, grid): # Create a 2D list to store the size of the largest square ending at each point dp = [[0] * m for _ in range(n)] max_size = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size"},{"question":"You are given a list of `n` pairs of non-negative integers where each pair represents a range of IDs inclusive, that a user has subscribed to. Due to an error, some of these ranges can overlap. Your task is to merge the overlapping ranges and return the non-overlapping ranges in ascending order. For example, if the input is [[1, 3], [2, 4], [6, 8]], the output should be [[1, 4], [6, 8]]. The first line of the input contains a single integer `n` (1 ≤ n ≤ 100,000) denoting the number of ranges. Each of the next `n` lines contains two integers `start` and `end` (0 ≤ start ≤ end ≤ 1,000,000,000), denoting the start and end of a range (inclusive). The output should be several lines, each containing two integers, representing the non-overlapping ranges after merging, in ascending order. Example: Input: ``` 3 1 3 2 4 6 8 ``` Output: ``` 1 4 6 8 ``` Input: ``` 4 1 2 3 5 4 6 7 8 ``` Output: ``` 1 2 3 6 7 8 ```","solution":"def merge_ranges(ranges): Merges overlapping ranges and returns the non-overlapping ranges in ascending order. # Sort the ranges by the start value ranges.sort(key=lambda x: x[0]) merged = [] for current in ranges: if not merged or merged[-1][1] < current[0]: merged.append(current) else: merged[-1][1] = max(merged[-1][1], current[1]) return merged"},{"question":"You are given a sequence of integers. You are allowed to perform the following operation any number of times: choose any two elements in the sequence and replace both of them with their greatest common divisor (GCD). Your goal is to minimize the maximum element in the sequence after performing any number of such operations. Determine the smallest possible maximum element after any number of operations. The first line contains a single integer n (1 le n le 10^5) — the number of elements in the sequence. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 le a_i le 10^9). Output a single integer — the smallest possible maximum element after any number of operations. # Example Input: ``` 4 6 8 12 15 ``` Output: ``` 1 ``` Explanation: At each step, we can choose two numbers and replace them with their GCD. Initially, the maximum element is 15. But we can perform the following operations to minimize it: 1. Replace 6 and 8 by their GCD 2: [2, 12, 15, 2] 2. Replace 12 and 2 by their GCD 2: [2, 2, 15, 2] 3. Replace 15 and 2 by their GCD 1: [2, 2, 1, 2] Now the maximum element in the sequence is 2, which is the minimum we can achieve.","solution":"from math import gcd from functools import reduce def smallest_possible_max(a): Given a list of integers, returns the smallest possible maximum element after any number of GCD operations. return reduce(gcd, a)"},{"question":"Alice and Bob are playing a game with an array consisting of n integers. The game proceeds as follows: 1. Alice starts first and they take turns. 2. On their turn, the player must remove a single element from the array. 3. The player who removes an element makes a move and then reduces the current value of the target sum by the value of the removed element. 4. The game ends if the current value of the target sum becomes zero or negative. If the player cannot make a move that maintains the target sum as a positive integer before the move, that player loses. Determine who will win the game if both play optimally. Input: - The first line contains two integers n (1 ≤ n ≤ 100), the number of elements in the array, and target_sum (1 ≤ target_sum ≤ 10^4), the initial value of the target sum. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the elements of the array. Output: - Output \\"Alice\\" if Alice wins, otherwise output \\"Bob\\". Example: Input: 5 15 3 1 4 2 8 Output: Alice Explanation: In the given example, the optimal strategy for both players will have Alice win by ensuring she always leaves an aggregate sum that forces Bob to play unfavorably.","solution":"def determine_winner(n, target_sum, array): Determine who will win the game between Alice and Bob. Parameters: n (int): Number of elements in the array. target_sum (int): The initial value of the target sum. array (list): List of integers representing the array elements. Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" otherwise. total_sum = sum(array) # Edge case: if total sum of array is less than target_sum, Bob will always win if total_sum < target_sum: return \\"Bob\\" turns = (target_sum - 1) // total_sum + 1 if turns % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"In a city, there are n zones (numbered from 1 to n) and m one-way roads connecting them. Each road has a travel time associated with it. You need to find the shortest travel times from a designated start zone to all other zones. Write a program that takes as input the number of zones n, the number of roads m, the start zone id, and a list of roads. Each road is specified by three integers u, v, and t, where u is the starting zone, v is the destination zone, and t is the travel time between them. All travel times are non-negative integers. The input is given in the following format: - The first line contains three integers n, m, and the start zone id (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000, 1 ≤ start ≤ n). - Each of the next m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, 0 ≤ t ≤ 100). Your program should output n integers, where the i-th integer is the shortest travel time from the start zone to zone i. If a zone is unreachable from the start zone, output -1 for that zone. # Example Input ``` 5 6 1 1 2 1 1 3 3 2 3 1 2 4 6 3 4 2 4 5 1 ``` Output ``` 0 1 2 4 5 ``` Explanation In this example, the shortest travel times from zone 1 are: - Zone 1 to 1: 0 (starting point) - Zone 1 to 2: 1 (direct road 1 → 2) - Zone 1 to 3: 2 (path 1 → 2 → 3) - Zone 1 to 4: 4 (path 1 → 2 → 3 → 4) - Zone 1 to 5: 5 (path 1 → 2 → 3 → 4 → 5)","solution":"import heapq def dijkstra(n, m, start, roads): graph = [[] for _ in range(n + 1)] for u, v, t in roads: graph[u].append((v, t)) distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_zone = heapq.heappop(priority_queue) if current_distance > distances[current_zone]: continue for neighbor, weight in graph[current_zone]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [dist if dist != float(\'inf\') else -1 for dist in distances[1:]] def solve(input_lines): n, m, start = map(int, input_lines[0].split()) roads = [tuple(map(int, line.split())) for line in input_lines[1:]] return dijkstra(n, m, start, roads)"},{"question":"You are given a binary search tree (BST) with n nodes, each node having a unique value between 1 and n. You are also given a list of queries. Each query represents a value, and your task is to find the node in the BST that is closest to that value. The closest node is defined based on the absolute difference between the value of the node and the query value. If there are multiple nodes with the same closest value, return any of them. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of nodes in the BST. The next line contains n distinct integers representing the values of the nodes in the BST in the order of insertion. The third line contains an integer q (1 ≤ q ≤ 10^4) — the number of queries. The following q lines each contain a single integer representing a query. Output q lines, each containing the value of the node in the BST that is closest to the corresponding query value. # Example **Input:** ``` 5 4 2 6 1 3 3 5 2 10 ``` **Output:** ``` 4 2 6 ```","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def insert_into_bst(root, val): if not root: return TreeNode(val) if val < root.val: root.left = insert_into_bst(root.left, val) else: root.right = insert_into_bst(root.right, val) return root def closest_value_in_bst(root, target): closest = root.val while root: if abs(root.val - target) < abs(closest - target): closest = root.val if target < root.val: root = root.left elif target > root.val: root = root.right else: break return closest def solve_bst_closest_value(n, values, q, queries): if not values: return [] root = TreeNode(values[0]) for val in values[1:]: insert_into_bst(root, val) result = [] for query in queries: result.append(closest_value_in_bst(root, query)) return result"},{"question":"Given a directed graph with `n` nodes and `m` edges, determine the shortest path from a source node `s` to a target node `t`. However, each edge in the graph has an associated danger level, and you want to minimize the maximum danger level encountered along the path from `s` to `t`. The first line of input contains three integers `n`, `m`, and `s` (1 ≤ n ≤ 1000, 1 ≤ m ≤ 5000, 1 ≤ s ≤ n), where `n` is the number of nodes, `m` is the number of edges, and `s` is the source node. The second line contains the target node `t` (1 ≤ t ≤ n). The next `m` lines each contain three integers `u`, `v`, and `d` (1 ≤ u, v ≤ n; 1 ≤ d ≤ 1000), which represent a directed edge from node `u` to node `v` with danger level `d`. Output the minimum possible value of the maximum danger level encountered along the path from `s` to `t`. If there is no such path, output `-1`. Example: Input: ``` 4 5 1 4 1 2 3 1 3 5 2 3 2 2 4 4 3 4 2 ``` Output: ``` 3 ``` In this example, the path from node 1 to node 4 with the minimum possible maximum danger level is 1 -> 2 -> 4, and the maximum danger level on this path is 3.","solution":"import heapq def min_max_danger_path(n, m, s, t, edges): Finds the path from s to t that minimizes the maximum danger level on the path. Returns the minimum possible value of the maximum danger level encountered along the path. If there is no such path, returns -1. # Graph representation graph = [[] for _ in range(n + 1)] for u, v, d in edges: graph[u].append((v, d)) # Binary search over the answer left, right = 1, 1000 result = -1 def can_reach_with_max_danger(max_danger): visited = [False] * (n + 1) pq = [(0, s)] # (current max danger on the path, current node) heapq.heapify(pq) while pq: current_danger, node = heapq.heappop(pq) if node == t: return True if visited[node]: continue visited[node] = True for neighbor, danger in graph[node]: if not visited[neighbor] and danger <= max_danger: heapq.heappush(pq, (max(danger, current_danger), neighbor)) return False while left <= right: mid = (left + right) // 2 if can_reach_with_max_danger(mid): result = mid right = mid - 1 else: left = mid + 1 return result"},{"question":"Stella is building a system to analyze online reviews. She has a list of reviews where each review is a string of words. Stella wants to find the \\"Top k Frequent Words\\" in the reviews. The frequency of a word is the number of times it appears in the reviews. Write a program that takes two inputs: an integer k and a list of strings, where each string is a review consisting of words separated by spaces. Your task is to return the list of top k frequent words. If there are multiple words with the same frequency, the lexicographical order (dictionary order) should be used to break the ties. The first line of the input contains an integer k (1 ≤ k ≤ 100). The second line contains an integer n (1 ≤ n ≤ 1000), the number of reviews. The next n lines each contain a review string consisting of words from the English alphabet (1 ≤ length of each review ≤ 100). Print the \\"Top k Frequent Words\\" sorted by their frequency in descending order. If there is a tie, sort the words by their lexicographical order in ascending order. # Example: **Input:** 3 5 hello world hello hello stella stella world world stella **Output:** hello stella world **Explanation:** The word \'hello\' appears 3 times, \'stella\' appears 3 times, and \'world\' appears 3 times. There is a tie, so the words are ordered lexicographically. The top 3 words are \'hello\', \'stella\', \'world\'.","solution":"from collections import defaultdict from heapq import nlargest def top_k_frequent_words(k, reviews): Returns the top k frequent words from the list of reviews. word_count = defaultdict(int) # Count frequency of each word for review in reviews: for word in review.split(): word_count[word] += 1 # Get the top k words by frequency and lexicographical order top_k_words = nlargest(k, word_count.items(), key=lambda item: (item[1], -ord(item[0][0]))) top_k_words.sort(key=lambda w: (-w[1], w[0])) # Sort by frequency and lexicographical order return [word for word, count in top_k_words]"},{"question":"Emma loves playing a game where she collects magic crystals. Each crystal has a magical power associated with it, which is an integer value that can be either positive, negative, or zero. Emma wants to maximize the sum of the magical powers of the crystals she collects. However, there\'s a catch: she can only collect crystals that are in a consecutive subarray. Given an array of integers representing the magical powers of different crystals, help Emma find the maximum sum she can get by collecting a contiguous subarray of crystals. Input Format: - The first line contains an integer n (1 ≤ n ≤ 105) — the number of crystals. - The second line contains n integers ai (-109 ≤ ai ≤ 109) — the magical power of each crystal. Output Format: - Print the maximum sum of the magical powers that Emma can collect by choosing a contiguous subarray of crystals. Example: Input: 5 -2 1 -3 4 -1 2 1 -5 4 Output: 6 Explanation: The maximum sum of contiguous subarray is [4, -1, 2, 1] which sums up to 6.","solution":"def max_subarray_sum(crystals): Returns the maximum sum of a contiguous subarray. max_current = max_global = crystals[0] for num in crystals[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"A programming contest is being held, and the contest committee has prepared n different problems for the participants. Each problem has a certain difficulty level ranging from 1 to 10^9. The committee wants to create problem sets that meet specific criteria to ensure a balanced challenge to the participants. A problem set consists of at least two problems, and the difficulty of a problem set is defined as the absolute difference between the difficulty levels of the hardest problem and the easiest problem in the set. The committee wants to know how many valid problem sets can be created from the n problems such that no two problem sets have the same pair of easiest and hardest problems. You are given the number of problems n, followed by the list of difficulty levels of the problems. Your task is to determine the number of valid problem sets that the committee can create. Input: - The first line contains an integer n (2 ≤ n ≤ 100,000) – the number of problems. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) – the difficulty levels of the problems. Output: - Print a single integer – the number of valid problem sets. Example: Input: 4 1 4 3 2 Output: 6 Explanation: The valid problem sets are: - (1, 2) - (1, 3) - (1, 4) - (2, 3) - (2, 4) - (3, 4) Each set is determined by choosing the minimum and maximum difficulty problems in the set. There are 6 such valid problem sets.","solution":"def count_valid_problem_sets(n, difficulties): Returns the number of valid problem sets. # Sort the difficulties to simplify the process of finding valid sets difficulties.sort() # Number of valid sets is determined by the count of all possible pairs # As each pair (min, max) from the sorted list forms a valid problem set return (n * (n - 1)) // 2 # Example usage: # n = 4 # difficulties = [1, 4, 3, 2] # print(count_valid_problem_sets(n, difficulties)) # Output: 6"},{"question":"Polycarp has recently found a unique use case for his stack of books. Each book has a height and is colored either blue or red. Polycarp wants to form two stacks of books: one stack for blue books and one stack for red books. Moreover, he wants both stacks to be of equal height. Given n books with their heights and colors, help Polycarp find out if it is possible to form two stacks such that each stack contains only books of one color and the total height of books in both stacks are equal. Each book can appear in exactly one stack. The first line contains a single integer n (1 ≤ n ≤ 200000) — the number of books. The next n lines contain two integers h and c (1 ≤ h ≤ 10^9, c ∈ {0, 1}) — the height of the book and its color (0 represents blue, 1 represents red). Output \\"YES\\" if it is possible to form two stacks of the same height where each stack contains only books of one color. Otherwise, print \\"NO\\". In the first sample, Polycarp can choose the blue books with heights 3 and 2 for one stack, and the red books with heights 4 and 1 for the other stack. Both stacks have a height of 5. In the second sample, there is only one book of each color with different heights, so it is impossible to form two stacks of the same height. **Examples:** ``` Input: 4 3 0 2 0 4 1 1 1 Output: YES Input: 2 5 0 7 1 Output: NO ```","solution":"def can_form_equal_stacks(n, books): blue_books = [] red_books = [] # Separate the books into blue and red stacks for height, color in books: if color == 0: blue_books.append(height) else: red_books.append(height) sum_blue = sum(blue_books) sum_red = sum(red_books) # If the total heights of blue and red stacks are already equal if sum_blue == sum_red: return \\"YES\\" # Determine all possible sums from the blue books def possible_sums(books): possible = {0} for book in books: new_possible = set() for ps in possible: new_possible.add(ps + book) possible.update(new_possible) return possible possible_blue_sums = possible_sums(blue_books) possible_red_sums = possible_sums(red_books) # Check if there is a possible sum in blue stack and red stack that is the same for blue_sum in possible_blue_sums: if (sum_blue - blue_sum) == (sum_red + blue_sum): return \\"YES\\" return \\"NO\\""},{"question":"You are given two strings, S1 and S2, which represent two numbers in base B (2 <= B <= 36). Digits in these numbers are represented using \'0\'-\'9\' for values 0-9 and \'a\'-\'z\' for values 10-35. Your task is to write a program that calculates the sum of these two numbers and returns the result as a string representing a number in base B. The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains the following: - An integer B (2 ≤ B ≤ 36) — the base of the numbers. - Two strings S1 and S2 of equal length (1 ≤ |S1|, |S2| ≤ 1000) — the numbers to be summed in base B. For each test case, print the resulting string representing the sum of the two numbers in base B on a separate line. Example: Input: 2 2 101 110 16 1a f Output: 1011 23 Explanation: In the first test case, 101 (in base 2) + 110 (in base 2) = 1011 (in base 2). In the second test case, 1a (in base 16) + f (in base 16) = 29 (in base 16).","solution":"def sum_numbers_in_base(t, test_cases): This function takes the number of test cases and a list of tuples, where each tuple contains the base and two numbers as strings. It returns the results as a list of strings representing the sums. def base_to_int(s, base): return int(s, base) def int_to_base(n, base): digits = \\"0123456789abcdefghijklmnopqrstuvwxyz\\" result = \\"\\" while n > 0: result = digits[n % base] + result n = n // base return result or \\"0\\" results = [] for case in test_cases: B, S1, S2 = case num1 = base_to_int(S1, B) num2 = base_to_int(S2, B) total = num1 + num2 result = int_to_base(total, B) results.append(result) return results"},{"question":"You\'ve recently joined a video streaming startup as a software engineer. One of the main features of the platform is to recommend videos based on the watch history of users. However, the recommendation algorithm needs to be optimized for large-scale data. The platform has a total of n videos, each identified by a unique integer from 1 to n. The watch history of a user is represented as an array of integers where each element corresponds to a video id that has been watched by the user. To make recommendations, you need to find the top k most frequently watched videos in the user\'s watch history. If there are ties in frequency, return the videos with the lower id first. Write a function that takes in two parameters: - An array of integers representing the user\'s watch history. - An integer k representing the number of recommendations needed. The function should return an array of integers representing the top k most frequently watched videos. Function signature: ```python def top_k_frequent_videos(watch_history: List[int], k: int) -> List[int]: pass ``` # Input - 1 leq | text{watch_history} | leq 10^5: The length of the watch history. - 1 leq text{watch_history}[i] leq n: Each video id in the watch history. - 1 leq k leq n leq 10^5: The number of recommendations needed. # Output The function should return a list of integers representing the ids of the top k most frequently watched videos, ordered by their frequency and then by their id in case of ties. # Example ```python watch_history = [1, 2, 1, 2, 1, 3, 3, 3, 4, 5] k = 2 print(top_k_frequent_videos(watch_history, k)) # Output: [1, 3] watch_history = [1, 1, 2, 2, 3, 3, 4, 4] k = 3 print(top_k_frequent_videos(watch_history, k)) # Output: [1, 2, 3] ``` # Constraints - The function should run efficiently on large inputs. - The platform demands strict correctness as the recommendations directly impact user satisfaction.","solution":"from typing import List from collections import Counter def top_k_frequent_videos(watch_history: List[int], k: int) -> List[int]: Finds the top k most frequently watched videos in the user\'s watch history. If ties in frequency occur, videos with lower id are prioritized. # Count the frequency of each video in the watch history freq_counter = Counter(watch_history) # Sort the videos based on frequency, and then by video id sorted_videos = sorted(freq_counter.keys(), key=lambda vid: (-freq_counter[vid], vid)) # Return the top k videos return sorted_videos[:k]"},{"question":"Given two strings, s and t, you are to find the length of the longest common subsequence (LCS) of the two strings. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example, the LCS of \\"abcde\\" and \\"ace\\" is \\"ace,\\" which has a length of 3, and the LCS of \\"abc\\" and \\"def\\" is \\"\\", which has a length of 0. The first line of the input contains a single integer n (1 leq n leq 1000) — the length of string s. The second line contains the string s, which consists of lowercase English letters. The third line of the input contains a single integer m (1 leq m leq 1000) — the length of string t. The fourth line contains the string t, which consists of lowercase English letters. Print a single integer — the length of the longest common subsequence of s and t. **Example:** ``` Input: 5 abcde 3 ace Output: 3 ``` ``` Input: 3 abc 3 def Output: 0 ```","solution":"def longest_common_subsequence_length(n, s, m, t): Returns the length of the longest common subsequence between strings s and t. :param n: Length of string s :param s: String s :param m: Length of string t :param t: String t :return: Length of the longest common subsequence # Create a 2D DP array dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill the DP array for i in range(1, n+1): for j in range(1, m+1): if s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[n][m]"},{"question":"In a distant kingdom, there is a peculiar game played in a rectangular grid of size n times m where each cell contains a non-negative integer. Players Ingo and Lira take turns moving a piece from one cell to another. The piece starts in the top-left cell (1, 1) and their goal is to reach the bottom-right cell (n, m). On each turn, a player may move the piece right to the adjacent cell or down to the adjacent cell, but not both. Ingo and Lira are competitive players and they try to maximize the sum of the values of the cells the piece visits during the game. Ingo starts the game and both players play optimally. You need to determine the maximum sum Ingo can achieve by the time the piece reaches the bottom-right cell. The first line of the input contains two integers n and m (1 le n, m le 1000) – the size of the grid. Each of the next n lines contains m integers each, where the j-th integer in the i-th line denotes the value of the cell (0 le value le 1000). Output a single integer, the maximum sum Ingo can achieve by the end of the game. Example: ``` Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 12 Explanation: Ingo can achieve the maximum sum by following the path (1,1) → (1,2) → (2,2) → (3,2) → (3,3) with the sum 1 + 3 + 5 + 2 + 1 = 12. ```","solution":"def max_sum_path(n, m, grid): # Initialize a DP table to store the maximum sum till each cell dp = [[0] * m for _ in range(n)] # Base case: the value of the top-left cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The result is in the bottom-right cell return dp[n-1][m-1]"},{"question":"Given an array of integers, you need to determine whether there exists a triplet (i, j, k) where 0 ≤ i < j < k < n such that the sum of elements at these indices is equal to a given integer target. Create a function `findTriplet(arr, target)` that takes an array of integers `arr` and an integer `target`, and returns `True` if such a triplet exists, otherwise returns `False`. The first line of input contains two integers n (1 ≤ n ≤ 3000) — the number of elements in the array, and target (|target| ≤ 10^9). The second line contains n space-separated integers representing the elements of the array. # Input - The first line contains two integers n and target. - The second line contains n space-separated integers representing the elements of the array. # Output - Output `True` if there exists a triplet (i, j, k) with 0 ≤ i < j < k < n such that arr[i] + arr[j] + arr[k] = target. Otherwise, output `False`. # Sample Input ``` 5 22 12 3 4 1 6 ``` # Sample Output ``` True ``` # Explanation In the sample input, the triplet (12, 4, 6) at indices (0, 2, 4) has the sum equal to 22. Thus, the output is `True`. # Constraints - 1 ≤ n ≤ 3000 - |target| ≤ 10^9 - Elements of the array can be negative, zero, or positive.","solution":"def findTriplet(arr, target): n = len(arr) arr.sort() # Sorting the array to apply two-pointer technique for i in range(n-2): left = i + 1 right = n - 1 while left < right: triplet_sum = arr[i] + arr[left] + arr[right] if triplet_sum == target: return True elif triplet_sum < target: left += 1 else: right -= 1 return False"},{"question":"A corporation is planning to distribute company T-shirts to its employees. The corporation has arranged for a local printing shop to produce the T-shirts. However, due to a certain constraint, the printing shop can only produce T-shirts in two sizes: small (S) and large (L). Each order must consist of a number of T-shirts that is divisible by a combination of the two sizes. The corporation wants to know the minimum number of T-shirts they can order that satisfies this condition. Given two integers, `S` and `L`, representing the number of T-shirts in small and large orders respectively, find the minimum number that can be ordered which is divisible by both `S` and `L`. The first line of the input contains two integers `S` and `L` (1 ≤ S, L ≤ 100). Print the minimum number of T-shirts that satisfies the condition. # Example Example 1: ``` Input: 3 5 Output: 15 ``` Explanation: The smallest number that is divisible by both 3 and 5 is 15. Example 2: ``` Input: 4 6 Output: 12 ``` Explanation: The smallest number that is divisible by both 4 and 6 is 12.","solution":"def lcm(a, b): Returns the least common multiple (LCM) of two numbers a and b. def gcd(x, y): while y: x, y = y, x % y return x return abs(a * b) // gcd(a, b) def min_tshirts_order(S, L): Returns the minimum number of T-shirts that is divisible by both S and L. return lcm(S, L)"},{"question":"Jack has a sequence of integers representing the power levels from his magic training sessions over n days. Each day\'s power level is non-negative. Jack wants to find the longest subarray where the sum of power levels does not exceed k. Help Jack determine the length of this subarray. The input consists of multiple test cases. The first line contains an integer T (1 le T le 100) — the number of test cases. Each test case consists of two lines: - The first line contains two integers n and k (1 le n le 10^5, 0 le k le 10^9) — the number of days and the maximum allowable sum of power levels. - The second line contains n non-negative integers p_1, p_2, ..., p_n (0 le p_i le 10^4) — the power levels. For each test case, print a single integer — the maximum length of the subarray with a sum that does not exceed k. In the first test case example, the longest subarray with sum at most 5 is [1, 2], which has length 2. In the second test case example, the longest subarray with sum at most 10 is [5, 1, 2], which has length 3. In the third test case example, the longest subarray with sum at most 0 is [], which has length 0. In the fourth test case example, the longest subarray with sum at most 15 is [8, 3], which has length 2.","solution":"def max_length_subarray(T, test_cases): results = [] for testcase in test_cases: n, k = testcase[0] power_levels = testcase[1] max_length = 0 current_sum = 0 start_index = 0 for end_index in range(n): current_sum += power_levels[end_index] while current_sum > k: current_sum -= power_levels[start_index] start_index += 1 max_length = max(max_length, end_index - start_index + 1) results.append(max_length) return results"},{"question":"A farmer wants to arrange his crops in a rectangular field with dimensions n × m. Each cell of the field can grow a certain type of crop and the farmer wants to maximize the variety of crops in the field. However, there is a restriction: No two adjacent cells (horizontally or vertically) should have the same type of crop. You must determine the maximum number of different crops he can plant in the field under this restriction and provide a way to achieve this arrangement. Assume that the farmer has an unlimited supply of crops and can use as many types as needed. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the field. Output a single integer — the maximum number of different crop types that can be planted, and then output n lines of m characters each describing the arrangement corresponding to this maximum number. Use uppercase English letters to represent different crop types. For example: Input: 2 3 Output: 3 ABC CAB In this example, 3 different crop types are used, ensuring that no two adjacent cells have the same type of crop.","solution":"def max_crops(n, m): Returns the maximum number of different crops that can be planted in the field, and an arrangement of crops in the field. crops = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" crop_arrangement = [] for i in range(n): row = [] for j in range(m): # The position in the crop string is decided to ensure adjacent cell rules row.append(crops[(i + j) % len(crops)]) crop_arrangement.append(\'\'.join(row)) return min(n, m), crop_arrangement # Function to generate output and print results def print_max_crops(n, m): max_crop_count, arrangement = max_crops(n, m) print(max_crop_count) for row in arrangement: print(row)"},{"question":"Chris enjoys hiking in the mountains and often finds himself on narrow, winding paths. He likes to keep track of his elevation changes during the hike by recording the elevation at each step. However, the path gets dangerous when there\'s a sharp elevation change rate compared to the previous steps. You are given an array of integers that represent the elevations during the hike at each step. Your task is to identify the largest contiguous segment (subarray) of the elevation array where the difference between the maximum and minimum elevations within that segment is at most a given threshold k. The first line contains two integers n and k (1 ≤ n ≤ 100000, 0 ≤ k ≤ 100000)— the number of steps and the threshold value, respectively. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 100000) — the elevations at each step. Output the length of the largest contiguous segment where the difference between the maximum and minimum elevations is at most k. Example: Input: 7 4 1 3 2 6 4 8 5 Output: 4 Explanation: In this example, the longest segment where the difference between the maximum and minimum elevations is at most 4 is [3, 2, 6, 4], and its length is 4.","solution":"def largest_subarray_with_threshold(n, k, elevations): from collections import deque min_deque = deque() # stores the indices of the min elements in the current window max_deque = deque() # stores the indices of the max elements in the current window max_length = 0 left = 0 for right in range(n): # maintain the max_deque while max_deque and elevations[max_deque[-1]] <= elevations[right]: max_deque.pop() max_deque.append(right) # maintain the min_deque while min_deque and elevations[min_deque[-1]] >= elevations[right]: min_deque.pop() min_deque.append(right) while elevations[max_deque[0]] - elevations[min_deque[0]] > k: left += 1 if max_deque[0] < left: max_deque.popleft() if min_deque[0] < left: min_deque.popleft() max_length = max(max_length, right - left + 1) return max_length"},{"question":"Mohan is an avid hiker and loves to explore new trails. He\'s currently planning a hiking trip and wants to pack his backpack in the most efficient manner possible. His backpack can carry items up to a certain weight, and he has a list of items he wants to bring, each with a specific weight and value. Mohan aims to maximize the value of the items in his backpack without exceeding its weight capacity. Can you help him determine the maximum value he can achieve? You are given a list of items, where each item has a weight and a value, and the maximum weight that the backpack can carry. Write a program that, given the number of items, the weights and values of the items, and the maximum weight capacity of the backpack, determines the maximum value Mohan can achieve. The first line contains two integers n and W (1 ≤ n ≤ 1000, 1 ≤ W ≤ 100000). The next n lines each contain two integers w_i and v_i (1 ≤ w_i ≤ 1000, 1 ≤ v_i ≤ 1000), representing the weight and value of the i-th item. Print a single integer, the maximum value of the items that can be carried in the backpack. Example: Input: 4 50 10 60 20 100 30 120 35 140 Output: 220","solution":"def knapsack(n, W, items): Solves the knapsack problem using dynamic programming. Parameters: n (int): Number of items. W (int): Maximum weight capacity of the backpack. items (list of tuples): Each tuple contains (weight, value) of an item. Returns: int: Maximum value that can be achieved without exceeding weight capacity. dp = [0] * (W + 1) for weight, value in items: for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return dp[W] # Example usage: def read_input(): Reads input from the standard input. Returns: tuple: n, W and a list of items read from the input. import sys input = sys.stdin.read data = input().split() n = int(data[0]) W = int(data[1]) items = [] index = 2 for i in range(n): weight = int(data[index]) value = int(data[index + 1]) items.append((weight, value)) index += 2 return n, W, items # Uncomment below for actual input # if __name__ == \\"__main__\\": # n, W, items = read_input() # print(knapsack(n, W, items))"},{"question":"You are given a list of integers representing the levels of pollution in various parts of a city. Your task is to implement a function to find the maximum possible reduction in pollution levels after performing the following operations any number of times: 1. Choose a contiguous subarray of pollution levels and reduce each element in this subarray by 1. 2. The pollution level of any part of the city should never become negative. More formally, you are given an array of integers ( text{pollution} = [p_1, p_2, dots, p_n] ), where ( p_i ) denotes the pollution level at the ( i )-th part of the city. You need to determine the maximum possible total reduction in pollution levels across the city by selecting optimal subarrays and reducing their elements. The first line of input contains a single integer ( t ) (1 le t le 100) — the number of test cases. Each test case consists of two lines: - The first line contains a single integer ( n ) (1 le n le 100) — the number of elements in the pollution array. - The second line contains ( n ) space-separated integers ( p_1, p_2, dots, p_n ) (0 le p_i le 10^9) — the pollution levels in various parts of the city. For each test case, output a single integer — the maximum possible reduction in pollution levels. # Example **Input:** ``` 2 5 3 1 4 1 5 4 2 3 1 2 ``` **Output:** ``` 14 8 ``` # Explanation **Test case 1:** - Start by reducing the full array [3, 1, 4, 1, 5] by 1, yielding [2, 0, 3, 0, 4], reducing pollution by 5. - Next, reduce the subarray [2, 0, 3, 0, 4] by 1, yielding [1, 0, 2, 0, 3], reducing pollution by 5. - Finally, reduce the subarray [1, 0, 2, 0, 3] by 1, yielding [0, 0, 1, 0, 2], reducing pollution by 4. - Total reduction = 5 + 5 + 4 = 14. **Test case 2:** - Start by reducing the full array [2, 3, 1, 2] by 1, yielding [1, 2, 0, 1], reducing pollution by 8. - Next, reduce the subarray [1, 2, 0, 1] by 1, yielding [0, 1, 0, 0], reducing pollution by 1. - Total reduction = 8 + 0 = 8.","solution":"def max_pollution_reduction(test_cases): results = [] for case in test_cases: n, pollution = case total_reduction = sum(pollution) results.append(total_reduction) return results # Function to parse input and call max_pollution_reduction def process_input(input_list): t = int(input_list[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_list[index]) pollution = list(map(int, input_list[index + 1].strip().split())) test_cases.append((n, pollution)) index += 2 return max_pollution_reduction(test_cases)"},{"question":"In a coding competition, each participant attempts to solve programming problems and earns points for correct solutions. The competition organizer wants to calculate the final scoreboard for a given set of participants. Each participant is identified by a unique integer ID and has multiple submissions throughout the competition. For each submission, the participant may earn some points. However, only the highest score achieved by each participant for any submission is considered for the final scoreboard. Your task is to determine the final scores of all participants and display them in descending order of their scores. If multiple participants have the same score, they should be displayed in ascending order of their IDs. # Input - The first line contains an integer `n` (1 le n le 1000) — the number of participants. - The second line contains an integer `m` (1 le m le 1000) — the number of submissions. - The following `m` lines each contain two integers `p` and `s` (1 le p le n, 0 le s le 1000) — where `p` is the participant\'s ID and `s` is the score of the submission. # Output Print the final scoreboard in descending order of scores. For participants having the same score, print their IDs in ascending order. Each line of output should contain two integers `p` and `s` — the participant\'s ID and their highest score. # Example Input ``` 4 6 1 50 2 30 3 30 2 40 3 50 4 60 ``` Output ``` 4 60 1 50 3 50 2 40 ``` Explanation Participant 4 has the highest score of 60. Participant 1 has the second highest score of 50. Participant 3 has the third highest score of 50. Participant 2 has the fourth highest score of 40. Note that though participants 1 and 3 have the same score, participant 1 is listed first because their ID is smaller.","solution":"def calculate_final_scores(n, m, submissions): from collections import defaultdict participants_scores = defaultdict(int) for p, s in submissions: if s > participants_scores[p]: participants_scores[p] = s sorted_scores = sorted(participants_scores.items(), key=lambda x: (-x[1], x[0])) return sorted_scores"},{"question":"The city of Waterfalls is known for its beautiful waterfalls and charming bridges. The city is built on a river with n waterfalls located along its length, each represented by its strength (height) in meters. Tourists love to visit the city for its scenic beauty. The city has m bridges connecting various points along the river. Each bridge connects two distinct waterfalls, and it can be described by two integers u and v, indicating that there is a bridge between the u-th and v-th waterfall. However, the mayor wants to improve the city\'s tourist appeal by ensuring that the path taken by tourists over the bridges is as scenic as possible. A path\'s scenic value is defined as the maximum strength (height) of a waterfall on that path. The goal is to find the minimum possible scenic value for any path that connects the start of the river (at the 1st waterfall) to the end of the river (at the n-th waterfall). Given the heights of waterfalls and the bridges, help the mayor by determining the minimum scenic path value from the first to the n-th waterfall. Input: - The first line contains two space-separated integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of waterfalls and the number of bridges. - The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the strengths (heights) of the waterfalls. - The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating that there is a bridge between the u-th and v-th waterfall. Output: - Print a single integer — the minimum possible scenic value of any path from the 1st waterfall to the n-th waterfall. If there is no such path, print -1. Example: ``` Input: 5 6 1 2 4 5 3 1 2 1 3 2 4 3 4 4 5 3 5 Output: 4 ```","solution":"import heapq def minimum_scenic_value(n, m, heights, bridges): def dijkstra(): pq = [(heights[0], 0)] min_scenic = [float(\'inf\')] * n min_scenic[0] = heights[0] while pq: current_max_height, u = heapq.heappop(pq) if u == n - 1: return current_max_height for v in graph[u]: max_height = max(current_max_height, heights[v]) if max_height < min_scenic[v]: min_scenic[v] = max_height heapq.heappush(pq, (max_height, v)) return -1 graph = [[] for _ in range(n)] for u, v in bridges: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) return dijkstra()"},{"question":"Alex is fascinated by mountains and valleys. He has an array of integers b1, b2, ..., bn representing heights of terrain where each value corresponds to height at particular point on a linear path. Alex defines a mountain as a sequence of consecutive integers in the array which first strictly increases to a peak and then strictly decreases. Similarly, he defines a valley as a sequence that first strictly decreases to a trough and then strictly increases. Alex wants to calculate the number of mountains and valleys in the array. Could you help him with that? The first line contains an integer n (3 ≤ n ≤ 1000) — the number of points in the terrain array. The second line contains n space-separated integers bi (1 ≤ bi ≤ 1000) — heights of terrain at each point. Output two integers m and v — the number of mountains and valleys in the array. A mountain is defined as a strictly increasing sequence followed by a strictly decreasing sequence. A valley is defined as a strictly decreasing sequence followed by a strictly increasing sequence. Example 1: Input: 8 1 2 3 5 4 3 1 2 Output: 1 1 Example 2: Input: 7 4 3 2 1 2 3 4 Output: 0 1","solution":"def count_mountains_and_valleys(n, heights): mountains = 0 valleys = 0 for i in range(1, n - 1): if heights[i - 1] < heights[i] > heights[i + 1]: mountains += 1 elif heights[i - 1] > heights[i] < heights[i + 1]: valleys += 1 return mountains, valleys"},{"question":"You are given two strings, s1 and s2. Your task is to determine if s1 is a \\"rotated version\\" of s2. A string s1 is considered a rotated version of s2 if it can be obtained by rotating s2 any number of times. For example, if s2 = \\"abcde\\" then its rotated versions are \\"abcde\\", \\"bcdea\\", \\"cdeab\\", \\"deabc\\", and \\"eabcd\\". The first line contains the string s1 (1 ≤ |s1| ≤ 1000) which consists of only English letters. The second line contains the string s2 (1 ≤ |s2| ≤ 1000) which consists of only English letters. Print \\"YES\\" if s1 is a rotated version of s2 and \\"NO\\" otherwise. Note: The strings may be of different lengths. Here the sample is provided for better understanding: Sample 1: Input abcde cdeab Output YES Sample 2: Input abc def Output NO","solution":"def is_rotated_version(s1, s2): Determines if s1 is a rotated version of s2. Parameters: s1 (str): The first string. s2 (str): The second string. Returns: str: \\"YES\\" if s1 is a rotated version of s2, otherwise \\"NO\\". if len(s1) != len(s2): return \\"NO\\" combined = s2 + s2 if s1 in combined: return \\"YES\\" return \\"NO\\""},{"question":"Juan is a gardener who is passionate about experimenting with new flower arrangements. He has a garden with a row of flower beds, and in each flower bed, a unique type of flower blooms every day. Each type of flower has a different blooming time, and Juan wants to know which flowers are in bloom together for various periods. You are given an array of integers where each integer represents the blooming time of a flower in the respective flower bed. For given ranges in the garden, you need to determine the maximum increase amount in blooming times between consecutive flower beds within that range. The first line of the input contains two integers ( n ) and ( q ) (1 leq q leq n leq 200,000) — the number of flower beds and the number of queries, respectively. The second line contains ( n ) space-separated integers ( a_1, a_2, ldots, a_n ) (1 leq a_i leq 10^9) which denote the blooming times of flowers in the flower beds. Each of the following ( q ) lines contains two integers ( l ) and ( r ) (1 leq l leq r leq n), which define the range of flower beds for the respective query. For each query, output a single integer representing the maximum increase in blooming times between consecutive flower beds in the given range. **Example:** ``` Input: 5 3 1 3 5 4 2 1 3 2 5 1 5 Output: 2 2 2 ``` In this example, for the first query (1, 3), the consecutive increases are (3-1) = 2, (5-3) = 2. The maximum increase is 2. For the second query (2,4), the consecutive increases are (5-3)=2, (4-5)=-1, (2-4)=-2. The maximum increase here is also 2. For the third query (1,5), the maximum increase is once again 2.","solution":"def max_increase_in_range(bloom_times, queries): Given a list of bloom times for flower beds and a list of queries as ranges, returns the maximum increase in blooming times between consecutive flower beds within each range. results = [] for l, r in queries: max_increase = float(\'-inf\') for i in range(l - 1, r - 1): increase = bloom_times[i+1] - bloom_times[i] if increase > max_increase: max_increase = increase results.append(max_increase) return results"},{"question":"You are given a list of integers. Your task is to find the longest subsequence of this list such that the difference between any two consecutive elements is either 1 or -1. Write a function to find the length of this longest subsequence. The function should have the following signature: ```python def longest_alternating_subsequence(arr: List[int]) -> int: ``` # Input - The input `arr` is a list of integers where (1 leq len(arr) leq 1000) and every integer in the list is between (-1000) and (1000). # Output - The function should return an integer denoting the length of the longest subsequence where the difference between any two consecutive elements is either 1 or -1. # Example Example 1: Input: ```python arr = [1, 2, 3, 4, 3, 2, 1, 2, 3] ``` Output: ```python 9 ``` Explanation: ```plaintext The whole sequence [1, 2, 3, 4, 3, 2, 1, 2, 3] has differences of ±1 between consecutive elements. ``` Example 2: Input: ```python arr = [1, 3, 5, 2, 1, 4, 6] ``` Output: ```python 3 ``` Explanation: ```plaintext The subsequence [1, 2, 1] or [2, 1, 2] has differences of ±1. There are other possible subsequences of the same length as well. ``` # Note If there are multiple subsequences with the same maximum length, you need only return the length of one of them. Implement the function below.","solution":"def longest_alternating_subsequence(arr): if not arr: return 0 # Initialize lengths list with 1 n = len(arr) lengths = [1] * n for i in range(1, n): for j in range(i): if abs(arr[i] - arr[j]) == 1: lengths[i] = max(lengths[i], lengths[j] + 1) return max(lengths)"},{"question":"You\'re given a large text consisting of multiple paragraphs. The objective is to identify the longest word in the text that appears at least k times. If there are multiple such words with the same length, choose the lexicographically smallest one. The text will only contain lowercase English letters and spaces, with no punctuation marks. The first line of the input contains an integer k (1 ≤ k ≤ 1,000), the minimum number of appearances a word must have. The next several lines contain the text. Print a single word: the longest word that appears at least k times in the text, or the lexicographically smallest one if there are ties in length. If there\'s no such word, print \\"No word\\". Consider the text \\"the quick brown fox jumps over the lazy dog and the dog was not lazy at all\\". If k is 2, the result is \\"lazy\\" because it\'s the longest word appearing at least twice. Input: 3 this is a test this is only a test this is a test for finding the longest test Output: test","solution":"def longest_word_occurrences(k, text): Identifies the longest word that appears at least k times, or the lexicographically smallest one if there are ties in length. Parameters: k (int): Minimum number of appearances a word must have. text (str): The input text as a string. Returns: str: The longest word appearing at least k times, or the lexicographically smallest in case of ties. from collections import Counter words = text.split() count = Counter(words) candidates = [word for word, freq in count.items() if freq >= k] if not candidates: return \\"No word\\" candidates.sort(key=lambda x: (-len(x), x)) return candidates[0]"},{"question":"Alice recently started playing a game with her friends. The game requires rearranging a sequence of integers in such a way that no two adjacent numbers in the sequence are the same. If it is not possible to rearrange the sequence to meet this condition, Alice needs to determine that as well. Given a sequence of integers, help Alice find such a rearrangement if it exists, or determine that it\'s impossible. # Input The first line contains a single integer T (1 le T le 100) — the number of test cases. For each test case: - The first line contains a single integer n (1 le n le 10^5) — the number of integers in the sequence. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^5) — the integers in the sequence. # Output For each test case, output a single line: - If it\'s possible to rearrange the sequence such that no two adjacent integers are the same, output \\"YES\\" followed by the rearranged sequence. - If it\'s impossible, output \\"NO\\". # Example Input ``` 3 4 1 2 2 3 5 2 3 3 3 3 3 1 1 2 ``` Output ``` YES 1 2 3 2 NO YES 1 2 1 ``` # Constraints - The sum of n across all test cases does not exceed 10^6. # Note In the first test case, one possible valid rearrangement is \\"1 2 3 2\\". In the second test case, it is impossible to rearrange such that no two adjacent sequences are the same. In the third test case, one possible valid rearrangement is \\"1 2 1\\".","solution":"from collections import Counter import heapq def rearrange_sequence(n, nums): count = Counter(nums) max_count = max(count.values()) if max_count > (n + 1) // 2: return \\"NO\\" max_heap = [(-freq, num) for num, freq in count.items()] heapq.heapify(max_heap) result = [] prev_freq, prev_num = 0, None while max_heap: freq, num = heapq.heappop(max_heap) result.append(num) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_num)) prev_freq, prev_num = freq + 1, num return \\"YES {}\\".format(\\" \\".join(map(str, result))) def process_test_cases(T, test_cases): results = [] for t in range(T): n, nums = test_cases[t] result = rearrange_sequence(n, nums) results.append(result) return results"},{"question":"Alex has recently started learning about palindrome numbers. A palindrome number is a number that remains the same when its digits are reversed. He is very curious to know how many palindrome numbers exist within a given range [L, R]. Given two integers L and R (1 ≤ L ≤ R ≤ 10^9), write a program to help Alex determine the number of palindrome numbers in this range. The first and only line of input contains two integers, L and R. Output a single integer representing the count of palindrome numbers between L and R, inclusive. Example: Input: 10 20 Output: 1 Explanation: The only palindrome number between 10 and 20 is 11.","solution":"def is_palindrome(n): Check if the given number n is a palindrome. return str(n) == str(n)[::-1] def count_palindromes(L, R): Count the number of palindrome numbers between L and R, inclusive. count = 0 for i in range(L, R + 1): if is_palindrome(i): count += 1 return count"},{"question":"You are given a binary string consisting of only \'0\'s and \'1\'s. You are allowed to replace any single \'0\' in the string with \'1\', and your task is to determine the length of the longest contiguous subsequence of \'1\'s that can be obtained by performing this operation at most once. The first input line contains a single integer n (1 ≤ n ≤ 200,000) — the length of the binary string. The second line contains a binary string of length n. Print a single integer — the maximum length of the contiguous subsequence of \'1\'s that can be obtained. # Example Input ``` 5 11010 ``` Output ``` 4 ``` Explanation By replacing the \'0\' at the 4th position with \'1\', the binary string becomes \'11110\', which has the longest contiguous subsequence of four \'1\'s. Note In the second example, by replacing the \'0\' at the 2nd position with \'1\', the binary string becomes \'1111\' which has the longest contiguous subsequence of four \'1\'s.","solution":"def longest_contiguous_ones(n, binary_string): Returns the length of the longest contiguous subsequence of \'1\'s that can be obtained by replacing at most one \'0\' with a \'1\'. max_one_side = 0 left = right = 0 zero_count = 0 while right < n: if binary_string[right] == \'0\': zero_count += 1 while zero_count > 1: if binary_string[left] == \'0\': zero_count -= 1 left += 1 max_one_side = max(max_one_side, right - left + 1) right += 1 return max_one_side"},{"question":"You are given a circular array of `n` integers, and your task is to find the maximum sum of a contiguous subarray that you can get by considering the circular nature of the array. In other words, the subarray can wrap around the end of the array to the beginning. For example, for the array `[5, -3, 5]`, the maximum sum of a contiguous subarray should be `10` because we can consider the subarray `[5, 5]` which wraps around the array. You should write a function to solve the problem: ```python def max_circular_subarray_sum(arr): # Implement your function here pass ``` # Input - A single integer `n` (1 ≤ n ≤ 10^5) — the length of the array. - A single line with `n` space-separated integers, where each integer `a_i` (-10^4 ≤ a_i ≤ 10^4) is an element of the array. # Output - A single integer — the maximum sum of a contiguous subarray in the circular array. # Example ```python # Input 3 5 -3 5 # Output 10 ``` # Note In this example, the maximum sum of a contiguous subarray is `10`, which is achieved by considering the subarray `[5, 5]` that wraps around the end of the array to the beginning.","solution":"def max_circular_subarray_sum(arr): Returns the maximum sum of a contiguous subarray in a circular manner. def kadane(nums): Standard Kadane\'s algorithm to find the maximum sum subarray. max_sum = cur_sum = nums[0] for num in nums[1:]: cur_sum = max(num, cur_sum + num) max_sum = max(max_sum, cur_sum) return max_sum max_kadane = kadane(arr) # Max sum subarray in non-circular array max_wrap = sum(arr) # Total sum of the array for i in range(len(arr)): arr[i] = -arr[i] # Invert the array elements # max sum subarray of inverted array max_wrap += kadane(arr) if max_wrap > 0: return max(max_kadane, max_wrap) else: return max_kadane"},{"question":"Given an array of integers, shuffle the elements of the array randomly. The shuffling should be completely random each time the function is called, ensuring that all permutations of the array are equally likely. # Input: - The first line contains an integer n (1 leq n leq 100,000), representing the number of elements in the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), representing the elements of the array. # Output: - Print the shuffled array. The output should be a single line containing n integers, which are the elements of the array in a new random order. # Example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 3 1 4 5 2 ``` Note: Since the shuffling is random, any permutation of the array is a correct output. # Function Signature: ```python import random def shuffle_array(arr: List[int]) -> List[int]: # Implement your solution here random.shuffle(arr) return arr ```","solution":"import random from typing import List def shuffle_array(arr: List[int]) -> List[int]: Shuffles the elements of the array randomly in place. Parameters: arr (List[int]): The array to be shuffled. Returns: List[int]: The shuffled array. random.shuffle(arr) return arr"},{"question":"<|vq_7930|> Question 4: The magician Abracadabra wants to perform a new trick involving two strings. He asked for your help to determine the minimum number of operations required to transform one string into another. The allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character You are given two strings, `source` and `target`, both consisting of lowercase English letters. Your task is to calculate the minimum number of operations needed to transform the `source` string into the `target` string. Input: - The first line contains an integer `t` (1 le t le 1000) — the number of test cases. - For each test case, two lines follow: - The first line contains the string `source` (1 le |source| le 100). - The second line contains the string `target` (1 le |target| le 100). Output: - For each test case, print a single integer — the minimum number of operations needed to transform the `source` string into the `target` string. Example Input: ``` 2 horse ros intention execution ``` Example Output: ``` 3 5 ``` Explanation: In the first example, `horse` can be transformed into `ros` with the following steps: 1. Replace `h` with `r` 2. Remove `r` 3. Remove `e` In the second example, `intention` can be transformed into `execution` with the following steps: 1. Replace `i` with `e` 2. Replace `n` with `x` 3. Replace `t` with `c` 4. Insert `u` after `c` 5. Insert `t` after `u`","solution":"def min_operations(source, target): Calculates the minimum number of operations required to transform the source string into the target string. Allowed operations are insert, delete, and replace a character. m, n = len(source), len(target) # Initialize a (m+1) x (n+1) DP table dp = [[0] * (n + 1) for _ in range(m + 1)] # Base cases for i in range(m + 1): dp[i][0] = i # Fill first column for j in range(n + 1): dp[0][j] = j # Fill first row # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match else: insert_op = dp[i][j - 1] + 1 delete_op = dp[i - 1][j] + 1 replace_op = dp[i - 1][j - 1] + 1 dp[i][j] = min(insert_op, delete_op, replace_op) return dp[m][n]"},{"question":"Alex loves creating puzzles for his friends. This time he has created a special kind of string puzzle. Given a string s of length n, the string consists only of lowercase English letters. Alex wants to transform the string s into a palindrome by performing at most k operations. In one operation, Alex can: - Choose one character from the string and replace it with another lowercase English letter. Alex wants to know if it\'s possible to transform the string into a palindrome with the given operations. If it is possible, print \\"YES\\", otherwise print \\"NO\\". A string is considered a palindrome if it reads the same forward and backward. The first line contains two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ n) — the length of the string and the maximum number of operations allowed. The second line contains a string s of length n, consisting of lowercase English letters. Print \\"YES\\" if it\'s possible to transform the string into a palindrome with at most k operations. Otherwise, print \\"NO\\". Example: Input: 7 2 abcaaba Output: YES Input: 5 1 abcde Output: NO","solution":"def can_transform_to_palindrome(n, k, s): Determines if it\'s possible to transform the string s into a palindrome with at most k operations. Parameters: - n: The length of the string. - k: The maximum number of operations allowed. - s: The input string. Returns: - \\"YES\\" if it is possible to transform the string into a palindrome with at most k operations. - \\"NO\\" otherwise. # Count the number of mismatches in pairs from the start and end of the string mismatches = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: mismatches += 1 # If the number of mismatches is less than or equal to k, it is possible to transform the string if mismatches <= k: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string that consists of only lowercase English letters. You need to find the most frequently occurring character in the string. If there are ties, return the lexicographically smallest character among the most frequently occurring characters. The input format is as follows: First line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 1000) — the string for which you need to find the most frequently occurring character. For each test case, print the most frequently occurring character in the string. If there are multiple characters with the same highest frequency, print the lexicographically smallest one. Example: Input: 3 aabbbcc xyzxyz apple Output: b x p Explanation: In the first test case, \'b\' appears 3 times which is more frequently than \'a\' and \'c\' which appear 2 times each. In the second test case, \'x\', \'y\', and \'z\' all appear 2 times; since \'x\' is the lexicographically smallest, it is chosen. In the third test case, \'p\' appears 2 times while \'a\', \'p\', \'l\', and \'e\' appear 1 time each, so \'p\' is chosen.","solution":"def most_frequent_char(t, strings): Given a number of test cases and a list of strings, this function returns the most frequently occurring character in each string. If there is a tie, the lexicographically smallest character among the most frequently occurring characters is returned. Parameters: t (int): Number of test cases. strings (list of str): List of strings with only lowercase English letters. Returns: list of str: List of most frequently occurring characters for each string. results = [] for s in strings: freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 # Finding character with the maximum frequency max_freq = max(freq.values()) # Collecting all characters with the maximum frequency candidates = [char for char, count in freq.items() if count == max_freq] # Returning the lexicographically smallest character among the candidates results.append(min(candidates)) return results"},{"question":"You are given a rectangular grid with n rows and m columns, consisting of empty cells (denoted by \'.\') and blocked cells (denoted by \'#\'). Your task is to determine the number of distinct paths from the top-left cell (1, 1) to the bottom-right cell (n, m). You can only move right or down at any point in time. Additionally, cells may contain teleporters which allow you to move instantly from one teleporter to another of the same identifier. For example, you can have multiple teleporters \'A\', which means stepping on any cell with \'A\' instantly moves you to another cell with \'A\'. You can only use each teleporter once. Each distinct pair of teleporters is bi-directionally connected. The first line contains two integers n and m (2 ≤ n, m ≤ 100) — the number of rows and columns respectively. Each of the next n lines contains m characters (either \'.\', \'#\', or \'A\'-\'Z\') representing the grid. If no path exists, print -1. Otherwise, print the number of distinct paths from (1, 1) to (n, m). Input example: 4 4 .... .A.# .#.. ..A. Output example: 1 Explanation: There is one distinct path from the top-left to the bottom-right through the teleporters \'A\'. If there were no teleporter \'A\', the output would be -1, indicating no possible path.","solution":"from collections import deque, defaultdict def count_paths(n, m, grid): def get_neighbors(x, y): for dx, dy in [(1, 0), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\': yield nx, ny teleporter_locations = defaultdict(list) for i in range(n): for j in range(m): if grid[i][j] not in [\'.\', \'#\']: teleporter_locations[grid[i][j]].append((i, j)) start = (0, 0) end = (n-1, m-1) if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return -1 queue = deque([(start)]) visited = set([start]) teleporter_used = set() paths = 0 while queue: x, y = queue.popleft() if (x, y) == end: paths += 1 continue for nx, ny in get_neighbors(x, y): if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) if grid[x][y] in teleporter_locations and grid[x][y] not in teleporter_used: teleporter_used.add(grid[x][y]) for (tx, ty) in teleporter_locations[grid[x][y]]: if (tx, ty) != (x, y) and (tx, ty) not in visited: visited.add((tx, ty)) queue.append((tx, ty)) return paths if paths > 0 else -1"},{"question":"Maria is learning about binary trees and has come across the concept of a \\"height-balanced\\" binary tree. A binary tree is height-balanced if the difference in height between the left and right subtrees of every node is at most 1. She wants to write a function to determine if a given binary tree is height-balanced. The tree is represented using a list of integers. Each node in the tree is represented by a unique integer, and the list is given in level-order traversal (breadth-first). If a node does not exist, it is represented by -1 in the list. Implement the function `is_balanced_tree` that takes a list of integers `tree` and returns `True` if the tree is height-balanced, and `False` otherwise. For example, given the input: `tree = [1, 2, 3, 4, 5, -1, -1, 6, -1, -1, -1]`, the function should return `False` because the left subtree of the root has a height of 3 while the right subtree has a height of 1. Function signature: ```python def is_balanced_tree(tree: List[int]) -> bool: pass ``` # Constraints: - The number of elements in the list will be at most 10^5. - The integer values in the list will range from -1 to 10^9. # Input Example: ```python tree = [1, 2, 3, 4, 5, -1, -1, 6, -1, -1, -1] is_balanced_tree(tree) # Output: False ``` # Output Example: ```python False ``` The function should construct the tree from the level-order list and determine if it is height-balanced.","solution":"from typing import List, Tuple class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree_from_list(tree: List[int], index: int) -> TreeNode: if index >= len(tree) or tree[index] == -1: return None root = TreeNode(tree[index]) root.left = build_tree_from_list(tree, 2 * index + 1) root.right = build_tree_from_list(tree, 2 * index + 2) return root def check_balance_and_height(node: TreeNode) -> Tuple[bool, int]: if not node: return True, 0 left_balanced, left_height = check_balance_and_height(node.left) right_balanced, right_height = check_balance_and_height(node.right) current_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 current_height = 1 + max(left_height, right_height) return current_balanced, current_height def is_balanced_tree(tree: List[int]) -> bool: root = build_tree_from_list(tree, 0) balanced, _ = check_balance_and_height(root) return balanced"},{"question":"```markdown You are given two arrays of integers `A` and `B`, each containing `n` elements. You need to determine the minimum number of steps required to make arrays `A` and `B` identical. In one step, you can increment or decrement any element of either array by `1`. The first line of the input contains an integer `n` (1 ≤ n ≤ 1000) — the number of elements in each array. The second line contains `n` integers `A[i]` (1 ≤ A[i] ≤ 1000) representing the elements of the first array. The third line contains `n` integers `B[i]` (1 ≤ B[i] ≤ 1000) representing the elements of the second array. Print a single integer — the minimum number of steps required to make the two arrays identical. **Example:** Input: ``` 3 1 2 3 3 2 1 ``` Output: ``` 4 ``` In the example, you can convert array `A` to `[3, 2, 1]` in 4 steps: increment 1 to 3 (+2 steps) and decrement 3 to 1 (-2 steps). ```","solution":"def minimum_steps_to_make_arrays_identical(n, A, B): Returns the minimum number of steps required to make arrays A and B identical. steps = 0 for a, b in zip(A, B): steps += abs(a - b) return steps"},{"question":"A logistics company is attempting to optimize its daily delivery route to minimize the total delivery time. Each shipment must be delivered to a unique location, and the delivery van can visit locations in any sequence. The time required to travel between two locations is not fixed and depends on traffic conditions, road quality, and distance. You need to develop a program that finds the minimum time needed to complete the delivery route while visiting each location exactly once and returning to the starting location. The input consists of a matrix `dist` of size `n x n`, where `dist[i][j]` represents the travel time from location `i` to location `j` (0-based index). Note that `dist[i][i] = 0` and the matrix is symmetric, i.e., `dist[i][j] = dist[j][i]`. The first line of the input contains an integer `n` (1 ≤ n ≤ 10) representing the number of locations. Each of the next `n` lines contains `n` integers representing the matrix `dist`. Output the minimum time required to complete the delivery route. # Example Input: ``` 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 ``` Output: ``` 80 ``` Explanation: The optimal route is 0 -> 1 -> 3 -> 2 -> 0 with a total travel time of 80.","solution":"def min_delivery_route_time(dist): from functools import lru_cache n = len(dist) @lru_cache(None) def dp(mask, i): if mask == (1 << n) - 1: return dist[i][0] ans = float(\'inf\') for j in range(n): if (mask & (1 << j)) == 0: ans = min(ans, dist[i][j] + dp(mask | (1 << j), j)) return ans return dp(1, 0) # Example usage dist_matrix = [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] print(min_delivery_route_time(dist_matrix)) # Output should be 80"},{"question":"Tom is working on a project involving bi-dimensional arrays. He needs to check the uniqueness of paths from the top-left corner to the bottom-right corner in a grid filled with 0s and 1s. A path consists of adjacent cells, moving either right or down, starting from the upper-left corner (0, 0) and ending at the bottom-right corner (n-1, m-1), and all cells in the path should have the value 0. Tom wants to know if there is exactly one unique path from the top-left to the bottom-right in the grid. Help Tom determine this. You are given a bi-dimensional array `grid` of size `n x m` (1 ≤ n, m ≤ 1000), filled with 0s and 1s, where 0 represents a cell you can walk on, and 1 represents an obstacle. Write a function `isUniquePath(n, m, grid)` that returns `True` if there is exactly one unique path from (0, 0) to (n-1, m-1) consisting solely of 0s, otherwise returns `False`. # Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) representing the dimensions of the grid. - Each of the following `n` lines contains a string of `m` characters (\'0\' or \'1\'), representing the grid. # Output: - Print `True` if there is exactly one unique path from the top-left corner to the bottom-right corner consisting solely of 0s, otherwise print `False`. # Example: Input: ``` 3 4 0000 0010 0000 ``` Output: ``` False ``` Explanation: There are two paths: 1. (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) 2. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (2,3) Input: ``` 3 3 010 010 000 ``` Output: ``` True ``` Explanation: There is only one path: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)","solution":"def isUniquePath(n, m, grid): from collections import deque def bfs(start, end): queue = deque([start]) visited = set() directions = [(0, 1), (1, 0)] path_count = 0 while queue: x, y = queue.popleft() if (x, y) == end: path_count += 1 if path_count > 1: return path_count visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'0\': queue.append((nx, ny)) return path_count # Checking the edge cases where the start or end is blocked if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': return False start = (0, 0) end = (n-1, m-1) # Check the number of unique paths path_count = bfs(start, end) return path_count == 1"},{"question":"A corporation organizes a coding competition amongst its employees. The competition format is such that each participant has to write a set of programs, and each program is tested on a fixed set of resources. The performance of a participant is determined by the total time taken by the resources to execute all of their programs. Since some resources might be shared, congestion can happen, increasing execution times. Participants can prioritize their programs, assigning them to different resource slots such that lower-priority programs do not delay higher-priority ones. You are tasked with writing a program to help optimize the execution of participants\' programs to minimize the total execution time. The resources follow a specific rule: each resource can execute programs in parallel, but the total execution time for concurrent programs on the same resource is the highest execution time among those programs. You are given: 1. The number of participants, `m`. 2. For each participant, a list of execution times for their programs, and the specified resource slots available for each program. You need to determine the minimum total execution time for each participant by optimally assigning their programs to the given resource slots. The input format is as follows: - The first line contains an integer `m` (1 ≤ m ≤ 10^3) — the number of participants. - For each participant, the input will contain: - An integer `n` (1 ≤ n ≤ 10^2) — the number of programs. - A line of `n` integers representing the execution times of each program. - A line of `n` integers representing the resource slot for each program (1 ≤ slot number ≤ 10). Output the minimum total execution time for each participant. Example input: ``` 2 3 5 2 8 1 2 1 4 7 5 3 4 2 2 3 1 ``` Example output: ``` 8 7 ``` In the above example, Participant 1 has 3 programs with execution times [5, 2, 8] and resource slots [1, 2, 1]. By assigning the programs of resource slot 1 to execute in parallel, the total execution time becomes the maximum of [5, 8], which is 8. Thus, the minimum total execution time for Participant 1 is 8. For Participant 2, the programs can be split optimally to minimize the total time. Programs with times [7, 5] and [3] will run on resource slots 2 and 3 respectively, with the program with time 4 running on slot 1. The minimum total execution time will be the maximum of these, which is 7. Your task is to write a program to compute the minimal total execution times efficiently for each participant. **Note:** Ensure your code handles cases where programs share resource slots optimally, and make use of efficient data structures to manage and calculate the required minimum times.","solution":"def min_execution_time(m, participants_data): results = [] for pdata in participants_data: n, times, slots = pdata slot_dict = {} for time, slot in zip(times, slots): if slot not in slot_dict: slot_dict[slot] = [] slot_dict[slot].append(time) min_total_time = 0 for slot_times in slot_dict.values(): min_total_time = max(min_total_time, max(slot_times)) results.append(min_total_time) return results"},{"question":"Ivan is a game developer working on a simulation involving a river system. The river system consists of n rivers, which sometimes merge together. Every river is either a source river, which means it originates from a spring or melting ice, or it is a result of a merge of one or more rivers. Ivan wants to determine the final path of the water flow from each source river to the ocean. The rivers flow into each other, and each river eventually flows into the ocean if it\'s not involved in a merge downstream. The river system is represented by directed edges, where each river flows directly into another. Each river can have at most one outgoing edge, which either points to another river or indicates that it flows directly into the ocean. Rivers that flow directly into the ocean do not have outgoing edges. Given the information about the rivers and their connections, help Ivan determine the final flow path for each source river, until it either reaches the ocean or goes into another river which eventually reaches the ocean. The input consists of a single integer n (2 ≤ n ≤ 1000), which represents the number of rivers. This is followed by n lines, each containing two integers xi and yi (1 ≤ xi ≤ n, xi ≠ yi ), representing a directed edge from river xi to river yi. If the river xi flows directly into the ocean, yi will be 0. Output the result for each source river in the order they are given (i.e., if a river does not have any upward connections). Sort the rivers first by the final river they flow into (or set to 0 if it flows into the ocean). Rivers that flow to the same river should be grouped together, ordered by their indices. Input: The first line is an integer n (number of rivers). The next n lines each consist of two integers xi and yi representing a directed edge. Output: Output n lines where each line represents a source river and its flow line, with rivers flowing to the same final destination grouped together, sorted by indices. Example: Input: 5 1 2 2 3 3 0 4 5 5 0 Output: 1 2 3 0 4 5 0 In the example above: - River 1 flows into 2, which flows into 3, which eventually flows into the ocean (0). - River 4 flows into 5, which flows directly into the ocean (0).","solution":"def river_paths(n, connections): from collections import defaultdict # Create a graph of the connections graph = {i: 0 for i in range(1, n+1)} # default all as flowing into ocean for x, y in connections: graph[x] = y final_paths = defaultdict(list) # to record the final paths of each river flowing into final river or ocean (0) def find_final_destination(river): path = [] while river != 0 and river != graph[river]: path.append(river) river = graph[river] path.append(river) return path # Find all source rivers source_rivers = set(graph.keys()) - set(graph.values()) results = [] for river in sorted(source_rivers): path = find_final_destination(river) final_paths[path[-1]].append(path) for key in sorted(final_paths.keys()): for path in final_paths[key]: results.append(\' \'.join(map(str, path))) return results"},{"question":"You are given a string of length n consisting of lowercase English letters. Your goal is to find the length of the longest substring that appears at least twice in the string. The appearances of the substring can overlap. The first line of input contains an integer n (1 leq n leq 10^5) which represents the length of the string. The second line of input contains the string of length n consisting of lowercase English letters. Output a single integer - the length of the longest substring that appears at least twice. For example: Input: 6 banana Output: 3 Explanation: In the example, the longest substring that appears at least twice is \\"ana\\" which has a length of 3. Note that while \\"an\\" also appears twice, its length is only 2 which is less than 3.","solution":"def find_longest_repeated_substring_length(s): Returns the length of the longest substring which appears at least twice. def has_repeated_substring(len_sub): seen = set() for i in range(len(s) - len_sub + 1): substring = s[i:i+len_sub] if substring in seen: return True seen.add(substring) return False low, high = 0, len(s) ans = 0 while low <= high: mid = (low + high) // 2 if has_repeated_substring(mid): ans = mid low = mid + 1 else: high = mid - 1 return ans"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n. Your task is to find a new array b_1, b_2, ldots, b_n such that the following conditions are satisfied: 1. All elements in b are distinct and each of them is greater than or equal to 1 and less than or equal to 2 cdot 10^5. 2. The sum of the absolute differences between the corresponding elements of a and b should be minimized. Formally, you need to minimize the value of sum_{i=1}^n |a_i - b_i| Input/Output: - The first line contains an integer n (1 leq n leq 2 cdot 10^5) — the length of the sequence a. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 2 cdot 10^5). Output the sequence b_1, b_2, ldots, b_n. Example: Input: ``` 3 3 7 9 ``` Output: ``` 2 6 10 ``` Explanation: In this example, one possible solution is to choose b_1 = 2, b_2 = 6, b_3 = 10, which minimizes the sum of absolute differences. Note that there can be other valid solutions as well. Note: The output sequence must be distinct and within the range [1, 2 * 10^5]. The chosen values should aim to make the sum of absolute differences as small as possible.","solution":"def minimize_absolute_differences(n, a): Given a list of integers `a` of length `n`, returns a new list `b` such that each element in `b` is distinct, within the range [1, 200000], and minimizes the sum of absolute differences with the corresponding elements in `a`. unique_values = set() b = [] a_sorted_indices = sorted(range(n), key=lambda x: a[x]) current_value = 1 for i in a_sorted_indices: while current_value in unique_values: current_value += 1 b.append(current_value) unique_values.add(current_value) result_b = [0] * n for index, value in zip(a_sorted_indices, b): result_b[index] = value return result_b # Example usage: n = 3 a = [3, 7, 9] print(minimize_absolute_differences(n, a)) # Output may vary as multiple valid outputs are possible"},{"question":"In a land far away, there is a game played with an array of integers. The array can be split into subarrays and you perform specified operations to calculate the subarray sums. Let\'s define the problem more formally: You are given an array of integers of length n. You are required to handle multiple queries. Each query asks you to calculate the sum of the integers in a specific subarray defined by its start and end indices. Your task is to efficiently answer each query. **Input:** - The first line contains an integer n (1 <= n <= 10^5) — the length of the array. - The second line contains n integers a1, a2, ..., an (1 <= ai <= 10^9) — the elements of the array. - The third line contains an integer q (1 <= q <= 10^5) — the number of queries. - Each of the next q lines contains two integers l and r (1 <= l <= r <= n) — the inclusive indices that define the subarray [l, r]. **Output:** For each query, print the sum of the elements in the specified subarray. **Example:** ``` Input: 5 1 2 3 4 5 3 1 3 2 4 1 5 Output: 6 9 15 ``` **Explanation:** In the first query, the sum of the subarray [1, 2, 3] is 6. In the second query, the sum of the subarray [2, 3, 4] is 9. In the third query, the sum of the subarray [1, 2, 3, 4, 5] is 15.","solution":"def preprocess_prefix_sums(arr): Preprocess the array into a prefix sum array. n = len(arr) prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] return prefix_sums def sum_subarray(prefix_sums, l, r): Calculate the sum of the subarray using the prefix sums array. The indices l and r are 1-based and inclusive. return prefix_sums[r] - prefix_sums[l - 1] def process_queries(n, arr, queries): prefix_sums = preprocess_prefix_sums(arr) results = [] for l, r in queries: results.append(sum_subarray(prefix_sums, l, r)) return results"},{"question":"A company wants to conduct a small survey by sending out personalized invitation emails to participants. Each email contains a special code that is unique to the participant. The email format should follow specific rules to prevent spam blockers from marking it as spam. Given a list of participants\' information, generate a personalized email for each participant with the following format: ``` To: participant\'s email Subject: Invitation to Participate in Our Survey Message: Dear [participant\'s name], We are excited to invite you to take part in our survey. Your feedback is very important to us. Please use the following unique code to access the survey: [survey code] Thank you for your time and participation. Best regards, The Survey Team ``` The unique code (survey code) should be generated as follows: - The code should contain exactly 8 alphanumeric characters. - It should start with a letter. - It should be unique for each participant. You need to write a program that takes the list of participants\' information and generates the email for each one. The program should ensure that the format is strictly followed and the survey code is unique. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of participants. - Each of the next `n` lines contains the participant\'s name and their email address, separated by a comma. # Output - Print the generated email for each participant in the format shown above. Ensure that the email content meets all the specified requirements. # Example Input ``` 3 Alice Johnson,alice@example.com Bob Smith,bob@example.com Charlie Brown,charlie@example.com ``` Output ``` To: alice@example.com Subject: Invitation to Participate in Our Survey Message: Dear Alice Johnson, We are excited to invite you to take part in our survey. Your feedback is very important to us. Please use the following unique code to access the survey: [Alice\'s unique code] Thank you for your time and participation. Best regards, The Survey Team To: bob@example.com Subject: Invitation to Participate in Our Survey Message: Dear Bob Smith, We are excited to invite you to take part in our survey. Your feedback is very important to us. Please use the following unique code to access the survey: [Bob\'s unique code] Thank you for your time and participation. Best regards, The Survey Team To: charlie@example.com Subject: Invitation to Participate in Our Survey Message: Dear Charlie Brown, We are excited to invite you to take part in our survey. Your feedback is very important to us. Please use the following unique code to access the survey: [Charlie\'s unique code] Thank you for your time and participation. Best regards, The Survey Team ```","solution":"import random import string def generate_survey_code(existing_codes): while True: code = random.choice(string.ascii_letters) + \'\'.join(random.choices(string.ascii_letters + string.digits, k=7)) if code not in existing_codes: existing_codes.add(code) return code def generate_emails(participants): existing_codes = set() emails = [] for participant in participants: name, email = participant.split(\',\') name, email = name.strip(), email.strip() survey_code = generate_survey_code(existing_codes) email_content = fTo: {email} Subject: Invitation to Participate in Our Survey Message: Dear {name}, We are excited to invite you to take part in our survey. Your feedback is very important to us. Please use the following unique code to access the survey: {survey_code} Thank you for your time and participation. Best regards, The Survey Team emails.append(email_content) return emails"},{"question":"It is game night, and Alice challenges Bob to a game using wooden sticks. The game includes a set of sticks, each with a specific length. Alice gives Bob a target length, and the objective for Bob is to determine if it\'s possible to select exactly four sticks from the set that can form a quadrilateral with a perimeter equal to the given target length. Bob can use each stick in the set at most once. A quadrilateral can only be formed if the sum of the lengths of any three sides is greater than the length of the fourth side (triangle inequality). Write a program to help Bob determine if there exists a combination of four sticks from the given set that meets the requirements. The first line of input contains a single integer t (1 leq t leq 1000) — the number of test cases. Each test case begins with a line containing two integers n (4 leq n leq 100) and target (1 leq target leq 10^4), representing the number of sticks and the target perimeter, respectively. The second line of each test case contains n integers l_1, l_2, ..., l_n (1 leq l_i leq 10^3 for all i) — the lengths of the sticks. For each test case, output \\"YES\\" if Bob can choose exactly four sticks that form a quadrilateral with a perimeter equal to the target length, and \\"NO\\" otherwise. You can print each letter in any case (upper or lower). # Example - Input: ``` 3 5 10 1 2 3 4 5 4 10 1 1 1 1 6 15 3 4 5 6 7 8 ``` - Output: ``` YES YES NO ``` # Explanation - In the first test case, the combination [1, 2, 3, 4] forms a quadrilateral with a perimeter of 10. - In the second test case, the combination [1, 1, 1, 1] forms a quadrilateral with a perimeter of 4. - In the third test case, no combination of four sticks can form a quadrilateral with a perimeter of 15 following the triangle inequality rules.","solution":"from itertools import combinations def can_form_quadrilateral(sticks, target): Determine if there exist any four sticks that can form a quadrilateral with a given perimeter. for comb in combinations(sticks, 4): if sum(comb) == target: a, b, c, d = sorted(comb) if a + b + c > d: return \\"YES\\" return \\"NO\\" def game_night(t, test_cases): results = [] for i in range(t): n, target, sticks = test_cases[i] result = can_form_quadrilateral(sticks, target) results.append(result) return results"},{"question":"You are given an array `a` consisting of `n` integers. You want to partition the array into multiple non-empty contiguous subarrays such that each subarray has exactly one \\"peak.\\" A peak is an element that is strictly greater than its neighbors. For instance, in the subarray `[1, 3, 1]`, `3` is a peak, because it is greater than both `1` to its left and `1` to its right. Determine the minimum number of subarrays you need to partition the array into such that each subarray contains exactly one peak. If it is impossible to partition the array in such a way, print `-1`. # Input: - The first line contains a single integer `n` ( 1 leq n leq 10^5 ), the number of elements in the array. - The second line contains `n` space-separated integers `a_1, a_2, dots, a_n` ( 1 le a_i le 10^9 ), the elements of the array. # Output: - Print a single integer, the minimum number of subarrays needed such that each has exactly one peak. If it\'s impossible to make such partition, print `-1`. # Example: Input: ``` 8 1 3 2 4 1 6 2 5 ``` Output: ``` 3 ``` Explanation: The array can be partitioned into three subarrays: `[1, 3, 2]`, `[4, 1, 6]`, and `[2, 5]`. Each of these subarrays contains exactly one peak.","solution":"def min_subarrays_with_peaks(n, a): if n < 3: return -1 peaks = [] for i in range(1, n - 1): if a[i] > a[i-1] and a[i] > a[i+1]: peaks.append(i) if not peaks: return -1 count = 1 previous_peak = peaks[0] for peak in peaks[1:]: if peak - previous_peak > 1: count += 1 previous_peak = peak return count"},{"question":"Arkady is preparing a company party that will have a lottery game. Each employee will be assigned a unique ticket number from 1 to n. Arkady wants to determine how many additional tickets he needs to ensure every subset size of employees from 1 to k can receive distinct consecutive numbers from his collection of tickets without reusing any existing ticket numbers. Given two integers n and k, calculate the total number of additional tickets Arkady needs to prepare. The first line contains two integers n and k (1 le n, k le 50) — the number of employees and the subset size, respectively. Output the number of additional tickets required. In the first example, if n = 5 and k = 3: - Arkady will need 3 additional tickets numbered 6, 7, 8 to ensure any 3 consecutive subsets (like {1, 2, 3}, {2, 3, 4} and {3, 4, 5}) can be assigned unique ticket numbers up to 8. Output should be 3.","solution":"def additional_tickets(n, k): Returns the number of additional tickets required to ensure every subset size of employees from 1 to k can receive distinct consecutive numbers. :param n: Total number of employees :param k: Maximum subset size :return: Number of additional tickets required return k"},{"question":"Anna has a collection of n stones, each with a distinct weight. She wants to organize her stones into groups such that each group has the same total weight. She realizes that it might not be possible to create the groups with the same exact total weight, so she\'s interested in finding out the largest possible number of groups that can have the same total weight if the stones are divided optimally. The first line contains an integer n (1 ≤ n ≤ 1000). The second line contains n space-separated integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the stones. Output the largest number of groups that can have the same total weight. # Example Input: ``` 5 1 2 3 4 5 ``` Output: ``` 3 ``` Explanation: - We can form 3 groups with the same total weight: {1, 4}, {2, 3}, {5}. - There are no other ways to form more than 3 groups with the same total weight.","solution":"from itertools import combinations def largest_number_of_groups_with_equal_weight(n, weights): weights_sum = sum(weights) max_groups = 1 # Try every possible number of groups from n down to 1 for i in range(n, 0, -1): # If weights_sum is divisible by the number of groups if weights_sum % i == 0: target_group_weight = weights_sum // i group_sums = [0] * i weights_sorted = sorted(weights, reverse=True) def can_form_groups(index): if index == n: return all(group_sum == target_group_weight for group_sum in group_sums) for j in range(i): if group_sums[j] + weights_sorted[index] <= target_group_weight: group_sums[j] += weights_sorted[index] if can_form_groups(index + 1): return True group_sums[j] -= weights_sorted[index] if group_sums[j] == 0: break return False if can_form_groups(0): max_groups = i break return max_groups"},{"question":"A group of students are organizing a series of study sessions for their upcoming exams. There are n students and each student has a preferred time slot for studying. Your task is to find out the maximum number of study sessions that can be formed such that no two students in the same session have overlapping time slots. Each student i has a preferred time slot from a_i to b_i (inclusive). Your goal is to form the maximum number of non-overlapping study sessions such that each session can be attended by any number of students who do not have overlapping time slots. The first line of input contains an integer n (1 leq n leq 5000) — the number of students. Each of the next n lines contains two integers a_i and b_i (1 leq a_i < b_i leq 10^6) — the start and end time of the preferred time slot of the i-th student. Output a single integer — the maximum number of non-overlapping study sessions that can be formed. # Example ``` Input: 5 1 3 2 4 3 5 7 8 5 6 Output: 3 Explanation: The maximum number of non-overlapping study sessions are: (1,3), (5,6), and (7,8). Another possible set of non-overlapping sessions is: (1,3), (3,5), and (7,8). ```","solution":"def max_non_overlapping_sessions(n, intervals): Finds the maximum number of non-overlapping intervals. :param n: Number of students (intervals) :param intervals: List of tuples where each tuple contains two integers representing the start and end time of intervals :return: Maximum number of non-overlapping intervals # Sort intervals by their end time intervals.sort(key=lambda x: x[1]) # Initializing the end time of last added interval to negative infinity last_end_time = -1 count = 0 for start, end in intervals: if start > last_end_time: count += 1 last_end_time = end return count"},{"question":"Anna is trying to arrange her bookshelf, which contains a series of books with varying heights. She wants to organize the books in such a way that no book is too much taller or shorter than the adjacent books. Specifically, the height difference between any two adjacent books should not exceed a given integer k. You are given an array of integers representing the heights of the books. Your task is to determine if it\'s possible to rearrange the books to satisfy Anna\'s condition. If it is possible, print \\"YES\\", otherwise print \\"NO\\". The first line of the input contains two integers n and k (1 ≤ n ≤ 3000, 1 ≤ k ≤ 10^9) — the number of books and the maximum allowed height difference, respectively. The next line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the books. Print \\"YES\\" if there is a way to rearrange the books such that the height difference between any two adjacent books does not exceed k. Otherwise, print \\"NO\\". In the first sample, it is possible to rearrange the books as follows: 2 3 4 5 6 In the second sample, it is not possible to meet Anna\'s condition. Sample Input 1: 5 3 4 2 3 5 6 Sample Output 1: YES Sample Input 2: 5 1 6 4 3 2 1 Sample Output 2: NO","solution":"def can_rearrange_books(n, k, heights): Determines if it is possible to rearrange the books such that the height difference between any two adjacent books does not exceed k. :param n: int, number of books :param k: int, maximum allowed height difference :param heights: list of int, heights of the books :return: str, \\"YES\\" if the arrangement is possible, otherwise \\"NO\\" heights.sort() for i in range(1, n): if heights[i] - heights[i - 1] > k: return \\"NO\\" return \\"YES\\""},{"question":"You are tasked with managing a large forest, where there are many trees aligned in a row. Each tree has a certain height. You would like to cut down some of these trees to ensure that no two adjacent trees have the same height. Given the heights of the trees, determine the minimum number of trees that need to be cut down to satisfy the condition. # Input The first line of the input contains an integer n (1 le n le 100,000) — the number of trees. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 1,000,000) — the initial heights of the trees. # Output Print a single integer — the minimum number of trees that need to be cut down so that no two adjacent trees have the same height. # Example Input ``` 6 4 7 4 4 6 4 ``` Output ``` 1 ``` Explanation By cutting down the tree with height 6, we can ensure no two adjacent trees have the same height. The sequence after cutting down the tree is [4, 7, 4, 4, 4].","solution":"def min_trees_to_cut(n, heights): Returns the minimum number of trees that need to be cut down so that no two adjacent trees have the same height. Parameters: n (int): The number of trees. heights (List[int]): A list of integers representing the heights of the trees. Returns: int: The minimum number of trees to cut down. last = None cut_count = 0 for i in range(n): if i > 0 and heights[i] == last: cut_count += 1 else: last = heights[i] return cut_count"},{"question":"Fourth Question: You are given an undirected graph with n vertices and m edges. Each vertex has a value associated with it. Your task is to determine the sum of the values of the vertices in the largest connected component of the graph. The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) - the number of test cases. For each test case, the first line contains two integers n and m (1 le n le 1000, 0 le m le 1000) - the number of vertices and the number of edges in the graph, respectively. The second line contains n integers v_1, v_2, dots, v_n (1 le v_i le 1000) - the values of the vertices. The next m lines contain two integers each u and v (1 le u, v le n) representing an edge between vertex u and vertex v. For each test case, print a single integer: the sum of the values of the vertices in the largest connected component. If a testcase has no edges (i.e., m = 0), every vertex is considered as its own connected component. In such a case, determine the maximum value among all the vertices. Example: ``` Input: 2 4 2 10 20 30 40 1 2 2 3 3 1 100 200 300 Output: 60 600 ``` Explanation for Example: In the first test case, vertices 1, 2, and 3 form the largest connected component with values 10, 20, and 30, respectively. The sum of these values is 60. In the second test case, the entire graph is connected, so the sum of all vertex values (100 + 200 + 300) is 600.","solution":"def sum_largest_connected_component(t, test_cases): def dfs(node, graph, visited): stack = [node] total_sum = 0 while stack: current = stack.pop() if not visited[current]: visited[current] = True total_sum += vertex_values[current] for neighbor in graph[current]: if not visited[neighbor]: stack.append(neighbor) return total_sum results = [] for i in range(t): n, m, vertex_values, edges = test_cases[i] vertex_values = [0] + vertex_values # 1-based index graph = [[] for _ in range(n+1)] for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n+1) max_sum = 0 for node in range(1, n+1): if not visited[node]: component_sum = dfs(node, graph, visited) max_sum = max(max_sum, component_sum) results.append(max_sum) return results"},{"question":"A company organizes a team-building event where employees participate in a series of activities. Each activity can be attended by a specific number of employees, and each employee has a preference list of activities they want to attend. The goal is to assign employees to activities such that the total number of different activities attended by all employees is maximized. Each employee can attend at most one activity, and each activity has a limited capacity. If an employee cannot be assigned to any of their preferred activities due to capacity constraints, they will not participate in any activity. Given the number of employees, the number of activities, the capacities of the activities, and each employee\'s preference list, determine the maximum number of different activities that can be attended. **Input:** - The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of employees and the number of activities, respectively. - The second line contains m integers c1, c2, ..., cm (1 ≤ ci ≤ n), where ci denotes the capacity of the i-th activity. - Each of the next n lines contains the preference list of the i-th employee. Each list starts with an integer k (0 ≤ k ≤ m), which is the length of the preference list, followed by k distinct integers (1-based indices of the activities). **Output:** - Print a single integer, the maximum number of different activities that can be attended by the employees. **Example:** ``` Input: 4 3 1 2 2 3 1 2 3 0 2 1 3 1 2 Output: 3 ``` In this example: - Employee 1 prefers activities 1, 2, and 3 and can attend activity 1. - Employee 2 has no preferences and will not participate. - Employee 3 prefers activities 1 and 3 and can attend activity 3. - Employee 4 prefers activity 2 and can attend activity 2. The optimal assignment is: - Employee 1 attends activity 1. - Employee 3 attends activity 3. - Employee 4 attends activity 2. Thus, all three activities are attended.","solution":"def max_activities_attended_by_employees(n, m, capacities, preferences): activity_count = [0] * (m + 1) assignments = [-1] * n for i in range(n): for preference in preferences[i]: if activity_count[preference] < capacities[preference - 1]: activity_count[preference] += 1 assignments[i] = preference break unique_activities = set(assignments) - {-1} return len(unique_activities)"},{"question":"You are given a list of n integers, and you are asked to divide this list into two non-empty parts in such a way that the sum of the integers in one part is as close as possible to the sum of the integers in the other part. However, there\'s one restriction: Once split, the left part should have elements in non-decreasing order and the right part should have elements in non-increasing order. Your task is to find this split and provide the sum of the integers in both parts. The first line of the input contains a single integer n (2 ≤ n ≤ 1000) — the number of elements in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the values of the list elements. Output two integers: the sum of the integers in the left part and the sum of the integers in the right part after the split, separated by a space. If there are multiple answers, you can print any. Example: Input: 6 3 1 1 2 2 1 Output: 5 5 Explanation: The left part [1, 1, 1, 2] and the right part [3, 2] satisfy the conditions with sums 5 and 5 respectively.","solution":"def split_list(n, elements): elements.sort() left_sum, right_sum = 0, sum(elements) min_diff = float(\'inf\') for i in range(n - 1): left_sum += elements[i] right_sum -= elements[i] if abs(left_sum - right_sum) < min_diff: min_diff = abs(left_sum - right_sum) best_split = (left_sum, right_sum) return best_split"},{"question":"A company is looking to optimize the distribution of their promotional emails. The marketing department has prepared n emails, each targeted for a specific group of customers. However, these emails need to be sent out in such a way that the total time for them to be read is minimized. The time it takes for a customer to read an email is represented by a sequence of n integers. Since different customers read at different speeds, it is important to minimize the sum of the waiting times for reading all emails. The waiting time for an email is the total amount of time a customer has to wait until they start reading that email. Given the time it takes to read each email, help the company determine the minimum sum of waiting times. The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of emails. The second line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 1000) — the time it takes to read each email. Print a single integer — the minimum sum of waiting times for reading all emails. # Example Input: 4 2 3 1 4 Output: 10 Explanation: To minimize the waiting time, the emails should be read in increasing order of their reading times. The optimal order is 1, 2, 3, 4. The sum of waiting times is calculated as follows: - 1 waits 0 seconds, - 2 waits 1 second (after 1 is read), - 3 waits 3 seconds (after 1 and 2 are read), - 4 waits 6 seconds (after 1, 2, and 3 are read). Total = 0 + 1 + 3 + 6 = 10.","solution":"def minimize_waiting_time(n, times): Returns the minimum sum of waiting times for reading all emails. :param n: The number of emails. :param times: A list of integers where each integer represents the time it takes to read an email. :return: The minimum sum of waiting times. # Sort the reading times in ascending order times.sort() total_waiting_time = 0 current_waiting_time = 0 for time in times: # Add the current waiting time to the total waiting time total_waiting_time += current_waiting_time # Update the current waiting time by adding the current reading time current_waiting_time += time return total_waiting_time"},{"question":"You are given a circular array of n integers. This array can be considered as a circle where the last element is connected to the first one. You want to find the maximum sum of a non-empty subarray of this circular array. For example, if the array is [1, -2, 3, -2], the maximum sum is 3 which comes from the subarray [3]. However, for the array [5, -3, 5], the maximum sum is 10 which comes from the subarray [5, 5] because the array is circular. Write a function to compute the maximum sum of a non-empty subarray of a circular array. # Input - The first line contains an integer `n` (1 ≤ n ≤ 3000) — the number of elements in the circular array. - The second line contains `n` integers `a1, a2, ..., an` (−10^4 ≤ ai ≤ 10^4), the elements of the array. # Output - Print a single integer — the maximum sum of a non-empty subarray of the circular array. # Example Input ``` 4 1 -2 3 -2 ``` Output ``` 3 ``` Input ``` 3 5 -3 5 ``` Output ``` 10 ```","solution":"def max_subarray_sum_circular(arr): def kadane(arr): max_end_here = max_so_far = arr[0] for num in arr[1:]: max_end_here = max(num, max_end_here + num) max_so_far = max(max_so_far, max_end_here) return max_so_far total_sum = sum(arr) max_kadane = kadane(arr) for i in range(len(arr)): arr[i] = -arr[i] max_inverse_kadane = kadane(arr) max_wrap = total_sum + max_inverse_kadane if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap) # Helper function to process input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) print(max_subarray_sum_circular(arr)) # If needed, you can call main() to test the implementation here # Just uncomment the line below # main()"},{"question":"You are given a grid of size n × m, where each cell contains either a 0 or a 1. You start at the top-left cell (1, 1) and your goal is to reach the bottom-right cell (n, m). You can move only to the right or down and you want to find the number of distinct paths, each path needs to contain at least one cell with a value 1. Write a program to calculate the number of such paths. The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the dimensions of the grid. The next n lines each contain m integers (either 0 or 1), representing the grid. Print one integer — the number of distinct paths from the top-left cell to the bottom-right cell that pass through at least one cell with a value 1. Example input: 3 3 0 0 0 0 1 0 0 0 0 Example output: 2 The example grid has two paths from (1,1) to (3,3) that pass through at least one cell with a value 1.","solution":"def count_paths_with_one(n, m, grid): def dfs(x, y, contains_one): if x == n - 1 and y == m - 1: return 1 if contains_one or grid[x][y] == 1 else 0 if (x, y) in memo: if contains_one: return memo[(x, y)][1] return memo[(x, y)][0] paths = 0 if x + 1 < n: paths += dfs(x + 1, y, contains_one or grid[x + 1][y] == 1) if y + 1 < m: paths += dfs(x, y + 1, contains_one or grid[x][y + 1] == 1) memo[(x, y)] = (memo.get((x, y), (0, 0))[0], memo.get((x, y), (0, 0))[1]) if contains_one: memo[(x, y)] = (memo[(x, y)][0], paths) else: memo[(x, y)] = (paths, memo[(x, y)][1]) return paths memo = {} return dfs(0, 0, grid[0][0] == 1)"},{"question":"Bill is an avid collector of books and owns a large library. However, his library isn\'t organized. Bill wants to arrange his books in a more systematic order. Bill has n books arranged in an arbitrary sequence, where each book can be identified by its unique height. He wants to sort these books in non-decreasing order of their heights using a custom sorting algorithm. Bill\'s algorithm works as follows: 1. He picks one book and places it in its correct position such that all the books are in non-decreasing order up to that point. 2. He repeats the process until the whole sequence of books is sorted. For every move, Bill picks a book from its current position and moves it to the correct position. The cost of moving a book is defined as the number of positions it has to shift (either left or right). Given the initial sequence of book heights, you need to determine the total cost Bill incurs to sort his books using his custom algorithm. The first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of books. The next line contains n space-separated integers representing the heights of the books (1 ≤ height ≤ 10^6). Print a single integer, the total cost Bill incurs to arrange his books in non-decreasing order. In the first example, Bill has [1, 3, 2, 4]. He will: - Move the 2 to its correct position between 1 and 3, which costs 1 shift. The array becomes [1, 2, 3, 4]. In the second example, Bill has [4, 3, 2, 1]. He will: - Move the 3 to its correct position after 1, which costs 2 shifts. The array becomes [4, 2, 1, 3]. - Move the 2 to its correct position after 1 and before 3, which costs 2 shifts. The array becomes [4, 1, 2, 3]. - Move the 1 to its correct position at the start, which costs 3 shifts. The array becomes [1, 4, 2, 3]. - Move the 4 to its correct position after 3, which costs 1 shift. The array becomes [1, 2, 3, 4]. The total cost = 2 + 2 + 3 + 1 = 8. ```plaintext Input: 4 1 3 2 4 Output: 1 Input: 4 4 3 2 1 Output: 8 ```","solution":"def calculate_sorting_cost(n, heights): Calculate the total cost Bill incurs to sort his books in non-decreasing order. Parameters: - n: int, the number of books. - heights: list of int, heights of the books. Returns: - int, the total cost of sorting the books. total_cost = 0 for i in range(1, n): key = heights[i] j = i - 1 while j >= 0 and heights[j] > key: heights[j + 1] = heights[j] j -= 1 total_cost += 1 heights[j + 1] = key return total_cost"},{"question":"In a distant galaxy, scientists have discovered a new element called Galactium, which has unique decay properties. When exposed to a specific type of radiation, the atoms of Galactium undergo the following decay process: 1. Each atom has an initial energy level, represented by an integer ei (1 ≤ ei ≤ 1000). 2. When an atom\'s energy level reaches zero or less, it decays completely and is no longer considered in subsequent calculations. 3. The decay process is characterized by a periodic reduction of energy levels of all existing atoms by a fixed, positive integer d. Given a list of initial energy levels for n atoms and the decay factor d, your task is to determine the number of complete decay cycles required for all atoms to decay completely. The process is simulated in discrete cycles. In each cycle, the energy level of each remaining atom is reduced by d. The decay process continues until all atoms have decayed completely. Your input consists of: - The first line with a single integer n (1 ≤ n ≤ 50) representing the number of atoms. - The second line with n integers e1, e2, ..., en representing the initial energy levels of the atoms. - The third line with a single integer d (1 ≤ d ≤ 100). Your output should be a single integer representing the number of complete decay cycles required for all atoms to decay completely. # Examples: **Input:** ``` 3 10 15 8 3 ``` **Output:** ``` 5 ``` **Explanation:** - Cycle 1: Energy levels -> 7, 12, 5 - Cycle 2: Energy levels -> 4, 9, 2 - Cycle 3: Energy levels -> 1, 6, -1 (atom with initial energy 8 decays completely) - Cycle 4: Energy levels -> -2, 3, -1 (atom with initial energy 10 decays) - Cycle 5: Energy levels -> -5, 0, -1 (atom with initial energy 15 decays) All atoms have decayed completely after 5 cycles. **Input:** ``` 4 100 200 300 400 50 ``` **Output:** ``` 8 ``` **Explanation:** - Cycle 1: 50, 150, 250, 350 - Cycle 2: 0, 100, 200, 300 - Cycle 3: -50, 50, 150, 250 - Cycle 4: -100, 0, 100, 200 - Cycle 5: -150, -50, 50, 150 - Cycle 6: -200, -100, 0, 100 - Cycle 7: -250, -150, -50, 50 - Cycle 8: -300, -200, -100, 0 All atoms have decayed completely after 8 cycles.","solution":"def decay_cycles(n, energy_levels, d): Returns the number of complete decay cycles required for all atoms to decay completely. :param n: number of atoms :param energy_levels: list of initial energy levels of the atoms :param d: decay factor :return: number of complete decay cycles required for all atoms to decay completely max_energy = max(energy_levels) cycles = (max_energy + d - 1) // d # Ceiling of max_energy / d return cycles"},{"question":"John is throwing a party and needs to rent tables to seat all of his friends. Each table can seat exactly K people. John knows that each of his friends has a specific preference for which table they would like to sit at. As such, he wants to minimize the number of tables he needs to rent while ensuring the maximum overall satisfaction. A friend\'s satisfaction is calculated by their preferred seating at their chosen table. The first line of input contains two integers N and K (1 ≤ N ≤ 100000, 1 ≤ K ≤ 100), where N is the number of friends and K is the number of people each table can seat. Each of the next N lines contains two integers pi and si (1 ≤ pi ≤ K, 1 ≤ si ≤ 100), where pi is the table preference for the i-th friend (1 to K), and si is the satisfaction score if the i-th friend sits at their preferred table. Output the maximum total satisfaction that can be achieved while using the minimum number of tables. # Example Input ``` 5 2 1 10 1 8 2 9 2 7 3 6 ``` Output ``` 40 ``` In this example, you can rent 3 tables, and each friend can sit at their preferred table (two friends at table 1 and 2, respectively, and one at table 3), resulting in the total satisfaction of 10 + 8 + 9 + 7 + 6 = 40.","solution":"def max_satisfaction(N, K, preferences): Calculate the maximum total satisfaction while using the minimum number of tables. :param N: Number of friends :param K: Number of people each table can seat :param preferences: List of tuples representing each friend\'s table preference and satisfaction score :return: Maximum total satisfaction from collections import defaultdict import heapq # Group friends by their table preferences tables = defaultdict(list) for p, s in preferences: tables[p].append(s) # Create a max heap for all satisfaction scores satisfaction_scores = [] for table, scores in tables.items(): satisfaction_scores.extend(scores) # Use a max heap to get the highest satisfaction scores possible heapq._heapify_max(satisfaction_scores) max_total_satisfaction = sum(heapq._heappop_max(satisfaction_scores) for _ in range(N)) return max_total_satisfaction"},{"question":"Alice is a skilled gardener who has a row of flower beds in her garden, each containing a beautiful flower. Each flower bed contains a single flower of a unique height. However, Alice recently observed that some flower beds have weeds growing in them. She decided to weed the row of flower beds in two different ways: 1. Remove all flowers whose height is strictly greater than or equal to some given value h. 2. Remove all flowers whose height is strictly less than or equal to some given value h. Alice wants to determine, for each query, the minimum number of flowers that need to be removed to satisfy her weeding strategies. The first line contains two integers n and q (1 le n le 10^5, 1 le q le 10^5) — the number of flower beds and the number of queries. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 le h_i le 10^9) — the heights of the flowers in each flower bed. Next q lines contain a single integer h_j (1 le h_j le 10^9) — the value that is used in each query to determine the weeding strategy. For each query, print two integers in a single line: the minimum number of flowers that need to be removed by the first strategy and the minimum number of flowers that need to be removed by the second strategy. # Example Input ``` 5 3 5 10 15 20 25 10 15 25 ``` Output ``` 4 1 3 2 1 4 ``` # Explanation For the first query (10): - The first strategy removes flowers with heights 10, 15, 20, and 25, resulting in 4 flowers being removed. - The second strategy removes flowers with heights 5 and 10, resulting in 1 flower being removed. For the second query (15): - The first strategy removes flowers with heights 15, 20, and 25, resulting in 3 flowers being removed. - The second strategy removes flowers with heights 5, 10, and 15, resulting in 2 flowers being removed. For the third query (25): - The first strategy removes flowers with heights 25, resulting in 1 flower being removed. - The second strategy removes flowers with heights 5, 10, 15, 20, and 25, resulting in 4 flowers being removed.","solution":"def count_removals(flower_heights, queries): flower_heights.sort() n = len(flower_heights) results = [] for h in queries: idx_ge = next((i for i, height in enumerate(flower_heights) if height >= h), n) idx_le = next((i for i, height in enumerate(flower_heights) if height > h), n) remove_ge = n - idx_ge # number of elements >= h remove_le = idx_le # number of elements <= h results.append((remove_ge, remove_le)) return results"},{"question":"The city of Gridville is laid out in a grid with rows and columns. The citizens of Gridville want to plant trees at certain cells, but they have a special condition: No two trees can share the same row, column, or diagonal. Help the citizens determine if it is possible to place exactly `k` trees on the grid, satisfying their condition, and if so, provide one such arrangement. The first line contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 50, 1 ≤ k ≤ min(n, m)), representing the number of rows, the number of columns, and the number of trees, respectively. The following `k` lines contain the row and column indices of the cells (1-based indexing) where the trees should be planted. Print \\"Yes\\" if it\'s possible to place the trees according to the conditions, followed by `k` lines of integer pairs indicating the row and column positions of the trees. If it is impossible, print \\"No\\". **Input:** ``` 3 3 3 ``` **Output:** ``` Yes 1 1 2 3 3 2 ``` In this example, it\'s possible to place the trees at (1, 1), (2, 3), and (3, 2) without any two trees being in the same row, column, or diagonal.","solution":"def place_trees(n, m, k): Determine if it\'s possible to plant exactly `k` trees satisfying Gridville\'s conditions and provide one such arrangement. if k > min(n, m): return \\"No\\" positions = [] for i in range(k): positions.append((i + 1, (i + 1) + ((i // m) * m))) if len(positions) == k: result = \\"Yesn\\" result += \'n\'.join(f\\"{x} {y}\\" for x, y in positions) return result else: return \\"No\\""},{"question":"Alicia is organizing a charity auction and she needs to determine the minimum cost of achieving her target fund. She has a list of items, each with a given price and a value. Alicia can sell any subset of these items, and she wants to choose the subset that achieves at least her target fund with the minimum possible total price. The first line of input contains two integers n (1 ≤ n ≤ 100) and T (1 ≤ T ≤ 1000) — the number of items available for auction and the target fund she wants to achieve. The next n lines each contain two integers pi (1 ≤ pi ≤ 1000) and vi (1 ≤ vi ≤ 1000) — the price and value of the i-th item. Output a single integer — the minimum total price required to achieve at least the target fund. If it is not possible to achieve the target fund with any subset of items, print -1. # Example Input ``` 4 10 4 6 2 4 7 8 5 3 ``` Output ``` 6 ``` Explanation In this example, selling the first and second items (price 4 + 2 = 6) achieves a value of 6 + 4 = 10, which meets the target fund. This is the minimum total price to achieve the target.","solution":"def minimum_cost_achieving_target(n, T, items): # Create a dp array where dp[i] represents the minimum cost to achieve at least value i dp = [float(\'inf\')] * (T + 1) dp[0] = 0 for price, value in items: for i in range(T, value - 1, -1): dp[i] = min(dp[i], dp[i - value] + price) result = min(dp[T:]) return result if result != float(\'inf\') else -1 def charity_auction(n, T, items): min_cost = minimum_cost_achieving_target(n, T, items) return min_cost"}]'),A={name:"App",components:{PoemCard:j},data(){return{searchQuery:"",visibleCount:4,poemsData:Y,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},z={class:"card-container"},N={key:0,class:"empty-state"},F=["disabled"],C={key:0},P={key:1};function D(s,e,h,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",z,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",N,' No results found for "'+u(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",C,"See more"))],8,F)):l("",!0)])}const R=d(A,[["render",D],["__scopeId","data-v-780fedac"]]),G=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/20.md","filePath":"chatai/20.md"}'),L={name:"chatai/20.md"},M=Object.assign(L,{setup(s){return(e,h)=>(n(),i("div",null,[x(R)]))}});export{G as __pageData,M as default};
