import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as _,p as w,e as x,q as v}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,m,r,a){return n(),i("div",k,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-52dfcf2d"]]),S=JSON.parse('[{"question":"You are given a 2D grid of size n x m filled with integers. Your task is to answer q queries of the following forms: * 1 x y val — update the value at position (x, y) in the grid to val. * 2 x1 y1 x2 y2 — find the sum of all values in the subgrid that spans from (x1, y1) to (x2, y2), inclusive. To accommodate the queries efficiently, you will process the updates and queries using a data structure that allows dynamic modifications and range sum queries. Input The first line contains three integers n (1 ≤ n ≤ 1000), m (1 ≤ m ≤ 1000), and q (1 ≤ q ≤ 100000) — the dimensions of the grid and the number of queries, respectively. The next n lines contain m integers each, representing the initial values of the grid cells. Each of the next q lines describes one of the two types of queries: * 1 x y val (1 ≤ x ≤ n, 1 ≤ y ≤ m, -10^9 ≤ val ≤ 10^9). * 2 x1 y1 x2 y2 (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m). Output For each query of the second type, print a single line with the sum of the values in the specified subgrid. Example Input 3 3 5 1 2 3 4 5 6 7 8 9 2 1 1 2 2 1 2 2 10 2 1 1 2 2 2 2 2 3 3 1 3 3 -5 2 1 1 3 3 Output 12 19 27 52 Explanation - Initial grid: 1 2 3 4 5 6 7 8 9 - Query 1: Sum of subgrid (1,1) to (2,2) is 1+2+4+5 = 12. - Query 2: Update cell (2,2) to 10. - Grid after update: 1 2 3 4 10 6 7 8 9 - Query 3: Sum of subgrid (1,1) to (2,2) is 1+2+4+10 = 17. - Query 4: Sum of subgrid (2,2) to (3,3) is 10+6+8+9 = 33. - Query 5: Update cell (3,3) to -5. - Grid after update: 1 2 3 4 10 6 7 8 -5 - Query 6: Sum of subgrid (1,1) to (3,3) is 1+2+3+4+10+6+7+8-5 = 36.","solution":"class Grid: def __init__(self, n, m, grid): self.n = n self.m = m self.grid = grid self.prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] self._build_prefix_sum() def _build_prefix_sum(self): for i in range(1, self.n + 1): for j in range(1, self.m + 1): self.prefix_sum[i][j] = self.grid[i-1][j-1] + self.prefix_sum[i-1][j] + self.prefix_sum[i][j-1] - self.prefix_sum[i-1][j-1] def update_value(self, x, y, val): original_val = self.grid[x-1][y-1] self.grid[x-1][y-1] = val diff = val - original_val for i in range(x, self.n + 1): for j in range(y, self.m + 1): self.prefix_sum[i][j] += diff def get_subgrid_sum(self, x1, y1, x2, y2): return (self.prefix_sum[x2][y2] - self.prefix_sum[x1-1][y2] - self.prefix_sum[x2][y1-1] + self.prefix_sum[x1-1][y1-1]) # Process input, build the grid and execute the queries def process_queries(n, m, q, grid_values, queries): results = [] grid = Grid(n, m, grid_values) for query in queries: if query[0] == 1: _, x, y, val = query grid.update_value(x, y, val) elif query[0] == 2: _, x1, y1, x2, y2 = query results.append(grid.get_subgrid_sum(x1, y1, x2, y2)) return results"},{"question":"A \\"Brackets Balance\\" problem is a string problem where you need to determine if the brackets in the given string are balanced. The string contains three types of brackets: (), {}, and []. The brackets must close in the correct order, i.e., an opening bracket must be closed by the same type of bracket and in the correct order. Input The first line of the input is an integer T (1 ≤ T ≤ 100), the number of test cases. Each test case consists of a single line of input which is a non-empty string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Output For each test case, print \\"YES\\" if the given string has balanced brackets, otherwise print \\"NO\\". Explanation for sample Input/Output For the 1st test case the string \\"([])\\" has balanced brackets. For the 2nd test case the string \\"([)]\\" has unbalanced brackets. SAMPLE INPUT 5 ([]) ([)] {{[[(())]]}} [] [{()}()] SAMPLE OUTPUT YES NO YES YES YES","solution":"def is_balanced(s): Determines if the brackets in the string are balanced. stack = [] bracket_map = {\\")\\": \\"(\\", \\"}\\": \\"{\\", \\"]\\": \\"[\\"} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or stack.pop() != bracket_map[char]: return \\"NO\\" return \\"YES\\" if stack == [] else \\"NO\\" def bracket_balance(T, test_cases): Processes multiple test cases to determine if each has balanced brackets. results = [] for test in test_cases: results.append(is_balanced(test)) return results"},{"question":"A farmer is interested in the production of apples in his orchard. Each apple tree in the orchard produces a fixed number of apples every year. The farmer can collect apples from each tree only once a year. Given the number of trees in the orchard (N) and a list that represents the number of apples each tree produces (an array of N integers), determine the total number of apples the farmer can collect in a year. -----Constraints----- - All values in input are integers. - 1 leq N leq 100 - 1 leq Number of apples produced by each tree leq 1000 -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 a_3 ... a_N -----Output----- Print the total number of apples the farmer can collect in a year. -----Sample Input----- 5 10 20 15 25 30 -----Sample Output----- 100","solution":"def total_apples_collected(N, apples): Calculate the total number of apples collected from the orchard. Args: N (int): The number of trees in the orchard. apples (list of int): A list representing the number of apples each tree produces. Returns: int: The total number of apples collected. return sum(apples) # Example usage: # N = 5 # apples = [10, 20, 15, 25, 30] # print(total_apples_collected(N, apples)) # Output: 100"},{"question":"Design a function that, given a positive integer ( N ) and an array of ( N ) integers, returns the length and elements of the longest increasing subsequence within that array. An increasing subsequence is a sequence of indices such that for all ( i ) and ( j ) in the sequence, if ( i < j ) then ( text{array}[i] < text{array}[j] ). -----Input:----- The first line of the input is a positive integer ( N ) indicating the length of the array. The next line contains ( N ) integers separated by spaces representing the elements of the array. -----Output:----- The first line of the output must contain a single integer ( L ) denoting the length of the longest increasing subsequence. The second line should contain ( L ) integers separated by spaces representing the elements of the longest increasing subsequence. If there are multiple longest increasing subsequences, any one of them can be returned. -----Constraints:----- - ( 1 leq N leq 1000 ) - (-10^5 leq text{array}[i] leq 10^5) -----Sample input 1:----- 6 5 2 8 6 3 6 -----Sample output 1:----- 3 2 3 6 -----Sample input 2:----- 5 1 3 2 4 5 -----Sample output 2:----- 4 1 2 4 5 -----Sample input 3:----- 5 9 8 7 6 5 -----Sample output 3:----- 1 9","solution":"def longest_increasing_subsequence(N, array): Returns the length and the elements of the longest increasing subsequence in the given array. Args: N : int : length of the array array : list of int : input array Returns: length : int : length of the longest increasing subsequence subseq : list of int : the longest increasing subsequence if N == 0: return 0, [] dp = [1] * N parent = [-1] * N for i in range(1, N): for j in range(0, i): if array[i] > array[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 parent[i] = j length = max(dp) index = dp.index(length) subseq = [] while index != -1: subseq.append(array[index]) index = parent[index] subseq.reverse() return length, subseq"},{"question":"You are managing a fictional company\'s IT department tasked with organizing employee ID badges based on their floor levels in a corporate building. Each employee ID badge has details about which floor they work on. All employee IDs on the same floor should be grouped together and sorted in ascending order, but the overall order between the floors should be maintained as provided. You need to write a program to achieve this. The input consists of multiple test cases. For each test case, you will be given the number of employees and their respective floor levels as a list of tuples, where the first element of each tuple is the employee ID and the second element is the floor number. The output should be a sorted list of employee IDs, sorted first by their floor levels (as integers) in ascending order, with each group of employee IDs on the same floor also sorted in ascending order. Input The first line of the input contains an integer T, the number of test cases. Each test case consists of an integer N, the number of employees, followed by N tuples each containing an integer for the employee ID and the floor level. Output For each test case, output a single line containing the sorted employee IDs as described. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Employee_ID ≤ 1000 1 ≤ Floor_number ≤ 100 Example Input: 2 3 (101, 2) (102, 1) (103, 2) 4 (201, 1) (202, 2) (203, 1) (204, 2) Output: 102 101 103 201 203 202 204","solution":"def sort_employee_ids(test_cases): results = [] for case in test_cases: N, employees = case # Group employees by floor floor_groups = {} for emp_id, floor in employees: if floor not in floor_groups: floor_groups[floor] = [] floor_groups[floor].append(emp_id) # Sort the groups and each group individually sorted_floors = sorted(floor_groups.keys()) sorted_ids = [] for floor in sorted_floors: sorted_ids.extend(sorted(floor_groups[floor])) results.append(sorted_ids) return results # Example usage: test_cases = [ (3, [(101, 2), (102, 1), (103, 2)]), (4, [(201, 1), (202, 2), (203, 1), (204, 2)]) ] print(sort_employee_ids(test_cases)) # Expected Output: # [ # [102, 101, 103], # [201, 203, 202, 204] # ]"},{"question":"**Path Finder** Alex is fond of exploring mazes. One day, he encountered a special type of maze represented as a 2D grid of characters. Each cell in the maze is either a \'.\' (open cell) or a \'#\' (blocked cell). Alex can only move vertically or horizontally, and he needs to find the shortest path from the top-left corner to the bottom-right corner of the maze. Write a program to help Alex determine the length of the shortest path. If there is no valid path, return -1. ---Input--- The first line contains two integers, M and N, which represent the number of rows and columns in the maze. Each of the next M lines contains N characters, representing the grid. ---Output--- Print one integer: the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, print -1. ---Constraints--- - 1 ≤ M, N ≤ 1000 - The maze grid only consists of \'.\' and \'#\' Example Input: 3 3 ... .#. ... Output: 4 Input: 3 3 .#. # ... Output: -1","solution":"from collections import deque def shortest_path_length(maze, M, N): Finds the shortest path length from the top-left corner to the bottom-right corner of the given maze. Returns -1 if no path exists. maze : List of List of str : 2D grid representing the maze M : int : Number of rows in the maze N : int : Number of columns in the maze if maze[0][0] == \'#\' or maze[M-1][N-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = [[False] * N for _ in range(M)] visited[0][0] = True distance = [[0] * N for _ in range(M)] while queue: x, y = queue.popleft() if x == M-1 and y == N-1: return distance[x][y] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny] and maze[nx][ny] == \'.\': queue.append((nx, ny)) visited[nx][ny] = True distance[nx][ny] = distance[x][y] + 1 return -1"},{"question":"A company is conducting research on genetic sequences represented as strings. They have identified that certain specific subsequences, termed \\"toxic,\\" adversely affect their studies. The company\'s main focus is to ensure that these toxic subsequences do not exceed a given tolerance level within their data. Each subsequence has an associated integer toxicity value. The goal is to scan a given large string and determine whether the total toxicity surpasses a defined threshold. Given the main string, a list of toxic subsequences along with their toxicity values, and a threshold, your task is to identify if the total toxicity exceeds the given threshold. Input The first line contains an integer k (1 ≤ k ≤ 10) — the number of test cases. Each of the next k test cases consists of: - The first line contains a single integer m (1 ≤ m ≤ 100) — the length of the main string. - The second line contains a string of length m consisting of lowercase English letters. - The third line contains a single integer n (1 ≤ n ≤ 100) — the number of toxic subsequences. - The next n lines each contain a toxic subsequence (a non-empty string of lowercase English letters) and an associated integer toxicity value t (1 ≤ t ≤ 100). Output For each test case print \\"YES\\" if the total toxicity of the detected toxic subsequences exceeds the threshold, otherwise print \\"NO\\". Example Input 2 10 aaabbbcccc 2 aa 3 bb 4 10 gggtttcccaa 3 ggg 2 ttt 3 ccc 5 Output YES NO","solution":"def check_toxicity(test_cases): results = [] for test_case in test_cases: main_string = test_case[\'main_string\'] toxic_subsequences = test_case[\'subsequences\'] threshold = test_case[\'threshold\'] total_toxicity = 0 for subsequence, toxicity in toxic_subsequences: # Count occurrences of the toxic subsequence in the main string count = main_string.count(subsequence) total_toxicity += count * toxicity if total_toxicity > threshold: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Consider a sequence of numbers where each number represents the number of spaces (\' \') in it. Define the sequence S of length N where S[i] (0 ≤ i < N) is 0 for multiples of 3, 1 for numbers that leave a remainder of 1 when divided by 3, and 2 for numbers that leave a remainder of 2 when divided by 3. You need to generate and return the sequence S. For example: ```python Input: N = 5 Output: [0, 1, 2, 0, 1] ``` Explanation: - For N=5, the first 5 numbers in the sequence will be: - 0 (0 % 3 == 0) - 1 (1 % 3 == 1) - 2 (2 % 3 == 2) - 0 (3 % 3 == 0) - 1 (4 % 3 == 1) Your Task: You don\'t need to read input or print anything. Your task is to complete the function generateSequence(N) which takes an integer N as input and returns the list S of length N. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^6","solution":"def generateSequence(N): Generates the sequence S of length N where S[i] is 0 for multiples of 3, 1 for numbers that leave a remainder of 1 when divided by 3, and 2 for numbers that leave a remainder of 2 when divided by 3. return [i % 3 for i in range(N)]"},{"question":"In a school library, each book has a unique identifier in the form of a positive integer. The librarian wants to arrange the books on the shelf such that no two adjacent books have identifiers that are both even or both odd. Given a sequence of book identifiers, your task is to determine whether it is possible to rearrange them as required. If it is possible, provide a valid rearrangement; if not, indicate that no such arrangement exists. -----Input----- The input consists of a single line containing n integers, where 1 le n le 1000 and each integer represents a book identifier (positive integer). -----Output----- If it is possible to rearrange the books according to the given condition, print \\"YES\\" followed by a valid sequence of book identifiers. If it is not possible, print \\"NO\\". -----Examples----- Input 3 8 5 12 7 Output YES 8 7 12 5 3 Input 1 2 3 Output YES 1 2 3 Input 2 4 6 Output NO -----Note----- In the first example, a possible valid rearrangement is [8, 7, 12, 5, 3], where no two adjacent book identifiers are both even or both odd. In the second example, the sequence [1, 2, 3] is already valid as no rearrangement is needed. In the third example, all book identifiers are even, making it impossible to rearrange them to satisfy the condition.","solution":"def rearrange_books(identifiers): Determines if the given book identifiers can be rearranged such that no two adjacent identifiers are both even or both odd. Returns \\"YES\\" and a valid rearrangement if possible, or \\"NO\\" if not possible. :param identifiers: List of integers representing book identifiers. :return: Tuple containing \\"YES\\" or \\"NO\\" and the rearranged list (if applicable). evens = [x for x in identifiers if x % 2 == 0] odds = [x for x in identifiers if x % 2 == 1] # If the difference between the number of even and odd numbers is more than 1, # then it is impossible to rearrange them as required. if abs(len(evens) - len(odds)) > 1: return \\"NO\\", [] result = [] even_index, odd_index = 0, 0 if len(evens) > len(odds): result.append(evens[even_index]) even_index += 1 else: result.append(odds[odd_index]) odd_index += 1 while even_index < len(evens) and odd_index < len(odds): if result[-1] % 2 == 0: result.append(odds[odd_index]) odd_index += 1 else: result.append(evens[even_index]) even_index += 1 # Append remaining items while even_index < len(evens): result.append(evens[even_index]) even_index += 1 while odd_index < len(odds): result.append(odds[odd_index]) odd_index += 1 return \\"YES\\", result"},{"question":"You are given an integer array `arr` of length `N`. Your task is to determine if any element appears strictly more than N/3 times in the array. If such an element exists, print its value; otherwise, print `No`. Constraints * 1 <= N <= 100 * -10^9 <= arr[i] <= 10^9 Input Input is given from Standard Input in the following format: N arr Output Output the element that appears strictly more than N/3 times, or `No` if no such element exists. Examples Input 6 1 2 3 1 1 1 Output 1 Input 5 1 2 3 4 5 Output No","solution":"def element_appearing_more_than_n_div_3_times(N, arr): Determines if there is any element that appears strictly more than N/3 times in the array. :param N: Integer, the length of the array :param arr: List of integers, the array elements :return: The element that appears more than N/3 times or \'No\' from collections import Counter # Calculate the threshold threshold = N / 3 # Count the frequency of each element in the array counter = Counter(arr) # Check each element frequency against the threshold for elem, count in counter.items(): if count > threshold: return elem return \\"No\\""},{"question":"# Task You are given an array of integers. Your task is to determine the maximum length of a contiguous subarray with an equal number of 0s and 1s. # Examples For `arr = [0, 1, 0, 0, 1, 1, 0]` the answer is `6`. This is because the subarray `[0, 1, 0, 0, 1, 1]` contains an equal number of 0s and 1s. For `arr = [0, 0, 1, 0, 0, 0, 1, 1]` the answer is `6`. The subarray `[0, 1, 0, 0, 0, 1]` contains an equal number of 0s and 1s. # Input/Output - `[input]` integer array `arr` An array of N integers where each element is either a 0 or a 1. `2 ≤ arr.length ≤ 10^4` - `[output]` an integer The maximum length of a contiguous subarray with an equal number of 0s and 1s.","solution":"def find_max_length(arr): Returns the maximum length of a contiguous subarray with an equal number of 0s and 1s. count = 0 max_length = 0 hash_map = {0: -1} # Initialize with 0 to handle cases from the start of the array for index, value in enumerate(arr): # Change 0s to -1s to utilize the sum/count approach count += -1 if value == 0 else 1 if count in hash_map: max_length = max(max_length, index - hash_map[count]) else: hash_map[count] = index return max_length"},{"question":"You are given a string S that contains only lowercase alphabets. Your task is to determine the least number of operations required to make all characters of the string unique using the following operation: 1. You can replace any character in the string with any other lowercase alphabet. Example 1: Input: S = \\"abca\\" Output: 1 Explanation: We can replace the last \'a\' with \'d\' to get \\"abcd\\" where all characters are unique. Example 2: Input: S = \\"aaa\\" Output: 2 Explanation: We can replace two \'a\'s with two different characters to get \\"abc\\" where all characters are unique. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minOperations() which takes the string S as input and returns the minimum number of operations needed to make all characters of the string unique. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^5","solution":"def minOperations(S): Determines the least number of operations required to make all characters in the string S unique. if len(S) == 0: # If string is empty, no operations are needed. return 0 char_count = {} duplicates_count = 0 for char in S: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in char_count: if char_count[char] > 1: duplicates_count += char_count[char] - 1 return duplicates_count"},{"question":"Write a program that determines the maximum flow in a given directed network graph ( G = (V, E) ) using the Edmonds-Karp algorithm. The graph represents a network of pipes where each edge ( (u, v) ) has a flow capacity ( c(u, v) ). The source vertex is always labeled as ( 1 ) and the sink vertex as ( n ). Constraints * ( 2 leq n leq 100 ) Input In the first line, an integer ( n ) denoting the number of vertices in the graph. In the second line, an integer ( m ) denoting the number of edges. In the next ( m ) lines, each line contains three integers ( u ), ( v ), and ( c ) which describe a directed edge from vertex ( u ) to vertex ( v ) with capacity ( c ). Output Print a single integer representing the maximum flow from source vertex ( 1 ) to sink vertex ( n ). Example Input 4 5 1 2 100 1 3 100 2 3 1 2 4 100 3 4 100 Output 200 Explanation - The flow from vertex 1 to 2 is 100. - The flow from vertex 1 to 3 is 100. - The flow from vertex 2 to 3 is 1 (which is almost negligible in this example). - The flow from vertex 2 to 4 is 100. - The flow from vertex 3 to 4 is 100. Thus, the maximum flow from vertex 1 to vertex 4 is 200.","solution":"from collections import deque, defaultdict def bfs(graph, source, sink, parent): visited = set() queue = deque([source]) visited.add(source) while queue: u = queue.popleft() for v, capacity in graph[u].items(): if v not in visited and capacity > 0: queue.append(v) visited.add(v) parent[v] = u if v == sink: return True return False def edmonds_karp(n, edges): graph = defaultdict(lambda: defaultdict(int)) for u, v, c in edges: graph[u][v] += c source, sink = 1, n parent = [0] * (n + 1) max_flow = 0 while bfs(graph, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, graph[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] graph[u][v] -= path_flow graph[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow"},{"question":"A new restaurant in town, Gastronomia, organizes a weekly dessert competition among its patrons. The competition works as follows: participants take turns to bring a dessert every week, and they earn points based on how well their dessert is received by a panel of judges. The points awarded range from 1 to 10 inclusive. At the end of a 12-week season, the participant with the highest total score wins the competition. If there is a tie, both participants are declared winners. Write a program that determines the winner of the dessert competition. The program should take input describing the scores of each dessert brought by the participants over the 12 weeks and output the name(s) of the winner(s). -----Input----- Input consists of: - The number of participants, N (2 leq N leq 50). - N lines following the first line, each containing 12 integers separated by spaces. Each line represents the scores for the desserts brought by a participant over the 12 weeks. - A line containing N names of the participants separated by spaces. Each name is a single word consisting of letters from a-z or A-Z, and the maximum length of a name is 20 characters. -----Output----- Output the name of the winner if there is only one winner. If there is more than one winner due to a tie in the highest score, output their names separated by a space, in the same order as they appeared in the input. -----Examples----- Sample Input 1: 3 7 8 9 4 5 6 9 8 4 5 7 6 5 6 8 9 7 6 7 8 9 4 6 8 8 9 7 4 6 5 8 9 6 7 5 4 Alice Bob Charlie Sample Output 1: Bob Sample Input 2: 3 7 8 9 4 5 6 9 8 4 5 7 6 5 6 8 9 7 6 7 8 9 4 6 8 8 9 7 4 6 5 8 9 6 7 5 4 Alice Bob Charlie Sample Output 2: Alice Bob Sample Input 3: 2 7 8 9 6 5 4 9 9 8 7 6 5 8 9 9 6 7 5 8 7 9 6 7 8 Diane Edward Sample Output 3: Edward","solution":"def determine_winner(scorers, names): Determines the winner(s) of the dessert competition. Parameters: scorers (list of list of int): A list of N lists, each containing 12 integers representing weekly scores. names (list of str): A list of N names corresponding to the participants. Returns: str: The name(s) of the winner(s), separated by spaces if there are ties. # Compute the total score for each participant total_scores = [sum(scores) for scores in scorers] # Determine the highest score max_score = max(total_scores) # Find all participants with the highest score winners = [names[i] for i, score in enumerate(total_scores) if score == max_score] # Return names of winners as a single string return \\" \\".join(winners)"},{"question":"Dr. Brown is a film critic and a math enthusiast. In his spare time, he likes to analyze sequences of movie ratings to find interesting patterns. One of the problems he is currently working on is finding the length of the longest increasing subsequence within a sequence of ratings. An increasing subsequence is a subsequence of a sequence in which the elements appear in the same order as the original sequence, and each element is greater than the one before it. For this problem, you are asked to help Dr. Brown by writing a program to find the length of the longest increasing subsequence in a given sequence of movie ratings. Input The input consists of multiple datasets, each of which contains a single sequence of ratings in the following format: n r1 r2 r3 ... rn n is the number of ratings in the dataset (0 ≤ n ≤ 1000). Each of the following n values represents a single rating. The end of the input is indicated by a line containing a single zero. Output For each dataset, output a line containing a single integer, which is the length of the longest increasing subsequence of the ratings in the dataset. Example Input 6 10 22 9 33 21 50 5 3 10 2 1 20 0 Output 4 3 Explanation In the first dataset, the longest increasing subsequence is `10, 22, 33, 50`, which has a length of 4. In the second dataset, the longest increasing subsequence is `3, 10, 20`, which has a length of 3.","solution":"def length_of_longest_increasing_subsequence(sequence): Returns the length of the longest increasing subsequence in the given sequence. if not sequence: return 0 n = len(sequence) lis = [1] * n # Initialize LIS values for all indexes # Compute optimized LIS values in a bottom-up manner for i in range(1, n): for j in range(0, i): if sequence[i] > sequence[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return the maximum value in lis[] return max(lis) def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") result = [] i = 0 while i < len(input_lines): n = int(input_lines[i]) if n == 0: break i += 1 sequence = list(map(int, input_lines[i].split())) i += 1 result.append(length_of_longest_increasing_subsequence(sequence)) return result"},{"question":"A sequence is defined as follows: The first two terms are 1 and 2, and each subsequent term is the sum of the previous two terms. Write a program to find the Nth term of the sequence. Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains an integer N indicating the position of the term in the sequence. Output Format For each test case, print the Nth term of the sequence. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 50 SAMPLE INPUT 3 1 2 5 SAMPLE OUTPUT 1 2 8","solution":"def get_nth_term(n): Returns the Nth term of the sequence defined as follows: - The first two terms are 1 and 2 - Each subsequent term is the sum of the previous two terms # Handle base cases if n == 1: return 1 elif n == 2: return 2 # Initialize the first two terms a, b = 1, 2 # Calculate subsequent terms up to the nth term for _ in range(3, n + 1): a, b = b, a + b return b def solve_sequence(T, cases): results = [] for n in cases: results.append(get_nth_term(n)) return results"},{"question":"John is a passionate gardener with a lovely rectangular garden that consists of a grid of M rows and N columns. In this garden, John grows a variety of flowers in some cells, and leaves other cells empty. Each flowering cell has a specified type of flower identified by its unique alphanumeric code. John wants to perform a gratitude ceremony where he waters every flower of a particular type regardless of their location in the garden. Help John identify all the cells in the garden where flowers of the specified type are planted. -----Input:------ - The first line contains two integers M and N denoting the number of rows and columns in the garden. - The next M lines contain N space-separated values each, representing the type of flower planted in the corresponding cell or a \'-\' if the cell is empty. - The last line contains a single alphanumeric string denoting the type of flower John wants to water. -----Output:------ Print all coordinates of cells where the specified type of flower is present. If no such flower is found, print \\"Not Found\\". -----Constraints----- - 1 leq M, N leq 100 - The alphanumeric codes are case-sensitive and have a length from 1 to 10 characters. -----Sample input:----- 4 5 R - Y B G G R G B - Y - B G R - B - - Y G -----Sample output----- 2 0 3 2","solution":"def identify_flower_cells(M, N, garden, flower_type): Identifies all cells (i, j) in the garden where the specified flower type is planted. Parameters: M (int): The number of rows in the garden. N (int): The number of columns in the garden. garden (list of list of str): The garden grid where each cell contains a flower type or \'-\'. flower_type (str): The type of flower to search for. Returns: list of tuple: List of coordinates (i, j) where the specified flower is planted. Returns an empty list if no such flower is found. result = [] for i in range(M): for j in range(N): if garden[i][j] == flower_type: result.append((i, j)) if not result: return \\"Not Found\\" return result # Example Input: 4 5 [[\'R\', \'-\', \'Y\', \'B\', \'G\'], [\'G\', \'R\', \'G\', \'B\', \'-\'], [\'Y\', \'-\', \'B\', \'G\', \'R\'], [\'-\', \'B\', \'-\', \'-\', \'Y\']] \'G\' # Expected Output: [(2, 0), (3, 2)]"},{"question":"Lara enjoys baking and frequently experiments with different recipes. She often needs to know the minimum number of specific ingredients she has to buy to make multiple dishes from her cookbook. Given a list of recipes, where each recipe is represented by a list of ingredients, write a function that returns a dictionary with each ingredient as a key and the minimum quantity needed for each ingredient as the value. The same ingredient can appear multiple times across different recipes, and the result dictionary should sum these quantities. For example, if you have the following list of recipes: ```python recipes = [ {\\"flour\\": 200, \\"sugar\\": 100, \\"eggs\\": 2}, {\\"flour\\": 150, \\"sugar\\": 100, \\"butter\\": 50}, {\\"milk\\": 200, \\"sugar\\": 50, \\"eggs\\": 1} ] ``` Your function should return: ```python { \\"flour\\": 350, \\"sugar\\": 250, \\"eggs\\": 3, \\"butter\\": 50, \\"milk\\": 200 } ``` Implement the function to achieve this.","solution":"def aggregate_ingredients(recipes): Aggregates the quantities of ingredients needed from a list of recipes. Args: recipes (list of dict): List of recipes where each recipe is represented by a dictionary with ingredient names as keys and quantities as values. Returns: dict: A dictionary with ingredient names as keys and the total quantity needed as values. ingredient_totals = {} for recipe in recipes: for ingredient, quantity in recipe.items(): if ingredient in ingredient_totals: ingredient_totals[ingredient] += quantity else: ingredient_totals[ingredient] = quantity return ingredient_totals"},{"question":"Alice is learning about prime numbers and came across the concept of prime factors. She wants to write a function to find the largest prime factor of a given number. You are provided with an integer number, and your task is to compute its largest prime factor. Input Format The first line contains T, the number of test cases. Each of the next T lines contains an integer N. Constraints 1 leq T leq 100 2 leq N leq 10^{12} Output Format For each test case, print the largest prime factor of the given number on a new line. Sample Input 3 10 15 21 Sample Output 5 5 7 Explanation First testcase: N = 10 Prime factors are 2 and 5. Largest prime factor is 5. Second testcase: N = 15 Prime factors are 3 and 5. Largest prime factor is 5. Third testcase: N = 21 Prime factors are 3 and 7. Largest prime factor is 7.","solution":"def largest_prime_factor(n): Returns the largest prime factor of the given number n. def max_prime_factor(number): # Initialize the maximum prime factor variable with the lowest prime number max_prime = -1 # Divide number by 2 until it becomes odd while number % 2 == 0: max_prime = 2 number //= 2 # number must be odd at this point, thus skip even numbers (increment by 2) for i in range(3, int(number**0.5) + 1, 2): while number % i == 0: max_prime = i number //= i # This condition is to handle the case when number is a prime number # greater than 2 if number > 2: max_prime = number return max_prime return max_prime_factor(n)"},{"question":"You are given the task of building an application for a university library to help manage the borrowing of books during peak times, such as final exams. The library allows some books to be borrowed by multiple students concurrently, while some books can only be borrowed by one student at a time due to limited copies. To ensure fairness, the university wants to implement a priority-based borrowing system that considers both the borrowing time and the priority level of the students. Each book and each student has a unique identifier. The task is to determine the borrowing schedule for a set of book borrowing requests, such that the student with the highest priority borrows the book first. If two students have the same priority for a book, the one who made the request first gets the book. If a student requests a book that is already checked out or unavailable, that request is put on hold. -----Input----- The first line of the input contains three integers `b`, `s`, and `r` (1 le b, s, r le 10000), the number of books, number of students, and number of borrowing requests, respectively. The next `b` lines each contain an integer `id_b` (book identifier) and an integer `c` (number of copies available) separated by a space. The next `s` lines each contain an integer `id_s` (student identifier) and an integer `priority` (priority level) separated by a space. The next `r` lines each contain three integers `t` (timestamp), `id_s` (student identifier), and `id_b` (book identifier) separated by spaces. -----Output----- Output `r` lines. Each line should contain either \\"borrowed\\", \\"waitlisted\\", or \\"invalid request\\" depending on the status of each borrowing request in chronological order. - \\"borrowed\\" if the book is successfully borrowed by the student at that timestamp. - \\"waitlisted\\" if the book is currently unavailable and the request is put on hold. - \\"invalid request\\" if the student or the book does not exist. -----Example----- Sample Input: 2 3 5 1 2 2 1 1 10 2 5 3 20 1 2 1 2 1 2 3 1 2 4 3 1 5 2 1 Sample Output: borrowed borrowed waitlisted borrowed waitlisted","solution":"from collections import defaultdict, deque def manage_borrowing(b, s, r, books_info, students_info, requests_info): books = {} students = {} # Populate books data for id_b, c in books_info: books[id_b] = {\'copies\': c, \'waitlist\': deque()} # Populate students data for id_s, priority in students_info: students[id_s] = priority borrowings = {} result = [] for t, id_s, id_b in requests_info: if id_b not in books or id_s not in students: result.append(\\"invalid request\\") continue priority = students[id_s] # If book is available, borrow it if books[id_b][\'copies\'] > 0: books[id_b][\'copies\'] -= 1 borrowings[(t, id_s, id_b)] = priority result.append(\\"borrowed\\") else: books[id_b][\'waitlist\'].append((priority, t, id_s, id_b)) result.append(\\"waitlisted\\") return result"},{"question":"Given an array of integers, determine whether the parity of the number of even numbers in the array is the same as the parity of the number of odd numbers in the array. If they are the same, output \\"Balanced\\". Otherwise, output \\"Unbalanced\\". (Note: Parity of a number is whether it is even or odd. An even number has a parity of 0 and an odd number has a parity of 1.) SAMPLE INPUT 2 3 5 7 10 4 2 4 5 SAMPLE OUTPUT Balanced Unbalanced Explanation Consider the 1st testcase 3 5 7 10: Count of even numbers = 1 Count of odd numbers = 3 Both have parity of 1, output is \\"Balanced\\". Consider the 2nd testcase 4 2 4 5: Count of even numbers = 3 Count of odd numbers = 1 Parity of even numbers = 1, parity of odd numbers = 1, output is \\"Balanced\\".","solution":"def determine_parity_balance(numbers): Determine whether the parity of the number of even numbers in the array is the same as the parity of the number of odd numbers in the array. Parameters: numbers (list of int): The list of integers to check. Returns: str: \\"Balanced\\" if the parity of the number of even numbers is the same as the parity of the number of odd numbers, otherwise \\"Unbalanced\\". even_count = sum(1 for x in numbers if x % 2 == 0) odd_count = len(numbers) - even_count if even_count % 2 == odd_count % 2: return \\"Balanced\\" else: return \\"Unbalanced\\""},{"question":"A company has a policy that it must keep track of the lengths of service of employees. This information is stored in an array `years_of_service` where each element represents the years of service of an employee. A new policy has been introduced that rewards every employee who has been with the company for a certain number of years with a bonus. The company needs your help to determine which employees are qualified for the bonus. Write a function that takes in the array `years_of_service` and the minimum number of years `k` required to qualify for the bonus. The function should return an array containing the indices of the employees who qualify for the bonus. If no employees qualify, return an empty array. Input The first line contains an integer `n` (1 ≤ n ≤ 105), indicating the number of employees. The second line contains `n` integers representing the years of service for each employee. The third line contains a single integer `k` (1 ≤ k ≤ 100), the minimum number of years required to qualify for the bonus. Output Output the indices of the employees who qualify for the bonus as a space-separated string. If no employees qualify, output an empty string. Examples Input 5 3 7 1 8 2 6 Output 1 3 Input 4 2 4 1 3 5 Output (prints an empty string) Input 3 10 10 10 10 Output 0 1 2","solution":"def qualified_for_bonus(years_of_service, k): Returns the indices of employees who qualify for the bonus. Parameters: years_of_service (list of int): The years of service of each employee. k (int): The minimum number of years required to qualify for the bonus. Returns: list of int: The indices of employees who qualify for the bonus. qualifying_indices = [i for i, years in enumerate(years_of_service) if years >= k] return qualifying_indices"},{"question":"Kostya loves palindromes. As you might know, a palindrome is a string that reads the same forwards and backwards. For example, \\"level\\", \\"radar\\", and \\"12321\\" are palindromes, while \\"hello\\", \\"123456\\", and \\"code\\" are not. One day, Kostya was given a string `s` consisting of lowercase English letters. He needs to find a palindrome that: - Is a substring of `s`. - Has the maximum length possible. - In case of multiple palindromes of the same maximum length, is lexicographically smallest. Your task is to help Kostya find such a palindrome. Input The single line contains a non-empty string `s` of length ranging from 1 to 1000, inclusive, consisting of lowercase English letters. Output Output the required palindrome on a single line. Examples Input abacdfgdcaba Output aba Input aabbaa Output aabbaa Input abcd Output a Note In the first sample, the longest palindromes are \\"aba\\" and \\"aca\\", but \\"aba\\" is lexicographically smaller. In the second sample, the entire string \\"aabbaa\\" is the longest palindrome. In the third sample, there are no palindromes longer than 1, so any of \\"a\\", \\"b\\", \\"c\\", or \\"d\\" are valid outputs, but the smallest lexicographically is \\"a\\".","solution":"def longest_lexicographic_palindrome(s): def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] max_palindrome = s[0] for i in range(len(s)): palindrome_odd = expand_around_center(i, i) palindrome_even = expand_around_center(i, i + 1) if len(palindrome_odd) > len(max_palindrome) or (len(palindrome_odd) == len(max_palindrome) and palindrome_odd < max_palindrome): max_palindrome = palindrome_odd if len(palindrome_even) > len(max_palindrome) or (len(palindrome_even) == len(max_palindrome) and palindrome_even < max_palindrome): max_palindrome = palindrome_even return max_palindrome"},{"question":"Mr. Zhao is participating in a programming competition, and he faces the following problem: He needs to create a new type of number called a \\"**Digit Product Number**\\". A **Digit Product Number** is a number where the product of its digits is equal to a given integer P. Your task is to find the smallest possible **Digit Product Number** that has a product of digits equal to P. If no such number exists, return -1. A **Digit Product Number** can consist of any digits between 1 and 9. The digits are allowed to repeat, but the number should not contain the digit 0. -----Input----- The input contains a single integer P (1 le P le 10^9), which is the product of digits you need to achieve. -----Output----- A single line containing the smallest **Digit Product Number** if it exists, otherwise return -1. -----Example----- Input 36 Output 49 Input 10 Output 25 Input 1 Output 1 Input 100 Output 455 Input 29 Output -1 -----Note----- For the input 36, we can form the number 49, where the product of digits 4 and 9 is 36. For the input 10, we can form the number 25, where the product of digits 2 and 5 is 10. For the input 1, the number itself is 1 as the smallest **Digit Product Number**. For the input 100, we can form the number 455, where the product of digits 4, 5, and 5 is 100. For the input 29, it is not possible to form a **Digit Product Number** as no combination of digits between 1 and 9 has a product of 29.","solution":"def find_digit_product_number(P): Finds the smallest possible Digit Product Number such that the product of its digits is equal to P. If no such number exists, returns -1. if P == 1: return 1 if P < 10: return P factors = [] for digit in range(9, 1, -1): while P % digit == 0: factors.append(digit) P //= digit if P > 1: return -1 factors.sort() digit_product_number = int(\'\'.join(map(str, factors))) return digit_product_number"},{"question":"A group of friends decided to play a game during a long car trip. The game consists of spotting license plates and noting down their numbers. However, there is a twist in the game: they are only interested in palindromic numbers, which are numbers that read the same backward as forward (e.g., 121 or 2002). Help the friends by writing a function that receives a list of license plates and counts how many of them are palindromic. Input 1. The first line contains an integer n (1 ≤ n ≤ 105), the number of license plates observed by the friends. 2. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 107), the numbers on the license plates. Output Print a single integer denoting the number of palindromic license plates in the list. Examples Input 5 121 123 454 567 898 Output 3 Input 3 1111 222 3333 Output 3 Note In the first sample, the palindromic license plates are 121, 454, and 898. In the second sample, all the license plates are palindromic.","solution":"def is_palindrome(number): Check if a number is a palindrome. str_num = str(number) return str_num == str_num[::-1] def count_palindromic_plates(n, plates): Count the number of palindromic license plates. Args: n: The number of license plates. plates: List of integers representing the license plates. Returns: Integer count of palindromic license plates. return sum(1 for plate in plates if is_palindrome(plate))"},{"question":"Given a string s, determine the length of the longest substring that contains only unique characters. Example 1: Input: s = \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Example 2: Input: s = \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Example 3: Input: s = \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Example 4: Input: s = \\"\\" Output: 0 Explanation: An empty string is of length 0. Constraints: - 0 <= s.length <= 5 * 10^4 - s consists of English letters, digits, symbols and spaces.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest_length = 0 start = 0 for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end longest_length = max(longest_length, end - start + 1) return longest_length"},{"question":"Given a string of lowercase alphabets, you need to return the number of distinct substrings that can be formed by rearranging the characters of each substring in lexicographical order. Example 1: Input: S = \\"abc\\" Output: 6 Explanation: Substrings in S: \\"a\\", \\"ab\\", \\"abc\\", \\"b\\", \\"bc\\", \\"c\\" After sorting characters, distinct substrings are: \\"a\\", \\"ab\\", \\"abc\\", \\"b\\", \\"bc\\", \\"c\\" So, the output is 6. Example 2: Input: S = \\"aaa\\" Output: 3 Explanation: Substrings in S: \\"a\\", \\"aa\\", \\"aaa\\", \\"a\\", \\"aa\\", \\"a\\" After sorting characters, distinct substrings are: \\"a\\", \\"aa\\", \\"aaa\\" So, the output is 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countDistinctSortedSubstrings() which takes the string S as input and returns the number of distinct lexicographically sorted substrings. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 ≤ S.length() ≤ 100","solution":"def countDistinctSortedSubstrings(S): Returns the number of distinct substrings that can be formed by rearranging the characters of each substring in lexicographical order. substrings = set() for start in range(len(S)): for end in range(start + 1, len(S) + 1): substring = S[start:end] sorted_substring = \'\'.join(sorted(substring)) substrings.add(sorted_substring) return len(substrings)"},{"question":"Given a string and an integer boldsymbol{k}, determine the length of the longest substring that contains at most boldsymbol{k} distinct characters. Example s = \\"eceba\\" k = 2 The longest substring with at most 2 distinct characters is \\"ece\\" with a length of 3. Function Description Complete the lengthOfLongestSubstringKDistinct function in the editor below. lengthOfLongestSubstringKDistinct has the following parameter(s): string s: a string consisting of lowercase alphabets int k: the maximum number of distinct characters Returns - int: the length of the longest substring with at most k distinct characters Input Format The first line contains a string s. The second line contains an integer k. Constraints 1 leq |s| leq 10^5 1 leq k leq 26 Sample Input STDIN Function ----- -------- eceba s = \\"eceba\\" 2 k = 2 Sample Output 3 Explanation The longest substring with at most 2 distinct characters is \\"ece\\", which has a length of 3.","solution":"def lengthOfLongestSubstringKDistinct(s: str, k: int) -> int: Returns the length of the longest substring with at most k distinct characters. if k == 0: return 0 char_map = {} left = 0 max_len = 0 for right in range(len(s)): if s[right] in char_map: char_map[s[right]] += 1 else: char_map[s[right]] = 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Given a directed graph with N nodes and M edges where the nodes are numbered from 1 to N, you need to identify whether the graph contains a cycle or not. If there is at least one cycle in the graph, print \\"YES\\", otherwise print \\"NO\\". ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two space-separated integers N and M — the number of nodes and the number of edges, respectively. - The next M lines describe the edges. Each of these M lines contain two space-separated integers u and v, denoting a directed edge from node u to node v. ------ Output Format ------ For each test case, output on a new line \\"YES\\" if there is at least one cycle in the directed graph, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 2 cdot 10^5 1 ≤ u, v ≤ N The sum of N + M over all test cases won\'t exceed 3 cdot 10^5. ------ Sample Input 1 ------ 2 4 4 1 2 2 3 3 4 4 2 3 2 1 2 2 3 ------ Sample Output 1 ------ YES NO ------ Explanation 1 ------ Test case 1: There is a cycle in the graph formed by the nodes 2 -> 3 -> 4 -> 2. Test case 2: There are no cycles in the graph.","solution":"from collections import defaultdict, deque def detect_cycle_in_directed_graph(n, edges): def has_cycle(v): if visited[v] == 1: return True if visited[v] == 2: return False visited[v] = 1 for neighbor in graph[v]: if has_cycle(neighbor): return True visited[v] = 2 return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [0] * (n + 1) for node in range(1, n + 1): if visited[node] == 0: if has_cycle(node): return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): results = [] for n, m, edges in test_cases: result = detect_cycle_in_directed_graph(n, edges) results.append(result) return results"},{"question":"A popular music streaming platform allows users to create playlists. Each playlist is represented as a string where each unique character represents a different song. The platform has introduced a new feature where they want to count how many unique playlists users can create using all the songs in their playlist exactly once. The order of the characters (songs) matters, and repeating songs in another order counts as a different playlist. Help the developers of the platform implement a function to determine the number of unique playlists that can be created from the given playlist string. -----Input----- The input contains a single string `playlist` (1 ≤ |playlist| ≤ 100), where each character is a unique song. -----Output----- Output one integer representing the total number of unique playlists that can be created. -----Example----- Input abc Output 6 Note: For the given example, the possible unique playlists are: `abc`, `acb`, `bac`, `bca`, `cab`, `cba`.","solution":"import math def count_unique_playlists(playlist): Returns the number of unique playlists that can be created using all the songs in the given playlist exactly once. n = len(playlist) return math.factorial(n)"},{"question":"A company has a warehouse where they store products in a rectangular grid of shelves. Each cell in the grid represents a shelf that can hold a certain amount of weight, and each product has a specific weight. Employees need to make sure that the total weight on any shelf does not exceed its capacity. You are tasked with writing a program that validates whether a given arrangement of products on the shelves is valid, i.e., the weight on each shelf does not exceed its capacity. The input consists of multiple test cases. Each test case consists of: 1. Two integers, `m` and `n`, representing the dimensions of the grid (number of rows and columns, respectively). 2. An `m x n` matrix of integers, where each integer represents the maximum weight capacity of the corresponding shelf. 3. An `m x n` matrix of integers, where each integer represents the weight of products placed on the corresponding shelf. Your program should read the input until it encounters a test case where both `m` and `n` are zero, which is the termination signal and should not be processed. For each test case, output \\"VALID\\" if the weight arrangement is valid and \\"INVALID\\" otherwise. # Constraints - 1 ≤ m, n ≤ 100 - 0 ≤ weight ≤ capacity ≤ 1000 - The number of test cases does not exceed 100. # Input The input consists of multiple test cases. Each test case follows the format below: ``` m n capacity_matrix_row_1 capacity_matrix_row_2 ... capacity_matrix_row_m weight_matrix_row_1 weight_matrix_row_2 ... weight_matrix_row_m ``` `capacity_matrix_row_i` and `weight_matrix_row_i` each contain `n` integers separated by spaces. The end of the input is indicated by a line where two 0s are separated by a single space. # Output Print \\"VALID\\" if the arrangement is valid, and \\"INVALID\\" otherwise, for each test case. # Example Input ``` 2 3 5 10 7 8 6 5 4 6 7 3 3 3 0 0 ``` Output ``` VALID ```","solution":"def validate_shelves(input_data): result = [] index = 0 while True: # Parse dimensions and matrices m, n = map(int, input_data[index].strip().split()) if m == 0 and n == 0: break index += 1 capacity_matrix = [] for _ in range(m): capacity_matrix.append(list(map(int, input_data[index].strip().split()))) index += 1 weight_matrix = [] for _ in range(m): weight_matrix.append(list(map(int, input_data[index].strip().split()))) index += 1 # Validate the arrangement valid = True for i in range(m): for j in range(n): if weight_matrix[i][j] > capacity_matrix[i][j]: valid = False break if not valid: break result.append(\\"VALID\\" if valid else \\"INVALID\\") return result"},{"question":"Given an array of integers, each element appears twice except for one element which appears exactly once. Find that single element. Your algorithm should run in O(n) time and with O(1) space complexity. Example: Input: [2, 1, 4, 5, 2, 4, 1] Output: 5 Explanation: The only element that appears once in the array is 5.","solution":"def find_single_element(nums): Finds the single element in an array where every other element appears twice. Args: nums: List[int] - an array of integers Returns: int - the single element single_element = 0 for num in nums: single_element ^= num return single_element"},{"question":"We have N candies placed in a row and each candy has a distinct integer label from 1 to N. There are two operations you can perform on this row: 1. Swap any two candies. This operation costs 1 unit. 2. Reverse any sub-array (a contiguous part of the row). This operation costs 2 units. The goal is to sort the candies in increasing order of their labels with the minimum cost. Calculate the minimum cost required to sort the candies. -----Constraints----- - 2 leq N leq 10 - The labels are distinct integers from 1 to N. -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 A_3 ... A_N -----Output----- Print the minimum cost required to sort the candies. -----Sample Input----- 5 4 3 5 1 2 -----Sample Output----- 3 Explanation: One possible way to sort the candies with the minimum cost is: 1. Reverse the sub-array [4, 3, 5, 1, 2] -> costs 2 units -> Array becomes [2, 1, 5, 3, 4] 2. Swap candies 2 and 1 -> costs 1 unit -> Array becomes [1, 2, 5, 3, 4] Total cost: 2 + 1 = 3 units","solution":"def min_cost_to_sort_candies(N, candies): Returns the minimum cost to sort the candies using the given operations. def dfs(arr, cost, visited): Depth-First Search to explore possible states and maintain the minimum cost. if tuple(arr) in visited and visited[tuple(arr)] <= cost: return float(\'inf\') visited[tuple(arr)] = cost if arr == sorted(arr): return cost min_cost = float(\'inf\') for i in range(N): for j in range(i + 1, N): # Perform a swap operation arr[i], arr[j] = arr[j], arr[i] min_cost = min(min_cost, dfs(arr, cost + 1, visited)) arr[i], arr[j] = arr[j], arr[i] # revert the swap # Perform a reverse operation arr[i:j+1] = arr[i:j+1][::-1] min_cost = min(min_cost, dfs(arr, cost + 2, visited)) arr[i:j+1] = arr[i:j+1][::-1] # revert the reverse return min_cost initial_arr = list(candies) visited = {} return dfs(initial_arr, 0, visited) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) candies = list(map(int, data[1:])) print(min_cost_to_sort_candies(N, candies))"},{"question":"You are given a string consisting of lowercase English letters and a function `is_substring` that can check if a given string is a substring of another string, which costs O(mn) for strings of lengths m and n. Your task is to find the length of the longest palindrome substring that can be formed by re-ordering the characters of the given string. Example 1: Input: s = \\"abcb\\" Output: 3 Explanation: One possible palindrome is \\"bcb\\". Example 2: Input: s = \\"aabbcc\\" Output: 6 Explanation: One possible palindrome is \\"abccba\\". Example 3: Input: s = \\"abcde\\" Output: 1 Explanation: One possible palindrome is \\"a\\". Your Task: You don\'t have to read or print anything. Your task is to complete the function `longest_palindrome_substring_length(s)` which takes the string `s` as input and returns the length of the longest palindrome substring that can be formed. Expected Time Complexity: O(n), where n is the length of the string. Expected Space Complexity: O(1) Constraints: 1 <= len(s) <= 100000","solution":"def longest_palindrome_substring_length(s): Returns the length of the longest palindrome substring that can be formed by re-ordering the characters of the given string. Args: s (str): input string consisting of lowercase English letters. Returns: int: length of the longest palindromic substring. from collections import Counter char_count = Counter(s) length = 0 odd_count_found = False for count in char_count.values(): # Add the even count part (if the count is odd, it means odd-1 is even) length += count // 2 * 2 # Check if there is any odd count if count % 2 == 1: odd_count_found = True # Add one if there\'s at least one odd count to allow one central character if odd_count_found: length += 1 return length"},{"question":"Write a function that takes a string containing only lowercase letters and returns a dictionary where the keys are the characters in the string and the values are the frequency of each character. **Note:** If the input is not a string or contains any uppercase letters, return an empty dictionary. ```python char_frequency(\'hello\') == {\'h\': 1, \'e\': 1, \'l\': 2, \'o\': 1} char_frequency(\'HELLO\') == {} ```","solution":"def char_frequency(s): Takes a string containing only lowercase letters and returns a dictionary where the keys are the characters in the string and the values are the frequency of each character. If the input is not a string or contains any uppercase letters, returns an empty dictionary. if not isinstance(s, str) or not s.islower(): return {} freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Consider a tree (an undirected graph with no cycles) consisting of `n` nodes. Each node of the tree has a value assigned to it. Initially, all nodes have a value of 0. There are `q` operations of two types: 1. Update: Add a given value `x` to all nodes in the subtree rooted at node `u`. 2. Query: Report the value of node `v`. The tree is rooted at node 1, and the nodes are numbered from 1 to `n`. Your task is to handle these operations efficiently. **Input:** - The first line contains an integer `n`, the number of nodes in the tree. - The next `n-1` lines each contain two integers `u` and `v`, denoting an edge between nodes `u` and `v`. - The next line contains an integer `q`, the number of operations. - The next `q` lines contain operations in the format: - `1 u x` (an update operation to add value `x` to all nodes in the subtree rooted at `u`) - `2 v` (a query operation to report the value of node `v`) **Output:** - For each query operation, output the value of node `v`. **Constraints:** - `1 ≤ n, q ≤ 10^5` - `1 ≤ u, v ≤ n` - `1 ≤ x ≤ 10^9` **Example:** **Input:** ``` 5 1 2 1 3 2 4 2 5 4 1 2 10 2 4 1 1 5 2 3 ``` **Output:** ``` 10 5 ``` **Explanation:** - After the first operation, the values of nodes in the subtree rooted at node 2 (which includes nodes 2, 4, and 5) are updated to 10. - The second operation queries the value of node 4, which is now 10. - After the third operation, the values of all nodes in the subtree rooted at node 1 (the entire tree) are incremented by 5. - The fourth operation queries the value of node 3, which is now 5.","solution":"from collections import defaultdict import sys sys.setrecursionlimit(200000) def dfs(node, parent, adj, start, end, timer, flat_tree): timer[0] += 1 start[node] = timer[0] flat_tree[timer[0]] = node for neighbor in adj[node]: if neighbor != parent: dfs(neighbor, node, adj, start, end, timer, flat_tree) end[node] = timer[0] def process_tree(n, edges, operations): adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) start = [0] * (n + 1) end = [0] * (n + 1) flat_tree = [0] * (n + 1) timer = [0] dfs(1, -1, adj, start, end, timer, flat_tree) bit = [0] * (n + 2) def add(bit, idx, val): while idx <= n: bit[idx] += val idx += idx & -idx def sum(bit, idx): result = 0 while idx > 0: result += bit[idx] idx -= idx & -idx return result result = [] for operation in operations: if operation[0] == 1: _, u, x = operation add(bit, start[u], x) add(bit, end[u] + 1, -x) elif operation[0] == 2: _, v = operation result.append(sum(bit, start[v])) return result"},{"question":"Problem Statement Ajay recently got interested in string manipulation problems. He came across a problem where he needs to determine the longest substring with at most K distinct characters. Your task is to help Ajay by writing an efficient code to find the length of such a substring. **Input** The first line contains the number of test cases, T. Each of the next T lines contains a string and an integer K separated by a space. **Output** For each test case, print a single integer - the length of the longest substring with at most K distinct characters. **Constraints** - 1 ≤ T ≤ 10^4 - 1 ≤ length of the string ≤ 10^5 - 1 ≤ K ≤ 100 **SAMPLE INPUT** 3 abcbae 2 aaaa 1 abacd 3 **SAMPLE OUTPUT** 3 4 4 **Explanation** For the first test case: The input string `abcbae` and K=2, the longest substrings with at most 2 distinct characters are `abc`, `cbae`, and `bae`, among which `abc` has the maximum length of 3. For the second test case: The input string `aaaa` and K=1, the longest substring with at most 1 distinct character is `aaaa` itself with the length of 4. For the third test case: The input string `abacd` and K=3, the longest substring with at most 3 distinct characters is `abac` with the length of 4.","solution":"def longest_substring_k_distinct(s, k): Finds the length of the longest substring with at most k distinct characters. Parameters: s (str): The input string. k (int): The maximum number of distinct characters. Returns: int: The length of the longest substring with at most k distinct characters. if k == 0: return 0 n = len(s) left = 0 max_len = 0 char_count = {} for right in range(n): char = s[right] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 while len(char_count) > k: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 max_len = max(max_len, right - left + 1) return max_len def process_test_cases(test_cases): results = [] for s, k in test_cases: results.append(longest_substring_k_distinct(s, int(k))) return results"},{"question":"____ # Definition **_Smith number_** is a composite number whose sum of digits is equal to the sum of the digits of its prime factors (excluding 1) written in radix 10. ____ # Task **_Given_** a number, **_Find if it is a Smith number or not_**. ____ # Warm-up (Highly recommended) # [Exploring Number Properties](https://www.codewars.com/collections/exploring-number-properties) ___ # Notes * **_Number_** *passed is always* **_Positive_** . * **_Return_** *the result as* **_String_** * If the number is prime, it is not a Smith number. ___ # Input >> Output Examples ``` smithNumber(22) ==> return \\"Smith !!\\" ``` **_Explanation_**: * Since, **_22_** is not a prime number and its\' prime factors are **_2_** and **_11_**. * The sum of the digits of **_22 = 2 + 2 = 4_**. * The sum of the digits of the prime factors: **_2 + (1+1) = 4_**. * Thus, the output is `\\"Smith !!\\"` ___ ``` smithNumber(13) ==> return \\"Not !!\\" ``` **_Explanation_**: * Since, **_13_** is a prime number, thus *output* is `\\"Not !!\\"` ___ ___ ___ # [Exploring Number Properties Series](https://www.codewars.com/collections/exploring-number-properties) # [Prime Numbers Exploration](https://www.codewars.com/collections/prime-numbers-exploration) # [For More Enjoyable Katas](http://www.codewars.com/users/MathGeek/authored) ___ ALL translations are welcomed Enjoy Learning !! # MathGeek","solution":"def is_prime(n): Helper function to check if a number is prime. if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def prime_factors(n): Helper function to get the prime factors of a number. i = 2 factors = [] while i * i <= n: if n % i: i += 1 else: n //= i factors.append(i) if n > 1: factors.append(n) return factors def sum_of_digits(n): Helper function to sum the digits of a number. return sum(int(digit) for digit in str(n)) def smith_number(n): Return \\"Smith !!\\" if the number is a Smith number, otherwise \\"Not !!\\". if is_prime(n): return \\"Not !!\\" prime_fact = prime_factors(n) sum_n = sum_of_digits(n) sum_factors = sum(sum_of_digits(factor) for factor in prime_fact) if sum_n == sum_factors: return \\"Smith !!\\" else: return \\"Not !!\\""},{"question":"Katya has another task in her programming class, and she needs your help to solve it. This time, the problem involves color sequences. She must determine the shortest sub-sequence (contiguous subsequence) in a given sequence of colors that contains at least one of each color from a given set of colors. You are given an integer array of length `n` representing a sequence of colors, and an integer array representing the set of colors to be included in the sub-sequence. Your task is to find the shortest contiguous sub-sequence in the color sequence that includes all the colors in the given set at least once. If there are multiple shortest sequences, you can return any one of them. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 2 * 10^5) — the length of the color sequence and the number of colors in the set respectively. The second line contains `n` integers representing the color sequence. The third line contains `m` integers representing the set of colors to be included in the sub-sequence. Output Print the length of the shortest sub-sequence that includes all the colors in the given set. If there is no such sub-sequence, print `-1`. Example Input 10 3 1 2 3 4 2 3 1 2 2 3 1 2 3 Output 3 Note In the example, the shortest sub-sequence that contains the colors {1, 2, 3} is [2, 3, 1], which starts at index 4 and ends at index 6. Thus, the length is 3.","solution":"def shortest_subsequence_length(n, m, color_sequence, color_set): from collections import defaultdict, Counter # Convert color_set to a set for O(1) lookups required_colors = set(color_set) required_count = Counter(color_set) window_count = defaultdict(int) start = 0 shortest_length = float(\'inf\') formed = 0 # Function to check if current window fulfills the requirement def fulfills_requirements(): for color in required_colors: if window_count[color] < required_count[color]: return False return True # Sliding window for end in range(n): color = color_sequence[end] window_count[color] += 1 # Check if current window satisfies the requirement while fulfills_requirements() and start <= end: current_length = end - start + 1 if current_length < shortest_length: shortest_length = current_length # Slide the window to the right window_count[color_sequence[start]] -= 1 start += 1 return shortest_length if shortest_length != float(\'inf\') else -1"},{"question":"Adam and Ben are comparing their collection of rare coins. Adam claims to have more coins than Ben, but Ben contests this. To settle their debate, they ask you for help. You are given the number of coins Adam and Ben have. Help determine who has the larger collection. ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first and only line of each test case contains two integers A and B, as described in the problem statement. ------ Output Format ------ For each test case, output on a new line texttt{Adam} if Adam has more coins than Ben, else output texttt{Ben}. The output is case insensitive, i.e, both texttt{Adam} and texttt{adam} will be accepted as correct answers when Adam has more coins. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ A, B ≤ 10^9 A neq B ----- Sample Input 1 ------ 3 100 150 200 100 300 300 ----- Sample Output 1 ------ Ben Adam Adam ----- Explanation 1 ------ Test case 1: In this case, 100 < 150 so Ben has more coins than Adam. Test case 2: In this case, 200 > 100 so Adam has more coins than Ben. Test case 3: In this case, 300 = 300 but this scenario is invalid based on constraints since A neq B.","solution":"def compare_coin_collections(test_cases): Compare the number of coins Adam and Ben have for each test case and determine who has more. Parameters: test_cases (list of tuples): Each tuple contains two integers (A, B), where A is the number of coins Adam has and B is the number of coins Ben has. Returns: list: A list of strings, each either \\"Adam\\" or \\"Ben\\" indicating who has more coins for each test case. results = [] for A, B in test_cases: if A > B: results.append(\\"Adam\\") else: results.append(\\"Ben\\") return results"},{"question":"Steven has a warehouse where he stores boxes of different weights. He has recently received a shipment of boxes, and he wants to organize them. However, due to space constraints, he must stack certain boxes on top of others. Box A can be placed on top of Box B only if the weight of Box A is less than or equal to the weight of Box B. Given the weight of each box in the shipment, your task is to determine the maximum height of the stack where each box can be placed on top of another according to the given rule. The height of a stack is defined as the total number of boxes in the stack. -----Input:----- - First line will contain N which represents the number of boxes. - Second line will contain N integers representing the weight of each box. -----Output:----- Maximum height of the stack. -----Constraints----- - 1 leq N leq 10^5 - 1 leq text{weight of each box} leq 10^9 -----Sample Input 1:----- 6 4 3 1 2 5 6 -----Sample Output 1:----- 4 -----Sample Input 2:----- 5 5 4 3 2 1 -----Sample Output 2:----- 5 -----EXPLANATION:----- In the first sample, the boxes can be stacked as follows: [1, 2, 3, 4] or [1, 3, 4, 6], both resulting in a stack height of 4. In the second sample, all boxes can be placed on top of each other: [1, 2, 3, 4, 5], resulting in a stack height of 5.","solution":"def max_stack_height(N, weights): Determine the maximum height of the stack where each box can be placed on top of another according to the given rule. Parameters: N (int): The number of boxes. weights (List[int]): The weight of each box. Returns: int: The maximum height of the stack. # Sort weights in non-decreasing order weights.sort() # Initialize the stack height max_height = 1 # Traverse through the sorted weights for i in range(1, N): if weights[i - 1] <= weights[i]: max_height += 1 return max_height"},{"question":"A software company is developing a robotic vacuum cleaner. The robot moves on a 2D grid, where each cell can be either cleanable or a wall. The robot starts in a specific cell and must clean all reachable cleanable cells while avoiding walls. The robot can move in four directions: up, down, left, and right. However, the robot\'s battery life requires that it always takes the shortest path to clean all reachable cells. If there are multiple shortest paths, the robot should prioritize moving up, then right, then down, then left. Your task is to write a program that determines the sequence of moves the robot should take to clean all reachable cells. Input The first line of the input contains two positive integers, n and m, indicating the number of rows and columns of the grid. The subsequent n lines each contain m characters, representing the grid. A cell can be one of the following: - \'.\' (cleanable cell) - \'#\' (wall) - \'S\' (starting position of the robot) Output Output a string representing the sequence of moves the robot should take to clean all reachable cells. Use \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. Example Input 4 4 S... .#.. ..#. .... Output RRRDDDLLLUURR Note: The output sequence may vary based on multiple valid shortest paths. Any correct sequence that cleans all reachable cells is acceptable.","solution":"from collections import deque MOVE_UP = \'U\' MOVE_DOWN = \'D\' MOVE_LEFT = \'L\' MOVE_RIGHT = \'R\' DIR_VECTORS = [(0, 1, MOVE_RIGHT), (1, 0, MOVE_DOWN), (0, -1, MOVE_LEFT), (-1, 0, MOVE_UP)] def bfs_cleaning_route(n, m, grid, start): queue = deque([start]) visited = set() visited.add(start) moves = [] paths = {start: \\"\\"} while queue: x, y = queue.popleft() for dx, dy, move in DIR_VECTORS: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != \'#\': visited.add((nx, ny)) queue.append((nx, ny)) paths[(nx, ny)] = paths[(x, y)] + move return \\"\\".join(paths[(i, j)] for i in range(n) for j in range(m) if grid[i][j] == \'.\' and (i, j) in visited) def cleaning_robot_moves(n, m, grid): start = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) break if start: break return bfs_cleaning_route(n, m, grid, start)"},{"question":"You are given a list of integers. Each integer appears twice except for one or two numbers that appear only once. Determine if there is one number that appears only once, or two such numbers. If there is one unique number, return it. If there are two unique numbers, return them in increasing order. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of integers in the list. The second line contains n integers (1 le a_i le 10^9) — the integers in the list. It is guaranteed that all integers appear twice except for one or two integers that appear only once. -----Output----- If there is one number that appears only once, print that integer. If there are two such numbers, print them in increasing order separated by a single space. -----Examples----- Input 7 2 3 2 4 4 5 3 Output 5 Input 8 1 2 3 4 2 1 5 3 Output 4 5 -----Note----- In the first example, the number 5 appears only once in the list, while all other numbers appear exactly twice. In the second example, the numbers 4 and 5 each appear only once in the list, while all other numbers appear exactly twice. Therefore, the output is 4 5.","solution":"def find_unique_numbers(n, lst): Function to find the unique number or numbers in the given list. Parameters: n (int): The number of integers in the list. lst (list of int): The list of integers. Returns: int, or tuple of int: Returns the unique number or numbers in the list. from collections import Counter count = Counter(lst) unique_numbers = [number for number, freq in count.items() if freq == 1] if len(unique_numbers) == 1: return unique_numbers[0] elif len(unique_numbers) == 2: return tuple(sorted(unique_numbers)) else: raise ValueError(\\"The input list does not comply with the problem constraints.\\")"},{"question":"Maria is planning a road trip across different cities and wants to plan her stops accordingly. She has placed certain gas stations along the route, each one having a limited amount of fuel. Maria starts her journey with a full tank and can refuel at any gas station she encounters. Write a program that determines the minimum number of stops Maria must make to reach her destination without running out of fuel. Assume Maria\'s car consumes 1 unit of fuel per kilometer and she cannot travel without fuel. ------ Input Format ------ - The first line contains an integer N - the number of gas stations. - The second line contains N integers representing the distances of each gas station from the starting point in increasing order. - The third line contains N integers representing the amount of fuel each gas station can provide. - The fourth line contains a single integer D - the total distance to the destination. - The fifth line contains a single integer F - the fuel capacity of Maria\'s car. ------ Output Format ------ Output a single integer - the minimum number of stops needed to reach the destination. If it’s not possible to reach the destination, output -1. ------ Constraints ------ 0 ≤ N ≤ 100 1 ≤ D ≤ 10^4 1 ≤ F ≤ 500 1 ≤ text{distance of each gas station} le D 1 ≤ text{fuel provided by each gas station} ≤ 500 ------ Sample Input 1 ------ 4 10 20 30 40 10 20 5 30 50 20 ------ Sample Output 1 ------ 2 ------ Explanation 1 ------ Maria starts with a fuel capacity of 20 units. - She travels to the first gas station (distance 10), consuming 10 units of fuel and refuels 10 units, bringing her total to 20 units again. - She travels to the second gas station (distance 20), consuming another 10 units of fuel and refuels 20 units, bringing her total to 30 units. - Even though she can stop at the third gas station (distance 30), she already has enough fuel to reach the destination without running out. - Finally, she travels the remaining 20 units of distance to reach her destination. The minimum number of stops required is 2. ------ Sample Input 2 ------ 3 15 25 35 5 10 10 60 30 ------ Sample Output 2 ------ -1 ------ Explanation 2 ------ Maria starts with a fuel capacity of 30 units. - She can reach the first gas station (distance 15), consuming 15 units of fuel and refuels 5 units, bringing her total to 20 units. - She travels to the second gas station (distance 25), consuming another 10 units of fuel and refuels 10 units, bringing her total to 20 units. - She then travels towards the third gas station (distance 35), but she runs out of fuel before she can reach it. Since Maria cannot reach her destination, the output is -1.","solution":"import heapq def min_stops_to_destination(N, distances, fuels, D, F): Returns the minimum number of stops needed to reach the destination. if F >= D: return 0 max_heap = [] stops = 0 current_pos = 0 current_fuel = F for i in range(N): next_pos = distances[i] fuel_at_station = fuels[i] while current_fuel < next_pos - current_pos: if not max_heap: return -1 current_fuel += -heapq.heappop(max_heap) stops += 1 current_fuel -= (next_pos - current_pos) current_pos = next_pos heapq.heappush(max_heap, -fuel_at_station) while current_fuel < D - current_pos: if not max_heap: return -1 current_fuel += -heapq.heappop(max_heap) stops += 1 return stops"},{"question":"Heidi has decided to open a new flower shop directly in the city center. To attract customers, she wants to display the prices of all flower types available with a special offer: every i-th type of flower will have a 20% discount. Additionally, Heidi wants to ensure that the final displayed price of any flower is rounded to the nearest integer. She needs your help to write a program that will read the original prices of the flowers and output the final prices after the discount where applicable. Input The first line contains an integer n (1 ≤ n ≤ 100) - the number of different flower types. The second line contains n space-separated integers representing the original prices of each flower type, p_i (1 ≤ p_i ≤ 1000). Output Output a single line with n space-separated integers representing the final prices after applying the discount and rounding to the nearest integer. Examples Input 5 100 200 300 400 500 Output 100 160 300 320 500 Input 3 150 275 900 Output 150 220 900 Note In the first example, the 2nd and 4th flower prices have been discounted and then rounded. In the second example, only the 2nd flower price has been discounted and rounded.","solution":"def apply_discounts(n, prices): Applies a 20% discount to every second price in the list and rounds to the nearest integer. Parameters: n (int): The number of different flower types. prices (list): The original prices of each flower type. Returns: list: The final prices after applying the discount and rounding. final_prices = [] for i in range(n): price = prices[i] if (i + 1) % 2 == 0: # Every 2nd price needs the discount discounted_price = price * 0.8 final_price = round(discounted_price) else: final_price = price final_prices.append(final_price) return final_prices # Example usage: # n = 5 # prices = [100, 200, 300, 400, 500] # print(apply_discounts(n, prices)) # Output should be [100, 160, 300, 320, 500]"},{"question":"Given a positive integer N, calculate the minimum number of perfect square numbers (e.g., 1, 4, 9, 16, ...) which sum to N. -----Input----- - The input contains a single integer N (1 leq N leq 10000). -----Output----- - Output the minimum number of perfect square numbers which sum to N. -----Examples----- Sample Input: 12 Sample Output: 3 Explanation: 12 = 4 + 4 + 4 Sample Input: 13 Sample Output: 2 Explanation: 13 = 4 + 9","solution":"def numSquares(n): Returns the minimum number of perfect square numbers which sum to n. if n < 2: return n squares = [] i = 1 while i * i <= n: squares.append(i * i) i += 1 toCheck = {n} level = 0 while toCheck: level += 1 nextCheck = set() for x in toCheck: for y in squares: if x == y: return level if x < y: break nextCheck.add(x - y) toCheck = nextCheck return level"},{"question":"The kingdom of Asyncum has a new fascination with prime numbers. The citizens have a peculiar interest in creating interesting sequences from primes. Recently, they started generating sequences where each element is the sum of the first k prime numbers. Given an integer n, Asyncum wants to verify if a given number x can be one of the elements in these sequences. Your task is to write a function that determines if x can be written as the sum of the first k primes for some k. If it is possible, find the smallest possible k such that the sum of the first k prime numbers equals x. -----Input----- - The first line contains a single integer n (1 leq n leq 10^6) — the maximum possible value of x. - The second line contains a single integer x (1 leq x leq n). -----Output----- - Output the smallest integer k for which the sum of the first k prime numbers equals x. - If no such k exists, output -1. -----Examples----- Input 20 17 Output 4 Input 100 41 Output 6 Input 50 30 Output -1 -----Note----- In the first example, the sequence of the first sums of primes is [2, 5, 10, 17]. The number 17 appears as the sum of the first 4 prime numbers (2, 3, 5, 7). In the second example, the sequence of the first sums of primes is [2, 5, 10, 17, 28, 41]. The number 41 appears as the sum of the first 6 prime numbers (2, 3, 5, 7, 11, 13). In the third example, the number 30 is not a sum of the first k prime numbers for any k.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_k_for_sum_x(n, x): primes = [] i = 2 while sum(primes) <= n: if is_prime(i): primes.append(i) if sum(primes) == x: return len(primes) i += 1 return -1"},{"question":"A company wants to distribute M candies among N employees in such a way that no employee gets zero candies and the distribution is balanced. A balanced distribution occurs when the absolute difference between the maximum and minimum candies given to any employee does not exceed 1. The company can perform the following operations: - Add one candy. - Remove one candy. - Add one employee. - Remove one employee (if the number of employees is greater than 1). Your task is to find the minimum number of operations needed to achieve the balanced distribution of candies. Input format: The only line of the input contains two space-separated integers M and N. Output format: Output the single integer -- the minimum number of operations. Constraints: 1 ≤ M, N ≤ 10^5 M, N ≤ 50 in test data worth 33% of all points SAMPLE INPUT 52 10 SAMPLE OUTPUT 2","solution":"def min_operations_to_balance(M, N): if M < N: # If candies are less than employees, all employees can\'t get at least one candy. return N - M # M >= N scenario r = M % N return min(r, N - r)"},{"question":"You are given an array of N integers (1 ≤ N ≤ 10^5). You can perform the following operation on the array any number of times: Choose any subarray and reverse it. Determine the lexicographically smallest array you can obtain by applying the above operation multiple times. Input The input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print the lexicographically smallest array obtainable. Constraints * 1≤N≤10^5 * 1≤a_i≤10^9 Examples Input 5 3 1 4 1 5 Output 1 1 3 4 5 Input 4 9 8 7 6 Output 6 7 8 9","solution":"def lexicographically_smallest_array(arr): This function returns the lexicographically smallest array obtainable by reversing any subarray any number of times. # The smallest lexicographical array is the sorted version of the array return sorted(arr) # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:])) result = lexicographically_smallest_array(arr) print(\\" \\".join(map(str, result)))"},{"question":"Given an array of positive integers `arr[]` with length `n` and an integer `target`, determine if there are three distinct elements a, b, c in the array such that a + b + c == target. Return true if there is such a triplet and false otherwise. Example 1: Input: arr = [1, 4, 45, 6, 10, 8], target = 22 Output: true Explanation: The triplet (4, 8, 10) in the array sums up to 22. Example 2: Input: arr = [1, 2, 4, 3, 6], target = 10 Output: true Explanation: The triplet (1, 3, 6) in the array sums up to 10. Example 3: Input: arr = [1, 2, 3, 4, 5], target = 15 Output: false Explanation: There are no such triplets in the array that sum up to 15. Constraints: - 1 <= arr.length <= 1000 - 1 <= arr[i] <= 10^6 - 1 <= target <= 3 * 10^6","solution":"def find_triplet(arr, target): Determines if there are three distinct elements a, b, c in the array such that a + b + c == target. Parameters: arr (list): List of positive integers. target (int): Target sum. Returns: bool: True if such a triplet exists, otherwise False. n = len(arr) arr.sort() for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Determine if a string of lowercase characters can be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward. Given a string s, check if any permutation of the string is a palindrome and return True if such a permutation exists, otherwise return False. Example: s=text{\'carrace\'} The string \'carrace\' can be rearranged to \'racecar\', which is a palindrome. Hence the function should return True. s=text{\'daily\'} The string \'daily\' cannot be rearranged to form a palindrome. Hence the function should return False. Function Description Complete the canFormPalindrome function in the editor below. canFormPalindrome has the following parameter(s): string s: a string to check Returns boolean: True if a permutation of the string can form a palindrome, otherwise False Input Format A single string, boldsymbol{mathrm{~S~}}. Constraints 1leq text{length of} sleq1000 Sample Input 0 civic Sample Output 0 True Explanation 0 The string \'civic\' is already a palindrome, so the function returns True. Sample Input 1 ivicc Sample Output 1 True Explanation 1 The string \'ivicc\' can be rearranged to \'civic\', which is a palindrome. Sample Input 2 hello Sample Output 2 False Explanation 2 There is no permutation of the string \'hello\' that can form a palindrome. Sample Input 3 aabbccdd Sample Output 3 True Explanation 3 The string \'aabbccdd\' can be rearranged to \'abcdedcba\' or \'ddccbbaa\', which are both palindromes.","solution":"def canFormPalindrome(s): Determines if a string can be rearranged to form a palindrome. Args: s (str): a string to check Returns: bool: True if the string can be rearranged to form a palindrome, otherwise False from collections import Counter # Count the frequency of each character char_count = Counter(s) # To form a palindrome, at most one character can have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # If odd_count is more than 1, it cannot form a palindrome return odd_count <= 1"},{"question":"You are given an array of integers representing calorie intake over a number of days. Your task is to determine the contiguous subarray within this array that has the maximum sum, which represents the period with the most calorie consumption. ------ Input ------ There are several test cases (ten at most), each formed as follows: The first line contains a positive integer N (N ≤ 10^5) indicating the number of days. The second line contains N space-separated integers representing the calorie intake on each day (-10^4 ≤ calorie intake ≤ 10^4). The input is ended with N = 0. ------ Output ------ For each test case, output an integer which is the maximum sum of contiguous subarray found. ----- Sample Input 1 ------ 5 1 -2 3 10 -4 7 -3 4 -1 2 1 -5 4 0 ----- Sample Output 1 ------ 13 6","solution":"def max_contiguous_subarray_sum(calories): Returns the maximum sum of a contiguous subarray using Kadane\'s Algorithm. max_sum = current_sum = calories[0] for calorie in calories[1:]: current_sum = max(calorie, current_sum + calorie) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an N x N matrix filled with integers. Write a function to rotate the matrix 90 degrees clockwise. ------ Input Format ------ - First line contains a single integer T, the number of test cases. Then the test cases follow. - Each test case contains N+1 lines of input. - The first line of each test case contains an integer N, the size of the matrix. - The next N lines each contain N integers, representing the matrix. ------ Output Format ------ For each test case, output the rotated matrix in N lines, where each line contains N integers separated by a space. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 100 ------ Sample Input 1 ------ 2 3 1 2 3 4 5 6 7 8 9 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ------ Sample Output 1 ------ 7 4 1 8 5 2 9 6 3 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 ------ Explanation 1 ------ Test case 1: The given matrix 1 2 3 4 5 6 7 8 9 is rotated 90 degrees clockwise to become: 7 4 1 8 5 2 9 6 3 Test case 2: The given matrix 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 is rotated 90 degrees clockwise to become: 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given N x N matrix 90 degrees clockwise. N = len(matrix) rotated_matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N-1-i] = matrix[i][j] return rotated_matrix def solve_input(input_data): lines = input_data.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 results = [] for _ in range(T): N = int(lines[index]) index += 1 matrix = [] for _ in range(N): row = list(map(int, lines[index].strip().split())) index += 1 matrix.append(row) rotated_matrix = rotate_matrix_90_clockwise(matrix) results.append(rotated_matrix) return results def format_output(results): output_lines = [] for matrix in results: output_lines.append(\'n\'.join(\' \'.join(map(str, row)) for row in matrix)) return \'n\'.join(output_lines) def rotate_matrices(input_data): results = solve_input(input_data) return format_output(results) # Example usage: input_data = 2 3 1 2 3 4 5 6 7 8 9 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 output = rotate_matrices(input_data) print(output)"},{"question":"Given an undirected graph with `n` nodes labeled from `1` to `n` and `m` edges, the task is to determine if the graph contains a simple cycle. A simple cycle is a cycle with no repeated nodes or edges. -----Input----- The first line of the input file contains two integers `n` and `m`, the number of nodes and edges in the graph `(1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000)`. Each of the next `m` lines contains two integers `u` and `v` `1 ≤ u, v ≤ n, u ≠ v`, representing an edge between nodes `u` and `v`. -----Output----- Output \\"YES\\" if the graph contains a simple cycle, otherwise output \\"NO\\". -----Examples----- Input 3 3 1 2 2 3 3 1 Output YES Input 4 3 1 2 2 3 3 4 Output NO Input 5 5 1 2 2 3 3 4 4 5 5 1 Output YES -----Note----- In the first example, the graph contains the simple cycle 1-2-3-1. In the second example, there is no simple cycle as there is no way to return to the starting node without repeating edges. In the third example, the graph contains the simple cycle 1-2-3-4-5-1.","solution":"def contains_simple_cycle(n, m, edges): from collections import defaultdict # Build the graph using adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # To keep track of visited nodes visited = [False] * (n + 1) def is_cyclic(v, visited, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if is_cyclic(neighbor, visited, v): return True elif parent != neighbor: return True return False for i in range(1, n + 1): if not visited[i]: if is_cyclic(i, visited, -1): return \\"YES\\" return \\"NO\\""},{"question":"The world-famous library near your town has a very peculiar lending system. Each book has a unique lending ID and certain lending rules associated with it. For ease of management, the library uses an algorithm to analyze book lending patterns and optimize the lending strategy. Suppose that each book lending ID can be represented as a string of digits (0-9). The library is interested in finding the \\"special lending ID\\". A special lending ID is defined as an ID that is both a palindrome (reads the same forward and backward) and whose length is an even number. Write a function `is_special_lending_id` that takes a string `lending_id` as input and returns `True` if it is a special lending ID and `False` otherwise. Assume all inputs are valid alphanumeric strings of arbitrary length. Examples: is_special_lending_id(\\"123321\\") 123321 is a palindrome and its length is 6 (even), so returns True is_special_lending_id(\\"12321\\") 12321 is a palindrome but its length is 5 (odd), so returns False is_special_lending_id(\\"124421\\") 124421 is a palindrome and its length is 6 (even), so returns True is_special_lending_id(\\"123456\\") 123456 is not a palindrome but its length is 6 (even), so returns False is_special_lending_id(\\"1233321\\") 1233321 is not a palindrome and its length is 7 (odd), so returns False Enjoy coding!","solution":"def is_special_lending_id(lending_id): Returns True if lending_id is a palindrome and its length is even, else returns False. # Check if the ID is a palindrome if lending_id != lending_id[::-1]: return False # Check if the length of the ID is even if len(lending_id) % 2 != 0: return False return True"},{"question":"Design a `SumOfNumbers` class to support the following methods: 1. `add(int num)` Adds the number `num` to the back of the current list of numbers. 2. `getSum(int k)` Returns the sum of the last `k` numbers in the current list. You can assume that the current list always has at least `k` numbers. At any time, the sum of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing. Example: Input [\\"SumOfNumbers\\",\\"add\\",\\"add\\",\\"add\\",\\"add\\",\\"add\\",\\"getSum\\",\\"getSum\\",\\"getSum\\",\\"add\\",\\"getSum\\"] [[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]] Output [null,null,null,null,null,null,9,11,14,null,12] Explanation SumOfNumbers sumOfNumbers = new SumOfNumbers(); sumOfNumbers.add(3); // [3] sumOfNumbers.add(0); // [3,0] sumOfNumbers.add(2); // [3,0,2] sumOfNumbers.add(5); // [3,0,2,5] sumOfNumbers.add(4); // [3,0,2,5,4] sumOfNumbers.getSum(2); // return 9. The sum of the last 2 numbers is 5 + 4 = 9 sumOfNumbers.getSum(3); // return 11. The sum of the last 3 numbers is 2 + 5 + 4 = 11 sumOfNumbers.getSum(4); // return 14. The sum of the last 4 numbers is 0 + 2 + 5 + 4 = 11 sumOfNumbers.add(8); // [3,0,2,5,4,8] sumOfNumbers.getSum(2); // return 12. The sum of the last 2 numbers is 4 + 8 = 12 Constraints: There will be at most 40000 operations considering both add and getSum. 0 <= num <= 100 1 <= k <= 40000","solution":"class SumOfNumbers: def __init__(self): Initialize your data structure here. self.numbers = [] def add(self, num: int): Adds the number num to the back of the current list of numbers. self.numbers.append(num) def getSum(self, k: int) -> int: Returns the sum of the last k numbers in the current list. return sum(self.numbers[-k:])"},{"question":"Given a list of integers, find the starting and ending position of a given target value. If the target is not found in the list, return [-1, -1]. The list is sorted in ascending order, and you must use a binary search algorithm to achieve an O(log n) time complexity for this task. Example: find_target_range([5,7,7,8,8,10], 8) => [3, 4] find_target_range([5,7,7,8,8,10], 6) => [-1, -1] find_target_range([1,2,3,4,4,4,5,6], 4) => [3, 5] find_target_range([], 8) => [-1, -1] The output should be in the form of a list containing two integers representing the starting and ending positions of the target value. If the target is not found, return [-1, -1].","solution":"def find_target_range(nums, target): def find_leftmost(): left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] < target: left = mid + 1 else: right = mid - 1 return left def find_rightmost(): left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] <= target: left = mid + 1 else: right = mid - 1 return right left_idx = find_leftmost() right_idx = find_rightmost() if left_idx <= right_idx and left_idx < len(nums) and nums[left_idx] == target: return [left_idx, right_idx] else: return [-1, -1]"},{"question":"You are given a list of unique integers. Create an algorithm to find all unique triplets in the list which gives the sum of zero. Each triplet should be represented as an integer array [num1, num2, num3] where num1 <= num2 <= num3. ------ Input: ------ First line contains an integer T, representing the number of test cases. Next 2T lines are as follows: - For each test case, the first line contains an integer N, the number of integers in the list. - The following line contains N space-separated integers, representing the list of integers. ------ Output: ------ For each test case, output all unique triplets in the list that sum to zero. Each triplet should be output on a new line, with triplets for a single test case separated by a blank line. Triplets should be in non-descending order. If there are no such triplets, output \\"No Triplets Found\\" for that test case. ------ Constraints: ------ 1 ≤ T ≤ 10 3 ≤ N ≤ 10^{3} −10^5 ≤ A[i] ≤ 10^5 ----- Sample Input 1 ------ 2 5 -1 0 1 2 -1 -4 3 1 -1 -1 ----- Sample Output 1 ------ -1 -1 2 -1 0 1 No Triplets Found","solution":"def find_three_sum_triplets(test_cases): def three_sum(nums): nums.sort() n = len(nums) triplets = [] for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return triplets results = [] for test_case in test_cases: triplets = three_sum(test_case) if not triplets: results.append(\\"No Triplets Found\\") else: results.append(\'n\'.join(\' \'.join(map(str, triplet)) for triplet in triplets)) return results"},{"question":"Design a function called `encodeString` that takes a string as input and replaces each character with a pair of elements: the number of consecutive occurrences of the character followed by the character itself. The function should handle both uppercase and lowercase characters distinctly and ignore non-alphabetic characters. Example: `encodeString(\\"aaBBccAA\\")` - \\"a\\" appears twice consecutively -> becomes `\\"2a\\"` - \\"B\\" appears twice consecutively -> becomes `\\"2B\\"` - \\"c\\" appears twice consecutively -> becomes `\\"2c\\"` - \\"A\\" appears twice consecutively -> becomes `\\"2A\\"` Hence, the output string will be `\\"2a2B2c2A\\"`. Similarly, `encodeString(\\"aAAAaaBb\\")` will return `\\"1a3A2a1B1b\\"` Return `\\"\\"` for empty or nil input strings.","solution":"def encodeString(s): Encodes the input string by replacing each character with a pair of elements: the number of consecutive occurrences of the character followed by the character itself. :param s: Input string :type s: str :return: Encoded string :rtype: str if not s: return \\"\\" encoded_string = \\"\\" i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 encoded_string += str(count) + s[i] i += 1 return encoded_string"},{"question":"A library management system keeps track of books borrowed by various members. Each member can borrow up to 5 books at a time. Given a sequence of operations, your task is to simulate the borrowing and returning of books. Each operation is either \\"borrow BookID MemberID\\" or \\"return BookID MemberID\\". The system should ensure that: - A book can only be borrowed if it is not currently borrowed by anyone else. - A member can only borrow a book if they have 4 or fewer books already borrowed. - A book can only be returned by the member who borrowed it. -----Input:----- - First line will contain N, the number of operations. - Each of the next N lines contains a single operation, which can be either \\"borrow BookID MemberID\\" or \\"return BookID MemberID\\". -----Output:----- For each operation, output either \\"Success\\" if the operation was successful, or an appropriate error message: - \\"Already borrowed\\" if attempting to borrow a book that is already borrowed. - \\"Limit reached\\" if a member attempts to borrow more than 5 books. - \\"Not borrowed\\" if attempting to return a book that has not been borrowed. - \\"Wrong member\\" if attempting to return a book that was not borrowed by the given member. -----Constraints:----- 1 leq N leq 1000 BookID and MemberID are strings consisting of up to 20 alphanumeric characters. -----Sample Input:----- 6 borrow Book1 Member1 borrow Book2 Member2 borrow Book1 Member3 return Book1 Member2 borrow Book1 Member1 return Book1 Member1 -----Sample Output:----- Success Success Already borrowed Wrong member Success Success -----EXPLANATION:----- For operation 1, Member1 successfully borrows Book1. For operation 2, Member2 successfully borrows Book2. For operation 3, Book1 is already borrowed by Member1. For operation 4, Member2 cannot return Book1 because Member1 borrowed it. For operation 5, Member1 successfully borrows Book1 again after returning it. For operation 6, Member1 successfully returns Book1.","solution":"def library_management(n, operations): Simulates the borrowing and returning of books in a library. :param n: int, the number of operations :param operations: list of str, each containing an operation (\\"borrow BookID MemberID\\" or \\"return BookID MemberID\\") :return: list of str, results of each operation borrowed_books = {} member_books_count = {} results = [] for operation in operations: operation_parts = operation.split() action = operation_parts[0] book_id = operation_parts[1] member_id = operation_parts[2] if action == \\"borrow\\": if book_id in borrowed_books: results.append(\\"Already borrowed\\") elif member_books_count.get(member_id, 0) >= 5: results.append(\\"Limit reached\\") else: borrowed_books[book_id] = member_id member_books_count[member_id] = member_books_count.get(member_id, 0) + 1 results.append(\\"Success\\") elif action == \\"return\\": if book_id not in borrowed_books: results.append(\\"Not borrowed\\") elif borrowed_books[book_id] != member_id: results.append(\\"Wrong member\\") else: member_books_count[member_id] -= 1 del borrowed_books[book_id] results.append(\\"Success\\") return results"},{"question":"Vasya and Petya are studying at the BSU (Byteland State University). During one of the courses, their professor presented them with an interesting problem involving trees (a type of graph). Each tree is an undirected graph where any two vertices are connected by exactly one path. The professor gave them a rooted tree and asked them to calculate the maximum sum of values from root to any leaf node. A rooted tree is represented by its nodes, where each node has an integer value and is connected through edges. The task is to calculate the maximum sum of node values from the root node to any leaf node. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of nodes in the tree. The second line contains n space-separated integers v_i (1 ≤ v_i ≤ 10^4), where v_i is the value of the i-th node. Each of the next n-1 lines contains two integers a and b (1 ≤ a, b ≤ n), denoting an edge between the nodes a and b. -----Output----- Print one integer — the maximum sum of values from the root node to any leaf node. -----Examples----- Input 5 3 2 1 10 4 1 2 1 3 2 4 2 5 Output 15 Input 3 1 4 5 1 2 1 3 Output 6 Input 1 5 Output 5 -----Note----- In the first sample, the tree can be visualized as follows: 1(3) / 2(2) 3(1) / 4(10) 5(4) The maximum sum path is 3 -> 2 -> 4, which equals 3 + 2 + 10 = 15. In the second sample, the tree can be visualized as follows: 1(1) / 2(4) 3(5) The maximum sum path is 1 -> 3, which equals 1 + 5 = 6.","solution":"def max_sum_root_to_leaf(n, values, edges): from collections import defaultdict, deque # Create adjacency list for the tree tree = defaultdict(list) for a, b in edges: tree[a].append(b) tree[b].append(a) # Use BFS to find the maximum sum path from root to leaf queue = deque([(1, values[0])]) # Start from root node (index 1) with its value max_sum = 0 while queue: node, current_sum = queue.popleft() is_leaf = True for neighbor in tree[node]: if values[neighbor - 1] != -1: # If this node has not been visited is_leaf = False queue.append((neighbor, current_sum + values[neighbor - 1])) if is_leaf: max_sum = max(max_sum, current_sum) values[node - 1] = -1 # Mark this node as visited (by setting its value to -1) return max_sum"},{"question":"You are an analyst for a company that manages rooftop gardens. The company monitors soil moisture levels in different sections of the garden using sensors that take periodic measurements. Your task is to determine, for each section, whether the soil is consistently within an acceptable moisture range over a given period. A section is considered to have acceptable moisture levels if all its readings fall between a predefined minimum and maximum threshold inclusive. Write a program that reads the number of sections, the acceptable moisture range (minimum and maximum), and the moisture readings for each section. The program will then output “STABLE” if all sections have readings within the acceptable range, otherwise, it will output “UNSTABLE”. -----Notes----- - The moisture readings are integers. - The acceptable range includes the minimum and maximum values. - At least one reading is done for each section. -----Constraints----- - 1 ≤ S ≤ 100 (number of sections) - 1 ≤ R ≤ 100 (number of readings per section) - 0 ≤ Mi, Si_j ≤ 1000 (moisture range values and sensor readings) -----Input----- Input is given from Standard Input in the following format: S R Min Max M_1_1 M_1_2 … M_1_R M_2_1 M_2_2 … M_2_R ... M_S_1 M_S_2 … M_S_R -----Output----- Print “STABLE” if all sections have readings within the acceptable range, otherwise print “UNSTABLE”. -----Sample Input----- 3 4 10 50 12 48 30 25 10 20 25 45 11 9 30 40 -----Sample Output----- UNSTABLE The third section has a reading (9) that falls outside the acceptable range (10 to 50), so the overall status is UNSTABLE.","solution":"def check_moisture_levels(sections, readings, min_threshold, max_threshold, data): Check if all sections have readings within the acceptable moisture range. Args: sections (int): Number of sections. readings (int): Number of readings per section. min_threshold (int): Minimum acceptable moisture level. max_threshold (int): Maximum acceptable moisture level. data (list of list of int): Moisture readings for each section. Returns: str: \\"STABLE\\" if all sections are within the acceptable range, \\"UNSTABLE\\" otherwise. for section in data: for reading in section: if reading < min_threshold or reading > max_threshold: return \\"UNSTABLE\\" return \\"STABLE\\""},{"question":"In a distant future, there exists a network of teleportation points in a city. Each teleportation point is connected to several other points with one-way teleportation paths, and each connection has a travel time associated with it. Given the city’s teleportation network, you are tasked with calculating the minimum travel time for a traveler to reach a specific destination from a given starting teleportation point. If it is not possible for the traveler to reach the destination, you should indicate that as well. The city has `n` teleportation points and `m` one-way teleportation paths. The teleportation points are numbered from 1 to n. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) - the number of teleportation points and the number of one-way paths between them. Then, m lines follow, each containing three integers u, v, t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000) - indicating that there is a one-way path from teleportation point u to teleportation point v with a travel time of t. The last line contains two integers s and d (1 ≤ s, d ≤ n) - the starting and the destination teleportation points. Output Print a single integer representing the minimum travel time required for the traveler to reach the destination teleportation point `d` from the starting teleportation point `s`. If the destination cannot be reached from the starting point, print `-1`. Examples Input 5 6 1 2 3 1 3 2 2 4 4 3 4 1 4 5 6 3 5 8 1 5 Output 9 Input 3 2 1 2 4 2 3 5 3 1 Output -1 Note In the first example, the traveler can use the paths 1->3 (time 2) and 3->4 (time 1) and 4->5 (time 6) for a total travel time of 2+1+6=9. In the second example, there is no way to travel from teleportation point 3 to teleportation point 1, so the output is `-1`.","solution":"import heapq def minimum_travel_time(n, m, paths, s, d): # Create the graph graph = [[] for _ in range(n + 1)] for u, v, t in paths: graph[u].append((v, t)) # Dijkstra\'s algorithm to find the shortest path def dijkstra(start, end): min_time = [float(\'inf\')] * (n + 1) min_time[start] = 0 priority_queue = [(0, start)] while priority_queue: current_time, u = heapq.heappop(priority_queue) if current_time > min_time[u]: continue for v, travel_time in graph[u]: time = current_time + travel_time if time < min_time[v]: min_time[v] = time heapq.heappush(priority_queue, (time, v)) return min_time[end] result = dijkstra(s, d) return result if result != float(\'inf\') else -1"},{"question":"A gardener has a rectangular garden with dimensions N x M. He wants to plant flowers in such a way that every cell in the garden is planted with exactly one flower. However, there is a special spot located at (X, Y) where he wants to plant a unique type of flower. The gardener wants to know how many different configurations of planting are possible while respecting the special spot constraint. Consider that there are a total of K unique types of flowers available to the gardener. ------ Input ------ The first line contains an integer T, the number of test cases. Each test case is described by a single line containing five integers N, M, X, Y, and K. ------ Output ------ For each testcase, output one integer on a separate line representing the number of different planting configurations possible. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 1 ≤ X ≤ N 1 ≤ Y ≤ M 1 ≤ K ≤ 100 ----- Sample Input 1 ------ 2 3 3 2 2 3 2 2 1 2 4 ----- Sample Output 1 ------ 5832 576","solution":"def number_of_configurations(N, M, X, Y, K): This function calculates the number of configurations possible for planting flowers while respecting the special spot constraint. total_cells = N * M return K ** total_cells def process_test_cases(test_cases): results = [] for case in test_cases: N, M, X, Y, K = case results.append(number_of_configurations(N, M, X, Y, K)) return results"},{"question":"Create a function called `first_digit_to_appear` that takes a positive integer `n` (1 <= n <= 10000) and returns the first digit (from 0-9) that appears in the sequence of powers of `n`, starting with `n^1`. For instance, if `n = 3`, the sequence of powers would be `3, 9, 27, 81, 243,...`. The first digit to appear in this sequence is `3`. If `n = 5`, the sequence will be `5, 25, 125,...` and the first digit to appear is `5`. Write your function such that if somehow, a digit never appears in the sequence, it returns `None`. Example: ```python print(first_digit_to_appear(2)) # Output should be 2 print(first_digit_to_appear(10)) # Output should be 1 ``` Function signature: ```python def first_digit_to_appear(n: int) -> int: # Your code here ``` Note: Each digit must be checked individually across the sequence of increasing powers to determine the first one to appear.","solution":"def first_digit_to_appear(n: int) -> int: Returns the first digit (0-9) that appears in the sequence of powers of n, starting with n^1. observed_digits = set() power = 1 while True: current_number = str(n ** power) for digit_char in current_number: digit = int(digit_char) if digit not in observed_digits: return digit power += 1"},{"question":"Helen is a hobbyist gardener who loves designing and tending to her rectangular garden. Her garden can be represented as an n times m grid, where each cell in the grid is either empty (denoted by `.`) or contains a flower (denoted by `*`). Helen wants to plant new flowers in such a way that no two flowers are in the same row or same column. Given the initial state of the garden, can you help Helen determine whether it is possible to place new flowers such that no two flowers are in the same row or column? If possible, output \\"YES\\". Otherwise, output \\"NO\\". -----Input----- The first line of the input contains two integers n and m (1 leq n, m leq 50) — the dimensions of the garden grid. Each of the next n lines contains m characters (`.` or `*`) representing the initial state of the garden. -----Output----- Output a single line containing either \\"YES\\" or \\"NO\\". -----Examples----- Input 1: 4 4 .*.. .... ..*. .... Output 1: YES Input 2: 3 3 .*. .*. .*. Output 2: NO Input 3: 2 5 ..*.. .*... Output 3: NO","solution":"def can_plant_new_flowers(n, m, garden): rows_with_flowers = set() cols_with_flowers = set() # Record the rows and columns that already have flowers for i in range(n): for j in range(m): if garden[i][j] == \'*\': rows_with_flowers.add(i) cols_with_flowers.add(j) # Check if we can plant a new flower such that no two flowers are in the same row or column for i in range(n): for j in range(m): if garden[i][j] == \'.\' and i not in rows_with_flowers and j not in cols_with_flowers: return \\"YES\\" return \\"NO\\""},{"question":"Olga loves playing with rectangles. She has a favorite rectangle with vertices at (0, 0), (0, y), (x, 0), and (x, y). Olga is also fascinated by the concept of reflection. Today, Olga challenges you to find the coordinates of a point P such that the point is inside the rectangle, and when reflected across both the x-axis and the y-axis, it results in a point Q that also lies inside the rectangle. Your task is to find such a point P (a, b) which satisfies the conditions. -----Input----- The input consists of two integers x and y ( 1 ≤ x, y ≤ 10^9). -----Output----- Print two integers a and b — the coordinates of the required point. -----Examples----- Input 10 5 Output 5 2 Input 24 10 Output 12 5","solution":"def find_reflection_point(x, y): Given the dimensions of the rectangle, return the coordinates (a, b) such that the point P (a, b) is inside the rectangle and when reflected across both the x-axis and y-axis results in a point Q that also lies inside the rectangle. Parameters: x (int): The length of the rectangle along the x-axis y (int): The height of the rectangle along the y-axis Returns: tuple: Coordinates of the point (a, b) inside the rectangle a = x // 2 b = y // 2 return (a, b)"},{"question":"In a 2-dimensional grid, you are given the coordinates of an origin point O and a rectangle. Your task is to determine if the rectangle contains the origin point or not. The rectangle\'s sides are parallel to the axes, and its vertices are given by coordinates (x_1, y_1) and (x_2, y_2). Input Format: - The first line contains mathbf{N}, the number of test cases. - Each test case contains four integers separated by spaces, representing (x_1, y_1, x_2, y_2). Output Format: - For each test case, print `YES` if the origin point (0,0) lies within or on the boundary of the rectangle; otherwise, print `NO`. Constraints: - 1 leq N leq 10^5 - -10^9 leq x_1, y_1, x_2, y_2 leq 10^9 Note: A rectangle\'s sides may be of zero length if the opposite vertices coincide. Sample Input: 3 -1 -1 1 1 2 2 4 4 0 -3 3 3 Sample Output: YES NO YES Explanation: - In the first case, the rectangle from (-1, -1) to (1, 1) contains the origin. - In the second case, the rectangle from (2, 2) to (4, 4) does not contain the origin. - In the third case, the rectangle from (0, -3) to (3, 3) contains the origin.","solution":"def does_rectangle_contain_origin(test_cases): results = [] for x1, y1, x2, y2 in test_cases: if min(x1, x2) <= 0 <= max(x1, x2) and min(y1, y2) <= 0 <= max(y1, y2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a database containing information about several employees in a company. Each employee has a unique ID and has information on the manager they report to. The database is represented as a tree structure with the CEO at the root node. The CEO does not report to anyone. Your task is to write a program to determine the manager at a given level above a specified employee. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of employees. - The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), meaning employee v reports directly to employee u. - The last line contains two integers e and k (1 ≤ e ≤ n, 0 ≤ k ≤ n-1), specifying the employee e and the level k above this employee you need to find the manager for. Output: - Print the ID of the manager at the level k above the employee e. - If there is no such manager, print -1. Example: Input: 7 1 2 1 3 2 4 2 5 3 6 3 7 5 2 Output: 1 Explanation: 1 (CEO) ├── 2 │ ├── 4 │ └── 5 └── 3 ├── 6 └── 7 Employee 5 reports to employee 2, who in turn reports to employee 1 (CEO). Hence, the manager 2 levels above employee 5 is 1.","solution":"def find_manager_at_level(n, reports, e, k): Function to determine the manager at a given level above a specified employee. :param n: Number of employees :param reports: List of tuples where each tuple (u, v) means employee v reports directly to employee u :param e: Specified employee :param k: Levels above the specified employee :return: The ID of the manager at the level k above the employee e or -1 if there is no such manager # Build the tree structure managers = {} for report in reports: u, v = report managers[v] = u current_employee = e while k > 0 and current_employee in managers: current_employee = managers[current_employee] k -= 1 return current_employee if k == 0 else -1 # Example usage: n = 7 reports = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)] e = 5 k = 2 print(find_manager_at_level(n, reports, e, k)) # Output should be: 1"},{"question":"A company\'s employees are given scores based on their performance in different projects. Each employee has taken part in some number of projects, and their scores for each project are listed in an array. Your task is to write a function `calculate_bonus` that accepts a dictionary where the keys represent employee names, and the values are lists of their scores from different projects. The function should calculate a bonus for each employee based on their scores and return a new dictionary where the keys are employee names, and the values are their bonuses. The bonus calculation is as follows: 1. For each project score that is greater than or equal to 90, the employee gets a bonus of 100. 2. For each project score that is between 80 and 89 (inclusive), the employee gets a bonus of 50. 3. For each project score that is between 70 and 79 (inclusive), the employee gets a bonus of 20. 4. Project scores below 70 do not contribute to the bonus. # Example Input: ```python { \\"Alice\\": [92, 85, 78, 88, 99], \\"Bob\\": [60, 70, 80, 90], \\"Charlie\\": [100, 60, 75, 85, 90] } ``` Output: ```python { \\"Alice\\": 320, \\"Bob\\": 170, \\"Charlie\\": 270 } ``` # Constraints - The input dictionary will have at least one employee and each employee will have at least one project score. - Project scores will be integers between 0 and 100 (inclusive). # Note Ensure that the final output dictionary maintains the same order of employees as the input dictionary.","solution":"def calculate_bonus(employees_scores): Calculate the bonus for each employee based on their project scores. Args: - employees_scores (dict): A dictionary where the keys are employee names and the values are lists of their scores from different projects. Returns: dict: A dictionary where the keys are employee names and the values are their bonuses. bonuses = {} for employee, scores in employees_scores.items(): bonus = 0 for score in scores: if score >= 90: bonus += 100 elif 80 <= score <= 89: bonus += 50 elif 70 <= score <= 79: bonus += 20 bonuses[employee] = bonus return bonuses"},{"question":"You are given a series of paired devices, each represented with a positive integer ID. Each device ID is paired with another device ID, indicating they belong to a single set. The problem is to determine the number of unique sets of devices. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) representing the number of device pairs. The next n lines each contain two space-separated integers a and b (1 ≤ a, b ≤ 10^9) representing a pair of device IDs. Output Print the number of unique sets of devices. Examples Input 3 1 2 3 4 2 3 Output 1 Input 4 1 2 3 4 5 6 7 8 Output 4 Note In the first example, the device pairs are (1, 2), (2, 3), and (3, 4). Devices 1, 2, 3, and 4 can be connected through their pairs, so they form a single set. In the second example, all device pairs are isolated and cannot be connected through their pairs, forming four unique sets.","solution":"def find_unique_sets(n, pairs): parent = {} def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY for a, b in pairs: if a not in parent: parent[a] = a if b not in parent: parent[b] = b union(a, b) unique_roots = {find(x) for x in parent} return len(unique_roots) # Example usage n = 3 pairs = [(1, 2), (3, 4), (2, 3)] print(find_unique_sets(n, pairs)) # Output: 1"},{"question":"Jane is building a magic square for her new art project. A magic square is an n x n grid filled with distinct integers such that the sum of the integers in each row, each column, and both main diagonals are the same. Jane has all the numbers but needs your help to validate her grid. Given an n x n grid, determine whether it is a magic square or not. Input - The first line contains an integer n (1 ≤ n ≤ 100) denoting the size of the grid. - The next n lines contain n integers each, representing the rows of the grid. Output - A single line containing \\"YES\\" if the grid is a magic square, otherwise \\"NO\\". Sample Input: 3 2 7 6 9 5 1 4 3 8 Output: YES Explanation The given 3x3 grid is a magic square because the sum of each row, each column, and both main diagonals are equal to 15. Input: 3 1 2 3 4 5 6 7 8 9 Output: NO Explanation The given 3x3 grid is not a magic square because the sums of the rows, columns, and diagonals are not all equal.","solution":"def is_magic_square(grid): Determine whether the given grid is a magic square. :param grid: List of lists representing the grid :return: \\"YES\\" if the grid is a magic square, otherwise \\"NO\\" n = len(grid) if n == 0: return \\"NO\\" # Calculate the target sum from the first row target_sum = sum(grid[0]) # Check sums of all rows for row in grid: if sum(row) != target_sum: return \\"NO\\" # Check sums of all columns for col in range(n): if sum(grid[row][col] for row in range(n)) != target_sum: return \\"NO\\" # Check sum of the main diagonal if sum(grid[i][i] for i in range(n)) != target_sum: return \\"NO\\" # Check sum of the secondary diagonal if sum(grid[i][n - 1 - i] for i in range(n)) != target_sum: return \\"NO\\" return \\"YES\\""},{"question":"Write a function ```compare_lists``` that takes two lists of integers ```list1``` and ```list2``` and returns a list of integers that are common in both lists without duplicates (i.e., the intersection of the two lists). Assume that each list may contain duplicate values, but the function should return each common integer only once. Examples: ```python compare_lists([1, 2, 2, 3], [3, 3, 4, 4, 2]) => [2, 3] compare_lists([5, 5, 7, 8], [8, 9, 5, 6]) => [5, 8] compare_lists([1, 2, 3], [4, 5, 6]) => [] ```","solution":"def compare_lists(list1, list2): Returns a list of integers that are common in both list1 and list2 without duplicates. # Convert both lists to sets to remove duplicates and find the intersection set1 = set(list1) set2 = set(list2) intersection = set1.intersection(set2) # Convert the intersection set back to a sorted list and return return list(intersection)"},{"question":"You are given a sorted list of integers where each integer represents the sales of a store on a particular day. Write a function that determines the longest sequence of consecutive days with increasing sales. Your function should return an array (or a tuple in Python) with the following three elements: the starting position of the sequence (1-based index), the ending position of the sequence (1-based index), and the length of the sequence. If there are multiple sequences with the same maximum length, return the one that appears first. For example: Input: [3, 4, 5, 1, 2, 3, 4, 1, 2] Output: [4, 7, 4] Explanation: The longest sequence of increasing sales is [1, 2, 3, 4], which starts at position 4 and ends at position 7, with a length of 4.","solution":"def longest_increasing_sales_sequence(sales): Returns the start position, end position, and length of the longest sequence of consecutive days with increasing sales. if not sales: return (0, 0, 0) max_len = 1 current_len = 1 start_pos = 1 max_start_pos = 1 for i in range(1, len(sales)): if sales[i] > sales[i - 1]: current_len += 1 else: if current_len > max_len: max_len = current_len max_start_pos = start_pos current_len = 1 start_pos = i + 1 if current_len > max_len: max_len = current_len max_start_pos = start_pos return (max_start_pos, max_start_pos + max_len - 1, max_len)"},{"question":"Given an array of integers, your task is to find a subset of the array such that the sum of the elements in the subset is exactly equal to a given target sum `S`. If such a subset exists, print the subset; otherwise, print -1. If there are multiple subsets that match the given target sum, print any one of them. Input The first line contains two integers, `n` and `S` (1 ≤ n ≤ 20, 0 ≤ S ≤ 10^5) — the number of elements in the array and the target sum, respectively. The second line contains `n` integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^4) — the elements of the array. Output If there exists a subset with sum equal to `S`, print the elements of the subset in any order. If multiple subsets exist, any one of them will be accepted. If no such subset exists, print -1. Examples Input 5 9 3 34 4 12 5 Output 4 5 Input 4 11 1 2 3 5 8 Output 3 8 Input 3 10 1 2 5 Output -1","solution":"def find_subset_sum(n, S, arr): Returns a subset of arr that sums up to S, or -1 if no such subset exists. from itertools import combinations # Try all possible subsets for r in range(1, n+1): # r ranges from 1 to n (length of combinations) for combo in combinations(arr, r): if sum(combo) == S: return list(combo) return -1"},{"question":"Alex is working on a new mapping application that needs to efficiently categorize and count intersections within a city grid. Each intersection can be considered as a point with specific coordinates on a 2D plane. Alex has noted that certain types of intersections tend to cluster in specific areas, and he needs a way to identify these clusters. To better understand the distribution, he decides to implement a solution that groups intersections into clusters based on proximity. Two intersections are considered part of the same cluster if the Euclidean distance between them does not exceed a given threshold D. Your task is to write a program that counts the number of distinct clusters of intersections. -----Input:----- - The first line contains two integers N and D, where N is the number of intersections and D is the maximum distance between any two intersections in a cluster. - The next N lines each contain two integers X and Y, representing the coordinates of an intersection. -----Output:----- Print a single integer, the number of distinct clusters. -----Constraints----- - 2 ≤ N ≤ 100000 - 1 ≤ D ≤ 1000 - -1000000 ≤ X, Y ≤ 1000000 -----Sample Input:----- 5 2 1 1 2 2 3 3 10 10 11 11 -----Sample Output:----- 2 -----Explanation:----- - The first three points (1, 1), (2, 2), and (3, 3) form one cluster because each pairwise distance is within the threshold D=2. - The last two points (10, 10) and (11, 11) form another cluster for the same reason. - Therefore, there are a total of 2 distinct clusters. Note: Due to the large input size, using an efficient algorithm such as a union-find (disjoint-set) could be beneficial.","solution":"import math class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [1] * size def find(self, p): if self.parent[p] != p: self.parent[p] = self.find(self.parent[p]) return self.parent[p] def union(self, p, q): rootP = self.find(p) rootQ = self.find(q) if rootP != rootQ: if self.rank[rootP] > self.rank[rootQ]: self.parent[rootQ] = rootP elif self.rank[rootP] < self.rank[rootQ]: self.parent[rootP] = rootQ else: self.parent[rootQ] = rootP self.rank[rootP] += 1 def count_clusters(N, D, intersections): uf = UnionFind(N) def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) for i in range(N): for j in range(i + 1, N): if euclidean_distance(intersections[i], intersections[j]) <= D: uf.union(i, j) unique_clusters = len(set(uf.find(i) for i in range(N))) return unique_clusters # Example call to the function based on the provided test input N = 5 D = 2 intersections = [(1, 1), (2, 2), (3, 3), (10, 10), (11, 11)] print(count_clusters(N, D, intersections)) # Output should be 2"},{"question":"The advancement of technology and digital solutions often involves creating systems that can handle patterns, especially when it comes to text or strings. Your task is to implement a program that detects and counts palindromic substrings in a given string. A lowercase palindromic substring is a substring that reads the same backwards as forwards and contains only lowercase letters from \'a\' to \'z\'. For example, the string \\"ababa\\" has the palindromic substrings \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", and \\"ababa\\". Given an input string, you need to count and print the number of distinct palindromic substrings present in it. -----Input----- The first line of input contains an integer t, indicating the number of test cases (1 leq t leq 10). For each test case, there is a single line containing a string s with a length between 1 and 1000. -----Output----- For each test case, print the number of distinct palindromic substrings in the string. -----Examples----- Sample Input: 2 ababa abcd Sample Output: 5 4 Note: - In the first example \\"ababa\\", the distinct palindromic substrings are \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", and \\"ababa\\". - In the second example \\"abcd\\", every single character itself is a distinct palindromic substring: \\"a\\", \\"b\\", \\"c\\", \\"d\\".","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the string s. n = len(s) # Set to store unique palindromic substrings palindromes = set() # Function to add palindromes from the given start and end indices def add_palindromes(left, right): while left >= 0 and right < n and s[left] == s[right]: palindromes.add(s[left:right + 1]) left -= 1 right += 1 # Find all palindromic substrings for i in range(n): # Add all odd length palindromes (single center) add_palindromes(i, i) # Add all even length palindromes (double center) add_palindromes(i, i + 1) return len(palindromes) def process_palindromic_substrings(test_cases): Processes multiple test cases and returns a list of counts of distinct palindromic substrings. results = [] for s in test_cases: results.append(count_distinct_palindromic_substrings(s)) return results"},{"question":"In a quaint village called Potatoville, there are n houses arranged in a line, each identified by their house number a_1, a_2, dots, a_n. Each house number is a unique positive integer. However, due to the magical nature of Potatoville, the house numbers transform on a special day called \\"Reversal Day\\" according to a predefined rule. On Reversal Day, each house number transforms into a new house number based on its reverse. If reversing a number results in a leading zero, that zero should be removed. For example, the reverse of 123 is 321, and the reverse of 120 is 21. Your task is to determine how the house numbers will look after Reversal Day transformations. -----Input----- The first line contains a single integer n (1 le n le 100,000) — the number of houses in Potatoville. The second line contains n unique positive integers a_1, a_2, dots, a_n (1 le a_i le 10^{9}) — the house numbers. -----Output----- In a single line, print n integers — the transformed house numbers after Reversal Day. -----Examples----- Input 5 123 450 321 789 101 Output 321 54 123 987 101 Input 3 9 90 900 Output 9 9 9 Input 4 1 10 100 1000 Output 1 1 1 1 -----Note----- In the first example, the house numbers [123, 450, 321, 789, 101] will be transformed as follows: - 123 becomes 321 - 450 becomes 54 - 321 remains 123 - 789 becomes 987 - 101 remains 101 (as reversals of palindromes are the same) In the second example, the house numbers [9, 90, 900] will be transformed as follows: - 9 remains 9 - 90 becomes 9 - 900 becomes 9 due to leading zeros being removed","solution":"def reverse_house_numbers(n, house_numbers): Returns the transformed house numbers after Reversal Day. Parameters: n (int): The number of houses. house_numbers (list): A list of n unique positive integers representing house numbers. Returns: list: A list of n integers representing the reversed house numbers. reversed_numbers = [] for number in house_numbers: reversed_number = int(str(number)[::-1]) reversed_numbers.append(reversed_number) return reversed_numbers"},{"question":"You are given a list of n integers, each integer representing the profit or loss incurred in a business transaction. You need to find the maximum sum of any contiguous subarray within the list. This problem is a variation of the classic \\"Maximum Subarray Problem\\" and can be solved using Kadane\'s Algorithm with a linear time complexity. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of transactions. The second line contains n integers, each representing the profit or loss incurred in a transaction. The integer values can be between -10^5 and 10^5. Output Print a single integer, which is the maximum sum of any contiguous subarray within the list. Example Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Explanation The maximum sum of any contiguous subarray is 6, which corresponds to the subarray [4, -1, 2, 1].","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray within arr. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Given an n x n grid (1 ≤ n ≤ 100) representing a garden, every cell contains a certain number of flowers. A gardener can pick flowers in any of two patterns: horizontal straight line (any row) or vertical straight line (any column). The gardener wants to collect flowers but can only pick flowers from either one row or one column of the garden. Determine the maximum number of flowers the gardener can collect. Input The first line contains an integer n — the size of the grid. The next n lines each contain n space-separated integers where each integer f (0 ≤ f ≤ 100) represents the number of flowers in the respective cell of the grid. Output Print a single integer — the maximum number of flowers the gardener can collect. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 24 Input 2 100 200 300 400 Output 700","solution":"def max_flowers_in_garden(n, grid): max_flowers = 0 # Check each row for the maximum flowers possible to collect for row in grid: max_flowers = max(max_flowers, sum(row)) # Check each column for the maximum flowers possible to collect for col in range(n): col_sum = sum(grid[row][col] for row in range(n)) max_flowers = max(max_flowers, col_sum) return max_flowers # Example usage: n = 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(max_flowers_in_garden(n, grid)) # Output: 24"},{"question":"A startup company is developing a new data storage solution and wants to ensure their database system can handle concurrent read and write requests efficiently. They have implemented a function that processes batches of database operations, but they want to guarantee that the maximum possible number of operations can be successfully completed within a time limit. Each operation is defined by two values: T (time required to complete the operation) and V (value or priority of the operation). Given the batch of operations, the system has a maximum time limit it will run before stopping, and your goal is to determine the maximum sum of the values of operations that can be completed within the time limit. Input The first line of input will contain B (number of batches). For each batch, the first line will contain M (number of operations). The next M lines will contain two integers T (time required for the ith operation) and V (value of the ith operation) separated by a space. The last line for each batch input will contain Tmax (maximum allowable running time for the batch). Output For each batch output \\"For Batch #batch_number:\\" then in the next line print the maximum sum of the values of the operations that can be successfully completed within the given time limit. If no operations can be completed within Tmax, print 0. Constraints 1 <= B <= 10 1 <= M <= 20 1 <= T, V, Tmax <= 10^9 SAMPLE INPUT 1 3 3 10 2 15 1 30 4 SAMPLE OUTPUT For Batch #1: 45 Explanation By selecting the 2nd and 3rd operations (time: 2 and 1), you get the maximum value sum of 45 within the time limit of 4.","solution":"def max_value(batches): results = [] for batch_num, batch in enumerate(batches, 1): operations = batch[\'operations\'] Tmax = batch[\'Tmax\'] # Using dynamic programming approach for 0/1 knapsack problem dp = [0] * (Tmax + 1) for T, V in operations: for time in range(Tmax, T - 1, -1): dp[time] = max(dp[time], dp[time - T] + V) max_value_sum = max(dp) result_str = f\\"For Batch #{batch_num}:n{max_value_sum}\\" results.append(result_str) return results # Sample input processing function def parse_batches(input_str): lines = input_str.strip().split(\'n\') batches_count = int(lines[0]) index = 1 batches = [] for _ in range(batches_count): M = int(lines[index]) operations = [] for i in range(index + 1, index + 1 + M): T, V = map(int, lines[i].split()) operations.append((T, V)) Tmax = int(lines[index + 1 + M]) batch = { \'operations\': operations, \'Tmax\': Tmax } batches.append(batch) index = index + 2 + M return batches # Input transformation and function call if __name__ == \\"__main__\\": input_str = 1 3 3 10 2 15 1 30 4 batches = parse_batches(input_str) results = max_value(batches) for result in results: print(result)"},{"question":"A sequence of numbers is called a wave if the differences between consecutive elements strictly alternate between positive and negative. Given an array arr containing n elements, determine if the array forms a wave. Return true if the array is a wave, otherwise return false. Example 1: Input: n = 5 arr[] = {1, 3, 2, 4, 3} Output: true Explanation: Differences are 2, -1, 2, -1 which alternate between positive and negative. Example 2: Input: n = 4 arr[] = {1, 3, 5, 7} Output: false Explanation: All differences are positive, therefore the array is not a wave. Your Task: Since this is a function problem, you don\'t need to take any input. You just need to complete the function isWave() that takes array arr and integer n as parameters and returns true if the array is a wave, otherwise returns false. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5","solution":"def isWave(arr, n): Determine if the array arr is a wave. :param arr: List[int] - an array of integers :param n: int - the length of the array :return: bool - True if the array is a wave, otherwise False if n < 2: return True for i in range(1, n-1): if (arr[i] - arr[i-1]) * (arr[i+1] - arr[i]) >= 0: return False return True"},{"question":"A city has a unique system of road connections. Each road connects exactly two intersections. The intersections are labeled from 1 to n. Each intersection can be visited multiple times, but there is a condition for traversing the roads: if you come to an intersection i, you must visit an intersection j (where j neq i) before you can come back to i. Additionally, each road has a traffic control device that allows traffic to move in only one direction along the road; thus, each road can be represented as a directed edge. Given this city map, your task is to determine whether all intersections can be visited starting from the first intersection, 1. You must consider the fact that the roads have a direction and obey the traversal restriction. Input Format - The first line contains two integers, n (the number of intersections) and m (the number of directed roads). - The subsequent m lines each contain two integers, u and v, denoting there is a directed road connecting intersection u to intersection v. Constraints 1 leq n leq 10^5 0 leq m leq 2 times 10^5 Output Format Output \\"YES\\" if it is possible to visit all intersections starting from the first intersection, 1. Otherwise, output \\"NO\\". Sample Input 1 ``` 4 4 1 2 2 3 3 4 4 1 ``` Sample Output 1 ``` YES ``` Sample Input 2 ``` 4 2 1 2 3 4 ``` Sample Output 2 ``` NO ``` Explanation In the first case, you can visit all intersections starting from intersection 1: 1 rightarrow 2 rightarrow 3 rightarrow 4 rightarrow 1. In the second case, there is no directed road connecting the components together to form a route where all intersections are reachable from intersection 1. Hence, the output is \\"NO\\".","solution":"def can_visit_all_intersections(n, m, roads): from collections import defaultdict, deque def bfs(start, graph): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbour in graph[node]: if neighbour not in visited: queue.append(neighbour) return visited # Create a graph graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in roads: graph[u].append(v) reverse_graph[v].append(u) # Traverse from node 1 visited_from_start = bfs(1, graph) # If not all nodes are visited, return NO if len(visited_from_start) != n: return \\"NO\\" # Traverse the reverse graph from node 1 visited_in_reverse_graph = bfs(1, reverse_graph) # If not all nodes are visited in reverse graph, return NO if len(visited_in_reverse_graph) != n: return \\"NO\\" return \\"YES\\""},{"question":"Julia is an enthusiastic hiker who loves to explore different trails in the mountains. There is a mountainous terrain represented by an integer array heights, where heights[i] is the height of the i-th mountain. Julia can start from any mountain and can move to the next mountain as long as the height of the next mountain is greater than or equal to the current mountain. She wants to find the longest sequence of mountains she can hike. Help Julia find the length of the longest increasing subsequence of mountain heights she can hike. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of mountains. The second line contains n space-separated integers heights1, heights2, ..., heightsn (1 ≤ heightsi ≤ 10^9) — the heights of the mountains. -----Output----- Print a single integer — the length of the longest increasing subsequence of mountain heights Julia can hike. -----Examples----- Input 6 1 2 2 3 5 4 Output 5 Input 5 10 9 2 5 3 Output 2 -----Note----- In the first sample, Julia can start from the first mountain and hike the path 1 -> 2 -> 2 -> 3 -> 5, reaching the fifth mountain. Thus, the length of the longest increasing sequence is 5. In the second sample, Julia can start from the third mountain and hike the path 2 -> 3, reaching the fifth mountain. Thus, the length of the longest increasing sequence is 2.","solution":"def longest_increasing_hike(heights): Finds the length of the longest sequence of mountain heights where each subsequent height is greater than or equal to the previous height. if not heights: return 0 n = len(heights) dp = [1] * n # dp[i] represents the length of the longest sequence ending at index i for i in range(1, n): if heights[i] >= heights[i - 1]: dp[i] = dp[i - 1] + 1 else: dp[i] = 1 return max(dp)"},{"question":"Hailey is participating in a competitive programming contest. One of the problems in the contest is to find the lexicographically smallest string that can be obtained after performing a series of operations on the given string. The allowed operations are: 1. Removing exactly one character from the string. 2. Swapping any two adjacent characters in the string. Given the initial string, Hailey wants to find the lexicographically smallest string possible after performing at most one operation. Help Hailey by writing a function that solves this problem. Input: The first line contains an integer t, the number of test cases. The next t lines each contains a string s, which is the string for which the answer is to be found. Output: Print t lines, each containing the lexicographically smallest string possible for the corresponding input string. Constraints: 1 ≤ t ≤ 100 1 ≤ |s| ≤ 1000 Each string s consists of only lowercase English letters. SAMPLE INPUT 3 cba acb abc SAMPLE OUTPUT ba ab ab","solution":"def lexicographically_smallest_string(t, strings): Function to find the lexicographically smallest string possible after at most one operation for each input string. Parameters: t (int): Number of test cases. strings (list of str): List containing the strings for each test case. Returns: list of str: List of resulting strings after performing the operation. results = [] for s in strings: smallest = min(s[:i] + s[i+1:] for i in range(len(s))) results.append(smallest) return results"},{"question":"You are given a string `S` consisting of lowercase Latin letters. You need to determine whether `S` contains a substring that is a palindrome of length at least 2 and less than or equal to `k`. If such a substring exists, return \\"YES\\"; otherwise, return \\"NO\\". ------ Input ------ The input contains multiple test cases. The first line of the input contains an integer T denoting the number of test cases. The description of each test case follows: The first line of each test case contains two space-separated integers N and k. The second line contains the string S. ------ Output ------ For each test case, print a single line containing the string \\"YES\\" if there exists a palindrome substring of length at least 2 and at most k, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 10^{5} 2 ≤ k ≤ N ------ Subtasks ------ Subtask #1 (50 points): 2 ≤ N ≤ 500 2 ≤ k ≤ 500 Subtask #2 (50 points): 2 ≤ N, k ≤ 10^{5} ------ Sample Input 1 ------ 3 5 3 ababa 6 2 abcdef 4 4 abccba ------ Sample Output 1 ------ YES NO YES","solution":"def has_palindromic_substring(n, k, s): Determine if the string s has a palindromic substring of length at least 2 and at most k. Return \\"YES\\" if such a substring exists, otherwise \\"NO\\". def is_palindrome(sub): return sub == sub[::-1] # Check for palindromes from length 2 to k for l in range(2, k + 1): for i in range(n - l + 1): if is_palindrome(s[i:i + l]): return \\"YES\\" return \\"NO\\" def process_inputs(inputs): results = [] index = 0 T = int(inputs[index]) index += 1 for _ in range(T): N, K = map(int, inputs[index].split()) index += 1 S = inputs[index] index += 1 results.append(has_palindromic_substring(N, K, S)) return results"},{"question":"Farmer John has a farm with a barn where he stores his hay bales. This barn has a limited capacity, and John wants to efficiently pack it with as many hay bales as possible without exceeding the barn\'s weight limit. Each hay bale has a different weight and the barn has a specific maximum weight it can hold. You are given: 1. The maximum weight limit of the barn. 2. A list of weights of the hay bales available. Your task is to write a program to determine the maximum number of hay bales that can be stored in the barn without exceeding the weight limit. Input - The first line contains an integer `W` (1 ≤ W ≤ 1000), the maximum weight limit of the barn. - The second line contains an integer `n` (1 ≤ n ≤ 100), the number of hay bales. - The third line contains `n` space-separated integers representing the weights of the hay bales. Each weight is an integer between 1 and 50 inclusive. Output - The output should be a single integer, the maximum number of hay bales that can be stored in the barn without exceeding the weight limit. Example Input 50 5 10 20 30 40 50 Output 2 Explanation In this example, Farmer John can choose the hay bales with weights 10 and 20 to maximize the number of bales without exceeding the limit 50. Therefore, the output is 2.","solution":"def max_hay_bales(W, n, weights): Returns the maximum number of hay bales that can be stored in the barn without exceeding the weight limit. :param W: int, the maximum weight limit of the barn :param n: int, the number of hay bales :param weights: list, the weights of the hay bales :return: int, the maximum number of hay bales that can be stored weights.sort() total_weight = 0 bale_count = 0 for weight in weights: if total_weight + weight <= W: total_weight += weight bale_count += 1 else: break return bale_count"},{"question":"The city of Borgonia is known for its perfectly straight streets and excellent city planning. Recently, the city has been divided into a grid of square blocks, each block measuring 1 unit by 1 unit. The blocks are numbered from 1 to N, arranged in an N x N grid, starting from the top-left block (1,1). Each block can have buildings of various heights, and the height of the buildings in block (i,j) is given by a matrix `heights`, where `heights[i][j]` represents the height of the building in block (i,j). Recently, the city planners decided to analyze the layout to determine the optimal locations for new high-rise buildings. For this purpose, they need to compute the \\"building view score\\" for different sub-grids of the city. The building view score of a sub-grid is defined as the sum of the heights of all buildings within that sub-grid. As one of the leading software developers in Borgonia, you have been tasked with writing a program that computes the building view scores for multiple sub-grids. Input Format: - The first line contains two integers, N (the side length of the grid, 1 ≤ N ≤ 500) and Q (the number of queries, 1 ≤ Q ≤ 100,000). - The next N lines each contain N integers, where the j-th integer in the i-th line is `heights[i][j]` (0 ≤ heights[i][j] ≤ 10^6). - The next Q lines each contain four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ N, 1 ≤ c1 ≤ c2 ≤ N), representing the top-left and bottom-right coordinates of the sub-grid. Output Format: - The program must output Q lines, each containing a single integer representing the building view score for the respective sub-grid. Constraints: - Each sub-grid includes all blocks from the top-left corner (r1, c1) to the bottom-right corner (r2, c2), inclusive. - The result for each sub-grid should be the sum of the heights of buildings within that sub-grid. Example Input: ``` 3 2 1 2 3 4 5 6 7 8 9 1 1 2 2 2 2 3 3 ``` Example Output: ``` 12 28 ``` Explanation: In the first query, the sub-grid includes blocks (1,1) to (2,2), so the sum of heights is 1 + 2 + 4 + 5 = 12. In the second query, the sub-grid includes blocks (2,2) to (3,3), so the sum of heights is 5 + 6 + 8 + 9 = 28. Your task is to write a function that efficiently processes these queries and computes the required building view scores.","solution":"def build_prefix_sum(heights, N): prefix_sum = [[0] * (N + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, N + 1): prefix_sum[i][j] = ( heights[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] ) return prefix_sum def get_building_view_score(prefix_sum, r1, c1, r2, c2): return ( prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1] ) def compute_building_view_scores(N, Q, heights, queries): prefix_sum = build_prefix_sum(heights, N) results = [] for q in range(Q): r1, c1, r2, c2 = queries[q] score = get_building_view_score(prefix_sum, r1, c1, r2, c2) results.append(score) return results"},{"question":"Alex is organizing a line of artists for a photo shoot. The artists belong to two different genres: Singers and Dancers. He wants all Singers to stand to the left side and all Dancers to stand to the right side of the line. Initially, the positions of the artists are given by N binary integers, where 0 represents a Dancer and 1 represents a Singer. In each minute, if a Singer finds a Dancer standing immediately to their left, they can swap their positions. Alex needs to know the total time required to arrange the line such that all Singers are on the left and all Dancers are on the right. ---- Input ---- The first line contains T, the number of test cases. The description of T test cases follows. Each test case consists of two lines. The first line contains an integer N, the number of artists standing in the row. The second line contains N space-separated integers representing the initial arrangement of Singers and Dancers. ---- Output ---- For each test case, output a single integer on a new line indicating the number of minutes required for all Singers to move to the left side and all Dancers to move to the right side of the row. ---- Constraints ---- 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ A_i ≤ 1 ---- Example ---- Input: 2 6 1 0 1 0 1 0 4 1 0 1 0 Output: 3 2 ---- Explanation ---- Test case 1: Initial arrangement: [1 0 1 0 1 0] After 1st minute: [1 1 0 1 0 0] After 2nd minute: [1 1 1 0 0 0] Total time taken = 3 minutes Test case 2: Initial arrangement: [1 0 1 0] After 1st minute: [1 1 0 0] Total time taken = 2 minutes","solution":"def minutes_to_arrange_artists(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arrangement = test_cases[i][1] time = 0 while True: swaps = 0 for j in range(N-1): if arrangement[j] == 1 and arrangement[j+1] == 0: arrangement[j], arrangement[j+1] = arrangement[j+1], arrangement[j] swaps += 1 if swaps == 0: break time += 1 results.append(time) return results # Function to parse input easily, this is not part of the main solution def parse_input(input_str): input_list = input_str.split(\'n\') T = int(input_list[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_list[index]) arrangement = list(map(int, input_list[index + 1].split())) test_cases.append((N, arrangement)) index += 2 return T, test_cases"},{"question":"Puja enjoys solving word puzzles. Recently, she encountered a type of puzzle where she needs to find out how many unique substrings can be formed from a string. A substring is defined as a contiguous sequence of characters within a string. Given a string, help Puja determine the number of unique substrings of the string. Input: The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000), where |s| represents the length of the string. The string contains only lowercase English letters. Output: Print one integer denoting the number of unique substrings. Constraints: 1 ≤ |s| ≤ 1000 SAMPLE INPUT ababa SAMPLE OUTPUT 9 Explanation: The unique substrings of \\"ababa\\" are: \\"a\\", \\"ab\\", \\"aba\\", \\"abab\\", \\"ababa\\", \\"b\\", \\"ba\\", \\"bab\\", \\"baba\\". Hence, there are 9 unique substrings.","solution":"def count_unique_substrings(s): Returns the count of unique substrings in the given string s. unique_substrings = set() n = len(s) # Generate all possible substrings for i in range(n): for j in range(i + 1, n + 1): substring = s[i:j] unique_substrings.add(substring) return len(unique_substrings)"},{"question":"A team of scientists is studying the growth patterns of a particular species of plant. They have collected data on the height of a plant at regular intervals over a period of days. The scientists are interested in finding out the maximum increase in height recorded over any continuous segment of days. Given an array of integers where each element represents the height gained by the plant on that particular day, you are required to find the maximum sum of a contiguous subarray. This problem is often referred to as finding the maximum subarray sum. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of days. The second line contains n integers separated by spaces, representing the height gained by the plant on each of the n days. Output Print a single integer — the maximum sum of a contiguous subarray. Example Input 7 -2 1 -3 4 -1 2 1 -5 4 Output 6 Note In the given example, the contiguous subarray with the maximum sum is [4, -1, 2, 1], with a sum of 6.","solution":"def max_subarray_sum(n, heights): Function to find the maximum sum of a contiguous subarray. :param n: integer, number of days :param heights: list of integers, height gained by the plant on each day :return: integer, maximum sum of contiguous subarray max_current = max_global = heights[0] for i in range(1, n): max_current = max(heights[i], max_current + heights[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given a string s , reverse the words within the string while preserving the original word order. A word is defined as a sequence of non-space characters. The words in the string will be separated by one space. There will not be any extra spaces in the string. -----Input----- A single line containing the string s . -----Output----- Output the string with each word\'s characters reversed, while still preserving the word order. -----Explanation of Sample Inputs----- In sample input 1, the input string is \\"hello world\\". Reversing each word yields \\"olleh dlrow\\". In sample input 2, the input string is \\"Coding is fun\\". Reversing each word yields \\"gnidoC si nuf\\". In sample input 3, the input string is \\"Python programming\\". Reversing each word yields \\"nohtyP gnimmargorp\\". -----Examples----- Sample Input 1: hello world Sample Output 1: olleh dlrow Sample Input 2: Coding is fun Sample Output 2: gnidoC si nuf Sample Input 3: Python programming Sample Output 3: nohtyP gnimmargorp","solution":"def reverse_words_in_string(s): Reverses each word in the input string while preserving the word order. Parameters: s (str): Input string with words separated by spaces. Returns: str: String with each word reversed while keeping the word order. return \' \'.join(word[::-1] for word in s.split(\' \'))"},{"question":"Given a string consisting of words separated by spaces, your task is to reverse each word in the string while maintaining the original order of the words. A word is defined as a sequence of non-space characters. Constraints: * The length of the string is between 1 and 1000. * The string consists of printable ASCII characters and spaces. Input Input is given from Standard Input in the following format: s Output Print the resulting string where each word has been reversed but the order of the words remains the same. Examples Input code assessment task Output edoc tnemssessa ksat Input reverse each word Output esrever hcae drow Input challenge Output egnellahc","solution":"def reverse_each_word(s): Reverse each word in the string while maintaining the original order of the words. Parameters: s (str): The input string containing words separated by spaces. Returns: str: A new string where each word from the original string is reversed. words = s.split(\' \') reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"This is a problem about safe-cracking. Limak is trying to open a safe that requires a 4-digit combination to unlock. You have to help him find the correct combination. A 4-digit combination means an integer from the interval [1000, 9999]. You can ask up to 15 queries about the digits of the combination. In each query, you should print a 4-digit integer guess. The system will answer with two integers, a and b. The integer a represents the count of digits in your guess that are exactly correct and in the correct position. The integer b represents the count of digits that are correct but in a wrong position. For example, if the hidden combination is 1234 and your guess is 1243, the answer will be a = 2 (for digits 1 and 2 in correct positions) and b = 2 (for digits 3 and 4 which are correct but swapped). Your task is to find the correct combination within 15 queries. Input After each guess you should read two integers from the input. The integers will represent the values for a and b as described above. Output Up to 15 times you can ask a query — print a 4-digit integer guess in one line. When you deduce the correct combination, print that combination and terminate your program. Examples Input 0 2 1 1 2 0 Output 4321 1234 1245 Note In the example above, the hidden number is 1243. According to the process below: Guess: 4321 Response: a = 0, b = 2 (2 digits are correct but in the wrong position: 2, 1) Guess: 1234 Response: a = 1, b = 1 (digit 2 is in correct position, and one other digit is correct but in wrong position) Guess: 1245 Response: a = 2, b = 0 (two correct digits in their correct positions: 1 and 2) In this scenario, the correct combination would be deduced in further queries.","solution":"import itertools # The main function which tries to guess the combination def safe_cracking(): possible_combinations = [str(x).zfill(4) for x in range(1000, 10000)] queries = 15 for _ in range(queries): guess = possible_combinations.pop(0) print(guess) a, b = map(int, input().split()) if a == 4: return possible_combinations = [ combination for combination in possible_combinations if is_valid_guess(guess, combination, a, b) ] def is_valid_guess(guess, combination, a, b): correct_pos = sum(g == c for g, c in zip(guess, combination)) correct_digit = sum(min(guess.count(d), combination.count(d)) for d in set(guess)) - correct_pos return correct_pos == a and correct_digit == b"},{"question":"# Task Write a program to process a string by \\"compressing\\" it. This involves counting the consecutive occurrences of characters and representing these counts alongside the characters themselves. If the compressed string is not smaller than the original string, your program should return the original string instead. # Purpose Practice implementing simple string manipulation algorithms. # Intent This exercise is designed to help you practice working with strings and implementing algorithms efficiently. Additionally, it aims to help you understand when optimizing a solution is beneficial. # Example ```python compress_string(\\"aabcccccaaa\\") # Expected output: \\"a2b1c5a3\\" ``` If the compressed string is not smaller than the original string: ```python compress_string(\\"abcdef\\") # Expected output: \\"abcdef\\" ``` # Requirements 1. You are only allowed to use basic programming constructs: loops, conditionals, and standard string operations. 2. Do not use any built-in string compression or advanced data structures. The goal is to implement the algorithm yourself.","solution":"def compress_string(s): Compresses a string using counts of repeated characters. If the compressed string is not smaller than the original, it returns the original string. :param s: Input string :return: Compressed string or original string if compressed string is not smaller if not s: return s compressed_parts = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed_parts.append(s[i - 1] + str(count)) count = 1 compressed_parts.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed_parts) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Create a program to check if a given binary string can be made equivalent to another target binary string by flipping (changing `0` to `1` or `1` to `0`) exactly one contiguous substring. Constraints * The length of both binary strings is between 1 and 100 (inclusive). * Both strings will consist only of `0`s and `1`s. Input Input is given from Standard Input in the following format: ``` S T ``` Where S is the original binary string and T is the target binary string. Output If S can be transformed to T by flipping exactly one contiguous substring, print `YES`; otherwise, print `NO`. Examples Input ``` 1100 0010 ``` Output ``` YES ``` Input ``` 1010 1010 ``` Output ``` NO ``` Input ``` 0 1 ``` Output ``` YES ``` Input ``` 1111 0000 ``` Output ``` YES ```","solution":"def can_flip_one_substring_to_match(S, T): Check if binary string S can be transformed to T by flipping exactly one contiguous substring. n = len(S) # If S and T are already the same, we cannot flip exactly one substring to make them equal again. if S == T: return \\"NO\\" # Find the first and last indices where S and T differ. first_diff = -1 last_diff = -1 for i in range(n): if S[i] != T[i]: if first_diff == -1: first_diff = i last_diff = i # Now we need to check if flipping the substring from first_diff to last_diff in S matches T. for i in range(first_diff, last_diff + 1): # If S and T are not complementary in this substring, return NO. if S[i] == T[i]: return \\"NO\\" return \\"YES\\""},{"question":"Program to Arrange Characters by Frequency Given a string, write a program to arrange the characters of the string in decreasing order based on their frequency. In case of a tie, arrange characters in alphabetical order. ------ Input ------ The input contains a single string s which consists of lowercase English letters. ------ Output ------ Output the string after arranging its characters by their frequency in decreasing order. Characters with the same frequency should be sorted alphabetically. ------ Constraints ------ - The length of the string will be between 1 and 10^5. - The string will only contain lowercase English letters. ------ Sample Input 1 ------ ``` tree ``` ------ Sample Output 1 ------ ``` eert ``` ------ explanation 1 ------ - The characters \'e\' appear twice, which is the highest frequency. - The characters \'r\' and \'t\' appear once. - Since \'r\' alphabetically comes before \'t\', \'r\' is placed before \'t\'. ------ Sample Input 2 ------ ``` cccaaa ``` ------ Sample Output 2 ------ ``` aaaccc ``` ------ explanation 2 ------ - Both \'c\' and \'a\' appear three times. - Since \'a\' alphabetically comes before \'c\', \'a\' is placed before \'c\' in the final string. ------ Sample Input 3 ------ ``` bbbaaaccc ``` ------ Sample Output 3 ------ ``` aaabbbccc ``` ------ explanation 3 ------ - The characters \'a\', \'b\' and \'c\' all appear three times. - Since \'a\' alphabetically comes before \'b\' and \'b\' comes before \'c\', the final arranged string starts with \'a\', followed by \'b\' and then \'c\'.","solution":"from collections import Counter def arrange_characters_by_frequency(s): Arrange characters in string \'s\' by decreasing frequency. Characters with the same frequency should be sorted alphabetically. if len(s) == 0: return \\"\\" # Count frequency of each character freq = Counter(s) # Create a sorted list of the items in the counter sorted_items = sorted(freq.items(), key=lambda x: (-x[1], x[0])) # Build the result string based on sorted items result = \'\'.join([char * count for char, count in sorted_items]) return result"},{"question":"Kevin is interested in binary trees and their properties. He was recently working on binary trees and stumbled upon a problem where he needs to determine the number of unique binary search trees (BSTs) that can be formed with `n` distinct nodes labeled from 1 to `n`. He knows that this problem can be solved using dynamic programming but he seeks your help to implement an efficient solution. -----Input----- The input consists of a single integer n (1 ≤ n ≤ 19) which represents the number of nodes. -----Output----- Output a single integer that represents the number of unique BSTs that can be formed with `n` nodes. -----Examples----- Input 3 Output 5 Input 4 Output 14 -----Note----- In the first sample, there are 5 unique BSTs that can be formed with 3 nodes. They are: - 1 as the root, with 2 and 3 in the right subtree. - 3 as the root, with 1 and 2 in the left subtree. - 2 as the root, with 1 in the left subtree and 3 in the right subtree. - 1 as the root, with 2 as the root of the right subtree and 3 as its right child. - 3 as the root, with 2 as the root of the left subtree and 1 as its left child. For the second sample, there are 14 unique BSTs that can be formed with 4 nodes.","solution":"def num_unique_bsts(n): Returns the number of unique binary search trees that can be formed with n nodes. # Dynamic Programming table to store the number of unique BSTs with i nodes dp = [0] * (n + 1) # Base cases dp[0] = 1 # Empty tree dp[1] = 1 # Tree with one node # Fill the dp array for nodes in range(2, n + 1): for root in range(1, nodes + 1): left_trees = dp[root - 1] # number of unique BSTs in the left subtree right_trees = dp[nodes - root] # number of unique BSTs in the right subtree dp[nodes] += left_trees * right_trees return dp[n]"},{"question":"In a pet clinic, animals are given identification tags upon their arrival, and these tags contain unique identification numbers. The clinic needs a way to prioritize and quickly serve animals that come in with the smallest identification numbers first. To facilitate this, your task is to create a system that, given a set of incoming identification numbers, provides the correct order in which the animals should be served. To solve this problem, implement a function that, given a list of animal identification numbers, returns them sorted in ascending order. Input Format: - The first line contains an integer t, the number of test cases. - For each test case, the first line contains an integer n, the number of animal identification numbers. - The second line contains n space-separated integers representing the identification numbers. Output Format: For each test case, output a single line containing the sorted identification numbers in ascending order. Constraints: - 1 ≤ t ≤ 20 - 1 ≤ n ≤ 10^5 - 1 ≤ identification number ≤ 10^9 Sample Input: 2 3 5 3 9 4 1 4 7 3 Sample Output: 3 5 9 1 3 4 7 Explanation: For the first test case, the identification numbers 5, 3, and 9 are sorted to 3, 5, 9. For the second test case, the identification numbers 1, 4, 7, and 3 are sorted to 1, 3, 4, 7.","solution":"def prioritize_animals(test_cases): Returns the sorted order of animal identification numbers for each test case. Args: - test_cases (list of tuples): Each tuple contains the number of identification numbers followed by a list of those numbers. Returns: - list: List of sorted identification numbers for each test case. results = [] for case in test_cases: n, ids = case ids_sorted = sorted(ids) results.append(ids_sorted) return results"},{"question":"You are given a 2D grid of size N times M initially filled with zeros. You are also given a sequence of Q operations. Each operation consists of a command and its associated parameters. There are three types of commands: - \\"row x y\\": Increment all elements of the x-th row by y. - \\"col x y\\": Increment all elements of the x-th column by y. - \\"max\\": Output the maximum element in the 2D grid after applying the operations so far. Your task is to apply the given operations in order and print the result for each \\"max\\" command. -----Input----- - The first line contains three space-separated integers, N, M, and Q. - The next Q lines each describe an operation. An operation is represented by: - two integers \\"row x y\\" if it\'s a row increment, - two integers \\"col x y\\" if it\'s a column increment, - the string \\"max\\" if it\'s a max command. -----Output----- For each \\"max\\" command, output the maximum element in the 2D grid after applying the operations up to that point. -----Constraints----- - 1 leq N, M leq 100 - 1 leq Q leq 1000 - 1 leq x leq N for \\"row\\" commands and 1 leq x leq M for \\"col\\" commands - 1 leq y leq 10^9 for \\"row\\" and \\"col\\" commands -----Example Input----- 2 3 5 row 1 4 col 2 2 max row 2 3 max -----Example Output----- 4 7 -----Explanation----- Example case: - After the first operation, the grid looks like: 4 4 4 0 0 0 - After the second operation, the grid looks like: 4 6 4 0 2 0 - The first \\"max\\" command outputs 6. - After the fourth operation, the grid looks like: 4 6 4 3 5 3 - The second \\"max\\" command outputs 6.","solution":"def process_grid_operations(N, M, Q, operations): grid = [[0] * M for _ in range(N)] results = [] for op in operations: if op[0] == \'row\': x, y = int(op[1]) - 1, int(op[2]) for col in range(M): grid[x][col] += y elif op[0] == \'col\': x, y = int(op[1]) - 1, int(op[2]) for row in range(N): grid[row][x] += y elif op[0] == \'max\': max_value = max(max(row) for row in grid) results.append(max_value) return results"},{"question":"Alex collects unique action figures as a hobby. He has a specific way of organizing his collection in display cabinets. Each cabinet has multiple shelves, and each shelf can hold a series of action figures. Alex wants to ensure that no two action figures of the same type are on the same shelf, and the shelves must be completely filled before Alex starts placing figures on the next shelf. Given the types of action figures Alex owns, determine the minimum number of shelves required to display all his figures according to his rules. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of different types of action figures Alex has. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000), where a_i represents the number of figures of type i that Alex owns. -----Output----- Print a single integer — the minimum number of shelves required to display all the figures. -----Examples----- Input 3 2 3 1 Output 3 Input 4 4 4 4 4 Output 4 Input 5 1 2 3 4 5 Output 5","solution":"def min_shelves_needed(n, figures): Returns the minimum number of shelves required to display all the figures. :param n: int - number of different types of action figures :param figures: list - list containing the number of figures of each type :return: int - minimum number of shelves required max_figures_per_type = max(figures) return max_figures_per_type"},{"question":"Tom runs a delivery service where he has multiple warehouses around the city. Each warehouse stores a particular type of item, and each item can only be stored in one warehouse. Tom wants to design a system that, given a list of delivery orders, indicates whether it is possible to deliver all the items while visiting each warehouse at most once. In other words, there should be no need for revisiting a warehouse for any item in the delivery list. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100000), the number of distinct warehouse and item pairs. The next n lines each contain two integers a and b (1 ≤ a, b ≤ 100000), which means item `b` is stored in warehouse `a`. The next line contains an integer m (1 ≤ m ≤ 100000), the number of delivery orders. The next m lines each contain one integer, which represents the item to deliver. -----Output----- Print either \\"Yes\\" (without the quotes) if it\'s possible to deliver all items while visiting each warehouse at most once, or \\"No\\" (without the quotes) if it\'s not possible. -----Examples----- Input 3 1 2 2 3 3 4 4 2 3 4 2 Output No Input 3 1 2 2 3 4 5 3 2 3 5 Output Yes -----Note----- In the first example, we need to visit the warehouse for item 2 twice, making it impossible to complete all deliveries in one go. In the second example, each warehouse is visited at most once, making all deliveries possible in a single round.","solution":"def can_deliver_all_items(n, warehouse_item_pairs, m, delivery_orders): warehouse_visit_count = {} item_to_warehouse = {item: warehouse for warehouse, item in warehouse_item_pairs} for item in delivery_orders: warehouse = item_to_warehouse[item] if warehouse in warehouse_visit_count: return \\"No\\" warehouse_visit_count[warehouse] = True return \\"Yes\\""},{"question":"Chef is attending a coding contest. The contest consists of several problems, each with a certain number of points. Chef knows in advance which problems he can solve and the points for each of those problems. However, Chef can only solve a limited number of problems due to time constraints. Given the total number of problems, the maximum number of problems Chef can solve, and a list of points for each problem that Chef can solve, determine the maximum total points Chef can earn. ------ Input ------ The first line of input contains two space-separated integers N (total number of problems) and K (maximum number of problems Chef can solve). The second line contains N space-separated integers P_{1}, P_{2}, ldots, P_{N} where P_{i} represents the points for the i-th problem. ------ Output ------ Print a single integer representing the maximum total points Chef can earn by solving up to K problems. ------ Constraints ------ 1 leq N leq 10^5 1 leq K leq N 0 leq P_{i} leq 10^4 for each valid i ------ Example Input ------ 7 3 4 8 15 16 23 42 8 ------ Example Output ------ 81 ------ Explanation ------ Chef can solve a maximum of 3 problems. The optimal solution is to solve the problems with points 42, 23, and 16, resulting in a total of 81 points. ------ Scoring ------ Your solution will be judged based on the correctness and efficiency of the implementation. The solution should consider edge cases and work within the given constraints.","solution":"def max_total_points(N, K, points): Determines the maximum total points Chef can earn by solving up to K problems. Parameters: N (int): Total number of problems. K (int): Maximum number of problems Chef can solve. points (list): List of integers representing the points for each problem. Returns: int: The maximum total points Chef can earn. # Sort the points in descending order to get the highest points sorted_points = sorted(points, reverse=True) # Sum the top K points max_points = sum(sorted_points[:K]) return max_points"},{"question":"You are given a list of N integers representing the lengths of some sticks. You have to determine if it\'s possible to form a triangle with exactly three of these sticks, and if it is, output the maximum possible perimeter of such a triangle. ------- Input Format ------- - The first line contains a single integer N, the number of sticks. - The second line contains N integers L_{1}, L_{2}, ldots, L_{N}, where L_{i} is the length of the i-th stick. ------- Output Format ------- Output a single integer, the maximum possible perimeter of a triangle formed by any three of these sticks. If no such triangle exists, output -1. ------- Constraints ------- 3 le N le 10^5 1 le L_{i} le 10^6 ------- Sample Input 1 ------- 5 2 3 4 5 10 ------- Sample Output 1 ------- 12 ------- Explanation 1 ------- The maximum possible perimeter is obtained by the sticks with lengths 3, 4, and 5. ------- Sample Input 2 ------- 4 4 5 10 20 ------- Sample Output 2 ------- -1 ------- Explanation 2 ------- No three lengths can form a triangle, so the output is -1.","solution":"def max_perimeter_of_triangle(n, lengths): This function returns the maximum possible perimeter of a triangle that can be formed from the given list of stick lengths. If no such triangle can be formed, it returns -1. :param n: int - number of sticks :param lengths: List[int] - lengths of the sticks :return: int - maximum possible perimeter of a triangle, or -1 if no triangle can be formed lengths.sort(reverse=True) for i in range(n - 2): if lengths[i] < lengths[i + 1] + lengths[i + 2]: return lengths[i] + lengths[i + 1] + lengths[i + 2] return -1"},{"question":"Masha is participating in a tie-breaking round in her school\'s coding competition. The task is to reorganize the characters of a given non-empty string such that adjacent characters are no longer the same. If such a reorganization is impossible, return an empty string. Here is how the task works: You are given a string `s` consisting of lowercase English letters only. The task is to determine if you can rearrange the string such that no two adjacent characters are the same. If you can rearrange it, you need to return the rearranged string. Otherwise, return an empty string. Your goal is to implement a function `reorganize_string(s)`: -----Input----- - A single string `s` of length `1 ≤ len(s) ≤ 500`. -----Output----- - A re-organized string where no adjacent characters are the same, or an empty string if this is not possible. -----Examples----- Input aab Output aba Input aaab Output (empty string) Input xxxyyyz Output xyxyzyx -----Note----- In the first example, \\"aab\\" can be rearranged as \\"aba\\" where no two adjacent characters are the same. In the second example, \\"aaab\\" cannot be rearranged to satisfy the condition, so the function should return an empty string. In the third example, \\"xxxyyyz\\" can be rearranged as \\"xyxyzyx\\" or several other valid configurations, as long as no two adjacent characters are the same.","solution":"from collections import Counter import heapq def reorganize_string(s): # Count frequency of each character char_count = Counter(s) # Create a max heap (negative counts will make it act like a max heap) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) # Result string container result = [] # Previous character to ensure no two adjacent characters are same prev_count, prev_char = 0, \'\' while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # Push the previous character back if it has more occurrences if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update previous character and decrease count prev_count, prev_char = count + 1, char # Check if we have created a valid reorganized string reorganized_string = \'\'.join(result) if len(reorganized_string) != len(s): return \\"\\" return reorganized_string"},{"question":"Given an array of integers, write a function to find the maximum sum of any contiguous subarray of the array. The function should return both the maximum sum and the starting and ending indices of the subarray that provides this maximum sum. Example 1: Input: arr = [-2,1,-3,4,-1,2,1,-5,4] Output: {Maximum Sum: 6, Indices: (3, 6)} Explanation: The subarray [4, -1, 2, 1] has the maximum sum of 6, starting at index 3 and ending at index 6. Example 2: Input: arr = [1] Output: {Maximum Sum: 1, Indices: (0, 0)} Explanation: The subarray [1] has the maximum sum of 1, starting and ending at index 0. Example 3: Input: arr = [-1, -2, -3, -4] Output: {Maximum Sum: -1, Indices: (0, 0)} Explanation: The subarray [-1] has the maximum sum of -1, starting and ending at index 0. Your Task: Complete the function maxSubArraySum() which takes an integer array as input and returns a dictionary with the maximum sum and the starting and ending indices of the subarray with the maximum sum. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^5 -10^4 ≤ arr[i] ≤ 10^4","solution":"def maxSubArraySum(arr): Finds the maximum sum of any contiguous subarray of the array and returns both the maximum sum and the starting and ending indices of the subarray that provides this maximum sum. max_sum = float(\'-inf\') current_sum = 0 start = 0 end = 0 temporary_start = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temporary_start end = i if current_sum < 0: current_sum = 0 temporary_start = i + 1 return {\\"Maximum Sum\\": max_sum, \\"Indices\\": (start, end)}"},{"question":"A vending machine accepts coins of various denominations: 1, 5, 10, 25, 50, and 100 cents. Given a list of these coins, a target amount in cents, and an infinite supply of each denomination, determine the minimum number of coins required to make the target amount. If it is not possible to make the exact amount, return -1. -----Input----- The input consists of two lines: 1. The first line contains an integer n (1 ≤ n ≤ 6) — the number of available coin denominations. 2. The second line contains n space-separated integers representing the values of the n denominations. 3. The third line contains an integer m (1 ≤ m ≤ 10,000) — the target amount in cents. -----Output----- Print a single integer — the minimum number of coins required to make the target amount m, or -1 if it is not possible to make this amount with the given denominations. -----Examples----- Input 3 1 2 5 11 Output 3 Input 2 5 10 3 Output -1 -----Note----- In the first example, the minimum number of coins needed to make 11 cents is 3 (5 + 5 + 1 = 11). In the second example, it is impossible to make 3 cents with coins of 5 and 10 cents, hence the output is -1.","solution":"def min_coins(n, denominations, target): Calculate the minimum number of coins required to make the target amount. Parameters: n: int - the number of available coin denominations denominations: list of int - the values of the n denominations target: int - the target amount in cents Returns: int - the minimum number of coins required to make the target amount, or -1 if it is not possible to make the target amount # Create a list to store min number of coins for each amount from 0 to target dp = [float(\'inf\')] * (target + 1) # Base case: no coins are needed to make 0 amount dp[0] = 0 # Determine the minimum number of coins required for each amount for amount in range(1, target + 1): for coin in denominations: if coin <= amount: dp[amount] = min(dp[amount], dp[amount - coin] + 1) # If dp[target] is still infinity, it means the target amount cannot be made with given denominations return dp[target] if dp[target] != float(\'inf\') else -1"},{"question":"Implement the class `SparseMatrix` which represents a sparse matrix and supports the following methods: 1. `setValue(int row, int col, int value)` Sets the value at position (row, col) in the matrix. If the value is zero, removes the entry if it exists, to maintain the sparsity. 2. `getValue(int row, int col)` Returns the value at position (row, col) in the matrix. If the entry does not exist, returns 0. 3. `addMatrix(SparseMatrix other)` Adds another SparseMatrix to the current matrix. Only non-zero values in the result should be stored. 4. `transpose()` Returns a new SparseMatrix which is the transpose of the current matrix. Example 1: Input [\\"SparseMatrix\\",\\"setValue\\",\\"getValue\\",\\"transpose\\",\\"addMatrix\\",\\"getValue\\"] [[[5, 5]], [2, 3, 10], [2, 3], [], [[[5, 5]], [3, 2, 5]], [3, 2]] Output [null, null, 10, [[5, 5]], null, 5] Explanation SparseMatrix sparseMatrix = new SparseMatrix(5, 5); sparseMatrix.setValue(2, 3, 10); sparseMatrix.getValue(2, 3); // return 10 SparseMatrix transposed = sparseMatrix.transpose(); // transposed matrix should have 10 at position (3, 2) SparseMatrix otherMatrix = new SparseMatrix(5, 5); otherMatrix.setValue(3, 2, 5); sparseMatrix.addMatrix(otherMatrix); sparseMatrix.getValue(3, 2); // return 5 Constraints: - 1 <= rows, cols <= 1000 - There will be at most 500 operations considering all methods. - 0 <= row, col < rows, cols - -10^9 <= value <= 10^9","solution":"class SparseMatrix: def __init__(self, rows, cols): self.rows = rows self.cols = cols self.values = {} def setValue(self, row, col, value): if value == 0: if (row, col) in self.values: del self.values[(row, col)] else: self.values[(row, col)] = value def getValue(self, row, col): return self.values.get((row, col), 0) def addMatrix(self, other): result = SparseMatrix(self.rows, self.cols) for (row, col), val in self.values.items(): result.setValue(row, col, val) for (row, col), val in other.values.items(): result.setValue(row, col, result.getValue(row, col) + val) self.values = result.values def transpose(self): transposed = SparseMatrix(self.cols, self.rows) for (row, col), val in self.values.items(): transposed.setValue(col, row, val) return transposed"},{"question":"Write a program to simulate an inventory management system for a warehouse. Constraints * 1 ≤ number of items ≤ 100,000 * 1 ≤ number of operations ≤ 100,000 Input The first line contains an integer representing the number of operations that will be performed on the inventory. Each of the following lines describes an operation. Each operation can be one of the following: 1. \\"receive k x\\" - This means that k units of item x have been received and should be added to the inventory. 2. \\"dispatch k x\\" - This means that k units of item x have been dispatched and should be subtracted from the inventory. 3. \\"check x\\" - This means that the current quantity of item x in the inventory should be checked. Output For each \\"check x\\" operation, output the current quantity of item x in the inventory. If item x has not been received yet, output 0. Example Input 8 receive 10 apples receive 5 bananas dispatch 2 apples check apples check bananas check oranges dispatch 3 bananas check bananas Output 8 5 0 2 In this example, the \\"receive 10 apples\\" operation adds 10 apples to the inventory, making the total 10. Then, \\"receive 5 bananas\\" adds 5 bananas. The \\"dispatch 2 apples\\" operation subtracts 2 apples from the inventory, resulting in 8 apples left. The \\"check apples\\" operation outputs 8. The \\"check bananas\\" operation outputs 5. Since no \\"receive\\" operation for oranges has occurred, \\"check oranges\\" outputs 0. Finally, \\"dispatch 3 bananas\\" subtracts 3 bananas, so \\"check bananas\\" outputs 2.","solution":"def inventory_management(operations): inventory = {} results = [] for operation in operations: op, *args = operation.split() if op == \\"receive\\": k, x = int(args[0]), args[1] if x in inventory: inventory[x] += k else: inventory[x] = k elif op == \\"dispatch\\": k, x = int(args[0]), args[1] if x in inventory and inventory[x] >= k: inventory[x] -= k elif op == \\"check\\": x = args[0] results.append(inventory.get(x, 0)) return results"},{"question":"There is a city with a peculiar market where different types of fruits are sold. The market stalls are arranged in a straight line, and each stall sells only one type of fruit. However, some types of fruits might be available at multiple stalls. Each type of fruit is represented by a unique integer. Given a list of integers where each integer represents the type of fruit sold at each stall in the order they appear in the market, you need to find the maximum number of consecutive stalls you can visit such that you buy at most two different types of fruits. Write a function `maxFruits(stalls: List[int]) -> int` that takes the list of integers `stalls` and returns the maximum number of consecutive stalls you can visit with no more than two different types of fruits. # Input Format - A single list of integers representing the types of fruits sold at each stall. # Output Format - An integer representing the maximum number of consecutive stalls you can visit while buying at most two different types of fruits. # Constraints - 1 ≤ len(stalls) ≤ 10^5 - 0 ≤ stalls[i] ≤ 10^4 # Sample Input ```python [1, 2, 1, 2, 3, 2, 2, 1] ``` # Sample Output ```python 4 ``` # Explanation In the example, the longest subarray with at most two types of fruits starts at index 0 and ends at index 3: [1, 2, 1, 2]. This has 4 stalls. Another possible subarray is from index 1 to index 4: [2, 1, 2, 3], but this contains a third fruit type at index 4, so it will not be considered. In this market, visiting the stalls with indices [3, 2, 2, 1] (length 4) also guarantees that you only deal with two types of fruits. # Note You can also solve this problem using the sliding window technique.","solution":"def maxFruits(stalls): This function returns the maximum number of consecutive stalls one can visit buying at most two different types of fruits. :param stalls: List[int] A list of integers where each integer represents a type of fruit. :return: int The maximum number of consecutive stalls with at most two types of fruits. from collections import defaultdict max_length = 0 left = 0 fruit_counter = defaultdict(int) for right in range(len(stalls)): fruit_counter[stalls[right]] += 1 while len(fruit_counter) > 2: fruit_counter[stalls[left]] -= 1 if fruit_counter[stalls[left]] == 0: del fruit_counter[stalls[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given an array of integers, write a function to return a new array where each element at index i of the new array is the sum of the previous i elements of the original array. Example 1: Input: array = [1, 2, 3, 4, 5] Output: [1, 3, 6, 10, 15] Explanation: For [1, 2, 3, 4, 5], the cumulative sums are: - First element: 1 - Second element: 1 + 2 = 3 - Third element: 1 + 2 + 3 = 6 - Fourth element: 1 + 2 + 3 + 4 = 10 - Fifth element: 1 + 2 + 3 + 4 + 5 = 15 Example 2: Input: array = [10, 20, 30] Output: [10, 30, 60] Explanation: For [10, 20, 30], the cumulative sums are: - First element: 10 - Second element: 10 + 20 = 30 - Third element: 10 + 20 + 30 = 60 Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function cumulativeSum() that takes an array (array), and returns the cumulative sum array. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 <= array.length <= 10^{5} -10^6 <= array[i] <= 10^6","solution":"def cumulativeSum(array): Returns a new array where each element is the sum of the previous elements. if not array: return [] result = [array[0]] for i in range(1, len(array)): result.append(result[-1] + array[i]) return result"},{"question":"In a distant galaxy, engineers have developed a new programming language called FizzLang. FizzLang uses an unusual syntax to define and evaluate mathematical operations based on string patterns. In FizzLang, a program consists of a series of blocks, where each block contains a mathematical expression. Each block can be: 1. A single positive integer (e.g., \\"42\\"). 2. Two blocks concatenated with an operator character between them, where the operator can be either \'+\' or \'*\'. The evaluation of a block follows these rules: 1. A block representing a single integer evaluates to that integer. 2. A block with format \\"A+B\\" evaluates to the sum of the evaluations of blocks A and B. 3. A block with format \\"A*B\\" evaluates to the product of the evaluations of blocks A and B. Your task is to write a program that takes a FizzLang expression as input and outputs the evaluation result of the entire expression. Consider the following example: If the input string is \\"3+5*2\\", the parsed blocks can be visualized as: - Block \\"3\\" evaluates to 3. - Block \\"5\\" evaluates to 5. - Block \\"2\\" evaluates to 2. - Block \\"5*2\\" evaluates to 10, since 5 * 2 = 10. - Block \\"3+5*2\\" evaluates to 13, since 3 + 10 = 13. Write a program that parses and evaluates the provided FizzLang expression. Input A single string representing the FizzLang expression. Output A single integer which is the result of evaluating the expression. Constraints - The string represents a valid FizzLang expression. - The length of the input string is at most 10^5. Example Sample Input 1: 3+5*2 Sample Output 1: 13 Sample Input 2: 2*3+4 Sample Output 2: 10 Sample Input 3: 2+3*4+5 Sample Output 3: 19","solution":"def evaluate_fizzlang(expression): def helper(expr, start, end): num = 0 stack = [] sign = \\"+\\" i = start while i <= end: char = expr[i] if char.isdigit(): num = num * 10 + int(char) if char in \\"+*\\" or i == end: if sign == \\"+\\": stack.append(num) elif sign == \\"*\\": stack.append(stack.pop() * num) sign, num = char, 0 i += 1 return sum(stack) return helper(expression, 0, len(expression) - 1)"},{"question":"You are given a grid with m rows and n columns, where each cell contains a certain number of coins. In one move, you can choose any cell in the grid and collect all the coins from that cell. After collecting, the number of coins in the chosen cell will be set to 0. You need to collect all the coins from the grid in the minimum number of moves required. Your task is to find and print this minimum number of moves. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of testcases. The first line of each testcase contains two integers m and n (1 le m, n le 100) — the number of rows and columns in the grid. The next m lines contain n integers each, representing the number of coins in each cell of the grid. -----Output----- For each testcase, print the answer — the minimum number of moves required to collect all the coins from the grid. -----Examples----- Input 2 2 3 0 1 2 3 0 4 3 2 1 0 0 3 2 2 Output 3 3 -----Note----- In the first example, you can collect coins in three moves: - Collect 2 coins from cell (1,3) - Collect 3 coins from cell (2,3) - Collect 1 coin from cell (2,2) In the second example, you need 3 moves to collect all the coins: - Collect 1 coin from cell (1,1) - Collect 3 coins from cell (2,2) - Collect 2 coins from cell (3,2)","solution":"def min_moves_to_collect_coins(t, test_cases): results = [] for case in test_cases: m, n, grid = case[\'m\'], case[\'n\'], case[\'grid\'] moves = 0 for row in grid: for cell in row: if cell > 0: moves += 1 results.append(moves) return results"},{"question":"Write a function that takes a list of integers and a target integer. The function should return all unique pairs of integers from the list that add up to the target. A pair is defined as a tuple of two different numbers such that their sum equals the target. Your function should avoid returning duplicate pairs. Pairs should be returned as a list of tuples sorted in ascending order by the first element of the pair. If there are multiple pairs with the same first element, sort by the second element. # Input 1. A list of integers. This list can have both positive and negative numbers and may not be sorted. 2. A target integer. # Output A list of unique pairs of integers (tuples), sorted as specified above. # Examples 1. Input: ([1, 2, 3, 4, 5], 5) Output: [(1, 4), (2, 3)] 2. Input: ([1, -1, 2, -2, 3, -3], 0) Output: [(-3, 3), (-2, 2), (-1, 1)] 3. Input: ([2, 4, 3, 5, 7, 8, 9], 10) Output: [(1, 9), (2, 8), (3, 7)] 4. Input: ([0, 1, 2, 3, 4, 5], 5) Output: [(0, 5), (1, 4), (2, 3)] 5. Input: ([1, 1, 2, 2, 3, 3], 4) Output: [(1, 3), (2, 2)] Note: The function should handle cases where no pairs sum up to the target gracefully by returning an empty list.","solution":"def find_pairs(nums, target): Finds all unique pairs of integers in the given list that add up to the target integer. nums.sort() # Sort the input list for ordered pairs seen = set() pairs = [] for i in range(len(nums)): complement = target - nums[i] if complement in seen: pairs.append((complement, nums[i])) seen.add(nums[i]) # Remove duplicates and sort pairs unique_pairs = list(set(pairs)) unique_pairs.sort() return unique_pairs"},{"question":"Given a string s representing a positive integer between 1 and 2^31 - 1, return its corresponding column title as it would appear in an Excel sheet. For example: 1 -> A 2 -> B 3 -> C ... 26 -> Z 27 -> AA 28 -> AB ... Example 1: Input: s = \\"1\\" Output: \\"A\\" Example 2: Input: s = \\"28\\" Output: \\"AB\\" Example 3: Input: s = \\"701\\" Output: \\"ZY\\" Note: The provided string will always be a valid number within the specified range.","solution":"def convert_to_title(s): Converts a string representing a positive integer to a corresponding Excel column title. n = int(s) result = [] while n > 0: n -= 1 result.append(chr(n % 26 + ord(\'A\'))) n //= 26 return \'\'.join(result[::-1])"},{"question":"You are given a list of students where each student is represented as a string (student_name) and their respective scores in three subjects as positive integers (subject1_score, subject2_score, subject3_score). You have to rank the students based on their total score, and if the total scores are the same, use the student names for comparison. Example 1: Input: N = 3 arr[] = {{\\"Alice\\", 85, 90, 80}, {\\"Bob\\", 80, 95, 85}, {\\"Charlie\\", 90, 80, 85}} Output: Bob 260, Alice 255, Charlie 255 Explanation: Bob has the highest total score, while Alice and Charlie have the same total score, so they are compared alphabetically. Example 2: Input: N = 2 arr[] = {{\\"David\\", 70, 75, 80}, {\\"Eve\\", 60, 85, 80}} Output: Eve 225, David 225 Explanation: Both David and Eve have the same total score, so they are sorted based on their names. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function rankStudents() that takes an array arr[] and an integer N as parameters and sorts the array according to the above-given conditions. The function does not return anything. Expected Time Complexity: O(NlogN). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^3","solution":"def rank_students(arr, N): Sorts students based on their total score, and if total scores are the same, use the student names for comparison. Args: arr (list of lists): List of students where each student is represented as [name, subj1, subj2, subj3] N (int): Number of students Returns: list of tuples: Sorted list of tuples in form (name, total_score) # Calculate total scores for each student for student in arr: student.append(sum(student[1:4])) # Sort students by Total score in descending order and by Name in ascending order arr.sort(key=lambda x: (-x[4], x[0])) # Extract sorted results in desired format sorted_students = [(student[0], student[4]) for student in arr] return sorted_students"},{"question":"You are given a list of strings. Your task is to find the longest common suffix among all strings. A suffix is a substring that occurs at the end of a string. Write a function that takes a list of strings and returns the longest common suffix. If there is no common suffix, return an empty string. # Input - The input is a list of strings with length from 1 to 100. - Each string\'s length is between 1 and 100 characters. # Output - Output a single string representing the longest common suffix. If there is no common suffix, return an empty string. # Examples Input ``` [\\"sprining\\", \\"spreading\\", \\"bringing\\"] ``` Output ``` \\"ing\\" ``` Input ``` [\\"apple\\", \\"banana\\", \\"orange\\"] ``` Output ``` \\"\\" ``` Input ``` [\\"cat\\", \\"bat\\", \\"rat\\"] ``` Output ``` \\"at\\" ``` # Constraints - All strings consist of lower-case English letters.","solution":"def longest_common_suffix(strings): if not strings: return \\"\\" reversed_strings = [s[::-1] for s in strings] min_length = min(len(s) for s in reversed_strings) common_suffix_reversed = [] for i in range(min_length): current_char = reversed_strings[0][i] if all(s[i] == current_char for s in reversed_strings): common_suffix_reversed.append(current_char) else: break common_suffix_reversed = \'\'.join(common_suffix_reversed) return common_suffix_reversed[::-1]"},{"question":"Given an array of integers `arr`, return all elements that appear more than n/3 times in the array, where n is the length of the array. Example 1: Input: arr = [3, 2, 3] Output: [3] Explanation: 3 appears more than n/3 times. Example 2: Input: arr = [1, 1, 1, 3, 3, 2, 2, 2] Output: [1, 2] Explanation: Both 1 and 2 appear more than n/3 times. Your Task: You don\'t need to read input or print anything. Complete the function `findMajorityElements()` which takes an array of integers `arr` as input and returns a list of elements. If no such element exists, return an empty list. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def findMajorityElements(arr): Returns a list of elements that appear more than n/3 times in the array. if not arr: return [] # Initialize candidate variables and counters candidate1, candidate2, count1, count2 = None, None, 0, 0 for num in arr: if candidate1 == num: count1 += 1 elif candidate2 == num: count2 += 1 elif count1 == 0: candidate1, count1 = num, 1 elif count2 == 0: candidate2, count2 = num, 1 else: count1 -= 1 count2 -= 1 # Verify candidates count1, count2 = 0, 0 for num in arr: if num == candidate1: count1 += 1 elif num == candidate2: count2 += 1 n = len(arr) result = [] if count1 > n // 3: result.append(candidate1) if count2 > n // 3: result.append(candidate2) return result"},{"question":"You are given an array of N integers. The beauty of an array is defined as the sum of all the distinct prime numbers that appear in the array. Your task is to modify the array such that the total beauty is maximized. You can change any element of the array to any other integer value with the condition that the new value must be between 1 and 100 inclusive. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow. The first line of each test case contains a single integer N. The second line contains N space-separated integers A_{1},A_{2},ldots,A_{N}. ------ Output ------ For each test case, output the modified array such that the total beauty is maximized. If there are multiple answers, you may output any. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ A_{i} ≤ 100 ------ Subtasks ------ Subtask #1 (100 points): Original constraints. ----- Sample Input 1 ----- 2 5 22 33 15 49 58 3 10 15 21 ----- Sample Output 1 ----- 2 3 5 7 11 2 3 5 ----- Explanation 1 ----- Test Case 1: The primes within the range 1 to 100 are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97. Replacing the elements with any 5 distinct primes will give the maximum beauty which is the sum of those 5 primes. Test Case 2: Replacing the elements with any 3 distinct primes will similarly maximize the beauty.","solution":"def get_primes_up_to_100(): Function to generate a list of prime numbers up to 100 sieve = [True] * 101 sieve[0] = sieve[1] = False for start in range(2, int(101**0.5) + 1): if sieve[start]: for multiple in range(start*start, 101, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime] def maximize_beauty(T, test_cases): Function to maximize the total beauty of the array primes = get_primes_up_to_100() results = [] for case in test_cases: N = case[0] # Take the first N primes result = primes[:N] results.append(result) return results"},{"question":"Given an integer array nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is less than k. Example 1: Input: nums = [10, 5, 2, 6] k = 100 Output: 8 Explanation: The 8 subarrays that have a product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6] Example 2: Input: nums = [1, 2, 3] k = 0 Output: 0 Explanation: There are no subarrays with product less than 0. Your Task: You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function numSubarrayProductLessThanK(), that takes an integer array nums and an integer k as parameters and returns the number of contiguous subarrays where the product of all the elements in the subarray is less than k. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ nums.length ≤ 3 * 10^4 1 ≤ nums[i] ≤ 1000 0 ≤ k ≤ 10^6","solution":"def numSubarrayProductLessThanK(nums, k): Returns the number of contiguous subarrays where the product of all the elements in the subarray is less than k. if k <= 1: return 0 prod = 1 left = 0 result = 0 for right in range(len(nums)): prod *= nums[right] while prod >= k: prod //= nums[left] left += 1 result += right - left + 1 return result"},{"question":"You are given a string of length 3 that records whether a store was open or closed on three consecutive days. The string consists of characters \'O\' for open and \'C\' for closed. Find the maximum number of consecutive days the store was open in this period. -----Constraints----- - |S| = 3 - Each character of S is O or C. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the maximum number of consecutive days the store was open in the period. -----Sample Input----- COO -----Sample Output----- 2 The store was closed on the 1st day and open on the 2nd and 3rd days in the period. Hence, the maximum number of consecutive open days is 2, so we should print 2.","solution":"def max_consecutive_open_days(S): Returns the maximum number of consecutive \'O\' characters in the string S of length 3. return max(map(len, S.split(\'C\')))"},{"question":"Alex is a software engineer at a startup company that automates warehouse management. His team is developing an algorithm to optimize the arrangement of items on the warehouse floor. Specifically, they need to identify the smallest rectangular area on the warehouse grid that can encompass all the important items marked by \'X\'. The warehouse is represented as an n x m grid of characters where each cell is either empty (\'.\') or contains an important item (\'X\'). Your task is to write a function that, given such a grid, finds the smallest rectangle that bounds all the \'X\' items and returns the coordinates of the top-left and bottom-right corners of this rectangle. -----Input----- The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1,000) — the number of rows and columns in the warehouse grid. Then follow n lines, each containing m characters (\'.\' or \'X\'), which represent the warehouse grid. -----Output----- Output four integers r1, c1, r2, c2 where (r1, c1) are the coordinates of the top-left corner and (r2, c2) are the coordinates of the bottom-right corner of the smallest rectangle that bounds all the \'X\' items. The coordinates should be 1-based. If there are no \'X\' items in the grid, print -1. -----Examples----- Input 3 4 .... .X.. ..X. Output 2 2 3 3 Input 4 5 ..... ..X.. ..X.. ..... Output 2 3 3 3 Input 4 4 .... .... .... .... Output -1","solution":"def find_smallest_rectangle(n, m, grid): top, bottom = n, -1 left, right = m, -1 # Scan the grid to find the boundaries of the rectangle that includes all \'X\' for i in range(n): for j in range(m): if grid[i][j] == \'X\': if i < top: top = i if i > bottom: bottom = i if j < left: left = j if j > right: right = j if top == n: # no \'X\' found return -1 # Convert 0-based indices to 1-based. return top + 1, left + 1, bottom + 1, right + 1"},{"question":"A company has a warehouse full of boxes, each labeled with a unique integer ID. The manager wants to create a list of all box IDs quickly, but there might be several duplicate entries for the same box in the initial list. The manager wants the final list of box IDs to be sorted in ascending order and with all duplicates removed. ----- Input: ----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains two lines of input. - First line has N denoting the number of IDs in the list. - Second line has N space-separated integers representing the box IDs. ----- Output: ----- For each test case, output in a single line the sorted list of unique box IDs. ----- Constraints: ----- - 1 leq T leq 100 - 1 leq N leq 10^4 - -10^4 leq text{Box ID} leq 10^4 ----- Sample Input: ----- 2 5 3 3 1 2 2 4 4 4 4 4 ----- Sample Output: ----- 1 2 3 4 ----- Explanation: ----- For test case 1, the initial list is [3, 3, 1, 2, 2]. After removing duplicates and sorting, the final list is [1, 2, 3]. For test case 2, the initial list is [4, 4, 4, 4]. After removing duplicates and sorting, the final list is [4].","solution":"def unique_sorted_box_ids(test_cases): Given multiple test cases, each containing a list of box IDs, return the sorted list of unique IDs for each case. results = [] for case in test_cases: n, ids = case unique_ids = sorted(set(ids)) results.append(\' \'.join(map(str, unique_ids))) return results def process_input(input_text): Process the input text and converts it into the format expected by unique_sorted_box_ids. lines = input_text.strip().split(\'n\') T = int(lines[0]) test_cases = [] line_index = 1 for _ in range(T): N = int(lines[line_index]) ids = list(map(int, lines[line_index + 1].strip().split())) test_cases.append((N, ids)) line_index += 2 return test_cases def format_results(results): Format the results from unique_sorted_box_ids for output. return \'n\'.join(results)"},{"question":"You are given an array of n integers. A subsequence of this array is called special if the sum of its elements is divisible by a given integer m. Find any special subsequence or determine that the special subsequence doesn\'t exist. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100) — the number of elements in the array and the integer by which the subsequence sum should be divisible. The second line contains n integers a_1, a_2, ..., a_n (-1000 ≤ a_i ≤ 1000) — the elements of the array. -----Output----- If such a subsequence doesn\'t exist, print in a single line \\"NO\\" (without the quotes). Otherwise, print in the first line \\"YES\\" (without the quotes) and in the second line print the indices of the elements in the special subsequence in the order they appear in the array (indices are 1-based). If there are multiple possible answers, print any of them. -----Examples----- Input 5 3 1 2 3 4 5 Output YES 1 2 Input 4 5 1 1 1 1 Output NO -----Note----- In the first sample, one possible special subsequence is formed by the first and second elements {1, 2}, giving sum 3 which is divisible by 3. Another possible subsequence is formed by the third element alone {3}, also giving a sum divisible by 3. In the second sample, there is no subsequence whose sum is divisible by 5.","solution":"def find_special_subsequence(n, m, array): Finds any special subsequence whose sum is divisible by m. for i in range(1, 1 << n): subsequence = [] subsequence_sum = 0 for j in range(n): if i & (1 << j): subsequence.append(j+1) subsequence_sum += array[j] if subsequence_sum % m == 0: return (\\"YES\\", subsequence) return (\\"NO\\",)"},{"question":"Among many programming challenges, calculating the minimum path cost in a grid is a fundamental one with numerous applications. Given a grid of size n x m consisting of positive integers, you need to determine the minimum cost to travel from the top-left corner to the bottom-right corner. You are allowed to move only right or down from a cell. -----Input----- First line: Two space-separated integers n and m, denoting the number of rows and columns respectively. Next n lines: Each line contains m space-separated integers representing the grid values. -----Output----- A single integer, the minimum cost to travel from the top-left corner to the bottom-right corner of the grid. -----Constraints----- - 1 ≤ n, m ≤ 100 - 1 ≤ grid[i][j] ≤ 1000 -----Example----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 -----Explanation----- In the example, there is a 3 x 3 grid: 1 3 1 1 5 1 4 2 1 The possible minimum cost path from the top-left to bottom-right is: 1 → 3 → 1 → 1 → 1 → 1 giving a total cost of 7.","solution":"def min_path_cost(grid): n = len(grid) m = len(grid[0]) # Create a 2D dp array dp = [[0] * m for _ in range(n)] # Initialize the top-left cell with the grid value dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Alice practices archery with her friends every weekend. They use a digital scoring system that records their scores during each session. One day, Alice decided to challenge herself by determining the pattern in which her friends’ scores fluctuate over time. She wants to analyze a specific segment of the scoring records to find out the longest contiguous subsequence of increasing scores. A segment of the score sequence is called contiguous if it appears consecutively in the sequence. A subsequence is considered increasing if each subsequent score is strictly greater than the previous one. Your task is to help Alice by writing a program that finds the longest contiguous subsequence of increasing scores in the given list of scores. Input The first line contains an integer n (1 ≤ n ≤ 105) representing the number of recorded scores. The second line contains n space-separated integers s1, s2, ..., sn (1 ≤ si ≤ 104), where si represents the score at the i-th position. Output On the first line, print an integer l representing the length of the longest contiguous subsequence of increasing scores. On the second line, print the indices of the subsequence (using 1-based indexing). If there are multiple such subsequences of the same maximum length, print the one that appears first. Examples Input 6 10 20 10 30 40 50 Output 4 3 4 5 6 Input 5 5 4 3 2 1 Output 1 1 Note In the first sample, the longest increasing subsequence is from index 3 to 6 having scores [10, 30, 40, 50]. In the second sample, every score is decreasing, so the longest increasing subsequence length is 1, which can be any single element. According to the given input, the first element is selected.","solution":"def longest_increasing_subsequence(n, scores): if n == 0: return 0, [] longest_length = 1 current_length = 1 start_idx = 0 end_idx = 0 current_start = 0 for i in range(1, n): if scores[i] > scores[i - 1]: current_length += 1 else: if current_length > longest_length: longest_length = current_length start_idx = current_start end_idx = i - 1 current_start = i current_length = 1 if current_length > longest_length: longest_length = current_length start_idx = current_start end_idx = n - 1 indices = list(range(start_idx + 1, end_idx + 2)) return longest_length, indices # Example usage: n = 6 scores = [10, 20, 10, 30, 40, 50] print(longest_increasing_subsequence(n, scores))"},{"question":"Given an array of positive integers and a target integer value, determine if there exists a subset of the given array such that the subset sum is equal to the target value. If such a subset exists, return the subset as a list. If multiple subsets exist, return any one of them. If no such subset exists, return an empty list. Example 1: Input: arr = [1, 2, 3, 7], target = 6 Output: [1, 2, 3] Explanation: The subset [1, 2, 3] adds up to 6. Example 2: Input: arr = [1, 2, 7, 1, 5], target = 10 Output: [2, 7, 1] Explanation: The subset [2, 7, 1] adds up to 10. Example 3: Input: arr = [1, 3, 4, 8], target = 6 Output: [] Explanation: There is no subset that adds up to 6. Your Task: You don\'t need to read input or print anything. Complete the function `findSubset()` which takes `arr` and `target` as input parameters and returns the subset list if found, otherwise an empty list. Expected Time Complexity: O(N * target) Expected Auxiliary Space: O(N * target) Constraints: 1 ≤ N ≤ 100 1 ≤ arr[i] ≤ 100 1 ≤ target ≤ 10^4","solution":"def findSubset(arr, target): Returns a subset of the array that sums up to the target. If multiple subsets exist, returns any one of them. If no subset exists, returns an empty list. n = len(arr) dp = [[False] * (target + 1) for _ in range(n + 1)] subset_dict = [[[] for _ in range(target + 1)] for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True # Zero sum can always be achieved with an empty subset for i in range(1, n + 1): for t in range(1, target + 1): if arr[i - 1] <= t: if dp[i - 1][t] or dp[i - 1][t - arr[i - 1]]: dp[i][t] = True subset_dict[i][t] = subset_dict[i - 1][t - arr[i - 1]] + [arr[i - 1]] if dp[i - 1][t - arr[i - 1]] else subset_dict[i - 1][t] else: dp[i][t] = False else: dp[i][t] = dp[i - 1][t] subset_dict[i][t] = subset_dict[i - 1][t] return subset_dict[n][target] if dp[n][target] else []"},{"question":"You are given a list of positive integers, and you need to determine the length of the longest subsequence such that the absolute difference between any two elements is not more than one. A subsequence is derived from the list by deleting some or no elements in such a way that the remaining elements retain their original order. Your task is to write a function that returns the length of the longest possible subsequence that meets the specified condition. -----Input----- The first line contains an integer n (1 le n le 1000) - the number of elements in the list. The second line contains n space-separated positive integers a_1, a_2, ldots, a_n (1 le a_i le 100) - the elements of the list. -----Output----- Print a single integer, the length of the longest subsequence possible. -----Examples----- Input 6 1 2 2 3 1 2 Output 5 Input 5 4 6 5 3 3 Output 3 Input 4 1 1 1 1 Output 4","solution":"def longest_subsequence_length(n, arr): Returns the length of the longest subsequence such that the absolute difference between any two elements is not more than one. Parameters: n (int): Number of elements in the list arr (list of int): List of positive integers Returns: int: Length of the longest subsequence from collections import Counter # Count occurrences of each number count = Counter(arr) max_length = 0 # Iterate through the unique numbers in the list for num in count: # Calculate the sum of count of this number and the number+1 current_length = count[num] + count.get(num + 1, 0) max_length = max(max_length, current_length) return max_length"},{"question":"Given a string S consisting of lowercase letters and an integer N, find the minimum number of changes required to make the string a palindrome by using exactly N operations, where in one operation you can change any character in the string to any other lowercase letter. Input: The first line contains a single integer T, the number of test cases. T test cases follow. Each test case comprises a string S on the first line, followed by an integer N on the second line. Output: For each test case, print a single integer, the minimum number of changes needed. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 0 ≤ N ≤ 1000 SAMPLE INPUT 2 abc 2 racecar 1 SAMPLE OUTPUT 1 0 Explanation: In the first test case, \\"abc\\" can be changed to \\"cbc\\" in exactly 1 operation, making it a palindrome. In the second test case, \\"racecar\\" is already a palindrome, so no changes are needed.","solution":"def min_changes_to_palindrome(S, N): Returns the minimum number of changes required to make string S a palindrome using exactly N operations. length = len(S) changes_needed = 0 # Calculate the number of changes needed to make the string palindrome for i in range(length // 2): if S[i] != S[length - i - 1]: changes_needed += 1 # If changes needed is less than or equal to N, it means we can make the string palindrome # but if changes needed is more than N, it means we are unable to make the string palindrome if changes_needed <= N: return changes_needed else: return -1 def process_test_cases(T, test_cases): result = [] for i in range(T): S, N = test_cases[i] result.append(min_changes_to_palindrome(S, N)) return result"},{"question":"Nina is preparing for a challenge where she has to earn the maximum amount of points possible in a given time \\"t\\". The challenge consists of two types of tasks: Regular and Special. Completing a Regular task yields \\"m\\" points, while a Special task yields \\"k\\" points. Nina requires \\"u\\" minutes to complete a Regular task and \\"v\\" minutes to complete a Special task. Given that there are \\"reg\\" Regular tasks and \\"spec\\" Special tasks available, write a function to calculate the total number of Regular and Special tasks Nina should perform to achieve the maximum score within the given time. Note: Nina will always aim to maximize her score by attempting the tasks yielding the higher points first. Example 1: Input: t = 100, m = 3, k = 6, reg = 5, spec = 3, u = 15, v = 30 Output: 0 3 Explanation: Nina can solve 3 Special tasks to get the maximum score. Example 2: Input: t = 90, m = 4, k = 7, reg = 6, spec = 4, u = 20, v = 25 Output: 2 2 Explanation: Nina can solve 2 Regular tasks and 2 Special tasks to get the maximum score. Your Task: You don\'t need to read or print anything. Your task is to complete the function maxPoints() which takes t, m, k, reg, spec, u, and v as input parameters and returns a list which contains the total number of Regular and Special tasks performed to get the maximum score. Expected Time Complexity: O(reg * spec) Expected Space Complexity: O(1) Constraints: 1 <= t <= 1000 1 <= m < k <= 100 1 <= reg, spec <= 50 1 <= u < v <= 100","solution":"def maxPoints(t, m, k, reg, spec, u, v): max_points = 0 max_reg_tasks = 0 max_spec_tasks = 0 # Try to maximize by trying all possible combinations for r in range(reg + 1): for s in range(spec + 1): total_time = r * u + s * v if total_time <= t: points = r * m + s * k if points > max_points: max_points = points max_reg_tasks = r max_spec_tasks = s return [max_reg_tasks, max_spec_tasks]"},{"question":"Given an array of integers, determine if it is possible to rearrange the elements of the array to form an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference between consecutive terms is constant. ------ Input ------ The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follow. Each test case consists of two lines. The first line contains a single integer N - the number of elements in the array. The second line contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}. ------ Output ------ For each test case, print \\"YES\\" (without quotes) if you can rearrange the given array to form an arithmetic progression. Otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 10^{5} |A_{i}| ≤ 10^{4} for each valid i ------ Subtasks ------ Subtask #1 (30 points): N ≤ 100 Subtask #2 (70 points): original constraints ------ Sample Input 1 ------ 3 3 3 5 1 4 1 4 2 3 4 1 2 4 7 ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Example case 1: One possible rearrangement is [1, 3, 5] which is an arithmetic progression with a common difference of 2. Example case 2: The array [1, 2, 3, 4] is already an arithmetic progression with a common difference of 1. Example case 3: No rearrangement of the array [1, 2, 4, 7] can form an arithmetic progression.","solution":"def can_form_arithmetic_progression(arr): Determines if an array can be rearranged to form an arithmetic progression. n = len(arr) if n == 2: return True arr.sort() diff = arr[1] - arr[0] for i in range(2, n): if arr[i] - arr[i-1] != diff: return False return True def process_test_cases(test_cases): Processes multiple test cases and determines if the arrays can be rearranged to form an arithmetic progression. results = [] for case in test_cases: n, arr = case if can_form_arithmetic_progression(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are tasked with developing a new software product\'s backend system, and as part of that, you need to implement an efficient group management feature. The requirements state that each group should have unique capabilities and identity, ensuring that each member knows how to interact within multiple layers of nested groups. Each group can either be a Simple Group or a Compound Group: - A **Simple Group** consists of a unique set of capabilities, defined as strings. - A **Compound Group** consists of groups (either Simple or Compound), defining a hierarchy or a nested structure. The uniqueness of capabilities must be preserved within a group and across its subgroups in case of a Compound Group. Write a function `merge_groups(groups: List[Union[Dict[str, List[str]], Dict[str, List[Union[Dict[str, List[str]], List[str]]]]]]) -> Dict` that takes a list of dictionaries representing the groups and their structures and combines them into a single group. The function should ensure no duplicate capabilities within the final merged group. Each group dictionary has the following structure: - `{ \\"Simple\\": [\\"capability1\\", \\"capability2\\", ...] }` for Simple Groups. - `{ \\"Compound\\": [{ \\"Simple\\": [\\"capability1\\", \\"capability2\\", ...] }, ...] }` for Compound Groups. # Constraints: - The list of groups can have at most 1000 items. - Capabilities are alphanumeric strings of length up to 20 characters. - Nested subgroups can be arbitrarily deep. # Example: ```python groups = [ { \\"Simple\\": [\\"read\\", \\"write\\"] }, { \\"Compound\\": [ { \\"Simple\\": [\\"execute\\"] }, { \\"Compound\\": [ { \\"Simple\\": [\\"delete\\", \\"write\\"] }, { \\"Simple\\": [\\"read\\", \\"upload\\"] } ] } ] } ] merged_group = merge_groups(groups) # Expected Output: # { \\"Simple\\": [\\"read\\", \\"write\\", \\"execute\\", \\"delete\\", \\"upload\\"] } ``` # Input: - `List[Union[Dict[str, List[str]], Dict[str, List[Union[Dict[str, List[str]], List[str]]]]]]`: A list of dictionaries representing the initial groups. # Output: - `Dict[str, List[str]]`: A dictionary representing the merged group with unique capabilities. # Note: - You may use any Python libraries or built-in functions deemed necessary. - Ensure your solution handles and checks for edge cases, such as deeply nested structures and repeated capabilities across different levels of the hierarchy.","solution":"from typing import Dict, List, Union def merge_groups(groups: List[Union[Dict[str, List[str]], Dict[str, List[Union[Dict[str, List[str]], List[str]]]]]]) -> Dict[str, List[str]]: def get_capabilities(group): capabilities = set() if \\"Simple\\" in group: capabilities.update(group[\\"Simple\\"]) elif \\"Compound\\" in group: for sub_group in group[\\"Compound\\"]: capabilities.update(get_capabilities(sub_group)) return capabilities all_capabilities = set() for group in groups: all_capabilities.update(get_capabilities(group)) return {\\"Simple\\": sorted(all_capabilities)} # Example usage: groups = [ { \\"Simple\\": [\\"read\\", \\"write\\"] }, { \\"Compound\\": [ { \\"Simple\\": [\\"execute\\"] }, { \\"Compound\\": [ { \\"Simple\\": [\\"delete\\", \\"write\\"] }, { \\"Simple\\": [\\"read\\", \\"upload\\"] } ] } ] } ] merged_group = merge_groups(groups) print(merged_group) # Expected Output: { \\"Simple\\": [\\"delete\\", \\"execute\\", \\"read\\", \\"upload\\", \\"write\\"] }"},{"question":"------ Problem Statement ------ Read the problem statements in Mandarin Chinese, Russian, and Vietnamese as well. There is an infinite grid of size N x N, where each cell can either be empty or have an obstacle. You are given the coordinates of P obstacles in this grid. You want to figure out whether there exists a path from the top-left corner (1, 1) to the bottom-right corner (N, N). You can only move to adjacent cells in the grid (up, down, left, right), and you cannot pass through cells with obstacles. ------ Input ------ The first line contains an integer T, denoting the number of test cases. For each test case, the first line contains two integers N and P. The next P lines contain two space-separated integers X and Y, denoting the coordinates of the obstacles. ------ Output ------ For each test case, print a single line containing \\"YES\\" if there exists a path from (1, 1) to (N, N) without passing through any obstacles. Otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^3 0 ≤ P ≤ 10^6 1 ≤ X, Y ≤ N ------ Sample Input ------ 2 5 3 3 3 3 4 4 3 5 1 5 5 ------ Sample Output ------ YES NO ------ Explanation ------ Example case 1: - There is a possible path from (1, 1) to (5, 5) avoiding all obstacles: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (2, 4) -> (2, 5) -> (3, 5) -> (4, 5) -> (5, 5). Example case 2: - The only obstacle is at (5, 5), which is the destination point itself. Therefore, there is no way to reach (5, 5).","solution":"def path_exists(N, obstacles): from collections import deque if (1, 1) in obstacles or (N, N) in obstacles: return False directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = set() queue = deque([(1, 1)]) visited.add((1, 1)) while queue: x, y = queue.popleft() if (x, y) == (N, N): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 1 <= nx <= N and 1 <= ny <= N and (nx, ny) not in obstacles and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False def find_paths(test_cases): results = [] for N, P, obstacles in test_cases: if path_exists(N, set(obstacles)): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a list of integers, write a function that returns the maximum sum of any non-empty subarray. A subarray is a contiguous part of an array. Example 1: Input: [−2,1,−3,4,−1,2,1,−5,4] Output: 6 Explanation: The subarray [4,−1,2,1] has the maximum sum 6. Example 2: Input: [1] Output: 1 Explanation: The subarray [1] has the maximum sum 1. Example 3: Input: [5,4,−1,7,8] Output: 23 Explanation: The subarray [5,4,−1,7,8] has the maximum sum 23. Note: The length of the array will be in the range [1, 10000]. The array contains values in the range [−1000, 1000].","solution":"def max_subarray_sum(nums): Returns the maximum sum of any non-empty subarray. max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an integer array A of length N representing the scores of students in a class. You need to equally divide them into two teams such that the difference in the sum of the scores of the two teams is minimized. Output the minimized difference. ------ Input ------ The first line contains an integer T denoting the number of test cases. For each test case: - The first line contains an integer N denoting the number of students (even number). - The second line contains N space-separated integers representing the scores of the students. ------ Output ------ For each test case, output a single integer corresponding to the minimized difference. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 100 1 ≤ A[i] ≤ 1000 ------ Sample Input 1 ------ 2 4 1 6 11 5 6 1 2 3 4 5 6 ------ Sample Output 1 ------ 1 1 ------ Explanation 1 ------ Example 1: - Possible divisions are {1, 6} and {11, 5}, with sums 7 and 16. - The difference is ( |7 - 16| = 9 ). - Optimal division is {1, 5, 6} and {11}, with sums 12 and 11. - The minimized difference is ( |12 - 11| = 1 ). Example 2: - Possible divisions are {1, 6}, {2, 5}, and {3, 4}, with sums 7 and 7. - The difference is ( |7 - 7| = 0 ). - Optimal division is {1, 6} and {2, 3, 5}, with sums 7 and 10. - The minimized difference is ( |7 - 10| = 3 ).","solution":"from itertools import combinations def minimize_difference(scores): total_sum = sum(scores) scores.sort() n = len(scores) half = n // 2 min_diff = float(\'inf\') # Generate all possible combinations of half of the students for teamA in combinations(scores, half): teamA_sum = sum(teamA) teamB_sum = total_sum - teamA_sum diff = abs(teamA_sum - teamB_sum) min_diff = min(min_diff, diff) return min_diff def solve(test_cases): results = [] for test in test_cases: N, scores = test results.append(minimize_difference(scores)) return results"},{"question":"In a particular game, a robot can move on a 2D grid consisting of cells. Each cell can be one of three types: 1. Empty cell (denoted by \'.\') 2. Obstacle cell (denoted by \'#\') 3. Goal cell (denoted by \'G\') The robot starts at the top-left corner of the grid (position (0, 0)) and aims to reach the Goal cell (\'G\') positioned at some cell in the grid. The robot can move up, down, left, or right, but cannot move into cells that contain an obstacle (\'#\'). The robot will only stop moving when it reaches the goal cell (\'G\') or there are no further valid moves it can make. Write a function to determine whether the robot can reach the goal cell (\'G\') from the start position. If the robot can reach the goal, print \\"YES\\", otherwise print \\"NO\\". -----Constraints----- - The grid will be a list of strings where each string represents a row. - The maximum size of the grid will be 100x100. - There will be exactly one goal cell (\'G\') on the grid. - The top-left corner of the grid (0, 0) will always be an empty cell (\'.\'). -----Input----- The input is given from Standard Input in the following format: - The first line contains two integers R and C, the number of rows and columns of the grid respectively. - The following R lines each contain a string of length C representing the grid. -----Output----- Print \\"YES\\" if the robot can reach the goal cell. Otherwise, print \\"NO\\". -----Sample Input----- 5 5 ..... ...#. .#... .#G#. ..... -----Sample Output----- YES","solution":"def can_reach_goal(R, C, grid): Determines if the robot can reach the goal cell \'G\' from the top-left corner (0, 0). Args: R : int : number of rows in the grid C : int : number of columns in the grid grid : list of str : the 2D grid as a list of strings Returns: str : \\"YES\\" if the goal can be reached, \\"NO\\" otherwise from collections import deque # Initialize a queue for BFS and a set to keep track of visited cells queue = deque([(0, 0)]) # Start from the top-left corner visited = set((0, 0)) # Define the possible movements: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y = queue.popleft() # Check if this is the goal cell if grid[x][y] == \'G\': return \\"YES\\" # Explore the neighboring cells for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and (nx, ny) not in visited and grid[nx][ny] != \'#\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"Write a function that takes two strings as input and returns a boolean indicating whether one string is a permutation of the other. A permutation is a rearrangement of characters. For example, \\"abc\\" and \\"cab\\" are permutations of each other, while \\"abc\\" and \\"abcd\\" are not. Some examples: - \\"listen\\" and \\"silent\\" are permutations of each other. - \\"hello\\" and \\"bello\\" are not permutations of each other.","solution":"def are_permutations(str1, str2): Returns True if str1 is a permutation of str2, False otherwise. if len(str1) != len(str2): return False return sorted(str1) == sorted(str2)"},{"question":"You are managing a warehouse with n containers arranged in a line. Each container has a certain amount of products. When you remove products from a container, it also affects the adjacent containers. Specifically, if you remove x products from the i-th container (reducing its number of products by x), the (i-1)-th and (i+1)-th containers, if they exist, will lose lceil frac{x}{2} rceil products each. You must make all containers empty by removing products in a certain manner. Write a program that calculates the minimum total number of products you need to remove to make all n containers empty. -----Input----- The first line contains one integer T (1 le T le 100000) — the number of test cases. Then the test cases follow, each test case begins with a line containing one integer n (1 le n le 200000) — the number of containers. Then n lines follow, each containing one integer p_i (1 le p_i le 10^{9}) — the amount of products in the i-th container. It is guaranteed that the total number of containers in all test cases does not exceed 200000. -----Output----- For each test case, print one integer — the minimum number of products you need to remove to make all containers empty. -----Examples----- Input 1 3 4 6 3 Output 9 -----Note----- None","solution":"from math import ceil def minimum_total_removals(T, cases): results = [] for case in cases: n, products = case total_removals = 0 for p in products: total_removals += p results.append(total_removals) return results def process_input(input_lines): iterator = iter(input_lines) T = int(next(iterator)) cases = [] for _ in range(T): n = int(next(iterator)) products = [int(next(iterator)) for _ in range(n)] cases.append((n, products)) return T, cases def process_output(output_values): return \'n\'.join(map(str, output_values)) # Unit tests run when this file is executed if __name__ == \\"__main__\\": import sys input = sys.stdin.read input_lines = input().strip().split(\'n\') T, cases = process_input(input_lines) results = minimum_total_removals(T, cases) output = process_output(results) print(output)"},{"question":"Given an integer array nums, return the largest integer that only occurs once. If no integer occurs once, return -1. For example, nums = [5, 3, 9, 3, 5, 7, 1], => 9 nums = [8, 8, 8, 8, 8], => -1 Note: 1. An integer array is given containing integer values, which may include positive and negative integers. 2. The array may have duplicates, and any integer that repeats should be ignored in the result. 3. If no single occurrence integer is found, return -1 as the output. 4. The solution should consider the possibility of an empty array and return -1 in such a case.","solution":"def largest_unique_number(nums): Returns the largest integer that only occurs once in the array. If no integer occurs once, returns -1. from collections import Counter # Count occurrences of each number num_counts = Counter(nums) # Find unique numbers unique_numbers = [num for num, count in num_counts.items() if count == 1] if unique_numbers: return max(unique_numbers) else: return -1"},{"question":"You are organizing a series of workshops for a professional development program. There are n workshops to be held, and each workshop has a specific duration and a strict time slot during which it can start. You need to determine the minimum number of days required to conduct all the workshops without any overlap. Each workshop i can start at the beginning of any of the given time slots and will run continuously for its designated duration. It’s important to utilize the time slots efficiently to minimize the number of days the workshops span across. ----- Input ----- First line contains an integer n — number of workshops (1 ≤ n ≤ 1000). Next n lines contain two integers, t_{i} and d_{i} (1 ≤ t_{i}, d_{i} ≤ 1000), where t_{i} is the starting time slot of the workshop i, and d_{i} is its duration. ----- Output ----- Output a single integer — the minimum number of days required to host all the workshops without overlap. ----- Examples ----- Input 3 1 4 2 3 4 1 Output 2 Input 2 1 3 3 2 Output 1 ----- Note ----- In the first sample case, workshops can be scheduled as: - Day 1: Workshop 1 (starts at 1), Workshop 2 (starts at 5) - Day 2: Workshop 3 (starts at 4) In the second sample case, workshops can be scheduled as: - Day 1: Workshop 1 (starts at 1 and ends at 3), Workshop 2 (starts at 4)","solution":"def min_days_for_workshops(n, workshops): # Sort workshops by their starting time workshops.sort(key=lambda x: x[0]) days = [] for t, d in workshops: placed = False # Check each day if we can place the current workshop without overlap for day in days: if day[-1] <= t: day.append(t + d - 1) placed = True break if not placed: # If it can\'t be placed in existing days, we need a new day days.append([t + d - 1]) return len(days)"},{"question":"A delivery company has received a set of delivery requests. Each request specifies a drop-off point and a time window during which the package must be delivered. The company wants to determine if it\'s possible to schedule all deliveries such that no two deliveries overlap in their drop-off time windows. You are given a list of delivery requests. Each request is defined by a start time and an end time. A delivery can be made at any point in the provided time window inclusive of the start and end time. Write a program to determine if it\'s possible to schedule each delivery request without any overlaps. Input The first line of the input contains an integer T specifying the number of test cases. Each test case starts with an integer N: the number of delivery requests. Each of the next N lines contains two integers, start and end, representing the start and end times of each delivery request. Output For each test case, output a single line with the word \\"POSSIBLE\\" if all deliveries can be scheduled without overlapping, or \\"IMPOSSIBLE\\" otherwise. SAMPLE INPUT 2 3 1 4 2 5 5 8 4 2 3 1 2 3 4 4 5 SAMPLE OUTPUT IMPOSSIBLE POSSIBLE","solution":"def can_schedule_deliveries(test_cases): results = [] for deliveries in test_cases: sorted_deliveries = sorted(deliveries, key=lambda x: x[1]) end_time = 0 possible = True for start, end in sorted_deliveries: if start < end_time: possible = False break end_time = end results.append(\\"POSSIBLE\\" if possible else \\"IMPOSSIBLE\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) deliveries = [] for i in range(1, N+1): start, end = map(int, lines[index + i].split()) deliveries.append((start, end)) test_cases.append(deliveries) index += N + 1 return test_cases # To use the function, we can provide input in the specified format and it will give the desired output. def process_input_output(input_str): test_cases = parse_input(input_str) results = can_schedule_deliveries(test_cases) return \\"n\\".join(results)"},{"question":"John loves playing with strings. One day, he came up with a new game where he takes a string and tries to form a palindrome by either appending characters to its end or prepending characters to its start. John wants to do this with the minimum number of character additions. A string is called a palindrome if it reads the same forward and backward. For example, \\"radar\\" and \\"level\\" are palindromes, while \\"hello\\" and \\"abc\\" are not. Write a program to help John by determining the minimum number of character additions required to make a given string a palindrome. -----Input----- The first line of input contains an integer t (1 leq t leq 100) — the number of test cases. Each of the next t lines contains a string s (1 leq |s| leq 1,000) consisting of lowercase English letters. -----Output----- For each test case, print a single integer — the minimum number of character additions required to make the given string a palindrome. -----Examples----- Input 3 ab racecar abc Output 1 0 2 -----Note----- In the first example, by appending \\"b\\" to the end, string \\"ab\\" becomes \\"aba\\" which is a palindrome. In the second example, the string \\"racecar\\" is already a palindrome, so no additions are needed. In the third example, the string \\"abc\\" can be made palindrome by appending \\"ba\\" to the end, making it \\"abcba\\".","solution":"def min_additions_to_make_palindrome(s): Determine the minimum number of character additions required to make the given string a palindrome. def is_palindrome(x): return x == x[::-1] if is_palindrome(s): return 0 for i in range(len(s)): if is_palindrome(s[i:]): return i return len(s) - 1 def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_additions_to_make_palindrome(s)) return results"},{"question":"Maria loves baking and she has baked several distinct cakes. Each cake is made up of several layers with each layer having a unique sweetness factor. Maria wants to arrange the cakes in such a way that the total sweetness difference across all layers of the cakes is minimized. The sweetness difference between two adjacent layers i and j of a cake is given by |si - sj|, where si and sj are the sweetness factors of layers i and j respectively. Your task is to help Maria arrange the layers of each cake in such a way that the sum of the absolute differences of sweetness between all consecutive layers of all cakes combined is minimized. Input The first line of the input contains an integer n (1 ≤ n ≤ 100), representing the number of cakes. Each of the next n lines contains an integer mi (1 ≤ mi ≤ 100), followed by mi space-separated integers representing the sweetness factors of the layers of the i-th cake. Output For each cake, print the integer corresponding to the minimized total sweetness difference for that cake on a new line. Examples Input 3 3 1 5 3 2 8 2 4 10 1 4 9 Output 4 6 16 Explanation In the first example, the optimal arrangement is 1, 3, 5 with differences |1-3| + |3-5| = 2 + 2 = 4. In the second example, the optimal arrangement is 2, 8 with differences |2-8| = 6. In the third example, the optimal arrangement is 1, 4, 9, 10 with differences |1-4| + |4-9| + |9-10| = 3 + 5 + 1 = 9.","solution":"def minimize_sweetness_differences(cakes): results = [] for cake in cakes: mi = cake[0] layers = sorted(cake[1:]) total_diff = 0 for i in range(len(layers) - 1): total_diff += abs(layers[i] - layers[i + 1]) results.append(total_diff) return results"},{"question":"You are given an undirected graph with n vertices and m edges. You need to determine if it is possible to divide the vertices into two non-empty groups such that there is no edge connecting vertices within the same group. This type of graph is known as a bipartite graph. Write a function to check if the given graph is bipartite and print \\"YES\\" if it is, otherwise print \\"NO\\". -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case, the first line contains two space-separated integers n and m denoting the number of vertices and edges, respectively. Each of the next m lines contains two space-separated integers ui and vi, denoting an edge between vertices ui and vi. -----Output----- For each test case, output a single line corresponding to whether the graph is bipartite - \\"YES\\" or \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ n ≤ 100 - 0 ≤ m ≤ 1000 - 1 ≤ ui, vi ≤ n - ui ≠ vi -----Example----- Input 3 3 3 1 2 2 3 3 1 4 4 1 2 2 3 3 4 4 1 5 4 1 2 3 4 2 3 4 5 Output NO YES YES -----Explanation----- In the first example, the graph forms a triangle with 3 vertices, which cannot be divided into two non-empty groups without placing two connected vertices in the same group. Therefore, the output is \\"NO\\". In the second example, the graph forms a cycle with 4 vertices, and such even-length cycles are bipartite, so the output is \\"YES\\". In the third example, the graph can be divided into two groups {1, 3, 5} and {2, 4}, with no edges within the same group, so the output is \\"YES\\".","solution":"def is_bipartite_graph(n, edges): from collections import deque, defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * (n + 1) def bfs(start): queue = deque([start]) color[start] = 0 # Start coloring with 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for vertex in range(1, n + 1): if color[vertex] == -1: if not bfs(vertex): return \\"NO\\" return \\"YES\\" def solve_bipartite_problem(test_cases): results = [] for n, m, edges in test_cases: result = is_bipartite_graph(n, edges) results.append(result) return results"},{"question":"Emily is building a machine learning algorithm based on a dataset of classified reviews. Each review has a score ranging from 1 to 5. She can perform the following operations on the dataset: 1. `add_review(s)`: Add a new review with score s to the dataset. 2. `update_review(idx, s)`: Update the review at index idx to have the new score s. 3. `delete_review(idx)`: Delete the review at index idx from the dataset. 4. `average_score()`: Calculate and return the average score of all reviews in the dataset. 5. `count_reviews_with_score(s)`: Return the count of reviews that have the exact score s. Help Emily verify her algorithm through a series of operations. Input The first line contains two integers n and q (1 ≤ n ≤ 100000; 1 ≤ q ≤ 200000) — the initial number of reviews and the number of queries. The second line contains n space-separated integers r1, r2, ..., rn (1 ≤ ri ≤ 5) — the initial scores of the reviews. The next q lines describe the q queries in one of the following formats: * \\"ADD s\\" (1 ≤ s ≤ 5) : Call add_review(s). * \\"UPD idx s\\" (1 ≤ idx ≤ current number of reviews, 1 ≤ s ≤ 5) : Call update_review(idx, s). * \\"DEL idx\\" (1 ≤ idx ≤ current number of reviews) : Call delete_review(idx). * \\"AVG\\" : Call average_score() and print the result in a single line (round to 2 decimal places). * \\"COUNT s\\" (1 ≤ s ≤ 5) : Call count_reviews_with_score(s) and print the result in a single line. Output For each average_score() and count_reviews_with_score(s) query, print the required answer in a single line. Examples Input 5 7 1 2 3 4 5 ADD 4 AVG UPD 2 5 COUNT 5 DEL 3 AVG COUNT 2 Output 3.17 2 3.75 0","solution":"class ReviewManager: def __init__(self, initial_scores): self.scores = initial_scores def add_review(self, s): self.scores.append(s) def update_review(self, idx, s): if 0 <= idx < len(self.scores): self.scores[idx] = s def delete_review(self, idx): if 0 <= idx < len(self.scores): self.scores.pop(idx) def average_score(self): if not self.scores: return 0.0 return round(sum(self.scores) / len(self.scores), 2) def count_reviews_with_score(self, s): return self.scores.count(s)"},{"question":"Chandra loves playing with numbers, especially finding patterns in sequences. Recently, she discovered a pattern in a sequence of integers and wants to check if a list of integers she has follows that specific pattern. Given a sequence of integers, Chandra wants to check if each number in the sequence (except the first one) is the double of the previous number. If the sequence follows this pattern, you need to return \'Yes\', otherwise return \'No\'. Input Format: - The first line contains an integer n, the number of integers in the sequence. - The second line contains n integers representing the sequence. Output Format: - A single string, \'Yes\' if the sequence follows the pattern, and \'No\' otherwise. Constraints: 1. 2 ≤ n ≤ 1000 2. 1 ≤ sequence[i] ≤ 10^9 Example: Input: 4 2 4 8 16 Output: Yes Input: 5 3 6 12 24 50 Output: No","solution":"def check_double_pattern(n, sequence): Returns \'Yes\' if each number in the sequence (except the first one) is the double of the previous number, otherwise \'No\' for i in range(1, n): if sequence[i] != 2 * sequence[i-1]: return \'No\' return \'Yes\'"},{"question":"A new social network has been launched, and it operates in a unique way. Each user can send \\"friend requests\\" to other users, and if the recipient accepts, both users become friends. The social network also allows users to form \\"groups,\\" where a group is defined as a set of users who are mutually friends with each other (i.e., any user in the group is a friend of every other user in that group). You have been tasked to determine the structure of these groups given a series of friend connections. Specifically, you need to find the maximum size of any group in the network. Input The first line contains two integers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105) — the number of users and the number of friend connections, respectively. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n) — indicating that user u and user v have become friends. Note that friendships are bidirectional. Output Print a single integer — the size of the largest group in the network. Examples Input 5 3 1 2 2 3 4 5 Output 3 Input 6 6 1 2 2 3 3 4 4 5 5 1 1 6 Output 6","solution":"def find_largest_group_size(n, m, connections): from collections import defaultdict, deque def bfs(node, visited, adjacency_list): queue = deque([node]) visited[node] = True size = 1 while queue: current = queue.popleft() for neighbor in adjacency_list[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) size += 1 return size adjacency_list = defaultdict(list) for u, v in connections: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = [False] * (n + 1) max_group_size = 0 for i in range(1, n + 1): if not visited[i]: group_size = bfs(i, visited, adjacency_list) max_group_size = max(max_group_size, group_size) return max_group_size"},{"question":"You are given an n x n grid representing a field, where each cell contains a positive integer indicating the height of the grass in that cell. You have a lawn mower, which can be used to cut the grass of one entire row or one entire column to height zero in one operation. You want to minimize the total number of operations needed to cut all the grass in the grid to height zero. Write a function to determine the minimum number of operations needed to cut all the grass to height zero. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the size of the grid. Each of the next n lines contains n integers, where the j-th integer is the height of the grass in the cell of the i-th row (1 ≤ the height of the grass ≤ 1000). Output Output one integer — the minimum number of operations required to cut all the grass in the grid to height zero. Examples Input 3 2 5 4 3 0 1 6 4 2 Output 3 Input 2 1 3 4 2 Output 2 Input 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Output 1 Explanation In the first example, you can cut the grass to zero in one of the possible sequences of three operations: 1. Cut the first row to zero: (0 0 0), (3 0 1), (6 4 2) 2. Cut the third column to zero: (0 0 0), (3 0 0), (6 4 0) 3. Cut the second row to zero: (0 0 0), (0 0 0), (6 4 0) In the second example, you can cut all rows or columns to zero in two operations: 1. Cut the first column to zero: (0 3), (0 2) 2. Cut the second row to zero: (0 0), (0 0) In the third example, you can cut any row or column to zero in one operation. Hence, the single operation is sufficient.","solution":"def min_operations_to_cut_all_grass(n, grid): # The minimum number of operations needed would either be n rows or n columns, # as choosing to cut rows versus columns does not change the final zeroed grid. return n"},{"question":"Write a function that takes two arrays of integers and returns a new array consisting of the integers that appear in both given arrays. The integers in the resulting array should be unique and sorted in ascending order. # Examples: ``` *Example 1* CommonElements([1, 2, 2, 3], [2, 3, 4, 5]); // Returns [2, 3] *Example 2* CommonElements([7, 8, 9], [10, 11, 7]); // Returns [7] *Example 3* CommonElements([1, 1, 1, 1], [1, 1, 1, 1]); // Returns [1] ``` In the above examples, example 1 returns [2, 3] because 2 and 3 are the only integers that appear in both arrays, and we sort them. Example 2 returns [7] because 7 is the only common integer and is unique in the result array. Example 3 returns [1] because both arrays contain only the integer 1, and it appears in both arrays multiple times, but is unique in the result. # Rules: - The order of the integers in the resulting array should be in ascending order. - The resulting array should only contain unique integers. # Input: Two arrays of integers. # Output: A sorted array of unique integers that appear in both input arrays.","solution":"def CommonElements(arr1, arr2): Returns a sorted array of unique integers that appear in both input arrays. result = list(set(arr1).intersection(arr2)) result.sort() return result"},{"question":"You\'ve been tasked with analyzing a list of integers to evaluate whether it forms an arithmetic progression (AP). In an arithmetic progression, the difference between consecutive terms is constant. Determine if the sequence of integers forms an arithmetic progression. If it is an AP, find and print the common difference. Otherwise, print \\"NO\\". -----Input----- A single line contains space-separated integers n and the sequence a_1, a_2, ..., a_n (2 ≤ n ≤ 10^5; -10^6 ≤ a_i ≤ 10^6). -----Output----- Print the common difference if the sequence forms an arithmetic progression. Otherwise, print \\"NO\\". -----Examples----- Input 4 2 4 6 8 Output 2 Input 5 3 7 11 15 20 Output NO Input 3 5 10 15 Output 5","solution":"def is_arithmetic_progression(sequence): Determines if the sequence is an arithmetic progression. Returns the common difference if it is, otherwise returns \\"NO\\". n = sequence[0] a = sequence[1:] # Check the common difference in the first two elements common_diff = a[1] - a[0] for i in range(2, n): if a[i] - a[i - 1] != common_diff: return \\"NO\\" return common_diff def process_input(input_line): Processes the input line and returns the result for whether it forms an arithmetic progression. sequence = list(map(int, input_line.split())) return is_arithmetic_progression(sequence)"},{"question":"Paul is developing a digital music player and needs help with one of the features: playlist shuffling. A playlist in the music player contains M songs, and each song has a unique ID ranging from 1 to M. The shuffle feature should ensure that every song is played exactly once in a shuffle sequence, and the sequence should be as random as possible. Paul also wants to introduce a special feature: once a song is played, it can either be played again soon (within the next G songs) or not be played again for a while (after more than B songs). This added constraint makes it challenging to shuffle the playlist while still satisfying the random nature of the shuffle. Your task is to help Paul by writing a program that generates a valid shuffle sequence for the playlist given the constraints. The program should ensure that each song is played exactly once and satisfy the \\"within G songs\\" or \\"after B songs\\" rule. Input ``` The first line contains an integer T (1 ≤ T ≤ 1000), the number of test cases. Each test case consists of three integers: M (1 ≤ M ≤ 50), G (1 ≤ G ≤ M-1), and B (1 ≤ B ≤ M-1). ``` Output ``` For each test case, output a valid shuffle sequence of song IDs satisfying the constraints. If multiple sequences are valid, output any one of them. ``` Example Input ``` 3 5 2 3 7 3 4 3 1 2 ``` Output ``` 1 2 3 4 5 1 2 3 4 5 6 7 1 2 3 ``` Note: The generated shuffle sequence should ensure that after a song is played, it is played again either within the next G songs or after more than B songs later. Hints: 1. You may use permutation generation and filtering to satisfy the constraints. 2. Remember to check both shuffle constraints for each song position.","solution":"import random def generate_shuffle_sequence(M, G, B): Generates a valid shuffle sequence for the playlist given the constraints. Parameters: M (int): Number of songs. G (int): \\"within G songs\\" constraint. B (int): \\"after more than B songs\\" constraint. Returns: list: A valid shuffle sequence of song IDs. # Create a list of song IDs songs = list(range(1, M + 1)) # Shuffle using Fisher-Yates algorithm def fisher_yates_shuffle(array): for i in range(len(array) - 1, 0, -1): j = random.randint(0, i) array[i], array[j] = array[j], array[i] return array while True: shuffled = fisher_yates_shuffle(songs.copy()) valid = True for i in range(M): for j in range(i + 1, M): distance = j - i # Ensure the constraints if shuffled[j] == shuffled[i] and (distance <= G or distance > B): valid = False break if not valid: break if valid: return shuffled def shuffle_playlist(test_cases): Generates shuffle sequences for multiple test cases. Parameters: test_cases (list): List of (M, G, B) tuples representing each test case. Returns: list: List of shuffle sequences. sequences = [] for M, G, B in test_cases: sequence = generate_shuffle_sequence(M, G, B) sequences.append(sequence) return sequences def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): M = int(data[index]) G = int(data[index + 1]) B = int(data[index + 2]) test_cases.append((M, G, B)) index += 3 sequences = shuffle_playlist(test_cases) for seq in sequences: print(\\" \\".join(map(str, seq))) if __name__ == \\"__main__\\": main()"},{"question":"You are part of a space mission and you need to write a program to ensure the proper distribution of supply crates among different space stations. Each space station requires an exact number of supply crates, and you need to determine if it is possible to fulfill all the requests with the given stock. Each crate is standardized and contains a unique item required by the space station. Among the supply crates, some have already been delivered, and you are provided with the remaining stock of each item. ---Input--- The first line of the input contains a single integer n (1 ≤ n ≤ 100 000), the number of different items requested by all space stations combined. The second line contains n integers r_{i} (1 ≤ r_{i} ≤ 10^9) representing the number of crates of the i-th item needed by the stations. The third line contains n integers s_{i} (0 ≤ s_{i} ≤ 10^9) representing the number of crates of the i-th item that remain in the stock. ---Output--- Print \\"Yes\\" if it is possible to fulfill all the requests with the given stock, otherwise print \\"No\\". ---Examples--- Input: 3 5 10 7 6 10 8 Output: Yes Input: 4 3 6 10 1 2 6 9 1 Output: No Input: 2 1 1 1 2 Output: Yes ---Note--- In the first example, the requests are 5, 10, and 7 crates respectively, and the available stocks are 6, 10, and 8 crates respectively. Since the stock can fulfill all requests, the output is \\"Yes\\". In the second example, the requests are 3, 6, 10, and 1 crates respectively, but the stock is 2, 6, 9, and 1, failing to fulfill the request for the third item which requires 10 crates but only 9 are available, thus the output is \\"No\\". In the third example, all requests for crates can be fulfilled with the available stock, so the output is \\"Yes\\".","solution":"def can_fulfill_requests(n, requested, stock): Determines if all requests for crates can be fulfilled with available stock. Parameters: n (int): Number of different items requested by all stations. requested (list): A list where each element represents crates needed for the ith item. stock (list): A list where each element represents crates in stock for the ith item. Returns: str: \\"Yes\\" if all requests can be fulfilled from stock, otherwise \\"No\\". for i in range(n): if requested[i] > stock[i]: return \\"No\\" return \\"Yes\\""},{"question":"> You are given a string `s` and a dictionary `d`. The dictionary contains unique words as keys and their definitions as values. Your task is to replace each occurrence of the dictionary\'s keys in the string `s` with their corresponding definitions. Task Write a function `replace_words(s, d)` that takes a string `s` and a dictionary `d` and returns a new string where each word in `s` that matches a key in `d` is replaced with its corresponding value from `d`. Examples Given the string `s` and the dictionary `d`: ```python s = \\"I love programming because it is fun and challenging\\" d = { \\"love\\": \\"enjoy greatly\\", \\"programming\\": \\"the act of writing computer programs\\", \\"fun\\": \\"enjoyment or amusement\\" } replace_words(s, d) # => \\"I enjoy greatly the act of writing computer programs because it is enjoyment or amusement and challenging\\" ``` Here\'s another example: ```python s = \\"Learning to code is an excellent skill\\" d = { \\"Learning\\": \\"Acquiring knowledge\\", \\"code\\": \\"write computer programs\\", \\"excellent\\": \\"outstanding\\" } replace_words(s, d) # => \\"Acquiring knowledge to write computer programs is an outstanding skill\\" ```","solution":"def replace_words(s, d): Replace each word in string \'s\' that matches a key in dictionary \'d\' with its corresponding definition. words = s.split() for i, word in enumerate(words): if word in d: words[i] = d[word] return \\" \\".join(words)"},{"question":"You are given a list of strings, each string representing a student\'s first name and their respective marks in different subjects separated by a space. Your task is to write a function that processes this list of strings and returns another list containing the student\'s names along with their average marks, sorted in descending order of the average marks. If two students have the same average marks, they should be sorted alphabetically by their names. Your function should handle the following: - Each string in the input list will contain at least the student\'s name and one subject mark. - The first word in each string is the student\'s name, and the subsequent words are their marks. - The marks are non-negative integers. **Example:** ```python students_marks = [ \\"Alice 91 85 74\\", \\"Bob 88 76 92\\", \\"Charlie 70 60\\", \\"David 88 88 88\\" ] print(calculate_average_marks(students_marks)) ``` **Output:** ```python [ \\"David 88.0\\", \\"Bob 85.3\\", \\"Alice 83.3\\", \\"Charlie 65.0\\" ] ``` In this example: 1. Alice has average marks of (91 + 85 + 74) / 3 = 83.3. 2. Bob has average marks of (88 + 76 + 92) / 3 = 85.3. 3. Charlie has average marks of (70 + 60) / 2 = 65.0. 4. David has average marks of (88 + 88 + 88) / 3 = 88.0. The function should return a list of strings with the student\'s name and their average marks formatted to one decimal place. Note that in the output \\"David\\" appears first with the highest average marks, followed by \\"Bob\\", \\"Alice\\", and then \\"Charlie\\".","solution":"def calculate_average_marks(students_marks): Processes a list of strings where each string contains a student\'s name followed by their marks in different subjects separated by spaces. Returns a list of the students names along with their average marks, sorted in descending order of the average marks. If two students have the same average marks, they should be sorted alphabetically by their names. :param students_marks: List of strings :return: List of strings with the student\'s name and their average marks student_averages = [] for entry in students_marks: parts = entry.split() name = parts[0] marks = list(map(int, parts[1:])) average = sum(marks) / len(marks) student_averages.append((name, average)) # Sort primarily by average marks (descending) and secondarily by name (ascending) student_averages.sort(key=lambda x: (-x[1], x[0])) result = [f\\"{name} {average:.1f}\\" for name, average in student_averages] return result"},{"question":"**This Kata is designed to test your understanding of string manipulation and sorting algorithms** Sorted Word Create a function called sortedWord() that takes a string argument and returns a string where the characters are sorted in lexicographical order. ```python sortedWord(\\"helloworld\\") # should return \\"dehllloorw\\" sortedWord(\\"python\\") # should return \\"hnopty\\" sortedWord(\\"kata\\") # should return \\"aakt\\" ``` Note: - The input string will only contain lowercase alphabetical characters.","solution":"def sortedWord(word): Returns a string where the characters are sorted in lexicographical order. return \'\'.join(sorted(word))"},{"question":"You are tasked to decode a series of inputs to determine if a given word can be formed using characters from a provided set of random strings. Each random string in the set can be used more than once to create the given word. Determine if it is possible to form the word with the exact characters from the strings without rearranging any characters within a single string. For example, if the word is \\"apple\\" and the set of strings is [\\"ap\\", \\"p\\", \\"ple\\"], you can form \\"apple\\" by using the strings\' characters exactly without rearranging. Input Format The first line contains an integer T, the number of test cases. Each test case consists of two inputs: - A string W, the word to form. - A number N, the number of random strings, followed by N strings separated by spaces. Constraints 1 ≤ T ≤ 100 1 ≤ length(W) ≤ 100 0 ≤ N ≤ 200 1 ≤ length(string) ≤ 50 Output Format For each test case, print \\"YES\\" if the word can be formed with the provided strings and \\"NO\\" otherwise. Sample Input 3 apple 3 ap p ple banana 2 an ban hello 2 hel lo Sample Output YES NO YES Explanation In the first test case, \\"apple\\" can be formed using [\\"ap\\", \\"p\\", \\"ple\\"]. In the second test case, \\"banana\\" cannot be formed as there are no strings providing the required characters. In the third test case, \\"hello\\" can be formed using [\\"hel\\", \\"lo\\"].","solution":"def can_form_word(word, strings): from collections import Counter word_counter = Counter(word) total_chars = Counter() for s in strings: total_chars.update(Counter(s)) for char in word_counter: if word_counter[char] > total_chars[char]: return \\"NO\\" return \\"YES\\" def decode_inputs(T, cases): results = [] for case in cases: W = case[0] N = int(case[1]) strings = case[2:] results.append(can_form_word(W, strings)) return results"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Given a string `s`, you need to create the shortest palindrome by appending characters to its front. For example, given the string `race`, the shortest palindrome we can create is `ecarace`. Function Description Complete the function `shortestPalindrome` in the editor below. `shortestPalindrome` has the following parameter(s): string s: the input string Returns string: the shortest palindrome possible by appending characters to the front Input Format A single line which contains the string `s`. Constraints 1 leq text{len(s)} leq 10^5 `s` consists of lower-case English letters only. Sample Input 0 `race` Sample Output 0 `ecarace` Explanation 0 We can prepend `ecar` to `race` to get `ecarace`, which is the shortest palindrome that can be created. Sample Input 1 `aacecaaa` Sample Output 1 `aaacecaaa` Explanation 1 We can prepend only `a` to `aacecaaa` to get `aaacecaaa`, which is the shortest palindrome that can be created.","solution":"def shortestPalindrome(s): Returns the shortest palindrome by appending characters to the front of the input string if not s: return s rev = s[::-1] comb = s + \'#\' + rev lps = [0] * len(comb) for i in range(1, len(comb)): j = lps[i - 1] while j > 0 and comb[i] != comb[j]: j = lps[j - 1] if comb[i] == comb[j]: lps[i] = j + 1 return rev[:len(s)-lps[-1]] + s"},{"question":"You have been given a string S containing lowercase alphabet characters. You need to determine the number of distinct substrings of length K that occur in the string. ------ Input ------ The first line of the input contains a single integer T, representing the number of test cases. Each of the following T lines contains a single string S and an integer K separated by space. ------ Output ------ For each test case, output a single line containing the answer for that test case. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ |S| ≤ 10^6 1 ≤ K ≤ |S| |Sum of |S| over all test cases ≤ 10^6 ------ Subtasks ------ Subtask #1 (30 points): 1 ≤ |S| ≤ 100 Subtask #2 (70 points): Original constraints ----- Sample Input 1 ------ 2 abcabc 3 aaaaaa 2 ----- Sample Output 1 ------ 3 1 ----- Explanation 1 ------ In the first case, the substrings of length 3 are \\"abc\\", \\"bca\\", \\"cab\\", \\"abc\\". The distinct substrings are \\"abc\\", \\"bca\\", \\"cab\\", so the answer is 3. In the second case, the substrings of length 2 are \\"aa\\", \\"aa\\", \\"aa\\", \\"aa\\", \\"aa\\". The distinct substring is \\"aa\\", so the answer is 1.","solution":"def number_of_distinct_substrings(S, K): Returns the number of distinct substrings of length K in the string S. substrings = set() for i in range(len(S) - K + 1): substrings.add(S[i:i+K]) return len(substrings) def process_test_cases(test_cases): results = [] for S, K in test_cases: results.append(number_of_distinct_substrings(S, int(K))) return results # Example usage: # test_cases = [(\\"abcabc\\", 3), (\\"aaaaaa\\", 2)] # print(process_test_cases(test_cases)) # Output: [3, 1]"},{"question":"Chef has a string S of length N consisting of lowercase alphabets. Chef can perform the following operation on the string: Select any substring of size 2 and swap the characters. Find the resulting lexicographically smallest string Chef can achieve by applying the above operation any (possibly zero) number of times. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains an integer N — the number of characters in the string. - The next line contains a string of length N. ------ Output Format ------ For each test case, output on a new line, the lexicographically smallest string Chef can achieve by applying the above operation any (possibly zero) number of times. ------ Constraints ------ 1 ≤ T ≤ 1000 2 ≤ N ≤ 10^{5} The string contains only lowercase English alphabets. The sum of N over all test cases won\'t exceed 2 cdot 10^{5}. ------ Sample Input 1 ------ 3 3 cba 5 geeks 4 dcba ------ Sample Output 1 ------ abc eegks abcd ------ Explanation 1 ------ In the first case, Chef can perform multiple swaps to achieve the string \\"abc\\". In the second case, the initial string \\"geeks\\" can be sorted to \\"eegks\\" using multiple swaps. In the third case, by comparing and swapping adjacent characters Chef can transform \\"dcba\\" to its lexicographically smallest form \\"abcd\\".","solution":"def lexicographically_smallest_string(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] S = test_cases[i][1] sorted_string = \'\'.join(sorted(S)) results.append(sorted_string) return results"},{"question":"In a small town, there is a famous antique store that sells various types of vintage items. The store\'s owner, Mr. Johnson, has a peculiar way of pricing his items. He uses a dynamic pricing system where the price of an item is constantly adjusted based on its demand. The more frequently an item is bought, the higher its price becomes. Conversely, if an item remains unsold for a while, its price decreases. To help him manage this pricing system, Mr. Johnson has asked for your assistance with building a program. Given a list of items and a series of transactions, you need to determine the final prices of all the items in the store. Each item initially has a price, and each transaction either increases or decreases an item\'s price by a fixed percentage. -----Input----- The input starts with a single integer n (1 le n le 1000), the number of items in the store. The next line contains n integers, where the i-th integer is the initial price of the i-th item (1 le initial_price le 1000). The third line contains an integer m (1 le m le 1000), the number of transactions. Each of the next m lines describes a transaction in the format `index operation percentage`, where `index` is the one-based index of the item (1-indexed), `operation` is either `+` or `-`, indicating an increase or decrease in the price, and `percentage` is an integer (1 le percentage le 100) representing the percentage of adjustment. -----Output----- The output should consist of a single line with n integers representing the final prices of the items, in the same order as the input list. -----Examples----- Sample Input: 3 100 200 300 4 1 + 10 2 - 20 3 + 5 1 - 10 Sample Output: 99 160 315","solution":"def adjust_prices(n, initial_prices, m, transactions): Adjust the prices of items based on given transactions. Args: n (int): Number of items. initial_prices (list): Initial prices of the items. m (int): Number of transactions. transactions (list): List of transactions, each in the format [index, operation, percentage]. Returns: list: The final prices of the items. final_prices = initial_prices[:] for transaction in transactions: index, operation, percentage = transaction if operation == \'+\': final_prices[index - 1] += final_prices[index - 1] * (percentage / 100) elif operation == \'-\': final_prices[index - 1] -= final_prices[index - 1] * (percentage / 100) # Convert prices to integers rounded to the nearest whole number final_prices = [round(price) for price in final_prices] return final_prices"},{"question":"You are given a list of strings representing names in a directory. Each name consists of lowercase letters and may contain dots (\'.\') which represent nested subdirectories. The goal is to determine the depth of the deepest directory. For instance, the name \\"a.b.c.d\\" indicates that \\"a\\" contains a subdirectory \\"b\\", which contains a subdirectory \\"c\\", which in turn contains \\"d\\". This name has a depth of 4. Your task is to write a function that takes a list of such strings and returns an integer indicating the maximum directory depth found in the list. Example: Input: 4 home.username.documents home.username.pictures.vacation home.music var.log Output: 4 Explanation: In this example, the deepest directory structure is \\"home.username.pictures.vacation\\" which has a depth of 4. Input: - The first line contains an integer \'T\' indicating the number of directory names. - T lines follow, each containing a directory name. Output: - A single integer representing the maximum depth of any directory structure in the input. Constraints: 1 ≤ T ≤ 100 1 ≤ length of each directory name ≤ 200 Sample Input 1: 3 a.b.c d.e f Sample Output 1: 3 Sample Input 2: 2 aaa bbb.ccc.ddd.eee Sample Output 2: 4","solution":"def max_directory_depth(directory_names): Returns the maximum depth of any directory structure in the input list. Parameters: directory_names (list of str): List of directory names containing nested subdirectories represented by dots (\'.\'). Returns: int: The maximum directory depth. max_depth = 0 for name in directory_names: # Calculate the depth of the current directory depth = name.count(\'.\') + 1 # Update the maximum depth if the current depth is greater max_depth = max(max_depth, depth) return max_depth"},{"question":"You are provided an integer N and an array B of length N containing N distinct integers. Write a function to determine if it is possible to rearrange the elements of the array B to form an array C such that for all 1 ≤ i < N, either C[i] is divisible by C[i-1] or C[i-1] is divisible by C[i]. If such a rearrangement is possible, print \\"YES\\" followed by any such rearrangement of B as array C in the next line. If there is no such rearrangement, print \\"NO\\". ------ Input Format ------ - The first line contains the number of test cases T. - Each test case consists of: - A single integer N on the first line representing the number of elements in B. - The next line contains N distinct integers of B. ------ Output Format ------ For each test case, output the string \\"YES\\" followed by a valid rearrangement of B, or \\"NO\\" if no such rearrangement exists. ------ Constraints ------ 1 ≤ T ≤ 1000 2 ≤ N ≤ 1000 B contains N distinct integers between 1 and 10^9. ------ Sample Input 1 ------ 3 3 3 6 9 4 4 2 1 8 2 5 10 ------ Sample Output 1 ------ YES 3 6 9 YES 4 2 1 8 YES 5 10 ------ Explanation 1 ------ Test case-1: One valid rearrangement is [3, 6, 9]. Here, 6 is divisible by 3, and 9 is divisible by 3. Test case-2: One valid rearrangement is [4, 2, 1, 8]. Here 2 is divisible by 4, 1 is divisible by 2, and 8 is divisible by 1. Test case-3: One valid rearrangement is [5, 10]. Here 10 is divisible by 5.","solution":"def can_rearrange(N, B): Determine if it is possible to rearrange the elements of array B to form an array C such that: for all 1 ≤ i < N, either C[i] is divisible by C[i-1] or C[i-1] is divisible by C[i]. # First, sorting the array B.sort() # As for all x, y in sorted B, either x % y == 0 or y % x == 0, it is enough to # try and print the sorted array as the solution. return \\"YES\\", B def process_test_cases(T, test_cases): results = [] for i in range(T): N, B = test_cases[i] rearrangement_status, rearranged_array = can_rearrange(N, B) if rearrangement_status == \\"YES\\": results.append(f\\"YESn{\' \'.join(map(str, rearranged_array))}\\") else: results.append(\\"NO\\") return results"},{"question":"Given a matrix of characters and a word, determine if the word exists in the matrix. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Write a function `exist` that takes the matrix of characters and the word as inputs and returns `True` if the word exists in the matrix and `False` otherwise. Example 1: Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCCED\\" Output: True Explanation: The word \\"ABCCED\\" can be constructed from the letters: [ (0,0), (0,1), (0,2), (1,2), (2,2), (2,1) ] Example 2: Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"SEE\\" Output: True Explanation: The word \\"SEE\\" can be constructed from the letters: [ (2,1), (2,2), (1,2) ] Example 3: Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCB\\" Output: False Explanation: The word \\"ABCB\\" cannot be constructed from the letters in the board. Your Task: You don\'t need to read input or print anything. Your task is to implement the function `exist(board, word)` that takes a matrix and a word and returns a boolean value indicating whether the word exists in the matrix. Expected Time Complexity: O(M * N * 4^L), where M and N are the dimensions of the grid and L is the length of the word. Expected Space Complexity: O(L), where L is the length of the word. Constraints: 1 <= board.length, board[i].length <= 6 1 <= word.length <= 15 board and word consist of only lowercase and uppercase English letters.","solution":"def exist(board, word): def dfs(board, word, i, j, word_index): # Base cases if word_index == len(word): return True if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[word_index]: return False # Mark the cell as visited by changing the character (avoid revisit) temp = board[i][j] board[i][j] = \'\' # Explore neighbors in the order: up, down, left, right found = dfs(board, word, i-1, j, word_index+1) or dfs(board, word, i+1, j, word_index+1) or dfs(board, word, i, j-1, word_index+1) or dfs(board, word, i, j+1, word_index+1) # Restore the cell\'s value (backtrack) board[i][j] = temp return found for row in range(len(board)): for col in range(len(board[0])): if dfs(board, word, row, col, 0): return True return False"},{"question":"Bradley is working on a robotics project and needs to plan the movement of a robot on a grid. The grid is of size n × n and contains several obstacles that the robot cannot pass through. The robot can move one cell at a time, either to the left, right, up, or down, but cannot move diagonally. Bradley wants to know the number of distinct paths the robot can take to move from the top-left corner of the grid (cell (1, 1)) to the bottom-right corner (cell (n, n)), avoiding all obstacles. The robot must only move through cells that do not contain an obstacle. Write a program to calculate the number of distinct paths. The result should be modulo 1000000007 (109 + 7). Input The first line contains an integer n (1 ≤ n ≤ 1000) — the size of the grid. Each of the next n lines contains n characters, representing the grid. Each character is either \'.\' (an empty cell) or \'#\' (an obstacle). Output Print a single integer — the number of distinct paths from the top-left to the bottom-right corner of the grid, modulo 1000000007. If there is no such path, print 0. Example Input 3 ... .#. ... Output 2 Note In the example, there are 2 distinct paths from (1, 1) to (3, 3): 1. Right → Right → Down → Down 2. Down → Down → Right → Right In both paths, the robot avoids the obstacle at (2, 2).","solution":"MOD = 1000000007 def num_paths(n, grid): if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[n-1][n-1] # Read inputs def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) grid = [] index = 1 for i in range(n): grid.append(data[index + i]) return n, grid"},{"question":"You are working on an inventory management system for a store. The store has n different types of items, each with a certain initial stock level. Throughout the day, the store receives several operations that either increase or decrease the stock levels of these items. You need to process q operations on the inventory and track the stock changes of the items in the inventory. Types of operations: Type 1: (t_i=1, x_i, y_i) — Increase the stock level of item x_i by y_i units. Type 2: (t_i=2, x_i, y_i) — Decrease the stock level of item x_i by y_i units. For each operation, ensure the stock level of an item does not drop below zero. If a decrease operation tries to reduce the stock level below zero, set the stock level to zero instead. Given this, you need to return the final stock levels of all items after processing all the operations. Input - The first line contains two integers n (1 ≤ n ≤ 1000) and q (1 ≤ q ≤ 2000), representing the number of items and the number of operations. - The second line contains n space-separated integers representing the initial stock levels of the items. - The next q lines contain three space-separated integers t_i (1 ≤ t_i ≤ 2), x_i (1 ≤ x_i ≤ n), and y_i (1 ≤ y_i ≤ 10^4), representing the operations. Output Print n space-separated integers representing the final stock levels of the items. Examples Input: 5 3 10 20 30 40 50 1 1 5 2 3 15 2 5 55 Output: 15 20 15 40 0 Input: 4 2 7 15 22 9 1 2 5 2 1 8 Output: 0 20 22 9 Note In the first sample input: - The initial stock levels are [10, 20, 30, 40, 50]. - First operation increases the stock of item 1 by 5 units, resulting in the stock levels [15, 20, 30, 40, 50]. - Second operation decreases the stock of item 3 by 15 units, resulting in the stock levels [15, 20, 15, 40, 50]. - Third operation decreases the stock of item 5 by 55 units, but since it cannot go below zero, the stock level is set to zero, resulting in the final stock levels [15, 20, 15, 40, 0]. In the second sample input: - The initial stock levels are [7, 15, 22, 9]. - First operation increases the stock of item 2 by 5 units, resulting in the stock levels [7, 20, 22, 9]. - Second operation decreases the stock of item 1 by 8 units, but since it cannot go below zero, the stock level is set to zero, resulting in the final stock levels [0, 20, 22, 9].","solution":"def process_inventory(n, q, initial_stock, operations): stock = initial_stock[:] for op in operations: t, x, y = op if t == 1: stock[x - 1] += y elif t == 2: stock[x - 1] = max(0, stock[x - 1] - y) return stock"},{"question":"An ancient scripture reveals a hidden message that can only be decoded by calculating the prime factors of a large number. Your task is to help decipher the message by determining the total number of prime factors (including repetitions) of the given number. Input A single line consisting of an integer N. Output A single line denoting the total number of prime factors of N. Constraints 1 ≤ N ≤ 10^9 Example Input: 12 Output: 3 Explanation The prime factorization of 12 is 2 × 2 × 3, which accounts for 3 prime factors in total.","solution":"def total_prime_factors(n): Returns the total number of prime factors of n, including repetitions. count = 0 # Check for number of 2s in n while n % 2 == 0: count += 1 n //= 2 # Check for other primes from 3 upwards factor = 3 while factor * factor <= n: while n % factor == 0: count += 1 n //= factor factor += 2 # If remaining n is a prime number greater than 2 if n > 2: count += 1 return count"},{"question":"Given an integer array nums and an integer target, find the number of non-empty subarrays such that the product of their elements is less than target. Example 1: Input: nums = [10, 5, 2, 6], target = 100 Output: 8 Explanation: The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6] Example 2: Input: nums = [1, 2, 3], target = 0 Output: 0 Constraints: 1 <= nums.length <= 50000 1 <= nums[i] <= 1000 1 <= target <= 109","solution":"def num_subarrays_with_product_less_than_target(nums, target): Returns the number of non-empty subarrays such that the product of their elements is less than the target. if target <= 1: return 0 product = 1 count = 0 left = 0 for right in range(len(nums)): product *= nums[right] while product >= target: product //= nums[left] left += 1 count += right - left + 1 return count"},{"question":"You are given a string S consisting of lowercase English letters and an integer K. Your task is to determine if the string can be transformed into a palindrome by changing at most K characters. If it is possible, print \\"YES\\", otherwise print \\"NO\\". A palindrome is a string that reads the same from left to right and from right to left. ------ Input Format ------ - The first line contains a single integer T denoting the number of test cases. - Each of the next T lines contains a string S and an integer K separated by space. ------ Output Format ------ For each test case, output on a single line \\"YES\\" if the string can be transformed into a palindrome using at most K changes, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100 0 ≤ K ≤ |S| ------ Sample Input 1 ------ 3 abca 1 abcd 1 abcde 2 ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test case 1: By changing the last \'a\' to \'c\', the string becomes \\"abccba\\", which is a palindrome. Only 1 change is needed, so the output is \\"YES\\". Test case 2: To convert \\"abcd\\" to a palindrome, we need at least 2 changes (\'b\' to \'c\' and \'d\' to \'a\'), but since K=1, it\'s not possible, so the output is \\"NO\\". Test case 3: By changing \'b\' to \'e\' and \'d\' to \'e\', the string becomes \\"aeccea\\", which is a palindrome. We need 2 changes and K=2, so the output is \\"YES\\".","solution":"def can_transform_to_palindrome(s, k): # Calculate number of changes needed to make the string a palindrome mismatch_count = 0 n = len(s) for i in range(n // 2): if s[i] != s[n - i - 1]: mismatch_count += 1 # Check if the mismatches can be covered within k changes if mismatch_count <= k: return \\"YES\\" else: return \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): s, k = test_cases[i] k = int(k) result = can_transform_to_palindrome(s, k) results.append(result) return results"},{"question":"Larry is planning to attend a series of professional development workshops. For his attendance to be beneficial, he needs to satisfy the following criteria for each workshop: - Spend at least `a` minutes actively participating in the workshop. - Have a takeaway of at least `b` pieces of actionable advice by the end of the workshop. - Participate in the Q&A session which must end within `c` minutes of the scheduled timeline. You are given the following details for each workshop: - Participation time of Larry in the workshop (`p` minutes). - Number of actionable advice he gained (`q` pieces). - The time (in minutes) within which the Q&A session ended (`r` minutes from the scheduled timeline). Determine whether Larry will benefit from the workshop based on the provided criteria. ------ Input ------ The first line of the input contains a single integer `n` denoting the number of workshops. The description of `n` workshops follows. The first and only line of each workshop\'s data contains six space-separated integers `a`, `p`, `b`, `q`, `c`, and `r`. ------ Output ------ For each workshop, print a single line containing the string \\"YES\\" if Larry will benefit from the workshop or \\"NO\\" if he will not. You may print each character of the string in uppercase or lowercase (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will all be treated as identical). ------ Constraints ------ 1 ≤ n ≤ 5,000 30 ≤ a, p ≤ 240 5 ≤ b, q ≤ 50 0 ≤ c, r ≤ 15 ----- Sample Input 1 ------ 3 60 90 15 20 5 3 120 100 10 12 10 15 45 120 20 25 8 7 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Example case 1: Larry met the criteria for participation time, actionable advice, and Q&A session duration. Example case 2: Larry did not spend enough time actively participating. Example case 3: Larry met all criteria for beneficial attendance.","solution":"def larry_benefit(workshops): result = [] for workshop in workshops: a, p, b, q, c, r = workshop if p >= a and q >= b and r <= c: result.append(\\"YES\\") else: result.append(\\"NO\\") return result # Sample use workshops = [ [60, 90, 15, 20, 5, 3], [120, 100, 10, 12, 10, 15], [45, 120, 20, 25, 8, 7] ] print(larry_benefit(workshops)) # Expected: [\'YES\', \'NO\', \'YES\']"},{"question":"In a faraway land, there exists a unique form of currency known as \\"Lunar Coins\\". The Lunar Coins come in different denominations but are always powers of 2: 1, 2, 4, 8, 16, and so on. An aspiring Software Engineer named Jason has recently moved to this place and wants to design a vending machine operating system that can handle transactions smoothly using Lunar Coins. To do so, Jason needs to write a function to determine the minimum number of Lunar Coins needed to make a given amount of money. Can you help Jason by writing this function? **Input** The input consists of a single line containing a positive integer n (1 ≤ n ≤ 10^9), representing the amount of money for which Jason needs to determine the minimum number of Lunar Coins. **Output** Print a single integer: the minimum number of Lunar Coins needed to make the amount n. **Examples** Input 6 Output 2 Input 15 Output 4 **Explanation** In the first example, 6 can be made with the coins 4 and 2, so the minimum number of coins is 2. In the second example, 15 can be made with the coins 8, 4, 2, and 1, so the minimum number of coins is 4. **Note** To solve this problem, note that Lunar Coins being powers of 2 means each coin represents a bit position in the binary representation of the number. For instance, the number 15 is represented as `1111` in binary, which corresponds to the coins 8, 4, 2, and 1.","solution":"def min_lunar_coins(n): Returns the minimum number of Lunar Coins needed to make the amount n. # The number of 1s in the binary representation of n gives the minimum number of Lunar Coins needed. return bin(n).count(\'1\')"},{"question":"A software company is developing a new mapping application, and you have been hired as a software engineer to handle part of the project. Your task is to implement a function that can handle and manipulate geographical areas defined as rectangular zones on a coordinate plane. A rectangular zone is represented by two points: the bottom-left corner and the top-right corner of the rectangle. The following operations are required for the application: 1. Add a new rectangular zone. 2. Find if a point lies inside any of the existing rectangular zones. 3. Find the smallest rectangular zone that contains all the existing rectangular zones. You need to implement a function that processes a sequence of operations and queries on these rectangular zones. # Input The first line of the input contains an integer `m` (1 ≤ m ≤ 100,000), the number of operations or queries. Each of the following `m` lines describes an operation or a query: - An operation to add a new rectangle is of the form: `add x1 y1 x2 y2` where `x1`, `y1` are the coordinates of the bottom-left corner, and `x2`, `y2` are the coordinates of the top-right corner of the rectangle (both inclusive). It is guaranteed that `x1 ≤ x2` and `y1 ≤ y2`. - A query to check if a point lies inside any rectangle is of the form: `contains x y` where `x`, `y` are the coordinates of the point. - A query to find the smallest rectangle containing all added rectangles is of the form: `minimal` # Output For each `contains` query, output \\"YES\\" if the point lies inside any rectangle, otherwise output \\"NO\\". For each `minimal` query, output the coordinates of the bottom-left and top-right corners of the smallest rectangular zone that contains all added rectangles. # Example Input: ``` 6 add 1 1 4 4 add 2 2 6 5 contains 3 3 contains 6 6 minimal add 7 3 8 4 ``` Output: ``` YES NO 1 1 6 5 ``` # Note: - A point `(x, y)` is considered to be inside the rectangle if `x1 <= x <= x2` and `y1 <= y <= y2`. - For the `minimal` operation, if no rectangles have been added yet, it should be ignored as it will not produce any meaningful output.","solution":"class GeographicalZones: def __init__(self): self.rectangles = [] def add(self, x1, y1, x2, y2): self.rectangles.append((x1, y1, x2, y2)) def contains(self, x, y): for (x1, y1, x2, y2) in self.rectangles: if x1 <= x <= x2 and y1 <= y <= y2: return \\"YES\\" return \\"NO\\" def minimal(self): if not self.rectangles: return None min_x1 = min(rect[0] for rect in self.rectangles) min_y1 = min(rect[1] for rect in self.rectangles) max_x2 = max(rect[2] for rect in self.rectangles) max_y2 = max(rect[3] for rect in self.rectangles) return (min_x1, min_y1, max_x2, max_y2) def process_operations(m, operations): geo_zones = GeographicalZones() results = [] for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \\"add\\": x1, y1, x2, y2 = map(int, parts[1:]) geo_zones.add(x1, y1, x2, y2) elif cmd == \\"contains\\": x, y = map(int, parts[1:]) results.append(geo_zones.contains(x, y)) elif cmd == \\"minimal\\": result = geo_zones.minimal() if result: results.append(\\" \\".join(map(str, result))) return results"},{"question":"Given an array of integers nums representing the numbers of candies distributed to each child and an integer extraCandies. You need to determine whether if you give all extraCandies to one child, they could have the greatest number of candies among all the children. Note that multiple children can share the greatest number of candies. Return a boolean array result of length nums.length, where result[i] is true if, after giving the extraCandies to the ith child, they will have the greatest number of candies among all the children, or false otherwise. Example 1: Input: nums = [2,3,5,1,3], extraCandies = 3 Output: [true,true,true,false,true] Explanation: Child 1: 2 + 3 = 5 which is the greatest number of candies. Child 2: 3 + 3 = 6 which is the greatest number of candies. Child 3: 5 + 3 = 8 which is the greatest number of candies. Child 4: 1 + 3 = 4 which is not the greatest number of candies. Child 5: 3 + 3 = 6 which is the greatest number of candies. Example 2: Input: nums = [4,2,1,1,2], extraCandies = 1 Output: [true,false,false,false,false] Explanation: Child 1: 4 + 1 = 5 which is the greatest number of candies. Child 2: 2 + 1 = 3 which is not the greatest number of candies. Child 3: 1 + 1 = 2 which is not the greatest number of candies. Child 4: 1 + 1 = 2 which is not the greatest number of candies. Child 5: 2 + 1 = 3 which is not the greatest number of candies. Example 3: Input: nums = [12,1,12], extraCandies = 10 Output: [true,false,true] Explanation: Child 1: 12 + 10 = 22 which is the greatest number of candies. Child 2: 1 + 10 = 11 which is not the greatest number of candies. Child 3: 12 + 10 = 22 which is the greatest number of candies. Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100 1 <= extraCandies <= 50","solution":"def kidsWithCandies(nums, extraCandies): Determine whether giving extraCandies to each child would allow them to have the greatest number of candies among all the children. :param nums: List of integers representing the number of candies each child has. :param extraCandies: Integer representing the extra candies. :return: List of boolean values. max_candies = max(nums) result = [(candies + extraCandies) >= max_candies for candies in nums] return result"},{"question":"Write a function that detects the longest palindrome in a given string and returns the palindrome along with its starting index. If there are multiple longest palindromes with the same maximum length, return the first one that appears in the string. A palindrome is a string that reads the same backward as forward. # Function Signature ```python def longest_palindrome(s: str) -> (str, int): ``` # Input - `s` (1 ≤ |s| ≤ 1000): A non-empty string consisting of lowercase English letters. # Output - A tuple containing the longest palindrome in the string and its starting index as described above. # Example Input: ```python \\"babad\\" ``` Output: ```python (\'bab\', 0) ``` Input: ```python \\"cbbd\\" ``` Output: ```python (\'bb\', 1) ``` Input: ```python \\"racecar\\" ``` Output: ```python (\'racecar\', 0) ``` # Hint - Consider using dynamic programming or expanding around the center to efficiently find the longest palindrome.","solution":"def longest_palindrome(s: str) -> (str, int): Returns the longest palindromic substring in s and its starting index. if len(s) <= 1: return (s, 0) start, max_length = 0, 1 def expand_around_center(left: int, right: int) -> (int, int): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(len(s)): # Odd length palindromes left1, right1 = expand_around_center(i, i) if right1 - left1 + 1 > max_length: start, max_length = left1, right1 - left1 + 1 # Even length palindromes left2, right2 = expand_around_center(i, i + 1) if right2 - left2 + 1 > max_length: start, max_length = left2, right2 - left2 + 1 return (s[start:start + max_length], start)"},{"question":"Given an integer, return its corresponding column title as it appears in an Excel sheet. For example: 1 -> A 2 -> B 3 -> C ... 26 -> Z 27 -> AA 28 -> AB ... Example 1: Input: 1 Output: \\"A\\" Example 2: Input: 28 Output: \\"AB\\" Example 3: Input: 701 Output: \\"ZY\\"","solution":"def number_to_excel_column(n): Converts a given integer to its corresponding Excel column title. Args: n: int - the integer to be converted Returns: string - the Excel column title result = \'\' while n > 0: n -= 1 result = chr(n % 26 + 65) + result n //= 26 return result"},{"question":"Alex is organizing a multi-part marathon for his friends. Each part of the marathon has different lengths and friends have different speeds. Given the lengths of each part of the marathon and the corresponding speeds of each friend, determine the total time it will take for each friend to complete the entire marathon. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) - the number of parts in the marathon. The second line contains n space-separated integers l1, l2, ..., ln (1 ≤ li ≤ 1000) - the lengths of each part of the marathon respectively. The third line contains n space-separated integers s1, s2, ..., sn (1 ≤ si ≤ 1000) - the speeds of the friends respectively, where si corresponds to the speed of the friend in the i-th part of the marathon. -----Output----- Print a single line containing n space-separated integers, where the i-th integer represents the total time in hours (rounded up to the nearest whole number) it took the i-th friend to complete the marathon. -----Examples----- Input 3 3 6 9 1 2 3 Output 18 9 6 -----Note----- In the first sample, each friend takes a different time to complete each part of the marathon because their speeds are different. The total time for each friend to complete the marathon is calculated by summing up the times taken for each part and rounding up to the nearest whole number.","solution":"import math def total_time_to_complete_marathon(lengths, speeds): Given the lengths of each part of the marathon and the corresponding speeds of each friend, determine the total time it will take for each friend to complete the entire marathon, rounded up to the nearest whole number. Parameters: lengths (list): List of integers representing the lengths of each part of the marathon. speeds (list): List of integers representing the speeds of each friend in each part of the marathon. Returns: list: List of integers where each integer represents the total time in hours rounded up to the nearest whole number it took each friend to complete the marathon. n = len(lengths) # number of parts in the marathon total_time = [] for i in range(n): time = lengths[i] / speeds[i] total_time.append(math.ceil(time)) return total_time"},{"question":"Given an array of positive integers, determine the length of the longest subsequence where the difference between consecutive elements is the same. A subsequence is derived from the array by deleting some or none of the elements without changing the order of the remaining elements. You need to write a function that takes as input an array of integers and returns an integer representing the length of the longest arithmetic subsequence. Function signature: `def longest_arithmetic_subsequence(arr: List[int]) -> int:` **Examples:** 1. `longest_arithmetic_subsequence([3, 6, 9, 12])` should return `4`. 2. `longest_arithmetic_subsequence([9, 4, 7, 2, 10])` should return `3`. 3. `longest_arithmetic_subsequence([20, 1, 15, 3, 10, 5, 8])` should return `4`. **Constraints:** - The length of the array will be in the range [1, 1000]. - All integers in the array will be in the range [0, 10000].","solution":"from typing import List def longest_arithmetic_subsequence(arr: List[int]) -> int: if len(arr) <= 1: return len(arr) # Dictionary to store lengths of arithmetic subsequences with common differences for each index dp = [{} for _ in range(len(arr))] max_length = 1 for i in range(1, len(arr)): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"Leaderboards are a common feature in many online coding platforms. You are given a leaderboard containing the scores of participants in a coding contest and you need to determine the rank of a certain participant. Each participant is identified by a unique ID and has a score associated with them. In case of a tie (i.e., multiple participants having the same score), they should receive the same rank, and the next rank should be adjusted accordingly. # Input - The first line contains two integers `N` and `Q` where `N` is the number of participants and `Q` is the number of queries. - The next `N` lines each contain a participant ID (a string) and their score (an integer). - The following `Q` lines each contain a participant ID for which you need to determine their rank. # Output For each query, output a single integer — the rank of the participant with the given ID. # Constraints - `1 ≤ N, Q ≤ 1000` - Participant IDs consist of alphanumeric characters and have a maximum length of 20. - Scores are integers between `0` and `100`. # Example Input ``` 5 3 alice 95 bob 100 charlie 90 diana 95 elena 105 alice charlie diana ``` Output ``` 2 5 2 ``` # Explanation - Participants sorted by scores (descending) with their ranks: - elena: 105 (Rank 1) - bob: 100 (Rank 2) - alice: 95 (Rank 3) - diana: 95 (Rank 3) - charlie: 90 (Rank 5) - alice and diana share the same score of 95, so they share the third rank. - The ranks for the queries are: - alice: Rank 3 - charlie: Rank 5 - diana: Rank 3","solution":"def determine_ranks(N, participants, Q, queries): Determine the ranks of specific participants based on their scores. Parameters: N (int): Number of participants. participants (list of tuples): List containing tuples with ID and score. Q (int): Number of queries. queries (list): List of participant IDs for the queries. Returns: list: Ranks of the queried participant IDs. # Create a sorted list of participants sorted by score (desc) and ID (asc) sorted_participants = sorted(participants, key=lambda x: (-x[1], x[0])) # Create dictionary to store ranks rank_dict = {} current_rank = 1 prev_score = None for idx, (participant_id, score) in enumerate(sorted_participants): if prev_score is None or prev_score != score: current_rank = idx + 1 rank_dict[participant_id] = current_rank prev_score = score # Find ranks for each query result = [rank_dict[query] for query in queries] return result # Function to parse input and call \'determine_ranks\' def leaderboard(input_data): lines = input_data.strip().split(\\"n\\") N, Q = map(int, lines[0].split()) participants = [tuple(line.split()) for line in lines[1:N+1]] participants = [(p[0], int(p[1])) for p in participants] queries = [line for line in lines[N+1:N+1+Q]] return determine_ranks(N, participants, Q, queries)"},{"question":"# Common Subsequence Length Given two strings, determine the length of their longest common subsequence. The longest common subsequence is defined as the longest sequence that can be derived from both strings by removing some characters (without reordering the remaining characters). Write a function `longest_common_subsequence(s1, s2)` that takes two strings as input and returns an integer representing the length of their longest common subsequence. **Example:** ``` Input: s1 = \\"abcde\\" s2 = \\"ace\\" Output: 3 Explanation: The longest common subsequence is \\"ace\\" and its length is 3. ``` ``` Input: s1 = \\"abc\\" s2 = \\"def\\" Output: 0 Explanation: There is no common subsequence between the two strings. ``` **Constraints:** - The length of both input strings will not exceed 1000.","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence between two given strings. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You have a sequence of integers `a1, a2, ..., an`. You need to determine if you can reorder the sequence such that no two adjacent elements have the same parity. -----Constraints----- - 1 ≤ n ≤ 2 × 10^5 - 1 ≤ ai ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: n a1 a2 ... an -----Output----- Print \\"Yes\\" if the sequence can be reordered as described, otherwise print \\"No\\". -----Examples----- Input 1: 5 1 2 3 4 5 Output 1: Yes Input 2: 4 2 4 6 8 Output 2: No -----Explanation----- In the first example, one possible valid reordering is [2, 1, 4, 3, 5], where no two adjacent elements have the same parity. In the second example, since all the elements are even, it is impossible to reorder them to meet the condition.","solution":"def can_reorder_to_alternate_parity(n, sequence): Determines if the given sequence can be reordered such that no two adjacent elements have the same parity. odd_count = sum(1 for x in sequence if x % 2 != 0) even_count = n - odd_count # Check if the difference between counts is at most one if abs(odd_count - even_count) <= 1: return \\"Yes\\" else: return \\"No\\" # Example Usage: # sequence = [1, 2, 3, 4, 5] # n = len(sequence) # print(can_reorder_to_alternate_parity(n, sequence)) # Output: \\"Yes\\""},{"question":"A company organizes a coding competition where participants solve problems over multiple rounds. Each round consists of a fixed number of problems. At the end of each round, scores are assigned based on the correctness and efficiency of the solutions. Participants get an integer score per problem, and the total score for each participant in a round is the sum of their scores for all problems in that round. Given the scores for each participant across all rounds, you need to determine the winner. - A participant has the highest total score accumulatively across all rounds. - If multiple participants have the same highest score, the one who scored higher in the most recent round wins. INPUT The first line contains T, the number of test cases. Each test case starts with two integers, N and R, representing the number of participants and the number of rounds, respectively. The following N lines each contain R integers, representing the scores of a participant across all rounds. OUTPUT For each test case, print the zero-based index of the participant who wins the competition. CONSTRAINTS 1 ≤ T ≤ 50 1 ≤ N, R ≤ 50 Scores are non-negative integers and will not exceed 100. SAMPLE INPUT 2 3 3 10 20 30 15 25 35 20 25 30 2 4 5 10 15 20 10 20 30 40 SAMPLE OUTPUT 1 1 Explanation For the first test case: - Participant 0 scores a total of 60. - Participant 1 scores a total of 75. - Participant 2 scores a total of 75. Participants 1 and 2 have the same total score, but Participant 1 scored higher in the most recent round (35 vs. 30). For the second test case: - Participant 0 scores a total of 50. - Participant 1 scores a total of 100. Participant 1 has the highest total score.","solution":"def get_winner(test_cases): winners = [] for case in test_cases: N, R, scores = case max_total_score = -1 max_total_score_index = -1 max_recent_round_score = -1 for i in range(N): total_score = sum(scores[i]) recent_round_score = scores[i][-1] if (total_score > max_total_score) or (total_score == max_total_score and recent_round_score > max_recent_round_score): max_total_score = total_score max_total_score_index = i max_recent_round_score = recent_round_score winners.append(max_total_score_index) return winners # Read input def process_input(raw_input): lines = raw_input.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, R = map(int, lines[index].split()) index += 1 scores = [] for _ in range(N): scores.append(list(map(int, lines[index].split()))) index += 1 test_cases.append((N, R, scores)) return test_cases def main(raw_input): test_cases = process_input(raw_input) winners = get_winner(test_cases) print(\\"n\\".join(map(str, winners))) raw_input = 2 3 3 10 20 30 15 25 35 20 25 30 2 4 5 10 15 20 10 20 30 40 main(raw_input.strip())"},{"question":"Given a string s, an anagram of a string is another string that contains the same characters, only the order of characters can be different. Your task is to determine the minimum number of characters that need to be deleted from both strings to make them anagrams of each other. Return the number of deletions required. Example 1: Input: s1 = \\"abc\\", s2 = \\"cde\\" Output: 4 Explanation: You need to remove \'a\' and \'b\' from \\"abc\\" and \'d\' and \'e\' from \\"cde\\" to make them anagrams. Example 2: Input: s1 = \\"aabbcc\\", s2 = \\"bbaacc\\" Output: 0 Explanation: Both strings are already anagrams of each other. Example 3: Input: s1 = \\"hello\\", s2 = \\"billion\\" Output: 6 Explanation: Remove \'h\', \'e\', ‘l’, and \'o\' from \\"hello\\" and \'b\', \'i\', \'i\', \'o\', \'n\' from \\"billion\\" to make them anagrams. Example 4: Input: s1 = \\"abcdef\\", s2 = \\"fghijk\\" Output: 10 Constraints: 1 <= s1.length, s2.length <= 1000 s1 and s2 consist of lowercase English letters.","solution":"from collections import Counter def min_deletions_to_make_anagrams(s1, s2): This function returns the minimum number of deletions required to make two strings anagrams of each other. :param s1: string :param s2: string :return: int counter1 = Counter(s1) counter2 = Counter(s2) # find characters that are in s1 but not in s2 and vice versa unique_to_s1 = counter1 - counter2 unique_to_s2 = counter2 - counter1 return sum(unique_to_s1.values()) + sum(unique_to_s2.values())"},{"question":"Given an undirected graph with N vertices and M edges, determine if the graph contains a Hamiltonian cycle or not. A Hamiltonian cycle is a cycle that visits each vertex exactly once and returns to the starting vertex. Example 1: Input: N = 4, M = 6 graph = {{0, 1}, {0, 2}, {0, 3}, {1, 2}, {1, 3}, {2, 3}} Output: True Explanation: One possible Hamiltonian cycle is 0 -> 1 -> 2 -> 3 -> 0. Example 2: Input: N = 5, M = 5 graph = {{0, 1}, {0, 2}, {1, 3}, {1, 4}, {3, 4}} Output: False Explanation: There is no Hamiltonian cycle in the graph. Your Task: You don\'t need to read input or print anything. Your task is to complete the function hasHamiltonianCycle() which takes an integer N, an integer M, and a 2D matrix graph denoting the edges, and returns a boolean value as the output. Expected Time Complexity: O(N!) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10 1 <= M <= N*(N-1)/2 0 <= graph[i][0], graph[i][1] < N","solution":"def hasHamiltonianCycle(N, M, graph): Determines if the graph contains a Hamiltonian cycle. :param N: Number of vertices :param M: Number of edges :param graph: List of pairs representing the edges of the graph :return: True if there is a Hamiltonian cycle, False otherwise from collections import defaultdict def isHamCycle(v, visited, path): if len(path) == N: return path[0] in adj[path[-1]] for neighbor in adj[v]: if neighbor not in visited: visited.add(neighbor) path.append(neighbor) if isHamCycle(neighbor, visited, path): return True visited.remove(neighbor) path.pop() return False if M < N: return False adj = defaultdict(set) for u, v in graph: adj[u].add(v) adj[v].add(u) for start in range(N): visited = {start} path = [start] if isHamCycle(start, visited, path): return True return False"},{"question":"Alice and Bob are playing a game on a 2D grid of size N x N. Initially, Alice places X\'s on some cells of the grid and Bob places O\'s on the remaining cells. The game alternates turns, starting with Alice. On each turn, the player must choose one of their symbols (\'X\' for Alice or \'O\' for Bob) on the grid and change it to the opponent\'s symbol. The game ends when the entire grid consists of the same symbol. Determine if Alice can make sure that the entire grid consists of \'X\'s by the end of the game, assuming both players play optimally. Input: - A single integer N, the size of the grid (1 <= N <= 100). - N lines of strings, each of length N, representing the initial setup of the grid. Output: - \\"Alice\\" if Alice can ensure the grid becomes entirely \'X\'s. - \\"Bob\\" otherwise. Example Input 3 XOX OXO XOX Output Alice","solution":"def can_alice_win(grid): n = len(grid) x_count = sum(row.count(\'X\') for row in grid) o_count = n * n - x_count return \\"Alice\\" if x_count > o_count else \\"Bob\\""},{"question":"A delivery service company is analyzing the efficiency of its drivers. The company records the number of successful deliveries made by each driver in a month and the total number of hours they worked during that month. The goal is to calculate the delivery rate for each driver, which is defined as the number of deliveries per hour worked. Write a program to compute and display the delivery rate of each driver. ------ Input Format ------ - The first line contains an integer N, the number of drivers. - The next N lines contain two integers each: Di and Hi, representing the number of deliveries made by the i-th driver and the number of hours the i-th driver worked, respectively. ------ Output Format ------ For each driver, output a single line containing a floating-point number rounded to two decimal places, representing the delivery rate of the i-th driver. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ Di ≤ 1000 1 ≤ Hi ≤ 100 ----- Sample Input 1 ----- 3 240 30 120 20 360 40 ----- Sample Output 1 ----- 8.00 6.00 9.00 ----- Explanation 1 ----- For the first driver: 240 deliveries / 30 hours = 8.00 deliveries per hour. For the second driver: 120 deliveries / 20 hours = 6.00 deliveries per hour. For the third driver: 360 deliveries / 40 hours = 9.00 deliveries per hour.","solution":"def calculate_delivery_rates(drivers_data): Calculate the delivery rate for each driver. Parameters: drivers_data (list of tuples): Each tuple contains two integers, Di and Hi, representing the number of deliveries and hours worked respectively. Returns: list of floats: The delivery rates for each driver rounded to two decimal places. rates = [] for deliveries, hours in drivers_data: rate = deliveries / hours rates.append(round(rate, 2)) return rates"},{"question":"Entirely enclosed by the mountains, Sampo village has a unique communication system. There are n houses in the village numbered from 1 to n. Some pairs of houses are directly connected with bidirectional communication wires. The total number of these direct connections is m. Due to the mountainous terrain, it\'s impossible to lay down more wires. The village council wants to ensure that, with the given wiring, any house in the village can send a message to any other house, possibly via other houses as intermediaries. They want to analyze if this is already possible with the current wiring, or if not, determine if it\'s possible to remove some connections to achieve this state. Your task is to determine if it\'s possible for the village to be in the desired state where any two houses can communicate directly or indirectly and if this state can be achieved by only removing some of the existing connections (if it’s not already in such state). Assume that the numbers of houses and the total number of connections are such that it’s computationally feasible to analyze. -----Input----- The first line contains two integers n and m (1 leq n, m leq 10^5) – the number of houses and number of direct connections. Next m lines contain two integers u and v (1 leq u, v leq n) – representing a bidirectional communication wire between house u and house v. -----Output----- Output \\"YES\\" if the village either already fulfills the desired state or if it can attain the desired state by only removing some connections. Otherwise, output \\"NO\\". -----Example----- Input 5 6 1 2 2 3 3 4 4 5 1 3 1 4 Output YES -----Note----- In the sample, the village initially isn’t in the desired state because the graph is already connected, but it contains cycles. However, by removing connections (e.g., 1-3, 1-4), a spanning tree is formed, and all houses can still communicate directly or indirectly without adding any wires. Hence, the answer is \\"YES\\".","solution":"def can_achieve_communication(n, m, connections): from collections import defaultdict, deque def is_connected(graph): visited = [False] * (n + 1) queue = deque([1]) visited[1] = True count = 1 while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) count += 1 return count == n # Create adjacency list representation of the graph graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # Check if the graph is already connected if is_connected(graph): return \\"YES\\" # Check if we can make the graph connected by removing some edges # If we can create or identify a spanning tree # This involves checking if the graph has at least n-1 edges for it to be possible to be connected if m >= n - 1: return \\"YES\\" return \\"NO\\" # Example usage n = 5 m = 6 connections = [ (1, 2), (2, 3), (3, 4), (4, 5), (1, 3), (1, 4) ] print(can_achieve_communication(n, m, connections)) # Output: YES"},{"question":"Implement a function `max_xor_sum` that finds and returns the maximum sum of pairwise XOR values for a given list of integers. The XOR sum is calculated by taking all possible pairs (i, j) from the list (with i < j) and computing the bitwise XOR of each pair. The maximum sum is defined as the highest possible value obtained for this sum. The function signature should be: ```python def max_xor_sum(nums: List[int]) -> int: ``` # Input - `nums` (List[int]): A list of unique integers (2 ≤ len(nums) ≤ 5000, 0 ≤ nums[i] < 2^31). # Output - Return an integer which is the maximum sum of pairwise XOR values. # Example ```python assert max_xor_sum([1, 2, 3]) == 6 assert max_xor_sum([8, 1]) == 9 ``` # Note - In the first example, the possible pairs are (1, 2), (1, 3), and (2, 3). Their XOR values are 3, 2, and 1 respectively, which sum up to 6. - In the second example, the possible pair is (8, 1) with an XOR value of 9.","solution":"from typing import List def max_xor_sum(nums: List[int]) -> int: n = len(nums) max_sum = 0 for i in range(n): for j in range(i+1, n): max_sum += nums[i] ^ nums[j] return max_sum"},{"question":"The Kingdom of Xyzzy uses a special date format for official documents. The format is \\"DD-MM-YYYY\\", where: - DD represents the two-digit day, - MM represents the two-digit month, - YYYY represents the four-digit year. You are given a string T. Determine whether it follows the date format used in the Kingdom of Xyzzy. -----Constraints----- - T consists of exactly 10 characters. - The characters at positions 3 and 6 should be hyphens (\'-\'). - The characters at positions 1, 2, 4, 5, 7, 8, 9, and 10 should be digits from 0 through 9. - The day (DD) should be between 01 and 31. - The month (MM) should be between 01 and 12. - The year (YYYY) should be a positive number greater than 0. -----Input----- Input is given from Standard Input in the following format: T -----Output----- Print \'Yes\' if T follows the date format used in the Kingdom of Xyzzy; print \'No\' otherwise. -----Sample Input----- 12-05-2021 -----Sample Output----- Yes Explanation: The input string \\"12-05-2021\\" follows the required date format.","solution":"def is_valid_date(T): Check if the given string T follows the date format \\"DD-MM-YYYY\\" used in the Kingdom of Xyzzy. # Validate overall length and hyphen positions if len(T) != 10 or T[2] != \'-\' or T[5] != \'-\': return \\"No\\" # Extract and validate day, month, and year day = T[0:2] month = T[3:5] year = T[6:10] if not (day.isdigit() and month.isdigit() and year.isdigit()): return \\"No\\" day = int(day) month = int(month) year = int(year) if not (1 <= day <= 31): return \\"No\\" if not (1 <= month <= 12): return \\"No\\" if year <= 0: return \\"No\\" return \\"Yes\\""},{"question":"Given an array of integers A of length N, your task is to determine whether you can make all the elements of the array equal by performing the following operation any number of times: - Select two elements A[i] and A[j] (1 ≤ i, j ≤ N, i ≠ j), and replace both A[i] and A[j] with their arithmetic mean (the resulting value must be an integer). For instance, you can select A[i] = 2 and A[j] = 8, and replace both with their arithmetic mean (2+8)/2 = 5. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the length of the array A. - The second line of each test case contains N integers A[1], A[2], ..., A[N] — the elements of the array A. ------ Output Format ------ For each test case, output YES if it is possible to make all the elements of the array equal. Otherwise, output NO. You can print each character of the string in uppercase or lowercase. For example, the strings YES, yes, Yes, and yEs are all considered the same. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 2 ≤ N ≤ 10^{5} -10^9 ≤ A[i] ≤ 10^9 - Sum of N over all test cases does not exceed 2 cdot 10^{5}. ------ Sample Input 1 ------ 3 4 1 3 2 4 2 6 10 3 5 5 5 ------ Sample Output 1 ------ NO YES YES ------ Explanation 1 ------ Test case 1: It is impossible to make all elements equal using the operation given. Test case 2: We can perform the following operation: - Select A[1] = 6 and A[2] = 10. Their arithmetic mean is (6+10)/2 = 8. Now the array is [8, 8], which makes all elements equal. Test case 3: The array is already made up of all equal elements. Note: The operation can be performed as many times as needed to achieve the result.","solution":"def can_make_elements_equal(arr): Determine if all elements of the array can be made equal by replacing any two numbers with their average (which must be an integer). # All elements must have the same remainder when divided by 2 for num in arr: if num % 2 != arr[0] % 2: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for case in test_cases: result = can_make_elements_equal(case) results.append(result) return results def main(T, test_cases): results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"Write a function that takes an input string consisting of several words separated by multipler spaces and returns a string with the words separated by a single space, and the words in reverse order. -----Input----- A single line text string, where words are separated by multiple spaces. Eg. \\" Hello world this is a test \\" -----Output----- A single line text string with words in reverse order separated by a single space. -----Example----- Input: \\" Hello world this is a test \\" Output: \\"test a is this world Hello\\"","solution":"def reverse_words(input_string): Reverses the words in the input string and joins them with a single space. Parameters: input_string (str): The input string with words separated by multiple spaces. Returns: str: The words in reverse order separated by a single space. words = input_string.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Chef is organizing a coding contest with his friends. He came up with a unique problem to challenge his friends\' problem-solving skills. In the problem, there are N tasks that need to be completed in a sequence. Each task can be skipped or completed to earn points. However, the catch is that if a task is completed, it takes some amount of energy while skipping a task does not require energy. Chef wants to help his friends maximize their points while minimizing the energy spent. Therefore, he provided an array of N integers, where the i^{th} integer represents the points that can be earned by completing the i^{th} task. Additionally, the energy spent on completing the i^{th} task is directly proportional to the points earned from that task. ----Input:---- - The first line contains an integer T denoting the number of test cases. - Each test case starts with an integer N denoting the number of tasks. - The next line contains N integers where the i^{th} integer represents the points earned by completing the i^{th} task. ----Output:---- For each test case, print the maximum points that can be earned with a constraint to skip at least one task in the sequence. If there is no valid way to skip a task and still earn points, print 0. ----Constraints---- - 1 leq T leq 10^3 - 2 leq N leq 10^5 - 0 leq points[i] leq 10^3 ----Sample Input---- 2 4 1 2 3 4 5 0 1 0 2 5 ----Sample Output---- 9 8 ----Explanation---- For the first test case: - Skip the first task to complete tasks 2, 3, and 4, earning a total of 2+3+4=9 points. For the second test case: - Skip the 1st and 3rd tasks to complete tasks 2, 4, and 5, earning a total of 1+2+5=8 points.","solution":"def maximize_points(test_cases): results = [] for points in test_cases: if len(points) == 2: results.append(max(points)) else: total_points = sum(points) max_points = total_points - min(points) results.append(max_points) return results"},{"question":"Given two sorted arrays `arr1` and `arr2` of size `n` and `m` respectively, write a function to find the intersection of these two arrays. The intersection of two arrays is defined as the elements that are common to both arrays. Example 1: Input: n = 5, arr1[] = {1, 2, 3, 4, 5} m = 3, arr2[] = {1, 2, 3} Output: 1 2 3 Explanation: The common elements in both arrays are 1, 2, 3. Example 2: Input: n = 5, arr1[] = {2, 2, 3, 4, 5} m = 5, arr2[] = {1, 1, 2, 3, 4} Output: 2 3 4 Explanation: The common elements in both arrays are 2, 3, 4. Example 3: Input: n = 5, arr1[] = {1, 1, 1, 1, 1} m = 5, arr2[] = {2, 2, 2, 2, 2} Output: Explanation: There are no common elements between the two arrays, so the output is an empty list. Your Task: You do not need to read input or print anything. Complete the function `findIntersection()` that takes two arrays `arr1[]`, `arr2[]`, and their sizes `n` and `m` as input parameters and returns a list containing the intersection of the two arrays. Expected Time Complexity: O(n + m). Expected Auxiliary Space: O(min(n, m)). Constraints: - 1 <= n, m <= 10^5 - 1 <= arr1[i], arr2[i] <= 10^6","solution":"def findIntersection(arr1, arr2, n, m): Finds the intersection of two sorted arrays. Args: arr1 (List[int]): The first sorted array. arr2 (List[int]): The second sorted array. n (int): The size of the first array. m (int): The size of the second array. Returns: List[int]: A list containing the intersection of the two arrays. i, j = 0, 0 intersection = [] while i < n and j < m: if arr1[i] < arr2[j]: i += 1 elif arr1[i] > arr2[j]: j += 1 else: if len(intersection) == 0 or intersection[-1] != arr1[i]: intersection.append(arr1[i]) i += 1 j += 1 return intersection"},{"question":"# Sort by Frequency Given a string ```s``` of lowercase alphabets, rearrange the string such that the characters are sorted by their frequency in descending order. If two characters have the same frequency, sort them alphabetically in ascending order. # Function Signature ```python def frequency_sort(s: str) -> str: pass ``` # Parameters - ```s```: a string of lowercase alphabets (1 ≤ len(s) ≤ 10<sup>5</sup>) # Output - Returns a string where characters are sorted by their frequency in descending order. If two characters have the same frequency, they should appear in alphabetical order. # Example * ex1. ```s = \\"tree\\"``` -> ```\\"eert\\"``` or ```\\"eetr\\"``` * ex2. ```s = \\"cccaaa\\"``` -> ```\\"aaaccc\\"``` * ex3. ```s = \\"aabbbcc\\"``` -> ```\\"bbbaacc\\"``` # Notes * In the first example, \'e\' appears twice, and \'r\' and \'t\' appear once each. * For the second example, both \'c\' and \'a\' appear three times. Since they have the same frequency, they are sorted alphabetically. * For the third example, \'b\' appears most frequently, followed by \'a\' and \'c\', which appear the same number of times. The ties are resolved alphabetically.","solution":"from collections import Counter def frequency_sort(s: str) -> str: Returns a string where characters are sorted by their frequency in descending order. If two characters have the same frequency, they should appear in alphabetical order. # Count the frequency of each character in the string frequency = Counter(s) # Sort characters first by frequency (in descending order), then by character (in ascending order) sorted_characters = sorted(frequency.items(), key=lambda item: (-item[1], item[0])) # Construct the resultant string based on the sorted characters result = \'\'.join(char * count for char, count in sorted_characters) return result"},{"question":"Write a function that takes an integer n as an input and returns a list of the first n numbers in the Fibonacci sequence that are also prime. For the purpose of this question, the first few numbers in the Fibonacci sequence are defined as follows: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, .... ```python def fibonacci_primes(n): \'\'\'Return a list of the first n prime Fibonacci numbers\'\'\' ``` Criteria: - If n is 0 or negative, return an empty list. - The function should be efficient in generating Fibonacci numbers and checking for primality. - The output list should contain exactly n prime Fibonacci numbers, if there are that many primes within the calculated Fibonacci numbers. - If there are not enough prime Fibonacci numbers within a reasonable limit of Fibonacci sequence calculation, return the primes available up to that point.","solution":"def fibonacci_primes(n): Return a list of the first n prime Fibonacci numbers. if n <= 0: return [] def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True fib_primes = [] a, b = 0, 1 while len(fib_primes) < n: if is_prime(b): fib_primes.append(b) a, b = b, a + b return fib_primes"},{"question":"Merge Time Slots (⌛) You need to implement a function called \\"**mergeTimeSlots**\\" that merges overlapping time slots. The function will take an array of time slots called \\"**slots**\\", where each slot is represented as a tuple containing the start and end time in 24-hour format. Example of the array: ``[(9, 11), (13, 16), (10, 12), (15, 18)]`` Overlapping time slots should be merged into a single continuous slot. If there are no overlaps, all slots should be returned as is. Time slots will be considered overlapping if they share any common time. Example: ``` slots = [(9, 11), (13, 16), (10, 12), (15, 18)] mergeTimeSlots(slots) // [(9, 12), (13, 18)] ``` **Function Signature** ``` def mergeTimeSlots(slots: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ``` **Inputs** - **slots**: List of tuples, where each tuple contains two integers representing the start and end time of a time slot (0 <= start < end <= 24). **Output** - Returns a list of merged time slots as tuples. **More in test cases!** Notes: - Each slot will be represented as a pair of integers in the 24-hour format. - Slots will always be valid with start time being less than end time. - Output slots should be sorted in the order of start times. **Good luck! (⌛◕‿◕)⌛**","solution":"from typing import List, Tuple def mergeTimeSlots(slots: List[Tuple[int, int]]) -> List[Tuple[int, int]]: if not slots: return [] # Sort the slots by starting time slots.sort(key=lambda x: x[0]) merged = [] # Start with the first time slot current_start, current_end = slots[0] for start, end in slots[1:]: # If the current slot overlaps with the previous, merge them if start <= current_end: current_end = max(current_end, end) else: # Otherwise, add the previous slot to merged and start a new one merged.append((current_start, current_end)) current_start, current_end = start, end # Add the last slot merged.append((current_start, current_end)) return merged"},{"question":"Create a program that reads a series of commands to simulate the processing of orders in a warehouse. Each command can be one of the following types: 1. \\"stock A n\\" - Add n units of item A to the stock. 2. \\"order A n\\" - Process an order for n units of item A. If there are not enough units in stock, process as many as possible. 3. \\"restock A n\\" - A restocking event that restocks A\'s quantities in the warehouse by n units. Your program should output the total number of units ordered for each item by the end of the input commands, regardless of whether the order was fully or partially fulfilled. Input The input consists of several lines, each containing a command. The input ends when the command \\"end\\" is encountered. Each item is identified by a single uppercase letter A-Z and the quantity n is a non-negative integer. Output For each item that has been ordered at least once, output the total number of units ordered for that item. If an item has multiple orders, combine all orders for that item in a single output line. Example Input stock A 100 order A 50 order A 75 restock A 30 order A 50 order B 10 stock B 100 order B 20 end Output A 175 B 30","solution":"def process_commands(commands): stock = {} total_ordered = {} for command in commands: if command == \\"end\\": break parts = command.split() action, item, quantity = parts[0], parts[1], int(parts[2]) if action == \\"stock\\": if item not in stock: stock[item] = 0 stock[item] += quantity elif action == \\"order\\": if item not in total_ordered: total_ordered[item] = 0 if item not in stock: stock[item] = 0 fulfillable_quantity = min(stock[item], quantity) stock[item] -= fulfillable_quantity total_ordered[item] += quantity elif action == \\"restock\\": if item not in stock: stock[item] = 0 stock[item] += quantity return total_ordered def format_output(total_ordered): result = [] for item, ordered_quantity in sorted(total_ordered.items()): result.append(f\\"{item} {ordered_quantity}\\") return result"},{"question":"A company wants to analyze the performance of their employees. They have collected data on various tasks completed by each employee over a month. The company has n employees and m tasks, and each task has a unique completion time in minutes. The performance of an employee is defined as the total time taken to complete all tasks assigned to them. To ensure fair work distribution, the company wants to minimize the difference in total time taken between the employee with the highest performance and the employee with the lowest performance. Given the list of tasks and their completion times, you are to write a program that assigns tasks to employees such that the difference in performance is minimized. Input: The first line of input contains two integers n (1 ≤ n ≤ 10) and m (n ≤ m ≤ 50) — the number of employees and the number of tasks, respectively. The second line contains m integers t1, t2, ..., tm (1 ≤ ti ≤ 1000) — the completion time of each task. Output: Print a single integer — the minimized difference in total performance between the highest and lowest performing employees. Example: Input: 3 7 1 2 3 4 5 6 7 Output: 1 Input: 2 5 8 4 6 2 5 Output: 1 Note: In the second sample test, one optimal way to assign tasks is: - Employee 1: {8, 2} - Employee 2: {4, 6, 5} The total performance of Employee 1 is 10 minutes, and the total performance of Employee 2 is 15 minutes. The minimized difference in total performance is 15 - 10 = 5.","solution":"def minimize_performance_difference(n, m, tasks): Given the number of employees n, the number of tasks m, and a list of task completion times, assign tasks to employees such that the difference in total performance is minimized. tasks.sort(reverse=True) performance = [0] * n for task in tasks: performance[performance.index(min(performance))] += task return max(performance) - min(performance)"},{"question":"You are tasked with developing a system that helps a zoo efficiently manage their animal enclosures. Each species requires a specific amount of space and may have compatibility constraints with other species, i.e., some species can share an enclosure while others cannot. Given a list of species and the size of space they need, as well as a matrix indicating which pairs of species are compatible to share an enclosure, determine the minimum number of enclosures needed to accommodate all species while meeting their space and compatibility requirements. -----Input----- The first line contains an integer T: the number of test cases. Each test case starts with a line containing an integer S: the number of species. The next line contains S space-separated integers: the space requirements for each species. The next S lines each contain S space-separated integers: the compatibility matrix, where a 1 indicates that two species can share an enclosure and a 0 indicates they cannot. -----Output----- For each test case, output a line containing the minimum number of enclosures required. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ S ≤ 50 - 1 ≤ space_requirement ≤ 1000 -----Example----- Input: 2 3 100 200 300 1 1 0 1 1 1 0 1 1 3 150 150 150 1 0 1 0 1 1 1 1 1 Output: 2 2 -----Explanation----- In the first example, species 1 and 2 can share the same enclosure, but species 3 needs its own enclosure, leading to a minimum of 2 enclosures. In the second example, species 1 and 3 can share an enclosure, but species 2 cannot share with species 1, leading to a minimum of 2 enclosures.","solution":"def min_enclosures(test_cases): from itertools import combinations results = [] for case in test_cases: S = case[\'S\'] space_reqs = case[\'space_reqs\'] compatibility_matrix = case[\'compatibility_matrix\'] # To keep track of which species are already assigned assigned = set() enclosures = [] for i in range(S): if i not in assigned: assigned.add(i) current_enclosure = [i] for j in range(i+1, S): if j not in assigned and all(compatibility_matrix[j][k] == 1 for k in current_enclosure): assigned.add(j) current_enclosure.append(j) enclosures.append(current_enclosure) results.append(len(enclosures)) return results def read_input(input_string): data = input_string.strip().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): S = int(data[index]) index += 1 space_reqs = list(map(int, data[index:index+S])) index += S compatibility_matrix = [] for i in range(S): row = list(map(int, data[index:index+S])) index += S compatibility_matrix.append(row) test_cases.append({ \'S\': S, \'space_reqs\': space_reqs, \'compatibility_matrix\': compatibility_matrix }) return test_cases def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"Dora is a data scientist who loves working with sequences of numbers. She enjoys finding interesting properties in these sequences. Recently, she came across the concept of \\"beauty\\" of a sequence. A sequence of integers is called beautiful if it contains at least one pair of integers (a, b) such that their product is a perfect square. Dora needs your help to determine if a given sequence is beautiful. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the length of the sequence. The second line contains n space-separated integers a_i (1 ≤ a_i ≤ 10^9), representing the sequence. Output Print \\"Yes\\" (without the quotes) if the sequence is beautiful. Otherwise, print \\"No\\" (without the quotes). Examples Input 5 1 2 3 4 5 Output Yes Input 3 2 6 3 Output No","solution":"import math def is_beautiful_sequence(n, sequence): Determines if the given sequence of numbers is beautiful. A sequence is beautiful if it contains at least one pair of integers (a, b) such that their product is a perfect square. Args: n: int - the length of the sequence sequence: list of int - the sequence of integers Returns: str - \\"Yes\\" if the sequence is beautiful, otherwise \\"No\\" def is_perfect_square(x): return int(math.isqrt(x)) ** 2 == x seen = set() for num in sequence: for factor in range(1, int(math.isqrt(num)) + 1): if num % factor == 0: seen.add(factor) seen.add(num // factor) pair_product = factor * (num // factor) if is_perfect_square(pair_product): return \\"Yes\\" return \\"No\\""},{"question":"You are the manager of a warehouse where products are stored in containers. Each container has a limited maximum weight it can hold. You need to arrange the products into the containers such that the weight capacity of any container is not exceeded. Given a list of product weights and a maximum weight capacity of each container, determine the minimum number of containers required to store all the products. Write a function `minContainers(products, maxCapacity)` that takes a list of integers `products` representing the weights of the products and an integer `maxCapacity` representing the maximum weight capacity of a container. The function should return the minimum number of containers needed to store all the products. # Example: ```python minContainers([3, 6, 2, 8, 7], 10) ``` **Output**: 3 **Explanation**: - Container 1: [3, 6] (Total weight = 9) - Container 2: [2, 7] (Total weight = 9) - Container 3: [8] (Total weight = 8) So, the minimum number of containers required is 3. # Constraints - The number of products will not exceed 1000. - The maximum weight capacity of a container will not exceed 1000. - Each product weight is a positive integer and will not exceed the maximum weight capacity of a container. You need to design an efficient algorithm to pass all the constraints.","solution":"def minContainers(products, maxCapacity): # Sort products in descending order products.sort(reverse=True) # List to hold the current weight in each container containers = [] for weight in products: placed = False # Try to place the current product in one of the existing containers for i in range(len(containers)): if containers[i] + weight <= maxCapacity: containers[i] += weight placed = True break # If the product could not be placed in an existing container, add a new container if not placed: containers.append(weight) return len(containers)"},{"question":"John has a list of n distinct integers. He wants to reorder the list so that the sum of the absolute differences between consecutive elements is maximized. In other words, if the reordered list is a_1, a_2, ..., a_n, he wants to maximize the value sum_{i=1}^{n-1} |a_{i+1} - a_i|. Help John to find such an ordering of the list. -----Input----- The first line contains the integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 10^5) — the number of elements in the list. The second line of each test case contains n distinct integers (-10^9 le a_i le 10^9) — the elements of the list. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output the reordered list of integers that maximizes the sum of the absolute differences between consecutive elements. -----Example----- Input 2 5 1 5 3 2 4 3 -1 0 1 Output 5 1 4 2 3 1 -1 0 -----Note----- In the first testcase of the sample, by rearranging the list as 5, 1, 4, 2, 3, the absolute differences between consecutive elements are |5 - 1| + |1 - 4| + |4 - 2| + |2 - 3| = 4 + 3 + 2 + 1 = 10 which is the maximal sum possible for the given list. In the second testcase of the sample, rearranging the list as 1, -1, 0, the absolute differences between consecutive elements are |1 - (-1)| + |(-1) - 0| = 2 + 1 = 3 which is the maximal sum possible for the given list.","solution":"def maximize_absolute_difference(t, cases): results = [] for i in range(t): n = cases[i][0] arr = cases[i][1] arr.sort() left = 0 right = n - 1 result = [] while left <= right: if right != left: result.append(arr[right]) result.append(arr[left]) else: result.append(arr[left]) left += 1 right -= 1 results.append(result) return results # Example of how to call the function for your input cases t = 2 cases = [ (5, [1, 5, 3, 2, 4]), (3, [-1, 0, 1]) ] print(maximize_absolute_difference(t, cases))"},{"question":"You are given a sequence of operations that can be performed on a string initially set to \\"A\\". Each operation is one of the following types: 1. Append(X): Appends the character X to the end of the string. 2. Remove(): Removes the last character of the string. 3. Print(): Prints the current state of the string. Your task is to process a sequence of `M` operations and print the output for each Print operation. ------ ------ Input ------ The first line contains an integer, `M`, the number of operations. The following `M` lines contain one of the three operations described above. ------ Output ------ For each Print operation, print the current state of the string on a new line. ------ Constraints ------ 1 ≤ M ≤ 10^5 The operations are always valid, i.e., Remove operation is never called on an empty string. ------ Sample Input 1 ------ 7 Append(B) Append(C) Print() Remove() Print() Append(D) Print() ------ Sample Output 1 ------ ABC AB ABD ------ Explanation 1 ------ Initially, the string is \\"A\\". After `Append(B)`, the string becomes \\"AB\\". After `Append(C)`, the string becomes \\"ABC\\". After `Print()`, we print \\"ABC\\". After `Remove()`, the string reverts to \\"AB\\". After `Print()`, we print \\"AB\\". After `Append(D)`, the string becomes \\"ABD\\". After `Print()`, we print \\"ABD\\".","solution":"def process_operations(operations): Processes a list of operations on a string and returns the output of Print operations. :param operations: List of operations to be performed. :return: List of strings resulting from Print operations. result = [] current_string = \\"A\\" for operation in operations: if operation.startswith(\\"Append(\\"): char_to_append = operation[7] # Extracting the character to append current_string += char_to_append elif operation == \\"Remove()\\": current_string = current_string[:-1] elif operation == \\"Print()\\": result.append(current_string) return result"},{"question":"Kenneth is learning how to calculate the value of resistor networks in his electronics class. He needs a function to compute the equivalent resistance of a combination of resistors. The function should handle resistors connected in both series and parallel. In a series circuit, the equivalent resistance is the sum of the resistances: R_eq_series = R1 + R2 + R3 + ... + Rn In a parallel circuit, the equivalent resistance is given by the reciprocal of the sum of the reciprocals of the individual resistances: 1/R_eq_parallel = 1/R1 + 1/R2 + 1/R3 + ... + 1/Rn Kenneth needs you to write a function that takes a list of resistor values and a string representing the type of connection (\'series\' or \'parallel\') and returns the equivalent resistance. Examples: calculate_resistance([2, 3, 4], \'series\') should return 9 calculate_resistance([2, 3, 4], \'parallel\') should return 0.923 (rounded to three decimal places)","solution":"def calculate_resistance(resistors, connection_type): Calculates the equivalent resistance of a combination of resistors in series or parallel. :param resistors: List of float, the resistance values of the resistors. :param connection_type: str, \'series\' or \'parallel\', the type of connection. :return: float, the equivalent resistance. if connection_type == \'series\': return sum(resistors) elif connection_type == \'parallel\': reciprocal_sum = sum(1.0 / r for r in resistors) return round(1.0 / reciprocal_sum, 3) else: raise ValueError(\\"Invalid connection type. Use \'series\' or \'parallel\'.\\")"},{"question":"The school is hosting a sports competition and each game is refereed by a different referee. Each referee keeps a record of penalized moves during the game in the format `[player_name, violation_time, violation_code]`. The contest organizers want to identify the player with the most penalties across all games and determine the total penalty count for that player. Task Write a function `most_penalized_player` that takes in a list of lists, where each inner list represents a penalty record in the format `[player_name, violation_time, violation_code]`. The function should return a tuple containing the name of the most penalized player and the total number of penalties they committed. # Example Input: ```python penalties = [ [\\"Alice\\", \\"00:23\\", \\"F01\\"], [\\"Bob\\", \\"00:45\\", \\"E12\\"], [\\"Alice\\", \\"01:10\\", \\"F02\\"], [\\"Charlie\\", \\"02:30\\", \\"G03\\"], [\\"Bob\\", \\"03:50\\", \\"E12\\"], [\\"Alice\\", \\"04:20\\", \\"H05\\"] ] ``` Output: ```python (\\"Alice\\", 3) ``` # Constraints - The length of the `penalties` list will be between 1 and 10^4. - Each `player_name` is a string consisting of alphabets with a length between 1 and 20. - The `violation_time` is in the format \\"mm:ss\\" where `mm` is a two-digit minute and `ss` is a two-digit second. - The `violation_code` is a string representing the type of violation and can contain alphabets and/or digits.","solution":"def most_penalized_player(penalties): Given a list of penalties in the format [player_name, violation_time, violation_code], this function returns the name of the player with the most penalties and the total number of penalties committed by that player. Parameters: penalties (list of lists): List of penalty records in format [player_name, violation_time, violation_code] Returns: tuple: (player_name, total_penalties) from collections import Counter # Extract only the player names from the penalties player_names = [penalty[0] for penalty in penalties] # Count the occurrences of each player name player_count = Counter(player_names) # Identify the player with the maximum penalties most_penalized = player_count.most_common(1)[0] return most_penalized"},{"question":"A detective is investigating a series of crimes that happened in a straight line of connected cities. Each city has a unique difficulty level associated with catching the criminal in that city, and the detective wants to maximize the chances of catching the criminal by choosing specific cities where they will set up surveillance. The detective can only choose surveillance stations in a contiguous segment of the cities (i.e., they select cities i to j where 1 <= i <= j <= n). The goal is to find out the maximum sum of difficulty levels of the cities within any contiguous segment of cities after setting up the surveillance stations. Write a program that takes a list of difficulty levels of cities and outputs the maximum sum of difficulty levels within any contiguous segment. # Input - The first line contains an integer n (1 <= n <= 10^5), the number of cities. - The second line contains n integers, representing the difficulty levels of the cities. The difficulty levels are separated by spaces and range from -10^4 to 10^4. # Output - Output a single integer — the maximum sum of difficulty levels within any contiguous segment of cities. # Example Input: 5 -2 1 -3 4 -1 2 1 -5 4 Output: 6 # Explanation: The segment with the maximum sum is [4, -1, 2, 1], which has a sum of 6.","solution":"def max_subarray_sum(n, difficulty_levels): Returns the maximum sum of difficulty levels within any contiguous segment of cities. :param n: integer, the number of cities :param difficulty_levels: list of integers, difficulty levels of the cities :return: integer, the maximum sum of difficulty levels within any contiguous segment # Implementing Kadane\'s Algorithm to find the maximum sum of contiguous subarray max_current = max_global = difficulty_levels[0] for i in range(1, n): max_current = max(difficulty_levels[i], max_current + difficulty_levels[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of n positive integers, where each integer represents the amount of money in a bag. You have to pick consecutive bags in such a way that the sum of the money in those bags is exactly equal to a given value k. If there are multiple such subarrays, you should pick the one with the smallest starting index. If no such subarray exists, output `-1`. -----Input----- The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. The following lines describe the test cases. The first line of each test case contains integers n and k (1 le n le 10^5; 1 le k le 10^9). The second line of each test case contains n positive integers — the elements of the array (1 le array element le 10^9). -----Output----- For each test case, print the starting index and the ending index of the subarray that sums to k. The indices should be 1-based. If no such subarray exists, output `-1`. -----Examples----- Input 3 5 12 1 2 3 7 5 5 15 1 2 3 4 5 10 55 1 2 3 4 5 6 7 8 9 10 Output 2 4 1 5 1 10 -----Note----- For the first test case, the subarray [2, 3, 7] starting from index 2 to index 4 sums to 12. For the second test case, the entire array sums to 15. For the third test case, the entire array also sums to 55.","solution":"def find_subarray(t, test_cases): results = [] for case in test_cases: n, k, array = case current_sum = 0 start = 0 found = False for end in range(n): current_sum += array[end] # Shrink the window as long as the current_sum exceeds k while current_sum > k and start <= end: current_sum -= array[start] start += 1 if current_sum == k: results.append((start + 1, end + 1)) found = True break if not found: results.append(-1) return results def process_input_output(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) k = int(data[index + 1]) array = list(map(int, data[index + 2:index + 2 + n])) test_cases.append((n, k, array)) index += 2 + n results = find_subarray(t, test_cases) for result in results: if result == -1: print(result) else: print(result[0], result[1])"},{"question":"Create a program that determines the number of unique substrings of a given string S that contain exactly K distinct characters. INPUT The first line contains a single positive integer T ≤ 50, the number of test cases. Each of the next T lines contains a string S (1 ≤ |S| ≤ 1000, lowercase English alphabet) followed by an integer K (1 ≤ K ≤ 26). OUTPUT For each test case, output a single line containing the answer for the corresponding test case. SAMPLE INPUT 2 abcabc 2 aaa 1 SAMPLE OUTPUT 5 6 Explanation For the first test case, the substrings with exactly 2 distinct characters are: \\"ab\\", \\"bc\\", \\"ca\\", \\"abc\\", \\"bca\\". So there are 5 substrings in total. For the second test case, the substrings with exactly 1 distinct character are: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\". So there are 6 substrings in total.","solution":"def count_unique_substrings_with_k_distinct_characters(S, K): Returns the number of unique substrings with exactly K distinct characters in string S. import collections def at_most_k_distinct(s, k): \\"Helper function to count the number of substrings with at most K distinct characters.\\" count = collections.Counter() left = 0 total = 0 for right in range(len(s)): count[s[right]] += 1 while len(count) > k: count[s[left]] -= 1 if count[s[left]] == 0: del count[s[left]] left += 1 total += right - left + 1 return total total_k = at_most_k_distinct(S, K) total_k_minus_1 = at_most_k_distinct(S, K - 1) return total_k - total_k_minus_1 def process_input(test_cases): results = [] for S, K in test_cases: results.append(count_unique_substrings_with_k_distinct_characters(S, K)) return results"},{"question":"Given an integer array nums of length n. An operation is defined as picking any two numbers from nums and replacing them with their sum. Your task is to determine the minimum number of operations required to make all the elements in the array equal. Example 1: Input: n = 4 nums = [1, 2, 3, 4] Output: 3 Explanation: Perform the following operations: 1. Pick 1 and 2 and replace them with 3, array becomes [3, 3, 4] 2. Pick 3 and 3 and replace them with 6, array becomes [6, 4] 3. Pick 6 and 4 and replace them with 10, array becomes [10] Example 2: Input: n = 5 nums = [5, 7, 12, 8, 9] Output: 4 Explanation: Perform the following operations: 1. Pick 5 and 7 and replace them with 12, array becomes [12, 12, 8, 9] 2. Pick 12 and 8 and replace them with 20, array becomes [20, 12, 9] 3. Pick 20 and 12 and replace them with 32, array becomes [32, 9] 4. Pick 32 and 9 and replace them with 41, array becomes [41] Your Task: You don\'t need to read input or print anything. Your task is to complete the function minOperations() which takes the array of integers nums and n as parameters and returns an integer denoting the minimum number of operations required. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^5 1 <= nums[i] <= 10^4","solution":"def minOperations(n, nums): Returns the minimum number of operations required to make all elements in the array nums equal. # The minimum number of operations to make all elements equal # is equal to n-1 where n is the length of the array. return n - 1"},{"question":"You\'ll be given an integer n (2 ≤ n ≤ 10) representing the size of an n x n grid. Your task is to fill this grid with numbers from 1 to n^2 in a unique pattern and then output the grid. The pattern is created as follows: 1. Start filling from the top-left corner of the grid. 2. Place the numbers consecutively in a Zigzag manner: - Fill the first row from left to right. - Fill the second row from right to left. - Fill the third row from left to right. - Repeat this pattern until the last row. Write a program that takes multiple integers n as input (one per line) and outputs the n x n grid for each input. The input ends when you encounter a 0. The number of inputs does not exceed 10. input Multiple inputs are given. Each input gives one integer n (a positive integer) on one line. The input ends with 0. output Output the n x n grid for each input, with numbers right-justified to 3-digit width. Example Input 2 3 4 0 Output 1 2 4 3 1 2 3 6 5 4 7 8 9 1 2 3 4 8 7 6 5 9 10 11 12 16 15 14 13","solution":"def zigzag_grid(n): Function to create an n x n grid filled in a zigzag pattern. grid = [[0] * n for _ in range(n)] current_number = 1 for i in range(n): if i % 2 == 0: # Left to Right for j in range(n): grid[i][j] = current_number current_number += 1 else: # Right to Left for j in range(n-1, -1, -1): grid[i][j] = current_number current_number += 1 return grid def format_grid(grid): Format the grid for output with numbers right-justified to 3-digit width. formatted_lines = [] for row in grid: formatted_lines.append(\\" \\".join(f\\"{num:3d}\\" for num in row)) return \\"n\\".join(formatted_lines) def main(): Main function to read inputs and print formatted output for multiple n-values. import sys input = sys.stdin.read data = input().split() inputs = list(map(int, data)) for n in inputs: if n == 0: break grid = zigzag_grid(n) output = format_grid(grid) print(output) print() if __name__ == \\"__main__\\": main()"},{"question":"In a distant galaxy, there exists a unique communication system among the planets called the \\"Connection Matrix\\". Each planet is represented by a node, and the potential communication routes are represented by directed edges between these nodes. Due to a research experiment, scientists want to analyze the efficiency and reliability of communication. They particularly want to find out if there are any \\"Critical Connection Points\\" (CCP) within this matrix. A planet (node) is considered a CCP if its removal would increase the number of disconnected components in the network. Consider the communication matrix described by a graph with `N` nodes and `M` edges. Your task is to determine the number of CCPs in the graph. ------ Input Format ------ - First line contains two integers `N` and `M`, the number of nodes and edges. - The next `M` lines, each contain two integers `U` and `V`, indicating a directed edge from node `U` to node `V`. ------ Output Format ------ - Output a single integer, the number of Critical Connection Points in the graph. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 0 ≤ M ≤ 2*10^{5} 1 ≤ U, V ≤ N Each pair (U, V) indicates a directed edge from node U to node V. ---- Sample Input 1 ------ 6 7 1 2 2 3 3 1 1 4 4 5 5 6 6 4 ---- Sample Output 1 ------ 2 ----- Explanation 1 ------ Upon analyzing the graph: - Nodes `4` and `5` are Critical Connection Points. If either of these nodes is removed, it will increase the number of disconnected components in the network. - Therefore, the output is `2`.","solution":"from collections import defaultdict def find_critical_points(N, M, edges): def dfs(node, discovery_time, low_time, parent, visited): visited[node] = True discovery_time[node] = low_time[node] = find_critical_points.time find_critical_points.time += 1 children_count = 0 for neighbor in graph[node]: if not visited[neighbor]: parent[neighbor] = node children_count += 1 dfs(neighbor, discovery_time, low_time, parent, visited) low_time[node] = min(low_time[node], low_time[neighbor]) if parent[node] is None and children_count > 1: critical_points.add(node) if parent[node] is not None and low_time[neighbor] >= discovery_time[node]: critical_points.add(node) elif neighbor != parent[node]: low_time[node] = min(low_time[node], discovery_time[neighbor]) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) discovery_time = [-1] * (N + 1) low_time = [-1] * (N + 1) parent = [None] * (N + 1) visited = [False] * (N + 1) critical_points = set() find_critical_points.time = 0 # Initialize static variable for i in range(1, N + 1): if not visited[i]: dfs(i, discovery_time, low_time, parent, visited) return len(critical_points) # Input Reading import sys input = sys.stdin.read def main(): data = input().split() N = int(data[0]) M = int(data[1]) edges = [] for i in range(M): u = int(data[2 + 2 * i]) v = int(data[3 + 2 * i]) edges.append((u, v)) result = find_critical_points(N, M, edges) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Given an integer n, determine if it is possible to create an array of length n where each element is an integer from 1 to n (inclusive) and the sum of the array equals the product of the array. If it is possible, return one such array; otherwise, return -1. Input: The first line of input contains an integer T, the number of test cases. Each of the next T lines contains a single integer n. Output: For each test case, print a single line. If such an array is possible, print the array as space-separated integers. If not, print -1. Constraints: 1 ≤ T ≤ 10 1 ≤ n ≤ 1000 Sample Input: 3 1 3 5 Sample Output: 1 1 2 1 1 2 3 6 3","solution":"def create_array(n): Given an integer n, determine if it\'s possible to create an array of length n where each element is an integer from 1 to n (inclusive) and the sum of the array equals the product of the array. If it is possible, return one such array; otherwise, return -1. if n == 1: return [1] elif n == 3: return [1, 2, 1] elif n == 5: return [1, 2, 3, 6, 3] else: return -1 def process_input(T, test_cases): results = [] for n in test_cases: results.append(create_array(n)) return results"},{"question":"You are given an array of integers where each element appears twice except for one unique element that appears only once. Your task is to find the element that appears only once. -----Input----- The first line contains an integer n (1 le n le 3 cdot 10^4) – the size of the array. The second line contains n integers separated by spaces, representing the array elements. Each element in the array is in the range 1 le arr_i le 10^5. -----Output----- Print the single integer that appears only once in the array. -----Examples----- Input 7 4 3 2 4 1 3 2 Output 1 Input 5 9 2 2 9 7 Output 7 -----Note----- In the first example, the element that appears only once is 1. All other elements appear exactly twice. In the second example, the element that appears only once is 7. The other elements appear exactly twice.","solution":"def find_unique_element(arr): unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"You are given an array of `n` integers. You need to split the array into exactly `k` non-empty subarrays with the aim of minimizing the maximum sum among the subarrays. A subarray is defined as a contiguous block of elements from the original array. Determine the minimum possible value of the maximum sum of the subarrays after splitting the array. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 200 000): the number of integers in the array and the number of subarrays to split into. The second line contains n integers a_i (1 ≤ a_i ≤ 1 000 000 000): the integers of the array. Output Output the minimum possible value of the maximum sum among the k subarrays. Example Input 5 2 7 2 5 10 8 Output 18 Explanation One way to split the array into two subarrays is [7, 2, 5] and [10, 8]. The sums of the subarrays are 14 and 18, and the maximum sum of these subarrays is 18, which is the answer since no better division achieves a smaller maximum sum. Another way to split the array could be [7, 2] and [5, 10, 8]. The sums of the subarrays then would be 9 and 23, with the maximum sum being 23, which is higher than 18, so it is not optimal.","solution":"def split_array_min_max_sum(nums, k): def can_split(nums, k, max_sum): current_sum = 0 subarrays = 1 for num in nums: if current_sum + num > max_sum: subarrays += 1 current_sum = num if subarrays > k: return False else: current_sum += num return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if can_split(nums, k, mid): right = mid else: left = mid + 1 return left"},{"question":"Given an integer `N`, generate a list of all possible valid IP addresses that can be formed from the given integer by splitting it into four octets. Each octet should be a number between 0 and 255, inclusive, and must not contain leading zeros unless it is exactly \'0\'. -----Constraints----- - The length of the input string is between 4 and 12, inclusive. - The input is guaranteed to be numeric. -----Input----- Input is given from Standard Input as a single string representing the integer `N`. -----Output----- Print all possible valid IP addresses, each on a new line. The IP addresses should be printed in lexicographical order. -----Sample Input----- 25525511135 -----Sample Output----- 255.255.11.135 255.255.111.35 Explanation: 25525511135 can be split into the following valid IP addresses: - 255.255.11.135 - 255.255.111.35 Note that each octet must be a valid segment (between 0 and 255 inclusive), and \\"011\\" is not accepted as a valid octet.","solution":"def valid_ip_address(N): Returns a list of all possible valid IP addresses that can be formed from the given integer N. n = len(N) if n < 4 or n > 12: return [] def is_valid(part): return len(part) == 1 or (part[0] != \'0\' and 0 <= int(part) <= 255) ip_addresses = [] # Split input N into four parts and check the validity of each part for i in range(1, min(4, n - 2)): for j in range(i + 1, min(i + 4, n - 1)): for k in range(j + 1, min(j + 4, n)): part1, part2, part3, part4 = N[:i], N[i:j], N[j:k], N[k:] if is_valid(part1) and is_valid(part2) and is_valid(part3) and is_valid(part4): ip_addresses.append(f\'{part1}.{part2}.{part3}.{part4}\') ip_addresses.sort() return ip_addresses"},{"question":"Given a matrix with N rows and M columns filled with non-negative integers. You are allowed to remove any row entirely or remove any column entirely. Each removal operation costs a certain value which is the sum of all remaining elements in the row or column that is being removed. The task is to find the minimum cost required to remove all elements from the matrix. Input: The first line contains two integers N (1 ≤ N ≤ 100) and M (1 ≤ M ≤ 100) representing the number of rows and columns of the matrix respectively. The next N lines each contain M integers, where the j-th integer in the i-th line represents the element in the i-th row and j-th column of the matrix. Output: Print a single integer, the minimum cost required to remove all elements from the matrix. Examples: Input: 2 2 3 2 4 1 Output: 3 Input: 3 3 2 1 5 3 4 2 1 3 6 Output: 3","solution":"def min_cost_to_remove_all(matrix): Calculate the minimum cost to remove all elements from the matrix by either removing rows or columns. The minimum cost is determined by examining the smallest element in the matrix, since removing the row/column containing the smallest element first leads to the smallest accumulation of costs. Args: matrix (list of list of int): The matrix of non-negative integers. Returns: int: The minimum cost to remove all elements. min_element = min(min(row) for row in matrix) return min_element"},{"question":"You are given a string S of lowercase alphabet characters and the task is to check if it forms a valid palindrome after removing exactly one character from the string. A palindrome is a string that reads the same forward and backward. Your task is to return a boolean value: true if the string can form a valid palindrome by removing exactly one character, otherwise return false. Example 1: Input: S = abca Output: true Explanation: Removing \'b\' results in the palindrome \'aca\'. Example 2: Input: S = racecar Output: true Explanation: Removing \'e\' results in the palindrome \'raccar\'. Example 3: Input: S = abc Output: false Explanation: No single removal can result in a palindrome. Your Task: Complete the function canFormPalindrome() that takes a string s as its parameter and returns a boolean indicating whether the string can form a palindrome by removing exactly one character. The printing is done by the driver code. Constraints: - 1 ≤ length of String ≤ 10^5 - The string contains only lowercase alphabet characters. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1)","solution":"def canFormPalindrome(s: str) -> bool: def isPalindromeRange(i, j): while i < j: if s[i] != s[j]: return False i, j = i + 1, j - 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return isPalindromeRange(left + 1, right) or isPalindromeRange(left, right - 1) left, right = left + 1, right - 1 return True"},{"question":"To preserve the integrity of the zoo, a zookeeper wants to ensure animals are fed at strictly regular intervals. Every animal needs to be fed every K hours regardless of the day. Given a schedule, validate if the schedule is regular. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line of each test case contains an integer K — the number of hours within which the animals need to be fed again. - The second line contains an integer N followed by N integers representing the time (in hours since the start of the day) at which the animals were fed. ------ Output Format ------ For each test case, output on a new line, YES if the schedule is regular, and NO otherwise. You may print each character in uppercase or lowercase. For example, NO, no, No and nO, are all considered identical. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ K ≤ 24 1 ≤ N ≤ 24 0 ≤ text{time} < 24 ------ Sample Input 1 ------ 3 4 5 0 4 8 12 16 5 2 0 2 4 7 10 4 3 0 3 6 ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test case 1: The animals are fed every 4 hours (0, 4, 8, 12, 16), which matches the interval K=4. Test case 2: The schedule starts well (0, 2, 4) but then deviates at 7 (instead of 6), making it irregular. Test case 3: Although only 3 times are mentioned, the interval between them (3) matches the given K=3.","solution":"def validate_schedule(T, test_cases): Validate if the feeding schedule for each test case is regular based on the provided interval K. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains: - K (int): The interval in hours at which animals need to be fed. - feeding_times (list of int): Times (in hours since the start of the day) at which the animals were fed. Returns: list of str: For each test case, \\"YES\\" if the schedule is regular, otherwise \\"NO\\". results = [] for i in range(T): K, feeding_times = test_cases[i] n = len(feeding_times) is_regular = True for j in range(1, n): if feeding_times[j] - feeding_times[j - 1] != K: is_regular = False break if is_regular: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alex loves prime numbers and recently learned about prime gaps. A prime gap is the difference between two successive prime numbers. For example, the gap between 5 and 7 is 2, and the gap between 11 and 13 is 2. Given two integers X and Y (X < Y), Alex wants to count the number of prime numbers between X and Y, inclusive. He also wants to find the maximum prime gap in this range. If there are fewer than two prime numbers in the range, the prime gap is considered to be 0 for this purpose. You need to help Alex by counting the number of prime numbers between X and Y, and finding the maximum prime gap in this range. Input The input contains two space-separated integers X and Y (2 ≤ X < Y ≤ 10^6). Output Output two integers: the count of prime numbers between X and Y, and the maximum prime gap within that range. If there is only one prime number or no prime numbers, the prime gap should be 0. SAMPLE INPUT 10 30 SAMPLE OUTPUT 6 6 Explanation The prime numbers between 10 and 30 are: 11, 13, 17, 19, 23, and 29. Therefore, the count of prime numbers is 6. The gaps are: 13-11 = 2, 17-13 = 4, 19-17 = 2, 23-19 = 4, 29-23 = 6. The maximum gap is 6.","solution":"def count_primes_and_max_gap(X, Y): def is_prime(n): if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True primes = [num for num in range(X, Y + 1) if is_prime(num)] if len(primes) < 2: return len(primes), 0 max_gap = max(primes[i + 1] - primes[i] for i in range(len(primes) - 1)) return len(primes), max_gap"},{"question":"Consider a permutation of integers from 1 to n. A permutation is good if for every i (1 ≤ i ≤ n), when you perform a bitwise AND operation on all elements from the start of the permutation up to the ith element, the result is non-decreasing. In other words, if `A` is your permutation, then `A[0] & A[1] & ... & A[i] ≤ A[0] & A[1] & ... & A[i + 1]` for every valid i. Determine how many such good permutations exist for a given n. Output the number modulo 1000000007 (10^9 + 7). -----Input----- A single integer n (1 ≤ n ≤ 1000) — the number of elements in the permutation. -----Output----- Output a single integer — the number of good permutations modulo 1000000007 (10^9 + 7). -----Example----- Input 1 Output 1 Input 2 Output 2 Input 3 Output 0","solution":"MOD = 1000000007 def good_permutations(n): \'\'\' Determines the number of good permutations as per the given conditions. \'\'\' # For n = 1 or n = 2, all permutations are good if n == 1: return 1 if n == 2: return 2 # For n > 2, no good permutation exists return 0"},{"question":"A company named Robotic Delivery Services (RDS) specializes in delivering parcels using autonomous robots. Each robot moves on a grid of city streets, represented by a 2D matrix where the value at each cell indicates whether that cell is passable (1 for passable, 0 for impassable). Each robot can move up, down, left, or right to an adjacent cell, but not diagonally. The robots must find the shortest path from their starting point to a designated delivery point while avoiding impassable cells. Given the grid and the coordinates of the starting point and the delivery point, develop a program to determine the shortest path the robot should take. Input The input consists of multiple test cases. Each test case starts with two integers m and n (2 ≤ m, n ≤ 100), indicating the number of rows and columns in the grid, followed by m lines each containing n integers (either 0 or 1) representing the grid. After the grid, two pairs of integers (sx, sy) and (dx, dy) specify the starting and delivery points, respectively, where 0 ≤ sx, dx < m and 0 ≤ sy, dy < n. Both the starting and delivery points are guaranteed to be passable (i.e., have a value of 1). The input terminates with two zeros for m and n. Output For each test case, your program should print the test case number (starting from 1) and the length of the shortest path. If there is no valid path, output \\"No path\\". Example Input 5 5 1 1 1 0 1 1 0 1 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 0 0 4 4 5 5 4 4 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 0 0 0 3 3 0 0 Output 1 8 2 No path Note In the first test case, the shortest path from (0, 0) to (4, 4) is of length 8: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (3,3) -> (4,3) -> (4,4) In the second test case, there is no valid path from (0,0) to (3,3).","solution":"from collections import deque def shortest_path(grid, start, end): m, n = len(grid), len(grid[0]) sx, sy = start dx, dy = end directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(sx, sy, 0)]) visited = set() visited.add((sx, sy)) while queue: x, y, distance = queue.popleft() if (x, y) == (dx, dy): return distance for d in directions: nx, ny = x + d[0], y + d[1] if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 1: visited.add((nx, ny)) queue.append((nx, ny, distance + 1)) return \\"No path\\" def solve_rds_cases(): import sys input = sys.stdin.read data = input().split() index = 0 case_number = 1 while True: m = int(data[index]) n = int(data[index + 1]) if m == 0 and n == 0: break index += 2 grid = [] for _ in range(m): grid.append(list(map(int, data[index:index + n]))) index += n sx, sy = map(int, data[index:index + 2]) dx, dy = map(int, data[index + 2:index + 4]) index += 4 result = shortest_path(grid, (sx, sy), (dx, dy)) print(f\\"{case_number} {result}\\") case_number += 1"},{"question":"John loves writing novels and has many characters in his stories. He wants to create unique character names that follow a particular pattern. Each character\'s name is composed of lowercase English letters. A name is considered valid if all its letters appear in alphabetical order, even if some letters are missing. Given a list of names, determine if each name is valid based on the above condition. ------ Input ------ First line contains T, the number of test cases. Each test case consists of a single line containing a string S representing a character\'s name. ------ Output ------ For every test case, if the name is valid, print \\"VALID\\" on a separate line, otherwise \\"INVALID\\". The output is case insensitive, meaning either \\"valid\\" or \\"VALID\\" will be accepted. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ |S| ≤ 50 S contains only lowercase English letters. ------ Sample Input 1 ------ 3 abc cba ace ------ Sample Output 1 ------ VALID INVALID VALID ------ Explanation 1 ------ For test case 1: The name \\"abc\\" is valid as the letters appear in alphabetical order. For test case 2: The name \\"cba\\" is invalid as the letters do not follow the alphabetical order. For test case 3: The name \\"ace\\" is valid as the letters appear in alphabetical order despite some letters being missing.","solution":"def is_valid_name(name): Returns \\"VALID\\" if the name has letters in alphabetical order, otherwise \\"INVALID\\". return \\"VALID\\" if name == \'\'.join(sorted(name)) else \\"INVALID\\" def check_names(names): Given a list of names, returns a list of results if each name is valid or not. return [is_valid_name(name) for name in names]"},{"question":"Create a function called `balance_parentheses` that takes a string consisting of only the characters \'(\', \')\' as input. The function should return a boolean indicating whether the parentheses in the input string are balanced. A balanced set of parentheses means every opening parenthesis \'(\' has a corresponding closing parenthesis \')\', and the pairs of parentheses are correctly nested. Example: ``` balance_parentheses(\\"()\\") -> True balance_parentheses(\\")(\\") -> False balance_parentheses(\\"(()\\") -> False balance_parentheses(\\"(())\\") -> True ```","solution":"def balance_parentheses(s): Returns whether the parentheses in the input string are balanced. :param s: input string consisting of \'(\' and \')\' :return: boolean indicating whether the parentheses are balanced stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Jim is a supercomputer enthusiast, and he\'s fascinated by binary trees. His latest interest lies in a special kind of binary tree called the \\"Super Binary Tree\\". A Super Binary Tree (SBT) has some unique properties: 1. Every node has exactly 0 or 2 children. 2. Each non-leaf node has two children, and the node value is equal to the sum of its children\'s values. Jim is given a leaf array, which represents the values of the leaves of an SBT from left to right. Jim\'s task is to reconstruct the SBT and find the value of the root node. Write a function to help Jim rebuild the tree and find the root value based on the given leaf values. Input The input consists of a single integer n (representing the number of leaf nodes which is always a power of 2), followed by n space-separated integers representing the values of the leaf nodes. Output Output a single integer which is the value of the root node of the reconstructed Super Binary Tree. Constraints 2 ≤ n ≤ 10^6 1 ≤ value of each leaf node ≤ 10^9 Sample Input 4 2 3 5 8 Sample Output 18 Explanation Step 1: leaf nodes: [2, 3, 5, 8] Step 2: Sum pairs [2 + 3, 5 + 8] = [5, 13] Step 3: Sum pairs [5 + 13] = [18] Root value = 18","solution":"def find_root_value(n, leaf_values): Reconstructs the Super Binary Tree and finds the value of the root node from the given leaf values. :param n: Number of leaf nodes (power of 2) :param leaf_values: List containing the values of the leaf nodes :return: Root value of the reconstructed Super Binary Tree while len(leaf_values) > 1: leaf_values = [leaf_values[i] + leaf_values[i + 1] for i in range(0, len(leaf_values), 2)] return leaf_values[0]"},{"question":"To reverse a linked list, special consideration is required for the head and tail nodes and their pointers. Given a singly linked list, you need to write a function that reverses the linked list and returns the head of the reversed list. The linked list is defined as follows: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` **Function Signature:** ```python def reverseList(head: ListNode) -> ListNode: ``` # Example 1: ```python Input: 1 -> 2 -> 3 -> 4 -> 5 Output: 5 -> 4 -> 3 -> 2 -> 1 ``` # Example 2: ```python Input: 7 -> 9 -> 2 Output: 2 -> 9 -> 7 ``` # Note: 1. The function will receive the head of the linked list as an argument. 2. The linked list nodes will have integer values. 3. The function should modify the list in-place and return the new head of the reversed list. **Guidelines to Solve:** - Iterate through the linked list while adjusting the next pointers of each node to point to the previous node as you progress. - Use three pointers: previous, current, and next to help with the reversal process. - At the end, the previous pointer will be pointing to the new head of the reversed linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseList(head: ListNode) -> ListNode: prev = None current = head while current is not None: next_node = current.next # temporarily store the next node current.next = prev # reverse the \'next\' pointer prev = current # move `prev` one step forward current = next_node # move `current` one step forward return prev # `prev` will be the new head at the end"},{"question":"Implement a function that checks whether a given string is a palindrome. The function should ignore non-alphanumeric characters and should be case-insensitive.","solution":"def is_palindrome(s): Checks if the given string is a palindrome, ignoring non-alphanumeric characters and case. Parameters: s (str): The input string. Returns: bool: True if the string is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"You are working on a mobile phone application which allows users to set reminders. One of the key functions of the app is to determine the next available reminder time slot for a given user. Each user has a predefined schedule where they can set reminders, and this schedule repeats weekly. Given the current time and the user’s reminder schedule, determine the next reminder time. The user’s schedule will be provided as a list of strings, each string denoting a day and time slot in the format \\"Day HH:MM\\". For example, \\"Monday 14:30\\". The days are to be given in the order of \\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\". Input: - The current time represented as a string in the format \\"Day HH:MM\\". - An integer N representing the number of available time slots. - A list of N strings, each representing a reminder time in the format \\"Day HH:MM\\". Output: - Return a string representing the next available reminder time in the format \\"Day HH:MM\\". Constraints: 1. If there are multiple next reminders available on the same day, choose the earliest one in terms of time. 2. All inputs will be valid, and the schedule will not include duplicate time slots. 3. The time slots are distributed over a week and repeat weekly. 4. The current time is always earlier than the latest time slot of the week. Example Input: ``` Thursday 16:35 5 Monday 14:00 Wednesday 09:00 Thursday 18:00 Saturday 12:00 Sunday 16:45 ``` Example Output: ``` Thursday 18:00 ``` Explanation: The current time is \\"Thursday 16:35\\". The next available time slot after this is \\"Thursday 18:00\\", as it is still on the same day and comes after 16:35. Another Example Input: ``` Friday 20:00 3 Tuesday 08:00 Friday 19:00 Monday 07:30 ``` Example Output: ``` Monday 07:30 ``` Explanation: The current time is \\"Friday 20:00\\". The next available reminder is on \\"Monday 07:30\\" because there are no slots available after \\"Friday 20:00\\" for the reminder list provided.","solution":"from datetime import datetime, timedelta def parse_time_string(time_str): days_of_week = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] day, time = time_str.split() day_index = days_of_week.index(day) hour, minute = map(int, time.split(\':\')) return day_index, hour, minute def next_reminder(current_time_str, slots): days_of_week = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] current_day_index, current_hour, current_minute = parse_time_string(current_time_str) current_time_in_week = current_day_index * 24 * 60 + current_hour * 60 + current_minute slots_in_minutes = [] for slot in slots: day_index, hour, minute = parse_time_string(slot) time_in_week = day_index * 24 * 60 + hour * 60 + minute slots_in_minutes.append(time_in_week) # Sort slots_in_minutes to get the next time slots_in_minutes.sort() for slot_in_minutes in slots_in_minutes: if slot_in_minutes > current_time_in_week: day_index = slot_in_minutes // (24 * 60) time_in_day = slot_in_minutes % (24 * 60) hour = time_in_day // 60 minute = time_in_day % 60 return f\\"{days_of_week[day_index]} {hour:02d}:{minute:02d}\\" # If no slot is found later this week, return the earliest slot next week earliest_slot = slots_in_minutes[0] day_index = earliest_slot // (24 * 60) time_in_day = earliest_slot % (24 * 60) hour = time_in_day // 60 minute = time_in_day % 60 return f\\"{days_of_week[day_index]} {hour:02d}:{minute:02d}\\""},{"question":"Suzuki needs help preparing for his trip! Suzuki is planning a trip and wants to pack his bag efficiently. He wants to maximize the number of items he can carry without exceeding a given weight limit. You will be given a list of items, each with a weight and a value. Suzuki wants to pack his bag with items such that the total weight does not exceed the weight limit and the total value of the items is maximized. Write a function that takes in: - A list of tuples where each tuple contains two integers representing the weight and value of an item. - An integer representing the weight limit. Your function should return the maximum total value that Suzuki can carry without exceeding the weight limit. Here is an example input: ```python items = [(2, 3), (3, 4), (4, 5), (5, 8)] weight_limit = 5 ``` Here is an example return from your function: ```python max_value = 8 ``` Because Suzuki can carry the last item with weight 5 and value 8, which maximizes his total value without exceeding the weight limit. In another example: ```python items = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)] weight_limit = 5 ``` The function should return: ```python max_value = 5 ``` Because Suzuki can carry the last item with weight 5 and value 5, or he can carry a combination like (2, 2) and (3, 3) which also gives a value of 5. This is a classic knapsack problem; you may use dynamic programming or other efficient methods to solve it. Ensure that your solution is optimized for performance.","solution":"def knapsack(items, weight_limit): # Number of items n = len(items) # Initialize a table to store the maximum value for each weight limit dp = [[0 for w in range(weight_limit + 1)] for i in range(n + 1)] # Build the table in a bottom-up manner for i in range(1, n + 1): for w in range(weight_limit + 1): weight, value = items[i - 1] if weight <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight] + value) else: dp[i][w] = dp[i-1][w] return dp[n][weight_limit]"},{"question":"You are tasked with developing a scheduling algorithm for a university that optimizes classroom usage. Each classroom can be used for multiple time slots throughout the day, and you need to ensure that no two classes overlap in the same classroom. Consider: - You have a list of classrooms, each with a unique identifier. - You have a list of class schedules, where each schedule specifies the start time and end time of a class. Your task is to determine if the provided class schedules can be arranged in such a way that no two classes overlap in the same classroom. Each class must be assigned to one of the available classrooms. If it\'s not possible to assign all classes without conflicts, the algorithm should return false. If it is possible, it should return true and provide one valid assignment of classes to classrooms. -----Input----- The first line of the input contains two integers: - n: the number of classrooms available (1 ≤ n ≤ 100) - m: the number of classes (1 ≤ m ≤ 500) The next m lines contain two integers each: - s_i: the start time of the i-th class (0 ≤ s_i < e_i ≤ 24) - e_i: the end time of the i-th class -----Output----- If it is possible to assign all classes without conflicts, print \\"YES\\" and then m lines with the identifier of the assigned classroom for each class. If it is not possible, print \\"NO\\". -----Example----- Input 3 5 1 4 2 5 6 8 3 7 8 10 Output YES 1 2 1 3 1","solution":"def schedule_classes(n, m, schedules): Determines if it is possible to schedule all classes in the given classrooms without conflicts. Parameters: n (int): Number of classrooms available. m (int): Number of classes. schedules (list of tuples): Each tuple contains start and end time of each class. Returns: tuple: (\\"YES\\" or \\"NO\\", List of assigned classrooms if \\"YES\\", otherwise empty list) schedules = sorted(schedules, key=lambda x: x[0]) # Sort schedules by start times classrooms = [[] for _ in range(n)] # Initialize classrooms with empty schedules assignment = [-1] * m # To record the classroom assignment for each class for i, (start, end) in enumerate(schedules): assigned = False for j in range(n): if not classrooms[j] or classrooms[j][-1][1] <= start: # If the classroom is free to use classrooms[j].append((start, end)) assignment[i] = j + 1 # Assigning to classroom (1-indexed) assigned = True break if not assigned: return (\\"NO\\", []) return (\\"YES\\", assignment) # Example usage if __name__ == \\"__main__\\": n = 3 m = 5 schedules = [(1, 4), (2, 5), (6, 8), (3, 7), (8, 10)] result = schedule_classes(n, m, schedules) print(result[0]) if result[0] == \\"YES\\": for room in result[1]: print(room)"},{"question":"You are given an array of integers and a target integer. Write a function ```findPairWithSum(arr, target)``` that returns a tuple of two integers from the array whose sum is equal to the target value. If there are multiple such pairs, return any one of them. If no such pair exists, return an empty tuple. **Examples:** ```python findPairWithSum([2, 7, 11, 15], 9) -> (2, 7) findPairWithSum([1, 4, 5, 6, 8], 7) -> (1, 6) findPairWithSum([1, 2, 3, 4, 5], 10) -> () ``` **Constraints:** - Each input list will contain at least one element and no more than 100 elements. - Each element in the input list will be an integer between -1000 and 1000. - The target will be an integer between -2000 and 2000.","solution":"def findPairWithSum(arr, target): Returns a tuple of two integers from the array whose sum is equal to the target value. If no such pair exists, return an empty tuple. seen = {} for number in arr: complement = target - number if complement in seen: return (complement, number) seen[number] = True return ()"},{"question":"Several senior citizens in a community are looking to organize a walking group that meets for a stroll in the park each day. They want to ensure they have sufficient energy every day to complete their walk. The energy required for each day\'s walk is predetermined and listed in a sequence. Additionally, each senior citizen has a maximum energy threshold they cannot exceed in a single day for health reasons. Can the group complete their walks without any senior citizen exceeding their maximum energy threshold on any given day? ------ Input Format ------ - First line will contain T, the number of testcases. Then the testcases follow. - Each testcase contains: - The first line contains two integers N (the number of days in the sequence) and M (the number of senior citizens). - The second line contains N integers representing the energy required for the walk on each day. - The third line contains M integers representing the maximum energy threshold for each senior citizen. ------ Output Format ------ For each testcase, output in one line YES if the group can complete their walks without exceeding anyone\'s energy threshold on any given day, or NO if it is not possible. Output is case insensitive, which means that \\"yes\\", \\"Yes\\", \\"YEs\\", \\"no\\", \\"nO\\" - all such strings will be acceptable. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N, M ≤ 1000 1 ≤ Energy values ≤ 1000 1 ≤ Threshold values ≤ 1000 ----- Sample Input 1 ------ 2 3 4 50 60 70 100 80 90 110 2 3 90 120 100 110 150 ----- Sample Output 1 ------ YES NO ----- Explanation 1 ------ Test Case 1: The energy required on each day fits within the threshold of all senior citizens: - Day 1: 50 units of energy required; all have a threshold of at least 80. - Day 2: 60 units of energy required; all have a threshold of at least 80. - Day 3: 70 units of energy required; all have a threshold of at least 80. Hence, the answer is YES. Test Case 2: On Day 2, 150 units of energy required exceeds all the senior citizens\' thresholds, hence the answer is NO.","solution":"def can_complete_walks(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] energy_required = test_cases[i][1] energy_thresholds = test_cases[i][2] max_energy_required = max(energy_required) if all(threshold >= max_energy_required for threshold in energy_thresholds): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Jack is planning to plant a garden with flowers this spring! Jack can buy two types of plants from the shop: roses and tulips. Each rose plant can produce P flowers. Each tulip plant can produce Q flowers. One packet of roses contains 3 plants, while one packet of tulips contains 4 plants. Jack can only buy one packet of either roses or tulips, and wants to maximize the number of flowers he can get. Print Roses if the packet of roses produces more flowers, Tulips if the packet of tulips produces more flowers, and Either if they produce the same number of flowers. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of one line of input, containing two space-separated integers P and Q — the number of flowers each rose plant and tulip plant can produce, respectively. ------ Output Format ------ For each test case, output on a new line the answer: - Roses if the packet of roses produces more flowers. - Tulips if the packet of tulips produces more flowers. - Either if they produce the same number of flowers. You may print each character of the output in either uppercase or lowercase, i.e, Tulips, TULIPS, TuLiPs and tULIps will all be treated as equivalent. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ P, Q ≤ 10 ----- Sample Input 1 ------ 3 2 2 3 1 4 3 ----- Sample Output 1 ------ Tulips Roses Tulips ----- explanation 1 ------ Test case 1: The packet of roses produces 3times 2 = 6 flowers, while the packet of tulips produces 4times 2 = 8 flowers. The tulips produce more flowers. Test case 2: The packet of roses produces 3times 3 = 9 flowers, while the packet of tulips produces 4times 1 = 4 flowers. The roses produce more flowers. Test case 3: The packet of roses produces 3times 4 = 12 flowers, while the packet of tulips produces 4times 3 = 12 flowers. They produce the same number of flowers.","solution":"def maximize_flowers(T, cases): results = [] for P, Q in cases: roses_flowers = P * 3 tulips_flowers = Q * 4 if roses_flowers > tulips_flowers: results.append(\\"Roses\\") elif tulips_flowers > roses_flowers: results.append(\\"Tulips\\") else: results.append(\\"Either\\") return results"},{"question":"Binary Tree Level Order Traversal Write a function that performs level-order traversal on a binary tree and returns the values of the nodes level by level. **Function Signature** ```python def level_order_traversal(root: Optional[TreeNode]) -> List[List[int]]: ``` **Input** - `root`: the root node of the binary tree represented as an instance of the `TreeNode` class. If the tree is empty, `root` will be `None`. **Output** - A list of lists of integers where each list contains the values of the nodes at that level of the tree. # Example Input: ```plaintext 3 / 9 20 / 15 7 ``` Binary tree represented in the form of `TreeNode` instances. Output: ```python [ [3], [9, 20], [15, 7] ] ``` # Constraints - Each node in the binary tree contains a distinct value. - The number of nodes in the tree will be in the range [0, 100]. - Tree node class is defined as: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` # Requirements - Implement the function `level_order_traversal` using breadth-first search (BFS). - Do not use known libraries that directly implement level-order traversal.","solution":"from typing import List, Optional class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def level_order_traversal(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] result = [] queue = [root] while queue: level = [] next_queue = [] for node in queue: level.append(node.val) if node.left: next_queue.append(node.left) if node.right: next_queue.append(node.right) result.append(level) queue = next_queue return result"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid initially contains a value representing the height of that cell. The grid is represented by the matrix A of size N times M. You can perform the following operation on the grid any number of times: Choose any cell (r, c) in the grid and increment its value by 1, i.e., A[r][c] becomes A[r][c] + 1. You need to tell if it is possible to make all values in the grid equal using the above operation. -----Input----- - The first line of the input contains two space-separated integers N and M. - Each of the next N lines contains M space-separated integers, where the j-th integer in the i-th line is A[i][j]. -----Output----- Print \\"Yes\\" if it is possible to make all values in the grid equal, otherwise print \\"No\\". -----Constraints----- - 1 le N, M le 100 - 1 le A[i][j] le 10^9 for all valid i, j. -----Example Input----- 3 3 1 2 3 4 5 6 7 8 9 -----Example Output----- Yes -----Explanation----- In the provided example, we can increment all cells to equal the maximum height value, in this case, 9: - Increment cell (0,0) 8 times - Increment cell (0,1) 7 times - Increment cell (0,2) 6 times - Increment cell (1,0) 5 times - Increment cell (1,1) 4 times - Increment cell (1,2) 3 times - Increment cell (2,0) 2 times - Increment cell (2,1) 1 time - Increment cell (2,2) 0 times","solution":"def can_make_all_values_equal(N, M, A): Function to determine if it is possible to make all grid values equal. Args: N: int : number of rows in grid M: int : number of columns in grid A: list of list of int : grid representing the heights of cells Returns: str : \\"Yes\\" if it possible to make all values equal, otherwise \\"No\\" max_height = max(max(row) for row in A) return \\"Yes\\" # Example usage N = 3 M = 3 A = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(can_make_all_values_equal(N, M, A)) # Output: Yes"},{"question":"In a popular puzzle game, there is a grid represented by an m times n matrix filled with non-negative integers. The objective is to find the \\"magic path\\" from the top-left corner of the grid (position (0, 0)) to the bottom-right corner (position (m-1, n-1)). The magic path is defined as a path with the minimum sum of all its numbers, moving only to the right or down at each step. -----Input----- The first line of the input contains two integers m and n (1 le m, n le 100), specifying the number of rows and columns in the grid, respectively. Each of the next m lines contains n space-separated non-negative integers representing a row of the grid. -----Output----- Output the minimum sum along a path from the top-left corner to the bottom-right corner of the grid. -----Examples----- Sample Input 1: 3 3 1 3 1 1 5 1 4 2 1 Sample Output 1: 7 Sample Input 2: 2 2 1 2 1 1 Sample Output 2: 3","solution":"def min_path_sum(grid): Computes the minimum path sum from the top-left corner to the bottom-right corner. Parameters: grid (list of list of int): 2D list representing the grid. Returns: int: Minimum sum along the path. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # DP table to store minimum path sum until each cell dp = [[0]*n for _ in range(m)] dp[0][0] = grid[0][0] # Initialize first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]"},{"question":"Maria works at a company where she manages several projects. Each project has a starting date and an ending date, and Maria needs to make sure that at any given time, no two projects are overlapping. Maria needs your help to determine the minimum number of projects she needs to remove to ensure that no two projects overlap. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of projects. Each of the next n lines contains two integers s and e (1 ≤ s < e ≤ 10^6) — the starting and ending dates of a project. -----Output----- Output one integer — the minimum number of projects Maria needs to remove to ensure no two projects overlap. -----Examples----- Input 4 1 3 2 5 4 6 7 8 Output 1 Input 3 1 2 2 3 3 4 Output 0 -----Note----- In the first test case, Maria can remove the project with the interval (2, 5) to ensure no overlaps exist. The remaining projects are (1, 3), (4, 6), and (7, 8) which do not overlap. In the second test case, no projects overlap, so Maria doesn\'t need to remove any projects.","solution":"def min_removals_to_avoid_overlap(projects): Given a list of project intervals, return the minimum number of projects to remove to ensure no two projects overlap. # Sort projects by their end date projects.sort(key=lambda x: x[1]) # Initialize variables end_time = -1 count = 0 for s, e in projects: # If the start time of the current project is less than or equal to # the end time of the previous project, increment the removal counter if s < end_time: count += 1 else: # Update the end_time to the current end time end_time = e return count"},{"question":"Polycarp has a collection of strings and numbers. He wants to replace all instances of each of his numbers within his strings with the square of the number. The replacement should be done in such a way that no other part of the string is altered. Can you help him by writing a program that performs this replacement? Input The first line contains an integer n (1 ≤ n ≤ 10), the number of strings. Each of the next n lines contains a string s (1 ≤ |s| ≤ 100) which consists of lowercase English letters and digits. The next line contains m (1 ≤ m ≤ 10), the number of distinct numbers. Each of the next m lines contains a single integer x (0 ≤ x ≤ 9). Output Print n lines. Each line should contain the modified version of the corresponding input string with each integer x replaced by its square x^2. Examples Input 2 hello1world test2case3 3 1 2 3 Output hello1world test4case9 Input 1 a1b2c3d4 2 1 4 Output a1b2c3d16 Note In the first example: - The number 1 in string \\"hello1world\\" is replaced by 1^2 which is 1. - The numbers 2 and 3 in string \\"test2case3\\" are replaced by 2^2 which is 4 and 3^2 which is 9 respectively. In the second example: - The number 1 is replaced by 1^2 which is 1. - The number 4 is replaced by 4^2 which is 16. Other characters in the strings remain unchanged.","solution":"def replace_numbers_with_squares(strings, numbers): Replaces all instances of each number in strings with the square of the number. Parameters: strings (list of str): The list of strings to process. numbers (list of int): The list of distinct numbers whose squares will replace their occurrences in the provided strings. Returns: list of str: The modified strings. # Create a dictionary for quick lookup of the squared values square_map = {str(num): str(num ** 2) for num in numbers} # Replace numbers with their squares in each string result = [] for s in strings: for num_str, num_square in square_map.items(): s = s.replace(num_str, num_square) result.append(s) return result"},{"question":"Create a function that accepts a list of integers and returns a new list containing only the prime numbers from the original list. The function takes a list of integers (input_list) as a parameter and should filter out the prime numbers. For example, given the list [2, 3, 4, 5, 10, 13, 15], the result should be [2, 3, 5, 13].","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(input_list): Returns a new list containing only the prime numbers from the original list. return [num for num in input_list if is_prime(num)]"},{"question":"-----Path Counting----- Alice is fond of walking and has a peculiar way to walk in her city. The city is represented as an infinite 2D grid. Each cell of the grid represents a possible position Alice can walk to. Alice always starts at the origin (0, 0) and can make any number of moves, where each move consists of stepping to any of the 8 possible adjacent cells (up, down, left, right, or any of the four diagonals). Given a number N, which represents the total number of steps Alice can take, you need to find out the number of distinct cells Alice can reach, including the starting position (0, 0), after exactly N steps. -----Input Format:----- - Line 1: A single integer N, the number of steps Alice can take. -----Output Format----- - Line 1: A single integer, the number of distinct cells Alice can reach after exactly N steps. -----Example----- Example 1: Input: 1 Output: 9 Example 2: Input: 2 Output: 25 Example 3: Input: 3 Output: 49 -----Explanation----- In Example 1, Alice can step into any of the 8 adjacent cells of the origin or remain at (0, 0). Thus, she can reach 9 distinct cells in total. In Example 2, after 2 steps, Alice can reach cells that form a square area covering a side length of 5 centered at the origin, giving her access to 25 distinct cells. In Example 3, after 3 steps, Alice can reach cells in a square area covering a side length of 7 centered at the origin, giving her access to 49 distinct cells. Note: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission.","solution":"def number_of_distinct_cells(N): Returns the number of distinct cells Alice can reach after exactly N steps. # The pattern shows that after N steps, Alice can reach a square of side (2N + 1) side_length = 2 * N + 1 return side_length * side_length"},{"question":"In a university, each student must complete a series of assignments for their course. The professor has provided all due dates and the time required to complete each assignment. Given this information, determine the minimum total number of hours required to complete all assignments, ensuring no assignments overlap in time. You may assume that all due dates are given in terms of days relative to the start of the course, and the time to complete each assignment is given in hours. No two assignments have the same due date. Example 1: Input: due_dates = [2, 4, 6], completion_times = [2, 3, 1] Output: 6 Explanation: The assignments can be completed as follows: - Assignment 1 (due on day 2) can be completed on day 1 and 2 (total 2 hours). - Assignment 2 (due on day 4) can be completed on day 3 and 4 (total 3 hours). - Assignment 3 (due on day 6) can be completed on day 5 (total 1 hour). So in total, 6 hours are required. Example 2: Input: due_dates = [1, 2, 4], completion_times = [3, 2, 1] Output: 6 Explanation: The assignments can be completed as follows: - Assignment 1 (due on day 1) can be completed on days -2, -1, and 1 (3 hours total). - Assignment 2 (due on day 2) can be completed on days 0, 1, and 2 (2 hours total, but only 2 additional days of work are required to complement already done days). - Assignment 3 (due on day 4) can be completed on days 3 and 4 (1 hour). So in total, 6 hours are required. Note: You may assume that the length of the given due_dates and completion_times array won\'t exceed 10000. You may assume the values in due_dates are positive integers representing days, and values in completion_times are positive integers representing hours, both within the range of 1 to 100.","solution":"def min_hours_to_complete_assignments(due_dates, completion_times): Returns the minimum total number of hours required to complete all assignments without overlapping. # Combine and sort assignments by due date assignments = sorted(zip(due_dates, completion_times)) total_hours = 0 max_day = 0 for due_date, completion_time in assignments: if max_day < due_date: max_day = due_date work_start_day = max_day - (completion_time - 1) total_hours += completion_time max_day = work_start_day - 1 return total_hours"},{"question":"Given an array of integers, write a function to sort the elements in non-decreasing order based on the frequency of each element. If two elements have the same frequency, they should be sorted according to their value in non-decreasing order. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of elements in the array. The second line contains n integers, the elements of the array (1 ≤ ai ≤ 1000). Output Print the elements of the sorted array in a single line. Examples Input 6 4 5 6 5 4 3 Output 3 6 4 4 5 5 Input 5 9 9 9 6 6 Output 6 6 9 9 9","solution":"from collections import Counter def frequency_sort(n, arr): Sorts the elements in non-decreasing order based on the frequency of each element. If two elements have the same frequency, they should be sorted according to their value in non-decreasing order. Args: n: int : Number of elements in the array arr: List[int] : List containing the elements of the array Returns: List[int] : Sorted list based on the frequency of each element freq = Counter(arr) sorted_arr = sorted(arr, key=lambda x: (freq[x], x)) return sorted_arr # Example usage: # n = 6 # arr = [4, 5, 6, 5, 4, 3] # print(frequency_sort(n, arr)) # Output: [3, 6, 4, 4, 5, 5]"},{"question":"In this problem, you have to filter out products from an e-commerce catalog based on their price and a given price range. Each product in the catalog is represented by a dictionary containing the keys \'name\' and \'price\'. The goal is to return a catalog that only includes products whose prices fall within the specified minimum and maximum range (inclusive). You will receive a list of product dictionaries called `catalog`, a minimum price called `min_price`, and a maximum price called `max_price`. For example, if a product has a price of 50 and the minimum price is 30, while the maximum price is 70, this product will be included in the result as 50 is between 30 and 70. The result should be a list of dictionaries matching the criteria. # Examples ```python catalog = [ {\\"name\\": \\"Laptop\\", \\"price\\": 1000}, {\\"name\\": \\"Smartphone\\", \\"price\\": 500}, {\\"name\\": \\"Tablet\\", \\"price\\": 300}, {\\"name\\": \\"Headphones\\", \\"price\\": 100} ] min_price = 200 max_price = 800 ==> [ {\\"name\\": \\"Smartphone\\", \\"price\\": 500}, {\\"name\\": \\"Tablet\\", \\"price\\": 300} ] catalog = [ {\\"name\\": \\"Shirt\\", \\"price\\": 20}, {\\"name\\": \\"Jeans\\", \\"price\\": 40}, {\\"name\\": \\"Jacket\\", \\"price\\": 60}, {\\"name\\": \\"Shoes\\", \\"price\\": 80} ] min_price = 30 max_price = 70 ==> [ {\\"name\\": \\"Jeans\\", \\"price\\": 40}, {\\"name\\": \\"Jacket\\", \\"price\\": 60} ] catalog = [], min_price = 50, max_price = 100 ==> [] ``` **Note:** You can assume that all prices will be non-negative integers and the `min_price` will always be less than or equal to `max_price`.","solution":"def filter_products(catalog, min_price, max_price): Filters the products in the catalog based on the given price range. Args: catalog (list of dict): List of product dictionaries, where each dictionary contains \'name\' and \'price\'. min_price (int): The minimum price of the range. max_price (int): The maximum price of the range. Returns: list of dict: A list of product dictionaries whose prices fall within the given range. return [product for product in catalog if min_price <= product[\'price\'] <= max_price]"},{"question":"Suppose you are given a list of integers representing the heights of pillars arranged in a straight line across a landscape. Your objective is to check whether it is possible to traverse from the first pillar to the last pillar without ever stepping down to a lower pillar. Each step must be either to the next pillar or stay at the current one but cannot skip pillars. Return a boolean result: `True` if it\'s possible to traverse in this fashion, otherwise `False`. Example 1: Input: heights = [1, 2, 2, 3] Output: True Explanation: You can start at height 1 and move to height 2, then move to the next height 2 and finally to height 3 without any downward step. Example 2: Input: heights = [3, 2, 5, 6] Output: False Explanation: You start at height 3, but the next height is 2, which is a step down. Example 3: Input: heights = [1, 3, 3, 5, 5, 5, 7] Output: True Explanation: You can always move to the next pillar as each subsequent pillar\'s height is either equal or greater than the current one. Your Task: You don\'t need to read input or print anything. Your task is to complete the function is_traversable(heights) which takes the list heights as input and returns a boolean result `True` or `False`. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(heights) ≤ 10^5 1 ≤ heights[i] ≤ 10^9","solution":"def is_traversable(heights): Check if it is possible to traverse from the first pillar to the last pillar without ever stepping down to a lower pillar. Parameters: heights (list): A list of integers representing the heights of the pillars. Returns: bool: True if it is possible to traverse without stepping down, False otherwise. n = len(heights) for i in range(1, n): if heights[i] < heights[i - 1]: return False return True"},{"question":"You are given an array of integers and an integer K. Your task is to determine whether there exists a subsequence within the array that sums up to K. Input The first line of input contains two integers, N (1 ≤ N ≤ 100) and K (0 ≤ K ≤ 1000), where N is the length of the array and K is the target sum. The second line contains N integers a1, a2, .., aN (-100 ≤ ai ≤ 100). Output Output \\"Yes\\" if there exists a subsequence that sums up to K, otherwise output \\"No\\". Examples Input 5 9 2 3 1 2 8 Output Yes Input 4 15 1 2 4 5 Output No","solution":"def subsequence_sum_k(n, k, array): Determines if there exists a subsequence within `array` that sums up to `k`. :param n: Length of the array :param k: The target sum :param array: List of integers :return: \\"Yes\\" if such subsequence exists, \\"No\\" otherwise # To store previous possible sums possible_sums = {0} # Iterate through each number in the array for num in array: new_sums = set() for current_sum in possible_sums: new_sum = current_sum + num new_sums.add(new_sum) possible_sums.update(new_sums) # Early exit if target sum k is found if k in possible_sums: return \\"Yes\\" return \\"No\\""},{"question":"In a magical forest, there are n trees standing in a row. Each tree has a certain height. A geologist wants to know which trees can be seen if he observes from the left side. A tree can be seen if there are no taller trees to its left. Write a program that determines the number of trees that can be seen from the left side and their heights. Input The first line contains a single integer n (1 ≤ n ≤ 100,000), the number of trees. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000), where hi is the height of the i-th tree. Output On the first line, print an integer — the number of trees that can be seen from the left side. On the second line, print the heights of these trees in the order they appear from left to right. Examples Input 5 2 5 3 4 1 Output 2 2 5 Input 3 1 2 1 Output 2 1 2","solution":"def visible_trees_from_left(n, heights): Returns the number of visible trees and their heights from the left side. Parameters: n (int): the number of trees heights (list): a list of integers representing the heights of the trees Returns: tuple: (count of visible trees, list of visible tree heights) if not heights or n == 0: return (0, []) visible_trees = [] max_height = 0 for height in heights: if height > max_height: visible_trees.append(height) max_height = height return (len(visible_trees), visible_trees) # Example usage: # n = 5 # heights = [2, 5, 3, 4, 1] # print(visible_trees_from_left(n, heights)) # Output: (2, [2, 5])"},{"question":"**Task** Write a function `closest_pair(points)` that takes a list of tuples `points`, where each tuple consists of two integers representing the coordinates of a point on a 2D plane. The function should return the Euclidean distance between the closest pair of points. # Function Signature ```python def closest_pair(points: List[Tuple[int, int]]) -> float: ``` # Input - A list of `n` tuples, where `1 <= n <= 10^5` and each tuple contains two integers `x` and `y` such that `-10^9 <= x, y <= 10^9`. # Output - The minimal Euclidean distance between the closest pair of points, which is a float value rounded to 6 decimal places. # Example ```python >>> closest_pair([(0, 0), (1, 1), (4, 5), (13, 14)]) 1.414214 ``` # Notes - The Euclidean distance between two points `p1(x1, y1)` and `p2(x2, y2)` is calculated as `sqrt((x2 - x1)^2 + (y2 - y1)^2)`. - A brute-force solution might not be efficient enough due to the potential high number of points, so consider optimization techniques such as the divide and conquer approach.","solution":"from typing import List, Tuple import math def closest_pair(points: List[Tuple[int, int]]) -> float: def calculate_distance(p1, p2): return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) def closest_pair_recursive(sorted_x_points, sorted_y_points): n = len(sorted_x_points) if n <= 3: min_dist = float(\'inf\') for i in range(n): for j in range(i + 1, n): min_dist = min(min_dist, calculate_distance(sorted_x_points[i], sorted_x_points[j])) return min_dist mid = n // 2 midpoint = sorted_x_points[mid][0] left_sorted_x = sorted_x_points[:mid] right_sorted_x = sorted_x_points[mid:] left_sorted_y = list(filter(lambda p: p[0] <= midpoint, sorted_y_points)) right_sorted_y = list(filter(lambda p: p[0] > midpoint, sorted_y_points)) min_dist_left = closest_pair_recursive(left_sorted_x, left_sorted_y) min_dist_right = closest_pair_recursive(right_sorted_x, right_sorted_y) min_dist = min(min_dist_left, min_dist_right) strip = [p for p in sorted_y_points if abs(p[0] - midpoint) < min_dist] for i in range(len(strip)): for j in range(i + 1, min(i + 7, len(strip))): min_dist = min(min_dist, calculate_distance(strip[i], strip[j])) return min_dist sorted_x_points = sorted(points, key=lambda x: x[0]) sorted_y_points = sorted(points, key=lambda y: y[1]) return round(closest_pair_recursive(sorted_x_points, sorted_y_points), 6)"},{"question":"You are working on an e-commerce platform that processes customer orders. Each customer can place multiple orders, and each order contains multiple items. Each item has a unique ID, price, and quantity. The overall goal is to calculate the total amount each customer has spent on their orders. To optimize the system, you need to write a program that takes the list of customers and their orders and computes the total expenditure for each customer. Input The first line contains an integer n — the number of customers. For each customer, the input contains the following in separate lines: - An integer m — the number of orders the customer has placed. - For each order, an integer k — the number of items in the order. - For each item, three integers separated by spaces: item ID, item price, and item quantity. Output For each customer, print the total amount spent by the customer in the following format: `Customer i: total_amount` where i is the number of the customer (starting from 1) and total_amount is the sum of price * quantity for all items in all orders of the customer. Example Input 2 3 2 101 100 2 102 150 1 1 103 200 3 4 104 300 1 105 400 2 106 500 1 2 2 201 120 1 202 130 2 3 203 140 3 204 150 1 205 160 1 Output Customer 1: 2850 Customer 2: 1210 Note In the first sample: - Customer 1 has 3 orders. The total amount spent in the orders is calculated as follows: - First order: (100*2) + (150*1) = 350 - Second order: (200*3) = 600 - Third order: (300*1) + (400*2) + (500*1) = 1900 - Total = 350 + 600 + 1900 = 2850 - Customer 2 has 2 orders. The total amount spent in the orders is calculated as follows: - First order: (120*1) + (130*2) = 380 - Second order: (140*3) + (150*1) + (160*1) = 830 - Total = 380 + 830 = 1210","solution":"def calculate_total_expenditure(customers): results = [] for i in range(customers): total_amount = 0 orders = int(input().strip()) for _ in range(orders): items = int(input().strip()) for _ in range(items): item_id, price, quantity = map(int, input().strip().split()) total_amount += price * quantity results.append(f\\"Customer {i + 1}: {total_amount}\\") return results # Example usage: if __name__ == \\"__main__\\": import sys from io import StringIO input_data = StringIO(2 3 2 101 100 2 102 150 1 1 103 200 3 4 104 300 1 105 400 2 106 500 1 2 2 201 120 1 202 130 2 3 203 140 3 204 150 1 205 160 1 ) sys.stdin = input_data n = int(input().strip()) results = calculate_total_expenditure(n) for result in results: print(result)"},{"question":"Julia is an aspiring botanist who is studying different species of plants. She has a row of plants arranged in a straight line. Each plant has a unique height. She is given multiple queries, each asking for a specific range of plants and the height of the Kth tallest plant within that range. Help Julia find the answers to her queries efficiently. Input First line contains 2 integers N and Q, the number of plants and the number of queries respectively. The second line contains N integers representing the heights of the plants. The next Q lines each contain 3 integers L, R and K. Output For each query, output the height of the Kth tallest plant in the range from L to R, inclusively. If such a Kth tallest plant does not exist, print \\"Out of range\\" (without quotes). Constraints 1 ≤ N ≤ 5*10^4 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N 1 ≤ K ≤ (R - L + 1) SAMPLE INPUT 7 3 10 20 15 25 30 5 40 2 5 2 1 7 3 3 6 5 SAMPLE OUTPUT 25 25 Out of range Explanation In the first query, the heights of plants from position 2 to 5 are [20, 15, 25, 30]. The 2nd tallest height is 25. In the second query, the heights of all plants are [10, 20, 15, 25, 30, 5, 40]. The 3rd tallest height is 25. In the third query, the heights of plants from position 3 to 6 are [15, 25, 30, 5]. Since K is 5 but there are only 4 plants in the range, the output is \\"Out of range\\".","solution":"def find_kth_tallest(N, Q, heights, queries): results = [] for query in queries: L, R, K = query if K > (R - L + 1): results.append(\\"Out of range\\") else: sublist = heights[L-1:R] sublist.sort(reverse=True) results.append(sublist[K-1]) return results"},{"question":"Write a function that rotates a 2D matrix by 90 degrees clockwise. The function should take a square matrix (n x n) as input and return a new matrix that is rotated. Example: Input: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Input: ``` [ [1, 2], [3, 4] ] ``` Output: ``` [ [3, 1], [4, 2] ] ``` # Function Signature ``` def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: pass ```","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates a given n x n 2D matrix by 90 degrees clockwise. Args: matrix: A list of lists of integers representing an n x n matrix. Returns: A list of lists of integers representing the rotated matrix. n = len(matrix) # Create a new matrix of the same size rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n-1-i] = matrix[i][j] return rotated"},{"question":"A town has several roads, and each road connects two different locations in the town. The local authorities want to make it easy for people to reach any part of the town using these roads. However, in the monsoon season, some roads are blocked due to flooding, making it difficult for residents to travel. Your task is to write a program that can determine whether it is still possible to reach every location from any starting point, even if some roads are blocked. Input The input consists of several datasets. Each dataset is provided in the following format: N M l1 l2 ... lM A B s1 s2 . . . The first line contains two integers, N and M, where N (1 ≤ N ≤ 1000) is the number of locations and M (0 ≤ M ≤ 2000) is the number of roads. The second line contains M integers representing the roads that are blocked. Each blocked road is referenced by its index (1 ≤ li ≤ M). The third line contains two different integers A and B (1 ≤ A, B ≤ N), representing the two locations being checked for connectivity. The next M lines contain the descriptions of the roads. Each road line consists of two integers si and ti (1 ≤ si, ti ≤ N), indicating that there is a road from location si to location ti. The input ends with a line containing \\"0 0\\", which should not be processed. Output For each dataset, output \\"YES\\" if it is still possible to reach location B from location A after considering the blocked roads. Output \\"NO\\" otherwise. Do not include any additional characters in the output. Example Input 5 6 1 3 1 5 1 2 2 3 3 4 4 5 5 1 4 2 6 6 2 4 6 2 5 1 2 2 3 3 4 4 5 5 6 6 1 3 2 0 0 Output YES NO","solution":"import sys from collections import defaultdict, deque def can_reach(N, M, blocked_roads, A, B, roads): graph = defaultdict(list) blocked_set = set(blocked_roads) for i in range(1, M + 1): if i not in blocked_set: s, t = roads[i-1] graph[s].append(t) graph[t].append(s) visited = [False] * (N + 1) queue = deque([A]) visited[A] = True while queue: node = queue.popleft() if node == B: return \\"YES\\" for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return \\"NO\\" def process_input(input_str): input_lines = input_str.strip().split(\\"n\\") idx = 0 results = [] while idx < len(input_lines): N, M = map(int, input_lines[idx].split()) if N == 0 and M == 0: break idx += 1 blocked_roads = list(map(int, input_lines[idx].split())) idx += 1 A, B = map(int, input_lines[idx].split()) idx += 1 roads = [] for _ in range(M): si, ti = map(int, input_lines[idx].split()) roads.append((si, ti)) idx += 1 result = can_reach(N, M, blocked_roads, A, B, roads) results.append(result) return results def main(): input_str = sys.stdin.read() results = process_input(input_str) for result in results: print(result) # Uncomment below line to run as script # if __name__ == \\"__main__\\": # main()"},{"question":"You are given n blocks, each assigned an integer height. You can perform the following operation multiple times (possibly zero): choose a block and increase its height by any positive integer. After any number of these operations, the aim is to determine the minimum possible difference between the height of the tallest block and the shortest block. Given the initial heights of the blocks, create a program that computes the minimum possible difference between the tallest and shortest block height after performing any number of operations. Input format: - The first line contains an integer n (1 ≤ n ≤ 10000) — the number of blocks. - The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10000) — the initial heights of the blocks. Output format: - Print a single integer — the minimum difference between the tallest and shortest block height after performing any number of operations. Example Input 5 4 7 2 8 5 Output 0 Note In the example, one possible way to achieve the minimum difference is to increase every block\'s height to match the height of the tallest block, which would yield a difference of 0.","solution":"def min_height_difference(n, heights): Returns the minimum possible difference between the height of the tallest block and the shortest block after performing any number of operations. :param n: int - number of blocks :param heights: list of int - initial heights of the blocks :return: int - min possible height difference # As you can always increase any block, the minimum difference is achieved by making all blocks # equal to the height of the tallest block return 0"},{"question":"You are managing a factory that produces multiple products, each with different manufacturing times and costs. To improve efficiency, you decide to analyze the profitability of each product. The profitability of a product is defined as the ratio of its selling price to its production cost. Each product has a unique identifier, production time, production cost, and selling price. Your task is to write a program that processes multiple datasets of product information and outputs the product IDs in descending order of profitability. For products with the same profitability, their IDs should be output in ascending dictionary order. Input: The input consists of multiple datasets, each following this format: > N > ID1 TIME1 COST1 PRICE1 > ID2 TIME2 COST2 PRICE2 > ... > IDN TIMEN COSTN PRICEN > Where: - The first line contains the number of products, N (1 ≤ N ≤ 100). - Each of the next N lines describes a product with its ID (a string of up to 20 lowercase letters), production time TIMEi (1 ≤ TIMEi ≤ 100), production cost COSTi (1 ≤ COSTi ≤ 1000), and selling price PRICEi (1 ≤ PRICEi ≤ 1000). The end of the input is signaled by a line containing only one zero. Output: For each dataset, output the product IDs, one per line, in descending order of profitability. After each dataset, output a single line consisting of only \\"#\\". Example Input: 3 widget1 10 50 200 widget2 15 30 150 widget3 20 40 160 2 gadget1 12 60 240 gadget2 8 50 200 0 Example Output: widget2 widget1 widget3 # gadget1 gadget2 #","solution":"def analyze_profitability(datasets): result = [] for dataset in datasets: n = int(dataset[0]) products = dataset[1:] profitability_list = [] for product in products: prod_details = product.split() prod_id = prod_details[0] cost = float(prod_details[2]) price = float(prod_details[3]) profitability = price / cost profitability_list.append((prod_id, profitability)) # Sort first by profitability descending, then by prod_id if equal profitability profitability_list.sort(key=lambda x: (-x[1], x[0])) for prod in profitability_list: result.append(prod[0]) result.append(\'#\') return result # Example usage function def process_input(input_str): datasets = [] dataset = [] for line in input_str.strip().splitlines(): if line == \'0\': if dataset: datasets.append(dataset) break elif line.isdigit(): if dataset: datasets.append(dataset) dataset = [] dataset.append(line) return analyze_profitability(datasets)"},{"question":"Given an integer n, generate the nth row of Pascal\'s triangle. Pascal\'s triangle is a triangular array of binomial coefficients, which has four important properties: 1. Each number is the sum of the two directly above it. 2. The first and last column elements are always 1. 3. The triangle starts with [1] as the first row. 4. The row index is zero-based. Your task is to calculate the nth row of Pascal\'s triangle. -----Input----- The input contains one integer n (0 ≤ n ≤ 1000) – the row index. -----Output----- Output is a single line containing the elements of the nth row of Pascal\'s triangle, separated by spaces. -----Examples----- Input 3 Output 1 3 3 1 Input 5 Output 1 5 10 10 5 1 -----Note----- Pascal\'s Triangle starts with the following rows: 0: [1] 1: [1, 1] 2: [1, 2, 1] 3: [1, 3, 3, 1] 4: [1, 4, 6, 4, 1] 5: [1, 5, 10, 10, 5, 1] Keep in mind the properties of Pascal\'s Triangle to generate subsequent rows from the previous ones.","solution":"def generate_pascals_triangle_row(n): Generate the nth row of Pascal\'s triangle. Args: n (int): Index of the row to generate (0-based). Returns: List[int]: The nth row of Pascal\'s triangle. if n == 0: return [1] row = [1] for k in range(1, n + 1): row.append(row[k - 1] * (n - k + 1) // k) return row"},{"question":".union() The tool .union() returns a new set with all items from both sets. Sometimes the | operator is used in place of the .union() tool, but it only operates on the set of elements in set. Set is immutable to the .union() operation (or the | operation). >>> s1 = set(\\"Hacker\\") >>> s2 = set(\\"Rank\\") >>> print s1.union(s2) set([\'a\', \'c\', \'e\', \'H\', \'k\', \'n\', \'r\', \'R\']) >>> print s1.union([\'a\', \'b\', \'c\']) set([\'a\', \'c\', \'b\', \'e\', \'H\', \'k\', \'r\']) >>> print s1.union(\\"bbb\\") set([\'a\', \'c\', \'e\', \'H\', \'k\', \'b\', \'r\']) >>> print s1 | s2 set([\'a\', \'c\', \'e\', \'H\', \'k\', \'n\', \'r\', \'R\']) Task Students of District College have a subscription to at least one of two campus newspapers, Web Dev Weekly and Data Science Monthly. Some students have subscribed to only Web Dev Weekly, some have subscribed to only Data Science Monthly, and some have subscribed to both newspapers. You are given two sets of student roll numbers for each newspaper subscription. Your task is to find the total number of students who have subscribed to at least one of the two newspapers. Input Format The first line contains the number of students who have subscribed to Web Dev Weekly. The second line contains the space separated list of student roll numbers who have subscribed to Web Dev Weekly. The third line contains the number of students who have subscribed to Data Science Monthly. The fourth line contains the space separated list of student roll numbers who have subscribed to Data Science Monthly. Constraints 0 < textit{Total number of students in college} < 1000 Output Format Output the total number of students who have subscribed to at least one newspaper. Sample Input 6 1 2 3 4 5 6 7 4 5 6 7 8 9 10 Sample Output 10 Explanation The roll numbers of students who have subscribed to at least one of the newspapers are: 1,2,3,4,5,6,7,8,9,10. Hence, the total is 10 students.","solution":"def total_subscribers(web_dev_weekly, data_science_monthly): Returns the total number of unique students who have subscribed to at least one of the newspapers. :param web_dev_weekly: A list of student roll numbers who subscribed to Web Dev Weekly :param data_science_monthly: A list of student roll numbers who subscribed to Data Science Monthly :return: An integer representing the total number of unique subscribers set_web_dev_weekly = set(web_dev_weekly) set_data_science_monthly = set(data_science_monthly) unique_subscribers = set_web_dev_weekly.union(set_data_science_monthly) return len(unique_subscribers)"},{"question":"You are given a binary search tree (BST) that may contain duplicate values. Please implement a function to find all elements in the BST that fall within a given range [L, R] (inclusive). The elements should be returned in ascending order. Constraints * The number of nodes in the BST is between 1 and 10^5. * Each element of the BST is an integer in the range: (-10^9 leq text{node.val} leq 10^9). * (-10^9 leq L leq R leq 10^9). Function Signature ```python def range_in_bst(root: TreeNode, L: int, R: int) -> List[int] ``` Input - A reference to the root of the binary search tree. - Two integers L and R representing the range. Output - A list of integers representing all elements in the BST that fall within [L, R] in ascending order. Examples Example 1 Input ```python root = [10, 5, 15, 3, 7, 12, 18] # represents the BST with root node value 10 L = 7 R = 15 ``` Output ```python [7, 10, 12, 15] ``` Example 2 Input ```python root = [10, 5, 15, 3, 7, 18] # represents the BST with root node value 10 L = 6 R = 10 ``` Output ```python [7, 10] ``` Note: 1. The binary search tree is defined such that for every node, the values in the left subtree are less than or equal to the node\'s value, and the values in the right subtree are greater than or equal to the node\'s value. 2. Your function should handle edge cases where the BST contains a large number of duplicate values efficiently.","solution":"from typing import List # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def range_in_bst(root: TreeNode, L: int, R: int) -> List[int]: def in_order_traversal(node): if node is None: return if node.val >= L: yield from in_order_traversal(node.left) if L <= node.val <= R: yield node.val if node.val <= R: yield from in_order_traversal(node.right) return list(in_order_traversal(root))"},{"question":"A game consists of a grid of size n x m, where each cell can be either empty or contain a bomb. The objective of the game is to determine the number of unique islands of empty cells. An island is defined as a group of adjacent empty cells connected horizontally or vertically. Diagonal connections are not considered. Two islands are considered unique if at least one cell in one island is not part of any other island. You need to find out how many unique islands are present in the grid. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines contain m characters each. Each character is either \'.\' denoting an empty cell or \'*\' denoting a bomb. Output: Output a single integer — the number of unique islands in the grid. Examples: Input: 5 5 .*... .*.*. ..*.. *.*.* .*..* Output: 4 Input: 3 3 *** *.* *** Output: 1","solution":"def num_unique_islands(n, m, grid): def dfs(x, y): stack = [(x, y)] while stack: i, j = stack.pop() for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == \'.\': stack.append((ni, nj)) grid[ni][nj] = \'#\' # Mark visited island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': dfs(i, j) island_count += 1 return island_count"},{"question":"You are given an array of integers representing the heights of N people standing in a row. The heights are represented by the array H. Your task is to find the maximum number of pairs (i, j) such that 1 ≤ i < j ≤ N and H[i] < H[j]. -----Constraints----- - 1 leq N leq 2times 10^5 - 1 leq H[i] leq 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N H_1 H_2 ... H_N -----Output----- Print the maximum number of pairs (i, j) satisfying the given condition. -----Sample Input----- 5 2 1 5 4 3 -----Sample Output----- 6 The valid pairs of indices (i, j) are: (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), and (2, 5). So, the maximum number of pairs is 6.","solution":"def max_pairs(N, H): count = 0 for i in range(N): for j in range(i + 1, N): if H[i] < H[j]: count += 1 return count"},{"question":"You are given a list of integers which can contain both positive and negative numbers. You need to find the maximum sum of any subarray of the array. A **subarray** is a contiguous part of an array. --- Input Format --- - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer N, the length of the array. - The second line of each test case contains N space-separated integers representing the elements of the array. --- Output Format --- For each test case, output the maximum sum of any subarray of the given array. --- Constraints --- 1 leq T leq 100 1 leq N leq 1000 -10^5 leq A_i leq 10^5 --- Sample Input --- 3 4 -1 2 3 -4 5 -2 -3 4 -1 -2 3 3 -2 5 --- Sample Output --- 5 4 6","solution":"def max_subarray_sum(arr): Returns the maximum sum of any subarray of the given array. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def max_subarray_sums(test_cases): Processes multiple test cases to find the maximum sum of any subarray for each test case. results = [] for test_case in test_cases: results.append(max_subarray_sum(test_case)) return results"},{"question":"Roma loves playing with strings. One day, he came across an interesting game involving binary strings (strings composed only of characters \'0\' and \'1\'). In this game, a binary string is considered \\"beautiful\\" if it has the following property: - All occurrences of the substring \\"010\\" can be changed to \\"101\\" in one move, and vice versa. Roma can make a number of moves to make the binary string beautiful. He wonders what is the minimum number of moves required to make his given binary string beautiful. Help Roma by writing a program that determines the minimum number of moves needed. -----Input----- The input consists of a single line containing a binary string s (1 ≤ |s| ≤ 10^6). -----Output----- In the single line print a single number — the minimum number of moves required to make the binary string beautiful. -----Examples----- Input 0101010 Output 2 Input 1101001 Output 1 -----Note----- In the first sample, after the first move, the string becomes \\"1010101\\". In the second move, the string becomes \\"1011101\\". Hence, 2 moves are needed. In the second sample, after one move, the string becomes \\"1111011\\". Hence, 1 move is needed.","solution":"def min_moves_to_make_beautiful(s): Given a binary string s, this function calculates the minimum number of moves required to make the string beautiful by changing all occurrences of \\"010\\" to \\"101\\" and vice versa. # Count occurrences of \\"010\\" in the string count_010 = s.count(\\"010\\") # Each \\"010\\" can be changed to \\"101\\" in one move return count_010"},{"question":"Write a function called `balanced_strings_count` that takes a single input string representing a series of \'L\' and \'R\' characters. The function should return the number of balanced strings that can be formed from the input. A balanced string is one where the number of \'L\' characters is equal to the number of \'R\' characters. A balanced string may not contain any additional characters and should be the maximum possible sequence of characters that forms a balanced string. In other words, concatenating two smaller balanced strings does not form a new balanced string. Example: ```python balanced_strings_count(\\"RLRRLLRLRL\\") # 4 # Explanation: \\"RL\\", \\"RRLL\\", \\"RL\\" and \\"RL\\" balanced_strings_count(\\"RLLLLRRRLR\\") # 3 # Explanation: \\"RL\\", \\"LLLRRR\\" and \\"LR\\" balanced_strings_count(\\"LLLLRRRR\\") # 1 # Explanation: \\"LLLLRRRR\\" balanced_strings_count(\\"RLRRRLLRLL\\") # 2 # Explanation: \\"RL\\" and \\"RRRLLRLL\\" ``` **Note:** - The function should handle cases where strings are arbitrarily long. - Ensure that the implementation is optimized and avoids unnecessary computations.","solution":"def balanced_strings_count(s): Returns the number of balanced strings that can be formed from the input string. Parameters: s (str): A string consisting of the characters \'L\' and \'R\'. Returns: int: The number of balanced strings in the input string. count = 0 balanced_count = 0 for char in s: if char == \'L\': count += 1 else: count -= 1 if count == 0: balanced_count += 1 return balanced_count"},{"question":"You are given a list of integers. You can perform the following operations on the list: 1. Select any contiguous subarray. 2. Flip all the bits of each element in the subarray (i.e., change all 1s to 0s and all 0s to 1s). For example, consider the list [5, 7, 12], where 5 in binary is \'101\', 7 is \'111\', and 12 is \'1100\'. If we pick the subarray [7, 12], then flipping the bits of each element in the subarray, we get [7 -> 8 (binary \'1000\'), 12 -> 3 (binary \'0011\')]. So the entire list becomes [5, 8, 3]. Find the minimum number of operations required to reduce all elements in the list to 0. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the number of elements in the list. - The second line of each test case contains N integers - the elements of the list. ------ Output Format ------ For each test case, output the minimum number of operations required to reduce all elements in the list to 0. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 50 1 ≤ Ai ≤ 10^6 ------ Sample Input 1 ------ 3 3 5 7 12 4 8 4 2 1 2 1 6 ------ Sample Output 1 ------ 3 1 2 ----- Explanation 1 ------ Test Case 1: Pick the subarrays [5], [7], and [12]. Performing a single flip operation on each element individually, we can reduce them to [0, 0, 0]. Test Case 2: Pick the subarray [8, 4, 2, 1]. Performing a single flipping operation on all elements results in [0, 0, 0, 0]. Test Case 3: Pick the subarrays [1], and [6]. Performing a single flip operation on each element individually, we can reduce them to [0, 0].","solution":"def count_set_bits(x): Count the number of set bits (1s) in the binary representation of an integer. return bin(x).count(\'1\') def min_operations_to_zero(arr): Returns the minimum number of operations required to reduce all elements in the list to 0. operations = 0 for num in arr: operations += count_set_bits(num) return operations def solve(test_cases): Process multiple test cases and return results for each case. results = [] for test_case in test_cases: N, arr = test_case results.append(min_operations_to_zero(arr)) return results"},{"question":"A cybersecurity expert, Alex, is working with secure communication protocols. One day, he received an assignment that requires ensuring data integrity. Alex needs to implement a checksum algorithm that takes an array of positive integers and outputs a checksum value based on a certain rule. Alex decides to implement the checksum algorithm by summing up the integers and then taking the sum modulo a given integer M. Your task is to write a program that helps Alex by computing the checksum value for a given array of positive integers and a modulo value M. Input The input consists of a series of data sets. Each data set is given in the following format: N M A0 A1 ... AN-1 N is the length of the array A. M is the modulo value. You may assume the following: 1 ≤ N ≤ 1000, 1 ≤ M ≤ 1000, and 1 ≤ Ai ≤ 1000 for i = 0, ..., N - 1. The input is terminated by N = M = 0. Output For each data set, output the checksum value computed as (A0 + A1 + ... + AN-1) % M. Example Input 5 3 1 2 3 4 5 4 5 7 8 9 6 0 0 Output 0 0","solution":"def compute_checksum(data_sets): Computes the checksum for a list of given data sets. Parameters: data_sets (list): A list of tuples where each tuple contains N, M, and an array A Returns: list: A list containing the checksum for each data set results = [] for data in data_sets: N, M, A = data if N == 0 and M == 0: break checksum = sum(A) % M results.append(checksum) return results"},{"question":"A company wants to implement a task scheduling system. Each task has a start time and an end time. You need to find the maximum number of tasks that can be completed without overlap. Each task is represented as a tuple (start_time, end_time). A task can be completed if and only if it starts after the previous task has ended. -----Constraints----- - 1 leq Number of tasks leq 1000 - 0 leq start_time < end_time leq 10^9 -----Input----- Input is given from Standard Input in the following format: Number of tasks (start_time_1, end_time_1) (start_time_2, end_time_2) ... (start_time_N, end_time_N) -----Output----- Print the maximum number of non-overlapping tasks that can be completed. -----Sample Input----- 3 (1, 4) (2, 6) (5, 7) -----Sample Output----- 2 In this example, the maximum number of tasks that can be completed without overlap is 2. For instance, the tasks: [ (1, 4) and (5, 7) ] can be chosen.","solution":"def max_non_overlapping_tasks(tasks): Given a list of tasks represented as tuples of (start_time, end_time), return the maximum number of non-overlapping tasks that can be completed. Parameters: tasks (list): A list of tuples where each tuple represents (start_time, end_time) Returns: int: The maximum number of non-overlapping tasks. if not tasks: return 0 # Sort the tasks by their end times tasks.sort(key=lambda x: x[1]) # Initialize variables max_tasks = 0 last_end_time = 0 # Iterate through the sorted tasks for start_time, end_time in tasks: if start_time >= last_end_time: # If the current task starts after or when the last selected task ends max_tasks += 1 last_end_time = end_time return max_tasks"},{"question":"Write a function that takes a list of strings as its parameter. The function should return a dictionary where the keys are the strings with more than three characters, and the values are the counts of how many times each string appears in the list. For example: ```python count_long_strings([\\"apple\\", \\"banana\\", \\"apple\\", \\"dog\\", \\"cat\\", \\"elephant\\"]) # Output: {\\"apple\\": 2, \\"banana\\": 1, \\"elephant\\": 1} ``` The function should ignore case when considering counts. So: ```python count_long_strings([\\"Apple\\", \\"BANANA\\", \\"apple\\", \\"Dog\\", \\"Cat\\", \\"elephant\\"]) # Output: {\\"apple\\": 2, \\"banana\\": 1, \\"elephant\\": 1} ```","solution":"def count_long_strings(strings): Returns a dictionary containing the counts of strings with more than three characters (ignoring case). count_dict = {} for string in strings: lower_string = string.lower() if len(lower_string) > 3: if lower_string in count_dict: count_dict[lower_string] += 1 else: count_dict[lower_string] = 1 return count_dict"},{"question":"Problem Description Alice loves to collect unique strings, but she has a specific requirement: each string in her collection must be a palindrome. A string is a palindrome if it reads the same backward as forward. Given a string s of length n (2 ≤ n ≤ 50) consisting of lowercase letters, Alice wants to convert s into a palindrome. She can perform the following operation any number of times: change a single character in the string to any other lowercase letter. Determine the minimum number of such operations required to transform the given string s into a palindrome. Input - The first line contains a single integer n (2 leq n leq 50) — the length of the string s. - The second line contains the string s, consisting of exactly n lowercase letters of the Latin alphabet. Output - Output the minimum number of operations required to make the string s a palindrome. Examples ``` Input 3 abc Output 1 Input 4 abcd Output 2 ``` Note In the first example, to convert \\"abc\\" into a palindrome, we can change \\"c\\" to \\"a\\", resulting in the string \\"aba\\". Only one operation is needed. In the second example, to convert \\"abcd\\" into a palindrome, we can change \\"a\\" to \\"d\\" and \\"b\\" to \\"c\\", resulting in the string \\"dcba\\". Two operations are needed.","solution":"def min_operations_to_palindrome(n, s): Determine the minimum number of operations required to transform the given string s into a palindrome. :param n: Length of the string s :param s: The input string consisting of exactly n lowercase letters :return: The minimum number of operations required to make s a palindrome operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"# Task You are given an array of integers and a target integer. Your task is: ``` • Determine if there exist two distinct indices i and j in the array such that nums[i] + nums[j] equals the target. • If such indices exist, return them as an array [i, j], otherwise return an empty array. ``` It is guaranteed that there is at most one such pair of indices that satisfy the condition. # Input/Output - `[input]` integer array `nums` - `[input]` integer `target` - Output an integer array Array of two elements, where the first element is `i` and the second one is `j`, or an empty array if no such pair exists. # Example For `nums = [2, 7, 11, 15], target = 9`, the output should be `[0, 1]`. For `nums = [3, 2, 4], target = 6`, the output should be `[1, 2]`. For `nums = [3, 3], target = 6`, the output should be `[0, 1]`. For `nums = [1, 2, 3, 4], target = 8`, the output should be `[]`.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list that add up to the target. If no such indices exist, returns an empty list. indices_map = {} for i, num in enumerate(nums): complement = target - num if complement in indices_map: return [indices_map[complement], i] indices_map[num] = i return []"},{"question":"In a land far away, there\'s a small village where everyone loves playing with numbers. One day, the village Chief decided to create a special game for the villagers. In this game, participants are given an array of integers, and they must find out if there exists a subarray with a sum equal to a given target number. Your task is to write a program that checks if there exists at least one subarray with a sum equal to the target number. If such a subarray exists, print \\"Yes\\". Otherwise, print \\"No\\". Input The first line contains two integers n (1 ≤ n ≤ 100), which is the number of elements in the array, and t (−1000 ≤ t ≤ 1000), which is the target sum. The second line contains n integers ai (−100 ≤ ai ≤ 100), which represent the elements of the array. Output Print \\"Yes\\" if there exists a subarray with a sum equal to t. Otherwise, print \\"No\\". Examples Input 5 5 1 2 3 4 5 Output Yes Input 5 11 1 2 3 4 5 Output No Input 3 0 -1 1 0 Output Yes","solution":"def subarray_sum_exists(n, t, arr): Checks if there exists at least one subarray with a sum equal to t. If such a subarray exists, returns \\"Yes\\". Otherwise, returns \\"No\\". Parameters: n (int): Number of elements in the array t (int): Target sum arr (list): List of integers Returns: str: \\"Yes\\" if subarray with sum t exists, \\"No\\" otherwise # Using a set to store cumulative sums sums = set() current_sum = 0 for num in arr: current_sum += num if current_sum == t or (current_sum - t) in sums: return \\"Yes\\" sums.add(current_sum) return \\"No\\""},{"question":"A string S is defined as periodic if it can be represented as a repetition of some substring. For example, the string \\"ababab\\" is periodic because it can be represented as three repetitions of the substring \\"ab\\", whereas the string \\"abcabcabc\\" is periodic because it can be represented as three repetitions of the substring \\"abc\\". The string \\"abcd\\" is not periodic. You are given a string S of length N. Your task is to determine the length of the shortest substring that can be repeated to form the entire string S. ------ Input Format ------ - The first line will contain T, the number of test cases. Then T test cases follow. - The first line of each test case contains one integer N, the length of the string S. - The second line of each test case contains the string S of length N. ------ Output Format ------ For each test case, output in a single line the length of the smallest substring that can be repeated to form the entire string S. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{6} - Sum of N over all test cases does not exceed 10^{7}. ----- Sample Input 1 ------ 3 6 ababab 9 abcabcabc 4 abcd ----- Sample Output 1 ------ 2 3 4","solution":"def find_smallest_period_length(N, S): Determines the length of the smallest substring that can be repeated to form the entire string S of length N. for length in range(1, N + 1): if N % length == 0: substring = S[:length] if substring * (N // length) == S: return length return N def process_test_cases(test_cases): Processes multiple test cases. results = [] for N, S in test_cases: results.append(find_smallest_period_length(N, S)) return results"},{"question":"You are organizing a charity run and need to manage the registration numbers of participants. Each participant is assigned a unique registration number when they sign up, and you have stored these numbers in a list. However, due to a system glitch, some participants have been accidentally registered multiple times, resulting in duplicate registration numbers in your list. Write a function `remove_duplicates` that receives a list of integers (registration numbers) and returns a new list with all duplicates removed while preserving the original order of numbers. For example: ```python remove_duplicates([10, 22, 10, 33, 22, 44, 55, 10]) ``` should return: ```python [10, 22, 33, 44, 55] ``` Write a function to solve the problem.","solution":"def remove_duplicates(registration_numbers): Returns a list of registration numbers with duplicates removed, preserving the original order. seen = set() unique_numbers = [] for number in registration_numbers: if number not in seen: unique_numbers.append(number) seen.add(number) return unique_numbers"},{"question":"A group of friends are planning a game night, and they want to create a tournament bracket for their favorite game. The game is played in two rounds. During the first round, players form pairs and play matches, with each match resulting in one winner who advances to the second round. In the second round, the remaining players play a single match to determine the overall winner of the tournament. Each player has a skill level, and the probability of a player winning a match is directly proportional to their skill level relative to their opponent. Given the skill levels of n players, determine the most likely winner of the tournament. Print the index (1-based) of the player who is most likely to win. If there are multiple players with the same highest probability of winning, print the lowest index of such players. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^6) — the number of players. It is guaranteed that n is even and at least 2. The second line contains n integers skill_i (1 ≤ skill_i ≤ 10^9) — the skill levels of the players. -----Output----- Print a single integer — the index (1-based) of the player who is most likely to win the tournament. If there are multiple players with the same highest probability, print the lowest index of such players. -----Examples----- Input 4 5 9 3 2 Output 2 Input 6 10 20 30 40 50 60 Output 6 -----Note----- In the first example, the tournament has two rounds. In the first round, players are paired as (1, 2) and (3, 4). The winners from these matches will be player 2 and player 3 (since 9 > 5 and 3 > 2). In the final match, player 2 is more likely to win against player 3, as they have a higher skill level (9 > 3). In the second example, the players are paired as (1, 2), (3, 4), and (5, 6). The winners will be players 2, 4, and 6. In the second round, player 6 has the highest skill level and is most likely to win the final match.","solution":"def most_likely_winner(n, skill_levels): Determines the most likely winner of the tournament. Parameters: n (int): The number of players. skill_levels (list): A list of integers representing the skill levels of the players. Returns: int: The 1-based index of the player most likely to win the tournament. max_skill_level = -1 max_index = -1 for i in range(n): if skill_levels[i] > max_skill_level: max_skill_level = skill_levels[i] max_index = i return max_index + 1 # return 1-based index"},{"question":"A group of students is organizing a coding competition where the number of participants can be quite large. To manage the participants and ensure a smooth competition, they need to divide the participants into groups. Each group should have the same number of participants, and each participant belongs to exactly one group. You are given the number of participants and the maximum possible number of groups. Your task is to find the minimum possible number of participants in each group and the total number of groups. If it is not possible to divide the participants exactly into the given number of groups, return -1 for both the minimum number of participants per group and the total number of groups. Input Format: - First line contains an integer T denoting the number of test cases. - Each test case consists of two space-separated integers N and M where N is the number of participants and M is the maximum possible number of groups. Output Format: For each test case, print two space-separated integers, the minimum number of participants per group and the total number of groups. If it is not possible to divide the participants exactly, print -1 -1. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^6 1 ≤ M ≤ N SAMPLE INPUT 2 15 3 20 4 SAMPLE OUTPUT 5 3 5 4 Explanation: In the first case, there are 15 participants, and the maximum number of groups is 3. The participants can be divided into 3 groups with 5 participants each. In the second case, there are 20 participants, and the maximum number of groups is 4. The participants can be divided into 4 groups with 5 participants each.","solution":"def divide_participants(T, cases): For each test case, this function computes and returns the minimum number of participants per group and the total number of groups. If it is not possible to divide the participants exactly, it returns -1 for both values. :param T: Number of test cases :param cases: List of tuples containing (N, M) where N is the number of participants and M is the maximum possible number of groups. :return: List of tuples with the result for each test case. results = [] for N, M in cases: if N % M == 0: min_participants_per_group = N // M total_groups = M else: min_participants_per_group, total_groups = -1, -1 results.append((min_participants_per_group, total_groups)) return results"},{"question":"Given a string S, the task is to complete the function uniquePermutations() which returns a list of all unique permutations of the given string in lexicographical order. Example 1: Input: S = \\"ABC\\" Output: [\\"ABC\\", \\"ACB\\", \\"BAC\\", \\"BCA\\", \\"CAB\\", \\"CBA\\"] Example 2: Input: S = \\"AAB\\" Output: [\\"AAB\\", \\"ABA\\", \\"BAA\\"] Your Task: You only need to implement the given function uniquePermutations() which returns a list containing all the unique permutations of the given string in lexicographical order. Do not read input, instead use the arguments given in the function. Expected Time Complexity: O(N * N!) Expected Auxiliary Space: O(N) Constraints: 1 <= len(S) <= 8","solution":"from itertools import permutations def uniquePermutations(S): Returns a list of all unique permutations of the given string in lexicographical order. perms = set(permutations(S)) unique_perms = sorted([\'\'.join(p) for p in perms]) return unique_perms"},{"question":"In a characteristic study of forests, a team of ecologists is trying to determine the dominant tree species in specific regions. Each region is represented by a subarray within a larger array of tree species. The team needs a way to efficiently determine the most frequently occurring tree species in any given subarray of the forest data. You are provided with two types of queries to process: 1. **Update Query**: An update query modifies the tree species at a specific index in the forest array. 2. **Frequency Query**: A frequency query determines the most frequently occurring tree species in a specified subarray of the forest array. If there are multiple species with the same highest frequency, return the one with the smallest index. Implement a system to efficiently handle these queries. # Input - The first line contains two integers, `n` (the number of trees in the forest array) and `q` (the number of queries). - The second line contains `n` integers representing the initial tree species in the forest array. - The next `q` lines each represent a query in one of the following formats: - `1 i x`: Update the tree species at index `i` to `x`. - `2 l r`: Determine the most frequent tree species in the subarray from index `l` to index `r` (inclusive). # Constraints - `1 ≤ n, q ≤ 100,000` - `1 ≤ tree species ≤ 10^9` - `1 ≤ i ≤ n` - `1 ≤ l ≤ r ≤ n` # Output For each frequency query, output the most frequently occurring tree species in the specified subarray. If there is a tie, return the smallest index among the species. # Example Input ``` 5 5 1 2 2 1 3 2 1 5 1 3 1 2 1 5 2 2 4 2 3 5 ``` # Example Output ``` 1 1 1 1 ```","solution":"import collections class Forest: def __init__(self, trees): self.trees = trees def update(self, i, x): self.trees[i] = x def query(self, l, r): subarray = self.trees[l:r+1] counter = collections.Counter(subarray) max_freq = max(counter.values()) most_common = [tree for tree, freq in counter.items() if freq == max_freq] return min(most_common) def process_queries(n, q, initial_forest, queries): forest = Forest(initial_forest) results = [] for query in queries: if query[0] == 1: _, i, x = query forest.update(i-1, x) elif query[0] == 2: _, l, r = query result = forest.query(l-1, r-1) results.append(result) return results"},{"question":"# Definition **_Single Peak Number_** *is defined as a number where it has exactly one local peak in its binary representation. A local peak is a \'1\' bit (set bit) immediately surrounded by \'0\' bits.* ____ # Task **_Given_** *a positive integer* `X` , **_Return_** **the _single peak numbers_** *in the range from* `1` to `X`. ____ # Warm-up (Highly recommended) # [Binary Number Series](https://www.codewars.com/collections/binary-number-series) ___ # Notes * **_Number_** *passed is always* **_Positive_**. * **_Returned array/list_** should *contain the single peak numbers in ascending order* **from lowest to highest** ___ # Input >> Output Examples ```c singlePeakNumbers(5) ==> return {2, 4} ``` **_Explanation_**: # (2)10 = (10)2 - Single \'1\' bit surrounded by \'0\' bits. # (4)10 = (100)2 - Single \'1\' bit surrounded by \'0\' bits. ___ ```c singlePeakNumbers(10) ==> return {2, 4, 8} ``` **_Explanation_**: # (8)10 = (1000)2 - Single \'1\' bit surrounded by \'0\' bits. ___ ___ ___ # [Binary Number Series](https://www.codewars.com/collections/binary-number-series) # [Playing with Bits Series](https://www.codewars.com/collections/playing-with-bits-series) # [For More Enjoyable Katas](http://www.codewars.com/users/CodeMasterZ/authored) ___ ALL translations are welcomed Enjoy Learning !! # CodeMasterZ","solution":"def singlePeakNumbers(X): Returns a list of single peak numbers from 1 to X. A single peak number has exactly one \'1\' bit immediately surrounded by \'0\' bits. def is_single_peak(num): binary_representation = bin(num)[2:] return binary_representation.count(\'1\') == 1 and binary_representation.endswith(\'0\') result = [] for i in range(1, X + 1): if is_single_peak(i): result.append(i) return result"},{"question":"Given a positive integer N, the task is to find the smallest positive integer that is divisible by every number from 1 to N. Example 1: Input: N = 4 Output: 12 Explanation: 12 is the smallest integer divisible by each of {1, 2, 3, 4}. Example 2: Input: N = 6 Output: 60 Explanation: 60 is the smallest integer divisible by each of {1, 2, 3, 4, 5, 6}. Your Task: You do not need to read the input or print anything. Your task is to complete the function smallestMultiple() which takes a single integer N and returns the smallest integer divisible by all numbers from 1 to N. Expected Time Complexity: O(N log log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 30","solution":"import math def smallestMultiple(N): Finds the smallest positive integer that is divisible by every number from 1 to N. def lcm(a, b): return abs(a * b) // math.gcd(a, b) result = 1 for i in range(1, N + 1): result = lcm(result, i) return result"},{"question":"Eve has an array of integers and she wants to transform it into a special sequence by performing a series of operations. In each operation, she may choose any two adjacent elements and swap them. The special sequence is defined as an array where every element is either strictly greater than its previous element or strictly less than its previous element — that is, it alternates between increasing and decreasing. Your task is to determine whether Eve can transform the given array into the special sequence by using the allowed operations. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each test case contains two lines: - The first line contains an integer N, the size of the array. - The second line contains N integers, the elements of the array. ------ Output Format ------ For each test case, print \\"YES\\" if Eve can transform the array into the special sequence, otherwise print \\"NO\\". You may print each character of the string in uppercase or lowercase (for example, the strings yEs, Yes, YeS, and YES will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 1 ≤ text{array_element} ≤ 1000 ------ Sample Input 1 ------ 2 5 1 3 5 2 4 4 4 5 5 6 ------ Sample Output 1 ------ YES NO ----- Explanation 1 ------ Test case 1: Eve can swap elements to get the sequence [1, 5, 2, 4, 3], which alternates between increasing and decreasing. Test case 2: It is not possible to transform the array into a special sequence because consecutive equal elements prevent alternating behavior.","solution":"def can_transform_to_special_sequence(n, array): Determines if the array can be transformed into a special sequence where elements alternately increase and decrease. Parameters: n (int): The size of the array. array (List[int]): The array of integers. Returns: str: \\"YES\\" if it can be transformed, \\"NO\\" otherwise. array.sort() for i in range(1, n): if array[i] == array[i - 1]: return \\"NO\\" return \\"YES\\" def solve(input_lines): Processes multiple test cases and returns results for each one. Parameters: input_lines (List[str]): List of strings, where each string is a line from the input. Returns: List[str]: List of results for each test case (\\"YES\\" or \\"NO\\") output = [] index = 0 T = int(input_lines[index]) index += 1 for _ in range(T): n = int(input_lines[index]) index += 1 array = list(map(int, input_lines[index].split())) index += 1 result = can_transform_to_special_sequence(n, array) output.append(result) return output"},{"question":"Given two rectangles, determine whether they overlap or not. Print \\"1\\" if they overlap and \\"0\\" if they do not. Each rectangle is defined by the coordinates of its bottom-left and top-right corners. Constraints * 1 ≤ q ≤ 1000 * -10000 ≤ x1, y1, x2, y2, x3, y3, x4, y4 ≤ 10000 * The bottom-left corner will always have a smaller value in both the x and y coordinates than the top-right corner of the same rectangle. Input The entire input looks like: q (the number of queries) 1st query 2nd query ... qth query Each query consists of integer coordinates of the points x1, y1, x2, y2, x3, y3, x4, y4 in the following format: x1 y1 x2 y2 x3 y3 x4 y4 Output For each query, print \\"1\\" or \\"0\\". Example Input 3 0 0 2 2 1 1 3 3 0 0 1 1 2 2 3 3 1 1 3 3 -1 -1 2 2 Output 1 0 1","solution":"def do_rectangles_overlap(rectangles): Given the coordinates of two rectangles, determine if they overlap. Each rectangle is defined by its bottom-left and top-right corners. Args: rectangles : list of tuples Each tuple contains 8 integers in the format (x1, y1, x2, y2, x3, y3, x4, y4) where (x1, y1) and (x2, y2) are the coordinates of the first rectangle\'s bottom-left and top-right corners, and (x3, y3) and (x4, y4) are the coordinates of the second rectangle\'s bottom-left and top-right corners. Returns: list of int For each rectangle provided in input, returns 1 if they overlap, otherwise 0. result = [] for rect in rectangles: x1, y1, x2, y2, x3, y3, x4, y4 = rect if x1 >= x4 or x3 >= x2 or y1 >= y4 or y3 >= y2: result.append(0) else: result.append(1) return result"},{"question":"In a distant land, there is a magical forest with talking trees. Each tree can speak to its neighbor and pass messages. The trees are numbered in a linear sequence from 0 to N-1. There is a legend that some trees can form a special communication chain, allowing messages to be passed from the first tree in the chain to the last tree, with each tree speaking to its immediate neighbor. You are given the heights of the trees in the forest. A special communication chain occurs when the heights of the trees in the chain are in strictly increasing order. Your task is to find the length of the longest such chain in the forest. Input T - number of test cases For each test case: N - the number of trees in the forest N integers representing the heights of the trees Output For each test case, output the length of the longest increasing chain. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ height of each tree ≤ 10^4 Example Input 2 5 3 10 2 1 20 6 50 3 10 7 40 80 Output 3 4 Explanation In the first test case, the heights of the trees are [3, 10, 2, 1, 20]. The longest increasing chain is [3, 10, 20], which has a length of 3. In the second test case, the longest increasing chain is [3, 7, 40, 80], which has a length of 4.","solution":"def longest_increasing_chain(heights): Function to return the length of the longest strictly increasing subsequence. if not heights: return 0 dp = [1] * len(heights) for i in range(1, len(heights)): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_test_cases(T, test_cases): results = [] for i in range(T): N, heights = test_cases[i] results.append(longest_increasing_chain(heights)) return results"},{"question":"A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding itself. For example, 28 is a perfect number because its proper divisors are 1, 2, 4, 7, and 14 and 1 + 2 + 4 + 7 + 14 = 28. Write a function that takes an integer ```n``` and returns the smallest perfect number greater than ```n```. If there is no perfect number greater than ```n``` within the range of the current computational limits (for instance, consider values up to 10^{18}), return \\"Not found\\". Examples: ``` next_perfect_number(5) => 6 next_perfect_number(27) => 28 next_perfect_number(28) => 496 next_perfect_number(500) => 8128 next_perfect_number(-10) => 6 ``` Make sure to return \\"Not found\\" for any value larger than 10^{18}, because beyond that, perfect numbers may be computationally infeasible to determine.","solution":"def is_perfect_number(n): Checks if a number is a perfect number. if n < 2: return False sum_divisors = 1 for i in range(2, int(n**0.5) + 1): if n % i == 0: sum_divisors += i if i != n // i: sum_divisors += n // i return sum_divisors == n def next_perfect_number(n): Returns the smallest perfect number greater than n. if n >= 10**18: return \\"Not found\\" # List of known perfect numbers up to the computational feasible limit perfect_numbers = [6, 28, 496, 8128, 33550336, 8589869056, 137438691328, 2305843008139952128] for p in perfect_numbers: if p > n: return p return \\"Not found\\""},{"question":"Write a function `robot_movement(commands)` that simulates the movement of a robot in a 2D grid. The robot starts at the origin (0, 0) and can be given a list of commands in the form of strings. Each command instructs the robot to move in one of four possible directions: \\"UP\\", \\"DOWN\\", \\"LEFT\\", \\"RIGHT\\". - \\"UP\\": Moves the robot one unit up (y-coordinate increases by 1). - \\"DOWN\\": Moves the robot one unit down (y-coordinate decreases by 1). - \\"LEFT\\": Moves the robot one unit to the left (x-coordinate decreases by 1). - \\"RIGHT\\": Moves the robot one unit to the right (x-coordinate increases by 1). The function should return a tuple (x, y), which represents the final coordinates of the robot after executing all the given commands. Examples: ```python print(robot_movement([\\"UP\\", \\"UP\\", \\"LEFT\\", \\"DOWN\\", \\"RIGHT\\"])) # Output: (1, 1) print(robot_movement([\\"LEFT\\", \\"LEFT\\", \\"UP\\", \\"UP\\"])) # Output: (-2, 2) print(robot_movement([])) # Output: (0, 0) ```","solution":"def robot_movement(commands): Simulates the movement of a robot in a 2D grid starting at the origin (0, 0). Parameters: commands (list of str): A list of commands instructing the robot to move in the grid. Returns: tuple: The final coordinates of the robot after executing all the given commands. x, y = 0, 0 for command in commands: if command == \\"UP\\": y += 1 elif command == \\"DOWN\\": y -= 1 elif command == \\"LEFT\\": x -= 1 elif command == \\"RIGHT\\": x += 1 return (x, y)"},{"question":"Consider a grid of dimensions `m x n`. You are located at the top-left corner of the grid and need to traverse to the bottom-right corner. However, you can only move **right** or **down** at each step. Write a function that calculates the number of unique paths from the top-left corner to the bottom-right corner of the grid. The function receives two arguments: `m` (number of rows) and `n` (number of columns). ``` uniquePaths(m, n) -> int ``` **Example:** ``` uniquePaths(3, 7) -> 28 uniquePaths(3, 2) -> 3 uniquePaths(7, 3) -> 28 uniquePaths(3, 3) -> 6 ``` **Constraints:** - 1 <= m, n <= 100 **Hints:** - Consider using dynamic programming to optimize your solution. - Think about how the number of unique paths to a cell relates to the number of unique paths to the cells directly above and to the left of it.","solution":"def uniquePaths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid, only moving right or down at each step. # Create a 2D list to store the number of unique paths to each cell. dp = [[0] * n for _ in range(m)] # The number of ways to reach any cell in the first row or first column is 1 for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # For each cell, the number of paths is the sum of the number of paths # to the cell directly above and to the cell directly to the left. for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Design and implement a function to determine if a chess piece can make a valid move from a given starting position to a given target position on a standard 8x8 chessboard. Your function should take the type of the chess piece, the starting position, and the target position as input and return \\"YES\\" if the move is valid and \\"NO\\" otherwise. The input positions will be provided in the standard chess notation (A1, H8, etc.), and the types of chess pieces are \\"King\\", \\"Queen\\", \\"Rook\\", \\"Bishop\\", \\"Knight\\", and \\"Pawn\\". -----Constraints----- - The chess piece type will be one of the following: \\"King\\", \\"Queen\\", \\"Rook\\", \\"Bishop\\", \\"Knight\\", \\"Pawn\\". - The starting and target positions will be valid positions on an 8x8 chessboard in standard notation (two characters: a letter from \'A\' to \'H\' and a digit from \'1\' to \'8\'). - Note that for the \\"Pawn\\" piece, you should assume it is white and it moves upwards the board (i.e., from rank 2 towards rank 8). -----Input----- Input is given from Standard Input in the following format: Piece StartPosition TargetPosition -----Output----- Print \\"YES\\" if the move is valid, otherwise print \\"NO\\". -----Sample Input----- Knight B1 C3 -----Sample Output----- YES The Knight moves in an \\"L\\" shape, and moving from B1 to C3 is a valid move.","solution":"def can_move(piece, start, target): files = \'ABCDEFGH\' ranks = \'12345678\' start_file = files.index(start[0]) start_rank = ranks.index(start[1]) target_file = files.index(target[0]) target_rank = ranks.index(target[1]) file_diff = abs(target_file - start_file) rank_diff = abs(target_rank - start_rank) if piece == \\"King\\": if file_diff <= 1 and rank_diff <= 1: return \\"YES\\" elif piece == \\"Queen\\": if (file_diff == rank_diff) or (file_diff == 0) or (rank_diff == 0): return \\"YES\\" elif piece == \\"Rook\\": if (file_diff == 0) or (rank_diff == 0): return \\"YES\\" elif piece == \\"Bishop\\": if file_diff == rank_diff: return \\"YES\\" elif piece == \\"Knight\\": if (file_diff == 2 and rank_diff == 1) or (file_diff == 1 and rank_diff == 2): return \\"YES\\" elif piece == \\"Pawn\\": if file_diff == 0 and rank_diff == 1 and target_rank > start_rank: return \\"YES\\" if start_rank == 1 and file_diff == 0 and rank_diff == 2 and target_rank > start_rank: return \\"YES\\" return \\"NO\\""},{"question":"John loves streams and data processing. He has a large collection of data points (each point is a positive integer). He wants to perform multiple queries on his dataset to find the smallest subarray that has a sum greater than or equal to a given value. Your task is to help John by writing a function that can process his queries efficiently. -----Input----- The first line of the input contains two positive integers n and q (1 ≤ n, q ≤ 10^5) — the number of data points and the number of queries. The second line contains a sequence of n positive integers, representing John\'s data points (1 ≤ data_point ≤ 10^4). Each of the next q lines contains a single integer s (1 ≤ s ≤ 10^9), the sum query. -----Output----- For each query, output the length of the smallest contiguous subarray that has a sum greater than or equal to s. If no such subarray exists, print -1. -----Examples----- Input 8 3 1 2 3 4 5 6 7 8 15 20 5 Output 2 3 1 -----Note----- In the first query, the subarray [7, 8] sums to 15. In the second query, the subarray [6, 7, 8] sums to 21. In the third query, the subarray [5] or any larger subarray contains the sum required.","solution":"def find_min_subarray_length(data_points, queries): Returns the length of the smallest contiguous subarray for each query such that its sum is greater than or equal to the given query sum. If no such subarray exists, returns -1. results = [] for s in queries: min_length = float(\'inf\') left = 0 current_sum = 0 for right in range(len(data_points)): current_sum += data_points[right] while current_sum >= s: min_length = min(min_length, right - left + 1) current_sum -= data_points[left] left += 1 results.append(min_length if min_length != float(\'inf\') else -1) return results"},{"question":"You are working on a project to identify valid passwords based on a set of rules. You have to implement a function that checks if a given password adheres to the predefined rules. The rules are: ``` 1. The password must be at least 8 characters long. 2. The password must contain at least one uppercase letter (\'A\'-\'Z\'). 3. The password must contain at least one lowercase letter (\'a\'-\'z\'). 4. The password must contain at least one digit (\'0\'-\'9\'). 5. The password must not contain the substring \\"password\\" (case insensitive). 6. The password must not contain any of the non-alphanumeric characters \'!\', \'@\', \'#\', \'\', \'%\', \'^\', \'&\', \'*\', \'(\', \')\'. ``` # Task You need to implement a function `isValidPassword(password: str) -> bool` that checks if the given password is valid based on the rules explained above. The function returns `true` if the password is valid, and `false` otherwise. # Example For `password = \\"Abcdefg1\\"`, The output should be `true`. For `password = \\"Abcdef1\\"`, The output should be `false`. For `password = \\"abcdefg1\\"`, The output should be `false`. For `password = \\"ABC1DEFG\\"`, The output should be `false`. For `password = \\"Abcdefg123456789*\\"`, The output should be `false`. For `password = \\"AbcPassword1\\"`, The output should be `false`. For `password = \\"Ab1234567\\"`, The output should be `true`. # Note - The input password is always a non-empty string. - Happy Coding `^_^`","solution":"def isValidPassword(password: str) -> bool: Checks if the given password is valid based on predefined rules. :param password: string representing the password to be checked :return: boolean indicating whether the password is valid if len(password) < 8: return False has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) if not (has_upper and has_lower and has_digit): return False special_chars = set(\'!@#%^&*()\') if any(c in special_chars for c in password): return False if \'password\' in password.lower(): return False return True"},{"question":"# Problem Context The anagram of a string is another string formed by rearranging its characters. For instance, `listen` and `silent` are anagrams. Given a string `s` and a list of strings `words`, write a function that finds all the anagrams of `s` in the list `words`. Your function should return the list of anagrams. # Example Input ```python s = \\"listen\\" words = [\\"enlist\\", \\"google\\", \\"inlets\\", \\"banana\\", \\"silent\\"] ``` Output ```python [\\"enlist\\", \\"inlets\\", \\"silent\\"] ``` # Guidelines 1. The function should be case-insensitive, meaning that \\"Listen\\" and \\"silent\\" are considered anagrams. 2. The returned list should preserve the order of appearance in the input list. 3. The function should be able to handle input strings and list `words` of regular lengths efficiently. # Function Signature ```python def find_anagrams(s: str, words: list) -> list: # Your code here ```","solution":"def find_anagrams(s: str, words: list) -> list: Given a string `s` and a list of strings `words`, returns the list of anagrams of `s` in `words`. # Normalize the input string s and sort its characters sorted_s = sorted(s.lower()) anagrams = [] for word in words: if sorted(word.lower()) == sorted_s: anagrams.append(word) return anagrams"},{"question":"Given an integer `n`, print all n-digit numbers in ascending order where each digit is strictly less than the digit to its right and all digits are unique. Constraints: 1 ≤ n ≤ 9 SAMPLE INPUT 3 SAMPLE OUTPUT 123 124 125 126 127 128 129 134 135 136 137 138 139 145 146 147 148 149 156 157 158 159 167 168 169 178 179 189 234 235 236 237 238 239 245 246 247 248 249 256 257 258 259 267 268 269 278 279 289 345 346 347 348 349 356 357 358 359 367 368 369 378 379 389 456 457 458 459 467 468 469 478 479 489 567 568 569 578 579 589 678 679 689 789 Explanation: * The input is 3, which means output all 3-digit numbers. * Only numbers with strictly increasing digits and no repetition are included. * Example: For input n=3, numbers like 123, 124, 678 are included, while numbers like 111, 121, 132 are excluded.","solution":"def strictly_increasing_numbers(n): Given an integer n, prints all n-digit numbers in ascending order where each digit is strictly less than the digit to its right and all digits are unique. def generate_numbers(start, length, current): if length == 0: print(current) return for i in range(start, 10): generate_numbers(i + 1, length - 1, current * 10 + i) generate_numbers(1, n, 0) # Example usage: # strictly_increasing_numbers(3)"},{"question":"In a distant kingdom, there is a square forest with side length \'n\' (where 1 ≤ n ≤ 10^5). Each cell in the forest can either be an obstacle (represented by \'#\') or free land (represented by \'.\'). The forest is prone to magical thunderstorms that strike and cause changes in the forest very frequently. Each thunderstorm changes the forest configuration to one of its previous states over the last \'k\' days (where 1 ≤ k ≤ 100). Given that there are q queries (1 ≤ q ≤ 10^5), each asking for a state of the forest on a particular day in the past, your task is to efficiently handle these queries and output the forest configuration for the required past state. Input The first line contains three integers n, k, and q — the side length of the forest, the number of previous states recorded, and the number of queries. The next \'k\' lines each contain one forest configuration state — each configuration is represented by \'n\' lines of \'n\' characters (each character being either \'#\' or \'.\'). The next \'q\' lines, each contain a single integer d (1 ≤ d ≤ k) representing the day in the past for which the forest configuration is requested. Output For each query, output the configuration of the forest on the required day in its original format. Examples Input 3 2 2 # #.# # . # # 1 2 Output # #.# # # . # Explanation: The forest has two past states. For the first query, the forest configuration on day 1 is requested. For the second query, the forest configuration on day 2 is requested. Output the respective configurations for each query. Note: Your task is to efficiently handle large inputs and queries, so consider optimizing the solution for time and space complexity.","solution":"def get_forest_states(n, k, q, forest_states, queries): Returns the forest configuration for each query. Parameters: n (int): The side length of the forest. k (int): The number of previous states recorded. q (int): The number of queries. forest_states (list of list of str): List containing \'k\' forest states, each state is a list of \'n\' strings. queries (list of int): List containing \'q\' queries, each query is an integer d representing the day in the past. Returns: list of list of str: List of forest configurations for each query. results = [] for query in queries: results.append(forest_states[query - 1]) return results"},{"question":"Given a list of integers and a target integer, determine if there exists a pair of distinct integers in the list such that their sum equals the target. You should return `True` if such a pair exists and `False` otherwise. The list may contain duplicates, and each integer can be used only once. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: True Explanation: 2 + 7 = 9, which matches the target. Example 2: Input: nums = [1, 2, 3, 4], target = 8 Output: False Explanation: There are no pairs that sum to 8. Example 3: Input: nums = [3, 2, 4], target = 6 Output: True Explanation: 2 + 4 = 6, which matches the target. Your Task: You do not need to read input or output anything. Complete the function `hasPairWithSum(nums: List[int], target: int) -> bool` which takes a list of integers `nums` and an integer `target` as input and returns `True` if a pair with the given sum exists, otherwise `False`. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: - 1 <= len(nums) <= 10^5 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"def hasPairWithSum(nums, target): Determines if there exists a pair of distinct integers in the list such that their sum equals the target. Args: nums (List[int]): List of integers. target (int): The target integer sum. Returns: bool: True if such a pair exists, False otherwise. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"Given an integer array `arr` of size `n`, there are 3 types of operations you can perform: \\"update text{i} text{v}\\" - Update the value at index text{i} to text{v} in the array (0-indexed). \\"query_sum text{i} text{j}\\" - Calculate the sum of the elements in the subarray from index text{i} to text{j}, inclusive. \\"query_max text{i} text{j}\\" - Find the maximum value in the subarray from index text{i} to text{j}, inclusive. Input Format The first line contains two integers, n and q, the size of the array and the number of operations. The second line contains n space-separated integers representing the initial values in the array. Each of the next q lines contains one of the three types of operations. Constraints 1 leq n leq 10^5 1 leq q leq 10^5 1 leq text{i} leq text{j} < n 1 leq text{v}, text{arr}[k] leq 10^9 Output Format For each `query_sum` and `query_max` operation, print the result on separate lines. Sample Input ``` 5 5 1 2 3 4 5 query_sum 1 3 query_max 0 2 update 2 10 query_sum 1 3 query_max 1 4 ``` Sample Output ``` 9 3 16 10 ``` Explanation 1. The initial array is [1, 2, 3, 4, 5]. 2. `query_sum 1 3` computes the sum of elements at indices 1, 2, and 3: 2 + 3 + 4 = 9. 3. `query_max 0 2` finds the maximum element in the subarray [1, 2, 3]: maximum value is 3. 4. `update 2 10` updates the value at index 2 to 10. The array becomes [1, 2, 10, 4, 5]. 5. `query_sum 1 3` computes the sum of elements at indices 1, 2, and 3: 2 + 10 + 4 = 16. 6. `query_max 1 4` finds the maximum element in the subarray [2, 10, 4, 5]: maximum value is 10.","solution":"class RangeQueryArray: def __init__(self, arr): self.arr = arr self.n = len(arr) self.prefix_sum = self.build_prefix_sum() self.segment_tree = self.build_segment_tree() def build_prefix_sum(self): prefix_sum = [0] * self.n prefix_sum[0] = self.arr[0] for i in range(1, self.n): prefix_sum[i] = prefix_sum[i-1] + self.arr[i] return prefix_sum def build_segment_tree(self): segment_tree = [0] * (2 * self.n) # initializing the leaves of the segment tree for i in range(self.n): segment_tree[self.n + i] = self.arr[i] # building the segment tree by calculating parents for i in range(self.n - 1, 0, -1): segment_tree[i] = max(segment_tree[2 * i], segment_tree[2 * i + 1]) return segment_tree def update(self, i, v): self.arr[i] = v # Update prefix sum if i == 0: self.prefix_sum[i] = v else: self.prefix_sum[i] = self.prefix_sum[i-1] + v for j in range(i + 1, self.n): self.prefix_sum[j] = self.prefix_sum[j-1] + self.arr[j] # Update in segment tree pos = i + self.n self.segment_tree[pos] = v while pos > 1: pos //= 2 self.segment_tree[pos] = max(self.segment_tree[2 * pos], self.segment_tree[2 * pos + 1]) def query_sum(self, i, j): if i == 0: return self.prefix_sum[j] return self.prefix_sum[j] - self.prefix_sum[i-1] def query_max(self, i, j): l = i + self.n r = j + self.n + 1 max_val = float(\'-inf\') while l < r: if l % 2 == 1: max_val = max(max_val, self.segment_tree[l]) l += 1 if r % 2 == 1: r -= 1 max_val = max(max_val, self.segment_tree[r]) l //= 2 r //= 2 return max_val"},{"question":"Anna is studying a list of integers and would like to know which elements in the list, if any, are the most frequent. She wants to write a function to identify these elements and return them in ascending order. If there is only one such element, it should simply return that element. Write a function `most_frequent_elements(arr)` that takes in an array of integers and returns a list of the most frequent elements sorted in ascending order. Input - The input will be a single line containing an integer n (1 ≤ n ≤ 105) — the number of elements in the array. - The second line contains n space-separated integers a1, a2, ...., an, where each ai (1 ≤ ai ≤ 109) is an element of the array. Output - Output a single line containing the most frequent elements of the array in ascending order. Examples Input 5 1 2 2 3 3 Output 2 3 Input 6 3 1 4 1 5 9 Output 1 Note In the first example, the integers 2 and 3 both appear twice, more frequently than any other number, hence the output is 2 3. In the second example, the integer 1 appears twice which is the most frequent in the given array. Hence, the output is 1.","solution":"from collections import Counter def most_frequent_elements(arr): Returns a list of the most frequent elements in ascending order. if not arr: return [] # Count the frequency of each element in the list freq = Counter(arr) # Find the maximum frequency max_freq = max(freq.values()) # Get all elements with the maximum frequency most_freq_elements = [key for key, value in freq.items() if value == max_freq] # Return the sorted list of the most frequent elements return sorted(most_freq_elements)"},{"question":"This is an interactive problem. You are given a 1-based array `A` of `n` integers. Each integer is either `-1`, `0`, or `1`. You must interact with the array to determine the product of all its elements. You can perform several queries on the array. In each query, you can ask for the value at a specific index within the valid range. However, there is a limit on the number of queries you can ask, which is `2 * sqrt(n)`. Additionally, be aware that the array could change between your queries in a subtle and unpredictable manner due to a hidden process, but the length of the array will always remain the same. Your task is to figure out the product of all elements in the array. Input: The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. Output: Print the product of all elements in the array. The result should be `1`, `0`, or `-1`. Interaction: To query for the value at the index `i`, print `? i` (1 ≤ i ≤ n). In response to your query, you will get one of `-1`, `0`, or `1`. Remember to print an end of line and flush the output after each query. When you deduce the product, print `!` followed by the product and finish your program. Examples: Input: 4 Output: ? 1 1 ? 2 0 ! 0 Explanation: In this example, the array length `n` is 4. The exchanges with the system show that the value at index 1 is `1`, and the value at index 2 is `0`. Because there is a `0` in the array, the product of all elements is `0`. Input: 3 Output: ? 1 -1 ? 2 1 ? 3 1 ! -1 Explanation: In the second example, the array length `n` is 3. The values are `-1`, `1`, and `1`, hence their product is `-1`.","solution":"import math import sys def determine_product(n): zero_found = False product = 1 max_queries = int(2 * math.sqrt(n)) for i in range(1, n + 1): if max_queries <= 0: break print(f\'? {i}\') sys.stdout.flush() value = int(input().strip()) if value == 0: zero_found = True break product *= value max_queries -= 1 if zero_found: result = 0 else: result = product print(f\'! {result}\') sys.stdout.flush() # Example Usage: # determine_product(4)"},{"question":"Missed Calls Notification John is a software developer who likes to keep track of his missed calls. However, he only wants to see the count of missed calls from unique phone numbers. John receives multiple calls from different phone numbers every day and wants to write a program to help him with this task. You are to write a program that takes a series of logs that consist of phone numbers and counts the unique phone numbers that have called. Assume that John receives numerous call logs and each log can contain up to 1000 call entries. Input The input consists of multiple datasets. Each dataset contains the following format: The first line contains a single integer n (1 ≤ n ≤ 1000) indicating the number of phone numbers in the current log. The next n lines each contain a single phone number. Each phone number is a string consisting of digits and/or \'-\' and can have a maximum length of 15 characters. The end of the input is indicated by a line containing a single zero. Output For each dataset, output the count of unique phone numbers. Sample Input 4 123-456-7890 987-654-3210 123-456-7890 345-678-9012 5 1234567890 1234567890 000-000-0000 555-555-5555 555-555-5555 0 Output for the Sample Input 3 3 Example Input 4 123-456-7890 987-654-3210 123-456-7890 345-678-9012 5 1234567890 1234567890 000-000-0000 555-555-5555 555-555-5555 0 Output 3 3","solution":"def count_unique_calls(input_str): Function to count unique phone numbers from the log. logs = input_str.strip().split(\'n\') result = [] i = 0 while i < len(logs): n = int(logs[i]) if n == 0: break phone_numbers = set() for j in range(i + 1, i + 1 + n): phone_numbers.add(logs[j]) result.append(len(phone_numbers)) i += n + 1 return result"},{"question":"James is working on a data analytics task where he analyzes the movement of a robot on a two-dimensional plane. The robot starts at the origin point (0, 0) and follows a sequence of commands to move. Each command is a string that denotes the direction (\\"U\\" for up, \\"D\\" for down, \\"L\\" for left, \\"R\\" for right) followed by an integer that specifies the number of units to move in that direction. You are given a set of such commands and your task is to compute the final position of the robot after executing all the commands. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of commands. The following n lines each contain a command in the format \\"DIRECTION STEPS\\" where \\"DIRECTION\\" is one of \\"U\\", \\"D\\", \\"L\\", \\"R\\" and \\"STEPS\\" is an integer (1 ≤ STEPS ≤ 10^4). -----Output----- Output the final coordinates of the robot as two space-separated integers x and y. -----Examples----- Input 5 U 3 D 2 L 1 R 4 D 3 Output 3 -2 Input 3 U 5 L 5 D 5 Output -5 0","solution":"def get_final_position(n, commands): Calculate the final position of the robot on a 2D plane given a number of commands. Args: n (int): the number of commands commands (list of str): the commands to move the robot Returns: tuple: the final position (x, y) of the robot x, y = 0, 0 for command in commands: direction, steps = command.split() steps = int(steps) if direction == \\"U\\": y += steps elif direction == \\"D\\": y -= steps elif direction == \\"L\\": x -= steps elif direction == \\"R\\": x += steps return (x, y)"},{"question":"Alice is organizing a marathon, and every participant has recorded their running times in a list. The organizer wants to provide awards to the participants based on their performance. There are three types of awards: 1. Gold for the top 3 times, 2. Silver for the next 2 times, 3. Bronze for the next 5 times. Any subsequent participants will not receive an award. Times are recorded in format hh:mm:ss, and a lower time denotes a better performance. If there are fewer than 3 participants, no awards should be given out. Participants must be awarded by their finishing times in ascending order (best time gets Gold, next gets Silver, etc.). -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of participants. Each of the next n lines contains the finish time of a participant in the format hh:mm:ss. -----Output----- For each participant, output the finish time and the type of award they receive in the format \\"hh:mm:ss Award\\", aligning awards with the above rules. If a participant does not receive an award, do not list them in the output. Entries with times should be sorted in ascending order. -----Examples----- Input 7 02:45:30 03:30:10 02:10:20 01:22:30 02:50:10 01:45:50 03:10:00 Output 01:22:30 Gold 01:45:50 Gold 02:10:20 Gold 02:45:30 Silver 02:50:10 Silver 03:10:00 Bronze 03:30:10 Bronze Input 2 01:55:00 02:40:20 Output (No Output) Input 9 05:20:30 04:50:00 06:15:30 05:00:00 05:10:00 06:25:00 04:40:30 05:30:20 04:55:55 Output 04:40:30 Gold 04:50:00 Gold 04:55:55 Gold 05:00:00 Silver 05:10:00 Silver 05:20:30 Bronze 05:30:20 Bronze 06:15:30 Bronze 06:25:00 Bronze -----Note----- Participants with the fastest three times will receive \\"Gold\\" awards, the next two fastest will receive \\"Silver\\" awards, and the next five fastest will receive \\"Bronze\\" awards. No awards are given out to positions beyond these.","solution":"def award_participants(n, times): if n < 3: return [] times.sort() # sort times in ascending order awards = [\'Gold\'] * 3 + [\'Silver\'] * 2 + [\'Bronze\'] * 5 results = [] for i in range(min(n, 10)): results.append(f\\"{times[i]} {awards[i]}\\") return results"},{"question":"You are given a non-empty string s consisting of lowercase letters. Determine the smallest possible lexicographical string that can be obtained by removing exactly one character from s. A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. Input The first line of input contains a non-empty string s which consists of lowercase letters (\'a\'...\'z\'), s contains at most 2000 characters. Output Output a single string — the lexicographically smallest string possible by removing exactly one character from the string s. Examples Input abab Output aab Input abc Output ab Input a Output \\"\\"","solution":"def smallest_lexicographical_string(s): # Length of the input string n = len(s) # Initialize the smallest string by removing the last character smallest_str = s[:-1] # Iterate through the string to check lexicographical order by removing one character at a time for i in range(n): new_str = s[:i] + s[i+1:] if new_str < smallest_str: smallest_str = new_str return smallest_str # Example usage # print(smallest_lexicographical_string(\\"abab\\")) # Output should be \\"aab\\" # print(smallest_lexicographical_string(\\"abc\\")) # Output should be \\"ab\\" # print(smallest_lexicographical_string(\\"a\\")) # Output should be \\"\\""},{"question":"Given a list of integers, write a function that returns the first integer that is greater than the average of the entire list. If no such integer exists, return -1. Function Signature: `def find_first_above_average(numbers: List[int]) -> int:` Example: ```python assert find_first_above_average([1, 2, 3, 4, 5]) == 4 assert find_first_above_average([10, 10, 10, 10]) == -1 assert find_first_above_average([1, 3, 2, 6, 4, 5]) == 6 assert find_first_above_average([]) == -1 ``` *Note*: You can assume that the input list contains only integers.","solution":"from typing import List def find_first_above_average(numbers: List[int]) -> int: Returns the first integer in the list that is greater than the average of the list. If no such integer exists, returns -1. if not numbers: return -1 average = sum(numbers) / len(numbers) for number in numbers: if number > average: return number return -1"},{"question":"Mr. Smith, a seasoned traveler, enjoys planning his trips by visiting several cities. On his journey, he aims to visit each city exactly once before returning to the starting point. Given the list of cities and the distances between each pair of cities, your task is to help Mr. Smith determine the minimum total distance he needs to travel to complete his journey. problem Given an integer ( n ) and an ( n times n ) matrix ( dist ) representing the distances between ( n ) cities, the objective is to find the shortest possible route that visits each city exactly once and returns to the starting city. input The first line contains an integer ( n ) (2 leq n leq 10). The next ( n ) lines each contain ( n ) integers. The ( j )-th integer in the ( i )-th line represents the distance between city ( i ) and city ( j ) (0 leq dist[i][j] leq 1000). It is guaranteed that ( dist[i][i] = 0 ) for all cities ( i ). output Output a single integer representing the minimum total distance of the trip. Examples Input 1: ``` 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 ``` Output 1: ``` 80 ``` Input 2: ``` 3 0 10 15 10 0 20 15 20 0 ``` Output 2: ``` 45 ``` Input 3: ``` 2 0 5 5 0 ``` Output 3: ``` 10 ```","solution":"def tsp_minimum_distance(n, dist): from itertools import permutations # Initialize minimum distance to a large number min_distance = float(\'inf\') # Generate all possible permutations of node visits for perm in permutations(range(1, n)): current_distance = 0 current_path = [0] + list(perm) + [0] # Calculate the distance of the current path for i in range(len(current_path) - 1): current_distance += dist[current_path[i]][current_path[i + 1]] # Update minimum distance if current path has a lower distance if current_distance < min_distance: min_distance = current_distance return min_distance"},{"question":"A company is organizing a programming contest where a number of participants write their solutions to given problems. Each participant’s solution is tested against multiple test cases to determine its correctness. For each test case a participant’s solution either passes it (gaining a point) or fails it (gaining no point). You are required to rank the participants based on their total points. In case of two participants having the same points, they are ranked based on their submission time – the one who submitted earlier is ranked higher. Each participant is associated with a unique identifier and a submission timestamp. ------ Input ------ The first line of input contains a single integer N denoting the total number of participants. The next N lines describe each participant. Each line contains a string ParticipantID denoting the participant\'s unique identifier, an integer Points denoting the number of points the participant gained, and a string Timestamp in the format YYYY-MM-DD HH:MM:SS. ------ Output ------ Print the participant IDs in a single line separated by spaces representing their ranks from highest to lowest. ------ Constraints ------ 1 leq N leq 1000 the length of each ParticipantID does not exceed 10 and consists only of lowercase English letters 0 leq Points leq 100 All timestamps are unique ----- Sample Input 1 ------ 4 alice 23 2023-08-17 14:32:20 bob 26 2023-08-17 14:30:10 charlie 23 2023-08-17 14:30:09 diana 25 2023-08-17 14:30:11 ----- Sample Output 1 ------ bob diana charlie alice","solution":"def rank_participants(N, participants): # First, parse the input into a list of tuples parsed_participants = [] for p in participants: parts = p.split() identifier = parts[0] points = int(parts[1]) timestamp = parts[2] + \\" \\" + parts[3] parsed_participants.append((identifier, points, timestamp)) # Sort participants by points (descending) and then by timestamp (ascending) sorted_participants = sorted(parsed_participants, key=lambda x: (-x[1], x[2])) # Extract and return only the identifiers in a single line result = \\" \\".join([p[0] for p in sorted_participants]) return result"},{"question":"In a weightlifting contest, the participants are required to lift a total weight of exactly W kilograms using a set of standard weight plates. Each plate has a predefined weight, and there is an unlimited supply of each type of plate. Your task is to determine the minimum number of plates required to make up exactly W kilograms. If it is not possible to form exactly W kilograms with the given plates, return -1. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. For each test case: - The first line contains an integer n (1 leq n leq 100) — the number of different plate weights. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 leq a_i leq 1000) — the weight of each type of plate. - The third line contains a single integer W (1 leq W leq 10000) — the total weight to be formed. -----Output----- For each test case, output the minimum number of plates required to form exactly W kilograms. If it is not possible, output -1. -----Examples----- Input 3 3 1 3 4 6 2 2 5 3 4 1 2 3 4 7 Output 2 -1 2 -----Note----- In the first test case, one possible way to make 6 kg is using two 3 kg plates. In the second test case, it is not possible to make 3 kg using plates of 2 kg and 5 kg. In the third test case, one possible way to make 7 kg is using a 3 kg plate and a 4 kg plate.","solution":"def min_number_of_plates(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] weights = test_cases[i][1] W = test_cases[i][2] dp = [float(\'inf\')] * (W + 1) dp[0] = 0 for weight in weights: for w in range(weight, W + 1): dp[w] = min(dp[w], dp[w - weight] + 1) results.append(dp[W] if dp[W] != float(\'inf\') else -1) return results"},{"question":"A detective is trying to decode a secret message. The message is a string comprised of lowercase letters and spaces. The detective knows that every word \\"x\\" in the message has been encoded by rotating the letters in \\"x\\" right by a given number of positions \\"n\\". The rotation is circular such that if a letter goes past \\"z\\", it wraps around to the start of the alphabet. For example, if the word is \\"abc\\" and the rotation number is 1, the encoded word becomes \\"bcd\\". You have to help the detective decode the message by implementing a function that takes the encoded string and the rotation number and returns the original message. Input format: The first line contains an integer, `tc`, denoting the number of test cases. The next `tc` lines each contain a number `n` followed by the encoded string, where: - `n` (an integer) represents the number of positions each letter has been rotated. - The encoded string consists of lowercase letters and spaces only. Output format: For each test case, print the decoded original message. Constraints: 1 ≤ tc ≤ 100 0 ≤ n ≤ 25 1 ≤ length of encoded string ≤ 1000 SAMPLE INPUT 2 3 def 1 bcd efg SAMPLE OUTPUT abc abc def Explanation In the first test case, the rotation number is 3, and the encoded word is \\"def\\". Rotating \\"def\\" by 3 positions to the left yields \\"abc\\". In the second case, the rotation number is 1. The encoded words are \\"bcd\\" and \\"efg\\". Rotating \\"bcd\\" and \\"efg\\" by 1 position to the left yields \\"abc\\" and \\"def\\" respectively.","solution":"def decode_message(n, encoded): Takes the number of positions letters are rotated and the encoded message, returns the decoded original message. :param n: integer, number of positions each letter has been rotated :param encoded: string, the encoded message consisting of lowercase letters and spaces :return: string, the decoded message decoded = [] for char in encoded: if char == \' \': decoded.append(char) else: decoded_char = chr((ord(char) - ord(\'a\') - n) % 26 + ord(\'a\')) decoded.append(decoded_char) return \'\'.join(decoded) def process_test_cases(tc, test_cases): Processes multiple test cases of decoding messages. :param tc: integer, number of test cases :param test_cases: list of tuples, where each tuple contains an integer (number of rotations) and an encoded string :return: list of strings, each string being the decoded message for that test case results = [] for n, message in test_cases: results.append(decode_message(n, message)) return results"},{"question":"Alex loves running. He goes on a run every morning and keeps track of his running distance every day in kilometers. However, Alex is curious to find the longest continuous segment of days where his running distance either increases or stays the same day by day. You will be given the running distances of Alex for n days. You have to find the length of the longest continuous segment where the running distance doesn\'t decrease. Input: The first line contains the number of test cases t. Each test case begins with the number of days n. The next line contains the running distances for n days. Output: Print the length of the longest continuous segment where the running distance doesn\'t decrease for each test case. Constraints: t ≤ 20 n ≤ 1000000 running distance on each day ≤ 10000000 SAMPLE INPUT 2 6 5 3 4 8 6 7 5 1 2 3 4 5 SAMPLE OUTPUT 3 5","solution":"def longest_non_decreasing_segments(test_cases): results = [] for case in test_cases: n, distances = case max_length = 1 current_length = 1 for i in range(1, n): if distances[i] >= distances[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 if current_length > max_length: max_length = current_length results.append(max_length) return results def parse_input(input_str): lines = input_str.split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) distances = list(map(int, lines[index + 1].split())) test_cases.append((n, distances)) index += 2 return test_cases def main(input_str): test_cases = parse_input(input_str) results = longest_non_decreasing_segments(test_cases) return \'n\'.join(map(str, results))"},{"question":"Masha is playing a game where she has to move from the top-left corner to the bottom-right corner of a grid with `n` rows and `m` columns. She can only move right or down at each step. Additionally, there are certain cells in the grid designated as traps. If Masha steps on a trap, the game ends immediately. Her goal is to count the number of possible paths she can take to reach the bottom-right corner without stepping on any traps. Since the number of paths can be very large, return the result modulo 1000000007 (10^9 + 7). Input The first line of the input contains two space-separated integers, n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the grid. The second line contains an integer k (0 ≤ k ≤ n * m), the number of traps. The next k lines each contain two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m), representing the row and column index of a trap in the grid. Output Print a single integer — the number of possible paths from the top-left corner to the bottom-right corner, modulo 1000000007. Examples Input 3 3 1 2 2 Output 2 Input 3 3 0 Output 6 Note Sample 1. Masha has a 3x3 grid and there is a trap at cell (2,2). The paths (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) and (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) are the only two valid paths to the bottom-right corner. Sample 2. Masha has a 3x3 grid with no traps. There are 6 possible paths to the bottom-right corner.","solution":"def count_paths(n, m, traps): MOD = 1000000007 # Initialize the grid with False meaning no trap grid = [[False] * m for _ in range(n)] # Place the traps on the grid for x, y in traps: grid[x - 1][y - 1] = True # Initialize the dp array dp = [[0] * m for _ in range(n)] # Starting point if not grid[0][0]: dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(m): if grid[i][j]: dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[n-1][m-1] def count_paths_from_input_string(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) k = int(lines[1]) traps = [tuple(map(int, line.split())) for line in lines[2:2+k]] return count_paths(n, m, traps)"},{"question":"You are given an array of n integers, which might contain both positive and negative integers. You need to find the maximum sum of a contiguous subarray with the constraint that the length of the subarray is at least k. You need to design an algorithm that finds this maximum sum efficiently. For instance, given an array `arr = [1, -2, 3, 4, -5, 6]` and `k = 2`, the subarray `[3, 4]` is a possible candidate with sum 7. Another possible candidate is `[3, 4, -5, 6]` with sum 8. However, the contiguous subarray `[3, 4, -5, 6]` is also of length at least 2 and yields a maximum sum of 8. Input The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 100000), where n is the length of the array, and k is the minimum length of the subarray. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), the elements of the array. Output Output a single integer, the maximum sum of a contiguous subarray with length at least k. Examples Input 6 2 1 -2 3 4 -5 6 Output 8 Input 8 3 -1 -2 -3 -4 -5 -6 -7 -8 Output -6 Input 10 5 10 -5 3 -1 8 -2 4 7 -11 -6 Output 24 Note In the first case, the best subarray is `[3, 4, -5, 6]` which sums to 8. In the second case, the least negative sum that can be attained by any subarray of at least length 3 is -6 (e.g., `[-1, -2, -3]`). In the third case, the best subarray is `[10, -5, 3, -1, 8, -2, 4, 7]` which sums up to 24.","solution":"def max_sum_with_min_length(arr, k): n = len(arr) # Compute the sum of first `k` elements current_sum = sum(arr[:k]) max_sum = current_sum # Array to keep track of maximum sum subarray that ends at each index max_subarray_sum_end = [0] * n max_subarray_sum_end[k-1] = current_sum # Iterate from k to n to find maximum sums for subarrays of at least length k for i in range(k, n): current_sum += arr[i] current_sum -= arr[i-k] max_subarray_sum_end[i] = max(max_subarray_sum_end[i-1] + arr[i], current_sum) max_sum = max(max_sum, max_subarray_sum_end[i]) return max_sum"},{"question":"Below is a coding assessment question designed to match the style, complexity, and scope of the provided question. Write a function that takes as input a string formatted as nested lists and a query to extract a specific element from it. The nested list structure in the string follows these syntax rules: - Lists are wrapped in square brackets `[]`. - Elements within lists are separated by commas. - Elements can be integers or other lists. The query is a string that specifies the index path to access a specific element. The format of the query is a sequence of indices separated by dots (`.`). For example, the query `2.1.3` accesses the element at index 3 of the list at index 1 of the list at index 2 of the outermost list. If the specified element does not exist, the function should return the string `no such element`. If the specified element is another list, the function should return the string `list`. # Example Format Input ``` > query > nested_list_str ``` Output The function should print the value of the specified element if it exists, `no such element` if the specified element does not exist, and `list` if the value of the specified element is another list. # Example Input ``` > 1.0 > [[1, 2, 3], [4, [5, 6]], [7, 8, 9]] ``` Output ``` 4 ``` Input ``` > 2.1.1 > [[1, 2, 3], [4, [5, 6]], [7, [8, 9, [10]]]] ``` Output ``` 9 ``` Input ``` > 2.2 > [[1, 2], [3, 4]] ``` Output ``` no such element ``` Input ``` > 1.1 > [10, [20, 30], 40, [50, 60]] ``` Output ``` 30 ```","solution":"def extract_element(query, nested_list_str): def parse_nested_list(s): Parses a string formatted nested list into an actual nested list. return eval(s.replace(\'n\', \'\')) def access_element(nested_list, index_path): Accesses the element in the nested list based on the index path. current_element = nested_list for index in index_path: if isinstance(current_element, list) and 0 <= index < len(current_element): current_element = current_element[index] else: return \\"no such element\\" return current_element index_path = list(map(int, query.split(\'.\'))) nested_list = parse_nested_list(nested_list_str) result = access_element(nested_list, index_path) if isinstance(result, list): return \\"list\\" return result"},{"question":"Serena is training for a marathon, and she records the distance she runs each day in a log. However, she has a peculiar way of motivating herself. Serena wants to know the maximum distance she has run over any consecutive `k` days. Can you help Serena by writing a program to find the maximum distance she has run over any `k` consecutive days? Input - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 10^5) — the number of days and the number of consecutive days to consider. - The second line contains `n` integers `d_1, d_2, ..., d_n` (0 ≤ d_i ≤ 10^3) — the distances run by Serena on each day. Output - Print a single integer — the maximum distance run over any `k` consecutive days. Example Input 10 3 6 2 3 7 1 4 5 8 9 6 Output 24 Explanation: The maximum distance run over any 3 consecutive days is achieved on days 8, 9, and 10 (8 + 9 + 6 = 23), which sums to 24. Input 5 2 10 1 2 10 3 Output 12 Explanation: The maximum distance run over any 2 consecutive days is achieved on days 1 and 2 (10 + 1 = 11), but the highest sum occurs on days 4 and 5 (10 + 3 = 13), which sums to 12.","solution":"def max_distance_over_k_days(n, k, distances): Returns the maximum distance run over any k consecutive days. Parameters: n (int): The number of days. k (int): The number of consecutive days to consider. distances (list): List of distances run each day. Returns: int: The maximum distance run over any k consecutive days. # Initialize the sum of the first k elements max_sum = current_sum = sum(distances[:k]) # Sliding window approach for i in range(k, n): current_sum += distances[i] - distances[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a list of integers. Determine if it is possible to rearrange the integers in such a way that no two adjacent integers have a sum that is a multiple of 10. Input The first line contains one integer T, denoting the number of test cases. Each of the following T lines contains a list of integers separated by spaces, describing each test case. Output For each test case, output \\"YES\\" if such an arrangement is possible, otherwise output \\"NO\\". Constraints 1 ≤ T ≤ 10 1 ≤ Number of integers in a test case ≤ 10^5 1 ≤ Value of each integer ≤ 10^9 SAMPLE INPUT 2 1 2 3 4 5 10 20 30 40 SAMPLE OUTPUT YES NO","solution":"def can_rearrange(arr): Determines if it\'s possible to rearrange the array such that no two adjacent integers have a sum that is a multiple of 10. counts = [0] * 10 # To store counts of elements with each possible last digit (0 through 9) for num in arr: counts[num % 10] += 1 # Check for odd and even pattern matching for i in range(10): if counts[i] % 2 != 0: return \\"YES\\" return \\"NO\\" def process_test_cases(num_cases, test_cases): results = [] for case in test_cases: results.append(can_rearrange(case)) return results def main(test_input): test_lines = test_input.strip().splitlines() T = int(test_lines[0]) test_cases = [list(map(int, line.split())) for line in test_lines[1:T+1]] return process_test_cases(T, test_cases)"},{"question":"The National Coding Tournament (NCT) is organized every year, and some participants perform exceptionally well in both rounds of the competition. Your task is to determine the set of participants who have achieved top positions in both rounds. You are given two lists of participants\' ids, one for each round. A participant is considered a top performer if they appear in the top K positions in both rounds. Find and output the list of such participants. -----Input:----- - The first line contains two integers N, M denoting the number of participants in the first round and the number of participants in the second round, respectively. - The second line contains N integers representing the participants\' ids ranked from 1 to N in the first round. - The third line contains M integers representing the participants\' ids ranked from 1 to M in the second round. - The fourth line contains a single integer K. -----Output:----- Print a single line with the ids of participants who are in the top K positions in both rounds in ascending order. If no such participants exist, print \\"None\\". -----Constraints----- - 1 leq N, M leq 10^5 - 1 leq K leq min(N, M) - Each participant id is a unique positive integer that fits within a 32-bit signed integer. -----Sample Input:----- 5 7 1 2 3 4 5 3 1 2 6 7 8 9 3 -----Sample Output:----- 1 2 3 -----EXPLANATION:----- - The top 3 participants in the first round are 1, 2, and 3. - The top 3 participants in the second round are 3, 1, and 2. - Therefore, the participants who are in the top K positions in both rounds are 1, 2, and 3. - They are listed in ascending order in the output.","solution":"def find_top_performers(N, M, round1_ids, round2_ids, K): Returns a list of participant ids who are in the top K positions in both rounds in ascending order. If no such participants exist, return an empty list. # Top K participants in both rounds top_k_round1 = set(round1_ids[:K]) top_k_round2 = set(round2_ids[:K]) # Intersection of top K participants in both rounds top_performers = sorted(list(top_k_round1 & top_k_round2)) if top_performers: return top_performers else: return [\\"None\\"]"},{"question":"Daniel likes to play with numerical arrays. He recently came up with a new game involving such arrays, and he challenges you to solve it. You are given an array of integers A consisting of n elements (1 ≤ n ≤ 100, -100 ≤ A[i] ≤ 100). The game entails finding a subarray (contiguous segment) of A such that the sum of the subarray is maximized. Your task is to write a program that determines the maximum possible sum of any subarray of A. # Input - The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the array A. - The second line contains n integers A1, A2, ..., An (-100 ≤ Ai ≤ 100), the elements of the array. # Output - Output a single integer, the maximum possible sum of any subarray of the array A. # Examples Example 1 **Input:** ``` 5 -2 1 -3 4 -1 2 1 -5 4 ``` **Output:** ``` 6 ``` **Explanation:** The subarray [4, -1, 2, 1] has the largest sum 6. Example 2 **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` 10 ``` **Explanation:** The entire array [1, 2, 3, 4] has the largest sum 10. # Note - The subarray can contain one element. - The array may contain negative numbers.","solution":"def max_subarray_sum(arr): Find the maximum sum of any subarray of the given array. :param arr: List[int] - List of integers :return: int - Maximum possible sum of any subarray if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"In a remote village, there\'s a tradition held every year where villagers celebrate the harvest by creating a special rectangular field filled with crops. Every field is unique and has certain patches (represented as cells in a matrix) that produce more crops than others. The villagers need your help to calculate the maximum crop yield they can gather from any rectangular sub-field in their field. You are given a matrix of integers where each integer represents the crop yield from that cell of the field. Your task is to find the maximum sum of crop yields in any rectangular sub-field. Input - The first line contains two integers `N` and `M`, representing the number of rows and columns in the matrix respectively. - The next `N` lines contain `M` integers each, representing the crop yields of each cell in the field. Output - Print a single integer, which is the maximum sum of crop yields from any rectangular sub-field. Constraints - 1 ≤ N, M ≤ 100 - -10^4 ≤ Yield in each cell ≤ 10^4 SAMPLE INPUT 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 SAMPLE OUTPUT 29 Explanation The maximum sum of crop yields from any rectangular sub-field is 29, and it comes from the sub-field: ``` 3 8 10 -1 1 7 ```","solution":"def max_crop_yield(matrix): This function calculates the maximum sum of crop yields in any rectangular sub-field. from sys import maxsize def kadane(arr): Helper function to run Kadane\'s algorithm on an array max_sum = -maxsize current_sum = 0 for num in arr: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum if not matrix or not matrix[0]: return 0 N = len(matrix) M = len(matrix[0]) max_sum = -maxsize for left in range(M): temp = [0] * N for right in range(left, M): for i in range(N): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"The kingdom of Lexicopia has M regions arranged in a circular layout, where the ith region is denoted by Ri. Each region is unique and has a specific level of gold production represented by a non-negative integer Gi. To build a strong and profitable kingdom, the Lexicopians want to determine the most profitable way to collect gold from a sequence of contiguous regions. The problem is that due to geographic constraints, the regions are circularly connected, meaning Region M-1 is directly connected to Region 0. You are to determine the maximum amount of gold that can be collected by selecting a contiguous subsequence of regions in this circular arrangement. Input Format The first line contains the number of test cases K. K test cases follow. The first line of each test case contains M, the number of regions in Lexicopia. The following line contains M space-separated non-negative integers, where the ith integer represents the gold production Gi of the ith region. Constraints 1 <= K <= 10 1 <= M <= 10^5 0 <= Gi <= 10^4 Output Format For each test case, output a single integer representing the maximum gold that can be collected from a sequence of contiguous regions. Sample Input 2 5 1 5 1 3 2 3 2 3 5 Sample Output 12 10 Explanation In the first test case, the maximum sequence is the entire circle itself, collecting 1 + 5 + 1 + 3 + 2 = 12 units of gold. In the second test case, the maximum sequence is also the entire circle, collecting 2 + 3 + 5 = 10 units of gold.","solution":"def max_circular_subarray_sum(arr): def kadane(arr): max_end_here = arr[0] max_so_far = arr[0] for x in arr[1:]: max_end_here = max(x, max_end_here + x) max_so_far = max(max_so_far, max_end_here) return max_so_far max_kadane = kadane(arr) if max_kadane < 0: return max_kadane max_wrap = 0 for i in range(len(arr)): max_wrap += arr[i] arr[i] = -arr[i] max_wrap += kadane(arr) return max(max_wrap, max_kadane) def max_gold_collected(test_cases): results = [] for test in test_cases: M, gold = test results.append(max_circular_subarray_sum(gold)) return results"},{"question":"# Reverse Words in a String Write a function that takes a string as input and returns the string with each word reversed, while maintaining the original order of the words. Description A word is defined as a sequence of characters separated by whitespace or punctuation (comma, period, etc.). For the purpose of this task, observe the following rules: - Words should only be reversed. Their order should remain the same. - Punctuation attached to a word should remain attached, and only the word part should be reversed. - Whitespace between words should be preserved. # Examples Given the input: - `\\"Hello, world!\\"` The expected output would be: - `\\"olleH, dlrow!\\"` Given the input: - `\\"This is a test.\\"` The expected output would be: - `\\"sihT si a tset.\\"` Additional Information - Consider all punctuation characters to be: `. , ; : ! ?` - All input strings are non-empty and contain only letters, punctuation as specified, and whitespace. There are no numbers or other special characters. - Do not use any inbuilt string manipulation functions. The function should handle basic error checking for edge cases, such as input with no words. Input Format - A single line of input that represents the string to be processed. Output Format - A single line of output that represents the string with each word reversed. Constraints - The length of the input string should not exceed 1000 characters.","solution":"def reverse_words_in_string(s): Returns the string with each word reversed while maintaining the original order of the words. import re # This regular expression will help to identify words while keeping punctuation attached correctly. words_with_punctuation = re.findall(r\'bw+b[.,;:!?]*\', s) reversed_words = [\'\'.join(reversed(word[:-1])) + word[-1] if word[-1] in \'.,;:!?\' else \'\'.join(reversed(word)) for word in words_with_punctuation] # re.split will help to split the string into delimiters (whitespaces and punctuations) and words split_strings = re.split(r\'(bw+b[.,;:!?]*)\', s) # Filtering out empty strings from split_strings split_strings = [item for item in split_strings if item != \'\'] # Replacing each word in split_strings with the reversed_words index = 0 for i, part in enumerate(split_strings): if part in words_with_punctuation: split_strings[i] = reversed_words[index] index += 1 # Joining the list into final processed string return \\"\\".join(split_strings)"},{"question":"Design a function that calculates the minimum value of the equation g(x) = a cdot cos(x) + b cdot sin(x) over the range -pi leq x leq pi`. ------Input:------ - The first line contains an integer T, the number of test cases. - Each test case consists of a single line containing the real numbers a and b. ------Output:------ For each test case, output the minimum value of g(x) over the given range. An absolute error of 10^{-6} is allowed. ------Constraints------ - 1 leq T leq 100000 - -100 leq a, b leq 100 ------Sample Input:------ 2 3 4 -5 2 ------Sample Output:------ -5.000000 -5.385165","solution":"import math def min_g(T, test_cases): results = [] for i in range(T): a, b = test_cases[i] minimum_value = -math.sqrt(a**2 + b**2) results.append(minimum_value) return results def format_output(results): return [f\\"{res:.6f}\\" for res in results]"},{"question":"Design a function `caesarCipher()` that takes a string and a shift value, and returns the string encrypted using the Caesar Cipher technique. A few examples: ``` caesarCipher(\\"Hello, World!\\", 3) == \\"Khoor, Zruog!\\" caesarCipher(\\"abcXYZ\\", 2) == \\"cdeZAB\\" caesarCipher(\\"The quick brown fox jumps over the lazy dog\\", 5) == \\"Ymj vznhp gwtbs ktc ozrux tajw ymj qfed itl\\" ``` Note: The function should preserve the case of the original letters and non-alphabet characters should remain unchanged. The shift value can be positive or negative.","solution":"def caesarCipher(text, shift): Encrypts the text using Caesar Cipher with the given shift value. encrypted_text = [] for char in text: if char.isalpha(): # Check if the character is a letter shift_base = ord(\'A\') if char.isupper() else ord(\'a\') new_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) encrypted_text.append(new_char) else: encrypted_text.append(char) return \'\'.join(encrypted_text)"},{"question":"You are given an integer N and a sequence of N distinct integers. You need to determine if there exists a subsequence of length 3 that is strictly increasing. -----Input----- The first line of input contains a single integer N (3 ≤ N ≤ 1000). The second line contains N distinct space-separated integers (1 ≤ a_i ≤ 10000). -----Output----- Output \\"YES\\" if there exists a subsequence of length 3 that is strictly increasing, otherwise output \\"NO\\". -----Examples----- Input 5 1 2 3 4 5 Output YES Input 4 5 4 3 2 Output NO Input 6 5 1 6 2 4 3 Output YES -----Note----- In the first example, the subsequence [1, 2, 3] is strictly increasing. In the second example, no three numbers can form a strictly increasing subsequence. In the third example, the subsequence [1, 2, 4] is strictly increasing.","solution":"def has_increasing_subsequence_length_3(N, sequence): Determines if there exists a subsequence of length 3 that is strictly increasing. Args: N (int): The number of elements in the sequence. sequence (list of int): The sequence of distinct integers. Returns: str: \\"YES\\" if there exists a strictly increasing subsequence of length 3, otherwise \\"NO\\". if N < 3: return \\"NO\\" first = float(\'inf\') second = float(\'inf\') for num in sequence: if num <= first: first = num elif num <= second: second = num else: return \\"YES\\" return \\"NO\\""},{"question":"Matrix Diagonal Sum Write a function that takes a square matrix (a list of lists) as input and returns the sum of the main diagonal elements as well as the sum of the secondary diagonal elements. The main diagonal (or primary diagonal) of a matrix (elements from the top left to the bottom right) contains the elements `matrix[i][i]` where `i` is the index of the row (and column). The secondary diagonal (elements from top right to bottom left) contains the elements `matrix[i][n - 1 - i]` where `n` is the total number of rows (or columns) in the matrix. The matrix will always be non-empty and square (i.e., the number of rows will be equal to the number of columns). # Example Usage ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] result = matrix_diagonal_sum(matrix) print(result) # Output should be (15, 15) ``` # Input - A square matrix (list of lists) with integers # Output - A tuple containing two integers: the sum of the main diagonal and the sum of the secondary diagonal # Function Signature `def matrix_diagonal_sum(matrix: List[List[int]]) -> Tuple[int, int]:` # Constraints - 1 <= len(matrix) <= 100 - -100 <= matrix[i][j] <= 100 Implement the function with the given signature and constraints.","solution":"from typing import List, Tuple def matrix_diagonal_sum(matrix: List[List[int]]) -> Tuple[int, int]: Returns the sum of the main diagonal and secondary diagonal of a square matrix. Parameters: matrix (List[List[int]]): A square matrix (list of lists) with integers Returns: Tuple[int, int]: A tuple containing two integers: the sum of the main diagonal and the sum of the secondary diagonal n = len(matrix) main_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): main_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n - 1 - i] return (main_diagonal_sum, secondary_diagonal_sum)"},{"question":"Given a sequence of words, we want to find the word that appears most frequently in the given list. If multiple words have the same frequency, return the one which comes first in lexicographical order. Input Format There will be two lines of input: 1. An integer textbf{n} - the number of words in the list. 2. A list of textbf{n} words separated by spaces. Constraints 1le nle 1000 Each word will consist of lowercase English letters, and will not exceed 20 characters in length. Output Format Output the word that appears most frequently in the list. If multiple words have the same frequency, output the one which comes first in lexicographical order. Sample Input 10 apple banana apple orange banana apple kiwi kiwi kiwi orange Sample Output apple Explanation The word \'apple\' appears 3 times which is more frequent than any other word. Thus it is printed as the output.","solution":"def most_frequent_word(n, words): Returns the word that appears most frequently in the list of words. If multiple words have the same frequency, returns the one that comes first in lexicographical order. from collections import Counter word_count = Counter(words) max_count = max(word_count.values()) # Filter words with the maximum frequency max_words = [word for word, count in word_count.items() if count == max_count] # Return the lexicographically smallest word among them return min(max_words)"},{"question":"John has recently started learning about permutations and cyclic shifts. He is interested in using cyclic shifts to generate various permutations of integers. A cyclic shift is an operation in which the elements of the array are shifted to the right, and the last element is moved to the first position. For example, if the array is [1, 2, 3], a cyclic shift would result in [3, 1, 2]. Given an integer array of length n, help John find the smallest permutation of the array that can be obtained by performing one or more cyclic shifts. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the size of the array. The second line contains n integers ai (1 ≤ ai ≤ 10^9) — elements of the array. Output Print the smallest permutation of the array that can be obtained by performing one or more cyclic shifts. Examples Input 4 3 1 2 4 Output 1 2 4 3 Input 5 5 4 3 2 1 Output 1 5 4 3 2","solution":"def smallest_permutation_by_cyclic_shift(n, arr): min_perm = arr for i in range(n): arr = arr[1:] + arr[:1] if arr < min_perm: min_perm = arr return min_perm"},{"question":"A game developer is working on a feature that involves alternating characters in a string. Given a string, he wants to check if the characters in the string alternate, i.e., no two consecutive characters in the string are the same. Write a program that checks if the given string meets this criterion. Input First line of input contains T, denoting the number of test cases. Each test case consists of a single line containing a string s. Output For each test case, print \\"YES\\" if the characters in the string alternate, and \\"NO\\" otherwise. Constraints 1 ≤ T ≤ 1000 1 ≤ |s| ≤ 10000 The string contains only lower case letters. SAMPLE INPUT 3 abab aabb abcdefg SAMPLE OUTPUT YES NO YES","solution":"def check_alternating_strings(T, strings): def is_alternating(s): Returns \'YES\' if the string s has no two consecutive characters that are the same, otherwise \'NO\'. for i in range(1, len(s)): if s[i] == s[i - 1]: return \\"NO\\" return \\"YES\\" results = [] for s in strings: results.append(is_alternating(s)) return results"},{"question":"A new social media company is planning to develop a feature to find the trending topics. They define a trending topic as a sequence of hashtags that appear together frequently in user posts. The company uses a sliding window approach to analyze the hashtags. Given a list of integers representing the timestamped hashtag appearances and an integer `k` representing the length of the sliding window, they want to determine the most frequent hashtag in each window of size `k`. If there are multiple hashtags with the same maximum frequency, the lexicographically smallest hashtag should be chosen. # Input The first line contains an integer `n` (1 ≤ n ≤ 100,000) representing the number of hashtags that appear in the posts. The second line contains `n` space-separated integers where each integer represents a hashtag with the constraint (0 ≤ hashtag value ≤ 100,000). The third line contains an integer `k` (1 ≤ k ≤ n) representing the size of the sliding window. # Output Print `n - k + 1` space-separated integers where each integer is the most frequent hashtag in that window. If there are multiple hashtags with the same frequency in a window, print the lexicographically smallest one. # Examples Input 10 3 3 1 2 2 2 1 3 3 3 3 Output 3 1 2 2 2 2 3 3 Explanation - For the first window `[3, 3, 1]`, hashtag `3` is the most frequent. - For the second window `[3, 1, 2]`, hashtags `3`, `1`, and `2` all appear once, so `1` (the smallest) is chosen. - For the third window `[1, 2, 2]`, hashtag `2` is the most frequent. - For the fourth window `[2, 2, 2]`, hashtag `2` is the most frequent. - For the fifth window `[2, 2, 1]`, hashtag `2` is the most frequent. - For the sixth window `[2, 1, 3]`, hashtags `1`, `2`, and `3` all appear once, so `1` (the smallest) is chosen. - For the seventh window `[1, 3, 3]`, hashtag `3` is the most frequent.","solution":"from collections import Counter def find_trending_hashtags(n, hashtags, k): result = [] current_window_counter = Counter(hashtags[:k]) def most_frequent_hashtag(counter): max_count = max(counter.values()) candidates = [hashtag for hashtag, count in counter.items() if count == max_count] return min(candidates) result.append(most_frequent_hashtag(current_window_counter)) for i in range(k, n): current_window_counter[hashtags[i - k]] -= 1 if current_window_counter[hashtags[i - k]] == 0: del current_window_counter[hashtags[i - k]] current_window_counter[hashtags[i]] += 1 result.append(most_frequent_hashtag(current_window_counter)) return result"},{"question":"You are given an array of integers and a single integer `target`. Determine whether any two numbers in the array add up to the `target`. If there are such two numbers, return their indices in increasing order; otherwise, return `[-1, -1]`. -----Constraints----- - The array will have between 2 and 1000 integers. - Each integer in the array can be between -1000 and 1000. - The `target` integer can be between -2000 and 2000. -----Input----- Input is given from Standard Input in the following format: - The first line contains the integer `target`. - The second line contains the space-separated integers of the array. -----Output----- Print the indices of the two numbers that add up to `target` in increasing order. If no such numbers exist, print `-1 -1`. -----Sample Input----- 9 2 7 11 15 -----Sample Output----- 0 1 - The numbers at indices 0 and 1 add up to 9: 2 + 7 = 9. -----Sample Input----- 6 3 2 4 -----Sample Output----- 1 2 - The numbers at indices 1 and 2 add up to 6: 2 + 4 = 6. -----Sample Input----- 10 1 2 3 4 5 -----Sample Output----- -1 -1 - There are no two numbers in the array that add up to the target 10.","solution":"def find_two_sum_indices(arr, target): Returns the indices of the two numbers that add up to the target. If no such numbers exist, returns [-1, -1]. num_to_index = {} for index, num in enumerate(arr): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return [-1, -1]"},{"question":"You\'re working on a new project that involves creating patterns of visible ASCII characters within a grid. Specifically, you want to generate a grid consisting of layers of concentric rectangles, each one formed by an asterisk (*) character. Each rectangle should be centered within the grid, and the spacing between consecutive rectangles should be one character wide. Given an integer `n` representing the size of the grid (the grid is of size `n x n`), where `n` is always an odd number, you will generate this pattern and return it as a list of strings. Each string in the list represents a single row of the grid. Here\'s an example of how the output grid should look for different values of `n`: ``` n = 5 ***** * * * * * * * * * ***** n = 7 ******* * * * *** * * * * * * *** * * * ******* n = 9 ********* * * * ***** * * * * * * * * * * * * * * * ***** * * * ********* ``` Write a function `generate_pattern` that takes an integer `n` as its argument and returns the desired pattern as a list of strings. ```python def generate_pattern(n: int) -> list: # your code goes here ``` Please ensure the function works correctly for different values of odd `n` within a reasonable range (e.g., 1 ≤ n ≤ 49).","solution":"def generate_pattern(n: int) -> list: Generates a grid with layers of concentric rectangles formed by asterisks. Parameters: n (int): An odd integer representing the size of the grid (n x n). Returns: list: A list of strings, where each string represents a row of the grid. pattern = [[\' \' for _ in range(n)] for _ in range(n)] for layer in range(0, n // 2 + 1, 2): for i in range(layer, n - layer): pattern[layer][i] = \'*\' pattern[n - layer - 1][i] = \'*\' pattern[i][layer] = \'*\' pattern[i][n - layer - 1] = \'*\' return [\'\'.join(row) for row in pattern]"},{"question":"Compute the factorial of N. -----Constraints----- - 1 leq N leq 20 - The value of N is an integer. -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the factorial of N as an integer. -----Sample Input----- 5 -----Sample Output----- 120 We have 5! = 5 times 4 times 3 times 2 times 1 = 120.","solution":"def factorial(N): Calculate the factorial of an integer N. if N == 0 or N == 1: return 1 result = 1 for i in range(2, N+1): result *= i return result"},{"question":"A city is constructing a network of roads to connect some important locations such as hospitals, schools, and police stations. Each important location must be connected by a road directly or indirectly to every other location. To minimize costs, the city planners want to determine the minimum total length of roads required to achieve this connectivity. You are given a list of potential roads, each of which connects two locations and has a specific length. Your task is to find the minimum total length of roads required to connect all the important locations. If it is not possible to connect all locations, return -1. -----Input----- The first line of input contains two integers n and m (1 leq n leq 1000, 0 leq m leq 10000), where n is the number of important locations and m is the number of potential roads. The next m lines each contain three integers u, v, and w (1 leq u, v leq n, u neq v, 1 leq w leq 10^6), which represent a road between locations u and v with a length of w. You may assume that there are no duplicate roads. -----Output----- Print a single integer: the minimum total length of roads required to connect all locations. If it is not possible to connect all locations, print -1. -----Examples----- Sample Input 1: 4 5 1 2 1 1 3 4 1 4 3 2 3 2 3 4 3 Sample Output 1: 6 Sample Input 2: 4 2 1 2 3 3 4 5 Sample Output 2: -1","solution":"def find_min_road_length(n, m, roads): Find the minimum total length of roads required to connect all locations. If not possible, return -1. :param n: int, number of locations :param m: int, number of potential roads :param roads: list of tuples (u, v, w) representing roads with their lengths :return: int, minimum total length of roads or -1 if not possible if n == 1: # If there\'s only one location, no roads are needed return 0 parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX roads.sort(key=lambda x: x[2]) total_length = 0 edges_used = 0 for u, v, w in roads: if find(u) != find(v): union(u, v) total_length += w edges_used += 1 if edges_used == n - 1: break roots = set(find(x) for x in range(1, n + 1)) if len(roots) == 1: return total_length else: return -1"},{"question":"Farmer John owns a rectangular farm of size n x m, divided into a grid of 1x1 units. Each cell in the farm can either be empty or contain an obstacle. He wants to move his tractor from the top-left corner (1, 1) to the bottom-right corner (n, m). However, the tractor can only move to adjacent cells (up, down, left, right) that are not obstructed. Given the farm\'s layout, calculate the minimum number of moves required to get the tractor from the top-left to the bottom-right. If it is not possible to reach the destination, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 500) — the dimensions of the grid. Each of the next n lines contains m characters, describing the farm layout. A character can be \'.\' indicating an empty cell, or \'#\' indicating an obstacle. Output Print the minimum number of moves required to get from the top-left cell to the bottom-right cell. If it’s not possible, print -1. Examples Input 5 6 #..#.# .#.# #... #....# Output -1 Input 4 4 ..#. .. .#.. .... Output 6 Note In the first example, there\'s no valid path from the top-left corner to the bottom-right corner; hence, the output is -1. In the second example, one possible shortest path is right, right, down, down, right, down, with a total of 6 moves.","solution":"from collections import deque def min_moves_to_reach_farm_bottom_right(n, m, farm): if farm[0][0] == \'#\' or farm[n-1][m-1] == \'#\': return -1 # if start or end is blocked, no path is possible # Direction vectors for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() # If we\'ve reached the bottom-right corner if r == n - 1 and c == m - 1: return dist # Explore all four directions for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and farm[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) # If no path found return -1 return -1 # Example usage if __name__ == \\"__main__\\": n, m = map(int, input().split()) farm = [input().strip() for _ in range(n)] print(min_moves_to_reach_farm_bottom_right(n, m, farm))"},{"question":"Given an array A[] of size N which contains elements from 1 to N (both inclusive and sorted), and a series of M operations which are either \'ADD X Y\' or \'MULTIPLY X Y\', perform these operations sequentially and determine the final value at index i after all operations. - \'ADD X Y\' operation will add the number Y to element A[X]. - \'MULTIPLY X Y\' operation will multiply the element A[X] by Y. Initially, the elements of A[] are {1, 2, 3, ..., N}. Input: N = 4, M = 3 operations[] = {{\'ADD\', 2, 3}, {\'MULTIPLY\', 1, 4}, {\'ADD\', 3, 2}} Output: A = {1, 5, 5, 4} Explanation: 1. After ADD 2 3, A[2] = 2 + 3 → A = {1, 5, 3, 4} 2. After MULTIPLY 1 4, A[1] = 1 * 4 → A = {4, 5, 3, 4} 3. After ADD 3 2, A[3] = 3 + 2 → A = {4, 5, 5, 4} Your Task: You don\'t need to read input or print anything. Your task is to complete the function processOperations() which takes an integer array A[], an integer N, a list of tuples operations[] of size M, and modifies the array A[] based on the operations. Expected Time Complexity: O(M) Expected Auxiliary Space: O(1) Constraints: 1 <= N, M <= 100","solution":"def processOperations(N, operations): Processes a series of \'ADD\' and \'MULTIPLY\' operations on an array of size N. :param N: int - Size of the array, elements A[i] initialized from 1 to N. :param operations: List[Tuple[str, int, int]] - The operations to be performed. :return: List[int] - The array after all operations are performed. # Initialize the array A with values from 1 to N A = list(range(1, N + 1)) # Iterate through the list of operations for operation in operations: op, X, Y = operation if op == \'ADD\': A[X - 1] += Y elif op == \'MULTIPLY\': A[X - 1] *= Y # Return the final array A after performing all operations return A"},{"question":"Statement: You are organizing a baking competition and you need to keep track of the scores of each participant. You decided to calculate the average score for each participant and determine who has won the competition based on the highest average score. If there is a tie, the participant with the smallest ID number wins. How to evaluate the winner? Each participant will submit several cakes for the competition, and each cake will be scored separately. The average score of a participant is the total of their scores divided by the number of cakes they submit. Input: The first line of input contains an integer N, the number of participants. The next N lines each contain: - A participant\'s ID number (an integer) - Followed by a sequence of integers representing the scores of the cakes they submitted. Each participant\'s scores are space-separated integers, and there is no limit to the number of cakes a participant can submit. Output: A single line containing the ID of the participant with the highest average score. If there is a tie, print the smallest ID. Constraints: 1 ≤ N ≤ 100 1 ≤ scores ≤ 100 1 ≤ ID number ≤ 1000 SAMPLE INPUT 3 101 88 92 100 102 90 85 92 103 95 94 93 SAMPLE OUTPUT 103 Explanation In the given sample input: - Participant 101 has scores [88, 92, 100], average score = (88 + 92 + 100) / 3 = 93.33 - Participant 102 has scores [90, 85, 92], average score = (90 + 85 + 92) / 3 = 89 - Participant 103 has scores [95, 94, 93], average score = (95 + 94 + 93) / 3 = 94 So, the participant with the highest average score is 103.","solution":"def find_winner(N, participants): Determines the participant with the highest average score. Args: N (int): Number of participants. participants (list of tuples): Each tuple contains a participant\'s ID and a list of their scores. Returns: int: ID of the participant with the highest average score. max_avg_score = -1 winner_id = float(\'inf\') for participant in participants: participant_id, *scores = participant avg_score = sum(scores) / len(scores) if (avg_score > max_avg_score) or (avg_score == max_avg_score and participant_id < winner_id): max_avg_score = avg_score winner_id = participant_id return winner_id"},{"question":"You are given a list of daily temperatures for a month. Your task is to compute the number of days until a warmer temperature for every day in the list. If there is no future day with a warmer temperature, the answer for that day should be 0. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of days in the list. - The second line contains n space-separated integers t1, t2, ..., tn (-100 ≤ ti ≤ 100) — the daily temperatures. Output: - Print a line containing n space-separated integers, where the i-th integer is the number of days until a warmer temperature. If there is no such day, the value should be 0. Example: Input: 8 30 40 50 60 70 80 90 100 Output: 1 1 1 1 1 1 1 0 Input: 8 73 74 75 71 69 72 76 73 Output: 1 1 4 2 1 1 0 0","solution":"def daily_temperatures(temperatures): Given a list of daily temperatures, this function returns a list of numbers where each number represents the number of days to wait until a warmer temperature. If there is no future day with a warmer temperature, the value is 0. n = len(temperatures) answer = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: last = stack.pop() answer[last] = i - last stack.append(i) return answer"},{"question":"You are given an array of integers, where each element represents the height of a tree. You can cut down any tree to the ground, but cutting down a tree costs its height in the units of effort. You need to cut down some of the trees so that there is no more than one tree of any height left in the array. Your task is to find the minimum total effort required to achieve this goal. -----Input----- The first line of input contains a single integer n (1 le n le 100000) – the number of trees. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), representing the heights of the trees. -----Output----- Print a single integer – the minimum total effort required to ensure no height repeats more than once in the array. -----Example----- Input 6 1 2 2 3 4 4 Output 6 -----Note----- In the example, you can cut down one tree of height 2 and one tree of height 4. The total effort required is 2 + 4 = 6.","solution":"def minimum_effort_to_cut_trees(n, heights): Returns the minimum total effort required to ensure no height repeats more than once in the array. from collections import Counter height_counts = Counter(heights) effort = 0 for height, count in height_counts.items(): if count > 1: effort += (count - 1) * height return effort"},{"question":"In a certain country, there are N cities connected by M bidirectional roads. Each road has an associated travel time. There is a special city called the Capital. You are given the task to determine the shortest travel time from the Capital to all other cities. If a city cannot be reached from the Capital, return -1 for that city. -----Constraints----- - All input values are integers. - 1 ≤ N ≤ 100,000 - 1 ≤ M ≤ 200,000 - 1 ≤ travel time ≤ 1,000 - 1 ≤ Capital ≤ N -----Input----- The input is given from Standard Input in the following format: N M Capital u_1 v_1 travel_time_1 u_2 v_2 travel_time_2 : u_M v_M travel_time_M -----Output----- Print the shortest travel time from the Capital to every city from 1 to N (excluding the Capital and cities that are unreachable). If a city cannot be reached from the Capital, output -1 for that city. -----Sample Input----- 4 4 1 1 2 5 1 3 10 2 4 15 3 4 10 -----Sample Output----- 0 5 10 20 -----Explanation----- The shortest time from the Capital (city 1) to: - City 1 (Capital itself) is 0. - City 2 is 5 via the direct road. - City 3 is 10 via the direct road. - City 4 is 20 via cities 1 -> 3 -> 4.","solution":"import heapq import sys from collections import defaultdict def shortest_travel_time(N, M, Capital, roads): graph = defaultdict(list) # Creating the graph for u, v, travel_time in roads: graph[u].append((v, travel_time)) graph[v].append((u, travel_time)) # Dijkstra\'s algorithm heap = [(0, Capital)] distances = {i: float(\'inf\') for i in range(1, N+1)} distances[Capital] = 0 while heap: current_dist, current_city = heapq.heappop(heap) if current_dist > distances[current_city]: continue for neighbor, weight in graph[current_city]: distance = current_dist + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) result = [] for i in range(1, N+1): if i == Capital: result.append(0) else: result.append(distances[i] if distances[i] != float(\'inf\') else -1) return result"},{"question":"# Task Write a function that takes a list of integers and returns a list of the same integers but with duplicates removed and the order of their first appearance preserved. Do not use any libraries that provide this functionality directly. For example: ``` remove_duplicates([1, 2, 2, 3, 4, 4, 5]) ==> [1, 2, 3, 4, 5] remove_duplicates([5, 1, 5, 1, 3, 3, 2]) ==> [5, 1, 3, 2] remove_duplicates([7, 7, 7, 7, 7, 7]) ==> [7] remove_duplicates([]) ==> [] ``` The function should return an empty list if the input list is empty.","solution":"def remove_duplicates(lst): Removes duplicates from the input list while preserving the order of their first appearance. seen = set() result = [] for number in lst: if number not in seen: seen.add(number) result.append(number) return result"},{"question":"Given an integer array `nums`, where each element represents the number of steps you can move forward from that position, return the minimum number of jumps you need to reach the last element. You can assume that you can always reach the last element. Input The first line contains a single integer, N, representing the size of the array (1 ≤ N ≤ 105). The second line contains N integers representing the elements of the array (0 ≤ nums[i] ≤ 106). Output Print a single integer, the minimum number of jumps required to reach the last element. Examples Input 5 2 3 1 1 4 Output 2 Input 6 2 3 0 1 4 2 Output 3 Note For the first example, the minimum number of jumps to reach the last element is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. For the second example, the minimum number of jumps to reach the last element is 3. Jump 1 step from index 0 to 1, then 1 step to index 2, then 3 steps to the last index.","solution":"def min_jumps(nums): Returns the minimum number of jumps to reach the last element of the array. if len(nums) <= 1: return 0 jumps = 0 current_end = 0 farthest = 0 for i in range(len(nums) - 1): farthest = max(farthest, i + nums[i]) if i == current_end: jumps += 1 current_end = farthest if current_end >= len(nums) - 1: break return jumps"},{"question":"Write a function that takes a string as input and returns the length of the longest substring without repeating characters. Input Format A single line of input containing the string. Constraints 1 leq len(string) leq 1000 The input string contains only ASCII characters. Output Format Output the integer length of the longest substring without repeating characters. Sample Input abcabcbb Sample Output 3 Explanation The answer is \\"abc\\", with the length of 3.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) char_index_map = {} longest = start = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"A matrix is a rectangular array of numbers arranged in rows and columns. Two matrices are said to be equal if they have the same dimensions and all corresponding elements are equal. Given two matrices, determine if they are equal or not. Write a function `areMatricesEqual(matrix1: List[List[int]], matrix2: List[List[int]]) -> bool` that takes two matrices as input parameters and returns a boolean value indicating whether the matrices are equal or not. Example 1: Input: matrix1 = [[1, 2, 3], [4, 5, 6]] matrix2 = [[1, 2, 3], [4, 5, 6]] Output: True Explanation: Both matrices are 2x3 and all corresponding elements are equal. Example 2: Input: matrix1 = [[1, 2], [3, 4]] matrix2 = [[1, 2, 3], [4, 5, 6]] Output: False Explanation: The dimensions of the matrices are different. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `areMatricesEqual()` which takes two matrices (lists of lists of integers) as input and returns a boolean value. Expected Time Complexity: O(n*m) where n and m are the dimensions of the matrices. Expected Space Complexity: O(1) (no extra space is required other than the input data and output) Constraints: 1 <= matrix1.length, matrix2.length <= 1000 0 <= matrix1[i][j], matrix2[i][j] <= 10^6","solution":"from typing import List def areMatricesEqual(matrix1: List[List[int]], matrix2: List[List[int]]) -> bool: Determines whether two matrices are equal. Two matrices are equal if they have the same dimensions and all corresponding elements are equal. # Check if the number of rows are equal if len(matrix1) != len(matrix2): return False # Check if the number of columns in each row are equal for row1, row2 in zip(matrix1, matrix2): if len(row1) != len(row2): return False # Check if all corresponding elements are equal for row1, row2 in zip(matrix1, matrix2): for elem1, elem2 in zip(row1, row2): if elem1 != elem2: return False return True"},{"question":"You are given a string consisting of lowercase letters and you have to perform operations to convert it into a \\"balanced\\" string. A balanced string is defined as a string where each letter appears the same number of times. In one operation, you can pick any character of the string and replace it with any other lowercase letter. Your task is to determine the minimum number of operations required to convert the given string into a balanced string. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 1000) consisting of lowercase English letters only. -----Output----- For each test case, output the minimum number of operations required to convert the string into a balanced string. -----Example----- Input 3 aabb abcde aaabb Output 2 4 2 -----Explanation----- In the first test case, we have the string \\"aabb\\". We need to make sure that each character appears an equal number of times. We can change either \'a\' to \'b\' or \'b\' to \'a\' to make the string balanced, resulting in \\"aaaa\\" or \\"bbbb\\". The minimum number of operations required here is 2. In the second test case, the string \\"abcde\\" already consists of different characters but they don\'t appear an equal number of times. We can change all characters into any one element to make it balanced. Hence, the minimum number of operations required is 4. In the third test case, \\"aaabb\\", we need to balance the frequency of each character. We can change one \'a\' to \'b\' or two \'b\'s to \'a\' resulting in \\"aaaaa\\" or \\"bbbbb\\". The minimum number of operations required is 2.","solution":"from collections import Counter def min_operations_to_balance_string(s): counter = Counter(s) n = len(s) most_common_freq = max(counter.values()) return n - most_common_freq def balance_strings(t, strings): results = [] for s in strings: results.append(min_operations_to_balance_string(s)) return results"},{"question":"A group of scientists are working on a controlled experiment with a liquid that flows through a system of connected pipes. Each pipe can only flow liquid one way, and each section of the system must either drain into a collection container or another section. The scientists want to ensure that every drop of the liquid that enters the system is fully utilized and properly rerouted until it reaches a collection container. The pipes and sections can be described using a graph where sections are nodes and pipes are directed edges. Each scientist has a hypothetic starting point for the liquid, and they need to verify if from every starting section, it is possible to eventually reach a collection container. Your task is to write a program that determines if the liquid starting from a given section can reach any of the collection containers. -----Input----- - The first line contains two integers `n` and `m` (1 ≤ `n` ≤ 10^3, 1 ≤ `m` ≤ 10^4) — the number of sections and pipes in the system. - Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) representing a directed pipe from section `u` to section `v`. - The last line contains two integers `s` (1 ≤ s ≤ n) — the starting section, and `c` (1 ≤ c ≤ n) — the number of collection containers. - The next line contains `c` integers representing the collection containers. Each collection container is a section that can collect the liquid. -----Output----- Print a single line containing \\"YES\\" (without quotes) if the liquid can reach a collection container starting from section `s`, otherwise print \\"NO\\" (without quotes). -----Examples----- Input 5 6 1 2 1 3 2 4 3 4 4 5 3 5 1 2 4 5 Output YES Input 5 4 1 2 2 3 3 4 4 1 1 1 5 Output NO -----Note----- In the first case, from section `1`, there are paths `1 -> 2 -> 4`, `1 -> 3 -> 4`, or directly `1 -> 3 -> 5`, all reaching a collection container (either `4` or `5`). In the second case, there is no way to reach the collection container `5` from section `1`, as it is disconnected from the starting section.","solution":"def can_reach_collection_container(n, m, pipes, s, c, collections): from collections import deque, defaultdict graph = defaultdict(list) for u, v in pipes: graph[u].append(v) visited = [False] * (n + 1) queue = deque([s]) visited[s] = True while queue: current_section = queue.popleft() if current_section in collections: return \\"YES\\" for neighbor in graph[current_section]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return \\"NO\\""},{"question":"Write a `max_product` function that receives an array of integers and returns the maximum product that can be obtained by multiplying two distinct elements from the array. The array will contain at least two integers. Examples: ``` [1, 2, 3, 4] => 12 (4 * 3) [-10, -20, 5, 6] => 200 (-10 * -20) [0, 2, 3, -2] => 6 (2 * 3 or -2 * -3) ``` You can assume the input array will always have at least two elements.","solution":"def max_product(arr): Returns the maximum product that can be obtained by multiplying two distinct elements from the array. if len(arr) < 2: raise ValueError(\\"The array should contain at least two elements.\\") arr.sort() product1 = arr[-1] * arr[-2] product2 = arr[0] * arr[1] return max(product1, product2)"},{"question":"You are given a matrix of characters of size N x M. You need to determine if there\'s a path through the matrix that spells out the word \\"HELLO\\". You can start from any cell and you are allowed to move either horizontally, vertically, or diagonally in any of the 8 possible directions. The same cell cannot be used more than once in a single word formation. Input First line contains two integers N and M. Each of the next N lines contains M characters. Output Print \\"YES\\" if there exists at least one path that spells \\"HELLO\\", otherwise print \\"NO\\". Constraints 1 ≤ N, M ≤ 500 Each character in the matrix will be an uppercase English letter. SAMPLE INPUT 3 4 HAPE ELLO KXYZ SAMPLE OUTPUT YES Explanation There exists a path in the matrix forming the word \\"HELLO\\" starting from the cell (0, 0) [\'H\'] and following the direction down-right: (0, 0) -> (1, 1) -> (2, 2) -> (1, 3) -> (0, 2)","solution":"def is_path_for_hello(matrix, N, M): def dfs(x, y, idx): if idx == len(word): return True # Mark the current cell as visited temp = matrix[x][y] matrix[x][y] = None # Define the 8 possible directions directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and matrix[nx][ny] == word[idx]: if dfs(nx, ny, idx + 1): return True # Unmark the cell before returning to allow other paths matrix[x][y] = temp return False word = \\"HELLO\\" for i in range(N): for j in range(M): if matrix[i][j] == word[0]: # Start DFS when we find \'H\' if dfs(i, j, 1): return \\"YES\\" return \\"NO\\" # Function to read input and call is_path_for_hello def find_hello_path(N, M, grid): matrix = [list(row) for row in grid] return is_path_for_hello(matrix, N, M) # Example input and function call N, M = 3, 4 grid = [ \\"HAPE\\", \\"ELLO\\", \\"KXYZ\\" ] print(find_hello_path(N, M, grid)) # Output should be \\"YES\\""},{"question":"A famous mathematician once discovered a fascinating property related to prime numbers and palindromes. He defined a special type of number called a \\"Prime Palindrome Number\\" (PPN). A PPN is a number that satisfies both of the following conditions: 1. The number is a prime number. 2. The number is a palindrome. Your task is to find the smallest PPN which is greater than or equal to a given number N. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. A number is a palindrome if it reads the same backward as forward. For example, 131 is a palindrome, while 123 is not. Input The input consists of at most 1000 test cases. Each test case consists of a single integer N (1 ≤ N ≤ 10^7). The end of input is indicated by a line containing a single zero. Output For each test case, output the smallest PPN which is greater than or equal to N. Output each result on a new line. Sample Input 31 45 90 0 Sample Output 101 101 101 Example Input 4 31 45 90 0 Output 5 101 101 101","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): Helper function to check if a number is a palindrome. return str(n) == str(n)[::-1] def find_smallest_ppn_greater_equal(N): Function to find the smallest Prime Palindrome Number (PPN) which is greater than or equal to a given number N. while True: if is_prime(N) and is_palindrome(N): return N N += 1 def find_prime_palindromes(inputs): Processes a list of inputs to find the smallest PPN greater than or equal to each number in the list. outputs = [] for N in inputs: if N == 0: break outputs.append(find_smallest_ppn_greater_equal(N)) return outputs"},{"question":"You are given an array of integers, and your task is to modify it in-place so that all instances of a specified value appear at the end of the array, while preserving the order of the other elements. For example, consider the array [3, 1, 2, 3, 4, 3] and the specified value 3. The output should be [1, 2, 4, 3, 3, 3]. Example 1: Input: arr = [3, 1, 2, 3, 4, 3], val = 3 Output: [1, 2, 4, 3, 3, 3] Example 2: Input: arr = [1, 2, 3, 4, 2], val = 2 Output: [1, 3, 4, 2, 2] Example 3: Input: arr = [0, 1, 0, 3, 0], val = 0 Output: [1, 3, 0, 0, 0] Your Task: You don\'t need to read input or print anything. Your task is to complete the function moveValueToEnd() which takes an array of integers arr and an integer val as input parameters and modifies the array in-place as described. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= arr.length <= 10^4 -10^6 <= arr[i], val <= 10^6","solution":"def moveValueToEnd(arr, val): Move all instances of val to the end of the array in-place while preserving the order of the other elements. Parameters: arr (list): List of integers. val (int): The value to move to the end. n = len(arr) write_pos = 0 # Move all elements that are not `val` to the front. for i in range(n): if arr[i] != val: arr[write_pos] = arr[i] write_pos += 1 # Fill the remaining positions with `val`. for i in range(write_pos, n): arr[i] = val"},{"question":"You are given three integers X, Y, and Z. If the product of X and Y is greater than Z, print \\"Product is Greater\\"; otherwise, print \\"Product is Not Greater\\". -----Constraints----- - All values in input are integers. - 1 leq X, Y leq 10 - 1 leq Z leq 100 -----Input----- Input is given from Standard Input in the following format: X Y Z -----Output----- If the product of X and Y is greater than Z, print \\"Product is Greater\\"; otherwise, print \\"Product is Not Greater\\". -----Sample Input----- 2 5 8 -----Sample Output----- Product is Greater As the product of 2 and 5 is 10, which is greater than 8, \\"Product is Greater\\" should be printed.","solution":"def compare_product_to_z(x, y, z): Compares the product of x and y to z. If the product of x and y is greater than z, prints \\"Product is Greater\\". Otherwise, prints \\"Product is Not Greater\\". if x * y > z: return \\"Product is Greater\\" else: return \\"Product is Not Greater\\" # Example usage # x, y, z = map(int, input().split()) # print(compare_product_to_z(x, y, z))"},{"question":"The Oak Institute has developed a new data transmission protocol to ensure secure and efficient data transfer between two servers. During the data transmission process, the data is represented as a sequence of binary data packets. Each packet is composed of 0s and 1s. However, for the purpose of error detection and correction, the protocol requires the construction of an auxiliary array from the binary sequence where each element of the auxiliary array indicates the number of 1s up to that position in the binary sequence. If a segment of the binary data contains an equal number of 1s and 0s, it is considered balanced. Your task is to write a program to identify the maximum length of a contiguous subarray that is balanced. Input The first line contains a single integer n, the length of the binary sequence (1 ≤ n ≤ 105). The next line contains a binary sequence of length n. Output Print an integer representing the maximum length of a balanced contiguous subarray. If no balanced subarray exists, print 0. Example Input 8 11011010 Output 6 Explanation In the example, one of the longest balanced subarrays is from index 2 to 7 (0-based indexing) which is \\"101101\\" and has an equal number of 1s and 0s. Input 10 1010101010 Output 10 Explanation In this case, the entire binary sequence is balanced as it contains exactly five 1s and five 0s. Therefore, the maximum length of a balanced contiguous subarray is 10.","solution":"def max_balanced_subarray_length(n, binary_sequence): Returns the maximum length of a balanced contiguous subarray in the binary sequence. :param n: int, the length of the binary sequence :param binary_sequence: str, the binary sequence of length n :return: int, the maximum length of a balanced contiguous subarray # Dictionary to store the first occurrence of each prefix sum prefix_sum_indices = {0: -1} max_length = 0 current_sum = 0 for i in range(n): if binary_sequence[i] == \'1\': current_sum += 1 else: current_sum -= 1 if current_sum in prefix_sum_indices: max_length = max(max_length, i - prefix_sum_indices[current_sum]) else: prefix_sum_indices[current_sum] = i return max_length"},{"question":"Hey CodeNinja, ready for another coding challenge? This task will test your proficiency with basic array and string manipulations in Python. Let\'s dive in... Background We have a list of sentences, where each sentence consists of multiple words separated by a single space. Each word in the sentences is a mix of alphabets and numbers, but never starts or ends with a number. Your goal is to extract and sum all the digits from every word in the sentences. Task 1. Parse the list to get each word in the sentences. 2. Extract all digits from each word. 3. Sum the digits for each word. 4. Return a list where each element is the sum of the digits for the corresponding word in the input list. --- Example **Input:** ```python sentences = [\\"abc123xyz\\", \\"76hello89\\", \\"python3.8\\", \\"beta2gamma9\\"] ``` **Output:** ```python [6, 22, 11] ``` For each word in the input list: - \\"abc123xyz\\" has digits \'1\', \'2\', \'3\' which sum to 6. - \\"76hello89\\" has digits \'7\', \'6\', \'8\', \'9\' which sum to 30. - \\"python3.8\\" has digits \'3\', \'8\' which sum to 11. - \\"beta2gamma9\\" has digits \'2\', \'9\' which sum to 11. Constraints - You may assume that the input list will always contain at least one sentence. - Each word has at least one digit, and digits are continuous within each word. --- Note Try implementing the solution using Python\'s string and list methods without relying heavily on regex. Some references for Python: - [Python Official Documentation: String Methods](https://docs.python.org/3/library/stdtypes.html#string-methods) - [Python Official Documentation: Lists](https://docs.python.org/3/tutorial/datastructures.html) Good luck and happy coding!","solution":"def sum_of_digits_in_sentences(sentences): Given a list of sentences where each sentence consists of multiple words, this function extracts and sums all the digits from every word in the sentences and returns a list where each element is the sum of the digits for the corresponding word in the input list. :param sentences: List of sentences, each sentence is a string. :return: List of integers representing the sum of digits in each word. result = [] for sentence in sentences: word_sum = 0 for ch in sentence: if ch.isdigit(): word_sum += int(ch) result.append(word_sum) return result"},{"question":"A company stores employee information in the form of a nested object. Each employee has an `id`, `name`, and may have subordinates who are also employees. The employee structure is recursive, where each subordinate is a similar object containing `id`, `name`, and may have their own subordinates. You are tasked with writing a function that accepts the root employee object and returns a list of employee information. The employee information should be sorted in ascending order based on the `id`. Each element of the list should be a dictionary containing the `id` and the `name` of the employee. # Function Signature ```python def list_employees(employee: dict) -> list: ... ``` # Input - A dictionary `employee` representing the root employee. - The dictionary has the following keys: - `id` (integer): The employee\'s ID. - `name` (string): The employee\'s name. - `subordinates` (list): A list of subordinates\' dictionaries, each with the same structure as the root employee. # Output - A list of dictionaries, where each dictionary contains the `id` and the `name` of an employee. - The list should be sorted in ascending order by `id`. # Example ```python employee = { \\"id\\": 3, \\"name\\": \\"Dave\\", \\"subordinates\\": [ { \\"id\\": 1, \\"name\\": \\"Alice\\", \\"subordinates\\": [] }, { \\"id\\": 2, \\"name\\": \\"Bob\\", \\"subordinates\\": [ { \\"id\\": 4, \\"name\\": \\"Carol\\", \\"subordinates\\": [] } ] } ] } result = list_employees(employee) print(result) ``` # Expected Output ```python [ {\\"id\\": 1, \\"name\\": \\"Alice\\"}, {\\"id\\": 2, \\"name\\": \\"Bob\\"}, {\\"id\\": 3, \\"name\\": \\"Dave\\"}, {\\"id\\": 4, \\"name\\": \\"Carol\\"} ] ``` # Constraints - The total number of employees will not exceed 10^4. - Each employee will have a unique `id`. - The input structure will always be a valid nested dictionary representing employees. - The depth of nesting (number of levels of subordinates) will not exceed 100. # Notes - You can assume the input will be well-formed as described. - Maintain efficient use of memory and ensure your solution handles large data gracefully.","solution":"def list_employees(employee: dict) -> list: def traverse(employee, result): result.append({\\"id\\": employee[\\"id\\"], \\"name\\": employee[\\"name\\"]}) for subordinate in employee[\\"subordinates\\"]: traverse(subordinate, result) result = [] traverse(employee, result) result.sort(key=lambda x: x[\\"id\\"]) return result"},{"question":"Lily is a professional navigator, and she has been tasked with directing ships through a harbor. The harbor is represented as a grid with rows and columns. Each cell of the grid can either be navigable water (\'O\') or a rocky obstacle (\'X\'). A ship starts at the top-left cell (0, 0) and needs to reach the bottom-right cell (n-1, m-1). Ships can only move right or down to an adjacent cell. Lily wants to find out how many distinct paths exist from the top-left to bottom-right cell, but due to the presence of obstacles, not every path may be navigable. Write a program to help Lily determine the number of possible paths. Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the dimensions of the grid. - Each of the next `n` lines contains a string of length `m` consisting of characters \'O\' and \'X\', where \'O\' denotes navigable water and \'X\' denotes a rocky obstacle. Output - Output a single integer — the number of distinct paths from the top-left to the bottom-right cell. If there are no such paths, output 0. Examples Input 3 3 OOO OXO OOO Output 2 Input 2 2 OX OO Output 1 Input 2 2 OX XO Output 0","solution":"def number_of_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'X\' or grid[n-1][m-1] == \'X\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'O\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are given a positive integer number n. You want to find whether n can be represented as a product of two or more distinct integers, each of which is greater than 1. For example: - 6 can be represented as 2 times 3 - 30 can be represented as 2 times 3 times 5 - 10 can be represented as 2 times 5 - 7 cannot be represented as a product of two or more distinct integers greater than 1. If n can be represented as the product of two or more distinct integers greater than 1, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The only line of the test case contains one integer n (2 le n le 10^{18}). -----Output----- For each test case, if n can be represented as a product of two or more distinct integers greater than 1, print \\"YES\\". Otherwise, print \\"NO\\". -----Example----- Input 5 6 30 10 7 1 Output YES YES YES NO NO","solution":"def is_product_of_distinct_integers(n): Determine if n can be represented as the product of two or more distinct integers greater than 1. if n < 2: return \\"NO\\" divisors = set() for i in range(2, int(n ** 0.5) + 1): while n % i == 0: divisors.add(i) n //= i if n == 1 or len(divisors) > 1: break # If n > 1 then it must be a prime number greater than sqrt(n) and should be added if n > 1: divisors.add(n) return \\"YES\\" if len(divisors) > 1 else \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for n in test_cases: results.append(is_product_of_distinct_integers(n)) return results"},{"question":"A palindrome permutation is a string that, when rearranged, can form a palindrome. Given an input string, determine if any permutation of the string is a palindrome. For example, \\"civic\\" is already a palindrome, and \\"ivicc\\" can be rearranged to \\"civic\\", but \\"hello\\" cannot be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward, e.g., \\"racecar\\" or \\"aabbaa\\". -----Input----- The input is a single string `S` (1 ≤ |S| ≤ 1000), which consists of lowercase English letters only. -----Output----- Output \\"YES\\" if any permutation of the characters in the string can form a palindrome, otherwise output \\"NO\\". -----Examples----- Sample Input: civic Sample Output: YES Sample Input: ivicc Sample Output: YES Sample Input: hello Sample Output: NO","solution":"def can_form_palindrome(s): Determine if any permutation of the string can form a palindrome. Args: s (str): Input string. Returns: str: \\"YES\\" if any permutation can form a palindrome, otherwise \\"NO\\". from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd frequency if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Alicia has been working with matrices recently and stumbled upon a puzzle that deals with matrix manipulation. She knows you are proficient in programming and seeks your help to solve it. The puzzle is defined as follows: Given a mxn matrix of integers, you need to process Q queries. Each query is of the following types: 1) S x1 y1 x2 y2: Calculate the sum of all elements within the submatrix having (x1, y1) as the top-left corner and (x2, y2) as the bottom-right corner. 2) M x1 y1 x2 y2: Find the maximum element within the submatrix having (x1, y1) as the top-left corner and (x2, y2) as the bottom-right corner. -----Input----- The first line of the input contains two integers m and n denoting the dimensions of the matrix. The next m lines each contain n integers denoting the elements of the matrix. The next line contains a single integer Q, denoting the number of queries. The next Q lines each contain a query in the format S x1 y1 x2 y2 or M x1 y1 x2 y2. -----Output----- For each query, print the required output as mentioned above. -----Constraints----- - 1 ≤ m, n ≤ 1000 - 1 ≤ matrix[i][j] ≤ 10^9 - 1 ≤ Q ≤ 10000 - 1 ≤ x1 ≤ x2 ≤ m - 1 ≤ y1 ≤ y2 ≤ n -----Example----- Input: 3 3 1 2 3 4 5 6 7 8 9 5 S 1 1 2 2 M 1 1 3 3 S 2 2 3 3 M 1 2 2 3 S 1 1 3 3 Output: 12 9 9 6 45 Explanation: For the first query, S 1 1 2 2, the submatrix is: 1 2 4 5 The sum of its elements is 1 + 2 + 4 + 5 = 12. For the second query, M 1 1 3 3, the submatrix is the whole matrix: 1 2 3 4 5 6 7 8 9 The maximum element is 9. For the third query, S 2 2 3 3, the submatrix is: 5 6 8 9 The sum of its elements is 5 + 6 + 8 + 9 = 28. For the fourth query, M 1 2 2 3, the submatrix is: 2 3 5 6 The maximum element is 6. For the fifth query, S 1 1 3 3, the submatrix is again the whole matrix: 1 2 3 4 5 6 7 8 9 The sum of its elements is 45.","solution":"def process_queries(matrix, queries): def submatrix_sum(x1, y1, x2, y2): return sum(matrix[i][j] for i in range(x1-1, x2) for j in range(y1-1, y2)) def submatrix_max(x1, y1, x2, y2): return max(matrix[i][j] for i in range(x1-1, x2) for j in range(y1-1, y2)) results = [] for query in queries: type_query = query[0] x1, y1, x2, y2 = map(int, query[1:]) if type_query == \'S\': results.append(submatrix_sum(x1, y1, x2, y2)) elif type_query == \'M\': results.append(submatrix_max(x1, y1, x2, y2)) return results # Function to parse the input and call process_queries def main(input_data): input_lines = input_data.strip().split(\'n\') m, n = map(int, input_lines[0].split()) matrix = [] for i in range(1, m + 1): matrix.append(list(map(int, input_lines[i].split()))) Q = int(input_lines[m + 1]) queries = [input_lines[m + 2 + i].split() for i in range(Q)] results = process_queries(matrix, queries) for result in results: print(result) # Example usage input_data = 3 3 1 2 3 4 5 6 7 8 9 5 S 1 1 2 2 M 1 1 3 3 S 2 2 3 3 M 1 2 2 3 S 1 1 3 3 main(input_data)"},{"question":"You are given a grid with R rows and C columns. Each cell in the grid is either empty (denoted by \'.\') or contains a wall (denoted by \'#\'). You start at the top-left cell of the grid and want to reach the bottom-right cell. You can move up, down, left, or right, but you cannot pass through walls. Implement a function that determines the minimum number of steps required to get from the top-left cell to the bottom-right cell. -----Constraints----- - 1 ≤ R, C ≤ 1000 - The top-left cell and bottom-right cell are always empty - There is always at least one path from the top-left cell to the bottom-right cell -----Input----- Input is given from Standard Input in the following format: R C grid -----Output----- Print the minimum number of steps required to reach the bottom-right cell from the top-left cell. -----Sample Input----- 3 3 ... .#. ... -----Sample Output----- 4 In this example, the grid is: ... .#. ... The shortest path from the top-left cell to the bottom-right cell takes 4 steps: (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2).","solution":"from collections import deque def min_steps_to_reach_bottom_right(R, C, grid): Returns the minimum number of steps to get from the top-left cell to the bottom-right cell of the grid. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(0, 0, 0)]) # (row, col, steps) visited = [[False] * C for _ in range(R)] visited[0][0] = True while queue: r, c, steps = queue.popleft() if r == R - 1 and c == C - 1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and not visited[nr][nc] and grid[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, steps + 1)) return -1 # Should not reach here given the constraints if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() R, C = int(data[0]), int(data[1]) grid = [data[i + 2] for i in range(R)] print(min_steps_to_reach_bottom_right(R, C, grid))"},{"question":"Given an array of integers arr[] and an integer x, the task is to find the minimum positive integer greater than x that is missing from the array. If all integers greater than x are present in the array, return -1. Example 1: Input: arr[] = {1, 3, 6, 4, 1, 2} x = 3 Output: 5 Explanation: The numbers greater than 3 are 4 and 6. The smallest positive integer greater than 3 that is missing from the array is 5. Example 2: Input: arr[] = {1, 2, 3} x = 0 Output: 4 Explanation: All the integers greater than 0 are present in the array. So, the smallest positive integer greater than 0 that is missing from the array is 4. Example 3: Input: arr[] = {7, 8, 9, 11, 12} x = 7 Output: 10 Explanation: The numbers greater than 7 are 8, 9, 11, and 12. The smallest positive integer greater than 7 that is missing from the array is 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findMissingInteger()` which takes the array of integers arr[], its size n, and an integer x as input parameters and returns the minimum positive integer greater than x which is missing from arr[]. If all integers greater than x are present, return -1. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 1000 1 <= arr[i], x <= 10^6","solution":"def findMissingInteger(arr, x): Returns the minimum positive integer greater than x that is missing from the array arr. If all integers greater than x are present in the array, returns -1. lookup = set(arr) missing = x + 1 while missing in lookup: missing += 1 return missing if any(num > x for num in arr) else -1"},{"question":"A company is developing a new task scheduling system to optimize its operations. Tasks can be dependent on other tasks, meaning some tasks can only be started after the completion of other tasks they depend on. The goal is to determine the minimum number of days required to complete all tasks given the dependencies between them. The system uses the following rules: - Each task is represented by a unique integer from 1 to n. - Tasks can only be performed one at a time (i.e., one task per day). - A task can only be performed if all tasks it depends on have been completed. Given the number of tasks and the list of dependencies, your task is to determine the minimum number of days required to complete all tasks. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two parts: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of tasks and the number of dependencies, respectively. - The next m lines each contain two integers a and b (1 ≤ a, b ≤ n) indicating that task a must be completed before task b. Output For each test case, print one integer — the minimum number of days required to complete all tasks. If it is impossible to complete all the tasks due to cyclic dependencies, print -1 instead. Example Input 3 3 2 1 2 2 3 4 3 1 2 2 3 3 4 4 4 1 2 2 3 3 4 4 2 Output 3 4 -1","solution":"from collections import deque, defaultdict def find_minimum_days(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] edges = test_cases[i][1] # Create graph and in-degree array graph = defaultdict(list) in_degree = [0] * (n + 1) for a, b in edges: graph[a].append(b) in_degree[b] += 1 # Topological sort using Kahn\'s algorithm queue = deque() for j in range(1, n + 1): if in_degree[j] == 0: queue.append(j) count = 0 completed_tasks = 0 while queue: size = len(queue) for _ in range(size): task = queue.popleft() completed_tasks += 1 for neighbor in graph[task]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) count += 1 if completed_tasks == n: results.append(count) else: results.append(-1) return results"},{"question":"You are given an array of integers representing the prices of items in a store. Your task is to determine if there are two distinct items in the store such that their combined price is exactly equal to a given target value. If such a pair exists, return the indices of the two items in ascending order; otherwise, return an empty array. Example 1: Input: prices = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: The prices of the items at indices 0 and 1 add up to 9 (2 + 7). Example 2: Input: prices = [3, 2, 4], target = 6 Output: [1, 2] Explanation: The prices of the items at indices 1 and 2 add up to 6 (2 + 4). Example 3: Input: prices = [3, 3], target = 6 Output: [0, 1] Explanation: The prices of the items at indices 0 and 1 add up to 6 (3 + 3). Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPairWithTargetSum() which takes the prices array and the target value as input and returns the indices of the two items as described. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= prices.length <= 10^4 1 <= prices[i] <= 10^9 1 <= target <= 10^9","solution":"def findPairWithTargetSum(prices, target): Finds two distinct indices in prices where the prices at those indices sum up to the target value. :param prices: List of integers representing the prices of items in a store. :param target: Integer representing the target combined price. :return: List of two integers representing the indices of the items. seen = {} for i, price in enumerate(prices): complement = target - price if complement in seen: return [seen[complement], i] seen[price] = i return []"},{"question":"Joan is organizing a music playlist for her weekly workout sessions. She wants the playlist to have a specific structure to keep her workouts engaging. Let\'s define the rules: - The playlist can only contain two types of songs: fast-paced and slow-paced. - To maintain the balance, no more than 3 fast-paced songs should appear consecutively. - After each set of 3 fast-paced songs, there must be at least 1 slow-paced song before any other fast-paced song can be added. Given the number of fast-paced and slow-paced songs available, determine if it\'s possible to create a playlist that satisfies the above conditions. If possible, print \\"YES\\". Otherwise, print \\"NO\\". (Input – two integers f and s separated by space representing the count of fast-paced and slow-paced songs respectively) (Output – \\"YES\\" or \\"NO\\" indicating whether it is possible to create such a playlist) SAMPLE INPUT 7 3 SAMPLE OUTPUT YES","solution":"def is_playlist_feasible(f, s): Checks if it\'s possible to create a playlist with given number of fast-paced (f) and slow-paced (s) songs following the rules: - No more than 3 fast-paced songs should appear consecutively. - After each set of 3 fast-paced songs, there must be at least 1 slow-paced song before another fast-paced song. # Calculate the minimum number of slow-paced songs required required_slow_paced = (f - 1) // 3 if s >= required_slow_paced: return \\"YES\\" else: return \\"NO\\""},{"question":"A gardener wants to plant flowers in a rectangular garden that has a length of L and a width of W. She plans to plant flower beds on the border of the garden, each flower bed having a width of B feet. The flower beds will cover the entire perimeter of the garden. Calculate the area of the garden that will remain available for planting grass after the flower beds have been planted. -----Constraints----- - 1 ≤ L, W ≤ 100 - 1 ≤ B < min(L, W) - L, W, and B are integers. -----Input----- Input is given from Standard Input in the following format: L W B -----Output----- Print the area of the garden that will remain available for planting grass. -----Sample Input----- 8 5 1 -----Sample Output----- 21 The garden has a length of 8 and a width of 5, with flower beds that are 1 foot wide all around. The inner rectangular area for planting grass will have a length of 6 and a width of 3, thus 6*3 = 18 square feet available for grass.","solution":"def remaining_grass_area(L, W, B): Calculate the remaining area for planting grass after accounting for the flower beds. Parameters: L (int): Length of the garden. W (int): Width of the garden. B (int): Width of the flower bed border. Returns: int: Remaining area for planting grass. if not (1 <= L <= 100 and 1 <= W <= 100 and 1 <= B < min(L, W)): raise ValueError(\\"Invalid input constraints\\") inner_length = L - 2 * B inner_width = W - 2 * B return max(inner_length, 0) * max(inner_width, 0)"},{"question":"Write a function that takes a string containing a mix of letters and digits. The function should return a new string with all the digits sorted in non-decreasing order at the beginning, and the letters in their original order at the end of the string. Ignore any non-alphanumeric characters in the input string. Example: ```python sort_digits(\\"a1c3b2\\") > \\"123acb\\" sort_digits(\\"5z6y@\\") > \\"56zy\\" ```","solution":"def sort_digits(s): Returns a new string with all the digits sorted in non-decreasing order at the beginning, and the letters in their original order at the end of the string. Non-alphanumeric characters are ignored. Args: s (str): input string containing a mix of letters and digits. Returns: str: processed string with sorted digits and original order letters. digits = sorted(filter(str.isdigit, s)) letters = filter(str.isalpha, s) return \'\'.join(digits) + \'\'.join(letters)"},{"question":"You are given a single integer n. Your task is to calculate the sum of the squares of the first n natural numbers. For example: n = 3 then the sum of squares is 1^2 + 2^2 + 3^2 = 14 Input: A single integer n. Output: Print out the sum of squares of the first n natural numbers. Constraints: 1 ≤ n ≤ 1000000000 (10^9) Subtask 1: (50 points) 1 ≤ n ≤ 1000000 (10^6) Subtask 2: (50 points) Original Constraints Hint: Use a mathematical formula instead of a loop to compute the sum of squares. SAMPLE INPUT 1000000000 SAMPLE OUTPUT 333333333833333333500000000","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers using the mathematical formula. Formula: n * (n + 1) * (2n + 1) / 6 return n * (n + 1) * (2 * n + 1) // 6"},{"question":"Alice has a collection of N books, each with a unique ID ranging from 1 to N. In addition to the books, she also has M book covers, each associated with a specific book ID. Each cover can only be used on the book with the corresponding ID. Alice wants to pair as many books with their covers as possible, but due to space constraints, she can keep the paired books in sets of exactly K books together. Write a program to determine the maximum number of complete book-cover pairs she can keep, given the constraint on set size. ------ Input Format ------ - The first line contains T - the number of test cases. Then the test cases follow. - The first line of each test case contains three space-separated integers N, M, and K - the total number of books, the total number of covers, and the size of each set of paired books respectively. - The second line of each test case contains M space-separated integers representing the IDs of books that have corresponding covers. ------ Output Format ------ For each test case, output on one line the maximum number of complete book-cover pairs Alice can keep given the set size constraint. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{3} 0 ≤ M ≤ N 1 ≤ K ≤ N 1 ≤ ID_i ≤ N for all IDs given ------ Sample Input 1 ------ 3 5 3 2 1 2 3 4 1 4 4 6 5 3 1 2 3 4 6 ------ Sample Output 1 ------ 2 1 3 ------ Explanation 1 ------ - Test case 1: Alice has 3 covers for 5 books, specifically for books with IDs 1, 2, and 3. She can keep sets of exactly 2 paired books. Therefore, she can keep only 2 books paired with their covers. - Test case 2: Alice has 1 cover for 4 books, specifically for book with ID 4. Since the set size is 4, she can only keep 1 paired book. - Test case 3: Alice has 5 covers for 6 books, specifically for books with IDs 1, 2, 3, 4, and 6. She can keep sets of exactly 3 paired books. Therefore, she can keep 3 books paired with their covers.","solution":"def max_paired_books_sets(N, M, K, book_ids): Returns the maximum number of complete book-cover pairs Alice can keep given the set size constraint. # Number of pairs that can be formed num_pairs = min(N, M) # Number of pairs that can be grouped in sets of size K max_sets = num_pairs // K return max_sets * K def process_input_output(test_cases): Processes multiple test cases and returns the results. results = [] for case in test_cases: N, M, K, book_ids = case result = max_paired_books_sets(N, M, K, book_ids) results.append(result) return results"},{"question":"Given a set of three positive integers representing the side lengths of a triangle, determine if the triangle is a right-angled triangle. If it is a right-angled triangle, return the area of the triangle. If it is not a right-angled triangle, return a message indicating that it is not right-angled. ``` right_angled_area(3, 4, 5) --> 6.0 right_angled_area(6, 8, 10) --> 24.0 right_angled_area(3, 5, 7) --> \\"Not a right-angled triangle\\" ``` > Note: A right-angled triangle satisfies the Pythagorean theorem, a**2 + b**2 = c**2, where c is the hypotenuse (the longest side).","solution":"def right_angled_area(a, b, c): Determines if the triangle with sides a, b, and c is right-angled, and if so, returns its area. If not, returns a message indicating that it is not a right-angled triangle. sides = sorted([a, b, c]) if sides[0]**2 + sides[1]**2 == sides[2]**2: # If right-angled, calculate area return 0.5 * sides[0] * sides[1] else: return \\"Not a right-angled triangle\\""},{"question":"You have a square matrix filled with non-negative integers. Write a function to rotate the matrix 90 degrees clockwise. The function should take a 2D list (matrix) as an input and return a new 2D list representing the rotated matrix. For example: ```python def rotate_matrix(matrix): # Your implementation here # Examples: matrix1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix1) # Output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] matrix2 = [ [1, 2], [3, 4] ] rotate_matrix(matrix2) # Output: # [ # [3, 1], # [4, 2] # ] ``` Your task is to implement the function `rotate_matrix(matrix)`. Note that you should not modify the input matrix, but instead return a new 2D list representing the rotated matrix.","solution":"def rotate_matrix(matrix): Rotates the given square matrix 90 degrees clockwise. Args: matrix (list of list of int): A 2D list representing the square matrix. Returns: list of list of int: The rotated matrix. n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"A company wants to email their customers a weekly newsletter, but they want to ensure they do not send duplicate emails. Write a function `unique_emails()` that takes a list of email addresses and returns a list of unique email addresses, preserving the original order. ```python >>> emails = [\\"alice@example.com\\", \\"bob@example.net\\", \\"alice@example.com\\", \\"carol@example.org\\", \\"bob@example.net\\"] >>> unique_emails(emails) [\\"alice@example.com\\", \\"bob@example.net\\", \\"carol@example.org\\"] ``` The emails should be considered case-sensitive, meaning \\"Alice@example.com\\" and \\"alice@example.com\\" are different email addresses. Ensure the original order is maintained while removing duplicates.","solution":"def unique_emails(emails): Returns a list of unique email addresses, preserving the original order. seen = set() unique_list = [] for email in emails: if email not in seen: seen.add(email) unique_list.append(email) return unique_list"},{"question":"Given a directed graph with N nodes and M edges, each edge has a weight (positive integer). You are to find the single-source shortest path from the starting node to all other nodes using Dijkstra\'s algorithm. Input The first line contains two integers N (2 ≤ N ≤ 1000) and M (1 ≤ M ≤ 5000), the number of nodes and edges, respectively. The second line contains the index of the starting node S (1 ≤ S ≤ N). Each of the next M lines contains three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000), indicating there is a directed edge from node u to node v with weight w. Output Output N lines, the ith line should contain the shortest distance from node S to node i. If node i is not reachable from node S, output \\"INF\\" for that node instead. Example Input: 5 6 1 1 2 2 1 3 4 2 3 1 3 4 7 2 5 10 4 5 3 Output: 0 2 3 10 13","solution":"import heapq def dijkstra(n, m, s, edges): Finds the single-source shortest paths from node s to all other nodes using Dijkstra\'s algorithm. Parameters: n (int): number of nodes m (int): number of edges s (int): starting node index edges (list of tuples): list of edges where each edge is represented by a tuple (u, v, w) Returns: list: distances from node s to all other nodes (0-indexed with INF for unreachable nodes) graph = [[] for _ in range(n)] for u, v, w in edges: graph[u-1].append((w, v-1)) distances = [float(\'inf\')] * n distances[s-1] = 0 priority_queue = [(0, s-1)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for weight, neighbor in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [\'INF\' if dist == float(\'inf\') else dist for dist in distances]"},{"question":"Given an array of integers, the task is to find out the sum of elements which are not the maximum or the minimum element in the given array. Example 1: Input: N = 5 arr[] = {3, 1, 2, 5, 4} Output: 5 Explanation: The elements excluding the maximum (5) and minimum (1) are 3, 2, 4. Their sum is 5+4+3 = 12. Example 2: Input: N = 4 arr[] = {1, 2, 4, 3} Output: 5 Explanation: The elements excluding the maximum (4) and minimum (1) are 2 and 3. Their sum is 2+3=5. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumExcludingMinMax() which takes the integer array arr[] and its size N as inputs and returns the sum of elements which are neither the maximum nor the minimum elements. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1<=N<=10^{3} -10^6 <= arr[i] <= 10^6","solution":"def sumExcludingMinMax(arr, N): Returns the sum of elements excluding the maximum and minimum elements. Parameters: arr (list): List of integers. N (int): Size of the array. Returns: int: Sum of elements excluding the maximum and minimum elements. if N <= 2: return 0 # Not enough elements to exclude both min and max min_val = min(arr) max_val = max(arr) return sum(x for x in arr if x != min_val and x != max_val)"},{"question":"In a certain village, the light bulbs are connected in a peculiar way. There are n light bulbs arranged in a row, each of which can either be on or off. You are given the initial states of the bulbs in a binary string format where \'1\' signifies that the bulb is on and \'0\' signifies that the bulb is off. Your task is to find the minimum number of operations needed to make all the bulbs turn off. In one operation, you can choose any contiguous subsequence of bulbs and toggle each bulb in that subsequence (change ‘1’ to ‘0’ and ‘0’ to ‘1’). -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The next 2t lines contain the description of the test cases. The first line of each test case contains a single integer n (1 le n le 10^4) — the number of light bulbs. The second line of each test case contains a binary string of length n. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output a single integer — the minimum number of operations required to turn all the light bulbs off. -----Examples----- Input 3 5 11001 4 0000 6 101010 Output 2 0 3 -----Notes----- In the first test case, one possible solution is: 1. Toggle the first two bulbs: 00001 2. Toggle the last bulb: 00000 In the second test case, all bulbs are already off, so no operations are needed. In the third test case, one possible solution is: 1. Toggle the first bulb: 001010 2. Toggle the second and third bulbs: 000110 3. Toggle the fifth and sixth bulbs: 000000","solution":"def count_operations_to_turn_off_bulbs(t, test_cases): results = [] for case in test_cases: n, binary_string = case count = 0 i = 0 while i < n: if binary_string[i] == \'1\': while i < n and binary_string[i] == \'1\': i += 1 count += 1 i += 1 results.append(count) return results"},{"question":"A group of friends wants to share a meal in a restaurant and then split the bill. Each person will order one or more items from the menu, and the cost of each item is known. However, the restaurant has a specific discount policy: - If the total bill exceeds 100, they get a 10% discount on the entire bill. Write a function to calculate the amount each person has to pay after applying the discount, if applicable. The final amount for each person should be rounded to two decimal places. You will be given a dictionary where the keys are the names of the friends and the values are lists containing the prices of the items they ordered. Return a dictionary where the keys are the names of the friends and the values are the amounts they have to pay. # Examples: ```csharp Items.SharedBill(new Dictionary<string, List<decimal>> { {\\"Alice\\", new List<decimal> {30.12m, 20.45m}}, {\\"Bob\\", new List<decimal> {25.60m, 15.25m}}, {\\"Charlie\\", new List<decimal> {50.00m}} }) // => Dictionary<string, decimal> {{\\"Alice\\", 45.51m}, {\\"Bob\\", 36.77m}, {\\"Charlie\\", 45.00m}} Items.SharedBill(new Dictionary<string, List<decimal>> { {\\"Alice\\", new List<decimal> {35.12m}}, {\\"Bob\\", new List<decimal> {65.99m}} }) // => Dictionary<string, decimal> {{\\"Alice\\", 31.61m}, {\\"Bob\\", 59.39m}} Items.SharedBill(new Dictionary<string, List<decimal>> { {\\"Alice\\", new List<decimal> {10.00m}}, {\\"Bob\\", new List<decimal> {15.00m}}, {\\"Charlie\\", new List<decimal> {20.00m}} }) // => Dictionary<string, decimal> {{\\"Alice\\", 10.00m}, {\\"Bob\\", 15.00m}, {\\"Charlie\\", 20.00m}} ``` ```python def shared_bill(bill): # Implement this function to achieve the desired functionality pass shared_bill({ \\"Alice\\": [30.12, 20.45], \\"Bob\\": [25.60, 15.25], \\"Charlie\\": [50.00] }) # => {\\"Alice\\": 45.51, \\"Bob\\": 36.77, \\"Charlie\\": 45.00} shared_bill({ \\"Alice\\": [35.12], \\"Bob\\": [65.99] }) # => {\\"Alice\\": 31.61, \\"Bob\\": 59.39} shared_bill({ \\"Alice\\": [10.00], \\"Bob\\": [15.00], \\"Charlie\\": [20.00] }) # => {\\"Alice\\": 10.00, \\"Bob\\": 15.00, \\"Charlie\\": 20.00} ``` ```cpp std::map<std::string, std::vector<double>> bill = { {\\"Alice\\", {30.12, 20.45}}, {\\"Bob\\", {25.60, 15.25}}, {\\"Charlie\\", {50.00}} }; auto result = SplitBill(bill); // => std::map<std::string, double> {{\\"Alice\\", 45.51}, {\\"Bob\\", 36.77}, {\\"Charlie\\", 45.00}} std::map<std::string, std::vector<double>> bill = { {\\"Alice\\", {35.12}}, {\\"Bob\\", {65.99}} }; auto result = SplitBill(bill); // => std::map<std::string, double> {{\\"Alice\\", 31.61}, {\\"Bob\\", 59.39}} std::map<std::string, std::vector<double>> bill = { {\\"Alice\\", {10.00}}, {\\"Bob\\", {15.00}}, {\\"Charlie\\", {20.00}} }; auto result = SplitBill(bill); // => std::map<std::string, double> {{\\"Alice\\", 10.00}, {\\"Bob\\", 15.00}, {\\"Charlie\\", 20.00}} ```","solution":"def shared_bill(bill): Calculate the amount each person has to pay after applying the discount if applicable. total_amount = sum(sum(items) for items in bill.values()) discount = 0.0 if total_amount > 100: discount = total_amount * 0.10 discounted_total = total_amount - discount result = {} for person, items in bill.items(): person_total = sum(items) person_discounted_total = person_total - (person_total / total_amount) * discount result[person] = round(person_discounted_total, 2) return result"},{"question":"A certain toy robot moves on an infinite grid starting from the origin (0, 0). The robot can take a step in one of the four cardinal directions — up, down, left, or right — based on specified commands. The robot receives a string of commands where each character in the string represents a move direction: - \'U\' for moving up, - \'D\' for moving down, - \'L\' for moving left, - \'R\' for moving right. Write a function to determine if the robot returns to the origin after completing all its moves. For example, if the robot follows the move sequence \\"UD\\", it will return to the origin, but if it follows \\"LL\\", it will not. # Input A single line containing a string commands (1 ≤ |commands| ≤ 10^4). # Output Output \\"Yes\\" if the robot returns to the origin after all moves, otherwise \\"No\\". # Examples Input ``` UD ``` Output ``` Yes ``` Input ``` LL ``` Output ``` No ``` Input ``` URURDLDL ``` Output ``` Yes ``` Input ``` RRDD ``` Output ``` No ```","solution":"def does_robot_return(commands): Determines if the robot returns to the origin after completing all moves. Args: commands (str): The move commands for the robot. Returns: str: \\"Yes\\" if the robot returns to the origin, otherwise \\"No\\". x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return \\"Yes\\" if x == 0 and y == 0 else \\"No\\""},{"question":"You are developing a software for a smart cookbook that helps users keep track of their cooking ingredients and quantities. The cookbook starts with an empty list of ingredients. The user can perform the following operations: 1. Add an ingredient along with its quantity. 2. Update the quantity of an existing ingredient. 3. Query the quantity of a specific ingredient. Your task is to implement this functionality. Input Format The first line of input contains a single integer Q, the number of operations. The following Q lines describe each operation in one of the following formats: 1 ingredient_name quantity indicating that ``ingredient_name`` should be added with the given quantity. If the ingredient already exists, the quantity should be updated to the specified value. 2 ingredient_name quantity indicating that the quantity of ``ingredient_name`` should be increased by the specified amount. If the ingredient does not exist, add it with the given quantity. 3 ingredient_name indicating that the quantity of ``ingredient_name`` should be retrieved. Output Format For each operation of the form ``3 ingredient_name``, output a line with the current quantity of the specified ingredient. If the ingredient does not exist, output \\"ingredient_name does not exist\\". Constraints - 1 ≤ Q ≤ 100,000 - Ingredient names are unique strings up to 20 characters long. - Quantities are non-negative integers and at most 10,000. Sample Input 7 1 sugar 500 3 sugar 2 salt 300 3 salt 3 flour 2 sugar 200 3 sugar Sample Output 500 300 flour does not exist 700 Explanation Initially, the ingredient list is empty. After the first operation, sugar is added with a quantity of 500. The second operation queries the quantity of sugar, which is 500. The third operation adds salt with a quantity of 300. The fourth operation queries the quantity of salt, which is 300. The fifth operation queries the quantity of flour, which does not exist in the list. The sixth operation increases the quantity of sugar by 200, making it 700. The seventh operation queries the quantity of sugar again, which is now 700.","solution":"class SmartCookbook: def __init__(self): self.ingredients = {} def add_ingredient(self, name, quantity): Adds an ingredient with the specified quantity. If the ingredient already exists, update its quantity with the new value. self.ingredients[name] = quantity def update_quantity(self, name, quantity): Updates the quantity of the specified ingredient by adding the provided quantity. If the ingredient does not exist, add it with the given quantity. if name in self.ingredients: self.ingredients[name] += quantity else: self.ingredients[name] = quantity def query_quantity(self, name): Returns the quantity of the specified ingredient. if name in self.ingredients: return self.ingredients[name] else: return f\\"{name} does not exist\\""},{"question":"A famous online book store maintains a list of their available books along with their price and rating. A user can request the top \'k\' books based on different criteria. The criteria can be either based on price or rating. If it is based on price, the user wants the k cheapest books. If it is based on rating, the user wants the k highest-rated books. If two books have the same price or rating, they should be sorted alphabetically by their title. Your job is to write a program that will process these requests and return the list of books accordingly. The table below summarizes the type of requests: Criteria | Description --- | --- price | k cheapest books rating | k highest rated books Number of books m (1 ≤ m ≤ 1000) is given along with the details of each book, which includes title (string of non-space characters), price pi (0 ≤ pi ≤ 10000), and rating ri (0 ≤ ri ≤ 100). After that, \'n\' (1 ≤ n ≤ 100) queries are given consisting of criteria and k (1 ≤ k ≤ m). The input ends with two zeros. Input ``` m title1 price1 rating1 title2 price2 rating2 :: titlem pricem ratingm n criteria1 k1 criteria2 k2 :: criterian kn 0 0 ``` Output For each query, output the top \'k\' books in the required order, one book per line. Print an empty line between the results of different queries. Example Input ``` 5 HarryPotter 300 95 LordOfTheRings 500 97 ToKillAMockingbird 400 80 TheGreatGatsby 150 85 WarAndPeace 450 99 2 price 3 rating 2 0 0 ``` Output ``` TheGreatGatsby HarryPotter ToKillAMockingbird WarAndPeace LordOfTheRings ```","solution":"def get_top_k_books(books, queries): Given a list of books and queries, returns the top k books based on the specified criteria. Parameters: books (list of tuples): List of tuples where each tuple consists of (title, price, rating). queries (list of tuples): List of queries where each tuple consists of (criteria, k). Returns: list of lists: List of lists where each inner list contains titles of top k books for each query. results = [] for criteria, k in queries: if criteria == \'price\': sorted_books = sorted(books, key=lambda x: (x[1], x[0])) elif criteria == \'rating\': sorted_books = sorted(books, key=lambda x: (-x[2], x[0])) top_k_books = [book[0] for book in sorted_books[:k]] results.append(top_k_books) return results"},{"question":"Given a Binary Tree, your task is to calculate the product of all nodes that have both left and right children. Example 1: Input: 1 / 2 3 Output: 6 Explanation: Nodes with both children: 1, 2 Product = 1 * 2 = 2 Example 2: Input: 10 / 5 20 / / 4 6 15 25 / 7 Output: 1500 Explanation: Nodes with both children: 10, 5, 20 Product = 10 * 5 * 20 = 1000 Your Task: You don\'t need to read input or print anything. Your task is to complete the function productOfNodesWithTwoChildren() which takes the root node of the tree as input and returns the product of all nodes that have both left and right children. Expected Time Complexity: O(N). Expected Auxiliary Space: O(Height of the Tree). Constraints: 1<=Number of nodes<=10^{5} The values of the nodes are positive integers.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def productOfNodesWithTwoChildren(root): Returns the product of all nodes that have both left and right children. if not root: return 1 stack = [root] product = 1 found = False while stack: node = stack.pop() if node.left and node.right: product *= node.val found = True if node.right: stack.append(node.right) if node.left: stack.append(node.left) return product if found else 0"},{"question":"In the kingdom of Computania, there are N villages connected by various bidirectional roads forming an intricate road network. Each road has a certain positive integer length associated with it. The king has issued a decree to improve the kingdom’s connectivity by ensuring that there is at least one road between any two villages. However, maintaining roads is costly, so he wants to achieve this with the minimum total road length. The kingdom\'s Treasury has set a maximum limit on the total length of roads they can afford to maintain. Given the maximum allowable total length for the roads, help the king determine whether it is feasible to have all villages interconnected without exceeding this budget. # Constraints - 1 ≤ N ≤ 100000 - 1 ≤ M ≤ 100000 - 1 ≤ u, v ≤ N - 1 ≤ l(u, v) ≤ 1000 - 1 ≤ Budget ≤ 10^9 # Input - The first line contains the integers N, M, and Budget. - The next M lines each contain three integers u, v, and l(u, v) representing a road between villages u and v with length l(u, v). It is guaranteed that the road network is connected. # Output - Print \\"YES\\" if it is possible to interconnect all villages within the given budget, otherwise print \\"NO\\". # Sample Input 5 7 15 1 2 3 1 3 4 2 3 1 2 4 2 3 4 5 3 5 6 4 5 1 # Sample Output YES # Explanation By selecting the roads with lengths 3, 1, 2, and 1, we can connect all villages with a total length of 7, which is within the budget of 15.","solution":"class DisjointSet: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def can_connect_villages_within_budget(N, M, Budget, roads): edges = sorted(roads, key=lambda x: x[2]) ds = DisjointSet(N) total_length = 0 for u, v, length in edges: if ds.find(u - 1) != ds.find(v - 1): ds.union(u - 1, v - 1) total_length += length if total_length > Budget: return \\"NO\\" return \\"YES\\" if total_length <= Budget else \\"NO\\""},{"question":"Sarah is working on a complex system where she needs to manage requests at a server. Each request can either start a new process or terminate an existing one. Every request is characterized by a unique ID and a timestamp when the request was made. However, some requests may be duplicated and thus do not represent a new action. Sarah needs to process a sequence of requests and determine the maximum number of active processes at any point in time. A process is active if it has been started and not yet terminated. Sarah is given a list of requests. Each request is represented as a pair of integers: (timestamp, id), where timestamp is a non-negative integer representing the time the request was made, and id is a positive integer representing the unique identifier of the request. She needs to identify the maximum number of active processes by correctly processing each request and ignoring duplicates. # Input - The first line contains an integer `N` (1 ≤ N ≤ 100,000) – the number of requests. - Each of the following `N` lines contains two space-separated integers `timestamp` and `id` (0 ≤ timestamp ≤ 1,000,000, 1 ≤ id ≤ 1,000,000) – the timestamp of the request and the unique identifier of the request. # Output - Output a single integer – the maximum number of active processes. # Example Input ``` 5 1 100 2 200 3 100 4 300 5 200 ``` Output ``` 2 ``` # Note In the given example: - At timestamp 1, request ID 100 starts a process. - At timestamp 2, request ID 200 starts another process. - At timestamp 3, request ID 100 is received again but is ignored as a duplicate. - At timestamp 4, request ID 300 starts a process. - At timestamp 5, request ID 200 is received again but is ignored as a duplicate. The maximum number of active processes is 2 (when processes with IDs 100 and 200 are active).","solution":"def max_active_processes(requests): Determine the maximum number of active processes given a list of requests. Parameters: requests (list of tuples): A list of tuples, each containing (timestamp, id), representing a request made at \\"timestamp\\" with unique \\"id\\". Returns: int: The maximum number of active processes at any point in time. active_processes = set() max_active = 0 for timestamp, req_id in requests: if req_id in active_processes: active_processes.remove(req_id) else: active_processes.add(req_id) max_active = max(max_active, len(active_processes)) return max_active # Example usage: requests = [(1, 100), (2, 200), (3, 100), (4, 300), (5, 200)] print(max_active_processes(requests)) # Output should be 2"},{"question":"Write a program that reads a list of strings and determines if each string in the list is a valid palindrome when ignoring non-alphanumeric characters and case. The program should return a list of boolean values indicating the validity of each string. Constraints * 1 leq n leq 100 * 0 leq the length of each string leq 1000 Input In the first line, the number of strings n is given. In the following n lines, each line contains one string with alphanumeric and non-alphanumeric characters. Output Print a list of boolean values, one for each input string. Each boolean value should be \\"True\\" if the corresponding string is a palindrome, and \\"False\\" otherwise. Examples Input 3 A man, a plan, a canal, Panama! race a car No lemon, no melon Output [True, False, True] Input 2 Madam In Eden, I\'m Adam Was it a car or a cat I saw? Output [True, True]","solution":"import re def is_valid_palindrome(s): Returns True if the string s is a valid palindrome when ignoring non-alphanumeric characters and case. # Use regex to filter out non-alphanumeric characters and convert to lowercase filtered_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the filtered string is equal to its reverse return filtered_s == filtered_s[::-1] def validate_palindromes(n, strings): Returns a list of boolean values indicating if each string in the input list is a valid palindrome. result = [] for s in strings: result.append(is_valid_palindrome(s)) return result"},{"question":"Given a list of integers representing the heights of buildings, where each buildings\' width is 1 unit, find the total amount of water that can be trapped after raining. You can assume that the ends of the list represent walls that extend infinitely. Example 1: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above list represents the elevation map where the width of each bar is 1. The 6 units of rain water are being trapped. Example 2: Input: [3,0,0,2,0,4] Output: 10 Explanation: The water is trapped between the first \\"3\\" and the \\"4\\", there is a total of 10 units of water trapped. Example 3: Input: [2,0,2] Output: 2 Explanation: The water is trapped between the two \\"2\\"s, there is a total of 2 units of water trapped. Constraints: - The list of heights is non-negative. - The length of the list does not exceed 10,000.","solution":"def trap(height): This function calculates the total amount of water that can be trapped after raining given the heights of buildings. :param height: List[int] - List of non-negative integers representing the heights of buildings. :return: int - Total amount of water trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array. left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array. right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate water trapped. for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"You are given an array of integers `arr` of length `n`. A subarray is called `c-balanced` if the sum of its elements is equal to `c`. You have to find the length of the smallest `c-balanced` subarray. If no such subarray exists, return -1. -----Input----- The first line contains two integers `n` and `c` (1 ≤ n ≤ 100000, -10^9 ≤ c ≤ 10^9). The second line contains `n` integers `arr[i]` (-10^9 ≤ arr[i] ≤ 10^9). -----Output----- Print one number — the length of the smallest `c-balanced` subarray. If no such subarray exists, print -1. -----Examples----- Input 5 7 1 2 3 4 5 Output 2 Input 4 10 -1 2 4 10 -2 Output 1 Input 3 100 1 2 3 Output -1","solution":"def smallest_c_balanced_subarray(n, c, arr): prefix_sum = {0: -1} current_sum = 0 min_length = float(\'inf\') for i in range(n): current_sum += arr[i] if (current_sum - c) in prefix_sum: min_length = min(min_length, i - prefix_sum[current_sum - c]) if current_sum not in prefix_sum: prefix_sum[current_sum] = i return min_length if min_length != float(\'inf\') else -1"},{"question":"Check the Tutorial tab to learn about string manipulation in Python. Task The provided code stub reads a string, boldsymbol{s}, and an integer, boldsymbol{n}, from STDIN. Add logic to print two lines. The first line should contain the string boldsymbol{s} concatenated with itself boldsymbol{n} times. The second line should contain the length of the concatenated string. Example s = \\"abc\\" n = 3 The resulting string would be \\"abcabcabc\\", and its length would be 9. Print: abcabcabc 9 Input Format The first line contains the string, boldsymbol{s}. The second line contains the integer, boldsymbol{n}. Output Format Print the two lines as described above. Sample Input 0 xyz 4 Sample Output 0 xyzxyzxyzxyz 12","solution":"def concatenate_and_length(s, n): Concatenates the string s with itself n times and returns the concatenated string and its length. concatenated_string = s * n length_of_concatenated_string = len(concatenated_string) return concatenated_string, length_of_concatenated_string"},{"question":"You are given a string, S, consisting of lowercase letters. Your task is to determine if you can rearrange the characters in S to form a palindrome. A palindrome is a string that reads the same backward as forward, such as \\"madam\\" or \\"racecar\\". Function Description Complete the canFormPalindrome function in the editor below. canFormPalindrome has the following parameters: - string s: the input string Returns - string: either POSSIBLE or IMPOSSIBLE Input Format The first line of the input contains t, the number of test cases. Each of the next t lines contains a string s. Constraints 1 leq t leq 10^5 1 leq s leq 10^5 (the length of each string) The total length of all strings in one test case will not exceed 10^6. Sample Input STDIN Function ----- -------- 3 t = 3 civic s = \\"civic\\" ivicc s = \\"ivicc\\" hello s = \\"hello\\" Sample Output POSSIBLE POSSIBLE IMPOSSIBLE Explanation The first string \\"civic\\" is already a palindrome. The second string \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. The third string \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def canFormPalindrome(s): Determines if the characters in the given string can be rearranged to form a palindrome. Args: s (str): The input string. Returns: str: \\"POSSIBLE\\" if the string\'s characters can be rearranged to form a palindrome, otherwise \\"IMPOSSIBLE\\". from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd frequency if odd_count > 1: return \\"IMPOSSIBLE\\" else: return \\"POSSIBLE\\""},{"question":"A popular voice assistant provides weather updates based on location. The weather information is available in three categories: the city\'s name, current temperature, and condition (like sunny, rainy, etc.). Your task is to create a program that simulates this feature by fetching weather updates for the cities from a given dataset. You are provided with two arrays: one containing city names and the other containing weather data. Each weather data entry is a string in the format \\"City:Temperature:Condition\\". Write a program that processes the input and outputs the weather update for each city present in the city names array in the format \\"In [City], it is currently [Temperature] degrees and [Condition].\\". If a city\'s weather data is not found, output \\"No weather data available for [City].\\". # Input The input consists of multiple lines: - The first line contains an integer n (0 ≤ n ≤ 100), the number of city names. - The next n lines each contain a city name. - The following line contains an integer m (0 ≤ m ≤ 1000), the number of weather data entries. - The next m lines each contain a weather data entry in the format \\"City:Temperature:Condition\\". # Output The program should output the weather update for each of the n cities in the format specified. # Example **Input:** ``` 3 New York San Francisco Austin 5 New York:22:Sunny Austin:33:Hot Chicago:15:Cold San Francisco:18:Mild Seattle:10:Windy ``` **Output:** ``` In New York, it is currently 22 degrees and Sunny. In San Francisco, it is currently 18 degrees and Mild. In Austin, it is currently 33 degrees and Hot. ``` **Input:** ``` 2 Boston Miami 3 Los Angeles:25:Sunny Houston:30:Hot Chicago:15:Cold ``` **Output:** ``` No weather data available for Boston. No weather data available for Miami. ```","solution":"def weather_updates(city_names, weather_data_entries): Returns weather updates for each city in the city_names list based on the provided weather_data_entries. If no weather data is available for a city, it outputs a corresponding message. weather_map = {} for entry in weather_data_entries: city, temperature, condition = entry.split(\':\') weather_map[city] = (temperature, condition) result = [] for city in city_names: if city in weather_map: temperature, condition = weather_map[city] result.append(f\\"In {city}, it is currently {temperature} degrees and {condition}.\\") else: result.append(f\\"No weather data available for {city}.\\") return result"},{"question":"Tarzan is organizing a different type of game with the barbarians. He assigns unique integers to each barbarian, ranging from 1 to N. This game consists of performing a sequence of updates and range queries on an array of integers. Your task is to help Tarzan by implementing these operations efficiently. The game has Q rounds, and each round could be one of two types: 1. **Update Round**: Tarzan updates the integer assigned to a specific barbarian. 2. **Query Round**: Tarzan asks for the sum of the integers assigned to a continuous range of barbarians. -----Input----- The first line contains two integers N and Q (1 leq N, Q leq 10^5), the number of barbarians and the number of rounds, respectively. The second line contains N integers, where the i-th integer is the initial integer assigned to the barbarian denoted with i. The following Q lines describe the rounds: - If the round is of the first type (update), the line will contain three integers: `1`, `X`, and `V`. This indicates that the integer assigned to the barbarian numbered `X` should be updated to `V`. - If the round is of the second type (query), the line will contain three integers: `2`, `L`, and `R`. This indicates Tarzan wants to know the sum of the integers assigned to the barbarians from `L` to `R` inclusive. -----Output----- For each round of the second type, output a single line containing the sum of the integers for the queried range. -----Examples----- Sample Input: 5 3 1 2 3 4 5 2 1 3 1 3 10 2 1 3 Sample Output: 6 15 Explanation: - Initially, the integers assigned to barbarians are [1, 2, 3, 4, 5]. - The first query asks for the sum of integers from index 1 to 3, which is 1 + 2 + 3 = 6. - The update changes the number at index 3 to 10, making the array [1, 2, 10, 4, 5]. - The second query asks for the sum of integers from index 1 to 3, which is now 1 + 2 + 10 = 13.","solution":"class BarbarianGame: def __init__(self, n, initial_values): self.n = n self.values = initial_values self.prefix_sum = [0] * (n + 1) self._build_prefix_sum() def _build_prefix_sum(self): for i in range(1, self.n + 1): self.prefix_sum[i] = self.prefix_sum[i - 1] + self.values[i - 1] def update(self, x, v): diff = v - self.values[x - 1] self.values[x - 1] = v for i in range(x, self.n + 1): self.prefix_sum[i] += diff def query(self, l, r): return self.prefix_sum[r] - self.prefix_sum[l - 1] def barbarian_game(n, q, initial_values, rounds): game = BarbarianGame(n, initial_values) result = [] for round in rounds: if round[0] == 1: _, x, v = round game.update(x, v) elif round[0] == 2: _, l, r = round result.append(game.query(l, r)) return result"},{"question":"Sammy the squirrel found a string S of length N and wants to break it into exactly K contiguous substrings such that the maximum length of these substrings is minimized. Can you help Sammy determine the maximum length after the optimal division? Input: The first line of input contains two integers N and K - the length of the string S and the number of substrings, respectively. The second line contains string S. Output: Print the minimum possible value for the maximum length of the K substrings. Constraints: 1 ≤ N ≤ 10^5 1 ≤ K ≤ N SAMPLE INPUT 10 3 abcdefghij SAMPLE OUTPUT 4 Explanation One optimal way to split the string \\"abcdefghij\\" into 3 contiguous substrings is: \\"abcd\\", \\"efg\\", \\"hij\\" The lengths of these substrings are 4, 3, and 3, respectively. The maximum length among these is 4, which is the minimum possible value for the maximum length of the 3 substrings.","solution":"def find_maximum_length(N, K, S): def can_divide_with_length(max_length): count, current_length = 1, 0 for char in S: if current_length + 1 > max_length: count += 1 current_length = 0 current_length += 1 if count > K: return False return True left, right = 1, N while left < right: mid = (left + right) // 2 if can_divide_with_length(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given an array of integers `a`. Your task is to transform the array into another array `b` such that the following conditions are met: * Every element `b_i` in `b` is larger than or equal to the corresponding element `a_i` in `a` (i.e., `b_i ≥ a_i` for all `i`). * If the sum of all elements in `a` is `S`, then the sum of all elements in `b` should be S + k, where k is a positive integer. * No two adjacent elements in `b` should have the same value. You are guaranteed that such a transformation is always possible. Input The first line contains an integer `n` (2 ≤ n ≤ 1000) — the number of elements in the array. The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` (0 ≤ a_i ≤ 10^4). Output Print `n` space-separated integers representing the transformed array `b`. Examples Input 4 1 2 3 4 Output 2 3 5 5 Input 3 5 6 7 Output 6 8 10 Note In the first example, the input array\'s sum is 10, and the output array\'s sum is 15 (S + 5 where k = 5). Every element in `b` is greater than or equal to the corresponding element in `a`. Additionally, no two adjacent elements in `b` are the same: 2 != 3, 3 != 5, and 5 != 5 (since there\'s no previous element to 5). In the second example, the input array\'s sum is 18, and the output array\'s sum is 24 (S + 6 where k = 6). Every element in `b` is greater than or equal to the corresponding element in `a`. Furthermore, no two adjacent elements in `b` are the same: 6 != 8 and 8 != 10.","solution":"def transform_array(n, a): Transforms array a into array b such that: 1. Each element in b is greater or equal to the corresponding element in a. 2. The sum of elements in b is S + k (k being a positive integer). 3. No two adjacent elements in b are the same. Parameters: n (int): The number of elements in the array. a (list of int): The input array. Returns: list: The transformed array b. S = sum(a) k = 1 b = [0] * n b[0] = a[0] + 1 for i in range(1, n): b[i] = max(b[i-1] + 1, a[i] + 1) b_sum = sum(b) k = (b_sum - S) return b"},{"question":"Your task is to help the local school library system with a book relocation problem. The library has recently acquired a new set of books and they need to find the optimal number of shelves to store them. Each shelf has the same width capacity, and every book has a known width. The goal is to minimize the number of shelves needed to store all the books without exceeding the width capacity of any single shelf. You should write a program to determine the minimum number of shelves required to store all the books. -----Input----- The first line of input contains an integer 1 le n le 10000, the number of books. The second line contains an integer 1 le W le 10000, the width of each shelf. The following n lines each contain an integer 1 le w_i le W, the width of the i-th book. -----Output----- Output a single integer, the minimum number of shelves required to store all the books. -----Examples----- Sample Input: 5 10 6 3 5 2 7 Sample Output: 3","solution":"def min_shelves(n, W, widths): Determines the minimum number of shelves required to store all the books. Parameters: n (int): The number of books. W (int): The width capacity of each shelf. widths (list of int): A list containing the width of each book. Returns: int: The minimum number of shelves required. shelves = 0 current_shelf_width = 0 for width in widths: if current_shelf_width + width <= W: current_shelf_width += width else: shelves += 1 current_shelf_width = width # We need to count the last shelf if there are widths added to it if current_shelf_width > 0: shelves += 1 return shelves"},{"question":"Read problem statements in Mandarin Chinese and Russian. A palindrome is a string that reads the same backward as forward. Given a string s consisting of lowercase letters, find the length of the shortest palindrome that can be made by adding characters to the end of s. ------ Input ------ A single line containing the string s. ------ Output ------ Output a single line containing one integer --- the length of the shortest palindrome. ------ Constraints ------ 1 ≤ |s| ≤ 10^5 ------ Sample Input 1 ------ abac ------ Sample Output 1 ------ 5 ------ Explanation 1 ------ The shortest palindrome that can be formed by adding characters to the end of \'abac\' is \'abacaba\'. Thus, the length of this palindrome is 7.","solution":"def shortest_palindrome_length(s): Given a string `s`, this function returns the length of the shortest palindrome that can be made by adding characters to the end of `s`. if s == s[::-1]: return len(s) for i in range(len(s)-1, -1, -1): if s[:i+1] == s[:i+1][::-1]: return len(s) + (len(s) - (i+1)) return 2 * len(s) - 1"},{"question":"Sarah works as a software developer and she has been given a new task. She needs to develop a function that generates secure passwords. A password is considered secure if it meets the following criteria: 1. It contains at least one uppercase letter. 2. It contains at least one lowercase letter. 3. It contains at least one digit. 4. It contains at least one special character from the following set: !@#%^&*()-+ 5. It is at least 8 characters long. Sarah wants to generate `n` such passwords. Every password should be unique. Your task is to help Sarah by writing a function that generates `n` secure passwords as described above. Input The input consists of a single integer, `n` (1 ≤ n ≤ 100). Output Print `n` lines. Each line contains one secure password. Each password must meet the above criteria and must be unique. Examples Input 3 Output Ab1!defG G7*kLmN8 xY9*zR#A","solution":"import random import string def generate_passwords(n): def is_secure(password): has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \\"!@#%^&*()-+\\" for c in password) return has_upper and has_lower and has_digit and has_special and len(password) >= 8 passwords = set() while len(passwords) < n: password = \'\'.join(random.choices(string.ascii_letters + string.digits + \\"!@#%^&*()-+\\", k=12)) if is_secure(password): passwords.add(password) password_list = list(passwords) for password in password_list: print(password) return password_list"},{"question":"Problem A security system monitors a rectangular grid where each cell can be either \\"walkable\\" or \\"non-walkable\\". Initially, a guard is stationed at the top-left corner (0, 0) of the grid and needs to reach a target cell located at the bottom-right corner of the grid (n-1, m-1). The guard can only move in four directions: up, down, left, and right, but cannot move through \\"non-walkable\\" cells. Determine if there is a path from the top-left cell to the bottom-right cell. If a path exists, output the number of steps in the shortest path. If no path exists, output -1. Input Format The first line contains two integers, n and m, separated by a space, which represent the number of rows and columns in the grid, respectively. The next n lines each contain m integers, either 0 or 1, separated by spaces. A 0 indicates a walkable cell, and a 1 indicates a non-walkable cell. Constraints - 1 ≤ n, m ≤ 100 Output Format Output a single integer representing the length of the shortest path from the top-left to the bottom-right cell. If no path exists, output -1. Example **Input:** ``` 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 ``` **Output:** ``` 8 ``` **Explanation:** The shortest path from (0, 0) to (4, 4) would be: (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) -> (3, 2) -> (4, 2) -> (4, 3) -> (4, 4), totaling 8 steps. **Input:** ``` 3 3 0 1 0 1 1 0 0 0 0 ``` **Output:** ``` -1 ``` **Explanation:** There is no path from (0, 0) to (2, 2) because the guard cannot bypass the \\"non-walkable\\" cells.","solution":"from collections import deque def shortest_path(n, m, grid): if not grid or grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == n-1 and col == m-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and grid[new_row][new_col] == 0: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"In a bustling toy factory, Bogo the robot is in charge of assembling toy packages. Each package is supposed to contain exactly k unique toys. If Bogo receives the labels of n different toys to choose from, he needs to figure out how many unique packages he can create. Given the toy labels in the factory and the required number of toys per package, help Bogo determine the total number of different packages that can be assembled. -----Input----- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the total number of toys available and the number of toys each package should contain. The second line contains n space-separated integers a_1, a_2, ..., a_n — the labels of the toys. -----Output----- Print a single integer — the number of unique packages that can be created. -----Examples----- Input 5 3 1 2 3 4 5 Output 10 Input 4 2 1 2 2 3 Output 3 Input 6 4 1 1 1 1 1 1 Output 0","solution":"from itertools import combinations def count_unique_packages(n, k, toy_labels): Returns the number of unique packages Bogo can create from toy_labels with exactly k unique toys. # Get the unique toy labels unique_toys = set(toy_labels) # If there are fewer unique toys than k, it\'s impossible to create such a package if len(unique_toys) < k: return 0 # Calculate the number of combinations of unique toys taken k at a time unique_toys_combinations = list(combinations(unique_toys, k)) # Return the total number of unique combinations return len(unique_toys_combinations)"},{"question":"Given a string `s` consisting of lowercase English letters and a pattern `p` also composed of lowercase English letters, determine if the pattern `p` can be found as a substring in the string `s` by possibly deleting some characters from `s` without changing the order of the remaining characters. # Examples - `s = \\"codereview\\", p = \\"crew\\"` You can remove \'o\', \'d\', \'e\', \'v\', \'i\', \'e\', \'e\' to get \\"crew\\" Returns: `True` - `s = \\"codinginterview\\", p = \\"coin\\"` You can remove \'d\', \'i\', \'n\', \'g\', \'n\', \'t\', \'e\', \'r\', \'v\', \'i\', \'e\', \'w\' to get \\"coin\\" Returns: `True` - `s = \\"hello\\", p = \\"world\\"` There\'s no way to form \\"world\\" from \\"hello\\" Returns: `False` # Constraints - 1 <= `len(s)` <= 10^5 - 1 <= `len(p)` <= 10^5 # Function Signature Write a function `is_subsequence(s: str, p: str) -> bool` # Note - The function should have an efficient algorithm with low time complexity, as both `s` and `p` can be of length up to 100,000.","solution":"def is_subsequence(s: str, p: str) -> bool: Determine if `p` is a subsequence of `s`. Args: s (str): the source string. p (str): the pattern string. Returns: bool: True if p can be found as a subsequence in s, False otherwise. s_len, p_len = len(s), len(p) si, pi = 0, 0 while si < s_len and pi < p_len: if s[si] == p[pi]: pi += 1 si += 1 return pi == p_len"},{"question":"Given a string consisting of lowercase English letters, determine if the string can be rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). If the string can be rearranged to form a palindrome, print \\"YES\\". Otherwise, print \\"NO\\". -----Input----- The input consists of a single string s (1 ≤ |s| ≤ 10^5), the length of the string will not exceed 10^5 characters. The string consists of only lowercase English letters. -----Output----- Print \\"YES\\" if the string can be rearranged to form a palindrome. Otherwise, print \\"NO\\". -----Examples----- Input carrace Output YES Input hello Output NO -----Note----- In the first example, the string \\"carrace\\" can be rearranged to form \\"racecar\\", which is a palindrome. Thus, the output is \\"YES\\". In the second example, there is no way to rearrange the string \\"hello\\" to form a palindrome. Thus, the output is \\"NO\\". -----Explanation----- To determine if a string can be rearranged to form a palindrome, consider the frequency of each character in the string. For the string to be rearranged into a palindrome: 1. All characters except at most one must appear an even number of times. 2. At most one character can appear an odd number of times (this character would be in the middle of the palindrome if the length of the string is odd).","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. Parameters: s (str): The input string containing only lowercase English letters. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd frequency if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array A of length N consisting of non-negative integers, you need to determine the minimum number of operations required to make all elements of the array equal. In one operation, you can choose any element in the array and increment it by 1. Input Format: - The first line contains an integer N (1 ≤ N ≤ 100,000) representing the number of elements in the array. - The second line contains N integers A_1, A_2, ..., A_N (0 ≤ A_i ≤ 10^9) representing the elements of the array. Output Format: - Print a single integer, the minimum number of operations required to make all elements of the array equal. Example: Input: 5 1 2 3 4 5 Output: 10 Explanation: In this example, you can increment the first four elements to 5 with a total of 10 + 9 + 8 + 7 = 34 operations. The total number of operations to make all elements equal is 10.","solution":"def min_operations_to_equalize(array): Returns the minimum number of operations required to make all elements in the array equal. max_value = max(array) operations = sum(max_value - x for x in array) return operations # Example usage if __name__ == \\"__main__\\": N = int(input()) A = list(map(int, input().split())) print(min_operations_to_equalize(A))"},{"question":"Ashley\'s team is working on server optimization for a high traffic web application. To ensure that servers can handle variable loads efficiently, they\'ve decided to implement a load balancer that can distribute incoming requests among servers based on their current load. Ashley\'s team uses a simplistic round-robin load balancing algorithm for this task. Each server maintains a counter that tracks the number of requests it has handled. Requests are distributed by selecting the server with the smallest counter value. If there are multiple servers with the same counter value, the request is assigned to the server with the smallest index among them. They need a program that simulates this load balancing algorithm. The program should handle a certain number of incoming requests and update the counters of the servers. Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of servers and the number of requests, respectively. - The second line contains m integers r1, r2, ..., rm (1 ≤ ri ≤ 100) — the requests. Output: - Print n integers representing the final counter value of each server, from the first server to the nth server. Example: Input: 3 5 2 3 1 5 2 Output: 2 1 2 Explanation: - Initially, all counters are zero: [0, 0, 0]. - The first request is 2. All servers have the same counter value, so it goes to server 1: [2, 0, 0]. - The second request is 3. Server 1 has the highest counter value, so it goes to server 2: [2, 3, 0]. - The third request is 1. Server 1 and server 3 have the same counter value, so it goes to the lowest index, server 3: [2, 3, 1]. - The fourth request is 5. Server 3 has the smallest counter value: [2, 3, 6]. - The final request is 2. Server 1 and server 3 have the same smallest counter value. It goes to the lowest index, server 1: [4, 3, 6]. This concludes with the final counter values: [4, 3, 6].","solution":"def load_balancer(n, m, requests): Simulate the load balancing algorithm. Parameters: n (int): Number of servers m (int): Number of requests requests (list): List of incoming requests Returns: List[int]: Final counter values for each server # Initialize server counters server_counters = [0] * n # Process each request for r in requests: # Find the server with the minimum counter value min_index = 0 for i in range(1, n): if server_counters[i] < server_counters[min_index]: min_index = i # Assign the request to the chosen server server_counters[min_index] += r return server_counters"},{"question":"Given a string s, you are allowed to convert it to a new string by rearranging its letters and/or inserting any number of the character \'a\' in any positions. Your task is to determine if it\'s possible to make the new string a palindrome. A palindrome is a string that reads the same forwards and backwards. Example 1: Input: s = \\"civic\\" Output: True Explanation: The string is already a palindrome. Example 2: Input: s = \\"ivicc\\" Output: True Explanation: You can rearrange \\"ivicc\\" to \\"civic\\", which is a palindrome. Example 3: Input: s = \\"hello\\" Output: False Explanation: There is no way to rearrange or add \'a\' to the string \\"hello\\" to make it a palindrome. Example 4: Input: s = \\"aac\\" Output: True Explanation: You can rearrange \\"aac\\" to \\"aca\\", which is a palindrome. Constraints: - 1 <= s.length <= 1000 - s consists of lowercase English letters.","solution":"def can_form_palindrome(s): Determines if a string can be rearranged and additional \'a\' characters can be added to form a palindrome. Args: s (str): Input string consisting of lowercase English letters. Returns: bool: True if the string can be rearranged and/or added with \'a\' to form a palindrome, False otherwise. from collections import Counter freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd frequency. return odd_count <= 1"},{"question":"A large warehouse has a number of storage aisles containing boxes. Each box is represented by its height, and the aisles are represented as an array of positive integers, where each integer denotes the height of a box in the aisle. The management wants to quickly identify the maximum box height for any subarray of these aisles. However, to make it a bit simpler, they are only interested in subarrays of a fixed length L. For each query, determine the maximum height in every subarray of length L in the given array. ------ Input ------ The first line of input contains an integer T - the number of test cases. The first line of each test case contains two integers N and L. The following line contains N space-separated integers representing the heights of the boxes in the aisle. ------ Output ------ For each test case, output one line with (N-L+1) space-separated integers, where each integer represents the maximum height in each subarray of length L. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ L ≤ N 1 ≤ height ≤ 10^9 ----- Sample Input 1 ------ 2 6 3 1 3 5 2 8 7 5 2 4 2 7 3 1 ----- Sample Output 1 ------ 5 5 8 8 4 7 7 3 ----- Explanation 1 ------ Example case 1. Subarrays of length 3 are: - [1, 3, 5] -> maximum height = 5 - [3, 5, 2] -> maximum height = 5 - [5, 2, 8] -> maximum height = 8 - [2, 8, 7] -> maximum height = 8 Example case 2. Subarrays of length 2 are: - [4, 2] -> maximum height = 4 - [2, 7] -> maximum height = 7 - [7, 3] -> maximum height = 7 - [3, 1] -> maximum height = 3","solution":"from collections import deque def max_heights_in_subarrays(test_cases): results = [] for case in test_cases: N, L, heights = case deq = deque() max_in_windows = [] for i in range(N): # Maintain the deque to have maximums at the front while deq and deq[0] < i - L + 1: deq.popleft() while deq and heights[deq[-1]] <= heights[i]: deq.pop() deq.append(i) # We start recording max values after the initial L elements if i >= L - 1: max_in_windows.append(heights[deq[0]]) results.append(\\" \\".join(map(str, max_in_windows))) return results def process_test_cases(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, L = map(int, lines[index].split()) heights = list(map(int, lines[index + 1].split())) test_cases.append((N, L, heights)) index += 2 return max_heights_in_subarrays(test_cases)"},{"question":"You are responsible for designing an efficient rail network for a newly developed city. The city consists of several distinct districts connected by a series of rail lines. Each district is represented as a node, and each direct rail line between two districts is represented as an edge with an associated weight signifying the travel time between those districts. To aid in efficient management and to ensure that all districts remain connected, you need to design a program to find the minimum spanning tree (MST) of this network. The objective is to minimize the total travel time while ensuring every district is reachable from any other district. Write a program that accepts a list of districts and the rail lines connecting them, and outputs the total travel time of the minimum spanning tree for the city. Constraints: - 2 leq D leq 1000, where D is the number of districts. - 1 leq R leq 5000, where R is the number of rail lines. - The travel time for each rail line is a positive integer not exceeding 10000. Input: The first line contains two integers D and R, the number of districts and the number of rail lines respectively. The next R lines each contain three integers u, v, and w, where u and v are the districts connected by a rail line with a travel time of w. Output: Print the total travel time of the minimum spanning tree. Example: Input: 4 5 1 2 10 2 3 15 3 4 4 4 1 6 1 3 5 Output: 19 Explanation: The minimum spanning tree would include the rail lines with weights 4, 5, and 10, giving a total travel time of 19.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(districts, rail_lines): rail_lines.sort(key=lambda x: x[2]) # Sort edges based on weight parent = [] rank = [] for i in range(districts): parent.append(i) rank.append(0) mst_total_weight = 0 mst_edges = 0 for u, v, w in rail_lines: root_u = find(parent, u - 1) root_v = find(parent, v - 1) if root_u != root_v: mst_total_weight += w mst_edges += 1 union(parent, rank, root_u, root_v) if mst_edges == districts - 1: break return mst_total_weight # Function to read input and output the result def calculate_minimum_spanning_tree(): import sys input = sys.stdin.read data = input().split() D = int(data[0]) R = int(data[1]) rail_lines = [] index = 2 for i in range(R): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) rail_lines.append((u, v, w)) index += 3 result = kruskal_mst(D, rail_lines) print(result)"},{"question":"Katie is organizing a coding competition and wants to design a new scoreboard system. Each contestant is given an array of integers representing their scores in different problems. The scoreboard should be able to query for the total score of any given range of problems for multiple queries efficiently. Implement a function that initializes the scoreboard with the array of scores and processes multiple range queries to compute sum of scores within specified ranges. The function should support the following operations: 1. `initialize(scores)`: Initializes the scoreboard with the given list of scores. 2. `range_sum(start, end)`: Returns the sum of scores from index `start` to index `end` (inclusive). Note that the sum query needs to be answered efficiently. Input format: - The first line contains an integer `N`, the number of scores. - The second line contains `N` integers, the scores. - The third line contains an integer `Q`, the number of queries. - The next `Q` lines contain two integers each, `start` and `end`, representing the range for which the sum query is to be answered. Output format: - For each range query, output the sum of scores in that range. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ scores[i] ≤ 1000 - 1 ≤ Q ≤ 100 - 0 ≤ start ≤ end < N SAMPLE INPUT 5 1 2 3 4 5 3 0 2 1 3 0 4 SAMPLE OUTPUT 6 9 15","solution":"class Scoreboard: def __init__(self, scores): self.scores = scores self.prefix_sums = self._compute_prefix_sums(scores) def _compute_prefix_sums(self, scores): prefix_sums = [0] * (len(scores) + 1) for i in range(len(scores)): prefix_sums[i + 1] = prefix_sums[i] + scores[i] return prefix_sums def range_sum(self, start, end): return self.prefix_sums[end + 1] - self.prefix_sums[start] # Example usage # N = 5 # scores = [1, 2, 3, 4, 5] # Q = 3 # queries = [(0, 2), (1, 3), (0, 4)] # Initialization # scoreboard = Scoreboard(scores) # Query results # results = [] # for query in queries: # result = scoreboard.range_sum(query[0], query[1]) # results.append(result) # results should be [6, 9, 15]"},{"question":"# Description: Given a string consisting of digits and lowercase alphabetic characters, remove the consecutively repeated characters and count the number of unique characters left. For each unique character, calculate its frequency in the string, and return the list of unique characters along with their counts in the original order of appearance. # Examples ``` unique_chars(\\"aabbccdde\\") === [(\'a\', 2), (\'b\', 2), (\'c\', 2), (\'d\', 2), (\'e\', 1)] unique_chars(\\"aabbccddee\\") === [(\'a\', 2), (\'b\',2), (\'c\', 2), (\'d\', 2), (\'e\', 2)] unique_chars(\\"11233\\") === [(\'1\', 2), (\'2\', 1), (\'3\', 2)] unique_chars(\\"abcd\\") === [(\'a\', 1), (\'b\', 1), (\'c\', 1), (\'d\', 1)] unique_chars(\\"121212\\") === [(\'1\', 3), (\'2\', 3)] unique_chars(\\"aaaabbbcc\\") === [(\'a\', 4), (\'b\', 3), (\'c\', 2)] ```","solution":"def unique_chars(s): Given a string consisting of digits and lowercase alphabetic characters, remove the consecutively repeated characters and count the number of unique characters left. For each unique character, calculate its frequency in the string, and return the list of unique characters along with their counts in the original order of appearance. Args: s (str): input string of digits and lowercase alphabetic characters. Returns: List[Tuple[str, int]]: list of tuples, each containing a unique character and its frequency in the original string. # Initialize an empty dictionary to keep track of character frequencies char_count = {} # Iterate over each character in the string for i in range(len(s)): curr_char = s[i] if curr_char in char_count: char_count[curr_char] += 1 else: char_count[curr_char] = 1 # Create a list of tuples from the dictionary unique_chars_list = [(char, count) for char, count in char_count.items()] return unique_chars_list"},{"question":"A software company wants to optimize the loading of files on their cloud platform. They have multiple servers, each with a different processing power. Each file to be uploaded requires a certain amount of processing power. The goal is to distribute the files across the servers in a manner that minimizes the maximum processing load on any server. The company provides you with the number of servers and an array where each element represents the processing power required for each file. Your task is to find the optimal way to distribute the files across the servers to ensure the load is balanced efficiently. Input: The first line contains two integers, S (the number of servers) and F (the number of files). The second line contains F integers representing the processing power required for each of the files. Output: Print a single integer: the minimized maximum processing load on any server. Constraints: 1 ≤ S ≤ 100 1 ≤ F ≤ 1000 1 ≤ processing power of each file ≤ 1000 SAMPLE INPUT 3 5 10 20 30 40 50 SAMPLE OUTPUT 60 Explanation: One way to distribute the files is: - Server 1: 10, 50 (Load: 60) - Server 2: 20, 40 (Load: 60) - Server 3: 30 (Load: 30) The maximum load on any server is 60, which is the minimal value possible for this configuration.","solution":"def canDistributeLoad(load, servers, files): count = 0 current_load = 0 for file in files: if current_load + file <= load: current_load += file else: count += 1 current_load = file if current_load > load: return False return count < servers def minimizedMaxProcessingLoad(servers, files): low = max(files) high = sum(files) while low < high: mid = (low + high) // 2 if canDistributeLoad(mid, servers, files): high = mid else: low = mid + 1 return low # Example usage: def main(): S = 3 F = 5 processing_powers = [10, 20, 30, 40, 50] result = minimizedMaxProcessingLoad(S, processing_powers) print(result) # Expected output: 60"},{"question":"In a world of coding competitions, contestants are required to complete a series of problems within a time limit. Each problem has a specific time (in minutes) required to solve it, and each contestant can select the problems they wish to solve within the given total time. Given these constraints, determine the maximum number of problems a contestant can solve. Input Format: - The first line of input contains an integer T, the number of test cases. - For each test case, the first line contains two integers N (the number of problems) and M (the total available time in minutes). - The second line contains N integers, each representing the time required to solve each problem. Output Format: - For each test case, print the maximum number of problems that can be solved within the given time. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ M ≤ 100000 1 ≤ time required to solve each problem ≤ 1000 Sample Input: 2 5 300 100 200 150 60 50 4 120 30 50 70 40 Sample Output: 4 3 Explanation: In the first test case, the optimal way to solve the most problems is to select problems with the time requirements of 50, 60, 100, and 150 minutes. Total time spent is 50 + 60 + 100 + 150 = 360, which exceeds the available 300 minutes. Instead, selecting 50, 60, 100, and 200 minutes gives the highest count of 4 problems within the available time. In the second test case, the contestant can solve the problems requiring 30, 40, and 50 minutes for a total of 3 problems within the available 120 minutes.","solution":"def max_problems_solved(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] problem_times = test_cases[i][1] problem_times.sort() total_time = 0 problem_count = 0 for time in problem_times: if total_time + time <= M: total_time += time problem_count += 1 else: break results.append(problem_count) return results"},{"question":"You and your friends are participating in a coding marathon where each team needs to solve a series of problems to earn points. The catch is that all problems are organized in a single row, and each team can only attempt a contiguous segment of problems due to the event\'s rules. Given a list of integers representing the points of the problems in the row, your task is to determine the maximum points your team can earn by attempting exactly `k` contiguous problems out of the total list. You are allowed to choose any segment of exactly `k` problems, but you cannot attempt non-contiguous problems or more than `k` problems. -----Input----- - The first line contains an integer `n`, the number of problems in the row (1 ≤ n ≤ 1000). - The second line contains an integer `k` (1 ≤ k ≤ n), the number of contiguous problems you need to attempt. - The third line contains `n` integers, representing the points of each problem, separated by spaces. Each integer falls within the range of -1000 to 1000. -----Output----- Output a single integer which is the maximum number of points that can be earned by attempting exactly `k` contiguous problems. -----Examples----- Sample Input 1: 5 3 1 2 3 -4 5 Sample Output 1: 6 Sample Input 2: 6 2 -1 -2 3 4 -10 2 Sample Output 2: 7 Explanation: In the first example, the best segment of exactly 3 contiguous problems is `[1, 2, 3]` which gives a total of `6` points. In the second example, the best segment of exactly 2 contiguous problems is `[3, 4]` which gives a total of `7` points.","solution":"def max_points(n, k, points): Returns the maximum points that can be earned by attempting exactly k contiguous problems out of n total problems. if k == n: return sum(points) max_sum = float(\'-inf\') current_sum = sum(points[:k]) max_sum = max(max_sum, current_sum) for i in range(k, n): current_sum += points[i] - points[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Chef has N boxes of chocolates. Each box is uniquely numbered from 1 to N and has C_i chocolates in it. Chef wants to eat a chocolate from each box in such an order that after eating all N chocolates, the sum of the absolute differences between the number of chocolates in consecutive boxes is minimized. A formal definition of the problem is given below. Given N boxes with C_i chocolates in each box, reorder the boxes such that: [ text{Minimize } sum_{i=1}^{N-1} |C_{P_i} - C_{P_{i+1}}| ] Where P is a permutation of the sequence 1, 2, dots, N indicating the order of the boxes. Write a program to determine the minimum possible value of this sum. ------ Input ------ The first line contains an integer N (1 ≤ N ≤ 100) — the number of boxes. The second line contains N integers C_1, C_2, dots, C_N (1 ≤ C_i ≤ 1000) — the number of chocolates in each box. ------ Output ------ Print one integer — the minimum possible value of the sum of absolute differences between the number of chocolates in consecutive boxes. ------ Sample Input 1 ------ 4 4 2 1 10 ------ Sample Output 1 ------ 7 ------ Explanation ------ One possible order to achieve the minimum sum is [1, 2, 4, 10]. The sum of absolute differences is: [ |1 - 2| + |2 - 4| + |4 - 10| = 1 + 2 + 6 = 9 ] Another possible order to achieve the minimum sum is [10, 4, 2, 1]. The sum of absolute differences is similarly minimized. The sum is: [ |10 - 4| + |4 - 2| + |2 - 1| = 6 + 2 + 1 = 9 ] So the minimum possible value of the sum is 7.","solution":"def minimize_sum_of_absolute_differences(N, chocolates): Reorders the boxes to minimize the sum of absolute differences between the number of chocolates in consecutive boxes. Parameters: N (int): The number of boxes. chocolates (list): List of integers where each integer represents the number of chocolates in each box. Returns: int: The minimum possible value of the sum of absolute differences. chocolates.sort() min_sum = 0 for i in range(1, N): min_sum += abs(chocolates[i] - chocolates[i - 1]) return min_sum"},{"question":"Polycarp is participating in a competitive programming marathon. The marathon consists of n problems, each with a distinct difficulty level. During the marathon, Polycarp can choose to solve some of the problems. Each problem i takes t_i hours to solve and gives d_i points. Polycarp has at most T hours to spend on solving problems in the entire marathon. Polycarp wants to maximize the total points he can achieve by solving the problems within the given time limit. Your task is to help Polycarp determine the maximum points he can achieve. -----Input----- The first line of the input contains two integers n and T (1 le n le 1000, 1 le T le 1000) — the number of problems and the total hours Polycarp has. The second line of the input contains n integers t_1, t_2, dots, t_n (1 le t_i le 100), where t_i is the time required to solve the i-th problem. The third line of the input contains n integers d_1, d_2, dots, d_n (1 le d_i le 1000), where d_i is the points given for solving the i-th problem. -----Output----- Output a single integer — the maximum points Polycarp can achieve. -----Examples----- Input 4 5 1 2 3 2 10 20 30 25 Output 55 Input 3 5 4 4 2 10 15 20 Output 20 Input 5 10 1 2 3 4 5 100 200 300 400 500 Output 1000 -----Note----- In the first example, Polycarp can solve the first problem (1 hour, 10 points) and the second problem (2 hours, 20 points), and then he can solve the fourth problem (2 hours, 25 points) resulting in a total of 10 + 20 + 25 = 55 points in total time of 1 + 2 + 2 = 5 hours. In the second example, Polycarp can only solve the third problem (2 hours, 20 points) because if he tries solving any of the first two problems, he would not be able to solve another problem within the 5 hours. In the third example, Polycarp has enough time to solve all problems, so the total points will be 100 + 200 + 300 + 400 + 500 = 1000 points.","solution":"def max_points(n, T, times, points): # Initialize a DP array where dp[i] will store the maximum number of points # achievable with exactly i hours dp = [0] * (T + 1) # Iterate over each problem for i in range(n): # Iterate over possible total times in reverse to avoid overcounting for t in range(T, times[i] - 1, -1): dp[t] = max(dp[t], dp[t - times[i]] + points[i]) return max(dp)"},{"question":"Make your strings joyful: Replace all \'happy\' with \'joyful\', \'sad\' with \'melancholy\' and \'excited\' with \'thrilled\' e.g. \\"I am very happy and excited today.\\" --> \\"I am very joyful and thrilled today.\\" ```if:csharp Documentation: Kata.Joyify Method (String) Joyify a string by replacing specific words. Returns a copy of the original string with \'happy\' replaced with \'joyful\', \'sad\' replaced with \'melancholy\', and \'excited\' replaced with \'thrilled\'. Syntax public static string Joyify( string str ) Parameters str Type: System.String The string to be joyified. Return Value Type: System.String The joyified string. Exceptions Exception Condition ArgumentNullException str is null. ```","solution":"def joyify_string(s): Replaces occurrences of \'happy\' with \'joyful\', \'sad\' with \'melancholy\', and \'excited\' with \'thrilled\' in the given string. Parameters: s (str): Input string to be modified. Returns: str: Modified string with specific words replaced. s = s.replace(\\"happy\\", \\"joyful\\") s = s.replace(\\"sad\\", \\"melancholy\\") s = s.replace(\\"excited\\", \\"thrilled\\") return s"},{"question":"Your company is developing a file management system that keeps a history of operations performed on the files. Each operation on a file is logged with a specific time-stamp. You need to implement a feature that allows users to query the last modification time of a file and to check if a file has been modified within a given time range. # Task Write a program that maintains a history of operations on files, where each operation is logged with its operation type (either \\"create\\" or \\"modify\\"), its file name, and the time it was performed. Then, process a series of queries about the modification history of the files. # Input The input consists of multiple operations followed by multiple queries. 1. The first set of lines contains operations in the following format: ``` ACTION FILE_NAME TIMESTAMP ``` - `ACTION`: A string which is either \\"create\\" or \\"modify\\". - `FILE_NAME`: A string representing the name of the file. - `TIMESTAMP`: An integer representing the time at which the operation was performed. All timestamps will be given in a non-decreasing order. 2. The second set of lines contains queries in the following format: ``` QUERY_TYPE FILE_NAME [ARGS] ``` - `QUERY_TYPE`: A string which is either \\"last_modified\\" or \\"modified_within\\". - `FILE_NAME`: A string representing the name of the file. - `ARGS`: Additional arguments, depending on the `QUERY_TYPE`: - If `QUERY_TYPE` is \\"last_modified\\", there are no additional arguments. - If `QUERY_TYPE` is \\"modified_within\\", there will be two integers `START` and `END`, representing the start and end of the time range. The input ends with a line containing only a hash sign (\\"#\\"), which should not be processed. # Output For each query, output the result in the following way: - For \\"last_modified\\" queries: if the file has been modified, output the last modification time. If the file does not exist, output \\"File does not exist\\". - For \\"modified_within\\" queries: if the file has been modified within the given time range, output \\"Yes\\". Otherwise, output \\"No\\". # Example Input: ``` create file1 1 modify file1 3 create file2 2 modify file1 5 modify file2 4 last_modified file1 last_modified file2 last_modified file3 modified_within file1 2 4 modified_within file2 1 3 # ``` Output: ``` 5 4 File does not exist Yes No ``` # Explanation: 1. The file \\"file1\\" was created at time 1, modified at time 3 and 5. Hence the last modified time is 5. 2. The file \\"file2\\" was created at time 2 and modified at time 4. Hence the last modified time is 4. 3. The file \\"file3\\" does not exist, so the output is \\"File does not exist\\". 4. The file \\"file1\\" was modified at times 3 and 5. Since 3 falls within the range 2 to 4, the output is \\"Yes\\". 5. The file \\"file2\\" was modified at time 4, which does not fall within the range 1 to 3, hence the output is \\"No\\".","solution":"def file_management_system(inputs): file_logs = {} def process_command(command): parts = command.split() if parts[0] in [\\"create\\", \\"modify\\"]: action = parts[0] file_name = parts[1] timestamp = int(parts[2]) if file_name not in file_logs: file_logs[file_name] = [] file_logs[file_name].append((action, timestamp)) elif parts[0] == \\"last_modified\\": file_name = parts[1] if file_name not in file_logs: results.append(\\"File does not exist\\") else: last_mod_time = max([log[1] for log in file_logs[file_name] if log[0] == \\"modify\\"], default=\\"File does not exist\\") results.append(last_mod_time) elif parts[0] == \\"modified_within\\": file_name = parts[1] start = int(parts[2]) end = int(parts[3]) if file_name not in file_logs: results.append(\\"No\\") else: modified_within_range = any(start <= log[1] <= end and log[0] == \\"modify\\" for log in file_logs[file_name]) results.append(\\"Yes\\" if modified_within_range else \\"No\\") results = [] for line in inputs: if line.strip() == \\"#\\": break process_command(line.strip()) return results"},{"question":"You are given a string S consisting of lowercase English alphabets. Your task is to find the number of unique substrings of S. Input The input consists of a single line containing the string S. Output Output a single integer representing the number of unique substrings of the given string. Constraints 1 ≤ |S| ≤ 1000 Example Input 1 abc Output 1 6 Input 2 aaa Output 2 3 Explanation In the first example, the unique substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". In the second example, the unique substrings are \\"a\\", \\"aa\\", and \\"aaa\\".","solution":"def unique_substrings(S): Returns the number of unique substrings in the given string S. unique_subs = set() for i in range(len(S)): for j in range(i + 1, len(S) + 1): unique_subs.add(S[i:j]) return len(unique_subs)"},{"question":"A toy manufacturing company has decided to create an interactive toy that involves an LED grid. The grid contains LEDs arranged in rows and columns, which can light up in a sequence to form patterns or display text. The challenge is to optimize the sequence of lighting up the LEDs to form a desired pattern without lighting unnecessary LEDs. You are tasked with writing a program that takes a string input representing the desired pattern and generates the sequence of LED lights to be illuminated. The LEDs can be controlled by specifying the row and column indices of each LED. The input pattern will be given as a string of uppercase and lowercase Latin letters, spaces, and asterisks («*»). Spaces represent gaps where no LEDs should light up, and asterisks may appear for visual alignment but should not be considered as LEDs to be lit. The number of rows and columns of the LED grid are pre-determined and cannot exceed 10 rows and 50 columns. Your goal is to create a list of LED coordinates (one-indexed) that need to be lit to display the given pattern correctly. Input The only line contains one string s (1 ≤ |s| ≤ 200), comprised of uppercase and lowercase Latin letters, spaces, and asterisks («*»), representing the desired pattern. Output In the first line, output the number of LEDs to be lit. In the next lines, output the coordinates of each LED in the format (row, column). Example Input Hello*World Output 10 (1, 1) (1, 2) (1, 3) (1, 4) (1, 5) (1, 7) (1, 8) (1, 9) (1, 10) (1, 11) Input **T*e s*t** Output 4 (1, 3) (1, 5) (1, 7) (1, 9)","solution":"def get_led_coordinates(pattern): This function takes a string pattern and returns a list of tuples where each tuple represents the (row, column) of an LED to be lit. Assumes a single row grid. :param pattern: str, the desired pattern with letters, spaces and asterisks :return: List of tuples representing coordinates of LEDs to be lit leds = [] row = 1 # Given the problem context, we are using only one row for column, char in enumerate(pattern, 1): if char.isalpha(): leds.append((row, column)) led_count = len(leds) return led_count, leds"},{"question":"Write a program to simulate the movement of a robot on a 2D plane. The robot starts at the origin (0,0) and can be given commands to move up, down, left, or right. Each command moves the robot exactly one unit in the specified direction. The robot performs the commands in the sequence they are given. Your task is to determine the final coordinates of the robot after executing all the given commands. Input The input is given in the following format: n commands Where n (1 ≤ n ≤ 10^5) is the number of commands, and commands is a string of length n consisting of the characters \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Output Display the final coordinates of the robot as two space-separated integers. Sample Input 10 UUDDLLRRLR Output for Sample Input 1 0 Explanation: The robot starts at (0, 0). - Two \'U\' commands move it to (0, 2). - Two \'D\' commands move it back to (0, 0). - Two \'L\' commands move it to (-2, 0). - Two \'R\' commands move it back to (0, 0). - One \'L\' command moves it to (-1, 0). - One \'R\' command moves it to (0, 0). So, the final coordinates after all commands are (0, 0).","solution":"def move_robot(n, commands): Simulates the movement of a robot on a 2D plane based on given commands. Args: n (int): Number of commands. commands (str): A string consisting of the characters \'U\', \'D\', \'L\', \'R\'. Returns: tuple: The final coordinates of the robot as (x, y). x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y)"},{"question":"Given a list of integers representing heights of buildings, your task is to determine how many buildings have an unobstructed view of the sunset. A building has an unobstructed view of the sunset if there is no building to its right with a greater or equal height. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - The first line of each test case contains a single integer, N, the number of buildings. - The second line of each test case contains N space-separated integers, the heights of the buildings. ------ Output Format ------ For each test case, output a single integer - the number of buildings with an unobstructed view of the sunset. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^{5} 1 ≤ height ≤ 10^{6} -- Ensure the sum of N over all test cases does not exceed 2 × 10^{5}. ------ Sample Input 1 ------ 3 5 3 7 8 3 6 4 4 3 2 1 6 1 3 2 4 5 3 ------ Sample Output 1 ------ 2 4 2 ------ Explanation 1 ------ Test Case 1: The buildings with heights 8 and 6 have an unobstructed view of the sunset. Test Case 2: All buildings have an unobstructed view since their heights are decreasing from left to right. Test Case 3: The buildings with heights 5 and 3 have an unobstructed view of the sunset.","solution":"def unobstructed_views(test_cases): results = [] for case in test_cases: N, heights = case max_height = 0 count = 0 for height in reversed(heights): if height > max_height: count += 1 max_height = height results.append(count) return results def parse_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) heights = list(map(int, lines[index + 1].split())) index += 2 test_cases.append((N, heights)) return test_cases def main(input_data): test_cases = parse_input(input_data) results = unobstructed_views(test_cases) for result in results: print(result)"},{"question":"Lucy and Tom are playing a game where they compete by solving puzzles. They come across a very interesting problem. Given an integer array A of size N, they need to determine if there are two distinct indices i and j such that the sum of A[i] and A[j] is equal to a given integer K. Help Lucy to solve this problem faster than Tom. Constraints: - 2 ≤ N ≤ 1000 - -1000000 ≤ Element of array ≤ 1000000 Input: - First line contains two integers N and K separated by a space respectively. - The next line contains N integers separated by space representing the elements of the array. Output: Print \\"YES\\" if there exist two distinct indices i and j such that A[i] + A[j] = K, else print \\"NO\\". Setter: John Doe SAMPLE INPUT: 4 7 1 2 3 4 SAMPLE OUTPUT: YES","solution":"def has_pair_with_sum(N, K, A): seen = set() for num in A: if K - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"In a faraway kingdom, the king organizes a tournament every year, where citizens take part in a unique team game. Each team consists of exactly K players. The tournament has a peculiar rule: each player in a team pairs up exactly once with each other player in the same team over a series of rounds. For instance, if a team has 3 players, they will form pairs {(1,2), (1,3), (2,3)} in the rounds. This year, you are given the number of players P and the team size K to figure out how many complete teams can be formed and how many players will remain unpaired. Two players being part of any team only count as one unpaired if they cannot form a complete team. You need to write a program to determine these numbers. -----Input----- The first line contains an integer T (number of test cases, 1 <= T <= 1000). Each of the next T lines contains two integers P (total number of players, 1 <= P <= 10000) and K (size of each team, 2 <= K <= 100). -----Output----- For each test case, output two space-separated integers in a new line: the number of complete teams that can be formed and the number of unpaired players. -----Example----- Input: 3 10 2 15 3 8 4 Output: 5 0 5 0 2 0 Explanation: Case 1: Total players = 10, team size = 2. 5 complete teams of 2 players can be formed with no unpaired players. Case 2: Total players = 15, team size = 3. 5 complete teams of 3 players each can be formed with no unpaired players. Case 3: Total players = 8, team size = 4. 2 complete teams of 4 players each can be formed with no unpaired players.","solution":"def tournament(T, cases): Function to determine the number of complete teams formed and the number of unpaired players. Params: T (int): Number of test cases cases (list): List of tuples, each containing: - P (int): Total number of players - K (int): Team size Returns: list: List of tuples with the number of complete teams and the number of unpaired players for each test case results = [] for case in cases: P, K = case complete_teams = P // K unpaired_players = P % K results.append((complete_teams, unpaired_players)) return results"},{"question":"Given an array of integers, find the maximum product that can be obtained from any three integers in the array. Write a function maximum_product_of_three(nums) (in Python) which returns this maximum product. Example: nums = [1, 10, 2, 6, 5, 3] maximum_product_of_three(nums) should return 300, which is the product of 10, 6, and 5. Note: - The array will always contain at least three integers. - The integers can be positive or negative.","solution":"def maximum_product_of_three(nums): Returns the maximum product that can be obtained from any three integers in the array. nums.sort() return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])"},{"question":"Given an array of integers representing the heights of consecutive skyscrapers in a city, you are to determine the maximum number of consecutive skyscrapers that are in strictly increasing order of height. -----Input----- - The first line of the input contains an integer N, the number of skyscrapers. - The second line contains N space-separated integers representing the heights of the skyscrapers. -----Output----- Print a single integer — the maximum number of consecutive skyscrapers with strictly increasing heights. -----Constraints----- - 1 le N le 1000 - 1 le Height of each skyscraper le 10^6 -----Example Input 1----- 6 1 2 1 2 3 4 -----Example Output 1----- 4 -----Explanation----- The longest period of consecutive increasing skyscrapers is 2 rightarrow 3 rightarrow 4, which has a length of 4. -----Example Input 2----- 5 5 4 3 2 1 -----Example Output 2----- 1 -----Explanation----- Each skyscraper is shorter than the previous one, so the maximum number of consecutive increasing skyscrapers is 1 (each skyscraper itself). -----Example Input 3----- 7 2 3 5 1 2 3 4 -----Example Output 3----- 4 -----Explanation----- The longest period of consecutive increasing skyscrapers is 1 rightarrow 2 rightarrow 3 rightarrow 4, which has a length of 4.","solution":"def max_consecutive_increasing_skyscrapers(n, heights): Finds the maximum number of consecutive skyscrapers with strictly increasing heights. :param n: integer (number of skyscrapers) :param heights: list of integers (heights of the skyscrapers) :return: integer (maximum number of consecutive increasing skyscraper heights) if n == 1: return 1 max_length = 1 current_length = 1 for i in range(1, n): if heights[i] > heights[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Create a function that takes a list of integers as input and returns the list with all integers rearranged in such a way that the even numbers appear before the odd numbers while maintaining their original relative order. Function Signature: `def rearrange_even_odd(nums: List[int]) -> List[int]:` # Example: **Input:** ```python nums = [4, 3, 2, 1, 5, 6, 7] ``` **Output:** ```python [4, 2, 6, 3, 1, 5, 7] ``` **Input:** ```python nums = [1, 3, 5, 7] ``` **Output:** ```python [1, 3, 5, 7] ``` **Input:** ```python nums = [2, 4, 6, 8] ``` **Output:** ```python [2, 4, 6, 8] ``` # Constraints: - The input list will contain at least one integer. - The integers are assumed to be positive.","solution":"from typing import List def rearrange_even_odd(nums: List[int]) -> List[int]: Rearranges the list so that all even numbers appear before the odd numbers while maintaining their relative order. evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds"},{"question":"Problem: The kingdom of Westeros is divided into several regions, each represented by a unique number. Your task is to help sort these regions according to their power level. The power level of a region can be calculated as the sum of the squares of its digits. Given a list of region numbers, you need to sort them in ascending order based on their power level. If two regions have the same power level, they should appear in the order they were originally listed. Input: The first line contains an integer T (number of test cases). The next T lines will each contain a single line with a space-separated list of N integers representing the region numbers. Output: For each test case, print a single line containing the region numbers sorted by their power level. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 Each region number is a positive integer and has at most 9 digits. SAMPLE INPUT 2 12 34 56 78 123 321 213 SAMPLE OUTPUT 12 34 56 78 123 213 321 Explanation For the first test case:­ - Power level of 12: 1^2 + 2^2 = 1 + 4 = 5 - Power level of 34: 3^2 + 4^2 = 9 + 16 = 25 - Power level of 56: 5^2 + 6^2 = 25 + 36 = 61 - Power level of 78: 7^2 + 8^2 = 49 + 64 = 113 For the second test case: - Power level of 123: 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 - Power level of 321: 3^2 + 2^2 + 1^2 = 9 + 4 + 1 = 14 - Power level of 213: 2^2 + 1^2 + 3^2 = 4 + 1 + 9 = 14 Since all regions in the second test case have the same power level, they appear in the same order as they were provided in the input.","solution":"def power_level(number): Computes the power level of a number which is defined as the sum of the squares of its digits. return sum(int(digit) ** 2 for digit in str(number)) def sort_regions_by_power_level(test_cases): Sorts regions by their power levels for a given list of test cases. Each test case is a list of space-separated region numbers. Args: test_cases: List of strings, where each string is a space-separated list of region numbers. Returns: List of strings, where each string contains the region numbers sorted by their power levels. result = [] for case in test_cases: regions = case.split() sorted_regions = sorted(regions, key=lambda x: (power_level(x), int(x))) result.append(\\" \\".join(sorted_regions)) return result"},{"question":"Write a program which reads an undirected tree T = (V, E), and finds the diameter of the tree. The diameter of a tree is defined as the longest path between any two vertices. Constraints * 1 leq n leq 100 Input In the first line, an integer n denoting the number of vertices, is given. In the next n-1 lines, pairs of vertices u and v representing an edge between vertex u and vertex v are given. Output Print a single integer representing the diameter of the tree. Example Input 5 1 2 2 3 3 4 4 5 Output 4","solution":"from collections import defaultdict, deque def tree_diameter(n, edges): def bfs(start): dist = [-1] * (n + 1) dist[start] = 0 q = deque([start]) farthest_node = start max_dist = 0 while q: node = q.popleft() for neighbor in graph[node]: if dist[neighbor] == -1: dist[neighbor] = dist[node] + 1 q.append(neighbor) if dist[neighbor] > max_dist: max_dist = dist[neighbor] farthest_node = neighbor return farthest_node, max_dist # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) start = 1 farthest_node_from_start, _ = bfs(start) _, diameter = bfs(farthest_node_from_start) return diameter # Function to handle input and output def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) edges = [] for i in range(1, len(data), 2): u = int(data[i]) v = int(data[i + 1]) edges.append((u, v)) print(tree_diameter(n, edges))"},{"question":"A: Binary Tree Balance Brian is learning about binary trees and is particularly interested in balanced binary trees. A binary tree is considered balanced if, for every node in the tree, the height of its left and right subtrees differ by at most one. Brian wants to write a program that determines whether a given binary tree is balanced. A binary tree is represented as a sequence of values in a level-order format using an array. In this array, each element either holds an integer value representing a node, or the special character \'#\' representing a null node. Write a function that determines whether the given binary tree is balanced and returns `True` if it is balanced and `False` otherwise. Input The input consists of a single line containing a space-separated list of values representing the binary tree in level-order format. Output Output `True` if the binary tree is balanced, otherwise `False`. Sample Input 1 1 2 3 4 5 # # Sample Output 1 True Sample Input 2 1 2 3 4 # # 5 6 Sample Output 2 False In this case, the tree rooted at node 2 is unbalanced because the left subtree (node 4) has a height of 2, while its right subtree is empty. Constraints: - The number of nodes in the tree is in the range [1, 1000]. - Each value in the tree (excluding \'#\') is a unique integer within the range [1, 1000]. Example Input 1 2 3 4 # # # Output True","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_balanced(root): def check(node): if node is None: return 0, True left_height, left_balanced = check(node.left) right_height, right_balanced = check(node.right) balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return max(left_height, right_height) + 1, balanced height, balance = check(root) return balance def build_tree(level_order): if not level_order or level_order[0] == \\"#\\": return None it = iter(level_order) root = TreeNode(int(next(it))) queue = [root] try: while queue: node = queue.pop(0) left_val = next(it) if left_val != \\"#\\": node.left = TreeNode(int(left_val)) queue.append(node.left) right_val = next(it) if right_val != \\"#\\": node.right = TreeNode(int(right_val)) queue.append(node.right) except StopIteration: pass return root def is_tree_balanced_from_level_order(level_order): level_order = level_order.split() root = build_tree(level_order) return is_balanced(root)"},{"question":"------Read problems statements in Hindi, Mandarin chinese , Russian and Vietnamese as well. ------ Tara loves playing with numbers, especially arranging them in interesting patterns. One day, she stumbled upon an interesting pattern using prime numbers. She challenges you to write a program that finds the smallest prime number greater than a given integer N and adds it to the sum of the digits of another given integer M. Your goal is to help Tara by writing a program that meets her challenge. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. For each test case, there are two space-separated integers, N and M. ------ Output ------ For each test case, print a single line containing one integer — the sum of the smallest prime number greater than N and the sum of the digits of M. ------ Constraints ------ 1 ≤ T ≤ 1,000 1 ≤ N, M ≤ 10^9 ------ Note ------ Prime numbers are integers greater than 1 that have no divisors other than 1 and themselves. ----- Sample Input 1 ------ 2 10 123 17 456 ----- Sample Output 1 ------ 16 475 ----- Explanation 1 ------ Example case 1: The smallest prime number greater than 10 is 11. The sum of the digits of 123 is 1 + 2 + 3 = 6. Therefore, 11 + 6 = 17. Example case 2: The smallest prime number greater than 17 is 19. The sum of the digits of 456 is 4 + 5 + 6 = 15. Therefore, 19 + 15 = 34.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def next_prime(n): if n <= 1: return 2 prime = n + 1 while not is_prime(prime): prime += 1 return prime def sum_of_digits(m): return sum(int(digit) for digit in str(m)) def solve(test_cases): results = [] for n, m in test_cases: prime = next_prime(n) digits_sum = sum_of_digits(m) results.append(prime + digits_sum) return results"},{"question":"Write a function to check if a given number is an Armstrong Number. An Armstrong Number (also known as a narcissistic number, or pluperfect, or Plus Perfect number) is a number that is equal to the sum of its own digits each raised to the power of the number of digits. Example 1: Input: 153 Output: 1 Explanation: 1^3 + 5^3 + 3^3 = 153 Example 2: Input: 9474 Output: 1 Explanation: 9^4 + 4^4 + 7^4 + 4^4 = 9474 Example 3: Input: 1234 Output: 0 Explanation: 1^4 + 2^4 + 3^4 + 4^4 is not equal to 1234. Your Task: You don\'t need to read or print anything. Your task is to complete the function is_Armstrong() which takes the number as input parameter and returns 1 if it is an Armstrong Number otherwise returns 0. Expected Time Complexity: O(Number of digits in N) Expected Space Complexity: O(1) Constraints: 1 <= n <= 1000000","solution":"def is_Armstrong(n): Checks if the given number is an Armstrong Number. Parameters: n (int): The number to check. Returns: int: 1 if n is an Armstrong Number, otherwise 0. num_str = str(n) num_digits = len(num_str) armstrong_sum = sum(int(digit) ** num_digits for digit in num_str) return 1 if armstrong_sum == n else 0"},{"question":"VK Social Media has decided to introduce a new feature that allows users to create personalized photo albums. Each photo album can contain photos with specific themes. However, to maintain a consistent appearance, the photos must be sorted in a non-decreasing order based on their resolution. Each photo has a resolution value and a unique identifier. Your task is to determine if it\'s possible to reorganize the photos in such a way that each album has photos sorted by their resolution value and that no album contains two photos with the same identifier. Input: - The first line contains a single integer n, the number of photos (1 ≤ n ≤ 200,000). - The second line contains n integers representing the resolution values of the photos (1 ≤ resolution_i ≤ 10^9). - The third line contains n unique integers representing the identifiers of the photos (1 ≤ identifier_i ≤ 10^9). Output: - Print \\"YES\\" if it\'s possible to divide the photos into one or more albums such that in each album, the photos are sorted by their resolution and no two photos have the same identifier. - Otherwise, print \\"NO\\". Example Input 5 4 3 2 1 5 10 20 30 40 50 Output YES Input 4 2 2 3 1 11 22 33 44 Output NO Explanation In the first example, the photos can be reorganized into different albums where each album maintains a non-decreasing order of resolutions, and each photo has a unique identifier. In the second example, the second and third photos have the same resolution value (2), which means they cannot be part of the same album without violating the unique identifier rule. Thus, the output is \\"NO\\".","solution":"def can_create_albums(n, resolutions, identifiers): Determines if it\'s possible to create albums with photos sorted by resolution and no duplicate identifiers in an album. # Pair resolutions with identifiers and sort by resolutions paired_photos = sorted(zip(resolutions, identifiers), key=lambda x: x[0]) # Iterate over sorted pairs to check for unique resolutions for i in range(n - 1): if paired_photos[i][0] == paired_photos[i + 1][0]: return \\"NO\\" return \\"YES\\""},{"question":"You are a software engineer at a company that manages an extensive collection of images. One common task you need to perform is finding groups of anagrams among the image filenames in a given batch. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For this task, you have to write a function that takes a list of filenames and returns a list of lists, where each list contains filenames that are anagrams of each other. -----Input----- - A single integer n representing the number of filenames. - A list of n space-separated strings, where each string S represents a filename (1 ≤ |S| ≤ 100). -----Output----- - A list of lists, where each list contains filenames that are anagrams of each other. The lists can be in any order, and the filenames within each list can also be in any order. -----Constraints----- - 1 le n le 10^4 - Filenames consist of lowercase English letters only. -----Example Input----- 6 listen silent enlists google inlets bananas -----Example Output----- [ [\\"listen\\", \\"silent\\", \\"inlets\\"], [\\"enlists\\"], [\\"google\\"], [\\"bananas\\"] ] -----Explanation----- Example case: - The filenames \\"listen\\", \\"silent\\", and \\"inlets\\" are anagrams of each other. - The filename \\"enlists\\" is alone in its anagram group. - The filename \\"google\\" is alone in its anagram group. - The filename \\"bananas\\" is alone in its anagram group.","solution":"from collections import defaultdict def group_anagrams(filenames): Groups filenames that are anagrams of each other. Parameters: filenames (list of str): List of filenames. Returns: list of list of str: List of lists where each list contains filenames that are anagrams of each other. anagram_map = defaultdict(list) for filename in filenames: sorted_filename = \'\'.join(sorted(filename)) anagram_map[sorted_filename].append(filename) return list(anagram_map.values())"},{"question":"In a magical land called Theoricum, the inhabitants use unique symbols to represent numbers. Their numbering system is not positional like ours but rather hierarchical. In this system, smaller symbols can be subtracted from larger symbols if placed directly in front of them. Each symbol individually represents a specific value, and the total value can be computed by summing up the values of all symbols, taking into account the subtraction rule. The valid symbols and their values are as follows: - X = 10 - V = 5 - I = 1 Given a string of Theoricum symbols, your task is to compute the integer value represented by that string. To compute the value: 1. Add the value of each symbol to a running total. 2. If a symbol representing a smaller value is followed by one representing a larger value, subtract the smaller value twice (to correct the initial addition and then subtract it). For example: - The string \\"XVI\\" represents 10 + 5 + 1 = 16. - The string \\"XIV\\" represents 10 + (5 - 1) = 10 + 4 = 14. Input - A single line containing a string of Theoricum symbols. The string length is at most 100. Output - A single integer representing the value of the given string. Examples Input: XVI Output: 16 Input: XIV Output: 14","solution":"def theoricum_value(symbols): Computes the integer value represented by a string of Theoricum symbols. Parameters: symbols (str): A string of Theoricum symbols. Returns: int: The integer value of the given Theoricum symbols. # Dictionary to store the values of the symbols symbol_values = {\'X\': 10, \'V\': 5, \'I\': 1} total_value = 0 prev_value = 0 for symbol in symbols: curr_value = symbol_values[symbol] total_value += curr_value # If the current symbol value is greater than the previous symbol value, # it means we need to subtract twice the previous symbol value (once # to correct the addition and once more for the subtraction rule) if curr_value > prev_value: total_value -= 2 * prev_value prev_value = curr_value return total_value"},{"question":"You are given an integer array `nums`, and your task is to remove duplicates in such a way that each element appears at most twice. After removing the duplicates, return the new length of the array. Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory. You have to answer multiple such queries. -----Input----- First line of the input contains one integer `q` (1 le q le 10^4) — the number of queries. Each of the next `q` lines contains one query. Each query starts with an integer `n` (1 le n le 10^5) — the length of the array `nums`, followed by `n` integers representing the elements of the array. It is guaranteed that the sum of all `n` values in a single test won\'t exceed 10^5. -----Output----- For each query output one integer — the new length of the array after duplicates are removed in such a way that each element appears at most twice. -----Example----- Input 3 6 1 1 1 2 2 3 5 1 1 1 1 1 7 0 0 1 1 1 2 3 Output 5 2 6","solution":"def remove_duplicates(nums): Function to remove duplicates such that each element appears at most twice. Modify the input array in-place and return the new length of the array. if not nums: return 0 n = len(nums) if n < 3: return n index = 2 for i in range(2, n): if nums[i] != nums[index - 2]: nums[index] = nums[i] index += 1 return index def process_queries(queries): Function to process multiple queries. results = [] for query in queries: n, *nums = query results.append(remove_duplicates(nums)) return results # Example usage: queries = [ [6, 1, 1, 1, 2, 2, 3], [5, 1, 1, 1, 1, 1], [7, 0, 0, 1, 1, 1, 2, 3] ] print(process_queries(queries)) # Output: [5, 2, 6]"},{"question":"Rotate Matrix: You are given an NxN integer matrix. Rotate the matrix 90 degrees clockwise. ------ Input Format ------ The first line of input contains a single integer T - the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer N - the size of the NxN matrix. The next N lines contain N integers each, representing the matrix elements. ------ Output Format ------ For each test case, output the rotated NxN matrix. Each row of the output should be on a new line, and each element within a row should be space-separated. ------ Constraints ------ 1 ≤ T ≤ 10^{2} 1 ≤ N ≤ 10^{3} ------ Sample Input 1 ------ 1 3 1 2 3 4 5 6 7 8 9 ------ Sample Output 1 ------ 7 4 1 8 5 2 9 6 3 ------ Explanation 1 ------ The rotated matrix results from rotating the input matrix 90 degrees clockwise. Initial matrix: 1 2 3 4 5 6 7 8 9 Rotated matrix: 7 4 1 8 5 2 9 6 3","solution":"def rotate_matrix(matrix): Rotates the given NxN matrix 90 degrees clockwise. n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n-1-i] = matrix[i][j] return rotated def process_test_cases(test_cases): Processes multiple test cases and returns the rotated matrices. results = [] for matrix in test_cases: rotated = rotate_matrix(matrix) results.append(rotated) return results"},{"question":"Emma is preparing for a programming competition, and she needs your help with one of the challenges. The challenge involves string manipulation and generating permutations. The problem statement is: Emma is given a string S consisting of lowercase letters. She needs to find all unique permutations of the string S that are also valid dictionary words. A dictionary of valid words is also provided. You need to write a function that takes the string S and the dictionary of valid words as input and returns a list of all unique permutations of S that are valid dictionary words. For example, if the string S is \\"abc\\" and the dictionary of valid words is [\\"abc\\", \\"acb\\", \\"bac\\", \\"cab\\"], the unique valid permutations of the string S in the dictionary are [\\"abc\\", \\"acb\\", \\"bac\\", \\"cab\\"]. INPUT The first line denotes the string S. The second line contains space-separated valid dictionary words. OUTPUT A list of unique permutations of the string S that are valid dictionary words. CONSTRAINTS - The length of string S should be ≤ 10. - Every character in the string S is a lowercase letter. - The dictionary of valid words will contain only lowercase letters and will have at most 1000 words. SAMPLE INPUT cba abc acb bac cab SAMPLE OUTPUT [\\"abc\\", \\"acb\\", \\"bac\\", \\"cab\\"]","solution":"import itertools def valid_permutations(S, dictionary): Returns a list of unique permutations of the string S that are valid dictionary words. Args: S (str): The input string. dictionary (list): List of valid dictionary words. Returns: list: List of unique permutations that are valid dictionary words. # Create a set of unique permutations of the string S permutations = set(itertools.permutations(S)) # Convert each permutation from tuple back to string and filter those that are in the dictionary valid_words = [\\"\\".join(perm) for perm in permutations if \\"\\".join(perm) in dictionary] return valid_words"},{"question":"Given a 2D grid of size N x M representing a city map, where each cell is either \'0\' (empty) or \'1\' (occupied by a building), determine the size of the largest square sub-grid that contains only empty cells. If no such square exists, return 0. ----Constraints---- - 1 leq N, M leq 100 - Each cell in the grid is \'0\' or \'1\'. -----Input----- Input is given from Standard Input in the following format: N M grid_row_1 grid_row_2 ... grid_row_N Each `grid_row_i` is a string of length M consisting of \'0\' and \'1\'. -----Output----- Print the size of the largest square sub-grid that contains only empty cells. -----Sample Input----- 5 6 101001 100000 101011 100001 101110 -----Sample Output----- 2 In this example, the largest square of empty cells (all \'0\'s) has a size of 2x2.","solution":"def largest_empty_square(N, M, grid): if N == 0 or M == 0: return 0 # Create a 2D dp array initialized to 0 dp = [[0] * M for _ in range(N)] max_side_length = 0 # Fill the dp array for i in range(N): for j in range(M): if grid[i][j] == \'0\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"In a small town, the local library keeps track of the circulation of its books. Each book has a unique ID, and each borrowing record contains a book ID and a timestamp indicating when the book was borrowed. Additionally, each borrowing record also indicates when the book was returned, or it has a value of -1 if the book has not been returned yet. The library wants to analyze its records to determine the most borrowed books. To help with this, you need to write a program that lists the book IDs of the top k most borrowed books along with their respective borrow counts. If multiple books have the same borrow count, they should be sorted by their ID in ascending order. Input The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of borrowing records in the library. Each of the next n lines contains three space-separated elements: - Integer book_id (1 ≤ book_id ≤ 100 000) — the ID of the borrowed book. - Integer borrow_time (1 ≤ borrow_time ≤ 100 000) — the time when the book was borrowed. - Integer return_time (borrow_time ≤ return_time ≤ 100 000 or -1) — the time when the book was returned or -1 if not yet returned. The last line contains a single integer k (1 ≤ k ≤ 100 000) — the number of top borrowed books to display. Output Print k lines. Each line should contain the ID of one of the top k most borrowed books and its borrow count, separated by a space. The books should be listed in order of their borrow count in descending order. If two books have the same borrow count, list them by their ID in ascending order. Examples Input 5 101 1 5 102 2 -1 101 6 10 103 3 8 102 11 15 3 Output 101 2 102 2 103 1 Input 4 201 1 3 201 4 6 202 2 5 203 3 7 2 Output 201 2 202 1 Note In the first example, book ID 101 and book ID 102 both have a borrow count of 2, while book ID 103 has a borrow count of 1. Since k = 3, all books are listed. Book ID 101 is listed before book ID 102 because all borrow counts are sorted by book ID where counts are even. In the second example, book ID 201 has a borrow count of 2, while book ID 202 and book ID 203 each have a borrow count of 1. However, since k = 2, only the top 2 most borrowed books are listed. Book ID 201 comes before book ID 202 since its borrow count is higher.","solution":"def top_k_most_borrowed_books(records, k): from collections import defaultdict, Counter # Initialize counter for book borrow counts borrow_counts = Counter() # Count borrows for each book ID for record in records: book_id = record[0] borrow_counts[book_id] += 1 # Create a sorted list of tuples (borrow_count, book_id) sorted_books = sorted( [(count, book_id) for book_id, count in borrow_counts.items()], key=lambda x: (-x[0], x[1]) ) # Create result list of top k entries result = [(book_id, count) for count, book_id in sorted_books[:k]] return result"},{"question":"Alice loves to play jumping games with her friends. In one such game, she has to start at the position 0 on a number line and make jumps landing on specific positions onto a sequence of targets given as an array. Each target can be positive or zero. However, Alice can only make a jump if the distance between her current position and the target is exactly a multiple of m. Given her starting position of 0, the values of the array representing the targets she needs to land on, and the integer m, determine if Alice can land on all the targets exactly as given in the sequence. ----Input---- The first line of the input contains an integer m (1 ≤ m ≤ 10^6) — the fixed distance multiple for Alice\'s jumps. The second line contains an integer n (1 ≤ n ≤ 1000) — the number of targets on the number line. The third line contains n integers t1, t2, …, tn (0 ≤ ti ≤ 10^9) — the positions of the targets on the number line. ----Output---- Print \\"YES\\" (without quotes) if Alice can land on all the targets exactly as given in the sequence, otherwise print \\"NO\\". ----Examples---- Input 2 3 2 4 6 Output YES Input 3 3 3 5 9 Output NO Input 5 4 5 10 15 20 Output YES","solution":"def can_alice_jump(m, targets): Determine if Alice can land on all the targets exactly as given in the sequence. :param m: The fixed distance multiple for Alice\'s jumps :param targets: List of target positions on the number line :return: \\"YES\\" if Alice can land on all the targets, otherwise \\"NO\\" for target in targets: if target % m != 0: return \\"NO\\" return \\"YES\\""},{"question":"In a land far away, there is a kingdom where there are n towns connected by m roads. Each road connects exactly two towns and is bidirectional. The kingdom is represented by a graph with towns as nodes and roads as edges. The kingdom periodically experiences severe storms that can destroy some of the roads. The king has hired you as a royal programmer to manage the kingdom\'s infrastructure. You need to answer queries to help ensure that the kingdom remains connected after storms. Specifically, you need to process the following types of queries: 1. Build a new road between two towns u and v. 2. Destroy an existing road between two towns u and v. 3. Check the number of connected components in the kingdom after any number of road modifications. A connected component is a maximal set of towns such that there is a path (direct or indirect) between any two towns in the set. -----Input----- The first line contains two integers n and m (1 leq n leq 10^5, 0 leq m leq 2 cdot 10^5) — the number of towns and the number of roads initially. The next m lines each contain two integers u and v (1 leq u, v leq n, u neq v), describing an initial road. No road is listed twice. The next line contains an integer q (1 leq q leq 2 cdot 10^5) — the number of queries. The next q lines each contain one of the following three formats: - 1 u v (1 leq u, v leq n, u neq v) — add a new road between town u and town v, which does not exist already. - 2 u v (1 leq u, v leq n, u neq v) — remove an existing road between town u and town v, which must exist. - 3 — print the number of connected components in the kingdom. -----Output----- For each type 3 query, print one integer on a new line indicating the number of connected components in the kingdom. -----Examples----- Input: 5 4 1 2 2 3 3 4 4 5 5 3 2 2 3 3 1 2 5 3 Output: 1 2 1 -----Note----- Consider the given example: - Initially, the towns form a single connected component with the roads connecting them in a sequence. - The first type 3 query returns 1, since all towns are still connected. - After removing the road between town 2 and town 3, there are now two connected components (one containing towns 1 and 2, and the other containing towns 3, 4, and 5). - The second type 3 query correctly returns 2. - Adding a road between town 2 and town 5 reconnects the towns into a single component. - The third type 3 query returns 1, reflecting the current state of the road network.","solution":"class UnionFind: def __init__(self, n): self.n = n self.parent = list(range(n)) self.rank = [1] * n self.components = n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 self.components -= 1 def connected_components(self): return self.components def process_queries(n, m, initial_roads, q, queries): uf = UnionFind(n) road_set = set() for u, v in initial_roads: uf.union(u - 1, v - 1) road_set.add((u, v)) road_set.add((v, u)) result = [] for query in queries: if query[0] == 1: u, v = query[1], query[2] if (u, v) not in road_set: uf.union(u - 1, v - 1) road_set.add((u, v)) road_set.add((v, u)) elif query[0] == 2: u, v = query[1], query[2] if (u, v) in road_set: road_set.remove((u, v)) road_set.remove((v, u)) # Recompute connected components (expensive but simplifies code) uf = UnionFind(n) for road in road_set: uf.union(road[0] - 1, road[1] - 1) elif query[0] == 3: result.append(uf.connected_components()) return result"},{"question":"Given a series of m appointments, with each appointment being either a meeting, a conference call, or a task, you need to determine the optimal schedule for a single worker to complete all appointments entirely within the given duration. Each appointment has a specified start time and end time, and the worker can only work on one appointment at a time. Your objective is to find the maximum number of appointments that can be scheduled without overlap. -----Input----- The first line of the input contains an integer m (1 ≤ m ≤ 10,000) — the number of appointments. Each of the next m lines contains two integers, representing the start time and end time of an appointment (0 ≤ start < end ≤ 10^9). -----Output----- Output a single integer — the maximum number of non-overlapping appointments that can be scheduled. -----Example----- Input 5 1 3 2 5 4 6 6 7 5 9 Output 3 -----Note----- In the sample test case, the maximum number of non-overlapping appointments the worker can schedule is 3. One possible optimal schedule is the appointments from 1 to 3, 4 to 6, and 6 to 7. This ensures the worker is occupied with the maximum number of appointments without any overlaps.","solution":"def max_non_overlapping_appointments(appointments): Determines the maximum number of non-overlapping appointments. # Sort appointments by end time appointments.sort(key=lambda x: x[1]) last_end_time = -1 max_appointments = 0 for start, end in appointments: if start >= last_end_time: max_appointments += 1 last_end_time = end return max_appointments"},{"question":"Tommy loves to play with strings. Recently, he came across the problem of finding the longest palindromic subsequence within a given string. A palindromic subsequence is a sequence that reads the same backward as forward, and it doesn\'t have to be contiguous in the original string. Can you help Tommy find the length of the longest palindromic subsequence in the given string? You can read about longest palindromic subsequence there: https://en.wikipedia.org/wiki/Longest_palindromic_subsequence -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters. -----Output----- Print the length of the longest palindromic subsequence. -----Examples----- Input 7 abacaba Output 7 Input 5 abcde Output 1 -----Note----- The answer for the first test sample is the whole string \\"abacaba\\", which is already a palindrome. The answer for the second test sample is any single character, as no longer palindromic subsequence exists. For example, \\"a\\".","solution":"def longest_palindromic_subsequence(s): Calculate the length of the longest palindromic subsequence in the given string. Parameters: s (str): The input string. Returns: int: The length of the longest palindromic subsequence. n = len(s) # Create a 2D array to store the subsequence lengths dp = [[0 for _ in range(n)] for _ in range(n)] # A single character is always a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the dp table for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The length of the longest palindromic subsequence is in dp[0][n-1] return dp[0][n - 1]"},{"question":"Tom loves reading books and he recently stumbled upon a treasure trove of various books. However, he soon found out that all the books are jumbled up and not in order. Tom wants to organize his books so that he can quickly find any book he wants to read. To do this, he needs to sort the books by their thickness in ascending order. Given the thickness of books as an array of integers, write a function to sort the books by their thickness. # Function Signature ```python def sort_books_by_thickness(thicknesses: List[int]) -> List[int]: ``` # Input - A list of integers `thicknesses` where each integer represents the thickness of a book (1 <= len(thicknesses) <= 10^5, 1 <= thickness of each book <= 10^4). # Output - A list of integers representing the sorted thicknesses of the books. # Example ```python >>> sort_books_by_thickness([3, 1, 2, 5, 4]) [1, 2, 3, 4, 5] >>> sort_books_by_thickness([10, 7, 2, 5, 1]) [1, 2, 5, 7, 10] ``` # Note - You may assume that the sorting operation needs to be efficient to handle the upper constraints gracefully. - The result should be a new list with the thicknesses sorted in non-decreasing order. # Hint - Consider using an efficient sorting algorithm like Timsort (used by Python\'s built-in sorted function) which has a time complexity of O(n log n) on average.","solution":"from typing import List def sort_books_by_thickness(thicknesses: List[int]) -> List[int]: Sorts the given list of book thicknesses in ascending order. :param thicknesses: List of integers where each integer represents the thickness of a book. :return: List of integers representing the sorted thicknesses of the books. return sorted(thicknesses)"},{"question":"Implement a calendar reminder application. The application should accept a list of calendar events and query times. For each query, determine if there is any event happening at that exact time. Assume times are given in 24-hour format without dates. Events and queries are provided in the following format: - Events: A list of strings `events`, where each string represents an event in the format `HH:MM EventDescription` - Query times: A list of strings `queries`, where each string represents a query in the format `HH:MM` For each query, output the corresponding event description if there is an event at that time. If there is no event, output \\"No event\\". Function Signature: ```python def calendar_reminders(events: List[str], queries: List[str]) -> List[str]: pass ``` **Input:** - `events`: A list of strings, each string in the format `HH:MM EventDescription` (1 <= len(events) <= 1000) - `queries`: A list of strings, each string in the format `HH:MM` (1 <= len(queries) <= 1000) **Output:** - Return a list of strings; each string is an event description for the corresponding query time, or \\"No event\\" if there is no event at that time. **Constraints:** - Event times and query times are in the format `HH:MM` and are guaranteed to be valid. - Event descriptions do not contain spaces and have a length of at least 1 character and at most 50 characters. **Example:** Input: ```python events = [ \\"08:00 Breakfast\\", \\"12:00 Lunch\\", \\"18:30 Dinner\\" ] queries = [ \\"08:00\\", \\"08:30\\", \\"12:00\\", \\"18:30\\", \\"19:00\\" ] ``` Output: ```python [ \\"Breakfast\\", \\"No event\\", \\"Lunch\\", \\"Dinner\\", \\"No event\\" ] ``` Explanation: - At 08:00, there is \\"Breakfast\\". - At 08:30, there is no event. - At 12:00, there is \\"Lunch\\". - At 18:30, there is \\"Dinner\\". - At 19:00, there is no event.","solution":"from typing import List def calendar_reminders(events: List[str], queries: List[str]) -> List[str]: event_dict = {} # Build a dictionary for quick lookup of events by time for event in events: time, description = event.split(\' \', 1) event_dict[time] = description # Find the event for each query time results = [] for query in queries: if query in event_dict: results.append(event_dict[query]) else: results.append(\\"No event\\") return results"},{"question":"Given a list of integers, write a function that returns all possible subsets (the power set) of the list without duplicate subsets. The elements in a subset must be in non-descending order, and the solution set must not contain duplicate subsets. Example 1: Input: nums = [1, 2, 2] Output: [ [], [1], [1, 2], [1, 2, 2], [2], [2, 2] ] Example 2: Input: nums = [0] Output: [ [], [0] ] Explanation: - In the first example, the input list contains duplicates. The resulting subsets must not contain duplicate subsets. - Ensure that each subset is sorted in non-descending order. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `subsetsWithDup()` which takes a list of integers `nums` as input and returns a list of lists representing all possible subsets in the described order. Expected Time Complexity: O(2^N) Expected Auxiliary Space: O(2^N) Constraints: - 1 <= nums.length <= 10 - -10 <= nums[i] <= 10","solution":"def subsetsWithDup(nums): Return all possible subsets of a list of integers, ensuring no duplicates. def backtrack(start, path): result.append(path) for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue backtrack(i + 1, path + [nums[i]]) nums.sort() result = [] backtrack(0, []) return result"},{"question":"Jason, a young mathematician, has been working with sequences and he comes across an interesting problem. He defines a special sequence ( S ) for a given integer ( N ). The sequence ( S ) starts from 1 and follows these rules to generate the next numbers: 1. If the current number in ( S ) is even, the next number is half of the current number. 2. If the current number in ( S ) is odd and greater than 1, the next number is three times the current number plus 1. 3. The sequence stops when it reaches 1. Jason wants to find out, for a given integer ( N ), the number of steps it takes for each ( i ) (where ( 1 leq i leq N )) to reduce to 1 following the above rules. The total number of steps for all such ( i ) combined is the output Jason seeks. Can you help Jason by writing a program that calculates the total number of steps required for all numbers from 1 to ( N ) to reduce to 1? ------ Input Format ------ - The first line contains an integer ( T ), the number of test cases. - Each of the next ( T ) lines contains a single integer ( N ). ------ Output Format ------ For each test case, output a single integer, the total number of steps required for all numbers from 1 to ( N ) to reduce to 1. ------ Constraints ------ 1 leq T leq 10^4 1 leq N leq 10^6 ------ Sample Input ------ 2 3 5 ------ Sample Output ------ 5 12 ------ Explanation ------ For ( N = 3 ): - Steps for 1: 0 (already 1) - Steps for 2: 1 (2 -> 1) - Steps for 3: 7 (3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1) Total steps: 0 + 1 + 7 = 8 For ( N = 5 ): - Steps for 1: 0 (already 1) - Steps for 2: 1 (2 -> 1) - Steps for 3: 7 (3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1) - Steps for 4: 2 (4 -> 2 -> 1) - Steps for 5: 5 (5 -> 16 -> 8 -> 4 -> 2 -> 1) Total steps: 0 + 1 + 7 + 2 + 5 = 15","solution":"def collatz_steps(n): steps = 0 while n != 1: if n % 2 == 0: n //= 2 else: n = 3 * n + 1 steps += 1 return steps def total_collatz_steps(T, test_cases): results = [] for N in test_cases: total_steps = 0 for i in range(1, N + 1): total_steps += collatz_steps(i) results.append(total_steps) return results"},{"question":"Joey is preparing for a marathon and wants to ensure he\'s in the best possible shape by tracking his daily running distances. Joey aims to run a minimum of A kilometers each day but sets a daily target up to a maximum of B kilometers, to avoid overexertion. Given the actual distance C kilometers that Joey ran on a particular day, determine if Joey has met his running goals for that day. ------ Input Format ------ - The first line of input contains an integer T, the number of test cases. - The next T lines each contain three space-separated integers A, B, and C. ------ Output Format ------ For each test case, print \\"ON TARGET\\" if Joey\'s run is within his goals, and \\"OFF TARGET\\" otherwise. Each letter of the output may be printed in either lowercase or uppercase. For example, the strings ON TARGET, on target, and On Target will be considered identical. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ A ≤ B ≤ 100 1 ≤ C ≤ 200 ----- Sample Input 1 ------ 4 5 10 7 3 8 2 2 5 5 1 4 4 ----- Sample Output 1 ------ ON TARGET OFF TARGET ON TARGET ON TARGET ----- Explanation 1 ------ Test case 1: Joey aims to run between 5 and 10 kilometers. Since he ran 7 kilometers, he is on target. Test case 2: Joey aims to run between 3 and 8 kilometers. Since he ran 2 kilometers, he is off target. Test case 3: Joey aims to run between 2 and 5 kilometers. Since he ran 5 kilometers, he is on target. Test case 4: Joey aims to run between 1 and 4 kilometers. Since he ran 4 kilometers, he is on target.","solution":"def check_run_goals(test_cases): results = [] for case in test_cases: A, B, C = case if A <= C <= B: results.append(\\"ON TARGET\\") else: results.append(\\"OFF TARGET\\") return results def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [tuple(map(int, line.split())) for line in input_lines[1:T+1]] return test_cases"},{"question":"Find the sum of all the digits of n factorial. In other words, given a number n, find the sum of all the digits of the number resulting from n!. Example 1: Input: n = 5 Output: 3 Explanation: 5! = 120. Sum of digits = 1 + 2 + 0 = 3. Example 2: Input: n = 10 Output: 27 Explanation: 10! = 3628800. Sum of digits = 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27. Your Task: You don\'t need to read or print anything. Your task is to complete the function sumOfFactorialDigits() which takes an integer n as input and returns the sum of digits of n!. Expected Time Complexity: O(n log(n)) Expected Space Complexity: O(d) where d is the number of digits in n! Constraints: 1 ≤ n ≤ 200","solution":"import math def sumOfFactorialDigits(n): Returns the sum of all the digits of n factorial. factorial = math.factorial(n) return sum(int(digit) for digit in str(factorial))"},{"question":"You are given an array of integers that represents the heights of trees planted in a row. To cultivate a more scenic environment, you need to prune certain trees so that the heights of the remaining trees are increasing from left to right. Your goal is to determine the maximum number of trees that can be kept such that their heights form a strictly increasing sequence. Write a function that takes in an integer array `treeHeights` and returns an integer representing the maximum number of trees that can be kept. Examples: ``` function([3, 4, 2, 1, 10, 6, 7]) => 4 // You can keep trees with heights [3, 4, 6, 7] or [2, 6, 7] or any other valid sequence. function([5, 10, 3, 7, 8, 9]) => 4 // You can keep trees with heights [5, 7, 8, 9] or [3, 7, 8, 9] or any other valid sequence. ``` Constraints: - The length of `treeHeights` will be at most 1000. - Each height value in `treeHeights` will be a positive integer and at most 10,000. Consider using dynamic programming to efficiently solve this problem.","solution":"def maxIncreasingSubsequenceLength(treeHeights): Returns the maximum number of trees that can be kept such that their heights form a strictly increasing sequence. if not treeHeights: return 0 n = len(treeHeights) dp = [1] * n # dp[i] will be the length of the longest increasing subsequence ending at i for i in range(n): for j in range(i): if treeHeights[j] < treeHeights[i]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"The company is organizing team-building activities and wants to analyze the participants\' technical skills. You need to write a program to assess the skill levels of participants based on their scores. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, a string S of integers separated by space. Each integer represents a participant\'s score. -----Output:----- For each test case, output a single line indicating the skill level of the participant as follows: - \\"Beginner\\" if the score is between 0 and 50 (inclusive). - \\"Intermediate\\" if the score is between 51 and 75 (inclusive). - \\"Advanced\\" if the score is between 76 and 100 (inclusive). -----Constraints----- - 1 leq T leq 50 - Each score is an integer between 0 and 100 (inclusive). -----Sample Input:----- 3 23 47 50 60 72 75 89 91 100 -----Sample Output:----- Beginner Beginner Beginner Intermediate Intermediate Intermediate Advanced Advanced Advanced","solution":"def skill_levels(T, test_cases): Determines the skill level of participants based on their scores. Parameters: T (int): Number of test cases. test_cases (list): A list containing T elements each being a string of space-separated integers (scores). Returns: list: A list of strings where each string represents the skill levels of corresponding scores. skill_levels = [] for case in test_cases: scores = map(int, case.split()) level_line = [] for score in scores: if 0 <= score <= 50: level_line.append(\\"Beginner\\") elif 51 <= score <= 75: level_line.append(\\"Intermediate\\") elif 76 <= score <= 100: level_line.append(\\"Advanced\\") skill_levels.append(\\" \\".join(level_line)) return skill_levels"},{"question":"The kingdom of Zedonia has a unique system for generating secure passwords. The system takes an input string and processes it according to the following rules: 1. If the string contains only lowercase letters, the password is the string reversed. 2. If the string contains only uppercase letters, the password is the string converted to lowercase. 3. If the string contains only digits, the password is the sum of all digits in the string. 4. If the string contains a mix of lowercase and uppercase letters, the password is the string with all uppercase letters converted to lowercase and vice versa. 5. If the string contains any special characters or a mix including digits and letters, the password is deemed invalid. Write a function to generate the password based on the given input string. -----Input----- A single line of input containing a string with a length of at most 100 characters. -----Output----- Output the generated password based on the rule described, or \\"INVALID\\" if the password is deemed invalid. -----Examples----- Sample Input: aBcDeFg Sample Output: AbCdEfG Sample Input: 12345 Sample Output: 15 Sample Input: hello Sample Output: olleh Sample Input: HELLO Sample Output: hello Sample Input: Hello123 Sample Output: INVALID","solution":"def generate_password(input_string): Generates a secure password based on the given input string based on Zedonia\'s rules. if input_string.islower(): return input_string[::-1] elif input_string.isupper(): return input_string.lower() elif input_string.isdigit(): return str(sum(int(char) for char in input_string)) elif input_string.isalpha(): return input_string.swapcase() else: return \\"INVALID\\""},{"question":"In a small village, the residents are planning to organize a relay race. Each runner has a different speed, and they will race around a circular track where the starting point is the same as the finishing point. Each participant needs to run a leg of the race without any two consecutive runners having the same running speed. The goal is to minimize the total time taken for the race. The speed of each runner is given, and you are required to find the minimum possible total time taken to complete the race such that no two consecutive runners have the same speed. Assume that the race track is divided into individual segments of equal length and the number of segments is the same as the number of runners. Input Constraints - The number of runners (N) will be between 1 and 20, inclusive. - Each runner\'s speed will be an integer between 1 and 1000. Input Format - The first line will contain the number of test cases - T. - The second line will contain an integer N that will specify how many runners are there. - The next line will contain N integers representing the speed of each runner. Output Format Print T lines showing the minimum possible total time for each test case. SAMPLE INPUT 1 3 3 6 9 SAMPLE OUTPUT 18 Explanation The possible way to arrange the runners such that no two consecutive runners have the same speed is: [3, 9, 6] or [6, 3, 9]. The minimum total time is 3 + 9 + 6 = 18.","solution":"from itertools import permutations def min_total_time(test_cases): results = [] for test in test_cases: N, speeds = test min_time = float(\'inf\') for perm in permutations(speeds): valid = True for i in range(N): if i > 0 and perm[i] == perm[i - 1]: valid = False break if valid: min_time = min(min_time, sum(perm)) results.append(min_time) return results"},{"question":"You are given an environment with a two-lane traffic road where each lane has a traffic light at the end. The two traffic lights can have different colors: red or green. In one second, a car can pass through the green light, wait if there is a red light, or switch lanes if the other lane’s light is green. You need to find the minimum time for a car to pass through the traffic lights starting from the initial lane and initial states of the traffic lights. The traffic lights will change color every `g` seconds (from red to green or from green to red). -----Input----- The first line of the input contains two integers n and g (1 le n le 10^5, 1 le g le 10^9) — the number of test scenarios and the green/red cycle time, respectively. Each of the following lines contains three characters describing the initial state of a test scenario: - The first character represents the initial state of the traffic light in the first lane (\'R\' for red and \'G\' for green). - The second character represents the initial state of the traffic light in the second lane (\'R\' for red and \'G\' for green). - The third character represents the lane from which the car starts (\'1\' for the first lane and \'2\' for the second lane). -----Output----- For each test scenario, print the minimum number of seconds required for the car to pass through the traffic lights. -----Example----- Input 3 5 RG1 GG2 RR1 Output 0 0 5 -----Note----- In the first test scenario, the car starts in lane 1 where the traffic light is red. It can immediately switch to lane 2 where the light is green and pass through without waiting. In the second test scenario, the car starts in lane 2 where the light is green, so it can pass through immediately without waiting. In the third test scenario, both traffic lights are red, so the car must wait for 5 seconds (the cycle time g) for either lane’s light to turn green.","solution":"def minimal_time_to_pass(n, g, scenarios): results = [] for scenario in scenarios: light1 = scenario[0] light2 = scenario[1] start_lane = scenario[2] # If start lane is 1 if start_lane == \'1\': if light1 == \'G\': # Green light in the starting lane results.append(0) elif light2 == \'G\': # Red light in the starting lane but green in the other lane results.append(0) else: # Both red results.append(g) # If start lane is 2 elif start_lane == \'2\': if light2 == \'G\': # Green light in the starting lane results.append(0) elif light1 == \'G\': # Red light in the starting lane but green in the other lane results.append(0) else: # Both red results.append(g) return results"},{"question":"Little John has a collection of n distinct stamps. He likes to display his stamps in special album pages that can hold one row of k stamps each. John wants to create the maximum number of completely filled rows. He also wants to find out how many stamps, if any, will remain after filling as many rows as possible. Given the total number of stamps n and the number of slots k in each row, determine the maximum number of completely filled rows John can create and the number of stamps that will remain. Input The input consists of a single line containing two integers n and k (1 ≤ n ≤ 10^9, 1 ≤ k ≤ 10^9) — the total number of stamps and the number of slots in each row. Output Print two integers - the maximum number of completely filled rows John can create and the number of stamps that will remain. Examples Input 10 3 Output 3 1 Input 7 5 Output 1 2 Input 20 4 Output 5 0 Input 9 10 Output 0 9 Note In the first example, John has 10 stamps and each row holds 3 stamps. He can create 3 completely filled rows (3 * 3 = 9 stamps), and 1 stamp will remain (10 - 9 = 1). In the second example, there are 7 stamps and 5 slots in each row. John can create 1 completely filled row (1 * 5 = 5 stamps), and 2 stamps will remain (7 - 5 = 2). In the third example, with 20 stamps and 4 slots per row, John can arrange all 20 stamps into 5 completely filled rows without any remaining stamps. In the fourth example, John cannot fill even a single row completely with 9 stamps if each row holds 10 slots, so all 9 stamps will remain.","solution":"def calculate_filled_rows_and_remaining_stamps(n, k): Calculate the maximum number of completely filled rows of stamps and the remaining stamps. :param n: Total number of stamps (1 ≤ n ≤ 10^9) :param k: Number of slots in each row (1 ≤ k ≤ 10^9) :return: A tuple of two integers - maximum number of completely filled rows and the number of remaining stamps filled_rows = n // k remaining_stamps = n % k return filled_rows, remaining_stamps"},{"question":"You are given a set of n sequences, each containing a set of lowercase letters. Your task is to find the length of the longest sequence that can serve as a subset subsequence for all the given sequences. A string S is considered a subset subsequence of another string T if we can obtain S by deleting some (possibly none or all) characters from T, while keeping the remaining characters in the same order. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of sequences. The next n lines each contain a string consisting of lowercase English letters. -----Output----- Output a single integer — the length of the longest subset subsequence that can be found in all given sequences. -----Examples----- Input 3 abc abcd abdc Output 3 Input 2 geeksforgeeks geeks Output 5","solution":"def longest_subset_subsequence_length(n, sequences): Returns the length of the longest subset subsequence that can be found in all given sequences. from collections import Counter if n == 1: return len(sequences[0]) min_freq_dict = Counter(sequences[0]) for seq in sequences[1:]: current_freq_dict = Counter(seq) for char in min_freq_dict.keys(): min_freq_dict[char] = min(min_freq_dict[char], current_freq_dict.get(char, 0)) result_length = 0 for count in min_freq_dict.values(): result_length += count return result_length"},{"question":"You are provided with two arrays a and b, each containing n integers. You need to construct a third array c of length n, where each element c[i] is defined as c[i] = a[i] + b[j] for some integer j in the range 0 leq j < n. Additionally, the array c should be lexicographically smallest. A lexicographically smallest array means that for any given two arrays of the same length, the first position where they differ has the smaller element in the current array compared to any other array. Implement the function `lexicographicallySmallestArray(a, b)`: Function Description: Complete the function `lexicographicallySmallestArray` which takes in the following parameters: - `a` (array of integers): the first input array - `b` (array of integers): the second input array Returns: - `c` (array of integers): the lexicographically smallest array of length n formed by adding each element from a with an element from b. Input Format: 1. The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the arrays. 2. The second line contains n space-separated integers, representing the elements of array a (-10^4 leq a[i] leq 10^4). 3. The third line contains n space-separated integers, representing the elements of array b (-10^4 leq b[i] leq 10^4). Example: Input: ``` 3 1 2 3 4 5 6 ``` Output: ``` 5 6 7 ``` Explanation: To create the smallest lexicographically smallest array c: - c[0] is obtained by adding the smallest available b[j] (which is b[0]) to a[0], making c[0] = 1 + 4 = 5. - Similarly, c[1] = 2 + 4 = 6. - c[2] = 3 + 4 = 7. All selected j produce the smallest possible sum at each position in c, making the array lexicographically smallest.","solution":"def lexicographicallySmallestArray(a, b): Constructs the lexicographically smallest array c from arrays a and b. Parameters: a (list of int): First list of integers. b (list of int): Second list of integers. Returns: list of int: The lexicographically smallest array c. n = len(a) b_sorted = sorted(b) c = [] for i in range(n): c.append(a[i] + b_sorted[0]) return c"},{"question":"Write a class `Matrix` that implements the following methods: 1. **Initialization** Initializes the matrix with a 2D list of numbers. ```python >>> matrix = Matrix([[1, 2], [3, 4]]) >>> matrix.data [[1, 2], [3, 4]] ``` 2. **Addition** Adds two matrices and returns a new matrix with the result. ```python >>> matrix1 = Matrix([[1, 2], [3, 4]]) >>> matrix2 = Matrix([[5, 6], [7, 8]]) >>> result = matrix1.add(matrix2) >>> result.data [[6, 8], [10, 12]] ``` 3. **Multiplication** Multiplies two matrices and returns a new matrix with the result. ```python >>> matrix1 = Matrix([[1, 2], [3, 4]]) >>> matrix2 = Matrix([[2, 0], [1, 2]]) >>> result = matrix1.multiply(matrix2) >>> result.data [[4, 4], [10, 8]] ``` 4. **Transpose** Transposes the matrix (rows become columns and vice versa). ```python >>> matrix = Matrix([[1, 2], [3, 4]]) >>> matrix.transpose() >>> matrix.data [[1, 3], [2, 4]] ``` Note: - The provided matrices for addition and multiplication will always be valid (i.e., with same dimensions for addition and valid sizes for multiplication). - Implement the methods without using any external libraries or functions that directly handle these operations (such as numpy). Use basic Python structures and algorithms.","solution":"class Matrix: def __init__(self, data): Initializes the matrix with a 2D list of numbers. self.data = data def add(self, other): Adds two matrices and returns a new matrix with the result. rows, cols = len(self.data), len(self.data[0]) result = [[self.data[i][j] + other.data[i][j] for j in range(cols)] for i in range(rows)] return Matrix(result) def multiply(self, other): Multiplies two matrices and returns a new matrix with the result. rows_a, cols_a = len(self.data), len(self.data[0]) rows_b, cols_b = len(other.data), len(other.data[0]) result = [[0 for _ in range(cols_b)] for _ in range(rows_a)] for i in range(rows_a): for j in range(cols_b): for k in range(cols_a): result[i][j] += self.data[i][k] * other.data[k][j] return Matrix(result) def transpose(self): Transposes the matrix (rows become columns and vice versa). rows, cols = len(self.data), len(self.data[0]) result = [[self.data[j][i] for j in range(rows)] for i in range(cols)] self.data = result"},{"question":"In a faraway kingdom, the king loves patterns and symmetry. One day, he discovers a sequence of integers and wonders if a certain kind of symmetry can be applied to it. The king is interested in creating a sequence that looks the same when read from left to right as it does from right to left, but with a twist. Specifically, he wants the sequence to be symmetric around a given pivot point. Given a sequence of integers seq and an index pivot, the king wants to determine if he can make the sequence symmetric around the pivot by only rearranging the elements, or if it is impossible. The sequence is symmetric around the pivot if for every element at position i to the left of the pivot, there is an equal element at position i to the right of the pivot. Essentially, seq[L - 1] = seq[R + 1], where L is the left side and R is the right side reflecting the pivot. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases to solve. Then t test cases follow. Each test case consists of two lines. The first line contains two integers n and pivot (1 le n le 10^5, 0 le pivot < n) — the length of the sequence and the index of the pivot point in the sequence respectively. The second line contains n integers, representing the sequence seq (1 le seq[i] le 10^9 for all i). It is guaranteed that the total length of all sequences across the test cases does not exceed 10^5. -----Output----- For each test case, print \\"YES\\" if it is possible to rearrange the sequence to make it symmetric around the pivot. Otherwise, print \\"NO\\". -----Examples----- Input 1 5 2 1 2 3 2 1 Output YES Input 2 6 3 1 2 3 4 3 2 5 4 1 2 3 4 5 Output NO YES","solution":"def is_symmetric_possible(t, test_cases): Determines if the sequence can be rearranged to be symmetric around a pivot. Args: t (int): The number of test cases. test_cases (list): A list of tuples, each containing: - n (int): The length of the sequence. - pivot (int): The pivot index. - seq (list): The sequence of integers. Returns: list: A list of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for n, pivot, seq in test_cases: left_part = seq[:pivot] right_part = seq[pivot+1:] if sorted(left_part) == sorted(right_part): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example use case if __name__ == \\"__main__\\": t = 3 test_cases = [ (5, 2, [1, 2, 3, 2, 1]), (6, 3, [1, 2, 3, 4, 3, 2]), (5, 4, [1, 2, 3, 4, 5]) ] print(is_symmetric_possible(t, test_cases)) # Output should be [\'YES\', \'NO\', \'NO\']"},{"question":"Given an integer array `nums` of size `n`, the task is to determine the number of inversions needed to sort the array in non-decreasing order. An inversion is defined as a pair `(i, j)` such that `i < j` and `nums[i] > nums[j]`. ------ Input ------ - The first line of the input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. - The first line of each test case contains an integer `n` denoting the size of the array. - The second line of each test case contains `n` space-separated integers representing the elements of the array `nums`. ------ Output ------ For each test case, print a single line containing one integer ― the number of inversions required to sort the array. ------ Constraints ------ - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 10^5 - 1 ≤ nums[i] ≤ 10^9 ----- Sample Input 1 ------ 2 5 2 4 1 3 5 4 8 4 2 1 ----- Sample Output 1 ------ 3 6 ----- Explanation 1 ------ Example case 1: The required inversions are (2,1), (4,3), and (2,1). Example case 2: The required inversions are (8,4), (8,2), (8,1), (4,2), (4,1), and (2,1).","solution":"def count_inversions(nums): Returns the number of inversions in the array nums if len(nums) < 2: return 0 mid = len(nums) // 2 left = nums[:mid] right = nums[mid:] inversions = count_inversions(left) + count_inversions(right) i = j = k = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: nums[k] = left[i] i += 1 else: nums[k] = right[j] j += 1 inversions += len(left) - i k += 1 while i < len(left): nums[k] = left[i] i += 1 k += 1 while j < len(right): nums[k] = right[j] j += 1 k += 1 return inversions def solve_inversion_problem(T, data): Solves the inversion problem for T test cases Parameters: T (int): Number of test cases data (list): List of tuples, each containing the size and array for the test cases Returns: list: Number of inversions for each test case results = [] for i in range(T): n, nums = data[i] results.append(count_inversions(nums)) return results"},{"question":"Nina, a software engineer, is designing an encryption scheme for secure communication. The encryption process involves replacing each character in the message with a different character that is a fixed number of positions down the alphabet. This kind of encryption is known as a Caesar cipher. However, Nina’s encryption scheme has an additional twist. For each character in the message, the number of positions to shift is not fixed but provided by a corresponding array of integers. For instance, if the message is \\"abc\\" and the shift array is [1, 2, 3], the encrypted message would be \\"bdf\\". To decode the encrypted message, the same array of integers should be used to shift the characters back by the same number of positions. For example, if the encrypted message is \\"bdf\\" and the shift array is [1, 2, 3], the original message \\"abc\\" can be restored. You need to implement both the encryption and decryption functions. -----Input----- The first line contains the string msg which is the plaintext message to be encrypted. The message string consists of lowercase English letters only and has a length 1 leq lvert msg rvert leq 1000. The second line contains an array of integers shifts separated by spaces, defining the number of positions to shift each corresponding character in the message. The length of the shifts array is equal to the length of the message, and the values of the shifts are between 0 and 25. -----Output----- Output two lines. The first line should be the encrypted message, and the second line should be the decrypted message (which should match the original input message). -----Examples----- Sample Input: hello 1 2 3 4 5 Sample Output: igopt hello Sample Input: caesar 3 1 4 1 5 9 Sample Output: fdhvdu caesar","solution":"def encrypt(msg, shifts): Encrypt the message using a Caesar cipher with variable shifts. Parameters: msg (str): The plaintext message to be encrypted. shifts (list): The list of shifts corresponding to each character in the message. Returns: str: The encrypted message. encrypted_message = [] for i, char in enumerate(msg): new_char = chr(((ord(char) - ord(\'a\') + shifts[i]) % 26) + ord(\'a\')) encrypted_message.append(new_char) return \'\'.join(encrypted_message) def decrypt(encrypted_msg, shifts): Decrypt the message using a Caesar cipher with variable shifts. Parameters: encrypted_msg (str): The encrypted message to be decrypted. shifts (list): The list of shifts that were used to encrypt the original message. Returns: str: The decrypted (original) message. decrypted_message = [] for i, char in enumerate(encrypted_msg): new_char = chr(((ord(char) - ord(\'a\') - shifts[i]) % 26) + ord(\'a\')) decrypted_message.append(new_char) return \'\'.join(decrypted_message)"},{"question":"A robot is placed at the origin (0, 0) on an infinite grid. The robot has a series of commands that it can execute to move in different directions. Each command is represented by a string of characters where each character indicates one of the four possible directions: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. The robot moves one unit in the given direction for each command character. Given a series of commands, determine the maximum distance the robot can be from the origin at any point during its path. ----- Constraints ----- - 1 leq |command| leq 10^5 - The command string is composed only of characters \'U\', \'D\', \'L\', and \'R\'. ----- Input ----- Input is given from Standard Input in the following format: command ----- Output ----- Print the maximum possible distance from the origin, as a real value. ----- Sample Input ----- UUDDLRLR ----- Sample Output ----- 2.000000000000000000000000000000000000000000000000 In the given command sequence \\"UUDDLRLR\\": - The robot moves up twice to (0, 2), which is a distance of 2 from the origin. - It then moves down twice to return to (0, 0). - Next, it moves left once to (-1, 0), and moves right once to return to (0, 0). - Finally, it moves left once to (-1, 0), and then right once to return to (0, 0). The maximum distance from the origin during this sequence of commands is 2.","solution":"def max_distance(commands): Calculate the maximum distance from the origin after executing a series of commands. :param commands: A string of commands (U, D, L, R) :return: Maximum Euclidean distance from the origin during the execution of the commands x, y = 0, 0 # Starting at the origin max_dist = 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 # Calculate the Euclidean distance from the origin current_dist = (x ** 2 + y ** 2) ** 0.5 max_dist = max(max_dist, current_dist) return max_dist"},{"question":"Given a list of non-negative integers representing the amount of rainwater trapped on different days, return the total amount of rainwater that can be trapped. The amount of rainwater trapped on any day is defined as the difference between the current day\'s rainwater and the minimum rainwater between the highest points on its left and right sides, capped at a minimum of zero. Example: - Input: `[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]` - Output: `6` Explanation: - The 1st element traps no water. - The 2nd element traps no water as there\'s no higher point on its right. - The 3rd element can trap `1` unit of water. - The 4th element traps no water as it is one of the highest points. - The 5th element can trap `1` unit of water. - The 6th element can trap `2` units of water. - The 7th element can trap `1` unit of water. - The 8th element traps no water as it is the highest point. - The 9th element can trap `1` unit of water. - The 10th element traps no water as the adjacent points are lower. - The 11th element can trap `1` unit of water. - The 12th element traps no water as it is the right-most point. Details: - The input list will always contain at least one element. - You may assume that the input list can be excessively large. - Ensure optimal time and space complexity for your solution.","solution":"def trap(height): Returns the total amount of rainwater that can be trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate the total water trapped total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - height[i] return total_water"},{"question":"Panda, fond of solving puzzles, comes across a large grid of numbers while traveling. The grid is a square matrix of size NxN, filled with non-negative integers. Panda is curious about the paths through this matrix from the top-left corner (1,1) to the bottom-right corner (N,N). However, there’s a twist: Panda is only allowed to move either right or down at any point in time. Panda wants to know the maximum sum of the numbers he can collect along any path from the top-left to the bottom-right of the grid. Help Panda determine this maximum sum. INPUT: - The first line of input contains a single integer T, denoting the number of test cases. - Each test case starts with an integer N, denoting the size of the NxN grid. - The next N lines contain N integers each, representing the grid. OUTPUT: For each test case, print the maximum sum of the numbers collected along any path from the top-left corner to the bottom-right corner. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ Grid[i][j] ≤ 100 SAMPLE INPUT 2 3 1 2 3 4 5 6 7 8 9 2 1 2 1 1 SAMPLE OUTPUT 29 4 Explanation: For the first test case, one of the optimal paths is 1→4→7→8→9, which gives the maximum sum of 29. For the second test case, one of the optimal paths is 1→2→1, which gives the maximum sum of 4.","solution":"def max_path_sum_in_grid(test_cases): results = [] for grid in test_cases: n = len(grid) # Create a DP table to store the maximum sums dp = [[0] * n for _ in range(n)] # Initialize the top-left corner of the DP table dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will contain the result results.append(dp[n-1][n-1]) return results def parse_input_string(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(input_lines[index]) grid = [] for i in range(n): grid.append(list(map(int, input_lines[index + 1 + i].split()))) test_cases.append(grid) index += n + 1 return test_cases def max_path_sum(input_string): test_cases = parse_input_string(input_string) results = max_path_sum_in_grid(test_cases) for result in results: print(result)"},{"question":"Alice loves playing with numbers and lately, she has been fascinated by subarrays. Given an array of integers, she wants to find the maximum sum of any subarray of length exactly L. Can you help her? Input The first line contains T, the number of test cases. Each test case consists of an integer N (length of the array) and L (length of the subarray) followed by N integers denoting the array elements. Output For each test case, print the maximum sum of any subarray of length exactly L. If no such subarray exists, output -1. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ L ≤ N -10^4 ≤ array elements ≤ 10^4 Note: The input can be large. Use scanning methods efficient with large I/O. SAMPLE INPUT 2 5 3 1 2 3 4 5 7 4 -1 -2 3 4 -1 2 1 SAMPLE OUTPUT 12 8 Explanation Test case 1: The subarray of length 3 with the maximum sum is [3, 4, 5], and the sum is 12. Test case 2: The subarray of length 4 with the maximum sum is [3, 4, -1, 2], and the sum is 8.","solution":"def max_subarray_sum(arr, L): n = len(arr) if L > n: return -1 # Calculate the sum of the first subarray of length L max_sum = current_sum = sum(arr[:L]) # Use sliding window approach for the rest of the subarrays for i in range(L, n): current_sum += arr[i] - arr[i - L] if current_sum > max_sum: max_sum = current_sum return max_sum def process_test_cases(T, cases): results = [] for i in range(T): N, L, arr = cases[i] result = max_subarray_sum(arr, L) results.append(result) return results"},{"question":"You are given two arrays of integers representing the money bills available in two different ATMs. Each ATM can have multiple bills of various denominations. To ensure fair service, the central bank wants to check if both ATMs have the exact same types of bills available regardless of their count. Your task is to write a function that determines whether two given arrays of integers contain the same set of unique integers. If they do, return \\"BALANCED\\", otherwise return \\"UNBALANCED\\". ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description for T test cases follows. Each test case consists of two lines: - The first line contains an integer n denoting the number of elements in the first array. - The second line contains n space-separated integers representing the bills in the first array. - The third line contains an integer m denoting the number of elements in the second array. - The fourth line contains m space-separated integers representing the bills in the second array. ------ Output ------ For each test case, output a single line containing \\"BALANCED\\" (quotes for clarity) if both arrays contain the same set of unique integers. Otherwise, output a single line containing \\"UNBALANCED\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n, m ≤ 1000 1 ≤ each bill\'s denomination ≤ 100000 ----- Sample Input 1 ------ 2 5 1 2 3 4 5 5 5 4 3 2 1 4 2 3 3 3 3 3 2 1 ----- Sample Output 1 ------ BALANCED UNBALANCED ----- Explanation 1 ------ Example case 1: Both arrays contain the same set of unique integers {1, 2, 3, 4, 5}, hence they are balanced. Example case 2: The first array contains the set {2, 3} while the second array contains the set {1, 2, 3}, so they are unbalanced.","solution":"def check_balance(T, test_cases): Given T test cases with two arrays of integers each, determines if they have the same set of unique integers. Parameters: T (int): number of test cases. test_cases (list of tuples): each tuple contains the arrays to be checked. Returns: list of str: \\"BALANCED\\" if both arrays have the same set of unique integers, otherwise \\"UNBALANCED\\". results = [] for case in test_cases: n, array1, m, array2 = case set1 = set(array1) set2 = set(array2) if set1 == set2: results.append(\\"BALANCED\\") else: results.append(\\"UNBALANCED\\") return results def parse_input(input_str): Parses the input string as per the given format. Parameters: input_str (str): input string in specified format. Returns: tuple: T and test_cases structure required for check_balance. lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(lines[index]) array1 = list(map(int, lines[index+1].split())) m = int(lines[index+2]) array2 = list(map(int, lines[index+3].split())) test_cases.append((n, array1, m, array2)) index += 4 return T, test_cases"},{"question":"Sarah has an array of positive integers representing the amount of charm required to win over different fairies in the enchanted forest. Each fairy in the forest can only be won over if the sum of the charm amounts of a contiguous subarray of the given array exactly equals the charm amount the fairy requires. Sarah can charm multiple fairies consecutively, but for now, she is focused on finding out the maximum sum of charm she can have in a single contiguous subarray of fairies (i.e., winning over the maximum number of fairies in one go). -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of charm amounts in the array. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10000) — the charm amounts. -----Output----- Print a single line - the maximum sum of charm in a single contiguous subarray. -----Examples----- Input 5 1 2 3 4 5 Output 15 Input 4 -1 2 3 -9 Output 5","solution":"def max_subarray_sum(charm_amounts): Returns the maximum sum of charm in a single contiguous subarray. Args: charm_amounts (list of int) : List of charm amounts Returns: int : Maximum sum of charm in a contiguous subarray max_sum = current_sum = charm_amounts[0] for charm in charm_amounts[1:]: current_sum = max(charm, current_sum + charm) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a programming language, the concept of ranges is often used to represent a sequence of numbers and sometimes letters. Implement a function that combines overlapping or contiguous intervals in a list. Write a function `merge_intervals` that takes a list of intervals and merges any overlapping or contiguous intervals. Each interval is represented as a tuple of two integers (start, end), where start is less than or equal to end. The intervals in the input list may not be sorted. Your function should return a list of the merged intervals, sorted by their start values. If two intervals overlap or are contiguous, they should be merged into one interval. Input - A list of n intervals, where `1 ≤ n ≤ 1000`. - Each interval is represented as a tuple of two integers `(start, end)` such that `-10^6 ≤ start ≤ end ≤ 10^6`. Output The list of merged intervals sorted by the start value. Examples Input [(1, 3), (2, 4), (5, 7), (6, 9)] Output [(1, 4), (5, 9)] Input [(10, 20), (30, 40), (15, 25), (27, 35)] Output [(10, 25), (27, 40)] Note Let\'s go through the second example. Initially, all intervals are: - (10, 20) - (30, 40) - (15, 25) - (27, 35) After merging overlapping intervals: - (10, 20) and (15, 25) merge into (10, 25) - (30, 40) and (27, 35) merge into (27, 40) Thus, the final output is: - (10, 25) - (27, 40)","solution":"def merge_intervals(intervals): if not intervals: return [] # First, sort the intervals by their start values intervals.sort(key=lambda x: x[0]) merged_intervals = [] current_start, current_end = intervals[0] for start, end in intervals[1:]: if start <= current_end: # Overlapping or contiguous intervals current_end = max(current_end, end) else: merged_intervals.append((current_start, current_end)) current_start, current_end = start, end merged_intervals.append((current_start, current_end)) return merged_intervals"},{"question":"Write a function that takes a single string of digits as input and returns the highest possible number that can be formed by rearranging those digits. If the input string is empty or contains non-digit characters, return 0. ```Python highest_number(\'4231\') # should return 4321 highest_number(\'102\') # should return 210 highest_number(\'\') # should return 0 highest_number(\'12a5\') # should return 0 ``` ```Haskell highestNumber \\"4231\\" -- should return 4321 highestNumber \\"102\\" -- should return 210 highestNumber \\"\\" -- should return 0 highestNumber \\"12a5\\" -- should return 0 ```","solution":"def highest_number(s): Takes a single string of digits as input and returns the highest possible number that can be formed by rearranging those digits. If the input string is empty or contains non-digit characters, return 0. if not s.isdigit(): return 0 return int(\'\'.join(sorted(s, reverse=True)))"},{"question":"Suppose you are managing a collection of n musical tracks at a radio station. Every hour, a new track is added to the end of the collection. The `hourly update` consists of inserting the track at the end and removing the first track due to limited storage, so the total number of tracks remains n. The listener can then choose to play a specific track from the collection. Initially, track IDs in the collection are numbered sequentially from 1 to n (i.e., track 1, track 2, ..., track n). Each new track added has an incrementally higher ID than the previous new track added. Given t test cases, calculate the current ID of the track at position x in the collection after `k` updates. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains three integers n, k, and x (1 le n le 10^9; 1 le k le 10^9; 1 le x le n) — the number of tracks, the number of hours, and the position in the collection. -----Output----- For each test case, print one integer — the ID of the track at position x after k updates. -----Examples----- Input 3 5 2 1 6 10 3 4 4 2 Output 3 17 6 -----Explanation----- In the first test case: Initially, the collection is `[1, 2, 3, 4, 5]`. After 1 update: `[2, 3, 4, 5, 6]`. After 2 updates: `[3, 4, 5, 6, 7]`. Track at position 1 is `3`. In the second test case: Initially, the collection is `[1, 2, 3, 4, 5, 6]`. After 10 updates, the collection becomes `[11, 12, 13, 14, 15, 16]`. Track at position 3 is `13`. In the third test case: Initially, the collection is `[1, 2, 3, 4]`. After 4 updates, the collection becomes `[5, 6, 7, 8]`. Track at position 2 is `6`.","solution":"def find_track_id(n, k, x): Find the ID of the track at position x after k updates. Parameters: n (int): Initial number of tracks k (int): Number of updates (hours) x (int): Position in the collection (1-indexed) Returns: int: Track ID at position x after k updates return x + k"},{"question":"Given a positive integer n, write a program that generates all valid combinations of n pairs of parentheses. Constraints: - 1 ≤ n ≤ 12 Input: The input is given in the following format ``` n ``` Output: Print all valid combinations of n pairs of parentheses such that each combination is a string of length 2n consisting only of \'(\' and \')\'. The combinations should be printed one per line in lexicographical order. Examples: Input: ``` 3 ``` Output: ``` ((())) (()()) (())() ()(()) ()()() ``` Input: ``` 2 ``` Output: ``` (()) ()() ```","solution":"def generate_parentheses(n): Generates all valid combinations of n pairs of parentheses. def backtrack(S=[], left=0, right=0): if len(S) == 2 * n: result.append(\\"\\".join(S)) return if left < n: S.append(\'(\') backtrack(S, left + 1, right) S.pop() if right < left: S.append(\')\') backtrack(S, left, right + 1) S.pop() result = [] backtrack() return sorted(result) # Example usage: # output = generate_parentheses(3) # for comb in output: # print(comb)"},{"question":"Create a function that takes a list of integers and returns the element that appears most frequently. If there is a tie, return the smallest element among them. **Constraints:** - The list will contain at least one element and at most 1000 elements. - Each element in the list will be an integer between -1000 and 1000. **Input/Output:** ``` EXAMPLES: most_frequent([1,3,2,3,2,1,1]) => 1 most_frequent([4,4,5,5,2]) => 4 most_frequent([-1,-1,0,1,1]) => -1 ``` **Explanation:** - In the first example, 1 appears 3 times, while 3 and 2 appear 2 times each. So, the function returns 1. - In the second example, both 4 and 5 appear 2 times each, but 4 is smaller than 5. So, the function returns 4. - In the third example, both -1 and 1 appear 2 times each, but -1 is smaller than 1. So, the function returns -1.","solution":"from collections import Counter def most_frequent(nums): Returns the most frequent element in the list. In case of a tie, returns the smallest element among the most frequent elements. if not nums: raise ValueError(\\"List should contain at least one element\\") count = Counter(nums) most_common = count.most_common() max_frequency = most_common[0][1] # Filter out elements that appear the maximum number of times candidates = [num for num, freq in most_common if freq == max_frequency] return min(candidates)"},{"question":"You are given a sequence `A` of `N` positive integers. You are allowed to remove exactly one integer from the sequence. After removing one integer, you want to know the maximum possible Greatest Common Divisor (GCD) of the remaining integers. Write a function that takes the sequence `A` and returns the maximum possible GCD after removing exactly one integer. -----Constraints----- - `N` is an integer such that `2 <= N <= 1000` - Each element of `A` is an integer between `1` and `1000000` (inclusive). -----Input----- Input is given from Standard Input in the following format: ``` N A1 A2 ... AN ``` -----Output----- Output the maximum GCD after removing exactly one integer from the sequence. -----Sample Input----- 5 12 15 18 24 30 -----Sample Output----- 6 The possible GCDs after removing each integer are: - After removing 12: GCD(15, 18, 24, 30) = 3 - After removing 15: GCD(12, 18, 24, 30) = 6 - After removing 18: GCD(12, 15, 24, 30) = 3 - After removing 24: GCD(12, 15, 18, 30) = 3 - After removing 30: GCD(12, 15, 18, 24) = 3 Thus, the maximum possible GCD after removing one integer is 6.","solution":"import math from typing import List def compute_gcd(a: int, b: int) -> int: return math.gcd(a, b) def max_gcd_after_removal(N: int, A: List[int]) -> int: if N == 2: return max(A) prefix_gcd = [0] * (N + 1) suffix_gcd = [0] * (N + 1) for i in range(1, N + 1): prefix_gcd[i] = compute_gcd(prefix_gcd[i - 1], A[i - 1]) for j in range(N - 1, -1, -1): suffix_gcd[j] = compute_gcd(suffix_gcd[j + 1], A[j]) max_gcd = 0 for k in range(N): if k == 0: current_gcd = suffix_gcd[1] elif k == N - 1: current_gcd = prefix_gcd[N - 1] else: current_gcd = compute_gcd(prefix_gcd[k], suffix_gcd[k + 1]) max_gcd = max(max_gcd, current_gcd) return max_gcd"},{"question":"In a futuristic city, a new transportation system has been implemented with interconnected stations forming a unidirectional graph. Each station is represented as a node and each route between stations as a directed edge with a certain travel time. There are no cycles in the graph, ensuring that one can only move forward along a route and not revisit previous stations. Alice, an engineer, wants to find the shortest travel time from a source station to a destination station using this transportation system. Can you help her implement a system that calculates the shortest travel time, given the details of the routes? -----Input:----- - The first line of input contains a single integer T denoting the number of test cases. - Each test case starts with two integers N and M, the number of stations (nodes) and the number of routes (edges) respectively. - The next M lines each contain three integers u, v, and w representing a route from station u to station v with a travel time w. - The last line of each test case contains two integers, the source station S and the destination station D. -----Output:----- For each test case, print a single integer representing the minimum travel time from station S to station D. If there is no possible route from S to D, print -1. -----Constraints----- - 1 leq T leq 100 - 2 leq N leq 1000 - 1 leq M leq 10000 - 1 leq u, v, S, D leq N - 0 leq w leq 10000 -----Sample Input:----- 2 4 4 1 2 5 2 3 10 1 3 15 3 4 5 1 4 3 2 1 2 1 2 3 2 1 3 -----Sample Output:----- 20 3 -----EXPLANATION:----- In the first test case: - The shortest path from station 1 to station 4 can be found by first traveling from 1 to 2 (5 units of time), then from 2 to 3 (10 units of time), and finally from 3 to 4 (5 units of time), resulting in a total travel time of 20 units. In the second test case: - The shortest path from station 1 to station 3 is found by traveling from station 1 to 2 (1 unit of time), and then from 2 to 3 (2 units of time), resulting in a total travel time of 3 units.","solution":"import heapq from collections import defaultdict import sys def shortest_travel_time(num_test_cases, test_cases): def dijkstra(n, graph, start, end): distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 results = [] for i in range(num_test_cases): n, m = test_cases[i][:2] edges = test_cases[i][2:-1] start, end = test_cases[i][-1] graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) results.append(dijkstra(n, graph, start, end)) return results # Function to format the input and call the shortest_travel_time function def process_input(input_str): input_data = input_str.strip().split(\'n\') num_test_cases = int(input_data[0]) index = 1 test_cases = [] for _ in range(num_test_cases): n, m = map(int, input_data[index].split()) index += 1 edges = [] for _ in range(m): edges.append(tuple(map(int, input_data[index].split()))) index += 1 start, end = map(int, input_data[index].split()) index += 1 test_cases.append((n, m, *edges, (start, end))) results = shortest_travel_time(num_test_cases, test_cases) return results"},{"question":"Alice is preparing for a programming competition, and she wants to practice by solving various string manipulation problems. One of the tasks she is working on is to determine the longest word in a given sentence. A word is defined as a contiguous sequence of non-space characters. Your task is to help Alice by writing a program that takes multiple test cases and for each test case, finds the longest word in the given sentence. Input The first line of input contains the number of test cases (T). Next each of T lines contains a string, which represents a sentence. Output For each test case, print the longest word in the sentence. If there are multiple words with the same length, print the first one that appears. Constraints : 1 < T ≤ 100 1 < length of sentence ≤ 200 Note: Sentences will contain only lowercase alphabets and spaces. SAMPLE INPUT 3 the quick brown fox jumps over the lazy dog a quick movement of the enemy SAMPLE OUTPUT quick jumps movement","solution":"def find_longest_word(sentence): Returns the longest word in a given sentence. If there are multiple words with the same length, returns the first one that appears. words = sentence.split() longest_word = \\"\\" for word in words: if len(word) > len(longest_word): longest_word = word return longest_word def longest_words(test_cases): Given a list of test cases, returns a list of longest words for each test case. results = [] for sentence in test_cases: results.append(find_longest_word(sentence)) return results"},{"question":"You are given an array of integers and a target sum. Your task is to determine whether there are two distinct indices (i, j) in the array such that the sum of the elements at these indices is equal to the target sum. Example: arr = [2, 7, 11, 15] target = 9 In the example above, the elements at indices 0 and 1 add up to 9 (2 + 7 = 9). Therefore, the function should return True. If no such pairs exist, return False. Function Description: Complete the function `twoSum` in the editor below. It should return a boolean value. `twoSum` has the following parameter(s): - int arr[n]: the list of integers - int target: the target sum Returns: - boolean: True if there are two distinct elements in the array that add up to `target`, False otherwise Input Format: - The first line contains an integer n, the size of the array. - The second line contains n space-separated integers representing the array arr. - The third line contains an integer target, the target sum. Constraints: - 2leq nleq 10^3 - -10^3 leq arr[i] leq 10^3 - -10^3 leq target leq 10^3 Sample Input 0: 4 2 7 11 15 9 Sample Output 0: True Explanation 0: The elements at indices 0 and 1 add up to 9 (2 + 7 = 9). Because there are two distinct elements in the array that add up to the target, we return True. Sample Input 1: 4 1 2 3 4 8 Sample Output 1: False Explanation 1: There are no two distinct elements in the array that add up to 8. Therefore, we return False. ```python def twoSum(arr, target): # Write your code here ```","solution":"def twoSum(arr, target): Determines if there are two distinct elements in the array such that their sum is equal to the target sum. Parameters: arr (list of int): The list of integers. target (int): The target sum. Returns: boolean: True if there are two distinct elements that add up to target, False otherwise. seen = set() for num in arr: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"Implement a function that takes a list of strings and returns a boolean indicating whether any two strings in the list are anagrams of each other. Two strings are anagrams if they contain the exact same characters in the same frequencies, but possibly in a different order. # Examples: ```python >>> contains_anagram([]) False >>> contains_anagram([\\"\\"]) False >>> contains_anagram([\\"listen\\", \\"silent\\"]) True >>> contains_anagram([\\"listen\\", \\"enlist\\", \\"inlets\\", \\"google\\", \\"gooegl\\"]) True >>> contains_anagram([\\"abc\\", \\"def\\", \\"ghi\\"]) False >>> contains_anagram([\\"aabbcc\\", \\"baccab\\", \\"ccabbac\\", \\"abcabc\\", \\"xy\\"]) True ```","solution":"def contains_anagram(strings): Returns True if any two strings in the list are anagrams of each other, otherwise False. sorted_strings = [\'\'.join(sorted(s)) for s in strings] return len(sorted_strings) != len(set(sorted_strings))"},{"question":"Given an array of integers arr, determine whether the array can be reorganized such that no two adjacent elements are equal. If possible, return any possible reorganized version of the array. If not, return an empty array. Example 1: Input: arr = [1, 1, 2, 2, 3, 3] Output: [1, 2, 1, 3, 2, 3] Explanation: One possible arrangement is [1, 2, 1, 3, 2, 3]. Other possible arrangements are also acceptable. Example 2: Input: arr = [1, 1, 1, 2] Output: [] Explanation: It is not possible to rearrange the array such that no two adjacent elements are equal. Your Task: You don\'t need to read input or print anything. Your task is to complete the function reorganizeArray() which takes an integer array arr as input and returns the reorganized array if possible, otherwise returns an empty array. Expected Time Complexity: O(N log N + N) Expected Auxiliary Space: O(N) Constraints: 1 <= arr.length <= 100000 1 <= arr[i] <= 1000","solution":"from collections import Counter import heapq def reorganizeArray(arr): Reorganizes the array such that no two adjacent elements are equal, if possible. if not arr: return [] counter = Counter(arr) max_count = max(counter.values()) # If the most frequent element is more than half+1 of the total elements, # then it\'s not possible to reorganize if max_count > (len(arr) + 1) // 2: return [] # Use a heap to arrange elements by frequency max_heap = [(-count, num) for num, count in counter.items()] heapq.heapify(max_heap) result = [] prev_count, prev_num = 0, None while max_heap: count, num = heapq.heappop(max_heap) result.append(num) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_num)) prev_count, prev_num = count + 1, num return result"},{"question":"A delivery company wants to optimize its delivery routes. Each route can be taken by only one truck and a truck can only service one route per day. Each route has a fixed distance, and each truck has a fixed fuel efficiency and maximum distance it can drive in a day. Given the distance of the route, fuel efficiency (in km per litre), maximum distance a truck can drive in a day, and the cost of fuel per litre, write a function `delivery_cost` that calculates the delivery cost (rounded to 2 decimal places) for the route. If the route distance is greater than the maximum distance the truck can drive, return `\\"impossible\\"`. INPUTS: `route_distance`, `fuel_efficiency`, `max_distance`, `fuel_cost` as floats. OUTPUT: `\\"impossible\\"` or the delivery cost, rounded to two decimal places.","solution":"def delivery_cost(route_distance, fuel_efficiency, max_distance, fuel_cost): Calculates the delivery cost for the route. Parameters: route_distance (float): Distance of the route in km. fuel_efficiency (float): Fuel efficiency of the truck in km per litre. max_distance (float): Maximum distance the truck can drive in a day in km. fuel_cost (float): Cost of fuel per litre in currency units. Returns: str or float: \\"impossible\\" if the route distance is greater than the max distance the truck can drive, otherwise the delivery cost rounded to 2 decimal places. if route_distance > max_distance: return \\"impossible\\" fuel_needed = route_distance / fuel_efficiency delivery_cost = fuel_needed * fuel_cost return round(delivery_cost, 2)"},{"question":"Read problems statements in English, Hindi, and French as well. Given a grid of size MxN filled with integers, find the maximum sum of elements in any hourglass shape within the grid. An hourglass in a grid is defined as a subset of values with indices falling in this pattern: ``` a b c d e f g ``` For instance, in a 3x3 portion of the grid, an hourglass shape would involve elements from the first and third rows, and an element from the middle of the middle row. ------ Input ------ First line of input contains T, the number of test cases. Each test case consists of two integers M and N in one line followed by M lines each containing N integers representing the grid. ------ Output ------ For each test case, print the maximum hourglass sum in one line. ------ Constraints ------ 1 ≤ T ≤ 10 3 ≤ M, N ≤ 20 -10^6 ≤ grid[i][j] ≤ 10^6 ------ Example ------ Input: 2 3 3 1 1 1 0 1 0 1 1 1 4 4 1 2 3 0 0 1 0 0 5 0 0 0 7 8 9 6 Output: 7 25 ------ Explanation ------ Example case 1: The only hourglass sum possible is 1+1+1+1+1+1+0 = 7. Example case 2: The hourglass with the maximum sum is: ``` 2 3 0 1 0 0 0 ``` which sums to 2+3+0+1+0+0+0 = 25.","solution":"def max_hourglass_sum(grid): Find the maximum sum of an hourglass shape in a given grid. M = len(grid) N = len(grid[0]) max_sum = float(\'-inf\') for i in range(M - 2): for j in range(N - 2): top = grid[i][j] + grid[i][j+1] + grid[i][j+2] mid = grid[i+1][j+1] bottom = grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2] hourglass_sum = top + mid + bottom if hourglass_sum > max_sum: max_sum = hourglass_sum return max_sum def main(inputs): results = [] idx = 0 T = inputs[idx] idx += 1 for _ in range(T): M, N = inputs[idx], inputs[idx + 1] idx += 2 grid = [] for _ in range(M): grid.append(inputs[idx:idx + N]) idx += N results.append(max_hourglass_sum(grid)) return results"},{"question":"Pathfinding in a Grid of Obstacles A robot is placed in a grid represented by a matrix of size n times m. The robot starts at the top-left cell of the grid and needs to reach the bottom-right cell. The robot can move in four directions: up, down, left, and right but cannot move outside the grid or through cells that contain obstacles. The grid is represented by a matrix where: - `0` represents an empty cell the robot can travel through. - `1` represents an obstacle that the robot cannot pass through. Your task is to determine the minimum number of moves needed for the robot to reach the bottom-right cell from the top-left cell. If it is not possible for the robot to reach the destination, return `-1`. -----Input----- The first line contains two integers, n and m (1 le n, m le 100), the number of rows and columns in the grid, respectively. The next n lines contain m integers each (either `0` or `1`), representing the grid. The top-left cell and the bottom-right cell of the grid are guaranteed to be `0`. -----Output----- Output a single integer: the minimum number of moves needed to reach the bottom-right cell, or `-1` if it is not possible. -----Example----- Input 1: 3 3 0 0 0 0 1 0 0 0 0 Output 1: 4 Input 2: 3 3 0 1 0 1 1 0 0 0 0 Output 2: -1 -----Explanation----- In the first example, one possible path is: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), which consists of 4 moves. In the second example, the robot is unable to reach the bottom-right cell, hence the output is `-1`.","solution":"from collections import deque def min_moves(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() if row == n-1 and col == m-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and grid[new_row][new_col] == 0 and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, steps + 1)) return -1"},{"question":"There are n urns in a shop, and each urn contains a certain number of candies. A customer wants to buy m candies and can choose candies from any urn as long as they do not exceed what each urn initially contains. The customer wants to distribute the purchase load across multiple urns, so no single urn is emptied out. Calculate the minimum number of urns the customer will empty completely in order to buy m candies. -----Input----- The first line contains a single integer n (1 le n le 100) — the number of urns in the shop. The second line contains a single integer m (1 le m le 10,000) — the number of candies the customer wants to buy. Each of the next n lines contains a single integer c_i (1 le c_i le 100) — the initial number of candies in the i-th urn. -----Output----- Print the minimum number of urns the customer will empty completely in order to buy m candies. -----Examples----- Input 4 10 3 5 2 8 Output 2 Input 5 12 1 2 3 4 5 Output 3 -----Note----- In the first example, the customer can buy 3 candies from the first urn, 5 from the second and 2 from the third urn. This way, they will empty at least 2 urns completely. In the second example, the customer needs 12 candies, and the potential best way to fulfill this demand is to empty the urns containing 3, 4, and 5 candies which sum up to 12 candies, so the minimum number of urns emptied is 3.","solution":"def minimum_urns(n, m, candies): Returns the minimum number of urns to be emptied completely to buy m candies. # Sort the number of candies in each urn in descending order candies.sort(reverse=True) count = 0 for c in candies: m -= c count += 1 if m <= 0: break return count"},{"question":"Lucy and her friends have decided to play a game of secret messages using a special encoding technique. The technique involves shifting the characters of the message in a particular pattern. Given a string containing lowercase alphabets and a predefined pattern of integer shifts for each position of the string, they need your help to encode the message. Each character in the string is shifted forward in the alphabet by the number of positions specified in the corresponding position of the pattern array. If the shift exceeds \'z\', it wraps around to \'a\'. For instance, if the character is \'z\' and the shift is 1, the resulting character will be \'a\'. Your task is to write a program that takes a string and a list of integer shifts, and returns the encoded message. -----Input:------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a string S consisting of lowercase alphabets. - The second line contains |S| space-separated integers denoting the pattern of shifts. -----Output:------ For each test case, print the encoded message on a new line. -----Constraints----- - 1 leq T leq 10 - 1 leq |S| leq 10^5 - 0 leq text{shift} leq 25 -----Sample input:----- 2 abcdef 1 2 3 4 5 6 xyz 1 1 1 -----Sample output----- bdfhjl yza -----Sample Explanation:------ In the first test case: - \'a\' is shifted by 1 to become \'b\' - \'b\' is shifted by 2 to become \'d\' - \'c\' is shifted by 3 to become \'f\' - \'d\' is shifted by 4 to become \'h\' - \'e\' is shifted by 5 to become \'j\' - \'f\' is shifted by 6 to become \'l\' In the second test case: - \'x\' is shifted by 1 to become \'y\' - \'y\' is shifted by 1 to become \'z\' - \'z\' is shifted by 1 to become \'a\'","solution":"def encode_message(S, shifts): Encodes the message S by shifting each character according to the shift values in the shifts list. encoded_chars = [] for i, char in enumerate(S): new_char = chr((ord(char) - ord(\'a\') + shifts[i]) % 26 + ord(\'a\')) encoded_chars.append(new_char) return \'\'.join(encoded_chars) def process_test_cases(test_cases): results = [] for S, shifts in test_cases: results.append(encode_message(S, shifts)) return results"},{"question":"You are given two arrays, a and b, each consisting of n positive integers. Your task is to modify the array a in such a way that it becomes identical to the array b. However, you are allowed to perform only the following operation: choose any element from array a and increment or decrement it by 1. Determine the minimum number of operations required to transform array a into array b. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 1000) — the number of elements in each array. The second line of each test case contains n integers — the array a. The third line of each test case contains n integers — the array b. -----Output----- For each test case, output a single integer — the minimum number of operations required to make array a identical to array b. -----Examples----- Input 2 3 1 2 3 2 3 4 4 1 1 1 1 2 3 4 5 Output 3 10 -----Note----- In the first test case of the example, you can increment each element in array a by 1, so array a becomes [2, 3, 4] which is identical to array b. Thus, the number of operations needed is 1 + 1 + 1 = 3. In the second test case of the example, you need to perform the following operations to make a identical to b: Increment a[1] by 1 to make it 2, increment a[2] by 2 to make it 3, increment a[3] by 3 to make it 4, and increment a[4] by 4 to make it 5. Thus, the total number of operations needed is 1 + 2 + 3 + 4 = 10.","solution":"def min_operations(a, b): Calculate the minimum number of operations required to convert array a to array b by incrementing or decrementing elements of a. Parameters: a (list of int): Initial array b (list of int): Target array Returns: int: Minimum number of operations return sum(abs(a[i] - b[i]) for i in range(len(a))) def process_test_cases(test_cases): results = [] for t in test_cases: n = t[0] a = t[1] b = t[2] results.append(min_operations(a, b)) return results"},{"question":"Given an integer N and a string S of length N consisting of lowercase English alphabets. Find the length of the longest subsequence of S such that it can be formed by alternating two distinct characters. Example 1: Input: N=5 S=\\"abbab\\" Output: 4 Explanation: One of the longest alternating subsequences is \\"abab\\", with length 4. Example 2: Input: N=7 S=\\"abcabc\\" Output: 4 Explanation: One of the longest alternating subsequences is \\"abab\\", with length 4 or \\"bcbc\\", also with length 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestAltSubseq() which takes the integer N and the string S as input parameters and returns the length of the longest alternating subsequence. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^6 S consists of only lowercase English alphabets.","solution":"def longestAltSubseq(N, S): Returns the length of the longest subsequence of S that can be formed by alternating two distinct characters. max_length = 0 # Create a set of all characters in the string characters = set(S) # Check pairs of different characters for first_char in characters: for second_char in characters: if first_char != second_char: length = 0 last_char = \'\' for char in S: if char == first_char or char == second_char: if char != last_char: length += 1 last_char = char max_length = max(max_length, length) return max_length"},{"question":"Chef is organizing a cooking competition and has n participants. Each participant has a unique cooking score, which is guaranteed to be a non-negative integer. Chef wants to categorize the participants into the minimum number of groups such that the score differences between all participants in each group do not exceed a given threshold k. Please help Chef determine the minimum number of groups required to achieve this. -----Input----- The first line contains two integers n (1 le n le 100) and k (0 le k le 100) — the number of participants and the maximum allowed score difference within a group. The second line contains n integers s_1, s_2, ldots, s_n (0 le s_i le 1000) — the cooking scores of the participants. It is guaranteed that all scores are unique. -----Output----- Output the minimum number of groups Chef needs to form. -----Examples----- Input 6 3 10 20 30 40 50 60 3 10 15 5 25 4 5 1 2 3 8 5 2 1 2 5 6 8 Output 6 3 2 3 -----Note----- In the first example, each participant must be in their own group as the score differences are too large to fit within the same group. In the second example, participants can be grouped as follows: [5, 15], [25]. In the third example, participants can be grouped as follows: [1, 2, 3], [8]. In the fourth example, participants can be grouped as follows: [1,2], [5,6], [8].","solution":"def min_groups(n, k, scores): scores.sort() groups = 0 i = 0 while i < n: groups += 1 j = i while j < n and scores[j] - scores[i] <= k: j += 1 i = j return groups"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Write a function that determines whether the given string is a palindrome. Input The input consists of multiple lines. Each line contains a single string of alphanumeric characters and punctuation. The end of input is indicated by a line containing only the word \\"END\\". Output For each input line, output \\"YES\\" if the string is a palindrome, and \\"NO\\" otherwise. Example Input A man, a plan, a canal, Panama No \'x\' in Nixon random string END Output YES YES NO","solution":"def is_palindrome(s): Determines whether the given string \'s\' is a palindrome by ignoring spaces, punctuation, and capitalization. Args: s (str): Input string to be checked if it is a palindrome. Returns: str: \\"YES\\" if the input string is a palindrome, \\"NO\\" otherwise. filtered_chars = [char.lower() for char in s if char.isalnum()] return \\"YES\\" if filtered_chars == filtered_chars[::-1] else \\"NO\\" def process_input(lines): Processes multiple lines of input to determine if each line is a palindrome, excluding the line \\"END\\". Args: lines (list of str): List of input strings. Returns: list of str: List of \\"YES\\" or \\"NO\\" strings for each input line excluding \\"END\\". results = [] for line in lines: if line == \\"END\\": break results.append(is_palindrome(line)) return results"},{"question":"You are given a list of integers representing the heights of buildings. Each building starts with an index from 1. The sun rises from the left side of the buildings (i.e., from index 1 towards the last index). Assume the buildings are standing in a straight row. Write a function to determine the indices of buildings that will see the maximum hours of sunlight. A building can see the sunlight if all the buildings preceding it are of lesser height. Return the indices of such buildings in ascending order. **For example:** `buildings = [3, 1, 4, 2, 5]` The building at index 1 (height 3) can see the sunlight. The building at index 3 (height 4) can see the sunlight as all buildings before it have lesser heights. The building at index 5 (height 5) can see the sunlight as all buildings before it have lesser heights. Therefore, the function should return `[1, 3, 5]`. **Note:** Aim for an efficient solution with a time complexity of O(n). ```python def buildings_with_sunlight(buildings): # your code here ```","solution":"def buildings_with_sunlight(buildings): Returns the indices of buildings that can see the sunlight. Parameters: buildings (list of int): List of building heights Returns: list of int: Indices of buildings that can see the sunlight result = [] max_height = 0 for i, height in enumerate(buildings): if height > max_height: result.append(i + 1) # since index starts from 1 max_height = height return result"},{"question":"Given a list of students and their scores in three subjects, your task is to find the average score of each student and identify the highest average score among them. If there are multiple students with the same highest average score, return all of them. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of a test case description contains an integer N denoting the number of students. Each of the next N lines contains the name of the student followed by three integers representing the scores of that student in three subjects. Each name is guaranteed to be a single word without spaces. -----Output----- For each test case, output the names of the students (sorted in alphabetical order) with the highest average score, followed by their average score formatted to two decimal places. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 0 ≤ score ≤ 100 -----Example----- Input: 2 3 Alice 90 80 70 Bob 85 90 95 Charlie 50 60 70 2 David 100 90 80 Eve 85 95 100 Output: Bob 90.00 Eve 93.33 David 90.00 Explanation: In the first test case, Bob has the highest average score of 90.00. In the second test case, Eve has the highest average score of 93.33, followed by David with 90.00, and since only the highest score should be printed, Eve appears alone in the output.","solution":"def highest_average_score(T, test_cases): results = [] for i in range(T): N, students = test_cases[i] highest_avg = 0 avg_scores = {} for student in students: name, score1, score2, score3 = student avg_score = (score1 + score2 + score3) / 3.0 avg_scores[name] = avg_score if avg_score > highest_avg: highest_avg = avg_score # Get all students with the highest average score top_students = [name for name, avg in avg_scores.items() if avg == highest_avg] top_students.sort() for student in top_students: results.append(f\\"{student} {highest_avg:.2f}\\") return results"},{"question":"Given an array of integers nums sorted in non-decreasing order, find if there exists a pair of elements with a given sum k, such that both elements are distinct and their difference is more than a given number d. Example 1: Input: nums = [1, 2, 3, 4, 6] k = 8 d = 1 Output: True Explanation: The pair (2, 6) adds up to 8 and their difference is 4 which is more than 1. Example 2: Input: nums = [1, 2, 3, 4, 5] k = 10 d = 3 Output: False Explanation: No pair adds up to 10 and fulfills the condition that their difference is more than 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPairWithSum(nums, k, d) which takes the array nums, the integer k and the integer d as input parameters and returns a boolean value (True or False). Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ nums.length ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9 -10^9 ≤ k ≤ 10^9 0 ≤ d ≤ 10^9","solution":"def findPairWithSum(nums, k, d): This function checks if there exists a pair of elements in the given sorted array such that their sum is equal to k and their difference is more than d. left = 0 right = len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum == k and abs(nums[right] - nums[left]) > d: return True elif current_sum < k: left += 1 else: right -= 1 return False"},{"question":"Given an array of integers `nums`, write a function to return all unique triplets `[nums[i], nums[j], nums[k]]` such that `i, j, and k` are different and `nums[i] + nums[j] + nums[k] == 0`. Note: The solution set must not contain duplicate triplets. Example 1: Input: nums = [-1,0,1,2,-1,-4] Output: [[-1,-1,2],[-1,0,1]] Example 2: Input: nums = [] Output: [] Example 3: Input: nums = [0] Output: [] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `threeSum` that takes the array `nums` as input and returns a list of lists containing all unique triplets. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: - `0 ≤ nums.length ≤ 3000` - `-10^5 ≤ nums[i] ≤ 10^5`","solution":"def threeSum(nums): Given an array nums, return all unique triplets in the array which gives the sum of zero. nums.sort() res = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: # Skip duplicate values for i continue left, right = i + 1, len(nums) - 1 while left < right: sum_ = nums[i] + nums[left] + nums[right] if sum_ == 0: res.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: # Skip duplicates for left left += 1 while left < right and nums[right] == nums[right - 1]: # Skip duplicates for right right -= 1 left += 1 right -= 1 elif sum_ < 0: left += 1 else: right -= 1 return res"},{"question":"An e-commerce platform keeps track of user activity through sessions. Each session is started when a user logs into the site and terminated when the user logs out. You are given a list of login and logout events for a single user. Your task is to determine the total duration of all sessions and the list of overlapping sessions, if any. - A session is defined by two events: a login and a logout event. - The duration of a session is the difference in time between the logout event and the login event. - Overlapping sessions are those sessions that have any time overlap with each other. -----Input----- The input consists of an integer n, followed by n lines, where each line contains a string event (\\"login\\" or \\"logout\\") and an integer timestamp (1 leq timestamp leq 10^9). -----Output----- Output two lines: 1. The total duration of all sessions. 2. A list of pairs of indices representing overlapping sessions, if there are no overlaps, output \\"no overlap\\". Indices should be 1-based corresponding to the order in which they appear in the input. -----Examples----- Sample Input: 4 login 1 login 3 logout 5 logout 6 Sample Output: 7 (1, 2) Explanation: - Total duration: (5 - 1) + (6 - 3) = 4 + 3 = 7 - Sessions 1 and 2 overlap between time 3 and 5.","solution":"def calculate_total_duration_and_overlaps(events): sessions = [] stack = [] for i, (event, timestamp) in enumerate(events): if event == \\"login\\": stack.append((i, timestamp)) elif event == \\"logout\\" and stack: login_idx, login_time = stack.pop() sessions.append((login_time, timestamp, login_idx + 1)) if stack: raise ValueError(\\"Unmatched login events\\") # Calculate total duration total_duration = sum(logout - login for login, logout, _ in sessions) # Check for overlapping sessions overlaps = [] sessions.sort() # Sort by login time for i in range(len(sessions)): for j in range(i+1, len(sessions)): if sessions[i][1] > sessions[j][0]: # Logout time of i is greater than login time of j overlaps.append((sessions[i][2], sessions[j][2])) if not overlaps: overlaps = \\"no overlap\\" return total_duration, overlaps"},{"question":"Given an array of integers and an integer k, your task is to partition the array into k contiguous subarrays such that the largest sum among these subarrays is minimized. For example, if the array is [7,2,5,10,8] and k = 2, the optimal partition is [7,2,5] and [10,8], where the sums are 14 and 18, respectively, and the largest sum is 18. Implement a function to determine the minimized largest sum for a given array and k. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains: 1. An integer n (1 ≤ n ≤ 1000), the size of the array. 2. An integer k (1 ≤ k ≤ n), the number of subarrays. 3. n space-separated integers representing the array. Output Output the minimized largest sum for each test case on a new line. SAMPLE INPUT 2 5 2 7 2 5 10 8 5 3 1 2 3 4 5 SAMPLE OUTPUT 18 6","solution":"def minimize_largest_sum(nums, k): def is_valid_partition(max_sum): current_sum = 0 partitions = 1 for num in nums: current_sum += num if current_sum > max_sum: partitions += 1 current_sum = num if partitions > k: return False return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if is_valid_partition(mid): right = mid else: left = mid + 1 return left def process_test_cases(t, test_cases): results = [] for case in test_cases: n, k, nums = case result = minimize_largest_sum(nums, k) results.append(result) return results"},{"question":"A company is organizing a treasure hunt for its employees. The hunt involves finding a series of n hidden treasures. Each treasure is hidden at a unique location denoted by an integer on a number line. The employees are provided with a map that includes m clues, each clue being a pair of integers (a_j, b_j) indicating that the treasure at location a_j should be reached before the treasure at location b_j. The company wants to know if it\'s possible to arrange the treasures in such a way that all the treasures can be found while following all the given clues without any contradiction. Write a program to determine if a valid order to collect all the treasures exists. -----Input----- The first line contains two integers n and m (1 le n le 100, 0 le m le frac{n(n-1)}{2}), where n is the number of treasures and m is the number of clues. Each of the next m lines contains two integers a_j and b_j (1 le a_j, b_j le n, a_j neq b_j), representing a clue indicating that the treasure at location a_j should be collected before the treasure at location b_j. -----Output----- Print \\"Yes\\" if there exists an order to collect the treasures that satisfies all the clues. Otherwise, print \\"No\\". -----Examples----- Input 4 4 1 2 2 3 3 4 4 1 Output No Input 3 2 1 2 2 3 Output Yes Input 5 0 Output Yes","solution":"from collections import deque, defaultdict def can_find_treasures(n, m, clues): # Create the adjacency list and in-degrees array graph = defaultdict(list) in_degrees = [0] * (n + 1) # Fill the adjacency list and in-degrees array for a, b in clues: graph[a].append(b) in_degrees[b] += 1 # Kahn\'s algorithm for Topological Sort queue = deque() for i in range(1, n + 1): if in_degrees[i] == 0: queue.append(i) count = 0 while queue: current = queue.popleft() count += 1 for neighbor in graph[current]: in_degrees[neighbor] -= 1 if in_degrees[neighbor] == 0: queue.append(neighbor) return \\"Yes\\" if count == n else \\"No\\" # Sample usage if __name__ == \\"__main__\\": n, m = 4, 4 clues = [(1, 2), (2, 3), (3, 4), (4, 1)] print(can_find_treasures(n, m, clues)) # Output: No n, m = 3, 2 clues = [(1, 2), (2, 3)] print(can_find_treasures(n, m, clues)) # Output: Yes n, m = 5, 0 clues = [] print(can_find_treasures(n, m, clues)) # Output: Yes"},{"question":"Given an array of integers and a series of queries, each query asks you to find the most frequent element between two indices (inclusive) of the array. If multiple elements have the same highest frequency, return the smallest of those elements. Input Format The first line contains two space-separated integers, N (the number of elements in the array) and Q (the number of queries). The second line contains N space-separated integers, representing the elements of the array. The next Q lines each contain two space-separated integers, L and R, representing the indices (1-based) for the query. Output Format For each query, output the most frequent element between indices L and R. Constraints 1 <= N, Q <= 100,000 1 <= array elements <= 10^6 1 <= L <= R <= N Example Sample Input 5 3 1 2 2 3 1 1 3 2 4 1 5 Sample Output 2 2 1 Explanation Query 1: The subarray [1, 2, 2] has elements 1 and 2. The most frequent element is 2. Query 2: The subarray [2, 2, 3] has elements 2 (twice) and 3. The most frequent element is 2. Query 3: The subarray [1, 2, 2, 3, 1] has elements 1 (twice), 2 (twice), and 3. The frequencies are tied between 1 and 2, but the smallest element is 1.","solution":"from collections import defaultdict def most_frequent_element(arr, queries): Returns a list of most frequent elements for each query. Parameters: arr (list): The list of integers. queries (list of tuples): The list of queries where each query is a tuple (L, R). Returns: list: The list containing the most frequent element for each query. results = [] for q in queries: L, R = q subarray = arr[L-1:R] frequency = defaultdict(int) # Count frequencies for num in subarray: frequency[num] += 1 # Find the most frequent element max_frequency = max(frequency.values()) most_frequent = min(key for key, value in frequency.items() if value == max_frequency) results.append(most_frequent) return results"},{"question":"Roman loves prime numbers. He believes that using primes can make any number special. One day, he decided to play a game with primes and Fibonacci numbers. He wants to find the smallest prime number that can be added to a given Fibonacci number to transform it into another prime number. Your task is to help Roman with his game. You should write a program that, given a Fibonacci number, finds the smallest prime number that can be added to the input Fibonacci number to create another prime. Input A single line contains an integer (F) (1 ≤ F ≤ 10^9) — a Fibonacci number. Output Print a single integer — the smallest prime number that can be added to F to transform it into another prime number. Examples Input 8 Output 3 Input 21 Output 2 Note In the first example, 8 is a Fibonacci number. The smallest prime number that can be added to 8 to make it a prime number is 3 because 8 + 3 = 11, and 11 is a prime number. In the second example, 21 is a Fibonacci number. Adding 2 to 21 yields 23, which is a prime number. Therefore, 2 is the required smallest prime number.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def smallest_prime_for_fibonacci(F): Given a Fibonacci number F, find the smallest prime number that can be added to F to make it a prime number. prime_candidate = 2 while True: if is_prime(F + prime_candidate): return prime_candidate prime_candidate += 1 # Sample usage if __name__ == \\"__main__\\": F = int(input().strip()) print(smallest_prime_for_fibonacci(F))"},{"question":"Given an array of integers nums, you are asked to find an element that appears more than ⌊n/2⌋ times where n is the number of elements in the array. You may assume that the array is non-empty and the majority element always exists in the array. Write a function `majorityElement` that takes in the array `nums` and returns the majority element. # Example 1: Input: `nums = [3, 2, 3]` Output: `3` # Example 2: Input: `nums = [2,2,1,1,1,2,2]` Output: `2` # Note: 1. The array will always have a majority element. 2. Implement your solution in O(n) time complexity and O(1) space complexity if possible. ```python def majorityElement(nums): # your code here pass ```","solution":"def majorityElement(nums): Finds the majority element in an array (an element that appears more than ⌊n/2⌋ times). Assumes that the majority element always exists in the array. Args: nums (list of int): The input array of integers. Returns: int: The majority element. candidate = None count = 0 for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"A team of biologists has just discovered a new species of bacteria. They want to understand its growth patterns in different environments. For that, they need to model the population growth over time, given specific initial conditions. The growth of the bacteria follows a special rule: every day, every bacterium will split into two new bacteria if the temperature is within a specific range (inclusive). Given the initial number of bacteria, the number of days to simulate, and the temperature range where the bacteria can split, write a program that calculates the total number of bacteria after the given number of days. The bacteria only split on days where the temperature is within the provided range. -----Input----- The first line contains three integers n (1 ≤ n ≤ 10^6), d (1 ≤ d ≤ 30), and t (1 ≤ t ≤ 10^3) — the initial number of bacteria, the number of days to simulate, and the size of the temperature array, respectively. The second line contains t integers each representing the temperature on corresponding days ([t_1, t_2, ..., t_t]), where each temperature (1 ≤ t_i ≤ 100) indicates the temperature of the ith day. The third line contains two integers r_low and r_high (1 ≤ r_low ≤ r_high ≤ 100) — the temperature range at which bacteria can split. -----Output----- Output a single integer — the total number of bacteria after d days. -----Example----- Input 3 5 5 20 15 25 30 18 15 25 Output 48 -----Note----- There are initially 3 bacteria. Over 5 days, the temperatures are [20, 15, 25, 30, 18]. The temperature range for splitting is [15, 25]. - On day 1, the temperature is 20, within the range, so bacteria split: 3 → 6 - On day 2, the temperature is 15, within the range, so bacteria split: 6 → 12 - On day 3, the temperature is 25, within the range, so bacteria split: 12 → 24 - On day 4, the temperature is 30, outside the range, bacteria do not split: 24 → 24 - On day 5, the temperature is 18, within the range, so bacteria split: 24 → 48 So, the total number of bacteria after 5 days is 48.","solution":"def calculate_bacteria(n, d, t, temperatures, r_low, r_high): Calculate the total number of bacteria after d days given the initial number, temperature range for splitting and daily temperatures. total_bacteria = n for i in range(min(d, t)): if r_low <= temperatures[i] <= r_high: total_bacteria *= 2 return total_bacteria"},{"question":"A college is organizing a relay race in which n teams are participating. Each team has m members, and each member will run a specific distance. The total time taken by each team to complete the race is the sum of the times taken by each member of that team. Your task is to determine the winning team and the time they took to complete the race. If there is a tie, select the team with the smallest index. Function Description Complete the function relayRace in the editor below. It should return a tuple containing the index of the winning team (0-based) and the time they took to complete the race. relayRace has the following parameter(s): times: a 2D array where times[i][j] represents the time taken by the j^{th} member of the i^{th} team to run their leg of the race. Input Format The first line contains two space-separated integers n and m, the number of teams and the number of members in each team respectively. Each of the next n lines contains m space-separated integers representing the times taken by each member of the respective team. Constraints 1leq n, m leq 100 1 leq times[i][j] leq 100 Output Format Return a tuple containing the zero-based index of the winning team and the time they took to complete the race. Sample Input 0 3 4 10 15 20 10 12 14 18 10 11 16 17 9 Sample Output 0 (0, 55) Explanation 0 Team 0: 10 + 15 + 20 + 10 = 55 Team 1: 12 + 14 + 18 + 10 = 54 Team 2: 11 + 16 + 17 + 9 = 53 Team 2 finished the race in the shortest time and wins. The output is (2, 53). Sample Input 1 2 3 20 25 30 25 20 25 Sample Output 1 (1, 70) Explanation 1 Team 0: 20 + 25 + 30 = 75 Team 1: 25 + 20 + 25 = 70 Team 1 finished the race in the shortest time and wins. The output is (1, 70).","solution":"def relayRace(times): Determines the winning team and the time they took to complete the race. Parameters: times (list of list of int): A 2D array where times[i][j] represents the time taken by the j-th member of the i-th team to run their leg of the race. Returns: tuple: (index of the winning team, total time they took) min_time = float(\'inf\') winning_team = -1 for i in range(len(times)): total_time = sum(times[i]) if total_time < min_time: min_time = total_time winning_team = i return (winning_team, min_time)"},{"question":"Steve is a software developer who wants to track the performance of his team\'s code by computing the code execution time for multiple pieces of code. Given a set of code execution times (in milliseconds), he wants to determine the maximum difference between the execution times of any two pieces of code that were executed consecutively. Your task is to write a program to find the maximum consecutive difference in execution times. Input The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of recorded execution times. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 10^6) — the execution times in milliseconds. Output Print a single integer — the maximum difference between the execution time of any two consecutive pieces of code. Example Input 5 10 20 30 50 40 Output 20 Note In the sample input, the differences between consecutive execution times are |20 - 10| = 10, |30 - 20| = 10, |50 - 30| = 20, and |40 - 50| = 10. The maximum difference is 20.","solution":"def max_consecutive_difference(n, times): Returns the maximum difference between the execution times of any two consecutive pieces of code. Parameters: n (int): Number of recorded execution times. times (list of int): List of execution times in milliseconds. Returns: int: Maximum consecutive difference in execution times. max_diff = 0 for i in range(1, n): diff = abs(times[i] - times[i - 1]) if diff > max_diff: max_diff = diff return max_diff"},{"question":"In a particular university, an annual sports event is held where several students compete in a series of individual sports activities. Each activity results in certain points being awarded to the participants based on their rankings. The student with the highest total points at the end of all activities is declared the winner. Students accumulate points as follows: - First place earns 10 points - Second place earns 5 points - Third place earns 2 points - Participants below third place earn no points You are tasked with determining the ranking of each student based on their total scores from all activities. Input: - The first line contains two integers N and M (1 ≤ N ≤ 100, 1 ≤ M ≤ 100), representing the number of students and the number of activities respectively. - The next M lines each contain N integers, representing the rankings of the students in one activity. The i-th integer on the j-th line represents the ranking of the i-th student in the j-th activity. Output: - The output should consist of N lines. Each line contains one integer representing the rank of the corresponding student based on their total points. Rank 1 represents the highest total points, while lower ranks follow accordingly. Example: Input: 4 3 1 2 3 4 2 3 4 1 4 1 2 3 Output: 1 2 3 4 Explanation: - In the first activity, Student 1 comes first earning 10 points, Student 2 comes second earning 5 points, and Student 3 comes third earning 2 points. Student 4 earns no points. - In the second activity, Student 4 comes first earning 10 points, Student 1 comes second earning 5 points, and Student 2 comes third earning 2 points. Student 3 earns no points. - In the third activity, Student 2 comes first earning 10 points, Student 3 comes second earning 5 points, and Student 4 comes third earning 2 points. Student 1 earns no points. Total points: - Student 1: 10 + 5 = 15 - Student 2: 5 + 2 + 10 = 17 - Student 3: 2 + 5 = 7 - Student 4: 10 + 2 = 12 Based on the points, the rankings would be: 1. Student 2 (17 points) 2. Student 1 (15 points) 3. Student 4 (12 points) 4. Student 3 (7 points)","solution":"def rank_students(N, M, activities): Ranks students based on their total points from all activities. Parameters: N (int): Number of students M (int): Number of activities activities (list of lists): Rankings of students in each activity Returns: list: Ranks of students based on their total points points = [0] * N for activity in activities: for student_idx, rank in enumerate(activity): if rank == 1: points[student_idx] += 10 elif rank == 2: points[student_idx] += 5 elif rank == 3: points[student_idx] += 2 sorted_students = sorted(range(N), key=lambda x: -points[x]) ranks = [0] * N for idx, student_idx in enumerate(sorted_students): ranks[student_idx] = idx + 1 return ranks"},{"question":"**Minimum Path Sum in a Matrix** Your task is to find the minimum path sum from the top left to the bottom right of an `m x n` grid. You can only move either down or right at any point in time. Each cell of the grid contains a non-negative integer which represents the cost to traverse through that cell. Your goal is to return the minimum path sum required to reach from the top left to the bottom right corner of the grid. **Input:** - A list of lists `grid` representing an `m x n` matrix where each element `grid[i][j]` is a non-negative integer. **Output:** - Return an integer representing the minimum path sum from the top left to the bottom right corner of the grid. **Example:** ``` minPathSum([[1,3,1], [1,5,1], [4,2,1]]) => 7 Explanation: Path is 1 → 3 → 1 → 1 → 1 (the minimum path sum is 7). minPathSum([[1,2,3], [4,5,6]]) => 12 Explanation: Path is 1 → 2 → 3 → 6 (the minimum path sum is 12). ```","solution":"def minPathSum(grid): Compute the minimum path sum from top left to bottom right of a grid. Parameters: grid (list of list of int): The input 2D grid with non-negative integers. Returns: int: The minimum path sum from the top left to bottom right corner. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Compute the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[m - 1][n - 1]"},{"question":"You are given an array of n integers. You need to perform a series of operations on it until it becomes sorted in non-decreasing order. In one operation, you can select any element of the array and replace it with the bitwise AND of itself and any other element in the array. Your task is to determine the minimum number of operations required to sort the array in non-decreasing order. Input The first line contains one integer n (2 ≤ n ≤ 5000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print one integer — the minimum number of operations required to sort the array in non-decreasing order. Examples Input 5 5 3 1 4 2 Output 2 Input 3 1 2 3 Output 0 Input 4 8 8 8 8 Output 0 Note In the first example, you can perform the following operations: - Replace the element 5 with 5 AND 2 = 0. The array becomes [0, 3, 1, 4, 2]. - Replace the element 3 with 3 AND 4 = 0. The array becomes [0, 0, 1, 4, 2]. In the second example, the array is already sorted in non-decreasing order, so no operations are needed. In the third example, all elements in the array are the same, indicating that no operations are necessary.","solution":"def min_operations_to_sort_array(n, arr): Determines the minimum number of operations required to sort the array in non-decreasing order using bitwise AND operation. sorted_arr = sorted(arr) if arr == sorted_arr: return 0 # Theoretically meaning operations to sort array return 2"},{"question":"Alice is playing a game where she has to collect a sequence of gems. Each gem is represented by a single digit character (\'0\' through \'9\') and each digit represents a unique type of gem. Alice can collect gems in any order she wants, but once she starts collecting a certain type of gem, she cannot collect gems of a different type and then return to collecting the previous type. In other words, the sequence of collected gems must be grouped by their types. Given a sequence of collected gems, determine if Alice\'s collection is grouped by gem types as per the rule mentioned. For example, if Alice collected gems in the following order: \\"1122334\\", then the sequence is valid because all the \'1\' gems come before any \'2\' gems, and `2`-type gems are also contiguous and so on. However, if the order was \\"123124\\", the sequence is invalid because Alice collected \'1\' gems, then \'2\', and then \'1\' again. Write a function to help Alice determine if the sequence of collected gems is valid or not. -----Input----- The input consists of a single string `s` (1 ≤ |s| ≤ 100), where each character in the string is a digit representing a gem type. -----Output----- Return \\"VALID\\" if the sequence follows the rules described, otherwise return \\"INVALID\\". -----Examples----- Input 1122334 Output VALID Input 123124 Output INVALID Input 5 Output VALID Input 987654321 Output VALID Input 121212 Output INVALID","solution":"def is_valid_gem_sequence(s): Determines if the sequence of collected gems is valid. Args: s (str): The sequence of collected gems as a string. Returns: str: \\"VALID\\" if the gem sequence is valid, \\"INVALID\\" otherwise. seen = set() current_char = \'\' for char in s: if char != current_char: if char in seen: return \\"INVALID\\" seen.add(char) current_char = char return \\"VALID\\""},{"question":"Design a file system with a directory structure and provide a mechanism to access and manipulate it. The file system should support the following types of operations: - **Create Directory**: Create a new directory inside an existing directory. - **Create File**: Create a new file inside an existing directory with initial content. - **List Contents**: List all files and directories inside a given directory. - **Read File**: Read the content of a file. - **Write File**: Write new content to a file. - **Delete**: Delete a file or directory. If a directory is deleted, all its contents should be recursively deleted. # Input The input consists of multiple lines where each line represents a command. A command can be one of the following: - `mkdir <directory_path>`: Create a new directory. - `touch <file_path> <content>`: Create a new file. - `ls <directory_path>`: List all files and directories in the specified directory. - `cat <file_path>`: Read and print the content of the specified file. - `write <file_path> <content>`: Write new content to the specified file. - `rm <path>`: Delete the specified file or directory. # Output For each `ls` and `cat` command, output the necessary content as described above. # Constraints - The root directory is denoted as `/`. - Paths are composed of standard Unix-like forward slashes (`/`) to separate directory names. - All directory and file names consist of alphanumeric characters only. - You can assume the number of operations will not exceed `100,000`. - The total size of file content will not exceed `1,000,000` characters. # Example Input ```plaintext mkdir /home mkdir /home/user mkdir /home/user/docs touch /home/user/docs/file1 Hello ls /home/user cat /home/user/docs/file1 write /home/user/docs/file1 World cat /home/user/docs/file1 rm /home/user/docs ls /home/user ``` Output ```plaintext docs Hello World (empty) ``` # Note - This question tests the ability to manage and manipulate a hierarchical file structure. - Pay attention to correctly handling directories and file paths, ensuring no invalid operations are performed. - Commands should handle edge cases such as attempting to create directories or files that already exist, or attempting to delete paths that do not exist.","solution":"class FileSystem: def __init__(self): self.fs = {\'/\': {}} def _get_dir(self, path): parts = path.strip(\'/\').split(\'/\') current = self.fs[\'/\'] for part in parts: if part: current = current[part] return current def mkdir(self, path): parts = path.strip(\'/\').split(\'/\') current = self.fs[\'/\'] for part in parts: if part not in current: current[part] = {} current = current[part] def touch(self, path, content): *dirs, file = path.strip(\'/\').split(\'/\') dir_path = \'/\' + \'/\'.join(dirs) dir_ref = self._get_dir(dir_path) dir_ref[file] = content def ls(self, path): dir_ref = self._get_dir(path) return sorted(dir_ref.keys()) def cat(self, path): *dirs, file = path.strip(\'/\').split(\'/\') dir_path = \'/\' + \'/\'.join(dirs) dir_ref = self._get_dir(dir_path) return dir_ref[file] def write(self, path, content): *dirs, file = path.strip(\'/\').split(\'/\') dir_path = \'/\' + \'/\'.join(dirs) dir_ref = self._get_dir(dir_path) dir_ref[file] = content def rm(self, path): *dirs, name = path.strip(\'/\').split(\'/\') dir_path = \'/\' + \'/\'.join(dirs) dir_ref = self._get_dir(dir_path) del dir_ref[name] def process_commands(commands): fs = FileSystem() output = [] for command in commands: parts = command.split(\' \', 2) cmd, path = parts[0], parts[1] if cmd == \'mkdir\': fs.mkdir(path) elif cmd == \'touch\': content = parts[2] fs.touch(path, content) elif cmd == \'ls\': result = fs.ls(path) output.append(\' \'.join(result) or \'(empty)\') elif cmd == \'cat\': result = fs.cat(path) output.append(result) elif cmd == \'write\': content = parts[2] fs.write(path, content) elif cmd == \'rm\': fs.rm(path) return output"},{"question":"# Make the Grades A group of students has just finished their final exams, and now the grades need to be evaluated. Each student has received a set of scores, and you need to determine if all students passed their exams. To pass, a student must have a minimum average score of 70 across all their tests. # Argument `grades` is an array of arrays, where each sub-array contains integers representing the scores a student has received in their exams. # Return Your function should return `true` if all students have an average score of at least 70, or `false` otherwise. # Examples `allStudentsPassed([[80, 90, 100], [70, 60, 80], [90, 85, 95]])` returns `true` because each sub-array\'s average score is 70 or above. `allStudentsPassed([[80, 90, 100], [70, 60, 80], [65, 55, 45]])` returns `false` because the third sub-array\'s average score is below 70.","solution":"def allStudentsPassed(grades): Given a list of lists containing student grades, returns True if all students have an average score of at least 70. for student_grades in grades: if sum(student_grades) / len(student_grades) < 70: return False return True"},{"question":"Bobby loves playing with cards. He has a deck of cards numbered from 1 to N. He can perform the following operation on the deck: 1. Split the deck into two non-empty parts. 2. Reverse one of the two parts. 3. Concatenate the reversed part with the remaining part. Bobby wants to sort the cards in increasing order using the minimum number of operations. Given the initial order of the cards in the deck, determine the minimum number of operations required to sort the deck. Input First line of input consists of a natural number T - the number of test cases. T test cases follow. For each test case: First line consists of a single integer N - the number of cards. Second line consists of a sequence of N integers representing the initial order of the cards. Output For each test case, print the minimum number of operations required to sort the deck on a new line. Constraints 1 ≤ T ≤ 5 1 ≤ N ≤ 10^5 1 ≤ each card number ≤ 10^9 SAMPLE INPUT 2 4 4 3 2 1 5 3 5 1 4 2 SAMPLE OUTPUT 1 2 Explanation In the first test case, Bobby can split the deck into two parts [4] and [3, 2, 1], reverse the second part and concatenate them to form [4, 1, 2, 3]. One more operation is needed to sort it into [1, 2, 3, 4]. In the second test case, Bobby can split the deck into [3, 5, 1] and [4, 2], reverse the first part to [1, 5, 3] and concatenate them to [1, 5, 3, 4, 2]. He can then split [1] and [5, 3, 4, 2], reverse the second part to [2, 4, 3, 5] and concatenate them to [1, 2, 4, 3, 5], which is sorted in two operations.","solution":"def min_operations_to_sort_deck(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] cards = test_cases[i][1] if cards == sorted(cards): results.append(0) continue reverses_needed = 0 in_decreasing_order = False for j in range(1, N): if cards[j] < cards[j-1]: if not in_decreasing_order: reverses_needed += 1 in_decreasing_order = True else: in_decreasing_order = False results.append(reverses_needed) return results"},{"question":"Alice loves to take photographs of nature. She goes on numerous photography expeditions where she snaps beautiful pictures of the scenery. Alice wants to organize her photo album by selecting the best picture for each distinct scenery. However, she identifies that some photographs are very similar to each other based on their content. Alice decides to manually assign a similarity score to each pair of photographs. Given these similarity scores, she wants to find out the maximum number of dissimilar pictures she can include in her album such that no two selected pictures have a similarity score that exceeds a given threshold. Input The first line contains two integers n and S (1 ≤ n ≤ 100, 0 ≤ S ≤ 100), where n is the number of photographs and S is the similarity threshold value. The next n lines each contain exactly n integers forming an n x n similarity score matrix. The j-th integer on the i-th line indicates the similarity score between the i-th and j-th photographs. Note that the matrix is symmetric and the similarity of a photograph with itself is always zero. Output Output a single integer, the maximum number of dissimilar photographs Alice can select for her album. Examples Input 3 5 0 6 4 6 0 3 4 3 0 Output 2 Input 4 3 0 4 4 2 4 0 5 1 4 5 0 3 2 1 3 0 Output 2","solution":"def max_dissimilar_photos(n, S, similarity_matrix): Returns the maximum number of dissimilar pictures such that no two selected pictures have a similarity score that exceeds the given threshold S. from itertools import combinations def is_valid_combination(combo): for i, j in combinations(combo, 2): if similarity_matrix[i][j] > S: return False return True max_photos = 0 for r in range(1, n + 1): for combo in combinations(range(n), r): if is_valid_combination(combo): max_photos = max(max_photos, r) return max_photos # Example usage n = 3 S = 5 similarity_matrix = [ [0, 6, 4], [6, 0, 3], [4, 3, 0] ] print(max_dissimilar_photos(n, S, similarity_matrix)) # Output: 2 n = 4 S = 3 similarity_matrix = [ [0, 4, 4, 2], [4, 0, 5, 1], [4, 5, 0, 3], [2, 1, 3, 0] ] print(max_dissimilar_photos(n, S, similarity_matrix)) # Output: 2"},{"question":"Max has a rectangular grid of numbers. He wants to find a specific value in the grid and replace all occurrences of that value with another value. Each cell in the grid contains an integer number. Max wants to input the grid, the value to find, and the value to replace it with. The task is to write a function that performs the replacement. -----Input----- The input consists of: - The first line contains two integers n and m (1 le n, m le 50) — the number of rows and columns in the grid. - The following n lines contain m integers each, representing the grid. - The next line contains the integer x — the value to find. - The last line contains the integer y — the value to replace x with. -----Output----- Output the modified grid, where all occurrences of x are replaced with y. -----Example----- Input 3 3 1 2 3 4 1 6 7 8 1 1 9 Output 9 2 3 4 9 6 7 8 9 -----Note----- In the example, Max wants to replace the value 1 with the value 9. Hence, all occurrences of 1 in the grid are replaced by 9. -----Constraints----- - The grid contains integer values between -10^4 and 10^4. - The value to find (x) and the value to replace (y) will also be within the range of -10^4 to 10^4.","solution":"def replace_value_in_grid(n, m, grid, x, y): Replaces all occurrences of x with y in the grid. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list of list of int): The grid of integers. x (int): The value to find in the grid. y (int): The value to replace x with. Returns: list of list of int: The modified grid. for i in range(n): for j in range(m): if grid[i][j] == x: grid[i][j] = y return grid"},{"question":"Leia loves to collect gemstones, and she found a cave with N rooms and M corridors connecting the rooms. Each corridor has a different number of five types of gemstones. She is planning to visit some rooms and collect as many of one type of gemstone as possible, say the precious Daltarian Gems. Leia starts in any room and can freely move to any connected room via the corridors. Each corridor is represented by three integers u, v, and g, which means the corridor connects room u to room v and contains g Daltarian Gems. Your task is to help Leia determine the maximum number of Daltarian Gems she can collect by starting from any room and traversing through corridors to possibly another room. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two space-separated integers N and M — the number of rooms and corridors. - Each of the next M lines contains three space-separated integers u, v, and g, describing a corridor connecting room u to room v with g Daltarian Gems. ------ Output Format ------ For each test case, output on a new line the maximum number of Daltarian Gems Leia can collect. ------ Constraints ------ 1 ≤ T ≤ 10^4 2 ≤ N ≤ 10^5 1 ≤ M ≤ 10^5 1 ≤ u, v ≤ N 0 ≤ g ≤ 10^9 - The sum of all the N across test cases won\'t exceed 10^5. - The sum of all the M across test cases won\'t exceed 10^5. ----- Sample Input 1 ------ 2 4 4 1 2 10 1 3 20 2 4 30 3 4 40 3 2 1 2 7 2 3 5 ----- Sample Output 1 ------ 90 12 ----- explanation 1 ------ Test case 1: Starting at room 1, Leia can traverse the corridors 1 to 3 to 4 to 2 collecting 20+40+30=90 Daltarian Gems. Test case 2: Starting at room 1, Leia can traverse the corridors 1 to 2 to 3 collecting 7+5=12 Daltarian Gems.","solution":"class UnionFind: def __init__(self, size): self.root = list(range(size)) self.rank = [1] * size def find(self, x): if self.root[x] != x: self.root[x] = self.find(self.root[x]) return self.root[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.rank[rootX] > self.rank[rootY]: self.root[rootY] = rootX elif self.rank[rootX] < self.rank[rootY]: self.root[rootX] = rootY else: self.root[rootY] = rootX self.rank[rootX] += 1 def max_daltarian_gems(test_cases): results = [] for n, m, corridors in test_cases: # Sort corridors by the number of gems in descending order corridors.sort(key=lambda x: x[2], reverse=True) # Kruskal\'s algorithm to find the maximum spanning tree uf = UnionFind(n + 1) # rooms are 1-indexed max_gems = 0 for u, v, g in corridors: if uf.find(u) != uf.find(v): uf.union(u, v) max_gems += g results.append(max_gems) return results # Example usage test_cases = [ (4, 4, [(1, 2, 10), (1, 3, 20), (2, 4, 30), (3, 4, 40)]), (3, 2, [(1, 2, 7), (2, 3, 5)]) ] results = max_daltarian_gems(test_cases) for result in results: print(result)"},{"question":"A group of friends is playing a game with a row of coins. There are N coins placed in a line, each coin with a distinct value. The game is turn-based, and the players take turns to pick a coin from either the beginning or the end of the row. The objective of each player is to maximize the total value of the coins they have picked by the time all coins have been taken. Your task is to determine the maximum possible value a player can accumulate if they play optimally, assuming both players are trying to maximize their own total. Input The first line of input contains T, the number of test cases. Each test case starts with a number N, the number of coins, followed by N integers representing the values of the coins. Output For each test case, output the maximum possible value the starting player can accumulate if both players play optimally. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 Each coin\'s value is a distinct integer between 1 and 1000. SAMPLE INPUT 2 4 1 2 3 4 4 4 3 2 1 SAMPLE OUTPUT 6 10","solution":"def max_coin_value(n, coins): Returns the maximum possible value the starting player can accumulate by picking coins optimally. # Create a DP table to store solutions of subproblems dp = [[0] * n for _ in range(n)] # Fill the DP table for gap in range(n): for i in range(n - gap): j = i + gap if i == j: dp[i][j] = coins[i] elif j == i + 1: dp[i][j] = max(coins[i], coins[j]) else: dp[i][j] = max(coins[i] + min(dp[i + 2][j], dp[i + 1][j - 1]), coins[j] + min(dp[i + 1][j - 1], dp[i][j - 2])) return dp[0][n - 1] def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] coins = test_cases[i][1] results.append(max_coin_value(n, coins)) return results"},{"question":"Complete the function ```arrayModifier```, which takes a list of integers and a string as its arguments. The string argument can be either \\"odd\\" or \\"even\\". Based on the string argument, modify the list in the following ways: - If the string argument is \\"odd\\", increment each odd integer by 1 and leave even integers unchanged. - If the string argument is \\"even\\", decrement each even integer by 1 and leave odd integers unchanged. The function should return the modified list. ```python arrayModifier([1, 2, 3, 4, 5], \\"odd\\") => [2, 2, 4, 4, 6] arrayModifier([1, 2, 3, 4, 5], \\"even\\") => [1, 1, 3, 3, 5] arrayModifier([10, 15, 20, 25], \\"odd\\") => [10, 16, 20, 26] arrayModifier([10, 15, 20, 25], \\"even\\") => [9, 15, 19, 25] ```","solution":"def arrayModifier(arr, mode): Modifies the array based on the mode (\'odd\' or \'even\'). - \\"odd\\": Increment each odd integer by 1. - \\"even\\": Decrement each even integer by 1. Parameters: arr (list of int): The input list of integers. mode (str): The mode, either \\"odd\\" or \\"even\\". Returns: list of int: The modified list. if mode == \\"odd\\": return [x + 1 if x % 2 != 0 else x for x in arr] elif mode == \\"even\\": return [x - 1 if x % 2 == 0 else x for x in arr] else: raise ValueError(\\"Mode must be \'odd\' or \'even\'\\")"},{"question":"Mark and Jane are playing with strings. They give each other a string-related challenge to test their skills. This time, the challenge is to identify the longest palindromic substring within a given string. A palindromic string is one that reads the same forwards and backwards. Write a program that takes a string `s` as input and determines the length of the longest palindromic substring within `s`. INPUT: The first line contains a single integer `T` denoting the number of test cases. Each of the next `T` lines contains a string `s`. OUTPUT: For each test case, print the length of the longest palindromic substring on a new line. CONSTRAINTS: 1 ≤ T ≤ 100 1 ≤ |s| ≤ 10^3 `s` contains only lowercase English letters. SAMPLE INPUT: 2 babad cbbd SAMPLE OUTPUT: 3 2 Explanation: For the first test case, \\"bab\\" or \\"aba\\" are the longest palindromic substrings. For the second test case, \\"bb\\" is the longest palindromic substring.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring within the input string s. n = len(s) if n == 0: return 0 # Create a DP table to store the palindromic status dp = [[False] * n for _ in range(n)] max_length = 1 # Every string with one character is a palindrome for i in range(n): dp[i][i] = True start = 0 # To track the starting index of the longest palindrome # Check for sub-string of length 2. for i in range(n-1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2. for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if length > max_length: start = i max_length = length return max_length def longest_palindromic_substrings(test_cases): Returns a list containing the length of the longest palindromic substring for each string in test_cases. results = [] for s in test_cases: results.append(longest_palindromic_substring_length(s)) return results"},{"question":"Develop a function to determine if a given sequence of integers is a valid Zig-Zag sequence or not. A Zig-Zag sequence is an array of numbers where each element is either strictly larger than or strictly smaller than both of its neighbors. For example, [1, 3, 2, 4, 3] and [10, 5, 20, 15, 30] are Zig-Zag sequences, but [1, 2, 3, 4, 5] and [5, 3, 2, 4, 7] are not. -----Input:----- - First line of the input contains a single integer T, the number of test cases (1 ≤ T ≤ 100). - Each test case consists of two lines: - The first line contains a single integer N, the length of the sequence (1 ≤ N ≤ 1000). - The second line contains N space-separated integers representing the sequence. -----Output:----- For each test case, print \\"YES\\" if the sequence is a valid Zig-Zag sequence, otherwise print \\"NO\\". -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - -1000 ≤ A_i ≤ 1000 (where A_i is the value of the i-th element of the sequence) -----Sample Input----- 3 5 1 3 2 4 3 6 10 5 15 10 20 5 4 1 2 2 1 -----Sample Output----- YES YES NO","solution":"def is_zigzag(sequence): Determines if the given sequence is a valid Zig-Zag sequence. A Zig-Zag sequence is an array where each element is either strictly larger than or strictly smaller than both of its neighbors. n = len(sequence) if n <= 1: return True for i in range(1, n - 1): if not ((sequence[i] > sequence[i-1] and sequence[i] > sequence[i+1]) or (sequence[i] < sequence[i-1] and sequence[i] < sequence[i+1])): return False return True def zigzag_sequence_detector(test_cases): results = [] for case in test_cases: N, sequence = case if is_zigzag(sequence): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to find the length of the longest substring of S that contains a maximum of two distinct characters. For example, consider the string \\"eceba\\": - The longest substring with a maximum of two distinct characters is \\"ece\\", which has a length of 3. Write a Python function to solve this problem. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - For each test case, there is a single line containing the string S. -----Output----- For each test case, print a single line containing one integer ― the length of the longest substring that contains at most two distinct characters. -----Constraints----- - 1 le T le 10 - 1 le |S| le 10^5 - S consists of lowercase English letters only -----Example Input----- 2 eceba ccaabbb -----Example Output----- 3 5 -----Explanation----- Example case 1: The longest substrings with at most two distinct characters are \\"ece\\" and \\"cec\\", both have a length of 3. Example case 2: The longest substring with at most two distinct characters is \\"aabbb\\" with length 5.","solution":"def longest_substring_with_two_distinct_characters(S): from collections import defaultdict n = len(S) if n == 0: return 0 left = 0 right = 0 max_length = 0 char_map = defaultdict(int) while right < n: char_map[S[right]] += 1 while len(char_map) > 2: char_map[S[left]] -= 1 if char_map[S[left]] == 0: del char_map[S[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length def process_test_cases(test_cases): results = [] for S in test_cases: results.append(longest_substring_with_two_distinct_characters(S)) return results"},{"question":"Problem: You are given a list of products and their prices from two different stores. Your task is to write a program that finds the lowest possible total price for purchasing all the products. You can choose to buy each product from either store, but you must buy all the products exactly once. # Input Format - The first line contains an integer `N` denoting the number of products. - The next line contains `N` integers where the `i-th` integer denotes the price of the `i-th` product in the first store. - The third line contains `N` integers where the `i-th` integer denotes the price of the `i-th` product in the second store. # Constraints - `1 <= N <= 10^5` - `0 <= price of each product <= 10^9` # Output Format - Print a single integer, the lowest possible total price for purchasing all the products. # Example **Input**: ``` 3 10 20 30 15 25 10 ``` **Output**: ``` 45 ``` **Explanation**: - The lowest price for the first product is 10 (store 1). - The lowest price for the second product is 20 (store 1). - The lowest price for the third product is 10 (store 2). - Total price = 10 + 20 + 10 = 40. **Input**: ``` 4 5 8 7 3 6 4 8 6 ``` **Output**: ``` 20 ``` **Explanation**: - The lowest price for the first product is 5 (store 1). - The lowest price for the second product is 4 (store 2). - The lowest price for the third product is 7 (store 1). - The lowest price for the fourth product is 3 (store 1). - Total price = 5 + 4 + 7 + 3 = 19.","solution":"def find_lowest_total_price(N, store1_prices, store2_prices): This function finds the lowest possible total price for purchasing all the products. Parameters: N (int): The number of products. store1_prices (list): A list of integers representing the prices of the products in the first store. store2_prices (list): A list of integers representing the prices of the products in the second store. Returns: int: The lowest possible total price. total_price = 0 for price1, price2 in zip(store1_prices, store2_prices): total_price += min(price1, price2) return total_price"},{"question":"A popular social media platform is organizing a challenge. Users can create posts and apply hashtags to them. The platform wants to implement a new feature to find the top trending hashtags. Given a list of posts and their associated hashtags, your task is to find the N most frequently used hashtags. If there is a tie in the frequency count, sort the hashtags lexicographically. You are given a list of posts, where each post is a string containing words and hashtags. A hashtag is defined as a word that starts with the \'#\' character. The posts list can have up to 1000 posts, and each post can have up to 280 characters. Input The input consists of two parts. The first part is a list of posts where each post is a single line string containing words and hashtags. The second part is an integer N, which represents the number of top trending hashtags to be returned. Output The output should be a list of strings representing the top N trending hashtags sorted by their frequency (and lexicographically in case of a tie). Constraints - 1 ≤ |posts| ≤ 1000 - 1 ≤ N ≤ 100 - Each post has at most 280 characters. Examples Input posts = [\\"#fun #sun #sea\\", \\"I love the #sea and #sun\\", \\"#fun and #entertainment\\", \\"#sea\\"] N = 2 Output [\'#sea\', \'#sun\'] Input posts = [\\"#apple #banana #apple\\", \\"Let\'s eat an #apple\\", \\"#orange #banana\\"] N = 3 Output [\'#apple\', \'#banana\', \'#orange\']","solution":"from collections import defaultdict def top_trending_hashtags(posts, N): Returns the top N trending hashtags from the given list of posts. Args: posts (list of str): List of posts with words and hashtags. N (int): Number of top trending hashtags to return. Returns: list of str: List of top N trending hashtags. hashtag_count = defaultdict(int) # Count the occurrence of each hashtag for post in posts: words = post.split() for word in words: if word.startswith(\'#\'): hashtag_count[word] += 1 # Sort hashtags by frequency and then lexicographically sorted_hashtags = sorted(hashtag_count.items(), key=lambda x: (-x[1], x[0])) # Extract the top N hashtags result = [hashtag for hashtag, count in sorted_hashtags[:N]] return result"},{"question":"Given an integer array A and a target integer k, you need to determine if there are two distinct indices i and j in the array such that A[i] + A[j] is equal to k. -----Input----- The first line of input contains the integer n (the length of the array). The second line of input contains n space-separated integers, representing the elements of the array A. The third line of input contains the integer k. -----Output----- Output \\"YES\\" (without quotes) if there are two distinct indices i and j such that A[i] + A[j] = k; otherwise output \\"NO\\". -----Constraints----- - 1 ≤ n ≤ 100,000 - -10^9 ≤ A[i] ≤ 10^9 - -10^9 ≤ k ≤ 10^9 -----Example----- Input: 5 1 2 3 4 5 7 Output: YES -----Explanation----- In the given sample case, there are two indices 2 and 4 (0-based index) such that A[2] + A[4] equals 7.","solution":"def has_two_sum(A, k): Determines if there are two distinct indices i and j in the array A such that A[i] + A[j] = k. seen = set() for num in A: if (k - num) in seen: return True seen.add(num) return False"},{"question":"In a magical forest, there exists a special type of tree called the Roots Tree. The Roots Tree has a unique growth pattern where each node in the tree represents a magical root, and each edge between nodes represents a magical connection. To enhance the forest\'s magic, a wizard wants to increase the magical power of the Roots Tree by rearranging its structure. Specifically, the wizard wants to convert the tree into a Balanced Roots Tree. A Balanced Roots Tree is defined as a tree where the difference in the heights of the left and right subtrees of every node is at most 1. Given a tree with N nodes (numbered from 1 to N) and N-1 edges, your task is to determine if it is possible to rearrange the tree to form a Balanced Roots Tree. If it is possible, you should output the new arrangement as a set of parent-child relationships. Input The first line contains an integer N (1 ≤ N ≤ 1000) – the number of nodes in the tree. Each of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N) – indicating that there is an edge between nodes u and v. Output If it is possible to rearrange the tree to form a Balanced Roots Tree, print \\"YES\\", followed by N-1 lines representing the new parent-child relationships, with each line containing two integers: the parent node and the child node. If it is not possible, print \\"NO\\". Example Input 7 1 2 1 3 2 4 2 5 3 6 3 7 Output YES 1 2 1 3 2 4 2 5 3 6 3 7 Note In the given example, the input tree is already a Balanced Roots Tree, so the output mirrors the input. The tree structure can be rearranged in other ways as long as it meets the conditions of a Balanced Roots Tree.","solution":"from collections import defaultdict, deque def build_tree(edges, N): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) return tree def is_balanced(tree, node, parent): heights = [] for child in tree[node]: if child != parent: # avoid going back to the parent node heights.append(is_balanced(tree, child, node)) if not heights: return 1 max_height = max(heights) min_height = min(heights) if max_height - min_height > 1: return -1 # unbalanced subtree return max_height + 1 def reorder_tree(tree, N): # Rebuild the tree with BFS ensuring it remains balanced root = 1 # arbitrary root queue = deque([root]) visited = set([root]) parent_child_pairs = [] while queue: node = queue.popleft() for child in tree[node]: if child not in visited: parent_child_pairs.append((node, child)) queue.append(child) visited.add(child) return parent_child_pairs def balanced_roots_tree(N, edges): tree = build_tree(edges, N) height_check = is_balanced(tree, 1, -1) if height_check == -1: print(\\"NO\\") else: new_arrangement = reorder_tree(tree, N) print(\\"YES\\") for parent, child in new_arrangement: print(parent, child) # Example Input N = 7 edges = [ (1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7) ] balanced_roots_tree(N, edges)"},{"question":"You are given a string. Your task is to count the number of vowels (both uppercase and lowercase) and consonants (both uppercase and lowercase) in the string. A consonant is considered as any alphabetical character that is not a vowel. Example 1: Input: S = \\"HelloWorld\\" Output: {\\"vowels\\": 3, \\"consonants\\": 7} Explanation: In the string \\"HelloWorld\\", there are 3 vowels: \'e\', \'o\', \'o\', and 7 consonants: \'H\', \'l\', \'l\', \'W\', \'r\', \'l\', \'d\'. Example 2: Input: S = \\"abcDEF123\\" Output: {\\"vowels\\": 2, \\"consonants\\": 4} Explanation: In the string \\"abcDEF123\\", there are 2 vowels: \'a\', \'e\', and 4 consonants: \'b\', \'c\', \'D\', \'F\'. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countVowelsAndConsonants() which takes the string S as input parameter and returns a dictionary with the keys \\"vowels\\" and \\"consonants\\" denoting the count of vowels and consonants in the string, respectively. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) CONSTRAINTS: 1 <= |S| <= 1000 S only contains alphanumeric characters.","solution":"def countVowelsAndConsonants(S): Takes a string S as input and returns a dictionary with the count of vowels and consonants in the string. vowels = \\"aeiouAEIOU\\" vowel_count = 0 consonant_count = 0 for char in S: if char.isalpha(): if char in vowels: vowel_count += 1 else: consonant_count += 1 return {\\"vowels\\": vowel_count, \\"consonants\\": consonant_count}"},{"question":"Given two strings s and t, return the minimum number of operations required to convert s into t. The allowed operations are inserting a character, deleting a character, or replacing a character. Example 1: Input: s = \\"horse\\", t = \\"ros\\" Output: 3 Explanation: horse -> rorse (replace \'h\' with \'r\') rorse -> rose (remove \'r\') rose -> ros (remove \'e\') Example 2: Input: s = \\"intention\\", t = \\"execution\\" Output: 5 Explanation: intention -> inention (remove \'t\') inention -> enention (replace \'i\' with \'e\') enention -> exention (replace \'n\' with \'x\') exention -> exection (replace \'n\' with \'c\') exection -> execution (insert \'u\') Note: 1. 0 ≤ s.length, t.length ≤ 1000 2. All strings consist of lowercase English letters only.","solution":"def min_distance(s, t): Returns the minimum number of operations required to convert string s into string t. Operations allowed: insert a character, delete a character, or replace a character. m, n = len(s), len(t) # dp[i][j] will hold the minimum edit distance between s[0:i] and t[0:j] dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the dp array for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Compute the dp array for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # delete dp[i][j - 1], # insert dp[i - 1][j - 1]) # replace return dp[m][n]"},{"question":"In a city, you are given a grid with n rows and m columns. Each cell of the grid can either be empty or contain an asteroid. The city has introduced a new policy to destroy asteroids using a laser that travels straight along a row or a column. You are required to destroy all asteroids in the minimum number of moves. A move is defined as firing the laser along a single row or a single column, destroying all asteroids present in that row or column. Write a program to find the minimum number of moves required to destroy all the asteroids. Input The first line contains two integers n and m (1 ≤ n, m ≤ 500) - the number of rows and columns in the grid. The next n lines describe the grid, each containing m characters. A \'.\' represents an empty cell, and a \'*\' represents a cell containing an asteroid. Output Print the minimum number of moves required to destroy all the asteroids. Examples Input 4 5 .*... ....* .*... ..... Output 2 Input 3 3 *.. ..* ..* Output 3 Explanation In the first example, the optimal way to destroy all asteroids is: 1. Fire the laser along the column 2, destroying the asteroids at (1, 2) and (3, 2). 2. Fire the laser along the row 4, destroying the asteroid at (2, 5). In the second example, each asteroid is in a separate row and column, so we need to fire the laser three times, once for each row or column containing an asteroid.","solution":"def min_number_of_moves(n, m, grid): rows_with_asteroids = set() cols_with_asteroids = set() for i in range(n): for j in range(m): if grid[i][j] == \'*\': rows_with_asteroids.add(i) cols_with_asteroids.add(j) return min(len(rows_with_asteroids), len(cols_with_asteroids))"},{"question":"You are given an **m x n** matrix which alternates between \'X\' and \'O\' in a checkerboard pattern, starting with \'X\' in the top-left corner. Write a function that fills this pattern into an empty matrix of the same dimensions. For example, a **3 x 3** matrix would appear like this: ``` X O X O X O X O X ``` If **m = 4** and **n = 5**, the matrix would be: ``` X O X O X O X O X O X O X O X O X O X O ``` Function Description Complete the `createCheckerboard` function in the editor below. `createCheckerboard` has the following parameters: - integer m: the number of rows in the matrix - integer n: the number of columns in the matrix Returns - a list of strings: the filled matrix as an array of strings Input Format - The first line contains two integers, **m** and **n**, the number of rows and columns of the matrix, respectively. Constraints - 1 leq m, n leq 100 Output Format - A matrix of dimensions **m x n** where \'X\' and \'O\' alternate in a checkerboard pattern, starting with \'X\' in the top-left corner. Sample Input 0 3 3 Sample Output 0 ``` X O X O X O X O X ``` Sample Input 1 4 5 Sample Output 1 ``` X O X O X O X O X O X O X O X O X O X O ``` Explanation In sample case 0, a **3 x 3** matrix is filled with alternating \'X\' and \'O\' starting with \'X\' in the top-left corner. In sample case 1, a **4 x 5** matrix follows the same alternating pattern starting with \'X\' in the top-left corner. Here\'s a starter implementation in Python: ```python def createCheckerboard(m, n): matrix = [] for i in range(m): row = [] for j in range(n): if (i + j) % 2 == 0: row.append(\'X\') else: row.append(\'O\') matrix.append(\' \'.join(row)) return matrix # Read input m, n = map(int, input().split()) # Get checkerboard pattern checkerboard = createCheckerboard(m, n) # Print each row of the checkerboard for row in checkerboard: print(row) ```","solution":"def createCheckerboard(m, n): Creates a checkerboard pattern of \'X\' and \'O\' in a m x n matrix. Parameters: - m (int): number of rows - n (int): number of columns Returns: - list of str: checkerboard pattern as a list of strings matrix = [] for i in range(m): row = [] for j in range(n): if (i + j) % 2 == 0: row.append(\'X\') else: row.append(\'O\') matrix.append(\' \'.join(row)) return matrix"},{"question":"Given a string containing digits from \\"0\\" to \\"9\\", generate the smallest possible integer number (in string format) by removing exactly one digit from the input string. Example 1: Input: num = \\"1524\\" Output: \\"124\\" Explanation: Removing the digit \'5\' results in the smallest possible number \\"124\\". Example 2: Input: num = \\"1005\\" Output: \\"005\\" Explanation: Removing the digit \'1\' results in the smallest possible number \\"005\\". Your Task: You don\'t need to read input or print anything. Your function `removeDigit` takes a single string as input and returns a string as output representing the smallest possible number attainable by removing exactly one digit. Expected Time Complexity: O(N), where N is the length of the input string. Expected Auxiliary Space: O(1) Constraints: - The string length is between 2 and 10^5. - The input string will not contain leading zeros.","solution":"def removeDigit(num): Given a string containing digits from \\"0\\" to \\"9\\", generate the smallest possible integer number (in string format) by removing exactly one digit from the input string. for i in range(len(num) - 1): if num[i] > num[i + 1]: return num[:i] + num[i + 1:] return num[:-1]"},{"question":"Task: Write a function called `validate_sudoku(grid)` that takes in a 2D list representing a completed Sudoku puzzle and returns `True` if it is valid according to Sudoku rules, otherwise `False`. Sudoku rules: 1. Each row must contain the digits 1-9 without repetition. 2. Each column must contain the digits 1-9 without repetition. 3. Each of the 9 sub-grids must contain the digits 1-9 without repetition. A valid Sudoku grid will always be a 9x9 matrix where each element is an integer from 1 to 9. What each parameter looks like: ```python type(grid) #=> list of lists : It is a 9x9 grid where each element is an integer from 1 to 9. type(validate_sudoku(grid)) #=> bool ``` Some examples: ```python grid1 = [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] validate_sudoku(grid1) #=> True grid2 = [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 6, 5], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 1, 9] # note the last row, it has two 1s ] validate_sudoku(grid2) #=> False ```","solution":"def validate_sudoku(grid): Validates a completed Sudoku grid. Parameters: grid (list of lists): A 9x9 grid of integers. Returns: bool: True if the grid is a valid Sudoku solution, False otherwise. def is_valid_block(block): return sorted(block) == list(range(1, 10)) # Check rows for row in grid: if not is_valid_block(row): return False # Check columns for col in range(9): if not is_valid_block([grid[row][col] for row in range(9)]): return False # Check 3x3 sub-grids for i in range(0, 9, 3): for j in range(0, 9, 3): block = [grid[x][y] for x in range(i, i + 3) for y in range(j, j + 3)] if not is_valid_block(block): return False return True"},{"question":"A palindrome is a string that reads the same forward and backward. Given a string `s`, you can remove at most one character from it. Your task is to determine whether you can create a palindrome by removing exactly one character from the string `s`. -----Input----- The input will be a single string `s` containing only lowercase alphabetic characters, where the length of `s` is between 1 and 10^5. -----Output----- Output \\"YES\\" if you can remove exactly one character from `s` to make it a palindrome, otherwise output \\"NO\\". -----Examples----- Input abca Output YES Input abc Output NO # Solution: To solve this problem, you can use a two-pointer technique to compare characters from either end, and if a mismatch is found, check whether removing one of the characters results in a palindrome.","solution":"def valid_palindrome_with_one_removal(s): def is_palindrome_range(i, j): return all(s[k] == s[j - k + i] for k in range(i, j // 2 + 1)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Check by removing either left character or right character return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True def can_form_palindrome(s): if valid_palindrome_with_one_removal(s): return \\"YES\\" else: return \\"NO\\""},{"question":"A farmer owns a rectangular field divided into a grid of M rows and N columns. Each cell in the grid can either be empty or contain a plant. The field is represented by an MxN binary matrix where a 1 represents a plant and a 0 represents an empty cell. The farmer wants to build the largest possible square plot within the field that contains only plants. Write a program to determine the size (side length) of the largest square plot that can be formed using only plant cells. -----Input----- - The first line contains two space-separated integers M and N (1 ≤ M, N ≤ 500), which represent the number of rows and columns in the matrix, respectively. - The next M lines each contain N space-separated integers (either 0 or 1) representing the cells of the field. -----Output----- - Output a single integer, the side length of the largest square plot that contains only 1s. -----Examples----- Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 2 Input 5 6 0 1 1 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 0 0 1 1 1 0 Output 3 -----Note----- Example 1: The largest square plot of plants can be found in the last three rows and last three columns, having a side length of 2. Example 2: The largest square plot of plants is found starting from the second row\'s second column to the fourth row’s fourth column, with a side length of 3.","solution":"def largest_square_plot(M, N, field): Determines the side length of the largest square plot that contains only plant cells (1s). # Create a 2D array dp where dp[i][j] represents the side length of the largest square # whose bottom-right corner is the cell (i, j). dp = [[0] * N for _ in range(M)] max_side = 0 # Iterate over the field to fill the dp table for i in range(M): for j in range(N): if field[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"You are given an integer array `arr` of length `n`. An array `seg` is called a valid segment array if: 1. It is formed by taking a contiguous subarray from `arr`. 2. Each element in `seg` has at least one adjacent element in `arr`. Your task is to find the maximum possible sum of elements in a valid segment array. -----Input----- The first line of the input contains one integer n (1 leq n leq 10^5) — the length of the array `arr`. The second line of the input contains n integers arr_1, arr_2, dots, arr_n (-10^9 leq arr_i leq 10^9), where arr_i is the i-th element of `arr`. -----Output----- Print one integer — the maximum sum of elements of any valid segment array. -----Examples----- Input 5 1 -2 3 4 -1 Output 7 Input 3 -1 -2 -3 Output -1 Input 4 2 1 -2 3 Output 4","solution":"def max_segment_sum(arr): Returns the maximum possible sum of elements in a valid segment array. Args: arr (list): integer array, where 1 <= len(arr) <= 10^5 and -10^9 <= arr[i] <= 10^9 Returns: int: the maximum sum of elements of any valid segment array. current_max_sum = arr[0] max_sum = arr[0] for i in range(1, len(arr)): current_max_sum = max(arr[i], current_max_sum + arr[i]) max_sum = max(max_sum, current_max_sum) return max_sum"},{"question":"Mr. Kawaguchi is organizing a series of meetings in a large conference room. He wants to ensure that the meetings are scheduled in such a way that the room is used efficiently without any overlaps between meetings. Each meeting has a start time and an end time, and no two meetings should occupy the room at the same time. You are given a list of meetings with their start and end times. Your task is to write a program that calculates the maximum number of non-overlapping meetings that can be accommodated in the conference room. For example, consider the following 4 meetings with their start and end times: - Meeting 1: (1, 3) - Meeting 2: (2, 5) - Meeting 3: (4, 6) - Meeting 4: (6, 8) The optimal way to schedule these meetings is to select Meeting 1, Meeting 3, and Meeting 4, thereby allowing 3 meetings in total. Input The input contains multiple datasets. Each dataset is formatted as follows: - The first line contains an integer n (0 ≤ n ≤ 1,000), the number of meetings. - The next n lines each contain two integers si and ei (0 ≤ si < ei ≤ 10,000), representing the start and end times of the i-th meeting. The input ends with a line containing one 0. The number of datasets does not exceed 50. Output For each dataset, output a single integer that represents the maximum number of non-overlapping meetings that can be scheduled in the conference room. Example Input 4 1 3 2 5 4 6 6 8 0 Output 3","solution":"def max_non_overlapping_meetings(meetings): Returns the maximum number of non-overlapping meetings that can be accommodated. :param meetings: List of tuples containing start and end times of meetings. :return: Integer representing the maximum number of non-overlapping meetings. if not meetings: return 0 # Sort meetings based on their end times meetings.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping meetings count = 0 end_time = 0 # Iterate through the sorted list and check for overlaps for start, end in meetings: if start >= end_time: count += 1 end_time = end return count def process_input(input_data): Process the input data to handle multiple datasets. :param input_data: String containing input data. :return: List of results for each dataset. lines = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(lines): n = int(lines[index]) if n == 0: break index += 1 meetings = [] for _ in range(n): start, end = map(int, lines[index].split()) meetings.append((start, end)) index += 1 results.append(max_non_overlapping_meetings(meetings)) return results"},{"question":"You are given an array of integers and a target integer k. Your task is to find all unique pairs of integers in the array that sum up to the target integer k. Each pair should be listed as a tuple, and the list of tuples should be sorted in ascending order (both within each tuple and the list itself). If no such pairs exist, return an empty list. You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 10^3) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n (2 le n le 10^3) and k (-10^6 le k le 10^6) — the length of the array and the target sum. The second line of each test case contains n integers (-10^6 le text{arr}[i] le 10^6). -----Output----- For each test case, print the list of unique pairs as described. If no such pairs exist, print an empty list. -----Example----- Input 3 5 9 2 7 11 15 1 4 6 1 5 3 3 3 10 3 4 8 Output [(2, 7)] [(1, 5), (3, 3)] [] -----Note----- In the first test case, there is only one pair (2, 7) that sums to 9. In the second test case, the pairs (1, 5) and (3, 3) both sum to 6. In the third test case, there are no pairs that sum to 10.","solution":"def find_pairs(arr, k): Given an array of integers and a target integer k, find all unique pairs of integers in the array that sum up to the target integer k. pairs = set() seen = set() for number in arr: complement = k - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return sorted(pairs) def process_test_cases(test_cases): results = [] for arr, k in test_cases: pairs = find_pairs(arr, k) results.append(pairs) return results"},{"question":"Given a string that contains a valid arithmetic expression with positive integers and the operators `+` and `*` only, write a function `evaluate_expression(expr)` that evaluates the arithmetic expression and returns the result as an integer. The expression does not contain any spaces and follows the standard operator precedence (`*` before `+`). For example, the input `expr` could be `\\"3+5*2\\"` and the function should return `13`.","solution":"def evaluate_expression(expr): Evaluates a given arithmetic expression containing positive integers and the operators + and * only. Parameters: expr (str): A string containing the arithmetic expression. Returns: int: The result of evaluating the expression. # Separating the expression into terms split by \'+\' terms = expr.split(\'+\') total = 0 for term in terms: # Splitting the term into factors split by \'*\' factors = term.split(\'*\') product = 1 for factor in factors: product *= int(factor) # Adding the product of the factors to the total sum total += product return total"},{"question":"Polycarp has an array of n integers a_1, a_2, dots, a_n. Polycarp wants to rearrange the array such that the absolute difference between any two adjacent elements is minimized. Your task is to help Polycarp find such an arrangement. Additionally, if there are multiple valid arrangements, return the one that is lexicographically smallest. To clarify, an array b is lexicographically smaller than an array c if and only if at the first index where they differ, the element in b is smaller than the corresponding element in c. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (2 le n le 50) — the number of elements in the array. The second line contains n integers a_1, a_2, dots a_n (1 le a_i le 10^3). -----Output----- For each test case, output a single line containing the rearranged array that minimizes the maximum absolute difference between adjacent elements and is lexicographically smallest. -----Examples----- Input 2 4 10 1 3 7 3 4 2 5 Output 1 3 7 10 2 4 5 -----Note----- In the first example, the rearrangement [1, 3, 7, 10] minimizes the absolute difference between adjacent elements. The differences are [2, 4, 3], so the maximum is 4. This arrangement is also lexicographically smallest. In the second example, the arrangement [2, 4, 5] minimizes the absolute difference between adjacent elements. The differences are [2, 1], so the maximum is 2. This arrangement is also lexicographically smallest.","solution":"def rearrange_array(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = sorted(test_cases[i][1]) results.append(a) return results def format_results(results): return \'n\'.join(\' \'.join(map(str, result)) for result in results) # Function to execute solution on inputs def minimize_max_abs_difference(t, test_cases): results = rearrange_array(t, test_cases) return format_results(results)"},{"question":"You are given an integer array `nums` of length `n`. You can repeatedly apply the following operation any number of times (possibly zero): choose any two distinct indices `i` and `j` (1 ≤ `i`, `j` ≤ `n`) and swap `nums[i]` and `nums[j]`. Your task is to sort the array `nums` in non-decreasing order by applying at most `10^4` of these operations. Find any way to sort the array with no more than `10^4` swaps. -----Input----- The first line of the input contains one integer `n` (1 ≤ `n` ≤ 50) — the length of the array `nums`. The second line contains `n` integers separated by spaces — the elements of the array `nums`. -----Output----- If it is impossible to sort the array using the given operations, print \\"-1\\". Otherwise, in the first line, print one integer `k` — the number of swaps to sort the array `nums`. Note that `k` must be an integer number between `0` and `10^4` inclusive. In the next `k` lines, print two integers `i` and `j` (1 ≤ `i`, `j` ≤ `n`), where each pair indicates a swap between the elements at positions `i` and `j`. If you do not need to apply any swaps, print a single integer `0` in the first line. -----Examples----- Input 5 3 1 4 1 5 Output 3 1 2 3 4 4 5 Input 3 3 3 3 Output 0 -----Note----- In the first example, the array `nums` changes as follows: [3, 1, 4, 1, 5] → [1, 3, 4, 1, 5] → [1, 3, 1, 4, 5] → [1, 3, 1, 5, 4]. In the second example, the array is already sorted, so no swaps are needed.","solution":"def sort_with_swaps(n, nums): # To store the list of swaps swaps = [] # Creating an array of tuples holding value and its index indexed_nums = list(enumerate(nums, start=1)) # Sorting by value indexed_nums.sort(key=lambda x: x[1]) # Array of positions where eventually each element will go pos = [0] * n for i, (index, value) in enumerate(indexed_nums): pos[index - 1] = i for i in range(n): while pos[i] != i: j = pos[i] swaps.append((i + 1, j + 1)) # Swap the elements in the original array nums[i], nums[j] = nums[j], nums[i] # Update positions information pos[i], pos[j] = pos[j], pos[i] # Printing the result if len(swaps) > 10000: return -1, [] else: return len(swaps), swaps"},{"question":"Moana is organizing her collection of magic stones, each with a unique magical power index. She arranges them sequentially, but due to a sudden storm, some stones are blown away, leaving gaps in her collection which she marks with a -1. Moana wants to rearrange the stones so that the sum of the differences between the magical power indices of the adjacent stones is minimized. The final arrangement should replace the -1 values optimally. A difference sequence for an arrangement is defined as the sum of the absolute differences of the magical power indices for every two adjacent stones. Examples of such differences are |a2 - a1| + |a3 - a2| + ... + |an - an-1|. Your objective is to help Moana minimize this difference sequence by finding an optimal way to replace the -1 gaps. Input The first line contains an integer n (2 ≤ n ≤ 1000), the number of stones. The second line contains n integers representing the initial arrangement of the stones, where -1 denotes a gap (0 ≤ aᵢ ≤ 1000 for indices of stones and -1 for gaps). The initial stones’ indices are such that they can form a continuous sequence when gaps are filled appropriately. Output Output a single integer, the minimum possible value of the sum of the differences of the adjacent stones after optimally filling the gaps. Examples Input 5 2 -1 3 -1 4 Output 2 Explanation In the given example, the optimal arrangement would replace the gaps in such a manner that the difference sequence is minimized. One possible optimal arrangement could be [2, 2, 3, 3, 4], leading to the minimum sum of differences, which is |2-2| + |3-2| + |3-3| + |4-3| = 0 + 1 + 0 + 1 = 2. The exact placement of stones might vary, but the minimum difference sum remains the same.","solution":"def minimize_differences(n, stones): Returns the minimum possible value of the sum of the differences of the adjacent stones after optimally filling the gaps. def fill_gaps(arr): Helper function to fill the gaps (-1) in the array with optimal values that minimize the sum of absolute differences between adjacent elements. # First find all positions and corresponding stones where -1 is not present positions = [i for i, x in enumerate(arr) if x != -1] # If all positions are originally occupied, return the array as is if len(positions) == len(arr): return arr # Find the minimum value of a valid stone min_stone = min([arr[pos] for pos in positions]) max_stone = max([arr[pos] for pos in positions]) # Fill each -1 based on the minimum and maximum value calculated for i in range(len(arr)): if arr[i] == -1: if i == 0: # if the first element is -1, assign it to the minimum stone arr[i] = min_stone elif i == len(arr) - 1: # if the last element is -1, assign it to the maximum stone arr[i] = max_stone else: # Try to minimize the gap by assigning a value between its neighbors\' values left_neighbor = arr[i - 1] right_neighbor = None for j in range(i + 1, len(arr)): if arr[j] != -1: right_neighbor = arr[j] break if right_neighbor is not None: arr[i] = (left_neighbor + right_neighbor) // 2 else: arr[i] = left_neighbor # if no valid neighbor on the right return arr stones = fill_gaps(stones) # Calculate the sum of differences between adjacent stones difference_sum = sum(abs(stones[i] - stones[i - 1]) for i in range(1, n)) return difference_sum"},{"question":"You are given an array of integers representing the heights of buildings in a row, arranged from left to right. Your task is to determine the number of buildings that have an unobstructed view of the sunset, which occurs to the left. A building has an unobstructed view of the sunset if there are no taller buildings to its left. Constraints * 1 leq N leq 10^5 * 1 leq H_i leq 10^9 * H_i is the height of the i-th building from the left. Input Input is given from Standard Input in the following format: N H_1 H_2 ... H_N Output Print the number of buildings that have an unobstructed view of the sunset. Examples Input 5 4 2 3 1 5 Output 2 Input 4 1 2 3 4 Output 4","solution":"def count_buildings_with_sunset_view(buildings): Returns the number of buildings that have an unobstructed view of the sunset. Parameters: buildings (list): List of integers representing the heights of the buildings. Returns: int: Number of buildings with an unobstructed view of the sunset. max_height = 0 count = 0 for height in buildings: if height > max_height: count += 1 max_height = height return count"},{"question":"Write a function that takes a list of integers and returns the length of the longest subarray which has a sum divisible by a given integer `k`. # Function Signature `def longest_divisible_subarray(arr: List[int], k: int) -> int:` # Input - An array of integers `arr` where `1 <= len(arr) <= 10^5` and each element is in the range `-10^4 <= arr[i] <= 10^4`. - An integer `k` where `1 <= k <= 10^4`. # Output - Return the length of the longest subarray whose sum is divisible by `k`. # Example ```python print(longest_divisible_subarray([2, 7, 6, 1, 4, 5], 3)) # Output: 4 print(longest_divisible_subarray([5, 10, 15], 5)) # Output: 3 ``` # Explanation In the first example, the subarray [7, 6, 1, 4] has a sum of 18 which is divisible by 3, making it the longest subarray fulfilling the condition. In the second example, the whole array is divisible by 5.","solution":"from typing import List def longest_divisible_subarray(arr: List[int], k: int) -> int: prefix_sum = 0 remainder_map = {0: -1} max_length = 0 for i in range(len(arr)): prefix_sum += arr[i] remainder = prefix_sum % k if remainder < 0: remainder += k if remainder in remainder_map: subarray_length = i - remainder_map[remainder] max_length = max(max_length, subarray_length) else: remainder_map[remainder] = i return max_length"},{"question":"You are given an integer array `nums` sorted in ascending order, and an integer `target`. Suppose that `nums` is rotated at some pivot unknown to you beforehand (i.e., `[0,1,2,4,5,6,7]` might become `[4,5,6,7,0,1,2]`). Write a function to search for `target` in `nums`. If `target` exists, return its index; otherwise, return `-1`. You must write an algorithm with `O(log n)` runtime complexity. Input Format: - The first line contains the integer `n`, the size of the array (1 ≤ n ≤ 10^4). - The second line contains `n` integers representing the elements of the array `nums`. - The third line contains the integer `target`. Output Format: - Return the index of `target` in `nums` if it is present; otherwise, return `-1`. Example 1: ``` Input: 7 4 5 6 7 0 1 2 0 Output: 4 ``` Example 2: ``` Input: 7 4 5 6 7 0 1 2 3 Output: -1 ``` Constraints: - Time complexity should be O(log n). - Array elements are distinct. Function Signature: ```python def search(nums: List[int], target: int) -> int: ```","solution":"from typing import List def search(nums: List[int], target: int) -> int: This function searches for a target element in a rotated sorted array. If found, it returns the index of the target, otherwise it returns -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid # Determine which half is properly sorted if nums[left] <= nums[mid]: # Left half is sorted if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: # Right half is sorted if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Given a string `s` consisting of lowercase letters and an integer `n`, perform a right cyclic shift on the string `n` times. A right cyclic shift on a string moves the last character to the front of the string and shifts all the other characters one place to the right. For example: ``` cyclic_shift(\\"hello\\", 1) => \\"ohell\\" cyclic_shift(\\"abcd\\", 2) => \\"cdab\\" cyclic_shift(\\"xyz\\", 3) => \\"xyz\\" cyclic_shift(\\"rotation\\", 4) => \\"tionrota\\" ``` Function signature: ```python def cyclic_shift(s: str, n: int) -> str: # your code here ```","solution":"def cyclic_shift(s: str, n: int) -> str: Perform a right cyclic shift on string s n times. Parameters: s (str): The input string consisting of lowercase letters. n (int): The number of times to perform the right cyclic shift. Returns: str: The resulting string after n right cyclic shifts. if not s: return \\"\\" n = n % len(s) # Calculate effective shifts for cycles larger than string length return s[-n:] + s[:-n]"},{"question":"You are given a string S consisting of lowercase alphabets. You need to print the string after removing all the vowels from it. Example 1: Input: S = \\"hello\\" Output: hll Example 2: Input: S = \\"programming\\" Output: prgrmmng Your Task: Since this is a function problem, you just need to complete the provided function removeVowels() which takes S as input and returns the resultant string after removing all the vowels. Constraints: 1 <= |S| <= 10^5 Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(1)","solution":"def removeVowels(S): This function removes all vowels from the input string S and returns the resulting string. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} result = [] for char in S: if char not in vowels: result.append(char) return \'\'.join(result)"},{"question":"Design a class system for a library management system where users can borrow and return books. Each user has a unique ID and a name. Each book has a unique ISBN and a title. Implement the following functionalities: 1. Add a new user. 2. Add a new book. 3. Allow a user to borrow a book if it\'s available. 4. Allow a user to return a book. 5. Check the borrowing status of a book (whether it is borrowed and by whom). Provide a sample code structure that initializes the library with one user and one book, and demonstrates borrowing and returning a book. ```python class User: def __init__(self, user_id, name): self.user_id = user_id self.name = name self.borrowed_books = [] class Book: def __init__(self, isbn, title): self.isbn = isbn self.title = title self.borrowed_by = None class Library: def __init__(self): self.users = {} self.books = {} def add_user(self, user_id, name): self.users[user_id] = User(user_id, name) def add_book(self, isbn, title): self.books[isbn] = Book(isbn, title) def borrow_book(self, user_id, isbn): user = self.users.get(user_id) book = self.books.get(isbn) if user and book and book.borrowed_by is None: book.borrowed_by = user_id user.borrowed_books.append(isbn) return \\"Book borrowed successfully\\" return \\"Cannot borrow book\\" def return_book(self, user_id, isbn): user = self.users.get(user_id) book = self.books.get(isbn) if user and book and book.borrowed_by == user_id: book.borrowed_by = None user.borrowed_books.remove(isbn) return \\"Book returned successfully\\" return \\"Cannot return book\\" def book_status(self, isbn): book = self.books.get(isbn) if book and book.borrowed_by: return f\\"Book is borrowed by user {book.borrowed_by}\\" return \\"Book is available\\" # Example usage library = Library() library.add_user(1, \\"Alice\\") library.add_book(\\"123456\\", \\"The Great Gatsby\\") print(library.borrow_book(1, \\"123456\\")) # Output: \\"Book borrowed successfully\\" print(library.book_status(\\"123456\\")) # Output: \\"Book is borrowed by user 1\\" print(library.return_book(1, \\"123456\\")) # Output: \\"Book returned successfully\\" print(library.book_status(\\"123456\\")) # Output: \\"Book is available\\" ```","solution":"class User: def __init__(self, user_id, name): self.user_id = user_id self.name = name self.borrowed_books = [] class Book: def __init__(self, isbn, title): self.isbn = isbn self.title = title self.borrowed_by = None class Library: def __init__(self): self.users = {} self.books = {} def add_user(self, user_id, name): self.users[user_id] = User(user_id, name) def add_book(self, isbn, title): self.books[isbn] = Book(isbn, title) def borrow_book(self, user_id, isbn): user = self.users.get(user_id) book = self.books.get(isbn) if user and book and book.borrowed_by is None: book.borrowed_by = user_id user.borrowed_books.append(isbn) return \\"Book borrowed successfully\\" return \\"Cannot borrow book\\" def return_book(self, user_id, isbn): user = self.users.get(user_id) book = self.books.get(isbn) if user and book and book.borrowed_by == user_id: book.borrowed_by = None user.borrowed_books.remove(isbn) return \\"Book returned successfully\\" return \\"Cannot return book\\" def book_status(self, isbn): book = self.books.get(isbn) if book and book.borrowed_by: return f\\"Book is borrowed by user {book.borrowed_by}\\" return \\"Book is available\\" # Example usage library = Library() library.add_user(1, \\"Alice\\") library.add_book(\\"123456\\", \\"The Great Gatsby\\") print(library.borrow_book(1, \\"123456\\")) # Output: \\"Book borrowed successfully\\" print(library.book_status(\\"123456\\")) # Output: \\"Book is borrowed by user 1\\" print(library.return_book(1, \\"123456\\")) # Output: \\"Book returned successfully\\" print(library.book_status(\\"123456\\")) # Output: \\"Book is available\\""},{"question":"Tom loves puzzles and recently he stumbled upon an interesting problem involving strings. The problem is as follows: Given a string, Tom wants to generate all possible permutations of characters in the string and find out the lexicographically smallest permutation which is a valid palindrome. If no such permutation exists, he wants to return \\"-1\\". A string is considered a valid palindrome if it reads the same forwards and backwards (e.g., \\"radar\\", \\"level\\"). Your task is to help Tom by writing a program that determines this smallest palindrome permutation. Input: - A single line containing the string s (1 ≤ |s| ≤ 16). The string consists only of lowercase English letters. Output: - A single line containing the lexicographically smallest palindrome permutation of the input string s, or \\"-1\\" if no such permutation exists. Examples: Input: aabb Output: abba Input: abc Output: -1 Input: aaa Output: aaa Notes: - In the first example, the possible palindrome permutations are \\"abba\\" and \\"baab\\". \\"abba\\" is the lexicographically smallest. - In the second example, there are no palindrome permutations possible. - In the third example, the input string itself is already a palindrome and is the smallest permutation.","solution":"from collections import Counter def find_smallest_palindromic_permutation(s): count = Counter(s) # Check the number of characters with odd count odd_count = sum(1 for freq in count.values() if freq % 2 != 0) if odd_count > 1: return \\"-1\\" # Construct half of the palindrome half_palindrome = [] middle_char = \'\' for char, freq in sorted(count.items()): if freq % 2 != 0: middle_char = char half_palindrome.append(char * (freq // 2)) half_str = \'\'.join(half_palindrome) return half_str + middle_char + half_str[::-1]"},{"question":"Given an integer array arr of length n and a target integer x, determine the number of unique pairs (i, j) where i < j and arr[i] + arr[j] == x. Since the number of pairs can be large, print the count modulo 10^9 + 7. Input The first line of input contains two space-separated integers n (2 ≤ n ≤ 10^5) and x (-10^9 ≤ x ≤ 10^9). The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9). Output Print one integer representing the count of unique pairs (i, j) where i < j and arr[i] + arr[j] == x, modulo 10^9 + 7. Examples Input 5 7 1 5 3 4 2 Output 2 Input 4 -3 -1 -2 -3 -4 Output 1 Note In the first case, the pairs (1, 6) and (3, 4) sum up to 7, so there are 2 pairs. In the second case, the pair (-1, -2) sums up to -3, so there is 1 pair.","solution":"def count_pairs_with_sum(arr, n, x): Returns the count of unique pairs (i, j) where i < j and arr[i] + arr[j] == x, modulo 10^9 + 7. MOD = 10**9 + 7 num_dict = {} count = 0 for number in arr: complement = x - number if complement in num_dict: count = (count + num_dict[complement]) % MOD if number in num_dict: num_dict[number] += 1 else: num_dict[number] = 1 return count"},{"question":"Rohan is organizing a school sports event. Each participating student has certain stamina and speed attributes. Rohan wants to divide the students into two equal-sized teams with specific conditions: - The stamina of the j-th student in Team A must be at least s units more than the stamina of the j-th student in Team B. - The speed of the j-th student in Team B must be at least v units more than the speed of the j-th student in Team A. Help Rohan determine if it\'s possible to divide the students as required. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. Each test case consists of three lines. The first line of each test case contains two positive integers n and s (1 le n le 100, 1 le s le 1000) — the number of students in each team and the minimum stamina difference Rohan wants. The second line contains 2n positive integers a_1, a_2, ..., a_{2n} (1 le a_i le 1000) — the stamina of each student in units. The third line contains 2n positive integers b_1, b_2, ..., b_{2n} (1 le b_j le 1000) — the speed of each student in units. Note that the sum of n over all test cases is not bounded. -----Output----- For each test case, print a single line containing \\"YES\\" if Rohan could divide students satisfying the conditions and \\"NO\\" otherwise. -----Examples----- Input 2 2 4 5 9 1 6 2 8 3 10 3 7 8 15 12 6 9 18 5 14 7 20 10 13 Output YES NO -----Note----- In the first test case, one possible assignment is to have the first two students in Team A and the last two in Team B for stamina. The staminas will be: Team A: 5, 9 Team B: 1, 6 It works because: a_1 - a_3 = 5 - 1 ge s(=4), a_2 - a_4 = 9 - 6 ge s(=4). For speed, we can have the first and fourth students in Team B and the second and third in Team A: Team A: 2, 3 Team B: 8, 10 It works because: b_3 - b_1 = 8 - 2 ge v(=6), b_4 - b_2 = 10 - 3 ge v(=6). In the second test case, it can be shown that there is no way to assign students that satisfies Rohan\'s conditions.","solution":"def can_divide_teams(test_cases): results = [] for case in test_cases: n, s, stamina, speed = case stamina.sort() speed.sort() valid = True for i in range(n): if not (stamina[i + n] - stamina[i] >= s and speed[i + n] - speed[i] >= s): valid = False break results.append(\\"YES\\" if valid else \\"NO\\") return results def parse_input(input_data): lines = input_data.split(\'n\') t = int(lines[0]) cases = [] index = 1 for _ in range(t): n, s = map(int, lines[index].split()) stamina = list(map(int, lines[index + 1].split())) speed = list(map(int, lines[index + 2].split())) cases.append((n, s, stamina, speed)) index += 3 return cases def format_output(results): return \'n\'.join(results) # Example input processing input_data = 2 2 4 5 9 1 6 2 8 3 10 3 7 8 15 12 6 9 18 5 14 7 20 10 13 test_cases = parse_input(input_data) results = can_divide_teams(test_cases) formatted_output = format_output(results) print(formatted_output)"},{"question":"A group of employees in a company is organizing a Secret Santa event where each employee is supposed to give a gift to another randomly selected employee such that nobody gives a gift to themselves. They recorded who gives a gift to whom in a list. Now, they need to figure out who is supposed to receive a gift from whom. Given the list of who gives gifts to whom, write a program to determine who receives a gift from whom. Input The first line contains one integer m (1 ≤ m ≤ 100) — the number of employees participating in the Secret Santa event. The second line contains m space-separated integers: the i-th number is ki — the employee who employee number i is giving a gift to. It is guaranteed that no employee gives a gift to themselves and each employee will give and receive exactly one gift. Output Print m space-separated integers: the i-th number should equal the number of the employee who gives a gift to employee number i. Examples Input 5 2 3 4 5 1 Output 5 1 2 3 4 Input 6 3 5 6 1 4 2 Output 4 6 1 5 2 3 Input 3 2 3 1 Output 3 1 2","solution":"def secret_santa(givers): Given a list of who gives gifts to whom, return a list of who receives gifts from whom. :param givers: List[int] - List where the i-th number is the employee who employee number i+1 is giving a gift to. :return: List[int] - List where the i-th number is the employee who gives a gift to employee number i+1. m = len(givers) receivers = [0] * m for giver in range(m): receiver = givers[giver] - 1 receivers[receiver] = giver + 1 return receivers"},{"question":"You are organizing a chess tournament where each player plays every other player exactly once. You want to calculate how many matches will be played in total. ------ Input Format ------ - The input will contain a single integer N, the number of players participating in the tournament. ------ Output Format ------ Output a single integer representing the total number of matches played. ------ Constraints ------ 2 ≤ N ≤ 10^5 ----- Sample Input 1 ------ 4 ----- Sample Output 1 ------ 6 ----- Explanation 1 ------ If there are 4 players, each pair of players will play exactly one match. The matches are: Player 1 vs Player 2 Player 1 vs Player 3 Player 1 vs Player 4 Player 2 vs Player 3 Player 2 vs Player 4 Player 3 vs Player 4 So, the total number of matches is 6.","solution":"def total_matches(N): Returns the total number of matches played in a tournament where each player plays every other player exactly once. Parameters: N (int): the number of players Returns: int: the total number of matches # Using the combination formula C(n, 2) = n * (n - 1) / 2 return (N * (N - 1)) // 2"},{"question":"In a remote village, a treasure hunt event is held every year where participants follow a series of instructions to find hidden treasures. Each participant is given a series of steps, which can be either moving forward or backward by a certain number of positions. Those steps are represented by an array of integers, where a positive number indicates a forward move and a negative number indicates a backward move. The challenge is to determine the final position of a participant on a 1D number line starting from position 0 after executing all the given steps. The number line is unbounded. Your task is to write a program that calculates this final position. -----Input----- The first line of the input contains an integer N (1 ≤ N ≤ 100 000) – the number of steps given. The second line contains N space-separated integers which are the steps, each value can be in the interval [-10 000, 10 000]. -----Output----- Output a single integer representing the final position on the number line. -----Examples----- Input 5 3 -2 4 -1 2 Output 6 Input 7 10 -8 5 -6 3 -4 7 Output 7 -----Note----- In the first example, the final position is calculated as follows: Start from 0, move forward by 3, reach 3. Move backward by 2, reach 1. Move forward by 4, reach 5. Move backward by 1, reach 4. Move forward by 2, reach 6. In the second example, the final position is calculated as follows: Start from 0, move forward by 10, reach 10. Move backward by 8, reach 2. Move forward by 5, reach 7. Move backward by 6, reach 1. Move forward by 3, reach 4. Move backward by 4, reach 0. Move forward by 7, reach 7.","solution":"def final_position(steps): Calculates the final position on the number line after executing all the steps. Args: steps (list of int): The list of steps, positive for forward, negative for backward. Returns: int: The final position on the number line. return sum(steps)"},{"question":"shape_update The reshape tool in NumPy allows you to give a new shape to an array without changing its data. import numpy arr = numpy.array([1, 2, 3, 4, 5, 6]) print(arr.reshape(3, 2)) #Output: [[1 2] # [3 4] # [5 6]] Task You are given a list of integers. Your task is to convert this list into a 2D NumPy array with dimensions `r` and `c`. If reshaping is not possible with the given dimensions, output \\"Invalid\\". You are also required to transpose this reshaped array and print it. Input Format The first line contains the space-separated integers representing the list of elements. The second line contains two integers `r` and `c` separated by a space. Constraints 1 leq text{number of elements in the list} leq 20 1 leq r, c leq 5 Output Format First, print the reshaped array if possible, otherwise print \\"Invalid\\". Then, print the transposed array if reshaping was successful. Sample Input 0 1 2 3 4 5 6 2 3 Sample Output 0 [[1 2 3] [4 5 6]] [[1 4] [2 5] [3 6]] Sample Input 1 1 2 3 4 5 6 7 2 4 Sample Output 1 Invalid Explanation In the first example, reshaping [1, 2, 3, 4, 5, 6] into the shape (2, 3) is possible, and the resulting 2D array can further be transposed. In the second example, reshaping [1, 2, 3, 4, 5, 6, 7] into the shape (2, 4) is not possible, hence the output is \\"Invalid\\".","solution":"import numpy as np def reshape_and_transpose(lst, r, c): Converts a list of integers into a 2D numpy array with dimensions r and c if possible. If reshaping is not possible, outputs \\"Invalid\\". If reshaping is possible, it also transposes the reshaped array. if len(lst) == r * c: np_array = np.array(lst).reshape(r, c) print(np_array) print(np_array.T) else: print(\\"Invalid\\") # Example usage: # reshape_and_transpose([1, 2, 3, 4, 5, 6], 2, 3) # reshape_and_transpose([1, 2, 3, 4, 5, 6, 7], 2, 4)"},{"question":"A research facility is divided into a grid of size (N times M). The facility has several experimental chambers, some of which are infected by a virus. Fortunately, there is also a specified number of air purification systems installed in certain chambers, which can purify the adjacent chambers over time. Your task is to determine the minimum number of hours it will take for all infected chambers to be purified, or conclude that it\'s impossible to purify all infected chambers. For the purposes of this problem: - Adjacent chambers are those directly to the left, right, top, or bottom of a given chamber. - Diagonal movements are not allowed. - Chambers with purification systems can\'t be infected, and infected chambers always start without purification systems. -----Input Format:------ - The first line contains an integer T, the number of test cases. - For each test case, the input format is as follows: - The first line contains two integers N and M, representing the number of rows and columns in the grid. - The second line contains an integer K, the number of rooms containing air purification systems. - The next K lines each contain two integers x_i and y_i, representing the position (x_i, y_i) of each air purification system. - The following line contains an integer L, the number of infected chambers. - The next L lines each contain two integers u_i and v_i, representing the position (u_i, v_i) of each infected chamber. -----Constraints:------ - 1 leq T leq 50 - 1 leq N, M leq 100 - 1 leq K leq N times M - 1 leq L leq N times M - 1 leq x_i, y_i, u_i, v_i leq N -----Output Format:------ For each test case, output a single integer indicating the minimum number of hours it takes for all infected chambers to be purified. If it\'s impossible to purify all infected chambers, return -1. -----Sample Input----- 1 4 4 2 1 1 4 4 2 2 2 3 3 -----Sample Output----- 2 -----Explanation:----- - At hour 0, air purification systems are at (1,1) and (4,4), and infected chambers are at (2,2) and (3,3). - After 1 hour, chambers at (2,1), (1,2), (4,3), and (3,4) are purified. - After 2 hours, chambers at (2,2) and (3,3) will be purified. - Thus, it takes 2 hours to purify all infected chambers.","solution":"from collections import deque def min_hours_to_purify(N, M, purifiers, infected): # Directions for adjacent cells (left, right, up, down) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Create a grid to track the state grid = [[None for _ in range(M)] for _ in range(N)] for x, y in infected: grid[x-1][y-1] = \'I\' queue = deque() for x, y in purifiers: grid[x-1][y-1] = \'P\' queue.append((x-1, y-1, 0)) # Add purifier cells with initial time 0 max_time = 0 while queue: x, y, time = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (grid[nx][ny] is None or grid[nx][ny] == \'I\'): grid[nx][ny] = \'P\' queue.append((nx, ny, time + 1)) if any((nx, ny) == (i-1, j-1) for i, j in infected): max_time = max(max_time, time + 1) # Check if all infected rooms are purified for x, y in infected: if grid[x-1][y-1] != \'P\': return -1 return max_time def process_input(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] K_data = test_cases[i][1] K = K_data[0] purifiers = K_data[1] L_data = test_cases[i][2] L = L_data[0] infected = L_data[1] results.append(min_hours_to_purify(N, M, purifiers, infected)) return results"},{"question":"You are given a list of n integers, a_1, a_2, ldots, a_n. You can perform the following operation any number of times (possibly zero): Choose any subarray of a and reverse it. The task is to determine the minimum number of such operations needed to make the array sorted in non-decreasing order. -----Input----- The first line of the input contains an integer t (1 le t le 10^4) — the number of test cases. The descriptions of the test cases follow. The first line of each test case contains a single integer n (1 le n le 2000) — the length of the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^5) — the elements of the array. The sum of the n over all test cases does not exceed 10^6. -----Output----- For each test case, output the minimum number of operations needed to make the array sorted in non-decreasing order. -----Examples----- Input 3 4 1 3 2 4 5 5 4 3 2 1 3 2 2 2 Output 1 1 0 -----Note----- In the first test case, you can make the array sorted by reversing the subarray [3, 2]. In the second test case, you can make the array sorted by reversing the entire array. In the third test case, the array is already sorted, so no operations are needed.","solution":"def min_operations_to_sort(t, test_cases): results = [] for case in test_cases: n, arr = case if arr == sorted(arr): results.append(0) else: results.append(1) return results"},{"question":"Sara loves arranging and decorating flowers. She has a collection of flower pots, each pot can hold a certain number of flowers. Given a list of integers where each integer represents the capacity of a pot, Sara wants to know how many unique ways she can select pots such that the total capacity of the selected pots is exactly equal to a given number `T`. Two pots are considered different even if they have the same capacity. For instance, if she has 3 pots with capacities `[2, 3, 5]` and the target capacity `T` is 5, there are two ways to achieve this: by selecting either the pot with capacity 5 or by selecting the two pots with capacities 2 and 3. Help Sara by writing a program to find the number of unique ways she can select pots to match the given target capacity exactly. Input - The first line contains two integers `N` - the number of pots and `T` - the target capacity. - The second line contains `N` integers, each representing the capacity of a pot. Output Output a single integer representing the number of unique ways Sara can select pots to achieve the target capacity `T`. Constraints 1 ≤ N ≤ 100 1 ≤ Capacity of each pot ≤ 1000 1 ≤ T ≤ 1000 SAMPLE INPUT 4 5 1 2 3 4 SAMPLE OUTPUT 2 Explanation: The two ways to achieve a target capacity of `5` are: 1. Select pots with capacities `[1, 4]` 2. Select pots with capacities `[2, 3]` Note: - `[5]` is not a valid selection since there is no pot with capacity 5. Write your solution in a function `def number_of_ways_to_select_pots(N, T, capacities)`.","solution":"def number_of_ways_to_select_pots(N, T, capacities): def count_ways(index, target): if target == 0: return 1 if target < 0 or index == N: return 0 include = count_ways(index + 1, target - capacities[index]) exclude = count_ways(index + 1, target) return include + exclude return count_ways(0, T)"},{"question":"Write a program to find the second largest unique value from given list of integers. If there is no such value, return -1. Input The first line contains an integer T, the total number of test cases. Each test case consists of two lines: - The first line contains an integer N (the number of elements in the list). - The second line contains N space-separated integers representing the elements of the list. Output For each test case, print the second largest unique value in the list. If no such value exists, print -1. Constraints 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 -10^6 ≤ elements in the list ≤ 10^6 Example Input 3 5 4 2 1 3 2 4 2 2 2 2 6 10 7 7 10 6 7 Output 3 -1 7","solution":"def second_largest_unique_value(test_cases): results = [] for case in test_cases: n, numbers = case unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: results.append(-1) else: unique_numbers.sort(reverse=True) results.append(unique_numbers[1]) return results"},{"question":"You need to write a function that determines if a given list of integers contains duplicates. The function should return `True` if there are duplicate values in the list and `False` otherwise. Examples: ```python contains_duplicates([1, 2, 3, 4, 5]) == False contains_duplicates([1, 2, 3, 4, 5, 1]) == True contains_duplicates([]) == False contains_duplicates([0, 0, 0, 0, 0, 0]) == True ``` Happy coding!","solution":"def contains_duplicates(nums): Returns True if there are duplicate values in the list and False otherwise. return len(nums) != len(set(nums))"},{"question":"You are given a string composed of lowercase alphabetic characters. Your task is to find the minimum number of characters that need to be removed from the string so that the remaining string does not contain any consecutive repeated characters. Example 1: Input: s = \\"aabbcc\\" Output: 3 Explanation: By removing \'a\', \'b\', and \'c\', we get \\"abc\\" without any consecutive characters. Example 2: Input: s = \\"abccba\\" Output: 1 Explanation: By removing one \'c\' we get \\"abcba\\" without any consecutive characters. Your Task: You don\'t need to read or print anything. Your task is to complete the function minDeletions() which takes the string s as input parameter and returns the minimum number of deletions required. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= s.length <= 10^5","solution":"def minDeletions(s): Returns the minimum number of deletions required so that the remaining string does not contain any consecutive repeated characters. deletions = 0 for i in range(1, len(s)): if s[i] == s[i-1]: deletions += 1 return deletions"},{"question":"Given an integer N, write a function to check if the sum of the squares of its digits results in a perfect square or not. A perfect square is a number that can be expressed as the product of an integer with itself. Example 1: Input: N = 81 Output: 1 Explanation: The sum of the squares of digits of 81 is 8^2 + 1^2 = 64 + 1 = 65. Since 65 is not a perfect square, the output is 0. Example 2: Input: N = 36 Output: 0 Explanation: The sum of the squares of digits of 36 is 3^2 + 6^2 = 9 + 36 = 45. Since 45 is not a perfect square, the output is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isSumOfSquaresPerfectSquare() which takes an integer N as input and returns 1 if the sum of the squares of its digits is a perfect square. Otherwise, it returns 0. Expected Time Complexity: O(LogN) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^9","solution":"import math def isSumOfSquaresPerfectSquare(N): Check if the sum of the squares of the digits of N is a perfect square. Parameters: N (int): The input integer. Returns: int: 1 if the sum of squares is a perfect square, otherwise 0. # Calculate the sum of the squares of the digits sum_of_squares = sum(int(digit)**2 for digit in str(N)) # Check if the sum_of_squares is a perfect square if math.isqrt(sum_of_squares)**2 == sum_of_squares: return 1 else: return 0"},{"question":"You are given an array of `n` integers and a single integer `X`. Your goal is to determine if there exist three distinct integers in the array that add up to `X`. Constraints * 3 leq n leq 100 * -10^9 leq array[i] leq 10^9 * -10^9 leq X leq 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: ``` n array[1] array[2] ... array[n] X ``` Output Output \\"Yes\\" if there exist three distinct integers in the array that add up to `X`. Otherwise, output \\"No\\". Examples Input ``` 5 1 2 3 4 5 9 ``` Output ``` Yes ``` Input ``` 4 -1 -2 -3 -4 -10 ``` Output ``` No ```","solution":"def find_three_numbers_sum(arr, n, X): Returns \\"Yes\\" if there exist three distinct integers in the array that add up to X. Otherwise, returns \\"No\\". arr.sort() for i in range(n - 2): j, k = i + 1, n - 1 while j < k: current_sum = arr[i] + arr[j] + arr[k] if current_sum == X: return \\"Yes\\" elif current_sum < X: j += 1 else: k -= 1 return \\"No\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) array = list(map(int, data[1:n+1])) X = int(data[n+1]) result = find_three_numbers_sum(array, n, X) print(result)"},{"question":"You are given a string representing a sequence of daily temperatures, where each temperature is an integer. Your task is to determine for each day how many days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, put 0 for that day. # Example: Given a list of temperatures `[73, 74, 75, 71, 69, 72, 76, 73]`, the result should be `[1, 1, 4, 2, 1, 1, 0, 0]`. This is because for each day: - For day 1 (temperature 73), the next warmer day is day 2 (temperature 74) - 1 day away. - For day 2 (temperature 74), the next warmer day is day 3 (temperature 75) - 1 day away. - For day 3 (temperature 75), the next warmer day is day 7 (temperature 76) - 4 days away. - For day 4 (temperature 71), the next warmer day is day 6 (temperature 72) - 2 days away. - For day 5 (temperature 69), the next warmer day is day 6 (temperature 72) - 1 day away. - For day 6 (temperature 72), the next warmer day is day 7 (temperature 76) - 1 day away. - For day 7 (temperature 76), there is no future warmer day - 0 days. - For day 8 (temperature 73), there is no future warmer day - 0 days. # Input: A list of daily temperatures (integers). # Output: A list of integers representing the number of days to wait until a warmer temperature. # Note: Be aware you\'ll face lists with several thousands of elements, so think about performance.","solution":"def daily_temperatures(T): Given a list of daily temperatures T, returns a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. n = len(T) result = [0] * n stack = [] for i in range(n): while stack and T[i] > T[stack[-1]]: index = stack.pop() result[index] = i - index stack.append(i) return result"},{"question":"Marcy owns a small flower shop and maintains a list of flower orders placed by her customers throughout the day. Each order consists of a customer\'s name and the number of flower bouquets ordered. Marcy wants to generate a summary report which lists the total number of flower bouquets ordered by each customer by the end of the day. If a customer places multiple orders, all of them should be consolidated into a single entry in the summary report. If two customers have ordered the same number of bouquets, they should be sorted in alphabetical order. However, the summary report should be sorted primarily by the total bouquets in descending order and then by the customer\'s name in ascending order. -----Input----- The first line contains an integer n (1 ≤ n ≤ 200,000) — the total number of orders placed. The following n lines each contain a string s and an integer k (1 ≤ k ≤ 10^9) — the customer\'s name and the number of bouquets ordered. -----Output----- Print the summary report, with each line containing a customer\'s name and the total number of bouquets ordered. The report should be sorted primarily by the total number of bouquets in descending order and then by customer\'s name in ascending order. -----Examples----- Input 4 Alice 5 Bob 3 Alice 2 Eve 5 Output Eve 5 Alice 7 Bob 3 Input 3 Zara 8 Alice 7 Zara 2 Output Zara 10 Alice 7 -----Note----- In the first sample, Alice placed two orders: one for 5 bouquets and one for 2 bouquets, which are consolidated into a single entry: Alice 7. Since both Alice and Eve ordered a total of 5 bouquets, they are sorted alphabetically, so Eve appears first in the output. In the second sample, Zara placed two orders: one for 8 bouquets and one for 2 bouquets, which are combined into a single entry: Zara 10. Since there are no ties in the number of bouquets among different customers, no alphabetical sorting is needed, and Zara with the highest total number of bouquets appears first.","solution":"def generate_summary_report(n, orders): from collections import defaultdict # Step 1: Aggregate orders order_summary = defaultdict(int) for name, bouquets in orders: order_summary[name] += bouquets # Step 2: Sort the summary sorted_summary = sorted(order_summary.items(), key=lambda x: (-x[1], x[0])) return sorted_summary"},{"question":"Alice loves perfect squares. A perfect square is a number that can be expressed as the product of an integer with itself. For example, 1, 4, 9, 16 are perfect squares, while 2, 3, 10 are not. Alice is given an interval of numbers [c, d] and she wants to find out how many perfect squares lie within this interval, inclusive of the boundaries. Input The single line contains two integers c and d (1 ≤ c ≤ d ≤ 10^9) — the interval\'s boundaries. Output On the single line print the number of perfect squares within the interval [c, d]. Examples Input 1 10 Output 3 Input 15 25 Output 2 Explanation In the first example, the perfect squares in the interval [1, 10] are 1, 4, and 9. So the output is 3. In the second example, the perfect squares in the interval [15, 25] are 16 and 25. So the output is 2.","solution":"import math def count_perfect_squares(c, d): Return the count of perfect squares within the interval [c, d] inclusive. if c > d: return 0 start = math.ceil(math.sqrt(c)) end = math.floor(math.sqrt(d)) return max(0, end - start + 1)"},{"question":"Maya loves strings and palindromes. She discovered that given a string, it is interesting to calculate the length of the longest substring that is a palindrome. Given a string s, help Maya find this length. -----Input----- The input contains a single string s (1 ≤ |s| ≤ 200 000). The string consists of lowercase English letters. -----Output----- Print one integer — the length of the longest palindromic substring. -----Examples----- Input babad Output 3 Input cbbd Output 2 -----Note----- In the first example, \\"bab\\" or \\"aba\\" are the longest palindromic substrings with length 3. In the second example, \\"bb\\" is the longest palindromic substring with length 2.","solution":"def longest_palindromic_substring_length(s: str) -> int: Finds the length of the longest palindromic substring in the given string. :param s: Input string consisting of lowercase English letters :return: Length of the longest palindromic substring if not s: return 0 n = len(s) # Table to store results of subproblems dp = [[False] * n for _ in range(n)] maxLength = 1 # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True # Check for substrings of length 2 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True maxLength = 2 # Check for lengths greater than 2 for k in range(3, n+1): # k is length of substring for i in range(n-k+1): j = i + k - 1 # Ending index of the current substring # Check if the current substring is palindrome if dp[i+1][j-1] and s[i] == s[j]: dp[i][j] = True maxLength = k return maxLength"},{"question":"You are given a grid of size n × n filled with integers. Your task is to transform the grid into a Latin square. A Latin square is a grid in which every row and every column contains each integer from 1 to n exactly once. Input The first input line contains a single integer n (1 ≤ n ≤ 4). The next n lines each contain n integers, representing the grid. It is guaranteed that a solution exists! Output The output should contain n lines, each with n integers, representing the transformed Latin square. If there are multiple Latin squares possible, you can output any of them. Examples Input 3 1 2 3 3 1 2 2 3 1 Output 1 2 3 3 1 2 2 3 1 Input 2 2 1 1 2 Output 1 2 2 1","solution":"def to_latin_square(n, grid): Transform the grid into a Latin square of size n x n. import numpy as np def rotate(x, n): return x[n:] + x[:n] grid = np.array(grid) first_row = sorted(grid[0]) for i in range(n): grid[i] = rotate(first_row, i) return grid.tolist() # Sample execution: if __name__ == \\"__main__\\": n = 3 grid = [ [1, 2, 3], [3, 1, 2], [2, 3, 1] ] result = to_latin_square(n, grid) for row in result: print(\' \'.join(map(str, row)))"},{"question":"Emily is an avid book collector and enjoys organizing her bookshelf. She sorts her books based on their publication year and then by their title lexicographically for books published in the same year. Due to a recent relocation, her bookshelf got mixed up, and now she wants a program to help her re-sort her collection. Given a list of books with their titles and publication years, write a program that outputs the titles of the books in the desired order. -----Input----- The first line of input contains an integer n (1 leq n leq 1000), the number of books in Emily\'s collection. This is followed by n lines, each describing one book. Each line contains a year y (1000 leq y leq 2023) and the title of the book t (1 leq |t| leq 100), separated by a space. The title does not contain any spaces. -----Output----- Display the titles of the books sorted first by their publication year in ascending order and then lexicographically by their title for books published in the same year. -----Examples----- Sample Input: 4 1993 TheAlchemist 2023 DeepLearning 1993 JurassicPark 2023 ArtificialIntelligence Sample Output: JurassicPark TheAlchemist ArtificialIntelligence DeepLearning","solution":"def sort_books(books): Sorts the books first by publication year and then by title lexicographically for books with the same year. Parameters: books (list of tuples): A list of tuples where each tuple contains a year (int) and a title (str). Returns: list: A list of book titles sorted as per the described order. # Sort books by year, then by title lexicographically sorted_books = sorted(books, key=lambda book: (book[0], book[1])) # Extract and return the titles in sorted order sorted_titles = [title for year, title in sorted_books] return sorted_titles"},{"question":"A graph can be represented by an adjacency matrix where the element at row `i` and column `j` indicates the presence of an edge between vertices `i` and `j`. Given an undirected graph, your task is to check if the graph is bipartite. A graph is bipartite if and only if it is possible to split its set of vertices into two disjoint sets such that no two graph vertices within the same set are adjacent. Write a program that determines whether the given graph is bipartite or not. Input The input consists of multiple datasets. Each dataset starts with an integer `N` (1 ≤ N ≤ 20), the number of vertices in the graph. This is followed by an `N x N` adjacency matrix that contains only `0` and `1`. The end of the input is indicated by a line containing `0`, which should not be processed. Output For each dataset, print `Yes` if the graph is bipartite, and `No` otherwise. Example Input 3 0 1 1 1 0 0 1 0 0 4 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 0 Output Yes Yes","solution":"def is_bipartite(graph): Checks if the given graph (represented as an adjacency matrix) is bipartite. N = len(graph) color = [-1] * N def bfs(start): queue = [start] color[start] = 0 while queue: u = queue.pop(0) for v in range(N): if graph[u][v] == 1: if color[v] == -1: color[v] = 1 - color[u] queue.append(v) elif color[v] == color[u]: return False return True for i in range(N): if color[i] == -1: if not bfs(i): return False return True def check_bipartite_graphs(datasets): Takes multiple datasets and checks if each corresponds to a bipartite graph. Parameters: datasets (list of list of list): Multiple NxN matrices representing adjacency matrices of graphs. Returns: list: List of results as \'Yes\' or \'No\' for each dataset. results = [] for dataset in datasets: if is_bipartite(dataset): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given a matrix of size m x n, your task is to rotate the matrix 90 degrees clockwise. You need to implement the function `rotateMatrix(matrix)`, where `matrix` is a 2D list containing m lists each with n integers. -----Function Signature----- ```python def rotateMatrix(matrix: List[List[int]]) -> List[List[int]]: ``` -----Input----- The input is a single 2D list `matrix`, of size `m x n` where (1 ≤ m, n ≤ 1000). Example input: ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` -----Output----- Return a new 2D list that is the rotated version of the input matrix. Example output for the input case above: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` -----Examples----- Input ``` matrix = [ [1, 2], [3, 4] ] ``` Output ``` [ [3, 1], [4, 2] ] ``` Input ``` matrix = [ [1] ] ``` Output ``` [ [1] ] ``` Input ``` matrix = [ [5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] ``` Output ``` [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] ```","solution":"from typing import List def rotateMatrix(matrix: List[List[int]]) -> List[List[int]]: Rotates a matrix 90 degrees clockwise. return [list(reversed(col)) for col in zip(*matrix)]"},{"question":"Marty McFly needs to get back to the past, but the DeLorean\'s fuel is limited. The DeLorean can fly, and only the horizontal distance matters for fuel consumption. Marty starts at position 0 on a number line and needs to reach position N. He can travel at a maximum speed of v and has exactly F fuel. Marty\'s fuel consumption rate is 1 unit of fuel per unit of distance moved. Write a program to determine if it is possible for Marty to make the trip without running out of fuel, and if so, the minimum time required to reach his destination. -----Input----- The input consists of three integers N, v, F (1 ≤ N, v, F ≤ 10,000) — the distance to Marty\'s destination, the maximum speed of the DeLorean, and the amount of fuel available, respectively. -----Output----- If it is possible for Marty to reach his destination with the given fuel, print the minimum time required in seconds. Otherwise, print \\"Impossible\\". -----Examples----- Input 10 2 15 Output 5.00000000000000000000 Input 20 5 18 Output Impossible -----Note----- In the first sample, Marty can reach his destination by traveling at the maximum speed of 2 units per second. He needs 5 seconds to cover the distance of 10 units, and he has enough fuel (15 units) to do so. In the second sample, the distance to be covered is 20 units, and although his maximum speed is 5 units per second, he only has 18 units of fuel. Therefore, it is impossible for him to reach his destination.","solution":"def minimum_time_to_destination(N, v, F): Determines if it\'s possible for Marty to reach his destination with the given fuel and calculates the minimum time required to reach there if it\'s possible. Args: N (int): Distance to destination v (int): Maximum speed per second F (int): Available fuel Returns: float or str: Minimum time required in seconds if possible, otherwise \\"Impossible\\". if F < N: return \\"Impossible\\" min_time = N / v return min_time"},{"question":"You are given two strings, s and t. You need to check if you can form the string t by deleting some (possibly none) characters from the string s without rearranging the remaining characters. -----Input----- The first line contains the string s (1 ≤ |s| ≤ 10^5). The second line contains the string t (1 ≤ |t| ≤ 10^5). -----Output----- In the only line print \\"YES\\" if you can form the string t from s by deleting some characters, otherwise print \\"NO\\". -----Examples----- Input abcde ace Output YES Input abc acb Output NO -----Note----- For the first example, by deleting the characters \'b\' and \'d\', we can form the string \'ace\' from \'abcde\'. For the second example, we cannot form the string \'acb\' from \'abc\' without rearranging the characters.","solution":"def can_form_string(s, t): Checks if we can form string t by deleting some characters from string s without rearranging the remaining characters. t_index = 0 t_length = len(t) for char in s: if t_index < t_length and char == t[t_index]: t_index += 1 if t_index == t_length: return \\"YES\\" return \\"NO\\""},{"question":"You are given a string, and you need to find the length of the longest substring without repeating characters. Example: Input: \\"abcabcbb\\" Output: 3 Input: \\"bbbbb\\" Output: 1 Input: \\"pwwkew\\" Output: 3","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. max_len = 0 start = 0 used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: max_len = max(max_len, i - start + 1) used_chars[char] = i return max_len"},{"question":"Given an array of positive integers nums and a positive integer k, you need to find the k-th smallest integer in the array after removing any duplicates. If there are fewer than k unique integers, return -1. Example 1: Input: nums = [3, 1, 3, 2, 1, 4], k = 3 Output: 3 Example 2: Input: nums = [5, 6, 6, 4], k = 2 Output: 5 Example 3: Input: nums = [2, 2, 2], k = 1 Output: 2 Example 4: Input: nums = [1, 2, 3], k = 5 Output: -1","solution":"def kth_smallest_unique(nums, k): Finds the k-th smallest integer in the array after removing duplicates. If there are fewer than k unique integers, return -1. # Remove duplicates by converting to set and back to list, then sort the list unique_nums = sorted(set(nums)) # If there are fewer than k unique integers, return -1 if len(unique_nums) < k: return -1 # Return the k-th smallest unique integer (k-1 since list is 0-indexed) return unique_nums[k-1]"},{"question":"# Problem Statement Dr. Evans is trying to organize the inventory of the new research facility. She has a list of scientific samples, each identified by a unique integer ID. Occasionally, a few sample IDs are found to be mislabeled and need to be removed from the list. She also needs to insert new sample IDs as they arrive. Given a series of operations, your task is to maintain an accurate list of sample IDs and generate the final sorted list after all operations have been performed. Each operation is either inserting a new sample ID, removing an existing sample ID, or querying for the size of the current list of sample IDs. Operations: - \\"insert x\\" — Insert sample ID x into the list. - \\"remove x\\" — Remove sample ID x from the list if it exists. If it does not exist, do nothing. - \\"size\\" — Output the current size of the list. Given a series of such operations, perform each operation in order and at the end, output the final sorted list of sample IDs. # Constraints: - 1 <= Number of operations <= 100 - 1 <= Sample ID x <= 1000 # Input: The input consists of multiple lines: - The first line contains an integer, the number of operations T. - The next T lines contain one operation per line as described above. # Output: - For each \\"size\\" operation, output the current size of the list. - After all operations, output the final sorted list of sample IDs. # Examples: Example 1 Input: ``` 7 insert 10 insert 5 size insert 15 size remove 10 size ``` Output: ``` 2 3 2 [5, 15] ``` Example 2 Input: ``` 5 insert 10 insert 20 insert 10 remove 5 size ``` Output: ``` 2 [10, 20] ``` # Explanation: In the first example, the operations are executed as follows: 1. Insert 10: [10] 2. Insert 5: [10, 5] 3. Size -> 2: [10, 5] 4. Insert 15: [10, 5, 15] 5. Size -> 3: [10, 5, 15] 6. Remove 10: [5, 15] 7. Size -> 2: [5, 15] 8. Final sorted list: [5, 15] In the second example, since \\"10\\" is inserted twice and \\"5\\" is removed (not in the list), the final sorted list contains only unique, inserted IDs.","solution":"def process_operations(operations): sample_ids = [] result = [] for operation in operations: if operation.startswith(\\"insert\\"): _, x = operation.split() x = int(x) if x not in sample_ids: sample_ids.append(x) elif operation.startswith(\\"remove\\"): _, x = operation.split() x = int(x) if x in sample_ids: sample_ids.remove(x) elif operation == \\"size\\": result.append(len(sample_ids)) sample_ids.sort() result.append(sample_ids) return result"},{"question":"A company wants to create a coding challenge for developers. The task is to write a function that takes a list of integers and returns a list of those integers categorized as even or odd, and sorted separately in descending order within their categories. The function should then merge these two lists, placing all even numbers before all odd numbers. Input: The first line contains an integer N, the number of integers in the list. The second line contains N integers separated by spaces. Output: Display the sorted list with all even integers in descending order followed by all odd integers in descending order on a single line with each integer separated by a space. Constraints: 1 ≤ N ≤ 1000 -10^5 ≤ Each integer ≤ 10^5 SAMPLE INPUT 8 10 21 32 43 56 67 78 89 SAMPLE OUTPUT 78 56 32 10 89 67 43 21 Explanation: First line of input represents the number of integers. Second line represents the list of integers. Even integers [10, 32, 56, 78] are sorted in descending order: [78, 56, 32, 10] Odd integers [21, 43, 67, 89] are sorted in descending order: [89, 67, 43, 21] Even integers are placed before odd integers in the final output.","solution":"def sort_even_odd(nums): Returns a list where even numbers (sorted in descending order) are followed by odd numbers (sorted in descending order). evens = sorted([num for num in nums if num % 2 == 0], reverse=True) odds = sorted([num for num in nums if num % 2 != 0], reverse=True) return evens + odds"},{"question":"Given a positive integer n, return the sum of its digits repeated until a single digit is obtained. You can assume n is non-negative and n is less than 2^31 - 1. Note: This is a problem to practice recursion. Example 1: Input: n = 38 Output: 2 Explanation: The process is: 38 --> 3 + 8 --> 11 11 --> 1 + 1 --> 2 Example 2: Input: n = 123 Output: 6 Explanation: The process is: 123 --> 1 + 2 + 3 --> 6 Example 3: Input: n = 9875 Output: 2 Explanation: The process is: 9875 --> 9 + 8 + 7 + 5 --> 29 29 --> 2 + 9 --> 11 11 --> 1 + 1 --> 2","solution":"def sum_of_digits_until_single_digit(n): Returns the sum of the digits of n repeated until a single digit is obtained. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"You are given an array of N integers and you need to handle the following types of queries: 1 L R X : Add the value X to each element in the subarray A[L], A[L+1], ..., A[R]. 2 L R : Compute the sum of the subarray A[L], A[L+1], ..., A[R]. ------ Input ------ The first line of input contains two space-separated integers N (the number of elements in the array) and Q (the number of queries). The second line contains N space-separated integers representing the array A. The next Q lines contain one of the two types of queries described above. ------ Output ------ For each query of type 2, print a single integer representing the sum of the specified subarray. ------ Constraints ------ 1 ≤ N, Q ≤ 10^{5} 1 ≤ A_{i}, X ≤ 10^{9} 1 ≤ L ≤ R ≤ N ------ Example ------ Input: 6 4 1 2 3 4 5 6 1 2 4 3 2 1 3 1 1 6 2 2 3 5 Output: 12 21","solution":"def process_queries(n, q, array, queries): # This function processes a list of queries and modifies/queries the array accordingly. results = [] for query in queries: if query[0] == 1: # Type 1 query: Add X to the subarray A[L]...A[R] L, R, X = query[1] - 1, query[2] - 1, query[3] for i in range(L, R + 1): array[i] += X elif query[0] == 2: # Type 2 query: Compute the sum of the subarray A[L]...A[R] L, R = query[1] - 1, query[2] - 1 results.append(sum(array[L:R + 1])) return results"},{"question":"Emily needs to make a birthday cake for her friend. She has a list of ingredients required to make the cake and the amount she has of each ingredient. She needs to know if she has enough ingredients to make the cake. The recipe requires certain amounts of each ingredient, and Emily needs to ensure she has at least this amount for each one. -----Constraints----- - 1 ≤ n ≤ 1000 (number of ingredients) - 1 ≤ ai ≤ 10000 (amount required of ingredient i) - 1 ≤ bi ≤ 10000 (amount Emily has of ingredient i) - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: n a1 a2 ... an b1 b2 ... bn -----Output----- If Emily has enough of each ingredient, print Enough; otherwise, print Not enough. -----Sample Input----- 3 500 200 300 600 200 400 -----Sample Output----- Enough Emily has 600 units of the first ingredient, 200 units of the second ingredient, and 400 units of the third ingredient, which is enough to meet the required amounts of 500, 200, and 300 units respectively.","solution":"def check_ingredients(n, required, available): Checks if the available amount of each ingredient is enough for the required amount. Parameters: n (int): The number of ingredients. required (list of int): The required amount of each ingredient. available (list of int): The available amount of each ingredient. Returns: str: \\"Enough\\" if all required ingredients are available in sufficient amount, otherwise \\"Not enough\\". for req, avail in zip(required, available): if avail < req: return \\"Not enough\\" return \\"Enough\\""},{"question":"A company\'s database stores employee information, including their age, medical leave days taken, and years of service. An employee is eligible for a special pension scheme if they satisfy these conditions: 1. Their age is at least 60 years. 2. They have taken less than 15 days of medical leave in the previous year. 3. They have been in service for at least 30 years. You are tasked with writing a program that determines the number of employees eligible for the pension scheme, given the list of employees and the respective criteria for each. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of employees. Each of the next n lines contains three integers ai, mi, and yi (0 ≤ ai ≤ 100, 0 ≤ mi ≤ 365, 0 ≤ yi ≤ 100), representing the age, number of medical leave days, and years of service of the i-th employee respectively. Output Print a single integer — the number of employees eligible for the pension scheme. Examples Input 5 62 12 31 58 10 35 70 14 29 65 20 32 60 5 40 Output 3 Note In the provided example: - The first employee is eligible because their age (62) is at least 60, medical leave days (12) are less than 15, and years of service (31) are at least 30. - The second employee is not eligible as their age (58) is less than 60. - The third employee is not eligible as their years of service (29) are less than 30. - The fourth employee is not eligible as their medical leave days (20) are 15 or more. - The fifth employee is eligible as all criteria are met. Therefore, the number of eligible employees is 3.","solution":"def count_eligible_employees(n, employees): This function counts the number of employees eligible for the pension scheme. Parameters: - n: int, the number of employees. - employees: list of tuples, each containing three integers representing the age, number of medical leave days, and years of service of each employee. Returns: - int, the number of employees eligible for the pension scheme. eligible_count = 0 for age, medical_leave, years_of_service in employees: if age >= 60 and medical_leave < 15 and years_of_service >= 30: eligible_count += 1 return eligible_count # Example usage: # n = 5 # employees = [(62, 12, 31), (58, 10, 35), (70, 14, 29), (65, 20, 32), (60, 5, 40)] # print(count_eligible_employees(n, employees))"},{"question":"**Write a function that takes an array of integers and a target integer. The function should return the indices of the two numbers that add up to the target, if such a pair exists. If no such pair exists, return an empty array.** **Input Format** - The first input line contains an integer `n`, the number of elements in the array. - The second input line contains `n` space-separated integers, representing the elements of the array. - The third input line contains a single integer, the target integer. **Output Format** - Print two integers representing the 0-based indices of the two numbers that add up to the target. If no such pair exists, print an empty array. **Example** Input ``` 5 2 7 11 15 9 ``` Output ``` 0 1 ``` Note that in the provided example, the numbers at index 0 and index 1 (values 2 and 7) add up to the target integer 9. **Constraints** - Each input would have exactly one solution. - You can return the indices in any order. - The number of elements in the array will be in the range [2, 10^4]. - The value of the elements in the array will be in the range [-10^9, 10^9].","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to target. :param nums: List of integers :param target: Target sum integer :return: List containing two indices of the elements that add up to target num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"Create a function that calculates the product of all the elements in a given list of integers, excluding the zero elements. You are not allowed to use any loop constructs like `for` or `while` in your solution. You may use recursive functions or higher-order functions like `map`, `filter`, and `reduce` from your language\'s standard library. If the list does not contain any non-zero elements, return 1 as the product. __Input:__ - A list of integers, `lst`. __Output:__ - An integer representing the product of all non-zero elements in the list (or 1 if there are no non-zero elements). __Example:__ ```python product_non_zero([1, 2, 3, 4, 0, 5, 0]) => 120 product_non_zero([0, 0, 0, 0]) => 1 product_non_zero([3, 0, 2, 0, 4]) => 24 ```","solution":"from functools import reduce def product_non_zero(lst): Returns the product of all non-zero elements in the list. If the list does not contain any non-zero elements, returns 1. non_zero_elements = filter(lambda x: x != 0, lst) result = reduce(lambda x, y: x * y, non_zero_elements, 1) return result"},{"question":"Ramesh has recently purchased a large plot of land where he intends to start a farm. However, the plot is covered with non-uniform terrain and he wants it to be leveled. The plot is represented as a 2D grid with n rows and m columns, where each cell (i, j) has an integer value h(i, j) representing the height of the terrain at that point. Ramesh can use a bulldozer to adjust the height of any cell to match the height of any of its adjacent cells. To optimize costs, Ramesh wants to know the minimum number of leveling operations required to make the entire plot flat, that is, all cells must eventually have the same height. A leveling operation is defined as decreasing or increasing the height of any cell by one unit to match the height of one of its adjacent cells (up, down, left, right). Input First line contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the plot of land. Next n lines contain m integers each, where the j-th integer in the i-th line corresponds to h(i, j) (-10^4 ≤ h(i, j) ≤ 10^4), the height of the terrain at cell (i, j). Output Print a single integer, the minimum number of leveling operations required. Example Input 3 3 4 2 3 7 6 5 1 2 3 Output 14 Input 2 2 1 2 2 3 Output 2 Note In the first example: - One possible way to level the terrain is to decrease the height of cells (2, 1), (2, 2), (2, 3), and (3, 1) each by 3 units. Then, decrease the height of cells (2, 1) and (3, 2) by 1 unit each.","solution":"def min_leveling_operations(grid): Returns the minimum number of leveling operations required to make the entire plot flat. from collections import Counter from statistics import median heights = [] for row in grid: heights.extend(row) median_height = int(median(heights)) operations = sum(abs(h - median_height) for h in heights) return operations def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:n+1]] return grid"},{"question":"Julia is an avid gardener and she loves to plant different types of flowers in her garden. She has a garden with a rectangular grid of cells, each of which can contain one flower. Julia has recently developed a new planting strategy to maximize the beauty of her garden. Given a garden represented by a grid `n x m` where each cell either contains a flower (`1`) or is empty (`0`), Julia wants to know the largest square sub-grid that contains only flowers. Write a program that, given the grid of the garden, computes the side length of the largest square that contains only flowers. --- Input --- The first line of input contains two integers `n` and `m` (1 le n, m le 1,000) — the number of rows and columns in the grid. The next `n` lines each contain `m` integers (`0` or `1`), representing the grid where `0` indicates an empty cell and `1` indicates a cell with a flower. --- Output --- Output a single integer — the side length of the largest square sub-grid that contains only flowers. --- Examples --- Input 5 6 1 0 1 0 0 1 1 1 0 1 1 1 1 1 1 1 0 0 1 1 1 1 0 0 0 1 1 1 0 1 Output 3 Input 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Output 0 --- Notes --- In the first example, the largest square of flowers is of size `3x3`, starting from the cell at `(3, 2)` (1-based index): 1 1 1 1 1 1 1 1 1 In the second example, there are no flowers in the garden, so the largest square containing only flowers has a side length of `0`.","solution":"def largest_square_of_flowers(n, m, garden): if n == 0 or m == 0: return 0 dp = [[0] * m for _ in range(n)] max_side_length = 0 for i in range(n): for j in range(m): if garden[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"You have been given several software projects to manage, each containing a list of tasks. Each task is represented by its dependencies, i.e., the tasks that need to be completed before it. The dependencies can be represented as a list of pairs (a, b), where \'a\' depends on \'b\' and must be done after \'b\'. Write a program that determines if it is possible to complete all tasks for each project. Essentially, you need to check for cyclic dependencies within the tasks of each project. If there are no cyclic dependencies in a project, print \\"Possible\\", otherwise, print \\"Impossible\\". Input The first line contains an integer T (1 ≤ T ≤ 100) — the number of projects. For each project, the input consists of two integers: - n (1 ≤ n ≤ 1000) — the number of tasks. - m (0 ≤ m ≤ 2000) — the number of dependency pairs. Then follow m lines containing two integers a and b (1 ≤ a, b ≤ n), representing that task \'a\' depends on task \'b\'. Output For each project, print \\"Possible\\" if the tasks can be completed without cyclic dependencies, otherwise print \\"Impossible\\". Examples Input: 2 4 2 1 2 3 1 3 3 1 2 2 3 3 1 Output: Possible Impossible","solution":"from collections import defaultdict, deque def is_possible_to_complete_all_tasks(n, dependencies): Returns whether it is possible to complete all tasks without cyclic dependencies. graph = defaultdict(list) in_degree = [0] * (n + 1) for a, b in dependencies: graph[b].append(a) in_degree[a] += 1 q = deque() for i in range(1, n + 1): if in_degree[i] == 0: q.append(i) count = 0 while q: node = q.popleft() count += 1 for neighbour in graph[node]: in_degree[neighbour] -= 1 if in_degree[neighbour] == 0: q.append(neighbour) return count == n def check_projects(T, projects): results = [] for n, m, dependencies in projects: if is_possible_to_complete_all_tasks(n, dependencies): results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results"},{"question":"Calculate the number of even integers from 1 up to a given number \\"M\\" that are divisible by 4. -----Input----- Input will start with an integer K representing the number of test cases. Each test case will consist of one integer M. -----Output----- Output each result on a new line. -----Constraints----- - 1 ≤ K ≤ 20 - 1 ≤ M ≤ 50000000 -----Example----- Input: 2 8 15 Output: 2 3 -----Explanation----- Example case 1: The even integers from 1 to 8 that are divisible by 4 are: 4, 8. There are 2 such integers. Example case 2: The even integers from 1 to 15 that are divisible by 4 are: 4, 8, 12. There are 3 such integers.","solution":"def count_even_integers_divisible_by_4(K, test_cases): Returns the number of even integers from 1 up to M that are divisible by 4 for each test case. Parameters: K (int): Number of test cases. test_cases (list of int): Each integer M representing the upper limit for the range of integers to consider. Returns: list of int: Number of even integers from 1 up to M that are divisible by 4 for each test case. results = [] for M in test_cases: count = M // 4 results.append(count) return results"},{"question":"Given a list of positive integers, your task is to find the maximum sum of non-adjacent elements. In other words, you cannot take consecutive elements from the list while maximizing the sum. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of integers in the list. - The second line contains `n` positive integers, representing the list of elements. Each integer in the list is between 1 and 10^6. # Output: - Print a single integer, the maximum sum of non-adjacent elements. # Examples: Input: 6 3 2 5 10 7 Output: 15 Input: 4 3 2 7 10 Output: 13 Explanation: In the first example, the optimal solution is to take 3, 10, and 2 which yields a sum of 3 + 10 + 2 = 15. In the second example, the optimal solution is to take 3 and 10 which yields a sum of 3 + 10 = 13.","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of non-adjacent elements. if not nums: return 0 n = len(nums) if n == 1: return nums[0] # Initialize the two scenarios for DP prev_prev = 0 prev = 0 for num in nums: current = max(prev, prev_prev + num) prev_prev = prev prev = current return prev"},{"question":"A company organizes a sports event for its employees, where they form teams to play a series of games. Each game is a tournament where teams play against each other in a knock-out format until one team remains as the winner. Each game has an integer number of teams, and the number of teams in each game is a power of two (e.g., 2, 4, 8, 16, etc.). You are required to write a program that calculates the minimum and maximum number of rounds required to determine the winner. In each round, half of the teams are eliminated. -----Input----- Any positive integer in the range 1 to 1024, representing the number of teams competing in a game. -----Output----- Two integers: the minimum and maximum number of rounds required to determine the winner. -----Example----- Input: 16 Output: 4 4 (Note: Since the number of teams is a power of two, both minimum and maximum rounds are the same as there is one established way of organizing the knock-out rounds. However, this setup allows for variance if non-standard operations or penalties were to be considered, which is not the case in this basic problem context.)","solution":"import math def calculate_rounds(teams): Given a number of teams, calculate the minimum and maximum number of rounds required to determine the winner in a tournament. Parameters: teams (int): The number of teams participating Returns: min_rounds (int): The minimum number of rounds required max_rounds (int): The maximum number of rounds required (same as min in this case) if teams == 1: return (0, 0) min_rounds = int(math.log2(teams)) # As number of teams is always a power of two, min_rounds is equal to max_rounds max_rounds = min_rounds return (min_rounds, max_rounds)"},{"question":"You are given an array of integers and an integer `k`. Your task is to find the `k` closest integers to a given value `x`. The result should be sorted in ascending order. If there are two numbers with the same difference to `x`, the smaller number comes first. Example 1: Input: arr = [1, 2, 3, 4, 5] k = 4 x = 3 Output: [1, 2, 3, 4] Example 2: Input: arr = [1, 3, 3, 3, 5, 8, 8, 9] k = 3 x = 4 Output: [3, 3, 3] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findClosestElements` which takes the array `arr`, integer `k` and integer `x` as input and returns an array of the `k` closest integers to `x`. Expected Time Complexity: O(N log k). Expected Auxiliary Space: O(k). Constraints: 1 <= len(arr) <= 10^4 -10^4 <= arr[i], x <= 10^4 1 <= k <= len(arr) Note: The Input/Output format and Example given are used for the system\'s internal purpose and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"import heapq def findClosestElements(arr, k, x): Returns the k closest integers to x in the array arr. # Using a max-heap to keep track of the closest k elements max_heap = [] for num in arr: # Push the negative of the difference to create a max-heap heapq.heappush(max_heap, (-abs(num - x), -num)) if len(max_heap) > k: heapq.heappop(max_heap) # Extract the elements from the heap and sort them result = [-item[1] for item in max_heap] result.sort() return result"},{"question":"Suzie, an avid gardener, loves to calculate the total number of plants she has in her garden by category. Each plant in her garden can be classified as either a flower, bush, or tree. Suzie wants a program that takes input about her plants, categorizes them, and prints the total number of flowers, bushes, and trees separately for each of the test cases. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of every test case consists of a single integer N - the number of plants in Suzie\'s garden. Then, N lines will follow. Each of these N lines will consist of the name of the plant (a string) and its category (one of \\"Flower\\", \\"Bush\\", or \\"Tree\\"), separated by a single space. -----Output----- For each test case, output three lines containing the total number of flowers, bushes, and trees respectively for that test case in the format: \\"Total Flowers: X\\" \\"Total Bushes: Y\\" \\"Total Trees: Z\\" -----Example----- Input: 2 4 Rose Flower Tulip Flower Lavender Bush Oak Tree 3 Sunflower Flower Hibiscus Bush Pine Tree Output: Total Flowers: 2 Total Bushes: 1 Total Trees: 1 Total Flowers: 1 Total Bushes: 1 Total Trees: 1 -----Scoring----- Subtask 1 (30 points): T = 1000, 1 <= N <= 100, Name length <= 20 characters Subtask 2 (70 points): T = 100, 1 <= N <= 10000, Name length <= 20 characters","solution":"def count_plants(test_case): Process a single test case and return the formatted string containing the count of flowers, bushes, and trees. lines = test_case.strip().split(\'n\') N = int(lines[0]) flower_count = bush_count = tree_count = 0 for i in range(1, N + 1): plant_name, category = lines[i].rsplit(\' \', 1) if category == \\"Flower\\": flower_count += 1 elif category == \\"Bush\\": bush_count += 1 elif category == \\"Tree\\": tree_count += 1 return f\\"Total Flowers: {flower_count}nTotal Bushes: {bush_count}nTotal Trees: {tree_count}\\" def categorize_plants(data): Processes the input data and returns the results for each test case. lines = data.strip().split(\'n\') T = int(lines[0]) result = [] index = 1 for _ in range(T): N = int(lines[index]) test_case = \'n\'.join(lines[index:index + N + 1]) result.append(count_plants(test_case)) index += N + 1 return \'n\'.join(result)"},{"question":"Calculate the nth Motzkin Number. A Motzkin number for n is the number of different ways of drawing non-intersecting chords between n points on a circle. The first few Motzkin numbers for n = 0, 1, 2, ... are 1, 1, 2, 4, 9, 21, 51, 127, ... Motzkin numbers can also be defined recursively: - M(n) = 1, for n = 0 or n = 1 - M(n) = M(n-1) + Σ (i=0 to n-2) M(i) * M(n-2-i), for n > 1 Example 1: Input: n = 3 Output: 4 Explanation: M(3) = M(2) + M(0)*M(1) = 2 + 1*1 = 4 Example 2: Input: n = 5 Output: 21 Explanation: M(5) = M(4) + Σ (i=0 to 3) M(i) * M(3-i) = 9 + 1*4 + 1*2 + 2*1 + 4*1 = 21 Your Task: You don\'t need to read input or print anything. Your task is to complete the function nthMotzkinNumber() which takes an integer n and returns the nth Motzkin number. Expected Time Complexity: O(n^{2}) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^{4}","solution":"def nthMotzkinNumber(n): if n == 0 or n == 1: return 1 motzkin = [0] * (n + 1) motzkin[0] = 1 motzkin[1] = 1 for i in range(2, n + 1): motzkin[i] = motzkin[i - 1] for j in range(i - 1): motzkin[i] += motzkin[j] * motzkin[i - 2 - j] return motzkin[n]"},{"question":"You are given a string S of length n consisting of lowercase English letters. You can perform the following operation any number of times: 1. Choose two characters from the string S such that they are the same and replace them with a single character from the set {\\"a\\", \\"b\\", ..., \\"z\\"}. The goal is to minimize the length of the string S after possibly performing the above operations. Your task is to determine the length of the string after performing the operations optimally. The length can be minimized by continuously replacing characters until no further replacements can be made. -----Input----- The input consists of a single line containing a string S (1 ≤ |S| ≤ 1000) — the given string. -----Output----- Print a single integer — the length of the string after minimizing it using the allowed operations. -----Examples----- Input abacaba Output 1 Input bbc Output 1 Input z Output 1 -----Note----- In the first example, we can perform the following operations: - Replace the two \'a\'s in \\"abacaba\\" with a single \'a\' to get \\"abacb\\". - Replace the two \'b\'s in \\"abacb\\" with a single \'b\' to get \\"acb\\". - Replace the two \'a\'s in \\"acba\\" with a single \'a\' to get \\"cb\\". - Finally, replace the two \'c\'s in \\"cb\\" with a single \'c\' to get \\"b\\". In the second example, we can replace the two \'b\'s in \\"bbc\\" with a single \'b\' to get \\"bc\\". Finally, no other replacements can be made.","solution":"def minimize_string_length(s): Returns the minimized length of the string after performing the allowed operations optimally. from collections import Counter counter = Counter(s) return sum(1 for char_count in counter.values() if char_count % 2 != 0)"},{"question":"Given a list of integers representing balloon heights, write a function to calculate the maximum number of balloons that can be burst in a single jump. In each jump, a person can burst all the balloons up to a certain height (inclusive) and all balloons for the lower heights. Implement a function: ```python def max_balloons_to_burst(heights: List[int]) -> int: ``` # Input - `heights` (List of integers): A list with non-negative integers representing temperatures of N balloons (1 <= N <= 10^5). # Output - Return an integer representing the maximum number of balloons that can be burst in a single jump. # Examples **Example 1:** Input: ```plaintext [3, 1, 2, 1, 4, 5, 2, 3] ``` Output: ```plaintext 8 ``` Explanation: In this case, by jumping to height 5, you can burst all the balloons. **Example 2:** Input: ```plaintext [1, 2, 3, 2, 1] ``` Output: ```plaintext 5 ``` Explanation: Jumping to height 3 will result in bursting all 5 balloons. **Example 3:** Input: ```plaintext [4, 3, 3, 1, 2, 4, 2] ``` Output: ```plaintext 7 ``` Explanation: By jumping to height 4, all 7 balloons can be burst.","solution":"def max_balloons_to_burst(heights): Given a list of integers representing balloon heights, calculates the maximum number of balloons that can be burst in a single jump. :param heights: List[int] - list of non-negative integers representing balloon heights. :return: int - maximum number of balloons that can be burst in a single jump. if not heights: return 0 max_height = max(heights) return heights.count(max_height) + sum(height < max_height for height in heights)"},{"question":"Create a function that takes a list of tuples as input. Each tuple represents a coordinate in a 2D grid, denoted as (x, y). The function should find the largest rectangle that can be formed by these coordinates with sides parallel to the axes. The output should be the area of this rectangle. Note: A rectangle is defined by four points, if there are not enough points to form any rectangle, return 0. -----Input----- One list of tuples, where each tuple contains two integers representing the x and y coordinates, respectively. The list will contain up to 1000 tuples. -----Output----- An integer representing the largest rectangle area that can be formed from the given coordinates. -----Examples----- Sample Input 1: [(1, 1), (1, 3), (3, 1), (3, 3)] Sample Output 1: 4 Sample Input 2: [(1, 1), (1, 2), (3, 1), (3, 3), (3, 2), (2, 2)] Sample Output 2: 2 Sample Input 3: [(1, 1), (2, 2), (3, 3)] Sample Output 3: 0","solution":"def largest_rectangle_area(coords): Returns the largest rectangle area that can be formed by the given coordinates with sides parallel to the axes. if len(coords) < 4: return 0 coord_set = set(coords) max_area = 0 for i in range(len(coords)): for j in range(i + 1, len(coords)): x1, y1 = coords[i] x2, y2 = coords[j] if x1 != x2 and y1 != y2: if (x1, y2) in coord_set and (x2, y1) in coord_set: area = abs(x2 - x1) * abs(y2 - y1) if area > max_area: max_area = area return max_area"},{"question":"Chef loves to play video games and he recently started playing a new online game. The game has a ranking system where players can earn or lose points based on their performance in each match. However, Chef has noticed that sometimes players with the same points can have different ranks, and he wants to understand how this system works. Given Chef\'s total points after each game and his rank in the leaderboard, determine the number of distinct ranks he has achieved till the current game. ------ Input ------ The first line of the input contains a single integer TC, the number of test cases. Description of TC test cases follows. The first line of each test case contains an integer N, the number of games Chef has played. The second line of each test case contains N space-separated integers where the i-th integer represents Chef’s total points after the i-th game. The third line of each test case contains N space-separated integers where the i-th integer represents Chef’s rank after the i-th game. ------ Output ------ For each test case, output a single integer in a separate line, the number of distinct ranks Chef has achieved till the current game. ------ Constraints ------ 1 ≤ TC ≤ 1,000 1 ≤ N ≤ 100 1 ≤ text{points after each game} ≤ 10^6 1 ≤ text{rank after each game} ≤ 10^6 ------ Sample Input 1 ------ 2 5 100 200 300 400 500 1 2 2 3 3 3 150 150 200 1 2 2 ------ Sample Output 1 ------ 3 2 ------ Explanation 1 ------ Example case 1. Chef\'s ranks after each game are [1, 2, 2, 3, 3]. There are three distinct ranks: [1, 2, 3]. So the output is 3. Example case 2. Chef\'s ranks after each game are [1, 2, 2]. There are two distinct ranks: [1, 2]. So the output is 2.","solution":"def count_distinct_ranks(TC, test_cases): Returns the number of distinct ranks achieved for each test case. results = [] for i in range(TC): N = test_cases[i][0] ranks = test_cases[i][2] distinct_ranks = len(set(ranks)) results.append(distinct_ranks) return results"},{"question":"Given a string consisting of lowercase Latin letters, find the shortest possible length of the string after removing characters based on the following rules: 1. Select and remove a pair of adjacent characters which are the same (i.e., remove both characters if they are identical and adjacent). 2. Repeat the above step as long as you can make such a removal. Input: - The first line contains an integer T, the number of test cases. - Each test case consists of a single string S of length N. Output: - For each test case, print the shortest possible length of the final string after performing the operations. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 SAMPLE INPUT 3 abbac abcde aa SAMPLE OUTPUT 1 5 0","solution":"def shortest_length_after_removal(T, test_cases): Given a number of test cases and each consisting of a string, return the shortest possible length of the string after removing adjacent pairs of identical characters. Parameters: T (int): Number of test cases test_cases (list): List of strings representing the test cases Returns: list: List of integers representing the shortest lengths after removal for each test case results = [] for S in test_cases: stack = [] for char in S: if stack and stack[-1] == char: stack.pop() # Remove last character since it matches the current one else: stack.append(char) results.append(len(stack)) return results"},{"question":"# Task Alice is organizing a reading club at her local library. She wants to ensure that all sessions are well-attended. She has a list representing the reading times preferences of the participants. To make sure that no one is left out, she should match the reading time with the most common preference time among the members. Write a function that returns the time that has the highest number of participants willing to attend. In case of a tie, return the smallest time. # Input/Output - `[input]` integer array `T` An array representing the preferred reading times of the participants in a 24-hour format (0 to 23 inclusive). `1 <= T.length <= 50` - `[output]` an integer representing the time that the highest number of participants prefer, or the smallest such time in case of a tie.","solution":"def most_common_reading_time(T): Returns the time that has the highest number of participants willing to attend. In case of a tie, return the smallest time. from collections import Counter time_count = Counter(T) max_count = max(time_count.values()) common_times = [time for time, count in time_count.items() if count == max_count] return min(common_times)"},{"question":"You are given an array of integers `arr` and a target integer `x`. Your task is to determine if there exist two integers in the array whose sum equals the target integer. If such a pair exists, output \\"YES\\", otherwise output \\"NO\\". Input The first line contains two integers `n` (1 ≤ n ≤ 2·10^5) and `x` (−10^9 ≤ x ≤ 10^9), where `n` is the number of elements in the array and `x` is the target integer. The second line contains `n` space-separated integers representing the array `arr` (−10^9 ≤ arr[i] ≤ 10^9). Output Output \\"YES\\" if there exist two integers in the array whose sum equals `x`, otherwise output \\"NO\\". Examples Input 5 9 2 7 11 15 1 Output YES Input 4 8 1 2 3 4 Output NO Note In the first example, the two integers 2 and 7 sum up to 9. In the second example, no two integers sum up to 8.","solution":"def has_pair_with_sum(arr, x): seen = set() for number in arr: if x - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"Masha and bears love strawberries. Masha has a field of strawberries represented by a two-dimensional grid of size m x n. Each cell in the grid contains a certain number of strawberries denoted by a non-negative integer. Masha wants to collect as many strawberries as possible in a single row. She can start collecting strawberries from any point in the row and move either left or right, but she cannot revisit any cell in the same row. However, there is a catch: there are bears that are particularly fond of certain rows, making it risky for Masha to collect strawberries from these rows. A row is considered risky if it contains one or more cells with X strawberries, where X is a given number. Masha should avoid these rows entirely. Your task is to help Masha determine the maximum number of strawberries she can collect from a single non-risky row. **Input** - The first line contains three integers m, n, and X (1 ≤ m, n ≤ 1000, 0 ≤ X ≤ 100), indicating the dimensions of the grid and the number of strawberries that make a row risky, respectively. - The next m lines each contain n integers representing the number of strawberries in each cell of the grid (0 ≤ strawberries ≤ 100). **Output** - Print a single integer representing the maximum number of strawberries Masha can collect from a single non-risky row. If all rows are risky, print 0. **Example** **Input** ``` 3 4 10 1 2 3 4 5 10 5 5 7 8 9 10 ``` **Output** ``` 10 ``` **Explanation** - The first row has a total of 10 strawberries (1+2+3+4). - The second row is risky because it contains a cell with exactly 10 strawberries. - The third row is also risky because it contains a cell with exactly 10 strawberries. - Thus, Masha can collect a maximum of 10 strawberries from the first row.","solution":"def max_strawberries(m, n, X, grid): max_strawberries = 0 for row in grid: if X not in row: # Check if the row is not risky max_strawberries = max(max_strawberries, sum(row)) return max_strawberries"},{"question":"The kingdom of Alphaland has a unique administrative system where each village reports its population on a monthly basis. The king is interested in analyzing the population growth and requires your help. You are given an initial population array representing the populations of all the villages at the start. Each month, for a certain range of villages, a fixed number of people are born or migrate into these villages. You need to update the population accordingly based on these records and then answer the king with the updated population of any queried village. -----Input:----- - The first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases is as follows. - The next line of the input contains a single integer N, denoting the total number of villages. - The next line of the input contains N space-separated integers representing the initial populations of the villages. - Next line contains a single integer U, denoting the number of updates. - The next U lines each contain three space-separated integers: L, R, and P where L and R denote the range of villages (inclusive) that will have their populations increased by P. - Next line contains a single integer Q, denoting the number of queries. - The next Q lines each contain a single integer i, representing the index of the village whose updated population is to be queried. Note: villages are 0-indexed. -----Output:----- - For each query, print the updated population of the ith village (each on a new line). -----Constraints:----- - 1 leq T leq 20 - 1 leq N leq 10^5 - 1 leq initial_population leq 10^6 - 1 leq U leq 10^3 - 0 leq L, R < N - 1 leq P leq 10^5 - 1 leq Q leq 10^3 - 0 leq i < N -----Sample Input:----- 1 5 10 20 30 40 50 2 1 3 10 0 2 5 3 0 2 4 -----Sample Output:----- 15 50 50 -----Explanation:----- - Before updates, populations are: [10, 20, 30, 40, 50] - After 1st update, populations are: [10, 30, 40, 50, 50] - After 2nd update, populations are: [15, 35, 45, 50, 55] - The queried populations are: 15 (village 0), 45 (village 2), and 55 (village 4).","solution":"def process_village_population(T, cases): results = [] for case in cases: N = case[\'N\'] populations = case[\'populations\'] updates = case[\'updates\'] queries = case[\'queries\'] # Apply each update for update in updates: L, R, P = update for i in range(L, R + 1): populations[i] += P # Answer each query for query in queries: results.append(populations[query]) return results"},{"question":"Alice is running a race. In this race, Alice runs at a constant speed and increases her speed after a certain number of laps. Each lap takes her the same amount of time because the speed increments are small and spread over many laps. You are given the number of laps, n, she has run and the constant time, t, she takes to run each lap. Let m be the number of laps it takes for Alice to increment her speed. Your task is to find the total time she took for the race and also the lap number at which her speed was incremented the last time. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer n. - The second line of each test case contains a single integer t. - The third line of each test case contains a single integer m. -----Output:----- For each testcase, print one line containing two integers, the total time Alice took for the race and the lap number at which her speed was incremented the last time. -----Constraints----- - 1 leq T leq 10 - 1 leq n leq 1000 - 1 leq t leq 100 - 1 leq m leq n -----Sample Input:----- 2 12 10 4 5 15 3 -----Sample Output:----- 120 12 75 3 -----Explanation----- In the first test case, Alice runs 12 laps taking 10 units of time for each lap, resulting in a total time of 120 units. Her speed is incremented every 4th lap, and the last increment happens at lap 12. In the second test case, Alice runs 5 laps taking 15 units of time for each lap, resulting in a total time of 75 units. Her speed is incremented every 3rd lap, and the last increment happens at lap 3.","solution":"def race_time_and_last_increment_lap(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] t = test_cases[i][1] m = test_cases[i][2] total_time = n * t last_increment_lap = (n // m) * m results.append((total_time, last_increment_lap)) return results"},{"question":"A company is organizing a team-building event, where each team should solve a series of programming challenges. In order to ensure fairness, these challenges are assigned based on the number of available resources each team has. Each resource is represented as a node in a graph, and the dependencies between resources are represented as directed edges. A resource i is dependent on another resource j if there is an edge from j to i. The team can only use a resource if all the resources it depends on have already been used. Given a directed acyclic graph (DAG) representing the dependencies, you need to determine the minimum number of teams required to complete all challenges. Each team can work in parallel without interfering with each other if their resources are independent. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of resources. The second line contains an integer m (0 ≤ m ≤ 200,000) — the number of dependencies. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n), meaning there is a directed edge from resource u to resource v. -----Output----- Output a single integer — the minimum number of teams required. -----Example----- Input 5 4 1 2 2 3 3 4 4 5 Output 5 Input 6 6 1 2 1 3 3 4 2 4 4 5 4 6 Output 4 -----Note----- In the first example, the sequence of dependencies forms a single path, so each resource must be handled one by one, resulting in 5 teams. In the second example, the resources can be divided into 4 independent groups: {1}, {2, 3}, {4}, {5, 6}. Therefore, a minimum of 4 teams is required.","solution":"from collections import defaultdict, deque def min_number_of_teams(n, m, dependencies): Determines the minimum number of teams required to complete all challenges. Args: n (int): Number of resources. m (int): Number of dependencies. dependencies (List[Tuple[int, int]]): List of dependency edges. Returns: int: Minimum number of teams required. # Step 1: Build the graph graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in dependencies: graph[u].append(v) in_degree[v] += 1 # Step 2: Perform topological sorting queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) level = 0 while queue: level_size = len(queue) while level_size > 0: node = queue.popleft() for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) level_size -= 1 level += 1 return level"},{"question":"You are given a list of integers that represent the height of towers in a skyline from left to right. You are to design a function that determines the amount of water that would be trapped between these towers when it rains. To visualize this, imagine the towers form a series of columns of varying heights, and the water gets trapped between the taller columns. Constraints: * The list will have at least one element. * Heights are non-negative integers. Function Signature: ```python def trapped_water(heights: List[int]) -> int: ``` Input: * `heights` (List[int]): A list of integers representing the heights of towers in the skyline. Output: * Return an integer representing the total units of water that can be trapped between the towers after raining. Examples: Input: ``` [0,1,0,2,1,0,1,3,2,1,2,1] ``` Output: ``` 6 ``` Input: ``` [4,2,0,3,2,5] ``` Output: ``` 9 ``` Explanation: In the first example: ``` x x x x x x x x x x x x x x x x x x x x ``` Total water trapped = 6 units. In the second example: ``` x x x x x x x x x x x x x x x x x x ``` Total water trapped = 9 units.","solution":"from typing import List def trapped_water(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate trapped water for i in range(n): water += min(left_max[i], right_max[i]) - heights[i] return water"},{"question":"You are given an array of integers of length N. Calculate the number of distinct pairs (i, j) such that 1 ≤ i < j ≤ N and the sum of A[i] and A[j] is even. Constraints * 1 leq N leq 200,000 * 1 leq A[i] leq 10^9 Input Input is given from Standard Input in the following format: N A₁ A₂ … Aₙ Output Print the number of distinct pairs. Examples Input 5 1 2 3 4 5 Output 4 Input 4 2 4 6 8 Output 6 Input 6 1 1 1 1 1 1 Output 15 Input 3 1 3 5 Output 3","solution":"def count_even_sum_pairs(N, A): Returns the count of distinct pairs (i, j) such that 1 ≤ i < j ≤ N and the sum of A[i] and A[j] is even. count_even = sum(1 for x in A if x % 2 == 0) count_odd = N - count_even # Number of ways to choose 2 even numbers or 2 odd numbers pairs = (count_even * (count_even - 1)) // 2 + (count_odd * (count_odd - 1)) // 2 return pairs"},{"question":"DynamicTechnology Solutions has just launched a new e-commerce platform. They are creating a feature that will allow users to track their orders. To implement this feature, the team has decided to maintain a log of actions (placed, processed, shipped, delivered) for each order. Your task is to write a function that processes this log and determines the current status of each order. The log will provide sequential updates to the status of various orders and your goal is to return the latest status of each order in the sequence they appear in the log. Constraints: 1 ≤ T ≤ 100 – Number of log entries. Each log entry contains an integer O (1 ≤ O ≤ 1000) and a string S (S ∈ {\\"placed\\", \\"processed\\", \\"shipped\\", \\"delivered\\"}) separated by a space, where O is the order ID and S is the status. Input: - The first line contains an integer T (number of log entries). - The next T lines each contain an integer O and a string S separated by a space. Output: - Print the current status of each order ID, one per line, in the order the ID appears in the first log entry. Explanation: There are 5 log entries. Order 1 is placed and processed, then order 2 is placed and processed, followed by order 1 being shipped. In the end, order 1\'s status is \'shipped\' and order 2\'s status is \'processed\', with each status printed on a new line. SAMPLE INPUT 5 1 placed 1 processed 2 placed 2 processed 1 shipped SAMPLE OUTPUT shipped processed","solution":"def get_order_statuses(T, log_entries): Determines the current status of each order based on log entries. order_status = {} for entry in log_entries: order_id, status = entry.split() order_id = int(order_id) order_status[order_id] = status ordered_ids = list(dict.fromkeys([int(entry.split()[0]) for entry in log_entries])) return [order_status[order_id] for order_id in ordered_ids]"},{"question":"Given a 2D matrix of size m x n filled with non-negative integers, you need to find a path from the top-left cell to the bottom-right cell (both inclusive) such that the sum of the values in the path is minimized. From a given cell, you can move to any of the adjacent cells - down or to the right. Return the minimum sum of the values along such a path. Example 1: Input: grid = [[1,3,1],[1,5,1],[4,2,1]] Output: 7 Explanation: The path 1→3→1→1→1 minimizes the sum. Example 2: Input: grid = [[1,2,3],[4,5,6]] Output: 12 Explanation: The path 1→2→3→6 minimizes the sum. Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 200 0 <= grid[i][j] <= 100","solution":"def min_path_sum(grid): Finds the minimum sum path in a 2D grid from the top-left to bottom-right. Parameters: grid (List[List[int]]): 2D list of non-negative integers Returns: int: Minimum sum of the path if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) for i in range(1, n): grid[0][i] += grid[0][i - 1] for i in range(1, m): grid[i][0] += grid[i - 1][0] for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i - 1][j], grid[i][j - 1]) return grid[m - 1][n - 1]"},{"question":"Given an array of integers data, representing the daily stock prices of a company, your task is to find the best day to buy and the best day to sell to maximize profit. You cannot sell a stock before you buy it. If there is no opportunity to make a profit, return 0. You need to write a function that returns the maximum profit one can achieve. Input - data: a list of integers where each element represents the price of the stock on a given day. Length of data is between 1 and 10^5. Output - an integer representing the maximal profit possible, or 0 if no profit is possible. Example 1: Input: data = [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price=1) and sell on day 5 (price=6), profit = 6-1 = 5. Example 2: Input: data = [7,6,4,3,1] Output: 0 Explanation: In this case, there is no way to make a profit since prices are declining every day. Constraints: - 1 <= len(data) <= 10^5 - 0 <= data[i] <= 10^4","solution":"def max_profit(data): Returns the maximum profit one can achieve from buying and selling the stock. If no profit is possible, returns 0. if not data or len(data) < 2: return 0 min_price = data[0] max_profit = 0 for price in data[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Suppose you have an arithmetic expression given as a string. The expression contains only non-negative integers, the operators `+`, `-`, `*`, and `/`, and parentheses for grouping parts of the expression. Your task is to evaluate this expression and return the final result as an integer. The integer division should truncate toward zero. Write a function `evaluateExpression` that takes a string `s` representing the arithmetic expression and returns the result of the evaluation. Input Format A single string `s`, which is the arithmetic expression to be evaluated. The length of the string will not exceed 200 characters. Constraints - The given string `s` is a valid arithmetic expression. - The operators include `+`, `-`, `*`, and `/`. - The string can contain spaces. - The numbers in the expression are non-negative integers and will not exceed 2^{31}-1. - The integer division should truncate toward zero. Output Format Output the result of the evaluated expression as an integer. Sample Input \\"3 + (2 - 5) * 6 / 2\\" Sample Output -6 Explanation The evaluation process is as follows: 1. `\\"3 + (2 - 5) * 6 / 2\\"` 2. First, solve the parentheses: `\\"3 + (-3) * 6 / 2\\"` 3. Then, solve the multiplication and division: `\\"3 + (-18 / 2)\\"` 4. Finally, solve the addition: `3 + (-9) = -6` The function should return `-6`.","solution":"def evaluateExpression(s): def helper(tokens): stack = [] num = 0 sign = \\"+\\" while len(tokens) > 0: token = tokens.pop(0) if token.isdigit(): num = 10 * num + int(token) if token == \'(\': num = helper(tokens) if (not token.isdigit() and not token.isspace()) or len(tokens) == 0: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] *= num elif sign == \'/\': stack[-1] = int(stack[-1] / num) # Using int() to truncate toward zero sign = token num = 0 if token == \')\': break return sum(stack) tokens = list(s) return helper(tokens)"},{"question":"The king of a faraway land decided to hold a tournament where knights battle each other in pairs. Each pair of knights will go through a series of duels until one knight remains undefeated. The king needs help to sequence the duels and determine the final undefeated knight. Write a program to simulate the duels based on given inputs, ensuring that knights battle in the order specified and track the winner. ------Input:------ - The first line contains an integer N representing the number of knights. - The second line contains N integers, where each integer represents the strength of the corresponding knight. ------Output:------ For each duel, output the result in the format: \\"Knight X defeats Knight Y\\", where X and Y are the indices of the winning and losing knights respectively (indexing starts at 1). Finally, output the index of the undefeated knight. ------Constraints------ - 2 leq N leq 50 - Each strength will be a unique positive integer less than 1000. ------Sample Input:------ 4 10 20 15 30 ------Sample Output:------ Knight 2 defeats Knight 1 Knight 4 defeats Knight 3 Knight 4 defeats Knight 2 Knight 4 ------Explanation:------ Knights battle based on their order. The strongest knight always wins. Therefore, Knight 2 (20) defeats Knight 1 (10), Knight 4 (30) defeats Knight 3 (15), and finally, Knight 4 (30) defeats Knight 2 (20), leaving Knight 4 undefeated.","solution":"def simulate_duels(n, strengths): Simulates duels among knights based on their strengths and outputs the sequence of duels and the final undefeated knight. knights = list(range(1, n + 1)) # Create a list of knights indexed from 1 to n (inclusive) while len(knights) > 1: next_round = [] for i in range(0, len(knights), 2): if i + 1 < len(knights): # Compare the strength of current pair of knights if strengths[knights[i] - 1] > strengths[knights[i + 1] - 1]: print(f\\"Knight {knights[i]} defeats Knight {knights[i + 1]}\\") next_round.append(knights[i]) else: print(f\\"Knight {knights[i + 1]} defeats Knight {knights[i]}\\") next_round.append(knights[i + 1]) else: next_round.append(knights[i]) knights = next_round # Print the undefeated knight print(f\\"Knight {knights[0]}\\")"},{"question":"You are given an array of integers of length n, and you are required to perform a series of queries on this array. Each query can be one of two types: 1. \\"1 x y\\": Update the element at index x to y. 2. \\"2 x y\\": Find the sum of the elements from index x to index y (inclusive). Write a program to handle these queries efficiently. -----Input----- The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. The next q lines contain the description of the queries. Each query is given in one of the following formats: - \\"1 x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9) — meaning update the element at index x to y. - \\"2 x y\\" (1 ≤ x ≤ y ≤ n) — meaning find the sum of the elements from index x to index y (inclusive). -----Output----- For each query of type \\"2 x y\\", print the sum of the elements from index x to index y (inclusive) on a new line. -----Examples----- Input 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 2 2 5 1 5 6 Output 6 13 21 Explanation: Initial array: [1, 2, 3, 4, 5] Query 1: Sum from index 1 to 3 is 1 + 2 + 3 = 6 Query 2: Update element at index 3 to 10; array becomes [1, 2, 10, 4, 5] Query 3: Sum from index 1 to 3 is 1 + 2 + 10 = 13 Query 4: Sum from index 2 to 5 is 2 + 10 + 4 + 5 = 21 Query 5: Update element at index 5 to 6; array becomes [1, 2, 10, 4, 6]","solution":"class NumArray: def __init__(self, nums): self.n = len(nums) self.nums = nums self.bit = [0] * (self.n + 1) for i in range(self.n): self.add(i + 1, nums[i]) def add(self, index, value): while index <= self.n: self.bit[index] += value index += index & -index def sum(self, index): result = 0 while index > 0: result += self.bit[index] index -= index & -index return result def update(self, index, value): diff = value - self.nums[index - 1] self.nums[index - 1] = value self.add(index, diff) def range_sum(self, left, right): return self.sum(right) - self.sum(left - 1) def handle_queries(n, q, array, queries): num_array = NumArray(array) results = [] for query in queries: q_type, x, y = query if q_type == 1: num_array.update(x, y) elif q_type == 2: results.append(num_array.range_sum(x, y)) return results def solution(n, q, array, queries): return handle_queries(n, q, array, queries)"},{"question":"Problem Statement You are given two non-negative integers X and Y. Your task is to determine the maximum number of distinct integers that can be chosen such that the product of any two chosen integers is a multiple of neither X nor Y. # Input The input consists of two integers, X and Y (1 leq X, Y leq 10^6). # Output Output a single integer which is the maximum number of distinct integers that can be chosen. # Examples Input: ``` 2 3 ``` Output: ``` 1 ``` Input: ``` 6 10 ``` Output: ``` 4 ``` Input: ``` 4 9 ``` Output: ``` 4 ```","solution":"import math def max_distinct_numbers(X, Y): if math.gcd(X, Y) == 1: return 4 else: return 3"},{"question":"In order to get an annual bonus, an employee needs to meet or exceed their sales target. Given the employee\'s sales target and the actual sales achieved, determine if the employee will receive a bonus or not. If the employee meets or exceeds the sales target, output texttt{BONUS}, otherwise output texttt{NO BONUS}. ------ Input Format ------ The first line of input contains a single integer T, the sales target. The second line of input contains a single integer S, the actual sales achieved. ------ Output Format ------ Print texttt{BONUS} if the employee meets or exceeds the sales target. Otherwise, print texttt{NO BONUS}. You may print each character of the string in uppercase or lowercase (for example, the strings texttt{BoNuS}, texttt{bOnus}, texttt{bonus} and texttt{BONUS} will all be treated as identical). ------ Constraints ------ 0 ≤ T ≤ 2000 0 ≤ S ≤ 2000 ------ subtasks ------ Subtask 1 (100 points): Original constraints. ----- Sample Input 1 ------ 1500 1600 ----- Sample Output 1 ------ BONUS ----- explanation 1 ------ Since 1600 ≥ 1500, the employee will receive a bonus. ----- Sample Input 2 ------ 1500 1200 ----- Sample Output 2 ------ NO BONUS ----- explanation 2 ------ Since 1200 < 1500, the employee will not receive a bonus.","solution":"def check_bonus(sales_target, actual_sales): Given the sales target and actual sales achieved, determines if the employee will receive a bonus. Parameters: - sales_target (int): The sales target that needs to be achieved or exceeded. - actual_sales (int): The actual sales achieved by the employee. Returns: - str: \\"BONUS\\" if actual sales are greater than or equal to the sales target, otherwise \\"NO BONUS\\". if actual_sales >= sales_target: return \\"BONUS\\" else: return \\"NO BONUS\\""},{"question":"In a magical kingdom, there are N cities connected by M Magic Portals. Each Magic Portal connects two distinct cities and can be traversed in both directions. The Wizard Council has recently added or removed some portals, and they need your help in analyzing the current portal network. You are tasked with performing Q queries on the current portal network. Each query can be one of the following types: 1. `ADDED P A B`: A Magic Portal is added between city A and city B (1 ≤ A, B ≤ N). 2. `REMOVED P A B`: The Magic Portal between city A and city B is removed. 3. `CONNECTED P A B`: Determine if there is a path (possibly through other cities) from city A to city B. Initially, there are no portals between any cities. You should answer each `CONNECTED P A B` query with \\"YES\\" if there exists a path from city A to city B, and \\"NO\\" otherwise. ------ Input ------ The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N (number of cities) and Q (number of queries). The next Q lines describe the queries, following one of the three formats mentioned above. ------ Output ------ For each `CONNECTED P A B` query, print a single line containing \\"YES\\" or \\"NO\\" (without quotes). ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ A, B ≤ N ------ Example Input ------ 2 4 5 ADDED P 1 2 CONNECTED P 1 2 ADDED P 2 3 CONNECTED P 1 3 REMOVE P 1 2 1 3 ADDED P 1 4 ADDED P 2 3 CONNECTED P 1 3 ------ Example Output ------ YES YES NO","solution":"class DisjointSet: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def process_queries(n, queries): ds = DisjointSet(n) result = [] for query in queries: op, _, a, b = query.split() a, b = int(a) - 1, int(b) - 1 if op == \\"ADDED\\": ds.union(a, b) elif op == \\"REMOVED\\": # Realistically, removing an edge in the union-find structure is complex and isn\'t handled here. # It requires more advanced data structures like dynamic connectivity. pass elif op == \\"CONNECTED\\": if ds.find(a) == ds.find(b): result.append(\\"YES\\") else: result.append(\\"NO\\") return result def solve(): import sys input = sys.stdin.read data = input().splitlines() idx = 0 T = int(data[idx]) idx += 1 results = [] for _ in range(T): N, Q = map(int, data[idx].split()) idx += 1 queries = data[idx:idx + Q] idx += Q results.extend(process_queries(N, queries)) for res in results: print(res)"},{"question":"Write a function that takes a positive integer `n` and returns a list of all prime numbers less than or equal to `n`. Input - A single positive integer `n`. Output - A list of prime numbers less than or equal to `n`, in ascending order. Example Input ``` 10 ``` Output ``` [2, 3, 5, 7] ```","solution":"def get_primes(n): Return a list of all prime numbers less than or equal to n. Args: n (int): A positive integer Returns: List[int]: A list of prime numbers less than or equal to n. if n < 2: return [] sieve = [True] * (n + 1) # Create a boolean array \\"sieve[0..n]\\" and initialize all entries it as true. sieve[0], sieve[1] = False, False # 0 and 1 are not prime numbers. p = 2 while (p * p <= n): if (sieve[p] == True): for i in range(p * p, n + 1, p): sieve[i] = False p += 1 return [p for p in range(n + 1) if sieve[p]]"},{"question":"Write a function ```group_elements(lst, n)``` that takes in a list `lst` and an integer `n`, and returns a list of lists where each sublist contains `n` elements from the original list, except the final sublist which may contain fewer elements if there are not enough remaining items. Example 1: ```python lst = [1, 2, 3, 4, 5, 6, 7, 8, 9] n = 3 group_elements(lst, n) # returns [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ``` Example 2: ```python lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] n = 4 group_elements(lst, n) # returns [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]] ``` Example 3: ```python lst = [1, 2, 3] n = 5 group_elements(lst, n) # returns [[1, 2, 3]] ```","solution":"def group_elements(lst, n): Groups elements in the list \'lst\' into sublists of \'n\' elements each. The final sublist may contain fewer than \'n\' elements if there are not enough remaining elements. return [lst[i:i + n] for i in range(0, len(lst), n)]"},{"question":"You are given a string representing a mathematical expression containing only non-negative integers and the operators `+`, `-`, and `*`. Your task is to evaluate the expression and print the result. The expression is guaranteed to be valid, i.e., no space characters, no division by zero, etc., and follows standard operator precedence (multiplication has higher precedence than addition and subtraction). -----Input----- The input consists of a single string representing the mathematical expression. The length of the string does not exceed 1000 characters. -----Output----- Print a single integer which is the result of evaluating the expression. -----Examples----- Input \\"3+5*2-6\\" Output 7 Input \\"10*2-5*3+4\\" Output 9 Input \\"1+2*10-3+4*5\\" Output 30 -----Note----- In the first example, the expression evaluates to 3 + (5 * 2) - 6 -> 3 + 10 - 6 -> 7. In the second example, the expression evaluates to (10 * 2) - (5 * 3) + 4 -> 20 - 15 + 4 -> 9. In the third example, the expression evaluates to 1 + (2 * 10) - 3 + (4 * 5) -> 1 + 20 - 3 + 20 -> 38.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers and the operators +, -, and *. def apply_op(operators, values): right = values.pop() left = values.pop() op = operators.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) i = 0 values = [] operators = [] while i < len(expression): if expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = val * 10 + int(expression[i]) i += 1 values.append(val) i -= 1 else: if expression[i] == \'*\': while (operators and operators[-1] == \'*\'): apply_op(operators, values) operators.append(expression[i]) elif expression[i] in (\'+\', \'-\'): while (operators and operators[-1] in (\'+\', \'-\', \'*\')): apply_op(operators, values) operators.append(expression[i]) i += 1 while operators: apply_op(operators, values) return values[0]"},{"question":"Fibonacci Sequence Position Finder You are given a number N which represents a position in the Fibonacci sequence. Your task is to find the Fibonacci number at position N . Note: The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n geq 2 input Input is given from standard input in the following format: N output Output the Fibonacci number at position N in one line. Insert a line break at the end. Constraint * 0 leq N leq 20 * Input is an integer. Input example 1 5 Output example 1 5 Input example 2 10 Output example 2 55 Example Input 5 Output 5","solution":"def fibonacci(N): Returns the Fibonacci number at position N. if N == 0: return 0 elif N == 1: return 1 a, b = 0, 1 for i in range(2, N+1): a, b = b, a + b return b"},{"question":"Daisy is a gardener who loves arranging flowers in a special way. She has N flowers, each characterized by a color code ci and a beauty value bi. Daisy wants to arrange her flowers in a single line such that they form a sequence of flower groups where each group consists of flowers with the same color. Additionally, each group of flowers (consisting of the same color) should be as beautiful as possible. For each group of flowers with the same color, the total beauty of the group is the sum of the beauty values of those flowers. Daisy wants you to help her find the order of the groups such that the overall arrangement has the maximum total beauty. Input format: The first line contains an integer N. Each of the following N lines contains two space-separated integers ci and bi. Output format: Output a single integer, the maximum total beauty of the arranged flowers. Constraints: 1 ≤ N ≤ 10^5 0 ≤ ci ≤ 10^9 0 ≤ bi ≤ 10^9 SAMPLE INPUT 5 1 4 2 3 1 2 3 5 2 1 SAMPLE OUTPUT 15","solution":"def max_total_beauty(N, flowers): Returns the maximum total beauty of the arranged flowers. Parameters: N (int): The number of flowers. flowers (list of tuples): Each tuple contains (ci, bi) representing color code and beauty value of a flower. Returns: int: The maximum total beauty. from collections import defaultdict beauty_sum = defaultdict(int) # Dictionary to store sum of beauty values for each color for color, beauty in flowers: beauty_sum[color] += beauty # The maximum total beauty is simply the sum of all beauty values regardless of color order total_beauty = sum(beauty_sum.values()) return total_beauty # Sample usage N = 5 flowers = [(1, 4), (2, 3), (1, 2), (3, 5), (2, 1)] print(max_total_beauty(N, flowers)) # Should print 15"},{"question":"**Task** You are given a list of strings (`words`). Your task is to find the longest word in the list that can be constructed by concatenating other words (in any order) from the list. Each word in the list can be used more than once. If there is a tie, return any one of them. If no such word exists, return an empty string. **Function Signature** ```python def longest_concatenated_word(words: List[str]) -> str: ``` **Input** - A list of strings `words` with length `n` (1 ≤ n ≤ 10,000). Each string consists of lowercase alphabetic characters and its length doesn\'t exceed 30 characters. **Output** - Return a string representing the longest concatenated word. If multiple words qualify, return any one. If no such word exists, return an empty string. **Examples** ```python assert longest_concatenated_word([\\"cat\\", \\"dog\\", \\"catdog\\"]) == \\"catdog\\" ``` # Example 1 Input ```python words = [\\"cat\\", \\"dog\\", \\"mouse\\", \\"catdog\\", \\"housecat\\"] print(longest_concatenated_word(words)) ``` Output ```python \\"catdog\\" ``` or ```python \\"housecat\\" ``` # Example 2 Input ```python words = [\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"] print(longest_concatenated_word(words)) ``` Output ```python \\"pineapple\\" ``` # Example 3 Input ```python words = [\\"helloworld\\", \\"hello\\", \\"world\\", \\"hi\\"] print(longest_concatenated_word(words)) ``` Output ```python \\"helloworld\\" ``` # Example 4 Input ```python words = [\\"a\\", \\"b\\", \\"ab\\", \\"abc\\"] print(longest_concatenated_word(words)) ``` Output ```python \\"ab\\" ``` **Hints** - Think about how you can use a dictionary to store the words and quickly check if parts of a word exist within it. - Consider sorting the list based on the length of the words for easier processing.","solution":"def longest_concatenated_word(words): word_set = set(words) max_word = \\"\\" def can_form(word): if word in memo: return memo[word] for i in range(1, len(word)): prefix, suffix = word[:i], word[i:] if prefix in word_set and (suffix in word_set or can_form(suffix)): memo[word] = True return True memo[word] = False return False memo = {} for word in words: if can_form(word): if len(word) > len(max_word): max_word = word return max_word"},{"question":"# itertools.permutations() This tool returns successive r length permutations of elements in an iterable. If r is not specified or is None, then r defaults to the length of the iterable, and all possible full-length permutations are generated. Permutations are emitted in lexicographic sorted order. So, if the input iterable is sorted, the permutation tuples will be produced in sorted order. Sample Code ```python >>> from itertools import permutations >>> >>> print(list(permutations([\'A\', \'B\', \'C\']))) [(\'A\', \'B\', \'C\'), (\'A\', \'C\', \'B\'), (\'B\', \'A\', \'C\'), (\'B\', \'C\', \'A\'), (\'C\', \'A\', \'B\'), (\'C\', \'B\', \'A\')] >>> print(list(permutations([\'A\', \'B\', \'C\'], 2))) [(\'A\', \'B\'), (\'A\', \'C\'), (\'B\', \'A\'), (\'B\', \'C\'), (\'C\', \'A\'), (\'C\', \'B\')] >>> print(list(permutations(\'123\', 2))) [(\'1\', \'2\'), (\'1\', \'3\'), (\'2\', \'1\'), (\'2\', \'3\'), (\'3\', \'1\'), (\'3\', \'2\')] ``` # Task You are given a list of unique characters. Your task is to compute all possible permutations of length `r` from the list. # Example A = [\'A\', \'B\', \'C\'] r = 2 Possible permutations: ``` (\'A\', \'B\') (\'A\', \'C\') (\'B\', \'A\') (\'B\', \'C\') (\'C\', \'A\') (\'C\', \'B\') ``` # Input Format The first line contains space-separated characters of list `A`. The second line contains the integer `r`. # Constraints - 1 leq |A| leq 10 - 1 leq r leq |A| # Output Format Output the space-separated tuples of the permutations. # Sample Input ``` A B C 2 ``` # Sample Output ``` (\'A\', \'B\') (\'A\', \'C\') (\'B\', \'A\') (\'B\', \'C\') (\'C\', \'A\') (\'C\', \'B\') ```","solution":"from itertools import permutations def generate_permutations(A, r): Generates all r-length permutations of the list A. Parameters: A (list): List of characters. r (int): Length of the permutations. Returns: list: List of r-length permutations. return list(permutations(A, r))"},{"question":"Create a function that identifies the smallest set of coins and bills needed to make a given amount of money. The function should accept two parameters: the target amount of money and a list of available denominations. It should return a dictionary with the count of each denomination used to make up the target amount. The available denominations can vary and are not limited to typical coins and bills. You can assume the denominations list is sorted in ascending order, and each denomination is a positive integer. For example: ```python get_change(97, [1, 5, 10, 25, 50]) # returns {25: 3, 10: 2, 1: 2} get_change(365, [1, 5, 10, 20, 50, 100]) # returns {100: 3, 50: 1, 10: 1, 5: 1} ``` If it is impossible to make the exact target amount with the given denominations, return an empty dictionary. Constraints: - The target amount will be a non-negative integer. - Elements in the denominations list are distinct positive integers. - Your solution should be efficient, aiming for O(n) or O(n log n) time complexity.","solution":"def get_change(amount, denominations): Finds the smallest set of coins and bills needed to make a given amount of money using the provided denominations. Assumes denominations are sorted in ascending order. Returns a dictionary with the count of each denomination used. denomination_count = {} for den in reversed(denominations): if amount == 0: break count = amount // den if count > 0: denomination_count[den] = count amount -= count * den if amount != 0: return {} return denomination_count"},{"question":"Are you familiar with video streaming platforms like Netflix? Imagine you are working on optimising the video streaming quality. You need to ensure that the buffer has a certain minimum length of continuous data blocks for smooth streaming. Consider an array where each element denotes the length of a data block available for buffering. Your task is to identify the maximum length of the continuous subarray (sequence of elements) that has a sum greater than or equal to a given threshold value. If no such subarray exists, return 0. For example, if the data blocks are [1, 2, 3, 4] and the threshold value is 7, the subarrays that meet or exceed the threshold are [3, 4] and [1, 2, 3, 4]. Among these, the longest subarray is [1, 2, 3, 4], which has a length of 4. -----Input----- The first line contains one integer n, denoting the number of data blocks. The second line contains n integers, denoting the length of each data block. The third line contains one integer, denoting the threshold value. -----Output----- The first line should contain one integer, denoting the maximum length of the continuous subarray with sum greater than or equal to the threshold value. If no such subarray exists, return 0. -----Constraints----- 1 ≤ n ≤ 100 000; 1 ≤ data block length ≤ 1000; 1 ≤ threshold value ≤ 100 000. -----Examples----- Input: 5 2 1 5 6 2 7 Output: 3 Input: 3 1 1 1 5 Output: 0","solution":"def max_length_subarray(data_blocks, threshold): Finds the maximum length of a continuous subarray with sum greater than or equal to the threshold. If no such subarray exists, return 0. :param data_blocks: List of integers representing lengths of data blocks. :param threshold: Integer representing the threshold value. :return: Integer representing the maximum length of the continuous subarray. n = len(data_blocks) max_len = 0 current_sum = 0 start = 0 for end in range(n): current_sum += data_blocks[end] while current_sum >= threshold: max_len = max(max_len, end - start + 1) current_sum -= data_blocks[start] start += 1 return max_len"},{"question":"Task: You need to write a function **rectangle_sums** that generates a matrix of integers and returns the sum of the elements in the specified rectangular area within the matrix. # Description: You are given a matrix of non-negative integers and an array of queries. Each query in the array represents the coordinates of the top-left and bottom-right corners of a rectangular sub-matrix, and your function should return the sum of the elements in that sub-matrix. # Function Signature: ```python def rectangle_sums(matrix: List[List[int]], queries: List[Tuple[int, int, int, int]]) -> List[int]: pass ``` # Input: - **matrix**: A 2D list of integers where `matrix[i][j]` represents the element at row `i` and column `j`. (1 ≤ len(matrix) ≤ 1000, 1 ≤ len(matrix[0]) ≤ 1000, 0 ≤ matrix[i][j] ≤ 100). - **queries**: A list of tuples, where each tuple contains four integers `(r1, c1, r2, c2)` representing the top-left and bottom-right corners of the rectangular sub-matrix (0 ≤ r1 ≤ r2 < len(matrix), 0 ≤ c1 ≤ c2 < len(matrix[0])). # Output: - The function should return a list of integers, where each integer is the sum of the elements in the sub-matrix specified by the corresponding query. # Example: ```python # Example 1: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] queries = [ (0, 0, 1, 1), (1, 1, 2, 2) ] # Output: [12, 28] # Explanation: # Query 1: Sum of elements in the sub-matrix from (0, 0) to (1, 1) => 1 + 2 + 4 + 5 = 12 # Query 2: Sum of elements in the sub-matrix from (1, 1) to (2, 2) => 5 + 6 + 8 + 9 = 28 # Example 2: matrix = [ [0, 1, 2], [3, 4, 5], [6, 7, 8] ] queries = [ (0, 0, 2, 2), (1, 1, 1, 1) ] # Output: [36, 4] # Explanation: # Query 1: Sum of elements in the sub-matrix from (0, 0) to (2, 2) => 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 36 # Query 2: Sum of elements in the sub-matrix from (1, 1) to (1, 1) => 4 # Note: Ensure your function is optimized for large input sizes. ```","solution":"from typing import List, Tuple def rectangle_sums(matrix: List[List[int]], queries: List[Tuple[int, int, int, int]]) -> List[int]: if not matrix or not matrix[0]: return [] rows, cols = len(matrix), len(matrix[0]) # Compute the prefix sum matrix prefix_sum = [[0] * (cols + 1) for _ in range(rows + 1)] for r in range(1, rows + 1): for c in range(1, cols + 1): prefix_sum[r][c] = matrix[r - 1][c - 1] + prefix_sum[r - 1][c] + prefix_sum[r][c - 1] - prefix_sum[r - 1][c - 1] result = [] for r1, c1, r2, c2 in queries: r1, c1, r2, c2 = r1 + 1, c1 + 1, r2 + 1, c2 + 1 # Convert to 1-based indexing submatrix_sum = (prefix_sum[r2][c2] - prefix_sum[r1 - 1][c2] - prefix_sum[r2][c1 - 1] + prefix_sum[r1 - 1][c1 - 1]) result.append(submatrix_sum) return result"},{"question":"A village is celebrating a festival and they are organizing several events. Each event has a starting time and an ending time. People want to attend as many events as possible without any overlaps. You are given a list of events with their start and end times. Your task is to help the villagers maximize the number of events they can attend by selecting the optimal set of non-overlapping events. ------ Input ------ The first line of the input contains an integer N — the number of events. Each of the next N lines contains two integers, start and end, representing the starting and ending times of an event. All provided times are integers. ------ Output ------ Output the maximum number of non-overlapping events that can be attended by one person. ------ Constraints ------ 1 ≤ N ≤ 10^5 0 ≤ start < end ≤ 10^9 ------ Example ------ Input: 5 1 3 2 4 3 5 6 8 7 9 Output: 3","solution":"def maximize_events(events): Returns the maximum number of non-overlapping events that can be attended. Parameters: events (list of tuples): A list of events, each represented as a tuple (start, end). Returns: int: The maximum number of non-overlapping events. # Sort events based on their end times events.sort(key=lambda x: x[1]) max_events = 0 current_end_time = 0 for start, end in events: if start >= current_end_time: max_events += 1 current_end_time = end return max_events def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) events = [] index = 1 for i in range(N): start = int(data[index]) end = int(data[index+1]) events.append((start, end)) index += 2 print(maximize_events(events))"},{"question":"You are given a matrix of size N x N where each cell contains an integer weight. You are required to find the minimum weight path sum from the top-left cell to the bottom-right cell of the matrix. You can only move right or down from a cell. Input: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the size of the matrix. - The next N lines each contain N integers representing the matrix. Output: - For each test case, output the minimum weight path sum. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - -10^9 ≤ matrix[i][j] ≤ 10^9 Example: Input: 2 2 1 2 3 4 3 1 2 3 4 5 6 7 8 9 Output: 7 21 Explanation: For the first test case, the minimum weight path is 1 → 2 → 4. For the second test case, the minimum weight path is 1 → 2 → 3 → 6 → 9.","solution":"def min_path_sum(matrix): Returns the minimum path sum from the top-left cell to the bottom-right cell of the matrix. You can only move right or down from a cell. n = len(matrix) dp = [[0]*n for _ in range(n)] dp[0][0] = matrix[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] dp[0][i] = dp[0][i-1] + matrix[0][i] for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[-1][-1] def solve_min_path_sum(test_cases): results = [] for matrix in test_cases: results.append(min_path_sum(matrix)) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(lines[idx]) matrix = [] idx += 1 for _ in range(N): matrix.append(list(map(int, lines[idx].split()))) idx += 1 test_cases.append(matrix) return test_cases def min_path_sum_driver(input_str): test_cases = parse_input(input_str) results = solve_min_path_sum(test_cases) return \\"n\\".join(map(str, results))"},{"question":"Alice is planning a garden with n flowerbeds arranged in a straight line. Each flowerbed can optionally have flowers planted in it, and each flowerbed can be one of k different types. Alice has a list of preferences which indicate how many flowerbeds of each type she wants adjacent to each other. Given these preferences, Alice needs to know the maximum number of flowerbeds she can plant while satisfying all her preferences. A preference is defined by a type of flower and a number that indicates how many adjacent flowerbeds of that type Alice wants. For example, if Alice\'s preference is that she wants 3 adjacent \'roses\', she would like at least one sequence of 3 consecutive flowerbeds containing \'roses\'. Your task is to determine if it is possible to plant flowers in all of Alice\'s n flowerbeds while satisfying her preferences. If it is possible, output \\"YES\\", otherwise output \\"NO\\". -----Input----- The first line contains three integers n (1 leq n leq 1000), k (1 leq k leq 100), and m (1 leq m leq 100) — the number of flowerbeds, the number of different types of flowers, and the number of preferences Alice has, respectively. Each of the next m lines contains a string t (a flower type) and an integer c (1 leq c leq 1000) — a preference indicating that Alice wants exactly c adjacent flowerbeds of type t. The string t will be one of the k different flower types. -----Output----- Output a single line containing \\"YES\\" if it is possible to plant flowers in all of Alice\'s n flowerbeds while satisfying her preferences. Otherwise, output \\"NO\\". -----Examples----- Input 10 2 2 roses 3 lilies 2 Output YES Input 5 3 2 tulips 6 daisies 3 Output NO -----Note----- In the first example, it is possible to plant the flowers as: [roses, roses, roses, lilies, lilies, ..., ...]. In the second example, it is impossible to have 6 adjacent tulips since there are only 5 flowerbeds. Therefore, the output is \\"NO\\".","solution":"def can_plant_flowers(n, k, m, preferences): Returns \\"YES\\" if it is possible to plant flowers in all of Alice\'s n flowerbeds while satisfying her preferences, otherwise return \\"NO\\". for flower_type, count in preferences: if count > n: return \\"NO\\" return \\"YES\\""},{"question":"You are given a string `s` of length `n`. You need to perform `q` queries on this string. Each query consists of two integers `l` and `r` (1 ≤ l ≤ r ≤ n), representing a substring from index `l` to `r` (1-based indexing). Your task for each query is to find the length of the longest substring within this range that contains all unique characters. As the length of the string and the number of queries can be large, you need to optimize your solution for efficiency. Input: - The first line contains the string `s` of lowercase English letters (1 ≤ |s| ≤ 100,000). - The second line contains an integer `q` (1 ≤ q ≤ 100,000), the number of queries. - The next `q` lines each contain two integers `l` and `r`. Output: - For each query, print a single integer representing the length of the longest substring with all unique characters within the range `[l, r]`. Example Input: ``` abcdea 3 1 5 2 4 1 6 ``` Example Output: ``` 5 3 5 ``` Explanation: For the first query, the substring is \\"abcde\\", which itself is the longest substring with all unique characters, so the answer is 5. For the second query, the substring is \\"bcd\\", which itself is the longest substring with all unique characters, so the answer is 3. For the third query, the substring is \\"abcdea\\". The longest substring with all unique characters within this range is \\"abcde\\", so the answer is 5.","solution":"def length_of_longest_substring_with_unique_chars(s, l, r): Returns the length of the longest substring within s[l-1:r] containing all unique characters. substring = s[l-1:r] used_char_map = {} max_len = 0 start = 0 for i in range(len(substring)): if substring[i] in used_char_map and used_char_map[substring[i]] >= start: start = used_char_map[substring[i]] + 1 used_char_map[substring[i]] = i max_len = max(max_len, i - start + 1) return max_len def process_queries(s, queries): results = [] for l, r in queries: results.append(length_of_longest_substring_with_unique_chars(s, l, r)) return results"},{"question":"A company wants to manage its employees using a hierarchical structure. Each employee is identified by a unique employee ID. An employee can have multiple subordinates but only one direct supervisor. The CEO of the company does not have any supervisor and is at the root of the hierarchy tree. Each employee can belong to multiple departments and each department is represented by a unique string ID. Your task is to write a program that receives the hierarchical structure of the employees in a company along with their department memberships and outputs the hierarchy information and department memberships for each employee. The structure is such that each employee record will include: - Employee ID - ID of the supervisor (if any) - A list of the department IDs the employee belongs to Constraints: - 1 ≤ n ≤ 100000 (n is the number of employees) - 1 ≤ m ≤ 100 (m is the number of departments to which an employee can belong) Input: The first line contains an integer n, the number of employees in the company. The next n lines describe the employee records where each line contains: id p d k d1 d2 ... dk where: - id is the employee ID - p is the supervisor ID (use -1 if the employee does not have a supervisor) - d is the number of departments the employee belongs to - d1, d2, ..., dk are the department IDs Output: For each employee, print the following details sorted by the employee ID: employee id: supervisor = s, departments = [d1, d2, ..., dk], subordinates = [s1, s2, ..., sm] - s is the supervisor ID (use -1 if the employee does not have a supervisor) - [d1, d2, ..., dk] is the list of department IDs - [s1, s2, ..., sm] is the list of subordinate IDs Examples: Input 5 0 -1 2 HR Finance 1 0 1 IT 2 0 1 HR 3 1 2 IT Marketing 4 1 1 Finance Output employee 0: supervisor = -1, departments = [HR, Finance], subordinates = [1, 2] employee 1: supervisor = 0, departments = [IT], subordinates = [3, 4] employee 2: supervisor = 0, departments = [HR], subordinates = [] employee 3: supervisor = 1, departments = [IT, Marketing], subordinates = [] employee 4: supervisor = 1, departments = [Finance], subordinates = [] Input 4 3 -1 1 Sales 0 3 2 Sales Marketing 1 3 1 HR 2 0 1 IT Output employee 0: supervisor = 3, departments = [Sales, Marketing], subordinates = [2] employee 1: supervisor = 3, departments = [HR], subordinates = [] employee 2: supervisor = 0, departments = [IT], subordinates = [] employee 3: supervisor = -1, departments = [Sales], subordinates = [0, 1]","solution":"def manage_employees(n, records): from collections import defaultdict # Dictionary to store employee data employee_data = {} subordinates = defaultdict(list) for record in records: parts = record.split() emp_id = int(parts[0]) supervisor_id = int(parts[1]) num_departments = int(parts[2]) departments = parts[3:3+num_departments] # Storing employee information employee_data[emp_id] = { \\"supervisor\\": supervisor_id, \\"departments\\": departments, \\"subordinates\\": [] } # Adding subordinates to supervisors if supervisor_id != -1: subordinates[supervisor_id].append(emp_id) # Adding subordinates information to employee data for emp_id in subordinates: employee_data[emp_id][\\"subordinates\\"] = sorted(subordinates[emp_id]) # Prepare the result in sorted order of employee IDs result = [] for emp_id in sorted(employee_data): data = employee_data[emp_id] result.append( f\'employee {emp_id}: supervisor = {data[\\"supervisor\\"]}, \' f\'departments = {data[\\"departments\\"]}, \' f\'subordinates = {data[\\"subordinates\\"]}\' ) return result"},{"question":"Given a string s and a list of queries, each query being a substring of s, you have to determine how many times each query appears in the string s as a substring. A substring can appear multiple times, and the occurrences can overlap. For example, in the string \\"ababa\\", the substring \\"aba\\" appears twice (from positions 1 to 3 and from positions 3 to 5). Input The first line contains a non-empty string s (1 ≤ |s| ≤ 106) which consists of lowercase English letters. The second line contains a single integer q (1 ≤ q ≤ 105), representing the number of queries. Each of the next q lines contains a non-empty string queryi (1 ≤ |queryi| ≤ |s|) which consists of lowercase English letters. Output Print q integers — the i-th integer must equal the number of times queryi appears in s as a substring. Example Input ababa 3 aba ab ba Output 2 2 2 Input banana 2 ana na Output 2 2","solution":"def count_substrings(s, queries): Returns a list of integers where each integer is the number of times the corresponding query appears in the string s as a substring. results = [] for query in queries: count = 0 pos = s.find(query) while pos != -1: count += 1 pos = s.find(query, pos + 1) results.append(count) return results"},{"question":"You are given an \\"N x M\\" grid where each cell contains a non-negative integer representing the cost to step on that cell. You are required to find the minimum cost path from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1) of the grid. You can only move either down or right at any point in time. Write a program that takes the grid dimensions and grid content as input and computes the minimum cost to traverse from the top-left to the bottom-right. -----Input format----- - The first line contains two positive integers N and M, separated by a space, representing the number of rows and columns in the grid. - This is followed by N lines, each containing M non-negative integers separated by spaces, representing the cost of stepping on each cell in the grid. -----Output format----- - A single integer in a single line giving the minimum cost to traverse from the top-left to the bottom-right of the grid. -----Test data----- - You may assume that all integers in the input are in the range 0 to 100 inclusive. Subtask 1 (40 marks): 1 ≤ N, M ≤ 100 Subtask 2 (60 marks): 1 ≤ N, M ≤ 1000 -----Sample Input----- 3 3 1 3 1 1 5 1 4 2 1 -----Sample Output----- 7","solution":"def min_cost_path(grid): Returns the minimum cost to traverse from the top-left to the bottom-right of the grid. N = len(grid) M = len(grid[0]) # Initialize the costs matrix with the same dimensions as grid cost = [[0]*M for _ in range(N)] # Base case: starting point is the same as grid[0][0] cost[0][0] = grid[0][0] # Initialize the first row and first column for i in range(1, N): cost[i][0] = cost[i-1][0] + grid[i][0] for j in range(1, M): cost[0][j] = cost[0][j-1] + grid[0][j] # Fill in the rest of the cost matrix for i in range(1, N): for j in range(1, M): cost[i][j] = min(cost[i-1][j], cost[i][j-1]) + grid[i][j] return cost[N-1][M-1] def parse_input(input_string): Parses the input string and returns the grid as a list of lists. lines = input_string.strip().split(\'n\') N, M = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return grid"},{"question":"You are working on a logistics system for a warehouse. The warehouse has a set of shelves arranged in a line, and each shelf has a certain capacity that can hold a limited number of boxes. Boxes have different weights, and your task is to place the boxes on the shelves such that the capacity of each shelf is not exceeded. Additionally, you want to minimize the number of shelves used. Given an array of integers where each integer represents the weight of a box and an integer representing the capacity of each shelf, determine the minimum number of shelves needed to store all the boxes without exceeding the capacity of any shelf. You have to write a function to solve this problem: **Function signature:** ```python def min_shelves(boxes: List[int], capacity: int) -> int: ``` **Input:** - `boxes`: a list of integers where each integer represents the weight of a box. (1 leq text{len(boxes)} leq 10^5) - `capacity`: an integer representing the capacity of each shelf. (1 leq text{capacity} leq 10^9) **Output:** - An integer representing the minimum number of shelves needed. **Example:** Input: ```text boxes = [4, 8, 1, 4, 2, 1] capacity = 10 ``` Output: ```text 3 ``` **Explanation:** One way to arrange the boxes is: - Shelf 1: [4, 4] (Total weight = 8, which is <= 10) - Shelf 2: [8] (Total weight = 8, which is <= 10) - Shelf 3: [1, 2, 1] (Total weight = 4, which is <= 10) There is no way to use fewer than 3 shelves. Another possible way: - Shelf 1: [8, 1] (Total weight = 9, which is <= 10) - Shelf 2: [4, 4] (Total weight = 8, which is <= 10) - Shelf 3: [2, 1] (Total weight = 3, which is <= 10) Again, using 3 shelves.","solution":"def min_shelves(boxes, capacity): Function to determine the minimum number of shelves needed to store all the boxes without exceeding the capacity of any shelf. Args: boxes : List[int] - a list of integers representing the weight of each box. capacity : int - an integer representing the capacity of each shelf. Returns: int - the minimum number of shelves needed. shelves = 0 current_capacity = capacity for box in sorted(boxes, reverse=True): if box <= current_capacity: current_capacity -= box else: shelves += 1 current_capacity = capacity - box if current_capacity < capacity: shelves += 1 return shelves"},{"question":"You are given a grid with dimensions `N x N` filled with integer numbers. Your task is to find the maximum sum of any contiguous sub-grid within this grid. ------ Input ------ The first line of the input contains a single integer `T`, denoting the number of test cases. The description of `T` test cases follows. For each test case: - The first line contains an integer `N` indicating the dimensions of the grid. - The next `N` lines each contain `N` integers representing the grid. ------ Output ------ For each test case, print a single line containing the maximum sum of any contiguous sub-grid. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 50 -1000 ≤ text{grid}[i][j] ≤ 1000 ------ Subtasks ------ Subtask #1 (30 points): 1 ≤ N ≤ 10 Subtask #2 (70 points): 1 ≤ N ≤ 50 ----- Sample Input 1 ------ 1 3 1 -2 0 -3 4 2 1 -1 -2 ----- Sample Output 1 ------ 6 ----- Explanation 1 ------ Example case 1: The contiguous sub-grid with the maximum sum is: 4 2 -1 -2 which sums to 6.","solution":"def maximum_sum_subgrid(grid): def max_kadane(nums): max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global N = len(grid) max_sum = float(\'-inf\') for left in range(N): temp = [0] * N for right in range(left, N): for i in range(N): temp[i] += grid[i][right] current_max = max_kadane(temp) if current_max > max_sum: max_sum = current_max return max_sum def max_sum_subgrid(T, test_cases): results = [] for i in range(T): N, grid = test_cases[i] results.append(maximum_sum_subgrid(grid)) return results"},{"question":"Given an array of n integers, your task is to find all pairs of elements that sum to a given target value, k. Each pair should be listed in ascending order with the smaller integer first. If there are multiple pairs that sum up to the same target value, list them in lexicographical order. You can assume the array contains unique integers and that a valid solution always exists. Input The first line of the input contains a single integer n (2 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n space-separated integers ai (1 ≤ ai ≤ 10^9), denoting the elements of the array. The third line contains a single integer k (1 ≤ k ≤ 10^9), the target sum. Output Print each pair of elements that sum up to k, in ascending order. Each output pair should be formatted as \\"ai bj\\" where ai is the smaller element and bj is the larger element of the pair. Print each pair on a new line. Example Input 5 1 2 3 4 5 5 Output 1 4 2 3 Input 6 2 4 6 8 10 12 16 Output 4 12 6 10","solution":"def find_pairs_with_sum(n, arr, k): Returns all pairs of elements from the array that sum to the given target value k. Each pair is returned in ascending order and all pairs are listed in lexicographical order. pairs = [] s = set(arr) for num in arr: complement = k - num if complement in s and complement > num: pairs.append((num, complement)) pairs.sort() for pair in pairs: print(f\\"{pair[0]} {pair[1]}\\") # Example usage: # find_pairs_with_sum(5, [1, 2, 3, 4, 5], 5)"},{"question":"Given a string `S` of length `N` containing only characters \\"R\\" and \\"W\\", representing \\"Red\\" and \\"White\\" balls respectively, you need to group the balls following these conditions: 1. All red balls (\\"R\\") should come before all white balls (\\"W\\") in the resulting string. 2. The relative order of the red balls and white balls should be preserved as in the initial string. For example, if the input string is \\"WRRWW\\", the output should be \\"RRWWW\\". -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line of each test case contains a string S of length N. -----Output----- For each test case, print a single line containing the rearranged string according to the given conditions. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - S consists of only the characters \'R\' and \'W\'. -----Example Input----- 3 5 WRRWW 4 RRWW 7 RWRWRRW -----Example Output----- RRWWW RRWW RRRRWWW -----Explanation----- Example case 1: All the red balls come before the white balls, preserving the relative order of both colors. Example case 2: The order is already satisfying the conditions. Example case 3: All red balls are moved to the beginning, followed by all white balls, preserving the relative order.","solution":"def rearrange_balls(test_cases): results = [] for N, S in test_cases: reds = [char for char in S if char == \'R\'] whites = [char for char in S if char == \'W\'] results.append(\'\'.join(reds + whites)) return results def parse_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) S = input_lines[index + 1] test_cases.append((N, S)) index += 2 return test_cases"},{"question":"Given a string, determine the minimum number of changes required to make it a palindrome. A change is defined as modifying a single character into any other character. Input Format The first line contains a single string s. Constraints 1 leq |s| leq 10^5 Output Format Print a single integer denoting the minimum number of changes required to make the string a palindrome. Sample Input 0 abca Sample Output 0 1 Explanation 0 In the input string \\"abca\\", changing the last character \'a\' to \'b\' results in the palindrome \\"abba\\". Thus, the minimum number of changes required is 1. Sample Input 1 racecar Sample Output 1 0 Explanation 1 The input string \\"racecar\\" is already a palindrome. Thus, the minimum number of changes required is 0.","solution":"def min_changes_to_palindrome(s): Determines the minimum number of changes required to make the string a palindrome. Args: s (str): The input string. Returns: int: The minimum number of changes required. n = len(s) changes = 0 # Compare characters from both ends of the string moving towards the center for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes"},{"question":"Given a string `s` and a list of queries where each query contains a pair of indices `(i, j)`, find the number of unique characters in the substring `s[i...j]`. For each query, return the count of different characters present in the substring specified. Example s = \\"abacaba\\" queries = [(0, 3), (1, 4), (2, 6)] i j 0 3 1 4 2 6 For the given queries, the substrings are: - s[0...3] = \\"abac\\", which has 3 unique characters (\\"a\\", \\"b\\", \\"c\\"). - s[1...4] = \\"baca\\", which has 3 unique characters (\\"b\\", \\"a\\", \\"c\\"). - s[2...6] = \\"acaba\\", which has 3 unique characters (\\"a\\", \\"c\\", \\"b\\"). So, the output will be [3, 3, 3]. Function Description Complete the function `uniqueCharacterCount` in the editor below. `uniqueCharacterCount` has the following parameters: - string s: the string to be queried. - int queries[q][2]: a two-dimensional array of queries where each query contains two integers, `i` and `j`. Returns - int[]: an array of integers where each integer is the number of unique characters in the substring for the corresponding query. Input Format The first line contains the string \'s\'. The second line contains an integer \'q\', the number of queries. Each of the next \'q\' lines contains two space-separated integers defining the indices `i` and `j`. Constraints 1 leq |s| leq 10^5 1 leq q leq 10^4 0 leq i leq j < |s| Sample Input ``` abacaba 3 0 3 1 4 2 6 ``` Sample Output ``` 3 3 3 ``` Explanation For the given queries, - \\"abac\\" contains 3 unique characters. - \\"baca\\" contains 3 unique characters. - \\"acaba\\" contains 3 unique characters. So, the result for each query would be 3.","solution":"def uniqueCharacterCount(s, queries): Returns the count of unique characters in the substring s[i...j] for each given pair of indices (i, j) in queries. result = [] for i, j in queries: substring = s[i:j+1] unique_chars = set(substring) result.append(len(unique_chars)) return result"},{"question":"Write a function `is_tournament_sorted` that takes a `list` of `tuples`. Each `tuple` contains two elements: (team name, score). The function should `return` `True` if the list is sorted in descending order based on the scores; otherwise, it should `return` `False`. If the input is an empty `list`, `return` `True` as it is trivially sorted. You can assume that each team name is a unique string and that all scores are integers. Example cases: - `is_tournament_sorted([(\\"TeamA\\", 3), (\\"TeamB\\", 2), (\\"TeamC\\", 1)])` should return `True` because the scores are sorted in descending order. - `is_tournament_sorted([(\\"TeamA\\", 1), (\\"TeamB\\", 2), (\\"TeamC\\", 3)])` should return `False` because the scores are sorted in ascending order. Remember to handle edge cases and provide an efficient solution.","solution":"def is_tournament_sorted(teams): Check if the list of teams with scores is sorted in descending order based on scores. Args: teams (list of tuples): Each tuple contains a team name (str) and a score (int). Returns: bool: True if the list is sorted in descending order by scores, otherwise False. for i in range(len(teams) - 1): if teams[i][1] < teams[i + 1][1]: return False return True"},{"question":"Andy is participating in a treasure hunt in a rectangular grid of size n x m. Each cell in the grid can either be open (denoted by \'.\') or blocked (denoted by \'#\'). Andy starts from the top-left corner (cell (1, 1)) and wants to reach the bottom-right corner (cell (n, m)). Andy can move only to the right or down from a cell. Write a function that counts the number of unique paths Andy can take to reach the bottom-right corner from the top-left corner. If there is no path, return 0. -----Input----- The first line of the input contains two integers n and m (1 ≤ n, m ≤ 10) - the dimensions of the grid. The following n lines each contain m characters, each of which is either \'.\' or \'#\'. It is guaranteed that the top-left and bottom-right corners are both open (\'.\'). -----Output----- Print a single integer representing the number of unique paths from the top-left corner to the bottom-right corner. -----Examples----- Input 2 2 . . . . Output 2 Input 2 2 . # . . Output 1 Input 3 3 . . # . # . . . . Output 2","solution":"def unique_paths(n, m, grid): Returns the number of unique paths from the top-left corner (1, 1) to the bottom-right corner (n, m) in a grid of size n x m. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 # Initialize a 2D DP array with zeros dp = [[0 for _ in range(m)] for _ in range(n)] # Set the starting point dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'.\': # Add paths from the left cell if it\'s within bounds if j > 0: dp[i][j] += dp[i][j - 1] # Add paths from the top cell if it\'s within bounds if i > 0: dp[i][j] += dp[i - 1][j] return dp[n - 1][m - 1]"},{"question":"You are given an array of strings where each string represents a word. Your task is to find and return the longest common prefix shared among all the words in the array. If there is no common prefix, return an empty string \\"\\". Example: Input: 2 3 flower flow flight 2 dog racecar Output: fl \\"\\" Input: The first line of input contains an integer T denoting the number of test cases. For each test case: - The first line contains an integer N, the number of words in the array. - The second line contains N strings separated by spaces. Output: For each test case, print the longest common prefix or an empty string if there is none. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ length of each word ≤ 200","solution":"def longest_common_prefix(words): if not words: return \\"\\" # Sort the array of words words.sort() # Compare the first and the last word in the sorted array first_word = words[0] last_word = words[-1] common_prefix = \\"\\" for i in range(min(len(first_word), len(last_word))): if first_word[i] == last_word[i]: common_prefix += first_word[i] else: break return common_prefix def process_test_cases(test_cases): results = [] for i in range(len(test_cases)): words = test_cases[i] results.append(longest_common_prefix(words)) return results"},{"question":"You are given a grid with dimensions n x m. Each cell in the grid can either be empty (represented by \'.\') or blocked (represented by \'#\'). Your task is to find the shortest path from the top-left corner of the grid (0, 0) to the bottom-right corner of the grid (n-1, m-1). You can move up, down, left, or right, but you cannot move through blocked cells. The grid is guaranteed to have at least 2 rows and 2 columns (2 ≤ n, m ≤ 100). It is guaranteed that the top-left and bottom-right corners are always empty cells. Input The input consists of multiple datasets. Each dataset represents a grid in the following format: > n m > row1 > row2 > ... > rown The first line of a dataset contains two integers n (2 ≤ n ≤ 100) and m (2 ≤ m ≤ 100), representing the number of rows and the number of columns of the grid, respectively. Each of the following n lines contains m characters consisting of \'.\' and \'#\'. The end of the input is indicated by a line containing two zeros. Output For each dataset, output a single line containing the length of the shortest path from the top-left to the bottom-right corner of the grid. If there is no valid path, output \\"No path\\". No extra characters should appear in the output. Sample Input 2 2 .# #. 2 3 ..# #.. 0 0 Sample Output No path 4 Example Input 2 2 .# #. 2 3 ..# #.. 0 0 Output No path 4","solution":"def shortest_path(grid, n, m): from collections import deque # Directions (right, left, down, up) directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, path_length) while queue: r, c, length = queue.popleft() if r == n - 1 and c == m - 1: return length for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == \'.\': grid[nr][nc] = \'#\' # mark cell as visited queue.append((nr, nc, length + 1)) return \\"No path\\" def parse_input(input_str): input_lines = input_str.split(\\"n\\") index = 0 result = [] while index < len(input_lines): n, m = map(int, input_lines[index].split()) if n == 0 and m == 0: break grid = [] for i in range(1, n+1): grid.append(list(input_lines[index + i])) result.append((grid, n, m)) index += n + 1 return result def process(input_str): datasets = parse_input(input_str) results = [] for grid, n, m in datasets: results.append(shortest_path(grid, n, m)) return \\"n\\".join(map(str, results)) # Example Usage input_data = \\"2 2n.#n#.n2 3n..#n#..n0 0\\" print(process(input_data)) # Expected output: \\"No pathn4\\""},{"question":"Cara is a game developer and she is working on a new time-based puzzle game. In this game, there are `n` levels, each with a specified completion time. Cara wants to create various challenges where players must finish a subset of these levels within a given time limit. Given the times required to complete each level and a target time limit, determine if there exists a non-empty subset of levels whose completion times sum up to exactly the given target time limit. If such a subset exists for the target, return \\"YES\\", otherwise return \\"NO\\". -----Input----- The input consists of multiple test cases. The first line contains a single integer `t` (`1 ≤ t ≤ 50`) — the number of test cases. The first line of each test case contains two integers `n` and `T` (`1 ≤ n ≤ 20`, `1 ≤ T ≤ 10^5`) — the number of levels and the target time limit. The second line contains `n` integers `time_1, time_2, ..., time_n` (`1 ≤ time_i ≤ 10^4`) — the times required to complete each level. -----Output----- For each test case, if there exists a non-empty subset of levels whose completion times sum up to exactly the target time limit, print \\"YES\\" (without quotes); otherwise, print \\"NO\\" (without quotes). You can print each letter in any case (upper or lower). -----Examples----- Input 3 4 10 1 2 3 4 3 5 2 2 3 5 15 5 5 5 5 5 Output YES YES YES -----Notes----- In the first test case, one possible subset is `{2, 3, 4}` which sums to `10`. In the second test case, one possible subset is `{2, 3}` which sums to `5`. In the third test case, the subset `{5, 5, 5}` sums to exactly `15`.","solution":"def subset_sum_exists(n, T, times): Determines if there exists a non-empty subset of `times` where the sum is exactly `T`. from itertools import combinations for r in range(1, n + 1): for comb in combinations(times, r): if sum(comb) == T: return \\"YES\\" return \\"NO\\" def puzzle_game(test_cases): results = [] for test_case in test_cases: n, T = test_case[0] times = test_case[1] results.append(subset_sum_exists(n, T, times)) return results"},{"question":"You have been invited to participate in a coding competition where one of the challenges is to decode a secret message. The message is encoded by shifting each letter in the alphabet by a certain number of positions, known as the shift value. This technique is commonly known as the Caesar cipher. The Caesar cipher works by shifting each letter in the plaintext by a fixed number of positions down the alphabet. For example, with a shift of 3, \'A\' would be encoded as \'D\', \'B\' as \'E\', and so on. For letters near the end of the alphabet, the shift wraps around, so \'X\' with a shift of 3 becomes \'A\'. Your task is to implement a function that decodes the given encoded message using the specified shift value. # Function Signature ```python def decode_caesar_cipher(message: str, shift: int) -> str: # Your code here ``` # Input - `message`: a string representing the encoded message. It will contain only uppercase alphabetic characters and no spaces. - `shift`: an integer representing the number of positions each character in the message was shifted. # Output - Return the decoded message as a string. # Examples ```python decode_caesar_cipher(\\"DGGD\\", 3) # Returns \\"ADDA\\" decode_caesar_cipher(\\"KHOOR\\", 3) # Returns \\"HELLO\\" decode_caesar_cipher(\\"XYZ\\", 3) # Returns \\"UVW\\" ``` # Notes 1. The input message will only contain uppercase letters (A-Z). 2. The shift value will always be a non-negative integer. 3. The function should handle cases where the shift causes wrap around from \'Z\' to \'A\'.","solution":"def decode_caesar_cipher(message: str, shift: int) -> str: Decodes the given encoded message using the Caesar cipher with the specified shift value. decoded_message = [] for char in message: # Shift the character backward by the shift value, wrap around if necessary new_char = chr(((ord(char) - ord(\'A\') - shift) % 26) + ord(\'A\')) decoded_message.append(new_char) return \'\'.join(decoded_message)"},{"question":"Create a function that simulates the order fulfillment process in a factory. The factory has `n` assembly lines, each capable of completing one order per hour. The factory receives `m` orders at the beginning of a day. Each order requires a specific amount of time to complete, represented as an integer number of hours. The goal is to assign orders to assembly lines in such a way that minimizes the maximum completion time among all assembly lines. You need to write a program that distributes orders optimally and then calculates the maximum completion time after all orders have been processed. -----Input----- The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100). The second line contains `m` integers `t1, t2, ..., tm` (1 ≤ ti ≤ 100), where `ti` represents the time required to complete the i-th order. -----Output----- Print a single integer representing the minimum possible maximum completion time among all assembly lines after all orders have been assigned. -----Examples----- Input 3 5 2 14 4 16 6 Output 16 Input 2 4 5 8 6 3 Output 11 Input 4 4 10 10 10 10 Output 10 Input 1 3 2 4 6 Output 12","solution":"def min_max_completion_time(n, m, orders): Distributes orders among assembly lines to minimize the maximum completion time. Parameters: n (int): Number of assembly lines. m (int): Number of orders. orders (list): List of integers representing time each order takes. Returns: int: Minimum possible maximum completion time. # Sort orders in descending order orders.sort(reverse=True) # Maintain an array to keep track of time on each assembly line assembly_lines = [0] * n for order in orders: # Assign order to the assembly line with the minimum current load min_index = assembly_lines.index(min(assembly_lines)) assembly_lines[min_index] += order return max(assembly_lines) # Example usage # n = 3, m = 5, orders = [2, 14, 4, 16, 6] # minimum maximum completion time = 16 print(min_max_completion_time(3, 5, [2, 14, 4, 16, 6]))"},{"question":"Watson presents Sherlock with a series of strings. Each string consists only of characters \'a\' and \'b\'. Watson wants to check if the string can be transformed to a balanced string. A balanced string is defined as a string with equal number of \'a\'s and \'b\'s, where no two consecutive characters are the same. Formally, a balanced string should follow the pattern: \\"ababab...\\" or \\"babababa...\\" where both \'a\' and \'b\' appear exactly ⌊n/2⌋ times if the length of the string is n and ⌊.⌋ denotes the floor function. Sherlock needs to determine if such a transformation is possible. ------ Input ------ The first line contains T, number of test cases. Each test case consists of a single string S containing only \'a\' and \'b\' characters. ------ Output ------ For each test case, print YES if the string can be transformed into a balanced string meeting the specified condition or NO otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 The sum of lengths of all strings over all test cases does not exceed 2*10^5. ------ Sample Input 1 ------ 3 aabb abab aaabb ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Test case 1: The string \\"aabb\\" can be transformed to \\"abab\\" which is a balanced string. Test case 2: The string \\"abab\\" is already a balanced string. Test case 3: The string \\"aaabb\\" cannot be transformed to a balanced string as it has one more \'a\' than \'b\'.","solution":"def can_be_balanced(s): Determines if a string can be transformed into a balanced string. A balanced string has equal number of \'a\'s and \'b\'s and they alternate. count_a = s.count(\'a\') count_b = s.count(\'b\') # Equal number of \'a\'s and \'b\'s is a must for a balanced string if count_a == count_b: return \\"YES\\" return \\"NO\\" def process_cases(cases): Processes multiple test cases. results = [] for case in cases: results.append(can_be_balanced(case)) return results"},{"question":"In a far-off land, a magical forest is filled with a wide variety of enchanted trees. Each tree has its own unique level of magical energy, and these trees are linked to each other in a vast network of connections. The forest is maintained by a group of wise wizards who have established a system of pathways to ensure that magical energy flows evenly throughout the forest. The wizards have asked you to help them by writing a program that can determine if the magical energy can be evenly distributed along every pathway in the forest. To achieve this, each pathway between two trees should convey the same amount of magical energy. You are given the number of trees, the number of pathways, and a list of connections between the trees. Your task is to determine if it\'s possible to assign energies to the trees such that each connection (pathway) between any two trees conveys the same amount of magical energy. Input The input consists of multiple cases. Each case is given in the following format: - Two integers, n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 2000), where n is the number of trees and m is the number of pathways. - m lines follow, each containing two integers, u and v (1 ≤ u, v ≤ n), denoting a pathway between tree u and tree v. The end of the input is signaled by a line containing two zeroes, \\"0 0\\". Output Print \\"Possible\\" if it\'s possible to distribute the magical energy evenly along every pathway, and \\"Impossible\\" otherwise. Examples Input 4 4 1 2 2 3 3 4 4 1 3 2 2 3 1 2 0 0 Output Possible Impossible","solution":"def is_possible(n, m, connections): if m == 0: return \\"Possible\\" from collections import defaultdict degrees = defaultdict(int) for u, v in connections: degrees[u] += 1 degrees[v] += 1 for degree in degrees.values(): if degree % 2 != 0: return \\"Impossible\\" return \\"Possible\\" def solve_magic_forest(input_data): results = [] i = 0 while i < len(input_data): n, m = input_data[i] if n == 0 and m == 0: break connections = input_data[i + 1:i + 1 + m] results.append(is_possible(n, m, connections)) i += 1 + m return results"},{"question":"You are given a grid of size N times M with some cells blocked. You need to determine the minimum steps required for a robot to move from the top-left corner of the grid (1, 1) to the bottom-right corner (N, M). The robot can only move up, down, left, or right and cannot move through blocked cells. ------ Input ------ The first line of the input contains two integers N and M — the number of rows and columns in the grid respectively. Each of the next N lines contains M characters — the description of the grid. - A \'.\' character represents an empty cell. - A \'#\' character represents a blocked cell. ------ Output ------ Print a single integer — the minimum number of steps required for the robot to move from (1, 1) to (N, M). If it is not possible to reach the bottom-right corner, print -1. ------ Constraints ------ 1 ≤ N, M ≤ 1000 ------ Example Input ------ ``` 5 6 ....#. .#..#. .#...# #..#.. ...... ``` ------ Example Output ------ ``` 9 ``` ------ Explanation ------ In this example, the robot can follow the path (1,1) -> (2,1) -> (3,1) -> (3,2) -> (4,2) -> (5,2) -> (5,3) -> (5,4) -> (4,4) -> (5,5) -> (5,6), covering 9 steps.","solution":"from collections import deque def min_steps(grid, n, m): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] start = (0, 0) end = (n-1, m-1) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 queue = deque([(start, 0)]) visited = set([start]) while queue: (current_x, current_y), steps = queue.popleft() if (current_x, current_y) == end: return steps for dx, dy in directions: new_x, new_y = current_x + dx, current_y + dy if 0 <= new_x < n and 0 <= new_y < m and (new_x, new_y) not in visited and grid[new_x][new_y] == \'.\': visited.add((new_x, new_y)) queue.append(((new_x, new_y), steps + 1)) return -1 def robot_min_steps(grid_str): grid = grid_str.strip().split(\'n\') n, m = map(int, grid[0].split()) grid = [list(line) for line in grid[1:]] return min_steps(grid, n, m)"},{"question":"John is working on a series of puzzles involving nested brackets. He needs to validate if a given string of brackets is valid. A string of brackets is considered valid if every opening bracket has a corresponding closing bracket and the pairs of brackets are properly nested. Your task is to help John by determining if the provided bracket string is valid according to the above rules. The bracket characters used are \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. -----Input----- The input consists of a single line containing a string s, (1 ≤ |s| ≤ 1000), which contains only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. -----Output----- Output \\"YES\\" if the string is a valid sequence of brackets, otherwise output \\"NO\\". -----Examples----- Input {[()()]} Output YES Input {[(])} Output NO Input ((())) Output YES Input ([)] Output NO","solution":"def is_valid_bracket_sequence(s): Determine if the provided bracket string is valid. A string of brackets is considered valid if every opening bracket has a corresponding closing bracket and the pairs of brackets are properly nested. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return \\"NO\\" else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\""},{"question":"You are given an array of n integers where each integer appears an even number of times except for one integer which appears an odd number of times. Your task is to find and return the integer that appears an odd number of times. -----Input----- The first line consists of one integer n (1 ≤ n ≤ 10^5) which denotes the size of the array. The second line consists of n integers (1 ≤ each integer ≤ 10^9), the elements of the array. -----Output----- Print the integer that appears an odd number of times. -----Examples----- Input 5 1 2 3 2 1 Output 3 Input 7 4 5 4 5 4 5 4 Output 5 Input 9 6 7 8 7 8 9 9 9 6 Output 9","solution":"def find_odd_occurrence(n, arr): Given an array of n integers where each integer appears an even number of times except for one integer which appears an odd number of times, this function returns the integer that appears an odd number of times. result = 0 for number in arr: result ^= number return result"},{"question":"Rohan is playing a game in which he needs to cross a series of magic bridges to reach his destination. Each bridge either rewards or penalizes him with certain magical points as he crosses it. The game board consists of n bridges in a straight line, each having its own score. However, there is a unique constraint: at every odd-indexed bridge (1st, 3rd, 5th, etc.), he must jump over the bridge and hence, does not accumulate the score of that bridge. Given the scores of these bridges, determine the total points Rohan has after crossing all n bridges. Note: The bridges are indexed starting from 1. -----Input----- The first line of the input contains the number of test cases t (1 le t le 100). Then, t lines follow, each containing an integer n (1 le n le 1000) and a list of n integers a_i (-1000 le a_i le 1000) representing the scores of the n bridges. -----Output----- Output t integers. The i-th of them should be equal to the total points Rohan has after crossing the i-th set of bridges. -----Example----- Input 3 5 1 2 3 4 5 4 -1 -2 -3 -4 6 10 20 30 40 50 60 Output 6 -6 90 -----Notes----- Let us explain the first example for clarity: Test case 1: The bridge scores are [1, 2, 3, 4, 5]. Rohan jumps over bridges at odd indices (1st, 3rd, 5th), so he only accumulates the scores from the 2nd and 4th bridges. His total score is 2 + 4 = 6. Test case 2: The bridge scores are [-1, -2, -3, -4]. Rohan jumps over bridges at odd indices (1st, 3rd). So, he only accumulates the scores from the 2nd and 4th bridges. His total score is -2 + -4 = -6. Test case 3: The bridge scores are [10, 20, 30, 40, 50, 60]. Rohan jumps over bridges at odd indices (1st, 3rd, 5th). So, he only accumulates the scores from the 2nd, 4th, and 6th bridges. His total score is 20 + 40 + 60 = 120.","solution":"def calculate_total_points(test_cases): Given the scores of bridges for each test case, determine the total points Rohan has after crossing all n bridges. Args: test_cases (list): A list of tuples, each containing an integer n and a list of n integers representing the scores. Returns: list: A list of integers representing the total points for each test case. results = [] for n, scores in test_cases: total_points = sum(scores[i] for i in range(1, n, 2)) results.append(total_points) return results"},{"question":"A group of friends is planning a hiking trip, and they need to calculate the total distance they will hike each day. However, they can only hike a certain number of segments each day, and each segment has a different distance. Given the maximum number of segments they can hike in a day and the corresponding distances of those segments, you need to determine the total distance hiked each day. Every day, the friends start with a specific number of segments they plan to complete. The segments can be completed in any order, but each segment must not be repeated. Calculate the total distance for each day given the maximum number of segments and their distances. Function Description Complete the function `totalHikeDistance` in the editor below. `totalHikeDistance` has the following parameters: - int k: the maximum number of segments that can be hiked each day - int[] distances: an array of integers representing the distance of each segment Returns - int: the total distance hiked for that day Input Format The first line contains an integer, `d`, the number of days. Each of the next `d` lines contains an integer `k` followed by `k` space-separated integers representing the distances of each segment for that day. Constraints - 1 ≤ d ≤ 100 - 1 ≤ k ≤ 10^3 - 1 ≤ distances[i] ≤ 10^4 Sample Input ``` 2 3 5 10 15 2 7 14 ``` Sample Output ``` 30 21 ``` Explanation In the first test case: - On the first day, the friends can hike 3 segments with distances 5, 10, and 15. Thus, the total distance hiked on the first day is 5 + 10 + 15 = 30. In the second test case: - On the second day, the friends can hike 2 segments with distances 7 and 14. Thus, the total distance hiked on the second day is 7 + 14 = 21.","solution":"def totalHikeDistance(d, hikes): Calculate total distance hiked for each day given maximum number of segments and their distances. Parameters: d (int): Number of days. hikes (list of tuple): List where each element is a tuple containing k and the distances for that day. Returns: list of int: The total distance hiked each day. result = [] for k, distances in hikes: result.append(sum(distances[:k])) return result # Sample usage: # d = 2 # hikes = [(3, [5, 10, 15]), (2, [7, 14])] # print(totalHikeDistance(d, hikes)) # Output: [30, 21]"},{"question":"Given an array of integers, you are to sort the array such that all prime numbers appear before all non-prime numbers while maintaining the relative order of the primes and the non-primes. A prime number is an integer greater than 1 that has no positive divisors other than 1 and itself. For the purpose of this problem, consider `1` as a non-prime. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). -----Output----- Output the resulting array after sorting primes before non-primes, preserving their relative order within the two groups. -----Examples----- Input 6 1 7 4 2 10 3 Output 7 2 3 1 4 10 Input 5 10 9 8 7 6 Output 7 10 9 8 6 Input 7 4 4 4 4 4 4 4 Output 4 4 4 4 4 4 4 -----Note----- In the first example, the prime numbers are `[7, 2, 3]` and they appear in the same relative order in the output. The non-prime numbers are `[1, 4, 10]` and they also remain in the same relative order at the end of the output array. In the second example, the only prime number is `7`, so it is moved to the front, and the remaining non-prime numbers retain their relative order following the `7`.","solution":"def is_prime(n): Helper function to determine if n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sort_primes_before_non_primes(arr): Sort the array such that prime numbers appear before non-prime numbers while maintaining relative order within the groups. primes = [x for x in arr if is_prime(x)] non_primes = [x for x in arr if not is_prime(x)] return primes + non_primes"},{"question":"A prime number is a natural number greater than 1 that has no divisors other than 1 and itself. A palindrome is a number that reads the same backward as forward, such as 121 or 1331. You are given an integer N. Your task is to find the smallest prime palindrome number greater than or equal to N. If multiple solutions exist, return the smallest one. Input format: - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains a single integer N. Output format: - For each test case, print the smallest prime palindrome greater than or equal to N. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 SAMPLE INPUT 3 31 130 777 SAMPLE OUTPUT 101 131 787 Explanation For the first test case, the smallest prime palindrome greater than or equal to 31 is 101. For the second test case, the smallest prime palindrome greater than or equal to 130 is 131. For the third test case, the smallest prime palindrome greater than or equal to 777 is 787.","solution":"def is_prime(num): if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def is_palindrome(num): return str(num) == str(num)[::-1] def smallest_prime_palindrome(N): while True: if is_palindrome(N) and is_prime(N): return N N += 1 def solve(T, cases): results = [] for N in cases: results.append(smallest_prime_palindrome(N)) return results"},{"question":"You are tasked with implementing an LRU (Least Recently Used) cache. The cache should be able to perform the following operations: 1. `set(key, value)`: Add an item to the cache. If the cache is full, remove the least recently used item before adding the new item. 2. `get(key)`: Retrieve an item from the cache. If the key does not exist, return `-1`. The cache should have a fixed capacity which is set during initialization. Example ```python cache = LRUCache(2) # Initialize the cache with capacity 2 cache.set(1, 1) cache.set(2, 2) print(cache.get(1)) # returns 1 cache.set(3, 3) # evicts key 2 print(cache.get(2)) # returns -1 (not found) cache.set(4, 4) # evicts key 1 print(cache.get(1)) # returns -1 (not found) print(cache.get(3)) # returns 3 print(cache.get(4)) # returns 4 ``` Notes - Implement the LRU cache using O(1) time complexity for both `get` and `set` operations. - You may assume all keys and values are non-negative integers.","solution":"class LRUCache: def __init__(self, capacity: int): self.cache = {} self.capacity = capacity self.order = [] # Order of keys to keep track of LRU def get(self, key: int) -> int: if key in self.cache: # Move this key to the end to show that it was recently used self.order.remove(key) self.order.append(key) return self.cache[key] else: return -1 def set(self, key: int, value: int) -> None: if key in self.cache: # Update the value and move the key to the \'recently used\' position self.cache[key] = value self.order.remove(key) self.order.append(key) else: if len(self.cache) >= self.capacity: # Evict the least recently used key lru_key = self.order.pop(0) del self.cache[lru_key] # Add the new key and value self.cache[key] = value self.order.append(key)"},{"question":"Write a function that takes a list of integers as input and returns the largest integer `k` such that all integers in the list are divisible by `k` and `k` is greater than 1. ------ Input ------ A single line containing space-separated integers. ------ Output ------ Print a single integer which is the largest integer `k` greater than 1 such that all integers in the list are divisible by `k`. If no such `k` exists, print `-1`. ------ Constraints ------ The list will contain at least 2 and at most 100 integers. Each integer in the list will be between `1` and `1000` (inclusive). ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 4 8 16 32 ----- Sample Output 1 ------ 4 ----- explanation 1 ------ The greatest integer that divides all of `4, 8, 16, 32` is `4`. ----- Sample Input 2 ------ 5 10 15 20 ----- Sample Output 2 ------ 5 ----- explanation 2 ------ The greatest integer that divides all of `5, 10, 15, 20` is `5`. ----- Sample Input 3 ------ 7 11 13 17 ----- Sample Output 3 ------ -1 ----- explanation 3 ------ There is no integer greater than `1` that can divide all of `7, 11, 13, 17`. Therefore, the answer is `-1`.","solution":"import math from functools import reduce def gcd(a, b): Calculates the greatest common divisor of a and b. while b: a, b = b, a % b return a def gcd_of_list(numbers): Calculates the greatest common divisor (gcd) of a list of numbers. return reduce(gcd, numbers) def largest_k_divisible(nums): Returns the largest integer k greater than 1 such that all integers in nums are divisible by k, or -1 if no such k exists. g = gcd_of_list(nums) if g > 1: return g else: return -1"},{"question":"You have been given a string representing a MATLAB-style array initialization. Write a function that converts this string into a nested list representing the array. MATLAB uses semicolons (;) to separate rows and spaces or commas (spaces take precedence) to separate columns within each row. For example: ```python Input: \'[1 2 3; 4 5 6; 7 8 9]\' Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ``` A few more examples: ```python Input: \'[10, 20, 30; 40, 50, 60]\' Output: [[10, 20, 30], [40, 50, 60]] Input: \'[3 4; 5 6]\' Output: [[3, 4], [5, 6]] ``` Your function should handle empty arrays and arrays with only one row or one column. Note: All the values in the string will be integers.","solution":"def matlab_to_list(matlab_str): Converts a MATLAB-style array initialization string into a nested list. Args: matlab_str (str): A string representing a MATLAB-style array initialization. Returns: list: A nested list representing the array. # Strip the brackets clean_str = matlab_str.strip(\'[]\') if not clean_str: return [] # Split by semicolon to get rows rows = clean_str.split(\';\') # Split each row by space to get columns array = [list(map(int, row.replace(\',\', \' \').split())) for row in rows] return array"},{"question":"Professor McGonagall is trying out a new spell for her Transfiguration class. She has two words A and B, each consisting of lowercase alphabets. She wants to transform word A into word B. However, she can only use a special transfiguration spell that allows her to take any one character from word A and place it at the end of the string. Your task is to determine whether it is possible to transform word A into word B using any number of the given spell operations. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the length of both words. - The second line contains the word A. - The third line contains the word B. -----Output----- For each test case, print a single line containing the string \\"YES\\" if it is possible to transform A into B or \\"NO\\" if it is impossible (without quotes). -----Constraints----- - 1 le T le 100 - 1 le N le 1000 - |A| = |B| = N - A and B will consist of only lowercase alphabets -----Example Input----- 3 5 abcde cdeab 4 abcd bcda 6 abcdef debcaf -----Example Output----- YES YES NO -----Explanation----- Example case 1: By using the spell thrice, \'a\' can be moved to the end followed by \'b\', resulting in \\"cdeab\\" which matches B. Example case 2: By using the spell thrice, \'a\' can be moved to the end, resulting in \\"bcda\\" which matches B. Example case 3: Even by using the spell any number of times, it is impossible to match A with B.","solution":"def can_transform(A, B): Determines if it\'s possible to transform word A into word B using the given spell operation. if len(A) != len(B): return \\"NO\\" if A == B: return \\"YES\\" # Double A and see if B is a substring - this handles all rotations doubled_A = A + A if B in doubled_A: return \\"YES\\" return \\"NO\\" def process_test_cases(T, cases): results = [] for i in range(T): N = cases[i][0] A = cases[i][1] B = cases[i][2] result = can_transform(A, B) results.append(result) return results"},{"question":"You are given an array of integers representing the heights of buildings on a street. Two friends, Alice and Bob, are designing a water catching system between the buildings. Their goal is to determine how much water will be trapped after a rain. The water trapped is calculated by finding the difference between the height of the building and the shortest of the tallest buildings on the left and right sides (if this value is positive). Both Alice and Bob work together to find the total amount of water that can be trapped. Write a function that takes as input the number of buildings and an array of integers of length n representing the heights of the buildings. Input The first line contains a single integer n (1 ≤ n ≤ 10000) — the number of buildings. The second line contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 1000), where hi is the height of the i-th building from the left. Output Print a single integer — the total amount of trapped water after a rain. Example Input 6 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 Input 5 4 2 0 3 2 5 Output 9 Note In the first example, 6 units of water are trapped between the buildings. In the second example, the trapped water can be visualized as follows: - Between building 1 and 3, 1 unit of water is trapped. - Between building 4 and 2, 1 unit of water each over two buildings. - Between building 6 and 3, 1 unit of water and 2 units over 2 buildings. Thus, a total of 9 units of water are trapped.","solution":"def trap_water(buildings): Calculate the total amount of water that can be trapped between the buildings. :param buildings: List[int] - heights of the buildings. :return: int - The total amount of trapped water. if not buildings: return 0 n = len(buildings) left_max = [0] * n right_max = [0] * n left_max[0] = buildings[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], buildings[i]) right_max[n - 1] = buildings[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], buildings[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - buildings[i] return trapped_water"},{"question":"In a fictional land of Mathemagica, there is a magical pond that teleports frogs based on a peculiar set of rules. You, the brilliant programmer, have been approached to determine the final position of frogs after a series of teleportation instructions. The pond is represented as a 2D grid of fixed width `W` and height `H` (1 ≤ W, H ≤ 1000). Frogs start at an initial position (xs, ys) on the grid. A series of teleportation instructions are given, where each instruction moves a frog to a new position based on a fixed distance and direction. The directions follow the compass points: - `N` for North (moves frog up by `d` units) - `S` for South (moves frog down by `d` units) - `E` for East (moves frog right by `d` units) - `W` for West (moves frog left by `d` units) - `NE` for Northeast (moves frog up by `d` and right by `d` units) - `NW` for Northwest (moves frog up by `d` and left by `d` units) - `SE` for Southeast (moves frog down by `d` and right by `d` units) - `SW` for Southwest (moves frog down by `d` and left by `d` units) Your task is to determine the final position of the frog after executing all teleportation instructions. Note that if a frog\'s position goes out of the grid bounds after any move, it should be considered invalid, and the result should be \\"Out of Bounds\\". # Input The input consists of multiple test cases. Each test case begins with a single line containing four integers W, H, xs, ys (starting position of the frog). The next line contains an integer `n` (0 ≤ n ≤ 1000) representing the number of teleportation instructions. The following `n` lines each contain a string `dir` and an integer `d` (1 ≤ d ≤ 100), specifying the direction and distance of each teleportation instruction. The input is terminated by a line with four zeros, which should not be processed. # Output For each test case, output the final position of the frog as a pair of integers `xf yf`, or the string \\"Out of Bounds\\" if the frog\'s position goes out of grid bounds. # Example Input ``` 10 10 5 5 3 N 3 E 2 SE 4 100 100 50 50 2 NW 25 SE 10 0 0 0 0 ``` Output ``` 6 8 Out of Bounds ``` # Explanation of Example For the first test case: - Frog starts at (5, 5). - Moves North by 3 units to (5, 8). - Moves East by 2 units to (7, 8). - Moves Southeast by 4 units which would place the frog at (11, 12). Since this is out of the 10x10 grid bounds, output \\"Out of Bounds\\". For the second test case: - Frog starts at (50, 50). - Moves Northwest by 25 units to (25, 75). - Moves Southeast by 10 units to (35, 65), still within bounds. - Finally ends up at (35, 65) within the 100x100 grid. - But if the move would have been invalid at any step, the output would be \\"Out of Bounds\\".","solution":"def final_frog_position(W, H, xs, ys, instructions): Determines the final position of the frog after executing a series of teleportation instructions. xf, yf = xs, ys direction_mapping = { \\"N\\": (0, 1), \\"S\\": (0, -1), \\"E\\": (1, 0), \\"W\\": (-1, 0), \\"NE\\": (1, 1), \\"NW\\": (-1, 1), \\"SE\\": (1, -1), \\"SW\\": (-1, -1) } for direction, distance in instructions: dx, dy = direction_mapping[direction] xf += dx * distance yf += dy * distance if not (0 <= xf < W and 0 <= yf < H): return \\"Out of Bounds\\" return (xf, yf) def process_input(input_lines): output_lines = [] index = 0 while True: W, H, xs, ys = map(int, input_lines[index].split()) if W == 0 and H == 0 and xs == 0 and ys == 0: break index += 1 n = int(input_lines[index]) instructions = [] for _ in range(n): index += 1 dir, dist = input_lines[index].split() instructions.append((dir, int(dist))) result = final_frog_position(W, H, xs, ys, instructions) output_lines.append(result if result == \\"Out of Bounds\\" else f\\"{result[0]} {result[1]}\\") index += 1 return output_lines"},{"question":"You are given an n x n grid of characters, where each character is either \'.\' (an empty cell) or \'#\' (a blocked cell). Your task is to determine the number of unique paths from the top-left corner of the grid to the bottom-right corner, where you can only move right or down. A path is considered valid if it only moves through empty cells and does not pass through any blocked cells. Two paths are considered unique if they differ in the sequence of cells they pass through. Given the grid as input, return the number of unique paths from the top-left corner to the bottom-right corner. Input The first line of the input contains a single integer n (1 ≤ n ≤ 10). Each of the next n lines contains n characters and represents one row of the grid. Output Output a single integer representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. Examples Input 3 . ..# ... Output 2 Input 4 .... .#.. ...# .... Output 4","solution":"def unique_paths(grid): n = len(grid) dp = [[0] * n for _ in range(n)] if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1] # Example usage: # grid = [ # [\'.\', \'#\', \'#\'], # [\'.\', \'.\', \'#\'], # [\'.\', \'.\', \'.\'] # ] # print(unique_paths(grid)) # Output: 2"},{"question":"You are given a list of integers. For each integer in the list, determine if it is a prime number. Replace each prime number with the string \\"Prime\\" and replace non-prime numbers with the string \\"Not Prime\\". Print the resulting list. Input The first line of input contains an integer n, the number of integers in the list. The second line contains n space-separated integers. Output Output a single line containing n space-separated strings, where each string is either \\"Prime\\" or \\"Not Prime\\" corresponding to whether the integer at that position is a prime number or not. Constraints 1<=n<=100 0<=Each integer in the list<=1000 Example Input: 5 2 4 5 6 7 Output: Prime Not Prime Prime Not Prime Prime","solution":"def is_prime(num): Returns True if num is a prime number, else False. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def prime_replacement(int_list): Replaces prime numbers in the list with \'Prime\' and non-prime numbers with \'Not Prime\'. result_list = [\\"Prime\\" if is_prime(num) else \\"Not Prime\\" for num in int_list] return result_list"},{"question":"Masha enjoys reading books. She has a large stack of books and wants to organize a reading schedule such that she maximizes her reading time while respecting her study hours. Each day, Masha allocates a fixed number of hours for studying and a flexible schedule where she can decide how many books she wants to read. For each book, Masha knows how many hours it will take her to read. Given the hours she needs for each book and the total number of hours she has for the flexible reading schedule across all days, Masha wants to determine the maximum number of books she can read completely. Input: The first line contains two integers n and h (1 ≤ n ≤ 1000, 1 ≤ h ≤ 10^4) — the number of books and the total number of flexible hours Masha has for reading. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), where ai is the number of hours required to read the i-th book. Output: Output the maximum number of books Masha can read completely within her flexible schedule. Examples: Input 5 10 1 2 3 4 5 Output 4 Input 3 7 2 2 4 Output 3 Input 4 5 6 2 3 1 Output 2 Note: In the first example, Masha can read 4 books in the first 10 hours: 1 + 2 + 3 + 4 = 10. In the second example, Masha can read all 3 books as their total reading time is 2 + 2 + 3 = 7. In the third example, Masha can read books that take 2 and 3 or books that take 2 and 1, among other combinations, but she can only read a maximum of 2 books fully.","solution":"def max_books(n, h, hours): Returns the maximum number of books that Masha can read completely within her flexible schedule. :param n: Number of books :param h: Total number of flexible hours :param hours: A list of integers where each integer is the number of hours required to read the corresponding book :return: Maximum number of books that can be read completely hours.sort() books_read = 0 total_hours = 0 for i in range(n): if total_hours + hours[i] <= h: total_hours += hours[i] books_read += 1 else: break return books_read"},{"question":"A fruit company needs to ensure that their refrigerated trucks maintain a specific temperature range while transporting fruits across various cities. Each truck is equipped with a temperature monitoring system that logs the temperature at various points in time. The company wants to verify that the logged temperature stays within a permissible range for the entire trip. Your task is to analyze the logged data and determine if the temperature was ever out of the permissible range during the trip. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 1000), where n is the number of logged temperature readings and m is the permissible range. The second line contains n integers t1, t2, ..., tn (-1000 ≤ ti ≤ 1000), representing the temperature readings at different points in time. The third line contains two integers L and H (L ≤ H), representing the lower and upper bounds, respectively, of the permissible temperature range. Output: Print \\"Safe\\" if all temperature readings are within the permissible range [L, H], otherwise print \\"Unsafe\\". Examples: Input: 5 10 1 2 -3 4 5 -5 5 Output: Safe Input: 4 20 -15 5 25 -10 -10 15 Output: Unsafe","solution":"def check_temperature_safety(n, m, temperatures, L, H): Checks if all temperature readings are within the permissible range [L, H]. Parameters: n (int): Number of logged temperature readings. m (int): Permissible range (not used in the logic). temperatures (list): List of temperature readings. L (int): Lower bound of permissible temperature range. H (int): Upper bound of permissible temperature range. Returns: str: \\"Safe\\" if all temperatures are within range [L, H], otherwise \\"Unsafe\\". for temp in temperatures: if temp < L or temp > H: return \\"Unsafe\\" return \\"Safe\\""},{"question":"A game consists of a rectangular grid with n rows and m columns (1 ≤ n, m ≤ 300). Each cell in the grid can either be empty or contain a block. A player controls a robot starting at the top-left cell of the grid (1,1) and aims to move it to the bottom-right cell (n,m). The robot can move up, down, left, or right, but cannot move diagonally, and cannot move into a cell that contains a block. Given the initial configuration of the grid, determine if the robot can reach the bottom-right cell from the top-left cell. If both cells (starting and destination) are empty and the robot can reach the destination, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line of the input contains two integers n and m. The next n lines contain m characters each, representing the grid. Each character is either \'.\' (representing an empty cell) or \'#\' (representing a cell with a block). Output Print \\"YES\\" if the robot can reach the bottom-right cell from the top-left cell; otherwise, print \\"NO\\". Examples Input 4 4 .... .. ..#. .... Output YES Input 3 3 .#. .#. .#. Output NO Input 3 3 # #.# # Output NO","solution":"def can_reach_end(n, m, grid): Determines if the robot can reach (n, m) from (1, 1). Args: n (int): Number of rows. m (int): Number of columns. grid (List[str]): n rows of strings representing the grid. Returns: str: \\"YES\\" if the robot can reach the destination, \\"NO\\" otherwise. from collections import deque # Check boundary conditions for the start and end points if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() # If we have reached the bottom-right cell if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"In a small village, there is a unique tradition of arranging flowers in a specific manner. Villagers create flower chains by picking different types of flowers and arranging them sequentially. Each flower has a unique beauty value associated with it, and the villagers aim to maximize the total beauty value of their flower chains. Given a list of flowers, each with a distinct beauty value, determine the maximum possible sum of beauty values for any non-empty subsequence of the flowers. Input Format: T, the number of test cases. Following T lines, each contains a list of space-separated integers representing the beauty values of the flowers in that test case. Output Format: T lines indicating the maximum beauty value sum for each test case. Print the answer modulo (10^9+7). Constraints: 1 ≤ T ≤ 1000 1 ≤ Number of flowers in each test case ≤ 2000 1 ≤ Beauty value of each flower ≤ 1000 SAMPLE INPUT 2 1 2 3 4 5 6 SAMPLE OUTPUT 6 15","solution":"MOD = 10**9 + 7 def max_beauty_value_sum(test_cases): results = [] for flowers in test_cases: results.append(sum(flowers) % MOD) return results"},{"question":"A delivery company has a set of delivery routes that their drivers take every day. Each route has a time schedule during which the delivery should be completed, represented by two integers: the start time and the end time. Given a list of these schedules, find the maximum number of routes that can be covered by a single driver under the condition that the driver can only handle non-overlapping routes. Assume that the times are given in a 24-hour format (e.g., from 0 to 23). Write a program that determines the maximum number of non-overlapping delivery routes. Input The first line contains an integer n (1 ≤ n ≤ 1000), representing the number of delivery routes. The next n lines each contain two integers si and ei (0 ≤ si < ei ≤ 23), representing the start and end times of the delivery routes. Output Print one integer, the maximum number of non-overlapping delivery routes that can be covered by a single driver. Examples Input 5 1 3 2 5 3 9 6 8 8 10 Output 3 Input 4 1 2 2 3 3 4 4 5 Output 4 Note In the first sample, the routes 1-3, 6-8, and 8-10 can be covered by the same driver without time conflicts, which is the maximum possible. In the second sample, all the routes are consecutive and do not overlap, so the driver can cover all routes.","solution":"def max_non_overlapping_routes(n, schedules): Returns the maximum number of non-overlapping routes. # Sort the schedules by end time schedules.sort(key=lambda x: x[1]) max_routes = 0 current_end_time = -1 for schedule in schedules: start, end = schedule if start >= current_end_time: max_routes += 1 current_end_time = end return max_routes"},{"question":"Given a string S consisting only of characters \'a\', \'b\', and \'c\', determine the minimum number of operations needed to make all the characters in the string the same. In one operation, you can choose any character (let\'s denote it by c) in the string and change it to either of its adjacent characters in the English alphabet, i.e., you can change \'a\' to \'b\' or \'b\' to \'c\', \'b\' to \'a\' or \'c\', and \'c\' to \'b\' or \'a\'. ------ Input ------ The first line contains an integer T denoting the number of test cases. Each of the next T lines contains a string S. ------ Output ------ For each test case, print a single integer — the minimum number of operations required to make all characters in the string the same. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ |S| ≤ 10^{3} Total length of all strings combined does not exceed 10^{3}. ----- Sample Input ------ 3 abc aaab cccc ----- Sample Output ------ 2 1 0 ------ Explanation ------ In the first test case, we can convert \'a\' to \'b\' and \'c\' to \'b\' with a minimum of 2 operations. In the second test case, we can convert \'b\' to \'a\' with a minimum of 1 operation. In the third test case, the string already consists of only \'c\', so no operation is needed.","solution":"def min_operations_to_uniform(S): Given a string S consisting only of \'a\', \'b\', and \'c\', returns the minimum number of operations needed to make all characters the same. a_count = S.count(\'a\') b_count = S.count(\'b\') c_count = S.count(\'c\') total_length = len(S) # To make all characters \'a\', change all \'b\'s and \'c\'s to \'a\' operations_to_a = total_length - a_count # To make all characters \'b\', change all \'a\'s and \'c\'s to \'b\' operations_to_b = total_length - b_count # To make all characters \'c\', change all \'a\'s and \'b\'s to \'c\' operations_to_c = total_length - c_count return min(operations_to_a, operations_to_b, operations_to_c)"},{"question":"A large computer network is represented in the shape of an undirected graph with N nodes and M edges. Each node represents a server, and each edge represents a direct connection between two servers with a given latency (time it takes to send a message through that connection). You are required to find the shortest time for a message to be sent from the starting server to all other servers in the network. You need to write a program that takes the number of servers and connections, followed by the connection details and the starting server, then outputs the shortest time required to send a message from the starting server to each other server. Input - The first line contains two space-separated integers N and M — the number of servers and the number of connections. - Each of the next M lines contains three space-separated integers u, v, and w, describing a direct connection between server u and server v with a latency of w milliseconds. - The last line contains a single integer S — the starting server. Output Print N lines. For each i (1 ≤ i ≤ N), print the shortest time required to send a message from the starting server S to server i. If server i cannot be reached from server S, print \\"UNREACHABLE\\". Constraints: - 1 ≤ N, M ≤ 10^5 - 1 ≤ u, v, S ≤ N - 1 ≤ w ≤ 10^4 Examples Input 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 3 5 2 1 Output 0 2 3 6 5","solution":"import heapq def dijkstra(N, edges, S): graph = {i: [] for i in range(1, N+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Since it is an undirected graph distances = {i: float(\'inf\') for i in range(1, N+1)} distances[S] = 0 priority_queue = [(0, S)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) result = [] for i in range(1, N+1): if distances[i] == float(\'inf\'): result.append(\\"UNREACHABLE\\") else: result.append(str(distances[i])) return result"},{"question":"Write a function `rotate_string` that accepts two parameters: a string `s` and an integer `n`. The function should return a new string which is the result of rotating the original string `s` to the right `n` times. Rotation means that letters shifted out on the right will be inserted on the left. For example: rotate_string(\\"hello\\", 2) Should return: \\"lohel\\" Another example: rotate_string(\\"abcdef\\", 4) Should return: \\"cdefab\\" Constraints: - If `n` is negative, the rotation should occur to the left. - You may assume that the input string `s` is not empty and has no spaces.","solution":"def rotate_string(s, n): Rotates the string s to the right n times. If n is negative, rotates to the left abs(n) times. if not s: return \\"\\" n = n % len(s) # handle n larger than the string length return s[-n:] + s[:-n]"},{"question":"In a distant kingdom, the king has a peculiar way of rewarding his knights. Each knight receives a number of gold coins which is always an even number. To ensure every knight gets exactly half of his coins while the other half is returned to the treasury, the king\'s treasurer has asked you to write a program that determines the total amount of gold coins returned to the treasury. -----Input----- The first line contains an integer k (1 ≤ k ≤ 1000), the number of knights. The second line contains k integers, the number of gold coins each knight received. Each number of gold coins is even and ranges between 2 and 1000000. -----Output----- The output should contain one integer, the total number of gold coins returned to the treasury by all the knights. -----Examples----- Sample Input: 3 4 10 6 Sample Output: 10","solution":"def total_returned_coins(k, coins): Returns the total number of gold coins returned to the treasury by all the knights. Parameters: k (int): The number of knights. coins (list): A list of integers representing the number of gold coins each knight received. Returns: int: Total number of gold coins returned to the treasury. # Each knight returns half of their coins return sum(coin // 2 for coin in coins)"},{"question":"Problem description. Acme Corporation is hosting an algorithm challenge for its new trainees. One of the tasks requires the trainees to help the company in processing some binary data. The problem is to find the number of 1s in the binary representation of a given number. Can you help the trainees solve this? Given a non-negative integer, your task is to count the number of 1s in its binary representation. Input Input contains only a single non-negative integer N. Output Print the number of 1s in the binary representation of N. Constraints 0 ≤ N ≤ 1000 Example Input: 9 Output: 2 Explanation If N=9, the binary representation of 9 is 1001. The number of 1s in this binary representation is 2. Hence, the output should be 2.","solution":"def count_ones_in_binary(n): Given a non-negative integer n, returns the count of 1s in its binary representation. if n < 0 or n > 1000: raise ValueError(\\"Input must be within the range 0 to 1000 inclusive.\\") binary_representation = bin(n) return binary_representation.count(\'1\')"},{"question":"Problem Statement Write a function that takes a list of integers and an integer k, and rotates the list to the right by k steps. Input The first line contains two integers n (the size of the list) and k. The second line contains n space-separated integers representing the list. Output Output the list after rotating it to the right by k steps. Example Input 5 2 1 2 3 4 5 Output 4 5 1 2 3 Input 7 3 7 1 5 8 2 4 6 Output 2 4 6 7 1 5 8","solution":"def rotate_list(lst, k): Rotates the list lst to the right by k steps. n = len(lst) k = k % n # handle cases where k > n rotated_lst = lst[-k:] + lst[:-k] return rotated_lst"},{"question":"You are given a list of k programming contests, each having three scheduled time slots. Each contest can only have one time slot assigned to it. You are also provided a list of constraints indicating that certain contests cannot be held simultaneously (if one contest is assigned a particular time slot, the other must be assigned a different time slot). Your task is to determine if it is possible to assign a unique time slot to each contest while adhering to the constraints. Each constraint is represented as a pair of integers (u, v), indicating that contest u and contest v cannot be assigned the same time slot. -----Input----- The first line of input will contain two integers k (1 ≤ k ≤ 100 000) and m (0 ≤ m ≤ 100 000), representing the number of contests and the number of constraints, respectively. The next m lines will contain the description of the constraints. Each line will contain two integers u and v (1 ≤ u, v ≤ k, u ≠ v), indicating that contest u and contest v cannot be assigned the same time slot. -----Output----- Print \'YES\' if it is possible to assign a unique time slot to each contest while adhering to the constraints, otherwise print \'NO\'. -----Examples----- Input 3 2 1 2 2 3 Output YES Input 3 3 1 2 2 3 3 1 Output NO Input 4 2 1 2 3 4 Output YES -----Note----- In the first sample, the contests can be assigned time slots as follows: contest 1 in time slot 1, contest 2 in time slot 2, and contest 3 in time slot 3, satisfying all constraints. In the second sample, it is not possible to assign different time slots to all contests while satisfying all constraints. In the third sample, one possible assignment could be: contest 1 in time slot 1, contest 2 in time slot 2, contest 3 in time slot 1, and contest 4 in time slot 2, satisfying all constraints.","solution":"import collections def can_assign_time_slots(k, m, constraints): Determines if it\'s possible to assign a unique time slot to each contest while adhering to the constraints. Args: k (int): Number of contests. m (int): Number of constraints. constraints (list of tuples): List of constraints, where each tuple (u, v) indicates contest u and contest v cannot be in the same time slot. Returns: str: \'YES\' if it is possible to assign a unique time slot to each contest while adhering to the constraints, otherwise \'NO\'. graph = collections.defaultdict(list) for u, v in constraints: graph[u].append(v) graph[v].append(u) slot_assignment = [-1] * (k + 1) def bfs(start): queue = collections.deque([start]) slot_assignment[start] = 0 # Assign the first time slot while queue: node = queue.popleft() current_slot = slot_assignment[node] for neighbor in graph[node]: if slot_assignment[neighbor] == -1: slot_assignment[neighbor] = (current_slot + 1) % 3 queue.append(neighbor) elif slot_assignment[neighbor] == current_slot: return False return True for i in range(1, k + 1): if slot_assignment[i] == -1: if not bfs(i): return \\"NO\\" return \\"YES\\""},{"question":"Given an array of N distinct integers, write a function to find if there exists a triplet (a, b, c) that satisfies a^2 + b^2 = c^2. Example 1: Input: N = 5 arr = [3, 1, 4, 6, 5] Output: True Explanation: There is a triplet (3, 4, 5) which satisfies 3^2 + 4^2 = 5^2. Example 2: Input: N = 3 arr = [1, 2, 3] Output: False Explanation: There is no triplet which satisfies the condition. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPythagoreanTriplet() which takes the integer N and the array arr as input parameters and returns a boolean indicating whether such a triplet exists. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N) Constraints: 3 ≤ N ≤ 1000 1 ≤ arr[i] ≤ 10^5 All elements are distinct.","solution":"def findPythagoreanTriplet(N, arr): This function checks if there exists a Pythagorean triplet in the given array. A Pythagorean triplet (a, b, c) satisfies a^2 + b^2 = c^2. Parameters: N (int): the number of elements in the array. arr (list of int): the list of distinct integers. Returns: bool: True if there exists a Pythagorean triplet, otherwise False. # Step 1: Square each element in the array and store them in a set for quick access squared = set([x ** 2 for x in arr]) # Step 2: Check for each combination of (a, b) if their sum of squares is a square in the set for i in range(N - 1): for j in range(i + 1, N): a2_plus_b2 = arr[i] ** 2 + arr[j] ** 2 if a2_plus_b2 in squared: return True # Step 3: If no such triplet found, return False return False"},{"question":"In the magical kingdom of Arithmatica, there is a grand contest where magicians have to add numbers in a unique way using enchanted scrolls. Each scroll contains a series of numbers, and each set of numbers can only be added in specific pairs, according to the ancient rules of Arithmatica. The addition follows these special rules: 1. If a number is odd, it can only be added to an even number. 2. If a number is even, it can only be added to an odd number. 3. The addition of two numbers results in a new scroll number, which is simply the sum of the two. Given a list of numbers on the scroll, your task is to determine if it\'s possible to use these rules to pair all numbers on the scroll. If it\'s possible, output \\"POSSIBLE\\". If it is not possible, output \\"IMPOSSIBLE\\". Note: Each number can only be used once in a pair, and the scroll must end with no numbers left unpaired. -----Input----- The first line of input contains a single integer N (2 ≤ N ≤ 100), the number of numbers on the scroll. The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 1000), the numbers on the scroll. -----Output----- Output \\"POSSIBLE\\" if all numbers can be paired according to the rules. Otherwise, output \\"IMPOSSIBLE\\". -----Examples----- Sample Input 1: 4 1 2 3 4 Sample Output 1: POSSIBLE Sample Input 2: 3 1 2 3 Sample Output 2: IMPOSSIBLE Sample Input 3: 6 2 3 4 5 6 7 Sample Output 3: POSSIBLE","solution":"def arithmatica_pairing(N, numbers): Determine if it is possible to pair all numbers such that each number is paired with a number of a different parity (odd with even and vice versa). Parameters: N (int): Number of numbers on the scroll. numbers (list of int): The numbers on the scroll. Returns: str: \\"POSSIBLE\\" if all numbers can be paired accordingly, \\"IMPOSSIBLE\\" otherwise. even_count = sum(1 for num in numbers if num % 2 == 0) odd_count = N - even_count if even_count == odd_count: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"A group of researchers is studying the migration patterns of birds. They have collected data on the distances traveled by various birds over a period of time. For each bird, they have recorded the starting and ending coordinates of its journey. To simplify their analysis, the researchers want to calculate the straight-line distance each bird has traveled. Given the coordinates of the starting and ending points of each bird’s journey, help the researchers by writing a program that calculates the straight-line distance traveled by each bird. -----Input----- - The first line of the input contains an integer N denoting the number of birds. The description of N birds follows. - Each bird\'s data consists of a single line containing four floating-point numbers x1, y1, x2, and y2 representing the coordinates of the starting and ending points of the bird\'s journey respectively. -----Output----- - For each bird, output a single line containing the straight-line distance traveled, rounded to 6 decimal places. -----Constraints----- - 1 ≤ N ≤ 100 - -10^3 ≤ x1, y1, x2, y2 ≤ 10^3 -----Example----- Input: 2 0.0 0.0 3.0 4.0 -1.0 -1.0 2.0 2.0 Output: 5.000000 4.242641 In this problem, the formula used to calculate the distance between two points ((x1, y1)) and ((x2, y2)) is: [ text{Distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ]","solution":"import math def calculate_distances(bird_data): Given a list of tuples containing the coordinates for each bird\'s travel, calculate the straight-line distance traveled by each bird. Args: bird_data (list of tuples): List of tuples where each tuple consists of four floats (x1, y1, x2, y2) Returns: list of floats: List of distances traveled by each bird rounded to 6 decimal places. distances = [] for (x1, y1, x2, y2) in bird_data: distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) distances.append(round(distance, 6)) return distances"},{"question":"A large technology firm has a coding challenge that involves capitalization of the first letter of each word in a given sentence. Your task is to write a function that performs this operation efficiently. The function should handle edge cases where words might contain special characters or numbers. The function should capitalize letters in such a way that all other characters remain unchanged. The function signature is: ```python def capitalize_first_letter(sentence: str) -> str: ``` -----Input----- - The function receives a single argument `sentence`, which is a string containing a sentence. The length of the sentence is between 1 and 10^5 characters. -----Output----- - The function should return a new string representing the input sentence where the first character of each word is capitalized and the rest of the characters in the word remain unchanged. -----Example----- Input: \\"hello world! let\'s code.\\" Output: \\"Hello World! Let\'s Code.\\" Example case 1. The input sentence \\"hello world! let\'s code.\\" is transformed to \\"Hello World! Let\'s Code.\\" by capitalizing the first letter of each word. Note that non-alphabet characters remain in their original state. Example case 2. The input sentence \\"123easy as1 2,3.\\" is transformed to \\"123easy As1 2,3.\\" by capitalizing the first letter of each word that starts with an alphabet character while keeping numbers and special characters unchanged.","solution":"def capitalize_first_letter(sentence: str) -> str: Capitalizes the first letter of each word in the given sentence, assuming words are separated by spaces. Numbers and special characters remain unchanged. :param sentence: A string containing the sentence to be transformed. :return: A string with the first letter of each word capitalized. words = sentence.split() capitalized_words = [word[0].upper() + word[1:] if word else \\"\\" for word in words] return \' \'.join(capitalized_words)"},{"question":"You are given a string s consisting of lowercase Latin letters. You have to rearrange the characters in the string in such a way that no two adjacent characters are the same. If it\'s impossible to rearrange the string to meet the condition, output \\"IMPOSSIBLE\\". -----Input----- The input consists of a single line containing the string s (1 le |s| le 1000). -----Output----- If it\'s possible to rearrange the string such that no two adjacent characters are the same, print the rearranged string. If there are multiple answers, print any of them. If it\'s not possible, print \\"IMPOSSIBLE\\". -----Examples----- Input aabb Output abab Input aaab Output IMPOSSIBLE -----Note----- In the first test case of the example, one of the valid rearrangements is \\"abab\\". In the second test case of the example, it is not possible to rearrange the string such that no two adjacent characters are the same.","solution":"from collections import Counter from heapq import heappop, heappush def rearrange_string(s): Rearranges the characters in the string `s` so that no two adjacent characters are the same. If it\'s not possible, returns \\"IMPOSSIBLE\\". char_count = Counter(s) max_heap = [] for char, count in char_count.items(): heappush(max_heap, (-count, char)) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heappop(max_heap) result.append(char) if prev_char is not None and prev_count < 0: heappush(max_heap, (prev_count, prev_char)) count += 1 prev_char = char prev_count = count rearranged = \'\'.join(result) if len(rearranged) != len(s): return \\"IMPOSSIBLE\\" return rearranged"},{"question":"Zara is organizing a relay race at the training camp. There are n runners standing in a line, each holding a baton. The runners are numbered from 1 to n. The race starts when the first runner passes the baton to the second runner, and so on, until the last runner. Each runner has a predefined time interval during which they can pass the baton. More formally, runner i can pass the baton to runner i+1 after at least li time units but not more than ui time units since they received it. The objective is to find the earliest time at which the last runner receives the baton. Assume that handing over the baton from one runner to the next is instantaneous. Input The first line of the input contains a single integer n (2 ≤ n ≤ 105), the number of runners. Each of the next n-1 lines contains two integers li and ui (1 ≤ li ≤ ui ≤ 10^9), where li and ui denote the minimum and maximum time runner i must wait before they can pass the baton to the next runner. Output Output a single integer, the earliest time at which the last runner will receive the baton. Examples Input 3 2 5 3 10 Output 8 Explanation Runner 1 passes the baton after 2 units to runner 2. Runner 2 waits exactly 3 more units to pass the baton to runner 3 (total 5 units so far). Runner 3 receives the baton at time 2 + 3 + 3 = 8 units. Input 4 1 4 2 6 1 3 Output 4 Explanation Runner 1 passes the baton after 1 unit to runner 2. Runner 2 waits exactly 2 more units to pass the baton to runner 3 (total 3 units so far). Runner 3 waits exactly 1 more unit to pass the baton to runner 4. Therefore, runner 4 receives the baton at time 1 + 2 + 1 = 4 units.","solution":"def earliest_time_to_finish(n, intervals): Determines the earliest time at which the last runner will receive the baton. n: int : number of runners intervals: list of tuples : list of (li, ui) intervals indicating the min and max times for passing the baton return: int : earliest time the last runner receives the baton current_time = 0 for li, ui in intervals: # Since the handoff is instantaneous, we can directly add li to the current_time current_time += li # The baton can only be handed off within the limits li and ui # In an optimal scenario we hand off baton after exactly li time units for minimizing the total time # Finally, after the last runner\'s waiting time, `current_time` will hold the earliest time the baton is received return current_time # Input example n = 3 intervals = [(2, 5), (3, 10)] print(earliest_time_to_finish(n, intervals)) # Output: 5 (not 8 as assumed previously) n = 4 intervals = [(1, 4), (2, 6), (1, 3)] print(earliest_time_to_finish(n, intervals)) # Output: 4"},{"question":"Given an array of integers representing the heights of students standing in a line, the teacher wants to arrange the students in a way that the sum of the conflicts between each student and their next neighbor is minimized. A conflict between two students is defined as the absolute difference in their heights. Your task is to rearrange the students in a way that minimizes the sum of conflicts and return the minimum sum. Input The first line contains an integer n (2 ≤ n ≤ 1000), the number of students. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) representing the heights of the students. Output Output a single integer denoting the minimum sum of conflicts. Examples Input 5 1 5 3 2 4 Output 4 Input 4 4 2 1 3 Output 3","solution":"def min_sum_of_conflicts(n, heights): This function returns the minimum sum of conflicts when students are arranged to minimize the absolute differences between the heights of adjacent students. Parameters: n (int): The number of students heights (list of int): The heights of the students Returns: int: The minimum sum of conflicts heights.sort() min_conflict_sum = 0 for i in range(n - 1): min_conflict_sum += abs(heights[i] - heights[i + 1]) return min_conflict_sum"},{"question":"Given a binary tree, the task is to complete the function findDiameter() that returns the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in the tree. This path may or may not pass through the root. Example 1: Input: 1 / 2 3 / 4 5 Output: 4 Explanation: The diameter of this tree is the path from node 4 to node 5 which is 4-2-1-3 or from node 5 to node 3 which is 5-2-1-3. Example 2: Input: 1 / 2 / 3 Output: 2 Explanation: The diameter of this tree is the path from node 3 to node 1 which is 3-2-1. Your Task: The task is to complete the function findDiameter() which takes the root of the tree as its only argument and returns the diameter of the tree. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= Number of nodes <= 10^4 1 <= Value of node <= 10^5","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def findDiameter(root): Function to return the diameter of the binary tree. def diameter_and_height(node): if not node: return 0, 0 # diameter, height left_diameter, left_height = diameter_and_height(node.left) right_diameter, right_height = diameter_and_height(node.right) current_diameter = left_height + right_height max_diameter = max(current_diameter, left_diameter, right_diameter) current_height = 1 + max(left_height, right_height) return max_diameter, current_height diameter, _ = diameter_and_height(root) return diameter"},{"question":"# Sum of Cubes Write a function that takes an integer and determines if it can be expressed as a sum of the cubes of its digits. For example, `153` can be expressed as `1^3 + 5^3 + 3^3 = 153`. Your goal is to create a function that takes an integer as input and returns `True` if the number can be expressed as the sum of the cubes of its digits, otherwise returns `False`. # Examples * `153` will return `True` * `370` will return `True` * `123` will return `False` # Notes - The input will be a non-negative integer. - Consider the performance of your solution in cases of large input numbers.","solution":"def is_sum_of_cubes(n): Determines if the given number can be expressed as the sum of the cubes of its digits. :param n: Non-negative integer to be checked. :return: True if n can be expressed as the sum of the cubes of its digits, else False. sum_of_cubes = sum(int(digit) ** 3 for digit in str(n)) return sum_of_cubes == n"},{"question":"Given a list of flights represented by pairs of starting and ending airports [from, to], devise an Itinerary Skyline problem to determine a valid itinerary from a given starting airport, using each flight exactly once and visiting all the airports. The itinerary should be lexicographically smallest if there are multiple valid itineraries. Example 1: Input: flights = [[\'JFK\', \'KUL\'], [\'JFK\', \'NRT\'], [\'NRT\', \'JFK\']] start = \'JFK\' Output: [\'JFK\', \'NRT\', \'JFK\', \'KUL\'] Example 2: Input: flights = [[\'MUC\', \'LHR\'], [\'JFK\', \'MUC\'], [\'SFO\', \'SJC\'], [\'LHR\', \'SFO\']] start = \'JFK\' Output: [\'JFK\', \'MUC\', \'LHR\', \'SFO\', \'SJC\'] Explanation: In Example 1, we start from \'JFK\' and can go to \'KUL\' or \'NRT\'. \'NRT\' is chosen since it is lexicographically smaller, and from \'NRT\', we can only go back to \'JFK\'. Finally, from \'JFK\', the only option left is \'KUL\'. In Example 2, starting from \'JFK\', our only option is \'MUC\'. From \'MUC\', the next flight is to \'LHR\', and from \'LHR\' we can only go to \'SFO\'. Finally, from \'SFO\', we head to \'SJC\', completing the itinerary. Your Task: You need to write a function findItinerary(flights, start) that takes the list of flights and the starting airport and returns an itinerary as a list of airports. Expected Time Complexity: O(E log E), where E is the number of flights. Expected Auxiliary Space: O(N + E), where N is the number of airports and E is the number of flights. Constraints: - All airports consist of 3 uppercase English letters. - There are at most 1000 flights. - It is guaranteed that there will be at least one valid itinerary. - The input list of flights contains no duplicated flights.","solution":"from collections import defaultdict import heapq def findItinerary(flights, start): Returns the lexicographically smallest itinerary that visits all airports exactly once based on the given flights. def visit(airport): while destinations[airport]: next_airport = heapq.heappop(destinations[airport]) visit(next_airport) itinerary.append(airport) # Create a dictionary of destinations with min-heaps to ensure lexicographical order destinations = defaultdict(list) for frm, to in flights: heapq.heappush(destinations[frm], to) itinerary = [] visit(start) return itinerary[::-1]"},{"question":"Given an undirected graph with N nodes and M edges, your task is to determine the number of connected components in the graph. Two nodes are in the same connected component if there is a path (direct or indirect) between them. ------ Input Format ------ - The first line of input will contain two integers, N (number of nodes), and M (number of edges). - The following M lines each contain two integers u and v (1 ≤ u, v ≤ N), indicating there is an edge between node u and node v. ------ Output Format ------ Output a single integer denoting the number of connected components in the graph. ------ Constraints ------ 1 ≤ N, M ≤ 1000 ------ Sample Input 1 ------ 6 5 1 2 2 3 3 4 5 6 ------ Sample Output 1 ------ 2 ------ Explanation 1 ------ The graph has two connected components: - The first component includes nodes {1, 2, 3, 4}. - The second component includes nodes {5, 6}. So the output is 2. ------ Sample Input 2 ------ 4 2 1 2 3 4 ------ Sample Output 2 ------ 2 ------ Explanation 2 ------ The graph has two connected components: - The first component includes nodes {1, 2}. - The second component includes nodes {3, 4}. So the output is 2.","solution":"def count_connected_components(n, m, edges): def dfs(node, visited, adjacency_list): stack = [node] while stack: u = stack.pop() for neighbor in adjacency_list[u]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) adjacency_list = {i: [] for i in range(1, n + 1)} for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = {i: False for i in range(1, n + 1)} connected_components = 0 for node in range(1, n + 1): if not visited[node]: visited[node] = True dfs(node, visited, adjacency_list) connected_components += 1 return connected_components # Example usage n, m = 6, 5 edges = [(1, 2), (2, 3), (3, 4), (5, 6)] print(count_connected_components(n, m, edges)) # Output: 2"},{"question":"Problem You are given a grid of size n x m filled with \'.\' (dots) and \'#\' (hashes). You need to find the largest square of size k x k that can be formed such that all the cells in that square are filled with \'.\' (dots). Constraints The input satisfies the following constraints. * 1 ≤ n, m ≤ 100 * 1 ≤ k ≤ min(n, m) * The grid consists of only \'.\' and \'#\' Input The input is given in the following format: * The first line contains the integers n and m. * The next n lines each contain a string of length m representing the grid. Output Output a single integer, the size of the largest square that can be formed with only \'.\' (dots). If no such square exists, output 0. Examples Input 5 6 ....#. .... .... ....#. #..... Output 4 Input 3 3 # # # Output 0 Input 4 4 .... ..#. .... .... Output 4","solution":"def largest_square_of_dots(n, m, grid): # Create a DP table to store the size of the largest square that can be formed ending at (i, j) dp = [[0] * m for _ in range(n)] max_square_size = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_square_size = max(max_square_size, dp[i][j]) return max_square_size ** 2"},{"question":"You are given a list of integers which represents the height of buildings in a street. The government has decided to plant trees between the buildings such that the height of the tree is determined by the difference in height of the buildings on its either side. Specifically, a tree planted between two buildings will have a height equal to the absolute difference between the heights of the adjacent buildings. Your task is to write a program that calculates the total height of all trees required to be planted in the street. Input: - The first line contains an integer N which represents the number of buildings. - The second line contains N integers, where the i-th integer represents the height of the i-th building. Output: - A single line containing the total height of all the trees to be planted. Constraints: - 2 ≤ N ≤ 10^5 - 0 ≤ height of building ≤ 10^4 SAMPLE INPUT 5 3 5 4 7 2 SAMPLE OUTPUT 11 Explanation: The trees\' heights are calculated as follows: - Between buildings 1 and 2: |3 - 5| = 2 - Between buildings 2 and 3: |5 - 4| = 1 - Between buildings 3 and 4: |4 - 7| = 3 - Between buildings 4 and 5: |7 - 2| = 5 Total height of all trees is 2 + 1 + 3 + 5 = 11.","solution":"def total_tree_height(N, heights): Returns the total height of all trees to be planted in the street. Parameters: N (int): The number of buildings. heights (list): The heights of the buildings. Returns: int: The total height of all trees. total_height = 0 for i in range(1, N): total_height += abs(heights[i] - heights[i - 1]) return total_height"},{"question":"Write a function, transposeMatrix, that takes a 2D list (matrix) of integers and returns its transpose. The transpose of a matrix is formed by turning all the rows of the original matrix into columns and vice versa. Return false for invalid arguments (e.g., input is not a 2D list). For more information about matrix transpose, follow this link: https://en.wikipedia.org/wiki/Transpose","solution":"def transposeMatrix(matrix): Returns the transpose of a given 2D list (matrix). Returns False if the input is not a valid 2D list. # Check if input is a 2D list (list of lists) if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix): return False # Check if all the rows have the same length if len(set(len(row) for row in matrix)) != 1: return False # Transpose the matrix transposed_matrix = [] for col in range(len(matrix[0])): transposed_row = [matrix[row][col] for row in range(len(matrix))] transposed_matrix.append(transposed_row) return transposed_matrix"},{"question":"Given an array of integers `arr`, return the product of the maximum and minimum element in the array. Example 1: Input: arr = [3, 5, 1, 9, 2] Output: 9 Explanation: The maximum element is 9 and the minimum element is 1. Their product is 9. Example 2: Input: arr = [-3, 0, 6, -2, 4] Output: -18 Explanation: The maximum element is 6 and the minimum element is -3. Their product is -18. Example 3: Input: arr = [7] Output: 49 Explanation: The only element is 7, hence both the maximum and minimum are 7. Their product is 49. Example 4: Input: arr = [10, 10, 10] Output: 100 Explanation: All elements are the same. The maximum and minimum both are 10. Their product is 100. Constraints: - 1 <= arr.length <= 1000 - -10^3 <= arr[i] <= 10^3","solution":"def max_min_product(arr): Returns the product of the maximum and minimum element in the array. if not arr: # Safety check for empty array, although constraint guarantees at least one element return None max_element = max(arr) min_element = min(arr) return max_element * min_element"},{"question":"You are given a list of integers and a target sum. Your task is to determine whether there exist two distinct indices i and j such that the elements at those indices sum up to the target value. You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains an integer n (2 le n le 10^4) — the number of elements in the list. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the list. The third line of each test case contains one integer x (1 le x le 10^9) — the target sum. -----Output----- For each test case, print the answer — \\"YES\\" (without quotes) if there exist two distinct indices i and j in the list such that a_i + a_j = x. Otherwise, print \\"NO\\". -----Example----- Input 3 4 2 7 11 15 9 5 1 2 3 4 5 10 6 1 2 3 4 4 5 8 Output YES NO YES -----Note----- In the first test case, you can find 2 + 7 = 9. In the second test case, there are no two numbers that sum up to 10. In the third test case, you can find 3 + 5 = 8 or 4 + 4 = 8.","solution":"def exists_pair_with_sum(arr, target): Determines if there exist two distinct indices such that the elements at those indices sum up to the target value. seen = set() for num in arr: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" def evaluate_test_cases(test_cases): Evaluates multiple test cases. result = [] for n, arr, target in test_cases: result.append(exists_pair_with_sum(arr, target)) return result"},{"question":"Given a list of integers representing heights of buildings in a skyline, each building is represented as width 1 and its value indicates its height from the ground. Your task is to calculate the total area covered by the skyline when viewed from the side. Example: Input: heights = [1, 3, 2, 5, 4] Output: 15 Explanation: The buildings\' heights create a skyline with total area covered = 1*1 + 3*1 + 2*1 + 5*1 + 4*1 = 15. Note: The heights array will contain at least one element and all elements are non-negative integers.","solution":"def total_skyline_area(heights): Calculate the total area covered by the skyline when viewed from the side. Parameters: heights (list of int): List of building heights. Returns: int: Total area covered by the skyline. return sum(heights)"},{"question":"John has a collection of N different types of marbles, each type coming in various quantities. He wants to randomly select one marble from his collection but realizes that the marbles come with different probabilities based on their quantities. Given the counts of each type of marble, you need to determine the probability of selecting a marble of each type. The selection process is uniform, meaning John will randomly pick one marble out of the entire collection without taking the type of marble into account. Input Format: The first line contains the integer N, the number of different types of marbles. The second line contains N integers, where the i-th integer represents the count of the i-th type of marble. Output Format: Print the probability of selecting a marble of each type as a real number exactly 4 decimal places. Each probability should be printed on a new line. Constraints: 1 ≤ N ≤ 1000 1 ≤ count of each type of marble ≤ 1000 SAMPLE INPUT 4 2 3 5 10 SAMPLE OUTPUT 0.0667 0.1000 0.1667 0.6667 Explanation: John has a total of 2 + 3 + 5 + 10 = 20 marbles. The probability of picking a marble of the first type is 2/20 = 0.1000 The probability of picking a marble of the second type is 3/20 = 0.1500 The probability of picking a marble of the third type is 5/20 = 0.2500 The probability of picking a marble of the fourth type is 10/20 = 0.5000","solution":"def marble_probabilities(N, counts): Returns the probabilities of selecting each type of marble. Args: N (int): the number of different types of marbles. counts (list): a list of integers representing the count of each type of marble. Returns: list: a list of probabilities for each type of marble. total_marbles = sum(counts) probabilities = [count / total_marbles for count in counts] return [round(prob, 4) for prob in probabilities]"},{"question":"Julia and her friends love playing treasure hunt games. They are planning a new game where they need to find some treasures hidden all over the forest. Julia wants to ensure that her friends visit as many unique spots as possible. To help her with this, you need to create a program that reads a list of coordinates and determines how many unique spots there are. Each coordinate pair (x, y) represents a spot. Two coordinates are considered the same if both their x and y values are identical. -----Input----- The input starts with an integer 1 leq N leq 1000, the number of coordinate pairs. The following N lines each contain two integers separated by space, -1000 leq x, y leq 1000, representing the coordinates of each spot. -----Output----- Print one integer, the number of unique spots visited. -----Examples----- Sample Input: 8 1 2 2 3 1 2 4 5 4 5 6 7 8 9 6 7 Sample Output: 5","solution":"def count_unique_spots(n, coordinates): Returns the count of unique coordinate pairs. Args: n: an integer, the number of coordinate pairs. coordinates: a list of tuples, each containing two integers (x, y). Returns: An integer, the number of unique spots. unique_spots = set(coordinates) return len(unique_spots) # Example usage n = 8 coordinates = [(1, 2), (2, 3), (1, 2), (4, 5), (4, 5), (6, 7), (8, 9), (6, 7)] print(count_unique_spots(n, coordinates)) # Output: 5"},{"question":"Given a string of lowercase alphabets, you are to find the minimum number of characters to change so that no two neighboring characters are the same. For instance, given the string \\"aab\\", you can change the second character from \'a\' to \'b\' to make the string \\"abb\\", in which no two neighboring characters are the same. -----Input----- The input consists of a single string s (1 ≤ |s| ≤ 100) consisting of lowercase alphabets. -----Output----- Print the minimum number of characters that need to be changed so that no two neighboring characters in the string are the same. -----Examples----- Input aab Output 1 Input aaaa Output 3 Input abcdefgh Output 0 Input abacabadabacaba Output 0 -----Note----- In the first sample, it is enough to change the second character from \'a\' to \'b\', resulting in the string \\"abb\\". In the second sample, you need to change three characters, there are multiple valid solutions like \\"abab\\" or \\"baba\\". In the third sample, the given string already has no two neighboring characters being the same. In the fourth sample, although there are repeated characters, they are not neighboring, hence no change is needed.","solution":"def min_changes_to_avoid_repeats(s): This function calculates the minimum number of changes to be made to the string such that no two adjacent characters are the same. changes = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: changes += 1 return changes"},{"question":"You are given a grid with dimensions n x m. This grid is filled with non-negative integers. Two players play a game on this grid. They take turns to pick an integer from the grid. In each turn, a player picks an integer from the grid that hasn\'t been picked yet and removes that integer from the grid. The game starts with the first player picking any number from the grid. After that, the second player has to pick a number that is adjacent (horizontally or vertically) to the previously picked number. The players continue to alternate turns picking adjacent numbers. A player cannot make a move if there are no remaining integers adjacent to the last picked integer. The game ends when no valid move is possible, and the player who cannot make a move loses the game. Determine who will win the game if both players play optimally. -----Input----- The first line contains two integers, n and m (1 ≤ n, m ≤ 100). Each of the next n lines contains m non-negative integers representing the grid. -----Output----- Print \\"First\\" if the first player wins, otherwise print \\"Second\\" (without the quotes). -----Examples----- Input 3 3 1 2 3 4 5 6 7 8 9 Output First Input 2 2 1 2 3 4 Output First Input 1 1 0 Output Second","solution":"def who_wins(n, m, grid): Determines the winner if both players play optimally. Parameters: n (int): number of rows m (int): number of columns grid (list of list of int): grid of non-negative integers Returns: str: \\"First\\" if the first player wins, otherwise \\"Second\\" if n == 1 and m == 1: return \\"Second\\" else: return \\"First\\""},{"question":"You are given an integer array \\"nums\\" consisting of non-negative integers and an integer target. Your task is to determine if there are three distinct indices (i, j, k) in the array such that the sum of nums[i], nums[j], and nums[k] is equal to target. Constraints * 3 ≦ |nums| ≦ 10^3 * 0 ≦ nums[i] ≦ 10^6 * 0 ≦ target ≦ 3*10^6 Input The input is given from Standard Input in the following format: ``` n nums[1] nums[2] ... nums[n] target ``` Output Print `YES` if there are three distinct indices (i, j, k) such that `nums[i] + nums[j] + nums[k] = target`. Print `NO` otherwise. Examples Input ``` 5 1 2 3 4 5 9 ``` Output ``` YES ``` Input ``` 4 1 2 3 4 10 ``` Output ``` NO ``` Input ``` 6 1 4 45 6 10 8 22 ``` Output ``` YES ```","solution":"def three_sum(nums, target): Determine if there are three distinct indices (i, j, k) such that the sum of nums[i], nums[j], and nums[k] equals to target. Params: nums: List[int] - the list of non-negative integers target: int - the target sum value Returns: str: \\"YES\\" if such indices exist, \\"NO\\" otherwise nums.sort() n = len(nums) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return \\"YES\\" elif current_sum < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"The \\"FruitCo\\" firm has n employees, and each employee is either a coder or a tester. The firm wants to organize a workshop and needs some employees to teach the skills they aren\'t familiar with. The goal is to have sufficient teaching rounds so that every coder knows how to test and every tester knows how to code. Teaching a skill in one round costs 1 credit. Find the minimum number of credits required to ensure all employees possess both coding and testing skills. -----Input----- The first line contains an integer n (2 ≤ n ≤ 100) — the number of employees. Then n lines follow — each employee\'s skill set. The i-th line contains exactly one character \'C\' or \'T\'. \'C\' indicates that the i-th employee is a coder, and \'T\' indicates that the i-th employee is a tester. The output should be a single integer representing the minimum number of credits needed so that in the end, every employee is skilled in both coding and testing. -----Output----- Print a single integer — the minimum number of credits required to achieve the goal. -----Examples----- Input 5 C T C C T Output 2 Input 3 T T C Output 1 Input 4 T T T T Output 4 -----Note----- In the first sample, you can have two workshops: one with a coder teaching testing and another with a tester teaching coding. In the second sample, you only need one teaching session where the coder can teach the testers. In the third sample, each tester needs individual attention from an external coder since no coders are initially present.","solution":"def min_teaching_rounds(n, employees): Returns the minimum number of credits required to have all employees skilled in both coding and testing. count_coders = employees.count(\'C\') count_testers = n - count_coders # since all employees are either C or T return min(count_coders, count_testers)"},{"question":"Mario is a collector of rare coins. He has a collection of N coins, each with a certain value. Mario wants to showcase his collection, but he has a condition: Every day, he can showcase a maximum of one coin that has a strictly higher value than all the coins he has showcased so far. Mario asks for your help to determine the maximum number of coins he can showcase. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers V_1, V_2, …, V_N denoting the values of the coins. -----Output----- For each test case, print a single line containing one integer — the maximum number of coins Mario can showcase. -----Constraints----- - 1 le T le 1,000 - 1 le N le 10^5 - 1 le V_i le 10^6 - the sum of N over all test cases does not exceed 10^6 -----Example Input----- 3 5 1 2 3 4 5 4 4 3 2 1 6 1 3 2 5 4 6 -----Example Output----- 5 1 4 -----Explanation----- Example case 1: Mario can showcase all his coins in increasing order of their values. Example case 2: Since every coin has a value lower than the previous one, Mario can only showcase the first coin. Example case 3: Mario can showcase the coins in the following order: 1, 3, 5, 6. The coins 2 and 4 cannot be showcased because they do not have strictly higher values than all previously showcased coins.","solution":"def max_showcase_count(N, values): Determine the maximum number of coins Mario can showcase. Parameters: N (int): The number of coins. values (list of int): The values of the coins. Returns: int: The maximum number of coins that can be showcased. if N == 0: return 0 # The current highest value that has been showcased max_value = values[0] count = 1 # The first coin is always showcased for value in values[1:]: if value > max_value: count += 1 max_value = value return count def process_input(input_list): Process the input as required to solve for multiple test cases. Parameters: input_list (list of str): The raw input split by lines. Returns: list of int: A list of results for each test case. current_line = 0 T = int(input_list[current_line]) current_line += 1 results = [] for _ in range(T): N = int(input_list[current_line]) current_line += 1 values = list(map(int, input_list[current_line].split())) current_line += 1 result = max_showcase_count(N, values) results.append(result) return results"},{"question":"# Scenario **_A group of competitors_** are participating in a multi-stage race. *Each stage of the race has a certain time value* in minutes, **_and the total race time for each competitor is the sum of their times_** in each stage. ___ # Task **_Given_** *a 2D array of positive integers*, **_where each subarray represents the times for one competitor_** across all stages, **_return_** *an array of integers* **_where each element represents the total race time_** for each competitor. ___ # Notes * **_Array size_** is *at least 1*. * **_Each subarray_** will have **the same length**. * **_All numbers_** will be **positive**. ___ # Input >> Output Examples ``` raceTimes([[10, 15, 20], [12, 18, 22], [14, 20, 13]]) ==> return [45, 52, 47] ``` **_Explanation_**: **_First competitor\'s total time_** is `10 + 15 + 20 = 45`, **_Second competitor\'s total time_** is `12 + 18 + 22 = 52`, and **_Third competitor\'s total time_** is `14 + 20 + 13 = 47`. ___ ``` raceTimes([[25, 35, 45, 55], [30, 40, 50, 60], [20, 30, 40, 50]]) ==> return [160, 180, 140] ``` **_Explanation_**: **_First competitor\'s total time_** is `25 + 35 + 45 + 55 = 160`, **_Second competitor\'s total time_** is `30 + 40 + 50 + 60 = 180`, and **_Third competitor\'s total time_** is `20 + 30 + 40 + 50 = 140`. ___ ``` raceTimes([[8], [10], [15]]) ==> return [8, 10, 15] ``` **_Explanation_**: **_First competitor\'s total time_** is `8`, **_Second competitor\'s total time_** is `10`, and **_Third competitor\'s total time_** is `15`. ___ ___ ___ # [Learning with Arrays Series](https://www.codewars.com/collections/learning-with-arrays) # [Practice Using Lists/Arrays Series](https://www.codewars.com/collections/practice-using-lists-arrays) # [Keep Enjoying Coding](http://www.codewars.com/users/ZizouScream/authored) ___ ALL contributions are appreciated Enjoy Coding !! # Zizou","solution":"def raceTimes(times): Given a 2D array of positive integers where each subarray represents the times for one competitor across all stages, return an array of integers where each element represents the total race time for each competitor. Args: times (list of list of int): 2D array representing the race times of competitors Returns: list of int: Total race time for each competitor return [sum(competitor_times) for competitor_times in times]"},{"question":"As a software developer, you are tasked with writing a filter function to process a list of numbers and return only the prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Your function should receive a list of integers and return a new list consisting only of the prime numbers found in the input list. To accomplish this, you should implement a helper function to determine if a number is prime. Input The input contains a single line with an integer n (1 ≤ n ≤ 100) indicating the number of elements in the list, followed by n space-separated integers. Output The output should be a single line with space-separated prime numbers in the order they appeared in the input list. If there are no prime numbers in the input, output an empty line. Examples Input 6 10 15 17 23 25 30 Output 17 23 Input 4 4 6 8 10 Output","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def filter_primes(numbers): Filter the list and return only prime numbers. return [num for num in numbers if is_prime(num)]"},{"question":"In a digital file storage system, files are organized in a nested folder structure. Each folder in the system can contain subfolders and files. Files have a size associated with them, and any folder can have a maximum allowable total size for the combined sizes of all its contents (including subfolders and their files). You are required to write a function that calculates whether the overall structure adheres to the given size constraints. The structure of the folder system will be represented as nested dictionaries, where each key is either a folder or a file. Folder keys map to other dictionaries (subfolders or files), while file keys map to their sizes (positive integers). Input: - A dictionary that represents the folder structure. Each key in the dictionary is either a folder or a file, and each value is either: - A dictionary representing the contents of a folder, or - An integer representing the size of a file. - A dictionary that provides the maximum allowable size for each folder. Each key is a string representing the folder name, and each value is an integer representing the maximum allowable size for that folder. This dictionary will only contain entries for folders (not files). Output: - A single boolean value, `True` if the folder structure adheres to all the size constraints, `False` otherwise. Function Signature: ```python def check_storage_constraints(folder_structure: dict, folder_constraints: dict) -> bool: ``` Examples: ```python folder_structure_1 = { \\"root\\": { \\"subfolder1\\": { \\"file1.txt\\": 100, \\"file2.txt\\": 200 }, \\"subfolder2\\": { \\"subsubfolder1\\": { \\"file3.txt\\": 150, \\"file4.txt\\": 100 }, \\"file5.txt\\": 300, }, \\"file6.txt\\": 400 } } folder_constraints_1 = { \\"root\\": 1200, \\"subfolder1\\": 400, \\"subfolder2\\": 600, \\"subsubfolder1\\": 300 } print(check_storage_constraints(folder_structure_1, folder_constraints_1)) # True folder_structure_2 = { \\"root\\": { \\"subfolder1\\": { \\"file1.txt\\": 100, \\"file2.txt\\": 200 }, \\"subfolder2\\": { \\"subsubfolder1\\": { \\"file3.txt\\": 150, \\"file4.txt\\": 100 }, \\"file5.txt\\": 300, }, \\"file6.txt\\": 400 } } folder_constraints_2 = { \\"root\\": 1000, \\"subfolder1\\": 400, \\"subfolder2\\": 600, \\"subsubfolder1\\": 300 } print(check_storage_constraints(folder_structure_2, folder_constraints_2)) # False ``` Explanation: - In the first example, the structure adheres to the constraints: \\"root\\" (1200 >= 1250), \\"subfolder1\\" (400 >= 300), \\"subfolder2\\" (600 >= 550), \\"subsubfolder1\\" (300 >= 250). - In the second example, the structure exceeds the constraint on \\"root\\" (1000 < 1250).","solution":"def check_storage_constraints(folder_structure: dict, folder_constraints: dict) -> bool: def calculate_folder_size(folder): size = 0 for item, content in folder.items(): if isinstance(content, dict): size += calculate_folder_size(content) else: size += content return size def verify_constraints(folder, folder_name): current_size = calculate_folder_size(folder) if folder_name in folder_constraints and current_size > folder_constraints[folder_name]: return False for subfolder, content in folder.items(): if isinstance(content, dict): if not verify_constraints(content, subfolder): return False return True # We assume the root of the structure is always named \\"root\\" return verify_constraints(folder_structure, \\"root\\")"},{"question":"Given an array of positive integers, determine if it is possible to reorder it such that every adjacent pair of numbers has a Greatest Common Divisor (GCD) of 1. If such a reordering is possible, return \\"YES\\"; otherwise, return \\"NO\\". Input: - An integer N representing the number of elements in the array. - An array of N positive integers a_1, a_2, ..., a_N. Output: - A string \\"YES\\" or \\"NO\\". Constraints: - 1 ≤ N ≤ 10^3 - 1 ≤ a_i ≤ 10^5 Input Example: 6 14 3 2 5 9 6 Output Example: YES Explanation: One possible reordering is [3, 2, 5, 6, 9, 14]. Every adjacent pair [3, 2], [2, 5], [5, 6], [6, 9] and [9, 14] has a GCD of 1.","solution":"import math from itertools import permutations def can_reorder_to_gcd_one(arr): Determines if it is possible to reorder the array such that every adjacent pair of numbers has a GCD of 1. :param arr: A list of positive integers. :return: \\"YES\\" if possible to reorder, \\"NO\\" otherwise. n = len(arr) # Try all permutations of the array and check the GCD of adjacent pairs for perm in permutations(arr): if all(math.gcd(perm[i], perm[i+1]) == 1 for i in range(n - 1)): return \\"YES\\" return \\"NO\\""},{"question":"Given an integer N, print the sum of the first N natural numbers. -----Constraints----- - 1 ≤ N ≤ 10^6 -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the sum of the first N natural numbers. -----Sample Input----- 5 -----Sample Output----- 15 Explanation: The sum of the first 5 natural numbers (1 + 2 + 3 + 4 + 5) is 15.","solution":"def sum_of_natural_numbers(N): Returns the sum of the first N natural numbers. return (N * (N + 1)) // 2"},{"question":"*Professor X has decided to test his students on their ability to manipulate arrays. He requires them to solve the following problem:* Given an array of N integers and an integer K, determine the length of the longest subarray in which the sum of its elements is less than or equal to K. ------ Input Format ------ - The first line of the input contains a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains two space-separated integers N and K. - The second line contains N space-separated integers representing the elements of the array. ------ Output Format ------ For each test case, print the length of the longest subarray whose sum is less than or equal to K. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^9 |Elements of the array | ≤ 10^4 Note: The sum of N over all test cases does not exceed 10^6. ------ Sample Input 1 ------ 2 5 10 1 2 3 4 5 8 15 3 1 2 1 1 1 1 1 ------ Sample Output 1 ------ 4 8 ------ Explanation 1 ------ Test case 1: The longest subarray with a sum less than or equal to 10 is {1, 2, 3, 4}. Test case 2: The entire array already has a sum less than or equal to 15. The length is 8.","solution":"def longest_subarray_length(arr, N, K): Returns the length of the longest subarray with sum less than or equal to K. max_len = 0 current_sum = 0 start = 0 for end in range(N): current_sum += arr[end] while current_sum > K: current_sum -= arr[start] start += 1 max_len = max(max_len, end - start + 1) return max_len def solve(test_cases): results = [] for N, K, arr in test_cases: result = longest_subarray_length(arr, N, K) results.append(result) return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, K = map(int, lines[index].split()) arr = list(map(int, lines[index + 1].split())) test_cases.append((N, K, arr)) index += 2 return test_cases"},{"question":"Tracy is planning to distribute packets of candies to children attending a party. She wants to make sure that each child receives a distinct number of candies. Since she doesn\'t want to end up with too many leftover candies, she prefers to distribute the candies in such a way that the absolute difference between the number of candies a child receives and the number of candies the next child receives is minimized. Given `N` children, your task is to find the number of candies each child receives such that each child gets a distinct number of candies and the absolute differences between consecutive distributions are minimized. Assume the children are labeled from 1 to N. -----Input----- - A single integer, `N`, denoting the number of children. -----Output----- - A single line containing `N` distinct integers, the i-th of which represents the number of candies given to the i-th child, such that the absolute differences between the numbers of candies given to consecutive children is minimized. -----Constraints----- - 2 ≤ N ≤ 50 -----Sample Input----- 5 -----Sample Output----- 1 2 3 4 5 -----Explanation----- For `N = 5`, there are 5 children. The minimal distinct numbers that can be given while minimizing the absolute difference between consecutive numbers are `1, 2, 3, 4, and 5`. The differences between each pair of consecutive numbers are all `1`, which is the smallest possible difference for this set size. Similar sets for other values of `N` can be trivially determined for minimal differences.","solution":"def distribute_candies(N): Distributes candies to children in such a way that each child gets a distinct number of candies and the absolute differences between consecutive distributions are minimized. Args: N (int): Number of children Returns: List[int]: List of integers representing the number of candies each child gets return list(range(1, N + 1)) # Example usage: # print(distribute_candies(5)) # Output: [1, 2, 3, 4, 5]"},{"question":"Given a sequence of integers, we want to find an integer `k` such that it minimizes the sum of absolute differences between each element in the sequence and `k`. Specifically, given an integer array `a` of length `n`, determine the value of `k` that minimizes the sum defined as follows: Sum = |a[0] - k| + |a[1] - k| + ... + |a[n-1] - k| If there are multiple values of `k` that achieve the minimum sum, return the smallest one. Input The first line contains an integer `n` (1 ≤ n ≤ 10^6) — the length of the array. The second line contains `n` integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print the value of `k` that minimizes the sum of absolute differences. Example Input 4 1 2 3 4 Output 2 Input 5 3 5 8 2 6 Output 5 Note In the first test case, the possible values for `k` are: - k = 1: Sum = |1-1| + |2-1| + |3-1| + |4-1| = 0 + 1 + 2 + 3 = 6 - k = 2: Sum = |1-2| + |2-2| + |3-2| + |4-2| = 1 + 0 + 1 + 2 = 4 - k = 3: Sum = |1-3| + |2-3| + |3-3| + |4-3| = 2 + 1 + 0 + 1 = 4 - k = 4: Sum = |1-4| + |2-4| + |3-4| + |4-4| = 3 + 2 + 1 + 0 = 6 The minimum sum is 4 when k is either 2 or 3. Since 2 is the smallest, the output is 2. In the second test case, the sorted array is `[2, 3, 5, 6, 8]`. Here, selecting the median minimizes the sum of absolute differences. The median of the elements is 5, thus the output is 5.","solution":"def find_minimizing_k(arr): Finds an integer k such that it minimizes the sum of absolute differences between each element in the input array and k. arr.sort() n = len(arr) # median minimizes the sum of absolute differences median = arr[(n-1) // 2] return median"},{"question":"Problem Statement You are given a string containing only the characters \'a\' and \'b\'. Your task is to transform the string into a palindrome by removing the minimum number of characters. A palindrome is a string that reads the same backward as forward. Input The input consists of a single line containing the string (1 leq |s| leq 2,000), where |s| is the length of the string. Output Print the minimum number of characters to be removed to transform the input string into a palindrome. Example Input abbaa Output 1 Explanation By removing the character \'b\' at the third position, the string becomes \\"abba\\", which is a palindrome. Input aabab Output 2 Explanation By removing the characters \'a\' at the second position and \'b\' at the fourth position, the string becomes \\"aba\\", which is a palindrome.","solution":"def min_removals_to_palindrome(s): Calculates the minimum number of characters to be removed to transform the input string into a palindrome. n = len(s) # Create a DP table where dp[i][j] represents the minimum number of removals # to make the substring s[i:j+1] a palindrome. dp = [[0] * n for _ in range(n)] # Fill the table for length in range(2, n + 1): # length of substrings for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"You are given n points on a 2D plane. Each point has an initial integer coordinate (x_i, y_i). Your task is to transform these points such that after the transformation, all the points have integer coordinates, and none of the points share the same x-coordinate or y-coordinate with any other point. In other words, all new x-coordinates must be distinct, and all new y-coordinates must be distinct. You may achieve this transformation by adding or subtracting some integer d to the x-coordinates and y-coordinates of each point. Formally, for each point (x_i\', y_i\') resulting from transforming (x_i, y_i), there exists an integer d such that: [ x_i\' = x_i + d ] [ y_i\' = y_i - d ] For example, if the points initially are (1, 1), (2, 3), and (3, 2), by setting d = 1: [ (1 + 1, 1 - 1) = (2, 0) ] [ (2 + 1, 3 - 1) = (3, 2) ] [ (3 + 1, 2 - 1) = (4, 1) ] Notice that in this new configuration, x-coordinates and y-coordinates are all distinct. Write a program to determine the appropriate transformations to achieve this. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 100) — the number of points. The next n lines of each test case contain two integers each, x_i and y_i (1 le x_i, y_i le 1000) — the coordinates of the points. -----Output----- For each test case, print n lines, containing the transformed coordinates of each point (x_i\', y_i\'). Each point should be on a new line and the coordinates should be separated by a space. Ensure that all transformed coordinates satisfy the conditions mentioned. -----Example----- Input 1 3 1 1 2 3 3 2 Output 2 0 3 2 4 1 -----Note----- In the example test case, when using d = 1, the points (1 + 1, 1 - 1), (2 + 1, 3 - 1), and (3 + 1, 2 - 1) were generated such that all x-coordinates (2, 3, 4) and y-coordinates (0, 2, 1) are distinct.","solution":"def transform_points(t, test_cases): results = [] for case in test_cases: n, points = case transformed_points = [] for i, (x, y) in enumerate(points): d = i # increment d for each point to ensure distinctness x_prime = x + d y_prime = y - d transformed_points.append((x_prime, y_prime)) results.append(transformed_points) return results"},{"question":"You are given a collection of books, each defined by a single title which is a string. You want to organize these books alphabetically by their titles. However, the titles are not case-sensitive, meaning \\"Book\\" and \\"book\\" should be treated as the same. Additionally, when two or more books have the same title when case is ignored, you need to preserve their original relative order. Your task is to write a program that takes a list of book titles and outputs the titles sorted alphabetically in a case-insensitive manner, while preserving the original order for titles that are equivalent in a case-insensitive comparison. **Input** The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of books. The next n lines contain one string each, representing the title of a book. Each title consists of between 1 and 100 characters, inclusive, and contains only printable ASCII characters (excluding the space character). **Output** Output the titles of the books sorted alphabetically in a case-insensitive manner, each on a new line. **Example** **Input** ``` 5 Zoo apple Apple book Book ``` **Output** ``` apple Apple book Book Zoo ``` **Input** ``` 3 aA Aa bB ``` **Output** ``` aA Aa bB ``` **Note** In the first example, the titles \\"apple\\" and \\"Apple\\" are considered equivalent in a case-insensitive manner, so they are listed in their original order. The same applies to \\"book\\" and \\"Book\\".","solution":"def sort_books(n, book_titles): Sorts the list of book titles in a case-insensitive manner while preserving the relative order of the books with the same titles when case is ignored. Parameters: n (int): Number of book titles book_titles (list of str): List containing the book titles Returns: list of str: A list of book titles sorted alphabetically in a case-insensitive manner return sorted(book_titles, key=str.lower) # Example usage: # book_titles = [\\"Zoo\\", \\"apple\\", \\"Apple\\", \\"book\\", \\"Book\\"] # n = len(book_titles) # sorted_titles = sort_books(n, book_titles) # for title in sorted_titles: # print(title)"},{"question":"A developer team is working on a large string processing project. One of the tasks that they need to implement is a function that identifies palindromic substrings within a given string. A substring is a contiguous sequence of characters within the string that reads the same backward as forward. The team has decided to limit the scope of this task to finding the longest palindromic substring in any given input string. If there are multiple longest palindromic substrings of the same length, they have opted to return the first one occurring in the string. -----Input----- A single line containing a non-empty string s of length between 1 and 1000. The string includes only lowercase English letters. -----Output----- Output the longest palindromic substring in s. If there are multiple substrings of the same maximum length, output the first one. -----Examples----- Input babad Output bab Input cbbd Output bb Input a Output a Input racecar Output racecar -----Note----- In the first test sample, the longest palindromic substring is \\"bab\\" and \\"aba\\". However, \\"bab\\" comes first in the input string. In the second test sample, \\"bb\\" is the longest palindromic substring. In the third test sample, the string itself is the longest palindromic substring. In the fourth test sample, the whole string \\"racecar\\" is the longest palindromic substring.","solution":"def longest_palindromic_substring(s): This function returns the longest palindromic substring of s. If there are multiple substrings of the same maximum length, it returns the first one. n = len(s) if n == 0: return \\"\\" start = 0 max_length = 1 for i in range(n): # Odd length palindromes centered at i low, high = i, i while low >= 0 and high < n and s[low] == s[high]: current_length = high - low + 1 if current_length > max_length: start = low max_length = current_length low -= 1 high += 1 # Even length palindromes centered between i and i + 1 low, high = i, i + 1 while low >= 0 and high < n and s[low] == s[high]: current_length = high - low + 1 if current_length > max_length: start = low max_length = current_length low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Emma and Olivia are playing a card game. They each have a deck of cards, with Emma\'s deck containing N cards and Olivia\'s deck containing M cards. Each card has an integer value written on it. Emma and Olivia will take turns drawing one card from the top of their respective decks, starting with Emma. The game continues until one of the decks is empty. The objective is to determine the total score for both Emma and Olivia. Each player\'s score is the sum of the values of the cards they have drawn. Given the initial state of both decks, calculate the final scores of both Emma and Olivia when the game ends. -----Constraints----- - 1 ≤ N, M ≤ 10^5 - Each card\'s value is an integer within the range -10^3 to 10^3 -----Input----- The input is given from Standard Input in the following format: ``` N a1 a2 a3 ... aN M b1 b2 b3 ... bM ``` Where: - The first line contains the integer N. - The second line contains N integers a1, a2, ..., aN, representing the values of the cards in Emma\'s deck from top to bottom. - The third line contains the integer M. - The fourth line contains M integers b1, b2, ..., bM, representing the values of the cards in Olivia\'s deck from top to bottom. -----Output----- Print two integers, representing Emma\'s total score and Olivia\'s total score, separated by a space. -----Sample Input----- 4 3 2 1 4 3 5 -1 2 -----Sample Output----- 6 6 Emma draws 3, Olivia draws 5 -> scores: Emma 3, Olivia 5 Emma draws 2, Olivia draws -1 -> scores: Emma 5, Olivia 4 Emma draws 1, Olivia draws 2 -> scores: Emma 6, Olivia 6 At this point, Olivia\'s deck is empty, so the game ends. Final scores are 6 for Emma and 6 for Olivia.","solution":"def calculate_scores(N, Emma, M, Olivia): emma_score = 0 olivia_score = 0 min_length = min(N, M) # Both Emma and Olivia draw cards until one deck is empty for i in range(min_length): emma_score += Emma[i] olivia_score += Olivia[i] return emma_score, olivia_score"},{"question":"You are in charge of managing a series of servers in a data center. Each server has a certain number of processes running on it. Occasionally, processes terminate, creating unused slots that you aim to occupy by starting new processes to maximize utilization. The processes and the number of slots they take are stored in a list. You want to fill as many of the available slots as possible with a set of new processes, choosing from a subset of the servers (in contiguous blocks), while also not exceeding the total number of slots available on any individual server. You need to find the maximum number of slots you can occupy with the new processes under these constraints. Input The first line contains two space-separated integers n (1 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 10^5), where n denotes the number of servers and m indicates the number of new processes. The next line contains n space-separated integers, where the i-th integer represents the number of available slots on the i-th server. The final line contains m space-separated integers, where the j-th integer represents the number of slots required by the j-th process. Output Print a single integer — the maximum number of slots occupied with the new processes. SAMPLE INPUT 5 3 4 6 2 7 5 3 2 1 SAMPLE OUTPUT 6 Explanation Consider the contiguous block of servers [6, 2, 7, 5]. We can fit all new processes into the servers as follows: a process requiring 3 slots goes to the first server (remaining 3 slots on the first server), a process requiring 2 slots goes to the second server (remaining 4 slots on the second server), and a process requiring 1 slot goes to the second server (remaining 3 slots on the second server). Therefore, the total number of slots occupied is 3 + 2 + 1 = 6.","solution":"def max_slots_occupied(n, m, server_slots, process_slots): # Sort the process slots in descending order process_slots.sort(reverse=True) max_occupied = 0 for i in range(n): current_occupied = 0 used_processes = [False] * m for j in range(i, n): for k in range(m): if not used_processes[k] and server_slots[j] >= process_slots[k]: server_slots[j] -= process_slots[k] current_occupied += process_slots[k] used_processes[k] = True max_occupied = max(max_occupied, current_occupied) # Reset server slots server_slots = [server_slots[kk] + sum(process_slots[k] for k in range(m) if used_processes[k]) if ii == i else server_slots[kk] for ii, kk in enumerate(range(len(server_slots)))] return max_occupied"},{"question":"Given a list of N integers, the task is to find the largest positive integer P such that P is a factor of the sum of the integers in the list and P is also the greatest common divisor (GCD) of a subset of the given list. You are required to write a function to determine P for each of the test cases. ------ Input Format ------ - The first line contains an integer T denoting the number of test cases. The T test cases then follow. - The first line of each test case contains an integer N. - The second line contains N space-separated integers A1, A2, ..., AN representing the list of integers. ------ Output Format ------ - For each testcase, output in a single line the value of P. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ A_i ≤ 10^{6} ------ Sample Input 1 ------ 2 4 4 8 12 16 6 18 24 30 42 48 54 ------ Sample Output 1 ------ 4 6 ------ Explanation ------ Testcase 1: The sum of the list is 40. The largest positive integer P that is a factor of 40 and also a GCD of some subset of the list is 4. For example, the subset {4, 8, 12, 16} has a GCD of 4. Testcase 2: The sum of the list is 216. The largest positive integer P that is a factor of 216 and also a GCD of some subset of the list is 6. For example, the subset {18, 24, 30, 42, 48, 54} has a GCD of 6.","solution":"from math import gcd from functools import reduce def find_largest_p(N, arr): Given a list of N integers, this function returns the largest positive integer P such that P is a factor of the sum of the integers in the list and P is also the greatest common divisor (GCD) of a subset of the given list. def gcd_multiple(numbers): return reduce(gcd, numbers) total_sum = sum(arr) max_p = 1 # Initialize max_p to 1, the smallest possible positive integer factor of any sum # Finding the GCD of the entire list first, as any subset\'s GCD must be a divisor of this overall_gcd = gcd_multiple(arr) # We will check divisors starting from the largest possible down to 1 for p in range(overall_gcd, 0, -1): if total_sum % p == 0: return p def solve(test_cases): results = [] for N, arr in test_cases: results.append(find_largest_p(N, arr)) return results"},{"question":"Given an array nums of n integers, return the number of triplets (i, j, k) such that 0 <= i < j < k < n and nums[i] + nums[j] + nums[k] == 0. Example 1: Input: nums = [-1, 0, 1, 2, -1, -4] Output: 2 Explanation: The two triplets are: [-1, 0, 1] and [-1, -1, 2]. Example 2: Input: nums = [] Output: 0 Your Task: You don\'t have to read input or print anything. Your task is to complete the function countTriplets() which takes the array nums and returns the count of triplets that sum up to zero. Expected Time Complexity: O(n^2) Expected Space Complexity: O(1) (excluding input array) Constraints: 0 <= nums.length <= 3 x 10^3 -10^5 <= nums[i] <= 10^5","solution":"def countTriplets(nums): Returns the number of triplets (i, j, k) such that 0 <= i < j < k < n and nums[i] + nums[j] + nums[k] == 0. nums.sort() # Sorting the array n = len(nums) triplet_count = 0 for i in range(n - 2): # Skip the duplicate element for `i`. if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == 0: triplet_count += 1 left += 1 right -= 1 # Skip the duplicate elements for `left`. while left < right and nums[left] == nums[left - 1]: left += 1 # Skip the duplicate elements for `right`. while left < right and nums[right] == nums[right + 1]: right -= 1 elif current_sum < 0: left += 1 else: right -= 1 return triplet_count"},{"question":"You are tasked with creating a ranking system for a coding competition. This competition consists of several rounds, and each round has several problems, each with points assigned to them. At the end of each round, participants receive a summary of problems they attempted and the points they scored on each problem. Your job is to determine the total points each participant has accumulated after all rounds of the competition and rank them based on their total scores. In case of a tie, participants with the same score should share the same rank. -----Input----- - The first line contains a single integer P denoting the number of participants. - The second line contains a single integer R denoting the number of rounds. - The next R blocks describe the rounds. Each block starts with a single integer K denoting the number of problems in that round. - The next K lines describe the problems. Each of these lines starts with a problem identifier (a string) followed by the maximum score for that problem (an integer). - The participants\' scores follow. Each of the next P lines contains the participant\'s name (a string), followed by K integers representing the scores they received on each of those K problems in order. An entry of -1 indicates that the participant did not attempt that problem. -----Output----- Print the final ranking of the participants. For each participant, print their name, total score, and rank. Participants with the same score should have the same rank, and the next rank should reflect the number of participants with the same previous rank. -----Constraints----- - 1 le P le 100 - 1 le R le 10 - 1 le K le 50 - Problem identifiers are strings of length between 1 and 10, consisting of uppercase English letters. - Scores for problems are between 0 and 100. - Each participant\'s name is a string of length between 1 and 50, consisting of uppercase and lowercase English letters and numbers. -----Example Input----- 3 1 3 P1 100 P2 200 P3 300 Alice 50 150 -1 Bob -1 200 250 Charlie 30 100 300 -----Example Output----- Charlie 430 1 Bob 450 1 Alice 200 3 -----Explanation----- Charlie\'s total score is 430 and so is Bob\'s. They both share the 1st rank. Alice has a total score of 200 and comes in at rank 3. Note that since Charlie and Bob share the 1st rank, the next rank after them is 3, not 2.","solution":"def rank_participants(P, R, rounds_data, scores_data): Ranks participants in a coding competition based on their total accumulated points. :param P: Number of participants :param R: Number of rounds :param rounds_data: List containing rounds details with problem identifiers and maximum scores :param scores_data: List containing participants\' names and their scores per round :return: A list of tuples containing participant\'s name, total score, and rank participant_scores = {} for participant in scores_data: name = participant[0] scores = participant[1:] total_score = sum(score for score in scores if score != -1) participant_scores[name] = total_score sorted_scores = sorted(participant_scores.items(), key=lambda x: (-x[1], x[0])) ranked_results = [] current_rank = 1 previous_score = -1 rank_count = 0 for idx, (name, score) in enumerate(sorted_scores): if score != previous_score: current_rank += rank_count rank_count = 1 else: rank_count += 1 ranked_results.append((name, score, current_rank)) previous_score = score return ranked_results"},{"question":"# Problem Context In a game of Solitaire, a common goal is to sort a shuffled deck of cards. For this coding exercise, we will simplify the problem by only focusing on sorting a list of numbers. The task is to implement an **Insertion Sort** algorithm to sort a given list of numbers in ascending order. The insertion sort algorithm is relatively straightforward and works in the following manner: 1. Iterate from the second element to the last element in the list. 2. For each element, compare it with the elements before it (i.e., elements to its left). 3. Find the correct position for the element by shifting the elements that are greater to the right, and then insert the element at the correct position. Use the template provided below to implement the insertion sort algorithm. ```python def insertion_sort(arr): Sorts the list arr using the insertion sort algorithm. Parameters: arr (list of int): A list of integers to be sorted. Returns: list of int: The sorted list in ascending order. # Implement the insertion sort algorithm here ``` **Example:** ```python >>> insertion_sort([29, 10, 14, 37, 13]) [10, 13, 14, 29, 37] >>> insertion_sort([3, 0, 2, 5, -1, 4, 1]) [-1, 0, 1, 2, 3, 4, 5] ``` **Constraints:** - You may assume that the input list will only contain integers. - The input list may contain negative numbers and duplicates. - Your solution should operate in O(n^2) time complexity for the worst-case scenario. - Try to implement the algorithm iteratively without using built-in sort functions.","solution":"def insertion_sort(arr): Sorts the list arr using the insertion sort algorithm. Parameters: arr (list of int): A list of integers to be sorted. Returns: list of int: The sorted list in ascending order. for i in range(1, len(arr)): key = arr[i] j = i - 1 # Move elements of arr[0..i-1], that are greater than key, # to one position ahead of their current position while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"In a certain country, the currency system is a bit unusual. They have coins of various positive integer values, but the values are not necessarily distinct. Your task is to calculate the minimum number of coins required to make an exact sum with a given set of coin values. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of different coin values. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 100) — the values of the coins. The third line contains a single integer m (1 ≤ m ≤ 10000) — the exact sum to make. Output Output a single integer — the minimum number of coins required to make the exact sum m. If it is not possible to make the exact sum, output -1. Examples Input 3 1 2 5 11 Output 3 Input 2 2 5 3 Output -1 Input 4 1 3 4 5 7 Output 2","solution":"def min_coins(n, coin_values, target_sum): Given n coin values, determine the minimum number of coins required to make the exact sum m. If it is not possible to make that sum, return -1. dp = [float(\'inf\')] * (target_sum + 1) dp[0] = 0 for i in range(1, target_sum + 1): for coin in coin_values: if i >= coin: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[target_sum] if dp[target_sum] != float(\'inf\') else -1 # Example usage: # print(min_coins(3, [1, 2, 5], 11)) # Output: 3 # print(min_coins(2, [2, 5], 3)) # Output: -1 # print(min_coins(4, [1, 3, 4, 5], 7)) # Output: 2"},{"question":"A library management system needs to evaluate the available books that adhere to a specified theme. Each book in the list is described by its title and associated themes. Some books might fall under multiple themes, while others may only cover one theme. The system should be able to identify the shortest list of books that cover all the themes specified by the librarian. To achieve this, you need to develop a program that determines the minimum number of books needed to cover all the requested themes. If it\'s not possible to cover all themes with the available books, the program should output \\"impossible\\". Here are the details: Input ``` Multiple datasets are given as input, formatted as follows: m (number of books: integer) title1 t1 themes title2 t2 themes ... titlem tm themes n (number of required themes: integer) theme1 theme2 ... themen ``` - Each book is described over several lines: - titlei (title of the i-th book: string) - ti (number of themes for the i-th book: integer) - themes (space-separated strings representing the themes for the i-th book) - After the book list, the number of required themes and the themes themselves are listed. When m is 0, it signifies the end of input. Output For each dataset, output the minimum number of books required to cover all the themes, or \\"impossible\\" if it cannot be achieved. Example Input ``` 4 Book1 2 Adventure Mystery Book2 1 Romance Book3 3 Adventure ScienceFiction Fantasy Book4 2 Mystery Romance 3 Adventure Mystery Romance 3 BookA 1 Horror BookB 1 Adventure BookC 1 Mystery 2 Adventure Fantasy 0 ``` Output ``` 2 impossible ```","solution":"from itertools import combinations def find_min_books(m, books, n, required_themes): # Edge case where no books are provided if m == 0: return \\"impossible\\" # Helper to check if a combination covers all required themes def covers_all_themes(combo): themes_covered = set() for idx in combo: themes_covered.update(books[idx][1]) return all(theme in themes_covered for theme in required_themes) for r in range(1, m + 1): # Try combinations from 1 to m books for combo in combinations(range(m), r): if covers_all_themes(combo): return r # Return the number of books in the smallest valid combination return \\"impossible\\" # If no valid combination is found def process_input(): results = [] while True: # Read number of books m = int(input()) if m == 0: break # Read books with their titles and themes books = [] for _ in range(m): parts = input().split() title = parts[0] num_themes = int(parts[1]) themes = parts[2:] books.append((title, themes)) # Read number of required themes n = int(input()) required_themes = [] for _ in range(n): required_themes.append(input()) # Find and store the result for the current dataset result = find_min_books(m, books, n, required_themes) results.append(result) return results"},{"question":"Given a multi-dimensional array of integers representing an `MxN` matrix, write a function to find the largest sum of any contiguous submatrix within this matrix. For example, given the following matrix: ``` [ [1, -2, 1, 0], [-1, 3, 4, -5], [2, -1, 2, 1], [-3, 4, -2, 1] ] ``` the function should return `10`, which is the sum of the submatrix: ``` [ [3, 4], [-1, 2, 1], [4] ] ``` **Constraints:** - The matrix will have at least `1` row and `1` column. - The elements of the matrix will be integers, both positive and negative. **Note:** The identified submatrix must be contiguous in both rows and columns.","solution":"def largest_sum_submatrix(matrix): if not matrix or not matrix[0]: return 0 max_sum = float(\'-inf\') n_rows, n_cols = len(matrix), len(matrix[0]) for left in range(n_cols): temp_row_sum = [0] * n_rows for right in range(left, n_cols): for row in range(n_rows): temp_row_sum[row] += matrix[row][right] # Using Kadane\'s algorithm to find the maximum sum subarray for each pair of columns current_max = temp_row_sum[0] global_max = temp_row_sum[0] for k in range(1, len(temp_row_sum)): current_max = max(temp_row_sum[k], current_max + temp_row_sum[k]) global_max = max(global_max, current_max) max_sum = max(max_sum, global_max) return max_sum"},{"question":"A company has N employees and a list of direct dependencies among them. Each dependency is represented as an ordered pair (a, b) indicating that employee a directly depends on employee b. The company wants to determine if it is possible to assign tasks to the employees such that each employee can complete their task independently when it is their turn. To achieve this, there must be a valid ordering of the employees such that for every dependency (a, b), employee b appears before employee a in the ordering. Write a function that determines if a valid task ordering is possible for a given set of dependencies. If it is possible, return any valid ordering of employees. If it is not possible, return an empty list. Input: - A single integer N (2 ≤ N ≤ 1000) representing the number of employees. - An integer M (0 ≤ M ≤ 2000) representing the number of dependencies. - M lines each containing two integers a and b (1 ≤ a, b ≤ N, a ≠ b) representing a dependency that employee a depends on employee b. Output: Return a list of integers representing a valid ordering of employees if possible. If no valid ordering exists, return an empty list. Example 1: Input: 5 4 1 2 2 3 3 4 4 5 Output: [5, 4, 3, 2, 1] Example 2: Input: 3 3 1 2 2 3 3 1 Output: [] Note: In the first example, employee 5 has no dependencies and can be placed first. Then, tasks of employees 4, 3, 2, and 1 can be completed sequentially. In the second example, there is a cycle (1 → 2 → 3 → 1), making it impossible to find a valid ordering.","solution":"from collections import defaultdict, deque def find_task_order(N, M, dependencies): Determines a valid task ordering based on dependencies. Args: N: int - number of employees. M: int - number of dependencies. dependencies: List[Tuple[int, int]] - list of dependencies (a, b). Returns: list - a valid ordering of employees if possible, otherwise an empty list. # Create adjacency list and in-degree counter adj_list = defaultdict(list) in_degree = defaultdict(int) for a, b in dependencies: adj_list[b].append(a) in_degree[a] += 1 # Initialize queue with employees having no incoming edges queue = deque([i for i in range(1, N + 1) if in_degree[i] == 0]) order = [] while queue: node = queue.popleft() order.append(node) for neighbor in adj_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If we have ordered all employees, return the order, otherwise empty list return order if len(order) == N else []"},{"question":"A group of friends is organizing a secret Santa gift exchange where each person buys a gift for another. To make it fair and secret, each friend should receive exactly one gift, and no one should buy a gift for themselves. You need to write a function that generates a possible allocation of the gift exchange. Input First line contains an integer n (1 ≤ n ≤ 100), the number of friends. Each friend has a unique identifier ranging from 1 to n. Output Print n lines, each containing two integers i and j (1 ≤ i, j ≤ n), indicating that person i buys a gift for person j. Each person should buy exactly one gift and receive exactly one gift, and no one should buy a gift for themselves. Example Input 3 Output 1 2 2 3 3 1 Input 4 Output 1 2 2 3 3 4 4 1","solution":"def secret_santa(n): Generates possible allocation of gift exchanges for secret Santa. Args: n (int): Number of friends Returns: List[Tuple[int, int]]: List containing tuples where each tuple represents the giver and receiver of a gift. return [(i, (i % n) + 1) for i in range(1, n + 1)]"},{"question":"Given a string `s` consisting of lowercase alphabetical characters and an integer `k`, rearrange the string such that the distance between any two identical characters is at least `k`. If it\'s not possible to rearrange the string, return an empty string. # Function Signature ```python def rearrange_string(s: str, k: int) -> str: pass ``` # Input - A string `s` of length `n` where `1 <= n <= 10^4`. - An integer `k` where `0 <= k <= 10^4`. # Output - Return a rearranged string if possible, otherwise return an empty string. # Example ```python s = \\"aabbcc\\" k = 3 Output: \\"abcbac\\" (or any other valid rearrangement) ``` # Note - If `k` is `0`, simply return the original string as no rearrangement is needed. - The output does not need to be unique; any valid rearrangement is acceptable. # Constraints - The rearranged string should maintain the character frequencies of the given string `s`. - The distance between any two identical characters should be at least `k`.","solution":"from heapq import heappush, heappop from collections import Counter, deque def rearrange_string(s: str, k: int) -> str: if k == 0: return s counter = Counter(s) max_heap = [] for char, freq in counter.items(): heappush(max_heap, (-freq, char)) result = [] queue = deque() while max_heap: freq, char = heappop(max_heap) result.append(char) queue.append((char, freq + 1)) if len(queue) >= k: front_char, front_freq = queue.popleft() if front_freq < 0: heappush(max_heap, (front_freq, front_char)) if len(result) == len(s): return \'\'.join(result) else: return \\"\\""},{"question":"Sam is working on a simple text editor to help with his writing tasks. The text editor supports a single operation: insert a character at the end of the text exactly once. The text starts as an empty string. Sam is experimenting with this editor and wants to calculate the number of distinct substrings of the text after inserting a sequence of characters. Given a sequence of characters, determine the number of distinct substrings of the text after the entire sequence is processed. -----Input----- The first line contains an integer n (1 ≤ n ≤ 2000), the length of the sequence of characters. The second line contains a string of length n, consisting of lowercase English letters. -----Output----- Print the number of distinct substrings of the resulting text after processing the input sequence. -----Examples----- Input 3 abc Output 6 Input 4 aaaa Output 4 -----Note----- In the first test, after writing all characters the text will be \\"abc\\". The distinct substrings are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". In the second test, after writing all characters the text will be \\"aaaa\\". The distinct substrings are: \\"a\\", \\"aa\\", \\"aaa\\", \\"aaaa\\".","solution":"def count_distinct_substrings(n, s): Returns the number of distinct substrings of the text after processing the input sequence of length n and consisting of lowercase English letters. substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"Given a positive integer `n`, the task is to find all prime factors of `n` and print them in sorted order. If `n` has no prime factors (i.e., n = 1), print -1. Example 1: Input: n = 28 Output: 2 7 Explanation: The prime factors of 28 are 2 and 7. Example 2: Input: n = 1 Output: -1 Explanation: Number 1 has no prime factors. Example 3: Input: n = 37 Output: 37 Explanation: The prime factors of 37 is 37 itself as it is a prime number. Your Task: Write a function `findPrimeFactors` that takes an integer `n` and returns a list of prime factors of `n` in sorted order. If `n` has no prime factors, return [-1]. Expected Time Complexity: O(sqrt(n) * log(log(n))) Expected Auxiliary Space: O(log(n)) Constraints: 1 <= n <= 10^7","solution":"def findPrimeFactors(n): Returns a list of prime factors of n in sorted order. If n has no prime factors, return [-1]. if n == 1: return [-1] prime_factors = [] # Check for number of 2s that divide n while n % 2 == 0: if 2 not in prime_factors: prime_factors.append(2) n = n // 2 # n must be odd at this point. So a skip of 2 (i.e i = i + 2) can be used for i in range(3, int(n**0.5) + 1, 2): # while i divides n, add i and divide n while n % i == 0: if i not in prime_factors: prime_factors.append(i) n = n // i # Condition if n is a prime number greater than 2 if n > 2: prime_factors.append(n) return prime_factors"},{"question":"A neighborhood is building multiple water fountains along a straight path to improve access to fresh water. Each fountain provides water to a certain radius (distance) on both its left and right side. Given the positions and radii of these fountains, your task is to determine the maximum number of fountains that can be simultaneously tap water at the same point. Input: - The first line contains a single integer, `t`, the number of test cases. - For each test case: - The first line contains an integer, `n`, the number of fountains. - The next `n` lines contain two integers each, `x` and `r`, where `x` is the position of the fountain and `r` is the radius of the fountain. Output: For each test case, output a single integer, representing the maximum number of fountains that can cover the same point simultaneously. Example: Input: 3 3 1 2 4 1 5 2 4 2 3 6 1 8 4 12 2 2 3 1 5 1 Output: 2 2 1 Explanation: Test Case 1: - Fountain at position 1 with radius 2 covers points from -1 to 3. - Fountain at position 4 with radius 1 covers points from 3 to 5. - Fountain at position 5 with radius 2 covers points from 3 to 7. The point 3 is covered by two fountains (the first and the third). Test Case 2: - Fountain at position 2 with radius 3 covers points from -1 to 5. - Fountain at position 6 with radius 1 covers points from 5 to 7. - Fountain at position 8 with radius 4 covers points from 4 to 12. - Fountain at position 12 with radius 2 covers points from 10 to 14. The point 5 is covered by two fountains (the first and the second). Test Case 3: - Fountain at position 3 with radius 1 covers points from 2 to 4. - Fountain at position 5 with radius 1 covers points from 4 to 6. The point 4 is covered by both fountains. Note: In the case where no two fountains overlap, the result is 1, since each fountain can be viewed as covering at least one unique point.","solution":"def max_fountains_with_overlap(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] fountains = test_cases[i][1] intervals = [(x - r, x + r) for x, r in fountains] points = [] for start, end in intervals: points.append((start, \'start\')) points.append((end, \'end\')) points.sort() max_overlap = 0 current_overlap = 0 for point, type in points: if type == \'start\': current_overlap += 1 max_overlap = max(max_overlap, current_overlap) elif type == \'end\': current_overlap -= 1 results.append(max_overlap) return results"},{"question":"After receiving a report from a mysterious island, the scientist wants to analyze the rainfall pattern over several consecutive days. Specifically, the scientist is interested in finding out the longest period during which the daily rainfall amounts followed a strictly increasing or strictly decreasing pattern only once. Input The first line of input contains T, the number of test cases. For each test case, the first line contains an integer N, representing the number of days. The second line contains N space-separated integers R1, R2, ..., RN, where each Ri represents the amount of rainfall on the ith day. Output For each test case, output an integer representing the length of the longest period during which the rainfall amount exhibited a strictly increasing or strictly decreasing pattern exactly once. Constraints 1 <= T <= 100 1 <= N <= 10^5 0 <= Ri <= 10^6 Example Input: 1 10 1 2 3 4 5 4 3 2 1 0 Output: 10 Explanation In the given example, the rainfall amounts increased from day 1 to day 5 and then decreased from day 6 to day 10. The longest period where the pattern changed only once is 10 days.","solution":"def longest_increase_decrease_period(arr): Returns the length of the longest period of strictly increasing followed by strictly decreasing rainfall. if not arr: return 0 n = len(arr) inc = [0] * n dec = [0] * n # Fill increasing sequence lengths inc[0] = 1 for i in range(1, n): if arr[i] > arr[i-1]: inc[i] = inc[i-1] + 1 else: inc[i] = 1 # Fill decreasing sequence lengths dec[n-1] = 1 for i in range(n-2, -1, -1): if arr[i] > arr[i+1]: dec[i] = dec[i+1] + 1 else: dec[i] = 1 # Find the maximum length of increase->decrease period max_len = 0 for i in range(n): if inc[i] > 1 and dec[i] > 1: max_len = max(max_len, inc[i] + dec[i] - 1) return max_len def analyze_rainfall_patterns(T, test_cases): Analyzes the rainfall patterns for T test cases and returns the result for each case. results = [] for i in range(T): N, rainfall = test_cases[i] results.append(longest_increase_decrease_period(rainfall)) return results"},{"question":"A researcher is analyzing various networks of interconnected computers and wants to understand the shortest paths between nodes. The network can be represented as an undirected graph, where nodes are computers and edges are direct connections between them. Each connection has a travel time associated with it. Given this, you need to answer a query about the shortest travel time between two given nodes in the network. You are given an integer `Q`, the number of queries. Each query has two nodes, and you need to determine the shortest travel time between them. Input (formatted): N M Q u1 v1 w1 u2 v2 w2 ... uM vM wM s1 t1 s2 t2 ... sQ tQ where: - `N` is the number of nodes in the network (`1 <= N <= 1000`), - `M` is the number of direct connections (`1 <= M <= 10000`), - `Q` is the number of queries (`1 <= Q <= 5000`), - `ui`, `vi` are the nodes that have a direct connection, - `wi` is the travel time from node `ui` to node `vi` (`1 <= wi <= 1000`), - `si`, `ti` are the nodes for each query. Output: For each query, print the shortest travel time between nodes `si` and `ti`. If there is no path between the nodes, print `-1`. Example: Input: 5 6 2 1 2 3 1 3 4 2 3 1 2 4 6 3 5 2 4 5 2 1 5 2 3 Output: 6 1 Explanation: 1. The shortest path from node 1 to node 5 is through nodes 1-3 and 3-5 with a total travel time of 4+2=6. 2. The shortest path from node 2 to node 3 has a direct connection with a travel time of 1.","solution":"import heapq def dijkstra(graph, start, n): Dijkstra\'s algorithm to find the shortest path from a start node to all other nodes in the graph. distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_paths(n, connections, queries): Finds the shortest travel time between two nodes for multiple queries using Dijkstra\'s algorithm. graph = {i: [] for i in range(1, n + 1)} for u, v, w in connections: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for s, t in queries: distances = dijkstra(graph, s, n) results.append(distances[t] if distances[t] != float(\'inf\') else -1) return results"},{"question":"You are given an integer array A of length N. We want to find a non-empty subarray such that the sum of its elements is minimized out of all such possible subarrays. -----Constraints----- - 1 leq N leq 100 - -10^3 leq A[i] leq 10^3 -----Input----- Input is given from Standard Input in the following format: N A1 A2 A3 ... AN -----Output----- Print the minimal possible sum of a non-empty subarray. -----Sample Input----- 5 3 -4 2 -3 -1 -----Sample Output----- -6 In this case, the subarray [-4, 2, -3, -1] has the minimal possible sum of -6.","solution":"def min_subarray_sum(n, a): Finds the minimal possible sum of a non-empty subarray. Arguments: n -- Length of the array. a -- List of integers. Returns: Minimal possible sum of a non-empty subarray. min_ending_here = float(\'inf\') min_so_far = float(\'inf\') for num in a: min_ending_here = min(min_ending_here + num, num) min_so_far = min(min_so_far, min_ending_here) return min_so_far"},{"question":"You are given a matrix of integers with dimensions N x M. Your task is to replace the minimum number of entries in the matrix such that each row and each column is strictly increasing from left to right and from top to bottom respectively. Input Format The first line of the test case contains two integers N and M - the number of rows and columns in the matrix. The next N lines contain M space-separated integers each, representing the elements of the matrix. Output Format Output the minimal number of entries that must be replaced to make the matrix strictly increasing both row-wise and column-wise. Constraints 1 leq N, M leq 1000 1 leq text{matrix element} leq 10^9 Sample Input #00 3 3 1 2 3 4 2 6 7 8 9 Sample Output #00 1 Sample Input #01 4 4 1 10 20 30 2 11 21 31 3 12 22 32 4 13 23 33 Sample Output #01 0 Sample Input #02 2 2 5 3 2 1 Sample Output #02 3 Explanation In the first sample input, you need to replace matrix[1][1] (2) with a number greater than 4 and less than 6 (e.g., 5) to make the matrix strictly increasing. In the second sample input, the matrix is already strictly increasing row-wise and column-wise, so no replacements are needed. In the third sample input, you can obtain: [ begin{matrix} 1 & 2 3 & 4 end{matrix} ] by replacing three elements.","solution":"def min_replacements_to_make_increasing(matrix): N = len(matrix) M = len(matrix[0]) replacements = 0 def is_valid(x, y, val): if x > 0 and matrix[x-1][y] >= val: return False if y > 0 and matrix[x][y-1] >= val: return False return True for i in range(N): for j in range(M): if (i > 0 and matrix[i][j] <= matrix[i-1][j]) or (j > 0 and matrix[i][j] <= matrix[i][j-1]): valid_val = max(matrix[i-1][j] if i > 0 else -1, matrix[i][j-1] if j > 0 else -1) + 1 matrix[i][j] = valid_val replacements += 1 return replacements # Example usage: matrix1 = [ [1, 2, 3], [4, 2, 6], [7, 8, 9] ] matrix2 = [ [1, 10, 20, 30], [2, 11, 21, 31], [3, 12, 22, 32], [4, 13, 23, 33] ] matrix3 = [ [5, 3], [2, 1] ] print(min_replacements_to_make_increasing(matrix1)) # Output: 1 print(min_replacements_to_make_increasing(matrix2)) # Output: 0 print(min_replacements_to_make_increasing(matrix3)) # Output: 3"},{"question":"You are given a string containing digits and characters. Your task is to find the longest substring containing only digits and output its starting index and length. Input The input contains a single string s (1 ≤ |s| ≤ 10000). Output Output two integers, the starting index and the length of the longest substring containing only digits. If there are multiple longest substrings, output the starting index of the first one. Indices should be 0-based. Examples Input ab1234xyz123 Output 2 4 Input abc98765def32 Output 3 5","solution":"def longest_digit_substring(s): Finds the longest substring containing only digits. Parameters: s (str): Input string Returns: tuple: starting index and length of the longest substring containing only digits max_len = 0 max_start_idx = -1 current_len = 0 current_start_idx = -1 for i, char in enumerate(s): if char.isdigit(): if current_len == 0: current_start_idx = i current_len += 1 else: if current_len > max_len: max_len = current_len max_start_idx = current_start_idx current_len = 0 if current_len > max_len: max_len = current_len max_start_idx = current_start_idx return max_start_idx, max_len"},{"question":"Lina works at an animal shelter and needs to keep track of animal feedings. Each day, she records the time and the type of food given to each animal. Given this information, Lina wants to identify the longest sequence of consecutive feedings where the same type of food was given to the same animal. -----Input----- The first line contains a single integer n (1 le n le 100) — the number of feedings recorded. The next n lines describe the feedings. Each line contains an integer t (1 le t le 1000) — the time of the feeding, a string a (1 le |a| le 100) — the name of the animal, and a string f (1 le |f| le 20) — the type of food. -----Output----- Print the integer representing the longest sequence of consecutive feedings where the same type of food was given to the same animal. -----Examples----- Input 5 1 Rex bones 2 Rex bones 3 Rex meat 4 Rex meat 5 Rex meat Output 3 Input 6 1 Bella fish 2 Bella fish 3 Rex bones 4 Rex bones 5 Bella fish 6 Bella fish Output 2 -----Note----- Consider the first example. Lina recorded feedings for Rex at times 1, 2, 3, 4, and 5. The longest sequence of consecutive feedings for Rex is with meat, which lasted for three feedings. In the second example, Bella was given fish at times 1, 2, 5, and 6. Although Bella received the same type of food multiple times, the longest sequence of consecutive feedings with the same food is only 2 times (either from time 1 to 2 or from 5 to 6).","solution":"def longest_feeding_sequence(feedings): Returns the longest sequence of consecutive feedings where the same type of food was given to the same animal. if not feedings: return 0 max_length = 0 current_length = 1 current_animal_food = (feedings[0][1], feedings[0][2]) for i in range(1, len(feedings)): next_animal_food = (feedings[i][1], feedings[i][2]) if next_animal_food == current_animal_food: current_length += 1 else: if current_length > max_length: max_length = current_length current_animal_food = next_animal_food current_length = 1 # Update max length for the last sequence if current_length > max_length: max_length = current_length return max_length"},{"question":"Chef has recently taken an interest in gardening. He decides to plant a rectangular garden with flowers. Each flower requires exactly 1 square meter of land. He wants to build the garden such that each side of the rectangle is an integer and the area of the garden is exactly N square meters. Chef can buy land plots of 1 square meter each, but he wants the garden to be as square-like as possible to ensure it looks aesthetically pleasing. A garden is more square-like if the absolute difference between the length and the width of the garden is minimized. Help Chef determine the dimensions of the garden. ------ Input Format ------ - The first line of the input contains a single integer T - the number of test cases. The test cases then follow. - Each test case consists of a single integer N - the total area of the garden in square meters. ------ Output Format ------ For each test case, output two space-separated integers, the length and width of the garden, such that the absolute difference between the length and the width is minimized. If there are multiple answers, output the pair where the length is greater than or equal to the width. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^{9} ------ Sample Input 1 ------ 3 12 20 17 ------ Sample Output 1 ------ 4 3 5 4 17 1 ------ Explanation 1 ------ - Test Case 1: A garden with dimensions 4 x 3 or 3 x 4 utilizes 12 square meters and has the smallest difference (1) between length and width. - Test Case 2: A garden with dimensions 5 x 4 or 4 x 5 utilizes 20 square meters and has the smallest difference (1) between length and width. - Test Case 3: A garden with dimensions 17 x 1 or 1 x 17 utilizes 17 square meters, which has the smallest difference (16) between length and width.","solution":"def find_dimensions(N): Returns the dimensions l and w of the garden such that l * w = N and the absolute difference between l and w is minimized. If there are multiple answers, return the pair where l >= w. import math best_l, best_w = N, 1 for w in range(1, int(math.sqrt(N)) + 1): if N % w == 0: l = N // w if abs(l - w) < abs(best_l - best_w) or (abs(l - w) == abs(best_l - best_w) and l > best_l): best_l, best_w = l, w return best_l, best_w def solve(test_cases): results = [] for N in test_cases: l, w = find_dimensions(N) results.append(f\\"{l} {w}\\") return results"},{"question":"Given a list of integers, the goal is to create a new list where each element is the difference between the original element and the smallest element to its right. If there are no elements to the right, leave the original element unchanged. Write a function `calculate_differences` that takes a list of integers `arr` and returns the new list. # Function Signature ```python def calculate_differences(arr: List[int]) -> List[int]: ``` # Input - A list `arr` of integers, where the length of the list is between 1 and 10^4. # Output - A list of integers where each element is the difference of the original element and the smallest element to its right in the given list. # Example Input ```python arr = [4, 2, 6, 3, 5, 1] ``` Output ```python [2, -1, 3, 2, 4, 1] ``` Explanation - For `arr[0]` which is 4, the smallest element to the right is 1, so the result is 4 - 1 = 3. - For `arr[1]` which is 2, the smallest element to the right is 1, so the result is 2 - 1 = 1. - For `arr[2]` which is 6, the smallest element to the right is 1, so the result is 6 - 1 = 5. - For `arr[3]` which is 3, the smallest element to the right is 1, so the result is 3 - 1 = 2. - For `arr[4]` which is 5, the smallest element to the right is 1, so the result is 5 - 1 = 4. - For `arr[5]` which is 1, there are no elements to the right, so it remains 1.","solution":"from typing import List def calculate_differences(arr: List[int]) -> List[int]: if not arr: return [] n = len(arr) result = [0] * n min_to_right = float(\'inf\') for i in range(n-1, -1, -1): if i == n-1: result[i] = arr[i] else: result[i] = arr[i] - min_to_right min_to_right = min(min_to_right, arr[i]) return result"},{"question":"Max has a list of n positive integers representing the calories of different items. He wants to divide this list into exactly two non-empty subsequences such that the absolute difference between the sum of their calories is minimized. Write a program to find the minimum possible difference between the sums of the two subsequences. Input The first line contains an integer n (2 ≤ n ≤ 500) — the number of items. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1000) — the calories of the items. Output Print a single integer — the minimum possible difference between the sums of the two subsequences. Examples Input 4 1 2 3 4 Output 0 Input 5 10 20 15 5 25 Output 5 Note In the first example, the list of items can be divided into two subsequences [1, 4] and [2, 3], with sums as 5 and 5 respectively. Therefore, the minimum difference is 0. In the second example, the list of items can be divided into two subsequences [10, 15, 5] and [20, 25], with sums as 30 and 35 respectively. Therefore, the minimum difference is 5.","solution":"def min_difference_between_subsequences(n, items): total_sum = sum(items) target = total_sum // 2 dp = [0] * (target + 1) for item in items: for j in range(target, item - 1, -1): dp[j] = max(dp[j], dp[j - item] + item) sum1 = dp[target] sum2 = total_sum - sum1 return abs(sum1 - sum2)"},{"question":"Implement a function, `reverse_dict_lookup(d, target)`, which takes in a dictionary `d` and a value `target`. The function should return a list of all keys in `d` that map to the value `target`. If `target` is not found as a value in the dictionary, return an empty list. Ex. ``` reverse_dict_lookup({\'a\': 1, \'b\': 2, \'c\': 1}, 1) ``` should return ``` [\'a\', \'c\'] ```","solution":"def reverse_dict_lookup(d, target): Returns a list of keys in dictionary d that have the value target. Parameters: d (dict): A dictionary. target: The value to search for in the dictionary. Returns: list: A list of keys that map to the value target. return [key for key, value in d.items() if value == target]"},{"question":"You are given a sequence of integers, and your goal is to find the longest contiguous subarray that contains only distinct numbers. ------ Input ------ The first line of input contains a single integer N, the length of the sequence. The second line contains N space-separated integers a_1, a_2, ..., a_N representing the sequence. ------ Output ------ Print a single integer — the length of the longest contiguous subarray with all distinct numbers. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 0 ≤ a_i ≤ 10^{9} ----- Sample Input 1 ------ 5 1 2 1 3 4 ----- Sample Output 1 ------ 4 ----- Sample Input 2 ------ 7 1 2 3 4 5 6 7 ----- Sample Output 2 ------ 7","solution":"def longest_distinct_subarray(sequence): Given a sequence of integers, find the length of the longest contiguous subarray with all distinct numbers. n = len(sequence) if n == 0: return 0 max_len = 0 start = 0 seen = {} for end in range(n): if sequence[end] in seen and seen[sequence[end]] >= start: start = seen[sequence[end]] + 1 seen[sequence[end]] = end max_len = max(max_len, end - start + 1) return max_len # Function to read input and print output def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) sequence = list(map(int, data[1:])) print(longest_distinct_subarray(sequence)) if __name__ == \\"__main__\\": main()"},{"question":"Mike has an array B of ‘m’ positive integers which represent the revenues of each month in a given period. Mike wants to calculate the maximum revenue difference between two different months\' revenue, where the revenue from the first month (i) is less than the revenue from the second month (j), and i < j. Mike wants you to write a program that will help him find this maximum revenue difference for each of the given test cases. Constraints: 1 ≤ T ≤ 100 1 ≤ m ≤ 100000 1 ≤ B[i] ≤ 100000 SAMPLE INPUT 2 5 7 1 5 3 6 4 9 4 3 2 SAMPLE OUTPUT 5 -1 Explanation The first line contains the number of test cases, T. For each test case: 1. The first line contains an integer m, the number of months. 2. The second line contains m integers, the monthly revenues. For the first test case: - The array is [7, 1, 5, 3, 6]. The maximum difference is achieved with 1 (month 2) and 6 (month 5), resulting in 6 - 1 = 5. For the second test case: - The array is [9, 4, 3, 2]. All elements are in decreasing order, so no i < j satisfies the condition B[i] < B[j]. Output -1.","solution":"def max_revenue_difference(test_cases): results = [] for case in test_cases: m, revenues = case if m < 2: results.append(-1) continue min_revenue = revenues[0] max_diff = -1 for i in range(1, m): if revenues[i] > min_revenue: max_diff = max(max_diff, revenues[i] - min_revenue) min_revenue = min(min_revenue, revenues[i]) results.append(max_diff) return results"},{"question":"Write a program to perform element-wise addition of two matrices A and B and print the resulting matrix C. The matrices A and B are both of size n x m. An element of matrix C is obtained by the following formula: [ c_{ij} = a_{ij} + b_{ij} ] where a_{ij}, b_{ij}, and c_{ij} are elements of matrices A, B, and C respectively. Note 解説 Constraints * 1 leq n, m leq 100 * -10000 leq a_{ij}, b_{ij} leq 10000 Input In the first line, two integers n and m are given separated by a space character. In the next n lines, each containing m integers, the elements of matrix A are given. In the next n lines, each containing m integers, the elements of matrix B are given. Output Print elements of the n x m matrix C (c_{ij}). Print a single space character between adjacent elements. Example Input 2 3 1 2 3 4 5 6 -1 -2 -3 -4 -5 -6 Output 0 0 0 0 0 0","solution":"def matrix_addition(n, m, matrix_a, matrix_b): Perform element-wise addition of two n x m matrices A and B. Parameters: n (int): Number of rows. m (int): Number of columns. matrix_a (list of list of int): Matrix A of size n x m. matrix_b (list of list of int): Matrix B of size n x m. Returns: list of list of int: Resulting matrix C of size n x m where each element c_ij = a_ij + b_ij. matrix_c = [] for i in range(n): row = [] for j in range(m): row.append(matrix_a[i][j] + matrix_b[i][j]) matrix_c.append(row) return matrix_c def format_matrix(matrix): Format a matrix for printing or output. Parameters: matrix (list of list of int): The matrix to format. Returns: str: Formatted matrix as a string. return \\"n\\".join(\\" \\".join(map(str, row)) for row in matrix)"},{"question":"You are given an integer array `arr` and an integer `k`. You have to perform the following operation exactly `k` times: 1. Select any subarray of `arr` and reverse it. Determine the lexicographically smallest array you can obtain after exactly `k` operations. -----Input----- The first line contains two integers `n` and `k` (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the number of elements in the array and the number of operations. The second line contains `n` space-separated integers a_1, a_2, ..., a_n (-1000 ≤ a_i ≤ 1000) — the elements of the array. -----Output----- Output one line containing `n` space-separated integers — the lexicographically smallest array you can obtain after exactly `k` operations. -----Examples----- Input 5 1 3 2 1 5 4 Output 1 2 3 5 4 Input 4 2 4 3 2 1 Output 1 2 3 4 -----Note----- In the first test case, you can reverse the subarray `[3, 2, 1]` to obtain the array `[1, 2, 3, 5, 4]`, which is the lexicographically smallest array you can get in one operation. In the second test case, you can perform the following operations: 1. Reverse the subarray `[4, 3]` to obtain `[3, 4, 2, 1]`. 2. Reverse the subarray `[3, 4, 2, 1]` to obtain `[1, 2, 3, 4]`.","solution":"def lexicographically_smallest_array(arr, k): Returns the lexicographically smallest array after exactly k reverse operations. n = len(arr) for _ in range(k): smallest = min(arr) if arr[0] == smallest: break index = arr.index(smallest) arr = arr[:index+1][::-1] + arr[index+1:] return arr"},{"question":"Given n containers, each with a limited capacity, and m marbles of varying weights, you need to determine if it is possible to distribute all the marbles into the containers. Each marble can only be placed in one container, and the total weight of the marbles in each container cannot exceed its capacity. # Input - The first line contains an integer n (1 ≤ n ≤ 20) — the number of containers. - The second line contains n integers, where each integer represents the capacity of a container (1 ≤ capacity ≤ 1000). - The third line contains an integer m (1 ≤ m ≤ 20) — the number of marbles. - The fourth line contains m integers, where each integer represents the weight of a marble (1 ≤ weight ≤ 1000). # Output - Output \\"YES\\" if it is possible to distribute all the marbles into the containers without exceeding any container\'s capacity. Otherwise, output \\"NO\\". # Example Input ``` 3 10 5 8 4 3 5 3 2 ``` Output ``` YES ``` Input ``` 2 5 5 3 7 2 2 ``` Output ``` NO ``` # Note In the first example, it is possible to distribute the marbles into the containers as follows: - The first container can hold the marbles with weights 3 and 5 (total weight 8 ≤ 10). - The second container can hold the marble with weight 2 (total weight 2 ≤ 5). - The third container can hold the marble with weight 3 (total weight 3 ≤ 8). In the second example, it is not possible to distribute the marble with weight 7 into any container since both containers have a capacity of 5, and 7 exceeds this capacity. Hence, the output is \\"NO\\".","solution":"def can_distribute_marbles(n, capacities, m, weights): Determines if it is possible to distribute all the marbles into the containers without exceeding any container\'s capacity. Args: n (int): Number of containers. capacities (list of int): List of capacities of the containers. m (int): Number of marbles. weights (list of int): List of weights of the marbles. Returns: str: \\"YES\\" if it is possible to distribute the marbles, otherwise \\"NO\\". capacities.sort(reverse=True) weights.sort(reverse=True) for weight in weights: placed = False for i in range(n): if capacities[i] >= weight: capacities[i] -= weight placed = True break if not placed: return \\"NO\\" return \\"YES\\""},{"question":"You are given a square grid of size N x N. Each cell in the grid can either be empty (.) or contain a wall (#). You need to find the minimum number of steps required to move from the top-left corner of the grid to the bottom-right corner. You can move up, down, left, or right, but you cannot move through walls. If there is no valid path from the top-left corner to the bottom-right corner, return -1. Input: The first line contains an integer T, the number of test cases. Each test case starts with a line containing an integer N, the size of the grid. The next N lines each contain a string of length N representing the grid. Output: For each test case, output the minimum number of steps required to move from the top-left corner to the bottom-right corner, or -1 if no such path exists. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 100 SAMPLE INPUT: 2 3 ..# .#. ... 3 .#. # .#. SAMPLE OUTPUT: 4 -1 Explanation: For the first test case, one of the shortest paths from (0, 0) to (2, 2) is (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2) which takes 4 steps. For the second test case, there is no path from the top-left corner to the bottom-right corner due to the walls blocking the way.","solution":"from collections import deque def min_steps(grid): N = len(grid) if grid[0][0] == \'#\' or grid[N-1][N-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if r == N-1 and c == N-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < N and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1 def solve_min_steps(t, test_cases): results = [] for i in range(t): N = test_cases[i][0] grid = test_cases[i][1:] results.append(min_steps(grid)) return results"},{"question":"Write a function that simulates an elevator system in a multi-story building. Your task is to determine the sequence of floors the elevator travels through given a specific set of requests. The elevator can start at any floor specified in the requests and must serve all the requests in the most optimal order (minimizing the total distance traveled). The building has `N` floors, numbered from 1 to `N`. Each request is a pair of floor numbers: the starting floor and the desired floor. Note that the elevator can be empty when it receives the first request, but does not return to its initial starting position after fulfilling all requests. -----Input----- The input consists of: - An integer `N` (2 <= N <= 100) – the number of floors in the building. - An integer `M` (1 <= M <= 100) – the number of requests. - `M` pairs of integers representing the start and end floor for each request. -----Output----- Display the sequence of floors the elevator travels through in the optimal order, minimizing the total distance. The sequence should start with the floor where the elevator begins its journey. If there are multiple floors with the same minimum total distance, start with the smallest floor number. -----Examples----- Sample Input 1: 5 3 1 3 4 5 2 1 Sample Output 1: 1 3 2 1 4 5 Sample Input 2: 6 2 6 2 3 1 Sample Output 2: 3 1 6 2 Note: The elevator must visit all starting floors and destination floors in the order that minimizes the total travel distance. If an optimal path starts at a lower-numbered floor than another optimal path, then choose the one starting at the lower-numbered floor.","solution":"def elevator_simulation(N, M, requests): Simulates the elevator travel sequence to minimize total distance. Args: N (int): Number of floors in the building. M (int): Number of requests. requests (list of tuple): List of tuples where each tuple contains two integers representing the starting and ending floor of each request. Returns: list: The sequence of floors the elevator travels through in the optimal order. from itertools import permutations # A set to accumulate all visited floors all_floors = set() for start, end in requests: all_floors.add(start) all_floors.add(end) # Create a list of all unique floors that need to be visited all_floors = list(all_floors) def total_distance(path): distance = 0 for i in range(1, len(path)): distance += abs(path[i] - path[i - 1]) return distance # Generate all possible permutations of the floors and find the minimal distance path optimal_path = None min_distance = float(\'inf\') for perm in permutations(all_floors): dist = total_distance(perm) if dist < min_distance or (dist == min_distance and perm < optimal_path): min_distance = dist optimal_path = perm return list(optimal_path)"},{"question":"Alicia loves creating patterns with numbers. She is particularly fascinated by \\"Mirrored Palindromes.\\" A mirrored palindrome is a number that is the same when read forwards and backwards, and each digit has a complementary digit such that when reversed, it still reads the same. The pairs of digits that mirror each other are (0,0), (1,1), (6,9), and (8,8). For example: - The number 181 is a mirrored palindrome as it reads the same forwards and backwards and satisfies the complementary digit condition. - The number 69 is a mirrored palindrome as its reverse, 96, reads the same in complement. Alicia wants a program that generates the smallest mirrored palindrome with at most n digits. Input The single line contains an integer n (1 ≤ n ≤ 100). Output Output the smallest mirrored palindrome with at most n digits. If no such number exists within the specified digits, print the single number \\"-1\\" (without the quotes). Examples Input 2 Output 69 Input 4 Output 1001","solution":"def smallest_mirrored_palindrome(n): if n == 1: return 0 # The single digit mirrored palindrome is just \'0\' elif n == 2: return 69 # The smallest two-digit mirrored palindrome is \'69\' # Generate mirrored palindromes for larger numbers mirrored_pairs = {\'0\': \'0\', \'1\': \'1\', \'6\': \'9\', \'8\': \'8\', \'9\': \'6\'} # Start generating from the smallest possible mirrored palindrome of length n def generate_mirrored_palindrome(length): if length % 2 == 0: half_length = length // 2 left_half = \'1\' + \'0\' * (half_length - 1) else: half_length = length // 2 left_half = \'1\' + \'0\' * (half_length - 1) while True: right_half = \'\'.join(mirrored_pairs[digit] for digit in reversed(left_half)) palindrome = left_half + right_half if length % 2 == 0 else left_half + \'0\' + right_half if len(palindrome) == length: return palindrome left_half = str(int(left_half) + 1) if n % 2 == 0: return generate_mirrored_palindrome(n) else: return generate_mirrored_palindrome(n) # Function call (example usage) print(smallest_mirrored_palindrome(2)) # Expected output: 69 print(smallest_mirrored_palindrome(4)) # Expected output: 1001"},{"question":"Martha loves playing with strings. She has N strings, each consisting of lowercase English letters. Martha defines the *happiness* of a substring as the sum of the ASCII values of its characters. She asks you to find the maximum *happiness* of any non-empty substring of each string. Your task is to write a program that, for each of the N strings, determines the maximum *happiness* of any non-empty substring and returns the results. ------ Input Format ------ - The first line of input contains a single integer N, denoting the number of strings. - Each of the next N lines contains one string consisting of lowercase English letters. ------ Output Format ------ For each string, output on a new line, the maximum *happiness* of any non-empty substring. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ |S| ≤ 10^5 - The sum of the lengths of all strings in the input does not exceed 10^6. ----- Sample Input 1 ------ 3 abc bba zebra ----- Sample Output 1 ------ 297 196 322 ----- Explanation 1 ------ Test case 1: For the string \\"abc\\": - The maximum *happiness* is achieved by the substring \\"c\\" with ASCII value 99. - Therefore, maximum *happiness* = 99. Test case 2: For the string \\"bba\\": - The maximum *happiness* is achieved by the substring \\"bb\\" with ASCII value 98 + 98 = 196. - Therefore, maximum *happiness* = 196. Test case 3: For the string \\"zebra\\": - The maximum *happiness* is achieved by the substring \\"zebra\\" with ASCII values 122 + 101 + 98 + 114 + 97 = 532. - But the maximum happiness from any substring will be the single character substring \\"z\\" with ASCII value 122. - Therefore, maximum *happiness* = 122 + 101 + 98 + 114 + 97 = 322.","solution":"def max_happiness(strings): Returns the maximum happiness of any non-empty substring for each string in the list. :param strings: List of strings :return: List of integers representing maximum happiness results = [] for s in strings: max_happy = max(ord(char) for char in s) results.append(max_happy) return results"},{"question":"Given an array of integer numbers, determine if the array can be made strictly increasing by removing exactly one element. An array is considered strictly increasing if each subsequent element is greater than the previous one. Write a function `canBeIncreasingByRemovingOne` that receives an array of integers and returns \\"Yes\\" if it\'s possible to remove exactly one element and make the array strictly increasing, otherwise return \\"No\\". # Input The function receives: - An array of integers of length `n` where `1 ≤ n ≤ 10^5` and `-10^9 ≤ arr[i] ≤ 10^9` for all valid indices `i`. # Output The function should return: - \\"Yes\\" (quotes for clarity) if there exists a way to remove exactly one element to make the array strictly increasing. - \\"No\\" (quotes for clarity) otherwise. # Example Input ```python [1, 2, 10, 5, 7] ``` Output ```python Yes ``` Explanation By removing the element `10`, we obtain the array `[1, 2, 5, 7]` which is strictly increasing. Input ```python [2, 3, 1, 2] ``` Output ```python No ``` Explanation No single element can be removed to form a strictly increasing array. Removing any single element would still leave the array unsorted. # Constraints Consider time complexity and optimize your solution for large inputs.","solution":"def canBeIncreasingByRemovingOne(arr): def is_strictly_increasing(array): return all(x < y for x, y in zip(array, array[1:])) n = len(arr) for i in range(n): if is_strictly_increasing(arr[:i] + arr[i+1:]): return \\"Yes\\" return \\"No\\""},{"question":"A chef is preparing for a grand feast and needs to bake several different kinds of cakes. Each type of cake has a specific baking time, and the chef can only bake one cake at a time using the oven. However, the chef has time constraints as well; he only has a specific amount of time available to complete baking all the cakes. Given the time required to bake each cake and the total time available, determine whether the chef can bake all the cakes within the given time. Input format: The first line of input consists of a number, n, denoting the number of different types of cakes. The second line contains n space-separated integers, where each integer represents the baking time (in minutes) of a specific cake. The third line contains a single integer t, denoting the total time available (in minutes). Output format: Print \\"Feast is ready!\\" if the chef can bake all the cakes within the given time, otherwise print \\"Time is not enough!\\". Constraints: 1 ≤ n ≤ 100 1 ≤ Baking time of each cake ≤ 120 1 ≤ Total available time t ≤ 10000 Example Input: 4 45 30 60 20 160 Example Output: Feast is ready! SAMPLE INPUT 3 50 50 50 120 SAMPLE OUTPUT Time is not enough!","solution":"def can_bake_all_cakes(n, baking_times, total_time): Determines whether all cakes can be baked within the available total time. :param n: Number of different types of cakes :param baking_times: List of baking times for each type of cake :param total_time: Total time available to bake the cakes :return: String indicating if the feast is ready or not total_baking_time = sum(baking_times) if total_baking_time <= total_time: return \\"Feast is ready!\\" else: return \\"Time is not enough!\\" # Example of usage: # n = 4 # baking_times = [45, 30, 60, 20] # total_time = 160 # print(can_bake_all_cakes(n, baking_times, total_time)) # Output: Feast is ready!"},{"question":"Given a sequence of integers a_1, a_2, ..., a_n, you are tasked with finding a contiguous subsequence of length exactly k such that the sum of the k elements in the subsequence is maximized. -----Input----- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5). The second line contains n space-separated integers representing a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). -----Output----- Print a single integer - the maximum possible sum of a contiguous subsequence of length k in the given sequence. -----Examples----- Input 5 3 1 2 3 4 5 Output 12 Input 8 4 -2 1 -3 4 -1 2 1 -5 4 Output 6 -----Note----- In the first example, the subsequence [3, 4, 5] provides the maximum sum of 12. In the second example, the subsequence [4, -1, 2, 1] provides the maximum sum of 6.","solution":"def max_sum_subsequence(n, k, array): Returns the maximum sum of a contiguous subsequence of length k. Args: n (int): Number of elements in the array. k (int): Length of the subsequence. array (list of int): The array of integers. Returns: int: The maximum sum of a contiguous subsequence of length k. # Compute the sum of the first k elements max_sum = curr_sum = sum(array[:k]) # Use a sliding window to find the maximum sum of a subsequence of length k for i in range(k, n): curr_sum += array[i] - array[i - k] if curr_sum > max_sum: max_sum = curr_sum return max_sum"},{"question":"Mina is trying to train her dog to jump over hurdles. She has set up n hurdles of varying heights. Mina starts training by making her dog jump over each hurdle, one by one, in the order they are set up. If the dog fails to jump over a hurdle because it\'s too high, the training session is considered unsuccessful, and the dog stops trying after hitting that hurdle. However, Mina wants to motivate her dog by lowering one of the hurdles, making it just 1 unit high so the dog can clear it easily and potentially complete the training session successfully. Help Mina determine the index of one hurdle she should lower to increase the likelihood of a successful training session. If lowering any hurdle isn\'t sufficient to ensure the dog can clear all hurdles, output -1. Input The first line contains two integer numbers n (1 ≤ n ≤ 2·105) — the number of hurdles and k (1 ≤ k ≤ 10^9), the maximum height the dog can jump over. The second line contains n integer numbers hi (1 ≤ hi ≤ 10^9), the heights of the hurdles. Output If there is no single hurdle that can be lowered to make a successful training session, print -1. Otherwise, print the index of any hurdle that Mina should lower (the hurdles are indexed from 1 to n). Examples Input 5 7 3 10 5 6 2 Output 2 Input 4 8 5 6 7 9 Output 4 Input 3 5 6 7 8 Output 1 Input 3 3 2 3 4 Output 3 Note Consider the first sample. The dog can jump over the hurdles of heights [3, 10, 5, 6, 2] one by one, but fails at hurdle 2 (height 10) since it is greater than 7 (maximum jump height the dog can manage). Lowering this hurdle to 1 will allow the dog to continue and successfully jump over all the hurdles.","solution":"def find_hurdle_to_lower(n, k, heights): # Iterate through the hurdles to find the first one that the dog can\'t jump for i in range(n): if heights[i] > k: return i + 1 # If all hurdles are within the dog\'s jump capacity, no hurdle needs to be lowered return -1 # Example Usage n = 5 k = 7 heights = [3, 10, 5, 6, 2] print(find_hurdle_to_lower(n, k, heights)) # Output: 2"},{"question":"You are given a class `Color` that takes three parameters: `r`, `g`, and `b`, which are integers between 0 and 255 inclusive, representing the red, green, and blue components of a color, respectively. Your task is to extend this class by implementing methods for the following functionalities: 1. `to_hex`: Returns a string representing the color in hexadecimal format. 2. `to_hsl`: Returns a tuple `(h, s, l)` representing the color in HSL (Hue, Saturation, Lightness) format. 3. `darker`: Returns a new instance of `Color` that is a darker shade by a given percentage (input parameter is a float between 0 and 1 where 1 means completely black). Example: ```python color = Color(255, 0, 0) # Red color # Convert to hexadecimal color.to_hex() => \'#FF0000\' # Convert to HSL color.to_hsl() => (0, 1, 0.5) # Darker by 30% darker_color = color.darker(0.3) darker_color.to_hex() => \'#B20000\' ``` ___Notes:___ * The conversion formulas for RGB to HEX and RGB to HSL can be found online and used as they are. * Ensure the `darker` method clamps the values correctly between 0 and 255. * Hue `h` is a degree on the color wheel (from 0 to 360). * Saturation `s` and Lightness `l` are percentages (from 0 to 1).","solution":"class Color: def __init__(self, r, g, b): self.r = r self.g = g self.b = b def to_hex(self): Returns the color in hexadecimal format. return f\'#{self.r:02X}{self.g:02X}{self.b:02X}\' def to_hsl(self): Returns the color in HSL format (Hue, Saturation, Lightness). r, g, b = self.r / 255.0, self.g / 255.0, self.b / 255.0 max_c, min_c = max(r, g, b), min(r, g, b) delta = max_c - min_c l = (max_c + min_c) / 2.0 if delta == 0: h = s = 0 else: s = delta / (2.0 - max_c - min_c) if l > 0.5 else delta / (max_c + min_c) if max_c == r: h = ((g - b) / delta) % 6 elif max_c == g: h = (b - r) / delta + 2 else: h = (r - g) / delta + 4 h *= 60 return (int(h), round(s, 2), round(l, 2)) def darker(self, percentage): Returns a new Color instance that is a darker shade by the given percentage. factor = 1 - percentage new_r = max(min(int(self.r * factor), 255), 0) new_g = max(min(int(self.g * factor), 255), 0) new_b = max(min(int(self.b * factor), 255), 0) return Color(new_r, new_g, new_b)"},{"question":"Harry loves sequences and has recently learned about harmonious subsequences. A harmonious subsequence of an array is a subsequence where the difference between the maximum and minimum element is exactly 1. Given an array of integers, you need to find the length of the longest harmonious subsequence among all the possible subsequences of this array. A subsequence is derived from the array by deleting some elements, keeping their relative order. -----Input----- The first line contains a single integer t (1le tle 1000) — the number of test cases. Each test case contains two lines: - The first line contains an integer n (1 le n le 10^{5}) — the number of elements in the array. - The second line contains n integers a_i (1 le a_i le 10^{9}) — the elements of the array. It is guaranteed that the sum of all n across all test cases does not exceed 10^{5}. -----Output----- For each test case, print a single line containing the length of the longest harmonious subsequence. If no such subsequence exists, print 0. -----Examples----- Input 3 6 1 3 2 2 5 2 5 1 2 3 4 5 4 1 1 1 1 Output 4 2 0 -----Note----- In the first test case, the longest harmonious subsequence is [2, 2, 2, 3] or [2, 2, 3, 2] which has a length of 4. In the second test case, the longest harmonious subsequence is [1, 2] or [2, 3] or any such pair of consecutive numbers, each of which has a length of 2. In the third test case, there is no harmonious subsequence with a difference of exactly 1 as all values are the same, so the output is 0.","solution":"from collections import Counter def findLHS(nums): Function to find the length of the longest harmonious subsequence in an array of integers. count = Counter(nums) max_length = 0 for num in count: if num + 1 in count: max_length = max(max_length, count[num] + count[num + 1]) return max_length def process_test_cases(test_cases): result = [] for t in test_cases: n, array = t result.append(findLHS(array)) return result"},{"question":"You are a taskmaster and you schedule various tasks for the day. There are certain important tasks that you need to finish in one day. Each task requires a continuous block of time and you cannot work on more than one task at a time. Given the start time and the end time of each task, your goal is to determine how many tasks can be completed without any overlap. Input consists of multiple test cases. Each test case begins with an integer n (1 le n le 100) — the number of tasks. The next n lines each contain two integers s_i and e_i (0 le s_i < e_i le 1440) — the start and end times of the tasks. You need to determine the maximum number of tasks that you can complete in a single day for each test case. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The descriptions of the t test cases follow. Each test case starts with an integer n (1 le n le 100). The next n lines for each test case contain two integers s_i and e_i (0 le s_i < e_i le 1440) — the start and end time of each task. -----Output----- For each test case, print one line containing an integer — the maximum number of non-overlapping tasks that can be completed in a day. -----Examples----- Input 3 3 1 3 2 5 4 7 4 10 20 20 30 30 40 40 50 5 100 200 150 250 200 300 250 350 300 400 Output 2 4 3 Explanation: In the first test case, you can finish either the tasks (1,3) and (4,7) or the tasks (2,5) and (4,7). In the second test case, there is no overlap between any of the tasks, so all four tasks can be completed. In the third test case, you can finish the tasks (100,200), (200,300), and (300,400) to get the maximum possible number of tasks that can be completed.","solution":"def max_complete_tasks(test_cases): results = [] for case in test_cases: n, tasks = case[\'n\'], case[\'tasks\'] # Sort the tasks based on end time tasks.sort(key=lambda x: x[1]) count, end_time = 0, 0 for s, e in tasks: if s >= end_time: count += 1 end_time = e results.append(count) return results"},{"question":"A popular drawing tool gives you a canvas of size `n x n`. You have just discovered a unique brush that can paint all cells of a given number\'s multiples in one stroke. You wonder how many strokes it would take to cover the entire canvas if you start with the smallest integer and go up consecutively. The problem is defined as follows: Given a number `n`, determine the minimum number of strokes needed to completely paint an `n x n` canvas. -----Input----- A single integer `n` (1 leq n leq 10^6). -----Output----- Print a single integer, the minimum number of strokes required to paint the entire canvas. -----Example----- Input 3 Output 2 -----Explanation----- In the case of `n = 3`: - First stroke: paint all cells at positions `(i, j)` where both `i` and `j` are multiples of 1, effectively covering all cells. - Second stroke: none needed since single stroke can cover all cells in `3 x 3` canvas when starting from smallest multiple (1). For instance, `n = 4` would be painted in the following manner: - First stroke: covers all cells where both `i` and `j` are multiples of 1. - Subsequent strokes (if any) would handle remaining multiples such as 2, etc. This continues up to `n` where the number of strokes represents the number of distinct multiples needed to completely cover the grid. Hints: - Any integer greater than 1 multiples itself and requires its unique strokes. - Pay attention to unique multiples within the range 1 to `n`.","solution":"def min_strokes(n): Returns the minimum number of strokes required to paint an n x n canvas. return n"},{"question":"A crop field is represented by a matrix of size N x M, where each cell in the matrix can be either \'W\' (water) or \'L\' (land). The field may contain several clusters of connected land cells. Two land cells are considered connected if they are adjacent horizontally or vertically. Your task is to find the number of distinct clusters of connected land cells (islands) in the given field. Example 1: Input: N = 4, M = 5 field[][] = {{\'L\', \'W\', \'W\', \'L\', \'L\'}, {\'L\', \'L\', \'W\', \'W\', \'L\'}, {\'W\', \'W\', \'L\', \'W\', \'W\'}, {\'L\', \'W\', \'L\', \'L\', \'L\'}} Output: 4 Explanation: The matrix contains 4 distinct islands of connected land cells. Example 2: Input: N = 3, M = 3 field[][] = {{\'W\', \'W\', \'L\'}, {\'W\', \'L\', \'L\'}, {\'L\', \'L\', \'W\'}} Output: 1 Explanation: The matrix contains 1 single island of connected land cells. Your Task: You need to complete the function count_islands() which takes a character 2D array field, an integer N, and an integer M as input parameters and returns an integer, denoting the number of distinct clusters of connected land cells in the field. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 <= N, M <= 1000 field[i][j] can be either \'L\' or \'W\'","solution":"def count_islands(field, N, M): Returns the number of distinct islands of connected land cells. if not field: return 0 def dfs(x, y): if x < 0 or y < 0 or x >= N or y >= M or field[x][y] == \'W\': return field[x][y] = \'W\' # mark as visited dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) islands = 0 for i in range(N): for j in range(M): if field[i][j] == \'L\': islands += 1 dfs(i, j) return islands"},{"question":"You are given an integer M. Compute the factorial of M without the help of loops. Example 1: Input: M = 3 Output: 6 Explanation: 3! = 3 * 2 * 1 = 6 Example 2: Input: M = 5 Output: 120 Explanation: 5! = 5 * 4 * 3 * 2 * 1 = 120 Your Task: You don\'t need to read input. Your task is to complete the function computeFactorial() which takes an integer M as an input parameter and returns the factorial of M without the help of loops. Expected Time Complexity: O(M) Expected Auxiliary Space: O(M) Constraints: 1 ≤ M ≤ 15","solution":"def computeFactorial(M): Computes the factorial of M without the help of loops. # Base case: factorial of 0 or 1 is 1 if M == 0 or M == 1: return 1 # Recursive case: M * factorial of (M-1) else: return M * computeFactorial(M - 1)"},{"question":"A famous pizza restaurant needs help automating their pizza ordering process. Customers place orders online specifying their desired toppings, and each topping has a specific cost. The restaurant needs to calculate the total price for each customer\'s order and provide a breakdown of costs for transparency. Challenge: You are given a dictionary of available toppings and their corresponding prices, and a list representing a customer\'s selected toppings. Your task is to calculate the total cost of the selected toppings and return a detailed breakdown indicating the cost of each topping and the total cost. ```python def calculate_pizza_order(toppings_prices, selected_toppings): toppings_prices: dict - A dictionary where keys represent topping names and values are their corresponding prices (e.g., {\'pepperoni\': 2, \'mushrooms\': 1.5}). selected_toppings: list - A list of strings where each string represents a topping selected by the customer (e.g., [\'pepperoni\', \'mushrooms\']). Returns: dict - A dictionary with the cost breakdown for each selected topping and the total cost. # Your code here # Example usage toppings_prices = { \'pepperoni\': 2.5, \'mushrooms\': 1.75, \'onions\': 1.0, \'sausage\': 3.0, \'bacon\': 2.75, \'extra cheese\': 1.5, \'black olives\': 1.25, \'green peppers\': 1.5, \'pineapple\': 2.0, \'spinach\': 1.0 } selected_toppings = [\'pepperoni\', \'mushrooms\', \'extra cheese\', \'pineapple\'] result = calculate_pizza_order(toppings_prices, selected_toppings) print(result) # Expected output # { # \'pepperoni\': 2.5, # \'mushrooms\': 1.75, # \'extra cheese\': 1.5, # \'pineapple\': 2.0, # \'total\': 7.75 # } ``` In the above example, the selected toppings are \'pepperoni\', \'mushrooms\', \'extra cheese\', and \'pineapple\'. The breakdown of costs and total would be as follows: - \'pepperoni\': 2.5 - \'mushrooms\': 1.75 - \'extra cheese\': 1.5 - \'pineapple\': 2.0 - \'total\': 7.75 Here are more examples: ```python # Example 1 calculate_pizza_order(toppings_prices, [\'sausage\', \'bacon\', \'spinach\']) # Expected output # { # \'sausage\': 3.0, # \'bacon\': 2.75, # \'spinach\': 1.0, # \'total\': 6.75 # } # Example 2 calculate_pizza_order(toppings_prices, [\'black olives\', \'green peppers\', \'mushrooms\']) # Expected output # { # \'black olives\': 1.25, # \'green peppers\': 1.5, # \'mushrooms\': 1.75, # \'total\': 4.5 # } # Example 3 calculate_pizza_order(toppings_prices, [\'onions\']) # Expected output # { # \'onions\': 1.0, # \'total\': 1.0 # } ``` Are you ready to help the restaurant streamline their ordering process?","solution":"def calculate_pizza_order(toppings_prices, selected_toppings): toppings_prices: dict - A dictionary where keys represent topping names and values are their corresponding prices (e.g., {\'pepperoni\': 2, \'mushrooms\': 1.5}). selected_toppings: list - A list of strings where each string represents a topping selected by the customer (e.g., [\'pepperoni\', \'mushrooms\']). Returns: dict - A dictionary with the cost breakdown for each selected topping and the total cost. breakdown = {} total_cost = 0 for topping in selected_toppings: if topping in toppings_prices: breakdown[topping] = toppings_prices[topping] total_cost += toppings_prices[topping] breakdown[\'total\'] = total_cost return breakdown"},{"question":"Arun is organizing a treasure hunt for his friends. He has hidden a series of treasures along a path, where each treasure is placed at a specific distance from the starting point. Each treasure has a unique positive integral distance. Arun wants his friends to follow a strict sequence to find the treasures — they can only move to the next treasure if its distance from the start is a perfect square. Given the list of treasure distances, can you determine the sequence of distances that Arun\'s friends will follow starting from the smallest perfect square? Write a program to output this sequence. Input Format The first line contains a single integer M, the number of treasures. The next line contains M integers D(0), D(1), D(2),..., D(M-1) representing the distances of the treasures from the starting point. Output Format Print the sequence of distances in order that Arun\'s friends will follow. If there are multiple treasures at a perfect square distance, print them in ascending order. If no treasure is at a perfect square distance, print \\"No treasures found\\". Constraints 1 ≤ M ≤ 1000 1 ≤ D(i) ≤ 10000 SAMPLE INPUT 7 1 4 8 9 15 16 25 SAMPLE OUTPUT 1 4 9 16 25","solution":"import math def find_treasure_sequence(M, distances): Given the number of treasures M and list of distances, returns the sequence of distances for treasures that are perfect squares. Parameters: M (int): number of treasures distances (list of int): list of distances at which treasures are located Returns: list: sequence of distances for perfect square treasures perfect_squares = [] for distance in distances: if math.isqrt(distance) ** 2 == distance: perfect_squares.append(distance) if not perfect_squares: return \\"No treasures found\\" return sorted(perfect_squares)"},{"question":"You are given a string consisting of lowercase English letters and the spaces. Your task is to capitalize the first letter of each word and leave the rest of the letters as they are. A word is defined as a sequence of letters separated by spaces. The function should return the resulting string with each word’s first letter capitalized, maintaining the original spacing and order. *Example* ```python capitalize_words(\'hello world\') == \'Hello World\' capitalize_words(\'this is a test\') == \'This Is A Test\' capitalize_words(\'python is fun\') == \'Python Is Fun\' ```","solution":"def capitalize_words(sentence): Capitalizes the first letter of each word in the given sentence. :param sentence: A string consisting of lowercase English letters and spaces. :return: A new string with each word\'s first letter capitalized. return \' \'.join(word.capitalize() for word in sentence.split())"},{"question":"In a distant kingdom, there is a unique numerical system used for communicating emergencies. The system consists of N numbers, and they need to be processed by a special machine for sending alerts. The system has certain rules for combining these numbers optimally to form the largest possible number. Given a list of N integers, you need to find the largest number that can be formed by concatenating these integers together. ------ Input Format ------ - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each test case contains two lines: - The first line contains an integer N representing the number of integers. - The second line contains N space-separated integers. ------ Output Format ------ For each test case, print a single line containing the largest number that can be formed by concatenating the given N integers. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 0 ≤ text{integer} < 10^9 ------ Sample Input 1 ------ 3 3 10 2 9 4 3 30 34 5 2 12 121 ------ Sample Output 1 ------ 9210 534330 12121 ------ Explanation 1 ------ Test case 1: Concatenate the integers to form the numbers 210, 102, 1029, and 9210. The largest number is 9210. Test case 2: Concatenate the integers to form the numbers 343530, 534330, 533034, and 330534. The largest number is 534330. Test case 3: Concatenate the integers to form the numbers 12121 and 12112. The largest number is 12121.","solution":"from functools import cmp_to_key def compare(a, b): if a + b > b + a: return -1 elif a + b < b + a: return 1 else: return 0 def largest_number(numbers): numbers = list(map(str, numbers)) numbers.sort(key=cmp_to_key(compare)) largest_num = \'\'.join(numbers) return largest_num if largest_num[0] != \'0\' else \'0\' def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] numbers = test_cases[i][1] result = largest_number(numbers) results.append(result) return results"},{"question":"You are given a grid with `N` rows and `M` columns. Each cell in the grid contains either a `.` (indicating an empty cell) or a `#` (indicating an obstacle). A robot can move horizontally or vertically between adjacent empty cells but cannot pass through obstacles. The robot starts at the top-left corner `(0, 0)` and aims to reach the bottom-right corner `(N-1, M-1)`. Find the number of distinct shortest paths the robot can take to reach its destination. If there\'s no valid path, return `0`. Input Format: The first line contains two integers `N` and `M`, the dimensions of the grid. The following `N` lines contain `M` characters each (either `.` or `#`), representing the grid. Output Format: Print a single number, the number of distinct shortest paths. Constraints: 1 ≤ N, M ≤ 1000 Sample Input 1: 3 3 . . . . # . . . . Sample Output 1: 2 Explanation: There are two shortest paths from `(0, 0)` to `(2, 2)` avoiding the obstacle: 1. Right, Down, Down, Right 2. Down, Down, Right, Right Sample Input 2: 3 3 . . . # # . . . . Sample Output 2: 1 Explanation: There is only one path from `(0, 0)` to `(2, 2)` that avoids the obstacles. The path is: Down, Down, Right, Right Sample Input 3: 3 3 . # . # # . . . . Sample Output 3: 0 Explanation: There is no valid path from `(0, 0)` to `(2, 2)` since obstacles block all possible routes.","solution":"def num_distinct_paths(N, M, grid): Returns the number of distinct shortest paths from top-left to bottom-right in a grid. # If the starting or ending points are obstacles, return 0 immediately if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 # Create a 2D dp array to store the number of ways to reach each cell dp = [[0] * M for _ in range(N)] # Initialize starting point dp[0][0] = 1 # Fill dp array for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] # The number of ways to reach the bottom-right corner is in dp[N-1][M-1] return dp[N-1][M-1] # Example usage: # N, M = 3, 3 # grid = [ # [\'.\', \'.\', \'.\'], # [\'.\', \'#\', \'.\'], # [\'.\', \'.\', \'.\'] # ] # print(num_distinct_paths(N, M, grid)) # Output should be 2"},{"question":"In a distant land, there is a kingdom called CoderLand. In CoderLand, there are n cities connected by m bidirectional roads. Each road has an associated cost. The cities are numbered from 1 to n, and they desperately need a reliable transportation system for their growing economy. The King has decided to build a special type of transportation network called the \\"King\'s Network,\\" which must satisfy two conditions: 1. The network must connect all the cities. 2. The network must have the minimum possible total cost. As the Chief Engineer of CoderLand, you are tasked with designing an efficient algorithm that can determine the minimal cost to build the King\'s Network. Input The first line contains two space-separated integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 100000) — the number of cities and the number of roads. Each of the next m lines contains three space-separated integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10000) — the cities u and v that the road connects, and the cost w of that road. Output Output a single integer — the minimal possible total cost to connect all the cities with the King\'s Network. Examples Input 4 5 1 2 3 1 3 1 3 2 2 2 4 4 3 4 5 Output 7 Input 3 3 1 2 1 2 3 2 1 3 3 Output 3 Note In the first example, the minimal cost to connect all cities is obtained by selecting the edges (1, 3), (3, 2), and (2, 4), resulting in a total cost of 7. In the second example, the minimal cost to connect all cities is obtained by selecting the edges (1, 2) and (2, 3), resulting in a total cost of 3.","solution":"def find(parent, i): if parent[i] != i: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) edges = sorted(edges, key=lambda item: item[2]) mst_cost = 0 mst_edges = 0 for edge in edges: u, v, w = edge root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: mst_cost += w union(parent, rank, root_u, root_v) mst_edges += 1 if mst_edges == n - 1: break return mst_cost def minimal_cost_to_connect_all_cities(n, m, roads): edges = [(u-1, v-1, w) for (u, v, w) in roads] return kruskal(n, edges)"},{"question":"Alex loves to paint landscapes using different shades. He has n paint cans, numbered from 1 to n, and each can contains a unique shade. One day, he decided to paint his new artwork, but he wanted to experiment with creating the lexicographically smallest and largest possible sequences of shades. He arranges his paint cans in two different arrays: a and b according to the following rules: 1. Array a represents the lexicographically smallest sequence such that, for every 1 leq i < n, a_i < a_{i+1}. 2. Array b represents the lexicographically largest sequence such that, for every 1 leq i < n, b_i > b_{i+1}. Given the number of paint cans n, help Alex determine the arrays a and b. -----Input----- The first line contains one integer t (1 le t le 10^4). Then t test cases follow. Each test case contains one integer n (1 le n le 10^5) — the number of paint cans. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output two lines: On the first line, print n integers — the lexicographically smallest sequence of paint cans. On the second line, print n integers — the lexicographically largest sequence of paint cans. -----Examples----- Input 3 5 3 1 Output 1 2 3 4 5 5 4 3 2 1 1 2 3 3 2 1 1 1 -----Note----- None","solution":"def generate_sequences(t, test_cases): outputs = [] for n in test_cases: smallest = \\" \\".join(map(str, range(1, n + 1))) largest = \\" \\".join(map(str, range(n, 0, -1))) outputs.append((smallest, largest)) return outputs"},{"question":"A robot can be programmed to walk in a grid. The grid is infinite and initially the robot is at position (0, 0). The robot can move in four directions: \'U\' (Up), \'D\' (Down), \'L\' (Left), and \'R\' (Right). Each command moves the robot one unit in the respective direction. You are given a string of commands. However, due to a malfunction, exactly `n` commands in the string are erroneous. You can replace each erroneous command with any of the four valid commands to maximize the distance from the starting point (0,0) after executing all commands. Input The first line of input contains a string commands — the original list of commands. The string commands contains between 1 and 100 characters, inclusive, and contains only characters \'U\', \'D\', \'L\', and \'R\'. The second line contains an integer n (1 ≤ n ≤ 50) — the number of erroneous commands you must replace. Output Output the maximum Manhattan distance from the starting point (0,0) to the ending point of the robot\'s path after replacing the erroneous commands with any valid command. Examples Input UDLR 1 Output 2 Input UUDDLRLR 2 Output 4 Note In the first example, the best option is to change one of the commands to match the command in the opposite direction. For instance, replacing \'R\' with \'U\' gives the string \\"UUDL\\", which results in a maximum Manhattan distance of 2 units from the origin. In the second example, one of the ways to maximize the Manhattan distance of 4 units is to change two commands in the middle, such as replacing \'D\' with \'R\' and \'L\' with \'U\', resulting in \\"UUDRRRUR\\".","solution":"def max_manhattan_distance(commands, n): Calculate the maximum Manhattan distance from the starting point (0, 0) after replacing exactly `n` commands in the given list of commands with any valid command to maximize the distance. :param commands: String, the original list of commands. :param n: Integer, number of erroneous commands. :return: Integer, the maximum Manhattan distance. # Calculate initial net moves vertical_balance = commands.count(\'U\') - commands.count(\'D\') horizontal_balance = commands.count(\'R\') - commands.count(\'L\') # Calculate the best-case scenario after correcting n moves max_distance = abs(vertical_balance) + abs(horizontal_balance) + 2 * n return max_distance"},{"question":"Given a grid that represents a battlefield, you are tasked with placing walls to create the longest possible distance from one side of the grid to the other. The grid contains some cells that are already marked as walls, represented by the \'#\' symbol, and empty cells represented by \'.\'. You can place walls in the empty cells to form a continuous path from the top row to the bottom row, without passing through any of the walls. Your task is to find the longest possible distance of a continuous path from the top row to the bottom row with the placement of additional walls. Input The first line contains an integer n (1 ≤ n ≤ 10) — the number of boards. Each board is described by the following: 1. An integer m (1 ≤ m ≤ 10) — the size of the square grid (m x m). 2. Followed by m lines containing m characters each representing the grid cells (either \'.\' for empty cells or \'#\' for wall cells). Output Print n lines, each containing either the integer value of the longest possible distance or -1 if it is impossible to place walls to form a continuous path from the top row to the bottom. Example Input 3 5 .#... ..... ..# ..... .#.#. 4 .... .#.. .#.. .... 3 # # # Output 5 4 -1","solution":"def longest_path(grids): def bfs(grid, start_points): m = len(grid) visited = [[False] * m for _ in range(m)] distance = [[float(\'inf\')] * m for _ in range(m)] queue = [] for x, y in start_points: queue.append((x, y)) visited[x][y] = True distance[x][y] = 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y = queue.pop(0) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True distance[nx][ny] = distance[x][y] + 1 queue.append((nx, ny)) min_distance_to_bottom = float(\'inf\') for j in range(m): if grid[m-1][j] == \'.\': min_distance_to_bottom = min(min_distance_to_bottom, distance[m-1][j]) return -1 if min_distance_to_bottom == float(\'inf\') else min_distance_to_bottom + 1 results = [] for grid in grids: m = len(grid) start_points = [(0, j) for j in range(m) if grid[0][j] == \'.\'] if start_points: max_distance = bfs(grid, start_points) results.append(max_distance) else: results.append(-1) return results # Parsing input def main(input_data): input_lines = input_data.split(\'n\') n = int(input_lines.pop(0)) grids = [] i = 0 while i < len(input_lines): if input_lines[i] == \'\': i += 1 continue m = int(input_lines[i]) grid = input_lines[i+1:i+1+m] grids.append(grid) i += m + 1 results = longest_path(grids) for result in results: print(result)"},{"question":"Polycarp is a delivery driver who must deliver packages to different locations along a straight road. His route is a one-dimensional number line. His starting position is at coordinate 0, and he has exactly n packages to deliver, each to a specific location on this number line. Polycarp\'s delivery route is designed such that he will start at coordinate 0, deliver all the packages, return to coordinate 0, and minimize the total distance traveled. However, Polycarp can choose in which order to deliver the packages. Your task is to determine the minimum distance Polycarp needs to travel to deliver all the packages and return to the start. -----Input----- The first line contains a single integer n (1 le n le 100,000) — the number of packages. The second line contains n integers x_1, x_2, dots, x_n (-10^9 le x_i le 10^9) — the coordinates of the delivery locations. -----Output----- Output a single integer — the minimum distance Polycarp needs to travel to deliver all packages and return to coordinate 0. -----Example----- Input 3 -5 0 10 Output 30 -----Note----- In the example, Polycarp can go to -5, then to 10, and return to 0, or he can go to 10, then to -5, and return to 0. In both cases, the total distance traveled is 30.","solution":"def min_distance(n, locations): Calculates the minimum distance Polycarp needs to travel to deliver all packages and return to coordinate 0. :param n: int - the number of packages :param locations: list of int - coordinates of the delivery locations :return: int - minimum distance Polycarp needs to travel if n == 0: return 0 max_left = min(locations) if locations else 0 max_right = max(locations) if locations else 0 return abs(max_left) + abs(max_right) + abs(max_right - max_left)"},{"question":"You are given an array consisting of N integers a_1, a_2, ..., a_N. Your task is to determine whether there exists a subarray (contiguous segment) of any length that sums to zero. If such a subarray exists, return \\"YES\\"; otherwise, return \\"NO\\". -----Constraints----- - All input values are integers. - 1 leq N leq 100,000 - -10^9 leq a_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ... a_N -----Output----- Print \\"YES\\" if there exists a subarray that sums to zero; otherwise, print \\"NO\\". -----Sample Input 1----- 5 1 2 -3 4 5 -----Sample Output 1----- YES Explanation 1: The subarray [1, 2, -3] sums to 0. -----Sample Input 2----- 4 1 2 3 4 -----Sample Output 2----- NO Explanation 2: No subarray sums to 0.","solution":"def does_zero_sum_subarray_exist(N, arr): prefix_sums = set() current_sum = 0 for num in arr: current_sum += num if current_sum == 0 or current_sum in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"You are playing a 2D video game where the player can move in four directions: up, down, left, and right. The game’s map is given as an n times m grid of characters, where \'.\' represents an empty cell the player can walk through, and \'#\' represents an obstacle that the player cannot pass. The player starts at a given position on the grid, and your goal is to determine the minimum number of moves required to reach a target position, or if it is impossible to reach the target. -----Input----- The first line of input contains two integers n and m (2 le n, m le 100), representing the dimensions of the grid. The next n lines each consist of m characters (\'#\' or \'.\') representing the grid map. The last line contains four integers sr, sc, tr, and tc (0 le sr, sc, tr, tc < 100). (sr, sc) are the starting row and column of the player, and (tr, tc) are the target row and column. The player can move from one cell to another if the cells are adjacent and not blocked by obstacles. -----Output----- Output a single integer representing the minimum number of moves required to reach the target position from the start position. If it is impossible to reach the target position, output -1. -----Examples----- Sample Input: 5 5 ..... .#. .#.#. .#. ..... 0 0 4 4 Sample Output: 8 Sample Input: 3 4 .... .. .... 0 0 1 2 Sample Output: -1","solution":"from collections import deque def minimum_moves(n, m, grid, start, target): sr, sc = start tr, tc = target if grid[sr][sc] == \'#\' or grid[tr][tc] == \'#\': return -1 # start or target is an obstacle directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(sr, sc, 0)]) while queue: r, c, steps = queue.popleft() if (r, c) == (tr, tc): return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, steps + 1)) return -1"},{"question":"Given a positive integer N, determine if the product of its digits is a prime number. A prime number is a number that is greater than 1 and has no positive divisors other than 1 and itself. Example 1: Input: N = 23 Output: 1 Explanation: The product of digits of 23 is 2 * 3 = 6. Since 6 is not a prime number, the output is 0. Example 2: Input: N = 37 Output: 0 Explanation: The product of digits of 37 is 3 * 7 = 21. Since 21 is not a prime number, the output is 0. Example 3: Input: N = 25 Output: 1 Explanation: The product of digits of 25 is 2 * 5 = 10. Since 10 is not a prime number, the output is 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isDigitProductPrime() which takes a number N as input parameter and returns 1 if the product of its digits is a prime number. Otherwise, it returns 0. Expected Time Complexity: O(sqrt(P)) where P is the product of the digits Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{9}","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def isDigitProductPrime(N): digits = [int(d) for d in str(N)] product = 1 for d in digits: product *= d return 1 if is_prime(product) else 0"},{"question":"A company is organizing a coding contest with M participants. Each participant will compete in exactly N rounds, earning a certain number of points in each round. The scores are stored in a two-dimensional array where scores[i][j] represents the score of the i-th participant in the j-th round. The company wants to ensure that no participant wins by an enormous margin. Therefore, they wish to minimize the difference between the highest and lowest total scores of all participants after all rounds. Write a program that takes M and N as input, followed by the scores for each participant in each round, and calculates the minimum possible difference between the highest and lowest total scores. -----Constraints----- - 1 leq M leq 1000 - 1 leq N leq 100 - 0 leq scores[i][j] leq 1000 -----Input----- Input is given from Standard Input in the following format: M N scores[1][1] scores[1][2] ... scores[1][N] scores[2][1] scores[2][2] ... scores[2][N] ... scores[M][1] scores[M][2] ... scores[M][N] -----Output----- Print the minimum possible difference between the highest and lowest total scores. -----Sample Input----- 3 4 10 20 30 40 15 25 35 45 5 15 25 35 -----Sample Output----- 10 In this example: - Participant 1: Total score = 100 - Participant 2: Total score = 120 - Participant 3: Total score = 80 The highest score is 120, and the lowest is 80. The difference is 40, but the minimum difference can be achieved by adjusting scores internally while maintaining the same round structure if any rule allows internal adjustment within rounds or segments of given scores. However, if no adjustments are allowed and without any further internal calculation, the answer would focus on directly comparing totals from raw input as shown which would be 10 in another possible arrangement example.","solution":"def min_score_difference(M, N, scores): Calculate the minimum possible difference between the highest and lowest total scores of participants after all rounds. :param M: Number of participants :param N: Number of rounds :param scores: A 2D list of scores where scores[i][j] is the score of the i-th participant in the j-th round :return: Minimum possible difference between highest and lowest total scores # Calculate total scores for each participant total_scores = [sum(scores[i]) for i in range(M)] # Find the highest and lowest total scores max_score = max(total_scores) min_score = min(total_scores) # Return the difference between highest and lowest total scores return max_score - min_score # Sample input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) scores = [] index = 2 for _ in range(M): scores.append(list(map(int, data[index:index + N]))) index += N result = min_score_difference(M, N, scores) print(result)"},{"question":"John is managing a dataset of students\' exam scores. Each student can take multiple exams, and for each exam, they receive a score between 0 and 100. John is provided with the student names and their corresponding scores for various exams. He needs to evaluate the average score for each student and identify the student with the highest average score. However, the dataset is dynamic, and new scores for existing students or new students may be added over time. John must be able to quickly incorporate this new data and recalculate the averages and identify the top student. Your goal is to help John manage this dynamic scoring system. **Input** The first line contains an integer n (1 ≤ n ≤ 10^5) representing the initial number of score entries. The next n lines each contain a student name (a string without spaces and with length ≤ 100) and an integer score (0 ≤ score ≤ 100). The line after the initial scores contains an integer q (0 ≤ q ≤ 10^5) representing the number of additional entries. The next q lines each contain a student name and an integer score (0 ≤ score ≤ 100). **Output** For each new score added, print the name of the student who has the highest average score after incorporating the new score. If there are multiple students with the same highest average score, output the lexicographically smallest name among them. **Example** _Input_ 4 Alice 85 Bob 90 Alice 95 Charlie 88 2 Alice 100 Bob 70 _Output_ Alice Alice **Explanation** Initially, the scores are: - Alice: [85, 95] - Bob: [90] - Charlie: [88] Average scores are: - Alice: 90 - Bob: 90 - Charlie: 88 After the first addition (Alice, 100), the scores are: - Alice: [85, 95, 100] → average = 93.33 - Bob: [90] → average = 90 - Charlie: [88] → average = 88 The highest average score is for Alice, so the output is \\"Alice\\". After the second addition (Bob, 70), the scores are: - Alice: [85, 95, 100] → average = 93.33 - Bob: [90, 70] → average = 80 - Charlie: [88] → average = 88 Alice still has the highest average score, so the output is \\"Alice\\" again.","solution":"from collections import defaultdict def get_highest_average_student(n, initial_scores, q, additional_scores): student_scores = defaultdict(list) student_averages = defaultdict(float) # Process initial scores for name, score in initial_scores: student_scores[name].append(score) # Function to update the average score def update_average(name): scores = student_scores[name] student_averages[name] = sum(scores) / len(scores) # Update averages for initial scores for name in student_scores.keys(): update_average(name) # Function to find the student with the highest average score def find_top_student(): max_avg = max(student_averages.values()) top_students = [name for name, avg in student_averages.items() if avg == max_avg] return min(top_students) results = [] # Process additional scores for name, score in additional_scores: student_scores[name].append(score) update_average(name) results.append(find_top_student()) return results"},{"question":"You are given a list of N integers, and you need to perform Q operations on it. In each operation, you will be given an integer X and must increase the value of each element in the list by X. After each operation, you need to output the sum of the elements in the list. Input The first line of input contains two integers, N and Q - the size of the list and the number of operations. The second line contains N space-separated integers representing the list. Then there are Q lines, each containing one integer, X, representing the i-th operation. Output Output Q lines. Output the sum of the elements in the list after performing each of the Q operations on the i-th line. Constraints 1 ≤ N ≤ 100, 1 ≤ Q ≤ 100 : 14 points. 1 ≤ N ≤ 1000, 1 ≤ Q ≤ 1000 : 23 points. 1 ≤ N ≤ 10^5, 1 ≤ Q ≤ 10^5 : 63 points. −10^6 ≤ element in the list, X ≤ 10^6 Example Input: 5 2 1 2 3 4 5 2 3 Output: 25 40","solution":"def perform_operations(n, q, array, operations): Performs operations on the list of integers, and returns the sum of the elements after each operation. :param n: Size of the list :param q: Number of operations :param array: List of integers :param operations: List of operations :return: List of sums after each operation # Calculate initial sum of the elements in the list current_sum = sum(array) results = [] for x in operations: # Update the sum after adding x to all elements in the list current_sum += x * n results.append(current_sum) return results"},{"question":"Sasha is the head chef at a prestigious restaurant, and she has N ingredients, each with a weight W_i. She wants to prepare a unique dish where every ingredient is used exactly once, but she has a special restriction: she wants to arrange the ingredients in a line such that for every ingredient except the first one, its weight is a multiple or divisor of the ingredient directly preceding it. Sasha defines a factor chain as a sequence where for each pair of consecutive ingredients in the sequence, the weight of the second ingredient is either a divisor or a multiple of the weight of the first ingredient. Given the list of weights, help Sasha determine the length of the longest possible factor chain that she can form using all the given weights. Input: Each dataset contains two lines. The first line contains a single integer, N, representing the number of ingredients. The second line contains N integers, {W_i}, representing the weights of the ingredients. You may assume the following constraints: 1 leq N leq 50 1 leq W_i leq 10^5 Output: Output a single integer representing the length of the longest possible factor chain. Examples: Input: 4 3 6 2 18 Output: 3 Input: 5 4 8 15 16 23 Output: 3 Input: 6 1 3 9 27 4 8 Output: 4 In the first example, an optimal factor chain could be [3, 6, 18]. In the second example, an optimal factor chain could be [8, 16, 4]. In the third example, an optimal factor chain could be [1, 3, 9, 27].","solution":"def longest_factor_chain(N, weights): weights.sort() dp = [1] * N for i in range(N): for j in range(i): if weights[i] % weights[j] == 0 or weights[j] % weights[i] == 0: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given an array of integers representing a mountain. A mountain array is defined as an array where: 1. The elements of the array are strictly increasing to a point, called the peak, after which they are strictly decreasing. 2. The length of the array is at least 3. 3. The peak element will be greater than its neighbors. Your task is to find the peak element of the mountain array and return its index. If there are multiple peaks in the array, you should return the index of the first peak. **Example:** ```python def find_peak(arr): # Your implementation here # Test Cases print(find_peak([0, 2, 5, 3, 1])) # Output: 2 print(find_peak([3, 5, 3, 2, 0])) # Output: 1 print(find_peak([0, 2, 3, 5, 4, 1])) # Output: 3 print(find_peak([1, 2, 3, 4, 5, 3, 1])) # Output: 4 ``` Input is always going to be a valid mountain array containing at least three integers.","solution":"def find_peak(arr): Finds the peak element of the mountain array and returns its index. :param arr: List[int] - A list of integers representing the mountain array. :return: int - The index of the peak element. left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] < arr[mid + 1]: left = mid + 1 else: right = mid return left"},{"question":"You are given an array A of integers and you have to perform specific operations to transform it. Given Q queries, for each query, depending on the type, you should either update an element in the array or find the minimum element in a specified range of the array after updates. E(Z, N, Q) returns arr; begin for i=1..Q do if query type is \\"UPDATE\\" then update the i-th element of A to Z else if query type is \\"MIN\\" then find the minimum value in the range from index X to Y in the array A after all the updates return the result of all \\"MIN\\" queries end Here Z, N, Q, X, Y, and the result returned by E are integers; A is an array of N integers indexed from 1 to N. If you are not familiar with array handling and queries, it\'s better to look at these concepts in programming. ------ Input ------ The first line of input contains an integer T - the number of test cases. Each test case begins with an integer N - the size of the array A. The second line contains N integers - the initial elements of array A. The third line contains an integer Q - the number of queries. The next Q lines describe a query which can be of two types: 1. \\"UPDATE X Z\\" - this query updates the element at index X to the value Z. 2. \\"MIN X Y\\" - this query finds the minimum element in the range from index X to Y (inclusive) after all the updates. ------ Output ------ Output a line for each \\"MIN\\" query - the minimum value in the specified range after performing all updates. ------ Constraints ------ 1≤T≤100 1≤N≤10^5 1≤A_{i}≤10^9 1≤Q≤10^5 Type is either \\"UPDATE\\" or \\"MIN\\". Index X, Y are such that 1≤X≤Y≤N. ------ Sample Input 1 ------ 1 5 1 3 5 7 9 5 MIN 1 3 UPDATE 2 6 MIN 1 3 UPDATE 3 4 MIN 1 5 ------ Sample Output 1 ------ 1 1 1","solution":"def process_queries(T, test_cases): results = [] for i in range(T): N, A, Q, queries = test_cases[i] for query in queries: query_parts = query.split() if query_parts[0] == \\"UPDATE\\": index = int(query_parts[1]) - 1 value = int(query_parts[2]) A[index] = value elif query_parts[0] == \\"MIN\\": start = int(query_parts[1]) - 1 end = int(query_parts[2]) - 1 results.append(min(A[start:end+1])) return results"},{"question":"Design an algorithm that processes student grades and returns the highest average grade for each k consecutive students in their grade list. # Problem Statement You have been provided with a list of n student grades and an integer k (1 ≤ k ≤ n). Your task is to write a program that finds the maximum average of any contiguous subarray of length k. # Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each test case contains two lines: 1. The first line of each test case contains two space-separated integers: n (1 ≤ n ≤ 100,000) and k (1 ≤ k ≤ n) — the number of students and the length of the subarray. 2. The second line contains n space-separated integers representing the grades of the students. It is guaranteed that the sum of n over all test cases does not exceed 1,000,000. # Output For each test case, print a single line containing the maximum average of any contiguous subarray of length k. # Example Input ``` 2 8 3 5 12 11 5 7 16 19 3 6 2 4 2 10 5 3 8 ``` Output ``` 14.00 7.50 ``` # Note In the first example, out of all possible subarrays of length 3, the one with the maximum average is [11, 5, 7] whose average is 14. In the second example, out of all possible subarrays of length 2, the one with the maximum average is [4, 2] whose average is 7.50. # Guidelines - Use sliding window technique or similar efficient approach to find the maximum average for the contiguous subarray. - Maintain the clarity and efficiency of your code as n can be very large. - Make sure to format the average to two decimal places in the output. Good luck, and happy coding!","solution":"def find_max_average(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] grades = test_cases[i][1] max_sum = current_sum = sum(grades[:k]) for j in range(k, n): current_sum += grades[j] - grades[j - k] max_sum = max(max_sum, current_sum) max_average = max_sum / k results.append(f\\"{max_average:.2f}\\") return results"},{"question":"Alice is planning a party and wants to organize the music playlist for the event. She has a collection of n songs, each of a specific duration. To keep the party lively, Alice wants to ensure that the total duration of the playlist is exactly k minutes. Alice can include any song in the playlist multiple times, and the songs can appear in any order. She wants to know in how many distinct ways she can build a playlist that exactly fits the k minutes duration. Help Alice determine the number of distinct playlists that sum up to exactly k minutes. Input The first line of input contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000) — the number of songs and the desired total duration of the playlist in minutes, respectively. The second line contains n integers, where the i-th integer represents the duration of the i-th song (1 ≤ duration ≤ 100). Output Print out the only integer — the number of distinct playlists that sum up to exactly k minutes. If no such playlist is possible, print 0. Examples Input 3 4 1 2 3 Output 4 Input 2 3 2 2 Output 0 Input 4 7 1 3 4 5 Output 6 Note In the first sample test case, the distinct playlists that sum up to exactly 4 minutes are: * 1 + 1 + 1 + 1 * 1 + 1 + 2 * 1 + 2 + 1 * 2 + 1 + 1 * 1 + 3 * 3 + 1","solution":"def num_playlists(n, k, durations): # Initialize a DP array where dp[i] will store the number of ways to achieve # a total duration of i minutes using the provided song durations. dp = [0] * (k + 1) dp[0] = 1 # There is one way to make a duration of 0 - use no songs # Iterate over each song duration for duration in durations: # Update the dp array for each possible total duration from k to duration # We iterate backwards to ensure that each song can be counted multiple times for current_duration in range(duration, k + 1): dp[current_duration] += dp[current_duration - duration] return dp[k] # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) durations = list(map(int, data[2:2 + n])) print(num_playlists(n, k, durations))"},{"question":"A large organization has a team of n engineers who are working on developing a pre-schedule automation tool for their meetings. The team wants to ensure that no two engineers are ever double-booked, i.e., no two engineers have meetings scheduled at the same time slot. The team receives m requests to schedule meetings, where each request specifies the start time and end time of the meeting, as well as the identifier of the engineer who will be attending the meeting. The engineers must determine if it is possible to accept all the meeting requests without any conflicts. Write a function that will determine if all meeting requests can be processed without conflicts. If it is possible, return \\"YES\\". Otherwise, return \\"NO\\". Input: The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 100000) — the number of engineers and the number of meeting requests. Each of the next m lines contains three integers: si, ei (1 ≤ si < ei ≤ 100000), and ai (1 ≤ ai ≤ n), representing the start time, end time, and the identifier of the engineer for the meeting request, respectively. Output: Output \\"YES\\" if it is possible to schedule all meetings without conflicts. Otherwise, print \\"NO\\". Example Input: 3 5 1 5 1 6 10 1 5 8 2 2 5 3 8 9 3 Output: YES Input: 2 3 1 4 1 2 3 1 4 5 2 Output: NO Note: - In the first example, all meeting requests can be scheduled without any overlap for each engineer. - In the second example, the first and second meeting requests conflict for engineer 1.","solution":"def can_schedule_meetings(n, m, requests): from collections import defaultdict # Dictionary to hold the intervals for each engineer engineer_meetings = defaultdict(list) # Populate the dictionary with requests for start, end, engineer in requests: engineer_meetings[engineer].append((start, end)) # Check for conflicts for each engineer for engineer in engineer_meetings: sorted_meetings = sorted(engineer_meetings[engineer]) for i in range(1, len(sorted_meetings)): # If the start time of the current meeting is less than the end time of the previous, there\'s a conflict if sorted_meetings[i][0] < sorted_meetings[i - 1][1]: return \\"NO\\" return \\"YES\\""},{"question":"You are working for a delivery company and need to efficiently assign delivery tasks to drivers. There are n tasks and m drivers. Each task is described by the time it will take to complete it, and each driver has a maximum working time. Your goal is to determine the optimal way to assign the tasks to drivers such that no driver exceeds their maximum working time, if it is possible to do so. Specifically, you need to decide if it is possible to assign all tasks to the drivers under the given constraints. Input - The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) – the number of tasks and the number of drivers, respectively. - The second line contains n integers t_i (1 ≤ t_i ≤ 1000) – the time each task takes. - The third line contains m integers T_j (1 ≤ T_j ≤ 10000) – the maximum working time each driver has. Output - If it is possible to assign all tasks to the drivers such that no driver\'s total assigned task time exceeds their maximum working time, print \\"YES\\". - Otherwise, print \\"NO\\". Examples Input 4 3 2 3 5 7 10 7 8 Output YES Input 5 2 3 2 4 1 5 5 5 Output NO Note In the first example, the tasks can be distributed as follows: - Driver 1: Takes tasks with times 2, 3, and 5, totaling 10. - Driver 2: Takes the task with time 7. - Driver 3: Takes no tasks. In the second example, it is impossible to assign all tasks without exceeding the drivers\' maximum working times.","solution":"def can_assign_tasks(n, m, tasks, drivers): Determines if it\'s possible to assign tasks to drivers such that no driver exceeds their maximum working time. Parameters: n (int): Number of tasks. m (int): Number of drivers. tasks (list of int): Time each task takes. drivers (list of int): Maximum working time each driver has. Returns: str: \\"YES\\" if it\'s possible to assign all tasks under constraints, \\"NO\\" otherwise. tasks.sort(reverse=True) drivers.sort(reverse=True) for task in tasks: for i in range(m): if drivers[i] >= task: drivers[i] -= task break else: return \\"NO\\" return \\"YES\\""},{"question":"Alice and Bob love playing with arrays. They have an array A of N integers and they want to find out how many segments of this array will have the sum equal to a given number M. A segment is defined as a contiguous subarray of A. Help Alice and Bob by writing a program that calculates the number of such segments. Input: The first line contains two integers N and M, N representing the number of elements in the array, and M representing the target sum. The second line contains N integers representing the elements of the array A. Output: Output a single integer that denotes the number of segments whose elements sum up to M. Constraints: 1 ≤ N ≤ 100000 -10^9 ≤ A[i] ≤ 10^9 -10^9 ≤ M ≤ 10^9 Sample Input 5 5 1 2 3 2 1 Sample Output 2 Explanation The segments that sum up to 5 are: 1. The segment starting from index 0 to 2 (1+2+2). 2. The segment starting from index 1 to 3 (2+3). Thus, there are 2 segments that sum up to the given number 5.","solution":"def count_segments_with_sum(A, N, M): Returns the number of contiguous subarrays that sum up to M. count = 0 prefix_sum = 0 prefix_sum_count = {0: 1} for num in A: prefix_sum += num if (prefix_sum - M) in prefix_sum_count: count += prefix_sum_count[prefix_sum - M] if prefix_sum in prefix_sum_count: prefix_sum_count[prefix_sum] += 1 else: prefix_sum_count[prefix_sum] = 1 return count"},{"question":"You are given a string S consisting of only lowercase alphabets. Determine the longest subsequence of S such that every character in the subsequence appears at least twice in the string. -----Constraints----- - The length of the string S is between 1 and 1000, inclusive. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the length of the longest subsequence. -----Sample Input----- abcabc -----Sample Output----- 6 For the input \\"abcabc\\", the longest subsequence in which every character appears at least twice is \\"abcabc\\" itself, so the output is 6. -----Sample Input----- aabbcc -----Sample Output----- 6 For the input \\"aabbcc\\", the longest subsequence in which every character appears at least twice is \\"aabbcc\\" itself, so the output is 6. -----Sample Input----- abacabadabacaba -----Sample Output----- 14 For the input \\"abacabadabacaba\\", the longest subsequence in which every character appears at least twice is \\"abacabadabaca\\", so the output is 14.","solution":"from collections import Counter def longest_subsequence_length(S): Returns the length of the longest subsequence of S such that every character in the subsequence appears at least twice. # Count the frequency of each character char_count = Counter(S) # Initialize the length of the longest subsequence subseq_length = 0 # Iterate through the character counts for count in char_count.values(): # Add twice the number of complete pairs of each character to the subsequence length subseq_length += (count // 2) * 2 return subseq_length"},{"question":"Three friends want to split a restaurant bill. They each have certain amounts of money and want to pay equal amounts if possible. They have three non-negative integers X, Y, and Z representing the amounts of money each friend has. You need to determine whether it\'s possible to split the bill in such a way that each friend pays an equal amount. Note that each friend can give or receive money among themselves, but they cannot change the total amount of money they have collectively. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each line of the next T lines contains three integers X, Y, and Z. ------ Output Format ------ For each test case, output \\"YES\\" if it\'s possible to split the money equally among the three friends, or \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10^5 0 ≤ X, Y, Z ≤ 10^{9} ------ Sample Input 1 ------ 3 3 3 3 4 5 6 5 5 5 ------ Sample Output 1 ------ YES YES YES ------ Explanation 1 ------ - Test case 1: Each friend already has 3 units of money, which is already equally split. - Test case 2: The total amount of money is 15, which can be equally divided into three parts (5, 5, 5). - Test case 3: Each friend already has 5 units of money, which is equally split.","solution":"def can_split_equally(t, test_cases): results = [] for case in test_cases: X, Y, Z = case total = X + Y + Z if total % 3 == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an integer array `a` of size `n`. You are also given `q` operations. Each operation consists of two integers `l` and `r` representing a range (1-based index). For each operation, you need to find the sum of the elements from index `l` to `r` both inclusive and print the sum for each operation. -----Input----- - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the size of the array and the number of operations. - The second line contains `n` integers `a1, a2, ..., an` (-10^4 ≤ ai ≤ 10^4) — the elements of the array. - Each of the next `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n) — the range for each operation. -----Output----- Print `q` lines, each line containing the sum of the elements from index `l` to `r`. -----Examples----- Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15 Input 4 2 -1 2 -3 4 1 2 3 4 Output 1 1 -----Note----- In the first example: - For the first operation, the sum of elements from index 1 to 3 is `1 + 2 + 3` which equals 6. - For the second operation, the sum of elements from index 2 to 4 is `2 + 3 + 4` which equals 9. - For the third operation, the sum of elements from index 1 to 5 is `1 + 2 + 3 + 4 + 5` which equals 15. In the second example: - For the first operation, the sum of elements from index 1 to 2 is `-1 + 2` which equals 1. - For the second operation, the sum of elements from index 3 to 4 is `-3 + 4` which equals 1.","solution":"def range_sums(n, q, array, queries): Returns the sums of elements from index l to r for each query. :param n: The size of the array. :param q: The number of queries. :param array: List of integers representing the array. :param queries: List of tuples where each tuple (l, r) represents the range. :return: List of sums for each query. # Precompute prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] result = [] for l, r in queries: result.append(prefix_sums[r] - prefix_sums[l - 1]) return result"},{"question":"A company is organizing a series of team-building activities over several days. Each day, a specific team of employees participates, and every team has a unique set of members. Some employees might participate on multiple days. The company wants to track the total number of unique employees that participate over all the days. Your task is to find out how many uniquely different employees have been involved in the activities over all the days. -----Input----- The first line of the input contains one integer d (1 le d le 100) — the number of days for which activities are scheduled. Each of the next d lines starts with an integer m_i (1 le m_i le 100), which represents the number of employees in the team for the i-th day, followed by m_i distinct integers which are the IDs of employees of the team for that day. Employee IDs are positive integers and do not exceed 10^5. -----Output----- Print one integer — the total number of unique employees that participated in at least one of the activities across all the days. -----Example----- Input 4 3 1 2 3 4 2 4 5 6 5 7 8 9 10 1 2 10 11 Output 11 -----Note----- In the example, the employees participating over the 4 days are the following: Day 1: Employees 1, 2, 3 Day 2: Employees 2, 4, 5, 6 Day 3: Employees 7, 8, 9, 10, 1 Day 4: Employees 10, 11 The unique employees involved are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, and 11, totaling to 11 unique employees.","solution":"def count_unique_employees(d, days): Returns the number of unique employees that participated over all the days. :param d: Number of days. :param days: List of lists, where each inner list specifies the number of employees for that day followed by their IDs. :return: Integer, the total number of unique employees. unique_employees = set() for day in days: employees = day[1:] unique_employees.update(employees) return len(unique_employees)"},{"question":"problem Bob loves sorting, but he has a peculiar way of sorting numbers. Bob defines a new sorting method called \\"Zigzag Sort.\\" In Zigzag Sort, the numbers alternate between increasing and decreasing order. For example, given the sequence [3, 1, 4, 2], the Zigzag Sorted sequence will be [1, 4, 2, 3] or [2, 4, 1, 3], meeting the following conditions: - The first number is the smallest. - The second number is the largest remaining number. - The third number is the smallest remaining number. - The fourth number is the largest of the remaining numbers. - And so on... Write a function that takes an array of integers and returns the Zigzag Sorted array. Input format Input is given in one line: n a_1 a_2 ... a_n Where n represents the number of integers, followed by n integers that need to be Zigzag Sorted. Constraint 1 ≤ n ≤ 10^5 -10^9 ≤ a_i ≤ 10^9 Output format Output the Zigzag Sorted array. Input example 1 5 3 1 4 5 2 Output example 1 1 5 2 4 3 Input example 2 6 9 2 -3 7 4 5 Output example 2 -3 9 2 7 4 5 Example Input 6 9 2 -3 7 4 5 Output -3 9 2 7 4 5","solution":"def zigzag_sort(arr): Returns the Zigzag sorted array. # Sort array in ascending order arr.sort() # Initialize empty result list result = [] # Initialize pointers for the smallest and largest remaining elements left, right = 0, len(arr) - 1 # Alternate between smallest and largest while left <= right: if left == right: result.append(arr[left]) else: result.append(arr[left]) result.append(arr[right]) left += 1 right -= 1 return result"},{"question":"Petya, once again facing challenges, has been asked to help Vlad with a new coding problem. Vlad is working on creating a string from given specifications but struggling to validate the final result. Here\'s how Vlad described the problem: Vlad starts with a target string `T` of lowercase English letters. He is supposed to generate `T` using a given list of strings by concatenating one or more of them in any order. However, there\'s a twist: some strings in the list have the requirement that they must appear exactly once in any valid concatenation, while other strings do not have this constraint. Your job is to help Vlad by writing a program that verifies if `T` can be formed by concatenating strings from the list, while respecting the constraints. -----Input----- - The first line contains the target string `T` (1 ≤ |T| ≤ 10^5). - The second line contains one integer `m` (1 ≤ m ≤ 100), the number of strings in the list. - Each of the next `m` lines contains: - An integer `c` (which is either 0 or 1) and - A string `s` (1 ≤ |s| ≤ 10^5), separated by a space. - If `c` is 1, string `s` must appear exactly once in the concatenation. - If `c` is 0, string `s` can appear any number of times (including zero). It is guaranteed that the total length of all strings in the list does not exceed 10^5. -----Output----- Print \\"YES\\" if it is possible to form `T` by concatenating the strings from the list following the given constraints, otherwise print \\"NO\\". -----Examples----- Input helloworld 3 1 hello 1 world 0 er Output YES Input codingtest 2 1 code 1 test Output NO -----Note----- In the first example, we can form the target string \\"helloworld\\" by concatenating the strings \\"hello\\" and \\"world\\", each exactly once. The string \\"er\\" does not disrupt the formation as it can appear zero times. In the second example, the target string \\"codingtest\\" cannot be formed since the necessary \\"ing\\" part is missing and neither \\"code\\" nor \\"test\\" alone can complete the requirement. This problem challenges you to check against conditions of exact appearances and flexible usage of given strings to match a target string.","solution":"def can_form_string(T, m, strings): mandatory = [] optional = [] for c, s in strings: if c == 1: mandatory.append(s) else: optional.append(s) # Look for all mandatory strings in T for s in mandatory: pos = T.find(s) if pos == -1: return \\"NO\\" else: T = T[:pos] + T[pos+len(s):] # Try to match the remaining T using optional strings dp = [False] * (len(T) + 1) dp[0] = True for i in range(len(T)): if dp[i]: for opt in optional: if T.startswith(opt, i): dp[i + len(opt)] = True return \\"YES\\" if dp[len(T)] else \\"NO\\""},{"question":"You are given an array of integers. Your task is to modify the array such that all even numbers come before all odd numbers, and within each group (even and odd), the original relative order of the elements must be preserved. Write a function `reorder_array(nums)` that takes a list of integers `nums` and returns a new list where all even integers appear before all odd integers, maintaining the relative order of even and odd numbers as they appeared in the original array. # Function Signature ```python def reorder_array(nums: List[int]) -> List[int]: pass ``` # Input - A single list of integers `nums` where `1 ≤ len(nums) ≤ 10^5` and each integer is between `-10^6` and `10^6`. # Output - Return a list of integers with all evens arranged before all odds, maintaining their relative order. # Examples Example 1 ```python nums = [1, 2, 3, 4, 5, 6] print(reorder_array(nums)) # Output: [2, 4, 6, 1, 3, 5] ``` Example 2 ```python nums = [4, 3, 2, 1] print(reorder_array(nums)) # Output: [4, 2, 3, 1] ``` Example 3 ```python nums = [0, 1, 2, 3, 4, 5] print(reorder_array(nums)) # Output: [0, 2, 4, 1, 3, 5] ``` # Note - The relative order of the even numbers (and the odd numbers) in the original array should be maintained in the returned array.","solution":"from typing import List def reorder_array(nums: List[int]) -> List[int]: even_nums = [num for num in nums if num % 2 == 0] odd_nums = [num for num in nums if num % 2 != 0] return even_nums + odd_nums"},{"question":"You are programming an automated fruit vendor machine. The machine should be able to maintain records of available fruits and their quantities, and it allows customers to purchase fruits if they are available in the required quantity. Implement a function to handle the series of operations. The operations are given in sequential order and can be either to restock a type of fruit or to sell a certain quantity of a fruit. ------ Input ------ The input consists of multiple lines. The first line contains an integer T - the number of operations. Each of the next T lines describe an operation: - If the operation is to restock a fruit, it is represented as \\"restock fruit_name quantity\\" - If the operation is to sell a fruit, it is represented as \\"sell fruit_name quantity\\" The fruit_name is a string containing alphabetical characters only, and quantity is an integer. A successful sale operation should print \\"Sold\\" followed by the fruit_name. If the fruit to be sold is not available in the required quantity, it should print \\"Insufficient quantity\\" followed by the fruit_name. ------ Output ------ The function should print the result of each sale operation on a new line. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ quantity ≤ 10^{4} fruit_name will have a length of at least 1 and at most 20 characters. ------ Example Input ------ 8 restock apple 50 restock orange 30 sell apple 25 sell orange 40 restock banana 100 sell banana 35 restock orange 50 sell orange 70 ------ Example Output ------ Sold apple Insufficient quantity orange Sold banana Sold orange Implement the function to handle the operations and produce the correct output.","solution":"def fruit_vendor(operations): inventory = {} results = [] for operation in operations: parts = operation.split() action, fruit_name, quantity = parts[0], parts[1], int(parts[2]) if action == \\"restock\\": if fruit_name in inventory: inventory[fruit_name] += quantity else: inventory[fruit_name] = quantity elif action == \\"sell\\": if fruit_name in inventory and inventory[fruit_name] >= quantity: inventory[fruit_name] -= quantity results.append(f\\"Sold {fruit_name}\\") else: results.append(f\\"Insufficient quantity {fruit_name}\\") return \\"n\\".join(results)"},{"question":"IIST has recently come up with a innovative way to conduct lectures by leveraging drones. These drones can carry projectors, and fly above a fixed set of points to project the lecture content. However, the drones’ flight time is limited due to battery constraints. You are tasked with designing a route for the drones that minimizes the maximum vertical distance they need to cover. Input Format: The first line contains the number of test cases, T. The next T cases contains the positions of points where the drones need to project the lecture content. Each test case starts with a single integer n, 2 ≤ n ≤ 20, the number of projection points. The points are identified by their vertical and horizontal coordinates. Each of the subsequent lines contains 2 integers x_i, y_i that describe the position of the projection point in the plane. (x_i, y_i) are between -100 and 100. Output Format: For each test case, compute a route that ensures the maximum vertical distance a drone has to cover is minimized. Display the smallest possible maximum vertical distance (accurate to two fractional digits). Sample Input: 2 4 0 0 2 1 3 -1 5 3 3 1 1 -1 3 2 -2 Sample Output: 1.00 4.00","solution":"def minimize_maximum_vertical_distance(test_cases): Computes the smallest possible maximum vertical distance a drone has to cover for each test case. Parameters: test_cases (list): List of test cases, where each test case is a list of tuples representing points (x, y). Returns: list: List of minimum maximum vertical distances for each test case results = [] for points in test_cases: y_coords = [y for (x, y) in points] min_y = min(y_coords) max_y = max(y_coords) min_max_vertical_distance = max_y - min_y results.append(f\\"{min_max_vertical_distance:.2f}\\") return results def parse_input(input_string): Parses the input string and returns structured data for processing. Parameters: input_string (str): Multi-line string input as described in the problem. Returns: list: List of test cases, where each test case is a list of tuples representing points (x, y). lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) points = [] for i in range(index + 1, index + 1 + n): x, y = map(int, lines[i].split()) points.append((x, y)) index += n + 1 test_cases.append(points) return test_cases def main(input_string): test_cases = parse_input(input_string) results = minimize_maximum_vertical_distance(test_cases) return \'n\'.join(results) input_string = \'\'\'2 4 0 0 2 1 3 -1 5 3 3 1 1 -1 3 2 -2\'\'\' print(main(input_string)) # Expected output: \'4.00n5.00\'"},{"question":"Create a function that simulates a basic \\"FizzBuzz\\" game. The function should take a single integer n and return a list of strings representing the sequence from 1 to n. For multiples of 3, add \\"Fizz\\" instead of the number, for multiples of 5, add \\"Buzz\\", and for multiples of both 3 and 5, add \\"FizzBuzz\\". If n is less than 1, return an empty list.","solution":"def fizz_buzz(n): Generates the FizzBuzz sequence from 1 to n. For multiples of 3, the string \\"Fizz\\" is added. For multiples of 5, the string \\"Buzz\\" is added. For multiples of both 3 and 5, the string \\"FizzBuzz\\" is added. Otherwise, the number itself is added as a string. If n is less than 1, returns an empty list. if n < 1: return [] result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"There is a kingdom with N cities connected by N-1 roads, each road connecting two different cities bidirectionally. The kingdom\'s queen wants to investigate the connectivity of her kingdom by selecting two cities such that every other city can be reached by at least one of them directly or indirectly. You are to help the queen determine if there exist such two cities. If it is possible, you should print \\"YES\\", otherwise print \\"NO\\". Input Format - The first line of input contains the number of cities, N (2 ≤ N ≤ 3000). - Each of the next N-1 lines contains 2 space-separated integers ai and bi (1 ≤ ai, bi ≤ N, ai ≠ bi), denoting that there exists a road between the cities ai and bi. Output Format - Print \\"YES\\" if there exist two such cities, otherwise print \\"NO\\". SAMPLE INPUT 5 1 2 1 3 1 4 4 5 SAMPLE OUTPUT YES Explanation In the sample case, selecting cities 1 and 4 makes all other cities reachable directly or indirectly. City 2 and 3 can be reached via city 1, and city 5 can be reached via city 4. Therefore, the answer is \\"YES\\".","solution":"def is_possible(N, roads): from collections import defaultdict # Function to run a Depth First Search (DFS) and count reachability def dfs(node, visited): stack = [node] count = 0 while stack: curr = stack.pop() if not visited[curr]: visited[curr] = True count += 1 for neighbor in adj_list[curr]: if not visited[neighbor]: stack.append(neighbor) return count # Create adjacency list representation of the graph adj_list = defaultdict(list) for a, b in roads: adj_list[a].append(b) adj_list[b].append(a) # Check connectivity from any city for node in range(1, N + 1): visited = [False] * (N + 1) visited[node] = True count = 0 for neighbor in adj_list[node]: if not visited[neighbor]: result = dfs(neighbor, visited) count += result if count == N - 1: return \\"YES\\" return \\"NO\\""},{"question":"An amusement park is designing a new roller coaster ride. The ride includes a sequence of vertical loops, each loop consisting of a certain number of seats. The goal is to determine how many guests can be seated in the ride given a specific configuration of loops. You are tasked with building a system that calculates the total seating capacity for a given set of loops, each with a different number of seats. The system must also ensure that guests are distributed as evenly as possible across the loops. Constraints Each file will not contain T test cases where 1 ≤ T ≤ 100 1 ≤ Number of loops ≤ 50 1 ≤ Seats per loop ≤ 100 Input There will be one line of input that will contain an integer N (1 ≤ N ≤ 100) which represents the number of test cases. Each subsequent line will start with an integer L (1 ≤ L ≤ 50) representing the number of loops, followed by L integers representing the number of seats in each loop. Output For each test case, output a single line containing two integers. The first integer should be the total seating capacity for all loops combined. The second integer should be the number of guests seated in the largest loop, ensuring the most even distribution possible. Explanation of sample below There are a total of 2 test cases. In the first test case, there is 1 loop with 10 seats. Hence, the total seating capacity is 10, and since there is only one loop, the largest loop has 10 seats. In the second test case, there are 2 loops with 4 and 6 seats, respectively. The total seating capacity is 10, and to ensure distribution as even as possible, 6 guests can be seated in the largest loop. SAMPLE INPUT 2 1 10 2 4 6 SAMPLE OUTPUT 10 10 10 6","solution":"def calculate_seating_capacity(test_cases): results = [] for case in test_cases: loops = case[1:] total_capacity = sum(loops) max_loop = max(loops) results.append((total_capacity, max_loop)) return results"},{"question":"You are an astronaut preparing for a mission to Mars. To keep track of your fuel usage, you want to write a program that calculates the fuel efficiency of the spacecraft for each leg of the trip. The spacecraft\'s fuel efficiency changes during the trip, and you have recorded the distance traveled and the fuel consumed for each leg. Implement a function `fuel_efficiency` that takes two lists as input: - `distances`: A list of positive integers representing the distance traveled in kilometers for each leg of the trip. - `fuel_used`: A list of positive integers representing the amount of fuel consumed in liters for each leg of the trip. The function should return a new list where each element is the fuel efficiency (distance per liter) for the corresponding leg of the trip. The fuel efficiency is calculated by dividing the distance traveled by the amount of fuel used. If the two input lists are not of the same length or if either list is empty, your function should return an empty list. ```python distances = [100, 200, 150] fuel_used = [10, 20, 15] fuel_efficiency(distances, fuel_used) == [10.0, 10.0, 10.0] distances = [300, 400] fuel_used = [15, 20] fuel_efficiency(distances, fuel_used) == [20.0, 20.0] distances = [100] fuel_used = [0] fuel_efficiency(distances, fuel_used) == [] # division by zero is handled by returning empty list ``` Note: The returned list should contain float values representing the fuel efficiency for each leg. Each value should be formatted to one decimal place, but you can assume that Python will handle this naturally with floating point division.","solution":"def fuel_efficiency(distances, fuel_used): This function calculates the fuel efficiency for each leg of the trip. Arguments: distances -- list of positive integers representing distances traveled in kilometers fuel_used -- list of positive integers representing fuel consumed in liters Returns: A list of floats representing fuel efficiency (distance per liter) for each leg of the trip. If the input lists have different lengths or are empty, returns an empty list. if len(distances) != len(fuel_used) or len(distances) == 0: return [] efficiency = [] for distance, fuel in zip(distances, fuel_used): if fuel == 0: return [] # handle division by zero efficiency.append(distance / fuel) return efficiency"},{"question":"Create a program that simulates a basic task scheduler. The scheduler receives a list of tasks, each with a specified duration and a list of dependencies. A task can only be started if all its dependencies have been completed. Your program should determine the earliest start and end times for each task given the constraints. Each task is identified by a unique task ID (a positive integer). Each dependency is defined by the task ID of the task it depends on. All tasks and dependencies will be defined such that there are no circular dependencies. # Input - The first line contains a single integer N, the number of tasks (1 <= N <= 100). - The next N lines each describe a task: - The first integer of each line is the task ID. - The second integer is the duration of the task (1 <= duration <= 100). - The third integer is the number of dependencies, D (0 <= D <= 10). - If D is not zero, it is followed by D integers representing the task IDs on which the task depends. # Output - For each task, output the task ID, its earliest start time, and earliest end time, on separate lines. # Sample Input ``` 4 1 3 0 2 2 1 1 3 4 1 2 4 1 1 3 ``` # Sample Output ``` 1 0 3 2 3 5 3 5 9 4 9 10 ``` # Explanation - Task 1 can start immediately at time 0 and finishes at time 3. - Task 2 depends on task 1. It starts at time 3 and finishes at time 5. - Task 3 depends on task 2. It starts at time 5 and finishes at time 9. - Task 4 depends on task 3. It starts at time 9 and finishes at time 10.","solution":"def task_scheduler(tasks): from collections import defaultdict, deque # Parse the tasks input task_info = {} task_dependencies = defaultdict(list) indegree = defaultdict(int) for task in tasks: task_id, duration, num_deps, *deps = task task_info[task_id] = (duration, deps) for dep in deps: task_dependencies[dep].append(task_id) indegree[task_id] = num_deps # Initialize with tasks that have no dependencies start_times = {} end_times = {} queue = deque() for task_id in task_info: if indegree[task_id] == 0: queue.append(task_id) start_times[task_id] = 0 # Process the tasks in topological order while queue: current = queue.popleft() duration, deps = task_info[current] start_time = start_times[current] end_time = start_time + duration end_times[current] = end_time for dependent in task_dependencies[current]: indegree[dependent] -= 1 if indegree[dependent] == 0: queue.append(dependent) start_times[dependent] = max(end_times[dep] for dep in task_info[dependent][1]) # Prepare the result result = [(task_id, start_times[task_id], end_times[task_id]) for task_id in sorted(task_info)] return result"},{"question":"You are organizing a competition where each participant needs to submit a username with a unique identifier. The format of the identifier is `X-y`, where `X` is a unique username, and `y` is a non-negative integer that increments for each subsequent submission by the same user. For the first submission, `y` is 0. You are given a set of submissions without the `-y` part. Your task is to generate the correct identifier for each submission based on the order they appeared and the submissions that have already been recorded. For example, if the submissions are [\\"john\\", \\"jane\\", \\"john\\"], the identifiers should be [\\"john-0\\", \\"jane-0\\", \\"john-1\\"] as \\"john\\" has appeared twice, and \\"jane\\" once. Write a function that takes a list of submissions as input and returns a list of identifiers. -----Input----- The function should receive a single argument `submissions` (1 ≤ len(submissions) ≤ 1000), which is a list of strings representing the usernames in the order they were submitted. -----Output----- The function should return a list of strings, where each string corresponds to the correct identifier for each submission. -----Examples----- Input [\\"john\\", \\"jane\\", \\"john\\", \\"jane\\", \\"john\\"] Output [\\"john-0\\", \\"jane-0\\", \\"john-1\\", \\"jane-1\\", \\"john-2\\"] Input [\\"alice\\", \\"alice\\", \\"alice\\"] Output [\\"alice-0\\", \\"alice-1\\", \\"alice-2\\"] Input [\\"bob\\", \\"bob\\", \\"alice\\", \\"alice\\", \\"bob\\"] Output [\\"bob-0\\", \\"bob-1\\", \\"alice-0\\", \\"alice-1\\", \\"bob-2\\"]","solution":"def generate_identifiers(submissions): counts = {} identifiers = [] for username in submissions: if username not in counts: counts[username] = 0 else: counts[username] += 1 identifier = f\\"{username}-{counts[username]}\\" identifiers.append(identifier) return identifiers"},{"question":"Implement a class called `MovieCollection` that handles a collection of movies. The class has the following functionalities: 1. `addMovie(String title, int rating)`: Adds a movie with the given title and rating to the collection. If a movie with the same title already exists, update its rating to the new rating. 2. `getRating(String title)`: Returns the rating of the movie with the given title. If the movie does not exist, return -1. 3. `getTopRatedMovie()`: Returns the title of the movie with the highest rating. If there are multiple movies with the same highest rating, return the one that was added first. If the collection is empty, return \\"No movies in collection\\". The `MovieCollection` class should be implemented with the following constraints and functionalities: - The `addMovie` method should operate in O(1) time on average. - The `getRating` method should operate in O(1) time. - The `getTopRatedMovie` method should operate in O(1) time on average. Example: ``` MovieCollection movies = new MovieCollection(); movies.addMovie(\\"Inception\\", 9); movies.addMovie(\\"Interstellar\\", 8); System.out.println(movies.getRating(\\"Inception\\")); // Output: 9 movies.addMovie(\\"The Dark Knight\\", 10); System.out.println(movies.getTopRatedMovie()); // Output: \\"The Dark Knight\\" movies.addMovie(\\"Interstellar\\", 11); System.out.println(movies.getTopRatedMovie()); // Output: \\"Interstellar\\" System.out.println(movies.getRating(\\"Avatar\\")); // Output: -1 ``` Your Task: Implement the `MovieCollection` class with its methods. You do not need to handle input/output operations. You only need to complete the class definition as specified, ensuring that all constraints and methods operate within the required time complexities. Constraints: - The title of the movie will consist of alphanumeric characters and spaces, with a length between 1 and 100. - The rating of the movie will be an integer between 1 and 10. - There will be at most 10^5 movies in the collection at any given time.","solution":"class Movie: def __init__(self, title, rating): self.title = title self.rating = rating class MovieCollection: def __init__(self): self.movies = {} self.top_rated_movie = None def addMovie(self, title, rating): if title in self.movies: self.movies[title].rating = rating else: self.movies[title] = Movie(title, rating) if self.top_rated_movie is None or self.top_rated_movie.rating < rating or (self.top_rated_movie.rating == rating and title < self.top_rated_movie.title): self.top_rated_movie = self.movies[title] def getRating(self, title): if title in self.movies: return self.movies[title].rating return -1 def getTopRatedMovie(self): if self.top_rated_movie: return self.top_rated_movie.title return \\"No movies in collection\\""},{"question":"The Smallville library has been experiencing issues with their book management system. They want to develop a new system to efficiently manage the borrowing and returning of books. The library has a collection of books, each identified by a unique book id, and a record of books currently borrowed by visitors. Your task is to implement two functions, `borrow_book` and `return_book`, that will handle the borrowing and returning of books, respectively. You also need to implement a third function, `currently_borrowed`, to list all currently borrowed books. # Detailed Spec: 1. **borrow_book(book_id: int)**: This function should mark a book as borrowed. If the book is already borrowed, it should return \\"Book already borrowed\\", otherwise it should return \\"Book borrowed successfully\\". 2. **return_book(book_id: int)**: This function should mark a book as returned. If the book was not borrowed, it should return \\"Book was not borrowed\\", otherwise it should return \\"Book returned successfully\\". 3. **currently_borrowed()**: This function should return a list of all book ids that are currently borrowed, sorted in ascending order. Assume the initial state of the system is that no books are borrowed. # Input/Output Example: ``` borrow_book(1) -> \\"Book borrowed successfully\\" borrow_book(2) -> \\"Book borrowed successfully\\" borrow_book(1) -> \\"Book already borrowed\\" return_book(1) -> \\"Book returned successfully\\" return_book(1) -> \\"Book was not borrowed\\" currently_borrowed() -> [2] borrow_book(3) -> \\"Book borrowed successfully\\" borrow_book(2) -> \\"Book already borrowed\\" currently_borrowed() -> [2, 3] ``` # Constraints: - Book IDs are positive integers. - Assume there will be no more than 1000 unique book IDs borrowed at any time. Implement the functions in your preferred programming language.","solution":"borrowed_books = set() def borrow_book(book_id: int) -> str: if book_id in borrowed_books: return \\"Book already borrowed\\" borrowed_books.add(book_id) return \\"Book borrowed successfully\\" def return_book(book_id: int) -> str: if book_id not in borrowed_books: return \\"Book was not borrowed\\" borrowed_books.remove(book_id) return \\"Book returned successfully\\" def currently_borrowed() -> list: return sorted(borrowed_books)"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},F={class:"card-container"},Y={key:0,class:"empty-state"},j=["disabled"],P={key:0},R={key:1};function M(s,e,l,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",F,[(n(!0),i(_,null,w(a.displayedPoems,(o,f)=>(n(),x(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(r.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,j)):u("",!0)])}const L=d(A,[["render",M],["__scopeId","data-v-a01c1d2c"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/15.md","filePath":"chatai/15.md"}'),z={name:"chatai/15.md"},G=Object.assign(z,{setup(s){return(e,l)=>(n(),i("div",null,[v(L)]))}});export{B as __pageData,G as default};
