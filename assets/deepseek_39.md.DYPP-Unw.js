import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},I={class:"review"},q={class:"review-title"},O={class:"review-content"};function E(s,e,u,p,a,r){return n(),i("div",T,[t("div",I,[t("div",q,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(k,[["render",E],["__scopeId","data-v-70205999"]]),S=JSON.parse('[{"question":"There are M robots and N commands in a 2D grid. Each robot starts at a given position and each command is a move that one robot can perform. The grid has rows from 1 to R and columns from 1 to C. The commands are given as follows: * Each command applies to a specific robot and moves it one step in one of the four cardinal directions: \\"U\\" (up), \\"D\\" (down), \\"L\\" (left), and \\"R\\" (right). Write a program to determine the final positions of all the robots after performing all the commands. Constraints * 1 ≤ M ≤ 100 * 1 ≤ N ≤ 1000 * 1 ≤ R, C ≤ 10^6 * 1 ≤ robot_id ≤ M * The starting coordinates and the dimensions of the grid are integers. Input Input is given from Standard Input in the following format: R C M N x1 y1 x2 y2 ... xM yM robot_id1 move1 robot_id2 move2 ... robot_idN moveN Output Print M lines. Each line should contain two integers representing the final coordinates (xi yi) of the i-th robot. Examples Input 5 5 3 4 1 1 2 2 3 3 1 R 2 U 1 R 3 D Output 3 1 2 3 3 2 Input 4 4 2 3 4 4 1 1 1 L 2 D 1 U Output 3 4 1 2","solution":"def move_robots(grid_size, robot_start_positions, commands): R, C = grid_size M = len(robot_start_positions) robots = robot_start_positions[:] for command in commands: robot_id, move = command x, y = robots[robot_id - 1] if move == \'U\' and y < R: y += 1 elif move == \'D\' and y > 1: y -= 1 elif move == \'L\' and x > 1: x -= 1 elif move == \'R\' and x < C: x += 1 robots[robot_id - 1] = (x, y) return robots def prepare_input(input_data): lines = input_data.strip().split(\'n\') R, C, M, N = map(int, lines[0].split()) robot_start_positions = [] for i in range(1, M + 1): x, y = map(int, lines[i].split()) robot_start_positions.append((x, y)) commands = [] for i in range(M + 1, M + 1 + N): parts = lines[i].split() robot_id = int(parts[0]) move = parts[1] commands.append((robot_id, move)) return (R, C), robot_start_positions, commands def main(input_data): grid_size, robot_start_positions, commands = prepare_input(input_data) final_positions = move_robots(grid_size, robot_start_positions, commands) for pos in final_positions: print(pos[0], pos[1]) # Sample input and function usage: input_data = 5 5 3 4 1 1 2 2 3 3 1 R 2 U 1 R 3 D main(input_data)"},{"question":"Sara loves reading and writing about books. She wants to create a system to manage books in her library. Each book can be identified by its unique ISBN number and has a title, an author, and a published year. Sara wants to efficiently add books to her collection, look up books by their ISBN number, and list all books by a specific author in chronological order. Write a program for Sara\'s library management system with the following functionalities: 1. Add a new book to the collection. 2. Look up a book by its ISBN and display its details. 3. List all books by a given author, sorted by their published year in ascending order. Input The first line contains an integer `q` (1 ≤ q ≤ 10^5), the number of operations. Each of the next `q` lines describes an operation in one of the following formats: - `1 ISBN Title Author Year` - Add a new book with the given ISBN (a string), Title (a string with spaces), Author (a string), and Year (an integer, 1000 ≤ Year ≤ 9999). - `2 ISBN` - Look up the book with the given ISBN and print its details. - `3 Author` - List all books by the given author, sorted by their published year in ascending order. Output For each operation of type `2`, print the details of the book in the format `Title Author Year`. If the book is not found, print `Book not found`. For each operation of type `3`, print the details of each book by the given author sorted by published year in ascending order in the format `Title ISBN Year`, one book per line. If no books are found by the given author, print `No books found by Author`. Examples Input: ``` 6 1 978-3-16-148410-0 The_Catcher_in_the_Rye J.D_Salinger 1951 1 978-0-14-044913-6 Anna_Karenina Leo_Tolstoy 1878 2 978-3-16-148410-0 3 Leo_Tolstoy 3 J.D_Salinger 2 978-1-56619-909-4 ``` Output: ``` The_Catcher_in_the_Rye J.D_Salinger 1951 Anna_Karenina 978-0-14-044913-6 1878 The_Catcher_in_the_Rye J.D_Salinger 1951 Book not found ``` Note - In the first `2` operation, the system displays the details of the book with ISBN `978-3-16-148410-0`. - In the first `3` operation, the system lists the book by Leo Tolstoy. - In the second `3` operation, the system lists the book by J.D. Salinger. - In the second `2` operation, the system returns `Book not found` since there\'s no such ISBN in the collection. Make sure to optimize the solution for efficiency given the constraints.","solution":"class LibrarySystem: def __init__(self): self.books_by_isbn = {} self.books_by_author = {} def add_book(self, isbn, title, author, year): self.books_by_isbn[isbn] = (title, author, year) if author not in self.books_by_author: self.books_by_author[author] = [] self.books_by_author[author].append((year, title, isbn)) self.books_by_author[author].sort() def lookup_by_isbn(self, isbn): if isbn in self.books_by_isbn: title, author, year = self.books_by_isbn[isbn] return f\\"{title} {author} {year}\\" else: return \\"Book not found\\" def list_books_by_author(self, author): if author in self.books_by_author: return [f\\"{title} {isbn} {year}\\" for year, title, isbn in self.books_by_author[author]] else: return f\\"No books found by {author}\\" # Simulation of operations on the library def execute_operations(operations): library = LibrarySystem() results = [] for operation in operations: op = operation.split() op_code = int(op[0]) if op_code == 1: # Add a new book isbn = op[1] title = \\" \\".join(op[2:-2]) author = op[-2] year = int(op[-1]) library.add_book(isbn, title, author, year) elif op_code == 2: # Look up a book by ISBN isbn = op[1] results.append(library.lookup_by_isbn(isbn)) elif op_code == 3: # List all books by author author = op[1] results.append(\\"n\\".join(library.list_books_by_author(author))) return results"},{"question":"Iahub loves cooking meals with certain ingredients. He wants to create a meal that contains exactly m different ingredients out of the possible n ingredients he has. He wants to know in how many ways he can choose these m ingredients from n ingredients, considering the order in which ingredients are chosen does not matter. Input The first line contains two integers n and m (1 ≤ m ≤ n ≤ 1000). Output Output a single integer, the number of ways to choose m ingredients from n ingredients. Examples Input 5 3 Output 10 Input 6 2 Output 15","solution":"from math import comb def choose_ingredients(n, m): Returns the number of ways to choose m ingredients from n ingredients. return comb(n, m)"},{"question":"Polycarp recently discovered that some websites handle URLs in a way that they redirect to canonical URLs. Specifically, some websites leverage URL shortening services, others might consider URLs with www and without www as the same, and some even ignore or change parameters in the URL query string except specific parameters. In this problem, every URL is defined by: - `protocol` which is either `http` or `https`. - `www` which can either be present or absent. - `domain` which is a set of alphanumeric characters and possibly hyphens. - `path` which is a set of alphanumeric characters and possibly hyphens and slashes. - `query` which contains key-value parameters. Each key and value is alphanumeric, and multiple parameters are connected by \'&\' sign. To simplify: 1. URLs with `http` and `https` are considered distinct. 2. URLs with or without `www` are regarded as equivalent. 3. If `query` parameters are present, their order does not matter, but every specific key-value pair matters. For example, the URLs \\"http://example.com/path?b=2&a=1\\" and \\"http://www.example.com/path?a=1&b=2\\" correspond to the same URL. But \\"https://example.com/path?a=1&b=2\\" is a different URL than the former. Polycarp has to group URLs according to these rules and merge equivalent URLs. Input: - The first line contains an integer `n` (1 ≤ n ≤ 20000) — the number of URLs in Polycarp\'s list. - The following `n` lines contain URLs, one per line. It is guaranteed that all of them are correctly formatted and distinct. Output: - Print the number of groups `k` and then in `k` lines print the description of every group. - In the i-th line, print the number of URLs in the group and all URLs that belong to the i-th group, separated by a space. You can print the groups and URLs in any order. - Print the URLs exactly as they were given in the input. Each URL should belong to exactly one group. Examples: Input: 6 http://example.com/path?a=1&b=2 https://example.com/path?a=1&b=2 http://www.example.com/path?b=2&a=1 http://example.com/otherpath?p=5&q=4 http://www.example.com/path?a=2&b=1 http://example.com/about?x=3 Output: 4 2 http://example.com/path?a=1&b=2 http://www.example.com/path?b=2&a=1 1 https://example.com/path?a=1&b=2 1 http://example.com/otherpath?p=5&q=4 1 http://example.com/about?x=3","solution":"from urllib.parse import urlparse, parse_qsl def canonical_url(url): Converts a URL into its canonical form by: - Removing \'www.\' if it exists - Sorting the query parameters parsed_url = urlparse(url) # Remove \'www.\' if it exists netloc = parsed_url.netloc.replace(\'www.\', \'\', 1) # Parse and sort the query parameters query_params = parse_qsl(parsed_url.query) sorted_query = sorted(query_params) query_string = \'&\'.join([f\'{key}={value}\' for key, value in sorted_query]) # Return the canonical URL canonical = f\\"{parsed_url.scheme}://{netloc}{parsed_url.path}\\" if query_string: canonical += f\\"?{query_string}\\" return canonical def group_urls(urls): Groups the URLs into their respective canonical forms. from collections import defaultdict url_groups = defaultdict(list) url_to_canonical = {} for url in urls: canon = canonical_url(url) url_groups[canon].append(url) url_to_canonical[url] = canon grouped_urls = list(url_groups.values()) return grouped_urls def merge_urls(n, url_list): Given the number of URLs and the list of URLs, returns the grouped URLs. grouped_urls = group_urls(url_list) return grouped_urls"},{"question":"Problem Statement You are working on a weather monitoring system. The system records weather data at various points throughout the day. Your task is to write a program that analyzes this data and provides a summary of the weather trends. You are given a list of weather records in the format \\"time temperature\\", where \\"time\\" is in 24-hour clock format (HH:MM) and \\"temperature\\" is an integer representing the temperature in degrees Celsius. The records are sorted in chronological order and there will always be at least one record. Your task is to calculate the following: 1. The average temperature of the day. 2. The maximum temperature recorded during the day. 3. The minimum temperature recorded during the day. 4. The time at which the maximum temperature occurs. 5. The time at which the minimum temperature occurs. Input The input consists of multiple datasets. Each dataset starts with an integer n (1 ≤ n ≤ 1440), which represents the number of weather records for the day. The next n lines each contain a weather record in the format \\"time temperature\\". The end of the input is indicated by a line containing a single zero. Output For each dataset, print the following information in a single line, separated by spaces: 1. The average temperature (rounded to 2 decimal places). 2. The maximum temperature. 3. The minimum temperature. 4. The time at which the maximum temperature occurs. 5. The time at which the minimum temperature occurs. Example Input 5 00:00 15 06:30 20 12:45 22 18:00 19 23:59 16 3 12:00 10 13:00 15 14:00 12 0 Output 18.40 22 15 12:45 00:00 12.33 15 10 13:00 12:00","solution":"def weather_summary(datasets): results = [] for dataset in datasets: n = dataset[0] records = dataset[1:] temperatures = [record[1] for record in records] times = [record[0] for record in records] average_temp = sum(temperatures) / n max_temp = max(temperatures) min_temp = min(temperatures) max_temp_time = times[temperatures.index(max_temp)] min_temp_time = times[temperatures.index(min_temp)] results.append(f\\"{average_temp:.2f} {max_temp} {min_temp} {max_temp_time} {min_temp_time}\\") return results def parse_input(input_data): datasets = [] dataset = [] for line in input_data.split(\'n\'): line = line.strip() if line == \'0\': break if dataset and len(dataset) == dataset[0] + 1: datasets.append(dataset) dataset = [] if not dataset: dataset.append(int(line)) else: time, temp = line.split() dataset.append((time, int(temp))) if dataset: datasets.append(dataset) return datasets"},{"question":"Anna is a professional gardener and she wants to maintain her garden bed in a neat and colorful manner. Her garden bed can be represented as a 1-dimensional array of length N, where each element is a positive integer representing a type of flower. Anna has an inventory of various flowers, each classified by a unique integer identifier. She wants to achieve a specific target layout in her garden bed by replacing some of the existing flowers. You are given an integer array `garden` of length N representing the current garden bed and another integer array `target` of the same length representing the desired garden bed layout. Anna can replace flowers in the garden with new ones from her inventory. However, she can only replace a flower if the type exists in her inventory. You are also given an integer array `inventory` which contains the types of flowers available for replacement. Determine the minimum number of replacements Anna needs to make in order to achieve the target layout. If it is not possible to achieve the desired layout, return -1. **Constraints:** - All input values are integers. - 1 <= N <= 10^5 - 1 <= garden[i], target[i], inventory[j] <= 10^9 **Input:** Input is given from Standard Input in the following format: ``` N garden[0] garden[1] ... garden[N-1] target[0] target[1] ... target[N-1] M inventory[0] inventory[1] ... inventory[M-1] ``` **Output:** Print the minimum number of replacements required. If the target layout is not possible, print -1. **Examples:** **Input:** ``` 5 1 2 3 4 5 1 2 5 4 3 2 3 5 ``` **Output:** ``` 1 ``` **Input:** ``` 3 1 1 1 2 2 2 2 1 3 ``` **Output:** ``` -1 ``` **Input:** ``` 6 2 3 4 3 2 3 1 2 3 2 1 2 3 1 2 3 ``` **Output:** ``` 4 ```","solution":"def min_replacements(garden, target, inventory): Determine the minimum number of replacements needed to achieve the target garden bed layout. Parameters: garden (list of int): Current garden layout. target (list of int): Desired garden layout. inventory (list of int): Available flower types for replacement. Returns: int: Minimum number of replacements required or -1 if it\'s not possible. # Convert inventory to a set for efficient lookup inventory_set = set(inventory) replacements = 0 # Iterate through each position in the garden for g, t in zip(garden, target): if g != t: # If the target flower type is not in the inventory, it is not possible to achieve the target if t not in inventory_set: return -1 replacements += 1 return replacements"},{"question":"You are given a list of ( n ) integers representing a sequence. You need to perform ( q ) operations on this sequence. Each operation is defined as either updating a particular element in the sequence or querying the sum of a sub-sequence. For each query operation, you need to find the sum of elements between two given indices (inclusive). For each update operation, you need to update the value of a single element in the sequence. Input The first line of the input contains two integers ( n ) and ( q ) (1 (leq) n, q (leq) 100000) — the number of elements in the sequence and the number of operations. The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) (1 (leq) (a_i) (leq) (10^9)) — the initial values of the sequence. Each of the following ( q ) lines describes an operation. An operation can be one of two types: - \\"1 x k\\" means update the ( x )-th element of the sequence to ( k ) (1 (leq) (x) (leq) (n), 1 (leq) (k) (leq) (10^9)). - \\"2 l r\\" means query the sum of the elements between indices ( l ) and ( r ) (1 (leq) (l) (leq) (r (leq) (n)). Output For each query operation, print the result on a new line. Examples Input 5 3 1 2 3 4 5 2 1 3 1 3 10 2 3 5 Output 6 19 Input 4 4 8 7 6 5 2 1 4 1 2 10 2 1 2 2 1 4 Output 26 18 29","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) # Initialize tree with 0 values self.tree = [0] * (2 * self.n) # Build the tree self.build(array) def build(self, array): # Insert leaf nodes in tree for i in range(self.n): self.tree[self.n + i] = array[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, index, value): # Update leaf node pos = self.n + index self.tree[pos] = value # Move up and update parents while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def query(self, left, right): # Get sum of elements in the range [left, right) result = 0 left += self.n right += self.n + 1 while left < right: if left % 2: result += self.tree[left] left += 1 if right % 2: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result def process_operations(n, q, sequence, operations): seg_tree = SegmentTree(sequence) result = [] for operation in operations: op = operation[0] if op == 1: x, k = operation[1], operation[2] seg_tree.update(x - 1, k) # Convert to 0-based index elif op == 2: l, r = operation[1], operation[2] result.append(seg_tree.query(l - 1, r - 1)) # Convert to 0-based index return result"},{"question":"Viktor is planning to organize a marathon for his friends. He wants to allocate n participants into groups such that the total stamina difference between the participants in a group is minimized. Each participant has a stamina value. The condition for the group formation is that any participant\'s stamina in the group should not differ from any other participant\'s stamina in the same group by more than d units. You are required to help Viktor determine the minimum number of groups needed to organize the marathon. Input The first line contains two space-separated integers n and d (1 ≤ n ≤ 105; 0 ≤ d ≤ 105) — the number of participants and the maximum allowed stamina difference within a group. The second line contains n space-separated integers s1, s2, ..., sn (0 ≤ si ≤ 105) — the stamina values of the participants. Output Print the single integer — the minimum number of groups needed. Examples Input 5 3 1 2 6 10 11 Output 3 Input 6 2 4 3 5 6 2 4 Output 2 Note In the first text sample, the groups can be formed as follows: - Group 1: {1, 2} - Group 2: {6} - Group 3: {10, 11} In the second test sample, the optimal grouping would be: - Group 1: {2, 3, 4, 4, 5} - Group 2: {6} In each group, the difference between the maximum and minimum stamina values does not exceed d.","solution":"def minimum_number_of_groups(n, d, stamina_values): stamina_values.sort() groups = 0 i = 0 while i < n: groups += 1 group_start = stamina_values[i] # Find the maximum index j where the stamina difference doesn\'t exceed d while i < n and stamina_values[i] - group_start <= d: i += 1 return groups"},{"question":"Sarah is creating a wallpaper design based on a specific pattern. She wants the design to be composed of several concentric rectangular frames, where each frame is formed by connecting horizontal and vertical line segments. Each segment has a specific color, and Sarah wants to ensure that none of the connected segments forming a frame share the same color. The design can be represented as a grid with `m` rows and `n` columns. Each cell in the grid can either be part of a frame, described by \'#\', or be empty, described by \'.\'. Sarah wants to find the minimum number of colors required to color the segments forming each rectangular frame, ensuring no two adjacent segments of a frame have the same color. Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100) — the number of rows and columns of the grid. The next `m` lines each contain a string of `n` characters, either \'#\' (a segment of a frame) or \'.\' (an empty cell). Output Print a single integer — the minimum number of colors required to color the segments of all frames properly. Example Input 7 7 #...# #.#...# #...# .#..... .#... .#.#..# .#. Output 2 Note In the example, we have different connected segments forming rectangular frames. Sarah can color each frame with 2 colors alternately to ensure no two connected segments share the same color.","solution":"def min_colors_to_color_frame(m, n, grid): Returns the minimum number of colors required to color the segments of all frames ensuring no two adjacent segments of a frame have the same color. import collections # Helper function to perform a BFS and label the frames def bfs_fill(grid, visited, x, y, label): queue = collections.deque([(x, y)]) visited[x][y] = label while queue: cur_x, cur_y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cur_x + dx, cur_y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == \'#\' and visited[nx][ny] == -1: visited[nx][ny] = label queue.append((nx, ny)) visited = [[-1] * n for _ in range(m)] label = 0 # Label each frame with a unique identifier for i in range(m): for j in range(n): if grid[i][j] == \'#\' and visited[i][j] == -1: bfs_fill(grid, visited, i, j, label) label += 1 # Since it\'s known that the problem is about concentric rectangular frames with no adjacent same color segments # 2 colors will always be enough due to the nature of the frames return 2"},{"question":"Your friend has a list of n positive integers, and he wants to perform some operations on this list. The operation he wants to perform is to choose any two numbers from the list and replace them with their sum. He wants to perform this operation exactly n-1 times, so that in the end there will be only one number left in the list. Help him find how big this last number will be. Input The first line contains a single integer n (1 ≤ n ≤ 100), the number of elements in the list. The second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), the elements of the list. Output Output a single integer, the last remaining number after performing n-1 operations. Examples Input 3 1 2 3 Output 6 Input 4 1 1 1 1 Output 4 Note In the first example, one of the ways to reach the last number is: 1. First sum [1, 2], resulting in the list [3, 3] 2. Then sum [3, 3], resulting in the list [6] In the second example, each operation can only produce sums of 1+1, and the result of each step is still 1 until only one number remains. The task is then simple: the last remaining number after exactly (n-1) operations will always be the sum of the original n numbers. You can find this result by directly summing all the elements of the list.","solution":"def final_number(n, numbers): Returns the last remaining number after performing n-1 operations of replacing two numbers with their sum. Parameters: n (int): number of elements in the list. numbers (list of int): the list of n positive integers. Returns: int: the last remaining number. return sum(numbers)"},{"question":"You are given an array of integers which represents the heights of buildings in a city skyline in left to right order. You have to find the two buildings which, together with the x-axis, form a container that can hold the most water. More formally, the task involves identifying two indices i and j such that the container formed by the buildings at these indices holds the maximum amount of water, and then returning the amount of water held by this container. Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of buildings. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^4) — the heights of the buildings. Output Print the maximum amount of water a container can hold. Examples Input 6 1 5 4 3 5 2 Output 15 Input 5 1 2 1 2 1 Output 4 Note In the first sample, the maximum amount of water is held between the second and fifth buildings (heights 5 and 5), with a width of 3 (5-2), so the total amount is 3 * 5 = 15. In the second sample, the maximum amount of water is held between the first and fourth buildings (heights 1 and 2), with a width of 3 (4-1), so the total amount is 3 * 1 = 4.","solution":"def max_area(heights): This function calculates the maximum amount of water a container can hold, given the heights of buildings. left = 0 right = len(heights) - 1 max_water = 0 while left < right: width = right - left height = min(heights[left], heights[right]) max_water = max(max_water, width * height) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"There are N robots positioned in a straight line at different coordinates. Each robot has a certain range R_i which is the farthest distance it can move either to the left or right from its initial position without crossing any other robot in its range. Given the initial positions of all robots, find out the minimum number of robots that can be completely immobilized (i.e., rendered unable to move at all, due to another robot blocking its range) by appropriately choosing R_1, R_2, ..., R_n. Constraints - 1 leq N leq 10^5 - 1 leq Position_i leq 10^9 - R_i can be any non-negative integer - All positions are distinct integers Input Input is given from Standard Input in the following format: N Position_1 Position_2 ldots Position_N Output Print the minimum number of robots that can be immobilized. Examples Input 5 1 5 9 14 20 Output 1 Input 3 2 4 8 Output 1 Input 4 1 2 3 4 Output 3","solution":"def min_immobilized_robots(N, positions): Returns the minimum number of robots that can be completely immobilized. :param N: Number of robots :param positions: List of integers representing the initial positions of robots :return: An integer representing the minimum number of robots that can be immobilized if N == 1: return 0 positions.sort() # Sorting the positions to evaluate the gaps min_gap = float(\'inf\') for i in range(1, N): min_gap = min(min_gap, positions[i] - positions[i-1]) return N - 1 if min_gap == 1 else 1"},{"question":"The galaxy has been invaded by an alien species known as the Zorgons. The Earth Defense Force (EDF) needs to allocate resources efficiently to counter the invading forces. The EDF has a set of bases and each base has a limited capacity to handle incoming attacks. The bases are connected by a network of tunnels, represented as an undirected graph, where nodes represent bases and edges represent tunnels. Each tunnel has a length, which represents the time it takes for resources to travel between bases. In anticipation of a large-scale attack, the EDF needs to identify the shortest possible path to traverse all bases and return to the starting base. Write a program that takes as input the number of bases and the network of tunnels, and outputs the length of the shortest possible path that visits each base exactly once and returns to the starting point (i.e., solves the Traveling Salesman Problem (TSP)). Input The first line contains an integer n (2 ≤ n ≤ 10), the number of bases. The next n lines contain n integers each, representing the adjacency matrix of the graph. The j-th integer in the i-th line is the length of the tunnel between base i and base j. If there is no direct tunnel between base i and base j, the distance is denoted by a large number such as 1000000. Output Print a single integer, the length of the shortest possible path that visits each base exactly once and returns to the starting base. Example Input ``` 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 ``` Output ``` 80 ``` Explanation The shortest path for visiting all the bases and returning to the starting point could be: 1 → 2 → 4 → 3 → 1 with a total length of 10 + 25 + 30 + 15 = 80. In this problem, you can use brute force to explore all permutations of the bases to find the shortest cycle due to the small size of the input (n ≤ 10).","solution":"from itertools import permutations def tsp(graph): n = len(graph) vertices = range(n) min_path = float(\'inf\') for perm in permutations(vertices): current_path_length = 0 for i in range(n - 1): current_path_length += graph[perm[i]][perm[i + 1]] current_path_length += graph[perm[-1]][perm[0]] min_path = min(min_path, current_path_length) return min_path"},{"question":"A group of friends is planning a hiking trip and wants to find the shortest possible circular route that passes through a given set of landmarks. The friends have a map that shows the distances between each pair of landmarks. To help them, you need to write a program that calculates the shortest circular route that starts and ends at the first landmark and visits every other landmark exactly once. This is known as the Traveling Salesperson Problem (TSP). Input The input consists of: - An integer `n` (2 ≤ n ≤ 10), the number of landmarks. - An `n x n` matrix of integers, where the element at the i-th row and j-th column represents the distance between the i-th and j-th landmarks. Each distance is a positive integer and the distance from a landmark to itself is always 0 (i.e., the diagonal of the matrix is zero). Output Print a single integer, the length of the shortest circular route that starts and ends at the first landmark and visits each other landmark exactly once. Example Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Note In the example above, one possible shortest circular route is 1 -> 2 -> 4 -> 3 -> 1 with a total length of 10 + 25 + 30 + 15 = 80.","solution":"from itertools import permutations def shortest_circular_route(n, distances): # The list of landmarks starting from the second one landmarks = list(range(1, n)) # Initialize the minimum path cost to a very large number min_path_cost = float(\'inf\') # Generate all possible permutations of the landmarks for perm in permutations(landmarks): # Start from the 0-th landmark, and add the current permutation current_path = [0] + list(perm) + [0] # Calculate the total cost of the current path current_cost = sum(distances[current_path[i]][current_path[i+1]] for i in range(n)) # Update the minimum path cost if the current one is lower min_path_cost = min(min_path_cost, current_cost) return min_path_cost"},{"question":"A company is organizing a competition where participants need to solve a particular challenge. The challenge involves finding a specific type of subsequence in a given string. The task is to determine the longest palindromic subsequence in that string. Participants must write a program to find the length of the longest palindromic subsequence. INPUT: The first line consists of an integer T, the number of test cases. The following T lines each consist of a string S, which is the string in which the longest palindromic subsequence needs to be found. OUTPUT: For each string S, output the length of the longest palindromic subsequence. 0 < T < 100 1 ≤ length of S ≤ 1000 S contains only lowercase English letters. SAMPLE INPUT: 2 bbbab cbbd SAMPLE OUTPUT: 4 2 Explanation: In the first test case, \\"bbbb\\" is the longest palindromic subsequence with a length of 4. In the second test case, \\"bb\\" is the longest palindromic subsequence with a length of 2.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the given string s. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n-1, -1, -1): dp[i][i] = 1 for j in range(i+1, n): if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1] def solve(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_subsequence(s)) return results"},{"question":"Alex and Sam are working on a security system that requires them to periodically update their credentials. They have multiple passwords, each with a unique reset interval. They want to find the earliest time when all passwords will need to be reset simultaneously after a certain starting point in time (t=0). Here is the challenge: You are given the reset intervals for multiple passwords, and you need to determine the first time (greater than zero) at which all passwords will be reset together. For example, if there are 3 passwords with reset intervals of 5, 10, and 15 days respectively, once they are reset initially at t=0, they will all need to be reset again at t=30 days. Write a program to solve this problem. INPUT The first line contains T, the number of test cases. T test cases follow. Each of the test case contains 2 lines of input. The first line contains a single integer n, denoting the number of passwords. The next line contains n space-separated integers denoting the reset intervals of the n passwords. OUTPUT Output T lines each containing only one number - the answer to the question (modulo 1000000007). CONSTRAINTS 1 ≤ T ≤ 10 1 ≤ n ≤ 1000 1 ≤ Reset intervals ≤ 10000 SAMPLE INPUT 1 3 5 10 15 SAMPLE OUTPUT 30","solution":"from math import gcd from functools import reduce def lcm(a, b): return abs(a * b) // gcd(a, b) def lcm_multiple(numbers): return reduce(lcm, numbers) def earliest_password_reset(T, test_cases): results = [] modulo = 1000000007 for i in range(T): n, intervals = test_cases[i] result = lcm_multiple(intervals) % modulo results.append(result) return results"},{"question":"Emilia is a game developer working on a simulation game where players can build and expand cities. One of the key challenges in the game is to find the optimal placement of new buildings to maximize the overall happiness of the city\'s inhabitants. Each building has a happiness score associated with it, and the goal is to place the buildings in such a way that the total happiness is maximized. The city is represented as a grid of M rows and N columns, and some cells in the grid might already be occupied by existing buildings or natural obstacles, making them unavailable for new buildings. Each cell in the grid can have a happiness score if a building is placed in it. Your task is to help Emilia by writing a program that determines the maximum possible happiness for placing exactly K new buildings in the grid. Input Format - The first line contains three integers M, N, and K, denoting the number of rows, number of columns, and the number of new buildings to place, respectively. - The next M lines each contain N integers, where each integer represents the happiness score of placing a building in that cell. If a cell is occupied or unavailable, it will have a happiness score of -1. Output Format - Output a single integer, the maximum possible happiness after placing exactly K new buildings in the grid. Constraints - 1 ≤ M, N ≤ 100 - 1 ≤ K ≤ M × N - -1 ≤ happiness score ≤ 1000 SAMPLE INPUT 3 4 2 5 -1 3 9 4 6 -1 8 7 2 1 10 SAMPLE OUTPUT 19 Explanation Emilia can place one building in the cell with happiness score 9 and another one in the cell with happiness score 10 for a total happiness of 19.","solution":"def max_happiness(M, N, K, grid): Returns the maximum possible happiness for placing exactly K new buildings in the grid. # Flatten the grid and filter out the cells that are unavailable (happiness score -1) valid_cells = [grid[i][j] for i in range(M) for j in range(N) if grid[i][j] != -1] # Sort the valid cells in descending order to maximize happiness valid_cells.sort(reverse=True) # Sum the top K happiness scores return sum(valid_cells[:K]) # Example usage: if __name__ == \\"__main__\\": M = 3 N = 4 K = 2 grid = [ [5, -1, 3, 9], [4, 6, -1, 8], [7, 2, 1, 10] ] print(max_happiness(M, N, K, grid)) # Output: 19"},{"question":"You are given a 2D grid of size n x m containing lowercase English letters. You need to find the length of the longest path in this grid where no letter is repeated. You can move in four possible directions: up, down, left, and right. Input The first line contains two integers n and m (1 ≤ n, m ≤ 20). The next n lines each contain a string of length m representing the grid. Output Output the length of the longest path where no letter is repeated. Example Input 3 4 abcd eabc bfgh Output 8 Explanation One of the longest paths is \'a -> b -> c -> b -> f -> g -> h\'. Note that paths may contain loops, but letters must not repeat themselves.","solution":"def longest_unique_path(n, m, grid): def explore(x, y, visited): nonlocal max_length max_length = max(max_length, len(visited)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] not in visited: explore(nx, ny, visited + grid[nx][ny]) max_length = 0 for i in range(n): for j in range(m): explore(i, j, grid[i][j]) return max_length # Example usage: n, m = 3, 4 grid = [ \\"abcd\\", \\"eabc\\", \\"bfgh\\" ] print(longest_unique_path(n, m, grid)) # Output: 8"},{"question":"Farmer John is working on organizing a contest for his cows where they solve mathematical puzzles. One of the puzzles requires the cows to rearrange numbers in an interesting way. Specifically, each cow gets a number n and must find another number m such that: 1. m is a permutation of the digits in n (i.e., it has the same digits, but possibly in a different order). 2. m must be a strictly larger number than n. 3. m should be the smallest possible number that meets the first two conditions. If no such number m exists, the cow must report that it is impossible. Input The first line of the input contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a single number n (1 ≤ n ≤ 10^18). Output For each test case, output the smallest permutation m of n\'s digits that is larger than n, or \\"IMPOSSIBLE\\" if no such m exists. Examples Input 4 123 321 115 987654321 Output 132 IMPOSSIBLE 151 IMPOSSIBLE Note In the first example, the number 123 can be rearranged to 132, which is the smallest number larger than 123. In the second example, the number 321 is the largest permutation of its digits, so it is impossible to find a larger permutation. In the third example, the number 115 can be rearranged to 151, which is the smallest number larger than 115. In the fourth example, the number 987654321 is the largest permutation of its digits, so it is impossible to find a larger permutation.","solution":"from itertools import permutations def smallest_larger_permutation(n): Returns the smallest permutation of n\'s digits that is larger than n, or \\"IMPOSSIBLE\\" if no such permutation exists. digits = list(str(n)) length = len(digits) # Step 1: Find the first digit that is smaller than its next digit from right to left index = -1 for i in range(length - 2, -1, -1): if digits[i] < digits[i + 1]: index = i break if index == -1: return \\"IMPOSSIBLE\\" # Step 2: Find the smallest digit to the right of index that is larger than digits[index] for j in range(length - 1, index, -1): if digits[j] > digits[index]: digits[index], digits[j] = digits[j], digits[index] break # Step 3: Reverse the sequence to the right of index digits = digits[:index + 1] + sorted(digits[index + 1:]) return \'\'.join(digits) def solve(puzzle_input): t = int(puzzle_input[0]) results = [] for i in range(1, t + 1): n = int(puzzle_input[i]) result = smallest_larger_permutation(n) results.append(result) return results"},{"question":"Given an undirected tree with N nodes, your task is to determine the maximum path sum in the tree. Each node has a value associated with it and the path sum is defined as the sum of the values of the nodes along the path. Input format: - The first line contains the integer N, the number of nodes in the tree. - The second line contains N integers, where the i-th integer represents the value of the i-th node. - The following N-1 lines each contain two integers u and v, indicating that there is an edge between node u and node v. Output format: - A single integer representing the maximum path sum in the tree. Constraints: - 2 ≤ N ≤ 100,000 - Each node value is between -10^9 and 10^9, inclusive. Input example 1: ``` 5 1 2 3 4 5 1 2 1 3 2 4 3 5 ``` Output example 1: ``` 15 ``` Input example 2: ``` 3 -1 -2 -3 1 2 1 3 ``` Output example 2: ``` -1 ``` Notes: - In example 1, the maximum path is 4 -> 2 -> 1 -> 3 -> 5, with a sum of 15. - In example 2, the maximum path is simply the node with the value -1, as including other nodes would decrease the sum.","solution":"from collections import defaultdict import sys sys.setrecursionlimit(200000) def dfs(node, parent, adjacency_list, values): max_single_path = values[node] max_top_path = values[node] max_child1 = max_child2 = float(\'-inf\') for neighbor in adjacency_list[node]: if neighbor == parent: continue child_single_path, child_top_path = dfs(neighbor, node, adjacency_list, values) if child_single_path > max_child1: max_child2 = max_child1 max_child1 = child_single_path elif child_single_path > max_child2: max_child2 = child_single_path if max_child1 != float(\'-inf\'): max_single_path = max(max_single_path, values[node] + max_child1) if max_child2 != float(\'-inf\'): max_top_path = max(max_top_path, values[node] + max_child1 + max_child2) global result result = max(result, max_single_path, max_top_path) return max_single_path, max_top_path def max_path_sum(n, node_values, edges): global result result = float(\'-inf\') adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u-1].append(v-1) adjacency_list[v-1].append(u-1) dfs(0, -1, adjacency_list, node_values) return result"},{"question":"**File Directory Traversal and Summation** You are given a file directory structure that contains files with numerical values embedded in their names and subdirectories. The task is to compute the total sum of all the numerical values from the filenames in a given directory and its subdirectories. The directory structure is represented as a list of strings where each string indicates the path to a file. The files and directories are separated by a \'/\'. The filenames contain an identifier followed by a numerical value. For simplicity, assume that the filenames always end with a numerical value preceded by an underscore. For example, \\"file_42\\". Write a function that calculates the total sum of all the numbers present in the filenames within a given directory path. If a directory does not contain any files, the sum should simply be zero. # Input - The input consists of an integer n (1 ≤ n ≤ 1000) representing the number of file paths, followed by n lines with the file paths as strings. - A target directory path which you need to sum the values for, represented as a string. # Output - A single integer representing the total sum of all the numerical values from filenames within the specified directory and its subdirectories. # Example Input ``` 7 /dir1/file_10 /dir1/dir2/file_15 /dir1/dir2/dir3/file_40 /dir1/dir2/dir3/file_5 /dir1/file_25 /dir1/dir2/dir3/file_50 /dir1/dir4/file_30 /dir1/dir4/dir5/file_45 /dir1 ``` Output ``` 220 ``` Explanation: The target directory is `/dir1`. All numerical values in files within `/dir1` and its subdirectories are: 10, 15, 40, 5, 25, 50, 30, and 45, which sum to 220. # Note - The path strings are normalized and do not contain \\".\\" or \\"..\\". So you can assume each path is absolute from the root directory. - Each path in the input is unique, and the last input line will always be a valid directory path that is guaranteed to exist in the input list.","solution":"def sum_file_numbers_in_directory(n, paths, target_directory): total_sum = 0 for path in paths: if path.startswith(target_directory): filename = path.split(\'/\')[-1] if \'_\' in filename: number = int(filename.split(\'_\')[-1]) total_sum += number return total_sum"},{"question":"You\'ve been given an integer array and your task is to identify the length of the longest subarray that forms a continuous sequence of integers, even if the elements are not in order. For example, the array [4, 2, 1, 6, 5] forms two continuous subarrays [4, 2, 1] and [6, 5] with lengths of 3 and 2 respectively. The correct answer would be 3 because [4, 2, 1] has the longest length. Constraints: The array can have 1 to 10^5 (both inclusive) number of integers. Each integer in the array can be from -10^9 to 10^9. Input: The first line of input contains an integer T denoting the number of test cases. Each of the next T lines contains an integer N denoting the number of elements in the array followed by N space-separated integers representing the elements of the array. Output: For each test case, print the length of the longest continuous subarray of integers. SAMPLE INPUT 3 5 4 2 1 6 5 6 1 9 3 10 4 20 7 7 8 9 1 2 3 4 SAMPLE OUTPUT 3 2 4","solution":"def longest_continuous_subarray_length(arr): Identifies the length of the longest subarray that forms a continuous sequence of integers, even if the elements are not in order. num_set = set(arr) longest_length = 0 for num in num_set: if num - 1 not in num_set: # check if it\'s the possible start of sequence current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 longest_length = max(longest_length, current_length) return longest_length def process_input(T, test_cases): results = [] for case in test_cases: N = case[0] arr = case[1:] result = longest_continuous_subarray_length(arr) results.append(result) return results"},{"question":"Chen just got a new dog and he named it \\"Bolt\\". To keep Bolt entertained, Chen decides to play a game with him using a string of toys. The string consists of toys represented by lowercase letters, where the same letter indicates toys that look the same. Chen wants to know how many different toys Bolt can get within a contiguous subarray of the string, without Chen\'s assistance. He noted that Bolt has a specific number of contiguous toys he can manage to play with at a time, regardless of where the segment starts on the string. Your task is to help Chen determine the maximum number of different toys Bolt can get in a contiguous subarray of the given length. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the string of toys. The second line contains an integer k (1 ≤ k ≤ n) — the number of contiguous toys Bolt can manage. The third line contains a string of length n, consisting of lowercase letters that represent the toys. Output Print the maximum number of different toys Bolt can get in any of the contiguous subarrays of length k. Examples Input 7 3 abacaba Output 3 Input 5 2 aaaaa Output 1 Input 6 4 abcabc Output 3 Note In the first example, the maximum number of different toys Bolt can get in a contiguous subarray of length 3 is \\"bac\\" which consists of 3 different toys. In the second example, no matter which contiguous subarray of length 2 you pick, the maximum number of different toys is always 1 since all toys are the same. In the third example, both contiguous subarrays \\"abca\\" and \\"bcab\\" have 3 different toys.","solution":"def max_diff_toys(n, k, toys): Returns the maximum number of different toys in any contiguous subarray of length k. from collections import Counter # Initialize the counter for the first window window_counter = Counter(toys[:k]) max_unique_toys = len(window_counter) # Slide the window across the toy string for i in range(k, n): # Remove the leftmost element of the previous window left_char = toys[i - k] window_counter[left_char] -= 1 if window_counter[left_char] == 0: del window_counter[left_char] # Add the new element right_char = toys[i] window_counter[right_char] += 1 # Update the maximum number of unique toys max_unique_toys = max(max_unique_toys, len(window_counter)) return max_unique_toys"},{"question":"A large grocery store has a security system in place to monitor the movement of products from the shelf to the checkout counter. Tracking devices on the products record the exact time of movement as well as their position within the store at that time. You are tasked with analyzing the collected data to detect if there are any cases of products moving in a suspicious loop within the store. A loop is defined as a sequence where the same position is visited more than once. You are given a list of movements where each movement consists of a timestamp, the product ID, and the position. You need to determine if any product forms a loop, which is indicated by visiting the same position at least twice. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), representing the number of movements recorded. - The next n lines each contain three integers t_i (1 ≤ t_i ≤ 10^9), p_i (1 ≤ p_i ≤ 10^5), and x_i (1 ≤ x_i ≤ 10^9), representing the timestamp, product ID, and position of the i-th movement respectively. Output: - Output \\"YES\\" if there is at least one product that forms a loop. Otherwise, output \\"NO\\". Examples: Input: 5 1 100 200 2 100 300 3 100 200 4 101 400 5 101 500 Output: YES Input: 4 1 200 300 2 200 400 3 200 500 4 200 600 Output: NO Explanation: - In the first example, product 100 visits position 200 twice (at times 1 and 3), indicating a loop. - In the second example, there is no product that revisits the same position, so the output is \\"NO\\".","solution":"def detect_loop(movements): Determine if any product forms a loop, indicated by visiting the same position more than once. :param movements: List of tuples, each containing (timestamp, product_id, position). :return: \\"YES\\" if any product forms a loop, otherwise \\"NO\\". from collections import defaultdict product_positions = defaultdict(set) for t, p, x in movements: if x in product_positions[p]: return \\"YES\\" product_positions[p].add(x) return \\"NO\\""},{"question":"You are an event manager, organizing a conference with multiple sessions. Each session is held in a different room, and each room has different seating capacity. The sessions are scheduled to avoid overlap, so a single attendee can attend all sessions. However, each attendee has to choose whether to attend a session or not based on their interest level. Given a list of sessions, their seating capacities, and the list of attendees with their interest levels in each session, determine the maximum possible number of attended sessions without exceeding room capacities. Each attendee has a unique id and an associated interest level (from 1 to 10) for each session. An attendee will only attend a session if their interest level in that session is at least 5. Your task is to maximize the total number of attended sessions. Input The first line of the input contains two integers, m (1 ≤ m ≤ 1000) representing the number of attendees, and n (1 ≤ n ≤ 1000) representing the number of sessions. The next line contains n integers, c1, c2, ..., cn (1 ≤ ci ≤ 500), where ci represents the seating capacity of the i-th session. The next m lines contain n integers each, where each line represents the interest levels of an attendee in all sessions. For example, the j-th integer in the i-th line represents the interest level of the i-th attendee in the j-th session. Output Print a single integer — the maximum number of attended sessions without exceeding any room\'s seating capacity. Examples Input 3 3 2 3 1 5 4 6 7 8 9 3 5 2 Output 5 Input 4 2 2 2 6 3 8 5 4 9 5 2 Output 4 Note In the first example, there are 3 attendees and 3 sessions with capacities 2, 3, and 1, respectively. - Attendee 1 can attend session 1 and session 3. - Attendee 2 can attend all sessions. - Attendee 3 can attend session 1 and session 2. The optimal arrangement is: - Session 1: Attendee 2, Attendee 3. - Session 2: Attendee 2, Attendee 3. - Session 3: Attendee 1. This results in a maximum of 5 attended sessions.","solution":"def max_attended_sessions(m, n, capacities, interest_levels): session_attendees = [[] for _ in range(n)] for i in range(m): for j in range(n): if interest_levels[i][j] >= 5: session_attendees[j].append((interest_levels[i][j], i)) for session in session_attendees: session.sort(reverse=True, key=lambda x: x[0]) attended_sessions = 0 attendee_count_per_session = [0] * n attendee_attendance = [0] * m for j in range(n): count = 0 for _, attendee in session_attendees[j]: if count < capacities[j] and attendee_attendance[attendee] < n: attendee_count_per_session[j] += 1 attended_sessions += 1 attendee_attendance[attendee] += 1 count += 1 return attended_sessions"},{"question":"Write a function that takes a string as input and returns the longest palindromic substring. A palindrome is a string that reads the same forward and backward. You may assume that the maximum length of the input string is 1000 characters. Function Signature: ```python def longest_palindrome(s: str) -> str: ``` Examples: ```python # Example 1 s = \\"babad\\" # \\"bab\\" is a palindrome, \\"aba\\" is also a palindrome, we return either. # expected output: \\"bab\\" or \\"aba\\" # Example 2 s = \\"cbbd\\" # expected output: \\"bb\\" # Example 3 s = \\"a\\" # expected output: \\"a\\" # Example 4 s = \\"ac\\" # expected output: \\"a\\" or \\"c\\" ``` Note: - The function should be optimized for a string length of 1000 characters.","solution":"def longest_palindrome(s: str) -> str: if len(s) == 0: return \\"\\" def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 start, end = 0, 0 for i in range(len(s)): left1, right1 = expand_around_center(s, i, i) # Odd length palindromes left2, right2 = expand_around_center(s, i, i + 1) # Even length palindromes if right1 - left1 > end - start: start, end = left1, right1 if right2 - left2 > end - start: start, end = left2, right2 return s[start:end + 1]"},{"question":"In a distant land, there lived a passionate gardener named Sofia, who loved to plant trees in her garden. Sofia\'s favorite type of tree is the \\"Binary Tree.\\" A Binary Tree is a data structure in which each node has at most two children, typically distinguished as \\"left\\" and \\"right.\\" One day, Sofia decided to make her Binary Tree \\"balanced.\\" An N-ary Binary Tree is balanced if, for every node, the heights of its left and right subtrees differ by at most one. She needs your help in determining if her Binary Tree is balanced. Given a Binary Tree, you are required to check if it is balanced. Input The input consists of multiple lines, representing a binary tree. Each line represents a node in the following format: * Node Value (integer) * Left Child Value (integer; -1 if no left child) * Right Child Value (integer; -1 if no right child) The input ends when a line with three values \'-1 -1 -1\' is encountered, which should not be processed as a tree node. Assume all node values are unique and within the range [1, 1000]. Output Output \\"YES\\" if the tree is balanced, otherwise \\"NO.\\" Example Input 1 2 3 2 -1 4 4 -1 -1 3 -1 5 5 -1 -1 -1 -1 -1 Output YES Note In the provided example, the tree looks like this: 1 / 2 3 4 5 The height difference between the left and right subtrees of node 1 is 0, for node 2 is 1, for node 3 is 1. Since all nodes satisfy the balance condition, the output is \\"YES.\\"","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree_from_input(input_lines): nodes = {} for line in input_lines: if line == \'-1 -1 -1\': break value, left, right = map(int, line.split()) if value not in nodes: nodes[value] = TreeNode(value) if left != -1: if left not in nodes: nodes[left] = TreeNode(left) nodes[value].left = nodes[left] if right != -1: if right not in nodes: nodes[right] = TreeNode(right) nodes[value].right = nodes[right] return nodes[1] if 1 in nodes else None def is_balanced(root): def check_balance(node): if not node: return 0, True left_height, left_balanced = check_balance(node.left) right_height, right_balanced = check_balance(node.right) balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 height = max(left_height, right_height) + 1 return height, balanced _, balanced = check_balance(root) return balanced def solution(input_lines): root = build_tree_from_input(input_lines) if is_balanced(root): return \\"YES\\" else: return \\"NO\\""},{"question":"Deliveries Scenario John runs a delivery company that operates in a city made up of a rectangular grid of streets. Each street junction is represented by a point in a two-dimensional plane, where the coordinates are integers. The company has a number of delivery personnel, each starting from a different point on the grid and tasked with delivering parcels to various locations. Mission Given the starting positions of the delivery personnel and the delivery destinations, your job as the chief programmer is to determine the shortest distance each delivery person needs to travel to reach their assigned destination. The delivery personnel can only travel horizontally or vertically along the streets. Instructions You need to compute the shortest distance each delivery person has to travel from their starting point to their destination. Constraints The following conditions will be satisfied: * (1 leq N leq 10^5) where (N) is the number of delivery tasks. * The coordinates of each point ( (x, y) ) are in the range (-10^5 leq x, y leq 10^5 ). * Coordinates are integers. Input Format The input is given in the following format: (N) (x_{s1}) (y_{s1}) (x_{d1}) (y_{d1}) (vdots) (x_{sN}) (y_{sN}) (x_{dN}) (y_{dN}) * (N) - the number of delivery tasks. * (x_{si}) (y_{si}) - the starting coordinates for the (i)th delivery task. * (x_{di}) (y_{di}) - the destination coordinates for the (i)th delivery task. Output Format For each delivery task, output the shortest travel distance on a new line. Distance Calculation The distance a delivery person travels from ((x_s, y_s)) to ((x_d, y_d)) is defined as: [ D = |x_s - x_d| + |y_s - y_d| ] Example Input 3 1 1 4 4 -1 -1 -4 -4 0 0 1 1 Output 6 6 2","solution":"def shortest_delivery_distances(N, tasks): Computes the shortest travel distance for each delivery person. Parameters: N (int): The number of delivery tasks. tasks (list of tuples): Each tuple contains four integers (x_s, y_s, x_d, y_d) representing the starting and destination coordinates. Returns: list: A list of integers representing the shortest travel distance for each delivery task. distances = [] for task in tasks: x_s, y_s, x_d, y_d = task distance = abs(x_s - x_d) + abs(y_s - y_d) distances.append(distance) return distances # Sample usage N = 3 tasks = [(1, 1, 4, 4), (-1, -1, -4, -4), (0, 0, 1, 1)] print(shortest_delivery_distances(N, tasks)) # Output: [6, 6, 2]"},{"question":"In a particular coding competition, participants are given the task of buying as many shirts as possible with a given amount of money. The shirts come in two types: Type A and Type B. Each type of shirt has a specific cost associated with it. Participants can buy any combination of shirts, but they want to maximize the number of shirts they purchase with their total money M. Given the amount of money participants have, the cost of one Type A shirt, and the cost of one Type B shirt, write a program to determine the maximum number of shirts they can buy. Input The first line of the input contains one integer M (1 ≤ M ≤ 10^8) — the total money participants have. The second line of the input contains one integer A (1 ≤ A ≤ 100) — the cost of one Type A shirt. The third line of the input contains one integer B (1 ≤ B ≤ 100) — the cost of one Type B shirt. Output Output one integer — the maximum number of shirts participants can buy with their money M. Examples Input 100 50 75 Output 2 Input 45 15 20 Output 3 Input 90 20 30 Output 4 Note In the first example, participants can buy 2 Type A shirts, or 1 Type A shirt and 1 Type B shirt. The total number of shirts is 2. In the second example, participants can buy 3 Type A shirts or 2 Type B shirts, but the optimal solution is to buy 3 Type A shirts. In the third example, participants can buy 4 Type A shirts, or 1 Type A shirt and 2 Type B shirts. The total number of shirts is 4.","solution":"def max_shirts(M, A, B): Determines the maximum number of shirts that can be bought with the given amount of money, considering two types of shirts with different costs. M: Total money available A: Cost of one Type A shirt B: Cost of one Type B shirt Returns the maximum number of shirts. max_shirts = 0 for a_count in range(M // A + 1): remaining_money = M - a_count * A b_count = remaining_money // B total_shirts = a_count + b_count max_shirts = max(max_shirts, total_shirts) return max_shirts"},{"question":"You are given a list of `n` weighted edges representing an undirected graph, where each edge is defined by a tuple (u, v, w), indicating an edge between node `u` and node `v` with a weight `w`. Your task is to determine whether the given graph is a tree. Recall that a tree is an undirected graph with `n` nodes and `n-1` edges that is connected and acyclic. Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 105, 0 ≤ m ≤ 105) — the number of nodes and edges, respectively. - Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n; 1 ≤ w ≤ 109) — defining an edge between nodes `u` and `v` with weight `w`. Output - Output \\"YES\\" if the graph is a tree, otherwise, output \\"NO\\". Examples Input 4 3 1 2 4 2 3 3 3 4 5 Output YES Input 4 3 1 2 4 2 3 3 3 4 5 4 1 6 Output NO Input 4 2 1 2 4 3 4 5 Output NO","solution":"def is_tree(n, edges): Given the number of nodes and the list of edges in a graph, determines if the graph is a tree. if n == 1: return \\"YES\\" if len(edges) == 0 else \\"NO\\" if len(edges) != n - 1: return \\"NO\\" parent = list(range(n + 1)) def find(x): if parent[x] == x: return x parent[x] = find(parent[x]) # Path compression return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY return True return False for u, v, w in edges: if not union(u, v): return \\"NO\\" return \\"YES\\""},{"question":"Given a string, your task is to write a function that checks if the string can be rearranged to form a palindrome. A palindrome is a word, phrase, or sequence of characters that reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. A string can be rearranged to form a palindrome if at most one of the characters has an odd frequency and all other characters have even frequencies. Write a function `can_form_palindrome(input_string: str) -> bool` that takes a string and returns `True` if it can be rearranged to form a palindrome, and `False` otherwise. # Function Signature ```python def can_form_palindrome(input_string: str) -> bool: pass ``` # Input - The input is a single string `input_string` which may contain lowercase letters, uppercase letters, digits, and special characters. (1 <= len(input_string) <= 1000) # Output - Return a boolean value `True` if the string can be rearranged to form a palindrome, otherwise return `False`. # Example ```python print(can_form_palindrome(\\"aabb\\")) # True print(can_form_palindrome(\\"racecar\\")) # True print(can_form_palindrome(\\"hello\\")) # False print(can_form_palindrome(\\"civic\\")) # True print(can_form_palindrome(\\"ivicc\\")) # True print(can_form_palindrome(\\"abcd\\")) # False ``` # Explanation - For the first example, \\"aabb\\" can be rearranged to form \\"abba\\" which is a palindrome. - For the second example, \\"racecar\\" is already a palindrome. - For the third example, \\"hello\\" cannot be rearranged to form a palindrome. - For the remaining examples, similar reasoning applies.","solution":"def can_form_palindrome(input_string: str) -> bool: from collections import Counter # Normalize the input string by converting it to lowercase and removing non-alphanumeric characters normalized_string = \'\'.join(filter(str.isalnum, input_string.lower())) # Count frequencies of each character char_count = Counter(normalized_string) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged into a palindrome if it has at most one character with an odd frequency return odd_count <= 1"},{"question":"In a digital world, emails are one of the essential methods of communication. Emails consist of various elements like sender information, recipient information, subject, and body content. An important aspect of writing an email is ensuring it contains neither spam nor offensive content, and is also concise. You are tasked with writing a function that takes a list of emails and evaluates each email\'s body content under certain criteria to classify them as \\"Valid\\" or \\"Invalid\\". The criteria for an email to be valid are: 1. The email body should not contain the term \\"spam\\". 2. The email body should not contain any offensive words from a given list of offensive words. 3. The email body should not exceed 1000 characters. The function should return a list of strings where each string indicates \\"Valid\\" or \\"Invalid\\" corresponding to each email in the input list. The function signature should be: ```python def evaluate_emails(emails: List[str], offensive_words: List[str]) -> List[str]: ``` **Input** - `emails`: A list of strings where each string represents the body content of an email. - `offensive_words`: A list of strings where each string represents an offensive word. **Output** - A list of strings \\"Valid\\" or \\"Invalid\\" corresponding to each email. **Constraints** - The length of the emails list will be between 1 and 100, inclusive. - The length of each email will vary, but the maximum length is 5000 characters. - The length of the offensive words list will be between 1 and 100, inclusive. - Offensive words are case insensitive and should be checked accordingly. **Examples** **Example 1** ```python emails = [\\"Hello, this is a test email. It should not be considered spam.\\", \\"You are an idiot\\"] offensive_words = [\\"idiot\\", \\"dumb\\"] evaluate_emails(emails, offensive_words) ``` **Output**: ```python [\\"Valid\\", \\"Invalid\\"] ``` Explanation: - The first email does not contain any offensive words and \\"spam\\" is not present, and it is less than 1000 characters. Therefore it is \\"Valid\\". - The second email contains the word \\"idiot\\", which is in the offensive words list, so it is \\"Invalid\\". **Example 2** ```python emails = [\\"Spam messages are annoying\\", \\"You are a dumb person!\\", \\"Have a great day!\\"] offensive_words = [\\"idiot\\", \\"dumb\\", \\"stupid\\"] evaluate_emails(emails, offensive_words) ``` **Output**: ```python [\\"Invalid\\", \\"Invalid\\", \\"Valid\\"] ``` Explanation: - The first email contains the word \\"spam\\", so it is \\"Invalid\\". - The second email contains the word \\"dumb\\", which is in the offensive words list, so it is \\"Invalid\\". - The third email passes all the criteria and is \\"Valid\\". **Example 3** ```python emails = [\\"a\\"*1001, \\"Welcome to the community!\\", \\"This should be fine\\"] offensive_words = [\\"offensiveword\\"] evaluate_emails(emails, offensive_words) ``` **Output**: ```python [\\"Invalid\\", \\"Valid\\", \\"Valid\\"] ``` Explanation: - The first email exceeds 1000 characters, so it is \\"Invalid\\". - The second and third emails do not contain any offensive words, are not more than 1000 characters long, and do not contain \\"spam\\". Therefore they are \\"Valid\\".","solution":"from typing import List def evaluate_emails(emails: List[str], offensive_words: List[str]) -> List[str]: Evaluate each email\'s body content to classify them as \\"Valid\\" or \\"Invalid\\". An email is \\"Valid\\" if: 1. It doesn\'t contain the term \\"spam\\". 2. It doesn\'t contain any offensive words from the list of offensive words. 3. It doesn\'t exceed 1000 characters. :param emails: List of email body contents. :param offensive_words: List of offensive words. :return: List of strings \\"Valid\\" or \\"Invalid\\" corresponding to each email. offensive_words_lower = [word.lower() for word in offensive_words] results = [] for email in emails: email_lower = email.lower() if \\"spam\\" in email_lower: results.append(\\"Invalid\\") continue if any(offensive_word in email_lower for offensive_word in offensive_words_lower): results.append(\\"Invalid\\") continue if len(email) > 1000: results.append(\\"Invalid\\") continue results.append(\\"Valid\\") return results"},{"question":"Write a program which determines the number of vowels and consonants in a given word. Constraints * The input word will consist of only lowercase English letters and will have a length between 1 and 100. Input A single word is provided as input. Output Print the number of vowels and consonants in the word separated by a single space. Example Input hello Output 2 3","solution":"def count_vowels_and_consonants(word): Returns the number of vowels and consonants in a given word. Parameters: word (str): The word to count vowels and consonants from. Returns: tuple: A tuple containing the number of vowels and consonants. vowels = \'aeiou\' num_vowels = 0 num_consonants = 0 for char in word: if char in vowels: num_vowels += 1 else: num_consonants += 1 return num_vowels, num_consonants # Example usage word = \\"hello\\" vowels, consonants = count_vowels_and_consonants(word) print(vowels, consonants) # Output: 2 3"},{"question":"A large company is planning to develop a complex software system consisting of numerous modules. Each module may depend on some other modules for successful compilation. To manage the dependencies and ensure a smooth build process, the company wants to determine the order in which these modules should be compiled. If it is not possible to compile all modules due to circular dependencies, they need to know that as well. Consider n modules labeled from 1 to n. There are m dependency relations where each relation is given as a pair (a, b) meaning module a must be compiled before module b. Input The first line of input contains two integers n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000), the number of modules and the number of dependency relations. Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n; a ≠ b), indicating that the compilation of module a must be completed before the compilation of module b. Output If it is possible to compile all modules, print the compile order in which the modules can be compiled, separated by spaces. If there are multiple valid orders, any one of them is acceptable. If it is not possible to compile all modules, print \\"Impossible\\". Examples Input 4 3 1 2 3 2 2 4 Output 1 3 2 4 Input 3 3 1 2 2 3 3 1 Output Impossible Note In the first example, one possible order to compile the modules is 1, 3, 2, 4. All dependencies are satisfied, and every module can be compiled after the modules on which it depends. In the second example, there is a circular dependency: 1 depends on 2, 2 depends on 3, and 3 depends on 1. Therefore, it is impossible to compile all the modules.","solution":"from collections import deque, defaultdict def find_compile_order(n, m, dependencies): indegree = [0] * (n + 1) graph = defaultdict(list) # Build the graph for a, b in dependencies: graph[a].append(b) indegree[b] += 1 queue = deque([i for i in range(1, n + 1) if indegree[i] == 0]) compile_order = [] while queue: current = queue.popleft() compile_order.append(current) for neighbor in graph[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(compile_order) == n: return compile_order else: return \\"Impossible\\""},{"question":"You are provided with two strings, `A` and `B`, that contain only lower case English letters. You need to determine the longest substring that appears in both `A` and `B`. Write a program that finds the longest common substring between `A` and `B`. **Constraints:** * 1 leq |A|, |B| leq 1000 **Input:** The input consists of two strings provided on separate lines: ``` A B ``` **Output:** Output the length of the longest common substring between `A` and `B`. **Example:** Input: ``` abcabcabc abc ``` Output: ``` 3 ``` Explanation: The longest substring that appears in both strings is \\"abc\\" with a length of 3.","solution":"def longest_common_substring(A, B): Returns the length of the longest common substring between A and B. m, n = len(A), len(B) dp = [[0] * (n + 1) for _ in range(m + 1)] max_length = 0 for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_length = max(max_length, dp[i][j]) return max_length"},{"question":"Alice is an avid Trainspotter. She frequents the local railway station to observe the mesmerizing transit of trains and record their passing times. This particular station has multiple platforms, and Alice wants to analyze the platform occupancy for a given day. The schedule is provided as a list of train arrival and departure times for the day. A train occupies a platform from its arrival time till its departure time. Alice is interested in finding the minimum number of platforms required at the station so that no train has to wait for another to vacate a platform. Input The first line contains a single integer n (1 ≤ n ≤ 1000), the number of trains. The next n lines each contain two time values, representing the arrival and the departure time of a train. Times are given as integers in the 24-hour format HHMM (0000 ≤ HHMM ≤ 2359). Output Print a single integer – the minimum number of platforms required. Examples Input 3 0900 0930 0940 0950 0920 0935 Output 2 Input 4 1000 1030 1015 1040 1020 1045 1035 1100 Output 3 Note In the first example, at 0925, two trains (0900-0930 and 0920-0935) are simultaneously occupying platforms. Thus, a minimum of 2 platforms is required. In the second example, at 1035, three trains (1000-1030, 1015-1040, and 1020-1045) are simultaneously occupying platforms. Thus, a minimum of 3 platforms is required.","solution":"def min_platforms(n, schedule): # Convert schedule into sorted arrival and departure lists arrivals = sorted([train[0] for train in schedule]) departures = sorted([train[1] for train in schedule]) platforms_needed = 0 max_platforms = 0 i = 0 j = 0 # Traverse the arrival and departure events while i < n and j < n: if arrivals[i] < departures[j]: platforms_needed += 1 max_platforms = max(max_platforms, platforms_needed) i += 1 else: platforms_needed -= 1 j += 1 return max_platforms"},{"question":"Write a function to Compute the Sequences. Input Format: First line contains integer N denoting number of elements in the sequence. Next line contains N space-separated integers. Output Format: Print the next sequence of N space-separated integers, where each element of the new sequence is the sum of the previous two elements modulo 1000000007. Constraints: 1 ≤ N ≤ 100 0 ≤ elements of sequence ≤ 100 Example Input 5 1 2 3 4 5 Example Output 3 5 7 9 6 Explanation: - The new sequence is calculated as follows: - First element: (1 + 2) % 1000000007 = 3 - Second element: (2 + 3) % 1000000007 = 5 - Third element: (3 + 4) % 1000000007 = 7 - Fourth element: (4 + 5) % 1000000007 = 9 - Fifth element: (5 + 1) % 1000000007 = 6","solution":"def compute_sequence(N, sequence): Computes the next sequence of N elements where each element is the sum of the previous two elements modulo 1000000007. Args: N: integer, number of elements in the sequence sequence: list of integers, the input sequence Returns: list of integers, the computed sequence MOD = 1000000007 new_sequence = [] for i in range(N): next_value = (sequence[i % N] + sequence[(i + 1) % N]) % MOD new_sequence.append(next_value) return new_sequence"},{"question":"Problem Statement: Alex is exploring number theory and has encountered the concept of prime numbers. He is particularly interested in understanding the distribution of prime numbers within a specified range. He decides to write a program that determines the number of prime numbers between two given integers, inclusive. Input Format: The first line of input contains t, the number of test cases. Each of the next t lines contains two integers, a and b, denoting the start and end of the range, respectively. Output Format: For each test case, output a single number which is the count of prime numbers in the given range. Input Constraints: 1 ≤ t ≤ 100 1 ≤ a ≤ b ≤ 10^6 SAMPLE INPUT 3 2 10 11 20 1 1 SAMPLE OUTPUT 4 4 0 Explanation For the first input, the prime numbers between 2 and 10 are 2, 3, 5, and 7. Hence, there are 4 prime numbers in this range. For the second input, the prime numbers between 11 and 20 are 11, 13, 17, and 19. Hence, there are 4 prime numbers in this range. For the third input, there are no primes between 1 and 1. Hence, the output is 0.","solution":"def sieve_of_eratosthenes(limit): Generates a list of boolean values, where index indicates number and value indicates if it\'s prime. Uses the Sieve of Eratosthenes algorithm. is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers for number in range(2, int(limit**0.5) + 1): if is_prime[number]: for multiple in range(number * number, limit + 1, number): is_prime[multiple] = False return is_prime def count_primes_in_range(sieve, a, b): Uses the sieve of primes to count prime numbers in the range [a, b]. count = 0 for num in range(a, b + 1): if sieve[num]: count += 1 return count def count_primes_in_ranges(test_cases): Solve the problem for all provided test cases. limit = 10**6 sieve = sieve_of_eratosthenes(limit) results = [] for a, b in test_cases: results.append(count_primes_in_range(sieve, a, b)) return results"},{"question":"Jane is working on a project that involves analyzing user behavior on a website. One of the metrics she needs to compute is the \\"user engagement score,\\" which is defined as the maximum percentage of days a user has been active within a given period. User Engagement Data will be provided as follows: Total number of entries - N For each entry, it will contain a date (YYYY-MM-DD) representing the days the user was active. Your task is to find out the maximum user engagement score for each test case, defined as the highest percentage of days the user was active within any continuous 7-day period. Input: The first line contains an integer T - number of test cases. T test cases follow. The first line of each test case will contain N. Next N lines each will contain a date in the format YYYY-MM-DD. Output: For each test case, output the maximum user engagement score as a percentage (rounded to the nearest integer). Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 Dates are in the range from \'2022-01-01\' to \'2022-12-31\' Note: Sum of N over all the test cases does not exceed 10,000. SAMPLE INPUT 2 10 2022-01-01 2022-01-03 2022-01-04 2022-01-06 2022-02-01 2022-02-02 2022-02-03 2022-03-01 2022-03-04 2022-04-01 6 2022-06-01 2022-06-02 2022-06-03 2022-06-05 2022-06-06 2022-06-07 SAMPLE OUTPUT 57 86 Explanation In the first test case, the user has multiple active days within various 7-day periods. The maximum engagement is calculated for the period \'2022-01-01\' to \'2022-01-07\'. Within this period, the user was active on 4 out of 7 days, making the engagement score 57% (rounded to the nearest integer). In the second test case, the user was active for 6 out of 7 days in the period \'2022-06-01\' to \'2022-06-07\', resulting in an engagement score of 86%.","solution":"from datetime import datetime, timedelta from collections import defaultdict def get_max_user_engagement_score(dates): Calculates the maximum user engagement score for one test case. Args: dates (List[str]): List of dates the user was active. Returns: int: Maximum user engagement score as a percentage. if not dates: return 0 # Convert date strings to datetime objects for easier manipulation date_objects = sorted(datetime.strptime(date, \\"%Y-%m-%d\\") for date in dates) max_days_active = 0 for i in range(len(date_objects)): # Define the 7-day window window_end_date = date_objects[i] + timedelta(days=6) # Count active days within this 7-day window days_active_in_window = sum(1 for date in date_objects if date_objects[i] <= date <= window_end_date) max_days_active = max(max_days_active, days_active_in_window) # Calculate engagement score as a percentage and round to nearest integer engagement_score = round((max_days_active / 7) * 100) return engagement_score def get_engagement_scores(test_cases): Calculates maximum user engagement scores for multiple test cases. Args: test_cases (List[List[str]]): List of test cases with active dates. Returns: List[int]: Engagement scores for all test cases. return [get_max_user_engagement_score(dates) for dates in test_cases]"},{"question":"Construct a binary search tree from a given list of integers and perform specific operations on it. The binary search tree (BST) is a node-based binary tree data structure which has the following properties: 1. The left subtree of a node contains only nodes with keys less than the node\'s key. 2. The right subtree of a node contains only nodes with keys greater than the node\'s key. 3. Both the left and right subtrees must also be binary search trees. You are given a list of integers. First, you need to construct a binary search tree using these integers in the given order. After constructing the BST, perform the given operations and provide the results. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of integers in the input list. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the integers to be inserted into the BST in the given order. The third line contains an integer m (1 ≤ m ≤ 105) — the number of operations to be performed on the BST. The next m lines each contain a string representing an operation followed by an integer. The operations are: - \\"FIND x\\" - Check if integer x is present in the BST. - \\"MIN\\" - Find the minimum integer in the BST. - \\"MAX\\" - Find the maximum integer in the BST. - \\"INORDER\\" - Output the in-order traversal of the BST. Output Print the results of the operations: - For \\"FIND x\\", output \\"YES\\" if x is present in the BST, otherwise output \\"NO\\". - For \\"MIN\\", print the minimum integer in the BST. - For \\"MAX\\", print the maximum integer in the BST. - For \\"INORDER\\", print the in-order traversal of the BST as a space-separated list of integers. Examples Input 7 50 30 20 40 70 60 80 5 FIND 40 FIND 25 MIN MAX INORDER Output YES NO 20 80 20 30 40 50 60 70 80 Input 4 4 2 6 1 3 FIND 1 MIN INORDER Output YES 1 1 2 4 6","solution":"class Node: def __init__(self, key): self.left = None self.right = None self.val = key class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = Node(key) else: self._insert(self.root, key) def _insert(self, node, key): if key < node.val: if node.left is None: node.left = Node(key) else: self._insert(node.left, key) else: if node.right is None: node.right = Node(key) else: self._insert(node.right, key) def find(self, key): return self._find(self.root, key) def _find(self, node, key): if node is None: return \\"NO\\" if key == node.val: return \\"YES\\" elif key < node.val: return self._find(node.left, key) else: return self._find(node.right, key) def find_min(self): return self._find_min(self.root) def _find_min(self, node): current = node while current.left is not None: current = current.left return current.val def find_max(self): return self._find_max(self.root) def _find_max(self, node): current = node while current.right is not None: current = current.right return current.val def inorder(self): result = [] self._inorder(self.root, result) return result def _inorder(self, node, result): if node: self._inorder(node.left, result) result.append(node.val) self._inorder(node.right, result) def execute_operations(n, elements, m, operations): bst = BinarySearchTree() for element in elements: bst.insert(element) results = [] for operation in operations: if operation[0] == \\"FIND\\": results.append(bst.find(operation[1])) elif operation[0] == \\"MIN\\": results.append(bst.find_min()) elif operation[0] == \\"MAX\\": results.append(bst.find_max()) elif operation[0] == \\"INORDER\\": results.append(\\" \\".join(map(str, bst.inorder()))) return results"},{"question":"Zara, the Zebra, loves playing with numbers. She has recently come up with a fascinating number game involving prime numbers and sums. The game starts with an array b of length m consisting of positive integers. Zara’s goal is to determine whether there exists a subset of numbers within b whose sum is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, the first few prime numbers are 2, 3, 5, 7, 11, and so on. If Zara can find such a subset, she wins; otherwise, she loses. Input The input consists of multiple test cases. The first line contains q (1 ≤ q ≤ 10000) — the number of test cases. The description of the test cases follows. The first line of each test case contains the integer m (1 ≤ m ≤ 100) — the length of b. The second line of each test case contains m integers b_1, b_2, …, b_m (1 ≤ b_i ≤ 10^4) — the elements of b. Output For each test case print: * YES if there exists a subset with a prime sum. * NO if there is no such subset. Examples Input 3 4 1 2 3 4 3 8 10 12 5 4 3 6 9 11 Output YES NO YES Note In the first test case, the subset [1, 2] has a sum of 3, which is a prime number. In the second test case, no subset exists that sums to a prime number. In the third test case, the subset [4, 3] has a sum of 7, which is a prime number.","solution":"from itertools import combinations def is_prime(n): Checks if a number n (n > 1) is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def subset_prime_sum_exists(b): Given a list of integers b, checks if there is a subset with a prime sum. n = len(b) for i in range(1, n + 1): for subset in combinations(b, i): if is_prime(sum(subset)): return \\"YES\\" return \\"NO\\" def solve(test_cases): Processes multiple test cases and returns the result for each. results = [] for test_case in test_cases: m, b = test_case results.append(subset_prime_sum_exists(b)) return results"},{"question":"You are given a sequence of integers. You need to process a series of queries on this sequence. Each query can either update the sequence or ask for a result based on the sum of a subarray. The queries are of the following two types: 1. `1 x y`: Update the element at index `x` to `y` (1-based index). 2. `2 l r`: Output the sum of elements from index `l` to index `r` (1-based index). Input The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100000), representing the length of the sequence and the number of queries respectively. The second line contains `n` integers `a1, a2, ..., an` denoting the initial sequence. The following `q` lines contain the queries in the format described above. Output For each query of type `2 l r`, output the sum of elements from index `l` to index `r` in a new line. Example Input 5 3 1 2 3 4 5 2 1 3 1 3 10 2 1 3 Output 6 13 Explanation Initially, the sequence is [1, 2, 3, 4, 5]. First query: Query for sum from index 1 to 3: 1 + 2 + 3 = 6. Second query: Update the element at index 3 to 10. The sequence becomes [1, 2, 10, 4, 5]. Third query: Query for sum from index 1 to 3: 1 + 2 + 10 = 13.","solution":"class SequenceProcessor: def __init__(self, initial_sequence): self.sequence = initial_sequence def update(self, x, y): Updates the element at index x with value y. Note: x is 1-based index. self.sequence[x - 1] = y def query(self, l, r): Returns the sum of elements from index l to index r. Note: l and r are 1-based indices. return sum(self.sequence[l - 1:r]) def process_queries(n, q, initial_sequence, queries): processor = SequenceProcessor(initial_sequence) results = [] for query in queries: if query[0] == 1: _, x, y = query processor.update(x, y) elif query[0] == 2: _, l, r = query results.append(processor.query(l, r)) return results"},{"question":"Alex has a string S consisting of lowercase English letters. He wants to make it a palindrome by inserting the fewest number of characters possible. A palindrome is a string that reads the same forward and backward. Help Alex by determining the minimum number of characters he needs to insert. # Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of string S. The second line contains the string S. # Output Output a single integer — the minimum number of characters Alex needs to insert to make the string a palindrome. # Examples Input ``` 3 abc ``` Output ``` 2 ``` Input ``` 5 ababa ``` Output ``` 0 ``` Input ``` 4 aabb ``` Output ``` 2 ``` # Note In the first example, Alex could insert \'b\' at the beginning and \'a\' at the end to make the string \\"bacab\\". In the second example, the string is already a palindrome, so no insertions are needed. In the third example, Alex could insert \'a\' at the beginning and \'b\' at the end to make the string \\"baabba\\".","solution":"def min_insertions_to_palindrome(n, s): Returns the minimum number of insertions needed to make the string a palindrome. # Helper function to find the longest palindromic subsequence def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Fill the table for cl in range(2, n+1): for i in range(n-cl+1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1] # Find the length of the longest palindromic subsequence lps = longest_palindromic_subsequence(s) # The minimum insertions needed = length of the string - length of the LPS return n - lps"},{"question":"In a certain kingdom, there is a bustling market with several stands, each selling a unique type of fruit. Each stand has a queue of people waiting to buy fruit. Every minute, a person leaves a queue with a unique taste experience and satisfaction level. Once a person leaves, the next in queue moves forward. However, the kingdom has recently introduced a new rule: if a person leaves a queue and enters another queue, they still keep their satisfaction level from their previous purchase while their new satisfaction level is added to the previous one. Knowing that people can only join other queues directly adjacent to their current queue, you are to maximize the total satisfaction level of all combinations possible. Given the initial state of the queues and the satisfaction levels of all people in them, determine the maximum possible total satisfaction level when all people have left the queues, following the rule described above. Input The first input line contains a single integer n (1 ≤ n ≤ 10^5), the number of stands (and hence the number of queues). The second line contains n integers s_i (1 ≤ s_i ≤ 10^6), where s_i is the initial satisfaction level of the first person in the i-th queue. The third line contains n integers t_i (1 ≤ t_i ≤ 10^6), where t_i is the initial satisfaction level of the last person in the i-th queue. Output Print a single integer — the maximum possible total satisfaction level considering the rules and initial states of the queues. Examples Input 3 5 8 3 7 4 6 Output 24 Input 1 10 15 Output 15 Note In the first sample, one optimal way is: - First person in the first queue with satisfaction 5 moves to the second queue. - First person in the second queue with satisfaction 8 moves to the third queue. - Total satisfaction is 5 (from the first person) + 8 (from the first person moved to the second queue) + 6 (satisfaction added by joining the last queue. The maximum possible total satisfaction level is therefore 5 (from the initial state) + 8 + 6 = 24. In the second sample, there is only one stand, so the total satisfaction level is 15.","solution":"def max_satisfaction_level(n, s, t): Calculates the maximum possible total satisfaction level considering the rules and initial states of the queues. :param n: Number of stands (and hence the number of queues) :param s: List of satisfaction levels of the first person in each queue :param t: List of satisfaction levels of the last person in each queue :return: Maximum possible total satisfaction level if n == 1: return t[0] total_satisfaction = sum(s) for i in range(n): total_satisfaction += t[i] return total_satisfaction"},{"question":"A delivery company wants to optimize its delivery routes. Each delivery route is represented as a sequence of stops in the city. The city is organized in a grid, and each stop is a pair of coordinates (x, y). A delivery route is considered optimal if the route does not revisit any stop coordinates. You are tasked with writing a program that checks if a given delivery route is optimal. **Input** The input consists of: - An integer n (1 ≤ n ≤ 100) representing the number of stops. - n pairs of integers (x, y) representing the coordinates of the stops in the order they are visited. **Output** Output \\"YES\\" if the delivery route is optimal and does not revisit any stop, otherwise, output \\"NO\\". **Examples** Input ``` 5 1 2 3 4 5 6 1 2 7 8 ``` Output ``` NO ``` Input ``` 3 0 0 1 1 2 2 ``` Output ``` YES ``` Input ``` 4 1 1 2 2 3 3 4 4 ``` Output ``` YES ``` **Note** In the first example, the delivery route revisits the stop at coordinates (1, 2), so the route is not optimal. In the second and third examples, there are no revisits, making the delivery routes optimal.","solution":"def is_optimal_route(n, stops): Determines if the delivery route is optimal (i.e., does not revisit any stop). Parameters: n (int): Number of stops. stops (list of tuples): List of stop coordinates (x, y). Returns: str: \\"YES\\" if the route is optimal, \\"NO\\" otherwise. visited = set() for stop in stops: if stop in visited: return \\"NO\\" visited.add(stop) return \\"YES\\" # Let\'s implement the functions to process input directly suitable for the question input-output format: def process_input_output(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) stops = [tuple(map(int, line.split())) for line in lines[1:]] return is_optimal_route(n, stops)"},{"question":"A company is trying to distribute bonus points to its employees. Each employee should receive a unique number of points, and the total sum of all points distributed should be as close as possible to a given target value. Find the exact list of points each employee should receive. Input The input consists of two lines. The first line contains two integers `m` (number of employees) and `t` (target total points). The second line contains `m` distinct positive integers, representing the minimum points each employee could receive. Output The output should be a single line containing `m` integers which are the exact points each employee should receive, in ascending order. Constraints 1 <= m <= 1000 1 <= t <= 100000 1 <= min_points_i <= 100 for all i (minimum points each employee could receive) Example Input: 4 50 1 2 3 4 Output: 5 6 9 30","solution":"def distribute_bonus_points(m, t, min_points): Distributes bonus points to employees such that each employee receives a unique number of points, and the total sum is as close as possible to the target value. Parameters: m (int): The number of employees t (int): The target total points min_points (list): A list of integers representing the minimum points each employee could receive Returns: list: A list containing the exact points each employee should receive in ascending order min_points.sort() result = min_points[:] extra_points = t - sum(min_points) if extra_points < 0: raise ValueError(\\"It is not possible to distribute points to meet the target.\\") # Adding extra points starting from the largest minimum points for i in range(m - 1, -1, -1): result[i] += extra_points break return sorted(result) # Example usage: # m = 4, t = 50, min_points = [1, 2, 3, 4] # output: [1, 2, 3, 44] or similar distribution"},{"question":"You are given an array of n integers. You need to answer several queries about the sum of the integers in the array within certain ranges. Each query consists of two integers l and r (1 ≤ l ≤ r ≤ n), and you need to find the sum of the array elements from index l to index r (inclusive). Your task is to process q queries efficiently. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) – the number of integers in the array and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) – the elements of the array. The next q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n) – the endpoints of the query range. Output Output q lines, each containing a single integer – the sum of the elements in the specified range for each query. Examples Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15 Note In the first query, the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. In the second query, the sum of elements from index 2 to 4 is 2 + 3 + 4 = 9. In the third query, the sum of elements from index 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15. The constraints guarantee that a prefix sum array can be used to efficiently answer each query in constant time after an initial precomputation step.","solution":"def preprocess_prefix_sums(arr): Preprocess the prefix sums of the array. Returns a list where prefix_sums[i] is the sum of elements from arr[0] to arr[i-1]. n = len(arr) prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] return prefix_sums def range_sum(prefix_sums, l, r): Returns the sum of the array elements from index l to index r (inclusive), based on the precomputed prefix sums array. l and r are 1-based indexes, while prefix_sums uses a 0-based indexing. return prefix_sums[r] - prefix_sums[l - 1] def process_queries(arr, queries): Process the given queries and return the result for each query. arr: List of integers representing the array. queries: List of tuples, each containing two integers representing the query range. Returns a list of integers, each representing the result of a query. # Preprocess the prefix sums prefix_sums = preprocess_prefix_sums(arr) # Execute each query and collect the results results = [range_sum(prefix_sums, l, r) for l, r in queries] return results"},{"question":"Title: **Number Sorting Challenge** Description: Given a list of integers, you are required to sort the list in an ascending order but with the condition that all the even numbers should come before any odd number. Maintain the relative order among the even and odd numbers as they were in the original list. Input: - An integer `n` representing the number of integers in the list. - A list of `n` integers separated by space. Output: - A single list of integers sorted according to the rules described above. Example: Input: ``` 10 8 3 1 2 7 4 6 9 3 5 ``` Output: ``` 8 2 4 6 3 1 7 9 3 5 ``` Input: ``` 5 7 5 3 2 1 ``` Output: ``` 2 7 5 3 1 ``` Note: - The first line of the input represents how many integers are in the list. - The following line contains the list of integers. - The output should be a single list where all even numbers come before any odd number, while preserving the original relative order within the even numbers and within the odd numbers.","solution":"def even_before_odd_sort(n, array): Sort the list so that even numbers come first, followed by odd numbers. The relative order of the even and odd numbers is preserved. even_numbers = [x for x in array if x % 2 == 0] odd_numbers = [x for x in array if x % 2 != 0] return even_numbers + odd_numbers # Example Usage # n = 10 # array = [8, 3, 1, 2, 7, 4, 6, 9, 3, 5] # print(even_before_odd_sort(n, array)) # Output should be: [8, 2, 4, 6, 3, 1, 7, 9, 3, 5] # n = 5 # array = [7, 5, 3, 2, 1] # print(even_before_odd_sort(n, array)) # Output should be: [2, 7, 5, 3, 1]"},{"question":"A developer is tasked with developing a new program that handles a series of tasks, each task taking a certain amount of time to complete. Since they want to optimize their workflow, they need to analyze the time it takes to complete a batch of tasks continuously. The goal is to find a subarray where the total time taken to complete these tasks is as close as possible to a given target time `T`, without exceeding it. Given an array of integers representing the time taken for each task in minutes, find the length of the longest subarray such that the total time does not exceed `T`. If there are multiple subarrays of the same length, print the one which starts earliest. Input The first line of the input data contains two integer numbers separated by a space `n` (1 ≤ `n` ≤ 105) and `T` (1 ≤ `T` ≤ 109) — the number of tasks and the target time in minutes. The second line contains `n` integer numbers separated by a space. Each number `ti` (1 ≤ `ti` ≤ 106) represents the time taken for the `i-th` task in minutes. Output In the first line, print one integer `l` — the length of the longest subarray where the total time does not exceed `T`. In the second line, print two integers `a` and `b` separated by a space — the start and end indexes of the subarray corresponding to zero-based indexing. If there is no valid subarray, print `0`. Examples Input 5 8 2 1 3 2 1 Output 4 0 3 Input 3 3 4 5 6 Output 0","solution":"def longest_subarray(n, T, task_times): Finds the longest subarray where the total time does not exceed T. Parameters: n (int): Number of tasks. T (int): Target time in minutes. task_times (list): List of integers representing time taken for each task. Returns: tuple: Length of the longest subarray, start and end indexes of the subarray. max_length = 0 max_start = -1 max_end = -1 start = 0 current_sum = 0 for end in range(n): current_sum += task_times[end] while current_sum > T and start <= end: current_sum -= task_times[start] start += 1 if (end - start + 1) > max_length: max_length = end - start + 1 max_start = start max_end = end if max_length == 0: return 0, 0, 0 else: return max_length, max_start, max_end # Test example cases if __name__ == \\"__main__\\": n = 5 T = 8 task_times = [2, 1, 3, 2, 1] print(longest_subarray(n, T, task_times)) # Output: (4, 0, 3) n = 3 T = 3 task_times = [4, 5, 6] print(longest_subarray(n, T, task_times)) # Output: (0, 0, 0)"},{"question":"Lucy enjoys tinkering with robotics and decided to build a simple line-following robot. The robot operates on a 2D grid and needs a program that helps it move along a predefined path consisting of a series of segments. Each segment can be vertical, horizontal, or diagonal. Given a series of path segments defined by their start and end points, write a program that determines the total length of the path that the robot will follow. Every vertical or horizontal movement counts as 1 unit, and diagonal movements count as √2 units. Input The first line contains an integer n (1 ≤ n ≤ 300), denoting the number of segments in the path. The following n lines each contain four integers x1, y1, x2, y2 (−1000 ≤ x1, y1, x2, y2 ≤ 1000), where (x1, y1) is the starting point of the segment, and (x2, y2) is the ending point of the segment. Output Print a single floating-point number representing the total length of the path, rounded to two decimal places. Examples Input 3 0 0 0 1 0 1 1 1 1 1 2 2 Output 3.41 Input 2 1 1 4 1 4 1 4 4 Output 6.00 Note In the first example, the path consists of three segments: - From (0, 0) to (0, 1): 1 unit (vertical segment) - From (0, 1) to (1, 1): 1 unit (horizontal segment) - From (1, 1) to (2, 2): √2 units (diagonal segment) The total path length is 1 + 1 + √2 = 2 + 1.41 ≈ 3.41. In the second example, the path consists of two segments: - From (1, 1) to (4, 1): 3 units (horizontal segment) - From (4, 1) to (4, 4): 3 units (vertical segment) The total path length is 3 + 3 = 6.","solution":"import math def calculate_path_length(n, segments): total_length = 0.0 for x1, y1, x2, y2 in segments: if x1 == x2 or y1 == y2: # Horizontal or Vertical movement total_length += abs(x1 - x2) + abs(y1 - y2) else: # Diagonal movement total_length += math.sqrt(2) return round(total_length, 2)"},{"question":"You are given an integer array `arr` and an integer `k`. Your task is to find the maximum possible value of a subarray in which the maximum element minus the minimum element is at most `k`. A subarray is a contiguous part of an array. You need to output the length of the longest such subarray that satisfies the condition mentioned. Input The input contains two lines: 1. The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9) where n is the length of array `arr`. 2. The second line contains n integers, elements of `arr` (-10^9 ≤ arr[i] ≤ 10^9). Output Print the length of the longest subarray where the difference between the maximum and minimum element is at most `k`. If there is no such subarray, print 0. Examples Input 6 2 1 3 2 5 7 4 Output 3 Input 5 3 4 4 4 4 4 Output 5 Input 4 0 1 3 5 7 Output 1 Note In the first sample, the longest subarray with the difference between the maximum and minimum element at most 2 can be [1, 3, 2] which has length 3. In the second sample, each element is equal, so you can take the entire array as the subarray which has length 5. In the third sample, no two elements can form a subarray with the difference at most 0, so the maximum length of any subarray is 1.","solution":"def longest_subarray_with_k_diff(arr, k): from collections import deque min_deque = deque() max_deque = deque() left = 0 max_len = 0 for right in range(len(arr)): while min_deque and arr[min_deque[-1]] >= arr[right]: min_deque.pop() while max_deque and arr[max_deque[-1]] <= arr[right]: max_deque.pop() min_deque.append(right) max_deque.append(right) while arr[max_deque[0]] - arr[min_deque[0]] > k: left += 1 if min_deque[0] < left: min_deque.popleft() if max_deque[0] < left: max_deque.popleft() max_len = max(max_len, right - left + 1) return max_len"},{"question":"Henry is organizing a small contest and he needs to determine the participant who achieved the highest score. Participants are identified by unique IDs and each participant\'s score is recorded. If multiple participants have the highest score, the participant with the smallest ID should be chosen. Write a program that reads the list of participants along with their scores and determines the ID of the participant with the highest score. Constraints * The number of participants N is between 2 and 1000. * Each participant\'s ID is a unique integer between 1 and 10000. * Each participant\'s score is an integer between 0 and 100. Input Input is given from Standard Input in the following format: ``` N ID_1 Score_1 ID_2 Score_2 ... ID_N Score_N ``` Output Print the ID of the participant with the highest score. If there are multiple participants with the highest score, print the smallest ID among them. Examples Input ``` 5 101 85 102 89 103 92 104 92 105 78 ``` Output ``` 103 ``` Input ``` 4 201 55 202 60 203 60 204 58 ``` Output ``` 202 ```","solution":"def highest_score_participant(participants): Determines the participant with the highest score. If multiple participants have the highest score, returns the one with the smallest ID. :param participants: List of tuples (ID, score) where ID is a unique identifier and score is the participant\'s score. :return: The ID of the participant with the highest score, or the smallest ID among those with the highest score. highest_score = -1 best_id = float(\'inf\') for id, score in participants: if score > highest_score: highest_score = score best_id = id elif score == highest_score: best_id = min(best_id, id) return best_id"},{"question":"A university offers N different courses. Each course has a unique identifier from 1 to N. Some courses have prerequisites, meaning a student must have completed the prerequisite courses before enrolling in the course. Given a list of courses and their prerequisites, determine an order in which a student can complete all courses such that all prerequisites are satisfied. If there are multiple valid orders, any order is acceptable. If it is impossible to complete all courses (due to a cyclic dependency), return an empty list. Input The first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case begins with a line containing an integer N (1 ≤ N ≤ 1000) — the number of courses. The next line contains an integer P (0 ≤ P ≤ 10000) — the number of prerequisite pairs. Each of the next P lines contains two integers u and v (1 ≤ u, v ≤ N) representing a prerequisite pair u -> v, meaning course u must be completed before course v. Output For each test case, print the course order as a single line of space-separated integers. If it is impossible to complete all courses, print \\"Impossible\\". Example Input 2 4 3 1 2 2 3 3 4 3 3 1 3 2 3 3 1 Output 1 2 3 4 Impossible","solution":"from collections import defaultdict, deque def find_course_order(N, prerequisites): # Create adjacency list and in-degree counter graph = defaultdict(list) in_degree = [0] * (N + 1) for u, v in prerequisites: graph[u].append(v) in_degree[v] += 1 # Queue for courses with no prerequisites queue = deque() for course in range(1, N+1): if in_degree[course] == 0: queue.append(course) order = [] while queue: course = queue.popleft() order.append(course) for neighbor in graph[course]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == N: return order return \\"Impossible\\" def process_input(t, test_cases): results = [] for i in range(t): N = test_cases[i][0] P = test_cases[i][1] prerequisites = test_cases[i][2] order = find_course_order(N, prerequisites) if order == \\"Impossible\\": results.append(order) else: results.append(\\" \\".join(map(str, order))) return results"},{"question":"You are given a grid of size N x M filled with some characters. You are also given a list of words. Your task is to find out how many times each word appears in the grid. A word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once per word. Constraints * 1 ≦ N, M ≦ 100 * 1 ≦ The number of words ≦ 100 * 1 ≦ The length of each word ≦ 10 * The characters in the grid and the words are lowercase English letters. Input The input is given from Standard Input in the following format: N M Grid (N lines of M characters each) The number of words Words (one word each line) Output Print the number of times each word appears in the grid, one per line. Examples Input 3 4 abce sfcs adee 3 see bee sad Output 1 0 1 Input 4 5 abcde fghij klmno pqrst 2 hello world Output 0 0","solution":"def find_word_in_grid(grid, word): rows, cols = len(grid), len(grid[0]) word_len = len(word) def backtrack(r, c, index): if index == word_len: return True if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == \'#\': return False if word[index] != grid[r][c]: return False # temporarily mark the cell as visited original_char = grid[r][c] grid[r][c] = \'#\' # move to the next character in all 4 directions (up, down, left, right) found = (backtrack(r-1, c, index+1) or backtrack(r+1, c, index+1) or backtrack(r, c-1, index+1) or backtrack(r, c+1, index+1)) # revert the mark grid[r][c] = original_char return found for r in range(rows): for c in range(cols): if grid[r][c] == word[0]: # start backtracking only if the first character matches if backtrack(r, c, 0): return True return False def word_count_grid(n, m, grid, num_words, words): results = [] for word in words: count = 0 # create a copy of the grid for each word search as we may modify it temp_grid = [list(row) for row in grid] if find_word_in_grid(temp_grid, word): count += 1 results.append(count) return results"},{"question":"Two arrays of integers are given. The first array is `arrival` and the second array is `departure`, each of size `N`, representing the arrival and departure times of `N` trains at a station respectively. Your task is to find the minimum number of platforms required at the station so that no train waits. Constraints * 1 leq N leq 100,000 * 0 leq arrival[i], departure[i] leq 10^9 * arrival[i] leq departure[i] for all i Input Input is given from Standard Input in the following format: N arrival_1 departure_1 : arrival_N departure_N Output Print the minimum number of platforms required. Example Input 6 900 910 940 1200 950 1120 1100 1130 1500 1900 1800 2000 Output 3","solution":"def find_min_platforms(arrival, departure): Returns the minimum number of platforms required at a station so that no train waits. arrival: List of arrival times of trains departure: List of departure times of trains arrival.sort() departure.sort() n = len(arrival) platform_needed = 1 max_platforms = 1 i, j = 1, 0 while i < n and j < n: if arrival[i] <= departure[j]: platform_needed += 1 i += 1 if platform_needed > max_platforms: max_platforms = platform_needed else: platform_needed -= 1 j += 1 return max_platforms if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) arrival = [] departure = [] for i in range(N): arrival.append(int(data[2 * i + 1])) departure.append(int(data[2 * i + 2])) print(find_min_platforms(arrival, departure))"},{"question":"Little Avi loves numbers, and his favorite pastime is playing with sequences. One day, he discovered an interesting property of some sequences, which he calls \\"Special Sequences\\". A sequence is called a Special Sequence if it satisfies the following condition: - The sequence contains `N` positive integers `(a1, a2, ..., aN)`. - All elements of the sequence must be distinct. - Exactly one element in the sequence must be a power of 2. Given `N`, your task is to determine the number of distinct Special Sequences that can be formed. Input: - The first line contains `T`, the number of test cases. - Each of the next `T` lines contains an integer `N`. Output: For each test case, print the number of distinct Special Sequences that can be formed. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 20 Note: Two sequences are considered distinct if they contain at least one different element, regardless of order. SAMPLE INPUT 2 2 3 SAMPLE OUTPUT 2 12 Explanation: For the first test case, `N = 2`, the possible distinct sequences are (1, 2) and (2, 1) because one of the numbers must be a power of 2. For the second test case, `N = 3`, any sequence of distinct positive integers containing exactly one power of 2 qualifies. So, the number of such distinct sequences is 3! times the number of ways to choose one power of 2 among three distinct elements.","solution":"from math import factorial def count_special_sequences(N): Returns the number of distinct Special Sequences that can be formed for a given N. # For N elements, (N - 1) elements can be chosen in N! ways # One element must be a power of 2, so we have N choices for that # For each way we choose the power of 2, the remaining (N - 1) elements must be distinct positives numbers # Number of permutations of N digits num_permutations = factorial(N) return num_permutations def special_sequences(test_cases): results = [] for case in test_cases: results.append(count_special_sequences(case)) return results # Read the input def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [int(data[i]) for i in range(1, T + 1)] results = special_sequences(test_cases) for result in results: print(result)"},{"question":"John is a software engineer who is passionate about puzzles. One day, he comes upon a unique puzzle described as follows: Given an `N x N` grid, each cell of the grid is initially `0`. John can perform the following operation any number of times: he can choose any cell (i, j) of the grid and set it to `1`. However, this operation will also toggle the state (from `0` to `1` or from `1` to `0`) of all cells in the same row and column as (i, j). Your task is to help John determine if it is possible to achieve a grid where exactly every cell is `1` after performing the above operation any number of times. Input The first line contains an integer `T`, the number of test cases. Each of the next `T` lines contains a single integer `N`, the size of the grid. Output For each test case, print \\"YES\\" if John can make all cells `1`, otherwise print \\"NO\\". Example Input 3 2 3 4 Output NO YES NO Explanation In the first test case, it is impossible to get all cells to `1` because the toggle operations on a 2x2 grid will always leave us with a configuration where one cell is different from the others. In the second test case, one possible series of operations or their absence can achieve the desired result. In the third test case, attempting to toggle any cell will not result in all cells being `1` due to even number grid constraints. Constraints 1 <= T <= 10 1 <= N <= 10^6","solution":"def can_make_all_ones(T, cases): Determines if it is possible to make all cells 1 in an NxN grid by toggling the states of the cells as per the given rules. Parameters: - T: Number of test cases - cases: List of integers representing the size of the grid for each test case Returns: - List of strings \\"YES\\" or \\"NO\\" for each test case results = [] for N in cases: # Determining if all cells can be turned to 1 if N % 2 == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"To have a fair marathon, the organizers want to divide the runners into two groups, such that the sum of the running speeds in both groups is as close as possible. Each runner has a distinct speed given by an integer. You are to write a program that decides whether it is possible to split the runners into two groups whose speed sums differ by at most 1. Input - The first line contains one integer n (1 ≤ n ≤ 100), the number of runners. - The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 1000), representing the speeds of the runners. Output - If it is possible to divide the runners into two groups with the required property, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 4 3 1 4 2 Output YES Input 3 7 11 5 Output NO","solution":"def can_divide_runners(n, speeds): Determines if it\'s possible to divide the runners into two groups such that the sum of the running speeds in both groups is as close as possible. Parameters: n (int): The number of runners. speeds (list of int): List of speeds of the runners. Returns: str: \\"YES\\" if possible to divide the runners as required, otherwise \\"NO\\". total_sum = sum(speeds) # If it\'s possible to split into two parts with the absolute difference at most 1 # the total sum must be even, because odd sums cannot be split into two equal integers if total_sum % 2 != 0: return \\"NO\\" # Using dynamic programming to check if we can split into two equal or almost equal parts target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for speed in speeds: for j in range(target, speed - 1, -1): if dp[j - speed]: dp[j] = True return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"Alice loves collecting sequences of numbers and performing various operations on them. She has recently been fascinated by finding the maximum sum of a contiguous subsequence. However, instead of using the usual approach of simply summing the numbers, she wants to use a special function defined as the bitwise AND operation. Given an array of positive integers, Alice wants to find the maximum value obtainable by performing the bitwise AND operation on any contiguous subsequence of the array. Can you help Alice find this maximum value? The bitwise AND operation between two numbers a and b is denoted as `a & b` and results in a number where each bit is 1 if and only if the corresponding bits of both `a` and `b` are 1. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), the elements of the array. Output Output a single integer, the maximum value obtained by performing the bitwise AND on any contiguous subsequence of the array. Example Input 6 5 3 8 6 2 7 Output 7 Note In the first sample: The maximum value is obtained by considering the single element subsequence {7}.","solution":"def max_bitwise_and_subsequence(arr): Returns the maximum value obtainable by performing the bitwise AND operation on any contiguous subsequence of the array. max_value = 0 for number in arr: max_value = max(max_value, number) return max_value"},{"question":"Given a binary tree rooted at node `root`, you need to find the maximum sum you can obtain by taking the sum of the values of any non-empty subtree of this binary tree. The subtree has its root at node `x` and contains all descendants of `x`. You are given the following class definition for the binary tree nodes: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Write a function `maxSubtreeSum` that takes the `root` of the binary tree and returns an integer, the maximum sum of any subtree in the binary tree. # Example ```python # Example 1 root1 = TreeNode(1, TreeNode(2), TreeNode(3)) result1 = maxSubtreeSum(root1) # Expected: 6 (because the tree itself has the maximum sum) # Example 2 root2 = TreeNode(-3, TreeNode(9), TreeNode(-10, TreeNode(5), TreeNode(0))) result2 = maxSubtreeSum(root2) # Expected: 9 (the maximum sum comes from the subtree with the single node 9) # Example 3 root3 = TreeNode(0) result3 = maxSubtreeSum(root3) # Expected: 0 (the tree itself has the maximum sum which is 0) ``` # Input - The function `maxSubtreeSum` takes a single argument: - `root`: the root node of the binary tree, which is guaranteed to be a `TreeNode` object with integer values for each node. # Constraints - The number of nodes in the tree is in the range `[1, 10^5]`. - `-10^4 <= Node.val <= 10^4`. - The given binary tree could contain negative values. # Output - Return a single integer value that is the maximum sum of any subtree in the binary tree. # Function Signature ```python def maxSubtreeSum(root: TreeNode) -> int: # your code here ``` # Notes - A subtree of a tree T is any tree consisting of a node in T and all of its descendants. - Ensure your solution is optimized for large input sizes, maintaining a linear computational complexity of O(n).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxSubtreeSum(root: TreeNode) -> int: def helper(node): nonlocal max_sum if not node: return 0 left_sum = helper(node.left) right_sum = helper(node.right) subtree_sum = node.val + left_sum + right_sum max_sum = max(max_sum, subtree_sum) return subtree_sum max_sum = float(\'-inf\') helper(root) return max_sum"},{"question":"You are given an array of integers. One integer from the array occurs odd number of times while all others occur even number of times. Find the integer which occurs odd number of times. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. Output Output the integer that occurs odd number of times. Example Input 5 1 2 3 2 3 Output 1 Input 7 4 4 4 5 5 5 5 Output 4","solution":"def find_odd_occurrence(arr): Returns the integer that occurs odd number of times in the array. result = 0 for number in arr: result ^= number return result def find_odd_occurrence_from_input(input_str): Processes the input string and returns the integer that occurs odd number of times. lines = input_str.strip().split(\\"n\\") n = int(lines[0].strip()) arr = list(map(int, lines[1].strip().split())) return find_odd_occurrence(arr)"},{"question":"Maximum Subarray XOR Given an array of integers, your task is to find the maximum XOR value of any subarray within the array. A subarray is a contiguous part of an array, and XOR is a bitwise XOR operation. The XOR of a subarray is defined as the XOR of all the elements in the subarray. For example, for the array [1, 2, 3], the XOR of the subarray [2, 3] is equal to 2 ^ 3 = 1. You are required to find the maximum XOR value that can be obtained by XORing all the elements of any subarray of the given array. Input The input consists of a single test case: - The first line contains an integer N (1 ≤ N ≤ 10^5), the length of the array. - The second line contains N integers A_1, A_2, ..., A_N (0 ≤ A_i ≤ 10^9), the elements of the array. Output Output a single integer representing the maximum XOR value of any subarray within the array. Sample Input 1 5 8 1 2 12 7 Sample Output 1 15 Explanation The subarray [1, 2, 12] has the maximum XOR value of 15 (1 ^ 2 ^ 12 = 15). Sample Input 2 3 4 6 7 Sample Output 2 7 Explanation The subarray [7] has the maximum XOR value of 7, which is the element itself. Sample Input 3 4 6 8 1 3 Sample Output 3 15 Explanation The subarray [6, 8, 1] has the maximum XOR value of 15 (6 ^ 8 ^ 1 = 15). Note A brute force solution that checks all possible subarrays would be too slow for the given constraints. A more efficient algorithm is required to solve this problem within a reasonable time frame.","solution":"def find_maximum_subarray_xor(arr): Function to find the maximum XOR value of any subarray within the given array. # Initialize the result for maximum xor subarray max_xor = 0 # Initialize prefix xor to 0 prefix_xor = 0 # Initialize a set to store prefix xor values prefix_set = set() # Insert 0 into the set as prefix xor could initially be 0 for any subarray prefix_set.add(0) for num in arr: # Update prefix xor for the current number prefix_xor ^= num # Check for the maximum xor value for p in prefix_set: max_xor = max(max_xor, prefix_xor ^ p) # Add current prefix xor to the set prefix_set.add(prefix_xor) return max_xor"},{"question":"You are managing the inventory system of a small online bookstore. Each book is identified by its unique ISBN number. The bookstore wants to automate the task of assigning books to different genres based on specific keywords found in their titles. Write a program that categorizes books into genres based on the presence of specific keywords in their titles. Each keyword may map to a specific genre, and a title might contain multiple keywords associating it with more than one genre. Input - The first line contains an integer N (1 ≤ N ≤ 100), the number of books. - The next N lines each contain the ISBN number and the title of a book. - The next line contains an integer M (1 ≤ M ≤ 10), the number of genres. - The next M lines each contain a genre followed by its associated keyword, separated by a space. The books\' titles and keywords consist of letters and spaces only, and all titles and keywords are in lowercase. The ISBN numbers are unique ten-digit integers. Output For each book, output its ISBN number followed by the list of genres it belongs to, in the order they appear in the input. If a book does not belong to any genre, output \\"none\\" for that book. Examples Input 3 1234567890 the great gatsby 2345678901 harry potter and the sorcerer stone 3456789012 to kill a mockingbird 2 classic great fantasy potter Output 1234567890 classic 2345678901 fantasy 3456789012 none","solution":"def categorize_books(num_books, books, num_genres, genres): genre_dict = {} for genre in genres: genre_name, keyword = genre.split() genre_dict[keyword] = genre_name results = [] for isbn, title in books: book_genres = [] for keyword, genre in genre_dict.items(): if keyword in title: book_genres.append(genre) if book_genres: results.append(f\\"{isbn} {\' \'.join(book_genres)}\\") else: results.append(f\\"{isbn} none\\") return results"},{"question":"You are given a list of N integers representing the heights of N mountains. Your task is to determine the highest peak from the list of mountains and the second highest peak. Return these two values in a list where the first element is the highest peak and the second element is the second highest peak. If there are less than 2 unique mountains in the list, return the highest peak twice. Constraints * N is an integer. * 1 <= N <= 1000 * Each mountain height is a positive integer and not greater than 10^6. Input - An integer N representing the number of mountains. - A list of N integers representing the heights of the mountains. Output - A list with two integers: the highest peak and the second highest peak. Examples Input 5 [8848, 4500, 8848, 5990, 6000] Output [8848, 6000] Input 3 [1000, 1000, 1000] Output [1000, 1000] Input 1 [9000] Output [9000, 9000] Input 6 [1200, 3400, 2600, 2800, 3400, 3000] Output [3400, 3000]","solution":"def find_two_highest_peaks(N, heights): Returns a list containing the highest peak and the second highest peak. If less than 2 unique heights exist, the highest peak is returned twice. unique_heights = list(set(heights)) unique_heights.sort(reverse=True) if len(unique_heights) < 2: return [unique_heights[0], unique_heights[0]] else: return [unique_heights[0], unique_heights[1]]"},{"question":"You are given a string which contains only lowercase letters of the Latin alphabet. The string may have some characters that are repeated consecutively. Your task is to compress the string such that each group of consecutive same characters \'c\' of length \'l\' is replaced by the character \'c\' followed by the number of consecutive repetitions \'l\' if \'l\' is greater than 1. For example, the string \\"aaabbc\\" would be compressed to \\"a3b2c\\". If the resulting compressed string is longer than the original string, you should return the original string. Otherwise, return the compressed string. Input The input consists of a single string s, (1 ≤ |s| ≤ 105) which contains only lowercase letters of the Latin alphabet. Output Print the compressed version of the string if it is shorter than the original one, otherwise print the original string. Examples Input aaabbc Output a3b2c Input abcd Output abcd Input aabbccddeeff Output aabbccddeeff","solution":"def compress_string(s): compressed = [] i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 compressed.append(s[i]) if count > 1: compressed.append(str(count)) i += 1 compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"You are given a 2D grid consisting of rows and columns. Each cell in the grid initially contains one of three possible characters: \'.\', \'S\', or \'#\'. The character \'.\' represents an empty cell, \'S\' represents the starting position of a robot, and \'#\' represents an obstacle that the robot cannot move through. The robot can move in one of four possible directions (up, down, left, or right) to an adjacent cell, provided that the cell is within the grid boundaries and is not an obstacle. The robot needs to navigate from its starting position \'S\' to the bottom-right corner of the grid, i.e., the cell at position (rows-1, columns-1), which will always be an empty cell. Write a function to determine the minimum number of moves required for the robot to reach the bottom-right corner of the grid. If it is not possible for the robot to reach the bottom-right corner, return -1. Input - The first line contains two integers, `rows` and `columns` (1 ≤ rows, columns ≤ 1000) – the number of rows and columns in the grid. - The next `rows` lines each contain a string of length `columns`, representing the grid. Output - Output a single integer – the minimum number of moves required for the robot to reach the bottom-right corner. If it is not possible, return -1. Examples Input 5 5 S.... ..... #.. ...#. ..... Output 8 Input 3 4 S..# .#.. .... Output 5 Input 3 3 S . .#. Output -1","solution":"from collections import deque def min_moves_to_reach_bottom_right(rows, columns, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] start_pos = (0, 0) end_pos = (rows - 1, columns - 1) # Find the starting position for r in range(rows): for c in range(columns): if grid[r][c] == \'S\': start_pos = (r, c) break # BFS initialization queue = deque([(start_pos, 0)]) # (position, distance) visited = set() visited.add(start_pos) while queue: (current_r, current_c), distance = queue.popleft() # Check if we\'ve reached the bottom-right corner if (current_r, current_c) == end_pos: return distance # Explore the four possible directions for dr, dc in directions: new_r, new_c = current_r + dr, current_c + dc # Check if the new position is within bounds and not an obstacle or previously visited if 0 <= new_r < rows and 0 <= new_c < columns and grid[new_r][new_c] != \'#\' and (new_r, new_c) not in visited: visited.add((new_r, new_c)) queue.append(((new_r, new_c), distance + 1)) # If we exhaust the queue and do not find the end position, return -1 return -1"},{"question":"Given a string s consisting of lowercase alphabets and an integer k, you are required to form the lexicographically smallest string possible by choosing exactly k characters from s and rearranging them in any order. Input: The first line contains the string s (1 ≤ |s| ≤ 100) consisting of only lowercase English letters. The second line contains the integer k (1 ≤ k ≤ |s|). Output: A single line containing the lexicographically smallest string formed by choosing exactly k characters from s and rearranging them in any order. Examples: Input: dcab 3 Output: abc Input: zxy 2 Output: xy","solution":"def smallest_lexicographical_string(s, k): Returns the lexicographically smallest string formed by choosing exactly k characters from the given string s and rearranging them in any order. # Sort the characters of the string to get them in lexicographical order sorted_characters = sorted(s) # Take the first k characters result = sorted_characters[:k] # Join them to form a string return \'\'.join(result)"},{"question":"You are given an array of integers where every element appears twice except for one. Your task is to find that single one. Input The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of integers in the array. The second line contains n space-separated integers ai (1 ≤ ai ≤ 100). Output Output the single integer that does not appear twice in the array. Examples Input 5 4 1 2 1 2 Output 4 Input 3 2 2 3 Output 3","solution":"def single_number(nums): Returns the single integer that does not appear twice in the array. result = 0 for num in nums: result ^= num return result"},{"question":"You are given a two-dimensional grid that follows the rules of Conway\'s Game of Life. The grid is represented by an M x N matrix where each cell contains either 0 (dead) or 1 (alive). The evolution of the grid follows these rules: 1. Any live cell with fewer than two live neighbors dies (underpopulation). 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies (overcrowding). 4. Any dead cell with exactly three live neighbors becomes a live cell (reproduction). Write a function `game_of_life(board: List[List[int]]) -> None` that computes the next state of the board in-place (the transition must be done within the original matrix and without using extra space for another matrix). The function should handle updates in such a way that the state changes simultaneously for all cells in the grid. Constraints * 1 leq M, N leq 100 * board[i][j] is either 0 or 1. Input * An M x N integer matrix `board` representing the current state of the grid. Output * The function should modify the input matrix `board` directly to represent the next state of the grid. Example Input [ [0,1,0], [0,0,1], [1,1,1], [0,0,0] ] Output [ [0,0,0], [1,0,1], [0,1,1], [0,1,0] ] Explanation - The first cell (0,0) has 1 live neighbor, so it stays dead. - The cell (0,1) has 1 live neighbor, so it dies. - The cell (0,2) has 2 live neighbors, so it stays dead. - The cell (1,0) has 3 live neighbors, so it comes to life. - The cell (1,1) has 4 neighbors, so it dies. - The cell (1,2) has 3 neighbors, so it stays alive. - The cell (2,0) has 3 live neighbors, so it stays alive. - The cell (2,1) has 3 live neighbors, so it stays alive. - The cell (2,2) has 2 neighbors, so it stays alive. - And so on for the rest of the cells.","solution":"from typing import List def game_of_life(board: List[List[int]]) -> None: Modifies the input \'board\' in-place to represent the next state of Conway\'s Game of Life. rows, cols = len(board), len(board[0]) # Function to count live neighbors for a given cell def count_live_neighbors(r, c): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and abs(board[nr][nc]) == 1: count += 1 return count # Apply the rules of the game for r in range(rows): for c in range(cols): live_neighbors = count_live_neighbors(r, c) if board[r][c] == 1: if live_neighbors < 2 or live_neighbors > 3: board[r][c] = -1 # Mark as dead but was originally alive else: if live_neighbors == 3: board[r][c] = 2 # Mark as alive but was originally dead # Finalize board state changes for r in range(rows): for c in range(cols): if board[r][c] > 0: board[r][c] = 1 # New live cell else: board[r][c] = 0 # New dead cell"},{"question":"Alice is organizing a coding tournament with a unique scoring system. Each participant gets a starting score of 0. Throughout the tournament, they can gain or lose scores based on their performance. Alice has designed a set of operations to update the scores for each participant. She maintains a log of the operations in the order they were performed. Each operation is either an addition or a subtraction of a certain number to/from the current score of a particular participant. Alice wants to know the final score of each participant after all the operations are applied. She asks you to help her with this task. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of participants. The second line contains an integer m (1 ≤ m ≤ 100) — the number of operations. Each of the following m lines contains one operation in the form \\"p t v\\", where: - p (1 ≤ p ≤ n) is the participant\'s number, - t is a character, either \'+\' for addition or \'-\' for subtraction, - v (1 ≤ v ≤ 1000) is the value to be added or subtracted. Output Output n integers — the final scores of the participants in the order from participant 1 to participant n. Examples Input 3 5 1 + 10 2 + 5 3 - 7 1 + 3 2 - 2 Output 13 3 -7 Input 2 3 1 + 100 2 - 50 2 + 20 Output 100 -30","solution":"def calculate_final_scores(n, m, operations): # Initialize an array to store the scores, starting with defaults of 0 scores = [0] * n # Process each operation for operation in operations: p, t, v = operation p = int(p) - 1 # Convert to zero-based index v = int(v) if t == \'+\': scores[p] += v elif t == \'-\': scores[p] -= v return scores # Example usage: # n = 3 # m = 5 # operations = [ # (1, \'+\', 10), # (2, \'+\', 5), # (3, \'-\', 7), # (1, \'+\', 3), # (2, \'-\', 2) # ] # print(calculate_final_scores(n, m, operations)) # Output: [13, 3, -7]"},{"question":"Given a list of positive integers `arr`, your task is to find the maximum difference between any two elements such that the larger element appears after the smaller element. If no such pair exists, return -1. **Input** - The input consists of a single line containing space-separated integers which represent the elements of the array `arr`. **Output** - Output a single integer which is the maximum difference between any two elements such that the larger one comes after the smaller one, or -1 if no such pair exists. **Constraints** - 2 ≤ length of `arr` ≤ 10^5 - 1 ≤ arr[i] ≤ 10^9 **Example** Input ``` 1 2 6 4 5 3 ``` Output ``` 5 ``` Explanation - The maximum difference is 6 - 1 = 5. Input ``` 10 8 7 6 ``` Output ``` -1 ``` Explanation - There is no pair where a larger number appears after a smaller number.","solution":"def max_difference(arr): Finds the maximum difference between any two elements such that the larger element appears after the smaller element in the list. :param arr: List of integers :return: Maximum difference or -1 if no such pair exists if len(arr) < 2: return -1 min_element = arr[0] max_diff = -1 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Sarah loves puzzles and math. She came across an interesting problem related to numbers and decided to create a puzzle out of it for her friends. The puzzle is as follows: Given a number N, find the number of trailing zeros in N!. A trailing zero is created with the multiples of 10 in the factorial, which in turn are created with pairs of 2 and 5. Since there are always more multiples of 2 than 5, the number of trailing zeros is determined by the number of 5s. Write a program to calculate the number of trailing zeros in the factorial of a given number. # Input The first line contains an integer T, the number of test cases. The subsequent T lines each contain an integer N. # Output For each test case, output the number of trailing zeros in the factorial of the given number in a new line. # Constraints 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^9 # Sample Input 3 5 10 50 # Sample Output 1 2 12 # Explanation - For N = 5, 5! = 120 has 1 trailing zero. - For N = 10, 10! = 3628800 has 2 trailing zeros. - For N = 50, 50! = a large number but has 12 trailing zeros. The number of trailing zeros is calculated by counting the number of multiples of 5, 25, 125, and so on. This is because each multiple of 5 contributes at least one 5 to the factorial\'s prime factorization, multiples of 25 contribute an extra 5, multiples of 125 contribute yet another extra 5, and so on.","solution":"def trailing_zeros_in_factorial(N): Returns the number of trailing zeros in the factorial of the given number N. count = 0 power_of_5 = 5 while N >= power_of_5: count += N // power_of_5 power_of_5 *= 5 return count def process_input(input_list): Processes a list of input values and returns the results as a list. T = input_list[0] results = [] for i in range(1, T + 1): N = input_list[i] results.append(trailing_zeros_in_factorial(N)) return results"},{"question":"In a small village, there is a peculiar tradition involving a special type of tree called the \\"Symmetrical Tree\\". A Symmetrical Tree is a binary tree that is a mirror reflection of itself about the center. You are given the root node of a binary tree and asked to determine if the tree is a Symmetrical Tree or not. A binary tree is defined as follows: - Each node contains an integer value and has at most two children referred to as the left child and the right child. - A Symmetrical Tree must meet the condition that for every node in the tree, its left subtree is a mirror reflection of its right subtree. Write a function `isSymmetrical(root)` that receives a binary tree and returns `True` if the tree is symmetrical, and `False` otherwise. # Input The function receives the root node of a binary tree. Each node is an instance of the TreeNode class: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` # Output The function should return a boolean value `True` if the tree is a Symmetrical Tree, and `False` otherwise. # Example Input ```python root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(2) root.left.left = TreeNode(3) root.left.right = TreeNode(4) root.right.left = TreeNode(4) root.right.right = TreeNode(3) print(isSymmetrical(root)) ``` Output ```python True ``` Explanation The given binary tree is a Symmetrical Tree as its left subtree is a mirror reflection of its right subtree.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def isSymmetrical(root): Returns True if the given binary tree is a Symmetrical Tree, else returns False. def isMirror(t1, t2): if t1 is None and t2 is None: return True if t1 is None or t2 is None: return False return (t1.val == t2.val) and isMirror(t1.right, t2.left) and isMirror(t1.left, t2.right) return isMirror(root, root)"},{"question":"A bakery maintains a list of orders for different types of pastries. Each order contains the type of pastry and the quantity ordered. The bakery wants to find out which type of pastry has the largest order and the smallest order. If there are multiple types with the same largest or smallest quantity, they should return the lexicographically smallest type. Write a program that will, for each test case, output the types of pastries with the largest and smallest orders. Input The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of orders. Each of the next N lines contains a string P denoting the pastry type and an integer Q denoting the quantity of that type ordered, separated by a single space. Output For each test case, output two lines: - The first line should contain the type of pastry with the smallest order. - The second line should contain the type of pastry with the largest order. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ Q ≤ 1000 1 ≤ P.length ≤ 20 SAMPLE INPUT 2 3 croissant 50 donut 80 bagel 50 2 muffin 100 cake 100 SAMPLE OUTPUT bagel donut cake cake","solution":"def find_extreme_orders(test_cases): This function determines the pastry type with the smallest and largest order for each test case. If there are multiple types with the same largest or smallest quantity, it returns the lexicographically smallest type. Args: test_cases: List[List[Tuple[str, int]]] Returns: List[Tuple[str, str]] results = [] for orders in test_cases: # Sort by quantity first; if quantities are the same, sort lexicographically by pastry type sorted_orders = sorted(orders, key=lambda x: (x[1], x[0])) # Minimum order min_order = sorted_orders[0][0] # Sort by quantity descending first; if quantities are the same, sort lexicographically by pastry type sorted_orders_desc = sorted(orders, key=lambda x: (-x[1], x[0])) # Maximum order max_order = sorted_orders_desc[0][0] results.append((min_order, max_order)) return results # Parsing input def parse_input(input_str): lines = input_str.strip().split(\'n\') current_line = 0 T = int(lines[current_line]) current_line += 1 test_cases = [] for _ in range(T): N = int(lines[current_line]) current_line += 1 case_orders = [] for _ in range(N): P, Q = lines[current_line].split() Q = int(Q) case_orders.append((P, Q)) current_line += 1 test_cases.append(case_orders) return test_cases # Main function to handle the entire process def process_input(input_str): test_cases = parse_input(input_str) results = find_extreme_orders(test_cases) # Join results appropriately output = [] for result in results: output.append(result[0]) output.append(result[1]) return \'n\'.join(output)"},{"question":"Bob is a collector of exotic fruits, and he often organizes his collection in different ways. Bob has exactly N fruits, clearly numbered from 1 to N. Each fruit has a unique flavor value assigned to it, which can be positive or negative. Bob wants to find the subarray with the maximum possible flavor value. A subarray is any contiguous part of Bob\'s array of fruits. Given the flavor values of all N fruits, can you help Bob determine the maximum sum of any subarray in his collection? Input: The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of fruits. The next line contains N integers representing the flavor values of the fruits. Output: For each test case, output the maximum flavor value of any subarray. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^4 ≤ flavor value ≤ 10^4 Example: Input: 3 5 1 -2 3 4 -1 3 1 -1 2 4 -1 -2 -3 -4 Output: 7 2 -1 Explanation: In the first test case, the subarray with the maximum sum is [3, 4], which has a sum of 3 + 4 = 7. In the second test case, the subarray with the maximum sum is [2], which has a sum of 2. In the third test case, the subarray with the maximum sum is [-1], which has a sum of -1.","solution":"def max_subarray_sum(T, test_cases): def kadane(arr): max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global results = [] for i in range(T): N = test_cases[i][0] flavors = test_cases[i][1] results.append(kadane(flavors)) return results"},{"question":"The kingdom of Bytetown is facing an invasion by the Giant Octopuses. To save the day, the king has summoned his best programmers to devise a defensive strategy. The primary defense mechanism involves activating magical shields placed at various points in the city. Each shield gets activated by a unique code, which is the sum of a specific subset of shields\' activation codes. Given an array of integers representing the activation codes of the shields, you need to determine how many distinct subsets of this array sum up to a given value K. Input: The first line contains two integers N and K, where N is the number of shields and K is the required sum. The second line contains N space-separated integers representing the activation codes of the shields. Output: Output a single integer — the number of distinct subsets that sum up to the given value K. Constraints: 1 ≤ N ≤ 100. 1 ≤ K ≤ 1000. 1 ≤ ai ≤ 1000 where i=1, 2, 3 ... N. SAMPLE INPUT 4 10 2 3 7 1 SAMPLE OUTPUT 2 Explanation: The subsets that sum up to 10 are [3, 7] and [2, 3, 1, 4].","solution":"def count_subsets_with_sum_k(arr, k): from functools import lru_cache @lru_cache(None) def count_subsets(index, current_sum): if current_sum == k: return 1 if index >= len(arr) or current_sum > k: return 0 # Include the current element in the subset include = count_subsets(index + 1, current_sum + arr[index]) # Exclude the current element from the subset exclude = count_subsets(index + 1, current_sum) return include + exclude return count_subsets(0, 0) # Sample usage: # N, K = map(int, input().split()) # activation_codes = list(map(int, input().split())) # print(count_subsets_with_sum_k(activation_codes, K))"},{"question":"Problem You are given a tree with N nodes, numbered from 0 to N-1. The tree is rooted at node 0. Each node has a value assigned to it. Your task is to find the length of the longest path in the tree where the values of the nodes on the path form a non-decreasing sequence. Constraints The input satisfies the following conditions: - 1 leq N leq 100000 - The values assigned to the nodes are integers in the range [-10^9, 10^9]. - The input is given as an array of integers representing the values of the nodes in order, followed by N-1 edges describing the tree structure. Input The input is given in the following format: N V_0 V_1 ldots V_{N-1} U_1 V_1 U_2 V_2 ldots U_{N-1} V_{N-1} Output Output the length of the longest path in the tree where the node values form a non-decreasing sequence. Examples Input 5 1 2 2 1 3 0 1 0 2 1 3 1 4 Output 3 Input 6 5 4 3 5 6 1 0 1 0 2 1 3 1 4 2 5 Output 2","solution":"from collections import defaultdict, deque def longest_non_decreasing_path(n, values, edges): # Build adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) longest_path = [0] * n def dfs(node, parent): max_length = 1 for neighbor in tree[node]: if neighbor == parent: continue dfs(neighbor, node) if values[neighbor] >= values[node]: max_length = max(max_length, longest_path[neighbor] + 1) longest_path[node] = max_length dfs(0, -1) return max(longest_path) def process_input(input_data): lines = input_data.split(\\"n\\") n = int(lines[0].strip()) values = list(map(int, lines[1].strip().split())) edges = [] for i in range(n - 1): u, v = map(int, lines[i + 2].strip().split()) edges.append((u, v)) return n, values, edges"},{"question":"You have a collection of n magic potions, each having a certain power level. You can combine exactly two potions to create a new potion with a power level equal to the sum of the power levels of the two combined potions. However, combining potions comes with a cost equal to the power level of the new potion created. Your objective is to minimize the total cost required to combine all the potions into one single potion. For example, if you have three potions with power levels 4, 3, and 2, you can combine the potions with power levels 2 and 3 to make a new potion of level 5 at a cost of 5. Then you can combine the resulting potion of level 5 with the potion of level 4 to make a new potion of level 9 at a cost of 9. The total cost is 5 + 9 = 14. You need to determine the minimum total cost to combine all the potions into one. Input The first line contains an integer n (2 ≤ n ≤ 10^4) — the number of potions. The second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10^5) — the power levels of the potions. Output Print one integer — the minimum total cost to combine all the potions into one. Examples Input 3 4 3 2 Output 14 Input 4 1 2 3 4 Output 19 Input 5 10 20 30 40 50 Output 330","solution":"import heapq def min_total_combination_cost(n, power_levels): Returns the minimum total cost required to combine all potions into one. Args: n (int): the number of potions. power_levels (list of int): the power levels of the potions. Returns: int: the minimum total cost. # Use a min-heap to combine the smallest power levels first heapq.heapify(power_levels) total_cost = 0 while len(power_levels) > 1: # Extract the two smallest elements first = heapq.heappop(power_levels) second = heapq.heappop(power_levels) # Combine them and calculate the cost new_potion = first + second total_cost += new_potion # Push the new potion back into the heap heapq.heappush(power_levels, new_potion) return total_cost"},{"question":"You are designing an interface for a video streaming service. One of the features is a search query that allows users to find videos based on the title. Since the platform has millions of videos, it aims to boost performance by incorporating a predictive text feature that auto-suggests titles as the user types each character. You are tasked with implementing a function that suggests video titles from a pre-given list based on each character the user types. The suggestions should only return up to 5 most relevant video titles that match the current query as the user types it. The suggestions should be case-insensitive, and they should return the titles in the lexicographical order. # Function Signature ```python def suggest_titles(titles: List[str], query: str) -> List[str]: pass ``` # Inputs - `titles`: A list of strings where each string represents a video title. - `query`: A string which represents the user\'s query. # Outputs - A list of up to 5 suggested video titles that match the query in lexicographical order. # Example ```python # Example titles list titles = [ \\"The Lion King\\", \\"The Shawshank Redemption\\", \\"The Godfather\\", \\"The Dark Knight\\", \\"Pulp Fiction\\", \\"The Lord of the Rings\\", \\"Forrest Gump\\", \\"Star Wars\\", \\"Inception\\", \\"Goodfellas\\" ] # Query input query = \\"the\\" # The function should return: suggest_titles(titles, query) # Output: [\'The Dark Knight\', \'The Godfather\', \'The Lion King\', # \'The Lord of the Rings\', \'The Shawshank Redemption\'] ``` # Constraints - The `titles` list will contain at most 10,000 video titles. - Each video title in the list will have at most 100 characters. - The user\'s query will have at most 50 characters. # Notes - Ensure that the function\'s execution time is kept reasonable for large inputs. - Take into account case insensitivity when matching and sorting titles.","solution":"from typing import List def suggest_titles(titles: List[str], query: str) -> List[str]: # Convert the query to lowercase to handle case-insensitivity query_lower = query.lower() # Generate a list of titles that match the query (case-insensitive) matching_titles = [title for title in titles if title.lower().startswith(query_lower)] # Sort the matching titles lexicographically (case-insensitive) matching_titles.sort(key=lambda title: title.lower()) # Return up to the first 5 matching titles return matching_titles[:5]"},{"question":"The Intergalactic Programming Federation (IPF) is planning a new tournament called the \\"Milky Way Code Challenge.\\" A team can participate in multiple competition rounds, and the winners of each round are those who solve the problems the fastest. Each competition round consists of a set number of problems to be solved within a given time limit. To ensure fairness, the IPF wants to balance the total time taken by all teams over all rounds. Specifically, they want the maximum time any team spends in all rounds to be minimized. To achieve this, the IPF is considering whether to adjust the duration of each round. Given the number of problems in each round and the time alloted per problem, help them determine the minimum possible maximum time that any team would spend. Input - The first line contains an integer r (1 ≤ r ≤ 100) — the number of rounds. - The second line contains r integers p1, p2, ..., pr (1 ≤ pi ≤ 100) — the number of problems in each round. - The third line contains an integer t (1 ≤ t ≤ 100) — the maximum time in minutes allowed per problem. Output - Print a single integer — the minimum possible maximum time that any team would spend across all rounds if the IPF adjusts the duration of each round optimally. Examples Input 3 4 2 3 5 Output 45 Input 2 6 8 10 Output 80","solution":"def min_max_time_spent(r, problems_per_round, time_per_problem): Calculates the minimum possible maximum time that any team would spend across all rounds if the IPF adjusts the duration of each round optimally. Parameters: - r: int, number of rounds - problems_per_round: list of int, the number of problems in each round - time_per_problem: int, the maximum time in minutes allowed per problem Returns: - int, the minimum possible maximum time that any team would spend # Calculate the total time per round total_times = [p * time_per_problem for p in problems_per_round] # The maximum time spent is the round which takes the longest time max_time_spent = max(total_times) return max_time_spent"},{"question":"An explorative forest game has you moving through a grid to collect treasures, but each step you take influences your energy. You need to help the player determine the maximum amount of treasure they can collect before their energy runs out. The player starts at the top-left corner of the grid and can move right or down only. Each cell in the grid either has a treasure or consumes energy. Moving into a cell with treasure increases the total treasure collected by the player, while moving into a cell that consumes energy decreases the player’s energy. The game ends if the player\'s energy falls below zero and they can no longer move. Given the grid, with its rows and columns, the values in each cell represent either the number of treasures or the energy cost (negative values). The starting energy level is provided, and you need to write a program to determine the maximum amount of treasure that can be collected before the player runs out of energy. Input The first line contains three integers n, m, and E (1 ≤ n, m ≤ 500, 1 ≤ E ≤ 10^4) — the number of rows, columns, and the initial energy level. The next n lines describe the grid. Each of these lines contains m integers where the j-th integer represents one cell\'s value: a positive integer t denotes a treasure worth t units, and a negative integer e denotes an energy cost of e units. Output Print a single integer — the maximum amount of treasure the player can collect without the energy dropping below zero. Example Input 3 3 5 1 -2 1 -3 4 -2 5 -5 1 Output 6 Explanation Start at (0,0) with an initial energy of 5. Move right to (0,1), energy now is 5 - 2 = 3, total treasures = 1. Move right to (0,2), energy remains 3, total treasures = 1 + 1 = 2. Move down to (1,2), energy now is 3 - 2 = 1, total treasures remain 2. Move down to (2,2), energy remains 1, total treasures = 2 + 1 = 3. Move left to (2,1), energy now is 1 - 5 = -4 (can\'t proceed further). Alternative routes might collect more treasures before energy runs out, given the constraints and dynamic possibilities. By following the best route, the player collects a maximum of 6 treasures without expending more energy than available.","solution":"def max_treasure(n, m, E, grid): # Initialize a 3D dp array where dp[i][j][e] stands for the maximum treasures # that can be collected at position (i, j) with energy e. dp = [[[-1] * (E + 1) for _ in range(m)] for _ in range(n)] # Starting position with initial energy if grid[0][0] >= 0: dp[0][0][E] = grid[0][0] else: initial_energy = E + grid[0][0] if initial_energy >= 0: dp[0][0][initial_energy] = 0 # Fill the dp table for i in range(n): for j in range(m): for e in range(E + 1): if dp[i][j][e] == -1: continue # Move right if j + 1 < m: next_val = grid[i][j + 1] if next_val >= 0: dp[i][j + 1][e] = max(dp[i][j + 1][e], dp[i][j][e] + next_val) else: next_energy = e + next_val if next_energy >= 0: dp[i][j + 1][next_energy] = max(dp[i][j + 1][next_energy], dp[i][j][e]) # Move down if i + 1 < n: next_val = grid[i + 1][j] if next_val >= 0: dp[i + 1][j][e] = max(dp[i + 1][j][e], dp[i][j][e] + next_val) else: next_energy = e + next_val if next_energy >= 0: dp[i + 1][j][next_energy] = max(dp[i + 1][j][next_energy], dp[i][j][e]) # Find the maximum treasure collected max_treasure_collected = 0 for e in range(E + 1): max_treasure_collected = max(max_treasure_collected, dp[n-1][m-1][e]) return max_treasure_collected"},{"question":"In a kingdom far away, there lives a python programmer named Arya. She has a collection of rare gemstones, each identified by a unique color. Arya likes to group her gemstones based on their colors and create sets of consecutive gemstones of the same color. However, Arya\'s sister, Sansa, has challenged her with a task. Sansa wants Arya to determine the maximum number of gemstones of the same color that can be grouped consecutively. Here’s the problem statement: Help Arya find the maximum number of consecutive gemstones that have the same color in the given sequence of gemstones. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of gemstones Arya has. The second line contains a sequence of `n` space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^6) representing the colors of the gemstones. Output Output a single integer representing the maximum number of consecutive gemstones that have the same color in Arya\'s collection. Examples Input 7 1 1 2 2 2 3 3 Output 3 Input 5 4 4 4 4 5 Output 4 Note In the first example, the most amount of consecutive gemstones of the same color is 3 (color 2). In the second example, the most amount of consecutive gemstones of the same color is 4 (color 4).","solution":"def max_consecutive_gemstones(n, gemstones): Returns the maximum number of consecutive gemstones of the same color. Parameters: n (int): Number of gemstones gemstones (list of int): List of colors of the gemstones Returns: int: The maximum number of consecutive gemstones of the same color if n == 0: return 0 max_count = 1 current_count = 1 for i in range(1, n): if gemstones[i] == gemstones[i - 1]: current_count += 1 else: max_count = max(max_count, current_count) current_count = 1 max_count = max(max_count, current_count) return max_count"},{"question":"Kate is participating in a virtual fair where she needs to distribute gifts to children standing along a straight line. Each child has an initial position and a desired position where they want to receive their gift. Kate can move linearly along the line and drop off the gifts wherever she wants. However, she has limited energy, represented by the total distance she can travel along the line. Calculate the maximum number of children she can satisfy with her limited energy. Constraints * 1 ≤ n ≤ 1000 * 1 ≤ d ≤ 1000 * -1000 ≤ initial position, desired position ≤ 1000 * The initial and desired positions are integers. Input The input is given from Standard Input in the following format: n d initial_position_1 desired_position_1 initial_position_2 desired_position_2 ... initial_position_n desired_position_n Output Print the maximum number of children Kate can satisfy. Examples Input 3 10 0 5 2 8 4 1 Output 2 Input 4 15 -2 8 0 5 3 7 -1 2 Output 3","solution":"def max_children_satisfied(n, d, positions): Returns the maximum number of children Kate can satisfy given the energy limit and positions. :param n: Number of children :param d: Total distance Kate can travel :param positions: List of tuples where each tuple contains (initial_position, desired_position) :return: Maximum number of children satisfied distances = [] for initial, desired in positions: distance = abs(desired - initial) distances.append(distance) distances.sort() children_satisfied = 0 total_distance = 0 for distance in distances: if total_distance + distance <= d: total_distance += distance children_satisfied += 1 else: break return children_satisfied # Function to read input and call the max_children_satisfied function def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) d = int(data[1]) positions = [] index = 2 for _ in range(n): initial = int(data[index]) desired = int(data[index + 1]) positions.append((initial, desired)) index += 2 result = max_children_satisfied(n, d, positions) print(result)"},{"question":"Write a function that takes a list of words as input and categorizes them based on their lengths. It should return a dictionary where the keys are word lengths and the values are lists of words of that length. Input The input will be a single line containing an integer N, followed by N words separated by spaces. Output Print a dictionary where the keys are word lengths and the values are lists of words sorted in lexicographical order. Constraints 1 ≤ N ≤ 100 Each word will contain only lowercase letters and will have a length between 1 and 10. Example Input 6 apple bat pear dog blue fish Output {5: [\'apple\'], 3: [\'bat\', \'dog\'], 4: [\'blue\', \'pear\'], 4: [\'fish\']} Explanation We have the following words: - \'apple\' of length 5 - \'bat\' and \'dog\' of length 3 - \'blue\' and \'pear\' of length 4 - \'fish\' of length 4","solution":"def categorize_words_by_length(N_words): Categorizes words by their lengths and returns a dictionary where the keys are word lengths and the values are lists of words sorted in lexicographical order. Parameters: N_words (str): a single line containing an integer N followed by N words separated by spaces. Returns: dict: A dictionary where the keys are word lengths and the values are lists of words of that length. words = N_words.split()[1:] # Skip the first integer which is N categorized_words = {} for word in words: length = len(word) if length in categorized_words: categorized_words[length].append(word) else: categorized_words[length] = [word] for length in categorized_words: categorized_words[length].sort() return categorized_words"},{"question":"A strictly increasing sequence of integers a1, a2, ..., an is called a magical sequence if it satisfies the following conditions: 1. a1 = 1. 2. For every integer m ≥ 1, am + 1 is the smallest integer that is greater than am and cannot be represented as the sum of 1 or more (not necessarily distinct) elements from the sequence up to am. Your task is to find the first n elements of this magical sequence for a given integer n. Input The input contains a single integer n (1 ≤ n ≤ 1000). Output Output the first n elements of the magical sequence, separated by spaces. Examples Input 5 Output 1 2 4 8 16 Input 10 Output 1 2 4 8 16 32 64 128 256 512 Explanation For the first sample: - a1 is 1. - a2 is the smallest number greater than 1 that cannot be represented as the sum of elements up to 1. - a3 is the smallest number greater than 2 that cannot be represented as the sum of elements up to 2. - and so on... For the second sample, the sequence is extended similarly.","solution":"def magical_sequence(n): Generates the first n elements of the magical sequence. seq = [1] for _ in range(1, n): next_element = seq[-1] + 1 while not is_non_summable(next_element, seq): next_element += 1 seq.append(next_element) return seq def is_non_summable(num, seq): Checks if a number cannot be represented as the sum of one or more elements in the sequence seq. possible_sums = {0} for x in seq: new_sums = {x + ps for ps in possible_sums} possible_sums.update(new_sums) return num not in possible_sums # Example usage if __name__ == \\"__main__\\": n = 10 print(\\" \\".join(map(str, magical_sequence(n))))"},{"question":"You are given a rectangular cardboard of dimensions `m` x `n` (where `m` is the number of rows and `n` is the number of columns). Each cell in the cardboard can be marked either as \'1\' (occupied) or \'0\' (unoccupied). You need to write a program to find the largest square subgrid within this cardboard that contains only \'1\'s. The largest square subgrid is defined as the square subgrid with the maximum side length and each cell in the square is \'1\'. If there are multiple such largest squares, you only need to find the side length. Input The first line contains two integers `m` and `n` (1 <= m, n <= 1000) which represent the dimensions of the cardboard. Each of the next `m` lines contains a string of length `n` consisting of \'1\'s and \'0\'s which represents a row in the cardboard. Output Print a single integer, the side length of the largest square subgrid that contains only \'1\'s. Examples Input 4 4 1101 1101 1111 1001 Output 2 Input 5 6 111111 111111 111110 111110 111111 Output 5","solution":"def largest_square_subgrid(m, n, grid): if not grid or not grid[0]: return 0 # Convert grid into a 2D list of integers for easier manipulation grid = [[int(cell) for cell in row] for row in grid] # Create a DP table to store the size of the largest square subgrid ending at (i, j) dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 # If we\'re on the first row or column, the largest square side is just the cell itself else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"You are given an array of integers representing the heights of a series of vertical lines drawn on a map. Each integer corresponds to the height of a line at a particular position on the map. The gap between each adjacent vertical line is always 1 unit. Your task is to calculate the maximum amount of water that can be trapped between these lines after a rain. Formally, for each pair of indices (i, j) (where 0 ≤ i < j < n, and n is the length of the array), the water trapped between lines at positions i and j is limited by the shorter line and the distance between i and j. The goal is to find the pair (i, j) that traps the most water. Write a function: ```python def max_water_trapped(heights: List[int]) -> int: pass ``` # Input - An array `heights` of length `n` (1 ≤ n ≤ 10^5), where each element is a non-negative integer representing the height of the line at that position on the map. # Output - Return the maximum amount of water that can be trapped between any two lines. # Example Input: ```python heights = [1, 8, 6, 2, 5, 4, 8, 3, 7] ``` Output: ```python 49 ``` # Explanation The maximum amount of water can be trapped between the line at position 1 (height 8) and the line at position 8 (height 7). The trapped water volume is calculated as (8 - 1) * min(8, 7) = 49 units of water. # Notes - The function should be efficient and should not have a time complexity worse than O(n). - You can assume that there will always be at least two lines.","solution":"from typing import List def max_water_trapped(heights: List[int]) -> int: Calculate the maximum amount of water that can be trapped between the given heights of vertical lines. :param heights: List of non-negative integers representing the height of vertical lines :return: Maximum amount of water that can be trapped left, right = 0, len(heights) - 1 max_water = 0 while left < right: width = right - left height = min(heights[left], heights[right]) max_water = max(max_water, width * height) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"Given an array \\"heights\\" of \\"n\\" elements, where each element represents the height of a building, find and print the skyline silhouette of those buildings as a 2D list. The skyline silhouette is a series of \\"key points\\" in the format (x, y) that uniquely define a skyline formed by the buildings. A \\"key point\\" is a point where there is a vertical change in height. Each building is represented by a triplet [left, right, height], where: - left: the x-coordinate of the left edge of the building - right: the x-coordinate of the right edge of the building - height: the height of the building The buildings\' dimensions are confined within a given rectangular region defined by 0 <= left < right <= 10^4 and 1 <= height <= 10^4. Input First line of input contains one integer n (0 <= n <= 100) — number of buildings. Each of the next n lines contains three integers left, right, and height — the dimensions of a building. Output Print the skyline silhouette as a list of 2D key points formatted as (x, y). Examples Input 3 2 9 10 3 7 15 5 12 12 Output [(2, 10), (3, 15), (7, 12), (12, 0)] Input 2 1 5 11 2 6 6 Output [(1, 11), (5, 6), (6, 0)] Note In the first example, the first building starts at x=2 with a height of 10, the second building starts at x=3 with a height of 15, and the third building starts at x=5 with a height of 12. The silhouette rises to a maximum height of 15 at x=3, drops to height 12 at x=7, and then falls to 0 at x=12, reflecting the end of the third building. In the second example, the first building starts at x=1 with a height of 11. The second building starts at x=2 but has a shorter height of 6. The silhouette has a height of 11 at x=1 and drops to height 6 at x=5, eventually falling to 0 at x=6, reflecting the end of the second building.","solution":"def get_skyline(buildings): from heapq import heappush, heappop if not buildings: return [] events = [] for left, right, height in buildings: events.append((left, -height, right)) events.append((right, 0, None)) events.sort() result, heap = [], [(0, float(\\"inf\\"))] for x, negH, R in events: while x >= heap[0][1]: heappop(heap) if negH: heappush(heap, (negH, R)) maxH = -heap[0][0] if not result or maxH != result[-1][1]: result.append((x, maxH)) return result"},{"question":"You have been hired as a developer for a company that wants to ensure its coding standards are adhered to through automated checks. Your task is to write a function to eliminate duplicate and consecutive blank spaces from a string. Write a program that receives a string and reduces all consecutive white spaces into a single space. Additionally, remove any leading or trailing white spaces. The function should also ensure that empty strings are returned as empty strings. Input The input is given in the following format: d s1 s2 :: sd The number of datasets d (d ≤ 20) is given on the first line, and each of the next d lines contains a string si (0 ≤ length of si ≤ 1000) to be processed. Output For each input string, output the cleaned string with no leading or trailing white spaces, and with all consecutive white spaces reduced to a single space. Each cleaned string should be printed on a new line. Example Input 2 This is a test string with excessive spaces Output This is a test string with excessive spaces","solution":"def clean_spaces(strings): def clean_string(s): # Remove leading and trailing spaces stripped = s.strip() # Replace multiple spaces with a single space cleaned = \' \'.join(stripped.split()) return cleaned return [clean_string(s) for s in strings] def process_input(data): # Split input by newlines lines = data.split(\'n\') # Extract number of datasets d = int(lines[0]) # Extract the strings to be processed strings = lines[1:d + 1] return clean_spaces(strings)"},{"question":"A valid Sudoku puzzle is defined as a 9x9 grid filled with digits 1 to 9 in such a way that each row, each column, and each of the nine 3x3 sub-grids that compose the grid (also called \\"blocks\\") contains all of the digits from 1 to 9. Chef recently found an incomplete Sudoku board. The board is currently filled with digits from 1 to 9 and empty cells represented by the character \'.\' (dot). Chef wants to know if the current state of the Sudoku board is valid. A valid Sudoku board (partially filled) is not necessarily solvable but must satisfy the following conditions: * Each row must contain the digits 1-9 without repetition. * Each column must contain the digits 1-9 without repetition. * Each of the nine 3x3 sub-grids must contain the digits 1-9 without repetition. Write a program to determine if the given Sudoku board configuration is valid. Input Several test cases are given. The first line contains an integer T - the number of test cases. Then, T test cases follow. Each test case consists of 9 lines, each containing 9 characters (digits 1-9 or \'.\') representing the Sudoku board. Output For each test case, output \\"YES\\" if the given Sudoku board state is valid, otherwise output \\"NO\\". Constraints 1<=T<=100 The Sudoku grid consists of only digits 1-9 and the character \'.\'. Example Input: 2 5 3 . . 7 . . . . 6 . . 1 9 5 . . . . 9 8 . . . . 6 . 8 . . . 6 . . . 3 4 . . 8 . 3 . . 1 7 . . . 2 . . . 6 . 6 . . . . 2 8 . . . . 4 1 9 . . 5 . . . . 8 . . 7 9 8 3 . . 7 . . . . 6 . . 1 9 5 . . . . 9 8 . . . . 6 . 8 . . . 6 . . . 3 4 . . 8 . 3 . . 1 7 . . . 2 . . . 6 . 6 . . . . 2 8 . . . . 4 1 9 . . 5 . . . . 8 . . 7 9 Output: YES NO","solution":"def is_valid_sudoku(board): def is_valid_char(c, seen): if c == \'.\': return True if c in seen: return False seen.add(c) return True # Check rows and columns for i in range(9): row_seen = set() col_seen = set() for j in range(9): if not is_valid_char(board[i][j], row_seen) or not is_valid_char(board[j][i], col_seen): return False # Check 3x3 sub-grids for i in range(0, 9, 3): for j in range(0, 9, 3): subgrid_seen = set() for k in range(3): for l in range(3): if not is_valid_char(board[i + k][j + l], subgrid_seen): return False return True def validate_sudoku_boards(test_cases): results = [] for board in test_cases: if is_valid_sudoku(board): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A bookstore maintains a catalog of books, each with a unique book ID, a title, author name, and price. Additionally, each book can be a physical copy or an e-book. Physical copies have an associated shipping cost by weight, while e-books have a download token cost. Your task is to write a program that processes queries to find books in the catalog based on certain criteria and to calculate the total cost if multiple books are selected. The criteria can be a maximum price, author name, or a preference for physical books or e-books. Given the following data about books: Book ID | Title | Author | Price () | Type | Weight (kg) | Download Tokens --- | --- | --- | --- | --- | --- | --- 1 | \'Introduction to Algorithms\' | \'Thomas H. Cormen\' | 80.00 | \'Physical\' | 1.5 | - 2 | \'Clean Code\' | \'Robert C. Martin\' | 50.00 | \'Ebook\' | - | 2 3 | \'The Pragmatic Programmer\' | \'Andrew Hunt\' | 65.00 | \'Physical\' | 1.0 | - 4 | \'Design Patterns\' | \'Erich Gamma\' | 75.00 | \'Ebook\' | - | 3 5 | \'Code Complete\' | \'Steve McConnell\' | 70.00 | \'Physical\' | 1.2 | - You need to develop a program that: 1. Reads the number of books n, followed by the book information. 2. Reads m queries containing criteria and returns the IDs of books matching those criteria or \\"No match found\\". 3. Computes the total cost of selected books including shipping cost for physical books. Criteria can include: - Maximum price: Filters books that are equal to or below this price. - Author name: Filters books by a specific author. - Preference type: Filters books that are either physical or e-book. Use the following format for input: n Book_ID Title Author Price Type Weight DownloadTokens ... m query_type[author|price|type] value Example: Input: 5 1 \'Introduction to Algorithms\' \'Thomas H. Cormen\' 80.00 \'Physical\' 1.5 - 2 \'Clean Code\' \'Robert C. Martin\' 50.00 \'Ebook\' - 2 3 \'The Pragmatic Programmer\' \'Andrew Hunt\' 65.00 \'Physical\' 1.0 - 4 \'Design Patterns\' \'Erich Gamma\' 75.00 \'Ebook\' - 3 5 \'Code Complete\' \'Steve McConnell\' 70.00 \'Physical\' 1.2 - 4 author \'Robert C. Martin\' price 70 type \'Physical\' price 40 Output: 2 3 5 1 3 5 No match found The shipping cost should be calculated as 2 per kg for physical books, and the total cost of selected books should be returned in the format: For m queries: - For each query, return the matched book IDs and their total cost. - If no books match the criteria, return \\"No match found\\". Note: The total cost should be computed as the sum of the price of each book plus the shipping cost for physical books (if they are selected). For example, selecting book IDs 1 and 3 from the data above would involve calculating the total cost as 80 + 65 + (1.5 * 2) + (1.0 * 2) = 152.","solution":"class BookCatalog: def __init__(self): self.books = [] def add_book(self, book_id, title, author, price, book_type, weight, download_tokens): self.books.append({ \\"book_id\\": book_id, \\"title\\": title, \\"author\\": author, \\"price\\": price, \\"type\\": book_type, \\"weight\\": weight, \\"download_tokens\\": download_tokens }) def filter_by_author(self, author_name): return [book[\\"book_id\\"] for book in self.books if book[\\"author\\"] == author_name] def filter_by_max_price(self, max_price): return [book[\\"book_id\\"] for book in self.books if book[\\"price\\"] <= max_price] def filter_by_type(self, book_type): return [book[\\"book_id\\"] for book in self.books if book[\\"type\\"] == book_type] def calculate_total_cost(self, book_ids): total_cost = 0 for book in self.books: if book[\\"book_id\\"] in book_ids: total_cost += book[\\"price\\"] if book[\\"type\\"] == \\"Physical\\": total_cost += book[\\"weight\\"] * 2 # 2 per kg return total_cost def process_query(book_catalog, query_type, value): if query_type == \'author\': return book_catalog.filter_by_author(value) elif query_type == \'price\': return book_catalog.filter_by_max_price(float(value)) elif query_type == \'type\': return book_catalog.filter_by_type(value) else: return \\"No match found\\""},{"question":"In a digital book club, members read books and give ratings. The club has a system where they want to identify the \\"superior\\" books. A book is considered superior if its mean rating is greater than or equal to the mean rating of any other book. Your task is to help the club by writing a program that processes the ratings of n books and identifies all the superior books. Each book has multiple ratings given by different members. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of books. Each of the next n lines describes the ratings for a single book. Each line starts with a single integer m (1 ≤ m ≤ 1000) — the number of ratings the book received, followed by m integers representing the ratings (1 ≤ rating ≤ 5). Output Print the number of superior books, followed by the indices of these books in ascending order. The books are indexed from 1 to n in the order they appear in the input. Example Input 3 4 5 4 3 5 3 3 3 4 2 5 5 Output 2 1 3 Explanation The mean rating of the first book is (5+4+3+5)/4 = 4.25. The mean rating of the second book is (3+3+4)/3 = 3.33. The mean rating of the third book is (5+5)/2 = 5.00. Books 1 and 3 are superior because their mean ratings (4.25 and 5.00 respectively) are greater than or equal to the mean rating of any other book.","solution":"def find_superior_books(n, book_ratings): mean_ratings = [] for ratings in book_ratings: mean_rating = sum(ratings) / len(ratings) mean_ratings.append(mean_rating) max_mean_rating = max(mean_ratings) superior_books = [] for i, mean in enumerate(mean_ratings): if mean >= max_mean_rating: superior_books.append(i + 1) return superior_books # Reading input def read_input(): import sys input = sys.stdin.read data = input().splitlines() n = int(data[0]) book_ratings = [] for line in data[1:]: ratings = list(map(int, line.split()[1:])) book_ratings.append(ratings) return n, book_ratings # Main Execution if __name__ == \\"__main__\\": n, book_ratings = read_input() superior_books = find_superior_books(n, book_ratings) print(len(superior_books)) print(\\" \\".join(map(str, superior_books)))"},{"question":"A popular online retail company has hired you to help optimize their delivery routes. The company uses a fleet of identical delivery trucks, each with a maximum carrying capacity of W kilograms. There are n delivery locations, and each location has a specific package that weighs wi kilograms. The goal is to determine the minimum number of trucks required to deliver all packages, ensuring no truck exceeds its maximum carrying capacity. Assume each truck can visit multiple locations, but each package must be delivered by a single truck without splitting. Input - The first line contains two integers n (1 ≤ n ≤ 100) and W (1 ≤ W ≤ 1000) — the number of delivery locations and the maximum carrying capacity of each truck. - The second line contains n space-separated integers wi (1 ≤ wi ≤ W) — the weight of the package at each location. Output - Print a single integer — the minimum number of trucks required to deliver all packages. Examples Input 4 10 4 8 2 6 Output 2 Input 5 15 10 5 3 7 8 Output 3 Note In the first example, one possible way to minimize the number of trucks is to have: - Truck 1 deliver the packages from locations with weights 4 and 6. - Truck 2 deliver the packages from locations with weights 8 and 2. In the second example, one possible way to minimize the number of trucks is to have: - Truck 1 deliver the packages from locations with weights 10 and 3. - Truck 2 deliver the package from the location with weight 5 and an empty slot of 10kg. - Truck 3 deliver the package from the location with weight 7 and 8 respectivley.","solution":"from itertools import permutations import math def min_trucks(n, W, weights): weights.sort(reverse=True) used = [False] * n trucks = 0 for i in range(n): if not used[i]: trucks += 1 current_weight = weights[i] for j in range(i + 1, n): if not used[j] and current_weight + weights[j] <= W: current_weight += weights[j] used[j] = True return trucks # Example usage n = 5 W = 15 weights = [10, 5, 3, 7, 8] print(min_trucks(n, W, weights)) # Output: 3"},{"question":"You are given a sequence of integers and your task is to find a subsequence with the maximum possible sum under the following conditions: the subsequence cannot contain any two consecutive elements from the original sequence and it should be a strictly increasing sequence. # Input - The first line contains an integer ( n ) (1 ≤ ( n ) ≤ 100) — the length of the sequence. - The second line contains ( n ) integers ( a_1, a_2, ..., a_n ) (1 ≤ ( a_i ) ≤ ( 10^6 )) — the elements of the sequence. # Output - Print a single integer — the maximum sum of a subsequence that meets the criteria. # Examples Example 1 **Input:** ``` 5 3 2 5 10 7 ``` **Output:** ``` 15 ``` **Explanation:** The optimal subsequence is {3, 5, 7} with a sum of 15. This satisfies the condition of no two consecutive elements being picked and it is strictly increasing. Example 2 **Input:** ``` 6 1 2 3 4 5 6 ``` **Output:** ``` 12 ``` **Explanation:** The optimal subsequence is {1, 3, 5} or {2, 4, 6} both with a sum of 9. Example 3 **Input:** ``` 5 10 5 4 3 2 ``` **Output:** ``` 10 ``` **Explanation:** The optimal subsequence is {10} with a sum of 10 because no two consecutive elements can be selected and other subsequences have smaller sums.","solution":"def max_nonconsecutive_increasing_sum(n, a): if n == 1: return a[0] # Create a dp array to store the maximum sum of the subsequences up to each index dp = [0] * n dp[0] = a[0] for i in range(1, n): max_sum = 0 for j in range(i-1): if a[j] < a[i]: max_sum = max(max_sum, dp[j]) dp[i] = max_sum + a[i] return max(dp)"},{"question":"# Determine the Maximum Product Subarray You are given an integer array `nums` containing `n` numbers (1 ≤ n ≤ 200), both positive and negative integers. Your task is to find the contiguous subarray within the array that has the largest product, and return the value of that product. Input - The input consists of an integer `n` on the first line, followed by `n` integers on the second line representing the array `nums`. Output - Print an integer representing the maximum product of a contiguous subarray within the array `nums`. Example Input ``` 5 2 3 -2 4 -1 ``` Output ``` 48 ``` Explanation - The contiguous subarray `[2, 3, -2, 4]` has the largest product which is `48`. Constraints - The elements of the array can be both positive and negative. - The length of array `nums` is at least `1` and at most `200`. Note: - A subarray is a contiguous part of an array. - The output must be a single integer value representing the maximum product possible.","solution":"def max_product_subarray(nums): if not nums: return 0 current_max = current_min = global_max = nums[0] for num in nums[1:]: if num < 0: current_max, current_min = current_min, current_max current_max = max(num, current_max * num) current_min = min(num, current_min * num) global_max = max(global_max, current_max) return global_max"},{"question":"**Problem Statement:** Alice loves collecting gemstones. She has a large collection of gemstones, where each gemstone is represented by a positive integer. Alice wants to distribute her collection of gemstones in such a way that each group of gemstones contains the same gemstones with the same count as in the original collection, but in different orders. Alice is wondering how many different ways she can rearrange her collection into groups while ensuring each group has the same gemstones in the same proportion. Each group must be non-empty and should contain all the types of gemstones in the same proportion as the original collection. **Input:** - The first line of the input consists of a single integer `T`, the number of test cases. - For each test case: - The first line contains an integer `N`, the number of different gemstone types in Alice\'s collection. - The second line contains `N` integers representing the counts of each gemstone type in Alice\'s collection. **Output:** For each test case, output an integer representing the number of ways Alice can rearrange her collection into groups. **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ count of each gemstone ≤ 1000 **Example:** **Input:** ``` 2 3 2 4 6 4 6 3 9 12 ``` **Output:** ``` 2 2 ``` **Explanation:** In the first test case, the counts of gemstones are [2, 4, 6]. Alice can divide her gemstones into 2 groups (`G = 2`), each containing [1, 2, 3]. In the second test case, the counts of gemstones are [6, 3, 9, 12]. Alice can divide her gemstones into 2 groups (`G = 2`), each containing [3, 1, 3, 6].","solution":"def gcd(a, b): while b: a, b = b, a % b return a def find_max_groups(N, gemstone_counts): if N == 1: return gemstone_counts[0] result_gcd = gemstone_counts[0] for count in gemstone_counts[1:]: result_gcd = gcd(result_gcd, count) return result_gcd def gemstone_groups(T, cases): results = [] for i in range(T): N = cases[i][0] gemstone_counts = cases[i][1] max_groups = find_max_groups(N, gemstone_counts) results.append(max_groups) return results"},{"question":"In a certain Binary Card Game, you have a deck of cards and each card has an integer binary number written on it (without leading zeroes). The game starts with you drawing a subset of the cards from the deck. Your task is to determine the smallest binary number that can be formed by performing a bitwise OR operation on all numbers of every possible subset of the drawn cards. The bitwise OR operation takes two binary numbers and returns a binary number where each bit is the logical OR of the corresponding bits of the input numbers. For example, the result of the bitwise OR operation on \'101\' and \'011\' is \'111\'. Input - The first line contains a single integer n (1 ≤ n ≤ 10^4), the number of cards drawn from the deck. - The second line contains n binary numbers as strings separated by space, each representing a card drawn from the deck. Each binary number is guaranteed to not have leading zeroes and will contain at most 100 bits. Output - Print a single binary number: the smallest binary number (without leading zeroes) that can be formed by performing a bitwise OR operation on all numbers of every possible subset of the drawn cards. Examples Input 3 101 010 001 Output 000 Input 2 100 011 Output 111 Input 1 1 Output 1 Note In the first example, the smallest possible result of any subset or individual card after performing the bitwise OR operation is \'000\'. This happens for the subset of an empty set. In the second example, the two numbers \'100\' and \'011\' result in the number \'111\' when a bitwise OR operation is applied on them. This is the smallest possible binary number obtained from any subset. In the third example, there\'s only one card with the binary number \'1\', which is the only possible result.","solution":"def smallest_or(n, binary_numbers): Returns the smallest binary number that can be formed by performing a bitwise OR operation on all numbers of every possible subset of the drawn cards. # The smallest OR result of any subset including the empty set is \'0\'. return \'0\' # As this is smallest possible OR result"},{"question":"You are given an array of n integers where the arrangement of elements forms a mountain array, which means the elements strictly increase up to a certain point and then strictly decrease. Your task is to find the peak element in the mountain array, which is the value that is the highest in the array. Input: The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single integer n (3 ≤ n ≤ 100) followed by n integers indicating the elements of the mountain array. Output: For each test case, output the peak element of the mountain array. Example: Input: 2 3 1 3 2 5 1 2 3 5 4 Output: 3 5 Note: - In the first test case, the array is [1, 3, 2]. The peak element is 3. - In the second test case, the array is [1, 2, 3, 5, 4]. The peak element is 5.","solution":"def find_peak_element(t, test_cases): Returns the peak element of each mountain array. Parameters: - t (int): Number of test cases. - test_cases (list of lists): Each sublist contains integers representing a mountain array. Returns: - list: Peak elements of each mountain array. peaks = [] for case in test_cases: n = case[0] array = case[1:] peak = max(array) peaks.append(peak) return peaks # Example usage: # t = 2 # test_cases = [ # [3, 1, 3, 2], # [5, 1, 2, 3, 5, 4] # ] # print(find_peak_element(t, test_cases)) # Output: [3, 5]"},{"question":"A company has developed a new security system to protect their vaults which contain valuable items. To unlock the vault, an alphanumeric code, which is exactly `N` characters long, must be entered. The vault\'s security system will only accept a code if it meets the following criteria: 1. The code must contain at least one uppercase letter. 2. The code must contain at least one lowercase letter. 3. The code must contain at least one digit. Given a sequence of alphanumeric codes, your task is to determine if each code is valid according to the security system\'s criteria and return \\"VALID\\" or \\"INVALID\\" for each code. Input: - The first line contains an integer `T`, the number of test cases. - The next `T` lines each contain a string `S` of length `N`. Output: - Print \\"VALID\\" if the code meets all the criteria, otherwise print \\"INVALID\\". Constraints: - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 100 SAMPLE INPUT 3 A1cde a1cde A1CDE SAMPLE OUTPUT VALID INVALID INVALID Explanation: - The first code \\"A1cde\\" contains at least one uppercase letter (\\"A\\"), one lowercase letter (\\"c\\"), and one digit (\\"1\\"), hence it is \\"VALID\\". - The second code \\"a1cde\\" does not contain an uppercase letter, hence it is \\"INVALID\\". - The third code \\"A1CDE\\" does not contain a lowercase letter, hence it is \\"INVALID\\".","solution":"def check_validity(codes): Given a list of alphanumeric codes, determines if each code is valid based on the defined criteria. Parameters: codes (list): A list of strings, where each string is an alphanumeric code Returns: list: A list of \\"VALID\\" or \\"INVALID\\" for each code results = [] for code in codes: has_upper = any(c.isupper() for c in code) has_lower = any(c.islower() for c in code) has_digit = any(c.isdigit() for c in code) if has_upper and has_lower and has_digit: results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"# Product Array Without Self You are given an array of integers `nums`, where the length of `nums` is `n`. Write a function `productExceptSelf(nums)` that returns an array `output` such that `output[i]` is equal to the product of all the elements of `nums` except `nums[i]`. **Note:** - The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer. - Try to solve it without using division and in O(n) time complexity. **Function Signature:** ```python def productExceptSelf(nums: List[int]) -> List[int]: ``` # Input - A list of integers `nums`, of length `n` (2 leq n leq 10^5). Each integer can be in the range of [-30, 30]. # Output - A list of integers, where each element `output[i]` is the product of all elements in `nums` except `nums[i]`. # Example Example 1 Input: ```python nums = [1,2,3,4] ``` Output: ```python [24,12,8,6] ``` Explanation: - [1,2,3,4] => [24, (2*3*4), (1*3*4), (1*2*4), (1*2*3)] - Output: [24, 12, 8, 6] Example 2 Input: ```python nums = [-1,1,0,-3,3] ``` Output: ```python [0,0,9,0,0] ``` Explanation: - [-1,1,0,-3,3] => [0, 0, (1*-3*3), 0, 0] - Output: [0,0,9,0,0] # Constraints: - The solution should run in O(n) time and use O(1) additional space complexity, not counting the space required for the output array. You are required to do this without using division, to avoid division by zero issues.","solution":"from typing import List def productExceptSelf(nums: List[int]) -> List[int]: n = len(nums) output = [1] * n # Compute the product of all elements to the left of each element left_product = 1 for i in range(n): output[i] = left_product left_product *= nums[i] # Compute the product of all elements to the right of each element right_product = 1 for i in range(n - 1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"In a small town, there is a unique tradition of arranging houses in a circular manner. Every house has a non-negative integer number of candies. During the yearly festival, each house gets to share candies with their next neighbor in a specific manner: If a house has more candies than its next neighbor, it will give the excess amount to the neighbor until both have an equal number of candies or it can no longer share. Your task is to determine if it is possible to make all the houses have an equal number of candies by following the tradition starting from any house repeatedly. [Input] First line contains an integer t denoting the number of test cases. Next line contains an integer n denoting the number of houses. Next line contains n integers representing the candies in each house. [Output] For each test case output \\"Yes\\" if it is possible to equalize the number of candies in all houses, otherwise, print \\"No\\". [Constraints] 1 ≤ t ≤ 100 2 ≤ n ≤ 100 0 ≤ candies ≤ 1000 SAMPLE INPUT 2 3 1 2 3 4 5 5 5 5 SAMPLE OUTPUT No Yes","solution":"def is_equal_possible(t, test_cases): results = [] for case in test_cases: n, candies = case total_candies = sum(candies) # Each house must have an equal number of candies if total_candies % n != 0: results.append(\\"No\\") else: average = total_candies // n can_balance = all(candy <= average for candy in candies) if can_balance: results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Function to handle input and output for the problem def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) candies = list(map(int, data[index + 1: index + 1 + n])) test_cases.append((n, candies)) index = index + 1 + n results = is_equal_possible(t, test_cases) for result in results: print(result)"},{"question":"Marie is fond of constructing strings out of given characters. She is given an integer n and two characters x and y. Marie wants to create the lexicographically smallest string of length n using characters x and y such that the number of occurrences of x is exactly a and the number of occurrences of y is exactly b. Input The input consists of a single line containing four integers, n, a, b, and two characters x and y (1 ≤ n ≤ 106, 0 ≤ a, b ≤ n, and a + b = n). Output Output a single line containing the lexicographically smallest string of length n that satisfies the given conditions. If no such string exists, print the single number \\"-1\\" (without the quotes). Examples Input 5 2 3 a b Output aabbb Input 4 2 3 a b Output -1","solution":"def create_lexicographically_smallest_string(n, a, b, x, y): Returns the lexicographically smallest string of length n using characters x and y such that the number of occurrences of x is exactly a and the number of occurrences of y is exactly b. if a + b != n: return \\"-1\\" # Start by filling the string with \'x\' first and then \'y\' if \'x\' < \'y\' # Otherwise, fill the string with \'y\' first and then \'x\' if x < y: result = x * a + y * b else: result = y * b + x * a return result"},{"question":"A robot is traveling on a grid of size M x N and starts from the top-left corner of the grid. The robot is trying to reach the bottom-right corner of the grid. However, some cells in the grid are blocked, meaning the robot cannot travel through them. The robot can only move either down or right at any point in time. You need to find the total number of unique paths that the robot can take to reach the bottom-right corner. The presence of blocked cells makes some paths invalid, so consider those in your calculations. Constraints * 1 leq M, N leq 100 * The grid is represented by a list of lists of size M x N where each cell is either `0` for an empty cell or `1` for a blocked cell. * The top-left and bottom-right cells are always empty. Input Input is given from Standard Input in the following format: ``` M N grid ``` Where `M` and `N` are integers representing the grid\'s dimensions, followed by `grid` which is a list of lists where each sub-list represents a row in the grid. Output Print the total number of unique paths from the top-left to the bottom-right of the grid. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 0 1 0 0 Output 1 Input 3 3 0 1 0 0 1 0 0 0 0 Output 1","solution":"def unique_paths(M, N, grid): if not grid or grid[0][0] == 1 or grid[M-1][N-1] == 1: return 0 # Initialize a 2D dp array dp = [[0 for _ in range(N)] for _ in range(M)] # Starting point dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"You are given an array of N integers representing the heights of buildings in a city. Your task is to determine how many buildings have a view of the sunset. A building has a view of the sunset if it is strictly taller than all the buildings before it when you look from left to right. Input The first line of input contains T denoting the number of test cases. The first line of each test case contains an integer N. The second line of each test case contains N space-separated integers representing the heights of buildings. Output For each test case, output a single line containing the number of buildings that have a view of the sunset. Constraints 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 1 ≤ height of each building ≤ 10^9 Example Input: 2 5 3 7 8 4 1 4 2 3 4 2 Output: 3 3","solution":"def sunset_views(T, test_cases): For each test case, determine the number of buildings with a view of the sunset. Parameters: - T: Number of test cases (integer) - test_cases: List of tuples, each containing: - N: Number of buildings (integer) - heights: List of integers representing the heights of buildings Returns: - List of integers representing the number of buildings with a view of the sunset for each test case. results = [] for N, heights in test_cases: max_height = 0 view_count = 0 for height in heights: if height > max_height: view_count += 1 max_height = height results.append(view_count) return results # Example usage: T = 2 test_cases = [(5, [3, 7, 8, 4, 1]), (4, [2, 3, 4, 2])] print(sunset_views(T, test_cases))"},{"question":"In a distant future, engineers are working on a highly efficient and budget-friendly set of N interconnected cities with well-defined highways. Each highway connects one city to another directly, and there’s exactly one unique path between any pair of cities, ensuring no cycles in the network. Due to a recent alien attack, some highways have been destroyed and cities need a fast way to communicate which highways are still usable. You need to implement an algorithm that computes the longest path possible in the current network, taking into account that some highways might be destroyed. Input: The first line contains t, the number of test cases. The first line of each test case contains n, the number of cities, and m, the number of existing highways. Each of the next m lines contains two integers u and v representing a working highway directly connecting city u and city v. Output: For each test case, output a single integer representing the length of the longest path in the current network of cities. Constraints: 1 ≤ t ≤ 5 1 ≤ n ≤ 10000 0 ≤ m ≤ n-1 Cities are labeled from 1 to n. It’s guaranteed that no two cities will have more than one direct highway connecting them and that the initial configuration is a valid tree (prior to destruction). SAMPLE INPUT 2 4 3 1 2 2 3 3 4 7 6 1 2 1 3 2 4 2 5 3 6 3 7 SAMPLE OUTPUT 3 4 Explanation 1st test case: The longest path is from city 1 to city 4 through cities 2 and 3, requiring 3 highways. 2nd test case: The longest path is from city 4 to city 7 through cities 2, 1, and 3, requiring 4 highways.","solution":"from collections import deque def bfs_longest_path(adj_list, start_node): Perform BFS to compute the farthest node and the distance from start_node n = len(adj_list) distances = [-1] * n queue = deque([start_node]) distances[start_node] = 0 farthest_node = start_node while queue: current = queue.popleft() current_distance = distances[current] for neighbor in adj_list[current]: if distances[neighbor] == -1: queue.append(neighbor) distances[neighbor] = current_distance + 1 if distances[neighbor] > distances[farthest_node]: farthest_node = neighbor return farthest_node, distances[farthest_node] def longest_path(n, highways): Computes the longest path in the network of n cities with given highways if n == 1: return 0 adj_list = [[] for _ in range(n + 1)] for u, v in highways: adj_list[u].append(v) adj_list[v].append(u) # Start BFS from an arbitrary node (node 1) farthest_node_1, _ = bfs_longest_path(adj_list, 1) # Perform a second BFS from the farthest node found in the first BFS _, longest_distance = bfs_longest_path(adj_list, farthest_node_1) return longest_distance def solve(test_cases): results = [] for case in test_cases: n, m, highways = case[\'n\'], case[\'m\'], case[\'highways\'] results.append(longest_path(n, highways)) return results"},{"question":"In a distant land, you manage a group of farmers. Each farmer can grow a certain amount of grain, which is represented by an integer. At the beginning of each year, each farmer\'s grain yield is known. Your task is to ensure the total amount of grain produced each year meets or exceeds a specified target. Additionally, some farmers may quit before the beginning of the year, so you need to account for the loss of some grain. Determine if the remaining farmers can meet the target. Given the initial grain yields of all farmers, the number of farmers that quit, and the grain yield of each quitting farmer, can you determine if the remaining farmers will be able to meet the target? Input The first line contains two space-separated integers t and f (1 ≤ t ≤ 105, 1 ≤ f ≤ 103) — the target amount of grain needed and the number of farmers. The second line contains f space-separated integers gi (1 ≤ gi ≤ 104) — the grain yield of each farmer. The third line contains an integer q (0 ≤ q ≤ f) — the number of farmers that quit. The fourth line contains q space-separated integers qi (1 ≤ qi ≤ 104) — the grain yield of each quitting farmer. Output On a single line print \\"YES\\" (without quotes), if the remaining farmers can meet the target and print \\"NO\\" (without quotes), if they cannot. Examples Input 100 5 30 20 50 10 40 2 20 10 Output YES Input 150 3 60 50 70 2 60 50 Output NO Note In the first sample, the initial total grain yield is 30 + 20 + 50 + 10 + 40 = 150. After two farmers quit with yields 20 and 10, the remaining yield is 150 - 20 - 10 = 120, which still meets the target of 100. In the second sample, the initial total grain yield is 60 + 50 + 70 = 180. After two farmers quit with yields 60 and 50, the remaining yield is 180 - 60 - 50 = 70, which does not meet the target of 150.","solution":"def can_meet_target(t, f, yields, q, quitting_yields): Determines if the remaining farmers can meet the target grain after some farmers quit. :param t: Target amount of grain needed. :param f: Number of farmers. :param yields: List of grain yields of each farmer. :param q: Number of farmers that quit. :param quitting_yields: List of grain yields of each quitting farmer. :return: \\"YES\\" if target can be met, \\"NO\\" otherwise. total_yield = sum(yields) quitting_yield = sum(quitting_yields) remaining_yield = total_yield - quitting_yield return \\"YES\\" if remaining_yield >= t else \\"NO\\""},{"question":"A transport company uses a fleet of trucks to deliver goods. Each truck has a maximum load capacity and is assigned to a series of deliveries in one day. For each delivery, a truck carries goods of a specified weight from one location to another. These deliveries must be carried out in the given sequence. The company wants to ensure that no truck is overloaded during its journey. You are tasked with determining if a given sequence of deliveries can be completed without exceeding the truck\'s maximum load capacity at any point. You are given the initial load on the truck, the maximum load capacity of the truck, and a list of deliveries. Each delivery specifies the weight of the goods to be transported and whether the goods are loaded onto the truck or unloaded from the truck. Input The first line of the input contains three integers: initialLoad, maxCapacity, and n, where 0 ≤ initialLoad ≤ maxCapacity ≤ 1000, and 1 ≤ n ≤ 100. The initialLoad is the initial load on the truck before any deliveries. The maxCapacity is the maximum load capacity the truck can carry at any given time. The integer n denotes the number of deliveries. The next n lines each contain an integer weight and a character action. The weight (1 ≤ weight ≤ 1000) represents the weight of the goods, and the action is either \'L\' for load (adding goods to the truck) or \'U\' for unload (removing goods from the truck). Output Print \\"YES\\" (without quotes) if the truck can complete all deliveries without exceeding its maximum load capacity at any point. Otherwise, print \\"NO\\" (without quotes). Example Input 10 50 3 20 L 15 L 10 U Output YES Input 5 30 4 10 L 5 L 15 L 10 L Output NO Note: In the first example, the truck starts with a load of 10 units. After the first delivery, the load becomes 30 units (10 + 20). After the second delivery, the load becomes 45 units (30 + 15). Finally, after the last delivery, the load becomes 35 units (45 - 10). Since the load never exceeds the maximum capacity of 50 units, the answer is \\"YES\\". In the second example, the truck starts with a load of 5 units. After the first delivery, the load becomes 15 units (5 + 10). After the second delivery, the load becomes 20 units (15 + 5). After the third delivery, the load becomes 35 units (20 + 15), which exceeds the maximum capacity of 30 units, so the answer is \\"NO\\".","solution":"def can_complete_deliveries(initialLoad, maxCapacity, deliveries): Determine if the truck can complete all deliveries without exceeding its maximum load capacity. :param initialLoad: int, initial load on the truck :param maxCapacity: int, maximum load capacity of the truck :param deliveries: list of tuples (weight, action), where weight is the weight of the goods and action is \'L\' (load) or \'U\' (unload) :return: str \\"YES\\" if the truck can complete all deliveries, otherwise \\"NO\\" current_load = initialLoad for weight, action in deliveries: if action == \'L\': current_load += weight elif action == \'U\': current_load -= weight if current_load > maxCapacity: return \\"NO\\" return \\"YES\\" # Example usage print(can_complete_deliveries(10, 50, [(20, \'L\'), (15, \'L\'), (10, \'U\')])) # Output: \\"YES\\" print(can_complete_deliveries(5, 30, [(10, \'L\'), (5, \'L\'), (15, \'L\'), (10, \'L\')])) # Output: \\"NO\\""},{"question":"You are given a list of integers representing the arrival times of passengers waiting for an elevator in a building. The elevator operates in such a way that it can pick up multiple passengers at the same time if they arrive within a certain threshold of time from each other. You need to calculate the minimum number of distinct elevator trips required to pick up all passengers. Each trip can only accommodate those passengers whose arrival times are within a span of D minutes from the earliest passenger in that trip. Input format The first line of input contains two space-separated integers N and D, where N is the number of passengers and D is the maximum allowable time span for a single trip. The second line of input contains N space-separated integers denoting the arrival times of the passengers. Output format Output one integer: the minimum number of distinct elevator trips required. Constraints 1 ≤ N ≤ 10^5 1 ≤ D ≤ 10^9 1 ≤ arrival times ≤ 10^9 *Note: All arrival times are unique.* SAMPLE INPUT 5 3 1 2 3 10 11 SAMPLE OUTPUT 2 Explanation The first trip can include passengers arriving at times 1, 2, and 3 since they all arrive within a span of 3 minutes. The second trip will include the remaining passengers arriving at times 10 and 11, who also arrive within a span of 3 minutes.","solution":"def minimum_elevator_trips(n, d, arrival_times): Calculate the minimum number of distinct elevator trips required to pick up all passengers. Parameters: - n: int, number of passengers - d: int, maximum allowable time span for a single trip - arrival_times: list of int, arrival times of the passengers Returns: - int, minimum number of distinct elevator trips required if n == 0: return 0 arrival_times.sort() trips = 0 i = 0 while i < n: trips += 1 start_time = arrival_times[i] # Move to the last passenger that can be included in the current trip while i < n and arrival_times[i] <= start_time + d: i += 1 return trips"},{"question":"Major Mickle has discovered a new alien species living on a distant planet, and she\'s been assigned to study their unique communication patterns. The aliens communicate by sending sequences of numbers through a device. To understand their language, Major Mickle needs to determine the longest increasing subsequence in these sequences. Your task is to write a program to help Major Mickle determine the length of the longest increasing subsequence in a given sequence of numbers. An increasing subsequence is a subsequence of numbers in the given sequence where each number is greater than the one preceding it. Input The input consists of an integer sequence. The first integer indicates N (1 ≤ N ≤ 2,000), the number of integers in the sequence. Each of the following N lines contains one integer which can range from -10,000 to 10,000. Output Output the length of the longest increasing subsequence. Example Input 6 10 22 9 33 21 50 Output 4 Explanation In the example, the longest increasing subsequence is [10, 22, 33, 50], and its length is 4.","solution":"def longest_increasing_subsequence(sequence): Returns the length of the longest increasing subsequence in the given sequence. if not sequence: return 0 n = len(sequence) dp = [1] * n # dp[i] will be the length of the longest increasing subsequence ending at index i for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a non-negative integer array. We rotate the array to the right by k steps, where k is non-negative. Write a function to rotate the array in-place and return the modified array. Input An integer n (0 ≤ n ≤ 10^5) representing the size of the array followed by n integers representing the elements of the array. Another integer k (0 ≤ k ≤ 10^5) representing the number of steps to rotate. Output Return the modified array after k rotations to the right. Examples Input 5 1 2 3 4 5 2 Output 4 5 1 2 3 Input 7 10 20 30 40 50 60 70 3 Output 50 60 70 10 20 30 40 Note In the first test case, k=2 rotations move the elements to the right two steps: [4, 5, 1, 2, 3]. In the second test case, k=3 rotations move the elements to the right three steps: [50, 60, 70, 10, 20, 30, 40].","solution":"def rotate_array(n, array, k): Rotate the given array to the right by k steps. :param n: Length of the array :param array: List of integers :param k: Number of steps to rotate the array to the right :return: The rotated array k = k % n # To handle cases where k is larger than n return array[-k:] + array[:-k]"},{"question":"You are participating in a marathon where there are multiple checkpoints. Each checkpoint gives out a unique number of energy drinks. Your task is to determine if it is possible to exchange some of the energy drinks at one checkpoint to another such that the number of energy drinks at each checkpoint becomes equal. Given the number of energy drinks at three checkpoints x, y, and z, decide whether it is possible to distribute such that each checkpoint ends up with an equal number of drinks. Note that you can only exchange whole energy drinks between checkpoints. Constraints * 0 ≦ x, y, z ≦ 100 Input The input is given from Standard Input in the following format: x y z Output If it is possible to distribute the energy drinks so that each checkpoint has the same number of drinks, print `Possible`. Otherwise, print `Impossible`. Examples Input 7 10 13 Output Possible Input 0 5 9 Output Impossible Input 3 3 3 Output Possible","solution":"def can_make_equal(x, y, z): Determines if it\'s possible to distribute energy drinks so that each checkpoint ends up with the same number of drinks. Args: x (int): Energy drinks at checkpoint 1. y (int): Energy drinks at checkpoint 2. z (int): Energy drinks at checkpoint 3. Returns: str: \'Possible\' if redistribution can make all checkpoints have equal drinks, else \'Impossible\'. total = x + y + z if total % 3 == 0: return \'Possible\' else: return \'Impossible\'"},{"question":"In a university, there is a computerized system that records the login and logout times of students using the library\'s facilities. Each student is uniquely identified by their student ID, and each login or logout time is recorded in a 24-hour format (HH:MM). Your task is to determine the maximum number of students that were logged in at the library at the same time. Input The first line contains an integer n (1 ≤ n ≤ 2 × 10^5) — the number of login or logout events. The following n lines contain: - A string \\"LOGIN hh:mm SID\\" indicating a student with ID SID logged in at time hh:mm. - A string \\"LOGOUT hh:mm SID\\" indicating a student with ID SID logged out at time hh:mm. Each student logs in and logs out exactly once. Output Print a single integer — the maximum number of students that were logged in at the same time. Examples Input 5 LOGIN 10:00 123 LOGIN 10:30 456 LOGOUT 11:00 123 LOGIN 11:00 789 LOGOUT 11:30 456 LOGOUT 12:00 789 Output 2 Input 3 LOGIN 09:00 111 LOGIN 09:10 222 LOGOUT 09:20 111 Output 2","solution":"def max_students_logged_in(n, events): from collections import defaultdict time_points = [] for event in events: parts = event.split() time = int(parts[1][:2]) * 60 + int(parts[1][3:]) if parts[0] == \\"LOGIN\\": time_points.append((time, 1)) elif parts[0] == \\"LOGOUT\\": time_points.append((time, -1)) time_points.sort() current_students = 0 max_students = 0 for time, count in time_points: current_students += count max_students = max(max_students, current_students) return max_students"},{"question":"You are given a string representation of a binary tree, and your task is to find the height of this binary tree. The height of a binary tree is the length of the longest path from the root to a leaf. A binary tree is represented in a string format similar to nested parentheses. For example: - The string \\"()\\" represents an empty tree. - The string \\"(())\\" represents a tree with a root and one empty child. - The string \\"( () ( () ) )\\" represents a tree with a root, a left child that is empty, and a right child that has one empty child. Your goal is to parse the given string and determine the height of the binary tree. Input: - A single line containing a string s of length between 2 and 105, representing the binary tree in the nested parentheses format. The string is guaranteed to be a valid binary tree representation. Output: - A single integer representing the height of the binary tree. Examples: Input (()) Output 1 Input ( ( () () ) ( () ) ) Output 2 Input ( ( ()) () ) Output 2 Input () Output 0 Note: 1. An empty tree \\"()\\" has a height of 0. 2. A tree with a root and one level of children has a height of 1. 3. The parentheses structure should be properly nested and balanced, representing valid binary trees only.","solution":"def find_tree_height(s): Finds the height of a binary tree represented as a nested parentheses string. Args: s (str): A string representing the binary tree. Returns: int: The height of the binary tree. def helper(index): if s[index] == \'(\' and s[index + 1] == \')\': return 0, index + 1 index += 1 # Skip initial \'(\' if s[index] == \'(\': left_height, index = helper(index) # Left subtree height else: left_height, index = 0, index + 1 # Skip empty left subtree if s[index] == \'(\': right_height, index = helper(index) # Right subtree height else: right_height, index = 0, index + 1 # Skip empty right subtree height = 1 + max(left_height, right_height) index += 1 # Skip closing \')\' return height, index height, _ = helper(0) return height"},{"question":"Rika is organizing toy blocks by color. She has three types of blocks: red, blue, and green. She has a total of X red blocks, Y blue blocks, and Z green blocks. She wants to arrange these blocks into several sets, such that each set contains every type of block, and each type of block appears exactly once in each set. Your task is to determine the maximum number of sets of blocks that can be created. Constraints * 1 leq X, Y, Z leq 100 * X, Y, and Z are integers. Input Input is given from Standard Input in the following format: X Y Z Output Print the maximum number of sets of blocks that can be created. Examples Input 6 4 8 Output 4 Input 3 5 2 Output 2","solution":"def max_block_sets(X, Y, Z): Returns the maximum number of sets that can be formed such that each set contains 1 red, 1 blue, and 1 green block. return min(X, Y, Z)"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to process several queries on this string. Each query is described by a pair of integers `(l, r)` and a character `c`. For each query, you need to count the number of occurrences of the character `c` in the substring `s[l:r]` (1-based indexing and inclusive). Input: - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 2·10^5) — the length of the string and the number of queries. - The second line contains the string `s` of length `n`. - Each of the next `q` lines contains a query represented by a pair of integers `l` and `r` (1 ≤ l ≤ r ≤ n) and a character `c`. Output: - For each query, print the number of occurrences of the character `c` in the substring `s[l:r]`. Example: Input: 10 3 abacabadab 1 3 a 2 5 c 1 10 b Output: 2 1 3 Explanation: 1. For the substring \\"aba\\", the character \'a\' appears 2 times. 2. For the substring \\"bac\\", the character \'c\' appears 1 time. 3. For the entire string \\"abacabadab\\", the character \'b\' appears 3 times.","solution":"def count_character_occurrences(n, q, s, queries): results = [] for query in queries: l, r, c = query count = s[l-1:r].count(c) results.append(count) return results # Example usage n = 10 q = 3 s = \\"abacabadab\\" queries = [(1, 3, \'a\'), (2, 5, \'c\'), (1, 10, \'b\')] print(count_character_occurrences(n, q, s, queries)) # Output: [2, 1, 3]"},{"question":"You are given two positive integers n and m. You need to construct a rectangle of size n × m using identical smaller tiles of size a × a. Integer a (the length of a side of the tile) should be as large as possible. Your task is to determine the side length a of the largest possible tile that can be used to completely cover the rectangle without any gaps or overlapping. Input The input contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the rectangle. Output Print a single integer which is the side length a of the largest possible square tile. Examples Input 10 15 Output 5 Input 24 18 Output 6","solution":"import math def largest_tile_size(n, m): Return the side length a of the largest possible square tile that can be used to completely cover the rectangle of size n x m without any gaps or overlapping. return math.gcd(n, m)"},{"question":"In a remote village, people celebrate the autumn festival by constructing towers made of magical stones. Each stone has certain energy levels, and the villagers want to build the highest possible tower with the given stones\' energy levels. Each tower must be constructed from a sequence of increasing stone energies (i.e., each stone placed on top must have a higher energy level than the stone below it). Write a program that determines the maximum number of stones that can be used to construct a single tower. Input The input is given in the following format: N e1 e2 e3 ... eN Where N (1 ≤ N ≤ 1000) is the number of stones, and e1, e2, e3, ..., eN (1 ≤ ei ≤ 1000) are the energy levels of each stone, separated by a space. Output Output the maximum number of stones that can be used to construct a single tower in one line. Examples Input 5 5 1 6 2 4 Output 3 Input 6 1 3 2 5 4 6 Output 4","solution":"def max_stones_in_tower(N, stones): Returns the maximum number of stones that can be used to construct a single tower. Each tower must be constructed from a sequence of increasing stone energies. if N == 0: return 0 # Initializing the dp array where dp[i] will be the length of the longest increasing subsequence ending with stone[i] dp = [1] * N for i in range(1, N): for j in range(0, i): if stones[i] > stones[j]: dp[i] = max(dp[i], dp[j] + 1) # The result will be the maximum value in dp array return max(dp)"},{"question":"You are given a binary string S of length N. An operation is defined as selecting a substring that contains only \'1\'s and flipping all the characters in that substring (i.e., changing \'1\'s to \'0\'s). You can perform this operation any number of times (including zero). Determine the minimum number of operations needed to transform the string S into a string that contains no \'1\'s. Constraints * 1 leq N leq 1000 * S contains only \'0\'s and \'1\'s. Input Input is given from Standard Input in the following format: N S Output Print the minimum number of operations needed. Examples Input 5 11001 Output 2 Input 8 10011011 Output 3 Input 3 000 Output 0","solution":"def min_operations_to_0s(n, s): Returns the minimum number of operations needed to transform the string S into a string that contains no \'1\'s. if \'1\' not in s: return 0 count_operations = 0 i = 0 while i < n: if s[i] == \'1\': count_operations += 1 while i < n and s[i] == \'1\': i += 1 else: i += 1 return count_operations"},{"question":"You are given a list of n integers, representing responses from students in a class. Each response is an integer between 1 and 5. The task is to find the most common response. If there is a tie for the most common response, choose the smallest value. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of students. The next line contains n integers, each between 1 and 5, representing the responses from the students. Output Print the most common response. If there is a tie, print the smallest response among the ties. Examples Input 7 1 2 3 4 5 2 2 Output 2 Input 8 4 4 4 5 5 5 1 1 Output 4 Note In the first example, the response \'2\' appears most frequently, so the output is 2. In the second example, both \'4\' and \'5\' appear most frequently (i.e., 3 times each), but since 4 < 5, the output is 4.","solution":"def most_common_response(n, responses): Returns the most common response. In case of a tie, returns the smallest response. from collections import Counter response_count = Counter(responses) most_common = response_count.most_common() most_frequent_count = most_common[0][1] most_frequent_responses = [response for response, count in most_common if count == most_frequent_count] # Return the smallest response among the most frequent ones return min(most_frequent_responses)"},{"question":"You are given a list of n integers. Your task is to determine the longest contiguous subsequence that, when sorted, equals another contiguous subsequence that is already sorted in non-decreasing order in the original list. Note that the subsequence you are sorting must be contiguous in the original list but the sorted comparison subsequence might come from any part of the original list. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) – the number of integers in the list. The second line contains n space-separated integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 100 000) – the elements of the list. Output Print a single integer – the length of the longest contiguous subsequence that, when sorted, matches any contiguous subsequence of the original list which is sorted in non-decreasing order. Example Input 7 3 2 1 4 7 6 5 Output 3 Note In the sample testcase, the subsequence [3, 2, 1] when sorted becomes [1, 2, 3] which is a sorted subsequence of the original list. Therefore, the length of the longest such subsequence is 3.","solution":"def longest_matching_sorted_subsequence_length(n, arr): max_length = 0 # Traverse through the array for i in range(n): for j in range(i, n): # Get current subsequence sub_array = arr[i:j+1] # Sort the current subsequence sorted_sub_array = sorted(sub_array) # Check if the sorted subsequence can be found in the original array as contiguous for k in range(n - len(sorted_sub_array) + 1): if arr[k:k+len(sorted_sub_array)] == sorted_sub_array: max_length = max(max_length, len(sub_array)) break return max_length"},{"question":"Problem: Magical Tree Traversal Jon is practicing his tree traversal algorithms in the magical forest of Norland. The forest is represented as a binary tree where each node has a value and can have up to two child nodes (a left child and a right child). However, the tree can behave magically in such a way that any node can switch its left and right children around if it leads to a better cumulative path value. The goal for Jon is to find the maximum possible sum of node values along any path from the root to any leaf node. A path from the root to a leaf node includes the root node, leaf node, and any nodes in between, but the nodes can only be visited once per path. Jon can use the magical property of the tree to maximize the sum by swapping the left and right children of any node. Write a program that, given the structure and values of the binary tree, computes the maximum possible sum of values along any path from the root to a leaf node. # Input Format - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of nodes in the tree. - The next `n` lines each contain three integers `node`, `left`, and `right` where: * `node` is the value of the node (absolute value ≤ 1000). * `left` is the index of the left child node (or -1 if there is no left child). * `right` is the index of the right child node (or -1 if there is no right child). - Nodes are indexed from 0 to n-1, with node 0 being the root of the tree. # Output Format - Output a single integer, which is the maximum possible sum along any path from the root to a leaf node. # Example Input ``` 5 10 1 2 2 -1 -1 10 3 4 1 -1 -1 5 -1 -1 ``` Output ``` 25 ``` # Explanation Here, the binary tree can be visualized as: ``` 10 / 2 10 / 1 5 ``` To get the maximum sum, we take the path: `10 -> 10 -> 5`, which gives us the sum `25`. # Note - Paths are non-overlapping, and swapping of children nodes is allowed while computing the paths. - The path with the highest achievable sum is the one to be considered for the output.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_path_sum(root): if not root: return 0 left_sum = max_path_sum(root.left) right_sum = max_path_sum(root.right) return root.value + max(left_sum, right_sum) def build_tree(nodes_info): if not nodes_info: return None nodes = [TreeNode(value=0) for _ in range(len(nodes_info))] for i, (value, left, right) in enumerate(nodes_info): nodes[i].value = value if left != -1: nodes[i].left = nodes[left] if right != -1: nodes[i].right = nodes[right] return nodes[0] def magical_tree_traversal(n, nodes_info): root = build_tree(nodes_info) return max_path_sum(root) # Example usage n = 5 nodes_info = [(10, 1, 2), (2, -1, -1), (10, 3, 4), (1, -1, -1), (5, -1, -1)] print(magical_tree_traversal(n, nodes_info)) # Output should be 25"},{"question":"You are given a `sqrt` function that calculates the square root of a number `x` with high precision. However, this function is slow for smaller values of `x`. To optimize the calculation, we divide the input into large segments, precompute the square roots for the large segments, and then use a fast yet slightly less accurate method for fine-tuning within each segment. Given an array of `n` numbers, your task is to compute the square roots of all the numbers efficiently using the described method. Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000), where `n` is the number of elements in the array, and `m` is the size of each segment. - The second line contains `n` integers `xi` (1 ≤ xi ≤ 10^6), representing the elements of the array. Output: - Print `n` floating-point numbers with an accuracy of 6 decimal places, representing the square roots of the numbers from the input array. Constraints: - The optimized method uses precomputed values for `m` segments, and for values falling within each segment, a faster approximate method is applied. Examples Input: 5 2 1 4 9 16 25 Output: 1.000000 2.000000 3.000000 4.000000 5.000000 Input: 3 2 36 49 64 Output: 6.000000 7.000000 8.000000 Explanation: In the first example, the numbers are perfectly square, and the method computes the square roots directly within each segment. The accurate results are obtained, showing the efficiency of the approach.","solution":"import math def compute_optimized_sqrt(n, m, array): # Precompute the square roots for m segments precomputed_sqrt = [math.sqrt(i) for i in range(m + 1)] # Function to compute sqrt for a given value using precomputed values and interpolation def optimized_sqrt(x): if x <= m: return precomputed_sqrt[x] else: # Faster approximation for values within segments (using Newton\'s method) # Start with a reasonable initial guess guess = math.sqrt(x) for _ in range(5): # Perform 5 iterations to improve accuracy guess = 0.5 * (guess + x / guess) return guess # Compute and store results results = [optimized_sqrt(x) for x in array] return results def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) array = [int(data[i]) for i in range(2, 2 + n)] results = compute_optimized_sqrt(n, m, array) for result in results: print(f\\"{result:.6f}\\")"},{"question":"Create a function that takes a string `s` and an integer `k` as input. The function should return the length of the longest substring of `s` that contains at most `k` distinct characters. **Function Signature:** ```python def longest_substring_k_distinct(s: str, k: int) -> int: pass ``` **Input:** - `s` (1 <= len(s) <= 10^5): a string consisting of lowercase English letters. - `k` (1 <= k <= 26): an integer representing the maximum number of distinct characters allowed in the substring. **Output:** - An integer representing the length of the longest substring with at most `k` distinct characters. **Example:** ```python s = \\"eceba\\" k = 2 print(longest_substring_k_distinct(s, k)) # Output: 3 ``` Explanation: The longest substring with at most 2 distinct characters is \\"ece\\", which has a length of 3. **Note:** - Ensure your solution is efficient enough to handle the upper constraint limits.","solution":"def longest_substring_k_distinct(s: str, k: int) -> int: from collections import defaultdict if k == 0: # edge case where 0 distinct characters are allowed, return 0 return 0 n = len(s) if n == 0: return 0 left = 0 right = 0 max_length = 0 char_map = defaultdict(int) while right < n: char_map[s[right]] += 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"A new messaging application is being developed where users can subscribe to different channels and receive messages specific to those channels. In order to optimize the message delivery system, the application needs a function to analyze the structure of the channels and the subscriptions. The application models channels and subscriptions as a graph where each node represents a user, and there is a directed edge from node A to node B if user A has subscribed to user B\'s channel. Given this graph, the application needs to determine the transitive closure of the subscription graph, which essentially finds out for each user, all the users they will receive messages from either directly or indirectly via other subscriptions. Write a program that computes the transitive closure of the subscription graph using the Floyd-Warshall algorithm. Input The first line contains two integers `n` (1 ≤ n ≤ 200) and `m` (0 ≤ m ≤ n(n-1)) — the number of users and the number of subscriptions. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), representing that user `u` has subscribed to user `v`. Output Output the transitive closure matrix of the subscription graph. This should be an `n × n` matrix where the `i-th` row and `j-th` column is 1 if user `i` can receive messages from user `j`, either directly or indirectly, and 0 otherwise. Example Input: 4 3 1 2 2 3 3 4 Output: 1 1 1 1 0 1 1 1 0 0 1 1 0 0 0 1 Input: 3 2 1 2 2 1 Output: 1 1 0 1 1 0 0 0 1 Explanation: In the first example, user 1 has subscribed to user 2, user 2 to user 3, and user 3 to user 4. Therefore, user 1 can receive messages from all other users, user 2 can receive messages from users 3 and 4, user 3 can receive messages from user 4, and user 4 cannot receive messages from any other user. In the second example, users 1 and 2 have subscribed to each other, and user 3 has no subscriptions. Thus, users 1 and 2 can receive messages from each other, and user 3 can only receive messages from itself.","solution":"def transitive_closure(n, m, subscriptions): # Initialize the matrix with 0s and the diagonal with 1s tc = [[0] * n for _ in range(n)] for i in range(n): tc[i][i] = 1 # Fill the direct subscriptions for u, v in subscriptions: tc[u-1][v-1] = 1 # Floyd-Warshall algorithm to compute the transitive closure for k in range(n): for i in range(n): for j in range(n): tc[i][j] = tc[i][j] or (tc[i][k] and tc[k][j]) return tc # Example usage: n = 4 m = 3 subscriptions = [(1, 2), (2, 3), (3, 4)] result = transitive_closure(n, m, subscriptions) for row in result: print(\' \'.join(map(str, row)))"},{"question":"Given an array of integers, find the length of the longest subarray where the sum of the elements is non-negative. Constraints * 1 leq n leq 10^5 * -10^9 leq A_i leq 10^9 * All elements of the array A are integers Input The input is given from Standard Input in the following format: n A_1 A_2 ... A_n Output Print the length of the longest subarray with a non-negative sum. Examples Input 5 1 2 -3 4 5 Output 5 Input 4 -1 -1 -1 1 Output 1","solution":"def length_of_longest_non_negative_sum_subarray(n, arr): max_len = 0 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum < 0 and start <= end: current_sum -= arr[start] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"Given a circular array of integers, return the starting index of the subarray having the maximum sum. The subarray can wrap around, meaning the circular nature of the array allows for subarrays that include elements from the end and the beginning of the array. If there are multiple starting indices yielding the same maximum sum, return the smallest index. Input: - The first line contains an integer T, the number of test cases. - Each test case consists of two lines. - The first line contains an integer n, the number of elements in the array. - The second line contains n integers denoting the elements of the array. Output: For each test case, output one line containing the starting index (0-based) of the subarray with the maximum sum. Constraints: 1 ≤ T ≤ 10^4 1 ≤ n ≤ 10^5 -10^4 ≤ array elements ≤ 10^4 SAMPLE INPUT 2 5 1 -2 3 -2 5 4 8 -1 3 4 SAMPLE OUTPUT 2 0 Explanation: In the first test case, the subarray with the maximum sum is [3, -2, 5, 1] with a sum of 7. The starting index is 2. In the second test case, the subarray with the maximum sum is [8, -1, 3, 4] with a sum of 14. The starting index is 0.","solution":"def max_circular_subarray_start_index(arr): n = len(arr) # Function to find max subarray sum using Kadane\'s algorithm def kadane(arr): max_end_here = max_so_far = arr[0] start = end = s = 0 for i in range(1, n): if arr[i] > max_end_here + arr[i]: max_end_here = arr[i] s = i else: max_end_here += arr[i] if max_end_here > max_so_far: max_so_far = max_end_here start = s end = i return max_so_far, start, end # Case 1: Get the maximum sum using standard Kadane\'s algorithm max_kadane_sum, kadane_start, kadane_end = kadane(arr) # Case 2: Get the maximum sum that wraps around the circular array total_sum = sum(arr) # Inverting signs of array elements to find minimum subarray sum arr = [-x for x in arr] max_wrap_sum, _, _ = kadane(arr) max_wrap_sum = total_sum + max_wrap_sum if max_wrap_sum > max_kadane_sum: # Handling the edge case where all numbers are negative if kadane_start == 0 and kadane_end == n - 1: return kadane_start circular_max_sum = max_wrap_sum for i in range(n): if arr[i] == -min(arr): return (i + 1) % n else: circular_max_sum = max_kadane_sum return kadane_start def process_test_cases(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] results.append(max_circular_subarray_start_index(arr)) return results"},{"question":"You are given an array of integers and your task is to find all unique triplets in the array which sum up to zero. Each triplet should be sorted in ascending order, and the entire set of triplets should be sorted lexicographically in the output. Input The first line contains an integer T, denoting the number of test cases. The description of T test cases follows. Each test case contains two lines: - The first line consists of an integer N, denoting the size of the array. - The second line contains N space-separated integers, which represent the elements of the array. Output For each test case, output all the unique triplets that sum to zero, each printed in a new line, followed by a blank line between different test cases. Constraints 1 <= T <= 100 1 <= N <= 1000 -10^5 <= array[i] <= 10^5 Example Input: 2 6 -1 0 1 2 -1 -4 5 0 -1 2 -3 1 Output: -1 -1 2 -1 0 1 -3 1 2 -1 0 1","solution":"def find_triplets(arr): Returns all unique triplets in the array which sum up to zero. arr.sort() triplets = set() n = len(arr) for i in range(n - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, n - 1 while left < right: summation = arr[i] + arr[left] + arr[right] if summation == 0: triplets.add((arr[i], arr[left], arr[right])) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif summation < 0: left += 1 else: right -= 1 return sorted(triplets) def solve_problem(T, test_cases): result = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] triplets = find_triplets(arr) case_result = \\"n\\".join(\\" \\".join(map(str, triplet)) for triplet in triplets) result.append(case_result) return \\"nn\\".join(result)"},{"question":"You are given a series of rocks of different weights arranged in a row. You want to group these rocks into contiguous segments such that each segment\'s rocks have a total weight that does not exceed a specified limit. Your task is to determine the minimal number of segments required to meet this condition. Input The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of rocks. The second line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^4), where w_i is the weight of the i-th rock. The third line contains one integer k (1 ≤ k ≤ 10^9) — the maximum allowable weight for each segment. Output Print one integer, the minimal number of segments required. Example Input 6 2 4 6 3 2 5 10 Output 3 Note Consider the first example. The optimal way to divide the rocks is: - Segment 1: Rocks with weights [2, 4] with total weight 6. - Segment 2: Rocks with weights [6, 3] with total weight 9. - Segment 3: Rocks with weights [2, 5] with total weight 7. Thus, we need a minimal of 3 segments to ensure no segment exceeds the maximum allowable weight of 10.","solution":"def minimal_segments(n, weights, k): Returns the minimal number of segments required such that each segment\'s rocks have a total weight that does not exceed the specified limit. segments = 1 current_weight = 0 for weight in weights: if current_weight + weight <= k: current_weight += weight else: segments += 1 current_weight = weight return segments # Example usage n = 6 weights = [2, 4, 6, 3, 2, 5] k = 10 print(minimal_segments(n, weights, k)) # Should output 3"},{"question":"Alice enjoys planning her vacations meticulously. She\'s planning a summer trip where she travels across various cities connected by a network of direct flights. Each city is represented as a node, and each flight is represented as a directed edge with a certain travel time between two nodes. Alice will start her trip from her home city, and her goal is to visit a specific destination city. However, due to her packed schedule, she wants to minimize the total travel time. You need to help Alice determine the shortest travel time from her home city to her destination city. Given a list of flights represented as `(u, v, w)` where `u` is the starting city, `v` is the destination city, and `w` is the travel time, find the minimum travel time from Alice\'s home city (represented as node `1`) to her destination city (represented as node `N`). If the destination city is not reachable, return `-1`. # Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^6) — the number of cities and flights, respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) — a flight from city `u` to city `v` with travel time `w`. # Output Print a single integer — the minimum travel time from city `1` to city `N`. If city `N` is not reachable from city `1`, print `-1`. # Examples Input ``` 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 ``` Output ``` 6 ``` Input ``` 3 3 1 2 4 2 3 1 3 1 5 ``` Output ``` 5 ``` Input ``` 4 2 1 2 3 3 4 5 ``` Output ``` -1 ``` # Note In the first example, the shortest path from city `1` to city `5` is `1 -> 2 -> 3 -> 5` with a total travel time of `6`. In the second example, the shortest path from city `1` to city `3` is `1 -> 2 -> 3` with a total travel time of `5`. In the third example, city `4` is not reachable from city `1`. Thus, the output is `-1`.","solution":"import heapq def find_shortest_travel_time(n, m, flights): Finds the shortest travel time from city 1 to city N graph = {i: [] for i in range(1, n + 1)} for u, v, w in flights: graph[u].append((v, w)) # Use Dijkstra\'s algorithm to find the shortest path from node 1 to node N def dijkstra(start, end): heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 while heap: current_dist, u = heapq.heappop(heap) if current_dist > distances[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(heap, (distance, v)) return distances[end] if distances[end] != float(\'inf\') else -1 return dijkstra(1, n)"},{"question":"Wolfville is a secluded village near the forest, known for its intricate lantern-making festival. Each year, the villagers celebrate by creating n unique lanterns and hanging them sequentially along the main street. The beauty of the lanterns is admired by both villagers and visitors alike. However, the admiral spectacle can be disrupted by mischievous forest spirits. Each time a spirit visits a lantern, the lantern\'s beauty is reduced by a fixed value k. To protect the lanterns, every lantern has a durability d_i which is initially set. Each time a lantern\'s beauty is reduced, its durability is also reduced. If a lantern\'s durability reaches zero or below, it shatters, and its beauty becomes zero permanently. After p visits by the spirits, the villagers want to know the beauty of each lantern. They also realize that the spirits always visit the lanterns in the same specific sequence. Help the villagers calculate the remaining beauty of each lantern after all p visits by the spirits. # Input - The first line contains three integers n, k, and p (1 ≤ n ≤ 100, 1 ≤ k ≤ 100, 1 ≤ p ≤ 100), representing the number of lanterns, the fixed beauty and durability reduction per visit, and the number of visits by the spirits respectively. - The second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 500), representing the initial beauty of each lantern. - The third line contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 500), representing the initial durability of each lantern. - The fourth line contains p integers v_1, v_2, ..., v_p (1 ≤ v_i ≤ n), representing the sequence of lantern visits by the spirits. # Output - The output contains n integers b\'_1, b\'_2, ..., b\'_n — the remaining beauty of each lantern after all p visits by the spirits. # Examples Input ``` 3 20 5 100 200 150 60 80 200 1 3 2 1 1 ``` Output ``` 0 180 130 ``` Explanation: - Visit sequence: [1, 3, 2, 1, 1] - Initial beauty and durability: [(100, 60), (200, 80), (150, 200)] 1. First visit (lantern 1): - Beauty: 100 - 20 = 80 - Durability: 60 - 20 = 40 2. Second visit (lantern 3): - Beauty: 150 - 20 = 130 - Durability: 200 - 20 = 180 3. Third visit (lantern 2): - Beauty: 200 - 20 = 180 - Durability: 80 - 20 = 60 4. Fourth visit (lantern 1): - Beauty: 80 - 20 = 60 - Durability: 40 - 20 = 20 5. Fifth visit (lantern 1): - Beauty: 60 - 20 = 40 - Durability: 20 - 20 = 0 - Since the durability is zero, the beauty of lantern 1 becomes 0 permanently - Final beauty: [0, 180, 130]","solution":"def calculate_remaining_beauty(n, k, p, initial_beauty, initial_durability, visits): beauty = initial_beauty.copy() durability = initial_durability.copy() for visit in visits: index = visit - 1 if durability[index] > 0: beauty[index] -= k durability[index] -= k if durability[index] <= 0: beauty[index] = 0 return beauty"},{"question":"Alice is a botanist studying a special type of tree that grows according to specific rules. The tree starts with a single root node having a value of 1. Over time, new nodes are added in pairs to the tree following these rules: 1. If a node has value `v`, its left child is given a value of `2 * v`. 2. Its right child is given a value of `2 * v + 1`. Alice wants to know the sum of the values of all nodes at a given depth `d` in the tree. Input: - The first line contains an integer `T`, denoting the number of test cases. - Each of the next `T` lines contains an integer `d`, the depth of the tree for which you need to calculate the sum of the node values. Output: - For each test case, output a single integer, which is the sum of the values of all nodes at depth `d`. Constraints: - 1 ≤ T ≤ 10^5 - 0 ≤ d ≤ 10^5 Example: Input: 3 0 1 2 Output: 1 6 28 Explanation: - For depth 0, the tree has just the root node with value 1. - For depth 1, the tree has two nodes with values 2 and 3, sum is 2 + 3 = 5. - For depth 2, the tree has four nodes with values 4, 5, 6, and 7, sum is 4 + 5 + 6 + 7 = 22. - ...","solution":"def sum_of_values_at_depth(d): This function calculates the sum of node values at a given depth d in a tree where each node value follows specific rules. Args: d (int): depth of the tree. Returns: int: sum of the values of all nodes at depth d. # For depth d, the sum can be calculated using summation of arithmetic series. # The nodes at depth d would be from value 2^d to 2^(d+1) - 1. if d == 0: return 1 start_value = 2 ** d end_value = 2 ** (d + 1) return sum(range(start_value, end_value)) def get_sums_for_depths(depths): Calculates sums of node values at the given list of depths in a tree. Args: depths (list of int): list of depths Returns: list of int: list of sums of the values of all nodes at each depth return [sum_of_values_at_depth(d) for d in depths]"},{"question":"Bertown just received a shipment of N new defense drones. Each drone has the ability to cover a continuous vertical segment of the city\'s perimeter for a certain duration. You have been given the task to position the drones such that they provide the maximum possible coverage of the city perimeter with minimal overlap. The city perimeter is represented as a straight line segment on the x-axis from x = 0 to x = L. Each drone has a vertical cover range associated with it, represented by the coordinates (xi, zi), meaning that the drone covers from xi to zi on the x-axis during its operational duration. Your task is to determine the maximum total length of the city perimeter covered by the drones, considering the possibility of overlapping segments. Input The first line contains two integers N and L (1 ≤ N ≤ 1000, 1 ≤ L ≤ 10000), which represent the number of drones and the length of the city perimeter respectively. The next N lines each contain two integers xi and zi (0 ≤ xi < zi ≤ L), which represent the start and end of the coverage range of each drone. Output Print a single integer representing the maximum possible length of the city perimeter that can be covered by the drones. Example Input 4 10 0 5 3 8 7 10 1 6 Output 10","solution":"def max_coverage(N, L, intervals): Returns the maximum possible length of the city perimeter that can be covered by the drones given the list of coverage intervals. N: int: number of drones L: int: length of the city perimeter intervals: List[Tuple[int, int]]: list of tuples representing the start and end of the coverage range of each drone return: int: maximum length of city perimeter covered if not intervals: return 0 # Sort intervals by starting point - if equal, sort by ending point sorted_intervals = sorted(intervals, key=lambda x: (x[0], x[1])) # Initialize the combined coverage max_cover = 0 current_start, current_end = sorted_intervals[0] for i in range(1, N): start, end = sorted_intervals[i] if start > current_end: max_cover += current_end - current_start current_start, current_end = start, end else: current_end = max(current_end, end) max_cover += current_end - current_start return min(max_cover, L) # Example execution example_N = 4 example_L = 10 example_intervals = [(0, 5), (3, 8), (7, 10), (1, 6)] print(max_coverage(example_N, example_L, example_intervals)) # Output should be 10"},{"question":"John is organizing his bookshelf. The bookshelf consists of several shelves, and each shelf can hold a maximum of M books. John has a collection of N books, each with a unique height, and the books must be placed in non-ascending order of height on each shelf. A shelf should be as full as possible before starting to place books on a new shelf. John wants to know how many shelves he will need to organize all his books following the given conditions. Input format The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains two space-separated integers N and M. The second line of each test case contains N space-separated integers denoting the heights of the books. Output format For each test case, output one integer per line denoting the number of shelves required. Constraints 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10^3 1 ≤ height of each book ≤ 10^9 sum of N over all test cases ≤ 10^6 SAMPLE INPUT 2 5 2 4 3 2 1 5 7 3 5 3 9 1 8 2 6 SAMPLE OUTPUT 3 3 Explanation For the first test case, the shelves are organized as follows: Shelf 1: 5, 4 Shelf 2: 3, 2 Shelf 3: 1 For the second test case, the shelves are organized as follows: Shelf 1: 9, 8, 6 Shelf 2: 5, 3, 2 Shelf 3: 1","solution":"def number_of_shelves(T, test_cases): results = [] for i in range(T): N, M, heights = test_cases[i] heights.sort(reverse=True) shelves = 0 for j in range(0, N, M): shelves += 1 results.append(shelves) return results"},{"question":"In a far-off kingdom, there resides a wise mathematician named Aria. Aria loves playing with numbers, especially focusing on prime numbers and their properties. She has recently discovered an interesting property concerning prime factors and wants to explore it further. Given an integer n (1 ≤ n ≤ 10^6), Aria wants to find the maximum difference between any two prime factors of n. More formally, if p1 and p2 are prime factors of n, she wants to maximize |p1 - p2|. If n has less than 2 prime factors, return -1. Help Aria by writing a program that, given multiple integers, computes the desired maximum difference for each integer. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The next t lines each contain a single integer n. Output For each test case, output one integer — the maximum difference between any two prime factors of n, or -1 if n has less than 2 prime factors. Example Input 3 6 15 13 Output 3 2 -1 Note In the first test case, the prime factors of 6 are 2 and 3. The maximum difference is |2 - 3| = 1. In the second test case, the prime factors of 15 are 3 and 5. The maximum difference is |3 - 5| = 2. In the third test case, the prime factor of 13 is only 13 itself, thus return -1 as there are less than 2 prime factors.","solution":"def find_prime_factors(n): Returns the list of prime factors of n. prime_factors = [] # Check for number of 2s that divide n while n % 2 == 0: prime_factors.append(2) n = n // 2 # n must be odd at this point so a skip of 2 (i = i + 2) can be used for i in range(3, int(n**0.5)+1, 2): while n % i == 0: prime_factors.append(i) n = n // i # This condition is to check if n is a prime number greater than 2 if n > 2: prime_factors.append(n) return list(set(prime_factors)) def max_prime_factor_diff(n): Returns the maximum difference between any two prime factors of n. prime_factors = find_prime_factors(n) if len(prime_factors) < 2: return -1 else: return max(prime_factors) - min(prime_factors) def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for n in test_cases: results.append(max_prime_factor_diff(n)) return results"},{"question":"Consider the following problem: You are given a list of pairs representing the edges of a directed graph. Each pair (u, v) means there is a directed edge from node u to node v. Your task is to determine if there is a cycle in this graph. A cycle in a directed graph means starting from a node, you can traverse through the edges and eventually return to the starting node. Implement a function `has_cycle(edges)` that accepts a list of pairs `edges` representing the directed edges of the graph and returns `True` if there is a cycle in the graph, otherwise returns `False`. Input: - The function has_cycle receives a single argument: - `edges`: A list of tuples/lists `(u, v)`, where `u` and `v` are integers representing the nodes. Output: - The function should return a boolean value: - `True` if there is a cycle in the graph. - `False` otherwise. Examples: Input: edges = [(0, 1), (1, 2), (2, 0)] Output: True Input: edges = [(0, 1), (1, 2), (2, 3)] Output: False Explanation: In the first example, there is a cycle (0 -> 1 -> 2 -> 0). In the second example, there is no cycle.","solution":"def has_cycle(edges): from collections import defaultdict def dfs(v): visited[v] = True rec_stack[v] = True for neighbour in graph[v]: if not visited[neighbour]: if dfs(neighbour): return True elif rec_stack[neighbour]: return True rec_stack[v] = False return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = defaultdict(bool) rec_stack = defaultdict(bool) for node in list(graph): if not visited[node]: if dfs(node): return True return False"},{"question":"Alice is a researcher and developer who specializes in exploring sequences and their properties. She recently encountered a sequence transformation problem and needs your assistance. Define a function g(a) where `a` is a sequence of positive integers. Function g(a) returns the transformed sequence based on the following rule: replace each element ai in the sequence `a` with the sum of the digits of ai in base-10 representation. For example, g([12, 7, 125]) = [3, 7, 8] because the sum of digits is 1+2=3, 7=7, and 1+2+5=8 respectively. Let\'s determine the sequence Yi for integer i (i ≥ 0): Y0 = [Y] ([Y] is a sequence consisting of a single number Y), Yi = g(Yi - 1) (i > 0). For example, at Y = 29 we get Y0 = [29], Y1 = [2+9=11], Y2 = [1+1=2]. Given the numbers Y and m, find the sequence Ym. If the sum of the digits of a number reduces to a single digit, the sequence should terminate with that single digit number. Input A single line contains two space-separated integers — Y (1 ≤ Y ≤ 10^12) and m (0 ≤ m ≤ 10^18). Output Print the elements of the sequence Ym in a single line, separated by a space. If the number of elements exceeds 10^5, then print only the first 10^5 elements. Examples Input 29 1 Output 11 Input 123 2 Output 6","solution":"def sum_of_digits(n): Returns the sum of the digits of a number n. return sum(int(digit) for digit in str(n)) def g(a): Transforms the sequence a by replacing each element with the sum of its digits. return [sum_of_digits(num) for num in a] def find_Ym(Y, m): Given a number Y and an integer m, find the sequence Ym. Ym = [Y] for _ in range(m): Ym = g(Ym) # Stop if all numbers in Ym have only one digit if all(num < 10 for num in Ym): break return Ym def Y_sequence(Y, m): Given a number Y and an integer m, find the sequence Ym and format the result. Ym = find_Ym(Y, m) result = \' \'.join(map(str, Ym[:10**5])) return result"},{"question":"Write a function to determine the longest substring with all distinct characters from a given string. The substring should not have any repeating characters. The function should take a single input, a string `s` consisting of only ASCII characters, and return the length of the longest such substring. Input Constraints: - The input string `s` can be empty or have a maximum length of 10,000 characters. Output: - The function should return a single integer indicating the maximum length of the substring with all unique characters. Examples: Input: ``` \\"abcabcbb\\" ``` Expected Output: ``` 3 ``` (Explanation: \\"abc\\" is the longest substring with no repeating characters.) Input: ``` \\"bbbbb\\" ``` Expected Output: ``` 1 ``` (Explanation: All characters are the same, so the longest substring with all distinct characters is \\"b\\".) Input: ``` \\"pwwkew\\" ``` Expected Output: ``` 3 ``` (Explanation: \\"wke\\" is the longest substring with no repeating characters. Note that \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. seen = {} max_length = 0 start = 0 for end in range(len(s)): if s[end] in seen: start = max(start, seen[s[end]] + 1) seen[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Alice is given an array of integers and she wants to transform it into a strictly increasing sequence. She can perform the following operation: 1. Choose a subarray of length at most k (1 ≤ k ≤ n), reverse the entire subarray, and replace the original subarray in the array with the reversed one. This operation can be performed any number of times. Given the array a of length n (1 ≤ n ≤ 10^5) and the integer k, write a program to determine if Alice can transform the array into a strictly increasing sequence using the described operation. Input The first line contains two integers n and k (1 ≤ k ≤ n), the length of the array and the maximum length of the subarray to be chosen for each operation respectively. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). Output Output \\"YES\\" if Alice can transform the array into a strictly increasing sequence, otherwise output \\"NO\\". Examples Input 5 2 3 5 2 6 4 Output YES Input 4 3 8 2 4 3 Output NO Note In the first example, Alice can choose the subarray a[2...3] and reverse it to get: [3, 2, 5, 6, 4] → [3, 2, 6, 5, 4]. Then choose the subarray a[2...4] and reverse it to get: [3, 2, 6, 5, 4] → [3, 5, 6, 2, 4]. Now choose the subarray a[4...5] and reverse it to get [3, 5, 6, 2, 4] → [3, 5, 4, 2, 6]. Now choose the subarray a[2...3] and reverse it to get [3, 5, 4, 2, 6] → [3, 4, 5, 2, 6]. Now the array is strictly increasing. In the second example, no sequence of operations will result in a strictly increasing sequence.","solution":"def can_become_increasing(n, k, array): This function checks if the array can be transformed into a strictly increasing sequence by reversing subarrays of size at most k. for i in range(n - k + 1): if array[i:i + k] == sorted(array[i:i + k]): return \\"YES\\" if k >= n: return \\"YES\\" # Otherwise, the remaining sequence cannot be improved with just k-length reversals for i in range(n - 1): if array[i] >= array[i + 1]: return \\"NO\\" return \\"YES\\""},{"question":"Given an array of integers, determine the length of the longest subarray whose elements form a contiguous sequence (not necessarily distinct). Input Format: The first line contains an integer T, the number of test cases. Each of the next T test cases contains two lines: - The first line contains an integer N, the size of the array. - The second line contains N space-separated integers. Output Format: For each test case, output the length of the longest contiguous subarray. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^6 ≤ A[i] ≤ 10^6 Sample Explanation: Case #1: Input array: [1, 2, 3, 5, 6] The longest subarray with contiguous elements is [1, 2, 3] with length 3. Case #2: Input array: [10, 12, 11, 14, 13] The longest subarray with contiguous elements is [10, 12, 11, 14, 13] with length 5. SAMPLE INPUT 2 5 1 2 3 5 6 5 10 12 11 14 13 SAMPLE OUTPUT 3 5","solution":"def longest_contiguous_subarray(arr): Determine the length of the longest subarray whose elements form a contiguous sequence. n = len(arr) max_len = 0 for i in range(n): min_elem, max_elem = arr[i], arr[i] for j in range(i, n): min_elem = min(min_elem, arr[j]) max_elem = max(max_elem, arr[j]) if max_elem - min_elem == j - i: max_len = max(max_len, j - i + 1) return max_len def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] result = longest_contiguous_subarray(arr) results.append(result) return results def get_results_from_input(input_lines): input_lines_list = input_lines.strip().split(\'n\') T = int(input_lines_list[0]) idx = 1 test_cases = [] for _ in range(T): N = int(input_lines_list[idx]) arr = list(map(int, input_lines_list[idx + 1].strip().split())) test_cases.append((N, arr)) idx += 2 results = process_test_cases(T, test_cases) return results # Sample usage input_lines = 2 5 1 2 3 5 6 5 10 12 11 14 13 print(get_results_from_input(input_lines))"},{"question":"You are given a list of cities with their respective coordinates on a 2D plane. Your task is to find the optimal way to connect all the cities using roads, so that the total length of the roads is minimized. This is essentially a Minimum Spanning Tree (MST) problem where each city is a vertex and the roads between cities represent the edges. Input - The first line contains an integer N, the number of cities (1 leq N leq 1000). - Each of the next N lines contains two integers, x_i and y_i, representing the coordinates of the i-th city (-10,000 leq x_i, y_i leq 10,000). Output - Output a single floating-point number representing the total length of the minimum spanning tree, rounded to 2 decimal places. Example # Input ``` 4 0 0 0 1 1 0 1 1 ``` # Output ``` 3.00 ``` # Explanation The cities form a square with side length of 1. The MST can have edges of lengths 1, 1, and 1, summing up to a total length of 3.00.","solution":"import math import heapq def calculate_distance(x1, y1, x2, y2): return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) def minimum_spanning_tree(cities): N = len(cities) if N == 0: return 0.0 # Initialize the adjacency list for the graph edges = [(0, i, 0) for i in range(N)] visited = [False] * N min_heap = [(0, 0)] # (cost, current_city) total_cost = 0.0 edges_in_mst = 0 while min_heap and edges_in_mst < N: cost, current_city = heapq.heappop(min_heap) if visited[current_city]: continue visited[current_city] = True total_cost += cost edges_in_mst += 1 for next_city in range(N): if not visited[next_city]: distance = calculate_distance(cities[current_city][0], cities[current_city][1], cities[next_city][0], cities[next_city][1]) heapq.heappush(min_heap, (distance, next_city)) return round(total_cost, 2) def solve_minimum_roads(input_data): lines = input_data.strip().split(\\"n\\") N = int(lines[0]) cities = [] for i in range(1, N + 1): x, y = map(int, lines[i].split()) cities.append((x, y)) return minimum_spanning_tree(cities)"},{"question":"You are given a list of integers. Remove all duplicate entries from the list while preserving the original order of their first appearances. Input The only line of input contains a list of integers separated by spaces. The length of the list is between 1 and 100 integers. Each integer has a value between -1000 and 1000, inclusive. Output Output the list with all duplicate entries removed, maintaining the order of their first appearances. Examples Input 4 5 4 2 5 2 3 3 4 Output 4 5 2 3 Input 1 2 3 4 5 Output 1 2 3 4 5","solution":"def remove_duplicates(lst): Removes duplicate entries from the list while preserving the original order of their first appearances. Parameters: lst (list): A list of integers. Returns: list: A list with duplicates removed, maintaining the original order. seen = set() result = [] for num in lst: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Bob has recently opened a fruit store and needs help managing his inventory. Each fruit in the store has a unique ID and stock count. Bob wants to implement a system to manage his inventory and help him efficiently process customer orders. Write a program that will handle the following types of queries: 1. **Add Fruits**: Add a specified quantity of fruit to the inventory. 2. **Purchase**: Process a customer purchase by reducing the stock count. If there is not enough stock to fulfill the order, reject the purchase. 3. **Check Stock**: Print the current stock count of a specified fruit. 4. **Most Stocked**: Print the ID and stock count of the fruit with the highest stock. If there are multiple fruits with the same highest stock, print any of them. Input The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of queries. The next `n` lines contain the queries. Each query is in one of the following formats: - `\\"1 id quantity\\"` — Add `quantity` (1 ≤ quantity ≤ 100) of fruit to the inventory with ID `id` (1 ≤ id ≤ 10^6). If the fruit with this ID already exists, add the quantity to the existing stock. - `\\"2 id quantity\\"` — Attempt to purchase `quantity` (1 ≤ quantity ≤ 100) of fruit with ID `id`. If there is enough stock, reduce the stock by `quantity` and print \\"Success\\". Otherwise, print \\"Insufficient stock\\". - `\\"3 id\\"` — Print the current stock count of the fruit with ID `id`. - `\\"4\\"` — Print the ID and stock count of the fruit with the highest stock. Output For each query of type `2`, `3`, or `4`, print the appropriate response as described above. Example Input ``` 8 1 1001 10 1 1002 20 3 1001 2 1001 5 3 1001 2 1002 25 4 2 1003 5 ``` Output ``` 10 Success 5 Insufficient stock 1002 20 Insufficient stock ``` Notes - When a query type `3` refers to a fruit ID that does not exist in the inventory, consider its stock as 0. - Queries of type `4` assume that there will always be at least one fruit in the inventory.","solution":"class FruitStore: def __init__(self): self.inventory = {} def add_fruit(self, fruit_id, quantity): if fruit_id in self.inventory: self.inventory[fruit_id] += quantity else: self.inventory[fruit_id] = quantity def purchase(self, fruit_id, quantity): if fruit_id in self.inventory and self.inventory[fruit_id] >= quantity: self.inventory[fruit_id] -= quantity return \\"Success\\" else: return \\"Insufficient stock\\" def check_stock(self, fruit_id): return self.inventory.get(fruit_id, 0) def most_stocked(self): if not self.inventory: return None, 0 max_stock_id = max(self.inventory, key=self.inventory.get) return max_stock_id, self.inventory[max_stock_id] def process_queries(queries): store = FruitStore() results = [] for query in queries: parts = query.split() query_type = int(parts[0]) if query_type == 1: fruit_id = int(parts[1]) quantity = int(parts[2]) store.add_fruit(fruit_id, quantity) elif query_type == 2: fruit_id = int(parts[1]) quantity = int(parts[2]) result = store.purchase(fruit_id, quantity) results.append(result) elif query_type == 3: fruit_id = int(parts[1]) stock = store.check_stock(fruit_id) results.append(stock) elif query_type == 4: fruit_id, stock = store.most_stocked() results.append(f\\"{fruit_id} {stock}\\") return results"},{"question":"Pooja loves to play with sequences of numbers. She especially likes sequences that fulfill specific conditions. One of her favorite types of problems involves finding subsequences that have particular properties. Given an array of integers, Pooja wants to find the length of the longest subsequence such that the difference between any two consecutive elements is either 1 or -1. This subsequence does not need to be contiguous. Write a program that takes an array of integers as input and outputs the length of the longest subsequence that has consecutive elements differing by 1. # Input - The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000), the elements of the array. # Output - Output a single integer, the length of the longest subsequence with consecutive elements differing by 1. # Examples Input ``` 5 10 9 4 5 4 ``` Output ``` 3 ``` Input ``` 6 1 2 3 4 5 6 ``` Output ``` 6 ``` Input ``` 4 1 1 1 1 ``` Output ``` 1 ``` # Note In the first example, one possible subsequence that meets the criteria is [10, 9, 10] or [9, 10, 9]. Both subsequences have consecutive elements differing by 1. In the second example, the entire array is already a subsequence where each consecutive element differs by 1. So, the length is 6. In the third example, since all elements are the same, the longest subsequence with elements differing by 1 contains only one element. The answer is 1.","solution":"def longest_subsequence(arr): if not arr: return 0 # DP table to keep the longest subsequence length ending at each position dp = [1] * len(arr) # Iterate through the array to fill the dp table for i in range(1, len(arr)): for j in range(i): if abs(arr[i] - arr[j]) == 1: dp[i] = max(dp[i], dp[j] + 1) # The result will be the maximum value in the dp table return max(dp)"},{"question":"Tom recently found an old machine in his grandfather\'s attic that performs a unique operation on a sequence of numbers. The machine accepts an integer sequence and processes it in segments to either maintain or reverse part of the sequence by applying a series of commands. Each command specifies a segment within the sequence and an operation to either keep the segment as is or reverse it. Tom wants your help to determine the final state of the sequence after applying all the commands. More formally, you are given a sequence of n integers and p commands, each command consisting of three integers: l, r, and t. l and r denote the range (inclusive) in which to apply the command, and t denotes the type of the operation (1 for keeping the segment as is, 2 for reversing the segment). Your task is to execute these operations in the given order and return the final sequence. Input The first line contains two space-separated integers n and p (1 ≤ n, p ≤ 100,000). The second line contains n space-separated integers representing the initial sequence a_i (1 ≤ a_i ≤ 10^9). Each of the next p lines contains three space-separated integers l_j, r_j, and t_j (1 ≤ l_j ≤ r_j ≤ n, 1 ≤ t_j ≤ 2), specifying the j-th command to be executed. Output Print the final state of the sequence as a single line of space-separated integers. Example Input 5 3 1 2 3 4 5 2 4 2 1 3 1 3 5 2 Output 1 2 5 4 3 Explanation - After applying the first command (2, 4, 2), reverse the segment from index 2 to 4: [1 4 3 2 5] - After the second command (1, 3, 1), keep the segment from index 1 to 3 as is: [1 4 3 2 5] - After the third command (3, 5, 2), reverse the segment from index 3 to 5: [1 4 5 2 3]","solution":"def apply_commands(n, p, sequence, commands): Applies a series of commands to a sequence. Each command specifies a segment in the sequence and an operation. If t == 1, the segment is kept as is. If t == 2, the segment is reversed. :param n: Number of elements in the initial sequence. :param p: Number of commands. :param sequence: The initial sequence of integers. :param commands: A list of commands, each consisting of (l, r, t). :return: The final sequence after applying all commands. for l, r, t in commands: if t == 2: sequence[l-1:r] = reversed(sequence[l-1:r]) return sequence"},{"question":"Game Level Generator You are developing a game that includes a level generator. Each level is represented by a grid with rows and columns filled with various tiles. Each tile is assigned a number, representing different types of terrain or obstacles. The level generator must ensure that certain constraints are met for the generated levels. Your task is to determine if a given grid meets the following constraints: 1. The grid must be connected, meaning you should be able to reach any tile from any other tile only by moving up, down, left, or right through non-zero tiles. 2. The total number of tiles with a specific number called \\"key tiles\\" must be within a given range for each type of key tile. Input The input consists of multiple datasets. Each dataset starts with three integers, `r`, `c`, and `k`: - `r` is the number of rows in the grid (1 ≤ r ≤ 50). - `c` is the number of columns in the grid (1 ≤ c ≤ 50). - `k` is the number of different key tiles (1 ≤ k ≤ 10). Each of the next `r` lines contains `c` integers representing the grid. After the grid, the next `k` lines each contain three integers: `t`, `min_count`, and `max_count`. - `t` is the tile number of the key tile. - `min_count` is the minimum number of occurrences of tile `t` required in the grid (0 ≤ min_count ≤ r*c). - `max_count` is the maximum number of occurrences of tile `t` allowed in the grid (0 ≤ max_count ≤ r*c). The end of input is marked by a line containing three zeros (`0 0 0`). Output For each dataset, output \\"VALID\\" if the grid is connected and the key tiles meet their respective constraints, otherwise output \\"INVALID\\". Sample Input ``` 4 5 2 1 0 2 2 1 2 2 0 1 2 2 1 1 1 1 1 1 2 2 2 2 3 10 1 5 10 3 3 1 1 1 1 1 0 1 1 1 1 1 6 6 0 0 0 ``` Sample Output ``` VALID INVALID ```","solution":"def validate_grid(grid, r, c): def is_connected(grid, r, c): def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if visited[cx][cy]: continue visited[cx][cy] = True for nx, ny in ((cx + 1, cy), (cx - 1, cy), (cx, cy + 1), (cx, cy - 1)): if 0 <= nx < r and 0 <= ny < c and grid[nx][ny] != 0 and not visited[nx][ny]: stack.append((nx, ny)) visited = [[False] * c for _ in range(r)] start_found = False for i in range(r): for j in range(c): if grid[i][j] != 0: dfs(i, j) start_found = True break if start_found: break for i in range(r): for j in range(c): if grid[i][j] != 0 and not visited[i][j]: return False return True if not is_connected(grid, r, c): return \\"INVALID\\" return \\"VALID\\" def check_key_tiles(grid, r, c, key_constraints): tile_counts = {} for i in range(r): for j in range(c): tile = grid[i][j] if tile != 0: if tile not in tile_counts: tile_counts[tile] = 0 tile_counts[tile] += 1 for t, min_count, max_count in key_constraints: count = tile_counts.get(t, 0) if count < min_count or count > max_count: return \\"INVALID\\" return \\"VALID\\" def game_level_validator(datasets): results = [] for dataset in datasets: r, c, k = dataset[\'sizes\'] grid = dataset[\'grid\'] key_constraints = dataset[\'constraints\'] connectivity_result = validate_grid(grid, r, c) if connectivity_result == \\"INVALID\\": results.append(\\"INVALID\\") continue key_tiles_result = check_key_tiles(grid, r, c, key_constraints) results.append(key_tiles_result) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): r, c, k = map(int, lines[i].split()) if r == 0 and c == 0 and k == 0: break i += 1 grid = [] for _ in range(r): grid.append(list(map(int, lines[i].split()))) i += 1 constraints = [] for _ in range(k): constraints.append(tuple(map(int, lines[i].split()))) i += 1 datasets.append({\'sizes\': (r, c, k), \'grid\': grid, \'constraints\': constraints}) return datasets def main(input_str): datasets = parse_input(input_str) results = game_level_validator(datasets) return \\"n\\".join(results)"},{"question":"Sammi\'s robot is cleaning an n x n grid. The robot starts at the top-left corner of the grid (position (1, 1)) and can move to adjacent cells in four possible directions: up, down, left, or right. Each move takes 1 second. Some cells are obstacles, which the robot cannot traverse. Sammi wants to know if it\'s possible for the robot to reach the bottom-right corner of the grid (position (n, n)) within T seconds. Write a program that determines if the robot can reach the target cell within the given time. Input The first line of input contains three integers n, m, and T (2 ≤ n ≤ 1000, 0 ≤ m ≤ n^2, 1 ≤ T ≤ 10^6) — the size of the grid, the number of obstacles, and the maximum time allowed. The next m lines contain two integers each, r_i and c_i (1 ≤ r_i, c_i ≤ n), representing the position of each obstacle in the grid. Output Output \\"YES\\" if the robot can reach the bottom-right corner within T seconds, otherwise output \\"NO\\". Examples Input 5 2 8 3 3 5 2 Output YES Input 5 2 7 3 3 5 2 Output NO Note In the first example, the robot can follow the route: (1,1) -> (1,2) -> (2,2) -> (2,3) -> (2,4) -> (3,4) -> (4,4) -> (4,5) -> (5,5), taking exactly 8 seconds without hitting any obstacles. In the second example, reaching the bottom-right corner within 7 seconds is not possible because all possible paths are either too long or blocked by obstacles.","solution":"from collections import deque def can_reach_in_time(n, m, T, obstacles): # create the grid grid = [[0] * n for _ in range(n)] # mark the obstacles in the grid for r, c in obstacles: grid[r-1][c-1] = -1 # directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, time = queue.popleft() if (x, y) == (n-1, n-1): return \\"YES\\" if time <= T else \\"NO\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] != -1: visited.add((nx, ny)) queue.append((nx, ny, time + 1)) return \\"NO\\""},{"question":"Sasha is organizing a unique charity bake sale and wants each type of baked item in distinct packaging. She has already prepared four types of baked items, represented by numbers p1, p2, p3, p4, which indicate the type of packaging (colors, shapes, etc.) she currently has for these items. However, it\'s possible that some of the prepared items have the same type of packaging. To ensure that each type of baked item has distinct packaging, Sasha needs to visit the supply store and buy additional packaging types. Each packaging type at the store is unique and Sasha has plenty of budget to buy as many packages as necessary. Help Sasha determine the minimum number of extra packages she needs to buy so that each baked item is uniquely packaged. Input The first line contains four integers p1, p2, p3, p4 (1 ≤ p1, p2, p3, p4 ≤ 100) — the packaging types for the baked items Sasha has prepared. Output Print a single integer — the minimum number of packages Sasha needs to buy. Examples Input 2 3 2 1 Output 1 Input 5 5 5 5 Output 3","solution":"def min_packages_to_buy(p1, p2, p3, p4): Returns the minimum number of extra packages needed to ensure each baked item has distinct packaging. # Create a set of the given package types package_types = {p1, p2, p3, p4} # Calculate the number of unique packages required unique_packages_needed = 4 # Return the difference between required packages and the number of unique ones return unique_packages_needed - len(package_types)"},{"question":"A company has an event scheduling system that allows employees to create, edit, or cancel events. Each event is represented by its start time and end time. However, events cannot overlap; that is, an employee cannot have two events scheduled at the same time. You are given a list of events, where each event is represented by a tuple (start, end), and a new event that you would like to add to the list. You need to determine if it is possible to add the new event without causing any conflicts with the existing events in the list. Write a function `can_add_event(existing_events, new_event)` that takes a list of tuples `existing_events` representing the currently scheduled events and a tuple `new_event` representing the proposed new event. The function should return `True` if the new event can be added without any conflicts, and `False` otherwise. The input events are given in the format of hours (0-23) and minutes (0-59), inclusively. The function must consider time overlaps down to the minute. **Input:** - A list of tuples `existing_events` where each tuple contains two elements: - `start` (string): a string in the format \\"HH:MM\\" representing the start time of an event. - `end` (string): a string in the format \\"HH:MM\\" representing the end time of the same event. - A tuple `new_event` containing two strings: - `start` (string): a string in the format \\"HH:MM\\" representing the start time of a new event. - `end` (string): a string in the format \\"HH:MM\\" representing the end time of the new event. **Output:** - A boolean value (`True` or `False`). **Examples:** ``` Input: existing_events = [(\\"09:00\\", \\"10:30\\"), (\\"11:00\\", \\"12:00\\"), (\\"14:00\\", \\"15:30\\")] new_event = (\\"10:45\\", \\"13:00\\") Output: False ``` ``` Input: existing_events = [(\\"09:00\\", \\"10:30\\"), (\\"11:00\\", \\"12:00\\"), (\\"14:00\\", \\"15:30\\")] new_event = (\\"12:15\\", \\"13:45\\") Output: True ``` **Constraints:** - All times are strictly in the \\"HH:MM\\" 24-hour format. - The `start` time of an event is always less than the `end` time of the event. - The number of `existing_events` will not exceed 10^4. - The function should be optimized for efficiency given the constraints. Implement the function `can_add_event(existing_events, new_event)`.","solution":"def to_minutes(time): hours, minutes = map(int, time.split(\\":\\")) return hours * 60 + minutes def can_add_event(existing_events, new_event): new_start = to_minutes(new_event[0]) new_end = to_minutes(new_event[1]) for event in existing_events: start = to_minutes(event[0]) end = to_minutes(event[1]) if not (new_end <= start or new_start >= end): return False return True"},{"question":"Samuel is an enthusiast for prime numbers and loves constructing prime chains. A prime chain of length n is a sequence of n distinct prime numbers in which each prime number is strictly greater than the previous one. He has a unique rule though: he wants all the prime numbers in the chain to have the same number of digits. Given an integer D representing the number of digits, and an integer L representing the desired length of the prime chain, help Samuel find the longest possible prime chain with primes having exactly D digits. Write a function to find and output the longest chain of primes or indicate if it\'s not possible to construct such a chain. Input The input consists of two integers, D and L: - D is the number of digits the primes should have (1 ≤ D ≤ 7) - L is the desired length of the prime chain (1 ≤ L ≤ 100) Output If it is possible to form the prime chain of length L, output the chain as a space-separated sequence of prime numbers. If such a chain is impossible to form, output \\"Impossible\\". Constraints 1 ≤ D ≤ 7 1 ≤ L ≤ 100 Note: Each prime number in the output should have exactly D digits and should be distinct and ordered in increasing sequence. Sample Input 1 2 3 Sample Output 1 11 13 17 Sample Input 2 2 6 Sample Output 2 11 13 17 19 23 29 Sample Input 3 3 10 Sample Output 3 101 103 107 109 113 127 131 137 139 149 Sample Input 4 2 50 Sample Output 4 Impossible Explanation: In Sample Input 1, the longest prime chain of length 3 with 2-digit primes is 11, 13, 17. In Sample Input 2, the longest prime chain of length 6 with 2-digit primes is 11, 13, 17, 19, 23, 29. In Sample Input 3, the longest prime chain of length 10 with 3-digit primes is 101, 103, 107, 109, 113, 127, 131, 137, 139, 149. In Sample Input 4, it is impossible to form a prime chain of length 50 with 2-digit primes.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_primes_with_d_digits(d): start = 10 ** (d - 1) end = 10 ** d primes = [] for number in range(start, end): if is_prime(number): primes.append(number) return primes def find_prime_chain(d, l): primes = generate_primes_with_d_digits(d) if len(primes) < l: return \\"Impossible\\" return \\" \\".join(map(str, primes[:l]))"},{"question":"Given a list of integers, find the sum of all unique elements in the list and print the result. Constraints * The length of the list will be between 1 and 10^5. Input The input is given in the following format. n a_1 ; a_2 ; a_3 ; ... ; a_n Where n is the length of the list and a_i are the list elements. Output Print the sum of all unique elements in the list. Example Input 5 1 2 2 3 4 Output 8","solution":"def sum_of_unique_elements(n, elements): Returns the sum of all unique elements in the list. Parameters: n (int): The length of the list. elements (list of int): The list of integers. Returns: int: The sum of all unique elements. element_count = {} # Count occurrences of each element for element in elements: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 # Sum up only the elements that appear exactly once unique_sum = sum(key for key, count in element_count.items() if count == 1) return unique_sum # Example usage (this should be removed for the final module version): # n = 5 # elements = [1, 2, 2, 3, 4] # print(sum_of_unique_elements(n, elements)) # Output: 8"},{"question":"A bakery chef has a list of n cake orders, each with an integer value representing the time required to bake the cake. The chef can only bake one cake at a time and needs a break of m minutes between baking each cake. The chef wants to know the minimum time needed to complete all the orders if he starts baking the cakes at time 0. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 100) — the number of cake orders and the minutes of break required between each cake. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 1000) — the time required to bake each cake in minutes. Output Print the minimum time required to complete all the orders, including the break times. Example Input 3 5 10 5 2 Output 27 Note For the example: - Start baking the first cake at time 0, finish at time 10. - Take a 5-minute break, start baking the second cake at time 15, finish at time 20. - Take another 5-minute break, start baking the third cake at time 25, finish at time 27. - The total time taken is 27 minutes.","solution":"def minimum_time_to_complete_orders(n, m, baking_times): Returns the minimum time required to complete all cake orders including the breaks. Parameters: n (int): Number of cake orders. m (int): Minutes of break required between baking each cake. baking_times (List[int]): Time required to bake each cake in minutes. Returns: int: The minimum time required to complete all the orders. total_time = 0 for i in range(n): total_time += baking_times[i] if i < n - 1: total_time += m return total_time"},{"question":"A company is currently migrating their existing database to a new system. As part of this process, they need to ensure that phone numbers, formatted in different ways, are all normalized to a standard format. The standard format is \\"(XXX) XXX-XXXX\\", where \'X\' represents a digit from 0-9. For example, \\"123-456-7890\\", \\"123 456 7890\\", and \\"123.456.7890\\" should all be normalized to \\"(123) 456-7890\\". Write a function to normalize a list of phone numbers to the standard format. Input The first line contains one integer n (1 ≤ n ≤ 1000), the number of phone numbers. Each of the following n lines contains one phone number in one of the following formats: - XXX-XXX-XXXX - XXX.XXX.XXXX - XXX XXX XXXX - XXXXXXXXXX Output Print n lines. Each line should contain one phone number in the standard \\"(XXX) XXX-XXXX\\" format. Examples Input 6 123-456-7890 987 654 3210 456.123.7890 1234567890 987-654.3210 456.123 7890 Output (123) 456-7890 (987) 654-3210 (456) 123-7890 (123) 456-7890 (987) 654-3210 (456) 123-7890","solution":"def normalize_phone_numbers(phone_numbers): Normalizes a list of phone numbers to the standard format \\"(XXX) XXX-XXXX\\". normalized_numbers = [] for num in phone_numbers: digits = \'\'.join(filter(str.isdigit, num)) formatted_number = f\\"({digits[:3]}) {digits[3:6]}-{digits[6:]}\\" normalized_numbers.append(formatted_number) return normalized_numbers"},{"question":"King Solomon\'s mines are legendary for their wealth and complex structure. The mines are represented as a series of interconnected chambers and tunnels. Each chamber has a certain number of gold coins, and some pairs of chambers are connected by tunnels. King Solomon wants to collect maximum gold while traversing from the entrance chamber to the exit chamber, without revisiting any chamber. The mines can be represented as a directed acyclic graph (DAG), where each node represents a chamber, and each directed edge represents a one-way tunnel. Each node has a weight representing the number of gold coins in that chamber. You are tasked with finding the maximum amount of gold that can be collected on any path from the entrance chamber to the exit chamber, considering you start with no gold and can collect gold only once from each chamber you visit. Input First line contains two integers, n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 500) — the number of chambers and tunnels, respectively. Second line contains two integers, s and t (1 ≤ s, t ≤ n) — the indices of the entrance and exit chambers. Third line contains n integers c1, c2, ..., cn (0 ≤ ci ≤ 1000), where ci represents the number of gold coins in the i-th chamber. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing a one-way tunnel from chamber u to chamber v. Output The maximum amount of gold that can be collected on a path from the entrance chamber s to the exit chamber t. Example Input 4 4 1 4 5 10 15 20 1 2 1 3 2 4 3 4 Output 35 Note In the sample input, the best path to collect maximum gold is: start from chamber 1 (collect 5 gold coins), move to chamber 3 (collect 15 gold coins), and finally reach chamber 4 (collect 20 gold coins), for a total of 5 + 15 + 20 = 40 gold coins.","solution":"def maximum_gold(n, m, s, t, gold, tunnels): from collections import defaultdict, deque # Create the adjacency list for the DAG graph = defaultdict(list) for u, v in tunnels: graph[u].append(v) # Topologically sort the graph indegree = {i: 0 for i in range(1, n+1)} for u, vs in graph.items(): for v in vs: indegree[v] += 1 # Perform Topological Sort using Khan\'s Algorithm queue = deque([s]) top_order = [] while queue: node = queue.popleft() top_order.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # Initialize DP table dp = [-1] * (n + 1) dp[s] = gold[s-1] # Process nodes in topological order for node in top_order: if dp[node] != -1: for neighbor in graph[node]: dp[neighbor] = max(dp[neighbor], dp[node] + gold[neighbor-1]) return dp[t]"},{"question":"Dr. Smith is organizing a research paper competition and needs help to sort the participants based on their scores. There are different scoring criteria for various categories, and each participant can have multiple scores from different categories. The final list should be sorted based on the average score of each participant in descending order. If two participants have the same average score, they should be sorted lexicographically by their names. Input format: The first line contains an integer N, denoting the number of participants. The next N lines contain a string (participant\'s name) followed by M integers (scores in each category). Output format: Print the sorted list of participants based on the average score in descending order. If two participants have the same average score, sort by participant name in lexicographical order. Constraints: 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10 1 ≤ Length of participant\'s name ≤ 100 0 ≤ Score ≤ 100 SAMPLE INPUT 4 Carol 85 90 80 Alice 90 80 70 Bob 85 90 90 Dave 70 75 80 SAMPLE OUTPUT Bob 88.33 Carol 85.00 Alice 80.00 Dave 75.00","solution":"def sort_participants(participants): Sort participants based on their average scores in descending order. If two participants have the same average score, sort them by their names lexicographically. Args: participants (list): List of tuples with the participant\'s name and their scores. Returns: list: Sorted list of participants with their names and average scores. # Calculate average scores for each participant name_avg_scores = [] for participant in participants: name = participant[0] scores = participant[1:] avg_score = sum(scores) / len(scores) name_avg_scores.append((name, avg_score)) # Sort by average score in descending order; if equal, by name lexicographically name_avg_scores.sort(key=lambda x: (-x[1], x[0])) # Format the output as required sorted_participants = [\\"{} {:.2f}\\".format(name, avg_score) for name, avg_score in name_avg_scores] return sorted_participants"},{"question":"You are given a directed graph with n vertices and m edges. Each edge {u_j, v_j} has an associated non-negative weight w_j. Your task is to find the total number of unique paths (not necessarily simple) from a given start vertex s to a given end vertex t such that the total weight of the path doesn\'t exceed a given value W. Input: The first line contains three integers n, m, and W (2 ≤ n ≤ 100, 1 ≤ m ≤ 500, 0 ≤ W ≤ 10^9) — the number of vertices in the graph, the number of edges, and the maximum allowed weight for any path. Next m lines contain descriptions of edges: each line contains three space-separated integers u_i, v_i, and w_i (1 ≤ u_i, v_i ≤ n, 0 ≤ w_i ≤ 100) — representing a directed edge from u_i to v_i with weight w_i. The last line contains two integers s and t (1 ≤ s, t ≤ n) — the start vertex and the end vertex. Output: Print one integer — the total number of unique paths from s to t such that the total weight of the path is less than or equal to W. Example: Input: 5 6 10 1 2 3 1 3 6 2 4 4 3 4 2 4 5 1 2 5 5 1 5 Output: 3 Note: Explanation of the paths: 1. 1 -> 2 -> 4 -> 5 with total weight 3 + 4 + 1 = 8 (valid path) 2. 1 -> 2 -> 5 with total weight 3 + 5 = 8 (valid path) 3. 1 -> 3 -> 4 -> 5 with total weight 6 + 2 + 1 = 9 (valid path) These are unique paths meeting the weight constraint of W = 10, resulting in a total of 3 valid paths.","solution":"def count_unique_paths(n, m, W, edges, s, t): from collections import defaultdict, deque graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) def bfs_paths(start, end, max_weight): queue = deque([(start, 0)]) # (current_vertex, current_weight) path_count = 0 while queue: current_vertex, current_weight = queue.popleft() if current_vertex == end and current_weight <= max_weight: path_count += 1 for neighbor, weight in graph[current_vertex]: if current_weight + weight <= max_weight: queue.append((neighbor, current_weight + weight)) return path_count return bfs_paths(s, t, W)"},{"question":"Implement a function that computes the smallest enclosing rectangle of a set of 2D points on a Cartesian plane. The smallest enclosing rectangle is the axis-aligned rectangle that can completely contain all the points. You need to write a function that receives a list of tuples representing the coordinates of the points and outputs the area of this enclosing rectangle. Input: - A list of tuples containing two integers each. Each tuple (x, y) represents the coordinates of a point on the plane. Assume the list has at least one point and no more than 100 points. The coordinates range from -1000 to 1000. Output: - A single integer representing the area of the smallest enclosing rectangle. Examples: Input: ``` [(1, 2), (2, 8), (-1, 4)] ``` Output: ``` 36 ``` Input: ``` [(3, 5), (6, 9)] ``` Output: ``` 18 ``` Input: ``` [(0, 0)] ``` Output: ``` 0 ``` Explanation: For the first example, the smallest enclosing rectangle that can contain the points (1, 2), (2, 8), and (-1, 4) would have its bottom-left corner at (-1, 2) and its top-right corner at (2, 8). The width is 3 and the height is 6, thus the area is 3 * 6 = 18. For the second example, the smallest enclosing rectangle that can contain the points (3, 5) and (6, 9) would have its bottom-left corner at (3, 5) and its top-right corner at (6, 9). The width is 3 and the height is 4, thus the area is 3 * 4 = 12. For the third example, the smallest enclosing rectangle that can contain the single point (0, 0) would have both its bottom-left and top-right corners at (0, 0). The area is 0.","solution":"def smallest_enclosing_rectangle_area(points): Returns the area of the smallest enclosing rectangle for a set of 2D points. min_x = min(point[0] for point in points) max_x = max(point[0] for point in points) min_y = min(point[1] for point in points) max_y = max(point[1] for point in points) width = max_x - min_x height = max_y - min_y return width * height"},{"question":"You are tasked with organizing a series of events in a museum. There are n events and each event has a specific start time and end time. You need to find out the maximum number of events you can attend if you can only attend one event at a time. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of events. The next n lines each contain two integers si and ei (0 ≤ si < ei ≤ 10^9), the start and end times of the i-th event. Output Print a single integer, the maximum number of events you can attend. Examples Input 5 1 3 2 5 4 6 6 8 9 10 Output 4 Input 3 1 2 2 3 3 4 Output 3 Note In the first example, you can attend the events starting at 1 and ending at 3, then the event starting at 4 and ending at 6, followed by the event starting at 6 and ending at 8, and finally, the event starting at 9 and ending at 10. So, the maximum number of events you can attend is 4. In the second example, you can attend all three events since they occur one after another without overlapping.","solution":"def max_events(events): Returns the maximum number of events one can attend. events.sort(key=lambda x: x[1]) # Sort events by their end time count = 0 last_end_time = -1 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end return count def solve(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) events = [(int(data[i]), int(data[i+1])) for i in range(1, len(data), 2)] result = max_events(events) print(result)"},{"question":"Write a function that takes an integer `n` (1 ≤ n ≤ 50) and generates a 2D list that represents an n x n matrix filled with integers from 1 to n**2 such that each integer only appears once and the sum of elements along the perimeter of the matrix is even. Input The only input line contains an integer n. Output Print n lines with n integers. The integers should be from 1 to n**2, appear only once, and the sum of the perimeter elements should be even. Examples Input 2 Output 1 2 4 3 Input 4 Output 1 8 9 4 12 13 14 5 11 16 15 6 10 3 2 7","solution":"def generate_matrix(n): Generates a n x n matrix filled with integers from 1 to n**2 such that each integer only appears once and the sum of the elements along the perimeter is even. matrix = [[0] * n for _ in range(n)] left, right = 0, n-1 top, bottom = 0, n-1 num = 1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num num += 1 for i in range(top + 1, bottom + 1): matrix[i][right] = num num += 1 for i in range(right - 1, left - 1, -1): if top != bottom: matrix[bottom][i] = num num += 1 for i in range(bottom - 1, top, -1): if left != right: matrix[i][left] = num num += 1 left += 1 right -= 1 top += 1 bottom -= 1 perimeter_sum = sum(matrix[0]) + sum(matrix[n-1]) + sum(row[0] for row in matrix) + sum(row[n-1] for row in matrix) - matrix[0][0] - matrix[0][n-1] - matrix[n-1][0] - matrix[n-1][n-1] if perimeter_sum % 2 != 0: matrix[0][-1], matrix[n-1][-1] = matrix[n-1][-1], matrix[0][-1] return matrix"},{"question":"You are given an integer array and a set of operations that you can perform on it. Your task is to make all elements of the array equal, using the minimum number of operations. In one operation, you can choose any two elements from the array and increment or decrement one of them by 1. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with a line containing the integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the array elements. It\'s guaranteed that the sum of n over all test cases does not exceed 10^6. Output For each test case, print a single integer — the minimal number of operations required to make all elements of the array equal. Example Input 3 3 1 2 3 4 4 4 4 4 5 5 4 3 2 1 Output 2 0 6","solution":"def min_operations_to_make_equal(arr): Returns the minimum number of operations required to make all elements in the array equal. In one operation, you can increment or decrement one of the elements by 1. n = len(arr) arr.sort() target = arr[n // 2] # Median element operations = sum(abs(x - target) for x in arr) return operations def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(min_operations_to_make_equal(arr)) return results # Helper function to split input into the required format def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases"},{"question":"Polycarp recently received a collection of n marbles, each with a distinct value between 1 and n inclusive. He wants to divide these marbles into two non-empty groups such that the absolute difference between the sums of the values of the marbles in the two groups is minimized. Help Polycarp find the minimum possible absolute difference of the sums of the two groups if he partitions the marbles optimally. Input The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of marbles. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n) — the values of the marbles. It is guaranteed that all a_i are distinct. Output Print a single integer — the minimum possible absolute difference between the sums of the two groups. Example Input 5 3 1 4 2 5 Output 1 Explanation * You can partition the marbles into two groups like this: - Group 1: {3, 1, 5}, sum = 9 - Group 2: {4, 2}, sum = 6 * The absolute difference between the sums is |9 - 6| = 3. * Another partition can be: - Group 1: {1, 4, 2}, sum = 7 - Group 2: {3, 5}, sum = 8 * The absolute difference between the sums is |7 - 8| = 1. Therefore, the minimum possible absolute difference is 1.","solution":"def min_abs_diff(n, marbles): total_sum = sum(marbles) half_sum = total_sum // 2 dp = [0] * (half_sum + 1) for marble in marbles: for j in range(half_sum, marble - 1, -1): dp[j] = max(dp[j], dp[j - marble] + marble) group1_sum = dp[half_sum] group2_sum = total_sum - group1_sum return abs(group1_sum - group2_sum)"},{"question":"Given two strings, you are to find the longest common substring of the two. A substring is defined as a sequence of characters occurring contiguously in both strings, and the resultant substring must be the same in both strings. Input The input consists of two lines. Each line contains a non-empty string composed of lowercase English letters. The length of each string does not exceed 1000 characters. Output Print the longest common substring. If there are multiple substrings of the same length, print any one of them. If there is no common substring, print an empty line. Examples Input abcde bcdea Output bcde Input apple plead Output ple Note In the first example, \\"bcde\\" is the longest common substring. In the second example, \\"ple\\" is one of the longest common substrings. Another possible output could be \\"lea\\".","solution":"def longest_common_substring(s1, s2): Returns the longest common substring of s1 and s2. If there are multiple substrings of the same length, returns any one of them. If there is no common substring, returns an empty string. len_s1 = len(s1) len_s2 = len(s2) # Initialize the DP table dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)] max_length = 0 end_index = 0 # Fill the DP table for i in range(1, len_s1 + 1): for j in range(1, len_s2 + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > max_length: max_length = dp[i][j] end_index = i # If no common substring found, return an empty string if max_length == 0: return \\"\\" # The longest common substring longest_common_substr = s1[end_index - max_length:end_index] return longest_common_substr"},{"question":"Given a list of integers, rearrange them such that all the even numbers come before all the odd numbers while maintaining the relative order of the even and odd numbers. If the list is empty or contains one element, return it as is. # Function Signature ```python def segregate_even_odd(numbers: List[int]) -> List[int]: ``` # Input - `numbers`: A list of integers. # Output - The list rearranged so that all even numbers appear before all odd numbers, while maintaining the relative order of the even and odd numbers. # Constraints - The length of `numbers` will not exceed 1000. - Each element of `numbers` will be between -10^6 and 10^6. # Examples Example 1 Input: ```python numbers = [1, 2, 3, 4, 5, 6] ``` Output: ```python [2, 4, 6, 1, 3, 5] ``` Example 2 Input: ```python numbers = [3, 1, 7, 5] ``` Output: ```python [3, 1, 7, 5] ``` Example 3 Input: ```python numbers = [] ``` Output: ```python [] ``` # Explanation - In the first example, the even numbers (2, 4, 6) appear before the odd numbers (1, 3, 5) while maintaining their relative order from the input list. - In the second example, there are no even numbers, so the list remains unchanged. - In the third example, the list is empty, so it is returned as is.","solution":"from typing import List def segregate_even_odd(numbers: List[int]) -> List[int]: Rearranges the list such that all even numbers come before all odd numbers, while maintaining the relative order of the even and odd numbers. Parameters: numbers (List[int]): List of integers Returns: List[int]: Rearranged list with all even numbers before all odd numbers if not numbers: return numbers evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] return evens + odds"},{"question":"Given an integer array, you will need to find the maximum possible sum of its non-adjacent elements. You are not allowed to pick two adjacent elements from the array, and you must maximize the sum of the picked elements. The function should be called `max_non_adjacent_sum` and it should accept an integer array as its argument. Constraints: * The array length (n) will be between 1 and 10^5. * Each element in the array will be an integer between -10^4 and 10^4. # Function Signature `def max_non_adjacent_sum(nums: List[int]) -> int:` # Input An integer array, `nums`, where: - (1 leq text{len(nums)} leq 100000) - (-10000 leq text{nums[i]} leq 10000) # Output Return the maximum sum of the non-adjacent elements. # Examples Example 1: Input: ``` [3, 2, 5, 10, 7] ``` Output: ``` 15 ``` Explanation: The maximum sum of non-adjacent elements is 3 + 10 + 2 = 15. Example 2: Input: ``` [-2, 1, 3, -4, 5] ``` Output: ``` 8 ``` Explanation: The maximum sum of non-adjacent elements is 3 + 5 = 8. # Note: 1. Your solution should run in O(n) time complexity. 2. You may not need to handle input/output, just complete the function as described.","solution":"from typing import List def max_non_adjacent_sum(nums: List[int]) -> int: if not nums: return 0 if len(nums) == 1: return max(0, nums[0]) incl = max(0, nums[0]) # max sum including the current element excl = 0 # max sum excluding the current element for i in range(1, len(nums)): new_excl = max(incl, excl) # exclude current element incl = excl + nums[i] # include current element excl = new_excl return max(incl, excl)"},{"question":"John loves playing with strings and has created a new game. He gives you two strings, `A` and `B`, each consisting of lowercase alphabets. The objective is to determine the minimum number of operations required to convert string `A` into string `B`. You can perform the following operations: 1. Insert a character at any position in `A`. 2. Delete a character from `A`. 3. Replace a character in `A` with another character. Write a function to calculate the minimum number of operations required. Input: - The first line contains an integer `T`, the number of test cases. - Then for each test case, there are two lines: - The first line contains string `A`. - The second line contains string `B`. Output: - For each test case, output a single integer, the minimum number of operations required to convert `A` into `B`. Constraints: - (1 leq T leq 100) - (1 leq text{Length of A, B} leq 1000) You may assume that the input strings contain only lowercase alphabets. Example input: ``` 3 abc yabd kitten sitting flaw lawn ``` Example output: ``` 2 3 2 ``` Explanation: - For the first test case, `abc` -> `yabc` (insert `y`) -> `yabd` (replace `c` with `d`), hence 2 operations. - For the second test case, `kitten` -> `sitten` (replace `k` with `s`) -> `sittin` (replace `e` with `i`) -> `sitting` (insert `g`), hence 3 operations. - For the third test case, `flaw` -> `flawn` (insert `n`) -> `lawn` (delete `f`), hence 2 operations.","solution":"def min_distance(A, B): Returns the minimum number of operations required to convert string A to string B. m, n = len(A), len(B) # Create a DP table to store results of subproblems. dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] bottom up for i in range(m + 1): for j in range(n + 1): # If A is empty, all elements of B need to be inserted. if i == 0: dp[i][j] = j # If B is empty, all elements of A need to be removed. elif j == 0: dp[i][j] = i # If last characters are the same, ignore the last char # and recur for the remaining substring. elif A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last character is different, consider all possibilities # and find the minimum. else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n] def process_test_cases(T, test_cases): Process multiple test cases and return results. results = [] for A, B in test_cases: results.append(min_distance(A, B)) return results"},{"question":"You have been hired to develop a security system that detects anomalies in network traffic patterns. The company has provided you with two sequences of uniformly sampled data points representing the number of packets transmitted through the network at regular intervals. However, they need your expertise to compare these sequences and find the longest contiguous subsequence that appears in both sequences, which can help in identifying consistent patterns even during potential anomalies. Write a program that finds and returns the length of the longest contiguous common subsequence between two input sequences of network traffic data. Input The input consists of two lines: - The first line contains a sequence of integers representing the first set of network traffic data points. - The second line contains a sequence of integers representing the second set of network traffic data points. Each sequence of integers will be between 1 and 1000 integers long, and each integer will be between 1 and 1000. Output Output a single integer which denotes the length of the longest contiguous subsequence that appears in both sequences. Example Input 1 2 3 4 5 2 3 4 5 6 7 Output 4 Explanation The longest contiguous subsequence that appears in both sequences is `[2, 3, 4, 5]`, which has a length of 4.","solution":"def longest_common_subsequence(seq1, seq2): Finds the length of the longest contiguous common subsequence between two sequences. Parameters: seq1 (list): The first sequence of integers. seq2 (list): The second sequence of integers. Returns: int: The length of the longest contiguous common subsequence. # Initialize 2D DP table m, n = len(seq1), len(seq2) dp = [[0] * (n + 1) for _ in range(m + 1)] max_len = 0 for i in range(1, m + 1): for j in range(1, n + 1): if seq1[i - 1] == seq2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_len = max(max_len, dp[i][j]) else: dp[i][j] = 0 return max_len"},{"question":"You are working on a cutting-edge traffic monitoring system for a smart city. The main boulevard is a straight road consisting of n intersections enumerated from 1 to n. There are bidirectional streets connecting some pairs of intersections. Each street has an associated traffic congestion factor. During peak hours, to efficiently manage traffic, you need to determine the minimum congestion path between various pairs of intersections. Write a program to determine the minimum congestion factor on the path between given pairs of intersections. Input The first line contains an integer n (2 ≤ n ≤ 100,000), the number of intersections. The second line contains an integer m (1 ≤ m ≤ 200,000), the number of streets. Each of the next m lines contains three integers u, v, and c (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c ≤ 1,000), representing a bidirectional street between intersections u and v with traffic congestion factor c. The next line contains an integer q (1 ≤ q ≤ 100,000), the number of queries. Each of the next q lines contains two integers a and b (1 ≤ a, b ≤ n), representing a query for the minimum congestion factor between intersections a and b. Output For each query, print a single integer, the minimum congestion factor between intersection a and intersection b. If there is no path between a and b, print -1. Examples Input 5 6 1 2 1 1 3 5 2 4 2 2 3 4 3 4 3 4 5 1 3 1 5 2 3 3 4 Output 2 3 3 Note For the first query, the path with minimum congestion factor from intersection 1 to intersection 5 is 1 -> 2 -> 4 -> 5 with congestion factors 1, 2, and 1. The highest factor in this path is 2, hence the result is 2. For the second query, the possible paths from intersection 2 to intersection 3 have congestion factors of either 4 (for the direct street) or 5 (2 -> 1 -> 3). The minimum congestion factor is 3 for the path 2 -> 4 -> 3. For the third query, the minimum congestion factor from intersection 3 to intersection 4 is 3 through the direct street.","solution":"import heapq from collections import defaultdict, deque def find_min_congestion(n, m, streets, q, queries): def dijkstra(start): congestion = {i: float(\'inf\') for i in range(1, n+1)} congestion[start] = 0 pq = [(0, start)] while pq: current_congestion, u = heapq.heappop(pq) if current_congestion > congestion[u]: continue for v, congestion_cost in graph[u]: max_congestion = max(current_congestion, congestion_cost) if max_congestion < congestion[v]: congestion[v] = max_congestion heapq.heappush(pq, (max_congestion, v)) return congestion # Create adjacency list graph = defaultdict(list) for u, v, c in streets: graph[u].append((v, c)) graph[v].append((u, c)) # Precompute the minimum congestion for the shortest paths from each node congestion_matrix = {} for i in range(1, n+1): congestion_matrix[i] = dijkstra(i) # Answer the queries results = [] for a, b in queries: min_congestion = congestion_matrix[a][b] results.append(min_congestion if min_congestion != float(\'inf\') else -1) return results"},{"question":"A string is called balanced if all characters that occur in it appear the same number of times. For example, the string \\"aabb\\" is balanced because both \'a\' and \'b\' occur exactly 2 times. The string \\"abcdabcd\\" is also balanced because \'a\', \'b\', \'c\', and \'d\' each occur 2 times. However, the string \\"aabbc\\" is not balanced because \'c\' occurs only once while \'a\' and \'b\' each occur 2 times. Given a string, you need to determine if it is possible to rearrange its characters such that the resulting string is balanced. Input The only line contains a single string s (1 ≤ |s| ≤ 1000) — the given string. It consists of lowercase Latin letters. Output Print \\"YES\\" if it is possible to rearrange the characters of the string such that the resulting string is balanced. Otherwise, print \\"NO\\". Examples Input: aabb Output: YES Input: aabbc Output: NO Input: abcdabcd Output: YES Note In the first sample case, the given string \\"aabb\\" is already balanced, so the output is \\"YES\\". In the second sample case, the string \\"aabbc\\" cannot be rearranged to form a balanced string, so the output is \\"NO\\". In the third sample case, the given string \\"abcdabcd\\" is already balanced, so the output is \\"YES\\".","solution":"from collections import Counter def can_rearrange_to_balanced(s): Checks if the characters of the given string can be rearranged to form a balanced string. Args: s (str): Input string consisting of lowercase Latin letters. Returns: str: \\"YES\\" if it\'s possible to rearrange the string to be balanced, \\"NO\\" otherwise. char_count = Counter(s) frequencies = list(char_count.values()) # Check if all frequency counts are the same if len(set(frequencies)) == 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a string, you need to find the longest substring with all distinct characters. The task is to determine the length of this substring. Input: The first line of the input contains the number of test cases t (1 ≤ t ≤ 100). Each of the next t lines contains a string s (1 ≤ |s| ≤ 10^5). Output: For each test case, print the length of the longest substring with all distinct characters. SAMPLE INPUT 3 abcabcbb bbbbb pwwkew SAMPLE OUTPUT 3 1 3 Explanation For the first string \\"abcabcbb\\", the longest substring with all distinct characters is \\"abc\\", which has length 3. For the second string \\"bbbbb\\", the longest substring with all distinct characters is \\"b\\", which has length 1. For the third string \\"pwwkew\\", the longest substring with all distinct characters is \\"wke\\", which has length 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Given a string, finds the length of the longest substring with all distinct characters. n = len(s) char_index_map = {} max_length = start = 0 for end in range(n): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length def process_input(test_cases): Processes multiple test cases to find the length of the longest substring with all distinct characters for each. results = [] for s in test_cases: results.append(length_of_longest_substring(s)) return results"},{"question":"Write a function to simulate a basic Sudoku validation. Given a 9x9 Sudoku board, determine if it is valid according to the following rules: A Sudoku board is valid if: 1. Each row must contain the digits 1-9 without repetition. 2. Each column must contain the digits 1-9 without repetition. 3. Each of the nine 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition. The Sudoku board can be partially filled, where blank cells are represented by the character \'.\'. Constraints: - The Sudoku board will be a 2D list with 9 rows and 9 columns. - Each element in the board will be a character from \'1\' to \'9\' or \'.\'. Input: - One 2D list as described above. Output: - Return True if the board is valid, False otherwise. Examples: Input: board = [ [\\"5\\",\\"3\\",\\".\\",\\".\\",\\"7\\",\\".\\",\\".\\",\\".\\",\\".\\"], [\\"6\\",\\".\\",\\".\\",\\"1\\",\\"9\\",\\"5\\",\\".\\",\\".\\",\\".\\"], [\\".\\",\\"9\\",\\"8\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\"], [\\"8\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\"3\\"], [\\"4\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\"3\\",\\".\\",\\".\\",\\"1\\"], [\\"7\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\".\\",\\".\\",\\".\\",\\"6\\"], [\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\"8\\",\\".\\"], [\\".\\",\\".\\",\\".\\",\\"4\\",\\"1\\",\\"9\\",\\".\\",\\".\\",\\"5\\"], [\\".\\",\\".\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\".\\",\\"7\\",\\"9\\"] ] Output: True Input: board = [ [\\"8\\",\\"3\\",\\".\\",\\".\\",\\"7\\",\\".\\",\\".\\",\\".\\",\\".\\"], [\\"6\\",\\".\\",\\".\\",\\"1\\",\\"9\\",\\"5\\",\\".\\",\\".\\",\\".\\"], [\\".\\",\\"9\\",\\"8\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\"], [\\"8\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\"3\\"], [\\"4\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\"3\\",\\".\\",\\".\\",\\"1\\"], [\\"7\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\".\\",\\".\\",\\".\\",\\"6\\"], [\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\"8\\",\\".\\"], [\\".\\",\\".\\",\\".\\",\\"4\\",\\"1\\",\\"9\\",\\".\\",\\".\\",\\"5\\"], [\\".\\",\\".\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\".\\",\\"7\\",\\"9\\"] ] Output: False","solution":"def isValidSudoku(board): def is_valid_row(board): for row in board: if not is_valid_unit(row): return False return True def is_valid_col(board): for col in zip(*board): if not is_valid_unit(col): return False return True def is_valid_box(board): for i in range(0, 9, 3): for j in range(0, 9, 3): box = [ board[x][y] for x in range(i, i + 3) for y in range(j, j + 3) ] if not is_valid_unit(box): return False return True def is_valid_unit(unit): unit = [i for i in unit if i != \'.\'] return len(unit) == len(set(unit)) return is_valid_row(board) and is_valid_col(board) and is_valid_box(board)"},{"question":"Leanne loves collecting gemstones and she categorizes them by their colors. She has several gemstones and she wants to know how many distinct color categories her collection can be organized into. Each gemstone is represented by a lowercase letter indicating its color. For instance, the string \\"abcda\\" has gemstones of colors \'a\', \'b\', \'c\', and \'d\'. Leanne wants a program that, given a string representing her collection, determines the number of distinct color categories. Input The input consists of a single string s (1 ≤ len(s) ≤ 100) which represents Leanne\'s gemstone collection. Each character in the string is a lowercase letter. Output Print a single integer, the number of distinct color categories in Leanne\'s collection. Examples Input abcda Output 4 Input zzzz Output 1 Input abcdefgh Output 8 Input yzyzyzyz Output 2","solution":"def count_distinct_colors(s): Returns the number of distinct color categories in Leanne\'s gemstone collection. return len(set(s))"},{"question":"Given an array of non-negative integers, find the smallest positive integer that is missing from the array. Constraints * 1 ≤ n ≤ 100,000 * 0 ≤ ai ≤ 10,000,000 Input n a1 a2 a3 ... an The first line contains an integer n representing the number of elements in the array. The following line contains n space-separated non-negative integers which are the elements of the array. Output Output a single integer which is the smallest positive integer missing from the array. Example Input 5 1 3 6 4 1 2 Output 5","solution":"def smallest_missing_positive_integer(n, arr): Finds the smallest positive integer missing from the array. :param n: Number of elements in the array :param arr: List of non-negative integers :return: The smallest positive integer missing from the array # Initialize a set for constant time lookups present = set(arr) # We start checking from 1 upwards smallest_missing = 1 while True: if smallest_missing not in present: return smallest_missing smallest_missing += 1"},{"question":"The treasurer of a small town is responsible for organizing the town\'s yearly festival. There are n activities that need to be scheduled, each with a specific start and end time. Unfortunately, due to limited resources, the treasurer can only schedule at most m activities such that none of them overlap. Your task is to help the treasurer maximize the number of non-overlapping activities that can be scheduled given the constraints. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 10^5) — the total number of activities and the maximum number of activities that can be scheduled. The next n lines each contain two integers s_i and e_i (1 ≤ s_i < e_i ≤ 10^9) — the start and end time of the i-th activity. Output Output a single integer — the maximum number of non-overlapping activities that can be scheduled. Examples Input 6 3 1 3 2 5 4 7 1 8 5 9 8 10 Output 3 Input 5 5 1 2 3 4 0 6 5 7 8 9 Output 4 Note In the first example, the treasurer can schedule a maximum of 3 non-overlapping activities, such as activities with times `[1, 3]`, `[4, 7]`, and `[8, 10]`. In the second example, the treasurer can schedule all 4 non-overlapping activities within the given constraints. They can be activities with times `[1, 2]`, `[3, 4]`, `[5, 7]`, and `[8, 9]`.","solution":"def max_non_overlapping_activities(n, m, activities): Returns the maximum number of non-overlapping activities that can be scheduled. :param n: Total number of activities :param m: Maximum number of activities that can be scheduled :param activities: List of tuples containing the start and end times of each activity :return: Integer representing the maximum number of non-overlapping activities # Sort activities based on their end times activities.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in activities: if count >= m: # Stop if we\'ve scheduled the maximum number of activities break if start >= end_time: # Schedule the activity count += 1 end_time = end return count"},{"question":"You are given a binary string s of length n consisting of \'0\'s and \'1\'s. In one operation, you can choose one of the endpoints of the string (either the first or the last character) and remove it. The operation costs 1 unit if the character removed is \'1\'. The operation costs 0 units if the character removed is \'0\'. Your task is to determine the minimum cost needed to make the string empty. Input Each test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 1000). The description of the test cases follows. The first line of each test case contains an integer n (1 ≤ n ≤ 100) — the length of the binary string. The second line of each test case contains a binary string s of length n. Output For each test case, output the minimum cost required to make the string empty. Example Input 3 5 11010 4 1111 3 000 Output 3 4 0 Note In the first test case, we can remove the first \'0\' (cost 0), then the first \'1\' (cost 1), then the first \'1\' (cost 1), then the first \'0\' (cost 0) and finally the last \'1\' (cost 1) of the string \\"11010\\" to make it empty, with a total cost of 3. In the second test case, we remove all \'1\'s with a total cost of 4. In the third test case, we remove all \'0\'s with a total cost of 0.","solution":"def min_cost_to_empty_string(t, test_cases): Calculate the minimum cost required to make the binary string empty. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains an integer n and a binary string s. Returns: list: A list of integers representing the minimum cost for each test case. results = [] for n, s in test_cases: cost = s.count(\'1\') results.append(cost) return results # Example usage: # t = 3 # test_cases = [(5, \'11010\'), (4, \'1111\'), (3, \'000\')] # print(min_cost_to_empty_string(t, test_cases)) # Output: [3, 4, 0]"},{"question":"Given a set of distinct integers and a target integer, write a function that finds all unique combinations of the provided integers that sum up to the target. Each number from the provided set can be used any number of times in the combination. You may assume that all integers are positive and the set is not empty. The unique combinations should be returned in a list of lists, where each inner list represents one valid combination. # Input - A list of distinct positive integers `candidates`. - A positive integer `target`. # Output - A list of lists where each list contains a unique combination of integers from `candidates` that sum up to `target`. # Example Input - candidates = [2, 3, 6, 7] - target = 7 Output - [[2, 2, 3], [7]] Input - candidates = [2, 3, 5] - target = 8 Output - [[2, 2, 2, 2], [2, 3, 3], [3, 5]] # Note - The order of combinations in the output does not matter. - Each combination should be represented in non-decreasing order to ensure uniqueness. - The solution should not include duplicate combinations. # Constraints - All integers in `candidates` are distinct and positive. - 1 ≤ `candidates.length` ≤ 30 - 1 ≤ `target` ≤ 500","solution":"def combinationSum(candidates, target): def backtrack(remaining, comb, start): if remaining == 0: results.append(list(comb)) return elif remaining < 0: return for i in range(start, len(candidates)): comb.append(candidates[i]) backtrack(remaining - candidates[i], comb, i) comb.pop() results = [] candidates.sort() backtrack(target, [], 0) return results"},{"question":"# Problem: Robot Cleaner Path You have a grid of `M` rows and `N` columns. A robot cleaner is placed on this grid and can be directed to move in four possible directions: up, down, left, and right. The grid has some obstacles represented by `1`s indicating that the robot cannot move through those cells, while `0`s indicate free paths. The robot cleaner starts at the top-left corner of the grid (cell `(0, 0)`) and its goal is to reach the bottom-right corner of the grid (cell `(M-1, N-1)`). The robot can only move one cell at a time in one of the four directions. Determine whether the robot cleaner can reach the goal. If it can, return the total number of steps in the shortest path. Otherwise, return `-1`. Implement a function `robot_cleaner_path` with the following signature: ```python def robot_cleaner_path(grid: List[List[int]]) -> int: ``` # Input - `grid`: A 2D list of integers representing the grid. The grid will always have at least one row and one column. # Output - An integer representing the minimum steps to reach the goal or `-1` if the goal is unreachable. # Constraints - `1 ≤ M, N ≤ 100` # Examples Example 1 Input: ```python [[0, 0, 0], [1, 1, 0], [0, 0, 0]] ``` Output: ```python 4 ``` Explanation: The robot can take the path `(0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2)`. Example 2 Input: ```python [[0, 1], [1, 0]] ``` Output: ```python -1 ``` Explanation: The robot cannot reach the bottom-right corner because it is blocked by obstacles. # Implementation Note You may use Breadth-First Search (BFS) to explore all possible paths from the start to the goal in the shortest number of steps.","solution":"from collections import deque from typing import List def robot_cleaner_path(grid: List[List[int]]) -> int: rows, cols = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if r == rows - 1 and c == cols - 1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] == 0: queue.append((nr, nc, steps + 1)) visited.add((nr, nc)) return -1"},{"question":"Write a program to simulate a simple memory allocator. Your program should manage memory blocks of fixed size and support the following operations: - `allocate(id, size)`: Allocate a memory block of specified size for a given id. - `deallocate(id)`: Deallocate the memory block associated with the given id. - `access(id)`: Access the memory block associated with the given id and return its size. Constraints: - The total memory blocks available are 10^6. - size should be less than or equal to 10^6. - The id is an integer unique for each allocation request, ranging from 1 to 10^6. - The number of operations will not exceed 200,000. Your program should start with an empty state where no memory is allocated, and it should process each operation in sequence. If an allocate operation requests more memory than available, your program should print \\"Allocation failed\\". If a deallocate operation requests for an id that is not currently allocated, it should print \\"Deallocation failed\\". If an access operation requests for an id that is not currently allocated, it should print \\"Access failed\\". Input: - The first line contains an integer ( n ), the number of operations. - Each of the following ( n ) lines contains an operation in the format `operation(id, size)` for allocate, `operation(id)` for deallocate and access. Output: - For each `access` operation, print the size of the memory block associated with the id. - For each failed operation, print an appropriate error message. Example: Input: ``` 7 allocate(1, 500000) allocate(2, 300000) access(1) deallocate(2) access(2) allocate(3, 800000) allocate(4, 500000) ``` Output: ``` 500000 Access failed Allocation failed ``` Explanation: 1. Allocates 500000 memory units for id 1. 2. Allocates 300000 memory units for id 2. 3. Accesses the memory block for id 1, outputs 500000. 4. Deallocates memory block for id 2. 5. Attempts to access memory block for id 2 which has been deallocated, outputs \\"Access failed\\". 6. Attempts to allocate 800000 memory units for id 3 which exceeds the remaining available memory, outputs \\"Allocation failed\\". 7. Attempts to allocate 500000 memory units for id 4, which should succeed.","solution":"class MemoryAllocator: def __init__(self, total_memory=10**6): self.total_memory = total_memory self.available_memory = total_memory self.allocations = {} def allocate(self, id, size): if id in self.allocations: print(\\"Allocation failed\\") elif size > self.available_memory or size > self.total_memory: print(\\"Allocation failed\\") else: self.allocations[id] = size self.available_memory -= size def deallocate(self, id): if id in self.allocations: self.available_memory += self.allocations[id] del self.allocations[id] else: print(\\"Deallocation failed\\") def access(self, id): if id in self.allocations: print(self.allocations[id]) else: print(\\"Access failed\\")"},{"question":"Ann has another task which she needs to complete to prepare for her upcoming programming exam. She has to solve different questions related to strings. This time she will deal with two specific types of strings: palindromes and repeating segments. A string is a palindrome if it reads the same backward as forward. For example, the strings \\"madam\\", \\"racecar\\", and \\"a\\" are palindromes. On the other hand, a string has a repeating segment if it consists of a substring repeated multiple times. For example, \\"ababab\\" (\\"ab\\" repeated 3 times) and \\"aaa\\" (\\"a\\" repeated 3 times) are strings with repeating segments. Ann\'s task is to find the longest substring that is either a palindrome or has a repeating segment. If there are multiple substrings of the same maximum length, she should return the lexicographically smallest one. Input The first and only line of the input contains a string s (1 ≤ |s| ≤ 100), consisting of lowercase English letters \'a\'-\'z\', where |s| is the length of string s. Output Print the longest substring of s that is either a palindrome or has a repeating segment. If there are multiple substrings of the same maximum length, print the lexicographically smallest one. Examples Input racecarbanana Output racecar Input abcabcabc Output abcabc Input aabbaacc Output aabbaa Note In the first sample, \\"racecar\\" is the longest substring that is a palindrome. In the second sample, \\"abcabcabc\\" is the longest substring that has a repeating segment. In the third sample, \\"aabbaa\\" is the longest substring that is a palindrome.","solution":"def is_palindrome(s): Check if a string s is a palindrome return s == s[::-1] def has_repeating_segment(s): Check if a string s has a repeating segment n = len(s) for i in range(1, n // 2 + 1): if n % i == 0: if s == s[:i] * (n // i): return True return False def longest_palindrome_or_repeating_segment(s): Return the longest substring of s that is either a palindrome or has a repeating segment. If there are multiple substrings of the same maximum length, return the lexicographically smallest one. max_len = 0 max_substr = \'\' n = len(s) for i in range(n): for j in range(i + 1, n + 1): substr = s[i:j] if (is_palindrome(substr) or has_repeating_segment(substr)) and len(substr) >= max_len: if len(substr) > max_len or (len(substr) == max_len and substr < max_substr): max_len = len(substr) max_substr = substr return max_substr"},{"question":"Farmer John has a large rectangular field that he wants to partition into smaller square plots for planting various crops. The dimensions of the field are given as n x m meters. Each plot must be a perfect square with integer side lengths. Farmer John wants to maximize the size of the square plots, meaning that the side length of each plot should be as large as possible while still allowing the entire field to be completely partitioned. Write a program to determine the largest side length of the square plots that can be used to partition the entire field without any remainder. Input: - The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 10^9) — the dimensions of the field. Output: - Print a single integer, the largest possible side length of the square plots. Examples: Input: 10 15 Output: 5 Input: 17 23 Output: 1 Note: In the first example, the largest square plots with integer side lengths that can partition a 10x15 field are 5x5 plots. The entire field can be divided into 2 plots along the 10-meter side and 3 plots along the 15-meter side. In the second example, the largest square plots with integer side lengths for a 17x23 field is 1x1.","solution":"def largest_square_plot(n, m): Determines the largest side length of square plots that can partition the field of dimensions n x m without any remainder. Parameters: n (int): The length of the field. m (int): The width of the field. Returns: int: The largest possible side length of the square plots. from math import gcd return gcd(n, m)"},{"question":"Write a program that, given a string, finds the length of the longest substring without repeating characters. Constraints * The input string will contain only English letters (both lowercase and uppercase). * 1 leq length of the input string leq 1000 Input A single line containing the string. Output Output the length of the longest substring with all unique characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(char_map[s[right]] + 1, left) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"A company wants to create a system that automates email filtering based on predefined rules. Each rule consists of two parts: a keyword and an action (i.e., move to folder, mark as read, or delete). You are provided with a list of emails, each containing a subject and a body. Write a program to analyze the emails and apply the rules accordingly. The structure of each email and rule are as follows: - Each rule is a tuple `(keyword, action, folder)`, where: - `keyword` is a substring that can appear anywhere in the subject or body of the email. - `action` is one of `\\"move\\"`, `\\"mark\\"`, or `\\"delete\\"`. - `folder` (optional) is the name of the folder to move the email to (only relevant if action is \\"move\\"). - Each email is a tuple `(subject, body)` containing: - `subject` (a string). - `body` (a string). Your task is to implement the following requirements: 1. Apply each rule to each email. 2. If an email matches multiple rules, apply the first matching rule. 3. Print the result in a specific format. The output format should be: - For action `\\"move\\"`, print `Move to <folder>`. - For action `\\"mark\\"`, print `Mark as read`. - For action `\\"delete\\"`, print `Delete`. **Input Format** - An integer `n`, representing the number of rules. - `n` lines of rules, each containing a keyword, an action, and an optional folder name (only for the \\"move\\" action). - An integer `m`, representing the number of emails. - `m` lines of emails, each containing a subject and a body. **Output Format** - `m` lines of actions, one for each email. **Example Input:** ``` 3 urgent mark sales move inbox confidential delete 2 An urgent meeting Urgent meeting at 10 AM Sales report The sales report for this month ``` **Example Output:** ``` Mark as read Move to inbox ``` **Constraints** - The number of rules `n` will be between 1 and 10. - The number of emails `m` will be between 1 and 100. - The length of each subject and body can be up to 100 characters. Implement this functionality in a function `apply_email_rules(n: int, rules: List[Tuple[str, str, str]], m: int, emails: List[Tuple[str, str]]) -> List[str]:` where: - `n` is the number of rules. - `rules` is a list of tuples, each representing a rule. - `m` is the number of emails. - `emails` is a list of tuples, each representing an email.","solution":"def apply_email_rules(n, rules, m, emails): results = [] for subject, body in emails: applied = False for keyword, action, folder in rules: if keyword in subject or keyword in body: if action == \\"move\\": results.append(f\\"Move to {folder}\\") elif action == \\"mark\\": results.append(\\"Mark as read\\") elif action == \\"delete\\": results.append(\\"Delete\\") applied = True break if not applied: results.append(\\"No action\\") return results"},{"question":"A group of friends are playing an interesting game in which each person is given a card with a distinct number on it. The game requires them to arrange themselves in a circle such that the absolute difference between the numbers on any two adjacent cards is kept to a minimum possible value. Given the numbers on the cards, help the friends figure out the minimum possible value of the maximum absolute difference between the numbers on adjacent cards when they are arranged in such a circle. Input The first input line contains a single integer n (3 ≤ n ≤ 100) which represents the number of friends (or cards). The second line contains n distinct integers b1, b2, ..., bn (-1000 ≤ bi ≤ 1000) which represent the numbers on the cards. The numbers are space-separated. Output Print the minimum possible value of the maximum absolute difference between numbers on any two adjacent cards. Examples Input 4 8 5 1 6 Output 3 Input 5 -10 0 10 5 -5 Output 5 Note In the first sample, the optimal arrangement of the numbers could be (5, 6, 8, 1), which generates the sequence of absolute differences (1, 2, 7, 4). Hence, the maximum of these differences is 4. In the second sample, the optimal arrangement of the numbers could be (-10, -5, 0, 5, 10), which generates the sequence of absolute differences (5, 5, 5, 5, 5). Hence, the maximum of these differences is 5.","solution":"def min_max_abs_diff(n, b): b.sort() max_diff = float(\'inf\') for i in range(n): # Circular difference at (i, i+1) %= n max_diff = min(max_diff, abs(b[i] - b[(i+1)%n])) return max_diff"},{"question":"You are developing a video game where a character moves in a grid. The character can move up, down, left, or right one cell in each move. The grid has some cells which are blocked, and the character cannot move to those cells. The character must reach a target position from a starting position in the minimum number of moves. You are given a grid of size N x M, where each cell is either empty (\'.\') or blocked (\'#\'). The starting position is represented by \'S\', and the target position is represented by \'T\'. Determine the minimum number of moves needed for the character to reach the target position from the starting position. If it is not possible to reach the target, output -1. Constraints * 2 leq N,M leq 1000 * The grid contains exactly one \'S\' and one \'T\'. * All characters in the grid are either \'.\', \'#\', \'S\', or \'T\'. Input Input is given from Standard Input in the following format: N M <grid rows> Each row of the grid is provided as a string of length M. Output Output the minimum number of moves required to reach the target position from the starting position. If it is impossible to reach the target, output -1. Examples Input 5 5 S.... .#. ..... .#. ....T Output 8 Input 3 3 S.# .#. #T. Output -1","solution":"from collections import deque def min_moves_to_target(N, M, grid): def get_neighbors(x, y): neighbors = [] for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] != \'#\': neighbors.append((nx, ny)) return neighbors def bfs(start, target): visited = [[False] * M for _ in range(N)] queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited[start[0]][start[1]] = True while queue: x, y, dist = queue.popleft() if (x, y) == target: return dist for nx, ny in get_neighbors(x, y): if not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1 start, target = None, None for i in range(N): for j in range(M): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'T\': target = (i, j) if start is None or target is None: return -1 return bfs(start, target)"},{"question":"In the land of Codemonia, there is a famous bidding game. Players take turns to bid on a sequence of numbers, and the highest bidder on each number wins that bid. The twist is that each bid amount must be a divisor of the number being bid upon. You are invited to automate this game. The challenge: For a given set of numbers, find the sum of all the unique valid bids for each number considering all divisors of that number. INPUT First line of input gives N, the number of test cases. N lines follow, each having M as a positive integer. OUTPUT Print value of sum of all unique valid bids for each number in separate lines. CONSTRAINTS 1 ≤ N ≤ 50 1 ≤ M ≤ 100000 SAMPLE INPUT 2 10 12 SAMPLE OUTPUT 18 28 Explanation For the first case, divisors of 10 are 1, 2, 5, and 10. The sum is 1 + 2 + 5 + 10 = 18. For the second case, divisors of 12 are 1, 2, 3, 4, 6, and 12. The sum is 1 + 2 + 3 + 4 + 6 + 12 = 28.","solution":"def sum_of_divisors(n): Returns the sum of all divisors of n. divisors_sum = 0 for i in range(1, n + 1): if n % i == 0: divisors_sum += i return divisors_sum def process_test_cases(test_cases): Process each test case and return the respective result. results = [] for case in test_cases: results.append(sum_of_divisors(case)) return results"},{"question":"Little Bob likes playing with strings. He is particularly interested in finding the most frequent substring within a given string. A substring is defined as any contiguous sequence of characters within the string. Bob\'s task for you is to find the most frequent substring of a given length L from the string. If there are multiple substrings with the same maximum frequency, output the lexicographically smallest one. Input: The first line contains the number of test cases T. Each test case contains a single string S followed by an integer L. Output: For each test case, output the most frequent substring of length L. If there are multiple substrings with the same frequency, output the lexicographically smallest one. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 1 ≤ L ≤ |S| SAMPLE INPUT 3 abababab 2 abcdef 3 aabbccdd 1 SAMPLE OUTPUT ab abc a Explanation: Test Case #1: The substrings of length 2 are \\"ab\\", \\"ba\\", \\"ab\\", \\"ba\\", \\"ab\\", \\"ba\\", \\"ab\\". The substring \\"ab\\" has the highest frequency, which is 4. Test Case #2: The substrings of length 3 are \\"abc\\", \\"bcd\\", \\"cde\\", \\"def\\". Each substring has a frequency of 1, so we choose the lexicographically smallest one: \\"abc\\". Test Case #3: The substrings of length 1 are \\"a\\", \\"a\\", \\"b\\", \\"b\\", \\"c\\", \\"c\\", \\"d\\", \\"d\\". Each substring appears twice, so we choose the lexicographically smallest one: \\"a\\".","solution":"def most_frequent_substring(s, l): Returns the most frequent substring of length l in string s. If there are multiple substrings with the same frequency, returns the lexicographically smallest one. from collections import Counter substrings = [s[i:i+l] for i in range(len(s) - l + 1)] substring_freq = Counter(substrings) max_freq = max(substring_freq.values()) most_frequent_substrings = [key for key in substring_freq if substring_freq[key] == max_freq] most_frequent_substrings.sort() return most_frequent_substrings[0] def process_test_cases(test_cases): results = [] for (s, l) in test_cases: results.append(most_frequent_substring(s, l)) return results"},{"question":"Write a Python function to solve the following problem: You have a set of boxes, each with a certain weight and value. You need to choose which boxes to include in a collection such that the total weight does not exceed a given limit, and the total value is maximized. This is a classic problem known as the \\"Knapsack Problem\\". Specifically, you are given a weight limit and a list of tuples where each tuple represents a box with a weight and a value. Your task is to find the maximum value you can obtain by selecting a subset of boxes such that their total weight does not exceed the given limit. # Input Format - An integer `W` representing the maximum allowable weight. - An integer `n` representing the number of boxes. - A list of `n` tuples, where each tuple comprises two integers: `(weight, value)`. # Output Format Return a single integer representing the maximum value you can obtain. # Constraints - 0 ≤ W ≤ 1000 - 0 ≤ n ≤ 100 - 1 ≤ weight, value ≤ 100 # Example Input ``` 50 3 [(10, 60), (20, 100), (30, 120)] ``` Output ``` 220 ``` Explanation By selecting the first two boxes (10+20 weight), we get a total value of 60+100 = 160, and by selecting the second and third boxes (20+30 weight), we get a total value of 100+120 = 220. The latter is the maximum value under the weight limit of 50. Implement the function `knapsack(W, n, items)` to solve the problem. ```python def knapsack(W, n, items): # Initialize dp array dp = [0] * (W + 1) # Process each item for i in range(n): weight, value = items[i] # Update dp array backward to avoid overwriting for w in range(W, weight-1, -1): dp[w] = max(dp[w], dp[w-weight] + value) return dp[W] ```","solution":"def knapsack(W, n, items): Determine the maximum value that can be obtained with a weight constraint W and a list of items each with a given weight and value. Args: W : int : maximum allowable weight. n : int : number of boxes. items : list of tuples : each tuple contains two integers (weight, value). Returns: int : maximum value that can be obtained. # Initialize dp array dp = [0] * (W + 1) # Process each item for i in range(n): weight, value = items[i] # Update dp array backward to avoid overwriting for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return dp[W]"},{"question":"Alex is assigned the task of managing a collection of books in his library. Each book has a unique ID, and every book belongs to one of several genres. Additionally, each book has a score which indicates its popularity. Given the list of books with their respective genres and scores, Alex wants to find the top scoring book for each genre. Write a program to help Alex determine these books. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of books. The following n lines contain a string, a string, and an integer separated by spaces, representing the book ID, genre, and score of each book, respectively. The book ID is a string of length at most 100, and the genre is a string of length at most 100. The score is an integer between 1 and 1000 inclusive. Output For each genre, output the book ID of the top scoring book. If there are multiple books with the same top score in a genre, output the book ID that appears first in the input. The output genres should be in the order they first appear in the input. Examples Input 5 B001 Fiction 90 B002 NonFiction 85 B003 Fiction 95 B004 Mystery 80 B005 Fiction 95 Output B003 B002 B004 Input 3 A101 SciFi 78 A102 SciFi 78 A103 SciFi 80 Output A103 Input 4 H123 Fantasy 50 H124 Romance 70 H125 Fantasy 75 H126 Romance 70 Output H125 H124","solution":"def top_scoring_books(n, book_data): genre_top_book = {} for book_id, genre, score in book_data: score = int(score) if genre not in genre_top_book or score > genre_top_book[genre][1] or (score == genre_top_book[genre][1] and genre_top_book[genre][0] > book_id): genre_top_book[genre] = (book_id, score) result = [] seen_genres = set() for book_id, genre, score in book_data: if genre not in seen_genres: result.append(genre_top_book[genre][0]) seen_genres.add(genre) return result"},{"question":"You are given a binary tree with n nodes. Each node is labeled with a unique integer from 1 to n. You need to determine the length of the longest path in the tree where all the nodes on the path have labels in strictly increasing order. The length of a path is defined as the number of edges in the path. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of nodes in the tree. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating that there is an edge between node u and node v. Output Print a single integer — the length of the longest increasing path in the tree. Examples Input 5 1 2 1 3 3 4 3 5 Output 2 Input 4 1 2 2 3 3 4 Output 3","solution":"def longest_increasing_path(n, edges): from collections import defaultdict # Create the adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Helper function for DFS traversal def dfs(node, parent): max_length = 0 for neighbor in tree[node]: if neighbor > node and neighbor != parent: max_length = max(max_length, 1 + dfs(neighbor, node)) return max_length longest_path = 0 # Try DFS from each node to find the max increasing path starting from each node for i in range(1, n + 1): longest_path = max(longest_path, dfs(i, None)) return longest_path"},{"question":"In a social network graph, people are represented as nodes, and friendships are represented as edges between these nodes. A triangle in this graph is a set of three nodes where each node is connected to the other two nodes by an edge. Given an adjacency matrix representation of this graph, write a function to count the number of triangles in the graph. The adjacency matrix is a 2D list where if matrix[i][j] == 1, then there is an edge between node i and node j; otherwise, there is no edge. Note: - The graph is undirected and does not contain self-loops. - An adjacency matrix is symmetric. Input - An integer n (2 ≤ n ≤ 100), the number of nodes in the graph. - A 2D list matrix of size n x n, representing the adjacency matrix of the graph. The values in the matrix will be 0 or 1. Output Output a single integer, the number of triangles in the graph. Examples Input 3 [ [0, 1, 1], [1, 0, 1], [1, 1, 0] ] Output 1 Input 4 [ [0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0] ] Output 0","solution":"def count_triangles(n, matrix): Counts the number of triangles in a social network graph represented by an adjacency matrix. Parameters: n (int): Number of nodes in the graph. matrix (list of lists): Adjacency matrix representing the graph. Returns: int: Number of triangles in the graph. triangles = 0 for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if matrix[i][j] and matrix[j][k] and matrix[k][i]: triangles += 1 return triangles"},{"question":"In a galaxy far away, there is a circular planet known as Planet X which is divided into n sectors numbered from 1 to n. Each sector has a unique resource, and the inhabitants of Planet X have built m pipelines to distribute these resources among the sectors. Each pipeline can only connect two different sectors. The inhabitants want to determine if any sector can be designated as a central hub such that all other sectors are either directly connected to it or can be reached through a series of pipelines. If such a central hub exists, they would like to know the number of pipelines that need to be constructed to make the network fully connected. Input The first line contains two space-separated integers n and m (2 ≤ n ≤ 100 000, 0 ≤ m ≤ 200 000) — the number of sectors and the number of existing pipelines, respectively. Each of the following m lines contains two space-separated integers u_i and v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i) describing a pipeline connecting sectors u_i and v_i. Output If a central hub can be designated, print \\"Yes\\" followed by the minimum number of pipelines required. Otherwise, print \\"No\\". Examples Input 5 3 1 2 2 3 4 5 Output Yes 1 Input 6 5 1 2 2 3 3 4 4 5 5 6 Output Yes 0 Input 4 2 1 2 3 4 Output Yes 1 Input 6 2 1 2 4 5 Output No Note In the first example, designating sector 2 as a hub and constructing a pipeline between sectors 2 and 4 would connect all sectors. In the second example, the network is already fully connected, so no additional pipelines are necessary. In the third example, connecting sector 2 to sector 3 with an additional pipeline will make the network fully connected. In the fourth example, there is no single sector that can serve as a central hub to connect all the sectors through the given pipelines.","solution":"def find_connected_components(n, pipelines): from collections import defaultdict, deque graph = defaultdict(list) for u, v in pipelines: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = 0 def bfs(node): queue = deque([node]) while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) for i in range(1, n + 1): if not visited[i]: bfs(i) components += 1 return components def minimum_pipelines_required(n, m, pipelines): components = find_connected_components(n, pipelines) if components == 1: return \\"Yes 0\\" elif components == 2: return \\"Yes 1\\" else: return \\"No\\""},{"question":"Fashion enthusiasts often struggle to decide which combinations of different items to purchase within a given budget while maximizing their style points. Let\'s assume you have a variety of items, each with a certain style point value and cost. You want to help these enthusiasts find the optimal set of items that maximizes their total style points without exceeding their budget. Given a budget and a list of items, each with a cost and style point value, your task is to determine the maximum style points that can be achieved within the given budget. Input The first line contains two integers, b and n (1 ≤ b ≤ 1000, 1 ≤ n ≤ 100) — the budget and the number of items respectively. Each of the next n lines contains two integers ci and si (1 ≤ ci, si ≤ 100), representing the cost and the style points of the i-th item. Output Print a single integer, the maximum style points that can be achieved with the given budget. Examples Input 50 5 10 60 20 100 30 120 40 240 50 300 Output 300 Input 60 3 30 50 20 70 50 100 Output 120 Note In the first example, the best option is to pick the item with the cost 50 and style points 300, as it maximizes the style points within the budget of 50. In the second example, the best option is to pick the items with costs 20 and 30, providing a total style points of 120 within the budget of 60.","solution":"def max_style_points(budget, items): Determine the maximum style points that can be achieved within a given budget. :param budget: int, the budget available to purchase items. :param items: list of tuples, each containing (cost, style point) for each item. :return: int, the maximum style points achievable within the budget. dp = [0] * (budget + 1) for cost, style in items: for j in range(budget, cost - 1, -1): dp[j] = max(dp[j], dp[j - cost] + style) return dp[budget]"},{"question":"A novel software system is designed to manage a database of books in a library. Each book is identified by a unique ISBN number, and the system needs to keep track of the status of each book - whether it is available or currently checked out. Your task is to implement a system to handle book checkouts and returns. The following functionalities should be supported: 1. `checkout(isbn)`: This function is called when a book is checked out. If the book is already checked out, the function should return \\"Book already checked out\\". If the book is available, the function should mark the book as checked out and return \\"Book checked out successfully\\". 2. `return_book(isbn)`: This function is called when a book is returned. If the book was not checked out, the function should return \\"Book was not checked out\\". If the book is checked out, the function should mark the book as available and return \\"Book returned successfully\\". 3. `add_book(isbn)`: This function is called to add a new book to the system. If the ISBN already exists in the system, the function should return \\"Book already exists\\". Otherwise, it should add the book with an available status and return \\"Book added successfully\\". 4. `remove_book(isbn)`: This function is called to remove a book from the system. If the book is checked out or does not exist, the function should return \\"Book cannot be removed\\". Otherwise, it should remove the book and return \\"Book removed successfully\\". Implement the system using a class `Library`. **Input**: - The first line contains an integer `Q`, the number of queries. - Each of the next `Q` lines contains one query, which can be of the following types: - `checkout [ISBN]` - `return_book [ISBN]` - `add_book [ISBN]` - `remove_book [ISBN]` - [ISBN] is a string representing the book\'s ISBN number. **Output**: - For each query, output the result as specified above. **Constraints**: - 1 ≤ Q ≤ 1000 - ISBN strings contain only digits and letters, and are not empty. **Example**: ``` Input: 8 add_book 12345 checkout 12345 checkout 12345 add_book 12345 return_book 12345 checkout 12345 remove_book 12345 remove_book 12345 Output: Book added successfully Book checked out successfully Book already checked out Book already exists Book returned successfully Book checked out successfully Book cannot be removed Book removed successfully ``` **Note**: - Assume all ISBNs are initially not present in the system, and operations are case-sensitive (e.g., \\"checkout\\" is different from \\"Checkout\\").","solution":"class Library: def __init__(self): self.books = {} # Dictionary to store book status: \'available\' or \'checked out\' def checkout(self, isbn): if isbn not in self.books: return \\"Book not in the system\\" if self.books[isbn] == \'checked out\': return \\"Book already checked out\\" else: self.books[isbn] = \'checked out\' return \\"Book checked out successfully\\" def return_book(self, isbn): if isbn not in self.books: return \\"Book not in the system\\" if self.books[isbn] == \'available\': return \\"Book was not checked out\\" else: self.books[isbn] = \'available\' return \\"Book returned successfully\\" def add_book(self, isbn): if isbn in self.books: return \\"Book already exists\\" else: self.books[isbn] = \'available\' return \\"Book added successfully\\" def remove_book(self, isbn): if isbn not in self.books or self.books[isbn] == \'checked out\': return \\"Book cannot be removed\\" else: del self.books[isbn] return \\"Book removed successfully\\""},{"question":"A company wishes to conduct a coding challenge wherein participants have to find all unique subsets of a given set of integers. The rules are as follows: given a set of distinct integers, participants should generate all possible subsets of this set including the empty subset. INPUT The first line contains the integer N (0 ≤ N ≤ 10), which represents the number of elements in the set. The second line contains N space-separated integers that form the set. Each integer is distinct and lies between 1 and 100. OUTPUT Output should include all the unique subsets in any order. Each subset should be output on a new line in the format of space-separated integers, all subsets including the empty subset must be printed. SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 1 2 3 1 2 1 3 2 3 1 2 3","solution":"def subsets(nums): Returns all unique subsets of a given set of distinct integers. :param nums: list of distinct integers :return: list of subsets of nums result = [] nums.sort() def backtrack(start, path): result.append(path) for i in range(start, len(nums)): backtrack(i + 1, path + [nums[i]]) backtrack(0, []) return result"},{"question":"In the magical world of cryptography, Alice and Bob frequently exchange secret messages. They have developed an encryption method based on permutations of a string. A permutation of a string is any possible reordering of its characters. To make their messages even more secure, they decided to use a custom permutation code. Alice needs your help to implement the following encryption process: 1. Given a string s of length n (1 ≤ n ≤ 10), generate all possible permutations of s. 2. Each permutation should be converted to its corresponding integer code. The integer code is defined as follows: Convert each alphabetical character to its position in the alphabet (a = 1, b = 2, ..., z = 26). Sum these positions to get the code for that permutation. 3. Output the maximum code among all permutations of the string. Input The input consists of a single line containing the string s. The string s consists of lowercase English letters only. Output Output a single integer, the maximum code possible among all permutations of the string. Examples Input abc Output 12 Input cab Output 12 Input bbaa Output 10 Note In the first example, the string \\"abc\\" has permutations \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\". All permutations result in the same code of 1+2+3=6. The maximum code is thus 6. In the second example, the string \\"cab\\" has the same permutations as \\"abc\\" and hence the maximum code is also 6. In the third example, the string \\"bbaa\\" has permutations like \\"bbaa\\", \\"baba\\", \\"aabb\\", etc. Among all these permutations, the maximum possible sum is 2+2+1+1=6.","solution":"from itertools import permutations def max_permutation_code(s): Given a string s, generate all possible permutations of s and return the maximum code among all permutations. The code of a permutation is defined as the sum of positions of its characters in the alphabet. def get_code(perm): return sum((ord(char) - ord(\'a\') + 1) for char in perm) max_code = 0 for perm in permutations(s): current_code = get_code(perm) if current_code > max_code: max_code = current_code return max_code"},{"question":"A teacher needs to allocate seats for students in an exam hall. The seating arrangement must be done in a way that no two students with the same last names sit adjacent to each other in any row. The teacher has provided the list of students and their last names. Your task is to determine if it is possible to allocate the seats according to the given rules. Input: The input is provided in the following format: ``` N first_last : first_last ``` Where `N` is the number of students, and each `first_last` represents the first and last name of a student. Output: Output \\"YES\\" if it is possible to arrange the seating as per the rules, otherwise output \\"NO\\". Constraints: * 1 ≤ N ≤ 1000 * Each name consists of only lowercase English letters and underscores (\'_\'). * There are no more than 100 unique last names. Example Input: ``` 5 john_smith emma_jones liam_smith olivia_brown noah_smith ``` Output: ``` NO ``` Explanation: It is not possible to arrange the students such that no two students with the last name \\"smith\\" sit next to each other.","solution":"from collections import Counter def can_allocate_seats(student_list): Determine if it is possible to arrange the seats according to the rules. Args: student_list: List of strings where each string represents a student\'s \\"first_last\\" name. Returns: \'YES\' if it is possible to arrange the seating as per the rules, otherwise \'NO\'. # Extract the last name from each student entry and create a list of last names. last_names = [student.split(\'_\')[1] for student in student_list] # Count the frequency of each last name. last_name_count = Counter(last_names) # Find the maximum occurrence of any last name. max_count = max(last_name_count.values()) # Total number of students N = len(student_list) # It is possible to arrange the seats if the frequency of the most common last name is <= half the list size (rounded up). if max_count <= (N + 1) // 2: return \\"YES\\" else: return \\"NO\\" # Reading input and processing def determine_seating_possible(input_string): Processes the input string and determines if seating arrangement is possible. Args: input_string: Input string containing the number of students followed by each student\'s first and last name. Returns: \'YES\' if it is possible to arrange the seating as per the rules, otherwise \'NO\'. input_lines = input_string.strip().split(\'n\') N = int(input_lines[0].strip()) student_list = [line.strip() for line in input_lines[1:1 + N]] return can_allocate_seats(student_list)"},{"question":"Alice is playing with a hidden n x n grid of integers, initially filled with zeros, and wants to maximize the sum of its elements by performing a series of operations. You can instruct Alice to add 1 to any element in a submatrix, the sum of whose corners you decide on. After performing at most k such operations, you need to return the maximal sum of the grid\'s elements. An operation consists of selecting two rows a and c (where 1 ≤ a ≤ c ≤ n) and two columns b and d (where 1 ≤ b ≤ d ≤ n), and then adding 1 to each integer in the submatrix defined by the corners (a,b) and (c,d) inclusive. Alice starts with an empty grid and performs each operation in turn. Given the constraints, provide a strategy to maximize the sum of the grid\'s elements. Your task is to help Alice determine the final sum of the grid after performing the optimal k operations. Input The first line contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 10000) — the size of the grid and the number of operations Alice can perform. Output Print a single integer — the maximum sum of the elements of the grid after performing the optimal k operations. Example Input 3 2 Output 4 Explanation In the example, you can perform the following operations: Operation 1: Select the whole grid (1,1) to (3,3) and add 1 to each element. The grid becomes: 1 1 1 1 1 1 1 1 1 Operation 2: Select the submatrix (1,1) to (2,2) and add 1 to each element. The grid becomes: 2 2 1 2 2 1 1 1 1 The final sum is 4 + 4 + 1 + 1 + 1 + 1 = 16","solution":"def maximize_grid_sum(n, k): Returns the maximum sum of the grid elements after performing at most k operations on an n x n grid initially filled with zeros. # The maximum sum after k operations on the largest submatrix (which is the whole grid) is: return k * n * n"},{"question":"Given a string S consisting of only lowercase English letters, determine whether it can be converted into a palindrome if you are allowed to make at most one change to the string (you can replace any character with any other character). Input The input consists of a single line containing the string S (1 ≤ |S| ≤ 10^5). Output Output \\"YES\\" if you can convert S into a palindrome by changing at most one character, otherwise output \\"NO\\". Examples Input abca Output YES Input abcd Output NO Input racecar Output YES Note In the first example, you can replace either \'b\' with \'a\' or \'c\' with \'a\' to make the string \\"abca\\" a palindrome. In the second example, no single-character change can make \\"abcd\\" a palindrome. In the third example, \\"racecar\\" is already a palindrome, so no changes are needed, and the answer is \\"YES\\".","solution":"def can_be_palindrome(s): Returns \\"YES\\" if the string s can be converted into a palindrome by changing at most one character, otherwise returns \\"NO\\". left, right = 0, len(s) - 1 mismatch_count = 0 while left < right: if s[left] != s[right]: mismatch_count += 1 if mismatch_count > 1: return \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"You are given a rectangular grid of size `m x n`, where each cell is initially empty. You need to place the maximum number of knights on the grid such that no two knights attack each other. Knights attack each other if they are placed in the positions of an L-shape move from each other. That is, a knight at position `(i, j)` attacks a knight at position `(i+2, j+1)`, `(i+2, j-1)`, `(i-2, j+1)`, `(i-2, j-1)`, `(i+1, j+2)`, `(i+1, j-2)`, `(i-1, j+2)`, and `(i-1, j-2)`. Your task is to determine the maximum number of knights that can be placed on the grid such that no two knights attack each other. Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 1000) — the number of rows and columns of the grid. Output Output a single integer — the maximum number of knights that can be placed on the grid such that no two knights attack each other. Examples Input 2 3 Output 4 Input 4 4 Output 8 Note In the first example, a possible placement of knights could be: ``` K . K . K . K . K ``` In the second example, a possible placement could be: ``` K . K . . K . K K . K . . K . K ``` where `K` denotes a knight and `.` denotes an empty cell.","solution":"def max_knights(m, n): Given dimensions m x n, returns the maximum number of knights that can be placed on the grid so that no two knights attack each other. # If either m or n is 1, all cells can be filled with knights if m == 1 or n == 1: return m * n # If either m or n is 2, use pattern to maximize knight placement if m == 2 or n == 2: max_dim = max(m, n) return (max_dim // 4) * 4 + min(2, max_dim % 4) * 2 # General case for larger boards return (m * n + 1) // 2"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Given a string, determine if it can be rearranged to form a palindrome. If it’s possible, print \\"Yes\\". Otherwise, print \\"No\\". Input The first line contains an integer t (1 ≤ t ≤ 100), denoting the number of test cases. The following t lines contain a string each. Each string contains only lowercase Latin letters and its length is between 1 and 100, inclusive. Output Print t lines, one per test case. Each line should contain \\"Yes\\" if the corresponding string can be rearranged to form a palindrome, otherwise print \\"No\\". You can print each line in any case (upper or lower). Example Input 5 civic ivicc hello aabb abcba Output Yes Yes No Yes Yes","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. Args: s (str): The input string consisting of lowercase letters. Returns: str: \\"Yes\\" if the string can be rearranged to form a palindrome, otherwise \\"No\\". from collections import Counter count = Counter(s) odd_count = sum(1 for char_count in count.values() if char_count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character # has an odd count. return \\"Yes\\" if odd_count <= 1 else \\"No\\" def check_palindrome_cases(t, cases): Processes multiple test cases to determine if they can be rearranged to form palindromes. Args: t (int): Number of test cases. cases (list of str): List of strings to check. Returns: list of str: Results for each test case, \\"Yes\\" or \\"No\\". return [can_form_palindrome(case) for case in cases]"},{"question":"Alice loves playing with arrays of numbers. She has an array `arr` of length `n` and performs a special kind of operation on it: In one operation, she can choose any contiguous subarray of `arr` and reverse it. The goal of Alice is to make all elements in the array in a non-decreasing order (sorted in ascending order) using the minimum number of these operations. You are to write a function that finds the minimum number of operations required to sort the array `arr`. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of elements in the array `arr`. - The second line contains `n` integers `arr_1, arr_2, ..., arr_n` (1 ≤ arr_i ≤ 1000), the elements of the array. # Output - Print a single integer, the minimum number of operations required to sort the array in ascending order. # Examples Example 1: Input: ``` 4 4 2 1 3 ``` Output: ``` 2 ``` Example 2: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 0 ``` Example 3: Input: ``` 3 3 1 2 ``` Output: ``` 2 ``` # Explanation: - In the first example, one optimal sequence of operations is: - Reverse the subarray [2, 1] making the array [4, 1, 2, 3] - Reverse the entire array making it [3, 2, 1, 4] which is sorted. - In the second example, the array is already sorted, so 0 operations are required. - In the third example, reversing the subarray [3] to get [2, 1, 3], and then reversing [2, 1] to get [1, 2, 3] which is sorted. The function should be efficient with respect to the given constraints.","solution":"def minimum_operations_to_sort(n, arr): This function returns the minimum number of operations required to sort the given array in ascending order where the operation is defined as reversing a contiguous subarray. if n <= 1: return 0 sorted_arr = sorted(arr) if arr == sorted_arr: return 0 l, r = 0, n - 1 while arr[l] == sorted_arr[l]: l += 1 while arr[r] == sorted_arr[r]: r -= 1 subarray_reversed = arr[:l] + arr[l:r+1][::-1] + arr[r+1:] if subarray_reversed == sorted_arr: return 1 return 2"},{"question":"You are given a series of strings and you need to determine if any string is an anagram of a previously seen string. An anagram of a string is another string that contains the same characters, only the order of characters can be different. Formally, for each string s_i in the i-th line, output \\"YES\\" (without quotes) if there exists an index j such that s_i is an anagram of s_j and j < i, otherwise, output \\"NO\\" (without quotes). Input First line of input contains an integer n (1 ≤ n ≤ 100) — the number of strings in the list. Next n lines each contain a string s_i, consisting of lowercase English letters. The length of each string is between 1 and 100. Output Output n lines each containing either \\"YES\\" or \\"NO\\" (without quotes), depending on whether this string is an anagram of any previously seen string. Examples Input 5 listen silent enlist tinsel google Output NO YES YES YES NO Input 4 abc bca def fed Output NO YES NO YES Note In test case 1, for i = 2, the string \\"silent\\" is an anagram of \\"listen\\". Hence, the answer is \\"YES\\". Similarly, \\"enlist\\" and \\"tinsel\\" are anagrams of \\"listen\\". In test case 2, for i = 2, the string \\"bca\\" is an anagram of \\"abc\\". For i = 4, \\"fed\\" is an anagram of \\"def\\". Thus, the respective answers are \\"YES\\".","solution":"def check_anagrams(n, strings): # Function to sort characters of a string to test the anagram condition def sorted_string(s): return \'\'.join(sorted(s)) seen_sorted_strings = set() result = [] for s in strings: sorted_s = sorted_string(s) if sorted_s in seen_sorted_strings: result.append(\\"YES\\") else: result.append(\\"NO\\") seen_sorted_strings.add(sorted_s) return result"},{"question":"Anna works at a tech company and is responsible for maintaining a set of servers. Each server has a certain amount of memory available, and tasks of varying memory requirements are allocated to these servers throughout the day. Anna has a list of n servers and their available memory in megabytes. She also has a list of m tasks, where each task requires a certain amount of memory. Anna wants to ensure that each task is assigned to a server such that the server\'s available memory is greater than or equal to the task\'s memory requirement. Each server can handle only one task at a time, but tasks are accomplished instantaneously, meaning that after serving a task, the server\'s available memory remains the same. Anna would like to determine if each task can be assigned to a server and, if so, to which server. Help Anna by writing a program that, for each task, finds a suitable server with enough available memory. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 2 ⋅ 10^5) — the number of servers and the number of tasks, respectively. - The second line contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9) — the available memory in each of the servers. - The third line contains m integers t_1, t_2, ..., t_m (1 ≤ t_i ≤ 10^9) — the memory required by each of the tasks. Output: - Print m integers: for each task, print the index of the server (1-indexed) that can handle the task, or -1 if no such server exists. Example: Input: 4 3 10 20 15 30 15 10 40 Output: 2 1 -1 Explanation: - The first task requires 15 MB, and server 2 with 20 MB can handle it. - The second task requires 10 MB, and server 1 with 10 MB can handle it. - The third task requires 40 MB, but there is no server with at least 40 MB of available memory. In this example: - For the first task of 15 MB, we can assign it to server 2 (20 MB). - For the second task of 10 MB, we can assign it to server 1 (10 MB). - For the third task of 40 MB, there is no server with sufficient memory, so the answer is -1.","solution":"def assign_tasks_to_servers(n, m, servers, tasks): For each task, finds a suitable server with enough available memory. Returns a list of indices of servers (1-indexed) that can handle the tasks, or -1 if no such server exists. result = [] for task in tasks: found = False for idx in range(n): if servers[idx] >= task: result.append(idx + 1) # Returning 1-indexed server number found = True break if not found: result.append(-1) return result"},{"question":"In a distant kingdom, there are `n` castles connected by `m` bidirectional roads. Each road has a travel cost associated with it. The King decided to renovate the road network and needs to ensure that his knights can travel between any two castles at the minimum possible cost. As the royal engineer, your task is to determine the minimum cost required to ensure every pair of castles is connected, i.e., to construct a Minimal Spanning Tree (MST) of the road network. Input The first line of the input contains two integers, `n` (2 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 5000) — the number of castles and the number of roads, respectively. The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n; u ≠ v; 1 ≤ w ≤ 10000). They describe a road connecting castles `u` and `v` with a travel cost of `w`. Output Output a single integer — the minimum cost to connect all castles. If it\'s not possible to connect all castles, print \\"Impossible\\". Examples Input 4 5 1 2 1 1 3 4 2 3 2 3 4 3 1 4 5 Output 6 Input 3 1 1 2 2 Output Impossible Notes In the first example, the minimum spanning tree is constructed using roads: (1-2, 2-3, 3-4) with a total cost of 1 + 2 + 3 = 6. In the second example, it\'s impossible to connect all castles as there are only two castles connected by one road and the third castle remains isolated. Hint: Use Kruskal\'s or Prim\'s algorithm to find the Minimum Spanning Tree (MST).","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_cost_to_connect_castles(n, m, roads): if m == 0 or n == 0: return \\"Impossible\\" roads.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) e = 0 i = 0 result = [] while e < n - 1: if i >= m: break u, v, w = roads[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append((u, v, w)) union(parent, rank, x, y) if e != n - 1: return \\"Impossible\\" total_cost = 0 for u, v, weight in result: total_cost += weight return total_cost"},{"question":"Hermione is at it again, preparing for her Arithmancy exams, and she has come across a challenging new problem related to prime numbers. She has asked you to write a program that will help her solve it. As a Muggle-born, you know this is a chance to impress her with your coding skills. The problem is as follows: Given a number N, you need to determine the number of prime numbers less than or equal to N. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. INPUT FORMAT: The first line contains a single integer T (1 ≤ T ≤ 10^5), the number of test cases. Each of the next T lines contains a single integer N (1 ≤ N ≤ 10^6). OUTPUT FORMAT: For each test case, output a single line containing the number of prime numbers less than or equal to N. SAMPLE INPUT: 5 10 5 100 500 1000 SAMPLE OUTPUT: 4 3 25 95 168 To solve this problem efficiently, you might need to utilize the Sieve of Eratosthenes to precompute the number of primes up to the maximum input value among all test cases. Additionally, consider storing the results for quick lookup during the test cases.","solution":"def sieve_of_eratosthenes(max_value): is_prime = [True] * (max_value + 1) is_prime[0] = is_prime[1] = False p = 2 while p * p <= max_value: if is_prime[p]: for i in range(p * p, max_value + 1, p): is_prime[i] = False p += 1 prime_count = [0] * (max_value + 1) for i in range(1, max_value + 1): prime_count[i] = prime_count[i - 1] if is_prime[i]: prime_count[i] += 1 return prime_count def count_primes_up_to(max_value): prime_count = sieve_of_eratosthenes(max_value) def primes_up_to(n): return prime_count[n] return primes_up_to def solve_number_of_primes(test_cases): max_value = max(test_cases) primes_up_to_func = count_primes_up_to(max_value) results = [] for n in test_cases: results.append(primes_up_to_func(n)) return results"},{"question":"Mia is organizing her books on shelves. She has a collection of n books, each with a certain width and category. Categories are assigned as integers, ranging from 1 to m. She wants to arrange these books on shelves such that each shelf contains books from only one category and the width of books on each shelf does not exceed w. Help Mia determine the maximum number of shelves she can fill completely using her books. Input The first line contains three integers n, m, and w (1 ≤ n, m ≤ 500, 1 ≤ w ≤ 10000) — the number of books, the number of categories, and the maximum width of books each shelf can hold, respectively. The i-th of the next n lines contains two integers c_i and d_i (1 ≤ c_i ≤ m, 1 ≤ d_i ≤ w) — the category and the width of the i-th book, respectively. Output Output one integer — the maximum number of shelves Mia can fill completely. Examples Input 4 2 5 1 2 1 3 2 2 2 3 Output 2 Input 3 3 4 1 2 2 2 3 4 Output 1 Input 5 1 10 1 3 1 3 1 3 1 2 1 2 Output 1 Input 6 3 7 1 2 1 3 2 1 2 6 3 4 3 4 Output 2 Note In the first example, Mia can fill two shelves — one with two books of category 1 with widths 2 and 3, and another with two books of category 2 with widths 2 and 3. In the second example, Mia can only fill one shelf using all books as each book belongs to a different category and no shelf can fit two books of the same category due to width constraint. In the third example, Mia has only one category and she can fit three of the books exactly into a 10-width shelf. In the fourth example, Mia can fill two shelves — one with books of category 1 and another with books of category 3.","solution":"def max_complete_shelves(n, m, w, books): from collections import defaultdict # Group books by their categories category_books = defaultdict(list) for c, d in books: category_books[c].append(d) # Calculate maximum full shelves full_shelves = 0 for category in category_books: category_books[category].sort(reverse=True) current_width = 0 for book in category_books[category]: if current_width + book <= w: current_width += book else: full_shelves += 1 current_width = book if current_width == w: full_shelves += 1 return full_shelves"},{"question":"A string is called diverse if all characters of this string are different. You are given a string *s* consisting of lowercase English letters that is a permutation of the characters from \'a\' to \'z\' (inclusive). Your task is to determine the longest diverse substring of *s*. The substring is defined as a contiguous segment of a string. Input The first line contains an integer *n* (1 ≤ n ≤ 26) — the length of the string *s*. The second line contains a string *s* consisting only of unique lowercase English letters. Output Output a single integer — the length of the longest diverse substring of *s*. Examples Input 5 abcde Output 5 Input 5 edcba Output 5 Input 4 abdc Output 4 Input 3 cba Output 3","solution":"def longest_diverse_substring_length(n, s): Returns the length of the longest diverse substring of the given string s. Since s is composed of unique characters and already a permutation of \'a\' to \'z\', the longest diverse substring that can be formed is the string s itself. Parameters: n (int): the length of the string s s (str): a string containing unique lowercase English letters Returns: int: the length of the longest diverse substring return n"},{"question":"Aelna, a skilled alchemist, has recently been experimenting with a special mixture that can either increase or decrease a certain substance in a potion. She wants to achieve the target concentration exactly. However, due to the nature of her ingredients, she is only able to perform two types of actions with specific values. Given the initial concentration, the target concentration, and two integers that represent the two allowed action values, determine the minimum number of actions required to reach the target concentration from the initial concentration exactly, or determine that it is not possible. Input The first line contains three integers `a`, `b`, and `c` (1 ≤ |a|, |b|, |c| ≤ 100), where `a` is the initial concentration, `b` is the target concentration, and `c` is the action value that can be either added or subtracted to change the concentration. Output Output a single integer representing the minimum number of actions required to reach the target concentration exactly. If it is not possible, output -1. Examples Input 10 25 3 Output 5 Input 5 5 2 Output 0 Input 3 6 4 Output -1 Explanation In the first example, starting with `10`, Aelna can perform the following actions: add 3 (resulting in 13), add 3 (resulting in 16), add 3 (resulting in 19), add 3 (resulting in 22), and finally add 3 (resulting in 25). This took 5 actions. In the second example, no actions are needed as the initial concentration is already equal to the target concentration. In the third example, it is impossible to reach `6` from `3` using increments or decrements of `4` only.","solution":"def min_actions(a, b, c): Returns the minimum number of actions required to reach the target concentration from the initial concentration exactly using the specified action value. If it is not possible, return -1. if a == b: return 0 # No action needed if initial is already the target # Calculate the difference diff = abs(b - a) # If the difference is a multiple of the action value, it\'s possible to reach the target if diff % c == 0: return diff // c return -1 # Not possible to reach the target concentration"},{"question":"Polycarp is a huge fan of palindromic phrases. A palindromic phrase is a sequence of characters that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. For example, \\"A man, a plan, a canal, Panama\\" is a palindromic phrase. Polycarp has recently learned how to type on a keyboard and sometimes makes mistakes by not pressing the spacebar, resulting in a single long string of characters instead of a neatly separated sentence. Polycarp wants to know whether his long, unspaced string can be rearranged to form a palindromic phrase. Can you help him? Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 105), where |s| is the length of the string. The string contains only lowercase Latin letters. Output Print \\"YES\\" if the string can be rearranged to form a palindromic phrase, and \\"NO\\" otherwise. Examples Input aaabbbb Output YES Input civic Output YES Input ivicc Output YES Input hello Output NO Input racecar Output YES Note In the first example, the string \\"aaabbbb\\" can be rearranged to form the palindromic phrase \\"ababbaba\\". In the second example, \\"civic\\" is already a palindromic phrase. In the third example, \\"ivicc\\" can be rearranged to form the palindromic phrase \\"civic\\". In the fourth example, \\"hello\\" cannot be rearranged to form a palindromic phrase. In the fifth example, \\"racecar\\" is already a palindromic phrase.","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindromic phrase. Args: - s (str): The input string containing only lowercase Latin letters. Returns: - str: \\"YES\\" if the string can be rearranged to form a palindromic phrase, otherwise \\"NO\\". from collections import Counter freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given a sequence of integers that represent the stock prices of a company on consecutive days. You are allowed to complete at most one transaction (i.e., buy one and sell one share of the stock). Design an algorithm to find the maximum profit that can be achieved. Constraints * All values in input are integers. * 1 leq N leq 10^5 * 0 leq prices[i] leq 10^4 Input Input is given from Standard Input in the following format: N prices[0] prices[1] ... prices[N-1] Output Print the maximum profit that can be achieved from one transaction. If no profit is possible, return 0. Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Input 7 8 2 6 3 1 7 4 Output 6","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from one transaction. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given an undirected graph and your task is to find the number of unique shortest paths between two given nodes. Each path should be considered unique if it passes through a different set of edges, even if the nodes the path passes through are the same. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 2000) — the number of nodes and edges, respectively. Each of the following m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) denoting that there is an edge between nodes u and v with weight w. The last line contains two integers s and t (1 ≤ s, t ≤ n) — the source and the target nodes. Output Print a single integer — the number of unique shortest paths between nodes s and t. Examples Input 5 6 1 2 1 2 3 2 3 4 1 4 5 3 1 3 4 2 4 5 1 5 Output 1 Input 4 4 1 2 1 2 3 1 3 4 1 1 3 2 1 4 Output 2 Note In the first example, there is only one shortest path from node 1 to node 5, which is 1 -> 2 -> 3 -> 4 -> 5. In the second example, there are two distinct shortest paths from node 1 to node 4: 1. 1 -> 2 -> 3 -> 4 with a total weight of 3. 2. 1 -> 3 -> 4 with a total weight of 3.","solution":"import heapq from collections import defaultdict, deque def dijkstra_count_paths(n, edges, s, t): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) dist = [float(\'inf\')] * (n + 1) ways = [0] * (n + 1) dist[s] = 0 ways[s] = 1 priority_queue = [(0, s)] while priority_queue: d, u = heapq.heappop(priority_queue) if d > dist[u]: continue for v, w in graph[u]: if d + w < dist[v]: dist[v] = d + w ways[v] = ways[u] heapq.heappush(priority_queue, (d + w, v)) elif d + w == dist[v]: ways[v] += ways[u] return ways[t] def parse_input(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) edges = [] for i in range(1, m + 1): u, v, w = map(int, lines[i].split()) edges.append((u, v, w)) s, t = map(int, lines[m + 1].split()) return n, edges, s, t"},{"question":"Given an unsorted list of integers, determine the smallest positive integer that does not appear in the list. Your task is to write a function that finds this missing integer in linear time and constant space, which means the time complexity should be O(n) and the space complexity should be O(1). Constraints * The list contains between 1 and 1000 integers (inclusive). * Each integer in the list can range from -1000 to 1000, and there may be duplicates. Input Input is given from Standard Input in the following format: n a1 a2 a3 ... an Here, `n` is the length of the list, and `a1, a2, a3, ..., an` are the integers in the list. Output Print the smallest positive integer that does not appear in the list. Examples Input 6 3 4 -1 1 -2 2 Output 5 Input 5 2 3 7 6 8 Output 1 Input 8 1 2 0 4 5 3 7 6 Output 8","solution":"def find_smallest_missing_positive_integer(nums): This function finds the smallest positive integer that does not appear in the given list of integers. n = len(nums) # Flag elements outside the range for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Marking presence of numbers for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Finding first missing positive integer for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"You are given a string s consisting of letters (a-z) and numbers (0-9). Your task is to transform the string by swapping each letter with its corresponding letter in the reversed alphabet and each number with its complement to 9. Letters and numbers should be swapped independently. For example: - The letter \'a\' should be swapped with \'z\', \'b\' with \'y\', ..., \'m\' with \'n\'. - The number \'0\' should be swapped with \'9\', \'1\' with \'8\', ..., \'4\' with \'5\'. Each transformation should be persistently applied to all characters in the string. Write a function transform_string(s) that takes a string s and returns the transformed string. # Input: - A single string s (1 ≤ length of s ≤ 100). # Output: - A single string that is the transformed version of input string s. # Example: Input: ``` s = \\"abc123\\" ``` Output: ``` \\"zyx876\\" ``` # Note: 1. In the output, each letter \'a\' through \'z\' has been replaced by its reverse counterpart in the alphabet. 2. Each number \'0\' through \'9\' has been replaced by its complement to 9. 3. The order of characters in the transformed string remains the same as in the input string.","solution":"def transform_string(s): Transforms the input string by swapping each letter with its corresponding letter in the reversed alphabet and each number with its complement to 9. Parameters: s (str): Input string consisting of letters (a-z) and numbers (0-9). Returns: str: Transformed string. def transform_char(c): if \'a\' <= c <= \'z\': return chr(ord(\'z\') - (ord(c) - ord(\'a\'))) elif \'0\' <= c <= \'9\': return chr(ord(\'9\') - (ord(c) - ord(\'0\'))) return c return \'\'.join(transform_char(c) for c in s)"},{"question":"Aman loves playing games involving grids. Recently, he encountered a game where he has a 2D grid of size R x C, filled with non-negative integers. He needs to find the sum of maximum elements in each row. Help Aman by writing a program to solve this problem. Input First line of the input is the number of test cases T. It is followed by T test cases. Each test case starts with two space-separated integers R and C, followed by R lines, each containing C integers representing the grid. Output For each test case, output a single integer, the sum of the maximum elements from each row of the grid. Constraints 1 ≤ T ≤ 20 1 ≤ R, C ≤ 100 0 ≤ Grid[i][j] ≤ 10^9 SAMPLE INPUT 2 2 3 3 1 4 1 5 9 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 13 18","solution":"def sum_of_max_elements(test_cases): Computes the sum of maximum elements in each row for multiple test cases. Args: test_cases (list): A list of test cases. Each test case is represented by a tuple (R, C, grid), where R is the number of rows, C is the number of columns, and grid is the 2D list of non-negative integers. Returns: list: A list of integers where each integer is the sum of max elements in the rows of the grid for each test case. results = [] for case in test_cases: R, C, grid = case total_sum = sum(max(row) for row in grid) results.append(total_sum) return results def parse_input(input_string): Parses the input string into a list of test cases. Args: input_string (str): The input string as described in the problem. Returns: list: A list of test cases. Each test case is represented by a tuple (R, C, grid). lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): R, C = map(int, lines[index].split()) index += 1 grid = [] for _ in range(R): row = list(map(int, lines[index].split())) index += 1 grid.append(row) test_cases.append((R, C, grid)) return test_cases # Example usage: # input_data = \\"2n2 3n3 1 4n1 5 9n3 3n1 2 3n4 5 6n7 8 9\\" # test_cases = parse_input(input_data) # result = sum_of_max_elements(test_cases) # print(result) # Output: [13, 18]"},{"question":"Sarah is a software engineer who participates in a coding contest every month. In each contest, she can solve a variable number of problems. By solving these problems, Sarah accumulates points that correspond to the difficulty level of each problem. The contest organizers have a unique scoring system where points for each problem solved are given according to the Fibonacci sequence. The Fibonacci sequence is defined as: - F(0) = 0, - F(1) = 1, - F(n) = F(n-1) + F(n-2) for n ≥ 2 For example, the points for the first few problems are: - Problem 0: 0 points - Problem 1: 1 point - Problem 2: 1 point - Problem 3: 2 points - Problem 4: 3 points - Problem 5: 5 points - and so on. Sarah wants to know the total score she accumulated in a given contest. You need to write a program that calculates the total number of points based on the problems Sarah solved. Input - The first line contains an integer n (1 ≤ n ≤ 50) — the number of problems Sarah solved. - The second line contains n space-separated integers p1, p2, ..., pn (0 ≤ pi ≤ 50) — where pi is the index of the Fibonacci number representing the problem solved by Sarah. Output - Print a single integer — the total number of points Sarah accumulated in the contest. Examples Input 4 3 5 7 8 Output 36 Input 3 0 1 1 Output 2 Note In the first example, Sarah solved problem 3 (2 points), problem 5 (5 points), problem 7 (13 points), and problem 8 (21 points). The total points are 2 + 5 + 13 + 21 = 41. In the second example, Sarah solved problem 0 (0 points), and two times problem 1 (1 point each), giving a total of 0 + 1 + 1 = 2 points.","solution":"def fibonacci(n): Returns the nth Fibonacci number. a, b = 0, 1 for _ in range(n): a, b = b, a + b return a def total_score(n, problems): Returns the total score accumulated based on the solved problems\' Fibonacci indices. total = 0 for p in problems: total += fibonacci(p) return total # Uncomment below lines for sample test run # if __name__ == \\"__main__\\": # n = int(input().strip()) # problems = list(map(int, input().strip().split())) # print(total_score(n, problems))"},{"question":"A company organizes their internal files and directories with a nested structure. Each directory can contain subdirectories, and thus a directory structure can be represented as a tree with directories as nodes. The path to each directory can be described using an absolute path starting from the root directory. Given a list of file paths, each representing a directory, your task is to compute the depth of the deepest subdirectory. The depth of the root directory is considered as 0. Input The first line contains an integer T (1 ≤ T ≤ 100) — the number of test cases. Each test case begins with a line containing one integer N (1 ≤ N ≤ 1000) — the number of directories listed. The following N lines each contain a string representing an absolute path to a directory within the file system. Each path string consists of printable ASCII characters, and the slash character \'/\' to represent directory levels. Output For each test case, print one integer — the depth of the deepest subdirectory for that test case. Example Input 2 5 /root/home/ / usr/local/ usr/local/bin/ boot/ 3 /etc/ etc/opt/ opt/var/ Output 2 1 Explanation In the first test case, the directory structure can be visualized as follows: ``` / ├── root │ └── home ├── usr │ └── local │ └── bin └── boot ``` The deepest subdirectory is \\"/usr/local/bin\\", which has a depth of 2 (since the depth of the root is considered 0). In the second test case, the directory structure can be visualized as follows: ``` / ├── etc │ └── opt ├── opt └── var ``` The deepest subdirectory in the second example is \\"/etc/opt\\" or \\"/opt/var\\", both having a depth of 1.","solution":"def deepest_subdirectory_depth(T, test_cases): depths = [] for case in test_cases: N, directories = case max_depth = 0 for directory in directories: # Calculate depth of the current directory (counting number of slashes minus one) depth = directory.strip(\\"/\\").count(\'/\') if depth > max_depth: max_depth = depth depths.append(max_depth) return depths"},{"question":"You are the detective on a case where you need to analyze the chronology of events in a room. The room has a capacity of 10 people and the events are recorded chronologically. Each event is either a person entering or leaving the room. An entry event is represented by \'E\' followed by the person’s ID (a single digit 0-9). A leave event is represented by \'L\' followed by the person\'s ID. The room is initially empty. Write a program that determines the final state of the room, listing the IDs of the people currently in the room from lowest to highest. If the room is empty, return \\"EMPTY\\". Input The first line consists of an integer n (1 ≤ n ≤ 10^5), the number of events. The second line consists of a string of length 2*n describing the events in chronological order. Each event is represented by two characters: * \'E\' followed by a digit (0-9) indicating entry of a person. * \'L\' followed by a digit (0-9) indicating leave of a person. It\'s guaranteed that there are no duplicate entries or invalid leaves. Output Print the room\'s final state as a space-separated list of IDs currently in the room from lowest to highest. If the room is empty, print \\"EMPTY\\". Examples Input 6 E0E1E2L0L2E3 Output 1 3 Input 4 E1E2L1L2 Output EMPTY Input 3 E5E3L5 Output 3 Note In the first example, the sequence of events is as follows: * E0: person 0 enters. Room: [0] * E1: person 1 enters. Room: [0, 1] * E2: person 2 enters. Room: [0, 1, 2] * L0: person 0 leaves. Room: [1, 2] * L2: person 2 leaves. Room: [1] * E3: person 3 enters. Room: [1, 3] So the final state of the room is \\"1 3\\". In the second example, all people who entered, left the room, thus leaving it empty, leading to the output \\"EMPTY\\".","solution":"def final_room_state(n, events): room = set() for i in range(0, 2*n, 2): action = events[i] person_id = int(events[i+1]) if action == \'E\': room.add(person_id) elif action == \'L\': room.remove(person_id) if not room: return \\"EMPTY\\" final_state = \' \'.join(map(str, sorted(room))) return final_state"},{"question":"Alex is an avid book collector. He has a list of book titles that he owns and a list of books he wants to read. He wants to know how many of the books on his reading list he already owns. Given the list of book titles he owns and the list of books he wants to read, determine the count of books on his reading list that are available in his collection. Input The first line contains the number n (1 ≤ n ≤ 100) — the number of books Alex owns. The following n lines contain the titles of these books, each title is a non-empty string of letters and spaces no longer than 100 characters. The next line contains the number m (1 ≤ m ≤ 100) — the number of books Alex wants to read. The following m lines contain the titles of these books, each title is a non-empty string of letters and spaces no longer than 100 characters. Output Output the count of books from the reading list that are available in Alex\'s collection. Examples Input 4 The Great Gatsby To Kill a Mockingbird 1984 Pride and Prejudice 3 1984 Moby Dick The Catcher in the Rye Output 1 Input 5 Harry Potter The Lord of the Rings The Hobbit War and Peace Anna Karenina 4 War and Peace The Hobbit The Great Gatsby Harry Potter Output 3","solution":"def count_books_owned(owned_books, reading_list): Returns the count of books that are in both owned_books and reading_list. owned_books_set = set(owned_books) count = 0 for book in reading_list: if book in owned_books_set: count += 1 return count"},{"question":"Write a program that simulates a rating system for a restaurant. The restaurant has several types of food items and each type can receive ratings from customers. For simplicity, assume there are four types of food: \\"appetizers\\", \\"main_courses\\", \\"desserts\\", and \\"beverages\\". Your program should be able to take the following inputs: 1. A number n that represents the number of ratings. 2. n lines of ratings, each line contains the type of food and the rating given by the customer (a whole number between 1 and 10, inclusive). 3. The word \\"END\\" which marks the end of input. The program should calculate and print: 1. The average rating for each type of food. 2. The total average rating across all food types. Example: Input 5 appetizers 8 main_courses 7 desserts 9 beverages 6 main_courses 8 END Output Average rating for appetizers: 8.00 Average rating for main_courses: 7.50 Average rating for desserts: 9.00 Average rating for beverages: 6.00 Overall average rating: 7.60 If there are no ratings for a specific type of food, its average rating should be reported as \\"No ratings\\".","solution":"def restaurant_rating_system(n, ratings): # Initialize the dictionary to hold sum of ratings and count for each food type food_ratings = { \\"appetizers\\": {\\"sum\\": 0, \\"count\\": 0}, \\"main_courses\\": {\\"sum\\": 0, \\"count\\": 0}, \\"desserts\\": {\\"sum\\": 0, \\"count\\": 0}, \\"beverages\\": {\\"sum\\": 0, \\"count\\": 0}, } # Process the ratings to populate the food_ratings dictionary for i in range(n): food_type, rating = ratings[i].split() rating = int(rating) food_ratings[food_type][\\"sum\\"] += rating food_ratings[food_type][\\"count\\"] += 1 total_sum = 0 total_count = 0 results = {} # Calculate average ratings for each type for food_type in food_ratings: if food_ratings[food_type][\\"count\\"] > 0: avg_rating = food_ratings[food_type][\\"sum\\"] / food_ratings[food_type][\\"count\\"] results[food_type] = f\\"{avg_rating:.2f}\\" total_sum += food_ratings[food_type][\\"sum\\"] total_count += food_ratings[food_type][\\"count\\"] else: results[food_type] = \\"No ratings\\" overall_avg_rating = total_sum / total_count if total_count > 0 else 0 # Prepare the output output = [] for food_type in results: output.append(f\\"Average rating for {food_type}: {results[food_type]}\\") output.append(f\\"Overall average rating: {overall_avg_rating:.2f}\\") return \\"n\\".join(output)"},{"question":"You are given a list of integers representing the nodes of a binary search tree (BST) in pre-order traversal. Write a program to construct the BST from this list and return the root node of the tree. A binary search tree is defined as follows: - The left subtree of a node contains only nodes with keys lesser than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. For a given binary search tree, pre-order traversal is defined as follows: - Visit the root node. - Traverse the left subtree. - Traverse the right subtree. Your task is to construct the binary search tree from the pre-order traversal list of nodes and implement pre-order traversal to verify the structure of the tree. Input The first line contains an integer `n`, the number of nodes in the BST (1 ≤ n ≤ 1000). The second line contains `n` integers separated by spaces, representing the nodes of the BST in pre-order traversal. Output Print the pre-order traversal of the constructed BST, which should match the input pre-order traversal. Example Input 6 8 5 1 7 10 12 Output 8 5 1 7 10 12 Input 4 10 5 1 7 Output 10 5 1 7 Input 5 15 10 5 12 20 Output 15 10 5 12 20 Note In the first example, the BST constructed has the root node 8, with 5 as its left child and 10 as its right child. Node 5 further has 1 as its left child and 7 as its right child. Node 10 has 12 as its right child. The output is the same as the input pre-order traversal sequence.","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None def bst_from_preorder(preorder): if not preorder: return None def construct_bst_bound(preorder_iter, bound): if not preorder_iter or preorder_iter[0] > bound: return None root_val = preorder_iter.pop(0) root = TreeNode(root_val) root.left = construct_bst_bound(preorder_iter, root_val) root.right = construct_bst_bound(preorder_iter, bound) return root preorder_iter = list(preorder) return construct_bst_bound(preorder_iter, float(\'inf\')) def preorder_traversal(root): if not root: return [] return [root.key] + preorder_traversal(root.left) + preorder_traversal(root.right)"},{"question":"Given a list of words, find the word that is the longest palindrome. If multiple such words have the same length, return the one that appears first in the list. A palindrome is a word that reads the same backward as forward. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of words in the list. The second line contains n words, each consisting of lowercase English letters. The length of each word is between 1 and 1000. Output Print the longest palindrome present in the list. If multiple such words have the same length, print the one that appears first. Examples Input 5 racecar level banana civic rotor Output racecar Input 4 apple banana madam noon Output banana Note In the first test case, the word \\"racecar\\" is the longest palindrome. While \\"level\\" and \\"civic\\" are also palindromes, they are shorter in length. In the second test case, \\"banana\\" is not a palindrome. The longest palindrome is \\"madam\\", and \\"noon\\" is also a palindrome but shorter in length. Hence, \\"banana\\" is returned as it is lexicographically the longest.","solution":"def longest_palindrome(words): Given a list of words, find the longest palindrome. If multiple words have the same length, return the one that appears first. :param words: List of words (strings). :return: Longest palindrome word. longest = \\"\\" for word in words: if word == word[::-1]: # Check if the word is a palindrome if len(word) > len(longest): longest = word return longest"},{"question":"Write a function that takes in a list of integers and returns the second largest number in the list. If the list has fewer than two unique numbers, return `None`. Function Signature: ```python def second_largest(numbers: List[int]) -> int: ``` Constraints: - The list should contain at least one number. SAMPLE INPUT ```python [3, 5, 7, 5, 3, 9, 11] ``` SAMPLE OUTPUT ```python 9 ``` SAMPLE INPUT ```python [5, 5, 5, 5] ``` SAMPLE OUTPUT ```python None ```","solution":"from typing import List, Optional def second_largest(numbers: List[int]) -> Optional[int]: Returns the second largest number in the list of integers. If the list has fewer than two unique numbers, return None. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"In a faraway kingdom, there is a tree with n nodes, numbered from 1 to n. The king has ordered you to paint each edge of the tree in one of two colors: red or blue. However, the painting must follow a special rule: no simple cycle formed by three edges should have exactly two edges of one color and one edge of the other color. Your task is to determine the number of ways to paint the tree\'s edges following the king\'s rule. Output the number of ways modulo 10^9 + 7. Input The first line contains a single integer n (1 ≤ n ≤ 1000), the number of nodes in the tree. Each of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v), which describe an edge between nodes u and v. Output Print the required number of ways to paint the tree’s edges modulo 10^9 + 7. Example Input 3 1 2 1 3 Output 2 Note In the example, the tree looks like this: 1 / 2 3 If we paint both edges red, it\'s valid. If we paint both edges blue, it\'s also valid. No other combination is allowed since each possible cycle with exactly one red and one blue will violate the rule. Therefore, there are 2 ways to paint the edges.","solution":"def count_ways_to_paint_tree(n, edges): Counts the number of ways to paint the tree\'s edges with two colors following the given rules. Parameters: n (int): Number of nodes. edges (list of tuples): Each tuple represents an edge between two nodes. Returns: int: Number of ways to paint the edges modulo 10^9 + 7. MOD = 10**9 + 7 if n == 1: return 1 return 2 % MOD"},{"question":"Encrypt a sentence using the predefined key. Encryption Key: Each character in the sentence is replaced by the corresponding character in a shuffled alphabet. For example, consider the following encryption key: Normal Alphabet: a b c d e f g h i j k l m n o p q r s t u v w x y z Shuffled Alphabet: q w e r t y u i o p a s d f g h j k l z x c v b n m Given this encryption key, the letter \'a\' in the input will be replaced by \'q\', \'b\' will be replaced by \'w\', \'c\' by \'e\', and so on. Input The input consists of a single line containing a sentence, which may include spaces and punctuation. (1 ≤ length of sentence ≤ 1000) Output Output the encrypted sentence using the given key. Example Input hello world Output itssg vgksr Note: The encryption key used in the example above is only illustrative. The actual key to be used will be provided as part of the problem\'s constraints.","solution":"def encrypt_sentence(sentence, normal_alphabet, shuffled_alphabet): Encrypts a sentence using the provided encryption key. # Create a dictionary for mapping normal alphabet to shuffled alphabet enc_map = {normal_alphabet[i]: shuffled_alphabet[i] for i in range(len(normal_alphabet))} # Encrypt the sentence encrypted_sentence = \'\'.join(enc_map.get(ch, ch) for ch in sentence) return encrypted_sentence # Example usage: # Normal Alphabet: a b c d e f g h i j k l m n o p q r s t u v w x y z # Shuffled Alphabet: q w e r t y u i o p a s d f g h j k l z x c v b n m normal_alphabet = \'abcdefghijklmnopqrstuvwxyz\' shuffled_alphabet = \'qwertyuiopasdfghjklzxcvbnm\' # Encrypting an example sentence sentence = \\"hello world\\" print(encrypt_sentence(sentence, normal_alphabet, shuffled_alphabet)) # Output: itssg vgksr"},{"question":"You are given a list of integers and a target number of swaps k. Your task is to determine the minimum possible sum of the list after performing at most k adjacent swaps (swapping two neighboring elements in the list). Input The first line of the input consists of two integer numbers n and k (1 ≤ n ≤ 200,000 and 0 ≤ k ≤ n*(n-1)/2). The second line contains n integer numbers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1,000,000). Output Output a single integer, the minimum possible sum of the elements in the list after at most k swaps. Examples Input 5 1 3 1 2 4 5 Output 15 Input 4 3 4 2 1 3 Output 10 Explanation In the first example, the list is [3, 1, 2, 4, 5]. With one adjacent swap possible, we can swap 3 and 1 making the list [1, 3, 2, 4, 5], which sums to 15 (the same as the original list, since swapping minimally does not change the sum). In the second example, the list is [4, 2, 1, 3]. With three swaps, we can sort the list completely to [1, 2, 3, 4], which sums to 10, the minimum possible sum.","solution":"def minimum_possible_sum(n, k, arr): Given a list of integers and a target number of swaps k, return the minimum possible sum of the list after performing at most k adjacent swaps. for i in range(n): for j in range(n - 1): # If we have no swaps left, break early if k <= 0: break # Perform the swap if it helps in making the list sorted if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] k -= 1 # Finally, return the sum of the list return sum(arr)"},{"question":"Given an array of integers where each integer represents the height of a vertical line on a histogram, write a function that calculates the area of the largest rectangle that can be formed within the confines of the histogram. This problem involves finding the maximum rectangular area under a histogram. The height of the vertical lines represents the y-coordinates, and consecutive lines are spaced one unit apart on the x-axis. Constraints: * The array will have at least one element and no more than 100 elements. * Each element in the array is a positive integer and will be at most 1000. Input: The input consists of a single line containing space-separated integers representing the heights of the histogram. Output: Print the area of the largest rectangle that can be formed in the histogram. Example: Input: 2 1 5 6 2 3 Output: 10","solution":"def largest_rectangle_area(hist): Calculate the area of the largest rectangle that can be formed within the confines of the histogram. :param hist: A list of integers where each integer represents the height of a vertical line on the histogram. :return: The area of the largest rectangle that can be formed. stack = [] max_area = 0 index = 0 while index < len(hist): if not stack or hist[stack[-1]] <= hist[index]: stack.append(index) index += 1 else: top = stack.pop() area = hist[top] * ((index - stack[-1] - 1) if stack else index) max_area = max(max_area, area) while stack: top = stack.pop() area = hist[top] * ((index - stack[-1] - 1) if stack else index) max_area = max(max_area, area) return max_area"},{"question":"Aisha is learning to find the median of a list of numbers as part of her statistics class. The teacher has given her multiple datasets to practice on. Your task is to help Aisha determine the median of each dataset. If the number of elements is odd, return the middle element. If the number of elements is even, return the average of the two middle elements. Note that the provided datasets are already sorted in non-decreasing order. Input The first line contains an integer T, the number of test cases. Each test case begins with a single integer N (the number of elements in the dataset), followed by N space-separated integers. Output For each test case, output the median of the dataset in a new line. Note: For even-sized datasets, truncate the fraction part of the median. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ x ≤ 10^9 SAMPLE INPUT 2 5 1 3 3 6 7 4 1 2 3 4 SAMPLE OUTPUT 3 2","solution":"def median_of_datasets(test_cases): This function takes a list of test cases, each containing a list of sorted numbers, and returns the median of each dataset. Parameters: test_cases (list of tuples): A list where each tuple contains the number of elements N and the dataset list. Returns: list: A list of medians for each dataset. medians = [] for test_case in test_cases: N, dataset = test_case # Calculate median for odd number of elements if N % 2 == 1: median = dataset[N // 2] else: # Calculate median for even number of elements median = (dataset[N // 2 - 1] + dataset[N // 2]) // 2 # truncates fractional part medians.append(median) return medians"},{"question":"Petya has recently taken an interest in studying sequences and their properties. One day, he stumbled upon an interesting property of sequences called the \\"maximum sum of subarray\\". In an array of integers, a subarray is defined as a contiguous part of the array. The sum of a subarray is the sum of its elements. Petya wonders about the maximum sum of a subarray that can be obtained from a given array of integers. Given an array of integers, your task is to help Petya find the maximum sum of any subarray within the given array. Input The first line contains a single integer n (1 ≤ n ≤ 105), which represents the number of integers in the array. The next line contains n space-separated integers, describing the array. Each integer in the array lies in the range from -109 to 109, inclusive. Output Print a single integer — the maximum possible sum of any subarray of the given array. Examples Input 5 1 -2 3 4 -1 Output 7 Input 3 -1 -2 -3 Output -1 Input 6 2 -1 2 3 4 -5 Output 10","solution":"def max_subarray_sum(nums): Finds the maximum sum of any subarray of the given array. max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an array of n integers, you have to perform q queries. Each query updates a subarray of the given array by adding a certain value to all elements in the subarray. After performing the q queries, print the maximum value in the array. # Input Format - The first line contains two integers n and q, denoting the size of the array and the number of queries, respectively. - The second line contains n space-separated integers representing the elements of the array. - Each of the next q lines contains three integers l, r, and v, where (1 ≤ l ≤ r ≤ n) and v are the parameters of the query denoting that v should be added to every element in the subarray from index l to r (inclusive). # Output Format - Print the maximum value in the array after all q queries have been performed. # Constraints - 1 ≤ n, q ≤ 200000 - -10^9 ≤ initial array elements, v ≤ 10^9 - 1 ≤ l ≤ r ≤ n # Example Input ``` 5 3 1 2 3 4 5 1 3 2 2 4 3 3 5 1 ``` # Example Output ``` 9 ``` # Explanation After performing the queries: - First query: Add 2 to elements from index 1 to 3 resulting in the array: [3, 4, 5, 4, 5] - Second query: Add 3 to elements from index 2 to 4 resulting in the array: [3, 7, 8, 7, 5] - Third query: Add 1 to elements from index 3 to 5 resulting in the array: [3, 7, 9, 8, 6] The maximum value in the final array is 9.","solution":"def max_value_after_queries(n, q, array, queries): Perform the given q queries on the array and return the maximum value in the array after all queries. Parameters: n (int): Size of the array. q (int): Number of queries. array (list): List containing the initial values of the array. queries (list): List of tuples, where each tuple contains (l, r, v) representing the queries. Returns: int: The maximum value in the array after performing all the queries. # Use difference array approach to efficiently handle range updates diff = [0] * (n + 1) for l, r, v in queries: diff[l-1] += v if r < n: diff[r] -= v # Apply the difference array to the original array current_addition = 0 for i in range(n): current_addition += diff[i] array[i] += current_addition return max(array)"},{"question":"Alice loves to collect rare stamps and has N different stamps in her collection. She wants to show them to her friends in a special arrangement. She decides to arrange the stamps in a line such that the difference in the ID numbers of any two consecutive stamps is at least K. But among her stamps, some have the same ID numbers. Given the list of stamp IDs in Alice\'s collection, your task is to determine if it\'s possible to arrange all her stamps in the desired way and if so, provide one such arrangement. Input: The first line contains two integers N and K (1 ≤ N ≤ 1000, 1 ≤ K ≤ 1000) — the number of stamps and the minimum difference between the ID numbers of consecutive stamps. The second line contains N integers a1, a2, ..., an (1 ≤ ai ≤ 100,000) — the IDs of the stamps. Output: If it is possible to arrange the stamps, print \\"YES\\" on the first line followed by the arrangement of the stamps on the second line. If there are multiple such arrangements, print any of them. If it is not possible, print \\"NO\\". Examples: Input: 5 2 3 1 4 6 8 Output: YES 1 3 6 4 8 Input: 3 5 10 20 30 Output: YES 10 20 30 Input: 4 10 1 1 1 1 Output: NO Note: In the first example, the sequence 1 3 6 4 8 can be one possible arrangement where the difference between any two consecutive IDs is at least 2. In the second example, since all IDs are distinct and the minimum difference requirement is easily met, the sequence 10 20 30 is valid. In the third example, since all IDs are identical, it is not possible to have consecutive differences of at least 10.","solution":"def arrange_stamps(N, K, stamps): stamps.sort() result = [] def can_place(current_value, remaining_stamps): if not remaining_stamps: return True, [] for i in range(len(remaining_stamps)): if abs(current_value - remaining_stamps[i]) >= K: placed_result = result + [remaining_stamps[i]] success, following_placement = can_place(remaining_stamps[i], remaining_stamps[:i] + remaining_stamps[i+1:]) if success: return True, [remaining_stamps[i]] + following_placement return False, [] for start in range(N): result = [stamps[start]] success, final_result = can_place(stamps[start], stamps[:start] + stamps[start+1:]) if success: return \\"YES\\", [stamps[start]] + final_result return \\"NO\\", [] # Example usage: # print(arrange_stamps(5, 2, [3, 1, 4, 6, 8])) # Output: YES [1, 3, 6, 4, 8]"},{"question":"You are creating a meal plan for your week and want to ensure that you have sufficient protein intake each day. You have a list of meals you can prepare, and you know the amount of protein (in grams) each meal provides. Your goal is to choose a subset of meals for each day so that the total protein intake is as close as possible to a desired target. Given the desired protein intake for each day and the list of available meals with their respective protein content, write a program that determines the combination of meals to prepare each day that achieves this goal. Input The first line of the input contains one integer t (1 ≤ t ≤ 10) – the number of days. The next t lines each contain two integers n (1 ≤ n ≤ 20) and p (1 ≤ p ≤ 200), where n is the number of available meals for the day and p is the desired protein intake for that day. Each of the following t sections starts with one line containing n integers, representing the protein content of each meal available for that day. Output For each day, output the total protein intake achieved by the selected meals such that it is as close as possible to the desired protein intake. Example Input 3 5 50 10 20 30 40 50 4 70 15 25 35 45 3 23 8 12 17 Output 50 70 25","solution":"from itertools import combinations def closest_protein(target, meals): Finds the total protein intake closest to the desired target using any subset of meals. closest_sum = 0 min_diff = float(\'inf\') for r in range(1, len(meals) + 1): for comb in combinations(meals, r): current_sum = sum(comb) current_diff = abs(target - current_sum) if current_diff < min_diff: min_diff = current_diff closest_sum = current_sum if min_diff == 0: return closest_sum return closest_sum def meal_plan(t, day_data): result = [] for n, p, meals in day_data: closest_sum = closest_protein(p, meals) result.append(closest_sum) return result"},{"question":"Create a program that will calculate the average temperature for a week. Each day has its temperature recorded, and you are given these temperatures as input. input The input is given in the following format: temp1 temp2 .. .. temp7 The input consists of 7 lines, and the i line is given the integer tempi (-50 ≤ tempi ≤ 50) representing the temperature on day i. output Output the average temperature of the week rounded to one decimal place. Example Input 20 22 24 20 18 25 21 Output 21.4","solution":"def calculate_average_temperature(temperatures): Calculates the average temperature for a week from a list of 7 daily temperatures. Args: temperatures (list of int): List containing 7 daily temperatures. Returns: float: The average temperature rounded to one decimal place. if len(temperatures) != 7: raise ValueError(\\"There must be exactly 7 temperatures provided\\") average_temp = sum(temperatures) / len(temperatures) return round(average_temp, 1)"},{"question":"You are given a sequence of integers and a target sum. Your task is to determine the number of unique pairs of integers in the sequence that add up to the target sum. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of integers in the sequence. The second line contains n integers (|ai| ≤ 109), the elements of the sequence. The third line contains a single integer k (|k| ≤ 109), the target sum. Output Output a single integer, the number of unique pairs that add up to the target sum. Examples Input 6 1 5 7 -1 5 5 6 Output 2 Input 4 1 3 2 2 4 Output 2 Note In the first sample, the pairs that add up to 6 are (1, 5) and (7, -1). In the second sample, the pairs that add up to 4 are (1, 3) and (2, 2).","solution":"def count_unique_pairs(n, sequence, k): seen = set() pairs = set() for number in sequence: target = k - number if target in seen: pairs.add(tuple(sorted((number, target)))) seen.add(number) return len(pairs)"},{"question":"# Navigate the Maze You are given a square maze represented by an N x N grid. Each cell in the grid contains either a \\"0\\" indicating that the cell is open, or a \\"1\\" indicating that the cell is blocked. You start in the top-left corner at cell (0, 0) and your goal is to reach the bottom-right corner at cell (N-1, N-1). You can move up, down, left, and right, but you cannot move into cells that contain \\"1\\". You need to determine if there is a path from the start to the goal. **Input:** - The first line contains an integer N (2 ≤ N ≤ 1000), the size of the maze. - The next N lines each contain N characters (either \\"0\\" or \\"1\\"), representing the maze. **Output:** - If there is a path from the start to the goal, print \\"Yes\\". - Otherwise, print \\"No\\". **Examples:** **Input:** ``` 4 0000 1110 0000 0110 ``` **Output:** ``` Yes ``` **Input:** ``` 3 011 001 110 ``` **Output:** ``` No ``` **Note:** - In the first example, you can reach (3, 3) by moving right, down, down, right. - In the second example, there is no possible way to reach (2, 2) from (0, 0). This question tests your understanding of pathfinding algorithms such as Depth-First Search (DFS) or Breadth-First Search (BFS) and the ability to process and interpret grid-based input.","solution":"def can_navigate_maze(maze): Returns \'Yes\' if there is a path from the top-left to bottom-right of the maze, otherwise returns \'No\'. N = len(maze) if maze[0][0] == \'1\' or maze[N-1][N-1] == \'1\': return \\"No\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False]*N for _ in range(N)] def bfs(): queue = [(0, 0)] visited[0][0] = True while queue: x, y = queue.pop(0) if x == N-1 and y == N-1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny] and maze[nx][ny] == \'0\': visited[nx][ny] = True queue.append((nx, ny)) return False return \\"Yes\\" if bfs() else \\"No\\""},{"question":"Dr. Strange is a mathematician and recently he found a mysterious sequence which he calls a \\"Magic Progression\\". A Magic Progression is an arithmetic progression (AP) where the sum of all its terms is a prime number. Being a mathematician, Dr. Strange wants to perform operations on this progression. He will provide you with three integers a, d, and n, where \'a\' is the first term, \'d\' is the common difference, and \'n\' is the number of terms in the progression. Your task is to determine if the sum of the terms of the given AP is a prime number. Input: The first line of the input contains an integer T, the number of test cases. Each of the next T lines contains three positive integers a, d, and n. Constraints: 1 ≤ T ≤ 100 1 ≤ a, d, n ≤ 1000 Output: For each test case, print \\"YES\\" if the sum of the terms of the given AP is a prime number, otherwise, print \\"NO\\". Sample Input: 3 1 1 3 3 5 2 2 3 4 Sample Output: NO YES NO Explanation: 1. The first AP is 1, 2, 3 with a sum of 6, which is not a prime. 2. The second AP is 3, 8 with a sum of 11, which is a prime. 3. The third AP is 2, 5, 8, 11 with a sum of 26, which is not a prime.","solution":"def is_prime(num): Check if a given number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_ap(a, d, n): Calculate the sum of an arithmetic progression. return n * (2*a + (n-1)*d) // 2 def is_magic_progression(a, d, n): Determine if the sum of the terms of the given AP is a prime number. sum_ap = sum_of_ap(a, d, n) return is_prime(sum_ap) def check_magic_progressions(test_cases): Process multiple test cases and determine if each AP sum is a prime number. results = [] for (a, d, n) in test_cases: if is_magic_progression(a, d, n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Tony is a detective who specializes in decoding secret messages. He recently discovered a series of encoded messages that follows a specific encryption method. In this method, each letter in the original message is shifted a certain number of places forward in the alphabet. For example, with a shift of 3, \'A\' becomes \'D\', \'B\' becomes \'E\', etc. This cyclically continues so that \'Z\' becomes \'C\'. Tony needs to decode these messages to get the original texts. Your task is to write a program to help Tony decode these messages. The program should take an encoded message and the shift number as input, and output the decoded original message. Input The first line contains a string s (1 ≤ |s| ≤ 100), which is the encoded message consisting of uppercase English letters only. The second line contains an integer k (1 ≤ k ≤ 25), which is the shift number used for encoding. Output Print the decoded message as a single string in uppercase letters. Examples Input KHOOR 3 Output HELLO Input ZAB 1 Output YZA Note In the first test case, decoding \'KHOOR\' with a shift of 3 results in \'HELLO\' (\'K\' -> \'H\', \'H\' -> \'E\', \'O\' -> \'L\', \'R\' -> \'O\'). In the second test case, decoding \'ZAB\' with a shift of 1 results in \'YZA\' (\'Z\' -> \'Y\', \'A\' -> \'Z\', \'B\' -> \'A\').","solution":"def decode_message(s, k): Decodes a message by shifting each letter backward in the alphabet by k positions. Args: s (str): Encoded message consisting of uppercase English letters. k (int): Shift number used for encoding. Returns: str: Decoded original message in uppercase letters. decoded_message = [] for char in s: # Calculate original char position by shifting backward and handling wrap-around original_char = chr(((ord(char) - ord(\'A\') - k) % 26) + ord(\'A\')) decoded_message.append(original_char) return \'\'.join(decoded_message)"},{"question":"You are given a string T. Your task is to determine whether T can become a palindrome after removing exactly one character from it. A palindrome is a string that reads the same forwards and backwards. Constraints * T is at most 100 characters long. * T consists of lowercase alphabet letters. Input Inputs are provided from Standard Input in the following form. T Output Output \\"YES\\" if T can become a palindrome by removing exactly one character, otherwise output \\"NO\\". Examples Input abcca Output YES Input abcdef Output NO","solution":"def can_become_palindrome(T): Determines whether the string T can become a palindrome by removing exactly one character. Parameters: T (str): The input string Returns: str: \\"YES\\" if T can become a palindrome by removing one character, \\"NO\\" otherwise def is_palindrome(s): return s == s[::-1] n = len(T) for i in range(n): if is_palindrome(T[:i] + T[i+1:]): return \\"YES\\" return \\"NO\\""},{"question":"A scientific team is conducting research on the behavior of different animal species in a large rectangular field that is divided into cells arranged in a grid. Each cell of the grid can either be empty or contain food. The animals move across the grid in discrete time steps and can only move to adjacent cells (up, down, left, or right). Each animal has a certain energy level which gets reduced by 1 unit for each move. If an animal moves to a cell containing food, it gains a certain amount of energy. The objective is to determine the minimum moves required for the animal to reach a specific destination cell from its starting position, considering it should not run out of energy before reaching the destination. Your task is to write a function to determine this minimal number of moves. If it is impossible for the animal to reach the destination with the given initial energy, return -1. Input: - The first line contains three integers ( n ) (the number of rows), ( m ) (the number of columns), and ( e ) (initial energy of the animal) where ( 1 leq n, m leq 1000 ) and ( 1 leq e leq 10^6 ). - The next ( n ) lines each contain ( m ) integers, representing the grid: ( 0 ) for empty cell and ( f ) (1 ≤ f ≤ 100) for a cell with food. - The following line contains two integers, ( s_x ) and ( s_y ) (the starting cell coordinates). - The final line contains two integers, ( d_x ) and ( d_y ) (the destination cell coordinates). Output: - Print a single integer representing the minimum moves required for the animal to reach the destination while its energy remains positive, or -1 if it\'s impossible. Example Input: ``` 5 5 10 0 0 0 0 0 0 20 0 0 0 0 0 0 0 0 0 0 0 30 0 0 0 0 0 0 0 0 4 4 ``` Example Output: ``` 8 ``` Explanation: The path from cell (0,0) to cell (4,4) is possible within 8 moves while keeping the energy positive, given that food items boost the energy when encountered.","solution":"from collections import deque def min_moves_to_destination(n, m, e, grid, start, destination): n: number of rows m: number of columns e: initial energy of the animal grid: n by m grid start: tuple of (s_x, s_y) starting cell coordinates destination: tuple of (d_x, d_y) destination cell coordinates directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] s_x, s_y = start d_x, d_y = destination if s_x == d_x and s_y == d_y: return 0 # Already at the destination queue = deque([(s_x, s_y, e, 0)]) # (current_x, current_y, energy_left, moves) visited = set((s_x, s_y)) while queue: x, y, energy, moves = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: new_energy = energy - 1 + grid[nx][ny] if (nx, ny) == (d_x, d_y) and new_energy >= 0: return moves + 1 # We reached the destination if new_energy > 0: # We can still move queue.append((nx, ny, new_energy, moves + 1)) visited.add((nx, ny)) return -1 # Destination not reachable # Example input n = 5 m = 5 e = 10 grid = [ [0, 0, 0, 0, 0], [0, 20, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 30, 0], [0, 0, 0, 0, 0] ] start = (0, 0) destination = (4, 4) # Example usage print(min_moves_to_destination(n, m, e, grid, start, destination)) # Output: 8"},{"question":"Implement a function that takes a string containing lower case letters from \'a\' to \'z\' and returns the length of its longest substring without repeating characters. # Function Signature ```python def length_of_longest_substring(s: str) -> int: ... ``` # Input - `s` (1 ≤ |s| ≤ 10^4): A string of lower case letters. # Output - Returns an integer representing the length of the longest substring without repeating characters. # Example ```python assert length_of_longest_substring(\\"abcabcbb\\") == 3 assert length_of_longest_substring(\\"bbbbb\\") == 1 assert length_of_longest_substring(\\"pwwkew\\") == 3 assert length_of_longest_substring(\\"abcdef\\") == 6 ``` **Explanation:** 1. In the first example, the substrings are: \\"abc\\", \\"bca\\", \\"cab\\", \\"abc\\", etc. The longest is \\"abc\\" with length 3. 2. In the second example, the substring is \\"b\\", which has a length of 1. 3. In the third example, the substrings are: \\"pw\\", \\"wke\\", etc. The longest is \\"wke\\" with length 3. 4. In the fourth example, the entire string \\"abcdef\\" has no repeating characters, so its length is 6.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index longest = max(longest, index - start + 1) return longest"},{"question":"You are given a string s of length n consisting of lowercase English letters. You are also given k pairs of integers (l1, r1), (l2, r2), ..., (lk, rk). Each pair (li, ri) defines a substring of s starting at index li and ending at index ri (inclusive). Your task is to count the number of distinct characters in each of these substrings. Input The first line contains two integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 105) - the length of the string s and the number of queries, respectively. The second line contains the string s of length n. Next k lines contain pairs of integers (li, ri) (1 ≤ li ≤ ri ≤ n). Output Print k lines, each line containing a single integer - the number of distinct characters in the corresponding substring. Example Input 8 3 abcdefgh 1 4 3 6 1 8 Output 4 4 8 Input 5 2 aaaaa 1 5 2 4 Output 1 1 Note In the first example: - For the substring defined by (1, 4) -> \\"abcd\\", there are 4 distinct characters. - For the substring defined by (3, 6) -> \\"cdef\\", there are 4 distinct characters. - For the substring defined by (1, 8) -> \\"abcdefgh\\", there are 8 distinct characters. In the second example: - For the substring defined by (1, 5) -> \\"aaaaa\\", there is 1 distinct character. - For the substring defined by (2, 4) -> \\"aaa\\", there is 1 distinct character.","solution":"def count_distinct_characters(n, k, s, queries): results = [] for l, r in queries: substring = s[l-1:r] distinct_char_count = len(set(substring)) results.append(distinct_char_count) return results"},{"question":"John is organizing a sports event where teams compete against each other in a series of matches. Each match between any two teams can result in one team winning and the other team losing, represented as a tuple (winner, loser). John wants to determine if there\'s a possibility to rank the teams in such a way that for any match played, the winning team is ranked higher than the losing team. Write a function `can_rank_teams` that takes a list of match results and returns a boolean indicating whether it\'s possible to rank the teams consistently according to the match outcomes. Constraints: - The list of matches contains unique tuples where each tuple represents a single match. - The number of teams `T` is such that `1 leq T leq 1000`. - The number of matches `M` is such that `0 leq M leq min(T*(T-1)/2, 10000)`. Inputs: - A list of tuples `matches` where each tuple (a, b) implies team `a` defeated team `b`. Output: - Return `True` if a consistent ranking is possible, otherwise return `False`. Example: Input: ```python matches = [(1, 2), (2, 3), (1, 3)] print(can_rank_teams(matches)) ``` Output: ```python True ``` Input: ```python matches = [(1, 2), (2, 3), (3, 1)] print(can_rank_teams(matches)) ``` Output: ```python False ``` Note: - The first example represents a scenario where team 1 can be ranked higher than team 2, and team 2 can be ranked higher than team 3. - The second example represents a scenario that creates a cycle; hence, a consistent ranking is not possible.","solution":"def can_rank_teams(matches): from collections import defaultdict, deque def has_cycle(graph, num_nodes): in_degree = {i: 0 for i in range(1, num_nodes + 1)} for node in graph: for neighbor in graph[node]: in_degree[neighbor] += 1 queue = deque([node for node in in_degree if in_degree[node] == 0]) visited = 0 while queue: current = queue.popleft() visited += 1 for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return visited != num_nodes # Create graph graph = defaultdict(list) teams = set() for winner, loser in matches: graph[winner].append(loser) teams.add(winner) teams.add(loser) num_teams = len(teams) if has_cycle(graph, num_teams): return False return True"},{"question":"A renowned paleontologist has discovered several fragments of an ancient scroll that holds a series of numeric codes. According to studies, each fragment contains a sequence of numbers that may have eroded over time due to natural elements. As a result, some digits might have been replaced by a \\"?\\", indicating an unknown value. The paleontologist has a database of known valid sequences from ancient scripts and needs your help to determine how many sequences from the database match each fragment, considering the unknown digits can represent any number from 0 to 9. Create a program that identifies the possible valid sequences for each fragment from the list of ancient sequences. # Input The input is given in the following format: ``` Q P sequence1 sequence2 :: sequenceQ fragment1 fragment2 :: fragmentP ``` Here, the number of known sequences `Q` (1 ≤ Q ≤ 10,000) and the number of fragments `P` (1 ≤ P ≤ 10,000) are provided on the first line. The following `Q` lines contain the known sequences from the database, each being a string of digits with a length of at least 1 and at most 20. The subsequent `P` lines contain the fragment sequences, each being a string of digits and \\"?\\" characters mixed, with a length of at least 1 and at most 20. Each fragment may have zero or more \\"?\\" characters representing unknown digits. # Output For each fragment, output the number of sequences from the database that match it when \\"?\\" can be any digit from 0 to 9. # Example Input ``` 3 3 1234 5678 91011 1?3? 5?78 9?0?? ``` Output ``` 1 1 1 ``` In the given example, for the fragment \\"1?3?\\", there\'s only one sequence from the known database, \\"1234,\\" that can match considering \\"?\\" can be any digit. Similarly, for \\"5?78\\", only \\"5678\\" matches. For \\"9?0??\\", only \\"91011\\" is a valid match.","solution":"def match_sequences(Q, P, sequences, fragments): results = [] for fragment in fragments: count = 0 for sequence in sequences: if len(sequence) != len(fragment): continue match = True for s_char, f_char in zip(sequence, fragment): if f_char != \'?\' and s_char != f_char: match = False break if match: count += 1 results.append(count) return results def read_input(input_string): lines = input_string.strip().split(\'n\') Q, P = map(int, lines[0].split()) sequences = lines[1:Q+1] fragments = lines[Q+2:Q+2+P] return Q, P, sequences, fragments def main(input_string): Q, P, sequences, fragments = read_input(input_string) results = match_sequences(Q, P, sequences, fragments) for result in results: print(result)"},{"question":"Alice is playing a game with her friends. In the game, there is a series of discrete time steps, and at each time step, Alice receives a set of points. She is interested in finding the total points she has accumulated at any given point in time, and she sometimes wants to know the highest points she has accumulated so far. Your task is to implement a class `GamePoints` that supports the following methods: - `add_points(t: int, points: int) -> None`: At time step `t`, add `points` to her total points. - `get_total_points(t: int) -> int`: Return the total points Alice has accumulated up to and including time step `t`. - `get_max_points() -> int`: Return the highest total points Alice has accumulated at any point in the game. The methods will be called in sequence, and the time steps `t` are unique and increasing. Input and Output You are required to implement the class with the described methods. You do not need to handle input/output explicitly, instead, it should be done through method calls. Example: ```python game = GamePoints() game.add_points(1, 5) game.add_points(2, 3) print(game.get_total_points(2)) # Output: 8 print(game.get_max_points()) # Output: 8 game.add_points(3, 7) print(game.get_total_points(3)) # Output: 15 print(game.get_max_points()) # Output: 15 ``` In this example: - The `add_points` method is called three times to add points to the total at different time steps. - `get_total_points` returns the total points Alice has accumulated up to and including the time step provided. - `get_max_points` returns the highest total points at any point in the game.","solution":"class GamePoints: def __init__(self): self.points = {} self.total_points = 0 self.max_points = 0 def add_points(self, t: int, points: int) -> None: self.points[t] = points self.total_points += points if self.total_points > self.max_points: self.max_points = self.total_points def get_total_points(self, t: int) -> int: total = 0 for time in sorted(self.points.keys()): if time > t: break total += self.points[time] return total def get_max_points(self) -> int: return self.max_points"},{"question":"Create a program that, given a string of alphabets, checks if it can be transformed into a palindrome by rearranging its characters. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forwards and backwards. You can ignore spaces, punctuation, and letter casing while determining if a string can be rearranged to form a palindrome, but the output should maintain the original case and format of the input string. The program should read multiple input strings, each on a new line, and for each string, output \\"YES\\" if the characters can be rearranged to form a palindrome, and \\"NO\\" otherwise. The comparison should be case insensitive, but the output should match the original formatting. Input The input consists of multiple strings. Each string is on a new line. The number of strings does not exceed 50, and each string does not exceed 100 characters, including letters, spaces, and punctuation. Output For each input string, output \\"YES\\" or \\"NO\\" on a new line, according to whether the string\'s characters can be rearranged to form a palindrome. Example Input A Santa at Nasa Madam In Eden, I\'m Adam A man, a plan, a canal, Panama! Hello World Output YES YES YES NO","solution":"import re from collections import Counter def can_form_palindrome(s): Returns \\"YES\\" if the characters in the string s can be rearranged to form a palindrome, otherwise \\"NO\\". # Remove non-alphabetic characters and convert to lower case cleaned_str = re.sub(r\'[^a-zA-Z]\', \'\', s).lower() # Count the frequency of each character char_count = Counter(cleaned_str) # Check if at most one character has an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" return \\"YES\\" def check_palindrome_formation(*strings): return [can_form_palindrome(s) for s in strings]"},{"question":"A city is represented by a grid of size n × m, where n is the number of rows and m is the number of columns. Each cell in the grid can either be empty (denoted by \'.\') or occupied by a building (denoted by \'#\'). You are given this representation of the city in the form of an array of strings. You need to determine the maximum size of a square subgrid that can be placed within the city such that it does not overlap any buildings. A square subgrid is defined as a square of side length l where all its cells are empty. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns, respectively. - The next n lines each contain a string of length m, representing the city grid, with \'.\' denoting an empty cell and \'#\' denoting a building. Output - Print a single integer which is the side length of the largest square subgrid that can be placed within the city without overlapping any buildings. Examples Input 4 5 ..... ..#.. ..... ..... Output 2 Input 4 4 #..# #..# Output 2 Note In the first example, the largest square subgrid that can be placed has side length 2. There are two possible positions for the subgrid: ``` .. .. .. and .. ``` In the second example, several square subgrids of size 2 can be placed such as: ``` .. .. .. and .. ``` If the grid was smaller or the placement more restricted, it may not be possible to place a subgrid larger than 1x1.","solution":"def largest_square_subgrid(n, m, city_grid): Returns the side length of the largest square subgrid that can be placed within the city grid without overlapping any buildings. dp = [[0]*m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if city_grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"In a bustling futuristic metropolis, the city council has decided to implement a new transportation system consisting of n-way intersections and m two-way roads connecting these intersections. To make navigation easier for the citizens, they want to label intersections with distinct integers from 1 to n in such a way that for every two intersections a and b connected by a road, the absolute difference between their labels |a - b| should be minimized. The council seeks your help in determining the optimal way to label these intersections. Given a graph with n intersections and m roads, your task is to find a labeling of the intersections from 1 to n such that the maximum absolute difference between the labels of any two connected intersections is minimized. If there are multiple valid labelings, output any one of them. Write a program that receives the number of test cases t, and for each test case, you will be given the integers n (number of intersections) and m (number of roads) followed by m pairs of integers representing the roads between intersections. For each test case, your program should output the optimal labeling of the intersections. # Input - The first line contains an integer t, the number of test cases. - For each test case: - The first line contains two integers n and m – the number of intersections and the number of roads. - The following m lines each contain two integers a and b, denoting an undirected road between intersections a and b. # Output - For each test case, print n integers denoting the labels of the intersections from 1 to n. Ensure adjacent intersections\' labels minimize the maximum absolute difference. # Constraints - 1 ≤ t ≤ 100 - 2 ≤ n ≤ 1000 - 1 ≤ m ≤ 5000 - 1 ≤ a, b ≤ n # Example Input ``` 2 4 3 1 2 2 3 3 4 3 2 1 2 2 3 ``` Output ``` 1 2 3 4 1 3 2 ``` Note: The outputs will vary as long as they meet the requirement of minimizing the maximum absolute difference between the labels of any two connected intersections.","solution":"def solve_transportation_system(t, test_cases): results = [] for case in test_cases: n, m, roads = case # Simply assigning labels 1 to n in ascending order will always minimize the difference labels = list(range(1, n + 1)) results.append(labels) return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 t = int(data[index]) index += 1 test_cases = [] for _ in range(t): n = int(data[index]) m = int(data[index + 1]) index += 2 roads = [] for __ in range(m): a = int(data[index]) b = int(data[index + 1]) index += 2 roads.append((a, b)) test_cases.append((n, m, roads)) results = solve_transportation_system(t, test_cases) for result in results: print(\\" \\".join(map(str, result)))"},{"question":"Swathi is fascinated by numbers and has recently discovered an interesting property related to the sum of digits. Given a positive integer n, she defines a function S(n) as the sum of the digits of n. For example, S(123) = 1 + 2 + 3 = 6. Swathi wants to explore how many times she needs to apply this function iteratively until the result is a single-digit number. She defines D(n) as the number of iterations required to reduce n to a single-digit number using S(n). For example, if n = 9875: - S(9875) = 9 + 8 + 7 + 5 = 29 - S(29) = 2 + 9 = 11 - S(11) = 1 + 1 = 2 Here, D(9875) = 3, because we applied the function 3 times to reach the single-digit number 2. Write a program to calculate D(n) for a given positive integer n. Input The first and only line contains an integer n (1 ≤ n ≤ 10^18). Output Output the number of iterations D(n) needed to reduce n to a single-digit number. Examples Input 9875 Output 3 Input 12345 Output 2","solution":"def digit_root_iterations(n): Returns the number of iterations required to reduce n to a single-digit number using the sum of its digits. def sum_of_digits(num): return sum(int(digit) for digit in str(num)) count = 0 while n >= 10: n = sum_of_digits(n) count += 1 return count"},{"question":"You are given an integer n (1 ≤ n ≤ 1000). Find all pairs of positive integers (a, b) such that: - a is a divisor of n. - b is a divisor of n. - a * b = n. For each test case, output all pairs (a, b) in non-decreasing order of a. If there are no such pairs, output \\"NO\\" (without quotes). Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow. Each test case is described by one integer n (1 ≤ n ≤ 1000). Output For each test case print: - All pairs (a, b) in non-decreasing order of a if they exist, or - \\"NO\\" (without quotes) if no such pairs exist. Example Input 3 6 12 19 Output 1 6 2 3 1 12 2 6 3 4 NO","solution":"def find_divisor_pairs(n): Given an integer n, finds all pairs of positive integers (a, b) such that: - a is a divisor of n. - b is a divisor of n. - a * b = n. Returns a list of tuples containing the pairs (a, b) in non-decreasing order of a. If no such pairs exist, returns an empty list. pairs = [] for a in range(1, n + 1): if n % a == 0: b = n // a if b >= a: pairs.append((a, b)) return pairs def find_pairs_for_all_cases(t, cases): Given the number of test cases t and a list of n values for each test case, returns the result for each test case as a list of strings. results = [] for n in cases: pairs = find_divisor_pairs(n) if pairs: results.append(\\"n\\".join(f\\"{a} {b}\\" for a, b in pairs)) else: results.append(\\"NO\\") return results"},{"question":"You are given a collection of numbers, and you need to determine the size of the largest subset in which the greatest common divisor (GCD) of all the numbers is greater than 1. Input The first line contains an integer T - the number of test cases. The first line of each test case contains an integer n - the number of elements in the array. The next line contains n space-separated integers - the elements of the array. Output For each test case, output a single integer - the size of the largest subset with GCD greater than 1. Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 1000 1 ≤ a[i] ≤ 10^6 SAMPLE INPUT 2 5 2 3 4 9 16 4 5 10 15 20 SAMPLE OUTPUT 3 4","solution":"import math from collections import defaultdict from functools import reduce from typing import List def gcd(a, b): Returns the greatest common divisor of a and b. while b: a, b = b, a % b return a def find_factors(n): Finds all prime factors of the given number n. i = 2 factors = set() while i * i <= n: if n % i: i += 1 else: n //= i factors.add(i) if n > 1: factors.add(n) return factors def largest_subset_with_gcd_greater_than_one(arr: List[int]) -> int: # Handle the edge case where there are less than 2 elements if len(arr) < 2: return 0 # Dictionary to hold count of elements for each prime factor factor_count = defaultdict(int) for num in arr: factors = find_factors(num) for factor in factors: factor_count[factor] += 1 # The largest subset will be determined by the most frequently occurring prime factor max_subset_size = max(factor_count.values(), default=0) return max_subset_size def process_test_cases(T: int, test_cases: List[List[int]]) -> List[int]: results = [] for i in range(T): n = test_cases[i*2][0] arr = test_cases[(i*2) + 1] results.append(largest_subset_with_gcd_greater_than_one(arr)) return results"},{"question":"In a thriving ecological research zone nestled within a lush rainforest, the biologists are studying the lifecycle and growth of a unique type of plant known as the \\"Climbvine.\\" These plants grow in distinct clusters and display intriguing growth patterns that are crucial for the ecological balance in the rainforest. The biologists want to develop a system to automatically analyze the layout of these plan clusters based on visual data captured using drones. For simplicity, the rainforest grid is represented as a rectangular grid where each cell can either contain a part of a plant or be empty. Each plant cluster forms a connected component of cells containing plant parts, with connectivity allowed in four directions: up, down, left, or right. The biologists need a way to identify isolated clusters of plants and determine their sizes. Climbvines are known to be productive based on their cluster size. Specifically, a productive cluster must have exactly three cells. You are tasked with writing a program to determine how many productive clusters are present in the given grid. Input: The first line of input contains two positive integers, H and W, which represent the height and width of the grid (1 <= H, W <= 100). The next H lines each contain W characters. Each character can be either \'P\' (indicating a part of a plant) or \'.\' (indicating an empty cell). Output: Output a single integer representing the number of productive clusters in the grid. Sample Input: ``` 5 5 P..P. PP.PP ..... .PPPP P.P.. ``` Sample Output: ``` 2 ``` Explanation: The grid defines the layout of plant parts in the rainforest. In the provided sample: - One productive cluster is formed at the top-left corner consisting of cells (1,1), (2,1), (2,2). - Another productive cluster is formed at the bottom-right corner consisting of cells (4,3), (4,4), (5,4). These clusters each contain exactly 3 connected \'P\' cells, making them productive clusters. Thus, the output is 2.","solution":"def productive_clusters(grid): This function returns the number of productive clusters of plants in the given grid. A productive cluster is defined as a cluster that contains exactly three \'P\' cells. H, W = len(grid), len(grid[0]) visited = [[False for _ in range(W)] for _ in range(H)] def dfs(x, y): if x < 0 or y < 0 or x >= H or y >= W or visited[x][y] or grid[x][y] != \'P\': return 0 visited[x][y] = True size = 1 size += dfs(x + 1, y) size += dfs(x - 1, y) size += dfs(x, y + 1) size += dfs(x, y - 1) return size productive_cluster_count = 0 for i in range(H): for j in range(W): if grid[i][j] == \'P\' and not visited[i][j]: if dfs(i, j) == 3: productive_cluster_count += 1 return productive_cluster_count"},{"question":"Given an array of n integers and a target integer sum, determine if there exist two distinct indices i and j in the array such that the sum of the elements at these indices equals the target sum. If such indices exist, find one pair of indices that satisfy the condition. Input The first line of input contains an integer n (2 ≤ n ≤ 105). The second line contains n space-separated integers representing the array elements. The third line contains the target integer sum (0 ≤ sum ≤ 2 * 108). Output If there exist such indices, output two integers denoting the position (1-based index) of the two elements. If there are multiple correct answers, you are allowed to print any of them. If there are no such indices, print -1. Examples Input 5 1 2 3 4 5 6 Output 2 4 Input 4 1 2 3 4 8 Output -1 Note In the first sample, the sum of elements at positions 2 (value 2) and 4 (value 4) equals the target sum 6. Another possible correct answer could be 1 and 5. In the second sample, there are no two distinct indices in the array whose elements sum up to 8.","solution":"def find_pair_with_sum(arr, target_sum): Given an array of n integers and a target integer sum, determine if there exist two distinct indices i and j in the array such that the sum of the elements at these indices equals the target sum. Returns the one-based indices of the two elements if such a pair exists, otherwise returns -1. num_to_index = {} for i, num in enumerate(arr): complement = target_sum - num if complement in num_to_index: return num_to_index[complement] + 1, i + 1 num_to_index[num] = i return -1"},{"question":"A group of adventurers are trying to decode a secret message left in an ancient temple. The message is a sequence of numbers, but most of them have been eroded away with time. However, the remaining numbers can help them discover the entire sequence if they can decipher the pattern behind it. The sequence follows these rules: 1. Let\'s call the sequence `S`. 2. `S[1] = a` (the first term is provided as input). 3. `S[2] = b` (the second term is provided as input). 4. For any `n > 2`, `S[n] = (S[n-1] + S[n-2]) mod 1000000007`. Given the first two terms of the sequence and an integer `N`, can you help the adventurers find the N-th term of the sequence? # Input The first line contains an integer `T`, the number of test cases. Each of the following `T` lines contains three integers `a`, `b`, and `N` indicating the first two terms of the sequence and the position of the term to be found respectively. # Output For each test case, output a single integer, the N-th term of the sequence. # Constraints 1 ≤ T ≤ 1000 0 ≤ a, b < 1000000007 1 ≤ N ≤ 10^12 # Sample Input ``` 2 1 1 3 2 3 5 ``` # Sample Output ``` 2 10 ``` # Explanation In the first test case, the sequence starts as 1, 1, and the third term is (1+1) mod 1000000007 = 2. In the second test case, the sequence starts as 2, 3, and the fifth term is found as follows: - S[3] = (3 + 2) mod 1000000007 = 5 - S[4] = (5 + 3) mod 1000000007 = 8 - S[5] = (8 + 5) mod 1000000007 = 13","solution":"def find_nth_term(a, b, N): MOD = 1000000007 if N == 1: return a elif N == 2: return b # Using matrix exponentiation to solve this efficiently def matrix_mult(A, B): return [ [(A[0][0] * B[0][0] + A[0][1] * B[1][0]) % MOD, (A[0][0] * B[0][1] + A[0][1] * B[1][1]) % MOD], [(A[1][0] * B[0][0] + A[1][1] * B[1][0]) % MOD, (A[1][0] * B[0][1] + A[1][1] * B[1][1]) % MOD] ] def matrix_pow(mat, power): result = [[1, 0], [0, 1]] # identity matrix base = mat while power > 0: if power % 2 == 1: result = matrix_mult(result, base) base = matrix_mult(base, base) power //= 2 return result Q = [[1, 1], [1, 0]] Q_n_minus_2 = matrix_pow(Q, N - 2) nth_term = (Q_n_minus_2[0][0] * b + Q_n_minus_2[0][1] * a) % MOD return nth_term def decode_sequence(T, cases): results = [] for case in cases: a, b, N = case results.append(find_nth_term(a, b, N)) return results"},{"question":"Write a program that, given a list of integers, determines for each integer if it is an even number or an odd number. Input The first line contains an integer T, the total number of test cases. Then follow T lines, each line contains a single integer N. Output For each integer, output \\"Even\\" if the number is even or \\"Odd\\" if the number is odd. Constraints 1 ≤ T ≤ 1000 -10^6 ≤ N ≤ 10^6 Example Input 4 3 8 0 -7 Output Odd Even Even Odd","solution":"def determine_even_odd(numbers): Given a list of integers, determines for each if it is an even number or an odd number. Args: numbers: List of integers. Returns: List of strings, each being either \\"Even\\" or \\"Odd\\". results = [] for number in numbers: if number % 2 == 0: results.append(\\"Even\\") else: results.append(\\"Odd\\") return results def process_input(input_data): Processes the input data and returns the results for even and odd determination. Args: input_data: Multiline string with the first line as the count of test cases and following lines as the numbers. Returns: A list of strings representing whether each integer is \\"Even\\" or \\"Odd\\". lines = input_data.strip().split(\\"n\\") T = int(lines[0]) numbers = [int(lines[i]) for i in range(1, T + 1)] return determine_even_odd(numbers)"},{"question":"**C - Optimal Energy Consumption** Problem Statement You are managing a factory that operates across multiple machines, and energy consumption is a critical factor. Each machine operates based on certain schedules and consumes energy at different rates throughout the day. Your goal is to optimize the energy consumption of the factory by ensuring that not all machines are running their most energy-intensive operations simultaneously. To effectively manage energy consumption, you decide to write a program that will determine if an optimal energy schedule exists given the constraints of each machine. Input The input is formatted as follows: N E M_1 s_{1,1} e_{1,1} s_{1,2} e_{1,2} ... s_{1,M_1} e_{1,M_1} M_2 ... M_N s_{N,1} e_{N,1} s_{N,2} e_{N,2} ... s_{N,M_N} e_{N,M_N} The first line of input contains two integers N and E, where N is the number of machines (1 leq N leq 100), and E is the maximum allowable energy consumption at any given time (1 leq E leq 1000). Each machine\'s schedule is then provided. The first line of a machine\'s schedule contains a single integer M_i (0 leq M_i leq 100), which is the number of operations in the machine\'s schedule. Each of the following M_i lines describes an operation by two integers s_{i,j} and e_{i,j}. s_{i,j} is the time slot of the operation (1 leq s_{i,j} leq 24), and e_{i,j} is the energy consumption of the operation (1 leq e_{i,j} leq 100). Output Output \\"Optimizable\\" (without quotes) if it\'s possible to rearrange the schedules such that the energy consumption never exceeds E at any given time slot. Otherwise, output \\"Not Optimizable\\" (without quotes). Sample Input 1 3 150 3 1 50 2 50 3 50 2 1 50 2 70 4 1 30 2 30 3 30 4 30 Output for Sample Input 1 Optimizable Sample Input 2 2 100 2 1 60 2 60 2 2 50 3 50 Output for Sample Input 2 Not Optimizable Remarks: - The first sample indicates that the maximum energy consumption per time slot is never more than 150, thus it\'s optimizable. - The second sample shows that at time slot 2, the energy consumption from both machines would be 110, which exceeds 100, making it not optimizable. This problem tests your ability to combine scheduling algorithms with constraint-based optimization, ensuring practical engineering constraints are met using programming logic effectively.","solution":"def is_optimizable(N, E, schedules): Determine if it\'s possible to rearrange the schedules such that the energy consumption never exceeds E at any given time slot. Parameters: N (int): Number of machines E (int): Maximum allowable energy consumption at any time schedules (list): List of machines\' schedules, where each schedule is a list of (time slot, energy consumption) pairs Returns: str: \\"Optimizable\\" if possible, otherwise \\"Not Optimizable\\" # Initialize a list to track energy consumption at each time slot energy_usage = [0] * 24 # Iterate over all schedules and accumulate energy usages for schedule in schedules: for time_slot, energy_consumption in schedule: energy_usage[time_slot - 1] += energy_consumption if energy_usage[time_slot - 1] > E: return \\"Not Optimizable\\" return \\"Optimizable\\" # Wrapper function to process input and output, useful for integration into systems where input is given in a specific format def optimal_energy_consumption(input_data): lines = input_data.strip().split(\\"n\\") N, E = map(int, lines[0].split()) schedules = [] index = 1 for _ in range(N): M = int(lines[index]) index += 1 schedule = [] for __ in range(M): s, e = map(int, lines[index].split()) schedule.append((s, e)) index += 1 schedules.append(schedule) return is_optimizable(N, E, schedules)"},{"question":"Alice and Bob are playing a game involving arrays of integers. They take turns to play, with Alice starting first. Given an array of `n` positive integers, they choose one element per turn and remove it from the array. The game ends when the array is empty. Alice\'s goal is to maximize the sum of elements that she picks, while Bob\'s goal is to maximize the sum of elements that he picks. They both play optimally. Write a function that returns the difference between the sums of elements picked by Alice and Bob if both play optimally. Input The input will be a single line containing `n` integers where `1 <= n <= 100` and each integer is between `1` and `1000`. Output Output the difference between the sum of elements picked by Alice and Bob if both play optimally. Examples Input 5 2 3 7 1 Output 6 Explanation Alice starts and picks the largest element 7. The array becomes: [5, 2, 3, 1]. Bob then picks the next largest element 5. The array becomes: [2, 3, 1]. Alice picks 3. The array becomes: [2, 1]. Bob picks 2. The array becomes: [1]. Alice picks the remaining element 1. Alice\'s total sum is 7 + 3 + 1 = 11. Bob\'s total sum is 5 + 2 = 7. The difference is 11 - 7 = 4. Another Example Input 9 8 3 6 4 Output 8 Explanation Alice starts and picks the largest element 9. The array becomes: [8, 3, 6, 4]. Bob then picks the next largest element 8. The array becomes: [3, 6, 4]. Alice picks 6. The array becomes: [3, 4]. Bob picks 4. The array becomes: [3]. Alice picks the remaining element 3. Alice\'s total sum is 9 + 6 + 3 = 18. Bob\'s total sum is 8 + 4 = 12. The difference is 18 - 12 = 6.","solution":"def find_difference(arr): Find the difference between the sums of elements picked by Alice and Bob when both play optimally. arr.sort(reverse=True) alice_sum, bob_sum = 0, 0 for i in range(len(arr)): if i % 2 == 0: alice_sum += arr[i] else: bob_sum += arr[i] return alice_sum - bob_sum"},{"question":"You are given a positive integer `n`. Your task is to find two integers `a` and `b` such that: 1. (a geq 1) 2. (b geq 1) 3. (a * b = n) 4. The value ( |a - b| ) (the absolute difference between `a` and `b`) is minimized. If there are multiple pairs `(a, b)` which give the same minimized difference, you can output any of them. Input The input consists of a single integer `t` (1 ≤ t ≤ 10^5) — the number of test cases. The next `t` lines each contain the integer `n` (1 ≤ n ≤ 10^9). Output For each test case, print two integers `a` and `b`. If there are multiple pairs, output any one of them. Example Input 3 10 28 100 Output 2 5 4 7 10 10","solution":"def find_ab_pairs(t, n_values): Finds pairs (a, b) such that: - a * b = n - |a - b| is minimized Args: t (int): The number of test cases. n_values (list of int): A list containing the values of n for each test case. Returns: list of tuple: A list of tuples (a, b) for each test case. import math results = [] for n in n_values: min_diff = math.inf best_a, best_b = 1, n for i in range(int(math.sqrt(n)) + 1, 0, -1): if n % i == 0: a, b = i, n // i diff = abs(a - b) if diff < min_diff: min_diff = diff best_a, best_b = a, b results.append((best_a, best_b)) return results"},{"question":"Write a function that takes a string consisting of lowercase letters and returns the lexicographically smallest string that can be obtained by rotating the original string. The rotation of a string s by k places results in a new string formed by concatenating the substring(s[k:]) and the substring(s[:k]). Input: A string s (1 ≤ |s| ≤ 10^5): the given string. Output: Print the lexicographically smallest string that can be obtained by rotating the original string. Examples: Input: `cba` Output: `acb` Input: `rotation` Output: `ationrot` Note: For the first example, rotating the string `cba` by 2 places gives the lexicographically smallest string `acb`. For the second example, rotating the string `rotation` by 4 places gives the lexicographically smallest string `ationrot`.","solution":"def lexicographically_smallest_rotation(s): Returns the lexicographically smallest string that can be obtained by rotating the original string. Parameters: s (str): The given string. Returns: str: The lexicographically smallest string obtained by rotation. # Concatenate the string with itself to handle easy rotation comparisons double_s = s + s n = len(s) # Initialize the smallest string with the first rotation (original string) smallest = s # Compare all possible rotations for i in range(1, n): rotation = double_s[i:i + n] if rotation < smallest: smallest = rotation return smallest"},{"question":"N is a positive integer indicating the number of days Alice wants to save fruits for, inclusive of the first day. Each day, starting from the first day, a certain number of fruits will be added to her stockpile. Her goal is to eat the maximum number of fruits each day, so that her stockpile is never reduced to zero before the N-th day. Given the number of fruits that are added each day, determine the maximum number of fruits Alice can eat per day, ensuring she never runs out of fruits by the end of the N-th day. Input * The first line contains a single integer N. * The second line contains N integers separated by spaces, representing the number of fruits added to her stockpile each day. Output * Output the maximum number of fruits Alice can eat each day. Insert a line break at the end. Constraints * N is an integer greater than or equal to 1 and less than or equal to 100. * Each integer representing the number of fruits added per day (F_1, F_2, ..., F_N) is between 1 and 100. Input example 1 5 7 3 4 6 2 Output example 1 4 Explanation: If Alice decides to eat 4 fruits every day: - Day 1: 7 - 4 = 3 fruits left - Day 2: 3 + 3 - 4 = 2 fruits left - Day 3: 2 + 4 - 4 = 2 fruits left - Day 4: 2 + 6 - 4 = 4 fruits left - Day 5: 4 + 2 - 4 = 2 fruits left Input example 2 3 5 2 10 Output example 2 5 Explanation: If Alice decides to eat 5 fruits every day: - Day 1: 5 - 5 = 0 fruits left - Day 2: 0 + 2 - 5 = -3 fruits left (invalid, she runs out) Thus, Alice can only consistently eat 3 fruits each day without running out. Input example 3 4 6 6 6 6 Output example 3 6","solution":"def max_fruits_per_day(N, fruits): low, high = 0, max(fruits) result = 0 while low <= high: mid = (low + high) // 2 if can_consume(mid, N, fruits): result = mid low = mid + 1 else: high = mid - 1 return result def can_consume(k, N, fruits): stockpile = 0 for i in range(N): stockpile += fruits[i] if stockpile < k: return False stockpile -= k return True"},{"question":"You are given an integer N, followed by N integers. Determine whether the sequence of N integers is strictly increasing. Constraints * 2 ≤ N ≤ 100 * Each integer in the sequence is between -1000 and 1000 inclusive. Input Input is given from Standard Input in the following format: N a1 a2 a3 ... aN Output If the sequence is strictly increasing, print `Yes`; otherwise, print `No`. Examples Input 5 1 2 3 4 5 Output Yes Input 4 1 2 2 4 Output No Input 3 3 2 1 Output No","solution":"def is_strictly_increasing(N, sequence): Determines if the given sequence of N integers is strictly increasing. Args: N : int : The number of integers in the sequence. sequence : list : The list of integers representing the sequence. Returns: str : \'Yes\' if the sequence is strictly increasing, \'No\' otherwise. for i in range(1, N): if sequence[i] <= sequence[i - 1]: return \\"No\\" return \\"Yes\\""},{"question":"A company is organizing a coding competition and they need to create a leaderboard to rank the participants. The competition has several challenges and participants receive a score for each challenge they solve. You need to develop a program that takes the scores of all participants across various challenges, sorts them in descending order of their total scores, and outputs the leaderboard. If two participants have the same total score, they should be ranked alphabetically by their names. Input The first line of input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 50), where n denotes the number of participants and m denotes the number of challenges. The next n lines each contain a participant\'s name (a string of up to 50 characters) followed by m integers representing the scores they received on each challenge. Each integer score (0 ≤ score ≤ 100) is separated by a space. Output Print the leaderboard where each line contains a participant\'s name followed by their total score, sorted first by total score in descending order, then by their name in alphabetical order if the total scores are the same. Examples Input 3 4 Alice 95 80 100 90 Bob 100 85 90 85 Charlie 95 90 100 100 Output Charlie 385 Alice 365 Bob 360 Input 2 3 David 90 100 95 Eve 85 95 100 Output David 285 Eve 280","solution":"def generate_leaderboard(n, m, scores): participants = [] for line in scores: parts = line.split() name = parts[0] score = sum(map(int, parts[1:])) participants.append((name, score)) # Sort participants by score descending first, then by name ascending participants.sort(key=lambda x: (-x[1], x[0])) return participants def format_leaderboard(participants): return [f\\"{name} {score}\\" for name, score in participants]"},{"question":"A robotics company is building a factory automation system that involves a network of conveyor belts. Each conveyor belt connects two machines and has a specific duration for which it can transport materials from one machine to another. The company needs to determine the optimal time to complete certain tasks from an initial machine to a final machine using the network of conveyor belts. You are given the following details: 1. There are N machines in the factory, numbered from 1 to N. 2. There are M conveyor belts, where each conveyor belt connects two machines and has a duration associated with it. 3. Each task starts at one specific machine (denoted by S) and needs to end at another specific machine (denoted by F). Your objective is to find the minimum duration required to complete the task for each test case. Input: - The first line contains an integer T, the number of test cases. - The first line of each test case contains two space-separated integers N and M. - Each of the next M lines contains three space-separated integers X, Y, and D, indicating a conveyor belt between machines X and Y with a duration of D units. - The next line contains two space-separated integers S and F. Output: Print the minimum duration required to complete the task for each test case on a new line. If it\'s not possible to complete the task, print \\"IMPOSSIBLE\\". Constraints: - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 100 - 1 ≤ M ≤ 10,000 - 1 ≤ X, Y, S, F ≤ N - 1 ≤ D ≤ 100 Example Input: 1 4 5 1 2 4 1 3 2 2 3 1 2 4 5 3 4 3 1 4 Example Output: 5 Explanation: For the given input, the optimal path from machine 1 to machine 4 is through machine 3. The total duration is 2 (1 to 3) + 3 (3 to 4) = 5 units.","solution":"import heapq def find_minimum_duration(T, test_cases): results = [] for case in test_cases: N, M = case[\'N\'], case[\'M\'] edges = case[\'edges\'] S, F = case[\'S\'], case[\'F\'] # Create adjacency list graph = [[] for _ in range(N + 1)] for x, y, d in edges: graph[x].append((y, d)) graph[y].append((x, d)) # Use Dijkstra\'s algorithm to find the shortest path def dijkstra(start, end): heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[start] = 0 while heap: current_distance, current_node = heapq.heappop(heap) if current_node == end: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return float(\'inf\') min_duration = dijkstra(S, F) if min_duration == float(\'inf\'): results.append(\\"IMPOSSIBLE\\") else: results.append(min_duration) return results def process_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) idx = 1 test_cases = [] for _ in range(T): N, M = map(int, input_lines[idx].split()) idx += 1 edges = [] for __ in range(M): X, Y, D = map(int, input_lines[idx].split()) edges.append((X, Y, D)) idx += 1 S, F = map(int, input_lines[idx].split()) idx += 1 test_cases.append({\'N\': N, \'M\': M, \'edges\': edges, \'S\': S, \'F\': F}) return T, test_cases def solve(input_data): T, test_cases = process_input(input_data) results = find_minimum_duration(T, test_cases) return \'n\'.join(map(str, results))"},{"question":"You are given an integer array `arr` representing a series of stock prices where each element represents the stock price on a specific day. Your task is to write a program that calculates the maximum profit that can be made by buying and selling the stock only once. If no profit can be made, return 0. # Constraints: - The length of `arr` is less than or equal to 100000. - All elements in `arr` are positive integers. # Input - The input consists of a single integer `t`, the number of test cases. - For each test case, the first line contains an integer `n`, the length of the array. - The second line contains `n` space-separated integers representing the stock prices. # Output - For each test case, print the maximum profit that can be achieved from a single transaction. # Example Input ``` 2 6 7 1 5 3 6 4 5 7 6 4 3 1 ``` Output ``` 5 0 ``` # Explanation - For the first test case, the maximum profit is 5 (buy at 1 and sell at 6). - For the second test case, no profit can be made as the prices are in a decreasing order, so the output is 0.","solution":"def max_profit(arr): Calculate the maximum profit from a single buy-sell transaction. Args: arr (list of int): List of stock prices. Returns: int: The maximum profit. if not arr or len(arr) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in arr: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(max_profit(arr)) return results"},{"question":"Given an array of n integers and an integer k, determine the maximum sum of a subarray with length exactly k, where the array elements may be rearranged with at most one swap of elements. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100000) — the length of the array and the length of the subarray respectively. The second line contains n integers a_1, a_2, ... a_n (|a_i| ≤ 10^9) — the elements of the array. Output Print a single integer — the maximum sum of a subarray with length exactly k after performing at most one swap. Examples Input 5 3 1 2 3 4 5 Output 12 Input 6 2 1 5 3 6 2 4 Output 11 Input 4 4 -1 -2 -3 -4 Output -10 Input 3 1 9 -1 3 Output 9 Note In the first example, the array is already in increasing order, so the maximum sum of the subarray of length 3 is simply the sum of the last 3 elements: 3 + 4 + 5 = 12. In the second example, after calculating the initial sum of subarrays of length 2, we can see that swapping 5 and 6 leads to a larger sum. Initial large sum subarrays are chosen from (1+5), (5+3), (3+6). With the swap, highest sum (5+6) = 11 is obtained. In the third example, since there\'s only one way to take a subarray of length 4, summing all elements, the answer is -1 + (-2) + (-3) + (-4) = -10. In the fourth example, the largest single-element subarray has maximum value 9. There\'s no need of swapping.","solution":"def max_subarray_sum_with_one_swap(n, k, array): Returns the maximum sum of a subarray with length exactly k after performing at most one swap. def max_sum_subarray(arr, k): Helper function to compute maximum sum of subarray with length k. max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum # Calculate initial sums for all subarrays of length k max_sum = max_sum_subarray(array, k) # Try all possible single swaps and calculate the best result for i in range(n): for j in range(i+1, n): array[i], array[j] = array[j], array[i] max_sum_with_swap = max_sum_subarray(array, k) max_sum = max(max_sum, max_sum_with_swap) array[i], array[j] = array[j], array[i] return max_sum"},{"question":"You are organizing a coding challenge event with n participants. To ensure the event is fair, the participants have to be seated in a row, respecting certain rules that define the skill level of each participant. Each participant has a skill level si, described as an integer. The seating arrangement must satisfy the following constraint: for every set of k consecutive participants, the minimum skill level in this set should be greater than or equal to k. The event would be considered balanced if this condition holds true for all sets of k consecutive participants starting from 1 up to n. Write a program to determine if a given seating arrangement of participants is balanced. Input The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the number of participants. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 1000) where si is the skill level of the i-th participant. Output Print \\"YES\\" if the arrangement is balanced. Otherwise, print \\"NO\\". Examples Input 5 3 2 4 2 1 Output NO Input 4 4 4 4 4 Output YES Explanation For the first sample case, take the set [2, 4] with k=2. The minimum value in this set is 2, which is not greater than 2. For the second sample case, all sets [1, 1], [4, 4], [4, 4, 4], [4, 4, 4, 4] (with k = 1, 2, 3, 4 respectively) have their minimum values 4. Hence, the output is \\"YES\\".","solution":"def is_balanced(n, skills): for k in range(1, n + 1): for i in range(n - k + 1): if min(skills[i:i + k]) < k: return \\"NO\\" return \\"YES\\""},{"question":"Sarah loves to play with strings and create interesting challenges for her friends. One day, she came up with a new game where she provides a string consisting of lowercase alphabets and asks her friends to find the longest substring composed of unique characters. Given a string `s`, you need to determine the length of the longest substring that contains only unique characters. Input The input consists of a single string `s` (1 ≤ |s| ≤ 10^5), containing only lowercase English letters. Output Output a single integer, the length of the longest substring with all unique characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 Input abcdefg Output 7 Note In the first example, the answer is \\"abc\\", with the length of 3. In the second example, the answer is \\"b\\", with the length of 1. In the third example, the answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. In the fourth example, the entire string is composed of unique characters, and thus the output is the length of the string, which is 7.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters. chars = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in chars: chars.remove(s[left]) left += 1 chars.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Martin is playing a game on his computer in which he builds connected networks of towns. Each town is represented by a node, and each connection between two towns is represented by an edge. Initially, no towns are connected, and Martin can select from a given list of possible connections (edges). He wants to form a network that connects all towns at the minimum possible cost. The minimum cost of a network is the sum of the weights of the edges in this network, given that the network is a spanning tree. Write a function that determines the minimum cost to connect all towns. # Input 1. The integer `n` (2 ≤ n ≤ 100) representing the number of towns. 2. An integer `m` (n-1 ≤ m ≤ 1000) – the number of possible connections. 3. `m` lines follow, each containing three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a connection between towns `u` and `v` with a cost of `w`. # Output Output the minimum cost required to connect all towns. If it is not possible to connect all towns, output \\"Impossible\\". # Example Input ``` 4 5 1 2 1 1 3 4 2 3 2 3 4 3 2 4 5 ``` Output ``` 6 ``` Input ``` 3 1 1 2 10 ``` Output ``` Impossible ``` # Note In the first example, the minimum cost to connect all towns is to select the edges (1, 2) with cost 1, (2, 3) with cost 2, and (3, 4) with cost 3. So the total cost is 1 + 2 + 3 = 6. In the second example, it is not possible to connect all towns because there is only one connection available, and town 3 cannot be connected. Hence, the output is \\"Impossible\\".","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def minimum_cost_to_connect_towns(n, m, connections): if m < n - 1: return \\"Impossible\\" connections.sort(key=lambda x: x[2]) parent = [i for i in range(n+1)] rank = [0] * (n+1) total_cost = 0 edges_used = 0 for u, v, w in connections: root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) total_cost += w edges_used += 1 if edges_used == n - 1: return total_cost return \\"Impossible\\" # Example usage: # print(minimum_cost_to_connect_towns(4, 5, [(1, 2, 1), (1, 3, 4), (2, 3, 2), (3, 4, 3), (2, 4, 5)])) # Should output 6"},{"question":"A software company has devised a system to categorize employee performance based on a unique point-scoring system. Each day, an employee\'s performance is recorded as a sequence of points, and the total score for that day is the sum of the points in the sequence. At the end of the month, the employee with the highest cumulative score is awarded the Employee of the Month title. To model this, you need to write a function that calculates the employee with the highest score given the daily performance scores of multiple employees over a series of days. Input - The first line contains two integers `m` and `d` (1 ≤ m ≤ 10², 1 ≤ d ≤ 10²) — the number of employees and the number of days, respectively. - The next `m` lines each contain `d` integers. Each line represents the daily performance points of one employee over the days, separated by spaces. Output - Print a single line that contains the 1-based index of the employee with the highest cumulative score. In the case of a tie, print the smallest index. Examples Input ``` 3 4 1 2 3 4 4 5 6 7 1 1 1 1 ``` Output ``` 2 ``` Input ``` 2 3 5 6 7 7 6 5 ``` Output ``` 1 ``` Note In the first example, the scores are computed as follows: - Employee 1: 1 + 2 + 3 + 4 = 10 - Employee 2: 4 + 5 + 6 + 7 = 22 - Employee 3: 1 + 1 + 1 + 1 = 4 Thus, Employee 2 has the highest score. In the second example, the scores are tied, but the problem statement specifies to return the smallest index, thus Employee 1 is the output.","solution":"def employee_of_the_month(m, d, scores): Determines the employee with the highest cumulative score. Args: m (int): Number of employees. d (int): Number of days. scores (list of list of int): 2D list where each inner list contains daily scores of an employee. Returns: int: 1-based index of the employee with the highest score. max_score = -1 max_index = -1 for i in range(m): total_score = sum(scores[i]) if total_score > max_score: max_score = total_score max_index = i elif total_score == max_score: if i < max_index: max_index = i return max_index + 1 # converting to 1-based index"},{"question":"You are hosting a game tournament where players compete in multiple rounds. Each player scores points in each round, and you need to determine the overall rank of players by their total scores. Players with higher total scores should rank higher. If two or more players have the same total score, they should be ranked by their names in lexicographical order. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of players. The next n lines each contain a string (player’s name) and an integer (score) separated by a space. Player’s names are not necessarily unique and can appear multiple times. The length of each player\'s name is between 1 and 100 characters and only contains uppercase and lowercase English letters (A-Z, a-z). The integer score is in the range [-10^5, 10^5]. Output Output the overall ranking of players. For each player, output their name followed by their total score in decreasing order of their total score. Players with the same total score should be sorted by their names in lexicographical order. Examples Input 5 Alice 10 Bob 5 Alice -2 Bob 8 Charlie 8 Output Alice 8 Bob 13 Charlie 8 Input 4 John 15 Doe 15 Jane 20 Jane 10 Output Jane 30 Doe 15 John 15 Explanation In the first example, Alice\'s total score is 8, Bob\'s total score is 13, and Charlie\'s total score is 8. Bob ranks highest due to his higher score, followed by Alice and Charlie sorted lexicographically as their scores are the same. In the second example, Jane\'s total score is 30, Doe and John\'s total scores are both 15. Jane ranks highest due to her higher score, followed by Doe and John sorted lexicographically as their scores are the same.","solution":"def rank_players(n, players_scores): Ranks players by their total scores in descending order. Players with the same score are ranked lexicographically by name. :param n: int - number of players :param players_scores: list of tuples - each tuple contains a player\'s name and score :return: list of tuples - ranked players with their total scores from collections import defaultdict # Create a dictionary to store the total scores of each player total_scores = defaultdict(int) # Sum up the scores for each player for name, score in players_scores: total_scores[name] += score # Convert the dictionary to a sorted list of tuples sorted_players = sorted(total_scores.items(), key=lambda x: (-x[1], x[0])) return sorted_players"},{"question":"You are given an array of n integers and two integers k and x. Your task is to determine whether there exist at least k distinct elements in the array that are greater than or equal to x. Input The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Next 3t lines describe test cases. The first line of the test case contains three integers n, k, and x (1 ≤ n ≤ 1000, 1 ≤ k ≤ n, 1 ≤ x ≤ 10^9). The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the i-th element of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^4 (∑ n ≤ 10^4). Output For each test case, print the answer — \\"YES\\" (without quotes) if there are at least k distinct elements in the array that are greater than or equal to x, and \\"NO\\" otherwise. Example Input 4 6 3 5 1 5 6 7 8 5 4 2 10 10 12 14 8 5 5 3 1 2 3 4 5 7 4 9 11 15 9 10 8 7 9 Output YES YES NO YES Note In the first test case of the example, the array has four elements greater than or equal to 5: [5, 6, 7, 8]. Thus, there are at least 3 distinct elements that meet the condition. In the second test case, the array has three elements greater than or equal to 10: [10, 12, 14]. Thus, there are at least 2 distinct elements that meet the condition. In the third test case, the array has only three distinct elements, and they are [1, 2, 3, 4, 5]. There are no 5 distinct elements that are greater than or equal to 3. In the fourth test case, the array has four elements greater than or equal to 9: [11, 15, 9, 10]. Thus, there are at least 4 distinct elements that meet the condition.","solution":"def does_k_elements_exist(arr, n, k, x): Check if there are at least k distinct elements in the array that are >= x. :param arr: List of integers :param n: Integer, the length of the array :param k: Integer, the minimum number of distinct elements required :param x: Integer, the threshold value :return: \\"YES\\" if there are at least k distinct elements >= x, otherwise \\"NO\\" distinct_elements = set() for value in arr: if value >= x: distinct_elements.add(value) if len(distinct_elements) >= k: return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): results = [] for case in test_cases: n, k, x = case[\'n\'], case[\'k\'], case[\'x\'] arr = case[\'arr\'] result = does_k_elements_exist(arr, n, k, x) results.append(result) return results"},{"question":"Nina loves to play with sequences. She has a special interest in sequences made up from the first M natural numbers in an increasing order. She wants to know the number of sequences of length L that follow these rules: 1. The sequence must be strictly increasing. 2. Each element in the sequence can only belong to the first M natural numbers. For example, if M=4 and L=2, the sequences are `1,2`, `1,3`, `1,4`, `2,3`, `2,4`, and `3,4`. You need to help Nina to determine the number of such sequences for given values of M and L. INPUT The first line contains a single integer T, the number of test cases. Each of the following T lines contains two integers M and L. OUTPUT For each test case, print the number of strictly increasing sequences of length L from the first M natural numbers. Constraints 1 ≤ T ≤ 100 1 ≤ M, L ≤ 1000 SAMPLE INPUT 2 4 2 5 3 SAMPLE OUTPUT 6 10 Explanation For the first test case: M=4 and L=2 Possible increasing sequences of length 2: {1,2}, {1,3}, {1,4}, {2,3}, {2,4}, {3,4} Hence, the output is 6. For the second test case: M=5 and L=3 Possible increasing sequences of length 3: {1,2,3}, {1,2,4}, {1,2,5}, {1,3,4}, {1,3,5}, {1,4,5}, {2,3,4}, {2,3,5}, {2,4,5}, {3,4,5} Hence, the output is 10.","solution":"from math import comb def number_of_sequences(M, L): Returns the number of strictly increasing sequences of length L that can be formed from the first M natural numbers. # Using combinations to calculate the number of ways we can choose L elements from M return comb(M, L) def process_test_cases(T, test_cases): results = [] for M, L in test_cases: results.append(number_of_sequences(M, L)) return results"},{"question":"Problem Given an array of integers, you need to perform a series of operations on this array according to the provided queries. Each query will be one of the following types: 1. **Sum of Subarray**: Calculate the sum of the integers from index `l` to index `r` (both inclusive). 2. **Update**: Update the integer at a given index `i` to a new value `x`. Implement a function to process the queries efficiently. # Input The input consists of multiple lines: 1. An integer `n` (`1 <= n <= 100000`) - the number of elements in the array. 2. `n` integers - the integers in the array separated by spaces. 3. An integer `q` (`1 <= q <= 100000`) - the number of queries. 4. `q` lines representing the queries. Each query is in one of the two formats: - `1 l r` - Query to calculate the sum of the subarray from index `l` to `r`. - `2 i x` - Query to update the integer at index `i` to `x`. # Output For each sum subarray query (`1 l r`), output the sum of the elements from index `l` to `r` in a new line. The indices `l` and `r` are `0`-based. # Example Input ``` 5 1 2 3 4 5 3 1 0 2 2 1 10 1 0 2 ``` Output ``` 6 14 ``` # Explanation - For the first query, `1 0 2`, the sum of subarray `[1, 2, 3]` is `6`. - For the second query, `2 1 10`, the array is updated to `[1, 10, 3, 4, 5]`. - For the third query, `1 0 2`, the sum of subarray `[1, 10, 3]` is `14`. # Constraints - The input satisfies the constraints mentioned in the problem statement. - It is guaranteed that the update query will be valid and within the array bounds.","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) self.build(array) def build(self, array): for i in range(self.n): self.tree[self.n + i] = array[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, index, value): pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, left, right): left += self.n right += self.n + 1 sum_ = 0 while left < right: if left % 2 == 1: sum_ += self.tree[left] left += 1 if right % 2 == 1: right -= 1 sum_ += self.tree[right] left //= 2 right //= 2 return sum_ def process_queries(n, arr, q, queries): seg_tree = SegmentTree(arr) results = [] for query in queries: if query[0] == 1: _, l, r = query results.append(seg_tree.range_sum(l, r)) elif query[0] == 2: _, i, x = query seg_tree.update(i, x) return results"},{"question":"Vanya has n children, and he wants to distribute s chocolates among them such that the distribution is fair. He decides to arrange the children in a circle and wants to ensure that any pair of adjacent children get as close a number of chocolates as possible. Define unfairness as the maximum difference in the number of chocolates received by any pair of adjacent children. Vanya wants to minimize this unfairness. Your task is to help Vanya determine the minimum possible unfairness when distributing the chocolates. Input The first line contains two integers n and s (2 ≤ n ≤ 10^5, 1 ≤ s ≤ 10^9) — the number of children and the total number of chocolates. Output Print the minimum unfairness Vanya can achieve. Examples Input 5 8 Output 1 Input 4 7 Output 1 Input 3 14 Output 2 Note In the first example, Vanya could distribute the chocolates as follows: 2 2 1 2 1. The maximum difference between adjacent children is 1. In the second example, Vanya could distribute the chocolates as follows: 2 2 1 2. The maximum difference between adjacent children is 1. In the third example, Vanya could distribute the chocolates as follows: 5 5 4. The maximum difference between adjacent children is 1.","solution":"def minimum_unfairness(n, s): Returns the minimum unfairness in distributing s chocolates among n children. base = s // n remainder = s % n if remainder == 0: return 0 else: return 1"},{"question":"John has a garden with n flower pots arranged in a straight line. Each flower pot contains a certain number of flowers. John wants to maximize the beauty of his garden by choosing non-overlapping subarrays of flower pots such that each chosen subarray of flower pots has the maximum possible number of flowers. A subarray of flower pots is defined as a contiguous segment of the array of flower pots. John can choose up to k different subarrays, and he wants to maximize the sum of the maximum number of flowers in each chosen subarray. Given the number of flower pots n, the maximum number of subarrays k, and the number of flowers in each flower pot, determine the maximum sum of the maximum number of flowers in the chosen subarrays. Constraints * 1 leq n leq 10^5 * 1 leq k leq 30 * 1 leq text{number of flowers in each pot} leq 10^9 Input Input is given from Standard Input in the following format: n k F_1 F_2 ... F_n Output Print the maximum possible sum of the maximum number of flowers in the chosen subarrays. Examples Input 6 2 1 2 3 4 5 6 Output 11 Input 10 3 10 9 8 7 6 5 4 3 2 1 Output 27","solution":"def max_flowers(n, k, flowers): Calculates the maximum sum of maximum flowers in each chosen subarray. :param n: int, the number of flower pots :param k: int, the maximum number of non-overlapping subarrays :param flowers: list, number of flowers in each pot :return: int, the maximum sum of the maximum flowers in each chosen subarray # Sort the flowers array in descending order sorted_flowers = sorted(flowers, reverse=True) # We can pick up to k maximum elements from the sorted array max_sum = sum(sorted_flowers[:k]) return max_sum"},{"question":"In an array of positive integers, every element appears twice except for one element which appears exactly once. Your task is to find the single element that appears only once. Write a function that takes an array of integers as input and returns the element that appears only once. **Function Signature:** ```python def find_single_element(arr: List[int]) -> int: ``` **Input:** - An integer `n` (1 ≤ n ≤ 10^6) representing the number of elements in the array. `n` is guaranteed to be an odd number. - An array of `n` positive integers where every element except one appears exactly twice. **Output:** - Return the single integer that appears only once in the array. **Example 1:** ```python Input: n = 5 arr = [5, 3, 4, 3, 5] Output: 4 ``` **Example 2:** ```python Input: n = 7 arr = [7, 9, 3, 9, 7, 9, 3] Output: 9 ``` # Constraints: - You are expected to implement a solution with linear runtime complexity. - The use of extra space should be minimized if possible. # Hint: Consider using bitwise operations to achieve the desired time complexity.","solution":"from typing import List def find_single_element(arr: List[int]) -> int: Finds the single element that appears exactly once in the array where every other element appears twice. This implementation uses bitwise XOR to achieve linear runtime complexity. single_element = 0 for num in arr: single_element ^= num return single_element"},{"question":"A palindrome is a string that reads the same backward as forward. One way to check if a string is a palindrome is to compare it to its reverse. However, for very long strings, creating the reverse can be time-consuming and requires extra space. Johnny wants to write an efficient algorithm to determine if a string is a palindrome without creating its reverse. Write a function that determines if the given string is a palindrome without using extra space for the reverse string. Instead, compare characters from the beginning and the end moving towards the center. Implement the function `is_palindrome(s: str) -> bool` where: - `s` is a string consisting of alphanumeric characters and is non-empty. The function should return `True` if the string is a palindrome and `False` otherwise. # Example ```python print(is_palindrome(\\"racecar\\")) # Output: True print(is_palindrome(\\"A man, a plan, a canal, Panama\\")) # Output: True print(is_palindrome(\\"hello\\")) # Output: False ``` # Constraints - The length of the string will not exceed 100,000 characters. - The function should run in O(n) time complexity where n is the length of the string. - Ignore non-alphanumeric characters and case sensitivity while checking for palindromes.","solution":"def is_palindrome(s: str) -> bool: Determines if the given string is a palindrome. Ignores non-alphanumeric characters and case sensitivity. left, right = 0, len(s) - 1 while left < right: # Move left pointer to the next alphanumeric character while left < right and not s[left].isalnum(): left += 1 # Move right pointer to the previous alphanumeric character while left < right and not s[right].isalnum(): right -= 1 # Compare characters in a case-insensitive manner if s[left].lower() != s[right].lower(): return False left += 1 right -= 1 return True"},{"question":"Determine the optimal order in which a machine should process a set of tasks to minimize the total time taken to complete all tasks. Each task has a processing time and can only be run after its dependencies (other tasks) have been completed. Your task is to find that optimal order, following the given rules and constraints. Input - The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10000) - the number of tasks and the number of dependencies respectively. - The next line contains n integers, the i-th of which is the processing time of the i-th task (1 ≤ processing time ≤ 100). - Each of the next m lines contains two integers u and v, meaning that task u depends on the completion of task v (0 ≤ u, v < n). Output - Output a single integer - the minimum total time to complete all tasks. - If it is not possible to complete all tasks due to circular dependencies, output \\"Impossible\\". You should not print the quotation marks. Example Input 5 4 3 2 4 6 5 1 0 2 0 3 1 4 2 Output 20 Note: - The total time to complete tasks is the sum of the individual task times, considering dependencies might cause some idle times. - The solution involves topological sorting and dynamic programming techniques to address the order of processing.","solution":"from collections import deque, defaultdict def find_minimum_time_to_complete_tasks(n, m, processing_times, dependencies): # Build graph graph = defaultdict(list) in_degree = [0] * n for u, v in dependencies: graph[v].append(u) in_degree[u] += 1 # Topological sort using Kahn\'s algorithm queue = deque() for i in range(n): if in_degree[i] == 0: queue.append(i) topological_order = [] while queue: node = queue.popleft() topological_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(topological_order) != n: return \\"Impossible\\" # Calculate the minimum time to complete all tasks dp = [0] * n for node in topological_order: dp[node] = processing_times[node] for neighbor in graph[node]: dp[neighbor] = max(dp[neighbor], dp[node] + processing_times[neighbor]) return sum(processing_times) # Define a function to parse input and call the main function def main(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) processing_times = list(map(int, lines[1].split())) dependencies = [tuple(map(int, line.split())) for line in lines[2:]] return find_minimum_time_to_complete_tasks(n, m, processing_times, dependencies)"},{"question":"You’ve been tasked with the design of a navigation system for a Mars rover operating on a large grid-based map of Mars. The grid map is composed of cells, each identified by its row and column indices (r, c). The rover has the ability to move to adjacent cells horizontally or vertically. However, certain cells are marked as obstacles and are not traversable. The main objective is to determine the shortest path from the rover\'s starting position to its destination. If there is no valid path, the function should return -1. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) which represent the number of rows and columns of the grid, respectively. - The second line contains two integers sr and sc (1 ≤ sr ≤ n, 1 ≤ sc ≤ m) which represent the starting position of the rover. - The third line contains two integers dr and dc (1 ≤ dr ≤ n, 1 ≤ dc ≤ m) which represent the destination position of the rover. - The next n lines contain m characters each. A character \'O\' represents an open cell, and \'X\' represents an obstacle. Output: - An integer representing the shortest distance from the starting position to the destination or -1 if no valid path exists. Example: Input: 4 4 1 1 4 4 OOOO OXOX OOOX XXOO Output: 6 Explanation: The shortest path from (1, 1) to (4, 4) is 6 steps, which is achieved by moving right→ right→ down→ down→ down→ right. If there\'s no valid path, -1 is returned.","solution":"from collections import deque def shortest_path_mars_rover(n, m, sr, sc, dr, dc, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'O\' and not visited[x][y] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sr - 1, sc - 1, 0)]) visited = [[False] * m for _ in range(n)] visited[sr - 1][sc - 1] = True while queue: x, y, steps = queue.popleft() if (x, y) == (dr - 1, dc - 1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1"},{"question":"Rescue the Robot In a distant future, there are automated robots designed to explore and gather data from various terrains. Unfortunately, one of the robots has malfunctioned during its mission on a gridded terrain. Your task is to design a program that can help this robot reach the target location and then return to its starting position. The terrain is divided into a grid where some cells are free to move, and some contain obstacles. The robot can move up, down, left, or right but cannot move diagonally or through cells with obstacles. The robot receives a series of commands that guide it through the grid to reach specific target cells and eventually return. The commands the robot understands are as follows: - `U` : Move up - `D` : Move down - `L` : Move left - `R` : Move right However, due to some interference, the robot may stop receiving commands and try to continue from its current location. **Input** The input consists of multiple datasets, with the last line \\"0 0\\" indicating the end of input. Each dataset starts with two integers, W (width) and H (height) of the grid. These integers satisfy 3 ≤ W ≤ 64 and 3 ≤ H ≤ 16. The following H lines represent the structure of the terrain with `.` indicating a free cell, `#` indicating an obstacle, `S` indicating the starting position of the robot, and `T` indicating the target position. There can be multiple commands in a single dataset, each command set is followed by an empty line. Example of terrain structure: ``` # #S.T# # ``` Output For each dataset, output one of the following messages on a new line: - \\"The robot can accomplish the mission.\\" if the robot can reach the target and return. - \\"The robot can reach the target but cannot return.\\" if the robot can reach the target but cannot return to the start. - \\"The robot cannot reach the target.\\" if the robot cannot reach the target at all. **Sample Input** ``` 5 3 # #S.T# # 5 3 # #S#T# # 0 0 ``` **Sample Output** ``` The robot can accomplish the mission. The robot cannot reach the target. ```","solution":"def parse_grid(): import sys input = sys.stdin.read data = input().splitlines() index = 0 results = [] while True: width, height = map(int, data[index].split()) if width == 0 and height == 0: break grid = [] for i in range(1, height + 1): grid.append(list(data[index + i])) index += height + 1 results.append(grid) if index < len(data) and data[index] == \\"\\": index += 1 return results def find_position(grid, char): for y, row in enumerate(grid): for x, cell in enumerate(row): if cell == char: return (x, y) return None def valid_moves(grid, pos): x, y = pos moves = [] if x > 0 and grid[y][x - 1] != \'#\': moves.append((x - 1, y)) if x < len(grid[0]) - 1 and grid[y][x + 1] != \'#\': moves.append((x + 1, y)) if y > 0 and grid[y - 1][x] != \'#\': moves.append((x, y - 1)) if y < len(grid) - 1 and grid[y + 1][x] != \'#\': moves.append((x, y + 1)) return moves def bfs(grid, start, end): from collections import deque queue = deque([start]) visited = set([start]) while queue: current = queue.popleft() if current == end: return True for move in valid_moves(grid, current): if move not in visited: visited.add(move) queue.append(move) return False def rescue_robot(messages): grids = parse_grid() results = [] for grid in grids: start = find_position(grid, \'S\') target = find_position(grid, \'T\') if bfs(grid, start, target): grid[start[1]][start[0]] = \'.\' grid[target[1]][target[0]] = \'S\' if bfs(grid, target, start): results.append(\\"The robot can accomplish the mission.\\") else: results.append(\\"The robot can reach the target but cannot return.\\") else: results.append(\\"The robot cannot reach the target.\\") return results"},{"question":"John is a farmer who owns a rectangular field. He decided to divide the field into smaller rectangular patches where he can plant different crops. However, due to the irregular shape of the patches he wants to plant, the field will not be completely filled. John wants to automate the planning of his patches such that he uses as few of them as possible, while covering all specified areas exactly once. Each patch is described by its width and height, and it has a fixed position in the field. Your task is to write a program that determines the minimum number of patches required to cover all the planted areas exactly once. Input The input consists of multiple datasets. Each dataset starts with two integers W and H, representing the width and height of the field, respectively (1 ≤ W, H ≤ 10). The next integer N represents the number of patches (1 ≤ N ≤ 20). Each of the next N lines contains four integers: xi, yi, wi, hi, where (xi, yi) is the top-left corner position (0-based) of the patch and wi and hi are the width and height of the patch (1 ≤ wi, hi ≤ 10). The end of the input is indicated by a line containing two zeros. Output For each dataset, output a single integer representing the minimum number of patches required to cover all the planted areas exactly once. Example Input 5 5 2 0 0 3 2 2 1 3 3 8 8 3 0 0 4 4 4 4 4 4 2 2 4 4 0 0 Output 2 3 Explanation In the first dataset, two patches cover the tested area without overlapping and using exactly the required number of patches. In the second dataset, all three patches need to be used to cover the designated positions exactly once.","solution":"def min_patches_to_cover(W, H, patches): # Create a field to track coverage field = [[0] * W for _ in range(H)] for (xi, yi, wi, hi) in patches: for i in range(yi, yi + hi): for j in range(xi, xi + wi): field[i][j] += 1 min_patches = len(patches) # Utilize boolean flag for patch removal checking def can_remove_patch(patch): rect_state = [[0] * W for _ in range(H)] for i in range(H): for j in range(W): if field[i][j] > 0: rect_state[i][j] = 1 for (xi, yi, wi, hi) in patch: for i in range(yi, yi + hi): for j in range(xi, xi + wi): if rect_state[i][j] == 1: rect_state[i][j] = 0 else: return False for i in range(H): for j in range(W): if rect_state[i][j] == 1: return False return True # Try removing one patch and see if we can cover the area for i in range(len(patches)): remaining_patches = patches[:i] + patches[i + 1:] if can_remove_patch(remaining_patches): min_patches = min(min_patches, len(remaining_patches)) return min_patches def read_input(): import sys input = sys.stdin.read data = input().strip().split(\'n\') datasets = [] i = 0 while i < len(data): W, H = map(int, data[i].strip().split()) if W == 0 and H == 0: break N = int(data[i + 1]) patches = [] for j in range(N): x, y, w, h = map(int, data[i + 2 + j].strip().split()) patches.append((x, y, w, h)) datasets.append((W, H, patches)) i += 2 + N return datasets def main(): datasets = read_input() for W, H, patches in datasets: print(min_patches_to_cover(W, H, patches)) if __name__ == \\"__main__\\": main()"},{"question":"Alice is organizing an archery competition. The competition consists of n archers, each of whom will shoot m arrows at a target. Each archer must shoot all their arrows before the next archer can shoot. The score for each shot can be between 0 and 10 inclusive. Alice wants to rank the archers based on their total scores, highest score to lowest score. In case of a tie in total scores, the archer with the highest single arrow score should be ranked higher. If there is still a tie, the archer with the lower index in the input should be ranked higher. Help Alice to determine the ranking of the archers. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000). The next n lines contain m integers each, representing the scores of each archer\'s shots. Output Print n integers in a single line, representing the order of the archers by their indices (1-based) from the highest rank to the lowest rank. Examples Input 3 4 9 8 10 7 8 10 10 7 10 5 9 8 Output 2 1 3 Input 2 3 7 7 7 8 6 7 Output 2 1 Note In the first example, the total scores are 34, 35, and 32 respectively. The second archer has the highest total score, so they are ranked first. The first archer is ranked second because 34 > 32, and the third archer is ranked last. In the second example, although both archers have the same total score of 21, the second archer has a higher single arrow score (8) compared to the highest single arrow score of the first archer (7), hence the second archer is ranked first.","solution":"def rank_archers(n, m, scores): Rank the archers based on their total scores, highest single arrow score, and order of input. Parameters: n (int): number of archers m (int): number of arrows each archer shoots scores (list of list of int): each sublist contains the scores of an archer\'s shots Returns: list of int: the ranking of the archers by their indices (1-based) # Create a list (score_infos) to store tuples of (total score, highest single score, original index) score_infos = [] for i in range(n): total_score = sum(scores[i]) highest_single_score = max(scores[i]) score_infos.append((total_score, highest_single_score, i+1)) # Sort the score_infos by total score, highest single score, and then by index score_infos.sort(key=lambda x: (-x[0], -x[1], x[2])) # Extract the indices of archers in sorted order rankings = [info[2] for info in score_infos] return rankings"},{"question":"A company is designing a secure login system. Each user can have multiple login attempts, each with a different password. A password is considered strong if it satisfies the following criteria: 1. It has at least 8 characters. 2. It contains at least one lowercase letter. 3. It contains at least one uppercase letter. 4. It contains at least one digit. 5. It contains at least one special character from the set (!@#%^&*()-+). Given a list of login attempts, determine the number of strong and weak passwords. Input The first line contains an integer n (1 ≤ n ≤ 10^5) representing the number of login attempts. Each of the next n lines contains a string representing a password attempt (1 ≤ length of password ≤ 100). Output Print two integers representing the number of strong and weak passwords, respectively. Examples Input 5 Password123! weakpassword Stronger@1 short1! Secure#Password1 Output 3 2 Note In the first example, \\"Password123!\\", \\"Stronger@1\\", and \\"Secure#Password1\\" have at least 8 characters, one lowercase letter, one uppercase letter, one digit, and one special character, thus they are strong passwords. \\"weakpassword\\" and \\"short1!\\" are weak passwords as they do not meet all of the criteria. In the second example, \\"short1!\\" is weak because it only has one special character but doesn\'t meet the length requirement. \\"weakpassword\\" is weak because it doesn\'t contain any digits or special characters.","solution":"import re def is_strong_password(password): if len(password) < 8: return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'d\', password): return False if not re.search(r\'[!@#%^&*()-+]\', password): return False return True def count_strong_weak_passwords(n, passwords): strong_count = 0 weak_count = 0 for password in passwords: if is_strong_password(password): strong_count += 1 else: weak_count += 1 return strong_count, weak_count # Example usage and testing if __name__ == \\"__main__\\": passwords = [\\"Password123!\\", \\"weakpassword\\", \\"Stronger@1\\", \\"short1!\\", \\"Secure#Password1\\"] strong, weak = count_strong_weak_passwords(len(passwords), passwords) print(strong, weak) # Output: 3 2"},{"question":"A popular online game assigns points to players based on their performance in various matches. The leaderboard displays player rankings based on their total points. Recently, the game developers added a new feature where players can earn bonus points through achievements, which will be dynamically updated along with their current points. You are required to update the leaderboard for a set of players given their initial points and a list of bonus points they earn from achievements. Your task is to compute the final points for each player and then produce the leaderboard in descending order of points. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of players. The next n lines contain the name of a player (a string of up to 10 characters) followed by an integer p (0 ≤ p ≤ 1000), the initial points of that player. The next line contains an integer m (0 ≤ m ≤ 1000), the number of achievements. Each of the following m lines contains a player name (from the initial list) followed by an integer b (1 ≤ b ≤ 100), the bonus points that player earned from the achievement. Output Print the names of the players in descending order of their final points, one player per line. If two players have the same final points, print their names in lexicographical order. Examples Input 3 Alice 300 Bob 250 Charlie 150 4 Alice 50 Bob 100 Alice 30 Charlie 70 Output Alice Bob Charlie Input 2 David 500 Eve 500 2 David 50 Eve 50 Output David Eve","solution":"def update_leaderboard(n, player_data, m, achievements): # Create a dictionary to hold player points. players = {name: points for name, points in player_data} # Update points based on achievements. for name, bonus_points in achievements: if name in players: players[name] += bonus_points # Create a sorted list of players based on their points (descending). # In case of a tie, sort by lexicographical order. sorted_players = sorted(players.items(), key=lambda x: (-x[1], x[0])) # Return the sorted list of player names. return [name for name, points in sorted_players] # Example Usage: # n = 3 # player_data = [(\\"Alice\\", 300), (\\"Bob\\", 250), (\\"Charlie\\", 150)] # m = 4 # achievements = [(\\"Alice\\", 50), (\\"Bob\\", 100), (\\"Alice\\", 30), (\\"Charlie\\", 70)] # Expected Output: [\'Alice\', \'Bob\', \'Charlie\'] # print(update_leaderboard(n, player_data, m, achievements))"},{"question":"You are given a list of N integers where the integers are sorted in non-decreasing order. Some integers might appear more than once in the list. Your task is to find the element that appears more than ⌊N/2⌋ times in the list. Input: The first line of the input contains a single integer T, denoting the number of test cases. Next 2*T lines contain the length of the list (N) and then N elements of the list respectively. Output: For each test case, output the integer that appears more than ⌊N/2⌋ times in the list. If no such element exists, output -1. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 10000 -10^6 ≤ A[i] ≤ 10^6, where A[i] denotes the elements of the list. SAMPLE INPUT 3 5 1 2 2 2 3 6 1 1 1 1 2 3 4 1 2 3 4 SAMPLE OUTPUT 2 1 -1 Explanation For test case 1, the integer 2 appears 3 times out of 5, so it appears more than ⌊5/2⌋ = 2 times. For test case 2, the integer 1 appears 4 times out of 6, so it appears more than ⌊6/2⌋ = 3 times. For test case 3, there is no integer that appears more than ⌊4/2⌋ = 2 times.","solution":"def find_majority_element(n, nums): Returns the element that appears more than ⌊N/2⌋ times in the list if exists, otherwise returns -1. count = 0 candidate = None for num in nums: if count == 0: candidate = num count = 1 elif num == candidate: count += 1 else: count -= 1 if nums.count(candidate) > n // 2: return candidate else: return -1 def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[2 * i] nums = test_cases[2 * i + 1] results.append(find_majority_element(n, nums)) return results"},{"question":"A popular social media platform is trying to optimize the visibility of the posts for the users based on friendship connections and engagement. Users of the platform can share posts which can then be liked by their friends. The platform wants to identify the post that has received the maximum number of likes, and if there are multiple such posts, it wants to choose the one which has been shared by the user with the highest number of friends. Each user is uniquely identified by an integer from 1 to n and each post is uniquely identified by an integer from 1 to m. For each post, the user who shared it and the number of likes it received are known. Additionally, for each user, the number of friends they have is also known. Write a program to determine the post ID which meets the criteria. Input The first line of the input contains two integers n (1 ≤ n ≤ 200 000) — the number of users and m (1 ≤ m ≤ 200 000) — the number of posts. The second line contains n integers f1, f2, ..., fn (0 ≤ fi ≤ 10^9), where fi represents the number of friends the i-th user has. The third line contains m integers u1, u2, ..., um (1 ≤ ui ≤ n), where ui is the index of the user who shared the j-th post. The fourth line contains m integers l1, l2, ..., lm (0 ≤ li ≤ 10^9), where li is the number of likes the j-th post received. Output Print the single integer — the ID of the post which has the highest number of likes. If there are multiple such posts, choose the one shared by the user with the highest number of friends. If there are still multiple possible answers, print any of them. Examples Input 5 4 10 20 30 15 25 1 2 3 1 100 200 300 100 Output 3 Input 3 3 5 10 5 1 1 2 100 100 50 Output 1 Note In the first example, the post with ID 3 has the highest number of likes (300), hence it is chosen. In the second example, two posts (ID 1 and ID 2) have the same highest number of likes (100). Between these, post ID 1 is chosen because it was shared by the user with the highest number of friends (user ID 1 has 5 friends and user ID 2 has 10 friends).","solution":"def find_most_liked_post(n, m, friends, users, likes): max_likes = -1 max_friends = -1 best_post_id = -1 for post_id in range(m): user_id = users[post_id] - 1 # Convert to 0-based index like_count = likes[post_id] friend_count = friends[user_id] if like_count > max_likes or (like_count == max_likes and friend_count > max_friends): max_likes = like_count max_friends = friend_count best_post_id = post_id + 1 # Store the post ID (1-based index) return best_post_id"},{"question":"In a faraway kingdom, there is a game played by children called \\"Magic Grid\\". It involves a grid of numbers where each cell can contain a positive integer. The objective is to find the largest sum of integers in any subgrid. A subgrid is defined as any contiguous rectangle of cells from the original grid. You have been tasked with developing a tool that can help find this largest subgrid sum efficiently given the size of the grid and the numbers within it. Input: The first line of the input contains two integers, N and M (1 ≤ N, M ≤ 1000), the number of rows and columns in the grid respectively. The next N lines each contain M integers ( -10^5 ≤ grid[i][j] ≤ 10^5 ), representing the grid. Output: Output a single integer, the largest sum of integers in any subgrid. Example: Input: 3 3 1 -2 3 -4 5 -6 7 -8 9 Output: 9 Explanation: In the given example, the largest subgrid sum is 9, which is achieved by selecting the subgrid containing the single cell with 9. Note: The cells [-2, 3, -6, 5, -8] form subgrids with negative sums as well as some positive sums but they do not exceed 9. The tool should be able to efficiently handle grids up to the largest size permitted by the constraints.","solution":"def largest_subgrid_sum(grid): Function to calculate the largest sum of any subgrid. Uses Kadane\'s Algorithm extended for 2D grids. :param grid: 2D list of integers :return: Integer representing the largest sum # Step 1: Extract dimensions N = len(grid) M = len(grid[0]) # Step 2: Initialize the result max_sum = -float(\'inf\') # Step 3: Implement Kadane\'s Algorithm for a 2D grid for left in range(M): temp = [0] * N for right in range(left, M): for i in range(N): temp[i] += grid[i][right] # Apply 1D Kadane\'s algorithm to temp array current_max, global_max = 0, -float(\'inf\') for val in temp: current_max = max(val, current_max + val) if current_max > global_max: global_max = current_max if global_max > max_sum: max_sum = global_max return max_sum"},{"question":"A software company is launching a new loyalty points system. Each time a customer makes a purchase, they receive a number of points based on their total purchase amount. However, there are specific rules governing how points are accumulated depending on whether the total purchase amount can be represented as the product of two integers greater than 1. The system works as follows: - If the total purchase amount can be represented as the product of two integers greater than 1, then the customer earns points equal to twice the total purchase amount. - If the total purchase amount cannot be represented as the product of two integers greater than 1, then the customer earns points equal to the total purchase amount. Write a program that will compute the total number of loyalty points that a customer will earn based on a list of purchase amounts. Input: - The first line contains an integer n (1 ≤ n ≤ 100), representing the number of purchases. - The next line contains n integers representing the total purchase amounts (1 ≤ amount ≤ 10^4 for each purchase). Output: - Print a single integer representing the total number of loyalty points earned by the customer. Examples: Input: 3 10 7 12 Output: 36 Input: 4 6 13 15 3 Output: 49 Explanation: In the first example: - 10 can be represented as 2 * 5, so it earns 2 * 10 = 20 points. - 7 cannot be represented as the product of two integers greater than 1, so it earns 7 points. - 12 can be represented as 3 * 4, so it earns 2 * 12 = 24 points. The total points are 20 + 7 + 24 = 51. In the second example: - 6 can be represented as 2 * 3, so it earns 2 * 6 = 12 points. - 13 cannot be represented as the product of two integers greater than 1, so it earns 13 points. - 15 can be represented as 3 * 5, so it earns 2 * 15 = 30 points. - 3 cannot be represented as the product of two integers greater than 1, so it earns 3 points. The total points are 12 + 13 + 30 + 3 = 58.","solution":"def is_product_of_two_integers_greater_than_one(n): Determines if the number n can be represented as the product of two integers greater than 1. if n < 4: # The smallest product of integers > 1 is 2 * 2 = 4 return False for i in range(2, int(n**0.5) + 1): if n % i == 0 and n // i > 1: return True return False def calculate_loyalty_points(purchase_amounts): Calculates the total loyalty points for a list of purchase amounts based on the defined rules. total_points = 0 for amount in purchase_amounts: if is_product_of_two_integers_greater_than_one(amount): total_points += 2 * amount else: total_points += amount return total_points"},{"question":"There is a system that deals with an array of integers `a` of length `n` and an integer `k`. The objective is to determine the number of subsequences of the array `a` that have a sum exactly equal to `k`. A subsequence of an array is a sequence derived by deleting some (possibly zero or all) elements from the array without changing the order of the remaining elements. Your task is to count the number of such subsequences having the sum equal to `k`. Since the number of subsequences can be very large, the result should be output modulo (10^9 + 7). # Input - The first line contains two integers `n` and `k` (1 ≤ n, k ≤ 100). - The second line contains `n` integers (a_1, a_2, ..., a_n) (0 ≤ (a_i) ≤ 100). # Output - Output a single integer which is the number of subsequences whose sum is exactly `k`, modulo (10^9 + 7). # Example Input ``` 3 3 1 2 1 ``` Output ``` 2 ``` # Note In the example, the array `a` is `[1, 2, 1]`, and the subsequences with sum equal to `3` are `[1, 2]` and `[2, 1]`. Hence, the total number of such subsequences is `2`. # Explanation: - A dynamic programming approach can be used to solve this problem efficiently, where you maintain a DP table to count the number of ways you can form specific sums using the elements seen so far in the array. This helps in determining the result while keeping the approach within the acceptable time complexity limits.","solution":"MOD = 10**9 + 7 def count_subsequences_with_sum_k(n, k, a): # Initialize the dp array where dp[i][j] will store the number of subsequences # having sum j using first i elements of array. dp = [[0] * (k + 1) for _ in range(n + 1)] # There\'s always one way to have sum 0: by choosing empty subsequence. for i in range(n + 1): dp[i][0] = 1 # Fill the dp array for i in range(1, n + 1): for j in range(k + 1): dp[i][j] = dp[i - 1][j] # exclude the current element if j >= a[i - 1]: # include the current element dp[i][j] = (dp[i][j] + dp[i - 1][j - a[i - 1]]) % MOD return dp[n][k]"},{"question":"Alice and Bob are playing a game on a grid. The grid has dimensions N x N and is initially filled with 0s. Each player takes turns to place stones on the grid. Alice places stones marked with the number 1, and Bob places stones marked with the number 2. The objective of the game is to control the largest possible square sub-grid that contains only stones of their number. A valid move consists of placing a stone on an empty cell. Both players play optimally, meaning they will place stones in such a way as to maximize the size of their largest square sub-grid and minimize the size of their opponent\'s largest square sub-grid. You are given the sequence of moves made by both players. Your task is to determine the size of the largest square sub-grid controlled by Alice after all the moves have been made. Input format: - The first line contains an integer N, the size of the grid. - The second line contains an integer M, the number of moves. - The next M lines each describe a move in the format: X Y P, where X is the row number (0-indexed), Y is the column number (0-indexed), and P is 1 if the move is made by Alice and 2 if the move is made by Bob. Output: - Print a single integer which denotes the size of the largest square sub-grid controlled by Alice (i.e., filled entirely with 1s). Constraints: 1 ≤ N ≤ 100 1 ≤ M ≤ N^2 0 ≤ X, Y < N SAMPLE INPUT 5 6 0 1 1 1 1 2 2 2 1 1 3 2 3 3 1 0 0 1 SAMPLE OUTPUT 2 Explanation After all moves: 0 1 0 0 0 0 2 0 2 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 The largest square sub-grid of 1s (controlled by Alice) has a size of 2x2.","solution":"def largest_square_subgrid(N, M, moves): grid = [[0] * N for _ in range(N)] dp = [[0] * N for _ in range(N)] for x, y, p in moves: grid[x][y] = p max_square_size = 0 for i in range(N): for j in range(N): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_square_size = max(max_square_size, dp[i][j]) return max_square_size # Example usage # print(largest_square_subgrid(5, 6, [(0, 1, 1), (1, 1, 2), (2, 2, 1), (1, 3, 2), (3, 3, 1), (0, 0, 1)]))"},{"question":"A city consists of n buildings aligned in a straight line. Each building has its own height represented by a sequence of integers. The city plans to place two billboards on top of the buildings to advertise their upcoming festival. The advertising team wants to maximize the height where both billboards are placed. However, the billboards must be placed on different buildings to gain maximum visibility. Your task is to determine the two building locations (1-based index) such that the sum of the heights of the buildings where the billboards are placed is the maximum possible. If there are multiple solutions, you can output any of them. Input The first line contains an integer n (2 ≤ n ≤ 105), which represents the number of buildings. The second line contains a sequence of integers h1, h2, ..., hn (1 ≤ hi ≤ 109), where hi represents the height of the i-th building. Output Print two integers representing the 1-based indices of the buildings where the billboards should be placed. Each index should be printed once and the buildings should be different. Examples Input 5 4 8 6 3 2 Output 2 3 Input 3 1 2 3 Output 2 3","solution":"def find_billboard_locations(n, heights): Returns the 1-based indices of two buildings to maximize the height sum where the billboards are placed. :param n: number of buildings :param heights: list, heights of buildings :return: tuple, indices of the two buildings if n < 2: raise ValueError(\\"There must be at least two buildings.\\") # Initialize variables to store the highest and second highest buildings first_max = second_max = float(\'-inf\') first_index = second_index = -1 for i in range(n): if heights[i] > first_max: # Update second max before updating the first max second_max = first_max second_index = first_index # Update first max first_max = heights[i] first_index = i elif heights[i] > second_max: # Update second max second_max = heights[i] second_index = i return (first_index + 1, second_index + 1)"},{"question":"You are given a string containing only lowercase alphabetical characters. Write a program that determines the length of the longest substring with all characters having a frequency of at least a given integer k. For example, given s = \\"aaabb\\" and k = 3, the longest substring is \\"aaa\\", since each character must appear at least 3 times. Input - The input consists of multiple test cases. - Each test case consists of a string s and an integer k, separated by a space. - When `s` is \\"END\\" and `k` is 0, it represents the end of input and should not be processed. Output - For each test case, output the length of the longest substring where every character appears at least k times. Example Input aaabb 3 ababbc 2 helloworld 2 END 0 Output 3 5 2 Explanation for the example: - For the first input \\"aaabb\\" and k=3, the longest substring is \\"aaa\\", so the result is 3. - For the second input \\"ababbc\\" and k=2, the longest substring is \\"ababb\\", so the result is 5. - For the third input \\"helloworld\\" and k=2, the longest substring is \\"ll\\", so the result is 2.","solution":"def longest_substring_with_k_repeats(s, k): def helper(subs, k): if len(subs) == 0 or len(subs) < k: return 0 count_map = {} for char in subs: count_map[char] = count_map.get(char, 0) + 1 for i, char in enumerate(subs): if count_map[char] < k: left_part = helper(subs[:i], k) right_part = helper(subs[i + 1:], k) return max(left_part, right_part) return len(subs) return helper(s, k) def process_input(input_lines): results = [] for line in input_lines: s, k = line.rsplit(\' \', 1) if s == \\"END\\" and int(k) == 0: break k = int(k) results.append(longest_substring_with_k_repeats(s, k)) return results"},{"question":"Zara is working on a pattern recognition project where she needs to identify the longest common prefix from a list of words. Given a list of words, she needs to write a function that finds the longest string which is a prefix of all the words in the list. Zara provides an example to illustrate the problem: Given the words [\\"flower\\", \\"flow\\", \\"flight\\"], the longest common prefix is \\"fl\\". She needs the implemented function to automatically handle and find this prefix efficiently. Here are the input and output specifications for Zara’s requirement: Input: - The first line contains an integer n (1 ≤ n ≤ 10^4), the number of words in the list. - Each of the next n lines contains a word, where each word only consists of lowercase English letters and has a length of at most 200. Output: - Print a single string, the longest common prefix among the given words. If there is no common prefix, print an empty string \\"\\". Examples Input 3 flower flow flight Output fl Input 4 dog racecar car bike Output \\"\\" # No common prefix Note In the first sample, \\"fl\\" is the longest common prefix for all the words in the input list. In the second sample, there is no common prefix among all the words, hence the output is an empty string \\"\\".","solution":"def longest_common_prefix(words): Returns the longest common prefix among the given list of words. if not words: return \\"\\" # Sort words to bring similar prefixes closer words.sort() # Compare characters between the first and last word in the sorted list first_word = words[0] last_word = words[-1] # Find the common prefix between the first and last word prefix = [] for i in range(min(len(first_word), len(last_word))): if first_word[i] == last_word[i]: prefix.append(first_word[i]) else: break return \'\'.join(prefix)"},{"question":"In a video game, players earn points by completing various challenges. The total score is calculated by multiplying the number of challenges completed by the points each challenge is worth. However, the game has additional rules: for every 5 challenges completed, players earn a \'bonus\' point. You need to create a program that calculates the total score given the number of challenges completed and the points each challenge is worth. The program should apply the bonus points correctly. Task Write a program that, given An integer N representing the number of challenges completed, An integer P representing the point value for each challenge, Prints out the total score including bonus points. The problem can be formally stated as: Calculate the total score for a player who has completed N challenges where each challenge is worth P points. Add 1 bonus point to the total score for every 5 challenges completed. Constraints 1 ≤ N ≤ 1000 1 ≤ P ≤ 100 Input Format The input consists of two integers: The first line will contain the integer N. The second line will contain the integer P. Output Format One integer which is the total score after including the bonus points. SAMPLE INPUT 10 3 SAMPLE OUTPUT 32 Explanation For N=10 challenges at 3 points each, the base score is 10 * 3 = 30. The player completed 10 challenges, so they earn 2 bonus points (one for each set of 5 challenges). The total score is 30 + 2 = 32.","solution":"def calculate_total_score(N, P): Returns the total score including bonus points. N: number of challenges completed P: points each challenge is worth base_score = N * P bonus_points = N // 5 total_score = base_score + bonus_points return total_score"},{"question":"String Compression: Write a program that performs basic string compression using the counts of repeated characters. For example, the string \\"aabcccccaaa\\" would become \\"a2blc5a3\\". If the \\"compressed\\" string would not become smaller than the original string, your method should return the original string. You can assume the string has only uppercase and lowercase letters (a-z). Input A single string consisting of uppercase or lowercase characters (a-z). The input string length will not exceed 1000 characters. Output The compressed string or the original string if the compressed version is not shorter. Example Input aabcccccaaa Output a2b1c5a3 Input abcdef Output abcdef","solution":"def compress_string(s): Compresses the string using counts of repeated characters. If the compressed string is not smaller than the original, returns the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) if len(compressed_string) < len(s): return compressed_string else: return s"},{"question":"# Problem Statement You are given an array of integers representing stock prices on consecutive days. You are allowed to perform at most two transactions, where each transaction consists of buying one share of stock and selling one share of stock on two different days. Write a function to maximize your profit. Note that you cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). Given an array `prices` where `prices[i]` is the price of a given stock on the `i-th` day, return the maximum profit you can achieve from these transactions. # Example Input: ```plaintext 8 3 3 5 0 0 3 1 4 ``` Output: ```plaintext 6 ``` Explanation: - Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. - Buy on day 6 (price = 1) and sell on day 7 (price = 4), profit = 4-1 = 3. - Total profit = 3 + 3 = 6. Input: ```plaintext 6 1 2 3 4 5 6 ``` Output: ```plaintext 5 ``` Explanation: - Buy on day 0 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. - No need to perform another transaction, as it does not increase the profit further. # Constraints - `1 <= prices.length <= 10^5` - `0 <= prices[i] <= 10^5`","solution":"def max_profit_with_two_transactions(prices): Returns the maximum profit that can be achieved from at most two transactions. if not prices: return 0 n = len(prices) dp1 = [0] * n dp2 = [0] * n min_price1 = prices[0] for i in range(1, n): min_price1 = min(min_price1, prices[i]) dp1[i] = max(dp1[i - 1], prices[i] - min_price1) max_price2 = prices[-1] for i in range(n - 2, -1, -1): max_price2 = max(max_price2, prices[i]) dp2[i] = max(dp2[i + 1], max_price2 - prices[i]) max_profit = 0 for i in range(n): max_profit = max(max_profit, dp1[i] + dp2[i]) return max_profit"},{"question":"Problem description. Alex is preparing for a math competition that requires him to solve a set of unique challenges. One of the tasks is to find the largest sum of non-adjacent numbers in a sequence. Given an array of integers which may contain both positive and negative numbers, Alex needs to determine the maximum possible sum of non-adjacent numbers. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of elements in the array. The second line contains N space-separated integers representing the array elements. Output For each test case, output a single line containing the maximum sum of non-adjacent numbers. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 -1000000000 ≤ array elements ≤ 1000000000 Example Input: 2 5 3 2 5 10 7 4 3 2 7 10 Output: 15 13 Explanation Example Case 1: The largest sum of non-adjacent numbers can be obtained by summing 3, 5, and 7, for a total of 15. Example Case 2: The largest sum of non-adjacent numbers can be obtained by summing 3 and 10, for a total of 13.","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of non-adjacent numbers. if not nums: return 0 elif len(nums) == 1: return max(0, nums[0]) prev_prev_sum = 0 prev_sum = max(0, nums[0]) for num in nums[1:]: current_sum = max(prev_sum, prev_prev_sum + num) prev_prev_sum = prev_sum prev_sum = current_sum return prev_sum def process_test_cases(test_cases): results = [] for N, nums in test_cases: results.append(max_non_adjacent_sum(nums)) return results"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward. When working with numbers, a palindromic number is a number that remains the same when its digits are reversed. We define a base-10 integer as a Strobogrammatic number if the number remains the same when rotated 180 degrees (turned upside down). For example, \\"69\\", \\"96\\", \\"818\\", and \\"9966\\" are all strobogrammatic numbers when viewed upside down. Write a program that given an integer n (1 <= n <= 1000), returns the next strobogrammatic number greater than n. Input: - A single integer `n` such that 1 <= n <= 1000 Output: - Print the next strobogrammatic number greater than `n` Sample Input: 8 Sample Output: 11 Explanation: The number 8 is not a strobogrammatic number when viewed upside down. The next strobogrammatic number after 8 is 11. Similarly, after 11, the next strobogrammatic number would be 69, followed by 88, then 96, and so on. Example: Input: 97 Output: 101 Explanation: Both 97 and 98 are not strobogrammatic numbers. When 99 is turned upside down, it also does not form a valid number. Hence, the next strobogrammatic number is 101.","solution":"def is_strobogrammatic(num): Checks whether a number is strobogrammatic. strobo_map = {\'0\': \'0\', \'1\': \'1\', \'6\': \'9\', \'8\': \'8\', \'9\': \'6\'} str_num = str(num) rotated_str = \'\'.join(strobo_map.get(ch, \'\') for ch in reversed(str_num)) return str_num == rotated_str def next_strobogrammatic_number(n): Returns the next strobogrammatic number greater than n. next_num = n + 1 while not is_strobogrammatic(next_num): next_num += 1 return next_num"},{"question":"You are given a sequence of n integers where each integer represents the number of people waiting at different bus stops. Your task is to determine if there exists a way to reroute buses so that all the stops have the same number of people waiting. To do this, you can redistribute the people from one bus stop to another. Each redistribution operation consists of moving a single person from one bus stop to another. If it is possible to make all bus stops have the same number of people, return the minimum number of redistribution operations required. If it is not possible, return -1. Input The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of bus stops. - The second line contains n integers, where the i-th integer (0 ≤ a[i] ≤ 10,000) represents the number of people at the i-th bus stop. Output Print a single integer, the minimum number of redistribution operations required to make all bus stops have the same number of people, or -1 if it is not possible. Examples Input 3 5 8 11 Output 6 Input 4 3 3 3 3 Output 0 Input 2 2 5 Output -1","solution":"def min_redistribution_operations(n, people): total_people = sum(people) if total_people % n != 0: return -1 target = total_people // n operations = 0 deficit = 0 for p in people: deficit += p - target operations += abs(deficit) return operations"},{"question":"You are given an array of integers. Your task is to find the element that appears the most number of times in the array. If there are multiple such elements, print the smallest one among them. Constraints * 1 ≤ N ≤ 10^5 (where N is the number of elements in the array) * 1 ≤ Ai ≤ 10^9 (where Ai is the ith element of the array) Input Input is given from Standard Input in the following format: N A1 A2 ... AN Output Print the element that appears the most number of times. If there are multiple such elements, print the smallest one. Examples Input 6 1 2 2 3 3 3 Output 3 Input 5 4 4 5 5 6 Output 4 Input 7 7 8 8 7 7 8 9 Output 7","solution":"def most_frequent_element(arr): from collections import Counter counter = Counter(arr) max_frequency = max(counter.values()) candidates = [key for key, count in counter.items() if count == max_frequency] return min(candidates) def process_input(input_string): lines = input_string.strip().split(\'n\') N = int(lines[0]) A = list(map(int, lines[1].split())) return N, A"},{"question":"A group of friends decided to organize a relay race. Each participant in the team must run a certain distance to cover the entire track. However, the total track length is not evenly divisible by the number of participants. Your task is to determine how the extra distance should be distributed among the participants so that everyone runs as close to an equal distance as possible. Each participant\'s distance should be either floor(total_distance / participants) or (floor(total_distance / participants) + 1). Additionally, the total summed distances run by all participants must equal the total track length. Input The only line contains two integers total_distance and participants (1 ≤ total_distance, participants ≤ 10^5). Output Print a single integer representing the maximum number of participants who will run the extra distance of (floor(total_distance / participants) + 1). Examples Input 25 4 Output 1 Input 100 7 Output 2 Note In the first sample, the total track length to be covered is 25, and there are 4 participants. The base distance for each participant would be floor(25 / 4) = 6. This leaves 1 extra distance to be distributed. Therefore, 1 participant will run 7 units, and the other 3 will run 6 units each. In the second sample, the total track length is 100, and there are 7 participants. The base distance for each participant would be floor(100 / 7) = 14. This leaves an extra 2 units. Therefore, 2 participants will run 15 units, and the remaining 5 participants will run 14 units each.","solution":"def max_extra_distance_runners(total_distance, participants): base_distance = total_distance // participants extra_distance_runners = total_distance % participants return extra_distance_runners"},{"question":"You are given a binary tree where each node contains a positive integer value. You need to find the maximum path sum. The path sum is defined as the sum of the node values on the path between two nodes, and it must include at least one node from the tree. Input A binary tree where each node contains a single positive integer value. The input will be provided as a single line where the values are given in level order traversal format of the binary tree. Null nodes are represented by \'N\'. Output Print a single integer, which is the maximum path sum in the binary tree. Examples Input 10 2 10 20 1 N -25 N N N N 3 4 Output 42 Input 1 2 3 Output 6 Note In the first example, the binary tree is: 10 / 2 10 / 20 1 -25 / 3 4 The maximum path sum is 20 + 2 + 10 + 10 = 42 (from 20 through 2 and 10 to a different 10 node). In the second example, the binary tree is: 1 / 2 3 The maximum path sum is 2 + 1 + 3 = 6.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def string_to_tree_node(input_string): if not input_string or input_string.strip() == \\"\\": return None input_values = input_string.split() if not input_values: return None root = TreeNode(int(input_values[0])) node_queue = [root] index = 1 while index < len(input_values): node = node_queue.pop(0) if input_values[index] != \\"N\\": node.left = TreeNode(int(input_values[index])) node_queue.append(node.left) index += 1 if index >= len(input_values): break if input_values[index] != \\"N\\": node.right = TreeNode(int(input_values[index])) node_queue.append(node.right) index += 1 return root def max_path_sum(root): def dfs(node): nonlocal max_sum if not node: return 0 left_gain = max(dfs(node.left), 0) right_gain = max(dfs(node.right), 0) current_max_path = node.val + left_gain + right_gain max_sum = max(max_sum, current_max_path) return node.val + max(left_gain, right_gain) max_sum = float(\'-inf\') dfs(root) return max_sum"},{"question":"Bob is working on a project that involves processing strings. He wants to implement a function that compresses a given string by removing all the vowels (\'a\', \'e\', \'i\', \'o\', \'u\', both uppercase and lowercase) and counting the number of vowels removed. Write a function that, given a string s, returns a tuple containing the compressed string and the number of vowels removed from the original string. Input - A single string s (1 ≤ length of s ≤ 1000), consisting of only English letters (both uppercase and lowercase). Output - A tuple (output_string, vowel_count) where output_string is the string with all vowels removed, and vowel_count is the number of vowels removed from the original string. Examples ``` Input: \\"Hello World!\\" Output: (\\"Hll Wrld!\\", 3) Input: \\"Programming is fun!\\" Output: (\\"Prgrmmng s fn!\\", 5) Input: \\"aEiOu\\" Output: (\\"\\", 5) ``` Note In the first example, the vowels \'e\', \'o\', and \'o\' are removed, leaving the string \\"Hll Wrld!\\" and the vowel count is 3. In the second example, the vowels \'o\', \'a\', \'i\', \'i\', and \'u\' are removed, leaving the string \\"Prgrmmng s fn!\\" and the vowel count is 5. In the third example, all characters are vowels, so the string becomes empty and the vowel count is 5.","solution":"def compress_string(s): Compress string by removing all the vowels and count the number of vowels removed. Parameters: s (str): Input string containing only English letters. Returns: tuple: A tuple containing the compressed string and the number of vowels removed. vowels = \'aeiouAEIOU\' compressed_string = \'\'.join([char for char in s if char not in vowels]) vowel_count = len(s) - len(compressed_string) return (compressed_string, vowel_count)"},{"question":"In a distant galaxy, there exists a system of interconnected planets. Each planet can be considered as a node and each direct pathway between two planets as an edge in a graph. The inhabitants of this galaxy use teleportation to travel between planets. However, due to the instability of some teleportation paths, a direct pathway might require teleporting through intermediate planets. Given a list of planets and teleportation pathways, your task is to determine the minimum number of jumps required to travel from one planet to another using the least unstable paths. Input The first line contains three integers N, M, and Q (2 ≤ N ≤ 1000, 1 ≤ M ≤ 2000, 1 ≤ Q ≤ 100) — the number of planets, number of direct pathways, and number of queries, respectively. The next M lines each contain three integers u, v, and w (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ w ≤ 1000) representing a direct pathway from planet u to planet v with instability w. The next Q lines each contain two integers a and b (1 ≤ a, b ≤ N) representing a query to find the minimum number of jumps needed to travel from planet a to planet b. Output For each query, output the minimum number of jumps required to travel from planet a to planet b. If there is no valid path, output -1 for that query. Examples Input 5 6 3 1 2 4 1 3 1 2 3 2 2 4 5 3 4 1 4 5 3 1 4 2 5 3 1 Output 2 3 1 Input 4 4 2 1 2 3 2 3 2 3 4 6 4 1 5 1 3 4 2 Output 2 2 Note In the first example, - From planet 1 to planet 4: The least unstable path with the minimum number of jumps is 1 -> 3 -> 4 (2 jumps). - From planet 2 to planet 5: The least unstable path with the minimum number of jumps is 2 -> 3 -> 4 -> 5 (3 jumps). - From planet 3 to planet 1: The least unstable path with the minimum number of jumps is 3 -> 1 (1 jump).","solution":"import heapq from collections import defaultdict def minimum_jumps(N, M, Q, edges, queries): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start, end): pq = [(0, start, 0)] # (instability, current_node, jumps) visited = set() dist = {i: float(\'inf\') for i in range(1, N+1)} dist[start] = 0 while pq: current_instability, node, jumps = heapq.heappop(pq) if node in visited: continue if node == end: return jumps visited.add(node) for neighbor, weight in graph[node]: if neighbor not in visited: new_instability = current_instability + weight if new_instability < dist[neighbor]: dist[neighbor] = new_instability heapq.heappush(pq, (new_instability, neighbor, jumps + 1)) return -1 results = [] for a, b in queries: minimum_jumps = dijkstra(a, b) results.append(minimum_jumps) return results"},{"question":"In data analysis, the ability to detect outliers is crucial. Outliers can indicate errors in data collection, variability in measurement, or actual anomalies that warrant further investigation. You are tasked with writing a function that identifies outliers in a dataset based on the Z-score method. Using the Z-score, an outlier is defined as any point whose Z-score is greater than a certain threshold. The Z-score of a data point x is calculated as: [ Z = frac{x - mu}{sigma} ] Where: - ( x ) is the data point - ( mu ) is the mean of the dataset - ( sigma ) is the standard deviation of the dataset Input The input consists of two lines: 1. The first line contains two integers n (the number of data points) and k (the Z-score threshold). 2. The second line contains n integers representing the data points. Output The output should be a single line containing the indices (zero-based) of the outlier points, separated by spaces. If there are no outliers, print \\"No outliers\\". Constraints 1 ≤ n ≤ 1000 1 ≤ k ≤ 10 -10^6 ≤ data points ≤ 10^6 Example 1 Input: 10 2 1 2 3 4 5 6 7 8 9 100 Output: 9 Example 2 Input: 6 3 1 2 3 4 5 6 Output: No outliers Explanation: In the first example, the mean of the data points is 14.5, and the standard deviation is approximately 28.95. The Z-score of the last data point (100) is approximately 2.95, which is greater than the threshold 2. Therefore, the last data point is an outlier, and its index (9) is printed. In the second example, none of the data points have a Z-score greater than the threshold 3, hence the output is \\"No outliers\\".","solution":"def find_outliers(n, k, data_points): Identifies outliers in the dataset based on the Z-score method. Parameters: n (int): The number of data points. k (int): The Z-score threshold. data_points (list): A list of integers representing the data points. Returns: str: Indices of the outliers separated by spaces, or \\"No outliers\\" if there are none. import math mean = sum(data_points) / n variance = sum((x - mean) ** 2 for x in data_points) / n std_dev = math.sqrt(variance) outliers = [] for i, x in enumerate(data_points): z_score = (x - mean) / std_dev if abs(z_score) > k: outliers.append(i) if outliers: return \\" \\".join(map(str, outliers)) else: return \\"No outliers\\" # Example Usage: # result = find_outliers(10, 2, [1, 2, 3, 4, 5, 6, 7, 8, 9, 100]) # print(result) # Output should be \\"9\\""},{"question":"You are an architect designing a series of houses along a straight street. Each house must be unique in terms of its height to add visual variety to the neighborhood. However, the local council has specific rules regarding the heights of these houses: 1. The difference in height between any two adjacent houses must not exceed a given value K. 2. Each house\'s height must be within a given range [L, H]. Given these constraints, you need to determine whether it is possible to design the houses according to the given requirements. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Input: The first line contains a single integer T, representing the number of test cases. The following T blocks each contain: - The first line has three integers N, K, and R, where N is the number of houses, K is the maximum allowed difference in height between adjacent houses, and R is the difference between L and H. - The second line contains two integers L and H, representing the minimum and maximum possible heights of a house, respectively. Output: For each test case, print \\"YES\\" if it\'s possible to design the houses according to the rules, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ K ≤ 100 0 ≤ R ≤ H-L ≤ 100 1 ≤ L ≤ 10,000 L ≤ H ≤ 10,000 + R SAMPLE INPUT: 2 5 5 10 10 20 3 2 5 5 7 SAMPLE OUTPUT: YES YES Explanation: For the first test case, you can create a sequence of houses with heights 10, 15, 20, 15, 20 which respect the constraints. For the second test case, you can create a sequence of houses with heights 5, 7, 5 which respect the constraints.","solution":"def can_design_houses(T, test_cases): Determine if it\'s possible to design houses according to the given requirements. Parameters: T (int): Number of test cases. test_cases (list): A list of tuples where each tuple represents a test case. Each test case is a tuple containing: - N (int): Number of houses. - K (int): Maximum allowed difference in height between adjacent houses. - R (int): Difference between L and H. - L (int): Minimum possible height of a house. - H (int): Maximum possible height of a house. Returns: list: A list of \\"YES\\" or \\"NO\\" for each test case. results = [] for i in range(T): N, K, R, L, H = test_cases[i] # Check if the difference between L and H exceeds the allowed difference R if (H - L) > R: results.append(\\"NO\\") continue # Check if it\'s possible to construct the sequence of houses possible = True current_height = L for j in range(1, N): next_height_low = max(L, current_height - K) next_height_high = min(H, current_height + K) if next_height_high < L or next_height_low > H: possible = False break current_height = next_height_high if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Mr. Smith is participating in a number game at his local fair. He is given an integer n (n ≥ 1) and tasked with determining the smallest integer k such that k! (k factorial) is greater than or equal to n. If multiple k satisfy this condition, he needs to find the smallest one. Your task is to help Mr. Smith find the correct value of k. Input The input is a single integer n (1 ≤ n ≤ 10^18). Output Print the smallest integer k such that k! ≥ n. Examples Input 6 Output 3 Input 120 Output 5 Input 1 Output 1","solution":"import math def smallest_k(n): Returns the smallest integer k such that k! is greater than or equal to n. k = 1 factorial = 1 while factorial < n: k += 1 factorial *= k return k"},{"question":"You are given an array containing `N` integers which can include both positive and negative numbers. You need to construct a new array such that each element at index `i` of the new array is the product of all the elements in the original array except the one at `i`. For example, if the input array is `[1, 2, 3, 4, 5]`, the expected output would be `[120, 60, 40, 30, 24]`. You must solve this problem without using division, and in `O(N)` time complexity. # Input - The input consists of a single integer `N` (1 <= N <= 10^5), the number of elements in the array. - The next line contains `N` integers representing the elements of the array. Each element lies in the range `[-10^3, 10^3]`. # Output - Print the new array with `N` integers where each integer is the product of all the elements except the current index, separated by a space. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 120 60 40 30 24 ``` # Note - In your solution, you should consider handling large product values that might arise due to both the size of the numbers and the value of `N`.","solution":"def product_except_self(nums): n = len(nums) if n == 0: return [] # Initialize the result array with 1s result = [1] * n # Calculate prefix products prefix = 1 for i in range(n): result[i] = prefix prefix *= nums[i] # Calculate suffix products and multiply with the current result suffix = 1 for i in range(n-1, -1, -1): result[i] *= suffix suffix *= nums[i] return result"},{"question":"Alice loves baking cakes and has decided to experiment with different combinations of ingredients. She has `n` ingredients and wants to try all possible combinations to bake cakes. However, being a very meticulous person, Alice only tries combinations that use exactly `k` different ingredients. Write a function `count_combinations(n, k)` which takes two integers `n` (number of ingredients) and `k` (number of ingredients in each combination) and returns the total number of combinations Alice can try. Note that the combinations must be unique and the order of ingredients in a combination does not matter. Input The function `count_combinations(n, k)` should accept two integers: - `n` (1 ≤ n ≤ 1000) - the total number of ingredients - `k` (1 ≤ k ≤ n) - the number of ingredients in each combination Output The function should return an integer representing the number of unique combinations Alice can try. Example Input: ``` n = 5, k = 3 ``` Output: ``` 10 ``` Explanation: There are 10 ways to pick 3 ingredients from 5, those are: - {1, 2, 3} - {1, 2, 4} - {1, 2, 5} - {1, 3, 4} - {1, 3, 5} - {1, 4, 5} - {2, 3, 4} - {2, 3, 5} - {2, 4, 5} - {3, 4, 5} Note The number of ways to choose `k` elements from `n` elements can be calculated using the binomial coefficient, also known as \\"n choose k\\" and is given by the formula: [ C(n, k) = frac{n!}{k!(n-k)!} ] Where `!` represents the factorial operation.","solution":"import math def count_combinations(n, k): Returns the number of unique combinations of k ingredients from n ingredients. return math.comb(n, k)"},{"question":"Write a function that takes an integer `n` between 5 and 30 inclusive, and returns a list of the first `n` prime numbers in ascending order. Prime numbers are integers greater than 1 that have no divisors other than 1 and themselves. Constraints * 5 leq n leq 30 Input The input is provided from Standard Input in the following format: n Output Print a list of the first `n` prime numbers. Examples Input 5 Output [2, 3, 5, 7, 11] Input 10 Output [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def prime_numbers(n): Returns a list of the first `n` prime numbers in ascending order. primes = [] candidate = 2 while len(primes) < n: if is_prime(candidate): primes.append(candidate) candidate += 1 return primes"},{"question":"You are tasked with writing a function to simulate the processing of a simplified CPU instruction set. The CPU has two registers: A and B, initialized to 0. The instruction set consists of 4 types of operations: 1. `SET {register} {value}`: set the specified register (`A` or `B`) to the provided value (an integer between -100 and 100). 2. `ADD {register1} {register2}`: add the value in `register2` to `register1`, storing the result in `register1`. 3. `SUB {register1} {register2}`: subtract the value in `register2` from `register1`, storing the result in `register1`. 4. `MUL {register1} {register2}`: multiply the value in `register1` by the value in `register2`, storing the result in `register1`. Your function should take a list of strings as input, where each string is an instruction. The function should return a tuple containing the final values in the registers A and B after all instructions have been executed. **Input:** A list of strings, where each string is one of the above instructions. There will be at most 100 instructions. **Output:** A tuple of two integers representing the values in registers A and B after executing all the instructions. **Example:** Input: ``` [\'SET A 5\', \'SET B 3\', \'ADD A B\', \'MUL B A\'] ``` Output: ``` (8, 24) ``` **Note:** In the example, the steps of execution are as follows: 1. `SET A 5`: Register A is set to 5. 2. `SET B 3`: Register B is set to 3. 3. `ADD A B`: Register A is updated to 5 + 3 = 8. 4. `MUL B A`: Register B is updated to 3 * 8 = 24.","solution":"def simulate_cpu(instructions): registers = {\'A\': 0, \'B\': 0} for instruction in instructions: parts = instruction.split() op = parts[0] reg = parts[1] if op == \'SET\': value = int(parts[2]) registers[reg] = value elif op in [\'ADD\', \'SUB\', \'MUL\']: reg2 = parts[2] if op == \'ADD\': registers[reg] += registers[reg2] elif op == \'SUB\': registers[reg] -= registers[reg2] elif op == \'MUL\': registers[reg] *= registers[reg2] return registers[\'A\'], registers[\'B\']"},{"question":"Given an integer array A and an integer K, your task is to determine if there exists a pair of distinct indices (i, j) such that the absolute difference between A[i] and A[j] is exactly K. Write a function `findPairWithDifference` that takes an integer array A and an integer K as inputs and returns \\"Yes\\" if such a pair exists, and \\"No\\" otherwise. Function Signature: ```python def findPairWithDifference(A: List[int], K: int) -> str: ``` Input Format: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers N (the size of the array) and K. - The second line contains N space-separated integers which form the array A. Output Format: - For each test case, print the answer \\"Yes\\" or \\"No\\" (without the quotes) on a new line. Constraints: - 1 ≤ T ≤ 200 - 2 ≤ N ≤ 1000 - 1 ≤ A[i] ≤ 10^5 - 1 ≤ K ≤ 10^5 SAMPLE INPUT 3 6 3 1 5 3 4 2 6 4 2 10 8 12 15 5 1 1 2 3 4 5 SAMPLE OUTPUT Yes Yes Yes","solution":"from typing import List def findPairWithDifference(A: List[int], K: int) -> str: seen_numbers = set() for num in A: if (num + K) in seen_numbers or (num - K) in seen_numbers: return \\"Yes\\" seen_numbers.add(num) return \\"No\\" def main(): import sys input = sys.stdin.read data = input().strip().split() idx = 0 T = int(data[idx]) idx += 1 results = [] for _ in range(T): N, K = map(int, data[idx:idx+2]) idx += 2 A = list(map(int, data[idx:idx+N])) idx += N results.append(findPairWithDifference(A, K)) for result in results: print(result) # Uncomment the below line to run the script in a local environment # if __name__ == \\"__main__\\": # main()"},{"question":"A popular online shop has implemented a new feature for customers to organize and manage their shopping carts. Each cart is represented by a set of items where each item has a unique identifier, and each cart can have any number of items. The shop wants to implement cart merging functionality that allows customers to merge two shopping carts. You\'re given a list of initial shopping carts, and a list of operations. Each operation is one of two types: - `add cart_id item_id`: Add an item with identifier `item_id` to the cart with identifier `cart_id`. If the item is already in the cart, do nothing. - `merge cart_id1 cart_id2`: Merge the content of cart with identifier `cart_id2` into the cart with identifier `cart_id1`, then clear the cart with identifier `cart_id2`. Implement a function that processes these operations and returns the final state of all carts. Input - The first line contains an integer `n` (1 ≤ n ≤ 1000), representing the number of shopping carts. - The next `n` lines contain the initial contents of each cart. Each line starts with a cart identifier (integer between 1 and 1000), followed by a space-separated list of item identifiers (integers between 1 and 10^6) in the cart. - The next line contains an integer `m` (1 ≤ m ≤ 1000), representing the number of operations. - The next `m` lines describe the operations. Each operation is either of the form `add cart_id item_id` or `merge cart_id1 cart_id2`. Output - For each cart in the final state, output the cart\'s identifier followed by the sorted list of item identifiers in that cart. Example Input ``` 3 1 1 2 3 2 4 5 3 6 7 8 5 add 1 4 merge 1 2 add 3 2 merge 1 3 add 2 10 ``` Output ``` 1 1 2 3 4 5 6 7 8 2 10 3 ``` Explanation - Initially, cart 1 contains [1, 2, 3], cart 2 contains [4, 5], and cart 3 contains [6, 7, 8]. - The first operation adds item 4 to cart 1, so cart 1 becomes [1, 2, 3, 4]. - The second operation merges cart 2 into cart 1 and clears cart 2, so cart 1 becomes [1, 2, 3, 4, 5], and cart 2 becomes empty. - The third operation adds item 2 to cart 3, so cart 3 becomes [6, 7, 8, 2]. - The fourth operation merges cart 3 into cart 1 and clears cart 3, so cart 1 becomes [1, 2, 3, 4, 5, 6, 7, 8], and cart 3 becomes empty. - The fifth operation adds item 10 to cart 2, so cart 2 becomes [10]. Notice that output lists the item identifiers in each cart in sorted order.","solution":"def process_carts(n, initial_carts, m, operations): # Initialize carts as a dictionary of sets to handle duplicates carts = {i: set() for i in range(1, n + 1)} # Fill the initial carts data for cart_data in initial_carts: cart_info = list(map(int, cart_data.split())) cart_id = cart_info[0] items = cart_info[1:] carts[cart_id].update(items) # Process each operation for operation in operations: op_parts = operation.split() if op_parts[0] == \\"add\\": cart_id = int(op_parts[1]) item_id = int(op_parts[2]) carts[cart_id].add(item_id) elif op_parts[0] == \\"merge\\": cart_id1 = int(op_parts[1]) cart_id2 = int(op_parts[2]) carts[cart_id1].update(carts[cart_id2]) carts[cart_id2].clear() # Prepare the final output result = [] for i in range(1, n + 1): if carts[i]: result.append(f\\"{i} \\" + \\" \\".join(map(str, sorted(carts[i])))) else: result.append(f\\"{i}\\") return result"},{"question":"You are organizing a marathon and need to distribute water bottles to runners at various stations along the route. Your goal is to ensure that each runner has the opportunity to get water at regular intervals. Given the total number of runners `r` and the total number of water bottles `b` you have, you must distribute the bottles across `n` stations such that: - Each station must have at least one water bottle. - The difference in the number of bottles between any two consecutive stations must not exceed 1. - All water bottles must be distributed. Determine the minimum number of stations needed so that all the above conditions are met. Input The input consists of two integers `r` (1 ≤ r ≤ 10^9) and `b` (1 ≤ b ≤ 10^18), representing the number of runners and the number of water bottles. Output Print the minimum number of stations required to distribute all `b` bottles under the given conditions. Examples Input ``` 100 15 ``` Output ``` 15 ``` Input ``` 50 100 ``` Output ``` 50 ``` Input ``` 200 75 ``` Output ``` 75 ``` Note In the first example, every station gets exactly 1 bottle, which is the same as the number of runners, resulting in 15 stations. In the second example, every runner can get their water bottle from their respective station such that each of the 50 stations has 2 bottles to ensure enough water distribution. In the third example, the 75 water bottles must be distributed as evenly as possible among fewer stations such that every consecutive station difference doesn\'t exceed 1, resulting in exactly 75 stations being the minimum required.","solution":"def min_stations(r, b): Determines the minimum number of stations needed to distribute all water bottles while meeting provided conditions. Parameters: r (int): Number of runners b (int): Number of water bottles Returns: int: Minimum number of stations required. return min(r, b)"},{"question":"Suppose you are given **n** integers. You need to construct a new array based on these integers such that for each index **i** (0 ≤ i < n), the value at index **i** in the new array is equal to the product of all the integers in the original array except the one at **i**. However, you are not allowed to use the division operation in your solution. # Input Format - The first line contains an integer **n** (1 ≤ n ≤ 1000), the length of the array. - The second line contains **n** integers **a1, a2, ..., an** where (1 ≤ ai ≤ 1000) representing the elements of the array. # Output Format - Output **n** integers, where each integer at index **i** is the product of all elements of the input array except the one at **i**. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 120 60 40 30 24 ``` Explanation For the given input array [1, 2, 3, 4, 5]: - For index 0: the product is 2 * 3 * 4 * 5 = 120 - For index 1: the product is 1 * 3 * 4 * 5 = 60 - For index 2: the product is 1 * 2 * 4 * 5 = 40 - For index 3: the product is 1 * 2 * 3 * 5 = 30 - For index 4: the product is 1 * 2 * 3 * 4 = 24 # Note Try to solve the problem with an optimal approach in terms of time and space complexity.","solution":"def construct_product_array(n, arr): Constructs a new array where each element at index i is the product of all the elements in the input array except the one at i. if n == 1: return [1] # Step 1: Creation of prefix and postfix arrays prefix_products = [1] * n postfix_products = [1] * n # Step 2: Fill prefix_products for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * arr[i - 1] # Step 3: Fill postfix_products for i in range(n - 2, -1, -1): postfix_products[i] = postfix_products[i + 1] * arr[i + 1] # Step 4: Construct the result array by multiplying prefix and postfix products result = [1] * n for i in range(n): result[i] = prefix_products[i] * postfix_products[i] return result"},{"question":"A group of friends decided to play a game called \\"Number Run\\". In this game, each player is given a sequence of positive integers. The objective of the game is to determine the maximum product of any contiguous subsequence of the given sequence. A contiguous subsequence is obtained by deleting some (or no) elements from the beginning and some (or no) elements from the end of the sequence. The challenge is to efficiently find this maximum product for each player. Given the game setup, write a program that determines the maximum product of any contiguous subsequence for each sequence provided. Input The first line of input contains an integer t (1 ≤ t ≤ 10), the number of players (sequences). For each player, the input consists of two lines: - The first line is an integer n (1 ≤ n ≤ 1000), the length of the sequence. - The second line consists of n space-separated positive integers, representing the sequence elements. Output For each player, output a single line containing the maximum product of any contiguous subsequence of the corresponding sequence. Examples Input 2 4 1 2 3 4 3 1 3 5 Output 24 15","solution":"def max_product_subsequence(sequences): Given a list of sequences, find the maximum product of any contiguous subsequence for each sequence. Args: sequences: List of lists, where each inner list contains positive integers representing a sequence. Returns: List of integers, where each integer is the maximum product of contiguous subsequence for the corresponding sequence. results = [] for sequence in sequences: n = len(sequence) if n == 0: results.append(0) continue max_prod = float(\'-inf\') min_prod = float(\'inf\') max_so_far = 1 min_so_far = 1 for num in sequence: if num == 0: max_so_far = 1 min_so_far = 1 continue temp = max_so_far * num max_so_far = max(num, max_so_far * num, min_so_far * num) min_so_far = min(num, temp, min_so_far * num) max_prod = max(max_prod, max_so_far) results.append(max_prod) return results def parse_input(input_data): Parses the input data into a list of sequences. Args: input_data: String containing input data Returns: List of sequences input_lines = input_data.strip().split(\\"n\\") t = int(input_lines[0]) sequences = [] index = 1 for _ in range(t): n = int(input_lines[index]) sequence = list(map(int, input_lines[index + 1].split())) sequences.append(sequence) index += 2 return sequences"},{"question":"You are managing a tourist route that visits various landmarks in a city. There are N landmarks in the city, numbered from 1 to N. Some landmarks are directly connected by roads, and tourists can travel between them. However, you want to ensure that tourists can visit all landmarks while minimizing the number of roads they need to cross more than once. You need to optimize the routes such that every landmark can be reached from any other landmark through a series of direct roads, and the total number of direct roads used is minimized. You are given a list of pairs of landmarks connected by direct roads. Your task is to determine the minimum number of direct roads that need to be used to visit all landmarks. Constraints: * 1 leq N leq 100000 * 1 leq M leq 200000 Input Input is given from Standard Input in the following format: N M a_1 b_1 a_2 b_2 : a_M b_M Output Print a single integer representing the minimum number of direct roads needed to ensure all landmarks are connected. Examples Input 5 4 1 2 2 3 3 4 4 5 Output 4 Input 6 6 1 2 2 3 3 4 4 5 5 6 1 6 Output 5","solution":"def minimum_roads(N, M, roads): from collections import defaultdict def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 parent = [] rank = [] for node in range(N): parent.append(node) rank.append(0) edges = [] for u, v in roads: edges.append((u-1, v-1)) edges = list(set(edges)) connected_components = N for u, v in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) connected_components -= 1 return N - connected_components def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) roads = [] for i in range(2, len(data), 2): a = int(data[i]) b = int(data[i+1]) roads.append((a, b)) print(minimum_roads(N, M, roads)) if __name__ == \\"__main__\\": main()"},{"question":"Problem Description A software company is planning to distribute a new software update to N servers. Each server has a different capacity that affects how many clients it can handle concurrently for the installation of the update. The company wants to ensure that the update process is fair, and that no server is overloaded compared to others. Therefore, they decide to limit the number of clients each server can handle to the same maximum. The desired outcome is to determine the maximum number of clients that can be assigned to each server such that at least M servers can handle this maximum number of clients. Input The first line contains two space-separated integers (N and M) - the number of servers and the minimum number of servers that should be able to handle the same maximum number of clients, respectively. The next line contains a space-separated sequence of N integers: c1, c2, ..., cn - where ci denotes the capacity of the i-th server in terms of the maximum number of clients it can handle concurrently. Output Print a single integer representing the maximum number of clients that should be assigned to each server such that at least M servers can handle this number of clients. Constraints 1 ≤ N ≤ 200 1 ≤ M ≤ N Example Input: 5 3 100 150 200 300 400 Output: 200 Input: 6 4 250 500 500 200 1000 300 Output: 300","solution":"def max_clients(N, M, capacities): capacities.sort(reverse=True) return capacities[M-1]"},{"question":"Zara is participating in a coding challenge. She is given a grid with some cells containing enemies. Her task is to bomb certain cells in the grid such that the number of enemies affected is maximized. When a cell is bombed, all enemies in the same row and column are taken out. The grid is represented as an n x m matrix where each cell contains either a 0 (no enemy) or a 1 (enemy). Zara can bomb one cell per row and per column. She needs to determine the maximum number of enemies she can take out by strategically choosing one cell to bomb from each row and each column. Write a function `max_enemy_elimination(grid: List[List[int]]) -> int` that takes a 2D list \'grid\' of size n x m and returns the maximum number of enemies that can be taken out. **Input** The input is a 2D list `grid` of integers where 1 ≤ n, m ≤ 1000. **Output** Return an integer representing the maximum number of enemies eliminated. **Example** Input ```python grid = [ [0, 0, 1, 0], [1, 0, 0, 1], [0, 1, 1, 0], [0, 0, 0, 0] ] ``` Output ```python 4 ``` **Explanation** In this example, Zara can bomb the following cells: - Bomb: `(1, 0)` → Eliminates enemies at (1,0) - Bomb: `(0, 2)` → Eliminates enemies at (0,2) - Bomb: `(2, 1)` → Eliminates enemies at (2,1) - Bomb: `(3, 3)` → No additional enemies, just a strategic move to maintain one bomb per row and column constraint. In total, 4 enemies are eliminated.","solution":"def max_enemy_elimination(grid): Return the maximum number of enemies that can be taken out. if not grid: return 0 n = len(grid) m = len(grid[0]) row_enemy_count = [0] * n col_enemy_count = [0] * m # Calculate the number of enemies in each row and column for i in range(n): for j in range(m): if grid[i][j] == 1: row_enemy_count[i] += 1 col_enemy_count[j] += 1 max_enemies_eliminated = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: # Calculate enemies eliminated if bombing cell (i, j) enemies_eliminated = row_enemy_count[i] + col_enemy_count[j] - 1 else: enemies_eliminated = row_enemy_count[i] + col_enemy_count[j] max_enemies_eliminated = max(max_enemies_eliminated, enemies_eliminated) return max_enemies_eliminated"},{"question":"In the world of elementary mathematics, Bob has recently learned about the concept of triangular numbers. A triangular number or triangle number is a number that can be represented in the form of a triangle with dots. The nth triangular number is the sum of the first n natural numbers: T_n = 1 + 2 + 3 + ... + n. To test his understanding, Bob decides to write a program that checks if a given number is a triangular number. A number x is triangular if there exists some integer n such that x = T_n. To simplify the task, Bob wants you to write a function that takes an integer input and determines whether it is a triangular number or not. Input The input consists of a single integer x (1 ≤ x ≤ 10^9). Output Print \\"YES\\" if x is a triangular number, and \\"NO\\" otherwise. Examples Input 10 Output YES Input 8 Output NO Note The first example is a triangular number because 10 = 1 + 2 + 3 + 4. The second example is not a triangular number because there does not exist an integer n such that 8 = 1 + 2 + ... + n.","solution":"import math def is_triangular_number(x): Determines if the given number x is a triangular number. Args: x (int): The number to be checked. Returns: str: \\"YES\\" if x is a triangular number, \\"NO\\" otherwise. n = (math.sqrt(8 * x + 1) - 1) / 2 if n.is_integer(): return \\"YES\\" else: return \\"NO\\""},{"question":"You are tasked with implementing a reservations system for a restaurant. The system should allow customers to make, cancel, and check the availability of reservations. The restaurant has fixed seating capacity and operates in fixed time slots each day. Each time slot can be reserved for a certain number of people up to the total seating capacity. Your task is to design a reservation system class `RestaurantReservation` with the following methods: - `__init__(self, capacity: int, time_slots: List[str])`: Initializes the reservation system with the total seating capacity of the restaurant and a list of available time slots (strings in \\"HH:MM\\" format). - `reserve(self, time_slot: str, num_people: int) -> bool`: Reserves a table for `num_people` in the specified `time_slot`. If the reservation is successful, return `True`. If the `time_slot` does not exist or there is not enough capacity, return `False`. - `cancel(self, time_slot: str, num_people: int) -> bool`: Cancels a reservation for `num_people` in the specified `time_slot`. If the cancellation is successful, return `True`. If the `time_slot` does not exist or if there are fewer people than `num_people` reserved, return `False`. - `check_availability(self) -> List[Tuple[str, int]]`: Returns a list of tuples where each tuple contains a `time_slot` and the number of remaining seats available for that `time_slot`. Note: - You can assume all input time slots are valid and formatted correctly. - Reservations and cancellations can only be made for available time slots provided during initialization. Example: ```python restaurant = RestaurantReservation(10, [\\"18:00\\", \\"19:30\\", \\"20:00\\"] # Making reservations print(restaurant.reserve(\\"18:00\\", 5)) # Output: True print(restaurant.reserve(\\"19:30\\", 15)) # Output: False (capacity exceeded) print(restaurant.reserve(\\"20:00\\", 10)) # Output: True # Checking availability print(restaurant.check_availability()) # Output: [(\\"18:00\\", 5), (\\"19:30\\", 10), (\\"20:00\\", 0)] # Canceling reservations print(restaurant.cancel(\\"20:00\\", 3)) # Output: True print(restaurant.cancel(\\"18:00\\", 10)) # Output: False (not enough people reserved) # Checking availability again print(restaurant.check_availability()) # Output: [(\\"18:00\\", 5), (\\"19:30\\", 10), (\\"20:00\\", 3)] ``` # Constraints: - The provided time slots will be a subset of the 24-hour day, formatted in \\"HH:MM\\". - The number of time slots will not exceed 100. - The total seating capacity will be a positive integer not exceeding 100.","solution":"from typing import List, Tuple class RestaurantReservation: def __init__(self, capacity: int, time_slots: List[str]): self.capacity = capacity self.time_slots = {time_slot: capacity for time_slot in time_slots} def reserve(self, time_slot: str, num_people: int) -> bool: if time_slot in self.time_slots and self.time_slots[time_slot] >= num_people: self.time_slots[time_slot] -= num_people return True return False def cancel(self, time_slot: str, num_people: int) -> bool: if time_slot in self.time_slots and self.time_slots[time_slot] + num_people <= self.capacity: self.time_slots[time_slot] += num_people return True return False def check_availability(self) -> List[Tuple[str, int]]: return [(time_slot, self.time_slots[time_slot]) for time_slot in self.time_slots]"},{"question":"Example Input 4 1 3 5 7 9 5 10 15 20 25 2 4 6 8 10 3 6 9 12 15 5 1 22 46 3 9 12 6 8 2 4 6 8 5 10 15 20 25 3 6 9 12 Output 5 4 2 3","solution":"def count_unique_elements(num_lists, lists): Returns a list of the number of unique elements in each list from the given lists. Parameters: num_lists (int): Number of lists lists (list): A list of lists, where each inner list contains integers. Returns: list: A list containing the number of unique elements in each corresponding list. unique_counts = [] for lst in lists: unique_counts.append(len(set(lst))) return unique_counts"},{"question":"A park has a rectangular field of dimensions N x M. A gardener wants to fence the entire field with electric wires. The gardener has two types of wires available: W1 and W2. - W1 costs C1 per unit length. - W2 costs C2 per unit length. The gardener can use any combination of the two types of wires to minimize the total cost. The trick is: 1. The perimeter of the field must be fenced. 2. The gardener can use W1 for some portions of the perimeter and W2 for the remaining portions. Input The first line contains the number of test cases T. Each test case consists of a single line containing the integers N, M, C1, and C2. Output For each test case, output the minimum cost required to fence the entire perimeter of the field. Constraints 1 ≤ T ≤ 10 1 ≤ N, M ≤ 1000 1 ≤ C1, C2 ≤ 1000 SAMPLE INPUT 3 1 2 1 2 5 5 10 15 3 4 5 4 SAMPLE OUTPUT 6 120 36 Explanation Test Case # 1: The perimeter of the field is 2*(N+M) = 2*(1+2) = 6 units. Using W1 for the entire perimeter costs 6*1 = 6 units which is already the minimum. Test Case # 2: The perimeter of the field is 2*(N+M) = 2*(5+5) = 20 units. We can use the cheaper wire W1 for the entire perimeter. Thus, the total cost is 20*10 = 200 units. Test Case # 3: The perimeter of the field is 2*(N+M) = 2*(3+4) = 14 units. We need to find the minimum combination of using W1 and W2. By using W1 for 2 units (C1=5) and W2 for the remaining 12 units will give the total cost of 2*5 + 12*4 = 10 + 48 = 58 units. It would be cheaper to use W1 for entire perimeter so it would be 14*5 = 70 units which is indeed the minimum.","solution":"def min_fence_cost(T, test_cases): result = [] for i in range(T): N, M, C1, C2 = test_cases[i] perimeter = 2 * (N + M) # Calculate the cost of using each type of wire exclusively and take the minimum cost = min(perimeter * C1, perimeter * C2) result.append(cost) return result"},{"question":"Write a Python function to detect if a singly linked list has a cycle. # Function Signature: ```python def has_cycle(head: Optional[ListNode]) -> bool: pass ``` # Input: - `head` (Optional[ListNode]): The head node of the linked list. # Output: - `bool`: Returns `True` if there is a cycle in the linked list, `False` otherwise. # Constraints: - The number of nodes in the list is in the range `[0, 10^4]`. - -10^5 <= Node.val <= 10^5 # Example: ```python # Given a linked list: 3 -> 2 -> 0 -> -4, where the tail connects to the second node # is represented as: # head = ListNode(3) # second = ListNode(2) # third = ListNode(0) # fourth = ListNode(-4) # head.next = second # second.next = third # third.next = fourth # fourth.next = second # Call has_cycle(head) should return True class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` # Description: - Create a function that will traverse the linked list and determine if any nodes are revisited. - Utilize Floyd’s Tortoise and Hare algorithm: maintain two pointers, moving one at a normal speed and the other at double speed. - If the two pointers ever meet at the same node, there is a cycle. - If a pointer reaches the end of the linked list, there is no cycle.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def has_cycle(head): Detects if a singly linked list has a cycle. Args: head (ListNode): The head node of the linked list. Returns: bool: Returns True if a cycle is detected, False otherwise. slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Create a program that simulates a basic ticket booking system for a movie theater. The theater has a limited number of seats, and users can reserve seats until the theater is full. Once the theater is full, no more reservations can be made. INPUT: - The first line contains two integers: N (1 ≤ N ≤ 100) - the total number of seats in the theater, and M (1 ≤ M ≤ 1000) - the number of reservation requests. - The next M lines each contain a single string: the name of the person requesting the reservation. OUTPUT: - For each successful reservation request, print \\"<Name>: Seat successfully reserved.\\" - If the theater is full, and no more reservations can be made, print \\"<Name>: No more seats available.\\" for any additional reservation requests. SAMPLE INPUT: 5 7 Alice Bob Charlie David Eve Faythe Grace SAMPLE OUTPUT: Alice: Seat successfully reserved. Bob: Seat successfully reserved. Charlie: Seat successfully reserved. David: Seat successfully reserved. Eve: Seat successfully reserved. Faythe: No more seats available. Grace: No more seats available.","solution":"def ticket_booking(N, M, reservation_requests): Simulates a basic ticket booking system for a movie theater. Parameters: N (int): total number of seats in the theater M (int): number of reservation requests reservation_requests (list of str): list containing the names of the people requesting the reservation Returns: list of str: reservation results indicating successful or failed reservation. results = [] for i, name in enumerate(reservation_requests): if i < N: results.append(f\\"{name}: Seat successfully reserved.\\") else: results.append(f\\"{name}: No more seats available.\\") return results"},{"question":"You are managing a fleet of autonomous delivery drones. Each drone has a limited battery capacity, represented by an integer. These drones can make deliveries to multiple locations, but the time taken for each delivery varies based on distance and environmental factors. The time required for each delivery is also represented by an integer. You need to develop an algorithm to maximize the number of deliveries each drone can make before its battery is depleted. Given the battery capacity and a list of time requirements for each delivery, determine the maximum number of deliveries a drone can make. Input Format The first line of the input will contain an integer T, denoting the number of test cases. Each test case consists of two parts: - The first line contains two space-separated integers: B (the battery capacity of the drone) and n (the number of deliveries). - The second line contains n space-separated integers, representing the time required for each delivery. Output Format For each test case, output a single line containing the maximum number of deliveries the drone can make before its battery is depleted. Constraints For all files: 1 ≤ T ≤ 100 0 ≤ B ≤ 1,000 1 ≤ n ≤ 100 0 ≤ time required for each delivery ≤ 100 SAMPLE INPUT 3 50 5 10 20 30 40 50 100 5 30 10 40 20 50 200 3 100 50 150 SAMPLE OUTPUT 2 4 2 Explanation In the first sample case, the drone with 50 battery capacity can make at most 2 deliveries with times 10 and 20 (10 + 20 ≤ 50). In the second sample case, the drone with 100 battery capacity can make 4 deliveries with times 10, 20, 30, and 40 (10 + 20 + 30 + 40 ≤ 100). In the third sample case, the drone with 200 battery capacity can make at most 2 deliveries with times 50 and 100 (50 + 100 ≤ 200).","solution":"def max_deliveries(B, times): Determine the maximum number of deliveries a drone can make before its battery is depleted. Args: B (int): The battery capacity of the drone. times (list of int): List of delivery times. Returns: int: The maximum number of deliveries the drone can make. times.sort() count = 0 total_time = 0 for time in times: if total_time + time <= B: total_time += time count += 1 else: break return count def solve(T, test_cases): Solve the problem for multiple test cases. Args: T (int): The number of test cases. test_cases (list of tuples): Each tuple contains battery capacity, number of deliveries, and a list of delivery times. Returns: list of int: The list of results for each test case. results = [] for B, n, times in test_cases: results.append(max_deliveries(B, times)) return results"},{"question":"In a certain amusement park, there are a number of rides. Each ride has a specific height requirement for children to be allowed to use it. You are tasked with finding out how many children meet the height requirements for given rides. Input The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) — the number of children and the number of rides, respectively. The second line contains n integers where the i-th integer is the height of the i-th child in centimeters. The third line contains m integers where the j-th integer is the height requirement for the j-th ride in centimeters. Output For each ride, output a single integer on a new line — the number of children whose height meets or exceeds the height requirement for that ride. Example Input 5 3 110 120 130 140 150 125 135 145 Output 3 2 1","solution":"def children_meeting_height_requirements(n, m, children_heights, ride_requirements): Returns a list of integers where each integer represents the number of children whose height meets or exceeds the height requirement for each ride. :param n: Number of children :param m: Number of rides :param children_heights: List of heights of the children :param ride_requirements: List of height requirements for the rides :return: List of integers result = [] for requirement in ride_requirements: count = sum(1 for height in children_heights if height >= requirement) result.append(count) return result"},{"question":"Hannah is a software engineer tasked with analyzing data traffic for a telecommunications company. She has been given a list of records representing different data packets. Each record contains a timestamp, a source IP, a destination IP, and the size of the packet. The goal is to identify and count when there is an unusually high volume of data traffic from a specific source IP to a specific destination IP within any given 1-hour window. A high volume of data traffic between a specific source and destination is defined as more than x packets within an hour. Given this information, your task is to write a function that identifies all source-destination pairs that meet or exceed this threshold and the timestamps when the hour-long high-volume window begins. Input - The first line contains three integers n (1 ≤ n ≤ 100,000), the number of records, and x (1 ≤ x ≤ 1,000), the packet threshold. - The next n lines each contain a record with the following four elements: timestamp (integer in the form of Unix time), source IP (string), destination IP (string), and size of the packet (integer). Output For each detected source-destination pair meeting or exceeding the threshold within any 1-hour window, print the source IP, destination IP, and the earliest timestamp of the 1-hour window in which the threshold is first met or exceeded. If there are multiple windows for the same pair with the same threshold count, only print the earliest window. Example Input 10 3 1609459200 192.168.1.1 8.8.8.8 500 1609459260 192.168.1.1 8.8.8.8 700 1609459320 192.168.1.1 8.8.8.8 450 1609459380 192.168.1.1 8.8.8.8 300 1609459440 192.168.1.2 8.8.4.4 350 1609459500 192.168.1.2 8.8.4.4 500 1609459560 192.168.1.2 8.8.4.4 450 1609459620 192.168.1.3 8.8.8.8 600 1609459680 192.168.1.3 8.8.8.8 700 1609459740 192.168.1.3 8.8.8.8 500 Output 192.168.1.1 8.8.8.8 1609459200 192.168.1.2 8.8.4.4 1609459440","solution":"from collections import defaultdict, deque def find_high_volume_pairs(n, x, records): Identifies all source-destination pairs that meet or exceed the packet threshold within any 1-hour window. Parameters: n (int): Number of records x (int): Packet threshold records (list of tuples): List of records, each containing timestamp, source IP, destination IP, and size of the packet Returns: list of tuples: List of tuples containing source IP, destination IP, and earliest timestamp of the 1-hour window. traffic_data = defaultdict(deque) result = [] found_pairs = set() for record in records: timestamp, src_ip, dst_ip, _ = record key = (src_ip, dst_ip) # Add current record to the right side of the deque traffic_data[key].append(timestamp) while traffic_data[key] and traffic_data[key][0] <= timestamp - 3600: traffic_data[key].popleft() if len(traffic_data[key]) >= x and key not in found_pairs: result.append((src_ip, dst_ip, traffic_data[key][0])) found_pairs.add(key) return sorted(result, key=lambda x: x[2])"},{"question":"\\"Just Right Strings\\" In a far-off kingdom, there is a unique celebration where the lengths of strings are considered as the measure of their beauty. The celebrants are given multiple strings of different lengths, and they need to find the string which is \'Just Right\'. A string is considered \'Just Right\' if its length is closest to a given length L. Given that the desired length is L and there are N strings with varying lengths, find the string whose length has the minimum absolute difference to L. If multiple strings have the same minimum absolute difference, choose the one which appears first in the list. Input - The first line contains the number of test cases, T. - The first line of each test case contains two space-separated integers N and L denoting the number of strings and the desired length, respectively. - The second line of each test case contains N space-separated integers representing the lengths of the strings. Output For each test case, print a single line containing the length of the \'Just Right\' string. Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ L, length of strings ≤ 10000 SAMPLE INPUT 2 5 7 10 1 5 6 8 4 15 20 20 12 12 SAMPLE OUTPUT 6 12 Explanation For the first case, the string with length 6 is the closest to the desired length 7. For the second case, strings with length 12 have the minimum difference to the desired length 15. The first such string has length 12.","solution":"def just_right_strings(T, test_cases): Finds the string length closest to the given desired length L for each test case. Args: T: Number of test cases test_cases: A list of tuples, each containing: - Number of strings N - Desired length L - List of N integers representing string lengths Returns: A list of integers representing the length of the \'Just Right\' string for each test case. results = [] for case in test_cases: N, L, lengths = case closest_length = lengths[0] min_diff = abs(lengths[0] - L) for length in lengths[1:]: diff = abs(length - L) if diff < min_diff: closest_length = length min_diff = diff results.append(closest_length) return results # Example usage if __name__ == \\"__main__\\": T = 2 test_cases = [ (5, 7, [10, 1, 5, 6, 8]), (4, 15, [20, 20, 12, 12]) ] output = just_right_strings(T, test_cases) for result in output: print(result)"},{"question":"Tom is organizing an event and needs to calculate the total cost of various items in different currencies. For simplicity, he decides to use only two types of currencies: Dollars (USD) and Euros (EUR). The exchange rate from Euro to Dollar is fixed at 1 text{ EUR} = 1.1 text{ USD}. Given the prices of items in either Dollars or Euros, write a program to calculate the total cost in Dollars. Input The input is given in the following format. n currency_1 value_1 currency_2 value_2 ... currency_n value_n The first line contains an integer n (1 leq n leq 100), the number of items. Each of the next n lines contains the currency (\\"USD\\" or \\"EUR\\") followed by the price of the item in that currency (a floating-point number). Output Output the total cost in Dollars, rounded to two decimal places. Examples Input 3 USD 50.0 EUR 30.0 USD 20.0 Output 103.00 Input 2 EUR 10.0 USD 15.0 Output 26.00","solution":"def calculate_total_cost(n, items): total_cost_usd = 0.0 for item in items: currency, value = item.split() value = float(value) if currency == \\"USD\\": total_cost_usd += value elif currency == \\"EUR\\": total_cost_usd += value * 1.1 return round(total_cost_usd, 2) # Example usage: n = 3 items = [ \\"USD 50.0\\", \\"EUR 30.0\\", \\"USD 20.0\\" ] print(calculate_total_cost(n, items)) # Should output 103.00"},{"question":"A robotics company is developing an algorithm for efficient pathfinding within a grid-based map. The map consists of n cells arranged in a single row. Each cell may contain either an obstacle or be empty. A robot can start at any cell and can move left or right to an adjacent cell, without stepping into any obstacles. The goal is to determine the length of the longest contiguous sequence of empty cells that the robot can travel through in the grid. Given an array `grid` representing the map, where `1` denotes an obstacle and `0` denotes an empty cell, your task is to write a function that returns the length of the longest path of consecutive empty cells. Input - An integer `n` (1 ≤ n ≤ 10^5) — the number of cells in the row. - An array `grid` of `n` integers where each integer is either `0` (empty) or `1` (obstacle). Output - An integer representing the length of the longest contiguous sequence of empty cells. Examples Input 6 0 1 0 0 1 0 Output 2 Input 5 1 1 1 1 1 Output 0 Input 8 0 0 1 0 0 0 0 1 Output 4 Note In the first example, the longest contiguous sequence of empty cells is of length 2 (`grid[2]` and `grid[3]`). In the second example, there are no empty cells, so the longest sequence is of length 0. In the third example, the longest contiguous sequence of empty cells is of length 4 (`grid[3]` to `grid[6]`).","solution":"def longest_empty_path(n, grid): max_length = 0 current_length = 0 for cell in grid: if cell == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"You have been invited to a puzzle challenge where the goal is to create unique strings by rearranging characters. One type of challenge involves determining if one string can be rearranged to form another by rearranging its characters. Write a function that checks whether it is possible to rearrange the characters of a given string `s1` to form another string `s2`. Both strings consist of lowercase English letters. Function Signature: ```python def can_rearrange(s1: str, s2: str) -> bool: ``` # Input - A single line containing two strings `s1` and `s2` separated by a space. - Both strings contain only lowercase English letters. - The length of each string will be between 1 and 1000 characters. # Output - Print `True` if `s1` can be rearranged to form `s2`, otherwise print `False`. # Examples Example 1: Input: ``` listen silent ``` Output: ``` True ``` Example 2: Input: ``` rat tar ``` Output: ``` True ``` Example 3: Input: ``` hello world ``` Output: ``` False ``` # Explanation 1. In the first example, the characters of \\"listen\\" can be rearranged to form \\"silent\\", so the output is `True`. 2. In the second example, the characters of \\"rat\\" can be rearranged to form \\"tar\\", so the output is also `True`. 3. In the third example, the characters of \\"hello\\" cannot be rearranged to form \\"world\\", so the output is `False`. Consider edge cases where the lengths of `s1` and `s2` are different or where the frequency of characters doesn\'t match. Your function should return `False` in such cases.","solution":"def can_rearrange(s1: str, s2: str) -> bool: Determines whether it is possible to rearrange the characters of s1 to form s2. Parameters: - s1 (str): The string to be rearranged. - s2 (str): The target string. Returns: - bool: True if s1 can be rearranged to form s2, False otherwise. # If lengths are not equal, it\'s not possible to rearrange if len(s1) != len(s2): return False # Create character counts for both strings from collections import Counter return Counter(s1) == Counter(s2)"},{"question":"In a busy warehouse, there are n inventory slots arranged in a line, each containing a certain number of items. Every slot is either filled with items (represented by a positive number) or is empty (represented by 0). The warehouse manager wants to identify the length of the longest contiguous subarray where there are no empty slots (0s). Each second, the manager can either move left or right within the inventory slots to check the status. The operation to identify a subarray or to check a slot\'s content can be performed in constant time. Write a function that determines the length of the longest contiguous subarray of non-empty slots. Input The input consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 10^5) representing the number of inventory slots. The second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4) where each a_i represents the number of items in the i-th slot. Output Print a single integer representing the length of the longest contiguous subarray that contains no empty slots (0s). Examples Input 10 1 3 0 4 5 0 7 8 9 10 Output 4 Input 5 0 4 5 6 0 Output 3 Input 6 0 0 0 0 0 0 Output 0 Input 7 2 3 4 0 2 3 4 Output 3 Note In the first example, the longest subarray without empty slots starts from index 7 and ends at index 10, having a length of 4. In the second example, the longest subarray without empty slots starts from index 2 to index 4, having a length of 3. In the third example, all slots are empty, so the length of the longest subarray is 0. In the fourth example, both subarrays [2, 3, 4] and [2, 3, 4] are the longest with no zeros, having a length of 3.","solution":"def longest_non_empty_subarray_length(n, slots): Returns the length of the longest contiguous subarray with no zeros. max_length = 0 current_length = 0 for item in slots: if item != 0: current_length += 1 else: max_length = max(max_length, current_length) current_length = 0 # Check one last time in case the array ended with non-zero elements max_length = max(max_length, current_length) return max_length"},{"question":"You are given an integer array A of size n. Your task is to count the number of contiguous subarrays such that the sum of the elements in the subarray is divisible by a given integer d. Input The first line of input contains T, denoting the number of test cases. For each test case, the first line contains two integers n and d, denoting the number of elements in the array and the integer d respectively. The second line contains n space-separated integers, denoting the elements of the array A. Output For each test case, print the number of contiguous subarrays whose sum is divisible by d. SAMPLE INPUT 1 5 3 1 2 3 4 1 SAMPLE OUTPUT 4 Explanation In the Sample Test Case, we have an array of 5 elements [1, 2, 3, 4, 1] and we need to find subarrays whose sums are divisible by 3. The subarrays that satisfy this condition are: - [1, 2] - [3] - [3, 4, 1] - [4, 1]","solution":"def count_subarrays_divisible_by_d(n, d, A): Function to count the number of subarrays whose sum is divisible by d. Parameters: - n (int): The number of elements in the array. - d (int): The divisor. - A (list of int): The list of integers. Returns: - int: The count of subarrays whose sum is divisible by d. count = {0: 1} current_sum = 0 result = 0 for num in A: current_sum += num remainder = current_sum % d if remainder in count: result += count[remainder] if remainder not in count: count[remainder] = 0 count[remainder] += 1 return result def process_test_cases(T, test_cases): results = [] for i in range(T): n, d = test_cases[i][0] A = test_cases[i][1] results.append(count_subarrays_divisible_by_d(n, d, A)) return results"},{"question":"Marie loves playing with strings. She has devised a unique game to challenge her friends. Given a string of lowercase English characters, the objective is to find the smallest lexicographical substring that is a palindrome. A string is said to be lexicographically smaller than another string if it appears earlier in a standard dictionary. For example, \\"abc\\" is lexicographically smaller than \\"bca\\", and \\"aabb\\" is lexicographically smaller than \\"ab\\". Write a function to help Marie find the smallest lexicographical palindromic substring. INPUT The first line of input gives T, the number of test cases. T lines follow, each containing a string S of lowercase English letters. OUTPUT For each test case, print the smallest lexicographical palindromic substring in a new line. CONSTRAINTS 1 ≤ T ≤ 50 1 ≤ |S| ≤ 10^5 SAMPLE INPUT 2 abcbade abcda SAMPLE OUTPUT aa a Explanation For the first case, the palindromic substrings are \\"a\\", \\"b\\", \\"c\\", \\"b\\", \\"a\\", \\"d\\", \\"e\\", \\"bcb\\", \\"aba\\". The lexicographically smallest is \\"a\\". For the second case, the palindromic substrings are \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"a\\". The lexicographically smallest is \\"a\\".","solution":"def smallest_palindromic_substring(s): Returns the lexicographically smallest palindromic substring in a given string s. smallest_palindrome = min(char for char in s) return smallest_palindrome def process_test_cases(T, test_cases): Processes multiple test cases to find smallest palindromic substring for each. Parameters: T (int): Number of test cases. test_cases (list of str): List of strings corresponding to each test case. Returns: list of str: List of results for each test case. results = [] for s in test_cases: result = smallest_palindromic_substring(s) results.append(result) return results"},{"question":"In a certain village, there is a festival where a peculiar game is played. The game involves a tree with `n` vertices, where each vertex represents a house. Villagers use the vertices to encode news passing. The news starts at a root house (vertex 1) and spreads to other houses as per certain rules dictated by integers associated with the edges of the tree. These integers represent the delay in minutes for the news to travel from one house to another. Rick and Morty are curious about where the news spreads the fastest. They want to determine the maximum time it takes for the news to reach any house from the root. Given the structure and delays of the tree, determine the time it takes for the news to reach each house from the root house and identify the house (or houses) that receives the news last. # Input Format - The first line contains an integer `n` (2 ≤ n ≤ 1000) — the number of vertices in the tree. - Each of the next `n-1` lines contains three integers `a`, `b`, and `t` (1 ≤ a, b ≤ n, a ≠ b, 1 ≤ t ≤ 1000) — indicating there is an edge between vertices `a` and `b` with a delay of `t` minutes. # Output Format - Print two lines: - The first line should contain `n` integers where the i-th integer represents the time taken for the news to reach the i-th house from the root. - The second line should contain the vertex number(s) that receive the news last, separated by space (if there are multiple vertices, print them in ascending order). # Examples Input ``` 5 1 2 1 1 3 2 2 4 4 3 5 3 ``` Output ``` 0 1 2 5 5 4 5 ``` Input ``` 4 1 2 1 1 3 1 3 4 2 ``` Output ``` 0 1 1 3 4 ``` # Explanation Example 1 - From the root (house 1) to: - House 2 takes: `1` minute - House 3 takes: `2` minutes - House 4 takes: `1 (to 2) + 4` minutes = `5` minutes - House 5 takes: `2 + 3` minutes = `5` minutes Example 2 - From the root (house 1) to: - House 2 takes: `1` minute - House 3 takes: `1` minute - House 4 takes: `1 (to 3) + 2` minutes = `3` minutes","solution":"import heapq import sys from collections import defaultdict def time_to_reach_all_houses(n, edges): graph = defaultdict(list) for a, b, t in edges: graph[a].append((b, t)) graph[b].append((a, t)) dist = {i: sys.maxsize for i in range(1, n + 1)} dist[1] = 0 heap = [(0, 1)] # (time, vertex) while heap: curr_time, node = heapq.heappop(heap) if curr_time > dist[node]: continue for neighbor, travel_time in graph[node]: time = curr_time + travel_time if time < dist[neighbor]: dist[neighbor] = time heapq.heappush(heap, (time, neighbor)) # Find maximum time and the houses that receive news last max_time = max(dist.values()) last_houses = sorted([house for house, time in dist.items() if time == max_time]) return [dist[i] for i in range(1, n + 1)], last_houses def solution(n, edge_list): times, last_houses = time_to_reach_all_houses(n, edge_list) print(\\" \\".join(map(str, times))) print(\\" \\".join(map(str, last_houses)))"},{"question":"There is a store that sells various items, each with a price and a discount. Alice wants to buy some items, but she wants to maximize her savings. She is given a budget and can only purchase items if the total cost, after applying discounts, does not exceed her budget. Help Alice determine the maximum number of items she can buy within her budget. The discount for an item is applied to its original price to give the discounted price. Each item can only be bought once. Input format: The first line of the input will contain an integer N, representing the number of items in the store. The second line will contain N space-separated integers, representing the original prices of the items. The third line will contain N space-separated integers, representing the discount percentages for the items (each as an integer from 0 to 100). The fourth line will contain an integer B, representing Alice\'s budget. Output format: Print one integer - the maximum number of items Alice can buy without exceeding her budget. Constraints: 1 ≤ N ≤ 10^3 1 ≤ Original Price of Item ≤ 10^3 0 ≤ Discount Percentage ≤ 100 1 ≤ B ≤ 10^4 SAMPLE INPUT 5 100 200 150 120 90 20 50 0 30 10 300 SAMPLE OUTPUT 3 Explanation Alice has a budget of 300. The discounted prices of the items are [80, 100, 150, 84, 81]. - She buys item 1 (discounted price: 80). Remaining budget: 220 - She buys item 2 (discounted price: 100). Remaining budget: 120 - She buys item 4 (discounted price: 84). Remaining budget: 36 With this selection, Alice buys a total of three items within her budget. Buying more than three items would exceed her budget.","solution":"def max_items_within_budget(N, prices, discounts, budget): Determines the maximum number of items Alice can buy within her budget. :param N: int: The number of items :param prices: list of int: The original prices of the items :param discounts: list of int: The discount percentages for the items :param budget: int: Alice\'s budget :return: int: Maximum number of items Alice can buy within budget # Calculate the discounted prices discounted_prices = [(prices[i] * (100 - discounts[i]) / 100) for i in range(N)] # Sort the prices in ascending order discounted_prices.sort() # Count how many items fit into the budget item_count = 0 current_budget = budget for price in discounted_prices: if current_budget >= price: current_budget -= price item_count += 1 else: break return item_count"},{"question":"Jane is given an array of n integers. She can perform the following operation any number of times: choose three indices i, j, k (1 ≤ i < j < k ≤ n) and replace the element at index i with the median of the elements at indices i, j, k. The median of three numbers is the number that is the middle number when the numbers are sorted in order. Jane\'s goal is to make the entire array sorted in non-decreasing order using this operation. Write a function to determine if it is possible for Jane to achieve her goal. Input The first line of input contains a single integer n (3 ≤ n ≤ 50) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100), representing the elements of the array. Output Print \\"YES\\" if it is possible to sort the array in non-decreasing order using the operation described. Otherwise, print \\"NO\\". Examples Input 5 3 1 4 1 5 Output YES Input 3 3 2 1 Output NO Explanation In the first case, Jane can use the operation to sort the array as follows: - Choose indices 1, 2, 3: (3, 1, 4) -> Replace the 1st element with the median 3 -> [3, 1, 4, 1, 5] - Choose indices 2, 3, 4: (1, 4, 1) -> Replace the 2nd element with the median 1 -> [3, 1, 4, 1, 5] - Choose indices 1, 2, 3: (3, 1, 4) -> Replace the 1st element with the median 3 -> [3, 1, 4, 1, 5] Eventually, Jane can sort the array. In the second case, it is not possible to sort the array in non-decreasing order using the given operation.","solution":"def can_sort_by_operations(n, arr): Determines if the array can be sorted by the given operations. Parameters: n (int): The number of elements in the array arr (list): The array of integers Returns: str: \\"YES\\" if the array can be sorted, \\"NO\\" otherwise if n == 3: # We can only directly check if sorting is possible for n==3 sorted_arr = sorted(arr) if arr == sorted_arr: return \\"YES\\" temp_arr = [arr[0], arr[1], arr[2]] temp_arr.sort() median = temp_arr[1] if (median == arr[0] or median == arr[2]) and (median == arr[1]): return \\"YES\\" else: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers `arr` of length `n`. You need to perform `q` operations on this array. Each operation can be of two types: 1. Update the value at a specific index in the array. 2. Compute and output the result of a function applied to the subarray from index `l` to `r`. The function `F(l, r)` is defined as the sum of elements in `arr` from index `l` to `r`, inclusive. Write a program to process these operations and produce the required results. Constraints: * 1 ≤ n, q ≤ 100,000 * -10^9 ≤ arr[i], x ≤ 10^9 (1 ≤ i ≤ n) * 1 ≤ p ≤ n * 1 ≤ l ≤ r ≤ n Input: Input is given from Standard Input in the following format: n q arr_1 arr_2 ... arr_n op_1 type_1 ... op_q type_q Each operation is given as follows: * If type_i = 1, it will be given as `1 p x`, meaning update `arr[p]` to `x`. * If type_i = 2, it will be given as `2 l r`, meaning compute the sum of the subarray from index `l` to `r`. Output: For each operation of type 2, print the result on a new line. Examples: Input: 5 3 1 2 3 4 5 2 1 3 1 2 10 2 1 3 Output: 6 14 Input: 6 4 5 -7 3 4 2 8 2 2 5 1 4 -1 2 2 5 2 1 6 Output: 2 -3 10","solution":"class RangeSumQuery: def __init__(self, arr): self.n = len(arr) self.arr = arr[:] self.prefix_sum = self._compute_prefix_sum() def _compute_prefix_sum(self): prefix = [0] * (self.n + 1) for i in range(1, self.n + 1): prefix[i] = prefix[i - 1] + self.arr[i - 1] return prefix def update(self, p, x): diff = x - self.arr[p - 1] self.arr[p - 1] = x for i in range(p, self.n + 1): self.prefix_sum[i] += diff def query(self, l, r): return self.prefix_sum[r] - self.prefix_sum[l - 1] def process_operations(n, q, arr, operations): rsq = RangeSumQuery(arr) results = [] for operation in operations: if operation[0] == 1: rsq.update(operation[1], operation[2]) elif operation[0] == 2: result = rsq.query(operation[1], operation[2]) results.append(result) return results"},{"question":"You have a grid with dimensions n x m. Some cells in this grid contain obstacles, and you can only move on the cells that do not have obstacles. From any given cell (i, j) without an obstacle, you can travel to the cell (i, j + 1), (i + 1, j), (i - 1, j), or (i, j - 1) as long as you stay within the grid boundaries. Given the grid, your task is to determine whether there exists a path from the top-left corner (0,0) to the bottom-right corner (n-1, m-1) and, if there is one, print the minimum number of steps required to reach from (0,0) to (n-1,m-1). A cell is considered an obstacle if it contains a \'1\' and is passable if it contains a \'0\'. Input The first line contains two integers n and m — the dimensions of the grid (2 ≤ n, m ≤ 1000). Each of the next n lines contains m characters, each of which is either \'0\' or \'1\'. \'0\' denotes a passable cell, and \'1\' denotes an obstacle. Output Either print a single integer representing the minimum number of steps required to reach from the starting cell (0,0) to the ending cell (n-1,m-1), or print -1 if there is no path. Examples Input 3 3 0 0 0 1 1 0 0 0 0 Output 4 Input 2 2 0 1 1 0 Output -1 Explanation In the first example, one possible path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) with 4 steps. In the second example, there is no way to get from the top-left to the bottom-right since obstacles block all possible paths.","solution":"from collections import deque def min_steps_to_reach_end(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'0\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 # Helper function to read the grid from a multi-line string input def parse_grid(n, m, grid_str): lines = grid_str.strip().split(\'n\') return [line.split() for line in lines]"},{"question":"Given a matrix of m x n filled with non-negative integers, find the sum of all its elements for each row and column. Write a program to output two lists: 1. Total sum of elements in each row. 2. Total sum of elements in each column. Input: The first line contains two integers, m and n, representing the number of rows and columns, respectively. The next m lines each contain n non-negative integers, representing the elements of the matrix. Output: The first line should contain the sums of each row, separated by spaces. The second line should contain the sums of each column, separated by spaces. Constraints: 1 ≤ m, n ≤ 1000 0 ≤ matrix[i][j] ≤ 10000 SAMPLE INPUT: 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT: 6 15 24 12 15 18 Explanation: The input matrix has 3 rows and 3 columns: 1 2 3 4 5 6 7 8 9 The sum of the rows are: 1 + 2 + 3 = 6 4 + 5 + 6 = 15 7 + 8 + 9 = 24 The sum of the columns are: 1 + 4 + 7 = 12 2 + 5 + 8 = 15 3 + 6 + 9 = 18","solution":"def matrix_sums(matrix): Given a m x n matrix filled with non-negative integers, return two lists: 1. Total sum of elements in each row. 2. Total sum of elements in each column. :param matrix: List[List[int]] - A list of lists representing the matrix :return: Tuple[List[int], List[int]] - Two lists; first list contains row sums, second list contains column sums row_sums = [sum(row) for row in matrix] column_sums = [sum(col) for col in zip(*matrix)] return row_sums, column_sums"},{"question":"Given a list of integers, your task is to determine the smallest positive integer that is missing from the list. Write a function `find_missing_integer` which takes a single list of integers `arr` and returns the smallest positive integer that is not present in the list. # Input - A single list of integers `arr` where the length of the list is between 1 and 1000. The integers in the list can be negative, zero, or positive and in the range of -10^6 to 10^6. # Output - Return the smallest positive integer that does not appear in the list. # Function Signature ```python def find_missing_integer(arr: List[int]) -> int: ``` # Example ```python print(find_missing_integer([3, 4, -1, 1])) # Output: 2 print(find_missing_integer([1, 2, 0])) # Output: 3 print(find_missing_integer([-1, -2, 0])) # Output: 1 print(find_missing_integer([7, 8, 9, 11, 12])) # Output: 1 ``` # Explanation In the first example, the smallest positive integer not in the list `[3, 4, -1, 1]` is 2. In the second example, the smallest positive integer not in the list `[1, 2, 0]` is 3. In the third example, there are no positive integers in the list `[-1, -2, 0]`, so the smallest positive integer missing is 1. In the fourth example, the list `[7, 8, 9, 11, 12]` does not contain small positive integers starting from 1, so the answer is 1.","solution":"def find_missing_integer(arr): Given a list of integers, returns the smallest positive integer that is missing from the list. # Filter out non-positive integers and remove duplicates positives = set(x for x in arr if x > 0) # Check for the smallest missing positive integer in the range starting from 1 i = 1 while i in positives: i += 1 return i"},{"question":"You are given an array of integers and a set of operations to perform on it. Your task is to write a program that can efficiently execute these operations and provide the correct results. Operations can be of two types: 1. 1 l r x — Multiply all integers on the segment from l to r by value x. 2. 2 l r — Calculate the sum of all integers on the segment from l to r. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of elements in the array and the number of operations respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Each of the next q lines describe an operation. Each operation is in one of the following forms: - 1 l r x where 1 ≤ l ≤ r ≤ n and 1 ≤ x ≤ 10^9. - 2 l r where 1 ≤ l ≤ r ≤ n. Output For each query of the second type, print the sum of all integers from the segment l to r. Example Input 5 3 1 2 3 4 5 1 2 4 2 2 1 5 2 2 3 Output 20 10 Note The initial array is [1, 2, 3, 4, 5]. After the first operation (1 2 4 2), the array becomes [1, 4, 6, 8, 5]. The answer to the first query (2 1 5) is 1 + 4 + 6 + 8 + 5 = 24. The answer to the second query (2 2 3) is 4 + 6 = 10.","solution":"def perform_operations(n, arr, operations): Perform the specified operations on the array. Parameters: n -- number of elements in the array arr -- the array of integers operations -- list of operations to perform on the array Returns: A list of results for each sum query (operation type 2). result = [] for operation in operations: if operation[0] == 1: # Perform multiplication operation _, l, r, x = operation for i in range(l - 1, r): arr[i] *= x elif operation[0] == 2: # Perform sum operation _, l, r = operation result.append(sum(arr[l - 1:r])) return result"},{"question":"You are given an undirected graph with `n` nodes, labeled from 1 to `n`. Each edge between the nodes has a non-negative weight. You are to find the shortest path from a given starting node `s` to a given ending node `t`. If there are multiple shortest paths, return the one with the smallest lexicographical order. Input The first line contains two integers, `n` (2 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 5000), the number of nodes and edges, respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n; `u` ≠ `v`; 0 ≤ `w` ≤ 1000), meaning there is an edge between nodes `u` and `v` with weight `w`. The last line contains two integers `s` and `t` (1 ≤ s, t ≤ n; `s` ≠ `t`), the starting and ending nodes. Output If there is no path from `s` to `t`, output `-1`. Otherwise, print the nodes in the shortest path from `s` to `t` in order, space-separated. If there are multiple valid paths, return the lexicographically smallest path. Examples Input 5 6 1 2 10 1 3 3 2 3 1 2 4 2 3 4 7 4 5 2 1 5 Output 1 3 2 4 5 Input 4 2 1 2 5 3 4 7 1 4 Output -1 Note In the first example, the shortest path from node 1 to node 5 is [1 -> 3 -> 2 -> 4 -> 5] with a total weight of 3 + 1 + 2 + 2 = 8. There is no other path with a smaller total weight. In the second example, there is no path from node 1 to node 4.","solution":"import heapq def find_shortest_path(n, m, edges, s, t): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) pq = [(0, s, [s])] visited = {} while pq: curr_dist, node, path = heapq.heappop(pq) if node in visited and (visited[node][0] < curr_dist or (visited[node][0] == curr_dist and visited[node][1] < path)): continue visited[node] = (curr_dist, path) if node == t: return path for neighbor, weight in graph[node]: new_dist = curr_dist + weight new_path = path + [neighbor] if neighbor not in visited or new_dist < visited[neighbor][0] or (new_dist == visited[neighbor][0] and new_path < visited[neighbor][1]): heapq.heappush(pq, (new_dist, neighbor, new_path)) return [-1]"},{"question":"Students are working on an idea to create a simplified social network. They want to develop a small application to suggest mutual friends in a network graph. The network is represented as an undirected graph where each node is a person, and an edge between two nodes indicates that the two people are friends. They need a function to recommend mutual friends for any given person. Write a function `suggest_friends(graph: Dict[int, List[int]], person: int) -> List[int]` that returns a list of recommended friends for a given `person` based on mutual friends. The `graph` is a dictionary where keys represent the person IDs, and the values are lists of friends (person IDs connected to the key person). **Definition of Mutual Friend Recommendation:** - A person `A` is a mutual friend of `person` if there is another person `B` who is a direct friend of both `A` and `person`. - Direct friends of `person` should not be included in the recommendation list. - Do not recommend the `person` itself. **Input:** - `graph` (dict): a dictionary representing the social network. - `person` (int): the person ID for whom we are recommending friends. **Output:** - Return a list of recommended friends sorted in descending order by the number of mutual friends. **Examples:** ```python graph = { 1: [2, 3, 4], 2: [1, 3, 5], 3: [1, 2, 6], 4: [1], 5: [2], 6: [3], 7: [] } # Example call suggest_friends(graph, 1) # Possible Output: # [5, 6] (5 and 6 have one mutual friend each with person 1) ``` ```python # Example call suggest_friends(graph, 2) # Possible Output: # [4, 6] (4 and 6 have one mutual friend each with person 2) ``` # Constraints: 1. The number of nodes (persons) in the graph will be between 1 and 1000. 2. Each list in the `graph` dictionary does not contain duplicates. 3. Recommendations are to be sorted in descending order by the number of mutual friends. 4. If there are multiple people with the same number of mutual friends, they can be in any order in the returned list.","solution":"def suggest_friends(graph, person): Suggests friends for a given person based on mutual friends. mutual_friend_counts = {} person_friends = set(graph.get(person, [])) for friend in person_friends: for mutual_friend in graph.get(friend, []): if mutual_friend != person and mutual_friend not in person_friends: if mutual_friend not in mutual_friend_counts: mutual_friend_counts[mutual_friend] = 0 mutual_friend_counts[mutual_friend] += 1 # Sort mutual friends by the number of mutual friends in descending order recommended_friends = sorted(mutual_friend_counts, key=lambda x: (-mutual_friend_counts[x], x)) return recommended_friends"},{"question":"A university is analyzing the grades of its students for a particular subject. The subject records the grades in each exam for n students. Each student has 3 exams during the term, and the grades are stored in an array where the grades for each student\'s exams appear consecutively. Your task is to determine the average of the grades for each student and find out the number of students whose average grade is greater than or equal to a threshold t. Write a function, `count_students_above_threshold`, that takes in an integer n (the number of students), an integer t (the threshold), and a list of integers grades (the grades of all exams for each student in the order they appear), and returns the number of students whose average is greater than or equal to t. # Input - An integer n (1 ≤ n ≤ 10^5) — the number of students. - An integer t (0 ≤ t ≤ 100) — the grade threshold. - A list of 3n integers (0 ≤ grades[i] ≤ 100) — the grades of the students. # Output - A single integer — the number of students whose average grade is greater than or equal to t. # Example Input ``` 3 65 70 80 90 55 65 45 30 40 50 ``` Output ``` 2 ``` # Note In the example, there are 3 students and the threshold grade is 65: - The average grade of the first student is (70 + 80 + 90) / 3 = 80. - The average grade of the second student is (55 + 65 + 45) / 3 = 55. - The average grade of the third student is (30 + 40 + 50) / 3 = 40. Only the first student\'s average grade is greater than or equal to the threshold of 65. Hence, the output is 2. Your goal is to implement the function `count_students_above_threshold`.","solution":"def count_students_above_threshold(n, t, grades): Returns the number of students whose average grade is greater than or equal to the threshold t. Parameters: - n: int, the number of students - t: int, the grade threshold - grades: list of int, the grades for each student\'s exams in the order they appear (length = 3 * n) Returns: - int, the number of students whose average grade is greater than or equal to t count = 0 for i in range(n): # Calculate the average grade for the current student average_grade = (grades[3*i] + grades[3*i + 1] + grades[3*i + 2]) / 3 if average_grade >= t: count += 1 return count"},{"question":"You are given two strings, `s1` and `s2`. Your task is to determine whether `s1` can be transformed into `s2` by rearranging its characters and possibly changing exactly one character. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Input format: The first line of the input contains an integer t, denoting the number of test cases. Next t lines test cases follow: Each test case consists of two space-separated strings `s1` and `s2`. Output format: For each test case, output \\"YES\\" if `s1` can be transformed into `s2` by rearranging its characters and possibly changing exactly one character, otherwise output \\"NO\\". Constraints: 1 ≤ T ≤ 1000 1 ≤ len(s1), len(s2) ≤ 100 All characters in the strings are lowercase English letters. SAMPLE INPUT 2 abcdef abcfed abcde abcdf SAMPLE OUTPUT YES NO Explanation: Case 1: We can transform \\"abcdef\\" into \\"abcfed\\" by rearranging the characters. No character needs to be changed, so the answer is \\"YES\\". Case 2: We can rearrange \\"abcde\\" to \\"abcde\\", and we need to change \'e\' to \'f\' to get \\"abcdf\\", so the answer is \\"YES\\".","solution":"def can_transform(s1, s2): Determines whether s1 can be transformed into s2 by rearranging its characters and possibly changing exactly one character. if len(s1) != len(s2): return \\"NO\\" if sorted(s1) == sorted(s2): return \\"YES\\" # Create frequency count dictionaries freq_s1 = {} freq_s2 = {} for char in s1: if char in freq_s1: freq_s1[char] += 1 else: freq_s1[char] = 1 for char in s2: if char in freq_s2: freq_s2[char] += 1 else: freq_s2[char] = 1 # Check the number of different characters diff_count = 0 for char in set(s1 + s2): diff_count += abs(freq_s1.get(char, 0) - freq_s2.get(char, 0)) if diff_count <= 2: return \\"YES\\" return \\"NO\\""},{"question":"In the city of Bundler, there are n storage units arranged in a line. Each storage unit can be either empty or filled with a single package. The city’s authorities are looking for an efficient way to detect clusters of packages for optimizing their logistics. A cluster is defined as a consecutive sequence of storage units that are all filled with packages and is surrounded by empty units or the boundaries of the storage facility. Write a program that determines the number of clusters in the storage line. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of storage units. The second line contains an integer array of length n where each element is either 0 or 1. A 1 indicates that the storage unit is filled with a package, and a 0 indicates that the storage unit is empty. Output Output a single integer representing the number of clusters. Examples Input 10 1 0 1 1 0 0 1 1 1 0 Output 3 Input 5 0 0 0 0 0 Output 0 Input 7 1 1 1 0 1 1 0 Output 2 Note In the first example, there are three clusters of packages: the first unit, the second and third units together, and the sixth to eighth units together. In the second example, there are no packages, so there are no clusters. In the third example, there are two clusters: the first three units together, and the fifth and sixth units together.","solution":"def count_clusters(n, storage_units): Determines the number of clusters in the storage line. Args: n (int): The number of storage units. storage_units (list of int): List representing filled (1) or empty (0) storage units. Returns: int: The number of clusters. if n == 0: return 0 cluster_count = 0 in_cluster = False for unit in storage_units: if unit == 1: if not in_cluster: cluster_count += 1 in_cluster = True else: in_cluster = False return cluster_count"},{"question":"A new company has decided to give incentives to its employees based on their annual sales figures using the following rules: - If an employee\'s annual sales are less than 50,000, they receive no incentive. - If sales are between or equal to 50,000 and 100,000, they receive 5% of their total sales as an incentive. - If sales are between or equal to 100,001 and 500,000, they receive 10% of their total sales as an incentive. - If sales exceed 500,000, they receive 15% of their total sales as an incentive. Given a list of annual sales figures for employees, determine the incentive each employee receives. Input format: - The first line of the input contains an integer T, the number of test cases. - Each of the following T lines contains a positive integer representing the annual sales of an employee. Output format: For each test case, output the incentive for the corresponding employee. Constraints: - 1 ≤ T ≤ 10^5 - 0 ≤ annual_sales ≤ 10^7 Sample Input: 5 30000 50000 150000 600000 100000 Sample Output: 0 2500 15000 90000 10000","solution":"def calculate_incentive(annual_sales): Calculate the incentive based on the annual sales. :param annual_sales: int, annual sales of an employee :return: int, incentive amount if annual_sales < 50000: return 0 elif 50000 <= annual_sales <= 100000: return int(0.05 * annual_sales) elif 100001 <= annual_sales <= 500000: return int(0.10 * annual_sales) else: # annual_sales > 500000 return int(0.15 * annual_sales) def main(input_sales): Process a list of annual sales to calculate incentives. :param input_sales: list of int :return: list of int, corresponding incentives return [calculate_incentive(sales) for sales in input_sales]"},{"question":"Alice has recently started her journey into competitive programming and came across a challenge involving sequences. She needs to shift the elements of an integer sequence in a circular manner. The operation of circular shifting involves taking the last element of the array and moving it to the first position, then shifting all other elements one position to the right. For example, given the sequence [1, 2, 3, 4], its circular shift would result in [4, 1, 2, 3]. Alice can apply this operation as many times as she wants. However, she wants to know how the sequence will look after exactly k circular shifts. Write a program that takes the length of the sequence n, the integer k (number of shifts), and the sequence itself, then outputs the sequence after k circular shifts. Input: The first line contains two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ 10^9) — the length of the sequence and the number of shifts respectively. The second line contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9) — the elements of the sequence. Output: Print n integers — the sequence after k circular shifts. Examples Input: 4 1 1 2 3 4 Output: 4 1 2 3 Input: 5 3 10 20 30 40 50 Output: 30 40 50 10 20 Note: In the first example, after one circular shift, the sequence [1, 2, 3, 4] becomes [4, 1, 2, 3]. In the second example, after three circular shifts, the sequence [10, 20, 30, 40, 50] becomes [30, 40, 50, 10, 20].","solution":"def circular_shift(n, k, sequence): Returns the sequence after k circular shifts. k = k % n # Reduce k to the equivalent number of shifts within the array length return sequence[-k:] + sequence[:-k]"},{"question":"In a small town, there is a famous book club, and the members often share books with each other. Each member can choose to share a book with another member. However, they have a unique rule: each book can only be shared a limited number of times before it gets too worn out to be useful anymore. Specifically, a book can be shared up to k times. Given a list of books, each with its initial condition (number of times it can still be shared), and a list of members, determine how many books can be fully utilized, i.e., shared exactly k times amongst the members. More formally, for each book, its remaining shareability is given by b_i — the number of more times it can be shared. Each book starts with a new condition and can be shared k more times before it gets unusable. A member can choose to share a book if it can still be shared at least once. You are given: - n: the number of books. - k: the maximum number of parities each book can be shared. - b: an array of length n where b_i represents the remaining shareability of the ith book. The task is to find the number of books that can be shared exactly k times among the members. Input The first line contains two integers n and k (1 ≤ n ≤ 10^4, 1 ≤ k ≤ 10^4) — the number of books and the maximum number of times a book can be shared. The second line contains n integers b_i (0 ≤ b_i ≤ 10^4) — the remaining shareability of each book. Output Print one integer, the number of books that can be fully utilized by sharing exactly k times. Example Input 5 3 2 3 1 4 3 Output 2 Explanation Out of the 5 books: - The first book can be shared 2 more times but needs 3 shares total: cannot be utilized. - The second book can be shared 3 more times and needs exactly 3 shares: can be utilized. - The third book needs 3 shares but can only be shared 1 more time: cannot be utilized. - The fourth book can be shared 4 more times and needs 3 shares: can be utilized. - The fifth book can be shared 3 times and can be shared 3 more times exactly: can be utilized. Total books that can be fully utilized are 2.","solution":"def count_fully_utilized_books(n, k, b): Given the number of books (n), the maximum number of shares (k) for a book to become unusable, and a list of remaining shareabilities (b), this function returns the number of books that can be fully utilized (shared exactly k times). Parameters: n (int): The number of books. k (int): The maximum number of times a book can be shared. b (list): A list of n integers where b[i] represents the remaining shareability of the ith book. Returns: int: The number of books that can be shared exactly k times. return sum(1 for remaining_shares in b if remaining_shares == k)"},{"question":"In the magical world, a wizard needs to create a special potion that requires exactly m liters of a particular ingredient, which is available in bottles of various capacities. The wizard can use each bottle an infinite number of times. Given the capacities of the bottles and the total amount of potion required, determine the minimum number of bottles needed to measure exactly m liters. If it is not possible to measure exactly m liters using the given bottles, output -1. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10000) where n is the number of different bottle capacities, and m is the total amount of potion required. The second line contains n space-separated integers b1, b2, ... bn (1 ≤ bi ≤ 1000) representing the capacities of the available bottles. Output Output a single integer representing the minimum number of bottles needed to measure exactly m liters, or -1 if it is impossible. Examples Input 3 11 1 3 5 Output 3 Input 2 7 2 6 Output -1 Note In the first example, the minimum number of bottles needed to measure exactly 11 liters is 3 (one 5-liter bottle, one 3-liter bottle, and three 1-liter bottles). In the second example, it is not possible to measure exactly 7 liters with bottles of capacities 2 liters and 6 liters, so the output is -1.","solution":"def min_bottles(n, m, bottles): dp = [float(\'inf\')] * (m + 1) dp[0] = 0 # No bottles needed to measure 0 liters for bottle in bottles: for j in range(bottle, m + 1): dp[j] = min(dp[j], dp[j - bottle] + 1) return dp[m] if dp[m] != float(\'inf\') else -1 def potion_measurement(n, m, bottles): return min_bottles(n, m, bottles)"},{"question":"You are given a string `s` and you need to determine if it is possible to make every character in the string unique by removing the minimum number of characters. Input The input consists of a single string `s` (1 ≤ |s| ≤ 10^5). The string contains lowercase English letters only. Output Output a single integer, the minimum number of characters that need to be removed from the string to ensure that every character in the string is unique. Examples Input `aabbcc` Output `3` Input `abcabc` Output `3` Input `abcdef` Output `0` Explanation In the first example, we can remove one \'a\', one \'b\', and one \'c\' to make the string \\"abc\\", which has all unique characters. In the second example, we can remove one \'a\', one \'b\', and one \'c\', leaving \\"abc\\" as the unique characters string. In the third example, all characters are already unique, so no characters need to be removed. Note For each test case, count the frequency of each character in the string. If the count exceeds 1 for any character, subtract the excess count from the total to calculate the minimum number of characters that need to be removed.","solution":"def min_removals_to_unique(s): Returns the minimum number of characters that need to be removed to ensure all characters in the string \'s\' are unique. from collections import Counter char_count = Counter(s) removals = 0 for count in char_count.values(): if count > 1: removals += (count - 1) return removals"},{"question":"You are given a string s consisting of lowercase Latin letters. The goal is to determine whether you can rearrange the characters of the string to form a palindrome. A palindrome is a string that reads the same forward and backward, such as \\"madam\\" or \\"racecar\\". Input The first line contains an integer q (1 ≤ q ≤ 100) — the number of queries. Each query is represented by one line containing the string s (1 ≤ |s| ≤ 100) consisting of lowercase Latin letters. Output For each query, print \\"YES\\" if it\'s possible to rearrange the characters of the string to form a palindrome, and \\"NO\\" otherwise. Example Input 3 aabb abc aab Output YES NO YES Note In the first query, the string \\"aabb\\" can be rearranged to form \\"abba\\", which is a palindrome. In the second query, the string \\"abc\\" cannot be rearranged to form a palindrome. In the third query, the string \\"aab\\" can be rearranged to form \\"aba\\", which is a palindrome.","solution":"def can_form_palindrome(s): from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_queries(queries): results = [] for s in queries: results.append(can_form_palindrome(s)) return results"},{"question":"A chef is planning to create a multi-course dinner. Each course must be prepared in sequence, and the preparation time for each course depends on the ingredients being used. Different ingredients require different preparations, and the chef needs to have specific ingredients available at the right time to avoid delays. Each ingredient can only be prepared once and can be used in multiple courses. The chef has a list of courses, each defined by the letter of the ingredient it requires. The chef prepares the ingredients in a fixed sequence, but they can choose to start preparing from any position in this sequence. The task is to determine the minimum total preparation time needed to ensure the dinner proceeds smoothly without waiting for any missing ingredients. The chef can start preparing from any point in the sequence, but they cannot go back once they start preparing an ingredient. Here’s how the input and output should be formatted: Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of courses. The second line contains a string s of length m (1 ≤ m ≤ 100) — the ingredient preparation sequence. The third line contains a single string t of length n — the list of courses, where each character represents the ingredient needed for a course. Output Output the minimum total preparation time required. Examples Input 3 XYZXYZABC XYZ Output 3 Input 4 ABCABCABC ABCA Output 4 Note In the first example, the chef can start preparing from the beginning of the sequence, and the sequence XYZ will be prepared in 3 steps. In the second example, the chef can start preparing from the beginning of the sequence, and the sequence ABCA will be prepared in 4 steps.","solution":"def min_preparation_time(n, s, t): m = len(s) min_time = float(\'inf\') # Try starting from each position in the sequence for start in range(m): pos = 0 time = 0 # Track time to prepare the ingredients in the sequence for i in range(start, m): if s[i] == t[pos]: pos += 1 if pos == n: time = i - start + 1 break if pos == n: min_time = min(min_time, time) return min_time"},{"question":"Write a function to find the smallest window in a string that contains all characters of another string. Given two strings `A` and `B`, find the smallest substring of `A` that contains all characters of `B` (including duplicates). If no such window exists, the function should return an empty string. Input - The function will receive two strings `A` and `B`. Output - The function should return the smallest window in `A` that contains all characters of `B`. If multiple such windows exist, return the first one that occurs. - If no such window exists, return an empty string. Constraints - 1 ≤ |A|, |B| ≤ 1000 - Strings `A` and `B` will contain only lower case English letters. Examples ```python A = \\"this is a test string\\" B = \\"tist\\" # Output: \\"t stri\\" A = \\"geeksforgeeks\\" B = \\"ork\\" # Output: \\"ksfor\\" A = \\"a\\" B = \\"aa\\" # Output: \\"\\" ``` Note: In the first example, the substring \\"t stri\\" is the smallest window in the string \\"this is a test string\\" that contains all characters of \\"tist\\".","solution":"def smallest_window(A, B): from collections import Counter if not A or not B: return \\"\\" dictB = Counter(B) required = len(dictB) l, r = 0, 0 formed = 0 window_counts = {} min_len = float(\\"inf\\") min_window = \\"\\" while r < len(A): char = A[r] window_counts[char] = window_counts.get(char, 0) + 1 if char in dictB and window_counts[char] == dictB[char]: formed += 1 while l <= r and formed == required: char = A[l] if r - l + 1 < min_len: min_len = r - l + 1 min_window = A[l:r+1] window_counts[char] -= 1 if char in dictB and window_counts[char] < dictB[char]: formed -= 1 l += 1 r += 1 return min_window"},{"question":"You are given a list of strings. Each string could be a word, an anagram or a completely unrelated string. Two strings are considered anagrams if they can be rearranged to form each other. Your task is to find the number of distinct anagram groups present in the list. Input The first line contains one integer n (1 ≤ n ≤ 10^3) — the number of strings. The following n lines contain one string each, consisting of lowercase Latin letters. The length of each string does not exceed 10^3. Output Output one integer — the number of distinct anagram groups present in the list. Examples Input 6 listen silent enlist google gogole binary Output 3 Input 5 cat act tac there three Output 2 Note In the first test example, there are three distinct anagram groups: {\\"listen\\", \\"silent\\", \\"enlist\\"}, {\\"google\\", \\"gogole\\"}, and {\\"binary\\"}. In the second test example, there are two distinct anagram groups: {\\"cat\\", \\"act\\", \\"tac\\"}, and {\\"there\\", \\"three\\"}.","solution":"def count_anagram_groups(n, strings): Returns the number of distinct anagram groups present in the list. anagram_sets = set() for s in strings: sorted_s = \'\'.join(sorted(s)) anagram_sets.add(sorted_s) return len(anagram_sets)"},{"question":"You are given an integer array nums and an integer k. Your task is to determine whether there is a contiguous subarray whose sum is equal to k. If such a subarray exists, return true; otherwise, return false. Constraints * 1 ≤ nums.length ≤ 10^5 * -10^4 ≤ nums[i] ≤ 10^4 * -10^9 ≤ k ≤ 10^9 Input Input is given from Standard Input in the following format: nums k Output Return true if a contiguous subarray whose sum is equal to k exists, otherwise return false. Examples Input [1, 2, 3, 4, 5] 9 Output True Input [-1, -1, 1, 2, -3] 4 Output False","solution":"def subarray_sum(nums, k): Determine whether there is a contiguous subarray whose sum is equal to k. Returns True if such a subarray exists, otherwise False. current_sum = 0 sum_set = {0} for num in nums: current_sum += num if (current_sum - k) in sum_set: return True sum_set.add(current_sum) return False"},{"question":"David is designing a new type of virtual machine that operates on sequences of instructions. Each instruction can either add or multiply a stored integer by a given constant, or randomly shuffle a sequence of stored integers. He has a list of N initial integers and wants to determine the results after processing M blocks of T instructions. Each block of instructions is applied to the integers in sequence. Your task is to simulate the operations and find the resulting list of integers. Instructions are defined as follows: - \\"ADD k\\": Add the constant k to the number stored in each register. - \\"MUL k\\": Multiply the number stored in each register by the constant k. - \\"SHUF\\": Randomly shuffle the sequence of numbers currently stored in the registers. Each time SHUF is encountered, it shuffles the list differently. Input The first line contains three integers N, M, and T (1 ≤ N, M, T ≤ 100) — the number of initial integers, the number of blocks of instructions, and the number of instructions per block. The second line contains N integers a1, a2, ..., aN (0 ≤ ai ≤ 1000) — the values stored in the registers at the start. Each of the next M * T lines contains a single instruction, either \\"ADD k\\", \\"MUL k\\", or \\"SHUF\\" (1 ≤ k ≤ 1000). Output Print a single line with the N integers representing the final state of the registers after all instructions have been processed. Examples Input 5 2 3 1 2 3 4 5 ADD 2 MUL 3 SHUF ADD 10 MUL 2 SHUF Output 63 12 29 36 27 Input 3 1 2 10 20 30 ADD 5 MUL 4 Output 60 100 140 Input 4 3 2 1 1 1 1 MUL 5 ADD 5 SHUF MUL 2 ADD 3 SHUF Output 23 23 23 23 Note In the first test case, the operations are applied as follows: - After the first block: - ADD 2: Values become 3, 4, 5, 6, 7. - MUL 3: Values become 9, 12, 15, 18, 21. - SHUF: Values get randomly shuffled, could be 18, 9, 21, 15, 12. - After the second block: - ADD 10: Values become 28, 19, 31, 25, 22. - MUL 2: Values become 56, 38, 62, 50, 44. - SHUF: Values get shuffled again leading to the final result as shown in the output.","solution":"from random import shuffle def execute_instructions(n, m, t, init_values, instructions): values = init_values[:] for i in range(m): for j in range(t): instr = instructions[i * t + j] if instr.startswith(\\"ADD\\"): _, k = instr.split() k = int(k) values = [val + k for val in values] elif instr.startswith(\\"MUL\\"): _, k = instr.split() k = int(k) values = [val * k for val in values] elif instr == \\"SHUF\\": shuffle(values) return values # Example usage n = 4 m = 3 t = 2 init_values = [1, 1, 1, 1] instructions = [ \\"MUL 5\\", \\"ADD 5\\", \\"SHUF\\", \\"MUL 2\\", \\"ADD 3\\", \\"SHUF\\" ] print(execute_instructions(n, m, t, init_values, instructions))"},{"question":"A matrix is called a DIAGONAL matrix when all of its off-diagonal elements are zero. Given an NxN matrix A consisting of integers, determine if A is a DIAGONAL matrix. Constraints: * N is between 2 and 100 (inclusive). * Each element in matrix A is an integer between -1000 and 1000 (inclusive). Input: Input is given from Standard Input in the following format: ``` N A_11 A_12 ... A_1N A_21 A_22 ... A_2N ... A_N1 A_N2 ... A_NN ``` Output: If A is a DIAGONAL matrix, print `YES`; otherwise, print `NO`. Examples: Input: ``` 3 1 0 0 0 2 0 0 0 3 ``` Output: ``` YES ``` Input: ``` 4 5 0 0 0 0 3 1 0 0 0 7 0 0 0 0 6 ``` Output: ``` NO ```","solution":"def is_diagonal_matrix(N, matrix): Determine if the NxN matrix is a diagonal matrix. Args: - N: int, size of the matrix - matrix: 2D list of ints, NxN matrix Returns: - \'YES\' if the matrix is a diagonal matrix, \'NO\' otherwise for i in range(N): for j in range(N): if i != j and matrix[i][j] != 0: return \\"NO\\" return \\"YES\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) matrix = [] index = 1 for i in range(N): row = list(map(int, data[index:index + N])) matrix.append(row) index += N print(is_diagonal_matrix(N, matrix))"},{"question":"You are given an array of integers representing the height of students standing in a row. A teacher wants to organize them in such a way that no two students of the same height should be adjacent to each other. If it is not possible to arrange them as desired, report that it is not possible. If the arrangement is possible, output one of the possible sequences. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of students in the row. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) representing the heights of the students. Output If it is not possible to arrange the students as desired, output \\"NO\\". Otherwise, output one possible sequence with the desired property. Examples Input 5 1 1 2 2 3 Output 1 2 1 2 3 Input 3 1 1 1 Output NO Input 6 4 4 4 5 5 6 Output 4 5 4 5 4 6 Note In the first example, there is a possible arrangement where no two students of the same height are adjacent. In the second example, it is impossible to arrange the students as all of them have the same height. In the third example, a possible arrangement is shown. There are other possible valid arrangements.","solution":"from collections import Counter def arrange_students(n, heights): counter = Counter(heights) max_height = max(counter.values()) if max_height > (n + 1) // 2: return \\"NO\\" sorted_heights = sorted(counter.items(), key=lambda x: -x[1]) result = [0] * n index = 0 for height, count in sorted_heights: for _ in range(count): result[index] = height index += 2 if index >= n: index = 1 return result"},{"question":"Jenna is developing a new game where players control a robot in a two-dimensional grid. The robot can move up, down, left, or right, but it cannot move diagonally. The grid has dimensions n x m, with (1,1) being the top-left corner and (n,m) being the bottom-right corner. Some cells in the grid contain obstacles, which the robot cannot pass through. The objective is to find the shortest path from the start position (1,1) to the end position (n,m). If there is no valid path, the output should reflect that. Write a program to help Jenna determine the shortest path for the robot. Input The first line contains three integers, n, m (1 ≤ n, m ≤ 1000) and k (0 ≤ k ≤ n*m), the dimensions of the grid and the number of obstacles respectively. Each of the next k lines contains two integers, r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m), the coordinates of an obstacle cell. Output If there is a valid path from (1,1) to (n,m), print the minimum number of moves required to reach the end position. If no valid path exists, print -1. Examples Input 5 5 3 2 2 3 3 4 4 Output 8 Input 3 3 3 1 2 2 1 3 3 Output -1","solution":"from collections import deque def shortest_path(n, m, k, obstacles): Finds the shortest path from (1,1) to (n,m) in a grid with obstacles. :param n: int - number of rows :param m: int - number of columns :param k: int - number of obstacles :param obstacles: list of tuples - list of obstacle positions :return: int - minimum number of moves required or -1 if no valid path exists # Directions Up, Down, Left, Right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Convert obstacle list to a set for O(1) lookups obstacle_set = set(obstacles) # If the start or end positions are blocked if (1, 1) in obstacle_set or (n, m) in obstacle_set: return -1 # BFS Initialization queue = deque([((1, 1), 0)]) # ((row, col), distance) visited = set((1, 1)) while queue: (current_row, current_col), distance = queue.popleft() # Check if we have reached the bottom-right corner if (current_row, current_col) == (n, m): return distance # Explore all 4 possible directions for dr, dc in directions: new_row, new_col = current_row + dr, current_col + dc if 1 <= new_row <= n and 1 <= new_col <= m and (new_row, new_col) not in visited and (new_row, new_col) not in obstacle_set: visited.add((new_row, new_col)) queue.append(((new_row, new_col), distance + 1)) # If no path found return -1"},{"question":"Gena loves playing with dominoes. A standard domino is a 2x1 or 1x2 rectangular tile, and Gena has a set of these tiles. She wants to arrange them in a rectangular grid of size M x N. However, she mentioned following a peculiar rule: no tile should overlap another, and no tile should be outside the grid. Given the grid dimensions M and N, determine the minimum number of dominoes needed to completely cover the grid without leaving any empty cells. Note that it may not always be possible to cover the grid perfectly. Input: The first line of the input consists of two integers M and N representing the dimensions of the grid. Output: Output a single integer representing the minimum number of dominoes needed to cover the grid, or -1 if it is impossible to cover the grid completely with the dominoes. Constraints: 1 ≤ M, N ≤ 1000 Example: Input: 3 3 Output: -1 Input: 2 4 Output: 4","solution":"def minimum_dominoes(M, N): Determine the minimum number of dominoes needed to cover an M x N grid completely. Parameters: M (int): Number of rows of the grid N (int): Number of columns of the grid Returns: int: Minimum number of dominoes needed, or -1 if it\'s impossible to cover the grid completely # A standard domino covers 2 squares. if (M * N) % 2 != 0: return -1 else: return (M * N) // 2"},{"question":"You are given an array of integers and an integer target. Your task is to determine if there are two distinct indices i and j in the array such that nums[i] + nums[j] == target. Your function should return \\"YES\\" (without quotes) if such a pair exists, and \\"NO\\" (without quotes) otherwise. Input Format - The first line contains an integer n, the number of elements in the array. - The second line contains n space-separated integers representing the array elements. - The third line contains an integer target. Output Format - Print \\"YES\\" if there are two distinct indices i and j such that nums[i] + nums[j] == target. Otherwise, print \\"NO\\". Example Input 5 2 7 11 15 1 8 Output YES Input 4 1 2 3 4 8 Output NO Input 6 1 -2 3 10 -4 2 6 Output YES Constraints - The array can contain both positive and negative integers. - The array will have at most 10^5 elements. - Each array element will be between -10^9 and 10^9. - The target value will be between -10^9 and 10^9.","solution":"def has_pair_with_sum(nums, target): Determine if there are two distinct indices i and j in the array such that nums[i] + nums[j] == target. Args: nums (list): List of integers. target (int): Target sum. Returns: str: \\"YES\\" if such a pair exists, \\"NO\\" otherwise. seen = set() for num in nums: complement = target - num if complement in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"A large company is organizing an employee event where employees can form teams to participate in a series of challenges. They have N employees and each employee has a unique skill level represented by an integer. Each team must have exactly K employees, and the team’s performance in the challenge is determined by the sum of the skill levels of its members. Your task is to find the maximum possible performance across all teams that can be formed with exactly K employees. Input: - The first line contains two space-separated integers N and K, where N is the number of employees and K is the size of each team (1 ≤ K ≤ N ≤ 100000). - The second line contains N space-separated integers representing the skill levels of the employees. Output: - Print a single integer, which is the maximum possible performance of any team formed with exactly K employees. Constraints: - 1 ≤ skill levels of employees ≤ 100000 Sample Input: 6 3 4 2 9 7 5 8 Sample Output: 24 Explanation: One possible team formation with maximum performance is by selecting the employees with skill levels 9, 8, and 7. The sum of their skill levels is 24, which is the maximum possible performance for any team of size 3.","solution":"def max_team_performance(N, K, skill_levels): Given N employees and each has a unique skill level represented by an integer, find the maximum possible performance for any team formed with exactly K employees. Args: N: int - number of employees K: int - size of each team skill_levels: list - list of integers representing the skill levels of employees Returns: int - maximum possible performance for any team of size K # Sort the skill levels in descending order skill_levels.sort(reverse=True) # Sum the top K skill levels return sum(skill_levels[:K])"},{"question":"You are given a string ( S ) consisting of lowercase English alphabets. A substring of ( S ) is defined as any contiguous sequence of characters within ( S ). A substring is considered \\"good\\" if all the characters in the substring are unique. For example, in the string \\"abc\\", the substrings \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\" are all good substrings, but the substring \\"aa\\" is not. Given a string ( S ), write a program to determine the length of the longest \\"good\\" substring in ( S ). # Input The input consists of a single string ( S ) (1 ≤ |S| ≤ 10^5) which is the string to be analyzed. # Output Output a single integer which is the length of the longest good substring. # Example Input ``` abcabcbb ``` Output ``` 3 ``` Input ``` bbbbb ``` Output ``` 1 ``` # Note In the first example, the longest good substring is either \\"abc\\", with a length of 3. In the second example, the longest good substring is \\"b\\", with a length of 1.","solution":"def length_of_longest_good_substring(s): Returns the length of the longest \\"good\\" substring with unique characters. n = len(s) i, j = 0, 0 char_set = set() max_len = 0 while j < n: if s[j] not in char_set: char_set.add(s[j]) j += 1 max_len = max(max_len, j - i) else: char_set.remove(s[i]) i += 1 return max_len"},{"question":"In a distant land, there exists a magic box that performs a special operation on a sequence of numbers. The operation is defined as follows: for each pair of adjacent integers in the sequence, replace them with their sum. This operation is repeatedly performed on the sequence until only one integer remains. Given the initial sequence of integers, your task is to determine the final integer that remains after continuously applying the magic box operation until the sequence is reduced to a single integer. Input: The first line contains an integer T denoting the number of test cases. Each of the following T lines contains an integer N (2 ≤ N ≤ 100) followed by N space-separated integers which represent the initial sequence of numbers. Output: For each test case, print the final integer that remains after applying the magic box operation. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 100 1 ≤ integers in the sequence ≤ 100 SAMPLE INPUT 2 4 1 2 3 4 3 10 20 30 SAMPLE OUTPUT 10 60","solution":"def magic_box_operation(T, test_cases): Applies the magic box operation on the given test cases and returns the final integer for each test case. Parameters: T (int): Number of test cases. test_cases (list of lists): A list containing T lists, each consisting of the initial set of integers for the corresponding test case. Returns: list: A list of integers denoting the final result for each test case. results = [] for case in test_cases: while len(case) > 1: case = [sum(case)] results.append(case[0]) return results"},{"question":"Given a list of integers, your task is to determine the length of the longest subarray with non-decreasing order. A subarray is a contiguous part of an array. Input The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. Output Output a single integer, the length of the longest non-decreasing subarray. Examples Input 6 1 2 2 5 3 4 Output 4 Explanation In the example, the longest non-decreasing subarray is [1, 2, 2, 5], which has a length of 4. Input 5 5 4 3 2 1 Output 1 Explanation In this example, no subarray of length greater than 1 is non-decreasing, so the answer is 1.","solution":"def longest_non_decreasing_subarray_length(n, array): if n == 0: return 0 max_len = 1 current_len = 1 for i in range(1, n): if array[i] >= array[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"You are given a list of N words. Each word consists of lowercase alphabets only. Our challenge is to group these words that are anagrams of each other and then sort each group in lexicographical order. Finally, output all groups in lexicographical order based on the first word of each group. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For instance, \\"listen\\" and \\"silent\\" are anagrams of each other. Input The first line contains a single integer N. Each of the next N lines contains one word comprised of lowercase alphabets. Output Output the groups of anagrams, each group sorted lexicographically, and the groups themselves sorted lexicographically based on their first word. Constraints 1 ≤ N ≤ 100000 (10^5) 1 ≤ length of each word ≤ 100 Example Input: 6 listen silent enlist rat tar god Output: enlist listen silent rat tar god Input: 5 eat tea tan ate nat Output: ate eat tea nat tan Explanation In the first example, the words that are anagrams of each other are [\\"listen\\", \\"silent\\", \\"enlist\\"], [\\"rat\\", \\"tar\\"], and \\"god\\" by itself. These groups, when sorted respectively, and then sorted by their first word, give the required output. In the second example, the words \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams of each other, as well as \\"tan\\" and \\"nat\\". Sorting within these groups leads to [\\"ate\\", \\"eat\\", \\"tea\\"] and [\\"nat\\", \\"tan\\"]. Sorting the groups lexicographically by their first words results in the final output.","solution":"def group_anagrams(words): from collections import defaultdict anagrams = defaultdict(list) for word in words: key = \'\'.join(sorted(word)) anagrams[key].append(word) # Sort each group and store results sorted_groups = [sorted(group) for group in anagrams.values()] # Sort groups based on their first element sorted_groups = sorted(sorted_groups, key=lambda x: x[0]) return sorted_groups"},{"question":"Alyssa P. Hacker is working on a data parsing tool and she needs to handle log files from multiple servers. Each log file contains information about different processes running on the servers. Each process has a unique identifier and a timestamp indicating when the process started and ended. Alyssa needs to find out the total time each process spent running across all the servers. Each log file is formatted as follows: each line represents a single log entry with the process identifier, the start time, and the end time, separated by spaces. The log entries are unordered. The start and end times are given as integers, representing the time in seconds since the epoch. The task is to read multiple log files and compute the total running time for each unique process. If a process identifier appears multiple times (across multiple servers), sum the total time spent running. Write a program that reads the log entries from multiple log files and prints the total running time for each process. Constraints: - Each log entry fits within a single line and contains exactly three integers. - The log file format is consistent across all input files. - The number of log entries across all files combined does not exceed 100,000. - The time values (start and end) are non-negative integers. Input: - The first line contains an integer N, the number of log files. - The next N lines each specify the path to a log file. Output: - For each unique process identifier, output the identifier followed by the total running time in seconds. The process identifiers and running times should be printed in ascending order of the process identifiers. Example: Input: ``` 2 logfile1.txt logfile2.txt ``` Contents of `logfile1.txt`: ``` 1 1609459200 1609462800 2 1609459200 1609466400 1 1609470000 1609473600 ``` Contents of `logfile2.txt`: ``` 2 1609477200 1609480800 3 1609470000 1609473600 1 1609484400 1609488000 ``` Output: ``` 1 10800 2 10800 3 3600 ```","solution":"def compute_total_running_times(log_files): from collections import defaultdict total_times = defaultdict(int) for log_file in log_files: with open(log_file, \'r\') as file: for line in file: process_id, start_time, end_time = map(int, line.split()) total_times[process_id] += end_time - start_time output = sorted(total_times.items()) for process_id, total_time in output: print(f\\"{process_id} {total_time}\\") # Example usage: # Given the log files \'logfile1.txt\' and \'logfile2.txt\' as provided in the example. # log_files = [\'logfile1.txt\', \'logfile2.txt\'] # compute_total_running_times(log_files)"},{"question":"Write a function to simulate a simple filesystem. The filesystem supports the following commands: * mkdir(path): creates a new directory at the specified path. * addContentToFile(path, content): appends content to the file at the specified path. If the file doesn\'t exist, a new file will be created. * readContentFromFile(path): returns the content of the file at the specified path. * ls(path): lists the directories and files at the specified path. Note: * The paths are given in a Unix-like format (e.g., \\"/a/b/c\\"). * The root directory is represented by \\"/\\". * When using ls, if the path is a file, the command should return the file\'s name. Implement the following interface: ```python class FileSystem: def __init__(self): pass def mkdir(self, path: str) -> None: pass def addContentToFile(self, path: str, content: str) -> None: pass def readContentFromFile(self, path: str) -> str: pass def ls(self, path: str) -> List[str]: pass ``` Example ```python fs = FileSystem() fs.mkdir(\'/a\') fs.addContentToFile(\'/a/b\', \'hello\') assert fs.readContentFromFile(\'/a/b\') == \'hello\' fs.mkdir(\'/a/c/d\') assert fs.ls(\'/\') == [\'a\'] fs.addContentToFile(\'/a/b\', \' world\') assert fs.readContentFromFile(\'/a/b\') == \'hello world\' assert fs.ls(\'/a\') == [\'b\', \'c\'] assert fs.ls(\'/a/c/d\') == [] fs.mkdir(\'/a/e\') assert fs.ls(\'/a\') == [\'b\', \'c\', \'e\'] assert fs.ls(\'/a/b\') == [\'b\'] ```","solution":"class FileSystem: def __init__(self): self.filesystem = {\'/\': {}} def mkdir(self, path: str) -> None: parts = path.split(\'/\') current_dir = self.filesystem[\'/\'] for part in parts[1:]: if part not in current_dir: current_dir[part] = {} current_dir = current_dir[part] def addContentToFile(self, path: str, content: str) -> None: parts = path.split(\'/\') current_dir = self.filesystem[\'/\'] for part in parts[1:-1]: if part not in current_dir: current_dir[part] = {} current_dir = current_dir[part] file_name = parts[-1] if file_name in current_dir: current_dir[file_name] += content else: current_dir[file_name] = content def readContentFromFile(self, path: str) -> str: parts = path.split(\'/\') current_dir = self.filesystem[\'/\'] for part in parts[1:-1]: current_dir = current_dir[part] file_name = parts[-1] return current_dir[file_name] def ls(self, path: str): if path == \\"/\\": return sorted(self.filesystem[\'/\'].keys()) parts = path.split(\'/\') current_dir = self.filesystem[\'/\'] for part in parts[1:]: if part: current_dir = current_dir[part] if isinstance(current_dir, str): return [parts[-1]] else: return sorted(current_dir.keys())"},{"question":"You are given an array of integers `arr` and two integers `k` and `x`. Your task is to find the `k` closest integers to `x` in the array. The result should be sorted in ascending order. An integer `a` is closer to `x` than an integer `b` if: 1. |a - x| < |b - x|, or 2. |a - x| == |b - x| and a < b You need to implement a function `findClosestElements(arr, k, x)` that returns the `k` closest integers in the input array `arr`. # Input - An array of integers `arr` (1 ≤ length of arr ≤ 10^4, |arr[i]| ≤ 10^4) - An integer `k` (1 ≤ k ≤ length of arr) - An integer `x` (|x| ≤ 10^4) # Output - An array of integers representing the k closest numbers to x, sorted in ascending order. # Example Input ``` arr = [1, 2, 3, 4, 5] k = 4 x = 3 ``` Output ``` [1, 2, 3, 4] ``` Input ``` arr = [1, 2, 3, 4, 5] k = 4 x = -1 ``` Output ``` [1, 2, 3, 4] ``` # Note 1. The array `arr` will be sorted in ascending order. 2. Assume there can be multiple correct answers, you need to return one of them. 3. Ensure that the returned result contains exactly `k` elements.","solution":"from typing import List def findClosestElements(arr: List[int], k: int, x: int) -> List[int]: # Sort the array based on the closeness to x. arr.sort(key=lambda num: (abs(num - x), num)) # Take the first k elements. closest_elements = arr[:k] # Sort the result in ascending order before returning. closest_elements.sort() return closest_elements"},{"question":"You are given a rectangular grid with rows and columns. Each cell in the grid can either be open, represented by `\'.\'`, or blocked, represented by `\'#\'`. You start at the top-left corner of the grid (0, 0) and want to move to the bottom-right corner (rows-1, columns-1). You can move right, left, up, or down from a cell but cannot move to a blocked cell. Write a function to determine if there is a path from the start cell to the destination cell. If a path exists, return the length of the shortest path. If no such path exists, return -1. Input: - The first line contains two integers `rows` and `columns` (1 ≤ rows, columns ≤ 100), representing the dimensions of the grid. - Each of the next `rows` lines contains `columns` characters (each either `\'.\'` or `\'#\'`), representing the grid. Output: - Output a single integer, the length of the shortest path from the top-left corner to the bottom-right corner, or -1 if no such path exists. Example: Input: ``` 5 5 ..... .#. ...#. .#. ..... ``` Output: ``` 8 ``` Explanation: The shortest path from the top-left corner to the bottom-right corner is of length 8. Input: ``` 3 3 ..# .#. ..# ``` Output: ``` -1 ``` Explanation: There is no path from the top-left corner to the bottom-right corner. Function signature: ```python def shortest_path(rows: int, columns: int, grid: List[str]) -> int: ```","solution":"from typing import List, Tuple from collections import deque def shortest_path(rows: int, columns: int, grid: List[str]) -> int: # A function to check if cell (r, c) is within the bounds and open def is_valid(r, c): return 0 <= r < rows and 0 <= c < columns and grid[r][c] == \'.\' # Directions for moving right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # BFS queue, starting from (0, 0) with distance 0 queue = deque([(0, 0, 0)]) # Set of visited cells to avoid revisiting visited = set((0, 0)) # While there are cells to process while queue: r, c, dist = queue.popleft() # If the destination cell is reached if r == rows - 1 and c == columns - 1: return dist # Explore the neighbors for dr, dc in directions: nr, nc = r + dr, c + dc if is_valid(nr, nc) and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) # If destination is not reachable return -1"},{"question":"Given a string S consisting of lowercase alphabets and an integer K, you need to find the K-th most frequent character in the string. If there are multiple characters with the same frequency, choose the lexicographically smallest one. Input The first line contains the integer K. The second line contains the string S. Output In a single line, output the K-th most frequent character in the string. Constraints 1 <= |S| <= 10^5 1 <= K <= 26 Example 1 Input 2 abacabad Output b Explanation The frequency of each character is: a: 4, b: 2, c: 1, d: 1. The 2nd most frequent character is b. Example 2 Input 1 mississippi Output i Explanation The frequency of each character is: i: 4, s: 4, p: 2, m: 1. The 1st most frequent character is i since it is lexicographically smaller than s.","solution":"def kth_most_frequent_character(K, S): from collections import Counter freq = Counter(S) # create sorted list of tuples (frequency, character) sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0])) # return the K-th most frequent character return sorted_freq[K-1][0]"},{"question":"Given a list of integer values representing the heights of students in a class, you are to write a program that determines the maximum number of students who can be arranged into a non-decreasing order of heights by removing some students from the list. Input The input consists of two lines. The first line contains an integer N (1 ≤ N ≤ 1000), the number of students. The second line contains N integers representing the heights of the students in centimeters. Output Print the maximum number of students that can be arranged into a non-decreasing order of heights. Example Input 6 5 3 4 8 6 7 Output 4","solution":"def max_students_in_non_decreasing_order(n, heights): Determines the maximum number of students that can be arranged in non-decreasing order of heights by removing some students. :param n: int - number of students :param heights: List[int] - list of student heights :return: int - maximum number of students in non-decreasing order if not heights: return 0 # Length of the longest increasing subsequence dp = [1] * n for i in range(1, n): for j in range(i): if heights[i] >= heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example usage if __name__ == \\"__main__\\": n = 6 heights = [5, 3, 4, 8, 6, 7] print(max_students_in_non_decreasing_order(n, heights)) # Output: 4"},{"question":"Given an n-sized list of integers and a constant k, create a function that finds the kth smallest number in the list efficiently. The constraints are that the function should handle lists containing duplicate values and it should perform well with large input sizes. Your solution should have a computational complexity better than O(n log n). # Function Signature: `def kth_smallest(arr: List[int], k: int) -> int:` # Input: - `arr`: A list of integers (n-sized). - `k`: An integer representing the position (1-indexed) of the smallest element to find in the list. # Output: - An integer representing the kth smallest number in the list. # Constraints: 1. The list `arr` can contain duplicate values. 2. The length of `arr` can be up to 10^5. 3. 1 ≤ `k` ≤ the length of the list. # Example: Example 1: - Input: `arr = [7, 10, 4, 3, 20, 15]`, `k = 4` - Output: `10` - Explanation: The 4th smallest number in the list is `10`. Example 2: - Input: `arr = [7, 10, 4, 3, 20, 15]`, `k = 3` - Output: `7` - Explanation: The 3rd smallest number in the list is `7`. # Notes: - Use the QuickSelect algorithm or any other efficient selection algorithm to achieve the desired computational complexity. - Consider edge cases such as lists with all identical elements and lists with large length.","solution":"from typing import List def kth_smallest(arr: List[int], k: int) -> int: def partition(low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] < pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quick_select(low, high, k): if low == high: return arr[low] pivot_index = partition(low, high) if k == pivot_index: return arr[k] elif k < pivot_index: return quick_select(low, pivot_index - 1, k) else: return quick_select(pivot_index + 1, high, k) return quick_select(0, len(arr) - 1, k - 1)"},{"question":"Denis is learning to code and wants to practice converting sentences into a new encoded string. He wants to create a function that takes an input sentence of lower and upper case English letters and an integer shift value. For each character in the input string, the function should shift the character by the given integer shift value according to its position in the English alphabet. The shift should wrap around if it reaches the end of the alphabet. The function should return the encoded string. The shift should apply to both upper and lower case letters, and maintain the case of each letter. Non-alphabet characters should remain unchanged in their positions. Here is how the shifting works: - For a given letter \'c\' and an integer shift `s`, the resulting letter is (\'c\' + s) % 26 positions forward in the alphabet. If \'c\' is \'a\' and `s` is 3, the resulting letter is \'d\'. If \'c\' is \'z\' and `s` is 1, the resulting letter wraps around to \'a\'. Similarly for uppercase letters. Input: - The first line contains an integer `s` (0 ≤ s ≤ 25) representing the shift value. - The second line contains the input string of lower and upper case English letters and non-alphabet characters. Output: - Output the encoded string after applying the shift to each character in the input sentence. Examples: Input: 3 Hello, World! Output: Khoor, Zruog! Input: 10 Denis is coding. Output: Noxsc sc mynsxq. Note: - In the first example, the letter \'H\' shifted by 3 positions becomes \'K\', \'e\' becomes \'h\', \'l\' becomes \'o\', \'o\' becomes \'r\', and so on. - In the second example, \'D\' shifted by 10 positions becomes \'N\' and \'e\' becomes \'o\', and so on. Non-alphabet characters like spaces and punctuation remain unchanged.","solution":"def caesar_cipher(shift, text): Encodes a given input text by shifting each alphabet character by the shift value and returns the encoded string. Parameters: shift (int): The number of positions to shift each character text (str): The input string to be encoded Returns: str: The encoded string with characters shifted result = [] for char in text: if \'a\' <= char <= \'z\': result.append(chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': result.append(chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\'))) else: result.append(char) return \\"\\".join(result)"},{"question":"You are given a list of integer numbers representing the heights of buildings on a street. The buildings are equally spaced along the street, and each building can see the sunset if there are no taller buildings to its right blocking its view. Write a function that takes a list of integers and returns a new list of integers, representing the indices of the buildings that can see the sunset. The indices should be returned in the order of the buildings from left to right in the original list. Input The input will contain a single list of integers where each integer represents the height of a building. Output Print a list of integers representing the indices of the buildings that can see the sunset. Examples Input [4, 2, 3, 1] Output [0, 2, 3] Input [1, 2, 3, 4] Output [3] Note * First example: Building 0 can see the sunset because there are no taller buildings to its right. Building 1 is blocked by building 2, but building 2 is not blocked because building 3 is shorter. Building 3 can see the sunset as it\'s at the end of the list. * Second example: Only building 3 can see the sunset as all previous buildings are blocked by the taller buildings to their right.","solution":"def buildings_with_view(heights): Returns a list of indices representing the buildings that can see the sunset. n = len(heights) views = [] max_height_from_right = -1 for i in range(n-1, -1, -1): if heights[i] > max_height_from_right: views.append(i) max_height_from_right = heights[i] return views[::-1]"},{"question":"Anagrams Grouping You are given a list of strings where each string consists of lowercase English letters. Your task is to group the strings such that each group contains all anagrams of each other. Two strings are anagrams if and only if their sorted characters are exactly the same. Write a function `groupAnagrams` that receives a list of strings and returns a list of lists of strings, where each sublist contains strings that are anagrams of each other. Input - A list of strings `words` (1 ≤ length of words ≤ 1000, 1 ≤ length of each string ≤ 100). Output - A list of lists of strings, where each sublist contains strings that are anagrams of each other. The order of groups or the order of strings within each group does not matter. Function Signature ```python def groupAnagrams(words: List[str]) -> List[List[str]]: ``` Examples ```python Input words = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output [[\'eat\', \'tea\', \'ate\'], [\'tan\', \'nat\'], [\'bat\']] ``` ```python Input words = [\\"\\"] Output [[\'\']] ``` ```python Input words = [\\"a\\"] Output [[\'a\']] ``` Note - In the first example, \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams and form one group. \\"tan\\" and \\"nat\\" are anagrams and form another group. \\"bat\\" is not an anagram of any other word, so it forms its own group. - In the second example, there is just one string which is an empty string, and it forms a single group of anagrams which contains just itself. - In the third example, there is just one string which is \\"a\\", and it forms a single group of anagrams that contains just itself.","solution":"from typing import List from collections import defaultdict def groupAnagrams(words: List[str]) -> List[List[str]]: Groups anagrams from the given list of words. anagram_groups = defaultdict(list) for word in words: # Sort the word and use it as a key key = \'\'.join(sorted(word)) anagram_groups[key].append(word) # Return all the grouped anagrams as a list of lists return list(anagram_groups.values())"},{"question":"Karen wants to decorate her new house using framed pictures. She only wants to hang the pictures in a straight line on one wall. Karen orders `n` pictures, each with a specific height `h_i`. Karen wants to hang the pictures in such a way that there will be no point in the straight line (formed by the top edges of the pictures) where the height decreases. In other words, every picture must be equal or taller in height than the one that precedes it in the arrangement. Your task is to determine the length of the longest possible subsequence of pictures that Karen can hang on the wall, which meets the aforementioned condition. Input The first line contains a single integer `n` (1 ≤ n ≤ 10000) — the number of pictures. The second line contains `n` integers `h_1, h_2, ..., h_n` (1 ≤ h_i ≤ 10000) — the heights of the pictures. Output Print the length of the longest non-decreasing subsequence of pictures. Examples Input 7 15 7 8 9 13 12 14 Output 5 Input 5 5 5 5 5 5 Output 5 Input 6 3 10 2 1 20 19 Output 3 Note In the first example, one of the possible longest non-decreasing subsequences is [7, 8, 9, 13, 14], which has a length of 5. In the second example, the whole sequence is non-decreasing since all elements are equal, so the length is 5. In the third example, one of the possible longest non-decreasing subsequences is [3, 10, 20], which has a length of 3.","solution":"def longest_non_decreasing_subsequence(n, heights): if n == 0: return 0 dp = [1] * n for i in range(1, n): for j in range(i): if heights[i] >= heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"David is organizing a ping-pong tournament. In this tournament, there are exactly n competitors. Each competitor is identified by a unique number from 1 to n. Each pair of competitors plays exactly one match, and there are no ties — one player wins and the other loses. The ranking of the competitors is determined solely based on the number of matches each one wins. The tournament has finished, and David now has the ranking list, which is a permutation of the numbers from 1 to n, where the first number is the highest-ranked competitor (most matches won), the second number is the second-highest ranked competitor, and so on, until the last number who is the lowest-ranked competitor (least matches won). David wants to create a leaderboard where each player is listed along with their rank. Write a program that will generate this leaderboard. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of competitors. The second line contains n distinct integers, representing the ranking list. Each integer is between 1 and n, and all integers from 1 to n are present exactly once. Output Output n lines. Each line should contain two integers separated by a space: the competitor number and their rank. The ranks start from 1 (highest-ranked) and go up to n (lowest-ranked). Examples Input 5 3 1 2 5 4 Output 3 1 1 2 2 3 5 4 4 5 Input 3 2 3 1 Output 2 1 3 2 1 3 Note In the first example, competitor 3 is ranked 1st, competitor 1 is ranked 2nd, and so on. The leaderboard is printed accordingly with each competitor\'s rank. In the second example, competitor 2 is ranked 1st, competitor 3 is ranked 2nd, and competitor 1 is ranked 3rd.","solution":"def generate_leaderboard(n, ranking): Generate the leaderboard based on ranking. Args: n (int): Number of competitors. ranking (list): A list of integers representing the ranking list. Returns: list: A list of tuples where each tuple contains a competitor number and their rank. leaderboard = [(ranking[i], i + 1) for i in range(n)] return leaderboard"},{"question":"In a mystical forest, there are magical lanterns positioned to light up a path. Each lantern has a unique brightness level, forming a sequence. The inhabitants of the forest want to ensure that the total brightness of the lanterns is as close as possible to a given magical number M. To achieve this, they are allowed to replace the brightness level of each lantern with the brightness level of any other lantern. Your task is to determine the minimum possible absolute difference between the sum of the brightness levels of a subset of lanterns and the magical number M. Formally, given an integer M and a list of integers representing the brightness levels of the lanterns, find the minimum possible value of |sum(B) - M|, where B is a subset of the given brightness levels. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each test case follows with: - An integer n (1 ≤ n ≤ 100), the number of lanterns. - A list of n distinct integers b_i (1 ≤ b_i ≤ 1000) representing the brightness levels of the lanterns. - An integer M (1 ≤ M ≤ 10000), the magical number. Output For each test case, output a single integer – the minimum possible absolute difference between the sum of any subset of the brightness levels and the number M. Example Input 3 3 1 2 3 6 4 10 20 30 40 60 5 5 8 12 19 25 50 Output 0 0 0 Note In the first test case, the sum of the subset {1, 2, 3} is 6, which matches M exactly, so the minimum possible absolute difference is 0. In the second test case, the sum of the subset {10, 20, 30} is 60, which matches M exactly, so the minimum possible absolute difference is 0. In the third test case, the sum of the subset {25, 19, 5, 1} adds up to 50, which matches M exactly, so the minimum possible absolute difference is 0.","solution":"from itertools import combinations def min_difference(t, test_cases): Determines the minimum possible absolute difference between the sum of any subset of the brightness levels and the magical number M. Params: t (int): The number of test cases. test_cases (list of tuples): Each tuple contains: n (int): Number of lanterns. brightness_levels (list of int): The brightness levels of the lanterns. M (int): The magical number. Returns: list of int: The minimum possible absolute differences for each test case. results = [] for case in test_cases: n, brightness_levels, M = case best_diff = float(\'inf\') # Check every possible subset of brightness levels for r in range(n + 1): for subset in combinations(brightness_levels, r): current_sum = sum(subset) current_diff = abs(current_sum - M) best_diff = min(best_diff, current_diff) results.append(best_diff) return results # Example usage # t = 3 # test_cases = [ # (3, [1, 2, 3], 6), # (4, [10, 20, 30, 40], 60), # (5, [5, 8, 12, 19, 25], 50) # ] # print(min_difference(t, test_cases)) # Output: [0, 0, 0]"},{"question":"Palindrome Maze Story In the mysterious land of Palindor, there\'s a maze designed with a peculiar set of rules. The maze is comprised of cells, each containing a character that can be an alphabet letter. The maze-keeper, Palax, loves palindromes and has designed the maze such that one can only move from cell to cell if the sequence of characters traversed forms a palindrome. Our hero, Zeno, is trying to navigate this maze to reach a specific destination. Can you help Zeno decide if it\'s possible to reach the given destination by moving only through cells that form a palindrome sequence? Problem Consider a two-dimensional lattice with height h and width w. A cell c_{i, j} is represented by an alphabet character (a to z). Zeno can start from any cell and move to an adjacent cell up, down, left, or right, but the sequence of the characters he visits should always form a palindrome. Given the maze\'s structure and the start and end positions, determine if Zeno can reach the end position following the palindrome sequence rule. Input The input is given in the following format: h w c_{0,0} c_{0,1} ... c_{0,w-1} ... c_{h-1,0} c_{h-1,1} ... c_{h-1,w-1} x_start y_start x_end y_end - The first line contains two integers, height h (the number of rows) and width w (the number of columns), separated by a space. - The next h lines describe the maze with w alphabet characters on each line. - The last line contains four integers x_start, y_start, x_end, and y_end, separated by spaces, where (x_start, y_start) is the start position and (x_end, y_end) is the end position. Output Output \\"Yes\\" if Zeno can reach the end position from the start position following the palindrome sequence rule, and \\"No\\" otherwise. Constraints - 1 ≤ h, w ≤ 50 - c_{i, j} is a lowercase alphabet character (\'a\' to \'z\') - 0 ≤ x_start, y_start, x_end, y_end < h, w Sample Input 1 5 5 ababa bcccb dadad bcccb ababa 0 0 4 4 Sample Output 1 Yes Sample Input 2 3 4 abcd bcdb cdba 0 0 2 3 Sample Output 2 No","solution":"def is_palindrome(s): return s == s[::-1] def dfs(maze, x, y, path, visited, x_end, y_end): if (x, y) == (x_end, y_end): if is_palindrome(path): return True return False visited.add((x, y)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and (nx, ny) not in visited: if dfs(maze, nx, ny, path + maze[nx][ny], visited, x_end, y_end): return True visited.remove((x, y)) return False def can_reach_palindrome(maze, x_start, y_start, x_end, y_end): visited = set() return \\"Yes\\" if dfs(maze, x_start, y_start, maze[x_start][y_start], visited, x_end, y_end) else \\"No\\""},{"question":"Consider a game where you have a board with n rows and m columns. Each cell on the board can either be empty or contain an obstacle. Your goal is to determine the number of distinct ways to traverse from the top-left corner of the board to the bottom-right corner. You can only move right or down one cell at a time, and you cannot move through cells with obstacles. The board is represented as a 2D array of size n x m, with \'0\' representing an empty cell and \'1\' representing a cell with an obstacle. Write a function that takes the board as input and returns the total number of distinct paths from the top-left corner to the bottom-right corner. If it\'s impossible to reach the bottom-right corner, return 0. Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000) — the number of rows and columns of the board. - Each of the next n lines contains m integers (either 0 or 1), representing the board. Output: - Output one integer: the number of distinct paths from the top-left corner to the bottom-right corner. Example: Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Note: For the given example, there are two paths: 1. (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) 2. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)","solution":"def distinct_paths(board): Returns the number of distinct paths from the top-left corner to the bottom-right corner of the board. n = len(board) m = len(board[0]) # If the starting point or ending point is an obstacle if board[0][0] == 1 or board[n-1][m-1] == 1: return 0 # Initialize a dp array dp = [[0] * m for _ in range(n)] # Starting point dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(m): if board[i][j] == 1: dp[i][j] = 0 # No paths through an obstacle else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"A restaurant has been experiencing issues with inconsistent food preparation times, and the manager wants to control the time taken to prepare orders. The manager wants the chefs to prepare dishes in such a way that the preparation time is as evenly distributed as possible. The restaurant has M dishes, each with a certain preparation time Ti. The goal is to divide these dishes between two chefs such that the absolute difference between their total preparation times is minimized. Write a program to determine the minimum possible difference between the preparation times of the two chefs. Input: The first line contains an integer T, denoting the number of test cases. T test cases follow. Each test case starts with an integer M, denoting the number of dishes. The second line contains M space-separated integers, where each integer Ti represents the preparation time of the i-th dish. Output: For each test case, output the minimum possible difference in preparation times between the two chefs. Constraints: 1 ≤ T ≤ 50 1 ≤ M ≤ 50 1 ≤ Ti ≤ 500 Example: Input: 2 4 1 3 5 11 3 10 20 30 Output: 2 0 Explanation: Case #1: One optimal way is to assign dishes with times [1, 11] to one chef and [3, 5] to the other chef. The difference is |12 - 8| = 4. Another optimal way is to assign [1, 5, 11] to one chef and [3] to the other chef. The difference is |17 - 3| = 14. However, to minimize the difference, one optimal way could be [1, 5] to one chef and [3, 11] to the other chef, giving the minimum difference |6 - 14| = 8. Another valid way can be found with a minimum difference of 2. Case #2: Both chefs can split the dishes equally: [10, 30] and [20] have a total time of 40, so the difference is 0.","solution":"def minimize_dish_time_difference(T, test_cases): def find_minimum_difference(dishes): total_sum = sum(dishes) target = total_sum // 2 n = len(dishes) dp = [[False] * (target + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if dishes[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - dishes[i - 1]] else: dp[i][j] = dp[i - 1][j] for j in range(target, -1, -1): if dp[n][j]: return total_sum - 2 * j results = [] for case in test_cases: M, dishes = case results.append(find_minimum_difference(dishes)) return results # Example to show how the function could be used: # T = 2 # test_cases = [(4, [1, 3, 5, 11]), (3, [10, 20, 30])] # Output: [2, 0]"},{"question":"A new online music platform allows users to create their own custom playlists. Each playlist is represented as a list of song names, where each song name follows a specific format: \\"SongName - ArtistName\\". There are multiple playlists and sometimes the same song can appear in multiple playlists. Your task is to identify the unique songs across all playlists and output them in alphabetical order, by song name and without considering the artist names. Input Specification Input starts with an integer t (1 ≤ t ≤ 10), the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 100), the number of playlists. Each playlist in the test case starts with an integer m (1 ≤ m ≤ 50), the number of songs in that playlist, followed by m song names in the format \\"SongName - ArtistName\\". Assume SongName and ArtistName are alphanumeric strings that may include spaces. Output Specification For each test case, output the unique song names in alphabetical order, each on a new line. The output for different test cases should be separated by a blank line. Example Sample Input: 2 2 3 Shape of You - Ed Sheeran Humble - Kendrick Lamar Despacito - Luis Fonsi 2 Thunder - Imagine Dragons Shape of You - Ed Sheeran 1 2 Roar - Katy Perry Happy - Pharrell Williams Sample Output: Despacito Humble Shape of You Thunder Happy Roar","solution":"def unique_songs(test_cases): results = [] for case in test_cases: song_set = set() for playlist in case: for song in playlist: song_name = song.split(\\" - \\")[0] song_set.add(song_name) result = sorted(song_set) results.append(result) return results"},{"question":"Given a sequence of integers, A, of length N, a \\"subarray\\" is any contiguous subsequence of the array. For example, the subarrays of [3, 4, 2] are: [3], [4], [2], [3, 4], [4, 2], and [3, 4, 2]. Your task is to find the length of the smallest subarray that has a sum greater than or equal to a given integer, S. If no such subarray exists, return -1. Constraints: * 1 leq N leq 10^5 * 1 leq S leq 10^9 * 1 leq A_i leq 10^4 Input The input consists of two lines. The first line contains the integers N and S. The second line contains N integers: A_1, A_2, ..., A_N. Output Print the length of the smallest subarray that has a sum greater than or equal to S. If no such subarray exists, print -1. Examples Input 5 11 1 2 3 4 5 Output 3 Input 5 15 1 2 3 4 5 Output 5 Input 3 10 1 2 3 Output -1","solution":"def min_length_subarray(N, S, A): min_len = float(\'inf\') current_sum = 0 start_index = 0 for end_index in range(N): current_sum += A[end_index] while current_sum >= S: min_len = min(min_len, end_index - start_index + 1) current_sum -= A[start_index] start_index += 1 return min_len if min_len != float(\'inf\') else -1 # Example usage: N = 5 S = 11 A = [1, 2, 3, 4, 5] print(min_length_subarray(N, S, A)) # Output: 3"},{"question":"You are given a 2D grid of size NxM. Each cell in the grid is either water (represented by \'.\'), land (represented by \'#\'), or a tree (represented by \'T\'). Your task is to determine the number of distinct islands in the grid. An island is defined as a collection of adjacent land cells (connected horizontally or vertically). The tree cells are barriers that cannot be part of an island. Constraints * 1 <= N, M <= 50 * The grid consists of only \'.\', \'#\', and \'T\'. Input Input is given from Standard Input in the following format: ``` N M Grid ``` Output Print the number of distinct islands in the grid. Examples Input ``` 4 5 .#... .#T#. ..T ....# ``` Output ``` 3 ``` Input ``` 3 3 . # . ``` Output ``` 1 ``` Input ``` 4 4 .T.. #. ..T. #..# ``` Output ``` 3 ```","solution":"def num_distinct_islands(grid): Function to determine the number of distinct islands in the grid. N = len(grid) M = len(grid[0]) def dfs(x, y): if x < 0 or x >= N or y < 0 or y >= M or grid[x][y] != \'#\': return grid[x][y] = \'.\' # Mark as visited dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) count = 0 for i in range(N): for j in range(M): if grid[i][j] == \'#\': count += 1 dfs(i, j) return count # Input reading function for convenience def read_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [data[i + 2] for i in range(N)] return grid"},{"question":"You are given a string s consisting of lowercase English letters. You have to answer q queries of the following two types: * \\"1 l r c d\\": count the number of times character c appears between positions l and r (inclusive) and determine if that count is greater than or equal to d. If it is, output \\"YES\\"; otherwise, output \\"NO\\". * \\"2 p c\\": replace the character at position p with character c. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the length of the string and the number of queries, respectively. The second line contains a string s of length n consisting of lowercase English letters. The following q lines describe the queries. Each query is described in one of the following two formats: * \\"1 l r c d\\" (1 ≤ l ≤ r ≤ n, 1 ≤ d ≤ r - l + 1) — a query of the first type. * \\"2 p c\\" (1 ≤ p ≤ n) — a query of the second type. Output For each query of the first type, print \\"YES\\" if the count of character c in the specified range is greater than or equal to d, otherwise print \\"NO\\". Example Input 10 5 abacabadab 1 1 5 a 2 2 7 c 1 1 10 c 1 2 1 d 1 1 10 d 1 Output YES YES YES Note In the first query of the example, the substring from position 1 to 5 is \\"abaca\\" and there are 2 occurrences of \'a\', which is greater than or equal to 2, so we output \\"YES\\". In the second query, the character at position 7 is replaced with \'c\', resulting in the string \\"abacacadb\\". In the third query, the substring from position 1 to 10 is \\"abacacadb\\" and there is 1 occurrence of \'c\', so we output \\"YES\\". In the fourth query, the character at position 1 is replaced with \'d\', resulting in the string \\"dbacacadb\\". In the fifth query, the substring from position 1 to 10 is \\"dbacacadb\\" and there is 1 occurrence of \'d\', so we output \\"YES\\".","solution":"class QueryProcessor: def __init__(self, s): self.s = list(s) def process_query_type_1(self, l, r, c, d): count = self.s[l-1:r].count(c) return \\"YES\\" if count >= d else \\"NO\\" def process_query_type_2(self, p, c): self.s[p-1] = c def process_queries(self, queries): results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": _, l, r, c, d = parts result = self.process_query_type_1(int(l), int(r), c, int(d)) results.append(result) elif parts[0] == \\"2\\": _, p, c = parts self.process_query_type_2(int(p), c) return results"},{"question":"You are given a list of integers. Find the smallest missing positive integer from the list. INPUT The first line of the input will contain a single integer N, the number of integers in the list. The second line contains N integers separated by spaces, representing the list. OUTPUT Display the smallest missing positive integer from the list. CONSTRAINTS 1 ≤ N ≤ 10^5 -10^6 ≤ integers in the list ≤ 10^6 SAMPLE INPUT 5 3 4 -1 1 SAMPLE OUTPUT 2 Explanation For the given list [3, 4, -1, 1], the smallest missing positive integer is 2.","solution":"def find_smallest_missing_positive(nums): Returns the smallest missing positive integer from the list of nums. nums = [num for num in nums if num > 0] if not nums: return 1 num_set = set(nums) smallest_missing_positive = 1 while smallest_missing_positive in num_set: smallest_missing_positive += 1 return smallest_missing_positive def process_input(n, str_nums): Processes input numbers and calls function to find smallest missing positive integer. nums = list(map(int, str_nums.split())) return find_smallest_missing_positive(nums)"},{"question":"You are given a list of n integers. Your task is to find the maximum sum of a contiguous subarray within the given list. The list may contain both positive and negative numbers, and the subarray should contain at least one number. An algorithm to achieve this efficiently is Kadane\'s algorithm, which has a time complexity of O(n). Input The first line of input contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The descriptions of the t test cases follow. The first line of each test case contains a single integer n (1 ≤ n ≤ 100000) — the size of the list. The second line contains n integers separated by single spaces, which represent the elements of the list (-10^4 ≤ a_i ≤ 10^4). Output For each test case, print a single integer — the maximum sum of a contiguous subarray for the respective list. Example Input 3 5 1 -2 3 4 -1 4 -4 -3 -2 -1 7 -2 1 -3 4 -1 2 1 Output 7 -1 6 Explanation In the first test case, the maximum sum subarray is [3, 4], resulting in a sum of 3 + 4 = 7. In the second test case, the maximum sum subarray is [-1], resulting in a sum of -1. In the third test case, the maximum sum subarray is [4, -1, 2, 1], resulting in a sum of 4 - 1 + 2 + 1 = 6.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray in the given list `arr`. Implements Kadane\'s algorithm. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def solve(test_cases): Process multiple test cases and returns the results as a list of integers. results = [] for i in range(0, len(test_cases), 2): n = test_cases[i] arr = test_cases[i+1] results.append(max_subarray_sum(arr)) return results"},{"question":"Jai and Veeru have started programming their own video streaming platform. They need to implement a system to help them classify the video durations into different categories based on length. Help them design a function that categorizes video lengths. A video length is given in minutes, and the categories are as follows: - \\"Short\\" for videos less than 5 minutes - \\"Medium\\" for videos from 5 to 30 minutes (inclusive) - \\"Long\\" for videos above 30 minutes Input: Given a number `n` and a list of `n` integers where each integer represents the length of a video in minutes. Output: For each video length, print the corresponding category name in a new line. Constraint: 1 ≤ n ≤ 100 1 ≤ Video length (in minutes) ≤ 300 SAMPLE INPUT 5 3 10 31 25 5 SAMPLE OUTPUT Short Medium Long Medium Medium","solution":"def categorize_videos(n, video_lengths): Categorizes video lengths into \'Short\', \'Medium\', and \'Long\'. Parameters: n (int): Number of videos video_lengths (list of int): List of video lengths in minutes Returns: list: List of categories corresponding to video lengths categories = [] for length in video_lengths: if length < 5: categories.append(\\"Short\\") elif 5 <= length <= 30: categories.append(\\"Medium\\") else: categories.append(\\"Long\\") return categories"},{"question":"In a mystical forest, there is a special tree that grows magical fruits. Each fruit has a unique energy level, represented by a positive integer. The tree follows a peculiar rule for distributing the energy levels of the fruits in a sequence as follows: the energy level of each fruit is the product of all previous fruits’ energy levels in the sequence plus one. Given an integer N (1 ≤ N ≤ 10), representing the number of magical fruits, your task is to find out the energy level of each fruit in the sequence. Input A single integer N. Output Print the energy levels of the fruits in the sequence, space-separated. Example Input 4 Output 1 2 3 7 Explanation For N = 4, the sequence is generated as follows: - The first fruit has an energy level of 1. - The second fruit has an energy level of 1 * 1 + 1 = 2. - The third fruit has an energy level of 1 * 2 + 1 = 3. - The fourth fruit has an energy level of 1 * 2 * 3 + 1 = 7.","solution":"def magical_fruit_energy_levels(N): Returns the energy levels of the fruits in the sequence as per the given rule. Parameters: N (int): The number of magical fruits. Returns: list: A list of energy levels of the fruits. if N < 1 or N > 10: raise ValueError(\\"N should be between 1 and 10 inclusive.\\") energy_levels = [1] current_product = 1 for i in range(1, N): next_energy = current_product + 1 energy_levels.append(next_energy) current_product *= next_energy return energy_levels"},{"question":"A genetic biologist has been studying a rare plant known as the \\"Luminous Vine\\". The plant has a unique way of spreading its seeds. Every day, each existing seed produces a new seed and an additional incomplete fragment. Fragments do not produce seeds or fragments, and only complete seeds can propagate. The biologist wants to know how many complete seeds will be present after a certain number of days given an initial count of seeds. You need to develop a program that calculates the number of complete seeds after n days given an initial number of seeds s. Input The input consists of two integers s (1 ≤ s ≤ 1000) and n (1 ≤ n ≤ 365) separated by a space. Output Output a single integer representing the number of complete seeds after n days. Example Input 3 5 Output 96 Input 7 2 Output 28 Input 1 10 Output 1024","solution":"def count_seeds(s, n): Calculate the number of complete seeds after n days given s initial seeds. Parameters: s (int): Initial number of seeds (1 ≤ s ≤ 1000). n (int): Number of days (1 ≤ n ≤ 365). Returns: int: Number of complete seeds after n days. return s * (2 ** n)"},{"question":"You are given an n x m grid filled with integers. Your task is to identify if it\'s possible to partition the grid into exactly two non-overlapping subgrids. The sum of all numbers in each subgrid must be equal. The two subgrids must be contiguous blocks of cells that do not overlap and should collectively cover the entire grid. That is, every cell in the grid must belong to exactly one of the two subgrids. Print \\"YES\\" if it\'s possible to partition the grid as described, and \\"NO\\" otherwise. Input The first line contains two integers n and m (1 ≤ n, m ≤ 500) — the dimensions of the grid. The next n lines contain m integers each, representing the grid elements. The j-th integer in the i-th line is denoted as grid[i][j]. Output Output \\"YES\\" if there exists a valid partitioning. Otherwise, output \\"NO\\". Examples Input 2 2 1 1 2 2 Output YES Input 3 3 1 2 3 4 5 6 7 8 9 Output NO Input 3 4 1 1 1 1 2 2 2 2 1 1 1 1 Output YES Explanation In the first example, the grid can be partitioned into two subgrids with sums 3 and 3, respectively. In the second example, there is no way to partition the grid into two subgrids with equal sum as the total sum 45 cannot be split evenly. In the third example, the grid can be partitioned into two subgrids with sums 10 and 10, respectively: ``` 1 1 1 1 2 2 2 2 1 1 1 1 1 1 1 1 -> or -> 2 2 2 2 1 1 1 1 ```","solution":"def can_partition_grid(n, m, grid): total_sum = sum(sum(row) for row in grid) if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 def dfs(grid, visited, current_sum, row, col): if current_sum == target_sum: return True if row < 0 or row >= n or col < 0 or col >= m or visited[row][col]: return False visited[row][col] = True current_sum += grid[row][col] if current_sum > target_sum: visited[row][col] = False return False can_reach = ( dfs(grid, visited, current_sum, row+1, col) or dfs(grid, visited, current_sum, row-1, col) or dfs(grid, visited, current_sum, row, col+1) or dfs(grid, visited, current_sum, row, col-1) ) if not can_reach: visited[row][col] = False return can_reach visited = [[False for _ in range(m)] for _ in range(n)] return \\"YES\\" if dfs(grid, visited, 0, 0, 0) else \\"NO\\""},{"question":"You are given a list of integers with duplicates. Your task is to remove the duplicates from the list and return the sorted list of unique integers. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the list. The second line contains n integers separated by space, representing the elements of the list. Output Print the sorted list of unique integers. Examples Input 8 4 3 2 7 4 8 3 2 Output 2 3 4 7 8 Input 5 1 5 3 1 2 Output 1 2 3 5 Input 6 10 10 10 10 10 10 Output 10","solution":"def remove_duplicates_and_sort(n, elements): Removes the duplicates from the list and returns the sorted list of unique integers. Parameters: n (int): The number of elements in the list. elements (list): The list of elements. Returns: list: The sorted list of unique integers. unique_elements = list(set(elements)) unique_elements.sort() return unique_elements"},{"question":"You are given two strings, `s1` and `s2`. Your task is to determine if these two strings are isomorphic. Two strings are isomorphic if the characters in `s1` can be replaced to get `s2`. A word\'s characters can be replaced to get another word if each character in the original word exactly maps to one specific character in the new word and vice-versa. For example, `egg` and `add` are isomorphic because characters \'e\' and \'a\', \'g\' and \'d\' repeat in the same pattern. However, `foo` and `bar` are not isomorphic because \'o\' in the first string can\'t map to two different characters \'a\' and \'r\'. Similarly, `paper` and `title` are isomorphic as \'p\' maps to \'t\', \'a\' maps to \'i\', \'p\' maps to \'t\', \'e\' maps to \'l\', and \'r\' maps to \'e\'. Input: - The first line contains an integer `t` (1 ≤ t ≤ 1000), the number of test cases. - For each test case: - The first line contains the string `s1` (1 ≤ |s1| ≤ 10^4). - The second line contains the string `s2` (1 ≤ |s2| ≤ 10^4). Output: - For each test case, print \\"YES\\" if given strings are isomorphic, otherwise print \\"NO\\". Example: Input: ```plaintext 3 egg add foo bar paper title ``` Output: ```plaintext YES NO YES ``` Your task is to implement a function that reads the input, processes each test case to determine if the strings are isomorphic, and then outputs the results.","solution":"def is_isomorphic(s1, s2): Determines if two strings are isomorphic. if len(s1) != len(s2): return False mapping_s1_to_s2 = {} mapping_s2_to_s1 = {} for char1, char2 in zip(s1, s2): if (char1 not in mapping_s1_to_s2) and (char2 not in mapping_s2_to_s1): mapping_s1_to_s2[char1] = char2 mapping_s2_to_s1[char2] = char1 elif mapping_s1_to_s2.get(char1) != char2 or mapping_s2_to_s1.get(char2) != char1: return False return True def process_test_cases(test_cases): results = [] for s1, s2 in test_cases: if is_isomorphic(s1, s2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string **s** consisting of lowercase alphabets and an optional special character \'#\' which represents backspacing one character before it. Your task is to return the string after all backspaces have been applied. If there are multiple \'#\' characters, start from the leftmost part of the string and apply the transformations successively. Input A single line containing the string **s** (1 ≤ |s| ≤ 105), where s is a non-empty string containing only lowercase alphabets and the special character \'#\'. Output Print the resulting string after all backspaces have been applied. Examples Input ab#c Output ac Input abcd Output ad","solution":"def apply_backspaces(s): Returns the string after applying all backspaces (\'#\'). result = [] for char in s: if char == \'#\': if result: result.pop() else: result.append(char) return \'\'.join(result)"},{"question":"A city is planning to build a new road network to connect its key points of interest. The city can be represented as a grid of size n × m, where some cells are buildable (represented by \'.\') and some are not buildable (represented by \'#\'). You need to find the shortest path between a given start cell and an end cell. The path can only traverse through buildable cells and move in four directions: left, right, up, or down. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), representing the size of the grid. The following n lines each contain m characters, where \'.\' denotes a buildable cell and \'#\' denotes a non-buildable cell. The final two lines contain the coordinates of the start cell and the end cell, respectively, in the form of two integers (x1, y1) and (x2, y2) (0 ≤ x1, x2 < n, 0 ≤ y1, y2 < m). Output Print a single integer representing the length of the shortest path from the start cell to the end cell. If no such path exists, print -1. Examples Input 4 4 .... .#.. ..#. .... 0 0 3 3 Output 6 Input 4 4 .... ..#. .#.. 0 0 3 3 Output -1 Note In the first example, the shortest path from (0, 0) to (3, 3) goes through the cells (0,0) -> (0,1) -> (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3), which has a length of 6. In the second example, there is no valid path from the start cell to the end cell due to an obstruction of non-buildable cells.","solution":"from collections import deque def shortest_path(n, m, grid, start, end): def in_bounds(x, y): return 0 <= x < n and 0 <= y < m def is_buildable(x, y): return grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) visited = set() visited.add((start[0], start[1])) while queue: x, y, steps = queue.popleft() if (x, y) == end: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if in_bounds(nx, ny) and is_buildable(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 # Example usage: n, m = 4, 4 grid = [ \\"....\\", \\".#..\\", \\"..#.\\", \\"....\\" ] start = (0, 0) end = (3, 3) print(shortest_path(n, m, grid, start, end)) # Expected output: 6"},{"question":"Alex is rearranging books on a bookshelf. Each book has a width W. The bookshelf has a total length L available for books. Alex wants to fit as many books as possible on the shelf without exceeding the available length L. Determine the maximum number of books Alex can fit on the shelf. Constraints * 1 leq L leq 1000 * 1 leq W leq 100 Input Input is given from Standard Input in the following format: L W Output Print the maximum number of books that can fit on the shelf. Examples Input 50 10 Output 5 Input 25 8 Output 3 Input 60 15 Output 4","solution":"def max_books(L, W): Returns the maximum number of books that can fit on the shelf. Parameters: L (int): The total length of the shelf. W (int): The width of each book. Returns: int: Maximum number of books that can fit on the shelf. return L // W if __name__ == \\"__main__\\": import sys input = sys.stdin.read L, W = map(int, input().strip().split()) print(max_books(L, W))"},{"question":"Luna and her classmates are preparing for a coding contest. They are given a unique string-related problem to solve during their practice sessions. The problem involves determining if a given string can be transformed into a palindrome by reorganizing its characters. A palindrome is a word that reads the same backward as forward. Write a function that checks if it is possible to rearrange the characters of a given string such that it forms a palindrome. Input The input consists of a single line containing the string `S` (1 ≤ |S| ≤ 1000). The string contains only lowercase English letters. Output Output \\"YES\\" if the string can be rearranged to form a palindrome, otherwise output \\"NO\\". Examples Input civic Output YES Input ivicc Output YES Input hello Output NO Input aabb Output YES","solution":"from collections import Counter def can_form_palindrome(s): Determines if the characters of string s can be rearranged to form a palindrome. Parameters: s (str): The input string. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\". count = Counter(s) odd_count = sum(1 for char in count if count[char] % 2 != 0) if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. Your task is to write a program that reads a sequence of word pairs and determines whether they are anagrams of each other. Input The input is a sequence of datasets. Each dataset consists of two lines, each containing a single word made up of lowercase English letters (a-z). The end of the input is indicated by a line containing two zeros (0 0). Output For each dataset, print \\"Anagram\\" if the words are anagrams of each other or \\"Not Anagram\\" if they are not. Example Input listen silent apple pale 0 0 Output Anagram Not Anagram","solution":"def are_anagrams(word1, word2): Determines if two words are anagrams of each other. # Anagrams must have the same sorted letters return sorted(word1) == sorted(word2) def process_input_sequence(input_sequence): Processes the input sequence to check for anagrams. index = 0 results = [] while index < len(input_sequence): word1 = input_sequence[index] word2 = input_sequence[index+1] if word1 == \\"0\\" and word2 == \\"0\\": break if are_anagrams(word1, word2): results.append(\\"Anagram\\") else: results.append(\\"Not Anagram\\") index += 2 return results # Example usage: # input_sequence = [\\"listen\\", \\"silent\\", \\"apple\\", \\"pale\\", \\"0\\", \\"0\\"] # print(process_input_sequence(input_sequence)) # [\'Anagram\', \'Not Anagram\']"},{"question":"**Problem Statement** In a faraway land, there exist several rectangular islands on a 2D grid. Every island is defined by its bottom-left and top-right corner coordinates. Due to the presence of multiple islands, some overlap with each other, creating complex shapes. The ruler of the land wants to celebrate the unity of all islands by constructing a fence that encloses all islands exactly once, forming the minimum possible perimeter. This fence should be constructed in such a way that it forms the minimum bounding box that includes all individual islands. Your task is to calculate the perimeter of the smallest rectangle that can enclose all given islands. # Input Format The input consists of multiple test cases. The first line of each test case contains a single integer N (1 leq N leq 50{,}000), indicating the number of islands. The next N lines each contain four integers x1_i, y1_i, x2_i, y2_i (-100{,}000 leq x1_i, y1_i, x2_i, y2_i leq 100{,}000). Each line describes an island by its bottom-left corner (x1_i, y1_i) and top-right corner (x2_i, y2_i). You can assume x1_i < x2_i and y1_i < y2_i for all i. The input ends with a line containing a single integer 0, which should not be processed. # Output Format For each test case, output a single line containing the perimeter of the smallest rectangle that can enclose all the islands. # Example Input ``` 2 1 1 4 4 2 2 5 5 3 0 0 2 2 -1 -1 3 3 2 2 4 4 0 ``` # Example Output ``` 16 20 ``` # Explanation In the first test case, there are 2 islands. The minimum rectangle that can enclose the coordinates (1,1) and (5,5) has a perimeter of 16. In the second test case, the smallest rectangle that can enclose the coordinates (-1,-1) and (4,4) has a perimeter of 20. By solving this problem, you will be able to determine the minimum bounding box perimeter required to enclose multiple rectangular islands on a 2D grid.","solution":"def calculate_perimeter(islands): Calculate the perimeter of the smallest rectangle that can enclose all given islands. :param islands: List of tuples, each containing four integers (x1, y1, x2, y2) representing the bottom-left and top-right corner coordinates of an island. :return: Integer, the perimeter of the smallest enclosing rectangle. if not islands: return 0 min_x = min(island[0] for island in islands) min_y = min(island[1] for island in islands) max_x = max(island[2] for island in islands) max_y = max(island[3] for island in islands) width = max_x - min_x height = max_y - min_y return 2 * (width + height) def process_input(input_str): Process the input string to handle multiple test cases and calculate the perimeter for each test case. :param input_str: Multiline string, where each test case starts with a single integer N, followed by N lines each containing four integers (x1, y1, x2, y2). :return: List of integers, where each integer is the perimeter for each test case. lines = input_str.strip().split(\'n\') i = 0 result = [] while i < len(lines): N = int(lines[i]) if N == 0: break islands = [] for j in range(1, N + 1): x1, y1, x2, y2 = map(int, lines[i + j].split()) islands.append((x1, y1, x2, y2)) result.append(calculate_perimeter(islands)) i += N + 1 return result"},{"question":"A software company is organizing a hackathon where the participants are given raw, unformatted text data from various sources. The participants need to clean and transform the text data for analysis. One of the tasks is to implement a function that counts the number of words in a given string. For this problem, a word is defined as a sequence of non-space characters. Your task is to write a function that takes a string as input and returns the number of words in that string. Ignore any leading, trailing, or multiple spaces between words. Input The input consists of a single line containing a string s. Output Output a single integer representing the number of words in the given string. Constraints 1 ≤ |s| ≤ 10^6, where |s| is the length of the string. The string consists of printable ASCII characters only. Example Input \\"hello world\\" Output 2 Input \\" this is a test \\" Output 4","solution":"def count_words(s): Returns the number of words in the given string. A word is defined as a sequence of non-space characters. # Split the string into words based on spaces and filter out empty results words = s.split() # Return the length of the list of words return len(words)"},{"question":"You are given an integer array `nums` of length `N`. A subarray is a contiguous part of the array. The goal is to find a subarray with the maximum possible sum, under the additional constraint that the length of the subarray should lie between the given values `L` and `R` (inclusive). Constraints * 1 ≤ N ≤ 10^5 * -10^4 ≤ nums[i] ≤ 10^4 * 1 ≤ L ≤ R ≤ N Input Input is given from Standard Input in the following format: ``` N L R nums ``` Output Output the maximum sum of a subarray that meets the given length constraints. If no such subarray exists, output `0`. Examples Input ``` 5 2 3 1 -2 3 4 -1 ``` Output ``` 7 ``` Input ``` 3 1 1 -1 -2 -3 ``` Output ``` -1 ``` Input ``` 6 2 4 2 -3 5 -1 6 -4 ``` Output ``` 10 ```","solution":"def max_subarray_sum_with_limits(nums, L, R): Returns the maximum subarray sum where the length of the subarray is constrained between L and R (inclusive). import itertools n = len(nums) if not 1 <= L <= R <= n: return 0 prefix_sums = [0] + list(itertools.accumulate(nums)) max_sum = float(\'-inf\') for i in range(L, n+1): for length in range(L, R+1): if i - length >= 0: current_sum = prefix_sums[i] - prefix_sums[i - length] max_sum = max(max_sum, current_sum) return max_sum if max_sum != float(\'-inf\') else 0 # Example usage: # print(max_subarray_sum_with_limits([1, -2, 3, 4, -1], 2, 3)) # Output: 7"},{"question":"Your task is to write a function that, given a list of integers, returns a new list containing only the integers that are prime numbers. # Function Signature ```python def filter_primes(numbers: List[int]) -> List[int]: ``` # Input - `numbers`: A list of integers. `2 <= len(numbers) <= 100` and `-10^6 <= numbers[i] <= 10^6` for each integer `numbers[i]`. # Output - A list of integers from the input list that are prime numbers. # Example Input: ```python numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] ``` Output: ```python [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] ``` # Constraints - Your function should run efficiently for large inputs within the provided constraints. - Negative numbers should be excluded from consideration as prime numbers. - Zero and one are not considered prime numbers. # Notes - Implement and optimize your solution carefully to handle all edge cases within the given constraints.","solution":"from typing import List def is_prime(n: int) -> bool: Helper function to determine if a given number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def filter_primes(numbers: List[int]) -> List[int]: Given a list of integers, return a new list containing only the prime numbers. return [num for num in numbers if is_prime(num)]"},{"question":"In a remote forest, there are several magical plants. Each plant is characterized by its unique \\"growth factor\\", which determines how fast it grows over time. The forest keeper assigns a unique ID to each plant, ranging from 1 to M inclusive. With time, plants with higher growth factors tend to overshadow those with lower growth factors. Given the number of plants M and a list of integers representing the growth factors of all plants in the forest, your task is to find the maximum possible sum of the growth factors of any subset of the plants such that no pair of plants in the subset have consecutive IDs. Write a function `max_growth_factor_sum(M: int, growth_factors: List[int]) -> int` that computes this maximum sum. # Input format - The first line contains the integer M, denoting the number of plants. - The second line contains M space-separated integers, where the i-th integer represents the growth factor of the plant with ID i. # Output format - Return a single integer which is the maximum possible sum of the growth factors of any subset of plants such that no two plants in the subset have consecutive IDs. # Constraints - 1 ≤ M ≤ 100,000 - 0 ≤ growth_factors[i] ≤ 10,000 # Example Sample Input 1 ``` 5 3 2 5 10 7 ``` Sample Output 1 ``` 15 ``` Sample Input 2 ``` 4 1 2 3 1 ``` Sample Output 2 ``` 4 ``` # Explanation Example 1: - If we pick plants with IDs 1, 3, and 5, we get a sum of 3 + 5 + 7 = 15. - This is the maximum possible sum as picking the plant with ID 4 (with growth factor 10) would prevent us from picking adjacent plants with high growth factors. Example 2: - The optimal subset is picking the plants with IDs 2 and 4, giving us a sum of 2 + 1 = 3. - However, if we pick a subset of plants with IDs 1 and 3, we get a higher sum of 1 + 3 = 4.","solution":"from typing import List def max_growth_factor_sum(M: int, growth_factors: List[int]) -> int: if M == 0: return 0 elif M == 1: return growth_factors[0] # Using dynamic programming to store the maximum sum at each step dp = [0] * M dp[0] = growth_factors[0] dp[1] = max(growth_factors[0], growth_factors[1]) for i in range(2, M): dp[i] = max(dp[i-1], dp[i-2] + growth_factors[i]) return dp[-1]"},{"question":"You are given a directed graph with n vertices and m edges. Each vertex represents a room at a party, and each edge represents a one-way passage between two rooms. A unique caterer is stationed in one of these rooms initially. The caterer has to deliver food to each room exactly once before returning to the initial room. Every room can potentially contain guests, indicated by a number g (1 ≤ g ≤ 100) representing the number of guests in that room. Your task is to determine if the caterer can make a single round trip that covers every room exactly once and returns to the initial room. If so, provide the sequence of rooms visited in the round trip, starting and ending at the initial room, considering that each room is visited exactly once in between. Input The first line contains two integers n and m — the number of rooms and the number of passages between them (1 ≤ n ≤ 18, 0 ≤ m ≤ 100). The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting a one-way passage from room u to room v. The next line contains an integer s (1 ≤ s ≤ n) — the starting room for the caterer. Output If there exists a round trip that covers every room exactly once and returns to the starting room, print «Possible». In the next line, print the sequence of rooms visited in the round trip. If no such round trip exists, print «Impossible». Examples Input 4 5 1 2 2 3 3 4 4 1 1 3 1 Output Possible 1 2 3 4 1 Input 4 3 1 2 2 3 3 4 1 Output Impossible Note In the first example, the graph represents the following directed paths: 1 → 2, 2 → 3, 3 → 4, 4 → 1, and additionally, 1 → 3 The caterer can start at room 1, then follow the path 1 → 2 → 3 → 4 → 1 to visit all rooms exactly once before returning to the initial room. In the second example, it is impossible to find a round trip visiting all rooms exactly once because the passage 4 → 1 is missing.","solution":"from itertools import permutations def is_hamiltonian_cycle(graph, start, n): for perm in permutations(range(1, n + 1)): if perm[0] == start: cycle = perm + (start,) is_valid = True for i in range(n): if graph[cycle[i]][cycle[i + 1]] == 0: is_valid = False break if is_valid: return True, cycle return False, [] def solve(n, m, edges, s): graph = [[0] * (n + 1) for _ in range(n + 1)] for u, v in edges: graph[u][v] = 1 possible, cycle = is_hamiltonian_cycle(graph, s, n) if possible: return \\"Possible\\", cycle else: return \\"Impossible\\", [] def caterer_route(n, m, edges, s): result, cycle = solve(n, m, edges, s) if result == \\"Possible\\": return f\\"{result}n{\' \'.join(map(str, cycle))}\\" else: return result"},{"question":"Masha is teaching her robot to recognize patterns in strings. She has defined two types of patterns: 1. Vowel Pattern: The string contains only vowels (\'a\', \'e\', \'i\', \'o\', \'u\'). 2. Consonant Pattern: The string contains only consonants (all lowercase English letters except vowels). Masha decides that if a string does not match any of these patterns, it is a Mixed Pattern. Given a list of strings, determine the pattern type for each string. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of strings. The next n lines each contain a single string s (1 ≤ |s| ≤ 10^5) — a string of lowercase English letters. Output For each string, print \\"Vowel Pattern\\" if it contains only vowels, \\"Consonant Pattern\\" if it contains only consonants, and \\"Mixed Pattern\\" otherwise. Example Input 5 aeiou bcdf happy eeee xyz Output Vowel Pattern Consonant Pattern Mixed Pattern Vowel Pattern Consonant Pattern","solution":"def determine_pattern_type(strings): Determines the pattern type for each string in a list of strings. Args: strings (list of str): The list of strings to check. Returns: list of str: The pattern type for each string. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} result = [] for s in strings: if all(char in vowels for char in s): result.append(\\"Vowel Pattern\\") elif all(char not in vowels for char in s): result.append(\\"Consonant Pattern\\") else: result.append(\\"Mixed Pattern\\") return result"},{"question":"A university has n students, each with a unique ID number from 1 to n. The university cafeteria offers m different types of dishes, numbered from 1 to m. Each student has a list of their preferred dishes. Your task is to determine the minimum number of different dish types needed so that each student gets at least one of their preferred dishes. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of students and the number of types of dishes. - The next n lines contain the preferences of each student. Each of these lines begins with an integer k (1 ≤ k ≤ m) — the number of preferred dishes of the student, followed by k integers representing the dish numbers the student prefers. Output - Print the minimum number of different dish types required to ensure each student gets at least one of their preferred dishes. Example Input 4 5 3 1 2 3 2 2 4 2 3 5 1 4 Output 2 Explanation In this case, the minimum number of different dish types needed to satisfy the preferences of all students is 2. For instance, dish types {2, 4} suffice: - Student 1 can have dish 2. - Student 2 can have dish 2. - Student 3 can have dish 5. - Student 4 can have dish 4.","solution":"from itertools import combinations def min_dishes_required(n, m, student_preferences): # Construct the list containing sets of preferences for each student student_sets = [] for pref in student_preferences: student_sets.append(set(pref[1:])) # Generate all possible combinations of dishes all_dishes = range(1, m + 1) # Function to check if a set of dishes satisfies all students def satisfies_all_students(dish_set): for stud_set in student_sets: if not stud_set & dish_set: return False return True # Try combinations starting from 1 dish up to m dishes for i in range(1, m + 1): for dish_comb in combinations(all_dishes, i): if satisfies_all_students(set(dish_comb)): return i return m # In the worst case, we need all dishes def solve(n, m, preferences): return min_dishes_required(n, m, preferences)"},{"question":"A city grid is designed with n horizontal streets and m vertical streets. Each street intersects the other, creating a grid of intersections. Each street is represented by a unique identifier, and each intersection in the grid can be identified by a pair of street identifiers. The city council plans to install traffic lights at intersections to manage traffic flow better. However, they have decided that traffic lights are only necessary at intersections where certain types of vehicles (e.g., emergency vehicles) are expected to cross paths at the same time. Each vehicle type has a unique identifier, and their paths on the grid are known beforehand. You are given the paths of two types of vehicles. For a vehicle type that travels horizontally, you are given the street identifiers and for a vehicle type that travels vertically, you are given the street identifiers. Your task is to determine how many intersections will require traffic lights to manage the traffic flow. Input The first line contains two integers t (1 ≤ t ≤ 100) — the number of test cases. Each test case contains three lines. The first line of each test case contains two integers n and m (1 ≤ n, m ≤ 100) — the number of streets the two vehicle types travel through horizontally and vertically, respectively. The second line contains n integers representing the identifiers of the horizontal streets the first vehicle type travels on. The third line contains m integers representing the identifiers of the vertical streets the second vehicle type travels on. Output For each test case, print a single integer: the number of intersections that require traffic lights. Example Input 3 2 2 1 2 3 4 3 3 1 2 5 1 3 5 4 4 1 3 6 7 2 5 6 8 Output 4 3 3 Explanation In the first case, the intersections that require traffic lights are at the coordinates (1,3), (1,4), (2,3), and (2,4). Hence, the answer is 4. In the second case, the intersections are at the coordinates (1,1), (2,3), and (5,5). Hence, the answer is 3. In the third case, the intersections are at the coordinates (1,2), (3,5), and (6,6). The horizontal and vertical streets don\'t always intersect with every possible coordinate set leading to smaller required traffic lights. Thus the answer is 3.","solution":"def count_traffic_lights(t, test_cases): results = [] for case in test_cases: n, m, horizontal_streets, vertical_streets = case result = len(horizontal_streets) * len(vertical_streets) results.append(result) return results"},{"question":"You are given an array of integers. Check if the array can be sorted in non-decreasing order by reversing exactly one subarray (the subarray can be the entire array or just a part of it). For example, if the array is [1, 3, 5, 4, 2], then reversing the subarray [5, 4, 2] gives us [1, 3, 2, 4, 5], which is not sorted. If the array is [1, 3, 5, 4, 6], then reversing the subarray [5, 4] gives us [1, 3, 4, 5, 6], which is sorted. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. Each test case starts with one integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output For each test case, output on a separate line: * \\"YES\\" if the array can be sorted in non-decreasing order by reversing exactly one subarray; * \\"NO\\" otherwise. Example Input 4 5 1 2 5 4 3 5 1 3 5 4 6 5 5 4 3 2 1 2 2 1 Output YES YES YES YES","solution":"def can_be_sorted_by_reversing_one_subarray(t, test_cases): results = [] for case in test_cases: n, arr = case sorted_arr = sorted(arr) l, r = 0, n-1 while l < n and arr[l] == sorted_arr[l]: l += 1 while r >= 0 and arr[r] == sorted_arr[r]: r -= 1 if l <= r: if arr[l:r+1][::-1] == sorted_arr[l:r+1]: results.append(\\"YES\\") else: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"Sara is fascinated by prime numbers. She defines a \\"prime sum\\" of a number as the sum of its prime factors where each prime factor is counted only once, regardless of its multiplicity. For example, the prime sum of 12 is 5 since the prime factors of 12 are 2 and 3, and 2 + 3 = 5. Sara also defines a \\"prime sum chain\\" as follows: For a given number N, if its prime sum is P, then P itself might have a prime sum Q, and so forth until a prime sum which is a prime number is reached. Write a program that computes the prime sum chain for a given number N. The chain should end when a prime number is reached. Input Input consists of a single integer N (2 ≤ N ≤ 1000). Output Output should contain the prime sum chain, with each number in the chain separated by a space. Examples Input 12 Output 12 5 Input 18 Output 18 5 Input 60 Output 60 10 7 Note In the first sample, the prime sum of 12 is 5, which is a prime number. In the second sample, the prime sum of 18 is also 5. In the third sample, the prime sums are 60 -> 10 -> 7. Since 7 is a prime, the chain stops there.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n ** 0.5) + 1 for i in range(3, max_divisor, 2): if n % i == 0: return False return True def prime_factors(n): factors = set() while n % 2 == 0: factors.add(2) n = n // 2 for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.add(i) n = n // i if n > 2: factors.add(n) return factors def prime_sum(n): factors = prime_factors(n) return sum(factors) def prime_sum_chain(n): result = [n] while True: prime_sum_value = prime_sum(result[-1]) if is_prime(prime_sum_value): result.append(prime_sum_value) break else: result.append(prime_sum_value) return result print(prime_sum_chain(12)) print(prime_sum_chain(18)) print(prime_sum_chain(60))"},{"question":"Polycarp is a big fan of unique and interesting numbers. He calls a number interesting if it contains all the digits from 0 to 9 exactly once (you cannot skip or repeat any digit from 0 to 9). Given an integer n, Polycarp wants to know the smallest interesting number that is greater than or equal to n. Input The first line of the input contains one integer n (1 ≤ n ≤ 10^9). Output Print one integer — the smallest interesting number that is greater than or equal to n. Examples Input 1234567890 Output 1234567890 Input 987654320 Output 1023456789 Input 900000001 Output 1023456789 Note In the first example, the given number 1234567890 is already an interesting number, so the output is the same number. In the second example, the smallest interesting number greater than 987654320 is 1023456789. In the third example, the given number 900000001 does not contain all the digits from 0 to 9 exactly once. The smallest interesting number greater than 900000001 is 1023456789.","solution":"def is_interesting(number): Checks if the number is interesting, which means it contains each digit from 0 to 9 exactly once. number_str = str(number) return len(number_str) == 10 and set(number_str) == set(\'0123456789\') def next_interesting_number(n): Returns the smallest interesting number that is greater than or equal to n. current_number = max(n, 1023456789) while not is_interesting(current_number): current_number += 1 return current_number"},{"question":"Given an integer n representing the number of nodes in a network and a list of edges connecting these nodes, your task is to find the maximum number of nodes that form a connected component in the network. A connected component is defined as a set of nodes where there is a path (direct or indirect) between every pair of nodes in the set. INPUT: - The first line contains an integer n, the number of nodes. - The second line contains an integer e, the number of edges. - The next e lines each contain two integers u and v, indicating that there is an edge between node u and node v. OUTPUT: - Print the size of the largest connected component in the network. CONSTRAINTS: - 1 <= n <= 1000 - 0 <= e <= 10000 SAMPLE INPUT: 6 5 1 2 2 3 1 3 4 5 5 6 SAMPLE OUTPUT: 3 EXPLANATION: In the given example, the nodes can be divided into two connected components: {1, 2, 3} and {4, 5, 6}. The largest connected component has 3 nodes.","solution":"def largest_connected_component(n, edges): from collections import defaultdict, deque # Create the adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start, visited): queue = deque([start]) visited.add(start) size = 0 while queue: node = queue.popleft() size += 1 for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return size visited = set() max_size = 0 for node in range(1, n + 1): if node not in visited: component_size = bfs(node, visited) max_size = max(max_size, component_size) return max_size"},{"question":"Problem Given an integer array arr and a series of q queries, each query consists of two integers l and r ( 1 leq l leq r leq n ). For each query, calculate and output the sum of the subarray from index l to r inclusive. Output the remainder after dividing by 1000000007 . Constraints The following conditions hold: * 1 leq n leq 10^5 * 1 leq q leq 10^5 * -10^9 leq arr[i] leq 10^9 * 1 leq l leq r leq n Input The input is given in the following format: n arr[1] , arr[2] , ldots , arr[n] q l_1 , r_1 l_2 , r_2 ldots l_q , r_q Four integers: n followed by the n integers of the array, followed by q , followed by q pairs of integers l and r . Output Print exactly q lines, each containing a single integer, the sum of the subarray for the corresponding query modulo 1000000007 . Examples Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Output 6 9 15 Input 7 -1 2 -3 4 5 -6 7 2 1 5 3 7 Output 7 7","solution":"def sum_of_subarrays(n, arr, queries): MOD = 1000000007 # Create prefix sum array prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = (prefix_sum[i-1] + arr[i-1]) % MOD # Process each query result = [] for l, r in queries: subarray_sum = (prefix_sum[r] - prefix_sum[l-1]) % MOD result.append(subarray_sum) return result # Example Usage: n = 5 arr = [1, 2, 3, 4, 5] queries = [(1, 3), (2, 4), (1, 5)] print(sum_of_subarrays(n, arr, queries)) # Output: [6, 9, 15]"},{"question":"Given a string of lowercase English letters, a ‘happy’ string is defined as a string where no two adjacent characters are the same. Your task is to convert a given string into a ‘happy’ string by rearranging the characters. If it is possible to do so, return the rearranged string. If it is not possible to rearrange the string in such a way, return the message \\"Not possible\\". Input: - The first line contains an integer t, the number of test cases. - Each of the next t lines contains a string s. Output: - For each test case, output either the rearranged \'happy\' string or \\"Not possible\\" without quotes. Constraints: 1 ≤ t ≤ 10^4 1 ≤ |s| ≤ 10^5 SAMPLE INPUT 3 aabb aaab abc SAMPLE OUTPUT abab Not possible abc","solution":"import heapq from collections import Counter def rearrange_to_happy_string(s): Rearranges the input string into a \'happy\' string (no two adjacent characters are the same). Returns the rearranged string if possible, otherwise returns \\"Not possible\\". counter = Counter(s) max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char rearranged_str = \'\'.join(result) if len(rearranged_str) == len(s): return rearranged_str else: return \\"Not possible\\" def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(rearrange_to_happy_string(s)) return results def process_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = lines[1:] return t, test_cases"},{"question":"You are tasked with implementing a function that checks whether a given sequence of parentheses is balanced. A sequence of parentheses is balanced if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and the pairs are properly nested. Input The input consists of a single string s (1 ≤ |s| ≤ 105), which contains only characters \'(\' and \')\'. Output The output should be a single line containing \\"YES\\" if the sequence is balanced, and \\"NO\\" otherwise. Examples Input (()) Output YES Input (())) Output NO Input )(() Output NO Note In the first example, the sequence is balanced because every opening parenthesis has a corresponding closing parenthesis and they are properly nested. In the second example, the sequence is not balanced because there is an extra closing parenthesis. In the third example, the sequence is not balanced because it starts with a closing parenthesis, so proper nesting is violated.","solution":"def is_balanced_parentheses(s): Checks if a given sequence of parentheses is balanced. Parameters: s (str): The input string containing only \'(\' and \')\' Returns: str: \\"YES\\" if the sequence is balanced, otherwise \\"NO\\" stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"In the magical land of Eldoria, there\'s a unique currency system where each coin has a positive integer value. The wise wizard Eldar wants to pay a total amount N using the least number of coins. However, the wizard can only use coins whose values are square numbers (like 1, 4, 9, 16, and so on). Your task is to calculate the minimum number of coins needed to pay exactly this amount N using coins of square values. Input The input consists of one integer N (1 ≤ N ≤ 10^4). Output Output a single integer representing the minimum number of coins required to pay exactly the amount N. Examples Input 12 Output 3 Input 13 Output 2 Note For the first example, the amount 12 can be paid using three coins of values 4 (4 + 4 + 4 = 12). For the second example, the amount 13 can be paid using two coins of values 9 and 4 (9 + 4 = 13).","solution":"def min_coins(N): import math dp = [float(\'inf\')] * (N + 1) dp[0] = 0 # Generate all square numbers less than N square_numbers = [i * i for i in range(1, int(math.sqrt(N)) + 1)] # Dynamic programming approach to find the minimum coins for i in range(1, N + 1): for sq in square_numbers: if i >= sq: dp[i] = min(dp[i], dp[i - sq] + 1) return dp[N]"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. Your task is to determine if it\'s possible to rearrange the characters of the string such that the resulting string contains exactly k distinct characters, where each character appears at least once. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) - the number of test cases. Each test case consists of two lines: - The first line contains the string s (1 ≤ |s| ≤ 10^5). - The second line contains the integer k (1 ≤ k ≤ 26). Output For each test case, print \\"YES\\" if it\'s possible to rearrange the characters of the string to contain exactly k distinct characters, and \\"NO\\" otherwise. Example Input 3 abcabc 2 aaaa 1 abcdefg 8 Output YES YES NO Note: - In the first test case, we can rearrange \\"abcabc\\" to get \\"aabbcc\\", which contains exactly 2 distinct characters. - In the second test case, the string already contains exactly 1 distinct character, \\"a\\". - In the third test case, we can\'t have 8 distinct characters in the rearranged string since the original string only contains 7 distinct characters.","solution":"def can_rearrange_to_k_distinct_chars(s, k): Determines if it is possible to rearrange the string s to contain exactly k distinct characters. Parameters: s (str): The input string consisting of lowercase English letters. k (int): The number of distinct characters desired. Returns: str: \\"YES\\" if it\'s possible to rearrange the string to contain exactly k distinct characters, otherwise \\"NO\\". unique_chars = len(set(s)) return \\"YES\\" if unique_chars >= k and len(s) >= k else \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): s, k = test_cases[i] result = can_rearrange_to_k_distinct_chars(s, k) results.append(result) return results"},{"question":"In a bustling city, street intersections are represented on a grid of `m` rows and `n` columns. Each intersection can be represented as a cell in an `m x n` grid. Cars are allowed to travel either north, south, east, or west, but they cannot move diagonally. There are no traffic lights, so cars can only turn at an intersection where there are no traffic jams. A traffic jam occurs in a cell only if that cell is marked with a `1`; otherwise, it\'s marked with a `0`. Your task is to determine if there is a possible path for the cars to travel from the northwest corner (top-left corner) of the grid to the southeast corner (bottom-right corner) without encountering a traffic jam. If a path exists, print \\"YES\\"; otherwise, print \\"NO\\". Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format: m n r1_1 r1_2 ... r1_n r2_1 r2_2 ... r2_n ... rm_1 rm_2 ... rm_n The values of `m` and `n` (1 ≤ m, n ≤ 100) represent the number of rows and columns, respectively. For each dataset, cells in the grid are described with `0` (no traffic jam) or `1` (traffic jam). The number of datasets does not exceed 200. Each grid is separated by a blank line. Output For each dataset, output \\"YES\\" if there is a path from the northwest corner to the southeast corner; otherwise, output \\"NO\\". Example Input 3 3 0 0 0 1 1 0 0 0 0 4 4 0 1 0 0 0 1 1 0 0 0 0 0 0 1 0 0 3 3 0 1 0 1 1 0 0 0 0 0 Output YES YES NO","solution":"def dfs(grid, m, n, i, j, visited): if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == 1 or visited[i][j]: return False if i == m - 1 and j == n - 1: return True visited[i][j] = True if dfs(grid, m, n, i + 1, j, visited): # down return True if dfs(grid, m, n, i - 1, j, visited): # up return True if dfs(grid, m, n, i, j + 1, visited): # right return True if dfs(grid, m, n, i, j - 1, visited): # left return True return False def is_path_possible(m, n, grid): if grid[0][0] == 1 or grid[m-1][n-1] == 1: return \\"NO\\" visited = [[False for _ in range(n)] for _ in range(m)] return \\"YES\\" if dfs(grid, m, n, 0, 0, visited) else \\"NO\\" def process_input(input_data): datasets = input_data.strip().split(\'nn\') results = [] for dataset in datasets: lines = dataset.split(\'n\') m, n = map(int, lines[0].split()) if m == 0 and n == 0: break grid = [list(map(int, line.split())) for line in lines[1:]] result = is_path_possible(m, n, grid) results.append(result) return results"},{"question":"You are given a list of commands that control the position of a robot on a 2D plane. The robot starts at the origin point (0, 0) and can move up, down, left, and right. Each command is described by a direction (\\"U\\" for up, \\"D\\" for down, \\"L\\" for left, \\"R\\" for right) and a number of steps to move in that direction. Your task is to determine the final position of the robot after executing all the commands. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of commands. Each of the next n lines contains a command consisting of a single character (either \'U\', \'D\', \'L\', or \'R\') and an integer s (1 ≤ s ≤ 109), representing the direction and the number of steps to take in that direction. Output Print two integers x and y on a single line, the final coordinates of the robot. Examples Input 3 U 3 R 2 D 1 Output 2 2","solution":"def final_position(n, commands): Returns the final position of the robot after executing all the commands. Parameters: n (int): Number of commands. commands (list of tuples): Each tuple contains a direction character and an integer number of steps. Returns: tuple: Final coordinates (x, y) of the robot. x, y = 0, 0 for command in commands: direction, steps = command if direction == \'U\': y += steps elif direction == \'D\': y -= steps elif direction == \'L\': x -= steps elif direction == \'R\': x += steps return x, y # Example usage # if __name__ == \\"__main__\\": # n = 3 # commands = [(\\"U\\", 3), (\\"R\\", 2), (\\"D\\", 1)] # print(final_position(n, commands)) # Output: (2, 2)"},{"question":"Example Write a function that takes a list of integers `nums` and a single integer `target`. Your task is to write an algorithm that finds three numbers in `nums` such that the sum is closest to `target`. Return the sum of the three numbers. You may assume that each input would have exactly one solution. Function Signature: ```python def threeSumClosest(nums: List[int], target: int) -> int: ``` # Input - A list of integers `nums` of length `n (3 ≤ n ≤ 10^3)`. - An integer `target`. # Output - An integer representing the sum of the three integers in `nums` closest to `target`. # Example Input ``` nums = [-1, 2, 1, -4], target = 1 ``` Output ``` 2 ``` Explanation The sum that is closest to the target is 2 (-1 + 2 + 1 = 2).","solution":"from typing import List def threeSumClosest(nums: List[int], target: int) -> int: nums.sort() closest_sum = float(\'inf\') closest_diff = float(\'inf\') for i in range(len(nums) - 2): left, right = i + 1, len(nums) - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] current_diff = abs(current_sum - target) if current_diff < closest_diff: closest_diff = current_diff closest_sum = current_sum if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: return current_sum return closest_sum"},{"question":"Given a string consisting of multiple words separated by spaces and with all lowercase letters, your task is to generate an acronym for the string. An acronym is formed by taking the first letter of each word and converting it to uppercase. Constraints: * The string consists of 1 to 100 words. * Each word in the string only contains lowercase English letters. * The length of each word is between 1 and 10, inclusive. Input: The input is given from Standard Input in the following format: a string of words separated by spaces Output: Print the acronym of the string. Examples Input good morning everyone Output GME Input data science and algorithms Output DSAA Input just keep swimming Output JKS","solution":"def generate_acronym(phrase): Generates an acronym from a phrase consisting of multiple words separated by spaces. Each word\'s first letter is taken and converted to uppercase to form the acronym. :param phrase: String, the input phrase consisting of words separated by spaces. :return: String, the acronym formed by the first letters of each word in uppercase. words = phrase.split() acronym = \'\'.join([word[0].upper() for word in words]) return acronym"},{"question":"In a digital library, there are n books, and each book is identified by a unique positive integer ID from 1 to n. The library has installed an automated system to manage book lending and returning, and the books are initially available. However, due to the popularity of the library, books are frequently checked out and returned. Whenever a book is checked out, it becomes unavailable for any other user until it is returned. The library system also supports a notification feature to determine how many books are currently unavailable at any given point. Your task is to implement this system based on the given input of operations. Each operation is either a book check out or a book return. For each check out operation, if the book is already checked out, it should be ignored (i.e., no action should be taken). For each return operation, if the book is already available, it should be ignored as well. Additionally, you must output the current count of unavailable books after executing each operation. Input The first line of input contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the number of books and the number of operations to be performed. Each of the next q lines contains an operation. An operation is formatted as follows: - \\"CHECKOUT x\\" (1 ≤ x ≤ n): implying a request to check out the book with ID x. - \\"RETURN x\\" (1 ≤ x ≤ n): implying a request to return the book with ID x. Output After processing each operation, output the current count of unavailable books. Examples Input 5 6 CHECKOUT 1 CHECKOUT 2 CHECKOUT 1 RETURN 2 RETURN 2 CHECKOUT 3 Output 1 2 2 1 1 2 Input 3 4 CHECKOUT 2 RETURN 2 CHECKOUT 1 CHECKOUT 3 Output 1 0 1 2 Explanation In the first example, the sequence of operations results in the following states: 1. CHECKOUT 1: Book 1 is checked out. Unavailable books: 1. 2. CHECKOUT 2: Book 2 is checked out. Unavailable books: 2. 3. CHECKOUT 1: Book 1 is already checked out. No change. 4. RETURN 2: Book 2 is returned. Unavailable books: 1. 5. RETURN 2: Book 2 is already available. No change. 6. CHECKOUT 3: Book 3 is checked out. Unavailable books: 2. In the second example, the sequence of operations results in the following states: 1. CHECKOUT 2: Book 2 is checked out. Unavailable books: 1. 2. RETURN 2: Book 2 is returned. Unavailable books: 0. 3. CHECKOUT 1: Book 1 is checked out. Unavailable books: 1. 4. CHECKOUT 3: Book 3 is checked out. Unavailable books: 2.","solution":"def manage_library(n, q, operations): unavailable_books = set() results = [] for op in operations: action, book_id = op.split() book_id = int(book_id) if action == \'CHECKOUT\': if book_id not in unavailable_books: unavailable_books.add(book_id) elif action == \'RETURN\': if book_id in unavailable_books: unavailable_books.remove(book_id) results.append(len(unavailable_books)) return results"},{"question":"Write a program which reads a list of integers and an integer k, and rotates the list k positions to the right. Constraints * 1 ≤ length of the list ≤ 1000 * 0 ≤ k ≤ 10000 * Each integer in the list will be between -1000 and 1000 (inclusive) Input The input consists of two lines. The first line contains the integers separated by a space. The second line contains the integer k. Output Print the list after rotating k positions to the right. The output should be a single line of integers separated by a space. Example Input 1 2 3 4 5 2 Output 4 5 1 2 3 Input -1 3 4 9 12 5 Output -1 3 4 9 12","solution":"def rotate_list(nums, k): Rotates the list nums to the right by k positions. n = len(nums) k = k % n return nums[-k:] + nums[:-k] def process_input(input_str): Process input string containing two lines. First line is the list of integers and the second line is the integer k. lines = input_str.strip().split(\\"n\\") nums = list(map(int, lines[0].split())) k = int(lines[1]) return nums, k def main(input_str): nums, k = process_input(input_str) rotated = rotate_list(nums, k) return \\" \\".join(map(str, rotated))"},{"question":"Lisa is planning her week and wants to manage her energy levels effectively. She has n tasks to complete, and each task i has an energy cost of ai. Lisa has a maximum energy capacity of m units per day. She can split tasks across multiple days, but she must dedicate whole days to tasks and cannot switch tasks in the middle of a day. Additionally, she wants to minimize the number of days she spends working. Your task is to determine the minimum number of days required for Lisa to complete all tasks without exceeding her daily energy capacity. Input The first line contains two positive integer numbers n and m (1 ≤ n ≤ 2·10^5, 1 ≤ m ≤ 10^4) — the total number of tasks and Lisa\'s maximum energy capacity per day. The second line contains sequence of integers a1, a2, ..., an (1 ≤ ai ≤ 10^4) — the energy cost of each task. Output Print the minimum number of days required for Lisa to complete all tasks. Examples Input 5 10 2 8 3 7 6 Output 3 Input 4 5 5 5 5 5 Output 4 Note In the first example, Lisa can complete the tasks in the following way: - Day 1: 2, 8 (total 10 units of energy) - Day 2: 3, 7 (total 10 units of energy) - Day 3: 6 (total 6 units of energy) In the second example, Lisa cannot combine any tasks within a day since each task costs exactly 5 units of energy, which matches her daily energy limit. Therefore, she needs 4 days to complete all tasks.","solution":"def min_days_to_complete_tasks(n, m, tasks): Determine the minimum number of days required to complete all tasks without exceeding the daily energy limit. :param n: The total number of tasks :param m: Maximum energy capacity per day :param tasks: List of tasks where each task has an energy cost :return: Minimum number of days required days = 0 current_day_energy = 0 for task in tasks: if current_day_energy + task <= m: current_day_energy += task else: days += 1 current_day_energy = task if current_day_energy > 0: days += 1 return days"},{"question":"You are given an integer n. Calculate the sum of the squares of all integers from 1 to n. Input Input data contains a single integer n. The integer n is between 1 and 100, inclusive. Output Output the sum of the squares of all integers from 1 to n. Examples Input 3 Output 14 Input 4 Output 30","solution":"def sum_of_squares(n): Returns the sum of the squares of all integers from 1 to n. Parameters: n (int): the upper limit integer. Returns: int: the sum of the squares of all integers from 1 to n. return sum(i**2 for i in range(1, n + 1))"},{"question":"Problem Description: If you know what is a Prime Number and Sieve of Eratosthenes you can skip to problem statement. What is a Prime Number? A prime number is a natural number greater than 1 that is not formed by multiplying two smaller natural numbers. In other words, a prime number is one which has exactly two distinct divisors: 1 and itself. For example, the first few prime numbers are 2, 3, 5, 7, 11, and 13. Sieve of Eratosthenes: The Sieve of Eratosthenes is an ancient algorithm used to find all primes up to a given limit. It does so incrementally by marking the multiples of each prime number starting from 2. Here’s a brief rundown of the algorithm: 1. Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n). 2. Let p initially be 2, the smallest prime number. 3. Enumerate the multiples of p by counting up from p^2 and mark them in the list (these will be 2p, 3p, 4p, etc.; p itself should not be marked). 4. Find the smallest number in the list greater than p that is not marked. If there is no such number, stop. Otherwise, let p now equal this new number (which is the next prime), and repeat step 3. 5. When the algorithm terminates, the numbers that remain unmarked are all the primes below n. For example, if n = 10, the list would be: (2, 3, 4, 5, 6, 7, 8, 9, 10), and After applying the sieve algorithm it would be: (2, 3, 5, 7), which are the primes less than 10. Problem Statement: Given an integer n, you need to count the number of prime numbers less than or equal to n. Input: The first line contains an integer t denoting the number of test cases. Each test case contains one line with a single integer n. Output: For each test case, print the number of prime numbers less than or equal to n. Constraints: 1 <= t <= 10 1 <= n <= 1000000 Example: Sample Input: 3 10 20 30 Sample Output: 4 8 10 Sample Explanation: For n = 10, the primes less than or equal to 10 are 2, 3, 5, 7. So the output is 4. For n = 20, the primes less than or equal to 20 are 2, 3, 5, 7, 11, 13, 17, 19. So the output is 8. For n = 30, the prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29. Hence, the output is 10.","solution":"def sieve_of_eratosthenes(limit): Generates a list of prime numbers up to the given limit using the Sieve of Eratosthenes algorithm. is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False p = 2 while p * p <= limit: if is_prime[p]: for i in range(p * p, limit + 1, p): is_prime[i] = False p += 1 return is_prime def count_primes_up_to_n(n, primes): Counts the number of prime numbers less than or equal to n. return sum(primes[:n + 1]) def count_primes(test_cases): Given a list of test cases, generates the number of prime numbers less than or equal to n for each test case. max_n = max(test_cases) primes = sieve_of_eratosthenes(max_n) results = [count_primes_up_to_n(n, primes) for n in test_cases] return results"},{"question":"In a certain game, the player is given a string `s` consisting of lowercase English letters. The player\'s task is to perform operations to make all characters in the string identical with the minimum number of operations. In one operation, the player can choose any character in the string and change it to any other lowercase English character. You are required to determine the minimum number of operations needed to make all characters in the string identical. Input The input consists of a single line containing the string `s`. The string will contain between 1 and 100 characters, inclusive. Output Output a single integer representing the minimum number of operations required to make all characters in the string identical. Examples Input aaabbb Output 3 Input abcde Output 4 Note In the first example, the player can change three \'b\'s to \'a\'s to make the string \\"aaaaaa\\". Therefore, the minimum number of operations is 3. In the second example, since all characters are different, the player can change any four characters to match the fifth character. Thus, the minimum number of operations is 4.","solution":"def min_operations_to_make_identical(s): Calculates the minimum number of operations required to make all characters in the string identical. An operation consists of choosing any character in the string and changing it to any other character. Parameters: s (str): input string consisting of lowercase English letters Returns: int: minimum number of operations needed from collections import Counter if len(s) == 1: return 0 char_count = Counter(s) most_common_char_count = char_count.most_common(1)[0][1] return len(s) - most_common_char_count"},{"question":"You are given a stock price analyzer which stores prices of a stock over a period of time. The analyzer allows you to add the stock price for a particular time unit, and it can also return the maximum stock price seen so far. Let\'s define the operations as follows: - \\"insert <price>\\" - Adds the price of the stock at the current time unit. - \\"max\\" - Returns the maximum price seen so far. Write a program to simulate the operations of the stock price analyzer. Input: - A series of commands, each on a new line. The command can be either of the format \\"insert <price>\\" where `<price>` is a positive integer or \\"max\\". - The number of commands will be less than or equal to 100. Output: - For each \\"max\\" command, print the maximum stock price seen so far. Example: Input: ``` insert 100 insert 120 max insert 90 insert 150 max insert 105 max ``` Output: ``` 120 150 150 ```","solution":"class StockPriceAnalyzer: def __init__(self): self.prices = [] self.max_price = None def insert(self, price): self.prices.append(price) if self.max_price is None or price > self.max_price: self.max_price = price def get_max(self): return self.max_price def process_commands(commands): analyzer = StockPriceAnalyzer() output = [] for command in commands: if command.startswith(\\"insert\\"): price = int(command.split()[1]) analyzer.insert(price) elif command == \\"max\\": output.append(analyzer.get_max()) return output"},{"question":"**Problem Statement** John and Mary love puzzles and spend a lot of time solving them together. They particularly enjoy working on puzzles that challenge their logical thinking and mathematical skills. One day, they came up with a unique problem involving sequences of numbers. Given two sequences of non-negative integers A and B of length N, John wants to transform sequence A into sequence B by applying the minimum number of operations. In one operation, John can select any element of sequence A and either increment or decrement it by 1. John needs your help to determine the minimum number of operations required to transform sequence A into sequence B. **Input** - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the length of the sequences. - The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of initial sequence A. - The third line contains N space-separated integers B1, B2, ..., BN denoting the elements of target sequence B. **Output** For each test case, output a single line containing the minimum number of operations required to transform sequence A into sequence B. **Constraints** - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 0 ≤ Ai ≤ 10^9 - 0 ≤ Bi ≤ 10^9 **Example** Input: ``` 2 3 1 2 3 3 2 1 4 0 1 2 3 3 2 1 0 ``` Output: ``` 4 6 ``` **Explanation** In the first test case: - Transform 1 to 3 with 2 operations (increment by 2). - No change needed for 2. - Transform 3 to 1 with 2 operations (decrement by 2). Thus, the minimum number of operations is 2 + 0 + 2 = 4. In the second test case: - Transform 0 to 3 with 3 operations (increment by 3). - Transform 1 to 2 with 1 operation (increment by 1). - Transform 2 to 1 with 1 operation (decrement by 1). - Transform 3 to 0 with 3 operations (decrement by 3). Thus, the minimum number of operations is 3 + 1 + 1 + 3 = 8.","solution":"def min_operations_to_transform(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] B = test_cases[i][2] operations = sum(abs(A[j] - B[j]) for j in range(N)) results.append(operations) return results"},{"question":"You are given a matrix filled with non-negative integers. Your task is to find the minimum sum of elements required to traverse from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1). You are only allowed to move either down or right one step at a time. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the matrix. The next m lines contain n integers each, representing the cells in the matrix. Each integer is between 0 and 10000. Output Print the minimum sum of elements required to traverse from the top-left to the bottom-right corner. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3 Note In the first example, the optimal path is 1 → 3 → 1 → 1 → 1, for a total sum of 7. In the second example, the optimal path is 1 → 2 → 1, for a total sum of 3.","solution":"def min_path_sum(matrix): Given a matrix filled with non-negative integers, find the minimum sum of elements required to traverse from the top-left corner to the bottom-right corner. You are only allowed to move down or right one step at a time. if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) # Create a 2D DP array to store the minimum path sums for each cell dp = [[0] * n for _ in range(m)] dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The bottom-right corner will have the minimum path sum return dp[m-1][n-1]"},{"question":"In a video game, a player needs to collect a specific number of coins that are hidden across various levels. Each level has a unique number of coins, and the player can only collect coins if they complete the levels sequentially without skipping any. Given a target number of coins, find the minimum number of levels the player must complete to collect at least that many coins. If it is impossible to reach the target number of coins due to limited coins available in levels, return -1. Input The input consists of two lines: 1. A single integer T (1 ≤ T ≤ 10^9), the target number of coins. 2. A list of integers C, where each element Ci (1 ≤ Ci ≤ 10^6, 1 ≤ i ≤ 10^5), represents the number of coins available in level i. Output Print a single integer representing the minimum number of levels needed to collect at least T coins. If it is not possible to collect at least T coins, print -1. Examples Input 15 1 2 3 4 5 6 7 Output 5 Input 20 2 4 1 7 Output -1 Note In the first example, the player needs to collect 15 coins. The sum of coins from levels 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15, so the player must complete at least 5 levels. In the second example, the sum of all available coins is 2 + 4 + 1 + 7 = 14, which is less than the target 20. Therefore, it is impossible to collect the target number of coins, and the output is -1.","solution":"def minimum_levels_to_collect_coins(T, C): Find the minimum number of levels needed to collect at least T coins. Parameters: T (int): The target number of coins. C (list): A list of integers representing the number of coins in each level. Returns: int: The minimum number of levels to collect at least T coins, or -1 if it is not possible. total_coins = 0 for level, coins in enumerate(C, 1): total_coins += coins if total_coins >= T: return level return -1"},{"question":"Hector is an enthusiast of data conversion and likes to convert binary strings into decimal numbers. However, he is currently facing a challenging task and needs your help. Hector has a binary string b of length n, and he wants to find out the maximum value of a decimal number he can obtain by flipping at most k bits (changing a \'0\' to \'1\' or \'1\' to \'0\') in the binary string. You are to determine the maximum decimal value Hector can obtain by flipping at most k bits in the binary string. Input: The first line of input contains an integer n (1 ≤ n ≤ 200,000) which denotes the length of the binary string. The second line contains the binary string b of length n. The third line contains an integer k (0 ≤ k ≤ n), which is the maximum number of bits Hector can flip. Output: Output a single integer, the maximum decimal value obtainable by flipping at most k bits. Examples: Input: 5 11010 1 Output: 30 Input: 4 0011 2 Output: 15 Note: In the first example, initially, the binary string is \\"11010\\" which is 26 in decimal. Hector can flip one bit to get \\"11110\\" which is 30 in decimal, which is the maximum possible value by flipping one bit. In the second example, the binary string is \\"0011\\". By flipping the first two \'0\'s to \'1\'s, Hector can obtain the binary string \\"1111\\", which is 15 in decimal, the maximum possible value by flipping two bits.","solution":"def maximize_decimal_value(n, b, k): Returns the maximum decimal value obtainable by flipping at most k bits in the binary string b of length n. # Initialize answer with the current value of binary string max_value = int(b, 2) # Helper function to flip a bit in a binary string def flip_bit(binary_str, index): flipped = list(binary_str) flipped[index] = \'0\' if binary_str[index] == \'1\' else \'1\' return \'\'.join(flipped) # Try flipping each possible combination of at most k bits import itertools for num_flips in range(1, k + 1): for indices in itertools.combinations(range(n), num_flips): flipped_b = b for index in indices: flipped_b = flip_bit(flipped_b, index) max_value = max(max_value, int(flipped_b, 2)) return max_value"},{"question":"You are given a list of products, each with a unique product ID, price, and a quantity purchased by customers. Create a program that outputs the product ID of the highest grossing product. The highest grossing product is the one that has the highest total sales (price multiplied by quantity purchased). If there are multiple products with the same highest total sales, return the product with the smallest product ID. **Input:** - The first line contains an integer n (1 ≤ n ≤ 1000), the number of products. - The next n lines each contain three integers separated by spaces: product ID (1 ≤ product ID ≤ 1000), price (1 ≤ price ≤ 1000), and quantity purchased (1 ≤ quantity purchased ≤ 1000). **Output:** - Output a single integer, the product ID of the highest grossing product. **Sample Input:** ``` 5 101 200 3 102 150 5 103 300 2 104 200 2 105 150 4 ``` **Sample Output:** ``` 102 ```","solution":"def highest_grossing_product(n, products): Returns the product ID of the highest grossing product. Args: n : int : number of products products : list : list of tuples where each tuple contains product ID, price and quantity purchased Returns: int : product ID of highest grossing product max_sales = 0 max_product_id = float(\'inf\') for product in products: product_id, price, quantity = product total_sales = price * quantity if total_sales > max_sales or (total_sales == max_sales and product_id < max_product_id): max_sales = total_sales max_product_id = product_id return max_product_id"},{"question":"In a faraway land of Equalia, the president decided that he wants to ensure fair distribution of resources among the newly established districts. Each district in Equalia is represented as a connected subgraph of cities. The president plans to divide the cities into districts based on the following rules: 1. Each district must be connected internally by roads. 2. Each district should have exactly `k` cities. Determine if it is possible to partition the cities into any number of such districts. If possible, print one such partition. If it is not possible, print \\"NO\\". Input The input contains several test cases. The first input line contains a single integer t — number of test cases. Each test case is described as follows: - The first line contains three integers n, m, and k (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000, 1 ≤ k ≤ n) — the number of cities, the number of roads, and the exact number of cities each district should contain. - Each of the next m lines contains two space-separated integers u and v (1 ≤ u, v ≤ n), representing a bidirectional road between city u and city v. Output For each test case, if it is possible to partition the cities into districts as described, print \\"YES\\". Then on the next line print n space-separated integers where the j-th integer is the district number of the j-th city. If there are multiple solutions, print any valid one. If it is not possible, print \\"NO\\". Example Input 2 6 5 2 1 2 2 3 3 4 4 5 5 6 7 6 3 1 2 2 3 3 4 4 5 5 6 6 7 Output YES 1 1 2 2 3 3 NO","solution":"def is_possible_partition(n, m, k, edges): from collections import defaultdict, deque if n % k != 0: return \\"NO\\", [] adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) def bfs(start, visited): queue = deque([start]) component = [] while queue: node = queue.popleft() if not visited[node]: visited[node] = True component.append(node) for neighbor in adj_list[node]: if not visited[neighbor]: queue.append(neighbor) return component visited = [False] * (n + 1) components = [] for i in range(1, n + 1): if not visited[i]: component = bfs(i, visited) components.append(component) partitions = [] for component in components: if len(component) % k != 0: return \\"NO\\", [] num_parts = len(component) // k for i in range(num_parts): partitions.append(component[i*k:(i+1)*k]) result = [\\"NO\\"] if len(partitions) == n // k: result = [\\"YES\\"] district_number = 1 indexing = {} for part in partitions: for city in part: indexing[city] = district_number district_number += 1 result.append(\\" \\".join(str(indexing[i]) for i in range(1, n + 1))) return result[0], (result[1] if len(result) > 1 else \\"\\") def solve(test_cases): results = [] for n, m, k, edges in test_cases: result, partition = is_possible_partition(n, m, k, edges) results.append((result, partition)) return results"},{"question":"In a thriving futuristic city, autonomous delivery drones are used to deliver packages across various locations. Each drone can carry multiple packages, each distinguished by its unique destination coordinate. Once a drone starts its delivery route, it must deliver all the packages it carries in the exact sequence they are loaded. The delivery route is considered efficient if the drone visits each destination without detouring. The drone starts at a specified starting point (0, 0) and travels in a straight line path to deliver its packages. To determine if the delivery route is efficient, the destination coordinates must form a straight path from the starting point without any deviation. Write a program that checks if the series of destinations for each drone forms a straight line from the starting point. Input The input consists of multiple datasets. Each dataset is formatted as follows: d x1 y1 x2 y2 ... xd yd The first line contains a single positive integer d (2 ≤ d ≤ 1000), the number of destinations for the current drone. The following d lines each contain two integers representing the coordinates (xi, yi) of a destination. The input is terminated by a line containing a single zero. This line should not be processed. Output For each dataset, print a single line containing \\"Efficient\\" if the delivery route forms a straight line; otherwise, print \\"Inefficient\\". Example Input 3 1 1 2 2 3 3 4 0 1 1 2 2 2 3 4 0 Output Efficient Inefficient Note: To determine if a series of points lie on a straight line, check if the slopes between each consecutive point are consistent.","solution":"def is_efficient_route(destinations): Check if the given series of destinations forms a straight line from the origin (0, 0). def slope(p1, p2): Calculate the slope between two points. if p2[0] - p1[0] == 0: return float(\'inf\') return (p2[1] - p1[1]) / (p2[0] - p1[0]) # Get the initial slope between the first point and the origin initial_slope = slope((0, 0), destinations[0]) for i in range(1, len(destinations)): if slope(destinations[i-1], destinations[i]) != initial_slope: return \\"Inefficient\\" return \\"Efficient\\" def process_input(input_str): Process the input string and call `is_efficient_route` for each dataset. lines = input_str.strip().split(\'n\') results = [] i = 0 while i < len(lines): d = int(lines[i]) if d == 0: break destinations = [tuple(map(int, lines[j].split())) for j in range(i + 1, i + 1 + d)] results.append(is_efficient_route(destinations)) i += 1 + d return results"},{"question":"**Problem Description:** Professor Z is fascinated by strings that contain only unique characters. He refers to such strings as \\"Enchanting Strings\\". Given a string, Professor Z wants to know if it is an \\"Enchanting String\\" or not. Write a program that determines whether a given string is enchanting. Input: The first line contains an integer T, the number of test cases. The next T lines each contain a single string S. Output: For each test case, print \'Enchanting\' if the string has all unique characters, and \'Not Enchanting\' otherwise. Constraints: 45 Points: 1 <= T <= 10 1 <= |S| <= 100 55 Points: 1 <= T <= 1000 1 <= |S| <= 1000 Example: Sample Input: 2 hello world Sample Output: Not Enchanting Enchanting","solution":"def is_enchanting_string(s): Determines whether a string s is an Enchanting String. A string is enchanting if it contains all unique characters. Parameters: s (str): The input string to evaluate. Returns: str: \'Enchanting\' if the string has all unique characters, \'Not Enchanting\' otherwise. return \'Enchanting\' if len(s) == len(set(s)) else \'Not Enchanting\' def check_enchanting_strings(test_cases): Processes a list of test cases and determines if each string is enchanting. Parameters: test_cases (list of str): List of strings to be evaluated. Returns: list of str: List of results for each string, \'Enchanting\' or \'Not Enchanting\'. return [is_enchanting_string(s) for s in test_cases]"},{"question":"A major grid corporation is planning to upgrade its electrical distribution network. They want to minimize the total length of the cables used to connect all the substations while ensuring that there\'s a path between any two substations. Each substation has an electrical demand, and no cable can exceed a given length limit for safety reasons. Your task is to help them achieve this by finding the minimum total length of the cables used while respecting the cable length limit. Input The first line contains three integers n, m, and L (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ L ≤ 1000000) — the number of substations, the number of possible cables, and the maximum allowed length for any cable, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000000, u ≠ v) — representing a cable connecting substations u and v with length w. Output Output a single integer — the minimum total length of the cables used. If it is not possible to connect all substations while respecting the given limit, print -1. Examples Input 4 5 5 1 2 3 2 3 4 3 4 2 4 1 6 1 3 5 Output 9 Input 3 3 2 1 2 2 2 3 2 1 3 3 Output 4 Input 3 1 2 1 2 2 Output -1 Note In the first example, by choosing cables with lengths 3, 4, and 2, you can connect all substations with a total length of 9 within the given length limit. In the second example, by choosing cables with lengths 2 and 2, you can connect all substations with a total length of 4 within the given length limit. In the third example, it\'s impossible to connect all substations with the given cable length limit.","solution":"def find_minimum_cable_length(n, m, L, edges): class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [0] * size def find(self, p): if self.parent[p] != p: self.parent[p] = self.find(self.parent[p]) return self.parent[p] def union(self, p, q): rootP = self.find(p) rootQ = self.find(q) if rootP != rootQ: if self.rank[rootP] > self.rank[rootQ]: self.parent[rootQ] = rootP elif self.rank[rootP] < self.rank[rootQ]: self.parent[rootP] = rootQ else: self.parent[rootQ] = rootP self.rank[rootP] += 1 # Filter edges based on the cable length limit L edges = [(u, v, w) for u, v, w in edges if w <= L] # Sort edges based on weights edges.sort(key=lambda x: x[2]) uf = UnionFind(n) total_length = 0 edges_used = 0 for u, v, w in edges: # Use zero-based indexing for union-find if uf.find(u - 1) != uf.find(v - 1): uf.union(u - 1, v - 1) total_length += w edges_used += 1 if edges_used == n - 1: break # If we used less than n-1 edges, not all substations can be connected if edges_used != n - 1: return -1 return total_length"},{"question":"Alice and Bob are playing a game with a sequence of integers. They take turns removing elements from the sequence, and the player who cannot make a move loses the game. The sequence is unique in that all the integers are distinct and in strictly increasing order. The rules are as follows: 1. Alice always goes first. 2. On each player\'s turn, they must remove either the first or the last element from the remaining sequence. 3. A player loses when there are no elements left to remove on their turn. Given an initial sequence, determine if Alice has a winning strategy assuming both players play optimally. Input The first line contains one integer N (1 ≤ N ≤ 100) – the number of elements in the sequence. The next line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^4) – the elements of the sequence, which are distinct and in strictly increasing order. Output Print \\"Alice\\" if Alice has a winning strategy and \\"Bob\\" otherwise. Example Input 5 2 4 6 8 10 Output Bob Explanation In the given sequence, no matter how Alice starts, Bob can always mirror Alice\'s moves, ensuring that he always has the same number of elements to play with as Alice. Therefore, Alice cannot have a winning strategy, and Bob will always win if he plays optimally. Note The key to solving this is understanding that with optimal play, the sequence can be divided such that the last move will always be made by Bob if the sequence length is even, and by Alice if the sequence length is odd. Therefore, Alice wins if the length of the sequence is odd, and Bob wins if it is even.","solution":"def determine_winner(n, sequence): Determine who has the winning strategy given the sequence length. Args: n (int): Number of elements in the sequence. sequence (list of int): The sequence of distinct, strictly increasing integers. Returns: str: \\"Alice\\" if Alice has a winning strategy, \\"Bob\\" otherwise. # Alice wins if n is odd, Bob wins if n is even return \\"Alice\\" if n % 2 == 1 else \\"Bob\\""},{"question":"You are given an integer array `arr` of length N. Your task is to determine the minimum number of adjacent element swaps required to sort the array in non-decreasing order. Constraints: * 1 ≤ N ≤ 100 * 1 ≤ arr[i] ≤ 1000 Input: Input is given from Standard Input in the following format: N arr[1] arr[2] ... arr[N] Output: Output a single integer representing the minimum number of adjacent element swaps required to sort the array. Examples: Input: 5 3 1 2 4 5 Output: 2 Input: 4 4 3 2 1 Output: 6 Input: 6 10 20 30 40 50 60 Output: 0","solution":"def minimum_swaps_to_sort(arr): Determines the minimum number of adjacent element swaps required to sort the array in non-decreasing order using Bubble Sort strategy. n = len(arr) swaps = 0 # Bubble sort to count swaps for i in range(n): # Flag to detect any swap during an iteration swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap adjacent elements arr[j], arr[j+1] = arr[j+1], arr[j] swaps += 1 swapped = True # If no two elements were swapped in the inner loop, break if not swapped: break return swaps def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:1+N])) result = minimum_swaps_to_sort(arr) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Write a function that takes an integer X and checks if it is a prime number. If X is prime, output \\"Prime\\" otherwise output \\"Not prime\\". Input The first line contains an integer T, the total number of test cases. Then follow T lines, each line contains an integer X. Output Output \\"Prime\\" if X is a prime number, otherwise output \\"Not prime\\". Constraints 1 ≤ T ≤ 1000 -1000 ≤ X ≤ 1000 Example Input 3 7 12 -5 Output Prime Not prime Not prime","solution":"def is_prime(X): Returns \\"Prime\\" if X is a prime number, otherwise returns \\"Not prime\\". if X <= 1: return \\"Not prime\\" for i in range(2, int(X**0.5) + 1): if X % i == 0: return \\"Not prime\\" return \\"Prime\\" def check_primes(test_cases): Given a list of integers test_cases, returns a list with \\"Prime\\" or \\"Not prime\\" for each respective integer. results = [] for X in test_cases: results.append(is_prime(X)) return results"},{"question":"In a fictional world, there is a unique currency system where each coin has a different integer value. The value of each coin is given in an array `coins`. A knight needs to buy some equipment and for this, he has to pay exactly `X` units of currency. Determine the minimum number of coins required to make the exact payment of `X` units. If it is not possible to make the exact payment, return -1. Constraints 1 ≤ X ≤ 10^4 1 ≤ coins.length ≤ 100 1 ≤ coins[i] ≤ 10^4 Input The first line contains an integer `X`. The second line contains an integer `N`, the number of different coins available. The third line contains `N` integers representing the value of each coin. Output A single integer representing the minimum number of coins required to make the exact payment of `X` units, or -1 if it is not possible. SAMPLE INPUT 7 3 1 3 4 SAMPLE OUTPUT 2 Explanation The knight can use one coin of value 3 and one coin of value 4 to make a total of 7 units. Hence, the minimum number of coins required is 2.","solution":"def min_coins_to_make_x(X, coins): # Initialize a DP array with a large value (infinity) dp = [float(\'inf\')] * (X + 1) dp[0] = 0 # Update the dp array to find the minimum coins required for each value from 1 to X for coin in coins: for i in range(coin, X + 1): if dp[i - coin] != float(\'inf\'): dp[i] = min(dp[i], dp[i - coin] + 1) return dp[X] if dp[X] != float(\'inf\') else -1 # Reading input data if __name__ == \\"__main__\\": X = int(input().strip()) N = int(input().strip()) coins = list(map(int, input().strip().split())) # Get the result and print it result = min_coins_to_make_x(X, coins) print(result)"},{"question":"Emma, the software engineer, loves playing a unique game. The game is played on a grid of n rows and m columns. Each cell in the grid may either contain a barrier or be empty. Emma\'s objective is to reach from the top-left corner to the bottom-right corner of the grid, but there\'s a twist: she can only move in two diagonal directions, bottom-right (↘) and top-left (↖), starting from any corner. Emma starts from cell (1, 1) and attempts to reach cell (n, m). If she hits a barrier or goes out of bounds, she must start over. Can you help Emma find a path to her destination? Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid. Each of the next n lines contains m characters which denote the cells of the grid. The possible characters are: * \\".\\" — an empty cell; * \\"#\\" — a barrier. Output Print \\"YES\\" if Emma can reach cell (n, m) from cell (1, 1) following the rules, and \\"NO\\" otherwise. Examples Input 3 3 ... ..# .#. Output YES Input 3 3 . . # Output NO Note In the first example, Emma can move diagonally to reach the destination. The path could be (1,1) -> (2,2) -> (3,3). In the second example, barriers prevent Emma from reaching her destination.","solution":"def can_reach_destination(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # Using BFS to find the path from (0, 0) to (n-1, m-1) from collections import deque queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" # Move bottom-right (↘) if is_valid(x + 1, y + 1) and (x + 1, y + 1) not in visited: queue.append((x + 1, y + 1)) visited.add((x + 1, y + 1)) # Move top-left (↖) if is_valid(x - 1, y - 1) and (x - 1, y - 1) not in visited: queue.append((x - 1, y - 1)) visited.add((x - 1, y - 1)) return \\"NO\\""},{"question":"Network Delay Time Suppose you have a network consisting of `N` nodes, labeled from `1` to `N`, and a list of `M` directed edges (u, v, w) where `u` is the starting node, `v` is the ending node, and `w` is the time it takes for a signal to travel from `u` to `v`. Your task is to determine the minimum time it takes for a signal to reach all nodes starting from a given source node `K`. If it is impossible for all the nodes to receive the signal, return `-1`. Input The first line contains two integers `N` and `M` (1 ≤ N ≤ 100, 1 ≤ M ≤ 10,000), the number of nodes and the number of edges. The next `M` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ N, 1 ≤ w ≤ 100), describing a directed edge from node `u` to node `v` with a travel time of `w`. The last line contains a single integer `K` (1 ≤ K ≤ N), the starting node. Output Print a single integer representing the minimum time it takes for the signal to reach all nodes. If not all nodes can be reached, print `-1`. Example Input ``` 4 5 2 1 1 2 3 1 3 4 1 1 4 2 4 1 3 2 ``` Output ``` 2 ``` Note In the above example, starting from node `2`, the signal can reach all nodes within the following times: - Node 1 in 1 unit of time (2 → 1) - Node 3 in 1 unit of time (2 → 3) - Node 4 in 2 units of time (2 → 3 → 4) Thus, the minimum time required to reach all nodes is `2`.","solution":"import heapq import collections def network_delay_time(times, N, K): Returns the minimum time it takes for the signal to reach all nodes starting from node K or -1 if it is impossible to reach all nodes. graph = collections.defaultdict(list) for u, v, w in times: graph[u].append((v, w)) min_heap = [(0, K)] dist = {i: float(\'inf\') for i in range(1, N + 1)} dist[K] = 0 while min_heap: d, node = heapq.heappop(min_heap) if d > dist[node]: continue for neighbor, weight in graph[node]: new_dist = d + weight if new_dist < dist[neighbor]: dist[neighbor] = new_dist heapq.heappush(min_heap, (new_dist, neighbor)) max_dist = max(dist.values()) return max_dist if max_dist < float(\'inf\') else -1"},{"question":"Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Your solution should have a time complexity of O(n). Input The first line contains two integers n (2 ≤ n ≤ 10^5), the number of elements in the array, and target (|target| ≤ 10^9), the target sum. The next line contains n integers (|a_i| ≤ 10^9), the elements of the array. Output Output two integers, the indices of the two elements that add up to the target. If there are multiple answers, print any. Indices follow 0-based indexing. Example Input 5 9 2 7 11 15 1 Output 0 1 Explanation The elements at indices 0 and 1 are 2 and 7, respectively, and they add up to the target 9. Input 4 6 3 2 4 3 Output 1 2 Explanation The elements at indices 1 and 2 are 2 and 4, respectively, and they add up to the target 6.","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to a specific target. :param nums: List of integers. :param target: Integer target sum. :return: List of two integers representing the indices. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return [] # Example usage: # nums = [2, 7, 11, 15, 1] # target = 9 # result = two_sum(nums, target) # print(result) # Output: [0, 1]"},{"question":"You are hired as a software engineer at a company that processes large amounts of sensor data. The sensor readings are stored as integers in a list, and occasionally, the data transmission gets affected by noise, causing certain readings to appear multiple times in sequence. To clean the data, you need to write a function that removes any consecutive duplicates from the list, so that each reading appears only once if it\'s repeated consecutively. Input The input consists of two lines. - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, the number of sensor readings. - The second line contains N integers, the sensor readings. Output For each test case, output a single line containing the processed list where consecutive duplicates have been removed. Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ each sensor reading ≤ 10^9 Example Input: 2 5 1 1 2 2 3 6 4 4 4 5 5 6 Output: 1 2 3 4 5 6 Note: - For the first test case, the sensor readings [1, 1, 2, 2, 3] get processed to [1, 2, 3]. - For the second test case, the sensor readings [4, 4, 4, 5, 5, 6] get processed to [4, 5, 6].","solution":"def remove_consecutive_duplicates(sensor_readings): Removes consecutive duplicates from a list of sensor readings. Parameters: sensor_readings: List[int] A list of integers representing sensor readings. Returns: List[int] A list of integers where consecutive duplicates have been removed. if not sensor_readings: return [] cleaned_data = [sensor_readings[0]] for reading in sensor_readings[1:]: if reading != cleaned_data[-1]: cleaned_data.append(reading) return cleaned_data def process_test_cases(T, test_cases): Processes multiple test cases of sensor readings to remove consecutive duplicates. Parameters: T: int Number of test cases. test_cases: List[Tuple[int, List[int]]] A list of tuples where each tuple contains number of sensor readings and the list of readings. Returns: List[List[int]] A list of lists, each containing the processed sensor readings for a test case. results = [] for N, readings in test_cases: results.append(remove_consecutive_duplicates(readings)) return results"},{"question":"Tom is interested in analyzing trends in temperature data. He has collected temperature readings from various sensors. Each sensor provides a reading taken at the same time, and he wants to analyze the difference between the highest and lowest readings for each time slot (session) and for each location. Each session contains temperature readings from L locations. To make the processing efficient, Tom wants you to write a program that processes multiple sessions and provides the difference between the maximum and minimum readings for each location in each session. Input The first line of the input contains the number of sessions S. Each session is described in the following format: - The first line contains the number of locations L. - The second line contains L integers, where the ith integer is the temperature reading at the ith location for that session. Output For each session, output a single number, which is the difference between the maximum and minimum temperature readings for that session. Constraints 1 ≤ S ≤ 10 2 ≤ L ≤ 10^5 -50 ≤ Temperature Reading ≤ 50 SAMPLE INPUT 2 3 -10 0 5 4 15 -20 35 10 SAMPLE OUTPUT 15 55 Explanation For the first session, the temperature readings are -10, 0, and 5. The difference between the maximum (5) and minimum (-10) readings is 15. For the second session, the temperature readings are 15, -20, 35, and 10. The difference between the maximum (35) and minimum (-20) readings is 55.","solution":"def temperature_difference(sessions): result = [] for readings in sessions: max_temp = max(readings) min_temp = min(readings) difference = max_temp - min_temp result.append(difference) return result def process_sessions(input_data): lines = input_data.strip().split(\\"n\\") S = int(lines[0]) index = 1 sessions = [] for _ in range(S): L = int(lines[index]) readings = list(map(int, lines[index + 1].split())) sessions.append(readings) index += 2 return temperature_difference(sessions)"},{"question":"Ash loves playing with strings and palindromes. A string is called a palindrome if it reads the same forwards and backwards. Ash came up with an idea of constructing a new string based on the given string by possibly rearranging its characters. He wants to determine if it is possible to rearrange the characters of the string such that the new string is a palindrome. Input The first line contains an integer t (1 ≤ t ≤ 100) – the number of test cases. Each of the following t lines contains a single string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. Output For each test case output \\"YES\\" if it is possible to rearrange the string to form a palindrome, otherwise output \\"NO\\". Examples Input 2 civic ivicc Output YES YES Input 2 hello abc Output NO NO Note For the first sample, \\"civic\\" is already a palindrome, and \\"ivicc\\" can be rearranged to form \\"civic\\". For the second sample, \\"hello\\" and \\"abc\\" cannot be rearranged to form palindromes.","solution":"def can_form_palindrome(s): Determines if it is possible to rearrange the characters of the string s to form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for v in count.values() if v % 2 != 0) return odd_count <= 1 def process_test_cases(test_cases): Processes a list of test cases and determines for each if it can form a palindrome. results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an n x n matrix, write code to find the spiral order of the matrix elements. Spiral order means traversing the matrix in a clockwise direction starting from the top-left corner and proceeding to the right, down, left, and up until all elements are covered. Input: - The first line contains an integer n (1 ≤ n ≤ 100) representing the number of rows and columns in the matrix. - The next n lines each contain n integers, representing the matrix elements. Output: - Print the elements of the matrix in spiral order in a single line without commas. Constraints: - 1 ≤ n ≤ 100 - The matrix elements are integers and can be positive or negative. SAMPLE INPUT 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 1 2 3 6 9 8 7 4 5","solution":"def spiral_order(matrix): Returns the elements of the matrix in spiral order. if not matrix: return [] spiral = [] left, right = 0, len(matrix[0]) top, bottom = 0, len(matrix) while left < right and top < bottom: # Traverse from left to right for i in range(left, right): spiral.append(matrix[top][i]) top += 1 # Traverse from top to bottom for i in range(top, bottom): spiral.append(matrix[i][right - 1]) right -= 1 if not (left < right and top < bottom): break # Traverse from right to left for i in range(right - 1, left - 1, -1): spiral.append(matrix[bottom - 1][i]) bottom -= 1 # Traverse from bottom to top for i in range(bottom - 1, top - 1, -1): spiral.append(matrix[i][left]) left += 1 return spiral"},{"question":"Minimum Energy Path You are given a 2D grid where each cell has a positive integer representing the energy cost to move through that cell. You need to find the minimum energy required to move from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1) of the grid. From any cell, you can move to the cell immediately to its right or the cell immediately below it. Input The input consists of multiple datasets. Each dataset starts with two integers m and n (1 ≤ m, n ≤ 50) representing the number of rows and columns in the grid. This is followed by m lines, each containing n positive integers, representing the energy costs of the grid cells. The end of the input is represented by a line containing two zeros. Output For each dataset, print the minimum energy required to move from the top-left to the bottom-right corner of the grid on a new line. Sample Input 3 3 1 2 3 4 5 6 7 8 9 2 2 1 10 1 2 0 0 Sample Output 21 4 Example Input 3 3 1 2 3 4 5 6 7 8 9 2 2 1 10 1 2 0 0 Output 21 4","solution":"def min_energy_path(m, n, grid): Returns the minimum energy required to move from the top-left corner to the bottom-right corner of the grid. if m == 0 or n == 0: return 0 # Initialize a 2D list to store the minimum energy path sum dp = [[0] * n for _ in range(m)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row and first column for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner will have the minimum energy path sum return dp[m - 1][n - 1] def process_input(input_data): results = [] input_lines = input_data.strip().split(\'n\') idx = 0 while idx < len(input_lines): m, n = map(int, input_lines[idx].split()) if m == 0 and n == 0: break grid = [] for i in range(m): idx += 1 grid.append(list(map(int, input_lines[idx].split()))) results.append(min_energy_path(m, n, grid)) idx += 1 return results"},{"question":"Archaeologist Alex is exploring an ancient temple. In one of the rooms, he discovers a mosaic made up of colored tiles arranged in a rectangular grid. The room guardian informs Alex that the mosaic follows a special pattern defined by the sum of the digits of the grid coordinates. The tiles are positioned in an m x n grid, where the top-left tile is at coordinates (1, 1) and the bottom-right tile is at coordinates (m, n). Each tile at coordinates (i, j) has a color value based on the sum of the digits of i and j. If the sum of the digits of i and j is even, the tile is white (represented by \'W\'), and if it is odd, the tile is black (represented by \'B\'). Alex needs your help to determine the color scheme of the entire mosaic. Help Alex by writing a program that outputs the color value of each tile in the mosaic. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns of the grid. Output Output the m x n grid of tiles, where each tile is represented by \'W\' or \'B\' based on its color value. Example Input 3 4 Output W B W B B W B W W B W B Explanation For coordinates (1, 1), the sum of digits is 2, which is even, so the tile is white (\'W\'). For coordinates (1, 2), the sum of digits is 3, which is odd, so the tile is black (\'B\'). For coordinates (2, 1), the sum of digits is also 3, so the tile is black (\'B\'). For coordinates (3, 4), the sum of digits is 7, which is odd, so the tile is black (\'B\'). Help Alex visualize the color scheme by providing the correct output.","solution":"def sum_of_digits(x): Calculates the sum of the digits of a given number x. return sum(int(digit) for digit in str(x)) def generate_mosaic(m, n): Generates an m x n grid of tiles based on the color scheme rule. mosaic = [] for i in range(1, m + 1): row = [] for j in range(1, n + 1): if (sum_of_digits(i) + sum_of_digits(j)) % 2 == 0: row.append(\'W\') else: row.append(\'B\') mosaic.append(row) return mosaic"},{"question":"Write a function that calculates the length of the longest subsequence in an array, where the difference between each pair of consecutive elements is either 1 or -1. Constraints: * 1 leq n leq 100 * 0 leq A[i] leq 1000 Input: The first line contains an integer n representing the length of the array. The second line contains n space-separated integers representing the elements of the array. Output: Print the length of the longest subsequence. Examples: Input: 5 1 2 3 4 5 Output: 5 Input: 6 1 3 2 2 4 1 Output: 3","solution":"def longest_subsequence(n, arr): Returns the length of the longest subsequence where the difference between each pair of consecutive elements is either 1 or -1. if n == 0: return 0 # Create a dp array initialized to 1 (each element is a subsequence of length 1 by itself) dp = [1] * n # Iterate through the array to find the longest subsequence for i in range(1, n): for j in range(i): if abs(arr[i] - arr[j]) == 1: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Your task is to write a function that takes a list of customer order records and sorts them based on customer priority and order placement time. Each record consists of a customer name, customer ID number, priority level, and a timestamp indicating when the order was placed. The order records should be sorted first by priority in descending order and then by the timestamp in ascending order. The sorted list should be returned as a list of tuples. Input The first line contains an integer n, the number of customer orders (1 ≤ n ≤ 10^5). Each of the next n lines contains a customer order record divided into four fields separated by spaces: a string (customer name), an integer (customer ID number), an integer (priority level, where a higher number indicates a higher priority, with values between 1 and 10), and a string (timestamp in the format \'YYYY-MM-DDTHH:MM:SS\'). Output The output should be a list of tuples representing the sorted order records. Each tuple contains the following elements in order: (customer name, customer ID number, priority level, timestamp). Example Input 5 JohnDoe 123456 3 2022-08-01T12:00:00 JaneSmith 234567 7 2022-08-01T11:30:00 AliceJones 345678 5 2022-08-01T11:45:00 BobBrown 456789 5 2022-08-01T11:15:00 ChrisNash 567890 3 2022-08-01T12:30:00 Output [ (\'JaneSmith\', 234567, 7, \'2022-08-01T11:30:00\'), (\'AliceJones\', 345678, 5, \'2022-08-01T11:45:00\'), (\'BobBrown\', 456789, 5, \'2022-08-01T11:15:00\'), (\'JohnDoe\', 123456, 3, \'2022-08-01T12:00:00\'), (\'ChrisNash\', 567890, 3, \'2022-08-01T12:30:00\') ]","solution":"def sort_customer_orders(order_records): Sorts the customer order records based on customer priority and order placement time. Args: order_records (list of tuples): List of customer records in the format (customer name, customer ID number, priority level, timestamp) Returns: list of tuples: Sorted list of order records. return sorted(order_records, key=lambda x: (-x[2], x[3])) # Function to process input and provide the result def process_orders(n, input_records): order_records = [] for record in input_records: parts = record.split() name = parts[0] id_num = int(parts[1]) priority = int(parts[2]) timestamp = parts[3] order_records.append((name, id_num, priority, timestamp)) return sort_customer_orders(order_records)"},{"question":"A new technology conference is being planned, where a series of networking sessions will take place with n participants. Each networking session can accommodate exactly 2 participants, who will engage in one-on-one discussions. The conference organizers want to ensure that as many unique one-on-one meetings happen as possible during the conference. Due to time constraints, each participant can only attend up to m sessions. The participants are assigned unique IDs ranging from 1 to n. Write a program that determines the optimal schedule for the networking sessions, ensuring that the maximum number of unique meetings occur while respecting the constraint that each participant can attend no more than m sessions. Input: The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 50) — the number of participants and the maximum number of sessions each participant can attend. The IDs of the participants are the integers from 1 to n. Output: Print the total number of sessions scheduled. Then, for each session, print the IDs of the two participants who will meet in that session. The sessions can be printed in any order. Example Input 4 3 Output 6 1 2 1 3 1 4 2 3 2 4 3 4 Note: In the example above, each participant will attend exactly 3 sessions, ensuring that the maximum number of unique one-on-one meetings occur while adhering to the session limit per participant.","solution":"def network_sessions(n, m): Generates the maximum number of unique one-on-one meetings ensuring each participant attends no more than m sessions. Returns a list of tuples representing the meetings. from itertools import combinations # Generate all possible unique meetings all_meetings = list(combinations(range(1, n+1), 2)) # Track the number of meetings each participant has attended meet_count = {i: 0 for i in range(1, n+1)} optimal_meetings = [] for meeting in all_meetings: a, b = meeting if meet_count[a] < m and meet_count[b] < m: optimal_meetings.append(meeting) meet_count[a] += 1 meet_count[b] += 1 return optimal_meetings"},{"question":"In a magical kingdom, there is a unique game called \\"Magic Coins\\". The game involves collecting coins which can either increase or decrease your score to make it match a target value. Specifically: - You can add a coin with a value of 5 (increasing your score by 5). - You can subtract a coin with a value of 3 (decreasing your score by 3). The game starts with a score of 0, and your objective is to determine the minimum number of coin operations needed to reach a target score `V`. Given a target value `V`, find the minimum number of operations required to reach exactly `V` starting from 0. # Input: - The first line contains an integer `N`, the number of test cases. - For each test case, a single integer `V` (target value) is provided. # Output: For each test case, print the minimum number of operations required to reach the target value `V` from 0. # Constraints: - 1 ≤ N ≤ 10000 - -10^9 ≤ V ≤ 10^9 # Sample Input 3 9 -6 14 # Sample Output 3 2 4 # Explanation For Sample Test #1: Starting from 0, three operations are needed: 5 (0 -> 5), 5 (5 -> 10), and -3 (10 -> 7), then another 5 (7 -> 12) and -3 (12 -> 9). Thus 3 operations in total. For Sample Test #2: Starting from 0, two operations are needed: -3 (0 -> -3), -3 (-3 -> -6). For Sample Test #3: Starting from 0, four operations are needed: 5 (0 -> 5), 5 (5 -> 10), 5 (10 -> 15), and -3 (15 -> 12), then another 5 (12 -> 17) and -3 (17 -> 14). Thus 4 operations in total.","solution":"def min_operations(V): Function to determine the minimum number of operations to reach the target value V. Args: V (int): The target value. Returns: int: The minimum number of operations required to reach V. V = abs(V) # Calculate using integer division and modulo operation num_operations = V // 5 + (V % 5 + 2) // 3 return num_operations def process_test_cases(N, test_cases): Process the multiple test cases and return the results. Args: N (int): Number of test cases. test_cases (list of int): List of target values for each test case. Returns: list of int: List of results for each test case. results = [] for V in test_cases: results.append(min_operations(V)) return results"},{"question":"Given a string `s` consisting of lowercase letters, rearrange the characters of the string so that no two adjacent characters are the same. If it is not possible to do this, return an empty string. Constraints: * The length of the string will be in the range [1, 5000]. Input: The input is given in the following format. ``` s ``` Output: Print the rearranged string or an empty string if no rearrangement is possible. Examples: Input: ``` aab ``` Output: ``` aba ``` Input: ``` aaab ``` Output: ``` ```","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_string(s): Rearrange the characters of the string so that no two adjacent characters are the same. If it is not possible to do this, return an empty string. freq = Counter(s) max_heap = [] for char, cnt in freq.items(): heappush(max_heap, (-cnt, char)) prev_char = None prev_cnt = 0 result = [] while max_heap: cnt, char = heappop(max_heap) result.append(char) if prev_cnt < 0: heappush(max_heap, (prev_cnt, prev_char)) prev_char = char prev_cnt = cnt + 1 rearranged = \'\'.join(result) if len(rearranged) == len(s): return rearranged else: return \'\'"},{"question":"You are given a sequence of integers representing daily rainfall measured in millimeters for a period of `n` days. Your task is to find the length of the longest contiguous subarray where the rainfall amount increases or remains the same every day. Input The first line of the input contains an integer `n` (1 ≤ n ≤ 100000) – the number of days. The second line contains `n` integers separated by space, representing the rainfall amounts for each day. Output Print a single integer – the length of the longest contiguous subarray with non-decreasing rainfall amounts. Examples Input 7 2 2 1 2 3 4 1 Output 4 Input 5 4 3 2 1 5 Output 2 Note In the first example, the longest contiguous subarray with non-decreasing rainfall amounts is [1, 2, 3, 4], which has a length of 4. In the second example, the longest contiguous subarray with non-decreasing rainfall amounts is [1, 5], which has a length of 2.","solution":"def longest_non_decreasing_subarray(n, rainfall): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if rainfall[i] >= rainfall[i - 1]: current_length += 1 else: current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a program that inputs a list of temperature readings in Celsius and Fahrenheit and outputs the number of readings that fall into each of the following temperature ranges for both Celsius and Fahrenheit. Temperature Range | Range Identifier --- | --- Below Freezing | F Cold | C Mild | M Warm | W Hot | H For Celsius: - Freezing (F): Below 0 - Cold (C): 0 to 10 - Mild (M): 10 to 20 - Warm (W): 20 to 30 - Hot (H): Above 30 For Fahrenheit: - Freezing (F): Below 32 - Cold (C): 32 to 50 - Mild (M): 50 to 68 - Warm (W): 68 to 86 - Hot (H): Above 86 Input The input is given in the following format: c1 f1 c2 f2 c3 f3 :: :: On line i, the real number ci which represents the temperature in Celsius and the real number fi which represents the temperature in Fahrenheit are given, separated by a blank. The temperatures are given with a precision of up to one decimal place. The number of lines of input does not exceed 50. Output Please output the number of readings falling into each temperature range in the following format. Line 1 Number of readings in Celsius that fall into F, followed by a space and then the number of readings in Fahrenheit that fall into F Line 2 Number of readings in Celsius that fall into C, followed by a space and then the number of readings in Fahrenheit that fall into C Line 3 Number of readings in Celsius that fall into M, followed by a space and then the number of readings in Fahrenheit that fall into M Line 4 Number of readings in Celsius that fall into W, followed by a space and then the number of readings in Fahrenheit that fall into W Line 5 Number of readings in Celsius that fall into H, followed by a space and then the number of readings in Fahrenheit that fall into H Example Input -5 20 15 60 25 80 35 100 8 46 Output 1 1 1 1 1 1 1 1 1 1","solution":"def count_temperature_ranges(temperatures): celsius_ranges = { \'F\': 0, \'C\': 0, \'M\': 0, \'W\': 0, \'H\': 0 } fahrenheit_ranges = { \'F\': 0, \'C\': 0, \'M\': 0, \'W\': 0, \'H\': 0 } for c, f in temperatures: if c < 0: celsius_ranges[\'F\'] += 1 elif 0 <= c < 10: celsius_ranges[\'C\'] += 1 elif 10 <= c < 20: celsius_ranges[\'M\'] += 1 elif 20 <= c < 30: celsius_ranges[\'W\'] += 1 else: # c >= 30 celsius_ranges[\'H\'] += 1 if f < 32: fahrenheit_ranges[\'F\'] += 1 elif 32 <= f < 50: fahrenheit_ranges[\'C\'] += 1 elif 50 <= f < 68: fahrenheit_ranges[\'M\'] += 1 elif 68 <= f < 86: fahrenheit_ranges[\'W\'] += 1 else: # f >= 86 fahrenheit_ranges[\'H\'] += 1 result = [ f\\"{celsius_ranges[\'F\']} {fahrenheit_ranges[\'F\']}\\", f\\"{celsius_ranges[\'C\']} {fahrenheit_ranges[\'C\']}\\", f\\"{celsius_ranges[\'M\']} {fahrenheit_ranges[\'M\']}\\", f\\"{celsius_ranges[\'W\']} {fahrenheit_ranges[\'W\']}\\", f\\"{celsius_ranges[\'H\']} {fahrenheit_ranges[\'H\']}\\", ] return result"},{"question":"In a mystical land called Wonderland, people speak in a special language known as \\"Wondrous Talk\\". In this language, there is a unique way of encoding words using a method called \\"Palindromify\\". The process works as follows: 1) The given word is converted into a palindrome by appending the minimum number of characters at the end of the word. 2) To generate the palindrome, you should find the longest suffix of the word which is a palindrome and append the reverse of the remaining prefix to the end of the word. Your task is to take a word as input, apply the Palindromify algorithm, and output the resultant palindrome. Input The first line of input contains an integer N, the number of test cases. The next N lines each contain a word consisting of lowercase alphabets (\'a\'-\'z\') that needs to be converted into a palindrome. Output Output N lines each corresponding to the palindromified word. Constraints 1) Length of each word ≤ 50 and ≥ 1 2) Each character in the word is a lowercase letter (\'a\'-\'z\'). SAMPLE INPUT 2 abcba racecar SAMPLE OUTPUT abcba racecar","solution":"def is_palindrome(s): return s == s[::-1] def palindromify(word): n = len(word) if is_palindrome(word): return word for length in range(n): if is_palindrome(word[length:]): return word + word[:length][::-1] return word # Should never reach here since the loop should cover all cases def process_test_cases(N, words): results = [palindromify(word) for word in words] return results"},{"question":"You are a participant in a number guessing game. You have to guess a target number, Y, which is a randomly chosen integer such that 1 ≤ Y ≤ 100. The game will give you feedback whether your guess, G, is too high, too low, or correct. Write a function that determines the feedback based on the guess. Constraints * 1 ≤ G ≤ 100 * 1 ≤ Y ≤ 100 * G and Y are integers. Input Input is given from Standard Input in the following format: Y G Output Print `Too high` if the guess is higher than the target number, `Too low` if the guess is lower than the target number, and `Correct` if the guess is equal to the target number. Examples Input 65 70 Output Too high Input 40 35 Output Too low Input 50 50 Output Correct","solution":"def number_guess_feedback(Y, G): Returns feedback based on the guess relative to the target number. Parameters: Y (int): The target number. G (int): The guessed number. Returns: str: \'Too high\', \'Too low\' or \'Correct\' based on the guess G. if G > Y: return \\"Too high\\" elif G < Y: return \\"Too low\\" else: return \\"Correct\\""},{"question":"Problem description: A secret military base is secured through a series of passcodes created using a unique encryption algorithm. The algorithm combines the ASCII values of characters in a string to create the passcodes. As a security developer, you are tasked with verifying if a given string can be transformed into a valid passcode that matches a target value. Input: The first line contains an integer T, denoting the number of test cases. Each test case consists of two lines: - The first line contains a string S (length between 1 and 100 characters), which can include uppercase letters, lowercase letters, and digits. - The second line contains an integer P, the target passcode. Output: For each test case, print \\"Valid\\" if the sum of the ASCII values of characters in the string S equals P. Otherwise, print \\"Invalid\\". Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100 1 ≤ P ≤ 10000 Example: Input: 3 hello 532 world 552 Python3 927 Output: Valid Invalid Valid Explanation: Example 1: The ASCII values of \\"hello\\" are 104+101+108+108+111 = 532, which matches the target passcode, so the output is \\"Valid\\". Example 2: The ASCII values of \\"world\\" are 119+111+114+108+100 = 552, which matches the target passcode, so the output is \\"Valid\\". Example 3: The ASCII values of \\"Python3\\" are 80 + 121 + 116 + 104 + 111 + 110 + 51 = 693, which does not match the target passcode 927, so the output is \\"Invalid\\".","solution":"def verify_passcode(test_cases): Verifies if a given string can be transformed into a valid passcode that matches the target value. For each test case, prints \\"Valid\\" if the sum of ASCII values of characters in the string S equals P. Otherwise, prints \\"Invalid\\". Args: test_cases (list of tuples): List of tuples where each tuple consists of (S, P), S is the string and P is the target passcode integer. results = [] for S, P in test_cases: ascii_sum = sum(ord(char) for char in S) if ascii_sum == P: results.append(\\"Valid\\") else: results.append(\\"Invalid\\") return results"},{"question":"A spaceship pilot needs to navigate their ship back to the base. The pilot has a coordinate grid where their current position is at (x, y), and the base is located at (0, 0). The pilot can move in one of the following ways: 1. Move 1 unit to the left (decrease x by 1). 2. Move 1 unit to the right (increase x by 1). 3. Move 1 unit up (increase y by 1). 4. Move 1 unit down (decrease y by 1). 5. Use a powerful warp drive that allows the spaceship to jump from (x, y) to (max(x, y), min(x, y)). Determine the minimum number of moves required to get the spaceship from the initial position (x, y) back to the base (0, 0). Input The only line contains two integers x and y (0 ≤ x, y ≤ 100,000). Output Print a single integer — the required minimum number of moves needed to navigate the spaceship back to the base. Examples Input 5 3 Output 5 Input 10 15 Output 10 Input 100000 100000 Output 100000 Note In the first sample, the sequence of moves could be as follows: (5, 3) → (4, 3) → (3, 3) → (2, 3) → (2, 2) → (1, 2). In the second sample, one possible sequence is: (10, 15) → (10, 10). In the third sample, since the spaceship\'s initial position is at (100000, 100000), the minimum number of moves is directly moving either horizontally or vertically to the origin.","solution":"def min_moves_to_base(x, y): Given coordinates x, y of the spaceship, return the minimum number of moves required to reach the base (0, 0). # The minimal steps is given by: # - Using the warp drive until x == y # - Then moving directly to base by moving diagonally return max(x, y)"},{"question":"You are given a grid consisting of N rows and M columns. Each cell in the grid can either be \'0\' (empty) or \'1\' (occupied). You need to find the largest rectangular subgrid that contains only \'1\'s and return its area. Input: The first line of input contains two integers, N and M, representing the number of rows and columns in the grid respectively. The next N lines each contain M characters (\'0\' or \'1\') representing the grid. Output: Output a single integer, which is the area of the largest rectangle consisting entirely of \'1\'s. Constraints: 1<=N, M<=1000 It is guaranteed that at least one \'1\' exists in the grid. Example: Input: 5 6 101101 111111 011011 111010 110101 Output: 6 Explanation: The largest subgrid containing only \'1\'s has an area of 6 (2 rows and 3 columns). This problem requires knowledge of dynamic programming and efficient array handling to find the maximum area subgrid efficiently.","solution":"def maximal_rectangle(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) max_area = 0 heights = [0] * m for row in matrix: for i in range(m): if row[i] == \'1\': heights[i] += 1 else: heights[i] = 0 max_area = max(max_area, largest_rectangle_area(heights)) return max_area def largest_rectangle_area(heights): stack = [] max_area = 0 heights.append(0) # Sentinel value to pop remaining heights in stack for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() # Remove the sentinel value return max_area def find_largest_rectangle_area(N, M, grid): matrix = [list(row) for row in grid] return maximal_rectangle(matrix)"},{"question":"Given a decimal number system, you need to perform certain operations on the numbers, such as reversing and adding until the number becomes a palindrome. A palindrome is a number that reads the same forward and backward. For example, 121 is a palindrome, while 123 is not. The operation that needs to be performed is: - Take a number, reverse its digits, add the reversed number to the original number. - If the result is a palindrome, stop. - If it is not, use the result as the new number and repeat the operation. Your task is to write a program that will find the palindrome number by performing the above steps and also keep track of the number of operations needed to obtain it. Input The input is a single integer n (0 ≤ n ≤ 10^4) Output Print two integers: the palindrome number obtained by the described operations and the number of operations required. Examples Input 349 Output 494 3 Input 87 Output 4884 4 Note For the first input example: - 349 + 943 = 1292 - 1292 + 2921 = 4213 - 4213 + 3124 = 7337, which is a palindrome. Thus, it takes 3 operations to reach a palindrome starting from 349.","solution":"def reverse_number(n): Reverses the digits of an integer. return int(str(n)[::-1]) def is_palindrome(n): Checks if an integer is a palindrome. return str(n) == str(n)[::-1] def find_palindrome(n): Finds the palindrome by reversing and adding the digits of the given number until a palindrome is obtained. Also counts the number of operations needed. Returns a tuple of the palindrome and the number of operations. operations = 0 while not is_palindrome(n): n += reverse_number(n) operations += 1 return n, operations"},{"question":"You are given a strictly increasing sequence of integers. You are required to find the smallest missing positive integer that does not appear in the sequence. For example, in the sequence [1, 2, 3, 5], the smallest missing positive integer is 4. Similarly, in the sequence [1, 3, 4, 7], the smallest missing positive integer is 2. Input The first line contains a single integer n (1 ≤ n ≤ 200 000) — the length of the sequence. The second line contains n strictly increasing integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). Output Print a single integer — the smallest missing positive integer that does not appear in the sequence. Examples Input 5 1 2 3 4 6 Output 5 Input 7 1 2 4 5 7 8 9 Output 3 Note In the first example, the smallest missing positive integer is 5 since 1, 2, 3, 4 are present in the sequence and 5 is not. In the second example, the sequence contains 1 and 2, and the next smallest integer 3 is not present.","solution":"def smallest_missing_positive_integer(arr): Returns the smallest missing positive integer from the given strictly increasing sequence. # Start checking from 1 onwards expected = 1 for number in arr: if number == expected: expected += 1 else: break return expected"},{"question":"Implement an algorithm to reverse a given subarray of an array and count the number of distinct elements in the reversed subarray after each reversal operation. You are given an array of integers A of length n and m reversal operations. Each reversal operation accepts two integer arguments l and r and performs the following: 1. Reverse the subarray A[l..r] (0-indexed). 2. Count the number of distinct elements in the reversed subarray. For each reversal operation, print the count of distinct elements in the reversed subarray. Input The first line of the input contains an integer n (1 ≤ n ≤ 105) - the length of the array A. The second line contains n integers A[i] (1 ≤ A[i] ≤ 109) - the elements of the array. The third line contains an integer m (1 ≤ m ≤ 105) - the number of reversal operations. Each of the next m lines contains two integers l and r (0 ≤ l ≤ r < n) - the indices of the subarray to be reversed. Output For each reversal operation, print the number of distinct elements in the reversed subarray. Examples Input 6 1 2 3 4 5 6 3 1 4 0 2 3 5 Output 4 3 3 Note In the first example, after the first reversal operation, the subarray [1..4] becomes [1 5 4 3 2 6], and the reversed subarray [4 3 2 1] contains 4 distinct elements. After the second reversal operation, the array becomes [3 2 1 4 5 6], and the reversed subarray [3 2 1] contains 3 distinct elements. After the third reversal operation, the array becomes [3 2 1 6 5 4], and the reversed subarray [6 5 4] contains 3 distinct elements.","solution":"def reverse_and_count_distinct(n, A, m, operations): Perform reversal operations on the array and count distinct elements in each reversed subarray. Parameters: n -- integer, length of the array A A -- list of integers, the array itself m -- integer, the number of reversal operations operations -- list of tuples, each tuple contains two integers l and r defining the subarray to reverse Returns: list of integers, each integer represents the count of distinct elements in the reversed subarray for each operation results = [] for l, r in operations: # Reverse the subarray A[l:r+1] A[l:r+1] = A[l:r+1][::-1] # Count distinct elements in the reversed subarray distinct_count = len(set(A[l:r+1])) results.append(distinct_count) return results"},{"question":"You are given the task of creating a string manipulation function that checks if two given strings are almost anagrams of each other. Two strings are considered almost anagrams if they can be made anagrams by removing exactly one character from any of the strings (but not both). Write a function to determine if two strings are almost anagrams. Function Signature: ```python def are_almost_anagrams(str1: str, str2: str) -> bool: pass ``` Input: - The function should accept two strings `str1` and `str2` with lengths between 1 and 100 characters. Output: - Return True if the strings are almost anagrams, otherwise return False. Example 1: Input: ```python str1 = \\"apple\\" str2 = \\"aple\\" ``` Output: ```python True ``` Example 2: Input: ```python str1 = \\"apple\\" str2 = \\"aplee\\" ``` Output: ```python False ``` Constraints: 1. 1 ≤ len(str1), len(str2) ≤ 100 2. Both strings only contain lowercase English letters","solution":"from collections import Counter def are_almost_anagrams(str1: str, str2: str) -> bool: # Difference in lengths should be exactly 1 if abs(len(str1) - len(str2)) != 1: return False # Ensure str1 is always the longer string if len(str1) < len(str2): str1, str2 = str2, str1 counter1 = Counter(str1) counter2 = Counter(str2) difference = counter1 - counter2 # print(difference) # We should have exactly one extra character in the longer string return len(difference) == 1 and sum(difference.values()) == 1"},{"question":"Problem Alice is a botanist who is studying the growth patterns of a certain species of plant. She has observed that the plants grow according to a specific pattern over the course of several days. The growth pattern can be represented as a sequence of integers, where each integer represents the growth (in centimeters) of the plant on that day. Alice wants to determine the maximum possible growth of the plant over any continuous sub-sequence of days. Your task is to write a program that finds the maximum possible growth in any continuous sub-sequence of days from the given sequence of daily growth measurements. Constraints The input satisfies the following conditions: * 1 ≤ N ≤ 100,000 * -10,000 ≤ Gi ≤ 10,000 (Gi represents the growth on the i-th day) Input The input is given in the following format: N G1 G2 G3 ... GN The integer N is given on the first line. The integers G1, G2, G3, ..., GN are given on the second line, separated by spaces. Output Output the maximum possible growth in any continuous sub-sequence of days. Examples Input 5 -2 3 -1 2 -3 Output 4 Input 8 1 -2 3 10 -4 7 2 -5 Output 18 Input 4 -1 -2 -3 -4 Output -1","solution":"def max_growth(N, growth): Returns the maximum possible growth in any continuous sub-sequence of days. Parameters: N (int): The number of days. growth (list of int): The growth on each day. Returns: int: The maximum possible growth in any continuous sub-sequence of days. max_so_far = growth[0] max_ending_here = growth[0] for i in range(1, N): max_ending_here = max(growth[i], max_ending_here + growth[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are given two strings S and T. Write a function to determine if T is an anagram of S, that is, if T is formed by rearranging the letters of S. Note that spaces and capitalization are not considered, and the strings contain only printable ASCII characters. Constraints * All values in input are strings. * 1 leq |S|, |T| leq 10^5 Input Input is given from Standard Input in the following format: S T Output Print `True` if T is an anagram of S, otherwise print `False`. Examples Input anagram nagaram Output True Input Rat Car Output False Input Listen Silent Output True Input Hello hello Output True","solution":"def is_anagram(S, T): Determine if T is an anagram of S (case insensitive and ignoring spaces). # Remove spaces and convert to lowercase S = S.replace(\\" \\", \\"\\").lower() T = T.replace(\\" \\", \\"\\").lower() # Check if sorted characters of S and T are the same return sorted(S) == sorted(T)"},{"question":"A popular online game has a unique scoring system for each player for each game played. After each game, players receive a score that is a non-negative integer. The overall scoring for a player is reset on the first day of each month. You need to write a program to find out the highest score achieved by a player in any single game within each given month. Input: The first line of input contains an integer n (1 <= n <= 10^5), representing the number of games played by the player. Each of the next n lines contains two integers: - The first integer is the date in YYYYMMDD format (e.g., 20230115 for January 15th, 2023). - The second integer is the score received by the player in the game (0 <= score <= 10^9). Output: For each month in which the player played at least one game, output a single line in the format YYYYMM, representing the year and month of the games followed by the maximum score the player achieved in that month. Sort the output by year and month in ascending order. Examples: Input: 10 20230115 150 20230120 300 20230125 200 20230210 400 20230215 350 20230305 500 20230325 350 20230410 450 20230415 500 20230505 550 Output: 202301 300 202302 400 202303 500 202304 500 202305 550 Input: 5 20221225 100 20230101 200 20230115 250 20230201 300 20230214 350 Output: 202212 100 202301 250 202302 350 Note: In the first example, during January 2023, the highest score is 300, while in February, it is 400, and so on. The output lists the maximum score per month in ascending order by year and month.","solution":"def find_highest_scores_per_month(n, games): Finds the highest score achieved by a player in any single game within each given month Args: n : int : number of games played games : list of tuple : [(YYYYMMDD, score), ..., (YYYYMMDD, score)] Returns: list of tuple : [(YYYYMM, score), ..., (YYYYMM, score)] from collections import defaultdict scores_by_month = defaultdict(int) for date, score in games: year_month = str(date)[:6] # Extract YYYYMM part scores_by_month[year_month] = max(scores_by_month[year_month], score) result = sorted(scores_by_month.items()) return result"},{"question":"Given an initial array of n integers, you need to perform a series of m operations. Each operation is defined by one of the two formats: 1. \\"update i x\\": Update the element at index i of the array to x. 2. \\"query l r x\\": Count the number of elements in the subarray from index l to r that are less than or equal to x. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 10^5) — the length of the array and the number of operations. The second line contains n integers a[i] (1 ≤ a[i] ≤ 10^9) — the initial elements of the array. The next m lines contain the description of the operations. Each operation is described as one of the two formats mentioned above. Output For each \\"query\\" operation, output a single integer — the answer to this query. Examples Input 5 3 1 3 5 7 9 update 3 6 query 1 5 6 query 2 4 10 Output 4 3 Explanation Initially, the array is [1, 3, 5, 7, 9]. 1. After the first operation \\"update 3 6\\", the array becomes [1, 3, 6, 7, 9]. 2. For the first query \\"query 1 5 6\\", the subarray is [1, 3, 6, 7, 9], and there are four elements (1, 3, 6) <= 6. 3. For the second query \\"query 2 4 10\\", the subarray is [3, 6, 7], and there are three elements (3, 6, 7) <= 10.","solution":"def perform_operations(n, m, arr, operations): result = [] for op in operations: if op[0] == \\"update\\": index = op[1] - 1 value = op[2] arr[index] = value elif op[0] == \\"query\\": l, r, x = op[1] - 1, op[2] - 1, op[3] count = sum(1 for i in range(l, r + 1) if arr[i] <= x) result.append(count) return result"},{"question":"Given a string S consisting of lowercase Latin letters, find the length of the longest substring that consists of unique characters. Input Format The input contains a single string S. Output Format The output should be a single integer representing the length of the longest substring with all unique characters. Constraints 1 ≤ |S| ≤ 100,000 SAMPLE INPUT abcabcbb SAMPLE OUTPUT 3","solution":"def length_of_longest_substring(S): Returns the length of the longest substring with all unique characters. char_map = {} left = 0 max_length = 0 for right in range(len(S)): if S[right] in char_map: left = max(left, char_map[S[right]] + 1) char_map[S[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given an array of integers and need to answer multiple queries about subarrays. For each query, determine if all elements in the specified subarray are distinct. Write a function to solve this problem. Input The first line contains an integer n (1 ≤ n ≤ 10^5), which is the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), which represent the elements of the array. The third line contains an integer q (1 ≤ q ≤ 10^5), which is the number of queries. The following q lines each contain two integers li and ri (1 ≤ li ≤ ri ≤ n), representing the indices (1-based) of the subarray to check. Output Print q lines, each containing either \\"YES\\" or \\"NO\\" depending on whether the subarray from index li to ri contains all distinct elements. Example Input 8 1 2 3 2 4 5 6 7 5 1 3 2 4 3 6 4 8 5 8 Output YES NO NO YES YES Explanation For the first query, the subarray is [1, 2, 3], all elements are distinct. For the second query, the subarray is [2, 3, 2], elements are not distinct. For the third query, the subarray is [3, 2, 4, 5], all elements are distinct. For the fourth query, the subarray is [2, 4, 5, 6, 7], all elements are distinct. For the fifth query, the subarray is [4, 5, 6, 7], all elements are distinct.","solution":"def are_all_elements_distinct(n, array, queries): Given an array and queries, checks if all elements in the specified subarray are distinct. Args: n (int): Number of elements in the array. array (list): List of integers representing the array. queries (list): List of tuples where each tuple contains two integers representing the start and end indices of the subarray. Returns: list: List of strings where each string is either \\"YES\\" or \\"NO\\" depending on whether the subarray contains all distinct elements. results = [] for l, r in queries: if len(array[l-1:r]) == len(set(array[l-1:r])): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Input The input contains a single string s (1 ≤ |s| ≤ 100) consisting of lowercase English letters. Output Output \\"YES\\" if s is a palindrome and \\"NO\\" otherwise. Examples **Input** ``` racecar ``` **Output** ``` YES ``` **Input** ``` hello ``` **Output** ``` NO ``` **Input** ``` level ``` **Output** ``` YES ```","solution":"def is_palindrome(s): Returns \\"YES\\" if s is a palindrome and \\"NO\\" otherwise. return \\"YES\\" if s == s[::-1] else \\"NO\\""},{"question":"**Problem Statement:** You are given a sequence of integers that was originally an Arithmetic Progression but got corrupted by a bug. The sequence originally starts at a number \'a\' and increases by a constant difference \'d\' but now exactly one element deviates from this pattern. Your task is to identify and correct the corrupted element to restore the original Arithmetic Progression. # Input The first line contains a single integer \'n\' (3 ≤ n ≤ 1000) — the number of elements in the sequence. The second line contains \'n\' integers s_1, s_2, ..., s_n (-10^9 ≤ s_i ≤ 10^9) — the corrupted sequence. # Output Output a single integer — the corrected element in the sequence given as the zero-based index and the new value \'val\'. # Example Input ``` 5 2 4 6 5 10 ``` Output ``` 3 8 ``` # Explanation In the given example, the correct arithmetic sequence would be: 2, 4, 6, 8, 10. The 4th element (5) is incorrect and should be 8 instead. # Note There is exactly one corrupted element in the sequence. The difference \'d\' will always be a non-zero integer. # Constraints - 3 ≤ n ≤ 1000 - -10^9 ≤ s_i ≤ 10^9","solution":"def correct_corrupted_element(n, sequence): # Calculate possible differences d1 = sequence[1] - sequence[0] d2 = sequence[2] - sequence[1] d3 = sequence[2] - sequence[0] # Determine the correct difference if d1 == d2: d = d1 else: d = d3 // 2 # Find the corrupted element for i in range(1, n): if sequence[i] - sequence[i - 1] != d: # Correct the element and return it with its index corrected_value = sequence[i - 1] + d return i, corrected_value return -1, -1 # This line should never be reached as per problem constraints"},{"question":"Sarah has a habit of arranging her bookshelf in a specific way. She always groups books with the same rating together and arranges the groups in ascending order of the ratings. Given a list of books where each book is represented by its rating as an integer, help Sarah arrange her bookshelf accordingly. You need to return the books sorted by their ratings in ascending order. If multiple books have the same rating, their relative order should be preserved. Constraints: * All values in the input are integers. * 1 ≤ number of books ≤ 100 * 1 ≤ book rating ≤ 1000 Input Input is given from Standard Input in the following format: n rating_1 rating_2 ... rating_n Output Print the books sorted by their ratings in ascending order as a space-separated list. Examples Input 5 3 1 4 1 5 Output 1 1 3 4 5 Input 4 10 20 10 30 Output 10 10 20 30 Input 6 5 5 5 5 5 5 Output 5 5 5 5 5 5","solution":"def arrange_books_by_rating(n, books): Returns the list of books sorted by their ratings in ascending order. n: int - number of books books: list of int - ratings of the books return: list of int - sorted list of books by ratings return sorted(books)"},{"question":"Given a string of lower-case alphabetic characters, determine the length of the shortest substring that contains all the distinct characters present in the given string. If the string is empty, return 0. Input A single line containing a string ( s ) (0 ≤ |s| ≤ 10^5). Output A single integer representing the length of the shortest substring containing all distinct characters in the string. Examples Input abcbac Output 3 Input aaaa Output 1 Input zxycba Output 6","solution":"def shortest_substring_with_all_distinct_characters(s): Returns the length of the shortest substring that contains all the distinct characters present in the given string. if not s: return 0 unique_chars = set(s) char_count = len(unique_chars) n = len(s) left = 0 min_length = float(\'inf\') current_counts = {} for right in range(n): current_counts[s[right]] = current_counts.get(s[right], 0) + 1 while len(current_counts) == char_count: min_length = min(min_length, right - left + 1) if current_counts[s[left]] == 1: del current_counts[s[left]] else: current_counts[s[left]] -= 1 left += 1 return min_length"},{"question":"In a faraway land, the inhabitants are fascinated by numerical patterns. They have a special interest in numbers that can be rearranged into a non-decreasing sequence by reversing exactly one of its contiguous subarrays. As a coding enthusiast, you have decided to help them by writing a program that will determine if a given array of numbers can be transformed into a non-decreasing sequence by one such reversal. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a[i] (1 ≤ a[i] ≤ 10000) — the elements of the array. Output Print \\"YES\\" (without the quotes) if the array can be transformed into a non-decreasing sequence by reversing exactly one of its contiguous subarrays. Otherwise, print \\"NO\\" (without the quotes). Examples Input 5 3 6 5 7 8 Output YES Input 4 4 3 2 1 Output YES Input 6 1 3 5 3 4 2 Output NO Explanation In the first example, you can reverse the subarray [6, 5] to get [3, 5, 6, 7, 8], which is non-decreasing. In the second example, you can reverse the entire array to get [1, 2, 3, 4], which is non-decreasing. In the third example, it\'s not possible to achieve a non-decreasing sequence by reversing exactly one contiguous subarray.","solution":"def can_be_sorted_by_reversing_subarray(n, arr): Determines if the given array can be transformed into a non-decreasing sequence by reversing exactly one of its contiguous subarrays. Args: n: int - the number of elements in the array arr: List[int] - the array of elements Returns: str: \\"YES\\" if the array can be transformed as described, otherwise \\"NO\\". # Identify the first point where the array is not increasing start = 0 while start < n - 1 and arr[start] <= arr[start + 1]: start += 1 # If the entire array is already sorted if start == n - 1: return \\"YES\\" # Identify the last point where the array is not increasing end = n - 1 while end > 0 and arr[end] >= arr[end - 1]: end -= 1 # Reverse the subarray arr[start:end + 1] arr[start:end + 1] = arr[start:end + 1][::-1] # Check if the array is now sorted if all(arr[i] <= arr[i + 1] for i in range(n - 1)): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a list of `n` integers representing a sequence. Your goal is to find the length of the longest subsequence where the difference between any two consecutive elements is exactly `d`. Input - The first line contains two space-separated integers `n` and `d` (1 ≤ n ≤ 105, -105 ≤ d ≤ 105). - The second line contains `n` space-separated integers representing the sequence. Output - Print a single integer representing the length of the longest subsequence where the difference between any two consecutive elements is exactly `d`. Examples Input 5 2 1 3 5 7 9 Output 5 Input 5 -1 1 2 3 4 5 Output 1 Input 8 10 10 20 30 40 50 60 70 80 Output 8 Note In the first example, the longest subsequence with a difference of 2 between consecutive elements is [1, 3, 5, 7, 9], which has a length of 5. In the second example, there is no subsequence where consecutive elements have a difference of -1, so the longest such subsequence is any single element (length 1). In the third example, each element can be part of the subsequence since each consecutive element differs by 10, resulting in a subsequence [10, 20, 30, 40, 50, 60, 70, 80] of length 8.","solution":"def longest_subsequence_length(n, d, sequence): Returns the length of the longest subsequence where the difference between any two consecutive elements is exactly `d`. # Dictionary to store the length of the longest subsequence ending with each element subseq_len = {} max_length = 0 for num in sequence: if num - d in subseq_len: subseq_len[num] = subseq_len[num - d] + 1 else: subseq_len[num] = 1 max_length = max(max_length, subseq_len[num]) return max_length # Example Usage if __name__ == \\"__main__\\": # Input reading n, d = map(int, input().split()) sequence = list(map(int, input().split())) # Finding the length of the longest subsequence result = longest_subsequence_length(n, d, sequence) print(result)"},{"question":"Given an integer array `arr`, you need to write a function that returns a new array that contains each element of `arr` squared and sorted in non-decreasing order. Input - The input consists of a single line containing space-separated integers of the array `arr`. Output - Print the sorted array of squares (space-separated integers). Constraints - The length of `arr` is between 1 and 1000. - Each element of `arr` is between -100 and 100. Example Input -4 -1 0 3 10 Output 0 1 9 16 100 Input -7 -3 2 3 11 Output 4 9 9 49 121 Explanation In the first example, the squares of the elements are: 16, 1, 0, 9, 100. Sorting this gives the result: 0, 1, 9, 16, 100. In the second example, the squares are: 49, 9, 4, 9, 121. Sorting this gives the result: 4, 9, 9, 49, 121.","solution":"def sorted_squares(arr): Given an integer array arr, return a new array that contains each element of arr squared and sorted in non-decreasing order. Parameters: arr (List[int]): A list of integers. Returns: List[int]: A list of squared integers sorted in non-decreasing order. # Square each element in the array squared_arr = [x ** 2 for x in arr] # Sort the squared array in non-decreasing order sorted_arr = sorted(squared_arr) return sorted_arr"},{"question":"You are a secret agent on a mission to crack a coded message. The message was intercepted in the form of an array of integers, where each integer represents a letter\'s position in the English alphabet (1 = A, 2 = B, ..., 26 = Z). However, the enemy has added a twist: they have inserted some extra zeros in unknown places within the array. To decode the message, you need to reconstruct the original array — without the zeros — and then translate the integers to their corresponding letters to reveal the secret message. Write a function `decode_message` that takes an array of integers as input and returns a string representing the decoded message. The input array contains only integers between 0 and 26 (inclusive). # Input The function should have the following signature: ```python def decode_message(encoded: List[int]) -> str: ``` - `encoded`: a list of integers where 0 ≤ `encoded[i]` ≤ 26 and 1 ≤ |`encoded`| ≤ 1000. # Output The function should return a string that represents the decoded message by removing all zeros and converting remaining integers into their corresponding letters (1 = A, 2 = B, ..., 26 = Z). # Example Input ```python [8, 5, 0, 12, 12, 15] ``` Output ```python \\"HELLO\\" ``` Input ```python [3, 15, 4, 5, 0, 9, 19, 0, 6, 21, 14] ``` Output ```python \\"CODEISFUN\\" ```","solution":"from typing import List def decode_message(encoded: List[int]) -> str: Decodes a message by removing zeros and converting integers to corresponding alphabetical letters (1 = A, ..., 26 = Z). # Filter out zeros from the encoded list filtered_encoded = filter(lambda x: x != 0, encoded) # Convert numbers to letters decoded_message = \'\'.join(chr(64 + num) for num in filtered_encoded) return decoded_message"},{"question":"You are given a grid with M rows and N columns. Each cell contains an integer, which represents the height at that cell. A path from cell (i1, j1) to cell (i2, j2) is a sequence of adjacent cells, where each move is up, down, left, or right. The difficulty of walking from one cell to another is the difference in height between those cells. Starting at the top-left corner of the grid, your task is to determine the minimum possible \'maximum difficulty\' of any path to the bottom-right corner. In other words, find the path where the maximum height difference between any two adjacent cells is minimized. Constraints: - 1 ≦ M, N ≦ 100 - 0 ≦ height of each cell ≦ 10^4 Input The input is given from Standard Input in the following format: M N h_1_1 h_1_2 ... h_1_N h_2_1 h_2_2 ... h_2_N : h_M_1 h_M_2 ... h_M_N Output Print one line containing an integer, the minimum possible \'maximum difficulty\' of any path from the top-left corner to the bottom-right corner. Examples Input 3 3 1 2 2 3 8 2 5 3 5 Output 2 Input 2 2 1 2 4 5 Output 3","solution":"import heapq def min_max_difficulty(M, N, heights): Returns the minimum possible \'maximum difficulty\' of any path from the top-left corner to the bottom-right corner of the grid. def neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N: yield nx, ny pq = [(0, 0, 0)] # (difficulty, x, y) max_difficulty = [[float(\'inf\')]*N for _ in range(M)] max_difficulty[0][0] = 0 while pq: difficulty, x, y = heapq.heappop(pq) if x == M-1 and y == N-1: return difficulty for nx, ny in neighbors(x, y): new_difficulty = max(difficulty, abs(heights[nx][ny] - heights[x][y])) if new_difficulty < max_difficulty[nx][ny]: max_difficulty[nx][ny] = new_difficulty heapq.heappush(pq, (new_difficulty, nx, ny)) return -1 def parse_input(input_str): data = input_str.strip().split() M = int(data[0]) N = int(data[1]) heights = [list(map(int, data[i*N + 2:i*N + 2 + N])) for i in range(M)] return M, N, heights # Example usage: input_str = 3 3 1 2 2 3 8 2 5 3 5 M, N, heights = parse_input(input_str) print(min_max_difficulty(M, N, heights)) # Output should be 2"},{"question":"Alex loves to play with strings and numbers. One day, Alex challenges you to solve a problem combining both. Given a string `S` and a number `N`, you need to construct a new string by repeating each character in `S` exactly `N` times consecutively. For example, if the string is \\"abc\\" and N = 3, the new string will be \\"aaabbbccc\\". Input: First line contains the number of test cases T. Each test case consists of a string `S` and an integer `N`, separated by a space. Output: For each test case, print the new string constructed as described. Constraints: 1 ≤ |S| ≤ 100 1 ≤ N ≤ 100 1 ≤ T ≤ 10^4 SAMPLE INPUT 2 abc 3 xyz 2 SAMPLE OUTPUT aaabbbccc xxyyzz Explanation 1st Test Case The string \\"abc\\" is transformed to \\"aaabbbccc\\" by repeating each character 3 times. 2nd Test Case The string \\"xyz\\" is transformed to \\"xxyyzz\\" by repeating each character 2 times.","solution":"def repeat_characters(t, test_cases): For each test case in test_cases, repeat each character in the string S exactly N times consecutively. Parameters: t (int): Number of test cases test_cases (list of tuples): Each tuple contains a string S and an integer N Returns: list of str: A list containing the transformed strings for each test case results = [] for S, N in test_cases: transformed_string = \'\'.join([char * N for char in S]) results.append(transformed_string) return results"},{"question":"The kingdom of Algoria is known for its beautiful palindromic patterns that are often found in various aspects of their art and culture. One particular pattern is loved by all: the circular palindrome. A string is called a circular palindrome if it remains the same when it is rotated at any position and then reversed. For example, the string \\"abc\\" is not a circular palindrome, but the string \\"aaa\\" is, since rotating it at any position leaves \\"aaa\\", which is a palindrome. Given a string s of lowercase English alphabets, determine whether it is a circular palindrome. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. The next t lines contain a string s (1 ≤ |s| ≤ 50) for each test case. Output For each test case, print \\"YES\\" if the string is a circular palindrome, and \\"NO\\" otherwise. Examples Input 3 aaa abc aba Output YES NO YES","solution":"def is_circular_palindrome(s): Determine whether a string s is a circular palindrome. Parameters: s (str): Input string to check. Returns: str: \\"YES\\" if s is a circular palindrome, \\"NO\\" otherwise. n = len(s) for i in range(n): rotated = s[i:] + s[:i] if rotated == rotated[::-1]: # Check if the rotated string is a palindrome return \\"YES\\" return \\"NO\\" def circular_palindrome_test_cases(t, test_cases): Process multiple test cases to determine if they are circular palindromes. Parameters: t (int): Number of test cases. test_cases (list): List of strings representing the test cases. Returns: list: List of results for each test case, either \\"YES\\" or \\"NO\\". results = [] for i in range(t): results.append(is_circular_palindrome(test_cases[i])) return results"},{"question":"You are given an array of n integers a1, a2, ..., an. You can perform an operation where you select a subarray (a contiguous segment of the array) and reverse its elements. You want to sort the array in ascending order by performing such operations. Determine the minimum number of operations required to sort the array in ascending order. If it is not possible to sort the array using the described operations, return -1. Input The first line contains an integer n (1 ≤ n ≤ 100 000), the number of elements in the array. The second line contains n integers ai (1 ≤ ai ≤ 100 000), the elements of the array. Output Print a single integer denoting the minimal number of operations required to sort the array, or -1 if it is impossible. Examples Input 4 1 3 2 4 Output 1 Input 5 5 4 3 2 1 Output 1 Input 4 4 3 2 1 Output 1 Input 3 2 3 1 Output -1 Note In the first example, reversing the subarray [3, 2] will yield the sorted array [1, 2, 3, 4]. In the second example, reversing the entire array will result in the sorted array [1, 2, 3, 4, 5]. In the third example, reversing the entire array will result in the sorted array [1, 2, 3, 4]. In the fourth example, no series of single subarray reversals will yield the sorted array.","solution":"def min_operations_to_sort(n, arr): Determine the minimal number of operations required to sort the array by reversing a subarray. Return -1 if it is impossible. Parameters: n (int): The number of elements in the array. arr (list): The list of integers. Returns: int: The minimal number of operations, or -1 if it is impossible. sorted_arr = sorted(arr) if arr == sorted_arr: return 0 left = 0 while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 right = n - 1 while right > 0 and arr[right] >= arr[right - 1]: right -= 1 subarray = arr[left:right + 1] if subarray[::-1] == sorted_arr[left:right + 1]: return 1 else: return -1"},{"question":"Your task is to determine whether a rectangle can fit inside another rectangle given their dimensions and the constraint that no rotation is allowed. Write a program that reads four integers, w1, h1, w2, and h2 – the width and height of two rectangles. The program should print \\"Yes\\" if the second rectangle can fit inside the first one without rotation. Otherwise, print \\"No\\". Constraints * 1 leq w1, h1, w2, h2 leq 100 * All input values are integers. # Input Input is given from Standard Input in the following format: w1 h1 w2 h2 # Output Print \\"Yes\\" if the second rectangle can fit inside the first one, otherwise print \\"No\\". # Examples Input 4 5 2 3 Output Yes Input 3 3 4 1 Output No Input 5 6 7 8 Output No Input 10 10 10 10 Output Yes","solution":"def can_fit_inside(w1, h1, w2, h2): Determines if rectangle w2 by h2 can fit inside rectangle w1 by h1 without rotation. if w2 <= w1 and h2 <= h1: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given an array of integers representing the daily temperatures for the next N days. Calculate the number of days you have to wait until a warmer temperature for each day. If there is no future day for which this is possible, store 0 for that day. Input The first line contains the number of test cases T. T test cases follow: The first line of each test case contains a number N. The next line contains N integers, denoting the daily temperatures for the next N days. Output Output T lines, each containing N integers, representing the number of days to wait for a warmer day. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 30000 All temperature values are between -50 and 50 SAMPLE INPUT 2 4 73 74 75 71 5 30 40 50 60 20 SAMPLE OUTPUT 1 1 0 0 1 1 1 0 0 Explanation For the 1st case, the output is - for day 1, wait 1 day for a warmer temperature (from 73 to 74), for day 2, wait 1 day for a warmer temperature (from 74 to 75), for day 3, no warmer days are present, thus 0, and similarly for day 4. For the 2nd case, the output is - for day 1, wait 1 day for a warmer temperature (from 30 to 40), for day 2, wait 1 day for a warmer temperature (from 40 to 50), for day 3, wait 1 day for a warmer temperature (from 50 to 60), for day 4, no warmer days are present, thus 0, and similarly for day 5.","solution":"def daily_temperatures(test_cases): results = [] for temperatures in test_cases: n = len(temperatures) answer = [0] * n stack = [] # This will store indices of \'temperatures\' list for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: j = stack.pop() answer[j] = i - j stack.append(i) results.append(answer) return results def parse_input(input_string): input_lines = input_string.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) temperatures = list(map(int, input_lines[index + 1].strip().split())) test_cases.append(temperatures) index += 2 return test_cases"},{"question":"A famous software company is developing a new multiplayer game called \\"Treasure Hunt in the Forest\\". In this game, players search for treasures hidden in a vast forest represented as an infinite 2D grid. Each cell in the grid can either contain a treasure or be empty. To keep track of players, the company uses a coordinate system where each player has a unique position (xi, yi). Players can move vertically or horizontally to adjacent cells, but they cannot move diagonally. To make the game more challenging, the company wants to add \\"treasure maps\\" which reveal the closest treasures to each player. The distance between two cells (xi, yi) and (xj, yj) is defined as the Manhattan distance: |xi - xj| + |yi - yj|. Your task is to write a program that, given the coordinates of treasures and players, determines the Manhattan distance from the position of each player to the nearest treasure. Input The first line contains two integers m and n (1 ≤ m, n ≤ 10^5), the number of treasures and the number of players, respectively. The next m lines each contain two integers xi and yi ( - 10^9 ≤ xi, yi ≤ 10^9) representing the coordinates of a treasure. The following n lines each contain two integers xi and yi ( - 10^9 ≤ xi, yi ≤ 10^9) representing the coordinates of a player. Output Output n lines, each containing one integer: the Manhattan distance from the i-th player\'s position to the nearest treasure. Examples Input 3 2 1 1 2 2 4 4 1 3 5 5 Output 1 1 Input 2 3 -1 -1 0 0 2 2 3 -3 -5 -5 Output 3 3 5 Note In the first sample: - For the first player at position (1, 3), the closest treasure is at (1, 1) with a distance of |1 - 1| + |3 - 1| = 2. - For the second player at position (5, 5), the closest treasure is at (4, 4) with a distance of |5 - 4| + |5 - 4| = 1. In the second sample: - For the first player at position (2, 2), the closest treasure is at (0, 0) with a distance of |2 - 0| + |2 - 0| = 4. - For the second player at position (3, -3), the closest treasure is at (0, 0) with a distance of |3 - 0| + |-3 - 0| = 6. - For the third player at position (-5, -5), the closest treasure is at (-1, -1) with a distance of |-5 - (-1)| + |-5 - (-1)| = 8.","solution":"def nearest_treasure_distance(treasures, players): Computes the Manhattan distance from each player\'s position to the nearest treasure. Parameters: treasures (list of tuples): List of coordinates (xi, yi) of treasures. players (list of tuples): List of coordinates (xi, yi) of players. Returns: list of int: List of Manhattan distances to the nearest treasures for each player. distances = [] for px, py in players: min_distance = float(\'inf\') for tx, ty in treasures: distance = abs(px - tx) + abs(py - ty) if distance < min_distance: min_distance = distance distances.append(min_distance) return distances"},{"question":"You are given an array of integers that represent different ranges of overlapping intervals. Each interval is denoted by a pair of integers [A, B], where A is the start of the interval and B is the end (inclusive). Your task is to merge all overlapping intervals and return the total count of unique intervals after merging. Two intervals, [A1, B1] and [A2, B2], are said to be overlapping if A1 ≤ B2 and A2 ≤ B1. Write a function that takes an array of pairs [[A1, B1], [A2, B2], ..., [An, Bn]] and returns the total count of unique intervals after merging all overlapping intervals. # Function Signature ```python def merge_intervals(intervals: List[List[int]]) -> int: pass ``` # Input - `intervals`: A list of `n` pairs of integers, where each pair represents an interval [A, B] (1 ≤ A ≤ B ≤ 10^9). # Output - An integer representing the number of unique intervals after merging all overlapping intervals. # Examples Input ```python intervals = [[1, 3], [2, 6], [8, 10], [15, 18]] ``` Output ```python 3 ``` Input ```python intervals = [[1, 4], [4, 5]] ``` Output ```python 1 ``` # Constraints - 1 ≤ n ≤ 10^4 - 1 ≤ A_i ≤ B_i ≤ 10^9 # Explanation In the first example: - Intervals [1, 3] and [2, 6] overlap and merge into [1, 6]. - Intervals [8, 10] and [15, 18] do not overlap with any other intervals. - The resulting unique intervals are [1, 6], [8, 10], and [15, 18]. In the second example: - Intervals [1, 4] and [4, 5] overlap and merge into [1, 5]. - The resulting unique interval is [1, 5].","solution":"from typing import List def merge_intervals(intervals: List[List[int]]) -> int: if not intervals: return 0 # Sort intervals based on the starting point intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: merged[-1][1] = max(merged[-1][1], interval[1]) return len(merged)"},{"question":"The Mysterious Cave Problem Statement A cave is represented as an undirected graph where each node represents a chamber and each edge represents a tunnel between chambers. There are N chambers and M tunnels within the cave. The cave system starts at chamber 1, and two adventurers are trying to find the shortest path from chamber 1 to chamber N. However, there\'s a catch: both adventurers cannot use the same tunnel at the same time due to a mysterious force. Determine the shortest time in which both adventurers can simultaneously reach the final chamber N without using the same tunnel at the same time. Constraints * 2 ≤ N ≤ 1000 * 1 ≤ M ≤ 3000 * 1 ≤ u, v ≤ N * 1 ≤ w ≤ 1000 Input The input is given in the following format. All given numbers are integers. N M u_1 v_1 w_1 u_2 v_2 w_2 ... u_M v_M w_M Output Output the shortest time in which both adventurers can reach chamber N while not using the same tunnel at the same time. If it is not possible for both to reach chamber N, output -1. Examples Input 5 7 1 2 2 1 3 3 2 3 1 2 4 2 3 4 1 4 5 3 3 5 5 Output 7 Input 4 4 1 2 2 1 3 4 2 4 7 3 4 6 Output 9","solution":"import heapq def dijkstra(graph, start, N): dist = [float(\'inf\')] * (N + 1) dist[start] = 0 pq = [(0, start)] while pq: current_dist, node = heapq.heappop(pq) if current_dist > dist[node]: continue for v, weight in graph[node]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist def solve(N, M, tunnels): graph = [[] for _ in range(N + 1)] for u, v, w in tunnels: graph[u].append((v, w)) graph[v].append((u, w)) dist_from_start = dijkstra(graph, 1, N) dist_from_end = dijkstra(graph, N, N) if dist_from_start[N] == float(\'inf\'): return -1 min_time = float(\'inf\') for u, v, w in tunnels: if dist_from_start[u] + w + dist_from_end[v] == dist_from_start[N]: min_time = min(min_time, dist_from_start[u] + w + dist_from_end[v]) if dist_from_start[v] + w + dist_from_end[u] == dist_from_start[N]: min_time = min(min_time, dist_from_start[v] + w + dist_from_end[u]) return min_time def mysterious_cave(N, M, tunnels): return solve(N, M, tunnels)"},{"question":"You are building a video sharing platform, and you want to analyze the popularity of specific videos based on user interactions. Each interaction can be of three types: * 1. \\"A watched B\'s video\\" (20 points), * 2. \\"A shared B\'s video\\" (15 points), * 3. \\"A commented on B\'s video\\" (10 points). Here, A and B denote user names, and each interaction will increase the popularity score of video B by a specific number of points as described above. You will be given the number of interactions, followed by the list of interactions. Based on this input, calculate the total popularity score for each video and output the videos in descending order of their scores. If two or more videos have the same score, then return their titles in alphabetical order. Input The first line contains an integer n, the number of interactions (1 ≤ n ≤ 100). Then n lines follow, each containing an interaction in one of the given formats. Each interaction string contains exactly 1 space between every two words, and there are no extra spaces. All the words are lowercase. All names and video titles consist of at least 1 letter and at most 10 small Latin letters. Output Print k lines where k is the number of distinct video titles in the interactions. Each line should contain the video title and its total popularity score separated by a space. The lines should be ordered by the score in descending order. If two or more videos have the same score, print them in alphabetical (lexicographical) order. Examples Input 4 alice watched bob\'s video charlie watched bob\'s video alice shared bob\'s video alice commented on charlie\'s video Output bob 55 charlie 10 Input 3 daisy commented on eva\'s video frank shared daisy\'s video eva watched eva\'s video Output eva 30 daisy 15","solution":"def calculate_popularity_score(n, interactions): score_dict = {} for interaction in interactions: parts = interaction.split() video = parts[-2][:-2] # Extract the video title if \'watched\' in interaction: points = 20 elif \'shared\' in interaction: points = 15 elif \'commented\' in interaction: points = 10 if video in score_dict: score_dict[video] += points else: score_dict[video] = points sorted_videos = sorted(score_dict.items(), key=lambda x: (-x[1], x[0])) for video, score in sorted_videos: print(video, score) # read input and call the function if __name__ == \\"__main__\\": n = int(input()) interactions = [input().strip() for _ in range(n)] calculate_popularity_score(n, interactions)"},{"question":"# Problem Statement: Write a function `find_valid_substrings(s, k)` that takes a string `s` and an integer `k` as input, and returns the number of substrings where the number of distinct characters is exactly `k`. # Function Signature: ```python def find_valid_substrings(s: str, k: int) -> int: ``` # Input: - `s`: A string of lowercase English letters (1 <= len(s) <= 10^5). - `k`: An integer (1 <= k <= 26). # Output: - Return the number of substrings where the number of distinct characters is exactly `k`. # Example: Input: ```python s = \\"pqpqs\\" k = 2 ``` Output: ```python 7 ``` Explanation: The valid substrings are: \\"pq\\", \\"qp\\", \\"pq\\", \\"qs\\", \\"pqp\\", \\"qpq\\", \\"pq\\". # Constraints: - The length of each substring is a factor in determining the number of distinct characters. - The substring must have exactly `k` distinct characters, no more, no less. # Note: You can use sliding window technique and hashmaps to efficiently solve this problem. Ensure that your implementation runs in O(n) time where `n` is the length of the string to handle large inputs efficiently.","solution":"def find_valid_substrings(s: str, k: int) -> int: from collections import Counter def at_most_k_distinct(s, k): count = Counter() left = 0 result = 0 for right in range(len(s)): count[s[right]] += 1 while len(count) > k: count[s[left]] -= 1 if count[s[left]] == 0: del count[s[left]] left += 1 result += right - left + 1 return result return at_most_k_distinct(s, k) - at_most_k_distinct(s, k - 1)"},{"question":"Polycarp wants to arrange his bookshelf to make it look neat and organized. He has a total of n books and he has categorized them into k different categories. Each category i contains a certain number of books bi (1 ≤ i ≤ k). Polycarp\'s shelf can be divided into exactly k sections, one for each category. He wants to ensure that each section contains all the books from its respective category and nothing else. However, Polycarp can only create sections that are continuous and non-overlapping. To organize his books efficiently, Polycarp must do the following: - Divide the array of books into k continuous, non-overlapping segments such that each segment corresponds to one of the k categories. - Each segment should contain the exact number of books for the corresponding category. Determine if it\'s possible to organize the books into the desired format and return the indices of the segment boundaries if possible. Input The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then the test cases follow. Each test case is described by two lines. - The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ n) — the total number of books and the number of categories. - The second line contains k integers b1, b2, ..., bk (1 ≤ bi ≤ 100), where bi is the number of books in the i-th category. The sum of all bi must be equal to n. Output For each test case, if it is possible to divide the books into the desired segments, print a single line containing k integers — the ending indices of the segments. If it is not possible, print \\"NO\\". Examples Input 3 7 3 2 3 2 6 2 3 4 10 5 2 2 2 2 2 Output 2 5 7 NO 2 4 6 8 10 Note In the first test case, it is possible to divide the books as follows: - The first category has 2 books, so the first section ends at index 2. - The second category has 3 books, so the second section ends at index 5. - The third category has 2 books, so the third section ends at index 7. In the second test case, the sum of the categories (3+4) is not equal to the total number of books, so it is not possible to organize the books as requested. In the third test case, each category has the same number of books (2), so the sections are formed by indices 2, 4, 6, 8, and 10.","solution":"def organize_books(t, test_cases): results = [] for case in test_cases: n, k = case[0] b = case[1] if sum(b) != n: results.append(\\"NO\\") else: indices = [] current_index = 0 for books in b: current_index += books indices.append(current_index) results.append(\\" \\".join(map(str, indices))) return results # Input parsing and function usage example def main(input_data): data = input_data.splitlines() t = int(data[0]) test_cases = [] current_index = 1 for _ in range(t): n, k = map(int, data[current_index].split()) b = list(map(int, data[current_index + 1].split())) test_cases.append(((n, k), b)) current_index += 2 results = organize_books(t, test_cases) for result in results: print(result) # Example input input_data = 3 7 3 2 3 2 6 2 3 4 10 5 2 2 2 2 2 main(input_data)"},{"question":"You are given an array of integers where every number appears exactly twice except for one number which appears only once. Your task is to find the number that appears only once. Write a function `findUnique` that accepts a list of integers and returns the integer that appears only once. Input - A list of integers `nums` where `1 <= len(nums) <= 10^6` and each integer `-10^6 <= nums[i] <= 10^6`. Output - An integer representing the number that appears only once. Example Input ``` [4, 1, 2, 1, 2] ``` Output ``` 4 ``` Input ``` [2, 2, 1] ``` Output ``` 1 ``` Input ``` [1] ``` Output ``` 1 ``` Note 1. You are guaranteed that the input follows the constraints where exactly one number will appear once, and all other numbers will appear exactly twice. 2. Aim for an efficient solution with linear time complexity.","solution":"def findUnique(nums): Returns the number that appears only once in the list. Uses XOR operation to find the unique number. Args: nums (list): List of integers where every number apart from one appears exactly twice. Returns: int: The number that appears only once. unique = 0 for num in nums: unique ^= num return unique"},{"question":"Polycarp has a new job as a delivery driver for a local store. The store offers free delivery if the delivery route forms a palindrome. In order to determine whether a route forms a palindrome, we can represent the route as a string composed of lowercase alphabetic characters, where each character represents a specific section of the journey. Given a string s of length n representing the route, Polycarp needs to find the minimal number of characters he needs to change in the string to make sure the route forms a palindrome. Write a program to achieve this goal. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the route. The second line contains a string s of length n consisting of lowercase alphabetic characters. Output The first line should contain a single integer – the minimal number of changes needed to make the string a palindrome. Examples Input 5 abcde Output 2 Input 6 aabbcc Output 2 Explanation: In the first example, changing \'a\' to \'e\' and \'b\' to \'d\' will make the string \\"edcde,\\" which is a palindrome. Thus, the minimal number of changes needed is 2. In the second example, changing \'a\' to \'c\' and \'b\' to \'c\' will make the string \\"ccbcc,\\" which is a palindrome. Thus, the minimal number of changes needed is 2.","solution":"def minimal_palindrome_changes(n, s): Returns the minimal number of changes needed to make the string a palindrome. changes_needed = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: changes_needed += 1 return changes_needed"},{"question":"You are given a list of integers and are tasked to partition this list into two non-empty subsets such that the difference between the sums of the elements in the two subsets is minimized. Your task is to output the minimum possible difference. Input The first line contains an integer N (2 ≤ N ≤ 50), which denotes the number of integers in the list. The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 1000), which represents the integers in the list. Output Output a single integer, denoting the minimum possible difference between the sums of the two subsets. Examples Input 4 1 6 5 11 Output 1 Input 3 1 2 3 Output 0 Note Explanation for the sample input/output #1: The list can be partitioned as {1, 6, 5} and {11}, leading to subset sums of 12 and 11, respectively. The difference between the sums is |12-11|=1, which is the minimum possible difference. Explanation for the sample input/output #2: The list can be partitioned as {1, 2} and {3}, leading to both subset sums being 3. The difference between the sums is |3-3|=0, which is the minimum possible difference.","solution":"def minimum_difference_partition(n, arr): Returns the minimum possible difference between the sums of two non-empty subsets of the list arr. total_sum = sum(arr) half_sum = total_sum // 2 dp = [False] * (half_sum + 1) dp[0] = True for num in arr: for i in range(half_sum, num - 1, -1): dp[i] = dp[i] or dp[i - num] for i in range(half_sum, -1, -1): if dp[i]: subset_sum = i break return total_sum - 2 * subset_sum"},{"question":"A kingdom is organizing an archery tournament featuring several incoming participants. Each participant will shoot a number of arrows, and each arrow will hit a target, earning them certain points. The scores each participant earns for each arrow are known upfront and are stored in a sequence. However, participants only care about their total scores which should be as large as possible. To make the game more exciting and unpredictable, the kingdom has decided that a participant can only use a contiguous subsequence of their arrows to compute their final score. Given the scores for each arrow of a participant, your task is to determine the maximum possible score that the participant can achieve by using any contiguous subsequence of their arrows. Input The first line of the input contains a single positive integer n (1 ≤ n ≤ 100) — the number of arrows shot by the participant. The second line contains n space-separated integers s1, s2, ..., sn (-1000 ≤ si ≤ 1000) — the scores for each arrow. Output Output a single integer — the maximum possible score that can be achieved using any contiguous subsequence of the arrows. Examples Input 5 -2 1 -3 4 -1 Output 4 Input 8 -1 2 3 -9 8 -1 2 1 Output 10 Input 4 -1 -2 -3 -4 Output -1 Note In the first sample: * The participant can achieve a maximum score of 4 by selecting the subsequence [4]. In the second sample, the participant can achieve a maximum score of 10 by selecting the subsequence [8, -1, 2, 1]. In the third sample, since all values are negative, the best possible score is achieved by selecting the single least negative score, which in this case is -1.","solution":"def max_subarray_score(n, scores): Determines the maximum possible score that can be achieved using any contiguous subsequence of the scores. Arguments: n -- number of arrows shot (length of scores list) scores -- list of integers representing the scores for each arrow Returns: The maximum possible score max_current = max_global = scores[0] # Initialize with the first element for i in range(1, n): max_current = max(scores[i], max_current + scores[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a string of length n containing only characters \'L\' and \'R\'. Your task is to calculate the minimum number of segments such that each segment contains an equal number of \'L\' and \'R\' characters. Constraints * 2 leq n leq 10^5 * The string will always have equal number of \'L\' and \'R\'. Input Input is given from Standard Input in the following format: n s Output Print a single integer, the minimum number of segments. Examples Input 8 RLRLRLRL Output 4 Input 4 RLLR Output 2","solution":"def min_segments(n, s): Calculates the minimum number of segments such that each segment contains an equal number of \'L\' and \'R\' characters. balance = 0 count = 0 for char in s: if char == \'L\': balance += 1 else: # char == \'R\' balance -= 1 if balance == 0: count += 1 return count"},{"question":"After watching a science fiction movie, little Sheila became fascinated by the idea of a hologram calendar. She decides to create a magical calendar that displays the cumulative sum of the first n natural numbers dynamically. However, there is a twist: whenever Sheila sets a number that is a multiple of 10, the calendar shows the cumulative sum in reverse order. Write a function that calculates the cumulative sum of the first n natural numbers and then returns the result as a string. If the number n is a multiple of 10, the result should be returned in reverse order. Input The first line contains a single integer n (0 ≤ n ≤ 1000000). Output Print the resulting cumulative sum as a string, reversed if n is a multiple of 10. Examples Input 5 Output 15 Input 10 Output 55 Note In the first sample, the cumulative sum of the first 5 natural numbers (1 + 2 + 3 + 4 + 5) is 15, and since 5 is not a multiple of 10, the result is displayed normally. In the second sample, the cumulative sum of the first 10 natural numbers (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10) is 55. Since 10 is a multiple of 10, the result is reversed, showing \\"55\\" reversed which is still \\"55\\".","solution":"def magical_calendar(n): Calculate the cumulative sum of the first n natural numbers. Reverse the result if n is a multiple of 10. Args: n (int): The number of natural numbers to sum. Returns: str: The cumulative sum as a string, reversed if n is a multiple of 10. cumulative_sum = n * (n + 1) // 2 result = str(cumulative_sum) if n % 10 == 0: result = result[::-1] return result"},{"question":"In a kingdom far, far away, there is a famous sorcerer who controls magical portals. Each portal connects two different locations and allows instant travel between them in both directions. The sorcerer can destroy any portal at any time. The king wants to ensure his kingdom remains unified and any two locations should always have a way to travel between them, even if the sorcerer starts destroying portals. To achieve this, the king needs to calculate the number of possible ways to destroy a single portal such that the kingdom still remains connected. Input First line of the input contains two integers n and m (2 ≤ n ≤ 2 000, 1 ≤ m ≤ 5 000) — the number of locations and the number of portals in the kingdom, respectively. Next m lines contain two integers u and v (1 ≤ u, v ≤ n; u ≠ v) — indicating a portal between location u and location v. Output Output a single integer — the number of portals that can be destroyed such that the kingdom remains connected. Examples Input 5 5 1 2 2 3 3 4 4 5 2 5 Output 4 Input 4 4 1 2 2 3 3 4 4 1 Output 4","solution":"def count_non_cutting_edges(n, m, edges): from collections import defaultdict def dfs(v, parent): nonlocal time time += 1 disc[v] = low[v] = time for to in adj[v]: if disc[to] == -1: # If to is not visited dfs(to, v) low[v] = min(low[v], low[to]) if low[to] > disc[v]: # (v, to) is a bridge is_bridge[v, to] = is_bridge[to, v] = True elif to != parent: low[v] = min(low[v], disc[to]) # Initialize adjacency list and arrays to record discovery and lowest times adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) disc = [-1] * (n + 1) low = [-1] * (n + 1) is_bridge = defaultdict(bool) time = 0 for i in range(1, n + 1): if disc[i] == -1: dfs(i, -1) return m - sum(is_bridge.values()) // 2 # Example usage: # n = 5 # m = 5 # edges = [[1, 2], [2, 3], [3, 4], [4, 5], [2, 5]] # print(count_non_cutting_edges(n, m, edges)) # Output: 4"},{"question":"Gale, a botanist, is trying to arrange her garden in a way that maximizes the aesthetic appeal. She has a garden grid of size MxM, where each cell can either be empty (represented by 0) or planted with a tree (represented by 1). Gale wants to plant her trees such that each tree-block (a connected group of trees) has a size exactly equal to K. A tree-block is defined as a set of cells connected vertically or horizontally (not diagonally). For example, in a 4x4 garden grid with K=3: ``` 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 ``` The cells (0,0), (0,1), and (1,1) form a tree-block of size 3. Gale wants to know if it is possible to arrange the trees in the garden such that each tree-block has exactly K trees. Input The input consists of multiple test cases. For each test case: - The first line contains the number of test cases T. - For each test case: - The first line contains the size of the garden (M ≤ 50) and the desired block size K (1 ≤ K ≤ 2500). - The next M lines describe the garden grid, with M integers in each line denoting the presence (1) or absence (0) of a tree. Output For each test case, print \\"POSSIBLE\\" if it is feasible to plant the trees such that all tree-blocks have a size exactly equal to K, otherwise print \\"NOT POSSIBLE\\". SAMPLE INPUT 2 4 3 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 3 2 1 1 0 0 1 0 0 0 0 SAMPLE OUTPUT POSSIBLE NOT POSSIBLE","solution":"def possible_tree_blocks(garden, M, K): def dfs(x, y): nonlocal current_block_size if x < 0 or y < 0 or x >= M or y >= M or garden[x][y] == 0: return current_block_size += 1 garden[x][y] = 0 # mark as visited dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) for i in range(M): for j in range(M): if garden[i][j] == 1: current_block_size = 0 dfs(i, j) if current_block_size != K: return \\"NOT POSSIBLE\\" return \\"POSSIBLE\\" def solve_gale_problem(test_cases): results = [] for case in test_cases: M, K, garden = case[\\"M\\"], case[\\"K\\"], case[\\"garden\\"] garden_copy = [row[:] for row in garden] # make a copy to preserve original data result = possible_tree_blocks(garden_copy, M, K) results.append(result) return results # Example usage: input_data = [ {\\"M\\": 4, \\"K\\": 3, \\"garden\\": [[1, 1, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]}, {\\"M\\": 3, \\"K\\": 2, \\"garden\\": [[1, 1, 0], [0, 1, 0], [0, 0, 0]]}, ] print(solve_gale_problem(input_data)) # should output [\\"POSSIBLE\\", \\"NOT POSSIBLE\\"]"},{"question":"Given a string containing lowercase alphabetical characters and the character \'*\', reverse the string without changing the positions of the \'*\' characters. The \'*\' characters should remain in their original indices, while the alphabetical characters in the string should be reversed. For example, given a string \\"a*bcd*e\\", reversing it would result in \\"e*dcba*\\". # Input A single line containing a string s, where 1 ≤ |s| ≤ 100 and s contains only lowercase alphabetical characters and the \'*\' character. # Output Print the modified string after reversing the alphabetical characters while keeping the \'*\' characters in their original positions. # Examples Input abcd*efgh*ij Output jihg*fedc*ba Input a*b*c*d Output d*c*b*a Input hello*world Output dlrow*olleh","solution":"def reverse_string_except_asterisks(s): Reverses the alphabetical characters in the string s, while leaving any \'*\' characters in their original positions. # Extract the alphabetical characters in reverse order alpha_chars = [char for char in s if char.isalpha()][::-1] # Create a new list to hold the final characters result_chars = [] alpha_index = 0 # Reconstruct the string with \'*\' in original positions and other chars reversed for char in s: if char == \'*\': result_chars.append(char) else: result_chars.append(alpha_chars[alpha_index]) alpha_index += 1 # Combine the list to form the output string return \'\'.join(result_chars)"},{"question":"K-th Smallest Element in a Sorted Matrix You are given an N x N matrix where each of the rows and columns is sorted in ascending order. Your goal is to find the k-th smallest element in the matrix. Input - The first line contains two integers N and k. N is the number of rows and columns in the matrix, and k is the position (1-indexed) of the smallest element you need to find. - The following N lines contain N space-separated integers each, representing the matrix. Output Print the k-th smallest element in the matrix. Constraints 1 ≤ N ≤ 1000 1 ≤ k ≤ N * N -10^9 ≤ Matrix[i][j] ≤ 10^9 SAMPLE INPUT 3 7 1 5 9 10 11 13 12 13 15 SAMPLE OUTPUT 13","solution":"import heapq def kth_smallest(matrix, n, k): Finds the k-th smallest element in an N x N matrix where each row and column is sorted. # Initialize a min-heap min_heap = [] # Iterate through the first element of each row (since rows are sorted) for r in range(min(n, k)): # (value, row, col) heapq.heappush(min_heap, (matrix[r][0], r, 0)) # Extract-min k times for _ in range(k): val, r, c = heapq.heappop(min_heap) if c + 1 < n: heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1)) return val"},{"question":"You are given a 2D matrix of characters that represents a word search puzzle. The goal is to find if a given word exists in the matrix. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. Write a function that determines if the word exists in the matrix. The matrix and word are given as inputs. The function should return `True` if the word exists in the matrix, and `False` otherwise. # Input - A 2D list of characters `board` with dimensions m x n (1 ≤ m, n ≤ 6), representing the word search puzzle. - A string `word` (1 ≤ len(word) ≤ 15), representing the word to be searched in the matrix. # Output - A boolean value `True` if the word exists in the matrix, and `False` otherwise. # Example Input ``` board = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCCED\\" ``` Output ``` True ``` Input ``` board = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"SEE\\" ``` Output ``` True ``` Input ``` board = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCB\\" ``` Output ``` False ``` # Note To solve this problem, you could write a recursive function that tries to match the word starting from each cell in the matrix. The function would then recursively try to match the remaining letters of the word by moving horizontally or vertically to adjacent cells.","solution":"def exist(board, word): def backtrack(x, y, word_index): # If all letters are found if word_index == len(word): return True # Check boundaries and if the cell matches the current letter if (x < 0 or y < 0 or x >= len(board) or y >= len(board[0]) or board[x][y] != word[word_index]): return False # To avoid using the same cell more than once temp = board[x][y] board[x][y] = \'#\' # Explore all possible directions: right, left, down, up found = (backtrack(x+1, y, word_index+1) or backtrack(x-1, y, word_index+1) or backtrack(x, y+1, word_index+1) or backtrack(x, y-1, word_index+1)) # Restore the character board[x][y] = temp return found for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == word[0] and backtrack(i, j, 0): return True return False"},{"question":"Draco is designing a new coding challenge platform called CodeFlare. Participants are scored based on their code submission, where the score is derived from running time and memory consumption. Draco wants to determine if a participants\' score after solving a problem meets certain criteria. Every participant gets a score `S` which is an integer value between 1 and 1000. The criteria for a qualifying score is that it is a prime number and it is either a palindrome or the sum of its digits forms a prime number. Write a function that takes an integer `S` and determines if it qualifies based on the given criteria. Input Contains a single integer `S` (1 ≤ S ≤ 1000). Output Print `YES` if `S` qualifies based on the criteria and `NO` otherwise. Examples Input: 7 Output: YES Input: 23 Output: YES Input: 10 Output: NO Note - A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. - A palindrome is a number that reads the same forwards and backwards, such as `121`. - To solve this problem, you may need to implement functions that determine whether a number is prime and if it is a palindrome, and also to compute the sum of digits and check if it is prime.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): Check if a number is a palindrome. return str(n) == str(n)[::-1] def sum_of_digits(n): Compute the sum of digits of a number. return sum(int(digit) for digit in str(n)) def qualifies(S): Determine if the score S qualifies based on the given criteria. if not is_prime(S): return \\"NO\\" if is_palindrome(S) or is_prime(sum_of_digits(S)): return \\"YES\\" return \\"NO\\" # Example usage if __name__ == \\"__main__\\": S = int(input().strip()) print(qualifies(S))"},{"question":"You are given a string consisting of lowercase alphabets. You need to perform operations on the string until it becomes empty. In each operation, you select the longest prefix of the string consisting of the same character and remove it. If the string is \\"aaabbb\\", in the first operation, you remove \\"aaa\\" because it is the longest prefix of the same character. The string then becomes \\"bbb\\". In the second operation, you remove \\"bbb\\", making it empty. Compute the number of operations needed to make the string empty. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 100 000). Output For each test case, print the number of operations needed to remove all characters from the string. Examples Input 2 aaabbb abacaba Output 2 7 Note In the first example, \\"aaabbb\\" → remove \\"aaa\\" → \\"bbb\\" → remove \\"bbb\\" → (empty string) → 2 operations needed. In the second example, \\"abacaba\\" → remove \\"a\\" → \\"bacaba\\" → remove \\"b\\" → \\"acaba\\" → remove \\"a\\" → \\"caba\\" → remove \\"c\\" → \\"aba\\" → remove \\"a\\" → \\"ba\\" → remove \\"b\\" → \\"a\\" → remove \\"a\\" → (empty string) → 7 operations needed.","solution":"def count_operations_to_empty_string(s): Return the number of operations needed to remove all characters from the string. Args: s (str): The input string consisting of lowercase alphabets. Returns: int: The number of operations needed to make the string empty. if not s: return 0 operations_count = 1 for i in range(1, len(s)): if s[i] != s[i - 1]: operations_count += 1 return operations_count def count_operations_for_multiple_cases(test_cases): Return the number of operations needed to remove all characters from each string in the test cases. Args: test_cases (list[str]): A list of test case strings. Returns: list[int]: A list of the number of operations needed for each test case. results = [] for s in test_cases: results.append(count_operations_to_empty_string(s)) return results"},{"question":"Given a list of integers, find the second largest number in the list. Your task is to write a function that takes a list of integers as input and returns the second largest number in the list. If the list contains less than two unique numbers, the function should return `None`. # Input An integer `n` representing the number of elements in the list, followed by a list of `n` integers. # Output An integer representing the second largest number in the list, or `None` if there are not enough unique numbers. # Examples Example 1 **Input:** ``` 5 4 2 8 6 3 ``` **Output:** ``` 6 ``` Example 2 **Input:** ``` 3 7 7 7 ``` **Output:** ``` None ``` Example 3 **Input:** ``` 4 15 11 25 8 ``` **Output:** ``` 15 ``` # Note `n` will always be greater than or equal to 2. The list elements can have duplicates, but you need to consider only the unique values to find the second largest number.","solution":"def second_largest_number(numbers): Returns the second largest number in a list. If the list contains less than two unique numbers, the function will return None. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Larry has a unique collection of gemstones, and he arranges them in a unique pattern. He arranges them in rows, such that each row contains exactly one more gemstone than the previous row. Thus, the first row contains one gemstone, the second row contains two gemstones, the third row contains three gemstones, and so on. Larry wants to know the total number of gemstones needed to create exactly r rows. Your task is to write a function that calculates the total number of gemstones required to form r rows in this manner. Input - The input consists of a single integer r (1 ≤ r ≤ 10^6), indicating the number of rows. Output - Print the total number of gemstones required to form exactly r rows. Examples Input 5 Output 15 Input 3 Output 6 Input 1 Output 1 Explanation To form 5 rows, where each row i contains i gemstones: - Row 1 contains 1 gemstone - Row 2 contains 2 gemstones - Row 3 contains 3 gemstones - Row 4 contains 4 gemstones - Row 5 contains 5 gemstones The total number of gemstones is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def total_gemstones(r): Returns the total number of gemstones required to form exactly r rows. # Using the formula for the sum of the first n natural numbers: n * (n + 1) // 2 return r * (r + 1) // 2"},{"question":"You have m distinct types of candies and n children. Each type of candy has a different sweetness level. Every child has a different preference for the maximum sweetness level they can handle. In one operation, you can give a candy to a child if the sweetness level of the candy does not exceed the child\'s maximum preference. Each candy can be given to exactly one child, and each child can receive only one candy. Your task is to determine the minimum number of operations required to ensure that every child gets a candy they can handle, or report that it is impossible to do so. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers m and n (1 ≤ m, n ≤ 100) — the number of candy types and the number of children, respectively. The second line of each test case contains m integers, where the i-th integer is the sweetness level of the i-th type of candy (1 ≤ sweetness ≤ 10^6). The third line of each test case contains n integers, where the j-th integer is the maximum sweetness level child j can handle (1 ≤ preference ≤ 10^6). Output For each test case, print a single integer — the minimum number of operations to ensure that each child gets a candy, or -1 if it is impossible. Example Input 2 5 3 1 3 5 7 9 4 2 8 4 4 5 6 7 8 3 4 5 6 Output 3 -1 Note In the first example, there are 5 types of candies with sweetness levels [1, 3, 5, 7, 9] and 3 children with maximum sweetness preferences [4, 2, 8]. We need at least 3 operations to give suitable candies to all children. In the second example, there are 4 types of candies with sweetness levels [5, 6, 7, 8] and 4 children with maximum sweetness preferences [3, 4, 5, 6]. It is impossible to satisfy all children since no candy has a sweetness level <= 3.","solution":"def min_operations_to_satisfy_children(t, test_cases): results = [] for case in test_cases: m, n, candies, preferences = case candies.sort() preferences.sort() i = 0 j = 0 operations = 0 while i < m and j < n: if candies[i] <= preferences[j]: operations += 1 j += 1 i += 1 if operations < n: results.append(-1) else: results.append(operations) return results"},{"question":"There is a long road with N consecutive parking spaces. You have M available cars to park in these spaces. You\'re given two constraints: each car requires X consecutive empty spaces to park, and no two cars can be parked such that there are fewer than Y empty spaces between them. Determine if it is possible to park all M cars under these conditions. If possible, output \\"YES\\" along with an example arrangement of the cars (represented by \'C\') and empty spaces (represented by \'.\'). If it is not possible, output \\"NO\\". Constraints: * All values in input are integers. * 1 leq N leq 1000 * 1 leq M leq 1000 * 1 leq X leq 100 * 0 leq Y leq 100 Input Input is given from Standard Input in the following format: N M X Y Output Print \\"YES\\" or \\"NO\\". If the answer is \\"YES\\", also provide a string of length N representing one possible arrangement of cars (\'C\') and empty spaces (\'.\'). Examples Input 10 2 2 1 Output YES ..CC.CC.. Input 15 3 3 2 Output YES ...CCC..CCC..CCC Input 5 3 2 0 Output NO","solution":"def can_park(N, M, X, Y): total_spaces_required = M * X + (M - 1) * Y if total_spaces_required > N: return \\"NO\\" parking = [] used_spaces = 0 for car in range(M): if car != 0: parking.extend([\'.\'] * Y) used_spaces += Y parking.extend([\'C\'] * X) used_spaces += X while len(parking) < N: parking.append(\'.\') return \\"YESn\\" + \'\'.join(parking) # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read # Assuming input is given in the format \\"N M X Y\\" data = input().strip().split() N, M, X, Y = int(data[0]), int(data[1]), int(data[2]), int(data[3]) result = can_park(N, M, X, Y) print(result)"},{"question":"Logan is a brilliant software engineer who loves to analyze data logs. One day, he came across a log file with data points recorded over several days. Each data point includes an activity score. Logan wants to identify the longest segment of days (if any) where the average activity score is strictly increasing day by day. Logan defines a \'segment\' as a contiguous subarray of days. Help Logan find the length of the longest such segment. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of days for which activity scores are recorded. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) where a_i is the activity score for the i-th day. Output Print one integer — the length of the longest segment where the average activity score strictly increases day by day. If no such segment exists, print 0. Example Input 7 1 2 4 6 8 3 5 Output 3 Note Explanation of the example test: The longest segment where the average activity score strictly increases day by day is from day 1 to day 3 (1, 2, 4). Segment (4, 6, 8) also has strictly increasing averages, but it has the same length as the (1, 2, 4) segment. Segment (8, 3, 5) does not strictly increase. So the longest length is 3.","solution":"def longest_increasing_segment(n, activities): if n == 1: return 1 max_length = 0 current_length = 1 for i in range(1, n): if activities[i] > activities[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 if current_length > max_length: max_length = current_length if max_length == 1: return 0 return max_length"},{"question":"Mary loves cooking, and she likes to experiment with different recipes. She maintains a recipe catalog where each recipe is represented by a string of ingredients. Each ingredient is denoted by a lowercase letter. Mary wants to organize her catalog such that no two recipes have the same set of ingredients. Mary\'s challenge is to ensure that there are no duplicate recipes in her catalog. Write a function that takes a list of recipes, where each recipe is represented by a string of lowercase letters, and returns a new list of recipes after removing the duplicates. Input - The first line contains an integer n (1 ≤ n ≤ 1000), the number of recipes. - The next n lines each contain a string s consisting of lowercase letters (1 ≤ |s| ≤ 100). Output - Print the list of unique recipes, each on a new line. The order of recipes in the output should be the same as their first appearance in the input. Examples Input 5 applepie chocolatecake banana applepie chocolatemousse Output applepie chocolatecake banana chocolatemousse Input 3 soup salad soup Output soup salad","solution":"def remove_duplicate_recipes(n, recipes): Removes duplicate recipes from the list and returns a list of unique recipes. Parameters: n (int): Number of recipes recipes (list of str): List of recipes Returns: list of str: List of unique recipes seen_recipes = set() unique_recipes = [] for recipe in recipes: if recipe not in seen_recipes: seen_recipes.add(recipe) unique_recipes.append(recipe) return unique_recipes"},{"question":"You are given a list of positive integers and you need to determine the greatest common divisor (GCD) of all the numbers in the list. Input - A single line containing space-separated positive integers n (2 ≤ n ≤ 1000) where each integer is between 1 and 10^6. Output - A single integer, denoting the GCD of the given list of numbers. Examples Input 12 15 21 Output 3 Input 8 16 32 Output 8 Note In the first example, the numbers are 12, 15, and 21; their GCD is 3. In the second example, the numbers are 8, 16, and 32; their GCD is 8.","solution":"import math from functools import reduce def gcd_of_list(numbers): Returns the GCD of a list of numbers. return reduce(math.gcd, numbers) def main(input_str): numbers = list(map(int, input_str.split())) return gcd_of_list(numbers)"},{"question":"Alice is a gardener who loves creating beautiful patterns in her garden with flower pots. She has a sequence of flower pots arranged in a row, each containing a certain number of flowers. Alice wants to paint the flower pots using two types of paint: red and blue. She wants to ensure that no two adjacent pots are painted the same color. Alice also notices that flowers in the pots start wilting if they are surrounded by pots with significantly different numbers of flowers. To avoid this, she wants the difference in the number of flowers between any two adjacent pots to be as small as possible. However, she also wants to maintain an alternating pattern of colors to provide a beautiful and striking visual effect. Given the sequence of flower pots and the number of flowers in each, determine whether it is possible to arrange them in a way that satisfies Alice\'s conditions. If possible, describe the color of each pot in the sequence. Input The input consists of: - An integer n (2 ≤ n ≤ 1000) — the number of flower pots. - A sequence of n integers f1, f2, ..., fn (1 ≤ fi ≤ 1000) — the number of flowers in each pot. Output If it is possible to paint the pots according to Alice\'s conditions, output a single line containing a string of n characters, where each character is either \'R\' (red) or \'B\' (blue). If it is not possible, output \\"No\\". Example Input 5 3 4 5 3 2 Output RBRBR Note In the example above, each pot is adjacent to pots with a different color, and the difference in the number of flowers between adjacent pots is minimal. Another valid output sequence could be BRBRB. If there exists no such arrangement where adjacent pots are painted different colors and the flower differences between adjacent pots are minimized, the output should be \\"No\\".","solution":"def paint_flower_pots(n, flowers): Determines if it is possible to paint flower pots such that no two adjacent pots have the same color and the difference in the number of flowers between any two adjacent pots is minimal. Returns a string corresponding to the color of each pot, or \\"No\\" if it is not possible. # Sort the flower pots by number of flowers sorted_flowers = sorted(flowers) # Create a list to store the resulting paint pattern paint_pattern = [] # The difference in flowers between adjacent pots shouldn\'t exceed 1 in the sorted list for i in range(n-1): if sorted_flowers[i+1] - sorted_flowers[i] > 1: return \\"No\\" # If it\'s possible, create an alternating color pattern for i in range(n): if i % 2 == 0: paint_pattern.append(\'R\') else: paint_pattern.append(\'B\') return \'\'.join(paint_pattern) # Test the solution with an example n = 5 flowers = [3, 4, 5, 3, 2] print(paint_flower_pots(n, flowers)) # Output should be \\"RBRBR\\" or \\"BRBRB\\""},{"question":"A group of computer scientists are working on a secure encryption algorithm. For this, they need to generate keys that are highly specific. The keys are constructed by following a particular sequence generation rule. Your task is to create a function that generates these keys based on the given rule. The sequence starts with the number 1 and each subsequent number in the sequence is the smallest integer that is greater than the previous one and has more divisors than the previous number. Define a function `generate_keys(N)` which returns the first N numbers in this sequence. Input: - A single integer N (1 ≤ N ≤ 100), the number of keys. Output: - A single line with N integers separated by spaces, representing the first N numbers in the sequence. SAMPLE INPUT 1 5 SAMPLE OUTPUT 1 1 2 4 6 12 SAMPLE INPUT 2 8 SAMPLE OUTPUT 2 1 2 4 6 12 24 36 48","solution":"def generate_keys(N): def count_divisors(x): count = 0 for i in range(1, x + 1): if x % i == 0: count += 1 return count keys = [1] previous_divisors = count_divisors(1) current = 2 while len(keys) < N: current_divisors = count_divisors(current) if current_divisors > previous_divisors: keys.append(current) previous_divisors = current_divisors current += 1 return keys"},{"question":"Consider a park where various flowers are planted. Each flower has a blooming time and withering time, represented as L_i (the day it starts blooming) and W_i (the day it withers) for the i -th flower. Botanists want to find out the maximum number of days during which there is at least one flower in bloom. A day counts as a blooming day if at least one flower is in bloom on that day. Your task is to calculate the total number of such blooming days. # Input Input is given from standard input in the following format: ``` N L_1 W_1 L_2 W_2 ... L_N W_N ``` - N : An integer representing the number of flowers. - L_i : The blooming time of the i -th flower. - W_i : The withering time of the i -th flower. # Output Please output the total number of days during which at least one flower is in bloom. # Constraints - 1 leq N leq 10^5 - 1 leq L_i < W_i leq 10^9 - All inputs are integers. # Input Example ``` 3 1 4 2 6 8 10 ``` # Output Example ``` 7 ``` # Explanation - The first flower blooms from day 1 to day 4. - The second flower blooms from day 2 to day 6. - The third flower blooms from day 8 to day 10. The blooming days are: [1, 2, 3, 4, 5, 6, 8, 9, 10]. So, the total number of distinct blooming days is 7. Thus, the output is 7.","solution":"def count_blooming_days(n, flowers): Count the total number of days during which at least one flower is in bloom. :param n: Number of flowers. :param flowers: List of tuples, each containing (L_i, W_i) denoting blooming time and withering time of each flower. :return: An integer representing the total number of blooming days. events = [] for L, W in flowers: events.append((L, \'start\')) events.append((W, \'end\')) events.sort() blooming_days = 0 current_flowers = 0 prev_day = None for day, event in events: if prev_day is not None and current_flowers > 0: blooming_days += day - prev_day if event == \'start\': current_flowers += 1 else: # event is \'end\' current_flowers -= 1 prev_day = day return blooming_days def parse_input(input_str): Parse the input string and return the number of flowers and a list of tuples with blooming and withering days. :param input_str: The input string. :return: tuple (number of flowers, list of tuples with blooming and withering days) lines = input_str.strip().split(\'n\') n = int(lines[0]) flowers = [tuple(map(int, line.split())) for line in lines[1:]] return n, flowers def main(input_str): Main function to handle input and output. :param input_str: The input string. :return: The total number of blooming days. n, flowers = parse_input(input_str) return count_blooming_days(n, flowers)"},{"question":"A group of friends wants to play a game with dominoes. A domino is a rectangular tile divided into two square ends, each end labeled with a number between 0 and 6 (inclusive). The friends will play the game with a standard set of 28 unique dominoes containing every possible combination of these numbers. The game begins with a line of dominoes placed end-to-end. The goal is to determine if it is possible to rearrange the remaining dominoes (not initially in the line) to extend the line on either end such that the numbers on the touching ends match. You are given the initial line of dominoes and the remaining dominoes. Write a program that determines whether the line of dominoes can be extended or not. Input: - The first line contains a single integer `n` (1 ≤ n ≤ 28) indicating the number of dominoes in the initial line. - Each of the next `n` lines contains two integers `a` and `b` (0 ≤ a, b ≤ 6), representing the numbers on each end of a domino in the initial line. - The following 28-n lines contain two integers `a` and `b` (0 ≤ a, b ≤ 6), representing the numbers on each end of the remaining dominoes. Output: - Print \\"YES\\" if it is possible to extend the initial line of dominoes using the remaining dominoes, and \\"NO\\" otherwise. Examples: Input: 3 1 2 2 4 4 5 0 1 5 6 3 4 Output: YES Input: 2 1 2 2 3 2 4 4 5 Output: NO","solution":"def can_extend_domino_line(n, initial_dominoes, remaining_dominoes): Determines if it is possible to extend the initial line of dominoes using the remaining dominoes. Parameters: n (int): Number of dominoes in the initial line. initial_dominoes (list of tuples): List of tuples representing the initial dominoes. remaining_dominoes (list of tuples): List of tuples representing the remaining dominoes. Returns: str: \\"YES\\" if it is possible to extend the line, \\"NO\\" otherwise. # Get the ends of the current line left_end = initial_dominoes[0][0] right_end = initial_dominoes[-1][1] # Check if any remaining domino can extend the line for a, b in remaining_dominoes: if a == left_end or b == left_end or a == right_end or b == right_end: return \\"YES\\" return \\"NO\\""},{"question":"Fwurf Company has developed a text editor that offers an advanced text comparison feature to help users identify differences between various versions of documents. To aid this feature, the editor calculates the \\"difference score\\" between two documents by examining their content side-by-side and applying the following rules: 1. If a character at position i in the first document (doc1) does not match the character at the same position i in the second document (doc2), a penalty of 1 is added to the score for each mismatch. 2. If one document is longer than the other, a penalty of 1 is added to the score for each extra character in the longer document. The goal is to compare a given base document with multiple other documents and determine the difference scores for each comparison. Input The first line contains two integers `m` and `p` (1 ≤ m ≤ 100, 1 ≤ p ≤ 100), representing the number of documents to compare and the length of the base document, respectively. The second line contains a string of length p representing the base document. Each of the next m lines contains a string representing another document to compare with the base document. It is guaranteed that the length of these documents is at most 100. Output For each of the m documents, print a single integer representing the difference score between the base document and the respective document. Examples Input 3 7 example exxmple examples egxcalc Output 1 1 5 Input 2 5 abcde abfde abcdef Output 1 1 Your task is to implement the difference scoring function and print the scores for each comparison. Good luck!","solution":"def calculate_difference_scores(base_doc, docs): Calculates the difference scores between a base document and a list of other documents. :param base_doc: A string representing the base document. :param docs: A list of strings representing the documents to compare with the base document. :return: A list of integers representing the difference scores. scores = [] base_len = len(base_doc) for doc in docs: score = 0 doc_len = len(doc) for i in range(min(base_len, doc_len)): if base_doc[i] != doc[i]: score += 1 score += abs(base_len - doc_len) scores.append(score) return scores def main(m, p, base_doc, docs): Main function to compute and print the difference scores. :param m: An integer representing the number of documents to compare. :param p: An integer representing the length of the base document. :param base_doc: A string representing the base document. :param docs: A list of strings representing the documents to compare with the base document. scores = calculate_difference_scores(base_doc, docs) for score in scores: print(score)"},{"question":"A popular game involves summing numbers using dice rolls. You have a set of n six-sided dice and a target sum k. Each die can roll any number from 1 to 6 (inclusive). You need to determine if it\'s possible to achieve the exact sum of k using the n dice. If it is possible, you should also print one possible combination of the dice rolls that yield the target sum. Input The first line contains two integers n and k (1 ≤ n ≤ 10, 1 ≤ k ≤ 60). Note that since each die can roll a number between 1 and 6, the maximum achievable sum with n dice is 6*n, and the minimum is n. Output If it is impossible to achieve the sum k with the given n dice, print \\"NO\\" without quotes. Otherwise, print \\"YES\\" without quotes and on the next line print the values of the dice rolls in any order separated by spaces. Examples Input 3 15 Output YES 5 5 5 Input 2 13 Output NO Input 5 20 Output YES 6 5 5 2 2 Note In the first example, there are multiple combinations that can result in a sum of 15 with 3 dice, such as (3, 6, 6), (5, 5, 5), and (4, 5, 6). It is sufficient to print any valid combination. In the second example, it\'s impossible to get a sum of 13 with 2 dice, as the maximum achievable sum is 12. In the third example, one possible combination to achieve the sum of 20 with 5 dice is (6, 5, 5, 2, 2). Again, any valid combination is acceptable.","solution":"def dice_sum(n, k): Determine if the exact sum k can be achieved with n six-sided dice and print a possible combination of dice rolls if possible. # Calculate the minimum and maximum achievable sum with n dice min_sum = n * 1 max_sum = n * 6 # Check if the target sum k is within the achievable range if k < min_sum or k > max_sum: return \\"NO\\" # Initialize the result list with the minimum possible values result = [1] * n current_sum = min_sum # Increment values in result to reach the target sum k for i in range(n): while current_sum < k and result[i] < 6: result[i] += 1 current_sum += 1 return \\"YES\\", result"},{"question":"Given a string S, you need to determine whether it can be transformed into a palindrome by rearranging its characters. A palindrome is a string that reads the same forward and backward. Write a function that takes the input string S and returns \\"YES\\" if it is possible to rearrange it into a palindrome, otherwise return \\"NO\\". Input Format: The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S. Output Format: For each test case, output \\"YES\\" or \\"NO\\" on a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 Each string contains only lowercase English letters. SAMPLE INPUT: 3 aabb abc racecar SAMPLE OUTPUT: YES NO YES Explanation: - For the first test case, \\"aabb\\" can be rearranged to \\"abba\\", which is a palindrome. - For the second test case, \\"abc\\" cannot be rearranged into a palindrome. - For the third test case, \\"racecar\\" is already a palindrome.","solution":"def can_be_palindrome(S): Determines if the string S can be rearranged into a palindrome. :param S: str :return: \\"YES\\" if the string can be rearranged into a palindrome, otherwise \\"NO\\". from collections import Counter # Count the frequency of each character frequency = Counter(S) # Count how many characters have an odd frequency odd_count = sum(1 for count in frequency.values() if count % 2 != 0) # A string can be rearranged into a palindrome if there\'s at most one character with an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_test_cases(T, test_cases): Processes multiple test cases and determines if each can be rearranged into a palindrome. :param T: int, number of test cases :param test_cases: list of str, each string to be tested :return: list of str, each being \\"YES\\" or \\"NO\\" for the respective test case return [can_be_palindrome(test_case) for test_case in test_cases]"},{"question":"A popular e-commerce company wishes to analyze the shopping patterns of its users. They maintain a record of user transactions in a list where each element is a tuple containing a user ID and the amount spent on a purchase. The company wants to reward the users who spend the highest amount. Your task is to write a function that takes in the list of transactions and returns a list of user IDs who spent the highest amount on any single transaction. Input The input consists of a single argument: - transactions: a list of tuples, where each tuple contains an `int` user ID and an `int` amount (`1 ≤ amount ≤ 10^6`). Output Return a list of user IDs of the users who spent the highest amount in any transaction. The list should be sorted in ascending order of user IDs. Examples Input [(101, 300), (102, 450), (101, 450), (103, 300), (104, 600)] Output [104] Input [(201, 200), (202, 200), (203, 250), (204, 250), (205, 250)] Output [203, 204, 205] Note In the first example, the highest amount spent is 600, which was by user ID 104. In the second example, the highest amount spent is 250, which was by user IDs 203, 204, and 205. Therefore, the answer is [203, 204, 205].","solution":"def highest_spending_users(transactions): Returns a list of user IDs of the users who spent the highest amount in any transaction. The list is sorted in ascending order of user IDs. if not transactions: return [] # Find the highest amount spent in any single transaction max_amount = max(transactions, key=lambda x: x[1])[1] # Find all user IDs who spent the highest amount highest_spenders = [user_id for user_id, amount in transactions if amount == max_amount] # Return the sorted list of user IDs return sorted(highest_spenders)"},{"question":"I have an array of integers such that every integer appears exactly twice except for one integer which appears exactly once. The task is to find the integer that appears exactly once. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of integers in the array. The next line consists of n space-separated integers ai (1 ≤ ai ≤ 10^9), representing the integers in the array. Output Output a single integer: the one that appears exactly once. Examples Input 7 4 1 2 1 2 4 3 Output 3 Input 5 10 20 30 20 30 Output 10 Input 9 5 9 5 8 9 4 4 3 3 Output 8 Note For the first example, the integer 3 is the only number that appears exactly once in the array. For the second example, the integer 10 is the only number that appears exactly once in the array. For the third example, the integer 8 is the only number that appears exactly once in the array.","solution":"def find_unique_integer(arr): Finds the integer that appears exactly once in an array where every other integer appears exactly twice. unique_element = 0 for num in arr: unique_element ^= num return unique_element # Example usage: # arr = [4, 1, 2, 1, 2, 4, 3] # print(find_unique_integer(arr)) # Output: 3"},{"question":"You are given a list of strings and a target string. Your task is to find if there is a string in the list that is a rotation of the target string. A string `s2` is a rotation of `s1` if and only if `s2` can be obtained by taking some number of characters from the beginning of `s1` and appending them to the end in the same order. For example, \\"abcde\\" and \\"cdeab\\" are rotations of each other. Write a function that determines if any string in the list is a rotation of the target string. Input The first line contains an integer n, the number of strings in the list (1 ≤ n ≤ 100). The next n lines each contain a string consisting of lowercase English letters. Each string has a length between 1 and 100 (inclusive). The last line contains the target string, consisting of lowercase English letters and having a length between 1 and 100 (inclusive). Output Print \\"Yes\\" if there is a string in the list that is a rotation of the target string. Otherwise, print \\"No\\". Examples Input 4 abcde cdeab bacde dcbaf abcde Output Yes Input 3 abcd efgh ijkl mnop Output No Input 2 cdefab efabc abcdef Output Yes","solution":"def is_rotation_of_target(strings, target): Returns \\"Yes\\" if any string in the list is a rotation of the target string, otherwise returns \\"No\\". # Create the extended string of target to check for rotations extended_target = target + target # Check each string in the list if it\'s a substring of the extended target string for s in strings: if len(s) == len(target) and s in extended_target: return \\"Yes\\" return \\"No\\" # Example usage n = 4 strings = [\\"abcde\\", \\"cdeab\\", \\"bacde\\", \\"dcbaf\\"] target = \\"abcde\\" print(is_rotation_of_target(strings, target)) # Output: Yes"},{"question":"A string is defined as valid if you can swap or remove a number of characters and end up with an alternating sequence of two distinct characters. Your task is to write a function to determine if a given string is valid and return `True` if it is, otherwise return `False`. You may assume that the input string contains only lowercase English letters. Input / Output The input is a single string of length N (1 ≤ N ≤ 10^5). The output should be a boolean value (`True` or `False`). Examples: ``` Input: \\"aabb\\" Output: True Input: \\"abab\\" Output: True Input: \\"abc\\" Output: False Input: \\"aaa\\" Output: False Explanation: In the first example, you can swap the second \'a\' with the second \'b\' to get \\"abab\\", which is a valid alternating sequence of \'a\' and \'b\'. In the second example, the string \\"abab\\" is already an alternating sequence of \'a\' and \'b\'. In the third example, you cannot form a valid alternating sequence with more than two distinct characters. In the fourth example, there is no way to rearrange or reduce the characters to form a valid alternating sequence with just one character type. ```","solution":"def is_valid_alternating_string(s): if len(s) == 1: return False # Count frequency of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check if there are exactly two distinct characters if len(char_count) != 2: return False # Check if the string can be rearranged to form an alternating sequence chars = list(char_count.keys()) char1, char2 = chars[0], chars[1] count1, count2 = char_count[char1], char_count[char2] # Check if the difference between the counts of two characters is at most 1 if abs(count1 - count2) > 1: return False return True"},{"question":"There once was a small village where a peculiar tradition was followed. People believed that if the sum of squares of digits of a number eventually leads to 1, that number is a Heavenly number, because their ancestors used such numbers to guide their way. They also had the concept of Hellish numbers, which are numbers that do not lead to 1 but enter into a cycle instead. Given a number, you must determine whether it is a Heavenly number or a Hellish number. Write a program that determines whether a given number is a Heavenly number or a Hellish number. Input The input contains a single integer n (1 ≤ n ≤ 10^9). Output Print \\"HEAVENLY\\" (without the quotes) if the number n is a Heavenly number. Otherwise, print \\"HELLISH\\" (without the quotes). Examples Input 19 Output HEAVENLY Input 4 Output HELLISH Input 2 Output HELLISH Note: - In the first example, the number 19 leads to a sequence 1^2 + 9^2 = 82 → 8^2 + 2^2 = 68 → 6^2 + 8^2 = 100 → 1^2 + 0^2 + 0^2 = 1, hence it is Heavenly. - In the second example, the number 4 leads to a cycle 4 → 16 → 37 → 58 → 89 → 145 → 42 → 20 → 4, hence it is Hellish.","solution":"def is_heavenly_number(n): Determines whether a given number is a Heavenly number or a Hellish number. Args: n (int): The number to be checked. Returns: str: \\"HEAVENLY\\" if the number is a Heavenly number, \\"HELLISH\\" otherwise. def sum_of_squares_of_digits(num): return sum(int(digit)**2 for digit in str(num)) seen = set() while n != 1 and n not in seen: seen.add(n) n = sum_of_squares_of_digits(n) return \\"HEAVENLY\\" if n == 1 else \\"HELLISH\\""},{"question":"Given an array of n integers, you need to determine whether the array is monotonic or not. An array is considered monotonic if it is either entirely non-increasing or non-decreasing. Input: An array of integers with size n (0 < n < 1000). Output: Return `True` if the array is monotonic, otherwise return `False`. Example Input: [1, 2, 2, 3] Output: True Input: [6, 5, 4, 4] Output: True Input: [1, 3, 2] Output: False","solution":"def is_monotonic(arr): Determines if the array is monotonic. An array is monotonic if it is either entirely non-increasing or non-decreasing. :param arr: List of integers :return: Boolean value indicating if the array is monotonic or not if not arr: return True is_increasing = True is_decreasing = True for i in range(1, len(arr)): if arr[i] > arr[i - 1]: is_decreasing = False if arr[i] < arr[i - 1]: is_increasing = False return is_increasing or is_decreasing"},{"question":"Two teams, Alpha and Beta, play a competitive turn-based game on a binary tree. The binary tree consists of `n` nodes. Initially, the game starts at the root of the tree. Alpha and Beta take turns, with Alpha going first. In each turn, a player must move from the current node to one of its unvisited children. If a player is unable to move (i.e., the current node has no unvisited children), the game ends and the other player wins. Both players play optimally. Given the structure of the binary tree, determine the winner of the game. Input - The first line contains a single integer `t` (1 ≤ t ≤ 100), the number of test cases. - The first line of each test case contains an integer `n` (1 ≤ n ≤ 1000), the number of nodes in the tree. - Each of the next `n-1` lines contains two space-separated integers `u` and `v` (1 ≤ u, v ≤ n), denoting an edge between nodes `u` and `v`. Output - For each test case, print \\"Alpha\\" if Alpha wins the game, otherwise print \\"Beta\\". Example Input ``` 2 4 1 2 1 3 1 4 5 1 2 2 3 2 4 4 5 ``` Output ``` Alpha Beta ``` Note - For the first test case, things can proceed as follows: Alpha moves from node 1 to node 2. Beta moves from node 2 to node 1, unable to move further, so Alpha moves again to nodes 3 or 4, causing Beta to lose. - For the second test case, the optimal moves result in Beta securing a win if both play optimally. Optimal play ensures both players choose the best possible strategy to secure their win or avoid a loss as long as possible.","solution":"def determine_winner(t, test_cases): def dfs(node, parent): degrees[node] = 0 counter = 0 for neighbor in tree[node]: if neighbor == parent: continue degrees[node] += 1 counter += dfs(neighbor, node) return counter + 1 results = [] for n, edges in test_cases: tree = [[] for _ in range(n + 1)] degrees = [0] * (n + 1) for u, v in edges: tree[u].append(v) tree[v].append(u) dfs(1, -1) nodes_with_odd_depth = sum(1 for i in degrees if i % 2 == 1) if nodes_with_odd_depth % 2 == 0: results.append(\\"Beta\\") else: results.append(\\"Alpha\\") return results"},{"question":"Ildar is participating in a treasure hunt game where there are n treasure chests arranged in a row. Each chest has a number of coins represented by an integer array c_1, c_2, ..., c_n. Ildar has a rule to follow: If he starts from chest i and moves to chest j (i ≤ j), he has to collect coins from each chest k such that i ≤ k ≤ j. The goal is to find the maximum number of coins he can collect by visiting contiguous chests. Input The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of treasure chests. The second line contains n integers c_1, c_2, ..., c_n (−10^9 ≤ c_i ≤ 10^9) — the number of coins in each chest. Output Print a single integer — the maximum number of coins Ildar can collect by visiting contiguous chests from start to end. Examples Input 5 1 2 3 -2 5 Output 9 Input 7 −2 −3 4 −1 −2 1 5 −3 Output 7 Note In the first example, the best contiguous segment is [1, 2, 3, -2, 5] where the sum is 1 + 2 + 3 - 2 + 5 = 9. In the second example, the best contiguous segment is [4, -1, -2, 1, 5] where the sum is 4 - 1 - 2 + 1 + 5 = 7.","solution":"def max_coins(n, coins): Returns the maximum number of coins that can be collected by visiting contiguous chests. :param n: int - number of treasure chests :param coins: list[int] - number of coins in each chest :return: int - maximum number of coins that can be collected max_so_far = coins[0] max_ending_here = coins[0] for i in range(1, n): max_ending_here = max(coins[i], max_ending_here + coins[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"A company is planning to launch a new product and wants to understand customer preferences based on a survey they\'ve conducted. Each survey response includes multiple answers indicating a customer\'s interest in specific features of the product. Each feature is represented as a lowercase letter (\'a\' to \'z\'). Your task is to determine the most popular feature based on the survey responses. Input The first input line contains an integer n (1 ≤ n ≤ 100), the number of survey responses. Each of the next n lines contains a string of lowercase letters where each letter corresponds to a feature that at least one customer is interested in. Output Print a single lowercase letter representing the most popular feature. If there are multiple features with the same highest frequency, print the one that comes first in alphabetical order. Examples Input 5 abc bcd ace fg ab Output a Input 4 xyz yyz zzz zyz Output z","solution":"def most_popular_feature(n, survey_responses): Determines the most popular feature based on the given survey responses. Args: n (int): Number of survey responses. survey_responses (list of str): List of survey response strings. Returns: char: The most popular feature as a lowercase letter. from collections import Counter # Count occurrences of each feature feature_count = Counter() for response in survey_responses: feature_count.update(response) # Find the maximum count and the corresponding feature(s) max_count = max(feature_count.values()) most_popular = sorted([feature for feature, count in feature_count.items() if count == max_count]) # Return the alphabetically first most popular feature return most_popular[0] # Example usage: # n = 5 # survey_responses = [\\"abc\\", \\"bcd\\", \\"ace\\", \\"fg\\", \\"ab\\"] # print(most_popular_feature(n, survey_responses)) # Output: a"},{"question":"You are tasked with arranging a conference that spans a number of days, and each day can host a number of sessions. Each session has a fixed start and end time. A speaker can deliver multiple sessions, but cannot be in two places at the same time. You need a way to determine if a given schedule is possible, ensuring no speaker has overlapping sessions. Input The first line of input contains two integers d and s. The next s lines each contain four entries: an integer day (1 ≤ day ≤ d), an integer speaker_id (1 ≤ speaker_id ≤ 100000), and two strings representing start_time and end_time in HH:MM format, all separated by space. Output If the schedule is possible, print \\"POSSIBLE\\" (without quotes). Otherwise, print \\"IMPOSSIBLE\\" (without quotes). Examples Input 2 4 1 1 09:00 10:30 1 1 11:00 12:00 1 2 09:00 10:00 2 1 10:00 11:00 Output POSSIBLE Input 1 3 1 1 09:00 10:30 1 1 10:00 11:00 1 2 09:00 10:00 Output IMPOSSIBLE Note In the first sample test, speaker 1 has two non-overlapping sessions on day 1 and one session on day 2. Speaker 2 has one session on day 1. Therefore, the schedule is possible. In the second sample test, speaker 1 has two overlapping sessions on day 1, hence the schedule is not possible.","solution":"def is_schedule_possible(d, s, sessions): from collections import defaultdict def time_to_minutes(time): hours, minutes = map(int, time.split(\':\')) return hours * 60 + minutes # Create a dictionary to store sessions for each speaker each day schedule = defaultdict(lambda: defaultdict(list)) for session in sessions: day, speaker_id, start_time, end_time = session start_minutes = time_to_minutes(start_time) end_minutes = time_to_minutes(end_time) schedule[day][speaker_id].append((start_minutes, end_minutes)) # Check for each speaker each day if there are overlapping sessions for day in schedule: for speaker_id in schedule[day]: speaker_sessions = sorted(schedule[day][speaker_id]) for i in range(1, len(speaker_sessions)): if speaker_sessions[i][0] < speaker_sessions[i-1][1]: return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\" # Example usage # d = 2 # s = 4 # sessions = [ # (1, 1, \\"09:00\\", \\"10:30\\"), # (1, 1, \\"11:00\\", \\"12:00\\"), # (1, 2, \\"09:00\\", \\"10:00\\"), # (2, 1, \\"10:00\\", \\"11:00\\") # ] # print(is_schedule_possible(d, s, sessions)) # OUTPUT: POSSIBLE"},{"question":"A software company wants to build a social networking feature into their application. One of the requirements is to display mutual friends between two users. To make things simpler, the company decided to prototype this feature using small datasets. Given two lists of friends for two users, your task is to write a function to find their mutual friends. Input: - The first line contains an integer n (1 ≤ n ≤ 100), the number of friends of the first user. - The second line contains n space-separated integers, the IDs of the first user\'s friends. - The third line contains an integer m (1 ≤ m ≤ 100), the number of friends of the second user. - The fourth line contains m space-separated integers, the IDs of the second user\'s friends. Output: - Print a single line containing the space-separated IDs of mutual friends in ascending order. If there are no mutual friends, print an empty line. Example: Input: 3 1 2 3 4 3 4 5 6 Output: 3 Input: 2 1 2 2 3 4 Output:","solution":"def find_mutual_friends(n, friends_user1, m, friends_user2): Finds the mutual friends between two users given their respective friends lists. set_user1 = set(friends_user1) set_user2 = set(friends_user2) mutual_friends = sorted(set_user1.intersection(set_user2)) return \' \'.join(map(str, mutual_friends))"},{"question":"A company is planning to install a series of utility poles along a new highway to provide electrical and communication services. The distance between consecutive utility poles should be the same to ensure uniformity. The company has M candidate locations where the poles can be installed. Since some of the locations may already have obstacles or other installations, not all candidate locations can be used. The company needs to choose the longest possible distance D such that they can install a pole at every D-th location starting from any of the given candidate locations. Your task is to help determine the longest possible distance D. Input The input begins with a line containing an integer M (2 ≤ M ≤ 100,000), representing the number of candidate locations. The next line contains M distinct integers x1, x2, ..., xM (1 ≤ xi ≤ 10^9) representing the positions of these candidate locations along the highway. Output Output a single integer representing the longest possible distance D. Examples Input 5 1 3 7 9 13 Output 2 Input 4 5 10 15 20 Output 5 Input 3 1 2 4 Output 1 Note Explanation for the sample input/output #1 The longest possible distance D is 2, meaning the poles can be placed at locations 1, 3, 5, 7, 9, 11, 13. Explanation for the sample input/output #2 Here, the distance between each location is exactly 5, so the longest possible distance is 5. Explanation for the sample input/output #3 The longest possible distance between the locations is 1, meaning the poles can be placed at every 1, 2, and 4.","solution":"def gcd(a, b): while b: a, b = b, a % b return a def longest_distance(M, positions): positions.sort() diffs = [positions[i] - positions[i - 1] for i in range(1, M)] d = diffs[0] for i in range(1, M - 1): d = gcd(d, diffs[i]) if d == 1: return 1 return d"},{"question":"David is working on a data processing script that requires normalizing a list of numbers. Normalization in this context means transforming the list such that all its elements lie between 0 and 1. The normalized value of an element x in the list is computed as follows: normalized_x = (x - min_value) / (max_value - min_value) where min_value is the minimum value in the list and max_value is the maximum value in the list. Given a list of integers, implement the normalization procedure. Write a function `normalize(numbers)` that takes a list of integers as input and outputs a list of their normalized values. If the list contains only one unique value (i.e., all elements are the same), return a list of 0.5 for all elements as normalization is ambiguous in this scenario. **Input** - The input is a single line containing a list of integers separated by spaces: `numbers`. **Output** - The output should be a single line containing the normalized values of the input list, each rounded to 6 decimal places, separated by spaces. **Function Signature** ```python def normalize(numbers: List[int]) -> List[float]: ``` **Example** Input ``` 1 2 3 4 5 ``` Output ``` 0.000000 0.250000 0.500000 0.750000 1.000000 ``` Input ``` 10 10 10 10 ``` Output ``` 0.500000 0.500000 0.500000 0.500000 ``` **Constraints** - The length of the list is between 1 and 1000. - Each list element is an integer between -10^6 and 10^6.","solution":"from typing import List def normalize(numbers: List[int]) -> List[float]: Normalizes the list of numbers such that all elements lie between 0 and 1. If all elements are the same, returns a list of 0.5 for all elements. Each normalized value is rounded to 6 decimal places. if not numbers: return [] min_val = min(numbers) max_val = max(numbers) if min_val == max_val: return [0.5] * len(numbers) normalized_numbers = [(x - min_val) / (max_val - min_val) for x in numbers] return [round(num, 6) for num in normalized_numbers]"},{"question":"In a faraway land, there are n villages connected by m single-directional bridges, some of which may lead to self-loops (i.e., a bridge that connects a village back to itself). The villagers have noticed that certain bridges lead to cyclical paths, causing notable inconvenience. A cyclical path starts and ends at the same village, potentially passing through multiple villages and bridges. The King has tasked you to find whether there exists any cyclical path in the current bridge configuration. If a cyclical path exists, return \'YES\'. Otherwise, return \'NO\'. Input The first line of the input contains two positive integers, n and m — the number of villages and the number of bridges, respectively (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5). The following m lines each contain two integers ai and bi (1 ≤ ai, bi ≤ n), indicating that there is a bridge going from village ai to village bi. Output Print \'YES\' if there exists at least one cyclical path, otherwise print \'NO\'. Examples Input 5 6 1 2 2 3 3 4 4 5 5 3 5 1 Output YES Input 3 3 1 2 2 3 3 4 Output NO Input 4 4 1 2 2 3 3 4 4 1 Output YES Note In the first sample, the path 3 -> 4 -> 5 -> 3 forms a cycle. In the second sample, there is no cyclical path among the villages. In the third sample, the path 1 -> 2 -> 3 -> 4 -> 1 forms a cycle.","solution":"def is_cyclic(n, m, bridges): from collections import defaultdict, deque adj_list = defaultdict(list) for a, b in bridges: adj_list[a].append(b) visited = [False] * (n + 1) rec_stack = [False] * (n + 1) def dfs(v): visited[v] = True rec_stack[v] = True for neighbor in adj_list[v]: if not visited[neighbor]: if dfs(neighbor): return True elif rec_stack[neighbor]: return True rec_stack[v] = False return False for node in range(1, n + 1): if not visited[node]: if dfs(node): return \'YES\' return \'NO\'"},{"question":"GukiZ loves challenges with integer arrays. This time, he is interested in constructing a new array based on specific rules. GukiZ has an integer array `a` of length `n`. He wants to create a new array `b` which consists of exactly `k` subarrays from `a`. Two subarrays are non-overlapping if there is no integer index `i` such that it belongs to both subarrays. GukiZ also wants each subarray to be as long as possible to minimize the number of elements not included in any subarray. Given the constraints described, your task is to construct such array `b`. If there are multiple possible answers, return any of them that satisfies the conditions. Input The first line contains integers `n` and `k` (1 ≤ k ≤ n ≤ 2×10^5), where `n` is the length of array `a` and `k` is the number of subarrays. The next line contains `n` integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) - the elements of the array `a`. Output Output the array `b` which consists of exactly `k` subarrays from `a` as described. If there are multiple answers, print any of them. Examples Input 8 3 1 2 3 4 5 6 7 8 Output 1 2 3 4 5 6 Input 5 2 10 20 30 40 50 Output 10 20 30 40","solution":"def create_subarrays(n, k, a): subarray_length = n // k remainder = n % k subarrays = [] start_index = 0 for i in range(k): extra = 1 if remainder > 0 else 0 end_index = start_index + subarray_length + extra subarrays.extend(a[start_index:end_index]) start_index = end_index if remainder > 0: remainder -= 1 return subarrays"},{"question":"A company wants to organize its employees into teams for a collaborative project. Each team must be formed with exactly the same number of employees. The management has a list of departments, each with a certain number of employees, and wishes to determine the maximum number of employees each team can have while ensuring no employees are left out from any department. Write a function that takes the number of departments and the list of employee counts in each department, and returns the maximum number of employees that each team can have. Input - First line contains an integer t, the number of test cases. - For each test case: - The first line contains an integer n, the number of departments. - The second line contains n integers separated by space, representing the number of employees in each department. Output For each test case, output a single integer, the maximum number of employees that each team can have without leaving out any employee from any department. Constraints - 1 ≤ t ≤ 100 - 1 ≤ n ≤ 100 - 1 ≤ number of employees in each department ≤ 1000 Example Input: 2 3 15 20 25 4 12 18 24 36 Output: 5 6 Explanation: In the first example, the maximum number of employees each team can have is 5 (since 15, 20, and 25 can all be evenly divided by 5). In the second example, the maximum number of employees each team can have is 6 (since 12, 18, 24, and 36 can all be evenly divided by 6).","solution":"import math from functools import reduce def max_team_size(num_departments, employee_counts): Returns the maximum number of employees each team can have such that no employees are left out. # Function to compute the greatest common divisor (GCD) of a list of numbers def gcd_list(values): return reduce(math.gcd, values) return gcd_list(employee_counts) def process_test_cases(t, cases): Process multiple test cases and return the result for each. results = [] for i in range(t): n = cases[i][0] employee_counts = cases[i][1] result = max_team_size(n, employee_counts) results.append(result) return results"},{"question":"Masha has an array b = b1, b2, ..., bn, consisting of n integers. Each integer bi is either 0 or 1. She also has c queries: * Query number j is given as a pair of integers pj, qj (1 ≤ pj ≤ qj ≤ n). * The response to the query will be integer 1 if and only if there exists at least one 1 within the subarray bpj, bpj + 1, ..., bqj, otherwise the response to the query will be integer 0. Help Masha, answer all her queries. Input The first line contains integers n and c (1 ≤ n, c ≤ 2·105). The second line contains n integers b1, b2, ..., bn (bi = 0, 1). The next c lines contain Masha\'s queries. The j-th line contains integers pj, qj (1 ≤ pj ≤ qj ≤ n). Output Print c integers — the responses to Masha\'s queries in the order they occur in the input. Examples Input 4 3 0 1 0 1 1 2 2 3 1 4 Output 1 1 1 Input 6 4 1 0 0 0 0 0 1 3 4 6 2 2 1 6 Output 1 0 0 1","solution":"def masha_queries(n, c, b, queries): result = [] # Process each query for pj, qj in queries: # Check if there is at least one 1 in the sub-array b[pj - 1:qj] if 1 in b[pj - 1:qj]: result.append(1) else: result.append(0) return result"},{"question":"Write a function that determines whether a given string is a palindrome. A palindrome is a string that reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Input – single string s Output – boolean value (true or false) SAMPLE INPUT \\"A man, a plan, a canal, Panama\\" SAMPLE OUTPUT true","solution":"import re def is_palindrome(s): Returns True if the input string is a palindrome, ignoring spaces, punctuation, and capitalization. Otherwise, returns False. :param s: Input string :return: Boolean value indicating whether the string is a palindrome # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"In an ancient library, there is a special sequence of books organized in an L-shaped bookshelf layout. The bookshelf consists of a horizontal and a vertical segment, forming the shape \\"L.\\" Each segment contains several slots, each of which can hold exactly one book. Each slot is numbered starting from 1 going right on the horizontal segment, and going down on the vertical segment. The vertical segment starts immediately after the last slot of the horizontal segment. You have to find the number of ways to fill these slots with N books, such that the book placed in any slot is heavier than the book placed in the previous slot. You may assume that the weight of each book is different and they are labeled from 1 to N in increasing order of their weight. Your task is to write a program to find the number of ways to fill up the L-shaped bookshelf according to the given constraints. Input The input consists of multiple test cases. Each test case starts with two integers H and V (1 ≤ H, V ≤ 100), where H is the number of slots in the horizontal segment and V is the number of slots in the vertical segment. The input is terminated by a line containing two zeros. Output For each test case, print the number of ways to arrange N = H + V books in the bookshelf. Example Input 2 2 3 1 0 0 Output 5 4 Explanation In the first case, one possible way is to place books in the order [1,2] in the horizontal slots and [3,4] in the vertical slots. Other ways follow similar placement ensuring books are in increasing order by their weights. In the second case, one possible way is to place books in the order [1, 2, 3] in the horizontal slots and [4] in the vertical slot. Other ways follow similar placement ensuring books are in increasing order by their weights.","solution":"def count_ways(H, V): Returns the number of ways to arrange H+V books such that the book placed in any slot is heavier than the book placed in the previous slot. def binomial_coefficient(n, k): Calculate the binomial coefficient C(n, k) if k > n - k: k = n - k c = 1 for i in range(k): c = c * (n - i) // (i + 1) return c N = H + V return binomial_coefficient(N, H) def process_input(input_data): Processes the input data, computes the results for each test case, and returns them as a list. results = [] for line in input_data: H, V = map(int, line.split()) if H == 0 and V == 0: break results.append(count_ways(H, V)) return results"},{"question":"A city park management system is being designed to automate the process of fountain maintenance assignments. Each maintenance worker has one specific skill level and each fountain has a difficulty level. A worker can only be assigned to a fountain if their skill level is equal to or greater than the fountain\'s difficulty level. However, due to budget constraints, each worker can only be assigned to one fountain, and no fountain can remain unassigned. The goal is to determine if all fountains can be assigned to the available workers according to these constraints. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100 000) — the number of fountains and the number of workers respectively. The second line contains n integers representing the difficulty levels of the fountains. The third line contains m integers representing the skill levels of the workers. Output Print \\"YES\\" if all fountains can be assigned to the available workers, otherwise print \\"NO\\". Examples Input 3 4 2 3 1 3 2 1 4 Output YES Input 2 3 4 5 3 2 1 Output NO Note In the first example, each fountain can be assigned to a worker as follows: - The fountain with difficulty 2 to the worker with skill 3. - The fountain with difficulty 3 to the worker with skill 4. - The fountain with difficulty 1 to the worker with skill 2. In the second example, the fountains with difficulties 4 and 5 cannot be assigned to any of the workers as their skill levels are all below the difficulty levels. Hence, the answer is \\"NO\\".","solution":"def can_assign_all_fountains(n, m, fountains, workers): Determines if all fountains can be assigned to the available workers according to the skill and difficulty constraints. Parameters: n (int): Number of fountains m (int): Number of workers fountains (list): A list of integers representing the difficulty levels of the fountains workers (list): A list of integers representing the skill levels of the workers Returns: str: \\"YES\\" if all fountains can be assigned, otherwise \\"NO\\". fountains.sort() workers.sort() j = 0 for i in range(n): while j < m and workers[j] < fountains[i]: j += 1 if j == m: return \\"NO\\" j += 1 return \\"YES\\""},{"question":"Ash Ketchum is on a quest to find rare Pokemon in a rectangular grid. The grid is represented as an \\"n x m\\" matrix where each cell contains a number representing the rarity level of a Pokemon in that cell. Ash wants to know the maximum rarity sum of Pokemon he can collect by starting from the top-left cell of the grid and moving only to the right or down until he reaches the bottom-right cell. You need to help Ash by writing a function to find this maximum rarity sum. Input: - The first line contains two integers, n and m, the dimensions of the grid. - The next n lines each contain m integers, where the j-th integer of the i-th line represents the rarity level of the Pokemon in cell (i, j). Output: - Print the maximum rarity sum of Pokemon Ash can collect. Constraints: - 1 ≤ n, m ≤ 100 - 0 ≤ rarity levels ≤ 1000 SAMPLE INPUT 3 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT 12 Explanation: The path with the maximum rarity sum is: 1 -> 3 -> 5 -> 1 -> 2 -> which sums to 12.","solution":"def max_rarity_sum(n, m, grid): Calculate the maximum rarity sum of Pokemon that Ash can collect by starting from the top-left cell and moving only to the right or down to the bottom-right cell. Parameters: n (int): number of rows. m (int): number of columns. grid (List[List[int]]): 2D grid containing rarity levels Returns: int: The maximum rarity sum dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1]) return dp[n-1][m-1] # Example usage: # n, m = 3, 3 # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(max_rarity_sum(n, m, grid)) # Output: 12"},{"question":"Given a set of n unique integers and a non-negative integer x, determine whether there exists any subset of the given set such that the sum of the subset is exactly x. You need to write a function that, given the set and the integer x, returns \\"YES\\" if such a subset exists, and \\"NO\\" otherwise. Input The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. Each test case starts with a line containing two integers n and x (1 ≤ n ≤ 20, 0 ≤ x ≤ 10^6) — the number of elements in the set and the target sum, respectively. The next line contains n distinct integers (1 ≤ a_i ≤ 10^6) — the elements of the set. Output For each test case, print \\"YES\\" if there exists a subset with sum x, otherwise print \\"NO\\". Example Input 3 4 6 3 34 4 12 5 9 3 4 5 2 1 3 7 2 6 1 Output NO YES YES Note In the first test case, there is no subset of the set {3, 34, 4, 12} that sums to 6. In the second test case, the subset {4, 5} sums to 9. In the third test case, the subset {6, 1} sums to 7.","solution":"def subset_sum_exists(n, x, elements): Determines if there exists a subset of \'elements\' whose sum equals \'x\'. Parameters: - n: The number of elements in the set (integer). - x: The target sum (integer). - elements: List of integers representing the set. Returns: - \\"YES\\" if such a subset exists, otherwise \\"NO\\". from itertools import combinations # Check all possible subsets for r in range(n + 1): for subset in combinations(elements, r): if sum(subset) == x: return \\"YES\\" return \\"NO\\" def main(input_data): Processes multiple test cases and returns the results for each. Parameters: - input_data: A list containing test cases Returns: - A list of results for each test case (\\"YES\\" or \\"NO\\") index = 0 t = input_data[index] index += 1 results = [] for _ in range(t): n, x = input_data[index], input_data[index + 1] index += 2 elements = input_data[index:index + n] index += n results.append(subset_sum_exists(n, x, elements)) return results"},{"question":"You are given an array with N integers. Your task is to perform some operations such that the sum of the values at all indices of the array becomes zero. The only operation you are allowed to perform is the following: - Select two indices i and j (1 ≤ i, j ≤ N), such that i ≠ j. - If the value at index i is greater than 0 and the value at index j is less than 0, decrement the value at index i by 1 and increment the value at index j by 1. Determine the minimum number of operations required to make all elements in the array zero. If it is not possible, return -1. Constraints - 2 ≤ N ≤ 10^5 - -10^9 ≤ A_i ≤ 10^9 - All values in the input are integers. Input The input is given from the standard input in the following format: ``` N A_1 A_2 ... A_N ``` Output Print the minimum number of operations required, or `-1` if it is not possible. Examples Input ``` 5 2 -1 0 -2 1 ``` Output ``` 3 ``` Input ``` 3 1 -1 1 ``` Output ``` -1 ``` Input ``` 4 -2 2 2 -2 ``` Output ``` 4 ```","solution":"def min_operations_to_zero_sum(N, A): Returns the minimum number of operations required to make the sum of the array zero, or -1 if it is not possible. pos_sum = sum(x for x in A if x > 0) neg_sum = -sum(x for x in A if x < 0) if pos_sum != neg_sum: return -1 return pos_sum"},{"question":"In a magical kingdom, there is a square grid of size NxN representing a land. Each cell in the grid can either have a tree, represented by \'T\', or be empty, represented by \'.\'. The kingdom is experiencing frequent lightning strikes that burn trees. One lightning strike starts from a specific cell and spreads to immediate neighboring cells (up, down, left, right) if they also have a tree. The fire continues spreading until there are no neighboring trees left to burn. Given the grid and the start position of a lightning strike, determine the state of the forest after the fire has completely spread. All the burned trees should be represented by \'F\' in the output. Input - The first line contains two integers N (1 ≤ N ≤ 100) and Q (1 ≤ Q ≤ 50), the size of the grid and the number of lightning strikes, respectively. - The next N lines contain N characters each, which represent the grid. - The following Q lines each contain two integers r and c (1 ≤ r, c ≤ N), representing the coordinates (1-based) where a lightning strike starts. Output - Print the resulting grid after all Q lightning strikes have happened, with the burned trees replaced by \'F\'. Examples Input 5 2 .TT.. .TT.. ..TT. ....T ..... 1 2 4 5 Output .FF.. .FF.. ..FF. ....F ..... Input 3 1 TTT TTT TTT 2 2 Output FFF FFF FFF Input 4 3 T..T .TTT T..T .TT. 1 1 3 4 2 2 Output F..F .FFF F..F .FF. Note: - In the first example, the lightning starts at (1, 2), burning the cluster of trees in the top-left quadrant. Next, it starts at (4, 5), burning the tree in the bottom-right corner. - In the second example, starting at (2, 2) results in burning the entire forest as all trees are connected. - In the third example, lightning starts at (1, 1), then (3, 4) and finally (2, 2), resulting in three separate clusters of trees burned.","solution":"def burn_forest(N, Q, grid, attacks): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < N and 0 <= y < N def spread_fire(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if grid[cx][cy] == \'T\': grid[cx][cy] = \'F\' for dx, dy in directions: nx, ny = cx + dx, cy + dy if is_valid(nx, ny) and grid[nx][ny] == \'T\': stack.append((nx, ny)) for r, c in attacks: if grid[r-1][c-1] == \'T\': spread_fire(r-1, c-1) return grid # Example usage N = 5 Q = 2 grid = [ [\'.\', \'T\', \'T\', \'.\', \'.\'], [\'.\', \'T\', \'T\', \'.\', \'.\'], [\'.\', \'.\', \'T\', \'T\', \'.\'], [\'.\', \'.\', \'.\', \'.\', \'T\'], [\'.\', \'.\', \'.\', \'.\', \'.\'] ] attacks = [(1, 2), (4, 5)] result = burn_forest(N, Q, grid, attacks) for row in result: print(\'\'.join(row))"},{"question":"Rita is given a list of n integers, where each integer represents the height of a building. She needs to process q queries where each query includes two integers l and r (1 ≤ l ≤ r ≤ n). For each query, she needs to determine the maximum height of the buildings in the range from index l to index r (inclusive). Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of buildings and the number of queries, respectively. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the heights of the buildings. The next q lines contain two integers each, l and r, describing the indices of the range for which the maximum building height is to be found (1 ≤ l ≤ r ≤ n). Output For each query, print the maximum height of the buildings in the specified range. Example Input 5 3 3 9 5 7 2 1 3 2 5 4 4 Output 9 9 7","solution":"def process_queries(n, q, heights, queries): Returns the maximum heights for the given ranges in the list of building heights. Args: n: number of buildings q: number of queries heights: list of building heights queries: list of tuples, where each tuple contains two integers (l, r) Returns: List of maximum heights for each query. results = [] for l, r in queries: results.append(max(heights[l-1:r])) return results"},{"question":"A company named FlyerCorp wants to distribute flyers in a sequence of buildings in a specific way. The FlyerCorp\'s employees are working on a very tight schedule, so they want to optimize the flyer distribution strategy based on some specific rules: 1. There are `n` buildings in a row, numbered from 1 to n. 2. Each building has a specific height represented by an array of positive integers `heights`. 3. A flyer can be delivered to a building if and only if it is taller than the previous building that received a flyer, but not necessarily to consecutive buildings. Given the list of building heights, FlyerCorp wants to know the maximum number of flyers they can deliver following these rules. Write a function `maxFlyersDelivered(n, heights)` that takes the number of buildings `n` and an array `heights` as input and outputs the maximum number of flyers that can be delivered. # Input - The first line of the input contains an integer `n` (1 ≤ n ≤ 1000), the number of buildings. - The second line contains `n` space-separated integers `heights[i]` (1 ≤ heights[i] ≤ 10^6), representing the height of each building. # Output - Output a single integer, the maximum number of flyers that can be delivered based on the given rules. # Example Input 5 3 1 4 1 5 Output 3 Explanation FlyerCorp can deliver flyers to buildings with heights 3, 4, and 5. Input 6 10 22 9 33 21 50 Output 4 Explanation FlyerCorp can deliver flyers to buildings with heights 10, 22, 33, and 50.","solution":"def maxFlyersDelivered(n, heights): Returns the maximum number of flyers that can be delivered following the rules. if n == 0: return 0 # Create a list to store the maximum flyers deliverable ending at each building. dp = [1] * n # Iterate through each building. for i in range(n): # For each building height[i], check previous buildings. for j in range(i): # If the current building height is greater than the previous one, consider it. if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example usage: # n = 5 # heights = [3, 1, 4, 1, 5] # print(maxFlyersDelivered(n, heights)) # Output: 3"},{"question":"A magical spellbook contains n different spells, indexed from 0 to n-1. Each spell can be represented by a character from \'a\' to \'z\'. You are a wizard and you want to learn a series of k spells in a row from the spellbook. However, you have a specific requirement: you want the spells you learn to contain exactly one instance of each letter in the English alphabet (i.e., from \'a\' to \'z\'). Given a string s consisting of n characters representing the spells in the spellbook, determine if there is any substring of length k within s that contains exactly one instance of each letter from \'a\' to \'z\'. If such a substring exists, return its starting index; otherwise, return -1. Note that the substring can overlap, but it must be exactly of length k and contain all the letters from \'a\' to \'z\'. Input The first line of input contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ n). The second line contains a string s of length n consisting of lowercase English letters. Output Print the starting index of the substring of length k that contains exactly one instance of each letter in the alphabet if such a substring exists. Otherwise, print -1. Example Input 30 26 abcdefghijklmnopqrstuvwxyzabcde Output 0 Input 30 27 abcdefghijklmnopqrstuvwxyzaaaa Output -1 Note In the first example, the substring starting at index 0 contains all letters from \'a\' to \'z\' exactly once. In the second example, no substring of length 27 can contain all the letters from \'a\' to \'z\' exactly once.","solution":"def find_substring_with_all_alphabet(n, k, s): Determine if there is any substring of length k within s that contains exactly one instance of each letter from \'a\' to \'z\'. If such a substring exists, return its starting index; otherwise, return -1. from collections import Counter # Check if it\'s even possible to have such a substring if k != 26: return -1 required_count = Counter(\\"abcdefghijklmnopqrstuvwxyz\\") current_count = Counter(s[:26]) # Function to compare two Counter dictionaries def contains_all_letters(counter1, counter2): return all(counter1[char] == counter2[char] for char in counter1) if contains_all_letters(current_count, required_count): return 0 for i in range(26, n): current_count[s[i]] += 1 current_count[s[i-26]] -= 1 if current_count[s[i-26]] == 0: del current_count[s[i-26]] if contains_all_letters(current_count, required_count): return i-25 return -1"},{"question":"A city is built on an N x N grid. Each cell in the grid can either be an empty lot or a building, represented by a \'0\' or \'1\' respectively. The city planners need to evaluate the open space in the city by identifying the largest contiguous block of empty lots (i.e., the largest connected component of \'0\'s). Two cells are considered contiguous if they share a side (i.e., left, right, up, or down). Write a function `largestOpenBlock(grid: List[List[int]]) -> int` that takes as input a 2D list representation of the city grid and returns the size of the largest contiguous block of empty lots. # Input - The first line contains an integer N, representing the size of the grid (1 ≤ N ≤ 1000). - The next N lines each contain N integers (either 0 or 1), representing the grid. # Output - Print a single integer, the size of the largest contiguous block of empty lots. # Example Input ```plaintext 5 1 0 0 1 0 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 0 ``` Output ```plaintext 5 ``` # Explanation In the provided grid, the largest contiguous block of empty lots has a size of 5.","solution":"from typing import List def largestOpenBlock(grid: List[List[int]]) -> int: if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False]*cols for _ in range(rows)] def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == 1 or visited[r][c]: return 0 visited[r][c] = True size = 1 size += dfs(r+1, c) # down size += dfs(r-1, c) # up size += dfs(r, c+1) # right size += dfs(r, c-1) # left return size max_size = 0 for i in range(rows): for j in range(cols): if grid[i][j] == 0 and not visited[i][j]: max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"You are working on a project to analyze customer reviews posted on different ecommerce websites. The task is to identify and categorize the sentiment of the reviews into three predefined sentiment categories: positive, neutral, or negative. The sentiment classification is based on the aggregate sentiment of words in the review. For simplicity, you are provided with a small sentiment lexicon containing a set of predefined words, each associated with a sentiment score. Your goal is to classify the sentiment of a new review based on this lexicon. Here is the lexicon: - \\"good\\": +2 - \\"happy\\": +3 - \\"great\\": +4 - \\"bad\\": -2 - \\"sad\\": -3 - \\"terrible\\": -4 - \\"ok\\": 0 - \\"neutral\\": 0 Positive sentiment is indicated when the total sentiment score is greater than 0. Neutral sentiment is indicated when the total sentiment score is equal to 0. Negative sentiment is indicated when the total sentiment score is less than 0. Write a program that reads a review and determines its sentiment category based on the provided lexicon. Input The input contains a single line which is the customer review. The review consists of words separated by spaces and is guaranteed to contain only lowercase alphabetical characters and spaces. The length of the review will not exceed 1000 characters. Output Print one of the sentiment categories as a single integer: 1 for positive, 0 for neutral, -1 for negative. Example Input ``` the product is good and makes me happy ``` Output ``` 1 ``` Input ``` the service was ok but delivery was terrible ``` Output ``` -1 ``` Input ``` it was an ok experience overall ``` Output ``` 0 ``` Note In the examples above, the first review contains the words \\"good\\" (+2) and \\"happy\\" (+3), resulting in a total sentiment score of +5 (positive). The second review contains the words \\"ok\\" (0) and \\"terrible\\" (-4), resulting in a total sentiment score of -4 (negative). The third review contains the word \\"ok\\" (0), resulting in a total sentiment score of 0 (neutral).","solution":"def classify_sentiment(review): lexicon = { \\"good\\": 2, \\"happy\\": 3, \\"great\\": 4, \\"bad\\": -2, \\"sad\\": -3, \\"terrible\\": -4, \\"ok\\": 0, \\"neutral\\": 0 } words = review.split() sentiment_score = sum(lexicon[word] for word in words if word in lexicon) if sentiment_score > 0: return 1 elif sentiment_score < 0: return -1 else: return 0"},{"question":"You are given an array of integers where every element appears twice except for one. Find that single one. Example 1: Input: [2,2,1] Output: 1 Example 2: Input: [4,1,2,1,2] Output: 4 Note: - Your algorithm should have a linear runtime complexity. - Try to implement it without using extra memory.","solution":"def single_number(nums): Given an array of integers where every element appears twice except for one, find the element that appears only once. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"Two companies, AlphaCorp and BetaInc, collaborate on a shared project. To track the progress, each company comes up with individual schedules, which consist of tasks each represented by integer IDs. They need to ensure that their works are synchronized, so that there are no conflicts in their schedules. A conflict arises if they are both trying to complete a task with the same ID on the same day. You are to write a function that takes these two schedules and determines if there are any conflicts or not. Each company provides its schedule as a list of integers, where each integer represents a unique task ID. Input The function should take two lists of integers. The first list represents AlphaCorp\'s schedule and the second list represents BetaInc\'s schedule. Both lists contain unique integers and their lengths do not exceed 1000. Output Output \\"CONFLICT\\" if there are any task IDs present in both lists. Output \\"NO CONFLICT\\" otherwise. Examples Input [1, 3, 5, 7, 9] [2, 4, 6, 8, 10] Output NO CONFLICT Input [100, 200, 300, 400, 500] [300, 600, 700, 800, 900] Output CONFLICT Note The task schedules are lists of unique integers, ensuring there are no duplicate tasks within a single list. However, the goal is to determine if there is any overlap between the two lists representing scheduling conflicts between the two companies.","solution":"def check_conflict(schedule_alpha, schedule_beta): Determines if there are any conflicts between two schedules. :param schedule_alpha: List of integers representing AlphaCorp\'s schedule :param schedule_beta: List of integers representing BetaInc\'s schedule :return: \\"CONFLICT\\" if there are common task IDs in both schedules, \\"NO CONFLICT\\" otherwise # Convert the schedules to sets for efficient look-ups set_alpha = set(schedule_alpha) set_beta = set(schedule_beta) # Find the intersection of the two sets common_tasks = set_alpha & set_beta # If there\'s any common task IDs, there is a conflict if common_tasks: return \\"CONFLICT\\" else: return \\"NO CONFLICT\\""},{"question":"You are given an array of integers which represents the heights of buildings facing an ocean. The buildings are standing in a line, numbered from 0 to n-1. Each building has a height h_i (`1 ≤ h_i ≤ 10^6`). The ocean is to the right of the buildings, i.e., building 0 is the farthest from the ocean and building n-1 is the closest. A building can view the ocean if all the buildings to its right have a height that is less than or equal to its height. Write a function to find all the buildings that can view the ocean and return their indices in ascending order. Input: - An integer n (`1 ≤ n ≤ 10^6`), the number of buildings. - An array of n integers `h` (`1 ≤ h_i ≤ 10^6`), where `h_i` is the height of the i-th building. Output: - A list of integers representing the indices of the buildings that can view the ocean, in ascending order. Example Input: 8 [4, 3, 2, 1, 7, 3, 2, 5] Output: [4, 7] Explanation: Building at index 4 has height 7 and it can see the ocean because all buildings to the right (indices 5, 6, and 7) have heights less than 7. Building at index 7 has height 5 and it can also see the ocean since there are no buildings to its right. All the other buildings cannot see the ocean as there is at least one building taller or equal to them on their right.","solution":"def find_buildings_with_ocean_view(n, heights): Returns indices of buildings that can view the ocean. Args: - n: Integer, number of buildings - heights: List of integers, heights of the buildings Returns: - List of integers, indices of buildings that can see the ocean result = [] max_height = 0 for i in range(n-1, -1, -1): if heights[i] > max_height: result.append(i) max_height = heights[i] return sorted(result)"},{"question":"Imagine you are building an application for managing library books. Each book in the library can be represented by the following details: a unique ID, the book title, author, and publishing year. Your task is to implement a class `Library` which maintains a list of books and provides various functionalities. # Requirements Implement the `Library` class with the following methods: 1. **`add_book(self, book_id: int, title: str, author: str, year: int) -> None`**: - Adds a new book to the library. Raise a `ValueError` if a book with the same `book_id` already exists. 2. **`remove_book(self, book_id: int) -> None`**: - Removes the book with the given `book_id`. Raise a `ValueError` if no book with the given `book_id` exists. 3. **`find_books_by_author(self, author: str) -> List[Dict[str, Union[int, str]]]`**: - Returns a list of books written by the specified author. Each book should be represented as a dictionary with keys: `book_id`, `title`, and `year`. 4. **`get_books_by_year(self, start_year: int, end_year: int) -> List[Dict[str, Union[int, str]]]`**: - Returns a list of books published within the given range of years inclusive. Each book should be represented as a dictionary with keys: `book_id`, `title`, and `author`. # Example ```python # Example usage library = Library() library.add_book(1, \\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925) library.add_book(2, \\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960) # Find books by author print(library.find_books_by_author(\\"Harper Lee\\")) # Output: [{\'book_id\': 2, \'title\': \'To Kill a Mockingbird\', \'year\': 1960}] # Get books published between 1900 and 1950 print(library.get_books_by_year(1900, 1950)) # Output: [{\'book_id\': 1, \'title\': \'The Great Gatsby\', \'author\': \'F. Scott Fitzgerald\'}] library.remove_book(1) ``` # Constraints - Book IDs are guaranteed to be unique integers. - Book titles, authors, and year will always be valid and non-empty. - Assume there are no duplicates in the author names. - Each method should have a time complexity of O(n), where n is the number of books in the library. Implement the `Library` class based on the above requirements.","solution":"from typing import List, Dict, Union class Library: def __init__(self): self.books = [] def add_book(self, book_id: int, title: str, author: str, year: int) -> None: for book in self.books: if book[\'book_id\'] == book_id: raise ValueError(\\"Book with the same ID already exists.\\") self.books.append({ \'book_id\': book_id, \'title\': title, \'author\': author, \'year\': year }) def remove_book(self, book_id: int) -> None: for book in self.books: if book[\'book_id\'] == book_id: self.books.remove(book) return raise ValueError(\\"Book with the given ID does not exist.\\") def find_books_by_author(self, author: str) -> List[Dict[str, Union[int, str]]]: return [ {\'book_id\': book[\'book_id\'], \'title\': book[\'title\'], \'year\': book[\'year\']} for book in self.books if book[\'author\'] == author ] def get_books_by_year(self, start_year: int, end_year: int) -> List[Dict[str, Union[int, str]]]: return [ {\'book_id\': book[\'book_id\'], \'title\': book[\'title\'], \'author\': book[\'author\']} for book in self.books if start_year <= book[\'year\'] <= end_year ]"},{"question":"Write a function that takes an integer `n` and returns an array of all prime numbers less than or equal to `n`. Constraints * `1 leq n leq 10^6` Input The input consists of a single integer `n`. Output Print the array of prime numbers less than or equal to `n`. Examples Input 10 Output [2, 3, 5, 7] Input 20 Output [2, 3, 5, 7, 11, 13, 17, 19] Input 1 Output [] Note A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n. if n < 2: return [] prime = [True] * (n + 1) prime[0], prime[1] = False, False # 0 and 1 are not primes by definition p = 2 while (p * p <= n): if prime[p] == True: for i in range(p * p, n + 1, p): prime[i] = False p += 1 return [p for p in range(n + 1) if prime[p]] # Example usage: # print(sieve_of_eratosthenes(10)) # Output: [2, 3, 5, 7]"},{"question":"A popular method of encoding strings is \\"run-length encoding\\", in which runs of consecutive characters are encoded as a single character followed by the length of that run. For example, the string \\"aaabbbcccaaa\\" is encoded as \\"a3b3c3a3\\". Given a run-length encoded string, your task is to decode it back to its original form. Implement a function `decode_string(encoded: str) -> str` that takes a run-length encoded string and returns the original string. # Input * A single string `encoded`, where each character is followed by a positive integer (1 ≤ integer ≤ 1000), representing the count of consecutive occurrences of that character. # Output * A string that represents the decoded version of the given encoded string. # Constraints * The length of `encoded` string will be between 1 and 2000 characters. * The character set will be lowercase English letters. # Examples Example 1: **Input:** ``` a3b2c1 ``` **Output:** ``` aaabbc ``` Example 2: **Input:** ``` x4y2z10 ``` **Output:** ``` xxxxyyzzzzzzzzzz ``` Example 3: **Input:** ``` a1 ``` **Output:** ``` a ```","solution":"def decode_string(encoded: str) -> str: Decodes a run-length encoded string. Parameters: encoded (str): The run-length encoded string. Returns: str: The decoded string. decoded = [] i = 0 while i < len(encoded): # Extract the character char = encoded[i] i += 1 # Extract the number following the character num = 0 while i < len(encoded) and encoded[i].isdigit(): num = num * 10 + int(encoded[i]) i += 1 # Append the character \'num\' times to the result decoded.append(char * num) return \'\'.join(decoded)"},{"question":"You are tasked with reading multiple lines of input where each line represents a mathematical expression in prefix notation. Your job is to evaluate each expression and produce the result. Prefix notation (also known as Polish notation) is a way of writing mathematical expressions where the operator precedes their operands. Input The input starts with a line indicating the number of expressions N (1 ≤ N ≤ 100). Followed by N lines, each containing a single prefix expression. Each expression is a valid prefix expression composed of integers and the operators +, -, *, / (representing addition, subtraction, multiplication, and division respectively). It is guaranteed that no division by zero will occur and all divisions are integer divisions. Output Output N lines, each containing the result of evaluating the corresponding prefix expression from the input. Example Input 3 + 10 2 * - 3 2 8 / + 15 5 5 Output 12 8 4 Explanation In the first expression, + 10 2 means 10 + 2 which equals 12. In the second expression, * - 3 2 8 means (3 - 2) * 8 which equals 1 * 8 which equals 8. In the third expression, / + 15 5 5 means (15 + 5) / 5 which equals 20 / 5 which equals 4. You can assume that each prefix expression will be well-formed and there will be no errors in the expressions.","solution":"def evaluate_prefix(expression): Evaluates a single prefix expression. stack = [] # Split the expression on whitespace tokens = expression.split() # Reverse tokens to process them from right to left tokens.reverse() # Define the operations def operate(op, a, b): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return a // b # integer division # Evaluate the prefix expression for token in tokens: if token in \'+-*/\': a = stack.pop() b = stack.pop() result = operate(token, a, b) stack.append(result) else: stack.append(int(token)) # The final result will be the only element in the stack return stack[0] def evaluate_multiple_prefix_expressions(expressions): Evaluates multiple prefix expressions. N = int(expressions[0]) results = [] for i in range(1, N + 1): result = evaluate_prefix(expressions[i]) results.append(result) return results"},{"question":"In a garden, trees are planted in such a way that they form a line. Each tree grows one fruit every day once it is mature. However, not all trees mature at the same rate — some take longer to reach maturity than others. Once a tree is mature, it continues to produce one fruit every day without any deviations. You are given n trees, and you know the number of days each tree takes to mature. Your goal is to find out the maximum number of fruits that can be collected after a specified number of days, T. Input The first line of the input contains two integers n (1 ≤ n ≤ 100 000) — the number of trees, and T (1 ≤ T ≤ 1 000 000) — the number of days after the planting. Each of the following n lines contains a single integer di (0 ≤ di ≤ T) — the number of days it takes for the i-th tree to mature. Output Print a single integer — the maximum number of fruits that can be collected after T days. Examples Input 3 10 3 5 1 Output 24 Input 4 7 0 2 4 3 Output 18 Note In the first example, the maximum fruits are collected as follows: - Tree 1 matures in 3 days and has 10 - 3 = 7 days to produce fruits. - Tree 2 matures in 5 days and has 10 - 5 = 5 days to produce fruits. - Tree 3 matures in 1 day and has 10 - 1 = 9 days to produce fruits. So, the total number of fruits is 7 + 5 + 9 = 21. In the second example, after 7 days: - Tree 1 matures immediately (0 days) and has 7 days to produce fruits. - Tree 2 matures in 2 days and has 7 - 2 = 5 days to produce fruits. - Tree 3 matures in 4 days and has 7 - 4 = 3 days to produce fruits. - Tree 4 matures in 3 days and has 7 - 3 = 4 days to produce fruits. Total fruits are 7 + 5 + 3 + 4 = 19.","solution":"def max_fruits_collected(n, T, days_to_mature): total_fruits = 0 for d in days_to_mature: if d <= T: total_fruits += (T - d) return total_fruits"},{"question":"Given a string containing exactly 5 characters from the set {\'A\', \'B\', \'C\'}, determine if the string contains exactly two \'A\'s and exactly three \'B\'s. If it does, output \\"YES\\". Otherwise, output \\"NO\\". Input The input consists of a single string of exactly 5 characters selected from the set {\'A\', \'B\', \'C\'}. Output Output \\"YES\\" or \\"NO\\". Examples Input AABBB Output YES Input ABABA Output NO Input ABBCC Output NO Input ABBBB Output NO Input BAABB Output YES","solution":"def check_string(s): Checks if the string s contains exactly two \'A\'s and exactly three \'B\'s. Args: s (str): A string of exactly 5 characters from the set {\'A\', \'B\', \'C\'}. Returns: str: \\"YES\\" if the string contains exactly two \'A\'s and exactly three \'B\'s, otherwise \\"NO\\". return \\"YES\\" if s.count(\'A\') == 2 and s.count(\'B\') == 3 else \\"NO\\""},{"question":"You are given two integers n and k. Your task is to modify the integer n in exactly k steps such that at each step you can either increment or decrement the current number by 1. You must determine the number of unique numbers you can achieve after exactly k modifications. Since the result can be very large, return the answer modulo 1000000007. Input The input consists of two integers n and k (1 ≤ n ≤ 10^9, 0 ≤ k ≤ 10^9). Output Output a single integer — the number of unique numbers you can achieve after exactly k modifications, modulo 1000000007. Examples Input ``` 5 3 ``` Output ``` 4 ``` Explanation Starting from 5, you can achieve the following numbers after exactly 3 steps: - 2 (5-1-1-1) - 4 (5-1-1+1 or 5-1+1-1 or 5+1-1-1) - 6 (5+1+1-1 or 5+1-1+1 or 5-1+1+1) - 8 (5+1+1+1) Input ``` 10 0 ``` Output ``` 1 ``` Explanation Starting from 10, with 0 steps, the only number you can achieve is 10 itself. Input ``` 7 5 ``` Output ``` 6 ``` Explanation Starting from 7, you can achieve the following numbers after exactly 5 steps: - 2 (7-1-1-1-1-1) - 4 (7-1-1-1-1+1 or any other permutation leading to 4 changes) - 6 (7+1-1-1+1-1 or any other permutation leading to 6 changes) - 8 (7+1+1-1+1-1 or any other permutation leading to 8 changes) - 10 (7+1+1+1+1-1 or any other permutation leading to 10 changes) - 12 (7+1+1+1+1+1) In case n and k are very large, using the properties of combinatorics and modular arithmetic can be required to solve the problem efficiently.","solution":"MOD = 1000000007 def unique_numbers_after_k_steps(n, k): if k == 0: return 1 return (k + 1) % MOD"},{"question":"You are given a string `s` of length `n` consisting of lowercase English letters, and an integer `m`. Your task is to find the number of distinct substrings of `s` that have a length of exactly `m`. A substring is a contiguous sequence of characters within a string. Two substrings are considered distinct if they are different as per their character ordering. Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 105, 1 ≤ m ≤ n). The second line contains the string `s` of length `n`. Output Output a single integer — the number of distinct substrings of length `m`. Examples Input 5 3 ababc Output 3 Input 4 2 aaaa Output 1 Note In the first sample, the substrings of length `m=3` are: \\"aba\\", \\"bab\\", and \\"abc\\". All of them are distinct. In the second sample, the substrings of length `m=2` are: \\"aa\\", \\"aa\\", and \\"aa\\". There is only 1 distinct substring \\"aa\\".","solution":"def distinct_substrings(s, m): Returns the number of distinct substrings of length m in the string s. substr_set = set() # Loop through the string to collect all possible substrings of length m for i in range(len(s) - m + 1): substr = s[i:i + m] substr_set.add(substr) return len(substr_set) # Example usage # n, m = 5, 3 # s = \\"ababc\\" # print(distinct_substrings(s, m)) # Output: 3"},{"question":"A gardener is planting trees in a row. Each tree is of a certain type denoted by a single character. The gardener wants to ensure that no two adjacent trees are of the same type. Help the gardener determine if it is possible to rearrange the given trees in such a way that no two adjacent trees are the same. Input The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the number of trees. - The second line contains a string of N characters where each character represents the type of a tree. Output For each test case, print \\"Possible\\" if the gardener can rearrange the trees such that no two adjacent trees are the same. Otherwise, print \\"Not Possible\\". Constraints 1 <= T <= 10 1 <= N <= 100 Each character in the string will be a lowercase alphabet [a-z]. Input: 2 5 aabbc 3 aaa Output: Possible Not Possible","solution":"from collections import Counter def can_rearrange_trees(n, tree_types): # Count frequency of each tree type freq = Counter(tree_types) max_freq = max(freq.values()) # Check the condition for rearranging if max_freq <= (n + 1) // 2: return \\"Possible\\" else: return \\"Not Possible\\" def rearrange_trees(T, cases): results = [] for case in cases: n, tree_types = case results.append(can_rearrange_trees(n, tree_types)) return results"},{"question":"A scientist has been conducting research on a specific type of viral infection that can spread through a network of people. The network can be represented as a tree where each node is a person and each edge is a direct infection pathway between two people. The tree has `n` nodes and `n-1` edges. Initially, the infection starts at a given node `start`, and the scientist wants to determine the minimum time required to infect all nodes in the network. The virus spreads to neighboring nodes every `d` seconds. Formally, the tree can be represented by `n` nodes and `n-1` edges. Each edge connects two nodes `u` and `v`, representing the infection pathway between node `u` and node `v`. Starting from node `start`, the infection spreads to all directly connected nodes every `d` seconds. Given the structure of the tree, the starting node, and the time `d` it takes for the infection to spread from one node to its neighbor, determine the minimum time required for all nodes in the tree to become infected. Input The first line contains two integers `n` and `d` (2 ≤ n ≤ 10^5, 1 ≤ d ≤ 1000) - the number of nodes in the tree and the time it takes for the infection to spread from one node to its direct neighbor respectively. The next `n-1` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n) - representing an edge between nodes `u` and `v`. The last line contains a single integer `start` (1 ≤ start ≤ n) - the starting node of the infection. Output Output a single integer - the minimum time required for all nodes to be infected. # Example Input: ``` 5 2 1 2 1 3 2 4 2 5 1 ``` Output: ``` 4 ``` # Note In this example, the optimal route is: - At time 0, node 1 is infected. - At time 2, nodes 2 and 3 get infected. - At time 4, nodes 4 and 5 get infected. Thus, the total minimum time required to infect all nodes is 4 seconds.","solution":"from collections import deque def min_infection_time(n, d, edges, start): # Build the tree using adjacency list representation tree = [[] for _ in range(n + 1)] for u, v in edges: tree[u].append(v) tree[v].append(u) # BFS to find the maximum distance from the start node def bfs(start): visited = [False] * (n + 1) queue = deque([(start, 0)]) visited[start] = True max_dist = 0 while queue: node, dist = queue.popleft() max_dist = max(max_dist, dist) for neighbor in tree[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + 1)) return max_dist max_distance = bfs(start) return max_distance * d # Example usage: n = 5 d = 2 edges = [(1, 2), (1, 3), (2, 4), (2, 5)] start = 1 print(min_infection_time(n, d, edges, start)) # Output: 4"},{"question":"An array is considered almost non-decreasing if you can remove no more than one element to make it non-decreasing (i.e., every element is not less than its preceding element). You are given an array `a` consisting of `n` elements. Calculate the minimum number of elements that need to be changed to convert the array into an almost non-decreasing array. Input The first line contains an integer `n` (2 ≤ n ≤ 200000) — the number of elements in the array `a`. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the elements of the array. Output Print the minimum number of changes required to make the array almost non-decreasing. Examples Input 6 1 3 2 4 5 3 Output 1 Input 4 3 3 3 3 Output 0","solution":"def min_changes_to_almost_non_decreasing(a): Calculates the minimum number of changes required to convert the array into an almost non-decreasing array. n = len(a) change_count = 0 # to count modifications for i in range(1, n): if a[i] < a[i - 1]: change_count += 1 if change_count > 1: return 1 # More than one change needed, return 1 immediately if i == 1 or a[i] >= a[i - 2]: a[i - 1] = a[i] # Modify a[i-1] to be non-decreasing else: a[i] = a[i - 1] # Modify a[i] to be non-decreasing return 1 if change_count == 1 else 0"},{"question":"In a parallel universe, people use a unique base-7 numbering system for all their mathematical operations. To facilitate communication between Earth and this parallel universe, you\'re tasked with writing a program that converts decimal numbers into their corresponding base-7 representation. Your task is to implement a function that takes a single integer as input and outputs its base-7 equivalent as a string. The input will always be a non-negative integer. For instance: - If the input is 10, the output should be \\"13\\" (since 10 in decimal is 13 in base-7). - If the input is 49, the output should be \\"100\\" (since 49 in decimal is 100 in base-7). Input The input consists of a single integer n (0 ≤ n ≤ 10^7). Output The output should be the base-7 representation of the given integer. Example Input 10 Output 13 Input 49 Output 100","solution":"def decimal_to_base7(n): Converts a non-negative integer from decimal to base-7 representation. if n == 0: return \\"0\\" digits = [] while n > 0: digits.append(str(n % 7)) n //= 7 return \'\'.join(digits[::-1])"},{"question":"# Problem description You are given an array of integers. Your task is to compute the sum of the absolute differences between every pair of consecutive elements in the array and then return the result. For instance, given an array [1, 3, 5], the absolute differences are |3 - 1|, |5 - 3| which are 2 and 2 respectively, so the sum is 4. # Input The input consists of several test cases: 1. The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. 2. Following T lines, each containing an integer n (2 ≤ n ≤ 10^5) denoting the number of elements in the array. 3. Next line contains n integers separated by spaces, representing the elements of the array. The array elements will be between -10^9 and 10^9. # Output Output should contain T lines, each line with the result of the respective test case. # Example Input: ``` 2 3 1 3 5 4 -1 -2 3 5 ``` Output: ``` 4 11 ``` # Explanation - For the first test case, the array is [1, 3, 5]. The absolute differences are |3 - 1| = 2, and |5 - 3| = 2. The sum is 2 + 2 = 4. - For the second test case, the array is [-1, -2, 3, 5]. The absolute differences are | -2 - (-1) | = 1, | 3 - (-2) | = 5, | 5 - 3 | = 2. The sum is 1 + 5 + 2 = 8.","solution":"def sum_absolute_differences(test_cases): results = [] for case in test_cases: n, array = case sum_diff = sum(abs(array[i] - array[i - 1]) for i in range(1, n)) results.append(sum_diff) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((n, array)) index += 2 return test_cases def format_output(result_list): return \'n\'.join(map(str, result_list))"},{"question":"A company has several employees working on various projects. Each employee can work on only one project at a time. The goal is to maximize the number of employees that can be assigned to projects without any working time overlapping among employees within the same team. Given the number of employees and their availability as a series of intervals, determine the maximum number of employees that can be assigned to projects without overlapping working times. Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of employees. - Each of the next n lines contains two integers li and ri (1 ≤ li < ri ≤ 10000) — the start time li and end time ri of the ith employee\'s availability. Output Print a single integer — the maximum number of employees that can be assigned to projects without overlapping working times. Example Input 5 1 3 2 5 4 6 6 8 5 7 Output 3 Input 4 2 4 3 5 1 7 5 8 Output 2","solution":"def max_non_overlapping_intervals(n, intervals): Returns the maximum number of non-overlapping intervals from the given list of intervals # Sort intervals by their end times intervals.sort(key=lambda x: x[1]) # Initialize count and the end time of the previous selected interval count = 0 prev_end_time = 0 for interval in intervals: start, end = interval # If the start time of the current interval is greater than or equal to # the end time of the previous selected interval, select this interval if start >= prev_end_time: count += 1 prev_end_time = end return count # Example usage: # n = 5 # intervals = [(1, 3), (2, 5), (4, 6), (6, 8), (5, 7)] # print(max_non_overlapping_intervals(n, intervals)) # Output: 3"},{"question":"Alice loves sequences and found a new interesting one: the \\"GCD sequence\\". Given a sequence of n integers, she wants to construct a new sequence where each element at index i is the GCD of the elements from the beginning of the sequence up to index i (inclusive). Write a program to find this \\"GCD sequence\\". Input The first line of input file contains an integer T, the number of test cases. Each test case starts with an integer n, the number of elements in the sequence, followed by n space-separated integers representing the sequence. Output For each test case, output n space-separated integers, the \\"GCD sequence\\". Constraints 1 ≤ T ≤ 1000 1 ≤ n ≤ 10^5 1 ≤ Sequence[i] ≤ 10^6 Example Input: 2 3 12 15 18 4 7 14 21 28 Output: 12 3 3 7 7 7 7","solution":"import math from typing import List def gcd_sequence(T: int, test_cases: List[List[int]]) -> List[List[int]]: Constructs GCD sequences for given test cases. Parameters: - T: An integer, number of test cases. - test_cases: A list containing n and the sequence elements for each test case. Returns: List of lists where each list is the GCD sequence for a test case. def gcd(a, b): while b: a, b = b, a % b return a results = [] for case in test_cases: n = case[0] sequence = case[1:] gcd_seq = [sequence[0]] for i in range(1, n): gcd_seq.append(gcd(gcd_seq[-1], sequence[i])) results.append(gcd_seq) return results"},{"question":"You are given an array of integers representing the weights of different items and a target weight. Your goal is to determine if any two distinct items in the array can be combined to exactly match the target weight. Write a function that takes in two parameters: 1. An integer array `weights` representing the weights of items. 2. An integer `targetWeight` representing the target weight. Your function should return a boolean value `True` if there exist two distinct items in the array that can be combined to match the target weight, and `False` otherwise. **Input:** - An integer array `weights` (1 ≤ len(weights) ≤ 10^4, 1 ≤ weights[i] ≤ 10^4). - An integer `targetWeight` (1 ≤ targetWeight ≤ 2 * 10^4). **Output:** - A boolean value `True` if any two distinct items can be combined to match the target weight, `False` otherwise. **Example 1:** **Input:** ``` weights = [1, 2, 3, 4, 6] targetWeight = 7 ``` **Output:** ``` True ``` **Explanation:** Two distinct items (3 and 4) can be combined to match the target weight 7. **Example 2:** **Input:** ``` weights = [1, 2, 3, 9] targetWeight = 8 ``` **Output:** ``` False ``` **Explanation:** No two distinct items can be combined to match the target weight 8. **Example 3:** **Input:** ``` weights = [5, 7, 1, 2, 8, 4, 3] targetWeight = 10 ``` **Output:** ``` True ``` **Explanation:** Two distinct items (7 and 3) can be combined to match the target weight 10. **Constraints:** - The given array contains at most 10^4 elements. - The given elements are positive integers. - The target weight is a positive integer.","solution":"def can_pair_match_target_weight(weights, targetWeight): Determines if there are two distinct items in weights that sum up to targetWeight. :param weights: List of integers representing the weights of items. :param targetWeight: An integer representing the target weight. :return: True if there are two distinct items that sum up to targetWeight, else False. seen_weights = set() for weight in weights: if targetWeight - weight in seen_weights: return True seen_weights.add(weight) return False"},{"question":"The country of Hexonia uses a currency called the hex, which is based on a hexadecimal number system (base 16). The people of Hexonia love to encode their numbers in hexadecimal format, and the country\'s banker wants to develop a software that can convert a range of decimal values into their corresponding hexadecimal representations. Your task is to write a program that takes a range of decimal values as input and outputs their hexadecimal equivalents with a prefix \\"0x\\". The range will be defined by a start and end value (inclusive). Additionally, the banker wants all the hexadecimal outputs to be in uppercase letters. # Input - The first line will contain two integers `start` and `end` (0 <= start, end <= 10000, start <= end), which define the range of decimal values to be converted. # Output - Output the hexadecimal representations of all decimal numbers in the specified range, each on a new line with a prefix \\"0x\\" and in uppercase. # Example Input ``` 10 20 ``` Output ``` 0xA 0xB 0xC 0xD 0xE 0xF 0x10 0x11 0x12 0x13 0x14 ``` # Notes - Ensure that all hexadecimals are prefixed with \\"0x\\". - Hexadecimal digits should be output in uppercase.","solution":"def decimal_to_hex_range(start, end): Converts a range of decimal values to their hexadecimal equivalents with prefix \\"0x\\" in uppercase. Arguments: start -- starting integer value of the range (inclusive) end -- ending integer value of the range (inclusive) Returns: List of hexadecimal representations with prefix \\"0x\\". return [f\\"0x{hex(i)[2:].upper()}\\" for i in range(start, end + 1)]"},{"question":"You are given an M x N grid, which represents a town. Each cell in the grid can be either an empty lot (\'E\'), a building (\'B\'), or a tree (\'T\'). You need to determine the largest rectangle of empty lots in the grid. A rectangle is formed by connecting any four grid points such that: - All the cells inside the rectangle contain the same value which is \'E\' in this case. - The sides of the rectangle are parallel to the x-axis and y-axis. Write a program to find the size of the largest rectangle of empty lots. Input: 1. The first line contains two integers M and N (1 ≤ M, N ≤ 100), representing the number of rows and columns of the grid. 2. The next M lines each contain a string of length N composed of the characters \'E\', \'B\', and \'T\'. Output: 1. An integer representing the size of the largest rectangle of empty lots. Example: Input: 4 5 EBEEE EEEBE EEEBT BBBBB Output: 6 Explanation: The largest rectangle of empty lots has size 6, formed by the 2x3 grid of E\'s in the top-left corner. In case you do not find any rectangles with only empty lots, your program should return 0.","solution":"def maximal_rectangle(grid): if not grid: return 0 M, N = len(grid), len(grid[0]) max_area = 0 height = [0] * N left = [0] * N right = [N] * N for i in range(M): cur_left, cur_right = 0, N # Update height for j in range(N): if grid[i][j] == \'E\': height[j] += 1 else: height[j] = 0 # Update left boundary (from left to right) for j in range(N): if grid[i][j] == \'E\': left[j] = max(left[j], cur_left) else: left[j] = 0 cur_left = j + 1 # Update right boundary (from right to left) for j in range(N-1, -1, -1): if grid[i][j] == \'E\': right[j] = min(right[j], cur_right) else: right[j] = N cur_right = j # Calculate the area of rectangle (height[j] * (right[j] - left[j])) for j in range(N): max_area = max(max_area, height[j] * (right[j] - left[j])) return max_area"},{"question":"In a magical land, there are some unique creatures called Numfluffs. Each Numfluff can be represented by a number. Numfluffs love to gather in groups, and every group has a magical property: the sum of all numbers in the group is divisible by a given magical number K. You are given an array of positive integers representing the Numfluffs and an integer K. Your task is to determine the length of the longest contiguous subarray (group) where the sum of the Numfluffs\' numbers is divisible by K. Input: First line contains an integer T, the number of test cases. Each test case contains: - An integer N, the number of Numfluffs. - An integer K, the magical number. - An array of N positive integers representing the Numfluffs. Output: For each test case, print the length of the longest contiguous subarray where the sum of the numbers is divisible by K. Constraints: 1 ≤ T ≤ 20 1 ≤ N ≤ 100000 1 ≤ K ≤ 1000 1 ≤ array elements ≤ 100000 SAMPLE INPUT 2 5 3 1 2 3 4 1 6 5 4 1 3 2 8 16 SAMPLE OUTPUT 3 5","solution":"def longest_subarray_divisible_by_k(t, test_cases): Returns the length of the longest contiguous subarray where the sum of the numbers is divisible by K. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each test case with 3 elements - N (int), K (int), and list of N positive integers. Returns: list of int: Lengths of the longest contiguous subarray for each test case. results = [] for case in test_cases: n, k, array = case prefix_sum_mod = {} prefix_sum = 0 max_length = 0 for i in range(n): prefix_sum += array[i] mod = prefix_sum % k if mod == 0: max_length = i + 1 if mod in prefix_sum_mod: max_length = max(max_length, i - prefix_sum_mod[mod]) else: prefix_sum_mod[mod] = i results.append(max_length) return results"},{"question":"You are given an array of non-negative integers `arr` and an integer `k`. Your task is to find the maximum possible sum of any subarray of length `k`. A subarray is a contiguous part of the array. You need to implement a function `maxSubarraySum` that takes two arguments: - `arr`: the array of non-negative integers. - `k`: the length of the subarray. The function should return the maximum possible sum of any subarray of length `k`. Input: - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the array `arr`. - The second line contains `n` non-negative integers `arr[i]` (0 ≤ arr[i] ≤ 10^4). - The third line contains an integer `k` (1 ≤ k ≤ n). Output: - Output a single integer — the maximum possible sum of any subarray of length `k`. Examples Input: 5 1 2 3 4 5 3 Output: 12 Input: 6 4 1 1 4 2 3 2 Output: 6 Input: 4 2 1 5 1 1 Output: 5 Note: In the first example, the subarray with the maximum sum of length `k=3` is `[3,4,5]` giving a sum of 3 + 4 + 5 = 12. In the second example, the subarray with the maximum sum of length `k=2` is `[4,2]` giving a sum of 4 + 2 = 6. In the third example, for k=1, the maximum possible sum is the maximum element of the array which is 5.","solution":"def maxSubarraySum(arr, k): Returns the maximum possible sum of any subarray of length k. n = len(arr) if n == 0 or k > n: return 0 # Calculate the sum of the first window (first k elements) current_sum = sum(arr[:k]) max_sum = current_sum # Use a sliding window technique to calculate sums of subsequent windows for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Emma is an artist and she is working on a digital grid art project. She wants to fill an `n x m` grid with colors. Each cell of the grid can be painted with one of three colors: A, B, or C. Emma wants to ensure that the painting rules are adhered to: no two adjacent cells (sharing an edge) should have the same color. Help Emma determine if it’s possible to fill the grid according to the rules. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid respectively. Output Print \\"YES\\" (without quotes) if it is possible to fill the grid according to the rules. Otherwise print \\"NO\\" (without quotes). You can print each letter in any case (upper or lower). Examples Input 2 2 Output YES Input 3 3 Output YES Input 1 5 Output YES Input 4 4 Output YES Note In the first sample, the grid can be colored as follows: A B B A In the second sample, the grid can be colored as follows: A B A B A B A B A In the third sample, the grid can be colored as follows: A B A B A In the fourth sample, the grid can be colored as follows: A B A B B A B A A B A B B A B A","solution":"def can_fill_grid(n, m): Determines if it\'s possible to fill an n x m grid according to the rules. No two adjacent cells (sharing an edge) should have the same color. return \\"YES\\""},{"question":"You are tasked with creating a validation algorithm for a new online registration form that users will fill out. The form collects various data points, including a user\'s name, age, email address, and a password. Specific validation rules need to be applied to ensure data integrity and compliance with given standards. Here are the validation rules: - The name should only contain alphabetic characters (both uppercase and lowercase) and should be at least 3 characters long. Usernames are case-insensitive (i.e., \'Alice\' and \'alice\' are considered the same). - The age should be an integer between 18 and 65, inclusive. - The email address must follow the standard email format: it should contain exactly one \'@\' symbol, at least one period \'.\', and no spaces. The domain should be one of the following: gmail.com, yahoo.com, or outlook.com (e.g., user@gmail.com is valid, user@company.com is not). - The password must meet these requirements: - At least 8 characters long. - Include at least one uppercase alphabetic character. - Include at least one lowercase alphabetic character. - Include at least one numeric digit. - Include at least one special character from the set {!, @, #, , %, ^, &, *}. If any validation rule is violated, the respective error message should be given. Validate each rule one by one and print the corresponding error message, if found, in the following order: Name, age, email, and password. If all the fields are valid, print \\"Registration successful\\". Input The input consists of several lines. Each line contains four space-separated fields: * name age email password The end of input is indicated by a line containing \\"END\\". Output For each line of input, based on the given data, the output may be one of the following: * \\"Invalid name.\\" if the username rule is violated. * \\"Invalid age.\\" if the age rule is violated. * \\"Invalid email.\\" if the email rule is violated. * \\"Invalid password.\\" if the password rule is violated. * \\"Registration successful.\\" if all fields are valid. Example Input John 25 john.doe@gmail.com P@ssw0rd! JaneDoe 17 jane.doe@yahoo.com Secret1! Alice 28 alice.smith@gmail.com p@ssw0rd Bob 30 bob.jones@outlook.net S3cr3tpassword Sarah 22 sarah.connor@outlook.com Sarah@1997 END Output Registration successful. Invalid age. Invalid password. Invalid email. Invalid password.","solution":"import re def validate_registration_data(name, age, email, password): Validates the registration data according to the rules specified. Returns a string indicating whether the registration is successful or which field is invalid. # Validate name if not (name.isalpha() and len(name) >= 3): return \\"Invalid name.\\" # Validate age if not (age.isdigit() and 18 <= int(age) <= 65): return \\"Invalid age.\\" # Validate email email_regex = re.compile(r\\"^[w.-]+@(?:gmail.com|yahoo.com|outlook.com)\\") if not email_regex.match(email): return \\"Invalid email.\\" # Validate password if len(password) < 8: return \\"Invalid password.\\" if not any(char.isupper() for char in password): return \\"Invalid password.\\" if not any(char.islower() for char in password): return \\"Invalid password.\\" if not any(char.isdigit() for char in password): return \\"Invalid password.\\" if not any(char in \\"!@#%^&*\\" for char in password): return \\"Invalid password.\\" # If all validations pass return \\"Registration successful.\\" def process_input_data(input_lines): Processes multiple lines of input data, validates them, and prints the appropriate message for each line. for line in input_lines: if line.strip() == \\"END\\": break name, age, email, password = line.split() print(validate_registration_data(name, age, email, password)) # Example usage with input lines input_lines = [ \\"John 25 john.doe@gmail.com P@ssw0rd!\\", \\"JaneDoe 17 jane.doe@yahoo.com Secret1!\\", \\"Alice 28 alice.smith@gmail.com p@ssw0rd\\", \\"Bob 30 bob.jones@outlook.net S3cr3tpassword\\", \\"Sarah 22 sarah.connor@outlook.com Sarah@1997\\", \\"END\\" ] process_input_data(input_lines)"},{"question":"Consider a network of computers where certain pairs are directly connected by cables. You are given the number of computers and a list of pairs of computers that are directly connected. Two computers are said to be connected if there is a direct cable between them. Your task is to determine the minimum number of cables that need to be added to ensure that every computer in the network is connected directly or indirectly to every other computer (i.e., the network becomes connected). Input - The first line contains two integers `n` (1 ≤ n ≤ 100) and `m` (0 ≤ m ≤ n*(n-1)/2), where `n` is the number of computers and `m` is the number of existing direct connections. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) indicating that computers `u` and `v` are directly connected by a cable. Output - A single integer representing the minimum number of additional cables required to connect the entire network. Examples Input 5 3 1 2 2 3 4 5 Output 1 Input 5 1 1 2 Output 3","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def min_cables_to_add(n, m, connections): if n == 1: return 0 parent = [i for i in range(n)] rank = [0] * n for u, v in connections: union(parent, rank, u-1, v-1) # Counting the number of connected components root_set = set() for i in range(n): root_set.add(find(parent, i)) # The number of additional cables needed additional_cables = len(root_set) - 1 return additional_cables"},{"question":"You are given an undirected graph represented as an adjacency list, in which each node contains a lowercase English letter as its value. Your task is to determine if there exists a path between any two nodes such that the concatenation of all node values along the path forms a palindrome. A palindrome is a string that reads the same backward as forward, for example, `madam` or `racecar`. Input The graph is given as input in the following format: - The first line contains two integers, N (the number of nodes) and M (the number of edges). - The second line contains a space-separated string of N lowercase English letters where the i-th letter corresponds to the value of the i-th node (0-indexed). - The following M lines each contain two integers u and v denoting an edge between nodes u and v. Output Print \\"YES\\" if there exists at least one path in the graph such that the concatenation of all node values along the path forms a palindrome, otherwise print \\"NO\\". Constraints * 1 leq N leq 10^5 * 0 leq M leq 2 cdot 10^5 Examples Input 5 5 abcba 0 1 1 2 2 3 3 4 4 0 Output YES Input 3 2 abc 0 1 1 2 Output NO","solution":"from collections import defaultdict, deque def is_palindrome(s): Helper function to check if a given string is a palindrome. return s == s[::-1] def dfs(graph, visited, node, path, values, result): Depth-first search to find if any path forms a palindrome. if result[0]: # If a palindrome path is already found, no need to continue. return visited[node] = True path.append(values[node]) current_path_string = \'\'.join(path) if len(path) > 1 and is_palindrome(current_path_string): result[0] = True return for neighbor in graph[node]: if not visited[neighbor]: dfs(graph, visited, neighbor, path, values, result) visited[node] = False path.pop() def has_palindrome_path(N, M, node_values, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * N path = [] result = [False] for i in range(N): if not visited[i]: dfs(graph, visited, i, path, node_values, result) if result[0]: break return \\"YES\\" if result[0] else \\"NO\\""},{"question":"In the world of coding, there are many interesting ways to manipulate numbers. One such way is reversing the digits of a number. John, a programmer, is fascinated by such number manipulations and came up with an interesting problem for his coding club. The problem statement is as follows: John has N numbers and he is interested in reversing each number and summing the digits of the reversed number. As a moderator, you need to prepare the input and output format for John\'s problem and write a program to solve it. Given a sequence of numbers, you need to reverse each of the numbers and then sum the digits of the reversed number. You need to prepare the program to print the sum of digits for each of the reversed numbers. Input: - The first line of input contains an integer N, denoting the number of numbers. - The second line contains N integers, separated by spaces. Output: - Print N integers, each representing the sum of digits of the reversed number corresponding to each input number. Constraints: 1 ≤ N ≤ 100 1 ≤ Number ≤ 10^9 Example: Input: 3 23 456 789 Output: 5 15 24 Explanation: - 23 reversed is 32, and the sum of digits is 3 + 2 = 5. - 456 reversed is 654, and the sum of digits is 6 + 5 + 4 = 15. - 789 reversed is 987, and the sum of digits is 9 + 8 + 7 = 24.","solution":"def sum_of_reversed_digits(numbers): Returns a list of sums of digits of reversed numbers. Parameters: numbers (list of int): List of integers to process. Returns: list of int: List of summed digits of reversed numbers. result = [] for number in numbers: reversed_number = int(str(number)[::-1]) sum_of_digits = sum(int(digit) for digit in str(reversed_number)) result.append(sum_of_digits) return result"},{"question":"Alan is playing a puzzle game where he has to form the longest possible palindrome by rearranging characters of a given string. You need to write a function to help Alan determine the longest palindrome length he can achieve from each string. Input: - The first line contains a single integer T denoting the number of test cases. - Each of the next T lines contains a single string for which Alan wants to find the longest palindromic length. Output: - For each test case, output a single integer denoting the length of the longest palindrome that can be formed from the given string. Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100000 SAMPLE INPUT 2 abccccdd aabcd SAMPLE OUTPUT 7 3 Explanation: - For the string \\"abccccdd\\": The longest palindrome is \\"dccaccd\\", which has a length of 7. - For the string \\"aabcd\\": The longest palindrome is \\"aba\\" or \\"cdc\\", each has a length of 3.","solution":"def longest_palindrome_length(s): Returns the longest length of a palindrome that can be formed from the given string s. from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length def solve(T, test_cases): results = [] for case in test_cases: results.append(longest_palindrome_length(case)) return results"},{"question":"Mister C has a peculiar printer that can print strings using only lowercase English letters. Mister C loves palindrome strings and has come up with a new game involving his printer. The game consists of an initial string s of length n (1 ≤ n ≤ 200,000). The goal is to determine if one can rearrange the characters of s such that it becomes a palindrome by only performing a specific type of operation multiple times. The operation is defined as follows: choose two distinct indices i and j (1 ≤ i, j ≤ n), and swap the characters at those positions. Mister C realized that there are only certain cases where a string can be rearranged into a palindrome: 1. The string must have at most one character with an odd frequency. 2. If all characters have even frequencies, the rearrangement is straightforward. Mister C is curious if a given string s can be rearranged into a palindrome using the allowed operation any number of times. Note: A palindrome is a string that reads the same forwards and backwards. Input First and only line contains the string s. Output Output \\"YES\\" if the string can be rearranged into a palindrome, otherwise output \\"NO\\". Examples Input civic Output YES Input ivicc Output YES Input hello Output NO Input aabbcc Output YES Note In the first example, \\"civic\\" is already a palindrome. In the second example, \\"ivicc\\" can be rearranged to \\"civic\\" or \\"vicic\\" (both are palindromes). In the third example, \\"hello\\" cannot be rearranged to form a palindrome. In the fourth example, \\"aabbcc\\" can be rearranged to \\"abccba\\" or \\"cbaabc\\" (both are palindromes).","solution":"from collections import Counter def can_rearrange_to_palindrome(s: str) -> str: Determine if the string can be rearranged into a palindrome. :param s: The input string :return: \\"YES\\" if the string can be rearranged into a palindrome, otherwise \\"NO\\" char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given an integer N representing the number of sides of a regular polygon. Your task is to determine the type of regular polygon based on the number of sides according to the following: - If N is 3, print \\"Triangle\\". - If N is 4, print \\"Square\\". - If N is 5, print \\"Pentagon\\". - If N is 6, print \\"Hexagon\\". - If N is 7, print \\"Heptagon\\". - If N is 8, print \\"Octagon\\". - If N is 9, print \\"Nonagon\\". - If N is 10, print \\"Decagon\\". - If N is not in the range 3 to 10 (inclusive), print \\"Polygon not supported\\". Constraints * 3 ≤ N ≤ 10 Input Input is given from Standard Input in the following format: N Output Print the type of regular polygon based on the given number of sides. Examples Input 3 Output Triangle Input 5 Output Pentagon","solution":"def polygon_type(N): Given the number of sides of a regular polygon, return the type of polygon. if N == 3: return \\"Triangle\\" elif N == 4: return \\"Square\\" elif N == 5: return \\"Pentagon\\" elif N == 6: return \\"Hexagon\\" elif N == 7: return \\"Heptagon\\" elif N == 8: return \\"Octagon\\" elif N == 9: return \\"Nonagon\\" elif N == 10: return \\"Decagon\\" else: return \\"Polygon not supported\\""},{"question":"A certain university maintains a special hall of fame for its graduates. Each year, the university holds a banquet where they announce one new inductee into this hall of fame. Graduates are considered for induction based on the order they were nominated, and each nomination happens exactly at some integer year. You are given a sequence of years (text{years}) when nominations were made, and you are tasked to determine the sequence of years when an inductee was announced. The sequence of announcements follows these rules: 1. If a nomination is made in year (y), the new inductee is announced in the next year ((y + 1)). 2. If multiple nominations occur in the same year, the inductee announcement for that year is done in the subsequent year only once. Write a function `hall_of_fame_announcements(nominations: List[int]) -> List[int]` that processes the given list of years and returns a list of years when new inductees were announced, sorted in ascending order. # Example Input: ```python nominations = [1995, 1995, 1996, 1996, 2000] ``` Output: ```python [1996, 1997, 2001] ``` Input: ```python nominations = [2020, 2021, 2021, 2021, 2022, 2023] ``` Output: ```python [2021, 2022, 2023, 2024] ``` # Explanation In the first example: - Nominations in 1995 result in a single announcement in 1996. - Nominations in 1996 result in a single announcement in 1997. - Nominations in 2000 result in a single announcement in 2001. In the second example: - Nomination in 2020 results in announcement in 2021. - Nominations in 2021 result in a single announcement in 2022. - Nomination in 2022 results in announcement in 2023. - Nomination in 2023 results in announcement in 2024. # Constraints - The list of nominations will have at most (10^5) elements. - Each year mentioned in nominations will be an integer within a reasonable range (e.g., 1900 to 2100).","solution":"from typing import List def hall_of_fame_announcements(nominations: List[int]) -> List[int]: Processes the given list of nominations years and returns a list of years when new inductees were announced, sorted in ascending order. return sorted(set(year + 1 for year in nominations))"},{"question":"You are given an array of n integers and an integer k. Your task is to determine if there exists a pair of distinct indices i and j (1 ≤ i < j ≤ n) such that their corresponding array values a_i and a_j satisfy the condition: a_i + a_j = k. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 10^5, -2⋅10^9 ≤ k ≤ 2⋅10^9) — the number of integers in the array and the target sum k. The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). Output Print \\"YES\\" if there exist such indices i and j, otherwise print \\"NO\\". Examples Input 5 9 2 7 11 15 1 Output YES Input 4 10 1 2 3 4 Output NO Note In the first example, the pair of indices (1, 2) corresponds to array values 2 and 7, which sum up to 9. Thus, the output is \\"YES\\". In the second example, there is no pair of indices whose corresponding array values sum up to 10, hence the output is \\"NO\\".","solution":"def has_pair_with_sum(n, k, arr): Determine if there exists a pair of distinct indices i and j such that their corresponding array values satisfy the condition: a_i + a_j = k. Parameters: n (int): the number of integers in the array k (int): the target sum arr (list of int): the array of integers Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\" seen = set() for num in arr: complement = k - num if complement in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Write a function which simulates a stack with the following operations: * `push(x)`: Push the integer `x` onto the stack. * `pop()`: Remove the element on the top of the stack. * `inc(k, x)`: Add `x` to each of the bottom `k` elements of the stack. The function should process a sequence of operations and output the stack’s state after each operation. Constraints: * 1 ≤ q ≤ 100000 (number of operations) * 1 ≤ x ≤ 1000 (value of element and increment) * 1 ≤ k ≤ n (number of elements from bottom to increment) * Initial stack is empty. Input: q op_1 op_2 : op_q Each operation `op_i` is given in one of the following formats: `push x` `pop` `inc k x` Output: For each operation, print the stack’s content in a single space-separated line. Example: Input: 8 push 3 push 5 inc 2 7 push 2 pop inc 1 1 pop pop Output: 3 3 5 10 12 10 12 2 10 12 11 12 12 (empty line)","solution":"class StackSimulation: def __init__(self): self.stack = [] def push(self, x): self.stack.append(x) self.print_stack() def pop(self): if self.stack: self.stack.pop() self.print_stack() def inc(self, k, x): for i in range(min(k, len(self.stack))): self.stack[i] += x self.print_stack() def process_operations(self, operations): for operation in operations: parts = operation.split() if parts[0] == \\"push\\": self.push(int(parts[1])) elif parts[0] == \\"pop\\": self.pop() elif parts[0] == \\"inc\\": self.inc(int(parts[1]), int(parts[2])) def print_stack(self): if self.stack: print(\\" \\".join(map(str, self.stack))) else: print() # Example usage: # sim = StackSimulation() # operations = [\\"push 3\\", \\"push 5\\", \\"inc 2 7\\", \\"push 2\\", \\"pop\\", \\"inc 1 1\\", \\"pop\\", \\"pop\\"] # sim.process_operations(operations)"},{"question":"Write a program that reads two integers and determines if the first integer is a multiple of the second integer. Constraints * 1 ≤ a, b ≤ 1000 Input Two integers a and b are given in a line separated by a single space. Output Print \\"Yes\\" if the first integer is a multiple of the second integer, otherwise print \\"No\\". Example Input 10 2 Output Yes Input 10 3 Output No","solution":"def is_multiple(a, b): Determines if the first integer (a) is a multiple of the second integer (b). return \\"Yes\\" if a % b == 0 else \\"No\\""},{"question":"You are given an undirected graph with n vertices and m edges. Each edge connects two different vertices and has an integer weight. The graph might contain loops or multiple edges with different weights. You want to choose a subset of the edges such that it forms a tree that spans all the vertices. A tree is a connected acyclic graph. The goal is to minimize the weight of the selected edges. This is a classical Minimum Spanning Tree (MST) problem. Your task is to find the weight of the Minimum Spanning Tree of the given graph. Input The first line of input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2*10^5) — the number of vertices and edges in the graph, respectively. The next m lines describe the edges, each containing three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), where u and v are the vertices connected by the edge, and w is the weight of the edge. Output Print a single integer — the weight of the Minimum Spanning Tree. If no spanning tree exists, output -1. Examples Input 4 4 1 2 3 2 3 1 3 4 4 4 1 2 Output 6 Input 4 3 1 2 3 1 3 4 1 4 5 Output 12 Input 3 1 1 2 1 Output -1 Note In the first example, one possible Minimum Spanning Tree (MST) would include the edges (1, 2), (2, 3), and (4, 1) with weights 3, 1, and 2 respectively, giving the total weight 6. In the second example, one possible MST would include all the given edges (1, 2), (1, 3), and (1, 4) giving a total weight of 12. In the third example, it is impossible to connect all vertices with the given edges, hence the output is -1.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def kruskal_minimum_spanning_tree(n, edges): edges.sort(key=lambda x: x[2]) uf = UnionFind(n) mst_weight = 0 edges_used = 0 for u, v, w in edges: if uf.find(u) != uf.find(v): uf.union(u, v) mst_weight += w edges_used += 1 if edges_used == n - 1: return mst_weight else: return -1 def solve(n, m, edge_list): if n == 1: return 0 if m == 0 else -1 edges = [(u - 1, v - 1, w) for u, v, w in edge_list] return kruskal_minimum_spanning_tree(n, edges)"},{"question":"Sophia is trying to understand the intricacies of number sequences and has stumbled upon an interesting problem. She wants to find out the length of the longest arithmetic subsequence within a given list of integers. A subsequence of a sequence is derived by deleting some or none of the elements without changing the order of the remaining elements. An arithmetic subsequence is a sequence of numbers such that the difference between any two consecutive numbers is the same. Sophia needs your help to write a program that finds the length of the longest arithmetic subsequence. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1,000) — the number of elements in the list. The next line contains n integers ai (1 ≤ ai ≤ 10^6), where the i-th number is equal to the i-th element of the list. Output Print a single line containing the length of the longest arithmetic subsequence in the given list. Example Input 6 2 4 6 10 8 12 Output 4 Note Consider the first sample: The longest arithmetic subsequence is [2, 4, 6, 8] with a difference of 2 between consecutive elements. Thus, the answer is 4.","solution":"def longest_arithmetic_subsequence(arr): Function to find the length of the longest arithmetic subsequence in a given list of integers. Parameters: arr (list): List of integers. Returns: int: Length of the longest arithmetic subsequence. n = len(arr) if n <= 1: return n # To store the lengths of arithmetic subsequences with different differences dp = [{} for _ in range(n)] max_length = 1 for i in range(1, n): for j in range(i): diff = arr[i] - arr[j] # if the difference already exists in dp[j], set the same in dp[i] with +1, else start with 2 (arr[j] and arr[i]) dp[i][diff] = dp[j].get(diff, 1) + 1 # update the maximum length found max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"You have been given an integer array `A` of length `N`. Your task is to compute the maximum absolute difference between any two elements in the array. Constraints * 2 leq N leq 100 * -10^3 leq A[i] leq 10^3 Input Input is given from Standard Input in the following format: ``` N A1 A2 A3 ... AN ``` Output Print the maximum absolute difference between any two elements in the array. Examples Input ``` 5 1 9 -10 3 2 ``` Output ``` 19 ``` Input ``` 3 -5 -2 -3 ``` Output ``` 3 ``` Input ``` 4 4 3 2 3 ``` Output ``` 2 ```","solution":"def max_absolute_difference(arr): Computes the maximum absolute difference between any two elements in the array. Args: arr (list of int): The input array of integers. Returns: int: The maximum absolute difference between any two elements. max_element = max(arr) min_element = min(arr) return abs(max_element - min_element)"},{"question":"You are part of a team developing an advanced calculator. Your task is to implement a module for evaluating mathematical expressions written in postfix notation (also known as Reverse Polish Notation or RPN). In postfix notation, operators follow their operands. For example, the expression \\"3 4 +\\" would be interpreted as \\"3 + 4\\". Expressions are evaluated from left to right. The algorithm to evaluate a postfix expression is as follows: 1. Create an empty stack. 2. Read the postfix expression from left to right. 3. For each token in the expression: a. If the token is a number, push it onto the stack. b. If the token is an operator, pop the required number of operands (for example, two for +, -, *, /) from the stack. Apply the operator to the operands, and push the result back onto the stack. 4. When the expression is fully read, the result should be the only value remaining in the stack. You need to implement the function `evaluate_postfix(expression: str) -> int`, which takes a string containing a postfix expression with single-digit integers and the operators \\"+\\" (addition), \\"-\\" (subtraction), \\"*\\" (multiplication), and \\"/\\" (integer division). Each token in the expression is separated by a single space. # Input - A single string, the postfix expression. # Output - An integer, the result of evaluating the postfix expression. # Constraint - The postfix expression will be valid and properly formatted. # Example ```python print(evaluate_postfix(\\"3 4 +\\")) # Output: 7 print(evaluate_postfix(\\"5 1 2 + 4 * + 3 -\\")) # Output: 14 print(evaluate_postfix(\\"2 3 * 4 5 * +\\")) # Output: 26 print(evaluate_postfix(\\"7 3 2 + *\\")) # Output: 35 ``` # Note 1. For \\"3 4 +\\" the result is 7. 2. For \\"5 1 2 + 4 * + 3 -\\", the evaluation steps are: - Push 5 (stack: [5]) - Push 1 (stack: [5, 1]) - Push 2 (stack: [5, 1, 2]) - Apply + to 1 and 2 (stack: [5, 3]) - Push 4 (stack: [5, 3, 4]) - Apply * to 3 and 4 (stack: [5, 12]) - Apply + to 5 and 12 (stack: [17]) - Push 3 (stack: [17, 3]) - Apply - to 17 and 3 (stack: [14])","solution":"def evaluate_postfix(expression: str) -> int: Evaluates a postfix expression and returns the result. Args: expression (str): A string containing the postfix expression. Returns: int: The result of the postfix expression. stack = [] tokens = expression.split() for token in tokens: if token.isdigit(): stack.append(int(token)) else: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(int(a / b)) # Ensure integer division return stack[0]"},{"question":"In this problem, you need to determine the minimum number of operations required to change one string into another. The allowable operations are: 1. Insert a character 2. Delete a character 3. Replace a character Given two strings, you need to write a function to calculate the minimum number of edits (operations) required to transform one string into the other. For example: - The minimum number of edits required to convert \\"kitten\\" to \\"sitting\\" is 3. (kitten -> sitten -> sittin -> sitting) - The minimum number of edits required to convert \\"flaw\\" to \\"lawn\\" is 2. (flaw -> law -> lawn) Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains two strings, separated by a space. Output: For each test case, output a single line containing the minimum number of edits required. Constraints: 1 ≤ T ≤ 1,000 1 ≤ length of both strings ≤ 1000 Example Input: 3 kitten sitting flaw lawn intention execution Output: 3 2 5 Explanation: For the first test case, there are three operations required: \'kitten\' -> \'sitten\' -> \'sittin\' -> \'sitting\'. For the second test case, there are two operations required: \'flaw\' -> \'law\' -> \'lawn\'. For the third test case, there are five operations required: \'intention\' -> \'intexion\' -> \'edtion\' -> \'ecution\' -> \'exection\' -> \'execution\'.","solution":"def min_edit_distance(str1, str2): Returns the minimum number of operations required to convert str1 into str2. The allowed operations are insert, delete, or replace a character. m = len(str1) n = len(str2) # Create a DP table to store the number of operations required dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Minimum operations = j (all characters of str2 need to be inserted) elif j == 0: dp[i][j] = i # Minimum operations = i (all characters of str1 need to be deleted) elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters are the same, no new operation needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove operation dp[i][j - 1], # Insert operation dp[i - 1][j - 1]) # Replace operation return dp[m][n] def process_test_cases(test_cases): results = [] for str1, str2 in test_cases: result = min_edit_distance(str1, str2) results.append(result) return results"},{"question":"In a certain office, employees communicate either directly or indirectly. An employee can pass a message to another employee either orally (direct contact) or through an intermediate employee. Your task is to develop a program that determines the minimum number of employees needed to pass a message to all employees in the office. Constraints * If employee i can communicate with employee j, then employee j can communicate with employee i. * There is at least one way to communicate with all employees. * Each employee can be represented by a unique integer. Input First line: an integer n (the number of employees). Next n lines: space-separated integers representing the employees with whom the ith employee can communicate. The list for each employee will be on a separate line. Output Print an integer representing the minimum number of employees required to start the communication such that the message reaches all employees. Example Input 4 1 0 2 1 3 2 Output 1","solution":"def find_minimum_starting_employees(n, communication): Finds the minimum number of employees required to start the communication such that the message reaches all employees. Parameters: n (int): The number of employees. communication (list of list of int): Adjacency list representing communication channels. Returns: int: Minimum number of employees required to start the communication. visited = [False] * n def dfs(emp): stack = [emp] while stack: current = stack.pop() for neighbor in communication[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) start_count = 0 for emp in range(n): if not visited[emp]: dfs(emp) start_count += 1 return start_count"},{"question":"You are given an MxN grid with each cell containing a non-negative integer amount of gold. You start at the top-left cell and want to reach the bottom-right cell. At each step, you can move to the right or down. Your aim is to collect the maximum amount of gold along the way. Determine the maximum amount of gold you can collect if you follow the optimal path from the top-left to the bottom-right. Input : First line of input contains two integers, M and N — the number of rows and columns in the grid, respectively. The following M lines each contain N integers representing the grid’s cells. Output : A single integer - the maximum amount of gold that can be collected. Constraints : 1 ≤ M, N ≤ 1000 0 ≤ grid[i][j] ≤ 10^6 SAMPLE INPUT 3 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT 12 Explanation By following the path 1 → 3 → 5 → 2 → 1, the maximum amount of gold collected is 12.","solution":"def max_gold(M, N, grid): Returns the maximum amount of gold that can be collected from the top-left to the bottom-right cell in the grid by moving only right or down. Parameters: - M: int, number of rows in the grid - N: int, number of columns in the grid - grid: List[List[int]], MxN grid containing amounts of gold Returns: - int, maximum amount of gold collectible # Create a memoization table to store results of subproblems dp = [[0]*N for _ in range(M)] # Initialize the starting position dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the memoization table in a bottom-up manner for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The result is in the bottom-right cell return dp[M-1][N-1]"},{"question":"You are given an integer n and a list lst of n integers. Your task is to verify whether it is possible to reorder lst such that for every pair of adjacent elements, their greatest common divisor (gcd) is strictly greater than 1. If it is possible, output “YES”, otherwise output “NO”. Input - The first line of the input contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in lst. - The second line contains n integers lst_1, lst_2, ..., lst_n (1 ≤ lst_i ≤ 10^9), where lst_i is the i-th element of lst. Output - Output \\"YES\\" if it is possible to reorder lst such that the gcd of every pair of adjacent elements is strictly greater than 1, otherwise output \\"NO\\". Examples Input 4 4 6 8 2 Output YES Input 3 3 5 7 Output NO Input 5 18 24 36 12 6 Output YES","solution":"import math from collections import Counter def can_reorder_for_gcd_greater_than_1(n, lst): Determine whether it\'s possible to reorder lst such that the GCD of every pair of adjacent elements is strictly greater than 1. :param n: int - the number of elements in the list :param lst: list of int - the list of integers :return: str - \\"YES\\" if it\'s possible, otherwise \\"NO\\" def gcd(a, b): while b: a, b = b, a % b return a # Count frequencies of numbers freq = Counter(lst) # Check if there is any number that appears at least twice for num in freq: if freq[num] > 1: return \'YES\' # Check pairwise GCDs for i in range(n): for j in range(i + 1, n): if gcd(lst[i], lst[j]) > 1: return \'YES\' return \'NO\'"},{"question":"In an ancient kingdom, the king has a special ritual to determine his new advisor. The poor candidates are given a large collection of gemstones, and every candidate has to determine the total value of gemstones within a certain range of positions every day. But over time, the positions of gemstones can change, which makes it harder. You are given a list of gemstones, where each gemstone is represented with its unique value (an integer). The candidates are required to handle two types of operations: 1. **Update Operation**: Mark a gemstone at a particular position with a new value. 2. **Query Operation**: Calculate the sum of values of gemstones from position `l` to position `r`. Your task is to implement a program that performs these operations efficiently. Input - The first line contains an integer `N`, the number of gemstones. - The second line contains `N` space-separated integers representing the values of gemstones. - The third line contains an integer `Q`, the number of operations. - The next `Q` lines contain the operations. Each operation can be either: - \\"UPDATE x y\\" where `x` is the position of the gemstone to be updated (0-indexed), and `y` is the new value. - \\"QUERY l r\\" where `l` and `r` are the inclusive range of positions over which to calculate the sum of gemstone values. Output For each query, output the sum of values in the given range. Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ Gemstone value, x, y ≤ 10^9 - 0 ≤ l ≤ r < N Example Input: 5 1 2 3 4 5 3 QUERY 1 3 UPDATE 2 10 QUERY 1 3 Output: 9 16","solution":"class GemstoneRitual: def __init__(self, gemstones): self.n = len(gemstones) self.tree = [0] * (2 * self.n) self.build(gemstones) def build(self, gemstones): # Build the segment tree for i in range(self.n): self.tree[self.n + i] = gemstones[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, pos, value): # Update the value at index pos pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def query(self, left, right): # Query the sum in the range [left, right] left += self.n right += self.n + 1 sum = 0 while left < right: if left % 2: sum += self.tree[left] left += 1 if right % 2: right -= 1 sum += self.tree[right] left //= 2 right //= 2 return sum def process_operations(n, gemstones, operations): ritual = GemstoneRitual(gemstones) result = [] for operation in operations: if operation[0] == \\"UPDATE\\": pos = int(operation[1]) value = int(operation[2]) ritual.update(pos, value) elif operation[0] == \\"QUERY\\": left = int(operation[1]) right = int(operation[2]) result.append(ritual.query(left, right)) return result"},{"question":"Suppose you are working on a warehouse management system. The warehouse is represented as a grid of cells with n rows and m columns. Each cell is empty (\'.\') or blocked (\'#\'). You need to ensure that robots can move from any empty cell to any other empty cell within the warehouse by moving only up, down, left, or right, but can\'t move through blocked cells. As the warehouse manager, you need to mark whether the warehouse is valid, meaning whether there exists such a path between any two empty cells. Input: - The first line contains two positive integers n and m (1 ≤ n, m ≤ 2 000), representing the number of rows and columns in the warehouse. - Each of the next n lines contains m characters \'.\' or \'#\', representing the warehouse grid. Output: - A single line containing \\"YES\\" if there is a way for robots to move between any two empty cells, otherwise \\"NO\\". Examples: Input: 3 3 ... .#. ... Output: YES Input: 3 3 ..# .#. ..# Output: NO Input: 2 2 .# #. Output: NO Note: In the first example, there are no blocked cells hindering the movement of robots, hence the output is \\"YES\\". In the second example, there is a block in the middle column that splits the warehouse into separated parts of empty cells. Therefore, the output is \\"NO\\". In the third example, both cells are separated by blocked cells making it impossible for the robot to move, leading to the output \\"NO\\".","solution":"def is_warehouse_valid(n, m, grid): Checks if all empty cells (\'.\') in the warehouse grid are connected. Returns \\"YES\\" if connected, otherwise \\"NO\\". from collections import deque def bfs(start_x, start_y): queue = deque([(start_x, start_y)]) visited.add((start_x, start_y)) while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) # Step 1: Find any empty cell to start the BFS start_x = start_y = -1 for i in range(n): for j in range(m): if grid[i][j] == \'.\': start_x, start_y = i, j break if start_x != -1: break if start_x == -1: # There are no empty cells. return \\"YES\\" # Step 2: BFS to mark all reachable empty cells visited = set() bfs(start_x, start_y) # Step 3: Check if all empty cells are visited for i in range(n): for j in range(m): if grid[i][j] == \'.\' and (i, j) not in visited: return \\"NO\\" return \\"YES\\""},{"question":"Given a rectangular grid of cells with dimensions n x m, you are tasked with finding all unique paths from the top-left corner to the bottom-right corner. You can only move right or down at any point in time. Write a function that returns the number of unique paths and another function that prints all possible unique paths. Each path should be represented as a sequence of coordinates. Input The input consists of two integers, n and m, which represent the number of rows and columns of the grid, respectively (1 ≤ n, m ≤ 10). Output First, output a single line containing the number of unique paths from the top-left to the bottom-right corner. Then, output each unique path on a new line. Each path should be described as a list of coordinate tuples (i, j) representing the cells from the top-left to the bottom-right corner. Sample Input 3 2 Output 3 [(0, 0), (0, 1), (1, 1), (2, 1)] [(0, 0), (1, 0), (1, 1), (2, 1)] [(0, 0), (1, 0), (2, 0), (2, 1)] Sample Input 2 2 Output 2 [(0, 0), (0, 1), (1, 1)] [(0, 0), (1, 0), (1, 1)] Explanation: For the first sample input, there are 3 unique paths from the top-left to the bottom-right corner of a 3x2 grid. The function should print the number of unique paths and then list all the paths. For the second sample input, there are 2 unique paths from the top-left to the bottom-right corner of a 2x2 grid. The function should again print the number of unique paths followed by the list of paths.","solution":"def unique_paths_count(n, m): from math import comb return comb(n + m - 2, n - 1) def unique_paths(n, m): def backtrack(path, i, j): if i == n - 1 and j == m - 1: paths.append(path + [(i, j)]) return if i < n - 1: backtrack(path + [(i, j)], i + 1, j) if j < m - 1: backtrack(path + [(i, j)], i, j + 1) paths = [] backtrack([], 0, 0) return paths # Example usage: n, m = 3, 2 print(unique_paths_count(n, m)) for path in unique_paths(n, m): print(path)"},{"question":"A group of friends is planning a hiking trip. They have a map that shows the elevations of various places along their planned route. They want to know whether they can complete the route without getting tired too quickly. Specifically, they want to avoid any downhill segments followed immediately by an uphill segment, as this takes extra effort. Write a program to determine if the route is smooth. A route is considered smooth if, after any downhill segment, the elevation either stays the same or keeps going down. If it goes down and then up again, it is considered not smooth. Input The first line of input contains an integer n (2 ≤ n ≤ 100) — the number of points along the route. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the elevations of these points in the order they will be visited. Output Print \\"YES\\" if the route is smooth, otherwise print \\"NO\\". Examples Input 5 1 2 3 2 4 Output NO Input 4 4 3 3 2 Output YES Note In the first example, the elevation goes up from 1 to 3, then down to 2, and then up again to 4. This makes the route not smooth, so the answer is \\"NO\\". In the second example, the elevation consistently goes down or stays the same, so the route is smooth, and the answer is \\"YES\\".","solution":"def is_route_smooth(n, elevations): Determines if the hiking route is smooth. :param n: int - number of points along the route. :param elevations: list of int - elevations of the points in order. :return: str - \\"YES\\" if the route is smooth, otherwise \\"NO\\". for i in range(1, n - 1): if elevations[i - 1] > elevations[i] < elevations[i + 1]: return \\"NO\\" return \\"YES\\" # Example usage: # print(is_route_smooth(5, [1, 2, 3, 2, 4])) # print(is_route_smooth(4, [4, 3, 3, 2]))"},{"question":"Given an array of distinct integers, determine the number of unique pairs (i, j) such that the sum of the two elements ai and aj is equal to a given target integer k. Each pair (i, j) must satisfy i < j. Input The first line contains two integers n and k (1 ≤ n ≤ 105, -109 ≤ k ≤ 109). The second line contains n distinct integers a1, a2, ..., an (-109 ≤ ai ≤ 109). The numbers in the lines are separated by single spaces. Output In a single line print the number of unique pairs (i, j) such that ai + aj = k and i < j. Examples Input 4 5 1 2 3 4 Output 2 Input 5 8 5 2 9 6 1 Output 1 Note In the first example, the pairs that sum to 5 are (1, 4) and (2, 3). Thus, the output is 2. In the second example, the only pair that sums to 8 is (2, 6). Hence, the output is 1.","solution":"def count_unique_pairs(n, k, arr): Returns the number of unique pairs (i, j) such that ai + aj = k and i < j. Parameters: n (int): Number of elements in the array. k (int): Target sum. arr (list of int): List of distinct integers. Returns: int: Number of unique pairs. # Create a dictionary to store counts of numbers seen = {} count = 0 for num in arr: target = k - num if target in seen: count += 1 seen[num] = True return count # Example usage: # print(count_unique_pairs(4, 5, [1, 2, 3, 4])) # Output should be 2 # print(count_unique_pairs(5, 8, [5, 2, 9, 6, 1])) # Output should be 1"},{"question":"You are given a set of M points on a 2D plane, each point with a unique identifier. Your task is to write a program that finds the largest rectangle (axis-aligned) that can be formed using any four points from this set. The rectangle\'s sides must be parallel to the x-axis and y-axis. If no rectangle can be formed, return -1. Input The input consists of a series of test cases, followed by a single line only containing a single zero, which indicates the end of input. Each test case begins with a line containing an integer M (4 ≤ M ≤ 10000), which indicates the number of points in the test case. M lines describing the points follow. Each of the M lines has three identifiers - a string P (1 ≤ |P| ≤ 20), and two integers X and Y (-10^4 ≤ X, Y ≤ 10^4) representing the x- and y-coordinates of the point. Output For each test case, output a single line containing the area of the largest rectangle that can be formed. If no rectangle can be formed, print -1. Example Input 5 A 0 0 B 0 2 C 1 2 D 2 0 E 2 2 4 F -1 -1 G -2 -2 H -3 -3 I 1 1 0 Output 4 -1","solution":"def largest_rectangle(points): Finds the largest rectangle that can be formed using any four points from the given set. The rectangle\'s sides must be parallel to the x-axis and y-axis. Args: points (list of tuples): List of points, each represented as a tuple (P, X, Y), where P is the unique identifier, X and Y are coordinates. Returns: int: The area of the largest rectangle, or -1 if no rectangle can be formed. from collections import defaultdict coord_map = defaultdict(list) # Step 1: Group points by their x-coordinates for P, X, Y in points: coord_map[X].append((P, Y)) # Step 2: Sort the Y-values for each group of X-coordinate for key in coord_map: coord_map[key].sort(key=lambda t: t[1]) max_area = -1 y_pairs = defaultdict(list) # Step 3: For each x-coordinate pair, find common y-coordinates x_coords = list(coord_map.keys()) for i in range(len(x_coords)): for j in range(i+1, len(x_coords)): x1 = x_coords[i] x2 = x_coords[j] common_ys = [] # Find common y-coordinates between two x-groups y_set_1 = set(y for _, y in coord_map[x1]) y_set_2 = set(y for _, y in coord_map[x2]) common_ys = sorted(list(y_set_1 & y_set_2)) for k in range(len(common_ys) - 1): y1 = common_ys[k] y2 = common_ys[k + 1] area = abs(x2 - x1) * abs(y2 - y1) if area > max_area: max_area = area return max_area def process_input(input_data): data = input_data.strip().split(\'n\') i = 0 results = [] while True: M = int(data[i]) if M == 0: break points = [] for j in range(1, M+1): P, X, Y = data[i+j].split() X, Y = int(X), int(Y) points.append((P, X, Y)) result = largest_rectangle(points) results.append(result) i += (M + 1) return results"},{"question":"You are working on designing a new parking facility to accommodate a specific number of cars. The facility will have a rectangular grid with an area of exactly n square units, where each car takes up one unit of space. Each side of the parking facility must be an integer, and you need to place the cars in such a way that the number of cars parked in rows and columns are maximized. Specifically, you aim to have the maximum number of cars in each row and each column. Your goal is to find the dimensions of the parking facility such that the difference between the length and the width of the rectangle is minimized. Input The first and only line of input contains an integer n (1 ≤ n ≤ 10^5), where n is the area of the parking facility in square units. Output Print two integers representing the dimensions of the parking facility (length and width) such that the difference between the length and width is minimized. Examples Input 30 Output 6 5 Input 12 Output 4 3 Input 1 Output 1 1 Note In the first example, the possible dimensions of the parking facility with an area of 30 square units are (1, 30), (2, 15), (3, 10), (5, 6). The dimensions (6, 5) have the minimum difference between length and width, which is 1. In the second example, the possible dimensions of the parking facility with an area of 12 square units are (1, 12), (2, 6), (3, 4). The dimensions (4, 3) have the minimum difference between length and width, which is 1. In the third example, the only possible dimension of the parking facility with an area of 1 square unit is (1, 1), which has a difference of 0.","solution":"def find_dimensions(n): Given the area of the parking facility, find the dimensions that minimize the difference between the length and the width of the rectangular facility. Parameters: n (int): the area of the parking facility Returns: tuple: dimensions (length, width) that minimize the difference between length and width for width in range(int(n ** 0.5), 0, -1): if n % width == 0: length = n // width return (length, width)"},{"question":"Given a string `s` representing a mathematical expression containing digits, the characters \'+\', \'-\', \'*\', \'/\', \'(\', and \')\', evaluate the expression and return its result as an integer. You may assume that: - The given expression is always valid. - Division between two integers should truncate toward zero. Note: - You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval`. Input The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 10^5), representing a valid mathematical expression. Output Output a single integer which is the result of evaluating the input expression. Examples Input ``` \\"3+2*2\\" ``` Output ``` 7 ``` Input ``` \\"3/2\\" ``` Output ``` 1 ``` Input ``` \\"3+5 / 2\\" ``` Output ``` 5 ``` Note In the first example, you should evaluate \\"3 + 2 * 2\\" which is equal to 3 + 4 = 7. In the second example, the result of \\"3/2\\" should be truncated towards zero, i.e., 1. In the third example, \\"5 / 2\\" should be truncated towards zero first, i.e., 2, and the result of \\"3 + 2\\" is 5.","solution":"def evaluate_expression(s): # Helper function to perform arithmetic operations def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return int(a / b) # truncate toward zero # Function to process the expression def process_expression(tokens): stack = [] num = 0 sign = \'+\' while tokens: token = tokens.pop(0) if token.isdigit(): num = num * 10 + int(token) if token == \'(\': num = process_expression(tokens) if (not token.isdigit() and token != \' \') or not tokens: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign in \'*/\': left = stack.pop() stack.append(operate(left, num, sign)) num = 0 sign = token if token == \')\': break return sum(stack) # Tokenize the string tokens = list(s.replace(\' \', \'\')) return process_expression(tokens)"},{"question":"You are given two arrays, `a` and `b`, of length `n` and `m` respectively. The task is to merge these two arrays into a single array such that the merged array is sorted in non-decreasing order. You are allowed to perform the merge and sorting operations in-place in one of the two original arrays. Input The first line of the input contains two integers `n` (1 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 1000) — the lengths of the arrays `a` and `b` respectively. The second line contains `n` space-separated integers `ai` (1 ≤ ai ≤ 10^9) — the elements of the array `a`. The third line contains `m` space-separated integers `bi` (1 ≤ bi ≤ 10^9) — the elements of the array `b`. Output Output the merged sorted array in a single line containing `n + m` space-separated integers. Examples Input 5 3 1 3 5 7 9 2 4 6 Output 1 2 3 4 5 6 7 9 Input 4 4 10 20 30 40 1 2 3 4 Output 1 2 3 4 10 20 30 40","solution":"def merge_and_sort_arrays(a, b): Merges two arrays a and b and sorts them in non-decreasing order. # Combine both arrays a.extend(b) # Sort the combined array a.sort() return a # Example usage: # n, m = 5, 3 # a = [1, 3, 5, 7, 9] # b = [2, 4, 6] # result = merge_and_sort_arrays(a, b) # print(result) # Output: [1, 2, 3, 4, 5, 6, 7, 9]"},{"question":"A large company needs to manage its employee IDs. Each employee has a unique integer ID, but due to a system error, the IDs have become unsorted and there might be duplicates. The company wants to sort the IDs and remove the duplicates to prepare for further processing. Your task is to help the company by writing a program that reads a list of employee IDs, sorts them in ascending order, removes duplicates, and prints the sorted list of unique IDs. Constraints * 1 leq N leq 2 times 10^5 * 1 leq id leq 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N id_1 id_2 ... id_N Output Print the sorted list of unique employee IDs, each separated by a space. Examples Input 5 4 8 2 8 3 Output 2 3 4 8 Input 7 5 5 5 5 5 5 5 Output 5 Input 6 1000000000 999999999 999999998 1000000000 999999997 999999996 Output 999999996 999999997 999999998 999999999 1000000000","solution":"def process_employee_ids(N, ids): Processes the list of employee IDs to sort them and remove duplicates. Parameters: N (int): The number of IDs. ids (list of int): The list containing the employee IDs. Returns: list of int: The sorted list of unique employee IDs. unique_ids = set(ids) sorted_unique_ids = sorted(unique_ids) return sorted_unique_ids if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) ids = list(map(int, data[1:])) result = process_employee_ids(N, ids) print(\\" \\".join(map(str, result)))"},{"question":"You are given a large dataset containing a series of transactions for an online store. Each transaction consists of an item identifier, a quantity, and a total price. You are tasked with implementing a function that processes this dataset to generate a sales report. The report should provide the total quantity sold and the total revenue generated for each unique item identifier, listed in the order of their first appearance in the dataset. Input - The first input line contains an integer n (1 ≤ n ≤ 2×10^5), the number of transactions. - The next n lines each contain a string s, an integer q, and a floating-point number p representing, respectively, the item identifier, the quantity, and the total price. The string s consists of alphanumeric characters and hyphens (1 ≤ |s| ≤ 20). The quantity q is a positive integer (1 ≤ q ≤ 10^3), and the total price p is a positive floating-point number (0 < p ≤ 10^5). Output - For each unique item identifier, print the item identifier followed by the total quantity sold and the total revenue generated in the order of their first appearance in the dataset. Examples Input 5 item1 3 120.0 item2 1 15.5 item1 2 80.0 item3 5 200.0 item2 3 45.0 Output item1 5 200.0 item2 4 60.5 item3 5 200.0 Input 4 apple-1 2 30.0 banana-2 1 10.5 apple-1 1 15.0 banana-2 2 21.0 Output apple-1 3 45.0 banana-2 3 31.5","solution":"def generate_sales_report(n, transactions): Generates a sales report from the given transactions. Parameters: n (int): The number of transactions. transactions (list of tuples): Each tuple contains (item identifier, quantity, total price). Returns: list of tuples: Each tuple contains (item identifier, total quantity sold, total revenue) in the order of their first appearance. sales_report = {} order_of_appearance = [] for item, quantity, price in transactions: if item not in sales_report: sales_report[item] = [0, 0.0] order_of_appearance.append(item) sales_report[item][0] += quantity sales_report[item][1] += price result = [(item, sales_report[item][0], sales_report[item][1]) for item in order_of_appearance] return result"},{"question":"You have been hired as a software engineer to design a new feature for an online bookstore. The feature involves creating a recommendation system for books. Each book in the store is identified by a unique ISBN number, and it has a specific popularity score that reflects how many users have read it. To implement the recommendation algorithm, you need to organize the books in such a way that you can quickly identify the k most popular books. Each book is represented as a tuple with the ISBN number and its popularity score. Your task is to write a function that takes a list of books and an integer k, and returns the k books with the highest popularity scores. If there are ties, the books with the same popularity score should be ordered by their ISBN number in ascending order. Input The function should take two arguments: 1. books: a list of tuples (ISBN, popularity) where ISBN is a string and popularity is an integer. 2. k: an integer denoting the number of top books to return. Output A list of k tuples representing the most popular books, sorted as described above. Example Input books = [(\\"978-3-16-148410-0\\", 5), (\\"978-0-306-40615-7\\", 3), (\\"978-0-262-03384-8\\", 5), (\\"978-1-4028-9462-6\\", 2)] k = 2 Output [(\\"978-0-262-03384-8\\", 5), (\\"978-3-16-148410-0\\", 5)] Explanation The two most popular books both have a popularity score of 5. Among them, the book with ISBN \\"978-0-262-03384-8\\" comes before the book with ISBN \\"978-3-16-148410-0\\" when sorted alphabetically by ISBN.","solution":"def top_k_popular_books(books, k): Returns the k books with the highest popularity scores. If there are ties, books with the same popularity score are ordered by ISBN. :param books: List of tuples (ISBN, popularity) :param k: Integer, number of top books to return :return: List of k tuples representing the most popular books # Sort books first by descending popularity and then by ascending ISBN sorted_books = sorted(books, key=lambda x: (-x[1], x[0])) # Return the top k books return sorted_books[:k]"},{"question":"Zooey is fascinated by Fibonacci numbers and their interesting properties. In particular, she is interested in finding the smallest Fibonacci number that is greater than or equal to a given number N. The Fibonacci sequence is defined as follows: * F(0) = 0 * F(1) = 1 * F(n) = F(n - 1) + F(n - 2) for n >= 2 Given a number N, you need to find the smallest Fibonacci number that is greater than or equal to N. Input The input consists of a single integer N (1 ≤ N ≤ 10^18). Output Print the smallest Fibonacci number that is greater than or equal to N. Examples Input 10 Output 13 Input 100 Output 144","solution":"def smallest_fibonacci_greater_than_or_equal_to(n): Returns the smallest Fibonacci number that is greater than or equal to N. if n == 1: return 1 a, b = 0, 1 while b < n: a, b = b, a + b return b"},{"question":"Ozo is working on a project involving currency conversion. He has a list of currencies and their respective exchange rates to a base currency. Now, Ozo needs to determine the amount in the base currency for a given amount in another currency. You are required to help Ozo in finding the converted amount. The conversion table is given, and Ozo will provide the initial amount and the target currency for conversion. INPUT The first line of input contains an integer T, the number of test cases. Each test case consists of two parts: 1. A series of K lines, each containing a string S (currency name) and a float R (exchange rate to the base currency). 2. A single line containing a string C (currency to convert from) and a float A (amount in currency C). OUTPUT For each test case, output the converted amount in the base currency rounded to 4 decimal places. CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ K ≤ 50 0 < R ≤ 10^3 0 < A ≤ 10^6 SAMPLE INPUT 2 3 USD 1.0 EUR 0.85 JPY 110.0 EUR 50.0 2 GBP 1.3 INR 0.014 GBP 100.0 SAMPLE OUTPUT 42.5000 130.0000","solution":"def currency_converter(test_cases): results = [] for exchange_rates, conversion in test_cases: rates = {} for currency, rate in exchange_rates: rates[currency] = rate conversion_currency, amount = conversion converted_amount = amount * rates.get(conversion_currency, 0) results.append(round(converted_amount, 4)) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') index = 0 T = int(input_lines[index]) index += 1 test_cases = [] for _ in range(T): K = int(input_lines[index]) index += 1 exchange_rates = [] for _ in range(K): parts = input_lines[index].split() exchange_rates.append((parts[0], float(parts[1]))) index += 1 conversion_parts = input_lines[index].split() conversion_currency = conversion_parts[0] amount = float(conversion_parts[1]) test_cases.append((exchange_rates, (conversion_currency, amount))) index += 1 return test_cases def main(input_str): test_cases = parse_input(input_str) results = currency_converter(test_cases) return results"},{"question":"Write a program that reads a string of space-separated integers, calculates the sum of all unique integers in the list, and prints the result. Input A single line containing space-separated integers. Output Print the sum of the unique integers. Example Input 1 2 2 3 4 4 5 Output 15","solution":"def sum_of_unique_integers(input_string): Takes a string of space-separated integers, calculates the sum of all unique integers in the list, and returns the result. # Convert the input string into a list of integers int_list = list(map(int, input_string.split())) # Create a set to remove duplicates and calculate the sum unique_sum = sum(set(int_list)) return unique_sum # Example usage: # input_string = \\"1 2 2 3 4 4 5\\" # print(sum_of_unique_integers(input_string)) # Output: 15"},{"question":"Gadget Labs Inc. has designed a new robotic vacuum cleaner named \\"SweepBot\\". The living space is represented as a grid consisting of m rows and n columns. Each cell in the grid can either be open (represented by \'.\') or contain an obstacle (represented by \'#\'). The vacuum starts at a given initial position and moves to clean the entire space. SweepBot can move up, down, left, or right to adjacent cells, but it cannot move diagonally and it cannot pass through obstacles. Your task is to determine whether SweepBot can clean all the open cells in the living space, starting from its initial position. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid, respectively. The second line contains two integers sx and sy (1 ≤ sx ≤ m, 1 ≤ sy ≤ n) — the initial position of SweepBot. The following m lines contain the grid, each of n characters, either \'.\' or \'#\'. Output Print \\"YES\\" if SweepBot can clean all the open cells, otherwise print \\"NO\\". Examples Input 3 4 1 1 .... .. .... Output YES Input 3 4 1 1 .# .#.. .#.. Output NO Note In the first example, SweepBot can start cleaning from cell (1, 1) and cover the entire open area because there are ways to navigate around the obstacles. In the second example, it is impossible for SweepBot to access all open cells starting from (1, 1) because the obstacles create isolated areas that cannot be reached.","solution":"def can_sweep_all_cells(m, n, sx, sy, grid): Determines if SweepBot can clean all open cells in the grid. sx -= 1 # Adjust for 0-based index sy -= 1 # Adjust for 0-based index visited = [[False] * n for _ in range(m)] def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == \'#\' or visited[x][y]: return visited[x][y] = True dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) dfs(sx, sy) for row in range(m): for col in range(n): if grid[row][col] == \'.\' and not visited[row][col]: return \\"NO\\" return \\"YES\\""},{"question":"You are given two strings S and T. Determine the minimum number of operations required to transform S into T where the allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character Input - The first line contains an integer N, the number of test cases. - For each test case, there are two lines. The first line contains the string S, and the second line contains the string T. Output - For each test case, print the minimum number of operations required. SAMPLE INPUT 2 sunday saturday abc yabd SAMPLE OUTPUT 3 2 Explanation In the first test case, the minimum operations required to transform \\"sunday\\" into \\"saturday\\" are: 1. Insert \'a\' after \'s\' (sunday -> sauday) 2. Insert \'t\' after the second \'a\' (sauday -> saturday) 3. Replace \'u\' with \'r\' (saturday -> saturday) In the second test case, the minimum operations required to transform \\"abc\\" into \\"yabd\\" are: 1. Insert \'y\' at the beginning (abc -> yabc) 2. Replace \'c\' with \'d\' (yabc -> yabd)","solution":"def min_distance(S, T): Returns the minimum number of operations required to transform S into T. Operations allowed: insert a character, delete a character, replace a character. m, n = len(S), len(T) # Create a DP table to memoize results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(m + 1): for j in range(n + 1): # If S is empty, fill with number of insertions (all of T\'s characters). if i == 0: dp[i][j] = j # If T is empty, fill with number of deletions (all of S\'s characters). elif j == 0: dp[i][j] = i # If last characters are same, ignore the last character and recur for the remaining strings. elif S[i-1] == T[j-1]: dp[i][j] = dp[i-1][j-1] # If last characters are different, consider all operations and pick the minimum. else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n] def process_test_cases(test_cases): results = [] for S, T in test_cases: results.append(min_distance(S, T)) return results"},{"question":"**Problem Description:** Darya loves collecting beautiful stones from the beach. There are n distinct types of stones, and each stone type i has a beauty score of ai. Each time Darya visits the beach, she can collect at most one stone of each type. However, Darya wants to maximize the total beauty score of the stones she collects during her visits. Darya decides to make k visits to the beach in order to collect stones. During each visit, she must collect exactly m stones. She cannot collect the same stone type in multiple visits. Help Darya maximize the total beauty score of stones she collects over k visits. **Input Format:** - The first line contains three integers n, m, and k (1 ≤ n, m, k ≤ 10^5) — the number of distinct stone types, the number of stones to collect in each visit, and the number of visits, respectively. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), where ai represents the beauty score of the ith type of stone. **Output Format:** Print the maximum total beauty score that Darya can achieve by making exactly k visits, collecting exactly m stones per visit. **Example:** *Input*: ``` 5 2 2 4 9 2 8 5 ``` *Output*: ``` 26 ``` *Explanation*: - On her first visit, Darya can collect the stones with beauty scores 9 and 8 (total 17). - On her second visit, Darya can collect the stones with beauty scores 5 and 4 (total 9). Therefore, the maximum total beauty score is 17 + 9 = 26.","solution":"def maximize_total_beauty(n, m, k, beauty_scores): Returns the maximum total beauty score that can be achieved by collecting exactly m stones per visit for k visits from n distinct types of stones. :param n: Total number of distinct stone types. :param m: Number of stones to collect in each visit. :param k: Number of visits. :param beauty_scores: A list containing the beauty scores of each type of stone. :return: The maximum total beauty score. # Sort the beauty scores in descending order sorted_beauty_scores = sorted(beauty_scores, reverse=True) # Sum the top k * m beauty scores max_total_beauty = sum(sorted_beauty_scores[:m * k]) return max_total_beauty"},{"question":"You are given a string S representing a certain pattern of \')\' and \'(\' which is always balanced. Determine if the string S can be divided into the minimum number of balanced segments of parentheses. Each segment should be a valid, properly nested string of parentheses, which means every opening bracket must have a corresponding closing bracket. Constraints: * 2 ≤ |S| ≤ 1000 (|S| is the length of the string S.) * S is a valid sequence of parentheses (\'(\' and \')\'). Input Input is given from Standard Input in the following format: S Output Print the minimum number of balanced segments. Examples Input (()())(()) Output 2 Input ((())()) Output 1 Input ()()()() Output 4 Input ((()))()() Output 3","solution":"def min_balanced_segments(s): Given a balanced string s consisting of \'(\' and \')\', return the minimum number of non-overlapping balanced segments. balance = 0 segments = 0 for char in s: if char == \'(\': balance += 1 else: balance -= 1 if balance == 0: segments += 1 return segments # Example usage: # print(min_balanced_segments(\\"(()())(())\\")) # Expected output: 2"},{"question":"A research team is studying the behaviors of various species of birds. Each species has a specific singing pattern which can be represented as a string consisting of lowercase letters, where each character represents a unique type of note the bird can sing. The team aims to classify species into groups based on similarities in their singing patterns. Two species belong to the same group if their singing patterns are similar. Two strings are similar if you can transform one string into the other by swapping any two characters (possibly the same character) any number of times. For example, the strings \\"abc\\" and \\"bca\\" are similar because we can swap \'a\' with \'c\' and \'b\' with \'a\' to get the same string. Given a list of bird species singing patterns, determine the number of distinct groups in the list based on the similarity of their singing patterns. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of species. Each of the next n lines contains a string — the singing pattern of a species. The length of each string is between 1 and 100 characters. Output Output one integer — the number of distinct groups based on the similarity of their singing patterns. Examples Input 4 abcd dcba abc xy Output 3 Input 3 abc bca acb Output 1 Note In the first sample, the groups are formed as follows: - \\"abcd\\" and \\"dcba\\" are in the same group. - \\"abc\\" forms its own group. - \\"xy\\" forms its own group. Therefore, there are 3 distinct groups. In the second sample, all three patterns are similar by swapping characters, so there is only 1 distinct group.","solution":"def num_groups(n, patterns): Function to compute the number of distinct groups of bird species based on similarity of their singing patterns. Parameters: n (int): Number of bird species. patterns (List[str]): List of singing patterns of each species. Returns: int: Number of distinct groups based on the similarity of singing patterns. def pattern_signature(pattern): Generate a signature for a pattern that is invariant to any character swaps. return \'\'.join(sorted(pattern)) unique_signatures = set(pattern_signature(pattern) for pattern in patterns) return len(unique_signatures)"},{"question":"You are given a list of periods when students will use a classroom for studying. Each period is defined by a start and end time (inclusive). Your task is to compute the maximum number of students that can be in the classroom at the same time. Write a function that takes a list of periods and returns the maximum number of students present at any one time in the classroom. For simplicity, assume that the classroom is empty at the start and there is no overlap between the end of one period and the start of another for the same student. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of periods. Each of the next n lines contains two integers start and end (0 ≤ start < end ≤ 10^6), indicating the start and end times of a period. Output Output a single integer — the maximum number of students that can be in the classroom at the same time. Example Input 3 10 20 15 25 30 35 Output 2 Input 4 1 5 2 6 3 8 4 10 Output 4 Note In the first example, during the intervals [10, 20] and [15, 25], there are two students in the classroom simultaneously from time 15 to 20. In the second example, during the intervals [1, 5], [2, 6], [3, 8], [4, 10], there are four students in the classroom simultaneously from time 4 to 5.","solution":"def max_students_in_classroom(periods): This function takes a list of periods when students will be using a classroom and returns the maximum number of students present at any one time. :param periods: List of tuples containing start and end times of periods :type periods: List[Tuple[int, int]] :return: Maximum number of students present at any given time :rtype: int events = [] # Convert periods into events for start, end in periods: events.append((start, 1)) # arrival of a student events.append((end, -1)) # departure of a student # Sort events, first by time, then by type of event events.sort(key=lambda x: (x[0], x[1])) max_students = 0 current_students = 0 for event in events: current_students += event[1] max_students = max(max_students, current_students) return max_students"},{"question":"A warehouse manager needs to optimize space in their warehouse over the following n days. For each day, the manager knows exactly how many boxes k_i will arrive and how many boxes l_i will be shipped out. Currently, the warehouse can only handle a maximum of m boxes at the end of each day. The manager also has the option to expand the warehouse space for f days. On each of these f days, the capacity of the warehouse can be doubled, allowing for more incoming boxes without exceeding the capacity limit. The manager asks you to determine if there is a way to select the f days to expand the warehouse such that at the end of any day, the number of boxes does not exceed the capacity of the warehouse. Input: The first line contains three integers n, m, and f (1 ≤ n ≤ 105, 1 ≤ m ≤ 109, 0 ≤ f ≤ n) denoting the number of days, the initial maximum capacity of the warehouse, and the number of days the warehouse can be expanded, respectively. Each of the next n lines contains two integers k_i and l_i (0 ≤ k_i, l_i ≤ 109), indicating the number of boxes that will arrive and the number of boxes that will be shipped out on the i-th day, respectively. Output: Print \\"Possible\\" if there is a way to expand the warehouse on f days such that the number of boxes in the warehouse never exceeds the capacity m at the end of any day. Otherwise, print \\"Impossible\\". Examples: Input: 3 10 1 7 5 4 7 6 4 Output: Possible Input: 4 5 2 6 2 8 4 3 5 7 1 Output: Impossible Note: In the first example, expanding the warehouse on the first day allows the warehouse to handle the surplus. Without the expansion, at the end of the first day, it would have exceeded the capacity. In the second example, even with the expansion on two of the days, it is not possible to avoid exceeding the capacity on all days. Hence the output is \\"Impossible\\".","solution":"def can_optimize_warehouse(n, m, f, deliveries): current_boxes = 0 excess_days = [] for i in range(n): k_i, l_i = deliveries[i] current_boxes += k_i - l_i if current_boxes > m: excess = current_boxes - m excess_days.append((i, excess)) if len(excess_days) <= f: return \\"Possible\\" return \\"Impossible\\""},{"question":"Write a function that takes an array of integers and returns the length of the longest subsequence such that every element in the subsequence is a multiple of the previous one. Constraints * 1 ≤ length of array ≤ 10^5 * 1 ≤ array elements ≤ 10^9 Input The input is given from Standard Input in the following format: The first line contains an integer n, the length of the array. The second line contains n integers representing the array. Output Output the length of the longest subsequence where each subsequent element is a multiple of the previous one. Examples Input 6 3 6 7 12 24 36 Output 4 Input 5 2 3 5 7 11 Output 1 Input 10 1 3 9 2 18 54 6 108 27 216 Output 7","solution":"def longest_multiple_subsequence(arr): n = len(arr) arr.sort() dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] % arr[j] == 0: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Alex has a rectangular grid consisting of \'1\'s and \'0\'s. He wants to find the maximum area of a rectangle (containing only \'1\'s) that can be formed within this grid. The rectangular grid is represented as a list of strings, where each string represents a row in the grid and contains only the characters \'1\' or \'0\'. Your task is to write a program to compute the maximum area of a rectangle containing only \'1\'s in the given grid. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 200) — the number of rows and columns in the grid. - The next n lines contain m characters each, representing the grid. Each character is either \'1\' or \'0\'. Output - Print a single integer — the maximum area of a rectangle containing only \'1\'s. Examples Input 4 4 1010 1011 1111 0111 Output 6 Input 2 3 001 111 Output 3 Input 3 3 110 110 001 Output 4","solution":"def maximal_rectangle(grid): if not grid: return 0 n = len(grid) m = len(grid[0]) max_area = 0 heights = [0] * (m + 1) for row in grid: for i in range(m): heights[i] = heights[i] + 1 if row[i] == \'1\' else 0 stack = [-1] for i in range(m + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area def compute_max_rectangle(n, m, grid_lines): grid = [grid_lines[i] for i in range(n)] return maximal_rectangle(grid)"},{"question":"James is an avid gardener and wants to create a beautiful pattern with his flowers. He decides to arrange his flowers in concentric circular layers. The first layer will contain 1 flower, the second layer will contain 6 flowers, the third layer will contain 12 flowers, and so on in a pattern. James wants to know how many flowers he will need to plant in total after adding a specific number of layers. Can you help him calculate the total number of flowers? For example, after 1 layer, he needs 1 flower, after 2 layers, he needs 1 + 6 = 7 flowers, after 3 layers, he needs 1 + 6 + 12 = 19 flowers, and so on. The function should calculate the total number of flowers required after a given number of layers. Input: - The first line of input contains an integer T, the number of test cases. - The following T lines each contain an integer L which represents the number of layers. Output: - For each test case, output the total number of flowers required after L layers. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ L ≤ 10^5 Scoring: - 1 ≤ T ≤ 10, 1 ≤ L ≤ 1000: (30 pts) - 1 ≤ T ≤ 50, 1 ≤ L ≤ 5000: (30 pts) - Original Constraints: (40 pts) SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 1 7 19 Explanation: - For 1 layer: total flowers = 1 - For 2 layers: total flowers = 1 + 6 = 7 - For 3 layers: total flowers = 1 + 6 + 12 = 19","solution":"def total_flowers(layers): Returns the total number of flowers required after a given number of layers. total = 0 for layer in range(1, layers + 1): total += 6 * (layer - 1) # respective layer has 6 * (layer - 1) flowers if layer == 1: total += 1 # first layer has only 1 flower return total def solve(inputs): results = [] for layers in inputs: results.append(total_flowers(layers)) return results"},{"question":"You are given n strings `s_1`, `s_2`, ..., `s_n`, each string representing a word. The strings are arranged in a list. In one operation, you can pick any string from the list and duplicate it, appending the duplicate to the end of the list. This operation can be performed any number of times. However, you can only add up to m characters in total across all operations. Your task is to determine whether it\'s possible to reach a state in which all strings in the list are of equal length. If it is possible, output \\"YES\\"; otherwise, output \\"NO\\". Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10^5) — the number of initial strings and the maximum total number of characters that can be added. The next n lines contain the initial strings `s_1`, `s_2`, ..., `s_n`. Each string `s_i` (1 ≤ |s_i| ≤ 100) consists of lowercase English letters. Output Output \\"YES\\" if it is possible to make all strings in the list equal in length using the allowed operations. Otherwise, output \\"NO\\". Examples Input 3 4 a aa aaa Output YES Input 3 1 a bb c Output NO Note For the first test case, one possible sequence of operations is: Duplicate \\"a\\" twice to get \\"aa\\" and \\"aaa\\" (adding 2 characters). For the second test case, it\'s impossible to make all strings the same length with only 1 allowed additional character.","solution":"def can_make_all_strings_equal(n, m, strings): max_len = max(len(s) for s in strings) min_len = min(len(s) for s in strings) if max_len == min_len: return \\"YES\\" total_needed = sum(max_len - len(s) for s in strings) if total_needed <= m: return \\"YES\\" return \\"NO\\""},{"question":"A data scientist has a dataset of temperatures and wants to find the longest streak of days where the temperature was greater than or equal to a given threshold. Write a program to help the scientist determine the length of this longest streak. Input The input consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 1000), the number of days. The second line contains n space-separated integers representing the temperatures for each day in degrees Celsius (-100 ≤ temperature ≤ 100). The last line contains a single integer t (-100 ≤ t ≤ 100), the temperature threshold. Output Output a single integer, the length of the longest streak of days where the temperature was greater than or equal to t. Examples Input 7 30 25 28 24 31 35 30 28 Output 3 Input 5 10 15 10 15 10 20 Output 0 Note In the first example, the longest streak of days where the temperature was at least 28 degrees is 3 days (on days 5, 6, and 7). In the second example, there are no days where the temperature reaches the threshold of 20, so the output is 0.","solution":"def longest_streak(n, temperatures, t): Returns the length of the longest streak of days where the temperature was greater than or equal to t. max_streak = 0 current_streak = 0 for temperature in temperatures: if temperature >= t: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 0 return max_streak"},{"question":"Alice is working on an encryption algorithm. For a given string S consisting only of uppercase alphabets, she wants to shift each character in the string by a fixed number N in the alphabet. The shifting wraps around the alphabet, so if a character goes past \'Z\', it starts again at \'A\'. Write a function `shift_string(S: str, N: int) -> str` that performs this operation. Constraints: * The input string S will contain only uppercase English letters and will have a length between 1 and 100 inclusive. * The shift value N will be a non-negative integer such that 0≤N≤100. Input * A string S. * An integer N. Output * The encrypted string after shifting each character by N positions. Examples Input HELLO 3 Output KHOOR Input APPLE 25 Output ZOOKD","solution":"def shift_string(S: str, N: int) -> str: Shifts each character in the string S by a fixed number N in the alphabet. The shift wraps around the alphabet. Parameters: S (str): Input string consisting only of uppercase English letters. N (int): The fixed number by which to shift each character. Returns: str: The encrypted string after shifting each character by N positions. shifted_string = [] for char in S: # Calculate the new character position new_pos = (ord(char) - ord(\'A\') + N) % 26 # Convert the position back to a character new_char = chr(ord(\'A\') + new_pos) shifted_string.append(new_char) return \'\'.join(shifted_string)"},{"question":"Your task is to write a program that takes an integer array and returns two values. The first value is the most frequently occurring integer in the array. The second value is the integer with the highest numerical value. You can assume the following conditions: - The array is non-empty. - Each integer in the array is between -10^5 and 10^5. - The array will have at most 1000 elements. - There is only one integer that occurs most frequently. - There is only one integer that has the highest numerical value. Input The first line contains an integer n, the size of the array. The second line contains n space-separated integers representing the array. Output Print the two integers separated by a space. Example Input 6 4 1 2 2 5 5 Output 2 5","solution":"from collections import Counter def find_frequent_and_largest(arr): Returns the most frequently occurring integer and the integer with the highest value. # Finding the most frequent element frequency = Counter(arr) most_frequent = max(frequency, key=frequency.get) # Finding the largest element largest = max(arr) return most_frequent, largest"},{"question":"John loves solving puzzles and recently he came across an interesting one involving numbers. The puzzle is as follows: Given a list of `N` integers, you need to find the maximum sum of a contiguous subarray with the caveat that you are allowed to skip at most one element. That is, you can remove one element from the array to get the subarray with the highest possible sum. Your task is to write a function to solve this problem. Input: - The first line contains an integer `N`, the number of integers in the list. - The second line contains `N` space-separated integers representing the list. Output: - Output the maximum sum of a contiguous subarray where you can skip at most one element. Constraints: - 1 ≤ N ≤ 100000 - -10000 ≤ list[i] ≤ 10000 Sample Input: ``` 7 1 -2 0 3 -1 2 4 ``` Sample Output: ``` 9 ``` Explanation: In the given example, the best subarray without skipping any element is [3, -1, 2, 4] which sums to 8. However, if we skip the -1, we have the subarray [3, 2, 4] which sums to 9. Hence, the output is 9.","solution":"def max_sum_with_one_skip(arr): This function calculates the maximum sum of a contiguous subarray with the option to skip at most one element. n = len(arr) if n == 0: return 0 if n == 1: return arr[0] # Initialize the arrays for dynamic programming max_end_here = [0] * n max_remove_here = [0] * n max_end_here[0] = arr[0] max_remove_here[0] = float(\'-inf\') max_sum = arr[0] for i in range(1, n): max_end_here[i] = max(arr[i], max_end_here[i-1] + arr[i]) max_remove_here[i] = max(max_end_here[i-1], max_remove_here[i-1] + arr[i]) max_sum = max(max_sum, max_end_here[i], max_remove_here[i]) return max_sum"},{"question":"A farmer has a rectangular field that he wants to divide into smaller, equal-sized square plots. He wants to maximize the size of the square plots while ensuring that no land is left unused. Given the dimensions of his field, determine the size of the largest possible square plot he can create and the number of such plots. Input: The input consists of a single line with two positive integers W and H, the width and height of the field respectively. Output: Print two space-separated integers: the size of the largest possible square plot and the number of such plots. Constraints: 1 <= W, H <= 10000 SAMPLE INPUT 15 45 SAMPLE OUTPUT 15 3","solution":"import math def largest_square_plot(W, H): Returns the size of the largest possible square plot and the number of such plots. Parameters: W (int): Width of the rectangular field H (int): Height of the rectangular field Returns: tuple: (size of the largest square plot, number of such plots) # Calculate the greatest common divisor (GCD) of W and H gcd = math.gcd(W, H) # The size of the largest possible square plot that can fit perfectly in the field largest_size = gcd # The number of such square plots number_of_plots = (W // gcd) * (H // gcd) return largest_size, number_of_plots"},{"question":"Little Alex likes solving puzzles. He has come across a grid-based puzzle where he needs to find the shortest path from the top-left corner to the bottom-right corner of a grid. The grid consists of cells that are either walkable (\'.\') or blocked (\'#\'). Alex can only move up, down, left, or right. Your task is to help Alex find the shortest path from the top-left corner to the bottom-right corner of the grid. Input The first line contains two integers N and M (1 ≤ N, M ≤ 1000) — the number of rows and columns of the grid. The next N lines each contain M characters (either \'.\' or \'#\') representing the grid. Output Output a single integer representing the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, output -1. Examples Input 3 3 ... .#. ... Output 4 Input 3 3 .#. .#. . Output -1","solution":"from collections import deque def shortest_path(grid): Returns the length of the shortest path from the top-left to the bottom-right corner. N = len(grid) M = len(grid[0]) if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # down, up, right, left queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == N-1 and y == M-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist+1)) return -1"},{"question":"A submarine needs to navigate through a grid representing the ocean floor. The grid is represented as a matrix of size `N x N`, where each cell is either water (denoted by ‘.’) or an obstacle (denoted by ‘#’). The submarine can start at any water cell and needs to navigate to the other side of the grid. The submarine can move horizontally or vertically but not diagonally. Return the minimum number of moves required for the submarine to reach from the leftmost to the rightmost side of the grid. Input First line contains an integer `T`, the number of test cases. Each test case contains an integer `N` in one line. Next `N` lines each contain `N` characters representing the grid. Output For each test case, print the minimum number of moves required for the submarine to successfully navigate to the other side of the grid. If it\'s not possible to navigate, print `-1`. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 Example Input: 2 3 ..# .#. ... 3 # .#. ..# Output: 2 -1 Explanation Example case 1: The submarine can start at the top-left cell, move down, and then move right twice to reach the rightmost side with minimal moves. Example case 2: There is no path for the submarine to navigate through the obstacles to the rightmost side.","solution":"from collections import deque def min_navigation_moves(grid): N = len(grid) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Four possible movements def is_valid(x, y): return 0 <= x < N and 0 <= y < N and grid[x][y] == \'.\' # Initialize distance matrix with a large number (infinity) distance = [[float(\'inf\')] * N for _ in range(N)] queue = deque() # Enqueue all starting positions in the first column that are water cells for i in range(N): if grid[i][0] == \'.\': queue.append((i, 0)) distance[i][0] = 0 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and distance[nx][ny] > distance[x][y] + 1: distance[nx][ny] = distance[x][y] + 1 queue.append((nx, ny)) # Find minimum distance to any cell in the last column min_moves = min(distance[i][N-1] for i in range(N)) return min_moves if min_moves != float(\'inf\') else -1 def navigate_submarine(test_cases): results = [] for grid in test_cases: results.append(min_navigation_moves(grid)) return results def parse_input(input_data): data = input_data.strip().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 grid = [data[index+i] for i in range(N)] index += N test_cases.append(grid) return test_cases def solve(input_data): test_cases = parse_input(input_data) results = navigate_submarine(test_cases) return \'n\'.join(map(str, results))"},{"question":"You are given a list of integers a_1, a_2, ..., a_N. Your task is to select a contiguous subarray such that when you reverse this subarray, the resulting array is lexicographically larger than the original array. If there are multiple such subarrays, choose the one that gives the lexicographically largest resulting array after reversal. A list A is lexicographically larger than list B if there exists an index i such that A[i] > B[i] and for all j < i, A[j] == B[j]. Find the starting and ending indices of such a subarray. If no valid subarray exists, return -1 -1. Indices are 1-based. Constraints: * 1 ≤ N ≤ 2 * 10^5 * 1 ≤ a_i ≤ 10^9 Input: The input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output: Print two integers, the starting and ending indices of the subarray. If no valid subarray exists, print -1 -1. Examples Input: 5 1 3 2 4 5 Output: 2 3 Input: 4 4 3 2 1 Output: 1 4 Input: 6 1 2 3 4 5 6 Output: -1 -1","solution":"def find_lexicographically_largest_subarray(n, arr): Finds the starting and ending indices of the subarray such that reversing it makes the array lexicographically larger. If no such subarray exists, returns -1 -1. :param n: Length of the array :param arr: List of integers :return: Tuple of two integers start, end = -1, -1 best_start, best_end = -1, -1 # Traverse the array to find potential subarray which when reversed makes it lexicographically larger for i in range(1, n): if arr[i] < arr[i - 1]: if start == -1: start = i - 1 end = i elif start != -1: if best_start == -1 or arr[start:end + 1][::-1] > arr[best_start:best_end + 1][::-1]: best_start, best_end = start, end start, end = -1, -1 if start != -1: if best_start == -1 or arr[start:end + 1][::-1] > arr[best_start:best_end + 1][::-1]: best_start, best_end = start, end if best_start == -1: return (-1, -1) return (best_start + 1, best_end + 1)"},{"question":"Problem description: In a coding competition, participants solve problems and earn points based on the difficulty of the problems they solve. There are multiple participants and multiple problems. At the end of the competition, each participant\'s total points are calculated, and the participant with the highest score is considered the winner. You are given the list of problems solved by each participant along with the points earned for solving each problem. Your task is to compute the total points for each participant and determine the winner. It is guaranteed that there is only one winner. Good luck! Input The first line contains an integer T, denoting the number of test cases. The first line of each test case contains an integer P, denoting the number of problems solved in that test case. Each of the next P lines contains a string and an integer, denoting the name of the participant who solved the problem and the points earned for that problem. Output For each test case, output a single line containing the name of the winner and their final score. Constraints 1 ≤ T ≤ 10 1 ≤ P ≤ 100 1 ≤ points[i] ≤ 100 No of unique participants = 20 Example Input: 2 3 Alice 10 Bob 5 Alice 7 4 Eve 3 Charles 10 Charles 15 Eve 10 Output: Alice 17 Charles 25 Explanation Test case 1: Alice has a total score of 17 (10 + 7) and Bob has a total score of 5. Hence, the winner is Alice. Test case 2: Eve has a total score of 13 (3 + 10) and Charles has a total score of 25 (10 + 15). Hence, the winner is Charles.","solution":"def find_winner(test_cases): Determines the winner by calculating total points for each participant based on their problems solved and points earned. Parameters: test_cases (list): A list of dictionaries representing each test case. Each dictionary contains \'P\' and \'problems\' key. Returns: list: A list of tuples where each tuple contains the winner\'s name and their score. results = [] for test_case in test_cases: num_problems = test_case[\'P\'] problems = test_case[\'problems\'] scores = {} for problem in problems: name, points = problem if name in scores: scores[name] += points else: scores[name] = points # Find the participant with the maximum score winner = max(scores, key=scores.get) winner_score = scores[winner] results.append((winner, winner_score)) return results"},{"question":"Each year, a company organizes a team-building event where all employees are grouped into teams. To foster cooperation and learning, they need to distribute tasks among the teams based on their skill levels. The company wants each team to perform a similar amount of work by balancing the accumulated skill levels within each team. Given a list of employees with their respective skill levels, develop a program that divides these employees into exactly two teams such that the absolute difference between the total skill levels of the two teams is minimized. # Input The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of employees. The next line contains `n` integers separated by spaces, where each integer `a_i` (1 ≤ a_i ≤ 1000) represents the skill level of the `i`-th employee. # Output Print the minimum possible absolute difference between the total skill levels of the two teams. # Example Input: ``` 5 1 2 3 4 5 ``` Output: ``` 1 ``` Input: ``` 4 10 20 15 5 ``` Output: ``` 0 ``` # Note In the first example, one possible division is: Team 1: [1, 2, 3] — Total skill level: 6 Team 2: [4, 5] — Total skill level: 9 Absolute difference: |9 - 6| = 3 However, another division is: Team 1: [1, 3, 5] — Total skill level: 9 Team 2: [2, 4] — Total skill level: 6 Absolute difference: |9 - 6| = 1 The second division results in the smallest absolute difference. In the second example where the skill levels are [10, 20, 15, 5], one possible division is: Team 1: [10, 15] — Total skill level: 25 Team 2: [20, 5] — Total skill level: 25 Absolute difference: |25 - 25| = 0","solution":"def min_difference(n, skills): Returns the minimum possible absolute difference between the total skill levels of two teams. total_sum = sum(skills) target = total_sum // 2 dp = [0] * (target + 1) for skill in skills: for j in range(target, skill - 1, -1): dp[j] = max(dp[j], dp[j - skill] + skill) team1_sum = dp[target] team2_sum = total_sum - team1_sum return abs(team1_sum - team2_sum)"},{"question":"Write a function that takes two integers x and n, and outputs the sum of squares of the integers from x to n (inclusive). Constraints * 0 ≤ x ≤ n ≤ 100 Input Two integers x and n separated by a single space. Output Print the sum of squares of integers from x to n (inclusive). Examples Input 1 3 Output 14 Input 0 4 Output 30","solution":"def sum_of_squares(x, n): Returns the sum of squares of integers from x to n inclusive. Parameters: x (int): Starting integer n (int): Ending integer Returns: int: Sum of squares of integers from x to n return sum(i * i for i in range(x, n + 1))"},{"question":"You have a list of N integers representing the price of a certain commodity for the next N days. You want to minimize the cost of buying exactly one unit of the commodity, but you also have the option to skip up to K days consecutively. Your goal is to determine the minimum possible cost to buy the commodity, accounting for the possibility of skipping up to K days. Input Input begins with two integers N and K (1 ≤ N ≤ 3·105, 1 ≤ K ≤ 105), the number of days and the maximum number of consecutive days you can skip. Following this is a line with exactly N integers p1, p2, ..., pN (1 ≤ pi ≤ 106). The price of the commodity on the i-th day is given by pi. Output Print the minimum possible cost to buy one unit of the commodity after considering the option to skip up to K consecutive days. Examples Input 5 2 10 5 20 4 8 Output 4 Input 7 1 3 1 4 1 5 9 2 Output 1 Note In the first example, the best strategy is to buy on the 4th day for a cost of 4, skipping up to 2 consecutive days before that. In the second example, the minimum cost can be achieved by buying on the 2nd day for a cost of 1.","solution":"def minimize_cost(N, K, prices): Determines the minimum possible cost to buy one unit of the commodity after considering the option to skip up to K consecutive days. :param N: int - The number of days :param K: int - The maximum number of consecutive days you can skip :param prices: List[int] - List of commodity prices for the next N days :return: int - The minimum possible cost # Initialize minimum cost as infinite min_cost = float(\'inf\') # Slide through the prices considering the skipping limit K for i in range(N): # Only compare prices within the window of K days for j in range(i, min(i + K + 1, N)): min_cost = min(min_cost, prices[j]) return min_cost # Example Usage N = 5 K = 2 prices = [10, 5, 20, 4, 8] print(minimize_cost(N, K, prices)) # Output should be 4"},{"question":"Anna is developing a program that categorizes users based on their usage time. Each user has a log of the times they started and stopped using the system. A user may have multiple sessions, and none of them overlap. Anna wants to count the overall usage time and categorize each user\'s total time as follows: - `Light`: Less than or equal to 2 hours. - `Moderate`: More than 2 hours and less than or equal to 5 hours. - `Heavy`: More than 5 hours. Write a function that determines the category for each user based on their total usage time. # Input - The input will be a list of tuples. Each tuple represents a session with two timestamps in \\"HH:MM\\" format (24-hour clock), the first being the start time and the second being the end time. Assume no sessions overlap for any user. - The timestamps are sorted in ascending order. # Output - Return the usage category (`Light`, `Moderate`, or `Heavy`) as a string. # Example ```python def usage_category(sessions): pass # Example 1 sessions = [(\\"10:00\\", \\"11:30\\"), (\\"12:45\\", \\"13:50\\"), (\\"16:00\\", \\"17:20\\")] print(usage_category(sessions)) # Output: \\"Moderate\\" # Example 2 sessions = [(\\"08:00\\", \\"09:00\\"), (\\"15:00\\", \\"16:00\\")] print(usage_category(sessions)) # Output: \\"Light\\" # Example 3 sessions = [(\\"08:00\\", \\"10:30\\"), (\\"11:00\\", \\"14:30\\"), (\\"15:00\\", \\"16:30\\")] print(usage_category(sessions)) # Output: \\"Heavy\\" ``` # Notes - Consider edge cases where the total usage time is exactly at the boundary (e.g., 2 hours, 5 hours). - The function should handle converting the time into minutes for easier calculations. - Ensure to validate that start time is always less than the end time within each session.","solution":"def usage_category(sessions): Determines the category based on the total usage time. :param sessions: List of tuples, where each tuple contains two strings representing start and end time in \\"HH:MM\\" format. :return: A string indicating the category: \'Light\', \'Moderate\', or \'Heavy\'. def to_minutes(hh_mm): Converts a time string \\"HH:MM\\" to total minutes. hh, mm = map(int, hh_mm.split(\':\')) return hh * 60 + mm total_minutes = 0 for start, end in sessions: start_minutes = to_minutes(start) end_minutes = to_minutes(end) total_minutes += (end_minutes - start_minutes) hours = total_minutes / 60 if hours <= 2: return \\"Light\\" elif hours <= 5: return \\"Moderate\\" else: return \\"Heavy\\""},{"question":"Sophie is fascinated by prime numbers and their properties. She recently stumbled upon the concept of twin primes – pairs of prime numbers that have a difference of two (e.g., 3 and 5, 11 and 13). She is curious to find all the twin primes up to a given number n. Write a program to assist Sophie by listing all twin prime pairs up to the given number n. Input: An integer T, denoting the number of test cases. Each test case contains a single integer n (2 ≤ n ≤ 1000000), representing the upper limit for finding twin primes. Output: For each test case, output all the twin prime pairs up to the number n in the order they are found, each pair separated by a space. If there are no twin prime pairs for a given n, output \\"No twin primes\\". Constraints: 1 ≤ T ≤ 10 2 ≤ n ≤ 1000000 Problem Setter: Sophie Prime Note: Consider using efficient algorithms for finding prime numbers for large values of n. SAMPLE INPUT 2 10 20 SAMPLE OUTPUT 3 5 5 7 3 5 5 7 11 13 17 19","solution":"def sieve_of_eratosthenes(n): Generates a list of primes up to n using the Sieve of Eratosthenes. is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]] def find_twin_primes(n): Finds all twin prime pairs up to n. primes = sieve_of_eratosthenes(n) twin_primes = [] for i in range(len(primes)-1): if primes[i + 1] - primes[i] == 2: twin_primes.append((primes[i], primes[i + 1])) return twin_primes def twin_primes_up_to_n(test_cases): Given a list of test_cases (limits), find and print all twin primes up to each limit. results = [] for n in test_cases: twins = find_twin_primes(n) if twins: result = \\" \\".join(f\\"{p1} {p2}\\" for p1, p2 in twins) results.append(result) else: results.append(\\"No twin primes\\") return results # Example function to handle multiple test cases and return their results def process_test_cases(T, test_cases): return twin_primes_up_to_n(test_cases)"},{"question":"Problem E Longest Increasing Subsequence in a Circular Array Given a circular array of integers, your task is to find the length of the longest increasing subsequence that can be formed in the array. A circular array means that after the last element, the array continues from the first element again. Input The input consists of a single test case in the following format: n a_1 a_2 ... a_n Here, n is the number of elements in the array satisfying 1 leq n leq 10^5. For each i, a_i is an integer between -10^6 and 10^6, inclusive. Output Output the length of the longest increasing subsequence in the given circular array. Sample Input 1 8 4 3 5 7 8 6 2 1 Sample Output 1 5 Sample Input 2 5 10 12 15 14 13 Sample Output 2 3 Explanation In Sample Input 1, the longest increasing subsequence is 3, 5, 7, 8, 2 (wrapping around), which has a length of 5. In Sample Input 2, the longest increasing subsequence can be 10, 12, 15 or wrapping around 14, 15, 10 which both have a length of 3.","solution":"from bisect import bisect_left def lis_circular(arr): Returns the length of the longest increasing subsequence in a circular array. n = len(arr) def standard_lis(nums): # Helper function to compute LIS on a linear segment if not nums: return 0 dp = [] for num in nums: pos = bisect_left(dp, num) if pos == len(dp): dp.append(num) else: dp[pos] = num return len(dp) # Extend the array to simulate the circular property extended_arr = arr + arr max_len = 0 # Compute LIS for each starting point in the original array portion for i in range(n): lis_length = standard_lis(extended_arr[i:i+n]) max_len = max(max_len, lis_length) return max_len"},{"question":"You are given a list of n strings. Each string consists of lowercase Latin letters. Your task is to group the given strings into sets such that strings in each set are anagrams of each other. An anagram of a string is formed by rearranging the characters of the string, using all the original characters exactly once. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of strings. Each of the next n lines contains one string, which has a length between 1 and 100 inclusive. Output Print the sets of anagrams, one per line, in any order. Each set should contain the original strings separated by spaces. Example Input 6 eat tea tan ate nat bat Output eat tea ate tan nat bat","solution":"from collections import defaultdict def group_anagrams(strings): Groups strings that are anagrams of each other. Args: strings (list of str): List of input strings. Returns: list of list of str: List of anagram groups, each group is a list of strings. anagram_map = defaultdict(list) for string in strings: sorted_str = \'\'.join(sorted(string)) anagram_map[sorted_str].append(string) return list(anagram_map.values()) def process_input(n, strings): Helper function to process input parameters Args: n (int): Number of strings strings (list of str): List of input strings Returns: formatted_output (str): formatted output string for the anagram groups anagram_groups = group_anagrams(strings) formatted_output = \'n\'.join([\' \'.join(group) for group in anagram_groups]) return formatted_output # Example usage: n = 6 strings = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] print(process_input(n, strings))"},{"question":"Example Input 5 10 20 30 50 10 20 30 40 70 20 Output 3","solution":"def count_intersection(n, arr1, arr2): Returns the count of common elements in arr1 and arr2. # Convert both arrays to sets to get unique elements and then find the intersection set1 = set(arr1) set2 = set(arr2) intersection = set1 & set2 return len(intersection)"},{"question":"In a distant planet called Xylor, the inhabitants use a different system for keeping track of their addresses. Each Xylorian home address consists of a series of alphabets (both lowercase and uppercase) and digits. An address is considered valid if it adheres to these rules: 1. The address must contain at least one uppercase letter. 2. The address must contain at least one lowercase letter. 3. The address must contain exactly one digit. 4. The length of the address must be at least 3 characters and at most 10 characters. Given a list of addresses, your task is to determine which addresses are valid according to the above rules. Input: - The first line contains an integer t, the number of addresses to check. - The next t lines each contain one address. Output: For each address, print \\"Valid\\" if the address meets all the conditions, otherwise print \\"Invalid\\". Constraints: 1 ≤ t ≤ 1000 Each address string will have a length between 1 and 20 characters. Sample Input: 5 Xy5 aB1 xylor3 AB1c A34z Sample Output: Valid Valid Invalid Valid Invalid","solution":"def is_valid_address(address): Returns \'Valid\' if the address meets the criteria, otherwise \'Invalid\'. Criteria: - At least one uppercase letter - At least one lowercase letter - Exactly one digit - Length between 3 and 10 characters if not (3 <= len(address) <= 10): return \\"Invalid\\" has_upper, has_lower, digit_count = False, False, 0 for char in address: if char.isupper(): has_upper = True elif char.islower(): has_lower = True elif char.isdigit(): digit_count += 1 if has_upper and has_lower and digit_count == 1: return \\"Valid\\" else: return \\"Invalid\\" def check_addresses(addresses): For a list of addresses, check their validity and return a list of results. return [is_valid_address(address) for address in addresses] if __name__ == \\"__main__\\": t = int(input()) addresses = [input().strip() for _ in range(t)] results = check_addresses(addresses) for result in results: print(result)"},{"question":"Luna is working on a research project involving a row of containers, each having a particular height. To support her project, she needs to analyze the skyline formed by these containers. The skyline is determined by the maximum height between any two containers, inclusive. Luna, being meticulous, wants to know the skyline height for multiple queries, each specifying a range of containers. A row of containers is represented by an array of integers where each integer denotes the height of the container at that position. You will be given multiple queries, each asking for the maximum height of containers in a specific subarray. Input The first line contains two integers n and q (1 ≤ n ≤ 1000, 1 ≤ q ≤ 1000) — the number of containers and the number of queries, respectively. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the containers. The next q lines describe the queries. Each query is represented by two integers li and ri (1 ≤ li ≤ ri ≤ n), which indicates the range for that query. Output For each query, print one integer — the maximum height of the containers in the specified range. Example Input 5 3 2 1 5 3 4 1 3 2 4 3 5 Output 5 5 5 Note In the first example: 1. The first query asks for the maximum height between containers 1 to 3, which is max(2, 1, 5) = 5. 2. The second query asks for the maximum height between containers 2 to 4, which is max(1, 5, 3) = 5. 3. The third query asks for the maximum height between containers 3 to 5, which is max(5, 3, 4) = 5.","solution":"def max_height_in_range(n, q, heights, queries): Returns the maximum height of containers for each query range. :param n: Number of containers :param q: Number of queries :param heights: List of integers representing the heights of the containers :param queries: List of tuples, each containing two integers representing the query range :return: List of integers where each integer represents the maximum height in the respective query range results = [] for query in queries: l, r = query # Account for 1-based indexing max_height = max(heights[l-1:r]) results.append(max_height) return results # Example usage n = 5 q = 3 heights = [2, 1, 5, 3, 4] queries = [(1, 3), (2, 4), (3, 5)] print(max_height_in_range(n, q, heights, queries))"},{"question":"A computer virus has been spreading rapidly through a network composed of connected devices. The network is represented as an undirected graph, where each node represents a device and each edge represents a direct connection between two devices. The virus, once it infects a device, spreads to all directly connected devices and continues spreading further. You are tasked with determining the earliest devices that will be completely free from the virus once the networked devices start eliminating the virus. The virus elimination starts simultaneously from multiple initial starting devices in the network, and it spreads from these starting points to all connected devices. Given a network of devices, you need to determine the devices that will be the last to be completely virus-free. This means you need to find the devices that will be free of the virus at the latest possible time, assuming optimal and simultaneous action from all starting points. The graph is conveyed through its adjacency list, and the initial starting devices are provided as a list. # Input 1. An integer `n` (1 ≤ n ≤ 100,000) representing the number of devices in the network. 2. An integer `m` (0 ≤ m ≤ 200,000) representing the number of direct connections (edges) between the devices. 3. Next `m` lines, each containing two integers `u` and `v` (1 ≤ u, v ≤ n) indicating a direct connection between the devices `u` and `v`. 4. An integer `k` (1 ≤ k ≤ n) representing the number of initial starting devices. 5. Next `k` lines, each containing an integer indicating an initial starting device. # Output Output a single integer — the earliest time by which all devices will be completely free from the virus, assuming optimal action from all given starting points. If a device cannot be freed from the virus, output `-1`. # Example Input ``` 6 7 1 2 2 3 2 4 4 5 5 6 3 4 5 1 2 1 6 ``` Output ``` 2 ``` Explanation Given the network: ``` 1 -- 2 -- 3 | | | 5 -- 4 -- 5 | 6 ``` The virus elimination starts simultaneously from devices `1` and `6`. It takes 2 time units for all devices to be free from the virus.","solution":"from collections import deque, defaultdict def earliest_time_to_be_virus_free(n, m, edges, k, starting_devices): # Create the graph as an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Prepare distance dictionary initialized to -1 indicating unvisited distances = {i: -1 for i in range(1, n + 1)} # Use a queue to perform BFS from all starting devices queue = deque() for device in starting_devices: distances[device] = 0 queue.append(device) # Perform BFS while queue: current = queue.popleft() current_distance = distances[current] for neighbor in graph[current]: if distances[neighbor] == -1: # If not visited distances[neighbor] = current_distance + 1 queue.append(neighbor) # Find the maximum distance max_distance = max(distances.values()) if -1 in distances.values(): return -1 # If there exists a device that cannot be reached, return -1 return max_distance # Example Usage n = 6 m = 7 edges = [ (1, 2), (2, 3), (2, 4), (4, 5), (5, 6), (3, 4), (5, 1) ] k = 2 starting_devices = [1, 6] earliest_time_to_be_virus_free(n, m, edges, k, starting_devices)"},{"question":"A company has several employees, each identified by a unique id number. Each employee can have one or more subordinates, but no employee has more than one direct supervisor. Given this hierarchical structure, you need to determine the minimum number of meetings required to inform all employees about an important update. Each meeting includes an employee and all of their direct subordinates, and an employee can inform their subordinates simultaneously in one meeting. Input - The first line contains a single integer `N` (2 ≤ N ≤ 10^5), the number of employees. - Each of the next `N-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ N), indicating that employee `u` is a direct supervisor of employee `v`. Output - Print the minimum number of meetings required to inform all employees. # Example Input ``` 7 1 2 1 3 2 4 2 5 3 6 3 7 ``` Output ``` 3 ``` Explanation Employee 1 can inform employees 2 and 3 in the first meeting. Then, employee 2 can inform employees 4 and 5 in the second meeting, and employee 3 can inform employees 6 and 7 in the third meeting. Hence, a total of 3 meetings are required.","solution":"def min_meetings_required(N, edges): from collections import defaultdict # Build the tree as an adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # DFS function to calculate the maximum depth of the tree def dfs(node, parent): max_depth = 0 for neighbor in tree[node]: if neighbor != parent: max_depth = max(max_depth, dfs(neighbor, node) + 1) return max_depth # Start DFS from node 1 which we assume to be the root return dfs(1, -1)"},{"question":"Alice has a set of N switches, each switch can be either ON (represented by 1) or OFF (represented by 0). She wants to toggle some of these switches such that all switches are either ON or OFF. A single toggle operation flips the state of a switch (ON to OFF or OFF to ON). Alice needs your help to determine the minimum number of toggle operations required to achieve this. Input The first line contains an integer N (1 ≤ N ≤ 1000), the number of switches. The second line contains N space-separated integers denoting the initial states of the switches, where each integer is either 0 or 1. Output Print a single integer — the minimum number of toggle operations required to make all switches either ON or OFF. Examples Input 5 1 0 1 0 1 Output 2 Input 4 1 1 0 0 Output 2 Note In the first sample, Alice can toggle the second and fourth switches to make all switches ON. In the second sample, Alice can toggle the first two switches to make all switches OFF.","solution":"def min_toggle_operations(N, states): This function returns the minimum number of toggle operations required to make all switches either ON or OFF. Parameters: N (int): The number of switches. states (list of int): The initial states of the switches. Returns: int: The minimum number of toggle operations required. # Count the number of switches that are ON (1) count_on = states.count(1) # Count the number of switches that are OFF (0) count_off = N - count_on # The minimum number of toggles required will be the lesser of the two counts return min(count_on, count_off)"},{"question":"You are working as a software developer for a logistics company that manages the distribution of packages across multiple warehouses. To ensure efficient management and timely delivery, the company maintains a record of all packages, including their sizes. Your task is to develop a program that determines if a set of warehouses can store packages such that no warehouse exceeds its allowable capacity. Each warehouse has a specified capacity, and each package has a certain size. The problem can be formulated as follows: given a list of warehouse capacities and a list of package sizes, determine if it is possible to assign all the packages to the warehouses without exceeding the capacity of any warehouse. Input The input consists of multiple test cases. Each test case starts with an integer n (1 ≤ n ≤ 100), representing the number of warehouses. The next line contains n integers representing the capacities of the warehouses. The following line contains n integers representing the sizes of the packages to be stored. The end of input is indicated by a line containing a single zero. Output For each test case, output a single line containing \\"POSSIBLE\\" if it is possible to assign all the packages to the warehouses without exceeding the capacity of any warehouse, and \\"IMPOSSIBLE\\" otherwise. The output should be written with uppercase letters, and should not contain any other extra characters. Sample Input 3 10 20 30 5 10 15 2 8 15 20 3 4 25 30 20 15 10 20 15 10 0 Sample Output POSSIBLE IMPOSSIBLE POSSIBLE Example Input 3 10 20 30 5 10 15 2 8 15 20 3 4 25 30 20 15 10 20 15 10 0 Output POSSIBLE IMPOSSIBLE POSSIBLE","solution":"def can_store_packages(test_cases): results = [] for case in test_cases: capacities, sizes = case capacities.sort() sizes.sort() result = \\"POSSIBLE\\" if all(c >= s for c, s in zip(capacities, sizes)) else \\"IMPOSSIBLE\\" results.append(result) return results def parse_input(input_lines): test_cases = [] lines = iter(input_lines) while True: n = int(next(lines)) if n == 0: break capacities = list(map(int, next(lines).split())) sizes = list(map(int, next(lines).split())) test_cases.append((capacities, sizes)) return test_cases def main(input_lines): test_cases = parse_input(input_lines) results = can_store_packages(test_cases) return results"},{"question":"Anna is fascinated by prime numbers and recently learned about twin primes. Twin primes are pairs of prime numbers (p1, p2) such that p2 = p1 + 2. For example, (3, 5) and (11, 13) are twin primes. Anna has a collection of n integers and she wants to know how many of those integers are part of a twin prime pair. Write a program that determines the number of integers in Anna\'s collection which are part of at least one twin prime pair. Input The first line contains a single integer n (1 ≤ n ≤ 100). The second line contains n integers ai (1 ≤ ai ≤ 109) — the numbers in Anna\'s collection. The numbers in the lines are separated by single spaces. Output In a single line print a single integer — the number of integers in the collection that are part of at least one twin prime pair. Examples Input 5 3 5 6 11 13 Output 4 Input 4 1 2 4 10 Output 0 Note In the first sample, 3 and 5 form a twin prime pair, as well as 11 and 13, so the output is 4 because all of them are part of a twin prime pair. In the second sample, there are no twin prime pairs, hence the output is 0.","solution":"def is_prime(n): Determines if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def count_twin_prime_pairs(n, numbers): Returns the count of numbers in the collection that are part of at least one twin prime pair. # To store a set of numbers for quick lookup num_set = set(numbers) twin_prime_count = 0 for num in num_set: if is_prime(num) and ((num + 2 in num_set and is_prime(num + 2)) or (num - 2 in num_set and is_prime(num - 2))): twin_prime_count += 1 return twin_prime_count # Example usage n = 5 numbers = [3, 5, 6, 11, 13] print(count_twin_prime_pairs(n, numbers)) # Output: 4"},{"question":"Alex is planning a hiking trip in the mountains. The mountains are represented by an array of heights, where each height corresponds to the elevation of a specific point on the trail. Alex wants to find out the maximum difference in height between any two points on the trail. However, there is a constraint: the higher point must come after the lower point in the array, as Alex can only hike forward, not backward. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the number of points on the trail. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 104) — the heights of the points on the trail. Output Print a single integer — the maximum height difference possible that meets the constraints. If no valid pair exists, print 0. Examples Input 5 1 2 6 4 3 Output 5 Input 6 10 9 8 7 6 5 Output 0 Note In the first example, Alex can achieve the maximum height difference by moving from point 1 (height 1) to point 3 (height 6), resulting in a difference of 5. In the second example, no permissible forward movement results in a height increase; thus, the maximum height difference is 0.","solution":"def max_height_difference(n, heights): Returns the maximum difference in height between any two points on the trail, where the higher point comes after the lower point. if n <= 1: return 0 max_diff = 0 min_height = heights[0] for i in range(1, n): if heights[i] > min_height: max_diff = max(max_diff, heights[i] - min_height) else: min_height = min(min_height, heights[i]) return max_diff"},{"question":"A large library is organizing a book reorganization marathon where a group of librarians will rearrange the shelves. The library is composed of n different sections connected by m bidirectional pathways. Each pathway has a distance associated with it, measured in meters. The librarians plan to sort the books such that each section is connected in the shortest possible path to form an ordered circle or a loop with minimum distance. The task is to determine the minimum total distance required to form a loop that visits each section exactly once and returns to the starting section (i.e., a Hamiltonian cycle). If forming such a loop is not possible, return -1. Input The first line of input contains two integers, n and m (2 ≤ n ≤ 20, 1 ≤ m ≤ 100), the number of sections and pathways, respectively. The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), indicating that there is a pathway between section u and section v with a distance of w meters. Output Print a single integer representing the minimum total distance required to form the loop. If the loop is not possible, print -1. Example Input 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 Output 80 Explanation In the given example, a loop that visits every section and returns to the starting section with minimum total distance would be: 1 -> 2 -> 4 -> 3 -> 1. The total distance for this loop is 10 + 25 + 30 + 15 = 80 meters.","solution":"import itertools def minimum_hamiltonian_cycle(n, m, edges): # Create an adjacency matrix for the graph with all values initially set to infinity inf = float(\'inf\') graph = [[inf] * n for _ in range(n)] # Populate the adjacency matrix with given edges for u, v, w in edges: graph[u-1][v-1] = w graph[v-1][u-1] = w # Function to calculate the weight of a given path def path_cost(path): cost = 0 for i in range(len(path) - 1): if graph[path[i]][path[i+1]] == inf: return inf cost += graph[path[i]][path[i+1]] if graph[path[-1]][path[0]] == inf: return inf cost += graph[path[-1]][path[0]] return cost # Generate all possible permutations of the nodes nodes = list(range(n)) min_cost = inf for perm in itertools.permutations(nodes): cost = path_cost(perm) if cost < min_cost: min_cost = cost return min_cost if min_cost < inf else -1 # Sample Input n = 4 m = 6 edges = [ (1, 2, 10), (1, 3, 15), (1, 4, 20), (2, 3, 35), (2, 4, 25), (3, 4, 30) ] # Output the result for the given input print(minimum_hamiltonian_cycle(n, m, edges))"},{"question":"Given two strings s1 and s2, determine the minimum number of operations required to transform s1 into s2. You are allowed to insert a character, remove a character, or replace a character. Each operation counts as 1 step. Constraints * 1 leq |s1|, |s2| leq 1000 Input Input is given from Standard Input in the following format: s1 s2 Output Print the minimum number of operations required to transform s1 into s2. Examples Input sunday saturday Output 3 Input cat cut Output 1 Input kitten sitting Output 3","solution":"def min_operations_to_transform(s1, s2): Returns the minimum number of operations required to transform s1 into s2. Operations allowed: insert, remove, replace a character. # Get lengths of both strings m, n = len(s1), len(s2) # Create a DP array to store the number of operations dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize DP array for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s1 is empty, insert all characters of s2 elif j == 0: dp[i][j] = i # If s2 is empty, remove all characters of s1 elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # No operation required if characters are same else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove last character of s1 dp[i][j - 1], # Insert last character of s2 dp[i - 1][j - 1] # Replace last character of s1 ) return dp[m][n]"},{"question":"A gardener wants to plant a set of trees in his garden following a specific pattern to create a beautiful view. The garden consists of a grid of size n × m. The gardener has to plant trees in such a way that no two trees are in the same row or the same column. Being a perfectionist, the gardener wants to ensure that the placement of trees follows a special rule: a primary diagonal from top-left to bottom-right or its upper or lower parallel diagonals must contain the maximum number of trees. A primary diagonal line contains the cells where the row and column indexes are equal, such as (0, 0), (1, 1), (2, 2), ..., (k, k). Given the dimensions of the garden, you need to find the maximum number of trees that can be planted according to this rule. In case multiple diagonals share the maximum number of trees, choose the one which is the highest (farthest from the top-left corner). Input The input consists of two integers n and m (1 ≤ n, m ≤ 1000): the dimensions of the garden. Output Print a single integer — the maximum number of trees that can be planted in one of the primary diagonals or its upper/lower parallel diagonals. Examples Input 3 3 Output 3 Input 5 4 Output 4","solution":"def max_trees_on_diagonal(n, m): Returns the maximum number of trees that can be planted on one of the primary diagonals or its upper/lower parallel diagonals in an n x m grid. return min(n, m)"},{"question":"Input The input contains a single positive integer n (1 ≤ n ≤ 1000). Output Output the highest power of 2 that is less than or equal to n. Examples Input 5 Output 4 Input 13 Output 8 Input 1024 Output 1024 Input 30 Output 16","solution":"def highest_power_of_2(n): Returns the highest power of 2 less than or equal to n. power = 1 while power * 2 <= n: power *= 2 return power"},{"question":"You are given two rectangular regions on the xy-plane. The first rectangle has its sides parallel to the x and y axes, and it is defined by its corners with coordinates (x1, y1) and (x2, y2). The second rectangle is defined similarly by its corners with coordinates (x3, y3) and (x4, y4). Determine the area of the overlap between the two rectangles. If the rectangles do not overlap, the area of the overlap is 0. Constraints * -10^9 ≤ x1, y1, x2, y2, x3, y3, x4, y4 ≤ 10^9 * (x1, y1) and (x2, y2) are distinct points. * (x3, y3) and (x4, y4) are distinct points. Input The input is given from Standard Input in the following format: x1 y1 x2 y2 x3 y3 x4 y4 Output Output the area of the overlap between the two rectangles. Examples Input 1 1 4 3 2 2 5 5 Output 2 Input 0 0 2 2 2 2 4 4 Output 0 Input 1 1 3 3 2 0 5 4 Output 2","solution":"def calculate_overlap_area(x1, y1, x2, y2, x3, y3, x4, y4): Calculate the area of the overlap between two rectangles. The first rectangle is defined by two points (x1, y1) and (x2, y2). The second rectangle is defined by two points (x3, y3) and (x4, y4). Returns the overlap area if any, otherwise 0. # Ensure that for each rectangle, we know the bottom-left and top-right corners x1, y1, x2, y2 = min(x1, x2), min(y1, y2), max(x1, x2), max(y1, y2) x3, y3, x4, y4 = min(x3, x4), min(y3, y4), max(x3, x4), max(y3, y4) # Calculate the overlapping rectangle\'s bottom-left and top-right corners overlap_x1 = max(x1, x3) overlap_y1 = max(y1, y3) overlap_x2 = min(x2, x4) overlap_y2 = min(y2, y4) # Check if there is an overlap if overlap_x1 < overlap_x2 and overlap_y1 < overlap_y2: overlap_width = overlap_x2 - overlap_x1 overlap_height = overlap_y2 - overlap_y1 return overlap_width * overlap_height else: return 0"},{"question":"In a small town, there\'s a series of roads connecting various intersections. Each intersection has a unique identifier ranging from 1 to n. However, some intersections have directed roads that only allow traffic in one direction. The town has k detective agencies, each positioned at different intersections. Each agency wants to gather information by sending agents to other intersections, but agents can only follow the directed roads. The detectives need to ensure that from every agency\'s starting intersection, it\'s possible to reach all other intersections. They want to verify if the current road design allows this. If it doesn’t, they need to find out the minimum number of additional roads required to connect disconnected parts of the town, making it possible for agents to reach every intersection from any detective agency. Input The first line contains three integers n, m, and k (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5, 1 ≤ k ≤ n) — the number of intersections, the number of directed roads, and the number of detective agencies. The next m lines describe the directed roads. Each road is represented by two integers u and v (1 ≤ u, v ≤ n) indicating a directed road from intersection u to intersection v. The last line contains k integers a_1, a_2, ..., a_k (1 ≤ a_i ≤ n) — the positions of the detective agencies. Output Print two lines. On the first line, print \\"YES\\" if from each agency\'s starting intersection all other intersections are reachable, otherwise print \\"NO\\". If the answer is \\"NO\\", on the second line print the minimum number of additional roads required to achieve the connectivity goal. Examples Input 6 6 2 1 2 2 3 3 4 4 5 5 6 6 1 1 4 Output YES Input 6 4 2 1 2 2 3 4 5 5 6 1 4 Output NO 2 Note In the first example, there are 6 intersections and 6 directed roads forming a cycle. The two detective agencies are at intersections 1 and 4. From either agency, all other intersections can be reached due to the cycle. In the second example, the town\'s intersections are less connected, with detective agencies at intersections 1 and 4. Some intersections cannot be reached due to the lack of direct roads. Therefore, additional connections are needed to ensure every intersection can be reached from any agency. This question explores graph traversal and connectivity, examining if the graph\'s strongly connected components (SCC) handle reachability for directed edges. The solution may involve algorithms such as Depth First Search (DFS), Tarjan\'s or Kosaraju’s algorithm for finding SCCs, and potentially designing a minimum spanning tree to add the least number of required roads.","solution":"import sys from collections import defaultdict, deque def find_scc(n, graph): index = [None] * n lowlink = [None] * n on_stack = [False] * n stack = [] sccs = [] index_counter = [0] def strongconnect(v): index[v] = index_counter[0] lowlink[v] = index_counter[0] index_counter[0] += 1 stack.append(v) on_stack[v] = True for w in graph[v]: if index[w] is None: strongconnect(w) lowlink[v] = min(lowlink[v], lowlink[w]) elif on_stack[w]: lowlink[v] = min(lowlink[v], index[w]) if lowlink[v] == index[v]: scc = [] while True: w = stack.pop() on_stack[w] = False scc.append(w) if w == v: break sccs.append(scc) for v in range(n): if index[v] is None: strongconnect(v) return sccs def minimum_additional_roads_to_connect_sccs(n, sccs, graph): scc_graph = defaultdict(set) scc_id = [-1] * n for i, scc in enumerate(sccs): for v in scc: scc_id[v] = i for v in range(n): for w in graph[v]: if scc_id[v] != scc_id[w]: scc_graph[scc_id[v]].add(scc_id[w]) in_deg = [0] * len(sccs) out_deg = [0] * len(sccs) for v in scc_graph: for w in scc_graph[v]: out_deg[v] += 1 in_deg[w] += 1 in_deg_zero = sum(1 for x in in_deg if x == 0) out_deg_zero = sum(1 for x in out_deg if x == 0) return max(in_deg_zero, out_deg_zero) def solve(n, m, k, roads, agencies): graph = defaultdict(list) for u, v in roads: graph[u - 1].append(v - 1) sccs = find_scc(n, graph) unique_sccs = set() for a in agencies: for scc in sccs: if (a - 1) in scc: unique_sccs.add(tuple(scc)) break if len(unique_sccs) == 1: return \\"YES\\" else: additional_roads = minimum_additional_roads_to_connect_sccs(n, sccs, graph) return \\"NO\\", additional_roads"},{"question":"Input Given a string S of length N (1 ≤ N ≤ 1000) consisting of lowercase alphabets, check if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. Output Output \\"POSSIBLE\\" if such a rearrangement is feasible, otherwise output \\"IMPOSSIBLE\\". Examples Input \\"aaabb\\" Output \\"POSSIBLE\\" Input \\"aaab\\" Output \\"IMPOSSIBLE\\" Input \\"abcd\\" Output \\"POSSIBLE\\" Input \\"aa\\" Output \\"IMPOSSIBLE\\"","solution":"from collections import Counter def is_rearrangement_possible(S): Checks if it is possible to rearrange the characters of the string S such that no two adjacent characters are the same. if not S: return \\"IMPOSSIBLE\\" n = len(S) char_counts = Counter(S) max_count = max(char_counts.values()) # It is impossible to rearrange if the most frequent character count is more than (N + 1) // 2 if max_count > (n + 1) // 2: return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\""},{"question":"Develop a Python function that takes a list of integers and returns another list that replaces every integer in the original list with the product of all the other numbers in the list. The product of an empty list is defined as 1, and for a single-element list, the product should be that single element itself. You are required to implement the function without using division. Function Signature: ```python def product_except_self(nums: List[int]) -> List[int]: pass ``` Input: - A single list `nums` of integers. Output: - A list of integers as described above, where each element is the product of all other elements in the original list. Example: ```python >>> product_except_self([1, 2, 3, 4]) [24, 12, 8, 6] >>> product_except_self([0, 1, 2, 3]) [6, 0, 0, 0] >>> product_except_self([0]) [0] ``` Notes: - You should aim to solve this problem with a time complexity of O(n) and space complexity of O(n) or better. - Ensure that your solution handles edge cases, such as lists containing zero, empty lists, and lists with a single element.","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: if not nums: return [] if len(nums) == 1: return nums length = len(nums) # Product of all elements to the left of each index left_product = [1] * length for i in range(1, length): left_product[i] = left_product[i - 1] * nums[i - 1] # Product of all elements to the right of each index right_product = [1] * length for i in range(length - 2, -1, -1): right_product[i] = right_product[i + 1] * nums[i + 1] # Product of elements without itself result = [1] * length for i in range(length): result[i] = left_product[i] * right_product[i] return result"},{"question":"Farmer John owns a farm with n cows, each with a unique productivity rating initially represented by an integer array p of length n. Farmer John can perform two types of operations: 1. Increase the productivity of a specific cow by a given amount. 2. Calculate the maximum productivity difference between any two cows in a given subgroup of cows. You need to handle a number of queries where each query can be either of the two types described above. - Type 1: Increase the productivity of cow i by x. - Type 2: Calculate the maximum difference in productivity among cows in the subgroup defined by indices [l, r]. # Input - The first line contains two integers n and q (2 ≤ n, q ≤ 100,000) — the number of cows and the number of queries respectively. - The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^5) — the initial productivity ratings of the cows. - The next q lines describe the queries. Each query starts with an integer t (1 ≤ t ≤ 2) — the type of the query. * If t = 1, the line contains two integers i and x (1 ≤ i ≤ n, 1 ≤ x ≤ 10^5) — meaning Farmer John increases the productivity of cow i by x. * If t = 2, the line contains two integers l and r (1 ≤ l ≤ r ≤ n) — meaning Farmer John queries the maximum difference in productivity of cows between indices l and r. # Output - For each query of the second type, print the result on a new line. # Example Input ``` 5 4 10 20 30 40 50 2 1 5 1 3 10 2 1 3 2 3 5 ``` Output ``` 40 30 30 ``` # Explanation - For the first query `2 1 5`, the maximum difference in productivity among cows 1 through 5 is 50 - 10 = 40. - The second query `1 3 10` increases the productivity of cow 3 by 10, updating it from 30 to 40. - For the third query `2 1 3`, the range is now `[10, 20, 40]` which has a difference of 40 - 10 = 30. - The fourth query `2 3 5` evaluates the range `[40, 40, 50]`, which has a difference of 50 - 40 = 10. - The maximum difference is correctly evaluated in each query according to the provided operations. Make sure your code efficiently handles inputs as large as the given constraints to ensure optimal performance.","solution":"class Farm: def __init__(self, productivity): self.productivity = productivity def increase_productivity(self, i, x): # increase productivity of cow at index i (1-based index) self.productivity[i - 1] += x def max_difference_in_range(self, l, r): # get the maximum difference in productivity between indices l and r (1-based index) range_productivity = self.productivity[l - 1:r] return max(range_productivity) - min(range_productivity) def process_queries(n, q, p, queries): farm = Farm(p) results = [] for query in queries: t = query[0] if t == 1: _, i, x = query farm.increase_productivity(i, x) elif t == 2: _, l, r = query result = farm.max_difference_in_range(l, r) results.append(result) return results # Example usage: n, q = 5, 4 p = [10, 20, 30, 40, 50] queries = [ [2, 1, 5], [1, 3, 10], [2, 1, 3], [2, 3, 5] ] print(process_queries(n, q, p, queries))"},{"question":"In this problem, you are tasked with designing a scheduler for meeting rooms. The scheduler should allocate rooms efficiently based on the meeting start and end times. Given a list of meetings with their starting and ending times, your goal is to determine the minimum number of meeting rooms required so that no two meetings overlap in a single room. Each meeting is represented by a pair of integers `[start, end]` where `start` represents the starting time and `end` represents the ending time. You can assume that `start` is strictly less than `end`. Input: - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of meetings. - The next `n` lines each contain two integers `start` and `end` (0 ≤ start < end ≤ 1000) — the start and end times of the meetings. Output: - Print a single integer — the minimum number of meeting rooms required. Example Input: 3 1 4 2 5 3 6 Output: 3 Explanation: - Meeting 1: From time 1 to time 4 - Meeting 2: From time 2 to time 5 - Meeting 3: From time 3 to time 6 Each meeting overlaps with at least one other meeting, so all three require separate rooms.","solution":"def min_meeting_rooms(meetings): Determine the minimum number of meeting rooms required. :param meetings: List of tuples (start, end) representing meeting times :return: Minimum number of meeting rooms required if not meetings: return 0 # Separate start and end times start_times = sorted([meeting[0] for meeting in meetings]) end_times = sorted([meeting[1] for meeting in meetings]) start_pointer = end_pointer = 0 used_rooms = 0 max_rooms = 0 while start_pointer < len(meetings): if start_times[start_pointer] < end_times[end_pointer]: used_rooms += 1 start_pointer += 1 else: used_rooms -= 1 end_pointer += 1 max_rooms = max(max_rooms, used_rooms) return max_rooms"},{"question":"Given two integers n and m, you have to construct an n x m matrix that fulfills the following conditions: 1. Each element in the matrix is a unique integer from 1 to n*m. 2. All adjacent elements in any row or column differ by exactly 1. If it is impossible to construct such a matrix, output \\"Impossible\\". # Input - The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000): the dimensions of the matrix. # Output - If it is impossible to construct the matrix, print \\"Impossible\\". - Otherwise, print the n x m matrix where each element is described above. Each of the following n lines contains m integers separated by a space. # Examples Example 1 **Input:** ``` 2 3 ``` **Output:** ``` Impossible ``` Example 2 **Input:** ``` 1 5 ``` **Output:** ``` 1 2 3 4 5 ``` Example 3 **Input:** ``` 3 3 ``` **Output:** ``` 1 2 3 6 5 4 7 8 9 ```","solution":"def construct_matrix(n, m): if n == 1: return [[i for i in range(1, m + 1)]] if m == 1: return [[i] for i in range(1, n + 1)] if n == 2 or m == 2: return \\"Impossible\\" matrix = [] num = 1 for i in range(n): row = [] for j in range(m): row.append(num) num += 1 if i % 2 == 1: row.reverse() matrix.append(row) return matrix"},{"question":"There is a need to manage the attendance of students in a classroom. Your task is to write a program that identifies students who attended less than 75% of the total lectures. The program should read a list of data where each item includes the student ID s and a boolean value a indicating whether the student attended a particular lecture (1 for attended, 0 for missed). The program should print IDs of students whose attendance rate is less than 75% of the number of lectures in order of appearance. If all students have an attendance rate of 75% or higher, the program should print \\"All good\\". You can assume that n < 200, and each student has a unique ID. Input The input consists of several datasets. Each dataset contains: n (the number of different students) l (the number of lectures) s a a a ... (student ID followed by attendance for each lecture) : : s a a a ... The input ends with a line including a single 0. Output For each dataset, print a list of student IDs with attendance rates of less than 75% or the text \\"All good\\". Example Input 3 4 101 1 1 0 0 102 1 1 1 1 103 0 0 0 0 2 3 104 1 0 0 105 1 1 1 0 Output 101 103 104","solution":"def manage_attendance(data): results = [] i = 0 while i < len(data): n = int(data[i]) if n == 0: break i += 1 l = int(data[i]) i += 1 students = {} for _ in range(n): student_info = data[i].split() student_id = student_info[0] attendances = list(map(int, student_info[1:])) students[student_id] = sum(attendances) / l i += 1 result = [student_id for student_id, attendance_rate in students.items() if attendance_rate < 0.75] results.append(result if result else [\\"All good\\"]) return results"},{"question":"In the kingdom of ByteLand, there are n castles positioned in a straight line. Each castle has a certain height. The king has decided to perform a ceremonial shooting session and wants to hit as many castles as possible with a single arrow. The arrow can only travel horizontally and the king can choose the height of the arrow. Thus, the king needs to find the optimal height for the arrow so that it travels uninterrupted through the maximum number of consecutive castles, starting from the first castle in its path. For example, if the heights of the castles are [5, 3, 4, 4, 3, 5], the arrow at height 4 will hit both the third and fourth castles. Write a program that finds the maximum number of consecutive castles that can be hit by a single arrow, starting from any castle in the sequence. # Input - The first line contains a single integer n (1 ≤ n ≤ 200,000) denoting the number of castles. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) representing the heights of the castles. # Output - Print a single integer, the maximum number of consecutive castles that can be hit by a single arrow, starting from any castle. # Example Input 5 3 3 3 2 2 Output 3 Input 6 1 2 3 4 5 6 Output 1 # Note In the first example, the arrow at height 3 hits the first three castles consecutively. In the second example, the arrow can hit at most one castle consecutively, since all castle heights are distinct and the arrow travels horizontally.","solution":"def max_consecutive_castles(n, heights): Returns the maximum number of consecutive castles that can be hit by a single arrow. if n <= 1: return n # Initialize variables max_length = 1 current_length = 1 # Iterate through the list to find the longest streak of the same height for i in range(1, n): if heights[i] == heights[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 # Update max_length in case the longest streak ends at the last element max_length = max(max_length, current_length) return max_length"},{"question":"Complete the function `first_non_repeating_char(s: str) -> str` that finds the first non-repeating character in a given string `s` and returns it. If there is no such character, return an underscore (`\'_\'`). Input - A single string `s` with a length between `1` and `1000` consisting of lowercase English letters. Output - A single character that is the first non-repeating character in the string, or `\'_\'` if no non-repeating character exists. Example ```python def first_non_repeating_char(s: str) -> str: pass # Example usage print(first_non_repeating_char(\\"aabccdeff\\")) # Output: \'b\' print(first_non_repeating_char(\\"aabbcc\\")) # Output: \'_\' print(first_non_repeating_char(\\"a\\")) # Output: \'a\' ``` Constraints It\'s guaranteed that the string contains only lowercase English letters.","solution":"def first_non_repeating_char(s: str) -> str: Finds the first non-repeating character in the given string s. Returns the first non-repeating character, or \'_\' if there is no such character. from collections import Counter # Count occurrences of each character char_count = Counter(s) # Iterate through the string to find the first non-repeating character for char in s: if char_count[char] == 1: return char return \'_\'"},{"question":"A local technology company organizes a coding competition each year. This year, they decided to include a problem based on string transformations. The problem description is as follows: A string is considered beautiful if its characters can be rearranged such that no two adjacent characters are the same. You are given a string s and your task is to determine whether it is possible to rearrange the characters of s to make it a beautiful string. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s, consisting of lowercase alphabetic characters only (1 ≤ |s| ≤ 1000). Output For each test case, output YES if it is possible to rearrange the string s to make it a beautiful string. Otherwise, output NO. Examples Input 3 aabb aaab abcabc Output YES NO YES Explanation In the first case, the string \\"aabb\\" can be rearranged to \\"abab\\" or \\"baba\\", both of which are beautiful. In the second case, the string \\"aaab\\" cannot be rearranged to avoid adjacent \'a\'s. In the third case, the string \\"abcabc\\" is already beautiful, and thus can remain as it is. Note: Ensure to handle the input and output efficiently to cater for the upper edge cases.","solution":"def is_beautiful_possible(s): from collections import Counter # Count the frequency of each character freq = Counter(s) # Find the maximum frequency max_freq = max(freq.values()) # If the number of characters without the most frequent character is less than # the frequency of the most frequent character - 1, then it is not possible to # rearrange the string to fulfill the requirement. if max_freq > (len(s) - max_freq + 1): return \\"NO\\" else: return \\"YES\\" def process_test_cases(test_cases): results = [] for s in test_cases: results.append(is_beautiful_possible(s)) return results"},{"question":"Given an array of integers and a target integer, write a function to determine if there are any two distinct elements in the array that sum up to the target. Your function should return \\"True\\" if such a pair exists and \\"False\\" otherwise. Make sure your solution has a time complexity of O(n). # Input - The first line contains an integer `N` (1 ≤ N ≤ 100,000), the number of elements in the array. - The second line contains `N` integers separated by spaces, each representing the elements of the array. The absolute value of each element will be ≤ 10^9. - The third line contains a single integer `target`, the target sum (|target| ≤ 2 * 10^9). # Output - Output a single line containing \\"True\\" if there exist two distinct elements in the array whose sum is equal to the target, otherwise \\"False\\". # Example Input 5 2 7 11 15 -2 9 Output True Input 4 1 2 3 4 8 Output False # Explanation In the first example, the pair (2, 7) sums to 9, so the output is \\"True\\". In the second example, there are no pairs of elements that sum to 8, so the output is \\"False\\".","solution":"def has_pair_with_sum(nums, target): Determine if there are two distinct elements in the array that sum up to the target. :param nums: List of integers :param target: The target sum :return: True if such a pair exists, False otherwise seen = set() for num in nums: if (target - num) in seen: return True seen.add(num) return False"},{"question":"A robot is placed on a grid of n rows and m columns, starting from the top-left cell (1, 1). It can move right, down, left, or up by one cell at a time. The robot aims to follow a specific set of movement instructions given as a string, where each character indicates a direction (\'R\' for right, \'D\' for down, \'L\' for left, \'U\' for up). However, the grid contains some cells that are blocked, and the robot cannot move into these cells. Your task is to determine if the robot can successfully follow the given instructions without hitting any of the blocked cells or moving out of the grid. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns, respectively, of the grid. The next n lines each contain m characters, representing the grid. A \'.\' indicates an open cell, while a \'#\' represents a blocked cell. The last line of each test case contains a string of length up to 1000, representing the movement instructions. Output For each test case, print \\"YES\\" if the robot can successfully follow all the instructions without moving out of the grid or hitting a blocked cell, otherwise print \\"NO\\". Example Input 2 4 4 .... .#.. .... .... RRDD 3 3 ... .#. #.. DDRRU Output YES NO Note In the first test case, the robot can follow the instructions \\"RRDD\\" successfully, moving to (1, 2), (1, 3), (2, 3), and finally (3, 3), all of which are on open cells. In the second test case, the robot moves to (2, 1) and (3, 1), both open. However, the next move is to the right, but the cell (3, 2) is blocked. Therefore, the output is \\"NO\\".","solution":"def can_follow_instructions(n, m, grid, instructions): # Start at the top-left corner (0, 0) in zero-based indexing x, y = 0, 0 for move in instructions: if move == \'R\': y += 1 elif move == \'L\': y -= 1 elif move == \'U\': x -= 1 elif move == \'D\': x += 1 # Check if new position is out of bounds if x < 0 or x >= n or y < 0 or y >= m: return \\"NO\\" # Check if new position is a blocked cell if grid[x][y] == \'#\': return \\"NO\\" return \\"YES\\" def solve(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][\'grid_size\'] grid = test_cases[i][\'grid\'] instructions = test_cases[i][\'instructions\'] result = can_follow_instructions(n, m, grid, instructions) results.append(result) return results"},{"question":"You are managing a supermarket inventory and need to keep track of the quantities of various items. You have implemented a system to handle this, but now you need to process a series of stock updates and purchase requests efficiently. For a given list of initial stock quantities for N unique items, process M operations where each operation can either be a stock update or a purchase request. A stock update increases the quantity of a specific item, while a purchase request decreases the quantity if there is enough stock available. Input - The first line contains two integers N and M, where N is the number of unique items and M is the number of operations. - The second line contains N integers, representing the initial stock quantities of each item. - The next M lines describe the operations. Each operation is in the format: - \\"update U Q\\" - where U is the index of the item (0-based) and Q is the quantity to add to that item. - \\"purchase P Q\\" - where P is the index of the item (0-based) and Q is the quantity to purchase from that item. Output - For each \\"purchase\\" operation, print either \\"success\\" if the purchase can be completed or \\"failure\\" if there is not enough stock. Constraints 1 ≤ N, M ≤ 100000 0 ≤ Initial stock quantity, Q ≤ 10^5 SAMPLE INPUT 3 5 10 5 8 purchase 1 3 purchase 2 10 update 0 5 purchase 0 12 purchase 2 5 SAMPLE OUTPUT success failure success success","solution":"def manage_supermarket_inventory(N, M, initial_stocks, operations): stocks = initial_stocks[:] results = [] for operation in operations: op_type, idx, quantity = operation if op_type == \\"update\\": stocks[idx] += quantity elif op_type == \\"purchase\\": if stocks[idx] >= quantity: stocks[idx] -= quantity results.append(\\"success\\") else: results.append(\\"failure\\") return results"},{"question":"You are given an array of integers where each element appears three times except for one. Find that single one that does not repeat thrice. Input The first input line contains one integer T — the number of test cases (1 ≤ T ≤ 100). Each test case contains two lines. The first line of a test case contains an integer n (1 ≤ n ≤ 3·10^4) — the size of the array. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), the elements of the array. Output For each test case, print a single integer — the element that appears exactly once. Examples Input 2 4 2 2 3 2 7 0 1 0 1 0 1 99 Output 3 99","solution":"def single_number(arr): Given an array where every element appears three times except for one, find that single one which does not appear three times. ones, twos = 0, 0 for num in arr: ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones return ones def find_unique_in_test_cases(test_cases): Given multiple test cases, for each one determine the single number that does not repeat thrice. results = [] for n, arr in test_cases: result = single_number(arr) results.append(result) return results"},{"question":"You are given a square matrix of size N x N consisting of lowercase Latin letters. You need to rotate the matrix 90 degrees clockwise. The rotation can be achieved by first transposing the matrix and then reversing each row. Input The first line contains an integer N (2 ≤ N ≤ 10) which represents the size of the matrix. The next N lines each contain a string of N lowercase Latin letters representing the rows of the matrix. Output Output the matrix after rotating it 90 degrees clockwise. Examples Input 3 abc def ghi Output gda heb ifc Input 2 az by Output ba zy","solution":"def rotate_matrix_clockwise(matrix): Rotates the given N x N matrix 90 degrees clockwise. Parameters: matrix (list of list of str): The matrix to be rotated. Returns: list of list of str: The rotated matrix. # Transpose the matrix transposed_matrix = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))] # Reverse each row rotated_matrix = [row[::-1] for row in transposed_matrix] return rotated_matrix def format_matrix(matrix): Formats the matrix output as a list of strings. Parameters: matrix (list of list of str): The matrix to be formatted. Returns: list of str: The formatted matrix as list of strings. return [\'\'.join(row) for row in matrix] def read_and_rotate_matrix(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) matrix = [list(data[i + 1]) for i in range(N)] rotated_matrix = rotate_matrix_clockwise(matrix) formatted_matrix = format_matrix(rotated_matrix) for line in formatted_matrix: print(line)"},{"question":"A company organizes events where employees participate in different activities. There are `N` events planned throughout the year, each starting and ending at specific times. Determine the maximum number of non-overlapping events an employee can attend. Given the start and end times of each event, we need to find the maximum number of events that an employee can attend without any overlapping. Constraints * 1 leq N leq 10^5 * 1 leq start_i < end_i leq 10^5 Input The input is given in the following format. N start_1 end_1 start_2 end_2 : start_N end_N Output Print the maximum number of non-overlapping events in a line. Examples Input 5 1 3 2 5 4 7 6 9 8 10 Output 3 Input 3 1 2 3 4 5 6 Output 3","solution":"def max_non_overlapping_events(events): Returns the maximum number of non-overlapping events an employee can attend. :param events: List of tuples, each tuple has two integers representing start and end times. :return: Integer, maximum number of non-overlapping events. # Sort the events based on their end time events.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in events: if start >= end_time: count += 1 end_time = end return count def process_input(input_string): lines = input_string.splitlines() N = int(lines[0]) events = [tuple(map(int, x.split())) for x in lines[1:]] return events"},{"question":"In a galaxy far away, warrior droids are stationed on planets connected by hyperlanes. These droids need to maintain communication with the base to receive new orders. To ensure this, a chain of command needs to be established between the base planet and all other planets, such that: * The base planet has direct communication with at least one other planet. * Each planet (except the base) must be able to communicate with the base via a series of planets, where each adjacent pair has direct communication. * Each planet is willing to relay messages only if they receive communication from exactly one other planet, maintaining a strict hierarchy. Your task is to determine whether it is possible to establish such a chain of command and, if it is, generate a possible communication path for each planet to the base. Input The first line of the input contains an integer t, the number of test cases (1 ≤ t ≤ 100). Each test case starts with two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) representing the number of planets and the number of hyperlanes, respectively. Planets are numbered from 1 to n, with planet 1 being the base. Then m lines follow, each containing two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating a bidirectional hyperlane between planets u and v. Output For each test case, if it is not possible to establish the desired communication path, output \\"IMPOSSIBLE\\". Otherwise, output \\"POSSIBLE\\", followed by n-1 lines, each containing two integers u and v, indicating that planet u communicates with planet v directly. Examples Input 2 3 2 1 2 2 3 4 3 1 2 2 3 3 4 Output POSSIBLE 2 1 3 2 POSSIBLE 2 1 3 2 4 3","solution":"def establish_chain_of_command(t, test_cases): Determines if a communication chain can be established and generates a possible communication path for each planet to the base. Parameters: t (int): The number of test cases. test_cases (list): List of test cases, each containing: - n (int): Number of planets. - m (int): Number of hyperlanes. - edges (list of tuples): Each tuple contains two integers u and v indicating a hyperlane between planets u and v. Returns: list: A list of results for each test case. Each result is either \\"IMPOSSIBLE\\" or \\"POSSIBLE\\" followed by a list of communication paths. from collections import defaultdict, deque results = [] for case in test_cases: n, m, edges = case graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to establish the tree structure parent = [-1] * (n + 1) parents_count = [0] * (n + 1) queue = deque([1]) parent[1] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if parent[neighbor] == -1: # Not visited parent[neighbor] = node parents_count[neighbor] += 1 queue.append(neighbor) elif parents_count[neighbor] > 0: # Cycle detected continue if -1 in parent[2:]: results.append(\\"IMPOSSIBLE\\") else: result = [\\"POSSIBLE\\"] for i in range(2, n + 1): result.append(f\\"{i} {parent[i]}\\") results.append(\\"n\\".join(result)) return results # Wrapper function to work with input and output in the required format. def process_input_output(input_data): t = int(input_data[0]) test_cases = [] idx = 1 for _ in range(t): n, m = map(int, input_data[idx].split()) edges = [] for j in range(m): u, v = map(int, input_data[idx + 1 + j].split()) edges.append((u, v)) idx += 1 + m test_cases.append((n, m, edges)) results = establish_chain_of_command(t, test_cases) return \\"n\\".join(results) # Example usage: input_data = [ \\"2\\", \\"3 2\\", \\"1 2\\", \\"2 3\\", \\"4 3\\", \\"1 2\\", \\"2 3\\", \\"3 4\\" ] print(process_input_output(input_data))"},{"question":"There are `n` attendees in a conference, and each attendee would like to greet others. However, each attendee has different numbers of greetings they wish to perform. The organizing team wants to create a pair of attendees for each greeting such that each attendee\'s required number of greetings is matched exactly. You are given an integer `n` (number of attendees) and an array `a` of length `n` where `a[i]` denotes the number of greetings the i-th attendee wants to perform. Determine if it is possible to achieve the exact number of greetings for each attendee by pairing them appropriately. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input - The first line contains an integer `n` (1 ≤ n ≤ 100). - The second line contains `n` integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 100). Output - Print \\"YES\\" if it is possible to arrange the pairs of greetings, otherwise print \\"NO\\". Example # Input: 4 1 2 1 2 # Output: YES # Input: 3 1 2 1 # Output: NO","solution":"def can_pair_greetings(n, a): Determines if it\'s possible to arrange pairs such that each attendee\'s required number of greetings is matched exactly. Args: n (int): Number of attendees. a (list): List of integers where a[i] denotes the number of greetings the i-th attendee wants to perform. Returns: str: \\"YES\\" if it is possible to arrange the pairs, otherwise returns \\"NO\\". from collections import Counter greeting_counts = Counter(a) # For each unique number of greetings, the counts must be even for count in greeting_counts.values(): if count % 2 != 0: return \\"NO\\" return \\"YES\\""},{"question":"You are given a grid of characters representing different types of terrain. Each cell in the grid is either land (\'L\') or water (\'W\'). The grid represents an archipelago (a collection of islands). An island is a group of connected \'L\' cells. Two cells are considered connected if they share a side. Your task is to count the number of distinct islands in the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) – the number of rows and columns in the grid. Each of the next n lines contains a string of length m consisting of characters \'L\' and \'W\' only. Output Print a single integer – the number of distinct islands in the grid. Examples Input 4 5 LLWLL LLWLL WWLLL LLWWW Output 3 Input 3 3 LLL LWL LLL Output 1 Note In the first sample, there are three distinct islands: 1. The island at the top-left corner. 2. The smaller island in the center. 3. The larger island at the bottom-right. In the second sample, there is only one large island, despite there being water in the center, as it is all connected directly or indirectly.","solution":"def num_islands(grid): Returns the number of distinct islands in the given grid. Parameters: grid (List[List[str]]): The grid of terrain Returns: int: The number of distinct islands if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) def dfs(i, j): if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] != \'L\': return grid[i][j] = \'Visited\' movements = [(-1, 0), (1, 0), (0, -1), (0, 1)] for move in movements: ni, nj = i + move[0], j + move[1] dfs(ni, nj) count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': dfs(i, j) count += 1 return count"},{"question":"You are given an array of positive integers where each integer represents the size of a box. The array may contain duplicate values. You want to combine the boxes in pairs in such a way that you minimize the maximum size of the resulting combined boxes. Combining two boxes with sizes `a` and `b` results in a new box of size `a + b`. Design an algorithm that finds the minimized maximum size of the resulting boxes after combining all possible pairs sequentially until one box is left. **Input** The first line contains an integer `n` (2 ≤ n ≤ 10^5) — the number of boxes. The second line contains `n` integers `ai` (1 ≤ ai ≤ 10^9) — the sizes of the boxes. **Output** Print a single integer — the minimized maximum size of the combined box after performing all possible pair combinations. **Examples** **Input** 5 1 2 3 4 5 **Output** 15 **Input** 4 4 2 9 1 **Output** 16 **Note** In the first example, you can combine the boxes in the following steps: (1+2=3, 3+3=6, 4+6=10, 5+10=15). The maximum size of the resulting combinations in this manner is 15. In the second example, you can combine the boxes in the following steps: (4+2=6, 6+9=15, 15+1=16). The maximum size of the resulting combinations in this manner is 16.","solution":"import heapq def minimized_max_box_size(n, sizes): Given a number of boxes and their respective sizes, this function returns the minimized maximum size of the single resulting box after combining all possible pairs sequentially. # Use a min-heap to always combine the smallest two elements heapq.heapify(sizes) while len(sizes) > 1: # Pop the two smallest elements a = heapq.heappop(sizes) b = heapq.heappop(sizes) # Combine them combined_size = a + b # Add the combined size back to the heap heapq.heappush(sizes, combined_size) # The final element in the heap is the minimized max size of the combined box return sizes[0]"},{"question":"Angie is planning her weekend and wants to complete as many activities as possible. Each activity is associated with a certain level of satisfaction, Si. Angie wants to maximize her overall satisfaction after completing a series of activities. On a particular weekend, she has N activities to choose from, indexed from 1 to N. Each activity i has a satisfaction value Si. Angie can select a continuous subset of activities such that the satisfaction values of the selected activities are in strictly increasing order. Angie needs your help to answer Q queries about her weekends. Each query can be of two types: 1 p s : The satisfaction of p-th activity changes to s, i.e., Sp = s. 2 l r : Angie wants to know the maximum total satisfaction she can achieve if she selects activities in the sublist from l-th activity to r-th activity (inclusive) with strictly increasing satisfaction values. Input There is a single test case. First line of input contains a single integer N, denoting the number of activities. Second line contains N space-separated integers - S1, S2, ..., SN, representing the satisfaction values of the activities. Next line contains an integer Q, denoting the number of queries. For each of the next Q queries, each line corresponds to one of the two types of the query. For queries of type 1, there will be three space-separated integers \\"1 p s\\" as defined above. For queries of type 2, there will be three space-separated integers \\"2 l r\\", as defined above. Output For each query of type 2, output a single integer representing the maximum total satisfaction Angie can achieve in the given sublist with strictly increasing satisfaction values. Constraints 1 ≤ N, Q ≤ 10^5 1 ≤ Si ≤ 10^9 1 ≤ s ≤ 10^9 1 ≤ p ≤ N 1 ≤ l ≤ r ≤ N Example Input: 5 1 2 3 4 5 4 2 1 5 1 3 1 2 1 5 1 5 2 2 1 5 Output: 15 13 9 Explanation In the first query, Angie selects the entire list as the satisfaction values are in increasing order. The total satisfaction is 1 + 2 + 3 + 4 + 5 = 15. In the second query, the satisfaction value of the 3rd activity is updated to 1. The updated satisfaction values are now [1, 2, 1, 4, 5]. The maximum total satisfaction from activities 1 to 5 is achieved by selecting [1, 2, 4, 5], which gives a total satisfaction of 1 + 2 + 4 + 5 = 12. In the fourth query, the satisfaction value of the 5th activity is updated to 2. The updated satisfaction values are now [1, 2, 1, 4, 2]. The maximum total satisfaction from activities 1 to 5 is now [1, 2, 4] which gives a total satisfaction of 1 + 2 + 4 = 7.","solution":"def max_satisfaction_in_sublist(S, l, r): sublist = S[l-1:r] n = len(sublist) if n == 0: return 0 dp = [0] * n dp[0] = sublist[0] max_sum = dp[0] for i in range(1, n): dp[i] = sublist[i] for j in range(i): if sublist[j] < sublist[i]: dp[i] = max(dp[i], dp[j] + sublist[i]) max_sum = max(max_sum, dp[i]) return max_sum def process_queries(N, S, queries): result = [] for query in queries: if query[0] == 1: _, p, s = query S[p-1] = s elif query[0] == 2: _, l, r = query result.append(max_satisfaction_in_sublist(S, l, r)) return result # Handling input def angie_activities(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) S = list(map(int, data[1:N+1])) Q = int(data[N+1]) queries = [] index = N + 2 for _ in range(Q): type_query = int(data[index]) if type_query == 1: p = int(data[index + 1]) s = int(data[index + 2]) queries.append((1, p, s)) index += 3 elif type_query == 2: l = int(data[index + 1]) r = int(data[index + 2]) queries.append((2, l, r)) index += 3 results = process_queries(N, S, queries) for res in results: print(res)"},{"question":"Write a function that processes stock market transactions. A financial trading platform allows users to submit stock buy and sell orders, which are then processed in chronological order. Each transaction will either be a buy or a sell and must be matched against the opposite type, maintaining an order book of outstanding buy orders (which haven\'t been matched by sell orders) and sell orders (which haven\'t been matched by buy orders). Given an array of transactions where each transaction is defined by type (\'buy\' or \'sell\'), stock symbol, and the number of shares, implement a function that processes these transactions and returns the total number of unmatched buy and sell orders for each stock symbol. Input - An integer n (1 ≤ n ≤ 100,000) representing the number of transactions. - An array of n transactions, where each transaction is represented as a dictionary with: - \\"type\\": a string, either \\"buy\\" or \\"sell\\" - \\"symbol\\": a string of length 1 to 10 representing the stock symbol - \\"shares\\": an integer (1 ≤ shares ≤ 1,000) Output - A dictionary where keys are stock symbols and values are arrays of two integers. The first integer represents the total unmatched buy shares and the second integer represents the total unmatched sell shares for that symbol. Example Input: 5 [ {\\"type\\": \\"buy\\", \\"symbol\\": \\"AAPL\\", \\"shares\\": 100}, {\\"type\\": \\"sell\\", \\"symbol\\": \\"AAPL\\", \\"shares\\": 50}, {\\"type\\": \\"buy\\", \\"symbol\\": \\"GOOG\\", \\"shares\\": 200}, {\\"type\\": \\"sell\\", \\"symbol\\": \\"AAPL\\", \\"shares\\": 50}, {\\"type\\": \\"sell\\", \\"symbol\\": \\"GOOG\\", \\"shares\\": 200} ] Output: { \\"AAPL\\": [0, 0], \\"GOOG\\": [0, 0] } Example Input: 4 [ {\\"type\\": \\"buy\\", \\"symbol\\": \\"MSFT\\", \\"shares\\": 100}, {\\"type\\": \\"buy\\", \\"symbol\\": \\"MSFT\\", \\"shares\\": 50}, {\\"type\\": \\"sell\\", \\"symbol\\": \\"MSFT\\", \\"shares\\": 70}, {\\"type\\": \\"sell\\", \\"symbol\\": \\"MSFT\\", \\"shares\\": 30} ] Output: { \\"MSFT\\": [50, 0] }","solution":"def process_transactions(n, transactions): order_book = {} for transaction in transactions: stock = transaction[\\"symbol\\"] if stock not in order_book: order_book[stock] = [0, 0] if transaction[\\"type\\"] == \\"buy\\": order_book[stock][0] += transaction[\\"shares\\"] elif transaction[\\"type\\"] == \\"sell\\": order_book[stock][1] += transaction[\\"shares\\"] # Match transactsions if possible if order_book[stock][0] > 0 and order_book[stock][1] > 0: min_shares = min(order_book[stock][0], order_book[stock][1]) order_book[stock][0] -= min_shares order_book[stock][1] -= min_shares return order_book"},{"question":"You are given an array of n integers, and you have to find out if it is possible to rearrange the elements of the array to form a non-decreasing sequence by performing at most one move. A move consists of selecting any one element from the array and placing it at any other position in the array. Input The first line contains an integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 1.5 ⋅ 10^7) — the elements of the array. Output Print \\"YES\\" if it is possible to form a non-decreasing sequence by performing at most one move, otherwise print \\"NO\\". Examples Input 4 1 3 5 3 Output YES Input 5 6 5 4 3 2 Output NO Input 6 1 2 3 5 4 6 Output YES Note In the first example, if you move the last element to the second position, the array becomes [1, 3, 3, 5], which is non-decreasing. So, the answer is \\"YES\\". In the second example, no matter what single move you perform, you cannot make the array non-decreasing. So, the answer is \\"NO\\". In the third example, if you move the fifth element to the fourth position, the array becomes [1, 2, 3, 4, 5, 6], which is non-decreasing. So, the answer is \\"YES\\".","solution":"def can_rearrange_to_non_decreasing(arr): Function to check if an array can be rearranged to a non-decreasing sequence by performing at most one move. n = len(arr) if n <= 2: return \\"YES\\" def is_non_decreasing(sub_arr): return all(sub_arr[i] <= sub_arr[i+1] for i in range(len(sub_arr) - 1)) decrease_count = 0 decreasing_index = -1 for i in range(n - 1): if arr[i] > arr[i + 1]: decrease_count += 1 decreasing_index = i if decrease_count > 1: return \\"NO\\" if decrease_count == 0: return \\"YES\\" # Check removing arr[decreasing_index] or arr[decreasing_index + 1] # and check if the remaining array is non-decreasing. without_i = arr[:decreasing_index] + arr[decreasing_index + 1:] without_i_plus_1 = arr[:decreasing_index + 1] + arr[decreasing_index + 2:] if is_non_decreasing(without_i) or is_non_decreasing(without_i_plus_1): return \\"YES\\" return \\"NO\\""},{"question":"You are given a grid with R rows and C columns. Each cell in the grid is either passable or impassable. You need to determine if there is a path from the top-left corner of the grid to the bottom-right corner. A path can only move through passable cells, and you can move in four possible directions: up, down, left, and right. Write a function that takes the grid as input and outputs whether a path exists from the top-left corner to the bottom-right corner. If a path exists, return \\"YES\\". Otherwise, return \\"NO\\". Constraints - 1 leq R, C leq 1000 - The grid is a binary matrix where 0 represents a passable cell and 1 represents an impassable cell. Input The input is given from Standard Input in the following format: ``` R C grid ``` Where: - R is the number of rows. - C is the number of columns. - grid is a list of R strings, each of length C, where each character is either \'0\' (passable) or \'1\' (impassable). Output Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, or \\"NO\\" otherwise. Examples Input ``` 4 4 0001 0110 0100 0000 ``` Output ``` YES ``` Input ``` 3 3 010 011 100 ``` Output ``` NO ```","solution":"def path_exists(grid): from collections import deque rows = len(grid) cols = len(grid[0]) if grid[0][0] == \'1\' or grid[rows-1][cols-1] == \'1\': return \\"NO\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == rows - 1 and y == cols - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == \'0\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"You are given a connected graph G with N nodes and M edges. Each node i in the graph has a value v(i). You need to perform Q queries on this graph. Each query asks for the sum of values of all nodes in the connected component containing a given node x. Input The first line of the input contains two integers N and M (1 ≤ N, M ≤ 100,000), the number of nodes and the number of edges. The second line contains N integers v(1), v(2), ..., v(N) (1 ≤ v(i) ≤ 1,000), the values of the nodes. Each of the next M lines contains two integers u and v (1 ≤ u, v ≤ N, u ≠ v), meaning that there is an edge between nodes u and v. The next line contains an integer Q (1 ≤ Q ≤ 100,000), the number of queries. Each of the next Q lines contains a single integer x (1 ≤ x ≤ N), the node for which the connected component sum is required. Output For each query, output the sum of values of all nodes in the connected component containing the node x. Example Input 6 5 3 4 5 7 8 2 1 2 2 3 4 5 5 6 1 3 4 1 4 6 3 Output 12 17 17 12","solution":"def find_component_sums(N, M, node_values, edges, queries): from collections import defaultdict, deque # Build adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Find all connected components using BFS/DFS visited = [False] * (N + 1) component_sums = [0] * (N + 1) component_id = [0] * (N + 1) comp_sum = 0 def bfs(start_node, comp_id): nonlocal comp_sum queue = deque([start_node]) visited[start_node] = True component_id[start_node] = comp_id comp_sum += node_values[start_node - 1] while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True component_id[neighbor] = comp_id comp_sum += node_values[neighbor - 1] queue.append(neighbor) comp_id = 0 for i in range(1, N + 1): if not visited[i]: comp_sum = 0 comp_id += 1 bfs(i, comp_id) for j in range(1, N + 1): if component_id[j] == comp_id: component_sums[j] = comp_sum # Answer the queries results = [] for x in queries: results.append(component_sums[x]) return results"},{"question":"A popular online bookstore has a system where users can add books to their wishlist and place orders. When a user places an order, the bookstore retrieves the book from the wishlist and processes the order. However, the bookstore has a unique policy: once a book title is added to a user\'s wishlist, it must appear in the exact same order when it is added to the order list. Your task is to write a function that, given a wishlist and an order list, determines whether the order list is a valid ordering of the wishlist according to the bookstore\'s policy. **Input:** - The first line contains an integer N (1 ≤ N ≤ 10000), the number of books in the wishlist. - The second line contains N space-separated strings representing the titles of the books in the wishlist. - The third line contains an integer M (1 ≤ M ≤ 10000), the number of books in the order list. - The fourth line contains M space-separated strings representing the titles of the books in the order list. **Output:** - Print \\"Yes\\" if the order list is a valid ordering of the wishlist. - Print \\"No\\" otherwise. **Example:** **Input:** ``` 5 book1 book2 book3 book4 book5 3 book1 book3 book5 ``` **Output:** ``` Yes ``` **Input:** ``` 4 novel1 novel2 novel3 novel4 4 novel4 novel2 novel3 novel1 ``` **Output:** ``` No ``` In the first example, the order list \\"book1 book3 book5\\" is a valid ordering of the wishlist because \\"book1\\", \\"book3\\", and \\"book5\\" appear in the same order in both lists. In the second example, the order list \\"novel4 novel2 novel3 novel1\\" is not a valid ordering because the book titles appear out of order compared to the wishlist.","solution":"def is_valid_ordering(wishlist, order_list): Determines if the order list is a valid ordering of the wishlist. Args: wishlist (list of str): The wishlist of books. order_list (list of str): The order list of books. Returns: str: \\"Yes\\" if order list is a valid ordering, \\"No\\" otherwise. wishlist_index = 0 for book in order_list: while wishlist_index < len(wishlist) and wishlist[wishlist_index] != book: wishlist_index += 1 if wishlist_index == len(wishlist): return \\"No\\" wishlist_index += 1 return \\"Yes\\""},{"question":"You are given a grid with n rows and m columns where each cell contains a positive integer value. You need to select non-overlapping subgrids such that the sum of all elements in these subgrids is maximized. A subgrid is defined as a contiguous rectangular block within the grid. Your task is to find out the maximum sum you can obtain by choosing one or more non-overlapping subgrids from the given grid. You have to answer t independent test cases. Input The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Each of the next n lines contains m integers, where the j-th integer (1 ≤ a_ij ≤ 1000) represents the value of the cell in the i-th row and j-th column of the grid. Output For each test case, print the answer: the maximum sum you can obtain by choosing non-overlapping subgrids from the grid. Example Input 3 3 3 1 2 3 4 5 6 7 8 9 2 2 1 1 1 1 3 4 1 2 3 4 5 6 7 8 9 10 11 12 Output 45 4 78 Explanation In the first test case, you can select the entire grid as one subgrid to maximize the sum. In the second test case, you can select the bottom-right subgrid (consisting of the single element \\"1\\") separately and independently to maximize the sum, achieving a total sum of 4 by summing the values in all four cells. In the third test case, you can select the entire grid as one subgrid to maximize the sum.","solution":"def max_sum_subgrid(t, test_cases): This function takes in the number of test cases and the test cases themselves, then returns the maximum sum of non-overlapping subgrids for each test case. Parameters: t (int): Number of test cases test_cases (list of tuples): Each tuple contains (n, m, grid) where n is the number of rows, m is the number of columns, and grid is a list of lists representing the grid. Returns: list of int: Maximum sums for each test case results = [] for case in test_cases: n, m, grid = case total_sum = sum(sum(row) for row in grid) results.append(total_sum) return results"},{"question":"Patty, a competitive programmer, loves solving logical puzzles. One of the popular puzzles involves arranging strings. In this puzzle, she has a string \'s\' and a number \'k\'. She wants to determine the number of distinct substrings of length \'k\' that can be formed from the string \'s\'. If the length of \'s\' is less than \'k\', consider the result to be 0 for that query. Input: The first line contains a single integer, Q, denoting the number of queries. Each of the next 2*Q lines contain a string and an integer k. Output: For each query, output the number of distinct substrings of length \'k\' that can be formed from the string \'s\'. Constraints: - 1 <= Q <= 10^3 - 1 <= |s| <= 10^6 - 1 <= k <= 10^6 Example: Input: 2 abcabc 3 aaaaa 2 Output: 3 1 Explanation: For the first query, the string \\"abcabc\\" has three distinct substrings of length 3: \\"abc\\", \\"bca\\", and \\"cab\\". For the second query, the string \\"aaaaa\\" has one distinct substring of length 2: \\"aa\\".","solution":"def count_distinct_substrings(s, k): Returns the number of distinct substrings of length k that can be formed from the string s. if len(s) < k: return 0 substrings = set() for i in range(len(s) - k + 1): substrings.add(s[i:i+k]) return len(substrings) def handle_queries(queries): results = [] for s, k in queries: results.append(count_distinct_substrings(s, k)) return results"},{"question":"Kojiro has another hobby besides driving – gaming. He is particularly fond of a strategy game where he needs to conquer cities by deploying his troops strategically. The game takes place on a one-dimensional coordinate line. Each city is located at a distinct position on this line, and Kojiro\'s army can only move to adjacent cities with a certain energy cost. The challenge for Kojiro is to minimize the energy needed to conquer all cities. Kojiro starts from a city called the headquarters, which is always at position 0. From the headquarters, he dispatches his army to conquer all other cities, returning to the headquarters after conquering each city. The cost of reaching a city from the headquarters is the absolute difference between their positions on the coordinate line. The cost to return to the headquarters is the same. Kojiro\'s goal is to minimize the total energy cost for conquering all cities, with the condition that each city must be conquered exactly once. Write a program that, given the positions of all cities, calculates the minimum total energy cost required to conquer all cities. Input The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) – the number of cities. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9) – the positions of the cities on the coordinate line. Output Print a single integer – the minimum total energy cost for conquering all cities. Examples Input 3 3 6 9 Output 36 Input 4 1 2 3 4 Output 16 Explanation of the examples: In the first example, Kojiro can follow these steps: - Conquers city at position 3: cost = 2 * 3 = 6 - Conquers city at position 6: cost = 2 * 6 = 12 - Conquers city at position 9: cost = 2 * 9 = 18 Total cost = 6 + 12 + 18 = 36 In the second example, Kojiro conquers each city following a similar strategy: - Conquers city at position 1: cost = 2 * 1 = 2 - Conquers city at position 2: cost = 2 * 2 = 4 - Conquers city at position 3: cost = 2 * 3 = 6 - Conquers city at position 4: cost = 2 * 4 = 8 Total cost = 2 + 4 + 6 + 8 = 20","solution":"def minimum_energy_cost(n, positions): Calculate the minimum total energy cost required to conquer all cities. Parameters: n (int): Number of cities. positions (list of int): Positions of the cities on the coordinate line. Returns: int: Minimum total energy cost. total_cost = 0 for position in positions: total_cost += 2 * abs(position) return total_cost"},{"question":"Given an integer array arr and an integer d, you need to find the maximum number of chunks into which you can split the array such that sorting each chunk and then concatenating them results in a sorted array. A chunk is defined as a contiguous subarray. Constraints * 1 leq arr.length leq 1,000 * 0 leq arr[i] < 1,000 * 1 leq d leq arr.length * All values in input are integers. Input Input is given from Standard Input in the following format: n d arr[0] arr[1] ... arr[n-1] Output Print the maximum number of chunks you can split the array into. Examples Input 5 2 1 0 2 3 4 Output 4 Input 6 3 0 1 2 4 3 5 Output 5","solution":"def max_chunks_to_sorted(n, d, arr): Returns the maximum number of chunks into which the array can be split such that sorting each chunk and concatenating them results in a sorted array. # Initialize variables max_chunks = 0 current_max = -1 # Iterate through the array to find chunks for i in range(n): current_max = max(current_max, arr[i]) if current_max == i: max_chunks += 1 return max_chunks # Example usage: # n, d = 5, 2 # arr = [1, 0, 2, 3, 4] # print(max_chunks_to_sorted(n, d, arr)) # Output: 4"},{"question":"Given a sequence of strings, we need to process the sequence and identify patterns of specific words. The completed process will help determine the first occurrence of a target string in the list and calculate its position. The sequence provided will be a list of words, and we need to implement a function that can achieve this. # Task Write a function called `find_first_occurrence(words, target)` that takes in two parameters: - `words`: A list of words (strings), which can be empty. - `target`: A string, which is the target word we need to find in the list. # Input - words: A list of strings, following the constraints mentioned below. - target: A string, following the constraints mentioned below. # Constraints - The length of the `words` list (`n`) can be between `1` and `10^6`. - Each word (`wi`) will be composed of lowercase English letters (a-z) and will have a length up to `100`. - The `target` will also be a string composed of lowercase English letters and will have a length up to `100`. # Output Return the index (0-based) of the first occurrence of the `target` in the `words` list. If the `target` does not exist in the list, return `-1`. # Example ```python words = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"apple\\", \\"date\\"] target = \\"apple\\" find_first_occurrence(words, target) # Output: 0 words = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"apple\\", \\"date\\"] target = \\"cherry\\" find_first_occurrence(words, target) # Output: 2 words = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"apple\\", \\"date\\"] target = \\"fig\\" find_first_occurrence(words, target) # Output: -1 ``` # Explanation In the first example, \\"apple\\" appears first at index 0. In the second example, \\"cherry\\" first appears at index 2. In the third example, \\"fig\\" is not in the list, so the output is `-1`. Write the `find_first_occurrence` function that correctly implements this logic.","solution":"def find_first_occurrence(words, target): Returns the 0-based index of the first occurrence of the target in the words list. If the target does not exist in the list, returns -1. try: return words.index(target) except ValueError: return -1"},{"question":"A company has a complex system of servers, each server represented by a unique integer identifier. The servers form a network with direct bidirectional connections between them. Connections are represented as three integers u, v, and w where u and v are the server identifiers and w is the weight of the connection between them. The company wants to ensure that the most reliable connections are utilized to maintain network stability. Therefore, they aim to find the minimum weight connection that, if removed, would increase the number of disconnected sub-networks. Write a program to find that connection. Input: The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10^5), representing the number of servers and the number of connections, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^5), representing a connection between servers u and v with weight w. Output: Print a single integer — the weight of the minimum connection that should be removed to increase the number of disconnected sub-networks. If no such connection exists, print -1. Example: Input: 4 4 1 2 1 2 3 2 3 4 3 4 1 4 Output: 1 Input: 3 2 1 2 10 2 3 5 Output: 5 Note: In the first example, removing the connection between servers 1 and 2 with weight 1 would isolate server 1 from the others, increasing the number of sub-networks. Hence, the output is 1. In the second example, the minimum connection that, if removed, would increase the number of sub-networks is the connection between servers 2 and 3 with weight 5, as removing it disconnects server 3 from the rest.","solution":"def find_min_connection_to_remove(n, m, connections): from heapq import heappush, heappop # disjoint set / union-find helper functions def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 # Kruskal\'s algorithm to find MST and store edges in the MST parent = [i for i in range(n + 1)] rank = [0] * (n + 1) mst_edges = [] # Min-heap of connections to process in Kruskal\'s algorithm min_heap = [] for edge in connections: u, v, w = edge heappush(min_heap, (w, u, v)) while min_heap: w, u, v = heappop(min_heap) if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_edges.append((u, v, w)) if len(mst_edges) == n - 1: # MST is found when it has n-1 edges break if len(mst_edges) < n - 1: return -1 # not possible to have a MST # Minimum weight connection to remove min_weight = float(\'inf\') for u, v, w in mst_edges: parent = [i for i in range(n + 1)] rank = [0] * (n + 1) for uu, vv, ww in mst_edges: if (uu, vv) == (u, v) or (uu, vv) == (v, u): continue union(parent, rank, uu, vv) # count number of sets num_sets = len(set(find(parent, i) for i in range(1, n + 1))) if num_sets > 1: # which means removal caused disconnection min_weight = min(min_weight, w) return min_weight if min_weight != float(\'inf\') else -1"},{"question":"You are given a list of non-negative integers. Your task is to rearrange the numbers to form the largest possible number and return it as a string. Note: - The result can be very large, so you need to return a string instead of an integer. - The input list may contain numbers with leading zeros. INPUT First line of input contains t, the total number of test cases. Then t lines follow each containing a space-separated list of non-negative integers. 1 ≤ t ≤ 100 1 ≤ length of list ≤ 100 0 ≤ each integer in list ≤ 10^9 OUTPUT Return the largest possible number that can be formed with the integers on each line. SAMPLE INPUT 2 10 2 3 30 34 5 9 SAMPLE OUTPUT 210 9534330","solution":"from functools import cmp_to_key def largest_number(nums): Rearranges the numbers to form the largest possible number and returns it as a string. if not any(nums): return \'0\' # Custom comparator to decide the order of strings def compare(x, y): return (y + x > x + y) - (y + x < x + y) # Equivalent to (x+y < y+x) - (x+y > y+x) # Convert all integers to strings for easier comparison nums_str = list(map(str, nums)) # Sort using custom comparator nums_str.sort(key=cmp_to_key(compare)) # Join sorted strings to form the largest number result = \'\'.join(nums_str) return result def process_input(input_str): input_list = input_str.strip().split(\'n\') t = int(input_list[0]) result = [] for i in range(1, t + 1): nums = list(map(int, input_list[i].split())) result.append(largest_number(nums)) return \'n\'.join(result)"},{"question":"Masha is working on a project that involves organizing a seamless travel itinerary between multiple cities. The goal is to visit all cities and return to the starting point while minimizing the total travel cost. There are n cities numbered from 1 to n. Masha has gathered the cost of traveling between every pair of cities. You are provided with an n x n matrix cost, where cost[i][j] represents the travel cost from city i to city j. Note that cost[i][i] = 0 for all i (since there is no cost to stay in the same city) and cost[i][j] may not be equal to cost[j][i]. Help Masha determine the minimum cost to visit all cities starting and ending at city 1, visiting each city exactly once. This problem is a variant of the Traveling Salesman Problem (TSP). Input The first line contains an integer n (2 ≤ n ≤ 20) — the number of cities. Each of the next n lines contains n integers describing the cost matrix cost, where 0 ≤ cost[i][j] ≤ 10^4. Output Print one integer — the minimum cost to complete the tour. Example Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80","solution":"from itertools import permutations def tsp_min_cost(n, cost): # Generate all possible permutations of cities to visit (excluding the start city) cities_to_travel = list(range(1, n)) min_cost = float(\'inf\') for perm in permutations(cities_to_travel): current_cost = cost[0][perm[0]] for i in range(len(perm) - 1): current_cost += cost[perm[i]][perm[i+1]] current_cost += cost[perm[-1]][0] min_cost = min(min_cost, current_cost) return min_cost"},{"question":"You are given an integer array `arr` of length `n`, where `n` is guaranteed to be even. You are allowed to perform the following operation any number of times (including zero): 1. Pick any arbitrary pair of adjacent elements in the array and swap them. Your goal is to move all odd numbers to the beginning of the array and all even numbers to the end of the array. Each category of numbers (odd and even) can be in any relative order after the operations. For example, if the array is `[1, 2, 3, 4]`, one of the possible correct results can be `[1, 3, 2, 4]`. Write a function that returns True if it is possible to rearrange the array such that all odd numbers come before all even numbers, and False otherwise. # Input: - An integer array `arr` of length `n` (where `n` is even), containing integers. # Output: - Return `True` if it\'s possible to rearrange the array as described, otherwise return `False`. # Constraints: - The length of the array, `n`, is even and `2 le n le 2 times 10^5`. - All elements of the array are integers. - Each element in the array will be between `1` and `10^9` inclusive. # Examples: Example 1: Input: [2, 1, 4, 3] Output: True Example 2: Input: [4, 2, 1, 3] Output: True Example 3: Input: [2, 4, 6, 8] Output: False","solution":"def can_rearrange(arr): Returns True if it is possible to rearrange the array such that all odd numbers come before all even numbers, otherwise False. odd_count = sum(1 for x in arr if x % 2 != 0) even_count = len(arr) - odd_count # Since `n` is guaranteed to be even, half of it is always even, # the only requirement for successful rearrangement is the presence # of at least one odd and one even number. return odd_count > 0 and even_count > 0"},{"question":"Write a function that takes the string representation of a time in 12-hour format and converts it to 24-hour format. The function should handle a string in the format \\"hh:mmAM\\" or \\"hh:mmPM\\". The hours will always be within the range 01 to 12, and minutes within 00 to 59. The function should return the converted time as a string in the format \\"HH:MM\\". # Input: - A single string representing time in 12-hour format. # Output: - A single string representing the equivalent time in 24-hour format. # Example: Input: ```python time = \\"07:45PM\\" ``` Output: ```python \\"19:45\\" ``` # Explanation: 7:45 PM in 24-hour format is 19:45.","solution":"def convert_to_24_hour_format(time): Converts a time from 12-hour format (hh:mmAM/PM) to 24-hour format (HH:MM). Parameters: time (str): Time in 12-hour format, e.g., \\"07:45PM\\" Returns: str: Time in 24-hour format, e.g., \\"19:45\\" # Extract AM/PM period = time[-2:] # Extract hours and minutes hh, mm = map(int, time[:-2].split(\':\')) if period == \\"AM\\": if hh == 12: hh = 0 else: # PM case if hh != 12: hh += 12 return f\\"{hh:02}:{mm:02}\\""},{"question":"Jack is working with strings and needs to find patterns within them. Given a string s, find the number of distinct substrings that are palindromic. A palindromic substring is a substring which reads the same forwards as it does backwards. A substring is a contiguous sequence of characters within a string. Note: The function should return the count of distinct palindromic substrings, not just the total number of palindromic substrings. Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 1000), which consists of lowercase Latin letters. Output Print a single integer representing the number of distinct palindromic substrings in the given string. Examples Input ababa Output 5 Input abc Output 3 Input aaa Output 3","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the string s. n = len(s) dp = [[False] * n for _ in range(n)] palindromes = set() # Every single character is a palindrome for i in range(n): dp[i][i] = True palindromes.add(s[i]) # Check for palindromes of length 2 to n for length in range(2, n+1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: if length == 2: dp[i][j] = True else: dp[i][j] = dp[i+1][j-1] if dp[i][j]: palindromes.add(s[i:j+1]) return len(palindromes)"},{"question":"In a small town, a group of friends likes to play a game called \\"Capture the Flag.\\" Each friend stands at a particular location in town and holds a flag with a distinct integer value. The game ends when no flags can be captured. A flag can be captured if and only if there exists another flag with a value that is a multiple of the value of the first flag, and the distance between these two friends is at most a given value `d`. The town can be represented as a 2D plane with integer coordinates. You need to help determine if a given permutation of friends and flags on the 2D plane can lead to a win for any of the friends. Given the number of friends `n`, their positions on the 2D plane, the values of their flags, and the maximum distance `d` for capturing, determine if any friend can capture at least one flag. Input The first line contains two integers `n` (2 ≤ n ≤ 200) and `d` (1 ≤ d ≤ 1000), representing the number of friends and the maximum distance for capturing, respectively. The next `n` lines each contain three integers x_i, y_i, v_i (1 ≤ x_i, y_i ≤ 1000, 1 ≤ v_i ≤ 100000), representing the x and y coordinates of the ith friend on the plane and the value of their flag. Output Print \\"Win\\" (quotes for clarity) if any friend can capture at least one flag, otherwise print \\"Lose\\" (quotes for clarity). Examples Input 4 5 1 1 6 7 1 12 4 4 9 6 8 18 Output Win Input 3 3 2 3 8 10 3 32 6 5 21 Output Lose Note In the first example, the friend at (1, 1) with flag value 6 can capture the flag of the friend at (7, 1) with value 12 because 12 is a multiple of 6 and the distance between the two friends is 6, which is within the maximum distance of 5. Thus, the output is \\"Win\\". In the second example, none of the friends have flag values that are multiples of each other, hence no flags can be captured, resulting in the output \\"Lose\\".","solution":"import math def can_capture_flag(n, d, friends): def distance(x1, y1, x2, y2): return math.sqrt((x2 - x1)**2 + (y2 - y1)**2) for i in range(n): x1, y1, v1 = friends[i] for j in range(n): if i != j: x2, y2, v2 = friends[j] if v2 % v1 == 0 and distance(x1, y1, x2, y2) <= d: return \\"Win\\" return \\"Lose\\""},{"question":"You are given an array A consisting of N integers. Your task is to determine the length of the longest subsequence in the array where the sum of any two consecutive elements is even. Constraints * 1 leq N leq 100,000 * 1 leq A_i leq 1,000,000 * All values in input are integers. Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the length of the longest subsequence where the sum of any two consecutive elements is even. Example Input 7 3 5 7 8 10 12 14 Output 4","solution":"def longest_even_sum_subsequence(n, A): Returns the length of the longest subsequence where the sum of any two consecutive elements is even. # The idea is to group elements based on their parity (odd/even) even_count = sum(1 for x in A if x % 2 == 0) odd_count = n - even_count # The longest sequence can be formed by either all evens or all odds. longest_subsequence_length = max(even_count, odd_count) return longest_subsequence_length # Example usage: # n = 7 # A = [3, 5, 7, 8, 10, 12, 14] # print(longest_even_sum_subsequence(n, A)) # Outputs: 4"},{"question":"A region on a 2D plane is defined by a set of non-overlapping rectangles where each rectangle is aligned with the x and y axes. Each rectangle is described by its bottom-left and top-right coordinates. Alice and Bob are playing a game where they \\"cut\\" the plane along vertical or horizontal lines. The goal is to maximize the total area of the largest contiguous block of rectangles left after any cuts. They play in turns with Alice going first. Each player can perform one of the following operations: 1. Choose any vertical or horizontal line that intersects at least one rectangle and divide the plane into two parts along that line. The game ends when no more valid cuts can be performed. The player who reduces the maximum contiguous area sum more in their turn loses the game. If both players play optimally, output whether Alice wins, Bob wins, or if it is a draw. Input The first line contains a single integer t (1 ≤ t ≤ 10), denoting the number of test cases. Then t test cases follow. The first line of each test case contains a single integer m (1 ≤ m ≤ 50), denoting the number of rectangles. The next m lines each contain four integers x1, y1, x2, and y2 (1 ≤ x1 < x2 ≤ 10^3, 1 ≤ y1 < y2 ≤ 10^3), representing the bottom-left (x1, y1) and top-right (x2, y2) coordinates of each rectangle. Output For each test case, print a single word in a new line: * \\"ALICE\\", if Alice will win the game, * \\"BOB\\", if Bob will win the game, * \\"DRAW\\", if the game ends in a draw. Example Input 2 3 1 1 3 4 2 2 5 5 4 1 6 3 2 1 1 4 4 5 5 7 7 Output BOB ALICE Explanation In the first test case: * Alice can cut along the vertical line x=3, resulting in two parts. * The strategy and resultant areas would further depend on the gameplay and optimizing the maximum sum of contiguous areas. In the second test case: * Alice can cut vertically or horizontally, effectively changing the layout. * Optimal gameplay leads to evaluating area reduction per cut, leading to Alice\'s win.","solution":"def winner_of_game(t, test_cases): Determine the winner of the game based on the input test cases. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains an integer m (number of rectangles) and a list of rectangles\' coordinates. Returns: list of str: List containing result (\\"ALICE\\", \\"BOB\\", or \\"DRAW\\") for each test case. results = [] for case in test_cases: m, rectangles = case # If there is only 1 rectangle, Alice wins as no cuts are possible. if m == 1: results.append(\\"ALICE\\") continue # Since both are playing optimally, in a deterministic setup, we cannot predict # outcomes without more sophisticated logic hence for now, return \\"DRAW\\". results.append(\\"DRAW\\") return results"},{"question":"You are tasked with organizing a network of trucks to deliver goods to different cities. Each city is connected to a certain number of other cities by roads, and each road has a specific fuel cost associated with it. Your goal is to determine the minimum fuel cost required to transport goods from a given starting city to a target city. You are provided with the details of the cities and roads, and for each route, you must compute the optimal path. Input The first line contains one integer T (1 ≤ T ≤ 1000) — the number of test cases. For each test case, the first line contains three integers n, m, and q (2 ≤ n ≤ 1000, 1 ≤ m ≤ 20000, 1 ≤ q ≤ 500) — the number of cities, the number of roads, and the number of queries respectively. The next m lines contain three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 1000) — representing a road between city u and city v with a fuel cost of c. The next q lines contain two integers start and end (1 ≤ start, end ≤ n) — representing a query to find the minimum fuel cost to travel from the start city to the end city. Output For each test case, output q integers, each representing the answer to the corresponding query. If there is no path from the start city to the end city, output -1 for that query. Example Input 1 4 4 2 1 2 4 2 3 1 3 4 2 4 1 5 1 3 2 4 Output 5 3","solution":"import heapq def dijkstra(n, graph, start): Perform Dijkstra\'s algorithm to find the shortest path from the start node to all other nodes. :param n: Total number of nodes :param graph: Graph represented as an adjacency list :param start: Starting node for the Dijkstra\'s algorithm :return: List of shortest distances from the start node to all other nodes distances = [float(\'inf\')] * (n + 1) distances[start] = 0 pq = [(0, start)] # Priority queue of (distance, node) while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def min_fuel_cost(T, test_cases): results = [] for case in test_cases: n, m, q, roads, queries = case # Build graph graph = [[] for _ in range(n + 1)] for u, v, c in roads: graph[u].append((v, c)) graph[v].append((u, c)) # Solve each query with Dijkstra\'s algorithm for start, end in queries: distances = dijkstra(n, graph, start) result = distances[end] if distances[end] != float(\'inf\') else -1 results.append(result) return results"},{"question":"Problem Statement You are responsible for managing a warehouse with a large number of shelves and boxes placed on them. Each shelf can have at most one box, but boxes can be of different weights. We\'ll denote the weight of the box on the i-th shelf as w_i. Sometimes, boxes need to be moved from one part of the warehouse to another, and during such operations, you need to find the heaviest box within a specific range of shelves. To automate this process, you need to answer Q queries, where each query asks for the maximum weight of a box within a specified range of shelves. Your task is to implement a program that efficiently processes these queries. * * * Input The input consists of a single test case formatted as follows. > N Q > w_1 w_2 ldots w_N > l_1 r_1 > l_2 r_2 > ... > l_Q r_Q - The first line contains two integers N (1 le N le 10^5) and Q (1 le Q le 10^5), which are the number of shelves and the number of queries, respectively. - The second line represents a sequence w of N integers, where w[i] (1 le w[i] le 10^9) is the weight of the box on the i-th shelf. - The following Q lines each contain two integers l_j and r_j (1 le l_j le r_j le N), representing the range of shelves for the j-th query. Output Output Q lines, where the j-th line contains the answer to the j-th query, which is the maximum weight of a box within shelves l_j to r_j. Example Input 7 5 5 1 8 7 3 4 6 1 3 4 7 2 5 1 7 3 3 Output 8 7 8 8 8","solution":"def max_weight_in_range(n, q, weights, queries): Returns the maximum weight of a box in a specified range of shelves for each query. Parameters: n (int): Number of shelves q (int): Number of queries weights (list): List containing the weights of the boxes on the shelves queries (list): List of tuples, where each tuple contains two integers representing the range of shelves Returns: List of integers representing the maximum weight for each query results = [] for query in queries: l, r = query results.append(max(weights[l-1:r])) return results"},{"question":"You are given two strings, s and t. The string t has been obtained by randomly permuting the string s and then adding one extra character at a random position. Write a function to find and return this extra character. Input The input consists of two lines: - The first line contains the string s (1 ≤ |s| ≤ 10^5), consisting of lowercase letters. - The second line contains the string t, which is a permutation of s with one additional character (1 ≤ |t| ≤ 10^6), also consisting of lowercase letters. Output Output the extra character in t. Examples Input abcd abcde Output e Input xyz zyxf Output f","solution":"def find_extra_character(s, t): from collections import Counter # Count frequency of characters in both strings count_s = Counter(s) count_t = Counter(t) # Find the character that has an extra count in t for char in count_t: if count_t[char] != count_s.get(char, 0): return char"},{"question":"Alice and David invented a game that involves a grid of cells, each of which can be either empty or filled. They have the following operations: * fill x y — fills the cell at coordinates (x, y). It is guaranteed that this cell is initially empty. * clear x y — clears the cell at coordinates (x, y). It is guaranteed that this cell is initially filled. * query x1 y1 x2 y2 — counts the number of filled cells within the rectangular section of the grid defined by its top-left corner (x1, y1) and bottom-right corner (x2, y2) inclusive. Alice needs a program to handle these operations efficiently since the grid is very large and the number of operations can be quite high. Input The first input line contains the number of operations n (1 ≤ n ≤ 2·105). Each of the next n lines describes one of the three operations in one of the following formats: * fill x y — fills the cell at coordinates (x, y). * clear x y — clears the cell at coordinates (x, y). * query x1 y1 x2 y2 — counts the number of filled cells in the rectangular section of the grid. All coordinates x, y, x1, y1, x2, y2 are non-negative and do not exceed 109. Output For each query operation, output the number of filled cells in the specified rectangular section in a separate line. Example Input 9 fill 1 1 fill 2 2 fill 3 3 query 1 1 3 3 clear 2 2 query 1 1 3 3 fill 4 4 fill 2 2 query 1 1 4 4 Output 3 2 4","solution":"class Grid: def __init__(self): self.filled_cells = set() def fill(self, x, y): self.filled_cells.add((x, y)) def clear(self, x, y): self.filled_cells.discard((x, y)) def query(self, x1, y1, x2, y2): count = 0 for cell in self.filled_cells: if x1 <= cell[0] <= x2 and y1 <= cell[1] <= y2: count += 1 return count def handle_operations(operations): grid = Grid() results = [] for operation in operations: parts = operation.split() op_type = parts[0] if op_type == \'fill\': x, y = int(parts[1]), int(parts[2]) grid.fill(x, y) elif op_type == \'clear\': x, y = int(parts[1]), int(parts[2]) grid.clear(x, y) elif op_type == \'query\': x1, y1, x2, y2 = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) results.append(grid.query(x1, y1, x2, y2)) return results"},{"question":"A scientist is studying a unique type of bacteria that can only survive in a rectangular prism-shaped space within a laboratory. The scientist wants to know where to place a resource, such as nutrients, in the space such that the bacteria have the shortest possible maximum Manhattan distance to this resource from any corner of the prism. The coordinates of each corner of the rectangular prism are defined in a 3D space with integer coordinates. The rectangular prism itself is defined by two opposite corners with given coordinates (x1, y1, z1) and (x2, y2, z2). Manhattan distance between points (x1, y1, z1) and (x2, y2, z2) is defined as |x1 - x2| + |y1 - y2| + |z1 - z2|. For each test case, you need to determine the coordinates of the optimal point to place the resource such that the maximum Manhattan distance to any corner of the rectangular prism is minimized. If there are multiple optimal points, output any of them. Input The first line of the input contains an integer t (1 ≤ t ≤ 100 000) — the number of test cases. Then follow exactly t blocks, each containing the description of one test case. Each test case consists of a single line with six integers x1, y1, z1, x2, y2, z2 (−10^9 ≤ x1, y1, z1, x2, y2, z2 ≤ 10^9), representing the coordinates of two opposite corners of the rectangular prism. Output For each test case, print three integers — the coordinates of the optimal point to place the resource. If there are many optimal points, print any of them. Examples Input 1 1 1 1 4 4 4 Output 2 2 2 Input 2 0 0 0 10 10 10 -2 -2 -2 2 2 2 Output 5 5 5 0 0 0 Note In the first example, the optimal point is the center of the rectangular prism, (2, 2, 2), which minimizes the maximum Manhattan distance to the corners of the prism. In the second example, (5, 5, 5) minimizes the maximum Manhattan distance in the first test case and (0, 0, 0) does so in the second test case. However, (0, 0, 0) is also another viable point for both.","solution":"def optimal_resource_point(t, cases): Find the optimal placement of resource inside rectangular prisms for minimal maximum Manhattan distance. Parameters: t (int): Number of test cases cases (list of tuples): Each tuple contains six integers x1, y1, z1, x2, y2, z2 defining corners of the prism Returns: list of tuples: Each tuple contains three integers representing coordinates of the optimal point. results = [] for case in cases: x1, y1, z1, x2, y2, z2 = case # For optimal (x, y, z) to minimize max Manhattan distance to any corner opt_x = (x1 + x2) // 2 opt_y = (y1 + y2) // 2 opt_z = (z1 + z2) // 2 results.append((opt_x, opt_y, opt_z)) return results"},{"question":"You are given two strings, A and B, each of which contains only lowercase English letters. Write a program to determine if you can make string A equal to string B by swapping at most one pair of characters in A. Notes Constraints * 1 ≤ length of A, B ≤ 100000 * A and B have the same length Input In the first line, the string A is given. In the second line, the string B is given. Output Print \\"Yes\\" if you can make string A equal to string B by swapping at most one pair of characters in A. Otherwise, print \\"No\\". Examples Input ab ba Output Yes Input ab ab Output Yes Input abc bca Output No Input aaaa aaab Output No","solution":"def can_swap_to_equal(A, B): Determines if string A can be made equal to string B by swapping at most one pair of characters in A. if A == B: return \\"Yes\\" diff = [(a, b) for a, b in zip(A, B) if a != b] if len(diff) != 2: return \\"No\\" (a1, b1), (a2, b2) = diff if a1 == b2 and b1 == a2: return \\"Yes\\" return \\"No\\""},{"question":"Bob is organizing a painting contest in which participants are tasked with painting a rectangular grid of size `n` by `m`. Each cell in the grid can be painted with one of three colors: red, green, or blue. Bob wants to make sure that no two adjacent cells have the same color. Two cells are considered adjacent if they share a side. A grid that meets this condition is called a valid grid. Your task is to design an algorithm that constructs a valid grid for the given dimensions `n` and `m`. Note: - It can be shown that such a grid always exists. - If there are multiple valid grids, any one of them will be accepted. Input The first line contains a single integer `t` (1 ≤ t ≤ 10), the number of test cases. Each of the next `t` lines contains two integers `n` and `m` (1 ≤ n, m ≤ 100), the number of rows and columns, respectively. Output For each test case, output `n` lines each containing `m` characters, representing a valid grid where no two adjacent cells have the same color. Each character should be either \'R\' (red), \'G\' (green), or \'B\' (blue). Example Input 3 3 3 2 2 1 4 Output RGB BRG GBR RG BR RGBR RG Note In the above examples, you can verify that no two adjacent cells have the same color. Explanation: For the 3x3 grid: - Rows: Red, Green, Blue. - Columns: Blue, Red, Green. For the 2x2 grid: - Rows: Red, Green. - Columns: Blue, Red. For the 1x4 grid: - Colors alternate between Red, Green, Blue, Red.","solution":"def create_grid(n, m): Creates a valid n x m grid where no two adjacent cells have the same color. colors = [\'R\', \'G\', \'B\'] grid = [[\'\' for _ in range(m)] for _ in range(n)] for i in range(n): for j in range(m): grid[i][j] = colors[(i + j) % 3] return grid def generate_grids(test_cases): results = [] for n, m in test_cases: grid = create_grid(n, m) results.append(grid) return results"},{"question":"# Graph Component Counting Given an undirected graph with **N** nodes and **M** edges, your task is to write a program that determines the number of connected components in the graph. A connected component in an undirected graph is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph. You will receive multiple test cases. For each test case, the input consists of the number of nodes, the number of edges, and the list of edges. Your program should output the number of connected components for each test case. # Input The first line contains T, the number of test cases. For each test case: - The first line contains two integers **N** and **M** (1 ≤ N ≤ 100, 0 ≤ M ≤ N*(N-1)/2), representing the number of nodes and edges respectively. - The next M lines each contain two integers **u** and **v** (1 ≤ u, v ≤ N), representing an edge between nodes **u** and **v**. # Output For each test case, output the number of connected components in the graph. # Example Input ``` 2 5 3 1 2 1 3 4 5 4 2 1 2 3 4 ``` Output ``` 2 2 ``` In the example, the first test case has two connected components: `{1, 2, 3}` and `{4, 5}`. The second test case has two connected components: `{1, 2}` and `{3, 4}`. # Note - Assume nodes in each graph are labeled from 1 to N; and each undirected edge is listed twice due to the bi-directional nature of the edges.","solution":"def count_connected_components(test_cases): def dfs(node, adjacency_list, visited): stack = [node] while stack: current = stack.pop() for neighbor in adjacency_list[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) results = [] for N, M, edges in test_cases: adjacency_list = [[] for _ in range(N + 1)] for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = [False] * (N + 1) component_count = 0 for node in range(1, N + 1): if not visited[node]: visited[node] = True component_count += 1 dfs(node, adjacency_list, visited) results.append(component_count) return results"},{"question":"Alice has a string `s` of length `n` consisting of lowercase English letters. She can perform two types of operations on this string: 1. Choose any character and replace it with any other lowercase English letter. 2. Choose any two adjacent characters and swap them. Alice wants to transform `s` into another string `t` of the same length consisting of lowercase English letters. She wants to achieve this transformation in the minimum number of operations. Help Alice determine the minimum number of operations required to transform `s` into `t` using the defined operations. Input The first line contains one integer `n` (1 ≤ n ≤ 100,000) — the length of strings `s` and `t`. The second line contains the string `s` of length `n` consisting of lowercase English letters. The third line contains the string `t` of length `n` consisting of lowercase English letters. Output In the only line of output print the minimum number of operations Alice should perform to transform `s` into `t`. Examples Input 6 abcdef azcedf Output 2 Input 5 hello world Output 4","solution":"def min_operations(n, s, t): Returns the minimum number of operations required to transform s into t. Operations include replacing a character or swapping adjacent characters. operations = 0 i = 0 while i < n: if s[i] == t[i]: i += 1 continue # If characters are different, try to swap with the next character if i + 1 < n and s[i] == t[i + 1] and s[i + 1] == t[i]: # This swap will fix two characters at once operations += 1 i += 2 else: # Else perform a replacement operations += 1 i += 1 return operations"},{"question":"Given an integer N, compute the factorial of N. Constraints * 0 ≤ N ≤ 20 Input The input will consist of a single integer N. Output Output a single line containing the factorial of N. Example Input 5 Output 120","solution":"def factorial(N): Computes the factorial of a given integer N. if N == 0: return 1 result = 1 for i in range(1, N + 1): result *= i return result"},{"question":"You\'re organizing a book club and want to ensure that the discussions are lively but manageable. Each potential member has specified a range for the number of members they feel comfortable with. Your goal is to invite as many members as possible while respecting everyone\'s preferences. Given a list of potential members and their respective comfortable ranges, determine the maximum number of members you can invite such that no one feels uncomfortable. Input N c1 d1 c2 d2 .. .. .. cN dN The integer N (1 ≤ N ≤ 100,000) is written on the first line of the input. This represents the number of potential members. On the following N lines, the integer ci and the integer di (1 ≤ ci ≤ di ≤ 100,001) are written separated by blanks. The integers ci and di written on the 1 + i line indicate that the i-th member feels comfortable if the number of members invited is between ci and di, inclusive. Output Output the maximum number of members you can invite such that every invited member feels comfortable. Examples Input 4 1 3 2 5 4 6 1 2 Output 2 Input 3 3 3 2 3 1 2 Output 2 Input 5 1 100000 2 5 3 4 5 5 4 100001 Output 4","solution":"def max_invitable_members(preferences): Given a list of preferences, this function returns the maximum number of members that can be invited such that everyone feels comfortable. low = 1 high = 100001 def can_invite(mid): count = 0 for (c, d) in preferences: if c <= mid <= d: count += 1 return count >= mid result = 0 while low <= high: mid = (low + high) // 2 if can_invite(mid): result = mid low = mid + 1 else: high = mid - 1 return result # reformatted input parsing function for completeness def parse_input(input_data): lines = input_data.strip().split(\\"n\\") N = int(lines[0]) preferences = [tuple(map(int, line.split())) for line in lines[1:]] return preferences # Sample usage # if __name__ == \'__main__\': # input_data = \\"5n1 100000n2 5n3 4n5 5n4 100001\\" # preferences = parse_input(input_data) # print(max_invitable_members(preferences)) # should return 4"},{"question":"Palindrome Partitioning II Problem Statement Given a string s, partition s such that every substring in the partition is a palindrome. Return the minimum cuts needed for a palindrome partitioning of s. Note that a palindrome is defined as a string that reads the same backwards as forwards. Input The input consists of a single line containing a string s (1 <= length of s <= 1000), which consists of lowercase English letters only. Output Output a single integer indicating the minimum number of cuts needed to partition the input string such that every substring of the partition is a palindrome. Example Input aab Output 1 Explanation The palindrome partitioning [\\"aa\\", \\"b\\"] could be produced using 1 cut. Example Input a Output 0 Explanation Since the entire string is already a palindrome, no cuts are needed. Example Input abc Output 2 Explanation The palindrome partitioning [\\"a\\", \\"b\\", \\"c\\"] could be produced using 2 cuts. Notes 1. The partitioning of the string should be such that every substring of the partition is a palindrome. 2. The number of cuts is defined as the number of partitions minus one. 3. If the string is already a palindrome, no cuts are needed. 4. Make use of dynamic programming to achieve an efficient solution.","solution":"def minCut(s): n = len(s) if n <= 1: return 0 # Create a table to check if substring s[i:j+1] is a palindrome dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j]: if length == 2: dp[i][j] = True else: dp[i][j] = dp[i+1][j-1] # Create a helper array to store the minimum cuts required cuts = [0] * n for i in range(n): if dp[0][i]: cuts[i] = 0 else: cuts[i] = float(\'inf\') for j in range(i): if dp[j+1][i]: cuts[i] = min(cuts[i], cuts[j] + 1) return cuts[-1]"},{"question":"A startup company wants to organize its network to optimize communication between n employees. Each employee has exactly one manager except the CEO who has no superior. The company can be represented as a tree, where each node is an employee and an edge between nodes represents a direct manager-subordinate relationship. The company plans to organize virtual meetings regularly. To ensure efficient information flow, they want to calculate the maximum number of levels in the company\'s hierarchy. Given the tree structure of the employees, determine the maximum hierarchy level. Input The first line contains an integer n — the number of employees (1 ≤ n ≤ 10^5). Each of the next n - 1 lines contains two integers ui and vi (1 ≤ ui, vi ≤ n) representing a direct manager-subordinate relationship, where ui is the manager and vi is the subordinate. Employee 1 is guaranteed to be the CEO. Output Output a single integer, the maximum number of levels in the business hierarchy. Examples Input 5 1 2 1 3 2 4 2 5 Output 3 Input 3 1 2 1 3 Output 2 Note In test case 1, the hierarchy looks like this: ``` 1 / 2 3 / 4 5 ``` The maximum number of levels is 3 (1 -> 2 -> 4 or 1 -> 2 -> 5). In test case 2, the hierarchy is: ``` 1 / 2 3 ``` The maximum number of levels is 2 (1 -> 2 or 1 -> 3).","solution":"from collections import deque, defaultdict def max_hierarchy_levels(n, relations): if n == 1: return 1 adjacency_list = defaultdict(list) for manager, subordinate in relations: adjacency_list[manager].append(subordinate) adjacency_list[subordinate].append(manager) def bfs_max_depth(start): visited = [False] * (n + 1) queue = deque([(start, 1)]) # (node, depth) max_depth = 0 while queue: current, depth = queue.popleft() visited[current] = True max_depth = max(max_depth, depth) for neighbor in adjacency_list[current]: if not visited[neighbor]: queue.append((neighbor, depth + 1)) visited[neighbor] = True return max_depth return bfs_max_depth(1) # Example usage: # n = 5 # relations = [(1, 2), (1, 3), (2, 4), (2, 5)] # print(max_hierarchy_levels(n, relations)) # Output: 3"},{"question":"You are given two non-empty strings s and t, consisting of lowercase Latin letters. Your task is to determine if there exists a permutation of string s that is a subsequence of string t. Input The input consists of two lines. The first line contains the string s (1 ≤ |s| ≤ 1000), and the second line contains the string t (1 ≤ |t| ≤ 1000). Both strings consist of lowercase Latin letters. Output Print \\"YES\\" if there exists a permutation of string s that is a subsequence of string t, otherwise print \\"NO\\". Examples Input abc ahbgdc Output YES Input ab baabc Output YES Input xyz aabbcc Output NO Note In the first example, one possible permutation of \\"abc\\" is \\"acb\\", which is a subsequence of \\"ahbgdc\\". In the second example, both \\"ab\\" and \\"ba\\" are permutations of \\"ab\\" and are subsequences of \\"baabc\\". In the third example, no permutation of \\"xyz\\" is a subsequence of \\"aabbcc\\".","solution":"def is_permutation_subsequence(s, t): Determines if any permutation of s is a subsequence of t. from collections import Counter # Count characters in s count_s = Counter(s) # Filter relevant characters in t based on characters in s relevant_t = [char for char in t if char in count_s] # Count characters in the filtered t count_t = Counter(relevant_t) # Check if count_t has at least as many characters as count_s for each character in s for char in count_s: if count_t[char] < count_s[char]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of tasks, each with a specific start and end time. You need to determine the maximum number of tasks you can complete without overlapping. Input: The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. For each test case: The first line contains a single integer n (1 ≤ n ≤ 100) — the number of tasks. The next n lines each contain two integers, start_i and end_i (1 ≤ start_i < end_i ≤ 1000) — the start and end times of the i-th task. Output: For each test case, print a single integer — the maximum number of tasks you can complete without overlapping. Example: Input: 3 3 1 3 2 5 4 6 4 1 2 2 3 3 4 4 5 2 1 10 2 9 Output: 2 4 1 Explanation: In the first test case, one of the optimal sets of non-overlapping tasks would be the first and third tasks (1-3 and 4-6). In the second test case, all tasks are non-overlapping, so the maximum number is 4. In the third test case, you can only select one of the tasks since both overlap.","solution":"def max_non_overlapping_tasks(t: int, test_cases: list) -> list: results = [] for case in test_cases: n, tasks = case tasks.sort(key=lambda x: x[1]) # Sort tasks by end time count = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"A company wants to analyze the relationships within its organizational structure using a tree of employees where each employee is connected to their immediate supervisor, and root node represents the CEO. The goal is to determine the depth of the employee tree. The depth of a tree is the maximum distance from the root node (the CEO) to any leaf node (an employee who doesn\'t supervise anyone else). Given the number of employees and their supervisory relationships, your task is to compute the depth of the employee tree. If the structure given does not form a proper tree, return -1. Input: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of employees including the CEO. Each of the next n-1 lines contains two integers ui and vi (1 ≤ ui, vi ≤ n) indicating that employee vi directly reports to employee ui. Output: Print a single integer, the depth of the employee tree if the structure is valid. Otherwise, print -1. Examples: Input 7 1 2 1 3 2 4 2 5 3 6 3 7 Output 3 Input 5 1 2 2 3 3 4 4 1 Output -1","solution":"def find_depth(n, relationships): from collections import defaultdict, deque if n == 1: return 1 graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in relationships: graph[u].append(v) in_degree[v] += 1 roots = [i for i in range(1, n + 1) if in_degree[i] == 0] if len(roots) != 1: return -1 root = roots[0] def bfs(root): queue = deque([(root, 1)]) max_depth = 1 visited = set() while queue: node, depth = queue.popleft() if node in visited: return -1 visited.add(node) max_depth = max(max_depth, depth) for neighbor in graph[node]: queue.append((neighbor, depth + 1)) if len(visited) != n: return -1 return max_depth return bfs(root)"},{"question":"Maya is a game developer who is designing a new puzzle game. In her game, a player needs to arrange tiles in a grid. Each tile has a number, and the goal is to rearrange the tiles such that the absolute difference between adjacent tiles is minimized. Given a grid with r rows and c columns, you are asked to find a way to rearrange the numbers from 1 to r*c in such a way that the absolute difference between every pair of adjacent tiles (tiles that share a side) is minimized. Input The input consists of several test cases. The first line contains an integer q (1 ≤ q ≤ 1000) — the number of test cases. Each test case consists of a single line containing two integers r and c (1 ≤ r, c ≤ 100) — the number of rows and columns of the grid. Output For each test case, print \\"YES\\" if it is possible to rearrange the tiles to satisfy the condition. If it is possible, print the r by c grid. If it is not possible, print \\"NO\\". Example Input 2 2 2 3 3 Output YES 1 2 3 4 YES 1 2 3 4 5 6 7 8 9 Note In the first test case, the grid is arranged such that the absolute differences between adjacent tiles are minimized. For example, the difference between the tiles in the first row (1 and 2) is 1, and the difference between the tiles in the first column (1 and 3) is 2. In the second test case, even though the grid size is larger, the numbers are arranged similarly to minimize adjacent differences. You may provide any valid solution that satisfies the constraints if multiple solutions exist.","solution":"def rearrange_tiles(q, queries): def solve_grid(r, c): grid = [[0] * c for _ in range(r)] num = 1 for i in range(r): for j in range(c): grid[i][j] = num num += 1 return grid results = [] for r, c in queries: if r == 1 or c == 1: grid = solve_grid(r, c) results.append((\\"YES\\", grid)) else: grid = solve_grid(r, c) results.append((\\"YES\\", grid)) return results def format_output(results): output = [] for result in results: if result[0] == \\"NO\\": output.append(\\"NO\\") else: output.append(\\"YES\\") for row in result[1]: output.append(\' \'.join(map(str, row))) return \'n\'.join(output)"},{"question":"You are given a string s consisting of lowercase letters. The goal is to rearrange the string such that no two adjacent characters are the same. If it is possible to rearrange the string in the desired way, output the rearranged string. If it is impossible, output \\"NO\\". Example Input 3 aab aaab abc Output aba NO abc Input The first line contains an integer q (1 ≤ q ≤ 1000) — the number of queries. Each of the next q lines contains a string s (1 ≤ |s| ≤ 1000). Output For each query, print the rearranged string if it is possible to rearrange the string such that no two adjacent characters are the same. Otherwise, print \\"NO\\".","solution":"import heapq from collections import Counter def rearrange_string(s): # Frequency map of characters char_freq = Counter(s) # Max heap based on frequency of characters max_heap = [(-freq, char) for char, freq in char_freq.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq = freq + 1 # decrement the frequency prev_char = char rearranged = \'\'.join(result) if len(rearranged) != len(s): return \\"NO\\" else: return rearranged def process_queries(queries): results = [] for query in queries: results.append(rearrange_string(query)) return results"},{"question":"Alice is organizing a music playlist for her upcoming party. She has a list of n songs, each with a specific duration in minutes. Alice wants to create the longest possible playlist following these rules: - The total duration of the playlist must be less than or equal to a given time limit t. - Each song can be included at most once in the playlist. Alice needs your help to determine the maximum number of songs she can include in her playlist without exceeding the given total duration t. Input: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of songs. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 1000) — the durations of each song. The third line contains an integer t (1 ≤ t ≤ 10000) — the total duration limit for the playlist. Output: Output a single integer — the maximum number of songs that can be included in the playlist without exceeding the given total duration t. Example: Input 5 4 3 2 7 5 10 Output 3 Explanation: In this example, Alice can include the songs with durations 4, 3, and 2, for a total duration of 9 minutes, which is less than the limit of 10 minutes. Therefore, she can include a maximum of 3 songs in her playlist.","solution":"def max_songs(n, durations, t): Returns the maximum number of songs that can be included in the playlist without exceeding the total duration t. Parameters: - n: int, the number of songs - durations: list of int, durations of each song - t: int, the total duration limit for the playlist Returns: - int, the maximum number of songs durations.sort() total_time = 0 song_count = 0 for duration in durations: if total_time + duration <= t: total_time += duration song_count += 1 else: break return song_count"},{"question":"Given an undirected graph with n vertices and weighted edges, each vertex has a certain profit value associated with it. You need to find the maximum profit that can be collected by traversing from the given starting vertex to any other vertex in the graph. The profit collected on a path is the sum of the profit values of the vertices visited. # Input: The first line of the input contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2 ⋅ 10^5) — the number of vertices and the number of edges in the graph, respectively. The second line contains n integers where the i-th integer represents the profit value p_i (1 ≤ p_i ≤ 10^9) for the i-th vertex. The third line contains one integer s (1 ≤ s ≤ n) — the starting vertex. The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9, u ≠ v) denoting an edge between vertices u and v of weight w. The graph is guaranteed to be connected. # Output: Print one integer — the maximum profit that can be collected by traversing from the starting vertex to any other vertex in the graph. # Examples: Input: ``` 5 6 10 20 15 25 5 1 1 2 4 1 3 2 2 3 1 2 4 6 3 4 3 4 5 5 ``` Output: ``` 55 ``` Input: ``` 4 4 8 15 10 5 2 2 1 3 2 3 2 3 4 4 4 1 1 ``` Output: ``` 33 ``` Explanation: For the first example, starting from vertex 1, the path 1->3->4 visits the vertices 1, 3, and 4 with total profit 10 + 15 + 25 = 50. The path 1->3->2->4 also covers vertices 1, 3, 2, and 4 with total profit 10 + 15 + 20 + 25 = 55. For the second example, starting from vertex 2, the path 2->1->4 visits vertices 2, 1, and 4 with total profit 15 + 8 + 5 = 28. The path 2->3->4->1 also covers vertices 2, 3, 4, and 1 with total profit 15 + 10 + 5 + 8 = 38. But since edge weights should be considered, the maximum collection would be on path 2->3->4: 15 + 10 + 5 = 30.","solution":"from heapq import heappop, heappush import sys def maximum_profit(n, m, profits, s, edges): dist = [sys.maxsize] * (n + 1) dist[s] = 0 graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) min_heap = [(0, s)] while min_heap: d, u = heappop(min_heap) if d > dist[u]: continue for w, v in graph[u]: new_dist = dist[u] + w if new_dist < dist[v]: dist[v] = new_dist heappush(min_heap, (new_dist, v)) max_profit = 0 for i in range(1, n + 1): if dist[i] < sys.maxsize: max_profit += profits[i - 1] return max_profit # Example usage example_n = 5 example_m = 6 example_profits = [10, 20, 15, 25, 5] example_s = 1 example_edges = [ (1, 2, 4), (1, 3, 2), (2, 3, 1), (2, 4, 6), (3, 4, 3), (4, 5, 5), ] print(maximum_profit(example_n, example_m, example_profits, example_s, example_edges)) # Output should be 55"},{"question":"Given an integer array `nums`, your task is to determine the largest sum of any non-empty contiguous subarray within `nums`. A contiguous subarray is defined as a portion of an array that maintains the order of the elements and is continuous (i.e., it cannot \\"skip\\" elements). For example, for the array `[-2,1,-3,4,-1,2,1,-5,4]`, the contiguous subarray `[4,-1,2,1]` has the largest sum, which is `6`. Implement a function `maxSubArray` that takes a list of integers `nums` as input and returns the maximum sum of any non-empty contiguous subarray. # Function Signature ```python def maxSubArray(nums: List[int]) -> int: ``` # Input - `nums`: A list of integers (1 ≤ len(nums) ≤ 10^5, -10^4 ≤ nums[i] ≤ 10^4). # Output - An integer, representing the largest sum of a contiguous subarray. # Examples Example 1 **Input:** ```python [−2,1,−3,4,−1,2,1,−5,4] ``` **Output:** ```python 6 ``` **Explanation:** The subarray `[4,-1,2,1]` has the largest sum `6`. Example 2 **Input:** ```python [1] ``` **Output:** ```python 1 ``` **Explanation:** The subarray `[1]` is the only one present and thus the largest sum is `1`. Example 3 **Input:** ```python [5,4,−1,7,8] ``` **Output:** ```python 23 ``` **Explanation:** The subarray `[5,4,−1,7,8]` has the largest sum `23`.","solution":"def maxSubArray(nums): Returns the largest sum of any non-empty contiguous subarray within nums. Uses Kadane\'s Algorithm for efficient calculation. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a list of non-negative integers, you need to determine the maximum possible sum of its elements, where you can remove at most one subarray of consecutive elements. A subarray is defined as any contiguous portion of the array. The task is to find this maximum possible sum by possibly removing one subarray. If removing a subarray doesn\'t yield a higher sum, then the sum of the entire array without any removals should be considered. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n non-negative integers separated by a space, representing the elements of the array. Each integer is within the range [0, 10^4]. Output Output one integer, the maximum possible sum of the array after removing at most one subarray. Examples Input 8 1 2 3 4 5 6 7 8 Output 36 Input 5 1 2 3 0 6 Output 12 Input 5 1 2 3 0 3 Output 9 Explanation In the first example, the entire array sum is 36, and there is no need to remove any subarray as it would reduce the sum. In the second example, removing the subarray from index 0 to 2 and adding the individual sums of the remaining subarrays (0+6) and (1+3), the total would be 12, which is better than the sum of keeping the whole array intact. In the third example, removing the zero gives the sum 9, which is higher than any other possible sum involving removal of one subarray.","solution":"def max_sum_after_removal(arr): n = len(arr) if n == 0: return 0 if n == 1: return arr[0] total_sum = sum(arr) max_sum_no_removal = total_sum # Calculate prefix sums prefix_sum = [0] * n prefix_sum[0] = arr[0] for i in range(1, n): prefix_sum[i] = prefix_sum[i-1] + arr[i] # Calculate suffix sums suffix_sum = [0] * n suffix_sum[-1] = arr[-1] for i in range(n-2, -1, -1): suffix_sum[i] = suffix_sum[i+1] + arr[i] max_sum = total_sum # Initial max_sum is without any removal # Evaluate the option of removing one subarray for i in range(n): for j in range(i, n): if i == 0 and j == n-1: current_sum = 0 elif i == 0: current_sum = suffix_sum[j+1] if j+1 < n else 0 elif j == n-1: current_sum = prefix_sum[i-1] else: current_sum = prefix_sum[i-1] + suffix_sum[j+1] max_sum = max(max_sum, current_sum) return max(max_sum, max_sum_no_removal)"},{"question":"A pangram is a sentence that contains every single letter of the alphabet at least once. Given a string, check if it is a pangram or not. Input: The input is a single string `s` which consists of lowercase letters and spaces only. The length of `s` does not exceed 10,000 characters. There are no leading or trailing spaces, and there is exactly one space between words. Output: Print `YES` if the string is a pangram, otherwise print `NO`. Example Input 1: the quick brown fox jumps over the lazy dog Output 1: YES Input 2: hello world Output 2: NO","solution":"def is_pangram(s): Checks if a given string `s` is a pangram (contains every single letter of the alphabet at least once). alphabet = set(\'abcdefghijklmnopqrstuvwxyz\') return \'YES\' if alphabet.issubset(s) else \'NO\'"},{"question":"Martha is an avid reader and she enjoys tracking her reading progress. She wants you to create a program that helps her to calculate the number of pages she needs to read each day to finish her book by a certain date. You need to write a program that takes the total number of pages in the book, the current page Martha is on, and the number of days remaining to finish the book. The program should calculate and output the number of pages she needs to read each day to reach her goal. If it\'s not possible for her to reach her goal within the given days (i.e., the remaining pages are greater than the product of days and maximum pages she can read per day), the program should indicate that it\'s not possible. **Input:** The first line contains an integer t (1 ≤ t ≤ 10) representing the number of test cases. The next t lines each contain three integers: - `total_pages` (1 ≤ total_pages ≤ 10^4): the total number of pages in the book. - `current_page` (1 ≤ current_page < total_pages): the page Martha is currently on. - `days_remaining` (1 ≤ days_remaining ≤ 365): the number of days Martha has left to complete the book. **Output:** For each test case, output a single line. If it is possible for Martha to reach her goal, output the number of pages she needs to read each day (with two decimal points). If it is not possible, output \\"Not possible\\". **Example:** **Input:** ``` 3 300 150 10 500 100 15 1000 500 250 ``` **Output:** ``` 15.00 26.67 Not possible ``` In this example: - In the first case, Martha needs to read 15 pages every day to complete the book. - In the second case, Martha needs to read approximately 26.67 pages each day. - In the third case, it is not possible for Martha to finish the remaining 500 pages in 250 days.","solution":"def calculate_pages_per_day(total_pages, current_page, days_remaining): Calculate the number of pages Martha needs to read each day to finish her book by a certain date. Args: total_pages (int): The total number of pages in the book. current_page (int): The page Martha is currently on. days_remaining (int): The number of days remaining to finish the book. Returns: str: The number of pages she needs to read each day in the format of two decimal places, or \\"Not possible\\" if it is not achievable within the given days. remaining_pages = total_pages - current_page if remaining_pages > days_remaining * 100: # Assuming maximum pages per day constraints return \\"Not possible\\" pages_per_day = remaining_pages / days_remaining return f\\"{pages_per_day:.2f}\\" def process_test_cases(test_cases): results = [] for case in test_cases: total_pages, current_page, days_remaining = case result = calculate_pages_per_day(total_pages, current_page, days_remaining) results.append(result) return results"},{"question":"Given an array of integers, find the total number of pairs (i, j) where 1 ≤ i < j ≤ N, such that A[i] + A[j] is an odd number. Input: The first line contains an integer N, the number of elements in the array. The second line contains N integers, A[1], A[2], ..., A[N] separated by spaces. Output: Output the total number of pairs where the sum of the elements is odd. Constraints: 1 ≤ N ≤ 10^6 1 ≤ A[i] ≤ 10^9 Sample Input: 5 1 2 3 4 5 Sample Output: 6","solution":"def count_odd_sum_pairs(N, A): Returns the total number of pairs (i, j) where 1 ≤ i < j ≤ N and A[i] + A[j] is odd. Parameters: N (int): The number of elements in the array. A (list of int): The list of integers. Returns: int: The total number of pairs where the sum of the elements is odd. # Count the number of even and odd numbers in the array even_count = sum(1 for x in A if x % 2 == 0) odd_count = N - even_count # Calculate the number of pairs with one even and one odd element return even_count * odd_count"},{"question":"A group of friends are playing a game involving sequences of integers. They start with a sequence of positive integers and perform a number of operations on this sequence. Each operation consists of removing one contiguous subsequence of elements (while keeping the order of the remaining elements) and replacing it with the sum of those elements. The goal of the game is to minimize the length of the sequence after a certain number of operations. Let\'s denote the initial sequence as `a_1, a_2, ..., a_n` with length `n`, and the number of operations as `k`. Your task is to determine the minimum possible length of the sequence after performing exactly `k` operations. Input The first line contains two positive integers `n` (2 ≤ n ≤ 100,000) and `k` (1 ≤ k ≤ n - 1), denoting the length of the sequence and the number of operations respectively. The second line contains `n` positive integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) representing the initial sequence. Output Output a single integer, the minimum possible length of the sequence after performing exactly `k` operations. Examples Input 5 2 2 3 7 2 1 Output 3 Input 4 1 1 5 2 4 Output 3 Note In the first example, one possible way is to first sum the subsequence [3, 7] resulting in the sequence [2, 10, 2, 1], and then summing the subsequence [2, 10] resulting in the sequence [12, 2, 1]. The minimum possible length after 2 operations is 3. In the second example, one possible way is to sum the entire sequence [1, 5, 2, 4] into a single element [12], but since we are allowed only one operation, that is not possible. Instead, summing any two consecutive elements will result in a sequence of length 3. The minimum possible length after 1 operation is therefore 3.","solution":"def minimize_sequence_length(n, k, sequence): Given the initial sequence of length n and the number of operations k, return the minimum possible length of the sequence. :param n: Integer, the length of the initial sequence. :param k: Integer, the number of operations. :param sequence: List of integers, the initial sequence. :return: Integer, the minimum possible length of the sequence after k operations. return max(1, n - k)"},{"question":"You are given a list of positive integers. A \\"special subsequence\\" is defined as a contiguous subsequence where the difference between the maximum and minimum elements is the greatest. Your task is to find the length of the longest special subsequence. Input: The first line contains an integer n (1 < n ≤ 100,000). The second line contains n distinct positive integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output: Print a single integer – the length of the longest special subsequence. Examples: Input 7 4 7 5 2 1 3 6 Output 6 Input 6 10 20 30 40 50 60 Output 6 Note For the first sample, \\"special subsequence\\" is [7, 5, 2, 1, 3, 6] where the difference between the maximum and minimum values is 7 - 1 = 6. For the second sample, the entire sequence is already a \\"special subsequence\\" with the difference between the maximum and minimum values is 60 - 10 = 50.","solution":"def longest_special_subsequence(arr): Returns the length of the longest special subsequence in the given list. A \\"special subsequence\\" is defined as a contiguous subsequence where the difference between the maximum and minimum elements is the greatest. n = len(arr) if n == 0: return 0 max_len = 1 left = 0 while left < n: current_max = current_min = arr[left] right = left while right < n: current_max = max(current_max, arr[right]) current_min = min(current_min, arr[right]) max_len = max(max_len, right - left + 1) right += 1 left += 1 return max_len"},{"question":"You have an array of integers representing the height of towers. The towers are numbered from left to right starting from 1. Initially, each tower has some height and we will add heights of subsequent towers to it based on certain operations. There are two types of operations: 1. Add a certain height to a specific tower. 2. Query the height of a specific tower. Each operation affects only the specified tower and the modifications are independent of each other. The height of each tower may become very large after multiple operations. You need to process a list of operations and output the final height of each tower after all operations have been performed. Input The first line contains an integer `n` (1 ≤ n ≤ 100,000) - the number of towers. The second line contains `n` integers - the initial heights of the towers. The third line contains an integer `m` (1 ≤ m ≤ 100,000) - the number of operations. Each of the next `m` lines contains an operation of the following type: * \\"1 x h\\" - add height h to tower x (1 ≤ x ≤ n; 1 ≤ h ≤ 1,000,000) * \\"2 x\\" - query the height of tower x (1 ≤ x ≤ n) Output For each query operation, output the height of the specified tower on a new line. Examples Input 5 1 2 3 4 5 4 1 2 10 2 2 1 3 20 2 3 Output 12 23 Input 3 4 5 6 3 1 1 100 1 3 200 2 3 Output 206","solution":"def process_operations(n, initial_heights, operations): heights = initial_heights[:] # make a copy of the initial heights results = [] for operation in operations: parts = operation.split() if parts[0] == \'1\': x = int(parts[1]) - 1 h = int(parts[2]) heights[x] += h elif parts[0] == \'2\': x = int(parts[1]) - 1 results.append(heights[x]) return results"},{"question":"You are given an array of integers `arr` and an integer `k`. Your task is to find the k-th largest element in the array. The same number may appear multiple times in the array, but each occurrence of the number should be considered as a separate instance. Note that the k-th largest element means the k-th element in the sorted order, not the k-th distinct element. Constraints * 1 leq |arr| leq 100000 * -10^9 leq arr[i] leq 10^9 * 1 leq k leq |arr| Input Input is given from Standard Input in the following format: ``` n k arr ``` Where: - `n` is the size of the array `arr`. - `k` is the position of the element you need to find in the sorted array. - `arr` is the input array of integers. Output Output the k-th largest element in the array. Examples Input: ``` 6 2 3 2 1 5 6 4 ``` Output: 5 Input: ``` 8 4 7 10 4 3 20 15 7 10 ``` Output: 10 In the first example, the sorted array is `[1, 2, 3, 4, 5, 6]` and the second largest element is 5. In the second example, the sorted array is `[3, 4, 7, 7, 10, 10, 15, 20]` and the fourth largest element is 10.","solution":"def find_kth_largest(n, k, arr): Returns the k-th largest element in the array. arr.sort(reverse=True) # Sort the array in descending order return arr[k-1] # k-th largest element (1-based index) # Reading input from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) arr = list(map(int, data[2:])) print(find_kth_largest(n, k, arr))"},{"question":"You are working on a file synchronization tool, which handles files from two sources: \\"local\\" and \\"remote\\". Each file has a name and a corresponding timestamp. Your tool needs to ensure that the latest version of each file is preserved, and in the case of a conflict where both sources have a file with the same name but different timestamps, the \\"remote\\" version should take precedence over the \\"local\\" version. Your task is to write a function that receives two lists of files (one for \\"local\\" and one for \\"remote\\"). Each file in the list is represented as a tuple containing the file name and its timestamp. Your function should return a dictionary where each key is a unique file name and the value is the corresponding tuple having the latest version based on the given instructions. Input The function will receive two lists of files. Each file is represented as a tuple: 1. local_files: a list of tuples where each tuple contains a string (the file name) and an integer (the timestamp). Timestamps are always non-negative. 2. remote_files: a list of tuples in the same format as local_files. The lengths of both lists do not exceed 10^5, and file names are unique within each respective list but not necessarily between them. Output The function should return a dictionary where each key is a file name and each value is a tuple (filename, timestamp) representing the latest version of the file according to the above rules. Function Signature: ```python def synchronize_files(local_files: List[Tuple[str, int]], remote_files: List[Tuple[str, int]]) -> Dict[str, Tuple[str, int]]: # Your implementation here ``` Examples Input ```python local_files = [(\\"file1.txt\\", 3), (\\"file2.txt\\", 5), (\\"file3.txt\\", 1)] remote_files = [(\\"file1.txt\\", 4), (\\"file3.txt\\", 1), (\\"file4.txt\\", 2)] ``` Output ```python {\'file1.txt\': (\'file1.txt\', 4), \'file2.txt\': (\'file2.txt\', 5), \'file3.txt\': (\'file3.txt\', 1), \'file4.txt\': (\'file4.txt\', 2)} ``` Input ```python local_files = [(\\"a.txt\\", 7), (\\"b.txt\\", 5)] remote_files = [(\\"a.txt\\", 5), (\\"c.txt\\", 10)] ``` Output ```python {\'a.txt\': (\'a.txt\', 7), \'b.txt\': (\'b.txt\', 5), \'c.txt\': (\'c.txt\', 10)} ``` Note In the first example, \\"file1.txt\\" appears in both lists, but the remote version has a later timestamp, so it gets preserved. \\"file2.txt\\" only appears in the local list, so it is simply added. \\"file3.txt\\" appears in both with the same timestamp, so either one can be taken; the remote version is chosen by default as per the rule. \\"file4.txt\\" only appears in the remote list. In the second example, \\"a.txt\\" appears in both lists, but the local version has a newer timestamp, so it is preserved. \\"b.txt\\" only appears in local and \\"c.txt\\" only in remote so both are added directly to the result.","solution":"from typing import List, Tuple, Dict def synchronize_files(local_files: List[Tuple[str, int]], remote_files: List[Tuple[str, int]]) -> Dict[str, Tuple[str, int]]: file_map = {} # Add local files to the file_map for file_name, timestamp in local_files: file_map[file_name] = (file_name, timestamp) # Add/Update remote files to the file_map for file_name, timestamp in remote_files: if file_name in file_map: if timestamp > file_map[file_name][1]: file_map[file_name] = (file_name, timestamp) else: file_map[file_name] = (file_name, timestamp) return file_map"},{"question":"Write a function that finds and prints all the prime numbers between 1 and a given number `N`. Input Format The first line contains an integer T, i.e., the number of test cases. The next T lines will each contain an integer N. Output Format For each test case, print all prime numbers less than or equal to N, separated by a space. If no primes are found, print `None`. Constraints 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 SAMPLE INPUT 2 10 15 SAMPLE OUTPUT 2 3 5 7 2 3 5 7 11 13","solution":"def is_prime(num): if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def find_primes_up_to_n(N): primes = [num for num in range(2, N + 1) if is_prime(num)] return \\" \\".join(map(str, primes)) if primes else \\"None\\" def prime_numbers(T, test_cases): results = [] for N in test_cases: results.append(find_primes_up_to_n(N)) return results"},{"question":"Create a program that reads a sequence of pairs of integers (a, b) and outputs the greatest common divisor (GCD) of each pair. Each integer is a positive integer less than or equal to 1000. The end of input is indicated by a pair where both integers are 0. Input Multiple pairs of integers in the following format: a b The input ends with the line: 0 0 Output For each pair (a, b) other than (0, 0), print the GCD of a and b on a new line. Example Input 48 18 100 75 0 0 Output 6 25","solution":"import math def gcd_of_pairs(pairs): Given a list of pairs of integers, return a list of greatest common divisors (GCDs) for each pair, except the ending pair (0, 0). gcd_results = [] for a, b in pairs: if a == 0 and b == 0: break gcd_results.append(math.gcd(a, b)) return gcd_results"},{"question":"You are managing a conveyor belt system in a factory that processes packages. The conveyor belt can be represented as an array of integers, where each integer represents the weight of a package. The system can perform two types of operations: 1. Add a package with a given weight to the end of the conveyor belt. 2. Remove the first package from the conveyor belt. Your goal is to implement a load-balancing mechanism that ensures the total weight of the packages on the conveyor belt does not exceed a certain maximum threshold, T. If an operation would cause the total weight to exceed T, the operation should be rejected. Input The first line contains two integers, N and T, where N is the number of operations to be executed, and T is the maximum weight threshold. The next N lines describe the operations. Each operation is either of the form \\"ADD X\\" or \\"REMOVE\\", where X is the weight of the package to be added. Output For each operation, output \\"ACCEPTED\\" if the operation is performed successfully and \\"REJECTED\\" if the operation is rejected due to exceeding the maximum weight threshold. Constraints - 1 ≤ N ≤ 1000 - 1 ≤ T ≤ 100000 - 1 ≤ X ≤ 1000 Example Input 10 50 ADD 10 ADD 20 REMOVE ADD 30 ADD 25 REMOVE ADD 15 REMOVE ADD 10 REMOVE Output ACCEPTED ACCEPTED ACCEPTED ACCEPTED REJECTED ACCEPTED ACCEPTED ACCEPTED ACCEPTED ACCEPTED Explanation 1. ADD 10 – Total weight is 10 (ACCEPTED) 2. ADD 20 – Total weight is 30 (ACCEPTED) 3. REMOVE – Total weight is 20 (first package of weight 10 removed) (ACCEPTED) 4. ADD 30 – Total weight is 50 (ACCEPTED) 5. ADD 25 – Total weight would become 75 (REJECTED) 6. REMOVE – Total weight is 30 (first package of weight 20 removed) (ACCEPTED) 7. ADD 15 – Total weight is 45 (ACCEPTED) 8. REMOVE – Total weight is 15 (first package of weight 30 removed) (ACCEPTED) 9. ADD 10 – Total weight is 25 (ACCEPTED) 10. REMOVE – Total weight is 15 (first package of weight 10 removed) (ACCEPTED)","solution":"def manage_conveyor_belt(operations, threshold): Manage the conveyor belt system with load-balancing mechanism that ensures the total weight does not exceed a certain maximum threshold. Parameters: operations (list): List of operations either of the form \\"ADD X\\" or \\"REMOVE\\". threshold (int): Maximum weight threshold. Returns: list: List containing \\"ACCEPTED\\" or \\"REJECTED\\" for each operation based on if it was performed successfully. conveyor_belt = [] current_weight = 0 results = [] for operation in operations: if operation.startswith(\\"ADD\\"): _, weight = operation.split() weight = int(weight) if current_weight + weight <= threshold: conveyor_belt.append(weight) current_weight += weight results.append(\\"ACCEPTED\\") else: results.append(\\"REJECTED\\") elif operation == \\"REMOVE\\": if conveyor_belt: removed_weight = conveyor_belt.pop(0) current_weight -= removed_weight results.append(\\"ACCEPTED\\") return results"},{"question":"Write a function `increasing_triplet` that takes a list of integers as input and returns `True` if there exists a triplet (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. Otherwise, return `False`. # Function Signature: ```python def increasing_triplet(nums: List[int]) -> bool: pass ``` # Constraints: - The function should have a time complexity of O(n). # Example: ```python assert increasing_triplet([1, 2, 3, 4, 5]) == True assert increasing_triplet([5, 4, 3, 2, 1]) == False assert increasing_triplet([2, 1, 5, 0, 4, 6]) == True ``` # Explanation: **Example 1:** In the list [1, 2, 3, 4, 5], there exists several triplets which satisfy the condition; one is (1, 2, 3). **Example 2:** In the list [5, 4, 3, 2, 1], there is no such triplet that satisfies the condition. **Example 3:** In the list [2, 1, 5, 0, 4, 6], the triplet (2, 4, 6) starts at position 3 and ends at position 6, fulfilling the query.","solution":"from typing import List def increasing_triplet(nums: List[int]) -> bool: Returns True if there exists a triplet (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. Otherwise, return False. if len(nums) < 3: return False first = second = float(\'inf\') for num in nums: if num <= first: first = num elif num <= second: second = num else: return True return False"},{"question":"You have an array of integers that represents the heights of students standing in a line. You need to sort the array such that all even heights come before odd heights while maintaining the original relative order of even and odd heights. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of students in the line. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100), which are the heights of the students. Output Print the sorted array where all even heights come before the odd heights, with the original relative order preserved. Examples Input 5 5 3 2 8 1 Output 2 8 5 3 1 Input 4 7 5 4 6 Output 4 6 7 5","solution":"def sort_heights(n, heights): Sorts the array such that all even heights come before odd heights while maintaining the original relative order of even and odd heights. :param n: Number of students in the line :param heights: List of student heights :return: A new list sorted as specified even_heights = [height for height in heights if height % 2 == 0] odd_heights = [height for height in heights if height % 2 != 0] return even_heights + odd_heights"},{"question":"A team of software developers is working on a git repository. The repository has a history of n commits. Each commit can either be a feature, a bugfix, or a refactor, denoted by \'F\', \'B\', and \'R\' respectively. The lead developer wants to know if the commits can be rearranged such that all feature commits are grouped together, followed by all bugfix commits, and finally all refactor commits, without changing the relative order of commits in the same category. Your task is to write a function that returns the rearranged commit history as a single string, keeping the relative order within each type of commit. Input The input consists of a single string of length n (1 ≤ n ≤ 100) consisting of \'F\', \'B\', and \'R\' characters, representing the commit history. Output Output the rearranged commit history as a single string, where all feature commits come first, followed by all bugfix commits, and then all refactor commits, preserving the relative order within the same type of commit. Examples Input FBFRRBBR Output FFBBBRRR Input RFB Output FBR Note In the first example, the commits are rearranged by first outputting all \'F\' commits in their original order, followed by \'B\' commits, and finally \'R\' commits. In the second example, the only possible rearrangement that groups commits by type while preserving the relative order is \\"FBR\\".","solution":"def rearrange_commits(commit_history): Rearranges the commit history such that all feature commits are grouped together, followed by all bugfix commits, and finally all refactor commits, without changing the relative order of commits in the same category. Parameters: commit_history (str): A string consisting of \'F\', \'B\', and \'R\' characters. Returns: str: Rearranged commit history. features = [] bugfixes = [] refactors = [] for commit in commit_history: if commit == \'F\': features.append(commit) elif commit == \'B\': bugfixes.append(commit) elif commit == \'R\': refactors.append(commit) return \'\'.join(features) + \'\'.join(bugfixes) + \'\'.join(refactors)"},{"question":"Unique Element Counter Problem Statement You are given a list of integers and you need to count the number of unique elements in the list after performing a sequence of operations. Each operation allows you to increase or decrease any element in the list by 1. Your task is to determine the minimum number of unique elements that can exist in the list after performing any number of such operations. Input The input consists of multiple test cases. The format of each test case is as follows: N a_1 a_2 ... a_N The first line contains a single integer N (1 ≤ N ≤ 500) which represents the number of elements in the list. The second line contains N integers a_i (-10^3 ≤ a_i ≤ 10^3). These represent the elements in the list. Output For each test case, print the minimum number of unique elements that can exist in the list after performing any number of the allowed operations. Sample Input 1 5 1 2 2 3 4 Sample Output 1 3 Sample Input 2 4 -1 0 1 2 Sample Output 2 1 Sample Input 3 3 5 5 9 Sample Output 3 2 Explanation of Sample Inputs and Outputs For Sample Input 1, we can change the list to [1, 1, 2, 3, 4]. Here we have 3 unique elements (1, 2, and 3, or 1, 3, and 4). For Sample Input 2, we can change the list to [0, 0, 0, 0]. All elements are the same, so there is only 1 unique element. For Sample Input 3, we can change the list to [5, 5, 9] which already contains 2 unique elements (5 and 9).","solution":"def min_unique_elements(n, arr): Returns the minimum number of unique elements after performing any number of increase or decrease operations on the list. # The minimum number of unique elements after any number of adjustments # is determined by the ceiling of dividing the length of the input list by 2. return (n + 1) // 2 # Reading input for multiple test cases def process_multiple_test_cases(input_data): lines = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(lines): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) results.append(min_unique_elements(n, arr)) index += 2 return results"},{"question":"Write a program that takes a string consisting of lowercase and uppercase letters and groups each set of identical letters that are adjacent to each other. The program should then print out each group and the number of characters in that group in the order they appear in the input string. # Input - A single string `s` consisting of only lowercase and uppercase letters (1 ≤ |s| ≤ 1000). # Output - For each group of adjacent identical characters in the string, output the character followed by the number of characters in that group, all on a single line. # Examples **Input:** ``` aaBBccDDaAa ``` **Output:** ``` a 2 B 2 c 2 D 2 a 1 A 1 a 1 ``` **Input:** ``` CCCaaAAAaaa ``` **Output:** ``` C 3 a 2 A 3 a 3 ``` # Notes - The groups are case-sensitive, meaning \'a\' and \'A\' are considered different characters. - The groups should be printed in the order they appear in the input string.","solution":"def group_adjacent_characters(s): Takes a string consisting of lowercase and uppercase letters and groups adjacent identical letters. Outputs each group and the number of characters in that group in the order they appear in the input string. if not s: return [] result = [] current_char = s[0] current_count = 1 for char in s[1:]: if char == current_char: current_count += 1 else: result.append(f\\"{current_char} {current_count}\\") current_char = char current_count = 1 result.append(f\\"{current_char} {current_count}\\") return result"},{"question":"Longest Consecutive Sequence A sequence of numbers is consecutive if every number in the sequence is one more than the previous number in the sequence. For instance, the sequence [3, 4, 5, 6] is consecutive, but the sequence [1, 3, 5, 7] is not. Zero is considered consecutive to both -1 and 1 in this context. Given an unsorted array of integers, your task is to find the length of the longest sequence of consecutive numbers that can be formed using elements from the array. You need to implement the function `findLongestConsecutiveSequence(nums)` that takes an array of integers `nums` and returns the length of the longest consecutive sequence. **Input:** An array `nums` of integers (1 leq |nums| leq 10^5, -10^9 leq nums[i] leq 10^9). **Output:** The length of the longest sequence of consecutive numbers that can be derived from the given array `nums`. Example Input 1: ``` [100, 4, 200, 1, 3, 2] ``` Example Output 1: ``` 4 ``` Explanation: The longest consecutive sequence is [1, 2, 3, 4], and its length is 4. Example Input 2: ``` [0, -1, 2, -2, 3, -3] ``` Example Output 2: ``` 4 ``` Explanation: The longest consecutive sequence can be [-3, -2, -1, 0] or [0, -1, -2, -3], and its length is 4. Example Input 3: ``` [15, 23, 28, 19] ``` Example Output 3: ``` 1 ``` Explanation: There are no consecutive numbers, so the length of the longest consecutive sequence is 1. **Function Signature:** ```python def findLongestConsecutiveSequence(nums: List[int]) -> int: pass ``` Constraints: - The function should be efficient with O(n) complexity.","solution":"def findLongestConsecutiveSequence(nums): Given an unsorted array of integers, return the length of the longest sequence of consecutive numbers. Args: nums (List[int]): An unsorted array of integers Returns: int: The length of the longest consecutive sequence if not nums: return 0 num_set = set(nums) longest_sequence = 0 for num in num_set: if num - 1 not in num_set: # Start of a new sequence current_number = num current_sequence_length = 1 while current_number + 1 in num_set: current_number += 1 current_sequence_length += 1 longest_sequence = max(longest_sequence, current_sequence_length) return longest_sequence"},{"question":"You are given an array of integers representing the heights of buildings in a street, where each building is of unit width. Your task is to find the maximum area of rectangle that can be formed between the buildings, considering the buildings as histograms of various heights. Input: - The input consists of a single integer N representing the number of buildings. - The second line contains N space-separated integers H_i representing the heights of the buildings. Output: - Output a single integer representing the maximum rectangular area that can be formed between the buildings. Constraints: 1 ≤ N ≤ 10^5. 1 ≤ H_i ≤ 10^9 for each valid i. SAMPLE INPUT: 6 2 1 5 6 2 3 SAMPLE OUTPUT: 10 Explanation: The largest rectangle can be formed between the heights 5 and 6 with width 2, giving area = 5 * 2 = 10.","solution":"def max_histogram_area(N, heights): Function to calculate the maximum rectangular area under given Histogram. :param int N: Number of buildings :param List[int] heights: List of heights of the buildings :return int: The maximum rectangular area stack = list() max_area = 0 # Initialize max area index = 0 while index < N: if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A coding competition is being hosted where `N` participants each have a distinct skill level denoted by their score. The organizers want to form teams based on these skill levels. Each team should consist of exactly 3 participants. The skill level of a team is defined as the difference between the highest and the lowest score in the team. The organizers want to form teams such that the maximum skill level among all teams is minimized. Given the skill levels of the participants, help the organizers form the teams following the mentioned condition. # Input - The first line contains a single integer `N` (3 ≤ N ≤ 30000), the number of participants. - The second line contains `N` space-separated integers representing the skill levels of the participants. # Output - Print a single integer representing the minimum possible value of the maximum skill level of any team. # Constraints - Each participant\'s skill level is a unique integer between 1 and 100000. # Example Sample Input 1: 9 1 7 3 4 8 6 12 13 14 Sample Output 1: 2 Sample Input 2: 6 10 20 30 40 50 60 Sample Output 2: 20 # Explanation - In Sample Input 1, the optimal teams are formed with the skill levels [1, 3, 4], [6, 7, 8], and [12, 13, 14]. The maximum skill level difference within any of these teams is 2, which is the minimum possible. - In Sample Input 2, the optimal teams are [10, 20, 30], and [40, 50, 60]. The maximum skill level difference within any of these teams is 20, which cannot be minimized further. The task is to determine the optimal way to team up participants to minimize the highest skill level gap over all possible team formations.","solution":"def minimize_max_skill_level(N, skill_levels): Forms teams of 3 participants such that the maximum skill difference within any team is minimized. Parameters: N : int : Number of participants skill_levels : List[int] : List of distinct skill levels of participants Returns: int : Minimum possible maximum skill level difference among the teams # Sort skill levels skill_levels.sort() # Initialize the minimum possible maximum skill level difference to a large number min_max_skill_level_diff = float(\'inf\') # Form teams by checking consecutive triplets for i in range(0, N, 3): if i + 2 < N: max_skill_diff = skill_levels[i + 2] - skill_levels[i] min_max_skill_level_diff = min(min_max_skill_level_diff, max_skill_diff) return min_max_skill_level_diff"},{"question":"A group of friends wants to climb a staircase with N steps. Each friend can climb either 1 step, 2 steps, or 3 steps at a time. Given the number of steps, determine the number of distinct ways the entire group can reach the top. Write a function that takes the number of steps as input and returns the total number of ways to climb the staircase. Your task is to write a function that computes the number of ways to climb the staircase considering all possibilities. Input The input consists of a single integer N (1 ≤ N ≤ 50), the number of steps in the staircase. Output Output a single integer, the number of distinct ways to reach the top of the staircase. Examples Input 3 Output 4 Input 5 Output 13","solution":"def count_ways_to_climb_stairs(n): Returns the number of distinct ways to climb a staircase with n steps. Each step can be either 1, 2, or 3 steps at a time. if n == 1: return 1 elif n == 2: return 2 elif n == 3: return 4 dp = [0] * (n + 1) dp[1], dp[2], dp[3] = 1, 2, 4 for i in range(4, n + 1): dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] return dp[n]"},{"question":"Write a function that finds the length of the longest substring without repeating characters in a given string. Function Signature: ```python def length_of_longest_substring(s: str) -> int: ``` Input The input is a single string `s` consisting of English letters (both uppercase and lowercase), digits, and symbols. The length of the string is at most 10^5. Output The function should return an integer representing the length of the longest substring without repeating characters. Examples Input ```python \\"abcabcbb\\" ``` Output ```python 3 ``` Explanation: The answer is \\"abc\\", with the length of 3. Input ```python \\"bbbbb\\" ``` Output ```python 1 ``` Explanation: The answer is \\"b\\", with the length of 1. Input ```python \\"pwwkew\\" ``` Output ```python 3 ``` Explanation: The answer is \\"wke\\", with the length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Input ```python \\"\\" ``` Output ```python 0 ``` Explanation: The input string is empty, so the output is 0.","solution":"def length_of_longest_substring(s: str) -> int: Finds the length of the longest substring without repeating characters in a given string. # Dictionary to store the last positions of each character char_map = {} # Initialize the start of the current window and the max length start = max_length = 0 # Iterate through the string for end, char in enumerate(s): # If the character is already in the window if char in char_map and char_map[char] >= start: # Move the start to the next position of the last occurrence of the character start = char_map[char] + 1 # Update the last position of the character char_map[char] = end # Update the maximum length max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a map of a city in the form of an undirected graph with `N` intersections (nodes) and `M` bidirectional roads (edges). Each road has a positive integer weight representing the time required to travel along this road. Your goal is to determine the shortest time required to travel from intersection `S` to intersection `E`. If there is no such path, return -1. # Input Format - The first line contains three integers `N`, `M`, and `Q` (1 ≤ N ≤ 10^5, 0 ≤ M ≤ 10^5, 1 ≤ Q ≤ 10^5), representing the number of intersections, the number of roads, and the number of queries, respectively. - The next `M` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4), representing a road between intersections `u` and `v` with travel time `w`. - The last `Q` lines each contain two integers `S` and `E` (1 ≤ S, E ≤ N), representing the starting and ending intersections for each query. # Output Format Print `Q` lines, each containing the shortest time to travel from `S` to `E` for each query, or `-1` if no such path exists. # Example Input ``` 5 6 3 1 2 10 2 3 10 1 4 15 4 5 10 5 3 10 1 5 25 1 3 1 5 3 5 ``` Output ``` 20 25 10 ``` # Note In the example above, the city map can be visualized as follows: ``` Intersections: 1 --10-- 2 | | 15 10 | | 4 --10-- 5 --10-- 3 ``` For the given queries: 1. The shortest path from intersection `1` to intersection `3` is `1 -> 2 -> 3` with a total travel time of `20`. 2. The shortest path from intersection `1` to intersection `5` is `1 -> 4 -> 5` with a total travel time of `25`. 3. The shortest path from intersection `3` to intersection `5` is `3 -> 5` with a total travel time of `10`.","solution":"import heapq def shortest_time(N, M, edges, queries): def dijkstra(graph, start): times = {node: float(\'inf\') for node in range(1, N+1)} times[start] = 0 pq = [(0, start)] while pq: current_time, u = heapq.heappop(pq) if current_time > times[u]: continue for v, weight in graph[u]: time = current_time + weight if time < times[v]: times[v] = time heapq.heappush(pq, (time, v)) return times graph = {i: [] for i in range(1, N+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) results = [] memo = {} for S, E in queries: if S not in memo: memo[S] = dijkstra(graph, S) shortest = memo[S][E] results.append(shortest if shortest != float(\'inf\') else -1) return results"},{"question":"Develop a program that takes an integer X as input and determines whether it is a valid ISBN-10 identifier. If it is valid, the program should output \\"Valid\\", otherwise, it should output \\"Invalid\\". An ISBN-10 identifier is a ten-digit code used to uniquely identify a book. The last digit can be an integer from 0 to 9 or the letter \'X\' which stands for 10. The validity of an ISBN-10 is determined by its checksum which is calculated as follows: Let the 10 digits be denoted by d1, d2, ..., d9, d10. The checksum is calculated as: checksum = 1*d1 + 2*d2 + 3*d3 + ... + 10*d10 If the checksum modulo 11 equals 0, then the ISBN is valid. Input The input contains an integer T, the number of test cases. Each of the next T lines contains a single string X, the ISBN-10 identifier to be checked. Output For each test case, print \\"Valid\\" if the ISBN-10 identifier is valid, otherwise print \\"Invalid\\". Constraints 1 ≤ T ≤ 100 Length of X is always 10 characters SAMPLE INPUT 5 0306406152 156881111X 1234567890 1234512345 0451526538 SAMPLE OUTPUT Valid Valid Invalid Invalid Valid","solution":"def is_valid_ISBN10(isbn): Returns \'Valid\' if the isbn is a valid ISBN-10 identifier, otherwise \'Invalid\'. if len(isbn) != 10: return \\"Invalid\\" checksum = 0 for i in range(10): if isbn[i] == \'X\': value = 10 elif isbn[i].isdigit(): value = int(isbn[i]) else: return \\"Invalid\\" checksum += (i + 1) * value return \\"Valid\\" if checksum % 11 == 0 else \\"Invalid\\" def check_isbn10_identifiers(T, identifiers): return [is_valid_ISBN10(identifier) for identifier in identifiers]"},{"question":"Peter\'s granny loves to bake pastries, and she has a variety of distinct spices that she uses in specific combinations to create unique flavors. She has `n` types of spices laid out on her shelf, and she wants to know how many different unique combinations she can make using all the spices, considering that adding the same spice in different amounts creates different combinations. Each spice can be added in quantities from 0 up to `k` (inclusive), where `k` is a positive integer. For example, if there are two spices and `k=2`, then one possible combination is using 0 units of the first spice and 2 units of the second spice. Given the number of spice types `n` and the maximum quantity `k` per spice, calculate the total number of unique combinations granny can make. Input The input consists of two integers `n` (1 ≤ n ≤ 1000) and `k` (1 ≤ k ≤ 1000). Output Output the total number of unique combinations of spices granny can make. Examples Input 2 2 Output 9 Input 3 1 Output 8","solution":"def unique_combinations(n, k): Returns the total number of unique combinations of n spices where each spice can be added in quantities from 0 to k (inclusive). return (k + 1) ** n"},{"question":"You are given an array of n integers `nums`, write a function that returns the **length of the longest strictly increasing subsequence** of the array. A subsequence is a sequence derived from the original array by deleting some or none of the elements without changing the order of the remaining elements. **Constraints:** - 1 <= n <= 2500 - -10^4 <= nums[i] <= 10^4 **Examples:** Input: ```python nums = [10, 9, 2, 5, 3, 7, 101, 18] ``` Output: ```python 4 ``` Explanation: The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Input: ```python nums = [0, 1, 0, 3, 2, 3] ``` Output: ```python 4 ``` Explanation: The longest increasing subsequence is [0, 1, 2, 3], therefore the length is 4. Input: ```python nums = [7, 7, 7, 7, 7, 7, 7] ``` Output: ```python 1 ``` Explanation: The longest increasing subsequence is [7], therefore the length is 1.","solution":"def length_of_LIS(nums): Returns the length of the longest strictly increasing subsequence in the given list of numbers. if not nums: return 0 n = len(nums) dp = [1] * n # dp[i] will be the length of LIS ending at index i for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a grid of size `NxM` containing only the characters \'.\' and \'#\'. The \'.\' character represents an open cell, and the \'#\' character represents a wall cell. You start at the top-left corner of the grid (cell (1, 1)) and want to reach the bottom-right corner of the grid (cell (N, M)). You can move between open cells in four possible directions: up, down, left, and right. However, you are given up to `S` additional powers to \\"destroy\\" walls. Each wall you destroy will convert a \'#\' cell into a \'.\' cell, and you can then move through that cell as if it were an open cell. Determine the minimum number of moves required to reach the bottom-right corner of the grid from the top-left corner, considering that you can destroy up to `S` wall cells. If reaching the destination is not possible, return -1. # Input The first line of input contains three integers `N`, `M`, and `S` (1 ≤ N, M ≤ 100, 0 ≤ S ≤ N*M) — the dimensions of the grid and the number of walls you can destroy. The next `N` lines each contain `M` characters (either \'.\' or \'#\'), representing the grid. # Output Output a single integer — the minimum number of moves required to reach the bottom-right corner of the grid from the top-left corner, or -1 if it is not possible. # Example Input ``` 4 4 2 #... .... #. ..#. ``` Output ``` 6 ``` # Note In the example grid, the optimal path with the ability to destroy up to 2 walls would be: destroy (1,1), (2,2), (3,3), (4,4). In the sample run, you can destroy walls at positions (1, 1) and (3, 3). The resulting path is from (1, 1) to (2, 1) to (2, 2) to (3, 2) to (4, 2) to (4, 3) to (4, 4). Therefore, the minimum number of moves, in this case, is 6.","solution":"from collections import deque def minimum_moves_to_reach_end(N, M, S, grid): def is_valid(x, y): return 0 <= x < N and 0 <= y < M directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[[False] * (S + 1) for _ in range(M)] for _ in range(N)] queue = deque([(0, 0, 0, 0)]) # x, y, walls destroyed, steps while queue: x, y, walls_destroyed, steps = queue.popleft() if (x, y) == (N - 1, M - 1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): if grid[nx][ny] == \'#\' and walls_destroyed < S and not visited[nx][ny][walls_destroyed + 1]: visited[nx][ny][walls_destroyed + 1] = True queue.append((nx, ny, walls_destroyed + 1, steps + 1)) elif grid[nx][ny] == \'.\' and not visited[nx][ny][walls_destroyed]: visited[nx][ny][walls_destroyed] = True queue.append((nx, ny, walls_destroyed, steps + 1)) return -1"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},P={class:"card-container"},F={key:0,class:"empty-state"},j=["disabled"],C={key:0},L={key:1};function z(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):h("",!0)]),t("div",P,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+l(a.searchQuery)+'". ',1)):h("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",L,"Loading...")):(n(),i("span",C,"See more"))],8,j)):h("",!0)])}const M=d(A,[["render",z],["__scopeId","data-v-88ef0ad2"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/39.md","filePath":"deepseek/39.md"}'),R={name:"deepseek/39.md"},U=Object.assign(R,{setup(s){return(e,u)=>(n(),i("div",null,[x(M)]))}});export{B as __pageData,U as default};
