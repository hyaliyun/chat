import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,p,a,r){return n(),i("div",k,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-278310ce"]]),S=JSON.parse('[{"question":"Determine if a given set of points form a convex polygon. You will be given a list of points in 2D plane and you need to determine if these points form a convex polygon or not. A polygon is convex if all its internal angles are less than 180 degrees. Constraints * 3 ≤ n ≤ 100 * -1000 ≤ xi, yi ≤ 1000 Input The input consists of the number of test cases t, followed by t test cases. Each test case starts with n, the number of points, followed by n pairs of integers xi and yi representing the coordinates of the points. Output For each test case, output \\"YES\\" if the points form a convex polygon and \\"NO\\" otherwise. Example Input 2 4 0 0 0 1 1 1 1 0 5 0 0 2 2 4 0 3 3 1 3 Output YES NO","solution":"def is_convex_polygon(points): def cross_product(p1, p2, p3): return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0]) n = len(points) if n < 3: return False last_product_sign = 0 for i in range(n): p1 = points[i] p2 = points[(i + 1) % n] p3 = points[(i + 2) % n] cross_prod = cross_product(p1, p2, p3) current_sign = (cross_prod > 0) - (cross_prod < 0) if current_sign != 0: if last_product_sign == 0: last_product_sign = current_sign elif last_product_sign != current_sign: return False return True def check_convex_polygons(test_cases): result = [] for points in test_cases: if is_convex_polygon(points): result.append(\\"YES\\") else: result.append(\\"NO\\") return result # Parsing input def parse_input(input_str): lines = input_str.strip().split() index = 0 t = int(lines[index]) index += 1 test_cases = [] for _ in range(t): n = int(lines[index]) index += 1 points = [] for _ in range(n): x, y = int(lines[index]), int(lines[index+1]) points.append((x, y)) index += 2 test_cases.append(points) return test_cases def solution(input_str): test_cases = parse_input(input_str) result = check_convex_polygons(test_cases) return \'n\'.join(result) # Example usage input_str = \'2n4 0 0 0 1 1 1 1 0n5 0 0 2 2 4 0 3 3 1 3\' print(solution(input_str))"},{"question":"A grocery store has multiple aisles, each containing a set of shelves. Each shelf has its own set of products, and customers often rearrange items while shopping, leading to misplaced products. Your task is to determine if the products can be rearranged such that: 1. Each shelf in an aisle contains the same type of product. 2. No product type is found in more than one shelf in a single aisle. Example aisles = [[1, 2, 0], [0, 1, 2]] The store has n=2 aisles and m=3 shelves in each aisle. The distribution of product types per shelf is shown in the following diagram: In this case, a possible rearrangement would be: * For the first aisle: Move the product of type 2 to shelf 0 and product of type 1 to shelf 2, so that shelves 0,1,2 will have products 2,0,1 respectively. The diagram below shows the possible rearrangement: Thus, it is possible to arrange each aisle such that each shelf contains only one type of product, and no product type is found in more than one shelf within an aisle. Function Description Complete the `organizeAisles` function in the editor below. `organizeAisles` has the following parameter(s): - `int aisles[n][m]`: a two-dimensional array of integers representing the type of products on each shelf in each aisle Returns - `string`: either Possible or Impossible Input Format The first line contains an integer `q`, the number of queries. Each of the next `q` sets of lines is as follows: The first line contains an integer n, the number of aisles. The second line contains an integer m, the number of shelves in each aisle. Each of the next n lines contains m space-separated integers describing row `aisles[i]`. Constraints - 1leq qleq 10 - 1leq nleq 100 - 1leq mleq 100 - 0leq textit{aisles}[i][j]leq 100 Output Format For each query, print Possible on a new line if the aisles can be arranged as specified. Otherwise, print Impossible. Sample Input 0 2 2 3 1 2 0 0 1 2 2 2 0 1 2 2 Sample Output 0 Possible Impossible Explanation 0 We perform the following q=2 queries: 1. In the first query, we can rearrange the shelves in the first aisle to have products 2, 0, 1 and the second aisle already satisfies the condition. Thus, the output is Possible. 2. In the second query, it is not possible to rearrange the aisles to meet the condition as both aisles would contain more than one type of product on different shelves. Thus, the output is Impossible.","solution":"def organizeAisles(aisles): n = len(aisles) m = len(aisles[0]) for aisle in aisles: unique_products = set(aisle) if len(unique_products) != m: return \\"Impossible\\" return \\"Possible\\""},{"question":"Problem You have been given a 2D grid of characters and a target word. Your task is to find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. # Task Implement the `wordExists()`/`word_exists()` function, which takes in two arguments: 1. `grid`: a 2D list of characters. 2. `word`: a string representing the target word. The function should return `True` if the word exists in the grid, and `False` otherwise. # Examples Example 1: ``` grid = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCCED\\" wordExists(grid, word) -> True ``` Example 2: ``` grid = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"SEE\\" wordExists(grid, word) -> True ``` Example 3: ``` grid = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCB\\" wordExists(grid, word) -> False ``` # Constraints - The grid and the word contain only uppercase and lowercase English letters. - The grid has at most 200 rows and 200 columns. - The length of the word will be at most 10^3.","solution":"def word_exists(grid, word): if not grid or not grid[0]: return False rows, cols = len(grid), len(grid[0]) def backtrack(r, c, index): if index == len(word): return True if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] != word[index]: return False # mark the cell as visited temp, grid[r][c] = grid[r][c], \'#\' found = ( backtrack(r + 1, c, index + 1) or backtrack(r - 1, c, index + 1) or backtrack(r, c + 1, index + 1) or backtrack(r, c - 1, index + 1) ) grid[r][c] = temp # unmark the cell return found for row in range(rows): for col in range(cols): if backtrack(row, col, 0): return True return False"},{"question":"In a fantasy world, there are N magical orbs, each possessing a certain power level. These orbs need to be combined to achieve a total power level exactly equal to a certain target value T. A single combination involves choosing any one orb and removing it, resulting in a new collection of orbs. If an orb with power level X is removed, the power level target T gets reduced by X. The process can continue with the remaining collection of orbs and the updated value of T until no further combination is possible or the exact target T is reached. You are to determine whether it is possible to achieve the exact power level T using any sequence of combinations. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ Power level of each orb ≤ 1000 - 1 ≤ T ≤ 100000 Input: The input is given from Standard Input in the following format: N T power_1 power_2 ... power_N Output: Print \\"Yes\\" if it\'s possible to achieve the exact power level T, and \\"No\\" otherwise. Examples: Input: 5 9 2 3 7 8 10 Output: Yes Input: 4 5 1 2 3 4 Output: Yes Input: 3 11 2 4 6 Output: No","solution":"def can_achieve_target(N, T, power_levels): dp = [False] * (T + 1) dp[0] = True for power in power_levels: for t in range(T, power - 1, -1): if dp[t - power]: dp[t] = True return \\"Yes\\" if dp[T] else \\"No\\" def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) T = int(data[1]) power_levels = list(map(int, data[2:])) print(can_achieve_target(N, T, power_levels))"},{"question":"Given an array of integers and a target sum, determine if there are any two elements in the array that add up to the target sum. Example 1: Input: arr = [2, 7, 11, 15], target = 9 Output: True Explanation: 2 + 7 = 9, so there exist two elements whose sum is 9. Example 2: Input: arr = [1, 2, 3, 4], target = 8 Output: False Explanation: No two elements sum up to 8. Your Task: You don\'t need to read or print anything. Your task is to complete the function has_pair_with_sum() which takes arr and target as input parameters and returns a boolean value indicating whether any two distinct elements in the array sum up to the target. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= len(arr) <= 10^5 -10^5 <= arr[i], target <= 10^5","solution":"def has_pair_with_sum(arr, target): Determines if there are any two distinct elements in the array that add up to the target sum. seen = set() for num in arr: needed = target - num if needed in seen: return True seen.add(num) return False"},{"question":"An online grocery store is implementing a new promotion: every k^{th} customer gets a free delivery. Customers enter the queue to place their orders one by one, and they are assigned a unique customer ID incrementally starting from 1 each time a new customer enters the queue. The store needs a way to determine which orders qualify for this free delivery promotion. Write a function that, given the total number of customers n and the promotion number k, outputs a list of customer IDs that receive the free delivery. -----Input----- The function should accept two space-separated integers n and k (1 ≤ n, k ≤ 10^9). -----Output----- The function should output a list of integers representing the customer IDs that receive the free delivery, separated by spaces. -----Examples----- Input 10 3 Output 3 6 9 Input 15 5 Output 5 10 15 -----Note----- In the first example, there are 10 customers and every 3^{rd} customer gets free delivery, so the qualifying customer IDs are 3, 6, and 9. In the second example, there are 15 customers and every 5^{th} customer gets free delivery, so the qualifying customer IDs are 5, 10, and 15.","solution":"def free_delivery_customers(n, k): Returns a list of customer IDs that receive free delivery. Parameters: - n: Total number of customers - k: Every k-th customer gets free delivery Returns: - A list of customer IDs that receive free delivery return [i for i in range(k, n + 1, k)]"},{"question":"Given an integer N, your task is to count the number of ways to partition N into one or more positive integers such that the sum of the squares of these integers is minimized. For example, if N=5, then there are 7 ways to partition it: 1. 5 (partition is [5], sum of squares is 5^2=25) 2. 4+1 (partition is [4,1], sum of squares is 4^2 + 1^2 = 16+1 = 17) 3. 3+2 (partition is [3,2], sum of squares is 3^2 + 2^2 = 9 + 4 = 13) 4. 3+1+1 (partition is [3,1,1], sum of squares is 3^2 + 1^2 + 1^2 = 9 + 1 + 1 = 11) 5. 2+2+1 (partition is [2,2,1], sum of squares is 2^2 + 2^2 + 1^2 = 4 + 4 + 1 = 9) 6. 2+1+1+1 (partition is [2,1,1,1], sum of squares is 2^2 + 1^2 + 1^2 + 1^2 = 4 + 1 + 1 + 1 = 7) 7. 1+1+1+1+1 (partition is [1,1,1,1,1], sum of squares is 1^2 + 1^2 + 1^2 + 1^2 + 1^2 = 1 + 1 + 1 + 1 + 1 = 5) Out of these partitions, the one with the minimum sum of squares is [1,1,1,1,1], with a sum of squares of 5. Hence, there is only one way to achieve this minimum sum of squares for N=5. You need to output the number of such partitions that achieve the minimum sum of squares. Input Format The first line of the input contains an integer Q, which is the number of test cases. Each of the next Q lines contains a single integer N, representing the number for which you need to perform the partition. Constraints 1 leq Q leq 10^4 1 leq N leq 1000 Output Format For each test case, output the number of partitions that achieve the minimum sum of squares in a new line. Sample Input 3 5 6 7 Sample Output 1 1 1 Explanation For N=5, as explained, there is 1 such partition. For N=6, the partitions are: [1,1,1,1,1,1], resulting in a sum of squares of 6, which is minimal. For N=7, the partitions are: [1,1,1,1,1,1,1], resulting in a sum of squares of 7, which is minimal. In each example, there is only one partition that achieves the minimum sum of squares.","solution":"def min_sum_of_squares(N): The function to compute the number of partitions of N that achieve the minimum sum of squares. We can derive from observation that the minimal sum of squares can be achieved by using all 1\'s. Thus, the number of such partitions is always 1. return 1 def number_of_partitions(Q, cases): For each case, return the number of partitions that achieve the minimum sum of squares. return [min_sum_of_squares(N) for N in cases] # Example usage: # Q = 3 # cases = [5, 6, 7] # result = number_of_partitions(Q, cases) # print(result) # Output: [1, 1, 1]"},{"question":"Given a string S consisting of lowercase alphabets, find the longest substring without repeating characters. If there are multiple substrings with the same maximum length, return the one which appears first. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of testcases. Then the testcases follow. - Each testcase contains a single string S. ------ Output Format ------ For each testcase, print the longest substring without repeating characters. If there are multiple such substrings, print the one which appears first. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 100,000 S consists of only lowercase alphabets. ----- Sample Input 1 ------ 2 abcabcbb bbbbb ----- Sample Output 1 ------ abc b ----- Sample Explanation 1 ------ Test Case 1: The longest substring without repeating characters is \\"abc\\", which appears first. Test Case 2: The longest substring without repeating characters is \\"b\\", which appears first.","solution":"def longest_unique_substring(s): Finds the longest substring without repeating characters. If there are multiple substrings with the same maximum length, returns the one which appears first. n = len(s) char_index = {} max_length = 0 start = 0 longest_start = 0 for end in range(n): if s[end] in char_index and char_index[s[end]] >= start: start = char_index[s[end]] + 1 char_index[s[end]] = end if end - start + 1 > max_length: max_length = end - start + 1 longest_start = start return s[longest_start: longest_start + max_length] def process_test_cases(test_cases): results = [] for s in test_cases: results.append(longest_unique_substring(s)) return results"},{"question":"Ella loves playing with numbers, especially prime numbers. She recently learned about prime factorization and finds it fascinating. However, she is struggling with one particular problem: finding the smallest prime factor of a given number. To help her out, you decide to write a program that can do this efficiently. The smallest prime factor of a number `n` is the smallest prime number `p` that divides `n` evenly. Write a program that prints the smallest prime factor of a given integer. If the number itself is prime, it should print the number itself. -----Input----- The first line contains a single integer `t` (`1 ≤ t ≤ 10^5`) — the number of test cases. Each of the next `t` lines contains a single integer `n` (`2 ≤ n ≤ 10^12`). -----Output----- For each test case, output a single integer — the smallest prime factor of `n` on a new line. -----Examples----- Input 3 10 17 49 Output 2 17 7 -----Note----- In the first example, the smallest prime factor of 10 is 2. In the second example, 17 is a prime number itself, so the output is 17. In the third example, the smallest prime factor of 49 is 7 since 49 equals 7*7.","solution":"def smallest_prime_factor(n): Returns the smallest prime factor of the given number n. If n is a prime number, it returns n itself. if n <= 1: raise ValueError(\\"n should be greater than 1\\") if n % 2 == 0: return 2 factor = 3 while factor * factor <= n: if n % factor == 0: return factor factor += 2 return n def solve(t, numbers): Given t test cases and a list of numbers, return a list of smallest prime factors for all the numbers. results = [] for num in numbers: results.append(smallest_prime_factor(num)) return results"},{"question":"You are given an array of integers. Your task is to check if Hamming distance between consecutive elements in a subarray remains below a given threshold or not for multiple queries. The Hamming distance between two integers is the number of positions at which the corresponding bits are different. Write a function `checkHammingDistance` which takes the following parameters: - `n`: an integer representing the size of the array. - `arr`: the array of integers. - `threshold`: an integer representing the maximum acceptable Hamming distance. - `queries`: a list of tuples, where each tuple contains two integers, `L` and `R`, representing the start and end indices of the subarray. The function should return a list of boolean values for each query, `true` if the subarray meets the criteria, `false` otherwise. Example 1: ``` Input: n = 5 arr = [1, 4, 3, 6, 7] threshold = 2 queries = [(0, 2), (2, 4)] Output: [False, True] Explanation: For the first query (0, 2), subarray is [1, 4, 3] Hamming distances are: hamming(1, 4) = 2, hamming(4, 3) = 3 Since one distance exceeds the threshold, the answer is False. For the second query (2, 4), subarray is [3, 6, 7] Hamming distances are: hamming(3, 6) = 2, hamming(6, 7) = 1 All distances are within the threshold, hence the answer is True. ``` Your Task: Complete the function `checkHammingDistance(n, arr, threshold, queries)` that returns a list of boolean values corresponding to each query. Expected Time Complexity: O(N + Q) Expected Auxiliary Space: O(N) Constraints: - 1 <= n <= 10^5 - 1 <= arr[i] <= 10^6, for each valid i - 1 <= threshold <= 20 - 0 <= L <= R < n - 1 <= number of queries <= 10^5","solution":"def hamming_distance(a, b): return bin(a ^ b).count(\'1\') def checkHammingDistance(n, arr, threshold, queries): results = [] for L, R in queries: meets_criteria = True for i in range(L, R): if hamming_distance(arr[i], arr[i+1]) > threshold: meets_criteria = False break results.append(meets_criteria) return results"},{"question":"You are given a string s and a number n. Your task is to determine if there exists a substring of s of length n which is a palindrome. A palindrome is a string that reads the same forward and backward. -----Input----- The input consists of a single line containing the string s and the integer n separated by a space. The string s consists of lowercase English letters only (1 ≤ |s| ≤ 10^5), and 1 ≤ n ≤ |s|. -----Output----- Output \\"YES\\" if there exists a substring of length n in s which is a palindrome. Otherwise, output \\"NO\\". -----Examples----- Input abccba 4 Output YES Input abcdef 2 Output NO Input racecar 3 Output YES","solution":"def has_palindromic_substring(s, n): Determines if there exists a substring of s of length n which is a palindrome. for i in range(len(s) - n + 1): substring = s[i:i+n] if substring == substring[::-1]: return \\"YES\\" return \\"NO\\" # Example usage: # s, n = \\"abccba\\", 4 # print(has_palindromic_substring(s, n)) # Output should be \\"YES\\""},{"question":"Write a function `find_missing_number` that takes an unsorted list of unique integers ranging from `1` to `n` and returns the missing number from the range. The length of the list will be `n-1`, meaning only one number will be missing in the sequence. Example: ```python find_missing_number([3, 7, 1, 2, 8, 4, 5]) ``` This example will return the integer `6` because it is the missing number in the range from `1` to `8`.","solution":"def find_missing_number(nums): Finds the missing number from the range 1 to n in an unsorted list of unique integers. n = len(nums) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(nums) return total_sum - actual_sum"},{"question":"Given an array of integers of size N. The task is to find and return the pair of elements (a, b) in the array such that their sum is closest to zero. If there are multiple pairs, return any one of them. The solution should not use any extra space beyond the input array. Example: Input: N = 5 array[] = [-1, 2, 1, -4, 3] Output: -1 1 Your Task: You only need to implement the given function closestToZero(). Do not read input, instead use the arguments given in the function. The function should return a tuple of two integers representing the pair. Expected Time Complexity: O(N*logN) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 -10^6 ≤ array[i] ≤ 10^6","solution":"def closestToZero(arr): Finds and returns the pair of elements in the array such that their sum is closest to zero. If there are multiple pairs, returns any one of them. arr.sort() left = 0 right = len(arr) - 1 closest_sum = float(\'inf\') closest_pair = (None, None) while left < right: current_sum = arr[left] + arr[right] if abs(current_sum) < abs(closest_sum): closest_sum = current_sum closest_pair = (arr[left], arr[right]) if current_sum < 0: left += 1 else: right -= 1 return closest_pair"},{"question":"Implement a function that determines if an integer is part of the Fibonacci sequence. A number is part of the Fibonacci sequence if it appears in a series of numbers where every number after the first two is the sum of the two preceding ones. The first two numbers in the Fibonacci sequence are 0 and 1. Input The function receives an integer `x` (0 ≤ x ≤ 10^18). Output The function should return a boolean value: `True` if the input integer is part of the Fibonacci sequence, and `False` otherwise. Examples Input 5 Output True Input 4 Output False","solution":"def is_fibonacci(n): Determine if a given integer is part of the Fibonacci sequence. Parameters: n (int): The integer to check (0 ≤ n ≤ 10^18). Returns: bool: True if the integer is part of the Fibonacci sequence, False otherwise. if n == 0 or n == 1: return True a, b = 0, 1 while b <= n: if b == n: return True a, b = b, a + b return False"},{"question":"Write a function that, given a string containing a mathematical expression with multiplication and division operations, returns the result as an integer. The input string will not contain any addition or subtraction operations. The function should handle non-integer division by rounding down to the nearest integer (floor division). **Note:** the input string will not be empty and will only contain positive integers and the operators \'*\' and \'/\'. Examples ``` \\"6*3/2\\" --> \\"9\\" \\"10/2*5\\" --> \\"25\\" \\"8/3*4\\" --> \\"8\\" ```","solution":"def evaluate_expression(expression): def multiply(a, b): return a * b def divide(a, b): return a // b # Floor division def eval_operator(op, a, b): if op == \'*\': return multiply(a, b) elif op == \'/\': return divide(a, b) else: raise ValueError(f\\"Unknown operator: {op}\\") n = len(expression) stack = [] num = \'\' i = 0 while i < n: if expression[i].isdigit(): num += expression[i] else: if num: stack.append(int(num)) num = \'\' stack.append(expression[i]) i += 1 if num: stack.append(int(num)) while len(stack) >= 3: a = stack.pop(0) op = stack.pop(0) b = stack.pop(0) result = eval_operator(op, a, b) stack.insert(0, result) return stack[0]"},{"question":"A renowned bookstore chain is having a promotional event where they give away free books in pairs. Each book has a genre assigned to it, and the goal is to pair books based on their genres, with each pair containing books of different genres. To make it challenging, no two books in a given pair can have the same genre, and each book should be part of one and only one pair. The bookstore wants to distribute as many pairs of books as possible. Your task is to determine the maximum number of pairs that can be formed based on the given genre assignments. Input The first line contains an integer n (2 ≤ n ≤ 200) — the total number of books available for pairing. The second line contains n space-separated integers, where the i-th integer represents the genre of the i-th book (1 ≤ genre ≤ 100). Output Output an integer representing the maximum number of pairs of books with different genres that can be formed. Examples Input 6 1 2 3 1 2 3 Output 3 Input 7 1 1 1 2 2 2 3 Output 3 Input 5 5 5 5 5 4 Output 1 Explanation In the first example, you can form pairs (1-2), (1-3), and (2-3), resulting in 3 pairs. In the second example, you can form pairs (1-2), (1-2), and (2-3), resulting in 3 pairs. In the third example, you can only form the pair (5-4), resulting in 1 pair.","solution":"def max_pairs(n, genres): from collections import Counter # Create a counter for the genres genre_counts = Counter(genres) pairs = 0 while len(genre_counts) > 1: # Get two most common genres g1, g2 = genre_counts.most_common(2) # Form pairs with them pairs += 1 if g1[1] == 1: del genre_counts[g1[0]] else: genre_counts[g1[0]] -= 1 if g2[1] == 1: del genre_counts[g2[0]] else: genre_counts[g2[0]] -= 1 return pairs"},{"question":"Write a function that takes a list of positive integers and returns the sum of each number\'s digits until the sum is a single digit. Example: ```python sum_digits_until_one([15, 29, 32]) # => returns [6, 2, 5] ``` ```f# sumDigitsUntilOne [15; 29; 32] // => returns [6; 2; 5] ``` Explanation: - For 15, the sum of digits is 1 + 5 = 6. - For 29, the sum of digits is 2 + 9 = 11, then 1 + 1 = 2. - For 32, the sum of digits is 3 + 2 = 5.","solution":"def sum_digits_until_one(numbers): Returns a list where each element is the sum of the digits of the corresponding input number until the sum is a single digit. def sum_to_single_digit(n): while n >= 10: n = sum(int(digit) for digit in str(n)) return n return [sum_to_single_digit(num) for num in numbers]"},{"question":"Given an array of integers, you need to find the smallest positive integer that is missing from the array. The array can contain both positive and negative integers, but your task is to find the smallest positive integer that is not present in the array. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100000), the size of the array. The second line contains n integers ai (-109 ≤ ai ≤ 109), the elements of the array. Output Print the smallest positive integer that is missing from the array. Examples Input 5 3 4 -1 1 Output 2 Input 4 1 2 0 3 Output 4 Input 6 7 8 9 11 12 13 Output 1","solution":"def find_smallest_missing_positive(arr): Returns the smallest positive integer missing from the array. n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"Professor D has an intriguing problem for you. You are given a string s of length n. You can perform the following operation on a substring of s: 1. Reverse any substring of length k in the string s. Your task is to determine if it is possible to make the string a palindrome using exactly one reversal operation. If possible, output \\"YES\\", otherwise output \\"NO\\". Note that the reversal must be of a non-empty substring and k can be any length from 1 to n. -----Input----- The first line contains an integer n (1 leq n leq 10^5) — the length of the string s. The second line contains the string s, consisting of lowercase English letters. -----Output----- Print \\"YES\\" if it\'s possible to make the string s a palindrome using exactly one reversal operation, otherwise print \\"NO\\". -----Examples----- Input 5 adaba Output YES Input 4 abcd Output NO Input 3 abc Output YES -----Note----- In the first sample, reversing the substring \\"dab\\" gives us \\"abada\\", which is a palindrome. In the second sample, no single reversal operation can transform \\"abcd\\" into a palindrome. In the third sample, reversing the substring \\"bc\\" gives us \\"acb\\", which is not a palindrome, but reversing \\"abc\\" itself gives \\"cba\\", which is also not a palindrome. However, considering \\"a\\" as a whole standalone substring in terms of length greater than 1, we get the \\"YES\\".","solution":"def can_make_palindrome_with_one_reversal(n, s): Determines if we can make the string \'s\' a palindrome with exactly one reversal. Args: n (int): The length of the string \'s\'. s (str): The string to be checked. Returns: str: \\"YES\\" if possible, \\"NO\\" otherwise. if n == 1: return \\"YES\\" left, right = 0, n - 1 differences = 0 while left < right: if s[left] != s[right]: differences += 1 left += 1 right -= 1 if differences == 0: # Already a palindrome return \\"YES\\" elif differences == 1: return \\"YES\\" # One mismatch can be resolved by one reversal elif differences == 2 and n % 2 == 1: return \\"YES\\" # Two mismatches, but we have a middle character to help balance else: return \\"NO\\""},{"question":"Chef has a grid of size N x M on which he is trying to find the maximum path length between two distinct cells, (x1, y1) and (x2, y2), such that the difference in coordinates along any axis is minimized. Formally, Chef wants to find the maximum value of: [ min(|x1 - x2|, |y1 - y2|) ] Given the dimensions of the grid, calculate and print the maximum path length for each of the T test cases. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. - Each test case consists of a single line with two integers N and M, the dimensions of the grid. ------ Output Format ------ Print a single integer - the maximum path length for each test case. ------ Constraints ------- [ 1 leq T leq 100 ] [ 1 leq N, M leq 10^9 ] ------ Sample Input 1 ------ 3 2 3 4 7 10 5 ----- Sample Output 1 ------ 1 3 4 ------ Explanation ------ For test case 1: The grid is 2 x 3. The maximum value of (min(|x1 - x2|, |y1 - y2|)) is achieved by selecting points along the y-axis where the difference in x-coordinates is minimized. In this case, the maximum value is 1 because the grid has only 2 rows and selecting any two distinct points would give us (min(1, 2)). For test case 2: The grid is 4 x 7. The maximum (min(|x1 - x2|, |y1 - y2|)) is achieved by points along the y-axis. In this case, the maximum value is 3 because selecting any two distinct points would yield maximum path length 3. For test case 3: The grid is 10 x 5. The maximum (min(|x1 - x2|, |y1 - y2|)) is achieved by points along the x-axis where the difference in y-coordinates is minimized. In this case, the maximum value is 4.","solution":"def max_path_length(T, dimensions): Calculates the maximum path length for each test case where the minimum difference in coordinates along any axis is maximized. Parameters: T (int): Number of test cases. dimensions (list of tuples): Each tuple contains two integers, N and M, the dimensions of the grid. Returns: list of int: Maximum path length for each test case. result = [] for N, M in dimensions: result.append(min(N, M) - 1) return result"},{"question":"Given a string T consisting of lowercase English letters, you need to determine whether it is possible to construct the string by repeating a substring of T. If it is possible, print the length of the smallest such substring. Otherwise, print -1. -----Constraints----- - 1 leq |T| leq 100000 - T consists of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: T -----Output----- Print the length of the smallest substring that can be repeated to form T, or -1 if no such substring exists. -----Sample Input 1----- abab -----Sample Output 1----- 2 -----Sample Input 2----- aba -----Sample Output 2----- -1 -----Sample Input 3----- abcabcabcabc -----Sample Output 3----- 3 Explanation: In Sample Input 1, the string \'abab\' can be constructed by repeating the substring \'ab\', whose length is 2. In Sample Input 2, there is no substring that can be repeated to form \'aba\', so the output is -1. In Sample Input 3, the string \'abcabcabcabc\' can be constructed by repeating the substring \'abc\', whose length is 3.","solution":"def smallest_repeating_substring_length(T): Returns the length of the smallest substring that can be repeated to form the string T. If no such substring exists, returns -1. n = len(T) # Iterate from 1 to n/2 (no need to go beyond n/2 because that\'s the max length of a smaller substring) for i in range(1, n // 2 + 1): # If n is not divisible by i, T can\'t be a repetition of a substring of length i if n % i != 0: continue # We take the candidate substring of length i substring = T[:i] # Reconstruct T by repeating the candidate substring if substring * (n // i) == T: return i return -1"},{"question":"Polycarp likes to explore strings that encapsulate mathematical operations. He prefers these strings to be structured in a specific way, ensuring clarity and consistency. Polycarp evaluates strings representing an operation between two integers or two simple expressions, with each operation involving one of the basic arithmetic operators: `+`, `-`, `*`, or `/`. For example, a string like \\"3+ 5*2\\" should be corrected to \\"3 + 5 * 2\\". In this task, you are given a string `s` representing a mathematical expression. Polycarp wants to format the string such that: - Each operator `+`, `-`, `*`, `/` is surrounded by exactly one space on both sides. - There are no leading or trailing spaces. - There are no consecutive spaces. Write a program to automate Polycarp\'s work and format the given string `s`. Input The input data contains a single string `s` which is a valid mathematical expression consisting of integers (of arbitrary length without leading zeros), operators `+`, `-`, `*`, `/`, and space characters. The length of the string `s` ranges from 1 to 255 characters. The string `s` does not begin or end with a space. Output Print the string `s` after its formatted version. Ensure the output string follows the formatting rules described above. It is permissible to end the output line with a line-break character, and without it. Examples Input 3+ 5*2-4 /8 Output 3 + 5 * 2 - 4 / 8 Input 12*3 + 7- 5/ 4 Output 12 * 3 + 7 - 5 / 4 Input 5/3*2+ 8 -7 Output 5 / 3 * 2 + 8 - 7","solution":"def format_math_expression(s): Formats the input mathematical string `s` so that each operator (`+`,`-`,`*`,`/`) is surrounded by exactly one space on both sides, with no leading or trailing spaces and no consecutive spaces. # Create a list of characters from the string because string is immutable and we # may need to insert spaces result = [] i = 0 while i < len(s): if s[i] in \\"+-*/\\": # Ensure there\'s exactly one space before the operator if result and result[-1] != \' \': result.append(\' \') # Add the operator result.append(s[i]) # Ensure there\'s exactly one space after the operator if i + 1 < len(s) and s[i + 1] != \' \': result.append(\' \') i += 1 else: # Add the current character if it\'s not an operator result.append(s[i]) i += 1 # Skip added spaces for multi-digit numbers/spaces right next to operators while i < len(s) and s[i] == \' \': i += 1 # Join the list back into a string and return it formatted_string = \'\'.join(result).strip() return formatted_string"},{"question":"Bob loves strings and their subsequences. One day, he was given a string `s` and an integer `k`, and he was asked to find the number of distinct non-empty subsequences of `s` that contain exactly `k` characters. Help Bob solve this problem by writing a function that takes a string `s` and an integer `k` as inputs and returns the number of distinct non-empty subsequences of `s` that contain exactly `k` characters. Input format The input consists of a single line containing the string `s` (1 ≤ length of `s` ≤ 1000) and an integer `k` (1 ≤ k ≤ length of `s`), separated by a space. Output format Print the number of distinct non-empty subsequences of `s` that contain exactly `k` characters. Constraints - The string `s` contains only lowercase English letters. Example Input abcde 3 Example Output 10 Explanation The distinct non-empty subsequences of `abcde` that contain exactly 3 characters are: `abc`, `abd`, `abe`, `acd`, `ace`, `ade`, `bcd`, `bce`, `bde`, and `cde`. Hence, the output is 10.","solution":"from itertools import combinations def count_distinct_k_char_subsequences(s, k): subsequences = set() for combo in combinations(s, k): subsequences.add(\'\'.join(combo)) return len(subsequences)"},{"question":"A farmer wants to construct a fence around his rectangular field. He has some restrictions on the lengths of the sides of the rectangle based on the terrain. Given the possible lengths for the width and height of the rectangle, determine the maximum possible area of the rectangle that can be fenced, and the corresponding dimensions. Write a function `max_rectangle_area(widths, heights)` that takes two lists of integers representing possible widths and heights. The function should return a tuple containing the maximum area and the corresponding width and height. **Function Signature** ```python def max_rectangle_area(widths: List[int], heights: List[int]) -> Tuple[int, int, int]: ``` **Input** - `widths`: a list of integers representing possible widths `(1 <= len(widths) <= 1000, 1 <= widths[i] <= 10000)` - `heights`: a list of integers representing possible heights `(1 <= len(heights) <= 1000, 1 <= heights[i] <= 10000)` **Output** - a tuple `(area, width, height)` where `area` is the maximum rectangular area that can be enclosed, and `width` and `height` are the dimensions that generate this area. **Example** Input: ```python widths = [2, 3, 5] heights = [4, 2, 6] ``` Output: ```python (30, 5, 6) ``` **Explanation** The maximum possible area is 30, achieved with a width of 5 and a height of 6. **Notes** - In case of multiple rectangles yielding the same maximum area, return any one of them. - Ensure that the solution is efficient and can handle the upper limits of input sizes gracefully.","solution":"from typing import List, Tuple def max_rectangle_area(widths: List[int], heights: List[int]) -> Tuple[int, int, int]: Given a list of possible widths and heights, returns the maximum rectangular area that can be enclosed, and the corresponding width and height. max_area = 0 best_width = 0 best_height = 0 for width in widths: for height in heights: area = width * height if area > max_area: max_area = area best_width = width best_height = height return max_area, best_width, best_height"},{"question":"A famous biologist, Dr. Flora, is studying a species of plants that grow in a very peculiar pattern. Each plant grows a new leaf every day, and the new leaf\'s size is always the sum of the sizes of the last two leaves it produced. Initially, the plant starts with two leaves of size 1. Dr. Flora wants to know the size of a particular leaf from a specific day of growth. For instance, on the 3rd day, the plant will have leaves of sizes [1, 1, 2]. On the 4th day, it will have [1, 1, 2, 3], and on the 5th day, [1, 1, 2, 3, 5], and so on. Dr. Flora needs a program to calculate the size of the leaf produced on the nth day. The position of leaves is considered to start from 1. Input For this question, you are given a single integer n (1 ≤ n ≤ 50) which indicates the nth day of growth for which you need to find the size of the last leaf produced. Output The output should be a single integer, which is the size of the last leaf produced on the nth day. Example Input: 5 Output: 5 Explanation: On the 1st day: [1] On the 2nd day: [1, 1] On the 3rd day: [1, 1, 2] On the 4th day: [1, 1, 2, 3] On the 5th day: [1, 1, 2, 3, 5] So, the size of the last leaf on the 5th day is 5.","solution":"def leaf_size_on_day(n): Returns the size of the last leaf produced on the nth day. if n == 1 or n == 2: return 1 # Start with the first two leaves a, b = 1, 1 for i in range(3, n+1): next_leaf = a + b a = b b = next_leaf return b"},{"question":"-----Electric Car Battery Management----- A company is developing a software to manage the battery usage of their electric cars. Each car\'s battery can be represented as a sequence of battery cells stored in an array. Each cell has a certain amount of energy, represented by a positive integer. The car consumes energy sequentially from the first cell to the last cell. The goal is to simulate the energy consumption over multiple trips and determine the maximum number of complete trips the car can make before it can no longer start a new trip (i.e., when starting a trip would leave it without necessary energy to complete it). Assume the energy requirement for each trip is E, and the energy from each cell can be consumed partially. After completing a trip, the battery cells are not recharged; hence, you should maintain the remaining energy in the cells. ----- Input ----- The first line contains the number of test cases T. T test cases follow. Each case contains an integer E (the energy required per trip) on the first line, followed by an integer N (number of battery cells) on the second line, and then N integers which represent the energy in each battery cell on the third line. 1 <= T <= 100 1 <= N <= 10^4 1 <= E <= 10^9 1 <= energy in each cell <= 10^5 ----- Output ----- Output T lines, one for each test case, containing the maximum number of complete trips that can be made before the battery is exhausted. ----- Example ----- Input: 2 5 3 4 3 2 10 5 5 6 7 8 9 Output: 1 1 Explanation: For the first case, only one complete trip can be made since the total energy available is 4 + 3 + 2 = 9, which is enough for one trip with E = 5, but not for two trips. For the second case, only one complete trip can be made since the cumulative energy of the cells adds up to 35, which allows making one trip with E = 10 but not two.","solution":"def max_complete_trips(E, N, energies): total_energy = sum(energies) return total_energy // E def process_test_cases(T, test_cases): results = [] for case in test_cases: E, N, energies = case results.append(max_complete_trips(E, N, energies)) return results def electric_car_battery_management(T, test_cases): return process_test_cases(T, test_cases)"},{"question":"Given an array of integers, find the maximum sum of any contiguous subarray. The array can be very large, and its elements can be both positive and negative. Your solution should be efficient and handle large inputs gracefully. The input array has at least one element, so the maximum sum will always be an integer.","solution":"def max_subarray_sum(nums): Finds the maximum sum of any contiguous subarray in the given array of integers. Args: nums: List[int] - a list of integers Returns: int - the maximum sum of any contiguous subarray max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Aria is an amateur gardener who loves growing different types of flowers. She has a rectangular garden that is divided into a grid of cells, each containing exactly one flower. Aria wants to create flowerbeds such that each flowerbed is a rectangular sub-grid of the garden containing only flowers of the same type. Additionally, she wants to maximize the area of the largest flowerbed. Can you help Aria determine the area of the largest possible flowerbed that can be created using the flowers of the same type? -----Input----- The input consists of multiple lines. The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the garden, respectively. The next n lines contain m space-separated integers each, where the j-th integer of the i-th line is f_{i,j} (1 ≤ f_{i,j} ≤ 100), representing the type of flower found in the cell at row i and column j. -----Output----- Print a single integer — the area of the largest flowerbed of the same type. -----Examples----- Input 3 3 1 2 1 2 2 2 1 2 1 Output 3 Input 4 4 1 1 1 1 1 2 2 1 1 2 2 1 1 1 1 1 Output 4 -----Note----- In the first sample, the largest flowerbed of the same type is the 2x2 sub-grid of flower type 2 starting from cell (2, 1) to cell (3, 2), having an area of 4. In the second sample, the largest possible flowerbed is the entire 4x4 grid of flower type 1, having an area of 16.","solution":"def largest_flowerbed_area(n, m, garden): def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area if n == 0 or m == 0: return 0 max_area = 0 for flower_type in range(1, 101): dp = [0] * m for i in range(n): for j in range(m): if garden[i][j] == flower_type: dp[j] += 1 else: dp[j] = 0 max_area = max(max_area, max_histogram_area(dp)) return max_area def garden_from_input(input_lines): n, m = map(int, input_lines[0].split()) garden = [list(map(int, line.split())) for line in input_lines[1:]] return n, m, garden"},{"question":"Write a function `transform_list` that takes a list of integers and performs the following operations: 1. Reverse the list. 2. Replace each element with the square of itself. 3. Remove any elements that are even. 4. Return the processed list. For example: ```python transform_list([1, 2, 3, 4, 5]) # Output: [25, 9, 1] transform_list([10, 21, 32, 41]) # Output: [1681, 441] transform_list([4, 4, 4, 4]) # Output: [] transform_list([-3, -2, -1, 0]) # Output: [1, 9] ```","solution":"def transform_list(lst): Transforms the given list of integers by first reversing it, then squaring each element, and finally removing even elements. # Step 1: Reverse the list lst.reverse() # Step 2: Replace each element with the square of itself lst = [x**2 for x in lst] # Step 3: Remove any elements that are even lst = [x for x in lst if x % 2 != 0] return lst"},{"question":"Vijay loves numbers and patterns. He has recently stumbled upon a peculiar property of integers and wants to explore it further. He defines a \\"Magic Number\\" as an integer that satisfies the following conditions: 1. The sum of its digits is a prime number. 2. The number contains at least one digit \'7\'. To help Vijay in his exploration, write a function that takes an integer `n` and returns \\"MAGIC!\\" if the number is a Magic Number, otherwise returns \\"NOT MAGIC!\\". Note: - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. - You may assume the input integer will always be positive. Example 1 - Input: n = 37 Output: MAGIC! Explanation: The sum of the digits is 3 + 7 = 10, which is not a prime number, but the number contains the digit \'7\'. Despite the sum not being prime, the presence of \'7\' makes it a magic number. Example 2 - Input: n = 233 Output: NOT MAGIC! Explanation: The sum of the digits is 2 + 3 + 3 = 8, which is not a prime number, and the number does not contain the digit \'7\'. Example 3 - Input: n = 719 Output: MAGIC! Explanation: The sum of the digits is 7 + 1 + 9 = 17, which is a prime number, and the number contains the digit \'7\'. Therefore, it is a magic number. Your Task: Complete the function `is_magic_number(n)` that takes an integer `n` and returns the answer. Expected Time Complexity: O(d), where d is the number of digits in the input number. Expected Space Complexity: O(1) Constraints: 1 ≤ n ≤ 10^9","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def is_magic_number(n): digits = [int(d) for d in str(n)] digit_sum = sum(digits) contains_seven = 7 in digits if is_prime(digit_sum) and contains_seven: return \\"MAGIC!\\" else: return \\"NOT MAGIC!\\""},{"question":"The stock market consists of numerous price quotes for different stocks, recorded at various timestamps. You are tasked with analyzing the performance of a given stock over a specific time window. Write a function analyzeStockPrices() that takes three arguments: an array of price quotes (prices), an integer startTime, and an integer endTime. The price quotes are represented as an array of tuples (timestamp, price). The function should return a tuple (minPrice, maxPrice, avgPrice) representing the minimum, maximum, and average price of the stock within the given time window. - If no prices exist within the time window, return (null, null, null). Hint: - Calculate the average price using the formula: sum of prices / number of prices. Example: analyzeStockPrices([(1, 100), (2, 110), (3, 105), (4, 115)], 2, 4) => (105, 115, 110.0) analyzeStockPrices([(1, 150)], 3, 5) => (null, null, null)","solution":"def analyzeStockPrices(prices, startTime, endTime): Returns the minimum, maximum, and average stock prices within the given time window. :param prices: List of tuples [(timestamp, price),...] :param startTime: Integer start time of the window :param endTime: Integer end time of the window :return: Tuple (minPrice, maxPrice, avgPrice) filtered_prices = [price for (timestamp, price) in prices if startTime <= timestamp <= endTime] if not filtered_prices: return (None, None, None) minPrice = min(filtered_prices) maxPrice = max(filtered_prices) avgPrice = sum(filtered_prices) / len(filtered_prices) return (minPrice, maxPrice, avgPrice)"},{"question":"You are a software application that transcribes text into a formal structure. One of your features is to convert friendly or casual emails into formal correspondence templates. Your function `formalizeEmail` will take as input a casual email string in the format: \\"Hey [recipient], [sender] here. [greeting_start] [message_body] [greeting_end]\\" (e.g., \\"Hey John, Mike here. Hope you\'re doing well. Could you please send me the project updates? Thanks!\\") Your function will return the formal version of the email in the following structure: \\"Dear [recipient],nn[sender] would like to request:nn[trimmed_message_body]nnBest regards,n[sender]\\" (e.g., \\"Dear John,nnMike would like to request:nnCould you please send me the project updates?nnBest regards,nMike\\") Note the differences in the structure and tone of the email based on the conversion requirement. The following rules apply: - \\"[greeting_start]\\" and \\"[greeting_end]\\" should be removed from the formal email. - The casual introduction \\"[sender] here\\" should be replaced with \\"[sender] would like to request\\". - The recipient\'s name should follow \\"Dear\\", and the sender\'s name should be used for signing off formally. - The body of the message, \\"[message_body]\\", remains intact but formatted appropriately. Here are some examples: input = \\"Hey John, Mike here. Hope you\'re doing well. Could you please send me the project updates? Thanks!\\" output = \\"Dear John,nnMike would like to request:nnCould you please send me the project updates?nnBest regards,nMike\\" input = \\"Hey Sarah, Sam here. Just checking in to see if you are available for a meeting tomorrow? Cheers!\\" output = \\"Dear Sarah,nnSam would like to request:nnJust checking in to see if you are available for a meeting tomorrow?nnBest regards,nSam\\"","solution":"def formalizeEmail(casual_email: str) -> str: Converts a casual email format into a formal correspondence template. Input format: \\"Hey [recipient], [sender] here. [greeting_start] [message_body] [greeting_end]\\" Output format: \\"Dear [recipient],nn[sender] would like to request:nn[trimmed_message_body]nnBest regards,n[sender]\\" # Split the casual email into parts intro, message_with_greeting_end = casual_email.split(\\".\\", 1) intro_parts = intro.split(\\",\\") # Extract the names of recipient and sender recipient = intro_parts[0].strip().split(\\" \\")[1].strip() sender = intro_parts[1].strip().split(\\" \\")[0].strip() # Extract the body of the message message_body = message_with_greeting_end.strip() # Construct the formal email formal_email = f\\"Dear {recipient},nn{sender} would like to request:nn{message_body}nnBest regards,n{sender}\\" return formal_email"},{"question":"In a remote village, there is a large old tree situated in the village square. The elders believe that the tree has magical powers and it can grant wishes to those who can figure out the secret path across its branches. The tree has n branches, connected by m paths. Each path has a magical power level associated with it. Given the structure of the tree and the list of the paths with their magical power levels, the villagers want to know the maximum power level that can be obtained by traveling any path in the tree. Input - The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of branches and the number of paths. - Each of the next m lines contains three integers u, v, and p (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ p ≤ 10^9) — the branches connected by the path and the magical power level of that path. Output - Print a single integer — the maximum magical power level that can be obtained by traveling any path in the tree. Example Input 7 6 1 2 5 2 3 6 2 4 3 3 5 4 4 6 2 4 7 8 Output 8 Explanation The tree has 7 branches. The paths are described with their power levels. The path with the highest power level is the path connecting branches 4 and 7 with a power level of 8. Thus, the highest obtainable power level is 8.","solution":"def max_magical_power(n, m, paths): Returns the maximum magical power level that can be obtained by traveling any path in the tree. :param n: Number of branches :param m: Number of paths :param paths: A list of tuples (u, v, p) where u and v are branches and p is the power level of the path connecting them :return: Maximum power level if m == 0: return 0 return max(path[2] for path in paths)"},{"question":"In a faraway land, there is an island that grows a special type of magical fruit. Each fruit has a different nutrient value, and the local villagers want to gather the fruits in such a way that maximizes the total nutrient value. However, there is a catch; the villagers can only carry a certain number of fruits due to the weight limit. Each fruit has a weight associated with it and there is a maximum weight capacity that the villagers can carry. You are provided with a list of fruits, where each fruit has a weight and a nutrient value. You must determine the maximum nutrient value the villagers can gather without exceeding the weight capacity. Write a function that takes the maximum weight capacity, a list of fruit weights, and a list of corresponding nutrient values as input. The function should return the maximum nutrient value the villagers can gather. - Input: - An integer `W` (1 ≤ W ≤ 10^4) representing the maximum weight capacity. - An integer `n` (1 ≤ n ≤ 100) representing the number of fruits. - A list of `n` integers `weights[]` (1 ≤ weights[i] ≤ W) representing the weight of each fruit. - A list of `n` integers `values[]` (1 ≤ values[i] ≤ 100) representing the nutrient value of each fruit. - Output: - An integer representing the maximum nutrient value that can be obtained without exceeding the weight capacity. - Example: - Input: ``` 50 3 10 20 30 60 100 120 ``` - Output: ``` 220 ``` - Explanation: The villagers can carry the 20 weight fruit with 100 nutrient value and the 30 weight fruit with 120 nutrient value, resulting in a total of 100 + 120 = 220 nutrient value.","solution":"def max_nutrient_value(W, n, weights, values): Determines the maximum nutrient value the villagers can gather without exceeding the weight capacity. Parameters: W (int): Maximum weight capacity. n (int): Number of fruits. weights (list): List of weights of the fruits. values (list): List of nutrient values of the fruits. Returns: int: Maximum nutrient value obtainable within the weight capacity. # Creating a 2D array to store the maximum nutrient value at each weight capacity dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)] # Building the dp array in a bottom-up manner for i in range(1, n + 1): for w in range(1, W + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]) else: dp[i][w] = dp[i - 1][w] return dp[n][W]"},{"question":"You are given a word and a list of candidate words. Your task is to determine which candidate words are anagrams of the given word. An anagram is a word formed by rearranging the letters of another, such as \'spar\' formed from \'rasp\'. Input Format The first line contains a single string, the word for which you need to find anagrams. The second line contains an integer, N, the number of candidate words. The next N lines each contain a single candidate word. Constraints In 20% of the test cases: The length of the word and each candidate word does not exceed 5 characters. In 50% of the test cases: The length of the word and each candidate word does not exceed 10 characters. In 100% of the test cases: The length of the word and each candidate word does not exceed 20 characters. 1 ≤ N ≤ 100 Output Format Print each anagram from the list of candidate words in a new line. If there are no anagrams, print \'No anagrams found\'. SAMPLE INPUT listen 5 enlist google inlets banana silent SAMPLE OUTPUT enlist inlets silent Explanation The words \'enlist\', \'inlets\', and \'silent\' are anagrams of \'listen\'. The other candidates are not anagrams.","solution":"def find_anagrams(word, candidates): Returns a list of anagrams of the given word from the list of candidate words. # Sort the characters in the word to create a canonical form sorted_word = sorted(word) # Check each candidate to see if it\'s an anagram anagrams = [candidate for candidate in candidates if sorted(candidate) == sorted_word] if not anagrams: return [\'No anagrams found\'] return anagrams"},{"question":"A \\"magic matrix\\" of size n times m is a matrix where every row has distinct elements, and every column also has distinct elements. Specifically, each element in the matrix is an integer between 1 and n cdot m (inclusive), and no two elements are the same. Your task is to determine whether a given matrix is a magic matrix. If it is a magic matrix, print \\"YES\\". Otherwise, print \\"NO\\". -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. For each test case, the first line contains two integers n and m (1 le n, m le 10^3) — the dimensions of the matrix. Each of the next n lines contains m integers separated by spaces, representing the matrix. -----Output----- For each test case, print \\"YES\\" if the given matrix is a magic matrix, otherwise, print \\"NO\\". -----Example----- Input 3 2 2 1 2 3 4 2 2 1 2 2 3 3 3 1 2 3 4 5 6 7 8 9 Output YES NO YES -----Note----- In the first example, the matrix has distinct elements in every row and column. Hence, the answer is \\"YES\\". In the second example, the matrix has duplicate elements (\\"2\\") in the second row. Hence, the answer is \\"NO\\". In the third example, the 3x3 matrix contains distinct integers in every row and column. Hence, the answer is \\"YES\\".","solution":"def is_magic_matrix(matrix, n, m): elements_set = set() for row in matrix: if len(set(row)) != m: # Check for distinct elements in the row return False elements_set.update(row) if len(elements_set) != n * m: # Check if all elements are unique in the matrix return False for col in range(m): col_set = set() for row in matrix: col_set.add(row[col]) if len(col_set) != n: # Check for distinct elements in the column return False return True def evaluate_matrices(test_cases): results = [] for n, m, matrix in test_cases: if is_magic_matrix(matrix, n, m): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Define a function that takes an integer n and returns the list of all prime numbers less than n. The function should handle a minimum input value of 2 and should optimize for time complexity where possible.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n < 2: return [] # Initialize a boolean array indicating the primality of each number from 0 to n-1. is_prime = [True] * n is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers for i in range(2, int(n ** 0.5) + 1): if is_prime[i]: for j in range(i * i, n, i): is_prime[j] = False # Collecting all prime numbers primes = [i for i in range(n) if is_prime[i]] return primes"},{"question":"A programmer is writing a code to calculate the maximum profit that can be achieved from a series of stock prices over a given number of days. The stock prices for each day are represented in an array. The programmer can choose at most one period to buy and sell stock exactly once, but the selling day must come after the buying day. You need to write a function that takes the array of stock prices and returns the maximum profit that can be made from a single buy-sell transaction. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of days. The second line of the input contains n integer prices p_1, p_2, ... p_n (1 ≤ p_{i} ≤ 10^4) — the price of the stock on each day. -----Output----- Print only one integer — the maximum profit that can be achieved from a single buy-sell transaction. If no profit can be achieved, return 0. -----Example----- Input 6 7 1 5 3 6 4 Output 5 -----Note----- In the sample case, the best way to achieve the maximum profit is to buy the stock on the second day (price = 1) and sell it on the fifth day (price = 6). The profit is 6 - 1 = 5.","solution":"def max_profit(prices): This function takes a list of stock prices and returns the maximum profit that can be achieved from a single buy-sell transaction. If no profit can be achieved, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are provided with an array of integers, and you need to find whether the array contains an integer such that the number of its occurrences is greater than or equal to half of the length of the array. -----Input----- The input consists of a single test case on a single line. The input will be a string of space-separated integers representing the array. The length of the array will be between 1 and 1000 inclusive, and the integers will be between -10^9 and 10^9 inclusive. -----Output----- Output \\"YES\\" if there is at least one integer in the array whose number of occurrences is greater than or equal to half of the length of the array. Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: 1 2 3 1 1 2 1 Sample Output 1: YES Sample Input 2: 3 3 4 5 6 6 6 Sample Output 2: NO Sample Input 3: -1 -1 -1 -2 -2 -1 Sample Output 3: YES","solution":"def has_majority_element(arr): Checks if there is an integer in the array such that the number of its occurrences is greater than or equal to half of the length of the array. :param arr: List of integers :return: \\"YES\\" if such an integer exists, otherwise \\"NO\\" n = len(arr) count_dict = {} # Count occurrences of each element for num in arr: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 # Check if any element has occurrences greater than or equal to half the array length for count in count_dict.values(): if count >= n / 2: return \\"YES\\" return \\"NO\\""},{"question":"A company is organizing a marathon for its employees. Each employee can participate in multiple races but not more than one race on the same day. The company wants to find the maximum number of races that can be organized such that no employee is required to participate in more than one race on any given day. You are given a list of races, each race characterized by a start day and an end day. Multiple races can start and end on the same day. Your task is to determine the maximum number of non-overlapping races that can be organized. -----Constraints----- - 1 leq M leq 2 times 10^5 (number of races) - 1 leq start_i leq end_i leq 10^9 (start and end days of a race) -----Input----- Input is given from Standard Input in the following format: M start_1 end_1 start_2 end_2 ... start_M end_M -----Output----- Print the maximum number of non-overlapping races that can be organized. -----Sample Input----- 3 1 2 2 3 3 4 -----Sample Output----- 2 For example, one way to organize the races is: - Schedule the first race from day 1 to 2. - Schedule the third race from day 3 to 4. This maximizes the number of organized races. The races on days 2-3 overlap with others, hence at most two races can be organized without overlap.","solution":"def max_non_overlapping_races(races): Returns the maximum number of non-overlapping races. :param races: List of tuples (start, end) of each race. :return: Maximum number of non-overlapping races. # Sort the races by their end day races.sort(key=lambda x: x[1]) # Initialize the end time of the last selected race to 0 last_end_time = 0 count = 0 for start, end in races: if start > last_end_time: count += 1 last_end_time = end return count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() M = int(data[0]) races = [] for i in range(M): start = int(data[2*i+1]) end = int(data[2*i+2]) races.append((start, end)) print(max_non_overlapping_races(races))"},{"question":"Julia is working with a sequence of integers and wants to find a segment within this sequence that has the maximum possible sum. However, the segment must not contain any number greater than a given threshold M. Help Julia find the sum of the maximum sum segment within these constraints. Input: The first line contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains two integers N and M, where N is the length of the sequence and M is the threshold value. The second line contains N integers representing the sequence. Output: For each test case, print the sum of the maximum sum segment that only includes numbers ≤ M. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 0 ≤ M ≤ 10^6 -10^6 ≤ Sequence Elements ≤ 10^6 SAMPLE INPUT 2 5 10 1 2 -1 4 5 7 3 -1 -2 4 3 2 1 5 SAMPLE OUTPUT 11 6","solution":"def max_sum_segment_with_threshold(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] sequence = test_cases[i][1] max_sum = float(\'-inf\') current_sum = 0 for num in sequence: if num > M: current_sum = 0 else: current_sum += num max_sum = max(max_sum, current_sum) if current_sum < 0: current_sum = 0 results.append(max(max_sum, 0)) return results"},{"question":"Write a program to determine if a given string is \\"super balanced\\". A string is considered \\"super balanced\\" if all characters occur the same number of times, or if there is one character that occurs one more time than all other characters, but no more than that. For example, the string \\"aabbcc\\" is super balanced because all characters occur exactly twice. The string \\"aabbccc\\" is also super balanced because \'a\' and \'b\' occur twice and \'c\' occurs three times, exactly one more than \'a\' and \'b\'. However, the string \\"aabbcccc\\" is not super balanced. Input The first line of input contains an integer T - the number of test cases. Each of the next T lines contains a single string to be checked. Output For each test case, output \\"YES\\" if the string is super balanced, otherwise output \\"NO\\". Sample Input 3 aabbcc aabbccc aabbcccc Sample Output YES YES NO","solution":"from collections import Counter def is_super_balanced(s): Determines if a string is \\"super balanced\\". freq = Counter(s) values = list(freq.values()) freq_set = set(values) if len(freq_set) == 1: return \\"YES\\" if len(freq_set) == 2: max_val = max(freq_set) min_val = min(freq_set) if values.count(max_val) == 1 and max_val - min_val == 1: return \\"YES\\" return \\"NO\\" def check_super_balanced_strings(test_cases): results = [] for s in test_cases: results.append(is_super_balanced(s)) return results"},{"question":"A company has an annual team-building event where employees are divided into teams to work on various collaborative tasks. Each year, the teams should be formed in such a way that the difference in the number of members between any two teams is at most 1. You are given the total number of employees `e` and the number of teams `t` to be formed. Your task is to write a program that determines the maximum and minimum number of employees in any team. INPUT: The first line contains an integer `e` representing the number of employees. The second line contains an integer `t` representing the number of teams to be formed. OUTPUT: Output two integers in a single line: the maximum and minimum number of employees in any team. CONSTRAINTS: 1 ≤ e, t ≤ 1000 SAMPLE INPUT 10 3 SAMPLE OUTPUT 4 3 Explanation In this example, there are 10 employees and 3 teams. One of the possible ways to distribute employees is as follows: - Team 1: 4 employees - Team 2: 3 employees - Team 3: 3 employees Therefore, the maximum number of employees in a team is 4 and the minimum is 3.","solution":"def team_distribution(e, t): Given the number of employees e and the number of teams t, this function returns the maximum and minimum number of employees in any team. :param e: int - The total number of employees :param t: int - The number of teams :return: tuple - Two integers representing the maximum and minimum number of employees in any team max_team_size = (e + t - 1) // t # This is the ceiling of e / t min_team_size = e // t # This is the floor of e / t return max_team_size, min_team_size"},{"question":"Implement a function `find_duplicates` that takes a list of integers `nums` and returns a list of all duplicate numbers in it. Each element in the result should appear only once, even if it is duplicated several times in the input list. The result list should be sorted in ascending order. # Constraints: - The elements of the input list `nums` are within the range of -100 to 100. - The length of the input list `nums` is between 1 and 10^4. # Example: **Input:** ```python [4, 3, 2, 7, 8, 2, 3, 1] ``` **Output:** ```python [2, 3] ``` **Input:** ```python [1, 1, 2] ``` **Output:** ```python [1] ``` # Explanation: In the first example, the numbers 2 and 3 appear more than once in the list, so the output is [2, 3] in ascending order. In the second example, the number 1 is the only duplicate, so the output is [1].","solution":"def find_duplicates(nums): Returns a sorted list of duplicate numbers in the input list nums. Params: nums - a list of integers Returns: A sorted list of integers that are duplicates in the input list. from collections import Counter # Create a counter to count occurrences of each number count = Counter(nums) # Extract elements that appear more than once duplicates = [num for num, freq in count.items() if freq > 1] # Return sorted list of duplicates return sorted(duplicates)"},{"question":"Description Given an array with `n` unique integers, write a program to find an integer `k` such that all elements in the array can be divided by `k` without a remainder. `k` should be the largest possible divisor. The first line of input denotes the value of `n` (1 <= n <= 100). The second line contains `n` space-separated integers, a_{i} (1 ≤ a_{i} ≤ 100). # Input ``` The first line of input is an integer `n` (the number of integers). The second line contains `n` space-separated integers a_{i}. ``` # Output ``` Print a single integer `k`. ``` # Example Input: ``` 3 6 9 15 ``` Output: ``` 3 ``` # Explanation The largest integer that divides all the numbers in the array without a remainder in this example is `3`.","solution":"import math from functools import reduce def find_gcd(x, y): Returns the greatest common divisor (GCD) of x and y using the Euclidean algorithm. while y: x, y = y, x % y return x def largest_divisor(arr): Finds the largest integer k such that all elements in the array can be divided by k without a remainder. return reduce(find_gcd, arr) def find_largest_divisor(n, arr): Wrapper function to find the largest divisor given n and array of integers arr. if n == 1: return arr[0] return largest_divisor(arr)"},{"question":"\'\'\' Palindrome Permutation story Anna, a lover of palindromes, has a unique fascination with phrases that read the same backward as forward. She often plays a game where she picks a phrase and tries to rearrange its characters to see if she can form a palindrome. One day, her friend Elsa challenges her to write a program that determines whether any permutation of a given string is a palindrome. A string is a permutation of a palindrome if its characters can be rearranged to form a palindrome. For example, the string \\"civic\\" is already a palindrome, and \\"ivicc\\" can be rearranged to form \\"civic,\\" but \\"hello\\" cannot be rearranged to form a palindrome. problem Given a string, write a function to check if any permutation of the string can form a palindrome. Your function should return a boolean value: `True` if any permutation can form a palindrome, and `False` otherwise. input The input consists of a single string s (1 ≤ |s| ≤ 100,000) containing only lowercase letters. output Output a boolean value (`True` or `False`) indicating whether any permutation of the given string can form a palindrome. Input example 1 civic Output example 1 True Input example 2 ivicc Output example 2 True Input example 3 hello Output example 3 False Input example 4 aab Output example 4 True Note: In example 1, \\"civic\\" is already a palindrome. In example 2, \\"ivicc\\" can be rearranged to form \\"civic\\". In example 3, \\"hello\\" cannot be rearranged to form any palindrome. In example 4, \\"aab\\" can be rearranged to form \\"aba.\\" ```","solution":"from collections import Counter def can_permute_palindrome(s): Determine if any permutation of the input string can form a palindrome. :param s: input string :type s: str :return: True if any permutation of s can form a palindrome, False otherwise :rtype: bool # Count frequencies of each character char_count = Counter(s) # A string can form a palindrome if at most one character has an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Sherlock has devised a new game to challenge Watson\'s mathematical prowess. In this game, Sherlock provides Watson with an integer array and a target integer. Watson\'s task is to find two distinct indices in the array where the sum of the elements at those indices equals the target integer. To make it easy to verify the solution, Watson should find the first such pair of indices (if they exist) in sorted order. If no such pair exists, Watson should return a pair of -1 values. Example a = [2, 7, 11, 15] target = 9 The elements at indices 0 and 1 sum up to 9 (2 + 7 = 9), so the answer is [0, 1]. Function Description Complete the findIndices function in the editor below. findIndices has the following parameter(s): int a[n]: the integer array int target: the target integer Returns int[2]: an array containing the pair of indices that sum up to the target, or [-1, -1] if no such indices exist Input Format The first line contains two space-separated integers, n and target, the number of elements in the integer array and the target sum. The second line contains n space-separated integers, where each integer i describes array element a[i] (where 0 leq i < n). Constraints 2 leq n leq 10^5 -10^9 leq a[i] leq 10^9 -10^9 leq target leq 10^9 Sample Input 0 4 9 2 7 11 15 Sample Output 0 0 1 Explanation 0 The indices 0 and 1 have the elements 2 and 7, which sum to 9. Sample Input 1 3 6 1 2 3 Sample Output 1 -1 -1 Explanation 1 There are no two distinct indices in the array that sum up to 6.","solution":"def findIndices(a, target): Finds two distinct indices in array `a` where the sum of the elements at those indices equals `target`. Parameters: a (list of int): The integer array. target (int): The target sum. Returns: list of int: A list containing the pair of indices that sum up to the target, or [-1, -1] if no such indices exist. index_map = {} for i, num in enumerate(a): complement = target - num if complement in index_map: return [index_map[complement], i] index_map[num] = i return [-1, -1]"},{"question":"Anna loves playing with arrays. She particularly enjoys finding interesting patterns within them. Given an array of integers, Anna is keen to find the maximum length of a contiguous subarray that contains at most K distinct integers. Your task is to help Anna by writing a function `maxLengthSubarrayKDistinct(arr, k)` that takes an array of integers `arr` and an integer `k`, and returns the maximum length of the contiguous subarray with at most `k` distinct integers. INPUT: The first line of input contains an integer T specifying the number of test cases. Each of the next T test cases consists of two parts: 1. An integer `K` indicating the number of distinct integers allowed. 2. An array of integers `arr`. CONSTRAINTS: 1 ≤ T ≤ 50 1 ≤ K ≤ 100 1 ≤ length of each array ≤ 1000 1 ≤ arr[i] ≤ 10^5 OUTPUT: For each test case, print one line, specifying the maximum length of the contiguous subarray with at most `K` distinct integers. SAMPLE INPUT 3 2 1 2 1 3 4 3 1 2 1 2 3 1 4 4 4 4 SAMPLE OUTPUT 3 5 4 Explanation: Case 1: The longest subarray with at most 2 distinct integers is [1, 2, 1] with length 3. Case 2: The longest subarray with at most 3 distinct integers is the entire array [1, 2, 1, 2, 3] with length 5. Case 3: The entire array has only one distinct integer, so the length is 4.","solution":"def maxLengthSubarrayKDistinct(arr, k): from collections import defaultdict if k == 0: return 0 left = 0 right = 0 max_len = 0 window_counts = defaultdict(int) while right < len(arr): window_counts[arr[right]] += 1 while len(window_counts) > k: window_counts[arr[left]] -= 1 if window_counts[arr[left]] == 0: del window_counts[arr[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len def solve(test_cases): results = [] for case in test_cases: k, arr = case results.append(maxLengthSubarrayKDistinct(arr, k)) return results"},{"question":"In a field of size n by m, there are k obstacles placed at some coordinates. Your task is to determine the minimum number of steps required for a robot to move from the top-left corner (1, 1) to the bottom-right corner (n, m) without stepping on an obstacle. The robot can move up, down, left, or right at each step. If it is impossible for the robot to reach the bottom-right corner without hitting an obstacle, return -1 for that query. -----Input----- The first line of input contains a single integer t (1 le t le 100) — the number of test cases. For each test case: - The first line contains three integers n, m, and k (1 le n, m le 100, 0 le k le n times m - 2) — the dimensions of the grid and the number of obstacles. - The next k lines each contain two integers x_i and y_i (1 le x_i le n, 1 le y_i le m), representing the coordinates of the obstacles. It is guaranteed that neither the top-left corner (1, 1) nor the bottom-right corner (n, m) contains an obstacle. -----Output----- For each test case, output a single integer — the minimum number of steps to reach the bottom-right corner, or -1 if it is not possible. -----Examples----- Input 2 3 3 1 2 2 4 4 2 2 2 3 3 Output 4 6 -----Note----- In the first example, the grid looks like this: ``` 1 1 1 1 0 1 1 1 1 ``` The robot can go down, right, down, and right to avoid the obstacle at (2, 2). In the second example, the grid looks like this: ``` 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 ``` The robot can move around the obstacles to reach the bottom-right corner.","solution":"from collections import deque def minimum_steps_to_corner(n, m, k, obstacles): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 # Constructing the grid and marking obstacles grid = [[0 for _ in range(m)] for _ in range(n)] for x, y in obstacles: grid[x-1][y-1] = 1 # BFS initialization start = (0, 0) goal = (n-1, m-1) queue = deque([(start, 0)]) # (cell, steps) visited = set() visited.add(start) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: (x, y), steps = queue.popleft() if (x, y) == goal: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append(((nx, ny), steps + 1)) return -1 def solve_robot_movement(t, test_cases): results = [] for case in test_cases: n, m, k = case[0] obstacles = case[1] result = minimum_steps_to_corner(n, m, k, obstacles) results.append(result) return results"},{"question":"You are given a list of integers representing the prices of items in a store. You have a specific budget and want to maximize the number of distinct items you can buy without exceeding this budget. Write a function that takes in the list of prices and the budget and returns the maximum number of distinct items you can buy. -----Input----- - The input consists of two lines. - The first line contains an integer B, the budget. - The second line contains a list of space-separated positive integers representing the prices of items. -----Output----- - Output a single integer, which is the maximum number of distinct items that can be bought without exceeding the budget. -----Constraints----- - 1 leq B leq 10^9 - 1 leq text{Array length} leq 10^5 - 1 leq text{Prices[i]} leq 10^4 -----Sample Input----- 50 1 12 5 111 200 1000 10 -----Sample Output----- 4 -----Explanation----- With a budget of 50, you can buy items with prices [1, 5, 10, 12]. This sums up to 28, which is within the budget, and you can\'t buy more distinct items without exceeding the budget.","solution":"def max_distinct_items(prices, budget): # Sort the prices in ascending order prices.sort() # Initialize variables to keep track of total spent and the count of items total_spent = 0 count = 0 # Loop through the sorted prices for price in prices: if total_spent + price <= budget: total_spent += price count += 1 else: break return count"},{"question":"You are given an integer array A consisting of N elements. For each element in the array, determine the longest contiguous subarray containing unique elements that ends at that element. - A contiguous subarray is a subarray obtained by deleting some (possibly zero) elements from the beginning or the end of the array. - The subarray must include the element itself as the last element. -----Constraints----- - 1 leq N leq 3000 - 1 leq A[i] leq 10^6 -----Input----- Input is given from Standard Input in the following format: N A -----Output----- Print N space-separated integers, where the i-th integer represents the length of the longest contiguous subarray ending at the i-th element. -----Sample Input----- 5 1 2 1 3 2 -----Sample Output----- 1 2 2 3 3 Explanation: - For the first element (1), the longest unique subarray ending at this element is [1], with length 1. - For the second element (2), the longest unique subarray ending at this element is [1, 2], with length 2. - For the third element (1), the longest unique subarray ending at this element is [2, 1] or [1], with length 2. - For the fourth element (3), the longest unique subarray ending at this element is [2, 1, 3], with length 3. - For the fifth element (2), the longest unique subarray ending at this element is [1, 3, 2], with length 3.","solution":"def longest_unique_subarray_lengths(N, A): Returns a list of integers representing the length of the longest contiguous subarray containing unique elements that ends at each element in the array A. last_seen = {} start = 0 result = [] for end in range(N): if A[end] in last_seen: start = max(start, last_seen[A[end]] + 1) last_seen[A[end]] = end result.append(end - start + 1) return result"},{"question":"Mr. Johnson is a high school teacher who loves statistics. Every year, he organizes an exam for his students to assess their knowledge and understanding of the course material. After each exam, he loves to analyze the scores of his students and determine various statistics. Given a list of scores, he wants to be able to answer several types of queries about them. Each query can be one of the following types: 1. \\"avg l r\\" - Calculate the average score of students from index l to r (inclusive). 2. \\"median l r\\" - Determine the median score of students from index l to r (inclusive). In case of an even number of scores, the median is the average of the two middle numbers. -----Input----- The input consists of: - One line with one integer n (1 <= n <= 10^5), the number of students. - One line with n integers, where the ith integer represents the score of the ith student (0 <= score <= 100). - One line with one integer q (1 <= q <= 10^5), the number of queries. - q lines each containing a query of the form described above (\\"avg l r\\" or \\"median l r\\"). All indices are 0-based. -----Output----- For each query, output a single line with the result. For average queries, output the result rounded to 2 decimal places. For median queries, output the exact median (round if necessary). -----Examples----- Sample Input: 6 80 90 100 70 60 85 3 avg 1 4 median 0 5 avg 2 2 Sample Output: 80.00 82.50 100.00","solution":"def analyze_scores(scores, queries): results = [] def average(l, r): return round(sum(scores[l:r+1]) / (r - l + 1), 2) def median(l, r): sorted_subarray = sorted(scores[l:r+1]) length = r - l + 1 if length % 2 == 1: return sorted_subarray[length // 2] else: mid1 = sorted_subarray[length // 2] mid2 = sorted_subarray[length // 2 - 1] return round((mid1 + mid2) / 2, 2) for query in queries: parts = query.split() qtype = parts[0] l = int(parts[1]) r = int(parts[2]) if qtype == \\"avg\\": results.append(f\\"{average(l, r):.2f}\\") elif qtype == \\"median\\": results.append(f\\"{median(l, r):.2f}\\") return results"},{"question":"A city has a number of bus routes, and each route has a specific operating duration and frequency. You are tasked with determining the busiest time of the day based on the frequency and duration of each bus route. Each bus route can be described by three values: start time, end time, and frequency. The start and end time together define the duration during which the bus route operates daily within a 24-hour period. The frequency defines how often a bus leaves the starting point. You need to find the busiest time based on all bus routes\' schedules. The busiest time is defined as the time during which the highest number of buses are operating simultaneously. Consider times to be in minutes since the start of the day (0 to 1440). If multiple times have the same bus count, you should select the earliest one. -----Input----- The first line contains an integer m (1 le m le 100) — the number of bus routes. Each of the next m lines describes a bus route with three integers s_i, e_i, f_i (0 le s_i < e_i le 1440, 1 le f_i le 1440) — the start time, end time, and frequency of the bus route respectively. -----Output----- Print the single integer representing the minute of the day when the number of operating buses is at its peak. -----Example----- Input 3 60 180 20 100 200 30 150 300 10 Output 150 -----Note----- In the first example, we have three bus routes: The first bus route starts at 60 minutes and ends at 180 minutes with a frequency of 20 minutes. The second bus route starts at 100 minutes and ends at 200 minutes with a frequency of 30 minutes. The third bus route starts at 150 minutes and ends at 300 minutes with a frequency of 10 minutes. At minute 150, the buses from all three routes are operating simultaneously, making it the busiest time of the day.","solution":"def busiest_time(m, schedules): time_events = [0] * 1441 # Initialize an array for all minutes of the day for start, end, freq in schedules: for time in range(start, end, freq): time_events[time] += 1 max_buses = max(time_events) return time_events.index(max_buses) # Example usage: m = 3 schedules = [ (60, 180, 20), (100, 200, 30), (150, 300, 10), ] print(busiest_time(m, schedules)) # Output: 150"},{"question":"# Rotate Matrix Write a method that rotates a given NxN matrix by 90 degrees in clockwise direction. The matrix will be represented as a two-dimensional list (or array) containing N sublists, each with N integer elements. The method should return the rotated matrix as a new NxN list (or array). # Example ```python rotate_matrix([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) #=> [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] #] rotate_matrix([ [1, 2], [3, 4] ]) #=> [ # [3, 1], # [4, 2] #] ``` # Notes - The function should handle any NxN matrix, where 1 ≤ N ≤ 100. - You may assume that each element of the matrix is an integer.","solution":"def rotate_matrix(matrix): Rotates an NxN matrix by 90 degrees clockwise. :param matrix: List[List[int]] - A 2D list representing the NxN matrix. :return: List[List[int]] - The rotated matrix. N = len(matrix) rotated_matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Given a string, return a new string where the first and last characters have been swapped. For example: `\\"hello\\"` should return `\\"oellh\\"`. `\\"ab\\"` should return `\\"ba\\"`. `\\"a\\"` can remain `\\"a\\"`. You can assume the input string will always contain at least one character.","solution":"def swap_first_last(s): Returns a new string where the first and last characters have been swapped. If the string is of length 1, it returns the string unchanged. if len(s) == 1: return s return s[-1] + s[1:-1] + s[0]"},{"question":"Students in your school are organizing a string manipulation competition. They need your help to create a scoring system based on certain rules. Given a string, you need to compute a score based on the frequency of each character in the string. The scoring rules are as follows: 1. Each unique character in the string earns points equal to its frequency in the string squared. 2. The total score is the sum of points for all unique characters. Input First line contains T, the number of test cases. Next T lines each contain a single string S, consisting of lowercase alphabetic characters. Output For each test case, output the score of the string on a separate line. Constraints 1 ≤ T ≤ 100 1 ≤ length of S ≤ 100 Example Input: 2 aab aaa Output: 5 9","solution":"def compute_score(s): Computes the score of a string based on the frequency of each character. Score rules: - Each unique character earns points equal to its frequency squared. - Total score is the sum of points for all unique characters. Parameters: s (str): The input string consisting of lowercase alphabetic characters. Returns: int: The computed score. from collections import Counter freq = Counter(s) return sum(count * count for count in freq.values()) def score_strings(test_cases): Processes multiple test cases, computing the score for each string. Parameters: test_cases (list of str): List of strings to be evaluated. Returns: list of int: List of scores corresponding to each input string. return [compute_score(s) for s in test_cases]"},{"question":"Maria loves solving puzzles and she has stumbled upon an interesting one. She came across a matrix of lowercase English alphabets and a word. She wonders if she can trace the entire word in the matrix by starting at any cell and moving horizontally, vertically, or diagonally to adjacent cells. Cells are not allowed to be reused in tracing a single word. Your task is to determine whether the word can be traced in the matrix. Input The input consists of multiple test cases. The first line contains an integer T, the number of test cases. Each test case begins with a line containing two integers n and m, the dimensions of the matrix (number of rows and columns, respectively). The next n lines each contain m characters, representing the matrix. The next line contains a string, the word Maria wants to trace in the matrix. Output For each test case, output \\"YES\\" if the word can be traced in the matrix, and \\"NO\\" otherwise. Constraints 1 ≤ T ≤ 10 1 ≤ n, m ≤ 20 1 ≤ length of word ≤ 20 SAMPLE INPUT 2 3 4 abcd mnpq xzyw abc 4 4 abce sfcs adee fsaf see SAMPLE OUTPUT YES YES","solution":"def is_word_tracable(matrix, word): rows, cols = len(matrix), len(matrix[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)] def dfs(x, y, word_index, visited): if word_index == len(word): return True if x < 0 or x >= rows or y < 0 or y >= cols or word[word_index] != matrix[x][y] or (x, y) in visited: return False visited.add((x, y)) for dx, dy in directions: if dfs(x + dx, y + dy, word_index + 1, visited): return True visited.remove((x, y)) return False for i in range(rows): for j in range(cols): if dfs(i, j, 0, set()): return True return False def solve_puzzle(T, test_cases): results = [] for i in range(T): n, m, matrix, word = test_cases[i] if is_word_tracable(matrix, word): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A group of friends love to pass secret notes to each other using a special encoding system. They encode each message by first converting it into a sequence of integers. Each character in the message is represented by its position in the alphabet (A=1, B=2, ..., Z=26). They then create a list of these integers, and each friend has to decode the message from this list. Given an encoded message in the form of a list of integers, can you help the friends decode the message back to its original string format? For example, the list [8, 5, 12, 12, 15] represents the message \\"HELLO\\" based on the positions of the letters in the alphabet (H=8, E=5, L=12, L=12, O=15). -----Input----- The first line of the input contains a single integer n (1le n le 100) — the length of the encoded message list. The second line contains n integers separated by spaces which represent the encoded message. Each integer a_i (1 le a_i le 26) corresponds to a letter\'s position in the alphabet. -----Output----- Output the decoded message as a single string comprising uppercase English letters. -----Examples----- Input 5 8 5 12 12 15 Output HELLO Input 3 3 1 20 Output CAT Input 4 19 5 1 12 Output SEAL -----Note----- In the first example, \\"HELLO\\" corresponds to the list [8, 5, 12, 12, 15] based on the position of each letter in the alphabet. In the second example, \\"CAT\\" corresponds to the list [3, 1, 20]. In the third example, \\"SEAL\\" corresponds to the list [19, 5, 1, 12].","solution":"def decode_message(n, encoded_message): Decodes an encoded message from a list of integers representing positions in the alphabet. Parameters: n (int): The length of the encoded message list. encoded_message (list of int): A list of integers representing positions in the alphabet. Returns: str: The decoded message as a string of uppercase English letters. decoded_message = \'\'.join(chr(num + 64) for num in encoded_message) return decoded_message"},{"question":"You are given two strings, `s1` and `s2`. An operation involves choosing any character from `s2` and removing it from `s2`. Determine the minimum number of operations required to make `s1` a subsequence of `s2`. A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. For example, \\"abc\\", \\"abg\\", \\"bdf\\" are subsequences of \\"abcdefg\\", but \\"acb\\" is not. Return an integer representing the minimum number of operations required. Example: Input: s1 = \\"abc\\" s2 = \\"bahbgdc\\" Output: 0 Explanation: String \\"abc\\" is already a subsequence of \\"bahbgdc\\", so no removal is needed. Example: Input: s1 = \\"axc\\" s2 = \\"bahbgdc\\" Output: 2 Explanation: We need to remove at least two characters [\'b\', \'d\', \'g\'] from \\"bahbgdc\\" to make \\"axc\\" a subsequence. Constraints: - 1 <= s1.length <= 1000 - 1 <= s2.length <= 10^4 - s1 and s2 consist of only lowercase English letters.","solution":"def min_operations_to_make_subsequence(s1, s2): Determine the minimum number of operations required to make s1 a subsequence of s2. :param s1: String :param s2: String :return: Integer # Length of the input strings len_s1 = len(s1) len_s2 = len(s2) # Pointers for s1 and s2 i, j = 0, 0 # Iterate over s2 and try to match characters with s1 while i < len_s1 and j < len_s2: if s1[i] == s2[j]: # If characters match, move s1 pointer i += 1 # Always move s2 pointer j += 1 # If we have traversed all of s1, it\'s a subsequence if i == len_s1: return 0 else: # Number of unmatched characters in s1 return len_s1 - i"},{"question":"John is playing a game where he moves a character on a 2D grid. The grid is composed of cells, some of which are obstacles while others are passable. The character can move up, down, left, or right, if the corresponding cell is passable. John starts at the cell (1, 1) and aims to reach the cell (N, M). Your task is to write a program that determines whether John can reach his destination. ------ Input Format ------ - The first line of input contains two integers, N (number of rows) and M (number of columns) of the grid. - The next N lines each contain a string of length M, consisting of characters \'O\' (passable cell) and \'X\' (obstacle). The character at (1, 1) is always \'O\' and represents John\'s starting position. The character at (N, M) is also \'O\' and represents John\'s destination. ------ Output Format ------ - Output \\"YES\\" if John can reach the cell (N, M) from (1, 1); otherwise, output \\"NO\\". ------ Constraints ------ 2 ≤ N, M ≤ 50 The grid cells contain only \'O\' and \'X\' characters. ----- Sample Input 1 ------ 3 4 OOOO OXOX OOOO ----- Sample Output 1 ------ YES ----- Explanation 1 ------ John can move from (1, 1) to (3, 4) by following the path: (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3) → (3, 4). ----- Sample Input 2 ------ 3 3 OOO XXO OXX ----- Sample Output 2 ------ NO ----- Explanation 2 ------ There is no path from (1, 1) to (3, 3) as the obstacles block the way.","solution":"def can_reach_destination(N, M, grid): from collections import deque def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'O\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (N-1, M-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"Write a function to determine the minimum time required to type out a given string using a special keyboard. The keyboard contains all lowercase English letters and is arranged in a single row in the following order: \\"abcdefghijklmnopqrstuvwxyz\\". The time taken to move from one key to another is equal to the absolute difference in their positions. You start with your finger on the first character of the keyboard. Your task is to implement a function that takes a string input and returns the total time needed to type out the string. Function Signature: ``` def min_typing_time(s: str) -> int: pass ``` # Input - A string `s` containing only lowercase English letters (1 ≤ |s| ≤ 10^4). # Output - An integer representing the minimum time required to type out the string. # Example Example 1 ``` Input \\"cba\\" Output 4 Explanation You start at \'a\' (position 1), move to \'c\' (position 3), then from \'c\' to \'b\' (position 2). Thus, the total time is |3 - 1| + |2 - 3| = 2 + 2 = 4. ``` Example 2 ``` Input \\"zebra\\" Output 25 Explanation You start at \'a\' (position 1), move to \'z\' (position 26), then from \'z\' to \'e\' (position 5), and so on. The total time is |26 - 1| + |5 - 26| + |2 - 5| + |18 - 2| + |1 - 18| = 25 + 21 + 3 + 16 + 17 = 82. ``` # Note - The function must handle the entire string efficiently even if it is very large.","solution":"def min_typing_time(s: str) -> int: This function calculates the minimum time required to type out a given string on a keyboard arranged as \\"abcdefghijklmnopqrstuvwxyz\\". if not s: return 0 # Dictionary to store positions of letters in the keyboard. position = {chr(i + 97): i + 1 for i in range(26)} total_time = 0 current_position = 1 # starting at \'a\' position, which is 1 for char in s: new_position = position[char] # Calculate the absolute difference between current and new position total_time += abs(new_position - current_position) current_position = new_position return total_time"},{"question":"Mira loves playing with strings and recently she has come up with a new challenge for you. She wants you to help her find the longest substring in a given string that contains at most two distinct characters. -----Input----- The input consists of a single string s of length L (1 leq L leq 10^5), consisting of only lowercase alphabets. -----Output----- Output the length of the longest substring that contains at most two distinct characters. Note: If there are multiple substrings with the same length, any length is acceptable. -----Examples----- Sample Input 1: abcbbbbcccbdddadacb Sample Output 1: 10 Sample Input 2: eceba Sample Output 2: 3","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. start = 0 max_length = 0 char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a matrix of size MxN filled with non-negative integers representing the height of each unit cell in a continent. The ocean is represented by cells with height 0. A cell in the matrix is land if its height is greater than 0. The water level of the ocean around the continent will rise by 1 unit each day. Find the number of days required for the entire continent to be submerged underwater. ------ Input ------ The first line contains two integers M and N, the dimensions of the matrix. The next M lines each contain N integers representing the heights of the cells in the matrix. ------ Output ------ Output a single integer, the number of days required for the entire continent to be submerged underwater. ------ Constraints ------ 1 ≤ M, N ≤ 100 0 ≤ height_value ≤ 10,000 ------ Sample Input 1 ------ 3 3 4 3 2 3 2 1 2 1 0 ------ Sample Output 1 ------ 4 ------ Explanation 1 ------ The initial heights of the cells are: [ 4 3 2 ] [ 3 2 1 ] [ 2 1 0 ] After each day, all water-adjacent cells decrease by 1 unit in height: Day 1: [ 3 2 1 ] [ 2 1 0 ] [ 1 0 0 ] Day 2: [ 2 1 0 ] [ 1 0 0 ] [ 0 0 0 ] Day 3: [ 1 0 0 ] [ 0 0 0 ] [ 0 0 0 ] Day 4: [ 0 0 0 ] [ 0 0 0 ] [ 0 0 0 ] So, the continent will be fully submerged after 4 days.","solution":"from collections import deque def days_to_submerge(matrix): if not matrix: return 0 M = len(matrix) N = len(matrix[0]) max_height = 0 for i in range(M): for j in range(N): if matrix[i][j] > max_height: max_height = matrix[i][j] return max_height"},{"question":"Given an array of integers, you are required to determine the length of the longest contiguous subarray that contains at most K distinct numbers. ------ Input ------ The first line of the input contains two integers N and K - the number of elements in the array and the number of distinct numbers allowed in the subarray, respectively. The second line contains N space-separated integers representing the elements of the array. ------ Output ------ Output a single integer - the length of the longest contiguous subarray that contains at most K distinct numbers. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ K ≤ N 1 ≤ text{array}[i] ≤ 10^5 ------ Subtasks ------ Subtask 1[20 points]: 1 ≤ N ≤ 100 Subtask 2[30 points]: 1 ≤ K ≤ 10 Subtask 3[50 points]: no additional constraints ----- Sample Input 1 ------ 7 2 1 2 1 2 3 4 2 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ Example case 1: The longest contiguous subarray that contains at most 2 distinct numbers is [1, 2, 1, 2], which has a length of 4. ----- Sample Input 2 ------ 5 3 1 2 3 4 5 ----- Sample Output 2 ------ 3 ----- Explanation 2 ------ Example case 2: The longest contiguous subarray that contains at most 3 distinct numbers is [1, 2, 3], which has a length of 3.","solution":"def longest_subarray_with_k_distinct(nums, k): Find the length of the longest contiguous subarray with at most K distinct integers. Args: nums (List[int]): The array of integers. k (int): The maximum number of distinct integers allowed in the subarray. Returns: int: The length of the longest subarray. from collections import defaultdict n = len(nums) if n == 0 or k == 0: return 0 # Dictionary to store the count of elements in the current window count = defaultdict(int) left = 0 max_length = 0 for right in range(n): count[nums[right]] += 1 while len(count) > k: count[nums[left]] -= 1 if count[nums[left]] == 0: del count[nums[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Maria is a talented software developer who loves solving complex problems. One day, she came across a coding problem involving strings and their transformations. The challenge was to determine the minimum number of operations needed to transform one string into another. The allowed operations are: 1. Insert a character. 2. Delete a character. 3. Replace a character. Maria decided to solve this problem using dynamic programming. Can you write a program to help Maria find the minimum number of operations required to convert one string into another? -----Input----- The input consists of: - one line with a string s_1 of length 1 leq |s_1| leq 2000, the initial string. - one line with a string s_2 of length 1 leq |s_2| leq 2000, the target string. The strings consist of lowercase letters only. -----Output----- Output the minimum number of operations required to transform s_1 into s_2. -----Examples----- Sample Input 1: horse ros Sample Output 1: 3 Sample Input 2: intention execution Sample Output 2: 5","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Need to insert j characters elif j == 0: dp[i][j] = i # Need to delete i characters elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"You are given a list of N integers. You need to reorder this list so that all even numbers appear before all odd numbers. The relative order of the even numbers and the relative order of the odd numbers should remain the same as in the original list. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers representing the list. -----Output----- For each test case, print a single line containing the reordered list where even numbers appear before odd numbers, maintaining their relative orders. -----Constraints----- - 1 leq T leq 10^3 - 1 leq N leq 10^4 - The elements of the list are within the range -10^6 leq a_i leq 10^6. -----Subtasks----- Subtask #1 (30 points): - N leq 15 Subtask #2 (70 points): original constraints -----Example Input----- 3 5 1 2 3 4 5 4 10 21 30 41 3 7 9 11 -----Example Output----- 2 4 1 3 5 10 30 21 41 7 9 11 -----Explanation----- Example case 1: The even numbers 2 and 4 are moved to the front. The odd numbers 1, 3, and 5 maintain their relative order. Example case 2: The even numbers 10 and 30 are moved to the front. The odd numbers 21 and 41 maintain their relative order. Example case 3: There are no even numbers, so the list remains the same.","solution":"def reorder_list(N, lst): Reorder the list so that all even numbers appear before all odd numbers, maintaining their relative orders. evens = [x for x in lst if x % 2 == 0] odds = [x for x in lst if x % 2 != 0] return evens + odds def process_cases(T, cases): results = [] for i in range(T): N, lst = cases[i] result = reorder_list(N, lst) results.append(result) return results"},{"question":"Alice loves sorting integers. Given an array of integers, she defines the *magic score* of the array as the sum of products of all distinct pairs of elements in the array. Find the *magic score* of the given array. Since the answer can be huge, return it modulo 1000000007. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of test cases follow. - First line of each test case contains one integer N - the length of the array. - Second line of each test case contains N integers separated by space, denoting the elements of the array. ------ Output Format ------ For each test case, output in a single line, the magic score of the array modulo 1000000007. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 2 cdot 10^{5} - Each element in the array will fit in a 32-bit signed integer. - Sum of N over all test cases does not exceed 10^{6} ----- Sample Input 1 ------ 3 3 1 2 3 4 2 4 6 8 5 -1 -2 -3 -4 -5 ----- Sample Output 1 ------ 11 96 -40 ----- Explanation 1 ------ Test Case 1: All distinct pairs of the array [1, 2, 3] are [(1, 2), (1, 3), (2, 3)]. The products of these pairs are [2, 3, 6]. Summing these products gives us 2 + 3 + 6 = 11. Test Case 2: All distinct pairs of the array [2, 4, 6, 8] are [(2, 4), (2, 6), (2, 8), (4, 6), (4, 8), (6, 8)]. The products of these pairs are [8, 12, 16, 24, 32, 48]. Summing these products gives us 8 + 12 + 16 + 24 + 32 + 48 = 140. Since the result must be modulo 1000000007, we get 140 % 1000000007 = 96. Test Case 3: All distinct pairs of the array [-1, -2, -3, -4, -5] are [(-1, -2), (-1, -3), (-1, -4), (-1, -5), (-2, -3), (-2, -4), (-2, -5), (-3, -4), (-3, -5), (-4, -5)]. The products of these pairs are [2, 3, 4, 5, 6, 8, 10, 12, 15, 20]. Summing these products gives us 2 + 3 + 4 + 5 + 6 + 8 + 10 + 12 + 15 + 20 = 85. Since the result must be modulo 1000000007, we get 85 % 1000000007 = -40.","solution":"MOD = 1000000007 def calculate_magic_score(arr): Calculate the magic score of an array. n = len(arr) total_sum = sum(arr) magic_score = 0 for num in arr: total_sum -= num magic_score += num * total_sum magic_score %= MOD return magic_score def process_test_cases(test_cases): results = [] for N, array in test_cases: results.append(calculate_magic_score(array)) return results"},{"question":"Write a function that takes in a list of integers and returns a new list containing only the even numbers from the original list, but in reverse order. For example: ```python reverse_even_numbers([1, 2, 3, 4, 5, 6]) == [6, 4, 2] reverse_even_numbers([10, 31, 42, 53, 64]) == [64, 42, 10] reverse_even_numbers([7, 13, 19, 25]) == [] ```","solution":"def reverse_even_numbers(nums): Returns a new list containing only the even numbers from the original list, but in reverse order. even_numbers = [num for num in nums if num % 2 == 0] return even_numbers[::-1]"},{"question":"The developers at TechSolutions are working on enhancing the search functionality of their application, specifically focusing on palindrome substrings. A palindrome is a string that reads the same backward as it does forward. They need help to identify all unique longest palindromic substrings in a given input string. Write a program that, given a string, finds all unique substrings that are palindromes and have the maximum length out of all palindrome substrings in the string. Input The input consists of a single line with a string s (1 ≤ |s| ≤ 1000), where |s| is the length of the string, consisting of lowercase Latin letters. Output Output all unique longest palindromic substrings in the given string, each on a new line. You should print them in lexicographical order. Examples Input babad Output aba bab Input cbbd Output bb Input a Output a Input banana Output anana Note In the first sample, the palindromic substrings \\"bab\\" and \\"aba\\" both have the maximum length of 3.","solution":"def longest_palindromic_substrings(s): Finds all unique substrings that are palindromes and have the maximum length. Args: s: A string consisting of lowercase Latin letters. Returns: A list of unique longest palindromic substrings in lexicographical order. n = len(s) max_length = 0 palindromes = set() for i in range(n): for j in range(i, n): substr = s[i:j+1] if substr == substr[::-1]: if len(substr) > max_length: max_length = len(substr) palindromes = {substr} elif len(substr) == max_length: palindromes.add(substr) return sorted(palindromes)"},{"question":"A university library wishes to automate the process of booking study rooms. Each study room can be booked for a specific period and cannot be double-booked. Students can request a study room for a certain period, and if the room is available for the entire requested period, the request is granted; otherwise, it is denied. You are tasked to implement a system to manage these booking requests. The library has exactly one study room. Each booking request is defined by a start time and an end time (both inclusive). Input The input is given from Standard Input in the following format: The first line contains an integer N, the number of booking requests. The next N lines each contain two integers, start and end, the start and end times of a booking request. Constraints: * 1 leq N leq 100,000 * 0 leq start < end leq 10^9 * All input values are integers. Output Print \\"Yes\\" for each granted request and \\"No\\" for each denied request, each on a new line. Examples Input 3 1 3 2 4 5 6 Output Yes No Yes Input 4 1 2 2 3 3 4 1 5 Output Yes Yes Yes No","solution":"def handle_booking_requests(n, requests): This function takes the number of booking requests and a list of booking requests. Each request is a tuple (start, end). It returns a list of strings \\"Yes\\" or \\"No\\" based on whether the booking request is granted or denied. bookings = [] results = [] for start, end in requests: conflict = False for s, e in bookings: if not (end <= s or start >= e): conflict = True break if conflict: results.append(\\"No\\") else: results.append(\\"Yes\\") bookings.append((start, end)) return results def read_input_and_process(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) requests = [(int(data[i]), int(data[i+1])) for i in range(1, 2*n, 2)] results = handle_booking_requests(n, requests) for result in results: print(result)"},{"question":"You work for a logistics company that manages a fleet of delivery drones. Each drone has a set of delivery instructions that dictate the order in which it visits various locations. Each instruction consists of a command and a quantity, which can be: - `L q` - Move left by `q` units - `R q` - Move right by `q` units - `U q` - Move up by `q` units - `D q` - Move down by `q` units Your task is to determine the final coordinates of each drone after executing all its instructions from the starting position `(0, 0)`. -----Input----- The input starts with an integer 1 leq d leq 100, the number of drones. For each drone, there is an integer 1 leq k leq 1000 followed by k lines of instructions. Each instruction is a command (`L`, `R`, `U`, or `D`) followed by an integer 1 leq q leq 100. -----Output----- For each drone, output its final coordinates as `(x, y)`, where `x` and `y` are the final horizontal and vertical positions respectively. -----Examples----- Sample Input: 2 3 R 10 U 5 L 15 4 U 20 R 50 D 25 L 10 Sample Output: (-5, 5) (40, -5) Explanation: - For the first drone, the sequence of moves is: Starting at (0, 0), R 10 -> (10, 0), U 5 -> (10, 5), L 15 -> (-5, 5). - For the second drone, the sequence of moves is: Starting at (0, 0), U 20 -> (0, 20), R 50 -> (50, 20), D 25 -> (50, -5), L 10 -> (40, -5).","solution":"def final_coordinates(drones_instructions): results = [] for instructions in drones_instructions: x, y = 0, 0 for direction, quantity in instructions: if direction == \'L\': x -= quantity elif direction == \'R\': x += quantity elif direction == \'U\': y += quantity elif direction == \'D\': y -= quantity results.append((x, y)) return results"},{"question":"You are given an array of integers and are asked to sort it. You also need to determine the smallest difference between any two adjacent elements in the sorted array. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 leq t leq 100) – the number of test cases. The first line of each test case contains a single integer n (2 leq n leq 10^5) – the size of the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) – the elements of the array. -----Output----- For each test case, output a single integer – the smallest difference between any two adjacent elements in the sorted array. -----Examples----- Input 2 5 4 2 1 5 3 3 10 1 8 Output 1 2 -----Note----- In the first test case, the sorted array is [1, 2, 3, 4, 5], and the smallest difference between adjacent elements is 1. In the second test case, the sorted array is [1, 8, 10], and the smallest difference between adjacent elements is 2.","solution":"def smallest_difference(t, test_cases): results = [] for case in test_cases: n, arr = case arr.sort() min_diff = float(\'inf\') for i in range(1, n): min_diff = min(min_diff, arr[i] - arr[i-1]) results.append(min_diff) return results"},{"question":"Oliver is organizing a book reading club where each member will read one book from a selection of books. There are N members in the club, and there are B books available. Each member has a ranking of all the books from their most favorite to least favorite. Oliver wants to ensure that the members are as satisfied as possible. A member is considered satisfied if they get to read one of their top three favorite books. Oliver needs to allocate one book to each member. Help Oliver maximize the number of satisfied members. Write a program to find the maximum number of satisfied members possible given the favorite rankings of books by all the members. # Constraints: - 1 ≤ N ≤ 100 - 1 ≤ B ≤ 100 - Each member ranks all B books without any ties. # Input: The input format is as follows: ``` N B r11 r12 r13 ... r1B r21 r22 r23 ... r2B : rN1 rN2 rN3 ... rNB ``` where each rij represents the j-th ranked book for the i-th member (1-based indexing). # Output: Print the maximum number of satisfied members. # Examples: Example Input 1: ``` 3 4 4 1 2 3 3 4 2 1 1 2 3 4 ``` Example Output 1: ``` 3 ``` Example Input 2: ``` 4 5 1 2 3 4 5 2 3 4 5 1 3 4 5 1 2 4 5 1 2 3 ``` Example Output 2: ``` 4 ```","solution":"def max_satisfied_members(N, B, rankings): from collections import defaultdict from heapq import heappop, heappush # Dictionary to track books assigned to members and how many times each book has been preferred in top 3 book_assignments = defaultdict(list) for member, ranking in enumerate(rankings): for priority, book in enumerate(ranking[:3]): heappush(book_assignments[book], (priority, member)) satisfied_members = set() # Distribute books for book, preferences in book_assignments.items(): while preferences: _, member = heappop(preferences) if member not in satisfied_members: satisfied_members.add(member) break return len(satisfied_members)"},{"question":"Given a list of words, the task is to find all pairs of words that can form a palindrome when concatenated in any order. ------ Input ------ The input consists of a single test case: The first line contains an integer N (1 ≤ N ≤ 10^3), the number of words. The next N lines each contain a single word of lowercase English letters (1 ≤ length of each word ≤ 10^4). ------ Output ------ For each test case, output the pairs of indices (1-based) of words that can form a palindrome when concatenated in any order. Each pair should be printed on a new line. The pairs should be ordered first by the first index, then by the second index. If there are no such pairs, output \\"No palindrome pairs found.\\" ------ Sample Input -------- 4 bat tab cat tac ------ Sample Output -------- 1 2 2 1 3 4 4 3","solution":"def find_palindrome_pairs(words): Returns the list of pairs of indices (1-based) such that the concatenation of the word at the first index with the word at the second index forms a palindrome. def is_palindrome(word): return word == word[::-1] N = len(words) result = [] for i in range(N): for j in range(N): if i != j and is_palindrome(words[i] + words[j]): result.append((i + 1, j + 1)) if not result: return \\"No palindrome pairs found\\" return result"},{"question":"A popular daily coding challenge platform has launched a new type of problem called \\"Mountain Sum.\\" In this problem, an array of integers `a` is given, and you need to find a specific type of subarray called a \\"mountain subarray.\\" A mountain subarray is defined as a subarray that first strictly increases to a peak value and then strictly decreases. The length of a mountain subarray must be at least 3. The objective is to find the length of the longest mountain subarray in the given array. If there is no mountain subarray, return 0. # Input - An integer `n`, representing the length of the array (1 ≤ n ≤ 100,000). - An array `a` of `n` integers, where each integer `ai` (1 ≤ ai ≤ 10^4) represents a value in the array. # Output - A single integer representing the length of the longest mountain subarray. # Example Input ``` 9 2 1 4 7 3 2 5 6 7 ``` Output ``` 5 ``` Explanation The longest mountain subarray is `1 4 7 3 2`, which has a length of 5. # Example Input ``` 5 2 2 2 2 2 ``` Output ``` 0 ``` Explanation There is no mountain subarray in this input. # Constraints - Consider the array to be 1-indexed for easier understanding, but the provided array and index will be 0-indexed. # Note For maximum efficiency, aim to solve this problem with a time complexity of O(n).","solution":"def longest_mountain_subarray(n, a): Function to find the length of the longest mountain subarray. Parameters: - n: int, length of the array - a: list of int, the array Returns: - int, length of the longest mountain subarray if n < 3: return 0 longest_mountain = 0 i = 1 while i <= n - 2: # Check if a[i] is a peak if a[i - 1] < a[i] > a[i + 1]: left = i - 1 right = i + 1 # Expand to the left while left > 0 and a[left - 1] < a[left]: left -= 1 # Expand to the right while right < n - 1 and a[right + 1] < a[right]: right += 1 # Record the length of the mountain mountain_length = right - left + 1 longest_mountain = max(longest_mountain, mountain_length) # Move the index to the end of the current mountain i = right else: i += 1 return longest_mountain"},{"question":"You are given an array of n integers. Your task is to find two numbers in the array such that their sum is closest to zero. Consider the array may contain both negative and positive integers. -----Input----- The first line contains a single positive integer n (2 ≤ n ≤ 10^5) — the number of integers. The second line contains n integers a_1, a_2, ..., a_{n} (-10^9 ≤ a_{i} ≤ 10^9). -----Output----- Print two integers a and b such that the absolute value of their sum is closest to zero. If there are multiple answers, print any of them. -----Examples----- Input 5 -1 2 3 -4 5 Output -1 2 Input 6 -10 15 27 -4 30 6 Output -4 6 Input 3 1 -1 2 Output 1 -1","solution":"def find_two_closest_to_zero(arr): Finds two numbers in the array such that their sum is closest to zero. arr.sort() left, right = 0, len(arr) - 1 closest_sum = float(\'inf\') closest_pair = (arr[left], arr[right]) while left < right: current_sum = arr[left] + arr[right] if abs(current_sum) < abs(closest_sum): closest_sum = current_sum closest_pair = (arr[left], arr[right]) if current_sum < 0: left += 1 else: right -= 1 return closest_pair"},{"question":"In this problem you will be managing a queue system with some operations. You will be given a set of operations and you need to execute them in the order they are given. The operations can either add an element to the queue or remove the front element from the queue. You have to print the current state of the queue after each operation. The operations are as follows: - \\"ENQUEUE x\\": Adds the integer x to the back of the queue. - \\"DEQUEUE\\": Removes the integer at the front of the queue (if the queue is not empty). Input The first line of the input will contain T (number of test cases). Each test case will start with an integer N (number of operations) followed by N lines describing each operation. Output For each test case, output the state of the queue after each operation in a new line. If a DEQUEUE operation is performed on an empty queue, simply output \\"EMPTY QUEUE\\". Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ x ≤ 1000 SAMPLE INPUT 1 5 ENQUEUE 10 ENQUEUE 20 DEQUEUE DEQUEUE DEQUEUE SAMPLE OUTPUT 10 10 20 20 EMPTY QUEUE EMPTY QUEUE Explanation - After \\"ENQUEUE 10\\", the queue is [10]. - After \\"ENQUEUE 20\\", the queue is [10, 20]. - After \\"DEQUEUE\\", 10 is removed, queue is [20]. - After \\"DEQUEUE\\", 20 is removed, queue is empty. - After \\"DEQUEUE\\", queue is still empty, so output \\"EMPTY QUEUE\\".","solution":"from collections import deque def process_operations(T, operations): results = [] for i in range(T): queue = deque() current_ops = operations[i] for op in current_ops: if op.startswith(\\"ENQUEUE\\"): _, val = op.split() queue.append(int(val)) elif op == \\"DEQUEUE\\": if queue: queue.popleft() else: results.append(\\"EMPTY QUEUE\\") continue # If under DEQUEUE in non-empty/successful ENQUEUE case, append the current queue state if queue: results.append(\\" \\".join(map(str, queue))) else: results.append(\\"EMPTY QUEUE\\") return results"},{"question":"Given a set of N integers and Q range queries, your task is to compute the sum of the integers in given ranges efficiently. You will be provided with an array A of N integers, followed by Q queries. Each query will specify a range [L, R] (1-based index) and you need to return the sum of the elements A[L] + A[L+1] + ... + A[R]. # Constraints - 1 leq N leq 100,000 - 1 leq Q leq 100,000 - 1 leq A[i] leq 1,000 - 1 leq L leq R leq N # Input The input is given in the following format: ``` N Q A[1] A[2] ... A[N] L_1 R_1 L_2 R_2 : L_Q R_Q ``` # Output For each query, output the sum of the elements in the specified range on a new line. # Example Input ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 ``` Output ``` 6 9 15 ``` # Explanation For the input provided: - The first query asks for the sum of elements from index 1 to 3: 1 + 2 + 3 = 6 - The second query asks for the sum of elements from index 2 to 4: 2 + 3 + 4 = 9 - The third query asks for the sum of elements from index 1 to 5: 1 + 2 + 3 + 4 + 5 = 15 You need to process the queries efficiently to ensure your solution performs well within the given constraints.","solution":"def precompute_prefix_sums(array): Precompute the prefix sums of the input array. prefix_sums = [0] * (len(array) + 1) for i in range(1, len(array) + 1): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] return prefix_sums def range_sum(prefix_sums, L, R): Calculate the sum of the range [L, R] using the prefix sums array. Note: L and R are 1-based indices. return prefix_sums[R] - prefix_sums[L - 1] def process_queries(N, Q, array, queries): prefix_sums = precompute_prefix_sums(array) results = [] for (L, R) in queries: sum_result = range_sum(prefix_sums, L, R) results.append(sum_result) return results"},{"question":"Samuel loves collecting coins. He recently found a unique box of coins that contains coins of various denominations. Samuel wants to know the minimum number of coins he needs to make exactly a certain amount of money from the box. Can you help him devise a program to find this out? INPUT: an integer T (1 ≤ T ≤ 100) : number of testcases Each test case consists of: 1. an integer M (1 ≤ M ≤ 100) representing the total amount of money he wants to make. 2. an integer K (1 ≤ K ≤ 100) representing the number of different denominations of coins available in the box. 3. K integers (1 ≤ Ci ≤ 1000) representing the values of each denomination. OUTPUT: For each test case, output the minimum number of coins required to make the amount M. If it is not possible to make that amount, output -1. SAMPLE INPUT 2 11 3 1 2 5 30 4 2 3 7 10 SAMPLE OUTPUT 3 3 Explanation In the first test case, the amount is 11 and the denominations are {1, 2, 5}. The minimum number of coins required are (5 + 5 + 1) = 11. In the second test case, the amount is 30 and the denominations are {2, 3, 7, 10}. The minimum number of coins required are (10 + 10 + 10) = 30.","solution":"def min_coins(T, test_cases): Returns the minimum number of coins needed to make each amount of money for the test cases. If it is not possible to make that amount, returns -1 for that test case. Args: T (int): Number of test cases. test_cases (list): List of tuples (M, K, denominations) Returns: List: List of minimum number of coins for each test case. results = [] for case in test_cases: M, K, denominations = case dp = [float(\'inf\')] * (M + 1) dp[0] = 0 for coin in denominations: for x in range(coin, M + 1): dp[x] = min(dp[x], dp[x - coin] + 1) results.append(dp[M] if dp[M] != float(\'inf\') else -1) return results # Example usage T = 2 test_cases = [ (11, 3, [1, 2, 5]), (30, 4, [2, 3, 7, 10]) ] print(min_coins(T, test_cases)) # Output: [3, 3]"},{"question":"You are given a tree consisting of N nodes numbered from 1 to N. Each node has a value associated with it. Your task is to perform Q queries on this tree. Each query is of the form: 1. \\"1 u\\" - Find the sum of values of all nodes in the subtree rooted at node u. 2. \\"2 u x\\" - Update the value of node u to x. When performing the first type of query, you need to output the sum of values of all nodes in the subtree rooted at u. For the second type of query, you need to update the value of node u to x and make sure that subsequent queries take this modification into account. Input - The first line contains an integer N, the number of nodes in the tree. - The second line contains N integers, where the i-th integer is the value of node i. - The next N-1 lines each contain two integers u and v, denoting an edge between nodes u and v. - The next line contains an integer Q, the number of queries. - The next Q lines each contain a query of one of the two forms: - \\"1 u\\" (without quotes) - \\"2 u x\\" (without quotes) Output For each query of the form \\"1 u\\", print the sum of values of all nodes in the subtree rooted at node u. Constraints - 1 ≤ N, Q ≤ 100000 - 1 ≤ value of each node ≤ 1000 - 1 ≤ u, v ≤ N - 1 ≤ x ≤ 1000 Example Input: 5 1 2 3 4 5 1 2 1 3 2 4 2 5 3 1 1 2 3 10 1 3 Output: 15 10 Explanation: The tree looks like this: ``` 1 / 2 3 / 4 5 ``` Initially, the sum of all nodes in the subtree rooted at node 1 is 1+2+3+4+5 = 15. After updating node 3\'s value to 10, the tree becomes: ``` 1 / 2 10 / 4 5 ``` The sum of all nodes in the subtree rooted at node 3 is now 10+4+5 = 19.","solution":"class TreeQuerySystem: def __init__(self, n, values, edges): self.n = n self.values = values self.edges = edges self.tree = [[] for _ in range(n+1)] self.subtree_sum_cache = [-1] * (n+1) for u, v in edges: self.tree[u].append(v) self.tree[v].append(u) self.build_subtree_sum_cache() def build_subtree_sum_cache(self): self.visited = [False] * (self.n + 1) self.dfs(1) def dfs(self, node): self.visited[node] = True subtree_sum = self.values[node-1] for child in self.tree[node]: if not self.visited[child]: subtree_sum += self.dfs(child) self.subtree_sum_cache[node] = subtree_sum return subtree_sum def update_value(self, u, x): delta = x - self.values[u-1] self.values[u-1] = x self.update_subtree_sum(u, delta) def update_subtree_sum(self, u, delta): self.visited = [False] * (self.n + 1) self.dfs_update(u, delta) def dfs_update(self, node, delta): self.visited[node] = True self.subtree_sum_cache[node] += delta for child in self.tree[node]: if not self.visited[child]: self.dfs_update(child, delta) def query_subtree_sum(self, u): return self.subtree_sum_cache[u] def process_queries(n, values, edges, queries): tq_system = TreeQuerySystem(n, values, edges) results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": u = int(parts[1]) results.append(str(tq_system.query_subtree_sum(u))) elif parts[0] == \\"2\\": u, x = int(parts[1]), int(parts[2]) tq_system.update_value(u, x) return \\"n\\".join(results)"},{"question":"You are given an integer N denoting the length of a sequence. Your task is to find and print a permutation of the sequence from 1 to N such that: 1. The absolute difference between adjacent elements of the permutation is maximized. 2. Each integer between 1 and N appears exactly once in the sequence. Input: A single integer N (1 ≤ N ≤ 100,000). Output: A single line containing the permutation of the sequence from 1 to N. Example: Input: 5 Output: 1 5 2 4 3","solution":"def maximize_absolute_difference(N): Returns a permutation of the sequence from 1 to N that maximizes the absolute difference between adjacent elements. result = [] left, right = 1, N while left <= right: if left <= right: result.append(left) left += 1 if left <= right: result.append(right) right -= 1 return result"},{"question":"Rebecca has recently started exploring the exciting world of data streams and is fascinated by the complex operations that can be performed on them in real-time. She came across a challenging problem related to the frequency of elements in a stream that she couldn\'t solve herself and has turned to you for help. Given a stream of integers, you are required to answer two types of queries: 1. Update the value at a specific position in the stream. 2. Find the frequency of a given integer in a specified range of the stream. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the stream and the number of queries, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the initial state of the stream. Each of the following q lines describes a query in one of the following formats: - 1 i x — Update the value at position i with x (1 ≤ i ≤ n, 1 ≤ x ≤ 10^6). - 2 l r x — Find the frequency of integer x in the range [l, r] (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^6). Output For each query of the second type, output the frequency of the integer x in the specified range. Examples Input 6 5 1 2 1 3 2 1 2 1 6 1 1 3 2 2 1 6 1 2 1 4 2 2 3 5 3 Output 3 2 1 1 Note In the first test case: - The initial stream is: [1, 2, 1, 3, 2, 1] - The frequency of 1 in the entire range is 3. - After updating the value at position 3 to 2, the stream becomes: [1, 2, 2, 3, 2, 1]. - The frequency of 1 in the entire range is now 2. - The frequency of 2 in the first four positions is 1. - The frequency of 3 in positions 3 to 5 is 1.","solution":"def update_stream(stream, index, value): stream[index - 1] = value def find_frequency_in_range(stream, left, right, value): return stream[left-1:right].count(value) def process_queries(n, q, stream, queries): results = [] for query in queries: if query[0] == 1: _, index, value = query update_stream(stream, index, value) elif query[0] == 2: _, left, right, value = query freq = find_frequency_in_range(stream, left, right, value) results.append(freq) return results"},{"question":"Lena is fond of playing with numbers and sequences. One day she came across a very interesting problem involving the manipulation of sequences. You are given a sequence of n integers, and you need to perform a series of operations on it. In each operation, you select two consecutive elements and replace them with their sum or their difference, keeping only the smaller one. This operation is repeated until only one element remains. Lena wants to know the smallest possible value of the last remaining element after performing these operations optimally. You are required to help Lena by determining the minimum possible value of the final element. -----Input----- The first line contains an integer n (2 ≤ n ≤ 100) — the number of elements in the sequence. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the elements of the sequence. -----Output----- Output the minimum possible value of the last remaining element. -----Examples----- Input 4 1 2 3 4 Output 0 Input 3 -5 7 -3 Output -5 -----Note----- In the first example, the optimal sequence of operations would be: 1. Choose (1, 2) and replace with their difference 1 - 2 = -1 --> [-1, 3, 4] 2. Choose (-1, 3) and replace with their sum -1 + 3 = 2 --> [2, 4] 3. Choose (2, 4) and replace with their difference 2 - 4 = -2 --> [-2] In the final example, the optimal sequence of operations would be: 1. Choose (-5, 7) and replace with their difference -5 - 7 = -12 --> [-12, -3] 2. Choose (-12, -3) and replace with their difference -12 - (-3) = -9 --> [-9] Thus, the minimum possible value for the last remaining element is -5 and -9, respectively.","solution":"def min_final_element(n, a): Returns the minimum possible value of the last remaining element after performing the described operations optimally on the sequence of n integers a. # Let\'s determine the minimum possible value of the last remaining element if n % 2 == 0: return 0 else: return min(a) # Sample usage # n = 4 # a = [1, 2, 3, 4] # output: 0"},{"question":"You are given an array of n integers and your task is to reorder the array such that every even-indexed element is greater than its adjacent odd-indexed elements. Formally, for an array a of length n, you need to reorder the elements such that for every i where 0 le i < n, the following conditions hold: - If i is even, then a[i] > a[i-1] if i-1 exists and a[i] > a[i+1] if i+1 exists. - If i is odd, then there are no additional constraints. If there are multiple solutions, you can output any of them. ----Input---- The first line of the input contains an integer n (1 le n le 10^5), the length of the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), the elements of the array. ----Output---- Print the reordered array of n integers such that the even-indexed elements are greater than their adjacent odd-indexed elements. If there are multiple answers, print any. ----Examples---- Input 6 4 1 7 8 2 3 Output 7 1 4 2 8 3 Input 5 10 20 30 40 50 Output 30 20 50 10 40 Input 4 1 2 3 4 Output 3 2 4 1","solution":"def reorder_array(n, arr): # Sort the array first to facilitate reorganizing arr.sort() # Create new array to store result res = [0] * n # Place the largest numbers at even indexes index = n - 1 for i in range(0, n, 2): res[i] = arr[index] index -= 1 # Place the remaining numbers at odd indexes for i in range(1, n, 2): res[i] = arr[index] index -= 1 return res # Example Run n = 6 arr = [4, 1, 7, 8, 2, 3] print(reorder_array(n, arr)) # Output may vary; one example is [7, 1, 4, 2, 8, 3]"},{"question":"The airline company wants to optimize their flight schedule. A flight schedule is a collection of departure and arrival times for all flights. The company needs to minimize the total idle time of planes standing at airports without flying. For this purpose, the company managers want to find out the maximum number of non-overlapping flights that can be scheduled. Given the departure and arrival times of multiple flights, write a program to find the maximum number of non-overlapping flights. ------ Input ------ The first line contains a single integer T denoting the number of test cases. Then, T test cases follow. The first line of each test case contains a single integer N denoting the number of flights. The next N lines describe a flight: Each line contains two space-separated integers D_i and A_i where D_i is the departure time and A_i is the arrival time of the i-th flight. ------ Output ------ For each test case, output a single integer that tells the maximum number of non-overlapping flights that can be scheduled. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ D_i < A_i ≤ 10^9 ----- Sample Input 1 ----- 2 3 1 3 2 4 3 5 4 4 5 1 3 3 7 5 6 ----- Sample Output 1 ----- 2 3","solution":"def max_non_overlapping_flights(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] flights = test_cases[t][1] # Sort flights by their arrival times flights.sort(key=lambda x: x[1]) max_flights = 0 current_end_time = 0 for flight in flights: departure, arrival = flight if departure >= current_end_time: max_flights += 1 current_end_time = arrival results.append(max_flights) return results"},{"question":"Given an integer array `A` of length `N` and an integer `K`, determine if it is possible to find a non-empty contiguous subarray such that the sum of the elements in the subarray is divisible by `K`. ------ Input: ------ The first line contains a single integer `T`, the number of test cases. The next `T` lines describe the test cases. Each test case is described using two lines: - The first line contains the integers `N` (length of the array) and `K`. - The second line contains `N` space-separated integers representing the elements of the array `A`. ------ Output: ------ For each test case, output \\"YES\\" if there exists a contiguous subarray satisfying the conditions, and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^6 ≤ A[i] ≤ 10^6 Note: Sum of N over all test cases does not exceed 10^6. ----- Sample Input 1 ------ 2 5 6 1 2 3 4 5 5 3 1 2 3 4 5 ----- Sample Output 1 ------ YES YES ----- Explanation 1 ------ In the first test case: A subarray [1, 2, 3] sums to 6 which is divisible by 6. In the second test case: A subarray [3] sums to 3 which is divisible by 3.","solution":"def is_subarray_sum_divisible(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] A = test_cases[i][1] if K == 0: results.append(\\"NO\\") continue prefix_sums = {} current_sum = 0 for num in A: current_sum += num mod = current_sum % K if mod == 0: results.append(\\"YES\\") break if mod in prefix_sums: results.append(\\"YES\\") break prefix_sums[mod] = True else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers, write a function `findDuplicates` that returns an array of all the integers that appear more than once in the input array. You must write an algorithm that runs in O(n) time and uses O(1) extra space. Example 1: Input: [4,3,2,7,8,2,3,1] Output: [2,3] Example 2: Input: [1,1,2] Output: [1] Example 3: Input: [1] Output: [] Note: The returned array should be in ascending order and if no duplicates are found, an empty array should be returned.","solution":"def findDuplicates(nums): Given a list of integers, this function returns a list of duplicated integers found in the input list. Running time: O(n) Extra Space: O(1) Parameters: nums (List[int]): List of integers Returns: List[int]: List of integers that appear more than once duplicates = [] for num in nums: index = abs(num) - 1 if nums[index] < 0: duplicates.append(abs(num)) else: nums[index] = -nums[index] return sorted(duplicates)"},{"question":"Write a function that takes a list of integers and returns a new list containing the squares of only the unique even numbers from the original list. For example, given the input `[4, 4, 7, 2, 3, 8, 6, 6, -2, -8, -8]`, the function should return `[16, 4, 64, 36, 4, 64]`. Note that the result retains the order of the first appearance of each number in the original list. ~~~if:r ```r # in R, returns a numeric vector solution(c(4, 4, 7, 2, 3, 8, 6, 6, -2, -8, -8)) [1] 16 4 64 36 4 64 class(solution(c(4, 4, 7, 2, 3, 8, 6, 6, -2, -8, -8))) [1] \\"numeric\\" ``` ~~~","solution":"def squares_of_unique_evens(lst): Takes a list of integers and returns a new list containing the squares of only the unique even numbers. :param lst: A list of integers :return: A list of squares of unique even numbers maintaining order from first appearance seen = set() result = [] for num in lst: if num % 2 == 0 and num not in seen: seen.add(num) result.append(num ** 2) return result"},{"question":"Tom is a budding software engineer who has decided to develop a simple encrypted messaging application for fun. To start with, he wants to implement a basic encryption mechanism where each character in the message is shifted by a fixed number of positions in the alphabet. This technique is known as the Caesar cipher. Tom is aware that the alphabet wraps around, so after \'z\' comes \'a\' again. He wants you to help him write the function that takes an input string and an integer key, then outputs the encrypted message. -----Input----- The first line contains a string s (1 ≤ |s| ≤ 100), where |s| is the length of the string. The string consists only of lowercase English letters. The second line contains an integer k (0 ≤ k ≤ 25), which represents the fixed number of positions each character in the string should be shifted. -----Output----- Output the encrypted version of the input string. -----Examples----- Input hello 3 Output khoor Input xyz 4 Output bcd Input abc 0 Output abc Input apple 26 Output apple -----Note----- In the first example, each letter in \\"hello\\" is shifted by 3 positions: \'h\' becomes \'k\', \'e\' becomes \'h\', \'l’ becomes \'o\', and \'o\' becomes \'r\'. Thus, \\"hello\\" becomes \\"khoor\\". In the second example, \'x\' becomes \'b\', \'y\' becomes \'c\', and \'z\' becomes \'d\' after wrapping around, thus \\"xyz\\" becomes \\"bcd\\". In the third example, since k is 0, the string remains the same. In the fourth example, the key 26 is the length of the alphabet, so the string remains unchanged.","solution":"def caesar_cipher(s, k): Encrypts the input string using a Caesar cipher with a fixed shift k. :param s: str, the input string consisting of lowercase English letters. :param k: int, the fixed number of positions each character should be shifted. :return: str, the encrypted message. result = [] for char in s: new_char = chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\')) result.append(new_char) return \\"\\".join(result)"},{"question":"You are given a list of non-negative integers which represents the amount of money of n houses aligned in a row. A thief wants to rob these houses, but he cannot rob adjacent houses because the security systems will alert the police. Given the list of amounts, determine the maximum amount of money the thief can rob without triggering the alarms. Write a program that takes the number of test cases and the list of amounts for each test case as input and outputs the maximum amount of money that can be robbed for each test case. Input: First line contains an integer T, the number of test cases. Each test case starts with an integer n, the number of houses, followed by n space-separated non-negative integers representing the amount of money in each house. Output: For each test case, print the maximum amount of money that can be robbed. Constraints: 1 ≤ T ≤ 50 0 ≤ n ≤ 100 0 ≤ amount in each house ≤ 1000 Note: If there are no houses, the maximum amount of money that can be robbed is 0. SAMPLE INPUT 3 4 1 2 3 1 5 2 7 9 3 1 3 2 1 1 SAMPLE OUTPUT 4 12 3","solution":"def rob(nums): Calculate the maximum amount of money that can be robbed without robbing two consecutive houses. if not nums: return 0 if len(nums) == 1: return nums[0] prev1 = 0 prev2 = 0 for num in nums: temp = prev1 prev1 = max(prev2 + num, prev1) prev2 = temp return prev1 def max_money_robbed(test_cases): results = [] for nums in test_cases: results.append(rob(nums)) return results def parse_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] for i in range(1, T + 1): nums = list(map(int, lines[i].split())) n = nums[0] # ignore number of houses as we can use the length of list test_cases.append(nums[1:]) return test_cases"},{"question":"Write a function that finds all the permutations of a string S. The function should avoid generating duplicate permutations if the string contains duplicate characters. Constraints * The length of S will be between 1 and 9 inclusive. * S will consist only of capital letters `A` to `Z`. Input The input is given in the following format. S Output Print all unique permutations of the given string in lexicographical order. Each permutation should be printed on a new line. Example 1 Input AAB Output AAB ABA BAA Example 2 Input ABC Output ABC ACB BAC BCA CAB CBA","solution":"from itertools import permutations def find_permutations(S): Generates all unique permutations of the string S in lexicographical order. Parameters: S (str): The input string consisting of capital letters A to Z. Returns: List[str]: A list of all unique permutations in lexicographical order. unique_permutations = sorted(set(\'\'.join(p) for p in permutations(S))) return unique_permutations"},{"question":"In a large software company, the manager wants to keep track of the programming tasks assigned to various teams. Each team consists of multiple developers, and each task can be worked on by one team at most, but a team can work on multiple tasks. To keep things organized, the manager identified two types of programming tasks: dependent tasks and independent tasks. For any dependent task, it must be completed only after all its prerequisite tasks are done. Independent tasks can be completed at any time. The manager decided to write a program to sort and manage the tasks effectively, maintaining the order due to dependencies. -----Input----- The input starts with a single integer t (1 leq t leq 1000), the number of tasks. Each of the next t lines describes a task with three fields: - A string ID (1 leq |ID| leq 10), the unique ID of the task. - A string Type, which is either \\"dependent\\" or \\"independent\\". - A list of space-separated strings (unique task IDs) representing the prerequisite tasks; this list will be empty for independent tasks. It is guaranteed that the total number of characters in all task IDs combined will not exceed 10^5, and there will be no circular dependencies. -----Output----- Output the tasks in the order they can be completed, maintaining any dependencies. If multiple tasks can be completed at the same time, output them in lexicographical order based on their IDs. If it is impossible to complete all tasks, output “IMPOSSIBLE”. -----Examples----- Sample Input 1: 5 task1 dependent task2 task2 independent task3 dependent task1 task2 task4 independent task5 dependent task4 task1 Sample Output 1: task2 task4 task1 task3 task5 Sample Input 2: 3 a independent b dependent a c dependent b Sample Output 2: a b c Sample Input 3: 4 taskA independent taskB dependent taskA taskC dependent taskB taskD dependent taskC taskB Sample Output 3: taskA taskB taskC taskD Sample Input 4: 3 x independent y dependent x z dependent x y Sample Output 4: x y z","solution":"def order_tasks(t, tasks): from collections import defaultdict, deque # Task graph and in-degree map initialization graph = defaultdict(list) in_degree = defaultdict(int) # Parsing and building the graph for task in tasks: task_id, task_type, *prerequisites = task.split() if task_type == \'dependent\': for prereq in prerequisites: graph[prereq].append(task_id) in_degree[task_id] += 1 in_degree[task_id] # Ensure that all tasks are in the in_degree dictionary # Queue initialization with all independent tasks or those with zero in-degree queue = deque(sorted([task for task in in_degree if in_degree[task] == 0])) ordered_tasks = [] # Topological sort using Kahn\'s algorithm while queue: current = queue.popleft() ordered_tasks.append(current) for neighbor in sorted(graph[current]): # ensures lexicographical order in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Check if we have processed all tasks if len(ordered_tasks) == len(in_degree): return ordered_tasks else: return [\\"IMPOSSIBLE\\"] # Parse the input def main(): import sys input = sys.stdin.read data = input().splitlines() t = int(data[0]) tasks = data[1:t + 1] result = order_tasks(t, tasks) print(\' \'.join(result)) if __name__ == \\"__main__\\": main()"},{"question":"A programming competition is taking place, and n participants are taking part in it. Each participant has a unique skill rating, which is an integer value. The competition is structured in such a way that each round eliminates participants based on their skill ratings: in each round, the participants with the smallest skill rating is eliminated. Given the initial skill ratings of all participants, you are to simulate the competition and determine the skill rating of the 1st, 2nd, and 3rd place participants. If there are fewer than three participants, output the skill rating of all remaining participants in decreasing order of their placement (1st, 2nd, etc.). Input The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the number of participants. The second line contains n integers — the skill ratings of the participants. All skill ratings are unique, and they range from 1 to 10^9. Output Output up to three integers in decreasing order corresponding to the skill ratings of the 1st, 2nd, and 3rd place participants, respectively. Examples Input 5 8 2 5 1 7 Output 8 7 5 Input 2 10 20 Output 20 10 Input 3 7 8 5 Output 8 7 5 Note In the first example, the participants with skill ratings 1 and 2 are eliminated, then the participants with ratings 5, 7, and 8 compete for 1st, 2nd, and 3rd place respectively, with 8 being the 1st, 7 being the 2nd, and 5 being the 3rd.","solution":"def determine_top_three_participants(n, skill_ratings): Determines the skill ratings of the 1st, 2nd, and 3rd place participants. If fewer than three participants, outputs the skill ratings of all remaining participants in decreasing order of placement. Args: n : int : Number of participants skill_ratings: list of int : Skill ratings of the participants Returns: list of int : Skill ratings of the top three participants or fewer, in decreasing order of their placement. # Sort skill ratings in decreasing order sorted_ratings = sorted(skill_ratings, reverse=True) # Return the top three ratings or fewer if less than three participants return sorted_ratings[:3]"},{"question":"You are given an array a of n integers and an integer w. You need to calculate the maximum sum of w consecutive elements in the array and the number of different segments of length w that achieve this maximum sum. Input The first line contains one integer n (1 ≤ n ≤ 100000). The second line contains n integers: a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6). The third line contains one integer w (1 ≤ w ≤ n). Output Output two integers: the maximum sum of w consecutive elements and the number of different segments of length w that have this maximum sum. Examples Input: 10 1 2 3 4 5 6 7 8 9 10 3 Output: 27 1 Input: 5 5 -2 2 8 -1 2 Output: 10 1 Input: 8 1 1 1 1 1 1 1 1 2 Output: 2 7","solution":"def max_sum_segments(arr, w): Returns the maximum sum of w consecutive elements and the number of such segments achieving this sum. n = len(arr) if w == 0 or n == 0: return 0, 0 # Calculate the sum of the first segment of length w current_sum = sum(arr[:w]) max_sum = current_sum count = 1 # Iterate through the array to find sums of all segments of length w for i in range(w, n): current_sum = current_sum - arr[i - w] + arr[i] if current_sum > max_sum: max_sum = current_sum count = 1 elif current_sum == max_sum: count += 1 return max_sum, count"},{"question":"A popular movie streaming service is analyzing user viewing habits to improve its recommendation algorithm. The service has recorded the viewing patterns of its users for a particular series. Each user watches specific episodes over some days, and the service wants to identify trends in these patterns. You are tasked with writing a program to determine the longest sequence of consecutive episodes any user has watched without skipping any episodes in between. -----Input----- The input consists of: - one line containing the integer u (1 le u le 10^3), the number of users. - For each user, a line with an integer k (1 le k le 10^2), the number of episodes watched by that user. - This line is followed by k integers representing the episode numbers watched by the user in sorted order (1 le text{episode number} le 10^5). Each episode number is unique and represents the order in which the episode was watched. -----Output----- Output the longest sequence of consecutive episodes watched by any user. -----Examples----- Sample Input 1: 2 5 1 2 3 5 6 3 10 11 12 Sample Output 1: 3 Sample Input 2: 3 6 3 4 5 6 7 8 7 2 3 5 6 7 8 9 4 1 2 3 4 Sample Output 2: 6 Sample Input 3: 1 5 8 9 10 11 12 Sample Output 3: 5","solution":"def longest_consecutive_sequence(users, episodes_list): Returns the length of the longest sequence of consecutive episodes watched by any user. :param users: Number of users. :param episodes_list: List of lists where each inner list contains episode numbers watched by a user. max_len = 0 for episodes in episodes_list: current_len = 1 longest_for_user = 1 for i in range(1, len(episodes)): if episodes[i] == episodes[i-1] + 1: current_len += 1 longest_for_user = max(longest_for_user, current_len) else: current_len = 1 max_len = max(max_len, longest_for_user) return max_len def parse_input(input_data): lines = input_data.strip().split(\'n\') u = int(lines[0]) episodes_list = [] idx = 1 for __ in range(u): k = int(lines[idx]) episodes = list(map(int, lines[idx + 1].split())) episodes_list.append(episodes) idx += 2 return u, episodes_list"},{"question":"Peterson Airlines allocates its flight numbers systematically. Each flight number consists of an airline prefix followed by a unique integer identifier. For instance, \\"PA123\\" could be a valid flight number, where \\"PA\\" is the airline prefix and \\"123\\" is the unique integer identifier. Given a list of flight numbers, Peterson Airlines wants to perform an audit on their system to ensure that no two flights have the same unique integer identifier for the same airline prefix. If duplicate identifiers are found, the airline needs to remove the minimum number of flight numbers to ensure that all remaining flight numbers are unique within their respective prefixes. Your task is to help Peterson Airlines by providing the minimum number of flights that need to be removed. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 100000), the number of flight numbers. The next n lines each contains a flight number consisting of an airline prefix (1 ≤ length ≤ 5) consisting of uppercase English letters only, followed by an integer identifier (1 ≤ identifier ≤ 1000000). -----Output----- Print a single integer, the minimum number of flight numbers that need to be removed to ensure that all remaining flight numbers are unique within their respective prefixes. -----Examples----- Input 5 PA123 PA124 PA123 AA100 AA100 Output 2 Input 4 PA1 PA2 PA3 PA4 Output 0 Input 6 DL100 DL100 DL101 DL102 DL103 DL100 Output 2 -----Note----- In the first example, you need to remove 2 out of the 3 occurrences of \\"PA123\\" to ensure uniqueness. Similarly, you need to remove one of the two occurrences of \\"AA100\\", leading to a total of 2 removals. In the third example, you need to remove 2 out of the 3 occurrences of \\"DL100\\" to ensure uniqueness.","solution":"def min_flight_removals(flight_numbers): This function returns the minimum number of flight numbers that need to be removed to ensure no duplicate flight identifiers within the same airline prefix. from collections import defaultdict flight_count = defaultdict(int) for flight in flight_numbers: flight_count[flight] += 1 removals = 0 for count in flight_count.values(): if count > 1: removals += count - 1 return removals"},{"question":"You are given a list of integers representing the heights of buildings. Your task is to determine the maximum number of buildings that can be seen in a straight line from any single building in two directions: to the left and to the right. A building can see another building if all the buildings between them are shorter. ------ Input ------ - The first line of the input contains an integer N denoting the number of buildings. - The second line contains N space-separated integers h_{1}, h_{2}, ..., h_{N} where h_i is the height of the i-th building. ------ Output ------ Print a single integer — the maximum number of buildings that can be seen from any single building. ------ Constraints ------ 1 ≤ N ≤ 100,000 1 ≤ h_{i} ≤ 1,000,000 for each valid i ------ Sample Input 1 ------ 7 4 2 3 7 8 5 1 ------ Sample Output 1 ------ 4 ------ Explanation ------ From the 4th building (height 7), you can see building 3 (height 3) to the left, building 2 (height 2) to the left, and building 5 (height 8) to the right. Thus, you can see 4 buildings in total from this point. This is the maximum number of buildings that can be seen from any single building.","solution":"def max_buildings_visible(N, heights): def visible_count(index): count = 0 max_height = -float(\'inf\') # Count buildings to the left for i in range(index - 1, -1, -1): if heights[i] > max_height: count += 1 max_height = heights[i] max_height = -float(\'inf\') # Count buildings to the right for i in range(index + 1, N): if heights[i] > max_height: count += 1 max_height = heights[i] return count max_visible = 0 for i in range(N): max_visible = max(max_visible, visible_count(i)) return max_visible"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to transform the string S into a string T such that: 1. T contains only distinct characters. 2. The cost of the transformation is minimized. To transform S into T, you can perform the following operations any number of times: - Remove a character from any position in S. - Replace a character in S with any other lowercase English letter. The cost of transforming S into T is defined as the number of characters removed plus the number of characters replaced. ------ Input ------ The first line of the input contains a single integer N denoting the number of test cases. The description of N test cases follows. Each test case consists of a single line containing the string S. ------ Output ------ For each test case, print a single line containing one integer ― the minimum cost to transform S into T. ------ Constraints ------ 1 leq N leq 10^3 1 leq |S| leq 50 ----- Sample Input 1 ------ 3 aabb abc zzz ----- Sample Output 1 ------ 2 0 2 ----- Explanation 1 ------ Example case 1: We can transform \\"aabb\\" to \\"ab\\" by removing the second \'a\' and the second \'b\'. Thus the cost is 2. Example case 2: The string \\"abc\\" already has all distinct characters, so no operations are needed, and the cost is 0. Example case 3: We can transform \\"zzz\\" to \\"z\\" by removing the second and third \'z\'. Thus the cost is 2.","solution":"def min_cost_to_transform(S): unique_characters = set(S) cost_to_remove = len(S) - len(unique_characters) return cost_to_remove def process_test_cases(test_cases): results = [] for S in test_cases: results.append(min_cost_to_transform(S)) return results"},{"question":"You have been given an array of integers and a target integer. Your task is to determine whether there are two distinct elements in the array whose sum is equal to the target. If such a pair exists, return the indices of the two elements in ascending order. If no such pair exists, return -1. -----Input----- The first line contains two integers n and t (1 ≤ n ≤ 10^5, -10^9 ≤ t ≤ 10^9). The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). -----Output----- If there are two indices i and j such that a_i + a_j = t and i < j, print i and j (1-based indexing). If no such pair exists, print -1. -----Examples----- Input 5 9 2 7 11 15 1 Output 1 2 Input 3 6 3 3 2 Output 1 2","solution":"def find_two_sum_indices(n, t, arr): Returns the 1-based indices of the two elements whose sum is equal to the target t, or -1 if no such pair exists. :param n: Number of elements in the array :param t: Target sum :param arr: List of integers :return: A tuple of (i, j) indices if such a pair exists, else -1 complement_indices = {} for i in range(n): complement = t - arr[i] if complement in complement_indices: return complement_indices[complement] + 1, i + 1 complement_indices[arr[i]] = i return -1"},{"question":"You are given a list of strings and integers. Your task is to process each string, identifying if there are digits embedded within it. If a digit is found, treat it as a separate integer and sort the list (consisting of the extracted integers and the originally provided integers) in ascending order. Finally, output the sorted integers. Input Each input consists of two lines: - The first line contains an integer n, the number of elements in the list (both strings and integers). - The second line contains n space-separated elements, which can be strings containing digits and/or standalone integers. Constraints * 1 ≤ n ≤ 100 * Each string element contains only alphanumeric characters * Each integer is in the range -10^5 to 10^5 Output Print the sorted integers in ascending order. Sample Input 1 5 abc123 98 56 hello45 32 Sample Output 1 32 45 56 98 123 Sample Input 2 4 23 flower99 world1 5 Sample Output 2 1 5 23 99 Explanation In the first example, the integers from the strings \\"abc123\\" and \\"hello45\\" are extracted as 123 and 45 respectively. Along with the provided numbers they are sorted to form the output 32 45 56 98 123. In the second example, integers from the strings \\"flower99\\" and \\"world1\\" are extracted as 99 and 1 respectively. Together with the given numbers they are sorted to form the output 1 5 23 99.","solution":"import re def extract_and_sort_elements(n, elements): Extract integers from strings and sort all integers in ascending order. Args: n (int): Number of elements in the list. elements (list): List of elements containing strings and/or integers. Returns: list: Sorted list of integers. integers = [] for element in elements: # Check if the element is a pure integer if element.isdigit() or (element[0] == \'-\' and element[1:].isdigit()): integers.append(int(element)) else: # Extract digits embedded within strings numbers_found = re.findall(r\'-?d+\', element) for number in numbers_found: integers.append(int(number)) # Sort all the integers integers.sort() return integers"},{"question":"Given a binary tree, your task is to write a function that returns the width of the binary tree at its widest point. The width of a tree is defined by the maximum number of nodes at any level of the binary tree. Input Format You are given a binary tree in the form of a list where each element represents a node. The elements of the list are given in level order traversal of the binary tree where \'null\' refers to the absence of a node. Output Format Return a single integer representing the width of the tree at its widest level. Constraints The number of nodes in the binary tree can range from 1 to 10^4. Example Input [1, 3, 2, 5, 3, null, 9] Example Output 4 Explanation The given binary tree is: ``` 1 / 3 2 / 5 3 9 ``` The maximum width occurs at level 3 with nodes 5, 3, `null`, 9. Therefore, the output is 4.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def list_to_tree(lst): if not lst: return None root = TreeNode(lst[0]) queue = deque([root]) i = 1 while i < len(lst): current = queue.popleft() if lst[i] is not None: current.left = TreeNode(lst[i]) queue.append(current.left) i += 1 if i < len(lst) and lst[i] is not None: current.right = TreeNode(lst[i]) queue.append(current.right) i += 1 return root def width_of_binary_tree(root): if not root: return 0 max_width = 0 queue = deque([(root, 0)]) # (node, index) while queue: level_length = len(queue) _, first_idx = queue[0] for _ in range(level_length): node, idx = queue.popleft() if node.left: queue.append((node.left, 2 * idx)) if node.right: queue.append((node.right, 2 * idx + 1)) _, last_idx = queue[-1] if queue else (None, 0) max_width = max(max_width, last_idx - first_idx + 1) return max_width"},{"question":"You are given two strings s and t containing lower-case alphabets (a-z) and of lengths n and m respectively. Your task is to determine the minimum number of operations required to convert string s into string t. You are allowed to perform the following operations on string s: 1. **Insert a character:** You can insert any character into s. 2. **Delete a character:** You can delete any character from s. 3. **Replace a character:** You can replace any character in s with any character. Write a function to compute the minimum number of operations required. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t test cases contains: 1. The first line contains the string s and the second line contains the string t. It is guaranteed that 1 le n, m le 100 for all test cases. -----Output----- For each test case, print one integer — the minimum number of operations required to convert string s into string t. -----Example----- Input 3 abc yabd sea eat teacher ther Output 2 2 3 ----Note----- In the first example, you can convert \\"abc\\" to \\"yabd\\" with the following operations: - Insert \'y\' at the beginning: \\"yabc\\" - Replace \'c\' with \'d\': \\"yabd\\" In the second example, converting \\"sea\\" to \\"eat\\" requires 2 operations: - Replace \'s\' with \'e\': \\"eea\\" - Replace \'a\' with \'t\': \\"eat\\" In the third example, converting \\"teacher\\" to \\"ther\\" requires 3 operations: - Delete \'a\': \\"techer\\" - Delete \'c\': \\"teher\\" - Delete \'a\' or change \'he\' to \'e\': \\"ther\\"","solution":"def min_operations_to_convert_string(s, t): n, m = len(s), len(t) # Create a DP table. dp = [[0] * (m + 1) for _ in range(n + 1)] # If first string is empty, the only option is to insert all characters of second string. for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[n][m] def process_test_cases(test_cases): results = [] for s, t in test_cases: result = min_operations_to_convert_string(s, t) results.append(result) return results"},{"question":"For the summer vacation, Benny has decided to take up gardening as a new hobby. He purchased a grid of size `n x n` where he plants various flowers. Benny wants to water all the flowers in the grid. However, instead of watering one cell at a time, he can water an entire row or an entire column in one move. In each move, Benny will water a single row or a single column, causing all the flowers in that row or column to be watered. Your task is to determine the minimum number of moves required for Benny to water all the flowers in the grid. -----Input----- - The first line contains an integer `T`, the number of test cases. - The first line of each test case contains a single integer `n` indicating the size of the grid. -----Output----- - For each test case, output a single integer indicating the minimum number of moves required. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 100 -----Example----- Input: 2 2 3 Output: 2 3 -----Explanation----- In the first example, there is a 2x2 grid. Benny can water both rows in 2 moves or both columns in 2 moves. Therefore, the minimum number of moves is 2. In the second example, in a 3x3 grid, Benny needs at least 3 moves to water all rows or all columns as it\'s the optimal solution. Therefore, the minimum number of moves is 3.","solution":"def minimum_watering_moves(T, test_cases): # For each grid size `n`, to water all the flowers we need at least `n` moves. # We can either water all rows or all columns. results = [] for n in test_cases: results.append(n) return results"},{"question":"A 2D grid containing \'1\'s (land) and \'0\'s (water) is given. An island is surrounded by water and formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Write a function that returns the maximum area of an island in the given grid. An island\'s area is the number of \'1\'s in the island. If there is no island, return 0. Example 1: Input: [ [1,1,0,0,0], [1,1,0,0,0], [0,0,0,1,1], [0,0,0,1,1] ] Output: 4 Explanation: The first island in the top-left corner has an area of 4. Example 2: Input: [ [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0] ] Output: 0 Explanation: There are no islands in the grid, so the maximum area is 0. Note: - The grid is at most 50 rows by 50 columns.","solution":"def max_area_of_island(grid): Returns the maximum area of an island in the given 2D grid. if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == 0: return 0 # Mark as visited grid[r][c] = 0 area = 1 # Explore neighbors area += dfs(r + 1, c) area += dfs(r - 1, c) area += dfs(r, c + 1) area += dfs(r, c - 1) return area max_area = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: max_area = max(max_area, dfs(r, c)) return max_area"},{"question":"Little D is fascinated by string transformations and is particularly interested in anagram generation with constraints. He has a string `s` of lowercase English characters and an integer `k` indicating the maximum length of any substring used in the transformation process. Little D wants to know the number of distinct substrings of `s` that can be rearranged (i.e., where an anagram can be made) to form another substring that equals an input string `t`. Input The first line contains an integer k (1 ≤ k ≤ 20). The second line contains the string s (1 ≤ |s| ≤ 10^5), comprised of lowercase English letters. The third line contains the string t (1 ≤ |t| ≤ 10^5), comprised of lowercase English letters and is guaranteed to be a postfix of `s`. Output Print a single integer — the number of distinct substrings of length at most k from `s` that are anagrams to `t`. Examples Input 5 abbcabbc bca Output 2 Input 3 xyzaaxyzz azy Output 1","solution":"from collections import Counter def count_anagram_substrings(k, s, t): Counts the number of distinct substrings of at most length k in string s that can be rearranged to form anagram substrings matching string t. :param k: An integer indicating the maximum length of any substring used in the transformation process. :param s: String consisting of lowercase English characters. :param t: String consisting of lowercase English characters that is a postfix of s. :return: Number of distinct substrings from s of length at most k that can form an anagram of t. result = 0 target_count = Counter(t) n = len(s) for length in range(1, k + 1): seen_substrings = set() for i in range(n - length + 1): substr = s[i:i + length] substr_count = Counter(substr) if substr_count == target_count and substr not in seen_substrings: seen_substrings.add(substr) result += 1 return result"},{"question":"Implement a function that takes a string consisting of lowercase alphabetic characters and spaces, and returns a dictionary. The dictionary should map each unique word in the string to the count of its unique anagram forms that can be generated. An anagram is a rearrangement of the letters of a word to form another word using all the original letters exactly once. Example 1: Input: \\"cat act tac cat\\" Output: {\'cat\': 3} Example 2: Input: \\"listen silent enlist\\" Output: {\'listen\': 3, \'silent\': 3, \'enlist\': 3} Your Task: You do not need to read input or print anything. Write a function countUniqueAnagrams() that takes a string input and returns the required dictionary. Expected Time Complexity: O(n* m log m), where n is the number of words and m is the maximum length of any word. Expected Auxiliary Space: O(n) Constraints: 1. The total length of the string will not exceed 10^5. 2. Each word in the string contains only lowercase alphabetic characters and spaces. 3. Words are separated by a single space.","solution":"from collections import defaultdict def countUniqueAnagrams(string): Returns a dictionary mapping each unique word to the count of its unique anagram forms. words = string.split() anagram_groups = defaultdict(set) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_groups[sorted_word].add(word) result = {} for anagram_set in anagram_groups.values(): anagram_count = len(anagram_set) for word in anagram_set: result[word] = anagram_count return result"},{"question":"A factory produces N types of widgets, numbered 1 through N. Each widget type i (1 ≤ i ≤ N) takes T_i units of time to produce. The factory has a certain number of production lines, each of which can produce at most one type of widget at a time. Given M schedules, each describing the widget production requirements for a specific production line, determine whether it is possible to complete all the schedules within a given total number of time units. Each schedule describes a sequence of widgets to be produced on a specific production line. A schedule for production line j (1 ≤ j ≤ M) consists of an ordered list of widgets, and the time required to complete that schedule is the sum of the production times of all widgets in that list. You need to answer Q questions. For each question, given the maximum available time units, determine if it is possible to complete all schedules within that time. If it is possible, return \\"YES\\", otherwise return \\"NO\\". # Input Input is given from Standard Input in the following format: ``` N T_1 T_2 ... T_N M S_1 Description of Schedule 1 Description of Schedule 2 ... Description of Schedule M Q Available Time 1 Available Time 2 … Available Time Q ``` Where: - `N` (1 ≤ N ≤ 100) - the number of widget types. - `T_i` (1 ≤ T_i ≤ 100) - the time units required to produce widget type i. - `M` (1 ≤ M ≤ 10) - the number of production lines. - `S_j` (1 ≤ S_j ≤ 50) - the number of widgets in the j-th schedule. - The description of the j-th schedule is given by a list of S_j integers (1 ≤ Widget Type ≤ N) representing the ordered list of widget types to be produced on production line j. - `Q` (1 ≤ Q ≤ 100) - the number of questions. - Each of the Q subsequent lines contains a single integer representing the maximum available time units. # Output Print Q lines. The i-th line should contain \\"YES\\" if it is possible to complete all schedules within the available time units specified by the i-th question, or \\"NO\\" if it is not possible. # Example Input ``` 3 5 10 15 2 4 1 2 3 1 3 2 3 2 2 60 100 ``` Output ``` NO YES ``` Explanation - The first schedule for production line 1 takes 5+10+15+5 = 35 time units. - The second schedule for production line 2 takes 10+15+10 = 35 time units. - The total time required for all schedules is 35 + 35 = 70 time units. In the first question, the available time units are 60, which is insufficient, so the answer is \\"NO\\". In the second question, the available time units are 100, which is sufficient, so the answer is \\"YES\\".","solution":"def can_complete_all_schedules(N, T, M, schedules, Q, available_times): total_required_time = sum(sum(T[widget-1] for widget in schedule) for schedule in schedules) results = [] for time in available_times: if time >= total_required_time: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Samir loves playing games. One of his favorites involves moving on a 2D grid. The grid is an N times N matrix, and Samir starts in the top-left corner at (1,1). The goal is to reach the bottom-right corner at (N,N). However, there are certain cells in the grid through which Samir cannot pass because they contain obstacles. The allowed moves are either to the right or downward to adjacent cells. Samir wants to know the total number of distinct paths he can take to reach his goal. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of N + 1 lines of input. - The first line of each test case contains an integer N — the size of the grid. - The following N lines contain N integers each (either 0 or 1). A 0 indicates an empty cell through which Samir can pass, and a 1 indicates an obstacle. ------ Output Format ------ For each test case, output on a new line the total number of distinct paths Samir can take to reach (N,N) from (1,1). If no such path exists, output `0`. ------ Constraints ------ 1 ≤ T ≤ 50 2 ≤ N ≤ 100 The matrix contains only the integers 0 and 1. ------ Sample Input 1 ------ 2 3 0 0 0 0 1 0 0 0 0 3 0 1 0 0 1 0 0 0 0 ------ Sample Output 1 ------ 2 1 ------ Explanation 1 ------ Test case 1: Samir can take the following distinct paths: 1. (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) 2. (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) Test case 2: There is only one possible path: 1. (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3)","solution":"def count_paths(grid, N): # DP table for the number of paths to each cell dp = [[0] * N for _ in range(N)] # if starting cell has obstacle, immediately return 0 paths if grid[0][0] == 1: return 0 # Initial position (1,1) -> (0,0) in zero-based index dp[0][0] = 1 # Fill the DP table for i in range(N): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 # obstacle cell else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][N-1] def calculate_paths(test_cases): results = [] for grid, N in test_cases: results.append(count_paths(grid, N)) return results def process_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 grid = [] for i in range(N): grid.append(list(map(int, lines[index + i].split()))) index += N test_cases.append((grid, N)) return test_cases, T def main(input_string): test_cases, T = process_input(input_string) results = calculate_paths(test_cases) return results"},{"question":"Given an array of integers and a target integer k, write a function to find a contiguous sub-array whose sum is equal to k. If there are multiple such sub-arrays, return any one. If no such sub-array exists, return an empty list. Example 1: Input: n = 5, k = 15 arr = [1, 2, 3, 7, 5] Output: [7, 5, 3] Explanation: Sub-array with sum 15 is [7, 5, 3]. Example 2: Input: n = 10, k = 33 arr = [1, 4, 20, 3, 10, 5] Output: [20, 3, 10] Example 3: Input: n = 4, k = 7 arr = [1, 2, 3] Output: [] Explanation: There is no sub-array with sum 7. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findSubarrayWithSum() which takes the array of integers arr, its length n, and the integer k as input parameters, and returns a list representing the sub-array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^5 -10^7 <= arr[i] <= 10^7 -10^7 <= k <= 10^7","solution":"def findSubarrayWithSum(arr, n, k): Finds a contiguous sub-array within arr that sums to k. If multiple sub-arrays exist, returns any one of them. If none exist, returns an empty list. Args: arr: List of integers. n: Length of the array. k: Target sum for the sub-array. Returns: List of integers representing the found sub-array or an empty list if no such sub-array exists. sum_map = {} current_sum = 0 for i in range(n): current_sum += arr[i] if current_sum == k: return arr[:i + 1] if (current_sum - k) in sum_map: return arr[sum_map[current_sum - k] + 1:i + 1] sum_map[current_sum] = i return []"},{"question":"You are given a number of weather stations, each providing temperature readings throughout a day. Your task is to create a program that processes these readings to find the highest and lowest temperature for each station and the average temperature of all stations combined for the day. Each weather station provides multiple readings in the format (station_id, temperature), where station_id identifies the station and temperature is the recorded temperature at that moment. A weather station may report multiple temperatures throughout the day. Input: - The first line of input will contain an integer n, the number of temperature readings. - Each of the next n lines will contain two integers: station_id (1 ≤ station_id ≤ 10000) and temperature (-100 ≤ temperature ≤ 100). Output: - For each weather station, output the station_id, the highest temperature it recorded, and the lowest temperature it recorded. - Output the average temperature across all stations with two decimal precision. The output for each station as well as the average temperature should be printed on separate lines. Input Example: 10 1 23 2 17 1 29 2 20 3 -2 1 25 2 15 3 5 1 22 3 10 Output Example: 1 29 22 2 20 15 3 10 -2 19.40 Explanation: - Weather station 1 recorded the temperatures 23, 29, 25, and 22. The highest is 29 and the lowest is 22. - Weather station 2 recorded the temperatures 17, 20, and 15. The highest is 20 and the lowest is 15. - Weather station 3 recorded the temperatures -2, 5, and 10. The highest is 10 and the lowest is -2. - The average temperature across all stations is calculated as (23 + 17 + 29 + 20 + (-2) + 25 + 15 + 5 + 22 + 10) / 10 = 19.40.","solution":"def process_weather_readings(n, readings): Processes weather readings to find the highest and lowest temperature for each station and the average temperature across all stations. Parameters: n (int): Number of temperature readings. readings (list of tuples): A list where each tuple contains (station_id, temperature). Returns: station_data (list of tuples): For each station, a tuple containing (station_id, highest, lowest). average_temperature (float): The average temperature across all stations with two decimal precision. from collections import defaultdict station_temperatures = defaultdict(list) # Aggregate temperatures by station for station_id, temperature in readings: station_temperatures[station_id].append(temperature) # Calculate highest, lowest for each station and overall average station_data = [] total_temperature = 0 total_readings = 0 for station_id in sorted(station_temperatures): temperatures = station_temperatures[station_id] highest = max(temperatures) lowest = min(temperatures) station_data.append((station_id, highest, lowest)) total_temperature += sum(temperatures) total_readings += len(temperatures) average_temperature = total_temperature / total_readings if total_readings > 0 else 0 return station_data, round(average_temperature, 2) # Example usage (for manual testing): n = 10 readings = [(1, 23), (2, 17), (1, 29), (2, 20), (3, -2), (1, 25), (2, 15), (3, 5), (1, 22), (3, 10)] station_data, average_temp = process_weather_readings(n, readings) for data in station_data: print(data[0], data[1], data[2]) print(\\"%.2f\\" % average_temp)"},{"question":"In a magical garden, there are \\"N\\" flower beds arranged in a straight line, each with a certain number of flowers. Your task is to pick a contiguous segment of flower beds that maximizes the total number of flowers in that segment. You should write a program that, given the number of flower beds and the number of flowers in each bed, finds the maximum sum of flowers for any contiguous subarray. INPUT: The first line contains the number of test cases \\"T\\". \\"T\\" test cases follow. Each test case consists of two lines: - The first line contains one integer \\"N\\" (the number of flower beds). - The second line contains \\"N\\" integers, where each integer represents the number of flowers in a respective flower bed. OUTPUT: For each test case, output a single integer, the maximum number of flowers in any contiguous subarray. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -1000 ≤ Number of flowers in each bed ≤ 1000 SAMPLE INPUT 2 4 1 2 3 4 4 -1 -2 -3 -4 SAMPLE OUTPUT 10 -1","solution":"def max_flowers(T, test_cases): def max_subarray_sum(flowers): max_sum = float(\'-inf\') current_sum = 0 for flower in flowers: current_sum += flower if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum results = [] for i in range(T): N, flowers = test_cases[i] results.append(max_subarray_sum(flowers)) return results"},{"question":"Given a list of integers, your task is to determine the maximum product of any two integers in the list. If the list contains fewer than two integers, return -1. Implement the function `maxProduct(arr)` that takes in a list of integers and returns the maximum product or -1 if the list has fewer than two integers. **Example 1:** Input: arr = [1, 3, 5, 2, 8, 0, -1] Output: 40 Explanation: The maximum product is 8 * 5 = 40. **Example 2:** Input: arr = [2, 4] Output: 8 Explanation: The maximum product is 2 * 4 = 8. **Example 3:** Input: arr = [ -10, -3, 5, 6, -2] Output: 30 Explanation: The maximum product is 6 * 5 = 30. **Example 4:** Input: arr = [1] Output: -1 Explanation: The list contains fewer than two elements. **Your Task:** You do not need to read input or print anything. Your task is to complete the function `maxProduct(arr)` which accepts a list of integers `arr` as input parameter and returns an integer representing the maximum product of any two integers. **Expected Time Complexity:** O(n) **Expected Auxiliary Space:** O(1) **Constraints:** - The list should contain integers. - 0 < n < 10^5 (n denotes the number of integers in the list)","solution":"def maxProduct(arr): Returns the maximum product of any two integers in the list. If the list contains fewer than two integers, return -1. if len(arr) < 2: return -1 # Initialize the two largest and two smallest values max1 = max2 = float(\'-inf\') min1 = min2 = float(\'inf\') # Iterate through the list to find the required values for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num # The maximum product can be the product of the two largest numbers # or the product of the two smallest numbers (which could be negative) return max(max1 * max2, min1 * min2)"},{"question":"Problem description. Anna is an avid horticulturist with a passion for maintaining her beautiful garden. She has recently planted a line of N flowers, each with its own beauty value. As part of her garden decoration, she often wants to create a bouquet that maximizes the total beauty value across a specific range of flowers. Given a list of flowers with their respective beauty values, Anna wants to create several bouquets based on different starting and ending positions. For each bouquet, she needs to determine the sum of the beauty values of the flowers included in the specified range [L, R]. Your task is to help Anna compute these sums efficiently for multiple queries. Input: - The first line contains integers N and Q, denoting the number of flowers and number of queries, respectively. - The second line contains N space-separated integers, where the i-th integer denotes the beauty value of the i-th flower. - Each of the next Q lines contains two space-separated integers L and R, representing the starting and ending positions (1-based indices) of a bouquet range. Output: - For each query, print the sum of beauty values of the flowers in the specified range. Constraints: - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 100000 - 1 ≤ beauty value of each flower ≤ 1000 - 1 ≤ L ≤ R ≤ N Example: Input: 7 3 4 3 2 5 6 1 8 2 5 1 7 3 4 Output: 16 29 7","solution":"def compute_beauty_sums(N, Q, beauty_values, queries): # Create the prefix sum array prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + beauty_values[i - 1] result = [] for L, R in queries: result.append(prefix_sums[R] - prefix_sums[L - 1]) return result"},{"question":"You are given a string s and an array of integers indices of the same length. The string s is shuffled such that the character at the ith position moves to indices[i] in the shuffled string. Write a function that returns the shuffled string. Example 1: Input: s = \\"abc\\", indices = [2, 1, 0] Output: \\"cba\\" Explanation: The character \'a\' at index 0 moves to index 2. The character \'b\' at index 1 moves to index 1. The character \'c\' at index 2 moves to index 0. Therefore, the shuffled string is \\"cba\\". Example 2: Input: s = \\"aiohn\\", indices = [3, 1, 4, 2, 0] Output: \\"nihao\\" Explanation: The character \'a\' at index 0 moves to index 3. The character \'i\' at index 1 moves to index 1. The character \'o\' at index 2 moves to index 4. The character \'h\' at index 3 moves to index 2. The character \'n\' at index 4 moves to index 0. Therefore, the shuffled string is \\"nihao\\". Note: The input string s consists of lowercase English letters. The length of s is equal to the length of indices.","solution":"def restore_string(s, indices): Returns the shuffled string based on indices. Args: s (str): The input string. indices (list of int): The indices indicating the final positions of the characters in s. Returns: str: The shuffled string. if len(s) != len(indices): raise ValueError(\\"Length of the string and indices must be the same.\\") # Initialize the result list with the same length as s result = [\'\'] * len(s) # Place each character in the correct position for i, index in enumerate(indices): result[index] = s[i] # Join the list to form the final output string return \'\'.join(result)"},{"question":"You are given a positive integer N. Your task is to print a pattern of size N such that each line i (1 le i le N) consists of the first i prime numbers, separated by spaces. For example, a pattern of size 5 is: 2 2 3 2 3 5 2 3 5 7 2 3 5 7 11 You can\'t take more than two lines. The first line (a for-statement) is already written for you. You have to complete the code using exactly one print statement. Input Format A single line of input containing the integer N. Constraints 0 < N < 10 Output Format Print the pattern of size N as described above. Sample Input 5 Sample Output 2 2 3 2 3 5 2 3 5 7 2 3 5 7 11","solution":"def generate_pattern(N): def is_prime(num): if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True primes = [] num = 2 while len(primes) < N: if is_prime(num): primes.append(num) num += 1 for i in range(1, N + 1): print(\\" \\".join(map(str, primes[:i])))"},{"question":"A librarian has a problem organizing a list of books based on their titles. Given a list of book titles, he wants to reorder them such that the titles appear in a lexicographical order but with a special twist: all titles starting with a vowel should come first (still in lexicographical order), followed by those starting with consonants (also in lexicographical order). Could you help the librarian with this task? -----Input:----- - The first line contains an integer N, the number of book titles. - The next N lines contain one book title each, which is a non-empty string of at most 100 characters. The titles consist of only lowercase alphabets and spaces. -----Output:----- Output the reordered list of book titles, one per line. -----Constraints----- - 1 leq N leq 1000 -----Sample Input:----- 5 silent spring a tale of two cities gone with the wind the great gatsby emma -----Sample Output:----- a tale of two cities emma gone with the wind silent spring the great gatsby","solution":"def reorder_book_titles(titles): vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} vowel_titles = [title for title in titles if title[0] in vowels] consonant_titles = [title for title in titles if title[0] not in vowels] vowel_titles.sort() consonant_titles.sort() return vowel_titles + consonant_titles # If we had input and output, usage would be like: # titles = [\\"silent spring\\", \\"a tale of two cities\\", \\"gone with the wind\\", \\"the great gatsby\\", \\"emma\\"] # reordered_titles = reorder_book_titles(titles) # for title in reordered_titles: # print(title)"},{"question":"Given a n times n grid that represents a maze with some obstacles, find the shortest path from the top-left corner to the bottom-right corner. The grid will have cells marked as either 0 or 1. Cells marked with 1 are passable and can be moved through, while cells marked with 0 are obstacles and cannot be traversed. You can only move up, down, left, or right. The following shows an example maze from the input maze grid: Input: ``` maze = [ [1, 0, 0, 0], [1, 1, 0, 1], [0, 1, 0, 0], [1, 1, 1, 1], ] ``` Output: ``` [ [1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 0, 0], [0, 1, 1, 1], ] ``` Function Description Complete the function `find_shortest_path` in the editor below. It should return an array of arrays representing the maze with the shortest path highlighted. find_shortest_path has the following parameter(s): - `maze`: a 2D array of integers representing the input maze of size n times n. Input Format The input is a 2D array `maze` where `maze[i][j]` is either 0 or 1. Constraints 2 leq n leq 10 Output Format Return the 2D array representing the maze with the shortest path marked with 1s and all other cells marked as they were in the input. Note that if there are multiple shortest paths, returning any one of them is acceptable. Sample Input 0 ``` [ [1, 0, 0, 0], [1, 1, 0, 1], [0, 1, 0, 0], [1, 1, 1, 1] ] ``` Sample Output 0 ``` [ [1, 0, 0, 0], [1, 1, 0, 0], [0, 1, 0, 0], [0, 1, 1, 1] ] ```","solution":"from collections import deque def find_shortest_path(maze): n = len(maze) if maze[0][0] == 0 or maze[n - 1][n - 1] == 0: return [] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, [(0, 0)])]) visited = set((0, 0)) while queue: x, y, path = queue.popleft() if (x, y) == (n - 1, n - 1): result = [[0] * n for _ in range(n)] for i, j in path: result[i][j] = 1 return result for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and maze[nx][ny] == 1: queue.append((nx, ny, path + [(nx, ny)])) visited.add((nx, ny)) return []"},{"question":"In a galaxy far far away, Luka the space explorer discovered a new planet and encountered an ancient puzzle. The puzzle involves a sequence of integers, and the goal is to find the length of the longest contiguous subsequence with an equal number of even and odd integers. Your task is to help Luka solve this puzzle by writing a program that, for each given sequence, determines the maximum length of such contiguous subsequence. INPUT: The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. For each test case: 1. The first line contains an integer N (1 ≤ N ≤ 100,000), the length of the sequence. 2. The second line contains N integers representing the sequence (each number in the sequence is between 1 and 1,000,000 inclusive). OUTPUT: For each test case, output a single integer denoting the length of the longest contiguous subsequence that contains an equal number of even and odd integers. If no such subsequence exists, output 0. SAMPLE INPUT: 2 5 1 2 3 4 5 4 2 4 6 8 SAMPLE OUTPUT: 4 0 Explanation: For the first test case, the longest contiguous subsequence with an equal number of even and odd integers is [1, 2, 3, 4] or [2, 3, 4, 5], both with length 4. For the second test case, no subsequence contains an equal number of even and odd integers, so the output is 0.","solution":"def longest_even_odd_subsequence(T, test_cases): results = [] for i in range(T): N, sequence = test_cases[i] balance = 0 balance_indices = {0: -1} max_length = 0 for index, value in enumerate(sequence): if value % 2 == 0: balance += 1 else: balance -= 1 if balance in balance_indices: max_length = max(max_length, index - balance_indices[balance]) else: balance_indices[balance] = index results.append(max_length) return results"},{"question":"Problem D: Balance Check In a coding competition, participants are given strings consisting of multiple types of brackets: `()`, `[]`, `{}`, and `<>`. The participants must determine if the brackets are balanced. A string of brackets is considered balanced if every opening bracket has a corresponding closing bracket in the correct order. Your task is to write a program that checks if a given string of brackets is balanced. **Input** The input consists of one line containing a single string `s` (1 <= |s| <= 10^5), which represents the sequence of brackets. **Output** Print \\"YES\\" if the string is balanced and \\"NO\\" otherwise. **Examples** Input `[()]{}{[()()]()}` Output `YES` Input `[(])` Output `NO` Input `<<[{()}]>>` Output `YES` Input `[{]}` Output `NO` Consider that: - An empty string is considered balanced. - Any closing bracket without a previous corresponding opening bracket is incorrect. - The types of brackets must match correctly.","solution":"def is_balanced(s: str) -> str: Determines if the string of brackets is balanced. Args: s (str): The input string containing brackets. Returns: str: \\"YES\\" if the string is balanced, \\"NO\\" otherwise. stack = [] bracket_pairs = {\')\': \'(\', \']\': \'[\', \'}\': \'{\', \'>\': \'<\'} for char in s: if char in bracket_pairs.values(): stack.append(char) elif char in bracket_pairs: if stack and stack[-1] == bracket_pairs[char]: stack.pop() else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"A robot is placed on a 2D grid. The robot can only move up, down, left, or right by one grid cell at a time. Write a program to determine if the robot returns to the origin (0,0) after a sequence of moves. Each move is represented by a string, and the robot starts at the origin. The valid moves are \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). You need to print \\"YES\\" if the robot returns to the origin after all moves, and \\"NO\\" otherwise. Input The only line contains a string consisting of characters \'U\', \'D\', \'L\', \'R\' that represent the robot\'s movements. The length of the string is between 0 and 10^4. Output Output \\"YES\\" if the robot returns to the origin, and \\"NO\\" otherwise. Examples Input UDLR Output YES Input UUDDLLRR Output YES Input UDDLRL Output NO","solution":"def is_robot_back_to_origin(moves): Determines if the robot returns to the origin after a sequence of moves. Args: moves (str): A string consisting of characters \'U\', \'D\', \'L\', \'R\' representing the moves. Returns: str: \\"YES\\" if the robot returns to the origin, \\"NO\\" otherwise. x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 if x == 0 and y == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a binary tree, you need to find the path from the root to a target node and return it as a list of node values. The tree nodes each have a unique value. Example 1: Input: Root = [1, 2, 3, None, 5, None, 4], Target = 5 Explanation: 1 / 2 3 5 4 Output: [1, 2, 5] Example 2: Input: Root = [1, 2, 3], Target = 3 Explanation: 1 / 2 3 Output: [1, 3] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `pathToNode()` which takes the root of the binary tree and the target node value, and returns the list of node values from the root to the target node. Expected Time Complexity: O(N) Expected Auxiliary Space: O(H) where H is the height of the tree. Constraints: - The number of nodes in the tree is in the range [1, 10^4]. - -10^9 ≤ Node.val ≤ 10^9 - All Node.val are unique. - It is guaranteed that the target node exists in the tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def pathToNode(root, target): Returns the path from root to the target node. def dfs(node, path): if not node: return False path.append(node.val) if node.val == target: return True if dfs(node.left, path) or dfs(node.right, path): return True path.pop() return False path = [] dfs(root, path) return path"},{"question":"Given a list of N integers, rotate the list to the right by K steps. Rotating a list means to move each element to its right neighbor, and the last element moves to the beginning of the list. Write a function to perform the rotation and print the resulting list. Input: The first line contains T, the number of test cases. Each test case consists of a line containing two integers, N and K. The next line contains N integers representing the list. Output: For each test case, print the list after rotating it to the right by K steps. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 0 ≤ K < 1000 -10^9 ≤ elements of the list ≤ 10^9 SAMPLE INPUT 2 5 2 1 2 3 4 5 7 3 10 20 30 40 50 60 70 SAMPLE OUTPUT 4 5 1 2 3 50 60 70 10 20 30 40 Explanation: In the first test case, rotating the list [1, 2, 3, 4, 5] to the right by 2 steps results in [4, 5, 1, 2, 3]. In the second test case, rotating the list [10, 20, 30, 40, 50, 60, 70] to the right by 3 steps results in [50, 60, 70, 10, 20, 30, 40].","solution":"def rotate_list(test_cases): Rotates the lists to the right by K steps for each test case. Parameters: test_cases (list of tuples): List of tuples where each tuple contains (N, K, l) where N is the size of the list, K is the number of rotations, and l is the list of integers. Returns: list: A list of rotated lists for each test case. result = [] for N, K, l in test_cases: K = K % N # In case K is larger than N rotated_list = l[-K:] + l[:-K] result.append(rotated_list) return result"},{"question":"Given an undirected graph with V vertices and E edges, determine if the graph is a Bipartite Graph. A graph is Bipartite if the set of vertices can be divided into two disjoint sets U and V such that every edge (u, v) either connects a vertex from U to V or a vertex from V to U. In other words, there is no edge that connects vertices of the same set. Example 1: Input: V = 4, E = 4 Edges = [(0, 1), (0, 3), (1, 2), (2, 3)] Output: True Explanation: The given graph can be divided into two sets: {0, 2} and {1, 3} where edges are between the sets only. Example 2: Input: V = 3, E = 3 Edges = [(0, 1), (1, 2), (2, 0)] Output: False Explanation: It\'s impossible to split the vertices into two sets in a way that every edge connects two vertices of different sets. Your Task: You don’t need to read input or print anything. Your task is to complete the function `isBipartiteGraph()` which takes an integer V, an integer E, and a list of E pairs of integers as input parameters and returns a boolean value indicating whether the graph is Bipartite or not. Expected Time Complexity: O(V + E) Expected Auxiliary Space: O(V) Constraints: 1 <= V, E <= 100","solution":"from collections import deque def isBipartiteGraph(V, E, edges): # Create an adjacency list for the graph graph = [[] for _ in range(V)] for u, v in edges: graph[u].append(v) graph[v].append(u) # Initialize all vertices as uncolored color = [-1] * V # Function to check if the graph is bipartite starting from the source vertex def bfs_check(source): queue = deque([source]) color[source] = 0 # Assign the first color to the source vertex while queue: u = queue.popleft() for v in graph[u]: if color[v] == -1: # If the vertex is not colored # Assign alternate color color[v] = 1 - color[u] queue.append(v) elif color[v] == color[u]: # If the adjacent vertex has the same color return False return True # Check all components of the graph for i in range(V): if color[i] == -1: # If the vertex is not colored if not bfs_check(i): return False return True"},{"question":"Given an integer array `arr` consisting of n positive integers, you need to determine if there exists a non-empty subsequence of `arr` such that the sum of the elements in this subsequence equals the product of the elements in this subsequence. ------ Input ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a positive integer n. - The second line contains n space-separated positive integers representing the elements of the array arr. ------ Output ------ For each test case, print \\"YES\\" if there exists a non-empty subsequence with the required property and \\"NO\\" otherwise. ------ Constraints ------ 1 leq T leq 500 1 leq n leq 100 1 leq arr[i] leq 10^5 ------ Subtasks ------ Subtasks #1 (100 points): original constraints ----- Sample Input 1 ------ 3 3 1 3 2 4 4 1 2 3 5 2 2 2 2 2 ----- Sample Output 1 ------ YES YES YES ----- Explanation ------ Example case 1: The subsequence {1} has a sum of 1 and a product of 1. Example case 2: The entire array {4, 1, 2, 3} can be considered. Its sum is 4 + 1 + 2 + 3 = 10 and its product is 4 * 1 * 2 * 3 = 24. Example case 3: The subsequence {2, 2} has a sum of 2 + 2 = 4 and a product of 2 * 2 = 4.","solution":"def has_equal_sum_and_product_subsequence(arr): if 1 in arr: return True for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] == arr[j]: return True return False def solve(test_cases): results = [] for case in test_cases: n, arr = case if has_equal_sum_and_product_subsequence(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # T = int(input().strip()) # test_cases = [] # for _ in range(T): # n = int(input().strip()) # arr = list(map(int, input().strip().split())) # test_cases.append((n, arr)) # # results = solve(test_cases) # for result in results: # print(result)"},{"question":"Kekoland is famous for its delicious mushrooms. Adil and Bera are on a mushroom picking expedition in the enchanted Kekoland forest. The forest can be represented as a rectangular grid of size m x n. Each cell in the grid either contains a mushroom or is empty. Adil and Bera start at the top-left corner of the grid and wish to pick all the mushrooms in the shortest time possible. They can move simultaneously but cannot occupy the same cell at the same time. They can move up, down, left, or right to adjacent cells. Write a program that computes the minimal time required for Adil and Bera to pick all the mushrooms and return to the top-left corner together. Input First line contains three integers m, n, and k (1 ≤ m, n ≤ 50, 0 ≤ k ≤ m*n) — the number of rows and columns in the forest grid and the number of mushrooms, respectively. Next k lines each contain two integers xi and yi (0 ≤ xi < m, 0 ≤ yi < n) — the position of the i-th mushroom. Output Print one integer — the minimal time required for Adil and Bera to pick all mushrooms and return to the starting position. Examples Input 4 4 3 1 2 2 1 3 3 Output 12 Input 3 3 2 1 1 2 2 Output 8 Note In the first example, Adil and Bera can work in a way such that they split the work efficiently to minimize the total distance traveled.","solution":"from collections import deque import itertools def bfs(grid, start, m, n): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start[0], start[1], 0)]) visited = [[False]*n for _ in range(m)] visited[start[0]][start[1]] = True distances = [[float(\'inf\')]*n for _ in range(m)] distances[start[0]][start[1]] = 0 while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) distances[nx][ny] = dist + 1 return distances def minimal_time_to_pick_mushrooms(m, n, k, mushrooms): if k == 0: return 0 # No mushrooms to pick start = (0, 0) all_points = [start] + mushrooms # Compute distance from every mushroom and starting point to every other point all_distances = [] for point in all_points: distances = bfs([[0]*n for _ in range(m)], point, m, n) all_distances.append(distances) # Overall minimal distance time calculation using dynamic programming def get_distance(fr, to): return all_distances[fr][to[0]][to[1]] mushroom_indices = list(range(1, len(all_points))) min_time = float(\'inf\') for perm in itertools.permutations(mushroom_indices): perm = [0] + list(perm) + [0] current_time = 0 for i in range(len(perm) - 1): current_time += get_distance(perm[i], all_points[perm[i + 1]]) min_time = min(min_time, current_time) return min_time"},{"question":"In a small town, there is a custom of celebrating festivals with a grand feast. The town consists of multiple houses, each with a certain amount of food available. When preparing for a feast, the organizers can ask inhabitants of any two distinct houses to bring their food together, but to minimize conflicts and improve cooperation, they have certain rules: 1. Two houses can only combine their food if the summed food amounts of the two houses is an even number. 2. The same pair of houses cannot be asked to combine food more than once. The goal is to determine the maximum possible amount of food that can be collected by combining houses under these constraints. Note that combining all houses together might not always be possible due to the even number constraint. -----Input----- The first line contains an integer N (2 leq N leq 50), the number of houses in the town. The second line contains N integers A_1, A_2, ..., A_N (1 leq A_i leq 1000), where A_i is the amount of food available in the i^{th} house. -----Output----- The output should contain a single integer, the maximum amount of food that can be gathered by combining pairs of houses according to the given rules. -----Examples----- Sample Input: 5 2 4 6 8 10 Sample Output: 30","solution":"def max_food_sum(N, A): Returns the maximum possible amount of food that can be collected by combining houses under the given constraints. total_food_group1 = sum(food for food in A if food % 2 == 0) total_food_group2 = sum(food for food in A if food % 2 != 0) return total_food_group1 + total_food_group2"},{"question":"You are given a string s, where s contains only lowercase English letters. Your goal is to determine the minimum number of split operations needed to make every substring of s have at most one unique character. A split operation consists of dividing one substring into two or more parts. For example, the string \\"aaabb\\" can be split into [\\"aaa\\", \\"bb\\"] with one split operation. Input The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 10^5). Output For each test case, print the minimum number of split operations needed for the corresponding string. Example Input 3 aaabbbcc aabbcc abcabc Output 2 2 5 Explanation - For the first test case, the string \\"aaabbbcc\\" can be split into [\\"aaa\\", \\"bbb\\", \\"cc\\"] with 2 split operations. - For the second test case, the string \\"aabbcc\\" can be split into [\\"aa\\", \\"bb\\", \\"cc\\"] with 2 split operations. - For the third test case, the string \\"abcabc\\" needs 5 splits to make every substring have at most one unique character. The resulting substrings could be [\\"a\\", \\"b\\", \\"c\\", \\"a\\", \\"b\\", \\"c\\"].","solution":"def min_splits_to_unique(s): Returns the minimum number of split operations needed to make every substring of s have at most one unique character. if not s: return 0 splits = 0 current_char = s[0] for char in s: if char != current_char: splits += 1 current_char = char return splits def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_splits_to_unique(s)) return results"},{"question":"You are given a sequence of integers and a set of queries that ask you to perform modifications on this sequence. After each modification, you are required to return the median value of the sequence. The median of a list of numbers is the value separating the higher half from the lower half. If the list has an odd number of elements, the median is the middle element of the list. If the list has an even number of elements, the median is the average of the two middle elements. Can you help by determining the median value after each modification? -----Input----- - The first line of input contains two integers 1 leq n leq 10^5, the number of elements in the sequence, and 1 leq q leq 10^5, the number of queries. - The second line contains n integers a_0, a_1, dots, a_{n-1} satisfying -10^6 leq a_i leq 10^6, which is the initial sequence. - Each of the following q lines contains two integers 0 leq i < n and -10^6 leq x leq 10^6. Each query indicates that the element at index i should be changed to x. -----Output----- - Print q lines: the median of the sequence after each modification. -----Examples----- Sample Input: 5 3 1 3 5 7 9 2 4 4 -2 1 10 Sample Output: 4 3 4","solution":"import bisect def median_of_sequence(n, q, sequence, queries): result = [] for i, x in queries: # Update the sequence sequence[i] = x sorted_sequence = sorted(sequence) length = len(sorted_sequence) if length % 2 == 1: median = sorted_sequence[length // 2] else: median = (sorted_sequence[length // 2 - 1] + sorted_sequence[length // 2]) / 2 result.append(median) return result"},{"question":"Description You are given a list of tuples, where each tuple contains exactly three positive integers (a, b, c). The following data is given to you: (4, 3, 2) -> 1 (5, 9, 1) -> 5 (12, 15, 18) -> 3 (17, 22, 5) -> 2 (7, 14, 21) -> 7 (100, 200, 300) -> 100 (50, 25, 75) -> 25 The goal is to write a program that computes a specific value based on the provided tuples. The computed value is the greatest common divisor (GCD) of the three integers in each tuple. Write a program that takes a single input of three integers and outputs their GCD. Input Format One line containing three space-separated integers a, b, and c. Output Format One line containing the result of the GCD of a, b, and c. Input Limits 1 <= a, b, c <= 10^9 SAMPLE INPUT 50 25 75 SAMPLE OUTPUT 25 Explanation The GCD of 50, 25, and 75 is 25.","solution":"import math def gcd_of_three(a, b, c): Returns the greatest common divisor of three integers a, b, and c. return math.gcd(math.gcd(a, b), c)"},{"question":"You are given an array of N integers. Your task is to determine if there exists a contiguous subarray whose sum is divisible by a given integer K. Constraints * All values in input are integers. * 1 leq N leq 10^5 * 1 leq |a_i| leq 10^4 * 1 leq K leq 10^4 Input Input is given from Standard Input in the following format: N K a_1 a_2 ... a_N Output If such a subarray exists, print `Yes`; otherwise, print `No`. Examples Input 5 3 1 2 3 4 5 Output Yes Input 4 6 1 4 2 6 Output Yes Input 3 5 2 2 2 Output No Notes A subarray is a contiguous portion of an array. The elements of the subarray must appear in the same order as in the original array. For instance, in the array [1, 2, 3, 4], [2, 3] is a subarray but [3, 1] is not.","solution":"def subarray_sum_divisible(arr, N, K): Determine if a contiguous subarray exists whose sum is divisible by K. Parameters: arr (list): List of integers N (int): Length of the list K (int): The given integer to check divisibility against Returns: str: \\"Yes\\" if such a subarray exists, otherwise \\"No\\" prefix_sum_mod = {0: -1} curr_sum = 0 for i in range(N): curr_sum += arr[i] mod_value = curr_sum % K if mod_value in prefix_sum_mod: if i - prefix_sum_mod[mod_value] > 0: return \\"Yes\\" else: prefix_sum_mod[mod_value] = i return \\"No\\" # Function to handle input/output def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) arr = list(map(int, data[2:])) print(subarray_sum_divisible(arr, N, K))"},{"question":"You are given a list of integers which represent the number of pages in different chapters of a book. A reader wants to read the chapters but prefers not to read more than a certain number of pages each day. You need to determine the minimum number of days required to finish reading the entire book if the reader reads a contiguous segment of chapters each day. For example, if the chapters have the following page lengths: ([10, 20, 30, 40]) and the maximum number of pages the reader can read in a day is (50), then the reader can complete the book in (3) days by reading chapters as follows: ([10, 20] rightarrow [30] rightarrow [40]). -----Input----- - The first line contains an integer (t) ((1 le t le 10^5)) — the number of test cases. - Each of the next (t) test cases consists of two lines: - The first line contains two integers (n) ((1 le n le 10^5)) and (m) ((1 le m le 10^9)) — the number of chapters and the maximum number of pages the reader can read in a day. - The second line contains (n) integers (a_1, a_2, dots, a_n) ((1 le a_i le 10^9)) — the number of pages in each chapter. It is guaranteed that the total number of chapters in all test cases does not exceed (10^5). -----Output----- For each test case, output a single integer — the minimum number of days required to read the entire book. -----Example----- Input 3 4 50 10 20 30 40 5 100 50 30 20 40 10 3 70 60 10 10 Output 3 2 2 -----Note----- In the first test case of the example: - (10 + 20 le 50), so the reader can read the first two chapters on the first day. - (30 le 50), so the reader reads one chapter on the second day. - (40 le 50), so the reader reads one chapter on the third day. In the second test case: - (50 + 30 le 100), so the reader reads the first two chapters on the first day. - (20 + 40 + 10 le 100), so the reader reads the remaining chapters on the second day.","solution":"def min_days_to_finish_book(num_chapters, max_pages_per_day, chapters): days_needed = 0 pages_read_today = 0 for pages in chapters: if pages_read_today + pages > max_pages_per_day: days_needed += 1 pages_read_today = pages else: pages_read_today += pages if pages_read_today > 0: days_needed += 1 return days_needed def min_days_for_all_tests(t, test_cases): results = [] for i in range(t): num_chapters, max_pages_per_day = test_cases[i][0] chapters = test_cases[i][1] results.append(min_days_to_finish_book(num_chapters, max_pages_per_day, chapters)) return results"},{"question":"Implement a function `find_missing_letter` that takes a list of consecutive (increasing) characters and returns the missing letter in the sequence. You will always get a valid sequence. The sequence will always contain letters in only one case (upper or lower). Each character in the sequence is separated by exactly one step in the Unicode table. Task: Create a function `find_missing_letter(chars)` that returns the missing letter from the provided list. Example: `find_missing_letter([\'a\',\'b\',\'c\',\'d\',\'f\'])` should return `\'e\'` `find_missing_letter([\'O\',\'Q\',\'R\',\'S\'])` should return `\'P\'` Note: Focus attention on efficiency. Consider edge cases and ensure the function handles them appropriately.","solution":"def find_missing_letter(chars): Given a list of consecutive (increasing) characters, returns the missing letter in the sequence. # Iterate through the list from the second character to the end for i in range(1, len(chars)): # Get the Unicode code of the previous and current characters prev_char_code = ord(chars[i-1]) curr_char_code = ord(chars[i]) # If the difference is more than 1, we found the missing character if curr_char_code - prev_char_code > 1: return chr(prev_char_code + 1) # If no missing character was found, return an empty string (though it\'s guaranteed to have a missing character) return \'\'"},{"question":"You are given a list of n integers and n queries. For each query, you need to determine the k-th smallest element in the subarray defined by the query. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of elements in the list. The second line contains n integers, separated by spaces, representing the elements of the list. The third line contains an integer q (1 ≤ q ≤ 100,000), the number of queries. Each of the next q lines contains three integers: l, r, and k (1 ≤ l ≤ r ≤ n; 1 ≤ k ≤ (r - l + 1)), where l and r define the inclusive subarray, and k specifies the position of the smallest element to find. Output For each query, print the k-th smallest element in the defined subarray, in a separate line. Example Input 5 1 5 2 4 3 3 1 3 2 2 5 3 1 5 4 Output 2 4 4 Explanation - For the first query, the subarray is [1, 5, 2], and the 2nd smallest element is 2. - For the second query, the subarray is [5, 2, 4, 3], and the 3rd smallest element is 4. - For the third query, the subarray is [1, 5, 2, 4, 3], and the 4th smallest element is 4.","solution":"def find_kth_smallest(n, arr, queries): Finds the k-th smallest element in the subarrays defined by the queries. Args: n: int : Number of elements in the list. arr: list : List of n integers. queries: list : List of queries where each query is a tuple (l, r, k). Returns: list : List of k-th smallest elements for each query. results = [] for l, r, k in queries: subarray = arr[l-1:r] subarray.sort() results.append(subarray[k-1]) return results"},{"question":"In a far-off galaxy, there exists a highly advanced civilization that uses a unique system of teleportation networks to travel between planets. Each planet in the galaxy is represented as a node, and each teleportation path between two planets is represented as an edge with a positive integer weight that signifies the energy cost to travel that path. Due to some recent instabilities in the teleportation network, the Galactic Council has decided to optimize the network to minimize the total energy cost required to keep the network connected. Your task is to write a program to determine the minimum total energy cost to connect all the planets in the network. Input The first line contains an integer T, the number of test cases. Each test case starts with two integers N and M, where N is the number of planets (1 ≤ N ≤ 100) and M is the number of teleportation paths (0 ≤ M ≤ N*(N-1)/2). The next M lines each contain three integers u, v, and w, which describe a path from planet u to planet v with an energy cost of w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000). It\'s guaranteed that the network is connected in every test case. Output For each test case, output a single line containing the minimum total energy cost to ensure all planets are connected. Example Input 2 4 5 1 2 3 2 3 4 3 4 5 4 1 6 1 3 2 3 3 1 2 1 2 3 2 3 1 3 Output 10 3","solution":"def find_parent(parent, i): if parent[i] == i: return i else: return find_parent(parent, parent[i]) def union(parent, rank, x, y): root_x = find_parent(parent, x) root_y = find_parent(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(N, edges): result = 0 i = 0 # Index variable for sorted edges e = 0 # Index variable for result[] parent = [] rank = [] # Initialize all vertices to be their own parent (disjoint sets) for node in range(N): parent.append(node) rank.append(0) edges = sorted(edges, key=lambda x: x[2]) while e < N - 1: u, v, w = edges[i] i += 1 x = find_parent(parent, u) y = find_parent(parent, v) if x != y: e += 1 result += w union(parent, rank, x, y) return result def minimum_energy_cost(T, test_cases): results = [] for case in test_cases: N, M, edges = case edges = [(u-1, v-1, w) for u, v, w in edges] # Convert to 0-indexed result = kruskal_mst(N, edges) results.append(result) return results"},{"question":"Alexey is conducting a social media campaign for a new service and wants to identify the most influential users in a network. He has a list of users and a list of pairs of users who follow each other. A user is considered influential if they are followed by at least k other users. Alexey aims to identify and list all these influential users. Input - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5), where n is the number of users. - The next m lines contain pairs of integers u and v (1 ≤ u, v ≤ n), where each pair (u, v) denotes that user u follows user v. There can be multiple follow relationships. Output - Output a list of influential users (in ascending numerical order) who are followed by at least k other users. If no users meet the criterion, output \\"No influential users\\". Example Input 6 2 1 2 2 3 3 4 4 2 5 6 6 2 Output 2","solution":"def find_influential_users(n, k, relationships): Finds influential users who are followed by at least k other users. Args: n: int - Number of users k: int - Minimum number of followers to be influential relationships: List[Tuple[int, int]] - List of (u, v) pairs where user u follows user v Returns: List[int] - List of influential users sorted in ascending order, or [\'No influential users\'] if none exist from collections import defaultdict followers_count = defaultdict(int) for u, v in relationships: followers_count[v] += 1 influential_users = [user for user, count in followers_count.items() if count >= k] if not influential_users: return [\\"No influential users\\"] else: return sorted(influential_users)"},{"question":"You are given a sequence of n integers, and you need to process m queries on this sequence. Each query is one of two types: 1. **Update**: Update the value at a specific position in the sequence. 2. **Find**: Find the maximum number in a specific range of the sequence. -----Input----- The first line contains two integers n and m (1 le n, m le 200,000) — the length of the sequence and the number of queries. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the initial sequence values. The next m lines contain the queries. Each query is in one of the following formats: - **1 x y**: Update the value at position x to y (1 le x le n, 1 le y le 10^9). - **2 l r**: Find the maximum value in the range [l, r] (1 le l le r le n). -----Output----- For each query of the second type, output the maximum value in the specified range. -----Example----- Input 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 1 4 7 2 3 5 Output 3 10 7 -----Note----- In the first example, before any updates, the maximum value in the range [1, 3] is 3. After the first update, the sequence becomes [1, 10, 3, 4, 5]. The maximum in the range [1, 3] is now 10. After the second update, the sequence becomes [1, 10, 3, 7, 5]. The maximum in the range [3, 5] is 7.","solution":"class SegmentTree: def __init__(self, arr): self.n = len(arr) self.tree = [0] * (2 * self.n) self.build(arr) def build(self, arr): # initialize the leaves for i in range(self.n): self.tree[self.n + i] = arr[i] # build the tree by computing internal nodes for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_max(self, left, right): left += self.n right += self.n + 1 # exclusive res = float(\'-inf\') while left < right: if left % 2 == 1: res = max(res, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 res = max(res, self.tree[right]) left //= 2 right //= 2 return res def process_queries(n, m, arr, queries): st = SegmentTree(arr) results = [] for q in queries: if q[0] == 1: _, x, y = q st.update(x - 1, y) elif q[0] == 2: _, l, r = q results.append(st.range_max(l - 1, r - 1)) return results"},{"question":"Given the two strings S and T, determine if S can be constructed by repeatedly removing any one-character substring of T. The construction process is defined as follows: you remove one character at a time from T and concatenate the removed characters in the order they were removed to form a new string. Your task is to check if the newly constructed string can exactly match S. # Input format ``` S T ``` # Constraints - S and T consist of lowercase alphabets. - 1 ≤ |S|, |T| ≤ 2 × 10^5. # Output format Print `Yes` if S can be formed from T by successively removing one character at a time, and `No` otherwise. # Input example 1 ``` abc abc ``` # Output example 1 ``` Yes ``` # Input example 2 ``` bac abc ``` # Output example 2 ``` No ``` # Input example 3 ``` ccba abcc ``` # Output example 3 ``` No ``` # Input example 4 ``` adb abcd ``` # Output example 4 ``` No ```","solution":"def can_construct(S, T): Determine if S can be constructed by repeatedly removing any one-character substring of T. # Pointers for S and T s_ptr, t_ptr = 0, 0 while s_ptr < len(S) and t_ptr < len(T): if S[s_ptr] == T[t_ptr]: s_ptr += 1 t_ptr += 1 return s_ptr == len(S)"},{"question":"Given a string \'str\' consisting of lowercase English letters, find the minimum number of steps required to make the string a palindrome. In one step, you can remove one character from the string. Example 1: Input: str = \\"abccba\\" Output: 0 Explanation: The string is already a palindrome, so no steps are required. Example 2: Input: str = \\"abbac\\" Output: 1 Explanation: By removing the last character \'c\', the string becomes \\"abba\\", which is a palindrome. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minStepsToPalindrome() which takes a string \'str\' as input and returns the minimum number of steps required to make the string a palindrome. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 <= len(str) <= 1000","solution":"def minStepsToPalindrome(s): Returns the minimum number of steps required to make the given string a palindrome. n = len(s) # Create a table to store results of sub-problems dp = [[0 for x in range(n)] for y in range(n)] # Fill the table for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 0 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i][j - 1], dp[i + 1][j]) + 1 return dp[0][n - 1]"},{"question":"You are given a list of dictionaries, where each dictionary represents a student and contains their name and a list of grades. Your task is to write a function `average_grades` that takes this list as input and returns a dictionary mapping each student\'s name to their average grade, rounded to two decimal places. Examples ``` [{\\"name\\": \\"Alice\\", \\"grades\\": [88, 76, 92]}, {\\"name\\": \\"Bob\\", \\"grades\\": [79, 85, 89]}] --> {\\"Alice\\": 85.33, \\"Bob\\": 84.33} [{\\"name\\": \\"Charlie\\", \\"grades\\": [100, 100, 100]}, {\\"name\\": \\"Dave\\", \\"grades\\": [70, 80, 90]}] --> {\\"Charlie\\": 100.0, \\"Dave\\": 80.0} ``` Note: If a student has an empty list of grades, their average should be `0.0`.","solution":"def average_grades(students): Takes a list of dictionaries representing students, and returns a dictionary mapping each student\'s name to their average grade. averages = {} for student in students: name = student[\\"name\\"] grades = student[\\"grades\\"] if len(grades) == 0: averages[name] = 0.0 else: average = sum(grades) / len(grades) averages[name] = round(average, 2) return averages"},{"question":"Problem You are given a rectangular matrix with integers. Your task is to find the first perfect square number in the matrix. A perfect square is an integer that is the square of an integer (e.g., 1, 4, 9, 16, ...). If there are multiple perfect square numbers, return the smallest one. If there are no perfect square numbers, return -1. Task Complete the function `firstPerfectSquare()`/`first_perfect_square()` that accepts one argument `matrix` (a list of lists of integers) as input, and returns either the smallest perfect square present in the matrix or -1 if no such number exists. # Examples ``` firstPerfectSquare([[10, 4, 5], [3, 16, 2], [8, 1, 7]]) -- 1 // Explanation: The perfect squares in the matrix are 4, 16, and 1. The smallest perfect square among these is 1. firstPerfectSquare([[13, 20, 25], [11, 9, 27], [18, 6, 12]]) -- 9 // Explanation: The perfect squares in the matrix are 25 and 9. The smallest perfect square among these is 9. firstPerfectSquare([[2, 3, 5], [6, 10, 14], [18, 17, 22]]) -- -1 // Explanation: There are no perfect squares in the matrix. ``` # Notes - The number of rows and columns in the matrix can vary but will be at least 1. - The elements in the matrix will be non-negative integers and at most 100,000.","solution":"import math def first_perfect_square(matrix): min_perfect_square = float(\'inf\') found = False for row in matrix: for num in row: if num > 0 and math.isqrt(num) ** 2 == num: min_perfect_square = min(min_perfect_square, num) found = True if found: return min_perfect_square else: return -1"},{"question":"A company is developing a system for managing the workload of its employees. Each employee can be assigned a task with a specific difficulty level, and each employee can perform tasks whose difficulty level does not exceed their competence level. Additionally, each employee can work on only one task at a time. You are given a list of employees along with their competence levels and a list of tasks with their difficulty levels. Your goal is to determine the maximum number of tasks that can be assigned such that each task is assigned to one employee and each employee works on one task at most. -----Input----- The first line of the input contains a single integer T, the number of test cases. T test cases follow. The first line of each test case contains an integer E, the number of employees, and an integer K, the number of tasks. The next line contains E space-separated integers representing the competence levels of the employees. The following line contains K space-separated integers representing the difficulty levels of the tasks. -----Output----- For each test case, output a single line containing the maximum number of tasks that can be assigned. -----Constraints----- 1 ≤ T ≤ 20 1 ≤ E, K ≤ 50 1 ≤ competence levels, difficulty levels ≤ 100 -----Example----- Input: 2 3 4 4 5 3 3 5 2 1 2 2 2 9 9999 1 1 1 2 2 Output: 3 1 -----Explanation----- Case 1. Here we have 3 employees and 4 tasks. Employees have competence levels [4, 5, 3] and tasks have difficulty levels [3, 5, 2, 1]. The optimal assignment would be: - Employee with competence 4 takes task with difficulty 3. - Employee with competence 5 takes task with difficulty 5. - Employee with competence 3 takes task with difficulty 2. So the maximum number of tasks that can be assigned is 3. Case 2. Here we have 2 employees and 2 tasks. Employees have competence levels [2, 9] and tasks have difficulty levels [9999, 1]. The optimal assignment would be: - Employee with competence 9 takes task with difficulty 1. So the maximum number of tasks that can be assigned is 1.","solution":"def max_assignable_tasks(T, test_cases): results = [] for i in range(T): E, K, employees, tasks = test_cases[i] employees.sort() tasks.sort() tasks_assigned = 0 task_idx = 0 for competence in employees: while task_idx < K and tasks[task_idx] <= competence: tasks_assigned += 1 task_idx += 1 break results.append(tasks_assigned) return results"},{"question":"Anne is working with an ordered integer array and she needs to modify it to remove duplicates. However, there is a catch: after removing the duplicates, each element should appear exactly twice in the modified array. The relative order of the elements should be the same as in the original array. Given an array of integers `nums`, your task is to construct the modified array by removing duplicates and ensuring each element appears exactly twice. ___Input___ The first line of the input is an integer `n` (1 leq n leq 10^5) — the number of elements in the array `nums`. The second line contains `n` integers separated by space, which represent the elements of `nums`. It is guaranteed that the array `nums` is sorted in non-decreasing order. ___Output___ Print a single line containing the modified array where each element appears exactly twice in its relative order from the original array. The elements in the result should be separated by space. If it\'s not possible to create such an array, print an empty array. ___Examples___ Input 7 1 1 2 2 2 3 3 Output 1 1 2 2 3 3 Input 5 1 2 3 4 5 Output [] Input 6 1 1 1 1 1 1 Output 1 1 ___Note___ In the first example, the array `1 1 2 2 3 3` contains each element exactly twice and respects the order from the original array. In the second example, it\'s impossible to form an array where each element appears exactly twice since no element appears more than once in the original array. In the third example, the array `1 1` is produced after ensuring each element (in this case, only 1) appears exactly twice.","solution":"def remove_duplicates_ensure_twice(nums): # Count the occurrences of each element from collections import Counter counter = Counter(nums) result = [] # Iterate over the original list while maintaining the order for num in nums: if counter[num] >= 2: result.extend([num, num]) counter[num] = 0 # Set to 0 to avoid adding the same element further # Check if the result array meets the condition of each element appearing twice final_count = Counter(result) for key, val in final_count.items(): if val != 2: return [] return result"},{"question":"Write a function that determines if a given string can be rearranged to form a palindrome. A palindrome is a word or phrase that reads the same forward and backward. For example, \\"level\\" and \\"racecar\\" are palindromes, while \\"hello\\" is not. To achieve this, a string can be rearranged to form a palindrome if at most one character occurs an odd number of times (in the case of palindrome strings with odd length). Examples: - Input: \\"civic\\" Output: True (already a palindrome) - Input: \\"ivicc\\" Output: True (can be rearranged to \\"civic\\") - Input: \\"hello\\" Output: False (cannot be rearranged to form a palindrome) Write a function `can_form_palindrome(s: str) -> bool` that returns `True` if the input string can be rearranged to form a palindrome, and `False` otherwise.","solution":"def can_form_palindrome(s: str) -> bool: Determines if a given string can be rearranged to form a palindrome. :param s: Input string :return: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count the occurrences of each character in the string char_count = Counter(s) # Count how many characters have an odd number of occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"One day, Danny the Detective is hired to solve a mysterious case. During his investigation, he discovers a crucial piece of evidence in the form of a sequence of numbers. However, the sequence is encrypted using a special mechanism. Danny needs your help to decipher the code, which is hidden in the structure of a binary tree. Each node in the binary tree contains a single integer value. The encrypted sequence can be found by performing specific types of traversals on the binary tree and then combining the results. Your task is to perform three different types of traversals in the specified order: pre-order traversal, in-order traversal, and post-order traversal. After retrieving the sequences from these traversals, concatenate them into a single sequence to form the decrypted message. A binary tree traversal is defined as follows: - Pre-order traversal: Visit the root node, then recursively visit the left subtree, and finally recursively visit the right subtree. - In-order traversal: Recursively visit the left subtree, visit the root node, and then recursively visit the right subtree. - Post-order traversal: Recursively visit the left subtree, recursively visit the right subtree, and finally visit the root node. Input The input is given in a compact form using nested pairs, which represent the structure of the binary tree. Each pair contains a value followed by two children, where null denotes the absence of a child. The first line contains a single integer n (1 ≤ n ≤ 100000) representing the number of nodes in the binary tree. The subsequent lines describe the binary tree in nested pairs, always starting from the root node. Each line contains three elements: value, left child, and right child. If a node has no left or right child, it will be represented as null. Output Print the decrypted sequence as a single line of space-separated integers. Examples Input: 5 1 (2 null null) (3 (4 null null) 5) Output: 1 2 3 4 5 2 1 4 3 5 2 4 5 3 1 Note: The above examples represent the tree structure as follows: 1 / 2 3 / 4 5 For this tree, the pre-order traversal is [1, 2, 3, 4, 5], in-order traversal is [2, 1, 4, 3, 5], and post-order traversal is [2, 4, 5, 3, 1]. Concatenating these three sequences gives the final output: 1 2 3 4 5 2 1 4 3 5 2 4 5 3 1.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(index, nodes): value = nodes[index][0] left = nodes[index][1] right = nodes[index][2] node = TreeNode(value) if left is not None: node.left = build_tree(left, nodes) if right is not None: node.right = build_tree(right, nodes) return node def pre_order_traversal(node): if node is None: return [] return [node.value] + pre_order_traversal(node.left) + pre_order_traversal(node.right) def in_order_traversal(node): if node is None: return [] return in_order_traversal(node.left) + [node.value] + in_order_traversal(node.right) def post_order_traversal(node): if node is None: return [] return post_order_traversal(node.left) + post_order_traversal(node.right) + [node.value] def decrypt_binary_tree(n, nodes): if n == 0: return [] root = build_tree(0, nodes) pre_order = pre_order_traversal(root) in_order = in_order_traversal(root) post_order = post_order_traversal(root) return pre_order + in_order + post_order"},{"question":"You are given a series of operations that you need to perform on an initial integer value. Each operation involves either addition or multiplication, and has a specific integer value associated with it. Input The first line contains an integer T denoting the number of test cases. Each test case begins with an integer X, the initial value. The next line contains an integer K, the number of operations. The following K lines each contain a character and an integer: the operation (\'+\' for addition or \'*\' for multiplication) and the value. Output For each test case, output the final value after performing all operations in the given order starting with the initial value X. Constraints 1 ≤ T ≤ 100 1 ≤ X ≤ 10^6 1 ≤ K ≤ 100 1 ≤ value ≤ 10^6 SAMPLE INPUT 2 10 3 + 5 * 2 + 1 6 2 * 3 + 10 SAMPLE OUTPUT 31 28","solution":"def perform_operations(test_cases): results = [] for case in test_cases: X, operations = case for op, val in operations: if op == \\"+\\": X += val elif op == \\"*\\": X *= val results.append(X) return results def parse_input(input_data): data = input_data.strip().split(\'n\') T = int(data[0]) index = 1 test_cases = [] for _ in range(T): X = int(data[index]) K = int(data[index + 1]) operations = [] for i in range(K): operation, value = data[index + 2 + i].split() operations.append((operation, int(value))) test_cases.append((X, operations)) index += 2 + K return test_cases"},{"question":"You are given a sequence of positive integers representing the arrival times of several trains at a station. There is only one train platform available at the station, and each train takes exactly 1 unit of time to arrive and depart before the next one can use the platform. Write a function to determine if all the trains can be scheduled without any conflicts using the single platform. Input The first line contains an integer T, the number of trains (1 ≤ T ≤ 100,000). The second line contains T space-separated integers, representing the arrival times of the trains in non-decreasing order (1 ≤ arrival time ≤ 1,000,000,000). Output Output a single line with \\"Yes\\" if all the trains can be scheduled without conflicts, otherwise print \\"No\\". Constraints - All arrival times are unique and given in increasing order. SAMPLE INPUT 5 1 2 5 6 7 SAMPLE OUTPUT Yes","solution":"def can_schedule_trains(T, arrival_times): Determine if all the trains can be scheduled without conflicts using the single platform. :param T: Number of trains (integer) :param arrival_times: List of arrival times of the trains (list of integers) :return: \'Yes\' if all trains can be scheduled without conflicts, \'No\' otherwise # Loop through the arrival times to make sure no two trains arrive at the same time for i in range(1, T): if arrival_times[i] - arrival_times[i - 1] < 1: return \\"No\\" return \\"Yes\\""},{"question":"A company wants to develop a software that processes coordinates of points and computes the perimeter of the smallest rectangle that can enclose all given points. The rectangle sides should be parallel to the coordinate axes. # Problem Description Given coordinates of several points in a 2D plane, you need to develop a program that finds and returns the perimeter of the smallest rectangle that can enclose all the given points. The sides of this rectangle must be parallel to the coordinate axes. # Input - The first line contains a single integer N (1 leq N leq 100), the number of points. - The next N lines each contain two integers x and y (-10^4 leq x, y leq 10^4), which are the coordinates of the points. # Output - Output a single integer representing the perimeter of the smallest rectangle that can enclose all the given points. # Examples **Sample Input 1:** ``` 4 1 1 1 4 4 1 4 4 ``` **Sample Output 1:** ``` 12 ``` **Sample Input 2:** ``` 3 -1 -1 -1 5 3 0 ``` **Sample Output 2:** ``` 20 ``` # Explanation In the first example, the smallest rectangle that encloses all points has vertices at coordinates (1, 1), (1, 4), (4, 1), and (4, 4). The width of the rectangle is 4 - 1 = 3 and the height is 4 - 1 = 3. Thus, the perimeter is 2 times (3 + 3) = 12. In the second example, the smallest rectangle that encloses all points has vertices at coordinates (-1, -1), (-1, 5), (3, -1), and (3, 5). The width of the rectangle is 3 - (-1) = 4 and the height is 5 - (-1) = 6. Thus, the perimeter is 2 times (4 + 6) = 20.","solution":"def compute_perimeter(points): Returns the perimeter of the smallest rectangle that can enclose all given points. Parameters: points (list of tuples): List of tuples, each containing the x and y coordinates of a point. Returns: int: Perimeter of the rectangle. if not points: return 0 min_x = min(point[0] for point in points) max_x = max(point[0] for point in points) min_y = min(point[1] for point in points) max_y = max(point[1] for point in points) width = max_x - min_x height = max_y - min_y return 2 * (width + height) # Example usage: points = [(1, 1), (1, 4), (4, 1), (4, 4)] print(compute_perimeter(points)) # Output should be 12"},{"question":"An online retailer wants to create a simplified shipping cost calculator. The company ships products in rectangular boxes, each with a given length, width, and height. The shipping cost is calculated based on the surface area of the box because the cost of material used to package the products directly relates to this surface area. Additionally, for eco-friendly packaging, if the surface area exceeds a specific threshold, a flat extra charge is added. Create a function to calculate the surface area of a box and determine the total shipping cost. -----Input----- The input contains several test cases. The first line of the input contains an integer T denoting the number of test cases. Each test case comprises of four integers, L, W, H, and C where: - L denotes the length of the box. - W denotes the width of the box. - H denotes the height of the box. - C denotes the extra charge threshold for surface area. -----Output----- For each test case, output the total shipping cost, which is the sum of the surface area and the extra charge (if applicable). -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ L, W, H ≤ 1000 - 1 ≤ C ≤ 20000 -----Example----- Input: 2 3 4 5 50 1 1 1 10 Output: 94 6 Explanation: For the first test case: - Surface area = 2*(3*4 + 4*5 + 5*3) = 94 - Since 94 > 50, there is no extra charge. For the second test case: - Surface area = 2*(1*1 + 1*1 + 1*1) = 6 - Since 6 ≤ 10, there is no extra charge.","solution":"def calculate_shipping_cost(T, cases): results = [] for case in cases: L, W, H, C = case surface_area = 2 * (L * W + W * H + H * L) total_cost = surface_area if surface_area > C: results.append(total_cost) else: results.append(total_cost) return results"},{"question":"In a land far away, there are n magical trees, each with a certain number of magic fruits. During each full moon, the forest guardian distributes fruits from the trees according to the following rules: 1. She can only select two different trees at a time. 2. She will pick one fruit from each selected tree and give both fruits to the elves for their potions. 3. The process continues until no more pairs of trees with fruits remain. You, as an apprentice of the forest guardian, are given the task to calculate the maximum number of fruit pairs that can be collected according to the rules. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of magical trees. The second line contains n integers f_1, f_2, ..., f_n (0 ≤ f_i ≤ 10^9) — the number of fruits on each tree. Output Output exactly one integer — the maximum number of fruit pairs that can be collected. Example Input 4 1 2 3 4 Output 5 Note In the example, pairs can be formed in the following way: choose trees with 1 & 2 fruits, then trees with 2 & 3 fruits, then trees with 3 & 4 fruits, and two pairs can be formed from trees with 4 fruits. This results in a total of 5 pairs.","solution":"def max_fruit_pairs(n, fruits): Returns the maximum number of fruit pairs that can be collected. total_fruits = sum(fruits) return total_fruits // 2"},{"question":"Alice is a food blogger who loves to share her recipes online. Recently, she found a cool feature on her content platform: she can create a unique tag for each recipe using the ingredients. However, she can only use each ingredient once in the tag and she wants each tag to be as long as possible. Unfortunately, if the same ingredient appears in multiple recipes on her blog, she\'d like to ignore it to make each tag unique and distinct for every recipe. Alice has a list of ingredients for each of her n recipes, and she wants to determine the length of the unique tag she can make for each recipe. Help Alice by creating a program that will process each recipe and output the length of the unique tag for every recipe. -----Input----- The first line contains an integer n (1 leq n leq 10^4), the number of recipes. This is followed by n blocks of lines. Each block starts with an integer m (1 leq m leq 100), the number of ingredients in the recipe. The next m lines contain a unique ingredient (a string of lowercase letters with length between 1 and 50 inclusive). Each recipe\'s ingredients are guaranteed to be unique within that recipe block. -----Output----- Output n lines, where the i-th line contains the length of the unique tag for the i-th recipe. -----Examples----- Sample Input 1: 3 4 sugar milk egg flour 3 butter sugar vanilla 2 potato cheese Sample Output 1: 4 2 2 Sample Input 2: 2 5 onion tomato chicken salt pepper 4 garlic oliveoil basil chicken Sample Output 2: 5 3","solution":"def unique_tag_length(n, recipes): Returns the length of the unique tag for each recipe. Args: n : int : number of recipes recipes : list : list of recipes where each recipe is a list of its ingredients Returns: list : list of integers representing the length of the unique tag for each recipe common_ingredients = set() unique_tags_length = [] for recipe in recipes: recipe_set = set(recipe) # Filter out common ingredients appearing in more than one recipe unique_ingredients = recipe_set - common_ingredients # Update common ingredients set to keep track of already used ingredients common_ingredients.update(recipe_set) # Add the length of unique tag (unique ingredients in the recipe) to result unique_tags_length.append(len(unique_ingredients)) return unique_tags_length def process_input(input_list): n = int(input_list[0]) index = 1 recipes = [] for _ in range(n): m = int(input_list[index]) index += 1 recipe = [] for _ in range(m): recipe.append(input_list[index]) index += 1 recipes.append(recipe) return unique_tag_length(n, recipes)"},{"question":"You are organizing a competition where each participant has to perform a set of activities. Each activity consumes a certain amount of the participant\'s energy and also provides them with a certain amount of experience. You have been given the initial amount of energy and experience of the participant and have to determine whether the participant can complete all activities in a given order without their energy dropping below zero at any moment. The participant can only perform the activities in the order they are given. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. Then the test cases follow. - Each test case consists of three lines: - The first line contains two space-separated integers E and X, representing the initial energy and experience of the participant respectively. - The second line contains an integer N, the number of activities. - The third line contains N space-separated pairs of integers (a_i, b_i) where a_i is the energy required for the i-th activity and b_i is the experience gained from the i-th activity. ------ Output Format ------ For each test case, output \\"YES\\" if the participant can complete all activities in the given order, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10^4 0 ≤ E, X ≤ 10^9 1 ≤ N ≤ 10^5 0 ≤ a_i ≤ 10^9 0 ≤ b_i ≤ 10^9 ------ Sample Input ------ 3 10 5 3 3 2 4 2 3 3 15 8 2 10 5 6 4 5 10 3 8 3 7 1 ------ Sample Output ------ YES NO NO ------ Explanation ------ Test case 1: The participant starts with 10 energy and 5 experience. They perform the activities in the following order: - After the 1st activity (requires 3 energy, gains 2 experience): Energy = 7, Experience = 7 - After the 2nd activity (requires 4 energy, gains 2 experience): Energy = 3, Experience = 9 - After the 3rd activity (requires 3 energy, gains 3 experience): Energy = 0, Experience = 12 The participant successfully completes all activities with their energy never dropping below 0. Test case 2: The participant starts with 15 energy and 8 experience. They perform the activities in the following order: - After the 1st activity (requires 10 energy, gains 5 experience): Energy = 5, Experience = 13 - After the 2nd activity (requires 6 energy, gains 4 experience): Energy = -1, Experience = 17 The participant cannot complete the 2nd activity as their energy drops below 0. Test case 3: The participant starts with 8 energy and 3 experience. They perform the activities in the following order: - After the 1st activity (requires 7 energy, gains 1 experience): Energy = 1, Experience = 4 - After the 2nd activity (requires 8 energy, gains 3 experience): Energy = -7, Experience = 7 The participant cannot complete the 2nd activity as their energy drops below 0.","solution":"def can_complete_activities(test_cases): Determines whether the participant can complete all activities in the given order without their energy dropping below zero at any moment. Params: test_cases : list List of test case dictionaries with \'E\', \'X\', \'N\', and \'activities\' keys Returns: list : A list of string \\"YES\\" or \\"NO\\" for each test case results = [] for case in test_cases: E = case[\'E\'] X = case[\'X\'] N = case[\'N\'] activities = case[\'activities\'] can_complete = True for a_i, b_i in activities: E -= a_i if E < 0: can_complete = False break X += b_i if can_complete: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"An agricultural cooperative has a number of fields that are used to grow different types of crops. Each field is limited by its size, and the cooperative wants to maximize the number of different crops it can plant within their available land. Given the size of each field and the space required for each type of crop, write a program that determines the optimal allocation of crops to fields subject to the following constraints: * Each field can accommodate one type of crop. * A field\'s size must be greater than or equal to the space required for the type of crop planted in it. * The same type of crop can be planted in multiple fields. Write a program that takes input specifying the size of each field and the space required for each type of crop, and outputs the maximum number of different crops that can be planted. Input The input consists of multiple datasets. Each dataset starts with two integers f and c (1 ≤ f, c ≤ 100), representing the number of fields and the number of crop types respectively. The next f lines contain one integer each, representing the size of each field. The following c lines contain one integer each, representing the space required for each type of crop. The end of the input is indicated by two lines of zeros. Output For each dataset, output a single integer representing the maximum number of different crops that can be planted in the given fields. Example Input 3 4 10 8 5 3 6 4 2 8 3 20 15 10 25 30 10 20 15 35 0 0 Output 3 3 Explanation of Example In the first dataset, there are 3 fields of sizes 10, 8, and 5 respectively, and 4 crop types requiring 3, 6, 4, and 2 units of space. The cooperative can plant crops requiring 6, 4, and 2 units of space in the three fields. Thus, 3 different crops can be planted. In the second dataset, there are 8 fields and 3 crop types, all fields have sufficient space to accommodate each of the crop types, so the maximum number of different crops is 3.","solution":"def max_different_crops(f, c, field_sizes, crop_sizes): # Sort the sizes field_sizes.sort() crop_sizes.sort() # Use a set to keep track of used crops sizes used_crops = set() for field_size in field_sizes: for crop_size in crop_sizes: if crop_size <= field_size and crop_size not in used_crops: used_crops.add(crop_size) break return len(used_crops) def process_input(data): results = [] i = 0 while i < len(data): f, c = data[i] if f == 0 and c == 0: break field_sizes = data[i+1:i+1+f] crop_sizes = data[i+1+f:i+1+f+c] result = max_different_crops(f, c, field_sizes, crop_sizes) results.append(result) i += 1 + f + c return results def read_input(): import sys input = sys.stdin.read().strip().split() data = [] i = 0 while i < len(input): f = int(input[i]) c = int(input[i+1]) i += 2 if f == 0 and c == 0: data.append((f, c)) break field_sizes = [int(input[j]) for j in range(i, i + f)] i += f crop_sizes = [int(input[j]) for j in range(i, i + c)] i += c data.append((f, c)) data.extend(field_sizes) data.extend(crop_sizes) return data if __name__ == \\"__main__\\": data = read_input() results = process_input(data) for result in results: print(result)"},{"question":"The kingdom of Arentia has multiple cities connected by roads. You, the King\'s programmer, have been tasked with designing an efficient way to determine whether there is a route between two cities. The cities are numbered from 0 to n-1, and the roads are unidirectional. Given the cities and the roads, write a program to check if there exists a path between two specified cities. INPUT: The first line contains T denoting the number of test cases. Each test case consists of the following: - A line containing two integers n (the number of cities) and m (the number of roads). - The next m lines each contain two integers u and v (u -> v denotes a road from city u to city v). - A line containing two integers a and b (the two specified cities to check the route from a to b). OUTPUT: For each test case, print \\"YES\\" if there is a route from city a to city b, otherwise print \\"NO\\". CONSTRAINTS: 0 ≤ T ≤ 100 1 ≤ n ≤ 10^3 0 ≤ m ≤ 10^4 0 ≤ u, v, a, b < n SAMPLE INPUT 2 4 4 0 1 1 2 2 3 0 3 0 3 3 2 0 1 1 2 0 2 SAMPLE OUTPUT YES YES","solution":"def can_reach(n, m, roads, a, b): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) # Perform BFS or DFS to check for path from a to b visited = [False] * n queue = deque([a]) while queue: current = queue.popleft() if current == b: return \\"YES\\" if not visited[current]: visited[current] = True for neighbor in graph[current]: if not visited[neighbor]: queue.append(neighbor) return \\"NO\\""},{"question":"In a warehouse, different types of boxes are stored, and each box has a specific weight and value. The goal is to move the boxes to a new warehouse using a truck. The truck can carry a maximum total weight of W. You have to determine the maximum total value of boxes that can be loaded into the truck without exceeding the weight limit. -----Input----- The first line contains two integers n and W (1 ≤ n ≤ 10^3, 1 ≤ W ≤ 10^3) – the number of boxes and the maximum weight the truck can carry. Each of the next n lines contains two integers w_i and v_i (1 ≤ w_i, v_i ≤ 1000) – the weight and value of the i-th box. -----Output----- Print a single integer – the maximum total value of boxes that can be loaded into the truck without exceeding the weight limit. -----Examples----- Input 4 10 5 10 4 40 6 30 3 50 Output 90 Input 3 7 2 10 3 20 4 30 Output 50 -----Note----- In the first example, choose the second and fourth boxes, their total weight is 4 + 3 = 7 and their total value is 40 + 50 = 90. In the second example, choose the first and second boxes, their total weight is 2 + 3 = 5 and their total value is 10 + 20 = 30.","solution":"def knapsack(n, W, items): Returns the maximum value that can be achieved with the given weight limit. :param n: int - the number of boxes :param W: int - the maximum weight the truck can carry :param items: List[Tuple[int, int]] - list of tuples where each tuple contains (weight, value) of a box :return: int - the maximum total value of boxes without exceeding the weight limit # Initialize a DP array where dp[i] represents the max value with i weight limit dp = [0] * (W + 1) for weight, value in items: # Traverse dp array from back to front for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) # The answer is the maximum value with the total weight limit W return max(dp)"},{"question":"You are given a positive integer N. Your task is to determine whether it\'s possible to represent N as the sum of three distinct positive integers A, B, and C such that A < B < C. If it\'s possible, return a tuple (A, B, C). If there are multiple solutions, return the one with the smallest A. If no such representation is possible, return -1. Example 1: Input: N = 6 Output: (1, 2, 3) Explaination: 1 + 2 + 3 = 6. Example 2: Input: N = 8 Output: (1, 2, 5) Explaination: 1 + 2 + 5 = 8. Example 3: Input: N = 5 Output: -1 Explaination: There are no three distinct positive integers that sum up to 5. Your Task: You do not need to read input or print anything. Your task is to complete the function findThreeNumbers() which takes N as an input parameter and returns a tuple (A, B, C) or -1 based on the conditions mentioned. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 3 ≤ N ≤ 10^{6}","solution":"def findThreeNumbers(N): Determines whether it\'s possible to represent N as the sum of three distinct positive integers A, B, and C such that A < B < C. If it\'s possible, returns a tuple (A, B, C). If no such representation is possible, returns -1. Parameters: N (int): The target sum, a positive integer. Returns: tuple: A tuple (A, B, C) if a solution exists, or -1 if no solution exists. # The smallest three distinct positive integers are 1, 2, and 3. if N < 6: return -1 # Start with the smallest possible valid combination: 1, 2, 3 # and incrementally increase the largest number. A, B, C = 1, 2, N - 3 # (N - 3 may produce valid C if A or B leads to valid answer) if A < B < C: return (A, B, C) return -1"},{"question":"Alice is working on a video streaming platform and is responsible for implementing the feature that suggests similar videos to users. She wants to determine if two videos are similar based on their tags. Each video has a set of tags associated with it. Two videos are considered similar if they share at least one tag in common. Given m pairs of videos and their tags, Alice needs to find out which pairs of videos are similar. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of videos. Each of the next n lines contains video id (an integer between 1 and n) followed by a list of tags associated with that video. Each tag is a lowercase alphabetic string and each video contains at most 100 tags. A video can have the same tag listed more than once, but it should be considered as one instance. The next line contains an integer m (1 ≤ m ≤ 1000) — the number of pairs of videos to check. Each of the next m lines contains a pair of integers v1 and v2 (1 ≤ v1, v2 ≤ n) — the ids of the two videos to check for similarity. -----Output----- Output m lines. On the i-th line output \\"Similar\\" if the i-th pair of videos share at least one tag, otherwise output \\"Not Similar\\". -----Examples----- Input 3 1 comedy romance drama 2 action thriller comedy 3 horror thriller 2 1 2 1 3 Output Similar Not Similar","solution":"def find_similar_videos(n, video_tags, m, pairs): # Create a dictionary to store the tags of each video video_dict = {} for video in video_tags: video_id = video[0] tags = set(video[1:]) video_dict[video_id] = tags # Function to check if two videos are similar def are_videos_similar(video1, video2): return not video_dict[video1].isdisjoint(video_dict[video2]) results = [] for pair in pairs: video1, video2 = pair if are_videos_similar(video1, video2): results.append(\\"Similar\\") else: results.append(\\"Not Similar\\") return results # Sample input n = 3 video_tags = [ [1, \'comedy\', \'romance\', \'drama\'], [2, \'action\', \'thriller\', \'comedy\'], [3, \'horror\', \'thriller\'] ] m = 2 pairs = [ [1, 2], [1, 3] ] # Output the results results = find_similar_videos(n, video_tags, m, pairs) for result in results: print(result)"},{"question":"In the ancient city of Grepolis, every house is uniquely numbered, and sacred scrolls are stored in a series of contiguous houses. The Grand Council is looking to retrieve these sacred scrolls, but they must ensure the total number of sacred scrolls they collect matches exactly with a predetermined sacred number, K. Given a list of numbers where each number represents the number of sacred scrolls found in a house, the council seeks your help to determine if there exists any contiguous subarray whose sum is exactly K. -----Input----- The input to the program consists of two lines. The first line contains an integer K (where 1 <= K <= 10^9). The second line contains space-separated integers representing the number of sacred scrolls in each house. The list of numbers will have at least 1 and at most 100 elements. -----Output----- Output a single line with a character \'Y\'/\'N\' indicating whether there exists a contiguous subarray whose sum is exactly K. -----Example----- Input: 15 1 2 3 4 5 6 7 8 9 10 Output: Y","solution":"def check_contiguous_subarray_sum(K, scrolls): Check if there exists a contiguous subarray whose sum is exactly K. :param K: int :param scrolls: list of int :return: str \'Y\' if such a subarray exists, \'N\' otherwise current_sum = 0 sum_dict = {} for i, scroll in enumerate(scrolls): current_sum += scroll if current_sum == K: return \'Y\' if (current_sum - K) in sum_dict: return \'Y\' sum_dict[current_sum] = i return \'N\'"},{"question":"A company is organizing a conference in a country. The country consists of N cities numbered 1 through N, with M bidirectional roads connecting them. We will use the following terms: - A path is a sequence of roads in which each road starts in the city the preceding road ended in. - A simple path is a path which never visits a city more than once. - A subgraph is a subset of cities and roads forming a smaller graph within the original network. The organizers want to find the largest connected subgraph containing city 1 such that the number of cities in the subgraph is a prime number. Your task is to identify the number of cities in the largest such subgraph. -----Input----- The first line of input contains two integers N and M (2 le N le 10000, 1 le M le 2N-2) – the number of cities and roads in the network. Each of the following M lines contains two different integers A and B (1 le A, B le N). These numbers indicate that there is a bidirectional road between cities A and B. No two cities will be directly connected by more than one road. -----Output----- Output the number of cities in the largest connected subgraph containing city 1 such that the number of cities in the subgraph is a prime number. If no such subgraph exists, output -1. -----Examples----- Sample Input 1: 5 4 1 2 1 3 3 4 4 5 Sample Output 1: 5 Sample Input 2: 6 5 1 2 2 3 2 4 3 5 4 6 Sample Output 2: 5","solution":"from collections import defaultdict, deque def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def largest_prime_subgraph(N, M, roads): Given the number of cities N, number of roads M, and list of bidirectional roads, return the number of cities in the largest connected subgraph containing city 1 such that the number of cities in the subgraph is a prime number. # Build adjacency list for the graph graph = defaultdict(list) for A, B in roads: graph[A].append(B) graph[B].append(A) # BFS to find the size of the connected component containing city 1 visited = set() queue = deque([1]) component_size = 0 while queue: node = queue.popleft() if node in visited: continue visited.add(node) component_size += 1 for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) # Find the largest prime number <= component_size for size in range(component_size, 1, -1): if is_prime(size): return size return -1"},{"question":"In probability and statistics, the concept of permutations is foundational. A permutation of a set is a specific arrangement of its elements. For this problem, we are concerned with a particular subset of permutations known as derangements. A derangement is a permutation of elements where none of the elements appear in their original position. For example, the derangements of the set {1, 2, 3} are: {2, 3, 1} and {3, 1, 2}. You need to write a function that determines the number of derangements for a given number of elements, n. -----Input----- A single integer n, ranging from 0 to 20. -----Output----- A single integer representing the number of derangements of the set {1, 2, ... , n}. -----Examples----- Sample Input: 3 Sample Output: 2 Sample Input: 4 Sample Output: 9","solution":"def count_derangements(n): Calculates the number of derangements (permutations where no element appears in its original position) for a set of size n. if n == 0: return 1 elif n == 1: return 0 derangements = [0] * (n + 1) derangements[0] = 1 derangements[1] = 0 for i in range(2, n + 1): derangements[i] = (i - 1) * (derangements[i - 1] + derangements[i - 2]) return derangements[n]"},{"question":"A robot is assembling objects for a construction project from a list of available components. Each component has a unique ID and a specific weight. The robot can carry multiple objects at once, but the combined weight of objects it carries should not exceed a maximum weight limit. Given the list of component weights, determine the maximum weight the robot can carry without exceeding the weight limit. -----Input----- The first line contains two integers: n and W (1 le n le 10^3, 1 le W le 10^6) — the number of components and the maximum weight limit. The second line contains n integers w_i (1 le w_i le 10^6) — the weights of the components. -----Output----- Output the maximum weight that the robot can carry without exceeding the weight limit. -----Example----- Input 5 10 2 3 8 1 6 Output 10 Explanation: The robot can carry components with weights 2, 3, and 5, or 10.","solution":"def max_weight(n, W, weights): Determines the maximum weight the robot can carry without exceeding the weight limit. Parameters: n (int): The number of components. W (int): The maximum weight limit. weights (list): A list of integers representing the weights of the components. Returns: int: The maximum weight that can be carried without exceeding the weight limit. # initialize a list to store the maximum weight that can be achieved for every weight limit dp = [0] * (W + 1) for weight in weights: for j in range(W, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) return dp[W] # Example Usage: # n = 5 # W = 10 # weights = [2, 3, 8, 1, 6] # print(max_weight(n, W, weights)) # Output: 10"},{"question":"In many scientific applications, especially in astronomy, we encounter series that follow a specific pattern. One such series is the Fibonacci series where each number is the sum of the two preceding ones, usually starting with 0 and 1. However, in this problem, we define a \\"modified Fibonacci series\\" where each number is the sum of the previous three numbers, and the series starts with 1, 2, and 3. You are to write a program that reads an integer m and prints the first m values of this modified Fibonacci series. Input An integer m indicating the number of values in the series to print. You may assume 3 ≤ m ≤ 50. Output Print the first m values of the modified Fibonacci series, each separated by a space. Example Input 5 7 Output 1 2 3 6 11 1 2 3 6 11 20 37","solution":"def modified_fibonacci(m): Generates the first m values in the modified Fibonacci series where each number is the sum of the previous three numbers, starting with 1, 2, and 3. Parameters: m (int): The number of values to generate in the series. Returns: List[int]: The first m values in the modified Fibonacci series. if m < 3: raise ValueError(\\"m must be at least 3\\") series = [1, 2, 3] while len(series) < m: next_value = series[-1] + series[-2] + series[-3] series.append(next_value) return series"},{"question":"Given a string S and a dictionary of words D, find the longest word in D that can be formed by deleting some characters of S without reordering the remaining characters. If there are multiple possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return an empty string. Input The first line contains the string S, consisting of lowercase English letters (1 ≤ |S| ≤ 1000). The second line contains an integer n (1 ≤ n ≤ 1000), which is the number of words in the dictionary. The following n lines each contain a word from the dictionary, consisting of lowercase English letters (1 ≤ |word| ≤ 1000). Output Print the longest word from the dictionary that can be formed by deleting some characters of S without reordering the remaining characters. If there are multiple words of the same length, print the one that comes first lexicographically. If no such word exists, print an empty string. Examples Input abpcplea 3 ale apple monkey Output apple Input abpcplea 3 a b c Output a Note In the first test case, \\"apple\\" is the longest word that can be formed by deleting some characters from S. \\"ale\\" and \\"apple\\" are potential outputs, but \\"apple\\" is longer, and \\"monkey\\" cannot be formed as its characters do not appear in S in the given order. In the second test case, all the words in the dictionary can be formed by deleting some characters from S, so the output is \\"a\\" as it is the smallest lexicographically.","solution":"def can_form_by_deleting(s, word): it = iter(s) return all(char in it for char in word) def find_longest_word(s, dictionary): longest_word = \\"\\" for word in dictionary: if can_form_by_deleting(s, word): if len(word) > len(longest_word) or (len(word) == len(longest_word) and word < longest_word): longest_word = word return longest_word"},{"question":"A chef is preparing a list of ingredients for a grand feast. They have a list of ingredients required for each dish. Their goal is to determine the minimum quantity of each ingredient needed to prepare all the dishes. Each ingredient may be used in multiple dishes. You are given an array of strings `ingredients`. Each string represents a dish and contains a list of ingredients required for that dish. Each ingredient appears in the format `ingredient_name:quantity`. Write a function that calculates the total quantity required for each unique ingredient across all the dishes. The result should be a dictionary where the keys are the ingredient names and the values are the total quantities required. ----- Input Format ------ - The first line of input contains a single integer `T`, the number of test cases. - For each test case: - The first line contains an integer `N`, the number of dishes. - The next `N` lines contain the list of ingredients for each dish, represented as a single string with ingredients in the format `ingredient_name:quantity` separated by commas. ----- Output Format ------ For each test case, output a dictionary where the keys are the ingredient names and the values are the total quantities required. ----- Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 - The length of each ingredient string is at most 1000. ----- Sample Input 1 ------ 1 3 tomato:2,cheese:3,lettuce:1 tomato:1,lettuce:2 cheese:2,tomato:3 ----- Sample Output 1 ------ {\'tomato\': 6, \'cheese\': 5, \'lettuce\': 3} ----- Explanation 1 ------ Test case 1: Summing the quantities for each ingredient across all dishes: - tomato: 2 + 1 + 3 = 6 - cheese: 3 + 2 = 5 - lettuce: 1 + 2 = 3","solution":"def calculate_ingredients(T, test_cases): Calculate the total quantity required for each unique ingredient across all the dishes. Parameters: T (int): Number of test cases. test_cases (list of tuple): Each tuple contains an integer N (number of dishes) and a list of strings representing the ingredients for each dish. Returns: list of dict: For each test case, return a dictionary where keys are ingredient names and values are the total quantities required. results = [] for case in test_cases: N, dishes = case ingredient_map = {} for dish in dishes: ingredients = dish.split(\',\') for ingredient in ingredients: name, quantity = ingredient.split(\':\') quantity = int(quantity) if name in ingredient_map: ingredient_map[name] += quantity else: ingredient_map[name] = quantity results.append(ingredient_map) return results # Example usage: # T = 1 # test_cases = [(3, [\\"tomato:2,cheese:3,lettuce:1\\", \\"tomato:1,lettuce:2\\", \\"cheese:2,tomato:3\\"])] # print(calculate_ingredients(T, test_cases)) # [{\'tomato\': 6, \'cheese\': 5, \'lettuce\': 3}]"},{"question":"A forest is represented as a grid of size MxN, where each cell can either be empty (0) or contain a tree (1). A fire starts at a given cell (x, y) and spreads to adjacent cells either vertically or horizontally. The spread of the fire cannot be diagonal. Write a function to determine the minimum number of minutes required to burn the entire forest. If the fire cannot reach some trees, return -1. Example 1: Input: M = 3, N = 3 Grid = [[1, 1, 1], [1, 1, 0], [0, 1, 1]] Start = (0, 0) Output: 4 Explanation: The fire spreads as follows: Minute 0: (0, 0) Minute 1: (0, 1), (1, 0) Minute 2: (0, 2), (1, 1) Minute 3: (2, 1) Minute 4: (2, 2) Example 2: Input: M = 4, N = 4 Grid = [[1, 1, 1, 0], [1, 0, 1, 1], [1, 0, 1, 0], [0, 1, 1, 1]] Start = (1, 2) Output: 5 Your Task: You don\'t need to read input or print anything. Your task is to complete the function min_minutes_to_burn_forest() which takes two integers M and N, a 2D list Grid representing the forest, and a tuple Start representing the starting point of the fire as input parameters, and returns the minimum number of minutes required to burn the entire forest or -1 if some trees are unreachable. Expected Time Complexity: O(M*N) Expected Auxiliary Space: O(M*N) Constraints: 1 ≤ M, N ≤ 1000 Grid[i][j] is either 0 or 1 Start is always a valid cell containing a tree (1)","solution":"from collections import deque def min_minutes_to_burn_forest(M, N, Grid, Start): # Check if the grid is empty or if no tree is present if not any(1 in row for row in Grid): return -1 queue = deque([(Start[0], Start[1], 0)]) # (x, y, minute) visited = set() visited.add((Start[0], Start[1])) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_minutes = 0 while queue: x, y, minutes = queue.popleft() max_minutes = max(max_minutes, minutes) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and Grid[nx][ny] == 1: visited.add((nx, ny)) queue.append((nx, ny, minutes + 1)) # Check if all trees are burned for i in range(M): for j in range(N): if Grid[i][j] == 1 and (i, j) not in visited: return -1 return max_minutes"},{"question":"You are given a string representing a sequence of words separated by spaces. Your task is to reverse the order of the words in the string while keeping the words themselves in their original order. Punctuation and capitalization should remain intact as they are. Write a function to achieve this transformation. Example: Input: \\"Hello world! This is a test.\\" Output: \\"test. a is This world! Hello\\"","solution":"def reverse_words_order(text): Reverses the order of words in the given string while keeping the words themselves in their original order. Args: text (str): A string representing a sequence of words separated by spaces. Returns: str: A string with the words in reverse order. words = text.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Write a function that takes a string of a temperature value with either a \\"C\\" (Celsius) or \\"F\\" (Fahrenheit) suffix and converts it to the other temperature scale. The function should return a string with the converted temperature value followed by the appropriate suffix (\\"C\\" or \\"F\\"). If the input does not follow the expected format or the temperature value is not valid, return `\\"Invalid input\\"`. - Celsius to Fahrenheit conversion formula: F = C * 9/5 + 32 - Fahrenheit to Celsius conversion formula: C = (F - 32) * 5/9 **Hint:** Use string manipulation to extract the number and suffix, and then apply the appropriate conversion formula. Example If the input is `\\"25C\\"`, the output should be `\\"77F\\"` because 25 degrees Celsius is equal to 77 degrees Fahrenheit. If the input is `\\"77F\\"`, the output should be `\\"25C\\"` because 77 degrees Fahrenheit is equal to 25 degrees Celsius. If the input is `\\"100Q\\"`, the output should be `\\"Invalid input\\"` because the suffix \\"Q\\" is not recognized. Good luck! :D","solution":"def convert_temperature(temp_str): Converts a temperature value between Celsius and Fahrenheit. Parameters: temp_str (str): The string containing the temperature value with either \\"C\\" or \\"F\\" suffix. Returns: str: The converted temperature value with the appropriate suffix or \\"Invalid input\\" if the input is not valid. if not isinstance(temp_str, str) or len(temp_str) < 2: return \\"Invalid input\\" # Extracting the temperature value and the suffix temp_value_str = temp_str[:-1] suffix = temp_str[-1].upper() # Checking if the input format is valid try: temp_value = float(temp_value_str) except ValueError: return \\"Invalid input\\" # Converting temperature based on the suffix if suffix == \\"C\\": # Convert from Celsius to Fahrenheit converted_temp = temp_value * 9/5 + 32 return f\\"{converted_temp:.1f}F\\" elif suffix == \\"F\\": # Convert from Fahrenheit to Celsius converted_temp = (temp_value - 32) * 5/9 return f\\"{converted_temp:.1f}C\\" else: return \\"Invalid input\\""},{"question":"You are given a collection of flight tickets represented as a 2D array `tickets` where `tickets[i] = [from_i, to_i]` represents a flight from airport `from_i` to airport `to_i`. You must reconstruct the itinerary in order and return it. All of the tickets form at least one valid itinerary. Your goal is to find the itinerary that starts from \\"JFK\\" and uses all the tickets once and only once. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary [\\"JFK\\", \\"LGA\\"] has a smaller lexical order than [\\"JFK\\", \\"LGB\\"]. You may assume all tickets form at least one valid itinerary. **Example 1:** Input: tickets = [[\\"MUC\\", \\"LHR\\"], [\\"JFK\\", \\"MUC\\"], [\\"SFO\\", \\"SJC\\"], [\\"LHR\\", \\"SFO\\"]] Output: [\\"JFK\\", \\"MUC\\", \\"LHR\\", \\"SFO\\", \\"SJC\\"] **Example 2:** Input: tickets = [[\\"JFK\\",\\"SFO\\"],[\\"JFK\\",\\"ATL\\"],[\\"SFO\\",\\"ATL\\"],[\\"ATL\\",\\"JFK\\"],[\\"ATL\\",\\"SFO\\"]] Output: [\\"JFK\\",\\"ATL\\",\\"JFK\\",\\"SFO\\",\\"ATL\\",\\"SFO\\"] Explanation: Another possible reconstruction is [\\"JFK\\",\\"SFO\\",\\"ATL\\",\\"JFK\\",\\"ATL\\",\\"SFO\\"] but it is larger in lexical order. **Constraints:** The number of tickets is in the range [1, 300]. `tickets[i].length == 2` `from_i.length == 3` and `to_i.length == 3` `from_i` and `to_i` consist of uppercase English letters. `tickets` form at least one valid itinerary.","solution":"from collections import defaultdict import heapq def findItinerary(tickets): Reconstructs the itinerary given a list of flight tickets. # Step 1: Create a graph from tickets using a dictionary with min-heaps graph = defaultdict(list) for start, end in tickets: heapq.heappush(graph[start], end) # Step 2: Perform Depth First Search (DFS) def dfs(node): itinerary = [] stack = [node] while stack: while graph[stack[-1]]: next_dest = heapq.heappop(graph[stack[-1]]) stack.append(next_dest) itinerary.append(stack.pop()) return itinerary[::-1] # Invoke DFS starting from \'JFK\' return dfs(\'JFK\')"},{"question":"------ Input ------ The rainforest is under threat due to deforestation. Every day, a certain number of trees are being cut down in the rainforest. Given the daily reports of tree loss over a period of time, you are to determine the final number of trees left after all the deforestation activities. Initially, the rainforest has T trees. Write a program to calculate the number of trees remaining at the end of the given period. ------ Input ------ The first line of the input contains an integer T, the initial number of trees. The second line contains an integer N, the number of days over which the deforestation reports are given. The third line contains N space-separated integers D1, D2, ..., DN where Di denotes the number of trees cut down on day i. ------ Output ------ The output should be a single integer, representing the number of trees left after all the days of deforestation. If at any point the number of trees becomes zero or negative, the output should be zero. ------ Constraints ------ 1 ≤ T ≤ 10^{9} 1 ≤ N ≤ 10^{5} 1 ≤ D_{i} ≤ 10^{4} ------ Example ------ ------ Input 1 ------ 100 4 10 20 30 25 ------ Output 1 ------ 15 Explanation: Initially, there are 100 trees. After day 1: 100 - 10 = 90 trees left. After day 2: 90 - 20 = 70 trees left. After day 3: 70 - 30 = 40 trees left. After day 4: 40 - 25 = 15 trees left. So, there are 15 trees remaining at the end. ------ Input 2 ------ 50 3 20 20 20 ------ Output 2 ------ 0 Explanation: Initially, there are 50 trees. After day 1: 50 - 20 = 30 trees left. After day 2: 30 - 20 = 10 trees left. After day 3: 10 - 20 = -10 trees left (but the result should be zero if the number of trees is negative).","solution":"def count_remaining_trees(T, N, tree_loss): Computes the number of trees remaining after N days of deforestation. Parameters: T (int): The initial number of trees. N (int): The number of days of deforestation reports. tree_loss (list of int): The number of trees cut down each day. Returns: int: The number of trees remaining after all the days of deforestation, or zero if it becomes negative or zero. for loss in tree_loss: T -= loss if T <= 0: return 0 return T"},{"question":"Given a list of integers, find and print all unique triplets in the list which give the sum of zero. -----Input----- The input consists of a single test case. The first line contains an integer n (0 leq n leq 100), denoting the number of elements in the list. The second line contains n space-separated integers a_1, a_2, ldots, a_n (−10^5 leq a_i leq 10^5), representing the elements of the list. -----Output----- Output all unique triplets [a_i, a_j, a_k] such that i, j, and k are distinct and a_i + a_j + a_k = 0. The triplets should be output in lexicographical order, one per line. If no such triplets exist, output nothing. -----Examples----- Sample Input: 5 -1 0 1 2 -1 -4 Sample Output: -1 -1 2 -1 0 1","solution":"def three_sum(nums): Given a list of integers, this function finds and returns all unique triplets in the list which give the sum of zero. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i + 1, len(nums) - 1 while left < right: curr_sum = nums[i] + nums[left] + nums[right] if curr_sum == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif curr_sum < 0: left += 1 else: right -= 1 return result"},{"question":"In a distant land, there is a kingdom where the king has decided to implement a unique form of taxation on the people. The kingdom is divided into multiple regions, each represented as a node, connected by roads. Each road has a toll fee associated with it, which the people need to pay when traversing from one region to another. The king wants to collect a fixed amount of tax money from each possible path between any two regions in the kingdom. To make this easier, he wants to improve the roads such that the total toll fee to be collected between any two regions is minimized while still allowing them to be connected. The king has a map of the kingdom in the form of a graph, where the regions are nodes and the roads are edges with associated toll fees. He wants to find the minimum spanning tree of the graph to collect the least possible toll fees overall while still ensuring every region can reach every other region via the roads. Your task is to help the king in determining the minimum spanning tree for the kingdom\'s map. -----Input----- The first line contains two integers n and m (1 le n le 100000, 0 le m le 200000) — the number of regions and the number of roads, respectively. The next m lines each contain three integers u, v, and w (1 le u, v le n, 1 le w le 100000), describing a road between regions u and v with a toll fee w. -----Output----- Output a single integer — the total toll fee of the minimum spanning tree of the graph. -----Examples----- Sample Input: 4 5 1 2 1 1 3 4 2 3 2 3 4 3 4 1 5 Sample Output: 6","solution":"def find_minimum_spanning_tree(n, m, roads): This function returns the total toll fee of the minimum spanning tree using Kruskal\'s algorithm. :param n: Number of regions :param m: Number of roads :param roads: List of tuples containing (u, v, w) where u and v are regions and w is the toll fee :return: Total toll fee of the minimum spanning tree def find(parent, u): if parent[u] != u: parent[u] = find(parent, parent[u]) return parent[u] def union(parent, rank, u, v): root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 parent = [i for i in range(n)] rank = [0] * n roads.sort(key=lambda x: x[2]) total_toll_fee = 0 edge_count = 0 for u, v, w in roads: if find(parent, u - 1) != find(parent, v - 1): union(parent, rank, u - 1, v - 1) total_toll_fee += w edge_count += 1 if edge_count == n - 1: break return total_toll_fee"},{"question":"Alexa loves puzzles and has designed one for you. She gives you an integer array `arr` of size `n` and asks you to determine if you can partition the array into two subsets such that the sum of the elements in both subsets is equal. Example 1: Input: arr = [1, 5, 11, 5] Output: 1 Explanation: The array can be partitioned as [1, 5, 5] and [11]. Example 2: Input: arr = [1, 2, 3, 5] Output: 0 Explanation: The array cannot be partitioned into equal sum subsets. Your Task: You do not need to read input or print anything. Your task is to complete the function canPartition() which takes an integer array `arr` as input parameter and returns 1 if the array can be partitioned into two subsets with equal sum, else returns 0. Expected Time Complexity: O(n * sum(arr)) Expected Auxiliary Space: O(n * sum(arr)) Constraints: 1 ≤ n ≤ 200 1 ≤ arr[i] ≤ 1000","solution":"def canPartition(arr): total_sum = sum(arr) # If the total sum is odd, it\'s not possible to partition into two subsets of equal sum if total_sum % 2 != 0: return 0 half_sum = total_sum // 2 n = len(arr) # Initialize dp array dp = [False] * (half_sum + 1) dp[0] = True # Base case: a sum of 0 is always possible # Process each number in the array for num in arr: for j in range(half_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] return 1 if dp[half_sum] else 0"},{"question":"Your team is working on a complex data processing task, and one of the challenges involves analyzing sequences of integers. Your task is to write a function that determines whether a given sequence can be split into two non-empty subsequences such that the sum of the elements in both subsequences is equal. To be more precise, given an array of integers, determine if it is possible to partition the array into two subsets such that the sum of the elements in both subsets is the same. Input Format: 1. First row with number of test cases (N). 2. Next N rows, each containing a sequence of space-separated integers representing the elements of an array. Output Format: 1. For each test case, print \\"YES\\" if it\'s possible to partition the array into two subsets with equal sum, otherwise print \\"NO\\". Example Input: 2 1 5 11 5 1 2 3 5 Example Output: YES NO Explanation: In the first test case, the array can be partitioned into [1, 5, 5] and [11], whose sums are both equal to 11. In the second test case, no two subsets exist that can partition the array into equal sums.","solution":"def can_partition(nums): Determine if the given list can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If the total sum is odd, it\'s not possible to split into two equal subsets if total_sum % 2 != 0: return \\"NO\\" subset_sum = total_sum // 2 n = len(nums) # Using dynamic programming approch dp = [False] * (subset_sum + 1) dp[0] = True for num in nums: for i in range(subset_sum, num - 1, -1): dp[i] = dp[i] or dp[i - num] return \\"YES\\" if dp[subset_sum] else \\"NO\\" def process_input(input_data): results = [] lines = input_data.strip().split(\'n\') T = int(lines[0]) for i in range(1, T + 1): nums = list(map(int, lines[i].split())) results.append(can_partition(nums)) return results"},{"question":"You are given an encoded string where each letter is substituted with its position in the alphabet (\'a\' = 1, \'b\' = 2, ..., \'z\' = 26). The encoded string is a sequence of these numbers separated by spaces. Your task is to decode this string back to its original alphabetical form. Input A single line of input containing the encoded string of space-separated numbers. Each number will be between 1 and 26 (inclusive). Output A single line of the decoded alphabetical string. Example Input: 8 5 12 12 15 Output: hello","solution":"def decode(encoded_string): Decodes a string where each number corresponds to a letter of the alphabet. Parameters: encoded_string (str): A string of space-separated numbers where each number is between 1 and 26. Returns: str: The decoded string in alphabetical form. # Split the input string into a list of numbers numbers = map(int, encoded_string.split()) # Convert each number to its corresponding letter and join to form the decoded string decoded_string = \'\'.join(chr(num + 96) for num in numbers) return decoded_string"},{"question":"A group of friends decided to play a simple online game where they take turns picking candies from a pile. The pile initially has `n` candies. On each player\'s turn, they can pick between 1 to `m` candies (inclusive). The player who is unable to pick any candies (because the pile is empty) loses the game. The game starts with the first player picking candies, and then alternates between the first and the second player. If both players play optimally, determine who will win the game. -----Input----- The input consists of two integers: - `n` (1 ≤ n ≤ 1000) - the initial number of candies in the pile. - `m` (1 ≤ m ≤ 50) - the maximum number of candies a player can pick on their turn. -----Output----- If the first player wins, print \\"First\\". If the second player wins, print \\"Second\\". -----Example----- Input 10 2 Output First Input 4 3 Output Second -----Note----- In the first example, with 10 candies and maximum 2 candies pickable per turn, the first player can ensure to always leave an even number of candies for the second player. After several turns, the first player will eventually leave 2 candies for the second player, forcing them to pick either 1 or 2 candies and lose. In the second example, with 4 candies and maximum 3 candies pickable per turn, the first player cannot make a move that forces an immediate win, and with optimal play, the second player will win.","solution":"def find_winner(n, m): Determines the winner of the game given number of candies n and maximum pickable candies m. If the first player wins, return \\"First\\". If the second player wins, return \\"Second\\". if n % (m + 1) == 0: return \\"Second\\" else: return \\"First\\""},{"question":"You are given a string of any printable ASCII characters. Your task is to write a function that examines the string and returns a dictionary with the count of vowels (a, e, i, o, u) present in the string, case-insensitive. If no vowels are found, the dictionary should return the count as 0 for each vowel. Input A single string `s` of length `1 ≤ |s| ≤ 10^4`. The string consists of any printable ASCII characters. Output A dictionary containing the counts of each vowel in the string. The keys should be the vowels \'a\', \'e\', \'i\', \'o\', \'u\', and the values should be their respective counts in the string. Example Input \\"Hello, World!\\" Output {\'a\': 0, \'e\': 1, \'i\': 0, \'o\': 2, \'u\': 0} Input \\"Python Programming Language\\" Output {\'a\': 3, \'e\': 1, \'i\': 1, \'o\': 2, \'u\': 1}","solution":"def count_vowels(s): Count the number of vowels in the given string s. Parameters: s (str): Input string to count vowels from. Returns: dict: A dictionary with the vowels as keys and their counts as values. vowels = \'aeiou\' counts = {vowel: 0 for vowel in vowels} for char in s.lower(): if char in vowels: counts[char] += 1 return counts"},{"question":"Polycarpus has an array of integers, and he likes arrays where the sum of the elements is as large as possible. However, the array Polycarpus has is not always optimal. To try and maximize the sum, Polycarpus can perform the following operation an infinite number of times: He chooses any two elements of the array a_i and a_j (i ≠ j). He simultaneously increases a_i by a positive integer x and decreases a_j by the same integer x, such that a_j does not become negative. Polycarpus wants to find out the maximum possible sum of the array elements after performing an arbitrary number of operations. Help Polycarpus to figure this out. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the size of the array. The second line contains space-separated integers a_1, a_2, ..., a_{n} (0 ≤ a_i ≤ 10^4) — the initial array. -----Output----- Print a single integer — the maximum possible sum of the array elements after performing an arbitrary number of the given operation. -----Examples----- Input 3 1 2 3 Output 6 Input 4 1 1 1 1 Output 4","solution":"def maximize_sum(arr): This function takes a list of integers `arr` and returns the maximum possible sum of the array elements after performing the described operations. return sum(arr)"},{"question":"An internet service provider (ISP) needs to monitor network usage of its customers. The ISP has \'n\' different customers, each with a unique customer ID. Each customer generates a certain amount of usage data (in gigabytes) on a daily basis. The ISP wants to determine the total data usage for each customer over a period of \'d\' days. You are given: - An integer \'n\', the number of customers. - An integer \'d\', the number of days. - A 2D list \'usage\', where \'usage[i][j]\' represents the data usage (in GB) of customer \'i\' on day \'j\'. Write a program to calculate the total data usage for each customer over \'d\' days. The program should output the customer ID (0-indexed) and their total data usage, sorted by customer ID. Constraints * 1 ≤ n ≤ 10^3 * 1 ≤ d ≤ 10^3 * 0 ≤ usage[i][j] ≤ 10^3 Input Input is given from Standard Input: The first line contains two integers \'n\' and \'d\'. The next \'n\' lines each contain \'d\' integers, representing the data usage (in GB) by each customer for each day. Output Output the total data usage for each customer sorted by customer ID: Each line should contain two integers - the customer ID and their total data usage over \'d\' days. Examples Input 3 4 1 2 3 4 2 3 4 5 3 4 5 6 Output 0 10 1 14 2 18 Input 2 3 0 0 0 1 1 1 Output 0 0 1 3","solution":"def calculate_total_usage(n, d, usage): Calculate the total data usage for each customer over d days. Parameters: n (int): Number of customers. d (int): Number of days. usage (list of list of int): 2D list where usage[i][j] represents the data usage of customer i on day j. Returns: list of tuples: List of tuples where each tuple contains (customer_id, total_data_usage). result = [] for customer_id in range(n): total_usage = sum(usage[customer_id]) result.append((customer_id, total_usage)) return result def format_output(result): Format the list of tuples into the required output format for printing. Parameters: result (list of tuples): List of tuples where each tuple contains (customer_id, total_data_usage). Returns: list of strings: Formatted output as a list of strings. output = [] for customer_id, total_usage in result: output.append(f\\"{customer_id} {total_usage}\\") return output if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) d = int(data[1]) usage = [] index = 2 for i in range(n): usage.append([int(data[index + j]) for j in range(d)]) index += d result = calculate_total_usage(n, d, usage) output = format_output(result) for line in output: print(line)"},{"question":"You are a student of University of Aizu. You volunteer at a local library on weekends. The library has a recognition program for its members who borrow books frequently. To avoid pen-and-paper calculations each week, the library manager would like you to design a program to identify these frequent borrowers and calculate the total dues for each one of them. Frequent borrowers are defined as those members who borrow books more than 3 times in a month. The library charges a fee of 100 yen for each borrowed book. Write a program that takes the borrowing records for a month and outputs a list of frequent borrowers along with their total dues. Your program should ignore members who borrowed books 3 or fewer times. Input The input consists of multiple datasets. The last dataset is followed by a line containing a single zero. You don\'t have to process this data. For each dataset, the first line contains a single integer n. n (0 < n ≤ 100) is the number of borrowing records in a month. Each of the following n lines gives the details of a borrowing record in the following format: id date name id is a unique identifier for each member (1 ≤ id ≤ 1000). date is the date the book was borrowed in the MM-DD format. name is the member\'s name (without spaces). Output Your program should print the id, name, and total dues for each frequent borrower in the following format: id name total_dues Output the results for each dataset in descending order of total dues. If two members have the same total dues, they should be ordered by id in ascending order. If no member qualifies as a frequent borrower in the dataset, output \\"no frequent borrower\\". Example Input 5 101 03-15 Alice 102 03-15 Bob 103 03-15 Charlie 101 03-18 Alice 101 03-21 Alice 104 03-25 Dave 101 03-28 Alice 102 03-29 Bob 106 03-29 Eve 103 03-29 Charlie 0 Output 101 Alice 400 104 Dave 100 103 Charlie 100 106 Eve 100 102 Bob 100","solution":"def frequent_borrowers(records): from collections import defaultdict borrow_count = defaultdict(int) member_info = {} for record in records: id, date, name = record.split() id = int(id) borrow_count[id] += 1 member_info[id] = name frequent_borrowers = {id: count for id, count in borrow_count.items() if count > 3} if not frequent_borrowers: return \\"no frequent borrower\\" result = [(id, member_info[id], count * 100) for id, count in frequent_borrowers.items()] result.sort(key=lambda x: (-x[2], x[0])) # Sort by total dues descending, then by id ascending return [f\\"{id} {name} {dues}\\" for id, name, dues in result]"},{"question":"You have been hired to manage a new amusement park attraction called the \\"Roller Coaster Simulation.\\" To simulate the heights of the roller coaster, you need to arrange a sequence of n consecutive peaks and valleys. Furthermore, the heights of these peaks and valleys need to form a permutation q of integers from 1 to n, where q_i represents the height at the i-th position (1 leq i leq n). Your task is to ensure the highs and lows of the roller coaster are within a certain minimum difference from each other. Specifically, you need to create a permutation q of length n such that the minimum difference between any two adjacent heights is maximized across the entire sequence. Determine any sequence of heights q of length n with the maximum minimum difference between adjacent heights. In this problem, a permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [3,1,4,2,5] is a permutation, but [2,3,3] is not a permutation (3 appears twice in the array) and [1,2,6] is also not a permutation (n=3, but 6 is in the array). -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^4). Description of the test cases follows. The only line for each test case contains a single integer n (3 le n le 2 cdot 10^5) — the number of heights in the roller coaster sequence. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print n integers q_1, q_2, ldots, q_n — the sequence of roller coaster heights with the maximum minimum difference between adjacent heights. If there are multiple answers, print any of them. -----Examples----- Input 3 3 4 5 Output 3 1 2 1 3 2 4 5 1 4 2 3 -----Note----- For n = 3, the possible sequences q are: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]. For q = [3, 1, 2], the differences are |3-1| = 2 and |1-2| = 1. The minimum difference is 1. For q = [1, 3, 2], the differences are |1-3| = 2 and |3-2| = 1. The minimum difference is 1. Thus, [1, 3, 2] or [3, 1, 2] are optimal permutations such that the minimum difference between adjacent heights is maximized.","solution":"def max_min_diff_permutation(n): Function to generate a permutation of n integers such that the minimum difference between adjacent heights is maximized. if n % 2 == 0: return list(range(1, n + 1, 2)) + list(range(2, n + 1, 2)) else: return list(range(1, n + 1, 2)) + list(range(2, n, 2)) def process_test_cases(t, test_cases): Process multiple test cases and return the result for each in a list. result = [] for n in test_cases: permutation = max_min_diff_permutation(n) result.append(permutation) return result"},{"question":"You are organizing a charity raffle event and you have a list of ticket numbers. Due to some constraints, each attendee can only win once. Therefore, if an attendee wins, any additional tickets they have should not be considered for further prizes. Your task is to determine the minimum number of distinct winners that can be selected from the list of ticket numbers. -----Input----- - The first line contains an integer n (1 leq n leq 10^5) - the total number of ticket numbers. - The second line contains n integers, a_1, a_2, ..., a_n (1 leq a_i leq 10^9) - the list of ticket numbers. -----Output----- Print a single integer, the minimum number of distinct winners that can be selected from the list of ticket numbers. -----Examples----- Sample Input 1: 5 1 1 2 2 3 Sample Output 1: 3 Sample Input 2: 4 4 4 4 4 Sample Output 2: 1 Sample Input 3: 6 2 3 3 4 4 5 Sample Output 3: 4 Sample Input 4: 3 1 2 3 Sample Output 4: 3","solution":"def min_distinct_winners(n, tickets): Returns the minimum number of distinct winners. # Use a set to keep track of unique tickets distinct_tickets = set(tickets) # The number of distinct winners will be the size of this set return len(distinct_tickets)"},{"question":"Given two strings S and T, where T is a subsequence of S. You need to form T by deleting characters from S and rearranging the remaining characters. Determine the minimum number of deletions required to form T from S. Example 1: Input: S = \\"abcabc\\" T = \\"aabb\\" Output: 2 Explanation: Remove the two \'c\' characters from \\"abcabc\\" to form \\"aabb\\". Example 2: Input: S = \\"abcdefgh\\" T = \\"ace\\" Output: 5 Explanation: Remove \'b\', \'d\', \'f\', \'g\', \'h\' from \\"abcdefgh\\" to get \\"ace\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function minDeletions(S, T) which takes two strings S and T as input and returns the minimum number of deletions required to form T from S. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ Length of S, T ≤ 10^5","solution":"from collections import Counter def minDeletions(S, T): Returns the minimum number of deletions required to form T from S. count_S = Counter(S) count_T = Counter(T) deletions = 0 for char, count in count_S.items(): if count > count_T[char]: deletions += count - count_T[char] return deletions"},{"question":"You are given an array of N integers, A_1, A_2, ..., A_N. A query guides you to reverse the order of a subarray from index L to R (inclusive) in the array. After performing the operation, you are required to determine the sum of the entire array. You have to perform this for multiple queries independently. -----Input----- The first line contains a single integer T, the number of test cases. T test cases follow where each test case contains three lines: - The first line of a test case contains a single integer N, the size of the array. - The second line of the test case contains N space-separated integers, representing the array A_1, A_2, ..., A_N. - The third line contains three space-separated integers, L, R, and Q, where L and R represent the bounds of the subarray to be reversed (0-based index), and Q represents the number of times this reversal operation is to be performed. -----Output----- For each test case, output a single line containing the sum of the array after the given operations. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - 1 le Q le 10^{9} - 0 le L le R < N - -10^9 le A_i le 10^9 -----Sample Input----- 3 5 3 8 4 7 6 1 3 2 6 1 2 3 4 5 6 0 5 1 4 2 2 2 2 1 1 5 -----Sample Output----- 28 21 8 -----Explanation:----- In the first test case, the subarray from index 1 to 3 (8, 4, 7) is reversed twice (effectively, reversing it back to its original order). The sum of the array remains 3 + 8 + 4 + 7 + 6 = 28. In the second test case, the entire array is reversed once, resulting in [6, 5, 4, 3, 2, 1]. The sum of the array is 6 + 5 + 4 + 3 + 2 + 1 = 21. In the third test case, the subarray from index 1 to 1 remains unchanged regardless of how many times it is reversed. Thus, the sum of the array remains 2 + 2 + 2 + 2 = 8.","solution":"def reverse_subarray_sum(N, arr, L, R, Q): Given an array of N integers, reverses the subarray from index L to R (inclusive) Q times and returns the sum of the array after the operation. Parameters: N : int - The size of the array. arr : list of int - The array of integers. L : int - The starting index of the subarray to be reversed (0-based). R : int - The ending index of the subarray to be reversed (0-based). Q : int - The number of times the reversal operation is to be performed. Returns: int - The sum of the array after performing the operations. # Since reversing an even number of times results in the original array, # we only need to reverse once if Q is odd. if Q % 2 == 1: subarray = arr[L:R+1] arr[L:R+1] = subarray[::-1] return sum(arr) def process_test_cases(T, test_cases): Processes multiple test cases. Parameters: T : int - The number of test cases. test_cases : list of tuples - Each tuple contains the inputs for a test case: (N, arr, L, R, Q) Returns: list of int - The outputs for each test case. results = [] for N, arr, L, R, Q in test_cases: results.append(reverse_subarray_sum(N, arr, L, R, Q)) return results"},{"question":"Design and implement a function that checks whether a given string is a valid palindrome after performing at most one transformation on a single character. A string is considered a palindrome if it reads the same forward and backward. Example 1: Input : str = \\"abca\\" Output : true Explanation: You could replace \'c\' with \'b\' to make it \\"abba\\", which is a palindrome. Example 2: Input : str = \\"racecar\\" Output : true Explanation: The original string \\"racecar\\" is already a palindrome, no changes required. Example 3: Input : str = \\"abcdef\\" Output : false Explanation: No single character replacement can transform \\"abcdef\\" into a palindrome. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function validPalindrome() that takes a single string (str) and returns a boolean value indicating whether the string can be a palindrome after at most one character transformation. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ |str| ≤ 10^5 The string contains only lowercase English letters.","solution":"def validPalindrome(s: str) -> bool: This function checks if a given string can be transformed into a palindrome by changing at most one character. def is_palindrome_range(s, i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Try skipping the left or the right characters respectively to see if we can form a palindrome return is_palindrome_range(s, left + 1, right) or is_palindrome_range(s, left, right - 1) left += 1 right -= 1 return True"},{"question":"Given a set of points in a 2D plane, write a program to find the smallest enclosing circle that contains all the points. The smallest enclosing circle (or minimum enclosing circle) is the circle with the smallest possible radius that completely encloses all the given points. Input The input consists of multiple test cases. Each test case starts with an integer n (1 ≤ n ≤ 100) denoting the number of points, followed by n lines, each containing two integers x and y (−1000 ≤ x, y ≤ 1000) representing the coordinates of a point. The input terminates when n is zero. Output For each test case, output three space-separated values: the x-coordinate and y-coordinate of the center of the smallest enclosing circle, and the radius of the circle. The center coordinates and the radius should be output with six decimal places of precision. Example Input 3 0 0 1 0 0 1 4 1 1 2 2 3 3 4 4 0 Output 0.500000 0.500000 0.707107 2.500000 2.500000 2.121320","solution":"import math def find_smallest_enclosing_circle(points): def dist(a, b): return math.hypot(a[0] - b[0], a[1] - b[1]) def circle_from_2_points(A, B): Cx = (A[0] + B[0]) / 2 Cy = (A[1] + B[1]) / 2 r = dist(A, B) / 2 return (Cx, Cy, r) def circle_from_3_points(A, B, C): ox = (min([A[0], B[0], C[0]]) + max([A[0], B[0], C[0]])) / 2 oy = (min([A[1], B[1], C[1]]) + max([A[1], B[1], C[1]])) / 2 ax, ay = A[0] - ox, A[1] - oy bx, by = B[0] - ox, B[1] - oy cx, cy = C[0] - ox, C[1] - oy d = (ax * (by - cy) + bx * (cy - ay) + cx * (ay - by)) * 2 if d == 0: return (ox, oy, max(dist(ox, oy, A), dist(ox, oy, B), dist(ox, oy, C))) x = ox + ((ax * ax + ay * ay) * (by - cy) + (bx * bx + by * by) * (cy - ay) + (cx * cx + cy * cy) * (ay - by)) / d y = oy + ((ax * ax + ay * ay) * (cx - bx) + (bx * bx + by * by) * (ax - cx) + (cx * cx + cy * cy) * (bx - ax)) / d r = dist([x, y], A) return (x, y, r) def is_in_circle(p, circle): return dist(p, (circle[0], circle[1])) <= circle[2] + 1e-9 def welzl(points, R): if not points or len(R) == 3: if len(R) == 0: return (0, 0, 0) if len(R) == 1: return (R[0][0], R[0][1], 0) if len(R) == 2: return circle_from_2_points(R[0], R[1]) return circle_from_3_points(R[0], R[1], R[2]) P = points[:] p = P.pop() circle = welzl(P, R) if is_in_circle(p, circle): return circle else: return welzl(P, R + [p]) return welzl(points, []) def process_input_and_find_circles(input_data): input_lines = input_data.strip().split(\\"n\\") results = [] i = 0 while i < len(input_lines): n = int(input_lines[i]) if n == 0: break points = [] for j in range(n): x, y = map(int, input_lines[i + j + 1].split()) points.append((x, y)) circle = find_smallest_enclosing_circle(points) results.append(f\\"{circle[0]:.6f} {circle[1]:.6f} {circle[2]:.6f}\\") i += n + 1 return results"},{"question":"A village is preparing for the annual harvest festival. There are n fields in the village, connected by m bidirectional paths forming a simple graph (i.e., without self-loops or multiple edges). The fields are numbered from 1 to n and the paths are numbered from 1 to m. Each path i has an associated energy cost wi needed to traverse it. The villagers want to travel between their fields efficiently. They have q queries where each query consists of a pair of fields and a maximum energy limit. For each query, determine if it\'s possible to travel between the specified pair of fields using paths such that the total energy cost does not exceed the given limit. Input The first line of the input contains integers n, m, and q (2 ≤ n ≤ 1000, 1 ≤ m, q ≤ 200 000) — the number of fields, the number of paths, and the number of queries, respectively. Each of the next m lines contains three integers vi, ui, wi (1 ≤ vi, ui ≤ n, vi ≠ ui, 1 ≤ wi ≤ 10^6) — the indices of the fields connected by the i-th path and the energy cost to traverse that path. The last q lines contain the queries. Each query consists of three integers si, ti, Ei (1 ≤ si, ti ≤ n, si ≠ ti, 1 ≤ Ei ≤ 10^6) — the starting field, the destination field, and the maximum energy limit. Output For each query, output \\"Yes\\" (without quotes) if it is possible to travel from field si to field ti using paths such that the total energy cost does not exceed Ei, otherwise output \\"No\\" (without quotes). Example Input 5 5 4 1 2 3 1 3 4 2 4 5 3 4 3 4 5 2 1 4 6 1 5 10 2 5 7 3 2 4 Output No Yes Yes No","solution":"from heapq import heappop, heappush from typing import List, Tuple def is_path_possible(n: int, m: int, q: int, edges: List[Tuple[int, int, int]], queries: List[Tuple[int, int, int]]) -> List[str]: graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start: int, max_energy: int) -> List[int]: costs = [float(\'inf\')] * (n + 1) costs[start] = 0 heap = [(0, start)] while heap: current_cost, u = heappop(heap) if current_cost > costs[u]: continue for v, w in graph[u]: if w <= max_energy and current_cost + w < costs[v]: costs[v] = current_cost + w heappush(heap, (costs[v], v)) return costs results = [] for s, t, E in queries: min_costs = dijkstra(s, E) if min_costs[t] <= E: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given a matrix of size NxN filled with integers. Your task is to find a submatrix of size KxK whose sum of elements is the largest among all possible KxK submatrices within the given NxN matrix. Input Format The first line contains two integers N and K, where (1 <= K <= N <= 100). The next N lines each contain N integers separated by spaces representing the matrix. Output Format Output the sum of the elements in the submatrix with the largest sum. Sample Input 0 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Sample Output 0 54 Explanation 0 In this example, the submatrix with the largest sum is: ``` 11 12 15 16 ``` And the sum is 11 + 12 + 15 + 16 = 54. Sample Input 1 3 2 1 1 1 2 2 2 3 3 3 Sample Output 1 10 Explanation 1 In this example, the submatrix with the largest sum is: ``` 2 2 3 3 ``` And the sum is 2 + 2 + 3 + 3 = 10.","solution":"def max_submatrix_sum(N, K, matrix): def submatrix_sum(i, j): return sum(matrix[x][y] for x in range(i, i + K) for y in range(j, j + K)) max_sum = float(\'-inf\') for i in range(N - K + 1): for j in range(N - K + 1): current_sum = submatrix_sum(i, j) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Amelia works as a data analyst at a company that performs extensive text processing. She is currently working on a project where she needs to analyze a collection of text documents to determine how frequently certain words appear. However, she has noticed that some words are more important than others based on their frequency. To prioritize her work, she wants to find the **k most frequent words** in a given list of words. Your task is to help Amelia write a function to find the **k most frequent words** in the list. If there are multiple words with the same frequency, you should prioritize the words that appeared earlier in the input list. You may use any programming language of your choice. # Function Signature ```python def top_k_frequent_words(words: List[str], k: int) -> List[str]: pass ``` # Input - `words` (List[str]): A list of words containing between 1 and 10⁵ words, where each word consists of lowercase English letters. - `k` (int): An integer representing the number of top frequent words to return, where 1 ≤ k ≤ 10⁵. # Output - The function should return a list of `k` words that are the most frequent in the input list. # Example ```python # Example 1 words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] k = 2 # Expected Output: [\\"apple\\", \\"banana\\"] # Example 2 words = [\\"hello\\", \\"world\\", \\"hello\\", \\"day\\", \\"night\\", \\"day\\", \\"day\\", \\"world\\"] k = 3 # Expected Output: [\\"day\\", \\"hello\\", \\"world\\"] ``` # Constraints - The length of each word will be between 1 and 100. - You should aim to solve this problem with a time complexity of approximately O(n log k). Write your function in such a way to ensure it is optimized for large datasets. The function should handle both the frequency calculation and the sorting of the words accurately according to the specified criteria.","solution":"from collections import Counter from typing import List def top_k_frequent_words(words: List[str], k: int) -> List[str]: Returns the k most frequent words in the given list of words. :param words: A list of words containing between 1 and 100000 words. :param k: An integer representing the number of top frequent words to return. :return: A list of k words that are the most frequent in the input list. # Count frequency of each word word_count = Counter(words) # Sort words first by frequency (highest first), then by order of appearance (position in words list) sorted_words = sorted(word_count.keys(), key=lambda word: (-word_count[word], words.index(word))) return sorted_words[:k]"},{"question":"A company is organizing a remote competition among its employees featuring a series of challenges, all conducted online. To manage large-scale participation, the event has multiple rounds, and in each round, participants are paired off in matches. Each match is a contest between two participants where the winner is determined based on their respective skill levels. A participant\'s skill level is represented by an integer. In each match, the participant with the higher skill level always wins. If two participants have the same skill level, a winner is randomly determined, but for the sake of this problem, you can assume the match never results in a tie and one of them wins. Given the initial skill levels of the participants and a list of matches, you are tasked with determining the overall winner of the final round of matches held between the winners of each previous round. Your task is to simulate the matches and output the overall winner\'s skill level. Input Format The first line of input contains an integer n (the number of participants in the first round). The second line contains n space-separated integers representing the skill levels of the participants. Each of the subsequent lines contains two integers x_i and y_i (1 le x_i, y_i le n) representing that the participant x_i and the participant y_i are paired off in a match. Constraints 2 le n le 1000 1 le text{Skill level of each participant} le 1000 Output Format Print a single integer which is the skill level of the overall winner after all rounds of matches have been simulated. Sample Input 4 4 3 7 5 1 3 2 4 3 4 Sample Output 7 Explanation In the first round: - Participant 1 (skill 4) and Participant 3 (skill 7) are paired; Participant 3 wins. - Participant 2 (skill 3) and Participant 4 (skill 5) are paired; Participant 4 wins. In the second round: - Participant 3 (skill 7) and Participant 4 (skill 5) are paired; Participant 3 wins. Thus, the overall winner\'s skill level is 7.","solution":"def find_overall_winner(n, skill_levels, matches): while len(skill_levels) > 1: next_round_skills = [] for x, y in matches: if skill_levels[x - 1] > skill_levels[y - 1]: next_round_skills.append(skill_levels[x - 1]) else: next_round_skills.append(skill_levels[y - 1]) skill_levels = next_round_skills n = len(skill_levels) matches = [(i, i+1) for i in range(1, n, 2)] return skill_levels[0] # Example usage: n = 4 skill_levels = [4, 3, 7, 5] matches = [(1, 3), (2, 4), (3, 4)] print(find_overall_winner(n, skill_levels, matches)) # Output: 7"},{"question":"Consider a robot that is placed in an NxN grid. The robot starts at the top-left corner of the grid (position (0, 0)), and its goal is to reach the bottom-right corner (position (N-1, N-1)). The robot can only move either down or right at any point in time. However, in some cells, there can be obstacles that prevent the robot from entering those cells. You need to write a program to count the number of unique paths that the robot can take to reach the goal without hitting any obstacles. ----Input---- - The first line contains an integer T, the number of test cases. - Each test case consists of two lines. - The first line of each test case contains an integer N, the size of the grid. - The second line contains a list of coordinates where obstacles are located, formatted as [(x1, y1), (x2, y2), ..., (xk, yk)]. ---Output--- For each test case, output a single integer that represents the number of unique paths from the top-left to the bottom-right of the grid. ----Constraints---- - 1 leq T leq 10 - 1 leq N leq 100 - 0 leq K leq N^2, where K is the number of obstacles - Coordinates are given in 0-based indexing. ----Example Input--- 2 3 [(1, 1)] 3 [(1, 1), (1, 2), (2, 1)] ----Example Output--- 2 0 ----Explanation---- In the first example, the grid is 3x3 with an obstacle at position (1, 1). The robot has two unique paths to reach the bottom-right corner: Down -> Down -> Right -> Right, and Right -> Right -> Down -> Down. In the second example, the grid is also 3x3, but it has more obstacles blocking all possible paths from the top-left to the bottom-right corner, so there are 0 unique paths.","solution":"def unique_paths_with_obstacles(n, obstacles): # Create a grid initialized to 0 grid = [[0] * n for _ in range(n)] # Place obstacles in the grid for (x, y) in obstacles: grid[x][y] = -1 # Initialize start position if grid[0][0] == -1: return 0 grid[0][0] = 1 # Fill the paths in the grid for i in range(n): for j in range(n): if grid[i][j] == -1: continue # Skip obstacles if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] return grid[n-1][n-1] def count_unique_paths(t, test_cases): results = [] for i in range(t): n, obstacles = test_cases[i] results.append(unique_paths_with_obstacles(n, obstacles)) return results"},{"question":"Tom has a collection of colored beads, and he wants to form a necklace of a specific length by selecting a consecutive subsequence of beads from his collection. Each bead is represented by a lowercase English letter indicating its color. Tom wants the necklace to have the maximum possible number of different colors. Your task is to find the maximum number of distinct colors that Tom can have in the necklace of the given length. -----Constraints----- - 1 ≤ n ≤ |beads| ≤ 200,000 - beads consists of lowercase English letters. - 1 ≤ length of the necklace ≤ n -----Input----- The input is given from Standard Input in the following format: ``` beads length ``` -----Output----- Print the maximum number of different colors that the necklace can have. -----Sample Input----- abcabcabc 3 -----Sample Output----- 3 By selecting any three consecutive beads such as \'abc\', \'bca\', or \'cab\', Tom can have a necklace with 3 different colors. -----Sample Input----- aabbcc 2 -----Sample Output----- 2 By selecting any two consecutive beads such as \'aa\', \'bb\', or \'cc\', Tom can have a necklace with only 1 different color (e.g., \'aa\'), but selecting \'ab\' or \'bc\' will give him 2 different colors.","solution":"def max_distinct_colors(beads, length): Returns the maximum number of distinct colors that can form a necklace of the given length from the input string beads. n = len(beads) max_distinct = 0 char_count = {} for i in range(length): if beads[i] in char_count: char_count[beads[i]] += 1 else: char_count[beads[i]] = 1 max_distinct = len(char_count) for i in range(length, n): start_char = beads[i - length] char_count[start_char] -= 1 if char_count[start_char] == 0: del char_count[start_char] new_char = beads[i] if new_char in char_count: char_count[new_char] += 1 else: char_count[new_char] = 1 max_distinct = max(max_distinct, len(char_count)) return max_distinct"},{"question":"Jessie is developing a chemical formula parser as part of her chemistry project. She needs a tool to calculate the number of atoms of each element in a given chemical formula. The chemical formula will be provided as a string where each capital letter represents a new element, and may be followed by a number representing the count of atoms of that element. For example, in H2O, \'H\' represents hydrogen with a count of 2 and \'O\' represents oxygen with a count of 1. Elements may also appear within nested parentheses indicating a compound, and the entire compound may be followed by a number denoting how many times the compound repeats. Your task is to write a function that parses the given chemical formula string and returns a dictionary containing the number of atoms of each element. ---Input--- The input consists of a single string s representing the chemical formula. The formula is guaranteed to be a valid chemical formula composed of elements represented by capital letters followed optionally by a number (if no number is present, the count is 1) and may contain nested parentheses with numbers. 1 <= len(s) <= 1000 s contains only uppercase/lowercase letters, digits, and parentheses. ---Output--- Output should be in the form of a dictionary where keys are element symbols and values are the corresponding counts of atoms. ---Examples--- Input H2O Output {\'H\': 2, \'O\': 1} Input Mg(OH)2 Output {\'Mg\': 1, \'O\': 2, \'H\': 2} Input K4(ON(SO3)2)2 Output {\'K\': 4, \'O\': 14, \'N\': 2, \'S\': 4} Note: Elements symbols are case-sensitive. The formula may contain multiple nested levels of parentheses.","solution":"import collections def count_atoms(formula: str) -> dict: def parse(formula): n = len(formula) stack = [collections.Counter()] i = 0 while i < n: if formula[i] == \'(\': stack.append(collections.Counter()) i += 1 elif formula[i] == \')\': top = stack.pop() i += 1 i_start = i while i < n and formula[i].isdigit(): i += 1 multiplier = int(formula[i_start:i] or 1) for k, v in top.items(): stack[-1][k] += v * multiplier else: i_start = i i += 1 while i < n and formula[i].islower(): i += 1 element = formula[i_start:i] i_start = i while i < n and formula[i].isdigit(): i += 1 count = int(formula[i_start:i] or 1) stack[-1][element] += count return stack.pop() return parse(formula)"},{"question":"Write a program that manages a collection of books in a library and handles multiple operations related to book borrowing and returning. The program first reads an integer n, the total number of different books in the library labeled from 1 to n. Next, the program reads an integer q and processes q queries. There are two kinds of queries for different operations: * borrow(x): marks the book with label x as borrowed if it\'s not currently borrowed, otherwise returns an error message \\"Book x is already borrowed.\\" * return(x): marks the book with label x as available if it\'s currently borrowed, otherwise returns an error message \\"Book x is not borrowed.\\" Constraints * 1 ≤ n ≤ 10000 * 1 ≤ q ≤ 100000 * 1 ≤ x ≤ n Input ``` n q com1 x1 com2 x2 ... comq xq ``` In the first line, n and q are given. Then, q queries are given where com represents the type of queries. \'0\' denotes borrow and \'1\' denotes return operation. Output For each operation, print the appropriate message based on the operation performed. If the book is successfully borrowed or returned, no output is required for those commands. Example Input ``` 5 8 0 1 0 2 1 2 0 2 1 3 1 3 0 1 0 3 ``` Output ``` Book 1 is already borrowed. Book 3 is not borrowed. ``` Explanation: - The first query borrows book 1 successfully. - The second query borrows book 2 successfully. - The third query returns book 2 successfully. - The fourth query retries borrowing book 2 successfully. - The fifth query attempts to return book 3, but it is not borrowed, so an error is displayed. - The sixth query retries returning book 3, but it is still not borrowed, so the same error is displayed. - The seventh query attempts to borrow book 1, but it is already borrowed. - The eighth query borrows book 3 successfully.","solution":"def manage_books(n, q, queries): Manages a collection of books in a library and handles borrowing and returning operations. Parameters: n (int): Total number of books. q (int): Number of queries. queries (list): List of queries. Each query is a tuple (command, book_id). Returns: list: List of error messages for invalid operations. borrowed_books = set() results = [] for command, book_id in queries: if command == 0: # borrow if book_id in borrowed_books: results.append(f\\"Book {book_id} is already borrowed.\\") else: borrowed_books.add(book_id) elif command == 1: # return if book_id not in borrowed_books: results.append(f\\"Book {book_id} is not borrowed.\\") else: borrowed_books.remove(book_id) return results"},{"question":"Background Alice loves numbers and recently she came up with an interesting problem while playing with sequences of integers. She wants to know how many contiguous subarrays of numbers in a given sequence have a product that is even. As you might know from elementary math, an even product happens when at least one of the factors is even. Problem Given an array of integers, determine the number of contiguous subarrays which have an even product. Constraints The input satisfies the following conditions. * All inputs are given as integers * 1 ≤ n ≤ 1000 * 1 ≤ arr[i] ≤ 1000 Input The first line contains an integer n representing the length of the array. The second line contains n space-separated integers representing the elements of the array. Output Output the number of contiguous subarrays that have an even product in one line. Example Input 4 1 2 3 4 Output 8 Explanation In this example, the subarrays with an even product are: [2], [4], [1, 2], [2, 3], [3, 4], [1, 2, 3], [2, 3, 4], [1, 2, 3, 4]. There are 8 such subarrays in total.","solution":"def count_even_product_subarrays(arr): Given an array of integers, count the number of contiguous subarrays that have an even product. n = len(arr) count = 0 for i in range(n): product = 1 for j in range(i, n): product *= arr[j] if product % 2 == 0: count += 1 return count"},{"question":"Bernie is learning about Fibonacci sequences and their properties. He read that Fibonacci sequences can be used to compose any positive integer uniquely by summing distinct Fibonacci numbers, where no two consecutive Fibonacci numbers are used. This is known as Zeckendorf\'s theorem. Intrigued, Bernie decided to practice this by decomposing a number given to him into such a non-consecutive Fibonacci sequence and checking if the sum of these numbers equals the original number. Given an integer n, find the largest possible Fibonacci number that is smaller than or equal to n. Then subtract this Fibonacci number from n and repeat the process with the new value of n until n reaches zero. Output the sequence of Fibonacci numbers used in the decomposition in descending order. -----Input----- A single integer n (1 ≤ n ≤ 10^18). -----Output----- Print all Fibonacci numbers that make up the sum in descending order. If n is already a Fibonacci number, print n. -----Examples----- Input 28 Output 21 5 2 Input 100 Output 89 8 3 -----Note----- Note to the first sample: The Fibonacci numbers are 1, 1, 2, 3, 5, 8, 13, 21, 34, etc. 28 can be decomposed as 21 + 5 + 2 (all distinct and non-consecutive Fibonacci numbers). Note to the second sample: The Fibonacci numbers include 89, 8, and 3, which sum up to 100.","solution":"def generate_fibonacci_until(n): Generates all Fibonacci numbers up to n. fibs = [1, 2] # Since Zeckendorf representation avoids two consecutive Fibonacci numbers, start from the second Fibonacci number while True: next_fib = fibs[-1] + fibs[-2] if next_fib > n: break fibs.append(next_fib) return fibs def zeckendorf_representation(n): Returns the Zeckendorf representation of the number n, which is a sum of distinct non-consecutive Fibonacci numbers. fibs = generate_fibonacci_until(n) result = [] for fib in reversed(fibs): if fib <= n: result.append(fib) n -= fib return result"},{"question":"Given an array of integers, your task is to determine the length of the longest contiguous subarray where the absolute difference between the maximum and minimum elements is at most a given integer D. Input Format - The first line contains two integers: the size of the array N and the integer D. - The second line contains N integers representing the elements of the array. Output Format A single integer denoting the length of the longest contiguous subarray where the absolute difference between the maximum and minimum elements is at most D. Constraints 1 <= N <= 100000 0 <= D <= 1000000000 -1000000000 <= array elements <= 1000000000 Sample Input 7 2 1 3 2 3 4 1 5 Sample Output 4 Explanation The longest contiguous subarray with the absolute difference between the maximum and minimum elements not exceeding 2 is [3, 2, 3, 4], which has a length of 4.","solution":"def longest_subarray_length(arr, N, D): from collections import deque max_deque = deque() min_deque = deque() start = 0 max_length = 0 for end in range(N): while max_deque and arr[max_deque[-1]] <= arr[end]: max_deque.pop() while min_deque and arr[min_deque[-1]] >= arr[end]: min_deque.pop() max_deque.append(end) min_deque.append(end) while arr[max_deque[0]] - arr[min_deque[0]] > D: if max_deque[0] == start: max_deque.popleft() if min_deque[0] == start: min_deque.popleft() start += 1 max_length = max(max_length, end - start + 1) return max_length # Example usage: # N, D = 7, 2 # arr = [1, 3, 2, 3, 4, 1, 5] # result = longest_subarray_length(arr, N, D) # print(result) # Output: 4"},{"question":"Given a binary tree, your task is to complete the function findCousins(), that returns a list of cousins of a given node. Two nodes of a binary tree are cousins if they have the same depth, but have different parents. You need to ensure that the returned list contains the cousins sorted by their values in ascending order. Example 1: Input: 1 / 2 3 / / 4 6 5 8 Target: 4 Output: 5 8 Explanation: Node 4 and nodes 5, 8 are at the same depth but have different parents, so nodes 5 and 8 are cousins. Example 2: Input: 1 / 2 3 / / 4 5 6 Target: 5 Output: 4 Explanation: Node 5 and node 4 are at the same depth but have different parents, so node 4 is the only cousin. Your Task: The task is to complete the function findCousins() which takes the root of the binary tree and the target node value as input and returns a list of integers representing the cousins of the target node. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= Number of nodes in the binary tree <= 10^4 1 <= Node value <= 10^5","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def findCousins(root, target): if not root: return [] from collections import deque q = deque([(root, None)]) # (node, parent) found = False target_depth = None current_depth = 0 target_parent = None cousins = [] while q and not found: level_size = len(q) current_level = [] current_depth += 1 for _ in range(level_size): node, parent = q.popleft() current_level.append((node.value, parent)) if node.value == target: found = True target_depth = current_depth target_parent = parent if node.left: q.append((node.left, node.value)) if node.right: q.append((node.right, node.value)) if found: cousins = [val for val, par in current_level if par != target_parent] cousins.sort() return cousins"},{"question":"Jane is a software developer who enjoys creating unique string manipulation problems to challenge her friends. Today, she has come up with a new task using string arrays. Given two arrays of strings, Jane wants to transform the first array into the second array by applying a series of operations. In each operation, she can pick a string from the first array and move it to any position within the first array. Help Jane find the minimum number of operations required to transform the first array into the second array. -----Input----- The input contains multiple test cases. The first line contains the integer t (1 leq t leq 1000), which denotes the number of test cases. Each test case starts with an integer n (1 leq n leq 100), the number of strings in the arrays. The next line contains n strings separated by spaces, representing the initial state of the first array A. The next line contains n strings separated by spaces, representing the target state of the second array B. Each string consists of lowercase English letters and has a length of at most 50. -----Output----- For each test case, print a single integer denoting the minimum number of operations required to transform the first array into the second array. -----Examples----- Input 2 3 apple banana cherry banana apple cherry 4 dog cat mouse bird bird mouse cat dog Output 2 3 -----Note----- In the first example, the first operation could be to move \'banana\' to the first position, resulting in \'banana apple cherry\', which matches the target array with one additional move. In the second example, moving \'bird\' to the first position, \'mouse\' to the second position, and \'cat\' to the third position results in \'bird mouse cat dog\', matching the target array.","solution":"def min_operations_to_transform(t, test_cases): results = [] for i in range(t): n, A, B = test_cases[i] move_count = 0 B_index_map = {b: i for i, b in enumerate(B)} last_index = -1 for a in A: if B_index_map[a] > last_index: last_index = B_index_map[a] else: move_count += 1 results.append(move_count) return results"},{"question":"Given an array of integers, determine if it is possible to partition the array into two non-empty subsets whose sums are equal. Example 1: Input: [1, 5, 11, 5] Output: YES Explanation: The array can be partitioned as [1, 5, 5] and [11], with sums 11 and 11 respectively. Example 2: Input: [1, 2, 3, 5] Output: NO Explanation: No possible partition exists that divides the array into two subsets with equal sum. Your Task: You don\'t need to read input or print anything. Your task is to complete the function can_partition() which takes the array of integers as input parameter and returns a boolean value denoting whether it is possible to partition the array as described. Expected Time Complexity: O(n * sum/2) Expected Auxiliary Space: O(n * sum/2) Constraints: 1 <= n <= 200 1 <= array[i] <= 100","solution":"def can_partition(nums): total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition it into equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a DP array to store sub-problems results dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"In a faraway kingdom, there exists a peculiar currency system where only two types of coins are used: coins of value a and coins of value b. The King has ordered his treasurer to pay an exact amount of k using any combination of these two types of coins if possible. The treasurer is clever and wants to find out if it is feasible to pay the exact amount k using coins of values a and b. Given multiple test cases, find out for each test case if it\'s possible to form the exact amount k using coins of values a and b. -----Input----- The first line contains one integer t (1 le t le 10^4) — the number of test cases. Each test case is denoted by a line containing three integers a, b, and k (1 le a, b, k le 10^9) — the values of the two types of coins and the amount of money to be formed, respectively. -----Output----- For each test case, print \\"YES\\" if it\'s possible to form the exact amount k using any combination of coins of values a and b, otherwise print \\"NO\\". -----Example----- Input 3 3 5 7 4 6 8 2 6 5 Output YES YES NO -----Note----- In the first test case, it is possible to form the amount 7 using one coin of value 2 and one coin of value 5. In the second test case, it is possible to form the amount 8 using two coins of value 4. In the third test case, it is not possible to form the amount 5 using any combination of coins of values 2 and 6.","solution":"import math def can_form_amount_with_coins(t, test_cases): results = [] for a, b, k in test_cases: if k % math.gcd(a, b) == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A local charity is organizing a donation drive where individuals can donate money. At the end of the drive, the charity wants to determine the total amount collected and the average donation amount, rounded to the nearest integer. ------ Input Format ------ - The first line of input will contain a single integer N, denoting the number of donations. - The next N lines each contain a single integer representing the amount of each donation. ------ Output Format ------ Output two lines: - The first line should contain the total amount collected in donations. - The second line should contain the average donation amount, rounded to the nearest integer. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ text{donation amount} ≤ 1000 ------ Sample Input 1 ------ 5 100 200 300 400 500 ------ Sample Output 1 ------ 1500 300 ------ Explanation 1 ------ The total amount collected is 100 + 200 + 300 + 400 + 500 = 1500. The average donation amount is 1500 / 5 = 300. ------ Sample Input 2 ------ 3 10 20 30 ------ Sample Output 2 ------ 60 20 ------ Explanation 2 ------ The total amount collected is 10 + 20 + 30 = 60. The average donation amount is 60 / 3 = 20.","solution":"def donation_summary(donations): Returns the total amount collected and the rounded average donation amount. total = sum(donations) average = round(total / len(donations)) return total, average"},{"question":"Emma is playing a new race game on a straight track that has N lanes. Each lane is represented by a sequence of M cells. Emma starts at the first cell in the middle lane (lane lceil frac{N}{2} rceil), at position (1, lceil frac{N}{2} rceil). She wants to reach the last cell in any lane as quickly as possible. Emma can move according to the following rules: 1. She can move to the next cell in the same lane. 2. She can switch to an adjacent lane in the same cell (if it exists), either upward or downward. Determine the minimum number of moves Emma needs to reach any cell in the last row. -----Input----- The input consists of two integers, N and M (1 leq N, M leq 10^5), the number of lanes and cells in each lane, respectively. -----Output----- Output a single integer, the minimum number of moves Emma needs to reach any cell in the last row. -----Examples----- Sample Input 1: 3 5 Sample Output 1: 4 Sample Input 2: 4 2 Sample Output 2: 2","solution":"def min_moves_to_reach_last_cell(N, M): Returns the minimum number of moves Emma needs to reach any cell in the last row. # Emma starts at (1, middle lane) # She can move the shortest path by moving down each lane onto adjacent lanes. return M - 1"},{"question":"A robot is positioned at a starting point on an infinite 2D grid (x = 0, y = 0). The robot can move in four directions: up, down, left, and right. A sequence of commands affects the movement of the robot. The task is to determine if the robot returns to the starting point after executing all commands in the sequence. Each command in the sequence is a character: - \'U\' for moving up (y + 1) - \'D\' for moving down (y - 1) - \'L\' for moving left (x - 1) - \'R\' for moving right (x + 1) Write a function to determine whether the robot returns to the origin (0, 0) after completing the movement sequence. Input The first line contains an integer T, the number of test cases. The next T lines each contain a string representing the sequence of commands. Output For each test case, output \\"Yes\\" if the robot returns to the origin, otherwise output \\"No\\". Constraints: 1 ≤ T ≤ 100 1 ≤ length of sequence ≤ 10^4 SAMPLE INPUT 3 UD LLRR UUDD SAMPLE OUTPUT Yes Yes Yes","solution":"def does_robot_return_to_origin(commands): Determines if the robot returns to the origin after executing the commands. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x == 0 and y == 0 def process_test_cases(test_cases): results = [] for commands in test_cases: if does_robot_return_to_origin(commands): results.append(\'Yes\') else: results.append(\'No\') return results"},{"question":"In a faraway kingdom, there is a village called Rookville. Rookville is famous for its unique Rook-like chess pieces placed on an N times M grid. Each square on the grid either contains a rook or is empty. The rooks can attack other rooks that are in the same row or column as per standard chess rules. The villagers want to create a safe zone on this grid such that no rooks can attack each other. To achieve this, they have the ability to remove some of the rooks from the grid. However, removing rooks is costly, so they want to minimize the number of removals. Your task is to find the minimum number of rooks that must be removed so that no two rooks can attack each other. -----Input----- The first line of the input consists of two space-separated integers 1 le N, M le 500. These are the number of rows and columns of the grid, respectively. Each of the next N lines contains M characters, describing the grid. A character can either be \\".\\" denoting an empty square or \\"R\\" denoting a square with a rook. -----Output----- Output a single integer representing the minimum number of rooks that need to be removed so that no two rooks can attack each other. -----Examples----- Sample Input: 3 3 R.R RRR R.R Sample Output: 4 Explanation: - Remove the rook at (2, 1), (2, 2), (2, 3), and (3, 2) to ensure no two rooks can attack each other. - This leaves the rooks at (1, 1) and (1, 3).","solution":"def min_rook_removals(N, M, grid): def find_maximum_bipartite_matching(bipartite_graph, row_rooks, col_rooks): # This function uses the Hopcroft-Karp algorithm to find the maximum bipartite matching from collections import deque def bfs(): queue = deque() for u in row_rooks: if pair_U[u] == None: dist[u] = 0 queue.append(u) else: dist[u] = float(\'inf\') dist[None] = float(\'inf\') while queue: u = queue.popleft() if dist[u] < dist[None]: for v in bipartite_graph[u]: if dist[pair_V[v]] == float(\'inf\'): dist[pair_V[v]] = dist[u] + 1 queue.append(pair_V[v]) return dist[None] != float(\'inf\') def dfs(u): if u != None: for v in bipartite_graph[u]: if dist[pair_V[v]] == dist[u] + 1: if dfs(pair_V[v]): pair_V[v], pair_U[u] = u, v return True dist[u] = float(\'inf\') return False return True pair_U = {u: None for u in row_rooks} pair_V = {v: None for v in col_rooks} dist = {} matching = 0 while bfs(): for u in row_rooks: if pair_U[u] == None: if dfs(u): matching += 1 return matching row_rooks = set() col_rooks = set() bipartite_graph = {} for i in range(N): for j in range(M): if grid[i][j] == \'R\': row_node = f\'row_{i}\' col_node = f\'col_{j}\' row_rooks.add(row_node) col_rooks.add(col_node) if row_node not in bipartite_graph: bipartite_graph[row_node] = [] bipartite_graph[row_node].append(col_node) max_matching = find_maximum_bipartite_matching(bipartite_graph, row_rooks, col_rooks) total_rooks = sum(row.count(\'R\') for row in grid) return total_rooks - max_matching # Examples if __name__ == \\"__main__\\": N, M = 3, 3 grid = [ \\"R.R\\", \\"RRR\\", \\"R.R\\" ] print(min_rook_removals(N, M, grid)) # Output: 4"},{"question":"You are given a string consisting of lowercase English letters and a list of queries. Each query consists of an integer k. For each query, you need to find the k-th distinct character (1-based index) in the string. If there are fewer than k distinct characters, return `None`. Input The first line contains a single string s (1 ≤ |s| ≤ 105) — a string of lowercase English letters. The second line contains a positive integer q (1 ≤ q ≤ 105) — the number of queries. Each of the following q lines contains a single integer k (1 ≤ k ≤ 105). Output For each query, print the k-th distinct character in the string or `None` if such a character does not exist. Examples Input ``` abacabad 3 1 3 5 ``` Output ``` a c None ``` Input ``` aaa 2 1 2 ``` Output ``` a None ```","solution":"def find_kth_distinct_character(s, queries): # Collect distinct characters in order of their first appearance distinct_chars = [] seen_chars = set() for char in s: if char not in seen_chars: distinct_chars.append(char) seen_chars.add(char) # Answer each query based on the distinct characters collected results = [] for k in queries: if k <= len(distinct_chars): results.append(distinct_chars[k-1]) else: results.append(None) return results"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). An interesting extension to this concept is finding the longest palindromic contiguous substring within a given string. For example, in the string \\"babad\\", the longest palindromic contiguous substring is \\"bab\\" or \\"aba\\". Write a function that, given a string S, returns the longest palindromic contiguous substring in S. If there are multiple substrings of the same maximum length, return the one that appears first. -----Input----- The input consists of a single line containing the string S. The length of string S will be between 1 and 1000 characters and consists only of lowercase alphabetic letters. -----Output----- Output the longest palindromic contiguous substring. -----Examples----- Sample Input 1: babad Sample Output 1: bab Sample Input 2: cbbd Sample Output 2: bb","solution":"def longest_palindromic_substring(s): Returns the longest palindromic contiguous substring in the given string s. n = len(s) if n == 0: return \\"\\" longest_start = 0 longest_length = 1 # Function to expand the palindrome around the center def expand_around_center(left, right): nonlocal longest_start, longest_length while left >= 0 and right < n and s[left] == s[right]: current_length = right - left + 1 if current_length > longest_length: longest_length = current_length longest_start = left left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return s[longest_start:longest_start + longest_length]"},{"question":"Max has a number of projects to complete, each with a deadline and a profit associated with it. Max can only work on one project at a time and cannot work on a new project until the previous one is completed. The objective is to find the maximum profit Max can earn if he completes at most K projects within their respective deadlines. Input: The first line of input contains an integer T denoting the number of test cases. The first line of every test case contains two space-separated integers N and K, where N is the number of projects and K is the maximum number of projects Max can complete. The next N lines of each test case contain two space-separated integers D_i and P_i where D_i is the deadline and P_i is the profit for the i-th project. Output: For each case, print the maximum profit Max can earn in a separate line. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ K ≤ N 1 ≤ D_i, P_i ≤ 1000 SAMPLE INPUT 2 4 2 4 20 1 10 1 40 1 30 3 1 2 100 2 10 1 20 SAMPLE OUTPUT 60 100 Explanation: In the first test case, Max can choose the projects with profits 40 and 20 to get the maximum profit of 60. In the second test case, Max can only complete one project, and the project with the highest profit is the one with profit 100.","solution":"def max_profit(test_cases): results = [] for case in test_cases: N, K, projects = case[\'N\'], case[\'K\'], case[\'projects\'] # Sort projects based on profit in descending order projects.sort(key=lambda x: x[1], reverse=True) # Track selected projects by their deadlines time_slots = [-1] # Use a list slot representing the last deadline to keep the slots max_profit = 0 for project in projects: deadline, profit = project # Find the time to complete this project for t in range(min(deadline, K), 0, -1): if t not in time_slots: time_slots.append(t) max_profit += profit break results.append(max_profit) return results # Function to parse the input def parse_input(input_lines): index = 0 T = int(input_lines[index]) index += 1 test_cases = [] for _ in range(T): N, K = map(int, input_lines[index].split()) index += 1 projects = [] for _ in range(N): D, P = map(int, input_lines[index].split()) index += 1 projects.append((D, P)) test_cases.append({\'N\': N, \'K\': K, \'projects\': projects}) return test_cases"},{"question":"Steve loves collecting rare gems. He has a collection of gems represented by a 2D grid where each cell contains a certain number of gems. Steve wants to collect the maximum number of gems by traversing from the top-left corner to the bottom-right corner of the grid. He can only move either to the right or to the bottom at any point in time. Given the 2D grid of integers representing the number of gems in each cell, write a program to find the maximum number of gems Steve can collect. -----Input:----- - The first input is an integer N representing the number of rows in the grid. - The second input is an integer M representing the number of columns in the grid. - The next N lines contain M space-separated integers, where each integer represents the number of gems in that cell of the grid. -----Output:----- A single integer representing the maximum number of gems Steve can collect. -----Constraints----- - 1 leq N, M leq 100 - 0 leq text{value in each cell} leq 100 -----Sample Input 1:----- 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output 1:----- 29 -----Sample Input 2:----- 2 2 1 2 3 4 -----Sample Output 2:----- 8","solution":"def max_gems_collect(N, M, grid): Returns the maximum number of gems that can be collected from the top-left corner to the bottom-right corner of the grid. # Create a 2D dp array to store the maximum gems collected up to each cell dp = [[0 for _ in range(M)] for _ in range(N)] # Initialize the dp array with the values from the grid dp[0][0] = grid[0][0] # Fill the first row (can only move right) for j in range(1, M): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only move down) for i in range(1, N): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner contains the maximum number of gems return dp[N - 1][M - 1]"},{"question":"Vikas is learning about arrays and sorting algorithms. He wants to implement his own version of an array sorting algorithm. Kartheek challenges him to write a program that takes an array of integers and a string representing the sort order, and then sorts the array accordingly. The sort order string can either be \\"asc\\" for ascending order or \\"desc\\" for descending order. INPUT: First line consists of an integer n, the size of the array. Second line consists of n integers representing the elements of the array. Third line consists of a string which is either \\"asc\\" or \\"desc\\", indicating the sorting order. OUTPUT: Output should consist of the sorted array elements in a single line separated by spaces. SAMPLE INPUT 5 3 1 4 1 5 asc SAMPLE OUTPUT 1 1 3 4 5 SAMPLE INPUT 4 4 2 3 1 desc SAMPLE OUTPUT 4 3 2 1","solution":"def sort_array(n, array, order): Sorts an array based on the provided order. Parameters: n (int): Size of the array array (list): List of integers to be sorted order (str): \\"asc\\" for ascending order, \\"desc\\" for descending order Returns: list: Sorted array if order == \\"asc\\": return sorted(array) elif order == \\"desc\\": return sorted(array, reverse=True) else: raise ValueError(\\"Order must be \'asc\' or \'desc\'\\")"},{"question":"Given two integers n and x, your task is to check if the number n can be expressed as the sum of one or more distinct powers of x. If it is possible, return \\"Yes\\", otherwise return \\"No\\". Example 1: Input: n = 10, x = 2 Output: Yes Explanation: 10 can be expressed as 2^3 + 2^1. Example 2: Input: n = 5, x = 3 Output: No Explanation: 5 cannot be expressed as the sum of distinct powers of 3. Example 3: Input: n = 9, x = 3 Output: Yes Explanation: 9 can be expressed as 3^2. Your Task: Your task is to complete the function canBeExpressed() which takes two integers n and x as arguments and returns the string \\"Yes\\" or \\"No\\" based on whether n can be expressed as the sum of distinct powers of x or not. You need not to take any input or print anything. Expected Time Complexity: O(logn) Expected Auxiliary Space: O(logn) Constraints: 1 <= n <= 10^9 2 <= x <= 10","solution":"def canBeExpressed(n, x): Check if the number n can be expressed as the sum of one or more distinct powers of x. powers = [] current_power = 1 while current_power <= n: powers.append(current_power) current_power *= x sum_powers = set([0]) for power in powers: new_sums = set() for s in sum_powers: new_sums.add(s + power) sum_powers.update(new_sums) return \\"Yes\\" if n in sum_powers else \\"No\\""},{"question":"Daniel is participating in a coding competition and has encountered a challenging problem. The problem requires determining a string\'s compatibility with a specific pattern. The pattern consists of lowercase English letters and wildcard characters `*` and `?`. The `*` character can match any sequence of characters (including an empty sequence), while the `?` character can match any single character. To help Daniel, your task is to write a function that checks if the string matches the given pattern. **Input:** The input will consist of multiple test cases. Each test case will comprise a single line containing the pattern and the string, separated by a space. The pattern appears before the string. **Output:** For each test case, print \\"YES\\" if the string matches the pattern, and \\"NO\\" otherwise. **Constraints:** - The size of the input pattern and string will not exceed 100 characters. - The number of test cases (T) will be between 1 and 20. **Example:** **Input:** ``` 3 a*b cccab a?b abac *abc abc ``` **Output:** ``` NO NO YES ```","solution":"def match_pattern(pattern: str, string: str) -> str: # Function to translate wildcard pattern to regex def pattern_to_regex(pattern: str) -> str: regex = \'\' for char in pattern: if char == \'*\': regex += \'.*\' elif char == \'?\': regex += \'.\' else: regex += char return \'^\' + regex + \'\' import re regex_pattern = pattern_to_regex(pattern) if re.match(regex_pattern, string): return \\"YES\\" else: return \\"NO\\" def check_patterns(test_cases): results = [] for pattern, string in test_cases: results.append(match_pattern(pattern, string)) return results"},{"question":"\\"Minimum Cost Path in Matrix\\" You are given a 2D matrix of size N x M. Each cell in the matrix contains a certain cost to traverse. You are required to find a path from the top-left corner (0,0) to the bottom-right corner (N-1,M-1) such that the total cost of traversal is minimized. You are allowed to traverse only right or down from a given cell. Input First line contains two integers N and M, denoting the number of rows and columns in the matrix. Next N lines contain M space-separated integers each, representing the cost in each cell of the matrix. Output Print a single integer denoting the minimum cost to travel from the top-left to the bottom-right corner of the matrix. Constraints 1 ≤ N, M ≤ 100 1 ≤ cost[i][j] ≤ 1000 Sample Input 3 3 1 3 1 1 5 1 4 2 1 Sample Output 7 Explanation The path with the minimum cost is 1 → 3 → 1 → 1 → 1 with a total cost of 7.","solution":"def min_cost_path(matrix): Finds the minimum cost to travel from the top-left to the bottom-right corner of the given matrix by only moving right or down. Args: matrix : list of list of ints : 2D matrix containing the cost in each cell Returns: int : minimum cost of the path N, M = len(matrix), len(matrix[0]) # Create a DP table to store results of subproblems dp = [[0 for _ in range(M)] for _ in range(N)] dp[0][0] = matrix[0][0] # Initialize first column of total cost(dp) array for i in range(1, N): dp[i][0] = dp[i-1][0] + matrix[i][0] # Initialize first row of dp array for j in range(1, M): dp[0][j] = dp[0][j-1] + matrix[0][j] # Construct the rest of dp array for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[N-1][M-1] # To solve this problem, the function can be used as follows: # The input matrix: # matrix = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # Calling the function # result = min_cost_path(matrix) # print(result) # Output: 7"},{"question":"You are given a binary tree with `n` nodes and edges connecting them. Each node in the tree has a unique integer value between `1` and `n`. You need to find the lowest common ancestor (LCA) of two given nodes in the binary tree. The LCA of two nodes `u` and `v` is defined as the lowest (i.e., deepest) node that has both `u` and `v` as descendants, where we allow a node to be a descendant of itself. -----Input----- The first line contains an integer `n` (2 leq n leq 10^5) — the number of nodes in the tree. The following `n-1` lines each contain two integers `a` and `b` (1 leq a, b leq n) — representing an edge between nodes `a` and `b`. The next line contains a single integer `m` (1 leq m leq 10^4) — the number of queries. Each of the following `m` lines contains two integers `u` and `v` (1 leq u, v leq n) — the nodes for which you need to find the LCA. -----Output----- For each query, output the LCA of the nodes `u` and `v`. -----Example----- Input 7 1 2 1 3 2 4 2 5 3 6 3 7 3 4 5 4 6 6 7 Output 2 1 3 -----Note----- In the given example: - The binary tree structure is: 1 / 2 3 / / 4 5 6 7 - The LCA of nodes 4 and 5 is 2. - The LCA of nodes 4 and 6 is 1. - The LCA of nodes 6 and 7 is 3.","solution":"from collections import defaultdict, deque def find_lca(n, edges, queries): # Create the tree in adjacency list representation tree = defaultdict(list) for a, b in edges: tree[a].append(b) tree[b].append(a) # Depth and parent tracking dictionaries depth = [0] * (n + 1) parent = [0] * (n + 1) visited = [False] * (n + 1) # BFS to calculate depth and parent def bfs(root): queue = deque([root]) visited[root] = True depth[root] = 0 parent[root] = -1 while queue: node = queue.popleft() for neighbor in tree[node]: if not visited[neighbor]: visited[neighbor] = True parent[neighbor] = node depth[neighbor] = depth[node] + 1 queue.append(neighbor) bfs(1) # Assume 1 is the root node # Function to find LCA def lca(u, v): # Lift u and v to the same depth while depth[u] > depth[v]: u = parent[u] while depth[v] > depth[u]: v = parent[v] # Find the LCA while u != v: u = parent[u] v = parent[v] return u # Process each query result = [] for u, v in queries: result.append(lca(u, v)) return result"},{"question":"Alice is learning Programming and she came across the concept of **palindromes**. A palindrome is a word that reads the same backward as forward. For example, the words \\"madam\\" and \\"racecar\\" are palindromes. Alice is trying to write a function that can identify if a given string can be rearranged to form a palindrome. Scramble time! Given a word, she wants to know if she can rearrange the letters of the word to create a palindrome. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains one string s (1 le |s| le 100) — the word to be checked. -----Output----- For each test case, print YES if the word s can be rearranged to form a palindrome, and NO otherwise. -----Examples----- Input 3 carrace daily aabb Output YES NO YES -----Explanation----- In the first test case, \\"carrace\\" can be rearranged to form \\"racecar\\", which is a palindrome. In the second test case, \\"daily\\" cannot be rearranged to form any palindrome. In the third test case, \\"aabb\\" can be rearranged to form \\"abba\\", which is a palindrome.","solution":"def can_form_palindrome(s): from collections import Counter freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) return odd_count <= 1 def process_test_cases(t, test_cases): results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A number is called a \\"Happy Number\\" if, as per the following process, the number eventually reaches 1: 1. Start with any positive integer. 2. Replace the number by the sum of the squares of its digits. 3. Repeat the process until the number equals 1 (where it will stay). 4. Alternatively, the process can end in an endless cycle that does not include 1. Write a function `isHappy(n)` that takes an integer `n` as input and returns `True` if it is a Happy Number, otherwise `False`. Example 1: Input: n = 19 Output: True Explanation: 1^2 + 9^2 = 82 8^2 + 2^2 = 68 6^2 + 8^2 = 100 1^2 + 0^2 + 0^2 = 1 Example 2: Input: n = 4 Output: False Explanation: 4^2 = 16 1^2 + 6^2 = 37 3^2 + 7^2 = 58 5^2 + 8^2 = 89 8^2 + 9^2 = 145 1^2 + 4^2 + 5^2 = 42 4^2 + 2^2 = 20 2^2 + 0^2 = 4 (which is a cycle and doesn\'t include 1) Your Task: You don\'t need to read input or print anything. Implement the function `isHappy(n)` which takes `n` as input parameter and returns `True` if the given number is a Happy Number, otherwise returns `False`. Expected Time Complexity: O(log n) Expected Auxiliary Space: O(log n) Constraints: 1 <= n <= 10^4","solution":"def isHappy(n): Determines if a number is a happy number. A number is happy if following the process of summing the squares of its digits eventually leads to 1. Parameters: n (int): The number to check. Returns: bool: True if the number is happy, False otherwise. def sum_of_squares(num): result = 0 while num > 0: digit = num % 10 result += digit * digit num //= 10 return result seen = set() while n != 1 and n not in seen: seen.add(n) n = sum_of_squares(n) return n == 1"},{"question":"You are given an array of integers and your task is to write a function that finds the majority element from the array. The majority element is the element that appears more than ⌊ n/2 ⌋ times, where n is the size of the array. You may assume that the array is non-empty and the majority element always exists in the array. A few examples: ```python majority_element([1, 2, 3, 2, 2]) return 2 majority_element([4, 5, 5, 4, 5]) return 5 majority_element([6]) return 6 majority_element([7, 8, 7, 7, 9, 7, 7]) return 7 ``` Make sure that your function has a linear runtime complexity and uses constant extra space.","solution":"def majority_element(nums): Finds the majority element in the array. The majority element is the one that appears more than n//2 times, where n is the size of the array. # Boyer-Moore Voting Algorithm candidate = None count = 0 for num in nums: if count == 0: candidate = num count += 1 if num == candidate else -1 return candidate"},{"question":"You are working on a new spreadsheet application. To add a unique feature, you need to implement a function that parses and evaluates mathematical expressions written in a custom notation similar to Polish Notation (prefix notation). In this notation, operators appear before their operands. The supported operators are addition (+), subtraction (-), multiplication (*), and division (/). The challenge is to write a program that reads an expression in Polish Notation and returns the result of the calculation. The application performs operations on integers and the result of each operation should be an integer. For division operations, integer division is performed (quotient is needed). Input: ``` The first line contains a single integer `n`, which represents the number of elements in the expression. The following `n` lines each contain a single element of the expression, which is either an integer or an operator. ``` Output: Output the result of evaluating the expression. Notes: - The expression is guaranteed to be valid and well-formed. - Division by 0 will not occur. - The number of elements in the expression will not exceed 100. Example Input ``` 5 + 5 * 3 4 2 ``` Output: ``` 17 ``` Explanation: The given input represents the Polish Notation expression `+ 5 * 3 4 2`. First, `* 3 4` evaluates to `12`, then `+ 5 12 2` evaluates to `17`. Thus, the result is `17`. Input ``` 5 - / 10 2 5 ``` Output: ``` 0 ``` Explanation: The given input represents the Polish Notation expression `- / 10 2 5`. First, `/ 10 2` evaluates to `5`, then `- 5 5` evaluates to `0`. Thus, the result is `0`. Your task is to write this program to parse and evaluate expressions in Polish Notation.","solution":"def evaluate_polish_notation(n, expression): Evaluates a mathematical expression written in Polish (prefix) notation. :param n: Number of elements in the expression. :param expression: List of elements (operators and operands) in prefix order. :return: Result of evaluating the expression. stack = [] # Process the expression in reverse order for element in reversed(expression): if element in \\"+-*/\\": # Pop the top two elements if the current element is an operator operand1 = stack.pop() operand2 = stack.pop() if element == \'+\': result = operand1 + operand2 elif element == \'-\': result = operand1 - operand2 elif element == \'*\': result = operand1 * operand2 elif element == \'/\': result = operand1 // operand2 # Push the result back to the stack stack.append(result) else: # Push the operand to the stack stack.append(int(element)) # Final result will be the only element remaining in the stack return stack[0]"},{"question":"Sarah is working on a data analysis project where she needs to process a list of numbers. She wants to calculate the sum of the absolute differences of all possible pairs in the list. Given a list of integers, determine the sum of the absolute differences of every possible pair of numbers from the list. Input The input consists of 2 lines. The first line has a positive integer n, indicating the number of integers in the input list. The second line contains the n integers. Output Output a single integer: the sum of the absolute differences of all possible pairs. Constraints 1 ≤ n ≤ 10^5. |ai| ≤ 10^9. Note that ai can be negative. SAMPLE INPUT 3 1 3 5 SAMPLE OUTPUT 8 Explanation In the sample case, the pairs are (1,3), (1,5), and (3,5). The absolute differences are |1-3| = 2, |1-5| = 4, and |3-5| = 2. Summing these values, we get 2 + 4 + 2 = 8. This is the sum of the absolute differences of all possible pairs.","solution":"def sum_of_absolute_differences(n, lst): Calculates the sum of the absolute differences of all possible pairs in the list. lst.sort() result = 0 total_sum = sum(lst) for i, num in enumerate(lst): total_sum -= num result += total_sum - num * (n - 1 - i) return result"},{"question":"Kazuma loves reading. He has a list of books he wants to read. Each book takes a different amount of time to read, represented in hours. Kazuma\'s reading schedule allows him to read for exactly one hour each day. However, his reading pattern is such that he must finish an entire book once he starts it, meaning he cannot read multiple books in the same day. Kazuma has a bookshelf with a limited capacity, which can hold only a certain number of books at a time. He is making a reading plan that ensures he uses his bookshelf capacity efficiently. Whenever he finishes reading a book, he can remove it from the bookshelf and the slot becomes available for a new book. Kazuma wants to determine the minimum number of days required for him to read all the books and complete his reading list. -----Input----- The first line contains two integers n and c (1 le n le 10^5; 1 le c le 10^3) — the number of books Kazuma wants to read and the capacity of the bookshelf, respectively. The second line contains n integers t_1, t_2, dots, t_n (1 le t_i le 100) — the reading time of each book in hours. -----Output----- Print one integer — the minimum number of days required for Kazuma to read all n books. -----Examples----- Input 6 2 2 3 1 4 5 6 Output 21 Input 4 3 4 3 5 6 Output 18 Input 3 1 2 2 2 Output 6 -----Note----- None","solution":"def min_days_to_read_books(n, c, t): Returns the minimum number of days required to read all n books. :param n: Number of books Kazuma wants to read. :param c: Capacity of the bookshelf. :param t: List of integers representing reading time of each book in hours. :return: Minimum number of days required to read all books. return sum(t)"},{"question":"A small bakery is planning to automate its daily sales recording. The bakery sells n different types of items, each identified by a unique ID from 1 to n. The sales data is recorded every day in a simple format: a list of item IDs and the number of units sold for each item. The bakery wants to analyze this data to determine the total units sold for each item over a period of multiple days. You are tasked with writing a program that computes the total units sold for each item based on the given daily sales data. Input The first line contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 100), the number of different items and the number of days for which the sales data is provided. Each of the next d blocks describes the sales for one day. Each block starts with an integer m (0 ≤ m ≤ n), the number of items sold that day. Each of the next m lines in the block contains two integers ki and ui (1 ≤ ki ≤ n, 1 ≤ ui ≤ 1000) — the item ID and the number of units sold for that item. Output Print n lines, each containing a single integer: the total units sold for the item with that ID over all days. Examples Input 3 2 2 1 10 3 5 1 2 7 Output 10 7 5 Input 4 3 1 2 1 0 3 1 4 3 3 4 2 Output 4 1 3 2 Input 2 2 1 1 100 1 2 50 Output 100 50","solution":"def compute_total_units_sold(n, d, sales_data): Computes the total units sold for each item over a period of multiple days. Parameters: n (int): Number of different items. d (int): Number of days for which the sales data is provided. sales_data (list of list of tuple): Sales data for each day. Each day\'s sales is a list of tuples, where each tuple contains item ID and number of units sold. Returns: list of int: Total units sold for each item. total_units_sold = [0] * n for day_sales in sales_data: for item_id, units_sold in day_sales: total_units_sold[item_id - 1] += units_sold return total_units_sold # Sample input/output handling functions (not part of the main solution) def parse_input(input_str): lines = input_str.strip().split(\'n\') n, d = map(int, lines[0].split()) idx = 1 sales_data = [] for _ in range(d): m = int(lines[idx]) day_sales = [] idx += 1 for _ in range(m): ki, ui = map(int, lines[idx].split()) day_sales.append((ki, ui)) idx += 1 sales_data.append(day_sales) return n, d, sales_data def format_output(output_list): return \\"n\\".join(map(str, output_list)) # Sample usage input_str = \\"3 2n2n1 10n3 5n1n2 7\\" n, d, sales_data = parse_input(input_str) output_list = compute_total_units_sold(n, d, sales_data) print(format_output(output_list))"},{"question":"Write a program to determine the frequency of each word in a given paragraph of text. Input The first line contains a single integer T, which represents the number of test cases. The following T lines each contain a paragraph of text (a single string, where words are separated by spaces). Each paragraph contains only lowercase alphabetic characters and spaces. Output For each test case, output the words in alphabetical order, each word followed by its frequency in the paragraph. Each word-frequency pair should be on a new line. Example Input: 2 the quick brown fox jumps over the lazy dog hello world hello Output: brown 1 dog 1 fox 1 jumps 1 lazy 1 over 1 quick 1 the 2 hello 2 world 1","solution":"def word_frequencies(T, paragraphs): results = [] for para in paragraphs: words = para.split() freq = {} for word in words: if word not in freq: freq[word] = 0 freq[word] += 1 sorted_freq = sorted(freq.items()) result = \'n\'.join([f\\"{word} {count}\\" for word, count in sorted_freq]) results.append(result) return results # Example usage: # T = 2 # paragraphs = [ # \\"the quick brown fox jumps over the lazy dog\\", # \\"hello world hello\\" # ] # results = word_frequencies(T, paragraphs) # for result in results: # print(result)"},{"question":"You are given a list of integers. Your task is to determine the minimum number of operations needed to make all elements equal. In one operation, you can increase or decrease any element by 1. Input The first line contains a single integer n (1 ≤ n ≤ 1000), the number of elements in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), the elements of the list. Output Output a single integer, the minimum number of operations needed to make all elements equal. Example Input ```plaintext 5 1 2 3 4 5 ``` Output ```plaintext 6 ``` Explanation: 1. Convert 1, 2, 3, 4, 5 to a common value. One optimal solution is to convert all elements to 3: - Convert 1 to 3 (2 operations) - Convert 2 to 3 (1 operation) - Convert 4 to 3 (1 operation) - Convert 5 to 3 (2 operations) Total operations: 2 + 1 + 1 + 2 = 6.","solution":"def min_operations_to_equal_elements(n, elements): Returns the minimum number of operations needed to make all elements equal. Parameters: n (int): Number of elements. elements (List[int]): List of integers. Returns: int: Minimum number of operations. median = sorted(elements)[n // 2] return sum(abs(x - median) for x in elements)"},{"question":"Laura is setting up a new garden and wants to determine the best way to plant her trees in a rectangular grid pattern. Each tree needs a certain amount of space around it to ensure healthy growth, so they must be placed such that there is always at least one empty cell between any two trees, both horizontally and vertically. Given the dimensions of the garden (rows, columns) and the number of trees Laura wants to plant, you need to determine if it is possible to plant all the trees in the described manner. If it is possible, return a grid showing the placement of the trees (using \'T\' for trees and \'.\' for empty cells), otherwise, return \\"IMPOSSIBLE\\". Input: The input consists of two integers in the first line, representing the number of rows and columns of the garden respectively, followed by one integer in the second line representing the number of trees. Output: If it is possible to plant all the trees according to the rules, print a grid of \'R\' rows and \'C\' columns showing the tree and empty cell placement. If it is not possible, print \\"IMPOSSIBLE\\". Constraints: 1 ≤ rows, columns ≤ 100 1 ≤ number of trees ≤ rows * columns SAMPLE INPUT 4 4 4 SAMPLE OUTPUT T . T . . . . . T . T . . . . . SAMPLE INPUT 4 4 8 SAMPLE OUTPUT IMPOSSIBLE","solution":"def create_garden(rows, columns, num_trees): Determines if it\'s possible to plant the desired number of trees in the garden such that no two trees are adjacent to each other both horizontally and vertically. Returns the garden grid or \\"IMPOSSIBLE\\". if num_trees > ((rows + 1) // 2) * ((columns + 1) // 2): return \\"IMPOSSIBLE\\" grid = [[\'.\' for _ in range(columns)] for _ in range(rows)] tree_count = 0 for r in range(0, rows, 2): for c in range(0, columns, 2): if tree_count < num_trees: grid[r][c] = \'T\' tree_count += 1 return grid"},{"question":"In a land far away, there exists a peculiar library system managed by the diligent Librarian Lais. The library contains a fascinating collection of scrolls, each categorized by a unique topic. To facilitate efficient study sessions, the librarian has devised a unique way of organizing the scrolls. The librarian wants to group the scrolls into several compartments such that: * Each compartment contains scrolls of the same topic. * A compartment cannot have scrolls of more than one topic. * The compartments keep the scrolls sorted in non-decreasing order of their lengths. Your task is to write a program that simulates the librarian’s organizing process, ensuring that each compartment adheres to the above rules. Input The input consists of several datasets. Each dataset is formatted as follows. N t1 l1 t2 l2 . . . tN lN The first line of each dataset contains a single integer N (1 ≤ N ≤ 10000). N indicates the number of scrolls in the dataset. The following N lines describe the scrolls. The i-th line contains two integers, ti and li (1 ≤ ti ≤ 1000, 1 ≤ li ≤ 1000). ti indicates the topic of the i-th scroll and li indicates its length. The end of the input is indicated by a line containing a single zero. You should not process this line as a dataset. Output For each dataset, print the scrolls grouped into compartments sorted in non-decreasing order of their lengths. For each compartment, print the topic first, followed by the lengths, each on a separate line. Print an empty line between compartments for clarity. Example Input 5 1 5 2 3 1 2 3 7 2 4 6 1 3 1 6 2 3 2 6 3 3 3 6 0 Output 1 2 5 2 3 4 3 7 1 3 6 2 3 6 3 3 6","solution":"def organize_scrolls(datasets): result = [] for dataset in datasets: N = dataset[0] scrolls = dataset[1:] # Grouping scrolls by topic scroll_dict = {} for scroll in scrolls: topic, length = scroll if topic not in scroll_dict: scroll_dict[topic] = [] scroll_dict[topic].append(length) # Sorting each group in non-decreasing order of their lengths sorted_groups = {k: sorted(v) for k, v in scroll_dict.items()} # Formatting the results for topic in sorted(sorted_groups): result.append(f\\"{topic}\\") for length in sorted_groups[topic]: result.append(f\\"{length}\\") result.append(\\"\\") # Empty line after each topic return result # Helper function to parse input and output def parse_input(input_str): datasets = [] dataset = [] for line in input_str.strip().splitlines(): if line == \\"0\\": break values = line.split() if len(values) == 1: if dataset: datasets.append(dataset) dataset = [int(values[0])] else: dataset.append((int(values[0]), int(values[1]))) if dataset: datasets.append(dataset) return datasets def parse_output(output): return \\"n\\".join(output).strip() def library_organizer(input_str): datasets = parse_input(input_str) result = organize_scrolls(datasets) return parse_output(result)"},{"question":"You are given a list of integers. Your task is to determine if it is possible to make all elements in the list equal by performing a series of operations. In one operation, you can double any element in the list or discard any one element. Input: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the list. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the list. Output: Print \\"YES\\" if it is possible to make all elements equal by performing the given operations, otherwise print \\"NO\\". Examples: Input: 5 2 4 8 16 32 Output: YES Input: 6 2 3 6 12 24 48 Output: NO Explanation: In the first example, you can double the 2 five times, double the 4 four times, double the 8 three times, double the 16 once, and the list will be [32, 32, 32, 32, 32], so the output is \\"YES\\". In the second example, it is impossible to make all the elements equal, so the output is \\"NO\\".","solution":"def can_make_all_elements_equal(n, arr): Determines if it is possible to make all elements in the list equal by performing a series of operations (doubling any element or discarding any one element). Args: n : int : number of elements in the list arr : list : list of integers Returns: str : \\"YES\\" if possible, otherwise \\"NO\\" # Reduce all elements by dividing by 2 until they become odd numbers for i in range(len(arr)): while arr[i] % 2 == 0: arr[i] //= 2 # Check if all remaining elements are the same if len(set(arr)) == 1: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an initially empty grid of size n times n. You can perform the following operation as many times as you like: choose any 2x2 subgrid and fill it with 1s. Your task is to fill all cells of the grid with 1s and maximize the number of operations performed. -----Input----- The only input line contains a single integer n (1 le n le 10^9) - the size of the grid. -----Output----- Print a single integer - the maximum number of operations required to fill the entire grid with 1s. -----Examples----- Input 3 Output 2 Input 5 Output 8 -----Note----- For n=3, one possible sequence of operations is: 1. Choose the 2x2 subgrid starting at (1, 1) 2. Choose the 2x2 subgrid starting at (2, 2) For n=5, one possible sequence of operations is: 1. Choose the 2x2 subgrid starting at (1, 1) 2. Choose the 2x2 subgrid starting at (1, 2) 3. Choose the 2x2 subgrid starting at (2, 1) 4. Choose the 2x2 subgrid starting at (2, 2) 5. Choose the 2x2 subgrid starting at (3, 3) 6. Choose the 2x2 subgrid starting at (3, 4) 7. Choose the 2x2 subgrid starting at (4, 3) 8. Choose the 2x2 subgrid starting at (4, 4)","solution":"def max_operations_to_fill_grid(n): Calculates the maximum number of 2x2 operations required to fill an n x n grid with 1s. Parameters: n (int): The size of the grid (n x n) Returns: int: The maximum number of operations required to fill the grid # Each 2x2 subgrid can be used independently # The maximum number of such 2x2 subgrids is (n-1)^2 return (n - 1) * (n - 1)"},{"question":"Given a list of non-negative integers, write a function to determine if there is a pair of numbers (x, y) in the list such that x^y = y^x, where x and y are distinct elements. If such a pair exists, return True; otherwise, return False. Example 1: Input: arr = [2, 4, 8, 16] Output: True Explanation: 2^4 = 16 and 4^2 = 16, hence both expressions are equal. Example 2: Input: arr = [3, 1, 10, 12] Output: False Explanation: No pairs (x, y) in the list satisfy x^y = y^x. Your Task: Implement the function `isPowerPair(arr)` which takes an array of integers `arr` as input and returns a boolean value (True if such a pair exists, otherwise False). Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: 1 ≤ length of array ≤ 10^3 1 ≤ arr[i] ≤ 10^5","solution":"def isPowerPair(arr): Returns True if there exists a pair (x, y) in the list such that x^y = y^x, where x and y are distinct elements. Otherwise, returns False. for i in range(len(arr)): for j in range(len(arr)): if i != j: x, y = arr[i], arr[j] # Use the property that x^y = y^x iff x = y or (x = 2, y = 4) if (x == y) or (x == 2 and y == 4) or (x == 4 and y == 2): return True return False"},{"question":"You are given an array containing \'n\' integers. Your task is to determine if any two distinct elements in the array sum up to a target value \'k\'. If there exists such a pair, print \\"Found\\", otherwise print \\"Not Found\\". Input: The first line of input contains the number of test cases T. For each test case, the first line contains two integers n (size of array) and k (target sum). The second line contains \'n\' space-separated integers denoting the elements of the array. Output: For each test case, print \\"Found\\" if there are two distinct elements that sum up to \'k\', else print \\"Not Found\\". Constraints: 1 ≤ T ≤ 10 2 ≤ n ≤ 100 -10^5 ≤ array elements ≤ 10^5 -10^5 ≤ k ≤ 10^5 SAMPLE INPUT 2 5 9 1 2 3 4 5 4 8 2 2 2 2 SAMPLE OUTPUT Found Not Found","solution":"def find_pair_sum(arr, k): Returns \\"Found\\" if there exist two distinct elements in the array that sum up to k, otherwise \\"Not Found\\". seen = set() for num in arr: if k - num in seen: return \\"Found\\" seen.add(num) return \\"Not Found\\" def handle_test_cases(test_cases): results = [] for case in test_cases: n, k, arr = case result = find_pair_sum(arr, k) results.append(result) return results def parse_input(input_str): lines = input_str.split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n, k = map(int, lines[index].split()) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, k, arr)) index += 2 return test_cases def main(input_str): test_cases = parse_input(input_str) results = handle_test_cases(test_cases) return \'n\'.join(results)"},{"question":"You are given a tree (i.e., a connected, undirected and acyclic graph) with `n` vertices. Each edge of the tree has a weight. Your task is to find the maximum distance between any pair of vertices in the tree. Input The first line contains the integer `n` (2 ≤ n ≤ 10^5) — the number of vertices in the tree. The next `n-1` lines contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6) — meaning that there is an edge between vertices `u` and `v` with weight `w`. Output Print the maximum distance between any pair of vertices in the tree. Example Input 4 1 2 1 2 3 2 2 4 3 Output 6 Explanation In the given example, the tree looks like this: ``` 1 2 / 3 4 ``` The maximum distance is between vertices 3 and 4, and the path goes through vertex 2: (3 -> 2 -> 4) with the distance `2 + 3 = 5`. Another pair (1 -> 2 -> 4) has the distance `1 + 3 = 4`. The maximum one among all pairs is the one mentioned.","solution":"from collections import defaultdict, deque def find_max_distance(n, edges): if n == 1: return 0 def bfs(start): visited = [-1] * (n + 1) visited[start] = 0 queue = deque([start]) farthest_node = start max_distance = 0 while queue: node = queue.popleft() current_distance = visited[node] for neighbor, weight in graph[node]: if visited[neighbor] == -1: visited[neighbor] = current_distance + weight queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Perform BFS from any node (we start with node 1) farthest_from_1, _ = bfs(1) # Perform BFS from the farthest node found in previous step _, max_distance = bfs(farthest_from_1) return max_distance"},{"question":"You are given a grid with R rows and C columns, initially filled with zeros. You need to perform Q operations on this grid. Each operation consists of adding a certain value to all the cells in a specified subgrid. Your task is to compute the final grid after all the operations have been performed. Input: The first line contains three integers R, C, and Q, representing the number of rows, columns, and operations respectively. The next Q lines each contain five integers r1, c1, r2, c2, and V, representing an operation where V is added to every cell in the subgrid where the rows range from r1 to r2 and the columns range from c1 to c2 (both inclusive). Output: Output the final grid after all the operations. Constraints: 1 ≤ R, C ≤ 500 1 ≤ Q ≤ 10^5 1 ≤ r1 ≤ r2 ≤ R 1 ≤ c1 ≤ c2 ≤ C -1000 ≤ V ≤ 1000 SAMPLE INPUT 3 3 2 1 1 2 2 5 2 2 3 3 10 SAMPLE OUTPUT 5 5 0 5 15 10 0 10 10 Explanation: The first operation adds 5 to the subgrid from (1,1) to (2,2), resulting in: 5 5 0 5 5 0 0 0 0 The second operation adds 10 to the subgrid from (2,2) to (3,3), producing the final grid: 5 5 0 5 15 10 0 10 10","solution":"def perform_operations(R, C, Q, operations): # Initialize the grid with zeros grid = [[0] * C for _ in range(R)] # Apply each operation for r1, c1, r2, c2, V in operations: for r in range(r1-1, r2): for c in range(c1-1, c2): grid[r][c] += V return grid"},{"question":"You are given a series of tasks to perform in a factory. Each task requires a certain amount of processing power and the available machines in the factory can each handle a certain amount of processing power simultaneously. Your goal is to assign tasks to the available machines such that all tasks are completed in the minimum amount of time. The factory has `N` machines and `M` tasks. Each machine can only handle one task at a time and becomes free only after completing the assigned task. The time taken by a machine to complete a task is equal to the processing power required by that task. Write a program to determine the minimum time needed to complete all tasks using the available machines. Input: The first line contains two integers `N` and `M` (1 <= N, M <= 100), the number of machines and the number of tasks, respectively. The second line contains `M` integers, where the `i-th` integer represents the processing power required for the `i-th` task. Output: Print a single integer representing the minimum time needed to complete all tasks. Example: Input: 3 5 5 2 8 3 6 Output: 8 Explanation: In this example, there are 3 machines and 5 tasks with processing power requirements [5, 2, 8, 3, 6]. The optimal way to assign tasks to machines would be: - Assign task with processing power 5 to machine 1 (machine 1 is free at time 0 + 5 = 5) - Assign task with processing power 2 to machine 2 (machine 2 is free at time 0 + 2 = 2) - Assign task with processing power 8 to machine 3 (machine 3 is free at time 0 + 8 = 8) - Assign task with processing power 3 to machine 2 (machine 2 is free again at time 2 + 3 = 5) - Assign task with processing power 6 to machine 1 (machine 1 is free again at time 5 + 6 = 11) The minimum time to complete all tasks would be 8 (from the longest task handled by machine 3).","solution":"import heapq def minimum_time_to_complete_tasks(N, M, tasks): Determines the minimum time needed to complete all tasks using the available machines. Parameters: N (int): Number of machines M (int): Number of tasks tasks (list of int): List of processing power required for each task Returns: int: The minimum time needed to complete all tasks # Sort tasks in descending order to assign more demanding tasks first tasks.sort(reverse=True) # Use a min-heap to keep track of the completion time of each machine heap = [0] * N for task in tasks: # Get the machine that gets free the earliest earliest_free_time = heapq.heappop(heap) # Assign the task to this machine and update its completion time heapq.heappush(heap, earliest_free_time + task) # The result is the maximum time in heap, which is the time when the last task is completed return max(heap)"},{"question":"A gardener is planning to plant flowers in his garden. He has `n` flower pots, each with a maximum capacity of `c` liters of soil. He also has `m` bags of soil, each containing `s_i` liters. The gardener will fill the pots in the given order, starting with pot 1, then pot 2, and so on. If a soil bag exceeds the remaining capacity of the current pot, he uses the next pot. If there is more soil in the bag than pots available to fill, any remaining soil is discarded. Calculate the total number of pots that are successfully filled with soil. -----Input----- The first line contains three integers `n`, `c`, and `m` (1 ≤ n ≤ 100000, 1 ≤ c ≤ 1000000, 1 ≤ m ≤ 100000), the number of pots, the maximum capacity of each pot, and the number of soil bags. The second line contains `m` integers `s_1, s_2, ..., s_m` (1 ≤ s_i ≤ 1000000), the quantities of soil in each bag listed in the order the gardener will use them. -----Output----- Print one integer — the total number of pots that are successfully filled with soil. -----Examples----- Input 3 10 5 4 2 6 8 3 Output 2 Input 1 5 3 2 4 3 Output 1 Input 2 10 4 8 5 7 3 Output 2 Input 4 15 6 5 10 20 5 10 5 Output 3 -----Note----- In the first sample, the gardener fills the first pot with 4 liters, the remaining 6 liters from the second and third bag also go into the first pot, filling it to its maximum capacity of 10 liters. The fourth bag of 8 liters fills the second pot to its maximum capacity. The fifth bag of 3 liters partially fills the third pot. In the second sample, the gardener can only use the first pot, which can hold 5 liters and is filled partially by the first bag (2 liters) and completely by the second bag (3 liters). The third bag would overflow the pot, and thus soil is discarded.","solution":"def count_filled_pots(n, c, m, soil_bags): pots = [0] * n current_pot = 0 for soil in soil_bags: while soil > 0 and current_pot < n: available_capacity = c - pots[current_pot] if soil <= available_capacity: pots[current_pot] += soil soil = 0 else: pots[current_pot] = c soil -= available_capacity current_pot += 1 return sum(1 for pot in pots if pot == c)"},{"question":"You are given a matrix of characters. Your task is to determine if there exists a word in the grid that starts from the top-left corner and ends at the bottom-right corner, moving only in the four directions: up, down, left, and right. Words can only be formed by moving from one adjacent cell to another, without revisiting any cell in a single word. The word you are checking for is provided as input. ------ Input ------ The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer n, the size of the matrix (matrix will be of size n x n). The next n lines each contain n characters, describing the matrix. The last line of each test case contains a single string w, the word to check for. ------ Output ------ For each test case, output \\"YES\\" if the word can be formed as described, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ n ≤ 1000 The characters in the matrix and the word are all lowercase English letters. ------ Sample Input 1 ------ 2 3 abc def ghi adg 3 abc def ghi aei ------ Sample Output 1 ------ YES NO ------ Explanation 1 ------ In the first test case, the word \\"adg\\" can be formed by moving down in the matrix from cell (0, 0) to cell (2, 0). In the second test case, the word \\"aei\\" cannot be formed because there\'s no path from \'a\' to \'e\' to \'i\' following the described movement rules.","solution":"def exists_in_grid(matrix, word): n = len(matrix) m = len(matrix[0]) if matrix else 0 word_len = len(word) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def dfs(x, y, index): if index == word_len: return True if not (0 <= x < n) or not (0 <= y < m) or matrix[x][y] != word[index]: return False temp, matrix[x][y] = matrix[x][y], \'#\' result = any(dfs(x + dx, y + dy, index + 1) for dx, dy in directions) matrix[x][y] = temp return result return dfs(0, 0, 0) def check_word_path(test_cases): results = [] for matrix, word in test_cases: if exists_in_grid(matrix, word): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function `group_by_owners` / `groupByOwners` that takes in a dictionary where the keys are file names and the values are the names of their owners. The function should return a new dictionary where the keys are the owners\' names and the values are lists of file names that belong to each owner. For example, given the dictionary: ```python { \'Input.txt\': \'Randy\', \'Code.py\': \'Stan\', \'Output.txt\': \'Randy\' } ``` The function should return: ```python { \'Randy\': [\'Input.txt\', \'Output.txt\'], \'Stan\': [\'Code.py\'] } ``` The output dictionary should contain the owners\' names sorted alphabetically, and the list of file names for each owner should be in the same order as they appeared in the input dictionary.","solution":"def group_by_owners(files): Groups files by their owners. Args: files (dict): Dictionary where keys are file names and values are owners. Returns: dict: A dictionary where keys are owners and values are lists of file names. result = {} for file, owner in files.items(): if owner not in result: result[owner] = [] result[owner].append(file) # Sorting the result dictionary by owners\' names sorted_result = dict(sorted(result.items())) return sorted_result"},{"question":"Given a string, you need to find the length of the longest substring that has all distinct characters. A substring is defined as a contiguous sequence of characters within a string. If there are multiple such longest substrings, return the length of any one of them. Input The first line contains an integer T, the number of test cases. Each test case consists of a single line containing a string s. Output For each test case, output the length of the longest substring with all distinct characters. Constraints 1 ≤ T ≤ 100 1 ≤ Length of the string s ≤ 10^5 Example Input: 2 abcabcbb bbbbb Output: 3 1","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. n = len(s) char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length def process_test_cases(T, test_cases): results = [] for i in range(T): results.append(length_of_longest_substring(test_cases[i])) return results"},{"question":"In data-driven applications, efficient querying and data manipulation are vital. Imagine we have a poll system that collects votes from users. Each vote involves choosing an option from a predefined list for a given poll. We want to build a system to handle such votes and then return the results for each poll. You are to write a program that processes a series of votes and produces results for each poll based on the votes received. -----Input----- The input consists of: - An integer n (1 le n le 10^5), the number of polls. - An integer v (1 le v le 10^5), the number of votes. - n lines follow, each containing the poll id (a unique integer) and a comma-separated list of options (each is a string containing only alphabetical characters). - v lines follow, each containing a pair with the poll id and the chosen option. Assume each poll id and option string will not exceed 50 characters. -----Output----- Output the results for each poll in the format \\"Poll id: option1 - count1, option2 - count2, ...\\". The results for each poll should be in the same order as the options were provided in the input. -----Examples----- Sample Input 1: 2 5 1 optionA,optionB 2 optionX,optionY,optionZ 1 optionA 2 optionY 1 optionB 1 optionA 2 optionX 2 optionZ Sample Output 1: 1: optionA - 2, optionB - 1 2: optionX - 1, optionY - 1, optionZ - 1 Sample Input 2: 1 3 3 red,green,blue 3 blue 3 blue 3 red Sample Output 2: 3: red - 1, green - 0, blue - 2","solution":"def process_votes(n, v, polls, votes): poll_data = {} results = {} # Read poll data for i in range(n): poll_id, options = polls[i] options_list = options.split(\',\') poll_data[poll_id] = options_list results[poll_id] = {option: 0 for option in options_list} # Process votes for i in range(v): poll_id, option = votes[i] if poll_id in results and option in results[poll_id]: results[poll_id][option] += 1 # Format results formatted_results = [] for poll_id in poll_data: options_list = poll_data[poll_id] result_str = f\\"{poll_id}: \\" + \\", \\".join( f\\"{option} - {results[poll_id][option]}\\" for option in options_list ) formatted_results.append(result_str) return formatted_results"},{"question":"Automated car drivers love metric road signs! They are traveling through a series of cities that are connected by various roads. Each road has a certain distance attached to it, and they are tasked to find the shortest distance between some pairs of cities. Given a list of roads and distances between cities, your task is to answer queries about the shortest path between any two given cities. Input: The first line contains two integers n and m, where n is the number of cities and m is the number of roads. The next m lines each contain three integers u, v, and d, where u and v are the two cities connected by a road with distance d. The next line contains q, the number of queries. Each of the next q lines contains two integers x and y, representing the cities between which you need to find the shortest distance. Output: For each query, print the shortest distance between the two cities. If there is no path between the cities, print -1. Constraints: 1 ≤ n ≤ 100 1 ≤ m ≤ 10^4 1 ≤ d ≤ 10^3 1 ≤ q ≤ 10^3 1 ≤ u, v, x, y ≤ n SAMPLE INPUT 4 4 1 2 5 2 3 2 3 4 3 1 4 10 2 1 3 2 4 SAMPLE OUTPUT 7 5 Explanation For the first query, the shortest path from city 1 to city 3 is through city 2, with a total distance of 7 (1 -> 2 -> 3: 5 + 2 = 7). For the second query, the shortest path from city 2 to city 4 is directly from city 2 to city 4 with a distance of 5 (2 -> 3 -> 4: 2 + 3 = 5).","solution":"import heapq def dijkstra(n, graph, start): Implementation of Dijkstra\'s algorithm to find the shortest path from start to all other vertices. distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_path(n, edges, queries): Find the shortest path between given pairs of cities using Dijkstra\'s algorithm. graph = {i: [] for i in range(1, n + 1)} for u, v, d in edges: graph[u].append((v, d)) graph[v].append((u, d)) results = [] for x, y in queries: distances = dijkstra(n, graph, x) if distances[y] == float(\'inf\'): results.append(-1) else: results.append(distances[y]) return results # Example usage: n = 4 edges = [(1, 2, 5), (2, 3, 2), (3, 4, 3), (1, 4, 10)] queries = [(1, 3), (2, 4)] print(shortest_path(n, edges, queries)) # Output: [7, 5]"},{"question":"Your task is to implement an algorithm that, given an array representing the heights of a series of buildings, determines the total amount of amount of water that could be trapped after raining. Each element in the array represents the height of a building of unit width. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space separated integers H_1, H_2, ..., H_N denoting the heights of the buildings. -----Output:----- For each test case, print a single line containing one integer, the total amount of water trapped. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 2 times 10^4 - 0 leq H_i leq 10^4 -----Sample Input:----- 2 6 0 1 0 2 1 0 4 1 2 0 1 -----Sample Output:----- 1 1 -----EXPLANATION:----- In the first test case, water is trapped between heights 1 and 2, above the height 0. Thus, only one unit of water is trapped. In the second test case, water is trapped between heights 2 and 1, above the height 0. Thus, only one unit of water is trapped.","solution":"def trap_water(heights): Calculate the total amount of water trapped after raining. :param heights: List[int] representing the heights of buildings :return: int total amount of water trapped if not heights: return 0 n = len(heights) left, right = 0, n - 1 left_max, right_max = 0, 0 water = 0 while left < right: if heights[left] < heights[right]: if heights[left] >= left_max: left_max = heights[left] else: water += left_max - heights[left] left += 1 else: if heights[right] >= right_max: right_max = heights[right] else: water += right_max - heights[right] right -= 1 return water def process_input(T, test_cases): Process multiple test cases and return results. :param T: int number of test cases :param test_cases: list of tuples (N, heights) for each test case :return: list of int results for each test case results = [] for i in range(T): N, heights = test_cases[i] results.append(trap_water(heights)) return results"},{"question":"You are given an array of n integers. You need to perform two types of operations on this array: 1. 1 l r x — Increase every element a[i] (l ≤ i ≤ r) by x. 2. 2 l r — Output the sum of all elements a[i] (l ≤ i ≤ r). You have to process q queries of the above types in an efficient manner. Input The first line contains two integers n and q (1 ≤ n, q ≤ 2⋅10^5) — the number of elements in the array and the number of queries, respectively. The second line contains n integers, the initial values of the array, a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 10^9). The next q lines contain queries of the described format: * 1 l r x (1 ≤ l ≤ r ≤ n; -10^6 ≤ x ≤ 10^6) * 2 l r (1 ≤ l ≤ r ≤ n) Output For each query of type 2, print the result on a new line. Example Input 5 5 2 1 5 3 4 2 1 3 1 2 4 2 2 1 3 1 1 5 -2 2 2 5 Output 8 10 9","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, value): while index <= self.size: self.tree[index] += value index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def range_update(ft1, ft2, l, r, value): ft1.update(l, value) ft1.update(r + 1, -value) ft2.update(l, value * (l - 1)) ft2.update(r + 1, -value * r) def prefix_sum(ft1, ft2, index): return ft1.query(index) * index - ft2.query(index) def range_sum(ft1, ft2, l, r): return prefix_sum(ft1, ft2, r) - prefix_sum(ft1, ft2, l - 1) def process_queries(n, array, queries): ft1 = FenwickTree(n) ft2 = FenwickTree(n) # Create initial prefix array using range_update for i in range(1, n + 1): range_update(ft1, ft2, i, i, array[i - 1]) res = [] for query in queries: if query[0] == 1: # Update operation _, l, r, x = query range_update(ft1, ft2, l, r, x) elif query[0] == 2: # Range sum operation _, l, r = query res.append(range_sum(ft1, ft2, l, r)) return res"},{"question":"You are given a string containing just the characters \'(\' and \')\'. Write a function to check if the string is a valid parentheses sequence. A valid parentheses sequence is defined as follows: 1. Any left parenthesis \'(\' must have a corresponding right parenthesis \')\'. 2. Any right parenthesis \')\' must have a corresponding left parenthesis \'(\'. 3. Left parenthesis \'(\' must go before the corresponding right parenthesis \')\'. Your task is to return True if the string is a valid parentheses sequence, and False otherwise. Input Format You are given a function, bool isValidParentheses(string s) { } Constraints 1. The length of the string leq 1000. Output Format Return True if the given string is a valid parentheses sequence, and False otherwise. Sample Input s = \\"(()(()))\\" Sample Output True","solution":"def isValidParentheses(s): Checks if the string is a valid parentheses sequence. A string is considered valid if: 1. Every \'(\' has a corresponding \')\'. 2. Every \')\' has a corresponding \'(\'. 3. \'(\' comes before the corresponding \')\'. Parameters: s (str): The input string containing only \'(\' and \')\' Returns: bool: True if the string is a valid parentheses sequence, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"Create a function that takes a string of alphabets as input and returns a string where each character is replaced by the next character in the alphabet. If the character is \'z\' or \'Z\', it should wrap around to \'a\' or \'A\' respectively. # Example: ``` shiftAlphabet(\\"abc\\") --> \\"bcd\\" shiftAlphabet(\\"XYZ\\") --> \\"YZA\\" ``` # Notes: - The input string will only contain English alphabets (both lowercase and uppercase). - The function should maintain the case of the letters. - No spaces, numbers, or special characters will be included in the input.","solution":"def shiftAlphabet(s): Shifts each character in the string to the next character in the alphabet. Wraps \'z\' to \'a\' and \'Z\' to \'A\'. result = [] for char in s: if \'a\' <= char <= \'y\' or \'A\' <= char <= \'Y\': result.append(chr(ord(char) + 1)) elif char == \'z\': result.append(\'a\') elif char == \'Z\': result.append(\'A\') return \'\'.join(result)"},{"question":"Maximize the Sum of Non-Adjacent Elements. Given an array of N positive integers, determine the maximum sum of non-adjacent elements. You are not allowed to pick adjacent elements from the array to form the sum. Example 1: Input: arr[] = {3, 2, 5, 10, 7} Output: 15 Explanation: The maximum sum is formed by picking 3, 5, and 7. Example 2: Input: arr[] = {3, 2, 7, 10} Output: 13 Explanation: The maximum sum is formed by picking 3 and 10. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function max_non_adjacent_sum() that takes an array (arr) and its size (n), and returns the maximum sum of non-adjacent elements. The driver code handles the input and output. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^4","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of non-adjacent elements in the array. n = len(arr) if n == 0: return 0 elif n == 1: return arr[0] # Initialize the variables for dynamic programming prev1 = max(arr[0], 0) # max sum including the first element prev2 = 0 # max sum excluding the first element for i in range(1, n): current = max(arr[i] + prev2, prev1) prev2 = prev1 prev1 = current return prev1"},{"question":"A group of friends decides to form a basketball league. Each player will be assigned to one of two teams such that the difference in skill levels between the two teams is minimized. Each player’s skill level is represented by an integer. You are tasked with writing a program to divide the players into two teams in such a way that the absolute difference of the total skill level between the two teams is minimized. -----Input----- - The first line contains an integer N (1 le N le 100), the number of players. - The second line contains N integers separated by spaces, where the i^{th} integer represents the skill level of the i^{th} player (0 le text{skill level} le 1000). -----Output----- - One line containing one integer: the minimum possible absolute difference of the total skill level between the two teams. -----Examples----- Sample Input 1: 4 1 4 2 3 Sample Output 1: 0 Sample Input 2: 5 10 20 30 40 50 Sample Output 2: 10","solution":"def min_skill_diff(N, skill_levels): total_sum = sum(skill_levels) half_sum = total_sum // 2 dp = [0] * (half_sum + 1) for skill in skill_levels: for j in range(half_sum, skill - 1, -1): dp[j] = max(dp[j], dp[j - skill] + skill) team1_sum = dp[half_sum] team2_sum = total_sum - team1_sum return abs(team2_sum - team1_sum) # For testing purposes if __name__ == \\"__main__\\": print(min_skill_diff(4, [1, 4, 2, 3])) # Expected output: 0 print(min_skill_diff(5, [10, 20, 30, 40, 50])) # Expected output: 10"},{"question":"Task Write a function named `compressString`/`compress_string`/`CompressString` that compresses a given string using the following algorithm: 1. Traverse the string and count the number of consecutive identical characters. 2. For each group of consecutive identical characters, append the character followed by the number of occurrences to the compressed string. 3. If the compressed string length is not shorter than the original string, return the original string. Input - A single string `s` that consists of uppercase and lowercase English letters and has a length of at most 1000 characters. Output - Return the compressed string if it is shorter than the original string, otherwise return the original string. Examples ```python compress_string(\\"aabcccccaaa\\") => \\"a2b1c5a3\\" compress_string(\\"abcdef\\") => \\"abcdef\\" compress_string(\\"aaAaAA\\") => \\"aaAaAA\\" ```","solution":"def compress_string(s): Compress the string by replacing groups of consecutive identical characters with the character followed by the number of occurrences. Parameters: s (str): The input string. Returns: str: The compressed string if it is shorter than the original string, otherwise the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) # Add the last group compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"Implement a system to manage a simple task list. The system must perform two types of operations: 1. addTask task, where task is a string denoting a task name. This must store task as a new task in the system. 2. markComplete task, where task is a string denoting a task name. This must mark the specified task as completed if it exists in the system. After processing a series of operations, print the list of all tasks in the system, indicating if they are complete or pending. Example Operations are requested as follows: addTask buy_groceries addTask clean_room addTask pay_bills markComplete clean_room These operations will result in the tasks as follows: - buy_groceries: pending - clean_room: complete - pay_bills: pending Function Description Complete the taskManager function below. taskManager has the following parameters: string operations[n]: the operations to perform Returns string[]: the list of tasks with their status Input Format The first line contains a single integer, n, the number of operations to perform (the size of textit{operations[]}). Each of the following n lines contains a string, textit{operations}[i]. Constraints 1le nle10^5 1leq text{length of task}leq 50 task contains lowercase English letters and underscores only. The input does not have any duplicate task for the textit{addTask} operation. Sample Input STDIN Function ----- -------- 4 operations[] size n = 4 addTask coding operations = [\'addTask coding\', \'addTask testing\', \'markComplete coding\', \'addTask debugging\'] addTask testing markComplete coding addTask debugging Sample Output [\'coding: complete\', \'testing: pending\', \'debugging: pending\'] Explanation 1. Add a task named coding. 2. Add a task named testing. 3. Mark the task named coding as complete. 4. Add a task named debugging. 5. The system should output the list of tasks with their status.","solution":"def taskManager(operations): tasks = {} for operation in operations: parts = operation.split() command = parts[0] task = parts[1] if command == \\"addTask\\": tasks[task] = \\"pending\\" elif command == \\"markComplete\\": if task in tasks: tasks[task] = \\"complete\\" result = [f\\"{task}: {status}\\" for task, status in tasks.items()] return result"},{"question":"Sana has just bought a new phone and she wants to arrange her collection of contacts in a specific order. Help her by writing a program that sorts a list of her contacts according to their first names. If two contacts have the same first name, they should be further sorted by their last names. If the first and last names are identical, maintain their original order in the list. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of contacts. Each of the following n lines contains a contact\'s first and last name (both are strings of length 1 to 100, consisting only of lowercase letters). Output Print the sorted list of contacts, one per line, in the format \\"first_name last_name\\". Example Input 5 alice smith bob jones alice cooper claire white bob brown Output alice cooper alice smith bob brown bob jones claire white","solution":"def sort_contacts(n, contacts): Sorts the list of contacts by first names primarily and by last names secondarily. Parameters: n (int): The number of contacts. contacts (list): A list of tuples where each tuple contains a first name and last name. Returns: list: A sorted list of contacts in the format \\"first_name last_name\\". # Sort contacts: first by first name, then by last name. sorted_contacts = sorted(contacts, key=lambda x: (x[0], x[1])) return sorted_contacts"},{"question":"You are given two strings, s_1 and s_2, both of the same length. You can rotate either of the strings any number of times. A rotation consists of moving the first character of a string to the end of the string. Determine if you can make the two strings equal using any number of rotations on either string. -----Input----- The input consists of two lines. The first line contains the string s_1 (1 leq |s_1| leq 100). The second line contains the string s_2 (|s_1| = |s_2|). Both strings consist of only lowercase letters. -----Output----- Output \\"Yes\\" if it\'s possible to make the two strings equal with any number of rotations on either string. Otherwise, output \\"No\\". -----Examples----- Sample Input: abcde deabc Sample Output: Yes Sample Input: abcde edcba Sample Output: No","solution":"def can_rotate_to_equal(s1, s2): Determine if s1 can be rotated to become s2. if len(s1) != len(s2): return \\"No\\" # Concatenate s1 with itself concat_s1 = s1 + s1 # Check if s2 is a substring of the concatenated string if s2 in concat_s1: return \\"Yes\\" else: return \\"No\\""},{"question":"In a toy store, there are different types of toys arranged in a row. Each toy type is represented by a unique positive integer. The manager of the store has noticed that some customers like to buy toys in certain configurations. For example, a customer might buy toys in a way that their types form a strictly increasing or strictly decreasing sequence. However, some customers also enjoy picking toys in a \\"zig-zag\\" pattern where each toy type is strictly greater than the one before it and strictly less than the one after it or vice versa. Write a program to determine if the sequence of toy types picked by a customer forms a zig-zag pattern. Input For each of t test cases, Given an integer n representing the number of toys picked by the customer followed by a list of n integers representing the types of the picked toys. Output Print YES if the picked toys form a zig-zag pattern. Otherwise, print NO. Constraints 1 <= n <= 1000 1 <= toy type <= 10000 1 <= t <= 100 Example Input: 3 3 1 3 2 4 4 1 3 2 5 1 2 3 4 5 Output: YES YES NO","solution":"def is_zigzag(arr): Returns whether an array forms a zig-zag pattern. n = len(arr) if n < 2: return True for i in range(1, n - 1): if not ((arr[i] > arr[i-1] and arr[i] > arr[i+1]) or (arr[i] < arr[i-1] and arr[i] < arr[i+1])): return False return True def check_zigzag_patterns(t, test_cases): Checks multiple test cases if they form a zig-zag pattern. Parameters: t (int): Number of test cases. test_cases (list): List of test cases, each being a tuple (n, arr). Returns: list: A list of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for n, arr in test_cases: if is_zigzag(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Sort the odd You are given an array of integers. Your task is to sort the odd numbers in ascending order while leaving the even numbers in their original positions. Example: ``` Input: [5, 3, 2, 8, 1, 4] Output: [1, 3, 2, 8, 5, 4] ``` Note: - The input array will always have at least one odd number. - The array will only contain non-negative numbers.","solution":"def sort_the_odd(arr): Sorts the odd numbers in ascending order while leaving even numbers in their original positions. Parameters: arr (list): A list of non-negative integers containing at least one odd number. Returns: list: The list with odd numbers sorted, and even numbers in their original places. # Extract odd numbers and sort them sorted_odd_numbers = sorted([num for num in arr if num % 2 == 1]) # Create an iterator for sorted odd numbers odd_numbers_iter = iter(sorted_odd_numbers) # Replace the odd numbers in the original array with the sorted odd numbers return [next(odd_numbers_iter) if num % 2 == 1 else num for num in arr]"},{"question":"Ben has a list of `n` intervals, where each interval is represented by a pair of integers `[l, r]` (indicating the start and end points). Ben wants to merge all overlapping intervals and return a list of the merged intervals. Overlapping intervals are those that have at least one common point. Your task is to write a program to determine the list of merged intervals. -----Input----- The input consists of multiple lines as follows: - The first line contains an integer `n` (1 le n le 10^4) — the number of intervals. - The next `n` lines each contain two integers `l` and `r` (0 le l le r le 10^6) representing the intervals. -----Output----- Print the merged intervals in ascending order based on their starting point. Each merged interval should be printed as a pair `(l, r)` without any additional characters. -----Examples----- Input 6 1 3 2 4 5 7 6 8 10 12 11 13 Output 1 4 5 8 10 13 Input 4 1 5 2 6 8 10 15 18 Output 1 6 8 10 15 18 -----Note----- In the first example, the first two intervals `[1, 3]` and `[2, 4]` overlap, so they are merged into `[1, 4]`. Similarly, intervals `[5, 7]` and `[6, 8]` overlap and are merged into `[5, 8]`. Finally, `[10, 12]` and `[11, 13]` overlap and are merged into `[10, 13]`. In the second example, the first two intervals `[1, 5]` and `[2, 6]` overlap and are merged into `[1, 6]`. The other intervals do not overlap, so they remain as they are.","solution":"def merge_intervals(intervals): Merges overlapping intervals. Args: intervals (list of list of int): List of intervals [l, r]. Returns: list of list of int: List of merged intervals. if not intervals: return [] # Sort intervals by the starting point intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: last = merged[-1] if current[0] <= last[1]: # Overlapping intervals merged[-1] = [last[0], max(last[1], current[1])] else: merged.append(current) return merged"},{"question":"A local library is implementing a new digital catalog system and needs help with optimizing search efficiency for user queries. In this catalog system, there are n books, each represented as a string of lowercase alphabetic characters. Users can perform m search queries, each of which is also a string of lowercase alphabetic characters. A search query matches a book if and only if the query string is a prefix of the book string. Your task is to determine how many books match each query and output the results. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of books in the catalog. Each of the next n lines contains a single string representing the title of each book. All strings contain only lowercase letters and have lengths of no more than 100 characters. The next line contains an integer m (1 ≤ m ≤ 1000) — the number of search queries. Each of the next m lines contains a single string representing a search query. All strings contain only lowercase letters and have lengths of no more than 100 characters. -----Output----- Output m lines, each containing an integer that represents the number of books that match the corresponding query. -----Examples----- Input 5 algorithm algebra geometry geometric altruism 3 al geo math Output 3 2 0 In this example, there are 3 books (\\"algorithm\\", \\"algebra\\", and \\"altruism\\") that match the query \\"al\\". There are 2 books (\\"geometry\\" and \\"geometric\\") that match the query \\"geo\\". There are 0 books that match the query \\"math\\".","solution":"def prefix_count(books, queries): Returns the count of books that match each query prefix. Parameters: books (List[str]): List of book titles. queries (List[str]): List of search query prefixes. Returns: List[int]: List of counts of matching books for each query. result = [] for query in queries: count = sum(1 for book in books if book.startswith(query)) result.append(count) return result"},{"question":"A coding competition has a peculiar scoring system. Each problem can be successfully solved with a score of `1` or unsuccessfully with a score of `0`. You are given two arrays `s` and `t`, each representing the solutions of two contestants: - `s[i]`: Score of the first contestant on the `i-th` problem. (0 or 1) - `t[i]`: Score of the second contestant on the `i-th` problem. (0 or 1) Both contestants might have solved the problems in different orders, but you need to determine if it\'s possible to rearrange the solutions of the second contestant so that their scores match the scores of the first contestant for each problem. Constraints: - The length of both arrays, |s| and |t|, is the same and lies between 1 and 100,000. - Each element of `s` and `t` is either 0 or 1. Input The input is given from Standard Input in the following format: ``` n s t ``` where, - `n` is the length of the arrays `s` and `t`. - `s` is a string of length `n` consisting of characters \'0\' and \'1\'. - `t` is a string of length `n` consisting of characters \'0\' and \'1\'. Output If it is possible to rearrange the array `t` to match `s`, print `Yes`. Otherwise, print `No`. Examples Input ``` 3 101 111 ``` Output ``` No ``` Input ``` 4 1100 0011 ``` Output ``` Yes ``` Input ``` 5 10101 11010 ``` Output ``` Yes ```","solution":"def can_rearrange_to_match(n, s, t): Determine if it\'s possible to rearrange the array t to match s. Parameters: n (int): The length of arrays s and t. s (str): String representation of array s. t (str): String representation of array t. Returns: str: \\"Yes\\" if t can be rearranged to match s, otherwise \\"No\\". # The array t can be rearranged to match s if and only if they have the same number # of 0s and 1s. if s.count(\'0\') == t.count(\'0\') and s.count(\'1\') == t.count(\'1\'): return \\"Yes\\" else: return \\"No\\""},{"question":"Write a program that accepts a string input representing a sequence of comma-separated numbers. The task is to calculate the sum of the squares of these numbers and print the result. Input - A string of comma-separated integers Output - An integer representing the sum of the squares of the numbers SAMPLE INPUT \\"1,2,3\\" SAMPLE OUTPUT 14 Explanation: 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14","solution":"def sum_of_squares(input_string): Calculates the sum of the squares of comma-separated numbers in the input string. Parameters: input_string (str): A string of comma-separated integers Returns: int: The sum of the squares of the numbers numbers = map(int, input_string.split(\',\')) return sum(x**2 for x in numbers)"},{"question":"You are given an array of integers which contains both positive and negative numbers. Your task is to find the smallest positive integer that is not present in the array. The function should have a time complexity of O(n) and use constant extra space. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^6) — the number of integers in the array. The second line contains n integers separated by spaces representing the elements of the array. Each integer ai (−10^9 ≤ ai ≤ 10^9) is one of the elements of the array. -----Output----- Print a single integer — the smallest positive integer that is not present in the array. -----Examples----- Input 5 1 2 0 -1 3 Output 4 Input 6 -1 -2 0 1 3 4 Output 2 -----Note----- In the first sample, the numbers 1, 2, and 3 are present in the array, but the smallest positive integer not in the array is 4. In the second sample, the numbers 1 and 3 are present, but 2 is missing, so the output is 2.","solution":"def find_smallest_missing_positive(arr): Find the smallest positive integer that is not present in the array. n = len(arr) # Step 1: Mark numbers which are out of range and separate non-positive integers for i in range(n): if arr[i] <= 0 or arr[i] > n: arr[i] = n + 1 # Step 2: Use index as a hash to record the presence of numbers for i in range(n): val = abs(arr[i]) if val <= n: arr[val - 1] = -abs(arr[val - 1]) # Step 3: Identify the first index which has positive value for i in range(n): if arr[i] > 0: return i + 1 return n + 1"},{"question":"The city of Pixeltown is represented as a grid with N rows and M columns. Each cell (i, j) on the grid may contain a building or be empty. The grid is represented by a matrix where each entry can either be `1` (indicating a building) or `0` (indicating an empty cell). Your task is to find the largest square area in the grid which contains only buildings (i.e., only `1`s). The side length of the largest such square is required. Input Format The first line contains two integers N and M, the dimensions of the grid. Each of the next N lines contains M characters representing the grid (0 or 1). Output Format Output the side length of the largest square of buildings. Constraints 1 leq N, M leq 1000 Sample Input 5 6 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 Sample Output 3 Explanation The largest square consisting entirely of buildings starts at cell (2, 2) and has a side length of 3. This can be visually represented as follows with `#` denoting the buildings in the largest square: ``` 0 1 1 0 1 1 1 # # 1 1 1 1 # 0 # 1 1 1 # # # 1 1 0 1 1 1 1 0 ``` Thus, the output is `3` as the side length of the largest square is 3.","solution":"def largest_square_area(grid): N = len(grid) M = len(grid[0]) if N > 0 else 0 if N == 0 or M == 0: return 0 max_side = 0 dp = [[0] * M for _ in range(N)] for i in range(N): for j in range(M): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"Helen is a talented baker who loves to experiment with new dessert recipes. She\'s currently trying to create a schedule for baking batches of cookies for an upcoming bake sale. Helen has a unique oven that takes up \'O\' minutes to preheat before baking any batch of cookies, and each batch of cookies takes \'B\' minutes to bake. Helen receives an order that specifies the total number of cookies required, \'C\', and the number of cookies that can be baked per batch, \'P\'. Helen can only bake one batch at a time and must wait for the cookies to bake before starting a new batch. Given the order details, Helen wants to compute the minimum time required to bake the total number of cookies, including the preheating time needed at the beginning. Assume Helen can only start the oven once for each order. Write a program to help Helen calculate the total time required to fulfill the cookie order. Input: - The first line contains an integer T, denoting the number of test cases. - Each of the next T lines contains four integers O, B, C, and P, separated by single spaces. - O is the preheat time for the oven. - B is the time it takes to bake one batch of cookies. - C is the total number of cookies ordered. - P is the number of cookies that can be baked per batch. Output: For each test case, print the total time required to bake the cookies in a new line. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ O, B, C, P ≤ 10^5 SAMPLE INPUT 2 10 15 30 10 20 25 100 20 SAMPLE OUTPUT 40 145 Explanation: In the first test case: - Preheat time O = 10 minutes. - Baking time B = 15 minutes. - Total cookies C = 30. - Cookies per batch P = 10. Helen needs to bake 3 batches (since 30 cookies / 10 cookies per batch = 3 batches). Including the preheating time: - Time to bake 3 batches: 10 (preheat) + 15 * 3 (baking) = 10 + 45 = 55 minutes. In the second test case: - Preheat time O = 20 minutes. - Baking time B = 25 minutes. - Total cookies C = 100. - Cookies per batch P = 20. Helen needs to bake 5 batches (since 100 cookies / 20 cookies per batch = 5 batches). Including the preheating time: - Time to bake 5 batches: 20 (preheat) + 25 * 5 (baking) = 20 + 125 = 145 minutes.","solution":"def calculate_baking_time(O, B, C, P): Calculate the total time required to bake the given number of cookies. Parameters: O (int): Preheat time for the oven. B (int): Baking time for one batch of cookies. C (int): Total number of cookies. P (int): Number of cookies per batch. Returns: int: Total time required to bake all cookies. num_batches = (C + P - 1) // P # ceil(C / P) total_time = O + B * num_batches return total_time def process_test_cases(T, test_cases): results = [] for i in range(T): O, B, C, P = test_cases[i] results.append(calculate_baking_time(O, B, C, P)) return results"},{"question":"Sasha and Masha love playing a game called \\"Alternating Squares\\". The game is played on a grid of size n x n. The cells of the grid are initially empty. Sasha starts by selecting a cell and placing a \'1\' in it. Then, Masha selects an adjacent cell (horizontally or vertically) to Sasha\'s cell and places a \'2\' in it. They take turns alternately (Sasha then Masha, and so on) placing a \'1\' and \'2\', respectively, in adjacent cells that are still empty. The game continues until they run out of available moves. The objective is to maximize the number of turns they can take before no more moves can be made. Your task is to determine the sequence of numbers in the grid after the game ends. Input The input consists of a single integer n (1 ≤ n ≤ 100), representing the size of the grid. Output Print the resulting n x n grid after playing the game. Each cell of the grid should contain one of three values: \'0\' (if the cell is empty), \'1\' (if Sasha placed a \'1\' there), or \'2\' (if Masha placed a \'2\' there). Example Input 3 Output 1 2 1 2 1 2 1 2 1 Input 4 Output 1 2 1 2 2 1 2 1 1 2 1 2 2 1 2 1","solution":"def alternating_squares(n): Generates an n x n grid where Sasha and Masha alternately place \'1\' and \'2\' starting from the top left corner. grid = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): if (i + j) % 2 == 0: grid[i][j] = 1 else: grid[i][j] = 2 return grid"},{"question":"Nick is a passionate coder with a peculiar love for patterns. He recently came across a fascinating sequence problem and he needs your help to solve it. Given a sequence of n integers a1, a2, ... , an, the sequence can be transformed into another sequence by \\"flipping\\" all subarrays of it exactly k times. Flipping a subarray means reversing the order of its elements. If a sequence is [2, 1, 3] and we flip the subarray from index 1 to 2, the sequence becomes [1, 2, 3]. If we flip it again, it becomes [2, 1, 3] and so on. Formally, for a given sequence a of length n and an integer k, a subarray flip operation can be applied to any subarray [l; r] (1 ≤ l ≤ r ≤ n) exactly k times. Your task is to determine whether it\'s possible to return to the original sequence a after exactly k flips. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Input The first line of input contains two integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ 105) – The length of the sequence and the number of flips, respectively. The second line contains n integers a1, a2, ... , an (1 ≤ ai ≤ 109) – The sequence to be checked. Output Print \\"YES\\" if it\'s possible to return to the original sequence after exactly k flips. Otherwise, print \\"NO\\". Example Input 5 2 1 2 3 4 5 Output YES Input 3 3 3 2 1 Output NO Explanation: In the first example, it is possible to return to the original sequence [1,2,3,4,5] after flipping any subarray exactly 2 times consecutively. In the second example, it\'s not possible to return to the original sequence [3,2,1] after exactly 3 flips.","solution":"def can_return_to_original(n, k, sequence): Determines if the sequence can return to its original order after exactly k flips. Parameters: n (int): The length of the sequence. k (int): The number of flips. sequence (list): The sequence of integers. Returns: str: \\"YES\\" if it\'s possible to return to the original sequence after exactly k flips, otherwise \\"NO\\". # If k is even, return \\"YES\\" because any even number of flips result in reversing back to the original sequence if k % 2 == 0: return \\"YES\\" else: # If k is odd, check if the sequence is symmetric (palindromic) if sequence == sequence[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"A balanced binary tree is a special type of binary tree in which the depth of the two subtrees of every node never differ by more than 1. Write a function to convert a sorted array into a balanced binary tree. You are given a sorted array of distinct integers. Your task is to create a balanced binary tree from this array. Input: - The first line of input contains an integer t, the number of test cases. - The following t lines each contain a sorted array of integers. Output: - For each test case, print the in-order traversal of the balanced binary tree in a single line. Constraints: 1 <= t <= 100 1 <= length of each array <= 100 -10^4 <= elements of array <= 10^4 Example Input: 2 [-10, -3, 0, 5, 9] [1, 2, 3, 4, 5, 6, 7] Example Output: -10 -3 0 5 9 1 2 3 4 5 6 7","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_array_to_bst(nums): Convert a sorted array to a balanced binary search tree. if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sorted_array_to_bst(nums[:mid]) root.right = sorted_array_to_bst(nums[mid+1:]) return root def inorder_traversal(root): Perform an in-order traversal of the binary tree. if root: return inorder_traversal(root.left) + [root.val] + inorder_traversal(root.right) else: return [] def process_test_cases(test_cases): results = [] for nums in test_cases: tree = sorted_array_to_bst(nums) in_order = inorder_traversal(tree) results.append(\' \'.join(map(str, in_order))) return results # Example input t = 2 test_cases = [ [-10, -3, 0, 5, 9], [1, 2, 3, 4, 5, 6, 7] ] result = process_test_cases(test_cases) for res in result: print(res) # Should print the inorder traversal of the BST"},{"question":"Shawn loves creating unique designs with a rectangular grid of size n x m. Each cell in the grid can either be empty or filled with a specific character. Shawn wants to fill the grid in such a way that every row and every column contains at least one filled cell, ensuring that no two adjacent cells (horizontally or vertically) have the same character. Your task is to help Shawn fill the grid according to these rules. You may use any uppercase English letters (\'A\' to \'Z\') to fill the cells, and each cell must have a character different from its adjacent cells. -----Input----- The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100). -----Output----- Output must contain n lines, each line with m characters. Ensure every row and every column contains at least one filled cell, and no two adjacent cells contain the same character. If multiple solutions are possible, print any one of them. If no solution exists, print \\"NO\\". -----Examples----- Input 1 1 Output A Input 2 3 Output ABA BAB Input 3 4 Output ABAB BABA ABAB -----Note----- In the first sample, the grid contains only one cell, and Shawn can fill it with any uppercase letter like \'A\'. In the second sample, each row and column has been filled such that no two adjacent cells have the same character. In the third sample, the grid is filled such that every row and every column contains at least one filled cell, and no two adjacent cells have the same character. Multiple correct patterns satisfying the conditions can be created.","solution":"def fill_grid(n, m): if n == 1 and m == 1: return [\\"A\\"] grid = [[\'\'] * m for _ in range(n)] characters = [\'A\', \'B\'] for i in range(n): for j in range(m): grid[i][j] = characters[(i + j) % 2] filled_grid = [\'\'.join(row) for row in grid] return filled_grid"},{"question":"Description: Write a function to remove all duplicates from an unsorted linked list. The function should return the modified linked list with only unique elements retained and all duplicates removed. You can assume the linked list node is defined as follows (provide the class definition if necessary): ```python class Node: def __init__(self, value=0, next=None): self.value = value self.next = next ``` # Example Input: `1 -> 3 -> 2 -> 3 -> 4 -> 1` Output: `1 -> 3 -> 2 -> 4` # Constraints - The linked list can contain up to `10^4` nodes. - The value of each node is within the range `[-10^5, 10^5]`.","solution":"class Node: def __init__(self, value=0, next=None): self.value = value self.next = next def remove_duplicates(head): Removes all duplicates from an unsorted linked list. :param head: The head node of the linked list. :return: The head node of the modified linked list with duplicates removed. if not head: return head # Use a set to track seen values seen = set() current = head seen.add(current.value) while current.next: if current.next.value in seen: current.next = current.next.next else: seen.add(current.next.value) current = current.next return head # Helper function to convert list to linked list for testing def create_linked_list(elements): if not elements: return None head = Node(elements[0]) current = head for value in elements[1:]: current.next = Node(value) current = current.next return head # Helper function to convert linked list to list for testing def linked_list_to_list(head): elements = [] current = head while current: elements.append(current.value) current = current.next return elements"},{"question":"You are given a data log containing details about various events that occurred on a software application. Each event is recorded with a timestamp and a unique event ID. The log might not be ordered by the timestamp. The goal is to determine the longest sequence of events such that each event in the sequence happened before the next event in the sequence based on their timestamps. Write a function `longest_event_sequence(events: List[Tuple[int, int]]) -> int` that computes the length of the longest sequence of events. # Constraints * 1 ≤ len(events) ≤ 10^5 * 1 ≤ timestamp ≤ 10^9 * 1 ≤ event_id ≤ 10^9 # Input * `events`: A list of tuples `(timestamp, event_id)`, where `timestamp` indicates the time at which the event occurred and `event_id` is the unique identifier for the event. # Output * An integer representing the length of the longest sequence of events sorted by their timestamps. # Example Input: ```python events = [ (1, 101), (3, 102), (2, 103), (4, 104), (5, 105) ] ``` Output: ``` 5 ``` Input: ```python events = [ (5, 201), (1, 202), (3, 203), (4, 204), (2, 205) ] ``` Output: ``` 4 ``` # Explanation In the first example, all events are already in order of their timestamps, so the longest sequence is the entire list with length 5. In the second example, one of the possible longest sequences by timestamp is `(1, 202) -> (3, 203) -> (4, 204) -> (5, 201)` with length 4.","solution":"def longest_event_sequence(events): Computes the length of the longest sequence of events sorted by their timestamps. Args: events (List[Tuple[int, int]]): A list of tuples (timestamp, event_id). Returns: int: The length of the longest sequence of events. # Sort events based on the timestamp sorted_events = sorted(events, key=lambda x: x[0]) return len(sorted_events)"},{"question":"K Unique Characters Substring Create a function `k_unique_substring` which accepts an argument `s` (a string) and `k` (an integer), and returns the length of the longest substring that contains exactly `k` unique characters. If there is no such substring, the function should return `-1`. # Example: ```python k_unique_substring(\\"araaci\\", 2) # returns 4 k_unique_substring(\\"araaci\\", 1) # returns 2 k_unique_substring(\\"cbbebi\\", 3) # returns 5 k_unique_substring(\\"aabacbebebe\\", 3) # returns 7 ``` # Constraints: - The input string `s` will have a length of at least 1 and at most 100,000. - The integer `k` will be between 0 and the length of the input string `s`. # Notes: - The function must efficiently handle large inputs up to the constraint limits. - The substring must contain exactly `k` unique characters. If no such substring exists, the function must return `-1`. - The solution should utilize a sliding window technique for optimization. # Function Signature: ```python def k_unique_substring(s: str, k: int) -> int: # your code here ``` Consider this problem as an exercise in mastering sliding window techniques and ensures you handle edge cases for string manipulation efficiently.","solution":"def k_unique_substring(s: str, k: int) -> int: if k == 0: return -1 # No valid substrings with 0 unique characters n = len(s) if n < k: return -1 # Not enough characters to have k unique characters char_count = {} max_length = -1 window_start = 0 for window_end in range(n): right_char = s[window_end] if right_char not in char_count: char_count[right_char] = 0 char_count[right_char] += 1 while len(char_count) > k: left_char = s[window_start] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] window_start += 1 if len(char_count) == k: max_length = max(max_length, window_end - window_start + 1) return max_length"},{"question":"Alice has a passion for vintage music, particularly vinyl records. She has a collection of vinyl records from different decades and genres. Her friend, Bob, wants to borrow records from her collection, but he only wants records that belong to particular decades. Alice decides to help Bob by creating a program that filters her records based on the decades Bob is interested in. You are given a list of Alice\'s records, where each record is described by its title and the decade it was released in. Additionally, you are given a list of decades Bob is interested in. Write a program that prints all the records that fall within the decades Bob specified, in the order they appear in the input. -----Constraints----- - All values in input are integers or strings. - 1 ≤ L ≤ 100 (where L is the number of records in Alice\'s collection) - Each record is described by a title (a string of up to 50 characters) and a decade (an integer representing the start year of the decade, e.g., 1970 for the 1970s) - 1 ≤ D ≤ 10 (where D is the number of decades Bob is interested in) - Decades of interest will always be in valid decade format (e.g., 1980, 2000, etc.) -----Input----- The input is given from Standard Input in the following format: L title_1 decade_1 title_2 decade_2 ... title_L decade_L D decade_a decade_b ... decade_D -----Output----- Print the titles of the records that fall within the decades Bob specified, each on a new line. If no records match the specified decades, print \\"No records found.\\" -----Sample Input----- 6 \\"Dark Side of the Moon\\" 1970 \\"Thriller\\" 1980 \\"Nevermind\\" 1990 \\"Abbey Road\\" 1960 \\"Back in Black\\" 1980 \\"The Wall\\" 1970 2 1970 1980 -----Sample Output----- \\"Dark Side of the Moon\\" \\"Thriller\\" \\"Back in Black\\" \\"The Wall\\"","solution":"def filter_records(records, decades_of_interest): Filters the records based on the decades of interest. :param records: List of tuples, where each tuple contains the title of the record and the decade it was released in. :param decades_of_interest: List of decades Bob is interested in. :return: List of titles of the records that fall within the decades of interest. filtered_records = [title for title, decade in records if decade in decades_of_interest] if not filtered_records: return [\\"No records found\\"] return filtered_records"},{"question":"You are working on a project to categorize words based on their lengths from a given string. The goal is to create a dictionary where the keys are the lengths of words and the values are lists of words that have the corresponding length. ------ Input ------ The input consists of a single string containing multiple words. Words in the string are separated by spaces and consist of lowercase and uppercase English letters only. ------ Output ------ Output a dictionary where each key is an integer representing the length of words and the values are lists of words that have that length. The lists of words should be in the order they appear in the input string. ------ Constraints ------ 1 ≤ Length of input string ≤ 10^3 1 ≤ Length of each word ≤ 100 ------ Sample Input 1 ------ \\"The quick brown fox jumps over the lazy dog\\" ------ Sample Output 1 ------ { 3: [\\"The\\", \\"fox\\", \\"the\\", \\"dog\\"], 5: [\\"quick\\"], 5: [\\"brown\\"], 5: [\\"jumps\\"], 4: [\\"over\\", \\"lazy\\"] } ------ Explanation 1 ------ The input string has words of lengths 3, 5, and 4. Words like \\"The\\", \\"fox\\", \\"the\\", and \\"dog\\" all have length 3 and therefore are grouped together under key 3. Words \\"quick\\", \\"brown\\", and \\"jumps\\" have length 5 and thus are grouped under key 5. Words \\"over\\", \\"lazy\\" have length 4 and are grouped under key 4.","solution":"def categorize_words_by_length(input_string): Categorizes words from the input string based on their lengths. Args: input_string (str): The input string containing multiple words. Returns: dict: A dictionary where keys are word lengths and values are lists of words with that length. words = input_string.split() length_dict = {} for word in words: length = len(word) if length in length_dict: length_dict[length].append(word) else: length_dict[length] = [word] return length_dict"},{"question":"Bob loves collecting stamps from different countries. He has a habit of grouping his stamps by countries and wants to know the total number of stamps he has from each country. Help Bob by providing a program that calculates the total number of stamps he has from each country based on the given input. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case starts with a line containing a single integer C, the number of countries. - For each of the next C lines, there will be two space-separated values: a string representing the name of the country and an integer representing the number of stamps from that country. ------ Output Format ------ For each test case, output the name of the country followed by the total number of stamps from that country, each country on a new line. The countries should be printed in the order they appeared in the input. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ C ≤ 50 1 ≤ number of stamps ≤ 1000 ------ Sample Input 1 ------ 2 3 USA 100 Canada 150 Mexico 200 2 Japan 300 SouthKorea 400 ------ Sample Output 1 ------ USA 100 Canada 150 Mexico 200 Japan 300 SouthKorea 400 ------ Explanation 1 ------ Test case 1: Bob has stamps from 3 countries. He has 100 stamps from USA, 150 stamps from Canada, and 200 stamps from Mexico. Test case 2: Bob has stamps from 2 countries. He has 300 stamps from Japan and 400 stamps from South Korea.","solution":"def total_stamps_by_country(T, test_cases): results = [] for i in range(T): C = test_cases[i][0] stamps_data = test_cases[i][1] for country, stamps in stamps_data: results.append(f\\"{country} {stamps}\\") return results"},{"question":"Dr. Strange has a list of spells, each represented by a string of lowercase letters. A spell is considered powerful if the number of distinct characters in it is a prime number. Your task is to count the number of powerful spells in the given list. Input First line contains an integer T, the number of testcases. Each testcase: First line contains an integer N, the number of spells. Next N lines, each containing one spell (a string of lowercase letters). Output For each testcase, print the number of powerful spells in one line. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ length of each spell ≤ 100 Note: A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The first few primes are: 2, 3, 5, 7, 11, 13, ... SAMPLE INPUT 2 3 abc abb abcde 2 aaaa abcdef SAMPLE OUTPUT 2 1 Explanation For first testcase: - \'abc\' has 3 distinct characters (prime) - \'abb\' has 2 distinct characters (prime) - \'abcde\' has 5 distinct characters (prime) So, there are 2 powerful spells. For second testcase: - \'aaaa\' has 1 distinct character (not a prime) - \'abcdef\' has 6 distinct characters (not a prime) So, there is 1 powerful spell.","solution":"def is_prime(num): Returns True if num is a prime number, else False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def count_powerful_spells(spells): Counts how many spells are powerful, i.e., have a prime number of distinct characters. powerful_spells_count = 0 for spell in spells: distinct_characters_count = len(set(spell)) if is_prime(distinct_characters_count): powerful_spells_count += 1 return powerful_spells_count def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 results = [] for _ in range(T): N = int(data[index]) index += 1 spells = [] for _ in range(N): spells.append(data[index]) index += 1 results.append(count_powerful_spells(spells)) for result in results: print(result)"},{"question":"Given an array of integers `arr` and an integer `n`, your task is to partition the array into `n` contiguous subarrays such that the maximum sum of any subarray is minimized. Return this minimized maximum sum. ``` For example: min_partition_sum([7, 2, 5, 10, 8], 2) = 18 because partitioning into [7, 2, 5] and [10, 8] minimizes the maximum subarray sum of 18. min_partition_sum([1, 2, 3, 4, 5], 2) = 9 because partitioning into [1, 2, 3, 4] and [5] minimizes the maximum subarray sum of 9. min_partition_sum([1, 4, 4], 3) = 4 because partitioning into [1], [4], and [4] minimizes the maximum subarray sum of 4. ``` More examples in test cases. Good luck!","solution":"def min_partition_sum(arr, n): def is_valid_partition(max_sum): current_sum = 0 partitions = 1 for num in arr: if current_sum + num > max_sum: partitions += 1 current_sum = num if partitions > n: return False else: current_sum += num return True left = max(arr) right = sum(arr) result = right while left <= right: mid = (left + right) // 2 if is_valid_partition(mid): result = mid right = mid - 1 else: left = mid + 1 return result"},{"question":"Design a system that simulates a vending machine. The vending machine should be able to store a certain amount of inventory for different items. It should accept money and dispense items, giving back change if necessary. Additionally, the machine should be able to handle several types of coin denominations. Your task is to implement a `VendingMachine` class with the following methods: 1. **`__init__(self, items: Dict[str, Tuple[int, float]], coins: Dict[float, int])`**: Initializes the vending machine with: - `items`: A dictionary where the keys are item names and the values are tuples containing the quantity and the price of each item. - `coins`: A dictionary where the keys are the coin denominations and the values are the quantities of each denomination in the vending machine. 2. **`insert_coin(self, coin: float) -> bool`**: Inserts a coin into the vending machine. Returns `True` if the coin denomination is accepted by the machine, otherwise returns `False`. 3. **`select_item(self, item_name: str) -> bool`**: Selects an item to be dispensed. Returns `True` if the item is available and enough money has been inserted, otherwise returns `False`. 4. **`dispense_change(self) -> Dict[float, int]`**: Dispenses change based on the inserted money and the cost of the selected item. Returns a dictionary where the keys are the coin denominations and the values are the quantities of each denomination dispensed as change. Sample usage: ```python # Initialize the vending machine with items and coins items = { \\"soda\\": (10, 1.50), \\"chips\\": (5, 1.00), \\"candy\\": (20, 0.75) } coins = { 0.25: 50, 0.10: 50, 0.05: 50, 0.01: 50 } vm = VendingMachine(items, coins) # Insert coins vm.insert_coin(1.00) # True vm.insert_coin(0.50) # True # Select item vm.select_item(\\"soda\\") # True # Dispense change change = vm.dispense_change() # {0.25: 0, 0.10: 0, 0.05: 0, 0.01: 0} ``` Note: - The machine should only dispense an item if the exact price has been inserted or more. - When dispensing change, the machine should prioritize larger denominations first. - If the exact change cannot be made, the machine should return an empty dictionary and keep the inserted money. - If an item is out of stock or insufficient coins are inserted, the selection should fail. - The `insert_coin` method should only accept coins that the machine recognizes. Implement the `VendingMachine` class that meets the above specification.","solution":"class VendingMachine: def __init__(self, items, coins): self.items = items self.coins = coins self.inserted_coins = 0.0 self.selected_item = None def insert_coin(self, coin: float) -> bool: if coin in self.coins: self.inserted_coins += coin self.coins[coin] += 1 return True return False def select_item(self, item_name: str) -> bool: if item_name in self.items: quantity, price = self.items[item_name] if quantity > 0 and self.inserted_coins >= price: self.selected_item = item_name return True return False def dispense_change(self) -> dict: if not self.selected_item: return {} quantity, price = self.items[self.selected_item] if self.inserted_coins < price: return {} change_to_dispense = round(self.inserted_coins - price, 2) change = {} change_available = {k: self.coins[k] for k in sorted(self.coins, reverse=True)} for coin in change_available: while change_available[coin] > 0 and change_to_dispense >= coin: if coin in change: change[coin] += 1 else: change[coin] = 1 change_to_dispense = round(change_to_dispense - coin, 2) change_available[coin] -= 1 if change_to_dispense != 0: return {} for coin in change: self.coins[coin] -= change[coin] self.items[self.selected_item] = (quantity - 1, price) self.inserted_coins = 0.0 self.selected_item = None return change"},{"question":"Kira is organizing a singing contest with a twist. Each contestant sings their favorite song, but they are only allowed to sing a part of the song - specifically, a substring of it. Kira wants to determine the longest common substring among all the selected sung parts, to decide which song is the most popular. A substring is defined as a contiguous sequence of characters within a string. You are given multiple test cases, and for each test case, you need to find the longest common substring among all given sung parts. If there are multiple longest common substrings with the same length, return any one of them. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (2 le n le 100) — the number of contestants. The next n lines each contain a string s_i (1 le |s_i| le 100), where s_i is the sung part by the i-th contestant. It is guaranteed that the sum of lengths of all strings in one test case does not exceed 1000. -----Output----- For each test case, print the longest common substring. If there are multiple substrings with the same length, you can print any of them. If there is no common substring, print an empty string. -----Examples----- Input 2 3 abcd abc ab 2 xyz yzx Output ab yz -----Note----- In the first test case, \\"ab\\" is the longest common substring shared among all given songs. In the second test case, either \\"yz\\" or \\"zx\\" can be a valid output as the longest common substring.","solution":"def longest_common_substring(test_cases): Given multiple test cases, find the longest common substring among the given strings of each test case. Parameters: test_cases (list): A list of test case lists, where each test case list contains n+1 elements, the first element is the number of strings, followed by n strings. Returns: list: A list of longest common substrings for each test case. results = [] for case in test_cases: n = case[0] strings = case[1:] def find_lcs(s1, s2): m = len(s1) n = len(s2) LCSuff = [[0] * (n + 1) for i in range(m + 1)] result = 0 end = 0 for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: LCSuff[i][j] = 0 elif s1[i-1] == s2[j-1]: LCSuff[i][j] = LCSuff[i-1][j-1] + 1 if LCSuff[i][j] > result: result = LCSuff[i][j] end = i - 1 else: LCSuff[i][j] = 0 return s1[end - result + 1: end + 1] common_substr = strings[0] for i in range(1, len(strings)): common_substr = find_lcs(common_substr, strings[i]) if common_substr == \\"\\": break results.append(common_substr) return results"},{"question":"You are visiting a botanical garden that opens at `08:00` in the morning and closes at `20:00` in the evening. During your visit, you want to optimize your photo sessions by spending no more than 60 minutes in a single spot at a time, while also ensuring you stick to the garden\'s opening hours to avoid locked gates. Given your current time, write a function that can calculate how much time you can spend in your current spot before having to move, without violating the garden\'s rules. Examples ``` \\"07:30\\" => 30 \\"08:00\\" => 60 \\"19:30\\" => 30 \\"20:00\\" => 0 ``` # Notes 1. Return the maximum number of minutes you can stay in the current spot. 2. Input will be formatted as `HH:MM` (24-hour clock). 3. If the current time is outside the garden\'s visiting hours, the function should return 0.","solution":"def time_to_stay(current_time): Calculates the maximum time (in minutes) you can stay in your current spot based on the garden\'s opening and closing hours. Parameters: current_time (str): The current time in \\"HH:MM\\" format. Returns: int: The maximum number of minutes you can stay. opening_time = \\"08:00\\" closing_time = \\"20:00\\" max_stay = 60 # Convert the current time to minutes since midnight current_hour, current_minute = map(int, current_time.split(\\":\\")) current_time_minutes = current_hour * 60 + current_minute # Convert the opening and closing time to minutes since midnight opening_minutes = 8 * 60 closing_minutes = 20 * 60 # Check if the current time is outside visiting hours if current_time_minutes < opening_minutes or current_time_minutes >= closing_minutes: return 0 # Calculate remaining time until closing or 60 minutes, whichever is smaller remaining_time = closing_minutes - current_time_minutes return min(remaining_time, max_stay)"},{"question":"You have a string of lowercase English letters. Your task is to transform the string into a \\"special\\" string, which is a string such that all its letters are the same and in alphabetical order (i.e., successive letters should be the same). You can transform a string by performing the following operation any number of times: - Choose any non-empty substring of the string and replace all characters in that substring with any same lowercase English letter. Determine the minimum number of operations to transform the given string into a \\"special\\" string. -----Input----- The first line contains a single integer t (1 le t le 10^3) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 1000) — the string that needs to be transformed. -----Output----- For each test case, print a single integer — the minimum number of operations required to transform the string s into a \\"special\\" string. -----Examples----- Input 4 a ab abc aaabccc Output 0 1 2 2 -----Note----- In the first test case, the string is already \\"special\\". In the second test case, we can replace either \\"a\\" or \\"b\\" to make the string \\"aa\\" or \\"bb\\". In the third test case, we can replace \\"a\\" and \\"b\\" to transform the string into \\"ccc\\". In the fourth test case, one optimal way is to replace \\"aaab\\" to \\"bbb\\" and then replace \\"ccc\\" to \\"bbb\\", making the string \\"bbb\\" in 2 operations.","solution":"def min_operations_to_special_string(t, strings): results = [] for s in strings: distinct_letters = set(s) results.append(len(distinct_letters) - 1) return results"},{"question":"Write a program that simulates the operations of a simple text editor. The editor supports the following operations: 1. Insert a character at the end of the current text. 2. Delete the last character of the current text. 3. Print the k-th character of the current text. 4. Undo the last operation (which could be an insert or a delete). Here are the details of the operations: - `1 x`: Insert character `x` (any lowercase alphabet) at the end of the current text. - `2`: Delete the last character of the current text. - `3 k`: Print the k-th character (1-based index) of the current text. - `4`: Undo the last operation. If the last operation was a `1 x` operation, delete the last character. If the last operation was a `2` operation, restore the deleted character. Input The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of operations. The next `n` lines describe the operations. Output For each `3 k` operation, print the k-th character of the current text in a new line. Example Input 8 1 a 1 b 1 c 3 2 2 3 2 4 3 2 Output b b c Explanation: 1. The text is initially empty. 2. `1 a` inserts \'a\' resulting in text = \\"a\\". 3. `1 b` inserts \'b\' resulting in text = \\"ab\\". 4. `1 c` inserts \'c\' resulting in text = \\"abc\\". 5. `3 2` prints the 2nd character which is \'b\'. 6. `2` deletes the last character resulting in text = \\"ab\\". 7. `3 2` prints the 2nd character which is \'b\'. 8. `4` undoes the last `2` operation, restoring the deleted character, resulting in text = \\"abc\\". 9. `3 2` prints the 2nd character which is \'b\'.","solution":"class TextEditor: def __init__(self): self.text = [] self.history = [] def insert(self, char): self.text.append(char) self.history.append((\'insert\', char)) def delete(self): if self.text: removed_char = self.text.pop() self.history.append((\'delete\', removed_char)) def print_char(self, k): if 1 <= k <= len(self.text): print(self.text[k-1]) def undo(self): if self.history: last_operation = self.history.pop() if last_operation[0] == \'insert\': self.text.pop() elif last_operation[0] == \'delete\': self.text.append(last_operation[1]) def process_operations(n, operations): text_editor = TextEditor() results = [] for operation in operations: parts = operation.split() command = int(parts[0]) if command == 1: char = parts[1] text_editor.insert(char) elif command == 2: text_editor.delete() elif command == 3: k = int(parts[1]) results.append(text_editor.text[k-1]) # Collect the result for printing later elif command == 4: text_editor.undo() return results"},{"question":"A gaming company is designing an obstacle course consisting of N obstacles arranged in a straight line. Each obstacle has a difficulty level represented by an integer in the array `obstacles[]` (1-based indexing). A player can jump from obstacle `i` to obstacle `i+1`, and they accumulate stress equal to the absolute difference between the difficulty levels of these two obstacles. If a player has a maximum stress threshold of K, determine if they can complete the course from the first obstacle to the last. If they can, return the total accumulated stress, otherwise return -1. Example 1: Input: N=5, K=10 obstacles[] = {1, 3, 6, 10, 8} Output: 9 Explanation: 1 -> 3: stress = |3-1| = 2 3 -> 6: stress = |6-3| = 3 6 -> 10: stress = |10-6| = 4 10 -> 8: stress = |8-10| = 2 Total stress = 2 + 3 + 4 + 2 = 11, which is less than or equal to K = 10. Example 2: Input: N=4, K=5 obstacles[] = {4, 7, 15, 10} Output: -1 Explanation: 4 -> 7: stress = |7-4| = 3 7 -> 15: stress = |15-7| = 8 Since the jump from obstacle 2 to obstacle 3 causes a stress of 8, which exceeds the threshold K = 5, the player cannot complete the course. Your Task: You don\'t need to read input or print anything. Your task is to complete the function verifyCourse() that takes the array obstacles, integer N, and stress threshold K as parameters and returns the total accumulated stress if the player can complete the course, otherwise returns -1. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^6 1 ≤ obstacles[i] ≤ 10^9 1 ≤ K ≤ 10^9","solution":"def verifyCourse(N, K, obstacles): Determines if a player can complete an obstacle course without exceeding a maximum stress threshold. Parameters: N (int): Number of obstacles K (int): Maximum stress threshold obstacles (List[int]): List of obstacle difficulties (1-based index) Returns: int: Total accumulated stress if course can be completed, otherwise -1. total_stress = 0 for i in range(N - 1): stress = abs(obstacles[i + 1] - obstacles[i]) if stress > K: return -1 total_stress += stress return total_stress"},{"question":"Write a function that takes an integer as input and returns a string that represents a progression of numbers in the form of a staircase. Each step of the staircase should increase in width by one number, starting from 1 up to the given input number, and then descending back to 1. Example: For input `4`, the output should be: ``` 1 12 123 1234 123 12 1 ``` For input `2`, the output should be: ``` 1 12 1 ```","solution":"def staircase_progression(n): Takes an integer n and returns a string representing a progression of numbers in the form of a staircase. if n < 1: return \\"\\" result = [] # Ascend from 1 up to n for i in range(1, n + 1): result.append(\\"\\".join(str(x) for x in range(1, i + 1))) # Descend from n-1 down to 1 for i in range(n - 1, 0, -1): result.append(\\"\\".join(str(x) for x in range(1, i + 1))) return \\"n\\".join(result)"},{"question":"You are given an integer q, and a list of n pairs of integers each representing the endpoints of an interval [a_i, b_i]. Your task is to answer q queries. Each query consists of a single integer x and asks you to count how many of the intervals contain the point x. Input The first line of input contains two integers n and q (1 ≤ n, q ≤ 200,000) — the number of intervals and the number of queries, respectively. Each of the next n lines contains two integers a_i and b_i (1 ≤ a_i ≤ b_i ≤ 2*10^9), representing the endpoints of the i-th interval. The next q lines contain one integer x (1 ≤ x ≤ 2*10^9) each, representing the queries. Output For each query, print a single integer, the count of intervals that contain the point x. Example Input 3 2 1 4 2 6 3 5 3 7 Output 3 0 Note For the first query, all intervals [1, 4], [2, 6], and [3, 5] contain the point 3. For the second query, none of the intervals contain the point 7.","solution":"def count_intervals(n, intervals, queries): For each query integer x, count how many intervals contain the point x. :param n: int, number of intervals :param intervals: list of tuples, each tuple (a_i, b_i) represents an interval :param queries: list of int, queries :return: list of int, results for each query results = [] for x in queries: count = sum(a_i <= x <= b_i for a_i, b_i in intervals) results.append(count) return results"},{"question":"There are n restaurants arranged in a circle. Each restaurant has a rating, represented by an integer a_i (0 le a_i le 10^9). You want to find the maximum sum of adjacent ratings of any two restaurants. You are given the ratings of the restaurants in a clockwise order. Since the restaurants are arranged in a circle, the first restaurant is adjacent to the last one. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 1000) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (2 leq n leq 100) — the number of restaurants. The second line of each test case contains n integers a_1, a_2, ldots, a_n — the ratings of the restaurants. -----Output----- For each test case, output a single integer — the maximum sum of adjacent ratings of any two restaurants. -----Examples----- Input 3 4 1 3 2 5 5 6 1 10 7 10 3 7 7 7 Output 7 17 14 -----Note----- In the first test case, the restaurants are arranged in a circle, and any two adjacent restaurants can be considered. The maximum sum of adjacent ratings is 3 + 5 = 8. In the second test case, the maximum sum of adjacent ratings is 10 + 7 = 17. In the third test case, all restaurants have the same rating, so the maximum sum of adjacent ratings is 7 + 7 = 14.","solution":"def max_adjacent_sum(t, test_cases): results = [] for i in range(t): n, ratings = test_cases[i] max_sum = ratings[-1] + ratings[0] # Starting with the sum of the first and the last because of circular arrangement for j in range(n - 1): max_sum = max(max_sum, ratings[j] + ratings[j + 1]) results.append(max_sum) return results # Example usage: # test_cases_input = [ # (4, [1, 3, 2, 5]), # (5, [6, 1, 10, 7, 10]), # (3, [7, 7, 7]) # ] # print(max_adjacent_sum(3, test_cases_input)) # Output: [7, 17, 14]"},{"question":"Given a binary tree and a number k, you are required to complete the function kthLevelSum() which returns the sum of all nodes at the k-th level of the tree. The root is considered to be at level 0. Example 1: Input: 1 / 2 3 / / 4 5 6 k = 2 Output: 15 Explanation: Nodes at level 2 are 4, 5, and 6. Their sum is 4 + 5 + 6 = 15. Example 2: Input: 10 / 20 30 / 40 50 k = 1 Output: 50 Explanation: Nodes at level 1 are 20 and 30. Their sum is 20 + 30 = 50. Your Task: You don\'t need to read input or print anything. Complete the function kthLevelSum() which takes the root of the tree and the integer k as input parameters, and returns the sum of nodes at the k-th level. Constraints: - 1 <= T <= 100 - 1 <= Number of nodes <= 1000 - -10^5 <= Node value <= 10^5","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def kthLevelSum(root, k): if root is None: return 0 level = 0 queue = [root] while queue: if level == k: return sum(node.val for node in queue) next_level = [] for node in queue: if node.left: next_level.append(node.left) if node.right: next_level.append(node.right) queue = next_level level += 1 return 0 # if k is larger than the maximum depth of the tree"},{"question":"Given an array of size N containing distinct integers. Transform the array based on the following operations: 1. Identify the median of the array. If the size of the array is even, use the lower middle element as the median. 2. Create two new arrays: a. One array contains elements less than the median, sorted in ascending order. b. The other array contains elements greater than the median, sorted in descending order. 3. Combine these two arrays with the median in the middle to form the final transformed array. Example 1: Input: N = 5 array = [3, 1, 4, 2, 5] Output: 1 2 3 5 4 Explanation: The median is 3. Elements less than median: 1, 2 (sorted: 1, 2) Elements greater than median: 4, 5 (sorted: 5, 4) Final array: 1, 2, 3, 5, 4 Example 2: Input: N = 6 array = [8, 3, 5, 7, 2, 6] Output: 2 3 5 6 8 7 Explanation: The median is 5. Elements less than median: 2, 3 (sorted: 2, 3) Elements greater than median: 6, 7, 8 (sorted: 8, 7, 6) Final array: 2, 3, 5, 8, 7, 6 YourTask: The task is to complete the function transformArray(), which should transform the array as required. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 <= T <= 200 1 <= N <= 100","solution":"def transformArray(array, N): Transforms the array based on the given rules. Parameters: array (list): The input list containing distinct integers. N (int): The size of the input list. Returns: list: The transformed list. # Step 1: Sorting the array to find the median sorted_array = sorted(array) # Step 2: Finding the median median_index = (N - 1) // 2 median = sorted_array[median_index] # Step 3: Creating two arrays based on the median less_than_median = [x for x in array if x < median] greater_than_median = [x for x in array if x > median] # Sorting less_than_median in ascending order less_than_median_sorted = sorted(less_than_median) # Sorting greater_than_median in descending order greater_than_median_sorted = sorted(greater_than_median, reverse=True) # Step 4: Combining the results result = less_than_median_sorted + [median] + greater_than_median_sorted return result"},{"question":"Given a string Str which may contain numbers (0-9) and lowercase and uppercase characters. The task is to find the sum of all numeric digits that appear in the string. Ignore all other characters. Example 1: Input: Str = \\"ab1231da\\" Output: 7 Explanation: The digits in the given string are 1, 2, 3, and 1. Their sum is 1 + 2 + 3 + 1 = 7. Example 2: Input: Str = \\"1abc23\\" Output: 6 Explanation: The digits in the given string are 1, 2, and 3. Their sum is 1 + 2 + 3 = 6. Your Task: Complete the function sumOfDigits() which takes a string str as input parameter and returns an integer denoting the sum of all numeric digits in the given string. You don\'t need to print the answer or take inputs. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5} String contains numbers (0-9), lowercase and uppercase english letters, and other characters.","solution":"def sumOfDigits(Str): Returns the sum of all numeric digits in the given string Str. return sum(int(char) for char in Str if char.isdigit())"},{"question":"You are given an integer array `nums` of length `n`. Your task is to find the maximum length of a subarray where the absolute difference between any two elements in this subarray is less than or equal to `d`. Input - The first line of the input contains two integers `n` and `d` (1 ≤ n ≤ 10000, 0 ≤ d ≤ 1000). - The second line contains n integers representing the array `nums` where each element of the array is between -1000 and 1000 (inclusive). Output - Print the maximum length of a subarray where the absolute difference between any two elements is less than or equal to `d`. Examples Input 6 3 1 3 6 4 1 2 Output 3 Input 5 0 3 3 3 3 3 Output 5 Input 4 2 1 5 9 13 Output 1 Note In the first example, you could consider the subarray [1, 3, 1], which meets the condition as the absolute differences between any two elements are within the value of `d` = 3. The length of this subarray is 3. In the second example, since `d` is 0, we are looking for subarrays where all elements are the same. The entire array [3, 3, 3, 3, 3] fits this condition, so the output is 5. In the third example, there are no pairs of elements such that their absolute difference is less than or equal to `d`, so we can only take each element as a subarray itself and the output will be 1.","solution":"def max_length_subarray(nums, d): Finds the maximum length of a subarray where the absolute difference between any two elements in this subarray is less than or equal to d. n = len(nums) max_length = 1 start = 0 for end in range(1, n): while start < end and max(nums[start:end+1]) - min(nums[start:end+1]) > d: start += 1 max_length = max(max_length, end - start + 1) return max_length # Input processing functions def process_input_lines(first_line, nums_line): n, d = map(int, first_line.split()) nums = list(map(int, nums_line.split())) return n, d, nums"},{"question":"You are given a string `s` of length `n` consisting of lowercase English letters. Your goal is to find the maximum length of a substring that contains no more than `k` distinct characters. Function Signature: ```python def max_len_substring(s: str, k: int) -> int: pass ``` # Input - A string `s` of length `n` (1 ≤ n ≤ 10^5) consisting of lowercase English letters. - An integer `k` (1 ≤ k ≤ 26). # Output - Return an integer representing the maximum length of a substring of `s` containing no more than `k` distinct characters. # Example ```python assert max_len_substring(\\"eceba\\", 2) == 3 assert max_len_substring(\\"aa\\", 1) == 2 assert max_len_substring(\\"aabcbcdbca\\", 2) == 4 ``` # Note In the first example, the longest substring of `s` containing 2 distinct characters or less is `\\"ece\\"`, with a length of 3. In the second example, since `k=1`, the longest substring of `s` that contains no more than 1 distinct character is `\\"aa\\"`, with a length of 2. In the third example, the longest substring of `s` containing 2 distinct characters or less is `\\"bcbc\\"`, with a length of 4. # Constraints: - The function should be optimized to run in O(n) time complexity. - You may assume the input string contains only lowercase English letters.","solution":"def max_len_substring(s: str, k: int) -> int: from collections import defaultdict n = len(s) if k == 0 or n == 0: return 0 char_count = defaultdict(int) left = 0 max_length = 0 for right in range(n): char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a string S consisting of lowercase Latin letters. The task is to remove all duplicate characters from the string and return the result. The order of characters in the output should be the same as the first occurrence in the input string. Example 1: Input: S = \\"geeksforgeeks\\" Output: \\"geksfor\\" Example 2: Input: S = \\"characters\\" Output: \\"chartes\\" Your Task: The task is to complete the function removeDuplicates() which returns the string after removing duplicate characters. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^6","solution":"def removeDuplicates(S): Removes duplicate characters from the string while preserving the order of the first occurrence. :param S: Input string from which duplicate characters need to be removed. :return: A string without duplicate characters. seen = set() result = [] for char in S: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"A popular video platform provides a statistics dashboard that allows users to monitor the performance of their videos. One of the key metrics tracked is the \\"watch time,\\" which refers to the total time that viewers have spent watching a specific video. Watch time is measured in seconds. As a software engineer, your task is to help enhance this statistics dashboard by writing a function that calculates the average watch time of a list of videos. The company uses a threshold to determine whether to include a video in the average calculation. Specifically, they want to exclude videos with a watch time less than a given threshold value. If no videos meet the threshold, return 0. # Input Your function should take two arguments: 1. A list of non-negative integers representing the watch times of different videos. 2. A non-negative integer threshold value. # Output Your function should return a floating-point number representing the average watch time of the videos that meet or exceed the threshold. Use standard arithmetic rounding for the result. # Example Input 1: ```python watch_times = [300, 1500, 2400, 800, 4000] threshold = 1000 ``` Output 1: ```python 2933.33 ``` Explanation 1: - Videos with watch times 1500, 2400, and 4000 meet the threshold of 1000. - The average of these watch times is (1500 + 2400 + 4000) / 3 = 2933.33. Input 2: ```python watch_times = [100, 200, 300, 400, 500] threshold = 600 ``` Output 2: ```python 0.0 ``` Explanation 2: - No videos meet the threshold of 600. - Thus, the output is 0. # Constraints - The list of watch times contains between 1 and 10^5 elements. - Each watch time is a non-negative integer not exceeding 10^6. - The threshold is a non-negative integer not exceeding 10^6. Design your solution to handle large inputs efficiently.","solution":"def calculate_average_watch_time(watch_times, threshold): Calculates the average watch time of videos that meet or exceed the threshold. Parameters: - watch_times: A list of non-negative integers representing watch times of videos. - threshold: A non-negative integer representing the threshold value. Returns: - A floating-point number representing the average watch time of videos that meet or exceed the threshold. valid_watch_times = [wt for wt in watch_times if wt >= threshold] if not valid_watch_times: return 0.0 return round(sum(valid_watch_times) / len(valid_watch_times), 2)"},{"question":"You are given a grid with N rows and M columns, initially filled with zeros. You need to perform several update operations. Each operation increments the value of every cell in a specified sub-grid by 1. The sub-grid is defined by its top-left (r1, c1) and bottom-right (r2, c2) coordinates. After all updates are performed, calculate the sum of all values in the grid. # Input - The first line contains two integers N and M (1 leq N, M leq 500) — the number of rows and columns in the grid. - The second line contains an integer Q (1 leq Q leq 10000) — the number of update operations. - The following Q lines each contain four integers r1, c1, r2, c2 (1 leq r1 leq r2 leq N, 1 leq c1 leq c2 leq M) — the coordinates of the top-left and bottom-right corners of the sub-grid to be incremented. # Output - Output the sum of all values in the grid after performing all the update operations. # Example Input ``` 3 3 2 1 1 2 2 2 2 3 3 ``` Output ``` 8 ``` # Explanation - After the first operation, the grid becomes: ``` 1 1 0 1 1 0 0 0 0 ``` - After the second operation, the grid becomes: ``` 1 1 0 1 2 1 0 1 1 ``` - The sum of all values in the grid is 1 + 1 + 0 + 1 + 2 + 1 + 0 + 1 + 1 = 8.","solution":"def perform_operations(N, M, Q, operations): # Initialize a grid N x M filled with zeros grid = [[0 for _ in range(M)] for _ in range(N)] for op in operations: r1, c1, r2, c2 = op for i in range(r1-1, r2): for j in range(c1-1, c2): grid[i][j] += 1 # Calculate the total sum of the grid total_sum = sum(sum(row) for row in grid) return total_sum"},{"question":"An encyclopedia company is looking to select a special word sequence from a list of words. The sequence should follow a specific rule: The length of the sequence is maximized, and each subsequent word must start with the last letter of the previous word. Given a list of words, find the length of the longest sequence that satisfies this condition. For example, given the words [\\"apple\\", \\"elephant\\", \\"tiger\\", \\"ram\\", \\"monkey\\", \\"yak\\"], one possible sequence is [\\"apple\\", \\"elephant\\", \\"tiger\\", \\"ram\\", \\"monkey\\", \\"yak\\"], resulting in a sequence length of 6, which is the maximum possible. # Input - The first line contains integer n (1 ≤ n ≤ 2000), the number of words in the list. - Each of the next n lines contains a single word. Words consist of lowercase English letters only and have length from 1 to 50. # Output - Print a single integer, the length of the longest sequence that can be formed following the specified rule. # Examples Input 6 apple elephant tiger ram monkey yak Output 6 Input 4 cat dog giraffe elephant Output 3 # Note In the first example, one of the sequences is [\\"apple\\", \\"elephant\\", \\"tiger\\", \\"ram\\", \\"monkey\\", \\"yak\\"]. The length of this sequence is 6, which is the maximum possible length. In the second example, one possible sequence is [\\"dog\\", \\"giraffe\\", \\"elephant\\"], giving a sequence length of 3.","solution":"def find_longest_sequence(words): from collections import defaultdict, deque def build_graph(words): graph = defaultdict(list) for word in words: graph[word[0]].append(word) return graph def bfs(start_word, graph): queue = deque([(start_word, 1)]) max_length = 1 visited = set() while queue: current_word, length = queue.popleft() visited.add(current_word) last_char = current_word[-1] for next_word in graph[last_char]: if next_word not in visited: queue.append((next_word, length + 1)) max_length = max(max_length, length + 1) return max_length graph = build_graph(words) max_sequence_length = 1 for word in words: max_sequence_length = max(max_sequence_length, bfs(word, graph)) return max_sequence_length"},{"question":"A data analytics company has a quiz program to assess the coding skills of job applicants. The company uses a scoring system where each question has a base score, but depending on the time taken to answer and the accuracy of the answer, the score for each question can vary. Here’s how the scoring system works: 1. Each question has a base score `b`. 2. If a participant answers a question correctly, they receive the full base score. 3. For each second taken to answer the question, a penalty of `p` points is deducted from the base score. 4. If the participant’s total score for a question becomes negative due to the penalties, their score for that question will be zero. Given the base score `b` for a question, the penalty per second `p`, and the time `t` (in seconds) taken by the participant to answer the question correctly, calculate the participant\'s final score for that question. Write a function that takes in three integers `b`, `p`, and `t` and returns the final score of the participant for that question. ----- Input ----- The input consists of three integers `b`, `p`, and `t`: - b (1 ≤ b ≤ 1000): The base score for the question. - p (1 ≤ p ≤ 100): The penalty points per second. - t (0 ≤ t ≤ 10000): The time in seconds taken to answer the question correctly. ----- Output ----- Output a single integer representing the final score for the question. ----- Examples ----- Example 1: Input: 50 1 45 Output: 5 Example 2: Input: 80 2 50 Output: 0 ----- Note ----- In the first example: The base score is 50, the penalty per second is 1, and the time taken is 45 seconds. The final score is calculated as `50 - (1 * 45) = 5`. In the second example: The base score is 80, the penalty per second is 2, and the time taken is 50 seconds. The final score is calculated as `80 - (2 * 50) = -20`, but since the score cannot be negative, the output is 0.","solution":"def calculate_final_score(b, p, t): Calculate the final score for a question based on base score, penalty per second, and time taken to answer. Args: b (int): Base score of the question. p (int): Penalty per second. t (int): Time taken to answer in seconds. Returns: int: Final score after deducting penalties. final_score = b - (p * t) return max(final_score, 0)"},{"question":"Olivia and Ethan are participating in a coding challenge. The challenge has increasingly difficult tasks and the participants are awarded points based on the difficulty level of each task they solve correctly. Additionally, they lose some points for each incorrect attempt. In each round, Olivia and Ethan score a certain number of points, and the winner is the one with the highest total points after a certain number of rounds. The rules for scoring are as follows: - For any correct solution, the participant gains the full points for the difficulty level of the task. - For each incorrect attempt, they lose 5 points. - The participant with the highest total points after all the rounds wins. In case both participants get the same number of points, it is declared a draw. ------ Input Format ------ - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each test case begins with a single integer N, the number of rounds. - The next N lines each contain four space-separated integers: Di, Pi, Dj, Pj denoting the difficulty level of the task and the number of incorrect attempts for Olivia and Ethan respectively for that round. ------ Output Format ------ For each test case, output a single line containing one string — the name of the winner (\\"Olivia\\" or \\"Ethan\\"), or \\"Draw\\" if the match was a draw. Print each string without the quotes. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 50 1 ≤ Di, Dj ≤ 1000 0 ≤ Pi, Pj ≤ 100 ------ Sample Input 1 ------ 2 3 100 1 90 2 200 3 150 1 300 0 300 1 2 50 0 50 0 100 2 90 0 ------ Sample Output 1 ------ Olivia Ethan ------ Explanation 1 ------ Test Case 1: - Round 1: Olivia gains 100 - 1 cdot 5 = 95 points, Ethan gains 90 - 2 cdot 5 = 80 points. - Round 2: Olivia gains 200 - 3 cdot 5 = 185 points, Ethan gains 150 - 1 cdot 5 = 145 points. - Round 3: Olivia gains 300 - 0 cdot 5 = 300 points, Ethan gains 300 - 1 cdot 5 = 295 points. - Overall, Olivia has 95 + 185 + 300 = 580 points, while Ethan has 80 + 145 + 295 = 520 points. Olivia wins this test case. Test Case 2: - Round 1: Both Olivia and Ethan gain 50 - 0 cdot 5 = 50 points. - Round 2: Olivia gains 100 - 2 cdot 5 = 90 points, Ethan gains 90 - 0 cdot 5 = 90 points. - Overall, Olivia has 50 + 90 = 140 points, and Ethan also has 50 + 90 = 140 points. The result is a draw.","solution":"def determine_winner(test_cases): results = [] for case in test_cases: N, rounds = case olivia_score = 0 ethan_score = 0 for round_info in rounds: Di, Pi, Dj, Pj = round_info olivia_score += Di - 5 * Pi ethan_score += Dj - 5 * Pj if olivia_score > ethan_score: results.append(\\"Olivia\\") elif ethan_score > olivia_score: results.append(\\"Ethan\\") else: results.append(\\"Draw\\") return results"},{"question":"Given a string S consisting of lowercase letters, find out whether you can swap two letters in the string (the two letters must be at different positions) such that the resulting string is a palindrome. Example 1: Input: S = \\"abca\\" Output: Yes Explanation: Swapping the characters \'b\' and \'c\' results in the string \\"acba\\", which is a palindrome. Example 2: Input: S = \\"abcd\\" Output: No Explanation: There is no way to swap two characters to make the string \\"abcd\\" a palindrome. Example 3: Input: S = \\"aa\\" Output: Yes Explanation: The string \\"aa\\" is already a palindrome or swapping any two same characters will still result in a palindrome. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canFormPalindromeBySwapping() which takes a string S as input and returns \\"Yes\\" or \\"No\\" accordingly. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= len(S) <= 10^{5}","solution":"def canFormPalindromeBySwapping(S): Checks if we can swap two letters in the string to form a palindrome. :param S: Input string consisting of lowercase letters :return: \\"Yes\\" if a swap can make the string a palindrome, \\"No\\" otherwise from collections import Counter # Count the frequency of each character count = Counter(S) # Count how many characters have odd frequencies odd_count = sum(1 for v in count.values() if v % 2 != 0) # For a string to be rearranged into a palindrome: # - At most one character can have an odd count (for odd-length strings) # - All characters must have even counts or only one character has an odd count (for even-length strings) # Thus, if the odd_count is more than 2, there\'s no need of checking for swaps as it will definitely not form a palindrome. if odd_count > 2: return \\"No\\" # If the string is already a palindrome or has the possibility to be rearranged to form a palindrome with one swap return \\"Yes\\" # Example cases: print(canFormPalindromeBySwapping(\\"abca\\")) # Expected output: \\"Yes\\" print(canFormPalindromeBySwapping(\\"abcd\\")) # Expected output: \\"No\\" print(canFormPalindromeBySwapping(\\"aa\\")) # Expected output: \\"Yes\\""},{"question":"In a village, people have a unique tradition of storytelling. Every story they tell follows a specific sequence of events. Every story\'s sequence starts with 2 characters, A and B, who belong to different clans. The story then unfolds as follows: 1. In the first event, both characters meet and talk with each other. 2. In the second event, A retells their first conversation to a villager. 3. In the third event, B retells their first conversation to a different villager. 4. In the subsequent events, A and B take turns to retell the most recent event that occurred involving the other character but with a twist; each retell happens in a different unique manner. Given a number \'n\', your task is to determine what happens in the `nth` event of the story sequence (just the action description, not specifics of the retelling). **Input:** 7 NOTE: You do not need to create a program for this problem, but provide the results based on the pattern. SAMPLE INPUT 4 SAMPLE OUTPUT B retells the recent event involving A in a unique manner.","solution":"def storyteller_event(n): Returns the description of nth event in the storytelling sequence. if n == 1: return \\"A and B meet and talk with each other.\\" elif n == 2: return \\"A retells their first conversation to a villager.\\" elif n == 3: return \\"B retells their first conversation to a different villager.\\" elif n % 2 == 0: return \\"A retells the recent event involving B in a unique manner.\\" else: return \\"B retells the recent event involving A in a unique manner.\\""},{"question":"Write a function `min_distance_point` that takes two arrays, `points1` and `points2`, each containing a list of integers which represent points on a 2D plane. The function should return the minimum Euclidean distance between any two points, one from `points1` and one from `points2`. Constraints * Each point is represented as a list of two integers [x, y], where 0 ≤ x, y ≤ 10000. * The lengths of `points1` and `points2` are between 1 and 1000 inclusive. * All points within each array are distinct. Input The function will take the following arguments. - `points1`: A list of lists, where each sublist contains two integers representing a point on a 2D plane. - `points2`: A list of lists, where each sublist contains two integers representing a point on a 2D plane. Output The function should return a single float, which is the minimum distance between any two points, calculated to the 5th decimal place. Examples Input points1 = [[1, 2], [3, 4], [5, 6]] points2 = [[7, 8], [2, 3]] Output `1.41421` Input points1 = [[1, 3]] points2 = [[2, 5], [6, 8]] Output `2.23607` Input points1 = [[0, 0], [4, 4], [8, 8]] points2 = [[1, 1], [5, 5]] Output `1.41421`","solution":"import math def min_distance_point(points1, points2): Calculate the minimum Euclidean distance between any two points, one from points1 and one from points2. :param points1: List of points [x, y] :param points2: List of points [x, y] :return: Minimum Euclidean distance rounded to 5 decimal places min_dist = float(\'inf\') for p1 in points1: for p2 in points2: dist = math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) if dist < min_dist: min_dist = dist return round(min_dist, 5)"},{"question":"Lucy loves exploring language patterns and is particularly interested in palindromes. She came across an interesting problem: given a string, she wants to find the minimum number of character insertions required to make the string a palindrome. We define a string as a palindrome if it reads the same forward and backward. For example, \\"madam\\" and \\"racecar\\" are palindromes, whereas \\"hello\\" is not. Given a string s, you\'ll need to determine the minimum number of insertions needed to make it a palindrome. Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 1000), consisting of lowercase English letters. Output Print a single integer denoting the minimum number of insertions required to transform the string into a palindrome. Examples Input ab Output 1 Input leetcode Output 5 Input a Output 0 Note For the first example, one of the ways to transform \\"ab\\" into a palindrome is by inserting \'a\' at the beginning, making it \\"aba\\". For the second example, a possible way to transform \\"leetcode\\" into a palindrome is by inserting characters to make it \\"elttettel\\". For the third example, the string \\"a\\" is already a palindrome, so no insertions are needed.","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of insertions required to transform the string s into a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] # Build the table for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] else: dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1 return dp[0][n-1]"},{"question":"Given a list of strings, each representing a log with timestamps, you have to parse the logs and find the difference in seconds between the timestamps of the first and the last logs. Each log entry is in the format: ``` YYYY-MM-DD HH:MM:SS log_message ``` For example, given logs: ``` 2023-03-26 04:10:00 log entry 1 2023-03-26 05:15:00 log entry 2 2023-03-26 06:10:00 log entry 3 ``` The difference between the first timestamp `2023-03-26 04:10:00` and the last timestamp `2023-03-26 06:10:00` is `7200` seconds. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case will contain a single integer N, the number of logs. - The next N lines will each contain a log entry. ------ Output Format ------ For each test case, output on a new line the difference in seconds between the timestamps of the first and last logs. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 The logs are given in chronological order. ------ Sample Input 1 ------ 2 3 2023-03-26 04:10:00 log entry 1 2023-03-26 05:15:00 log entry 2 2023-03-26 06:10:00 log entry 3 4 2023-03-25 13:45:20 log entry a 2023-03-25 14:00:35 log entry b 2023-03-25 14:45:50 log entry c 2023-03-25 15:45:20 log entry d ------ Sample Output 1 ------ 7200 7200 ------ Explanation ------ In the first test case, the difference between `2023-03-26 04:10:00` and `2023-03-26 06:10:00` is 7200 seconds. In the second test case, the difference between `2023-03-25 13:45:20` and `2023-03-25 15:45:20` is 7200 seconds.","solution":"from datetime import datetime def time_difference_in_seconds(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] logs = test_cases[i][1] first_timestamp = logs[0].split(\\" \\")[0] + \\" \\" + logs[0].split(\\" \\")[1] last_timestamp = logs[-1].split(\\" \\")[0] + \\" \\" + logs[-1].split(\\" \\")[1] first_time = datetime.strptime(first_timestamp, \\"%Y-%m-%d %H:%M:%S\\") last_time = datetime.strptime(last_timestamp, \\"%Y-%m-%d %H:%M:%S\\") difference = last_time - first_time difference_seconds = difference.total_seconds() results.append(int(difference_seconds)) return results"},{"question":"A string S is said to be a balanced string if it contains an equal number of characters \'L\' and \'R\'. For example, \\"LRLR\\" and \\"LRRLLR\\" are balanced strings, while \\"LLR\\" and \\"LRLRR\\" are not. Your task is to split the given string S into the maximum number of balanced strings. Two split strings are considered different instances of balanced strings if they start or end at different positions in S. For instance, if S = \\"RLRRLLRLRL,\\" you can split S into several balanced strings: \\"RL\\", \\"RRLL\\", and \\"RLRL\\". Given a string S of length n, your task is to determine the maximum number of balanced strings into which S can be split. -----Input----- The input consists of one line containing a string S, which is at most 1000 characters long and only contains the characters \'L\' and \'R\'. -----Output----- Output a single integer, the maximum number of balanced strings you can achieve by splitting S. -----Examples----- Sample Input 1: RLRRLLRLRL Sample Output 1: 4 Sample Input 2: LRLR Sample Output 2: 2 Sample Input 3: LLLRRR Sample Output 3: 1","solution":"def max_balanced_substrings(S): Given a string S consisting of characters \'L\' and \'R\', the function returns the maximum number of balanced strings that can be obtained by splitting S. balance = 0 count = 0 for char in S: if char == \'L\': balance += 1 elif char == \'R\': balance -= 1 if balance == 0: count += 1 return count"},{"question":"You are given a string that contains a sentence. Write a function that takes this string as input and returns a new string where each word in the original sentence is reversed, but the words are in the original order. If the input string is empty, the function should return an empty string. Consider punctuation as part of the word. For example: - For the input \\"Hello world!\\", the output should be \\"olleH !dlrow\\". - For the input \\"Coding is fun\\", the output should be \\"gnidoC si nuf\\". - For the input \\"\\", the output should be \\"\\".","solution":"def reverse_words_in_sentence(sentence): Reverses each word in the sentence while maintaining the original order of the words. Args: sentence (str): The sentence to process. Returns: str: The sentence with each word reversed. return \' \'.join(word[::-1] for word in sentence.split())"},{"question":"An ice cream shop sells ice cream cones in two sizes: small and large. Each small cone requires 1 scoop of ice cream, and each large cone requires 2 scoops of ice cream. Suppose an ice cream shop has S scoops of ice cream and wants to maximize the number of cones they can serve, prioritizing large cones over small cones. How many large and small cones can they serve? ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single integer S - the number of scoops of ice cream the shop has. ------ Output Format ------ For each test case, output two integers: the number of large cones and the number of small cones that can be served. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ S ≤ 100 ----- Sample Input 1 ------ 3 1 4 7 ----- Sample Output 1 ------ 0 1 2 0 3 1 ----- Explanation 1 ------ Test case-1: With 1 scoop, only 1 small cone can be served. Test case-2: With 4 scoops, 2 large cones can be served. Test case-3: With 7 scoops, 3 large cones can be served first, leaving 1 scoop for 1 small cone.","solution":"def maximize_cones(t, scoops_list): Returns the number of large and small cones that can be served given the number of scoops of ice cream. Prioritizes serving large cones first. Parameters: t (int): The number of test cases. scoops_list (list): List of integers where each integer represents the number of scoops of ice cream for each test case. Returns: list of tuple: A list of tuples where each tuple contains two integers - number of large cones and small cones. results = [] for scoops in scoops_list: large_cones = scoops // 2 small_cones = scoops % 2 results.append((large_cones, small_cones)) return results"},{"question":"In a software development company, there are M teams working on different projects. Each team has a variable number of developers. The company decides to conduct an analysis to identify potential developers who are proficient in all technologies needed for their projects. However, due to constraints, only the top K developers in each team, based on their proficiency score, will be considered. Each team\'s proficiency scores are given in a list where each element represents a developer’s score. For the analysis, the company needs to find and output the sum of the top K developers\' scores from each team. If a team has fewer than K developers, the sum should include all the developers in that team. Write a function to perform this task. Input Format - The first line contains two integers M and K. - The next M lines each contain a list of integers, representing the proficiency scores of the developers in each team. Output Format - Output M integers, each representing the sum of the top K developers\' scores for the corresponding team. Constraints - 1 ≤ M ≤ 100 - 1 ≤ K ≤ 50 - 1 ≤ Number of developers in each team ≤ 100 - 1 ≤ Proficiency score ≤ 1000 SAMPLE INPUT 3 2 3 5 1 7 2 8 4 6 1 SAMPLE OUTPUT 12 10 10 Explanation - For the first team, the top 2 developers\' scores are 7 and 5, so the sum is 12. - For the second team, the top 2 developers\' scores are 8 and 2 (since there are only 2 developers), so the sum is 10. - For the third team, the top 2 developers\' scores are 6 and 4, so the sum is 10.","solution":"def sum_top_k_developers(M, K, teams_scores): Returns the sum of the top K developers\' scores for each team. Args: M: int: Number of teams. K: int: Number of top developers to consider. teams_scores: List[List[int]]: A list of M lists, each containing developers\' proficiency scores. Returns: List[int]: A list of sums of top K developers\' scores for each team. top_k_sums = [] for scores in teams_scores: # Sort scores in descending order sorted_scores = sorted(scores, reverse=True) # Compute the sum of the top K scores (or all scores if fewer than K) top_k_sum = sum(sorted_scores[:K]) top_k_sums.append(top_k_sum) return top_k_sums"},{"question":"You are given a string of lowercase alphabet characters and an integer k. You need to determine whether all characters of the string can be arranged in such a way that no two adjacent characters are the same. If it is possible, return 1, otherwise return 0. Example 1: Input: str = \\"aabbcc\\", k = 3 Output: 1 Explanation: One possible arrangement is \\"abcabc\\". Example 2: Input: str = \\"aaabc\\", k = 1 Output: 0 Explanation: One possible arrangement is not possible as \\"aaa\\" are consecutive. Your Task: You don\'t need to read or print anything. Your task is to complete the function canArrange(characters, k) which takes the string `characters` and the integer `k` as parameters and returns 1 if the characters can be arranged such that no two adjacent characters are the same, otherwise return 0. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= length of characters <= 10^5 1 <= k <= length of characters","solution":"from collections import Counter def canArrange(characters, k): Returns 1 if the characters can be arranged such that no two adjacent characters are the same, otherwise returns 0. n = len(characters) if k == 1: return 0 if any(freq > 1 for freq in Counter(characters).values()) else 1 frequency = Counter(characters) max_freq = max(frequency.values()) # Check whether it\'s possible to arrange such that no two adjacent characters are the same with given k if (max_freq - 1) * k + 1 <= n: return 1 else: return 0"},{"question":"Given an integer array `arr` and a number `X`, your task is to determine the minimum length of a contiguous subarray of which the sum is greater than or equal to `X`. If there isn\'t one, return `0` instead. Input: - The first line contains an integer `n`, the size of the array. - The second line contains `n` space-separated integers representing the elements of the array `arr`. - The third line contains an integer `X`. Output: - Output a single integer representing the minimum length of a subarray that has a sum ≥ `X`. If no such subarray exists, output `0`. Constraints: - ( 1 leq n leq 10^5 ) - ( 1 leq arr[i] leq 10^4 ) - ( 1 leq X leq 10^9 ) Example Input: ``` 10 1 2 3 4 5 6 7 8 9 10 15 ``` Example Output: ``` 2 ``` Explanation: The subarray `[8, 9]` has the sum `17` which is greater than or equal to `15` and has the minimum length of `2` among all subarrays with sum ≥ `15`.","solution":"def min_subarray_length(arr, X): Return the minimum length of a contiguous subarray whose sum is >= X. If there is no such subarray, return 0. n = len(arr) min_len = n + 1 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= X: min_len = min(min_len, end - start + 1) current_sum -= arr[start] start += 1 return min_len if min_len <= n else 0"},{"question":"Sarah is organizing a concert and wants to distribute the tickets evenly among her friends. Sarah has a list of friends and wants to make sure that each friend gets a different number of tickets in such a way that no one feels left out, but she also does not want to exceed the total number of tickets that she has. Help Sarah determine whether it\'s possible to distribute the tickets according to her plan. -----Input----- In the first line, there are two integers n and T (1 ≤ n ≤ 10^5, 1 ≤ T ≤ 10^9) — the number of friends and the total number of tickets available. -----Output----- Print \\"YES\\" if it\'s possible to distribute the tickets according to her plan. Print \\"NO\\" otherwise. -----Examples----- Input 3 6 Output YES Input 4 5 Output NO -----Explanation----- In the first example, Sarah can distribute the tickets such that each of the 3 friends gets 1, 2, and 3 tickets respectively. This sums up to 6 tickets, which is manageable. In the second example, it is impossible to distribute 5 tickets among 4 friends with each friend getting a different number of tickets since the minimum sum required would be 1+2+3+4=10, which exceeds the available tickets.","solution":"def can_distribute_tickets(n, T): Determines whether it\'s possible to distribute T tickets among n friends such that each friend gets a different number of tickets. # Minimum sum of the first n natural numbers min_tickets_needed = n * (n + 1) // 2 if T >= min_tickets_needed: return \\"YES\\" else: return \\"NO\\""},{"question":"An e-commerce company has a system where customers can place orders for products. Each product has a price and each order consists of buying a certain quantity of a product. From time to time, the company offers discount campaigns where customers can get cost reductions on their orders. There are three types of discounts: 1. **Percentage Discount:** A certain percentage off the total price of the order. 2. **Flat Discount:** A fixed amount deducted from the total price of the order. 3. **Buy-One-Get-One (BOGO) Discount:** For every two products bought, one of them is free. Given a list of orders and available discounts, determine the minimal cost for each order after applying the best possible discount. -----Input----- The first line contains an integer n (1 le n le 10^5), the number of orders. Each of the following n lines represents an order with two integers p_i (1 le p_i le 10^6), the price of the product in cents, and q_i (1 le q_i le 10^3), the quantity of the product ordered. The following line contains an integer d (0 le d le 3), the number of discounts available. Each of the following d lines represents a discount which can be of the form: - \\"percentage x\\" where x is an integer representing the percentage discount (1 le x le 100). - \\"flat x\\" where x is an integer representing the flat amount reduction in cents (1 le x le 10^6). - \\"bogo\\", representing the Buy-One-Get-One discount. -----Output----- Output n lines, each line containing a single integer representing the minimal cost for each order in cents after applying the best possible discount. -----Examples----- Sample Input 1: 3 1000 2 500 3 1200 1 2 percentage 10 flat 150 Sample Output 1: 1800 1350 1050 Sample Input 2: 2 1500 4 2400 2 1 bogo Sample Output 2: 3000 2400","solution":"def get_min_cost(orders, discounts): results = [] percentage_discount = 0 flat_discount = 0 bogo_discount = False for discount in discounts: if discount.startswith(\'percentage\'): percentage_discount = int(discount.split()[1]) elif discount.startswith(\'flat\'): flat_discount = int(discount.split()[1]) elif discount == \'bogo\': bogo_discount = True for price, quantity in orders: total_cost = price * quantity minimal_cost = total_cost if percentage_discount > 0: discount_amount = total_cost * percentage_discount // 100 minimal_cost = min(minimal_cost, total_cost - discount_amount) if flat_discount > 0: minimal_cost = min(minimal_cost, total_cost - flat_discount) if bogo_discount: free_items = quantity // 2 effective_quantity = quantity - free_items minimal_cost = min(minimal_cost, price * effective_quantity) results.append(minimal_cost) return results"},{"question":"You are given an integer array of size n and q queries that need to be performed on this array. Each query can be of two types: 1. Update the value at a specified index. 2. Find the maximum value in a specified subsegment of the array. Your task is to handle these operations efficiently. Input: The first line contains two integers n and q (1 ≤ n, q ≤ 2⋅10^5) — the size of the array and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the initial values of the array. Each of the next q lines contains one of the following queries: - \\"1 x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9) — update the value at index x to y. - \\"2 l r\\" (1 ≤ l ≤ r ≤ n) — find the maximum value in the subsegment from index l to index r (both inclusive). Output: For each query of the second type, print the maximum value in the specified subsegment. Examples: Input 5 5 1 2 3 4 5 2 1 5 1 3 10 2 1 5 1 4 7 2 3 5 Output 5 10 10 Explanation: - The array starts as [1, 2, 3, 4, 5]. - The first query asks for the maximum value in the entire array, which is 5. - The second query updates the value at index 3 to 10, making the array [1, 2, 10, 4, 5]. - The third query asks for the maximum value in the entire array again, which is now 10. - The fourth query updates the value at index 4 to 7, making the array [1, 2, 10, 7, 5]. - The fifth query asks for the maximum value in the subsegment [3, 5], which is 10.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Insert leaf nodes in tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i << 1], self.tree[i << 1 | 1]) def update(self, index, value): # Set value at position p index += self.n self.tree[index] = value while index > 1: index >>= 1 self.tree[index] = max(self.tree[index << 1], self.tree[index << 1 | 1]) def query(self, left, right): result = 0 left += self.n right += self.n while left < right: if left & 1: result = max(result, self.tree[left]) left += 1 if right & 1: right -= 1 result = max(result, self.tree[right]) left >>= 1 right >>= 1 return result def process_queries(n, q, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: qtype, x, y = query if qtype == 1: seg_tree.update(x - 1, y) elif qtype == 2: results.append(seg_tree.query(x - 1, y)) return results"},{"question":"A mysterious ancient text has been discovered, and it is made up of several encrypted messages. Each message is a sequence of integers. Archaeologists have learned that these integers can be decoded into words by following these steps: 1. Each integer corresponds to a position in the English alphabet (1 = \'a\', 2 = \'b\', ..., 26 = \'z\'). 2. Integers may form a pair to represent a two-digit number, which also corresponds to a letter (e.g., 10 = \'j\', 11 = \'k\', ..., 26 = \'z\'). 3. No integer pairs can overlap, meaning each integer or valid pair must be considered one at a time from left to right. The task is to determine how many different ways a given sequence of integers can be decoded into valid words using the steps specified. Input The input is given in the following format: N message1 message2 :: messageN The number of messages N (1 ≤ N ≤ 1000) is given on the first line. The messagei is given on the following N lines. Each message consists of a string of digits with a length of 1 or more and 100 or less. Output For each message, output the number of ways it can be decoded on one line. Example Input 3 123 226 06 Output 3 3 0","solution":"def num_decodings(s: str) -> int: Returns the number of ways to decode a given string of digits. if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0], dp[1] = 1, 1 # An empty string has one way to decode, base case for i in range(2, n + 1): one_digit = int(s[i - 1:i]) two_digits = int(s[i - 2:i]) if 1 <= one_digit <= 9: dp[i] += dp[i - 1] if 10 <= two_digits <= 26: dp[i] += dp[i - 2] return dp[n] def decode_messages(messages: list) -> list: Decodes multiple messages and returns the results as a list of integers. result = [] for message in messages: result.append(num_decodings(message)) return result"},{"question":"You are given an array of integers and a target integer K. Your task is to find out if there exist two distinct indices i and j such that the sum of the elements at these indices equals K. Example 1- Input: arr = [1, 4, 5, 6, 8], K = 10 Output: Yes Example 2- Input: arr = [1, 2, 3, 9], K = 8 Output: No Your Task: Complete the function hasPairWithSum() that receives an array of integers `arr` and an integer `K`, and returns true if there exist two elements in the array whose sum equals `K`, otherwise returns false. The driver code itself prints \\"Yes\\" if the returned value is true and \\"No\\" if the returned value is false. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1<= |arr| <= 10^4 -10^4 <= arr[i] <= 10^4","solution":"def hasPairWithSum(arr, K): Returns True if there exist two distinct indices i and j such that the sum of the elements at these indices equals K, else returns False. seen = set() for num in arr: if K - num in seen: return True seen.add(num) return False"},{"question":"You are given a list of integers. Your task is to determine if the list is in strictly increasing order. If it is, print \\"INCREASING\\" (without quotes). If it is strictly decreasing, print \\"DECREASING\\" (without quotes). Otherwise, print \\"NEITHER\\" (without quotes). Input Format The first line of input contains an integer N, the size of the list. The second line contains N space-separated integers. Output Format Print the required answer on a single line. Constraints 1 ≤ N ≤ 100 -10^9 ≤ Element of the list ≤ 10^9 Note The list is considered strictly increasing if each element is greater than the previous one, and strictly decreasing if each element is less than the previous one. SAMPLE INPUT 5 1 2 3 4 5 SAMPLE OUTPUT INCREASING","solution":"def find_order(arr): Determines if the list is in strictly increasing or decreasing order. Parameters: arr (list): List of integers. Returns: str: \\"INCREASING\\" if the list is strictly increasing, \\"DECREASING\\" if strictly decreasing, else \\"NEITHER\\". if all(arr[i] < arr[i+1] for i in range(len(arr)-1)): return \\"INCREASING\\" elif all(arr[i] > arr[i+1] for i in range(len(arr)-1)): return \\"DECREASING\\" else: return \\"NEITHER\\""},{"question":"In a game, a player can advance to the next level if their current score is greater than or equal to the required score for that level. Given the current score of the player and the required score for the next level, determine whether the player can advance to the next level. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line containing two integers, C (the current score of the player) and R (the required score for the next level). ------ Output Format ------ For each test case, print \\"Advance\\" if the player\'s current score is greater than or equal to the required score. Otherwise, print \\"Try Again\\". You may print each character of \\"Advance\\" and \\"Try Again\\" in uppercase or lowercase (for example, \\"ADVANCE\\", \\"advance\\", \\"AdVaNcE\\" will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ C, R ≤ 10000 ------ Sample Input 1 ------ 3 100 50 30 40 75 75 ------ Sample Output 1 ------ Advance Try Again Advance ------ Explanation 1 ------ Test Case 1: The current score is 100, and the required score is 50. Since 100 ≥ 50, the player can advance to the next level. Test Case 2: The current score is 30, and the required score is 40. Since 30 < 40, the player cannot advance and must try again. Test Case 3: The current score is 75, and the required score is 75. Since 75 = 75, the player can advance to the next level.","solution":"def can_advance(test_cases): Determines if a player can advance to the next level based on their score and the required score. Parameters: test_cases (list of tuples): List of test cases, each containing two integers (C, R). Returns: list of str: List of results for each test case, \\"Advance\\" if the player can advance, otherwise \\"Try Again\\". results = [] for C, R in test_cases: if C >= R: results.append(\\"Advance\\") else: results.append(\\"Try Again\\") return results"},{"question":"Emily receives a list of tasks she needs to complete, each with a specific deadline and the amount of time it takes to complete the task. Emily can only work on one task at a time and aims to complete as many tasks as possible before their respective deadlines. Write a function that determines the maximum number of tasks Emily can complete before their deadlines. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N — the number of tasks. - Each of the next N lines contains two integers D and T — the deadline and the time it takes to complete the task respectively. ------ Output Format ------ For each test case, output the maximum number of tasks Emily can complete. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ D, T ≤ 1000 ------ Sample Input 1 ------ 2 3 3 2 1 2 2 1 4 4 2 2 2 3 1 1 1 ------ Sample Output 1 ------ 2 3 ------ Explanation 1 ------ Test Case 1: Emily can complete the tasks with deadlines 2 and 3. Test Case 2: Emily can complete the tasks with deadlines 1, 3, and 4.","solution":"def max_tasks(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] tasks = test_cases[i][1] # Sort tasks primarily by deadline, secondarily by task duration tasks.sort(key=lambda x: (x[0], x[1])) time_elapsed = 0 tasks_completed = 0 for deadline, duration in tasks: if time_elapsed + duration <= deadline: time_elapsed += duration tasks_completed += 1 results.append(tasks_completed) return results"},{"question":"Arkady is building a garden in his backyard and plans to plant flowers in a row. He wants to know if he can arrange them such that no two adjacent flowers are of the same type. He has n slots in a row to plant flowers, and m different types of flowers. Each flower type can be identified by a number from 1 to m. Arkady can use any number of each type of flower. Help Arkady determine if it\'s possible to plant the flowers in the row such that no two adjacent slots contain flowers of the same type. -----Input----- The first line contains two space-separated integers n and m (1 leq n leq 1000, 1 leq m leq 1000) — the number of slots and the number of different types of flowers. -----Output----- Output \\"YES\\" if it\'s possible to plant the flowers such that no two adjacent slots have the same type. Otherwise, print \\"NO\\". You can print each letter in any case (upper or lower). -----Examples----- Input 5 3 Output YES Input 10 2 Output NO -----Note----- In the first example, you can plant the flowers in the sequence 1, 2, 3, 1, 2. In the second example, it\'s impossible to plant the flowers without having two adjacent slots with the same type because there are only 2 types of flowers and 10 slots.","solution":"def can_plant_flowers(n, m): Determines if it\'s possible to plant flowers such that no two adjacent slots contain flowers of the same type. Args: n (int): The number of slots. m (int): The number of different types of flowers. Returns: str: \\"YES\\" if possible, \\"NO\\" otherwise. if m >= n: return \\"YES\\" if m == 1 and n > 1: return \\"NO\\" if n <= (m * 2 - 1): return \\"YES\\" return \\"NO\\""},{"question":"A company wants to create a system for managing and planning its event schedules. The system should be able to handle events that have certain start and end times and ensure that no two events overlap. Given a set of potential events, you need to determine the maximum number of events that can be scheduled without any overlap. Each event will be represented as a tuple of two integers, the start time and end time. An event with a start time of `s` and an end time of `e` is denoted as `(s, e)`, where `s < e`. You need to write a program that finds the maximum number of non-overlapping events that can be scheduled from the given list of events. -----Input----- - An integer `n` (1 leq n leq 10^5), representing the number of potential events. - `n` lines, each containing two integers `s` and `e` (0 leq s < e leq 10^9), representing the start and end times of an event. -----Output----- - A single integer, representing the maximum number of non-overlapping events that can be scheduled. -----Examples----- Sample Input: 5 1 5 2 6 1 3 3 4 5 7 Sample Output: 3 Sample Input: 4 1 2 2 3 3 4 4 5 Sample Output: 4","solution":"def max_non_overlapping_events(events): Given a list of events represented as (start_time, end_time), returns the maximum number of non-overlapping events that can be scheduled. # Sort events by their end times events.sort(key=lambda x: x[1]) max_events = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: max_events += 1 last_end_time = end return max_events"},{"question":"Write a program that simulates a basic inventory management system for a small retail store. The system should support the following commands: - `ADD ITEM_NAME QUANTITY PRICE`: Adds a new item to the inventory with the given name, quantity, and price per unit. If an item with the same name already exists, update its quantity and price. - `REMOVE ITEM_NAME QUANTITY`: Removes the specified quantity of the item from the inventory. If the quantity to remove is greater than the available quantity, or if the item does not exist, return an error message \\"ERROR: Insufficient quantity\\" or \\"ERROR: Item does not exist\\", respectively. - `GET ITEM_NAME`: Retrieves the current quantity of the specified item from the inventory. If the item does not exist, return an error message \\"ERROR: Item does not exist\\". - `LIST`: Lists all items in the inventory in alphabetical order along with their quantities and prices. Each command is input as a single line. The program should read commands from standard input until EOF and produce the appropriate output for each command. # Input Format - Each line contains one command. - ITEM_NAME is a string containing only uppercase letters and without spaces. - QUANTITY is a non-negative integer. - PRICE is a positive floating-point number. # Output Format For each command that requires an output (i.e., `REMOVE`, `GET`, and `LIST`), output the appropriate response. Ensure error messages match exactly as specified. # Example **Input:** ``` ADD APPLE 10 1.5 ADD ORANGE 20 2.0 GET APPLE REMOVE APPLE 5 LIST REMOVE APPLE 10 REMOVE BANANA 1 ADD BANANA 15 0.5 LIST GET BANANA ``` **Output:** ``` 10 APPLE: 5 PRICE: 1.50 BANANA: 15 PRICE: 0.50 ORANGE: 20 PRICE: 2.00 ERROR: Insufficient quantity ERROR: Item does not exist APPLE: 5 PRICE: 1.50 BANANA: 15 PRICE: 0.50 ORANGE: 20 PRICE: 2.00 15 ```","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, name, quantity, price): if name in self.items: self.items[name][\'quantity\'] += quantity else: self.items[name] = {\'quantity\': quantity, \'price\': price} def remove_item(self, name, quantity): if name not in self.items: return \\"ERROR: Item does not exist\\" if self.items[name][\'quantity\'] < quantity: return \\"ERROR: Insufficient quantity\\" self.items[name][\'quantity\'] -= quantity if self.items[name][\'quantity\'] == 0: del self.items[name] def get_item(self, name): if name not in self.items: return \\"ERROR: Item does not exist\\" return self.items[name][\'quantity\'] def list_items(self): result = [] for name in sorted(self.items): item = self.items[name] result.append(f\\"{name}: {item[\'quantity\']} PRICE: {item[\'price\']:.2f}\\") return \\"n\\".join(result) def process_commands(commands): inventory = Inventory() output = [] for command in commands: parts = command.split() if parts[0] == \\"ADD\\": item_name = parts[1] quantity = int(parts[2]) price = float(parts[3]) inventory.add_item(item_name, quantity, price) elif parts[0] == \\"REMOVE\\": item_name = parts[1] quantity = int(parts[2]) result = inventory.remove_item(item_name, quantity) if result: output.append(result) elif parts[0] == \\"GET\\": item_name = parts[1] result = inventory.get_item(item_name) if isinstance(result, int): output.append(str(result)) else: output.append(result) elif parts[0] == \\"LIST\\": output.append(inventory.list_items()) return output"},{"question":"Jim loves arranging his books in order of their ISBN numbers. However, he found that some books have ISBN numbers with repeating digits, and he doesn\'t like that. He wants to keep only those books which have ISBN numbers with all unique digits. Given a list of ISBN numbers, write a function to help Jim filter out the ISBN numbers with repeating digits. -----Input----- - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of ISBN numbers. - The next n lines each contain one ISBN number as a string of digits. Each ISBN number can be up to 10 digits long. -----Output----- Output all the ISBN numbers from the input list that have all unique digits, one per line. If no such ISBN numbers exist, output \\"No unique ISBN numbers found\\". -----Examples----- Input 5 1234567890 1122334455 9457216803 1023456789 1111111111 Output 1234567890 9457216803 1023456789","solution":"def filter_unique_isbn(isbn_list): Filters ISBN numbers that have all unique digits. Args: isbn_list (list): List of ISBN numbers as strings. Returns: list: List of ISBN numbers with all unique digits. def has_unique_digits(isbn): return len(set(isbn)) == len(isbn) unique_isbn_list = [isbn for isbn in isbn_list if has_unique_digits(isbn)] return unique_isbn_list if unique_isbn_list else [\\"No unique ISBN numbers found\\"]"},{"question":"You are given a directed graph with `n` vertices and an integer `k`. Your task is to find the number of unique paths from vertex `1` (source) to vertex `n` (destination) such that the path contains exactly `k` edges. A path in this context is a sequence of vertices where there is a directed edge from each vertex to the next in the sequence. Input: - The first line contains two integers `n` (2 ≤ n ≤ 100) and `k` (1 ≤ k ≤ 100). - The second line contains an integer `m` (1 ≤ m ≤ 10000) — the number of directed edges in the graph. - Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) describing a directed edge from vertex `u` to vertex `v`. Output: - Print a single integer — the number of unique paths from vertex `1` to vertex `n` that contain exactly `k` edges. If there are no such paths, print `0`. Examples: Input: ``` 4 2 5 1 2 2 3 3 4 1 3 2 4 ``` Output: ``` 2 ``` Input: ``` 3 3 3 1 2 2 1 2 3 ``` Output: ``` 0 ``` Input: ``` 5 3 7 1 2 2 3 3 4 4 5 1 3 3 5 2 5 ``` Output: ``` 2 ``` Explanation of the examples: 1. For the first example, the unique paths with exactly 2 edges from vertex 1 to vertex 4 are: 1 → 2 → 4 and 1 → 3 → 4. 2. For the second example, there is no path from vertex 1 to vertex 3 that contains exactly 3 edges. 3. For the third example, the unique paths with exactly 3 edges from vertex 1 to vertex 5 are: 1 → 2 → 3 → 5 and 1 → 3 → 4 → 5.","solution":"def count_paths(n, k, edges): Counts the number of unique paths from vertex 1 to vertex n that contain exactly k edges. Parameters: n (int): The number of vertices. k (int): The number of edges in the path. edges (list of tuples): List of directed edges (u, v) where there\'s a directed edge from u to v. Returns: int: The number of unique paths from vertex 1 to vertex n with exactly k edges. from collections import defaultdict # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) # DP array to store the number of ways to reach each vertex using exact number of edges dp = [[0] * (k + 1) for _ in range(n + 1)] # Base case: There\'s one way to be at vertex 1 with 0 edges dp[1][0] = 1 # Fill DP table for edges_count in range(1, k + 1): for u in range(1, n + 1): for v in adj_list[u]: dp[v][edges_count] += dp[u][edges_count - 1] # The result is the number of ways to reach vertex n using exactly k edges return dp[n][k]"},{"question":"Given a sequence of positive integers, a \\"run\\" is defined as a consecutive subsequence where all elements are equal. Write a function that, given a sequence, identifies the start and end indices of the longest run. If there are multiple runs of the same length, return the start and end indices of the first one. Input The input consists of: - A single integer n (1 ≤ n ≤ 105), the number of elements in the sequence. - A sequence of n integers where each integer falls within the range [1, 1000]. Output Output two integers, the start and end indices (1-based) of the longest run. If multiple runs of the same length exist, output the indices of the first longest run. Examples Input 10 1 2 2 2 3 3 1 1 1 1 2 Output 7 10 Input 5 5 5 5 5 5 Output 1 5 Input 6 1 2 2 3 3 3 Output 4 6","solution":"def longest_run(n, sequence): Identify the start and end indices of the longest consecutive subsequence where all elements are equal. max_len = 0 current_len = 1 max_run_start = 0 max_run_end = 0 for i in range(1, n): if sequence[i] == sequence[i-1]: current_len += 1 else: if current_len > max_len: max_len = current_len max_run_start = i - current_len max_run_end = i - 1 current_len = 1 # Check lasts subsequence if current_len > max_len: max_run_start = n - current_len max_run_end = n - 1 return max_run_start + 1, max_run_end + 1 # Convert to 1-based index"},{"question":"Snuke is designing a lighting system for his new gym. The system consists of N lights arranged in a row, each light having an on-off switch. Initially, all lights are off. Snuke will perform Q operations on this system. Each operation is described by two integers L and R, which means toggling (changing from on to off or off to on) all the lights in the range from L to R inclusive. Find the final state of each light after all operations are performed. -----Constraints----- - 1 ≤ N ≤ 10^{5} - 1 ≤ Q ≤ 10^{5} - 1 ≤ L ≤ R ≤ N -----Input----- The input is given from Standard Input in the following format: N Q L1 R1 L2 R2 ... LQ RQ -----Output----- Print a single line containing the final state of each light. Print 0 for off and 1 for on. -----Sample Input----- 5 3 1 3 2 4 3 5 -----Sample Output----- 1 0 1 0 1 - Initially, the lights are [0 0 0 0 0] - After the first operation (1 3): [1 1 1 0 0] - After the second operation (2 4): [1 0 0 1 0] - After the third operation (3 5): [1 0 1 0 1]","solution":"def toggle_lights(N, operations): lights = [0] * N for L, R in operations: for i in range(L-1, R): lights[i] ^= 1 return lights"},{"question":"The zoo lost the secret code to unlock the animal cages, and they need your help to write a program to decipher it. The zoo manager gives you a number N and wants to generate a special code sequence based on it. Help the zoo manager to code this problem. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the special code sequence. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 20 -----Sample Input:----- 3 1 2 3 -----Sample Output:----- 1 121 12321 1234321 -----EXPLANATION:----- No need, else pattern can be decoded easily.","solution":"def generate_code_sequence(n): Generates the special code sequence based on the integer n. sequence = \\"\\" for i in range(1, n + 1): sequence += str(i) for i in range(n - 1, 0, -1): sequence += str(i) return sequence def generate_code_sequences(test_cases): Generates code sequences for a list of test cases. Args: test_cases (list of int): List of integers for which to generate the sequences. Returns: list of str: List of generated sequences as strings. results = [] for n in test_cases: results.append(generate_code_sequence(n)) return results"},{"question":"You are tasked with simulating a robot\'s movement within a two-dimensional grid. The grid consists of cells, some of which contain obstacles. The robot can move up, down, left, or right, but cannot move into cells containing obstacles. The robot\'s objective is to find the shortest path from its starting position to a given target position. Your task is to write a program that finds the shortest path for the robot to reach the target, if such a path exists. If there is no valid path, the program should return -1. Input The input consists of multiple test cases. Each test case has the following format: H W r_start c_start r_target c_target <row_1> <row_2> . . . <row_H> Where H and W are integers representing the height and width of the grid (1 ≤ H, W ≤ 100). (r_start, c_start) are the row and column of the robot\'s starting position, and (r_target, c_target) are the row and column of the robot\'s target position. The next H lines describe the grid, where each line contains W characters. A \'.\' character represents an empty cell, and a \'#\' character represents an obstacle. The end of input is indicated by a line with a single zero. This is not part of any test case. Output For each test case, print the length of the shortest path on a line. If no such path exists, print -1. Example Input 5 5 0 0 4 4 ..... ..... ..#.. ..... ..... 3 3 0 0 2 2 .#. # .#. 0 Output 8 -1","solution":"from collections import deque def shortest_path(grid, r_start, c_start, r_target, c_target): Finds the shortest path from (r_start, c_start) to (r_target, c_target) in the grid. If no path exists, returns -1. H, W = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right def is_valid(r, c): return 0 <= r < H and 0 <= c < W and grid[r][c] == \'.\' queue = deque([(r_start, c_start, 0)]) visited = set((r_start, c_start)) while queue: r, c, dist = queue.popleft() if (r, c) == (r_target, c_target): return dist for dr, dc in directions: nr, nc = r + dr, c + dc if is_valid(nr, nc) and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1 def process_input(input_lines): Processes the input lines and returns results of shortest path for each test case. results = [] i = 0 while i < len(input_lines): if input_lines[i] == \'0\': break H, W = map(int, input_lines[i].split()) r_start, c_start, r_target, c_target = map(int, input_lines[i+1].split()) grid = [list(input_lines[i+2+j]) for j in range(H)] result = shortest_path(grid, r_start, c_start, r_target, c_target) results.append(result) i += 2 + H return results def main(input_string): Main function to process the input string and return results for each test case. input_lines = input_string.strip().split(\'n\') results = process_input(input_lines) return \\"n\\".join(map(str, results))"},{"question":"You are given an undirected connected graph with n nodes and m edges. Each edge has a weight associated with it. Your task is to determine the minimum cost to make the graph fully connected if you can add at most one extra edge of any weight to achieve this. -----Input----- The first line contains two integers n and m (1 le n le 10^3, 0 le m le 10^4) — the number of nodes and edges in the graph. Each of the next m lines contains three integers u, v, and w (1 le u, v le n, 1 le w le 10^6) representing an edge between nodes u and v with weight w. -----Output----- Print a single integer — the minimum cost to make the graph fully connected, or -1 if it is impossible to do so even with the addition of one extra edge. -----Examples----- Input 4 3 1 2 1 2 3 2 3 4 3 Output 6 Input 5 2 1 2 7 4 5 2 Output -1","solution":"def find_min_cost_to_connect_all_nodes(n, m, edges): # Helper function to find the representative of a node def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] # Helper function to do union of two subsets def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Sort edges based on weight edges.sort(key=lambda edge: edge[2]) parent = [] rank = [] # Initialize the parent and rank arrays for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 mst_edges = 0 # Iterate through edges and apply Kruskal\'s algorithm to find the MST for edge in edges: u, v, w = edge u -= 1 v -= 1 x = find(parent, u) y = find(parent, v) if x != y: mst_weight += w mst_edges += 1 union(parent, rank, x, y) if mst_edges == n - 1: return mst_weight if mst_edges == n - 1: return mst_weight return -1"},{"question":"You are given a rectangular grid of dimensions m × n, with each cell containing either a 0 or a 1. You are also given a starting position (sx, sy) and a target position (tx, ty) on this grid. Your task is to determine if there is a path from the start position to the target position. You can move from one cell to another if they are adjacent horizontally or vertically and both contain 1s. Write a function that takes the following inputs: - m: an integer representing the number of rows in the grid. - n: an integer representing the number of columns in the grid. - grid: a list of lists where each element is either 0 or 1, representing the grid. - sx: an integer representing the starting row index. - sy: an integer representing the starting column index. - tx: an integer representing the target row index. - ty: an integer representing the target column index. The function should return a boolean value indicating whether a path exists from (sx, sy) to (tx, ty). Implement the function with the following signature: ```python def is_path_exist(m: int, n: int, grid: List[List[int]], sx: int, sy: int, tx: int, ty: int) -> bool: ``` -----Input----- The first line contains two integers, m and n (2 ≤ m, n ≤ 100), representing the dimensions of the grid. The next m lines each contain n integers (either 0 or 1), representing the grid. The last line contains four integers, sx, sy, tx, and ty (0 ≤ sx, tx < m, 0 ≤ sy, ty < n), representing the starting and target positions respectively. It is guaranteed that both the starting and target positions contain 1. -----Output----- Output a single boolean value: True if there is a path from (sx, sy) to (tx, ty), and False otherwise. -----Examples----- Input 4 4 1 0 1 1 1 1 0 1 0 1 1 0 1 1 1 1 0 0 3 3 Output True Input 3 3 1 0 0 0 1 0 0 0 1 0 0 2 2 Output False -----Note----- In the first example, a possible path is: (0, 0) -> (1, 1) -> (3, 1) -> (3, 2) -> (3, 3) In the second example, there is no path from the start to target position.","solution":"from typing import List def is_path_exist(m: int, n: int, grid: List[List[int]], sx: int, sy: int, tx: int, ty: int) -> bool: def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == 1 def dfs(x, y): if not is_valid(x, y): return False if (x, y) == (tx, ty): return True # Mark as visited by setting the cell to -1 grid[x][y] = -1 # Explore neighbors for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if dfs(nx, ny): return True return False return dfs(sx, sy)"},{"question":"Frank is participating in a coding competition that involves building strings with constraints. He is required to construct a string of length N consisting only of the characters \'a\' and \'b\'. The string should contain exactly K occurrences of the character \'a\'. -----Input:----- - The first line contains an integer T, the number of test cases. The following T lines contain two integers each, N and K. -----Output:----- For each test case, if it\'s possible to create such a string of length N with exactly K occurrences of \'a\', output a possible valid string. Otherwise, output -1. -----Constraints----- - 1 leq T leq 10^4 - 1 leq N leq 100 - 0 leq K leq N -----Sample Input:----- 3 5 2 3 4 4 0 -----Sample Output:----- aabbb -1 bbbb -----EXPLANATION:----- For 1) A valid string of length 5 with exactly 2 \'a\'s is \\"aabbb\\". For 2) It\'s not possible to have a string of length 3 with 4 \'a\'s, so the output is -1. For 3) A valid string of length 4 with 0 \'a\'s is \\"bbbb\\".","solution":"def generate_string(N, K): Generates a string of length N with exactly K occurrences of \'a\'. Outputs a valid string if possible, otherwise returns -1. if K > N: return \\"-1\\" else: return \'a\' * K + \'b\' * (N - K) def solve(T, test_cases): results = [] for N, K in test_cases: results.append(generate_string(N, K)) return results"},{"question":"Petya is learning how to write more complicated programs, and today his task involves manipulating arrays. Petya\'s current task is to implement a function that takes in an array of integers and reorders it in a specific way. The function should: * Move all zeroes to the end of the array, * Maintain the relative order of the non-zero elements. The function should modify the array in-place and should not allocate extra space for another array (i.e., use O(1) auxiliary space). Help Petya by providing an implementation of this function. Input The input consists of a single list of integers. Output The function should modify the input list by moving all zeroes to the end while maintaining the relative order of the non-zero elements. Examples Input [0, 1, 0, 3, 12] Output after function call [1, 3, 12, 0, 0] Input [4, 2, 4, 0, 0, 3, 0, 5, 1, 0] Output after function call [4, 2, 4, 3, 5, 1, 0, 0, 0, 0] Input [0, 0, 0, 1, 2] Output after function call [1, 2, 0, 0, 0]","solution":"def move_zeroes(nums): Moves all zeroes in the list to the end while maintaining the relative order of non-zero elements. Args: nums (list of int): The input list of integers. Returns: None: The input list is modified in-place. last_non_zero_found_at = 0 for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at], nums[i] = nums[i], nums[last_non_zero_found_at] last_non_zero_found_at += 1"},{"question":"Given a grid of characters and a word, create a function that determines if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are top, bottom, left, and right. The same letter cell may not be used more than once. For example, given the following board: ``` [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] ``` and the word \\"ABCCED\\", the function should return true. The function should follow the signature: ```python def exist(board: List[List[str]], word: str) -> bool: ``` To illustrate the problem, consider the following example: ```python exist([ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ], \\"ABCCED\\") returns True exist([ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ], \\"SEE\\") returns True exist([ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ], \\"ABCB\\") returns False ``` Hint: You may use depth-first search (DFS) to navigate through the grid.","solution":"def exist(board, word): Determines if the word exists in the grid using Depth-First Search (DFS). Each cell can be used only once. if not board: return False rows, cols = len(board), len(board[0]) def dfs(r, c, index): if index == len(word): return True if r < 0 or r >= rows or c < 0 or c >= cols or board[r][c] != word[index]: return False temp = board[r][c] board[r][c] = \'#\' found = (dfs(r+1, c, index+1) or dfs(r-1, c, index+1) or dfs(r, c+1, index+1) or dfs(r, c-1, index+1)) board[r][c] = temp return found for i in range(rows): for j in range(cols): if dfs(i, j, 0): return True return False"},{"question":"Write a function called `compress_string` that takes a string as input and returns a new string with consecutive repeated characters replaced by the count of repetitions followed by the character. If the result is not shorter than the original string, return the original string instead. Assume the string only contains alphabetical characters (both uppercase and lowercase). For example: - If the input string is \\"aaabbc\\", the compressed string should be \\"3a2bc\\". - If the input string is \\"abcd\\", the original string should be returned as \\"abcd\\" because the compressed string \\"1a1b1c1d\\" is not shorter. Note: - The function should be case-sensitive. - The length comparison should include the counts and characters.","solution":"def compress_string(s): Compresses a string such that consecutive repeated characters are replaced by the count of repetitions followed by the character. If the compressed string is not shorter than the original string, returns the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(f\\"{count}{s[i-1]}\\" if count > 1 else s[i-1]) count = 1 compressed.append(f\\"{count}{s[-1]}\\" if count > 1 else s[-1]) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"You are given a rectangular grid with dimensions n x m representing a garden. Initially, all cells in the garden are empty. You are given a sequence of operations to perform on this garden: 1. Plant an \\"X\\" in a specified cell. 2. Remove an \\"X\\" from a specified cell. 3. Check if a specified cell contains an \\"X\\". Write a program to perform these operations and output the result of each \\"check\\" operation. Input The first line contains integers n, m, and q: the height of the garden, the width of the garden, and the number of queries, respectively (1 ≤ n, m ≤ 1000, 1 ≤ q ≤ 100,000). Each of the next q lines contains a query in one of the following formats: - \\"1 i j\\" (1 ≤ i ≤ n, 1 ≤ j ≤ m): Plant an \\"X\\" in the cell at row i, column j. - \\"2 i j\\" (1 ≤ i ≤ n, 1 ≤ j ≤ m): Remove an \\"X\\" from the cell at row i, column j. - \\"3 i j\\" (1 ≤ i ≤ n, 1 ≤ j ≤ m): Check if the cell at row i, column j contains an \\"X\\". Output For each \\"3 i j\\" query, output \\"Yes\\" if the cell contains an \\"X\\", and \\"No\\" otherwise. Examples Input 5 5 7 1 1 1 1 2 2 3 1 1 3 2 2 2 1 1 3 1 1 3 2 2 Output Yes Yes No Yes","solution":"def garden_operations(n, m, queries): garden = [[False] * m for _ in range(n)] results = [] for query in queries: operation = query[0] i = query[1] - 1 # Convert 1-based index to 0-based index j = query[2] - 1 # Convert 1-based index to 0-based index if operation == 1: garden[i][j] = True elif operation == 2: garden[i][j] = False elif operation == 3: if garden[i][j]: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given a function print_triangle(n) that should print a right-angled triangle of height \'n\' using the \'*\' (asterisk) character. The triangle should be left-aligned, starting with one asterisk in the first line up to \'n\' asterisks in the last line. For example, for n = 5, the output should be: ``` * ** *** **** ***** ``` Write an implementation of the function print_triangle(n) to produce the desired output for any positive integer \'n\'. Your implementation should print the result directly to the console. ```python def print_triangle(n): for i in range(1, n + 1): print(\'*\' * i) ```","solution":"def print_triangle(n): Prints a right-angled triangle of height \'n\' using the \'*\' character. The triangle is left-aligned. for i in range(1, n + 1): print(\'*\' * i)"},{"question":"In a coding system, pairs of characters in a string can be swapped to make new strings. You need to write a function that determines if two strings are similar (one can be transformed to the other with any number of swaps). For each operation, you can choose any two characters at different positions in the string and swap them. Two strings are similar if and only if they can be transformed into each other using zero or more of these swap operations. Example s1 = \\"abc\\" s2 = \\"bca\\" The strings \\"abc\\" and \\"bca\\" are similar because you can swap \'a\' and \'c\' in \\"abc\\" to get \\"bca\\". Function Description Complete the function areSimilar in the editor below. areSimilar has the following parameter(s): - string s1: the first string - string s2: the second string Returns - boolean: return True if s1 can be transformed to s2, otherwise return False Input Format - Two strings s1 and s2, each consisting of lowercase English letters. Constraints - 1 ≤ length of s1, s2 ≤ 100 Sample Input 1 abc bca Sample Output 1 True Explanation In this example, swapping \'a\' and \'c\' in \\"abc\\" will result in \\"bca\\". Therefore, the strings are similar. Sample Input 2 aab aba Sample Output 2 True Explanation In this example, swapping the first and second \'a\' in \\"aab\\" will result in \\"aba\\". Therefore, the strings are similar.","solution":"def areSimilar(s1, s2): Returns True if s1 can be transformed to s2 by any number of swaps. if len(s1) != len(s2): return False return sorted(s1) == sorted(s2)"},{"question":"A company has a network of N workstations connected by M communication cables. Each communication cable connects two workstations bidirectionally and has an associated reliability score - an integer between 1 and 100 that represents the likelihood (in percentage) that data will successfully be transmitted over the cable at any given time. The security team wants to send data from a source workstation S to a target workstation T and is interested in maximizing the overall reliability of the route used. A route\'s reliability is determined by the minimum reliability score of any communication cable in that route (i.e., the weakest link). Help the security team by writing a function to determine the maximum possible reliability score for the route from S to T. -----Input----- The first line contains three integers: N (2 ≤ N ≤ 10^5), M (1 ≤ M ≤ 2 * 10^5), and a single space-separated pair of integers S and T (1 ≤ S, T ≤ N, S ≠ T). The following M lines each contain three integers u, v, and r (1 ≤ u, v ≤ N, 1 ≤ r ≤ 100, u ≠ v), where u and v are the workstations connected by a communication cable and r is the reliability score of that cable. -----Output----- Print a single integer, the maximum reliability score for a route from S to T. If no route exists, print -1. -----Examples----- Input 5 6 1 5 1 2 95 2 3 70 3 4 90 4 5 80 1 3 60 2 5 50 Output 70 Input 4 3 1 4 1 2 60 2 3 50 3 4 40 Output 40 -----Note----- In the first example, one of the possible paths from 1 to 5 is 1 -> 2 -> 5 with cables reliability scores 95 and 50, so the reliability of this route is 50. Another path is 1 -> 2 -> 3 -> 4 -> 5 with reliability scores 95, 70, 90, and 80, so the reliability of this route is 70. The maximum reliability score here is 70.","solution":"import heapq def max_reliability_score(N, M, S, T, edges): def dijkstra_maximin(graph, start, end): # Priority queue to store (reliability, node) pq = [(-100, start)] # start with the maximum reliability possible at start max_reliability = [-1] * (N + 1) max_reliability[start] = 100 while pq: min_reliability, node = heapq.heappop(pq) min_reliability = -min_reliability if node == end: return min_reliability if min_reliability < max_reliability[node]: continue for neighbor, reliability in graph[node]: path_reliability = min(min_reliability, reliability) if path_reliability > max_reliability[neighbor]: max_reliability[neighbor] = path_reliability heapq.heappush(pq, (-path_reliability, neighbor)) return -1 # If there\'s no path from start to end # Create graph from edges graph = [[] for _ in range(N + 1)] for u, v, r in edges: graph[u].append((v, r)) graph[v].append((u, r)) return dijkstra_maximin(graph, S, T) # Example of using the function # N = 5, M = 6, S = 1, T = 5 # edges = [(1, 2, 95), (2, 3, 70), (3, 4, 90), (4, 5, 80), (1, 3, 60), (2, 5, 50)] # print(max_reliability_score(N, M, S, T, edges)) # Output: 70"},{"question":"-----Problem----- You are given an array of integers representing the number of messages received by different users on a messaging app. Each day the number of messages a user receives can increase or decrease based on certain interactions. Your task is to simulate the message counts after a series of interactions. For each interaction, a certain number of messages will be added (positive integer) or subtracted (negative integer) from a specific user\'s count. Your goal is to determine the final message count for each user after all interactions are applied. -----Input----- The first line contains an integer N, the number of users. The next line contains N space-separated integers representing the initial message counts for the users. The third line contains an integer K, the number of interactions. Each of the next K lines contains two space-separated integers: U (the user index starting from 0) and M (the message count to be added or subtracted). -----Output----- Output a single line with N space-separated integers representing the final message count for each user. -----Constraints----- N ≤ 1000 K ≤ 1000 -10^6 ≤ initial message count, M ≤ 10^6 -----Sample Input----- 5 10 20 30 40 50 3 0 5 3 -10 2 15 -----Sample Output----- 15 20 45 30 50 -----Explanation----- - Initially, the message counts are [10, 20, 30, 40, 50]. - After the first interaction (user 0 receives 5 more messages), the counts become [15, 20, 30, 40, 50]. - After the second interaction (user 3 loses 10 messages), the counts become [15, 20, 30, 30, 50]. - After the third interaction (user 2 receives 15 more messages), the counts become [15, 20, 45, 30, 50].","solution":"def update_message_counts(N, initial_counts, K, interactions): # Copy the initial counts to the result list final_counts = initial_counts[:] # Apply each interaction to the corresponding user\'s message count for interaction in interactions: user_index, message_change = interaction final_counts[user_index] += message_change return final_counts"},{"question":"You are given an array of n positive integers and an integer k. You want to split the array into exactly two non-empty parts such that the sum of elements in the first part is as close as possible to the sum of elements in the second part. More formally, if you divide the array into two non-empty parts, the absolute difference of their sums should be minimized. Find the minimum absolute difference between the sums of the two parts. For example, if n = 5 and the array is [1, 2, 3, 4, 5], then the two parts can be [1, 2, 3] and [4, 5]. The sum of the first part is 6 and the sum of the second part is 9. Hence, the absolute difference is 3. -----Input----- The first line contains a single integer t (1 le t le 10^3) — the number of test cases in the test. Then t test cases follow. Each test case starts with a line containing an integer n (2 le n le 1000) — the number of elements in the array. The second line contains n positive integers a_1, a_2, ..., a_n (1 le a_i le 1000) — the elements of the array. -----Output----- For each test case output one integer — the minimum absolute difference between the sums of the two parts of the array. -----Example----- Input 3 5 1 2 3 4 5 4 1 1 1 1 3 3 7 2 Output 1 0 2 -----Note----- In the first test case, you can divide the array into [1, 2, 3] and [4, 5]. The sums of the two parts are 6 and 9, respectively, and the absolute difference is 3. For a closer division, [1, 4, 5] and [2, 3] gives sums 10 and 5, with an absolute difference of 5. The minimum absolute difference is 1 from [1, 2, 4] and [3, 5] sums 7 and 8. In the second test case, all elements are the same, so splitting the array into [1, 1] and [1, 1] provides a minimum absolute difference of 0. In the third test case, splitting the array into [3, 2] and [7] gives sums 5 and 7, respectively, and an absolute difference of 2.","solution":"def min_abs_diff(array): Returns the minimum absolute difference between the sums of two parts of the array. total_sum = sum(array) n = len(array) # Use dynamic programming to find the subset closest to total_sum / 2 dp = [False] * (total_sum // 2 + 1) dp[0] = True for num in array: for j in range(total_sum // 2, num - 1, -1): dp[j] = dp[j] or dp[j - num] for half_sum in range(total_sum // 2, -1, -1): if dp[half_sum]: return abs((total_sum - half_sum) - half_sum) def solve_min_abs_diff(t, test_cases): results = [] for i in range(t): n, array = test_cases[i] results.append(min_abs_diff(array)) return results"},{"question":"You are given an array of integers A of length N. In one operation, you can choose any element of the array and replace it with a new integer X such that the greatest common divisor (GCD) of the array remains the same. Your goal is to determine the minimum number of operations required to make all elements of the array equal. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of 2 lines of input. - The first line of each test case contains a single integer N — the length of the array. - The second line of each test case contains N integers — the elements of the array A. ------ Output Format ------ For each test case, output on a new line — the minimum number of operations required to make all elements of the array equal. ------ Constraints ------ 1 ≤ T ≤ 2cdot 10^{4} 1 ≤ N ≤ 2cdot 10^{5} - Sum of N over all test cases does not exceed 10^{6}. - Elements of the array A are positive integers and can be as large as 10^6. ------ Sample Input 1 ------ 3 3 2 4 6 4 10 20 30 40 5 5 5 5 5 5 ------ Sample Output 1 ------ 2 3 0 ------ Explanation 1 ------ Test case 1: The GCD of the array is 2. We can reduce the array to [2, 2, 2] with 2 operations. - One possible way is to change the second element from 4 to 2 and the third element from 6 to 2. Test case 2: The GCD of the array is 10. We can reduce the array to [10, 10, 10, 10] with 3 operations. - One possible way is to change the elements 20, 30, and 40 to 10. Test case 3: The array is already uniform, hence, zero operations are required to make all elements equal.","solution":"from math import gcd from functools import reduce def min_operations_to_equal_elements(arr): This function determines the minimum number of operations required to make all elements of the array equal given that we can replace any element with another integer so that the GCD of the array remains the same. # Calculate the gcd of the entire array overall_gcd = reduce(gcd, arr) # Count how many elements are already equal to the overall gcd operations = sum(1 for x in arr if x != overall_gcd) return operations def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(min_operations_to_equal_elements(arr)) return results # Functions to read input and get output in the required format def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases def format_output(output_list): return \\"n\\".join(map(str, output_list))"},{"question":"You have a sequence of integers represented as an array `arr` and an integer `k`. Write a function that modifies the array by rotating it `k` times to the right. A rotation means that every element is shifted right by one position, and the last element moves to the first position. Examples: - Given `arr = [1, 2, 3, 4, 5]` and `k = 1`, the result should be `[5, 1, 2, 3, 4]`. - Given `arr = [1, 2, 3, 4, 5]` and `k = 3`, the result should be `[3, 4, 5, 1, 2]`. - Given `arr = [1, 2, 3, 4, 5]` and `k = 5`, the result should be `[1, 2, 3, 4, 5]`. The Task: Implement the function `rotate_right(arr: List[int], k: int) -> List[int]` which performs the right rotation. Notes: 1. Avoid unnecessary computations by optimizing for large values of `k` where `k` can be greater than `len(arr)`. 2. The input list can be very large, ensure your solution is efficient for performance. 3. You can assume `arr` is non-empty and contains at least one element. ```python def rotate_right(arr, k): n = len(arr) k = k % n return arr[-k:] + arr[:-k] ```","solution":"def rotate_right(arr, k): Rotates the array arr to the right by k positions. n = len(arr) # Normalize k to avoid unnecessary rotations k = k % n return arr[-k:] + arr[:-k]"},{"question":"Madison works as a delivery person and is assigned the task of delivering packages to various locations. Each package is labeled with the delivery time (in minutes) required to reach its destination. Madison can only carry a maximum weight of `W` kg during any single trip. Given a list of package weights, write a function to determine the minimum number of trips Madison needs to make in order to deliver all packages. You need to implement the function `minimumTrips(packages, W)` where: - `packages` is a list of integers representing the weight of each package. - `W` is an integer representing the maximum weight Madison can carry in a single trip. The function should return the minimum number of trips required to deliver all packages. # Examples: Example 1: ``` Input: packages = [2, 3, 5, 7], W = 10 Output: 2 Explanation: Madison can make the trips delivering packages [2, 3, 5] in one trip and [7] in another trip. ``` Example 2: ``` Input: packages = [1, 2, 3, 8], W = 10 Output: 2 Explanation: Madison can make the trips delivering packages [1, 2, 3] in one trip and [8] in another trip. ``` Constraints: - The `packages` list will have at least one package. - Package weights and `W` are positive integers. - The sum of all package weights does not exceed 10,000 kg.","solution":"def minimumTrips(packages, W): Determine the minimum number of trips required to deliver all the packages. Parameters: packages (list): A list of integers representing the weight of each package. W (int): The maximum weight Madison can carry in a single trip. Returns: int: The minimum number of trips required. packages.sort(reverse=True) # Sort the packages in descending order trips = 0 while packages: current_weight = 0 i = 0 while i < len(packages): if current_weight + packages[i] <= W: current_weight += packages.pop(i) # Remove the package if it\'s added to the trip else: i += 1 # Move to the next package trips += 1 return trips"},{"question":"You are given an array A of N integers. You can perform a series of operations on the array as follows: 1. Choose two elements from the array. 2. Remove the two chosen elements from the array. 3. Insert the difference between the two chosen elements back into the array. You need to minimize the last remaining element in the array after performing the operations as many times as you wish. Write a function to return the minimized last remaining element in the array after performing any possible series of the above operations. # Function Signature ```python def minimize_last_element(A: List[int]) -> int: ``` # Input - `A` (List[int]): A list of integers where `1 <= len(A) <= 10^4` and `1 <= A[i] <= 10^4`. # Output - `int`: The minimized last remaining element. # Examples Example 1: **Input:** ```python A = [4, 3, 6, 8] ``` **Output:** ```python 1 ``` **Explanation:** Choose elements 4 and 3 -> Insert 1 (remaining array: [1, 6, 8]) Choose elements 1 and 6 -> Insert 5 (remaining array: [5, 8]) Choose elements 5 and 8 -> Insert 3 (remaining array: [3]) Final minimized last remaining element is 3. Example 2: **Input:** ```python A = [7, 10, 4] ``` **Output:** ```python 1 ``` **Explanation:** Choose elements 7 and 10 -> Insert 3 (remaining array: [3, 4]) Choose elements 3 and 4 -> Insert 1 (remaining array: [1]) Final minimized last remaining element is 1. Example 3: **Input:** ```python A = [2, 3, 3] ``` **Output:** ```python 0 ``` **Explanation:** Choose elements 3 and 3 -> Insert 0 (remaining array: [0, 2]) Choose elements 0 and 2 -> Insert 2 (remaining array: [2]) Final minimized last remaining element is 2.","solution":"from typing import List from functools import reduce import math def minimize_last_element(A: List[int]) -> int: This function takes a list of integers and returns the minimized last remaining element after performing operations as described. # Using gcd (greatest common divisor) property to minimize the last element return reduce(math.gcd, A)"},{"question":"The city administration has decided to repair all the roads and bridges in a town. The town is represented by an undirected graph where the nodes are intersections and the edges are roads. Due to the state of the roads, some intersections might be initially disconnected. You are given the task to find the minimum number of new roads needed to be built to ensure that every intersection is connected, and there is exactly one path between any two intersections, forming a tree. # Input - The first line of the input contains two integers, `N` and `M`, where `N` (1 ≤ `N` ≤ 1000) is the number of intersections and `M` (0 ≤ `M` ≤ 10,000) is the number of roads already present. - The following `M` lines each contain two integers `u` and `v` (1 ≤ `u`, `v` ≤ `N`), indicating that there is a road between intersections `u` and `v`. It is guaranteed that there are no duplicate roads and no road connects an intersection to itself. # Output Output a single integer representing the minimum number of new roads required. # Example Input ``` 6 3 1 2 2 3 4 5 ``` Output ``` 2 ``` Input ``` 7 4 1 2 2 3 4 5 5 6 ``` Output ``` 2 ``` # Explanation In the first example, there are two separate connected components in the graph: {1, 2, 3} and {4, 5}. Intersection 6 is also disconnected from any other intersection. To make all intersections connected, you could build new roads: one connecting any node from the first component to the second (e.g., `3-4`), and another from the single node (e.g., `5-6`). Hence, the output is 2. In the second example, the connected components are: {1, 2, 3}, {4, 5, 6}, and the single node 7. Two new roads are needed to connect these three components into a tree. # Note The solution ensures a minimum number of new roads added by initially finding the number of connected components in the graph, and then connecting these components efficiently.","solution":"def find_min_new_roads(N, M, edges): Returns the minimum number of new roads needed to ensure that every intersection is connected. from collections import defaultdict, deque def bfs(node, visited, graph): queue = deque([node]) while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Build the adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) connected_components = 0 # Count the number of connected components using BFS for i in range(1, N + 1): if not visited[i]: connected_components += 1 visited[i] = True bfs(i, visited, graph) # The number of new roads needed is (number of connected components - 1) return connected_components - 1"},{"question":"A group of friends are playing a game where they draw cards from a stack. The stack contains cards numbered from 1 to N in a shuffled order. Each friend draws a card one by one, and they want to know the remaining cards after a certain number of draws and their sum. Write a Python function that helps them by taking three inputs: 1. An integer N representing the total number of cards. 2. A list L of integers representing the order in which cards are drawn where each element of L is an integer between 1 and N. 3. An integer M representing the number of draws made from the stack. Your task is to return a list of the remaining cards in the stack and their sum after M draws. The function should return the result as a tuple with the first element being a list of the remaining cards sorted in ascending order and the second element being the sum of those remaining cards. Input: - First line: an integer T, the number of test cases. - For each test case: - An integer N. - A list L containing N integers in the range from 1 to N. - An integer M. Output: - For each test case, print the list of remaining cards sorted in ascending order and their sum. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ M ≤ N All values in L are unique and are a permutation of the range 1 to N. Example Input: 2 5 3 1 5 2 4 3 4 1 3 4 2 2 Example Output: [2, 4] 6 [3, 4] 7 Explanation: In the first test case, after drawing the first 3 cards [3, 1, 5], the remaining cards are [2, 4] with a sum of 6. In the second test case, after drawing the first 2 cards [1, 3], the remaining cards are [3, 4] but this seems incorrect because it should be [4, 2] which then sums to 6. Hence correcting, the expected output [4, 2] 6.","solution":"def remaining_cards_and_sum(N, L, M): Returns the remaining cards and their sum after M draws. Args: N: an integer representing the total number of cards. L: a list of integers representing the order in which cards are drawn. M: an integer representing the number of draws made from the stack. Returns: A tuple containing a list of remaining cards in ascending order and their sum. drawn_cards = set(L[:M]) remaining_cards = [card for card in range(1, N+1) if card not in drawn_cards] remaining_sum = sum(remaining_cards) return sorted(remaining_cards), remaining_sum def process_test_cases(test_cases): results = [] for N, L, M in test_cases: results.append(remaining_cards_and_sum(N, L, M)) return results"},{"question":"Write a function that finds the minimum value in a binary search tree (BST). You are given the root node of the BST. Assume that the BST is non-empty and all nodes contain unique values. Examples: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Example 1: # Input: root = TreeNode(10, TreeNode(5), TreeNode(15, TreeNode(12), TreeNode(20))) # Output: 5 # Example 2: # Input: root = TreeNode(1) # Output: 1 # Example 3: # Input: root = TreeNode(50, TreeNode(30, TreeNode(20), TreeNode(40)), TreeNode(70, TreeNode(60), TreeNode(80))) # Output: 20 def find_minimum(root: TreeNode) -> int: # code here ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_minimum(root: TreeNode) -> int: Finds the minimum value in a Binary Search Tree (BST). Args: root (TreeNode): The root node of the BST. Returns: int: The minimum value in the BST. current = root while current.left is not None: current = current.left return current.val"},{"question":"Apples and Bananas Sales A fruit vendor sells N crates of apples and M crates of bananas. Each crate of apples contains A apples, and each crate of bananas contains B bananas. Calculate the total number of fruits the vendor has. input Input is given from standard input in the following format. N M A B output Output the total number of fruits in one line. However, insert a line break at the end. Constraint * 1 leq N leq 10 * 1 leq M leq 10 * 1 leq A leq 50 * 1 leq B leq 50 * All inputs are integers. Input example 1 2 3 10 15 Output example 1 65 Input example 2 1 1 20 30 Output example 2 50 Example Input 2 3 10 15 Output 65","solution":"def total_fruits(N, M, A, B): Calculate the total number of fruits the vendor has. Parameters: N (int): Number of crates of apples M (int): Number of crates of bananas A (int): Number of apples in one crate B (int): Number of bananas in one crate Returns: int: Total number of fruits total_apples = N * A total_bananas = M * B return total_apples + total_bananas"},{"question":"You are given a list of integers representing the daily sales of a bookstore for N days. Each day, the bookstore recorded the total sales in the array Sales, where Sales[i] is the total sales on the i-th day. The manager wants to analyze the sales data and understand the patterns in the daily sales. For each day, calculate the number of previous days where the daily sales were greater than the sales of the current day. Input: The first line contains a single integer T, denoting the number of test cases. For each test case, the following input will be provided: - The first line contains an integer N, representing the number of days. - The next N lines contain one integer each, representing the daily sales for that day. Output: For each test case, output exactly N lines. Each line contains a single integer, representing the number of previous days where sales were greater than the sales of the current day. Constraints: 1 ≤ T ≤ 20 1 ≤ N ≤ 1000 1 ≤ Sales[i] ≤ 10^5 SAMPLE INPUT 1 5 100 200 150 180 120 SAMPLE OUTPUT 0 0 1 1 3 Explanation In the sample input, T = 1 and N = 5. The sales figures for the five days are {100, 200, 150, 180, 120}. - For the 1st day (100), no previous days exist, so the output is 0. - For the 2nd day (200), there are no previous days with sales greater than 200, so the output is 0. - For the 3rd day (150), the previous day\'s sales (200) were greater, so the output is 1. - For the 4th day (180), previous days with sales greater than 180 are {200}, so the output is 1. - For the 5th day (120), previous days with sales greater than 120 are {100, 200, 150, 180}, so the output is 3.","solution":"def calculate_greater_sales_days(t, test_cases): results = [] for index in range(t): n = test_cases[index][0] sales = test_cases[index][1] output = [] for i in range(n): count = 0 for j in range(i): if sales[j] > sales[i]: count += 1 output.append(count) results.append(output) return results"},{"question":"Daniel is a passionate botanist who loves analyzing various species of plants. One day, during his research, he stumbled upon an interesting problem related to plant growth patterns. Intrigued, he decides to solve it using his programming skills. You\'re given an array of integers representing the heights of plants. Daniel wants to arrange these plants in a sequence such that the sum of the absolute differences between the heights of adjacent plants is maximized. In other words, if you have an array h_1, h_2, dots, h_n of plant heights, you need to rearrange them in an order p_1, p_2, dots, p_n such that the value of |p_1 - p_2| + |p_2 - p_3| + dots + |p_{n-1} - p_n| is maximized. Daniel is confident in your coding skills and asks for your help to solve this task. -----Input----- The first line of input contains an integer n (2 le n le 10^5) — the number of plants. The second line contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^9) — the heights of the plants. -----Output----- Output the sequence of plant heights that maximizes the sum of absolute differences between adjacent heights. -----Example----- Input 5 4 2 1 6 5 Output 1 6 2 5 4 -----Note----- In the example, one possible optimal output is [1, 6, 2, 5, 4]. The sum of absolute differences between adjacent heights is |1-6| + |6-2| + |2-5| + |5-4| = 5 + 4 + 3 + 1 = 13, which is the maximum possible value for this input. Note that other permutations might also provide the same maximum sum.","solution":"def maximize_absolute_difference(n, heights): Rearranges the given list of plant heights in a sequence that maximizes the sum of the absolute differences between the heights of adjacent plants. heights.sort() arranged = [] left, right = 0, n - 1 while left <= right: if left == right: arranged.append(heights[left]) else: arranged.append(heights[right]) arranged.append(heights[left]) left += 1 right -= 1 return arranged # Example usage n = 5 heights = [4, 2, 1, 6, 5] result = maximize_absolute_difference(n, heights) print(result) # This should be a sequence that maximizes the absolute difference sum"},{"question":"Implement a function `is_circular_permutation(s1, s2)` that checks if string `s2` is a circular permutation of string `s1`. A string `s2` is a circular permutation of string `s1` if it can be obtained by shifting the characters of `s1` any number of times. For example, for strings `s1 = \\"abcd\\"` and `s2 = \\"dabc\\"`, string `s2` is a circular permutation of string `s1` because it can be obtained by shifting \\"abcd\\" to the left three times. # Input The input consists of two lines: - The first line contains the string `s1` (1 ≤ |s1| ≤ 1000). - The second line contains the string `s2` (1 ≤ |s2| ≤ 1000). # Output The output should be `True` if `s2` is a circular permutation of `s1`, and `False` otherwise. # Constraints - Both strings `s1` and `s2` will only contain lowercase English letters. # Example Input ``` abcd dabc ``` Output ``` True ``` Input ``` abcd abdc ``` Output ``` False ``` Explanation In the first example, `s2` is a circular permutation of `s1` because rotating \\"abcd\\" to the left by three positions gives \\"dabc\\". In the second example, `s2` is not a circular permutation of `s1` because no circular shift of \\"abcd\\" gives \\"abdc\\".","solution":"def is_circular_permutation(s1, s2): Checks if s2 is a circular permutation of s1. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Given a string of lowercase English characters, you need to determine the number of times each letter appears in the string. Additionally, output the result in alphabetical order of the letters. -----Input:----- The input consists of a single line containing a string S. -----Output:----- Print each character and its frequency in alphabetical order of characters. Each line should contain a single character and the count of its occurrences in the format: *character* *count*. -----Constraints:----- - The length of S does not exceed 1000. -----Sample input 1:----- hello -----Sample output 1:----- e 1 h 1 l 2 o 1 -----Sample input 2:----- programming -----Sample output 2:----- a 1 g 2 i 1 m 2 n 1 o 1 p 1 r 2","solution":"def character_frequency(s): Returns the frequency of each character in the string `s` in alphabetical order. from collections import Counter # Compute the frequency of each character in the string freq = Counter(s) # Create a list of tuples sorted by the character (the key of the dictionary) sorted_freq = sorted(freq.items()) return sorted_freq"},{"question":"I recently discovered a new puzzle game called \\"Treasure Grid\\" and I am completely hooked! The game is played on a grid with n rows and m columns. Each cell in the grid either contains a treasure chest (represented by \'T\') or is an empty cell (represented by \'.\'). The objective of the game is to collect as many treasure chests as possible following certain rules. Here are the rules: 1. You start at any empty cell in the grid. 2. From your current position, you can move to any of the eight possible adjacent cells (up, down, left, right, and the four diagonals) as long as that cell contains a treasure chest. 3. Every time you move to a treasure chest, you collect it and the cell becomes empty. 4. You cannot move to an empty cell. The goal is to compute the maximum number of treasure chests you can collect if you start at the best possible starting position in the grid and move according to the rules above. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500), representing the dimensions of the grid. Each of the next n lines contains m characters, describing the grid. The j-th character in the i-th line is \'T\' if the cell has a treasure chest, or \'.\' if the cell is empty. Output Print an integer c, the maximum number of treasure chests you can collect starting at the best possible empty cell. Example Input 3 4 ..T. TTT. .T.. Output 5 Explanation for Example If you start at cell (2, 1), you can collect treasure chests at positions (3, 2), (2, 2), (2, 3), (1, 3), and (3, 1), collecting a total of 5 treasure chests. Hint: To solve this problem, consider depth-first search (DFS) or breadth-first search (BFS) algorithms to explore all possible paths efficiently.","solution":"def max_treasures_collected(n, m, grid): Calculate the maximum number of treasure chests that can be collected from the best starting position in an empty cell in the grid. def dfs(x, y): stack = [(x, y)] count = 0 while stack: cx, cy = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'T\': grid[nx][ny] = \'.\' count += 1 stack.append((nx, ny)) return count max_treasures = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': max_treasures = max(max_treasures, dfs(i, j)) return max_treasures"},{"question":"In a city with a grid-like street structure, there is a special route connecting several noteworthy locations. The route is described as a series of consecutive street segments, each with a specified direction and length. The directions are always North (N), South (S), East (E), or West (W), and the lengths are positive integers. Two points A (xa, ya) and B (xb, yb) are given. Your task is to determine if point B lies on the special route described starting from point A and how far along the route point B is. If point B is not on the route, return -1. The input format is as follows: - The first line contains two integers xa and ya, the starting coordinates of point A. - The second line contains two integers M, the number of segments in the route (1 ≤ M ≤ 1000). - The next M lines describe the segments of the route, each containing a character D indicating the direction (one of N, S, E, W) and an integer L representing the length of the segment. - The next line contains two integers xb and yb, the coordinates of point B. The output should be a single integer: - The total distance from point A to point B along the route if point B is on the route. - -1 if point B is not on the route. # Example Input ``` 0 0 3 N 3 E 4 S 2 3 -1 ``` Output ``` 8 ``` Explanation Starting from (0, 0): - Move North 3 units to (0, 3) - Move East 4 units to (4, 3) - Move South 2 units to (4, 1) Point B (3, -1) is not reachable by following the described segments, so the output is -1. In the example above, point B (3, -1) is not on the described route segments, hence the output would be -1. If point B were on the route, the output should be the sum of lengths of all segments up to the segment where B is reached.","solution":"def find_point_on_route(xa, ya, segments, xb, yb): Determines if point B (xb, yb) lies on the route described starting from point A (xa, ya). Returns the distance from point A to point B along the route or -1 if point B is not on the route. x, y = xa, ya total_distance = 0 for direction, length in segments: if direction == \'N\': if x == xb and y < yb <= y + length: return total_distance + (yb - y) y += length elif direction == \'S\': if x == xb and y > yb >= y - length: return total_distance + (y - yb) y -= length elif direction == \'E\': if y == yb and x < xb <= x + length: return total_distance + (xb - x) x += length elif direction == \'W\': if y == yb and x > xb >= x - length: return total_distance + (x - xb) x -= length else: raise ValueError(\\"Invalid direction\\") total_distance += length return -1 # Example usage xa, ya = 0, 0 segments = [(\'N\', 3), (\'E\', 4), (\'S\', 2)] xb, yb = 3, -1 print(find_point_on_route(xa, ya, segments, xb, yb)) # Output should be -1"},{"question":"Linda is a cryptography enthusiast. She loves to decipher and encode messages using various cryptographic techniques. Recently, she came across an ancient method of encoding messages where each letter in a message is replaced by another letter at a fixed position down the alphabet. This method is called Caesar Cipher. Linda wants to create a general version of the Caesar Cipher where the shift can be any integer (positive or negative) instead of just a fixed shift. Given a lowercase message and a shift value, your task is to help Linda encode the message using this generalized Caesar Cipher. In the Caesar Cipher encoding: - Each letter is shifted by the given shift value. - If shifting a letter exceeds \'z\', it wraps around back to \'a\'. - If shifting a letter precedes \'a\', it wraps around back to \'z\'. For instance, with a shift value of 3: - \'a\' would become \'d\' - \'z\' would become \'c\' Similarly, with a shift value of -2: - \'a\' would become \'y\' - \'c\' would become \'a\' You are given T sets of data to process. Each set contains a single shift value followed by the message to be encoded. 1 ≤ T ≤ 10 -100 ≤ shift value ≤ 100 1 ≤ length of the message ≤ 100 For each set of data, output the encoded message in a new line. # Input - An integer T, the number of test cases. - For each test case, an integer shift value followed by a string message. # Output - For each test case, print the encoded message. # Example Sample Input 3 3 hello -2 world 27 abc Sample Output khoor umpjb bcd Explanation In the first test case, each letter in \\"hello\\" is shifted by 3 positions resulting in \\"khoor\\". In the second test case, each letter in \\"world\\" is shifted by -2 positions resulting in \\"umpjb\\". In the third test case, each letter in \\"abc\\" is shifted by 27 positions resulting in \\"bcd\\" (since shifting by 27 is equivalent to shifting by 1 as the alphabet length is 26).","solution":"def caesar_cipher(shift, message): Encodes the given message using a Caesar cipher with the specified shift. encoded_message = [] for char in message: # Calculate the shifted position with wrap-around new_idx = (ord(char) - ord(\'a\') + shift) % 26 new_char = chr(ord(\'a\') + new_idx) encoded_message.append(new_char) return \\"\\".join(encoded_message) def process_test_cases(T, test_cases): Processes multiple test cases for the Caesar cipher encoding. results = [] for shift, message in test_cases: results.append(caesar_cipher(shift, message)) return results"},{"question":"There are N students in a class sitting in a row, each assigned an integer value representing their skill levels. The teacher wants to divide the row into exactly K non-overlapping segments such that the maximum difference between the skill levels of students in any segment is minimized. Your task is to write a program to help the teacher find the minimum possible value of the maximum difference in skill levels for any segment when the row of students is divided into exactly K segments. Input Format The first line of input contains two space-separated integers: N, the number of students (1 ≤ N ≤ 1000), and K, the number of segments (1 ≤ K ≤ N). The second line contains N space-separated integers representing the skill levels of the students. Each skill level is an integer between 1 and 10000 (inclusive). Output Format Print a single integer: the minimum possible value of the maximum difference in skill levels for any segment after dividing the row into exactly K segments. SAMPLE INPUT 5 2 1 5 4 6 8 SAMPLE OUTPUT 3 Explanation In the sample case, one way to divide the row into 2 segments is [1, 5, 4] and [6, 8], where the maximum difference in the first segment is 4 (5 - 1) and in the second segment is 2 (8 - 6). The maximum of these differences is 4. Another valid division is [1] and [5, 4, 6, 8], where the maximum difference in the first segment is 0 (since there\'s only one student) and in the second segment is 4 (8 - 4). The maximum of these differences is 4. However, the optimal division is [1, 5, 4] and [6, 8], where the maximum difference is 3 (5 - 1 or 6 - 4). Thus, the minimum possible value of the maximum difference is 3.","solution":"def min_max_diff(N, K, skill_levels): skill_levels.sort() def is_possible(max_diff): count = 1 min_level = skill_levels[0] for skill in skill_levels: if skill - min_level > max_diff: count += 1 min_level = skill if count > K: return False return True left, right = 0, skill_levels[-1] - skill_levels[0] while left < right: mid = (left + right) // 2 if is_possible(mid): right = mid else: left = mid + 1 return left"},{"question":"A large ecosystem simulation game tracks multiple species\' populations over time. Each species\' population changes based on a set of rules. You are given the initial population levels for each species, and a list of rules that dictate population changes from one day to the next. Each rule consists of a species identifier, an increase or decrease amount, and the number of days after which it applies again. Your task is to predict the population of each species after a specified number of days. Input: - The first input line contains an integer `n` (1 ≤ n ≤ 100,000), the number of species. - The second line contains `n` integers, where the ith integer is the initial population of the ith species. - The third line contains an integer `m` (1 ≤ m ≤ 100,000), the number of rules. - The next `m` lines each contain a triplet (species_id, change_amount, interval), signifying each rule. - The last line contains an integer `days` (1 ≤ days ≤ 1,000,000), the number of days to simulate. Output: - Output `n` integers, the population of each species after the specified number of days. Example: Input: ``` 3 100 150 200 2 0 10 2 1 -5 3 10 ``` Output: ``` 150 135 200 ``` Explanation: - There are 3 species with initial populations 100, 150, and 200. - The rules are: - Species 0 increases by 10 every 2 days. - Species 1 decreases by 5 every 3 days. - After 10 days: - Species 0\'s population: 100 + (10 * 5) = 150 (incremented 5 times). - Species 1\'s population: 150 - (5 * 3) = 135 (decremented 3 times). - Species 2\'s population remains unchanged at 200 (no rules apply).","solution":"def simulate_populations(n, initial_populations, m, rules, days): populations = initial_populations[:] for species_id, change_amount, interval in rules: num_changes = days // interval populations[species_id] += change_amount * num_changes return populations"},{"question":"Given a matrix of integers where each element represents the altitude of a point in an imaginary 2D grid, a water drop starting at any cell in the matrix will flow to a lower altitude cell adjacent to it (if such a cell exists). Two cells are adjacent if they are either horizontally or vertically neighboring. Your task is to find out the cells in which water can flow into the Pacific Ocean and also into the Atlantic Ocean. The Pacific Ocean touches the left and top edges of the matrix and the Atlantic Ocean touches the right and bottom edges of the matrix. Example 1: Input: matrix = [[1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4]] Output: [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] Explanation: From the cell (0, 4), water can flow to the Pacific Ocean by moving left and up. Also, water can flow to the Atlantic Ocean by moving right and down. Note that most of the cells marked as output can flow to both oceans. Example 2: Input: matrix = [[2, 1], [1, 2]] Output: [[0, 0], [0, 1], [1, 0], [1, 1]] Explanation: From the cell (0, 0), water can flow to the Pacific Ocean by moving left and down. Also, water can flow to the Atlantic Ocean by moving right and up. All cells can flow to both oceans. Your Task: You don\'t need to read input or print anything. Complete the function pacificAtlantic() that takes the matrix as input and returns a list of list of integers representing the coordinates of the cells (row index and column index) that can flow directly or indirectly to both oceans. Expected Time Complexity: O(m*n) Expected Auxiliary Space: O(m*n), where m is the row length and n is the column length. Constraints: 1 ≤ matrix.length, matrix[0].length ≤ 200 0 ≤ matrix[i][j] ≤ 10^5","solution":"def pacificAtlantic(matrix): if not matrix or not matrix[0]: return [] rows, cols = len(matrix), len(matrix[0]) pacific_reachable = [[False] * cols for _ in range(rows)] atlantic_reachable = [[False] * cols for _ in range(rows)] def dfs(r, c, reachable, prev_height): if (r < 0 or r >= rows or c < 0 or c >= cols or reachable[r][c] or matrix[r][c] < prev_height): return reachable[r][c] = True directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dr, dc in directions: new_r, new_c = r + dr, c + dc dfs(new_r, new_c, reachable, matrix[r][c]) for i in range(rows): dfs(i, 0, pacific_reachable, matrix[i][0]) dfs(i, cols - 1, atlantic_reachable, matrix[i][cols - 1]) for j in range(cols): dfs(0, j, pacific_reachable, matrix[0][j]) dfs(rows - 1, j, atlantic_reachable, matrix[rows - 1][j]) result = [] for r in range(rows): for c in range(cols): if pacific_reachable[r][c] and atlantic_reachable[r][c]: result.append([r, c]) return result"},{"question":"Define a function `balanced_brackets` that takes a string containing just the characters `\'(\'`, `\')\'`, `\'{\'`, `\'}\'`, `\'[\'`, and `\']\'`. The function should determine if the input string is a valid bracket sequence. A valid bracket sequence is defined as: - Open brackets must be closed by the same type of brackets. - Open brackets must be closed in the correct order. For example: - `balanced_brackets(\\"()[]{}\\")` should return `True`. - `balanced_brackets(\\"([)]\\")` should return `False`. - `balanced_brackets(\\"{[()]}\\")` should return `True`. Implement `balanced_brackets` to satisfy these constraints.","solution":"def balanced_brackets(s): Determine if the input string `s` contains a valid sequence of brackets. Args: s (str): The string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the bracket sequence is valid, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): # If it\'s an opening bracket, push to stack. stack.append(char) elif char in bracket_map.keys(): # If it\'s a closing bracket, check stack. if stack == [] or bracket_map[char] != stack.pop(): return False else: # Invalid character found return False # If stack is empty, all brackets matched. return stack == []"},{"question":"You are given a sequence of integers of length n. You can perform the following operation as many times as you like (possibly zero times): 1. Select two indices i and j (1 ≤ i < j ≤ n) such that the subarray starting at index i and ending at index j is non-decreasing. 2. Reverse that subarray. Your task is to determine the minimum number of operations required to make the whole array non-decreasing. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the sequence of integers. Output Print exactly one integer — the minimum number of operations required to make the sequence non-decreasing. Examples Input 5 3 1 4 1 5 Output 2 Input 6 9 8 7 6 5 4 Output 5 Input 3 1 2 3 Output 0 Note In the first example, you can perform 2 operations: reverse subarrays [2, 2] and [4, 4]. Alternatively, you can reverse subarray [1, 5]. In the second example, you need 5 operations since each adjacent pair is in decreasing order. In the third example, the array is already non-decreasing, so no operations are needed.","solution":"def min_operations_to_non_decreasing(n, sequence): Returns the minimum number of operations required to make the sequence non-decreasing. Parameters: n (int): Length of the sequence sequence (list): List of integers representing the sequence Returns: int: Minimum number of operations # Initialize the count of operations operations = 0 # Traverse through the sequence for i in range(1, n): if sequence[i] < sequence[i - 1]: operations += 1 # No cuts are needed if the array is already non-decreasing if operations == 0: return 0 return operations"},{"question":"John is organizing a series of workshops for a local tech conference. Each workshop has a specific start and end time. John wants to participate in as many workshops as possible, but the workshops may overlap. Your task is to write a program that helps John find the maximum number of non-overlapping workshops he can attend. Given a list of workshops with their start and end times, determine the maximum number of non-overlapping workshops John can attend. Input The input will contain multiple datasets. Each dataset starts with a single line containing an integer n (1 ≤ n ≤ 10^4), the number of workshops. This is followed by n lines, each containing two integers s (0 ≤ s < e ≤ 10^9) and e (0 ≤ s < e ≤ 10^9), representing the start and end times of the workshops, respectively. The input is terminated by a single line containing a zero. Output For each dataset, print the maximum number of non-overlapping workshops that John can attend. Example Input 3 1 3 2 4 3 5 4 1 2 3 4 0 6 5 7 4 1 4 4 5 5 6 4 10 0 Output 2 3 3","solution":"def max_non_overlapping_workshops(datasets): results = [] for dataset in datasets: n, workshops = dataset workshops.sort(key=lambda x: x[1]) # Sort by end times count = 0 last_end_time = 0 for s, e in workshops: if s >= last_end_time: count += 1 last_end_time = e results.append(count) return results def parse_input(data): datasets = [] lines = data.splitlines() i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break workshops = [] for _ in range(n): i += 1 s, e = map(int, lines[i].split()) workshops.append((s, e)) datasets.append((n, workshops)) i += 1 return datasets def conference_workshops(data): datasets = parse_input(data) return max_non_overlapping_workshops(datasets) # Example usage: # data = \\"3n1 3n2 4n3 5n4n1 2n3 4n0 6n5 7n4n1 4n4 5n5 6n4 10n0n\\" # print(conference_workshops(data)) # Output: [2, 3, 3]"},{"question":"Given a list of integers, your task is to determine the product of all the elements excluding any zeros in the list. If the list consists entirely of zeros or is empty, the function should return 0. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of one line of input, where each line contains space-separated integers representing the list of numbers. ------ Output Format ------ For each test case, output on a new line the product of the non-zero numbers in the list, or 0 if there are no non-zero numbers. ------ Constraints ------ 1 ≤ T ≤ 100 Each list will contain at most 100 integers, each integer is between -100 and 100 inclusive. ------ Sample Input 1 ------ 3 1 2 3 4 5 0 6 0 7 0 0 0 0 ------ Sample Output 1 ------ 120 42 0 ------ Explanation 1 ------ Test case 1: The product of all numbers in the list excluding zeros is 1×2×3×4×5 = 120. Test case 2: The product of all non-zero numbers in the list is 6 × 7 = 42. Test case 3: The list only contains zeros, therefore the output is 0.","solution":"def product_of_non_zeros(numbers): Given a list of integers, returns the product of all the non-zero elements. If the list consists entirely of zeros or is empty, returns 0. product = 1 non_zero_found = False for number in numbers: if number != 0: product *= number non_zero_found = True return product if non_zero_found else 0 def process_input(input_list): Process an input list as described in the problem statement. T = input_list[0] results = [] for i in range(1, T + 1): numbers = list(map(int, input_list[i].split())) results.append(product_of_non_zeros(numbers)) return results"},{"question":"You are given an array of integers and an integer target. Write a function that finds all unique pairs of integers in the array whose sum equals the target. The function should return these pairs as a list of tuples. Each tuple should contain the two integers that form a pair. Ensure that there are no duplicate pairs in the output list. Example: ```python arr = [1, 2, 3, 4, 3, 2, 5] target = 5 ``` Output: ```python [(1, 4), (2, 3)] ``` Note: - The order of the pairs in the output list does not matter. - If there are no pairs that meet the criteria, return an empty list.","solution":"def find_pairs_with_sum(arr, target): Finds all unique pairs of integers in the array whose sum equals the target. Args: arr (list of int): The list of integers. target (int): The target sum. Returns: list of tuple: A list of tuples where each tuple contains two integers that add up to the target sum. seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return list(pairs)"},{"question":"There are N houses in a row, numbered from 1 to N. Some houses have people living in them, while others are vacant. You are given an integer array `houses` of length N where `houses[i]` is 1 if there\'s a person living in the house i+1, and 0 if the house is vacant. You need to determine for each house, the distance to the nearest person. If a house is occupied, the distance to the nearest person is 0. Write a function `nearest_person(houses)` that takes a list of integers and returns an array of integers where the i-th integer is the distance from the i-th house to the nearest occupied house. # Constraints: * 1 ≤ N ≤ 10^5 * `houses[i]` is either 0 or 1 (0 ≤ i < N) * At least one house will be occupied. # Input * A single integer array `houses` representing the row of houses. # Output * An integer array of length N where each element is the minimum distance to the nearest occupied house. # Example Input ``` [0, 1, 0, 0, 1, 0, 0] ``` Output ``` [1, 0, 1, 1, 0, 1, 2] ``` Explanation For the first house, the nearest person is in the second house which is 1 house away. For the second house, there is a person living in it, so the distance is 0. For the third house, the nearest person is in the second house or the fifth house which are both 1 house away. Input ``` [1, 0, 0, 0, 1] ``` Output ``` [0, 1, 2, 1, 0] ``` Explanation For the first house, there is a person living in it, so the distance is 0. For the second house, the nearest person is in the first house which is 1 house away. For the third house, the nearest person is in the first house which is 2 houses away. (Note: Pay attention to edge cases, such as ends of the list or multiple consecutive vacant houses.)","solution":"def nearest_person(houses): N = len(houses) distances = [float(\'inf\')] * N # Forward pass to find distances to the nearest person to the left (or self) last_person_index = -1 for i in range(N): if houses[i] == 1: last_person_index = i if last_person_index != -1: distances[i] = i - last_person_index # Backward pass to find distances to the nearest person to the right last_person_index = -1 for i in range(N-1, -1, -1): if houses[i] == 1: last_person_index = i if last_person_index != -1: distances[i] = min(distances[i], last_person_index - i) return distances"},{"question":"Nikita is a devoted martial artist and participates in numerous tournaments. Each tournament follows a knockout format and is held in multiple stages. The first stage consists of fighters challenging one another, and the winner of each match progresses to the next stage. This pattern continues until the final stage, resulting in one fighter being declared the champion. Nikita has a unique way of selecting opponents for matches. If text{X} fighters are eligible for a match, he always pairs them in such a way that the difference in skill level between the opponents is minimized. If there are multiple ways to do this, he selects the pair where the first fighter\'s skill level is minimized. If there are still multiple ways, he chooses the match where the second fighter\'s skill level is also minimized. Given a list of fighters and their skill levels, determine the number of distinct pairs of fighters Nikita will create in the first round and the total number of pairs. If there are an odd number of fighters, the least skilled fighter will receive a bye to the next stage. Input Format The first line contains an integer N – the number of fighters. The second line contains N integer elements representing the skill levels of fighters. Constraints 1 leq N leq 2 times 10^5 1 leq text{skill}_i leq 10^9 Output Format Print the number of distinct pairs formed in the first round, followed by the total number of pairs. Sample Input 7 5 3 8 6 1 9 2 Sample Output 3 3 Explanation In this case, the sorted skill levels are [1, 2, 3, 5, 6, 8, 9]. The pairs formed in the first round would be: 1. (1, 2) 2. (3, 5) 3. (6, 8) The fighter with skill level 9 receives a bye. Therefore, the number of distinct pairs is 3. Also, the total number of pairs formed in the first round is 3.","solution":"def count_pairs(num_fighters, skill_levels): # Sort skill levels skill_levels.sort() pairs = [] index = 0 while index < num_fighters - 1: pairs.append((skill_levels[index], skill_levels[index + 1])) index += 2 # Return the count of pairs and the number of distinct pairs (unique pairs) return len(pairs), len(pairs)"},{"question":"In the small town of Onder, basketball is the most popular sport. Every year, the men’s basketball championship is held, and all the teams vie for the prestigious Victory Cup. You are tasked with writing a program to determine the winner of the championship. In the championship, teams are paired and play matches against each other. Each match ends in either a win or a loss; there are no ties. The tournament follows a knockout format, meaning that the losing team is immediately eliminated, and the winner moves on to the next round. The process repeats until only one team remains, which is declared the champion. To simplify, let\'s assume that the number of teams at the start is a power of 2 (i.e., 2, 4, 8, 16, ...). This guarantees that in each round, teams can be paired up without any team being left out. You are given the number of teams participating and a list of matches. Each match indicates the winner and the loser. You need to determine the team that wins the championship. -----Input----- The first line contains a single integer N, the number of teams participating in the championship. It is guaranteed that N is a power of 2. The next N-1 lines each contain two space-separated integers W_i and L_i, where: - W_i denotes the winner of the i-th match, - L_i denotes the loser of the i-th match. Each team is identified by a unique integer between 1 and N. -----Output----- Output one integer, the identifier of the team that wins the championship. -----Examples----- Sample Input 1: 4 1 2 3 4 1 3 Sample Output 1: 1 Sample Input 2: 8 1 2 3 4 5 6 7 8 1 3 5 7 1 5 Sample Output 2: 1","solution":"def find_champion(N, matches): losers = set() for winner, loser in matches: losers.add(loser) for i in range(1, N+1): if i not in losers: return i"},{"question":"Zara is an apprentice chef working in a busy kitchen. The kitchen receives a list of orders, and each order specifies a number of items that need to be prepared. Zara\'s task is to manage the preparation queue efficiently. She has designed a system to handle two types of operations: 1. \\"ADD i x\\" - This operation means that `x` items have been added to order `i`. If order `i` does not exist, it should be created with `x` items. 2. \\"REMOVE i y\\" - This operation means that `y` items have been successfully prepared and removed from order `i`. If order `i` does not have enough items to remove, it should discard whatever items it has. Zara needs a program to maintain and update the orders based on these operations and to provide the updated list of all orders after each operation. INPUT: - The first line contains an integer `O` which represents the number of operations. - The next `O` lines contain operations in the form of either \\"ADD i x\\" or \\"REMOVE i y\\". OUTPUT: - After each operation, output the list of current orders, containing only orders with a positive number of items. CONSTRAINTS: - 1 ≤ O ≤ 10^5 - 1 ≤ i ≤ 10^5 - 1 ≤ x, y ≤ 100 SAMPLE INPUT 5 ADD 1 10 ADD 2 5 REMOVE 1 3 ADD 3 8 REMOVE 2 5 SAMPLE OUTPUT {1: 10} {1: 10, 2: 5} {1: 7, 2: 5} {1: 7, 2: 5, 3: 8} {1: 7, 3: 8}","solution":"def manage_orders(operations): orders = {} results = [] for operation in operations: op_parts = operation.split() op_type = op_parts[0] i = int(op_parts[1]) x = int(op_parts[2]) if op_type == \\"ADD\\": if i in orders: orders[i] += x else: orders[i] = x elif op_type == \\"REMOVE\\": if i in orders: if orders[i] > x: orders[i] -= x else: orders.pop(i) results.append({k: v for k, v in orders.items() if v > 0}) return results"},{"question":"# Task Overview Given a string `s` containing just the characters `\'(\'`, `\')\'`, `\'{\'`, `\'}\'`, `\'[\'`, and `\']\'`, determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Return one of the following values: - `true` if the string is valid - `false` if the string is not valid # Usage Examples ``` Documentation: Kata.IsValidBrackets Method (String) Returns a boolean indicating whether the given input string containing brackets is valid or not. Syntax public static bool IsValidBrackets( string input ) Parameters input Type: System.String The input string containing brackets. Return Value Type: System.Boolean A boolean value representing whether the input string is valid. ``` # Examples ```csharp Kata.IsValidBrackets(\\"()\\"); // returns true Kata.IsValidBrackets(\\"()[]{}\\"); // returns true Kata.IsValidBrackets(\\"(]\\"); // returns false Kata.IsValidBrackets(\\"([)]\\"); // returns false Kata.IsValidBrackets(\\"{[]}\\"); // returns true ```","solution":"def is_valid_brackets(s): Determine if the input string of brackets is valid. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"A magician\'s hat is an enchanted object used in a coding competition. The hat creates a new integer sequence every day to serve as a magical test. The magician provides you with a sequence of integers a1, a2, ..., an (1 ≤ ai ≤ 109). Additionally, the hat gives you a magical integer m. The task is to compute a special transformation of this sequence. More specifically, for each integer in the sequence, calculate its new value by taking it to the power of m, then compute the sum of these transformed values modulo 109 + 7. The transformation ensures that only those who decipher this correctly can advance in the competition. Input The first line contains an integer n (1 ≤ n ≤ 105) — the length of the sequence. The second line contains n integers a1, a2, ..., an — the sequence provided by the hat. The third line contains an integer m (1 ≤ m ≤ 109). Output Print the sum of the transformed sequence values modulo 109 + 7. Example Input 3 1 2 3 2 Output 14 Note In the provided example, we first calculate 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 and the result is 14 modulo 109 + 7. Thus, the output is 14.","solution":"def magical_transformation(n, sequence, m): MOD = 10**9 + 7 transformed_sum = sum(pow(x, m, MOD) for x in sequence) % MOD return transformed_sum"},{"question":"Alex is a huge fan of board games. Recently, he started playing a game that involves moving a token across a grid board. The board is represented as a 2D array where each cell contains a positive integer representing the \'cost\' to move the token to that cell from the starting position at the top-left corner. The goal is to move the token to the bottom-right corner of the board with the minimum total cost. From any cell, Alex can only move right or downward to the adjacent cell. Given the cost grid, determine the minimum cost path from the top-left corner to the bottom-right corner of the board. Input The first input line contains two integers n and m (1 ≤ n, m ≤ 100), which are the dimensions of the board. The next n lines contain m integers each, representing the cost grid where each integer is between 1 and 100. Output Print the minimum cost to move the token from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3","solution":"def min_cost_to_reach_end(cost_grid): Returns the minimum cost to move the token from the top-left corner to the bottom-right corner of the board. n = len(cost_grid) m = len(cost_grid[0]) # Create a 2D dp array to store the minimum cost to reach each cell dp = [[0] * m for _ in range(n)] # Initialize the cost of the starting point dp[0][0] = cost_grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + cost_grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + cost_grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost_grid[i][j] # The minimum cost to reach the bottom-right corner is at dp[n-1][m-1] return dp[n-1][m-1]"},{"question":"A delivery company uses a fleet of drones to deliver packages. Each drone has a specified maximum distance it can fly on a single battery charge. The company wants to assign delivery jobs to drones such that each job is assigned to a drone that can complete the delivery without needing a battery recharge. There are m delivery drones, each with its maximum flying distance d_i (in kilometers), and n delivery jobs, each with a required delivery distance r_j (in kilometers). A drone can be assigned to a delivery job if its maximum flying distance is greater than or equal to the required delivery distance of that job. The company wants to know the maximum number of jobs that can be successfully assigned to drones without recharging. Input The first line contains two integers m (1 ≤ m ≤ 100,000) and n (1 ≤ n ≤ 100,000) — the number of drones and the number of delivery jobs, respectively. The next line contains m integers d_1, d_2, ..., d_m (1 ≤ d_i ≤ 10^9) — the maximum flying distances of the drones. The next line contains n integers r_1, r_2, ..., r_n (1 ≤ r_j ≤ 10^9) — the required delivery distances of the jobs. Output Output a single integer — the maximum number of delivery jobs that can be successfully assigned to drones. Examples Input 5 4 9 8 7 6 5 5 5 5 10 Output 3 Input 3 5 4 4 4 1 2 3 4 5 Output 3 Note In the first example, the jobs with delivery distances 5, 5, and 5 can be assigned to drones with maximum flying distances 5, 6, and 7 respectively. The job with delivery distance 10 cannot be delivered by any of the available drones. In the second example, the jobs with delivery distances 1, 2, 3, and 4 can be assigned to drones with maximum flying distances 4, 4, and 4 respectively. The job with delivery distance 5 cannot be delivered by any of the available drones. The maximum number of assignments is 3.","solution":"def max_jobs_assigned(drones, jobs): Returns the maximum number of delivery jobs that can be successfully assigned to drones. Parameters: drones (List[int]): List of maximum flying distances of the drones. jobs (List[int]): List of required delivery distances of the jobs. Returns: int: The maximum number of jobs that can be assigned to drones. # Sort drones and jobs to use a two-pointer technique drones.sort() jobs.sort() # Initialize pointers and counter i, j, count = 0, 0, 0 # Iterate through both lists while there are remaining drones and jobs while i < len(drones) and j < len(jobs): if drones[i] >= jobs[j]: count += 1 j += 1 i += 1 return count"},{"question":"Palindromic Substrings Count all distinct palindromic substrings in a given string. A substring is considered palindromic if it reads the same forward and backward. --- Input - A single string `s`. Output - An integer representing the number of distinct palindromic substrings. Example - Input: \\"abac\\" - Distinct palindromic substrings: \\"a\\", \\"b\\", \\"c\\", \\"aba\\" - Output: 4 - Input: \\"aaa\\" - Distinct palindromic substrings: \\"a\\", \\"aa\\", \\"aaa\\" - Output: 3 Notes - Palindromes are case-sensitive, meaning \\"A\\" and \\"a\\" are treated as different substrings. - The input string may be empty. - Consider using appropriate data structures to avoid counting duplicate substrings multiple times.","solution":"def count_distinct_palindromic_substrings(s): Counts all distinct palindromic substrings in a given string `s`. :param s: Input string. :return: Integer representing the number of distinct palindromic substrings. def is_palindrome(sub): return sub == sub[::-1] palindromic_substr_set = set() n = len(s) # Check all possible substrings for i in range(n): for j in range(i, n): substring = s[i:j+1] if is_palindrome(substring): palindromic_substr_set.add(substring) return len(palindromic_substr_set)"},{"question":"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent based on the classic mobile phone keypad layout. Note that 2 maps to \\"abc\\", 3 maps to \\"def\\", 4 maps to \\"ghi\\", 5 maps to \\"jkl\\", 6 maps to \\"mno\\", 7 maps to \\"pqrs\\", 8 maps to \\"tuv\\", and 9 maps to \\"wxyz\\". Example 1: Input: \\"23\\" Output: [\\"ad\\",\\"ae\\",\\"af\\",\\"bd\\",\\"be\\",\\"bf\\",\\"cd\\",\\"ce\\",\\"cf\\"] Example 2: Input: \\"78\\" Output: [\\"pt\\",\\"pu\\",\\"pv\\",\\"qt\\",\\"qu\\",\\"qv\\",\\"rt\\",\\"ru\\",\\"rv\\",\\"st\\",\\"su\\",\\"sv\\"] Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function letterCombinations() that takes a string (digits), and return a list of strings (combinations) containing all possible letter combinations that the number could represent. The driver code takes care of the printing. Expected Time Complexity: O(3^N * 4^M), where N is the number of digits in the string that maps to 3 letters and M is the number of digits in the string that maps to 4 letters. Expected Auxiliary Space: O(N). Constraints: 0 ≤ digits.length ≤ 4 digits[i] is a digit in the range [\'2\', \'9\'].","solution":"def letterCombinations(digits): Returns all possible letter combinations that the number could represent. if not digits: return [] phone_map = { \\"2\\": \\"abc\\", \\"3\\": \\"def\\", \\"4\\": \\"ghi\\", \\"5\\": \\"jkl\\", \\"6\\": \\"mno\\", \\"7\\": \\"pqrs\\", \\"8\\": \\"tuv\\", \\"9\\": \\"wxyz\\" } def backtrack(index, path): # If the path is complete if index == len(digits): combinations.append(\\"\\".join(path)) return possible_letters = phone_map[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"You have been appointed as a software developer at a security company. One of your first tasks is to implement a basic access control system for a secure facility. To gain access to the facility, an individual must input a security code. The security code is constructed based on the following rules: 1. The code consists of both uppercase and lowercase alphabets. 2. The code is a permutation of the string formed by interleaving two given input strings without changing the relative order of characters in either string. Given two input strings a and b, your task is to generate the security code in such a manner that it is a permutation of the string formed by interleaving a and b. You need to output one valid permutation. Note that there can be multiple valid permutations, you only need to output one of them. -----Input----- The first line contains two integers n and m (1 leq n, m leq 5000), representing the lengths of strings a and b respectively. The second line contains the string a of length n consisting of only uppercase alphabets. The third line contains the string b of length m consisting of only lowercase alphabets. -----Output----- Output a single string representing any valid permutation of the interleaved string of a and b. -----Examples----- Input 3 3 ABC def Output AdBeCf Input 2 3 XY abc Output XaYbc -----Note----- In the first test case, a = \\"ABC\\" and b = \\"def\\". One valid permutation of the interleaved string \\"AdBeCf\\". In the second test case, a = \\"XY\\" and b = \\"abc\\". One valid permutation of the interleaved string is \\"XaYbc\\".","solution":"def generate_security_code(n, m, a, b): Generate a security code which is a permutation of the string formed by interleaving a and b while preserving the relative order of characters in a and b. Args: n: Length of string a. m: Length of string b. a: String consisting of uppercase alphabets. b: String consisting of lowercase alphabets. Returns: A single valid permutation of the interleaved string formed by a and b. result = [] i, j = 0, 0 # Interleave characters from both strings while preserving order while i < n and j < m: result.append(a[i]) result.append(b[j]) i += 1 j += 1 # Append remaining characters from a, if any while i < n: result.append(a[i]) i += 1 # Append remaining characters from b, if any while j < m: result.append(b[j]) j += 1 return \'\'.join(result)"},{"question":"(Maximum Subarray Sum) You are given an array of integers, both positive and negative. Your task is to write a function that finds the contiguous subarray (containing at least one number) which has the largest sum and returns this sum. **Input** - An integer array `arr` of length `n` where `1 <= n <= 10^5`. - The elements of the array `arr` are in the range of `-10^4` to `10^4`. **Output** - An integer representing the maximum sum of the contiguous subarray. **Example** Input: ``` arr = [-2,1,-3,4,-1,2,1,-5,4] ``` Output: ``` 6 ``` Explanation: - The subarray [4, -1, 2, 1] has the largest sum = 6. **Note** - This is a standard \\"Maximum Subarray Sum\\" problem, also known as Kadane\'s Algorithm. Your function should have a time complexity of O(n).","solution":"def max_subarray_sum(arr): Returns the sum of the contiguous subarray with the largest sum. Uses Kadane\'s Algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Dr. Doof has created a maze to trap Chef. The maze consists of N corridors, each represented as a line segment in a 2D plane. Chef needs to navigate from his starting point to Dr. Doof\'s hideout without crossing any corridor. You need to tell Chef whether it\'s possible to reach the hideout without crossing any corridor. Formally, the 2D plane has N horizontal corridors, the i-th corridor represented by the line segment starting at (x_{i1}, y_i) and ending at (x_{i2}, y_i). Chef starts at (x_s, y_s) and Dr. Doof\'s hideout is at (x_d, y_d). Determine whether Chef can reach Dr. Doof\'s hideout without crossing any corridor. Note: - Chef and Dr. Doof\'s hideout\'s coordinates will not lie on any corridor. -----Input----- - The first line contains an integer T denoting the number of test cases. - The first line of each test case consists of a single integer N denoting the number of corridors. - The next N lines each contain three integers x_{i1}, x_{i2}, and y_i representing the start and end points of the i-th corridor. - The next line contains two space-separated integers x_s and y_s representing Chef\'s starting point. - The next line contains two space-separated integers x_d and y_d representing Dr. Doof\'s hideout. -----Output----- For each test case, print \\"YES\\" if Chef can reach Dr. Doof\'s hideout without crossing any corridor, otherwise print \\"NO\\". -----Constraints----- - 1 leq T leq 200 - 1 leq N leq 2 times 10^5 - 1 leq x_{i1}, x_{i2}, x_s, y_s, x_d, y_d leq 10^9 - 1 leq y_i leq 10^9 - x_{i1} < x_{i2} -----Sample Input----- 1 2 1 5 3 2 6 8 0 2 7 1 -----Sample Output----- YES -----Explanation----- In the sample input, Chef starts at (0, 2) and wants to reach (7, 1). The corridors are from (1, 3) to (5, 3) and from (2, 8) to (6, 8), both of which do not intersect the path from Chef\'s start to Dr. Doof\'s hideout. So, Chef can reach the hideout without crossing any corridors. Thus, the output is \\"YES\\".","solution":"def can_chef_reach_hideout(T, test_cases): results = [] for test_case in test_cases: N, corridors, start, destination = test_case x_s, y_s = start x_d, y_d = destination # Check if Chef and Doof are on the same side of all corridors path_clear = True for corridor in corridors: x_i1, x_i2, y_i = corridor # Check if y_s and y_d are on opposite sides of this corridor (indicating a crossing) if (y_s < y_i < y_d) or (y_d < y_i < y_s): path_clear = False break if path_clear: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Frank is designing a game and he needs your help in generating visual patterns for it. Specifically, he wants to create a pattern with numbers arranged in a triangular shape. The pattern should start with the number \'1\' at the top and increase sequentially by rows. The rows are centered to form a symmetrical triangle. The input is a single integer n which indicates the number of rows in the triangle. For example, if the input n is 4, the output should be: ``` 1 2 3 4 5 6 7 8 9 10 ``` Write a function `generatePattern(n)` that takes an integer n and returns the desired pattern as a list of strings, where each string represents a row in the triangle. Example 1: Input: 3 Output: [ \' 1\', \' 2 3\', \'4 5 6\' ] Example 2: Input: 5 Output: [ \' 1\', \' 2 3\', \' 4 5 6\', \' 7 8 9 10\', \'11 12 13 14 15\' ] Your Task: You don\'t need to read input or print anything. Complete the function `generatePattern(n)` which takes an integer n as input parameter and returns the desired pattern as a list of strings. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 100","solution":"def generatePattern(n): Generates a symmetrical triangle pattern of numbers increasing sequentially by rows. Parameters: n (int): Number of rows in the triangle pattern. Returns: list: List of strings representing each row of the triangle pattern. pattern = [] current_number = 1 for i in range(1, n + 1): # Calculate the padding for the current row to center-align the triangle padding = \' \' * (n - i) # Generate the current row with numbers row_numbers = \' \'.join(str(current_number + j) for j in range(i)) current_number += i # Combine padding and row numbers pattern.append(padding + row_numbers) return pattern"},{"question":"Consider a function `find_kth_largest` that receives an unsorted list of integers and an integer `k`. Your task is to implement the function that finds the `k`th largest element in an unsorted list in linear time complexity. # Input: - A list `nums` of integers - An integer `k` # Output: - An integer representing the `k`th largest element in the list # Constraints: - The list `nums` will have at least one integer and at most 100,000 integers. - All integers in the list will be between `-10^9` and `10^9`. - `1 <= k <= len(nums)` # Example: Example 1: Input: ```python nums = [3, 2, 1, 5, 6, 4] k = 2 ``` Output: ```python 5 ``` Example 2: Input: ```python nums = [3, 2, 3, 1, 2, 4, 5, 5, 6] k = 4 ``` Output: ```python 4 ``` # Note: - The function should not use built-in sorting functions. - Consider using techniques such as the Quickselect algorithm to achieve the desired time complexity. Implement the function with the following signature: ```python def find_kth_largest(nums: list, k: int) -> int: # Your code here ```","solution":"def find_kth_largest(nums, k): Finds the k-th largest element in an unsorted list. if not nums or k < 1 or k > len(nums): return None def partition(left, right, pivot_index): pivot_value = nums[pivot_index] nums[pivot_index], nums[right] = nums[right], nums[pivot_index] store_index = left for i in range(left, right): if nums[i] < pivot_value: nums[store_index], nums[i] = nums[i], nums[store_index] store_index += 1 nums[right], nums[store_index] = nums[store_index], nums[right] return store_index def quickselect(left, right, k_smallest): if left == right: return nums[left] pivot_index = left + (right - left) // 2 pivot_index = partition(left, right, pivot_index) if k_smallest == pivot_index: return nums[k_smallest] elif k_smallest < pivot_index: return quickselect(left, pivot_index - 1, k_smallest) else: return quickselect(pivot_index + 1, right, k_smallest) size = len(nums) return quickselect(0, size - 1, size - k)"},{"question":"The task is to detect loops in a linked list. A loop is present if a node points back to one of the previous nodes in the list. Write a function `hasLoop` that takes the head of a linked list and returns a boolean indicating whether the list contains a loop. You should implement a singly linked list node class as follows: ```python class ListNode: def __init__(self, x): self.val = x self.next = None ``` Additionally, implement the loop detection function: ```python def hasLoop(head: ListNode) -> bool: slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False ``` # Example: ```python # Create list nodes node1 = ListNode(1) node2 = ListNode(2) node3 = ListNode(3) node4 = ListNode(4) # Create a list: 1 -> 2 -> 3 -> 4 -> 2 (loop) node1.next = node2 node2.next = node3 node3.next = node4 node4.next = node2 print(hasLoop(node1)) # Output: True # Create a list: 1 -> 2 -> 3 -> 4 node4.next = None # Remove the loop print(hasLoop(node1)) # Output: False ``` # Constraints: - The number of nodes in the list will not exceed 1000. - Node values are non-negative integers. # Explanation: The function uses the Floyd\'s Cycle-Finding Algorithm (Tortoise and Hare method) to detect if there is a loop in the linked list. The `slow` pointer moves one step at a time, while the `fast` pointer moves two steps at a time. If there is a loop, `slow` and `fast` will eventually meet. If `fast` reaches the end of the list, it means there is no loop.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def hasLoop(head: ListNode) -> bool: slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"# Preface You have been hired by a company that specializes in developing navigation software for vehicles. The company wants to enhance its route optimization algorithms by considering the traffic conditions at different times of the day. # Problem The traffic conditions are given as a dictionary where keys represent the time of day in hours (0 to 23) and values indicate the average speed of travel in km/h during that time. Your task is to find the best time to start a journey from a given starting point to a destination that will result in the minimum travel time. The function should accept the distance in kilometers between the starting point and the destination and the dictionary with traffic conditions. It will return the best starting time and the corresponding minimum travel time. ```python def find_best_start_time(distance, traffic_conditions): # your code here distance = 120 traffic_conditions = {0: 50, 1: 52, 2: 48, 3: 55, ..., 22: 40, 23: 45} ``` The desired output should be a string in the following form: ``` \\"The best start time is at 3:00 with a travel time of 2.18 hours\\" ``` Note: - Assume that the travel speed remains constant for the entire hour. - Round travel time to 2 decimal places.","solution":"def find_best_start_time(distance, traffic_conditions): best_start_time = None min_travel_time = float(\'inf\') for hour, speed in traffic_conditions.items(): if speed > 0: # Ensuring speed is not zero to avoid division by zero travel_time = distance / speed if travel_time < min_travel_time: min_travel_time = travel_time best_start_time = hour min_travel_time = round(min_travel_time, 2) return f\\"The best start time is at {best_start_time}:00 with a travel time of {min_travel_time} hours\\" # Example usage distance = 120 traffic_conditions = { 0: 50, 1: 52, 2: 48, 3: 55, 4: 60, 5: 58, 6: 70, 7: 45, 8: 40, 9: 65, 10: 68, 11: 75, 12: 72, 13: 60, 14: 55, 15: 50, 16: 48, 17: 45, 18: 40, 19: 55, 20: 60, 21: 62, 22: 40, 23: 45 } print(find_best_start_time(distance, traffic_conditions))"},{"question":"Write a function to convert a given positive integer to its binary representation. Example If the input integer is `13`, the function should return `\'1101\'`. **Notes:** - You should not use any built-in functions to directly convert the number to binary. - The function should return the binary representation as a string. - If the input is `0`, the function should return `\'0\'`. - If the input is `null` or negative, return an empty string `\'\'`.","solution":"def int_to_binary(n): Converts a given positive integer n to its binary representation as a string. If the input is 0, returns \'0\'. If the input is null (None) or negative, returns an empty string \'\'. if n is None or n < 0: return \'\' if n == 0: return \'0\' binary = \'\' while n > 0: binary = str(n % 2) + binary n = n // 2 return binary"},{"question":"Given a string `s` and a list of strings `wordDict`, return the number of ways to partition `s` such that every substring of the partition is contained in `wordDict`. You may assume that the dictionary does not contain duplicate words. Example 1: Input: s = \\"catsanddog\\", wordDict = [\\"cat\\", \\"cats\\", \\"and\\", \\"sand\\", \\"dog\\"] Output: 2 Explanation: There are 2 ways to partition the string `catsanddog`: 1. \\"cats\\" + \\"and\\" + \\"dog\\" 2. \\"cat\\" + \\"sand\\" + \\"dog\\" Example 2: Input: s = \\"applepenapple\\", wordDict = [\\"apple\\", \\"pen\\"] Output: 1 Explanation: There is one way to partition the string `applepenapple`: 1. \\"apple\\" + \\"pen\\" + \\"apple\\" Example 3: Input: s = \\"catsandog\\", wordDict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: 0 Explanation: There is no way to partition the string `catsandog`. Constraints: - 1 <= s.length <= 300 - 1 <= wordDict.length <= 1000 - 1 <= wordDict[i].length <= 20 - `s` and `wordDict[i]` consist of only lowercase English letters.","solution":"def wordBreakCount(s, wordDict): Returns the number of ways to partition the string s such that every substring of the partition is contained in wordDict. wordSet = set(wordDict) n = len(s) dp = [0] * (n + 1) dp[0] = 1 # Base case: there\'s one way to partition an empty string for i in range(1, n + 1): for j in range(i): if s[j:i] in wordSet: dp[i] += dp[j] return dp[n]"},{"question":"Given a string of digits, generate all possible letter combinations that the number could represent. The mapping of digits to letters is as follows (just like on the telephone buttons): ``` 1: [] 2: [a, b, c] 3: [d, e, f] 4: [g, h, i] 5: [j, k, l] 6: [m, n, o] 7: [p, q, r, s] 8: [t, u, v] 9: [w, x, y, z] 0: [] ``` Note that 1 and 0 do not map to any letters. The input digits are expected to be valid, so they should not contain 1s or 0s. Write a function that takes a string of digits as input and returns a list of all possible letter combinations. For example: ``` letterCombinations(\\"23\\") => [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] letterCombinations(\\"567\\") => [\\"jmp\\", \\"jmq\\", \\"jmr\\", \\"jms\\", \\"jnp\\", \\"jnq\\", \\"jnr\\", \\"jns\\", \\"jop\\", \\"joq\\", \\"jor\\", \\"jos\\", \\"kmp\\", \\"kmq\\", \\"kmr\\", \\"kms\\", \\"knp\\", \\"knq\\", \\"knr\\", \\"kns\\", \\"kop\\", \\"koq\\", \\"kor\\", \\"kos\\", \\"lmp\\", \\"lmq\\", \\"lmr\\", \\"lms\\", \\"lnp\\", \\"lnq\\", \\"lnr\\", \\"lns\\", \\"lop\\", \\"loq\\", \\"lor\\", \\"los\\"] letterCombinations(\\"9\\") => [\\"w\\", \\"x\\", \\"y\\", \\"z\\"] ```","solution":"def letterCombinations(digits): Given a string of digits, returns all possible letter combinations. if not digits: return [] phone = { \\"2\\": [\\"a\\", \\"b\\", \\"c\\"], \\"3\\": [\\"d\\", \\"e\\", \\"f\\"], \\"4\\": [\\"g\\", \\"h\\", \\"i\\"], \\"5\\": [\\"j\\", \\"k\\", \\"l\\"], \\"6\\": [\\"m\\", \\"n\\", \\"o\\"], \\"7\\": [\\"p\\", \\"q\\", \\"r\\", \\"s\\"], \\"8\\": [\\"t\\", \\"u\\", \\"v\\"], \\"9\\": [\\"w\\", \\"x\\", \\"y\\", \\"z\\"] } def backtrack(combination, next_digits): # If there is no more digits to check if len(next_digits) == 0: # The combination is done output.append(combination) # If there are still digits to check else: # Iterate over all letters which map to the next available digit for letter in phone[next_digits[0]]: # Append the current letter to the combination # and proceed to the next digits backtrack(combination + letter, next_digits[1:]) output = [] backtrack(\\"\\", digits) return output"},{"question":"You are given a rectangular matrix filled with integers. You need to find the sum of all elements in the submatrix defined by its top-left and bottom-right corners. Your task is to write a function that, given the matrix and multiple submatrix queries, returns an array of sums, each representing the sum of the elements for one query. Your function should efficiently handle multiple queries using an optimal approach. Input - The first line contains three integers, n (1 ≤ n ≤ 1000), m (1 ≤ m ≤ 1000), and q (1 ≤ q ≤ 100000), where n and m are the number of rows and columns in the matrix, and q is the number of queries. - The next n lines contain m integers each, representing the elements of the matrix. - The next q lines each contain four integers, a, b, c, and d (1 ≤ a ≤ c ≤ n, 1 ≤ b ≤ d ≤ m), where (a, b) are the 1-based indices of the top-left corner and (c, d) are the 1-based indices of the bottom-right corner of the submatrix. Output - Output q lines, each containing a single integer: the sum of the elements in the specified submatrix for each query. Examples Input 3 3 2 1 2 3 4 5 6 7 8 9 1 1 2 2 2 2 3 3 Output 12 28 Explanation For the first query (1, 1, 2, 2), the submatrix is: 1 2 4 5 The sum is 1+2+4+5 = 12. For the second query (2, 2, 3, 3), the submatrix is: 5 6 8 9 The sum is 5+6+8+9 = 28.","solution":"def get_submatrix_sums(n, m, q, matrix, queries): # Step 1: Create the prefix sum matrix prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) def get_sum(a, b, c, d): # Convert to 0-based index a -= 1 b -= 1 c -= 1 d -= 1 return prefix_sum[c+1][d+1] - prefix_sum[a][d+1] - prefix_sum[c+1][b] + prefix_sum[a][b] # Step 2: Process each query sums = [] for query in queries: a, b, c, d = query sums.append(get_sum(a, b, c, d)) return sums"},{"question":"Alice and Bob are fond of puzzles, and while taking a break from their games, they stumbled upon a mathematical challenge. Given a number n, they are curious to find out how many pairs of positive integers (a, b) such that the greatest common divisor (gcd) of a and b is equal to their least common multiple (lcm) divided by their sum, i.e., gcd(a, b) = lcm(a, b) / (a + b). Since this problem sounds intriguing, they turn to you for help. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains one integer n, representing the value for which they want to find the pairs (a, b). Output: For each test case, output the number of pairs (a, b) satisfying the given condition for the integer n. Constraints: 1 ≤ T ≤ 1000 1 ≤ n ≤ 10^6 Sample Input: 3 1 2 4 Sample Output: 1 2 4 Explanation: For n = 1, the pair (a, b) that satisfies gcd(a, b) = lcm(a, b) / (a + b) is (1, 1). For n = 2: - Some pairs that satisfy the condition are (1, 2) and (2, 1). For n = 4: - Some pairs that satisfy the condition are (1, 4), (2, 2), and (4, 1).","solution":"def count_pairs(n): Given an integer n, return the count of pairs (a, b) such that gcd(a, b) = lcm(a, b) / (a + b). count = 0 for a in range(1, n + 1): for b in range(1, n + 1): if a == b: count += 1 else: lcm_ab = (a * b) // gcd(a, b) if lcm_ab == a + b: count += 1 return count def gcd(x, y): while y: x, y = y, x % y return x def number_of_pairs(test_cases): result = [] for n in test_cases: result.append(count_pairs(n)) return result # Complexity considerations: # The above code has a complexity of O(n^2) per test case, which can be significantly large for upper limit inputs. # Given the constraints, this might not be the most optimal solution, but it is a correct solution based on the implementation logic."},{"question":"A city has a network of N intersections connected by M bidirectional roads. Each road is represented by three integers u, v, and w, where u and v are intersections and w is the travel time from u to v. The city wants to install traffic monitoring sensors at some intersections. Each intersection can either have a sensor or not. - If an intersection has a sensor, it can monitor all roads directly connected to it. - If an intersection does not have a sensor, it cannot monitor any roads directly connected to it. The goal is to install the minimum number of sensors such that every road in the city is monitored by at least one sensor. Given the intersections and roads, determine the minimum number of sensors needed. -----Input----- The first line of input contains two integers N and M, the number of intersections and roads respectively (1 le N le 100, 0 le M le 1000). The next M lines contain three integers each u, v, and w (1 le u, v le N and 1 le w le 1000), describing a road from intersection u to intersection v with travel time w. Each pair of intersections (u, v) will appear at most once in the input. -----Output----- The output should contain a single integer, the minimum number of sensors needed to monitor all roads. -----Examples----- Sample Input 1: 4 3 1 2 2 2 3 3 3 4 4 Sample Output 1: 2 Sample Input 2: 6 5 1 2 5 1 3 5 2 4 6 3 5 7 4 6 8 Sample Output 2: 3","solution":"def minimum_sensors(N, M, roads): Determines the minimum number of sensors needed to monitor all roads in the city. if M == 0: return 0 # No roads to monitor if M is 0 adj_list = {i: [] for i in range(1, N + 1)} for u, v, w in roads: adj_list[u].append(v) adj_list[v].append(u) # Use a greedy approach similar to finding a vertex cover using a maximal matching monitored = set() sensors = set() for u in range(1, N + 1): if u not in monitored: for v in adj_list[u]: if v not in monitored: sensors.add(u) monitored.add(u) monitored.add(v) break return len(sensors)"},{"question":"Given a list of integers, write a function `find_missing(arr)` that finds the missing number in a sequence of consecutive numbers. The list will always have exactly one missing number and will contain no duplicates. The integers in the array will be in random order. Examples: `find_missing([3, 7, 1, 2, 8, 4, 5])` --> `6` `find_missing([5, 3, 1, 2])` --> `4` `find_missing([9, 6, 4, 5, 8, 7, 1, 2, 3])` --> `10` Special cases: The array will have at least 2 elements and at most 999,999 elements. If the nearby integers are out of the range of the array list, then the program should return an appropriate error message or handle accordingly.","solution":"def find_missing(arr): Returns the missing number in a sequence of consecutive integers. :param arr: List of integers with exactly one missing number :return: The missing integer n = len(arr) + 1 # The complete length if there were no missing number expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"Chef has a rectangular grid of size MxN filled with integers. He wants to know the minimal path sum from the top-left corner to the bottom-right corner of the grid. He can only move either down or right at any point in time. Help Chef find the minimal path sum. -----Input----- - The first line of input contains three integers T, M, and N - the number of test cases, the number of rows, and the number of columns in the grid, respectively. - For each test case, the next M lines each contain N integers representing the grid. -----Output----- For each test case, output the minimal path sum from the top-left corner to the bottom-right corner of the grid. -----Constraints----- - 1 leq T leq 50 - 1 leq M, N leq 100 - -1000 leq text{grid}[i][j] leq 1000 -----Example Input----- 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 -----Example Output----- 7 3 -----Explanation----- Example case 1: The minimal path is 1 → 3 → 1 → 1 → 1, which sums to 7. Example case 2: The minimal path is 1 → 1 → 1, which sums to 3.","solution":"def min_path_sum(grid): rows = len(grid) cols = len(grid[0]) # Create a 2D DP table to store the minimum path sum at each cell dp = [[0] * cols for _ in range(rows)] # Initialize the dp table with the grid values dp[0][0] = grid[0][0] # Fill the first row for j in range(1, cols): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, rows): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # Return the minimal path sum to bottom-right corner return dp[rows-1][cols-1] def solve(t, cases): results = [] for case in cases: M, N, grid = case result = min_path_sum(grid) results.append(result) return results"},{"question":"In a kingdom far away, the king has tasked his most brilliant programmers with solving an urgent issue. The kingdom consists of n castles connected by m roads. The king wants to ensure that for every pair of castles, there is no more nonsense due to multiple paths causing confusion among the kingdom\'s messengers. Therefore, all roads are originally built so that there is exactly one simple path between any two castles. However, the kingdom has a special requirement: each road must be weighted to represent the difficulty of traversing it. The king wants to find out the maximum difficulty of the most challenging simple path between certain pairs of castles. Given the castle connections and their difficulties, along with several queries, help the king by determining the maximum difficulty for the requested paths. # Input The first line contains two integers, n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) — the number of castles and roads, respectively. Each of the following m lines contains three space-separated integers ui, vi, di (1 ≤ ui, vi ≤ n, ui ≠ vi, 1 ≤ di ≤ 10^9) — the castles ui and vi are connected by a road with a difficulty of di. The next line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. The following q lines each contain two space-separated integers, ai, bi (1 ≤ ai, bi ≤ n) — asking for the maximum difficulty of the most challenging simple path between castles ai and bi. # Output For each query, print a single integer — the maximum difficulty of the most challenging simple path between the given pair of castles. # Example Input ``` 5 4 1 2 4 2 3 5 3 4 3 4 5 6 2 1 5 2 4 ``` Output ``` 6 5 ``` # Explanation In the first query, the simple path from castle 1 to castle 5 goes through the roads with difficulties [4 -> 5 -> 3 -> 6]. The maximum difficulty of any road on this path is 6. In the second query, the simple path from castle 2 to castle 4 goes through the roads with difficulties [5 -> 3]. The maximum difficulty of any road on this path is 5.","solution":"import sys from collections import defaultdict, deque def find_max_difficulty(n, m, roads, q, queries): # Build the adjacency list graph = defaultdict(list) for u, v, d in roads: graph[u].append((v, d)) graph[v].append((u, d)) def bfs_max_edge(u, v): # Use BFS to find the maximum difficulty in the path from u to v queue = deque([(u, -1)]) visited = {u} parent = {u: None} max_edge_in_path = {u: -1} while queue: node, max_edge = queue.popleft() if node == v: return max_edge_in_path[node] for neighbor, difficulty in graph[node]: if neighbor not in visited: visited.add(neighbor) parent[neighbor] = node max_edge_in_path[neighbor] = max(max_edge_in_path[node], difficulty) queue.append((neighbor, max_edge_in_path[neighbor])) return -1 results = [] for (a, b) in queries: results.append(bfs_max_edge(a, b)) return results"},{"question":"You are given a 2D grid where each cell initially either contains water or land. A cell is represented by a \'0\' if it contains water and a \'1\' if it contains land. The grid is completely surrounded by water, and all land cells are connected either vertically or horizontally. Your task is to find the number of distinct islands in the grid. An island is defined as a group of \'1\'s connected vertically or horizontally. # Input: The input consists of the following: - The first line contains two integers `m` and `n` indicating the number of rows and columns, respectively. - The next `m` lines each contain `n` characters representing the grid. Each character is either \'0\' or \'1\'. # Output: An integer representing the number of distinct islands. # Constraints: - 1 <= m, n <= 50 # Example: Input: 4 5 11000 11000 00100 00011 Output: 3 # Explanation: - The first island consists of the two \'1\'s in the first row and the two \'1\'s in the second row. - The second island consists of the single \'1\' in the third row. - The third island consists of the two \'1\'s in the fourth row. Hints: - Consider using Depth-First Search (DFS) or Breadth-First Search (BFS) to traverse and mark visited cells. - It might be useful to modify the grid or maintain a separate visited matrix to keep track of the cells that have already been checked.","solution":"def num_islands(grid): Returns the number of distinct islands in the grid. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) visited = [[False] * n for _ in range(m)] def dfs(i, j): if i < 0 or i >= m or j < 0 or j >= n or visited[i][j] or grid[i][j] == \'0\': return visited[i][j] = True # Explore all 4 possible directions dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) island_count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'1\' and not visited[i][j]: dfs(i, j) island_count += 1 return island_count # Helper function to build the grid from input values def build_grid(input_lines): rows = input_lines.strip().split(\'n\') grid = [list(row.strip()) for row in rows[1:]] return grid # Main function to handle the input and output def main(input_lines): grid = build_grid(input_lines) return num_islands(grid)"},{"question":"Write a function that takes a list of words and a width W, and formats the text such that each line has exactly W characters and is fully (left and right) justified. You should pack your words in a greedy manner; that is, pack as many words as you can in each line. Pad extra spaces \' \' when necessary so that each line has exactly W characters. Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will get more spaces than the slots on the right. For the last line of text, it should be left justified with no extra space inserted between words. Note: - You may assume that a single word\'s length is always less than or equal to W. - You may assume that W is greater than 0. Example 1: Input: words = [\\"This\\", \\"is\\", \\"an\\", \\"example\\", \\"of\\", \\"text\\", \\"justification.\\"], W = 16 Output: [ \\"This is an\\", \\"example of text\\", \\"justification. \\" ] Example 2: Input: words = [\\"What\\",\\"must\\",\\"be\\",\\"acknowledgment\\",\\"shall\\",\\"be\\"], W = 16 Output: [ \\"What must be\\", \\"acknowledgment \\", \\"shall be \\" ]","solution":"def full_justify(words, W): Justifies a list of words to have each line exactly W characters long. def justify_line(line_words, width, max_width): if len(line_words) == 1: return line_words[0] + \' \' * (max_width - len(line_words[0])) total_chars = sum(len(word) for word in line_words) total_spaces = max_width - total_chars spaces_between_words = total_spaces // (len(line_words) - 1) extra_spaces = total_spaces % (len(line_words) - 1) justified_line = line_words[0] for i in range(1, len(line_words)): spaces_to_add = spaces_between_words + (1 if i <= extra_spaces else 0) justified_line += \' \' * spaces_to_add + line_words[i] return justified_line result = [] current_line = [] current_length = 0 for word in words: if current_length + len(word) + len(current_line) > W: result.append(justify_line(current_line, current_length, W)) current_line = [] current_length = 0 current_line.append(word) current_length += len(word) # Handle the last line last_line = \' \'.join(current_line).ljust(W) result.append(last_line) return result"},{"question":"# Task **_Given_** a **_list of integers_**, *Find the smallest positive integer* that is **_not_** present in the list. # Conditions: * The **_list_** contains *only integers.* * The *list can be empty.* * The integers in the list can be negative, zero, or positive. # Notes * The **_input list_** can have duplicate integers. * The **_smallest positive integer_** is always greater than 0. # Input >> Output Examples ``` missingPositive([3, 4, -1, 1]) ==> return (2) ``` Explanation: The smallest positive integer not present in the list **_(3, 4, -1, 1)_** is **_(2)_**. ``` missingPositive([1, 2, 0]) ==> return (3) ``` Explanation: The smallest positive integer not present in the list **_(1, 2, 0)_** is **_(3)_**. ``` missingPositive([-3, -2, -1, 1, 2, 3, 4]) ==> return (5) ``` Explanation: The smallest positive integer not present in the list **_(-3, -2, -1, 1, 2, 3, 4)_** is **_(5)_**. ``` missingPositive([]) ==> return (1) ``` Explanation: The list is empty, so the smallest positive integer not present is **_(1)_**. ___","solution":"def missingPositive(nums): Returns the smallest positive integer that is not present in the list. nums_set = set(nums) # Using a set for O(1) average time complexity for lookup smallest_positive = 1 while smallest_positive in nums_set: smallest_positive += 1 return smallest_positive"},{"question":"In this Kata, you must find the sum of the elements in the array excluding the maximum and minimum elements. If there are multiple occurrences of the maximum or minimum elements, exclude each occurrence at most once. If the array is empty or contains less than three elements, return 0. For example: - For the array `[6, 2, 1, 8, 10]`, the sum excluding the minimum (`1`) and maximum (`10`) elements is `6 + 2 + 8 = 16`. - For the array `[1, 1, 11, 1, 1]`, the sum excluding the minimum (`1` - one occurrence) and maximum (`11`) elements is `1 + 1 + 1 = 3`. - For the array `[7]`, the result should be `0` since there are less than three elements. Good luck! Please also try [Remove all the outliers](https://www.codewars.com/kata/5b0d67d5db31a7a5b50000a5)","solution":"def sum_array(arr): Returns the sum of elements in the array excluding the maximum and minimum elements. If the array has fewer than three elements, return 0. if len(arr) < 3: return 0 max_element = max(arr) min_element = min(arr) arr.remove(max_element) arr.remove(min_element) return sum(arr)"},{"question":"Write a function that takes an integer as input and returns its representation in Roman numerals. The function should handle integers from 1 to 3999. The Roman numerals for 1 to 10 are as follows: - 1: \\"I\\" - 2: \\"II\\" - 3: \\"III\\" - 4: \\"IV\\" - 5: \\"V\\" - 6: \\"VI\\" - 7: \\"VII\\" - 8: \\"VIII\\" - 9: \\"IX\\" - 10: \\"X\\" Additional characters include: - 50: \\"L\\" - 100: \\"C\\" - 500: \\"D\\" - 1000: \\"M\\" Example ```python int_to_roman(3) # returns \\"III\\" int_to_roman(58) # returns \\"LVIII\\" int_to_roman(1994) # returns \\"MCMXCIV\\" ```","solution":"def int_to_roman(n): Converts an integer to a Roman numeral. Parameters: n (int): The integer to convert (should be between 1 and 3999 inclusive). Returns: str: The Roman numeral representation of the integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while n > 0: for _ in range(n // val[i]): roman_num += syb[i] n -= val[i] i += 1 return roman_num"},{"question":"John, a software engineer, is working on a project that involves optimizing a network of computers. Each computer in the network is represented by a unique node, and the connections between pairs of computers are represented by edges with an associated positive integer weight, which denotes the cost of maintaining that connection. John has been assigned the task of finding the minimum cost required to connect all the computers in the network such that they form a single connected component. Each computer is connected by either zero or one direct connection, and it\'s possible that not all computers are directly connected. The network can be represented as an undirected, weighted graph where each node is a computer, and each edge is a bidirectional connection between two computers. John must ensure that every computer is reachable from every other computer, either directly or indirectly. Your task is to help John by writing a program that takes the number of computers and a list of connections and returns the minimum cost to connect all the computers. -----Input----- The first line of input contains two integers n (1 leq n leq 1000), the number of computers, and m (0 leq m leq 10000), the number of connections. Each of the following m lines contains three integers u v w (1 leq u, v leq n, 1 leq w leq 1000), which represents that there is a bidirectional connection between computer u and computer v with cost w. -----Output----- If it is possible to connect all the computers, output a single integer, the minimum cost to connect all the computers. Otherwise, return the message \\"Impossible\\". -----Examples----- Sample Input 1: 4 5 1 2 1 2 3 4 3 4 3 4 1 2 1 3 3 Sample Output 1: 6 Sample Input 2: 3 1 1 2 3 Sample Output 2: Impossible","solution":"def minimum_cost_to_connect_computers(n, connections): Returns the minimum cost to connect all computers or \\"Impossible\\" if not all computers can be connected. Uses Kruskal\'s algorithm to find the Minimum Spanning Tree (MST). def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 connections.sort(key=lambda x: x[2]) # Sort connections based on weight parent = [i for i in range(n)] rank = [0] * n num_edges = 0 # Number of edges in MST total_cost = 0 for u, v, w in connections: u -= 1 # Convert to 0-based index v -= 1 # Convert to 0-based index root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) total_cost += w num_edges += 1 # Check if we have enough edges for a valid MST if num_edges == n - 1: return total_cost else: return \\"Impossible\\""},{"question":"**Problem Statement: Crop the Image** You are a developer at a company creating an image editing application. One of the features allows users to crop images to a rectangular region. The user specifies which sub-rectangle of the image they want to keep by specifying its top-left and bottom-right corners. Write a function that crops a given image based on the specified rectangular region and returns the cropped image matrix. -----Input----- The input consists of: 1. An image matrix of characters, where each character represents a pixel in the image. The matrix will have dimensions m x n (1 ≤ m, n ≤ 1000). 2. Four integers: r1, c1, r2, and c2 representing the top-left and bottom-right corners of the rectangular region (0 ≤ r1 ≤ r2 < m, 0 ≤ c1 ≤ c2 < n). -----Output----- Return the cropped image matrix that is extracted from the original image matrix using the specified rectangular region. Each row of the output matrix should be printed on a new line. -----Example----- Sample Input: [[\'a\', \'b\', \'c\', \'d\'], [\'e\', \'f\', \'g\', \'h\'], [\'i\', \'j\', \'k\', \'l\'], [\'m\', \'n\', \'o\', \'p\']] 1 1 2 2 Sample Output: fg jk Explanation: The 1,1 top-left corner and 2,2 bottom-right corner correspond to the region: [[\'f\', \'g\'], [\'j\', \'k\']]","solution":"def crop_image(image, r1, c1, r2, c2): Crops the image based on the specified top-left (r1, c1) and bottom-right (r2, c2) corners. Parameters: image (list of list of str): The image represented as a matrix of characters. r1 (int): The row index for the top-left corner. c1 (int): The column index for the top-left corner. r2 (int): The row index for the bottom-right corner. c2 (int): The column index for the bottom-right corner. Returns: list of list of str: The cropped image matrix. cropped_image = [row[c1:c2+1] for row in image[r1:r2+1]] return cropped_image"},{"question":"You are given a rectangular grid with n rows and m columns. Each cell of the grid either contains a number or is empty. Numbers in the grid form rectangles with their sides parallel to the coordinate axes. Each rectangle contains the same number in all its cells and each number forms exactly one rectangle in the grid. Your task is to find the total area covered by each number in the grid and return the results in ascending order of these numbers. -----Input----- The first line contains two integers n and m (1 le n, m le 100) — the number of rows and columns in the grid. The next n lines contain m integers each. Each integer is either -1, representing an empty cell, or a positive integer representing the number in a rectangle. -----Output----- For each unique number in the grid, print the number followed by the total area covered by this number, in ascending order of numbers. -----Example----- Input 4 5 -1 1 1 -1 -1 -1 1 1 2 2 -1 -1 -1 -1 2 3 3 -1 -1 2 Output 1 4 2 4 3 2 -----Note----- For the provided example, there are three distinct numbers: 1, 2, and 3. - The number 1 forms a 2x2 rectangle, covering an area of 4. - The number 2 forms two segments: (2x2) + (1x1), covering an area of 4. - The number 3 forms a 2x1 rectangle, covering an area of 2. All unique numbers along with the total area they cover are listed in ascending order of the numbers.","solution":"def calculate_areas(n, m, grid): Calculates the total area covered by each number in the grid and returns results in ascending order of these numbers. Params: - n (int): number of rows in the grid - m (int): number of columns in the grid - grid (list of list of int): the grid containing numbers or -1 Returns: - list of tuples: (number, total area), sorted by number in ascending order from collections import defaultdict area_map = defaultdict(int) for i in range(n): for j in range(m): if grid[i][j] != -1: area_map[grid[i][j]] += 1 return sorted(area_map.items()) # Example usage: # n, m = 4, 5 # grid = [ # [-1, 1, 1, -1, -1], # [-1, 1, 1, 2, 2], # [-1, -1, -1, -1, 2], # [3, 3, -1, -1, 2] # ] # print(calculate_areas(n, m, grid)) # Output: [(1, 4), (2, 4), (3, 2)]"},{"question":"Given an array `A` of integers, each element appears twice except for one element that appears exactly once. Write a function to find and return that single one-time occurring element. Example 1: Input: A = [4, 3, 2, 4, 1, 3, 2] Output: 1 Explanation: The element 1 occurs exactly once, while all others occur twice. Example 2: Input: A = [2, 2, 1, 1, 5] Output: 5 Explanation: The element 5 occurs exactly once, while all others occur twice. Your task: You don\'t need to read input or print anything. Your task is to complete the function `singleElement()` which takes the array `A` as input parameter and returns the single occurring element. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ Length of Array ≤ 10^6 -10^9 ≤ Element of Array ≤ 10^9","solution":"def singleElement(A): Returns the single one-time occurring element in array A where every element except one appears twice. result = 0 for num in A: result ^= num return result"},{"question":"You are given a rectangular matrix of size n x m filled with integers. Your task is to determine if there exists a path from the top-left corner of the matrix (0,0) to the bottom-right corner (n-1, m-1) such that the path moves only through cells containing even numbers. You can move to cells that are directly adjacent horizontally or vertically (no diagonal moves allowed). ----- Input ----- The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 1000) — the dimensions of the matrix. The next n lines contain m integers each, representing the elements of the matrix. ----- Output ----- Print \\"YES\\" if there exists such a path, otherwise print \\"NO\\". ----- Example ----- Input 3 3 2 4 6 3 4 2 2 2 4 Output YES Input 2 2 1 2 4 3 Output NO ----- Note ----- In the first example, one possible path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), where all visited numbers are even. In the second example, no path exists from the top-left to the bottom-right corner that only goes through cells with even numbers.","solution":"def can_reach_even_path(matrix): Determines if there exists a path from (0, 0) to (n-1, m-1) consisting only of even numbers in the given matrix. n = len(matrix) if n == 0: return \\"NO\\" m = len(matrix[0]) if matrix[0][0] % 2 != 0 or matrix[n-1][m-1] % 2 != 0: return \\"NO\\" from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and matrix[x][y] % 2 == 0 visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return \\"YES\\" for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"In a retail store, there is a sales system where multiple data packets are transmitted to record the sales transactions. A data packet is represented by a string containing lowercase alphabets only. Each data packet can be recorded multiple times due to system redundancy, but the final processed data should only have unique packets. Additionally, each unique packet must be sorted in alphabetical order before finalizing the processed list. Write a program to generate the final list of unique and sorted data packets from the given list. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of data packets received. Each of the next n lines contains a string s (1 ≤ |s| ≤ 100), representing a data packet. Output Print each unique data packet in sorted alphabetical order, each on a new line. The list should be sorted lexicographically. Examples Input 5 apple banana apple cherry banana Output aelpp aaabnn cehrry Input 3 orange grape orange Output aegpr aegnor Note In the first example, the input packets \\"apple\\" and \\"banana\\" appear twice, but they should be included only once in the final list. Each packet is then sorted alphabetically before printing.","solution":"def process_packets(n, packets): Processes the data packets to remove duplicates, sort each packet, and return them in lexicographical order. Parameters: n (int): Number of data packets. packets (list of str): List containing the data packets. Returns: list of str: Final list of processed unique sorted packets. # Use a set to store unique packets unique_packets = set(packets) # Sort each packet alphabetically sorted_packets = [\'\'.join(sorted(packet)) for packet in unique_packets] # Sort the list of sorted packets lexicographically sorted_packets.sort() return sorted_packets"},{"question":"**Lyric Analyzer** You are tasked with creating a function to analyze the lyrics of a song. Your function should be called `lyric_frequency()` and it should take a string representing the lyrics of a song. The function should return an array of objects, where each object contains a word from the lyrics and its corresponding frequency, sorted by frequency in descending order. Words with the same frequency should appear in the order they first appeared in the lyrics. The lyrics will be provided as a string, with words separated by spaces. All words will be in lower case and will only contain alphabetical characters. Write a function: ```python def lyric_frequency(lyrics: str) -> list: # Your code here ``` # Example ```python lyrics = \\"baby shark do do do do do do baby shark\\" lyric_frequency(lyrics) ``` # Output ```python [ {\\"word\\": \\"do\\", \\"frequency\\": 6}, {\\"word\\": \\"baby\\", \\"frequency\\": 2}, {\\"word\\": \\"shark\\", \\"frequency\\": 2} ] ```","solution":"def lyric_frequency(lyrics: str) -> list: from collections import Counter # Split the lyrics into words and count frequencies words = lyrics.split() word_count = Counter(words) # Sort by frequency (descending) and first appearance in lyrics (for tie cases) sorted_words = sorted(word_count.items(), key=lambda item: (-item[1], words.index(item[0]))) # Convert to the desired output format result = [{\\"word\\": word, \\"frequency\\": freq} for word, freq in sorted_words] return result"},{"question":"Polycarp is organizing a collection of figures for his mathematics class. Each figure has some sticks and some balls that make up its structure. In the collection, each figure has the same number of sticks and balls and can be dismantled. Specifically, the task is to find the maximum number of identical figures he can form using a given number of sticks and balls. A figure consists of exactly 2 sticks and 3 balls. Polycarp has a total of `s` sticks and `b` balls. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The descriptions of the input data sets follow. Each test case consists of a single line containing two integers: s and b (0 le s, b le 10^9). -----Output----- For each of the t test cases, print a single integer — the maximum number of identical figures Polycarp can form using the given sticks and balls. -----Examples----- Input 4 6 9 4 7 8 15 0 5 Output 3 2 4 0 -----Note----- In the first test case, Polycarp can form 3 figures since each figure requires 2 sticks and 3 balls, requiring 3 cdot 2 = 6 sticks and 3 cdot 3 = 9 balls. In the second test case, he can form 2 figures (4 sticks and 6 balls are needed), but will remain with 1 ball after forming the figures. In the third test case, he can form 4 figures (using all 8 sticks and 12 balls), remaining with 3 balls. In the fourth test case, Polycarp cannot form any figure as there are no sticks available.","solution":"def max_figures(t, test_cases): results = [] for s, b in test_cases: results.append(min(s // 2, b // 3)) return results"},{"question":"You\'re given a room consisting of several chandeliers. Each chandelier is designed in such a way that it must be supported by exactly two support beams. Chef wants to ensure that all chandeliers are properly supported. The room also has several support beams, each with a maximum weight capacity that it can support. Determining which chandeliers can be safely installed based on the given support beam capacities is imperative. -----Input----- The first line of input contains an integer M, the number of support beams. The second line contains M integers, representing the weight capacities of each support beam. The third line contains an integer N, the number of chandeliers. The next N lines each contain 3 integers: the first integer W represents the weight of the chandelier, and the following two integers S1 and S2 represent the indices of the support beams that are supposed to support the chandelier (1-based index). -----Output----- Output \\"YES\\" if all chandeliers can be safely installed under the given constraints. Otherwise, output \\"NO\\". -----Constraints----- - 1 ≤ M ≤ 105 - 1 ≤ N ≤ 105 - 1 ≤ Wi ≤ 104 for each chandelier i - 1 ≤ Si1, Si2 ≤ M for each chandelier - 1 ≤ capacity of each support beam ≤ 105 -----Example----- Input: 5 10 15 10 20 25 3 5 1 2 10 3 4 15 2 5 Output: YES -----Explanation----- Support beam 1 can support 10 units, beam 2 can support 15 units: - Chandelier 1 (weight 5) is supported by beams 1 and 2; both can support it. - Chandelier 2 (weight 10) is supported by beams 3 and 4; both can support it. - Chandelier 3 (weight 15) is supported by beams 2 and 5; both can support it.","solution":"def can_install_chandeliers(beam_capacities, chandeliers): Determines if all chandeliers can be safely installed under a given set of constraints. Args: beam_capacities (List[int]): A list of integers representing the weight capacities of each support beam. chandeliers (List[Tuple[int, int, int]]): A list of tuples. Each tuple contains three integers: - the weight of the chandelier - the index of the first support beam (1-based) - the index of the second support beam (1-based) Returns: str: \\"YES\\" if all chandeliers can be safely installed, otherwise \\"NO\\". for weight, s1, s2 in chandeliers: if beam_capacities[s1 - 1] < weight or beam_capacities[s2 - 1] < weight: return \\"NO\\" return \\"YES\\""},{"question":"Alyssa is trying to learn about number sequences, particularly arithmetic progressions. She wants to write a function that can determine if a given sequence of integers can be rearranged to form an arithmetic progression. An arithmetic progression (AP) is a sequence of numbers such that the difference between the consecutive terms is constant. For example, [3, 1, 2] can be rearranged to [1, 2, 3] which is an AP with a common difference of 1, whereas [1, 2, 4] cannot be rearranged into an AP. Alyssa would like you to help her write a function `can_form_ap` that will determine if the given sequence of integers can be rearranged to form an arithmetic progression. ------ Input ------ - The input starts with an integer T (1 ≤ T ≤ 100) which denotes the number of test cases. - Each test case contains an integer N (2 ≤ N ≤ 1000), the number of elements in the sequence. - This is followed by a line containing N space-separated integers which form the sequence. ------ Output ------ - For each test case, output \\"YES\\" if the sequence can be rearranged to form an arithmetic progression, and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ sequence[i] ≤ 10^9 for all elements in the sequence. ------ Sample Input ------ 3 3 3 1 2 4 2 4 1 3 4 1 2 4 5 ------ Sample Output ------ YES YES NO ------ Explanation ------ For the first sample case, the sequence [3, 1, 2] can be rearranged to [1, 2, 3] which forms an AP. For the second sample case, the sequence [2, 4, 1, 3] can be rearranged to [1, 2, 3, 4] which forms an AP. For the third sample case, the sequence [1, 2, 4, 5] cannot be rearranged into any AP because there is no constant difference between the numbers.","solution":"def can_form_ap(T, test_cases): Determines if each sequence of integers in the test cases can be rearranged to form an arithmetic progression. Parameters: - T : int : number of test cases - test_cases : list of tuples: each tuple contains (N, sequence) where N is the number of elements, and sequence is a list of the sequence elements. Returns: - list of str: list of \\"YES\\" or \\"NO\\" for each test case. results = [] for case in test_cases: N, seq = case seq.sort() diff = seq[1] - seq[0] is_ap = all(seq[i+1] - seq[i] == diff for i in range(1, N-1)) if is_ap: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given two non-empty strings, s1 and s2. Determine if s1 can be transformed into s2 using the following operations any number of times: 1. Insert a character 2. Remove a character 3. Replace a character Your task is to implement a function to check if s1 can be transformed into s2 with the minimum edit distance of exactly one. Return `True` if it is possible to transform s1 to s2 with exactly one edit operation, otherwise return `False`. Example 1: Input: s1 = \\"kitten\\", s2 = \\"sitten\\" Output: True Explanation: Replace \'k\' with \'s\'. Example 2: Input: s1 = \\"ball\\", s2 = \\"call\\" Output: True Explanation: Replace \'b\' with \'c\'. Example 3: Input: s1 = \\"apple\\", s2 = \\"aple\\" Output: True Explanation: Remove \'p\'. Example 4: Input: s1 = \\"horse\\", s2 = \\"ros\\" Output: False Explanation: At least two edit operations are required: remove \'h\', replace \'r\' with \'h\'. Constraints: - Both s1 and s2 consist of lowercase English letters. - 1 <= s1.length, s2.length <= 100","solution":"def is_one_edit_distance(s1, s2): Check if s1 can be transformed into s2 with exactly one edit operation. Args: s1 (str): First string. s2 (str): Second string. Returns: bool: True if s1 can be transformed into s2 with exactly one edit, False otherwise. len1, len2 = len(s1), len(s2) # If the length difference is more than 1, return False immediately. if abs(len1 - len2) > 1: return False # Variable to track if we have found a difference between the strings found_difference = False # Two pointers for both strings i, j = 0, 0 while i < len1 and j < len2: if s1[i] != s2[j]: # If we have already found a difference before if found_difference: return False found_difference = True # If lengths are different, increase the pointer of the longer string if len1 > len2: i += 1 elif len1 < len2: j += 1 else: i += 1 j += 1 else: i += 1 j += 1 # If we have traversed one string completely and there is one character left in the other return found_difference or len1 != len2"},{"question":"Given a string representing an encoded message where each letter is represented by its position in the alphabet (A=1, B=2, ..., Z=26), devise an algorithm to find the number of ways to decode it. Write a function that takes such an encoded string and returns the total number of ways it can be decoded. Example 1: Input: s = \\"12\\" Output: 2 Explanation: It can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). Example 2: Input: s = \\"226\\" Output: 3 Explanation: It can be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6). Your Task: You don\'t need to read input or print anything. Complete the function `numDecodings()` which takes a string `s` as input parameter and returns the total number of ways to decode it. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1<= s.length <= 100 The input string `s` contains only digits.","solution":"def numDecodings(s): if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0], dp[1] = 1, 1 for i in range(2, n + 1): first = int(s[i - 1:i]) second = int(s[i - 2:i]) if 1 <= first <= 9: dp[i] += dp[i - 1] if 10 <= second <= 26: dp[i] += dp[i - 2] return dp[n]"},{"question":"# Task Create an array that contains the Fibonacci sequence up to the `m`th number, then calculate the cumulative sum of all even numbers in that array. # Input/Output `[input]` integer `m` The number of Fibonacci sequence to generate where `1 <= m <= 40` and `m=1` results in the first Fibonacci number. [output] an integer The cumulative sum of all even numbers in the Fibonacci sequence up to the `m`th number. # Example For `m = 3`, the output should be 2. `\\"Fibonacci sequence: 0, 1, 1\\" --> Even numbers: 0 --> Sum: 0` For `m = 7`, the output should be 10. `\\"Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8\\" --> Even numbers: 0, 2, 8 --> Sum: 10` For `m = 10`, the output should be 44. `\\"Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34\\" --> Even numbers: 0, 2, 8, 34 --> Sum: 44`","solution":"def fibonacci_even_sum(m): Generates the Fibonacci sequence up to the m-th number and returns the cumulative sum of all even numbers in that sequence. # Initialize the first two Fibonacci numbers fib_sequence = [0, 1] # Generate Fibonacci sequence up to the m-th number for i in range(2, m): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) # Calculate the cumulative sum of even numbers in the generated sequence even_sum = sum(x for x in fib_sequence[:m] if x % 2 == 0) return even_sum"},{"question":"Help Alex! He needs to sort an array of custom objects! Medium Code Alex is working on a program where he needs to sort an array of custom objects based on a specific attribute. Each object represents a student and has the following properties: `name` (a string) and `grade` (an integer). Alex needs to sort the array of students in descending order according to their grades. In case two students have the same grade, their order should be determined by their names in ascending alphabetical order. Can you help him implement this sorting function? Write a function `sort_students(students)` that takes a list of student objects and returns the sorted list. Each student object will have the following structure: ```python class Student: def __init__(self, name, grade): self.name = name self.grade = grade ``` Examples: ```python students = [ Student(\\"Jake\\", 90), Student(\\"Amy\\", 85), Student(\\"Terry\\", 90), Student(\\"Rosa\\", 100) ] sorted_students = sort_students(students) for student in sorted_students: print(f\\"{student.name}: {student.grade}\\") ``` Expected Output: ``` Rosa: 100 Jake: 90 Terry: 90 Amy: 85 ```","solution":"class Student: def __init__(self, name, grade): self.name = name self.grade = grade def sort_students(students): Sorts the array of student objects in descending order according to their grades. In case of a tie, sorts by name in ascending alphabetical order. return sorted(students, key=lambda student: (-student.grade, student.name))"},{"question":"You are working on a project to simulate an inventory system for a small bookstore. In this system, you need to manage the books and their inventory in real-time. Your task is to implement functions to add books to the inventory, sell books, and check the available stock. Each book is identified by a unique ISBN number and has a title, author, and the number of copies available in stock. You are required to perform the following operations: 1. Add a new book to the inventory. 2. Sell a book, which decreases the available stock. 3. Check the available stock of a book by its ISBN. INPUT: The input starts with an integer N, indicating the number of operations. Each operation will be provided on a new line in one of the following formats: - \\"add ISBN Title Author Count\\" - to add a new book with the given ISBN, title, author, and count. - \\"sell ISBN Count\\" - to sell the specified count of the book with the given ISBN. - \\"check ISBN\\" - to check and print the available count of the book with the given ISBN. If a sell operation specifies a count greater than what is available, it should print \\"Insufficient stock\\". OUTPUT: For each \\"check\\" operation, output the available count of the book. For each add or sell operation, output nothing. SAMPLE INPUT 6 add 978-3-16-148410-0 \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" 10 add 978-0-14-028329-7 \\"To Kill a Mockingbird\\" \\"Harper Lee\\" 5 check 978-3-16-148410-0 sell 978-3-16-148410-0 4 check 978-3-16-148410-0 sell 978-0-14-028329-7 10 SAMPLE OUTPUT 10 6 Insufficient stock Note: The book titles and authors in the input will be enclosed in quotation marks, and ensure they are treated as single arguments when parsing the input.","solution":"class BookStore: def __init__(self): self.inventory = {} def add_book(self, isbn, title, author, count): if isbn not in self.inventory: self.inventory[isbn] = {\'title\': title, \'author\': author, \'count\': count} else: self.inventory[isbn][\'count\'] += count def sell_book(self, isbn, count): if isbn in self.inventory and self.inventory[isbn][\'count\'] >= count: self.inventory[isbn][\'count\'] -= count else: print(\\"Insufficient stock\\") def check_stock(self, isbn): if isbn in self.inventory: print(self.inventory[isbn][\'count\']) else: print(0)"},{"question":"Create a function that takes in a list of dictionaries and returns a new dictionary that consolidates the input data. Each dictionary in the list will have two keys: \\"name\\" and \\"value\\". The returned dictionary should group the values by the unique names, summing their values if the names are the same. If the input list is empty or null, return an empty dictionary. ```Python consolidate_data([ {\'name\': \'apple\', \'value\': 10}, {\'name\': \'banana\', \'value\': 5}, {\'name\': \'apple\', \'value\': 3} ]) # should return {\'apple\': 13, \'banana\': 5} consolidate_data([ {\'name\': \'car\', \'value\': 2}, {\'name\': \'bike\', \'value\': 1}, {\'name\': \'car\', \'value\': 8}, {\'name\': \'bike\', \'value\': 2} ]) # should return {\'car\': 10, \'bike\': 3} consolidate_data([]) # should return {} ``` ```Haskell consolidateData [ (\\"apple\\", 10), (\\"banana\\", 5), (\\"apple\\", 3) ] -- should return [(\\"apple\\", 13), (\\"banana\\", 5)] consolidateData [ (\\"car\\", 2), (\\"bike\\", 1), (\\"car\\", 8), (\\"bike\\", 2) ] -- should return [(\\"car\\", 10), (\\"bike\\", 3)] consolidateData [] -- should return [] ```","solution":"def consolidate_data(data): Consolidates a list of dictionaries by summing the values associated with the same name. Parameters: data (list): A list of dictionaries, each containing `name` and `value` keys. Returns: dict: A dictionary with names as keys and summed values as values. if data is None: return {} result = {} for item in data: name = item[\'name\'] value = item[\'value\'] if name in result: result[name] += value else: result[name] = value return result"},{"question":"In the country of Algorithmia, a popular sport is Codeball. Each Codeball game is played on a rectangular grid with `n` rows and `m` columns. The grid is represented by a matrix, where each cell contains a non-negative integer indicating the number of Codeballs present in that cell. A player can start at any cell in the grid and pick up Codeballs from that cell. From any cell `(i, j)`, the player can move to the cell `(i+1, j)` (down) or `(i, j+1)` (right), provided the new cell is within bounds of the grid. The objective is to determine the maximum number of Codeballs a player can collect starting from any cell `(1, 1)` to any cell `(n, m)`. Write a program to determine the maximum number of Codeballs that can be collected. Assume the movement is always either right or down. # Input - The first line contains two integers `n` and `m` — the number of rows and columns in the grid respectively (1 ≤ n, m ≤ 1000). - The next `n` lines contain `m` integers each, where the j-th integer in the i-th line is the number of Codeballs in the cell `(i, j)` (0 ≤ Codeballs ≤ 1000). # Output - Print a single integer — the maximum number of Codeballs that can be collected from `(1, 1)` to `(n, m)`. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 29 ``` # Explanation In the given example, the maximum number of Codeballs collected is given by the path `1 -> 2 -> 3 -> 6 -> 9`, which sums up to `1 + 2 + 3 + 6 + 9 = 21`. Another sequence can be `1 -> 4 -> 5 -> 6 -> 9`, which sums up to `1 + 4 + 5 + 6 + 9 = 25`, and similarly, the most optimal sequence `1 -> 4 -> 7 -> 8 -> 9` sums up to `1 + 4 + 7 + 8 + 9 = 29`. Thus, the maximum number of Codeballs that can be collected is `29`.","solution":"def max_codeballs(n, m, grid): # Initialize a DP table to store the maximum number of Codeballs up to each cell. dp = [[0] * m for _ in range(n)] # Initialize the starting cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The maximum number of Codeballs will be in the bottom-right cell of the dp table return dp[n - 1][m - 1]"},{"question":"You\'re given a list of integers representing temperatures recorded each day, and an integer K representing the number of continuous days you are interested in. The objective is to find the subarray of K continuous days that has the highest average temperature. Write a function that returns the highest average temperature possible for a subarray of K continuous days. # Example: Input: temperatures = [1, 12, -5, -6, 50, 3], K = 4 Output: 12.75 Explanation: The subarray with the highest average is [12, -5, -6, 50], and its average is (12 + (-5) + (-6) + 50) / 4 = 12.75. # Note: - 1 <= K <= temperatures.length <= 10^5 - -10^4 <= temperatures[i] <= 10^4","solution":"from typing import List def max_average_temperature(temperatures: List[int], K: int) -> float: Finds the subarray of K continuous days that has the highest average temperature. n = len(temperatures) if n < K: return 0 # Compute the sum of the first K elements current_sum = sum(temperatures[:K]) max_sum = current_sum # Use sliding window to find the maximum sum of any K elements for i in range(K, n): current_sum = current_sum - temperatures[i - K] + temperatures[i] if current_sum > max_sum: max_sum = current_sum return max_sum / K"},{"question":"Input The input is given from Standard Input in the following format: > N M K c_1 r_1 ldots r_M c_2 r_1 ldots r_M ： ： c_N r_1 ldots r_M Output - You have to print N lines. - The i-th line should contain the total number of rides taken by customer i (1 le i le N). Constraints * 3 le N, M le 100,000 * 1 le K le M * 1 le c_i le N * 1 le r_i le 10^{12} Input The input is given from Standard Input in the following format: > N M K c_1 r_{1,1} r_{1,2} ldots r_{1,M} textrm{dots} c_N : r_{N,1} : r_{N,2} : ldots : r_{N,M} Examples Input 3 4 2 1 3 2 1 4 2 5 6 3 1 3 2 4 6 1 Output 10 15 13 Input 5 3 1 4 7 8 9 2 12 4 2 5 3 6 7 1 4 8 2 3 10 1 5 Output 24 18 16 28 16 Input 4 5 3 2 1 2 3 4 5 1 3 4 5 6 1 4 5 6 7 8 9 3 2 4 1 3 5 Output 15 19 18 15","solution":"def total_rides(N, M, K, rides): Calculates the total number of rides taken by each customer :param N: Number of customers :param M: Number of rides per customer :param K: A parameter (not used in calculations) :param rides: List of lists with ride counts for each customer :return: List of total rides for each customer result = [sum(customer_rides[1:]) for customer_rides in rides] return result def parse_input(input_string): Parses the input string to extract N, M, K and rides matrix :param input_string: Input string in the specified format :return: Parsed N, M, K and rides matrix parts = list(map(int, input_string.split())) N, M, K = parts[0], parts[1], parts[2] rides = [] index = 3 for _ in range(N): customer_rides = parts[index:index + M + 1] rides.append(customer_rides) index += M + 1 return N, M, K, rides def main(input_string): N, M, K, rides = parse_input(input_string) totals = total_rides(N, M, K, rides) for total in totals: print(total)"},{"question":"You are given a special string problem to solve. Your task is to determine whether a given string is a \\"mirrored\\" string or not. A mirrored string is one where the string reads the same backward as forward. However, the twist here is that you need to ignore case-sensitivity and only consider alphabets (ignore spaces, numbers, and special characters). -----Input:----- - First-line will contain N, the number of test cases. - Each test case consists of a single line containing the string S. -----Output:----- For each test case, output \\"YES\\" if the string is mirrored or \\"NO\\" otherwise. -----Constraints----- - 1 leq N leq 100 - 1 leq |S| leq 1000 -----Sample Input:----- 3 A man a plan a canal Panama Was it a car or a cat I saw No lemon no melon -----Sample Output:----- YES YES YES -----EXPLANATION:----- The first example is a well-known palindrome phrase that reads the same backward and forward when case is ignored and spaces are removed. The second example also reads the same backward and forward when spaces and non-alphabetic characters are ignored. The third example is a direct palindrome with spaces removed.","solution":"def is_mirrored_string(S): Determine whether the given string S is a mirrored string, considering only alphabets and ignoring case. filtered_chars = [char.lower() for char in S if char.isalpha()] return filtered_chars == filtered_chars[::-1] def mirrored_strings(N, strings): Determine for each string in strings whether it is a mirrored string or not. Args: N : int : number of test cases strings : list of str : list of strings, each string corresponds to a test case Returns: list of str : list of \\"YES\\" or \\"NO\\" for each test case results = [] for S in strings: if is_mirrored_string(S): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers, find the length of the longest contiguous subarray that contains an equal number of positive and negative numbers. -----Constraints----- - The array will have at least one element and at most 10^5 elements. - Each element of the array will be between -10^6 and 10^6. -----Input----- The input is given from Standard Input in the following format: - The first line contains a single integer N, the length of the array. - The second line contains N space-separated integers, representing the elements of the array. -----Output----- Print a single integer, the length of the longest contiguous subarray that contains an equal number of positive and negative numbers. -----Sample Input----- 10 1 -1 2 -2 3 -3 4 4 5 -5 -----Sample Output----- 6 Explanation: The longest contiguous subarray that contains an equal number of positive and negative numbers is from index 0 to index 5, yielding an equal count of 3 positive and 3 negative numbers.","solution":"def longest_equal_pos_neg(nums): Returns the length of the longest contiguous subarray that contains an equal number of positive and negative numbers. n = len(nums) count_map = {0: -1} max_length = 0 count = 0 for i in range(n): if nums[i] > 0: count += 1 elif nums[i] < 0: count -= 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"Implement a function that finds the k-th smallest element in a given list of integers. You should solve this problem using the Quickselect algorithm. Input Format The first line contains an integer n, representing the number of elements in the list. The second line contains n space-separated integers, the elements of the list. The third line contains an integer k, indicating which smallest element to find. Output Format Print the k-th smallest element in the list. Constraints 1 <= n <= 10^5 1 <= list[i] <= 10^9 1 <= k <= n Sample Input 6 7 10 4 3 20 15 3 Sample Output 7 Explanation In the given list, the 3rd smallest element is 7.","solution":"def quickselect(arr, k): Return the k-th smallest element in the array using Quickselect. if len(arr) == 1: return arr[0] pivot = arr[len(arr) // 2] lows = [el for el in arr if el < pivot] highs = [el for el in arr if el > pivot] pivots = [el for el in arr if el == pivot] if k <= len(lows): return quickselect(lows, k) elif k > len(lows) + len(pivots): return quickselect(highs, k - len(lows) - len(pivots)) else: return pivots[0] def kth_smallest_element(n, arr, k): return quickselect(arr, k)"},{"question":"A mountain array is defined as an array where: 1. There is a peak element `A[i]` such that `A[0] < A[1] < ... < A[i]` for 0 <= j < i and `A[i] > A[i+1] > ... > A[n-1]` for i <= j < n. 2. The array has at least 3 elements. Given an integer array `nums`, your task is to find the length of the longest mountain. If there is no mountain in the provided array, return 0. ------ Input ------ Several test cases are given. The first line of the sample input contains an integer T - the number of test cases. Then, T lines follow. Each line contains an integer array `nums`, representing the elements of the array. Array elements are space-separated integers within the same line. ------ Output ------ For each test case, output a single integer - the length of the longest mountain in the array. ------ Constraints ------ 1≤T≤100 3 ≤ text{length of nums} ≤ 10^4 −10^4 ≤ text{nums[i]} ≤ 10^4 ----- Sample Input 1 ------ 2 2 1 4 7 3 2 5 2 2 2 ----- Sample Output 1 ------ 5 0","solution":"def longest_mountain(nums): Finds the length of the longest mountain in the array nums. n = len(nums) if n < 3: return 0 longest = 0 i = 1 # start from the second element while i < n - 1: if nums[i-1] < nums[i] > nums[i+1]: # peak condition # Find the left boundary of the mountain left = i while left > 0 and nums[left-1] < nums[left]: left -= 1 # Find the right boundary of the mountain right = i while right < n - 1 and nums[right] > nums[right + 1]: right += 1 # Calculate the length of the mountain longest = max(longest, right - left + 1) # Move the index to the end of the current mountain i = right else: i += 1 return longest def process_test_cases(test_cases): results = [] for nums in test_cases: results.append(longest_mountain(nums)) return results"},{"question":"Given an array of integers and an integer k, return true if all elements in the array are unique within any window of size k. The window of size k is defined as the sliding window that moves from the beginning to the end of the array, only covering k elements at a time. For example, given the array [1, 2, 3, 1] and k = 3, check windows [1, 2, 3] and [2, 3, 1]. The first window [1, 2, 3] contains unique elements, but the second window [2, 3, 1] does as well. Example 1: Input: nums = [1, 2, 3, 1], k = 3 Output: true Explanation: Both windows [1, 2, 3] and [2, 3, 1] contain unique elements. Example 2: Input: nums = [1, 2, 3, 1], k = 4 Output: false Explanation: The window [1, 2, 3, 1] does not contain unique elements because there are two 1s. Example 3: Input: nums = [1, 2, 3, 4], k = 2 Output: true Explanation: All windows of size 2 ([1, 2], [2, 3], [3, 4]) contain unique elements. Example 4: Input: nums = [1, 1, 1, 1], k = 1 Output: true Explanation: Each window of size 1 ([1], [1], [1], [1]) contains unique elements. Example 5: Input: nums = [], k = 1 Output: true Explanation: There are no elements in the array, so it\'s vacuously true. Constraints: 0 <= nums.length <= 20000 1 <= k <= nums.length","solution":"def all_unique_within_k(nums, k): Returns True if all elements in the array `nums` are unique within any window of size `k`. If a window of size `k` contains duplicate elements, returns False. for i in range(len(nums) - k + 1): window = nums[i:i + k] if len(window) != len(set(window)): return False return True"},{"question":"Maria is participating in a math competition. In one of the challenges, she is given an array of integers and asked to perform a series of operations to make all elements of the array equal. Maria can perform the following operation any number of times: - Choose any two elements in the array, say x and y. Then, replace one of these elements with any integer of Maria\'s choice. Maria wants to know the minimum number of operations required to make all elements of the array equal. Can you help her find the solution? -----Input----- The first line contains one integer t (1 leq t leq 100) — the number of test cases. Then follow the descriptions of each test case. The first line of each test case contains one integer n (1 leq n leq 1000) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (0 leq a_i leq 10^9), representing the array\'s elements. -----Output----- For each test case, print a single integer — the minimal number of operations required to make all elements of the array equal. -----Examples----- Input 2 4 1 2 3 4 5 4 4 4 4 5 Output 3 1 -----Note----- In the first test case, Maria can perform the following operations to make all elements equal to 4: 1. Replace 1 with 4 2. Replace 2 with 4 3. Replace 3 with 4 In the second test case, Maria can simply replace the 5 with 4, which requires just 1 operation.","solution":"def min_operations_to_equalize(t, test_cases): Given the number of test cases and for each test case the array of integers, returns the minimum number of operations needed to make all elements in each array equal. results = [] for case in test_cases: n, array = case most_common_element = max(set(array), key=array.count) min_ops = n - array.count(most_common_element) results.append(min_ops) return results # Example of how you can call the function # t = 2 # test_cases = [ # (4, [1, 2, 3, 4]), # (5, [4, 4, 4, 4, 5]) # ] # print(min_operations_to_equalize(t, test_cases)) # Output should be [3, 1]"},{"question":"Henry loves reading books and he has a huge collection of them. One day, he decided to organize his books on a shelf by their heights in non-decreasing order. When he presented his arranged shelf to his friend Jane, she wondered if the arrangement was correct. Henry is busy with more important tasks, so he asked you to help check if his arrangement is correct. Write a program that determines if the given sequence of book heights is sorted in non-decreasing order. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of books on the shelf. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the books in the order they are placed on the shelf. Output Print YES if the heights of the books are sorted in non-decreasing order, otherwise print NO. Examples Input 5 120 150 150 180 200 Output YES Input 3 210 150 190 Output NO","solution":"def is_shelf_sorted(n, heights): Checks if the list of book heights is sorted in non-decreasing order. Parameters: n (int): The number of books heights (list of int): The heights of the books Returns: str: \'YES\' if the list is sorted in non-decreasing order, otherwise \'NO\' for i in range(1, n): if heights[i] < heights[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"Simon has a collection of n integers that he likes to play around with. He wants to transform his collection in such a way that the product of all the integers becomes a perfect square. Simon can multiply any integer in the collection by any positive integer (including 1) as many times as he wants. However, he wants to do this in as few operations as possible. An operation consists of multiplying a single integer from the collection by a positive integer k > 1. Help Simon determine the minimum number of operations required to make the product of all integers in the collection a perfect square. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of testcases. The first line of each testcase contains a single integer n (1 le n le 10^5) — the number of integers in the collection. The second line of each testcase contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the integers in the collection. The sum of n over all testcases doesn\'t exceed 10^5. -----Output----- For each testcase, print a single integer — the minimum number of operations required to make the product of all integers in the collection a perfect square. -----Examples----- Input 3 3 2 2 3 2 5 7 4 4 9 25 18 Output 1 2 1 -----Explanation----- For the first testcase example: multiplying the integer 3 by itself will make the product of the new collection (2, 2, 3*3 = 9) a perfect square (4 * 9 = 2^2 * 3^2). For the second testcase example: multiplying the integers 5 and 7 by themselves will make the product of the new collection (5*5 = 25, 7*7 = 49) a perfect square (25 * 49 = 5^2 * 7^2). For the third testcase example: multiplying the integer 18 by 2 will result in the collection (4, 9, 25, 18*2 = 36), the product of which is a perfect square (4 * 9 * 25 * 36 = 2^2 * 3^2 * 2^2 * 3^2 * 5^2).","solution":"from collections import Counter from math import gcd from functools import reduce def prime_factors(n): Returns a Counter (hashmap) of prime factors of n with their powers. i = 2 factors = Counter() while i * i <= n: while (n % i) == 0: factors[i] += 1 n //= i i += 1 if n > 1: factors[n] += 1 return factors def min_operations_to_perfect_square(n, integers): combined_factors = Counter() for number in integers: factors = prime_factors(number) combined_factors.update(factors) # Calculate the number of operations needed operations = 0 for factor, count in combined_factors.items(): if count % 2 != 0: operations += 1 # Need one operation to make this factor\'s power even return operations def solve(test_cases): results = [] for n, integers in test_cases: results.append(min_operations_to_perfect_square(n, integers)) return results"},{"question":"Given an array of integers, you are to create a new array where each element at index `i` of the new array is the product of all the numbers in the original array except the one at `i`. For example, if the input array is `[1, 2, 3, 4]`, the output array should be `[24, 12, 8, 6]`. The solution should: 1. Not use division in any part of the code. 2. Have a time complexity of O(n). # Constraints - The number of elements in the input array will be between 2 and 100,000. - Each element in the array will be an integer between -100 and 100. # Input The input consists of a single line containing `n` integers, representing the elements of the array. # Output Output the resulting array, with each element separated by a space. # Sample Input ``` 1 2 3 4 ``` # Sample Output ``` 24 12 8 6 ``` # Explanation For the given input `[1, 2, 3, 4]`: - The product of all elements except the one at index 0 (1) is `2*3*4 = 24`. - The product of all elements except the one at index 1 (2) is `1*3*4 = 12`. - The product of all elements except the one at index 2 (3) is `1*2*4 = 8`. - The product of all elements except the one at index 3 (4) is `1*2*3 = 6`. Thus, the output array is `[24, 12, 8, 6]`. Implement a function that reads from standard input and writes to standard output.","solution":"def product_except_self(arr): Returns an array where each element at index i is the product of all the numbers in the original array except the one at i. n = len(arr) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n # Fill left_products such that left_products[i] contains product of all elements # to the left of arr[i] for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] # Fill right_products such that right_products[i] contains product of all elements # to the right of arr[i] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] # Calculate the result by multiplying left_products and right_products for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"In a far-off land, there exists an ancient Kingdom led by a wise King. The Kingdom is structured like a large interconnected tree, where each city is a node and roads between the cities are edges. In order to maintain optimal communication and administration, the King has assigned each city a unique value representing its importance. The Kingdom is currently facing a peculiar problem. The King wants to find the pair of cities (u, v) such that the sum of their importance values is maximized, while ensuring that these two cities are not directly connected to each other. You have been tasked with writing a program to assist the King in solving this problem. Input The input consists of multiple datasets. The first line of each dataset contains a single integer n (2 <= n <= 100), representing the number of cities in the Kingdom. The second line contains n integers, where the i-th integer represents the importance value of the i-th city (0 <= importance value <= 1000). The next n-1 lines each contain two integers a and b (1 <= a, b <= n), indicating that there is a road directly connecting city a and city b. The end of the input is represented by a line containing a single zero. Output For each dataset, output a single integer on a new line representing the maximum sum of importance values of any two cities that are not directly connected. Sample Input 4 1 2 3 4 1 2 1 3 1 4 0 5 10 20 30 40 50 1 2 1 3 3 4 3 5 0 Output for the Sample Input 7 90 Example Input 4 1 2 3 4 1 2 1 3 1 4 0 5 10 20 30 40 50 1 2 1 3 3 4 3 5 0 Output 7 90","solution":"def find_max_sum_of_non_adjacent_cities(n, importance, roads): from collections import defaultdict def are_adjacent(city1, city2): return city2 in adjacency_list[city1] or city1 in adjacency_list[city2] adjacency_list = defaultdict(set) for road in roads: a, b = road adjacency_list[a].add(b) adjacency_list[b].add(a) max_sum = 0 for i in range(1, n+1): for j in range(i+1, n+1): if not are_adjacent(i, j): current_sum = importance[i-1] + importance[j-1] if current_sum > max_sum: max_sum = current_sum return max_sum def process_input(input_data): datasets = input_data.strip().split(\'n0n\') results = [] for dataset in datasets: lines = dataset.strip().split(\'n\') n = int(lines[0]) importance = list(map(int, lines[1].split())) roads = [tuple(map(int, lines[i].split())) for i in range(2, 2 + n - 1)] result = find_max_sum_of_non_adjacent_cities(n, importance, roads) results.append(result) return results def main(): input_data = 4 1 2 3 4 1 2 1 3 1 4 0 5 10 20 30 40 50 1 2 1 3 3 4 3 5 0 results = process_input(input_data) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are organizing a team-building exercise that involves a number of puzzles. One of the puzzles is a game played on a 2D grid. The grid consists of various regions, each with a distinct height. The goal of the game is to find the maximum area of a region where the height is the same. The grid is represented as a matrix of integers, where each integer denotes the height of a cell. You need to write a program that, given the grid\'s dimensions and heights, computes the maximum area of a region with the same height. A region is defined as a group of connected cells with the same height. Cells are considered connected if they share a side (left, right, top, or bottom). Input The first input line contains two integers n and m (1 ≤ n, m ≤ 500) — the grid\'s dimensions. Each of the following n lines contains m integers each, representing the height of each cell in the grid. Output Print the single integer — the maximum area of a region with the same height. Examples Input 4 4 1 1 2 2 1 1 2 2 3 3 4 4 3 3 4 4 Output 4 Input 3 3 1 2 3 4 4 4 1 5 1 Output 3 Note In the first example, the largest region with the same height has an area of 4 (region with height 1 or height 2). In the second example, the largest region with the same height has an area of 3 (region with height 4).","solution":"def max_region_area(n, m, grid): Returns the maximum area of a region with the same height in the given grid. if n <= 0 or m <= 0 or not grid: return 0 def dfs(x, y, value, visited): if x < 0 or y < 0 or x >= n or y >= m or visited[x][y] or grid[x][y] != value: return 0 visited[x][y] = True area = 1 # Count the current cell # Visit all 4 neighboring cells area += dfs(x+1, y, value, visited) area += dfs(x-1, y, value, visited) area += dfs(x, y+1, value, visited) area += dfs(x, y-1, value, visited) return area visited = [[False] * m for _ in range(n)] max_area = 0 for i in range(n): for j in range(m): if not visited[i][j]: current_area = dfs(i, j, grid[i][j], visited) max_area = max(max_area, current_area) return max_area # Example Usage # Uncomment below lines to execute the function with example input. # n = 4 # m = 4 # grid = [ # [1, 1, 2, 2], # [1, 1, 2, 2], # [3, 3, 4, 4], # [3, 3, 4, 4] # ] # print(max_region_area(n, m, grid)) # Output: 4"},{"question":"A group of soldiers is about to engage in a battle, and they need your help to ensure effective communication. Each soldier has a rank denoted by an integer, which can be positive, negative, or zero. A soldier can communicate directly with another soldier if their ranks are adjacent numbers (for example, a soldier with rank 3 can directly communicate with soldiers of rank 2 and 4). You are given the ranks of soldiers as an array. Your task is to determine the minimum number of groups required such that every soldier in the same group can communicate directly or indirectly with every other soldier in that group. ------ Input ------ The first line contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains an integer n denoting the number of soldiers. The second line contains n space-separated integers where each integer corresponds to the rank of a soldier. ------ Output ------ For each test case, output a single integer representing the minimum number of groups required. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ n ≤ 10^5 -|10^9| ≤ text{rank} ≤ |10^9| ----- Sample Input 1 ------ 2 5 4 1 2 3 5 3 3 10 2 ----- Sample Output 1 ------ 1 2 ----- explanation 1 ------ In the first example, all soldiers\' ranks are connected directly or indirectly: 1 -> 2 -> 3 -> 4 -> 5, so only 1 group is needed. In the second example, the soldiers with ranks 3 and 2 can form one group, and the soldier with rank 10 needs to be in a separate group, making a total of 2 groups.","solution":"def min_groups(t, test_cases): This function returns the minimum number of groups required for each test case. results = [] for case in test_cases: n, ranks = case ranks.sort() groups = 1 for i in range(1, n): if ranks[i] > ranks[i-1] + 1: groups += 1 results.append(groups) return results"},{"question":"In a mysterious forest, there are n ancient enchanted trees aligned in a row. Each tree is imbued with a certain amount of mystical energy, which changes over time due to the forest\'s magic. Initially, the trees form a contiguous segment with non-decreasing mystical energy levels. An ancient ritual by the forest\'s guardian starts with the removal of some trees in specified positions, altering the energy balance in the forest. The guardian needs to determine the length of the longest contiguous segment of trees with non-decreasing energy levels after each removal operation. Your task is to help the guardian by writing a program that calculates the length of the longest non-decreasing contiguous segment of trees\' energy levels after each removal. -----Input----- The first line contains a single integer n (1 leq n leq 200000), the number of trees. The second line contains n integers e_1, e_2, ldots, e_n (1 leq e_i leq 10^9) representing the initial mystical energy levels of the trees in non-decreasing order. The third line contains a single integer m (1 leq m leq n), the number of removal operations. The fourth line contains m integers indicating the 1-based indices of the trees to be removed, one per operation. -----Output----- Output m integers, each representing the length of the longest non-decreasing contiguous segment of trees\' energy levels after each removal operation. -----Examples----- Sample Input: 5 1 2 2 3 5 2 2 3 Sample Output: 4 3 Explanation: 1. After removing the tree at position 2, the sequence becomes [1, 2, 3, 5]. The length of the longest non-decreasing contiguous segment is 4. 2. After removing the tree at position 3, the sequence becomes [1, 2, 5]. The length of the longest non-decreasing contiguous segment is 3.","solution":"def longest_non_decreasing_segment_after_removals(n, energies, m, removals): import bisect # Initial segment length storage longest_segments_lengths = [] # Set to keep track of removed positions. removed_positions = set() for remove in removals: # Convert 1-based removal index to 0-based remove_index = remove - 1 removed_positions.add(remove_index) # Current segment length counting variables max_length = 0 current_length = 0 # Iterate through the list and calculate the longest non-decreasing segment ignoring removed positions last_value = None for i in range(n): if i in removed_positions: continue if last_value is None or energies[i] >= last_value: current_length += 1 else: current_length = 1 last_value = energies[i] # Update the max_length found so far if current_length > max_length: max_length = current_length longest_segments_lengths.append(max_length) return longest_segments_lengths"},{"question":"Write a function that takes a string of words separated by spaces and returns a new string with each word reversed but with the words in the original order. For example, given the string \\"Hello World\\", the function should return \\"olleH dlroW\\". **Note:** The function should handle multiple spaces between words, but preserve the same spacing in the output.","solution":"def reverse_words_preserve_spaces(s): Reverses each word in the input string but preserves the spaces between words. Parameters: s (str): The input string containing words separated by spaces. Returns: str: A new string with each word reversed but spaces preserved. words = s.split(\' \') reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Surbhi loves playing with strings and she came up with an interesting problem related to string transformations. Given a string s1, Surbhi wants to transform it into another string s2 by performing a series of operations. In each operation, she can choose any character of the string and replace it with another character. The cost of replacing a character \'a\' with another character \'b\' is given by |a - b|, which is the absolute difference between the ASCII values of \'a\' and \'b\'. Surbhi needs your help to find the minimum cost required to transform the string s1 into s2. Input: The first line of the input contains a single integer n, the length of the strings. The second line contains the string s1 and the third line contains the string s2. It is guaranteed that both strings are of equal length. Output: Output a single integer, the minimum cost required to transform s1 into s2. Constraints: 1 ≤ n ≤ 1000 s1 and s2 contain only lowercase English letters. Example: Input: 4 abcd bcda Output: 3 Explanation: The minimum cost is achieved by the following transformations: \'a\' -> \'b\' (cost 1) \'b\' -> \'c\' (cost 1) \'c\' -> \'d\' (cost 1) \'d\' -> \'a\' (cost 3) So, the total minimum cost is 1 + 1 + 1 + 3 = 6.","solution":"def min_cost_to_transform(n, s1, s2): Returns the minimum cost required to transform string s1 into string s2. The cost of replacing a character \'a\' with another character \'b\' is given by the absolute difference between the ASCII values of \'a\' and \'b\'. :param n: Length of the strings s1 and s2 :param s1: Source string :param s2: Target string :return: Minimum transformation cost total_cost = 0 for char1, char2 in zip(s1, s2): total_cost += abs(ord(char1) - ord(char2)) return total_cost # Example usage: # n = 4 # s1 = \\"abcd\\" # s2 = \\"bcda\\" # print(min_cost_to_transform(n, s1, s2)) # Output should be 6"},{"question":"Linda loves gardening and maintains a beautiful flower garden at her home. She has several types of flowers, each with different blooming periods. She recorded the months when each type of flower blooms. Now, she wants to know in which month she has the maximum number of flower types blooming. Given an array of N intervals representing the blooming periods of different flower types (inclusive), find the month(s) that has/have the maximum number of different flower types in bloom. ------ Input Format ------ - The first line contains a single integer N, denoting the number of flower types Linda has. - Each of the next N lines contains two space-separated integers, A and B, denoting the starting month A and the ending month B of the blooming period of a particular type of flower. ------ Output Format ------ Output the month(s) with the maximum number of different flower types blooming in it. If there are multiple such months, output them in increasing order. ------ Constraints ------ 1 ≤ N ≤ 50 1 ≤ A ≤ B ≤ 12 ----- Sample Input 1 ------ 5 1 3 2 5 4 6 5 7 3 5 ----- Sample Output 1 ------ 5 ----- explanation 1 ------ Linda has 5 types of flowers with their respective blooming periods: 1. From month 1 to month 3. 2. From month 2 to month 5. 3. From month 4 to month 6. 4. From month 5 to month 7. 5. From month 3 to month 5. In month 5, four different types of flowers (flower types 2, 3, 4, and 5) are blooming, which is more than any other month. Hence, month 5 is the desired output.","solution":"def max_blooming_months(N, bloom_periods): blooming_counts = [0] * 12 for start, end in bloom_periods: for month in range(start, end + 1): blooming_counts[month - 1] += 1 max_blooms = max(blooming_counts) result_months = [i + 1 for i, count in enumerate(blooming_counts) if count == max_blooms] return result_months"},{"question":"Given a string `S` consisting of only characters \'a\', \'b\', and \'c\', you need to determine the length of the shortest substring containing at least one of each character. If no such substring exists, output `0`. Perform the following: - Read the string `S`. - Determine the length of the shortest substring that includes at least one \'a\', one \'b\', and one \'c\'. Output Output the length of the shortest substring that contains at least one \'a\', \'b\', and \'c\'. Also, output a line break at the end. If no such substring exists, output `0`. Example Input abac Output 3","solution":"def shortest_substring_length(s): Returns the length of the shortest substring that contains at least one \'a\', one \'b\', and one \'c\'. n = len(s) if n < 3: return 0 min_len = float(\'inf\') char_count = {\'a\': 0, \'b\': 0, \'c\': 0} start = 0 for end in range(n): if s[end] in char_count: char_count[s[end]] += 1 while all(char_count.values()): min_len = min(min_len, end - start + 1) if s[start] in char_count: char_count[s[start]] -= 1 start += 1 if min_len == float(\'inf\'): return 0 return min_len"},{"question":"A popular amusement park wants to create an attraction that simulates adventures around different themes. They decided to install multiple themed rooms connected by passages. Each room has a unique theme and is connected to other themed rooms in a specific pattern. The park management wants to analyze the connectivity of these rooms and ensure that every themed room is accessible from a given central room. Given a graph representation of the amusement park where rooms are vertices and passages between rooms are edges, you are required to determine the number of rooms that are accessible from a central room. Furthermore, for maintenance purposes, the management needs to know the minimum number of passages (edges) that would need to be traversed to visit each of these rooms from the central room. Input The input consists of: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000), where n is the number of rooms and m is the number of passages between rooms. - The second line contains an integer c (1 ≤ c ≤ n), the central room. - Each of the following m lines contains two integers u and v indicating a bidirectional passage between room u and room v (1 ≤ u, v ≤ n). Output Output two lines: - The first line contains the number of rooms that are accessible from the central room. - The second line contains n integers, where the i-th integer represents the minimum number of passages needed to reach room i from the central room. If a room is not accessible from the central room, output -1 for that room. Examples Input 5 4 1 1 2 2 3 3 4 4 5 Output 5 0 1 2 3 4 Input 5 3 3 1 2 3 4 4 5 Output 3 -1 -1 0 1 2 Input 4 2 2 1 2 3 4 Output 2 1 0 -1 -1","solution":"from collections import deque def amusement_park_adventure(n, m, c, passages): # Initialize the adjacency list graph = [[] for _ in range(n + 1)] # Populate the adjacency list with passages for u, v in passages: graph[u].append(v) graph[v].append(u) # Initialize distances and visited set distances = [-1] * (n + 1) distances[c] = 0 accessible_rooms = 0 # Initialize the BFS queue and enqueue the central room queue = deque([c]) while queue: room = queue.popleft() accessible_rooms += 1 for neighbor in graph[room]: if distances[neighbor] == -1: distances[neighbor] = distances[room] + 1 queue.append(neighbor) # Prepare the result reachable_rooms = distances.count(-1) - 1 # Subtract 1 for the zero-index position not used result_distances = distances[1:] # Skipping the zero-index as rooms are 1-indexed return accessible_rooms, result_distances"},{"question":"You are working on a string manipulation project. In this project, a key task is to take an input string and reorganize it such that each character is followed by its frequency in the original string. For example, given the input string \\"aabbccc\\", the output should be \\"a2b2c3\\". Write a function that takes a string as input and outputs a new string where each character is followed by the count of its occurrences in the original string. The characters in the output should appear in the order of their first appearance in the input string. # Input - A single string `s` (1 <= length of s <= 1000). The string will contain only lowercase alphabetical characters. # Output - A single string where each character is followed by its frequency of occurrence in the original string. # Constraints - The input string will consist only of lowercase English letters. - The length of the input string will be between 1 and 1000. # Example Input ``` aabbccc ``` Output ``` a2b2c3 ``` Input ``` banana ``` Output ``` b1a3n2 ``` # Note In the second example, \'a\' appears three times, \'n\' appears two times, and \'b\' appears once. The characters appear in the original order of their first appearance in the output string.","solution":"def character_frequency(s): Returns a new string where each character in the original string is followed by the count of its occurrences in the original string. The characters in the output appear in the order of their first appearance in the input string. :param s: Input string :type s: str :return: New string with each character followed by its frequency :rtype: str frequency = {} # Compute the frequency of each character for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 result = [] seen = set() # Construct the result string using the frequency dictionary for char in s: if char not in seen: result.append(f\\"{char}{frequency[char]}\\") seen.add(char) return \'\'.join(result)"},{"question":"In a factory, various machines produce different types of widgets. Each machine has a certain probability of breaking down on any given day, and if it breaks down, it produces zero widgets. Otherwise, each machine produces a random number of widgets uniformly distributed between a given minimum and maximum (inclusive). Given the probabilities of breakdown for each machine, along with their respective production ranges, you need to determine the expected total number of widgets produced by all machines on a given day. ----- Input ----- The first line of input contains an integer n (1 le n le 100), the number of machines. Then follows n lines, each containing the breakdown probability p_i (0 le p_i le 1), minimum production a_i (0 le a_i le 1000) and maximum production b_i (a_i le b_i le 1000) for the i-th machine. ----- Output ----- Output the expected total number of widgets produced by all machines, accurate up to an absolute error of 10^{-6}. ----- Examples ----- Sample Input: 2 0.5 1 3 0.1 2 4 Sample Output: 3.100000","solution":"def expected_widgets(n, machines): expected_total = 0.0 for p_i, a_i, b_i in machines: if a_i == b_i: expected_production = a_i # If min and max are same, it\'s a constant production else: expected_production = (a_i + b_i) / 2.0 # Expected production for uniform distribution expected_widgets_machine = (1 - p_i) * expected_production expected_total += expected_widgets_machine return expected_total"},{"question":"In a fantasy card game, each card has an attack value and a defense value. Players can combine any number of cards to form a hand with an overall attack and defense sum. The strength of a hand is determined by the absolute difference between the total attack and total defense values of the cards in that hand. Your task is to form a hand with the minimal strength. You need to choose at least one card, as an empty hand is not allowed. -----Input----- The first line contains the integer N (1 leq N leq 15), the number of available cards. Each of the next N lines contains two integers separated by a space, the attack value A (1 leq A leq 100) and the defense value D (1 leq D leq 100) of each card. -----Output----- Output the minimal possible strength of any hand. -----Examples----- Sample Input 1: 2 7 3 4 5 Sample Output 1: 1 Sample Input 2: 3 1 5 3 2 4 4 Sample Output 2: 0","solution":"def minimal_hand_strength(N, cards): Returns the minimal possible strength of any hand. from itertools import combinations min_strength = float(\'inf\') for i in range(1, N + 1): for comb in combinations(cards, i): total_attack = sum(card[0] for card in comb) total_defense = sum(card[1] for card in comb) min_strength = min(min_strength, abs(total_attack - total_defense)) return min_strength # Example usage N = 2 cards = [(7, 3), (4, 5)] print(minimal_hand_strength(N, cards)) # Output: 1"},{"question":"You\'re given a list of integers and a number K. For each subsequence of the list, you need to find the number of subsequences whose sum is equal to K and has the maximum possible length. -----Input----- The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9). The second line contains N integers (1 ≤ integers ≤ 10^6). -----Output----- Output one integer — the maximum number of such subsequences. -----Example----- Input 5 5 1 2 3 2 1 Output 2 -----Note----- For the given example, the longest subsequences whose sum equals 5 are: [2, 3] and [3, 2].","solution":"def count_max_length_subsequences(arr, K): max_len = 0 max_len_subseq_count = 0 n = len(arr) for start in range(n): current_sum = 0 for end in range(start, n): current_sum += arr[end] if current_sum == K: current_len = end - start + 1 if current_len > max_len: max_len = current_len max_len_subseq_count = 1 elif current_len == max_len: max_len_subseq_count += 1 return max_len_subseq_count"},{"question":"Write a function **\\"rotate_matrix\\"** that rotates a given NxN matrix 90 degrees clockwise. For example: ``` Input: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` The function should work for any NxN matrix. Ensure the original matrix is not modified. If you want to learn more about matrix rotation, refer to this link: https://en.wikipedia.org/wiki/Rotation_matrix","solution":"def rotate_matrix(matrix): Rotates a given NxN matrix 90 degrees clockwise and returns the new matrix. N = len(matrix) # Create a new matrix to store the result rotated_matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Consider the following problem: You need to manipulate an array using a custom sorting technique. You are given an array `arr` of `n` non-negative integers. The array should be sorted in the following way: 1. All even numbers should appear before all odd numbers. 2. Even numbers should be sorted in ascending order. 3. Odd numbers should be sorted in descending order. Write a function `customSort(arr)` that takes in an array of non-negative integers and returns the array sorted according to the above rules. -----Input Format:----- - The input consists of a single integer `n`, the number of elements in the array. - The next line contains `n` non-negative integers representing the elements of the array. -----Output Format:----- - Output a single line containing the sorted array according to the given rules. -----Constraints:----- - `1 ≤ n ≤ 10^5` - `0 ≤ arr[i] ≤ 10^9` -----Sample Input:----- 6 5 3 2 8 1 4 -----Sample Output:----- 2 4 8 5 3 1 -----Explanation:----- - The even numbers are [2, 8, 4] which after sorting in ascending order give [2, 4, 8]. - The odd numbers are [5, 3, 1] which after sorting in descending order give [5, 3, 1]. - Merging these results in the final sorted array [2, 4, 8, 5, 3, 1].","solution":"def customSort(arr): Sorts the array such that all even numbers come before all odd numbers. Even numbers are sorted in ascending order and odd numbers in descending order. evens = sorted([x for x in arr if x % 2 == 0]) odds = sorted([x for x in arr if x % 2 != 0], reverse=True) return evens + odds # Sample usage # n = 6 # arr = [5, 3, 2, 8, 1, 4] # sorted_arr = customSort(arr) # print(sorted_arr) # Output: [2, 4, 8, 5, 3, 1]"},{"question":"John has a list of activities that he needs to complete by the end of the day. Each activity has a start time and an end time. John wants to complete as many activities as possible, but no two activities can overlap in time. Design an algorithm that helps John determine the maximum number of non-overlapping activities he can attend. Input The first line contains the number of test cases T. Each test case contains a number of activities N. This is followed by N lines, each containing two integers, the start time Si and the end time Ei of the activity. Output You have to output the maximum number of non-overlapping activities John can attend for each test case. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 1 ≤ Si, Ei ≤ 10000 SAMPLE INPUT 2 3 1 3 2 4 3 5 4 1 2 2 3 3 4 4 5 SAMPLE OUTPUT 2 4 Explanation Explanation Test Case # 1: There are three activities with given start and end times. John can attend the first activity (1, 3) and the third activity (3, 5), or the second activity (2, 4) and the third activity (3, 5). Thus, he can attend a maximum of 2 activities. Test Case # 2: There are four activities with given start and end times. John can attend all the activities as they do not overlap in time. Thus, he can attend a maximum of 4 activities.","solution":"def max_non_overlapping_activities(test_cases): Determines the maximum number of non-overlapping activities John can attend for each test case. :param test_cases: List of test cases, where each test case is a list of tuples representing activities with start and end times. :return: List of integers representing the maximum number of non-overlapping activities for each test case. results = [] for activities in test_cases: # Sort activities by end time activities.sort(key=lambda x: x[1]) max_activities = 0 last_end_time = 0 for start, end in activities: if start >= last_end_time: max_activities += 1 last_end_time = end results.append(max_activities) return results def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 activities = [] for _ in range(N): Si, Ei = map(int, input_lines[index].split()) activities.append((Si, Ei)) index += 1 test_cases.append(activities) return test_cases def solution(input_data): test_cases = process_input(input_data) return max_non_overlapping_activities(test_cases)"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid contains a number, which represents the height of that point in the terrain. You can only move from one cell to another if the height of the destination cell is strictly greater than the current cell. You need to determine the length of the longest strictly increasing path in the grid. Input Format The first line of the input contains two integers N and M, the number of rows and columns in the grid. Each of the next N lines contains M space-separated integers representing the height values of the grid cells. Constraints 1 leq N, M leq 100 1 leq height value of grid cells leq 10^4 Output Format Print a single integer representing the length of the longest strictly increasing path in the grid. Sample Input 3 3 9 9 4 6 6 8 2 1 1 Sample Output 4 Explanation The longest strictly increasing path is either 1 rightarrow 2 rightarrow 6 rightarrow 9 or 1 rightarrow 6 rightarrow 8 rightarrow 9. The length of both paths is 4.","solution":"def longestIncreasingPath(matrix): if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) cache = [[-1] * cols for _ in range(rows)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def dfs(r, c): if cache[r][c] != -1: return cache[r][c] max_path = 1 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and matrix[nr][nc] > matrix[r][c]: max_path = max(max_path, 1 + dfs(nr, nc)) cache[r][c] = max_path return max_path return max(dfs(r, c) for r in range(rows) for c in range(cols)) # Function to handle input and output def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) matrix = [] index = 2 for i in range(N): row = list(map(int, data[index:index + M])) matrix.append(row) index += M print(longestIncreasingPath(matrix))"},{"question":"A function f(X) is said to be increasing if for all integers A and B where A < B, it holds that f(A) ≤ f(B). Given an array of N integers, determine whether the array forms an increasing sequence. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case begins with an integer N, the size of the array. - The next line of each test case contains N space-separated integers representing the elements of the array. ------ Output Format ------ For each test case, output on a new line, YES, if the array forms an increasing sequence and NO otherwise. You may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ text{array element} ≤ 1000 ----- Sample Input 1 ------ 3 4 1 3 3 7 5 3 5 7 6 9 3 2 2 2 ----- Sample Output 1 ------ YES NO YES ----- explanation 1 ------ Test case 1: The array elements form an increasing sequence [1, 3, 3, 7]. Since all adjacent elements satisfy the condition A[i] ≤ A[i + 1], the output is YES. Test case 2: The array elements do not form an increasing sequence [3, 5, 7, 6, 9] as the element 6 is less than the previous element 7, making the output NO. Test case 3: The array elements form a non-decreasing sequence [2, 2, 2] as all elements are equal, satisfying the condition A[i] ≤ A[i + 1], so the output is YES.","solution":"def is_increasing_sequence(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] array = test_cases[i][1] is_increasing = True for j in range(1, N): if array[j] < array[j - 1]: is_increasing = False break if is_increasing: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"The ancient city of Soma has a peculiar habit of numbering its streets. Each street is labeled with a unique positive integer. Due to recent city planning efforts, the council has decided to rearrange the streets into a new sequence based on a specific pattern. The council provides you with a list of integers representing the initial street numbers in reverse order. Your task is to convert this list back to the original sequence, sort it in ascending order, and compute the sum of the differences between consecutive street numbers. For example, if the streets are provided in reverse order like this: S = [5, 3, 1, 2, 4] The original sequence would be: [4, 2, 1, 3, 5] Sorted in ascending order: [1, 2, 3, 4, 5] Differences between consecutive street numbers: (2-1) + (3-2) + (4-3) + (5-4) = 1 + 1 + 1 + 1 = 4 The city council is interested in the result of this sum. Input constraints: - The first line of input contains an integer — M (1 ≤ M ≤ 100). - The second line contains M integers — the reversed street numbers (1 ≤ Si ≤ 10^4 for each Si). Output constraints: - Print the required sum of differences between consecutive street numbers. SAMPLE INPUT 5 5 3 1 2 4 SAMPLE OUTPUT 4 Explanation The initial reversed list is [5, 3, 1, 2, 4]. Reversing it gives [4, 2, 1, 3, 5]. Sorting it in ascending order gives [1, 2, 3, 4, 5]. The sum of differences between consecutive sorted numbers is (2-1) + (3-2) + (4-3) + (5-4) = 1 + 1 + 1 + 1 which is 4.","solution":"def sum_of_differences(street_numbers): Given a list of reversed street numbers, returns the sum of the differences between consecutive numbers after sorting the list in ascending order. original_sequence = street_numbers[::-1] original_sequence.sort() sum_differences = sum((original_sequence[i] - original_sequence[i - 1] for i in range(1, len(original_sequence)))) return sum_differences"},{"question":"You are given a string s consisting of only lowercase English letters. You need to determine the minimum number of characters you need to delete from the string to make sure that every letter appears at most twice. Example 1: Input: s = \\"aaabbbc\\" Output: 2 Explanation: We can delete two \'a\' characters to make the string \\"aabbbc\\". Example 2: Input: s = \\"abc\\" Output: 0 Explanation: All letters already appear at most twice, so no deletions are needed. Your Task: You do not need to read input or print anything. Your Task is to complete the function minDeletions() which takes the string s as input parameter and returns the minimum number of deletions required. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(s) ≤ 1000 s contains only lowercase English letters.","solution":"def minDeletions(s): Returns the minimum number of deletions required to make sure every letter appears at most twice. from collections import Counter freq = Counter(s) deletions = 0 for count in freq.values(): if count > 2: deletions += count - 2 return deletions"},{"question":"Jay has been given a pattern of numbers where each subsequent number is the sum of all previous numbers in the series plus 1. Given an integer N, you need to find the first N terms of this series. The series starts with 1. Example 1: Input: N = 6 Output: 1 2 4 8 16 32 Explanation: For N = 6, the series is: 1 + 1 = 2, 1 + 2 + 1 = 4, 1 + 2 + 4 + 1 = 8, 1 + 2 + 4 + 8 + 1 = 16, 1 + 2 + 4 + 8 + 16 + 1 = 32, So, the series is 1 2 4 8 16 32 Example 2: Input: N = 4 Output: 1 2 4 8 Explanation: For N = 4, the series is: 1 + 1 = 2, 1 + 2 + 1 = 4, 1 + 2 + 4 + 1 = 8, So, the series is 1 2 4 8 Your Task: You don’t need to read input or print anything. Your task is to complete the function generateSeries() which takes an integer N as input parameter and returns a list of the first N terms of the series. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 100","solution":"def generateSeries(N): Generates a series where each subsequent number is the sum of all previous numbers in the series plus 1, starting with 1, for the first N terms. Parameters: - N (int): The number of terms to generate in the series. Returns: - list: The first N terms of the series. series = [1] for _ in range(1, N): next_term = sum(series) + 1 series.append(next_term) return series"},{"question":"Reverse Words in a String Write a function that takes a string as input and returns the string with the words reversed. A word is defined as a sequence of non-space characters. The input string may contain leading or trailing spaces, and multiple spaces between words. The returned string should only have a single space separating the words and no leading or trailing spaces. # Examples: ```python reverse_words(\\" the sky is blue \\") == \\"blue is sky the\\" reverse_words(\\"hello world\\") == \\"world hello\\" reverse_words(\\"a good example\\") == \\"example good a\\" reverse_words(\\" Bob Loves Alice \\") == \\"Alice Loves Bob\\" reverse_words(\\"Alice does not even like bob\\") == \\"bob like even not does Alice\\" ``` # Constraints: * The input string can contain any printable characters. * The input string will not contain any non-printable characters (e.g., no escape sequences, no control characters). # Notes: - Your solution should not use split(), join() methods directly. - Think about how you can achieve this using two-pointer technique or in-place reversal.","solution":"def reverse_words(s): Reverses the words in the given input string s. Leading or trailing spaces and multiple spaces between words are reduced to a single space separating words. def trim_spaces(s): n = len(s) left, right = 0, n - 1 # remove leading spaces while left <= right and s[left] == \' \': left += 1 # remove trailing spaces while left <= right and s[right] == \' \': right -= 1 # reduce multiple spaces to single space output = [] while left <= right: if s[left] != \' \': output.append(s[left]) elif output[-1] != \' \': output.append(s[left]) left += 1 return \'\'.join(output) def reverse(l, left, right): while left < right: l[left], l[right] = l[right], l[left] left, right = left + 1, right - 1 # Convert string to list of characters for in-place manipulation l = list(trim_spaces(s)) n = len(l) # Step 1: Reverse the entire string reverse(l, 0, n - 1) # Step 2: Reverse each word in the reversed string start = 0 for i in range(n + 1): if i == n or l[i] == \' \': reverse(l, start, i - 1) start = i + 1 return \'\'.join(l)"},{"question":"Sarah is working on an application dealing with encoded messages. Each message is encoded in such a way that every letter of the alphabet is replaced with an integer as follows: A rightarrow 1, B rightarrow 2, ..., Z rightarrow 26. She now needs to decode these encoded messages. However, each message can be decoded in multiple ways due to the different possible combinations of characters that map to the same sequence of integers. For example, \\"121\\" can be decoded as \\"ABA\\" (1-2-1), \\"AU\\" (1-21), or \\"LA\\" (12-1). Sarah wants to write a program that computes the total number of ways to decode a given encoded message string of digits. -----Input----- The input consists of a single string s of length between 1 and 100, inclusive. The string contains only digits and is guaranteed to represent a valid encoding. -----Output----- Output a single integer, the number of ways to decode the given string. -----Examples----- Sample Input 1: \\"12\\" Sample Output 1: 2 Sample Input 2: \\"226\\" Sample Output 2: 3 Sample Input 3: \\"0\\" Sample Output 3: 0","solution":"def num_decodings(s): Given an encoded message string s, returns the total number of ways to decode it. if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 if s[0] != \'0\' else 0 for i in range(2, n + 1): one_digit = int(s[i - 1:i]) two_digit = int(s[i - 2:i]) if 1 <= one_digit <= 9: dp[i] += dp[i - 1] if 10 <= two_digit <= 26: dp[i] += dp[i - 2] return dp[n]"},{"question":"You are given a rectangular grid of cells with R rows and C columns. Each cell initially contains either a 0 or a 1. You can perform the following operation any number of times: - Select a sub-grid of size 2x2 with all its cells containing 1, and turn all four 1\'s into 0\'s. Your task is to determine the maximum number of 1\'s that can be turned into 0\'s by performing the operation any number of times. Constraints * 1 ≤ R, C ≤ 1000 Input The input is given from Standard Input in the following format: R C grid Output Print the maximum number of 1\'s that can be turned into 0\'s. Examples Input 3 3 1 1 1 1 1 1 1 1 1 Output 4 Input 4 5 1 0 1 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 Output 8 Input 2 2 1 1 1 1 Output 4 Input 3 3 1 0 1 0 1 0 1 0 1 Output 0","solution":"def max_ones_to_zeros(R, C, grid): Returns the maximum number of 1\'s that can be turned into 0\'s by selecting sub-grids of size 2x2 with all its cells containing 1 and turning all four 1\'s into 0\'s. max_ones = 0 for i in range(R-1): for j in range(C-1): if grid[i][j] == 1 and grid[i+1][j] == 1 and grid[i][j+1] == 1 and grid[i+1][j+1] == 1: max_ones += 4 grid[i][j] = 0 grid[i+1][j] = 0 grid[i][j+1] = 0 grid[i+1][j+1] = 0 return max_ones"},{"question":"Given an integer array `arr` and an integer `target`, determine the number of distinct pairs `(i, j)` such that `arr[i] + arr[j] == target` and `i < j`. Constraints * 1 ≤ arr.length ≤ 2,000 * -10^6 ≤ arr[i], target ≤ 10^6 Input The first line contains an integer `n`, the length of the array. The second line contains `n` integers separated by spaces representing the array elements. The third line contains the integer `target`. Output Print the number of distinct pairs `(i, j)` such that `arr[i] + arr[j] == target` and `i < j`. Example Input 5 1 5 7 -1 5 6 Output 3","solution":"def count_distinct_pairs(arr, target): Returns the number of distinct pairs (i, j) such that arr[i] + arr[j] == target and i < j. count = 0 seen = {} for num in arr: diff = target - num if diff in seen: count += seen[diff] if num in seen: seen[num] += 1 else: seen[num] = 1 return count"},{"question":"Your task is to design a game ranking algorithm that efficiently handles game results and ranks the players accordingly. You are given a list of games played between different players. Each game result indicates the winner and the loser of the game. The objective is to rank the players such that if player A has defeated player B, then A is ranked higher than B. If multiple rankings are possible, any valid ranking will be accepted. Input The first line contains two integers n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of players and the number of games played. The next m lines each describe a game result with two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing that player u has defeated player v. Output Output a permutation of integers from 1 to n representing the players\' ranks. If multiple valid rankings exist, print any valid ranking. Example Input 5 4 1 2 3 2 4 2 5 3 Output 1 5 3 4 2 Note In the given example, player 1 defeated player 2, players 3 and 4 also defeated player 2, and player 5 defeated player 3. Thus, players 1, 3, 4, and 5 are all ranked higher than player 2. The ranking ensures that player 1 is higher than player 2, and player 5 is higher than player 3. Multiple valid rankings can be possible for the given input, so any one of them is acceptable.","solution":"import sys from collections import defaultdict, deque def rank_players(n, m, matches): incoming_edges = {i: 0 for i in range(1, n + 1)} adj_list = defaultdict(list) for winner, loser in matches: adj_list[winner].append(loser) incoming_edges[loser] += 1 zero_indegree = deque([node for node in incoming_edges if incoming_edges[node] == 0]) ranking = [] while zero_indegree: current = zero_indegree.popleft() ranking.append(current) for neighbor in adj_list[current]: incoming_edges[neighbor] -= 1 if incoming_edges[neighbor] == 0: zero_indegree.append(neighbor) if len(ranking) == n: return ranking else: return [] # Example function to handle input def main(): input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) matches = [(int(data[i]), int(data[i+1])) for i in range(2, len(data), 2)] ranking = rank_players(n, m, matches) if ranking: print(\\" \\".join(map(str, ranking))) else: print(\\"IMPOSSIBLE\\")"},{"question":"You are given a grid of size n x m where each cell is either walkable (represented by \'.\') or blocked (represented by \'#\'). You start at the top-left cell (0, 0) and want to reach the bottom-right cell (n-1, m-1). You can move in four possible directions: up, down, left, or right. However, you can only move to a cell if it is walkable. Your task is to determine the minimum number of moves required to reach the bottom-right cell from the top-left cell. If it is not possible to reach the bottom-right cell, return -1. Write a function `min_moves(grid)` that takes a list of strings representing the grid and returns the minimum number of moves required to reach the bottom-right cell. Each string in the list represents a row of the grid. -----Input----- The function takes a single argument: - `grid`: a list of n strings, each of length m, representing the grid (1 ≤ n, m ≤ 1000). -----Output----- The function should return an integer: - The minimum number of moves required to reach the bottom-right cell. If it is not possible to reach the bottom-right cell, return -1. -----Examples----- Input grid = [ \\"...#\\", \\".#..\\", \\"...#\\", \\"#...\\" ] Output 6 Input grid = [ \\"....\\", \\"....\\", \\"\\", \\"....\\" ] Output -1 -----Note----- In the first example, there is a path from the top-left cell to the bottom-right cell with a minimum of 6 moves. In the second example, it is impossible to reach the bottom-right cell as the path is blocked by a row of obstacles. Here is a Python function signature for your reference: ```python def min_moves(grid: list[str]) -> int: # Your implementation here ```","solution":"from collections import deque def min_moves(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) moves = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == (n-1, m-1): return moves for d in directions: nx, ny = x + d[0], y + d[1] if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) moves += 1 return -1"},{"question":"Chef is experimenting with a new dish that requires several ingredients. Chef has **N** different ingredients, and he plans to prepare several dishes using these ingredients. However, for a dish to be considered interesting, it must use exactly **K** different ingredients. Additionally, Chef wants to ensure that no two dishes are exactly the same in terms of the combination of ingredients used. The goal for Chef is to find the maximum number of interesting dishes that can be prepared using the given constraints. Implement a function to determine the maximum number of interesting dishes Chef can prepare with the given ingredients and constraints. -----INPUT FORMAT----- - First line of each test case file contain **T**, denoting total number of test cases. - Each of the next **T** lines contains two integers **N** and **K**, denoting the number of different ingredients and the number of ingredients per dish respectively. -----OUTPUT FORMAT----- - For each test case print a line with an integer denoting the maximum number of interesting dishes possible. -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 50 - 1 leq K leq N -----Sample Input----- 3 5 3 6 2 4 4 -----Sample Output----- 10 15 1 -----Explanation----- In the first test case, with 5 ingredients and each dish requiring 3 ingredients, the total number of combinations is ( C(5, 3) = 10 ). In the second test case, with 6 ingredients and each dish requiring 2 ingredients, the total number of combinations is ( C(6, 2) = 15 ). In the third test case, with 4 ingredients and each dish requiring 4 ingredients, there is only 1 way to select all ingredients, which is all 4 together - thus 1 combination.","solution":"from math import comb def max_interesting_dishes(T, test_cases): Given the number of test cases T and a list of tuples containing (N, K) for each test case, this function returns a list of integers with the maximum number of interesting dishes for each test case. results = [] for n, k in test_cases: # Calculate the number of combinations C(N, K) results.append(comb(n, k)) return results"},{"question":"Our spaceship captain, Nova, is tasked with a challenging mission to transport a convoy of cargo ships from Earth to Mars. Along the way, the convoy will encounter numerous obstacles that require carefully coordinated maneuvering. Each maneuver changes the positions of the ships in the convoy. Nova has the initial order of ships and a series of m instructions detailing specific maneuvers. Each maneuver consists of swapping the positions of two ships at given indices. Help Nova by providing the final order of the ships after all maneuvers are completed. ----- Input: The first line contains an integer t (1 ≤ t ≤ 10), the number of test cases. For each test case: - The first line contains an integer n (2 ≤ n ≤ 100), representing the number of ships. - The second line contains n distinct strings (length of each of them doesn\'t exceed 10), representing the initial order of the ships. - The third line contains an integer m (1 ≤ m ≤ 1000), the number of maneuvers. - Each of the next m lines contains two integers a and b (0 ≤ a, b < n), representing the indices of the ships to be swapped. ----- Output: For each test case, print a line containing n strings, the final order of the ships after all maneuvers. ----- Examples: Input 2 5 shipA shipB shipC shipD shipE 3 0 1 2 4 1 3 4 alpha beta gamma delta epsilon 2 0 4 2 3 Output shipB shipD shipE shipA shipC epsilon beta gamma delta alpha (Note: In the first test case, the initial order is \\"shipA shipB shipC shipD shipE\\". The maneuvers are: swap indices 0 and 1 (resulting in \\"shipB shipA shipC shipD shipE\\"), swap indices 2 and 4 (resulting in \\"shipB shipA shipE shipD shipC\\"), and swap indices 1 and 3 (resulting in \\"shipB shipD shipE shipA shipC\\").) In the second test case, the initial order is \\"alpha beta gamma delta epsilon\\". The maneuvers are: swap indices 0 and 4 (resulting in \\"epsilon beta gamma delta alpha\\"), and swap indices 2 and 3 (resulting in \\"epsilon beta delta gamma alpha\\").","solution":"def maneuver_ships(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] ships = test_cases[i][1] m = test_cases[i][2] maneuvers = test_cases[i][3] for a, b in maneuvers: ships[a], ships[b] = ships[b], ships[a] results.append(\\" \\".join(ships)) return results"},{"question":"Alice is developing an online education platform that tracks the attendance of students for live video classes. To achieve this goal, Alice has designed an attendance system where each student can join or leave the class and their participation will be logged accordingly. Based on the log data, Alice wants to calculate the total time each student has spent in the class. The system processes three types of commands: * Join the class (\'Join\' command). * Leave the class (\'Leave\' command). * Calculate total attendance time for a student (\'Calculate\' command). Here, the \'Join\' command marks the time when a student joins the class, and the \'Leave\' command marks the time when a student leaves the class. The difference between the \'Leave\' time and the \'Join\' time gives the attendance duration for that session. If the \'Calculate\' command is given, the system should calculate the total time the student has spent in the class based on all sessions logged so far. The time in the commands is given in the format HH:MM and is guaranteed to be valid (i.e., 00 <= HH < 24 and 00 <= MM < 60). Input The input will contain not more than 100 commands, each in its own line. Each command will be one of the following three types: * \\"Join <name> <HH:MM>\\" - a student with <name> joins the class at the given time. * \\"Leave <name> <HH:MM>\\" - a student with <name> leaves the class at the given time. * \\"Calculate <name>\\" - calculate the total attendance time for the student with <name>. The <name> is a non-empty sequence of Latin letters and digits. It is guaranteed that for each \'Leave\' command, the corresponding \'Join\' command exists and the leave time is after the join time. Names are case-sensitive. Output For each \'Calculate\' command, print the total time in the format HH:MM that the student has spent in the class. Output each result in a new line. Examples Input Join Alice 09:00 Join Bob 09:15 Leave Alice 10:00 Leave Bob 10:45 Calculate Alice Join Bob 11:00 Leave Bob 12:00 Calculate Bob Output 01:00 01:45","solution":"def process_logs(logs): from datetime import datetime, timedelta attendances = {} in_class = {} def time_str_to_minutes(time_str): t = datetime.strptime(time_str, \\"%H:%M\\") return t.hour * 60 + t.minute def minutes_to_str(minutes): return \\"{:02}:{:02}\\".format(minutes // 60, minutes % 60) results = [] for log in logs: parts = log.split() command = parts[0] name = parts[1] if command == \\"Join\\": time_joined = parts[2] in_class[name] = time_str_to_minutes(time_joined) elif command == \\"Leave\\": time_left = parts[2] if name in in_class: join_time = in_class.pop(name) leave_time = time_str_to_minutes(time_left) total_time = leave_time - join_time if name not in attendances: attendances[name] = total_time else: attendances[name] += total_time elif command == \\"Calculate\\": total_time = attendances.get(name, 0) results.append(minutes_to_str(total_time)) return results # Example usage: logs = [ \\"Join Alice 09:00\\", \\"Join Bob 09:15\\", \\"Leave Alice 10:00\\", \\"Leave Bob 10:45\\", \\"Calculate Alice\\", \\"Join Bob 11:00\\", \\"Leave Bob 12:00\\", \\"Calculate Bob\\" ] print(process_logs(logs)) # Output: [\'01:00\', \'01:45\']"},{"question":"You are given a sequence of integers. You want to find the length of the longest subsequence that is strictly increasing and consists only of prime numbers. Input: The first line contains the number of test cases T. T test cases follow. Each test case contains two lines. The first line of each test case contains an integer N, the length of the sequence. The second line of each test case contains N space-separated integers representing the sequence. Output: Output T lines, one for each test case containing the length of the longest strictly increasing subsequence that consists of prime numbers. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ sequence[i] ≤ 10000 SAMPLE INPUT 3 6 2 3 5 7 11 13 5 1 4 6 8 10 8 2 4 6 3 5 7 11 13 SAMPLE OUTPUT 6 0 6 Explanation For the first case, the sequence 2, 3, 5, 7, 11, 13 is strictly increasing and all prime, so the answer is 6. For the second case, there are no prime numbers in the sequence, so the answer is 0. For the third case, the sequence 2, 3, 5, 7, 11, 13 is strictly increasing and all prime, so the answer is 6.","solution":"def is_prime(n): if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def longest_increasing_prime_subsequence_length(sequence): primes = [num for num in sequence if is_prime(num)] if not primes: return 0 n = len(primes) dp = [1] * n for i in range(1, n): for j in range(i): if primes[i] > primes[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def find_longest_increasing_prime_subsequence(T, test_cases): results = [] for case in test_cases: N, sequence = case results.append(longest_increasing_prime_subsequence_length(sequence)) return results # Reading the input and then calling the function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) cases = [] index = 1 for _ in range(T): N = int(data[index]) sequence = list(map(int, data[index + 1: index + 1 + N])) cases.append((N, sequence)) index += N + 1 results = find_longest_increasing_prime_subsequence(T, cases) for result in results: print(result)"},{"question":"You are given n types of coins and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin. Function Description Complete the function coinChange in the editor below. coinChange has the following parameters: - int coins[n]: the list of coin denominations available - int amount: the total amount of money to make up Returns - int: the fewest number of coins needed, or -1 if the amount cannot be made up Input Format - The first line contains an integer n, the number of types of coins. - The second line contains n space-separated integers representing the array coins. - The third line contains an integer amount, the total amount of money. Constraints 1 ≤ n ≤ 12 1 ≤ coins[i] ≤ 10^4 0 ≤ amount ≤ 10^4 Sample Input 0 3 1 2 5 11 Sample Output 0 3 Explanation 0 11 can be made up of 5 + 5 + 1, a total of 3 coins. Sample Input 1 2 2 4 7 Sample Output 1 -1 Explanation 1 7 cannot be made up of 2 and 4, so the result is -1. Sample Input 2 1 1 0 Sample Output 2 0 Explanation 2 The amount is zero, so no coins are needed. Function Signature: def coinChange(coins: List[int], amount: int) -> int: # Write your solution here","solution":"from typing import List def coinChange(coins: List[int], amount: int) -> int: Compute the fewest number of coins needed to make up the given amount. If the amount cannot be made up by any combination of the coins, return -1. # Create a list to store the minimum coins needed for each amount up to the target amount dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 # Base case: 0 coins needed to make up amount 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"There are n cities in a country and m roads connecting them. Each road connects two different cities and is bidirectional. The government wants to ensure that traffic flows smoothly across the country. Therefore, they have decided to add roads such that there is a direct road between every pair of cities. You are given the current road network and you need to find out the minimum number of new roads that need to be constructed so that there is a direct road between every pair of cities. -----Input----- The first line contains two integers n (2 le n le 500) — the number of cities and m (0 le m le frac{n(n-1)}{2}) — the number of roads. The next m lines each contain two integers u and v (1 le u, v le n, u ne v) — denoting that there is currently a road between city u and city v. No two roads connect the same pair of cities. -----Output----- Output the minimum number of new roads that need to be constructed so that there is a direct road between every pair of cities. -----Example----- Input 5 3 1 2 2 3 4 5 Output 7 -----Explanation----- In the given example, there are 5 cities and 3 existing roads. The pairs of cities that are directly connected are (1-2), (2-3), and (4-5). To ensure that there is a direct road between every pair of cities, we need to add the following 7 roads: - (1-3) - (1-4) - (1-5) - (2-4) - (2-5) - (3-4) - (3-5) Thus, the minimum number of new roads needed is 7.","solution":"def minimum_new_roads(n, roads): Returns the minimum number of new roads that need to be constructed so that there is a direct road between every pair of n cities, given an initial list of roads. current_road_count = len(roads) total_possible_roads = n * (n - 1) // 2 new_roads_needed = total_possible_roads - current_road_count return new_roads_needed # Example usage: # n = 5 # roads = [(1, 2), (2, 3), (4, 5)] # print(minimum_new_roads(n, roads)) # Output: 7"},{"question":"You are given a list of integers representing the sequence of prices of a particular stock over a number of days. You can perform at most one transaction, which means you can buy one and sell one share of the stock. Your task is to find out the maximum profit you can achieve. If you cannot achieve any profit, return 0. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case is represented by two lines: - The first line of each test case contains an integer n (1 le n le 100), the number of days. - The second line contains n space-separated integers p_1, p_2, dots, p_n (0 le p_i le 10000), where p_i represents the stock price on the i-th day. It is guaranteed that the sum of the values of n for all test cases in the input does not exceed 1000. -----Output----- Print t integers — the maximum possible profit for each test case. If no profit can be made, print 0. -----Example----- Input 3 6 7 1 5 3 6 4 4 7 6 4 3 5 1 2 3 4 5 Output 5 0 4 -----Note----- In the first test case, the best possible transaction is to buy on day 2 (price = 1) and sell on day 5 (price = 6), for a profit of 6 - 1 = 5. In the second test case, no transaction can make a profit, so the answer is 0. In the third test case, the best possible transaction is to buy on day 1 (price = 1) and sell on day 5 (price = 5), for a profit of 5 - 1 = 4.","solution":"def max_profit(t, test_cases): results = [] for case in test_cases: n, prices = case if n == 0: results.append(0) continue min_price = prices[0] max_profit = 0 for price in prices: min_price = min(min_price, price) potential_profit = price - min_price max_profit = max(max_profit, potential_profit) results.append(max_profit) return results # Example usage: # t = 3 # test_cases = [ # (6, [7, 1, 5, 3, 6, 4]), # (4, [7, 6, 4, 3]), # (5, [1, 2, 3, 4, 5]) # ] # print(max_profit(t, test_cases)) # Output: [5, 0, 4]"},{"question":"Write a function that takes an integer array `nums` and an integer `k`, and returns the maximum sum of `k` consecutive elements in the array. If the array has fewer than `k` elements, return 0. Example 1: Input: nums = [1, 2, 3, 4, 5], k = 2 Output: 9 Explanation: The maximum sum of 2 consecutive elements is 4 + 5 = 9. Example 2: Input: nums = [2, 1, 5, 1, 3, 2], k = 3 Output: 10 Explanation: The maximum sum of 3 consecutive elements is 5 + 1 + 3 = 9. Example 3: Input: nums = [1, 2, 3], k = 4 Output: 0 Explanation: There are fewer than 4 elements in the array, so the function returns 0. Example 4: Input: nums = [6, 2, 4, 7], k = 1 Output: 7 Explanation: The maximum sum of 1 element is 7. Constraints: 1. 1 <= nums.length <= 10000 2. 1 <= nums[i] <= 1000 3. 1 <= k <= 10000","solution":"def max_sum_of_k_consecutive_elements(nums, k): Returns the maximum sum of k consecutive elements in the array nums. If the array contains fewer than k elements, returns 0. if len(nums) < k: return 0 # Initial window sum window_sum = sum(nums[:k]) max_sum = window_sum # Sliding window approach for i in range(len(nums) - k): window_sum = window_sum - nums[i] + nums[i + k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"In a fictional city, there are numerous islands connected by bridges. These bridges are either undirected (you can travel both ways) or directed (you can travel only in a designated direction). Your task is to determine if you can reach every island from any given starting island. Each bridge connection is represented by two distinct islands and a type indicating whether the bridge is undirected (U) or directed (D). You need to write a program that checks if the entire city is connected, meaning there is no island from which you cannot reach another island. The city can be represented in a graph where islands are nodes, and the bridges are edges. An undirected bridge represents a bidirectional edge, while a directed bridge represents a unidirectional edge. Input The input consists of multiple datasets. Each dataset is formatted as follows: ``` N M u1 v1 type1 u2 v2 type2 ... uM vM typeM ``` Where: - `N` (0 < N ≤ 100) is the number of islands. - `M` (0 ≤ M ≤ 1000) is the number of bridges. - `ui` and `vi` (1 ≤ ui, vi ≤ N) are the islands connected by the i-th bridge. - `typei` (\'U\' or \'D\') indicates whether the bridge `i` is undirected (\'U\') or directed (\'D\'). The input is terminated by a line with two zeros, which should not be processed. Output For each dataset, print \\"Connected\\" if it is possible to reach every island from any starting island. Otherwise, print \\"Not Connected\\". Example Input ``` 3 3 1 2 U 2 3 D 3 1 D 4 1 1 2 U 2 3 U 3 4 U 4 2 D 2 1 1 2 D 0 0 ``` Output ``` Connected Connected Not Connected ```","solution":"def is_city_connected(n, m, bridges): from collections import defaultdict, deque if n == 0: return \\"Not Connected\\" graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v, t in bridges: if t == \'U\': graph[u].append(v) graph[v].append(u) reverse_graph[u].append(v) reverse_graph[v].append(u) elif t == \'D\': graph[u].append(v) reverse_graph[v].append(u) def bfs(start, graph): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return visited # Check from 1 to n reachable_from_start = bfs(1, graph) reverse_reachable_from_start = bfs(1, reverse_graph) for i in range(1, n + 1): if not reachable_from_start[i] or not reverse_reachable_from_start[i]: return \\"Not Connected\\" return \\"Connected\\" def process_input(input_data): lines = input_data.strip().split(\'n\') idx = 0 output = [] while idx < len(lines): n, m = map(int, lines[idx].split()) if n == 0 and m == 0: break idx += 1 bridges = [] for _ in range(m): u, v, t = lines[idx].split() u = int(u) v = int(v) bridges.append((u, v, t)) idx += 1 result = is_city_connected(n, m, bridges) output.append(result) return \\"n\\".join(output)"},{"question":"Given a positive integer `n`, you need to construct a permutation `p` of integers from 1 to n, such that for any two consecutive integers i and j in the permutation, the sum `i + j` is not a prime number. If there are multiple valid permutations, output any one of them. If no valid permutation exists, return an empty list. A permutation is a sequence of numbers where each number from 1 to n appears exactly once. # Input Format - The input consists of a single integer n. # Output Format - Output a single line containing `n` space-separated integers representing the permutation. - If no valid permutation exists, output an empty list. # Constraints - 1 ≤ n ≤ 1000 # Sample Input 4 # Sample Output 2 4 1 3 # Explanation In the output, any two consecutive integers do not sum up to a prime number: 2 + 4 = 6 (not prime) 4 + 1 = 5 (not prime) 1 + 3 = 4 (not prime)","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def construct_permutation(n): if n == 1: return [1] elif n == 2: return [] elif n == 3: return [] # A possible strategy is to place even numbers first, then odd numbers evens = [i for i in range(2, n+1, 2)] odds = [i for i in range(1, n+1, 2)] # Combine even and odd lists permutation = evens + odds # Check and correct if the constructed permutation is valid for i in range(n - 1): if is_prime(permutation[i] + permutation[i + 1]): return [] return permutation"},{"question":"Given a string, return a dictionary with the occurrences of each unique character. For example: ``` charOccurrences(\\"hello world\\") ``` should return ``` {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \' \': 1, \'w\': 1, \'r\': 1, \'d\': 1} ``` ```if:python You should ignore the case of characters: `A` and `a` should be treated as the same character. ```","solution":"def char_occurrences(s): Returns a dictionary with the occurrences of each unique character in the input string. The characters are treated in a case-insensitive manner. s = s.lower() occurrences = {} for char in s: if char in occurrences: occurrences[char] += 1 else: occurrences[char] = 1 return occurrences"},{"question":"You are given a text consisting of words separated by spaces. Some of these words are followed by a series of exclamation marks. Your task is to remove the exclamation marks after each word, but retain the space(s) between words. Write a function `remove_exclamations` that takes a string `text` as input and returns a new string with the exclamation marks removed from each word. Ensure that the spaces between words are preserved. # Example: ``` remove_exclamations(\\"Hello!!! world! How\'s it going!!\\") -> \\"Hello world How\'s it going\\" remove_exclamations(\\"This!!! is!! an!! example!!!\\") -> \\"This is an example\\" ``` # Constraints: - The input string will contain only printable ASCII characters. - The input string will not be empty. - There will be at least one word in the input string. Function signature: ```python def remove_exclamations(text: str) -> str: # your code here ```","solution":"def remove_exclamations(text: str) -> str: Remove exclamation marks after each word while retaining the spaces between words. Arguments: text -- the input string with words possibly followed by exclamation marks Returns: a new string with the exclamation marks removed import re return re.sub(r\'!+\', \'\', text)"},{"question":"Given a 2D grid of size NxM where some cells may be blocked (represented as \'X\') and some cells are open paths (represented as \'O\'), find the length of the shortest path from the top-left corner of the grid (0,0) to the bottom-right corner (N-1,M-1). You can move up, down, left, or right, but cannot move through cells that are blocked. If there is no possible path, return -1. Example 1: Input: N = 4, M = 4 grid = {{\'O\', \'O\', \'X\', \'O\'}, {\'O\', \'X\', \'O\', \'O\'}, {\'O\', \'O\', \'O\', \'X\'}, {\'O\', \'X\', \'O\', \'O\'}} Output: 6 Explanation: The shortest path from the top-left to the bottom-right is: (0,0)->(0,1)->(1,1)->(2,1)->(2,2)->(2,3)->(3,3), with a length of 6. Example 2: Input: N = 3, M = 3 grid = {{\'O\', \'X\', \'O\'}, {\'O\', \'X\', \'O\'}, {\'O\', \'O\', \'O\'}} Output: 4 Explanation: The shortest path from the top-left to the bottom-right is: (0,0)->(1,0)->(2,0)->(2,1)->(2,2), with a length of 4. Your task: You don\'t need to read input or print anything. Your task is to complete the function shortestPath() which takes two integers N and M, and a 2D grid as input parameters and returns the length of the shortest path from the top-left to the bottom-right corner of the grid. If there is no path, return -1. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ N,M ≤ 500","solution":"from collections import deque def shortestPath(N, M, grid): if grid[0][0] == \'X\' or grid[N-1][M-1] == \'X\': return -1 # Directions to move in the grid directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Queue for BFS queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() if x == N-1 and y == M-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'O\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Cynthia loves building mazes and often challenges her friends to solve them. The maze is represented by an N x M grid of squares, each of which is either empty (denoted by \'.\') or a wall (denoted by \'#\'). Cynthia\'s challenge for her friends is to determine whether there is a path from the top-left corner to the bottom-right corner, moving only through empty squares. Movements can be horizontal or vertical one step at a time. Input: First line consists of an integer T denoting the number of test cases. First line of each test case consists of two space-separated integers, N and M. The next N lines each contain M characters, forming the maze grid. Output: For each test case, if a path exists from the top-left to bottom-right corner, print \\"Possible\\" (without quotes), otherwise print \\"Not Possible\\" (without quotes). Constraints: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 10 SAMPLE INPUT 2 3 3 . .#. ..# 4 4 .... .. .. .... SAMPLE OUTPUT Possible Not Possible","solution":"def is_path_possible(grid, N, M): if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return \\"Not Possible\\" visited = [[False] * M for _ in range(N)] def dfs(x, y): if x < 0 or x >= N or y < 0 or y >= M or grid[x][y] == \'#\' or visited[x][y]: return False if x == N-1 and y == M-1: return True visited[x][y] = True return dfs(x+1, y) or dfs(x, y+1) or dfs(x-1, y) or dfs(x, y-1) return \\"Possible\\" if dfs(0, 0) else \\"Not Possible\\" def maze_solver(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] grid = test_cases[i][1] results.append(is_path_possible(grid, N, M)) return results # Input processing def main(input_text: str): lines = input_text.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, lines[index].split()) grid = [] for i in range(N): grid.append(lines[index + 1 + i]) test_cases.append(((N, M), grid)) index += N + 1 results = maze_solver(T, test_cases) for result in results: print(result) # Example use # main(\\"2n3 3n.n.#.n..#n4 4n....n..n..n....\\")"},{"question":"Karan and Kartik are playing a game called \\"Even-Odd Challenge\\". They are given a list of numbers as gifts. In each turn, a player can select any one number from the list and increase or decrease it by 1, converting it to an even number if it\'s odd, or to an odd number if it\'s even. The first player who is unable to make a valid move loses the game. Karan takes the first turn. Input: The first line contains T, the number of test cases. Each test case consists of two lines. The first line contains a single integer N — the size of the list. The second line contains N space-separated integers, which represent the list of numbers. Output: For each test case, output whether Karan will win or Kartik will win. Output \\"Karan\\" if Karan wins, otherwise output \\"Kartik\\" (without quotes). Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100,000 0 ≤ A[i] ≤ 1,000,000,000, where i ranges from 1 to N SAMPLE INPUT: 2 3 2 3 4 4 1 2 3 4 SAMPLE OUTPUT: Kartik Karan Explanation: In the first test case, Karan can convert 2 to 3 or 4, 3 to 2 or 4, or 4 to 3. Kartik can then make his move, leaving Karan to eventually lose with no valid moves left. In the second test case, Karan can smartly make moves such that Kartik is left with no valid moves, ensuring Karan\'s win.","solution":"def even_odd_challenge(test_cases): results = [] for case in test_cases: N, arr = case changeable_elements_count = N # All elements are inherently changeable. if changeable_elements_count % 2 == 0: results.append(\\"Karan\\") else: results.append(\\"Kartik\\") return results"},{"question":"Sum of Subarrays Given an array of n integers, you are required to determine the sum of every possible subarray and find the maximum sum among them. A subarray is a contiguous part of the array. For example, if the given array is [1, -2, 3, 4, -1], possible subarrays are [1], [1, -2], [1, -2, 3], [1, -2, 3, 4], and so on. Your task is to write a program that will find the maximum sum of any subarray within the given array. Input The input consists of a single test case of the following format: n arr_1 arr_2 ... arr_n n is the number of elements in the array, which is an integer satisfying 1 leq n leq 10^5. Each arr_i (1 leq i leq n) is an element of the array, which is an integer satisfying -10^4 leq arr_i leq 10^4. Output Output a single integer indicating the maximum sum of any subarray. Sample Input 1 5 1 -2 3 4 -1 Sample Output 1 7 Sample Input 2 4 -1 -2 -3 -4 Sample Output 2 -1 Explanation In the first sample, the subarray [3, 4] has the maximum sum of 7. In the second sample, the subarray [-1] has the maximum sum of -1.","solution":"def max_subarray_sum(arr): Function to find the maximum sum of any subarray. Uses Kadane\'s Algorithm for optimal solution. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def process_input(input_str): Function to process the input string and return the array. lines = input_str.strip().split(\'n\') n = int(lines[0]) arr = list(map(int, lines[1].split())) return arr"},{"question":"A treasurer is managing the budget for a series of upcoming projects. Each project has an estimated cost Ci, and the treasurer needs to allocate funds accordingly. However, due to various uncertainties, the actual cost can fluctuate between a minimum and maximum value. Each project will have an actual cost chosen uniformly at random from a range [L_i, U_i]. The treasurer must calculate and report the total expected cost for all the projects combined. Given the information of N projects, with each project\'s cost lying uniformly between L_i and U_i, compute the total expected cost. Input Format: The first line contains the integer N, the number of projects. The next N lines each contain two integers, L_i and U_i, which represent the range of costs for project i. Output format: Print the total expected cost for all projects as a single real number rounded to two decimal places. Constraints: 1 ≤ N ≤ 10^3 0 ≤ L_i ≤ U_i ≤ 10^6 SAMPLE INPUT 3 10 20 30 40 100 200 SAMPLE OUTPUT 205.00 Explanation: The expected cost for each project is the average of its range since the cost is uniformly distributed. For the first project, the expected cost is (10 + 20) / 2 = 15. For the second project, the expected cost is (30 + 40) / 2 = 35. For the third project, the expected cost is (100 + 200) / 2 = 150. The total expected cost is 15 + 35 + 150 = 200.","solution":"def total_expected_cost(N, costs): Computes the total expected cost for all projects combined. Parameters: N (int): Number of projects costs (list of tuples): Each tuple contains two integers representing the cost range (L_i, U_i) of each project Returns: float: The total expected cost rounded to two decimal places total_cost = 0 for L, U in costs: expected_cost = (L + U) / 2 total_cost += expected_cost return round(total_cost, 2) # Example usage N = 3 costs = [(10, 20), (30, 40), (100, 200)] print(total_expected_cost(N, costs)) # Output: 200.00"},{"question":"In a small village, there is a famous library that contains hundreds of ancient books. Each book has its own unique value and attraction points. The librarian is organizing a one-time special event where visitors can come and take books with them. However, the librarian wants to ensure that the total value of the books taken by any visitor does not exceed a certain specified limit, to ensure fairness. Given a list of book values and an integer representing the value limit, determine the maximum number of books a visitor can take without exceeding the value limit. ------ Input Format ------ - First line will contain T, the number of testcases. Then the testcases follow. - Each testcase consists of two lines: - The first line contains two integers N and L, where N is the number of books and L is the value limit. - The second line contains N integers, representing the values of the books. ------ Output Format ------ For each testcase, print a single integer representing the maximum number of books that can be taken without exceeding the value limit. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ L ≤ 10^4 1 ≤ text{Book value} ≤ 10^3 ------ Sample Input 1 ------ 2 5 10 1 3 5 7 9 4 7 2 4 6 8 ------ Sample Output 1 ------ 3 2 ------ Explanation 1 ------ Test case 1: One possible way to take the books without exceeding the value limit is by choosing books with values 1, 3, and 5, which adds up to 9 and is within the 10 value limit. Test case 2: The best selection is taking books with values 2 and 4, which adds up to 6 and is within the 7 value limit.","solution":"def max_books(N, L, book_values): Determine the maximum number of books that can be taken without exceeding the value limit. :param N: Number of books :param L: Value limit :param book_values: List of book values :return: Maximum number of books that can be taken books_sorted = sorted(book_values) total_value = 0 count = 0 for value in books_sorted: if total_value + value <= L: total_value += value count += 1 else: break return count def process_test_cases(test_cases): Processes multiple test cases and returns results. :param test_cases: List of tuples, each containing (N, L, book_values) :return: List of results for each test case results = [] for case in test_cases: N, L, book_values = case results.append(max_books(N, L, book_values)) return results"},{"question":"Calculate the median of the union of two sorted arrays A = {a_0, a_1, ..., a_{n-1}} and B = {b_0, b_1, ..., b_{m-1}}. Constraints * 1 leq n, m leq 100,000 * -10^9 leq a_0 leq a_1 leq ... leq a_{n-1} leq 10^9 * -10^9 leq b_0 leq b_1 leq ... leq b_{m-1} leq 10^9 Input The input is given in the following format. n a_0 ; a_1 ; ... ; a_{n-1} m b_0 ; b_1 ; ... ; b_{m-1} Elements in A and B are given in ascending order. There can be duplicate elements within each set. Output Print the median of the combined sorted array of A and B. Example Input 5 1 3 5 7 9 4 2 4 6 8 Output 5 Explanation: Combined sorted array is: {1, 2, 3, 4, 5, 6, 7, 8, 9}. The median is 5.","solution":"def find_median_sorted_arrays(A, B): This function calculates the median of the union of two sorted arrays A and B. m, n = len(A), len(B) if m > n: A, B, m, n = B, A, n, m imin, imax, half_len = 0, m, (m + n + 1) // 2 while imin <= imax: i = (imin + imax) // 2 j = half_len - i if i < m and B[j-1] > A[i]: imin = i + 1 elif i > 0 and A[i-1] > B[j]: imax = i - 1 else: if i == 0: max_of_left = B[j-1] elif j == 0: max_of_left = A[i-1] else: max_of_left = max(A[i-1], B[j-1]) if (m + n) % 2 == 1: return max_of_left if i == m: min_of_right = B[j] elif j == n: min_of_right = A[i] else: min_of_right = min(A[i], B[j]) return (max_of_left + min_of_right) / 2.0"},{"question":"# Problem Statement You are given a string representing a mathematical expression containing digits (0-9), plus (`+`), minus (`-`), and equals (`=`) signs, but the expression does not follow standard mathematical usage. In this expression, `0` is not allowed on its own, and negative results are not permitted. Your task is to verify if it\'s possible to rearrange the digits so that the expression becomes valid with correct mathematical results. Specifically, you need to check if there exists a permutation of digits in the given expression such that the arithmetic operations on both sides of the equals sign result in the same value. You can assume there is exactly one equals sign in the input string. The expression: - Is of length between 3 and 100. - Contains exactly one equals sign (`=`). - Contains digits (`0-9`), plus (`+`), and minus (`-`) signs. - Does not allow numbers with leading zeros (other than the digit zero itself should be avoided). Find and print \\"YES\\" if it is possible to rearrange the digits to form a valid expression, \\"NO\\" otherwise. Input - A single string `expr` that represents the mathematical expression. Output - A single string \\"YES\\" or \\"NO\\" indicating whether it is possible to rearrange the digits to form a valid expression. # Example Example Input 1 ``` 2+2=4 ``` Example Output 1 ``` YES ``` Example Input 2 ``` 3+5=6 ``` Example Output 2 ``` NO ``` Example Input 3 ``` 1+2=3 ``` Example Output 3 ``` YES ```","solution":"from itertools import permutations import re def is_valid_expression(expr): # Split the expression at the equals sign left, right = expr.split(\'=\') # Remove non-digit characters and create permutations on the allowed digits digits = re.sub(r\'[^d]\', \'\', expr) # Helper function to evaluate an expression given numbers as input def eval_expr(left, right): try: return eval(left) == eval(right) except: return False # Generate all permutations of digits and try to substitute back into the expression for perm in permutations(digits): idx = 0 perm_left = \\"\\" perm_right = \\"\\" # Rebuild the left side of the expression with the new digits for char in left: if char.isdigit(): perm_left += perm[idx] idx += 1 else: perm_left += char # Rebuild the right side of the expression with the new digits for char in right: if char.isdigit(): perm_right += perm[idx] idx += 1 else: perm_right += char # Check if this permutation forms a valid expression if eval_expr(perm_left, perm_right): return \\"YES\\" return \\"NO\\""},{"question":"In a distant galaxy, there\'s a planet named Zog that has an unusual calendar system. Each year on Zog consists of `y` months, and each month has `m` days. Planet Zog also has a unique way of tracking time in weeks. Much like on Earth, a week consists of `7` days, but the start of the week varies from year to year on Zog. # Your Task Write a function `zogWeekDays` that returns the number of complete weeks in a given year on Zog, given the number of months `y`, the number of days per month `m`, and the start day of the week `s` (where `0` represents Monday, `1` represents Tuesday, and so on up to `6` which represents Sunday). # Function Signature ```python def zogWeekDays(y: int, m: int, s: int) -> int: ``` # Parameters - `y` (int): An integer representing the number of months in a year. - `m` (int): An integer representing the number of days in each month. - `s` (int): An integer representing the start day of the week for the year (`0` for Monday, ..., `6` for Sunday). # Output - Return an integer representing the number of complete weeks in the year. # Examples Example 1 ```python zogWeekDays(12, 30, 0) ``` Output: ```plaintext 51 ``` Example 2 ```python zogWeekDays(10, 40, 3) ``` Output: ```plaintext 57 ``` Example 3 ```python zogWeekDays(6, 31, 5) ``` Output: ```plaintext 26 ``` # Explanation Example 1 - Each month has `30` days. - There are `12` months, so there are a total of `12 * 30 = 360` days in the year. - Since the start day of the week is Monday (`0`), the calculation for complete weeks is straightforward: `360 // 7 = 51` complete weeks. Example 2 - Each month has `40` days. - There are `10` months, so there are a total of `10 * 40 = 400` days in the year. - With the start day being Thursday (`3`), the complete weeks calculation remains straightforward: `400 // 7 = 57` complete weeks. Example 3 - Each month has `31` days. - There are `6` months, so there are a total of `6 * 31 = 186` days in the year. - The start day is Saturday (`5`), but since we are interested only in complete weeks, the calculation is: `186 // 7 = 26` complete weeks. # Notes - This problem assumes that the calendar cycles through continuously without interruption. - The primary task is to determine the total number of days in the year and divide by `7` to find the number of complete weeks. The starting day of the week does not affect the count of complete weeks but is part of the input for the sake of alignment with Zog\'s calendar system.","solution":"def zogWeekDays(y: int, m: int, s: int) -> int: Returns the number of complete weeks in a given year on Planet Zog. Parameters: y (int): Number of months in a year. m (int): Number of days in each month. s (int): Start day of the week (0 for Monday, ..., 6 for Sunday). Returns: int: Number of complete weeks in the given year. total_days = y * m complete_weeks = total_days // 7 return complete_weeks"},{"question":"A tree is a connected acyclic graph. You are given an unrooted tree with N nodes, where each node is labeled from 1 to N. Your task is to find the minimum cost to send a message from node 1 to every other node, where the cost is defined as the number of edges in the shortest path. This is known as the \\"Broadcast Time\\" for the tree. Input * The first line contains an integer N (2 ≤ N ≤ 1000) - the number of nodes. * The next N-1 lines each contain two integers u and v (1 ≤ u, v ≤ N), which means there is an edge between nodes u and v. Output * Print a single integer - the minimum cost to send a message from node 1 to every other node. Examples Input 5 1 2 1 3 3 4 3 5 Output 3 Explanation: * The tree looks like this: 1 / 2 3 / 4 5 * The minimum path to send a message from node 1 to all other nodes: * Node 2: path 1-2, cost 1 * Node 3: path 1-3, cost 1 * Node 4: path 1-3-4, cost 2 * Node 5: path 1-3-5, cost 2 * The maximum cost among these paths is 2. Hence, the minimum cost to send a message from node 1 to all other nodes is 2. Input 6 1 2 1 3 2 4 2 5 3 6 Output 2 Explanation: * The tree looks like this: 1 / 2 3 / 4 5 6 * The minimum path to send a message from node 1 to all other nodes: * Node 2: path 1-2, cost 1 * Node 3: path 1-3, cost 1 * Node 4: path 1-2-4, cost 2 * Node 5: path 1-2-5, cost 2 * Node 6: path 1-3-6, cost 2 * The maximum cost among these paths is 2. Hence, the minimum cost to send a message from node 1 to all other nodes is 2.","solution":"from collections import deque def broadcast_time(n, edges): Returns the minimum cost to send a message from node 1 to every other node. # Build adjacency list adj_list = [[] for _ in range(n + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # BFS to find the farthest node distance from node 1 def bfs(start): visited = [False] * (n + 1) distance = [0] * (n + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True distance[neighbor] = distance[node] + 1 queue.append(neighbor) return max(distance) return bfs(1) # Example Usage edges = [ (1, 2), (1, 3), (3, 4), (3, 5) ] n = 5 print(broadcast_time(n, edges)) # Expected output is 2"},{"question":"You are given a 2D grid of size MxN, where each cell can either be \'1\' (indicative of land) or \'0\' (indicative of water). An island is formed by connecting adjacent lands horizontally or vertically. You need to find the number of islands in the given grid. -----Input----- First line contains T, the number of test cases. Each test case begins with two integers, M and N, representing the number of rows and columns in the grid. The next M lines each contain N characters (\'1\' or \'0\') without any spaces. -----Output----- For each test case, print the number of islands in one line. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ M, N ≤ 1000 -----Example----- Input: 2 4 5 11000 11000 00100 00011 3 3 111 010 111 Output: 3 1 -----Explanation----- In the first test case, the grid contains three islands. The first island is formed by the first four \'1\'s in the first and second rows. The second island is the single \'1\' in the third row. The third island is formed by the last two \'1\'s in the fourth row. In the second test case, there is only one island which includes all the \'1\'s in the grid.","solution":"def count_islands(grid): if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' dfs(grid, i-1, j) dfs(grid, i+1, j) dfs(grid, i, j-1) dfs(grid, i, j+1) island_count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': dfs(grid, i, j) island_count += 1 return island_count def num_islands(test_cases): results = [] for case in test_cases: M, N, grid = case results.append(count_islands(grid)) return results"},{"question":"A scientist is working on a research project involving chemicals. He has two containers, each containing a list of chemicals represented by their respective frequencies. The scientist needs to perform specific types of operations to analyze the frequencies in both containers. He defines two types of operations: 1 L R : Calculate and return the sum of multiplying frequencies from the first container with corresponding frequencies from the second container, from index L to R. 2 L R : Calculate and return the sum of the minimum frequency value between the two containers, from index L to R. Input The first line of the input contains two space-separated integers N and Q, representing the number of chemicals (the size of the list) and the number of queries respectively. The second line contains N space-separated integers representing the frequencies in the first container. The third line contains N space-separated integers representing the frequencies in the second container. The next Q lines contain queries of either of the two specified types. Output Output should consist of Q lines, each containing an answer to the corresponding query. Constraints 1 ≤ N, Q ≤ 10^5 1 ≤ Frequency ≤ 10^9 1 ≤ L, R ≤ N SAMPLE INPUT 5 3 3 1 4 1 5 2 7 1 8 2 1 1 3 2 2 5 1 1 5 SAMPLE OUTPUT 13 13 57 Explanation Q1 : (3 * 2) + (1 * 7) + (4 * 1) = 6 + 7 + 4 = 17 Q2 : min(1, 7) + min(4, 1) + min(1, 8) + min(5, 2) = 1 + 1 + 1 + 2 = 5 Q3 : (3 * 2) + (1 * 7) + (4 * 1) + (1 * 8) + (5 * 2) = 6 + 7 + 4 + 8 + 10 = 35","solution":"def process_queries(N, Q, container1, container2, queries): results = [] for query in queries: query_type, L, R = query L -= 1 # Convert to zero-based index R -= 1 # Convert to zero-based index if query_type == 1: result = sum(container1[i] * container2[i] for i in range(L, R+1)) elif query_type == 2: result = sum(min(container1[i], container2[i]) for i in range(L, R+1)) results.append(result) return results"},{"question":"You are given a list of integers representing heights of students in a class. Your task is to calculate and print the average height, rounded to the nearest integer. If the average height is tied (e.g., 2.5), round it up to the nearest integer (e.g., 3). Input: List of integers separated by spaces. The list ends when -1 is encountered. You can assume there is at least one valid height before -1. Output: Print the average height, rounded to the nearest integer. Constraints: 0 ≤ height ≤ 300 SAMPLE INPUT 160 170 180 190 200 -1 SAMPLE OUTPUT 180","solution":"def calculate_average_height(heights): Calculate the average height from a list of integers. The list ends when -1 is encountered. If the average is tied, round up. Parameters: heights (list[int]): List of heights Returns: int: Rounded average height valid_heights = [height for height in heights if height != -1] average_height = sum(valid_heights) / len(valid_heights) # Python\'s round function rounds half to even so we use math.ceil for tied cases if average_height % 1 == 0.5: average_height = int(average_height + 0.5) else: average_height = round(average_height) return average_height"},{"question":"You are given an array of n integers. You should perform the following operation exactly k times: Choose any single element of the array and increment it by 1. Your task is to maximize the minimum value in the array after exactly k operations. -----Input----- The first line contains two integers n and k (1 le n le 10^5, 0 le k le 10^9) — the number of elements in the array and the number of operations, respectively. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the initial elements of the array. -----Output----- Print a single integer — the maximum possible minimum value in the array after exactly k operations. -----Examples----- Input 3 5 1 2 3 Output 3 Input 4 0 5 7 5 7 Output 5 -----Note----- In the first example, you can increment the first element five times to get the array [6, 2, 3]. The minimum value in this array is 2. However, incrementing the second and third elements instead would give [1, 4, 4], with a minimum value of 1. The optimal approach would be to apply one increment to the first element and four increments to the second element, resulting in [2, 6, 3] or any permutation of it, reaching a minimum value of 3.","solution":"def maximize_minimum(n, k, a): Given an array of n integers, maximize the minimum value of the array by performing k increment operations. Args: n (int): Number of elements in the array. k (int): Number of increment operations. a (list of int): Array of integers. Returns: int: The maximum possible minimum value of the array after k increment operations. a.sort() # Function to check if it\'s possible to achieve at least \\"x\\" as the minimum value def can_achieve(x): needed = 0 for num in a: if num < x: needed += x - num if needed > k: return False return needed <= k # Binary search for the highest possible minimum value left, right = min(a), max(a) + k while left < right: mid = (left + right + 1) // 2 if can_achieve(mid): left = mid else: right = mid - 1 return left"},{"question":"Write a function that takes an integer n and returns the n-th term of the Fibonacci sequence where each term is the sum of the previous three terms, starting from {0, 1, 1} for the first, second, and third terms respectively. For example: ``` fibonacci(1) should return 0 fibonacci(2) should return 1 fibonacci(3) should return 1 fibonacci(4) should return 2 fibonacci(5) should return 4 ... ``` The function should handle larger values efficiently. Note: You can assume the input integer n will be at least 1.","solution":"def fibonacci(n): Returns the n-th term of the modified Fibonacci sequence where each term is the sum of the previous three terms, starting with {0, 1, 1} for the first three terms. if n == 1: return 0 elif n == 2 or n == 3: return 1 a, b, c = 0, 1, 1 # Initial three elements per the problem statement for _ in range(4, n + 1): d = a + b + c a, b, c = b, c, d return c"},{"question":"You are tasked with writing a program that analyzes a sequence of temperature readings from multiple cities and identifies the temperature trend for each city (i.e., whether the temperature is increasing, decreasing, or remaining constant). Each city\'s temperature readings are given as a sequence of integers, where each integer represents the temperature reading at a specific time. # Input The input consists of multiple datasets. Each dataset represents the temperature readings for one city and is given as a single line of space-separated integers. The end of the input is indicated by a single line containing a zero. # Output For each dataset, output a single line that indicates the trend of temperature readings. The possible trends are: - \\"INCREASING\\" if every temperature reading is higher than the one before it - \\"DECREASING\\" if every temperature reading is lower than the one before it - \\"CONSTANT\\" if all temperature readings are the same - \\"NO TREND\\" if none of the above conditions is met # Example Input ``` 10 20 30 40 40 30 20 10 15 15 15 20 20 30 30 0 ``` Output ``` INCREASING DECREASING CONSTANT NO TREND ``` # Constraints - The number of temperature readings per city does not exceed 100. - The integer value of temperature readings will range from -100 to 100. - The number of datasets does not exceed 200.","solution":"def temperature_trend(temperature_readings): if all(x < y for x, y in zip(temperature_readings, temperature_readings[1:])): return \\"INCREASING\\" elif all(x > y for x, y in zip(temperature_readings, temperature_readings[1:])): return \\"DECREASING\\" elif all(x == y for x, y in zip(temperature_readings, temperature_readings[1:])): return \\"CONSTANT\\" else: return \\"NO TREND\\" def analyze_temperature_trends(data): results = [] for line in data.strip().split(\\"n\\"): if line.strip() == \\"0\\": break readings = list(map(int, line.split())) trend = temperature_trend(readings) results.append(trend) return results"},{"question":"You are given a list of words and a single string `chars` which represents the available characters. Each character in `chars` can be used only once. Write a function to find out the total length of all the words formed by characters in `chars`. A word is formed by characters in `chars` if and only if we can use each character in `chars` as many times as it appears. Example 1: Input: words = [\\"cat\\",\\"bt\\",\\"hat\\",\\"tree\\"], chars = \\"atach\\" Output: 6 Explanation: The strings that can be formed are \\"cat\\" and \\"hat\\" so the answer is 3 + 3 = 6. Example 2: Input: words = [\\"hello\\",\\"world\\",\\"leetcode\\"], chars = \\"welldonehoneyr\\" Output: 10 Explanation: The strings that can be formed are \\"hello\\" and \\"world\\" so the answer is 5 + 5 = 10. Note: - 1 <= words.length <= 1000 - 1 <= words[i].length, chars.length <= 100 - All strings contain lowercase English letters only.","solution":"def count_characters(words, chars): from collections import Counter chars_count = Counter(chars) total_length = 0 for word in words: word_count = Counter(word) for char in word_count: if word_count[char] > chars_count.get(char, 0): break else: total_length += len(word) return total_length"},{"question":"You are given an array of integers and a target integer. Your task is to determine if there are two distinct indices `i` and `j` in the array such that the absolute difference between the integers at those indices is equal to the target value. If such indices exist, return `True`; otherwise, return `False`. Implement a function `contains_pair_with_difference(nums, target)`: ```python def contains_pair_with_difference(nums, target): pass ``` # Input: - `nums`: a list of integers. - `target`: a non-negative integer. # Output: - Return `True` if there are two distinct indices `i` and `j` such that `abs(nums[i] - nums[j]) == target`; otherwise, return `False`. # Examples: ```python contains_pair_with_difference([1, 5, 9, 13], 4) # Output: True # Explanation: abs(5 - 1) == 4 or abs(9 - 5) == 4 contains_pair_with_difference([1, 2, 3, 4], 6) # Output: False # Explanation: No pairs have an absolute difference of 6. contains_pair_with_difference([0, 7, 14, 21], 7) # Output: True # Explanation: abs(7 - 0) == 7 or abs(14 - 7) == 7 contains_pair_with_difference([0, 1, -1], 2) # Output: True # Explanation: abs(1 - (-1)) == 2 ``` # Constraints: - The array `nums` will have a length between 1 and 10^5. - Each integer in `nums` will be between -10^6 and 10^6. - The target integer will be a non-negative integer between 0 and 10^6.","solution":"def contains_pair_with_difference(nums, target): Determines if there are two distinct indices i and j in the array such that the absolute difference between the integers at those indices is equal to the target value. num_set = set() for num in nums: if (num + target) in num_set or (num - target) in num_set: return True num_set.add(num) return False"},{"question":"Social media has become an integral part of our lives. One of the features of these platforms is the comments section, where users can interact through their posts. Your task is to design an algorithm for a social media platform that will help in managing and formatting comments. The comments are posted in a nested structure, where one comment may be a reply to another comment. You are required to format these comments in a specific way. Each comment will be given an ID and may have multiple replies. Each reply is also a comment with its own ID and replies, and so forth. Your algorithm should generate a formatted output of the comments, where each level of nesting is indented by 2 spaces. The input will include a list of comments, where each comment is represented by a dictionary with four keys: - \'id\': a unique integer identifier for the comment. - \'user\': a string representing the username of the person who posted the comment. - \'text\': a string containing the text of the comment. - \'replies\': a list of dictionaries, each representing a reply to the comment. The output should contain the formatted comments as a single string, with each comment and its replies correctly indented. # Function Signature ```python def format_comments(comments: List[Dict[str, Union[int, str, List]]]) -> str: pass ``` # Input - comments: A list of dictionaries, where each dictionary represents a comment. # Output - A single string representing the formatted comments, ensuring proper indentation for nested replies. # Example ```python comments = [ { \'id\': 1, \'user\': \'Alice\', \'text\': \'Hello, world!\', \'replies\': [ { \'id\': 2, \'user\': \'Bob\', \'text\': \'Hi Alice!\', \'replies\': [] }, { \'id\': 3, \'user\': \'Charlie\', \'text\': \'Hello everyone!\', \'replies\': [ { \'id\': 4, \'user\': \'Dave\', \'text\': \'Hi Charlie!\', \'replies\': [] } ] } ] } ] assert ( format_comments(comments) == \\"1 (Alice): Hello, world!n\\" \\" 2 (Bob): Hi Alice!n\\" \\" 3 (Charlie): Hello everyone!n\\" \\" 4 (Dave): Hi Charlie!n\\" ) ``` # Notes - Pay attention to handling variable levels of nested replies. - Maintain consistent indentation for the nested comments. - Ensure that the formatted output follows the example provided, including the possible edge cases such as comments without replies.","solution":"from typing import List, Dict, Union def format_comments(comments: List[Dict[str, Union[int, str, List]]], level: int = 0) -> str: Formats a list of comments into a string with appropriate indentation for replies. Args: comments (List[Dict[str, Union[int, str, List]]]): The list of comments to format. level (int): The current level of indentation (default is 0 for top-level comments). Returns: str: The formatted comments. formatted_comments = [] indent = \' \' * level for comment in comments: formatted_comments.append(f\\"{indent}{comment[\'id\']} ({comment[\'user\']}): {comment[\'text\']}\\") if comment[\'replies\']: formatted_comments.append(format_comments(comment[\'replies\'], level + 1)) return \'n\'.join(formatted_comments)"},{"question":"You are given a string s consisting only of the characters \'A\' and \'B\'. You can perform the following operation on the string any number of times: Choose any substring \\"AB\\" and delete it from the string. You need to determine if it is possible to delete all characters from the string through a series of operations. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The following t lines contain a string s (1 le text{length of } s le 10^5) consisting only of the characters \'A\' and \'B\'. -----Output----- For each test case, output \\"YES\\" if it is possible to delete all characters from the string; otherwise, output \\"NO\\". -----Examples----- Input 4 ABB AAB ABAB BABA Output YES NO YES YES -----Note----- In the first test case, you can perform the following sequence of operations to delete all characters: \\"ABB\\" -> \\"B\\". In the second test case, it is not possible to delete all characters because the string will always have at least one \'A\' remaining. In the third test case, you can perform the following sequence of operations: \\"ABAB\\" -> \\"BB\\" -> \\"\\". In the fourth test case, you can perform the following sequence of operations: \\"BABA\\" -> \\"BA\\" -> \\"\\". Make sure that your code handles multiple test cases efficiently.","solution":"def can_delete_all_characters(t, test_cases): results = [] for s in test_cases: if s.count(\'B\') >= s.count(\'A\'): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function that takes a string `s` and a string `t`, and returns an array of all the start indices of `t`\'s anagrams in `s`. The output array should be sorted in ascending order. An Anagram is a word formed by rearranging the letters of another, such as \\"read\\" and \\"dear\\". Example 1: Input: s = \\"cbaebabacd\\", t = \\"abc\\" Output: [0, 6] Explanation: The substring starting at index 0 is \\"cba\\", which is an anagram of \\"abc\\". The substring starting at index 6 is \\"bac\\", which is an anagram of \\"abc\\". Example 2: Input: s = \\"abab\\", t = \\"ab\\" Output: [0, 1, 2] Explanation: The substring starting at index 0 is \\"ab\\", which is an anagram of \\"ab\\". The substring starting at index 1 is \\"ba\\", which is an anagram of \\"ab\\". The substring starting at index 2 is \\"ab\\", which is an anagram of \\"ab\\". Note: - The input strings only contain lowercase English letters. - The length of both strings `s` and `t` will not exceed 10^4.","solution":"from collections import Counter def find_anagrams(s, t): Returns a list of start indices of t\'s anagrams in s. t_count = Counter(t) s_count = Counter() result = [] t_len = len(t) for i in range(len(s)): s_count[s[i]] += 1 if i >= t_len: if s_count[s[i - t_len]] == 1: del s_count[s[i - t_len]] else: s_count[s[i - t_len]] -= 1 if s_count == t_count: result.append(i - t_len + 1) return result"},{"question":"Binary Tree - Find Height Write a function named FindHeight() that calculates and returns the height of a binary tree. The height of a binary tree is the number of edges between the tree\'s root and its furthest leaf. FindHeight takes the root of a binary tree as its argument. The Node class and an example to build a tree do not need to be redefined.","solution":"class Node: def __init__(self, key): self.left = None self.right = None self.value = key def FindHeight(root): Calculate the height of a binary tree. :param root: Root node of the binary tree :return: The height of the binary tree, which is the number of edges between the root and the furthest leaf. if root is None: return -1 # If the tree is empty, height is -1 (since we count edges) else: left_height = FindHeight(root.left) right_height = FindHeight(root.right) return 1 + max(left_height, right_height)"},{"question":"In a small town, there are N people who need to cross a river using a single boat. The boat can carry at most C kilograms, and each person i has a weight w_ i. The boat can take multiple trips to transport all the people across the river, but it must return to the original side empty every time. Simon, the boat owner, wants to minimize the number of trips required to get all the people across the river. Write a program that calculates the minimum number of trips required to transport all N people across the river. -----Input----- The first line of the input contains two integers N and C, where 1 leq N leq 2000 and 1 leq C leq 1000. The second line contains N integers representing the weights of the people, w_1, w_2, ldots, w_ n where 1 leq w_ i leq C. -----Output----- Output a single integer denoting the minimum number of trips required to transport all the people across the river. -----Explanation of Sample Input----- In the first example, Simon could take one person each trip, resulting in 4 trips. However, by packing the boat more efficiently, he can make only 2 trips: in the first trip, he takes people 1 and 4 (60+40 leq 100) and in the second trip, he takes people 2 and 3 (70+30 leq 100). -----Examples----- Sample Input: 4 100 60 70 30 40 Sample Output: 2 Sample Input: 5 200 100 100 100 100 100 Sample Output: 3","solution":"def minimize_trips(N, C, weights): Returns the minimum number of trips required to transport all N people across the river. :param N: The number of people to transport :param C: The maximum capacity (in kilograms) of the boat :param weights: List of weights of the people :return: Minimum number of trips required weights.sort() left, right = 0, N - 1 trips = 0 while left <= right: if weights[left] + weights[right] <= C: left += 1 right -= 1 trips += 1 return trips"},{"question":"The annual company picnic is approaching, and the organizers have planned a series of competitive games. Each game rewards participants with points based on their performance. To ensure fairness, they\'ve decided that each participant should only compete in a subset of the games, chosen based on their skill level. You are provided with the list of participants\' names, the games they will participate in, and the points they earned in those games. Your task is to calculate the total points for each participant. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the T test cases follow. - Each test case starts with an integer P, the number of participants. - The next P lines each contain: - A string representing the participant\'s name - An integer G, the number of games the participant is competing in - G space-separated integers, representing the points earned by the participant in each game ------ Output Format ------ For each test case, output P lines, each containing a participant\'s name and their total points, separated by a space. The output should be in the same order as the input. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ P ≤ 100 1 ≤ G ≤ 50 0 ≤ text{points earned in a game} ≤ 100 ----- Sample Input 1 ------ 2 3 John 3 10 20 30 Alice 2 15 25 Bob 1 5 2 Clara 2 20 30 Eve 1 50 ----- Sample Output 1 ------ John 60 Alice 40 Bob 5 Clara 50 Eve 50 ----- Explanation 1 ------ Test Case 1: - John competed in 3 games and earned a total of 60 points (10+20+30). - Alice competed in 2 games and earned a total of 40 points (15+25). - Bob competed in 1 game and earned a total of 5 points. Test Case 2: - Clara competed in 2 games and earned a total of 50 points (20+30). - Eve competed in 1 game and earned a total of 50 points.","solution":"def calculate_total_points(test_cases): This function calculates the total points for participants based on given test cases. results = [] for i in range(len(test_cases)): participants = test_cases[i][\'participants\'] for participant in participants: name = participant[\'name\'] points = participant[\'points\'] total_points = sum(points) results.append(f\\"{name} {total_points}\\") return results def parse_input(input_string): Parse the input string into structured format. lines = input_string.strip().split(\\"n\\") T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): P = int(lines[idx]) idx += 1 participants = [] for _ in range(P): data = lines[idx].split() name = data[0] G = int(data[1]) points = list(map(int, data[2:2+G])) participants.append({\'name\': name, \'points\': points}) idx += 1 test_cases.append({\'participants\': participants}) return test_cases # For actual usage # input_string = \\"2n3nJohn 3 10 20 30nAlice 2 15 25nBob 1 5n2nClara 2 20 30nEve 1 50\\" # test_cases = parse_input(input_string) # result = calculate_total_points(test_cases) # for line in result: # print(line)"},{"question":"You are given a list of integers, `nums`, representing the stock prices of a company in chronological order. You need to return the maximum profit you can achieve from completing at most two transactions. A transaction involves buying and then selling one share of the stock. Note that you cannot engage in multiple transactions simultaneously (you must sell the stock before you buy again). Example 1: Input: nums = [3,3,5,0,0,3,1,4] Output: 6 Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. Example 2: Input: nums = [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Note that you cannot buy on day 1 and day 2, then sell on day 3 and day 5, as you cannot do two transactions simultaneously. You must sell before buying again. Example 3: Input: nums = [7,6,4,3,1] Output: 0 Explanation: In this case, no transaction is done, i.e., max profit = 0. Constraints: - 1 <= nums.length <= 10^5 - 0 <= nums[i] <= 10^5","solution":"def maxProfit(nums): if not nums: return 0 n = len(nums) k = 2 # Maximum number of transactions dp = [[0] * (n) for _ in range(k + 1)] for i in range(1, k + 1): max_diff = -nums[0] for j in range(1, n): dp[i][j] = max(dp[i][j - 1], nums[j] + max_diff) max_diff = max(max_diff, dp[i - 1][j] - nums[j]) return dp[k][n - 1]"},{"question":"You are given a grid of size `n x m`, where `n` is the number of rows and `m` is the number of columns. Initially, each cell of the grid contains an integer `0`. You need to perform `k` operations, each of which consists of increments of all elements in a rectangular subgrid by `1`. After performing all the operations, determine the maximum value of any cell in the grid and the number of cells that contain this maximum value. Each operation is defined by four integers `a, b, c, d` which describe the top-left corner `(a, b)` and the bottom-right corner `(c, d)` of the subgrid that you need to increment. # Input - The first line contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 10^5, 1 ≤ k ≤ 10^5). - Each of the next `k` lines contains four integers `a, b, c, d` (1 ≤ a ≤ c ≤ n, 1 ≤ b ≤ d ≤ m). # Output - Print two integers: the maximum value in the grid and the number of cells that contain this maximum value. # Example Input ``` 4 4 2 1 1 3 3 2 2 4 4 ``` Output ``` 2 4 ``` # Explanation In the example above, after the first operation: ``` 1 1 1 0 1 1 1 0 1 1 1 0 0 0 0 0 ``` After the second operation: ``` 1 1 1 0 1 2 2 1 1 2 2 1 0 1 1 1 ``` Thus, the maximum value in the grid is `2`, and the number of cells containing this value is `4`.","solution":"def max_in_grid(n, m, k, operations): grid = [[0] * m for _ in range(n)] for a, b, c, d in operations: for i in range(a-1, c): for j in range(b-1, d): grid[i][j] += 1 max_value = 0 max_count = 0 for row in grid: for val in row: if val > max_value: max_value = val max_count = 1 elif val == max_value: max_count += 1 return max_value, max_count"},{"question":"A tech company needs a program to identify valid product codes from a given list. A valid product code is defined as a string that follows these rules: 1. It starts with two uppercase letters. 2. It is followed by exactly eight digits. 3. It ends with two lowercase letters. Your task is to write a function that checks each code in the list and prints \\"Valid\\" if the code is valid according to the rules above or \\"Invalid\\" otherwise. -----Input----- Each string in the list represents a product code to be validated. -----Output----- Print \\"Invalid\\" if the product code is not valid. Print \\"Valid\\" if the product code is valid. -----Constraints----- 1. 1 <= length of string <= 50 2. The list contains at most 100 strings. -----Example----- Input: AB12345678cd XY87654321yz AA123abc34ef TT99999999ab Output: Valid Valid Invalid Valid","solution":"import re def validate_product_codes(codes): Validates a list of product codes based on the rules: 1. It starts with two uppercase letters. 2. It is followed by exactly eight digits. 3. It ends with two lowercase letters. Args: codes (list): list of product code strings Returns: None: prints \\"Valid\\" or \\"Invalid\\" for each code in the input list pattern = re.compile(r\'^[A-Z]{2}d{8}[a-z]{2}\') for code in codes: if pattern.match(code): print(\\"Valid\\") else: print(\\"Invalid\\")"},{"question":"A robot is located at the top-left corner of a `m x n` grid (marked \'Start\' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram below). How many possible unique paths are there? Write a function `uniquePaths(m, n)` that returns the number of unique paths that the robot can take to reach the bottom-right corner. Example: ``` Input: m = 3, n = 7 Output: 28 Explanation: There are a total of 28 unique paths from \'Start\' to \'Finish\'. ``` Note: The robot has to reach the bottom-right corner of the grid, hence it will always move to either the right or downward direction.","solution":"def uniquePaths(m, n): Returns the number of unique paths from top-left to bottom-right corner of a m x n grid. # Create a 2D list initialized to 1 dp = [[1]*n for _ in range(m)] # Fill the dp table by adding the number of ways from the top cell and left cell for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner has the answer return dp[m-1][n-1]"},{"question":"A company has a system that monitors the network traffic in real time. The data about the traffic is stored in a circular buffer. When the buffer is full and new data arrives, the oldest data in the buffer is overwritten. You need to write a program to simulate this circular buffer mechanism. The buffer will store data entries that have two pieces of information: a timestamp (an integer) and a packet size (an integer). The buffer is capable of holding a fixed number of entries. The entries should be stored in the order they arrive and should be overwritten in a circular manner when the buffer reaches its capacity. Your task is to implement a circular buffer and then process a series of operations on it. There are three types of operations you need to handle: 1. `ADD t p`: Add an entry with timestamp `t` and packet size `p` to the buffer. 2. `REMOVE t`: Remove all entries with the given timestamp `t`. 3. `PRINT`: Print all entries in the buffer in the order they arrived. Each entry should be printed on a new line with the format \\"timestamp packet_size\\". If the same timestamp appears multiple times, only the entries with this timestamp should be removed when a `REMOVE` operation is performed. Input The first line contains an integer `n` (1 ≤ n ≤ 10^3) which is the maximum capacity of the buffer. The second line contains an integer `m` (1 ≤ m ≤ 10^4) which is the number of operations. The next `m` lines contain the operations to be performed on the buffer in the format described above. Output For each `PRINT` operation, output the contents of the buffer as specified above, or print \\"EMPTY\\" if the buffer is empty. Example Input 5 7 ADD 1 100 ADD 2 150 ADD 3 200 PRINT REMOVE 2 ADD 4 250 PRINT Output 1 100 2 150 3 200 1 100 3 200 4 250","solution":"class CircularBuffer: def __init__(self, capacity): self.capacity = capacity self.buffer = [] self.start = 0 def add(self, timestamp, packet_size): if len(self.buffer) < self.capacity: self.buffer.append((timestamp, packet_size)) else: self.buffer[self.start] = (timestamp, packet_size) self.start = (self.start + 1) % self.capacity def remove(self, timestamp): self.buffer = [entry for entry in self.buffer if entry[0] != timestamp] def print_buffer(self): if not self.buffer: print(\\"EMPTY\\") else: ordered_buffer = [] for i in range(len(self.buffer)): index = (self.start + i) % len(self.buffer) ordered_buffer.append(self.buffer[index]) for entry in ordered_buffer: print(entry[0], entry[1]) def execute_operations(n, operations): buffer = CircularBuffer(n) results = [] for op in operations: parts = op.split() if parts[0] == \'ADD\': timestamp = int(parts[1]) packet_size = int(parts[2]) buffer.add(timestamp, packet_size) elif parts[0] == \'REMOVE\': timestamp = int(parts[1]) buffer.remove(timestamp) elif parts[0] == \'PRINT\': buffer.print_buffer()"},{"question":"**Problem Statement:** Write a function named `group_data` that takes a list of dictionaries, where each dictionary represents a record with `id`, `age`, `name`, and `city` as keys. Your task is to group these records by the `city` key and sort each group by the `id` key in ascending order. **Step 1:** Group the dictionaries by the value associated with the `city` key. **Step 2:** Sort the dictionaries within each group by the value of the `id` key in ascending order. **Step 3:** Return the grouped and sorted dictionaries as a new dictionary where the keys are the city names and the values are lists of the grouped dictionaries. **Example:** ```python input_data = [ {\\"id\\": 3, \\"age\\": 25, \\"name\\": \\"John\\", \\"city\\": \\"New York\\"}, {\\"id\\": 1, \\"age\\": 22, \\"name\\": \\"Jane\\", \\"city\\": \\"New York\\"}, {\\"id\\": 2, \\"age\\": 28, \\"name\\": \\"Doe\\", \\"city\\": \\"Los Angeles\\"}, {\\"id\\": 4, \\"age\\": 20, \\"name\\": \\"Dana\\", \\"city\\": \\"Los Angeles\\"}, {\\"id\\": 5, \\"age\\": 30, \\"name\\": \\"Mike\\", \\"city\\": \\"Chicago\\"} ] output = group_data(input_data) ``` The output should be: ```python { \\"New York\\": [ {\\"id\\": 1, \\"age\\": 22, \\"name\\": \\"Jane\\", \\"city\\": \\"New York\\"}, {\\"id\\": 3, \\"age\\": 25, \\"name\\": \\"John\\", \\"city\\": \\"New York\\"} ], \\"Los Angeles\\": [ {\\"id\\": 2, \\"age\\": 28, \\"name\\": \\"Doe\\", \\"city\\": \\"Los Angeles\\"}, {\\"id\\": 4, \\"age\\": 20, \\"name\\": \\"Dana\\", \\"city\\": \\"Los Angeles\\"} ], \\"Chicago\\": [ {\\"id\\": 5, \\"age\\": 30, \\"name\\": \\"Mike\\", \\"city\\": \\"Chicago\\"} ] } ``` **Constraints:** 1. Each dictionary in the input list will have the keys: `id`, `age`, `name`, and `city`. 2. `id` values are unique among all dictionaries. 3. The input list may have multiple dictionaries with the same `city` value.","solution":"from collections import defaultdict def group_data(records): Group records by \'city\' and sort within each group by \'id\' in ascending order. Args: records (list of dict): List of records where each record is a dictionary with keys \'id\', \'age\', \'name\', and \'city\'. Returns: dict: A dictionary where the keys are cities and the values are lists of grouped and sorted records. grouped_data = defaultdict(list) # Group by city for record in records: grouped_data[record[\'city\']].append(record) # Sort each group by id for city in grouped_data: grouped_data[city].sort(key=lambda x: x[\'id\']) return dict(grouped_data)"},{"question":"Arun is working on a new project that involves strings and patterns. He needs to find how many substrings of a given string S are palindromes. A palindrome is a string that reads the same backward as forward. Can you help Arun write a function to solve this problem? Input: A single line containing the string S. Output: Print an integer denoting the number of palindrome substrings in the given string S. Constraints: 1 ≤ |S| ≤ 10^5 S consists of lowercase English letters only. SAMPLE INPUT ababa SAMPLE OUTPUT 9 Explanation The total number of palindrome substrings are as follows: \\"a\\", \\"a\\", \\"a\\", \\"b\\", \\"b\\", \\"aba\\", \\"bab\\", \\"aba\\", \\"ababa\\".","solution":"def count_palindromic_substrings(S): Returns the number of palindromic substrings in the given string S. n = len(S) count = 0 # Helper function to extend around center def extend_palindrome(left, right): nonlocal count while left >= 0 and right < n and S[left] == S[right]: count += 1 left -= 1 right += 1 # Iterate through each character and treat each one as the center of a palindrome for i in range(n): # Odd length palindromes extend_palindrome(i, i) # Even length palindromes extend_palindrome(i, i + 1) return count"},{"question":"You are given a list of strings, each consisting of uppercase English letters and digits. We define the \\"core\\" of a string as the longest contiguous substring that contains either only letters or only digits. If there are multiple substrings of the same maximum length, the leftmost one is considered the core. Your task is to find this core for each given string. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the number of strings to process. Each of the following n lines contains a single string s of length at most 1000, consisting of uppercase English letters and digits. -----Output----- For each string in the input, output its core. -----Examples----- Input 4 AB12C34DE 1234AB56 ABCDE123 1000A5B67 Output AB 1234 ABCDE 1000","solution":"def find_core(s): Returns the core of the string s, which is the longest contiguous substring that contains either only letters or only digits. If multiple substrings of the same maximum length exist, returns the leftmost one. max_len = 0 max_core = \\"\\" current_core = s[0] for i in range(1, len(s)): if s[i].isdigit() and current_core[-1].isdigit(): current_core += s[i] elif s[i].isalpha() and current_core[-1].isalpha(): current_core += s[i] else: if len(current_core) > max_len: max_len = len(current_core) max_core = current_core current_core = s[i] if len(current_core) > max_len: max_core = current_core return max_core def process_strings(strings): Processes a list of strings and returns their cores. return [find_core(s) for s in strings]"},{"question":"You are given an array of integers and you need to perform two types of operations on this array: 1. Update: Given an index and a value, update the element at the given index to the given value. 2. Query: Given a range of indices, return the sum of the elements within that range (inclusive). Input: The first line of input contains two integers, `N` (the number of elements in the array) and `Q` (the number of queries). The second line contains `N` space-separated integers representing the initial elements of the array. The next `Q` lines contain queries of either of the following two types: - 1 i v: Update the element at index `i` to `v`. (1-based indexing) - 2 l r: Return the sum of elements from index `l` to `r` (inclusive). (1-based indexing) Output: For each query of type 2, print the resulting sum in a new line. Constraints: 1 <= N, Q <= 10^5 1 <= array elements, v <= 10^9 1 <= i, l, r <= N Example: Input: 5 3 1 2 3 4 5 2 2 4 1 3 10 2 1 5 Output: 9 22 Explanation: - The initial array is [1, 2, 3, 4, 5]. - The first query asks for the sum from index 2 to 4, which is 2 + 3 + 4 = 9. - The second query updates the element at index 3 to 10. The array becomes [1, 2, 10, 4, 5]. - The third query asks for the sum from index 1 to 5, which is 1 + 2 + 10 + 4 + 5 = 22.","solution":"class ArrayOperations: def __init__(self, array): self.array = array def update(self, i, v): self.array[i - 1] = v def query(self, l, r): return sum(self.array[l - 1:r]) def process_operations(N, Q, array, queries): result = [] operations = ArrayOperations(array) for query in queries: if query[0] == 1: operations.update(query[1], query[2]) elif query[0] == 2: result.append(operations.query(query[1], query[2])) return result"},{"question":"Given an integer array nums, design an algorithm to find the continuous subarray (containing at least one number) which has the largest sum and return its sum. A continuous subarray must contain at least one element and has all its elements in contiguous order within the original array. Example 1: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6. Example 2: Input: nums = [1] Output: 1 Example 3: Input: nums = [5,4,-1,7,8] Output: 23","solution":"def max_subarray_sum(nums): Finds the contiguous subarray within an array which has the largest sum. Parameters: nums (List[int]): List of integers Returns: int: The largest sum of the contiguous subarray if not nums: return 0 max_sum = nums[0] current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"```python Complete the function ```palindromeCheck``` that takes a string as input and returns ```True``` if the string is a palindrome and ```False``` otherwise. A palindrome is a word that reads the same backward as forward. Ignore case, spaces, and punctuation when determining if the string is a palindrome. Examples: ```python palindromeCheck(\\"A man, a plan, a canal, Panama!\\") #returns True palindromeCheck(\\"racecar\\") #returns True palindromeCheck(\\"hello\\") #returns False palindromeCheck(\\"No \'x\' in Nixon\\") #returns True palindromeCheck(\\"Was it a car or a cat I saw?\\") #returns True ```","solution":"def palindromeCheck(s): Checks if the input string is a palindrome, ignoring case, spaces, and punctuation. Args: s (str): The input string. Returns: bool: True if the string is a palindrome, False otherwise. # Removing non-alphanumeric characters and converting to lowercase cleaned_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Checking if the cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"The minimum number of edits (insertions, deletions, substitutions) required to transform one string into another is known as the edit distance or Levenshtein distance. Given two strings, determine their edit distance using dynamic programming. -----Input----- The input consists of two lines: - The first line contains the first string S_1 (1 ≤ length(S_1) ≤ 1000). - The second line contains the second string S_2 (1 ≤ length(S_2) ≤ 1000). Both strings are composed of lowercase English letters. -----Output----- Output a single integer, the edit distance between the two strings. -----Examples----- Sample Input 1: kitten sitting Sample Output 1: 3 Sample Input 2: flaw lawn Sample Output 2: 2 Note: For the first example, the minimum number of edits required to transform \\"kitten\\" into \\"sitting\\" are: 1. kitten -> sitten (substitute \'k\' with \'s\') 2. sitten -> sittin (substitute \'e\' with \'i\') 3. sittin -> sitting (insert \'g\') For the second example, the minimum number of edits required to transform \\"flaw\\" into \\"lawn\\" are: 1. flaw -> law (remove \'f\') 2. law -> lawn (insert \'n\')","solution":"def edit_distance(s1, s2): Calculate the edit distance (Levenshtein distance) between two strings using dynamic programming. :param s1: First string :param s2: Second string :return: Integer representing the edit distance m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s1 is empty, insert all characters of s2 elif j == 0: dp[i][j] = i # If s2 is empty, remove all characters of s1 elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"Write a function that takes two strings and returns the index of the first occurrence of the second string in the first string. If the second string is not present in the first string, the function should return -1. Example: ```python findSubstring(\\"hello world\\", \\"world\\") // should return 6 findSubstring(\\"hello world\\", \\"mars\\") // should return -1 ```","solution":"def findSubstring(s, sub): Returns the index of the first occurrence of sub in s. If sub is not present in s, returns -1. return s.find(sub)"},{"question":"You have been given a list of non-negative integers representing the heights of a collection of horizontal bars. Each bar has a width of 1. Your task is to calculate the maximum area of a rectangle formed between adjacent bars. The rectangle must be completely contained within the boundaries defined by the heights of the bars. Write a function `maxRectangleArea` that takes an array of integers (`heights`) as an input and returns the maximum area of a rectangle that can be formed. Function Signature: ```python def maxRectangleArea(heights: List[int]) -> int: ``` # Example: **Example 1:** ```python Input: heights = [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The rectangle with heights [5, 6] can form a rectangle with area = 5 * 2 = 10. ``` **Example 2:** ```python Input: heights = [2, 4] Output: 4 Explanation: The largest rectangle in this case can be formed by either of the bars with area = 4. ``` # Constraints: - `1 <= len(heights) <= 10^5` - `0 <= heights[i] <= 10^4` # Note: The function should efficiently handle large inputs, and the computation should be optimized with a time complexity better than O(n^2).","solution":"from typing import List def maxRectangleArea(heights: List[int]) -> int: Function to calculate the maximum rectangle area in a histogram. stack = [] # stack to store indices of the heights array max_area = 0 index = 0 while index < len(heights): # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now pop the remaining bars from stack and calculate area with each popped bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"In a given list of words, your task is to find the longest word that can be formed by deleting some characters of another given string `s`. A word `w` from the list can be formed by deleting some characters of `s` if without reordering the remaining characters of `s`, they match the characters of `w`. You need to return that longest word. If there are multiple longest words, return the one which is lexicographically smallest. -----Input----- The input consists of two parts: 1. The first line of input will provide the string `s` consisting of lowercase English letters. Its length will not exceed 10^4. 2. The second line will provide a list of words separated by a space. Each word consists of lowercase English letters. The number of words will not exceed 10^3, and the length of each word will be at most 10^3. -----Output----- Output the longest word from the list that can be formed by deleting some characters from `s`. If there are multiple longest words with the same length, output the lexicographically smallest one. -----Examples----- Input abpcplea apple apply ale plea Output apple Input abc a b c abc Output abc","solution":"def is_subsequence(x, y): Check if string x is a subsequence of string y. it = iter(y) return all(char in it for char in x) def find_longest_word(s, words): Finds the longest word that can be formed by deleting some characters of s from the list of words, where the longest word is the lexicographically smallest. # Sort words by length in descending order, and then by lexicographical order. words.sort(key=lambda word: (-len(word), word)) for word in words: if is_subsequence(word, s): return word return \\"\\""},{"question":"Given a dictionary of names with their respective scores, return a new dictionary that includes only the names with the highest score. The key/value pairs in the new dictionary should retain the order of their first appearance in the original dictionary. a) If multiple names share the highest score, include all of them. b) Ensure that the output dictionary retains the case sensitivity of the keys as they appear in the original dictionary. The returned dictionary should have the same format as the original dictionary, with names as keys and scores as values. Example input: `{\'Alice\': 91, \'Bob\': 85, \'Charlie\': 91, \'Diana\': 78}` Expected output: `{\'Alice\': 91, \'Charlie\': 91}`","solution":"def highest_scores(names_scores): Given a dictionary of names with their respective scores, returns a new dictionary that includes only the names with the highest score. The key/value pairs in the new dictionary should retain the order of their first appearance in the original dictionary. # Determine the highest score highest_score = max(names_scores.values()) # Create result dict with names having the highest score in the order of their appearance result = {name: score for name, score in names_scores.items() if score == highest_score} return result"},{"question":"*\\"Encrypting the Message\\"* You are given a message containing only uppercase English alphabets, and your task is to encrypt this message using a special algorithm. This encryption works in multiple rounds. In each round, every character in the message is replaced by the next character in the alphabet (with \\"Z\\" wrapping around to \\"A\\"). The encryption can repeat for a given number of rounds, and your task is to determine the final encrypted message after executing all rounds. Each encryption round follows these rules: 1. Replace each letter with its subsequent letter in the alphabet. 2. If the letter is \\"Z\\", it wraps around to \\"A\\". For example: - After 1 round of encryption, \\"ABC\\" becomes \\"BCD\\". - After 1 round of encryption, \\"XYZ\\" becomes \\"YZA\\". ------- Input Format ------- - The first line contains an integer T, the number of test cases. - For each test case, there are two lines: - The first line contains an integer R, the number of rounds of encryption. - The second line contains a string M of uppercase English letters, the message to encrypt. ------- Output Format ------- For each test case, output a single line containing the encrypted message after R rounds. ------- Constraints ------- 1 ≤ T ≤ 100 1 ≤ R ≤ 10^9 1 ≤ length(M) ≤ 10^3 ------- Sample Input 1 ------- 3 1 ABC 2 XYZ 26 HELLO ------- Sample Output 1 ------- BCD ZAB HELLO ------- Explanation 1 ------- Test Case 1: After one round, \\"ABC\\" becomes \\"BCD\\". Test Case 2: After two rounds, \\"XYZ\\" becomes \\"YZA\\" after the first round, and \\"ZAB\\" after the second round. Test Case 3: Since R=26, which is a multiple of 26 (the total number of letters in the alphabet), \\"HELLO\\" remains unchanged.","solution":"def encrypt_message(R, M): Encrypts the message M by shifting each character R times in the alphabet. Wraps around from \'Z\' to \'A\' if necessary. encrypted_message = [] n = 26 # There are 26 letters in the English alphabet # Reduce R in case it is larger than 26 R = R % n for char in M: new_char = chr(((ord(char) - ord(\'A\') + R) % n) + ord(\'A\')) encrypted_message.append(new_char) return \'\'.join(encrypted_message) def process_input(T, cases): results = [] for i in range(T): R, M = cases[i] encrypted_message = encrypt_message(R, M) results.append(encrypted_message) return results"},{"question":"You are tasked with organizing a series of meetings for a group of employees within a company. Each employee has a unique identifier and a list of time slots during which they are available for a meeting. Your goal is to schedule as many meetings as possible between different pairs of employees such that both employees are available during the chosen time slot for the meeting. Each meeting requires exactly one time slot and involves exactly two employees. An employee cannot attend more than one meeting at the same time slot. # Input Format - The first line contains an integer `E`, the number of employees. - The next `E` lines describe the availability of each employee. Each line begins with an integer `T`, the number of available time slots for the employee, followed by `T` integers representing the available time slots. # Output Format - Output a single integer: the maximum number of meetings that can be scheduled. # Constraints - `2 ≤ E ≤ 1000` - `1 ≤ T ≤ 1000` - Time slots are represented by integers and are not necessarily in sorted order. # Sample Input ``` 4 3 1 2 3 3 2 3 4 2 4 5 3 1 5 6 ``` # Sample Output ``` 2 ``` # Explanation In this example, the maximum number of meetings that can be scheduled is 2. Possible meetings could be: 1. Employee 1 and Employee 2 have a meeting at time slot 2. 2. Employee 3 and Employee 4 have a meeting at time slot 5. Each meeting involves different pairs of employees and no employee is involved in more than one meeting at any given time slot.","solution":"def max_meetings(employee_availabilities): Given employee availabilities, returns the maximum number of meetings that can be scheduled. Args: employee_availabilities (List[List[int]]): List where each sublist contains the time slots an employee is available. Returns: int: Maximum number of meetings that can be scheduled. from collections import defaultdict # Dictionary to hold time slots and the employees available in those slots time_slot_dict = defaultdict(list) for emp_id, slots in enumerate(employee_availabilities): for slot in slots: time_slot_dict[slot].append(emp_id) # Set to track meetings already accounted scheduled_employees = set() meetings_count = 0 for employees in time_slot_dict.values(): # Create all possible pairs and filter out those that conflict with the current schedule for i in range(len(employees)): for j in range(i+1, len(employees)): emp1, emp2 = employees[i], employees[j] if emp1 not in scheduled_employees and emp2 not in scheduled_employees: scheduled_employees.update([emp1, emp2]) meetings_count += 1 return meetings_count def parse_input_to_availabilities(E, availabilities): employee_availabilities = [] for i in range(E): employee_availabilities.append(availabilities[i][1:]) return employee_availabilities"},{"question":"You are required to automate the process of managing reservations for a restaurant with multiple tables. The restaurant operates with a reservation system where customers can reserve a table for a specific duration. Each table can serve only one reservation at a time. Given the reservations with their start and end times, you need to determine the minimum number of tables required to accommodate all reservations such that no two reservations overlap on the same table. Each reservation consists of a start time and an end time. The start and end times are given in a 24-hour format in the range `[0000, 2359]` (e.g., `1300` for 1:00 PM). Implement a function `min_num_tables` that takes a list of tuples where each tuple represents a reservation with a start and end time and returns the minimum number of tables required. # Input - The first line contains a single integer `t` (1 le t le 10^4) — the number of test cases. - The descriptions of the input data sets follow. - The first line of each test case contains one integer `n` (1 le n le 10^5) — the number of reservations. - The next `n` lines each contain a tuple `(start_time, end_time)` (0000 le start_time < end_time le 2359`). It is guaranteed that the sum of `n` over all test cases does not exceed 10^5. # Output For each test case, print a single integer — the minimum number of tables required. # Example Input 4 3 (0900, 1100) (1000, 1200) (1100, 1300) 2 (1400, 1500) (1500, 1600) 3 (0800, 0900) (0850, 0905) (0900, 1000) 1 (1215, 1315) # Example Output 2 1 2 1","solution":"def min_num_tables(reservations): Returns the minimum number of tables required to accommodate all reservations. :param reservations: List of tuples where each tuple contains (start_time, end_time) :return: Integer representing the minimum number of tables required events = [] for start, end in reservations: events.append((start, 1)) events.append((end, -1)) events.sort() current_tables = 0 max_tables = 0 for time, e_type in events: current_tables += e_type max_tables = max(max_tables, current_tables) return max_tables def solve(test_cases): results = [] for reservations in test_cases: results.append(min_num_tables(reservations)) return results"},{"question":"You are working on a navigation system for a new amusement park. The park consists of a network of attractions connected by bidirectional paths. Each path has a certain length. Visitors often like to start from one attraction and explore different attractions while minimizing the distance traveled. Your task is to determine the shortest path between two attractions. Given the number of attractions and the paths between them, write a program that finds the shortest distance between a given pair of attractions using Dijkstra\'s algorithm. Input The input consists of multiple datasets. One dataset is given as follows: > n m > Path 1 > Path 2 > ... > Path m > Start End n and m are integers satisfying 2 <= n <= 500, 1 <= m <= 10^4. They represent the number of attractions and the number of paths, respectively. Each path is given as: > u v w u, v are integers (1 <= u, v <= n) representing the attractions connected by this path, and w is an integer (1 <= w <= 1000) representing the length of the path. The attractions are numbered from 1 to n. Start and End are integers (1 <= Start, End <= n) representing the starting and ending attractions for which the shortest path is to be found. The end of the input is indicated by a line consisting of two zeros separated by a space. Output For each dataset, output a single line containing the shortest distance between Start and End. If there is no path from Start to End, output -1. Sample Input 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 5 0 0 Sample Output 6","solution":"import heapq import sys def dijkstra(graph, start, end): Use Dijkstra\'s algorithm to find the shortest path from start to end. n = len(graph) distances = [sys.maxsize] * n distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != sys.maxsize else -1 def shortest_path(num_attractions, num_paths, paths, start, end): graph = [[] for _ in range(num_attractions + 1)] for u, v, w in paths: graph[u].append((v, w)) graph[v].append((u, w)) return dijkstra(graph, start, end) def parse_input(input_data): index = 0 results = [] while index < len(input_data): n, m = map(int, input_data[index].split()) if n == 0 and m == 0: break index += 1 paths = [] for _ in range(m): u, v, w = map(int, input_data[index].split()) paths.append((u, v, w)) index += 1 start, end = map(int, input_data[index].split()) index += 1 results.append(shortest_path(n, m, paths, start, end)) return results def find_shortest_paths(input_data): return parse_input(input_data)"},{"question":"You are given a positive integer n. Find k pairs of integers (a_i, b_i) for i = 1, 2, ldots, k such that: a_i cdot b_i le frac{n}{2} and a_i + b_i = n Here 1 le a_i, b_i le n. We can show that for given constraints the answer always exists. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. The only line of each test case contains two integers n, k (3 le n le 10^5, 1 le k le n/2). It is guaranteed that the sum of all k\'s over all test cases does not exceed 10^6. -----Output----- For each test case, print k pairs (a_i, b_i) such that all conditions are satisfied. If there are multiple solutions, print any. -----Examples----- Input 2 10 3 15 4 Output 2 8 3 7 4 6 7 8 6 9 5 10 3 12 4 11 -----Note----- None","solution":"def find_pairs(n, k): Given a positive integer n and k pairs, find k pairs of integers (a_i, b_i) such that a_i * b_i <= n/2 and a_i + b_i = n. Parameters: n (int): The upper bound of the sum of pairs. k (int): The number of pairs required. Returns: List[Tuple[int, int]]: A list of k pairs (a_i, b_i). pairs = [] for i in range(1, k+1): a = i b = n - i pairs.append((a, b)) return pairs def process_test_cases(t, test_cases): results = [] for n, k in test_cases: results.append(find_pairs(n, k)) return results"},{"question":"Mia, a botanist in GreenLand, is studying a unique flower garden where the flowers grow in a specific pattern. Each flower grows sequentially in a unique manner depending on the day. The pattern of growth follows the Fibonacci sequence where each flower grows by the sum of the growth rates of the two preceding flowers, with the first two flowers growing at a rate of 1 cm per day. Given a specific day, Mia wants to find out the combined height of the first N flowers in the garden. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single integer N, the number of flowers. -----Output:----- Print the combined height of the first N flowers for each test case. -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 50 -----Sample Input:----- 3 1 3 5 -----Sample Output:----- 1 4 12","solution":"def fibonacci_sum(N): Returns the combined height of the first N flowers. Each flower grows in sequential Fibonacci pattern. if N == 0: return 0 elif N == 1: return 1 fib = [0] * (N+1) fib[1] = 1 for i in range(2, N+1): fib[i] = fib[i-1] + fib[i-2] return sum(fib[1:N+1]) def combined_heights(T, test_cases): Given the number of test cases T and a list of test cases, returns the combined heights for each test case results = [] for N in test_cases: results.append(fibonacci_sum(N)) return results # Example usage if __name__ == \\"__main__\\": T = 3 test_cases = [1, 3, 5] results = combined_heights(T, test_cases) for result in results: print(result)"},{"question":"Write a function that calculates the Levenshtein distance between two strings. The Levenshtein distance is a measure of the difference between two sequences and is defined as the minimum number of single-character edits (insertions, deletions or substitutions) required to change one string into the other. Function Signature: ```python def levenshtein_distance(str1: str, str2: str) -> int: pass ``` # Input - Two strings: `str1` and `str2` with lengths `m` and `n` respectively. - It is guaranteed that `0 <= m, n <= 1000`. # Output - An integer: the Levenshtein distance between the given strings. # Example ```python assert levenshtein_distance(\\"kitten\\", \\"sitting\\") == 3 assert levenshtein_distance(\\"flaw\\", \\"lawn\\") == 2 ``` # Note - Ensure your function is efficient and handles edge cases such as empty strings appropriately. - You may use dynamic programming to optimize the calculation process by storing intermediate results.","solution":"def levenshtein_distance(str1: str, str2: str) -> int: Returns the Levenshtein distance between str1 and str2. m, n = len(str1), len(str2) # Create a (m+1) x (n+1) matrix to store distances dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the distance for converting empty string to another for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Compute distances for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match else: dp[i][j] = min( dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + 1 # Substitution ) return dp[m][n]"},{"question":"Given a string containing only the characters \'a\', \'b\', and \'c\', you need to check if it is possible to form a such string by rearranging its letters that no two adjacent characters are the same. If possible, return such a permutation. If not, return an empty string. Example 1: Input: s = \\"aabb\\" Output: \\"abab\\" Explanation: By rearranging the letters of the input string, we can form \\"abab\\", which has no two adjacent same characters. Example 2: Input: s = \\"aaab\\" Output: \\"\\" Explanation: It is not possible to rearrange the letters to form a string where no two adjacent characters are the same. Your Task: You don\'t need to read input or print anything. Your task is to complete the function reorganizeString(s) which takes a single argument (s - the input string) and returns a string. If no valid rearrangement is possible, return an empty string. Expected Time Complexity: O(n log n), where n is the length of the string. Expected Auxiliary Space: O(n), where n is the length of the string. Constraints: 1 <= s.length <= 10^5 s consists of only \'a\', \'b\', and \'c\' characters.","solution":"from collections import Counter import heapq def reorganizeString(s): Returns a rearranged version of the string such that no two adjacent characters are the same. If not possible, returns an empty string. count = Counter(s) max_heap = [(-v, k) for k, v in count.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: cnt, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = cnt + 1, char if len(result) != len(s): return \\"\\" return \\"\\".join(result)"},{"question":"Write a function that takes in an integer array and returns the count of positive numbers and the sum of negative numbers in a tuple. You can assume the input array will contain at least one number. examples: countPositivesSumNegatives([1, 2, 3, -1, -2, -3, -4]) == (3, -10) countPositivesSumNegatives([0, -1, -2, -3, -4]) == (0, -10)","solution":"def countPositivesSumNegatives(arr): Returns a tuple containing the count of positive numbers and the sum of negative numbers in the given array. count_positive = sum(1 for x in arr if x > 0) sum_negative = sum(x for x in arr if x < 0) return (count_positive, sum_negative)"},{"question":"Bob is organizing a treasure hunt, where each participant has to solve puzzles sequentially to find clues. The puzzles are arranged in a linear sequence and must be solved one after the other. Each puzzle has a difficulty level represented by the difficulty array. Bob wants to prepare the sequence in such a way that he minimizes the maximum difficulty any participant has to face in solving the puzzles consecutively. Each participant will solve exactly M consecutive puzzles. You need to help Bob determine the minimum possible value of the maximum difficulty that any participant faces when solving M consecutive puzzles. Example 1: Input: N = 7, M = 3 difficulty[] = {1, 3, 4, 7, 6, 2, 5} Output: 7 Explanation: Bob can arrange the puzzles such that the consecutive sequences are [1, 3, 4], [4, 7, 6], and [6, 2, 5] with maximum difficulty levels of 4, 7, and 6 respectively. The minimum possible maximum difficulty is 7. Example 2: Input: N = 5, M = 2 difficulty[] = {9, 4, 6, 8, 3} Output: 9 Explanation: Bob can arrange the puzzles such that the consecutive sequences are [9, 4], [4, 6], [6, 8], and [8, 3] with maximum difficulty levels of 9, 6, 8, and 8 respectively. The minimum possible maximum difficulty is 9. Your Task: You need to complete the minMaxDifficulty() function which takes an integer array of difficulty, an integer N and an integer M as the input parameters and returns an integer denoting the minimum possible value of the maximum difficulty. Expected Time Complexity: O(NlogN) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^5 1 <= M <= N 1 <= difficulty[i] <= 10^9","solution":"def minMaxDifficulty(difficulty, N, M): def canDistribute(mid): max_diff = 0 # To keep track of the maximum difficulty of a segment count = 0 # To count the number of segments current_diff = 0 # Difficulty sum of the current segment for i in range(N): current_diff = max(current_diff, difficulty[i]) if (i % M) == 0: max_diff = max(max_diff, current_diff) current_diff = 0 if max_diff > mid: return False return True left = max(difficulty) right = sum(difficulty) while left < right: mid = (left + right) // 2 if canDistribute(mid): right = mid else: left = mid + 1 return left"},{"question":"**Problem Statement:** You’re given a list of integers that represent the credit balances of customers of a particular bank. A corporate decision has been made to either offer an increase on these credit balances or leave them unchanged, based on certain criteria. For each customer, if their credit balance is greater than or equal to a threshold value `m`, it will be increased by a percentage `p`. If the credit balance is less than `m`, it remains unchanged. Write a program that computes the new credit balances for all customers and prints them in their original order. **Input** - The first line contains three integers, `n` (1 ≤ n ≤ 10^5), `m` (0 ≤ m ≤ 10^9), and `p` (0 ≤ p ≤ 100), where `n` is the number of customers, `m` is the threshold balance, and `p` is the percentage increase (an integer). - The second line contains `n` integers, representing the credit balances of the customers. **Output** - Print the new credit balances of the customers in their original order, each on a new line, with two decimal places. **Examples** *Example 1* Input: ``` 5 100 10 90 100 110 140 80 ``` Output: ``` 90.00 110.00 121.00 154.00 80.00 ``` *Example 2* Input: ``` 3 200 25 50 150 200 ``` Output: ``` 50.00 150.00 250.00 ``` *Example 3* Input: ``` 4 50 50 40 50 55 60 ``` Output: ``` 40.00 75.00 82.50 90.00 ``` **Note** In the first example, only the balances that are greater than or equal to 100 are increased by 10%. - The balance 100 becomes 100 + 10% of 100 = 110.00. - The balance 110 becomes 110 + 10% of 110 = 121.00. - The balance 140 becomes 140 + 10% of 140 = 154.00. The other two balances remain unchanged. In the second example: - The balance 200 is increased by 25%, so it becomes 250.00. The other two balances remain unchanged. In the third example: - The balance 50 is increased by 50%, it changes to 75.00. - The balance 55 is increased by 50%, it changes to 82.50. - The balance 60 is increased by 50%, it changes to 90.00. The balance 40 remains unchanged.","solution":"def compute_new_balances(n, m, p, balances): Computes new credit balances based on given criteria. Parameters: n (int): Number of customers. m (int): Threshold balance. p (int): Percentage increase. balances (List[int]): List of credit balances of customers. Returns: List[str]: List of new credit balances formatted to two decimal places. new_balances = [] for balance in balances: if balance >= m: new_balance = balance + (balance * p / 100) else: new_balance = balance new_balances.append(f\\"{new_balance:.2f}\\") return new_balances"},{"question":"Write a program that manages a collection of books in a small library. Each book has a title, author, and publication year. Pooja wants to organize the collection such that she can easily retrieve books based on different criteria. Your task is to write a code that reads a list of books and outputs the books sorted by their publication year in ascending order. In case two books have the same year, they should be sorted by the author\'s name in alphabetical order. If two books have the same author and year, they should be sorted by the title in alphabetical order. Constraints 1<T ≤ 100 1<length of title, author ≤ 100 1000<= year <= 9999 Input: First line contains the number of test cases(T). Next each of T lines contains details of a book in the format: \\"title;author;year\\". Output: Print the books sorted based on the criteria mentioned above. Each book’s details should be printed on a new line in the format \\"title - author - year\\". SAMPLE INPUT 3 The Great Gatsby;F. Scott Fitzgerald;1925 To Kill a Mockingbird;Harper Lee;1960 1984;George Orwell;1949 SAMPLE OUTPUT The Great Gatsby - F. Scott Fitzgerald - 1925 1984 - George Orwell - 1949 To Kill a Mockingbird - Harper Lee - 1960 Explanation The books are sorted by their publication year first. If multiple books have the same year, they are sorted by the author\'s name, and if the author is the same, they are sorted by the title. In this example, each book has a different year so they are simply sorted by the year.","solution":"def organize_books(book_list): Sort the books based on the given criteria: year, author, title. # Parse each book entry to extract the title, author, and year books = [] for book in book_list: title, author, year = book.split(\\";\\") year = int(year) # Convert year to integer for proper sorting books.append((title, author, year)) # Use a tuple of (year, author, title) as the key to sort the books sorted_books = sorted(books, key=lambda book: (book[2], book[1], book[0])) # Generate the sorted book string list result = [f\\"{title} - {author} - {year}\\" for title, author, year in sorted_books] return result # Example input books_input = [ \\"The Great Gatsby;F. Scott Fitzgerald;1925\\", \\"To Kill a Mockingbird;Harper Lee;1960\\", \\"1984;George Orwell;1949\\" ] # Get the sorted books sorted_books_output = organize_books(books_input) # Print the sorted books for book in sorted_books_output: print(book)"},{"question":"A renowned botanist is working on a project to study the growth pattern of a particular plant species. The data collected over a period of time includes the height of a single plant measured daily. The botanist aims to find the maximum difference in height between any two days in a given period. The difference should be calculated as the height of the plant on a later day minus the height on an earlier day. If the height of the plant does not increase over the period, the difference should be zero. You have to write a program that will read the height measurements and determine the maximum increase. Input The input consists of several datasets each in the following format. > n > h1 h2 h3 ... hn Here, n (2 ≤ n ≤ 100) is an integer and is the number of days for which the height measurements were taken. hi (0 ≤ hi ≤ 10000) represents the height of the plant on the i-th day. The end of the input is indicated by a line containing a single zero. Output For each dataset, output a single integer which is the maximum difference in height between any two days in the given period. If there is no increase in height, the output should be zero. Sample Input 5 10 11 7 10 6 4 75 75 75 75 6 1 3 2 6 2 5 0 Output for the Sample Input 3 0 5 Example Input 5 10 11 7 10 6 4 75 75 75 75 6 1 3 2 6 2 5 0 Output 3 0 5","solution":"def max_increase_in_height(data): results = [] i = 0 while i < len(data): n = data[i] if n == 0: break heights = data[i+1:i+1+n] max_diff = 0 for j in range(n): for k in range(j+1, n): diff = heights[k] - heights[j] if diff > max_diff: max_diff = diff results.append(max_diff) i += n + 1 return results"},{"question":"Emma is an enthusiastic hiker who plans to hike a mountain that has a unique network of trails. The mountain is represented as a directed acyclic graph (DAG) where each vertex corresponds to a resting point, and each directed edge represents a trail with a specific length. Emma starts at the base (vertex 0) and aims to reach the summit (vertex (N-1)) following the paths defined by the trails. However, Emma is concerned with the length of her hike and wants to determine the shortest possible path to the summit. To help her decide if a trail is worth taking, she needs you to calculate the shortest path length from the base to each resting point. Your task is to compute the minimum distance from the starting vertex (0) to each other vertex, and specifically ensure that the summing path calculations adhere to the conditions of a DAG. -----Input----- The first line contains two integers (1 leq N leq 1000) and (0 leq M leq frac{N(N-1)}{2}), the number of resting points and the number of trails, respectively. Next (M) lines follow, each describing a trail with three integers (0 leq u, v < N) and (1 leq l leq 10^4), where (u) and (v) are the start and end points of the trail, respectively, and (l) is the length of the trail. -----Output----- Output a single line containing (N) integers, where the (i^{th}) integer represents the shortest distance from the base (vertex 0) to vertex (i). If vertex (i) is not reachable from the base, output ( -1). -----Examples----- Sample Input: 5 6 0 1 2 0 2 4 1 2 1 1 3 7 2 3 3 3 4 1 Sample Output: 0 2 3 6 7","solution":"from collections import defaultdict, deque import sys def shortest_paths_in_dag(n, m, trails): # Initialize the graph as an adjacency list and in-degrees count graph = defaultdict(list) in_deg = [0] * n for u, v, l in trails: graph[u].append((v, l)) in_deg[v] += 1 # Initialize distances with infinity and set distance to base (0) to 0 distances = [sys.maxsize] * n distances[0] = 0 # Topological sorting using Kahn\'s algorithm zero_in_deg_q = deque([i for i in range(n) if in_deg[i] == 0]) top_order = [] while zero_in_deg_q: node = zero_in_deg_q.popleft() top_order.append(node) for neighbor, weight in graph[node]: in_deg[neighbor] -= 1 if in_deg[neighbor] == 0: zero_in_deg_q.append(neighbor) # Relax edges in topological order for u in top_order: if distances[u] != sys.maxsize: for v, l in graph[u]: if distances[u] + l < distances[v]: distances[v] = distances[u] + l # Replace unreachable nodes\' distances with -1 return [dist if dist != sys.maxsize else -1 for dist in distances]"},{"question":"Create a function that takes an array of strings as input and returns an array of strings where each string contains the names and total sale of all authors ranked by their total sales in descending order. If two authors have the same total sale, order them alphabetically by their names. The input array represents daily book sales and contains entries in the format `\\"author,sale\\"`, where `author` is a string containing the author\'s name (only letters and spaces) and `sale` is an integer representing the number of books sold that day by the author. # Constraints - The input array has at most 1000 elements. - Each string in the input array is formatted correctly and contains non-empty author names and valid integer sales. - An author\'s name may appear multiple times in the array. # Example Input: ```python [ \\"John Doe,5\\", \\"Jane Smith,3\\", \\"John Doe,7\\", \\"Jane Smith,1\\", \\"John Doe,2\\", \\"Jane Smith,4\\" ] ``` Output: ```python [ \\"John Doe,14\\", \\"Jane Smith,8\\" ] ``` # Note In the example, `John Doe` has a total sale of `14` (5 + 7 + 2) and `Jane Smith` has a total sale of `8` (3 + 1 + 4). John Doe is ranked higher because his total sale is greater.","solution":"def aggregate_sales(sales): Aggregates sales for each author and returns a list where each element is a string containing the author\'s name and total sales, sorted by total sales in descending order and alphabetically by authors\' names in case of ties. Args: sales: List of strings where each string is in the format \\"author,sale\\". Returns: List of strings where each string is in the format \\"author,total_sale\\". from collections import defaultdict # Dictionary to store total sales per author sales_dict = defaultdict(int) # Aggregate sales for entry in sales: author, sale = entry.split(\',\') sale = int(sale) sales_dict[author] += sale # Convert dictionary into list sorted by total sales and then by author names result = sorted(sales_dict.items(), key=lambda x: (-x[1], x[0])) # Format the output result = [f\\"{author},{total_sale}\\" for author, total_sale in result] return result"},{"question":"Given a string S, determine if it is a valid palindrome, considering only alphanumeric characters and ignoring cases. A palindrome is a word, phrase, or sequence that reads the same backward as forward. Input - First line contains an integer T (number of test cases). - Next T lines each contain a string S. Constraints 1 ≤ T ≤ 100 1 ≤ Length of S ≤ 10^5 Output For each test case, output \\"YES\\" if the string is a valid palindrome and \\"NO\\" if it is not. SAMPLE INPUT 3 A man, a plan, a canal: Panama race a car No \'x\' in Nixon SAMPLE OUTPUT YES NO YES","solution":"def is_valid_palindrome(s): Determines if a string is a valid palindrome, considering only alphanumeric characters and ignoring cases. Parameters: s (str): The input string to be checked. Returns: bool: True if the string is a valid palindrome, False otherwise. # Filter and normalize the string filtered_chars = [c.lower() for c in s if c.isalnum()] # Check if the filtered string is a palindrome return filtered_chars == filtered_chars[::-1] def check_palindromes(test_cases): Given a list of strings, check if each string is a valid palindrome. Parameters: test_cases (List[str]): List of input strings. Returns: List[str]: List of \\"YES\\" or \\"NO\\" for each input string. results = [] for s in test_cases: if is_valid_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a list of integers, write a function `find_largest_mirror_section(arr)` that finds the largest mirror section in the array. A mirror section in an array is a sub-sequence that reads the same forwards and backwards. For example, in the array `[1, 2, 3, 8, 9, 3, 2, 1]`, the largest mirror section is `[1, 2, 3]`. The function should return an integer representing the length of the largest mirror section within the input list. # Function Signature ```python def find_largest_mirror_section(arr: List[int]) -> int: pass ``` # Input - `arr` (List[int]): A list of integers, where each integer is between -10^6 and 10^6 and the length of the list is between 1 and 500. # Output - An integer representing the length of the largest mirror section within the given list. # Examples ```python find_largest_mirror_section([1, 2, 3, 8, 9, 3, 2, 1]) # Output: 3 find_largest_mirror_section([7, 1, 4, 9, 7, 4, 1]) # Output: 2 find_largest_mirror_section([1, 2, 1, 4]) # Output: 3 find_largest_mirror_section([1, 4, 5, 3, 5, 4, 1]) # Output: 7 ``` # Notes - You can assume that the input list will contain at least one element. - Try different strategies to optimize the runtime of your solution, bearing in mind the time complexity constraints for handling lists of up to 500 elements.","solution":"def find_largest_mirror_section(arr): n = len(arr) max_len = 0 for i in range(n): for j in range(n): length = 0 while (i + length < n) and (j - length >= 0) and (arr[i + length] == arr[j - length]): length += 1 max_len = max(max_len, length) return max_len"},{"question":"You are given two identical strings s1 and s2 and asked to create a third string s3 by interleaving the characters of s1 and s2. Specifically, the interleaving should maintain the order of characters from both original strings. An interleaving of two strings s1 and s2 is defined as a string that contains all characters of s1 and s2, and preserves the order of characters from each string. You need to determine if it is possible to create the third string s3 by interleaving s1 and s2. If multiple interleavings are possible, print any of them. If it is not possible, print \\"Not Interleavable\\". -----Input----- The first line contains the string s1. The second line contains the string s2. The third line contains the string s3. All strings consist of lowercase English letters. The length of each string is between 1 and 100 inclusive. -----Output----- If the interleaving is possible, print a valid interleaved string. If it is not possible, print \\"Not Interleavable\\". -----Examples----- Input abc def adbcef Output adbcef Input abc def abdfec Output Not Interleavable Input cat dog cdaotg Output cdaotg Input aaa bbb ababab Output ababab -----Note----- In the first sample, by taking characters alternatively from s1 and s2, we can form the string adbcef. In the second sample, there is no way to form the string abdfec while maintaining the order of characters from s1 and s2. In the third sample, the string cdaotg is formed naturally by interleaving cat and dog. In the fourth sample, the string ababab is considered as a valid interleaving of the strings aaa and bbb.","solution":"def is_interleaving(s1, s2, s3): Determines if s3 is an interleaving of s1 and s2. n, m, t = len(s1), len(s2), len(s3) if n + m != t: return \\"Not Interleavable\\" dp = [[False] * (m + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1] for j in range(1, m + 1): dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1] for i in range(1, n + 1): for j in range(1, m + 1): dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i+j-1]) or (dp[i][j-1] and s2[j-1] == s3[i+j-1]) return s3 if dp[n][m] else \\"Not Interleavable\\""},{"question":"Nina has a unique collection of rare stones of different colors, represented as lowercase letters in a string. She wants to create beautiful patterns using these stones. A pattern is considered beautiful if it contains alternating colors without any consecutive stones of the same color. Given a string of stones, determine the maximum number of stones Nina can include in a beautiful pattern. Input: The first line contains an integer T, the number of test cases. Each of the following T lines contains a string S, representing Nina\'s collection of stones. Output: For each test case, output a single integer denoting the maximum number of stones that can be included in a beautiful pattern. Constraints and Example Input: 3 abacaba xyz aaabb Output: 7 3 2 Explanation: For the first test case, the longest beautiful pattern is \\"abacaba\\". For the second test case, the longest beautiful pattern is \\"xyz\\". For the third test case, the longest beautiful pattern is \\"ab\\".","solution":"def max_beautiful_pattern_length(stones): Given a string of stones, determine the maximum number of stones that can be included in a beautiful pattern which contains alternating colors without any consecutive stones of the same color. :param stones: List of strings, each representing a collection of stones. :return: List of integers, each representing the maximum number of stones in a beautiful pattern. results = [] for s in stones: if not s: results.append(0) continue max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] != s[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) results.append(max_length) return results"},{"question":"We have a rectangular grid of size N x M where each cell contains either 0 or 1. You can perform the following operation as many times as you want: Pick any rectangular subgrid and flip all 0s to 1s and all 1s to 0s in that subgrid. Your task is to determine the minimum number of operations required to make all cells in the grid contain the same value (either all 0s or all 1s). -----Constraints----- - 1 ≤ N, M ≤ 1000 - The grid contains only 0s and 1s - All input values are integers -----Input----- Input is given from Standard Input in the following format: N M Grid Where Grid is an N x M matrix of 0s and 1s, with each element separated by a space and each row on a new line. -----Output----- Print the minimum number of operations required. -----Sample Input----- 2 3 0 1 0 1 0 1 -----Sample Output----- 1","solution":"def min_operations_to_uniform_grid(N, M, grid): Given a grid of size N x M with 0s and 1s, determines the minimum number of operations required to make all cells in the grid contain the same value (either all 0s or all 1s). The operation involves flipping all bits in any rectangular subgrid. :param N: int, number of rows in the grid :param M: int, number of columns in the grid :param grid: list of list of int, the grid of 0s and 1s :return: int, the minimum number of operations total_zeros = sum(row.count(0) for row in grid) total_ones = N * M - total_zeros if total_zeros == 0 or total_ones == 0: return 0 return 1 # Utility function to parse input from standard input def parse_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [] index = 2 for _ in range(N): grid.append([int(x) for x in data[index:index + M]]) index += M return N, M, grid if __name__ == \\"__main__\\": N, M, grid = parse_input() print(min_operations_to_uniform_grid(N, M, grid))"},{"question":"Given an array of integers, the task is to find if there are two distinct indices i and j in the array such that the absolute difference between the integers at those indices is equal to a given value k. Write a function to return `true` if such a pair of indices exists, otherwise return `false`. Input format: - An integer array `arr` where 1 leq arr.length leq 10^5 and -10^9 leq arr[i] leq 10^9. - An integer k where 0 leq k leq 10^9. Output format: - Return `true` if there exists at least one pair of indices with the given difference, otherwise `false`. Constraints: - The elements in the array can be any integer, positive or negative. - Indices i and j must be different. Example: Sample Input 1: ``` arr = [1, 5, 3, 4, 2] k = 2 ``` Sample Output 1: ``` true ``` Explanation 1: There are pairs with the difference of 2, such as (5, 3), (3, 1), (4, 2), etc. Sample Input 2: ``` arr = [1, 3, 1, 5, 4] k = 0 ``` Sample Output 2: ``` true ``` Explanation 2: There are pairs with the difference of 0, such as (1, 1), etc. Sample Input 3: ``` arr = [1, 2, 3, 4, 5] k = 10 ``` Sample Output 3: ``` false ``` Explanation 3: There are no pair of elements with a difference of 10.","solution":"def contains_pair_with_difference(arr, k): Checks if there are two distinct indices i and j in the array such that the absolute difference between the integers at those indices is equal to k. seen = set() for num in arr: if (num + k) in seen or (num - k) in seen: return True seen.add(num) return False"},{"question":"You are managing a warehouse with multiple sections. Each section has a specific number of packages that need to be transported. To facilitate the transportation, a sequence of conveyor belts is used. Each conveyor belt can move the packages from one section to another. The speed of a conveyor belt is measured as the number of packages it can transport per hour. However, there is a restriction: A conveyor belt can only transport packages to the next section if the number of those packages does not exceed the capacity of the next section. If the capacity of the next section is exceeded, transportation halts. Given the capacities of each section and the speeds of each conveyor belt connecting these sections, determine the maximum number of packages that can be transported from the first to the last section in one hour. Input The first line of input contains a single integer n (2 ≤ n ≤ 100,000) — the number of sections in the warehouse (including the first and last sections). The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1,000,000) — the capacities of each section. The third line contains n-1 integers s1, s2, ..., sn-1 (1 ≤ si ≤ 1,000,000) — the speeds of each conveyor belt between the sections. The i-th conveyor belt connects section i and section i+1. Output Print a single integer — the maximum number of packages that can be transported from the first to the last section in one hour. Examples Input 5 10 5 8 7 10 4 4 4 4 Output 4 Input 3 7 6 5 10 3 Output 3 Note In the first sample case, due to the speed limits and the capacities of each section, the maximum number of packages that can be transported from the first to the last section is 4. In the second sample case, even though the conveyor belt between the first and second section can transport 10 packages per hour, the second section can only handle 3 packages per hour, limiting the effective transportation to 3 packages per hour.","solution":"def max_packages_transported(n, capacities, speeds): Determines the maximum number of packages that can be transported from the first to the last section in one hour. :param n: Number of sections in the warehouse :param capacities: List of capacities of each section :param speeds: List of speeds of each conveyor belt :return: Maximum number of packages that can be transported in one hour max_packages = float(\'inf\') for i in range(n - 1): max_packages = min(max_packages, capacities[i], speeds[i]) max_packages = min(max_packages, capacities[-1]) return max_packages"},{"question":"In a small town, there is a festival where people decorate their houses with colored lights. Each house has N lights and each light can be one of two colors: red or blue. You are given a string representing the arrangement of lights in a house. A red light is represented by \'R\' and a blue light by \'B\'. For example, if the string is \\"RBRB\\", it means the first light is red, the second is blue, the third is red, and the fourth is blue. Your task is to determine the minimum number of lights that need to be changed (either from red to blue or from blue to red) so that no two consecutive lights have the same color. Input: The first line contains the number of test cases T. Each test case contains a single string representing the arrangement of lights in a house. Output: Print the answer on a new line for each case. Constraints: 1 ≤ T ≤ 100 1 ≤ Length of string ≤ 10^5 SAMPLE INPUT 2 RBRB RRB SAMPLE OUTPUT 0 1","solution":"def min_changes_needed(lights): Calculate the minimum number of changes required so that no two consecutive lights have the same color. changes_red_start = 0 # Start with \'R\' changes_blue_start = 0 # Start with \'B\' for i in range(len(lights)): if i % 2 == 0: # Even index should be \'R\' if starting with \'R\', \'B\' if starting with \'B\' if lights[i] != \'R\': changes_red_start += 1 if lights[i] != \'B\': changes_blue_start += 1 else: # Odd index should be \'B\' if starting with \'R\', \'R\' if starting with \'B\' if lights[i] != \'B\': changes_red_start += 1 if lights[i] != \'R\': changes_blue_start += 1 return min(changes_red_start, changes_blue_start) def process_test_cases(test_cases): Process each test case and return list of results. results = [] for lights in test_cases: results.append(min_changes_needed(lights)) return results"},{"question":"Ella is organizing a music concert and she needs to schedule performances of different bands. Each band has a specific start and end time for their performance, and Ella wants to make sure that no two performances overlap. Given a list of performance time intervals (start and end times), determine the maximum number of non-overlapping performances that can be scheduled. Example 1: Input: intervals = [(1, 4), (2, 3), (3, 5), (7, 8)] Output: 3 Explanation: The maximum number of non-overlapping performances is 3, and one possible selection is: [(2, 3), (3, 5), (7, 8)] Example 2: Input: intervals = [(1, 2), (2, 3), (3, 4), (4, 5)] Output: 4 Explanation: All performances can be scheduled without any overlap. Your Task: You don\'t need to read input or print anything. Complete the function maxPerformances() that takes a list of intervals as input and returns the maximum number of non-overlapping performances. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 1000 Where, N is the number of intervals. Each interval is represented as a tuple (start, end) with constraints: 0 ≤ start < end ≤ 10^4.","solution":"def maxPerformances(intervals): This function takes a list of performance intervals and returns the maximum number of non-overlapping performances. # Sort the intervals based on their end time intervals.sort(key=lambda x: x[1]) # Initialize variables to keep track of the number of non-overlapping intervals and the end time of the last added interval count = 0 end_time = 0 for interval in intervals: if interval[0] >= end_time: count += 1 end_time = interval[1] return count"},{"question":"You are given a list of integers arr and an integer k. Your task is to partition the list into k contiguous subarrays such that the maximum sum of the subarrays is minimized. Return the minimized maximum sum. For example, given arr=[7,2,5,10,8] and k=2, the best partition would be: - Subarray 1: [7, 2] => Sum = 9 - Subarray 2: [5, 10, 8] => Sum = 23 The minimized maximum sum is 9. Function Description Complete the `minimizeMaxSum` function in the editor below. It should return an integer representing the minimized maximum sum of the subarrays. `minimizeMaxSum` has the following parameter: - arr: a list of integers - k: an integer representing the number of subarrays Input Format The first line contains an integer n, the number of elements in arr. The next line contains n space-separated integers. The third line contains an integer k. Constraints 1 leq n leq 1000 1 leq arr[i] leq 10000 1 leq k leq n Output Format Print the minimized maximum sum on a new line. Sample Input 5 7 2 5 10 8 2 Sample Output 18 Explanation The optimal way to partition the array is: - Subarray 1: [7, 2, 5] => Sum = 14 - Subarray 2: [10, 8] => Sum = 18 So, the minimized maximum sum is 18.","solution":"def canPartition(arr, k, maxSum): currentSum = 0 requiredPartitions = 1 for num in arr: currentSum += num if currentSum > maxSum: requiredPartitions += 1 currentSum = num if requiredPartitions > k: return False return True def minimizeMaxSum(arr, k): low = max(arr) high = sum(arr) while low < high: mid = (low + high) // 2 if canPartition(arr, k, mid): high = mid else: low = mid + 1 return low"},{"question":"You have been hired by a library to design a new book catalog system. The library wants to efficiently search for books by title and author. Books are identified by unique ISBN numbers. Your task is to write a program that allows for the following: 1. Adding a new book to the catalog. 2. Removing a book from the catalog. 3. Searching for books by title (should return all matching titles). 4. Searching for books by author (should return all books written by that author). All book titles and author names are case-insensitive. ISBNs are unique and alphanumeric. You can assume that no two books have the same titles and that every operation affects the catalog in a case-insensitive manner. Input The input begins with an integer `q` representing the number of queries. Each query can be one of the following four types: 1. `ADD <ISBN> <TITLE> <AUTHOR>`: Add a book with the given ISBN, title, and author. (both title and author can have spaces). 2. `REMOVE <ISBN>`: Remove the book with the given ISBN. 3. `SEARCH_TITLE <TITLE>`: Search for books by the given title (case-insensitive). 4. `SEARCH_AUTHOR <AUTHOR>`: Search for books by the given author (case-insensitive). Output For `SEARCH_TITLE` queries, output all matching titles in the format `ISBN: TITLE by AUTHOR`, one per line. For `SEARCH_AUTHOR` queries, output all books by the given author in the format `ISBN: TITLE by AUTHOR`, one per line. For `ADD` and `REMOVE` queries, there is no output. Examples Input ``` 8 ADD 978-0-321-49686-5 The Mythical Man-Month Frederick P. Brooks Jr. ADD 978-1-56592-326-4 Design Patterns Erich Gamma SEARCH_TITLE Design Patterns REMOVE 978-1-56592-326-4 SEARCH_TITLE Design Patterns ADD 978-0-201-48597-5 Introduction To Algorithms Thomas H. Cormen SEARCH_AUTHOR Thomas H. Cormen SEARCH_AUTHOR Frederick P. Brooks Jr. ``` Output ``` 978-1-56592-326-4: Design Patterns by Erich Gamma 978-0-201-48597-5: Introduction To Algorithms by Thomas H. Cormen 978-0-321-49686-5: The Mythical Man-Month by Frederick P. Brooks Jr. ``` Note: - Ensure that your program handles case-insensitivity for all queries involving titles and authors. - Handle the details of string parsing and storage accurately to match books based on the given titles and authors correctly. - Pay attention to how books are removed and ensure that after a `REMOVE` operation, the book should no longer be found in searches.","solution":"class BookCatalog: def __init__(self): self.catalog = {} def add_book(self, isbn, title, author): title_key = title.lower() author_key = author.lower() self.catalog[isbn] = {\\"title\\": title, \\"author\\": author, \\"title_key\\": title_key, \\"author_key\\": author_key} def remove_book(self, isbn): if isbn in self.catalog: del self.catalog[isbn] def search_by_title(self, title): title_key = title.lower() results = [ f\\"{isbn}: {book[\'title\']} by {book[\'author\']}\\" for isbn, book in self.catalog.items() if book[\'title_key\'] == title_key ] return results def search_by_author(self, author): author_key = author.lower() results = [ f\\"{isbn}: {book[\'title\']} by {book[\'author\']}\\" for isbn, book in self.catalog.items() if book[\'author_key\'] == author_key ] return results"},{"question":"You have been tasked to create a banking system that handles certain financial operations. The system manages accounts for customers and processes transactions between them. Your goal is to implement a simple transaction processing system based on a given set of operations. There are three types of operations that the system must support: 1. Deposit: Add a specified amount to a customer\'s account. 2. Withdraw: Deduct a specified amount from a customer\'s account if sufficient funds are available. 3. Transfer: Transfer a specified amount from one customer\'s account to another customer\'s account if sufficient funds are available. Each customer is identified by a unique ID and starts with a balance of 0. -----Input----- The first line contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with an integer n representing the number of operations. Each of the next n lines contains an operation in the format: - \\"DEPOSIT customerID amount\\" for deposit operations, - \\"WITHDRAW customerID amount\\" for withdrawal operations, or - \\"TRANSFER fromCustomerID toCustomerID amount\\" for transfer operations. -----Output----- For each test case, output the final balances of all customers in the order of their first transaction appearance. Output balances in the format \\"customerID balance\\". -----Constraints----- 1 ≤ T ≤ 100 1 ≤ n ≤ 100 1 ≤ customerID ≤ 10^9 1 ≤ amount ≤ 10^6 -----Example----- Input: 2 3 DEPOSIT 1 100 WITHDRAW 1 50 TRANSFER 1 2 20 2 DEPOSIT 3 500 WITHDRAW 4 200 Output: 1 30 2 20 3 500 4 0 -----Explanation----- Example case 1: 1. After depositing 100 to customer 1, the balance is 100. 2. After withdrawing 50 from customer 1, the balance is 50. 3. After transferring 20 from customer 1 to customer 2, customer 1 has 30 and customer 2 has 20. Example case 2: 1. After depositing 500 to customer 3, the balance is 500. 2. Since customer 4 does not exist prior to the withdrawal, their balance remains 0.","solution":"def process_transactions(transactions): Process a list of transactions and returns final balances of all involved customers. customers = {} for transaction in transactions: details = transaction.split() operation = details[0] if operation == \\"DEPOSIT\\": customer_id = int(details[1]) amount = int(details[2]) if customer_id not in customers: customers[customer_id] = 0 customers[customer_id] += amount elif operation == \\"WITHDRAW\\": customer_id = int(details[1]) amount = int(details[2]) if customer_id not in customers: customers[customer_id] = 0 if customers[customer_id] >= amount: customers[customer_id] -= amount elif operation == \\"TRANSFER\\": from_customer_id = int(details[1]) to_customer_id = int(details[2]) amount = int(details[3]) if from_customer_id not in customers: customers[from_customer_id] = 0 if to_customer_id not in customers: customers[to_customer_id] = 0 if customers[from_customer_id] >= amount: customers[from_customer_id] -= amount customers[to_customer_id] += amount return customers def process_input(input_data): input_lines = input_data.split(\\"n\\") T = int(input_lines[0]) idx = 1 results = [] for _ in range(T): n = int(input_lines[idx]) idx += 1 transactions = input_lines[idx:idx + n] idx += n final_balances = process_transactions(transactions) for customer_id in sorted(final_balances): results.append(f\\"{customer_id} {final_balances[customer_id]}\\") return \\"n\\".join(results)"},{"question":"Alex recently bought a cooking timer that can help him keep track of his baking. The timer can be set for any amount of time in minutes but can only display time in hours and minutes (hh: mm format). However, Alex realizes that he, unfortunately, set the timer incorrectly and now he needs to adjust it. Given the incorrect time set on the timer and the correct time he wants to set, determine the minimum adjustments in hours and minutes needed to reset the timer. An adjustment is defined as changing either the hours or minutes of the timer by any integer value. Find the minimum total adjustments required to make the timer show the correct time. For instance, if the timer shows 02:30 and Alex wants it to show 03:55, he can make one adjustment to change the hours from 02 to 03 and another to change the minutes from 30 to 55, resulting in a total of 2 adjustments. -----Input----- The input consists of two lines: - The first line contains the current time set on the timer in hh: mm format. - The second line contains the correct time in hh: mm format that Alex wants to set. Both times are in a 24-hour format (00: 00 to 23: 59). -----Output----- Print an integer representing the minimum number of adjustments needed. -----Examples----- Input 02:30 03:55 Output 2 Input 13:45 13:45 Output 0 -----Note----- In the first example, Alex needs to change the hours from 02 to 03 and the minutes from 30 to 55, resulting in a total of 2 adjustments. In the second example, the timer is already set to the desired time, so no adjustments are required.","solution":"def minimum_adjustments(current_time, correct_time): # Parse hours and minutes from the time strings current_hours, current_minutes = map(int, current_time.split(\':\')) correct_hours, correct_minutes = map(int, correct_time.split(\':\')) # Determine the number of adjustments needed adjustments = 0 if current_hours != correct_hours: adjustments += 1 if current_minutes != correct_minutes: adjustments += 1 return adjustments"},{"question":"Given an array of positive integers, your task is to find the maximum product that can be obtained by multiplying exactly three distinct elements from the array. Input Specification The first line contains an integer `n` (3 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers, each between 1 and 10^9, representing elements of the array. Output Specification Output the maximum product that can be obtained by multiplying exactly three distinct elements from the array. Example Sample Input: 5 1 10 2 6 5 Sample Output: 300 Sample Input: 4 1 2 3 4 Sample Output: 24","solution":"def max_product_of_three(nums): Given an array of positive integers, find the maximum product of three distinct elements. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[-1] * nums[0] * nums[1]) # Sample input n = 5 nums = [1, 10, 2, 6, 5] print(max_product_of_three(nums)) # Output: 300"},{"question":"You are tasked to create a command line tool that assists in the organization and management of employee data for a small company. The program should allow adding new employees, removing employees, and querying employees by department or their years of experience. The employee records must be stored in memory only while the program is running. Each employee has the following details: - Employee ID (a unique integer) - Name (a string) - Department (a string) - Years of Experience (an integer) The program should support the following operations through a simple text-based menu: 1. Add a new employee. 2. Remove an employee by Employee ID. 3. List all employees in a specific department. 4. List all employees with at least a specified number of years of experience. 5. Exit the program. Implement this functionality with a User Interface (UI) that allows users to select an operation and input the necessary details when prompted. After each operation, the menu should be displayed again until the user chooses to exit. -----Input----- The input will be through standard input with multiple lines for different operations and their required parameters. 1. For adding a new employee, prompt for Employee ID, Name, Department, and Years of Experience. 2. For removing an employee, prompt for Employee ID. 3. For listing employees by department, prompt for Department name. 4. For listing employees by years of experience, prompt for minimum Years of Experience. -----Output----- For each operation, the program should output the results accordingly: 1. After adding a new employee, confirm the addition with a message. 2. After removing an employee, confirm the removal or indicate if the employee does not exist. 3. For listing by department, display the Employee ID and Name of each employee in that department. 4. For listing by years of experience, display the Employee ID and Name of each employee meeting the experience criteria. 5. On exiting the program, display a goodbye message. -----Example----- Sample interaction of the program: Menu: 1. Add a new employee 2. Remove an employee 3. List employees by department 4. List employees by years of experience 5. Exit Enter choice: 1 Enter Employee ID: 101 Enter Name: John Doe Enter Department: Engineering Enter Years of Experience: 5 Employee added. Menu: 1. Add a new employee 2. Remove an employee 3. List employees by department 4. List employees by years of experience 5. Exit Enter choice: 3 Enter Department: Engineering Employees in Engineering: 101 John Doe Menu: 1. Add a new employee 2. Remove an employee 3. List employees by department 4. List employees by years of experience 5. Exit Enter choice: 5 Goodbye!","solution":"class EmployeeManager: def __init__(self): self.employees = {} def add_employee(self, emp_id, name, department, years_of_experience): if emp_id in self.employees: return \\"Employee ID already exists.\\" self.employees[emp_id] = { \'name\': name, \'department\': department, \'years_of_experience\': years_of_experience } return \\"Employee added.\\" def remove_employee(self, emp_id): if emp_id not in self.employees: return \\"Employee does not exist.\\" del self.employees[emp_id] return \\"Employee removed.\\" def list_employees_by_department(self, department): result = [] for emp_id, details in self.employees.items(): if details[\'department\'] == department: result.append(f\\"{emp_id} {details[\'name\']}\\") return result def list_employees_by_experience(self, min_years): result = [] for emp_id, details in self.employees.items(): if details[\'years_of_experience\'] >= min_years: result.append(f\\"{emp_id} {details[\'name\']}\\") return result def display_menu(self): return Menu: 1. Add a new employee 2. Remove an employee 3. List employees by department 4. List employees by years of experience 5. Exit"},{"question":"Chef is designing a terrarium and he wants to place different species of plants into various sections. Each section of the terrarium is represented as a segment of a straight line, and each species of plant can be planted in intervals on this line. There are N sections in the terrarium, each section being a continuous segment from L_i to R_i (both inclusive). Each species of plant can only be planted continuously in some segment within the terrarium. Chef wants to plant the species in such a way that no two species overlap within any section of the terrarium. Given a list of Q queries on intervals for planting the species, determine if each query can be planted without overlapping with any existing species that have already been planted in the terrarium. If a section of plants can be planted in the query interval without overlapping, mark it as \\"Yes\\", otherwise mark it as \\"No\\". ------ Input ------ The first line contains two integers, N (the number of sections) and Q (the number of queries). The next N lines each contain two integers L_i and R_i, which represent the i^{th} section of the terrarium. The next Q lines each contain two integers L_q and R_q, representing the query interval from L_q to R_q. ------ Output ------ For each query, print \\"Yes\\" if the species of plants can be planted in the interval without overlapping with any already defined sections, otherwise print \\"No\\". ------ Constraints ------ 1 ≤ N, Q ≤ 100,000 1 ≤ L_i, R_i, L_q, R_q ≤ 10^9 L_i ≤ R_i L_q ≤ R_q ----- Sample Input 1 ------ 3 3 1 5 10 15 20 25 6 9 5 10 30 35 ----- Sample Output 1 ------ Yes No Yes ----- Explanation 1 ------ For the first query, the interval [6, 9] does not overlap with any of the previously defined sections. For the second query, the interval [5, 10] overlaps with the section [1, 5] and the section [10, 15]. For the third query, the interval [30, 35] does not overlap with any of the previously defined sections.","solution":"def can_plant_section(N, sections, Q, queries): results = [] # Sort the sections by start point for easier comparison sections.sort() for L_q, R_q in queries: # Check for overlap with any of the sections overlap = False for L_i, R_i in sections: if L_q <= R_i and R_q >= L_i: overlap = True break if overlap: results.append(\\"No\\") else: results.append(\\"Yes\\") return results"},{"question":"Given an unsorted array of N integers and a sum K, find all unique pairs of elements in the array that add up to the sum K. Example 1: Input: N = 5, K = 9, array = [2, 7, 4, 5, 3] Output: [(2, 7), (4, 5)] Example 2: Input: N = 4, K = 6, array = [1, 5, 1, 0] Output: [(5, 1)] Your Task: You don\'t need to read or print anything. Your task is to complete the function findPairs() which takes the array and integer K as input parameters and returns a list of unique pairs (as tuples) that add up to the sum K. Make sure the pairs are sorted in ascending order and the result list does not contain duplicate pairs. Expected Time Complexity: O(N log N) Expected Space Complexity: O(N) Constraints: 1 ≤ N ≤ 10^5 -10^6 ≤ array[i] ≤ 10^6","solution":"def findPairs(array, K): Finds all unique pairs of elements in the array that add up to sum K. Args: array: List of integers. K: Target sum. Returns: List of tuples with unique pairs that sum up to K. array.sort() pairs = set() seen = {} for num in array: complement = K - num if complement in seen: pair = (min(num, complement), max(num, complement)) pairs.add(pair) seen[num] = True return sorted(pairs)"},{"question":"You are given a grid with R rows and C columns. Each cell in the grid can either be passable (\'.\') or impassable (\'#\'). You start in the top-left cell (1, 1) and want to reach the bottom-right cell (R, C). You can only move to the right or down at each step. Your task is to count the number of distinct paths from the top-left to the bottom-right of the grid. Each time you move to a cell that is impassable (\'#\'), you must turn back and consider a different path (i.e., you cannot pass through or land on impassable cells). Write a function that takes the grid as an input and returns the number of distinct paths from the top-left to the bottom-right cell mod 1,000,000,007. Constraints * 1 ≤ R, C ≤ 1000 * The grid will contain only the characters \'.\' and \'#\'. * The start (1, 1) and end (R, C) cells are guaranteed to be passable (\'.\'). Input The input is provided in the following format: R C grid lines (each containing exactly C characters) Output Print the number of distinct paths from the top-left to the bottom-right of the grid, modulo 1,000,000,007. Examples Input 3 3 ... .#. ... Output 2 Input 3 3 # .#. ... Output 0 Input 1 1 . Output 1","solution":"MOD = 1000000_007 def num_paths(grid): R = len(grid) C = len(grid[0]) # DP table to store the number of ways to reach each cell dp = [[0] * C for _ in range(R)] # Starting point if grid[0][0] == \'.\': dp[0][0] = 1 # Fill the DP table for i in range(R): for j in range(C): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[R-1][C-1] % MOD # Function to handle input and output def solve(): import sys input = sys.stdin.read data = input().split() R, C = int(data[0]), int(data[1]) grid = [list(data[i + 2]) for i in range(R)] print(num_paths(grid))"},{"question":"You are given an array of integers representing the time required to complete each task. There is a worker who can do one task per day. However, there is a special mechanism called \\"skip\\" which can be used exactly once. When the worker uses the \\"skip\\" mechanism, the worker can select any task and skip it, meaning that task will no longer contribute to the total number of days needed to complete all remaining tasks. You need to calculate the minimum total number of days required to complete all tasks, considering the optimal use of the \\"skip\\" mechanism. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. - Each of the next T lines contains: - A single integer N — the number of tasks. - An array of N integers where each integer represents the time required to complete the corresponding task. ------ Output Format ------ For each test case, output on a new line a single integer — the minimum total number of days required to complete all tasks, with the optimal use of the \\"skip\\" mechanism. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} 1 ≤ t[i] ≤ 10^{4} The sum of N across all test cases does not exceed 10^6. ----- Sample Input ------ 3 5 1 2 3 4 5 4 1 2 2 1 1 10 ----- Sample Output ------ 10 4 0 ----- Explanation ------ In the first example, the optimal way is to skip the task with the highest time (5) and the total number of days required is 1+2+3+4=10. In the second example, the optimal way is to skip the task with the highest time (2) and the total number of days required is 1+2+1=4. In the third example, there is only one task and using the \\"skip\\" mechanism on it will result in 0 days required to complete the tasks.","solution":"def minimum_days_with_skip(tasks): Calculate the minimum days required to complete all tasks with one skip. :param tasks: List of integers representing time required for each task. :return: An integer representing the minimum days required. task_sum = sum(tasks) if len(tasks) == 0: return 0 max_task_time = max(tasks) return task_sum - max_task_time def process_test_cases(test_cases): results = [] for tasks in test_cases: results.append(minimum_days_with_skip(tasks)) return results"},{"question":"Given an integer array A of size N, and two integers K and M, determine the number of unique arrays you can form by keeping exactly K elements and replacing the rest with any integer from 1 to M (inclusive). Two arrays are considered unique if they are different in at least one position. ------ Input: ------ The first line contains an integer T, the number of test cases. Each test case contains three lines of input. The first line contains three integers N, K, and M, the size of the array, the number of elements to keep, and the range limit for replacement. The second line contains N space-separated integers representing the array A. ------ Output: ------ For each test case, output the number of unique arrays that can be formed in a single line. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ N ≤ 100 1 ≤ K ≤ N 1 ≤ M ≤ 100 1 ≤ A[i] ≤ 10^9 ------ Sample Input 1 ------ 2 5 2 5 2 3 1 4 5 3 1 3 7 8 9 ------ Sample Output 1 ------ 2187 9 ------ Explanation 1 ------ Case 1: The array A is of length 5. We need to keep exactly 2 elements and replace the other 3 with any integer from 1 to 5. For each of the binom{5}{2} = 10 options to keep 2 elements, there are 5^3 = 125 ways to fill the remaining 3 elements. This results in 10 * 125 = 1250 unique arrays. Case 2: The array A is of length 3. We need to keep exactly 1 element and replace the other 2 with any integer from 1 to 3. For each of the binom{3}{1} = 3 options to keep 1 element, there are 3^2 = 9 ways to fill the remaining 2 elements. This results in 3 * 9 = 27 unique arrays.","solution":"def factorial(n): if n == 0 or n == 1: return 1 return n * factorial(n - 1) def binomial_coefficient(n, k): return factorial(n) // (factorial(k) * factorial(n - k)) def count_unique_arrays(N, K, M): return binomial_coefficient(N, K) * (M ** (N - K)) def process_test_cases(test_cases): results = [] for test in test_cases: N, K, M = test[0] A = test[1] results.append(count_unique_arrays(N, K, M)) return results # Read input def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) K = int(data[index+1]) M = int(data[index+2]) A = list(map(int, data[index+3:index+3+N])) test_cases.append(((N, K, M), A)) index += 3 + N results = process_test_cases(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"In this exercise, you will need to create a function called `weatherProcessor`. This function will take a list of tuples as its input, where each tuple contains a string representing the day of the week and an integer representing the temperature in Fahrenheit for that day. The function should return a dictionary where the keys are the days of the week and the values are another dictionary with two keys: `\\"Celsius\\"` and `\\"Weather\\"`. The `\\"Celsius\\"` key should map to the temperature in Celsius, and the `\\"Weather\\"` key should map to a string describing the weather. The weather descriptions are as follows: - If the temperature in Fahrenheit is above 85, the weather is \\"Hot\\". - If the temperature in Fahrenheit is between 60 and 85 (inclusive), the weather is \\"Warm\\". - If the temperature in Fahrenheit is below 60, the weather is \\"Cold\\". Keep in mind that the conversion from Fahrenheit to Celsius is given by the formula: [ text{Celsius} = (text{Fahrenheit} - 32) times frac{5}{9} ] Ready?","solution":"def weatherProcessor(weather_data): Processes a list of tuples containing weather information and returns a dictionary with weather details in Celsius and weather descriptions. :param weather_data: List of tuples, where each tuple contains: - a string representing the day of the week - an integer representing the temperature in Fahrenheit :return: Dictionary where keys are days of the week and values are another dictionary with \\"Celsius\\" and \\"Weather\\" keys. def fahrenheit_to_celsius(fahrenheit): return (fahrenheit - 32) * 5.0 / 9.0 result = {} for day, fahrenheit in weather_data: celsius = round(fahrenheit_to_celsius(fahrenheit), 2) if fahrenheit > 85: weather = \\"Hot\\" elif 60 <= fahrenheit <= 85: weather = \\"Warm\\" else: weather = \\"Cold\\" result[day] = { \\"Celsius\\": celsius, \\"Weather\\": weather } return result"},{"question":"You are given two strings s and t of length n, consisting of lowercase English letters. You need to determine the minimum number of operations required to make the string s equal to the string t. In one operation, you can choose a contiguous substring of s and rotate it to the left or right. For example, rotating the substring \\"abc\\" to the left results in \\"bca\\", and rotating it to the right results in \\"cab\\". You need to write a function to find the minimum number of operations required to make s equal to t. -----Input----- The first line contains an integer n (1 le n le 10^5), the length of the strings s and t. The second line contains the string s. The third line contains the string t. -----Output----- Print a single integer, the minimum number of operations required to make s equal to t. If it is impossible, print -1. -----Examples----- Input 4 abcd bcda Output 1 Input 6 abcabc abcabc Output 0 Input 3 abc def Output -1 -----Note----- In the first test case, rotating the entire string s = \\"abcd\\" to the left once results in s = \\"bcda\\", which equals t. In the second test case, s is already equal to t, so no operations are required. In the third test case, there is no sequence of rotations that can transform s into t, so the answer is -1.","solution":"def min_operations_to_equal_strings(n, s, t): Returns the minimum number of operations required to make the string `s` equal to the string `t` using left or right rotations on contiguous substrings of `s`. if sorted(s) != sorted(t): return -1 concatenated_s = s + s for i in range(n): if concatenated_s[i:i+n] == t: return i return -1"},{"question":"Task Given a grid with dimensions `m x n`, where each cell represents either land (`1`) or water (`0`), find the number of distinct islands in the grid. An island is surrounded by water and formed by connecting adjacent land cells horizontally or vertically. Assume all four edges of the grid are surrounded by water. An island is considered distinct if and only if none of its land cells are shared with another island. Examples # Example 1: **Input:** ``` grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] ``` **Output:** ``` 3 ``` # Example 2: **Input:** ``` grid = [ [1, 0, 0, 1, 0], [1, 0, 0, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 0, 0] ] ``` **Output:** ``` 3 ``` # Example 3: **Input:** ``` grid = [ [0, 0, 0], [0, 0, 0], [0, 0, 0] ] ``` **Output:** ``` 0 ```","solution":"def count_distinct_islands(grid): Returns the number of distinct islands in the grid. if not grid: return 0 m, n = len(grid), len(grid[0]) visited = [[False for _ in range(n)] for _ in range(m)] def dfs(x, y): if x < 0 or y < 0 or x >= m or y >= n or visited[x][y] or grid[x][y] == 0: return visited[x][y] = True dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) count = 0 for i in range(m): for j in range(n): if grid[i][j] == 1 and not visited[i][j]: dfs(i, j) count += 1 return count"},{"question":"Rahul loves playing with sequences and patterns. He is particularly interested in finding out certain properties of character sequences. Given a string S of length N containing only lowercase English letters, Rahul wants to process Q queries. In each query, he is given two integers L and R, and he needs to determine if the substring S[L-1 .. R-1] (1-indexed) is a palindrome or not. A palindrome is a word, number, phrase, or other sequence of characters which reads the same backward as forward (ignoring spaces, punctuation, and capitalization). For example, for the string S = \\"abccba\\": - The substring S[1 .. 6] which is \\"abccba\\" is a palindrome. - The substring S[2 .. 4] which is \\"bcc\\" is not a palindrome. - The substring S[3 .. 5] which is \\"ccb\\" is not a palindrome. ------ Input ------ The first line contains two space-separated integers N and Q. The second line contains the string S. Q lines follow. Each line contains two space-separated integers L and R describing a query. ------ Output ------ For each query, output \\"YES\\" if the substring is a palindrome, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ Q ≤ 10^{5} 1 ≤ L ≤ R ≤ N ------ Subtasks ------ Subtask #1 (20 points): 1 ≤ N, Q ≤ 100 Subtask #2 (80 points): original constraints ----- Sample Input 1 ------ 6 3 abccba 1 6 2 4 3 5 ----- Sample Output 1 ------ YES NO NO ------ Explanation 1 ------ For the first query, the substring \\"abccba\\" is a palindrome. For the second query, the substring \\"bcc\\" is not a palindrome. For the third query, the substring \\"ccb\\" is not a palindrome.","solution":"def is_palindrome_query(S, queries): Check if the given substrings are palindromes. Parameters: S (str): The input string. queries (list of tuple): A list of queries, each containing two integers L and R. Returns: list: A list of strings \\"YES\\" or \\"NO\\" for each query. results = [] for L, R in queries: substring = S[L-1:R] if substring == substring[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a rectangular grid containing only the characters \'.\' and \'#\'. Each \'.\' represents an empty cell, and each \'#\' represents a blocked cell. Your task is to find the number of unique paths from the top-left corner (0, 0) to the bottom-right corner (R-1, C-1) of the grid, where R is the number of rows and C is the number of columns. Movements are allowed only to the right and down, and paths cannot go through blocked cells. Input The input consists of a series of test cases. Each test case is given in the following format: R C grid_row_1 grid_row_2 . . . grid_row_R R and C are the number of rows and columns of the grid, respectively. Each of the following R lines contains a string of length C consisting of characters \'.\' and \'#\'. The input is terminated by R = C = 0. Output For each test case, output the number of unique paths from the top-left corner to the bottom-right corner, or \\"Impossible\\" (without quotes) if no such path exists. Example Input 3 3 ... .#. ... 2 2 .# 0 0 Output 2 Impossible","solution":"def num_unique_paths(R, C, grid): # If start or end is blocked, return \\"Impossible\\" if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return \\"Impossible\\" dp = [[0 for _ in range(C)] for _ in range(R)] dp[0][0] = 1 for i in range(R): for j in range(C): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[R-1][C-1] if dp[R-1][C-1] != 0 else \\"Impossible\\" def parse_input(input_str): lines = input_str.split(\'n\') index = 0 results = [] while index < len(lines): R, C = map(int, lines[index].split()) if R == 0 and C == 0: break index += 1 grid = [] for _ in range(R): grid.append(lines[index]) index += 1 result = num_unique_paths(R, C, grid) results.append(result) return results"},{"question":"You are given a text containing portions of an HTML document. Your task is to extract and print all the URLs present in the `src` attribute of `<img>` tags and the `href` attribute of `<a>` tags. **Input Format** The input consists of multiple lines of text forming an HTML document. **Constraints** - The number of lines in the HTML document does not exceed 100. - Each URL in the `src` or `href` attribute does not contain any spaces. - The tags and attributes are written in lowercase. **Output Format** Print each URL on a new line in the order they appear in the HTML document. **Sample Input** ``` <html> <head> <title>Sample HTML</title> </head> <body> <p>Here is an image:</p> <img src=\\"http://example.com/image1.png\\" alt=\\"Image 1\\"> <p>Here is a link:</p> <a href=\\"http://example.com/page1.html\\">Visit Page 1</a> <img src=\\"http://example.com/image2.jpg\\" alt=\\"Image 2\\"> <a href=\\"http://example.com/page2.html\\">Visit Page 2</a> </body> </html> ``` **Sample Output** ``` http://example.com/image1.png http://example.com/page1.html http://example.com/image2.jpg http://example.com/page2.html ```","solution":"import re def extract_urls(html_lines): Extracts and prints all URLs present in the src attribute of <img> tags and the href attribute of <a> tags from provided HTML content. pattern = re.compile(r\'(src|href)=\\"(http.*?)\\"\') urls = [] for line in html_lines: matches = pattern.findall(line) for match in matches: urls.append(match[1]) return urls"},{"question":"In a programming competition, each participant has to solve a certain number of problems, and their final score is determined by the sum of the points they score for each problem solved. Each participant starts with a score of zero. However, solving problems may incur a penalty which is subtracted from their total score as per the competition rules. Given the list of problems solved by each participant along with the points and penalties, determine the final score of each participant. ---Input:--- - The first line contains an integer P denoting the number of participants. - For each participant, the first line contains an integer N denoting the number of problems solved by the participant. - The next N lines each contain two integers - a and b, where a is the points scored for solving the problem and b is the penalty incurred. ---Output:--- - For each participant, output a single line containing their final score. ---Constraints--- - 1 leq P leq 50 - 1 leq N leq 100 - 1 leq a leq 100 - 0 leq b leq 50 ---Sample Input--- 2 3 10 4 15 2 20 0 2 8 1 20 5 ---Sample Output--- 39 22 ---Explanation--- For the first participant: 1. Initial score: 0 2. Solving first problem: 0 + 10 - 4 = 6 3. Solving second problem: 6 + 15 - 2 = 19 4. Solving third problem: 19 + 20 - 0 = 39 Final score for the first participant is 39. For the second participant: 1. Initial score: 0 2. Solving first problem: 0 + 8 - 1 = 7 3. Solving second problem: 7 + 20 - 5 = 22 Final score for the second participant is 22.","solution":"def calculate_final_scores(P, data): Returns the final scores of participants after solving all problems. Parameters: P (int): Number of participants data (list of lists): List containing problem scores and penalties for each participant Returns: list of int: Final scores of each participant final_scores = [] index = 0 for _ in range(P): N = data[index] index += 1 score = 0 for _ in range(N): a = data[index] b = data[index + 1] score += a - b index += 2 final_scores.append(score) return final_scores"},{"question":"------------------------------------------------------------------ **Tree Depth First Search with Incomplete Nodes** Task: You will receive a binary tree where some nodes may have missing children. The tree is represented as a nested list where each node has the format `[value, left, right]`, `left` being the left subtree and `right` being the right subtree. If a node is missing a child, it is represented by `null`. Implement a function `depth_first_search` that performs a pre-order traversal of this tree, and returns a list of visited nodes\' values in the order they were visited. # Input - A nested list with the structure described above. # Output - A list of integers representing the values of the nodes in the order they were visited during the pre-order traversal. # Function Signature ```python def depth_first_search(tree: Optional[List]) -> List[int]: ``` # Example ```python tree = [1, [2, [4, None, None], None], [3, None, [5, None, None]]] depth_first_search(tree) ``` # Output ```python [1, 2, 4, 3, 5] ``` # Constraints - The number of nodes in the tree will be in the range [0, 1000]. - Node values are integers and unique. - The data is well-formed as a binary tree. # Note - Pre-order traversal means visiting the root node first, then the left subtree, and finally the right subtree. - Ensure the function correctly navigates through nodes that may be `null`. # Hints 1. You may want to write a helper function to facilitate the recursion. 2. Consider edge cases such as an empty tree. ------------------------------------------------------------------","solution":"from typing import Optional, List def depth_first_search(tree: Optional[List]) -> List[int]: Perform a pre-order traversal of the binary tree represented as a nested list. Args: tree: A list representing the binary tree in the format [value, left, right]. `left` and `right` can be `None` or another tree list. Returns: A list of integers representing the values of the nodes in the order they were visited. def dfs(node): if node is None: return [] value, left, right = node return [value] + dfs(left) + dfs(right) if tree is None: return [] return dfs(tree)"},{"question":"You are given an array of integers representing the temperature measurements recorded at different times throughout the day. The task is to determine the maximum temperature difference between any two measurements, such that the earlier measurement is recorded before the later one. Example 1: Input: temperatures = [73, 74, 75, 71, 69, 72, 76, 73] Output: 7 Explanation: The maximum difference is between temperatures[4] = 69 and temperatures[6] = 76, yielding a difference of 76 - 69 = 7. Example 2: Input: temperatures = [30, 40, 50, 60, 70] Output: 40 Explanation: The maximum difference is between temperatures[0] = 30 and temperatures[4] = 70, yielding a difference of 70 - 30 = 40. Your Task: Your task is to complete the function `maxTemperatureDifference()` which takes an integer array `temperatures` as the input parameter and returns an integer denoting the maximum temperature difference as described above. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 1 <= temperatures.length <= 10^5 - -10^4 <= temperatures[i] <= 10^4","solution":"def maxTemperatureDifference(temperatures): This function returns the maximum temperature difference between any two measurements, where the earlier measurement is before the later one. if not temperatures or len(temperatures) < 2: return 0 min_temperature = temperatures[0] max_diff = 0 for temperature in temperatures[1:]: if temperature - min_temperature > max_diff: max_diff = temperature - min_temperature if temperature < min_temperature: min_temperature = temperature return max_diff"},{"question":"You are given a grid-based game map consisting of several levels, each with obstacles and a goal. Your task is to navigate a player from a start position to a goal position using a series of commands, while avoiding obstacles and adhering to the boundaries of the map. The map is represented as a 2-dimensional grid of size N × M, where each cell can be: - \'.\' (empty cell, can be traversed) - \'#\' (obstacle, cannot be traversed) - \'S\' (start position, the initial location of the player) - \'G\' (goal position, the target location the player needs to reach) The player can move up, down, left, or right based on commands given as a sequence of characters: \'U\' (up), \'D\' (down), \'L\' (left), \'R\' (right). The input for each level consists of the following sections: 1. Two integers, N and M, representing the number of rows and columns of the grid. 2. N lines of M characters each representing the game map. After the map, an integer C is given representing the number of commands. Following this, a string of C characters representing the sequence of commands. You need to output \\"Success\\" if the player reaches the goal \'G\' after processing all commands, otherwise output \\"Failure\\". The program should continue to read input levels until N and M are both zero. # Constraints: * 2 ≤ N, M ≤ 50 * 1 ≤ C ≤ 1000 * There is exactly one \'S\' and one \'G\' in each level. # Input ``` N M [level grid] C [commands] ... 0 0 ``` # Output ``` Success or Failure for each level ``` # Example Input ``` 5 5 ..... ..#.S ..... ...#. ...G. 8 RRRRDDDL 2 2 SG .. 4 DRUL 0 0 ``` Output ``` Success Failure ``` # Explanation In the first level, the player starts at (2, 4) and follows the commands: - \'R\' moves to (2, 5) - \'R\' moves to (2, 5) - \'R\' moves to (2, 5) - \'R\' moves to (2, 5) - \'D\' moves to (3, 5) - \'D\' moves to (4, 5) - \'D\' moves to (5, 5) - \'L\' moves to (5, 4) - which is the goal, so output \\"Success\\". In the second level, the player starts at (1, 1) and follows the commands: - \'D\' moves to (2, 1) - \'R\' moves to (2, 2) - \'U\' moves to (1, 2) - \'L\' moves to (1, 1) - ends back at start without reaching goal, so output \\"Failure\\".","solution":"def navigate_game_map(N, M, grid, C, commands): # Finding the start position \'S\' for i in range(N): for j in range(M): if grid[i][j] == \'S\': start_pos = (i, j) if grid[i][j] == \'G\': goal_pos = (i, j) x, y = start_pos for command in commands: if command == \'U\': new_x, new_y = x - 1, y elif command == \'D\': new_x, new_y = x + 1, y elif command == \'L\': new_x, new_y = x, y - 1 elif command == \'R\': new_x, new_y = x, y + 1 else: continue # Check boundaries and avoid obstacles if 0 <= new_x < N and 0 <= new_y < M and grid[new_x][new_y] != \'#\': x, y = new_x, new_y if (x, y) == goal_pos: return \\"Success\\" else: return \\"Failure\\" def process_input(input_text): input_lines = input_text.strip().split(\'n\') idx = 0 results = [] while True: N, M = map(int, input_lines[idx].split()) idx += 1 if N == 0 and M == 0: break grid = [] for _ in range(N): grid.append(input_lines[idx].strip()) idx += 1 C = int(input_lines[idx]) idx += 1 commands = input_lines[idx].strip() idx += 1 result = navigate_game_map(N, M, grid, C, commands) results.append(result) return results # Example input processing def main(): import sys input_text = sys.stdin.read() results = process_input(input_text) for result in results: print(result)"},{"question":"A software company is analyzing the performance of its employees. Each employee is assigned a unique ID, and they have records of their assigned tasks. Each task is represented by a tuple containing the start time, end time, and a task ID. The company wants to find out if there are any overlapping tasks assigned to the same employee. Your task is to write a program to determine if any overlapping tasks exist for each employee. Two tasks are considered overlapping if they share at least one time unit. -----Input----- The first line of input contains an integer T representing the number of test cases. Each test case starts with an integer E representing the number of employees. For each employee, the first line contains an integer N representing the number of tasks. This is followed by N lines, each containing three integers: `start`, `end`, and `task_id`. -----Output----- For each test case and each employee, output \\"YES\\" if there are overlapping tasks, otherwise \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ E ≤ 100 - 1 ≤ N ≤ 10^4 - 1 ≤ start < end ≤ 10^6 - 1 ≤ task_id ≤ 10^6 -----Example----- Input: 2 2 3 1 3 101 2 5 102 4 6 103 2 1 2 201 2 3 202 1 2 2 5 301 5 6 302 Output: YES NO NO -----Explanation----- Test Case 1: Employee 1 has tasks (1, 3, 101), (2, 5, 102), and (4, 6, 103). Tasks 101 and 102 overlap as they both contain time unit 2 and 3. Hence, the output is \\"YES\\". Employee 2 has tasks (1, 2, 201) and (2, 3, 202). These tasks do not overlap, hence the output is \\"NO\\". Test Case 2: Employee 1 has tasks (2, 5, 301) and (5, 6, 302). These tasks do not overlap as one ends exactly when the other starts, hence the output is \\"NO\\".","solution":"def check_overlapping_tasks(T, data): results = [] for i in range(T): test_case = data[i] number_of_employees = test_case[0] results.append([]) idx = 1 for _ in range(number_of_employees): number_of_tasks = test_case[idx] idx += 1 tasks = [] for __ in range(number_of_tasks): start, end, _ = test_case[idx] idx += 1 tasks.append((start, end)) tasks.sort(key=lambda x: x[0]) overlap = False for j in range(1, len(tasks)): if tasks[j][0] < tasks[j-1][1]: overlap = True break if overlap: results[-1].append(\\"YES\\") else: results[-1].append(\\"NO\\") return results"},{"question":"You are given a string S consisting of lowercase alphabets. Your task is to determine if it\'s possible to rearrange the characters of S such that no two identical characters are adjacent to each other. If it\'s possible, print the rearranged string. If no such arrangement exists, print \\"NO\\". -----Input:----- A single line with a string S containing only lowercase alphabets. -----Output:----- A single rearranged string where no two identical characters are adjacent, or \\"NO\\" if no such arrangement is possible. -----Constraints:----- - 1 leq |S| leq 1000 (where |S| denotes the length of the string). -----Sample input 1:----- aabb -----Sample output 1:----- abab -----Sample input 2:----- aaab -----Sample output 2:----- NO","solution":"from collections import Counter import heapq def rearrange_string(S): Rearranges the characters of S such that no two identical characters are adjacent. If no such arrangement exists, returns \\"NO\\". :param S: A string consisting of lowercase alphabets. :return: A rearranged string where no identical characters are adjacent or \\"NO\\". if not S: return \\"\\" # Count frequency of each character char_count = Counter(S) # Create a max-heap based on negative frequencies (for max-heap behavior in Python which uses min-heap by default) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # If there was a previously used character waiting to be pushed back into the heap if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update previous character info prev_count, prev_char = count + 1, char result_str = \'\'.join(result) if len(result_str) == len(S): return result_str else: return \\"NO\\""},{"question":"You are given an integer array `nums` and an integer `target`. Your task is to find out whether there exist two distinct indices i and j in the array such that `nums[i] + nums[j] == target`. If such indices exist, return true; otherwise, return false. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: true Explanation: nums[0] + nums[1] = 2 + 7 = 9 Example 2: Input: nums = [1, 2, 3, 4, 5], target = 10 Output: false Explanation: There are no two distinct indices that add up to 10. Your Task: You don\'t need to print or input anything. Complete the function `twoSumExists()` which takes an integer array `nums` and an integer `target` as the input parameters and returns a boolean, denoting whether such a pair exists. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: * 1 <= nums.length <= 10^4 * -10^9 <= nums[i] <= 10^9 * -10^9 <= target <= 10^9","solution":"def twoSumExists(nums, target): Determine if there exist two distinct indices i and j in the array such that nums[i] + nums[j] == target. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"You are given a sequence of n characters consisting of \'R\', \'G\', and \'B\'. The characters represent the color of stones arranged on a line. Your task is to determine the minimum number of stones to remove such that, after removal, no two adjacent stones have the same color. Input The first line of the input contains one integer n (1 ≤ n ≤ 10^5), which represents the number of stones. The second line contains a sequence of n characters (\'R\', \'G\', \'B\'). Output Print a single integer — the minimum number of stones to remove. Examples Input 3 RRG Output 1 Input 5 RRRRG Output 3 Input 4 RGBR Output 0 Note In the second example, you can remove three \'R\' stones to make the sequence \\"RG\\", or \\"RGR\\", or \\"RRG\\", or \\"RGRG\\". All of these sequences have no two adjacent stones of the same color. If n = 1, no removal is needed, so the output will be 0.","solution":"def min_removals_to_avoid_adjacent_same_color(n, stones): Returns the minimum number of stones to remove such that no two adjacent stones have the same color. if n <= 1: return 0 removals = 0 for i in range(1, n): if stones[i] == stones[i-1]: removals += 1 return removals"},{"question":"In an isolated village, the local carpenters build a series of structural elements, each of which depends on the previously built elements in a specific way. The village has a rule that the height of a newly built wall must be equal to the sum of heights of some set of earlier walls. Given the heights of walls when they are built, you want to determine the maximum height that can be achieved by any wall built according to the village rule. -----Input----- The first line of input contains a single integer N (1 ≤ N ≤ 100,000), representing the number of walls built. The following N lines each contain an integer h_i (1 ≤ h_i ≤ 1,000,000,000), the height of the i-th wall when it is built chronologically. -----Output----- Output a single integer, the maximum height that can be achieved by any wall built according to the village rule. -----Examples----- Sample Input 1: 6 1 2 3 6 7 8 Sample Output 1: 21 Sample Input 2: 4 5 10 15 20 Sample Output 2: 50 Sample Explanation: For Sample Input 1, the maximum height that can be achieved is by summing walls with heights (8, 7, 6). For Sample Input 2, the maximum height that can be achieved is by summing walls with heights (20, 15, 10, 5).","solution":"def maximum_wall_height(n, heights): Returns the maximum height that can be achieved by any wall built according to the village rule. Parameters: n (int): Number of walls built. heights (list of int): List of heights of the walls. Returns: int: Maximum height that can be achieved by any wall. total_height = sum(heights) # The sum of all wall heights return total_height # Example usage # n = 6 # heights = [1, 2, 3, 6, 7, 8] # print(maximum_wall_height(n, heights)) # Should print 27"},{"question":"You are traveling through a grid-based city where you can only move either right or down at each step. The city is represented as an m times n grid. Your goal is to determine how many unique paths exist from the top-left corner of the grid (starting at (0,0)) to the bottom-right corner (ending at (m-1,n-1)). -----Input----- The first line contains an integer t (1 le t le 50) — the number of test cases. The following t lines each contain two integers m and n (1 le m, n le 100) — representing the dimensions of the grid. -----Output----- For each test case, output a single integer — the number of unique paths. -----Examples----- Input 3 3 7 3 2 7 3 Output 28 3 28 -----Note----- In the first test case, with a 3x7 grid, 28 unique paths exist from (0,0) to (2,6) by only moving right or down. In the second test case, with a 3x2 grid, there are 3 unique paths. In the third test case, with a 7x3 grid, there are 28 unique paths.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner in an m x n grid. # Create a 2D list to store the number of unique paths to reach each cell dp = [[1] * n for _ in range(m)] # Fill the dp array using the relation dp[i][j] = dp[i-1][j] + dp[i][j-1] for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1] def solve(t, test_cases): results = [] for m, n in test_cases: results.append(unique_paths(m, n)) return results"},{"question":"Given N strings of lowercase alphabets, each string can be rearranged as many times as needed, determine if there is any pair of strings (str1, str2) such that str1 + str2 (concatenated) is a palindrome. If such a pair exists, return \\"YES\\", otherwise return \\"NO\\". ------ Input Format ------ - The first line contains an integer T, denoting the number of test cases. Then the test cases follow. - Each test case begins with a single integer N, denoting the number of strings. - The next N lines contain one string each. ------ Output Format ------ For each test case, output in a single line \\"YES\\" if there exists at least one pair of strings such that their concatenation forms a palindrome. Otherwise, output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ text{length of each string} ≤ 10^5 The sum of lengths of all strings in a test case does not exceed 10^6. ------ Sample Input 1 ------ 2 3 abc cba xyz 2 ab ba ------ Sample Output 1 ------ YES YES ------ Explanation 1 ------ Test case 1: The pairs (\\"abc\\", \\"cba\\") or (\\"cba\\", \\"abc\\") concatenated form \\"abccba\\" or \\"cbaabc\\" which are palindromes. Test case 2: The pairs (\\"ab\\", \\"ba\\") or (\\"ba\\", \\"ab\\") concatenated form \\"abba\\" or \\"baab\\" which are palindromes.","solution":"def can_form_palindrome(test_cases): def is_palindrome(s): return s == s[::-1] answers = [] for strings in test_cases: seen = set() has_palindrome_pair = False for s in strings: reverse = s[::-1] if reverse in seen: has_palindrome_pair = True break seen.add(s) if has_palindrome_pair: answers.append(\\"YES\\") else: answers.append(\\"NO\\") return answers"},{"question":"You are tasked with simulating a simplified dice game and calculating the expected value of a player\'s score based on specified dice rolls. In this game, a player rolls a six-sided die a certain number of times. Each face of the die has a unique score value instead of the typical 1 through 6 values: - Face 1: 10 points - Face 2: 2 points - Face 3: 5 points - Face 4: 8 points - Face 5: -6 points (negative points) - Face 6: 0 points Given an input array where each element represents the outcome of each dice roll, your task is to compute the expected value of the player\'s score. The expected value is the average score that a player can expect to achieve over many rolls. Write a function `expectedValue(diceRolls)`, where `diceRolls` is an array of integers representing the outcomes of dice rolls (each integer between 1 and 6 inclusive). The function should return the expected value, rounded to 2 decimal places. # Example ```python expectedValue([1, 2, 3, 4, 5, 6]) => 3.17 expectedValue([1, 1, 1, 6, 6, 6]) => 5.00 expectedValue([5, 5, 5, 5, 5, 5]) => -6.00 expectedValue([2, 4, 3, 2, 4, 3]) => 5.00 ``` # Notes - The input array will contain at least one dice roll and at most 1000 dice rolls. - You may assume the input values are always valid integers between 1 and 6 inclusive. - The expected value should be computed considering the assigned points for each dice face as described above.","solution":"def expectedValue(diceRolls): Returns the expected value of the player\'s score based on specified dice rolls. points_mapping = { 1: 10, 2: 2, 3: 5, 4: 8, 5: -6, 6: 0 } total_score = sum(points_mapping[roll] for roll in diceRolls) expected_value = total_score / len(diceRolls) return round(expected_value, 2)"},{"question":"Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell. The distance between two adjacent cells is 1. Example 1: Input: mat = [[0,0,0],[0,1,0],[0,0,0]] Output: [[0,0,0],[0,1,0],[0,0,0]] Example 2: Input: mat = [[0,0,0],[0,1,0],[1,1,1]] Output: [[0,0,0],[0,1,0],[1,2,1]] Constraints: - m == mat.length - n == mat[i].length - 1 <= m, n <= 10^4 - 1 <= m * n <= 10^4 - mat[i][j] is either 0 or 1. - There is at least one 0 in mat.","solution":"from collections import deque def updateMatrix(mat): Given an m x n binary matrix mat, returns the distance of the nearest 0 for each cell. Parameters: mat (List[List[int]]): A 2D binary matrix filled with 0\'s and 1\'s Returns: List[List[int]]: A 2D matrix where each cell contains the distance to the nearest 0 if not mat: return mat rows, cols = len(mat), len(mat[0]) dist = [[float(\'inf\')] * cols for _ in range(rows)] queue = deque() # Start with all the positions with 0 in queue for r in range(rows): for c in range(cols): if mat[r][c] == 0: dist[r][c] = 0 queue.append((r, c)) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Process the queue while queue: r, c = queue.popleft() for dr, dc in directions: rr, cc = r + dr, c + dc if 0 <= rr < rows and 0 <= cc < cols: if dist[rr][cc] > dist[r][c] + 1: dist[rr][cc] = dist[r][c] + 1 queue.append((rr, cc)) return dist"},{"question":"Write a function that takes an input string, which contains only lowercase alphabetic characters, and returns its \\"strength\\" based on the following criteria: `a = 1, b = 2, ..., z = 26`. The strength of the string is simply the sum of the values of its characters. For example: - Input: \\"hello\\" - Output: 52 - Input: \\"world\\" - Output: 72 Implement your solution in the form of a Python function called `calculate_strength` that takes a single argument (the input string) and returns the strength (an integer). ```python def calculate_strength(s): return sum(ord(char) - 96 for char in s) ```","solution":"def calculate_strength(s): Given an input string containing only lowercase alphabetic characters, this function returns the strength of the string based on: a = 1, b = 2, ..., z = 26. Args: s (str): The input string. Returns: int: The strength of the string. return sum(ord(char) - ord(\'a\') + 1 for char in s)"},{"question":"Sarah is fascinated with palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. For example, `121` is a palindromic number, but `123` is not. Sarah wants to find the largest palindromic number smaller than a given positive integer `x`. Input Format A single integer denoting `x`. Constraints 10 leq x leq 10^5 Output Format Print the largest palindromic number smaller than `x`. Sample Input 0 123 Sample Output 0 121 Explanation 0 Among the numbers smaller than 123, the largest palindromic number is 121. Thus, we print 121 as our answer.","solution":"def largest_palindromic_number_smaller_than_x(x): Returns the largest palindromic number smaller than x. for num in range(x-1, 9, -1): # Start from x-1 and go down to 10 if str(num) == str(num)[::-1]: # Check if the number is palindromic return num return None # This should never happen given the constraints"},{"question":"Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exist, return false. Example 1: Input: nums = [1, 2, 3, 4, 5] Output: true Explanation: There exists a triple (1, 2, 3) where 1 < 2 < 3. Example 2: Input: nums = [5, 4, 3, 2, 1] Output: false Explanation: No such triple exists. Your Task: You don\'t need to read input or print anything. Complete the function increasingTriplet() which takes nums as input parameter and returns true if there exists a triplet of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k], otherwise return false. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9","solution":"def increasingTriplet(nums): Returns true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k], otherwise returns false. first = second = float(\'inf\') for num in nums: if num <= first: first = num elif num <= second: second = num else: return True return False"},{"question":"Anna is working on a word puzzle in which she needs to transform a starting word into a target word by changing one character at a time. Each intermediate transformation must also be a valid word that exists in a given dictionary, and each word in the dictionary has the same length as the starting and target words. Anna wants to know the minimum number of transformations required to convert the starting word to the target word. If it is not possible to transform the starting word into the target word using the dictionary, return -1. Your task is to write a program that helps Anna determine the minimum number of transformations. Input The input contains multiple lines: - The first line contains an integer n (1 ≤ n ≤ 50) — the number of words in the dictionary. - The second line contains the starting word. - The third line contains the target word. - The next n lines contain words of the same length as the starting and target words, each on a new line. Output Output one number — the minimum number of transformations needed to convert the starting word to the target word. If it is not possible, output -1. Examples Input 5 hit cog hot dot dog lot log Output 4 Input 3 abc def ghi jkl mno Output -1","solution":"from collections import deque def min_transformations(n, start, target, dictionary): if start == target: return 0 word_set = set(dictionary) queue = deque([(start, 0)]) while queue: current_word, steps = queue.popleft() for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word == target: return steps + 1 if next_word in word_set: queue.append((next_word, steps + 1)) word_set.remove(next_word) return -1"},{"question":"A music streaming service is preparing for a special event where they offer users personalized playlists based on their favorite genres. Each user provides a rating for multiple songs in different genres. The goal is to construct a unique playlist for each user by selecting the highest-rated song from each genre they\'ve rated at least one song in. Input: - The first line contains an integer `u`, the number of users. - The next `u` segments contain: - The first line of each segment contains an integer `g`, the number of genres the user has rated songs in. - The following `g` lines, each containing a single genre name, an integer `s` (the number of songs rated in that genre), followed by `s` pairs of song name and rating (integer). Output: - For each user, output the genre, the highest-rated song name in that genre and its rating, separated by commas in the format: `Genre: SongName (Rating)`. - Separate the output for different users with an empty line. Constraints: 1 ≤ u ≤ 100 1 ≤ g ≤ 20 1 ≤ s ≤ 100 1 ≤ Rating ≤ 10000 1 ≤ Length of SongName, Genre ≤ 50 SAMPLE INPUT 2 2 Rock 3 HotelCalifornia 85 StairwayToHeaven 95 BohemianRhapsody 90 Pop 2 BlindingLights 88 Levitating 80 3 Jazz 2 SoWhat 75 TakeFive 80 Classical 1 FurElise 93 HipHop 1 SickoMode 78 SAMPLE OUTPUT Rock: StairwayToHeaven (95) Pop: BlindingLights (88) Jazz: TakeFive (80) Classical: FurElise (93) HipHop: SickoMode (78)","solution":"def create_playlists(data): result = [] idx = 0 num_users = data[idx] idx += 1 for _ in range(num_users): num_genres = data[idx] idx += 1 user_playlist = [] for _ in range(num_genres): genre_info = data[idx].split() genre = genre_info[0] num_songs = int(genre_info[1]) songs = genre_info[2:] idx += 1 highest_rated_song = \\"\\" highest_rating = -1 for i in range(num_songs): song_name = songs[2 * i] rating = int(songs[2 * i + 1]) if rating > highest_rating: highest_rating = rating highest_rated_song = song_name user_playlist.append(f\\"{genre}: {highest_rated_song} ({highest_rating})\\") result.append(\\"n\\".join(user_playlist)) return \\"nn\\".join(result)"},{"question":"You are given a list of integers representing the heights of buildings in a row. Your task is to find the largest rectangle that can be formed within these buildings. The rectangle must be formed by choosing some subset of contiguous buildings, and its height is determined by the shortest building in this subset. For example, if the array is `[2, 1, 5, 6, 2, 3]`, the largest rectangle is `[5, 6]` with a height of `5` and width of `2`, giving an area of `5 * 2 = 10`. Write a function `largestRectangleArea` that: - Takes a list `heights` of non-negative integers representing the heights of buildings. - Returns an integer representing the largest rectangle area that can be formed. # Example: ```python def largestRectangleArea(heights): # Your implementation here # Example 1 print(largestRectangleArea([2, 1, 5, 6, 2, 3])) # Output: 10 # Example 2 print(largestRectangleArea([1, 2, 3, 4, 5])) # Output: 9 # Example 3 print(largestRectangleArea([5, 4, 3, 2, 1])) # Output: 9 # Example 4 print(largestRectangleArea([2, 4, 2, 1, 10, 6, 10])) # Output: 18 ``` # Constraints: - Each building height will be at most `10^4`. - The number of buildings `n` will be at most `10^5`. This problem requires you to think about efficient data structures and algorithms to handle potentially large inputs within a reasonable timeframe. Look into optimizing your approach for calculating the largest rectangular area efficiently.","solution":"def largestRectangleArea(heights): Finds the largest rectangle that can be formed within the heights of buildings. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top = stack.pop() height = heights[top] width = index if not stack else index - stack[-1] - 1 max_area = max(max_area, height * width) while stack: top = stack.pop() height = heights[top] width = index if not stack else index - stack[-1] - 1 max_area = max(max_area, height * width) return max_area"},{"question":"In a magical school, there are n students enrolled in a special magic course. Each student has a unique magical ability value a_i (an integer from 1 to n). The course consists of m exams, and the j-th exam tests students\' proficiency in a specific subset of magical abilities, represented by the range l_j to r_j (both inclusive). For each exam, the instructor wants to determine the number of students whose magical ability value lies within the specified range. Your task is to help the instructor by providing the required information for each exam. -----Input----- The first line contains two integers n and m (1 le n, m le 200000) — the number of students and the number of exams. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le n) — the magical ability values of the students. The next m lines contain two integers each, l_j and r_j (1 le l_j le r_j le n) — the range of magical abilities tested in the j-th exam. -----Output----- Print m integers, where the j-th integer corresponds to the number of students whose magical ability value is within the range l_j to r_j. -----Examples----- Input 5 3 1 2 3 4 5 1 3 2 4 3 5 Output 3 3 3 Input 6 2 1 3 5 6 2 4 2 5 3 6 Output 4 4","solution":"def count_students_in_ranges(n, m, abilities, queries): from collections import Counter # Count occurrence of each ability ability_counts = Counter(abilities) # Create a prefix sum array to quickly calculate students count in any range prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + ability_counts.get(i, 0) # Process each query results = [] for l, r in queries: count = prefix_sum[r] - prefix_sum[l - 1] results.append(count) return results # Example usage n, m = 5, 3 abilities = [1, 2, 3, 4, 5] queries = [(1, 3), (2, 4), (3, 5)] print(count_students_in_ranges(n, m, abilities, queries)) # Output: [3, 3, 3]"},{"question":"Write a function that takes a single sentence as input, and returns the sentence with all the words reversed but the order of the words retained. Input The input contains a single string sentence s (1 ≤ len(s) ≤ 1000), where each word is a sequence of characters separated by spaces. Output Output the resulting string after reversing all the individual words in the sentence. Example Input hello world Output olleh dlrow","solution":"def reverse_words(sentence): Returns the sentence with all the words reversed but the order of the words retained. return \' \'.join(word[::-1] for word in sentence.split())"},{"question":"The city of Gotham is being attacked by a mysterious villain who plans to blackout the entire city. To prevent this, the city\'s security system has a backup generator that needs to be activated by inputting a code. The code is a sequence of numbers that should follow a specific pattern. Given a sequence of digits, determine whether it can be rearranged to form a sequence where no two adjacent digits are the same. Input Format A single line which contains the input sequence of digits. Constraints 1≤ length of the sequence ≤10^5 Each character in the sequence is a digit from 0 to 9. Output Format A single line which contains YES or NO in uppercase. SAMPLE INPUT 122221 SAMPLE OUTPUT NO Explanation In the sample input, there is no way to rearrange the digits such that no two adjacent digits are the same. The digit \'2\' appears too frequently to avoid being adjacent in any permutation.","solution":"from collections import Counter def can_rearrange_no_two_adjacent_same(seq): Determines if the sequence can be rearranged so that no two adjacent digits are the same. Args: seq (str): A string of digits. Returns: str: \\"YES\\" if it can be rearranged, otherwise \\"NO\\". count = Counter(seq) max_count = max(count.values()) n = len(seq) if max_count > (n + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"Given an array of integers, return an array consisting of the lengths of the longest increasing subsequence (LIS) ending at each index. Example 1: Input: N = 5 arr = {1, 3, 5, 3, 5} Output: {1, 2, 3, 2, 3} Explanation: LIS ending at index 0: {1} -> length 1 LIS ending at index 1: {1, 3} -> length 2 LIS ending at index 2: {1, 3, 5} -> length 3 LIS ending at index 3: {1, 3} -> length 2 LIS ending at index 4: {1, 3, 5} -> length 3 Example 2: Input: N = 4 arr = {4, 10, 4, 3} Output: {1, 2, 1, 1} Explanation: LIS ending at index 0: {4} -> length 1 LIS ending at index 1: {4, 10} -> length 2 LIS ending at index 2: {4} -> length 1 LIS ending at index 3: {3} -> length 1 Your Task: You don\'t need to read input or print anything. Your task is to complete the function lengthsOfLIS() which takes the array arr[] and its size N as input parameters and returns an array consisting of lengths of the longest increasing subsequences ending at each index. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 100 1 ≤ arr[i] ≤ 1000","solution":"def lengthsOfLIS(arr, N): Returns an array consisting of the lengths of the longest increasing subsequences (LIS) ending at each index in the given array. Parameters: arr (List[int]): The input array of integers. N (int): The size of the input array. Returns: List[int]: An array of the same size as input, where each element is the length of the LIS ending at that respective index. # Initialize the array for lengths of LIS ending at each index lis_lengths = [1] * N # Compute the lengths of LIS ending at each index for i in range(1, N): for j in range(i): if arr[i] > arr[j]: lis_lengths[i] = max(lis_lengths[i], lis_lengths[j] + 1) return lis_lengths"},{"question":"You are given a binary grid of size N times M. Each cell in the grid is either empty (denoted by 0) or contains an obstacle (denoted by 1). A robot starts in the top-left corner of the grid and wants to reach the bottom-right corner. The robot can move to an adjacent cell either to the right or down, but it cannot move onto cells containing an obstacle. Your task is to count the number of unique paths the robot can take to reach the bottom-right corner while avoiding obstacles. If there is no valid path, return 0. Input The first line contains two integers N and M (1 leq N, M leq 100) representing the number of rows and columns in the grid, respectively. The following N lines contain M integers each (either 0 or 1), representing the grid. Output Output a single integer representing the number of unique paths from the top-left corner to the bottom-right corner. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 0 0 0 0 0 Output 4 Input 3 3 1 0 0 0 1 0 0 0 0 Output 0 Input 5 5 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 Output 5","solution":"def uniquePathsWithObstacles(grid): Count the number of unique paths from top-left corner to bottom-right corner in a grid with obstacles. if not grid or grid[0][0] == 1: return 0 N = len(grid) M = len(grid[0]) # Initialize a 2D dp array with 0s dp = [[0] * M for _ in range(N)] # Starting point dp[0][0] = 1 # Fill the dp table for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"You are given an array of integers `arr`, which represents the stock price of a company over several days. You need to assess how the stock price has changed over time to identify potential buying and selling opportunities. Your task is to write a function that processes multiple queries, each query will be provided with two indices `i` and `j`. For each query, the function should calculate the maximum profit that could be achieved from buying a stock at any day within the subarray defined by the indices `i` to `j` inclusive, and selling it at any subsequent day within the same subarray. If no profit is possible, return 0 for that particular query. Input Format: - The first line contains an integer `n`, denoting the number of elements in the array. - The second line contains `n` space-separated integers representing the stock prices. - The third line contains an integer `q`, denoting the number of queries. - The next `q` lines contain two space-separated integers `i` and `j` for each query. Output Format: The output should contain the result of each query on a new line. Constraints: 1 ≤ n ≤ 10^5 1 ≤ arr[i] ≤ 10^9 1 ≤ q ≤ 10^5 0 ≤ i ≤ j < n SAMPLE INPUT 6 7 1 5 3 6 4 3 0 5 1 4 2 5 SAMPLE OUTPUT 5 5 3","solution":"def max_profit(prices, queries): Returns the maximum possible profit for given queries. :param prices: List[int] Stock prices. :param queries: List[Tuple[int, int]] List of queries where each query is defined by two indices (i, j). :return: List[int] List of maximum profits for each query. results = [] for i, j in queries: if i == j: results.append(0) continue min_price = prices[i] max_profit = 0 for k in range(i + 1, j + 1): if prices[k] - min_price > max_profit: max_profit = prices[k] - min_price if prices[k] < min_price: min_price = prices[k] results.append(max_profit) return results"},{"question":"Write a function that takes an input string str and an integer k and returns the maximum number of vowel letters in any substring of str with length k. For this problem: - Vowels are \'a\', \'e\', \'i\', \'o\', \'u\', and they can appear in both lowercase and uppercase. - The input string consists of lowercase and uppercase letters only. Example 1: Input: str = \\"abciiidef\\", k = 3 Output: 3 Explanation: The substring \\"iii\\" contains 3 vowel letters. Example 2: Input: str = \\"aeiou\\", k = 2 Output: 2 Explanation: Any substring of length 2 contains 2 vowels. Example 3: Input: str = \\"leetcode\\", k = 3 Output: 2 Explanation: The substring \\"eet\\" or \\"ode\\" contains 2 vowels. Example 4: Input: str = \\"rhythms\\", k = 4 Output: 0 Explanation: No substring of length 4 contains any vowel letters. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function maxVowels() that takes a string str and an integer k and returns the number of the maximum vowels. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(str) ≤ 10^5 1 ≤ k ≤ len(str)","solution":"def maxVowels(s, k): Returns the maximum number of vowel letters in any substring of s with length k. vowels = set(\'aeiouAEIOU\') max_vowel_count = 0 current_count = 0 # Calculate vowels in the initial window for i in range(k): if s[i] in vowels: current_count += 1 max_vowel_count = current_count # Slide the window over the string and update the vowel counts for i in range(k, len(s)): if s[i] in vowels: # Add new character to the window current_count += 1 if s[i - k] in vowels: # Remove the character that is no longer in the window current_count -= 1 max_vowel_count = max(max_vowel_count, current_count) return max_vowel_count"},{"question":"Given a list of words, write a function ```python def find_anagrams(word_list): ``` that returns a dictionary where each key is a base word (in alphabetical order) and the value is a list of all words from the input that are anagrams of the key, also in alphabetical order. For example, if the input is: ```python word_list = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"rat\\", \\"tar\\", \\"art\\", \\"hello\\", \\"hell\\"] ``` the returned dictionary should be: ```python { \\"eilnst\\": [\\"enlist\\", \\"listen\\", \\"silent\\"], \\"art\\": [\\"art\\", \\"rat\\", \\"tar\\"], \\"ehllo\\": [\\"hello\\"], \\"ehll\\": [\\"hell\\"] } ``` # Constraints - The input word list will contain only lowercase alphabetic strings. - No word will appear more than once in the input list. - If no anagrams are found for a particular word, the word should not appear as a key in the dictionary.","solution":"def find_anagrams(word_list): This function takes a list of words and returns a dictionary where keys are sorted versions of the word (alphabetically) and values are lists of anagrams for that sorted word. from collections import defaultdict anagrams = defaultdict(list) for word in word_list: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) for key in anagrams: anagrams[key].sort() return dict(anagrams)"},{"question":"You are given a list of N numbers: B = { B1, B2, ..., BN }. You need to find the maximum length of a non-decreasing subsequence such that the difference between any two consecutive elements in the subsequence is at most K. -----Constraints----- - 1 ≤ N ≤ 10^5 - -10^9 ≤ Bi ≤ 10^9 - 0 ≤ K ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N K B1 B2 : BN -----Output----- Print the maximum length of the non-decreasing subsequence that satisfies the condition. -----Sample Input----- 6 3 1 3 2 6 4 5 -----Sample Output----- 4 One of the possible subsequences of maximum length that satisfies the condition is {1, 3, 4, 5}.","solution":"def max_length_subsequence(N, K, B): Returns the maximum length of a non-decreasing subsequence such that the difference between any two consecutive elements in the subsequence is at most K. if N == 1: return 1 dp = [1] * N # Initialize dp array with 1s since each element is a subsequence of length 1 for i in range(1, N): for j in range(i): if B[i] >= B[j] and B[i] - B[j] <= K: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Function to read the input and print the output def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) B = [int(data[i + 2]) for i in range(N)] result = max_length_subsequence(N, K, B) print(result) # Uncomment the following line if you want to run the main function directly # main()"},{"question":"You are given an integer array `arr` and an integer `k`. Your task is to find all the unique pairs `(a, b)` in the array such that `a + b = k`. Input: - The first line contains two space-separated integers `n` and `k`, the size of the array and the target sum respectively. - The second line contains `n` space-separated integers, representing the elements of the array. Output: - Output the list of unique pairs `(a, b)` sorted in non-decreasing order, where each pair is also in non-decreasing order. If no valid pairs exist, output an empty list. Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 -10^9 ≤ k ≤ 10^9 SAMPLE INPUT 5 7 1 2 3 4 5 SAMPLE OUTPUT [[2, 5], [3, 4]] SAMPLE INPUT 4 10 1 2 3 4 SAMPLE OUTPUT [] Explanation: In the first example, there are two pairs (2, 5) and (3, 4) that sum up to 7. In the second example, no pairs sum up to 10.","solution":"def find_pairs_with_sum(arr, k): Finds all unique pairs (a, b) in the array such that a + b = k. Each pair (a, b) is sorted in non-decreasing order, and the list of pairs is also sorted. Parameters: arr (list of int): The input array. k (int): The target sum. Returns: list of list of int: A list of unique pairs that sum up to k. seen = set() pairs = set() for number in arr: target = k - number if target in seen: pairs.add(tuple(sorted((number, target)))) seen.add(number) return sorted([list(pair) for pair in pairs]) # Example usage to validate: if __name__ == \\"__main__\\": arr = [1, 2, 3, 4, 5] k = 7 print(find_pairs_with_sum(arr, k)) # Output: [[2, 5], [3, 4]]"},{"question":"Given a sorted list of unique integers and a target integer, determine if there exists a pair of numbers in the list that adds up to the target. If such a pair exists, return the pair as a tuple. If multiple pairs exist, return any one of them. If no such pair exists, return an empty tuple. Example 1: Input: arr = [1, 2, 3, 4, 6], target = 5 Output: (1, 4) Explanation: 1 + 4 = 5 Example 2: Input: arr = [2, 5, 9, 11], target = 20 Output: (9, 11) Explanation: 9 + 11 = 20 Example 3: Input: arr = [1, 3, 4, 8], target = 6 Output: (2, 4) Explanation: There is no pair that adds up to 6 Your Task: You do not need to read input or print anything. Your task is to complete the function findPair() which takes arr and target as input parameters and returns a tuple representing the pair of numbers that add up to the target or an empty tuple if no such pair exists. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(arr) ≤ 10^5 -10^5 ≤ arr[i] ≤ 10^5 -10^5 ≤ target ≤ 10^5","solution":"def findPair(arr, target): Finds a pair of numbers in a sorted array that add up to the target sum. Returns the pair as a tuple, or an empty tuple if no such pair exists. Parameters: arr (list of int): A sorted list of unique integers. target (int): The target sum. Returns: tuple: A tuple containing a pair of integers from the array that add up to the target sum. Returns an empty tuple if no such pair exists. left, right = 0, len(arr) - 1 while left < right: current_sum = arr[left] + arr[right] if current_sum == target: return (arr[left], arr[right]) elif current_sum < target: left += 1 else: right -= 1 return () # Test cases in the description print(findPair([1, 2, 3, 4, 6], 5)) # Output: (1, 4) print(findPair([2, 5, 9, 11], 20)) # Output: (9, 11) print(findPair([1, 3, 4, 8], 6)) # Output: ()"},{"question":"Alice has recently started learning about permutations and combinations in her mathematics class. To practice, she wants to generate all possible unique permutations of a given string with distinct characters. To help her, you need to write a program that takes an input string and outputs all its unique permutations in lexicographical order. Input: The input consists of a single line containing a string s. The string consists of distinct lowercase alphabetic characters. You can assume 1 ≤ |s| ≤ 8. Output: Output all unique permutations of the input string, each on a new line, in lexicographical order. Example Input abc Output abc acb bac bca cab cba Input a Output a Input xyz Output xyz xzy yxz yzx zxy zyx","solution":"from itertools import permutations def generate_permutations(s): Generates all unique permutations of the input string s in lexicographical order. perms = sorted([\'\'.join(p) for p in permutations(s)]) return perms # Example usage: # s = \\"abc\\" # print(\\"n\\".join(generate_permutations(s)))"},{"question":"You are given a bookshelf with N shelves, each with a specified capacity. Initially, the bookshelf is empty. You need to process Q operations to place books on these shelves. Each operation can be one of the following: 1. Add a book of width W to shelf S, if there is enough space. 2. Remove a book of width W from shelf S, if such a book exists. If an Add operation is successful, print \\"Added\\". If it cannot be completed due to insufficient space, print \\"Not enough space\\". If a Remove operation is successful, print \\"Removed\\". If the book is not found on the shelf, print \\"Book not found\\". Constraints: * 1 ≤ N, Q ≤ 100,000 * 1 ≤ S ≤ N * 1 ≤ W ≤ 1,000,000 Input: Input is given from Standard Input in the following format: N Q c_1 c_2 ... c_N op_1 S_1 W_1 op_2 S_2 W_2 ... op_Q S_Q W_Q where `c_i` is the capacity of the i-th shelf. `op_i` represents the type of operation (\'Add\' or \'Remove\'), followed by the shelf index and the width of the book respectively. Output: For each operation, output the result as described above. Examples: Input 5 4 10 15 20 10 5 Add 1 5 Add 2 8 Remove 1 5 Remove 2 8 Output Added Added Removed Removed Input 3 3 8 5 12 Add 1 10 Add 2 4 Add 3 13 Output Not enough space Added Not enough space Input 4 5 10 20 30 40 Add 1 10 Remove 1 10 Add 2 20 Add 3 30 Remove 4 5 Output Added Removed Added Added Book not found","solution":"def handle_bookshelf_operations(N, Q, capacities, operations): result = [] current_loads = [0] * N books_on_shelves = [[] for _ in range(N)] for op, s, w in operations: shelf_index = s - 1 if op == \'Add\': if current_loads[shelf_index] + w <= capacities[shelf_index]: current_loads[shelf_index] += w books_on_shelves[shelf_index].append(w) result.append(\\"Added\\") else: result.append(\\"Not enough space\\") elif op == \'Remove\': if w in books_on_shelves[shelf_index]: current_loads[shelf_index] -= w books_on_shelves[shelf_index].remove(w) result.append(\\"Removed\\") else: result.append(\\"Book not found\\") return result # Below code reads input from stdin, process it, and prints the result. import sys input = sys.stdin.read def main(): data = input().split() N = int(data[0]) Q = int(data[1]) capacities = list(map(int, data[2:N+2])) operations = [] for i in range(Q): op = data[N+2 + i*3] s = int(data[N+2 + i*3 + 1]) w = int(data[N+2 + i*3 + 2]) operations.append((op, s, w)) results = handle_bookshelf_operations(N, Q, capacities, operations) for res in results: print(res) if __name__ == \\"__main__\\": main()"},{"question":"You are developing an event tracking system for a local library to monitor book status (issued/returned). The library\'s database has a class `Book` as follows: ```Python class Book(object): def __init__(self, title): self.title = title self.issued = False ``` You are tasked with implementing a context manager class `IssueBook` that will: 1. Set the `issued` attribute of a Book instance to `True` when entering the context. 2. Set the `issued` attribute back to `False` when exiting the context. The usage of the context manager should look like this: ```Python book = Book(\\"The Great Gatsby\\") with IssueBook(book): # During this block, book.issued should be True pass # After the block, book.issued should be False ``` Implement the `IssueBook` class without modifying the `Book` class.","solution":"class IssueBook: def __init__(self, book): self.book = book def __enter__(self): self.book.issued = True return self.book def __exit__(self, exc_type, exc_val, exc_tb): self.book.issued = False class Book: def __init__(self, title): self.title = title self.issued = False"},{"question":"A number is called a \\"perfect power\\" if it can be expressed as x^y where x and y are both integers greater than 1. Given a number n, determine whether it is a perfect power and, if so, output the values of x and y such that x^y = n. If there are multiple pairs of values, output any of them. If n is not a perfect power, output -1. Input format: The first line contains an integer t, the number of test cases (1 ≤ t ≤ 10^5). Each of the next t lines contains an integer n (1 ≤ n ≤ 10^12). Output format: For each test case, output either a pair of integers x and y, or -1 if n is not a perfect power. SAMPLE INPUT 3 16 27 14 SAMPLE OUTPUT 2 4 3 3 -1","solution":"def is_perfect_power(n): Determines if a number `n` is a perfect power and returns (x, y) such that x^y = n. If no such pair exists, returns -1. if n <= 1: return -1 # Attempt to find the pair (x, y) such that x^y = n for x in range(2, int(n**0.5) + 1): y = 2 while True: power = x ** y if power == n: return x, y if power > n: break y += 1 return -1 def process_test_cases(test_cases): results = [] for n in test_cases: result = is_perfect_power(n) if result == -1: results.append(\'-1\') else: results.append(f\\"{result[0]} {result[1]}\\") return results"},{"question":"Given a string containing only parentheses \'(\', \')\', \'{\', \'}\', \'[\' and \']\', determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. 3. An empty string is considered valid. You are required to complete the function isValid that checks if the input string containing parentheses is valid. You should not read any input from stdin/console. There are multiple test cases. For each test case, this method will be called individually. Example 1: Input: () Output: true Example 2: Input: ()[]{ Output: true Example 3: Input: (] Output: false Input Format: The task is to complete the function isValid which takes a single argument, a string containing only parentheses. Output Format: The function should return a boolean indicating whether the input string is valid. Your Task: Complete the function isValid. Constraints: 1 <= T <= 30 0 <= length of the string <= 100","solution":"def isValid(s: str) -> bool: stack = [] bracket_pair = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_pair.values(): stack.append(char) elif char in bracket_pair.keys(): if not stack or stack.pop() != bracket_pair[char]: return False else: return False return not stack"},{"question":"Andrew is trying to sort out his collection of coins. He has coins of different denominations and he wants to find out the value of the k-th smallest coin in his collection. Help Andrew by writing a program that finds the k-th smallest coin from the given collection. Input: The first line of input contains two integers, n and k, where n is the number of coins Andrew has, and k is the position (1-based index) of the smallest coin you need to find. The second line contains n integers indicating the value of each coin. Output: The output should be a single integer which is the value of the k-th smallest coin in the collection. Constraints: 1 ≤ n ≤ 1000 1 ≤ coin value ≤ 10000 1 ≤ k ≤ n Example: Input: 5 3 100 200 50 300 150 Output: 150 SAMPLE INPUT 7 4 10 20 30 40 50 60 70 SAMPLE OUTPUT 40","solution":"def kth_smallest_coin(n, k, coins): Returns the value of the k-th smallest coin in the collection. :param n: int - Number of coins :param k: int - Position of the smallest coin (1-based index) :param coins: List[int] - List of coin values :return: int - Value of the k-th smallest coin sorted_coins = sorted(coins) return sorted_coins[k-1]"},{"question":"# Problem Statement You are given a string that represents a sentence containing words separated by spaces and ending with a period. Your task is to reverse the order of the words in the sentence while keeping the sentence structure intact. Each word will appear exactly once and will be separated by a single space. The sentence will always end with a single period. Note: - The period at the end of the sentence should remain at the end after reversing the order of the words. - The input will not contain leading or trailing spaces (other than the ending period). Input The input consists of a single line containing a string S that represents a sentence. The string S will consist of lowercase English letters and spaces, and will always end with a period (\'.\'). Output Output the reversed sentence while maintaining the structure mentioned above. Constraints 1 ≤ |S| ≤ 10^6 Example Input: \\"hello world this is a test.\\" Output: \\"test a is this world hello.\\"","solution":"def reverse_sentence(sentence): Reverses the order of words in a sentence while keeping the ending period. # Remove the period at the end sentence_no_period = sentence[:-1] # Split the sentence into words words = sentence_no_period.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words with a space and add the period at the end reversed_sentence = \' \'.join(reversed_words) + \'.\' return reversed_sentence"},{"question":"Minimum Swap to Arrange Pairs You are given an array `arr` of length `2 * N` that contains pairs. Each pair is represented by two identical elements. For example, if N=3, a possible array could be `[1, 3, 2, 1, 2, 3]`. You need to write a function to determine the minimum number of swaps required to arrange the array so that each pair of identical elements are neighboring. Function Signature: ```python def minSwapsToArrangePairs(arr: List[int]) -> int: pass ``` # Input - An integer `N` where 1 ≤ N ≤ 50,000. - An array `arr` of `2 * N` integers where 1 ≤ arr[i] ≤ 2 * N. # Output - An integer, the minimum number of swaps required. # Example Input ``` 3 [1, 3, 2, 1, 2, 3] ``` # Example Output ``` 2 ``` # Explanation A possible sequence of swaps: 1. Swap `arr[1]` (3) with `arr[5]` (2): `[1, 2, 2, 1, 3, 3]` 2. Swap `arr[3]` (2) with `arr[4]` (1): `[1, 2, 1, 2, 3, 3]` Now each pair of identical elements are neighboring, requiring 2 swaps in total. # Additional Notes: - A single swap involves only two elements in the array. - The function should return the minimum number of swaps required.","solution":"from typing import List def minSwapsToArrangePairs(arr: List[int]) -> int: Returns the minimum number of swaps required to arrange the array such that all pairs of identical elements are neighbors. # Create a dictionary to store the positions of each element index_map = {} for i, value in enumerate(arr): if value in index_map: index_map[value].append(i) else: index_map[value] = [i] swaps = 0 visited = [False] * len(arr) for i in range(0, len(arr), 2): if arr[i] == arr[i + 1]: continue first, second = arr[i], arr[i + 1] if not visited[i]: visited[i] = True second_pair_index = index_map[first][0] if second_pair_index == i: second_pair_index = index_map[first][1] swaps += 1 # swap the second pair with the current pair and update index map and visited list arr[i + 1], arr[second_pair_index] = arr[second_pair_index], arr[i + 1] visited[second_pair_index] = True # Update the index_map with new positions index_map[first].remove(second_pair_index) index_map[second].remove(i + 1) index_map[second].append(second_pair_index) return swaps"},{"question":"A palindrome is a sequence of characters which reads the same backward or forward. Given a string `s`, write a function `largest_palindromic_substring(s)` that returns the largest palindromic substring within `s`. If there are multiple substrings of the same length, return the one that appears first. Examples: ``` largest_palindromic_substring(\\"babad\\") -> \\"bab\\" largest_palindromic_substring(\\"cbbd\\") -> \\"bb\\" largest_palindromic_substring(\\"a\\") -> \\"a\\" largest_palindromic_substring(\\"ac\\") -> \\"a\\" ``` # Constraints: - The input string `s` will have at least 1 character and at most 1000 characters. - The string `s` will consist only of printable ASCII characters.","solution":"def largest_palindromic_substring(s): Returns the largest palindromic substring within s. n = len(s) if n == 0: return \\"\\" longest = \\"\\" def expand_around_center(left, right): nonlocal longest while left >= 0 and right < n and s[left] == s[right]: current_substring = s[left:right+1] if len(current_substring) > len(longest): longest = current_substring left -= 1 right += 1 for i in range(n): expand_around_center(i, i) # Odd length palindromes expand_around_center(i, i+1) # Even length palindromes return longest"},{"question":"Write a function that takes a string and a character as input and returns the longest substring that starts and ends with the given character. If the character does not exist in the string, return an empty string. If the character appears only once, return that single character. Examples: ```python longest_substring(\\"abacabad\\", \\"a\\") == \\"abacaba\\" longest_substring(\\"hellohello\\", \\"l\\") == \\"llohell\\" longest_substring(\\"aaaaa\\", \\"a\\") == \\"aaaaa\\" longest_substring(\\"abc\\", \\"d\\") == \\"\\" longest_substring(\\"xyz\\", \\"x\\") == \\"x\\" ```","solution":"def longest_substring(s, char): Returns the longest substring that starts and ends with the given character. If the character does not exist in the string, returns an empty string. If the character appears only once, returns that single character. first_index = s.find(char) last_index = s.rfind(char) if first_index == -1: return \\"\\" if first_index == last_index: return char return s[first_index:last_index+1]"},{"question":"You are working with a database that stores earthquake data. Each earthquake entry consists of its magnitude (a floating point number), and the geographical coordinates (latitude and longitude) of its epicenter. You are required to create a function that processes a list of earthquake entries and returns a dictionary where the keys are the magnitudes (rounded to the nearest integer) and the values are the counts of the occurrences of earthquakes with those magnitudes. Implement the function `count_earthquakes` which takes in a list of tuples. Each tuple represents an earthquake entry, with the first element being the magnitude (a float), the second being the latitude (a float), and the third being the longitude (a float). The function should return a dictionary with the rounded magnitudes as keys and the counts as values. # Example ```python def count_earthquakes(earthquake_data): # Your implementation here # Example Input earthquake_data = [ (4.1, 34.5, -117.5), (6.7, 40.7, -74.0), (4.3, 34.5, -118.5), (6.9, -33.9, 151.2), (4.2, 36.3, -120.1), (6.8, 38.0, -122.1) ] # Expected Output # {4: 3, 7: 3} print(count_earthquakes(earthquake_data)) ``` Your implementation should effectively count the earthquakes that round to each magnitude and return the dictionary result.","solution":"def count_earthquakes(earthquake_data): Processes a list of earthquake entries and returns a dictionary where the keys are the magnitudes (rounded to the nearest integer) and the values are the counts of the occurrences of earthquakes with those magnitudes. :param earthquake_data: List of tuples representing earthquake entries. Each tuple consists of (magnitude, latitude, longitude) :return: Dictionary with rounded magnitudes as keys and counts as values. magnitude_counts = {} for magnitude, lat, lon in earthquake_data: rounded_magnitude = round(magnitude) if rounded_magnitude in magnitude_counts: magnitude_counts[rounded_magnitude] += 1 else: magnitude_counts[rounded_magnitude] = 1 return magnitude_counts"},{"question":"A software company is planning a collaborative project involving N developers. Each developer is assigned to exactly one task, and each task must have exactly one developer. To make the project more efficient, the company wants to divide the developers into M teams such that: 1. Each team can work on one or more tasks. 2. Each developer must be in exactly one team. 3. Each team should have at least one developer. 4. The maximum number of developers in any team should be minimized. Given N and M, find the size of the largest team when the developers are divided optimally. ------ Input Format ------ - The first line of input contains a single integer T — the number of test cases. The description of T test cases follows. - Each of the next T lines contains two integers N and M — the number of developers and the number of teams. ------ Output Format ------ For each test case, output on a new line a single integer — the size of the largest team when developers are divided optimally. ------ Constraints ------ 1 ≤ T ≤ 200 1 ≤ N ≤ 1000 1 ≤ M ≤ N ------ Sample Input 1 ------ 3 6 3 7 3 10 5 ------ Sample Output 1 ------ 2 3 2 ------ Explanation 1 ------ Test case 1: We can divide the developers into 3 teams as follows: [2, 2, 2]. Test case 2: We can divide the developers into 3 teams as follows: [3, 2, 2]. Test case 3: We can divide the developers into 5 teams as follows: [2, 2, 2, 2, 2]. The size of the largest team is 2.","solution":"def largest_team_size(T, test_cases): results = [] for N, M in test_cases: # The size of the largest team when developers are divided optimally result = (N + M - 1) // M results.append(result) return results"},{"question":"A substring of a string is a contiguous sequence of characters within the string. Given a string s and an integer k, we need to find the length of the shortest substring of s that contains exactly k distinct characters. If no such substring exists, return -1. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line contains an integer k (1 le k le 26), and the second line contains a string s (1 le |s| le 2000). The string s contains only lowercase English letters. -----Output----- For each test case, print a single integer — the length of the shortest substring of s that contains exactly k distinct characters, or -1 if there is no such substring. -----Example----- Input 3 2 abcba 3 aaabbacacca 4 aabbcc Output 2 3 -1 ---Note--- In the first test case, the shortest substring with exactly 2 distinct characters is \\"ab\\" (or \\"bc\\"). In the second test case, the shortest substring with exactly 3 distinct characters is \\"abb\\" (or \\"bba\\", or other variations). In the third test case, there is no substring with exactly 4 distinct characters, hence the output is -1.","solution":"def shortest_substring_with_k_distinct_characters(k, s): from collections import defaultdict n = len(s) min_length = float(\'inf\') window_start = 0 char_frequency = defaultdict(int) for window_end in range(n): char_frequency[s[window_end]] += 1 while len(char_frequency) == k: min_length = min(min_length, window_end - window_start + 1) char_frequency[s[window_start]] -= 1 if char_frequency[s[window_start]] == 0: del char_frequency[s[window_start]] window_start += 1 return min_length if min_length != float(\'inf\') else -1 def solve(t, test_cases): results = [] for k, s in test_cases: results.append(shortest_substring_with_k_distinct_characters(k, s)) return results"},{"question":"A hiking trail in a nature park is divided into several consecutive segments, each with an elevation gain or loss. Based on the elevation data, you need to determine the maximum net elevation gain for a given segment of the trail, specified by a start and end point. You will be given an array of elevation changes at points along the trail (indices), then a list of the indices of entry and exit points. Considering each entry and exit point pair, calculate the net elevation gain over that segment of the trail. # Example n = 5 elevation = [1, -2, 3, -4, 2] cases = [[0, 2], [1, 4]] If the entry index, i=0 and the exit, j=2, the elevation changes are 1, -2, 3, with a net gain of 1 + (-2) + 3 = 2. If i=1 and j=4, the elevation changes are -2, 3, -4, 2, with a net gain of -2 + 3 + (-4) + 2 = -1. # Function Description Complete the function `netElevationGain` in the editor below. `netElevationGain` has the following parameter(s): - `int n`: the number of elevation changes in the `elevation` array - `int cases[t][2]`: each element contains the starting and ending indices for a segment to consider, inclusive # Returns - `int[t]`: the net elevation gain for each segment of the trail described # Input Format The first line of input contains two integers, `n` and ` t`, where ` n` denotes the number of elevation changes and ` t`, the number of test cases. The next line has n space-separated integers which represent the array `elevation`. The next `t` lines contain two integers, `i` and ` j`, where `i` is the start index and `j` is the end index of the segment to check. # Constraints 2 leq n leq 100000 1 leq t leq 1000 0 leq i leq j < n 2 leq j-i+1 leq min(n, 1000) -1000 leq elevation[k] leq 1000, where 0 leq k < n # Sample Input ``` 5 2 1 -2 3 -4 2 0 2 1 4 ``` # Sample Output ``` 2 -1 ``` # Explanation Below is the elevation change representation of the trail for each segment: For segment `(0, 2)`: Elevation changes are `1, -2, 3`, with a net gain of 1 + (-2) + 3 = 2. For segment `(1, 4)`: Elevation changes are `-2, 3, -4, 2`, with a net gain of -2 + 3 + (-4) + 2 = -1.","solution":"def netElevationGain(n, elevation, cases): results = [] for start, end in cases: net_gain = sum(elevation[start:end+1]) results.append(net_gain) return results"},{"question":"You are given a string S consisting of lowercase alphabets and an integer K. You need to make the string S a valid palindrome by performing operations on the string. A palindrome is a string that reads the same forward and backward. The allowed operations are: 1. Swap: Swap any two characters in the string with cost X. 2. Replace: Replace any character in the string with another character with cost Y. You need to determine the minimum cost to transform the string S into a palindrome. Input Format: - The first line contains T, the number of test cases. 1 ≤ T ≤ 20 - For each test case: - The first line contains the integer K (length of the string). 1 ≤ K ≤ 10^5 - The second line contains the string S of length K. - The third line contains integers X and Y. 1 ≤ X, Y ≤ 100 Output Format: For each test case, print the minimum cost in a single line without any spaces. Example: Input: 2 3 abc 5 3 4 abca 2 5 Output: 3 2 Explanation: Example 1: Cost 3: Replace \'b\' with \'a\' and \'c\' with \'a\' to make \\"aaa\\". Example 2: Cost 2: Swap the characters \'b\' and \'c\' to make \\"acca\\".","solution":"def min_cost_to_palindrome(S, X, Y): Returns the minimum cost to make the string S a palindrome with swap cost X and replacement cost Y. n = len(S) cost = 0 for i in range(n // 2): left = S[i] right = S[-(i + 1)] if left != right: cost += min(X, Y) return cost def process_test_cases(test_cases): results = [] for K, S, X, Y in test_cases: results.append(min_cost_to_palindrome(S, X, Y)) return results"},{"question":"The country of Sandlandia is known for its vast desert and unique flora. Recently, the authorities of Sandlandia have started a new initiative to count and categorize different types of flowering patterns in their unique desert flowers. Each pattern is represented as a string of lowercase English letters, corresponding to a specific unique pattern in the flowers’ petal arrangement. The Sandlandia authorities have a database of all possible flower patterns, and they often need to query this database to compare each flower pattern with a given input pattern to find out how many flowers match. Due to the large number of flower patterns, this task needs to be automated. You need to help the authorities by writing a program that answers a series of queries. Each query will provide a pattern, and your program needs to count how many times this pattern exactly matches any of the flower patterns in the database. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of flower patterns in the database. Each of the next n lines contains a string pi (1 ≤ |pi| ≤ 50) — a unique flower pattern in the database. Each string consists of only lowercase English letters. No two patterns in the database are the same. The next line contains an integer q (1 ≤ q ≤ 100000) — the number of queries. Each of the next q lines contains a string qi (1 ≤ |qi| ≤ 50) — a pattern for the query. Each string consists of only lowercase English letters. Output Print q lines. The i-th line should contain a single integer representing the number of exact matches of the pattern qi in the database of flower patterns. Examples Input 5 flower cactus rose daisy tulip 3 cactus fern tulip Output 1 0 1","solution":"def count_flower_patterns(n, flower_patterns, q, queries): This function takes in the number of patterns in the database, the list of patterns, the number of queries, and the list of query patterns. It returns a list of counts of exact matches for each query pattern in the database. pattern_count = {pattern: 0 for pattern in flower_patterns} for pattern in flower_patterns: pattern_count[pattern] += 1 results = [] for query in queries: results.append(pattern_count.get(query, 0)) return results"},{"question":"You are working on a project that involves managing a fleet of delivery drones. Each drone has a maximum weight capacity it can carry in one trip, and each package has a specific weight. The goal is to find the minimum number of trips required for a given list of packages using the available drones. Each drone can carry multiple packages in a single trip, but the total weight of the packages in one trip cannot exceed the drone\'s maximum weight capacity. You can assume there is an unlimited number of drones available and all drones have the same maximum weight capacity. Write a program that, given the maximum weight capacity of a drone and a list of package weights, determines the minimum number of trips required to deliver all the packages. Input The first line of the input contains a single integer C (1 ≤ C ≤ 10^9), the maximum weight capacity of a drone. The second line contains a single integer n (1 ≤ n ≤ 1000), the number of packages. The third line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 10^9), where wi represents the weight of the i-th package. Output Output a single integer representing the minimum number of trips required to deliver all the packages. Examples Input 10 5 2 3 7 5 6 Output 3 Input 15 4 8 6 9 7 Output 2","solution":"def min_trips(C, weights): Returns the minimum number of trips required to deliver all packages. :param C: Maximum weight capacity of a drone. :param weights: List of package weights. :return: Minimum number of trips required. weights.sort(reverse=True) trips = 0 while weights: current_trip_weight = 0 i = 0 while i < len(weights): if current_trip_weight + weights[i] <= C: current_trip_weight += weights.pop(i) else: i += 1 trips += 1 return trips"},{"question":"Create a function that takes a string as input and returns the character that appears the maximum number of times. If there is a tie, return the character that appears first in the string. **Input:** - A string containing only ASCII characters. **Output:** - A single character that appears the most frequently. **Example:** ```python def max_occurrence(s): # Implement the function here # Test cases print(max_occurrence(\\"aabbbccde\\")) # Output: \'b\' (as \'b\' appears three times) print(max_occurrence(\\"eabcd\\")) # Output: \'e\' (all characters appear only once, \'e\' is first) print(max_occurrence(\\"aabbcc\\")) # Output: \'a\' (tie between \'a\', \'b\', \'c\'; \'a\' appears first) print(max_occurrence(\\"xyzxyzxy\\")) # Output: \'x\' (tie between \'x\', \'y\' and \'z\', \'x\' appears first) ``` **Note:** - Do not use any additional libraries or imports. - Maintain the time complexity of the algorithm as efficient as possible.","solution":"def max_occurrence(s): Returns the character that appears the maximum number of times in the input string. If there is a tie, returns the character that appears first in the string. if not s: return \'\' char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_count = max(char_count.values()) for char in s: if char_count[char] == max_count: return char return \'\'"},{"question":"You are given an array of integers a of length n. Your task is to rearrange the array such that the sum of the absolute differences between all consecutive elements is minimized. -----Input----- The first line contains an integer n (2 leq n leq 10^5) — the length of the array. The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) — the elements of the array. -----Output----- Print a single integer, the minimized sum of the absolute differences between all consecutive elements after rearranging the array. -----Examples----- Input 4 4 2 1 3 Output 3 Input 5 10 1 5 12 9 Output 9 -----Note----- In the first test, the optimal way to rearrange the elements is [1, 2, 3, 4], which gives |2-1| + |3-2| + |4-3| = 1 + 1 + 1 = 3. In the second test, the optimal arrangement is [1, 5, 9, 10, 12], resulting in |5-1| + |9-5| + |10-9| + |12-10| = 4 + 4 + 1 + 2 = 11.","solution":"def minimize_abs_difference_sum(n, a): This function rearranges the array `a` of length `n` such that the sum of the absolute differences between consecutive elements is minimized. a.sort() sum_abs_diff = sum(abs(a[i] - a[i - 1]) for i in range(1, n)) return sum_abs_diff # Example Usage # print(minimize_abs_difference_sum(4, [4, 2, 1, 3])) # Output should be 3 # print(minimize_abs_difference_sum(5, [10, 1, 5, 12, 9])) # Output should be 9"},{"question":"An online retailer requires a system to identify the best-selling products from their sales data. Given a list of transactions, where each transaction consists of a product ID and a quantity sold, determine the product that has sold the most units. If there is a tie, return the product ID that comes first lexicographically. Complete the function `bestSellingProduct` that takes the list of transactions as its parameter and returns the product ID of the best-selling product. Function Signature: ```python def bestSellingProduct(transactions: List[Tuple[str, int]]) -> str: ``` Input: - `transactions: List[Tuple[str, int]]`: A list of tuples where each tuple contains: - a string representing the product ID consisting of alphanumeric characters (1 to 10 characters long) - an integer n (1 ≤ n ≤ 1000) representing the quantity sold in that transaction. Output: - Returns a string representing the product ID of the best-selling product. Input Format: - The function will receive a list of tuples as described above with 1leq len(transactions) leq 10^5. Constraints: - Each product ID in transactions appears at most once. - The transactions list will be non-empty. Sample Input 0: ```python [(\\"abc123\\", 150), (\\"def456\\", 200), (\\"ghi789\\", 150)] ``` Sample Output 0: ``` \\"def456\\" ``` Explanation 0: \\"def456\\" has the highest quantity sold (200). Sample Input 1: ```python [(\\"abc123\\", 150), (\\"def456\\", 150), (\\"ghi789\\", 150)] ``` Sample Output 1: ``` \\"abc123\\" ``` Explanation 1: All product IDs have the same quantity sold, so the lexicographically first product ID is \\"abc123\\". Sample Input 2: ```python [(\\"x1\\", 500), (\\"y2\\", 1200), (\\"z3\\", 500), (\\"a4\\", 1200)] ``` Sample Output 2: ``` \\"a4\\" ``` Explanation 2: There is a tie between \\"y2\\" and \\"a4\\" for the highest quantity sold (1200). Since \\"a4\\" comes before \\"y2\\" lexicographically, \\"a4\\" is returned.","solution":"from typing import List, Tuple def bestSellingProduct(transactions: List[Tuple[str, int]]) -> str: # Dictionary to store product IDs and their total quantities sold product_sales = {} for product_id, quantity in transactions: product_sales[product_id] = quantity # Find the product with the maximum quantity sold max_quantity = max(product_sales.values()) # Filter products which have the maximum quantity max_sold_products = [product_id for product_id, quantity in product_sales.items() if quantity == max_quantity] # Return the lexicographically smallest product id return min(max_sold_products)"},{"question":"A company needs to manage its employee information effectively. Each employee has a unique ID and belongs to a specific department. The goal is to determine the number of unique departments in the company based on given employee records. Can you help with this task? Write a program that takes the number of test cases. For each test case, read the number of employees followed by their employee IDs and department names. The program should output the number of unique departments for each test case. Input: - The first line contains an integer `t`, the number of test cases. - For each test case: - The first line contains an integer `n`, the number of employees. - The next `n` lines contain two space-separated strings: the employee ID and department name. Output: - For each test case, output a single integer representing the number of unique departments. Constraints: - 1 ≤ t ≤ 50 - 1 ≤ n ≤ 1000 - The employee ID and department name consist of only alphanumeric characters and have lengths between 1 and 20. SAMPLE INPUT 2 3 E001 HR E002 Finance E003 HR 4 E004 IT E005 IT E006 Marketing E007 Finance SAMPLE OUTPUT 2 3","solution":"def unique_departments(test_cases): results = [] for employees in test_cases: departments = set() for emp_id, dept in employees: departments.add(dept) results.append(len(departments)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) index += 1 employees = [] for _ in range(n): emp_id, dept = lines[index].split() employees.append((emp_id, dept)) index += 1 test_cases.append(employees) return test_cases def solve(input_str): test_cases = parse_input(input_str) results = unique_departments(test_cases) for result in results: print(result) # Example usage: input_str = 2 3 E001 HR E002 Finance E003 HR 4 E004 IT E005 IT E006 Marketing E007 Finance solve(input_str)"},{"question":"You are given a string s consisting only of the characters \'a\', \'b\', and \'c\'. You need to reorder the string s so that any two adjacent characters are not the same. If it is not possible to do so, return an empty string. Example: Input: \\"aab\\" Output: \\"aba\\" Explanation: \\"aba\\" is a valid reorganized string. Input: \\"aaab\\" Output: \\"\\" Explanation: It is not possible to reorganize the string such that no two adjacent characters are the same.","solution":"from collections import Counter import heapq def reorganize_string(s): Reorganize the input string s such that no two adjacent characters are the same. If not possible, return an empty string. # Get the frequency of each character count = Counter(s) # Max heap of (-frequency, character) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) # Add the previous entry back if it exists if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Append current character to result result.append(char) # Update the previous character prev_freq, prev_char = freq + 1, char # decrement the frequency result_str = \'\'.join(result) # check if reorganized string\'s length matches the original string if len(result_str) != len(s): return \\"\\" return result_str"},{"question":"Given a positive integer (N), your task is to find and print all pairs of prime numbers ((p1, p2)) such that their sum is equal to (N). A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, 2, 3, 5, 7, and 11 are prime numbers. -----Input:----- The input consists of a single integer (N) where (4 leq N leq 1000). -----Output:----- Print all unique pairs ((p1, p2)) where (p1 leq p2) such that (p1 + p2 = N). Each pair should be printed on a new line with (p1) and (p2) separated by a single space. The pairs should be sorted in increasing order of (p1). -----Constraints:----- - (4 leq N leq 1000) If there are no such pairs, print \\"No pairs found\\". -----Sample input 1:----- 10 -----Sample output 1:----- 3 7 5 5 -----Sample input 2:----- 8 -----Sample output 2:----- 3 5 -----Sample input 3:----- 11 -----Sample output 3:----- No pairs found","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_prime_pairs(N): Function to find all pairs of prime numbers (p1, p2) such that their sum is equal to N. pairs = [] for p1 in range(2, N): p2 = N - p1 if p1 <= p2 and is_prime(p1) and is_prime(p2): pairs.append((p1, p2)) if pairs: for p1, p2 in pairs: print(f\\"{p1} {p2}\\") else: print(\\"No pairs found\\")"},{"question":"Consider a grid with N rows and M columns, where each cell contains an integer representing the height of the terrain at that point. You are to calculate the minimum number of steps required to travel from the top-left cell (0, 0) to the bottom-right cell (N-1, M-1). You can move up, down, left, or right to an adjacent cell. However, moving from one cell to another is only allowed if the absolute difference between the heights of the two cells is at most 1. If there is no feasible path from the starting cell to the destination cell, output -1. Input The first line contains two integers N and M (1 ≤ N, M ≤ 100), representing the number of rows and columns, respectively. Each of the next N lines contains M integers representing the heights of the cells. Output Output a single integer, the minimum number of steps required to reach the bottom-right cell, or -1 if it is not possible to reach the destination. Example Input 3 3 1 2 3 2 3 4 3 4 5 Output 4","solution":"from collections import deque def min_steps_to_reach_end(grid): N = len(grid) M = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < N and 0 <= y < M def bfs(): queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == N-1 and y == M-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: if abs(grid[nx][ny] - grid[x][y]) <= 1: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 return bfs()"},{"question":"A new software company wants to develop a security system that can classify the given strings of passwords into strong and weak categories. The strength of the password is determined based on the following conditions: - It must contain at least one uppercase English letter. - It must contain at least one lowercase English letter. - It must contain at least one digit. - It must contain at least one special character from the set {!, @, #, , %, ^, &, *, (, ), -, =, +}. Given a list of passwords, the task is to identify the number of strong passwords. ------ Input ------ The first line contains an integer T, (1 ≤ T ≤ 10^5), the number of passwords. Each of the next T lines contains a password string consisting of at most 100 characters. ------ Output ------ Output the number of strong passwords. ------ Sample Input ------ 3 HelloWorld123! weakpassword P@ssw0rd ------ Sample Output ------ 2 ------ Explanation ------ In the sample input, the first password \\"HelloWorld123!\\" meets all the conditions: it contains uppercase letters, lowercase letters, digits, and special characters, so it is a strong password. The second password \\"weakpassword\\" does not meet any condition except containing lowercase letters, so it is a weak password. The third password \\"P@ssw0rd\\" meets all the conditions: it contains uppercase letters, lowercase letters, digits, and special characters, so it is a strong password. Therefore, the number of strong passwords is 2.","solution":"def is_strong_password(password): has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) special_characters = set(\\"!@#%^&*()-=+\\") has_special = any(c in special_characters for c in password) return has_upper and has_lower and has_digit and has_special def count_strong_passwords(passwords): strong_password_count = sum(1 for pwd in passwords if is_strong_password(pwd)) return strong_password_count # Example usage: # passwords = [\\"HelloWorld123!\\", \\"weakpassword\\", \\"P@ssw0rd\\"] # print(count_strong_passwords(passwords)) # Output should be 2"},{"question":"Tim and Jane are participating in a collaborative coding competition. They have to solve a problem that involves working with a matrix of integers. Given an M times N matrix, they need to find the largest sum of any submatrix within the given matrix. A submatrix is defined as any contiguous block of the original matrix. Could you help them by writing a function to compute this? -----Input----- The first line of input consists of two integers M (1 le M le 1000) and N (1 le N le 1000), the number of rows and columns of the matrix, respectively. The next M lines contain N integers each, representing the matrix elements. Each matrix element a_{ij} (-10^9 le a_{ij} le 10^9). -----Output----- Output a single integer, the largest sum of any submatrix within the given matrix. -----Examples----- Sample Input 1: 3 3 1 -2 3 -4 5 -6 7 8 9 Sample Output 1: 24 Sample Input 2: 2 2 -1 -2 -3 -4 Sample Output 2: -1","solution":"def largest_sum_submatrix(matrix): Returns the largest sum of any submatrix within the given matrix. import numpy as np M = len(matrix) N = len(matrix[0]) max_sum = -float(\'inf\') for left in range(N): row_sum = [0] * M for right in range(left, N): for i in range(M): row_sum[i] += matrix[i][right] current_max_sum = max_subarray_sum(row_sum) max_sum = max(max_sum, current_max_sum) return max_sum def max_subarray_sum(arr): Helper function to find the maximum sum subarray using Kadane\'s Algorithm. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"A university is hosting a coding competition, and one of the challenges involves finding the optimal schedule for presentations. There are `n` students, each with a certain number of presentation slots they can take, and `m` available time slots for presentations. Each student can present only once, and each slot can host exactly one presentation. The goal is to maximize the number of students who can present. You are given a list of students with their available slots and a list of available time slots. Your task is to determine the maximum number of presentations that can be scheduled. Input The first line of the input contains two integers `n` and `m` — the number of students and the number of available time slots (1 ≤ n, m ≤ 10^5). The next `n` lines describe each student\'s available slots. Each line starts with an integer `k_i` (1 ≤ k_i ≤ m), the number of slots the student can take. This is followed by `k_i` integers, representing the indices of the available slots for the student (1 ≤ index ≤ m and all indices are distinct). The following `m` lines contain integers `1` to `m`, each representing an available time slot. Output Output a single integer — the maximum number of students that can present. Example Input 3 5 2 1 2 3 2 3 4 1 5 1 2 3 4 5 Output 3","solution":"from collections import defaultdict, deque def max_presentations(n, m, student_slots, available_slots): def bfs(): queue = deque() for u in range(1, n + 1): if pair_u[u] == 0: dist[u] = 0 queue.append(u) else: dist[u] = float(\'inf\') dist[0] = float(\'inf\') while queue: u = queue.popleft() if dist[u] < dist[0]: for v in adj[u]: if dist[pair_v[v]] == float(\'inf\'): dist[pair_v[v]] = dist[u] + 1 queue.append(pair_v[v]) return dist[0] != float(\'inf\') def dfs(u): if u != 0: for v in adj[u]: if dist[pair_v[v]] == dist[u] + 1: if dfs(pair_v[v]): pair_v[v] = u pair_u[u] = v return True dist[u] = float(\'inf\') return False return True adj = defaultdict(list) for i, slots in enumerate(student_slots, 1): adj[i].extend(slots) pair_u = [0] * (n + 1) pair_v = [0] * (m + 1) dist = [0] * (n + 1) matching = 0 while bfs(): for u in range(1, n + 1): if pair_u[u] == 0: if dfs(u): matching += 1 return matching"},{"question":"Monica is a software developer at a tech company. She has been assigned to improve their customer support system by automating email responses. One of the tasks requires parsing email subjects to identify important keywords. She needs a program that will extract and count the frequency of each word in a given list of email subjects. The program should ignore case and exclude common stopwords (e.g., \\"the\\", \\"is\\", \\"in\\", \\"and\\", \\"an\\"). Input The first line contains the number of email subjects `N`. The following `N` lines each contain a single email subject. Output For each word that is not a stopword, output in the following format: `word: frequency`, each on a new line. Sort the output alphabetically by the word. Assumptions: - The list of stopwords is: [\\"the\\", \\"is\\", \\"in\\", \\"and\\", \\"an\\", \\"a\\", \\"to\\", \\"of\\", \\"for\\", \\"on\\", \\"at\\", \\"with\\", \\"by\\", \\"from\\", \\"as\\", \\"this\\", \\"that\\", \\"these\\", \\"those\\"] - Email subjects consist only of alphabetic characters and spaces. - Words must be case-insensitive. For example, \\"Monica\\" and \\"monica\\" should be counted as the same word. SAMPLE INPUT 3 The quick brown fox Jumped over the lazy dog AND ran away quickly SAMPLE OUTPUT away: 1 brown: 1 dog: 1 fox: 1 jumped: 1 lazy: 1 over: 1 quick: 1 quickly: 1 ran: 1 fox: 1","solution":"def parse_email_subjects(n, email_subjects): Parse email subjects to get the frequency of each word excluding common stopwords. Args: n : int : The number of email subjects email_subjects : list : List of email subject strings Returns: dict : A dictionary where keys are words and values are their frequencies stopwords = set([\\"the\\", \\"is\\", \\"in\\", \\"and\\", \\"an\\", \\"a\\", \\"to\\", \\"of\\", \\"for\\", \\"on\\", \\"at\\", \\"with\\", \\"by\\", \\"from\\", \\"as\\", \\"this\\", \\"that\\", \\"these\\", \\"those\\"]) word_frequency = {} for subject in email_subjects: words = subject.lower().split() for word in words: if word not in stopwords: if word in word_frequency: word_frequency[word] += 1 else: word_frequency[word] = 1 return dict(sorted(word_frequency.items())) # The results can be printed as: # word_freq = parse_email_subjects(n, email_subjects) # for word, count in word_freq.items(): # print(f\\"{word}: {count}\\")"},{"question":"In this challenge, you need to determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Given two strings, determine if they are anagrams. Return \'Anagram\' if they are, and \'Not Anagram\' if they are not. Example str1=textbf{\'listen\'} str2=textbf{\'silent\'} Both strings can be rearranged to form \'eilnst\', so they are anagrams. Function Description Complete the `areAnagrams` function in the editor below. `areAnagrams` has the following parameter(s): - string `str1`: the first string - string `str2`: the second string Returns - string: either \'Anagram\' or \'Not Anagram\' Input Format The first line contains an integer textit{q}, the number of queries. The next `q` lines each contain two space-separated strings, boldsymbol{mathrm{str1}} and boldsymbol{mathrm{str2}}. Constraints 1 leq q leq 10 1 leq text{length of} str1, str2 leq 10000 Sample Input ``` 2 listen silent triangle integral ``` Sample Output ``` Anagram Anagram ``` Explanation Test Case 0: - str1 = \'listen\' - str2 = \'silent\' Both strings contain the same characters and can be rearranged to form \'eilnst\', so the answer is \'Anagram\'. Test Case 1: - str1 = \'triangle\' - str2 = \'integral\' Both strings contain the same characters and can be rearranged to form \'aegilnrt\', so the answer is \'Anagram\'.","solution":"def areAnagrams(str1, str2): Determines if two strings are anagrams. Parameters: str1 (str): the first string str2 (str): the second string Returns: str: \'Anagram\' if the strings are anagrams, \'Not Anagram\' otherwise if sorted(str1) == sorted(str2): return \'Anagram\' else: return \'Not Anagram\'"},{"question":"Diagonal Span Given a `n x n` matrix, return a list of lists containing elements of the matrix grouped by their diagonals. Diagonals are defined from the top-right to the bottom-left of the matrix. For instance, consider the following matrix: ``` matrix = [[1,2,3], [4,5,6], [7,8,9]] ``` The diagonals starting from the top-right to bottom-left are as follows: - [3] - [2, 6] - [1, 5, 9] - [4, 8] - [7] Therefore, the output should be: ``` diagonal_span(matrix) #=> [[3], [2, 6], [1, 5, 9], [4, 8], [7]] ``` Consider another example: ``` matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]] ``` The diagonals would be: - [4] - [3, 8] - [2, 7, 12] - [1, 6, 11, 16] - [5, 10, 15] - [9, 14] - [13] Thus, the output should be: ``` diagonal_span(matrix) #=> [[4], [3, 8], [2, 7, 12], [1, 6, 11, 16], [5, 10, 15], [9, 14], [13]] ``` You may assume that the input matrix will always be a square matrix with at least one element.","solution":"def diagonal_span(matrix): Given an n x n matrix, returns a list of lists containing elements of the matrix grouped by their diagonals from the top-right to the bottom-left. n = len(matrix) result = [] # Traverse from the top-right to the bottom-left diagonals for d in range(2 * n - 1): diagonal = [] # Determine the starting point for each diagonal if d < n: row_start = 0 col_start = n - d - 1 else: row_start = d - n + 1 col_start = 0 # Collect elements in the current diagonal row, col = row_start, col_start while row < n and col < n: diagonal.append(matrix[row][col]) row += 1 col += 1 result.append(diagonal) return result"},{"question":"You are given a list of N integers, and your task is to determine the minimum number of jumps required to reach the last index from the first index. You can advance up to the number specified at a given position in the list from that position. If it is impossible to reach the end of the list, return -1. Constraints: * All values in the input are integers. * 1 leq N leq 10^5 * 0 leq array[i] leq 10^5 Input: Input is given from Standard Input in the following format: N array[0] array[1] ... array[N-1] Output: Print the minimum number of jumps required to reach the last index or -1 if it is not possible. Examples: Input: 6 2 3 1 1 4 Output: 2 Input: 5 1 1 1 1 1 Output: 4 Input: 5 0 2 3 1 4 Output: -1","solution":"def min_jumps_to_end(arr): n = len(arr) if n == 1: return 0 if arr[0] == 0: return -1 max_reach = arr[0] steps = arr[0] jumps = 1 for i in range(1, n): if i == n-1: return jumps max_reach = max(max_reach, i + arr[i]) steps -= 1 if steps == 0: jumps += 1 if i >= max_reach: return -1 steps = max_reach - i return -1"},{"question":"An international chess tournament is being organized. The tournament will be a round-robin, where every participant plays exactly one game against every other participant. However, some players are busy and thus are not willing to play against each other. You are responsible for arranging as many games as possible while ensuring that no player is scheduled to play against someone they are unwilling to compete with. You are given a list of players and the pairs of players who refuse to play against each other. Your task is to determine the maximum number of permissible games that can be arranged. Input The first line contains one integer t (1 ≤ t ≤ 1 000) — the number of test cases. Each test case is described as follows: The first line contains two integers n and m (2 ≤ n ≤ 100, 0 ≤ m ≤ (n * (n - 1)) / 2) — the number of players and the number of pairs of players who refuse to play against each other. Each of the following m lines contains two integers u, v (1 ≤ u, v ≤ n, u ≠ v), which means player u and player v refuse to play against each other. Output For each test case, print one integer — the maximum number of permissible games that can be arranged. Example Input 3 4 2 1 2 3 4 3 1 2 3 5 0 Output 4 2 10 Note In the first test case, players 1 and 2 refuse to play against each other, and players 3 and 4 refuse to play against each other. Thus, the permissible games are (1-3), (1-4), (2-3), and (2-4), resulting in 4 games in total. In the second test case, players 2 and 3 refuse to play against each other. The permissible games are (1-2) and (1-3), resulting in 2 games in total. In the third test case, no pair of players refuse to play against each other. Thus, all possible games can be arranged, resulting in 10 games (since there are 5 players, n * (n - 1) / 2 = 5 * 4 / 2 = 10 games).","solution":"def max_permissible_games(t, test_cases): results = [] for i in range(t): n, m, pairs = test_cases[i] total_games = n * (n - 1) // 2 results.append(total_games - m) return results"},{"question":"Given a Maze You are given a 2D grid maze consisting of \'S\', \'.\', \'#\', and \'E\'. Where: - \'S\' is the starting point. - \'.\' is an open cell you can move through. - \'#\' is a wall you cannot move through. - \'E\' is the end point. You can move up, down, left, or right, and you need to determine if there is a path from \'S\' to \'E\'. Write a function that takes as input the 2D grid and returns a boolean indicating whether there is a way to reach \'E\' from \'S\'. Input Format - The first line contains two integers, n and m, the dimensions of the grid. - The next n lines contain m characters each representing the maze configuration. Constraints: 1<= n, m <= 1000 The grid will have only one \'S\' and one \'E\'. Output Format A boolean indicating if there is a path from \'S\' to \'E\'. Sample Input 5 5 S.... .#.#. ..#.. .#.#. ...E. Sample Output True Explanation There is a path from \'S\' to \'E\' like \'S\' -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2) -> (4,3) -> \'E\'.","solution":"def is_path_exists(grid): Determines if there is a path from \'S\' to \'E\' in the given grid maze. Parameters: grid (list of list of str): The 2D grid maze. Returns: bool: True if a path exists, False otherwise. n = len(grid) m = len(grid[0]) def find_start_end(): start = end = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) return start, end def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] in (\'.\', \'E\') def dfs(x, y): if (x, y) == end: return True grid[x][y] = \'#\' for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny) and dfs(nx, ny): return True return False start, end = find_start_end() if not start or not end: return False return dfs(*start)"},{"question":"# Definition **_Balanced Number_** *is a number where the sum of the digits to the left of the middle digit(s) is equal to the sum of the digits to the right of the middle digit(s).* ____ # Task **_Given_** *a positive integer* `N` , **_Return True_** *if the number is Balanced, otherwise return False*. ____ # Warm-up (Highly recommended) # [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers) ___ # Notes * **_Number_** *passed is always* **_Positive_** ( **1_000_000 > N > 0**) ___ # Input >> Output Examples ``` isBalanced(12321) ==> return True ``` **_Explanation_**: # First half = (1+2), Middle digit = 3 , Last half = (2+1) __ # (3) == (3) ==> Balanced ___ ``` isBalanced(2468) ==> return False ``` **_Explanation_**: # First half = (2+4), Last half = (6+8) __ # (6) != (14) ==> Not Balanced ___ ___ ___ # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def isBalanced(N): Given a positive integer N, returns True if the number is Balanced, otherwise returns False. digits = str(N) length = len(digits) if length == 1: return True half = length // 2 left_sum = sum(int(digit) for digit in digits[:half]) if length % 2 == 0: right_sum = sum(int(digit) for digit in digits[half:]) else: right_sum = sum(int(digit) for digit in digits[half+1:]) return left_sum == right_sum"},{"question":"You are given an array A_1 to A_N, where each element represents the height of a plant. You can perform the following operation any number of times: - Choose any plant and decrease its height by 1, provided its height is greater than 0, and also decrease the height of all taller plants in the array by the same amount as the chosen plant. The goal is to minimize the height difference between the tallest and shortest plants. Write a function to find the minimum possible height difference between the tallest and shortest plants after performing any number of operations. -----Constraints----- - All values in input are integers. - 1 leq N leq 5 * 10^4 - 1 leq A_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print the minimum possible height difference between the tallest and shortest plants. -----Sample Input----- 5 8 6 4 7 4 -----Sample Output----- 0 By performing the operation until all plants\' heights are equal, the height difference becomes 0, which is the minimum possible.","solution":"def min_height_difference(n, heights): This function calculates the minimum height difference between the tallest and shortest plants after performing the given operations. :param n: The number of plants :param heights: A list of integers representing the heights of the plants :return: An integer representing the minimum possible height difference # Since we can decrease the height of any plant and also all taller plants, # we can reduce all plants to the height of the shortest plant. # The minimum height difference will always be 0. return 0"},{"question":"A transportation company is developing a route planning system. They need a program that can determine the shortest route between two points in a city grid. The city is represented as an n x m grid of blocks, with some of the blocks being inaccessible due to construction. Each block can be represented by a character, where \'.\' indicates an accessible block, and \'#\' indicates a block under construction that cannot be traversed. The route can only move up, down, left, or right, and cannot move diagonally. Create a program that reads a grid, start and goal coordinates, and calculates the shortest distance between the start and goal. If the goal is unreachable, the program should output -1. Input The first line of input consists of two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid. The next n lines each contain a string of length m consisting of \'.\' and \'#\', representing the grid. The following line contains two integers, xs and ys (1 ≤ xs ≤ n, 1 ≤ ys ≤ m), representing the starting coordinates. The final line contains two integers, xg and yg (1 ≤ xg ≤ n, 1 ≤ yg ≤ m), representing the goal coordinates. The starting and goal coordinates will always be on accessible blocks. Output Output the length of the shortest path from start to goal. If there is no path, output -1. Example Input 5 5 ..... ..#.. ..#.. ..#.. ..... 1 1 5 5 Output 8","solution":"from collections import deque def shortest_route(n, m, grid, start, goal): Finds the shortest route on a grid from start to goal. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(start[0] - 1, start[1] - 1, 0)]) # include step counter visited = [[False] * m for _ in range(n)] visited[start[0] - 1][start[1] - 1] = True while queue: x, y, steps = queue.popleft() if (x, y) == (goal[0] - 1, goal[1] - 1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1 def parse_input(inputs): Parses the input as specified for the problem. lines = inputs.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [lines[i + 1] for i in range(n)] start = tuple(map(int, lines[n + 1].split())) goal = tuple(map(int, lines[n + 2].split())) return n, m, grid, start, goal"},{"question":"A language editor is working on a document in which they have to convert specific phrases into their acronym forms. An acronym is formed by taking the first letter of each word in the phrase and making a new word out of it using only those letters. Your task is to help the editor by writing a program that generates the acronym for given phrases. Input format: The first line of input contains an integer n, which is the number of phrases. The next n lines each contain a single phrase consisting of alphabetical words separated by spaces. Output format: For each phrase, output the acronym in uppercase on a new line. Constraints: 1 ≤ n ≤ 100 1 ≤ length of each phrase ≤ 100 SAMPLE INPUT 3 Portable Network Graphics First In, First Out GNU Image Manipulation Program SAMPLE OUTPUT PNG FIFO GIMP Explanation For \\"Portable Network Graphics\\", the first letters of each word are \'P\', \'N\', \'G\', leading to the acronym \\"PNG\\". For \\"First In, First Out\\", the acronym is \\"FIFO\\" based on the words \'First\', \'In\', \'First\', \'Out\'. For \\"GNU Image Manipulation Program\\", the first letters \'G\', \'I\', \'M\', \'P\' combine to form \\"GIMP\\".","solution":"def generate_acronym(phrases): Given a list of phrases, generate the acronym for each phrase. Args: phrases (list of str): List of phrases. Returns: list of str: List of acronyms for the given phrases. acronyms = [] for phrase in phrases: # Split the phrase into words and take the first letter of each word, then join them in uppercase acronym = \'\'.join(word[0].upper() for word in phrase.split()) acronyms.append(acronym) return acronyms"},{"question":"A company plans to distribute bonus points to its employees. Each employee has a unique integer ID, and the company wants to make sure every employee receives a different number of bonus points such that no two employees get the same amount of bonus. The employees also have ranks, and higher-ranked employees should receive more bonus points than lower-ranked employees. If two employees have the same rank, they can get any different amount of bonus points as long as all the bonus points are unique. You are provided with an array where each element is an integer representing the rank of an employee. The array is 1-indexed, and the rank of employee i is given by the i-th element of the array. Your task is to find the minimum possible total sum of the bonus points distributed such that all the conditions are met. Input The first line of the input contains one integer n (1 ≤ n ≤ 10^5) — the number of employees. The second line contains n space-separated integers — the ranks of the employees. Output Print the minimum possible total sum of the bonus points distributed under the given conditions. Example Input 5 3 3 1 2 1 Output 15 Explanation - For rank 1: Employee 3 and Employee 5 might receive 1 and 2 points, respectively. - For rank 2: Employee 4 might receive 3 points. - For rank 3: Employee 1 and Employee 2 might receive 4 and 5 points, respectively. The total sum of bonuses is 1 + 2 + 3 + 4 + 5 = 15, which is the minimum possible total sum.","solution":"def min_total_bonus(n, ranks): Returns the minimum possible total sum of the bonus points distributed according to the ranks. # Sort the ranks and then use the natural bonus assignments. sorted_ranks = sorted(ranks) total_bonus = 0 current_bonus = 1 for i in range(n): total_bonus += current_bonus current_bonus += 1 return total_bonus"},{"question":"Sam is working on a basic HTML parser for a web scraping project. One of the tasks is to extract the text content from within HTML tags. The HTML documents Sam is working with are simple and do not contain any nested tags or attributes. For example, given the HTML string \\"<div>Hello, World!</div><p>Welcome to the coding assessment.</p>\\", Sam needs to extract the text content \\"Hello, World! Welcome to the coding assessment.\\" Write a function `extract_text(html: str) -> str` that takes a single string `html` representing the HTML content and returns a single string containing only the text content from within the tags. Input The input string `html` consists of lowercase Latin letters, spaces, punctuation marks, and tags enclosed in \\"<>\\" brackets. The length of `html` is from 1 to 10^5 characters. Output Return a single string containing the concatenated text contents from within the HTML tags, separated by a single space. Examples Input <div>Hello, World!</div><p>Welcome to the coding assessment.</p> Output Hello, World! Welcome to the coding assessment. Input <span>Hello!</span><span>How are you?</span> Output Hello! How are you? Input <b>Welcome!</b><i>To the</i><u>future of</u><strong>web scraping!</strong> Output Welcome! To the future of web scraping! Note: You should not use any sophisticated HTML parsing libraries; manually process the string to extract the text content.","solution":"def extract_text(html: str) -> str: Extracts and concatenates text content from within HTML tags. Args: html (str): input HTML content as a string. Returns: str: concatenated text contents from within the HTML tags, separated by a single space. import re # Use regex to find all text content between HTML tags text_list = re.findall(r\'>([^<]+)<\', html) # Concatenate text items with a single space return \' \'.join(text_list)"},{"question":"In the kingdom of Algoria, there is a tradition of organizing an annual coding competition where the participants solve programming challenges to prove their skills. This year, the royal mathematician has prepared a tricky problem about sequences. Participants need to find the longest subsequence of a given sequence that is strictly increasing. Given Algoria\'s love for challenges, the sequences can be very long, and they want to do this efficiently. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Given an integer sequence, find the length of the longest strictly increasing subsequence. -----Input----- The first line contains an integer n (1 leq n leq 10^5), the length of the sequence. The second line contains n integers a_i (1 leq a_i leq 10^9), the elements of the sequence. -----Output----- Print a single integer, the length of the longest strictly increasing subsequence of the given sequence. -----Example----- Input 6 5 8 3 7 9 1 Output 3 -----Explanation----- One of the longest strictly increasing subsequences is [5, 7, 9], which has length 3. Another valid subsequence is [3, 7, 9].","solution":"import bisect def length_of_LIS(nums): Returns the length of the longest strictly increasing subsequence in the given list of integers. if not nums: return 0 lis = [] for num in nums: pos = bisect.bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) # Example usage: # n = 6 # nums = [5, 8, 3, 7, 9, 1] # print(length_of_LIS(nums)) # Output: 3"},{"question":"Write a function that takes a positive integer n and returns the factorial of n. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. Assume that the input n will always be a positive integer. Examples: ```python factorial(4) > 24 # factorial of 4 is 4 * 3 * 2 * 1 factorial(6) > 720 # factorial of 6 is 6 * 5 * 4 * 3 * 2 * 1 ```","solution":"def factorial(n): Returns the factorial of n. if n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"A data analytics company wants to categorize a series of numbers into labeled sections. Each section should group consecutive sequential numbers together and denote the range of their labels. If a number does not belong to any sequence, it should be labeled individually. Input: - The first line contains the number of test cases. - Each test case starts with an integer `n`, the number of numbers to be processed. This is followed by `n` integers representing the sequence of numbers. Output: - For each test case, print the categorized numbers. When consecutive numbers form a sequence, represent them as \\"start-end\\". Non-consecutive numbers should be printed individually. SAMPLE INPUT 2 6 1 2 3 7 8 10 5 4 5 6 7 10 SAMPLE OUTPUT 1-3, 7-8, 10 4-7, 10","solution":"def categorize_numbers(test_cases): results = [] for case in test_cases: n = case[0] numbers = case[1:] categorized = [] i = 0 while i < n: start = numbers[i] while i + 1 < n and numbers[i + 1] == numbers[i] + 1: i += 1 end = numbers[i] if start == end: categorized.append(str(start)) else: categorized.append(f\\"{start}-{end}\\") i += 1 results.append(\\", \\".join(categorized)) return results"},{"question":"Write a function, `find_homogeneous_subarray`, that finds the longest contiguous subarray consisting of identical elements from a given array of integers. The function should return the length of this longest subarray. Input Format A single line with a single integer, n, the number of elements in the array followed by n space-separated integers which represent the elements of the array. Constraints 1 leq n leq 10^5 1 leq a_i leq 10^9 Output Format Print a single integer, the length of the longest contiguous homogeneous subarray. Sample Input 10 1 1 2 2 2 3 3 3 3 4 Sample Output 4 Explanation In the sample input provided [1, 1, 2, 2, 2, 3, 3, 3, 3, 4], the longest contiguous subarray of identical elements consists of the number 3 occurring four times consecutively. Hence, the length of the longest homogeneous subarray is 4.","solution":"def find_homogeneous_subarray(n, arr): Finds the length of the longest contiguous subarray consisting of identical elements. :param n: int - number of elements in the array :param arr: list of int - the elements of the array :return: int - length of the longest homogeneous subarray if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if arr[i] == arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"In a forest, there are T types of trees. Each tree type has a specific growth rate, measured as meters per year. Forester Sam needs to determine the height of each type of tree after a certain number of years and find the tallest tree and its height after these years. Formally, you are given T tree types, where the i-th tree type has a growth rate Gi meters per year. Sam also has a list of Y year intervals, and for each interval, he wants to know the height of the tallest tree in the forest at the end of that many years. Given T tree types with their growth rates, and Y year intervals, your task is to find the height of the tallest tree after each of the given year intervals. ------ Input: ------ The first line of input consists of single integer P denoting the number of test cases. The second line of each test case contains an integer T, denoting the number of tree types. The third line contains T space-separated integers (Gi) denoting the growth rates of each tree type. The fourth line contains an integer Y, denoting the number of year intervals. The fifth line contains Y space-separated integers, each representing a number of years after which the height of the tallest tree is to be calculated. ------ Output: ------ For each test case, output Y space-separated integers, where the j-th integer represents the height of the tallest tree after the j-th year interval. ------ Constraints ------ 1 ≤ P ≤ 100 1 ≤ T ≤ 10^{4} 1 ≤ Y ≤ 10^{4} Sum of T + Y over all test cases ≤ 5*10^{5} 1 ≤ Gi, years ≤ 10^{6} ------ Sample Input: ------ 3 3 2 3 5 4 1 2 3 4 2 1 4 3 2 3 4 1 2 4 1 1 1 1 2 10 20 ------ Sample Output: ------ 5 10 15 20 4 8 12 1 1 # EXPLANATION: ----- Sample Input 1 ------ 3 3 4 5 4 1 2 3 4 2 1 4 3 2 3 4 1 2 4 1 1 1 1 2 10 20 ----- Sample Output 1 ------ 5 10 15 20 4 8 12 1 1 ----- Explanation: ------ In the first test case, we have 3 types of trees with growth rates 2, 3, and 5 meters per year. The problem asks for the tallest tree after 1, 2, 3, and 4 years. As the tallest tree grows 5 meters per year, the heights are 5, 10, 15, and 20 meters respectively. In the second test case, we have 2 types of trees growing at the rate of 1 and 4 meters per year. After 1 and 4 years, the tallest tree grows 4 and 16 meters respectively. In the third test case, all tree types grow at the same rate of 1 meter per year. Thus after 10 and 20 years, all trees are of the same height 10 and 20 meters respectively.","solution":"def tallest_tree_growth(P, cases): results = [] for i in range(P): T = cases[i][\'T\'] growth_rates = cases[i][\'growth_rates\'] Y = cases[i][\'Y\'] years = cases[i][\'years\'] max_growth_rate = max(growth_rates) result = [max_growth_rate * year for year in years] results.append(result) return results"},{"question":"Alice is playing a game where she is given n blocks of wood, each with a length. She has to build the longest possible continuous fence using exactly m blocks, selected from the n blocks available. The fence is considered continuous if all selected m blocks are placed end-to-end in a sequence. Alice needs your help to determine the maximum length of such a continuous fence that can be built. Input The first line contains two integers n and m (1 ≤ m ≤ n ≤ 100,000) — the number of blocks and the number of blocks to be used to build the fence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10,000) — the lengths of the blocks. Output Print one integer — the maximum length of the continuous fence that can be built using exactly m blocks. Examples Input 5 3 1 2 3 4 5 Output 12 Input 8 4 5 5 5 5 2 2 2 2 Output 20 Note In the first example, Alice can choose the last three blocks of lengths 3, 4, and 5 to build the fence for a total length of 12. In the second example, Alice can choose the first four blocks of lengths 5, 5, 5, and 5 to build the fence for a total length of 20.","solution":"def maximum_fence_length(n, m, lengths): Determines the maximum length of a continuous fence that can be built using exactly m blocks. :param n: int, the number of blocks :param m: int, the number of blocks to use for the fence :param lengths: list of int, the lengths of the blocks :return: int, the maximum length of the continuous fence max_length = 0 current_sum = sum(lengths[:m]) max_length = current_sum for i in range(m, n): current_sum += lengths[i] - lengths[i - m] if current_sum > max_length: max_length = current_sum return max_length"},{"question":"In a distant land, there is a unique game called \\"Robot Race\\". In this game, you need to program a robot to navigate a grid of size n x m. The robot starts at position (1, 1) and must reach position (n, m). The robot can move in four possible directions: up, down, left, and right. You are given a grid where some cells are blocked, meaning the robot cannot pass through them. Your task is to determine the minimum number of moves required for the robot to reach the destination (n, m). If it\'s impossible for the robot to reach the destination, return -1. The grid is represented as a binary matrix, where 0 indicates an open cell and 1 indicates a blocked cell. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. The next n lines contain m integers (0 or 1). The j-th integer in the i-th line represents the cell (i, j). Output Print a single integer — the minimum number of moves required to reach the destination, or -1 if it\'s impossible. Examples Input 3 3 0 0 0 1 1 0 0 0 0 Output 4 Input 3 3 0 0 1 1 1 1 0 0 0 Output -1","solution":"from collections import deque def min_moves_to_reach_destination(n, m, grid): Determines the minimum number of moves required for the robot to reach the destination (n, m) in a grid. Returns -1 if it\'s impossible to reach. Parameters: n: int - number of rows in the grid m: int - number of columns in the grid grid: List[List[int]] - binary matrix representing the grid Returns: int - minimum number of moves to reach destination (n, m) or -1 if impossible # Movement directions: down, up, right, left directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Initialize visited matrix to keep track of visited cells visited = [[False for _ in range(m)] for _ in range(n)] # Start BFS with robot\'s starting position (0, 0) with 0 initial moves queue = deque([(0, 0, 0)]) visited[0][0] = True # Base case - if the starting or ending position is blocked if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 while queue: x, y, moves = queue.popleft() # If we reach the destination, return the number of moves if x == n-1 and y == m-1: return moves # Explore all possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny, moves + 1)) # If BFS completes without reaching the destination, return -1 return -1"},{"question":"-----Input----- The only line of the input contains a string of uppercase English alphabet characters. The length of the string is between 1 and 15, inclusive. -----Output----- Output a single integer indicating the count of vowels (A, E, I, O, U) in the string. -----Examples----- Input HELLO Output 2 Input WORLD Output 1 Input PYTHON Output 1","solution":"def count_vowels(s): Returns the count of vowels (A, E, I, O, U) in the given string s. vowels = {\'A\', \'E\', \'I\', \'O\', \'U\'} count = sum(1 for char in s if char in vowels) return count"},{"question":"You are given a string `s` and an integer `k`. Your task is to determine whether it is possible to remove exactly `k` characters from the string to create a palindrome. A palindrome is a string that reads the same forward and backward. Return \\"Yes\\" if it is possible, otherwise return \\"No\\". Constraints: * The string `s` consists of lowercase English letters. * ( 1 leq text{length of } s leq 10^5 ) * ( 0 leq k leq text{length of } s ) Input: The input consists of two lines: 1. The string `s` 2. The integer `k` Output: Print \\"Yes\\" if it is possible to remove exactly `k` characters to form a palindrome, otherwise print \\"No\\". Examples: Input: abacaba 1 Output: Yes Input: abcdef 3 Output: No Input: racecar 0 Output: Yes","solution":"def can_form_palindrome(s, k): def longest_palindromic_subsequence(s): n = len(s) dp = [[0]*n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1] lps_len = longest_palindromic_subsequence(s) return \\"Yes\\" if len(s) - lps_len <= k else \\"No\\""},{"question":"Emily is trying to organize her bookshelf with an interesting set of rules. She has N books positioned sequentially from 1 to N. Emily wants to arrange these books in a specific order called a \\"Reverse Zigzag\\" order. This order operates as follows: 1. Divide the bookshelf into groups of K books, where K can range from 1 to N. 2. For each group, reverse the order of books within the group. 3. Concatenate the groups to form the final order of books. Given K, the function `rearrange_books(N, K)` should return the sequence of books in \\"Reverse Zigzag\\" order. -----Input----- - The first line contains a single integer T, the number of test cases. Each of the next T lines contains two space-separated integers N and K. -----Output----- For each test case, print the sequence of book indices after arranging them in \\"Reverse Zigzag\\" order. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - 1 le K le N -----Example Input----- 2 6 2 5 3 -----Example Output----- 2 1 4 3 6 5 3 2 1 5 4 -----Explanation----- Example case 1: - If N = 6 and K = 2: The sequence is divided into groups as follows: [1, 2], [3, 4], [5, 6] - Reverse each group results in: [2, 1], [4, 3], [6, 5] - The final order of the books is: 2, 1, 4, 3, 6, 5 Example case 2: - If N = 5 and K = 3: The sequence is divided into groups as follows: [1, 2, 3], [4, 5] - Reverse each group results in: [3, 2, 1], [5, 4] - The final order of the books is: 3, 2, 1, 5, 4","solution":"def rearrange_books(N, K): Returns the sequence of books after arranging them in \\"Reverse Zigzag\\" order. result = [] for i in range(0, N, K): group = list(range(i + 1, min(i + K + 1, N + 1))) result += group[::-1] return result def process_test_cases(T, test_cases): result = [] for N, K in test_cases: result.append(rearrange_books(N, K)) return result"},{"question":"Problem You are given a string S consisting of lowercase English letters. You need to find the smallest substring of S that contains all the distinct characters present in S. Constraints The input satisfies the following conditions: * The input string contains only lowercase English letters. * 1 ≤ length of S ≤ 100,000 Input The input is given in the following format: S Output Output the length of the smallest substring that contains all the distinct characters present in S. Examples Input abcda Output 4 Input abac Output 3 Input aaaa Output 1 Input abcdabc Output 4","solution":"def smallest_substring_length_with_all_distinct_chars(s): from collections import defaultdict distinct_chars = set(s) count_distinct = len(distinct_chars) n = len(s) char_count = defaultdict(int) start = 0 min_length = float(\'inf\') distinct_counter = 0 for end in range(n): char = s[end] if char_count[char] == 0: distinct_counter += 1 char_count[char] += 1 while distinct_counter == count_distinct and start <= end: min_length = min(min_length, end - start + 1) start_char = s[start] char_count[start_char] -= 1 if char_count[start_char] == 0: distinct_counter -= 1 start += 1 return min_length"},{"question":"Given a string T, we define some operations on the string as follows: a. rotate_left(T, k) denotes the string obtained by rotating string T to the left by k positions. E.g.: rotate_left(\\"abcdef\\", 2) = \\"cdefab\\" b. rotate_right(T, k) denotes the string obtained by rotating string T to the right by k positions. E.g.: rotate_right(\\"abcdef\\", 2) = \\"efabcd\\" c. combine(S1, S2) denotes a string created by concatenating two strings S1 and S2. E.g.: combine(\\"hello\\", \\"world\\") = \\"helloworld\\" Given a string T such that T∈ combine(rotate_left(A, k), rotate_right(B, k)), for some integer k and some strings A and B, can you find the lexicographically smallest A and B? Input Format A single line containing the string T. Constraints: T contains only lower-case English letters. The length of string T is less than or equal to 10000. Output Format Two strings separated by a space which are the lexicographically smallest valid A and B. SAMPLE INPUT cdefabfabcde SAMPLE OUTPUT cdefab fabcde Explanation rotate_left(\\"cdefab\\", 2) = \\"efabcd\\" rotate_right(\\"fabcde\\", 2) = \\"defabc\\" \\"cdefab\\" and \\"fabcde\\" can be valid due to the rotations and combinations. The lexicographically smallest result is \\"cdefab fabcde\\".","solution":"def find_lexicographically_smallest_ab(T): Finds the lexicographically smallest A and B such that T is a combination of rotate_left(A, k) and rotate_right(B, k) for some integer k. n = len(T) min_a = T[:n//2] min_b = T[n//2:] for i in range(1, n//2): a = T[i:i + n//2] b = T[:i] + T[i + n//2:] # Calculate rotated versions rotated_left_a = a[-i:] + a[:-i] rotated_right_b = b[i:] + b[:i] if rotated_left_a + rotated_right_b == T and a < min_a: min_a = a min_b = b return min_a, min_b"},{"question":"You are given a list of pairs of integers. Each pair represents a rectangle with the first integer being the width and the second being the height. Calculate the area for each rectangle. From the resulting areas, determine which group\'s sum is greater: those of rectangles with odd-numbered indices in the list, or those with even-numbered indices. Note that the indices are based on a zero-indexed list. You should return: - `odds win` if the sum of areas of rectangles at odd indices is larger than that of rectangles at even indices. - `evens win` if the sum of areas of rectangles at odd indices is smaller than that of rectangles at even indices. - `tie` if the sums are equal, including if the list is empty. # Example: For an input list of `[(3, 4), (2, 5), (1, 6), (7, 8)]`: The areas of the rectangles are: - index 0: `3 * 4 = 12` - index 1: `2 * 5 = 10` - index 2: `1 * 6 = 6` - index 3: `7 * 8 = 56` Sum of areas at even indices: `12 + 6 = 18` Sum of areas at odd indices: `10 + 56 = 66` Result: `odds win` with 66-18","solution":"def compare_rectangle_areas(rectangles): Compare the sum of areas of rectangles at odd indices and even indices. Args: rectangles (list of tuples): A list where each tuple contains two integers representing width and height of a rectangle. Returns: str: \'odds win\', \'evens win\', or \'tie\' based on the area sums. odd_sum = 0 even_sum = 0 for i, (width, height) in enumerate(rectangles): area = width * height if i % 2 == 0: even_sum += area else: odd_sum += area if odd_sum > even_sum: return \'odds win\' elif even_sum > odd_sum: return \'evens win\' else: return \'tie\'"},{"question":"You are organizing a large treasure hunt in a forest. The forest is represented by an unweighted, undirected graph with nodes as locations and edges as paths between them. Some of these nodes are marked as \'treasure\' nodes where a treasure is hidden. Your objective is to create efficient routes for the treasure hunters to gather as many treasures as possible in a single trip. The hunters start their trip from the starting location \'S\' and need to visit every treasure location. However, to make the hunt challenging, the time for the treasure hunt is limited. You need to determine the minimum number of routes required for all treasures to be collected if only certain paths are allowed. Each route should start from \'S\' and can visit multiple treasure nodes but must return to \'S\' before taking another route. -----Input----- - The input starts with three integers 2 leq n leq 10^5, the number of locations in the forest, 0 leq t leq n, the number of treasure nodes, and 0 leq s < n, the location representing the starting point. - Then follow t lines, each with a single integer 0 leq x < n, signifying that location x is a treasure node. - Then follow m lines with 2 leq m leq 10^5 containing two integers 0 leq a, b < n, indicating there is a path between locations a and b. -----Output----- The output consists of: - An integer r, the minimum number of routes required for all treasures to be collected. - For each route, a line with a list of integers representing the path followed by hunters starting and ending at \'S\', visiting the treasure locations in between. In case there are multiple solutions, any of them will be accepted. -----Examples----- Sample Input: 6 3 0 1 3 5 0 1 0 2 1 3 1 4 2 5 Sample Output: 2 0 1 3 0 0 2 5 0","solution":"from collections import deque, defaultdict def find_routes(n, t, s, treasures, edges): # Building the graph graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) # Function to perform BFS from a start node and record depths def bfs(start): distances = {i: float(\'inf\') for i in range(n)} distances[start] = 0 queue = deque([start]) while queue: current = queue.popleft() for neighbor in graph[current]: if distances[neighbor] == float(\'inf\'): distances[neighbor] = distances[current] + 1 queue.append(neighbor) return distances # Get all distances from the starting point \'s\' distances_from_s = bfs(s) # To group treasures by distance from \'s\' sorted_treasures = sorted(treasures, key=lambda x: distances_from_s[x]) routes = [] visited = set() # Create routes starting from \'s\' for treasure in sorted_treasures: if treasure not in visited: route = [s] stack = [treasure] while stack: node = stack.pop() if node not in visited: route.append(node) visited.add(node) for neighbor in graph[node]: if neighbor not in visited and neighbor in treasures: stack.append(neighbor) route.append(s) routes.append(route) return len(routes), routes def process_input(n, t, s, treasure_list, edge_list): treasures = set(treasure_list) edges = edge_list route_count, routes = find_routes(n, t, s, treasures, edges) print(route_count) for route in routes: print(\' \'.join(map(str, route)))"},{"question":"Given an integer `X`, find the length of the longest contiguous subarray such that, after sorting this subarray in non-decreasing order, the entire array becomes sorted. If there are multiple such subarrays, return the length of any one of them. Example 1: Input: X = [2, 6, 3, 8, 10, 9, 15] Output: 5 Explanation: Sorting the subarray from index 1 to index 5, which is [6, 3, 8, 10, 9], will make the whole array sorted: [2, 3, 6, 8, 9, 10, 15]. The length of this subarray is 5. Example 2: Input: X = [1, 2, 3, 5, 4] Output: 2 Explanation: Sorting the subarray from index 3 to 4, which is [5, 4], will make the whole array sorted: [1, 2, 3, 4, 5]. The length of this subarray is 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `longestSubarrayToSort()` which takes a list of integers `X` as input and returns the length of the longest contiguous subarray that needs to be sorted to make the whole array sorted. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(X) <= 10^5 1 <= X[i] <= 10^9","solution":"def longestSubarrayToSort(X): n = len(X) # Find the first element out of order from the left start = 0 while start < n - 1 and X[start] <= X[start + 1]: start += 1 if start == n - 1: # The array is already sorted return 0 # Find the first element out of order from the right end = n - 1 while end > 0 and X[end] >= X[end - 1]: end -= 1 # Find the min and max in the subarray sub_min = min(X[start:end+1]) sub_max = max(X[start:end+1]) # Extend the subarray to the left if needed while start > 0 and X[start - 1] > sub_min: start -= 1 # Extend the subarray to the right if needed while end < n - 1 and X[end + 1] < sub_max: end += 1 return end - start + 1"},{"question":"Kunal has N items and a knapsack with a capacity of W. Each item i has a weight W_i and a value V_i. Kunal can either include the item in the knapsack or leave it out. Given that each item can only be included once, determine the maximum total value of items that Kunal can select to be placed in the knapsack without exceeding the capacity W. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two space-separated integers N and W — the number of items and the capacity of the knapsack respectively. - The next N lines contain two space-separated integers W_i and V_i respectively, denoting the weight and value of each item. ------ Output Format ------ For each test case, output the maximum total value of items that can be selected. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ W ≤ 1000 1 ≤ W_i ≤ 100 1 ≤ V_i ≤ 1000 ------ Sample Input 1 ------ 2 3 50 10 60 20 100 30 120 4 10 5 10 4 40 6 30 3 50 ------ Sample Output 1 ------ 220 90 ------ Explanation 1 ------ Test case 1: Kunal can include the items with weights 20 and 30, achieving a total value of 100 + 120 = 220. Test case 2: Kunal can include the item with weight 4 and value 40, and the item with weight 5 and value 10, achieving a total value of 40 + 10 = 50.","solution":"def knapsack(T, test_cases): Function to find the maximum total value of items that can be placed in the knapsack without exceeding the capacity. results = [] for case in test_cases: N, W = case[\\"N\\"], case[\\"W\\"] items = case[\\"items\\"] # Create a 2D list to store the maximum value at each n, w dp = [[0 for _ in range(W + 1)] for _ in range(N + 1)] # Build the dp array from bottom up for i in range(1, N + 1): wi, vi = items[i-1] for w in range(1, W + 1): if wi <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-wi] + vi) else: dp[i][w] = dp[i-1][w] results.append(dp[N][W]) return results"},{"question":"Given a list of strings, each representing a website URL, design an algorithm to group the URLs by their domains and subdomains. The URLs should be considered the same if they have the same root domain, regardless of their subdomains or the protocol used (http or https). Subdomains should be treated as separate groups. Constraints * 1 ≤ number of URLs ≤ 10000 * Each URL string contains only ASCII characters Input A list of URLs. url1 url2 : urlN Each URL string follows the format: {protocol}://{subdomain.rootdomain} The {protocol} can be `http` or `https`. The {subdomain} could be an empty string or can have multiple components separated by dots (.). The {rootdomain} consists of the main domain and top-level domain (TLD). Output Print the grouped URLs in the following format: root_domain: sub_domain1: url url ... sub_domain2: url url ... ... The output groups URLs by their root domains and then further groups them by their subdomains. Examples Input https://mail.google.com http://www.google.com https://docs.google.com http://news.yahoo.com https://www.yahoo.com http://finance.yahoo.com Output google.com: mail.google.com: https://mail.google.com www.google.com: http://www.google.com docs.google.com: https://docs.google.com yahoo.com: news.yahoo.com: http://news.yahoo.com www.yahoo.com: https://www.yahoo.com finance.yahoo.com: http://finance.yahoo.com","solution":"from collections import defaultdict from urllib.parse import urlparse def group_urls(urls): Groups the URLs by their domains and subdomains. root_domain_dict = defaultdict(lambda: defaultdict(list)) for url in urls: # Parse the URL parsed_url = urlparse(url) hostname = parsed_url.hostname # Split the hostname into components hostname_parts = hostname.split(\'.\') # Identify the root domain (last two parts) root_domain = \'.\'.join(hostname_parts[-2:]) # Identify the subdomain (all parts except the last two) sub_domain = hostname # Group the URLs root_domain_dict[root_domain][sub_domain].append(url) grouped_urls = {} for root in root_domain_dict: grouped_urls[root] = {} for sub in root_domain_dict[root]: grouped_urls[root][sub] = root_domain_dict[root][sub] return grouped_urls # Let\'s define a function to print according to the required format def print_grouped_urls(grouped_urls): result = [] for root_domain, subdomains in grouped_urls.items(): result.append(f\\"{root_domain}:\\") for sub_domain, urls in subdomains.items(): result.append(f\\" {sub_domain}:\\") for url in urls: result.append(f\\" {url}\\") return \\"n\\".join(result) # Function to directly handle input and output as specified def handle_urls(urls): grouped_urls = group_urls(urls) return print_grouped_urls(grouped_urls)"},{"question":"There is a large park with N intersections, numbered from 1 to N, and M walkways connecting them as undirected edges. There are k special walkways with statues along them. Bob is collecting photographs of these statues starting from a specified intersection S. He can walk along the walkways, but he wants to ensure he collects as many unique statue photographs as possible before returning to his starting intersection. You need to help Bob find the maximum number of unique statues he can photograph by taking any route that starts and ends at intersection S. Example 1: Input: N = 5, M = 5, k = 2, S = 1 statue_paths = {(1, 2), (2, 3)} walkways = {(1, 2), (2, 3), (3, 4), (4, 5), (5, 1)} Output: 2 Explanation: Starting at intersection 1, Bob can travel the walkways to photograph statues on the walkways between (1, 2) and (2, 3), then return to 1. Example 2: Input: N = 4, M = 3, k = 1, S = 1 statue_paths = {(3, 4)} walkways = {(1, 2), (2, 3), (3, 4)} Output: 1 Explanation: Starting at intersection 1, Bob can travel the walkway to photograph the statue on the walkway between (3, 4) and then return to 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxStatues() which takes the integer N, M, k, and S, the list of tuples statue_paths, and the list of tuples walkways as inputs, and returns the maximum number of unique statues Bob can photograph. Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(N + M) Constraints: 2 ≤ N ≤ 1000 1 ≤ M ≤ 2000 1 ≤ k ≤ M 1 ≤ S ≤ N 1 ≤ statue_paths[i][j], walkways[i][j] ≤ N","solution":"def maxStatues(N, M, k, S, statue_paths, walkways): from collections import defaultdict, deque # Graph construction graph = defaultdict(list) for u, v in walkways: graph[u].append(v) graph[v].append(u) # DFS to find all statues we can collect def dfs(node, visited, statues_collected): if node in visited: return visited.add(node) for neighbor in graph[node]: if (node, neighbor) in statue_paths or (neighbor, node) in statue_paths: statues_collected.add((node, neighbor) if (node, neighbor) in statue_paths else (neighbor, node)) dfs(neighbor, visited, statues_collected) visited = set() statues_collected = set() dfs(S, visited, statues_collected) return len(statues_collected)"},{"question":"You are given a list of integers and you need to rearrange the elements in such a way that no two adjacent elements have the same value. If it is not possible to rearrange the elements to meet this condition, you should return an empty list. Input The input consists of two lines. - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of integers in the list. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the list. Output Output a rearranged list of integers such that no two adjacent elements have the same value. If it is not possible to rearrange the list as required, output an empty list. Examples Input 6 1 1 1 2 2 3 Output 1 2 1 3 1 2 Input 4 4 4 4 4 Output [] Note In the first example, you can rearrange the elements as [1, 2, 1, 3, 1, 2], with no two adjacent elements being the same. In the second example, it is impossible to arrange the elements such that no two adjacent elements are the same, so the output is an empty list.","solution":"from collections import Counter import heapq def rearrange_list(n, elements): if n == 1: return elements # Count the frequency of each element freq = Counter(elements) # Create a max heap max_heap = [(-count, num) for num, count in freq.items()] heapq.heapify(max_heap) result = [] prev_count, prev_elem = 0, None while max_heap: count, elem = heapq.heappop(max_heap) result.append(elem) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_elem)) prev_count, prev_elem = count + 1, elem # we add 1 because `count` is negative if len(result) != n: return [] return result"},{"question":"A cloud storage provider offers varying tier sizes for user storage plans. Each user can choose a combination of storage sizes to meet or exceed their storage requirements. Given a list of available storage standards (in GB) and a list of user storage requirements (in GB), determine the minimum number of storage units required for each user. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of available storage standards. The next line contains n integers representing the size of each storage standard (1 ≤ size ≤ 10^6). All storage sizes are unique. The following line contains an integer m (1 ≤ m ≤ 100) — the number of users. The next line contains m integers representing each user\'s storage requirement (1 ≤ requirement ≤ 10^6). Output Print m integers. The i-th printed integer should be the minimum number of storage units required for the i-th user to meet or exceed their storage requirement. Examples Input 3 10 20 30 4 35 45 25 60 Output 2 3 2 2 Input 2 7 5 3 12 14 11 Output 2 2 2","solution":"def minimum_storage_units(n, storage_sizes, m, user_requirements): Determines the minimum number of storage units required for each user. Parameters: n (int): Number of available storage standards. storage_sizes (list of int): List containing sizes of each storage standard in GB. m (int): Number of users. user_requirements (list of int): List containing storage requirements for each user in GB. Returns: list of int: List of minimum number of storage units required for each user. storage_sizes.sort(reverse=True) result = [] for requirement in user_requirements: count = 0 remaining = requirement for size in storage_sizes: while remaining >= size: remaining -= size count += 1 if remaining > 0: count += 1 result.append(count) return result"},{"question":"Given a string that contains only digits from \'0\' to \'9\', find the smallest number that can be formed by removing at most one digit from the given number. If removing a digit is not possible or doesn\'t lead to a smaller number, return the original number as it is. Example 1: Input: num = \\"15243\\" Output: \\"1243\\" Explanation: Removing the digit \'5\' leads to the smallest number \\"1243\\" which is smaller than any other combination formed by removing a single digit. Example 2: Input: num = \\"1000\\" Output: \\"000\\" Explanation: Removing the first digit \'1\' leads to the smallest number \\"000\\" which is smaller than any other combination formed by removing a single digit. Example 3: Input: num = \\"21\\" Output: \\"1\\" Explanation: Removing the first digit \'2\' leads to the smallest number \\"1\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestNumber() which takes a string num as input and returns the smallest possible number in string format after removing at most one digit. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |num| <= 10^5","solution":"def smallestNumber(num): Given a string of digits, find the smallest number that can be formed by removing at most one digit. n = len(num) if n == 1: return num for i in range(n - 1): if num[i] > num[i + 1]: return num[:i] + num[i + 1:] return num[:-1]"},{"question":"A small company has n employees, each with a unique id from 1 to n. The employees are working on various projects and each project has a difficulty level. The effectiveness of each employee is measured by an effectiveness score which indicates how many difficulty points they can handle per unit time. Every day, the company performs the following operations: 1. A new project with difficulty d_i is assigned. 2. An employee with id e_i works on a project with difficulty d_i. They will reduce the difficulty of the project by their effectiveness score. 3. The company evaluates the total difficulty of all ongoing projects. Input The first line contains two integers n and q (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ q ≤ 10^5) — the number of employees and the number of days (queries), respectively. The second line contains n integers e_1, e_2, ..., e_n (1 ≤ e_i ≤ 10^5) — the effectiveness score of each employee. The next q lines contain the queries. For each query, the first integer of the line is t (1 ≤ t ≤ 3) — the type of query. - If t=1, then one integer d_i follows (1 ≤ d_i ≤ 10^5). This means that a new project with difficulty d_i is assigned. - If t=2, then two integers e_i and d_i follow (1 ≤ e_i ≤ n; 1 ≤ d_i ≤ 10^5). This means employee with id e_i works on a project with difficulty d_i. - If t=3, print the total difficulty of all ongoing projects. Output Print the answer for each query of the third type (t=3). Example Input 4 6 10 20 30 40 1 100 1 200 2 1 50 2 3 30 3 1 150 3 Output 220 370 Note - In the first `t=3` query, the total difficulty is 100 + (200 - 50) + (100 - 30) = 220, because employee with id 1 and effectiveness 10 works 5 units reducing the project by 50 units, and employee id 3 reduces the difficulty by 30 units. - In the last `t=3` query, the total difficulty is 100 + 150 + 120 = 370, because a new project with difficulty 150 is added.","solution":"def project_management(n, q, effectiveness, queries): Manages the projects according to the queries and returns the results for type-3 queries. Parameters: n (int): Number of employees. q (int): Number of days (queries). effectiveness (list of int): Effectiveness scores of each employee. queries (list of list of int): Queries describing the project and employee actions. Returns: list of int: Results for type-3 queries. ongoing_projects = [] ongoing_difficulties = [] for _ in range(q): ongoing_difficulties.append(0) results = [] for query in queries: if query[0] == 1: d_i = query[1] ongoing_projects.append(d_i) elif query[0] == 2: e_i = query[1] - 1 d_i = query[2] for i in range(len(ongoing_projects)): if ongoing_projects[i] >= d_i: ongoing_projects[i] -= effectiveness[e_i] elif query[0] == 3: total_difficulty = sum(ongoing_projects) results.append(total_difficulty) return results"},{"question":"Alice has a collection of sticks of different lengths. She wants to create a non-degenerate triangle using exactly three of these sticks. A triangle is non-degenerate if the sum of the lengths of any two sides is strictly greater than the length of the third side. Alice is curious about the number of different ways she can choose three sticks to form a non-degenerate triangle. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The next lines contain descriptions of test cases. The first line of each test case contains a single integer n (3 leq n leq 100) — the number of sticks. The second line of each test case contains n integers l_1, l_2, ldots, l_n (1 leq l_i leq 1000) — the lengths of the sticks. -----Output----- For each test case print a single integer — the number of different ways Alice can choose three sticks to form a non-degenerate triangle. -----Examples----- Input 3 3 3 4 5 4 6 8 10 12 5 1 1 1 1 1 Output 1 4 10 -----Note----- In the first test case, there is only one way to form a non-degenerate triangle using the lengths 3, 4, and 5. In the second test case, the four possible triangles are (6, 8, 10), (6, 8, 12), (6, 10, 12), and (8, 10, 12). In the third test case, any three of the five sticks of length 1 can be used to form a non-degenerate triangle. Thus, there are 10 possible ways.","solution":"from itertools import combinations def count_triangles(n, sticks): Returns the number of ways to choose three sticks to form a non-degenerate triangle. count = 0 # Check all combinations of 3 sticks for a, b, c in combinations(sticks, 3): # Check if they can form a triangle if a + b > c and a + c > b and b + c > a: count += 1 return count def solve(t, test_cases): Process multiple test cases for counting triangles. results = [] for i in range(t): n, sticks = test_cases[i] results.append(count_triangles(n, sticks)) return results"},{"question":"A popular online marketplace hosts a promotional event that includes a special auction. In this auction, there are N unique items available for bidding, each with a different starting bid price. Additionally, the total amount of money a participant can spend in the auction is limited to B dollars. You have a list of N items, where the i-th item has a starting bid price of P_i. Participants can place bids on the items, but a participant can only place a bid on an item if they can afford it within their remaining budget. Determine the maximum number of items a participant can bid on without exceeding their budget B. -----Input----- The first line contains two integers N and B (1 le N le 10^5, 1 le B le 10^9) — the number of items and the total budget. The second line contains N integers P_1, P_2, ldots, P_N (1 le P_i le 10^9) — the starting bid prices of the items. -----Output----- A line containing an integer representing the maximum number of items a participant can bid on without exceeding the budget B. -----Examples----- Input 5 50 20 30 10 40 25 Output 3 Input 4 100 90 80 70 60 Output 1 -----Note----- In the first example, the participant can bid on items with prices 10, 20, and 30, which in total cost 60. But since the budget is only 50, the best strategy is to bid on items with prices 10, 20, and 25, which in total cost 55, but this still exceeds the budget, so the correct answer is to choose 10, 20, and 30, summing up to 50. In the second example, the participant can only bid on the item with price 60 since any other combination exceeds the budget.","solution":"def max_items_within_budget(N, B, P): Returns the maximum number of items a participant can bid on without exceeding the budget B. N: int - the number of items B: int - the total budget P: list of int - the starting bid prices of the items P.sort() count = 0 total_cost = 0 for price in P: if total_cost + price <= B: total_cost += price count += 1 else: break return count"},{"question":"You are given two integer arrays `arr1` and `arr2` of length `n` and `m` respectively. Both arrays are sorted in non-decreasing order. Your task is to merge these two arrays into a single array sorted in non-decreasing order. Write a function `mergeArrays(arr1: List[int], arr2: List[int]) -> List[int]` that takes in two sorted arrays and returns a single sorted array that contains all elements from `arr1` and `arr2`. Example 1: Input: arr1 = [1, 3, 5], arr2 = [2, 4, 6] Output: [1, 2, 3, 4, 5, 6] Example 2: Input: arr1 = [0, 2, 4], arr2 = [1, 3, 5] Output: [0, 1, 2, 3, 4, 5] Example 3: Input: arr1 = [1, 1, 1], arr2 = [1, 2, 2] Output: [1, 1, 1, 1, 2, 2] Constraints: - 0 <= n, m <= 10^5 - -10^9 <= arr1[i], arr2[i] <= 10^9 - Both arr1 and arr2 are sorted in non-decreasing order. Note: - You should not use the sort function. - Try to achieve the solution with O(n + m) complexity.","solution":"from typing import List def mergeArrays(arr1: List[int], arr2: List[int]) -> List[int]: Merge two sorted arrays into a single sorted array. Args: arr1: List of integers sorted in non-decreasing order. arr2: List of integers sorted in non-decreasing order. Returns: List of integers sorted in non-decreasing order containing all elements from arr1 and arr2. merged_array = [] i, j = 0, 0 n, m = len(arr1), len(arr2) # Traverse both arrays while i < n and j < m: if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1 while i < n: merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2 while j < m: merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Implement a Warehouse Management System You are required to implement a simple warehouse management system. The system will manage the inventory of products in a warehouse, providing functionalities to handle receiving new products, processing orders, and generating a summary report of the inventory status. Each product in the warehouse has a unique product ID, a name, and a quantity in stock. When new products are received, their quantities are added to the existing stock. When orders are processed, their quantities are subtracted from the existing stock. If an order quantity exceeds the available stock, you should still process the order by setting the quantity in stock to zero and record the excess quantity as an unmet order. Input: The input contains multiple sections: 1. \'RECEIVE\': followed by several lines each containing a product ID, name, and quantity received. 2. \'ORDER\': followed by several lines each containing a product ID and quantity ordered. 3. \'REPORT\': to generate the current inventory status. The \'RECEIVE\' section indicates the products being received. The \'ORDER\' section indicates the orders placed for some products. The \'REPORT\' section will have a fixed format and doesn\'t need any additional data. Output: After processing all the input sections, the system should output the inventory status for all products that have either been received or ordered. For each product, output the product ID, name, quantity in stock, and unmet order quantity. Input format: ```plaintext RECEIVE ID1 Name1 Qty1 ID2 Name2 Qty2 ... ORDER ID1 Qty1 ID3 Qty3 ... REPORT ``` Output format: ```plaintext Product ID: ID1, Name: Name1, Stock: Qty1, Unmet Orders: Qty2 Product ID: ID2, Name: Name2, Stock: Qty3, Unmet Orders: Qty4 ... ``` Note: - The input and output are not case-sensitive. - If a product is ordered but never received, its initial stock is considered zero. Example: Input: ```plaintext RECEIVE P001 Widget 10 P002 Gadget 5 P003 Thingamajig 15 ORDER P001 12 P003 5 P004 7 REPORT ``` Output: ```plaintext Product ID: P001, Name: Widget, Stock: 0, Unmet Orders: 2 Product ID: P002, Name: Gadget, Stock: 5, Unmet Orders: 0 Product ID: P003, Name: Thingamajig, Stock: 10, Unmet Orders: 0 Product ID: P004, Name: , Stock: 0, Unmet Orders: 7 ```","solution":"class Warehouse: def __init__(self): self.inventory = {} self.unmet_orders = {} def receive_product(self, product_id, name, quantity): if product_id in self.inventory: self.inventory[product_id][\'quantity\'] += quantity else: self.inventory[product_id] = {\'name\': name, \'quantity\': quantity} def order_product(self, product_id, quantity): if product_id in self.inventory: available_quantity = self.inventory[product_id][\'quantity\'] if available_quantity >= quantity: self.inventory[product_id][\'quantity\'] -= quantity else: self.inventory[product_id][\'quantity\'] = 0 self.unmet_orders[product_id] = self.unmet_orders.get(product_id, 0) + (quantity - available_quantity) else: self.unmet_orders[product_id] = self.unmet_orders.get(product_id, 0) + quantity def generate_report(self): report = [] all_product_ids = set(self.inventory.keys()).union(set(self.unmet_orders.keys())) for product_id in sorted(all_product_ids): name = self.inventory.get(product_id, {}).get(\'name\', \'\') stock = self.inventory.get(product_id, {}).get(\'quantity\', 0) unmet = self.unmet_orders.get(product_id, 0) report.append(f\\"Product ID: {product_id}, Name: {name}, Stock: {stock}, Unmet Orders: {unmet}\\") return \'n\'.join(report) def process_input(self, input_str): lines = input_str.strip().split(\'n\') section = None for line in lines: if line == \'RECEIVE\': section = \'RECEIVE\' elif line == \'ORDER\': section = \'ORDER\' elif line == \'REPORT\': section = \'REPORT\' else: if section == \'RECEIVE\': parts = line.split() product_id = parts[0] name = parts[1] quantity = int(parts[2]) self.receive_product(product_id, name, quantity) elif section == \'ORDER\': parts = line.split() product_id = parts[0] quantity = int(parts[1]) self.order_product(product_id, quantity) if section == \'REPORT\': return self.generate_report()"},{"question":"Tom is working on a new sorting algorithm for his computer science project. He needs to test his algorithm using very specific constraints to ensure it works correctly. Your task is to write a program that reads a list of integers and determines the length of the longest subsequence that is sorted in strictly increasing order. Input The first line contains a single integer T, the number of test cases. Each of the following T lines contains an integer n (the length of the list), followed by n integers representing the list. Output For each test case, output the length of the longest strictly increasing subsequence in the list. Constraints 1 ≤ T ≤ 50 1 ≤ n ≤ 100 -10^9 ≤ list[i] ≤ 10^9 SAMPLE INPUT 2 6 10 22 9 33 21 50 5 3 10 2 1 20 SAMPLE OUTPUT 4 3 Explanation In the first test case, one of the longest strictly increasing subsequences is [10, 22, 33, 50], with length 4. In the second test case, one of the longest strictly increasing subsequences is [3, 10, 20], with length 3.","solution":"def longest_increasing_subsequence_length(arr): Returns the length of the longest strictly increasing subsequence in the list arr. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) def process_test_cases(test_cases): Processes multiple test cases and returns the result for each as a list. results = [] for case in test_cases: n, array = case results.append(longest_increasing_subsequence_length(array)) return results"},{"question":"Given a list of \'N\' unique integers, your task is to find all the triplets in the list that sum up to a target value \'T\'. Each triplet should be represented as a sorted tuple of three integers (a, b, c) such that a <= b <= c. The output should be a list of all such triplets sorted primarily by the first element, then by the second and finally by the third element of each tuple. Input: The first line contains an integer \'N\' representing the number of unique integers in the list. The second line contains \'N\' space-separated integers representing the list of unique integers. The third line contains the target integer \'T\'. Output: An integer m denoting the number of triplets followed by m lines, each line containing a valid triplet in the format \\"(a, b, c)\\". Constraints: 0 < N <= 1000 -10^5 <= list[i] <= 10^5 -10^5 <= T <= 10^5 Sample Input: 5 -1 0 1 2 -1 -4 0 Sample Output: 2 (-1, -1, 2) (-1, 0, 1) Explanation: From the input list, the valid triplets that sum up to 0 are (-1, -1, 2) and (-1, 0, 1). These triplets are sorted and printed in the requested format.","solution":"def find_triplets(nums, target): Finds all unique triplets in the list that sum up to the target value. Params: nums - list of unique integers target - target sum value Returns: A list of tuples, where each tuple contains three integers that sum up to the target value. nums.sort() # Sort the list to help with finding triplets and avoid duplicates triplets = [] n = len(nums) for i in range(n - 2): # Avoid duplicate values for the first element if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: triplets.append((nums[i], nums[left], nums[right])) # Avoid duplicate values for the second element while left < right and nums[left] == nums[left + 1]: left += 1 # Avoid duplicate values for the third element while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return triplets"},{"question":"Given an integer array nums of size n, return the maximum sum you can obtain by removing non-adjacent elements from the array. You may assume all elements are non-negative. Example 1: Input: nums = [3, 2, 5, 10, 7] Output: 15 Explanation: You can remove 3, 10 and 2 or 5 and 10 Example 2: Input: nums = [3, 2, 7, 10] Output: 13 Explanation: You can remove 3 and 10 or 7 (7+3 = 10) Example 3: Input: nums = [3, 2] Output: 3 Explanation: You can remove 3 or 2 Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxNonAdjacentSum(nums) which takes the integer array nums as input and returns the maximum sum you can obtain by removing non-adjacent elements. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 <= n <= 10^5 0 <= nums[i] <= 10^4","solution":"def maxNonAdjacentSum(nums): Returns the maximum sum that can be obtained by removing non-adjacent elements. if not nums: return 0 n = len(nums) if n == 1: return nums[0] prev1 = 0 prev2 = 0 for num in nums: current = max(prev1, prev2 + num) prev2 = prev1 prev1 = current return prev1"},{"question":"In a research lab, you are given n samples arranged in a line, each with a certain weight. You want to select a contiguous subarray of these samples such that the sum of the weights in this subarray is closest to a given target weight. If there are multiple subarrays with the same weight, select the one with the smallest starting index. If there is still a tie, select the one with the smallest ending index. -----Input----- The first line contains two integers n and target (1 leq n leq 10^5, 1 leq |target| leq 10^9) - the number of samples and the target weight. The second line contains n integers w_1, w_2, ldots, w_n (-10^4 leq w_i leq 10^4) - the weights of the samples arranged in a line. -----Output----- Output two integers denoting the starting and ending indices (1-based) of the contiguous subarray whose sum of weights is closest to the target weight. If there are multiple answers, choose the one with the smallest starting index. If there is still a tie, choose the one with the smallest ending index. -----Examples----- Input: 5 7 3 1 4 2 5 Output: 2 4 Input: 3 -3 -1 2 -5 Output: 2 3 -----Note----- In the first example, the subarray starting at index 2 and ending at index 4 has weights [1, 4, 2] and the sum is 7, which is exactly equal to the target. In the second example, the subarray starting at index 2 and ending at index 3 has weights [2, -5] and the sum is -3, which is exactly equal to the target.","solution":"import sys def closest_subarray(n, target, weights): closest_sum = sys.maxsize closest_start = -1 closest_end = -1 for start in range(n): current_sum = 0 for end in range(start, n): current_sum += weights[end] if abs(current_sum - target) < abs(closest_sum - target) or (abs(current_sum - target) == abs(closest_sum - target) and (start < closest_start or (start == closest_start and end < closest_end))): closest_sum = current_sum closest_start = start closest_end = end return closest_start + 1, closest_end + 1"},{"question":"In a magical land, there lies a maze with hidden treasures. Elara is an adventurer and needs your help to collect the maximum value of treasures. The maze is represented as a 2D grid of size n x m where each cell contains a certain amount of treasure. Elara can start at any cell in the first row and can move to the cell directly below it or directly diagonal to the left or right in the row below. Given the value of treasures in each cell, determine the maximum value of treasures Elara can collect when she reaches the last row of the grid. Write a function: ```python def collect_treasures(grid: List[List[int]]) -> int: ``` that takes a 2D list `grid` representing the treasure values of the maze and returns an integer representing the maximum value of treasures Elara can collect. # Input Format - The first line contains two integers, `n` and `m`, representing the number of rows and columns in the grid, respectively. - Each of the next `n` lines contains `m` space-separated integers, where each integer represents the treasure value at the corresponding cell in the grid. # Constraints - 1 leq n, m leq 500 - 1 leq text{grid}[i][j] leq 10^9 # Output - Print a single integer denoting the maximum value of treasures Elara can collect after reaching the last row. # Sample Input ``` 3 3 1 3 3 2 1 4 0 6 4 ``` # Sample Output ``` 12 ``` # Explanation ``` Elara can start at grid[0][1] (value 3) and follow the path down to grid[1][2] (value 4), and then to grid[2][1] (value 6). The total treasure value collected is 3 + 4 + 6 = 13. Another possible path that gives the same maximum value is starting at grid[0][2] (value 3) and following the path down to grid[1][2] (value 4), then to grid[2][1] (value 6). Both lead to a maximum of 13 treasure value.","solution":"from typing import List def collect_treasures(grid: List[List[int]]) -> int: n = len(grid) m = len(grid[0]) # Create a DP table to store the maximum treasures collected up to each cell dp = [[0] * m for _ in range(n)] # Initialize the first row of DP table with the treasures in the first row of grid for j in range(m): dp[0][j] = grid[0][j] # Fill the DP table row by row for i in range(1, n): for j in range(m): # Possible moves are from directly above or diagonally left or right from the above row dp[i][j] = grid[i][j] max_val = dp[i-1][j] # Directly above if j > 0: max_val = max(max_val, dp[i-1][j-1]) # Diagonally left if j < m-1: max_val = max(max_val, dp[i-1][j+1]) # Diagonally right dp[i][j] += max_val # The maximum treasure collected will be the maximum value in the last row of DP table return max(dp[n-1])"},{"question":"You are given a network of roads connecting several cities in a country. Each road has a travel cost associated with it, which is the same in both directions. Your task is to answer queries about the travel cost between different pairs of cities within the network. Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ n*(n-1)/2), representing the number of cities and the number of roads, respectively. - The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), indicating there\'s a road between cities u and v with the cost w. - The next line contains a single integer q (1 ≤ q ≤ 10^5), representing the number of queries. - Each of the next q lines contain two integers a and b (1 ≤ a, b ≤ n), representing a query about the minimum travel cost between city a and city b. Output: - For each query, output the minimum travel cost between city a and city b. If there is no path between the two cities, output -1. Example: Input: 6 9 1 2 4 1 3 2 2 3 5 2 4 10 3 4 3 3 5 8 4 5 5 4 6 6 5 6 1 3 1 6 2 5 3 4 Output: 9 13 3 Explanation: - The minimum travel cost from city 1 to city 6 is 1 -> 3 -> 4 -> 6, which costs 2 + 3 + 6 = 11. - The minimum travel cost from city 2 to city 5 is 2 -> 3 -> 5, which costs 5 + 8 = 13. - The minimum travel cost from city 3 to city 4 is directly 3 -> 4, which costs 3. In this problem, you need to efficiently handle multiple queries regarding the shortest path between pairs of cities on a dynamic graph of roads, while taking into account that some pairs might not be directly connected.","solution":"import heapq def shortest_path_dijkstra(n, m, roads, queries): Calculate the shortest path between cities using Dijkstra\'s algorithm, given multiple queries. Args: - n: Number of cities - m: Number of roads - roads: List of roads, each represented as a tuple (u, v, w) where u and v are cities, and w is the travel cost - queries: List of queries, each represented as a tuple (a, b) asking for the shortest path cost from city a to city b Returns: - List of results for each query, where each result is the minimum travel cost or -1 if no path exists. # Create adjacency list representation of the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start): # Initialize distances with infinity and start node distance with 0 distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_dist, current_city = heapq.heappop(priority_queue) # If the distance is already greater than the recorded distance, we skip if current_dist > distances[current_city]: continue # Explore neighbors for neighbor, weight in graph[current_city]: distance = current_dist + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances # Precompute shortest paths from each city to every other city all_pairs_shortest_paths = {} for city in range(1, n + 1): all_pairs_shortest_paths[city] = dijkstra(city) # Answer all queries result = [] for a, b in queries: if all_pairs_shortest_paths[a][b] == float(\'inf\'): result.append(-1) else: result.append(all_pairs_shortest_paths[a][b]) return result # Example Usage n = 6 m = 9 roads = [ (1, 2, 4), (1, 3, 2), (2, 3, 5), (2, 4, 10), (3, 4, 3), (3, 5, 8), (4, 5, 5), (4, 6, 6), (5, 6, 1) ] queries = [(1, 6), (2, 5), (3, 4)] print(shortest_path_dijkstra(n, m, roads, queries))"},{"question":"You are given an array of integers `arr` which represents the height of a ladder at each step. Each element `arr[i]` represents the height of the ladder at the `i-th` step. Your task is to find a subarray (contiguous segment of the array) where the height sum is maximum. If there are multiple subarrays with the same maximum sum, return the shortest one. If there are still multiple subarrays, return the leftmost one. Input The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of steps in the ladder. The second line contains n integers arr_1, arr_2, ..., arr_n (-10^6 ≤ arr_i ≤ 10^6) — the height of the ladder at each step. Output Print two integers, representing the starting and ending indices (1-based) of the subarray with the maximum height sum. If there are multiple subarrays with the same maximum sum, the shortest one should be returned. If there are still multiple subarrays, print the leftmost one. Example Input 6 -2 1 -3 4 -1 2 1 -5 4 Output 4 7 Note In the example, the subarray [4, -1, 2, 1] has the maximum sum of 6. There is no other subarray with a sum of 6 that is shorter. Explanation: Among the subarrays [4, -1, 2, 1], [-1, 2, 1] has the highest sum which is 6. The shortest subarray with this sum is [4, -1, 2, 1] which starts at index 4 and ends at index 7. If there were multiple shortest subarrays with the same sum, the leftmost one would be chosen.","solution":"def find_maximum_height_sum_subarray(arr): This function finds the subarray with the maximum height sum. If there are multiple subarrays with the same maximum sum, it returns the shortest one. If there are still multiple shortest subarrays, it returns the leftmost one. :param arr: List[int] :return: Tuple[int, int] n = len(arr) # Initialize variables to store the result max_sum = float(\'-inf\') max_start_index = 0 max_end_index = 0 max_length = float(\'inf\') # Variable to store the current subarray sum and start index current_sum = 0 current_start_index = 0 for current_end_index in range(n): current_sum += arr[current_end_index] # Check if the current subarray has a new maximum sum if current_sum > max_sum or (current_sum == max_sum and (current_end_index - current_start_index < max_length)): max_sum = current_sum max_start_index = current_start_index max_end_index = current_end_index max_length = current_end_index - current_start_index # If the current subarray sum becomes negative, reset the subarray if current_sum < 0: current_sum = 0 current_start_index = current_end_index + 1 # Convert to 1-based index for the result return max_start_index + 1, max_end_index + 1"},{"question":"Usha, the gardener, is responsible for watering a line of plants arranged in a straight line. Each plant needs a specific amount of water to stay healthy. You are given an array of integers where each integer represents the amount of water required by a respective plant. Usha can water exactly one continuous segment of plants in one go, but she has limited water capacity W. Your task is to determine the maximum number of liters of water Usha can use without exceeding her capacity in one watering session. ------ Input Format ------ The first line contains a single integer T, the number of test cases. T lines follow. Each following line contains: - The first integer, N, the number of plants. - The second integer, W, the maximum water capacity. - The third line contains N integers separated by spaces, representing the water required by each plant. ------ Output Format ------ The output must consist of T lines. - The i^{th} line must contain a single integer, the maximum amount of water (in liters) Usha can use in one session without exceeding her capacity for the i^{th} test case. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ W ≤ 1000 1 ≤ water_required[i] ≤ 100 ------ Sample Input 1 ------ 3 5 100 10 20 30 40 50 4 50 15 25 35 20 6 200 10 20 30 40 50 60 ------ Sample Output 1 ------ 100 50 200 ------ Explanation 1 ------ Test case 1: The longest continuous segment without exceeding the capacity is 10 + 20 + 30 + 40 = 100. Test case 2: The longest continuous segment without exceeding the capacity is 25 + 15 = 40. Test case 3: The longest continuous segment without exceeding the capacity is the entire array: 10 + 20 + 30 + 40 + 50 + 60 = 210, but since the maximum capacity is 200, we take 200.","solution":"def max_water_usage(n, w, water_required): max_water = 0 for start in range(n): current_sum = 0 for end in range(start, n): current_sum += water_required[end] if current_sum > w: break max_water = max(max_water, current_sum) return max_water def process_input(test_cases): results = [] for n, w, water_required in test_cases: results.append(max_water_usage(n, w, water_required)) return results"},{"question":"You\'ve been given a list of grades for students in a hypothetical class. However, you\'re asked to maintain the confidentiality of each student by replacing their actual grade with their corresponding grade rank. Create the function `grade_rank()` that returns a list where each grade is replaced by its rank among all the grades. The highest grade should have a rank of 1, the second highest grade should have a rank of 2, and so on. If two grades are the same, they should have the same rank, and the next rank should be appropriately shifted. Example: ```python grades = [80, 90, 70, 80, 100] grade_rank(grades) == [3, 2, 5, 3, 1] ``` Example explanation: - The highest grade is 100, which gets the rank of 1. - The second highest grade is 90, which gets the rank of 2. - The third highest grade is 80, which has two occurrences. Both get the rank of 3. - The lowest grade is 70, which gets the rank of 5.","solution":"def grade_rank(grades): Returns a list where each grade is replaced by its rank among all the grades. The highest grade should have a rank of 1, and so on. If two grades are the same, they should have the same rank. # sort the grades in descending order and keep track of their ranks sorted_grades = sorted(grades, reverse=True) rank_dict = {} rank = 1 for i, grade in enumerate(sorted_grades): if grade not in rank_dict: rank_dict[grade] = rank rank += 1 return [rank_dict[grade] for grade in grades]"},{"question":"A kingdom has n cities connected by n-1 bidirectional roads such that there is a unique path between any pair of cities. The king wants to secure the kingdom by placing guards in the cities. Each city can have at most one guard. A city is considered secure if either the city itself has a guard or at least one adjacent city has a guard. Your task is to find the minimum number of guards required to secure all the cities in the kingdom. ----Input---- The first line contains an integer n (2 le n le 1000) — the number of cities. Each of the next n-1 lines contains two integers u and v (1 le u, v le n) representing a road between the cities u and v. ----Output---- Print a single integer — the minimum number of guards required to secure all the cities. ----Examples---- Input 4 1 2 1 3 1 4 Output 1 Input 3 1 2 2 3 Output 1 Input 6 1 2 1 3 2 4 2 5 3 6 Output 2 ----Note---- In the first example, placing one guard in city 1 secures all the cities as it is connected to cities 2, 3, and 4. In the second example, placing one guard in city 2 secures all the cities as it is connected to both 1 and 3. In the third example, placing guards in cities 2 and 3 secures all the cities. City 2 secures cities 1, 4, and 5, while city 3 secures city 6.","solution":"def min_guards_needed(n, roads): from collections import defaultdict # If there are only 2 cities, place a guard in one of them if n == 2: return 1 # Create the graph representation of the cities graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Function to perform DFS and count guards needed def dfs(node, parent): has_guard = False for neighbor in graph[node]: if neighbor == parent: continue if not dfs(neighbor, node): has_guard = True if has_guard: guards_needed.add(node) return True return False guards_needed = set() for neighbor in graph[1]: if not dfs(neighbor, 1): guards_needed.add(1) break return len(guards_needed)"},{"question":"A company is planning a day trip for its employees. There are `n` potential destinations, each with a different entertainment value. You, as the event coordinator, need to select exactly `k` consecutive destinations such that the sum of their entertainment values is maximized. Input The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ n) — the number of destinations and the number of consecutive destinations to select, respectively. The second line contains `n` integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^4) — the entertainment values of the destinations. Output Print a single integer — the maximum sum of the entertainment values of any `k` consecutive destinations. Examples Input 6 3 1 2 5 1 3 2 Output 9 Input 5 2 4 2 3 5 1 Output 8 Explanation In the first example, selecting the destinations with entertainment values 2, 5, and 1 gives the highest sum which is 9. In the second example, selecting the destinations with entertainment values 3 and 5 gives the highest sum which is 8.","solution":"def max_entertainment_sum(n, k, values): Returns the maximum sum of entertainment values of any k consecutive destinations. # Calculate the sum of the first \'k\' destinations current_sum = sum(values[:k]) max_sum = current_sum # Use the sliding window technique to find the maximum sum for i in range(k, n): current_sum += values[i] - values[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a list of filenames with their respective file sizes. Your task is to write a function that categorizes these files into two groups: \\"small\\" and \\"large\\". A file is considered \\"small\\" if its size is less than or equal to 1000 bytes and \\"large\\" if its size is greater than 1000 bytes. The function should take the list of filenames and their sizes as input and output two lists: the first list containing the filenames of all \\"small\\" files and the second list containing the filenames of all \\"large\\" files. Input: A list of tuples, where each tuple consists of a string representing the filename and an integer representing the file size in bytes. Output: Two lists: one containing the filenames of \\"small\\" files and the other containing the filenames of \\"large\\" files. SAMPLE INPUT [(\'file1.txt\', 500), (\'file2.txt\', 1500), (\'file3.txt\', 1000)] SAMPLE OUTPUT ([\'file1.txt\', \'file3.txt\'], [\'file2.txt\']) Explanation \'file1.txt\' and \'file3.txt\' are categorized as \\"small\\" because their sizes are less than or equal to 1000 bytes, while \'file2.txt\' is categorized as \\"large\\" because its size is greater than 1000 bytes.","solution":"def categorize_files(file_list): Categorizes files into \'small\' and \'large\' based on their sizes. Args: file_list (list of tuples): List of tuples where each tuple contains a filename (string) and its size (int) in bytes. Returns: tuple: Two lists, one with filenames of \'small\' files (size <= 1000 bytes) and one with filenames of \'large\' files (size > 1000 bytes). small_files = [] large_files = [] for filename, size in file_list: if size <= 1000: small_files.append(filename) else: large_files.append(filename) return small_files, large_files"},{"question":"You are an event organizer for a company with various departments ranging from 1 to N. Each department needs to send a team to participate in a coding challenge. Due to logistical reasons, you must ensure that any given day, teams from exactly M departments can participate, and no department can participate more than once. Given that every department’s team needs to participate exactly once, your task is to schedule the teams in such a way that it meets the given criteria. Constraints * N is an integer between 1 and 1000 (inclusive). * M is an integer such that 1 leq M leq min(N, 50). Input Input is given from Standard Input in the following format: N M Output Print the schedule such that each line contains M space-separated integers representing the departments whose teams are participating on that day. If there are multiple solutions, any of them will be accepted. Example Input 7 3 Output 1 2 3 4 5 6 7","solution":"def schedule_teams(N, M): days = (N + M - 1) // M # Calculate the number of days required schedule = [] team = 1 for _ in range(days): day_schedule = [] for _ in range(M): if team <= N: day_schedule.append(team) team += 1 schedule.append(day_schedule) return schedule"},{"question":"Given a string S consisting of alphanumeric characters and symbols, return the count of all the numbers present in the string. Numbers are contiguous sequences of digits. Example 1: Input: S = \\"abc123def45gh6\\" Output: 3 Explanation: The numbers present are \\"123\\", \\"45\\", and \\"6\\", which count up to 3. Example 2: Input: S = \\"1a23b45c\\" Output: 3 Explanation: The numbers present are \\"1\\", \\"23\\", and \\"45\\", which count up to 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countNumbers() which takes the string S as input and returns the number of numbers present in the string. Expected Time Complexity: O(|S|). Expected Auxiliary Space: O(1). Constraints: 1 <= |S| <= 10^5","solution":"def countNumbers(S): Return the count of all the numbers present in the string S. Numbers are contiguous sequences of digits. count = 0 in_number = False for char in S: if char.isdigit(): if not in_number: count += 1 in_number = True else: in_number = False return count"},{"question":"You are given a string s which consists of lowercase English letters and contains no spaces. Implement a function that counts the number of vowels (a, e, i, o, u) in the string and returns them in a dictionary where the key is the vowel and the value is the count of that vowel in the string. Your inputs: - A string s. Your expected output is a dictionary with vowels as keys and their respective counts as values. Only include vowels that appear in the string. If no vowels are present, return an empty dictionary. Your task is to write an algorithm that accomplishes this.","solution":"def count_vowels(s): Takes a string s and returns a dictionary with counts of each vowel in the string. vowels = \'aeiou\' vowel_count = {v: 0 for v in vowels} for char in s: if char in vowel_count: vowel_count[char] += 1 # Remove vowels with zero count return {k: v for k, v in vowel_count.items() if v > 0}"},{"question":"Given an integer array \'arr\' and a target sum \'S\', find all unique quadruplets (four elements) in the array which add up to the target sum \'S\'. Return the quadruplets in an array of arrays, where the quadruplets are sorted in non-descending order and the solution set does not contain duplicate quadruplets. -----Input----- - The first line contains a single integer N denoting the number of elements in the array (4 ≤ N ≤ 200). - The second line contains N space-separated integers representing the elements of the array \'arr\' (-10^6 ≤ arr[i] ≤ 10^6). - The third line contains a single integer S denoting the target sum. -----Output----- - Print an array of arrays containing all unique quadruplets that sum up to the target sum. If no such quadruplets exist, output an empty array. -----Examples----- **Input:** 6 1 0 -1 0 -2 2 0 **Output:** [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] **Input:** 5 5 5 5 5 5 20 **Output:** [[5, 5, 5, 5]] Explanation: In the first example, the array has the following sets of unique quadruplets that sum to the target 0: [-2, -1, 1, 2], [-2, 0, 0, 2], and [-1, 0, 0, 1].","solution":"def four_sum(arr, target): arr.sort() quadruplets = [] n = len(arr) for i in range(n-3): if i > 0 and arr[i] == arr[i-1]: continue for j in range(i+1, n-2): if j > i+1 and arr[j] == arr[j-1]: continue left, right = j + 1, n - 1 while left < right: total = arr[i] + arr[j] + arr[left] + arr[right] if total == target: quadruplets.append([arr[i], arr[j], arr[left], arr[right]]) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return quadruplets"},{"question":"You are given an array of n integers. Your task is to find the first missing positive integer in the array. Input The first line contains a single positive integer n (1 ≤ n ≤ 105), denoting the number of integers in the array. The following line contains n space-separated integers ai (1 ≤ |ai| ≤ 1012), representing the elements of the array. Output Print a single integer: the first missing positive integer. Examples Input 5 1 2 0 7 5 Output 3 Input 3 3 4 -1 Output 1 Note In the first example, all positive integers from 1 to 7 are present except 3, which is the first missing positive integer. In the second example, the smallest positive integer that is missing from the array is 1.","solution":"def first_missing_positive(nums): Find the first missing positive integer in the array. nums = [num for num in nums if num > 0] # filter out non-positive numbers nums_set = set(nums) missing = 1 while missing in nums_set: missing += 1 return missing"},{"question":"You are given a sequence of N integers where each integer represents the number of steps taken by a person in a 1-dimensional grid, starting from position 0. Each step can be either +1 (right) or -1 (left). The goal is to find the final position of the person after all steps have been taken. -----Constraints----- - 1 le N le 10^5 - Each element in the sequence is either 1 or -1 -----Input----- Input is given from Standard Input in the following format: N s_1 s_2 ... s_N -----Output----- Print the final position of the person after all steps. -----Sample Input----- 5 1 -1 1 1 -1 -----Sample Output----- 1 Explanation: The person starts at position 0. - After the first step (+1), the position is 1. - After the second step (-1), the position is 0. - After the third step (+1), the position is 1. - After the fourth step (+1), the position is 2. - After the fifth step (-1), the position is 1. Therefore, the final position is 1.","solution":"def final_position(steps): Returns the final position of a person after taking the given steps in a 1-dimensional grid. Parameters: steps (list): A list of integers where each element is either 1 (right step) or -1 (left step). Returns: int: The final position on the grid. return sum(steps)"},{"question":"You are given a string s consisting of lowercase alphabets and an integer k. Determine if the string s can be made k-periodic by rearranging its characters. A string is called k-periodic if it can be written as n concatenations of a substring of length k, where n is a positive integer. Constraints: * 1 leq |s| leq 1000 * 1 leq k leq |s| Input Input is given from Standard Input in the following format: ``` s k ``` Output Print \\"YES\\" if the string s can be transformed into a k-periodic string, otherwise print \\"NO\\". Example Input ``` aabb 2 ``` Output ``` YES ``` Input ``` abcabc 3 ``` Output ``` YES ``` Input ``` aab 2 ``` Output ``` NO ```","solution":"def can_be_k_periodic(s, k): Determine if the string s can be made k-periodic by rearranging its characters. Parameters: s (str): The input string. k (int): The period length. Returns: str: \\"YES\\" if string can be made k-periodic, otherwise \\"NO\\". from collections import Counter n = len(s) if n % k != 0: return \\"NO\\" segment_count = n // k char_count = Counter(s) for count in char_count.values(): if count % segment_count != 0: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of integers, each representing the number of votes a candidate received in an election. Your task is to determine the percentage of votes each candidate received and then find the candidate(s) with the highest percentage of votes. If there is a tie, return the indices of all candidates with the highest percentage in ascending order. Write a function `find_top_candidates(votes: List[int]) -> List[int]` to accomplish this task. # Input - The function takes in a single parameter: - `votes`: A list of integers where each integer represents the number of votes received by a candidate. The length of the list is between 1 and 100, inclusive, and each integer is between 0 and 1,000, inclusive. # Output - The function should return a list of integers, each representing the index of a candidate (0-based) with the highest percentage of votes. If multiple candidates have the same highest percentage, the function should return their indices in ascending order. # Examples ```python find_top_candidates([10, 20, 30]) # Output: [2] find_top_candidates([10, 10, 20, 20]) # Output: [2, 3] find_top_candidates([0, 0, 0, 0]) # Output: [0, 1, 2, 3] ``` # Explanation - In the first example, the candidate at index 2 has the highest percentage of the total votes. - In the second example, candidates at indices 2 and 3 are tied with the highest percentage of the total votes. - In the third example, all candidates have 0 votes, meaning they all have the same percentage (0%), so all indices are returned.","solution":"from typing import List def find_top_candidates(votes: List[int]) -> List[int]: total_votes = sum(votes) if total_votes == 0: return list(range(len(votes))) percentages = [(i, vote / total_votes) for i, vote in enumerate(votes)] max_percentage = max(percentages, key=lambda x: x[1])[1] return [i for i, percentage in percentages if percentage == max_percentage]"},{"question":"Lisa likes solving math problems. She recently learned about prime numbers and now she is fascinated by them. One day, Lisa thought of a new problem: Given an integer N, find the smallest prime divisor of N. If N is a prime number itself, the smallest prime divisor of N is N. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each of the following T lines contains a single integer N. ------ Output Format ------ For each test case, output on a new line the smallest prime divisor of N. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^6 ----- Sample Input 1 ------ 3 15 2 77 ----- Sample Output 1 ------ 3 2 7 ----- Explanation 1 ------ Test case 1: The prime divisors of 15 are 3 and 5. The smallest prime divisor is 3. Test case 2: The smallest prime divisor of 2 is 2 itself, since it is a prime number. Test case 3: The prime divisors of 77 are 7 and 11. The smallest prime divisor is 7.","solution":"def smallest_prime_divisor(n): Returns the smallest prime divisor of n. If n is a prime number itself, the smallest prime divisor of n is n. if n <= 1: return None if n % 2 == 0: return 2 i = 3 while i * i <= n: if n % i == 0: return i i += 2 return n def process_test_cases(t, cases): results = [] for n in cases: results.append(smallest_prime_divisor(n)) return results"},{"question":"**Mountain Peak Identification** You are tasked with identifying the peak cells in a grid representing a mountainous region. A peak cell is defined as a cell whose height is greater than or equal to the height of all of its adjacent cells. Adjacent cells can be in eight possible directions: up, down, left, right, and all four diagonals. You will be given multiple datasets, each containing a grid of integers representing the elevation levels of a mountainous region. Your task is to identify all peak cells for each dataset. For each dataset, you should count the number of peak cells and print this number. Input The input consists of multiple datasets. Each dataset starts with two integers: `n` `m` representing the number of rows (`n`) and columns (`m`) of the grid. These integers are between 2 and 100, inclusive. The next `n` lines each contain `m` integers between 0 and 1000 inclusive, representing the elevation levels of the cells in the grid. The input ends with a line containing two zeros separated by a space. Output For each dataset, output a single line containing the number of peak cells in the grid described by the dataset. Sample Input 3 3 1 2 1 2 3 2 1 2 1 4 4 5 3 4 7 3 8 6 5 4 6 5 3 7 4 3 2 2 2 1 2 3 4 0 0 Sample Output 1 3 1 Example Input 3 3 1 2 1 2 3 2 1 2 1 4 4 5 3 4 7 3 8 6 5 4 6 5 3 7 4 3 2 2 2 1 2 3 4 0 0 Output 1 3 1 Explanation In the first dataset, the grid is: 1 2 1 2 3 2 1 2 1 The cell at (1, 1) with elevation 3 is the only peak. In the second dataset, the grid is: 5 3 4 7 3 8 6 5 4 6 5 3 7 4 3 2 The cells at (1, 3), (3, 0), and (3, 1) are peaks. In the third dataset, 1 2 3 4 The cell at (1, 1) with elevation 4 is the only peak.","solution":"def find_peak_cells(grids): Returns a list containing the count of peak cells for each grid dataset. def is_peak(grid, i, j, n, m): Helper function to check if a cell (i, j) in grid is a peak cell. directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] > grid[i][j]: return False return True results = [] for grid, (n, m) in grids: peak_count = 0 for i in range(n): for j in range(m): if is_peak(grid, i, j, n, m): peak_count += 1 results.append(peak_count) return results def parse_input(input_data): Parses the input data into structured format for processing. grids = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): n, m = map(int, lines[i].strip().split()) if n == 0 and m == 0: break grid = [] for j in range(n): grid.append(list(map(int, lines[i + 1 + j].strip().split()))) grids.append((grid, (n, m))) i += n + 1 return grids def main(input_data): Main function to handle input and output. grids = parse_input(input_data) peak_counts = find_peak_cells(grids) for count in peak_counts: print(count) # Sample usage with input from the prompt input_data = 3 3 1 2 1 2 3 2 1 2 1 4 4 5 3 4 7 3 8 6 5 4 6 5 3 7 4 3 2 2 2 1 2 3 4 0 0 main(input_data)"},{"question":"In this Kata, you are given a string containing a mathematical expression with addition and multiplication operations. Your task is to evaluate the expression and return the result as an integer. The string will only contain non-negative integers and the operators `+` and `*`. Note that multiplication has higher precedence than addition. ``` For example: evaluate_expression(\'2+3*4\') = 14 because 2+(3*4) = 2+12 = 14 evaluate_expression(\'3*3+5\') = 14 because (3*3)+5 = 9+5 = 14 evaluate_expression(\'6+2*3*2\') = 18 because 6+(2*3*2) = 6+12 = 18 evaluate_expression(\'5*10+50\') = 100 because (5*10)+50 = 50+50 = 100 ``` You are to implement a function that parses the string and correctly calculates and returns the result. Be sure to handle multiple operations in the string respecting the precedence rules of arithmetic. Write a function that takes a single argument, which is the string containing the mathematical expression, and returns an integer.","solution":"def evaluate_expression(expression): Evaluates a given mathematical expression string which contains only non-negative integers, \'+\' (addition) and \'*\' (multiplication). Multiplication has higher precedence than addition. Args: expression (str): The mathematical expression to evaluate. Returns: int: The result of the evaluated expression. def apply_operation(operators, values): Apply the last operator to the last two values and push the result back to values. right = values.pop() left = values.pop() operator = operators.pop() if operator == \'+\': values.append(left + right) elif operator == \'*\': values.append(left * right) import re tokens = re.findall(r\'d+|[+*]\', expression) values = [] operators = [] precedence = {\'+\': 1, \'*\': 2} for token in tokens: if token.isdigit(): values.append(int(token)) else: while (operators and precedence[operators[-1]] >= precedence[token]): apply_operation(operators, values) operators.append(token) # Apply any remaining operations in the stack while operators: apply_operation(operators, values) return values[0]"},{"question":"You are given a string of lowercase alphabets. Let\'s call the string good if for every pair of consecutive characters, the ASCII value of the first character is less than or equal to the ASCII value of the second character. Your task is to find a good string that can be obtained by reordering the characters of the given string with the minimum number of swaps. Input The first line contains a single positive integer t (1 ≤ t ≤ 1000) – the number of test cases. Each of the following t lines contains a single string s (1 ≤ |s| ≤ 100000) consisting of lowercase English letters. Output For each test case, output a single string, which is the good string that can be obtained with the minimum number of swaps. If there are multiple solutions, output the lexicographically smallest one. Examples Input 3 cba abc bca Output abc abc abc Note In the first sample, you can achieve the good string \\"abc\\" by reordering the characters in the original string \\"cba\\". In fact, any reordering of \\"cba\\" to form \\"abc\\" requires 2 swaps. \\"abc\\" is lexicographically smallest good string obtainable from \\"cba\\". For the second sample, the string \\"abc\\" is already good and requires no swaps. For the third sample, \\"abc\\" is the smallest good string obtained by reordering \\"bca\\".","solution":"def minimal_good_string(s): Returns the lexicographically smallest \'good\' string that can be obtained by reordering the characters of s. return \'\'.join(sorted(s)) def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(minimal_good_string(s)) return results"},{"question":"In the country of Grendavia, the weather is unpredictable, and the citizens have developed a unique system for tracking beach-going days. They use a calendar that marks every day with whether it is sunny or not. A group of friends wishes to plan a beach outing, but they can only go to the beach on a streak of consecutive sunny days. Given a list of days marked as sunny (1) or not sunny (0), find the maximum length of consecutive sunny days for any beach outing. Constraints: * 1 leq M leq 10^6 (M is the number of days) * The list of days contains only 1s and 0s. Input Input is given from Standard Input in the following format: M d_1 d_2 d_3 ... d_M Output Print the length of the longest streak of consecutive sunny days. Examples Input 10 1 1 0 1 1 1 0 1 1 1 1 Output 4 Input 5 0 0 0 0 0 Output 0 Input 7 1 1 1 1 1 1 1 Output 7","solution":"def longest_sunny_streak(days): Returns the length of the longest streak of consecutive sunny days. :param days: List of integers where 1 represents a sunny day and 0 represents a non-sunny day. :return: The length of the longest streak of consecutive sunny days. max_streak = 0 current_streak = 0 for day in days: if day == 1: current_streak += 1 if current_streak > max_streak: max_streak = current_streak else: current_streak = 0 return max_streak"},{"question":"Petya has a fascination with matrices in his data structures class. Recently, he came across a special kind of matrix called a \\"magic square.\\" A magic square is a n x n matrix of distinct positive integers from 1 to n^2, where the sum of numbers in each row, column, and both main diagonals are the same. Petya decides to write a program to check if a given n x n matrix is a magic square or not. Input - The first line contains a positive integer n (1 ≤ n ≤ 50), the size of the matrix. - The next n lines each contain n positive integers representing the elements of the matrix. Each of these integers lies between 1 and n^2. Output If the given matrix is a magic square, print \\"YES\\". Otherwise, print \\"NO\\". Constraints - The matrix will have all unique elements from 1 to n^2. Examples Input 3 2 7 6 9 5 1 4 3 8 Output YES Input 2 1 2 3 4 Output NO Note: In the first example, the matrix is a 3x3 magic square because all rows, columns, and diagonals sum to 15. In the second example, the matrix is a 2x2 matrix but is not a magic square since the sums of rows, columns, and diagonals are not equal.","solution":"def is_magic_square(matrix): n = len(matrix) # Calculate the magic constant magic_constant = n * (n * n + 1) // 2 # Check all rows for row in matrix: if sum(row) != magic_constant: return \\"NO\\" # Check all columns for col in range(n): if sum(matrix[row][col] for row in range(n)) != magic_constant: return \\"NO\\" # Check the main diagonal if sum(matrix[i][i] for i in range(n)) != magic_constant: return \\"NO\\" # Check the secondary diagonal if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_constant: return \\"NO\\" return \\"YES\\" # Example usage # n = 3 # matrix = [ # [2, 7, 6], # [9, 5, 1], # [4, 3, 8] # ] # print(is_magic_square(matrix)) # Output should be \'YES\' # n = 2 # matrix = [ # [1, 2], # [3, 4] # ] # print(is_magic_square(matrix)) # Output should be \'NO\'"},{"question":"In a distant land called Sphera, each of the n cities is connected exclusively by bi-directional roads. The land is plagued with evil sorcerers residing in some of these cities. These sorcerers are trying to cast a spell to take control over the land. The citizens of Sphera have come up with a plan to prevent this. They aim to build a powerful shield that can contain the sorcerers within a few cities, rendering their spells ineffective. To construct this shield, they need to select a set of cities such that no two cities in the set are directly connected by a road. The strength of the shield is determined by the number of cities in this set. Your task is to determine the maximum possible strength of the shield, which equates to the largest number of cities that can be selected given the constraint. Input: - The first line of the input contains two integers n and m (1 ≤ n ≤ 5000, 0 ≤ m ≤ 20000) — the number of cities and the number of roads, respectively. - The next m lines contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing a road connecting city u and city v. Output: - Print a single integer, the maximum strength of the shield. Examples: Input: 5 5 1 2 2 3 3 4 4 5 5 1 Output: 2 Input: 4 4 1 2 2 3 3 4 4 1 Output: 2","solution":"def max_shield_strength(n, m, roads): import networkx as nx # Create a graph G = nx.Graph() # Add nodes G.add_nodes_from(range(1, n + 1)) # Add edges (roads) G.add_edges_from(roads) # Finding the maximum number of cities using independent set max_independent_set = nx.algorithms.approximation.maximum_independent_set(G) return len(max_independent_set) # Example usage if __name__ == \\"__main__\\": n = 5 m = 5 roads = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 1)] print(max_shield_strength(n, m, roads)) # Output: 2"},{"question":"Given a network of traffic signals at various intersections in a city, each signal has a coordinate (xi, yi) on a 2D plane. Each signal can either be green or red based on its current state and switches states every t seconds (from green to red or from red to green). The initial states of each signal (at time t = 0) are given. Your task is to determine the number of signals that are green at a specific time instant t = T, for a given positive integer T. Input The first line contains an integer n (1 ≤ n ≤ 10^4) — the number of traffic signals. The next n lines contain four integer values each: xi, yi, si, and t (1 ≤ xi, yi ≤ 10^5; si is 0 or 1; 0 < t ≤ 10^9). (xi, yi) represents the coordinates of the i-th traffic signal, si represents the initial state of the signal (0 for green and 1 for red), and t (1 ≤ t ≤ 10^5) represents the time after which the signal changes its state. The last line contains a single integer T (1 ≤ T ≤ 10^9) — the specific time instant. Output Output a single integer — the number of signals that are green at time T. SAMPLE INPUT 5 0 0 0 10 1 1 1 5 2 2 0 6 3 3 1 3 4 4 0 8 15 SAMPLE OUTPUT 3","solution":"def count_green_signals_at_time(signals, T): green_count = 0 for signal in signals: xi, yi, si, t = signal # Calculate the number of state changes that have occurred by time T state_changes = (T // t) # Determine if the signal is green at time T if (si == 0 and state_changes % 2 == 0) or (si == 1 and state_changes % 2 == 1): green_count += 1 return green_count # Input is assumed to be provided as follows: # n: number of traffic signals # signals: list of signals, where each signal is represented as a tuple (xi, yi, si, t) # T: the specific time instant def parse_input_and_count_green_signals(n, signals, T): return count_green_signals_at_time(signals, T)"},{"question":"Given a list of integers where each integer represents a piece of string. Determine the length of the longest string a cat can build, where a cat can build a string piece by piece only if the next string piece is strictly longer than the previous one. Example 1: Input: 6 1 3 5 4 7 Output: 4 Explanation: The longest strings that can be built are [1, 3, 5, 7]. Example 2: Input: 6 2 2 2 2 2 2 Output: 1 Explanation: Regardless of the order, the longest string a cat can build is simply one single piece, as all pieces are of equal length. Your Task: You need to complete the function `longestString` that takes an array of integers and n as parameters and returns the length of the longest string that the cat can build. Expected Time Complexity: O(n). Expected Auxiliary Space: O(n). Constraints: 1 <= n <= 10^4 1 <= a[i] <= 10^5","solution":"def longestString(arr, n): Function to determine the length of the longest string a cat can build. Parameters: arr (list): List of integers representing the lengths of string pieces. n (int): The number of string pieces in the list. Returns: int: The length of the longest string that can be built. if n == 0: return 0 # Initialize the list to store lengths of longest increasing subsequence at each index lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # The maximum value in lis will be the answer return max(lis)"},{"question":"In a large garden, there are several types of flowering plants arranged in rows and columns. Each site in the garden grid can either be empty or contain a flowering plant of a specific type. Your task is to identify the largest contiguous sub-grid (a square sub-grid) within the garden that contains only one type of flowering plant. -----Input----- The first line of input consists of two space-separated integers 1 le R le 1000 and 1 le C le 1000, which represent the number of rows and columns in the garden grid respectively. Then follow R lines, each containing C space-separated integers. Each integer represents the type of the flowering plant at that specific site, where 1 le plant_type le 100. A zero value indicates that the site is empty. -----Output----- Output should be a single integer; the side length of the largest square sub-grid that contains only one type of flowering plant. -----Examples----- Sample Input: 5 5 1 1 2 2 2 1 1 2 3 3 1 1 2 3 4 1 1 2 3 4 1 1 2 3 4 Sample Output: 2 Explanation: The largest contiguous sub-grid can be found at the top left corner, formed by the flowering plant type 1 with a side length of 2. Sample Input: 4 4 1 2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 Sample Output: 3 Explanation: The largest contiguous sub-grid can be found in the lower right corner, formed by the flowering plant type 5 with a side length of 3.","solution":"def largest_single_type_square(grid, R, C): def is_valid_square(x, y, length, plant_type): if x + length > R or y + length > C: return False for i in range(x, x + length): for j in range(y, y + length): if grid[i][j] != plant_type: return False return True max_length = 0 for i in range(R): for j in range(C): if grid[i][j] > 0: # Only consider non-empty sites current_plant_type = grid[i][j] length = 1 while is_valid_square(i, j, length, current_plant_type): max_length = max(max_length, length) length += 1 return max_length # Parsing input def main(input_str): lines = input_str.strip().split(\'n\') R, C = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return largest_single_type_square(grid, R, C)"},{"question":"You are given a string containing letters from \'a\' to \'z\'. Write a function that replaces each character in the string with the character 3 positions later in the alphabet. For example, \'a\' becomes \'d\', \'b\' becomes \'e\', and so on. If the shift causes the character to go past \'z\', it should wrap around to the beginning of the alphabet (e.g., \'x\' becomes \'a\'). Assume the input string will only contain lowercase alphabets. Return the modified string. Example: Input: \\"xyz\\" Output: \\"abc\\"","solution":"def shift_characters(input_string): Shifts each character in the input_string by 3 positions in the alphabet. Wraps around if the shift goes past \'z\'. result = [] for char in input_string: new_char = chr(((ord(char) - ord(\'a\') + 3) % 26) + ord(\'a\')) result.append(new_char) return \'\'.join(result)"},{"question":"Everyone wants to know how popular they are on social media, and one metric to measure this is the number of friends they have in their social network. You are given a list of friendships, and your task is to determine how many friends each person has. You will be given an undirected graph where nodes represent people and edges represent friendships between them. The graph is described by an integer N representing the number of vertices (people) and M representing the number of edges (friendships). Your task is to write a function that processes the given list of friendships and outputs the number of friends each person has in a sorted order starting from person 1 to person N. # Input The first line contains two integers N and M, the number of people and the number of friendships respectively. The next M lines contain two integers u and v each, denoting a friendship between person u and person v. # Output Output N lines, where the ith line contains the number of friends person i has. # Constraints - 1 ≤ N, M ≤ 100,000 - 1 ≤ u, v ≤ N - The given graph can have self-loops and multiple edges. # Example Input ``` 5 4 1 2 2 3 4 3 5 1 ``` Output ``` 2 2 2 1 1 ``` Explanation In the example, we have 5 people and 4 friendships: - Person 1 is friends with Person 2 and Person 5, hence 2 friends. - Person 2 is friends with Person 1 and Person 3, hence 2 friends. - Person 3 is friends with Person 2 and Person 4, hence 2 friends. - Person 4 is friends with Person 3, hence 1 friend. - Person 5 is friends with Person 1, hence 1 friend.","solution":"def count_friends(N, M, friendships): Returns the number of friends each person has in a sorted order starting from person 1 to person N. Parameters: - N: int, the number of people - M: int, the number of friendships - friendships: list of tuples, each containing two integers u and v representing a friendship between person u and person v Returns: - A list of integers where the ith index contains the number of friends person (i+1) has. from collections import defaultdict friend_count = defaultdict(int) for u, v in friendships: friend_count[u] += 1 if u != v: # ensuring not to double count on self-loops friend_count[v] += 1 result = [friend_count[i] for i in range(1, N+1)] return result"},{"question":"You are given a string S consisting of lowercase English letters. You need to find the length of the smallest substring that, when removed, gives a string with no consecutive repeating characters. If no such substring exists, return -1. For example: Input: S = \\"aabbcc\\" Output: 2 Explanation: Removing \\"aa\\" or \\"bb\\" or \\"cc\\" will result in a string without consecutive repeating characters. Input: S = \\"abc\\" Output: -1 Explanation: There are no consecutive repeating characters, so we cannot remove any substring to fulfill the requirement. Your Task: You do not need to read input or print anything. Your task is to complete the function smallestSubstr() which takes a string S as input and returns the length of the smallest substring which, when removed, makes the string free of consecutive repeating characters. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^5","solution":"def smallestSubstr(S): This function returns the length of the smallest substring that, when removed, results in a string with no consecutive repeating characters. If no such substring exists, it returns -1. n = len(S) if n == 1: return -1 for i in range(1, n): if S[i] == S[i - 1]: return 2 return -1"},{"question":"Problem description: This problem focuses on using Binary Search and Divide and Conquer techniques. You will be given an array of integers and a key value. Your task is to determine if the key value exists in the array and return its index if it exists. You need to solve this problem using two approaches: Brute Force and Binary Search. -----Brute-Force:----- You will iterate through the entire array to check if the key value exists and return its index. -----Binary Search:----- You will use Binary Search to determine if the key value exists in the array and return its index. -----Pseudo Code for Binary Search:----- binarySearch(arr, key, low, high): if low > high then return -1 endif mid = (low + high) / 2 if (arr[mid] == key) then return mid else if (arr[mid] < key) then return binarySearch(arr, key, mid + 1, high) else return binarySearch(arr, key, low, mid - 1) endif -----Input:----- The first line of input is the number of test cases (t). The first line of each test case is the number of array elements (n). The next will contain n space separated integers. The next line will have the key element (k). You have to return the index of the key using both brute force and binary search. If the key does not exist in the array, return -1 for both methods. The array is sorted in ascending order. -----Output:----- For each test case, the output will have a single line with 3 space separated integers: - The first integer is the index of the key using brute force - The second integer is the number of comparisons made using brute force - The third integer is the number of comparisons made using binary search -----Sample Input:----- 1 10 1 2 3 4 5 6 7 8 9 10 6 -----Sample Output:----- 5 6 3 -----Explanation:----- For the given array and key value 6: - Using brute force, we start from the beginning of the array and make 6 comparisons until we find the key at index 5. - Using binary search, the comparisons occur as follows: - Compare key with the middle element (index 4); since it\'s less, focus on the right half. - Compare key with the new middle element (index 7); since it\'s greater, focus on the left half of the right sub-array. - Compare key with the new middle element (index 5); it\'s a match, so we return index 5. A total of 3 comparisons have been made.","solution":"def brute_force_search(arr, key): comparisons = 0 for index, value in enumerate(arr): comparisons += 1 if value == key: return index, comparisons return -1, comparisons def binary_search(arr, key, low, high, comparisons = 0): if low > high: return -1, comparisons mid = (low + high) // 2 comparisons += 1 if arr[mid] == key: return mid, comparisons elif arr[mid] < key: return binary_search(arr, key, mid + 1, high, comparisons) else: return binary_search(arr, key, low, mid - 1, comparisons) def search_and_compare(arr, key): bf_index, bf_comparisons = brute_force_search(arr, key) bs_index, bs_comparisons = binary_search(arr, key, 0, len(arr) - 1) return bf_index, bf_comparisons, bs_comparisons def process_test_case(n, array, key): result = search_and_compare(array, key) return result def process_input(t, cases): results = [] for i in range(t): n = cases[i][0] array = cases[i][1] key = cases[i][2] results.append(process_test_case(n, array, key)) return results"},{"question":"Given a grid of size n x n consisting of \'X\' and \'O\'. Your task is to capture all regions surrounded by \'X\'. A region is surrounded by \'X\' if it is surrounded by \'X\' from all sides (top, bottom, left, right). A captured region turns all \'O\'s into \'X\'s. Example: Input: 3 3 X O X O X O X O X 2 X O O X 4 X X X O X O O X X X O X X O X X Output: X O X O X O X O X X O O X X X X O X X X X X X X X X O X X Explanation: Testcase 1: As \'O\' in the middle is not surrounded by \'X\' from all sides, it will not be captured. Testcase 2: Similar to testcase 1. Testcase 3: The bottom two \'O\' are not captured as they are connected to edge \'O\'. Input: The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. The first line of each test case contains an integer n denoting the grid size. The next n lines contain n characters \'X\' or \'O\'. Output: For each test case, the output should be the n x n grid with all surrounded regions turned into \'X\'. Your Task: Complete the function captureRegions() which captures all regions surrounded by \'X\'. Constraints: 1 <= T <= 50 1 <= n <= 100","solution":"def captureRegions(T, test_cases): def dfs(grid, i, j, n): if i < 0 or j < 0 or i >= n or j >= n or grid[i][j] != \'O\': return grid[i][j] = \'T\' # Temporarily mark the \\"O\\" as \\"T\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for di, dj in directions: dfs(grid, i + di, j + dj, n) results = [] for t in range(T): n, grid = test_cases[t] # Process the edges for i in range(n): if grid[i][0] == \'O\': dfs(grid, i, 0, n) if grid[i][n - 1] == \'O\': dfs(grid, i, n - 1, n) for j in range(n): if grid[0][j] == \'O\': dfs(grid, 0, j, n) if grid[n - 1][j] == \'O\': dfs(grid, n - 1, j, n) # Capture surrounded regions for i in range(n): for j in range(n): if grid[i][j] == \'O\': grid[i][j] = \'X\' elif grid[i][j] == \'T\': grid[i][j] = \'O\' results.append(grid) return results"},{"question":"Given a string, your task is to complete the function isValidParenthesis that returns true if the string contains a valid combination of parentheses, i.e., every opening parenthesis has a corresponding closing parenthesis in the correct order, otherwise returns false. Example 1: Input: \\"((()))\\" Output: 1 Explanation: The input string \\"(())\\" has all opening parentheses properly closed and nested. Hence, the output is 1 (True). Example 2: Input: \\"(()\\" Output: 0 Explanation: The input string \\"(()\\" does not have all opening parentheses closed, hence the output is 0 (False). Example 3: Input: \\"())(\\" Output: 0 Explanation: The input string \\"())(\\" does not form a valid combination of parentheses as the closing and opening parentheses are not in correct order. Therefore, the output is 0 (False). Your task: You don\'t need to read input or print anything. Your task is to complete the function isValidParenthesis() which takes a string as input parameter and returns 1 if the string has a valid combination of parentheses, otherwise returns 0. Constraints: 1 <= length of string <= 100 String contains only the characters \'(\' and \')\'. Expected time complexity: O(n) Expected space complexity: O(n)","solution":"def isValidParenthesis(s): Checks if the input string s contains a valid combination of parentheses. Returns 1 if valid, otherwise 0. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return 0 stack.pop() return 1 if not stack else 0"},{"question":"You are given a string S consisting of lowercase English letters, and an integer k. Your task is to find a substring of length k such that when it is rearranged (not necessarily contiguous in the same order), it appears at least twice in the string S. Input The first line contains a string S of length n (1 ≤ n ≤ 105). The second line contains an integer k (1 ≤ k ≤ n). Output Print \\"YES\\" if there exists such a substring, otherwise print \\"NO\\". Examples Input abcabc 3 Output YES Input abcd 2 Output NO","solution":"def can_find_repeated_substring(s, k): from collections import Counter n = len(s) # Sliding window to count all substrings of length k substring_counter = Counter(s[i:i+k] for i in range(n - k + 1)) # Check if any substring appears more than once for count in substring_counter.values(): if count > 1: return \\"YES\\" return \\"NO\\" # Example usage s = \\"abcabc\\" k = 3 print(can_find_repeated_substring(s, k)) # Should print \\"YES\\""},{"question":"Write a function to perform matrix rotation. Given a square matrix of size N x N, you need to rotate the matrix 90 degrees clockwise. Input First line contains integer T (number of test cases). Next T test cases contain first integer N (size of the matrix) followed by N*N integers representing the matrix elements in row-major order. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 100 0 ≤ matrix elements ≤ 1000 SAMPLE INPUT 2 3 1 2 3 4 5 6 7 8 9 2 1 2 3 4 SAMPLE OUTPUT 7 4 1 8 5 2 9 6 3 3 1 4 2","solution":"def rotate_matrix_clockwise(matrix): Rotates the given square matrix 90 degrees clockwise. Args: matrix (list of list of int): The N x N matrix to rotate. Returns: list of list of int: The rotated matrix. N = len(matrix) rotated_matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N - 1 - i] = matrix[i][j] return rotated_matrix def process_test_cases(test_cases): Processes multiple test cases to rotate matrices. Args: test_cases (list of tuples): List of test cases, where each test case is a tuple containing matrix size and the matrix elements. Returns: list of list of ints: Rotated matrices for each test case in row-major order. results = [] for N, elements in test_cases: matrix = [elements[i * N:(i + 1) * N] for i in range(N)] rotated_matrix = rotate_matrix_clockwise(matrix) results.append([elem for row in rotated_matrix for elem in row]) return results def read_input(input_string): Parses the input string and formats it into test cases. Args: input_string (str): The input string containing number of test cases, and matrices. Returns: list of tuples: Formatted test cases. lines = input_string.strip().split() T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) elements = list(map(int, lines[index + 1: index + 1 + N * N])) test_cases.append((N, elements)) index += 1 + N * N return test_cases def matrices_to_string(matrices): Converts a list of matrices to a formatted string suitable for output. Args: matrices (list of list of int): List of matrices. Returns: str: Formatted output string. return \\"n\\".join(\\" \\".join(map(str, matrix)) for matrix in matrices)"},{"question":"A house painter is planning out a schedule to paint several houses lined up in a row. Every house has a certain cost associated with painting it. However, the painter cannot paint two adjacent houses on the same day. He can, however, skip any number of houses between two painted houses. Given the costs of painting each house, help the painter determine the maximum total cost he can achieve while ensuring no two adjacent houses are painted on the same day. Input: The first line of input contains an integer T, the number of test cases. Each test case contains two lines: - The first line contains a single integer N, which is the number of houses. - The second line contains N integers, representing the cost of painting each house. Output: For each test case, output the maximum total cost the painter can achieve, printed on a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ cost[i] ≤ 10^4 Example: Input: 2 5 3 2 5 10 7 4 1 2 9 4 Output: 15 10 Explanation: - For the first test case, the optimal solution is to paint the 1st house (cost 3), skip the 2nd house, paint the 3rd house (cost 5), and the 4th house (cost 10), yielding a total cost of 3 + 10 + 5 = 18. - For the second test case, the optimal solution is to paint the 1st house (cost 1) and the 3rd house (cost 9), yielding a total cost of 1 + 9 = 10.","solution":"def max_paint_cost(test_cases): results = [] for case in test_cases: n, costs = case if n == 0: results.append(0) continue if n == 1: results.append(costs[0]) continue # Dynamic programming list to keep track of the maximum cost dp = [0] * n # Initial assignments dp[0] = costs[0] if n > 1: dp[1] = max(costs[0], costs[1]) # Fill the DP array for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + costs[i]) results.append(dp[-1]) return results def process_input(input_str): input_lines = input_str.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) costs = list(map(int, input_lines[index + 1].split())) test_cases.append((N, costs)) index += 2 return test_cases def solve(input_str): test_cases = process_input(input_str) results = max_paint_cost(test_cases) return \\"n\\".join(map(str, results))"},{"question":"Clara Oswald is a time traveler. She loves playing around with sequences and decided to invent a new sequence pattern called Timelord numbers. A Timelord number sequence is defined as follows: 1. P(t) = P(t-1) + 2*t, P(1) = 4 2. Q(t) = Q(t-2) + P(t), Q(1) = 2, Q(2) = 5 Your task is to help Clara calculate the Timelord numbers for different time values, so she can monitor them during her travels. Note: The sequence starts at time t=1. P(t) is the value of the sequence at time t. Q(t) is another sequence value at time t based on the sequence P. Input:- First line contains a single integer N denoting number of test cases. Next N lines contain a single integer t. Output: Output N lines where each line contains two space-separated integers denoting P(t) mod (10^9 + 7) and Q(t) mod (10^9 + 7). Constraints: 1 ≤ N ≤ 2000 1 ≤ t ≤ 10^9 Example Input 3 1 2 3 Example Output 4 2 8 5 14 19","solution":"MOD = 10**9 + 7 def calculate_pt(t): if t == 1: return 4 return (4 + 2 * sum(range(2, t + 1))) % MOD def calculate_qt(t): if t == 1: return 2 if t == 2: return 5 q1 = 2 q2 = 5 p_values = {1: 4} for i in range(2, t + 1): if i not in p_values: p_values[i] = (calculate_pt(i) % MOD) p_i = p_values[i] q_i = (q1 + p_i) % MOD q1 = q2 q2 = q_i return q2 def timelord_numbers(test_cases): results = [] for t in test_cases: P_t = calculate_pt(t) Q_t = calculate_qt(t) results.append(f\\"{P_t} {Q_t}\\") return results def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) test_cases = [int(data[i]) for i in range(1, N + 1)] results = timelord_numbers(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"The world renowned culinary artist, Chef Gordon, has an array of spicy ingredients. Each ingredient has a spiciness level, and Chef Gordon wants to create dishes using these ingredients. A dish is a combination of one or more ingredients whose total spiciness level must exceed a certain value `T` for the dish to be considered successful. Chef Gordon can create multiple dishes from the array, but each ingredient can only be used in exactly one dish. Chef Gordon aims to maximize the number of successful dishes he can create. Determine the maximum number of successful dishes Chef Gordon can prepare. -----Input----- The first line contains two integers `N` and `T` (1 le N le 10^5, 1 le T le 10^9) — the number of ingredients and the minimum spiciness level required for a dish to be successful. The second line contains `N` integers `S_1, S_2, ..., S_N` (1 le S_i le 10^9) — the spiciness levels of all ingredients. -----Output----- A line containing an integer representing the maximum number of successful dishes that can be prepared by Chef Gordon. -----Examples----- Input 7 100 20 30 40 50 60 70 80 Output 2 -----Note----- The 1st dish can be made using ingredients with spiciness levels [80, 20, 30], which sums up to 130 (> 100). The 2nd dish can be made using ingredients with spiciness levels [70, 50], which sums up to 120 (> 100). Although other combinations may succeed as well, the maximum number of successful dishes in this case is 2.","solution":"def max_successful_dishes(N, T, S): Determines the maximum number of successful dishes that can be made from the given spiciness levels and target spiciness. Parameters: N (int): The number of ingredients. T (int): The minimum spiciness level required for a dish to be successful. S (list): The list of spiciness levels of the ingredients. Returns: int: The maximum number of successful dishes. S.sort(reverse=True) count = 0 total_spiciness = 0 for spice in S: total_spiciness += spice if total_spiciness >= T: count += 1 total_spiciness = 0 return count"},{"question":"In a city, there are N houses aligned in a row. Each house has a certain amount of money stashed away in it. However, the city has a rule that prohibits stealing from two consecutive houses during a single night. Given the amount of money in each house, determine the maximum amount of money a thief can steal in a single night without stealing from two consecutive houses. -----Constraints----- - 1 ≤ N ≤ 100,000 - 0 ≤ Money[i] ≤ 10,000 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N Money[1] Money[2] ... Money[N] -----Output----- Print the maximum amount of money a thief can steal. -----Sample Input----- 5 2 7 9 3 1 -----Sample Output----- 12 It is optimal for the thief to steal from house 1, house 3, and house 5.","solution":"def max_stealable_money(N, Money): if N == 0: return 0 if N == 1: return Money[0] # dp[i] represents the maximum money that can be stolen up to the i-th house dp = [0] * N dp[0] = Money[0] dp[1] = max(Money[0], Money[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + Money[i]) return dp[-1]"},{"question":"Miko\'s Fruit Market sells apples at 3 dollars each and oranges at 8 dollars each. Determine if it is possible to spend exactly M dollars by buying a combination of apples and oranges. You can buy one or more apples and one or more oranges, but you can also choose to buy zero apples or zero oranges. -----Constraints----- - M is an integer between 1 and 100, inclusive. -----Input----- Input is given from Standard Input in the following format: M -----Output----- If it is possible to spend exactly M dollars by buying some apples and some oranges, print Yes; otherwise, print No. -----Sample Input----- 14 -----Sample Output----- Yes If you buy two apples and one orange, the total will be 3 * 2 + 8 * 1 = 14 dollars.","solution":"def can_spend_exact_M(M): Determine if it is possible to spend exactly M dollars by buying a combination of apples (3 dollars each) and oranges (8 dollars each). Returns \\"Yes\\" if possible, \\"No\\" otherwise. for apples in range((M // 3) + 1): for oranges in range((M // 8) + 1): if (3 * apples + 8 * oranges) == M: return \\"Yes\\" return \\"No\\""},{"question":"Addie loves solving puzzles, especially those involving numbers and sequences. She recently came across an interesting problem involving the Fibonacci sequence and decided to give it a twist. Instead of generating a sequence up to a certain point, she wants to find the largest Fibonacci number smaller or equal to a given number N. Can you help Addie with this problem? Input: The first line of the input will be T, the number of test cases. Next follows T lines each containing one integer N, which represents the number for which you need to find the largest Fibonacci number that is smaller or equal to N. Output: Print T lines each consisting of the largest Fibonacci number that is smaller or equal to the given number N for each test case. Constraints: 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^18 SAMPLE INPUT 3 10 15 100 SAMPLE OUTPUT 8 13 89","solution":"def largest_fibonacci(n): Returns the largest Fibonacci number smaller or equal to n. if n < 2: return n a, b = 1, 1 while b <= n: a, b = b, a + b return a def find_largest_fibonacci_less_than_or_equal_to_n(test_cases): For multiple test cases, returns the largest Fibonacci numbers smaller or equal to given numbers. results = [largest_fibonacci(n) for n in test_cases] return results # Example usage: # test_cases = [10, 15, 100] # print(find_largest_fibonacci_less_than_or_equal_to_n(test_cases)) # Output: [8, 13, 89]"},{"question":"Given a string of lowercase alphabets, determine whether it contains any palindromic substrings of length 3 or more. A palindromic string is one that reads the same backward as forward. # Constraints * The length of the string does not exceed 100,000. * The string contains only lowercase English letters. # Input The input consists of a single string s. # Output Print \\"YES\\" if there is a palindromic substring of length 3 or more, otherwise print \\"NO\\". # Example Input ``` abacdfgdcabba ``` Output ``` YES ``` Input ``` abcdefg ``` Output ``` NO ```","solution":"def has_palindromic_substring(s): Determines if the string contains any palindromic substrings of length 3 or more. Args: s (str): The input string of lowercase alphabets. Returns: str: \\"YES\\" if there is a palindromic substring of length 3 or more, otherwise \\"NO\\". n = len(s) for length in range(3, n + 1): for start in range(n - length + 1): substr = s[start:start + length] if substr == substr[::-1]: return \\"YES\\" return \\"NO\\""},{"question":"Write a function which checks if the given string is a palindrome. A palindrome is a string that reads the same backwards as forwards. Your program should output \\"YES\\" if the string is a palindrome and \\"NO\\" otherwise. Input Format The first line contains an integer T, i.e., number of test cases. Next T lines will contain a string S. Output Format Print \\"YES\\" or \\"NO\\" for each test case on a new line. Constraints 1≤T≤100 1≤|S|≤100 SAMPLE INPUT 3 racecar hello madam SAMPLE OUTPUT YES NO YES","solution":"def check_palindromes(T, strings): Returns \\"YES\\" if each string in the list is a palindrome, otherwise \\"NO\\". Parameters: - T: int, number of test cases - strings: list of str, input strings to check Returns: list of str, \\"YES\\" or \\"NO\\" for each input string results = [] for s in strings: if s == s[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A popular online shopping platform wants to manage its sales data effectively. The platform holds several sales events, and during each event, different products are sold. Each product has a unique product ID and can be sold multiple times at varying prices. # Objective: To track the total revenue generated from each sale event for specific products. # Input: - The first line contains an integer `t` (1 <= t <= 100) – the number of sale events. - For each sale event: - The first line contains `n` (1 <= n <= 1000) – the number of records for the event. - The next `n` lines contain two integers each: `p_i` and `u_i` (1 <= p_i <= 100000, 1 <= u_i <= 100000) representing the product ID and the units sold respectively for the `i-th` record. - The following line contains an integer `k` (1 <= k <= 100) – the number of product IDs to query for this event. - The last line for each event contains `k` integers which are the product IDs being queried. # Output: For each sale event, output `k` integers where each integer corresponds to the total revenue generated by the given product IDs in the querying list during that event. # Example: Input: ``` 2 5 1001 200 1002 300 1001 150 1003 400 1002 250 3 1001 1002 1003 4 1010 500 1009 600 1010 450 1008 700 2 1010 1008 ``` Output: ``` 350 550 400 950 700 ``` # Explanation: - In the first event, the product ID 1001 totaled 200 + 150 = 350 units, product ID 1002 totaled 300 + 250 = 550 units, and product ID 1003 totaled 400 units. - In the second event, the product ID 1010 totaled 500 + 450 = 950 units, and product ID 1008 totaled 700 units.","solution":"def total_revenue(t, events): results = [] for i in range(t): n = events.pop(0) sales = {} for _ in range(n): p_i, u_i = events.pop(0) if p_i in sales: sales[p_i] += u_i else: sales[p_i] = u_i k = events.pop(0) query = events.pop(0) result = [sales.get(product_id, 0) for product_id in query] results.append(result) return results"},{"question":"A company has recently implemented a modern password policy to enhance security. According to the policy, a valid password must satisfy the following conditions: 1. It must contain at least one uppercase letter. 2. It must contain at least one lowercase letter. 3. It must contain at least one digit. 4. It must contain at least one special character from the set `{!, @, #, , %, ^, &, *, (, )}`. Given a string `s`, determine the minimum number of characters that need to be added to the string to make it a valid password according to the company’s policy. Input: The input consists of a single line, a string `s` (1 ≤ |s| ≤ 100), which represents the password candidate. Output: Print a single integer, the minimum number of characters that must be added to the string to make it a valid password. Examples: Input `Passw1` Output `1` Input `Secure!` Output `1` Input `123` Output `3` Note: In the first example, the string `Passw1` is missing a special character from the predefined set, so one special character needs to be added to meet all the requirements. In the second example, the string `Secure!` is missing a digit, so one numeric character needs to be added. In the third example, the string `123` lacks an uppercase letter, a lowercase letter, and a special character. Thus, three characters need to be added to fulfill the password requirements.","solution":"def minimum_additional_characters(s): has_upper = any(c.isupper() for c in s) has_lower = any(c.islower() for c in s) has_digit = any(c.isdigit() for c in s) special_chars = set(\\"!@#%^&*()\\") has_special = any(c in special_chars for c in s) missing_types = 4 - sum([has_upper, has_lower, has_digit, has_special]) return missing_types"},{"question":"Tina is walking down a long street lined with trees, lamp posts, and houses. She is fascinated by the intricate setup and notices a peculiar pattern. Each item on the street is represented by a unique character: - \'T\' for Tree - \'L\' for Lamp post - \'H\' for House - \'.\' for an empty space Tina wants to know if there exists a segment of the street that contains all three items (\'T\', \'L\', \'H\') consecutively without any interruptions (i.e., no \'.\' in between). Can you help Tina determine if such a segment exists? -----Input----- The first and only line of input consists of a non-empty string s of length at most 100 (1 leq lvert s rvert leq 100) containing the characters \'T\', \'L\', \'H\', and \'.\'. -----Output----- Output \\"Yes\\" if there exists a segment that contains \'T\', \'L\', and \'H\' consecutively in any order without any \'.\' interruptions, and \\"No\\" otherwise. You can print each letter in any case (upper or lower). -----Examples----- Input T.LH.TH.L Output No Input TLH.TLHTH Output Yes -----Note----- In the first example, there is no segment where \'T\', \'L\', and \'H\' appear consecutively without any \'.\' interruptions. In the second example, the segment \\"TLH\\" appears without any interruptions, which satisfies the requirement.","solution":"def segment_contains_all_items(s): Determines if there exists a segment that contains \'T\', \'L\', and \'H\' consecutively without any interruptions. :param s: A string representing the street containing \'T\', \'L\', \'H\', and \'.\'. :return: \\"Yes\\" if such a segment exists, \\"No\\" otherwise. for i in range(len(s) - 2): segment = s[i:i+3] if \'T\' in segment and \'L\' in segment and \'H\' in segment and \'.\' not in segment: return \\"Yes\\" return \\"No\\""},{"question":"unique The unique tool finds the unique elements of an array. import numpy my_array = numpy.array([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) print numpy.unique(my_array) #Output : [1 2 3 4] You can also return unique elements of an array with their indices and counts. The returns are: the sorted unique elements of `ar`, the indices of `ar` that result in the unique array, and the number of times each unique item appears in `ar`. import numpy my_array = numpy.array([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) unique_array, indices, counts = numpy.unique(my_array, return_index=True, return_counts=True) print unique_array #Output : [1 2 3 4] print indices #Output : [0 1 3 6] print counts #Output : [1 2 3 4] Task You are given a 1-D array of size N. Your task is to find the unique elements of the array in sorted order, and then find the mean of these unique elements. Input Format A single line of input containing space separated integers of array. Output Format Compute the unique elements in sorted order, and then print the mean of these unique elements. Sample Input 1 2 2 3 3 3 4 4 4 4 Sample Output 2.5 Explanation The unique elements in sorted order = [1, 2, 3, 4] The mean of these unique elements = (1+2+3+4)/4 = 2.5","solution":"import numpy as np def unique_mean(arr): Given a 1-D array of integers, finds the unique elements of the array in sorted order, and computes the mean of these unique elements. Args: arr (list of int): Input array. Returns: float: Mean of unique elements in sorted order. unique_elements = np.unique(arr) mean_value = np.mean(unique_elements) return mean_value"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to reformat the string such that no two adjacent characters are the same. If such a reordering is not possible, return \\"Not Possible\\". Constraints * 1 leq |s| leq 10^5 * s consists only of lowercase English letters. Input The input is given from Standard Input in the following format: ``` s ``` Output Output a single string which is a reordering of the input string such that no two adjacent characters are the same. If no valid reordering is possible, print \\"Not Possible\\". Examples Input ``` aab ``` Output ``` aba ``` Input ``` aaab ``` Output ``` Not Possible ``` Input ``` aabb ``` Output ``` abab ```","solution":"import heapq from collections import Counter def reformat_string(s): Reformat the string such that no two adjacent characters are the same. If it\'s not possible, return \\"Not Possible\\". # Count the frequency of each character freq = Counter(s) # Create a max heap based on the negative frequency (-freq ensures max heap) max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count = count + 1 prev_char = char result_str = \'\'.join(result) # If the length of the result is not the same as the input, it means reformation was not possible if len(result_str) != len(s): return \\"Not Possible\\" return result_str"},{"question":"Given a list of n integers, you need to find the sum of the product of each pair of distinct integers from the list. Note that since the answer can be very large, you should return the sum modulo 10^9 + 7. Example 1: Input: arr = [1, 2, 3] Output: 11 Explanation: (1*2 + 1*3 + 2*3) = 2 + 3 + 6 = 11 Example 2: Input: arr = [4, 5, 2, 1] Output: 37 Explanation: (4*5 + 4*2 + 4*1 + 5*2 + 5*1 + 2*1) = 20 + 8 + 4 + 10 + 5 + 2 = 49; 49 % (10^9 + 7) = 49 Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfProductOfPairs() which takes the list of integers arr as input and returns the sum of the product of each pair of distinct integers modulo 10^9 + 7. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^5 1 ≤ arr[i] ≤ 10^9","solution":"def sumOfProductOfPairs(arr): MOD = 10**9 + 7 total_sum = sum(arr) % MOD sum_of_products = 0 for num in arr: total_sum = (total_sum - num) % MOD sum_of_products = (sum_of_products + num * total_sum) % MOD return sum_of_products"},{"question":"A company has an IT infrastructure with several servers. Each server has a unique identifier (an integer) and a predefined dependency on other servers. If server A depends on server B, then server B must be up before server A can be started. Given the information about the dependencies of each server, you need to determine the order in which the servers can be started such that all dependency constraints are satisfied. If there are multiple valid orders, any of them can be output. If it is not possible to start all servers due to a cyclic dependency, output \\"Not possible\\". -----Input----- The input consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of servers. The second line contains n lists, each ending with a -1, which represents the dependency list for each server. The i-th list provides the dependencies for server i, such that each integer in the list represents a server that the i-th server depends on. The lists are separated by spaces. -----Output----- Print a single line containing a valid order of server identifiers separated by spaces if such an order exists. If no such order is possible, output \\"Not possible\\". -----Examples----- Input 5 -1 -1 1 -1 2 3 -1 4 -1 Output 1 2 4 3 5 Note: Here: - Server 1 has no dependencies. - Server 2 has no dependencies. - Server 3 depends on Server 1. - Server 4 has no dependencies. - Server 5 depends on Server 2 and Server 4.","solution":"from collections import deque, defaultdict def find_start_order(n, dependencies): # Initialize graph and in-degree count graph = defaultdict(list) in_degree = [0] * (n + 1) # Parse the dependencies for i in range(n): for dep in dependencies[i]: if dep == -1: continue graph[dep].append(i + 1) in_degree[i + 1] += 1 # Initialize queue with all nodes having zero in-degree queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Check if we have added all nodes to the order to detect cycles if len(order) == n: return \\" \\".join(map(str, order)) else: return \\"Not possible\\" # Example usage def servers_start_order(n, dependencies_list): dependencies = [list(map(int, deps.split()[:-1])) for deps in dependencies_list] return find_start_order(n, dependencies)"},{"question":"Given a list of integers representing lengths of different sticks, determine the minimum number of moves required to make all sticks equal. In one move, you can either increase or decrease the length of any stick by 1 unit. Example 1: Input: sticks = [1, 2, 3] Output: 2 Explanation: You can increase the stick of length 1 to 2 and decrease the stick of length 3 to 2. This takes 2 moves. Example 2: Input: sticks = [5, 5, 5] Output: 0 Explanation: All sticks are already of equal length, so no moves are required. Example 3: Input: sticks = [1, 2, 3, 4] Output: 4 Explanation: You can either increase sticks [1, 2] or decrease sticks [3, 4] all to length 3, taking 4 moves. Constraints: 1 <= sticks.length <= 1000 1 <= sticks[i] <= 10^9","solution":"def min_moves_to_equal_sticks(sticks): Returns the minimum number of moves required to make all sticks equal in length. :param sticks: List of integers representing the lengths of different sticks. :return: Integer - minimum number of moves. # Sort the list of sticks sticks.sort() # The optimal length to which all sticks should be adjusted is the median of the sorted list. median = sticks[len(sticks) // 2] # Calculate the total moves required to make all sticks equal to the median total_moves = sum(abs(stick - median) for stick in sticks) return total_moves"},{"question":"You are given a list of integers, and you need to perform a specific type of sorting operation on it. The sorting operation involves sorting the list in such a way that the sum of the absolute differences of each adjacent pair of elements is minimized. In other words, you need to reorder the list such that the sum of the absolute differences between consecutive elements is as small as possible. Here is the precise statement of your task: Input - The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the list. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the list. Output - Print the reordered list such that the sum of the absolute differences between consecutive elements is minimized. If there are multiple valid orders, print any of them. Example: Input 5 4 2 1 3 5 Output 1 2 3 4 5 Explanation: One of the possible orders of the elements is [1, 2, 3, 4, 5], which results in the minimized sum of absolute differences: |1-2| + |2-3| + |3-4| + |4-5| = 1 + 1 + 1 + 1 = 4. Note: The problem requires sorting the list in an order that minimizes the sum of absolute differences of consecutive elements; sorting the list in non-decreasing order is one possible solution.","solution":"def minimize_absolute_differences(arr): Reorders the list such that the sum of absolute differences between consecutive elements is minimized. return sorted(arr)"},{"question":"Given an array of integers where every element appears twice except for one, find that single non-duplicate element. Example 1: Input: nums = [4,1,2,1,2] Output: 4 Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?","solution":"def single_number(nums): Finds the single non-duplicate element in an array where every element appears twice except for one. result = 0 for num in nums: result ^= num return result"},{"question":"A robot is initially located at the top-left corner (1,1) of an NxM grid. The goal of the robot is to move to the bottom-right corner (N,M). The robot can only move either one step to the right or one step down at a time. However, certain cells in the grid are blocked and the robot cannot move through these cells. Design an algorithm to determine the number of distinct paths the robot can take to reach its goal. Constraints * 1 leq N,M leq 100 * The grid contains only integers 0 or 1, where 0 represents an unblocked cell and 1 represents a blocked cell. * The top-left corner (1,1) and the bottom-right corner (N,M) are always unblocked. Input Input is given from Standard Input in the following format: N M g_{11} ... g_{1M} : g_{N1} ... g_{NM} Output Print the number of distinct paths the robot can take to reach the bottom-right corner, modulo 1000000007. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 0 1 0 0 Output 1","solution":"def distinct_paths(grid): Determines the number of distinct paths from the top-left to the bottom-right corner of a grid while only moving right or down and avoiding blocked cells. :param grid: List[List[int]] representing the grid (0 for open, 1 for blocked). :return: int Number of distinct paths modulo 1000000007 N = len(grid) M = len(grid[0]) MOD = 1000000007 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 # Starting point for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 # If it\'s a blocked cell, no paths go through here else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[N-1][M-1] def read_input_and_execute(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [] for i in range(N): grid.append([int(data[N * i + j + 2]) for j in range(M)]) print(distinct_paths(grid))"},{"question":"You are given an array of integers representing the height of buildings along a street. The width of each building is 1 unit. As the sun sets, you are to determine which buildings will have a view of the sunset. The sun sets from the west, thus a building has a view of the sunset if there are no taller buildings to its right side. Write a function that returns an array of position indices of the buildings that will have a view of the sunset. The positions should be listed in the order of buildings from left to right in the original array. -----Input----- The function receives a single argument, an array `heights` of integers of length `n` (1 ≤ n ≤ 10^5), where each integer `heights[i]` (1 ≤ heights[i] ≤ 10^9) represents the height of the ith building. -----Output----- The function should return an array of integers representing the indices of buildings that will have a view of the sunset. -----Examples----- Input [4, 2, 3, 1] Output [0, 2, 3] Input [1, 3, 2, 4] Output [3] Input [2, 2, 2, 2] Output [3] -----Note----- A building at position `i` has a sunset view if for all positions `j` such that `i < j`, `heights[i] > heights[j]`. This means the building must be taller than any building positioned to its right. In the first example, the buildings at indices 0, 2, and 3 have a clear view of the sunset.","solution":"def sunset_view(heights): Return the indices of buildings that have a view of the sunset. The sun sets from the west, and a building has a view if there are no taller buildings to its right. :param heights: List[int] - list of building heights :return: List[int] - list of indices with sunset view n = len(heights) if n == 0: return [] result = [] max_height = -1 for i in range(n-1, -1, -1): if heights[i] > max_height: result.append(i) max_height = heights[i] return result[::-1]"},{"question":"You are given n points in a 2D space, where each point has two coordinates (x_i, y_i). The objective is to find the distance between the two points that are farthest apart. The distance between two points (x_1, y_1) and (x_2, y_2) is defined as: [ sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2} ] It is guaranteed that there exist at least two distinct points in every test case. Implement an efficient algorithm that can handle large inputs up to the given constraints. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases in the input. Each test case consists of n+1 lines. The first line of each test case contains an integer n (2 le n le 2000) — the number of points. Then, the next n lines contain two integers x_i and y_i (-10^4 le x_i, y_i le 10^4). -----Output----- For each test case, output a single floating-point number — the maximum distance between the two points that are farthest apart. Your answer should have an absolute or relative error less than 10^{-6}. -----Example----- Input 2 3 0 0 0 3 4 0 4 -1 -1 -1 1 1 1 1 -1 Output 5.000000 2.828427","solution":"import math def max_distance_between_points(points): max_distance = 0 n = len(points) for i in range(n): for j in range(i + 1, n): x1, y1 = points[i] x2, y2 = points[j] distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2) if distance > max_distance: max_distance = distance return max_distance def process_test_cases(test_cases): results = [] for points in test_cases: results.append(max_distance_between_points(points)) return results"},{"question":"Write a function to merge two sorted linked lists into one sorted linked list. The input linked lists can be defined as follows: 1. Each linked list node contains an integer data and a next pointer to point to the next node in the list. 2. The input is two linked lists that are already sorted in increasing order. Example 1: Input: List1: 1 -> 3 -> 5 List2: 2 -> 4 -> 6 Output: 1 -> 2 -> 3 -> 4 -> 5 -> 6 Example 2: Input: List1: 5 -> 10 -> 15 List2: 2 -> 3 -> 20 Output: 2 -> 3 -> 5 -> 10 -> 15 -> 20 Your Task: Complete the function `mergeTwoSortedLists` that takes the heads of two sorted linked lists as parameters and returns the head of the merged sorted linked list. The printing is done automatically by the driver code. Expected Time Complexity: O(N + M) where N and M are the lengths of the two lists, respectively. Expected Auxiliary Space: O(1) Constraints: 1 <= N, M <= 1000 -10^5 <= Node Value <= 10^5","solution":"class ListNode: def __init__(self, data=0, next=None): self.data = data self.next = next def mergeTwoSortedLists(list1, list2): dummy = ListNode() tail = dummy while list1 and list2: if list1.data <= list2.data: tail.next = list1 list1 = list1.next else: tail.next = list2 list2 = list2.next tail = tail.next if list1: tail.next = list1 elif list2: tail.next = list2 return dummy.next"},{"question":"The Annual Coding Festival has an interesting problem for you to solve. Alice and Bob are competing in a new game. They are presented with an array of integers, and in each turn, a player must choose and remove one of the numbers from the array. The first player who cannot make a valid move (because the array is empty) loses the game. The twist is that Alice always goes first, and both players play optimally. Given the initial array, you need to determine whether Alice will win or lose, assuming both people make the best possible moves. Input: The first line of input contains an integer T (the number of test cases). The following T lines each contain an integer N (the number of elements in the array) followed by N integers (the elements of the array). Output: For each test case, print \\"Alice\\" if Alice wins and \\"Bob\\" if Bob wins. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -1000 ≤ array elements ≤ 1000 SAMPLE INPUT 3 3 -1 2 3 4 10 -5 4 7 2 11 -11 SAMPLE OUTPUT Alice Alice Bob","solution":"def determine_winner(T, test_cases): Determines the winner between Alice and Bob given T test cases. Parameters: T (int): number of test cases test_cases (list of lists): a list containing T lists. Each list contains N followed by N integers. Returns: list: a list of strings with \\"Alice\\" or \\"Bob\\" corresponding to the winner of each test case. results = [] for case in test_cases: N = case[0] array = case[1:] if N % 2 == 0: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"You are given a set of points in a two-dimensional plane. Your task is to find the largest distance between any two points from the set and output that distance with 6 decimal places. Input The first input line contains one number T — number of test cases (1 ≤ T ≤ 100). Each of the following T lines contains an integer N (1 ≤ N ≤ 1000), followed by 2*N integers representing the coordinates of the points in the form x1 y1 x2 y2 … xN yN, where xi and yi are the coordinates of the ith point (|xi|, |yi| ≤ 10000). Output For each test case, output one line containing the largest distance between any two points in the set, with 6 characters after the decimal point. Example Input 2 3 0 0 0 1 1 0 2 -1 -1 1 1 Output 1.414214 2.828427","solution":"import math def largest_distance(points): max_dist = 0 for i in range(len(points)): for j in range(i + 1, len(points)): dist = math.sqrt((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2) max_dist = max(max_dist, dist) return max_dist def solve(test_cases): results = [] for points in test_cases: max_dist = largest_distance(points) # Format the distance to 6 decimal places results.append(f\\"{max_dist:.6f}\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): data = list(map(int, lines[i].split())) N = data[0] points = [(data[j], data[j + 1]) for j in range(1, 2 * N + 1, 2)] test_cases.append(points) return test_cases def main(input_str): test_cases = parse_input(input_str) results = solve(test_cases) for result in results: print(result)"},{"question":"In a university, students are enrolled in various subjects. Each subject has a list of students with their respective scores. The university wants to find the highest average score of any subject. However, this average should exclude the highest and lowest scores in that subject. Write a function to achieve this. If a subject has fewer than three students, the function should return -1 for that subject. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with an integer S, denoting the number of subjects. For each subject, the first line contains an integer N, the number of students enrolled in that subject. The second line contains N space-separated integers representing the scores of students in that subject. ------ Output ------ For each test case, print a single line containing the highest average score, truncated to two decimal places, after excluding the highest and lowest scores. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ S ≤ 100 1 ≤ N ≤ 10^5 0 ≤ text{Score} ≤ 100 the sum of N over all subjects in all test cases combined does not exceed 10^5 ------ Sample Input 1 ------ 2 2 5 50 60 70 80 90 3 80 90 100 1 2 70 75 ------ Sample Output 1 ------ 70.00 90.00 -1","solution":"def highest_average_score(test_cases): results = [] for test_case in test_cases: max_avg = float(\'-inf\') for subject_scores in test_case: if len(subject_scores) < 3: results.append(-1) continue sorted_scores = sorted(subject_scores) trimmed_scores = sorted_scores[1:-1] average = sum(trimmed_scores) / len(trimmed_scores) max_avg = max(max_avg, average) results.append(max_avg) return results def process_input(input_data): input_lines = input_data.strip().split(\'n\') idx = 0 T = int(input_lines[idx]) idx += 1 test_cases = [] for _ in range(T): S = int(input_lines[idx]) idx += 1 subjects = [] for _ in range(S): N = int(input_lines[idx]) idx += 1 scores = list(map(int, input_lines[idx].split())) idx += 1 subjects.append(scores) test_cases.append(subjects) return highest_average_score(test_cases) # Wrapper for easier testing def highest_average_score_main(input_data): result = process_input(input_data) return \'n\'.join(f\\"{res:.2f}\\" if res != -1 else \\"-1\\" for res in result)"},{"question":"Write a program to manage a file system that supports the following operations: * mkdir(path): Create a directory at the specified path. * ls(path): List all the directories and files at the specified path. Note that the root directory is \\"/\\", and paths are given in Unix-like fashion with components separated by \\"/\\". The file system initially contains only the root directory. Constraints * 1 ≤ path length ≤ 100 * 1 ≤ number of operations ≤ 10000 Input First line contains an integer n denoting the number of operations. Each of the following n lines contains an operation in one of the following formats: mkdir <path> ls <path> Output For each ls operation, print the contents of the specified directory in lexicographical order, each entry on a new line. Examples Input 6 mkdir /a mkdir /a/b mkdir /c ls / mkdir /a/d ls /a Output a c b d","solution":"class FileSystem: def __init__(self): self.root = {} def mkdir(self, path): components = path.strip(\'/\').split(\'/\') current = self.root for component in components: if component not in current: current[component] = {} current = current[component] def ls(self, path): components = path.strip(\'/\').split(\'/\') current = self.root for component in components: if component: current = current[component] return sorted(current.keys())"},{"question":"Collinear Points # Overview Given three points in a 2D plane, determine if these points are collinear (i.e., they lie on a single straight line). # Task Write a function `areCollinear(x1, y1, x2, y2, x3, y3)` that takes the coordinates of three points as arguments. The function should return `true` if the points are collinear and `false` otherwise. # Example - `areCollinear(1, 2, 2, 4, 3, 6)` returns `true` (points are collinear as they lie on the line y = 2x). - `areCollinear(1, 1, 2, 2, 3, 5)` returns `false` (points are not collinear). # Note To determine if three points (x1, y1), (x2, y2), (x3, y3) are collinear, you can use the concept of the area of the triangle formed by these points. If the area is zero, the points are collinear. The area can be calculated using the determinant method: ``` Area = 0.5 * | x1(y2 - y3) + x2(y3 - y1) + x3(y1 - y2) | ```","solution":"def areCollinear(x1, y1, x2, y2, x3, y3): Determines if three points are collinear in a 2D plane. Args: x1, y1: coordinates of the first point. x2, y2: coordinates of the second point. x3, y3: coordinates of the third point. Returns: True if the points are collinear, False otherwise. # Calculate the area formed by the three points using the determinant method area = 0.5 * abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) # If the area is zero, the points are collinear return area == 0"},{"question":"You are a software developer tasked with organizing large-scale training sessions for multiple regional branches of a company. Each branch operates in a different city, so you need to manage registration and scheduling efficiently. The sessions are fixed-length, and you cannot extend or shorten them. However, you can move sessions between different branches\' time slots if necessary, as long as no two sessions within the same branch overlap. Each branch has a certain number of ongoing training sessions already scheduled. You are given the list of existing sessions, each with its start time and end time, and the number of available rooms per branch that can host simultaneous sessions. Your goal is to determine whether you can fit all the planned sessions into the schedule of each branch without exceeding the room capacity and without overlapping sessions within the same branch. -----Input----- The input starts with an integer b (1 leq b leq 100), the number of branches. For each branch, the input includes: 1. An integer r (1 leq r leq 10), the number of available rooms. 2. An integer e (0 leq e leq 1000), the number of existing sessions. 3. e lines, each with two integers s_i and t_i (0 leq s_i < t_i leq 10000), the start time and end time of an existing session. 4. An integer p (1 leq p leq 1000), the number of planned sessions. 5. p lines, each with two integers s_j and t_j (0 leq s_j < t_j leq 10000), the start time and end time of a planned session. -----Output----- For each branch, output “yes” on a single line if all the planned sessions can be added to the existing schedule within the available rooms without any overlap. Otherwise, output “no”. -----Examples----- Sample Input 1: 2 2 2 1 3 4 6 3 0 2 3 5 6 7 3 1 1 4 2 0 2 3 5 Sample Output 1: yes no Sample Input 2: 1 1 1 0 3 2 4 5 6 7 Sample Output 2: yes","solution":"def can_schedule_all_sessions(branches): results = [] for branch in branches: rooms, existing_sessions, planned_sessions = branch[\'rooms\'], branch[\'existing\'], branch[\'planned\'] all_sessions = existing_sessions + planned_sessions all_sessions.sort() # A list to keep track of end times of sessions in rooms end_times = [0] * rooms feasible = True for session in all_sessions: start, end = session placed = False # Find a room that can accommodate this session for i in range(rooms): if end_times[i] <= start: end_times[i] = end placed = True break if not placed: feasible = False break results.append(\\"yes\\" if feasible else \\"no\\") return results"},{"question":"To participate in a famous cooking competition, chefs need to prepare a signature dish using a specific set of ingredients. Among the available items, some ingredients are special and vital for the dish. A signature dish is considered complete if it includes at least one of each special ingredient. Given the list of ingredients in the kitchen and a list of special ingredients required for the dish, determine if it is possible to prepare the signature dish. ------ Input Format ------ - The first line contains an integer T denoting the number of test cases. The T test cases then follow. - The first line of each test case contains two space-separated integers N and M. - The second line of each test case contains N space-separated strings representing the ingredients in the kitchen. - The third line of each test case contains M space-separated strings representing the special ingredients required for the dish. ------ Output Format ------ For each test case, output \\"YES\\" if the signature dish can be prepared, and \\"NO\\" otherwise. Output is case insensitive, which means that \\"yes\\", \\"Yes\\", \\"YEs\\", \\"no\\", \\"nO\\" - all such strings will be acceptable. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N, M ≤ 1000 - Each ingredient string consists of lowercase alphabetical characters only. - The string length of each ingredient is between 1 and 20. ----- Sample Input 1 ------ 2 5 3 sugar flour eggs butter milk flour eggs milk 4 2 potato tomato onion garlic onion garlic ----- Sample Output 1 ------ YES YES ----- explanation 1 ------ Test case 1: The ingredients in the kitchen include \\"flour\\", \\"eggs\\", and \\"milk\\", which are all the special ingredients required for the dish. Hence, the output is \\"YES\\". Test case 2: The ingredients in the kitchen include \\"onion\\" and \\"garlic\\", which are both the special ingredients required for the dish. Hence, the output is \\"YES\\".","solution":"def can_prepare_signature_dish(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] kitchen_ingredients = set(test_cases[i][1]) special_ingredients = set(test_cases[i][2]) # Check if all special ingredients are in the kitchen ingredients if special_ingredients.issubset(kitchen_ingredients): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Problem statement Given an array of integers, write a function to find the length of the longest subarray that contains at most two distinct integers. The integers do not need to be contiguous but must appear in the given order. Constraints * The length of the array, 1 leq len(arr) leq 10^5 * The elements in the array, -10^9 leq arr[i] leq 10^9 Input An integer n representing the number of elements in the array, followed by n space-separated integers representing the elements of the array. Output An integer representing the length of the longest subarray containing at most two distinct integers. Examples Input 7 1 2 1 3 4 2 3 Output 3 Input 5 1 2 2 1 3 Output 4","solution":"def longest_subarray_with_two_distinct(arr): Finds the length of the longest subarray that contains at most two distinct integers. if not arr: return 0 n = len(arr) left = 0 right = 0 max_length = 0 distinct = {} while right < n: if len(distinct) <= 2: if arr[right] in distinct: distinct[arr[right]] += 1 else: distinct[arr[right]] = 1 right += 1 while len(distinct) > 2: distinct[arr[left]] -= 1 if distinct[arr[left]] == 0: del distinct[arr[left]] left += 1 max_length = max(max_length, right - left) return max_length"},{"question":"Liam loves painting and has a variety of paints at home. He has R red paint cans, G green paint cans, and B blue paint cans to use in his projects. To ensure a visually pleasing result, Liam insists that in any single project he should use an equal number of each color of paint. Liam\'s goal is to conduct as many projects as possible given his current stock of paints. Can you determine the maximum number of projects Liam can complete with his given amount of paints? -----Input----- The first and only line contains three integers R, G, and B (0 le R, G, B le 10^9), representing the number of red, green, and blue paint cans Liam has. -----Output----- Output a single integer – the maximum number of projects Liam can complete. -----Examples----- Sample Input 1: 3 2 2 Sample Output 1: 2 Sample Input 2: 100 200 300 Sample Output 2: 100 Sample Input 3: 0 0 0 Sample Output 3: 0","solution":"def max_projects(R, G, B): Returns the maximum number of projects that can be completed using an equal number of red, green, and blue paints. return min(R, G, B)"},{"question":"Given an integer array representing the heights of blocks in a row, determine how much water would be trapped between these blocks after raining. Each integer in the array represents the height of a block, and the width of each block is 1. You need to implement a function to compute this. The function should return the total amount of trapped water. # Function Signature ```python def trap(height: List[int]) -> int: pass ``` # Input - A single `height` list containing `n` non-negative integers (0 ≤ height[i] ≤ 1000), where 1 ≤ n ≤ 100000. # Output - A single integer representing the total amount of trapped water. # Example Input ```python height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` Output ```python 6 ``` # Explanation The figure below represents how the blocks of height appear, and the numbers on top represent the amount of water trapped over every unit block. ``` | | | || ||| ||||||| ||| ||||||||||| ``` The total amount of trapped water is 6 units.","solution":"from typing import List def trap(height: List[int]) -> int: if not height: return 0 n = len(height) left_max = [0] * n # Create array to store the maximum height to the left of each block right_max = [0] * n # Create array to store the maximum height to the right of each block # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) # Fill right_max array right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) # Calculate the trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water"},{"question":"Write a program to find the longest sequence of consecutive integers that has a sum of a given target value. Your solution should include a function named `longest_sequence(target)` which takes an integer `target` as input and returns a list of consecutive integers whose sum equals `target`. If there are multiple solutions, return the sequence with the smallest starting number. If no such sequence exists, return an empty list. # Examples Example 1 Input: ``` target = 15 ``` Output: ``` [1, 2, 3, 4, 5] ``` Explanation: ``` 1 + 2 + 3 + 4 + 5 = 15 ``` Example 2 Input: ``` target = 10 ``` Output: ``` [1, 2, 3, 4] ``` Explanation: ``` 1 + 2 + 3 + 4 = 10 ``` Example 3 Input: ``` target = 3 ``` Output: ``` [1, 2] ``` Explanation: ``` 1 + 2 = 3 ``` Example 4 Input: ``` target = 5 ``` Output: ``` [2, 3] ``` Explanation: ``` 2 + 3 = 5 ``` # Constraints 1. The function should handle positive and negative integers for `target`. 2. Compute the result efficiently for larger values of `target`, up to `10^5`.","solution":"def longest_sequence(target): Finds the longest sequence of consecutive integers that sum up to a given target. sequence = [] for start in range(1, abs(target) + 1): sum_val = 0 current_sequence = [] for num in range(start, abs(target) + 1): sum_val += num current_sequence.append(num) if sum_val == target: if len(current_sequence) > len(sequence) or not sequence: sequence = current_sequence break elif sum_val > target: break return sequence"},{"question":"Problem Statement You are given a list of airlines operating between various cities. Each airline charges a different fare for a direct flight between a pair of cities. If there is no direct flight between a pair of cities, that route cannot be considered. Your task is to calculate the minimum fare required to travel between two given cities, possibly using a combination of direct flights. # Input The input consists of the following: - An integer `N` (1 ≤ N ≤ 1000), the number of cities. - An integer `M` (1 ≤ M ≤ 10000), the number of direct flights. - The next `M` lines each contain three integers: `u`, `v`, and `w` (1 ≤ u, v ≤ N; 1 ≤ w ≤ 10000), representing a direct flight from city `u` to city `v` with a fare of `w`. - Two integers `A` and `B` (1 ≤ A, B ≤ N), the starting city and the destination city. # Output Output the minimum fare required to travel from city `A` to city `B`. If it is not possible to travel between the two cities, output `-1`. # Sample Input ```plaintext 5 7 1 2 10 1 3 5 2 4 2 3 2 2 3 4 9 4 5 1 2 5 3 1 5 ``` # Sample Output ```plaintext 14 ``` # Explanation In the given example, the optimal route from city 1 to city 5 is through 1 -> 3 -> 2 -> 5 with a total fare of 5 (1 to 3) + 2 (3 to 2) + 3 (2 to 5) = 10. # Constraints - You may assume that a city can have multiple direct flights to another city, in which case you should consider the flight with the minimum fare. - You may use algorithms such as Dijkstra\'s algorithm or Floyd-Warshall Algorithm to find the shortest path.","solution":"import heapq def calculate_min_fare(N, M, flights, A, B): graph = {i: [] for i in range(1, N+1)} for u, v, w in flights: graph[u].append((v, w)) def dijkstra(src, dest): min_heap = [(0, src)] distances = {i: float(\'inf\') for i in range(1, N+1)} distances[src] = 0 while min_heap: current_dist, u = heapq.heappop(min_heap) if u == dest: return current_dist for v, weight in graph[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(min_heap, (distance, v)) return float(\'inf\') min_fare = dijkstra(A, B) return min_fare if min_fare != float(\'inf\') else -1 # Example execution N = 5 M = 7 flights = [ (1, 2, 10), (1, 3, 5), (2, 4, 2), (3, 2, 2), (3, 4, 9), (4, 5, 1), (2, 5, 3) ] A = 1 B = 5 print(calculate_min_fare(N, M, flights, A, B)) # Output should be 10"},{"question":"Claire is a computer science student, and one day in her algorithms class, the professor introduces the concept of matrix multiplication. As homework, the professor asks the students to implement matrix multiplication and determine the trace of the resulting matrix. The trace of a matrix is defined as the sum of the elements on the main diagonal (from the top left to the bottom right). Claire’s homework involves multiplying two square matrices and then computing the trace of the resulting matrix. Given the dimensions and elements of the two matrices, help Claire to complete her homework by providing the trace of the product matrix. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 500), the dimension of the square matrices. The next n lines contain n integers each, representing the elements of the first matrix A. The next n lines contain n integers each, representing the elements of the second matrix B. -----Output----- Output a single integer, the trace of the product matrix A * B. -----Example----- Input 2 1 2 3 4 5 6 7 8 Output 70 Input 3 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 Output 288 -----Note----- In the first test case, the first matrix A is: 1 2 3 4 The second matrix B is: 5 6 7 8 The product matrix A * B is: 1*5 + 2*7 1*6 + 2*8 3*5 + 4*7 3*6 + 4*8 Which evaluates to: 19 22 43 50 The trace of the product matrix is 19 + 50 = 69. Since the inputs are such that matrix multiplication and computing trace involves addition, the trace would be printed as 70. In the second test case, the product matrix has larger dimensions, and the sum of the diagonal elements is 288.","solution":"def multiply_matrices(A, B): Multiplies two square matrices A and B. n = len(A) product = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): for k in range(n): product[i][j] += A[i][k] * B[k][j] return product def trace_of_matrix(matrix): Computes the trace of a square matrix. The trace is the sum of the elements on the main diagonal. n = len(matrix) trace = 0 for i in range(n): trace += matrix[i][i] return trace def matrix_trace(n, matrix_A, matrix_B): Computes the trace of the product of matrices A and B. product_matrix = multiply_matrices(matrix_A, matrix_B) return trace_of_matrix(product_matrix)"},{"question":"A network of servers is represented as a graph. There are N servers, connected by M directed links. Each link has a certain latency associated with it. Your task is to determine the minimum latency required to transfer data from a specified source server to all other servers in the network. If a server is unreachable from the source server, indicate this with an appropriate value. -----Constraints----- - 2 ≦ N ≦ 10^5 - 1 ≦ M ≦ 2*10^5 - 1 ≦ latency of each link ≦ 10^9 - 1 ≦ source server ≦ N -----Input----- The input is given from Standard Input in the following format: N M source u_1 v_1 latency_1 : u_M v_M latency_M -----Output----- Print N integers. The i-th of them should represent the minimum latency required to transfer data from the source server to the i-th server. If the i-th server is unreachable from the source server, print -1. -----Sample Input----- 4 4 1 1 2 1 2 3 1 3 4 1 4 2 1 -----Sample Output----- 0 1 2 3 The minimum latencies from server 1 to servers 1, 2, 3, and 4 are 0, 1, 2, and 3, respectively. Note: To solve this problem, you can use Dijkstra\'s algorithm for finding the shortest path in a graph with non-negative edge weights.","solution":"import heapq def dijkstra(n, m, source, edges): graph = {i: [] for i in range(1, n+1)} for u, v, latency in edges: graph[u].append((latency, v)) # Initialize distances with infinity distances = {i: float(\'inf\') for i in range(1, n+1)} distances[source] = 0 # Priority queue to select the next node with the smallest distance pq = [(0, source)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for edge_latency, neighbor in graph[current_node]: distance = current_distance + edge_latency if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) # Prepare the result list result = [distances[i] if distances[i] != float(\'inf\') else -1 for i in range(1, n+1)] return result def min_latency_to_all_servers(N, M, source, links): edges = [tuple(map(int, link.split())) for link in links] result = dijkstra(N, M, source, edges) return result"},{"question":"Marina is working on a text editing software and she needs your help to implement a new feature. She wants to add the ability to automatically correct the format of a given text string. The text can contain lowercase letters, uppercase letters, spaces, and punctuation marks. The corrected format should satisfy the following conditions: 1. The first character of the text should be uppercase if it is a letter. 2. Each sentence should start with an uppercase letter and end with a period (\'.\'), question mark (\'?\'), or exclamation mark (\'!\'). Sentences should be separated by a single space. 3. Only one space is allowed between words in a sentence. -----Input----- A single line of text containing the string s (1 ≤ |s| ≤ 1000). It is guaranteed that the string contains at least one letter. -----Output----- Print the corrected string following the described rules. -----Examples----- Input hello world! this is a test. Output Hello world! This is a test. Input how are you?i am fine.thanks for asking! Output How are you? I am fine. Thanks for asking! -----Note----- In the first sample, the input string is correctly formatted except for the first letter which needs to be capitalized. In the second sample, sentence separation is missing between \\"you?\\" and \\"i\\", \\"fine.\\" and \\"thanks\\", and additionally, \\"i\\" needs to be capitalized to \\"I\\".","solution":"def correct_text_format(s): Corrects the format of the given text string according to the specified rules. import re # Split the string into sentences sentences = re.split(r\'([.!?])\', s) # Filter out any empty strings that may result from the split sentences = list(filter(None, sentences)) # Join sentences punctuation correctly formatted_sentences = [] # Ensure correct formatting of each sentence for i in range(0, len(sentences), 2): sentence = sentences[i].strip() punctuation = sentences[i + 1] if i + 1 < len(sentences) else \'\' if sentence: sentence = sentence[0].upper() + sentence[1:] formatted_sentences.append(sentence + punctuation) # Join all sentences with a space formatted_text = \' \'.join(formatted_sentences) + \' \' # Remove unnecessary spaces between sentences and words formatted_text = re.sub(r\'s+\', \' \', formatted_text).strip() return formatted_text"},{"question":"Write a function `rotate_string` that takes two inputs: a string `s` and an integer `n`. The function should return a new string where the characters of `s` are rotated to the right by `n` positions. For example: ```python rotate_string(\\"hello\\", 2) => \\"lohel\\" rotate_string(\\"abcdef\\", 4) => \\"cdefab\\" ``` The rotation should be performed using modular arithmetic to handle cases where `n` is greater than the length of the string. If `n` is 0 or `n` is a multiple of the length of `s`, the original string should be returned unchanged. Handling edge cases: - If the input string is empty, the function should return an empty string. - If `n` is negative, treat it as rotating to the left by the absolute value of `n`. Constraints: - The input string `s` will have a length of at most 1000 characters. - The integer `n` will be in the range `-10000` to `10000`.","solution":"def rotate_string(s, n): Rotates the characters of string s to the right by n positions. If n is negative, rotates to the left by abs(n) positions. Parameters: s (str): The input string to be rotated. n (int): The number of positions to rotate the string by. Returns: str: The rotated string. if not s: return \\"\\" length = len(s) n = n % length # Normalize n to be within the length of the string return s[-n:] + s[:-n]"},{"question":"You are given a grid consisting of m rows and n columns. Each cell in the grid can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). You start at the top-left corner of the grid and your goal is to reach the bottom-right corner. You can only move right or down from any cell. However, there\'s a constraint: you are allowed to remove at most one obstacle from the grid before you start moving. Determine if it\'s possible to reach the bottom-right corner from the top-left corner under this constraint. -----Input----- The first line contains two integers m and n (1 leq m, n leq 1000) — the number of rows and columns in the grid. The next m lines contain n characters each, either \'.\' or \'#\', representing the grid. -----Output----- Output \\"Yes\\" (without quotation marks) if it\'s possible to reach the bottom-right corner from the top-left corner by removing at most one obstacle. Otherwise print \\"No\\". You are allowed to print letters in whatever case you\'d like (uppercase or lowercase). -----Examples----- Input 3 3 ..# .#. ... Output Yes Input 3 3 # # # Output No -----Note----- In the first example, you can remove the obstacle at (2, 2) to clear a path from the top-left corner to the bottom-right corner. In the second example, even after removing one obstacle, it\'s impossible to create a path from the top-left corner to the bottom-right corner.","solution":"def can_reach(m, n, grid): def is_path_possible(grid): from collections import deque if grid[0][0] == \'#\': return False directions = [(0, 1), (1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (m-1, n-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return False if is_path_possible(grid): return \\"Yes\\" for i in range(m): for j in range(n): if grid[i][j] == \'#\': grid[i][j] = \'.\' if is_path_possible(grid): return \\"Yes\\" grid[i][j] = \'#\' return \\"No\\""},{"question":"You are given N ropes, each with a certain length. Your task is to connect these ropes into one single rope by connecting two ropes at a time. The cost of connecting two ropes is equal to the sum of their lengths. You need to find the minimum cost to connect all the ropes into one single rope. Input The input consists of multiple datasets. Each dataset is given in the following format: N l1 l2 l3 ... lN N is a positive integer denoting the number of ropes. N is greater than 1 and less than 1000. The next line contains N positive integers separated by spaces, where each integer li (1 ≤ li ≤ 10000) represents the length of the rope. The end of the input is indicated by a line containing a single zero, which is not part of a dataset. Output For each dataset, output a single line containing the minimum cost to connect all the ropes. Example Input 4 4 3 2 6 5 4 2 7 6 9 0 Output 29 62","solution":"import heapq def minimum_cost_to_connect_ropes(rope_lengths): if not rope_lengths: return 0 heapq.heapify(rope_lengths) total_cost = 0 while len(rope_lengths) > 1: first = heapq.heappop(rope_lengths) second = heapq.heappop(rope_lengths) new_rope = first + second total_cost += new_rope heapq.heappush(rope_lengths, new_rope) return total_cost def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") results = [] for i in range(0, len(input_lines), 2): N = int(input_lines[i]) if N == 0: break rope_lengths = list(map(int, input_lines[i + 1].split())) result = minimum_cost_to_connect_ropes(rope_lengths) results.append(result) return results"},{"question":"A wildlife observation team has set up multiple cameras in a forest to monitor animal movements. Each camera records the sequence of animals it captures during the day. The team is particularly interested in finding out whether a specific sequence of animals frequently follows another sequence. To facilitate this, they want you to write a program that can efficiently search for occurrences of one sequence followed by another in the recorded data. You are given an initial list of camera recordings and a series of queries. Each query consists of two sequences: a base sequence and a target sequence. For each query, you need to determine if the base sequence is followed immediately by the target sequence at least once in the recordings. -----Input----- The first line contains two non-negative integers n and q (0 ≤ n ≤ 2·10^5, 0 ≤ q ≤ 2·10^5) — the number of camera recordings and the number of queries, respectively. Next follow n strings that represent the sequences of animals captured by the cameras. Each string is composed of letters from \'a\' to \'z\' representing different animals. Next follow q pairs of strings, each consisting of a base sequence and a target sequence for the queries. The total length of the input strings does not exceed 5·10^5. -----Output----- For each query print on a single line \\"YES\\" (without the quotes), if the base sequence is immediately followed by the target sequence in any of the recordings, otherwise print \\"NO\\" (without the quotes). -----Examples----- Input 2 2 abcde fghij abc de fgh ij Output YES YES","solution":"def analyze_recordings(n, q, recordings, queries): results = [] for base, target in queries: found = any(base + target in recording for recording in recordings) results.append(\\"YES\\" if found else \\"NO\\") return results # Example to see the function in action recordings = [\\"abcde\\", \\"fghij\\"] queries = [(\\"abc\\", \\"de\\"), (\\"fgh\\", \\"ij\\")] n, q = 2, 2 print(analyze_recordings(n, q, recordings, queries)) # Should output [\\"YES\\", \\"YES\\"]"},{"question":"Consider a string consisting of letters \'a\' and \'b\' only. You are tasked with finding the length of the longest substring that consists of no more than m \'b\'s. Input The input consists of two lines. The first line contains an integer m (0 ≤ m ≤ 1000000), which is the maximum number of \'b\'s allowed in the substring. The second line contains a string s (1 ≤ |s| ≤ 10000000) consisting of only \'a\' and \'b\'. Output Output a single integer which is the length of the longest substring that contains no more than m \'b\'s. Example Input: 2 abbaabba Output: 5 Explanation: The longest substring with no more than 2 \'b\'s is \\"abbaa\\" with length 5.","solution":"def longest_substring_with_m_b(m, s): Returns the length of the longest substring that contains no more than m \'b\'s. Parameters: m (int): Maximum number of \'b\'s allowed in the substring. s (str): Input string consisting of \'a\'s and \'b\'s. Returns: int: Length of the longest valid substring. max_length = 0 left = 0 b_count = 0 for right in range(len(s)): if s[right] == \'b\': b_count += 1 while b_count > m: if s[left] == \'b\': b_count -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Max wanted to analyze temperature variations in his city over a period of time, so he installed temperature sensors around the city and collected temperature readings at different times throughout the day. Each reading consists of a timestamp and a temperature value. After collecting the data, Max noticed that there were some temperature spikes, and he wanted to smooth out the data by replacing each temperature reading with the average of its neighboring readings. To achieve this, you are given a list of temperature readings where the i-th element of the list represents the temperature reading at time i. Your task is to create a new list of smoothed temperature readings where each element (except for the first and last element) is the average of the element itself and its two immediate neighbors. Here’s an example: **Input:** You are given a list of temperature readings `temperatures` where `2 ≤ len(temperatures) ≤ 10^5` and `-100 ≤ temperatures[i] ≤ 100` for all `0 ≤ i < len(temperatures)`. **Output:** Return a new list of the same length as `temperatures` where each element (except the first and last element) is replaced by the average of itself and its two immediate neighbors. The first and last elements remain unchanged. **Examples:** **Input:** ``` temperatures = [30, 40, 35, 50, 60, 65] ``` **Output:** ``` [30, 35.0, 41.666666666666664, 48.333333333333336, 58.333333333333336, 65] ``` **Input:** ``` temperatures = [10, 20] ``` **Output:** ``` [10, 20] ``` **Note:** For the first input example, the smoothed temperatures are calculated as follows: - The first temperature remains `30`. - The second temperature is `(30 + 40 + 35) / 3 = 35.0` - The third temperature is `(40 + 35 + 50) / 3 = 41.666666666666664` - The fourth temperature is `(35 + 50 + 60) / 3 = 48.333333333333336` - The fifth temperature is `(50 + 60 + 65) / 3 = 58.333333333333336` - The last temperature remains `65`","solution":"def smooth_temperatures(temperatures): Smooths out temperature readings by replacing each temperature (except the first and last elements) with the average of itself and its two immediate neighbors. if len(temperatures) <= 2: return temperatures new_temperatures = [] new_temperatures.append(temperatures[0]) # The first element remains unchanged for i in range(1, len(temperatures) - 1): new_temp = (temperatures[i - 1] + temperatures[i] + temperatures[i + 1]) / 3 new_temperatures.append(new_temp) new_temperatures.append(temperatures[-1]) # The last element remains unchanged return new_temperatures"},{"question":"You are given an array of integers `nums` and a target integer `target`. Write a function to find two distinct indices `i` and `j` in the array such that `nums[i] + nums[j] = target`. Return the indices as a list `[i, j]`. You may assume that each input would have exactly one solution, and you may not use the same element twice. Input The first line contains an integer `n` (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains `n` integers `nums[i]` (-10^9 ≤ nums[i] ≤ 10^9) — the elements of the array. The third line contains an integer `target` (-10^9 ≤ target ≤ 10^9) — the target sum. Output Print the indices of the two numbers such that they add up to the target. The indices should be returned in sorted order. Examples Input 4 2 7 11 15 9 Output 0 1 Input 3 1 2 3 4 Output 0 2 Note In the first test case, the solution is at indices 0 and 1 because nums[0] + nums[1] = 2 + 7 = 9. In the second test case, the solution is at indices 0 and 2 because nums[0] + nums[2] = 1 + 3 = 4.","solution":"def two_sum(nums, target): Given an array of integers `nums` and an integer `target`, find the indices of two elements in `nums` such that their sum equals `target`. Return the indices as a list in sorted order. Params: - nums (List[int]): List of integers. - target (int): The target sum. Returns: - List[int]: Indices of the two elements. seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return sorted([seen[complement], i]) seen[num] = i"},{"question":"Given a sentence, determine if the sentence is a **Pangram**. A pangram is a sentence that contains every single letter of the alphabet at least once. For example, \\"The quick brown fox jumps over the lazy dog\\" is a pangram. ```if:python Complete the function `is_pangram()` that will check if a provided sentence is a pangram. The function should return `True` if the sentence is a pangram, and `False` otherwise. ``` ```if-not:python Complete the function `isPangram()` that will check if a provided sentence is a pangram. The function should return `true` if the sentence is a pangram, and `false` otherwise. ``` Examples ```if:python ~~~py is_pangram(\\"The quick brown fox jumps over the lazy dog\\") == True is_pangram(\\"Hello World\\") == False ~~~ ``` ```if-not:python ~~~js isPangram(\\"The quick brown fox jumps over the lazy dog\\") == true isPangram(\\"Hello World\\") == false ~~~ ```","solution":"def is_pangram(sentence): Returns True if the sentence is a pangram, False otherwise. alphabet = set(\\"abcdefghijklmnopqrstuvwxyz\\") sentence_letters = set(sentence.lower()) return alphabet.issubset(sentence_letters)"},{"question":"A subsequence of a string is a sequence that can be derived from the string by deleting some or no elements without changing the order of the remaining elements. Alice has a string S consisting of lowercase alphabets and she is particularly fond of subsequences that are themselves palindromes. She wonders how many distinct palindromic subsequences are present in the string S. Input:- The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S. Output:- For each test case, print the number of distinct palindromic subsequences. SAMPLE INPUT 2 abc aaa SAMPLE OUTPUT 3 3 Explanation For the first testcase: The possible palindromic subsequences are [\'a\', \'b\', \'c\'], hence the answer is 3. For the second testcase: The possible palindromic subsequences are [\'a\', \'aa\', \'aaa\'], hence the answer is 3.","solution":"def count_distinct_palindromic_subsequences(S): Given a string S, count the number of distinct palindromic subsequences. from collections import defaultdict mod = 10**9 + 7 n = len(S) dp = [[0] * n for _ in range(n)] next_pos = [[0] * n for _ in range(26)] prev_pos = [[0] * n for _ in range(26)] # Initialize next_pos and prev_pos arrays last_occurrence = [-1] * 26 for i in range(n): for j in range(26): prev_pos[j][i] = last_occurrence[j] last_occurrence[ord(S[i]) - ord(\'a\')] = i last_occurrence = [n] * 26 for i in range(n-1, -1, -1): for j in range(26): next_pos[j][i] = last_occurrence[j] last_occurrence[ord(S[i]) - ord(\'a\')] = i for length in range(1, n + 1): for i in range(n - length + 1): j = i + length - 1 if length == 1: dp[i][j] = 1 else: if S[i] == S[j]: low = next_pos[ord(S[i]) - ord(\'a\')][i] high = prev_pos[ord(S[j]) - ord(\'a\')][j] if low > high: dp[i][j] = dp[i+1][j-1] * 2 + 2 elif low == high: dp[i][j] = dp[i+1][j-1] * 2 + 1 else: dp[i][j] = dp[i+1][j-1] * 2 - dp[low+1][high-1] else: dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1] dp[i][j] = (dp[i][j] + mod) % mod return dp[0][n-1] def solve_palindromic_subsequences(T, test_cases): results = [] for case in test_cases: results.append(count_distinct_palindromic_subsequences(case)) return results"},{"question":"Write a function `rotate_array` that takes an array and an integer `k`, and rotates the array to the right by `k` steps. For example, if the array is `[1, 2, 3, 4, 5, 6, 7]` and `k` is 3, the result should be `[5, 6, 7, 1, 2, 3, 4]`. The function should handle cases where `k` is greater than the length of the array.","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. Parameters: arr (list): the list to be rotated. k (int): the number of steps to rotate the array. Returns: list: the rotated list. n = len(arr) # Handle cases where k is greater than the length of the array. k = k % n if n > 0 else 0 return arr[-k:] + arr[:-k]"},{"question":"You are given a list of integers `nums` and a target integer `target`. Your task is to determine if there exist four elements in the list whose sum is equal to `target`. Write a function that takes a list of integers and their target sum, and returns all unique quadruplets `[nums[a], nums[b], nums[c], nums[d]]` such that: - 0 ≤ a, b, c, d < len(nums) - a, b, c, and d are distinct indices. - The sum of `nums[a]`, `nums[b]`, `nums[c]`, and `nums[d]` is equal to `target`. The order of the quadruplets does not matter, but the elements inside a quadruplet should be in non-descending order. It is also guaranteed that nums contains at most one hundred elements. # Input - An integer `n` (1 ≤ n ≤ 100) — the number of elements in the list. - A list of `n` integers. - An integer `target`. # Output - A list of unique quadruplets where each quadruplet is a list of four integers. # Example Input: ``` 6 1 0 -1 0 -2 2 0 ``` Output: ``` [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] ``` Input: ``` 7 2 2 2 2 2 2 2 8 ``` Output: ``` [[2, 2, 2, 2]] ```","solution":"def four_sum(nums, target): nums.sort() result = [] n = len(nums) for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, n - 1 while left < right: sum_ = nums[i] + nums[j] + nums[left] + nums[right] if sum_ == target: result.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif sum_ < target: left += 1 else: right -= 1 return result"},{"question":"Samantha is designing a secure encryption system and she wants to test it with various secret keys. She needs your help to generate the secure keys. The secret key for each test case is determined by the product of the digits of a number n raised to the power m. Input: The first line contains t, the number of test cases. After that, t lines follow each containing a pair of space-separated integers i.e. n and m. Output: For each test case, you need to print the product of the digits of n^m. Constraints: 1 ≤ t ≤ 10000 1 ≤ n ≤ 50 1 ≤ m ≤ 500 SAMPLE INPUT 3 2 5 6 3 3 7 SAMPLE OUTPUT 3 8 0 Explanation Consider the first test case. 2^5 = 32 Now, 3 * 2 = 6 So, output for this test case is 6. For the second test case, 6^3 = 216 Now, 2 * 1 * 6 = 12 So, output for this test case is 12. For the third test case, 3^7 = 2187 Now, 2 * 1 * 8 * 7 = 112 So, output for this test case is 112.","solution":"def product_of_digits(n, m): Returns the product of digits of n^m. number = n ** m product = 1 for digit in str(number): product *= int(digit) return product def generate_keys(test_cases): Processes each test case and returns the product of digits of n^m. test_cases: a list of tuples (n, m) results = [] for n, m in test_cases: result = product_of_digits(n, m) results.append(result) return results"},{"question":"Given a string s and a set of dictionary words, determine if s can be segmented into a space-separated sequence of one or more dictionary words. If such a segmentation exists, return true; otherwise, return false. -----Constraints----- - The input string s is non-empty and consists of lowercase English letters. - The dictionary set contains 1 to 1000 words. - The length of each word in the dictionary is between 1 and 100. - The length of s does not exceed 10^5. -----Input----- The input is given from Standard Input in the following format: s n word1 word2 ... wordn (s is the string to be segmented, n is the number of words in the dictionary, followed by n words.) -----Output----- Output a single word: `true` if s can be segmented using the dictionary words, otherwise `false`. -----Sample Input----- leetcode 5 leet code le et c -----Sample Output----- true","solution":"def word_break(s, word_dict): Determine if s can be segmented into a space-separated sequence of one or more dictionary words. :param s: The input string. :param word_dict: The set of dictionary words. :return: True if s can be segmented, False otherwise. word_set = set(word_dict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)] # Function to process input and return the result for word breaking problem def process_input(input_string): lines = input_string.strip().split(\'n\') s = lines[0] n = int(lines[1]) word_dict = lines[2:2+n] return word_break(s, word_dict)"},{"question":"You are organizing a digital queue management system for an event. The system needs to manage the arrival and handling of attendees sequentially while providing optimal service to maintain a smooth operation. You have to simulate the queue using an array as a circular buffer. # Circumstances - There are N attendees arriving at the event and they are handled one by one in the order they arrive. - The system uses a circular buffer to manage the queue with a fixed size K. - When an attendee is handled, they leave the queue and the next attendee in line is processed. # Task You need to write a program that simulates this circular queue and outputs the order in which the attendees are handled. # Input The input consists of two lines: 1. The first line contains two space-separated integers N and K (1 leq N leq 1000, 1 leq K leq 1000) representing the number of attendees and the size of the circular buffer respectively. 2. The second line contains N space-separated integers representing the IDs of the attendees in the order they arrive. # Output Output a single line of N space-separated integers representing the order in which the attendees are handled. # Example Sample Input 1: ``` 7 3 1 2 3 4 5 6 7 ``` Sample Output 1: ``` 1 2 3 4 5 6 7 ``` Sample Input 2: ``` 10 4 101 102 103 104 105 106 107 108 109 110 ``` Sample Output 2: ``` 101 102 103 104 105 106 107 108 109 110 ``` # Explanation In Sample Input 1, the buffer size is 3, meaning the system handles the first 3 attendees initially. As each attendee is handled, the next one in line enters the buffer. This process continues until all attendees have been handled. The output indicates the order of handling matches their arrival order. Similarly for Sample Input 2, the buffer can hold 4 attendees at a time, ensuring continuous handling of arriving attendees in their order. # Note - The circular buffer effectively ensures that every attendee is processed in their arrival order without dropping or skipping any individual. The buffer helps manage the sequence efficiently to maintain optimal service.","solution":"def process_attendees(N, K, attendees): order = [] buffer = attendees[:K] pointer = 0 for _ in range(N): # Process the current attendee attendee = buffer[pointer % K] order.append(attendee) # Move the buffer window if there are still attendees left if K + pointer < N: buffer[pointer % K] = attendees[K + pointer] pointer += 1 return order"},{"question":"You are given an array of integers representing the heights of buildings in a row. The sun rises from the left side of the row and sets on the right side. A building can see the sun if there are no taller buildings to its left. Write a function that counts the number of buildings that can see the sun. -----Input----- - A single line containing an integer n (1 ≤ n ≤ 100) — the number of buildings. - A second line containing n integers h1, h2, ..., hn (1 ≤ hi ≤ 100) — the heights of the buildings. -----Output----- - Print a single integer representing the number of buildings that can see the sun. -----Examples----- Input 5 3 7 8 3 6 Output 3 Input 4 1 2 3 4 Output 4 -----Note----- In the first example, buildings with heights of 3, 7, and 8 can see the sun as no taller building is in front of them to block the sunlight. In the second example, all buildings can see the sun, as each building is taller than the one before it.","solution":"def count_buildings_with_sunlight(n, heights): Counts the number of buildings that can see the sun. Parameters: n (int): The number of buildings. heights (list of int): The heights of the buildings. Returns: int: The number of buildings that can see the sun. count = 0 max_height = 0 for height in heights: if height > max_height: count += 1 max_height = height return count # Example usage: # n = 5 # heights = [3, 7, 8, 3, 6] # print(count_buildings_with_sunlight(n, heights)) # Output: 3"},{"question":"You are given a rectangular grid of size `N x M`. Some of the cells in the grid are blocked, and the rest are free to walk. You can move up, down, left or right from a cell, but you cannot move through the blocked cells. You need to determine the minimum number of moves required to get from the top-left corner of the grid `(1, 1)` to the bottom-right corner `(N, M)`. If it\'s not possible to reach the bottom-right corner, return `-1`. ------ Input Format ------ - The first line contains an integer T - the number of test cases. - The first line of each test case contains two integers N and M - the dimensions of the grid. - The next N lines each contain M characters - representing the grid. A cell can be either \'.\' (free) or \'#\' (blocked). ------ Output Format ------ For each test case, print the minimum number of moves required, or -1 if it\'s not possible to reach the bottom-right corner of the grid. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N, M ≤ 1000 ------ Sample Input 1 ------ 2 3 3 ... .#. ... 3 3 .#. .#. .#. ------ Sample Output 1 ------ 4 -1 ------ Explanation 1 ------ Test case 1: One of the possible paths is `[(1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3)]` which takes 4 moves. Test case 2: It is not possible to reach the bottom-right corner from the top-left corner, thus the answer is -1.","solution":"from collections import deque def min_moves_to_reach_end(grid): N = len(grid) M = len(grid[0]) if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * M for _ in range(N)] queue = deque([(0, 0, 0)]) # (row, col, moves) visited[0][0] = True while queue: r, c, moves = queue.popleft() if r == N-1 and c == M-1: return moves for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and not visited[nr][nc] and grid[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, moves + 1)) return -1 def min_moves_from_test_cases(T, test_cases): results = [] for case in test_cases: N, M, grid = case results.append(min_moves_to_reach_end(grid)) return results"},{"question":"Write a function that takes a string composed of parentheses ( `()` ) and returns `True` if the parentheses are properly balanced and `False` otherwise. A string of parentheses is considered balanced if: - Every opening parenthesis has a corresponding closing parenthesis. - The pairs of parentheses are properly nested. For example: - `()()` is balanced - `(())` is balanced - `(()` is not balanced - `())(` is not balanced You can find some examples in the test fixtures.","solution":"def is_balanced_parentheses(s): Returns True if the string of parentheses is balanced, otherwise False. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"Jane is an avid chess player who is participating in an international chess competition. She noticed a pattern in the number of distinct ways to arrange a set of N queens on an N x N chessboard so that no two queens can attack each other. Your task is to write a program that calculates the number of valid queen arrangements for a given N. A queen can attack another queen if they are on the same row, column, or diagonal. This problem is famously known as the N-Queens problem. Write a program that receives an integer N and outputs the number of ways to arrange N queens on an N x N chessboard such that no two queens attack each other. Input The input consists of a single integer N (1 ≤ N ≤ 15). Output Output a single integer representing the number of distinct arrangements of N queens on an N x N chessboard. Examples Input 4 Output 2 Input 1 Output 1","solution":"def is_safe(board, row, col): # Check this row on left side for i in range(col): if board[row][i] == 1: return False # Check upper diagonal on left side for i, j in zip(range(row, -1, -1), range(col, -1, -1)): if board[i][j] == 1: return False # Check lower diagonal on left side for i, j in zip(range(row, len(board)), range(col, -1, -1)): if board[i][j] == 1: return False return True def solve_n_queens(board, col, count): if col >= len(board): return count + 1 for i in range(len(board)): if is_safe(board, i, col): board[i][col] = 1 count = solve_n_queens(board, col + 1, count) board[i][col] = 0 # BACKTRACK return count def n_queens(N): board = [[0 for _ in range(N)] for _ in range(N)] return solve_n_queens(board, 0, 0)"},{"question":"You are given a string s representing a list of words separated by spaces and a list of query strings queries. Return a list of integers where each integer represents the number of times the corresponding query string appears as a whole word, independent of capitalization, in the string s. A whole word matches with a query string if it is directly surrounded by spaces or it is at the starting or ending of the string. # Example: Input: s = \\"Hello world! Hello everyone. Welcome to the world of programming.\\" queries = [\\"hello\\", \\"world\\", \\"everyone\\", \\"python\\"] Output: [2, 2, 1, 0] Explanation: 1. \\"hello\\" -> appears 2 times as \\"Hello\\" (case insensitive). 2. \\"world\\" -> appears 2 times. 3. \\"everyone\\" -> appears 1 time. 4. \\"python\\" -> appears 0 times. # Constraints: - 1 <= len(s) <= 10^5 - 1 <= len(queries) <= 10^3 - Each query and word in the input string will consist of only lowercase English letters, uppercase English letters, spaces, and punctuation. - Case should be ignored while matching query words.","solution":"import re def count_query_occurrences(s, queries): Counts the occurrence of each query in the string s, ignoring capitalization. Parameters: s (str): The input string to search within. queries (list): A list of query strings to search for in the string s. Returns: list: A list of integers representing the count of each query in string s. # Convert the string to lowercase to make the search case insensitive. s_lower = s.lower() # Create a list of counts for each query. counts = [] for query in queries: # Convert query to lowercase. query_lower = query.lower() # Find all whole word matches for the query using a regular expression. matches = re.findall(r\'b\' + re.escape(query_lower) + r\'b\', s_lower) # Count the matches and add to the counts list. counts.append(len(matches)) return counts"},{"question":"A string S is considered balanced if the number of opening brackets (\'(\') equals the number of closing brackets (\')\') and they are correctly nested. For example, \\"()\\" and \\"(())\\" are balanced, but \\"(()\\" and \\")(\\" are not. Given a string, you need to determine whether it is balanced or not. Input Format: The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S consisting of \'(\' and \')\'. Output Format: For each test case, print \\"YES\\" if the string is balanced, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ length of S ≤ 1000 SAMPLE INPUT 3 () (() ()) SAMPLE OUTPUT YES NO YES","solution":"def is_balanced(s): This function checks if a string of parentheses is balanced or not. A string is considered balanced if the number of opening brackets \'(\' equals the number of closing brackets \')\' and they are correctly nested. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() if stack: return \\"NO\\" return \\"YES\\" def check_balanced_brackets(test_cases): Given a list of test case strings, returns a list with \\"YES\\" or \\"NO\\" for each string based on whether it\'s balanced or not. results = [] for s in test_cases: results.append(is_balanced(s)) return results"},{"question":"Create a function numeric_palindrome(n) that returns the largest numeric palindrome less than n. A numeric palindrome is a number that reads the same backward as forward. The input n is guaranteed to be a positive integer greater than 9. ``` numeric_palindrome(123) should return: 121 numeric_palindrome(10) should return: 9 numeric_palindrome(15751) should return: 15651 ``` The function needs to find the largest numeric palindrome which is strictly less than the provided integer. For instance: ``` numeric_palindrome(123) will result in: From 122 to 100: Check 122, 121 (is a palindrome), return 121 numeric_palindrome(10) will result in: From 9 downwards as quickly as possible: return 9 directly since 9 is the first and largest single-digit palindrome less than 10 numeric_palindrome(15751) will result in: From 15750 to 10000: Check through numbers... 15651 (is a palindrome), return 15651 ``` Make sure to optimize the operation such that palindrome searching doesn\'t consume unnecessary time for larger values of n. Good luck and have fun coding!","solution":"def numeric_palindrome(n): Returns the largest numeric palindrome less than n. # Start from n-1 and go downwards for x in range(n - 1, 9, -1): if str(x) == str(x)[::-1]: return x return 9 # Since the input is guaranteed to be greater than 9, reaching this point means n <= 10 # Example Usage print(numeric_palindrome(123)) # 121 print(numeric_palindrome(10)) # 9 print(numeric_palindrome(15751)) # 15651"},{"question":"Given a singly linked list, write a function to detect a loop in the list. If there is a loop, return true, otherwise, return false. A loop in a linked list means that some node in the list points back to one of the previous nodes, hence creating a loop. Example 1: Input: head = [3, 2, 0, -4], pos = 1 Output: True Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed). Example 2: Input: head = [1, 2], pos = 0 Output: True Explanation: There is a cycle in the linked list, where the tail connects to the 0th node. Example 3: Input: head = [1], pos = -1 Output: False Explanation: There is no cycle in the linked list. Your Task: You don\'t need to read input or print anything. You need to implement the function detectLoop() which takes the head of the linked list as input and returns a boolean value indicating whether the linked list contains a loop. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ Number of nodes ≤ 10^4 -10^5 ≤ Node value ≤ 10^5","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detectLoop(head): Detect whether a cycle exists in a linked list. Parameters: head (ListNode): The head of the linked list. Returns: bool: True if there is a cycle, False otherwise. slow = head fast = head while fast is not None and fast.next is not None: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Luna is a forest ranger who wants to ensure that the wildlife in her designated area of the forest remains undisturbed. A major disturbance in the region is caused by unauthorized vehicles that sometimes enter the forest. Vehicles can enter at various points along the forest boundary, which is represented as a rectangular grid. Luna wants to install barriers to block these entry points. She has a list of coordinates on the grid where vehicles have been spotted entering the forest. Each spot needs to be covered by at least one barrier. Each barrier is a straight line segment either horizontally or vertically aligned with the grid edges. The task is to determine the minimum number of barriers needed to cover all the entry points. Input First line will contain an integer t - number of test cases. In each test case- First line will contain two integers W and H - the width and height of the forest grid. Second line will contain an integer N - number of entry points. Next N lines will contain two space-separated integers Xi and Yi - coordinates of the entry points. Output For each test case, output the minimum number of barriers required to cover all the entry points. Constraints: 1 ≤ t ≤ 5 1 ≤ W, H ≤ 500 1 ≤ N ≤ 1000 0 ≤ Xi ≤ W 0 ≤ Yi ≤ H SAMPLE INPUT 2 5 5 4 1 1 1 3 4 3 4 1 10 10 3 2 2 8 8 5 5 SAMPLE OUTPUT 2 3","solution":"def min_barriers(t, cases): results = [] for case in cases: W, H, N, points = case unique_x = set() unique_y = set() for x, y in points: unique_x.add(x) unique_y.add(y) results.append(min(len(unique_x), len(unique_y))) return results"},{"question":"In a distant land named Numland, there is a famous town called Numville. This town is well-known for its perfectly sorted array of integers. Numville has exactly n unique integers sorted in non-decreasing order. However, the town has recently become a popular tourist destination, attracting many visitors who bring their own peculiar requests. One day, a visitor named Rico came to Numville and presented a challenge. He wants to find an integer x in the array such that the sum of absolute differences between x and all integers in the array is minimized. If there are multiple such integers, Rico wants to know the smallest one. An array a is given, and you need to find the integer x for which the sum of absolute differences between x and all elements in the array is minimized. If such x is not unique, return the smallest one. Input The first line contains an integer n — the number of elements in the array (1 ≤ n ≤ 10^5). The second line contains n space-separated integers a1, a2, ..., an — the elements of the array (1 ≤ ai ≤ 10^9). The array is sorted in non-decreasing order. Output Print a single integer x — the integer minimizing the sum of absolute differences between x and all elements in the array. If such x is not unique, print the smallest one. Examples Input 5 1 2 3 4 5 Output 3 Input 4 1 2 2 2 Output 2 Input 3 3 6 9 Output 6 Note In the first example, choosing x as 3 gives the smallest sum of absolute differences: |3-1| + |3-2| + |3-3| + |3-4| + |3-5| = 2 + 1 + 0 + 1 + 2 = 6, which is minimized. In the second example, choosing x as 2 gives the smallest sum of absolute differences as it appears the most frequently in the middle of the array. In the third example, choosing x as 6 gives the smallest sum of absolute differences: |6-3| + |6-6| + |6-9| = 3 + 0 + 3 = 6.","solution":"def minimize_sum_of_absolute_differences(n, arr): Find the integer x in the array such that the sum of absolute differences between x and all integers in the array is minimized. If there are multiple such integers, return the smallest one. :param n: integer, number of elements in the array :param arr: list of integers, the sorted array :return: integer, the value of x that minimizes the sum of absolute differences # The median of the array minimizes the sum of absolute differences. # If n is even, the first element of the middle two elements is selected. if n % 2 == 1: return arr[n // 2] else: return arr[n // 2 - 1]"},{"question":"Problem Statement You are given an integer array `nums`. Initially, the array is empty. You will perform a series of `n` operations to add integers to the array and then calculate the median of the array after all operations. The median is defined as follows: * If the array has an odd number of elements, the median is the middle element. * If the array has an even number of elements, the median is the average of the two middle elements. Write a function to determine the median after all operations. Constraints * 1 ≤ n ≤ 10^3 * 1 ≤ nums[i] ≤ 10^5 Input The input consists of two lines. The first line contains the integer `n`, the number of operations. The second line contains `n` space-separated integers representing the elements to be added to the array in order. Output Output the median of the array after all operations, rounded to one decimal place if necessary. Examples Input 5 3 1 2 5 4 Output 3 Input 4 5 2 1 3 Output 2.5 Input 3 7 7 7 Output 7","solution":"def calculate_median(n, nums): Returns the median of the array after all operations. nums.sort() if n % 2 == 1: return float(nums[n // 2]) else: mid1 = nums[n//2 - 1] mid2 = nums[n//2] return (mid1 + mid2) / 2 # Example usage: # n = 5 # nums = [3, 1, 2, 5, 4] # calculate_median(n, nums) => 3.0"},{"question":"# Challenge: Train Timetable Generator Problem Statement As a system developer for a railway company, you are tasked with generating a daily train timetable. The timetable needs to ensure that no two trains arrive or depart at the same time on the same track. Given the schedule constraints and available tracks, your goal is to generate a feasible timetable or indicate if it\'s impossible to do so. Constraints - You will be provided with the arrival and departure times of a set of trains. - Each train arrives at and departs from a specific track. - Ensure no two trains are scheduled for the same track at the same time. Input - An integer `n` representing the number of trains. - A list of `n` tuples, where each tuple contains: - An integer `track` (the track number the train uses). - A string `arrival_time` (formatted as \\"HH:MM\\", the time the train arrives). - A string `departure_time` (formatted as \\"HH:MM\\", the time the train departs). Output A list of tuples: - Each tuple contains the train index (starting from 1) and its assigned time slot in the format `\\"(Train i) [arrival_time - departure_time]\\"`. - If scheduling all trains without conflicts is impossible, return a string \\"Scheduling Impossible\\". Function Signature ```python def generate_timetable(n: int, schedule: List[Tuple[int, str, str]]) -> Union[List[str], str]: pass ``` Example Input: ```python n = 3 schedule = [(1, \\"09:00\\", \\"09:45\\"), (1, \\"09:30\\", \\"10:30\\"), (2, \\"09:00\\", \\"09:30\\")] ``` Output: ```python [ \\"(Train 1) [09:00 - 09:45]\\", \\"(Train 2) [09:30 - 10:30]\\", \\"(Train 3) [09:00 - 09:30]\\" ] ``` Input: ```python n = 3 schedule = [(1, \\"09:00\\", \\"09:45\\"), (1, \\"09:00\\", \\"10:00\\"), (2, \\"09:00\\", \\"09:30\\")] ``` Output: ```python \\"Scheduling Impossible\\" ``` Notes - Assume the input times are all valid and follow a 24-hour format. - The tracks are numbered starting from 1. - The task requires you to ensure there are no overlaps for the same track. - Use logical comparison of time strings to enforce scheduling constraints.","solution":"from typing import List, Tuple, Union def generate_timetable(n: int, schedule: List[Tuple[int, str, str]]) -> Union[List[str], str]: Generates a feasible daily train timetable ensuring no conflict on the same track. Args: n (int): The number of trains. schedule (List[Tuple[int, str, str]]): A list of tuples where each tuple contains: - track (int): The track number the train uses - arrival_time (str): Time the train arrives in HH:MM format - departure_time (str): Time the train departs in HH:MM format Returns: Union[List[str], str]: A list of formatted time-table strings or \\"Scheduling Impossible\\" times = {} # Dictionary to hold track-wise train schedules for idx, (track, arrival, departure) in enumerate(schedule): if track not in times: times[track] = [] times[track].append((arrival, departure, idx + 1)) # Add train with its index starting from 1 final_schedule = [] for track, intervals in times.items(): # Sort the intervals by arrival times to check for any overlaps intervals.sort(key=lambda x: x[0]) for i in range(1, len(intervals)): if intervals[i][0] < intervals[i-1][1]: # If there\'s an overlap return \\"Scheduling Impossible\\" # Append valid intervals to the final schedule for interval in intervals: arrival, departure, train_number = interval final_schedule.append(f\\"(Train {train_number}) [{arrival} - {departure}]\\") return final_schedule"},{"question":"You are given a directed graph with N vertices and M edges, where each vertex is numbered from 1 to N. Each edge has a direction and a weight. You are required to find the shortest path from a given source vertex S to a given destination vertex D. The graph may contain both positive and negative edge weights, but it will not contain any negative weight cycles. Your task is to write a function that calculates the shortest path distance from the source vertex S to the destination vertex D for each test case. If no path exists, return -1. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - For each test case, the first line contains three integers N (number of vertices), M (number of edges), and S (source vertex). - The second line contains one integer D (destination vertex). - Each of the next M lines contains three integers u, v, and w, indicating there is an edge from vertex u to vertex v with weight w. ------ Output Format ------ For each test case, output a single line containing the shortest path distance from S to D. If no path exists, output -1. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{3} 1 ≤ M ≤ 10^{4} -10^3 ≤ w ≤ 10^3 1 ≤ S, D ≤ N 1 ≤ u, v ≤ N ------ Sample Input 1 ------ 2 5 6 1 5 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 4 5 2 1 4 1 2 3 -2 3 4 3 ------ Sample Output 1 ------ 6 1","solution":"import heapq import sys def dijkstra_shortest_path(N, S, edges, D): graph = [[] for _ in range(N + 1)] for u, v, w in edges: graph[u].append((v, w)) distances = [float(\'inf\')] * (N + 1) distances[S] = 0 pq = [(0, S)] while pq: current_distance, current_vertex = heapq.heappop(pq) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[D] if distances[D] != float(\'inf\') else -1 def solve_shortest_path_problem(T, test_cases): results = [] for case in test_cases: N, M, S = case[\'N\'], case[\'M\'], case[\'S\'] D = case[\'D\'] edges = case[\'edges\'] result = dijkstra_shortest_path(N, S, edges, D) results.append(result) return results # Example usage example_input = [ { \'N\': 5, \'M\': 6, \'S\': 1, \'D\': 5, \'edges\': [ (1, 2, 2), (1, 3, 4), (2, 3, 1), (2, 4, 7), (3, 5, 3), (4, 5, 1), ] }, { \'N\': 4, \'M\': 2, \'S\': 1, \'D\': 2, \'edges\': [ (2, 3, -2), (3, 4, 3), ] } ] solve_shortest_path_problem(2, example_input)"},{"question":"Given a string `S` consisting only of digits, you are allowed to convert the digits into words by mapping each digit to its corresponding alphabetical word (0 for zero, 1 for one, ..., 9 for nine). You need to determine the minimum number of words required such that by concatenating them in any order, you can form the original string `S`. However, there\'s an additional constraint: you cannot reuse any digit from the original string more than once to form a word. If it\'s not possible to form the original string with any combination of words, return -1. For example, given the input string `S = \\"1234\\"`, the minimal words required are [\\"one\\", \\"two\\", \\"three\\", \\"four\\"] or [\\"four\\", \\"one\\", \\"three\\", \\"two\\"], both of which can be concatenated to form \\"1234\\". ----Input----- The input consists of a single string `S` (1 ≤ |S| ≤ 100), the original string composed solely of numeric digits (0-9). ----Output----- Print a single integer representing the minimum number of words needed to reconstruct the original string, or -1 if it\'s not possible. ----Examples---- Input 12345 Output 5 Input 2323 Output 4 Input 001 Output -1 ----Note---- In the first example, the result is 5 because each digit can be directly mapped to its corresponding word without any digit being reused. In the second example, each digit needs to be uniquely mapped, resulting in a total of 4 words such as [\\"two\\", \\"three\\", \\"two\\", \\"three\\"]. In the third example, it is impossible to map \\"001\\" to words since \\"zero\\" would be reused, hence the output is -1.","solution":"def min_words_required(S): Given a string S, determines the minimum number of words required to reconstruct the string by mapping digits to their corresponding words (\'zero\', \'one\', ..., \'nine\'). Returns -1 if not possible. digit_to_word = { \'0\': \'zero\', \'1\': \'one\', \'2\': \'two\', \'3\': \'three\', \'4\': \'four\', \'5\': \'five\', \'6\': \'six\', \'7\': \'seven\', \'8\': \'eight\', \'9\': \'nine\' } words_formed = [] for char in S: words_formed.append(digit_to_word[char]) if len(words_formed) != len(S): return -1 return len(words_formed)"},{"question":"# Widget Assembler You\'re working on an assembly line that produces rectangular widgets. Each widget is created by combining smaller rectangular components. The assembly line receives a blueprint for each widget indicating the sequence of assembly operations needed to construct the final product. A blueprint consists of a list of operations. Each operation specifies the dimensions of a component to be added, and the row and column indices where the top-left corner of the component should be placed on the widget. Write a function `assemble_widget(widget_height: int, widget_width: int, operations: List[Tuple[int, int, int, int]]) -> List[List[int]]` that takes the height and width of the final widget, and a list of operations, and returns a 2D list representing the assembled widget. Each component in the operations list is represented as a tuple `(h, w, r, c)`, where `h` and `w` are the height and width of the component, and `r` and `c` are the row and column indices for the top-left corner of the component on the widget. The components are numbered starting from 1, based on the order they appear in the operations list. For example: ```python operations = [ (2, 3, 0, 0), (2, 2, 1, 3), (1, 4, 2, 1) ] ``` Will produce a widget that looks like: ```python [ [1, 1, 1, 0, 0], [1, 1, 1, 2, 2], [0, 3, 3, 3, 3] ] ``` **Conditions:** - Components will always fit within the widget dimensions. - Assign each component a unique integer, starting from 1, in the order they appear in the operations list. - There is no overlap between different components. # Function Specification ```python def assemble_widget(widget_height: int, widget_width: int, operations: List[Tuple[int, int, int, int]]) -> List[List[int]]: pass ``` # Example Input: ```python widget_height = 3 widget_width = 5 operations = [ (2, 3, 0, 0), (2, 2, 1, 3), (1, 4, 2, 1) ] ``` Output: ```python [ [1, 1, 1, 0, 0], [1, 1, 1, 2, 2], [0, 3, 3, 3, 3] ] ```","solution":"from typing import List, Tuple def assemble_widget(widget_height: int, widget_width: int, operations: List[Tuple[int, int, int, int]]) -> List[List[int]]: widget = [[0 for _ in range(widget_width)] for _ in range(widget_height)] for index, (h, w, r, c) in enumerate(operations): component_id = index + 1 for i in range(h): for j in range(w): widget[r + i][c + j] = component_id return widget"},{"question":"Implement a function to find the number of ways to paint a fence with `n` posts using `k` different colors such that no more than two adjacent fence posts have the same color. # Input - A single line containing two integers `n` and `k` (1 leq n leq 5000, 1 leq k leq 1000). # Output - Output the number of ways to paint the fence modulo 10^9 + 7. # Examples Input ``` 3 2 ``` Output ``` 6 ``` Input ``` 4 3 ``` Output ``` 66 ``` # Explanation In the first example, you have 3 posts and 2 colors. - For the first post, you have 2 options (choose from any of the 2 colors). - For the second post, you have also 2 options, but you must ensure that it doesn\'t result in more than two adjacent posts of the same color. The valid combinations are: ``` 1. 1 1 2 2. 1 2 1 3. 1 2 2 4. 2 2 1 5. 2 1 1 6. 2 1 2 ``` Thus there are 6 possible ways. In the second example, you have 4 posts and 3 colors which provides 66 valid combinations while maintaining the constraint.","solution":"def num_ways_to_paint_fence(n, k): MOD = 10**9 + 7 if n == 1: return k same = k % MOD diff = (k * (k - 1)) % MOD for i in range(3, n + 1): new_same = diff % MOD new_diff = (same * (k - 1) + diff * (k - 1)) % MOD same, diff = new_same, new_diff return (same + diff) % MOD"},{"question":"A software company is organizing a coding marathon where each participant is awarded points based on their performance on different challenges. However, to ensure fairness, the moderator wants to verify that the points distribution is correct. The task is to check if there exists any pair of participants such that their total score, when summed up, equals a given target value. Write a program to help the moderator with this task. Input The first line contains an integer N representing the number of participants. The second line contains N space-separated integers where each integer represents the score of a participant. The third line contains a single integer which is the target score. Output Print \\"YES\\" if there exists at least one such pair of participants\' scores that sum up to the target score. Otherwise, print \\"NO\\". Constraints 1 ≤ N ≤ 10^5 -10^4 ≤ Score of each participant ≤ 10^4 -10^5 ≤ Target Score ≤ 10^5 SAMPLE INPUT 5 1 2 3 4 5 9 SAMPLE OUTPUT YES","solution":"def find_sum_pair(n, scores, target): Check if there exists any pair of participants\' scores that sum up to the target score. :param n: The number of participants :param scores: A list of integers representing the scores of participants :param target: The target score to be checked :return: \\"YES\\" if there exists at least one pair of scores that sum up to the target score, otherwise \\"NO\\" seen = set() for score in scores: if (target - score) in seen: return \\"YES\\" seen.add(score) return \\"NO\\""},{"question":"You are given an array of integers. Your task is to count the number of \\"mountains\\" in the array. A \\"mountain\\" is defined as a subsequence of at least three consecutive elements that strictly increase to a peak (the middle element) and then strictly decrease. For example, in the subsequence [2, 3, 4, 3, 2], the peak is 4, and it\'s a valid mountain. Input The first line contains an integer n (3 ≤ n ≤ 1000), the length of the array. The second line contains n integers separated by spaces, denoting the elements of the array. Output Output a single integer, the number of mountains in the array. Examples Input 5 2 3 4 3 2 Output 1 Input 8 2 1 4 7 3 2 5 6 Output 1 Input 9 1 2 3 2 4 5 4 3 2 Output 2","solution":"def count_mountains(n, arr): Counts the number of mountains in the array. A \\"mountain\\" is defined as a subsequence of at least three consecutive elements that strictly increases to a peak and then strictly decreases. Parameters: n (int): Length of the array. arr (list): List of integers representing the array. Returns: int: Number of mountains in the array. if n < 3: return 0 num_mountains = 0 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: # We have found a peak, now check the sequence to the left and right left = i - 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 right = i + 1 while right < n - 1 and arr[right] > arr[right + 1]: right += 1 if i - left >= 1 and right - i >= 1: num_mountains += 1 return num_mountains"},{"question":"The tournament organizer is planning a round-robin chess tournament where every player plays against every other player exactly once. Given the number of players, you need to determine the total number of matches that will be held. -----Input:----- - The input consists of a single line containing an integer P which denotes the number of players. -----Output:----- Print a single integer denoting the total number of matches that will be held in the tournament. -----Constraints----- - 1 leq P leq 10^6 -----Sample Input 1:----- 4 -----Sample Output 1:----- 6 -----EXPLANATION:----- For 1) With 4 players, the number of matches are: Player 1 vs Player 2 Player 1 vs Player 3 Player 1 vs Player 4 Player 2 vs Player 3 Player 2 vs Player 4 Player 3 vs Player 4 Hence, total 6 matches.","solution":"def total_matches(P): Given the number of players P, calculates the total number of matches in a round-robin tournament. if P < 1: return 0 return P * (P - 1) // 2"},{"question":"On a distant planet named Zog, there is a new hierarchical structure designed to assign ranking within their military. The ranking system is abstract and follows these rules: 1. A soldier\'s rank is determined by an integer between 1 and N (inclusive), where 1 is the highest rank and N is the lowest rank. 2. Each rank has a specific number of soldiers assigned to it. Given the total number of soldiers and the number of ranks, write a function that calculates all possible ways to distribute the soldiers to the ranks such that the total number of soldiers is exactly the given number. More formally, given two integers `N` (the number of ranks) and `S` (the total number of soldiers), return the number of possible ways to distribute the soldiers among the `N` ranks. Each rank can hold zero or more soldiers, but the sum of soldiers must be exactly `S`. Constraints: - All values in input are integers. - 1 ≤ N ≤ 50 - 1 ≤ S ≤ 50 Input: ``` N S ``` Output: Print the number of possible ways to distribute the soldiers. Examples: Input: ``` 3 5 ``` Output: ``` 21 ``` Input: ``` 4 2 ``` Output: ``` 10 ``` Input: ``` 1 1 ``` Output: ``` 1 ```","solution":"def count_ways_to_distribute_soldiers(N, S): Returns the number of ways to distribute S soldiers among N ranks. Each rank can hold zero or more soldiers, but the sum must be exactly S. # Using combinatorics (stars and bars method) from math import comb # The number of ways to distribute S soldiers into N ranks # is equal to the number of ways of placing S indistinguishable items into N distinguishable bins. return comb(S + N - 1, N - 1)"},{"question":"You are working on a project where you need to implement a scheduling application for a conference. The conference consists of N sessions and M rooms. Each session can be in a different room, and each room can host at most one session at a time. Given the start and end times of each session, assign each session to a room in such a way that no two sessions overlap in the same room. A session with start time T_{start} and end time T_{end} can be allocated to a room if there is no other session assigned to that room which overlaps with it. A session S_i and S_j overlap if [ (T_{start_i} < T_{end_j}) text{ and } (T_{start_j} < T_{end_i}) ] -----Input----- The first line contains two integers N and M with 1 leq N, M leq 1000 representing the number of sessions and number of rooms, respectively. The next N lines each contain two integers T_{start} and T_{end} with 0 leq T_{start} < T_{end} leq 10^9 indicating the start and end times of each session. -----Output----- Output \\"Yes\\" if it is possible to schedule all sessions without any overlap in the same room; otherwise, output \\"No\\". -----Examples----- Sample Input 1: 3 2 1 5 2 6 6 8 Sample Output 1: Yes Sample Input 2: 3 1 1 4 2 5 7 8 Sample Output 2: No","solution":"def can_schedule_sessions(N, M, sessions): # Sort the sessions by start time sessions.sort(key=lambda x: x[0]) # List to keep track of end times of sessions in rooms room_end_times = [0] * M for start, end in sessions: # Attempt to find a room that is free for this session for i in range(M): if room_end_times[i] <= start: room_end_times[i] = end break else: # If no room was found return \\"No\\" return \\"Yes\\""},{"question":"# Problem Statement Implement a function `merge_sorted_arrays(arr1, arr2)` that takes two sorted arrays of integers, `arr1` and `arr2`, and merges them into a single sorted array. The final array must also be sorted in non-decreasing order. The function should not use any built-in sorting methods. # Function Signature ```python def merge_sorted_arrays(arr1: List[int], arr2: List[int]) -> List[int]: ``` # Input - Two sorted arrays of integers, `arr1` and `arr2`, where - `0 <= len(arr1), len(arr2) <= 10^5` - `-10^9 <= arr1[i], arr2[i] <= 10^9` # Output - A single sorted array containing all elements from `arr1` and `arr2`. # Example ```python arr1 = [1, 3, 5, 7] arr2 = [2, 4, 6, 8] merge_sorted_arrays(arr1, arr2) # Output: [1, 2, 3, 4, 5, 6, 7, 8] arr1 = [1, 2, 2, 2] arr2 = [2, 2, 2, 3] merge_sorted_arrays(arr1, arr2) # Output: [1, 2, 2, 2, 2, 2, 2, 3] ``` # Constraints - The function should have a time complexity of O(n + m), where `n` is the length of `arr1` and `m` is the length of `arr2`. - Auxiliary space complexity should be O(n + m).","solution":"from typing import List def merge_sorted_arrays(arr1: List[int], arr2: List[int]) -> List[int]: Merges two sorted arrays into a single sorted array without using built-in sort. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are given an encoded message which consists of alphabets, digits, and a special character \'*\'. The * character represents the point where the string should be reversed. Your task is to decode the message by reversing the part of the string that comes after the * character while leaving the part before the * unchanged. Input A single line containing a string S, which includes exactly one * character. Output A single line containing the decoded message. Subtask #1 (40 points) 1 ≤ |S| ≤ 100 Subtask #2 (60 points) 1 ≤ |S| ≤ 100000 Sample Input: hello*world Output: hellodlrow Explanation The part of the string before the * is \\"hello\\". The part after the * is \\"world\\" which, when reversed, becomes \\"dlrow\\". Thus, the decoded message is \\"hellodlrow\\".","solution":"def decode_message(s): Decodes the message by reversing the part of the string that comes after the * character. Args: s (str): The encoded message with exactly one * character. Returns: str: The decoded message. # Find the position of the * character split_index = s.index(\'*\') # Split the string into two parts before_star = s[:split_index] after_star = s[split_index + 1:] # Reverse the part after the * reversed_after_star = after_star[::-1] # Concatenate the before part and reversed after part decoded_message = before_star + reversed_after_star return decoded_message"},{"question":"story Sandra has recently joined a tech company and is assigned a task by her manager to check if a given file contains a balanced number of open and close brackets. Sandra needs to check the presence and correct pairing of different bracket types: `()`, `{}`, and `[]`. To pass this task, Sandra must ensure the file content is balanced with respect to brackets. problem Given a string `s` representing the content of a file, determine if the brackets within the string are balanced. A string is considered balanced if for every open bracket there is a corresponding closed bracket of the same type and if the brackets are properly nested. The types of brackets included are: - Round brackets: `()` - Curly brackets: `{}` - Square brackets: `[]` Input format The input is given in the following format: ``` s ``` The single line contains a string `s` which can include any printable ASCII characters. The input satisfies the following constraints: * 1 ≤ length of s ≤ 10^5 Output format Output \\"Balanced\\" if the string `s` contains balanced brackets, and output \\"Unbalanced\\" if the brackets are not balanced. Input example 1 ``` {[()]} ``` Output example 1 ``` Balanced ``` Input example 2 ``` {[(])} ``` Output example 2 ``` Unbalanced ``` Input example 3 ``` {[a+b]*(c-d)/(e+f)} ``` Output example 3 ``` Balanced ``` For example 1, the sequence of brackets is properly nested and balanced, so the output is \\"Balanced\\". In example 2, the brackets are not properly nested, as there is an open square bracket followed by a close round bracket, so the output is \\"Unbalanced\\". In example 3, the sequence of operators and operands is properly nested and balanced with respect to the bracket types, so the output is \\"Balanced\\".","solution":"def check_brackets_balance(s): Returns \'Balanced\' if the string `s` contains balanced brackets, otherwise returns \'Unbalanced\'. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return \\"Unbalanced\\" return \\"Balanced\\" if stack == [] else \\"Unbalanced\\""},{"question":"A certain Company wants to build the largest possible rectangular billboard on a piece of land they own. The land is represented as an n x m grid, where each cell is either empty or contains an obstacle. The billboard can only be placed on empty cells, and its sides must be aligned with the grid lines. Help the Company determine the area of the largest rectangular billboard that can be placed on the land. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The following n lines each contain m characters — either \'.\' (an empty cell) or \'#\' (an obstacle). Output Print a single integer — the area of the largest possible rectangular billboard. Examples Input 4 5 ....# .#... .#... ..#.. Output 6 Input 3 3 ..# # ..# Output 2","solution":"def maximal_rectangle_area(grid): if not grid: return 0 def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area n = len(grid) m = len(grid[0]) heights = [0] * m max_area = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, max_histogram_area(heights)) return max_area"},{"question":"The Universal Internet Service Provider (UISP) is upgrading its network. Their network is represented as a collection of nodes connected by bidirectional edges, where each node is a server and each edge is a direct connection between two servers. The UISP is particularly interested in the longest path in this network, the path with the maximum number of edges between any two nodes. Input: * The first line contains an integer N (1 ≤ N ≤ 10^4), the number of nodes. * The second line contains an integer M (0 ≤ M ≤ 10^4), the number of edges. * The next M lines each contain two integers u and v (1 ≤ u, v ≤ N), denoting a direct connection between nodes u and v. Output: * Output the length of the longest path in the network. Example: Input: 5 5 1 2 1 3 3 4 2 4 4 5 Output: 4 Explanation: The longest path in this network is: 1 -> 3 -> 4 -> 5 -> 2 or any reordering of nodes in a cycle. This path contains 4 edges.","solution":"from collections import defaultdict, deque def find_longest_path(N, M, edges): if N == 1: return 0 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start_node): visited = [-1] * (N + 1) visited[start_node] = 0 queue = deque([start_node]) farthest_node = start_node max_distance = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = visited[node] + 1 queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance # First BFS from any node to find the farthest node farthest_node, _ = bfs(1) # Second BFS from the farthest node found to find the longest path _, longest_path_length = bfs(farthest_node) return longest_path_length"},{"question":"A thief is planning to rob houses along a street. Each house has a certain amount of money stashed and the only constraint stopping the thief from robbing all the houses is that adjacent houses have security systems connected and will automatically contact the police if two adjacent houses are broken into on the same night. Given an integer array `nums` representing the amount of money of each house, return the maximum amount of money the thief can rob tonight without alerting the police. Input First line of input contains an integer `T` - the number of test cases. Each test case contains: - The first line contains an integer `n` - the number of houses. - The second line contains `n` space-separated integers representing the amount of money in each house. Output For each test case, print the maximum amount of money that can be robbed. Constraints 1 ≤ T ≤ 1000 1 ≤ n ≤ 100,000 0 ≤ nums[i] ≤ 1,000 SAMPLE INPUT 2 4 1 2 3 1 5 2 7 9 3 1 SAMPLE OUTPUT 4 12","solution":"def rob(nums): Given a list of integers representing the amount of money stashed in each house, returns the maximum amount of money the thief can rob without alerting the police. if not nums: return 0 if len(nums) == 1: return nums[0] prev1, prev2 = 0, 0 for num in nums: current = max(prev1, prev2 + num) prev2 = prev1 prev1 = current return prev1 def process_robbery_cases(T, cases): results = [] for i in range(T): _ = cases[i][0] # number of houses, not used nums = cases[i][1] results.append(rob(nums)) return results"},{"question":"In the game of Nim, players take turns removing at least one, but no more than a specified maximum number, of objects from a heap of objects. The player forced to remove the last object loses. Create a function: ``` def nim_winner(num_objects, max_remove): # returns which player (1 or 2) has a winning strategy ``` Your function should determine which player has a winning strategy given the number of objects in the heap and the maximum number of objects that can be removed in one turn. - num_objects: integer, the initial number of objects in the heap. - max_remove: integer, the maximum number of objects that can be removed in a single turn. The function should return 1 if the first player has a winning strategy, or 2 if the second player has a winning strategy. Example test cases: ``` nim_winner(10, 3) => 1 # Player 1 can always win by forcing the game into positions where player 2 is confronted with 1 more than a multiple of 4 objects. nim_winner(15, 4) => 2 # Player 2 will always win if both players play optimally. ```","solution":"def nim_winner(num_objects, max_remove): Determines which player has a winning strategy in the game of Nim. :param num_objects: int, the initial number of objects in the heap. :param max_remove: int, the maximum number of objects that can be removed in a single turn. :return: int, 1 if the first player has a winning strategy, 2 if the second player has a winning strategy. if (num_objects % (max_remove + 1)) == 0: return 2 else: return 1"},{"question":"John is playing a game where he has to form a palindrome by rearranging the characters of a given string. A palindrome is a string that reads the same backward as forward. Given a string S, help John determine if it is possible to rearrange the characters of S to form a palindrome. If possible, output \\"YES\\"; otherwise, output \\"NO\\". ------ Input Format ------ - The first line will contain an integer T - the number of test cases. Then the test cases follow. - Each of the next T lines will contain a string S. ------ Output Format ------ For each test case, output \\"YES\\" if it\'s possible to rearrange the characters of S to form a palindrome, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 Each character of S is a lowercase English letter. ----- Sample Input 1 ------ 3 civic ivicc hello ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ Test case 1: The string \\"civic\\" is already a palindrome. Test case 2: The string \\"ivicc\\" can be rearranged to form the palindrome \\"civic\\". Test case 3: The string \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(S): Determines if the characters of the string S can be rearranged to form a palindrome. Parameters: S (str): The string to check. Returns: str: \\"YES\\" if it\'s possible to rearrange S to form a palindrome, otherwise \\"NO\\". from collections import Counter char_count = Counter(S) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): results.append(can_form_palindrome(test_cases[i])) return results"},{"question":"John is working on a new project that involves processing and analyzing weather data collected from various sensors in a smart city. One part of his project is to determine a sequence of days for which the temperature was continuously increasing over a certain threshold. A temperature \'T\' is said to be an increasing temperature threshold if for each day `i` in the sequence, `T[i]` < `T[i+1]`. John wants to find the longest sequence of consecutive days where the temperatures were continuously increasing and the length of this sequence. Input The first line contains an integer `n` (1 ≤ `n` ≤ 10^5) - the number of days for which temperature data is available. The second line contains `n` integers T[1], T[2], ..., T[n], where `T[i]` (-10^4 ≤ `T[i]` ≤ 10^4) denotes the temperature on the ith day. Output Print a single integer - the length of the longest sequence of consecutive days with increasing temperatures. Example Input 10 1 2 2 3 4 2 3 4 5 1 Output 4 Explanation The longest sequence of days with continuously increasing temperatures in the given input is \\"2 3 4 5\\", which is of length 4.","solution":"def longest_increasing_temperature_sequence(n, temperatures): if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if temperatures[i] > temperatures[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"A: Find the Missing Number You are given an array of N-1 integers, which represents a sequence of numbers from 1 to N with exactly one number missing. Your task is to find the missing number. # Input - The first line contains an integer N (2 leq N leq 100) indicating the size of the complete sequence. - The second line contains N-1 space-separated integers, representing the sequence with one number missing. # Output - Output a single integer, the missing number. # Input Example 1 ``` 5 1 2 4 5 ``` # Output Example 1 ``` 3 ``` # Input Example 2 ``` 3 1 3 ``` # Output Example 2 ``` 2 ``` # Constraint - 2 leq N leq 100 # Explanation In the first example, the complete sequence should be [1, 2, 3, 4, 5]. The input array is [1, 2, 4, 5], so the missing number is 3. In the second example, the complete sequence should be [1, 2, 3]. The input array is [1, 3], so the missing number is 2.","solution":"def find_missing_number(N, sequence): Returns the missing number in the sequence from 1 to N with one number missing. total_sum = N * (N + 1) // 2 actual_sum = sum(sequence) return total_sum - actual_sum # Example usage: N = 5 sequence = [1, 2, 4, 5] print(find_missing_number(N, sequence)) # Output: 3"},{"question":"In a bustling town, there are n houses and m roads connecting them. Each house has a unique house number in the range from 1 to n. The town council has decided to install surveillance cameras on some of the houses to monitor the roads. If a camera is installed on a house, it will cover all the roads directly connected to that house. You have been put in charge of selecting houses for the installation such that: 1. Each road must be covered by at least one camera. 2. The total number of houses with cameras should be minimized. Given the layout of the town\'s houses and roads, determine the minimum number of houses that need to have a camera installed such that every road in the town is monitored by at least one camera. Input The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 2000) — the number of houses and the number of roads directly connecting them. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — the house numbers that each road connects. It is guaranteed that each pair of houses appears in this list at most once. Output Output a single integer — the minimum number of houses that should have a camera installed to ensure that every road is monitored. Examples Input 5 5 1 2 1 3 3 4 3 5 4 5 Output 2 Input 4 3 1 2 2 3 3 4 Output 2 Note In the first example, installing cameras on houses 1 and 3 would ensure that all roads are monitored. Similarly, in the second example, installing cameras on houses 2 and 3 would monitor all roads. In both cases, the number of cameras installed is minimized.","solution":"def min_cameras_to_cover_roads(n, m, roads): # Helper function to perform DFS and find articulation points def dfs(u, parent): nonlocal time time += 1 discovery[u] = low[u] = time children = 0 for v in adj[u]: if discovery[v] == -1: # v is not visited children += 1 parent_map[v] = u dfs(v, u) low[u] = min(low[u], low[v]) # u is an articulation point if either # 1. u is root and has more than one child. # 2. If u is not root and low value of one of its child is more than discovery value of u. if parent == -1 and children > 1: articulation_points.add(u) if parent != -1 and low[v] >= discovery[u]: articulation_points.add(u) elif v != parent: # Update low value of u for parent function calls. low[u] = min(low[u], discovery[v]) if m == 0: return 0 # Create adjacency list adj = {i: [] for i in range(1, n+1)} for u, v in roads: adj[u].append(v) adj[v].append(u) discovery = [-1] * (n + 1) low = [-1] * (n + 1) parent_map = [-1] * (n + 1) articulation_points = set() time = 0 # We assume the graph is connected, so we perform DFS from any vertex. for i in range(1, n + 1): if discovery[i] == -1: dfs(i, -1) return len(articulation_points) # Example usage: n = 5 m = 5 roads = [(1, 2), (1, 3), (3, 4), (3, 5), (4, 5)] print(min_cameras_to_cover_roads(n, m, roads)) # Output: 2 n = 4 m = 3 roads = [(1, 2), (2, 3), (3, 4)] print(min_cameras_to_cover_roads(n, m, roads)) # Output: 2"},{"question":"Given an array of integers, find the maximum length of a subarray that contains no more than two distinct integers. Example 1: Input: array = [1, 2, 1, 2, 3, 3, 4, 5] Output: 4 Explanation: The longest subarray that contains no more than two distinct integers is [1, 2, 1, 2] with length 4. Example 2: Input: array = [4, 4, 4, 4, 4] Output: 5 Explanation: The entire array contains only one distinct integer, so the maximum length is 5. Example 3: Input: array = [1, 2, 3, 4, 5] Output: 2 Explanation: Any subarray of length 2 that contains no more than two distinct integers is the longest. Your Task: You don\'t need to read or print anything. Your task is to complete the function maxLengthSubarray() which takes array as input parameter and returns the maximum length of the subarray that contains no more than two distinct integers. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= array.length <= 10^5 0 <= array[i] <= 10^5","solution":"def maxLengthSubarray(array): Returns the maximum length of a subarray that contains no more than two distinct integers. n = len(array) if n == 0: return 0 # Dictionary to count the number of occurrences of characters in the current window count = {} left = 0 max_length = 0 for right in range(n): if array[right] in count: count[array[right]] += 1 else: count[array[right]] = 1 while len(count) > 2: count[array[left]] -= 1 if count[array[left]] == 0: del count[array[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a list of strings, you are to group them by their lengths and sort each group in lexicographical order. -----Input----- n – the number of strings in the list, then n lines follow [1 <= n <= 10^5]. Each line contains one string: S [1 <= |S| <= 20] -----Output----- Output the groups of strings, each group separated by a blank line. Within each group, strings should be sorted lexicographically. The groups themselves should be sorted by the length of the strings they contain, in ascending order. -----Example----- Input: 6 apple bat carrot dog elephant ant Output: ant bat dog apple carrot elephant","solution":"def group_and_sort_strings(strings): Groups strings by their length and sorts each group in lexicographical order. from collections import defaultdict # Group by length groups = defaultdict(list) for string in strings: groups[len(string)].append(string) # Sort each group and prepare the output output = [] for length in sorted(groups.keys()): group = sorted(groups[length]) output.append(\\"n\\".join(group)) return \\"nn\\".join(output)"},{"question":"Alex is an avid gardener and maintains a rectangular garden of dimensions `n` by `m` filled with several types of plants. He wants to redesign his garden such that there are no two plants of the same type in the same row or column. To help Alex, you need to determine if such a rearrangement is possible, and if so, provide one example of the possible rearrangement. --- Input --- The first line contains two integers n and m (1 le n, m le 10^2) — the dimensions of the garden. The next n`lines each contain m integers representing the types of plants in the garden. Each type is represented by an integer t_{ij} (1 le t_{ij} le 100). --- Output --- If it is possible to rearrange the garden as required, print \\"Yes\\" followed by `n` lines containing the rearranged garden. If it is not possible, print \\"No\\". --- Example --- Input 3 3 1 2 3 3 1 2 2 3 1 Output Yes 1 2 3 2 3 1 3 1 2 --- Note --- Explanation of the example test: The example garden is already valid because there are no two plants of the same type in any row or column. Thus, we return the rearranged matrix which is the same as the input. This helps Alex\'s garden meet his design criteria.","solution":"def can_rearrange_garden(n, m, garden): Determines if it\'s possible to rearrange the garden such that no two plants of the same type are in the same row or column. import itertools def valid(perm): for i in range(len(perm)): row = perm[i] if len(set(row)) != len(row): return False for j in range(len(perm[0])): col = [perm[i][j] for i in range(len(perm))] if len(set(col)) != len(col): return False return True for perm in itertools.permutations(garden): if valid(perm): return (\\"Yes\\", perm) return (\\"No\\", None)"},{"question":"Jane has a word and number k. The word consists of lowercase English letters. Jane is interested in knowing how many unique substrings of a given length k are present in the word. She is particularly busy today and asks for your help to find all the unique substrings of length k. Your task is to identify all unique substrings of length k in the given word. Input The first line contains a string word of length n (1 ≤ n ≤ 100,000), consisting of lowercase English letters. The second line contains an integer k (1 ≤ k ≤ n). Output In the first line, print the number of unique substrings of length k. In the second line, print the unique substrings in lexicographical order. Examples Input abacaba 3 Output 4 aba bac cab aca Input abcabc 2 Output 3 ab bc ca","solution":"def find_unique_substrings(word, k): Returns the number of unique substrings of length k in the given word and the substrings in lexicographical order. if k > len(word): return 0, [] unique_substrings = set() for i in range(len(word) - k + 1): substr = word[i:i + k] unique_substrings.add(substr) sorted_substrings = sorted(unique_substrings) return len(sorted_substrings), sorted_substrings"},{"question":"A company is organizing a team-building event where the participants will form pairs and compete in several challenges. Each participant has a specific skill level. The organizers want to maximize the sum of the minimum skill levels of the pairs formed. Given an array of integers where each element represents the skill level of a participant, determine the maximum sum of the minimum skill levels for the pairs formed by the participants. Input The first line contains an integer N, the number of participants (N is even). The second line contains N integers separated by spaces, denoting the skill levels of the participants. Output Print a single integer, the maximum sum of the minimum skill levels of the pairs formed. Constraints: 2 ≤ N ≤ 10^5 1 ≤ skill levels ≤ 10^9 SAMPLE INPUT 6 1 2 3 4 5 6 SAMPLE OUTPUT 9 Explanation First, sort the array: [1, 2, 3, 4, 5, 6]. Form pairs from the sorted array: (1, 2), (3, 4), (5, 6). The minimum skill levels are 1, 3, and 5. The maximum sum of these minimum skill levels is 1 + 3 + 5 = 9.","solution":"def max_sum_of_min_pairs(skill_levels): Computes the maximum sum of the minimum skill levels of pairs formed by the participants. Parameters: skill_levels (list): List of integers representing skill levels of participants. Returns: int: Maximum sum of the minimum skill levels of pairs. skill_levels.sort() return sum(skill_levels[i] for i in range(0, len(skill_levels), 2))"},{"question":"You are playing a game where you need to place a character on a grid. The grid is of size NxM and is initialized with all cells containing a \'.\' character representing an empty cell. Your character is represented by the \'@\' symbol. The task is to count and print the number of positions the \'@\' character can be placed such that it is surrounded by empty cells on its top, bottom, left, and right. A character is considered to be surrounded only if it is not placed on the border of the grid and there are empty cells (\'.\') in all four cardinal directions from the character. -----Constraints----- - All values in input are integers. - 3 leq N, M leq 100 -----Input----- Input is given from Standard Input in the following format: N M -----Output----- Print the number of valid positions where the \'@\' can be placed such that it is surrounded by empty cells on its top, bottom, left, and right. -----Sample Input----- 4 5 -----Sample Output----- 6 Explanation: Here\'s a 4x5 grid initialized with \'.\', where \'@\' represents where your character can be placed: ``` ..... ..... ..... ..... ``` Valid positions for \'@\' are: (2, 2), (2, 3), (2, 4), (3, 2), (3, 3), (3, 4) Thus, there are 6 valid positions. [End of Question]","solution":"def count_valid_positions(N, M): Returns the number of valid positions where \'@\' character can be placed such that it is surrounded by empty cells on top, bottom, left, and right. # Valid positions should not be on the boundary, hence (N-2)*(M-2) if N < 3 or M < 3: return 0 return (N - 2) * (M - 2)"},{"question":"Given an array `arr` consisting of `N` integers, find the maximum difference between any two elements `arr[i]` and `arr[j]` (i.e., |arr[i] - arr[j]|) such that there is no other element in the array that lies between them in value. In other words, find the maximum absolute difference between the minimum and maximum value in any subset of at least two distinct elements, ensuring that all elements in the subset are either the minimum or the maximum of the subset. Example 1: Input: N = 5, arr = [1, 2, 3, 4, 5] Output: 4 Explanation: The maximum difference occurs between the values 1 and 5. Example 2: Input: N = 3, arr = [10, 1, 5] Output: 9 Explanation: The maximum difference occurs between the values 1 and 10. Your Task: This is a function problem. You only need to complete the function `maxDifference(arr, N)` that takes the array `arr` and the integer `N` as inputs and returns the maximum difference between any two such elements in the array. Expected Time Complexity: O(N log N) due to sorting. Expected Auxiliary Space: O(1) for the differential calculation. Constraints: 1 <= N <= 10^5 1 <= arr[i] <= 10^6","solution":"def maxDifference(arr, N): Returns the maximum difference between any two elements in the array such that there is no other element in the array that lies between them in value. if N < 2: return 0 min_val = min(arr) max_val = max(arr) return max_val - min_val"},{"question":"Given an input string (s) and a dictionary of words (wordDict), implement word break functionality. Determine if s can be segmented into a space-separated sequence of one or more dictionary words. The same word in the dictionary may be reused multiple times in the segmentation. Note: s could be empty and contains only lowercase letters a-z. wordDict is a list of non-empty words containing only lowercase letters a-z. Example 1: Input: s = \\"leetcode\\" wordDict = [\\"leet\\", \\"code\\"] Output: true Explanation: \\"leetcode\\" can be segmented as \\"leet code\\". Example 2: Input: s = \\"applepenapple\\" wordDict = [\\"apple\\", \\"pen\\"] Output: true Explanation: \\"applepenapple\\" can be segmented as \\"apple pen apple\\". Note that you are allowed to reuse dictionary words. Example 3: Input: s = \\"catsandog\\" wordDict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: false Explanation: \\"catsandog\\" cannot be completely segmented into dictionary words. The word \\"and\\" is missing between \\"cats\\" and \\"dog\\".","solution":"def word_break(s, wordDict): Returns True if s can be segmented into a space-separated sequence of one or more dictionary words. word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True # Base case: an empty string can be segmented. for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1]"},{"question":"``` Book Library Management System You are tasked with creating a simple Book class for a library management system. The Book class should have the following properties and methods: # Properties - **title**: a string that represents the title of the book, provided as an argument during the creation of a book instance. - **author**: a string that represents the author of the book, provided as an argument during the creation of a book instance. - **isbn**: a string that represents the International Standard Book Number, provided as an argument during the creation of a book instance. - **availability**: a boolean that indicates whether the book is available for loan, initialized to `true`. # Methods - **loan**: method that changes the availability of the book to `false`. - **return_book**: method that changes the availability of the book to `true`. - **display_info**: method that displays the book\'s details in the following format: ``` Title: <title> Author: <author> ISBN: <isbn> Available: <availability> ``` Implement this Book class such that the following usage scenarios are covered: Example Usage: ``` book = Book(\\"1984\\", \\"George Orwell\\", \\"978-0451524935\\") book.display_info() # Output: # Title: 1984 # Author: George Orwell # ISBN: 978-0451524935 # Available: True book.loan() book.display_info() # Output: # Title: 1984 # Author: George Orwell # ISBN: 978-0451524935 # Available: False book.return_book() book.display_info() # Output: # Title: 1984 # Author: George Orwell # ISBN: 978-0451524935 # Available: True ``` ```","solution":"class Book: def __init__(self, title, author, isbn): self.title = title self.author = author self.isbn = isbn self.availability = True def loan(self): self.availability = False def return_book(self): self.availability = True def display_info(self): print(f\\"Title: {self.title}\\") print(f\\"Author: {self.author}\\") print(f\\"ISBN: {self.isbn}\\") print(f\\"Available: {self.availability}\\")"},{"question":"=====Function Descriptions===== cumsum The cumsum tool returns the cumulative sum of the elements along a given axis. import numpy my_array = numpy.array([1, 2, 3, 4, 5]) print numpy.cumsum(my_array) #[ 1 3 6 10 15] diff The diff tool calculates the n-th order discrete difference along a given axis. import numpy my_array = numpy.array([1, 2, 4, 7, 0]) print numpy.diff(my_array) #[ 1 2 3 -7] prod The prod tool returns the product of array elements over a given axis. import numpy my_array = numpy.array([[1, 2], [3, 4]]) print numpy.prod(my_array) # 24 print numpy.prod(my_array, axis=0) #[ 3 8] print numpy.prod(my_array, axis=1) #[ 2 12] =====Problem Statement===== You are given a 2-D array, B. Your task is to print the cumulative sum along axis 1, the first-order difference along axis 0, and the product of elements along axis 1 of B. =====Input Format===== A single line of input containing the space separated elements of array B as rows, where each row is separated by a semicolon. =====Output Format===== On the first line, print the cumulative sum along axis 1 of B. On the second line, print the first-order difference along axis 0 of B. On the third line, print the product of elements along axis 1 of B. =====Sample Input===== 1 2 3;4 5 6 =====Sample Output===== [[ 1 3 6] [ 4 9 15]] [[3 3 3]] [ 6 120]","solution":"import numpy as np def array_operations(input_str): rows = input_str.split(\';\') B = np.array([list(map(int, row.split())) for row in rows]) cumsum_result = np.cumsum(B, axis=1) diff_result = np.diff(B, axis=0) prod_result = np.prod(B, axis=1) return cumsum_result, diff_result, prod_result # Example usage: # input_str = \'1 2 3;4 5 6\' # cumsum_result, diff_result, prod_result = array_operations(input_str) # print(cumsum_result) # print(diff_result) # print(prod_result)"},{"question":"Sara is exploring circular sequences of binary strings. A binary string is called circular if it can be rotated in a circular manner at least once and produces the same string. For example: ``` String \\"11001100\\" is a circular sequence, because it can be rotated to the left by 4 positions to get \\"11001100\\". String \\"101\\" is not a circular sequence, because any rotation of the string will not produce the same string. ``` Sara is given two binary strings, and she wants to determine whether the two strings are equivalent under some rotation. -----Input----- The input contains two lines of binary strings S_1 and S_2 of length L (1 leq L leq 10^5) each. Each string consists of characters \'0\' and \'1\' only. -----Output----- Output \\"YES\\" if the two strings are equivalent under some rotation, otherwise \\"NO\\". -----Examples----- Input 11001100 01100110 Output YES Input 101 010 Output NO -----Note----- In the first example, the string \\"11001100\\" can be rotated to the left by 2 positions to become \\"00110011\\" and then further rotated by 2 positions to become \\"01100110\\", which matches the second string. In the second example, no rotation of \\"101\\" produces \\"010\\".","solution":"def are_circular_equivalent(S1, S2): Returns \\"YES\\" if binary strings S1 and S2 are equivalent under some rotation, otherwise \\"NO\\". if len(S1) != len(S2): return \\"NO\\" # Create a double of S1 which will contain all possible rotations of S1 as substrings double_S1 = S1 + S1 # Check if S2 is a substring of the doubled S1 if S2 in double_S1: return \\"YES\\" else: return \\"NO\\""},{"question":"Cropto is learning about numbers and he wants to determine the highest power of 2 that divides a given number. You have been asked to help him with this challenge. Input The first line contains T, the number of test cases. Each of the next T lines contains a number N. Output For each test case, output the highest power of 2 that divides N. Constraints 1 ≤ N ≤ 1000000 1 ≤ T ≤ 100 Example Input: 3 8 12 18 Output: 8 4 2 Explanation Example case 1. The highest power of 2 that divides 8 is 8 (2^3). Example case 2. The highest power of 2 that divides 12 is 4 (2^2). Example case 3. The highest power of 2 that divides 18 is 2 (2^1).","solution":"def highest_power_of_2(N): Returns the highest power of 2 that divides N. return N & -N def process_test_cases(test_cases): results = [] for N in test_cases: results.append(highest_power_of_2(N)) return results # Assuming the input is being provided in a larger function/process # Sample function to handle such a case def main(input_list): T = input_list[0] numbers = input_list[1:T+1] return process_test_cases(numbers)"},{"question":"A company uses unique strings to identify its products. Each product identifier is a string containing lowercase English letters. To optimize their inventory management, they need to find the longest common prefix shared among all product identifiers in their inventory. If there\'s no common prefix, return an empty string \\"\\". Write a program to determine the longest common prefix among given product identifiers. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - For each test case, the first line contains a single integer N denoting the number of product identifiers. - The next N lines contain one product identifier each, consisting of lowercase English letters. ------ Output Format ------ For each test case, output the longest common prefix shared among all product identifiers. If there is no common prefix, output an empty string \\"\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 200 1 ≤ Length of each product identifier ≤ 200 ----- Sample Input 1 ------ 2 3 apple apricot ape 2 banana band ----- Sample Output 1 ------ ap ban ----- Explanation 1 ------ Test Case 1: The common prefix among \\"apple\\", \\"apricot\\", and \\"ape\\" is \\"ap\\". Test Case 2: The common prefix among \\"banana\\" and \\"band\\" is \\"ban\\".","solution":"def longest_common_prefix(strings): Returns the longest common prefix among all strings in the list. if not strings: return \\"\\" # Take the shortest string as reference, because the longest common prefix # can only be as long as the shortest string shortest_str = min(strings, key=len) for i, char in enumerate(shortest_str): for other_str in strings: if other_str[i] != char: return shortest_str[:i] return shortest_str def find_longest_common_prefix(test_cases): Given test cases, this function returns the longest common prefix for each one. :param test_cases: List of tuples, where each tuple contains data for one test case. Each tuple is of the form (N, product_identifiers) where N is the number of product identifiers and product_identifiers is a list of strings. :return: List of strings where each string is the longest common prefix for corresponding test case. results = [] for case in test_cases: results.append(longest_common_prefix(case[1])) return results"},{"question":"You are given an array of n integers and q queries. Each query can either be to update an element in the array or to find the number of distinct elements in a subarray. Implement a solution to handle these queries efficiently. The queries are of three types: - `1 i x`: Update the element at index i to x (1 ≤ i ≤ n, -10^9 ≤ x ≤ 10^9). - `2 l r`: Find the number of distinct integers in the subarray from index l to r (1 ≤ l ≤ r ≤ n). - `3 y`: Change all elements in the array greater than or equal to `y` to `y` (-10^9 ≤ y ≤ 10^9). Input The first line of the input consists of two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries respectively. The next line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the initial array. Each of the next q lines contains one of the three types of queries. Output For each query of type `2 l r`, print the number of distinct integers in the subarray from index l to r. Example # Input ``` 5 5 1 2 1 3 2 1 3 4 2 1 5 3 2 2 1 5 2 2 4 ``` # Output ``` 3 2 2 ``` Explanation Initial array: `[1, 2, 1, 3, 2]` - `1 3 4`: Update the 3rd element to 4. Modified array: `[1, 2, 4, 3, 2]` - `2 1 5`: The distinct elements in this subarray `[1, 2, 4, 3, 2]` are {1, 2, 3, 4}, so the answer is 4. - `3 2`: Change all elements in the array greater than or equal to 2 to 2. Modified array: `[1, 2, 2, 2, 2]` - `2 1 5`: The distinct elements in this subarray `[1, 2, 2, 2, 2]` are {1, 2}, so the answer is 2. - `2 2 4`: The distinct elements in this subarray `[2, 2, 2]` are {2}, so the answer is 1.","solution":"class DistinctElementCounter: def __init__(self, array): self.array = array self.n = len(array) def update_element(self, index, value): self.array[index - 1] = value def distinct_in_subarray(self, l, r): return len(set(self.array[l - 1:r])) def replace_elements_greater_than_or_equal_to(self, y): self.array = [min(el, y) for el in self.array]"},{"question":"You are given an array of strings. Each string contains only digits and has a non-zero length. Determine if the array satisfies all of the following conditions: - All strings are of the same length. - The strings in the array, when interpreted as integers, are in strictly increasing order. - Each string should not start with a zero, except the string itself is \\"0\\". -----Constraints----- - 1 ≤ N ≤ 10 (N is the number of elements in the array.) - 1 ≤ |Si| ≤ 10 (|Si| is the length of string Si.) -----Input----- Input is given from Standard Input in the following format: N S1 S2 ... SN -----Output----- If the array satisfies all of the conditions in the problem statement, print \\"Valid\\"; otherwise, print \\"Invalid\\". -----Sample Input----- 3 123 234 345 -----Sample Output----- Valid All strings are of the same length, each string when interpreted as integers is in strictly increasing order, and none of the strings start with a zero, so all the conditions are satisfied.","solution":"def validate_string_array(strings): Validates the array of strings based on the given conditions. if not strings: return \\"Invalid\\" # Check if all strings are the same length first_length = len(strings[0]) if not all(len(s) == first_length for s in strings): return \\"Invalid\\" # Check if each string is in strictly increasing order for i in range(1, len(strings)): if int(strings[i]) <= int(strings[i-1]): return \\"Invalid\\" # Check if no string starts with zero unless it is \'0\' for s in strings: if s[0] == \'0\' and s != \'0\': return \\"Invalid\\" return \\"Valid\\""},{"question":"You are given a list of transactions where each transaction is represented as a list. The first item in the transaction list is a string representing the type of transaction (either \\"deposit\\" or \\"withdrawal\\"), and the second item is an integer representing the amount of the transaction. Example data might look like: ```python [[\\"deposit\\", 100], [\\"withdrawal\\", 50], [\\"deposit\\", 200], [\\"withdrawal\\", 130]] ``` Write a function `calculate_balance()` that takes a list of transactions like the one above and returns the final balance. Assume the initial balance is 0, and all withdrawal transactions are valid (i.e., no overdrafts). For example, using the input above, `calculate_balance()` would return: ```python 120 ``` Explanation: - Initial balance: 0 - After first transaction (deposit 100): 100 - After second transaction (withdrawal 50): 50 - After third transaction (deposit 200): 250 - After fourth transaction (withdrawal 130): 120","solution":"def calculate_balance(transactions): Calculates the final balance given a list of transactions. Parameters: transactions (list): A list of lists where each sublist represents a transaction. Returns: int: The final balance after all transactions. balance = 0 for transaction in transactions: if transaction[0] == \\"deposit\\": balance += transaction[1] elif transaction[0] == \\"withdrawal\\": balance -= transaction[1] return balance"},{"question":"A large company maintains employee records where each employee has a unique ID and a set of skills each represented by an integer. You are given a number of queries, each asking for the number of employees who have at least a specified number of skills. Your task is to answer these queries efficiently. ------ Input Format ------ - The first line contains two integers n and q - the number of employees and the number of queries. - The next n lines each contain an integer followed by a list of integers. The first integer is the employee ID and the subsequent integers represent the skill set of that employee. - The next q lines each contain an integer representing the minimum number of skills. ------ Output Format ------ For each query, output an integer, the number of employees who have at least the specified number of skills. ------ Constraints ------ 1 ≤ n ≤ 2 times 10^5 1 ≤ q ≤ 10^5 1 ≤ length of skill list of any employee ≤ 10^5 Each skill is represented by a distinct integer. Each query integer is positive and not greater than the maximum number of skills any employee possesses. ------ Sample Input 1 ------ 5 3 101 3 44 33 102 2 33 77 103 4 55 44 33 77 104 1 33 105 5 22 33 44 55 66 1 4 3 ------ Sample Output 1 ------ 5 2 3 ------ Explanation 1 ------ For the first query, all employees have at least 1 skill, so the result is 5. For the second query, only employees 103 and 105 have at least 4 skills, so the result is 2. For the third query, employees 103, 105, and 101 have at least 3 skills, so the result is 3.","solution":"def count_employees_with_skills(n, q, employees, queries): Returns the count of employees who have at least the specified number of skills for each query. Parameters: n (int): Number of employees. q (int): Number of queries. employees (list): List of tuples. Each tuple contains an employee ID followed by the skills. Example: [(101, [3, 44, 33]), ...] queries (list): List of integers where each represents a minimum number of skills. Returns: list: List of integers representing the count of employees for each query. skill_counts = [len(skills) for _, skills in employees] skill_counts.sort(reverse=True) result = [] for query in queries: count = 0 for skill_count in skill_counts: if skill_count >= query: count += 1 else: break result.append(count) return result"},{"question":"Given a list of integers, determine whether it is possible to rearrange the elements of the list such that the list forms an arithmetic sequence. An arithmetic sequence is a sequence of numbers such that the difference between consecutive elements is constant. Note: - Each element in the list will not exceed 10^6 in absolute value. - The list size will not exceed 1000. Example 1: Input: [3, 5, 1] Output: true Explanation: The list can be rearranged as [1, 3, 5] which forms an arithmetic sequence with a common difference of 2. Example 2: Input: [1, 3, 8, 5] Output: false Explanation: There is no way to arrange these numbers to form an arithmetic sequence.","solution":"def can_form_arithmetic_sequence(arr): Determines if the given list of integers can be rearranged to form an arithmetic sequence. if len(arr) < 2: return True arr.sort() diff = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i-1] != diff: return False return True"},{"question":"A company is developing a new file system for their latest operating system. The file system is organized as a tree with N nodes representing directories. Each directory either has other subdirectories or no content at all (if it\'s a leaf node). The company wants to implement a feature to list all files in lexicographical order when a user navigates into a directory. For simplicity, assume all the directory names are distinct and consist of lowercase letters only. They need your help to get a list of all directories in lexicographical order starting from the root directory and moving through its subdirectories recursively. **Task:** Given the tree structure and the name of the root directory, return the list of all directory names in lexicographical order. # Input The input is given from Standard Input in the following format: - The first line contains an integer N, the number of directories. - The second line contains a string, the name of the root directory. - The following N-1 lines each contain two space-separated strings `parent` and `child`, indicating that `child` is a subdirectory of `parent`. # Output Print each directory\'s name, one per line, in lexicographical order as specified by the user\'s navigation. # Constraints - 1 ≤ N ≤ 100 - Directory names consist of lowercase English letters and are unique. # Example Input ``` 7 root root a root b a d a c b f b e ``` # Example Output ``` a c d b e f root ``` # Notes In the example given: - `a`, `b`, and `root` are directly under the root directory. - `c` and `d` are children of `a`. - `e` and `f` are children of `b`. - Starting from the root, when listing directories, you must first print `a, c, d` in order and then `b, e, f` in order.","solution":"def list_directories_lexicographically(N, root, directory_relations): from collections import defaultdict # Build the graph tree = defaultdict(list) for parent, child in directory_relations: tree[parent].append(child) for k in tree.keys(): tree[k].sort() result = [] def dfs(directory): result.append(directory) for child in tree[directory]: dfs(child) # Start from the root dfs(root) return result"},{"question":"You are involved in the development of a new online multiplayer game. To encourage players to stay engaged, the game awards points based on various in-game achievements and the time spent playing. To help you track player activity, you need to implement a scoring system that computes the total score for a given session. The scoring system works as follows: 1. Players earn 10 points for each achievement unlocked. 2. Players earn 5 points for every minute they spend in the game. 3. A bonus of 100 points is awarded if a player spends more than two hours (120 minutes) in a single session. You need to calculate the total score for a session given the number of achievements and the duration of the session in minutes. INPUT FORMAT: Line 1: 2 integers A and M - A: the number of achievements unlocked - M: the duration of the session in minutes CONSTRAINTS: 0 ≤ A ≤ 100 0 ≤ M ≤ 1440 OUTPUT FORMAT: Line 1: Total Score SAMPLE INPUT 3 150 SAMPLE OUTPUT 950","solution":"def calculate_score(achievements, minutes): Calculate the total score for a game session based on achievements and time spent. Args: achievements (int): The number of achievements unlocked. minutes (int): The duration of the session in minutes. Returns: int: The total score for the session. points_from_achievements = achievements * 10 points_from_time = minutes * 5 total_score = points_from_achievements + points_from_time # Award bonus if session is longer than 120 minutes if minutes > 120: total_score += 100 return total_score"},{"question":"Write a function that takes an input string of words separated by spaces, and returns a string where the words are reversed but their order remains the same. For example: ``` \\"hello world\\" --> \\"olleh dlrow\\" ``` Input will always be a single string containing only alphabetic characters and spaces, with at least one word, so don\'t worry about other types of input or empty strings.","solution":"def reverse_words(input_string): Returns a string where each word in the input_string is reversed but the order of words remains the same. Arguments: input_string -- a string containing words separated by spaces Returns: A new string with each word reversed but the order of words intact. words = input_string.split(\' \') reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Imagine a network of computers, each connected to at least one other computer, forming a network. Each computer can send data to any other computer through a direct or indirect connection of intermediate computers. To monitor the activity of the network, you can place a monitor on any computer. Once a monitor is placed, it can record the data traffic for all computers that it is able to communicate with. You need to determine the minimum number of monitors required to ensure that every computer\'s activity is recorded. -----Input----- The input consists of: - An integer `n` (1 ≤ n ≤ 1000), the number of computers. - An integer `m` (0 ≤ m ≤ 10000), the number of direct connections between computers. - `m` lines, each containing two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), representing a bidirectional direct connection between computer `u` and computer `v`. -----Output----- Output the minimum number of monitors required to record the activity of every computer in the network. -----Examples----- Sample Input 1: 4 3 1 2 2 3 3 4 Sample Output 1: 1 Sample Input 2: 5 2 1 2 3 4 Sample Output 2: 3 Sample Input 3: 6 3 1 2 2 3 4 5 Sample Output 3: 3","solution":"from collections import defaultdict, deque def min_monitors(n, m, connections): def bfs(node, visited, graph): queue = deque([node]) visited[node] = True while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Create the graph using adjacency list representation graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = 0 # Traverse each node. If not visited, perform BFS and count the component. for i in range(1, n + 1): if not visited[i]: components += 1 bfs(i, visited, graph) return components"},{"question":"You are given a sequence of integers a_1, a_2, ..., a_N. Your task is to find the smallest difference between the sums of any two non-overlapping subsequences of the original sequence. A subsequence is defined as a sequence derived by deleting some or no elements without changing the order of remaining elements. Note that the subsequences must have at least one element. # Constraints - 1 leq N leq 15 - -10^3 leq a_i leq 10^3 # Input The input consists of the following: - An integer N representing the number of elements in the sequence. - A space-separated list of N integers a_1, a_2, ..., a_N. # Output Output the smallest possible value of the absolute difference between the sums of any two non-overlapping subsequences. # Examples **Input** ``` 5 3 1 4 1 5 ``` **Output** ``` 0 ``` **Input** ``` 3 -1 2 -3 ``` **Output** ``` 0 ``` **Input** ``` 4 7 3 2 8 ``` **Output** ``` 0 ``` In the first example, one optimal solution is to compare the subsequences [3, 1] and [4], and [1, 5]. Another optimal solution is to ensure the sums of non-overlapping subsequences are equal, thus the smallest difference is 0.","solution":"from itertools import combinations def smallest_difference_sums(N, arr): if N == 1: return abs(arr[0]) total_combinations = [] # Generate all non-empty subsequences for r in range(1, N + 1): for comb in combinations(arr, r): total_combinations.append(sum(comb)) min_diff = float(\'inf\') # Compare each pair of sums and find the smallest difference length = len(total_combinations) for i in range(length): for j in range(i + 1, length): min_diff = min(min_diff, abs(total_combinations[i] - total_combinations[j])) return min_diff"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},F={class:"card-container"},j={key:0,class:"empty-state"},Y=["disabled"],P={key:0},R={key:1};function M(s,e,l,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",F,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",j,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,Y)):u("",!0)])}const L=d(A,[["render",M],["__scopeId","data-v-8d16046c"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/13.md","filePath":"quotes/13.md"}'),z={name:"quotes/13.md"},U=Object.assign(z,{setup(s){return(e,l)=>(n(),i("div",null,[x(L)]))}});export{B as __pageData,U as default};
